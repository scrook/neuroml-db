<!-- MAIN -->
                        <div id="main">
                                <!-- wrapper-main -->
                                <div class="wrapper">

                                        <!-- content -->
                                        <div id="content">

                                                <!-- title -->
                                                <div id="page-title">
                                                        <span class="title">NeuroML Version 2.0</span>
                                                </div>
 <ul class="filter">
                                                <li></li>
                                                <li><a href="/neuromlv2" >NeuroML version 2.0 beta</a></li>
                                                <li class="active"><a href="/lems_dev" > LEMS Mapping </a></li>
                                                <li><a href="/libnml" > libNeuroML </a></li>
                                                <li><a href="/compatibility" > Compatibility With Others </a></li>
                                                <li><a href="/specifications" > NML Specifications  </a></li>
                                                <li><a href="/examples" > Examples </a></li>

                                        </ul>


<h2>Development of LEMS & mapping to NeuroML 2</h2>

    <p><a href=http://lems.github.io/jLEMS/index.html>LEMS (Low Entropy Model Specification)</a> is a new XML based language with interpreter developed by Robert Cannon for specifying 
        generic models of dynamical systems. <b>ComponentType</b> (<b>ComponentClass</b> has also been used as a name for these, see <a href="compatibility#NineML">below</a>)
        elements which specify <b>Parameter</b>s, <b>StateVariable</b>s and their dynamical <b>Behaviour</b>s can be defined as templates for model elements (e.g.
        HH ion channels, abstract cells, etc.). <b>Components</b> are instances of these with specific values of <b>Parameters</b> (e.g. HH squid axon Na<sup>+</sup>
        channel, I&amp;F cell with threshold -60mV, etc.). </p>

    <p>A Java package, the LEMS Reference Implementation (LRI) which includes examples of LEMS files together with the interpreter for executing them is available
        <a href="http://lems.github.io/jLEMS/index.html">here</a>.</p>

    <p>A core set of <b>ComponentType</b>s describing the behaviour of dynamical elements in NeuroML 2 has been defined in LEMS:</p>
    <ul>
<li>Cell models: <a href="http://www.neuroml.org/NeuroML2CoreTypes/Cells.html">Cells.xml</a> (<a href="https://github.com/NeuroML/NeuroML2/blob/master/NeuroML2CoreTypes/Cells.xml?view=markup">source in LEMS</a>)</li>
        <li>Network elements: <a href="http://www.neuroml.org/NeuroML2CoreTypes/Networks.html">Networks.xml</a> (<a href="https://github.com/NeuroML/NeuroML2/blob/master/NeuroML2CoreTypes/Networks.xml?view=markup">source in LEMS</a>)</li>
        <li>Ion channels: <a href="http://www.neuroml.org/NeuroML2CoreTypes/Channels.html">Channels.xml</a> (<a href="https://github.com/NeuroML/NeuroML2/blob/master/NeuroML2CoreTypes/Channels.xml?view=markup">source in LEMS</a>)</li>
        <li>Synapse models: <a href="http://www.neuroml.org/NeuroML2CoreTypes/Synapses.html">Synapses.xml</a> (<a href="https://github.com/NeuroML/NeuroML2/blob/master/NeuroML2CoreTypes/Synapses.xml?view=markup">source in LEMS</a>)</li>
        <li>Mapping of PyNN cells & synapses: <a href="http://www.neuroml.org/NeuroML2CoreTypes/PyNN.html">PyNN.xml</a> (<a href="https://github.com/NeuroML/NeuroML2/blob/master/NeuroML2CoreTypes/PyNN.xml?view=markup">source in LEMS</a>)</li>
        <li>Dimensions/units allowed: <a href="http://www.neuroml.org/NeuroML2CoreTypes/NeuroMLCoreDimensions.html">NeuroMLCoreDimensions.xml</a> (<a href="https://github.com/NeuroML/NeuroML2/blob/master/NeuroML2CoreTypes/NeuroMLCoreDimensions.xml?view=markup">source in LEMS</a>)</li>
    </ul>
    <p>These serve as the basis for <b>Component</b> definitions in NeuroML 2 files, e.g. <a href="http://neuroml.org/NeuroML2CoreTypes/Cells.html#izhikevichCell">izhikevichCell</a>,
            <a href="http://neuroml.org/NeuroML2CoreTypes/Cells.html#iafTauCell">iafTauCell</a>,
            <a href="http://neuroml.org/NeuroML2CoreTypes/Channels.html#ionChannelHH">ionChannelHH</a>, etc. The behaviour of the model element (e.g. the behaviour of v in terms of threshold, reset, tau in a
        simple I&amp;F cell) is specified in the <b>ComponentType</b>, and the user only has to supply the name of the <b>ComponentType</b> and give parameter values to create a <b>Component</b>
        in their NeuroML file.</p><br/>

    <p align="center"><img alt="ComponentTypes & Components" src="images/LEMS_NML2_Ex0_IaF.png"/></p>
    <p align="center"><i>This image shows the usage of LEMS ComponentTypes & Components in NeuroML</i></p>


    <p>Note that specifying a <b>Component</b> does not imply that an instance of the model is created. Instances will only be instantiated when the cells are created in a
        <b>population</b> which is present in a <b>network</b>.</p>

    <p>Using LEMS to specify the core of NeuroML version 2 has the following significant advantages:</p>
    <table id="highlighted" align="center" >
        <tr><td>
                NeuroML 2 XML files can be used standalone by applications in the same way as NeuroML v1.x, without using LEMS, easing the transition for v1.x compliant applications
                <br/><br/>Any NeuroML 2 <b>ComponentType</b> can be extended and will be usable by any application (e.g. the <a href="http://lems.github.io/jLEMS/index.html">LEMS Reference Implementation</a>) which understands LEMS</td></tr>
    </table>

    <p>The first point above means that a parsing application does not have to natively read the LEMS type definition for, e.g. an <b>izhikevichCell</b> element, it just has to map the NeuroML element
        parameters onto its own object implementing that entity. The behaviour should be the same and should be tested against the reference LEMS implementation.</p>

    <p>The second point above means that if an application does support LEMS, it can automatically parse
        (and generate code for) a wide range of NeuroML 2 cells, channels and synapses, including any
        new <b>ComponentType</b> derived from these, without having to natively know anything about channels, cell models, etc.</p>

<h2>Specifications & examples</h2>

    <p>The table below summarises the current specifications for LEMS & NeuroML 2. </p>

    <table  id="longlist"  align="center"  width="500"><tr><th width="200">&nbsp;</th><th width="100">Specification</th><th width="100">Documentation</th><th width="100">Examples</th></tr>
        <tr><td>LEMS</td><td><a href="https://github.com/LEMS/LEMS/blob/master/Schemas/LEMS/LEMS_v0.6.xsd">LEMS_v0.6.xsd</a></td><td><a href="http://lems.github.com/jLEMS/elements.html">LEMS element definitions</a></td><td><a href="https://github.com/LEMS/jLEMS/tree/master/examples">LEMS examples</a></td></tr>
       <tr><td>NeuroML v2beta</td><td><a href="https://github.com/NeuroML/NeuroML2/blob/master/Schemas/NeuroML2/NeuroML_v2beta.xsd">NeuroML_v2beta.xsd</a></td><td><a href="http://www.neuroml.org/NeuroML2CoreTypes/Cells.html">NeuroML 2 Core ComponentTypes</a></td><td><a href="https://github.com/NeuroML/NeuroML2/tree/master/examples">NeuroML 2 examples</a></td></tr>
    </table>

    <h2>Implementations & APIs in Java and Python</h2>

    <p>The table below summarises the different capabilities of the Java and Python libraries for handling LEMS & NeuroML. <a name="libNeuroML">&nbsp;</a></p>

    <table  id="longlist"  align="center"  width="500"><tr><th width="200">&nbsp;</th><th width="100">Java</th><th width="100">Python</th></tr>
        <tr><td>Read, validate_relationships & execute LEMS XML files</td><td><a href="http://github.com/LEMS/jLEMS/">jLEMS</a></td><td><a href="https://github.com/LEMS/pylems">PyLEMS</a></td></tr>
        <tr><td>Read & write NeuroML 2 files</td><td><a href="https://github.com/NeuroML/org.neuroml.model">Java API for NeuroML 2</a></td><td><a href="https://github.com/NeuralEnsemble/libNeuroML">libNeuroML</a></td></tr>
        <tr><td>Everything...</td><td><a href="https://github.com/NeuroML/jNeuroML">jNeuroML</a><br/><i>Parse & execute LEMS; validate_relationships NeuroML v1/v2; convert LEMS to graphical format, NEURON, Brian, etc.; convert SBML to LEMS...</i></td><td>&nbsp;</td></tr>
    </table>


    <h2>What's missing?</h2>
    <p>A summary of the holes & areas of current work in the current specifications...</p>
    <ul>
        <li><b>Network connection templates:</b> more advanced options for defining connectivity between populations of cells is required.
            This is being worked on in collaboration with development for <a href="pynn">PyNN</a></li>

        <li><b>Support for multi compartment modelling in LEMS:</b> While the NeuroML v2beta Schema supports description of
            multi compartmental conductance based neuronal models, the LEMS interpreter can only execute single compartment cell models at present.</li>
        
        <li><b>Better numerical integration in LEMS:</b> At present jLEMS uses a simple forward Euler numerical integration method by default, 
            limiting the size and speed of simulations. Other numerical integration options are in development...</li>
    </ul>
                                                                <div class="clear"></div>
                                                <!-- ENDS project column (right) -->


                                        </div>
                                        <!-- ENDS content -->

                                </div>
                                <!-- ENDS wrapper-main -->
                        </div>
                        <!-- ENDS MAIN -->


