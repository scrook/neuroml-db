// Cell: cSTUT189_L6_LBC_1f1d59d3f5_0_0
/*
{
  "id" : "cSTUT189_L6_LBC_1f1d59d3f5_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-9.54279, 2.1457, 0.213728, 3.05026", "-8.50245, 1.95075, 0.185339, 5.11751", "-7.4621, 1.75581, 0.15695, 8.02784", "-6.42175, 1.56087, 0.12856, 9.03175", "-5.38141, 1.36592, 0.100171, 9.83239", "-4.34106, 1.17098, 0.0717818, 10.6884", "-3.30071, 0.976035, 0.0433924, 11.5727", "-2.26037, 0.781092, 0.0150031, 12.0226", "-1.22002, 0.586148, -0.0133862, 12.0435", "-0.179673, 0.391205, -0.0417756, 12.0367", "0.860674, 0.196261, -0.0701649, 12.0298", "1.90102, 0.0013176, -0.0985543, 12.0232", "2.94137, -0.193626, -0.126944, 12.0171", "3.98171, -0.388569, -0.155333, 12.011", "5.02206, -0.583513, -0.183722, 12.0049", "6.06241, -0.778456, -0.212112, 11.8239", "7.10276, -0.9734, -0.240501, 11.3971", "8.1431, -1.16834, -0.26889, 10.4445", "9.18345, -1.36329, -0.29728, 7.79982", "10.2238, -1.55823, -0.325669, 5.2634", "11.2641, -1.75317, -0.354058, 3.00159" ]
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "3.49319, 7.05962, -1.57561, 6.41", "3.48583, 7.33245, -1.66099, 6.41", "3.38277, 11.1529, -2.85655, 3.68", "3.31733, 13.5788, -3.61573, 3.61", "3.26301, 15.5922, -4.24579, 3.61", "3.22159, 17.1278, -4.72635, 3.39" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500007958597263
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-9.51681, 3.41162, -6.38561, 2.06", "-11.6512, 6.1893, -5.45799, 2.06", "-13.1555, 8.06592, -4.98974, 1.18", "-13.9525, 9.02481, -4.79588, 1.18", "-14.7755, 10.0223, -4.63217, 1.18", "-15.6387, 11.0853, -4.40226, 1.18", "-16.5877, 12.2813, -4.1129, 1.18", "-17.8656, 13.8069, -3.89124, 1.18", "-18.5859, 14.6794, -3.73428, 1.18", "-19.5856, 15.9155, -3.4711, 1.18", "-20.977, 17.7056, -3.01047, 1.55", "-21.4382, 18.3278, -2.80896, 1.99" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500007958597263
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-9.51681, 3.41162, -6.38561, 0.81", "-11.6977, 2.84811, -6.68782, 0.81", "-13.3996, 2.24283, -6.8711, 0.81", "-14.2052, 1.85163, -6.93067, 0.96", "-15.5067, 0.963216, -6.9694, 0.96", "-16.0371, 0.499407, -6.96298, 0.96", "-17.0113, -0.529155, -7.00715, 0.96", "-17.2467, -0.918193, -7.05046, 0.96", "-17.7115, -1.82773, -7.18679, 0.66", "-18.314, -3.03086, -7.4407, 1.18", "-18.6383, -3.62177, -7.59893, 1.18", "-19.6023, -5.08116, -8.05427, 1.18", "-20.8685, -6.68859, -8.58688, 1.18", "-21.8567, -7.83176, -8.92744, 1.11", "-22.5355, -8.60147, -9.10526, 1.11", "-23.4307, -9.67319, -9.3396, 0.88", "-23.921, -10.3084, -9.53118, 0.88", "-24.7258, -11.4544, -9.90023, 1.33", "-25.5979, -12.7845, -10.3862, 1.33", "-26.6073, -14.3742, -11.1387, 1.03", "-27.6347, -16.1164, -12.0713, 0.74", "-29.0242, -18.7284, -13.5808, 1.18", "-29.366, -19.4291, -14.0077, 1.18", "-29.6886, -20.2207, -14.496, 0.88", "-30.1712, -21.6666, -15.3341, 0.59", "-30.4935, -22.7975, -15.967, 1.4", "-30.6962, -23.5119, -16.302, 1.4", "-30.9492, -24.3409, -16.6631, 1.77", "-31.7124, -26.3534, -17.6645, 0.88", "-32.0576, -27.1095, -18.081, 0.88", "-33.1547, -29.1989, -19.2349, 0.88", "-33.859, -30.2712, -19.9922, 1.11", "-34.6191, -31.305, -20.7829, 0.74", "-35.1928, -32.0198, -21.3361, 0.74", "-36.0747, -33.0261, -22.1127, 0.74", "-36.8363, -33.9453, -22.7623, 1.47", "-38.5317, -36.1241, -23.9945, 0.07", "-39.0869, -36.8452, -24.4051, 1.11", "-39.6644, -37.5424, -24.8096, 0.07", "-40.103, -37.9836, -25.0913, 0.66", "-40.8874, -38.6235, -25.5158, 1.33", "-42.4598, -39.6773, -26.3155, 0.07", "-43.7728, -40.4132, -26.8888, 1.18", "-44.233, -40.6362, -27.1097, 1.18", "-45.6031, -41.2259, -27.8106, 0.07", "-45.9841, -41.3739, -28.0211, 0.07", "-47.3916, -41.8607, -28.8274, 1.25", "-48.1756, -42.1063, -29.3011, 0.81", "-49.6401, -42.5314, -30.1184, 0.37", "-50.5867, -42.8177, -30.6489, 1.18", "-52.0369, -43.3035, -31.4636, 0.44", "-52.5033, -43.4922, -31.715, 0.44", "-52.8022, -43.6363, -31.8616, 0.44", "-53.9283, -44.2906, -32.4496, 1.47", "-54.9828, -44.9672, -32.9719, 0.07", "-55.8302, -45.5456, -33.3633, 1.11", "-56.6842, -46.1262, -33.6835, 0.15", "-57.5527, -46.6983, -33.9751, 0.15", "-58.7554, -47.4758, -34.3208, 1.4", "-59.3478, -47.8573, -34.4943, 1.4", "-59.8478, -48.1839, -34.6269, 1.4", "-61.2627, -49.2175, -35.1115, 0.22", "-61.9816, -49.8378, -35.4435, 0.22", "-62.4783, -50.3419, -35.7358, 0.22", "-63.4992, -51.4705, -36.5746, 1.99", "-64.3184, -52.4522, -37.3787, 0.07", "-65.4205, -53.894, -38.6153, 1.55", "-66.3313, -55.1761, -39.7606, 0.07", "-67.1103, -56.3099, -40.7681, 1.47", "-68.5767, -58.4287, -42.6992, 0.07", "-69.2424, -59.3778, -43.5196, 0.88", "-69.8356, -60.2042, -44.1891, 0.29", "-70.3552, -60.9486, -44.6762, 0.29", "-70.7248, -61.5073, -44.9594, 1.25", "-71.998, -63.5488, -45.6651, 0.29", "-72.7677, -64.8505, -45.9208, 0.29", "-73.3231, -65.8292, -46.0743, 1.4", "-74.1291, -67.3369, -46.243, 0.07", "-74.552, -68.2118, -46.3046, 1.18", "-74.8574, -68.9626, -46.3196, 1.18", "-75.0734, -69.6123, -46.3292, 1.18", "-75.3549, -70.5232, -46.4293, 0.07", "-75.5747, -71.2227, -46.5605, 0.07", "-75.774, -71.7064, -46.698, 1.03", "-76.6069, -73.2593, -47.2145, 0.07", "-77.6207, -74.6399, -47.7504, 0.07", "-78.2839, -75.343, -48.1001, 1.03", "-78.5748, -75.6056, -48.2418, 1.03", "-79.9338, -76.7105, -48.8404, 0.07", "-80.7736, -77.332, -49.1879, 0.59", "-82.3144, -78.3739, -49.8128, 0.07", "-83.9437, -79.5133, -50.5265, 0.59", "-84.7427, -80.086, -50.927, 0.07", "-85.2645, -80.4511, -51.2285, 0.96", "-86.2098, -81.0867, -51.8878, 0.07", "-86.8444, -81.4453, -52.4264, 0.59", "-88.1348, -81.9692, -53.679, 0.07", "-88.8767, -82.1087, -54.4867, 1.47", "-89.772, -82.1807, -55.7075, 0.07", "-90.4182, -82.2232, -56.7173, 1.11", "-91.3998, -82.2655, -58.3197, 0.07", "-91.7592, -82.2841, -58.8947, 1.18", "-92.905, -82.3653, -60.6506, 0.52", "-94.7127, -82.6695, -63.6086, 0.52", "-95.9763, -83.0288, -65.6701, 0.07", "-96.2991, -83.1708, -66.2376, 1.18", "-97.5939, -83.9964, -68.7077, 0.07", "-98.3199, -84.6404, -70.25, 1.11", "-99.414, -86.1754, -73.1287, 0.07", "-99.6468, -86.7281, -73.9752, 1.11", "-100.267, -89.5974, -77.7716, 0.44", "-100.37, -90.5573, -78.9648, 1.03", "-100.383, -91.8771, -80.4889, 1.03", "-100.31, -93.6734, -82.469, 0.07", "-100.228, -94.9735, -83.917, 1.25", "-100.156, -96.1827, -85.3473, 0.59", "-100.157, -97.4209, -87.041, 0.59", "-100.288, -98.2212, -88.4237, 0.37", "-100.393, -98.4806, -89.0317, 0.37", "-100.943, -99.1236, -91.3502, 0.81", "-101.052, -99.2008, -91.7517, 0.81", "-102.065, -99.6709, -95.1881, 0.52", "-102.335, -99.7439, -96.0408, 0.52", "-102.917, -99.7631, -97.6525, 0.52", "-104.048, -99.5916, -100.305, 0.52", "-104.378, -99.5158, -100.951, 0.52", "-104.552, -99.4658, -101.259, 0.52", "-105.208, -99.2782, -102.165, 0.52", "-105.731, -99.1519, -102.807, 0.52", "-107.174, -98.841, -104.133, 0.52", "-108.918, -98.5067, -105.438, 0.52", "-109.76, -98.3887, -106.051, 0.15", "-110.719, -98.2968, -106.739, 0.15", "-111.173, -98.2869, -107.047, 0.15", "-112.333, -98.3023, -107.767, 0.15", "-113.36, -98.3356, -108.226, 0.15", "-114.906, -98.3237, -108.708, 0.29" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500007958597263,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "9.58319, -4.83438, 5.49439, 1.11", "9.63425, -4.9724, 5.49439, 1.11", "9.95569, -5.84134, 5.49439, 1.11", "10.3278, -6.84689, 5.49439, 1.11", "10.6911, -7.82903, 5.49439, 1.11", "11.0468, -8.79035, 5.49439, 1.11", "11.5964, -10.2759, 5.49439, 0.74" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500007958597263
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "5.25319, -6.83888, -1.63561, 1.18", "5.36052, -7.22693, -1.63416, 1.18", "5.82208, -8.65832, -1.62944, 1.18", "6.25068, -9.92443, -1.39845, 0.96", "6.59575, -10.8981, -1.1628, 0.96", "6.9209, -11.8236, -0.920124, 0.96", "7.47256, -13.4524, -0.485295, 1.33", "8.01202, -15.1925, 0.0361644, 1.69", "8.87614, -18.4533, 1.19442, 0.88", "9.08002, -19.6054, 1.64453, 0.88", "9.1521, -20.4073, 1.9715, 0.88", "9.12979, -21.2294, 2.29427, 0.88", "8.88796, -22.7004, 2.82222, 0.52", "8.50458, -24.033, 3.19302, 0.52", "8.00015, -25.3069, 3.43241, 0.81", "7.54338, -26.3165, 3.61653, 0.81", "6.67445, -28.1581, 3.91879, 0.81", "6.23684, -29.1014, 4.04798, 0.81", "5.48416, -30.8444, 4.24863, 1.11", "4.77914, -32.5332, 4.4505, 0.81", "4.47657, -33.2664, 4.55549, 1.11", "3.92212, -34.6453, 4.77261, 0.88", "3.52786, -35.6784, 4.94373, 0.88", "2.79214, -37.8044, 5.29068, 0.88", "2.43351, -38.9886, 5.47074, 0.59", "2.20012, -39.8194, 5.57965, 0.59", "1.76154, -41.342, 5.7586, 0.59", "1.27191, -42.8137, 5.90374, 0.59", "0.901514, -43.7789, 5.9728, 0.59", "0.389081, -45.0239, 6.01584, 0.81", "0.00597862, -45.9946, 6.07504, 0.81", "-0.625411, -47.6519, 6.22873, 0.96", "-1.17784, -49.2355, 6.41678, 0.96", "-1.52529, -50.415, 6.58123, 0.96", "-1.81524, -51.7282, 6.80246, 0.96", "-2.15601, -54.0145, 7.29147, 0.44", "-2.23122, -55.0353, 7.54643, 0.44", "-2.25539, -55.7445, 7.74626, 0.44", "-2.26459, -56.2313, 7.89488, 0.44", "-2.34201, -57.6283, 8.31728, 0.52", "-2.47083, -58.7448, 8.62219, 0.52", "-2.57358, -59.4588, 8.77195, 0.52", "-2.76737, -60.8414, 9.02127, 0.52", "-2.99893, -62.7343, 9.3041, 0.81", "-3.09322, -63.9212, 9.44062, 0.81", "-3.17194, -65.1061, 9.51744, 0.66", "-3.29924, -66.9982, 9.57472, 0.66", "-3.40222, -68.5781, 9.57538, 0.66", "-3.45745, -69.7019, 9.54449, 0.66", "-3.53505, -71.1767, 9.46392, 1.03", "-3.71988, -73.2544, 9.34021, 0.81", "-4.00326, -75.4297, 9.2046, 0.81", "-4.24008, -76.761, 9.15321, 0.81", "-4.59761, -78.5069, 9.13396, 0.81", "-4.79145, -79.4269, 9.14912, 0.81", "-5.22439, -81.7192, 9.25129, 0.81", "-5.35617, -82.6163, 9.32018, 0.81", "-5.57482, -84.3538, 9.54615, 0.66", "-5.69295, -85.54, 9.75112, 1.03", "-5.76737, -87.0139, 10.04, 0.44", "-5.72724, -87.9142, 10.2308, 0.44", "-5.5803, -88.8399, 10.4342, 0.52", "-5.22861, -90.5555, 10.7848, 0.96", "-4.84402, -92.4037, 11.1637, 0.37", "-4.69619, -93.2467, 11.3538, 0.37", "-4.66031, -93.782, 11.5042, 0.37", "-4.70648, -94.8024, 11.8439, 0.37", "-4.86399, -95.7308, 12.1831, 0.37", "-5.25749, -97.3504, 12.871, 0.37", "-5.57879, -98.465, 13.4037, 0.37", "-6.14056, -100.335, 14.2995, 0.37", "-6.45176, -101.392, 14.8055, 0.59", "-6.84578, -102.877, 15.495, 0.59", "-7.42848, -105.243, 16.5039, 0.29", "-7.48359, -105.474, 16.5873, 0.29", "-7.85288, -107.056, 17.0599, 0.59", "-7.96494, -107.666, 17.1823, 0.59", "-8.18849, -109.157, 17.3769, 0.59", "-8.378, -110.489, 17.4761, 1.69", "-8.5555, -111.606, 17.5015, 1.69", "-8.78427, -113.243, 17.537, 1.25", "-8.97863, -114.96, 17.5719, 0.66", "-9.08599, -116.055, 17.5918, 0.66", "-9.21119, -117.396, 17.6126, 0.37", "-9.28451, -118.335, 17.5963, 0.37", "-9.38906, -119.67, 17.536, 1.4", "-9.56447, -121.026, 17.4384, 1.18", "-9.74703, -122.035, 17.3466, 0.81", "-10.0199, -123.452, 17.205, 0.37", "-10.2734, -124.632, 17.0848, 0.37", "-10.4799, -125.391, 17.01, 0.37", "-10.9849, -126.886, 16.8743, 0.66", "-11.3675, -127.87, 16.8007, 0.66", "-11.9399, -129.347, 16.7265, 0.66", "-12.3872, -130.731, 16.6982, 0.66", "-12.6425, -131.716, 16.7069, 0.66", "-12.8052, -132.766, 16.7459, 0.52", "-12.8527, -134.031, 16.8243, 0.52", "-12.795, -135.805, 16.977, 0.66", "-12.5794, -138.034, 17.231, 0.66", "-12.4435, -138.842, 17.3954, 0.66", "-12.0834, -140.33, 17.797, 0.44", "-11.9198, -140.853, 17.9831, 0.44", "-11.5909, -141.694, 18.3662, 0.44", "-11.2097, -142.661, 18.8837, 0.44", "-10.3466, -144.928, 20.272, 0.44", "-9.88659, -146.223, 21.0911, 0.44", "-9.54638, -147.215, 21.7189, 0.44", "-9.21153, -148.015, 22.2734, 0.44" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500007958597263,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-7.91681, -3.47588, -8.44561, 1.03", "-7.92293, -3.47789, -8.47671, 1.03", "-7.99281, -3.52841, -8.87866, 1.03", "-8.03575, -3.57345, -9.16986, 1.03", "-8.13242, -3.65001, -9.70518, 1.03", "-8.20524, -3.69222, -10.065, 1.03", "-8.96111, -4.01877, -13.4546, 1.25", "-9.0714, -4.04373, -13.9407, 1.25", "-9.36456, -4.06368, -15.2853, 1.25", "-9.53819, -4.05256, -16.0837, 0.59", "-9.63023, -4.03749, -16.4848, 0.59", "-9.70039, -4.02401, -16.708, 0.96", "-10.2498, -3.89751, -17.0669, 0.07", "-10.4472, -3.84053, -17.1842, 0.07", "-10.6734, -3.80015, -17.3422, 0.37", "-11.0131, -3.80669, -17.6827, 0.37", "-11.1385, -3.8186, -17.919, 1.18", "-11.3434, -3.8322, -18.3994, 1.18", "-11.8449, -3.85378, -19.6929, 0.74", "-12.2452, -3.82028, -20.8481, 1.4", "-12.3482, -3.79222, -21.2, 1.4", "-12.9838, -3.44016, -24.0286, 0.88", "-13.1506, -3.31238, -24.8672, 1.33", "-13.1986, -3.26662, -25.1253, 1.33", "-13.417, -2.98473, -26.4094, 1.33", "-13.6968, -2.53442, -28.1073, 1.33", "-14.2501, -1.6264, -31.2104, 1.03", "-14.3331, -1.49767, -31.6216, 0.59", "-14.4472, -1.35068, -32.1018, 0.59", "-14.801, -0.996172, -33.3064, 1.4", "-14.939, -0.911201, -33.6518, 1.4", "-16.1457, -0.497511, -35.9041, 0.59", "-16.4595, -0.452909, -36.3454, 0.59", "-16.8987, -0.431134, -36.9504, 0.22", "-17.3447, -0.439336, -37.5399, 1.33", "-18.694, -0.524655, -39.2464, 0.15", "-18.9282, -0.542498, -39.5433, 0.15", "-19.3476, -0.565355, -40.0925, 1.25", "-20.5163, -0.565963, -41.7474, 0.37", "-20.7592, -0.552601, -42.1058, 0.37", "-21.3587, -0.494422, -42.9393, 1.55", "-21.6119, -0.453279, -43.2863, 1.55", "-22.6553, -0.244654, -44.6706, 0.52", "-22.8512, -0.201529, -44.8957, 0.52", "-23.0721, -0.148388, -45.0901, 0.52", "-23.6459, 0.0127863, -45.5219, 1.55", "-25.4129, 0.587941, -46.6682, 0.29", "-26.0793, 0.851475, -47.0961, 0.29", "-27.0274, 1.30405, -47.6575, 1.25", "-27.9612, 1.85772, -48.3438, 0.22", "-28.3807, 2.16396, -48.7428, 0.22", "-28.5691, 2.35134, -49.0312, 0.22", "-29.0423, 2.89278, -50.095, 1.25", "-29.1484, 3.0116, -50.4611, 1.25", "-29.5626, 3.41288, -52.2382, 1.25", "-29.8312, 3.6105, -53.5079, 1.25", "-30.3266, 3.84577, -55.694, 1.25", "-30.6806, 3.92677, -57.0489, 1.25", "-31.2943, 3.95548, -59.002, 0.37", "-31.4724, 3.93984, -59.4787, 0.37", "-31.5325, 3.92743, -59.6002, 0.37", "-31.8883, 3.84815, -60.0964, 1.11", "-32.692, 3.74428, -60.7627, 0.74", "-33.1644, 3.75076, -61.045, 0.22", "-33.6215, 3.8073, -61.2364, 0.22", "-33.9257, 3.87196, -61.3646, 0.22", "-34.572, 4.0534, -61.6267, 0.74", "-35.5299, 4.42776, -62.056, 0.29", "-35.8891, 4.59792, -62.213, 0.74", "-36.3494, 4.84313, -62.4342, 0.07", "-36.7633, 5.09168, -62.6377, 0.07", "-36.9051, 5.18024, -62.7061, 0.37", "-37.7362, 5.65303, -63.2125, 0.37", "-38.1003, 5.82392, -63.4434, 0.37", "-38.4247, 5.93424, -63.6804, 0.37", "-38.6596, 5.98286, -63.9026, 0.37", "-38.8478, 6.00567, -64.0951, 0.37", "-39.9091, 6.07467, -65.1759, 0.37", "-40.2605, 6.05345, -65.53, 0.37", "-40.5158, 6.02779, -65.7886, 0.37", "-41.4708, 5.91683, -66.701, 0.37", "-41.759, 5.88684, -66.9538, 0.37", "-42.2682, 5.84582, -67.3341, 0.37", "-43.4308, 5.76934, -68.0122, 0.15", "-43.7139, 5.77491, -68.1763, 0.15", "-44.1743, 5.82167, -68.4222, 0.15", "-44.612, 5.9022, -68.6251, 0.15", "-45.1146, 6.0409, -68.8581, 0.15", "-45.67, 6.25424, -69.0997, 1.4", "-47.1073, 6.95278, -69.6542, 0.07", "-47.4346, 7.13113, -69.7973, 0.52", "-47.8559, 7.37794, -69.9944, 0.07", "-48.264, 7.63739, -70.1855, 0.07", "-48.6626, 7.92413, -70.3765, 0.07", "-49.0516, 8.23187, -70.5472, 0.07", "-49.6884, 8.67521, -70.7626, 0.07", "-49.9273, 8.82773, -70.8658, 0.07" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500007958597263,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "11.9332, -0.264889, -1.25561, 1.25", "12.009, -0.269329, -1.25561, 1.25", "12.9874, -0.326625, -1.25561, 1.25", "13.8973, -0.379904, -1.25561, 1.25", "14.9419, -0.441077, -1.25561, 1.25", "15.505, -0.474051, -1.25561, 1.25" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500007958597263
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "11.2641, -1.75317, -0.354058, 1.17638", "26.0075, -4.51584, -0.354058, 1.17638", "40.7509, -7.27851, -0.354058, 1.17638" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_39",
    "id" : "dend_39",
    "points3d" : [ "3.22159, 17.1278, -4.72635, 1.55", "2.72497, 17.7351, -2.99745, 1.55" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "3.22159, 17.1278, -4.72635, 0.88", "4.49231, 22.5531, -4.25104, 0.88", "4.67887, 23.2964, -4.1651, 0.88", "5.46497, 26.0676, -3.85208, 0.66", "6.54008, 29.558, -3.50357, 1.18", "6.94517, 30.8079, -3.36457, 1.18", "7.42508, 32.2303, -3.19109, 1.47", "8.00951, 33.9127, -2.73962, 1.47", "8.32815, 34.758, -2.52746, 1.47", "9.13914, 36.574, -2.17411, 1.47", "10.0131, 38.731, -2.07729, 1.47", "10.1791, 39.1013, -2.05661, 1.84" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-21.4382, 18.3278, -2.80896, 0.52", "-23.9546, 18.8288, -0.741331, 0.52", "-25.1352, 19.2749, 0.352831, 0.37", "-25.9034, 19.6877, 1.08579, 0.37", "-26.7565, 20.2707, 1.90184, 0.81", "-27.6948, 21.0089, 2.75791, 0.81", "-30.4225, 23.2192, 4.88394, 0.81", "-31.1394, 23.8595, 5.32257, 0.81", "-31.8514, 24.5535, 5.70302, 0.81", "-32.417, 25.1148, 6.02883, 0.81", "-33.1913, 25.8084, 6.4696, 0.81", "-35.0628, 27.0409, 7.40651, 1.25", "-36.2757, 27.5668, 7.87914, 1.25", "-37.5554, 27.9832, 8.41019, 0.66", "-39.6813, 28.6422, 9.46321, 1.03", "-40.7388, 28.9819, 10.0415, 1.03", "-42.5729, 29.6722, 11.115, 1.03", "-43.6994, 30.2108, 11.8105, 1.03", "-44.9158, 30.9422, 12.5461, 0.74", "-46.8289, 32.4545, 13.829, 0.96", "-47.4523, 33.1114, 14.344, 0.96", "-48.1695, 34.1047, 15.1296, 0.96", "-48.6676, 34.978, 15.8041, 0.96", "-48.9097, 35.4801, 16.1822, 0.96", "-49.9076, 37.7556, 17.8795, 0.74", "-50.8018, 39.5515, 19.2129, 0.44", "-51.0407, 39.9956, 19.5617, 0.44", "-51.4816, 40.793, 20.1773, 0.44", "-51.8409, 41.4017, 20.5794, 0.44", "-52.1356, 41.8931, 20.8027, 0.44", "-52.8648, 43.0639, 21.0725, 0.81", "-53.1348, 43.477, 21.1352, 0.81", "-54.6293, 45.5299, 21.6283, 0.44", "-55.4632, 46.5131, 21.9984, 0.44", "-56.2903, 47.4046, 22.4869, 0.44", "-56.7883, 47.9311, 22.8021, 0.44", "-57.491, 48.672, 23.2892, 0.44", "-58.8508, 49.9547, 24.268, 0.59", "-60.0672, 50.8146, 25.164, 0.59", "-61.3189, 51.6043, 26.2872, 0.22" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "-21.4382, 18.3278, -2.80896, 1.33", "-21.9295, 20.7794, -3.36919, 1.33", "-22.3307, 22.2634, -3.7018, 0.96", "-22.9053, 23.9913, -4.07403, 1.33", "-23.6211, 25.7759, -4.43521, 1.03", "-24.3665, 27.3213, -4.71936, 1.03", "-24.8007, 28.2216, -4.8849, 1.03", "-25.455, 29.2718, -5.12872, 1.03", "-26.0239, 30.0421, -5.26747, 1.03", "-26.9133, 31.0752, -5.36193, 1.03", "-27.9001, 32.0634, -5.41357, 1.92" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "11.5964, -10.2759, 5.49439, 0.74", "12.0594, -12.5125, 5.53016, 0.74", "12.3638, -14.0567, 5.57194, 0.44", "12.6006, -15.3307, 5.6045, 0.44", "12.9047, -17.6522, 5.63813, 0.52", "13.0893, -20.4499, 5.64222, 0.52", "13.1107, -21.2699, 5.63313, 0.52", "13.0739, -22.5249, 5.64933, 0.52", "12.9479, -23.739, 5.63215, 0.52", "12.6904, -25.5925, 5.55439, 0.52", "12.4723, -27.0772, 5.438, 0.37", "12.3028, -28.5305, 5.30843, 0.37", "12.2074, -29.8585, 5.25738, 0.37", "12.198, -31.5816, 5.2606, 0.88", "12.3407, -33.7601, 5.33304, 0.52", "12.4658, -34.8272, 5.41191, 0.52", "12.6894, -36.4147, 5.56434, 0.44", "12.9937, -38.6194, 5.80305, 0.74", "13.2452, -40.2005, 5.9823, 0.29", "13.4203, -41.0866, 6.07981, 0.29", "13.8359, -42.9284, 6.25278, 0.96", "14.2841, -44.6797, 6.40652, 0.44", "14.5286, -45.6259, 6.46431, 0.44", "14.8655, -46.8728, 6.51478, 0.52", "15.1339, -47.9314, 6.56115, 0.52", "15.4289, -49.05, 6.60148, 0.52", "15.9555, -50.9264, 6.68469, 0.52", "16.1806, -51.8996, 6.74709, 0.52", "16.3934, -53.2752, 6.83776, 0.44", "16.4401, -53.9766, 6.90122, 0.44", "16.511, -55.3426, 7.04225, 0.44", "16.5297, -56.2855, 7.13892, 0.44", "16.5584, -57.7549, 7.27745, 0.88", "16.6021, -58.7082, 7.39273, 0.88", "16.7278, -60.2594, 7.62262, 0.37", "16.8938, -61.9262, 7.9048, 0.22" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "11.5964, -10.2759, 5.49439, 0.66", "12.8717, -9.1422, 6.79577, 0.66", "13.1396, -8.90869, 7.05358, 0.66", "14.1069, -8.21568, 7.94253, 0.66", "14.4755, -7.98327, 8.24701, 0.66", "15.0246, -7.63713, 8.70048, 0.66", "16.3842, -6.77995, 9.82343, 0.96", "17.0535, -6.3999, 10.3394, 0.96", "18.5553, -5.5928, 11.51, 0.96", "19.3449, -5.18285, 12.1183, 0.44" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "15.505, -0.474051, -1.25561, 0.74", "16.0732, 0.337204, -1.45763, 0.74", "16.6729, 0.999739, -1.67067, 0.74", "17.3944, 1.70879, -1.90009, 0.74", "18.5893, 2.76921, -2.25817, 0.74", "19.4365, 3.45174, -2.49385, 0.74", "20.3222, 4.08512, -2.7617, 0.74", "21.5091, 4.77492, -3.13138, 0.74", "22.4247, 5.24503, -3.40132, 0.74", "23.2793, 5.64535, -3.62479, 0.96", "24.6088, 6.26144, -3.90238, 0.96", "26.2787, 7.11513, -4.29863, 0.59", "27.157, 7.61542, -4.50888, 0.59", "28.2468, 8.25155, -4.78161, 0.74", "29.315, 8.86451, -5.04843, 0.74", "30.3392, 9.48075, -5.28535, 0.74", "32.5306, 10.866, -5.73293, 0.74", "33.1183, 11.2539, -5.83194, 1.4", "34.1632, 11.993, -6.04556, 1.18", "34.7887, 12.4538, -6.18767, 1.18", "35.5307, 13.042, -6.35808, 1.03", "36.2397, 13.5913, -6.4979, 1.03", "37.2836, 14.3341, -6.68798, 0.66", "38.7101, 15.2503, -7.02737, 0.66", "39.1616, 15.5252, -7.15627, 0.66", "39.6493, 15.7562, -7.32613, 0.66", "40.6664, 16.0318, -7.70323, 0.66", "42.2862, 16.206, -8.26829, 0.66", "43.2535, 16.2545, -8.59896, 0.66", "43.3953, 16.2611, -8.64327, 0.96", "44.7839, 16.3965, -9.06866, 0.88", "46.1147, 16.6184, -9.45585, 0.88", "47.4629, 16.9725, -9.86888, 0.59", "49.2394, 17.575, -10.3859, 0.59", "50.252, 17.971, -10.6916, 0.59", "50.8906, 18.255, -10.8725, 0.59", "51.9512, 18.7884, -11.1485, 0.59", "53.4082, 19.5057, -11.5384, 1.03", "54.1573, 19.8056, -11.7199, 1.03", "54.5756, 19.9295, -11.8049, 1.03", "56.1491, 20.3648, -12.1858, 0.44", "56.5624, 20.4915, -12.2873, 0.44", "57.5785, 20.8802, -12.5219, 0.59", "58.7838, 21.5031, -12.7497, 0.59", "59.5857, 21.9796, -12.895, 0.59", "61.1589, 22.9643, -13.1666, 0.88", "62.1311, 23.6271, -13.3536, 0.88", "62.7386, 24.0815, -13.5119, 0.88", "64.0447, 25.1234, -13.9087, 0.59", "65.2688, 26.0427, -14.3019, 0.59", "66.2114, 26.6737, -14.6372, 0.59", "67.2922, 27.3532, -15.0382, 0.59", "69.0067, 28.4152, -15.6761, 0.59", "69.4304, 28.6838, -15.8485, 0.59", "70.62, 29.4715, -16.3423, 0.37", "71.8215, 30.3334, -16.8262, 1.47", "72.771, 31.0221, -17.1591, 1.47", "74.8584, 32.5243, -17.7783, 0.52", "76.3069, 33.5694, -18.1552, 0.96", "77.3106, 34.3052, -18.4193, 0.22", "77.6481, 34.5562, -18.5039, 0.22", "78.4812, 35.1373, -18.6788, 0.22", "79.1475, 35.5658, -18.8163, 1.03", "80.2465, 36.2417, -19.061, 0.07", "80.9318, 36.6533, -19.1903, 0.88", "81.5438, 37.0232, -19.2742, 0.88", "81.9733, 37.2844, -19.3198, 0.88", "85.4256, 39.3704, -19.5763, 0.07", "86.4486, 39.9673, -19.6165, 1.4", "87.5938, 40.6196, -19.6298, 0.37", "89.4742, 41.6799, -19.6754, 0.07", "90.1724, 42.0655, -19.6952, 0.74", "90.9992, 42.5074, -19.7127, 0.74", "91.583, 42.8081, -19.7134, 0.74", "93.6767, 43.8901, -19.7128, 0.22", "94.8315, 44.4721, -19.7495, 1.03", "95.6453, 44.8542, -19.8016, 1.03", "97.343, 45.5673, -19.8779, 0.15", "98.0498, 45.8163, -19.8719, 0.59", "98.8465, 46.041, -19.823, 0.59", "99.4842, 46.1589, -19.7485, 0.59", "100.853, 46.3164, -19.5379, 0.07", "102.306, 46.4087, -19.3114, 0.22", "104.038, 46.4358, -19.0464, 0.22", "105.049, 46.4348, -18.8991, 1.62", "106.06, 46.4275, -18.7595, 1.62", "107.306, 46.438, -18.5999, 0.07", "108.389, 46.4759, -18.4803, 0.07", "109.334, 46.5904, -18.4322, 0.07", "110.006, 46.7403, -18.4474, 0.07", "110.513, 46.8961, -18.4669, 0.07", "111.28, 47.1899, -18.5638, 1.11", "112.1, 47.5612, -18.7254, 1.11", "113.656, 48.3299, -19.1064, 0.07", "114.336, 48.6668, -19.2864, 0.07", "115.24, 49.0976, -19.5348, 0.07", "116.889, 49.8727, -20.0121, 0.29", "117.386, 50.0889, -20.1525, 0.29", "118.121, 50.3802, -20.3356, 0.29", "119.21, 50.7753, -20.5806, 0.29", "119.551, 50.9014, -20.6522, 0.96", "121.167, 51.5476, -20.9855, 0.07", "122.231, 51.981, -21.1725, 0.07", "123.35, 52.4318, -21.3865, 0.07", "124.571, 52.9108, -21.625, 0.74", "125.317, 53.1878, -21.7875, 0.74", "126.655, 53.6346, -22.0688, 0.07", "127.712, 53.9346, -22.2748, 0.07", "128.195, 54.055, -22.3594, 0.52", "129.395, 54.306, -22.5386, 0.07", "130.84, 54.5469, -22.687, 1.47", "132.613, 54.8597, -22.8139, 0.07", "133.256, 54.9894, -22.8347, 0.96", "134.497, 55.2962, -22.829, 0.07", "134.862, 55.4042, -22.8136, 0.07", "136.375, 55.9312, -22.6857, 0.07", "138.284, 56.6883, -22.4381, 0.07", "139.358, 57.1895, -22.2517, 1.18", "140.396, 57.718, -22.0448, 0.07", "141.386, 58.2727, -21.8254, 0.07", "142.179, 58.7427, -21.636, 0.37", "142.95, 59.2367, -21.454, 0.37", "144.874, 60.4578, -21.0359, 0.29", "145.563, 60.8975, -20.9072, 0.29", "146.15, 61.2752, -20.8206, 0.66", "147.667, 62.28, -20.6268, 0.96", "148.707, 62.9471, -20.5574, 0.07", "149.533, 63.4423, -20.5548, 0.52", "149.761, 63.5682, -20.571, 0.52", "150.385, 63.8954, -20.6203, 0.52", "151.454, 64.394, -20.7062, 0.52", "152.785, 64.9921, -20.8146, 0.22", "153.591, 65.3553, -20.866, 1.18", "153.935, 65.521, -20.8865, 0.07", "154.95, 66.0433, -20.9328, 0.07", "155.573, 66.4342, -20.943, 0.07", "157.015, 67.5436, -20.9048, 0.07", "157.388, 67.8974, -20.8738, 0.07", "157.952, 68.5239, -20.813, 0.88", "158.57, 69.309, -20.7297, 0.88", "159.553, 70.7789, -20.5774, 0.07", "160.09, 71.6719, -20.4822, 0.07", "160.361, 72.155, -20.4266, 0.07", "160.694, 72.7249, -20.3656, 1.03", "160.947, 73.1386, -20.3242, 1.03", "161.595, 74.111, -20.2296, 0.07", "162.175, 74.8669, -20.1567, 0.07", "162.5, 75.2486, -20.1176, 0.07", "163.095, 75.8754, -20.0649, 0.07", "163.847, 76.5947, -20.0127, 1.03", "164.993, 77.5503, -19.9493, 0.07", "165.542, 77.9469, -19.9239, 0.74", "166.403, 78.4585, -19.9024, 0.74", "167.244, 78.8587, -19.8948, 0.07", "167.769, 79.0425, -19.8977, 0.07", "168.902, 79.3239, -19.9087, 0.07", "169.414, 79.4233, -19.9127, 0.81", "171.184, 79.7722, -19.9051, 0.07", "171.685, 79.8828, -19.8699, 1.03", "172.517, 80.1045, -19.7563, 1.03", "174.017, 80.6359, -19.4748, 0.07", "174.339, 80.7848, -19.3991, 0.07", "174.905, 81.0868, -19.2485, 0.96", "176.133, 81.8368, -18.8847, 0.22", "176.909, 82.3472, -18.6191, 0.22", "177.489, 82.7571, -18.3964, 0.22", "178.365, 83.3654, -18.054, 0.22", "179.008, 83.7744, -17.8255, 0.22", "179.777, 84.1984, -17.5974, 0.22", "180.591, 84.6009, -17.416, 0.88", "180.878, 84.73, -17.3549, 0.88", "181.92, 85.1251, -17.1629, 0.22", "182.534, 85.3202, -17.0682, 0.22", "183.448, 85.5489, -16.9628, 0.22", "184.209, 85.6878, -16.905, 0.22", "184.768, 85.7876, -16.8621, 1.11", "185.92, 85.9896, -16.736, 0.07", "186.914, 86.1809, -16.606, 0.07", "187.411, 86.2777, -16.5383, 0.07", "187.506, 86.2985, -16.5245, 1.03", "189.077, 86.6393, -16.3083, 0.07", "189.641, 86.7672, -16.2355, 0.07", "190.843, 87.0184, -16.1148, 0.07", "192.056, 87.2148, -15.9698, 0.07", "192.633, 87.2998, -15.8964, 1.18", "193.497, 87.4432, -15.7859, 0.15", "194.282, 87.5894, -15.691, 0.15", "195.988, 88.0566, -15.4304, 0.15", "197.261, 88.4832, -15.1734, 0.44", "198.431, 88.9522, -14.9376, 0.44", "199.99, 89.6575, -14.637, 0.15", "201.001, 90.1865, -14.4461, 0.15", "202.227, 90.9364, -14.2278, 0.15", "204.261, 92.3937, -13.9061, 0.15", "205.222, 93.1247, -13.7997, 0.15", "206.178, 93.8492, -13.7027, 0.15", "206.875, 94.3715, -13.6437, 0.15", "207.578, 94.9107, -13.6013, 0.15", "208.131, 95.3369, -13.5991, 0.15", "208.795, 96.0546, -13.6679, 0.15" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "15.505, -0.474051, -1.25561, 0.66", "16.9435, -0.411625, -0.608484, 0.66", "17.6278, -0.321302, -0.309547, 0.66", "18.8626, -0.092515, 0.211342, 0.66", "20.1859, 0.229248, 0.756098, 0.66", "21.2006, 0.498119, 1.17059, 0.66", "22.5777, 0.88761, 1.72055, 0.66", "23.2663, 1.15325, 1.98763, 0.66", "23.7546, 1.36213, 2.17208, 0.66", "24.3255, 1.59244, 2.39298, 0.66", "25.5461, 1.98784, 2.89669, 0.66", "26.0486, 2.09754, 3.12475, 0.66", "27.2063, 2.17783, 3.73092, 0.66", "28.3744, 2.05218, 4.38388, 0.59", "29.6341, 1.69824, 5.13654, 0.59", "30.1793, 1.4523, 5.50604, 0.81", "30.4811, 1.28373, 5.71737, 0.81", "31.5529, 0.662734, 6.4589, 1.18", "32.6067, 0.0258826, 7.17396, 1.18", "33.6299, -0.604893, 7.83444, 1.62", "35.3304, -1.54057, 8.82307, 1.11", "36.2475, -1.98573, 9.33107, 0.74", "37.0236, -2.31395, 9.73675, 0.59", "37.1596, -2.35987, 9.79879, 0.59", "38.3799, -2.65196, 10.3183, 0.59", "39.7115, -2.83309, 10.744, 0.44", "40.1536, -2.82858, 10.8351, 0.44", "40.7556, -2.78272, 11.0218, 0.44", "41.2152, -2.73803, 11.1927, 0.44", "41.6008, -2.68471, 11.3406, 0.44", "41.8739, -2.65597, 11.4471, 0.44", "42.6536, -2.68111, 11.7497, 0.44", "44.1368, -2.92043, 12.2418, 0.88", "44.9192, -3.105, 12.4681, 0.52", "45.5619, -3.2732, 12.6558, 0.52", "46.841, -3.5902, 13.0265, 0.52", "48.157, -3.88934, 13.3877, 0.52", "49.2008, -4.10148, 13.6731, 0.52", "49.684, -4.1787, 13.7916, 0.52", "50.5701, -4.31168, 14.0312, 0.52", "51.5016, -4.46635, 14.2846, 0.52", "52.1001, -4.57071, 14.4355, 0.52", "53.4368, -4.85874, 14.7486, 0.52", "54.4654, -5.12644, 14.945, 0.88", "55.4046, -5.40943, 15.1252, 0.88", "56.5125, -5.77061, 15.3153, 0.88", "57.3545, -6.0435, 15.4588, 0.52", "58.0476, -6.23359, 15.5837, 0.52", "58.9206, -6.38677, 15.773, 0.52", "60.4548, -6.44635, 16.2126, 0.74", "61.4446, -6.35131, 16.5534, 0.74", "61.9902, -6.23484, 16.7616, 0.74", "62.7487, -6.03605, 17.118, 0.52", "63.6753, -5.78086, 17.5822, 0.52", "64.3577, -5.60972, 17.9362, 0.52", "65.0777, -5.46356, 18.2894, 0.52", "65.583, -5.41683, 18.5234, 0.74", "67.1543, -5.40088, 19.2896, 0.96", "68.235, -5.43685, 19.8132, 0.96", "69.4604, -5.51324, 20.3872, 0.74", "70.1655, -5.59909, 20.745, 0.74", "71.8735, -5.87199, 21.6355, 0.59", "73.4875, -6.18748, 22.4892, 0.59", "74.0328, -6.30605, 22.7649, 0.59", "74.7578, -6.47472, 23.1446, 0.59", "76.6661, -6.9138, 24.1312, 0.59", "77.3243, -7.0603, 24.4651, 0.59", "78.7411, -7.34917, 25.1028, 0.59", "79.5149, -7.49931, 25.3727, 0.59", "80.182, -7.61148, 25.5748, 0.59", "80.9755, -7.67788, 25.7625, 0.59", "81.7537, -7.6737, 25.8895, 0.59", "83.1901, -7.63079, 26.1389, 0.59", "84.2362, -7.59381, 26.3074, 0.59", "84.9945, -7.59486, 26.4272, 0.59", "86.392, -7.64688, 26.5787, 0.59", "87.4702, -7.70214, 26.6882, 0.59", "88.859, -7.76757, 26.8259, 0.88", "89.8509, -7.80508, 26.9284, 1.11", "91.1965, -7.88158, 27.0692, 0.96", "92.5542, -8.02409, 27.1938, 1.47" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "40.7509, -7.27851, -0.354058, 0.513942", "55.4943, -10.0412, -0.354058, 0.513942", "70.2377, -12.8038, -0.354058, 0.513942" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_40",
    "id" : "dend_40",
    "points3d" : [ "2.72497, 17.7351, -2.99745, 1.25", "3.30694, 22.3891, -10.312, 1.25", "3.38164, 22.9688, -10.9892, 1.25", "3.6744, 24.7149, -12.5908, 1.25", "3.82968, 25.4166, -13.1365, 1.25", "3.94314, 25.9314, -13.4731, 1.25", "4.16859, 27.2251, -14.1904, 0.81", "4.22684, 28.6653, -14.2066, 0.81", "4.19848, 29.5822, -14.2891, 0.81", "4.07604, 30.263, -14.4271, 0.81", "3.76175, 31.3977, -14.9598, 0.81", "3.40908, 32.5833, -15.7453, 0.81", "3.19088, 33.3955, -16.5973, 0.81", "3.02397, 34.5325, -18.0892, 0.44", "3.03178, 35.2358, -19.0731, 1.47", "3.35825, 36.9505, -21.4011, 0.59", "3.6153, 37.6034, -22.2632, 0.59", "4.41288, 39.1764, -24.1865, 1.03", "4.75585, 39.7464, -24.8493, 0.52", "5.22922, 40.5131, -25.6259, 1.03", "5.75963, 41.407, -26.4389, 0.74", "6.5628, 43.114, -27.7675, 0.44", "6.75035, 43.6102, -28.1347, 0.44", "7.1706, 44.9103, -28.9954, 0.96", "7.41695, 45.6759, -29.5156, 1.84", "7.61155, 46.2241, -29.8788, 1.84", "8.29019, 47.9529, -31.0286, 0.88", "8.48051, 48.4455, -31.3997, 0.88", "8.59617, 48.8191, -31.7131, 0.88", "8.80442, 49.6813, -32.4693, 1.4", "8.94375, 50.3901, -33.1679, 1.4", "9.17931, 52.0086, -34.7815, 0.66", "9.38455, 53.7766, -36.479, 0.66", "9.46327, 54.5424, -37.2602, 0.66", "9.54796, 55.3585, -38.1091, 1.84", "9.77519, 57.6753, -40.4933, 0.52", "9.84509, 58.3681, -41.159, 1.47", "9.9295, 59.0727, -41.7267, 1.47", "10.3193, 61.3987, -43.3648, 0.74", "10.4443, 61.9487, -43.8021, 0.29", "10.5835, 62.5332, -44.2778, 0.29", "10.7136, 63.025, -44.6598, 0.29", "10.9095, 63.7868, -45.2917, 0.88", "11.155, 64.8575, -46.1591, 1.99", "11.6735, 67.51, -48.1514, 0.37", "11.8361, 68.7026, -48.998, 0.37", "11.9528, 69.8835, -49.786, 0.37", "12.1113, 72.9037, -51.7153, 0.22", "12.1142, 73.8638, -52.276, 0.88", "12.0774, 74.6632, -52.6571, 0.88", "11.8756, 76.5874, -53.3791, 0.07", "11.7573, 77.3501, -53.6303, 0.07", "11.4944, 78.6519, -53.9623, 0.07", "11.2753, 79.5692, -54.1294, 0.66", "11.0187, 80.9389, -54.3816, 0.81", "10.9469, 81.4435, -54.4723, 0.81", "10.6721, 84.0252, -54.9793, 0.07", "10.5691, 85.1141, -55.1922, 0.66", "10.4748, 86.3613, -55.4195, 1.03", "10.305, 88.9792, -55.9213, 0.07", "10.2737, 89.4364, -56.0116, 0.59", "10.0979, 92.0264, -56.5112, 0.07", "10.0492, 92.8458, -56.6996, 1.11", "9.95649, 94.0299, -56.9866, 0.07", "9.85451, 95.1024, -57.2425, 0.07", "9.74235, 96.1008, -57.5071, 0.07", "9.66986, 97.2816, -57.8125, 1.4", "9.71283, 99.866, -58.4045, 0.07", "9.77754, 100.798, -58.6094, 1.18", "9.86807, 101.566, -58.7708, 1.18", "10.1181, 102.839, -58.9848, 0.07", "10.6796, 104.905, -59.2341, 0.07", "11.3848, 107.044, -59.3779, 0.07", "11.684, 107.779, -59.3749, 1.25", "11.8762, 108.196, -59.3656, 1.25", "12.9364, 110.379, -59.353, 0.15", "13.4378, 111.365, -59.3713, 0.15", "13.7551, 111.967, -59.403, 0.74", "14.4951, 113.572, -59.667, 0.07", "14.8875, 114.517, -59.8848, 0.07", "15.558, 116.34, -60.395, 0.07", "15.82, 117.123, -60.6907, 1.33", "16.0453, 117.828, -60.9835, 1.33", "17.066, 121.198, -62.4511, 0.07", "17.295, 122.052, -62.8107, 0.96", "17.4607, 122.69, -63.0556, 0.96", "18.1082, 125.102, -63.9136, 0.07", "18.3833, 126.061, -64.2378, 0.81", "18.5794, 126.696, -64.4634, 0.81", "19.2962, 128.979, -65.2589, 0.07", "19.5425, 129.869, -65.5738, 0.74", "20.2046, 132.646, -66.5208, 0.07", "20.3183, 133.254, -66.7102, 1.11", "20.7317, 136.261, -67.7894, 0.07", "20.8123, 137.119, -68.1209, 0.66", "20.8608, 138.038, -68.4953, 0.66", "20.8669, 139.283, -68.9976, 0.07", "20.8327, 140.327, -69.3802, 1.25", "20.633, 143.898, -70.5929, 0.07", "20.5779, 144.689, -70.8289, 0.88", "20.5524, 145.266, -70.9927, 0.88", "20.5509, 145.505, -71.0531, 0.07", "20.573, 146.942, -71.3452, 0.07", "20.6255, 148.409, -71.5336, 0.07", "20.654, 148.827, -71.5643, 0.52", "20.7776, 150.147, -71.7151, 0.07", "20.9204, 151.362, -71.8831, 0.07", "21.0748, 152.377, -72.0344, 0.74", "21.1649, 152.828, -72.1058, 0.74", "21.7017, 154.806, -72.4192, 0.07", "21.9157, 155.479, -72.5215, 0.59", "22.4608, 156.952, -72.7259, 0.07", "22.9359, 158.145, -72.8649, 0.07", "23.3826, 159.225, -72.9452, 0.07", "23.5948, 159.758, -72.9631, 1.03", "23.8531, 160.424, -72.9514, 1.03", "24.3035, 161.642, -72.932, 0.07", "24.5624, 162.464, -72.9225, 0.66", "25.2364, 164.855, -72.9217, 0.07", "25.4146, 165.539, -72.9573, 0.07", "25.461, 165.707, -72.9722, 1.25", "25.6503, 166.312, -73.0439, 1.25", "26.0823, 167.499, -73.2179, 0.22", "26.712, 168.946, -73.4643, 0.81", "27.5136, 170.277, -73.59, 0.07", "28.2794, 171.325, -73.6071, 0.07", "28.8828, 172.046, -73.5712, 0.07", "29.1791, 172.352, -73.5343, 0.74", "29.5167, 172.666, -73.4547, 0.74", "31.827, 174.749, -72.6714, 0.07", "32.3163, 175.19, -72.4626, 0.07", "32.8765, 175.716, -72.2071, 0.37", "33.6107, 176.494, -71.747, 0.37", "34.529, 177.661, -70.9935, 0.07", "35.0014, 178.4, -70.4848, 0.07", "35.2467, 179.003, -70.002, 0.07", "35.4255, 179.629, -69.4096, 0.07", "35.8384, 181.623, -67.3824, 0.07", "35.9414, 182.574, -66.343, 0.07", "35.9448, 182.889, -65.973, 0.07", "35.8235, 184.363, -64.0704, 0.07", "35.7436, 184.858, -63.3753, 0.07" ],
    "parent" : "dend_39",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "10.1791, 39.1013, -2.05661, 1.18", "10.0448, 44.1323, 0.0551973, 1.18", "10.0297, 46.4168, 0.80235, 1.18", "9.99519, 48.0472, 1.26401, 1.18", "10.0309, 49.4878, 1.86936, 1.18", "10.1151, 51.6343, 2.90181, 1.18", "10.1728, 52.9386, 3.55592, 1.18", "10.2523, 55.6726, 4.86359, 1.18", "10.3261, 57.3242, 5.73947, 0.74", "10.651, 62.5799, 8.78328, 0.59", "10.7553, 63.9512, 9.66224, 0.59", "10.8696, 65.4147, 10.7351, 0.81", "11.0016, 66.8771, 11.9317, 0.81", "11.0016, 66.8771, 11.9317, 1.33" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "10.1791, 39.1013, -2.05661, 1.03", "13.401, 40.1994, -1.28251, 1.03", "14.3555, 40.5509, -0.963355, 1.03", "15.3296, 40.9259, -0.641034, 1.03", "16.2131, 41.279, -0.382223, 1.03", "17.3135, 41.7369, -0.102195, 0.96", "19.0366, 42.4908, 0.304221, 0.96", "21.0231, 43.5857, 0.590448, 0.66", "21.8117, 44.0664, 0.698993, 1.03", "22.8039, 44.7554, 0.800318, 1.03", "23.5069, 45.3024, 0.806185, 1.03", "24.1472, 45.8971, 0.714033, 0.81", "24.9579, 46.9297, 0.378298, 0.81", "25.2813, 47.4968, 0.164569, 0.81", "25.8286, 48.7025, -0.237727, 1.18", "26.174, 49.6486, -0.516721, 1.18", "26.4055, 50.3313, -0.706039, 1.18", "26.8202, 51.4452, -1.02485, 1.18", "27.2933, 52.4352, -1.26822, 0.66", "27.654, 53.0484, -1.43018, 0.66", "27.9886, 53.4827, -1.56013, 0.66", "28.6397, 54.0603, -1.77341, 0.66", "29.4708, 54.5302, -2.01354, 0.66", "30.5347, 54.9197, -2.2992, 0.66", "30.934, 55.0261, -2.4169, 0.66", "31.551, 55.1759, -2.57695, 0.66", "32.5968, 55.4885, -2.8141, 0.66", "33.6549, 55.9064, -3.02778, 0.66", "34.3734, 56.2971, -3.15755, 0.66", "34.7498, 56.5627, -3.22415, 0.66", "35.9266, 57.5585, -3.40972, 0.88", "36.8044, 58.3981, -3.49272, 0.88", "37.558, 59.1775, -3.53807, 0.88", "38.0979, 59.7643, -3.56137, 0.88", "38.7544, 60.4989, -3.54474, 1.18", "39.6666, 61.5086, -3.5033, 0.81", "40.8329, 62.7675, -3.46059, 0.81", "41.5959, 63.5298, -3.42992, 0.81", "42.048, 63.9647, -3.41083, 0.81", "43.7684, 65.5619, -3.3834, 0.96", "44.3581, 66.1173, -3.38739, 0.96", "44.9581, 66.711, -3.41727, 0.96", "45.5697, 67.3679, -3.49483, 0.96", "45.9935, 67.8461, -3.56843, 0.96", "46.9465, 68.9752, -3.76004, 0.66", "47.4527, 69.6663, -3.88228, 0.66", "48.0833, 70.6412, -3.99945, 0.66", "48.6603, 71.6966, -4.06606, 0.66", "49.0409, 72.461, -4.09242, 0.66", "49.5267, 73.5493, -4.09882, 0.88", "49.9592, 74.5765, -4.08925, 0.88", "50.238, 75.1896, -4.09444, 1.18", "50.7597, 76.2567, -4.185, 1.18", "51.4092, 77.3478, -4.41855, 0.66", "51.9716, 78.085, -4.71094, 0.66", "52.5206, 78.6375, -5.05794, 0.66", "53.4754, 79.3853, -5.68364, 0.66", "54.534, 80.0857, -6.27715, 0.74", "55.3852, 80.5957, -6.69572, 0.74", "56.2057, 81.1136, -7.03986, 0.74", "56.9305, 81.5923, -7.24367, 0.74", "57.3911, 81.9692, -7.22602, 0.74", "58.6064, 83.171, -6.77536, 0.74", "58.9841, 83.5406, -6.54233, 0.74", "59.4852, 84.0088, -6.18312, 0.74", "60.1462, 84.5737, -5.70906, 1.4", "61.1077, 85.3201, -5.08448, 0.96", "61.7197, 85.7605, -4.76959, 0.96", "62.8277, 86.4997, -4.37356, 0.81", "63.4823, 86.9394, -4.19836, 0.81", "64.0732, 87.3569, -4.11019, 0.81", "65.1541, 88.2205, -4.09462, 0.81", "65.8314, 88.8513, -4.16268, 0.81", "66.1023, 89.155, -4.21955, 0.81", "66.7534, 90.0222, -4.45257, 0.81", "67.2087, 90.6759, -4.64423, 0.81", "67.5855, 91.2143, -4.82907, 0.81", "68.092, 91.9394, -5.11293, 0.81", "68.7413, 92.8474, -5.50968, 0.81", "69.3782, 93.7295, -5.97375, 0.81", "69.9087, 94.4243, -6.39183, 0.52", "70.3835, 95.0262, -6.76951, 0.52", "70.799, 95.5147, -7.10504, 0.52", "71.5894, 96.3403, -7.69505, 1.03", "72.6928, 97.3735, -8.44074, 0.66", "73.7712, 98.2841, -9.10083, 0.66", "74.6452, 98.9215, -9.57798, 1.03", "75.4226, 99.4174, -9.959, 0.88", "76.7769, 100.174, -10.4632, 0.88", "77.8486, 100.734, -10.7485, 0.88", "78.941, 101.289, -10.9599, 0.74", "80.6151, 102.172, -11.2308, 0.74", "81.3009, 102.552, -11.3286, 0.74", "83.079, 103.621, -11.5599, 0.74", "84.0557, 104.232, -11.6976, 0.74", "84.7126, 104.659, -11.7946, 0.74", "85.3756, 105.11, -11.9136, 0.74", "86.0685, 105.594, -12.0741, 0.74", "86.6696, 106.001, -12.2631, 0.74", "87.5596, 106.583, -12.6168, 0.74", "88.219, 107.007, -12.8806, 0.74", "89.1427, 107.661, -13.2452, 0.74", "90.3758, 108.709, -13.7149, 1.03", "91.6357, 110.052, -14.1644, 0.74", "92.0899, 110.659, -14.3127, 0.74", "92.3523, 111.08, -14.3905, 0.74", "92.9656, 112.197, -14.5575, 0.74", "93.6103, 113.469, -14.6782, 0.74", "94.048, 114.362, -14.7316, 1.18", "94.7841, 115.905, -14.7984, 1.03", "95.0488, 116.419, -14.8246, 1.03", "95.8121, 117.697, -14.9206, 0.81", "96.7054, 118.894, -15.0645, 0.81", "97.225, 119.477, -15.1524, 0.81" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "10.1791, 39.1013, -2.05661, 0.88", "10.1344, 40.5849, -1.39273, 0.88", "10.0809, 42.0374, -0.821349, 0.88", "10.0628, 42.7505, -0.577544, 0.88", "10.0294, 44.4489, -0.0572728, 0.88", "10.0119, 45.4354, 0.220378, 1.11", "9.97829, 46.4577, 0.495056, 1.11", "9.84123, 48.4184, 1.0068, 1.11", "9.67911, 49.8009, 1.35701, 1.11", "9.51843, 50.8375, 1.58693, 0.74", "9.35376, 51.6901, 1.73286, 0.74", "9.13642, 52.5828, 1.88887, 0.74", "8.81169, 53.6789, 2.10113, 0.74", "8.5674, 54.3997, 2.18672, 0.74", "8.2853, 55.3075, 2.14926, 0.74", "8.11373, 56.119, 1.95924, 0.74", "8.07662, 56.5663, 1.76643, 0.74", "8.08766, 57.0731, 1.5102, 0.74", "8.19129, 58.9668, 0.465376, 0.74", "8.26933, 60.3114, -0.282463, 0.74", "8.30527, 61.0307, -0.652806, 1.11", "8.39069, 63.0112, -1.61787, 0.59", "8.44716, 64.3408, -2.18778, 0.88", "8.50577, 66.3165, -2.89158, 0.88", "8.51419, 66.9978, -3.06671, 1.18", "8.48231, 68.6007, -3.36853, 0.81", "8.43246, 69.8812, -3.53829, 0.81", "8.36594, 71.3793, -3.64098, 1.11", "8.32436, 72.1289, -3.6763, 1.11", "8.29052, 73.0646, -3.69283, 1.47", "8.2375, 74.9074, -3.726, 1.03", "8.21601, 76.131, -3.74273, 1.03", "8.19948, 77.3149, -3.73867, 1.03", "8.17557, 78.6817, -3.74266, 1.03", "8.16219, 79.922, -3.74834, 1.03", "8.15632, 81.115, -3.74857, 1.03", "8.15293, 81.8207, -3.74152, 1.03", "8.13162, 82.6002, -3.71401, 0.81", "8.04819, 83.7038, -3.63089, 0.81", "7.91443, 84.7729, -3.49911, 0.81", "7.59652, 86.322, -3.29598, 0.59", "7.36479, 87.1835, -3.21827, 0.59", "7.10628, 87.9662, -3.21443, 1.18", "6.8261, 88.6497, -3.38051, 1.18", "6.6612, 89.0354, -3.55174, 1.18", "6.28661, 89.9473, -4.07448, 0.52", "5.85605, 91.1703, -4.86762, 0.74", "5.55648, 92.3001, -5.611, 0.74", "5.10219, 95.0302, -7.39328, 0.74", "5.04387, 96.2116, -8.11163, 1.03", "5.09728, 97.0446, -8.56039, 1.03", "5.28959, 98.1386, -9.05369, 1.4", "5.58848, 99.2101, -9.40165, 1.4", "5.89069, 100.112, -9.63838, 0.15", "6.37728, 101.412, -9.89767, 0.22", "6.71861, 102.396, -10.144, 1.03", "6.84249, 102.798, -10.2585, 1.55", "7.08684, 103.743, -10.5496, 1.03", "7.52009, 105.768, -11.1928, 0.44", "7.6361, 106.427, -11.389, 0.44", "7.71443, 106.942, -11.5232, 0.44", "7.84077, 107.734, -11.6889, 1.18", "7.95447, 108.35, -11.7805, 1.18", "8.08582, 109.093, -11.8691, 1.18", "8.29103, 110.401, -11.9598, 0.22", "8.44398, 111.585, -12.0566, 0.22", "8.53913, 112.547, -12.1371, 1.18", "8.62467, 113.62, -12.2291, 1.18", "8.74104, 115.972, -12.4204, 0.07", "8.76922, 117.266, -12.5131, 1.03", "8.75793, 117.895, -12.5467, 1.03", "8.73277, 118.644, -12.5744, 1.62", "8.67341, 119.454, -12.5751, 1.62", "8.62441, 119.955, -12.5547, 0.07", "8.48629, 121.313, -12.427, 0.07", "8.37232, 122.225, -12.3371, 1.33", "8.29144, 122.753, -12.2806, 1.33", "7.97662, 124.551, -12.0751, 0.07", "7.84802, 125.148, -11.9982, 1.18", "7.77443, 125.453, -11.9561, 1.18", "7.28711, 126.982, -11.6999, 0.07", "7.05841, 127.6, -11.5404, 0.81", "6.77881, 128.24, -11.3151, 0.81", "6.49475, 128.804, -11.0596, 0.81", "6.49475, 128.804, -11.0596, 0.29", "5.84821, 129.886, -10.4458, 0.29", "5.14524, 131.05, -9.7503, 0.81", "4.82335, 131.568, -9.44331, 1.33", "4.33118, 132.367, -8.99448, 1.33", "4.28853, 132.44, -8.95797, 0.07", "4.02562, 132.919, -8.75354, 0.07", "3.53484, 133.904, -8.43054, 0.07", "3.1477, 134.667, -8.23397, 0.07", "2.83707, 135.282, -8.07607, 0.07", "2.40458, 136.143, -7.85582, 1.03", "2.09363, 136.761, -7.69748, 1.03", "1.31303, 138.306, -7.30061, 0.07", "0.959741, 138.974, -7.12346, 1.25", "0.496923, 139.894, -6.8879, 1.25", "0.373636, 140.129, -6.82588, 1.25" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-27.9001, 32.0634, -5.41357, 0.66", "-30.5014, 33.5593, -7.46968, 0.66", "-31.3023, 34.086, -8.04454, 0.66", "-32.0124, 34.6149, -8.56625, 0.66", "-32.8963, 35.3464, -9.2185, 0.88", "-34.3452, 36.6974, -10.3223, 0.88", "-35.7463, 38.1239, -11.4504, 0.88", "-36.4378, 38.9619, -12.0811, 1.33", "-37.4801, 40.2436, -13.1201, 0.96", "-38.0584, 40.956, -13.7005, 0.96", "-38.7749, 41.8029, -14.3991, 0.96", "-40.2866, 43.5174, -15.8143, 0.96", "-41.9912, 45.3621, -17.2526, 1.11", "-42.8293, 46.2062, -17.867, 1.11", "-43.9393, 47.249, -18.5088, 0.66", "-44.6289, 47.8609, -18.8197, 1.18", "-45.6969, 48.7808, -19.1585, 1.18", "-47.1866, 50.1097, -19.4737, 0.74", "-47.7128, 50.6197, -19.5578, 0.74", "-48.9222, 51.8765, -19.8071, 1.11", "-50.0256, 53.0778, -20.0801, 0.59", "-50.6452, 53.794, -20.2653, 0.59", "-51.4933, 54.8567, -20.6018, 1.11", "-52.1935, 55.8188, -20.9428, 1.11", "-53.2333, 57.3824, -21.5163, 0.74", "-53.9709, 58.6505, -21.9729, 1.03", "-54.655, 60.0231, -22.4374, 1.03", "-55.3578, 61.6597, -22.9355, 1.03", "-55.7923, 62.804, -23.2333, 1.03", "-56.2209, 63.9713, -23.5121, 1.03", "-56.8838, 65.9282, -23.9413, 1.03", "-57.3058, 67.0909, -24.1584, 1.03", "-57.8597, 68.4561, -24.4187, 0.88", "-58.5283, 69.8605, -24.6946, 0.88", "-59.2437, 71.1956, -24.9962, 0.88", "-59.5629, 71.7617, -25.1594, 0.88", "-60.476, 73.2892, -25.6723, 0.88", "-61.5038, 74.9916, -26.2746, 0.88", "-62.364, 76.4456, -26.791, 0.81", "-62.8537, 77.328, -27.0929, 0.81", "-63.9027, 79.4598, -27.7579, 0.81", "-64.4233, 80.6075, -28.0772, 1.11", "-65.2157, 82.5533, -28.5387, 0.59", "-65.8618, 84.1974, -28.8492, 0.59", "-66.4379, 85.7234, -29.1116, 0.96", "-67.2641, 87.9354, -29.4273, 0.96", "-67.7471, 89.2313, -29.5599, 0.96", "-68.4395, 91.1438, -29.7415, 0.96", "-68.9081, 92.4727, -29.8567, 0.44", "-69.0165, 92.7813, -29.9042, 0.44", "-69.2036, 93.2651, -30.0133, 0.44", "-69.4309, 93.7944, -30.1724, 1.18", "-69.835, 94.7377, -30.4715, 1.18", "-70.2988, 95.8668, -30.8373, 1.18", "-71.2803, 98.3093, -31.5932, 0.81", "-71.6707, 99.2556, -31.8615, 0.81", "-71.9389, 99.8943, -32.0291, 0.81", "-72.5385, 101.269, -32.3286, 0.66", "-72.9259, 102.134, -32.4719, 0.66", "-73.3924, 103.142, -32.6418, 1.03", "-73.9697, 104.342, -32.8228, 0.44", "-74.3058, 105.028, -32.9645, 0.44", "-75.014, 106.372, -33.3084, 0.96", "-75.4842, 107.213, -33.5804, 1.69", "-76.634, 109.195, -34.3634, 0.07", "-77.1933, 110.163, -34.8298, 0.37", "-77.5061, 110.696, -35.1192, 0.37", "-78.0394, 111.62, -35.6507, 0.88", "-78.4017, 112.259, -36.0314, 1.4", "-79.2007, 113.753, -36.8989, 1.4", "-79.8508, 115.113, -37.6237, 1.03", "-80.4147, 116.483, -38.3259, 0.66", "-80.6421, 117.166, -38.6459, 0.66", "-80.8381, 117.904, -38.9575, 0.66", "-81.1561, 119.388, -39.4843, 1.47", "-81.3012, 120.278, -39.7529, 1.47", "-81.4937, 121.778, -40.2196, 0.88", "-81.8215, 124.773, -41.1966, 0.59", "-81.9037, 125.51, -41.4404, 0.59", "-82.1087, 127.446, -42.0991, 1.55", "-82.1783, 128.101, -42.3307, 1.55", "-82.4061, 130.457, -43.1818, 0.07", "-82.5058, 131.735, -43.6398, 1.03", "-82.566, 132.885, -44.0409, 1.03", "-82.6144, 134.211, -44.497, 1.03", "-82.6312, 135.22, -44.8563, 1.03", "-82.7054, 138.412, -45.9643, 0.52", "-82.7215, 139.539, -46.3322, 0.52", "-82.7293, 140.381, -46.6107, 1.25", "-82.7436, 141.586, -47.0022, 1.25", "-82.7943, 143.491, -47.5844, 0.15", "-82.8374, 144.5, -47.8736, 0.15", "-82.9169, 145.482, -48.115, 1.03", "-83.0258, 146.555, -48.3303, 1.03", "-83.1136, 147.4, -48.4474, 1.03", "-83.2117, 148.336, -48.5107, 0.44", "-83.3359, 149.73, -48.518, 0.44", "-83.3876, 150.832, -48.5254, 0.44", "-83.3996, 151.484, -48.5359, 0.44", "-83.3971, 152.909, -48.5751, 0.81", "-83.3798, 154.063, -48.6319, 0.81", "-83.3576, 154.938, -48.6938, 0.81", "-83.3151, 157.117, -48.8963, 0.22", "-83.2924, 158.707, -49.0852, 1.25", "-83.294, 159.483, -49.1842, 1.25", "-83.3223, 161.803, -49.497, 0.29", "-83.3549, 162.811, -49.6065, 0.29", "-83.3966, 163.653, -49.6787, 0.29", "-83.4826, 164.899, -49.7596, 0.29", "-83.5775, 166.293, -49.8323, 1.18", "-83.6426, 167.538, -49.8892, 1.18", "-83.7162, 169.604, -49.9711, 0.29", "-83.7352, 170.912, -50.0267, 0.81", "-83.718, 171.863, -50.0777, 0.81", "-83.6667, 173.425, -50.1806, 0.22", "-83.618, 174.52, -50.2717, 0.22", "-83.581, 175.208, -50.3456, 1.11", "-83.5266, 176.231, -50.5063, 1.11", "-83.4821, 178.241, -50.8466, 0.07", "-83.4761, 179.158, -51.0108, 0.07", "-83.4927, 180.078, -51.1956, 1.03", "-83.5305, 180.911, -51.3964, 1.03", "-83.6318, 182.574, -51.8488, 0.44", "-83.7041, 183.502, -52.1269, 0.52", "-83.8047, 184.687, -52.5133, 1.4", "-83.9025, 186.062, -52.997, 0.15", "-83.9588, 187.453, -53.4987, 0.37", "-83.9497, 187.82, -53.6281, 0.37", "-83.8848, 188.558, -53.8724, 0.37", "-83.8085, 189.023, -54.0185, 0.37", "-83.4723, 190.538, -54.4485, 0.52", "-83.0957, 191.969, -54.796, 0.52", "-82.6754, 193.453, -55.1142, 0.52", "-82.3239, 194.722, -55.3745, 0.52", "-81.9736, 195.988, -55.62, 0.52", "-81.6561, 197.337, -55.9305, 0.81", "-81.4181, 198.76, -56.3568, 0.29", "-81.3959, 199.259, -56.5786, 0.74", "-81.4573, 200.012, -57.0114, 0.74", "-81.6336, 201.062, -57.7286, 1.18", "-82.0918, 202.912, -59.143, 0.44", "-82.4918, 204.35, -60.3109, 0.74", "-83.0417, 206.327, -61.9477, 0.74", "-83.273, 207.333, -62.8289, 0.74", "-83.5006, 208.642, -64.016, 1.25", "-83.5969, 209.913, -65.259, 0.44", "-83.5511, 210.612, -65.9518, 0.44", "-83.4332, 211.237, -66.6723, 0.44", "-82.9289, 213.043, -68.9663, 0.74", "-82.7269, 213.618, -69.7664, 0.74", "-82.2422, 214.877, -71.6061, 0.29", "-82.1119, 215.211, -72.099, 0.74", "-81.4428, 217.06, -74.7813, 0.29", "-81.1733, 217.862, -75.871, 1.25", "-80.707, 219.425, -77.7763, 0.15", "-80.5788, 219.89, -78.3106, 0.15", "-80.4656, 220.376, -78.8282, 0.15", "-80.3767, 220.756, -79.2317, 0.15", "-80.2439, 221.326, -79.7758, 0.15", "-80.0194, 222.524, -81.0364, 1.25", "-79.9933, 222.814, -81.3438, 1.25", "-79.973, 224.236, -82.8696, 0.15", "-80.0106, 224.5, -83.164, 0.15", "-80.1183, 224.902, -83.6331, 0.15", "-80.2711, 225.311, -84.0985, 0.15", "-80.4166, 225.645, -84.5013, 0.15", "-80.7491, 226.326, -85.3593, 1.4", "-81.458, 227.625, -87.0158, 0.52", "-81.9442, 228.437, -88.0635, 0.07", "-82.6336, 229.438, -89.3759, 1.47", "-83.8201, 230.938, -91.3091, 0.29", "-84.1547, 231.326, -91.7747, 0.29", "-84.5025, 231.705, -92.2261, 0.29", "-85.0356, 232.263, -92.8428, 0.81", "-86.6497, 233.853, -94.5021, 0.22", "-87.2199, 234.392, -95.1156, 0.22", "-87.8785, 235.028, -95.8222, 1.25", "-89.4458, 236.602, -97.6064, 0.07", "-90.0024, 237.199, -98.258, 0.07", "-90.4795, 237.76, -98.8298, 0.52", "-91.7983, 239.701, -100.686, 0.07", "-92.4448, 240.855, -101.719, 0.07", "-92.721, 241.442, -102.197, 0.74", "-93.1163, 242.621, -102.937, 0.29", "-93.3246, 243.449, -103.429, 1.11", "-93.9698, 246.639, -105.209, 0.07", "-94.1355, 247.746, -105.754, 0.07", "-94.1928, 248.296, -106.041, 0.96", "-94.4129, 251.336, -107.671, 0.07", "-94.4666, 252.589, -108.353, 1.11" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-27.9001, 32.0634, -5.41357, 0.74", "-28.1762, 34.3988, -7.5094, 0.74", "-28.2552, 35.187, -8.11205, 0.74", "-28.3085, 35.8941, -8.577, 0.74", "-28.3452, 36.4327, -8.89326, 0.74", "-28.4034, 37.3626, -9.39975, 0.74", "-28.4615, 38.1586, -9.80276, 0.74", "-28.5033, 38.8352, -10.034, 0.74", "-28.6753, 39.967, -10.5655, 0.74", "-28.8368, 40.7561, -11.0211, 0.74", "-28.9812, 41.2769, -11.3589, 0.74", "-29.2513, 42.1172, -11.9426, 0.74", "-29.4562, 42.7254, -12.375, 0.74", "-30.2808, 45.1466, -14.0592, 0.74", "-30.4246, 45.5754, -14.3488, 0.74", "-30.7692, 46.7045, -15.0524, 0.52", "-31.0696, 47.8435, -15.6924, 0.88", "-31.2795, 48.8365, -16.1819, 0.88", "-31.5129, 50.119, -16.7098, 1.25", "-31.6409, 50.8533, -16.9502, 1.25", "-31.9554, 52.3904, -17.4625, 1.03", "-32.1915, 53.4973, -17.8423, 1.03", "-32.485, 54.7346, -18.2678, 1.03", "-32.6703, 55.4173, -18.4995, 1.03", "-33.2694, 56.9853, -19.2878, 0.81", "-33.7418, 57.9778, -19.9406, 0.81", "-34.1588, 58.775, -20.5166, 0.81", "-34.896, 60.1788, -21.4834, 0.59", "-35.1989, 60.7826, -21.8685, 0.59", "-36.793, 64.4252, -23.9646, 0.59", "-36.9704, 64.9142, -24.2069, 0.59", "-37.5281, 66.8045, -24.9653, 0.59", "-37.9032, 68.3929, -25.5741, 0.59", "-38.0978, 69.5514, -25.9775, 0.88", "-38.1907, 70.5591, -26.2917, 0.88", "-38.2254, 71.8526, -26.6249, 0.52", "-38.2521, 73.3902, -27.1712, 0.52", "-38.283, 75.3419, -28.0868, 0.59", "-38.2806, 75.7084, -28.2784, 0.59", "-38.2377, 77.0868, -28.9864, 0.37", "-38.1963, 78.1015, -29.4889, 1.25", "-38.1424, 79.1507, -29.9834, 1.25", "-38.0447, 80.7652, -30.6896, 0.52", "-37.9514, 82.1551, -31.2367, 0.52", "-37.8814, 83.583, -31.8068, 0.52", "-37.8689, 84.3679, -32.1211, 0.52", "-37.8792, 85.0683, -32.4614, 0.52", "-37.9193, 85.7373, -32.8401, 0.52", "-38.0039, 86.5039, -33.3322, 1.33", "-38.1548, 87.3062, -33.856, 1.33", "-38.3397, 87.9921, -34.3253, 1.33", "-38.9487, 89.9859, -35.689, 0.07", "-39.1895, 90.7239, -36.171, 0.07", "-39.5022, 91.6316, -36.7514, 1.11", "-40.1624, 93.5764, -37.9368, 0.07", "-40.6258, 95.0099, -38.7699, 0.07", "-40.8606, 95.7902, -39.1898, 0.07", "-41.0642, 96.6343, -39.5294, 0.52", "-41.2649, 97.9622, -39.9841, 0.22", "-41.3005, 99.05, -40.2372, 0.22", "-41.2245, 99.9708, -40.3006, 0.22", "-41.1551, 100.433, -40.283, 0.22", "-40.7087, 102.587, -40.1227, 1.55", "-40.4689, 103.483, -40.028, 1.55", "-39.7814, 105.7, -39.7327, 0.29", "-39.3058, 107.149, -39.5507, 0.88", "-39.0506, 107.922, -39.48, 0.88", "-38.6391, 109.218, -39.431, 0.22", "-38.1735, 110.706, -39.4818, 0.59", "-37.9608, 111.325, -39.5248, 0.59", "-37.7538, 111.847, -39.5955, 0.59", "-37.3997, 112.68, -39.7609, 0.59", "-37.1827, 113.232, -39.855, 0.59", "-36.6483, 114.799, -40.07, 1.03", "-36.3606, 115.736, -40.1963, 1.03", "-36.0248, 116.946, -40.3625, 1.03", "-35.8431, 117.675, -40.4724, 0.07", "-35.5564, 119.328, -40.7313, 0.07", "-35.4645, 120.412, -40.9538, 0.29", "-35.4745, 121.17, -41.1458, 0.81", "-35.62, 122.884, -41.6087, 0.37", "-35.7598, 123.818, -41.8857, 0.37", "-36.0741, 125.496, -42.4555, 0.37", "-36.2793, 126.602, -42.8531, 0.88", "-36.3891, 127.173, -43.0936, 0.37", "-36.4761, 127.632, -43.3008, 0.37", "-36.6417, 128.524, -43.7265, 1.11", "-36.7055, 129.02, -43.9749, 1.11", "-36.7563, 130.491, -44.7303, 0.37", "-36.789, 132.006, -45.5488, 0.37", "-36.8275, 132.609, -45.915, 0.37", "-36.8427, 132.834, -46.0991, 0.37", "-36.8458, 133.055, -46.3192, 0.37", "-36.7998, 133.684, -46.9959, 1.4", "-36.6068, 134.794, -48.257, 0.07", "-36.452, 135.378, -48.8642, 1.25", "-35.8495, 137.085, -50.6142, 0.07", "-35.5795, 137.739, -51.2578, 0.07", "-35.0589, 138.855, -52.2655, 0.07", "-34.7365, 139.476, -52.7669, 0.07", "-34.3374, 140.201, -53.2691, 0.07", "-33.8752, 141.114, -53.8182, 0.07", "-33.5893, 141.788, -54.1476, 1.11", "-33.047, 143.399, -54.8923, 0.07", "-32.7248, 144.654, -55.4422, 0.07", "-32.5716, 145.456, -55.7775, 1.55", "-32.3623, 146.948, -56.3786, 0.07", "-32.3247, 147.388, -56.5485, 0.07", "-32.2879, 148.161, -56.8384, 0.07", "-32.2898, 149.012, -57.1764, 0.07", "-32.2869, 149.884, -57.4813, 0.44", "-32.2775, 150.622, -57.7083, 0.44", "-32.2595, 151.094, -57.8395, 0.44", "-32.2244, 151.582, -57.9432, 1.33", "-32.0747, 153.234, -58.229, 0.07", "-31.9233, 154.795, -58.4986, 0.07", "-31.8397, 155.622, -58.646, 0.07", "-31.6732, 157.212, -58.9449, 1.62", "-31.4485, 159.326, -59.3718, 0.07", "-31.3896, 159.872, -59.4914, 0.07", "-31.2843, 160.939, -59.7531, 0.29", "-31.2302, 161.68, -59.9962, 0.29", "-31.1718, 162.274, -60.2119, 0.29", "-31.103, 162.922, -60.4726, 0.29", "-31.0457, 163.433, -60.6981, 0.29", "-30.9363, 164.449, -61.1884, 0.29", "-30.8321, 165.319, -61.6367, 0.29", "-30.6498, 166.718, -62.4184, 1.33", "-30.4338, 168.052, -63.2109, 0.07", "-30.2609, 169.031, -63.8131, 0.07", "-30.0588, 170.205, -64.5375, 0.88", "-29.8134, 171.696, -65.579, 0.07", "-29.754, 172.142, -65.9129, 0.74", "-29.6543, 173.367, -66.8516, 0.07", "-29.6213, 173.941, -67.2832, 0.88", "-29.5536, 175.142, -68.1661, 0.07", "-29.4586, 176.423, -69.0476, 0.52", "-29.3639, 177.398, -69.7513, 0.15", "-29.2815, 178.24, -70.3762, 0.15", "-29.2177, 178.915, -70.8919, 0.15", "-29.0746, 179.937, -71.6783, 0.15", "-28.8865, 180.862, -72.3601, 0.15", "-28.6323, 181.873, -72.9655, 0.15" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "19.3449, -5.18285, 12.1183, 0.37", "18.9054, -8.48364, 14.664, 0.37", "18.7332, -9.38127, 15.1862, 0.37", "18.562, -10.0841, 15.5118, 0.59", "18.2784, -11.028, 15.9098, 0.59", "17.9652, -11.9781, 16.2739, 0.59", "17.7703, -12.5869, 16.5226, 0.59", "17.4297, -13.756, 16.9748, 0.29", "17.2691, -14.5451, 17.3709, 0.59", "17.0644, -15.9861, 18.1925, 0.44", "16.9921, -16.9008, 18.7563, 0.44", "16.9988, -17.9876, 19.4379, 1.4", "17.196, -20.5634, 21.0387, 0.37", "17.3044, -21.6627, 21.6857, 0.37", "17.4155, -22.743, 22.2579, 0.37", "17.486, -23.4902, 22.5866, 0.37", "17.6222, -25.7174, 23.3793, 0.59", "17.6198, -26.6077, 23.6601, 0.59", "17.5519, -28.3285, 24.1536, 1.11", "17.497, -29.3995, 24.484, 0.88", "17.436, -30.8968, 24.951, 0.88", "17.3983, -31.8979, 25.2577, 0.88", "17.33, -34.1973, 25.9411, 1.33", "17.3651, -37.0104, 26.7604, 0.74", "17.4481, -38.1961, 27.1512, 0.74", "17.5338, -39.222, 27.5093, 0.74", "17.6256, -40.312, 27.8929, 0.74", "17.7173, -41.4598, 28.2683, 0.74", "17.835, -42.6682, 28.5959, 0.52", "17.9808, -44.4113, 29.1444, 0.22", "18.0871, -45.7354, 29.6209, 0.22", "18.1129, -46.696, 30.0175, 0.22", "18.0714, -47.5718, 30.4324, 0.22" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "19.3449, -5.18285, 12.1183, 0.59", "20.9554, -4.74521, 13.3873, 0.59", "21.5436, -4.64374, 13.8163, 0.81", "21.9097, -4.61511, 14.046, 0.81", "22.3154, -4.60578, 14.2676, 0.44", "23.6206, -4.60342, 14.8833, 0.74", "24.1169, -4.60689, 15.0853, 0.74", "24.3943, -4.63165, 15.158, 0.74", "25.089, -4.74531, 15.4075, 0.74", "25.4657, -4.82724, 15.5652, 0.74", "25.9467, -4.93919, 15.7704, 0.74", "26.4139, -5.02967, 15.9601, 0.74", "26.8413, -5.09309, 16.1684, 0.52", "28.0568, -5.19163, 16.7951, 0.07", "28.3002, -5.20608, 16.9275, 0.07", "28.9299, -5.25124, 17.2911, 0.74", "29.7052, -5.31829, 17.7309, 0.44", "29.9877, -5.32953, 17.8946, 0.44", "30.4547, -5.32511, 18.1308, 0.44", "30.788, -5.30283, 18.2721, 0.44", "31.3785, -5.30827, 18.5371, 0.44", "31.5891, -5.34073, 18.6375, 0.44", "32.5049, -5.58065, 19.0404, 0.66", "32.9112, -5.69217, 19.2239, 0.66", "33.3541, -5.7988, 19.4526, 0.66", "34.3432, -6.0282, 19.949, 0.29", "34.9065, -6.16211, 20.2104, 0.29", "35.555, -6.33031, 20.5066, 0.29", "36.3288, -6.56734, 20.8309, 0.52", "37.3512, -6.86047, 21.3362, 0.52" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_38",
    "id" : "dend_38",
    "points3d" : [ "11.0016, 66.8771, 11.9317, 0.22", "11.8145, 67.8015, 11.5765, 0.22", "12.061, 68.1196, 11.4672, 0.22", "12.4246, 68.6711, 11.3097, 1.03", "12.7799, 69.2603, 11.1547, 1.03", "13.1369, 69.8632, 10.9907, 0.22", "13.3072, 70.1249, 10.904, 0.37", "13.6058, 70.5881, 10.6771, 0.37", "13.9225, 71.0958, 10.3989, 0.37", "14.1201, 71.4209, 10.2091, 0.37", "14.4383, 71.9146, 9.89303, 0.37", "14.8802, 72.6081, 9.45205, 0.37", "15.273, 73.1819, 9.06957, 1.18", "15.9782, 74.1683, 8.40147, 0.52", "16.3696, 74.7013, 8.04496, 0.81", "16.9175, 75.4447, 7.57201, 0.81", "17.2323, 75.8913, 7.3192, 0.81", "17.6687, 76.6037, 6.93645, 0.52", "17.9731, 77.0769, 6.67052, 0.66", "18.3425, 77.6405, 6.31619, 0.66", "18.7319, 78.2409, 5.92704, 0.66", "19.0744, 78.7282, 5.63215, 0.66", "19.9841, 79.9085, 4.94129, 0.66", "20.6534, 80.7335, 4.49137, 1.03", "20.9114, 81.0154, 4.354, 1.03", "21.8671, 81.9138, 3.95493, 0.44", "22.8832, 82.6611, 3.65546, 0.52", "23.2352, 82.8652, 3.5842, 0.52", "23.5329, 83.0157, 3.55612, 0.52", "24.3245, 83.4306, 3.49845, 0.52", "24.9389, 83.7236, 3.51795, 0.52", "25.7114, 84.0952, 3.5781, 0.29", "26.1449, 84.3139, 3.60142, 0.29", "27.2546, 84.8871, 3.67252, 0.29", "28.0001, 85.2987, 3.71814, 0.74", "29.6324, 86.3027, 3.81479, 0.81", "30.5367, 86.914, 3.87693, 0.07", "30.9729, 87.2292, 3.8857, 0.07", "31.2144, 87.4029, 3.86907, 0.07", "31.8321, 87.8789, 3.74402, 0.07", "32.1213, 88.125, 3.62167, 0.07", "32.4016, 88.3665, 3.48984, 0.07", "32.9666, 88.8338, 3.31304, 0.07", "33.5417, 89.3054, 3.156, 0.07", "33.8255, 89.5232, 3.08713, 0.07", "34.5417, 90.0089, 2.9365, 0.07", "35.9641, 90.9056, 2.69694, 0.07", "36.8496, 91.4557, 2.63291, 0.07" ],
    "parent" : "dend_28",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "11.0016, 66.8771, 11.9317, 0.96", "10.3544, 67.6357, 12.4442, 0.96", "9.55703, 68.6596, 13.0856, 0.96", "8.67501, 69.7922, 13.795, 0.66", "7.51106, 71.2868, 14.7312, 0.96", "6.63958, 72.4059, 15.4322, 0.96", "5.5573, 73.7957, 16.3027, 0.96", "5.12274, 74.4335, 16.6628, 0.96" ],
    "parent" : "dend_28",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "97.225, 119.477, -15.1524, 0.37", "97.5825, 121.114, -13.5372, 0.37", "97.7123, 121.744, -12.9777, 0.37", "97.8531, 122.333, -12.523, 0.37", "98.3617, 124.036, -11.5073, 0.37", "98.6418, 124.958, -11.0644, 0.37", "98.7743, 125.37, -10.8817, 0.37", "99.0357, 126.062, -10.6831, 0.66", "99.3975, 126.908, -10.4959, 0.66", "100.161, 128.5, -10.2714, 0.07", "100.666, 129.462, -10.2262, 0.07", "101.551, 130.985, -10.1948, 0.59", "102.558, 132.621, -10.198, 0.29", "102.944, 133.261, -10.2019, 0.29", "103.398, 134.031, -10.2143, 0.29", "103.971, 135.013, -10.2572, 0.29", "104.356, 135.731, -10.3074, 0.29", "104.641, 136.38, -10.3601, 0.29", "104.969, 137.392, -10.3959, 0.29", "105.321, 138.756, -10.4084, 0.29", "105.515, 139.679, -10.3989, 0.29", "105.818, 141.327, -10.3661, 0.66", "106.022, 142.419, -10.3494, 0.66", "106.261, 143.675, -10.3877, 0.07", "106.458, 144.662, -10.4553, 0.07", "106.635, 145.623, -10.5608, 0.07", "106.753, 146.259, -10.6542, 0.07", "106.877, 146.957, -10.7814, 0.07", "107.201, 149.215, -11.337, 0.59", "107.332, 150.346, -11.7651, 0.59", "107.402, 151.228, -12.1978, 0.07", "107.431, 151.779, -12.5004, 0.07", "107.443, 152.396, -12.876, 0.07", "107.406, 153.714, -13.8078, 0.07", "107.275, 155.167, -15.2144, 0.07", "107.216, 155.528, -15.6721, 0.07" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "97.225, 119.477, -15.1524, 0.22", "98.58, 119.807, -15.6226, 0.22", "99.2559, 120.058, -15.8569, 0.22", "99.8343, 120.286, -16.058, 0.44", "101.211, 120.779, -16.5397, 0.44", "101.85, 120.975, -16.8174, 0.44", "102.952, 121.289, -17.3323, 0.44", "103.856, 121.534, -17.7804, 0.74", "104.786, 121.802, -18.2516, 0.74", "105.917, 122.135, -18.828, 0.74", "108.097, 122.771, -19.9439, 0.74", "109.218, 123.113, -20.5907, 0.37", "110.446, 123.541, -21.3667, 0.37", "111.141, 123.877, -21.8737, 0.37", "111.927, 124.433, -22.53, 0.37", "112.263, 124.78, -22.8551, 0.37", "113.319, 126.418, -24.0277, 1.11", "113.702, 127.203, -24.5253, 1.11", "114.251, 128.419, -25.2544, 0.52", "114.652, 129.269, -25.7519, 0.52", "114.847, 129.705, -25.9923, 0.52", "115.322, 130.702, -26.5026, 0.81", "116.088, 132.026, -27.0616, 1.25", "116.866, 133.192, -27.5809, 0.22", "117.231, 133.626, -27.7745, 1.18" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "0.373636, 140.129, -6.82588, 0.07", "-0.704899, 143.415, 1.65342, 0.07", "-0.871203, 143.934, 2.74745, 0.44", "-1.14424, 144.754, 4.04237, 0.07", "-1.48541, 145.77, 5.3919, 0.88", "-2.1185, 147.63, 7.54315, 0.07", "-2.39593, 148.42, 8.35534, 0.07", "-2.69352, 149.232, 8.82394, 0.81", "-3.5042, 151.586, 10.0295, 0.07", "-3.96721, 152.932, 10.5878, 0.74", "-4.35356, 154.023, 10.936, 0.22", "-4.79538, 155.218, 11.2531, 0.22", "-4.9894, 155.744, 11.3862, 1.18", "-5.63978, 157.572, 11.8104, 0.07", "-6.58036, 160.535, 12.3891, 0.22", "-6.91797, 161.734, 12.5761, 0.22", "-7.30688, 163.274, 12.8163, 0.22", "-7.42986, 163.802, 12.9, 0.22", "-7.70052, 164.949, 13.0357, 1.18", "-8.21985, 167.234, 13.2059, 0.07", "-8.45014, 168.293, 13.2396, 0.07", "-8.58574, 168.869, 13.2465, 0.07", "-8.78707, 169.757, 13.2402, 1.25", "-9.39944, 172.256, 13.2207, 0.29", "-9.64745, 173.228, 13.2132, 0.29", "-9.81302, 173.835, 13.2183, 0.59", "-10.2572, 175.432, 13.2654, 0.07", "-10.4863, 176.302, 13.31, 0.44", "-10.9454, 178.034, 13.4681, 0.22", "-11.2602, 179.152, 13.6564, 0.66", "-11.9269, 181.32, 14.0726, 0.07", "-12.1861, 182.164, 14.2447, 0.07", "-12.6451, 183.736, 14.5741, 0.52", "-13.1394, 185.619, 15.0002, 0.22", "-13.5903, 187.689, 15.4881, 0.81", "-13.7407, 188.814, 15.7466, 0.81", "-13.8202, 190.482, 16.1061, 0.22", "-13.7989, 191.628, 16.3297, 0.22", "-13.6435, 193.233, 16.5968, 0.81", "-13.5174, 194.224, 16.7369, 0.81", "-13.3328, 196.326, 16.9942, 0.29", "-13.2848, 198.209, 17.2335, 0.29", "-13.3381, 199.462, 17.398, 0.29", "-13.5992, 201.647, 17.6953, 0.29", "-13.9366, 203.389, 17.9352, 1.11", "-14.7674, 206.613, 18.4216, 0.07", "-15.2952, 208.247, 18.6896, 0.07", "-15.8733, 209.82, 18.9623, 0.44", "-16.3944, 211.01, 19.186, 0.44", "-16.811, 211.789, 19.3472, 0.44", "-17.9888, 213.786, 19.7027, 0.37", "-18.098, 213.935, 19.7364, 0.81", "-18.748, 214.721, 20.0251, 0.29", "-19.3956, 215.448, 20.4429, 0.29", "-20.2052, 216.329, 21.0988, 0.29", "-21.0177, 217.153, 21.8354, 0.74", "-22.6155, 218.838, 23.4551, 0.07", "-23.645, 220.1, 24.6318, 0.59", "-24.279, 221.131, 25.6978, 0.07", "-24.5597, 221.753, 26.3572, 0.07", "-24.9736, 223.119, 27.7739, 0.66", "-25.15, 224.149, 28.8243, 0.15", "-25.1849, 224.832, 29.4488, 0.66", "-25.1112, 228.289, 32.2511, 0.07", "-25.0449, 228.904, 32.7531, 0.07", "-24.8605, 229.948, 33.5948, 0.44", "-24.5888, 231.359, 34.6366, 0.44", "-24.5128, 231.991, 35.0277, 0.44", "-24.563, 233.276, 35.5407, 1.11", "-24.987, 234.775, 35.7063, 0.07", "-25.7162, 236.246, 35.7827, 0.07", "-26.8679, 238.071, 35.7794, 0.37", "-27.8481, 239.426, 35.6984, 0.37", "-28.9844, 240.856, 35.4984, 0.07", "-30.0775, 242.089, 35.2663, 0.07", "-31.2435, 243.293, 34.9385, 0.07", "-32.5644, 244.52, 34.4938, 0.37", "-33.428, 245.288, 34.2015, 0.37", "-35.3127, 246.834, 33.5459, 0.37", "-36.3773, 247.597, 33.1609, 0.07", "-38.0946, 248.689, 32.5579, 0.07", "-40.029, 249.775, 31.9738, 0.07", "-41.6345, 250.583, 31.6341, 0.07", "-43.19, 251.332, 31.3849, 0.37", "-44.899, 252.124, 31.272, 0.07", "-45.5813, 252.443, 31.2683, 0.07", "-47.0047, 253.098, 31.4752, 0.07", "-48.5011, 253.786, 31.8968, 0.07" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "0.373636, 140.129, -6.82588, 0.07", "-0.3684, 141.464, -6.56155, 0.07", "-0.835552, 142.362, -6.38123, 0.07", "-1.13113, 142.941, -6.30944, 0.07", "-1.46225, 143.634, -6.24912, 0.07", "-1.81703, 144.404, -6.2278, 0.07", "-2.51688, 145.995, -6.23198, 1.03", "-2.60549, 146.211, -6.23892, 1.03", "-3.16826, 147.755, -6.34984, 0.07", "-3.49701, 148.806, -6.45529, 0.66", "-3.83723, 150.122, -6.61598, 0.15", "-3.91932, 150.565, -6.67575, 0.74", "-3.96092, 151.192, -6.76261, 0.74", "-3.91825, 151.752, -6.84687, 0.74", "-3.75671, 152.471, -6.9575, 0.07", "-3.52211, 153.161, -7.08491, 0.07", "-3.10057, 154.123, -7.27624, 0.07", "-2.47341, 155.261, -7.5549, 0.07", "-1.39351, 156.874, -8.0204, 0.07", "-1.08937, 157.277, -8.18048, 0.07", "-0.592788, 157.87, -8.46903, 1.11", "-0.35707, 158.12, -8.61308, 1.11", "0.778638, 159.173, -9.32779, 0.07", "1.46744, 159.743, -9.76519, 1.03", "3.11016, 161.01, -10.7651, 0.07", "3.52213, 161.346, -11.0146, 0.52", "4.02126, 161.801, -11.3094, 0.52", "4.3816, 162.2, -11.5494, 0.52", "4.6133, 162.494, -11.7146, 0.52", "5.38988, 163.553, -12.2546, 0.07", "5.89393, 164.275, -12.5747, 0.07", "6.46566, 165.146, -12.9508, 1.69", "7.8611, 167.426, -13.8812, 0.07", "8.22819, 168.11, -14.1949, 0.07", "8.50252, 168.679, -14.4763, 0.07", "8.7246, 169.229, -14.7514, 0.07", "8.92987, 169.846, -15.0477, 0.07", "9.13022, 170.749, -15.4537, 1.11", "9.34042, 173.104, -16.3217, 0.07", "9.33656, 173.802, -16.5662, 0.07", "9.25376, 174.996, -17.0082, 0.07", "9.16767, 175.69, -17.2624, 0.59", "8.9676, 176.867, -17.6784, 0.07", "8.82033, 177.502, -17.8995, 0.66", "8.60334, 178.181, -18.1633, 0.07", "8.17656, 179.243, -18.6738, 0.66", "7.87389, 179.915, -19.0408, 0.07", "7.79784, 180.08, -19.1393, 0.07", "7.32876, 181.073, -19.745, 1.18", "6.46691, 182.967, -20.8956, 0.22", "6.21138, 183.58, -21.3033, 0.22", "6.06612, 184.009, -21.665, 0.22", "5.82774, 185.037, -22.6752, 0.22", "5.78453, 185.325, -23.0097, 0.22", "5.79313, 185.768, -23.5846, 1.33", "6.06478, 187.108, -25.4396, 1.03", "6.58915, 188.791, -27.7964, 0.29", "6.73882, 189.186, -28.371, 1.18", "7.15551, 190.177, -29.6886, 0.07", "7.5536, 191.121, -30.7814, 0.07", "7.88922, 191.962, -31.5692, 0.07", "8.1834, 192.718, -32.0269, 1.25", "8.47885, 193.714, -32.328, 0.44", "8.86368, 195.519, -32.6362, 0.44", "9.01333, 196.538, -32.6782, 0.44", "9.02692, 197.148, -32.6574, 1.18", "9.00065, 197.607, -32.6109, 0.07", "8.87101, 199.183, -32.3686, 0.07", "8.8305, 199.632, -32.2734, 0.66", "8.81933, 199.745, -32.2507, 0.07", "8.73004, 200.944, -32.0493, 0.07", "8.69146, 201.835, -31.9267, 1.03", "8.67768, 202.245, -31.8843, 1.03", "8.67647, 202.372, -31.8721, 0.29", "8.66909, 203.238, -31.8299, 0.29", "8.66629, 203.859, -31.8209, 0.81", "8.66605, 203.975, -31.8228, 0.15", "8.65818, 204.784, -31.8392, 0.15", "8.64024, 205.774, -31.8205, 0.15", "8.60189, 206.841, -31.8409, 0.96", "8.60189, 206.841, -31.8409, 0.07", "8.62447, 208.081, -31.9678, 0.07", "8.65503, 208.6, -32.0365, 0.07", "8.70368, 209.245, -32.2036, 0.88", "8.83173, 210.298, -32.5705, 0.15", "8.95755, 211.245, -32.9546, 0.15", "9.06531, 212.063, -33.3519, 0.15", "9.11568, 212.42, -33.5586, 1.11", "9.29395, 213.661, -34.3422, 0.07", "9.4671, 214.87, -35.144, 0.07", "9.50364, 215.1, -35.2767, 0.07", "9.55063, 215.628, -35.6419, 0.59" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "18.0714, -47.5718, 30.4324, 0.07", "17.383, -47.5534, 30.6942, 0.07", "17.0007, -47.5432, 30.8396, 0.07", "16.2276, -47.5225, 31.1336, 1.84" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "18.0714, -47.5718, 30.4324, 0.22", "18.4529, -47.5065, 30.7662, 0.22", "19.063, -47.402, 31.3, 0.22", "20.1254, -47.2201, 32.2294, 1.33" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_37",
    "id" : "dend_37",
    "points3d" : [ "5.12274, 74.4335, 16.6628, 0.15", "3.92144, 73.8579, 17.9524, 0.15", "3.12045, 73.4761, 18.7269, 0.15", "2.49804, 73.2081, 19.3118, 0.15", "1.73792, 72.936, 19.9693, 0.15", "1.12131, 72.7364, 20.4843, 0.15", "-0.0110244, 72.3487, 21.5226, 0.15", "-1.33947, 71.9231, 22.7613, 0.15", "-1.98271, 71.7534, 23.4088, 0.15", "-3.09933, 71.5557, 24.6266, 0.15", "-3.58805, 71.5088, 25.2359, 0.15", "-4.71297, 71.4451, 26.8204, 0.15", "-5.51005, 71.4084, 28.0944, 0.15", "-6.01032, 71.388, 28.8973, 0.15", "-6.87066, 71.3123, 30.251, 0.15", "-7.52135, 71.2235, 31.2261, 0.15", "-8.30895, 71.117, 32.2127, 0.15", "-9.05641, 71.0002, 32.9928, 0.15", "-9.97595, 70.7793, 33.9469, 0.15", "-10.6383, 70.5966, 34.6324, 0.15", "-11.3007, 70.4097, 35.3092, 0.15", "-12.6248, 70.0643, 36.5751, 0.15", "-13.0964, 69.9463, 37.0241, 0.15", "-14.6033, 69.5456, 38.4654, 0.15", "-15.9565, 69.1563, 39.7812, 0.15", "-17.2908, 68.7646, 41.0717, 0.15", "-18.2263, 68.4659, 41.9816, 0.15", "-19.1137, 68.1277, 42.8338, 0.15", "-19.555, 67.9467, 43.2417, 0.15", "-20.4632, 67.5497, 44.0165, 0.15", "-20.9239, 67.3147, 44.4106, 0.15", "-21.5979, 66.9239, 45.0217, 0.15", "-22.5396, 66.3202, 45.9907, 0.15", "-22.9434, 66.0439, 46.4044, 0.15" ],
    "parent" : "dend_29",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "5.12274, 74.4335, 16.6628, 0.74", "4.00617, 75.369, 17.1761, 0.74", "3.67292, 75.6973, 17.362, 0.74", "2.7767, 76.6955, 17.9466, 0.74", "1.92082, 78.061, 18.9306, 1.03", "1.54766, 78.7416, 19.4929, 0.66", "1.03061, 79.8341, 20.3977, 1.03", "0.560023, 80.7076, 21.2025, 1.33", "0.12475, 81.756, 22.1131, 1.03", "-0.528738, 84.1014, 23.9765, 0.96", "-0.682911, 85.22, 24.8046, 0.96", "-0.750881, 86.785, 25.8276, 0.74", "-0.408059, 91.3061, 28.3417, 0.74", "0.529782, 96.1169, 30.4151, 0.74", "0.885646, 97.3307, 30.7663, 0.74", "1.46061, 98.933, 30.9674, 0.74", "1.8795, 99.8352, 31.0136, 0.74", "2.61146, 101.23, 31.0268, 0.74", "3.38215, 102.49, 30.9753, 0.81", "3.52422, 102.881, 31.0329, 0.81", "3.8751, 103.862, 31.1511, 0.81", "4.13586, 104.862, 31.243, 0.81", "4.34937, 106.09, 31.3893, 1.18" ],
    "parent" : "dend_29",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "117.231, 133.626, -27.7745, 0.44", "118.612, 135.046, -28.6091, 0.44", "119.229, 135.712, -28.9766, 0.44", "119.358, 135.862, -29.0501, 0.44", "120.482, 137.232, -29.6758, 1.4", "121.244, 138.212, -30.0823, 0.29", "121.644, 138.727, -30.2874, 0.29", "122.002, 139.158, -30.4163, 0.29", "122.79, 140.096, -30.5974, 0.29", "122.997, 140.337, -30.6246, 0.29", "123.758, 141.231, -30.6529, 1.33", "124.317, 141.862, -30.6606, 1.33", "126.005, 143.683, -30.6572, 0.22", "126.554, 144.236, -30.6492, 0.22", "127.374, 145.011, -30.6182, 0.22", "127.955, 145.542, -30.5875, 0.74" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "117.231, 133.626, -27.7745, 0.59", "118.567, 133.814, -27.9062, 0.59", "119.92, 134.018, -27.9739, 0.07", "120.694, 134.135, -28.0089, 0.07", "122.171, 134.442, -28.085, 1.18", "123.019, 134.652, -28.0891, 1.18", "125.305, 135.265, -28.0402, 0.22", "126.415, 135.636, -27.9706, 0.22", "127.247, 135.925, -27.8844, 0.22", "128.549, 136.437, -27.6981, 0.22", "129.736, 136.952, -27.5094, 1.11", "129.939, 137.06, -27.46, 0.07", "130.691, 137.584, -27.222, 0.07", "131.483, 138.259, -26.8721, 1.18", "132.809, 139.609, -26.1734, 0.07", "133.232, 140.092, -25.9123, 0.96", "134.447, 141.489, -25.1052, 0.96", "135.156, 142.278, -24.5991, 0.29", "135.619, 142.783, -24.2429, 0.29", "136.149, 143.211, -23.8615, 0.29", "136.771, 143.45, -23.5181, 0.88", "138.78, 143.513, -22.8564, 0.29", "139.83, 143.293, -22.6912, 0.29", "140.208, 143.167, -22.6559, 0.29", "142.327, 142.221, -22.5794, 0.29", "142.533, 142.105, -22.5907, 0.29", "143.746, 141.338, -22.7692, 0.29", "144.505, 140.794, -22.9332, 0.29", "145.088, 140.35, -23.0631, 0.29", "145.649, 139.922, -23.2008, 0.81", "147.513, 138.581, -23.7601, 0.22", "147.887, 138.305, -23.8722, 0.22" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_36",
    "id" : "dend_36",
    "points3d" : [ "4.34937, 106.09, 31.3893, 0.74", "5.5553, 108.9, 29.4783, 0.74", "5.78217, 109.622, 29.063, 0.74", "6.06144, 110.733, 28.5097, 0.74", "6.35736, 112.249, 27.8835, 0.59", "6.8103, 115.021, 26.8746, 0.59", "6.9466, 115.953, 26.5612, 0.59", "6.98832, 117.248, 26.2169, 0.59", "7.00397, 117.954, 26.0725, 0.59", "7.02585, 119.178, 25.8832, 0.59", "7.07476, 120.745, 25.6773, 0.59", "7.13622, 121.859, 25.5481, 0.88", "7.2689, 123.632, 25.2689, 0.59", "7.42045, 125.757, 24.7967, 0.52", "7.4593, 126.804, 24.5025, 0.52", "7.46245, 127.95, 24.1451, 0.88", "7.42763, 128.868, 23.8573, 0.88", "7.29817, 130.515, 23.3826, 0.44", "7.07605, 132.326, 22.9422, 0.44", "6.76557, 134.274, 22.5577, 0.74", "6.59453, 135.256, 22.4272, 0.74", "6.46297, 135.989, 22.3768, 0.74", "6.11732, 137.915, 22.3867, 0.59", "5.89231, 139.236, 22.4867, 0.59", "5.62003, 141.273, 22.7251, 0.59", "5.41733, 143.163, 22.9713, 0.59", "5.29546, 144.413, 23.1161, 0.59", "5.17552, 145.931, 23.2499, 0.59", "5.11902, 146.933, 23.31, 0.59", "5.10216, 148.275, 23.3833, 0.59", "5.11294, 149.105, 23.4495, 0.59", "5.13868, 150.186, 23.5453, 0.59", "5.17667, 151.633, 23.6842, 0.59", "5.24529, 153.913, 23.9037, 0.59", "5.30825, 156.135, 24.1332, 0.37", "5.36726, 157.993, 24.2973, 0.37", "5.45625, 159.16, 24.3991, 0.74", "5.72279, 161.561, 24.5945, 0.29", "5.89873, 162.871, 24.7001, 0.29", "6.00515, 163.556, 24.7489, 0.29", "6.42141, 166.157, 24.9051, 0.59", "6.877, 168.792, 25.0387, 0.52", "7.03745, 169.724, 25.0861, 0.52", "7.28312, 171.326, 25.1829, 0.52", "7.35417, 172.012, 25.2293, 0.52", "7.4628, 173.703, 25.3198, 0.52", "7.49076, 175.457, 25.3922, 0.52", "7.46313, 176.448, 25.3955, 0.52", "7.41298, 178.48, 25.3793, 0.74", "7.30564, 180.915, 25.285, 0.07", "7.24638, 182.276, 25.2199, 0.07", "7.18126, 183.024, 25.1691, 0.07", "7.02094, 184.448, 25.0546, 0.07", "6.87957, 185.543, 24.9515, 0.07", "6.65175, 187.095, 24.7953, 0.37", "6.46836, 188.214, 24.7101, 0.74", "6.07021, 190.939, 24.6636, 0.07", "5.96675, 191.776, 24.685, 0.07", "5.86882, 192.676, 24.7738, 0.07", "5.79643, 193.497, 24.9236, 0.07", "5.72436, 194.447, 25.2049, 1.18", "5.56631, 196.331, 25.8529, 0.44", "5.54252, 196.982, 26.1424, 0.44", "5.46868, 198.114, 26.6889, 0.44", "5.35183, 199.394, 27.3978, 0.44", "5.19663, 200.681, 28.1856, 2.28" ],
    "parent" : "dend_30",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_31",
    "id" : "dend_31",
    "points3d" : [ "4.34937, 106.09, 31.3893, 0.74", "4.43259, 107.901, 31.503, 0.74", "4.48618, 109.581, 31.7634, 0.74", "4.46271, 110.761, 32.0495, 0.74", "4.34829, 112.752, 32.732, 0.74", "4.17948, 114.441, 33.4326, 0.74", "4.00006, 115.772, 34.0479, 0.52", "3.73794, 117.603, 34.9599, 0.81", "3.51721, 119.188, 35.8393, 0.81", "3.29179, 120.879, 36.8146, 0.66", "3.1, 122.176, 37.5285, 0.66", "2.964, 123.109, 37.9817, 0.66", "2.71749, 124.575, 38.556, 0.66", "2.27627, 126.918, 39.2887, 0.66", "1.88512, 128.73, 39.7548, 0.66", "1.3195, 131.085, 40.2581, 0.96", "0.851103, 133.079, 40.6181, 0.96", "0.237724, 135.679, 41.0295, 0.81", "-0.163616, 137.172, 41.2369, 0.81", "-0.848558, 139.394, 41.5211, 0.74", "-1.30815, 140.861, 41.7215, 0.74", "-2.06447, 143.524, 42.0844, 0.74", "-2.3246, 144.6, 42.2067, 0.74", "-2.67601, 146.655, 42.3971, 0.74", "-2.84744, 148.165, 42.4989, 0.74", "-2.94613, 149.31, 42.5963, 0.74", "-3.07248, 150.655, 42.7478, 0.88", "-3.19899, 152.031, 42.9345, 0.88", "-3.3815, 154.015, 43.1792, 1.11", "-3.56665, 156.559, 43.4509, 0.66", "-3.75842, 158.861, 43.6715, 0.81", "-3.93533, 160.603, 43.8403, 0.96", "-4.11744, 162.033, 43.9741, 0.96", "-4.5034, 164.187, 44.1716, 0.96", "-4.76326, 165.339, 44.2761, 0.96", "-5.08424, 166.607, 44.3774, 0.96", "-5.43356, 168.049, 44.4524, 0.96", "-5.98401, 170.524, 44.5542, 0.74", "-6.36061, 172.357, 44.6583, 0.74", "-6.60548, 173.518, 44.7408, 0.74", "-6.79138, 174.323, 44.8014, 0.74", "-7.01768, 175.41, 44.8695, 0.74", "-7.27799, 176.933, 44.9606, 0.74", "-7.43678, 178.522, 44.9855, 0.44", "-7.46754, 179.819, 44.946, 0.66", "-7.42965, 181.869, 44.8069, 0.66", "-7.31958, 184.042, 44.6122, 0.66", "-7.1818, 185.902, 44.4021, 0.66", "-6.97663, 188.344, 44.1263, 0.66", "-6.87171, 190.527, 43.7945, 0.66", "-6.82304, 192.033, 43.5288, 0.66", "-6.82091, 193.589, 43.2115, 0.66", "-6.9005, 195.372, 42.8612, 0.66", "-7.069, 197.537, 42.4764, 0.88", "-7.37978, 200.864, 41.9705, 0.66", "-7.63193, 203.652, 41.5675, 0.66", "-7.74742, 204.794, 41.408, 0.66", "-7.93185, 206.648, 41.175, 0.66", "-8.07755, 208.453, 40.9934, 0.66", "-8.16668, 210.198, 40.8611, 0.66", "-8.20592, 211.902, 40.8352, 0.37", "-8.35729, 214.044, 40.8651, 0.74", "-8.51947, 215.332, 40.9122, 1.18", "-8.80046, 216.948, 41.0058, 0.59", "-9.0227, 218.023, 41.087, 0.59", "-9.30455, 219.168, 41.2119, 0.59", "-9.74628, 220.768, 41.4603, 0.59", "-10.3497, 223.054, 41.9402, 0.96", "-10.5394, 223.657, 42.0723, 1.33" ],
    "parent" : "dend_30",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_33",
    "id" : "dend_33",
    "points3d" : [ "-10.5394, 223.657, 42.0723, 0.44", "-10.3977, 224.845, 41.8446, 0.44", "-10.3149, 225.54, 41.7115, 0.66", "-10.2319, 226.237, 41.5781, 0.66", "-10.193, 226.563, 41.5156, 0.66" ],
    "parent" : "dend_31",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_32",
    "id" : "dend_32",
    "points3d" : [ "-10.5394, 223.657, 42.0723, 0.59", "-11.9321, 224.934, 42.5614, 0.59", "-12.5909, 225.599, 42.7965, 0.59", "-13.4256, 226.485, 43.1099, 0.59", "-14.4874, 227.658, 43.5407, 0.59", "-15.2892, 228.604, 43.8872, 0.59", "-16.3291, 229.934, 44.3756, 1.11", "-16.8866, 230.789, 44.6963, 0.59", "-17.2146, 231.324, 44.9052, 0.59", "-17.6729, 232.11, 45.2509, 0.59", "-18.0973, 232.856, 45.5996, 0.59", "-18.6911, 234.024, 46.2888, 0.59", "-18.9591, 234.634, 46.7128, 0.59", "-19.3323, 235.595, 47.409, 0.59", "-19.8752, 237.188, 48.5883, 0.81", "-20.0398, 237.896, 49.1463, 0.81", "-20.2646, 239.667, 50.5799, 0.59", "-20.2857, 240.249, 51.0403, 0.88", "-20.2715, 240.618, 51.3083, 0.88", "-20.22, 241.115, 51.6211, 0.88", "-20.0097, 243.039, 52.6769, 0.59", "-19.9647, 243.709, 53.0273, 0.96", "-19.9068, 245.325, 53.7549, 0.59", "-19.8746, 246.156, 54.1125, 0.59", "-19.8683, 247.245, 54.5435, 0.59", "-19.9289, 248.413, 54.9713, 0.59", "-20.1415, 249.973, 55.4113, 0.59", "-20.3101, 251.006, 55.6632, 0.29", "-20.4936, 251.899, 55.8267, 0.66", "-20.8679, 253.182, 56.0358, 0.66", "-21.2629, 254.166, 56.1901, 0.66", "-21.9809, 255.521, 56.4098, 0.66", "-22.4233, 256.171, 56.519, 0.66", "-23.0889, 257.008, 56.7316, 0.52", "-23.6852, 257.711, 56.9323, 0.88", "-24.4096, 258.542, 57.2159, 0.88", "-25.3005, 259.591, 57.6073, 0.52", "-26.2705, 260.772, 58.0979, 0.74", "-27.072, 261.794, 58.5272, 0.96", "-28.1547, 263.346, 59.1534, 0.96", "-28.9913, 264.719, 59.6078, 0.59", "-29.4861, 265.654, 59.8691, 0.59", "-29.8459, 266.434, 60.0666, 0.59", "-30.1828, 267.234, 60.2476, 0.59", "-30.5898, 268.26, 60.4486, 0.96", "-31.2685, 270.09, 60.7827, 0.44", "-31.6053, 271.047, 60.9209, 0.96", "-31.9585, 272.035, 61.0418, 0.96", "-32.4752, 273.433, 61.1537, 0.44", "-32.7065, 274.047, 61.1879, 0.44", "-32.9467, 274.643, 61.2059, 0.44", "-33.2539, 275.356, 61.1981, 0.88", "-33.6312, 276.192, 61.1548, 0.88", "-34.3772, 277.776, 61.0667, 0.52", "-34.649, 278.335, 61.0517, 0.52", "-35.4267, 279.938, 61.0701, 0.07", "-35.7868, 280.676, 61.125, 0.88", "-36.2986, 281.725, 61.2754, 0.88", "-36.7133, 282.685, 61.4902, 0.44", "-37.0371, 283.535, 61.7143, 0.44", "-37.5886, 285.211, 62.1615, 0.44", "-37.9038, 286.45, 62.491, 1.18", "-38.0465, 287.193, 62.6702, 1.18", "-38.3178, 289.002, 63.0296, 0.07", "-38.4563, 290.184, 63.2117, 0.66", "-38.5129, 291.015, 63.3144, 0.22", "-38.5073, 292.135, 63.416, 0.22", "-38.4323, 293.165, 63.4812, 0.59", "-38.2661, 294.399, 63.5361, 0.59", "-38.0988, 295.206, 63.553, 0.59", "-37.7749, 296.37, 63.5806, 0.07", "-37.4489, 297.36, 63.573, 0.59", "-37.2694, 297.842, 63.5527, 0.96", "-37.0371, 298.454, 63.5205, 0.96", "-36.7755, 299.221, 63.4924, 0.37", "-36.5855, 299.987, 63.5029, 0.07", "-36.4923, 301.194, 63.5433, 0.07", "-36.5716, 302.253, 63.6292, 0.07", "-36.725, 303.099, 63.7371, 0.07", "-36.9798, 304.026, 63.897, 0.07", "-37.1187, 304.415, 63.9823, 1.03", "-37.5228, 305.394, 64.2223, 0.66", "-37.8054, 306.069, 64.387, 0.66", "-38.0543, 306.749, 64.5313, 0.66", "-38.1798, 307.491, 64.7367, 0.66", "-38.198, 308.123, 64.9608, 0.66", "-38.1765, 308.485, 65.1054, 0.66", "-38.0752, 309.291, 65.4563, 0.07", "-38.0188, 309.647, 65.6058, 0.07", "-37.6595, 311.862, 66.5125, 0.37", "-37.5123, 312.747, 66.8005, 0.66", "-37.2434, 314.302, 67.1841, 0.07", "-37.1698, 314.744, 67.2605, 0.07", "-37.0358, 315.58, 67.3348, 0.66", "-36.9013, 316.37, 67.3182, 1.11", "-36.574, 318.135, 67.0265, 0.07", "-36.4505, 318.66, 66.9139, 0.07", "-36.2195, 319.526, 66.7298, 0.07", "-36.0177, 320.312, 66.6046, 0.59", "-35.8506, 320.985, 66.5356, 0.59", "-35.6968, 321.707, 66.5312, 0.59", "-35.6839, 321.806, 66.5482, 1.03", "-35.636, 323.024, 66.8999, 0.37", "-35.6401, 323.817, 67.2739, 0.37", "-35.6541, 324.037, 67.4103, 0.37", "-35.7283, 324.682, 67.8748, 0.37", "-35.8513, 325.426, 68.4637, 0.37", "-35.9923, 326.037, 68.9845, 0.37", "-36.3306, 327.159, 69.8723, 0.07", "-36.4948, 327.63, 70.2182, 0.59", "-36.6712, 328.052, 70.4951, 0.59", "-36.9583, 328.643, 70.8442, 0.59", "-37.3609, 329.424, 71.2342, 1.33", "-38.3114, 331.179, 71.9578, 0.07", "-38.6847, 331.854, 72.1848, 0.07", "-39.2244, 332.883, 72.5006, 0.37", "-39.5969, 333.609, 72.7088, 0.37", "-40.199, 334.822, 73.03, 0.74", "-40.6508, 335.749, 73.2722, 0.15", "-40.7929, 336.03, 73.3558, 0.15", "-41.089, 336.666, 73.5511, 0.15", "-41.4131, 337.433, 73.7997, 0.15", "-41.7315, 338.248, 74.0648, 0.81", "-41.9664, 338.919, 74.2812, 0.81", "-42.2216, 339.81, 74.5496, 0.81", "-42.7036, 341.803, 75.1031, 0.29", "-42.9375, 342.94, 75.4014, 0.44", "-43.1459, 344.075, 75.697, 0.44", "-43.3469, 345.294, 76.0041, 0.44", "-43.5108, 346.192, 76.1968, 0.88", "-43.7232, 347.26, 76.3971, 1.25", "-44.033, 348.563, 76.5921, 0.66", "-44.5073, 350.411, 76.7832, 0.29", "-44.8776, 351.793, 76.8858, 0.74", "-45.408, 353.637, 76.974, 0.22", "-45.6692, 354.514, 76.9989, 0.22", "-46.1724, 356.271, 76.9969, 0.81", "-46.6519, 358.183, 76.9281, 0.37", "-46.9246, 359.46, 76.8318, 1.11", "-47.1884, 360.77, 76.6523, 0.44", "-47.2834, 361.37, 76.5404, 0.44", "-47.395, 362.017, 76.3713, 0.44", "-47.5642, 363.069, 76.0198, 0.44", "-47.7052, 363.903, 75.6769, 0.44", "-47.9923, 365.713, 74.7971, 0.07", "-48.0813, 366.317, 74.491, 0.07", "-48.2331, 367.249, 74.0334, 0.07", "-48.4314, 368.163, 73.634, 0.52", "-48.5828, 368.856, 73.3884, 0.52", "-48.7835, 369.956, 73.114, 0.07", "-48.8408, 370.468, 73.0576, 0.15", "-48.898, 371.05, 73.0272, 0.15", "-49.0472, 373.059, 73.0307, 0.59", "-49.1175, 374.258, 73.1059, 0.07", "-49.1375, 374.981, 73.1807, 0.88", "-49.0952, 376.976, 73.4285, 0.29", "-49.0466, 377.693, 73.5121, 1.03", "-48.9333, 378.658, 73.632, 0.07", "-48.6594, 380.149, 73.8287, 0.07", "-48.434, 381.238, 73.8581, 0.07", "-48.2841, 381.858, 73.8266, 0.07", "-48.0302, 382.899, 73.6386, 0.07", "-47.8741, 383.557, 73.4667, 0.07", "-47.6187, 384.667, 73.0873, 0.07", "-47.2261, 386.671, 72.2475, 0.37", "-47.0471, 387.85, 71.7577, 0.07", "-46.9177, 389.219, 71.2646, 0.07", "-46.9001, 389.736, 71.1136, 0.07", "-46.9187, 390.415, 70.9918, 0.07", "-47.0101, 391.552, 70.9439, 1.4", "-47.1167, 392.813, 71.0664, 0.29", "-47.2351, 394.142, 71.2718, 0.07", "-47.3062, 394.843, 71.4406, 1.11", "-47.5351, 396.427, 71.9112, 0.15", "-47.8706, 398.201, 72.5404, 0.15", "-48.2021, 399.531, 73.112, 0.59", "-48.4589, 400.285, 73.4944, 0.81", "-49.012, 401.519, 74.2245, 0.29", "-49.3717, 402.159, 74.689, 0.29", "-49.7256, 402.655, 75.1286, 0.29", "-50.5053, 403.559, 75.981, 0.29", "-51.3439, 404.488, 76.8134, 0.29", "-51.7865, 405.012, 77.2436, 0.29", "-52.5771, 405.968, 77.9052, 1.03", "-53.2792, 406.85, 78.4148, 0.44", "-54.3605, 408.285, 79.0047, 0.07", "-54.9259, 409.114, 79.2211, 0.07", "-55.4586, 409.973, 79.2811, 0.44", "-56.2517, 411.314, 79.2365, 0.44", "-56.5037, 411.761, 79.1857, 1.25", "-57.4476, 413.492, 78.9294, 0.07", "-57.8785, 414.286, 78.7881, 0.44", "-59.1595, 416.6, 78.3803, 0.07", "-59.556, 417.355, 78.2472, 0.07", "-59.8018, 417.874, 78.1532, 0.07", "-60.078, 418.491, 78.0277, 0.07", "-60.9081, 420.461, 77.6178, 0.07", "-61.3652, 421.464, 77.3656, 0.07", "-61.6321, 422.034, 77.2179, 0.07", "-62.227, 423.293, 76.7772, 0.07", "-62.5902, 424.077, 76.4641, 0.07", "-62.7742, 424.463, 76.298, 0.88", "-63.609, 426.205, 75.568, 0.07", "-63.7697, 426.554, 75.4255, 0.66", "-64.3629, 427.934, 74.9485, 0.22", "-64.5116, 428.349, 74.8331, 0.22", "-64.8373, 429.45, 74.5711, 0.81", "-65.0477, 430.875, 74.4156, 0.07", "-65.0437, 432.011, 74.4673, 0.07", "-64.987, 432.97, 74.6069, 0.07", "-64.8365, 433.874, 74.941, 0.96", "-64.7563, 434.213, 75.1194, 0.96", "-64.232, 435.955, 76.3229, 0.07", "-64.0174, 436.646, 76.9259, 0.07", "-63.9101, 437.038, 77.3127, 0.81", "-63.5077, 438.768, 78.9877, 0.29", "-63.4514, 439.08, 79.2556, 0.29", "-63.4066, 439.535, 79.5731, 1.03", "-63.4092, 440.119, 79.8569, 1.03", "-63.4301, 440.852, 80.1233, 1.03", "-63.5052, 442.231, 80.4772, 0.29", "-63.5957, 443.247, 80.6519, 0.29", "-63.69, 444.043, 80.7825, 0.29", "-63.9022, 445.338, 81.0116, 0.29", "-64.15, 446.428, 81.2402, 1.03", "-64.5171, 447.641, 81.5516, 0.07", "-64.6136, 447.9, 81.63, 0.59", "-65.1443, 449.06, 81.9837, 0.07", "-65.8536, 450.334, 82.3973, 0.07", "-66.3871, 451.106, 82.6874, 0.07", "-67.1764, 452.031, 83.0467, 0.07", "-67.687, 452.541, 83.2554, 0.07", "-68.5271, 453.34, 83.5764, 0.88", "-69.3229, 454.067, 83.8588, 0.07", "-70.1475, 454.854, 84.047, 0.07", "-71.0211, 455.828, 84.1688, 0.07", "-71.4851, 456.419, 84.2135, 0.07", "-71.8043, 456.918, 84.2423, 0.07", "-72.0001, 457.332, 84.27, 0.07", "-72.7931, 459.63, 84.3597, 0.07", "-73.0373, 460.637, 84.4147, 0.07", "-73.1748, 461.332, 84.4632, 0.07", "-73.3587, 462.352, 84.5302, 0.07", "-73.6298, 463.923, 84.6589, 0.07", "-73.7895, 465.01, 84.781, 0.07", "-73.9555, 467.216, 85.1774, 0.07" ],
    "parent" : "dend_31",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_35",
    "id" : "dend_35",
    "points3d" : [ "-10.193, 226.563, 41.5156, 0.29", "-9.944, 227.866, 40.7763, 0.29", "-9.82872, 228.452, 40.5341, 0.29", "-9.44073, 229.988, 40.0414, 0.29", "-8.94968, 231.874, 39.4868, 0.88", "-8.77656, 232.496, 39.3308, 0.88", "-8.51673, 233.419, 39.1259, 0.88", "-8.1107, 234.85, 38.9194, 0.37", "-7.29423, 237.649, 38.6053, 0.07", "-7.00695, 238.482, 38.5191, 0.07", "-6.63384, 239.553, 38.3571, 0.07", "-6.45255, 240.034, 38.2715, 0.07", "-6.26138, 240.519, 38.17, 0.88", "-5.97958, 241.231, 37.9848, 0.88", "-5.34101, 242.851, 37.4288, 0.44", "-5.07423, 243.511, 37.1478, 0.44", "-4.63643, 244.532, 36.5677, 0.44", "-4.23785, 245.335, 35.9877, 0.96", "-3.88318, 246.055, 35.3055, 0.07", "-3.75843, 246.39, 34.901, 0.07", "-3.73077, 246.527, 34.6631, 0.07", "-3.64521, 247.03, 33.4709, 0.07", "-3.58967, 247.319, 32.5176, 0.52", "-3.58059, 247.669, 31.1585, 0.52", "-3.64798, 248.007, 30.0414, 0.07", "-3.74256, 248.415, 28.9591, 0.07", "-3.78532, 248.612, 28.5175, 0.07", "-3.86685, 249.057, 27.7326, 0.07", "-3.94305, 249.656, 26.784, 0.96", "-3.95314, 250.655, 25.3458, 0.29", "-3.93595, 251.194, 24.6561, 0.29", "-3.91877, 251.555, 24.2668, 1.25", "-3.85902, 252.677, 23.1295, 0.15", "-3.81623, 253.232, 22.6076, 0.15", "-3.71811, 253.913, 22.024, 0.59", "-3.51364, 254.95, 21.1998, 0.15", "-3.32808, 255.954, 20.4389, 0.74" ],
    "parent" : "dend_33",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_34",
    "id" : "dend_34",
    "points3d" : [ "-10.193, 226.563, 41.5156, 0.22", "-10.414, 227.944, 41.4493, 0.22", "-10.4828, 228.512, 41.4084, 0.22", "-10.5565, 229.244, 41.3573, 0.22", "-10.5892, 229.655, 41.3242, 0.22", "-10.6363, 230.573, 41.224, 0.66", "-10.6611, 231.428, 41.1113, 0.07", "-10.6479, 231.741, 41.0549, 0.07", "-10.6282, 232.216, 40.9624, 1.03", "-10.5771, 232.868, 40.8428, 1.03", "-10.4512, 234.07, 40.6284, 0.37", "-10.3225, 235.124, 40.4565, 0.96", "-10.1864, 236.149, 40.3028, 0.29", "-10.0722, 236.975, 40.1889, 0.29", "-9.91105, 238.126, 40.0458, 0.29", "-9.84911, 238.587, 40.0029, 0.29", "-9.75989, 239.316, 39.9662, 0.29", "-9.69047, 239.993, 39.9599, 0.29", "-9.63305, 240.461, 39.9789, 0.29", "-9.52213, 241.343, 40.0523, 0.59", "-9.46579, 241.957, 40.1321, 0.59", "-9.41213, 242.498, 40.2229, 0.59", "-9.37823, 242.826, 40.2833, 0.96", "-9.2578, 244.024, 40.5085, 0.52", "-9.18237, 244.823, 40.6492, 0.07", "-9.05081, 246.376, 40.9007, 0.07", "-9.03035, 246.687, 40.9424, 0.07", "-8.99667, 247.467, 41.0265, 1.11", "-8.9961, 248.242, 41.1115, 1.11", "-9.02849, 248.923, 41.1868, 0.44", "-9.05525, 249.497, 41.2486, 0.44", "-9.13383, 250.62, 41.3424, 0.44", "-9.17113, 251.094, 41.369, 0.88", "-9.31268, 252.807, 41.4238, 0.52", "-9.41037, 253.952, 41.439, 0.52", "-9.53915, 255.51, 41.4189, 0.52", "-9.67544, 257.291, 41.3435, 0.52", "-9.73361, 258.246, 41.2732, 0.52", "-9.75946, 259.042, 41.1876, 0.88", "-9.75937, 259.206, 41.1634, 0.07", "-9.71794, 260.221, 41.0093, 0.07", "-9.63905, 261.146, 40.8729, 1.11", "-9.43712, 262.645, 40.6667, 0.15", "-9.26637, 263.642, 40.5331, 0.22", "-9.1505, 264.221, 40.4547, 0.22", "-8.98019, 265.006, 40.354, 0.96", "-8.96419, 265.074, 40.3462, 0.07", "-8.7638, 265.967, 40.2821, 0.07", "-8.61574, 266.714, 40.2618, 0.07", "-8.52239, 267.328, 40.2784, 0.96", "-8.45124, 267.961, 40.316, 0.96", "-8.39975, 268.744, 40.3811, 0.07", "-8.37252, 269.65, 40.4932, 0.07", "-8.38298, 270.078, 40.571, 0.07", "-8.43791, 270.433, 40.6522, 0.52", "-8.56048, 270.931, 40.797, 0.96", "-8.7724, 271.536, 41.0364, 0.96", "-8.95077, 271.941, 41.2394, 0.96", "-9.31915, 272.702, 41.6647, 0.44", "-9.8306, 273.674, 42.248, 0.44", "-10.0522, 274.022, 42.4474, 0.88", "-10.5746, 274.748, 42.8642, 0.88", "-10.955, 275.251, 43.1435, 0.88", "-11.2786, 275.697, 43.3591, 0.88", "-11.7364, 276.405, 43.6379, 0.88", "-12.3067, 277.584, 43.9557, 0.37", "-12.5619, 278.192, 44.0812, 0.37", "-12.7487, 278.693, 44.1753, 0.37", "-12.9536, 279.331, 44.3153, 0.88", "-13.1291, 280.02, 44.4905, 0.37", "-13.3395, 281.33, 44.8233, 0.37", "-13.3971, 281.944, 44.9831, 0.37", "-13.4229, 282.55, 45.1465, 1.25", "-13.429, 283.333, 45.391, 0.15", "-13.4145, 284.034, 45.6472, 0.66", "-13.3701, 285.124, 46.0848, 0.15", "-13.3564, 285.299, 46.1607, 0.15", "-13.2228, 286.365, 46.5922, 0.81", "-13.1089, 286.982, 46.8269, 0.81", "-13.0048, 287.366, 46.9873, 0.81" ],
    "parent" : "dend_33",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_18", "dend_13", "dend_12", "dend_5", "dend_4", "dend_3", "dend_0", "dend_39", "dend_19", "dend_17", "dend_14", "dend_11", "dend_6", "dend_2", "dend_1", "dend_40", "dend_28", "dend_23", "dend_20", "dend_16", "dend_15", "dend_8", "dend_7", "dend_38", "dend_29", "dend_27", "dend_24", "dend_22", "dend_21", "dend_10", "dend_9", "dend_37", "dend_30", "dend_26", "dend_25", "dend_36", "dend_31", "dend_33", "dend_32", "dend_35", "dend_34" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_18", "dend_13", "dend_12", "dend_5", "dend_4", "dend_3", "dend_0", "dend_39", "dend_19", "dend_17", "dend_14", "dend_11", "dend_6", "dend_2", "dend_1", "dend_40", "dend_28", "dend_23", "dend_20", "dend_16", "dend_15", "dend_8", "dend_7", "dend_38", "dend_29", "dend_27", "dend_24", "dend_22", "dend_21", "dend_10", "dend_9", "dend_37", "dend_30", "dend_26", "dend_25", "dend_36", "dend_31", "dend_33", "dend_32", "dend_35", "dend_34" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_40" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_35",
    "groups" : [ ],
    "sections" : [ "dend_37" ]
  }, {
    "name" : "OneSecGrp_SectionRef_39",
    "groups" : [ ],
    "sections" : [ "dend_36" ]
  }, {
    "name" : "OneSecGrp_SectionRef_40",
    "groups" : [ ],
    "sections" : [ "dend_31" ]
  }, {
    "name" : "OneSecGrp_SectionRef_42",
    "groups" : [ ],
    "sections" : [ "dend_32" ]
  }, {
    "name" : "OneSecGrp_SectionRef_43",
    "groups" : [ ],
    "sections" : [ "dend_35" ]
  }, {
    "name" : "OneSecGrp_SectionRef_44",
    "groups" : [ ],
    "sections" : [ "dend_34" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_39" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_38" ]
  }, {
    "name" : "OneSecGrp_SectionRef_36",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_37",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_38",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_41",
    "groups" : [ ],
    "sections" : [ "dend_33" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30", "dend_31", "dend_32", "dend_33", "dend_34", "dend_35", "dend_36", "dend_37", "dend_38", "dend_39", "dend_40" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_39", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_33", "dend_33", "dend_33", "dend_33", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "5.67935E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "5.67935E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "3.6794998E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cSTUT_7_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cSTUT_7_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cSTUT189_L6_LBC_1f1d59d3f5_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_18, id: dend_18, parent: soma_0
create dend_18
public dend_18
// Section: dend_13, id: dend_13, parent: soma_0
create dend_13
public dend_13
// Section: dend_12, id: dend_12, parent: soma_0
create dend_12
public dend_12
// Section: dend_5, id: dend_5, parent: soma_0
create dend_5
public dend_5
// Section: dend_4, id: dend_4, parent: soma_0
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: soma_0
create dend_3
public dend_3
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_39, id: dend_39, parent: dend_18
create dend_39
public dend_39
// Section: dend_19, id: dend_19, parent: dend_18
create dend_19
public dend_19
// Section: dend_17, id: dend_17, parent: dend_13
create dend_17
public dend_17
// Section: dend_14, id: dend_14, parent: dend_13
create dend_14
public dend_14
// Section: dend_11, id: dend_11, parent: dend_5
create dend_11
public dend_11
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_40, id: dend_40, parent: dend_39
create dend_40
public dend_40
// Section: dend_28, id: dend_28, parent: dend_19
create dend_28
public dend_28
// Section: dend_23, id: dend_23, parent: dend_19
create dend_23
public dend_23
// Section: dend_20, id: dend_20, parent: dend_19
create dend_20
public dend_20
// Section: dend_16, id: dend_16, parent: dend_14
create dend_16
public dend_16
// Section: dend_15, id: dend_15, parent: dend_14
create dend_15
public dend_15
// Section: dend_8, id: dend_8, parent: dend_6
create dend_8
public dend_8
// Section: dend_7, id: dend_7, parent: dend_6
create dend_7
public dend_7
// Section: dend_38, id: dend_38, parent: dend_28
create dend_38
public dend_38
// Section: dend_29, id: dend_29, parent: dend_28
create dend_29
public dend_29
// Section: dend_27, id: dend_27, parent: dend_23
create dend_27
public dend_27
// Section: dend_24, id: dend_24, parent: dend_23
create dend_24
public dend_24
// Section: dend_22, id: dend_22, parent: dend_20
create dend_22
public dend_22
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9
// Section: dend_37, id: dend_37, parent: dend_29
create dend_37
public dend_37
// Section: dend_30, id: dend_30, parent: dend_29
create dend_30
public dend_30
// Section: dend_26, id: dend_26, parent: dend_24
create dend_26
public dend_26
// Section: dend_25, id: dend_25, parent: dend_24
create dend_25
public dend_25
// Section: dend_36, id: dend_36, parent: dend_30
create dend_36
public dend_36
// Section: dend_31, id: dend_31, parent: dend_30
create dend_31
public dend_31
// Section: dend_33, id: dend_33, parent: dend_31
create dend_33
public dend_33
// Section: dend_32, id: dend_32, parent: dend_31
create dend_32
public dend_32
// Section: dend_35, id: dend_35, parent: dend_33
create dend_35
public dend_35
// Section: dend_34, id: dend_34, parent: dend_33
create dend_34
public dend_34

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_18, dend_13, dend_12, dend_5, dend_4, dend_3, dend_0, dend_39, dend_19, dend_17, dend_14, dend_11, dend_6, dend_2, dend_1, dend_40, dend_28, dend_23, dend_20, dend_16, dend_15, dend_8, dend_7, dend_38, dend_29, dend_27, dend_24, dend_22, dend_21, dend_10, dend_9, dend_37, dend_30, dend_26, dend_25, dend_36, dend_31, dend_33, dend_32, dend_35, dend_34]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_18, dend_13, dend_12, dend_5, dend_4, dend_3, dend_0, dend_39, dend_19, dend_17, dend_14, dend_11, dend_6, dend_2, dend_1, dend_40, dend_28, dend_23, dend_20, dend_16, dend_15, dend_8, dend_7, dend_38, dend_29, dend_27, dend_24, dend_22, dend_21, dend_10, dend_9, dend_37, dend_30, dend_26, dend_25, dend_36, dend_31, dend_33, dend_32, dend_35, dend_34]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_40]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_37]}
objref OneSecGrp_SectionRef_35
// Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_36]}
objref OneSecGrp_SectionRef_39
// Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_31]}
objref OneSecGrp_SectionRef_40
// Group: {name=OneSecGrp_SectionRef_42, groups=[], sections=[dend_32]}
objref OneSecGrp_SectionRef_42
// Group: {name=OneSecGrp_SectionRef_43, groups=[], sections=[dend_35]}
objref OneSecGrp_SectionRef_43
// Group: {name=OneSecGrp_SectionRef_44, groups=[], sections=[dend_34]}
objref OneSecGrp_SectionRef_44
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_39]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_38]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_36
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_37
// Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_38
// Group: {name=OneSecGrp_SectionRef_41, groups=[], sections=[dend_33]}
objref OneSecGrp_SectionRef_41
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36, dend_37, dend_38, dend_39, dend_40], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_18, dend_18, dend_18, dend_18, dend_18, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_39, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_33, dend_33, dend_33, dend_33, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cSTUT_7_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cSTUT_7_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_18(0), soma_0(0.4500007958597263)
    connect dend_13(0), soma_0(0.4500007958597263)
    connect dend_12(0), soma_0(0.4500007958597263)
    connect dend_5(0), soma_0(0.4500007958597263)
    connect dend_4(0), soma_0(0.4500007958597263)
    connect dend_3(0), soma_0(0.4500007958597263)
    connect dend_0(0), soma_0(0.4500007958597263)
    connect axon_0(0), soma_0(1.0)
    connect dend_39(0), dend_18(1.0)
    connect dend_19(0), dend_18(1.0)
    connect dend_17(0), dend_13(1.0)
    connect dend_14(0), dend_13(1.0)
    connect dend_11(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_40(0), dend_39(1.0)
    connect dend_28(0), dend_19(1.0)
    connect dend_23(0), dend_19(1.0)
    connect dend_20(0), dend_19(1.0)
    connect dend_16(0), dend_14(1.0)
    connect dend_15(0), dend_14(1.0)
    connect dend_8(0), dend_6(1.0)
    connect dend_7(0), dend_6(1.0)
    connect dend_38(0), dend_28(1.0)
    connect dend_29(0), dend_28(1.0)
    connect dend_27(0), dend_23(1.0)
    connect dend_24(0), dend_23(1.0)
    connect dend_22(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)
    connect dend_37(0), dend_29(1.0)
    connect dend_30(0), dend_29(1.0)
    connect dend_26(0), dend_24(1.0)
    connect dend_25(0), dend_24(1.0)
    connect dend_36(0), dend_30(1.0)
    connect dend_31(0), dend_30(1.0)
    connect dend_33(0), dend_31(1.0)
    connect dend_32(0), dend_31(1.0)
    connect dend_35(0), dend_33(1.0)
    connect dend_34(0), dend_33(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -9.54279, 2.1457, 0.213728, 3.05026 ) }
    soma_0 { pt3dadd( -8.50245, 1.95075, 0.185339, 5.11751 ) }
    soma_0 { pt3dadd( -7.4621, 1.75581, 0.15695, 8.02784 ) }
    soma_0 { pt3dadd( -6.42175, 1.56087, 0.12856, 9.03175 ) }
    soma_0 { pt3dadd( -5.38141, 1.36592, 0.100171, 9.83239 ) }
    soma_0 { pt3dadd( -4.34106, 1.17098, 0.0717818, 10.6884 ) }
    soma_0 { pt3dadd( -3.30071, 0.976035, 0.0433924, 11.5727 ) }
    soma_0 { pt3dadd( -2.26037, 0.781092, 0.0150031, 12.0226 ) }
    soma_0 { pt3dadd( -1.22002, 0.586148, -0.0133862, 12.0435 ) }
    soma_0 { pt3dadd( -0.179673, 0.391205, -0.0417756, 12.0367 ) }
    soma_0 { pt3dadd( 0.860674, 0.196261, -0.0701649, 12.0298 ) }
    soma_0 { pt3dadd( 1.90102, 0.0013176, -0.0985543, 12.0232 ) }
    soma_0 { pt3dadd( 2.94137, -0.193626, -0.126944, 12.0171 ) }
    soma_0 { pt3dadd( 3.98171, -0.388569, -0.155333, 12.011 ) }
    soma_0 { pt3dadd( 5.02206, -0.583513, -0.183722, 12.0049 ) }
    soma_0 { pt3dadd( 6.06241, -0.778456, -0.212112, 11.8239 ) }
    soma_0 { pt3dadd( 7.10276, -0.9734, -0.240501, 11.3971 ) }
    soma_0 { pt3dadd( 8.1431, -1.16834, -0.26889, 10.4445 ) }
    soma_0 { pt3dadd( 9.18345, -1.36329, -0.29728, 7.79982 ) }
    soma_0 { pt3dadd( 10.2238, -1.55823, -0.325669, 5.2634 ) }
    soma_0 { pt3dadd( 11.2641, -1.75317, -0.354058, 3.00159 ) }
    // Section: dend_18, id: dend_18, parent: soma_0 (entry count 21/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 3.49319, 7.05962, -1.57561, 6.41 ) }
    dend_18 { pt3dadd( 3.48583, 7.33245, -1.66099, 6.41 ) }
    dend_18 { pt3dadd( 3.38277, 11.1529, -2.85655, 3.68 ) }
    dend_18 { pt3dadd( 3.31733, 13.5788, -3.61573, 3.61 ) }
    dend_18 { pt3dadd( 3.26301, 15.5922, -4.24579, 3.61 ) }
    dend_18 { pt3dadd( 3.22159, 17.1278, -4.72635, 3.39 ) }
    // Section: dend_13, id: dend_13, parent: soma_0 (entry count 27/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -9.51681, 3.41162, -6.38561, 2.06 ) }
    dend_13 { pt3dadd( -11.6512, 6.1893, -5.45799, 2.06 ) }
    dend_13 { pt3dadd( -13.1555, 8.06592, -4.98974, 1.18 ) }
    dend_13 { pt3dadd( -13.9525, 9.02481, -4.79588, 1.18 ) }
    dend_13 { pt3dadd( -14.7755, 10.0223, -4.63217, 1.18 ) }
    dend_13 { pt3dadd( -15.6387, 11.0853, -4.40226, 1.18 ) }
    dend_13 { pt3dadd( -16.5877, 12.2813, -4.1129, 1.18 ) }
    dend_13 { pt3dadd( -17.8656, 13.8069, -3.89124, 1.18 ) }
    dend_13 { pt3dadd( -18.5859, 14.6794, -3.73428, 1.18 ) }
    dend_13 { pt3dadd( -19.5856, 15.9155, -3.4711, 1.18 ) }
    dend_13 { pt3dadd( -20.977, 17.7056, -3.01047, 1.55 ) }
    dend_13 { pt3dadd( -21.4382, 18.3278, -2.80896, 1.99 ) }
    // Section: dend_12, id: dend_12, parent: soma_0 (entry count 39/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -9.51681, 3.41162, -6.38561, 0.81 ) }
    dend_12 { pt3dadd( -11.6977, 2.84811, -6.68782, 0.81 ) }
    dend_12 { pt3dadd( -13.3996, 2.24283, -6.8711, 0.81 ) }
    dend_12 { pt3dadd( -14.2052, 1.85163, -6.93067, 0.96 ) }
    dend_12 { pt3dadd( -15.5067, 0.963216, -6.9694, 0.96 ) }
    dend_12 { pt3dadd( -16.0371, 0.499407, -6.96298, 0.96 ) }
    dend_12 { pt3dadd( -17.0113, -0.529155, -7.00715, 0.96 ) }
    dend_12 { pt3dadd( -17.2467, -0.918193, -7.05046, 0.96 ) }
    dend_12 { pt3dadd( -17.7115, -1.82773, -7.18679, 0.66 ) }
    dend_12 { pt3dadd( -18.314, -3.03086, -7.4407, 1.18 ) }
    dend_12 { pt3dadd( -18.6383, -3.62177, -7.59893, 1.18 ) }
    dend_12 { pt3dadd( -19.6023, -5.08116, -8.05427, 1.18 ) }
    dend_12 { pt3dadd( -20.8685, -6.68859, -8.58688, 1.18 ) }
    dend_12 { pt3dadd( -21.8567, -7.83176, -8.92744, 1.11 ) }
    dend_12 { pt3dadd( -22.5355, -8.60147, -9.10526, 1.11 ) }
    dend_12 { pt3dadd( -23.4307, -9.67319, -9.3396, 0.88 ) }
    dend_12 { pt3dadd( -23.921, -10.3084, -9.53118, 0.88 ) }
    dend_12 { pt3dadd( -24.7258, -11.4544, -9.90023, 1.33 ) }
    dend_12 { pt3dadd( -25.5979, -12.7845, -10.3862, 1.33 ) }
    dend_12 { pt3dadd( -26.6073, -14.3742, -11.1387, 1.03 ) }
    dend_12 { pt3dadd( -27.6347, -16.1164, -12.0713, 0.74 ) }
    dend_12 { pt3dadd( -29.0242, -18.7284, -13.5808, 1.18 ) }
    dend_12 { pt3dadd( -29.366, -19.4291, -14.0077, 1.18 ) }
    dend_12 { pt3dadd( -29.6886, -20.2207, -14.496, 0.88 ) }
    dend_12 { pt3dadd( -30.1712, -21.6666, -15.3341, 0.59 ) }
    dend_12 { pt3dadd( -30.4935, -22.7975, -15.967, 1.4 ) }
    dend_12 { pt3dadd( -30.6962, -23.5119, -16.302, 1.4 ) }
    dend_12 { pt3dadd( -30.9492, -24.3409, -16.6631, 1.77 ) }
    dend_12 { pt3dadd( -31.7124, -26.3534, -17.6645, 0.88 ) }
    dend_12 { pt3dadd( -32.0576, -27.1095, -18.081, 0.88 ) }
    dend_12 { pt3dadd( -33.1547, -29.1989, -19.2349, 0.88 ) }
    dend_12 { pt3dadd( -33.859, -30.2712, -19.9922, 1.11 ) }
    dend_12 { pt3dadd( -34.6191, -31.305, -20.7829, 0.74 ) }
    dend_12 { pt3dadd( -35.1928, -32.0198, -21.3361, 0.74 ) }
    dend_12 { pt3dadd( -36.0747, -33.0261, -22.1127, 0.74 ) }
    dend_12 { pt3dadd( -36.8363, -33.9453, -22.7623, 1.47 ) }
    dend_12 { pt3dadd( -38.5317, -36.1241, -23.9945, 0.07 ) }
    dend_12 { pt3dadd( -39.0869, -36.8452, -24.4051, 1.11 ) }
    dend_12 { pt3dadd( -39.6644, -37.5424, -24.8096, 0.07 ) }
    dend_12 { pt3dadd( -40.103, -37.9836, -25.0913, 0.66 ) }
    dend_12 { pt3dadd( -40.8874, -38.6235, -25.5158, 1.33 ) }
    dend_12 { pt3dadd( -42.4598, -39.6773, -26.3155, 0.07 ) }
    dend_12 { pt3dadd( -43.7728, -40.4132, -26.8888, 1.18 ) }
    dend_12 { pt3dadd( -44.233, -40.6362, -27.1097, 1.18 ) }
    dend_12 { pt3dadd( -45.6031, -41.2259, -27.8106, 0.07 ) }
    dend_12 { pt3dadd( -45.9841, -41.3739, -28.0211, 0.07 ) }
    dend_12 { pt3dadd( -47.3916, -41.8607, -28.8274, 1.25 ) }
    dend_12 { pt3dadd( -48.1756, -42.1063, -29.3011, 0.81 ) }
    dend_12 { pt3dadd( -49.6401, -42.5314, -30.1184, 0.37 ) }
    dend_12 { pt3dadd( -50.5867, -42.8177, -30.6489, 1.18 ) }
    dend_12 { pt3dadd( -52.0369, -43.3035, -31.4636, 0.44 ) }
    dend_12 { pt3dadd( -52.5033, -43.4922, -31.715, 0.44 ) }
    dend_12 { pt3dadd( -52.8022, -43.6363, -31.8616, 0.44 ) }
    dend_12 { pt3dadd( -53.9283, -44.2906, -32.4496, 1.47 ) }
    dend_12 { pt3dadd( -54.9828, -44.9672, -32.9719, 0.07 ) }
    dend_12 { pt3dadd( -55.8302, -45.5456, -33.3633, 1.11 ) }
    dend_12 { pt3dadd( -56.6842, -46.1262, -33.6835, 0.15 ) }
    dend_12 { pt3dadd( -57.5527, -46.6983, -33.9751, 0.15 ) }
    dend_12 { pt3dadd( -58.7554, -47.4758, -34.3208, 1.4 ) }
    dend_12 { pt3dadd( -59.3478, -47.8573, -34.4943, 1.4 ) }
    dend_12 { pt3dadd( -59.8478, -48.1839, -34.6269, 1.4 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_12 { pt3dadd( -61.2627, -49.2175, -35.1115, 0.22 ) }
    dend_12 { pt3dadd( -61.9816, -49.8378, -35.4435, 0.22 ) }
    dend_12 { pt3dadd( -62.4783, -50.3419, -35.7358, 0.22 ) }
    dend_12 { pt3dadd( -63.4992, -51.4705, -36.5746, 1.99 ) }
    dend_12 { pt3dadd( -64.3184, -52.4522, -37.3787, 0.07 ) }
    dend_12 { pt3dadd( -65.4205, -53.894, -38.6153, 1.55 ) }
    dend_12 { pt3dadd( -66.3313, -55.1761, -39.7606, 0.07 ) }
    dend_12 { pt3dadd( -67.1103, -56.3099, -40.7681, 1.47 ) }
    dend_12 { pt3dadd( -68.5767, -58.4287, -42.6992, 0.07 ) }
    dend_12 { pt3dadd( -69.2424, -59.3778, -43.5196, 0.88 ) }
    dend_12 { pt3dadd( -69.8356, -60.2042, -44.1891, 0.29 ) }
    dend_12 { pt3dadd( -70.3552, -60.9486, -44.6762, 0.29 ) }
    dend_12 { pt3dadd( -70.7248, -61.5073, -44.9594, 1.25 ) }
    dend_12 { pt3dadd( -71.998, -63.5488, -45.6651, 0.29 ) }
    dend_12 { pt3dadd( -72.7677, -64.8505, -45.9208, 0.29 ) }
    dend_12 { pt3dadd( -73.3231, -65.8292, -46.0743, 1.4 ) }
    dend_12 { pt3dadd( -74.1291, -67.3369, -46.243, 0.07 ) }
    dend_12 { pt3dadd( -74.552, -68.2118, -46.3046, 1.18 ) }
    dend_12 { pt3dadd( -74.8574, -68.9626, -46.3196, 1.18 ) }
    dend_12 { pt3dadd( -75.0734, -69.6123, -46.3292, 1.18 ) }
    dend_12 { pt3dadd( -75.3549, -70.5232, -46.4293, 0.07 ) }
    dend_12 { pt3dadd( -75.5747, -71.2227, -46.5605, 0.07 ) }
    dend_12 { pt3dadd( -75.774, -71.7064, -46.698, 1.03 ) }
    dend_12 { pt3dadd( -76.6069, -73.2593, -47.2145, 0.07 ) }
    dend_12 { pt3dadd( -77.6207, -74.6399, -47.7504, 0.07 ) }
    dend_12 { pt3dadd( -78.2839, -75.343, -48.1001, 1.03 ) }
    dend_12 { pt3dadd( -78.5748, -75.6056, -48.2418, 1.03 ) }
    dend_12 { pt3dadd( -79.9338, -76.7105, -48.8404, 0.07 ) }
    dend_12 { pt3dadd( -80.7736, -77.332, -49.1879, 0.59 ) }
    dend_12 { pt3dadd( -82.3144, -78.3739, -49.8128, 0.07 ) }
    dend_12 { pt3dadd( -83.9437, -79.5133, -50.5265, 0.59 ) }
    dend_12 { pt3dadd( -84.7427, -80.086, -50.927, 0.07 ) }
    dend_12 { pt3dadd( -85.2645, -80.4511, -51.2285, 0.96 ) }
    dend_12 { pt3dadd( -86.2098, -81.0867, -51.8878, 0.07 ) }
    dend_12 { pt3dadd( -86.8444, -81.4453, -52.4264, 0.59 ) }
    dend_12 { pt3dadd( -88.1348, -81.9692, -53.679, 0.07 ) }
    dend_12 { pt3dadd( -88.8767, -82.1087, -54.4867, 1.47 ) }
    dend_12 { pt3dadd( -89.772, -82.1807, -55.7075, 0.07 ) }
    dend_12 { pt3dadd( -90.4182, -82.2232, -56.7173, 1.11 ) }
    dend_12 { pt3dadd( -91.3998, -82.2655, -58.3197, 0.07 ) }
    dend_12 { pt3dadd( -91.7592, -82.2841, -58.8947, 1.18 ) }
    dend_12 { pt3dadd( -92.905, -82.3653, -60.6506, 0.52 ) }
    dend_12 { pt3dadd( -94.7127, -82.6695, -63.6086, 0.52 ) }
    dend_12 { pt3dadd( -95.9763, -83.0288, -65.6701, 0.07 ) }
    dend_12 { pt3dadd( -96.2991, -83.1708, -66.2376, 1.18 ) }
    dend_12 { pt3dadd( -97.5939, -83.9964, -68.7077, 0.07 ) }
    dend_12 { pt3dadd( -98.3199, -84.6404, -70.25, 1.11 ) }
    dend_12 { pt3dadd( -99.414, -86.1754, -73.1287, 0.07 ) }
    dend_12 { pt3dadd( -99.6468, -86.7281, -73.9752, 1.11 ) }
    dend_12 { pt3dadd( -100.267, -89.5974, -77.7716, 0.44 ) }
    dend_12 { pt3dadd( -100.37, -90.5573, -78.9648, 1.03 ) }
    dend_12 { pt3dadd( -100.383, -91.8771, -80.4889, 1.03 ) }
    dend_12 { pt3dadd( -100.31, -93.6734, -82.469, 0.07 ) }
    dend_12 { pt3dadd( -100.228, -94.9735, -83.917, 1.25 ) }
    dend_12 { pt3dadd( -100.156, -96.1827, -85.3473, 0.59 ) }
    dend_12 { pt3dadd( -100.157, -97.4209, -87.041, 0.59 ) }
    dend_12 { pt3dadd( -100.288, -98.2212, -88.4237, 0.37 ) }
    dend_12 { pt3dadd( -100.393, -98.4806, -89.0317, 0.37 ) }
    dend_12 { pt3dadd( -100.943, -99.1236, -91.3502, 0.81 ) }
    dend_12 { pt3dadd( -101.052, -99.2008, -91.7517, 0.81 ) }
    dend_12 { pt3dadd( -102.065, -99.6709, -95.1881, 0.52 ) }
    dend_12 { pt3dadd( -102.335, -99.7439, -96.0408, 0.52 ) }
    dend_12 { pt3dadd( -102.917, -99.7631, -97.6525, 0.52 ) }
    dend_12 { pt3dadd( -104.048, -99.5916, -100.305, 0.52 ) }
    dend_12 { pt3dadd( -104.378, -99.5158, -100.951, 0.52 ) }
    dend_12 { pt3dadd( -104.552, -99.4658, -101.259, 0.52 ) }
    dend_12 { pt3dadd( -105.208, -99.2782, -102.165, 0.52 ) }
    dend_12 { pt3dadd( -105.731, -99.1519, -102.807, 0.52 ) }
    dend_12 { pt3dadd( -107.174, -98.841, -104.133, 0.52 ) }
    dend_12 { pt3dadd( -108.918, -98.5067, -105.438, 0.52 ) }
    dend_12 { pt3dadd( -109.76, -98.3887, -106.051, 0.15 ) }
    dend_12 { pt3dadd( -110.719, -98.2968, -106.739, 0.15 ) }
    dend_12 { pt3dadd( -111.173, -98.2869, -107.047, 0.15 ) }
    dend_12 { pt3dadd( -112.333, -98.3023, -107.767, 0.15 ) }
    dend_12 { pt3dadd( -113.36, -98.3356, -108.226, 0.15 ) }
    dend_12 { pt3dadd( -114.906, -98.3237, -108.708, 0.29 ) }
    // Section: dend_5, id: dend_5, parent: soma_0 (entry count 76/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 9.58319, -4.83438, 5.49439, 1.11 ) }
    dend_5 { pt3dadd( 9.63425, -4.9724, 5.49439, 1.11 ) }
    dend_5 { pt3dadd( 9.95569, -5.84134, 5.49439, 1.11 ) }
    dend_5 { pt3dadd( 10.3278, -6.84689, 5.49439, 1.11 ) }
    dend_5 { pt3dadd( 10.6911, -7.82903, 5.49439, 1.11 ) }
    dend_5 { pt3dadd( 11.0468, -8.79035, 5.49439, 1.11 ) }
    dend_5 { pt3dadd( 11.5964, -10.2759, 5.49439, 0.74 ) }
    // Section: dend_4, id: dend_4, parent: soma_0 (entry count 83/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 5.25319, -6.83888, -1.63561, 1.18 ) }
    dend_4 { pt3dadd( 5.36052, -7.22693, -1.63416, 1.18 ) }
    dend_4 { pt3dadd( 5.82208, -8.65832, -1.62944, 1.18 ) }
    dend_4 { pt3dadd( 6.25068, -9.92443, -1.39845, 0.96 ) }
    dend_4 { pt3dadd( 6.59575, -10.8981, -1.1628, 0.96 ) }
    dend_4 { pt3dadd( 6.9209, -11.8236, -0.920124, 0.96 ) }
    dend_4 { pt3dadd( 7.47256, -13.4524, -0.485295, 1.33 ) }
    dend_4 { pt3dadd( 8.01202, -15.1925, 0.0361644, 1.69 ) }
    dend_4 { pt3dadd( 8.87614, -18.4533, 1.19442, 0.88 ) }
    dend_4 { pt3dadd( 9.08002, -19.6054, 1.64453, 0.88 ) }
    dend_4 { pt3dadd( 9.1521, -20.4073, 1.9715, 0.88 ) }
    dend_4 { pt3dadd( 9.12979, -21.2294, 2.29427, 0.88 ) }
    dend_4 { pt3dadd( 8.88796, -22.7004, 2.82222, 0.52 ) }
    dend_4 { pt3dadd( 8.50458, -24.033, 3.19302, 0.52 ) }
    dend_4 { pt3dadd( 8.00015, -25.3069, 3.43241, 0.81 ) }
    dend_4 { pt3dadd( 7.54338, -26.3165, 3.61653, 0.81 ) }
    dend_4 { pt3dadd( 6.67445, -28.1581, 3.91879, 0.81 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_4 { pt3dadd( 6.23684, -29.1014, 4.04798, 0.81 ) }
    dend_4 { pt3dadd( 5.48416, -30.8444, 4.24863, 1.11 ) }
    dend_4 { pt3dadd( 4.77914, -32.5332, 4.4505, 0.81 ) }
    dend_4 { pt3dadd( 4.47657, -33.2664, 4.55549, 1.11 ) }
    dend_4 { pt3dadd( 3.92212, -34.6453, 4.77261, 0.88 ) }
    dend_4 { pt3dadd( 3.52786, -35.6784, 4.94373, 0.88 ) }
    dend_4 { pt3dadd( 2.79214, -37.8044, 5.29068, 0.88 ) }
    dend_4 { pt3dadd( 2.43351, -38.9886, 5.47074, 0.59 ) }
    dend_4 { pt3dadd( 2.20012, -39.8194, 5.57965, 0.59 ) }
    dend_4 { pt3dadd( 1.76154, -41.342, 5.7586, 0.59 ) }
    dend_4 { pt3dadd( 1.27191, -42.8137, 5.90374, 0.59 ) }
    dend_4 { pt3dadd( 0.901514, -43.7789, 5.9728, 0.59 ) }
    dend_4 { pt3dadd( 0.389081, -45.0239, 6.01584, 0.81 ) }
    dend_4 { pt3dadd( 0.00597862, -45.9946, 6.07504, 0.81 ) }
    dend_4 { pt3dadd( -0.625411, -47.6519, 6.22873, 0.96 ) }
    dend_4 { pt3dadd( -1.17784, -49.2355, 6.41678, 0.96 ) }
    dend_4 { pt3dadd( -1.52529, -50.415, 6.58123, 0.96 ) }
    dend_4 { pt3dadd( -1.81524, -51.7282, 6.80246, 0.96 ) }
    dend_4 { pt3dadd( -2.15601, -54.0145, 7.29147, 0.44 ) }
    dend_4 { pt3dadd( -2.23122, -55.0353, 7.54643, 0.44 ) }
    dend_4 { pt3dadd( -2.25539, -55.7445, 7.74626, 0.44 ) }
    dend_4 { pt3dadd( -2.26459, -56.2313, 7.89488, 0.44 ) }
    dend_4 { pt3dadd( -2.34201, -57.6283, 8.31728, 0.52 ) }
    dend_4 { pt3dadd( -2.47083, -58.7448, 8.62219, 0.52 ) }
    dend_4 { pt3dadd( -2.57358, -59.4588, 8.77195, 0.52 ) }
    dend_4 { pt3dadd( -2.76737, -60.8414, 9.02127, 0.52 ) }
    dend_4 { pt3dadd( -2.99893, -62.7343, 9.3041, 0.81 ) }
    dend_4 { pt3dadd( -3.09322, -63.9212, 9.44062, 0.81 ) }
    dend_4 { pt3dadd( -3.17194, -65.1061, 9.51744, 0.66 ) }
    dend_4 { pt3dadd( -3.29924, -66.9982, 9.57472, 0.66 ) }
    dend_4 { pt3dadd( -3.40222, -68.5781, 9.57538, 0.66 ) }
    dend_4 { pt3dadd( -3.45745, -69.7019, 9.54449, 0.66 ) }
    dend_4 { pt3dadd( -3.53505, -71.1767, 9.46392, 1.03 ) }
    dend_4 { pt3dadd( -3.71988, -73.2544, 9.34021, 0.81 ) }
    dend_4 { pt3dadd( -4.00326, -75.4297, 9.2046, 0.81 ) }
    dend_4 { pt3dadd( -4.24008, -76.761, 9.15321, 0.81 ) }
    dend_4 { pt3dadd( -4.59761, -78.5069, 9.13396, 0.81 ) }
    dend_4 { pt3dadd( -4.79145, -79.4269, 9.14912, 0.81 ) }
    dend_4 { pt3dadd( -5.22439, -81.7192, 9.25129, 0.81 ) }
    dend_4 { pt3dadd( -5.35617, -82.6163, 9.32018, 0.81 ) }
    dend_4 { pt3dadd( -5.57482, -84.3538, 9.54615, 0.66 ) }
    dend_4 { pt3dadd( -5.69295, -85.54, 9.75112, 1.03 ) }
    dend_4 { pt3dadd( -5.76737, -87.0139, 10.04, 0.44 ) }
    dend_4 { pt3dadd( -5.72724, -87.9142, 10.2308, 0.44 ) }
    dend_4 { pt3dadd( -5.5803, -88.8399, 10.4342, 0.52 ) }
    dend_4 { pt3dadd( -5.22861, -90.5555, 10.7848, 0.96 ) }
    dend_4 { pt3dadd( -4.84402, -92.4037, 11.1637, 0.37 ) }
    dend_4 { pt3dadd( -4.69619, -93.2467, 11.3538, 0.37 ) }
    dend_4 { pt3dadd( -4.66031, -93.782, 11.5042, 0.37 ) }
    dend_4 { pt3dadd( -4.70648, -94.8024, 11.8439, 0.37 ) }
    dend_4 { pt3dadd( -4.86399, -95.7308, 12.1831, 0.37 ) }
    dend_4 { pt3dadd( -5.25749, -97.3504, 12.871, 0.37 ) }
    dend_4 { pt3dadd( -5.57879, -98.465, 13.4037, 0.37 ) }
    dend_4 { pt3dadd( -6.14056, -100.335, 14.2995, 0.37 ) }
    dend_4 { pt3dadd( -6.45176, -101.392, 14.8055, 0.59 ) }
    dend_4 { pt3dadd( -6.84578, -102.877, 15.495, 0.59 ) }
    dend_4 { pt3dadd( -7.42848, -105.243, 16.5039, 0.29 ) }
    dend_4 { pt3dadd( -7.48359, -105.474, 16.5873, 0.29 ) }
    dend_4 { pt3dadd( -7.85288, -107.056, 17.0599, 0.59 ) }
    dend_4 { pt3dadd( -7.96494, -107.666, 17.1823, 0.59 ) }
    dend_4 { pt3dadd( -8.18849, -109.157, 17.3769, 0.59 ) }
    dend_4 { pt3dadd( -8.378, -110.489, 17.4761, 1.69 ) }
    dend_4 { pt3dadd( -8.5555, -111.606, 17.5015, 1.69 ) }
    dend_4 { pt3dadd( -8.78427, -113.243, 17.537, 1.25 ) }
    dend_4 { pt3dadd( -8.97863, -114.96, 17.5719, 0.66 ) }
    dend_4 { pt3dadd( -9.08599, -116.055, 17.5918, 0.66 ) }
    dend_4 { pt3dadd( -9.21119, -117.396, 17.6126, 0.37 ) }
    dend_4 { pt3dadd( -9.28451, -118.335, 17.5963, 0.37 ) }
    dend_4 { pt3dadd( -9.38906, -119.67, 17.536, 1.4 ) }
    dend_4 { pt3dadd( -9.56447, -121.026, 17.4384, 1.18 ) }
    dend_4 { pt3dadd( -9.74703, -122.035, 17.3466, 0.81 ) }
    dend_4 { pt3dadd( -10.0199, -123.452, 17.205, 0.37 ) }
    dend_4 { pt3dadd( -10.2734, -124.632, 17.0848, 0.37 ) }
    dend_4 { pt3dadd( -10.4799, -125.391, 17.01, 0.37 ) }
    dend_4 { pt3dadd( -10.9849, -126.886, 16.8743, 0.66 ) }
    dend_4 { pt3dadd( -11.3675, -127.87, 16.8007, 0.66 ) }
    dend_4 { pt3dadd( -11.9399, -129.347, 16.7265, 0.66 ) }
    dend_4 { pt3dadd( -12.3872, -130.731, 16.6982, 0.66 ) }
    dend_4 { pt3dadd( -12.6425, -131.716, 16.7069, 0.66 ) }
    dend_4 { pt3dadd( -12.8052, -132.766, 16.7459, 0.52 ) }
    dend_4 { pt3dadd( -12.8527, -134.031, 16.8243, 0.52 ) }
    dend_4 { pt3dadd( -12.795, -135.805, 16.977, 0.66 ) }
    dend_4 { pt3dadd( -12.5794, -138.034, 17.231, 0.66 ) }
    dend_4 { pt3dadd( -12.4435, -138.842, 17.3954, 0.66 ) }
    dend_4 { pt3dadd( -12.0834, -140.33, 17.797, 0.44 ) }
    dend_4 { pt3dadd( -11.9198, -140.853, 17.9831, 0.44 ) }
    dend_4 { pt3dadd( -11.5909, -141.694, 18.3662, 0.44 ) }
    dend_4 { pt3dadd( -11.2097, -142.661, 18.8837, 0.44 ) }
    dend_4 { pt3dadd( -10.3466, -144.928, 20.272, 0.44 ) }
    dend_4 { pt3dadd( -9.88659, -146.223, 21.0911, 0.44 ) }
    dend_4 { pt3dadd( -9.54638, -147.215, 21.7189, 0.44 ) }
    dend_4 { pt3dadd( -9.21153, -148.015, 22.2734, 0.44 ) }
    // Section: dend_3, id: dend_3, parent: soma_0 (entry count 92/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -7.91681, -3.47588, -8.44561, 1.03 ) }
    dend_3 { pt3dadd( -7.92293, -3.47789, -8.47671, 1.03 ) }
    dend_3 { pt3dadd( -7.99281, -3.52841, -8.87866, 1.03 ) }
    dend_3 { pt3dadd( -8.03575, -3.57345, -9.16986, 1.03 ) }
    dend_3 { pt3dadd( -8.13242, -3.65001, -9.70518, 1.03 ) }
    dend_3 { pt3dadd( -8.20524, -3.69222, -10.065, 1.03 ) }
    dend_3 { pt3dadd( -8.96111, -4.01877, -13.4546, 1.25 ) }
    dend_3 { pt3dadd( -9.0714, -4.04373, -13.9407, 1.25 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_3 { pt3dadd( -9.36456, -4.06368, -15.2853, 1.25 ) }
    dend_3 { pt3dadd( -9.53819, -4.05256, -16.0837, 0.59 ) }
    dend_3 { pt3dadd( -9.63023, -4.03749, -16.4848, 0.59 ) }
    dend_3 { pt3dadd( -9.70039, -4.02401, -16.708, 0.96 ) }
    dend_3 { pt3dadd( -10.2498, -3.89751, -17.0669, 0.07 ) }
    dend_3 { pt3dadd( -10.4472, -3.84053, -17.1842, 0.07 ) }
    dend_3 { pt3dadd( -10.6734, -3.80015, -17.3422, 0.37 ) }
    dend_3 { pt3dadd( -11.0131, -3.80669, -17.6827, 0.37 ) }
    dend_3 { pt3dadd( -11.1385, -3.8186, -17.919, 1.18 ) }
    dend_3 { pt3dadd( -11.3434, -3.8322, -18.3994, 1.18 ) }
    dend_3 { pt3dadd( -11.8449, -3.85378, -19.6929, 0.74 ) }
    dend_3 { pt3dadd( -12.2452, -3.82028, -20.8481, 1.4 ) }
    dend_3 { pt3dadd( -12.3482, -3.79222, -21.2, 1.4 ) }
    dend_3 { pt3dadd( -12.9838, -3.44016, -24.0286, 0.88 ) }
    dend_3 { pt3dadd( -13.1506, -3.31238, -24.8672, 1.33 ) }
    dend_3 { pt3dadd( -13.1986, -3.26662, -25.1253, 1.33 ) }
    dend_3 { pt3dadd( -13.417, -2.98473, -26.4094, 1.33 ) }
    dend_3 { pt3dadd( -13.6968, -2.53442, -28.1073, 1.33 ) }
    dend_3 { pt3dadd( -14.2501, -1.6264, -31.2104, 1.03 ) }
    dend_3 { pt3dadd( -14.3331, -1.49767, -31.6216, 0.59 ) }
    dend_3 { pt3dadd( -14.4472, -1.35068, -32.1018, 0.59 ) }
    dend_3 { pt3dadd( -14.801, -0.996172, -33.3064, 1.4 ) }
    dend_3 { pt3dadd( -14.939, -0.911201, -33.6518, 1.4 ) }
    dend_3 { pt3dadd( -16.1457, -0.497511, -35.9041, 0.59 ) }
    dend_3 { pt3dadd( -16.4595, -0.452909, -36.3454, 0.59 ) }
    dend_3 { pt3dadd( -16.8987, -0.431134, -36.9504, 0.22 ) }
    dend_3 { pt3dadd( -17.3447, -0.439336, -37.5399, 1.33 ) }
    dend_3 { pt3dadd( -18.694, -0.524655, -39.2464, 0.15 ) }
    dend_3 { pt3dadd( -18.9282, -0.542498, -39.5433, 0.15 ) }
    dend_3 { pt3dadd( -19.3476, -0.565355, -40.0925, 1.25 ) }
    dend_3 { pt3dadd( -20.5163, -0.565963, -41.7474, 0.37 ) }
    dend_3 { pt3dadd( -20.7592, -0.552601, -42.1058, 0.37 ) }
    dend_3 { pt3dadd( -21.3587, -0.494422, -42.9393, 1.55 ) }
    dend_3 { pt3dadd( -21.6119, -0.453279, -43.2863, 1.55 ) }
    dend_3 { pt3dadd( -22.6553, -0.244654, -44.6706, 0.52 ) }
    dend_3 { pt3dadd( -22.8512, -0.201529, -44.8957, 0.52 ) }
    dend_3 { pt3dadd( -23.0721, -0.148388, -45.0901, 0.52 ) }
    dend_3 { pt3dadd( -23.6459, 0.0127863, -45.5219, 1.55 ) }
    dend_3 { pt3dadd( -25.4129, 0.587941, -46.6682, 0.29 ) }
    dend_3 { pt3dadd( -26.0793, 0.851475, -47.0961, 0.29 ) }
    dend_3 { pt3dadd( -27.0274, 1.30405, -47.6575, 1.25 ) }
    dend_3 { pt3dadd( -27.9612, 1.85772, -48.3438, 0.22 ) }
    dend_3 { pt3dadd( -28.3807, 2.16396, -48.7428, 0.22 ) }
    dend_3 { pt3dadd( -28.5691, 2.35134, -49.0312, 0.22 ) }
    dend_3 { pt3dadd( -29.0423, 2.89278, -50.095, 1.25 ) }
    dend_3 { pt3dadd( -29.1484, 3.0116, -50.4611, 1.25 ) }
    dend_3 { pt3dadd( -29.5626, 3.41288, -52.2382, 1.25 ) }
    dend_3 { pt3dadd( -29.8312, 3.6105, -53.5079, 1.25 ) }
    dend_3 { pt3dadd( -30.3266, 3.84577, -55.694, 1.25 ) }
    dend_3 { pt3dadd( -30.6806, 3.92677, -57.0489, 1.25 ) }
    dend_3 { pt3dadd( -31.2943, 3.95548, -59.002, 0.37 ) }
    dend_3 { pt3dadd( -31.4724, 3.93984, -59.4787, 0.37 ) }
    dend_3 { pt3dadd( -31.5325, 3.92743, -59.6002, 0.37 ) }
    dend_3 { pt3dadd( -31.8883, 3.84815, -60.0964, 1.11 ) }
    dend_3 { pt3dadd( -32.692, 3.74428, -60.7627, 0.74 ) }
    dend_3 { pt3dadd( -33.1644, 3.75076, -61.045, 0.22 ) }
    dend_3 { pt3dadd( -33.6215, 3.8073, -61.2364, 0.22 ) }
    dend_3 { pt3dadd( -33.9257, 3.87196, -61.3646, 0.22 ) }
    dend_3 { pt3dadd( -34.572, 4.0534, -61.6267, 0.74 ) }
    dend_3 { pt3dadd( -35.5299, 4.42776, -62.056, 0.29 ) }
    dend_3 { pt3dadd( -35.8891, 4.59792, -62.213, 0.74 ) }
    dend_3 { pt3dadd( -36.3494, 4.84313, -62.4342, 0.07 ) }
    dend_3 { pt3dadd( -36.7633, 5.09168, -62.6377, 0.07 ) }
    dend_3 { pt3dadd( -36.9051, 5.18024, -62.7061, 0.37 ) }
    dend_3 { pt3dadd( -37.7362, 5.65303, -63.2125, 0.37 ) }
    dend_3 { pt3dadd( -38.1003, 5.82392, -63.4434, 0.37 ) }
    dend_3 { pt3dadd( -38.4247, 5.93424, -63.6804, 0.37 ) }
    dend_3 { pt3dadd( -38.6596, 5.98286, -63.9026, 0.37 ) }
    dend_3 { pt3dadd( -38.8478, 6.00567, -64.0951, 0.37 ) }
    dend_3 { pt3dadd( -39.9091, 6.07467, -65.1759, 0.37 ) }
    dend_3 { pt3dadd( -40.2605, 6.05345, -65.53, 0.37 ) }
    dend_3 { pt3dadd( -40.5158, 6.02779, -65.7886, 0.37 ) }
    dend_3 { pt3dadd( -41.4708, 5.91683, -66.701, 0.37 ) }
    dend_3 { pt3dadd( -41.759, 5.88684, -66.9538, 0.37 ) }
    dend_3 { pt3dadd( -42.2682, 5.84582, -67.3341, 0.37 ) }
    dend_3 { pt3dadd( -43.4308, 5.76934, -68.0122, 0.15 ) }
    dend_3 { pt3dadd( -43.7139, 5.77491, -68.1763, 0.15 ) }
    dend_3 { pt3dadd( -44.1743, 5.82167, -68.4222, 0.15 ) }
    dend_3 { pt3dadd( -44.612, 5.9022, -68.6251, 0.15 ) }
    dend_3 { pt3dadd( -45.1146, 6.0409, -68.8581, 0.15 ) }
    dend_3 { pt3dadd( -45.67, 6.25424, -69.0997, 1.4 ) }
    dend_3 { pt3dadd( -47.1073, 6.95278, -69.6542, 0.07 ) }
    dend_3 { pt3dadd( -47.4346, 7.13113, -69.7973, 0.52 ) }
    dend_3 { pt3dadd( -47.8559, 7.37794, -69.9944, 0.07 ) }
    dend_3 { pt3dadd( -48.264, 7.63739, -70.1855, 0.07 ) }
    dend_3 { pt3dadd( -48.6626, 7.92413, -70.3765, 0.07 ) }
    dend_3 { pt3dadd( -49.0516, 8.23187, -70.5472, 0.07 ) }
    dend_3 { pt3dadd( -49.6884, 8.67521, -70.7626, 0.07 ) }
    dend_3 { pt3dadd( -49.9273, 8.82773, -70.8658, 0.07 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 89/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 11.9332, -0.264889, -1.25561, 1.25 ) }
    dend_0 { pt3dadd( 12.009, -0.269329, -1.25561, 1.25 ) }
    dend_0 { pt3dadd( 12.9874, -0.326625, -1.25561, 1.25 ) }
    dend_0 { pt3dadd( 13.8973, -0.379904, -1.25561, 1.25 ) }
    dend_0 { pt3dadd( 14.9419, -0.441077, -1.25561, 1.25 ) }
    dend_0 { pt3dadd( 15.505, -0.474051, -1.25561, 1.25 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 95/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 11.2641, -1.75317, -0.354058, 1.17638 ) }
    axon_0 { pt3dadd( 26.0075, -4.51584, -0.354058, 1.17638 ) }
    axon_0 { pt3dadd( 40.7509, -7.27851, -0.354058, 1.17638 ) }
    // Section: dend_39, id: dend_39, parent: dend_18 (entry count 98/100)
    dend_39 { pt3dclear() }
    dend_39 { pt3dadd( 3.22159, 17.1278, -4.72635, 1.55 ) }
    dend_39 { pt3dadd( 2.72497, 17.7351, -2.99745, 1.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    // Section: dend_19, id: dend_19, parent: dend_18 (entry count 0/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 3.22159, 17.1278, -4.72635, 0.88 ) }
    dend_19 { pt3dadd( 4.49231, 22.5531, -4.25104, 0.88 ) }
    dend_19 { pt3dadd( 4.67887, 23.2964, -4.1651, 0.88 ) }
    dend_19 { pt3dadd( 5.46497, 26.0676, -3.85208, 0.66 ) }
    dend_19 { pt3dadd( 6.54008, 29.558, -3.50357, 1.18 ) }
    dend_19 { pt3dadd( 6.94517, 30.8079, -3.36457, 1.18 ) }
    dend_19 { pt3dadd( 7.42508, 32.2303, -3.19109, 1.47 ) }
    dend_19 { pt3dadd( 8.00951, 33.9127, -2.73962, 1.47 ) }
    dend_19 { pt3dadd( 8.32815, 34.758, -2.52746, 1.47 ) }
    dend_19 { pt3dadd( 9.13914, 36.574, -2.17411, 1.47 ) }
    dend_19 { pt3dadd( 10.0131, 38.731, -2.07729, 1.47 ) }
    dend_19 { pt3dadd( 10.1791, 39.1013, -2.05661, 1.84 ) }
    // Section: dend_17, id: dend_17, parent: dend_13 (entry count 12/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -21.4382, 18.3278, -2.80896, 0.52 ) }
    dend_17 { pt3dadd( -23.9546, 18.8288, -0.741331, 0.52 ) }
    dend_17 { pt3dadd( -25.1352, 19.2749, 0.352831, 0.37 ) }
    dend_17 { pt3dadd( -25.9034, 19.6877, 1.08579, 0.37 ) }
    dend_17 { pt3dadd( -26.7565, 20.2707, 1.90184, 0.81 ) }
    dend_17 { pt3dadd( -27.6948, 21.0089, 2.75791, 0.81 ) }
    dend_17 { pt3dadd( -30.4225, 23.2192, 4.88394, 0.81 ) }
    dend_17 { pt3dadd( -31.1394, 23.8595, 5.32257, 0.81 ) }
    dend_17 { pt3dadd( -31.8514, 24.5535, 5.70302, 0.81 ) }
    dend_17 { pt3dadd( -32.417, 25.1148, 6.02883, 0.81 ) }
    dend_17 { pt3dadd( -33.1913, 25.8084, 6.4696, 0.81 ) }
    dend_17 { pt3dadd( -35.0628, 27.0409, 7.40651, 1.25 ) }
    dend_17 { pt3dadd( -36.2757, 27.5668, 7.87914, 1.25 ) }
    dend_17 { pt3dadd( -37.5554, 27.9832, 8.41019, 0.66 ) }
    dend_17 { pt3dadd( -39.6813, 28.6422, 9.46321, 1.03 ) }
    dend_17 { pt3dadd( -40.7388, 28.9819, 10.0415, 1.03 ) }
    dend_17 { pt3dadd( -42.5729, 29.6722, 11.115, 1.03 ) }
    dend_17 { pt3dadd( -43.6994, 30.2108, 11.8105, 1.03 ) }
    dend_17 { pt3dadd( -44.9158, 30.9422, 12.5461, 0.74 ) }
    dend_17 { pt3dadd( -46.8289, 32.4545, 13.829, 0.96 ) }
    dend_17 { pt3dadd( -47.4523, 33.1114, 14.344, 0.96 ) }
    dend_17 { pt3dadd( -48.1695, 34.1047, 15.1296, 0.96 ) }
    dend_17 { pt3dadd( -48.6676, 34.978, 15.8041, 0.96 ) }
    dend_17 { pt3dadd( -48.9097, 35.4801, 16.1822, 0.96 ) }
    dend_17 { pt3dadd( -49.9076, 37.7556, 17.8795, 0.74 ) }
    dend_17 { pt3dadd( -50.8018, 39.5515, 19.2129, 0.44 ) }
    dend_17 { pt3dadd( -51.0407, 39.9956, 19.5617, 0.44 ) }
    dend_17 { pt3dadd( -51.4816, 40.793, 20.1773, 0.44 ) }
    dend_17 { pt3dadd( -51.8409, 41.4017, 20.5794, 0.44 ) }
    dend_17 { pt3dadd( -52.1356, 41.8931, 20.8027, 0.44 ) }
    dend_17 { pt3dadd( -52.8648, 43.0639, 21.0725, 0.81 ) }
    dend_17 { pt3dadd( -53.1348, 43.477, 21.1352, 0.81 ) }
    dend_17 { pt3dadd( -54.6293, 45.5299, 21.6283, 0.44 ) }
    dend_17 { pt3dadd( -55.4632, 46.5131, 21.9984, 0.44 ) }
    dend_17 { pt3dadd( -56.2903, 47.4046, 22.4869, 0.44 ) }
    dend_17 { pt3dadd( -56.7883, 47.9311, 22.8021, 0.44 ) }
    dend_17 { pt3dadd( -57.491, 48.672, 23.2892, 0.44 ) }
    dend_17 { pt3dadd( -58.8508, 49.9547, 24.268, 0.59 ) }
    dend_17 { pt3dadd( -60.0672, 50.8146, 25.164, 0.59 ) }
    dend_17 { pt3dadd( -61.3189, 51.6043, 26.2872, 0.22 ) }
    // Section: dend_14, id: dend_14, parent: dend_13 (entry count 52/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( -21.4382, 18.3278, -2.80896, 1.33 ) }
    dend_14 { pt3dadd( -21.9295, 20.7794, -3.36919, 1.33 ) }
    dend_14 { pt3dadd( -22.3307, 22.2634, -3.7018, 0.96 ) }
    dend_14 { pt3dadd( -22.9053, 23.9913, -4.07403, 1.33 ) }
    dend_14 { pt3dadd( -23.6211, 25.7759, -4.43521, 1.03 ) }
    dend_14 { pt3dadd( -24.3665, 27.3213, -4.71936, 1.03 ) }
    dend_14 { pt3dadd( -24.8007, 28.2216, -4.8849, 1.03 ) }
    dend_14 { pt3dadd( -25.455, 29.2718, -5.12872, 1.03 ) }
    dend_14 { pt3dadd( -26.0239, 30.0421, -5.26747, 1.03 ) }
    dend_14 { pt3dadd( -26.9133, 31.0752, -5.36193, 1.03 ) }
    dend_14 { pt3dadd( -27.9001, 32.0634, -5.41357, 1.92 ) }
    // Section: dend_11, id: dend_11, parent: dend_5 (entry count 63/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 11.5964, -10.2759, 5.49439, 0.74 ) }
    dend_11 { pt3dadd( 12.0594, -12.5125, 5.53016, 0.74 ) }
    dend_11 { pt3dadd( 12.3638, -14.0567, 5.57194, 0.44 ) }
    dend_11 { pt3dadd( 12.6006, -15.3307, 5.6045, 0.44 ) }
    dend_11 { pt3dadd( 12.9047, -17.6522, 5.63813, 0.52 ) }
    dend_11 { pt3dadd( 13.0893, -20.4499, 5.64222, 0.52 ) }
    dend_11 { pt3dadd( 13.1107, -21.2699, 5.63313, 0.52 ) }
    dend_11 { pt3dadd( 13.0739, -22.5249, 5.64933, 0.52 ) }
    dend_11 { pt3dadd( 12.9479, -23.739, 5.63215, 0.52 ) }
    dend_11 { pt3dadd( 12.6904, -25.5925, 5.55439, 0.52 ) }
    dend_11 { pt3dadd( 12.4723, -27.0772, 5.438, 0.37 ) }
    dend_11 { pt3dadd( 12.3028, -28.5305, 5.30843, 0.37 ) }
    dend_11 { pt3dadd( 12.2074, -29.8585, 5.25738, 0.37 ) }
    dend_11 { pt3dadd( 12.198, -31.5816, 5.2606, 0.88 ) }
    dend_11 { pt3dadd( 12.3407, -33.7601, 5.33304, 0.52 ) }
    dend_11 { pt3dadd( 12.4658, -34.8272, 5.41191, 0.52 ) }
    dend_11 { pt3dadd( 12.6894, -36.4147, 5.56434, 0.44 ) }
    dend_11 { pt3dadd( 12.9937, -38.6194, 5.80305, 0.74 ) }
    dend_11 { pt3dadd( 13.2452, -40.2005, 5.9823, 0.29 ) }
    dend_11 { pt3dadd( 13.4203, -41.0866, 6.07981, 0.29 ) }
    dend_11 { pt3dadd( 13.8359, -42.9284, 6.25278, 0.96 ) }
    dend_11 { pt3dadd( 14.2841, -44.6797, 6.40652, 0.44 ) }
    dend_11 { pt3dadd( 14.5286, -45.6259, 6.46431, 0.44 ) }
    dend_11 { pt3dadd( 14.8655, -46.8728, 6.51478, 0.52 ) }
    dend_11 { pt3dadd( 15.1339, -47.9314, 6.56115, 0.52 ) }
    dend_11 { pt3dadd( 15.4289, -49.05, 6.60148, 0.52 ) }
    dend_11 { pt3dadd( 15.9555, -50.9264, 6.68469, 0.52 ) }
    dend_11 { pt3dadd( 16.1806, -51.8996, 6.74709, 0.52 ) }
    dend_11 { pt3dadd( 16.3934, -53.2752, 6.83776, 0.44 ) }
    dend_11 { pt3dadd( 16.4401, -53.9766, 6.90122, 0.44 ) }
    dend_11 { pt3dadd( 16.511, -55.3426, 7.04225, 0.44 ) }
    dend_11 { pt3dadd( 16.5297, -56.2855, 7.13892, 0.44 ) }
    dend_11 { pt3dadd( 16.5584, -57.7549, 7.27745, 0.88 ) }
    dend_11 { pt3dadd( 16.6021, -58.7082, 7.39273, 0.88 ) }
    dend_11 { pt3dadd( 16.7278, -60.2594, 7.62262, 0.37 ) }
    dend_11 { pt3dadd( 16.8938, -61.9262, 7.9048, 0.22 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 99/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 11.5964, -10.2759, 5.49439, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_6 { pt3dadd( 12.8717, -9.1422, 6.79577, 0.66 ) }
    dend_6 { pt3dadd( 13.1396, -8.90869, 7.05358, 0.66 ) }
    dend_6 { pt3dadd( 14.1069, -8.21568, 7.94253, 0.66 ) }
    dend_6 { pt3dadd( 14.4755, -7.98327, 8.24701, 0.66 ) }
    dend_6 { pt3dadd( 15.0246, -7.63713, 8.70048, 0.66 ) }
    dend_6 { pt3dadd( 16.3842, -6.77995, 9.82343, 0.96 ) }
    dend_6 { pt3dadd( 17.0535, -6.3999, 10.3394, 0.96 ) }
    dend_6 { pt3dadd( 18.5553, -5.5928, 11.51, 0.96 ) }
    dend_6 { pt3dadd( 19.3449, -5.18285, 12.1183, 0.44 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 9/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 15.505, -0.474051, -1.25561, 0.74 ) }
    dend_2 { pt3dadd( 16.0732, 0.337204, -1.45763, 0.74 ) }
    dend_2 { pt3dadd( 16.6729, 0.999739, -1.67067, 0.74 ) }
    dend_2 { pt3dadd( 17.3944, 1.70879, -1.90009, 0.74 ) }
    dend_2 { pt3dadd( 18.5893, 2.76921, -2.25817, 0.74 ) }
    dend_2 { pt3dadd( 19.4365, 3.45174, -2.49385, 0.74 ) }
    dend_2 { pt3dadd( 20.3222, 4.08512, -2.7617, 0.74 ) }
    dend_2 { pt3dadd( 21.5091, 4.77492, -3.13138, 0.74 ) }
    dend_2 { pt3dadd( 22.4247, 5.24503, -3.40132, 0.74 ) }
    dend_2 { pt3dadd( 23.2793, 5.64535, -3.62479, 0.96 ) }
    dend_2 { pt3dadd( 24.6088, 6.26144, -3.90238, 0.96 ) }
    dend_2 { pt3dadd( 26.2787, 7.11513, -4.29863, 0.59 ) }
    dend_2 { pt3dadd( 27.157, 7.61542, -4.50888, 0.59 ) }
    dend_2 { pt3dadd( 28.2468, 8.25155, -4.78161, 0.74 ) }
    dend_2 { pt3dadd( 29.315, 8.86451, -5.04843, 0.74 ) }
    dend_2 { pt3dadd( 30.3392, 9.48075, -5.28535, 0.74 ) }
    dend_2 { pt3dadd( 32.5306, 10.866, -5.73293, 0.74 ) }
    dend_2 { pt3dadd( 33.1183, 11.2539, -5.83194, 1.4 ) }
    dend_2 { pt3dadd( 34.1632, 11.993, -6.04556, 1.18 ) }
    dend_2 { pt3dadd( 34.7887, 12.4538, -6.18767, 1.18 ) }
    dend_2 { pt3dadd( 35.5307, 13.042, -6.35808, 1.03 ) }
    dend_2 { pt3dadd( 36.2397, 13.5913, -6.4979, 1.03 ) }
    dend_2 { pt3dadd( 37.2836, 14.3341, -6.68798, 0.66 ) }
    dend_2 { pt3dadd( 38.7101, 15.2503, -7.02737, 0.66 ) }
    dend_2 { pt3dadd( 39.1616, 15.5252, -7.15627, 0.66 ) }
    dend_2 { pt3dadd( 39.6493, 15.7562, -7.32613, 0.66 ) }
    dend_2 { pt3dadd( 40.6664, 16.0318, -7.70323, 0.66 ) }
    dend_2 { pt3dadd( 42.2862, 16.206, -8.26829, 0.66 ) }
    dend_2 { pt3dadd( 43.2535, 16.2545, -8.59896, 0.66 ) }
    dend_2 { pt3dadd( 43.3953, 16.2611, -8.64327, 0.96 ) }
    dend_2 { pt3dadd( 44.7839, 16.3965, -9.06866, 0.88 ) }
    dend_2 { pt3dadd( 46.1147, 16.6184, -9.45585, 0.88 ) }
    dend_2 { pt3dadd( 47.4629, 16.9725, -9.86888, 0.59 ) }
    dend_2 { pt3dadd( 49.2394, 17.575, -10.3859, 0.59 ) }
    dend_2 { pt3dadd( 50.252, 17.971, -10.6916, 0.59 ) }
    dend_2 { pt3dadd( 50.8906, 18.255, -10.8725, 0.59 ) }
    dend_2 { pt3dadd( 51.9512, 18.7884, -11.1485, 0.59 ) }
    dend_2 { pt3dadd( 53.4082, 19.5057, -11.5384, 1.03 ) }
    dend_2 { pt3dadd( 54.1573, 19.8056, -11.7199, 1.03 ) }
    dend_2 { pt3dadd( 54.5756, 19.9295, -11.8049, 1.03 ) }
    dend_2 { pt3dadd( 56.1491, 20.3648, -12.1858, 0.44 ) }
    dend_2 { pt3dadd( 56.5624, 20.4915, -12.2873, 0.44 ) }
    dend_2 { pt3dadd( 57.5785, 20.8802, -12.5219, 0.59 ) }
    dend_2 { pt3dadd( 58.7838, 21.5031, -12.7497, 0.59 ) }
    dend_2 { pt3dadd( 59.5857, 21.9796, -12.895, 0.59 ) }
    dend_2 { pt3dadd( 61.1589, 22.9643, -13.1666, 0.88 ) }
    dend_2 { pt3dadd( 62.1311, 23.6271, -13.3536, 0.88 ) }
    dend_2 { pt3dadd( 62.7386, 24.0815, -13.5119, 0.88 ) }
    dend_2 { pt3dadd( 64.0447, 25.1234, -13.9087, 0.59 ) }
    dend_2 { pt3dadd( 65.2688, 26.0427, -14.3019, 0.59 ) }
    dend_2 { pt3dadd( 66.2114, 26.6737, -14.6372, 0.59 ) }
    dend_2 { pt3dadd( 67.2922, 27.3532, -15.0382, 0.59 ) }
    dend_2 { pt3dadd( 69.0067, 28.4152, -15.6761, 0.59 ) }
    dend_2 { pt3dadd( 69.4304, 28.6838, -15.8485, 0.59 ) }
    dend_2 { pt3dadd( 70.62, 29.4715, -16.3423, 0.37 ) }
    dend_2 { pt3dadd( 71.8215, 30.3334, -16.8262, 1.47 ) }
    dend_2 { pt3dadd( 72.771, 31.0221, -17.1591, 1.47 ) }
    dend_2 { pt3dadd( 74.8584, 32.5243, -17.7783, 0.52 ) }
    dend_2 { pt3dadd( 76.3069, 33.5694, -18.1552, 0.96 ) }
    dend_2 { pt3dadd( 77.3106, 34.3052, -18.4193, 0.22 ) }
    dend_2 { pt3dadd( 77.6481, 34.5562, -18.5039, 0.22 ) }
    dend_2 { pt3dadd( 78.4812, 35.1373, -18.6788, 0.22 ) }
    dend_2 { pt3dadd( 79.1475, 35.5658, -18.8163, 1.03 ) }
    dend_2 { pt3dadd( 80.2465, 36.2417, -19.061, 0.07 ) }
    dend_2 { pt3dadd( 80.9318, 36.6533, -19.1903, 0.88 ) }
    dend_2 { pt3dadd( 81.5438, 37.0232, -19.2742, 0.88 ) }
    dend_2 { pt3dadd( 81.9733, 37.2844, -19.3198, 0.88 ) }
    dend_2 { pt3dadd( 85.4256, 39.3704, -19.5763, 0.07 ) }
    dend_2 { pt3dadd( 86.4486, 39.9673, -19.6165, 1.4 ) }
    dend_2 { pt3dadd( 87.5938, 40.6196, -19.6298, 0.37 ) }
    dend_2 { pt3dadd( 89.4742, 41.6799, -19.6754, 0.07 ) }
    dend_2 { pt3dadd( 90.1724, 42.0655, -19.6952, 0.74 ) }
    dend_2 { pt3dadd( 90.9992, 42.5074, -19.7127, 0.74 ) }
    dend_2 { pt3dadd( 91.583, 42.8081, -19.7134, 0.74 ) }
    dend_2 { pt3dadd( 93.6767, 43.8901, -19.7128, 0.22 ) }
    dend_2 { pt3dadd( 94.8315, 44.4721, -19.7495, 1.03 ) }
    dend_2 { pt3dadd( 95.6453, 44.8542, -19.8016, 1.03 ) }
    dend_2 { pt3dadd( 97.343, 45.5673, -19.8779, 0.15 ) }
    dend_2 { pt3dadd( 98.0498, 45.8163, -19.8719, 0.59 ) }
    dend_2 { pt3dadd( 98.8465, 46.041, -19.823, 0.59 ) }
    dend_2 { pt3dadd( 99.4842, 46.1589, -19.7485, 0.59 ) }
    dend_2 { pt3dadd( 100.853, 46.3164, -19.5379, 0.07 ) }
    dend_2 { pt3dadd( 102.306, 46.4087, -19.3114, 0.22 ) }
    dend_2 { pt3dadd( 104.038, 46.4358, -19.0464, 0.22 ) }
    dend_2 { pt3dadd( 105.049, 46.4348, -18.8991, 1.62 ) }
    dend_2 { pt3dadd( 106.06, 46.4275, -18.7595, 1.62 ) }
    dend_2 { pt3dadd( 107.306, 46.438, -18.5999, 0.07 ) }
    dend_2 { pt3dadd( 108.389, 46.4759, -18.4803, 0.07 ) }
    dend_2 { pt3dadd( 109.334, 46.5904, -18.4322, 0.07 ) }
    dend_2 { pt3dadd( 110.006, 46.7403, -18.4474, 0.07 ) }
    dend_2 { pt3dadd( 110.513, 46.8961, -18.4669, 0.07 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_2 { pt3dadd( 111.28, 47.1899, -18.5638, 1.11 ) }
    dend_2 { pt3dadd( 112.1, 47.5612, -18.7254, 1.11 ) }
    dend_2 { pt3dadd( 113.656, 48.3299, -19.1064, 0.07 ) }
    dend_2 { pt3dadd( 114.336, 48.6668, -19.2864, 0.07 ) }
    dend_2 { pt3dadd( 115.24, 49.0976, -19.5348, 0.07 ) }
    dend_2 { pt3dadd( 116.889, 49.8727, -20.0121, 0.29 ) }
    dend_2 { pt3dadd( 117.386, 50.0889, -20.1525, 0.29 ) }
    dend_2 { pt3dadd( 118.121, 50.3802, -20.3356, 0.29 ) }
    dend_2 { pt3dadd( 119.21, 50.7753, -20.5806, 0.29 ) }
    dend_2 { pt3dadd( 119.551, 50.9014, -20.6522, 0.96 ) }
    dend_2 { pt3dadd( 121.167, 51.5476, -20.9855, 0.07 ) }
    dend_2 { pt3dadd( 122.231, 51.981, -21.1725, 0.07 ) }
    dend_2 { pt3dadd( 123.35, 52.4318, -21.3865, 0.07 ) }
    dend_2 { pt3dadd( 124.571, 52.9108, -21.625, 0.74 ) }
    dend_2 { pt3dadd( 125.317, 53.1878, -21.7875, 0.74 ) }
    dend_2 { pt3dadd( 126.655, 53.6346, -22.0688, 0.07 ) }
    dend_2 { pt3dadd( 127.712, 53.9346, -22.2748, 0.07 ) }
    dend_2 { pt3dadd( 128.195, 54.055, -22.3594, 0.52 ) }
    dend_2 { pt3dadd( 129.395, 54.306, -22.5386, 0.07 ) }
    dend_2 { pt3dadd( 130.84, 54.5469, -22.687, 1.47 ) }
    dend_2 { pt3dadd( 132.613, 54.8597, -22.8139, 0.07 ) }
    dend_2 { pt3dadd( 133.256, 54.9894, -22.8347, 0.96 ) }
    dend_2 { pt3dadd( 134.497, 55.2962, -22.829, 0.07 ) }
    dend_2 { pt3dadd( 134.862, 55.4042, -22.8136, 0.07 ) }
    dend_2 { pt3dadd( 136.375, 55.9312, -22.6857, 0.07 ) }
    dend_2 { pt3dadd( 138.284, 56.6883, -22.4381, 0.07 ) }
    dend_2 { pt3dadd( 139.358, 57.1895, -22.2517, 1.18 ) }
    dend_2 { pt3dadd( 140.396, 57.718, -22.0448, 0.07 ) }
    dend_2 { pt3dadd( 141.386, 58.2727, -21.8254, 0.07 ) }
    dend_2 { pt3dadd( 142.179, 58.7427, -21.636, 0.37 ) }
    dend_2 { pt3dadd( 142.95, 59.2367, -21.454, 0.37 ) }
    dend_2 { pt3dadd( 144.874, 60.4578, -21.0359, 0.29 ) }
    dend_2 { pt3dadd( 145.563, 60.8975, -20.9072, 0.29 ) }
    dend_2 { pt3dadd( 146.15, 61.2752, -20.8206, 0.66 ) }
    dend_2 { pt3dadd( 147.667, 62.28, -20.6268, 0.96 ) }
    dend_2 { pt3dadd( 148.707, 62.9471, -20.5574, 0.07 ) }
    dend_2 { pt3dadd( 149.533, 63.4423, -20.5548, 0.52 ) }
    dend_2 { pt3dadd( 149.761, 63.5682, -20.571, 0.52 ) }
    dend_2 { pt3dadd( 150.385, 63.8954, -20.6203, 0.52 ) }
    dend_2 { pt3dadd( 151.454, 64.394, -20.7062, 0.52 ) }
    dend_2 { pt3dadd( 152.785, 64.9921, -20.8146, 0.22 ) }
    dend_2 { pt3dadd( 153.591, 65.3553, -20.866, 1.18 ) }
    dend_2 { pt3dadd( 153.935, 65.521, -20.8865, 0.07 ) }
    dend_2 { pt3dadd( 154.95, 66.0433, -20.9328, 0.07 ) }
    dend_2 { pt3dadd( 155.573, 66.4342, -20.943, 0.07 ) }
    dend_2 { pt3dadd( 157.015, 67.5436, -20.9048, 0.07 ) }
    dend_2 { pt3dadd( 157.388, 67.8974, -20.8738, 0.07 ) }
    dend_2 { pt3dadd( 157.952, 68.5239, -20.813, 0.88 ) }
    dend_2 { pt3dadd( 158.57, 69.309, -20.7297, 0.88 ) }
    dend_2 { pt3dadd( 159.553, 70.7789, -20.5774, 0.07 ) }
    dend_2 { pt3dadd( 160.09, 71.6719, -20.4822, 0.07 ) }
    dend_2 { pt3dadd( 160.361, 72.155, -20.4266, 0.07 ) }
    dend_2 { pt3dadd( 160.694, 72.7249, -20.3656, 1.03 ) }
    dend_2 { pt3dadd( 160.947, 73.1386, -20.3242, 1.03 ) }
    dend_2 { pt3dadd( 161.595, 74.111, -20.2296, 0.07 ) }
    dend_2 { pt3dadd( 162.175, 74.8669, -20.1567, 0.07 ) }
    dend_2 { pt3dadd( 162.5, 75.2486, -20.1176, 0.07 ) }
    dend_2 { pt3dadd( 163.095, 75.8754, -20.0649, 0.07 ) }
    dend_2 { pt3dadd( 163.847, 76.5947, -20.0127, 1.03 ) }
    dend_2 { pt3dadd( 164.993, 77.5503, -19.9493, 0.07 ) }
    dend_2 { pt3dadd( 165.542, 77.9469, -19.9239, 0.74 ) }
    dend_2 { pt3dadd( 166.403, 78.4585, -19.9024, 0.74 ) }
    dend_2 { pt3dadd( 167.244, 78.8587, -19.8948, 0.07 ) }
    dend_2 { pt3dadd( 167.769, 79.0425, -19.8977, 0.07 ) }
    dend_2 { pt3dadd( 168.902, 79.3239, -19.9087, 0.07 ) }
    dend_2 { pt3dadd( 169.414, 79.4233, -19.9127, 0.81 ) }
    dend_2 { pt3dadd( 171.184, 79.7722, -19.9051, 0.07 ) }
    dend_2 { pt3dadd( 171.685, 79.8828, -19.8699, 1.03 ) }
    dend_2 { pt3dadd( 172.517, 80.1045, -19.7563, 1.03 ) }
    dend_2 { pt3dadd( 174.017, 80.6359, -19.4748, 0.07 ) }
    dend_2 { pt3dadd( 174.339, 80.7848, -19.3991, 0.07 ) }
    dend_2 { pt3dadd( 174.905, 81.0868, -19.2485, 0.96 ) }
    dend_2 { pt3dadd( 176.133, 81.8368, -18.8847, 0.22 ) }
    dend_2 { pt3dadd( 176.909, 82.3472, -18.6191, 0.22 ) }
    dend_2 { pt3dadd( 177.489, 82.7571, -18.3964, 0.22 ) }
    dend_2 { pt3dadd( 178.365, 83.3654, -18.054, 0.22 ) }
    dend_2 { pt3dadd( 179.008, 83.7744, -17.8255, 0.22 ) }
    dend_2 { pt3dadd( 179.777, 84.1984, -17.5974, 0.22 ) }
    dend_2 { pt3dadd( 180.591, 84.6009, -17.416, 0.88 ) }
    dend_2 { pt3dadd( 180.878, 84.73, -17.3549, 0.88 ) }
    dend_2 { pt3dadd( 181.92, 85.1251, -17.1629, 0.22 ) }
    dend_2 { pt3dadd( 182.534, 85.3202, -17.0682, 0.22 ) }
    dend_2 { pt3dadd( 183.448, 85.5489, -16.9628, 0.22 ) }
    dend_2 { pt3dadd( 184.209, 85.6878, -16.905, 0.22 ) }
    dend_2 { pt3dadd( 184.768, 85.7876, -16.8621, 1.11 ) }
    dend_2 { pt3dadd( 185.92, 85.9896, -16.736, 0.07 ) }
    dend_2 { pt3dadd( 186.914, 86.1809, -16.606, 0.07 ) }
    dend_2 { pt3dadd( 187.411, 86.2777, -16.5383, 0.07 ) }
    dend_2 { pt3dadd( 187.506, 86.2985, -16.5245, 1.03 ) }
    dend_2 { pt3dadd( 189.077, 86.6393, -16.3083, 0.07 ) }
    dend_2 { pt3dadd( 189.641, 86.7672, -16.2355, 0.07 ) }
    dend_2 { pt3dadd( 190.843, 87.0184, -16.1148, 0.07 ) }
    dend_2 { pt3dadd( 192.056, 87.2148, -15.9698, 0.07 ) }
    dend_2 { pt3dadd( 192.633, 87.2998, -15.8964, 1.18 ) }
    dend_2 { pt3dadd( 193.497, 87.4432, -15.7859, 0.15 ) }
    dend_2 { pt3dadd( 194.282, 87.5894, -15.691, 0.15 ) }
    dend_2 { pt3dadd( 195.988, 88.0566, -15.4304, 0.15 ) }
    dend_2 { pt3dadd( 197.261, 88.4832, -15.1734, 0.44 ) }
    dend_2 { pt3dadd( 198.431, 88.9522, -14.9376, 0.44 ) }
    dend_2 { pt3dadd( 199.99, 89.6575, -14.637, 0.15 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_2 { pt3dadd( 201.001, 90.1865, -14.4461, 0.15 ) }
    dend_2 { pt3dadd( 202.227, 90.9364, -14.2278, 0.15 ) }
    dend_2 { pt3dadd( 204.261, 92.3937, -13.9061, 0.15 ) }
    dend_2 { pt3dadd( 205.222, 93.1247, -13.7997, 0.15 ) }
    dend_2 { pt3dadd( 206.178, 93.8492, -13.7027, 0.15 ) }
    dend_2 { pt3dadd( 206.875, 94.3715, -13.6437, 0.15 ) }
    dend_2 { pt3dadd( 207.578, 94.9107, -13.6013, 0.15 ) }
    dend_2 { pt3dadd( 208.131, 95.3369, -13.5991, 0.15 ) }
    dend_2 { pt3dadd( 208.795, 96.0546, -13.6679, 0.15 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 9/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 15.505, -0.474051, -1.25561, 0.66 ) }
    dend_1 { pt3dadd( 16.9435, -0.411625, -0.608484, 0.66 ) }
    dend_1 { pt3dadd( 17.6278, -0.321302, -0.309547, 0.66 ) }
    dend_1 { pt3dadd( 18.8626, -0.092515, 0.211342, 0.66 ) }
    dend_1 { pt3dadd( 20.1859, 0.229248, 0.756098, 0.66 ) }
    dend_1 { pt3dadd( 21.2006, 0.498119, 1.17059, 0.66 ) }
    dend_1 { pt3dadd( 22.5777, 0.88761, 1.72055, 0.66 ) }
    dend_1 { pt3dadd( 23.2663, 1.15325, 1.98763, 0.66 ) }
    dend_1 { pt3dadd( 23.7546, 1.36213, 2.17208, 0.66 ) }
    dend_1 { pt3dadd( 24.3255, 1.59244, 2.39298, 0.66 ) }
    dend_1 { pt3dadd( 25.5461, 1.98784, 2.89669, 0.66 ) }
    dend_1 { pt3dadd( 26.0486, 2.09754, 3.12475, 0.66 ) }
    dend_1 { pt3dadd( 27.2063, 2.17783, 3.73092, 0.66 ) }
    dend_1 { pt3dadd( 28.3744, 2.05218, 4.38388, 0.59 ) }
    dend_1 { pt3dadd( 29.6341, 1.69824, 5.13654, 0.59 ) }
    dend_1 { pt3dadd( 30.1793, 1.4523, 5.50604, 0.81 ) }
    dend_1 { pt3dadd( 30.4811, 1.28373, 5.71737, 0.81 ) }
    dend_1 { pt3dadd( 31.5529, 0.662734, 6.4589, 1.18 ) }
    dend_1 { pt3dadd( 32.6067, 0.0258826, 7.17396, 1.18 ) }
    dend_1 { pt3dadd( 33.6299, -0.604893, 7.83444, 1.62 ) }
    dend_1 { pt3dadd( 35.3304, -1.54057, 8.82307, 1.11 ) }
    dend_1 { pt3dadd( 36.2475, -1.98573, 9.33107, 0.74 ) }
    dend_1 { pt3dadd( 37.0236, -2.31395, 9.73675, 0.59 ) }
    dend_1 { pt3dadd( 37.1596, -2.35987, 9.79879, 0.59 ) }
    dend_1 { pt3dadd( 38.3799, -2.65196, 10.3183, 0.59 ) }
    dend_1 { pt3dadd( 39.7115, -2.83309, 10.744, 0.44 ) }
    dend_1 { pt3dadd( 40.1536, -2.82858, 10.8351, 0.44 ) }
    dend_1 { pt3dadd( 40.7556, -2.78272, 11.0218, 0.44 ) }
    dend_1 { pt3dadd( 41.2152, -2.73803, 11.1927, 0.44 ) }
    dend_1 { pt3dadd( 41.6008, -2.68471, 11.3406, 0.44 ) }
    dend_1 { pt3dadd( 41.8739, -2.65597, 11.4471, 0.44 ) }
    dend_1 { pt3dadd( 42.6536, -2.68111, 11.7497, 0.44 ) }
    dend_1 { pt3dadd( 44.1368, -2.92043, 12.2418, 0.88 ) }
    dend_1 { pt3dadd( 44.9192, -3.105, 12.4681, 0.52 ) }
    dend_1 { pt3dadd( 45.5619, -3.2732, 12.6558, 0.52 ) }
    dend_1 { pt3dadd( 46.841, -3.5902, 13.0265, 0.52 ) }
    dend_1 { pt3dadd( 48.157, -3.88934, 13.3877, 0.52 ) }
    dend_1 { pt3dadd( 49.2008, -4.10148, 13.6731, 0.52 ) }
    dend_1 { pt3dadd( 49.684, -4.1787, 13.7916, 0.52 ) }
    dend_1 { pt3dadd( 50.5701, -4.31168, 14.0312, 0.52 ) }
    dend_1 { pt3dadd( 51.5016, -4.46635, 14.2846, 0.52 ) }
    dend_1 { pt3dadd( 52.1001, -4.57071, 14.4355, 0.52 ) }
    dend_1 { pt3dadd( 53.4368, -4.85874, 14.7486, 0.52 ) }
    dend_1 { pt3dadd( 54.4654, -5.12644, 14.945, 0.88 ) }
    dend_1 { pt3dadd( 55.4046, -5.40943, 15.1252, 0.88 ) }
    dend_1 { pt3dadd( 56.5125, -5.77061, 15.3153, 0.88 ) }
    dend_1 { pt3dadd( 57.3545, -6.0435, 15.4588, 0.52 ) }
    dend_1 { pt3dadd( 58.0476, -6.23359, 15.5837, 0.52 ) }
    dend_1 { pt3dadd( 58.9206, -6.38677, 15.773, 0.52 ) }
    dend_1 { pt3dadd( 60.4548, -6.44635, 16.2126, 0.74 ) }
    dend_1 { pt3dadd( 61.4446, -6.35131, 16.5534, 0.74 ) }
    dend_1 { pt3dadd( 61.9902, -6.23484, 16.7616, 0.74 ) }
    dend_1 { pt3dadd( 62.7487, -6.03605, 17.118, 0.52 ) }
    dend_1 { pt3dadd( 63.6753, -5.78086, 17.5822, 0.52 ) }
    dend_1 { pt3dadd( 64.3577, -5.60972, 17.9362, 0.52 ) }
    dend_1 { pt3dadd( 65.0777, -5.46356, 18.2894, 0.52 ) }
    dend_1 { pt3dadd( 65.583, -5.41683, 18.5234, 0.74 ) }
    dend_1 { pt3dadd( 67.1543, -5.40088, 19.2896, 0.96 ) }
    dend_1 { pt3dadd( 68.235, -5.43685, 19.8132, 0.96 ) }
    dend_1 { pt3dadd( 69.4604, -5.51324, 20.3872, 0.74 ) }
    dend_1 { pt3dadd( 70.1655, -5.59909, 20.745, 0.74 ) }
    dend_1 { pt3dadd( 71.8735, -5.87199, 21.6355, 0.59 ) }
    dend_1 { pt3dadd( 73.4875, -6.18748, 22.4892, 0.59 ) }
    dend_1 { pt3dadd( 74.0328, -6.30605, 22.7649, 0.59 ) }
    dend_1 { pt3dadd( 74.7578, -6.47472, 23.1446, 0.59 ) }
    dend_1 { pt3dadd( 76.6661, -6.9138, 24.1312, 0.59 ) }
    dend_1 { pt3dadd( 77.3243, -7.0603, 24.4651, 0.59 ) }
    dend_1 { pt3dadd( 78.7411, -7.34917, 25.1028, 0.59 ) }
    dend_1 { pt3dadd( 79.5149, -7.49931, 25.3727, 0.59 ) }
    dend_1 { pt3dadd( 80.182, -7.61148, 25.5748, 0.59 ) }
    dend_1 { pt3dadd( 80.9755, -7.67788, 25.7625, 0.59 ) }
    dend_1 { pt3dadd( 81.7537, -7.6737, 25.8895, 0.59 ) }
    dend_1 { pt3dadd( 83.1901, -7.63079, 26.1389, 0.59 ) }
    dend_1 { pt3dadd( 84.2362, -7.59381, 26.3074, 0.59 ) }
    dend_1 { pt3dadd( 84.9945, -7.59486, 26.4272, 0.59 ) }
    dend_1 { pt3dadd( 86.392, -7.64688, 26.5787, 0.59 ) }
    dend_1 { pt3dadd( 87.4702, -7.70214, 26.6882, 0.59 ) }
    dend_1 { pt3dadd( 88.859, -7.76757, 26.8259, 0.88 ) }
    dend_1 { pt3dadd( 89.8509, -7.80508, 26.9284, 1.11 ) }
    dend_1 { pt3dadd( 91.1965, -7.88158, 27.0692, 0.96 ) }
    dend_1 { pt3dadd( 92.5542, -8.02409, 27.1938, 1.47 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 90/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 40.7509, -7.27851, -0.354058, 0.513942 ) }
    axon_1 { pt3dadd( 55.4943, -10.0412, -0.354058, 0.513942 ) }
    axon_1 { pt3dadd( 70.2377, -12.8038, -0.354058, 0.513942 ) }
    // Section: dend_40, id: dend_40, parent: dend_39 (entry count 93/100)
    dend_40 { pt3dclear() }
    dend_40 { pt3dadd( 2.72497, 17.7351, -2.99745, 1.25 ) }
    dend_40 { pt3dadd( 3.30694, 22.3891, -10.312, 1.25 ) }
    dend_40 { pt3dadd( 3.38164, 22.9688, -10.9892, 1.25 ) }
    dend_40 { pt3dadd( 3.6744, 24.7149, -12.5908, 1.25 ) }
    dend_40 { pt3dadd( 3.82968, 25.4166, -13.1365, 1.25 ) }
    dend_40 { pt3dadd( 3.94314, 25.9314, -13.4731, 1.25 ) }
    dend_40 { pt3dadd( 4.16859, 27.2251, -14.1904, 0.81 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_40 { pt3dadd( 4.22684, 28.6653, -14.2066, 0.81 ) }
    dend_40 { pt3dadd( 4.19848, 29.5822, -14.2891, 0.81 ) }
    dend_40 { pt3dadd( 4.07604, 30.263, -14.4271, 0.81 ) }
    dend_40 { pt3dadd( 3.76175, 31.3977, -14.9598, 0.81 ) }
    dend_40 { pt3dadd( 3.40908, 32.5833, -15.7453, 0.81 ) }
    dend_40 { pt3dadd( 3.19088, 33.3955, -16.5973, 0.81 ) }
    dend_40 { pt3dadd( 3.02397, 34.5325, -18.0892, 0.44 ) }
    dend_40 { pt3dadd( 3.03178, 35.2358, -19.0731, 1.47 ) }
    dend_40 { pt3dadd( 3.35825, 36.9505, -21.4011, 0.59 ) }
    dend_40 { pt3dadd( 3.6153, 37.6034, -22.2632, 0.59 ) }
    dend_40 { pt3dadd( 4.41288, 39.1764, -24.1865, 1.03 ) }
    dend_40 { pt3dadd( 4.75585, 39.7464, -24.8493, 0.52 ) }
    dend_40 { pt3dadd( 5.22922, 40.5131, -25.6259, 1.03 ) }
    dend_40 { pt3dadd( 5.75963, 41.407, -26.4389, 0.74 ) }
    dend_40 { pt3dadd( 6.5628, 43.114, -27.7675, 0.44 ) }
    dend_40 { pt3dadd( 6.75035, 43.6102, -28.1347, 0.44 ) }
    dend_40 { pt3dadd( 7.1706, 44.9103, -28.9954, 0.96 ) }
    dend_40 { pt3dadd( 7.41695, 45.6759, -29.5156, 1.84 ) }
    dend_40 { pt3dadd( 7.61155, 46.2241, -29.8788, 1.84 ) }
    dend_40 { pt3dadd( 8.29019, 47.9529, -31.0286, 0.88 ) }
    dend_40 { pt3dadd( 8.48051, 48.4455, -31.3997, 0.88 ) }
    dend_40 { pt3dadd( 8.59617, 48.8191, -31.7131, 0.88 ) }
    dend_40 { pt3dadd( 8.80442, 49.6813, -32.4693, 1.4 ) }
    dend_40 { pt3dadd( 8.94375, 50.3901, -33.1679, 1.4 ) }
    dend_40 { pt3dadd( 9.17931, 52.0086, -34.7815, 0.66 ) }
    dend_40 { pt3dadd( 9.38455, 53.7766, -36.479, 0.66 ) }
    dend_40 { pt3dadd( 9.46327, 54.5424, -37.2602, 0.66 ) }
    dend_40 { pt3dadd( 9.54796, 55.3585, -38.1091, 1.84 ) }
    dend_40 { pt3dadd( 9.77519, 57.6753, -40.4933, 0.52 ) }
    dend_40 { pt3dadd( 9.84509, 58.3681, -41.159, 1.47 ) }
    dend_40 { pt3dadd( 9.9295, 59.0727, -41.7267, 1.47 ) }
    dend_40 { pt3dadd( 10.3193, 61.3987, -43.3648, 0.74 ) }
    dend_40 { pt3dadd( 10.4443, 61.9487, -43.8021, 0.29 ) }
    dend_40 { pt3dadd( 10.5835, 62.5332, -44.2778, 0.29 ) }
    dend_40 { pt3dadd( 10.7136, 63.025, -44.6598, 0.29 ) }
    dend_40 { pt3dadd( 10.9095, 63.7868, -45.2917, 0.88 ) }
    dend_40 { pt3dadd( 11.155, 64.8575, -46.1591, 1.99 ) }
    dend_40 { pt3dadd( 11.6735, 67.51, -48.1514, 0.37 ) }
    dend_40 { pt3dadd( 11.8361, 68.7026, -48.998, 0.37 ) }
    dend_40 { pt3dadd( 11.9528, 69.8835, -49.786, 0.37 ) }
    dend_40 { pt3dadd( 12.1113, 72.9037, -51.7153, 0.22 ) }
    dend_40 { pt3dadd( 12.1142, 73.8638, -52.276, 0.88 ) }
    dend_40 { pt3dadd( 12.0774, 74.6632, -52.6571, 0.88 ) }
    dend_40 { pt3dadd( 11.8756, 76.5874, -53.3791, 0.07 ) }
    dend_40 { pt3dadd( 11.7573, 77.3501, -53.6303, 0.07 ) }
    dend_40 { pt3dadd( 11.4944, 78.6519, -53.9623, 0.07 ) }
    dend_40 { pt3dadd( 11.2753, 79.5692, -54.1294, 0.66 ) }
    dend_40 { pt3dadd( 11.0187, 80.9389, -54.3816, 0.81 ) }
    dend_40 { pt3dadd( 10.9469, 81.4435, -54.4723, 0.81 ) }
    dend_40 { pt3dadd( 10.6721, 84.0252, -54.9793, 0.07 ) }
    dend_40 { pt3dadd( 10.5691, 85.1141, -55.1922, 0.66 ) }
    dend_40 { pt3dadd( 10.4748, 86.3613, -55.4195, 1.03 ) }
    dend_40 { pt3dadd( 10.305, 88.9792, -55.9213, 0.07 ) }
    dend_40 { pt3dadd( 10.2737, 89.4364, -56.0116, 0.59 ) }
    dend_40 { pt3dadd( 10.0979, 92.0264, -56.5112, 0.07 ) }
    dend_40 { pt3dadd( 10.0492, 92.8458, -56.6996, 1.11 ) }
    dend_40 { pt3dadd( 9.95649, 94.0299, -56.9866, 0.07 ) }
    dend_40 { pt3dadd( 9.85451, 95.1024, -57.2425, 0.07 ) }
    dend_40 { pt3dadd( 9.74235, 96.1008, -57.5071, 0.07 ) }
    dend_40 { pt3dadd( 9.66986, 97.2816, -57.8125, 1.4 ) }
    dend_40 { pt3dadd( 9.71283, 99.866, -58.4045, 0.07 ) }
    dend_40 { pt3dadd( 9.77754, 100.798, -58.6094, 1.18 ) }
    dend_40 { pt3dadd( 9.86807, 101.566, -58.7708, 1.18 ) }
    dend_40 { pt3dadd( 10.1181, 102.839, -58.9848, 0.07 ) }
    dend_40 { pt3dadd( 10.6796, 104.905, -59.2341, 0.07 ) }
    dend_40 { pt3dadd( 11.3848, 107.044, -59.3779, 0.07 ) }
    dend_40 { pt3dadd( 11.684, 107.779, -59.3749, 1.25 ) }
    dend_40 { pt3dadd( 11.8762, 108.196, -59.3656, 1.25 ) }
    dend_40 { pt3dadd( 12.9364, 110.379, -59.353, 0.15 ) }
    dend_40 { pt3dadd( 13.4378, 111.365, -59.3713, 0.15 ) }
    dend_40 { pt3dadd( 13.7551, 111.967, -59.403, 0.74 ) }
    dend_40 { pt3dadd( 14.4951, 113.572, -59.667, 0.07 ) }
    dend_40 { pt3dadd( 14.8875, 114.517, -59.8848, 0.07 ) }
    dend_40 { pt3dadd( 15.558, 116.34, -60.395, 0.07 ) }
    dend_40 { pt3dadd( 15.82, 117.123, -60.6907, 1.33 ) }
    dend_40 { pt3dadd( 16.0453, 117.828, -60.9835, 1.33 ) }
    dend_40 { pt3dadd( 17.066, 121.198, -62.4511, 0.07 ) }
    dend_40 { pt3dadd( 17.295, 122.052, -62.8107, 0.96 ) }
    dend_40 { pt3dadd( 17.4607, 122.69, -63.0556, 0.96 ) }
    dend_40 { pt3dadd( 18.1082, 125.102, -63.9136, 0.07 ) }
    dend_40 { pt3dadd( 18.3833, 126.061, -64.2378, 0.81 ) }
    dend_40 { pt3dadd( 18.5794, 126.696, -64.4634, 0.81 ) }
    dend_40 { pt3dadd( 19.2962, 128.979, -65.2589, 0.07 ) }
    dend_40 { pt3dadd( 19.5425, 129.869, -65.5738, 0.74 ) }
    dend_40 { pt3dadd( 20.2046, 132.646, -66.5208, 0.07 ) }
    dend_40 { pt3dadd( 20.3183, 133.254, -66.7102, 1.11 ) }
    dend_40 { pt3dadd( 20.7317, 136.261, -67.7894, 0.07 ) }
    dend_40 { pt3dadd( 20.8123, 137.119, -68.1209, 0.66 ) }
    dend_40 { pt3dadd( 20.8608, 138.038, -68.4953, 0.66 ) }
    dend_40 { pt3dadd( 20.8669, 139.283, -68.9976, 0.07 ) }
    dend_40 { pt3dadd( 20.8327, 140.327, -69.3802, 1.25 ) }
    dend_40 { pt3dadd( 20.633, 143.898, -70.5929, 0.07 ) }
    dend_40 { pt3dadd( 20.5779, 144.689, -70.8289, 0.88 ) }
    dend_40 { pt3dadd( 20.5524, 145.266, -70.9927, 0.88 ) }
    dend_40 { pt3dadd( 20.5509, 145.505, -71.0531, 0.07 ) }
    dend_40 { pt3dadd( 20.573, 146.942, -71.3452, 0.07 ) }
    dend_40 { pt3dadd( 20.6255, 148.409, -71.5336, 0.07 ) }
    dend_40 { pt3dadd( 20.654, 148.827, -71.5643, 0.52 ) }
    dend_40 { pt3dadd( 20.7776, 150.147, -71.7151, 0.07 ) }
    dend_40 { pt3dadd( 20.9204, 151.362, -71.8831, 0.07 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_40 { pt3dadd( 21.0748, 152.377, -72.0344, 0.74 ) }
    dend_40 { pt3dadd( 21.1649, 152.828, -72.1058, 0.74 ) }
    dend_40 { pt3dadd( 21.7017, 154.806, -72.4192, 0.07 ) }
    dend_40 { pt3dadd( 21.9157, 155.479, -72.5215, 0.59 ) }
    dend_40 { pt3dadd( 22.4608, 156.952, -72.7259, 0.07 ) }
    dend_40 { pt3dadd( 22.9359, 158.145, -72.8649, 0.07 ) }
    dend_40 { pt3dadd( 23.3826, 159.225, -72.9452, 0.07 ) }
    dend_40 { pt3dadd( 23.5948, 159.758, -72.9631, 1.03 ) }
    dend_40 { pt3dadd( 23.8531, 160.424, -72.9514, 1.03 ) }
    dend_40 { pt3dadd( 24.3035, 161.642, -72.932, 0.07 ) }
    dend_40 { pt3dadd( 24.5624, 162.464, -72.9225, 0.66 ) }
    dend_40 { pt3dadd( 25.2364, 164.855, -72.9217, 0.07 ) }
    dend_40 { pt3dadd( 25.4146, 165.539, -72.9573, 0.07 ) }
    dend_40 { pt3dadd( 25.461, 165.707, -72.9722, 1.25 ) }
    dend_40 { pt3dadd( 25.6503, 166.312, -73.0439, 1.25 ) }
    dend_40 { pt3dadd( 26.0823, 167.499, -73.2179, 0.22 ) }
    dend_40 { pt3dadd( 26.712, 168.946, -73.4643, 0.81 ) }
    dend_40 { pt3dadd( 27.5136, 170.277, -73.59, 0.07 ) }
    dend_40 { pt3dadd( 28.2794, 171.325, -73.6071, 0.07 ) }
    dend_40 { pt3dadd( 28.8828, 172.046, -73.5712, 0.07 ) }
    dend_40 { pt3dadd( 29.1791, 172.352, -73.5343, 0.74 ) }
    dend_40 { pt3dadd( 29.5167, 172.666, -73.4547, 0.74 ) }
    dend_40 { pt3dadd( 31.827, 174.749, -72.6714, 0.07 ) }
    dend_40 { pt3dadd( 32.3163, 175.19, -72.4626, 0.07 ) }
    dend_40 { pt3dadd( 32.8765, 175.716, -72.2071, 0.37 ) }
    dend_40 { pt3dadd( 33.6107, 176.494, -71.747, 0.37 ) }
    dend_40 { pt3dadd( 34.529, 177.661, -70.9935, 0.07 ) }
    dend_40 { pt3dadd( 35.0014, 178.4, -70.4848, 0.07 ) }
    dend_40 { pt3dadd( 35.2467, 179.003, -70.002, 0.07 ) }
    dend_40 { pt3dadd( 35.4255, 179.629, -69.4096, 0.07 ) }
    dend_40 { pt3dadd( 35.8384, 181.623, -67.3824, 0.07 ) }
    dend_40 { pt3dadd( 35.9414, 182.574, -66.343, 0.07 ) }
    dend_40 { pt3dadd( 35.9448, 182.889, -65.973, 0.07 ) }
    dend_40 { pt3dadd( 35.8235, 184.363, -64.0704, 0.07 ) }
    dend_40 { pt3dadd( 35.7436, 184.858, -63.3753, 0.07 ) }
    // Section: dend_28, id: dend_28, parent: dend_19 (entry count 35/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 10.1791, 39.1013, -2.05661, 1.18 ) }
    dend_28 { pt3dadd( 10.0448, 44.1323, 0.0551973, 1.18 ) }
    dend_28 { pt3dadd( 10.0297, 46.4168, 0.80235, 1.18 ) }
    dend_28 { pt3dadd( 9.99519, 48.0472, 1.26401, 1.18 ) }
    dend_28 { pt3dadd( 10.0309, 49.4878, 1.86936, 1.18 ) }
    dend_28 { pt3dadd( 10.1151, 51.6343, 2.90181, 1.18 ) }
    dend_28 { pt3dadd( 10.1728, 52.9386, 3.55592, 1.18 ) }
    dend_28 { pt3dadd( 10.2523, 55.6726, 4.86359, 1.18 ) }
    dend_28 { pt3dadd( 10.3261, 57.3242, 5.73947, 0.74 ) }
    dend_28 { pt3dadd( 10.651, 62.5799, 8.78328, 0.59 ) }
    dend_28 { pt3dadd( 10.7553, 63.9512, 9.66224, 0.59 ) }
    dend_28 { pt3dadd( 10.8696, 65.4147, 10.7351, 0.81 ) }
    dend_28 { pt3dadd( 11.0016, 66.8771, 11.9317, 0.81 ) }
    dend_28 { pt3dadd( 11.0016, 66.8771, 11.9317, 1.33 ) }
    // Section: dend_23, id: dend_23, parent: dend_19 (entry count 49/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( 10.1791, 39.1013, -2.05661, 1.03 ) }
    dend_23 { pt3dadd( 13.401, 40.1994, -1.28251, 1.03 ) }
    dend_23 { pt3dadd( 14.3555, 40.5509, -0.963355, 1.03 ) }
    dend_23 { pt3dadd( 15.3296, 40.9259, -0.641034, 1.03 ) }
    dend_23 { pt3dadd( 16.2131, 41.279, -0.382223, 1.03 ) }
    dend_23 { pt3dadd( 17.3135, 41.7369, -0.102195, 0.96 ) }
    dend_23 { pt3dadd( 19.0366, 42.4908, 0.304221, 0.96 ) }
    dend_23 { pt3dadd( 21.0231, 43.5857, 0.590448, 0.66 ) }
    dend_23 { pt3dadd( 21.8117, 44.0664, 0.698993, 1.03 ) }
    dend_23 { pt3dadd( 22.8039, 44.7554, 0.800318, 1.03 ) }
    dend_23 { pt3dadd( 23.5069, 45.3024, 0.806185, 1.03 ) }
    dend_23 { pt3dadd( 24.1472, 45.8971, 0.714033, 0.81 ) }
    dend_23 { pt3dadd( 24.9579, 46.9297, 0.378298, 0.81 ) }
    dend_23 { pt3dadd( 25.2813, 47.4968, 0.164569, 0.81 ) }
    dend_23 { pt3dadd( 25.8286, 48.7025, -0.237727, 1.18 ) }
    dend_23 { pt3dadd( 26.174, 49.6486, -0.516721, 1.18 ) }
    dend_23 { pt3dadd( 26.4055, 50.3313, -0.706039, 1.18 ) }
    dend_23 { pt3dadd( 26.8202, 51.4452, -1.02485, 1.18 ) }
    dend_23 { pt3dadd( 27.2933, 52.4352, -1.26822, 0.66 ) }
    dend_23 { pt3dadd( 27.654, 53.0484, -1.43018, 0.66 ) }
    dend_23 { pt3dadd( 27.9886, 53.4827, -1.56013, 0.66 ) }
    dend_23 { pt3dadd( 28.6397, 54.0603, -1.77341, 0.66 ) }
    dend_23 { pt3dadd( 29.4708, 54.5302, -2.01354, 0.66 ) }
    dend_23 { pt3dadd( 30.5347, 54.9197, -2.2992, 0.66 ) }
    dend_23 { pt3dadd( 30.934, 55.0261, -2.4169, 0.66 ) }
    dend_23 { pt3dadd( 31.551, 55.1759, -2.57695, 0.66 ) }
    dend_23 { pt3dadd( 32.5968, 55.4885, -2.8141, 0.66 ) }
    dend_23 { pt3dadd( 33.6549, 55.9064, -3.02778, 0.66 ) }
    dend_23 { pt3dadd( 34.3734, 56.2971, -3.15755, 0.66 ) }
    dend_23 { pt3dadd( 34.7498, 56.5627, -3.22415, 0.66 ) }
    dend_23 { pt3dadd( 35.9266, 57.5585, -3.40972, 0.88 ) }
    dend_23 { pt3dadd( 36.8044, 58.3981, -3.49272, 0.88 ) }
    dend_23 { pt3dadd( 37.558, 59.1775, -3.53807, 0.88 ) }
    dend_23 { pt3dadd( 38.0979, 59.7643, -3.56137, 0.88 ) }
    dend_23 { pt3dadd( 38.7544, 60.4989, -3.54474, 1.18 ) }
    dend_23 { pt3dadd( 39.6666, 61.5086, -3.5033, 0.81 ) }
    dend_23 { pt3dadd( 40.8329, 62.7675, -3.46059, 0.81 ) }
    dend_23 { pt3dadd( 41.5959, 63.5298, -3.42992, 0.81 ) }
    dend_23 { pt3dadd( 42.048, 63.9647, -3.41083, 0.81 ) }
    dend_23 { pt3dadd( 43.7684, 65.5619, -3.3834, 0.96 ) }
    dend_23 { pt3dadd( 44.3581, 66.1173, -3.38739, 0.96 ) }
    dend_23 { pt3dadd( 44.9581, 66.711, -3.41727, 0.96 ) }
    dend_23 { pt3dadd( 45.5697, 67.3679, -3.49483, 0.96 ) }
    dend_23 { pt3dadd( 45.9935, 67.8461, -3.56843, 0.96 ) }
    dend_23 { pt3dadd( 46.9465, 68.9752, -3.76004, 0.66 ) }
    dend_23 { pt3dadd( 47.4527, 69.6663, -3.88228, 0.66 ) }
    dend_23 { pt3dadd( 48.0833, 70.6412, -3.99945, 0.66 ) }
    dend_23 { pt3dadd( 48.6603, 71.6966, -4.06606, 0.66 ) }
    dend_23 { pt3dadd( 49.0409, 72.461, -4.09242, 0.66 ) }
    dend_23 { pt3dadd( 49.5267, 73.5493, -4.09882, 0.88 ) }
    dend_23 { pt3dadd( 49.9592, 74.5765, -4.08925, 0.88 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_9()
}

proc basic_shape_9() {
    dend_23 { pt3dadd( 50.238, 75.1896, -4.09444, 1.18 ) }
    dend_23 { pt3dadd( 50.7597, 76.2567, -4.185, 1.18 ) }
    dend_23 { pt3dadd( 51.4092, 77.3478, -4.41855, 0.66 ) }
    dend_23 { pt3dadd( 51.9716, 78.085, -4.71094, 0.66 ) }
    dend_23 { pt3dadd( 52.5206, 78.6375, -5.05794, 0.66 ) }
    dend_23 { pt3dadd( 53.4754, 79.3853, -5.68364, 0.66 ) }
    dend_23 { pt3dadd( 54.534, 80.0857, -6.27715, 0.74 ) }
    dend_23 { pt3dadd( 55.3852, 80.5957, -6.69572, 0.74 ) }
    dend_23 { pt3dadd( 56.2057, 81.1136, -7.03986, 0.74 ) }
    dend_23 { pt3dadd( 56.9305, 81.5923, -7.24367, 0.74 ) }
    dend_23 { pt3dadd( 57.3911, 81.9692, -7.22602, 0.74 ) }
    dend_23 { pt3dadd( 58.6064, 83.171, -6.77536, 0.74 ) }
    dend_23 { pt3dadd( 58.9841, 83.5406, -6.54233, 0.74 ) }
    dend_23 { pt3dadd( 59.4852, 84.0088, -6.18312, 0.74 ) }
    dend_23 { pt3dadd( 60.1462, 84.5737, -5.70906, 1.4 ) }
    dend_23 { pt3dadd( 61.1077, 85.3201, -5.08448, 0.96 ) }
    dend_23 { pt3dadd( 61.7197, 85.7605, -4.76959, 0.96 ) }
    dend_23 { pt3dadd( 62.8277, 86.4997, -4.37356, 0.81 ) }
    dend_23 { pt3dadd( 63.4823, 86.9394, -4.19836, 0.81 ) }
    dend_23 { pt3dadd( 64.0732, 87.3569, -4.11019, 0.81 ) }
    dend_23 { pt3dadd( 65.1541, 88.2205, -4.09462, 0.81 ) }
    dend_23 { pt3dadd( 65.8314, 88.8513, -4.16268, 0.81 ) }
    dend_23 { pt3dadd( 66.1023, 89.155, -4.21955, 0.81 ) }
    dend_23 { pt3dadd( 66.7534, 90.0222, -4.45257, 0.81 ) }
    dend_23 { pt3dadd( 67.2087, 90.6759, -4.64423, 0.81 ) }
    dend_23 { pt3dadd( 67.5855, 91.2143, -4.82907, 0.81 ) }
    dend_23 { pt3dadd( 68.092, 91.9394, -5.11293, 0.81 ) }
    dend_23 { pt3dadd( 68.7413, 92.8474, -5.50968, 0.81 ) }
    dend_23 { pt3dadd( 69.3782, 93.7295, -5.97375, 0.81 ) }
    dend_23 { pt3dadd( 69.9087, 94.4243, -6.39183, 0.52 ) }
    dend_23 { pt3dadd( 70.3835, 95.0262, -6.76951, 0.52 ) }
    dend_23 { pt3dadd( 70.799, 95.5147, -7.10504, 0.52 ) }
    dend_23 { pt3dadd( 71.5894, 96.3403, -7.69505, 1.03 ) }
    dend_23 { pt3dadd( 72.6928, 97.3735, -8.44074, 0.66 ) }
    dend_23 { pt3dadd( 73.7712, 98.2841, -9.10083, 0.66 ) }
    dend_23 { pt3dadd( 74.6452, 98.9215, -9.57798, 1.03 ) }
    dend_23 { pt3dadd( 75.4226, 99.4174, -9.959, 0.88 ) }
    dend_23 { pt3dadd( 76.7769, 100.174, -10.4632, 0.88 ) }
    dend_23 { pt3dadd( 77.8486, 100.734, -10.7485, 0.88 ) }
    dend_23 { pt3dadd( 78.941, 101.289, -10.9599, 0.74 ) }
    dend_23 { pt3dadd( 80.6151, 102.172, -11.2308, 0.74 ) }
    dend_23 { pt3dadd( 81.3009, 102.552, -11.3286, 0.74 ) }
    dend_23 { pt3dadd( 83.079, 103.621, -11.5599, 0.74 ) }
    dend_23 { pt3dadd( 84.0557, 104.232, -11.6976, 0.74 ) }
    dend_23 { pt3dadd( 84.7126, 104.659, -11.7946, 0.74 ) }
    dend_23 { pt3dadd( 85.3756, 105.11, -11.9136, 0.74 ) }
    dend_23 { pt3dadd( 86.0685, 105.594, -12.0741, 0.74 ) }
    dend_23 { pt3dadd( 86.6696, 106.001, -12.2631, 0.74 ) }
    dend_23 { pt3dadd( 87.5596, 106.583, -12.6168, 0.74 ) }
    dend_23 { pt3dadd( 88.219, 107.007, -12.8806, 0.74 ) }
    dend_23 { pt3dadd( 89.1427, 107.661, -13.2452, 0.74 ) }
    dend_23 { pt3dadd( 90.3758, 108.709, -13.7149, 1.03 ) }
    dend_23 { pt3dadd( 91.6357, 110.052, -14.1644, 0.74 ) }
    dend_23 { pt3dadd( 92.0899, 110.659, -14.3127, 0.74 ) }
    dend_23 { pt3dadd( 92.3523, 111.08, -14.3905, 0.74 ) }
    dend_23 { pt3dadd( 92.9656, 112.197, -14.5575, 0.74 ) }
    dend_23 { pt3dadd( 93.6103, 113.469, -14.6782, 0.74 ) }
    dend_23 { pt3dadd( 94.048, 114.362, -14.7316, 1.18 ) }
    dend_23 { pt3dadd( 94.7841, 115.905, -14.7984, 1.03 ) }
    dend_23 { pt3dadd( 95.0488, 116.419, -14.8246, 1.03 ) }
    dend_23 { pt3dadd( 95.8121, 117.697, -14.9206, 0.81 ) }
    dend_23 { pt3dadd( 96.7054, 118.894, -15.0645, 0.81 ) }
    dend_23 { pt3dadd( 97.225, 119.477, -15.1524, 0.81 ) }
    // Section: dend_20, id: dend_20, parent: dend_19 (entry count 63/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 10.1791, 39.1013, -2.05661, 0.88 ) }
    dend_20 { pt3dadd( 10.1344, 40.5849, -1.39273, 0.88 ) }
    dend_20 { pt3dadd( 10.0809, 42.0374, -0.821349, 0.88 ) }
    dend_20 { pt3dadd( 10.0628, 42.7505, -0.577544, 0.88 ) }
    dend_20 { pt3dadd( 10.0294, 44.4489, -0.0572728, 0.88 ) }
    dend_20 { pt3dadd( 10.0119, 45.4354, 0.220378, 1.11 ) }
    dend_20 { pt3dadd( 9.97829, 46.4577, 0.495056, 1.11 ) }
    dend_20 { pt3dadd( 9.84123, 48.4184, 1.0068, 1.11 ) }
    dend_20 { pt3dadd( 9.67911, 49.8009, 1.35701, 1.11 ) }
    dend_20 { pt3dadd( 9.51843, 50.8375, 1.58693, 0.74 ) }
    dend_20 { pt3dadd( 9.35376, 51.6901, 1.73286, 0.74 ) }
    dend_20 { pt3dadd( 9.13642, 52.5828, 1.88887, 0.74 ) }
    dend_20 { pt3dadd( 8.81169, 53.6789, 2.10113, 0.74 ) }
    dend_20 { pt3dadd( 8.5674, 54.3997, 2.18672, 0.74 ) }
    dend_20 { pt3dadd( 8.2853, 55.3075, 2.14926, 0.74 ) }
    dend_20 { pt3dadd( 8.11373, 56.119, 1.95924, 0.74 ) }
    dend_20 { pt3dadd( 8.07662, 56.5663, 1.76643, 0.74 ) }
    dend_20 { pt3dadd( 8.08766, 57.0731, 1.5102, 0.74 ) }
    dend_20 { pt3dadd( 8.19129, 58.9668, 0.465376, 0.74 ) }
    dend_20 { pt3dadd( 8.26933, 60.3114, -0.282463, 0.74 ) }
    dend_20 { pt3dadd( 8.30527, 61.0307, -0.652806, 1.11 ) }
    dend_20 { pt3dadd( 8.39069, 63.0112, -1.61787, 0.59 ) }
    dend_20 { pt3dadd( 8.44716, 64.3408, -2.18778, 0.88 ) }
    dend_20 { pt3dadd( 8.50577, 66.3165, -2.89158, 0.88 ) }
    dend_20 { pt3dadd( 8.51419, 66.9978, -3.06671, 1.18 ) }
    dend_20 { pt3dadd( 8.48231, 68.6007, -3.36853, 0.81 ) }
    dend_20 { pt3dadd( 8.43246, 69.8812, -3.53829, 0.81 ) }
    dend_20 { pt3dadd( 8.36594, 71.3793, -3.64098, 1.11 ) }
    dend_20 { pt3dadd( 8.32436, 72.1289, -3.6763, 1.11 ) }
    dend_20 { pt3dadd( 8.29052, 73.0646, -3.69283, 1.47 ) }
    dend_20 { pt3dadd( 8.2375, 74.9074, -3.726, 1.03 ) }
    dend_20 { pt3dadd( 8.21601, 76.131, -3.74273, 1.03 ) }
    dend_20 { pt3dadd( 8.19948, 77.3149, -3.73867, 1.03 ) }
    dend_20 { pt3dadd( 8.17557, 78.6817, -3.74266, 1.03 ) }
    dend_20 { pt3dadd( 8.16219, 79.922, -3.74834, 1.03 ) }
    dend_20 { pt3dadd( 8.15632, 81.115, -3.74857, 1.03 ) }
    dend_20 { pt3dadd( 8.15293, 81.8207, -3.74152, 1.03 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_10()
}

proc basic_shape_10() {
    dend_20 { pt3dadd( 8.13162, 82.6002, -3.71401, 0.81 ) }
    dend_20 { pt3dadd( 8.04819, 83.7038, -3.63089, 0.81 ) }
    dend_20 { pt3dadd( 7.91443, 84.7729, -3.49911, 0.81 ) }
    dend_20 { pt3dadd( 7.59652, 86.322, -3.29598, 0.59 ) }
    dend_20 { pt3dadd( 7.36479, 87.1835, -3.21827, 0.59 ) }
    dend_20 { pt3dadd( 7.10628, 87.9662, -3.21443, 1.18 ) }
    dend_20 { pt3dadd( 6.8261, 88.6497, -3.38051, 1.18 ) }
    dend_20 { pt3dadd( 6.6612, 89.0354, -3.55174, 1.18 ) }
    dend_20 { pt3dadd( 6.28661, 89.9473, -4.07448, 0.52 ) }
    dend_20 { pt3dadd( 5.85605, 91.1703, -4.86762, 0.74 ) }
    dend_20 { pt3dadd( 5.55648, 92.3001, -5.611, 0.74 ) }
    dend_20 { pt3dadd( 5.10219, 95.0302, -7.39328, 0.74 ) }
    dend_20 { pt3dadd( 5.04387, 96.2116, -8.11163, 1.03 ) }
    dend_20 { pt3dadd( 5.09728, 97.0446, -8.56039, 1.03 ) }
    dend_20 { pt3dadd( 5.28959, 98.1386, -9.05369, 1.4 ) }
    dend_20 { pt3dadd( 5.58848, 99.2101, -9.40165, 1.4 ) }
    dend_20 { pt3dadd( 5.89069, 100.112, -9.63838, 0.15 ) }
    dend_20 { pt3dadd( 6.37728, 101.412, -9.89767, 0.22 ) }
    dend_20 { pt3dadd( 6.71861, 102.396, -10.144, 1.03 ) }
    dend_20 { pt3dadd( 6.84249, 102.798, -10.2585, 1.55 ) }
    dend_20 { pt3dadd( 7.08684, 103.743, -10.5496, 1.03 ) }
    dend_20 { pt3dadd( 7.52009, 105.768, -11.1928, 0.44 ) }
    dend_20 { pt3dadd( 7.6361, 106.427, -11.389, 0.44 ) }
    dend_20 { pt3dadd( 7.71443, 106.942, -11.5232, 0.44 ) }
    dend_20 { pt3dadd( 7.84077, 107.734, -11.6889, 1.18 ) }
    dend_20 { pt3dadd( 7.95447, 108.35, -11.7805, 1.18 ) }
    dend_20 { pt3dadd( 8.08582, 109.093, -11.8691, 1.18 ) }
    dend_20 { pt3dadd( 8.29103, 110.401, -11.9598, 0.22 ) }
    dend_20 { pt3dadd( 8.44398, 111.585, -12.0566, 0.22 ) }
    dend_20 { pt3dadd( 8.53913, 112.547, -12.1371, 1.18 ) }
    dend_20 { pt3dadd( 8.62467, 113.62, -12.2291, 1.18 ) }
    dend_20 { pt3dadd( 8.74104, 115.972, -12.4204, 0.07 ) }
    dend_20 { pt3dadd( 8.76922, 117.266, -12.5131, 1.03 ) }
    dend_20 { pt3dadd( 8.75793, 117.895, -12.5467, 1.03 ) }
    dend_20 { pt3dadd( 8.73277, 118.644, -12.5744, 1.62 ) }
    dend_20 { pt3dadd( 8.67341, 119.454, -12.5751, 1.62 ) }
    dend_20 { pt3dadd( 8.62441, 119.955, -12.5547, 0.07 ) }
    dend_20 { pt3dadd( 8.48629, 121.313, -12.427, 0.07 ) }
    dend_20 { pt3dadd( 8.37232, 122.225, -12.3371, 1.33 ) }
    dend_20 { pt3dadd( 8.29144, 122.753, -12.2806, 1.33 ) }
    dend_20 { pt3dadd( 7.97662, 124.551, -12.0751, 0.07 ) }
    dend_20 { pt3dadd( 7.84802, 125.148, -11.9982, 1.18 ) }
    dend_20 { pt3dadd( 7.77443, 125.453, -11.9561, 1.18 ) }
    dend_20 { pt3dadd( 7.28711, 126.982, -11.6999, 0.07 ) }
    dend_20 { pt3dadd( 7.05841, 127.6, -11.5404, 0.81 ) }
    dend_20 { pt3dadd( 6.77881, 128.24, -11.3151, 0.81 ) }
    dend_20 { pt3dadd( 6.49475, 128.804, -11.0596, 0.81 ) }
    dend_20 { pt3dadd( 6.49475, 128.804, -11.0596, 0.29 ) }
    dend_20 { pt3dadd( 5.84821, 129.886, -10.4458, 0.29 ) }
    dend_20 { pt3dadd( 5.14524, 131.05, -9.7503, 0.81 ) }
    dend_20 { pt3dadd( 4.82335, 131.568, -9.44331, 1.33 ) }
    dend_20 { pt3dadd( 4.33118, 132.367, -8.99448, 1.33 ) }
    dend_20 { pt3dadd( 4.28853, 132.44, -8.95797, 0.07 ) }
    dend_20 { pt3dadd( 4.02562, 132.919, -8.75354, 0.07 ) }
    dend_20 { pt3dadd( 3.53484, 133.904, -8.43054, 0.07 ) }
    dend_20 { pt3dadd( 3.1477, 134.667, -8.23397, 0.07 ) }
    dend_20 { pt3dadd( 2.83707, 135.282, -8.07607, 0.07 ) }
    dend_20 { pt3dadd( 2.40458, 136.143, -7.85582, 1.03 ) }
    dend_20 { pt3dadd( 2.09363, 136.761, -7.69748, 1.03 ) }
    dend_20 { pt3dadd( 1.31303, 138.306, -7.30061, 0.07 ) }
    dend_20 { pt3dadd( 0.959741, 138.974, -7.12346, 1.25 ) }
    dend_20 { pt3dadd( 0.496923, 139.894, -6.8879, 1.25 ) }
    dend_20 { pt3dadd( 0.373636, 140.129, -6.82588, 1.25 ) }
    // Section: dend_16, id: dend_16, parent: dend_14 (entry count 63/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -27.9001, 32.0634, -5.41357, 0.66 ) }
    dend_16 { pt3dadd( -30.5014, 33.5593, -7.46968, 0.66 ) }
    dend_16 { pt3dadd( -31.3023, 34.086, -8.04454, 0.66 ) }
    dend_16 { pt3dadd( -32.0124, 34.6149, -8.56625, 0.66 ) }
    dend_16 { pt3dadd( -32.8963, 35.3464, -9.2185, 0.88 ) }
    dend_16 { pt3dadd( -34.3452, 36.6974, -10.3223, 0.88 ) }
    dend_16 { pt3dadd( -35.7463, 38.1239, -11.4504, 0.88 ) }
    dend_16 { pt3dadd( -36.4378, 38.9619, -12.0811, 1.33 ) }
    dend_16 { pt3dadd( -37.4801, 40.2436, -13.1201, 0.96 ) }
    dend_16 { pt3dadd( -38.0584, 40.956, -13.7005, 0.96 ) }
    dend_16 { pt3dadd( -38.7749, 41.8029, -14.3991, 0.96 ) }
    dend_16 { pt3dadd( -40.2866, 43.5174, -15.8143, 0.96 ) }
    dend_16 { pt3dadd( -41.9912, 45.3621, -17.2526, 1.11 ) }
    dend_16 { pt3dadd( -42.8293, 46.2062, -17.867, 1.11 ) }
    dend_16 { pt3dadd( -43.9393, 47.249, -18.5088, 0.66 ) }
    dend_16 { pt3dadd( -44.6289, 47.8609, -18.8197, 1.18 ) }
    dend_16 { pt3dadd( -45.6969, 48.7808, -19.1585, 1.18 ) }
    dend_16 { pt3dadd( -47.1866, 50.1097, -19.4737, 0.74 ) }
    dend_16 { pt3dadd( -47.7128, 50.6197, -19.5578, 0.74 ) }
    dend_16 { pt3dadd( -48.9222, 51.8765, -19.8071, 1.11 ) }
    dend_16 { pt3dadd( -50.0256, 53.0778, -20.0801, 0.59 ) }
    dend_16 { pt3dadd( -50.6452, 53.794, -20.2653, 0.59 ) }
    dend_16 { pt3dadd( -51.4933, 54.8567, -20.6018, 1.11 ) }
    dend_16 { pt3dadd( -52.1935, 55.8188, -20.9428, 1.11 ) }
    dend_16 { pt3dadd( -53.2333, 57.3824, -21.5163, 0.74 ) }
    dend_16 { pt3dadd( -53.9709, 58.6505, -21.9729, 1.03 ) }
    dend_16 { pt3dadd( -54.655, 60.0231, -22.4374, 1.03 ) }
    dend_16 { pt3dadd( -55.3578, 61.6597, -22.9355, 1.03 ) }
    dend_16 { pt3dadd( -55.7923, 62.804, -23.2333, 1.03 ) }
    dend_16 { pt3dadd( -56.2209, 63.9713, -23.5121, 1.03 ) }
    dend_16 { pt3dadd( -56.8838, 65.9282, -23.9413, 1.03 ) }
    dend_16 { pt3dadd( -57.3058, 67.0909, -24.1584, 1.03 ) }
    dend_16 { pt3dadd( -57.8597, 68.4561, -24.4187, 0.88 ) }
    dend_16 { pt3dadd( -58.5283, 69.8605, -24.6946, 0.88 ) }
    dend_16 { pt3dadd( -59.2437, 71.1956, -24.9962, 0.88 ) }
    dend_16 { pt3dadd( -59.5629, 71.7617, -25.1594, 0.88 ) }
    dend_16 { pt3dadd( -60.476, 73.2892, -25.6723, 0.88 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_11()
}

proc basic_shape_11() {
    dend_16 { pt3dadd( -61.5038, 74.9916, -26.2746, 0.88 ) }
    dend_16 { pt3dadd( -62.364, 76.4456, -26.791, 0.81 ) }
    dend_16 { pt3dadd( -62.8537, 77.328, -27.0929, 0.81 ) }
    dend_16 { pt3dadd( -63.9027, 79.4598, -27.7579, 0.81 ) }
    dend_16 { pt3dadd( -64.4233, 80.6075, -28.0772, 1.11 ) }
    dend_16 { pt3dadd( -65.2157, 82.5533, -28.5387, 0.59 ) }
    dend_16 { pt3dadd( -65.8618, 84.1974, -28.8492, 0.59 ) }
    dend_16 { pt3dadd( -66.4379, 85.7234, -29.1116, 0.96 ) }
    dend_16 { pt3dadd( -67.2641, 87.9354, -29.4273, 0.96 ) }
    dend_16 { pt3dadd( -67.7471, 89.2313, -29.5599, 0.96 ) }
    dend_16 { pt3dadd( -68.4395, 91.1438, -29.7415, 0.96 ) }
    dend_16 { pt3dadd( -68.9081, 92.4727, -29.8567, 0.44 ) }
    dend_16 { pt3dadd( -69.0165, 92.7813, -29.9042, 0.44 ) }
    dend_16 { pt3dadd( -69.2036, 93.2651, -30.0133, 0.44 ) }
    dend_16 { pt3dadd( -69.4309, 93.7944, -30.1724, 1.18 ) }
    dend_16 { pt3dadd( -69.835, 94.7377, -30.4715, 1.18 ) }
    dend_16 { pt3dadd( -70.2988, 95.8668, -30.8373, 1.18 ) }
    dend_16 { pt3dadd( -71.2803, 98.3093, -31.5932, 0.81 ) }
    dend_16 { pt3dadd( -71.6707, 99.2556, -31.8615, 0.81 ) }
    dend_16 { pt3dadd( -71.9389, 99.8943, -32.0291, 0.81 ) }
    dend_16 { pt3dadd( -72.5385, 101.269, -32.3286, 0.66 ) }
    dend_16 { pt3dadd( -72.9259, 102.134, -32.4719, 0.66 ) }
    dend_16 { pt3dadd( -73.3924, 103.142, -32.6418, 1.03 ) }
    dend_16 { pt3dadd( -73.9697, 104.342, -32.8228, 0.44 ) }
    dend_16 { pt3dadd( -74.3058, 105.028, -32.9645, 0.44 ) }
    dend_16 { pt3dadd( -75.014, 106.372, -33.3084, 0.96 ) }
    dend_16 { pt3dadd( -75.4842, 107.213, -33.5804, 1.69 ) }
    dend_16 { pt3dadd( -76.634, 109.195, -34.3634, 0.07 ) }
    dend_16 { pt3dadd( -77.1933, 110.163, -34.8298, 0.37 ) }
    dend_16 { pt3dadd( -77.5061, 110.696, -35.1192, 0.37 ) }
    dend_16 { pt3dadd( -78.0394, 111.62, -35.6507, 0.88 ) }
    dend_16 { pt3dadd( -78.4017, 112.259, -36.0314, 1.4 ) }
    dend_16 { pt3dadd( -79.2007, 113.753, -36.8989, 1.4 ) }
    dend_16 { pt3dadd( -79.8508, 115.113, -37.6237, 1.03 ) }
    dend_16 { pt3dadd( -80.4147, 116.483, -38.3259, 0.66 ) }
    dend_16 { pt3dadd( -80.6421, 117.166, -38.6459, 0.66 ) }
    dend_16 { pt3dadd( -80.8381, 117.904, -38.9575, 0.66 ) }
    dend_16 { pt3dadd( -81.1561, 119.388, -39.4843, 1.47 ) }
    dend_16 { pt3dadd( -81.3012, 120.278, -39.7529, 1.47 ) }
    dend_16 { pt3dadd( -81.4937, 121.778, -40.2196, 0.88 ) }
    dend_16 { pt3dadd( -81.8215, 124.773, -41.1966, 0.59 ) }
    dend_16 { pt3dadd( -81.9037, 125.51, -41.4404, 0.59 ) }
    dend_16 { pt3dadd( -82.1087, 127.446, -42.0991, 1.55 ) }
    dend_16 { pt3dadd( -82.1783, 128.101, -42.3307, 1.55 ) }
    dend_16 { pt3dadd( -82.4061, 130.457, -43.1818, 0.07 ) }
    dend_16 { pt3dadd( -82.5058, 131.735, -43.6398, 1.03 ) }
    dend_16 { pt3dadd( -82.566, 132.885, -44.0409, 1.03 ) }
    dend_16 { pt3dadd( -82.6144, 134.211, -44.497, 1.03 ) }
    dend_16 { pt3dadd( -82.6312, 135.22, -44.8563, 1.03 ) }
    dend_16 { pt3dadd( -82.7054, 138.412, -45.9643, 0.52 ) }
    dend_16 { pt3dadd( -82.7215, 139.539, -46.3322, 0.52 ) }
    dend_16 { pt3dadd( -82.7293, 140.381, -46.6107, 1.25 ) }
    dend_16 { pt3dadd( -82.7436, 141.586, -47.0022, 1.25 ) }
    dend_16 { pt3dadd( -82.7943, 143.491, -47.5844, 0.15 ) }
    dend_16 { pt3dadd( -82.8374, 144.5, -47.8736, 0.15 ) }
    dend_16 { pt3dadd( -82.9169, 145.482, -48.115, 1.03 ) }
    dend_16 { pt3dadd( -83.0258, 146.555, -48.3303, 1.03 ) }
    dend_16 { pt3dadd( -83.1136, 147.4, -48.4474, 1.03 ) }
    dend_16 { pt3dadd( -83.2117, 148.336, -48.5107, 0.44 ) }
    dend_16 { pt3dadd( -83.3359, 149.73, -48.518, 0.44 ) }
    dend_16 { pt3dadd( -83.3876, 150.832, -48.5254, 0.44 ) }
    dend_16 { pt3dadd( -83.3996, 151.484, -48.5359, 0.44 ) }
    dend_16 { pt3dadd( -83.3971, 152.909, -48.5751, 0.81 ) }
    dend_16 { pt3dadd( -83.3798, 154.063, -48.6319, 0.81 ) }
    dend_16 { pt3dadd( -83.3576, 154.938, -48.6938, 0.81 ) }
    dend_16 { pt3dadd( -83.3151, 157.117, -48.8963, 0.22 ) }
    dend_16 { pt3dadd( -83.2924, 158.707, -49.0852, 1.25 ) }
    dend_16 { pt3dadd( -83.294, 159.483, -49.1842, 1.25 ) }
    dend_16 { pt3dadd( -83.3223, 161.803, -49.497, 0.29 ) }
    dend_16 { pt3dadd( -83.3549, 162.811, -49.6065, 0.29 ) }
    dend_16 { pt3dadd( -83.3966, 163.653, -49.6787, 0.29 ) }
    dend_16 { pt3dadd( -83.4826, 164.899, -49.7596, 0.29 ) }
    dend_16 { pt3dadd( -83.5775, 166.293, -49.8323, 1.18 ) }
    dend_16 { pt3dadd( -83.6426, 167.538, -49.8892, 1.18 ) }
    dend_16 { pt3dadd( -83.7162, 169.604, -49.9711, 0.29 ) }
    dend_16 { pt3dadd( -83.7352, 170.912, -50.0267, 0.81 ) }
    dend_16 { pt3dadd( -83.718, 171.863, -50.0777, 0.81 ) }
    dend_16 { pt3dadd( -83.6667, 173.425, -50.1806, 0.22 ) }
    dend_16 { pt3dadd( -83.618, 174.52, -50.2717, 0.22 ) }
    dend_16 { pt3dadd( -83.581, 175.208, -50.3456, 1.11 ) }
    dend_16 { pt3dadd( -83.5266, 176.231, -50.5063, 1.11 ) }
    dend_16 { pt3dadd( -83.4821, 178.241, -50.8466, 0.07 ) }
    dend_16 { pt3dadd( -83.4761, 179.158, -51.0108, 0.07 ) }
    dend_16 { pt3dadd( -83.4927, 180.078, -51.1956, 1.03 ) }
    dend_16 { pt3dadd( -83.5305, 180.911, -51.3964, 1.03 ) }
    dend_16 { pt3dadd( -83.6318, 182.574, -51.8488, 0.44 ) }
    dend_16 { pt3dadd( -83.7041, 183.502, -52.1269, 0.52 ) }
    dend_16 { pt3dadd( -83.8047, 184.687, -52.5133, 1.4 ) }
    dend_16 { pt3dadd( -83.9025, 186.062, -52.997, 0.15 ) }
    dend_16 { pt3dadd( -83.9588, 187.453, -53.4987, 0.37 ) }
    dend_16 { pt3dadd( -83.9497, 187.82, -53.6281, 0.37 ) }
    dend_16 { pt3dadd( -83.8848, 188.558, -53.8724, 0.37 ) }
    dend_16 { pt3dadd( -83.8085, 189.023, -54.0185, 0.37 ) }
    dend_16 { pt3dadd( -83.4723, 190.538, -54.4485, 0.52 ) }
    dend_16 { pt3dadd( -83.0957, 191.969, -54.796, 0.52 ) }
    dend_16 { pt3dadd( -82.6754, 193.453, -55.1142, 0.52 ) }
    dend_16 { pt3dadd( -82.3239, 194.722, -55.3745, 0.52 ) }
    dend_16 { pt3dadd( -81.9736, 195.988, -55.62, 0.52 ) }
    dend_16 { pt3dadd( -81.6561, 197.337, -55.9305, 0.81 ) }
    dend_16 { pt3dadd( -81.4181, 198.76, -56.3568, 0.29 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_12()
}

proc basic_shape_12() {
    dend_16 { pt3dadd( -81.3959, 199.259, -56.5786, 0.74 ) }
    dend_16 { pt3dadd( -81.4573, 200.012, -57.0114, 0.74 ) }
    dend_16 { pt3dadd( -81.6336, 201.062, -57.7286, 1.18 ) }
    dend_16 { pt3dadd( -82.0918, 202.912, -59.143, 0.44 ) }
    dend_16 { pt3dadd( -82.4918, 204.35, -60.3109, 0.74 ) }
    dend_16 { pt3dadd( -83.0417, 206.327, -61.9477, 0.74 ) }
    dend_16 { pt3dadd( -83.273, 207.333, -62.8289, 0.74 ) }
    dend_16 { pt3dadd( -83.5006, 208.642, -64.016, 1.25 ) }
    dend_16 { pt3dadd( -83.5969, 209.913, -65.259, 0.44 ) }
    dend_16 { pt3dadd( -83.5511, 210.612, -65.9518, 0.44 ) }
    dend_16 { pt3dadd( -83.4332, 211.237, -66.6723, 0.44 ) }
    dend_16 { pt3dadd( -82.9289, 213.043, -68.9663, 0.74 ) }
    dend_16 { pt3dadd( -82.7269, 213.618, -69.7664, 0.74 ) }
    dend_16 { pt3dadd( -82.2422, 214.877, -71.6061, 0.29 ) }
    dend_16 { pt3dadd( -82.1119, 215.211, -72.099, 0.74 ) }
    dend_16 { pt3dadd( -81.4428, 217.06, -74.7813, 0.29 ) }
    dend_16 { pt3dadd( -81.1733, 217.862, -75.871, 1.25 ) }
    dend_16 { pt3dadd( -80.707, 219.425, -77.7763, 0.15 ) }
    dend_16 { pt3dadd( -80.5788, 219.89, -78.3106, 0.15 ) }
    dend_16 { pt3dadd( -80.4656, 220.376, -78.8282, 0.15 ) }
    dend_16 { pt3dadd( -80.3767, 220.756, -79.2317, 0.15 ) }
    dend_16 { pt3dadd( -80.2439, 221.326, -79.7758, 0.15 ) }
    dend_16 { pt3dadd( -80.0194, 222.524, -81.0364, 1.25 ) }
    dend_16 { pt3dadd( -79.9933, 222.814, -81.3438, 1.25 ) }
    dend_16 { pt3dadd( -79.973, 224.236, -82.8696, 0.15 ) }
    dend_16 { pt3dadd( -80.0106, 224.5, -83.164, 0.15 ) }
    dend_16 { pt3dadd( -80.1183, 224.902, -83.6331, 0.15 ) }
    dend_16 { pt3dadd( -80.2711, 225.311, -84.0985, 0.15 ) }
    dend_16 { pt3dadd( -80.4166, 225.645, -84.5013, 0.15 ) }
    dend_16 { pt3dadd( -80.7491, 226.326, -85.3593, 1.4 ) }
    dend_16 { pt3dadd( -81.458, 227.625, -87.0158, 0.52 ) }
    dend_16 { pt3dadd( -81.9442, 228.437, -88.0635, 0.07 ) }
    dend_16 { pt3dadd( -82.6336, 229.438, -89.3759, 1.47 ) }
    dend_16 { pt3dadd( -83.8201, 230.938, -91.3091, 0.29 ) }
    dend_16 { pt3dadd( -84.1547, 231.326, -91.7747, 0.29 ) }
    dend_16 { pt3dadd( -84.5025, 231.705, -92.2261, 0.29 ) }
    dend_16 { pt3dadd( -85.0356, 232.263, -92.8428, 0.81 ) }
    dend_16 { pt3dadd( -86.6497, 233.853, -94.5021, 0.22 ) }
    dend_16 { pt3dadd( -87.2199, 234.392, -95.1156, 0.22 ) }
    dend_16 { pt3dadd( -87.8785, 235.028, -95.8222, 1.25 ) }
    dend_16 { pt3dadd( -89.4458, 236.602, -97.6064, 0.07 ) }
    dend_16 { pt3dadd( -90.0024, 237.199, -98.258, 0.07 ) }
    dend_16 { pt3dadd( -90.4795, 237.76, -98.8298, 0.52 ) }
    dend_16 { pt3dadd( -91.7983, 239.701, -100.686, 0.07 ) }
    dend_16 { pt3dadd( -92.4448, 240.855, -101.719, 0.07 ) }
    dend_16 { pt3dadd( -92.721, 241.442, -102.197, 0.74 ) }
    dend_16 { pt3dadd( -93.1163, 242.621, -102.937, 0.29 ) }
    dend_16 { pt3dadd( -93.3246, 243.449, -103.429, 1.11 ) }
    dend_16 { pt3dadd( -93.9698, 246.639, -105.209, 0.07 ) }
    dend_16 { pt3dadd( -94.1355, 247.746, -105.754, 0.07 ) }
    dend_16 { pt3dadd( -94.1928, 248.296, -106.041, 0.96 ) }
    dend_16 { pt3dadd( -94.4129, 251.336, -107.671, 0.07 ) }
    dend_16 { pt3dadd( -94.4666, 252.589, -108.353, 1.11 ) }
    // Section: dend_15, id: dend_15, parent: dend_14 (entry count 53/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -27.9001, 32.0634, -5.41357, 0.74 ) }
    dend_15 { pt3dadd( -28.1762, 34.3988, -7.5094, 0.74 ) }
    dend_15 { pt3dadd( -28.2552, 35.187, -8.11205, 0.74 ) }
    dend_15 { pt3dadd( -28.3085, 35.8941, -8.577, 0.74 ) }
    dend_15 { pt3dadd( -28.3452, 36.4327, -8.89326, 0.74 ) }
    dend_15 { pt3dadd( -28.4034, 37.3626, -9.39975, 0.74 ) }
    dend_15 { pt3dadd( -28.4615, 38.1586, -9.80276, 0.74 ) }
    dend_15 { pt3dadd( -28.5033, 38.8352, -10.034, 0.74 ) }
    dend_15 { pt3dadd( -28.6753, 39.967, -10.5655, 0.74 ) }
    dend_15 { pt3dadd( -28.8368, 40.7561, -11.0211, 0.74 ) }
    dend_15 { pt3dadd( -28.9812, 41.2769, -11.3589, 0.74 ) }
    dend_15 { pt3dadd( -29.2513, 42.1172, -11.9426, 0.74 ) }
    dend_15 { pt3dadd( -29.4562, 42.7254, -12.375, 0.74 ) }
    dend_15 { pt3dadd( -30.2808, 45.1466, -14.0592, 0.74 ) }
    dend_15 { pt3dadd( -30.4246, 45.5754, -14.3488, 0.74 ) }
    dend_15 { pt3dadd( -30.7692, 46.7045, -15.0524, 0.52 ) }
    dend_15 { pt3dadd( -31.0696, 47.8435, -15.6924, 0.88 ) }
    dend_15 { pt3dadd( -31.2795, 48.8365, -16.1819, 0.88 ) }
    dend_15 { pt3dadd( -31.5129, 50.119, -16.7098, 1.25 ) }
    dend_15 { pt3dadd( -31.6409, 50.8533, -16.9502, 1.25 ) }
    dend_15 { pt3dadd( -31.9554, 52.3904, -17.4625, 1.03 ) }
    dend_15 { pt3dadd( -32.1915, 53.4973, -17.8423, 1.03 ) }
    dend_15 { pt3dadd( -32.485, 54.7346, -18.2678, 1.03 ) }
    dend_15 { pt3dadd( -32.6703, 55.4173, -18.4995, 1.03 ) }
    dend_15 { pt3dadd( -33.2694, 56.9853, -19.2878, 0.81 ) }
    dend_15 { pt3dadd( -33.7418, 57.9778, -19.9406, 0.81 ) }
    dend_15 { pt3dadd( -34.1588, 58.775, -20.5166, 0.81 ) }
    dend_15 { pt3dadd( -34.896, 60.1788, -21.4834, 0.59 ) }
    dend_15 { pt3dadd( -35.1989, 60.7826, -21.8685, 0.59 ) }
    dend_15 { pt3dadd( -36.793, 64.4252, -23.9646, 0.59 ) }
    dend_15 { pt3dadd( -36.9704, 64.9142, -24.2069, 0.59 ) }
    dend_15 { pt3dadd( -37.5281, 66.8045, -24.9653, 0.59 ) }
    dend_15 { pt3dadd( -37.9032, 68.3929, -25.5741, 0.59 ) }
    dend_15 { pt3dadd( -38.0978, 69.5514, -25.9775, 0.88 ) }
    dend_15 { pt3dadd( -38.1907, 70.5591, -26.2917, 0.88 ) }
    dend_15 { pt3dadd( -38.2254, 71.8526, -26.6249, 0.52 ) }
    dend_15 { pt3dadd( -38.2521, 73.3902, -27.1712, 0.52 ) }
    dend_15 { pt3dadd( -38.283, 75.3419, -28.0868, 0.59 ) }
    dend_15 { pt3dadd( -38.2806, 75.7084, -28.2784, 0.59 ) }
    dend_15 { pt3dadd( -38.2377, 77.0868, -28.9864, 0.37 ) }
    dend_15 { pt3dadd( -38.1963, 78.1015, -29.4889, 1.25 ) }
    dend_15 { pt3dadd( -38.1424, 79.1507, -29.9834, 1.25 ) }
    dend_15 { pt3dadd( -38.0447, 80.7652, -30.6896, 0.52 ) }
    dend_15 { pt3dadd( -37.9514, 82.1551, -31.2367, 0.52 ) }
    dend_15 { pt3dadd( -37.8814, 83.583, -31.8068, 0.52 ) }
    dend_15 { pt3dadd( -37.8689, 84.3679, -32.1211, 0.52 ) }
    dend_15 { pt3dadd( -37.8792, 85.0683, -32.4614, 0.52 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_13()
}

proc basic_shape_13() {
    dend_15 { pt3dadd( -37.9193, 85.7373, -32.8401, 0.52 ) }
    dend_15 { pt3dadd( -38.0039, 86.5039, -33.3322, 1.33 ) }
    dend_15 { pt3dadd( -38.1548, 87.3062, -33.856, 1.33 ) }
    dend_15 { pt3dadd( -38.3397, 87.9921, -34.3253, 1.33 ) }
    dend_15 { pt3dadd( -38.9487, 89.9859, -35.689, 0.07 ) }
    dend_15 { pt3dadd( -39.1895, 90.7239, -36.171, 0.07 ) }
    dend_15 { pt3dadd( -39.5022, 91.6316, -36.7514, 1.11 ) }
    dend_15 { pt3dadd( -40.1624, 93.5764, -37.9368, 0.07 ) }
    dend_15 { pt3dadd( -40.6258, 95.0099, -38.7699, 0.07 ) }
    dend_15 { pt3dadd( -40.8606, 95.7902, -39.1898, 0.07 ) }
    dend_15 { pt3dadd( -41.0642, 96.6343, -39.5294, 0.52 ) }
    dend_15 { pt3dadd( -41.2649, 97.9622, -39.9841, 0.22 ) }
    dend_15 { pt3dadd( -41.3005, 99.05, -40.2372, 0.22 ) }
    dend_15 { pt3dadd( -41.2245, 99.9708, -40.3006, 0.22 ) }
    dend_15 { pt3dadd( -41.1551, 100.433, -40.283, 0.22 ) }
    dend_15 { pt3dadd( -40.7087, 102.587, -40.1227, 1.55 ) }
    dend_15 { pt3dadd( -40.4689, 103.483, -40.028, 1.55 ) }
    dend_15 { pt3dadd( -39.7814, 105.7, -39.7327, 0.29 ) }
    dend_15 { pt3dadd( -39.3058, 107.149, -39.5507, 0.88 ) }
    dend_15 { pt3dadd( -39.0506, 107.922, -39.48, 0.88 ) }
    dend_15 { pt3dadd( -38.6391, 109.218, -39.431, 0.22 ) }
    dend_15 { pt3dadd( -38.1735, 110.706, -39.4818, 0.59 ) }
    dend_15 { pt3dadd( -37.9608, 111.325, -39.5248, 0.59 ) }
    dend_15 { pt3dadd( -37.7538, 111.847, -39.5955, 0.59 ) }
    dend_15 { pt3dadd( -37.3997, 112.68, -39.7609, 0.59 ) }
    dend_15 { pt3dadd( -37.1827, 113.232, -39.855, 0.59 ) }
    dend_15 { pt3dadd( -36.6483, 114.799, -40.07, 1.03 ) }
    dend_15 { pt3dadd( -36.3606, 115.736, -40.1963, 1.03 ) }
    dend_15 { pt3dadd( -36.0248, 116.946, -40.3625, 1.03 ) }
    dend_15 { pt3dadd( -35.8431, 117.675, -40.4724, 0.07 ) }
    dend_15 { pt3dadd( -35.5564, 119.328, -40.7313, 0.07 ) }
    dend_15 { pt3dadd( -35.4645, 120.412, -40.9538, 0.29 ) }
    dend_15 { pt3dadd( -35.4745, 121.17, -41.1458, 0.81 ) }
    dend_15 { pt3dadd( -35.62, 122.884, -41.6087, 0.37 ) }
    dend_15 { pt3dadd( -35.7598, 123.818, -41.8857, 0.37 ) }
    dend_15 { pt3dadd( -36.0741, 125.496, -42.4555, 0.37 ) }
    dend_15 { pt3dadd( -36.2793, 126.602, -42.8531, 0.88 ) }
    dend_15 { pt3dadd( -36.3891, 127.173, -43.0936, 0.37 ) }
    dend_15 { pt3dadd( -36.4761, 127.632, -43.3008, 0.37 ) }
    dend_15 { pt3dadd( -36.6417, 128.524, -43.7265, 1.11 ) }
    dend_15 { pt3dadd( -36.7055, 129.02, -43.9749, 1.11 ) }
    dend_15 { pt3dadd( -36.7563, 130.491, -44.7303, 0.37 ) }
    dend_15 { pt3dadd( -36.789, 132.006, -45.5488, 0.37 ) }
    dend_15 { pt3dadd( -36.8275, 132.609, -45.915, 0.37 ) }
    dend_15 { pt3dadd( -36.8427, 132.834, -46.0991, 0.37 ) }
    dend_15 { pt3dadd( -36.8458, 133.055, -46.3192, 0.37 ) }
    dend_15 { pt3dadd( -36.7998, 133.684, -46.9959, 1.4 ) }
    dend_15 { pt3dadd( -36.6068, 134.794, -48.257, 0.07 ) }
    dend_15 { pt3dadd( -36.452, 135.378, -48.8642, 1.25 ) }
    dend_15 { pt3dadd( -35.8495, 137.085, -50.6142, 0.07 ) }
    dend_15 { pt3dadd( -35.5795, 137.739, -51.2578, 0.07 ) }
    dend_15 { pt3dadd( -35.0589, 138.855, -52.2655, 0.07 ) }
    dend_15 { pt3dadd( -34.7365, 139.476, -52.7669, 0.07 ) }
    dend_15 { pt3dadd( -34.3374, 140.201, -53.2691, 0.07 ) }
    dend_15 { pt3dadd( -33.8752, 141.114, -53.8182, 0.07 ) }
    dend_15 { pt3dadd( -33.5893, 141.788, -54.1476, 1.11 ) }
    dend_15 { pt3dadd( -33.047, 143.399, -54.8923, 0.07 ) }
    dend_15 { pt3dadd( -32.7248, 144.654, -55.4422, 0.07 ) }
    dend_15 { pt3dadd( -32.5716, 145.456, -55.7775, 1.55 ) }
    dend_15 { pt3dadd( -32.3623, 146.948, -56.3786, 0.07 ) }
    dend_15 { pt3dadd( -32.3247, 147.388, -56.5485, 0.07 ) }
    dend_15 { pt3dadd( -32.2879, 148.161, -56.8384, 0.07 ) }
    dend_15 { pt3dadd( -32.2898, 149.012, -57.1764, 0.07 ) }
    dend_15 { pt3dadd( -32.2869, 149.884, -57.4813, 0.44 ) }
    dend_15 { pt3dadd( -32.2775, 150.622, -57.7083, 0.44 ) }
    dend_15 { pt3dadd( -32.2595, 151.094, -57.8395, 0.44 ) }
    dend_15 { pt3dadd( -32.2244, 151.582, -57.9432, 1.33 ) }
    dend_15 { pt3dadd( -32.0747, 153.234, -58.229, 0.07 ) }
    dend_15 { pt3dadd( -31.9233, 154.795, -58.4986, 0.07 ) }
    dend_15 { pt3dadd( -31.8397, 155.622, -58.646, 0.07 ) }
    dend_15 { pt3dadd( -31.6732, 157.212, -58.9449, 1.62 ) }
    dend_15 { pt3dadd( -31.4485, 159.326, -59.3718, 0.07 ) }
    dend_15 { pt3dadd( -31.3896, 159.872, -59.4914, 0.07 ) }
    dend_15 { pt3dadd( -31.2843, 160.939, -59.7531, 0.29 ) }
    dend_15 { pt3dadd( -31.2302, 161.68, -59.9962, 0.29 ) }
    dend_15 { pt3dadd( -31.1718, 162.274, -60.2119, 0.29 ) }
    dend_15 { pt3dadd( -31.103, 162.922, -60.4726, 0.29 ) }
    dend_15 { pt3dadd( -31.0457, 163.433, -60.6981, 0.29 ) }
    dend_15 { pt3dadd( -30.9363, 164.449, -61.1884, 0.29 ) }
    dend_15 { pt3dadd( -30.8321, 165.319, -61.6367, 0.29 ) }
    dend_15 { pt3dadd( -30.6498, 166.718, -62.4184, 1.33 ) }
    dend_15 { pt3dadd( -30.4338, 168.052, -63.2109, 0.07 ) }
    dend_15 { pt3dadd( -30.2609, 169.031, -63.8131, 0.07 ) }
    dend_15 { pt3dadd( -30.0588, 170.205, -64.5375, 0.88 ) }
    dend_15 { pt3dadd( -29.8134, 171.696, -65.579, 0.07 ) }
    dend_15 { pt3dadd( -29.754, 172.142, -65.9129, 0.74 ) }
    dend_15 { pt3dadd( -29.6543, 173.367, -66.8516, 0.07 ) }
    dend_15 { pt3dadd( -29.6213, 173.941, -67.2832, 0.88 ) }
    dend_15 { pt3dadd( -29.5536, 175.142, -68.1661, 0.07 ) }
    dend_15 { pt3dadd( -29.4586, 176.423, -69.0476, 0.52 ) }
    dend_15 { pt3dadd( -29.3639, 177.398, -69.7513, 0.15 ) }
    dend_15 { pt3dadd( -29.2815, 178.24, -70.3762, 0.15 ) }
    dend_15 { pt3dadd( -29.2177, 178.915, -70.8919, 0.15 ) }
    dend_15 { pt3dadd( -29.0746, 179.937, -71.6783, 0.15 ) }
    dend_15 { pt3dadd( -28.8865, 180.862, -72.3601, 0.15 ) }
    dend_15 { pt3dadd( -28.6323, 181.873, -72.9655, 0.15 ) }
    // Section: dend_8, id: dend_8, parent: dend_6 (entry count 96/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 19.3449, -5.18285, 12.1183, 0.37 ) }
    dend_8 { pt3dadd( 18.9054, -8.48364, 14.664, 0.37 ) }
    dend_8 { pt3dadd( 18.7332, -9.38127, 15.1862, 0.37 ) }
    dend_8 { pt3dadd( 18.562, -10.0841, 15.5118, 0.59 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_14()
}

proc basic_shape_14() {
    dend_8 { pt3dadd( 18.2784, -11.028, 15.9098, 0.59 ) }
    dend_8 { pt3dadd( 17.9652, -11.9781, 16.2739, 0.59 ) }
    dend_8 { pt3dadd( 17.7703, -12.5869, 16.5226, 0.59 ) }
    dend_8 { pt3dadd( 17.4297, -13.756, 16.9748, 0.29 ) }
    dend_8 { pt3dadd( 17.2691, -14.5451, 17.3709, 0.59 ) }
    dend_8 { pt3dadd( 17.0644, -15.9861, 18.1925, 0.44 ) }
    dend_8 { pt3dadd( 16.9921, -16.9008, 18.7563, 0.44 ) }
    dend_8 { pt3dadd( 16.9988, -17.9876, 19.4379, 1.4 ) }
    dend_8 { pt3dadd( 17.196, -20.5634, 21.0387, 0.37 ) }
    dend_8 { pt3dadd( 17.3044, -21.6627, 21.6857, 0.37 ) }
    dend_8 { pt3dadd( 17.4155, -22.743, 22.2579, 0.37 ) }
    dend_8 { pt3dadd( 17.486, -23.4902, 22.5866, 0.37 ) }
    dend_8 { pt3dadd( 17.6222, -25.7174, 23.3793, 0.59 ) }
    dend_8 { pt3dadd( 17.6198, -26.6077, 23.6601, 0.59 ) }
    dend_8 { pt3dadd( 17.5519, -28.3285, 24.1536, 1.11 ) }
    dend_8 { pt3dadd( 17.497, -29.3995, 24.484, 0.88 ) }
    dend_8 { pt3dadd( 17.436, -30.8968, 24.951, 0.88 ) }
    dend_8 { pt3dadd( 17.3983, -31.8979, 25.2577, 0.88 ) }
    dend_8 { pt3dadd( 17.33, -34.1973, 25.9411, 1.33 ) }
    dend_8 { pt3dadd( 17.3651, -37.0104, 26.7604, 0.74 ) }
    dend_8 { pt3dadd( 17.4481, -38.1961, 27.1512, 0.74 ) }
    dend_8 { pt3dadd( 17.5338, -39.222, 27.5093, 0.74 ) }
    dend_8 { pt3dadd( 17.6256, -40.312, 27.8929, 0.74 ) }
    dend_8 { pt3dadd( 17.7173, -41.4598, 28.2683, 0.74 ) }
    dend_8 { pt3dadd( 17.835, -42.6682, 28.5959, 0.52 ) }
    dend_8 { pt3dadd( 17.9808, -44.4113, 29.1444, 0.22 ) }
    dend_8 { pt3dadd( 18.0871, -45.7354, 29.6209, 0.22 ) }
    dend_8 { pt3dadd( 18.1129, -46.696, 30.0175, 0.22 ) }
    dend_8 { pt3dadd( 18.0714, -47.5718, 30.4324, 0.22 ) }
    // Section: dend_7, id: dend_7, parent: dend_6 (entry count 29/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 19.3449, -5.18285, 12.1183, 0.59 ) }
    dend_7 { pt3dadd( 20.9554, -4.74521, 13.3873, 0.59 ) }
    dend_7 { pt3dadd( 21.5436, -4.64374, 13.8163, 0.81 ) }
    dend_7 { pt3dadd( 21.9097, -4.61511, 14.046, 0.81 ) }
    dend_7 { pt3dadd( 22.3154, -4.60578, 14.2676, 0.44 ) }
    dend_7 { pt3dadd( 23.6206, -4.60342, 14.8833, 0.74 ) }
    dend_7 { pt3dadd( 24.1169, -4.60689, 15.0853, 0.74 ) }
    dend_7 { pt3dadd( 24.3943, -4.63165, 15.158, 0.74 ) }
    dend_7 { pt3dadd( 25.089, -4.74531, 15.4075, 0.74 ) }
    dend_7 { pt3dadd( 25.4657, -4.82724, 15.5652, 0.74 ) }
    dend_7 { pt3dadd( 25.9467, -4.93919, 15.7704, 0.74 ) }
    dend_7 { pt3dadd( 26.4139, -5.02967, 15.9601, 0.74 ) }
    dend_7 { pt3dadd( 26.8413, -5.09309, 16.1684, 0.52 ) }
    dend_7 { pt3dadd( 28.0568, -5.19163, 16.7951, 0.07 ) }
    dend_7 { pt3dadd( 28.3002, -5.20608, 16.9275, 0.07 ) }
    dend_7 { pt3dadd( 28.9299, -5.25124, 17.2911, 0.74 ) }
    dend_7 { pt3dadd( 29.7052, -5.31829, 17.7309, 0.44 ) }
    dend_7 { pt3dadd( 29.9877, -5.32953, 17.8946, 0.44 ) }
    dend_7 { pt3dadd( 30.4547, -5.32511, 18.1308, 0.44 ) }
    dend_7 { pt3dadd( 30.788, -5.30283, 18.2721, 0.44 ) }
    dend_7 { pt3dadd( 31.3785, -5.30827, 18.5371, 0.44 ) }
    dend_7 { pt3dadd( 31.5891, -5.34073, 18.6375, 0.44 ) }
    dend_7 { pt3dadd( 32.5049, -5.58065, 19.0404, 0.66 ) }
    dend_7 { pt3dadd( 32.9112, -5.69217, 19.2239, 0.66 ) }
    dend_7 { pt3dadd( 33.3541, -5.7988, 19.4526, 0.66 ) }
    dend_7 { pt3dadd( 34.3432, -6.0282, 19.949, 0.29 ) }
    dend_7 { pt3dadd( 34.9065, -6.16211, 20.2104, 0.29 ) }
    dend_7 { pt3dadd( 35.555, -6.33031, 20.5066, 0.29 ) }
    dend_7 { pt3dadd( 36.3288, -6.56734, 20.8309, 0.52 ) }
    dend_7 { pt3dadd( 37.3512, -6.86047, 21.3362, 0.52 ) }
    // Section: dend_38, id: dend_38, parent: dend_28 (entry count 59/100)
    dend_38 { pt3dclear() }
    dend_38 { pt3dadd( 11.0016, 66.8771, 11.9317, 0.22 ) }
    dend_38 { pt3dadd( 11.8145, 67.8015, 11.5765, 0.22 ) }
    dend_38 { pt3dadd( 12.061, 68.1196, 11.4672, 0.22 ) }
    dend_38 { pt3dadd( 12.4246, 68.6711, 11.3097, 1.03 ) }
    dend_38 { pt3dadd( 12.7799, 69.2603, 11.1547, 1.03 ) }
    dend_38 { pt3dadd( 13.1369, 69.8632, 10.9907, 0.22 ) }
    dend_38 { pt3dadd( 13.3072, 70.1249, 10.904, 0.37 ) }
    dend_38 { pt3dadd( 13.6058, 70.5881, 10.6771, 0.37 ) }
    dend_38 { pt3dadd( 13.9225, 71.0958, 10.3989, 0.37 ) }
    dend_38 { pt3dadd( 14.1201, 71.4209, 10.2091, 0.37 ) }
    dend_38 { pt3dadd( 14.4383, 71.9146, 9.89303, 0.37 ) }
    dend_38 { pt3dadd( 14.8802, 72.6081, 9.45205, 0.37 ) }
    dend_38 { pt3dadd( 15.273, 73.1819, 9.06957, 1.18 ) }
    dend_38 { pt3dadd( 15.9782, 74.1683, 8.40147, 0.52 ) }
    dend_38 { pt3dadd( 16.3696, 74.7013, 8.04496, 0.81 ) }
    dend_38 { pt3dadd( 16.9175, 75.4447, 7.57201, 0.81 ) }
    dend_38 { pt3dadd( 17.2323, 75.8913, 7.3192, 0.81 ) }
    dend_38 { pt3dadd( 17.6687, 76.6037, 6.93645, 0.52 ) }
    dend_38 { pt3dadd( 17.9731, 77.0769, 6.67052, 0.66 ) }
    dend_38 { pt3dadd( 18.3425, 77.6405, 6.31619, 0.66 ) }
    dend_38 { pt3dadd( 18.7319, 78.2409, 5.92704, 0.66 ) }
    dend_38 { pt3dadd( 19.0744, 78.7282, 5.63215, 0.66 ) }
    dend_38 { pt3dadd( 19.9841, 79.9085, 4.94129, 0.66 ) }
    dend_38 { pt3dadd( 20.6534, 80.7335, 4.49137, 1.03 ) }
    dend_38 { pt3dadd( 20.9114, 81.0154, 4.354, 1.03 ) }
    dend_38 { pt3dadd( 21.8671, 81.9138, 3.95493, 0.44 ) }
    dend_38 { pt3dadd( 22.8832, 82.6611, 3.65546, 0.52 ) }
    dend_38 { pt3dadd( 23.2352, 82.8652, 3.5842, 0.52 ) }
    dend_38 { pt3dadd( 23.5329, 83.0157, 3.55612, 0.52 ) }
    dend_38 { pt3dadd( 24.3245, 83.4306, 3.49845, 0.52 ) }
    dend_38 { pt3dadd( 24.9389, 83.7236, 3.51795, 0.52 ) }
    dend_38 { pt3dadd( 25.7114, 84.0952, 3.5781, 0.29 ) }
    dend_38 { pt3dadd( 26.1449, 84.3139, 3.60142, 0.29 ) }
    dend_38 { pt3dadd( 27.2546, 84.8871, 3.67252, 0.29 ) }
    dend_38 { pt3dadd( 28.0001, 85.2987, 3.71814, 0.74 ) }
    dend_38 { pt3dadd( 29.6324, 86.3027, 3.81479, 0.81 ) }
    dend_38 { pt3dadd( 30.5367, 86.914, 3.87693, 0.07 ) }
    dend_38 { pt3dadd( 30.9729, 87.2292, 3.8857, 0.07 ) }
    dend_38 { pt3dadd( 31.2144, 87.4029, 3.86907, 0.07 ) }
    dend_38 { pt3dadd( 31.8321, 87.8789, 3.74402, 0.07 ) }
    dend_38 { pt3dadd( 32.1213, 88.125, 3.62167, 0.07 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_15()
}

proc basic_shape_15() {
    dend_38 { pt3dadd( 32.4016, 88.3665, 3.48984, 0.07 ) }
    dend_38 { pt3dadd( 32.9666, 88.8338, 3.31304, 0.07 ) }
    dend_38 { pt3dadd( 33.5417, 89.3054, 3.156, 0.07 ) }
    dend_38 { pt3dadd( 33.8255, 89.5232, 3.08713, 0.07 ) }
    dend_38 { pt3dadd( 34.5417, 90.0089, 2.9365, 0.07 ) }
    dend_38 { pt3dadd( 35.9641, 90.9056, 2.69694, 0.07 ) }
    dend_38 { pt3dadd( 36.8496, 91.4557, 2.63291, 0.07 ) }
    // Section: dend_29, id: dend_29, parent: dend_28 (entry count 7/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 11.0016, 66.8771, 11.9317, 0.96 ) }
    dend_29 { pt3dadd( 10.3544, 67.6357, 12.4442, 0.96 ) }
    dend_29 { pt3dadd( 9.55703, 68.6596, 13.0856, 0.96 ) }
    dend_29 { pt3dadd( 8.67501, 69.7922, 13.795, 0.66 ) }
    dend_29 { pt3dadd( 7.51106, 71.2868, 14.7312, 0.96 ) }
    dend_29 { pt3dadd( 6.63958, 72.4059, 15.4322, 0.96 ) }
    dend_29 { pt3dadd( 5.5573, 73.7957, 16.3027, 0.96 ) }
    dend_29 { pt3dadd( 5.12274, 74.4335, 16.6628, 0.96 ) }
    // Section: dend_27, id: dend_27, parent: dend_23 (entry count 15/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( 97.225, 119.477, -15.1524, 0.37 ) }
    dend_27 { pt3dadd( 97.5825, 121.114, -13.5372, 0.37 ) }
    dend_27 { pt3dadd( 97.7123, 121.744, -12.9777, 0.37 ) }
    dend_27 { pt3dadd( 97.8531, 122.333, -12.523, 0.37 ) }
    dend_27 { pt3dadd( 98.3617, 124.036, -11.5073, 0.37 ) }
    dend_27 { pt3dadd( 98.6418, 124.958, -11.0644, 0.37 ) }
    dend_27 { pt3dadd( 98.7743, 125.37, -10.8817, 0.37 ) }
    dend_27 { pt3dadd( 99.0357, 126.062, -10.6831, 0.66 ) }
    dend_27 { pt3dadd( 99.3975, 126.908, -10.4959, 0.66 ) }
    dend_27 { pt3dadd( 100.161, 128.5, -10.2714, 0.07 ) }
    dend_27 { pt3dadd( 100.666, 129.462, -10.2262, 0.07 ) }
    dend_27 { pt3dadd( 101.551, 130.985, -10.1948, 0.59 ) }
    dend_27 { pt3dadd( 102.558, 132.621, -10.198, 0.29 ) }
    dend_27 { pt3dadd( 102.944, 133.261, -10.2019, 0.29 ) }
    dend_27 { pt3dadd( 103.398, 134.031, -10.2143, 0.29 ) }
    dend_27 { pt3dadd( 103.971, 135.013, -10.2572, 0.29 ) }
    dend_27 { pt3dadd( 104.356, 135.731, -10.3074, 0.29 ) }
    dend_27 { pt3dadd( 104.641, 136.38, -10.3601, 0.29 ) }
    dend_27 { pt3dadd( 104.969, 137.392, -10.3959, 0.29 ) }
    dend_27 { pt3dadd( 105.321, 138.756, -10.4084, 0.29 ) }
    dend_27 { pt3dadd( 105.515, 139.679, -10.3989, 0.29 ) }
    dend_27 { pt3dadd( 105.818, 141.327, -10.3661, 0.66 ) }
    dend_27 { pt3dadd( 106.022, 142.419, -10.3494, 0.66 ) }
    dend_27 { pt3dadd( 106.261, 143.675, -10.3877, 0.07 ) }
    dend_27 { pt3dadd( 106.458, 144.662, -10.4553, 0.07 ) }
    dend_27 { pt3dadd( 106.635, 145.623, -10.5608, 0.07 ) }
    dend_27 { pt3dadd( 106.753, 146.259, -10.6542, 0.07 ) }
    dend_27 { pt3dadd( 106.877, 146.957, -10.7814, 0.07 ) }
    dend_27 { pt3dadd( 107.201, 149.215, -11.337, 0.59 ) }
    dend_27 { pt3dadd( 107.332, 150.346, -11.7651, 0.59 ) }
    dend_27 { pt3dadd( 107.402, 151.228, -12.1978, 0.07 ) }
    dend_27 { pt3dadd( 107.431, 151.779, -12.5004, 0.07 ) }
    dend_27 { pt3dadd( 107.443, 152.396, -12.876, 0.07 ) }
    dend_27 { pt3dadd( 107.406, 153.714, -13.8078, 0.07 ) }
    dend_27 { pt3dadd( 107.275, 155.167, -15.2144, 0.07 ) }
    dend_27 { pt3dadd( 107.216, 155.528, -15.6721, 0.07 ) }
    // Section: dend_24, id: dend_24, parent: dend_23 (entry count 51/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 97.225, 119.477, -15.1524, 0.22 ) }
    dend_24 { pt3dadd( 98.58, 119.807, -15.6226, 0.22 ) }
    dend_24 { pt3dadd( 99.2559, 120.058, -15.8569, 0.22 ) }
    dend_24 { pt3dadd( 99.8343, 120.286, -16.058, 0.44 ) }
    dend_24 { pt3dadd( 101.211, 120.779, -16.5397, 0.44 ) }
    dend_24 { pt3dadd( 101.85, 120.975, -16.8174, 0.44 ) }
    dend_24 { pt3dadd( 102.952, 121.289, -17.3323, 0.44 ) }
    dend_24 { pt3dadd( 103.856, 121.534, -17.7804, 0.74 ) }
    dend_24 { pt3dadd( 104.786, 121.802, -18.2516, 0.74 ) }
    dend_24 { pt3dadd( 105.917, 122.135, -18.828, 0.74 ) }
    dend_24 { pt3dadd( 108.097, 122.771, -19.9439, 0.74 ) }
    dend_24 { pt3dadd( 109.218, 123.113, -20.5907, 0.37 ) }
    dend_24 { pt3dadd( 110.446, 123.541, -21.3667, 0.37 ) }
    dend_24 { pt3dadd( 111.141, 123.877, -21.8737, 0.37 ) }
    dend_24 { pt3dadd( 111.927, 124.433, -22.53, 0.37 ) }
    dend_24 { pt3dadd( 112.263, 124.78, -22.8551, 0.37 ) }
    dend_24 { pt3dadd( 113.319, 126.418, -24.0277, 1.11 ) }
    dend_24 { pt3dadd( 113.702, 127.203, -24.5253, 1.11 ) }
    dend_24 { pt3dadd( 114.251, 128.419, -25.2544, 0.52 ) }
    dend_24 { pt3dadd( 114.652, 129.269, -25.7519, 0.52 ) }
    dend_24 { pt3dadd( 114.847, 129.705, -25.9923, 0.52 ) }
    dend_24 { pt3dadd( 115.322, 130.702, -26.5026, 0.81 ) }
    dend_24 { pt3dadd( 116.088, 132.026, -27.0616, 1.25 ) }
    dend_24 { pt3dadd( 116.866, 133.192, -27.5809, 0.22 ) }
    dend_24 { pt3dadd( 117.231, 133.626, -27.7745, 1.18 ) }
    // Section: dend_22, id: dend_22, parent: dend_20 (entry count 76/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( 0.373636, 140.129, -6.82588, 0.07 ) }
    dend_22 { pt3dadd( -0.704899, 143.415, 1.65342, 0.07 ) }
    dend_22 { pt3dadd( -0.871203, 143.934, 2.74745, 0.44 ) }
    dend_22 { pt3dadd( -1.14424, 144.754, 4.04237, 0.07 ) }
    dend_22 { pt3dadd( -1.48541, 145.77, 5.3919, 0.88 ) }
    dend_22 { pt3dadd( -2.1185, 147.63, 7.54315, 0.07 ) }
    dend_22 { pt3dadd( -2.39593, 148.42, 8.35534, 0.07 ) }
    dend_22 { pt3dadd( -2.69352, 149.232, 8.82394, 0.81 ) }
    dend_22 { pt3dadd( -3.5042, 151.586, 10.0295, 0.07 ) }
    dend_22 { pt3dadd( -3.96721, 152.932, 10.5878, 0.74 ) }
    dend_22 { pt3dadd( -4.35356, 154.023, 10.936, 0.22 ) }
    dend_22 { pt3dadd( -4.79538, 155.218, 11.2531, 0.22 ) }
    dend_22 { pt3dadd( -4.9894, 155.744, 11.3862, 1.18 ) }
    dend_22 { pt3dadd( -5.63978, 157.572, 11.8104, 0.07 ) }
    dend_22 { pt3dadd( -6.58036, 160.535, 12.3891, 0.22 ) }
    dend_22 { pt3dadd( -6.91797, 161.734, 12.5761, 0.22 ) }
    dend_22 { pt3dadd( -7.30688, 163.274, 12.8163, 0.22 ) }
    dend_22 { pt3dadd( -7.42986, 163.802, 12.9, 0.22 ) }
    dend_22 { pt3dadd( -7.70052, 164.949, 13.0357, 1.18 ) }
    dend_22 { pt3dadd( -8.21985, 167.234, 13.2059, 0.07 ) }
    dend_22 { pt3dadd( -8.45014, 168.293, 13.2396, 0.07 ) }
    dend_22 { pt3dadd( -8.58574, 168.869, 13.2465, 0.07 ) }
    dend_22 { pt3dadd( -8.78707, 169.757, 13.2402, 1.25 ) }
    dend_22 { pt3dadd( -9.39944, 172.256, 13.2207, 0.29 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_16()
}

proc basic_shape_16() {
    dend_22 { pt3dadd( -9.64745, 173.228, 13.2132, 0.29 ) }
    dend_22 { pt3dadd( -9.81302, 173.835, 13.2183, 0.59 ) }
    dend_22 { pt3dadd( -10.2572, 175.432, 13.2654, 0.07 ) }
    dend_22 { pt3dadd( -10.4863, 176.302, 13.31, 0.44 ) }
    dend_22 { pt3dadd( -10.9454, 178.034, 13.4681, 0.22 ) }
    dend_22 { pt3dadd( -11.2602, 179.152, 13.6564, 0.66 ) }
    dend_22 { pt3dadd( -11.9269, 181.32, 14.0726, 0.07 ) }
    dend_22 { pt3dadd( -12.1861, 182.164, 14.2447, 0.07 ) }
    dend_22 { pt3dadd( -12.6451, 183.736, 14.5741, 0.52 ) }
    dend_22 { pt3dadd( -13.1394, 185.619, 15.0002, 0.22 ) }
    dend_22 { pt3dadd( -13.5903, 187.689, 15.4881, 0.81 ) }
    dend_22 { pt3dadd( -13.7407, 188.814, 15.7466, 0.81 ) }
    dend_22 { pt3dadd( -13.8202, 190.482, 16.1061, 0.22 ) }
    dend_22 { pt3dadd( -13.7989, 191.628, 16.3297, 0.22 ) }
    dend_22 { pt3dadd( -13.6435, 193.233, 16.5968, 0.81 ) }
    dend_22 { pt3dadd( -13.5174, 194.224, 16.7369, 0.81 ) }
    dend_22 { pt3dadd( -13.3328, 196.326, 16.9942, 0.29 ) }
    dend_22 { pt3dadd( -13.2848, 198.209, 17.2335, 0.29 ) }
    dend_22 { pt3dadd( -13.3381, 199.462, 17.398, 0.29 ) }
    dend_22 { pt3dadd( -13.5992, 201.647, 17.6953, 0.29 ) }
    dend_22 { pt3dadd( -13.9366, 203.389, 17.9352, 1.11 ) }
    dend_22 { pt3dadd( -14.7674, 206.613, 18.4216, 0.07 ) }
    dend_22 { pt3dadd( -15.2952, 208.247, 18.6896, 0.07 ) }
    dend_22 { pt3dadd( -15.8733, 209.82, 18.9623, 0.44 ) }
    dend_22 { pt3dadd( -16.3944, 211.01, 19.186, 0.44 ) }
    dend_22 { pt3dadd( -16.811, 211.789, 19.3472, 0.44 ) }
    dend_22 { pt3dadd( -17.9888, 213.786, 19.7027, 0.37 ) }
    dend_22 { pt3dadd( -18.098, 213.935, 19.7364, 0.81 ) }
    dend_22 { pt3dadd( -18.748, 214.721, 20.0251, 0.29 ) }
    dend_22 { pt3dadd( -19.3956, 215.448, 20.4429, 0.29 ) }
    dend_22 { pt3dadd( -20.2052, 216.329, 21.0988, 0.29 ) }
    dend_22 { pt3dadd( -21.0177, 217.153, 21.8354, 0.74 ) }
    dend_22 { pt3dadd( -22.6155, 218.838, 23.4551, 0.07 ) }
    dend_22 { pt3dadd( -23.645, 220.1, 24.6318, 0.59 ) }
    dend_22 { pt3dadd( -24.279, 221.131, 25.6978, 0.07 ) }
    dend_22 { pt3dadd( -24.5597, 221.753, 26.3572, 0.07 ) }
    dend_22 { pt3dadd( -24.9736, 223.119, 27.7739, 0.66 ) }
    dend_22 { pt3dadd( -25.15, 224.149, 28.8243, 0.15 ) }
    dend_22 { pt3dadd( -25.1849, 224.832, 29.4488, 0.66 ) }
    dend_22 { pt3dadd( -25.1112, 228.289, 32.2511, 0.07 ) }
    dend_22 { pt3dadd( -25.0449, 228.904, 32.7531, 0.07 ) }
    dend_22 { pt3dadd( -24.8605, 229.948, 33.5948, 0.44 ) }
    dend_22 { pt3dadd( -24.5888, 231.359, 34.6366, 0.44 ) }
    dend_22 { pt3dadd( -24.5128, 231.991, 35.0277, 0.44 ) }
    dend_22 { pt3dadd( -24.563, 233.276, 35.5407, 1.11 ) }
    dend_22 { pt3dadd( -24.987, 234.775, 35.7063, 0.07 ) }
    dend_22 { pt3dadd( -25.7162, 236.246, 35.7827, 0.07 ) }
    dend_22 { pt3dadd( -26.8679, 238.071, 35.7794, 0.37 ) }
    dend_22 { pt3dadd( -27.8481, 239.426, 35.6984, 0.37 ) }
    dend_22 { pt3dadd( -28.9844, 240.856, 35.4984, 0.07 ) }
    dend_22 { pt3dadd( -30.0775, 242.089, 35.2663, 0.07 ) }
    dend_22 { pt3dadd( -31.2435, 243.293, 34.9385, 0.07 ) }
    dend_22 { pt3dadd( -32.5644, 244.52, 34.4938, 0.37 ) }
    dend_22 { pt3dadd( -33.428, 245.288, 34.2015, 0.37 ) }
    dend_22 { pt3dadd( -35.3127, 246.834, 33.5459, 0.37 ) }
    dend_22 { pt3dadd( -36.3773, 247.597, 33.1609, 0.07 ) }
    dend_22 { pt3dadd( -38.0946, 248.689, 32.5579, 0.07 ) }
    dend_22 { pt3dadd( -40.029, 249.775, 31.9738, 0.07 ) }
    dend_22 { pt3dadd( -41.6345, 250.583, 31.6341, 0.07 ) }
    dend_22 { pt3dadd( -43.19, 251.332, 31.3849, 0.37 ) }
    dend_22 { pt3dadd( -44.899, 252.124, 31.272, 0.07 ) }
    dend_22 { pt3dadd( -45.5813, 252.443, 31.2683, 0.07 ) }
    dend_22 { pt3dadd( -47.0047, 253.098, 31.4752, 0.07 ) }
    dend_22 { pt3dadd( -48.5011, 253.786, 31.8968, 0.07 ) }
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 64/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 0.373636, 140.129, -6.82588, 0.07 ) }
    dend_21 { pt3dadd( -0.3684, 141.464, -6.56155, 0.07 ) }
    dend_21 { pt3dadd( -0.835552, 142.362, -6.38123, 0.07 ) }
    dend_21 { pt3dadd( -1.13113, 142.941, -6.30944, 0.07 ) }
    dend_21 { pt3dadd( -1.46225, 143.634, -6.24912, 0.07 ) }
    dend_21 { pt3dadd( -1.81703, 144.404, -6.2278, 0.07 ) }
    dend_21 { pt3dadd( -2.51688, 145.995, -6.23198, 1.03 ) }
    dend_21 { pt3dadd( -2.60549, 146.211, -6.23892, 1.03 ) }
    dend_21 { pt3dadd( -3.16826, 147.755, -6.34984, 0.07 ) }
    dend_21 { pt3dadd( -3.49701, 148.806, -6.45529, 0.66 ) }
    dend_21 { pt3dadd( -3.83723, 150.122, -6.61598, 0.15 ) }
    dend_21 { pt3dadd( -3.91932, 150.565, -6.67575, 0.74 ) }
    dend_21 { pt3dadd( -3.96092, 151.192, -6.76261, 0.74 ) }
    dend_21 { pt3dadd( -3.91825, 151.752, -6.84687, 0.74 ) }
    dend_21 { pt3dadd( -3.75671, 152.471, -6.9575, 0.07 ) }
    dend_21 { pt3dadd( -3.52211, 153.161, -7.08491, 0.07 ) }
    dend_21 { pt3dadd( -3.10057, 154.123, -7.27624, 0.07 ) }
    dend_21 { pt3dadd( -2.47341, 155.261, -7.5549, 0.07 ) }
    dend_21 { pt3dadd( -1.39351, 156.874, -8.0204, 0.07 ) }
    dend_21 { pt3dadd( -1.08937, 157.277, -8.18048, 0.07 ) }
    dend_21 { pt3dadd( -0.592788, 157.87, -8.46903, 1.11 ) }
    dend_21 { pt3dadd( -0.35707, 158.12, -8.61308, 1.11 ) }
    dend_21 { pt3dadd( 0.778638, 159.173, -9.32779, 0.07 ) }
    dend_21 { pt3dadd( 1.46744, 159.743, -9.76519, 1.03 ) }
    dend_21 { pt3dadd( 3.11016, 161.01, -10.7651, 0.07 ) }
    dend_21 { pt3dadd( 3.52213, 161.346, -11.0146, 0.52 ) }
    dend_21 { pt3dadd( 4.02126, 161.801, -11.3094, 0.52 ) }
    dend_21 { pt3dadd( 4.3816, 162.2, -11.5494, 0.52 ) }
    dend_21 { pt3dadd( 4.6133, 162.494, -11.7146, 0.52 ) }
    dend_21 { pt3dadd( 5.38988, 163.553, -12.2546, 0.07 ) }
    dend_21 { pt3dadd( 5.89393, 164.275, -12.5747, 0.07 ) }
    dend_21 { pt3dadd( 6.46566, 165.146, -12.9508, 1.69 ) }
    dend_21 { pt3dadd( 7.8611, 167.426, -13.8812, 0.07 ) }
    dend_21 { pt3dadd( 8.22819, 168.11, -14.1949, 0.07 ) }
    dend_21 { pt3dadd( 8.50252, 168.679, -14.4763, 0.07 ) }
    dend_21 { pt3dadd( 8.7246, 169.229, -14.7514, 0.07 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_17()
}

proc basic_shape_17() {
    dend_21 { pt3dadd( 8.92987, 169.846, -15.0477, 0.07 ) }
    dend_21 { pt3dadd( 9.13022, 170.749, -15.4537, 1.11 ) }
    dend_21 { pt3dadd( 9.34042, 173.104, -16.3217, 0.07 ) }
    dend_21 { pt3dadd( 9.33656, 173.802, -16.5662, 0.07 ) }
    dend_21 { pt3dadd( 9.25376, 174.996, -17.0082, 0.07 ) }
    dend_21 { pt3dadd( 9.16767, 175.69, -17.2624, 0.59 ) }
    dend_21 { pt3dadd( 8.9676, 176.867, -17.6784, 0.07 ) }
    dend_21 { pt3dadd( 8.82033, 177.502, -17.8995, 0.66 ) }
    dend_21 { pt3dadd( 8.60334, 178.181, -18.1633, 0.07 ) }
    dend_21 { pt3dadd( 8.17656, 179.243, -18.6738, 0.66 ) }
    dend_21 { pt3dadd( 7.87389, 179.915, -19.0408, 0.07 ) }
    dend_21 { pt3dadd( 7.79784, 180.08, -19.1393, 0.07 ) }
    dend_21 { pt3dadd( 7.32876, 181.073, -19.745, 1.18 ) }
    dend_21 { pt3dadd( 6.46691, 182.967, -20.8956, 0.22 ) }
    dend_21 { pt3dadd( 6.21138, 183.58, -21.3033, 0.22 ) }
    dend_21 { pt3dadd( 6.06612, 184.009, -21.665, 0.22 ) }
    dend_21 { pt3dadd( 5.82774, 185.037, -22.6752, 0.22 ) }
    dend_21 { pt3dadd( 5.78453, 185.325, -23.0097, 0.22 ) }
    dend_21 { pt3dadd( 5.79313, 185.768, -23.5846, 1.33 ) }
    dend_21 { pt3dadd( 6.06478, 187.108, -25.4396, 1.03 ) }
    dend_21 { pt3dadd( 6.58915, 188.791, -27.7964, 0.29 ) }
    dend_21 { pt3dadd( 6.73882, 189.186, -28.371, 1.18 ) }
    dend_21 { pt3dadd( 7.15551, 190.177, -29.6886, 0.07 ) }
    dend_21 { pt3dadd( 7.5536, 191.121, -30.7814, 0.07 ) }
    dend_21 { pt3dadd( 7.88922, 191.962, -31.5692, 0.07 ) }
    dend_21 { pt3dadd( 8.1834, 192.718, -32.0269, 1.25 ) }
    dend_21 { pt3dadd( 8.47885, 193.714, -32.328, 0.44 ) }
    dend_21 { pt3dadd( 8.86368, 195.519, -32.6362, 0.44 ) }
    dend_21 { pt3dadd( 9.01333, 196.538, -32.6782, 0.44 ) }
    dend_21 { pt3dadd( 9.02692, 197.148, -32.6574, 1.18 ) }
    dend_21 { pt3dadd( 9.00065, 197.607, -32.6109, 0.07 ) }
    dend_21 { pt3dadd( 8.87101, 199.183, -32.3686, 0.07 ) }
    dend_21 { pt3dadd( 8.8305, 199.632, -32.2734, 0.66 ) }
    dend_21 { pt3dadd( 8.81933, 199.745, -32.2507, 0.07 ) }
    dend_21 { pt3dadd( 8.73004, 200.944, -32.0493, 0.07 ) }
    dend_21 { pt3dadd( 8.69146, 201.835, -31.9267, 1.03 ) }
    dend_21 { pt3dadd( 8.67768, 202.245, -31.8843, 1.03 ) }
    dend_21 { pt3dadd( 8.67647, 202.372, -31.8721, 0.29 ) }
    dend_21 { pt3dadd( 8.66909, 203.238, -31.8299, 0.29 ) }
    dend_21 { pt3dadd( 8.66629, 203.859, -31.8209, 0.81 ) }
    dend_21 { pt3dadd( 8.66605, 203.975, -31.8228, 0.15 ) }
    dend_21 { pt3dadd( 8.65818, 204.784, -31.8392, 0.15 ) }
    dend_21 { pt3dadd( 8.64024, 205.774, -31.8205, 0.15 ) }
    dend_21 { pt3dadd( 8.60189, 206.841, -31.8409, 0.96 ) }
    dend_21 { pt3dadd( 8.60189, 206.841, -31.8409, 0.07 ) }
    dend_21 { pt3dadd( 8.62447, 208.081, -31.9678, 0.07 ) }
    dend_21 { pt3dadd( 8.65503, 208.6, -32.0365, 0.07 ) }
    dend_21 { pt3dadd( 8.70368, 209.245, -32.2036, 0.88 ) }
    dend_21 { pt3dadd( 8.83173, 210.298, -32.5705, 0.15 ) }
    dend_21 { pt3dadd( 8.95755, 211.245, -32.9546, 0.15 ) }
    dend_21 { pt3dadd( 9.06531, 212.063, -33.3519, 0.15 ) }
    dend_21 { pt3dadd( 9.11568, 212.42, -33.5586, 1.11 ) }
    dend_21 { pt3dadd( 9.29395, 213.661, -34.3422, 0.07 ) }
    dend_21 { pt3dadd( 9.4671, 214.87, -35.144, 0.07 ) }
    dend_21 { pt3dadd( 9.50364, 215.1, -35.2767, 0.07 ) }
    dend_21 { pt3dadd( 9.55063, 215.628, -35.6419, 0.59 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 56/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 18.0714, -47.5718, 30.4324, 0.07 ) }
    dend_10 { pt3dadd( 17.383, -47.5534, 30.6942, 0.07 ) }
    dend_10 { pt3dadd( 17.0007, -47.5432, 30.8396, 0.07 ) }
    dend_10 { pt3dadd( 16.2276, -47.5225, 31.1336, 1.84 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 60/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 18.0714, -47.5718, 30.4324, 0.22 ) }
    dend_9 { pt3dadd( 18.4529, -47.5065, 30.7662, 0.22 ) }
    dend_9 { pt3dadd( 19.063, -47.402, 31.3, 0.22 ) }
    dend_9 { pt3dadd( 20.1254, -47.2201, 32.2294, 1.33 ) }
    // Section: dend_37, id: dend_37, parent: dend_29 (entry count 64/100)
    dend_37 { pt3dclear() }
    dend_37 { pt3dadd( 5.12274, 74.4335, 16.6628, 0.15 ) }
    dend_37 { pt3dadd( 3.92144, 73.8579, 17.9524, 0.15 ) }
    dend_37 { pt3dadd( 3.12045, 73.4761, 18.7269, 0.15 ) }
    dend_37 { pt3dadd( 2.49804, 73.2081, 19.3118, 0.15 ) }
    dend_37 { pt3dadd( 1.73792, 72.936, 19.9693, 0.15 ) }
    dend_37 { pt3dadd( 1.12131, 72.7364, 20.4843, 0.15 ) }
    dend_37 { pt3dadd( -0.0110244, 72.3487, 21.5226, 0.15 ) }
    dend_37 { pt3dadd( -1.33947, 71.9231, 22.7613, 0.15 ) }
    dend_37 { pt3dadd( -1.98271, 71.7534, 23.4088, 0.15 ) }
    dend_37 { pt3dadd( -3.09933, 71.5557, 24.6266, 0.15 ) }
    dend_37 { pt3dadd( -3.58805, 71.5088, 25.2359, 0.15 ) }
    dend_37 { pt3dadd( -4.71297, 71.4451, 26.8204, 0.15 ) }
    dend_37 { pt3dadd( -5.51005, 71.4084, 28.0944, 0.15 ) }
    dend_37 { pt3dadd( -6.01032, 71.388, 28.8973, 0.15 ) }
    dend_37 { pt3dadd( -6.87066, 71.3123, 30.251, 0.15 ) }
    dend_37 { pt3dadd( -7.52135, 71.2235, 31.2261, 0.15 ) }
    dend_37 { pt3dadd( -8.30895, 71.117, 32.2127, 0.15 ) }
    dend_37 { pt3dadd( -9.05641, 71.0002, 32.9928, 0.15 ) }
    dend_37 { pt3dadd( -9.97595, 70.7793, 33.9469, 0.15 ) }
    dend_37 { pt3dadd( -10.6383, 70.5966, 34.6324, 0.15 ) }
    dend_37 { pt3dadd( -11.3007, 70.4097, 35.3092, 0.15 ) }
    dend_37 { pt3dadd( -12.6248, 70.0643, 36.5751, 0.15 ) }
    dend_37 { pt3dadd( -13.0964, 69.9463, 37.0241, 0.15 ) }
    dend_37 { pt3dadd( -14.6033, 69.5456, 38.4654, 0.15 ) }
    dend_37 { pt3dadd( -15.9565, 69.1563, 39.7812, 0.15 ) }
    dend_37 { pt3dadd( -17.2908, 68.7646, 41.0717, 0.15 ) }
    dend_37 { pt3dadd( -18.2263, 68.4659, 41.9816, 0.15 ) }
    dend_37 { pt3dadd( -19.1137, 68.1277, 42.8338, 0.15 ) }
    dend_37 { pt3dadd( -19.555, 67.9467, 43.2417, 0.15 ) }
    dend_37 { pt3dadd( -20.4632, 67.5497, 44.0165, 0.15 ) }
    dend_37 { pt3dadd( -20.9239, 67.3147, 44.4106, 0.15 ) }
    dend_37 { pt3dadd( -21.5979, 66.9239, 45.0217, 0.15 ) }
    dend_37 { pt3dadd( -22.5396, 66.3202, 45.9907, 0.15 ) }
    dend_37 { pt3dadd( -22.9434, 66.0439, 46.4044, 0.15 ) }
    // Section: dend_30, id: dend_30, parent: dend_29 (entry count 98/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( 5.12274, 74.4335, 16.6628, 0.74 ) }
    dend_30 { pt3dadd( 4.00617, 75.369, 17.1761, 0.74 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_18()
}

proc basic_shape_18() {
    dend_30 { pt3dadd( 3.67292, 75.6973, 17.362, 0.74 ) }
    dend_30 { pt3dadd( 2.7767, 76.6955, 17.9466, 0.74 ) }
    dend_30 { pt3dadd( 1.92082, 78.061, 18.9306, 1.03 ) }
    dend_30 { pt3dadd( 1.54766, 78.7416, 19.4929, 0.66 ) }
    dend_30 { pt3dadd( 1.03061, 79.8341, 20.3977, 1.03 ) }
    dend_30 { pt3dadd( 0.560023, 80.7076, 21.2025, 1.33 ) }
    dend_30 { pt3dadd( 0.12475, 81.756, 22.1131, 1.03 ) }
    dend_30 { pt3dadd( -0.528738, 84.1014, 23.9765, 0.96 ) }
    dend_30 { pt3dadd( -0.682911, 85.22, 24.8046, 0.96 ) }
    dend_30 { pt3dadd( -0.750881, 86.785, 25.8276, 0.74 ) }
    dend_30 { pt3dadd( -0.408059, 91.3061, 28.3417, 0.74 ) }
    dend_30 { pt3dadd( 0.529782, 96.1169, 30.4151, 0.74 ) }
    dend_30 { pt3dadd( 0.885646, 97.3307, 30.7663, 0.74 ) }
    dend_30 { pt3dadd( 1.46061, 98.933, 30.9674, 0.74 ) }
    dend_30 { pt3dadd( 1.8795, 99.8352, 31.0136, 0.74 ) }
    dend_30 { pt3dadd( 2.61146, 101.23, 31.0268, 0.74 ) }
    dend_30 { pt3dadd( 3.38215, 102.49, 30.9753, 0.81 ) }
    dend_30 { pt3dadd( 3.52422, 102.881, 31.0329, 0.81 ) }
    dend_30 { pt3dadd( 3.8751, 103.862, 31.1511, 0.81 ) }
    dend_30 { pt3dadd( 4.13586, 104.862, 31.243, 0.81 ) }
    dend_30 { pt3dadd( 4.34937, 106.09, 31.3893, 1.18 ) }
    // Section: dend_26, id: dend_26, parent: dend_24 (entry count 21/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 117.231, 133.626, -27.7745, 0.44 ) }
    dend_26 { pt3dadd( 118.612, 135.046, -28.6091, 0.44 ) }
    dend_26 { pt3dadd( 119.229, 135.712, -28.9766, 0.44 ) }
    dend_26 { pt3dadd( 119.358, 135.862, -29.0501, 0.44 ) }
    dend_26 { pt3dadd( 120.482, 137.232, -29.6758, 1.4 ) }
    dend_26 { pt3dadd( 121.244, 138.212, -30.0823, 0.29 ) }
    dend_26 { pt3dadd( 121.644, 138.727, -30.2874, 0.29 ) }
    dend_26 { pt3dadd( 122.002, 139.158, -30.4163, 0.29 ) }
    dend_26 { pt3dadd( 122.79, 140.096, -30.5974, 0.29 ) }
    dend_26 { pt3dadd( 122.997, 140.337, -30.6246, 0.29 ) }
    dend_26 { pt3dadd( 123.758, 141.231, -30.6529, 1.33 ) }
    dend_26 { pt3dadd( 124.317, 141.862, -30.6606, 1.33 ) }
    dend_26 { pt3dadd( 126.005, 143.683, -30.6572, 0.22 ) }
    dend_26 { pt3dadd( 126.554, 144.236, -30.6492, 0.22 ) }
    dend_26 { pt3dadd( 127.374, 145.011, -30.6182, 0.22 ) }
    dend_26 { pt3dadd( 127.955, 145.542, -30.5875, 0.74 ) }
    // Section: dend_25, id: dend_25, parent: dend_24 (entry count 37/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 117.231, 133.626, -27.7745, 0.59 ) }
    dend_25 { pt3dadd( 118.567, 133.814, -27.9062, 0.59 ) }
    dend_25 { pt3dadd( 119.92, 134.018, -27.9739, 0.07 ) }
    dend_25 { pt3dadd( 120.694, 134.135, -28.0089, 0.07 ) }
    dend_25 { pt3dadd( 122.171, 134.442, -28.085, 1.18 ) }
    dend_25 { pt3dadd( 123.019, 134.652, -28.0891, 1.18 ) }
    dend_25 { pt3dadd( 125.305, 135.265, -28.0402, 0.22 ) }
    dend_25 { pt3dadd( 126.415, 135.636, -27.9706, 0.22 ) }
    dend_25 { pt3dadd( 127.247, 135.925, -27.8844, 0.22 ) }
    dend_25 { pt3dadd( 128.549, 136.437, -27.6981, 0.22 ) }
    dend_25 { pt3dadd( 129.736, 136.952, -27.5094, 1.11 ) }
    dend_25 { pt3dadd( 129.939, 137.06, -27.46, 0.07 ) }
    dend_25 { pt3dadd( 130.691, 137.584, -27.222, 0.07 ) }
    dend_25 { pt3dadd( 131.483, 138.259, -26.8721, 1.18 ) }
    dend_25 { pt3dadd( 132.809, 139.609, -26.1734, 0.07 ) }
    dend_25 { pt3dadd( 133.232, 140.092, -25.9123, 0.96 ) }
    dend_25 { pt3dadd( 134.447, 141.489, -25.1052, 0.96 ) }
    dend_25 { pt3dadd( 135.156, 142.278, -24.5991, 0.29 ) }
    dend_25 { pt3dadd( 135.619, 142.783, -24.2429, 0.29 ) }
    dend_25 { pt3dadd( 136.149, 143.211, -23.8615, 0.29 ) }
    dend_25 { pt3dadd( 136.771, 143.45, -23.5181, 0.88 ) }
    dend_25 { pt3dadd( 138.78, 143.513, -22.8564, 0.29 ) }
    dend_25 { pt3dadd( 139.83, 143.293, -22.6912, 0.29 ) }
    dend_25 { pt3dadd( 140.208, 143.167, -22.6559, 0.29 ) }
    dend_25 { pt3dadd( 142.327, 142.221, -22.5794, 0.29 ) }
    dend_25 { pt3dadd( 142.533, 142.105, -22.5907, 0.29 ) }
    dend_25 { pt3dadd( 143.746, 141.338, -22.7692, 0.29 ) }
    dend_25 { pt3dadd( 144.505, 140.794, -22.9332, 0.29 ) }
    dend_25 { pt3dadd( 145.088, 140.35, -23.0631, 0.29 ) }
    dend_25 { pt3dadd( 145.649, 139.922, -23.2008, 0.81 ) }
    dend_25 { pt3dadd( 147.513, 138.581, -23.7601, 0.22 ) }
    dend_25 { pt3dadd( 147.887, 138.305, -23.8722, 0.22 ) }
    // Section: dend_36, id: dend_36, parent: dend_30 (entry count 69/100)
    dend_36 { pt3dclear() }
    dend_36 { pt3dadd( 4.34937, 106.09, 31.3893, 0.74 ) }
    dend_36 { pt3dadd( 5.5553, 108.9, 29.4783, 0.74 ) }
    dend_36 { pt3dadd( 5.78217, 109.622, 29.063, 0.74 ) }
    dend_36 { pt3dadd( 6.06144, 110.733, 28.5097, 0.74 ) }
    dend_36 { pt3dadd( 6.35736, 112.249, 27.8835, 0.59 ) }
    dend_36 { pt3dadd( 6.8103, 115.021, 26.8746, 0.59 ) }
    dend_36 { pt3dadd( 6.9466, 115.953, 26.5612, 0.59 ) }
    dend_36 { pt3dadd( 6.98832, 117.248, 26.2169, 0.59 ) }
    dend_36 { pt3dadd( 7.00397, 117.954, 26.0725, 0.59 ) }
    dend_36 { pt3dadd( 7.02585, 119.178, 25.8832, 0.59 ) }
    dend_36 { pt3dadd( 7.07476, 120.745, 25.6773, 0.59 ) }
    dend_36 { pt3dadd( 7.13622, 121.859, 25.5481, 0.88 ) }
    dend_36 { pt3dadd( 7.2689, 123.632, 25.2689, 0.59 ) }
    dend_36 { pt3dadd( 7.42045, 125.757, 24.7967, 0.52 ) }
    dend_36 { pt3dadd( 7.4593, 126.804, 24.5025, 0.52 ) }
    dend_36 { pt3dadd( 7.46245, 127.95, 24.1451, 0.88 ) }
    dend_36 { pt3dadd( 7.42763, 128.868, 23.8573, 0.88 ) }
    dend_36 { pt3dadd( 7.29817, 130.515, 23.3826, 0.44 ) }
    dend_36 { pt3dadd( 7.07605, 132.326, 22.9422, 0.44 ) }
    dend_36 { pt3dadd( 6.76557, 134.274, 22.5577, 0.74 ) }
    dend_36 { pt3dadd( 6.59453, 135.256, 22.4272, 0.74 ) }
    dend_36 { pt3dadd( 6.46297, 135.989, 22.3768, 0.74 ) }
    dend_36 { pt3dadd( 6.11732, 137.915, 22.3867, 0.59 ) }
    dend_36 { pt3dadd( 5.89231, 139.236, 22.4867, 0.59 ) }
    dend_36 { pt3dadd( 5.62003, 141.273, 22.7251, 0.59 ) }
    dend_36 { pt3dadd( 5.41733, 143.163, 22.9713, 0.59 ) }
    dend_36 { pt3dadd( 5.29546, 144.413, 23.1161, 0.59 ) }
    dend_36 { pt3dadd( 5.17552, 145.931, 23.2499, 0.59 ) }
    dend_36 { pt3dadd( 5.11902, 146.933, 23.31, 0.59 ) }
    dend_36 { pt3dadd( 5.10216, 148.275, 23.3833, 0.59 ) }
    dend_36 { pt3dadd( 5.11294, 149.105, 23.4495, 0.59 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_19()
}

proc basic_shape_19() {
    dend_36 { pt3dadd( 5.13868, 150.186, 23.5453, 0.59 ) }
    dend_36 { pt3dadd( 5.17667, 151.633, 23.6842, 0.59 ) }
    dend_36 { pt3dadd( 5.24529, 153.913, 23.9037, 0.59 ) }
    dend_36 { pt3dadd( 5.30825, 156.135, 24.1332, 0.37 ) }
    dend_36 { pt3dadd( 5.36726, 157.993, 24.2973, 0.37 ) }
    dend_36 { pt3dadd( 5.45625, 159.16, 24.3991, 0.74 ) }
    dend_36 { pt3dadd( 5.72279, 161.561, 24.5945, 0.29 ) }
    dend_36 { pt3dadd( 5.89873, 162.871, 24.7001, 0.29 ) }
    dend_36 { pt3dadd( 6.00515, 163.556, 24.7489, 0.29 ) }
    dend_36 { pt3dadd( 6.42141, 166.157, 24.9051, 0.59 ) }
    dend_36 { pt3dadd( 6.877, 168.792, 25.0387, 0.52 ) }
    dend_36 { pt3dadd( 7.03745, 169.724, 25.0861, 0.52 ) }
    dend_36 { pt3dadd( 7.28312, 171.326, 25.1829, 0.52 ) }
    dend_36 { pt3dadd( 7.35417, 172.012, 25.2293, 0.52 ) }
    dend_36 { pt3dadd( 7.4628, 173.703, 25.3198, 0.52 ) }
    dend_36 { pt3dadd( 7.49076, 175.457, 25.3922, 0.52 ) }
    dend_36 { pt3dadd( 7.46313, 176.448, 25.3955, 0.52 ) }
    dend_36 { pt3dadd( 7.41298, 178.48, 25.3793, 0.74 ) }
    dend_36 { pt3dadd( 7.30564, 180.915, 25.285, 0.07 ) }
    dend_36 { pt3dadd( 7.24638, 182.276, 25.2199, 0.07 ) }
    dend_36 { pt3dadd( 7.18126, 183.024, 25.1691, 0.07 ) }
    dend_36 { pt3dadd( 7.02094, 184.448, 25.0546, 0.07 ) }
    dend_36 { pt3dadd( 6.87957, 185.543, 24.9515, 0.07 ) }
    dend_36 { pt3dadd( 6.65175, 187.095, 24.7953, 0.37 ) }
    dend_36 { pt3dadd( 6.46836, 188.214, 24.7101, 0.74 ) }
    dend_36 { pt3dadd( 6.07021, 190.939, 24.6636, 0.07 ) }
    dend_36 { pt3dadd( 5.96675, 191.776, 24.685, 0.07 ) }
    dend_36 { pt3dadd( 5.86882, 192.676, 24.7738, 0.07 ) }
    dend_36 { pt3dadd( 5.79643, 193.497, 24.9236, 0.07 ) }
    dend_36 { pt3dadd( 5.72436, 194.447, 25.2049, 1.18 ) }
    dend_36 { pt3dadd( 5.56631, 196.331, 25.8529, 0.44 ) }
    dend_36 { pt3dadd( 5.54252, 196.982, 26.1424, 0.44 ) }
    dend_36 { pt3dadd( 5.46868, 198.114, 26.6889, 0.44 ) }
    dend_36 { pt3dadd( 5.35183, 199.394, 27.3978, 0.44 ) }
    dend_36 { pt3dadd( 5.19663, 200.681, 28.1856, 2.28 ) }
    // Section: dend_31, id: dend_31, parent: dend_30 (entry count 35/100)
    dend_31 { pt3dclear() }
    dend_31 { pt3dadd( 4.34937, 106.09, 31.3893, 0.74 ) }
    dend_31 { pt3dadd( 4.43259, 107.901, 31.503, 0.74 ) }
    dend_31 { pt3dadd( 4.48618, 109.581, 31.7634, 0.74 ) }
    dend_31 { pt3dadd( 4.46271, 110.761, 32.0495, 0.74 ) }
    dend_31 { pt3dadd( 4.34829, 112.752, 32.732, 0.74 ) }
    dend_31 { pt3dadd( 4.17948, 114.441, 33.4326, 0.74 ) }
    dend_31 { pt3dadd( 4.00006, 115.772, 34.0479, 0.52 ) }
    dend_31 { pt3dadd( 3.73794, 117.603, 34.9599, 0.81 ) }
    dend_31 { pt3dadd( 3.51721, 119.188, 35.8393, 0.81 ) }
    dend_31 { pt3dadd( 3.29179, 120.879, 36.8146, 0.66 ) }
    dend_31 { pt3dadd( 3.1, 122.176, 37.5285, 0.66 ) }
    dend_31 { pt3dadd( 2.964, 123.109, 37.9817, 0.66 ) }
    dend_31 { pt3dadd( 2.71749, 124.575, 38.556, 0.66 ) }
    dend_31 { pt3dadd( 2.27627, 126.918, 39.2887, 0.66 ) }
    dend_31 { pt3dadd( 1.88512, 128.73, 39.7548, 0.66 ) }
    dend_31 { pt3dadd( 1.3195, 131.085, 40.2581, 0.96 ) }
    dend_31 { pt3dadd( 0.851103, 133.079, 40.6181, 0.96 ) }
    dend_31 { pt3dadd( 0.237724, 135.679, 41.0295, 0.81 ) }
    dend_31 { pt3dadd( -0.163616, 137.172, 41.2369, 0.81 ) }
    dend_31 { pt3dadd( -0.848558, 139.394, 41.5211, 0.74 ) }
    dend_31 { pt3dadd( -1.30815, 140.861, 41.7215, 0.74 ) }
    dend_31 { pt3dadd( -2.06447, 143.524, 42.0844, 0.74 ) }
    dend_31 { pt3dadd( -2.3246, 144.6, 42.2067, 0.74 ) }
    dend_31 { pt3dadd( -2.67601, 146.655, 42.3971, 0.74 ) }
    dend_31 { pt3dadd( -2.84744, 148.165, 42.4989, 0.74 ) }
    dend_31 { pt3dadd( -2.94613, 149.31, 42.5963, 0.74 ) }
    dend_31 { pt3dadd( -3.07248, 150.655, 42.7478, 0.88 ) }
    dend_31 { pt3dadd( -3.19899, 152.031, 42.9345, 0.88 ) }
    dend_31 { pt3dadd( -3.3815, 154.015, 43.1792, 1.11 ) }
    dend_31 { pt3dadd( -3.56665, 156.559, 43.4509, 0.66 ) }
    dend_31 { pt3dadd( -3.75842, 158.861, 43.6715, 0.81 ) }
    dend_31 { pt3dadd( -3.93533, 160.603, 43.8403, 0.96 ) }
    dend_31 { pt3dadd( -4.11744, 162.033, 43.9741, 0.96 ) }
    dend_31 { pt3dadd( -4.5034, 164.187, 44.1716, 0.96 ) }
    dend_31 { pt3dadd( -4.76326, 165.339, 44.2761, 0.96 ) }
    dend_31 { pt3dadd( -5.08424, 166.607, 44.3774, 0.96 ) }
    dend_31 { pt3dadd( -5.43356, 168.049, 44.4524, 0.96 ) }
    dend_31 { pt3dadd( -5.98401, 170.524, 44.5542, 0.74 ) }
    dend_31 { pt3dadd( -6.36061, 172.357, 44.6583, 0.74 ) }
    dend_31 { pt3dadd( -6.60548, 173.518, 44.7408, 0.74 ) }
    dend_31 { pt3dadd( -6.79138, 174.323, 44.8014, 0.74 ) }
    dend_31 { pt3dadd( -7.01768, 175.41, 44.8695, 0.74 ) }
    dend_31 { pt3dadd( -7.27799, 176.933, 44.9606, 0.74 ) }
    dend_31 { pt3dadd( -7.43678, 178.522, 44.9855, 0.44 ) }
    dend_31 { pt3dadd( -7.46754, 179.819, 44.946, 0.66 ) }
    dend_31 { pt3dadd( -7.42965, 181.869, 44.8069, 0.66 ) }
    dend_31 { pt3dadd( -7.31958, 184.042, 44.6122, 0.66 ) }
    dend_31 { pt3dadd( -7.1818, 185.902, 44.4021, 0.66 ) }
    dend_31 { pt3dadd( -6.97663, 188.344, 44.1263, 0.66 ) }
    dend_31 { pt3dadd( -6.87171, 190.527, 43.7945, 0.66 ) }
    dend_31 { pt3dadd( -6.82304, 192.033, 43.5288, 0.66 ) }
    dend_31 { pt3dadd( -6.82091, 193.589, 43.2115, 0.66 ) }
    dend_31 { pt3dadd( -6.9005, 195.372, 42.8612, 0.66 ) }
    dend_31 { pt3dadd( -7.069, 197.537, 42.4764, 0.88 ) }
    dend_31 { pt3dadd( -7.37978, 200.864, 41.9705, 0.66 ) }
    dend_31 { pt3dadd( -7.63193, 203.652, 41.5675, 0.66 ) }
    dend_31 { pt3dadd( -7.74742, 204.794, 41.408, 0.66 ) }
    dend_31 { pt3dadd( -7.93185, 206.648, 41.175, 0.66 ) }
    dend_31 { pt3dadd( -8.07755, 208.453, 40.9934, 0.66 ) }
    dend_31 { pt3dadd( -8.16668, 210.198, 40.8611, 0.66 ) }
    dend_31 { pt3dadd( -8.20592, 211.902, 40.8352, 0.37 ) }
    dend_31 { pt3dadd( -8.35729, 214.044, 40.8651, 0.74 ) }
    dend_31 { pt3dadd( -8.51947, 215.332, 40.9122, 1.18 ) }
    dend_31 { pt3dadd( -8.80046, 216.948, 41.0058, 0.59 ) }
    dend_31 { pt3dadd( -9.0227, 218.023, 41.087, 0.59 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_20()
}

proc basic_shape_20() {
    dend_31 { pt3dadd( -9.30455, 219.168, 41.2119, 0.59 ) }
    dend_31 { pt3dadd( -9.74628, 220.768, 41.4603, 0.59 ) }
    dend_31 { pt3dadd( -10.3497, 223.054, 41.9402, 0.96 ) }
    dend_31 { pt3dadd( -10.5394, 223.657, 42.0723, 1.33 ) }
    // Section: dend_33, id: dend_33, parent: dend_31 (entry count 4/100)
    dend_33 { pt3dclear() }
    dend_33 { pt3dadd( -10.5394, 223.657, 42.0723, 0.44 ) }
    dend_33 { pt3dadd( -10.3977, 224.845, 41.8446, 0.44 ) }
    dend_33 { pt3dadd( -10.3149, 225.54, 41.7115, 0.66 ) }
    dend_33 { pt3dadd( -10.2319, 226.237, 41.5781, 0.66 ) }
    dend_33 { pt3dadd( -10.193, 226.563, 41.5156, 0.66 ) }
    // Section: dend_32, id: dend_32, parent: dend_31 (entry count 9/100)
    dend_32 { pt3dclear() }
    dend_32 { pt3dadd( -10.5394, 223.657, 42.0723, 0.59 ) }
    dend_32 { pt3dadd( -11.9321, 224.934, 42.5614, 0.59 ) }
    dend_32 { pt3dadd( -12.5909, 225.599, 42.7965, 0.59 ) }
    dend_32 { pt3dadd( -13.4256, 226.485, 43.1099, 0.59 ) }
    dend_32 { pt3dadd( -14.4874, 227.658, 43.5407, 0.59 ) }
    dend_32 { pt3dadd( -15.2892, 228.604, 43.8872, 0.59 ) }
    dend_32 { pt3dadd( -16.3291, 229.934, 44.3756, 1.11 ) }
    dend_32 { pt3dadd( -16.8866, 230.789, 44.6963, 0.59 ) }
    dend_32 { pt3dadd( -17.2146, 231.324, 44.9052, 0.59 ) }
    dend_32 { pt3dadd( -17.6729, 232.11, 45.2509, 0.59 ) }
    dend_32 { pt3dadd( -18.0973, 232.856, 45.5996, 0.59 ) }
    dend_32 { pt3dadd( -18.6911, 234.024, 46.2888, 0.59 ) }
    dend_32 { pt3dadd( -18.9591, 234.634, 46.7128, 0.59 ) }
    dend_32 { pt3dadd( -19.3323, 235.595, 47.409, 0.59 ) }
    dend_32 { pt3dadd( -19.8752, 237.188, 48.5883, 0.81 ) }
    dend_32 { pt3dadd( -20.0398, 237.896, 49.1463, 0.81 ) }
    dend_32 { pt3dadd( -20.2646, 239.667, 50.5799, 0.59 ) }
    dend_32 { pt3dadd( -20.2857, 240.249, 51.0403, 0.88 ) }
    dend_32 { pt3dadd( -20.2715, 240.618, 51.3083, 0.88 ) }
    dend_32 { pt3dadd( -20.22, 241.115, 51.6211, 0.88 ) }
    dend_32 { pt3dadd( -20.0097, 243.039, 52.6769, 0.59 ) }
    dend_32 { pt3dadd( -19.9647, 243.709, 53.0273, 0.96 ) }
    dend_32 { pt3dadd( -19.9068, 245.325, 53.7549, 0.59 ) }
    dend_32 { pt3dadd( -19.8746, 246.156, 54.1125, 0.59 ) }
    dend_32 { pt3dadd( -19.8683, 247.245, 54.5435, 0.59 ) }
    dend_32 { pt3dadd( -19.9289, 248.413, 54.9713, 0.59 ) }
    dend_32 { pt3dadd( -20.1415, 249.973, 55.4113, 0.59 ) }
    dend_32 { pt3dadd( -20.3101, 251.006, 55.6632, 0.29 ) }
    dend_32 { pt3dadd( -20.4936, 251.899, 55.8267, 0.66 ) }
    dend_32 { pt3dadd( -20.8679, 253.182, 56.0358, 0.66 ) }
    dend_32 { pt3dadd( -21.2629, 254.166, 56.1901, 0.66 ) }
    dend_32 { pt3dadd( -21.9809, 255.521, 56.4098, 0.66 ) }
    dend_32 { pt3dadd( -22.4233, 256.171, 56.519, 0.66 ) }
    dend_32 { pt3dadd( -23.0889, 257.008, 56.7316, 0.52 ) }
    dend_32 { pt3dadd( -23.6852, 257.711, 56.9323, 0.88 ) }
    dend_32 { pt3dadd( -24.4096, 258.542, 57.2159, 0.88 ) }
    dend_32 { pt3dadd( -25.3005, 259.591, 57.6073, 0.52 ) }
    dend_32 { pt3dadd( -26.2705, 260.772, 58.0979, 0.74 ) }
    dend_32 { pt3dadd( -27.072, 261.794, 58.5272, 0.96 ) }
    dend_32 { pt3dadd( -28.1547, 263.346, 59.1534, 0.96 ) }
    dend_32 { pt3dadd( -28.9913, 264.719, 59.6078, 0.59 ) }
    dend_32 { pt3dadd( -29.4861, 265.654, 59.8691, 0.59 ) }
    dend_32 { pt3dadd( -29.8459, 266.434, 60.0666, 0.59 ) }
    dend_32 { pt3dadd( -30.1828, 267.234, 60.2476, 0.59 ) }
    dend_32 { pt3dadd( -30.5898, 268.26, 60.4486, 0.96 ) }
    dend_32 { pt3dadd( -31.2685, 270.09, 60.7827, 0.44 ) }
    dend_32 { pt3dadd( -31.6053, 271.047, 60.9209, 0.96 ) }
    dend_32 { pt3dadd( -31.9585, 272.035, 61.0418, 0.96 ) }
    dend_32 { pt3dadd( -32.4752, 273.433, 61.1537, 0.44 ) }
    dend_32 { pt3dadd( -32.7065, 274.047, 61.1879, 0.44 ) }
    dend_32 { pt3dadd( -32.9467, 274.643, 61.2059, 0.44 ) }
    dend_32 { pt3dadd( -33.2539, 275.356, 61.1981, 0.88 ) }
    dend_32 { pt3dadd( -33.6312, 276.192, 61.1548, 0.88 ) }
    dend_32 { pt3dadd( -34.3772, 277.776, 61.0667, 0.52 ) }
    dend_32 { pt3dadd( -34.649, 278.335, 61.0517, 0.52 ) }
    dend_32 { pt3dadd( -35.4267, 279.938, 61.0701, 0.07 ) }
    dend_32 { pt3dadd( -35.7868, 280.676, 61.125, 0.88 ) }
    dend_32 { pt3dadd( -36.2986, 281.725, 61.2754, 0.88 ) }
    dend_32 { pt3dadd( -36.7133, 282.685, 61.4902, 0.44 ) }
    dend_32 { pt3dadd( -37.0371, 283.535, 61.7143, 0.44 ) }
    dend_32 { pt3dadd( -37.5886, 285.211, 62.1615, 0.44 ) }
    dend_32 { pt3dadd( -37.9038, 286.45, 62.491, 1.18 ) }
    dend_32 { pt3dadd( -38.0465, 287.193, 62.6702, 1.18 ) }
    dend_32 { pt3dadd( -38.3178, 289.002, 63.0296, 0.07 ) }
    dend_32 { pt3dadd( -38.4563, 290.184, 63.2117, 0.66 ) }
    dend_32 { pt3dadd( -38.5129, 291.015, 63.3144, 0.22 ) }
    dend_32 { pt3dadd( -38.5073, 292.135, 63.416, 0.22 ) }
    dend_32 { pt3dadd( -38.4323, 293.165, 63.4812, 0.59 ) }
    dend_32 { pt3dadd( -38.2661, 294.399, 63.5361, 0.59 ) }
    dend_32 { pt3dadd( -38.0988, 295.206, 63.553, 0.59 ) }
    dend_32 { pt3dadd( -37.7749, 296.37, 63.5806, 0.07 ) }
    dend_32 { pt3dadd( -37.4489, 297.36, 63.573, 0.59 ) }
    dend_32 { pt3dadd( -37.2694, 297.842, 63.5527, 0.96 ) }
    dend_32 { pt3dadd( -37.0371, 298.454, 63.5205, 0.96 ) }
    dend_32 { pt3dadd( -36.7755, 299.221, 63.4924, 0.37 ) }
    dend_32 { pt3dadd( -36.5855, 299.987, 63.5029, 0.07 ) }
    dend_32 { pt3dadd( -36.4923, 301.194, 63.5433, 0.07 ) }
    dend_32 { pt3dadd( -36.5716, 302.253, 63.6292, 0.07 ) }
    dend_32 { pt3dadd( -36.725, 303.099, 63.7371, 0.07 ) }
    dend_32 { pt3dadd( -36.9798, 304.026, 63.897, 0.07 ) }
    dend_32 { pt3dadd( -37.1187, 304.415, 63.9823, 1.03 ) }
    dend_32 { pt3dadd( -37.5228, 305.394, 64.2223, 0.66 ) }
    dend_32 { pt3dadd( -37.8054, 306.069, 64.387, 0.66 ) }
    dend_32 { pt3dadd( -38.0543, 306.749, 64.5313, 0.66 ) }
    dend_32 { pt3dadd( -38.1798, 307.491, 64.7367, 0.66 ) }
    dend_32 { pt3dadd( -38.198, 308.123, 64.9608, 0.66 ) }
    dend_32 { pt3dadd( -38.1765, 308.485, 65.1054, 0.66 ) }
    dend_32 { pt3dadd( -38.0752, 309.291, 65.4563, 0.07 ) }
    dend_32 { pt3dadd( -38.0188, 309.647, 65.6058, 0.07 ) }
    dend_32 { pt3dadd( -37.6595, 311.862, 66.5125, 0.37 ) }
    dend_32 { pt3dadd( -37.5123, 312.747, 66.8005, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_21()
}

proc basic_shape_21() {
    dend_32 { pt3dadd( -37.2434, 314.302, 67.1841, 0.07 ) }
    dend_32 { pt3dadd( -37.1698, 314.744, 67.2605, 0.07 ) }
    dend_32 { pt3dadd( -37.0358, 315.58, 67.3348, 0.66 ) }
    dend_32 { pt3dadd( -36.9013, 316.37, 67.3182, 1.11 ) }
    dend_32 { pt3dadd( -36.574, 318.135, 67.0265, 0.07 ) }
    dend_32 { pt3dadd( -36.4505, 318.66, 66.9139, 0.07 ) }
    dend_32 { pt3dadd( -36.2195, 319.526, 66.7298, 0.07 ) }
    dend_32 { pt3dadd( -36.0177, 320.312, 66.6046, 0.59 ) }
    dend_32 { pt3dadd( -35.8506, 320.985, 66.5356, 0.59 ) }
    dend_32 { pt3dadd( -35.6968, 321.707, 66.5312, 0.59 ) }
    dend_32 { pt3dadd( -35.6839, 321.806, 66.5482, 1.03 ) }
    dend_32 { pt3dadd( -35.636, 323.024, 66.8999, 0.37 ) }
    dend_32 { pt3dadd( -35.6401, 323.817, 67.2739, 0.37 ) }
    dend_32 { pt3dadd( -35.6541, 324.037, 67.4103, 0.37 ) }
    dend_32 { pt3dadd( -35.7283, 324.682, 67.8748, 0.37 ) }
    dend_32 { pt3dadd( -35.8513, 325.426, 68.4637, 0.37 ) }
    dend_32 { pt3dadd( -35.9923, 326.037, 68.9845, 0.37 ) }
    dend_32 { pt3dadd( -36.3306, 327.159, 69.8723, 0.07 ) }
    dend_32 { pt3dadd( -36.4948, 327.63, 70.2182, 0.59 ) }
    dend_32 { pt3dadd( -36.6712, 328.052, 70.4951, 0.59 ) }
    dend_32 { pt3dadd( -36.9583, 328.643, 70.8442, 0.59 ) }
    dend_32 { pt3dadd( -37.3609, 329.424, 71.2342, 1.33 ) }
    dend_32 { pt3dadd( -38.3114, 331.179, 71.9578, 0.07 ) }
    dend_32 { pt3dadd( -38.6847, 331.854, 72.1848, 0.07 ) }
    dend_32 { pt3dadd( -39.2244, 332.883, 72.5006, 0.37 ) }
    dend_32 { pt3dadd( -39.5969, 333.609, 72.7088, 0.37 ) }
    dend_32 { pt3dadd( -40.199, 334.822, 73.03, 0.74 ) }
    dend_32 { pt3dadd( -40.6508, 335.749, 73.2722, 0.15 ) }
    dend_32 { pt3dadd( -40.7929, 336.03, 73.3558, 0.15 ) }
    dend_32 { pt3dadd( -41.089, 336.666, 73.5511, 0.15 ) }
    dend_32 { pt3dadd( -41.4131, 337.433, 73.7997, 0.15 ) }
    dend_32 { pt3dadd( -41.7315, 338.248, 74.0648, 0.81 ) }
    dend_32 { pt3dadd( -41.9664, 338.919, 74.2812, 0.81 ) }
    dend_32 { pt3dadd( -42.2216, 339.81, 74.5496, 0.81 ) }
    dend_32 { pt3dadd( -42.7036, 341.803, 75.1031, 0.29 ) }
    dend_32 { pt3dadd( -42.9375, 342.94, 75.4014, 0.44 ) }
    dend_32 { pt3dadd( -43.1459, 344.075, 75.697, 0.44 ) }
    dend_32 { pt3dadd( -43.3469, 345.294, 76.0041, 0.44 ) }
    dend_32 { pt3dadd( -43.5108, 346.192, 76.1968, 0.88 ) }
    dend_32 { pt3dadd( -43.7232, 347.26, 76.3971, 1.25 ) }
    dend_32 { pt3dadd( -44.033, 348.563, 76.5921, 0.66 ) }
    dend_32 { pt3dadd( -44.5073, 350.411, 76.7832, 0.29 ) }
    dend_32 { pt3dadd( -44.8776, 351.793, 76.8858, 0.74 ) }
    dend_32 { pt3dadd( -45.408, 353.637, 76.974, 0.22 ) }
    dend_32 { pt3dadd( -45.6692, 354.514, 76.9989, 0.22 ) }
    dend_32 { pt3dadd( -46.1724, 356.271, 76.9969, 0.81 ) }
    dend_32 { pt3dadd( -46.6519, 358.183, 76.9281, 0.37 ) }
    dend_32 { pt3dadd( -46.9246, 359.46, 76.8318, 1.11 ) }
    dend_32 { pt3dadd( -47.1884, 360.77, 76.6523, 0.44 ) }
    dend_32 { pt3dadd( -47.2834, 361.37, 76.5404, 0.44 ) }
    dend_32 { pt3dadd( -47.395, 362.017, 76.3713, 0.44 ) }
    dend_32 { pt3dadd( -47.5642, 363.069, 76.0198, 0.44 ) }
    dend_32 { pt3dadd( -47.7052, 363.903, 75.6769, 0.44 ) }
    dend_32 { pt3dadd( -47.9923, 365.713, 74.7971, 0.07 ) }
    dend_32 { pt3dadd( -48.0813, 366.317, 74.491, 0.07 ) }
    dend_32 { pt3dadd( -48.2331, 367.249, 74.0334, 0.07 ) }
    dend_32 { pt3dadd( -48.4314, 368.163, 73.634, 0.52 ) }
    dend_32 { pt3dadd( -48.5828, 368.856, 73.3884, 0.52 ) }
    dend_32 { pt3dadd( -48.7835, 369.956, 73.114, 0.07 ) }
    dend_32 { pt3dadd( -48.8408, 370.468, 73.0576, 0.15 ) }
    dend_32 { pt3dadd( -48.898, 371.05, 73.0272, 0.15 ) }
    dend_32 { pt3dadd( -49.0472, 373.059, 73.0307, 0.59 ) }
    dend_32 { pt3dadd( -49.1175, 374.258, 73.1059, 0.07 ) }
    dend_32 { pt3dadd( -49.1375, 374.981, 73.1807, 0.88 ) }
    dend_32 { pt3dadd( -49.0952, 376.976, 73.4285, 0.29 ) }
    dend_32 { pt3dadd( -49.0466, 377.693, 73.5121, 1.03 ) }
    dend_32 { pt3dadd( -48.9333, 378.658, 73.632, 0.07 ) }
    dend_32 { pt3dadd( -48.6594, 380.149, 73.8287, 0.07 ) }
    dend_32 { pt3dadd( -48.434, 381.238, 73.8581, 0.07 ) }
    dend_32 { pt3dadd( -48.2841, 381.858, 73.8266, 0.07 ) }
    dend_32 { pt3dadd( -48.0302, 382.899, 73.6386, 0.07 ) }
    dend_32 { pt3dadd( -47.8741, 383.557, 73.4667, 0.07 ) }
    dend_32 { pt3dadd( -47.6187, 384.667, 73.0873, 0.07 ) }
    dend_32 { pt3dadd( -47.2261, 386.671, 72.2475, 0.37 ) }
    dend_32 { pt3dadd( -47.0471, 387.85, 71.7577, 0.07 ) }
    dend_32 { pt3dadd( -46.9177, 389.219, 71.2646, 0.07 ) }
    dend_32 { pt3dadd( -46.9001, 389.736, 71.1136, 0.07 ) }
    dend_32 { pt3dadd( -46.9187, 390.415, 70.9918, 0.07 ) }
    dend_32 { pt3dadd( -47.0101, 391.552, 70.9439, 1.4 ) }
    dend_32 { pt3dadd( -47.1167, 392.813, 71.0664, 0.29 ) }
    dend_32 { pt3dadd( -47.2351, 394.142, 71.2718, 0.07 ) }
    dend_32 { pt3dadd( -47.3062, 394.843, 71.4406, 1.11 ) }
    dend_32 { pt3dadd( -47.5351, 396.427, 71.9112, 0.15 ) }
    dend_32 { pt3dadd( -47.8706, 398.201, 72.5404, 0.15 ) }
    dend_32 { pt3dadd( -48.2021, 399.531, 73.112, 0.59 ) }
    dend_32 { pt3dadd( -48.4589, 400.285, 73.4944, 0.81 ) }
    dend_32 { pt3dadd( -49.012, 401.519, 74.2245, 0.29 ) }
    dend_32 { pt3dadd( -49.3717, 402.159, 74.689, 0.29 ) }
    dend_32 { pt3dadd( -49.7256, 402.655, 75.1286, 0.29 ) }
    dend_32 { pt3dadd( -50.5053, 403.559, 75.981, 0.29 ) }
    dend_32 { pt3dadd( -51.3439, 404.488, 76.8134, 0.29 ) }
    dend_32 { pt3dadd( -51.7865, 405.012, 77.2436, 0.29 ) }
    dend_32 { pt3dadd( -52.5771, 405.968, 77.9052, 1.03 ) }
    dend_32 { pt3dadd( -53.2792, 406.85, 78.4148, 0.44 ) }
    dend_32 { pt3dadd( -54.3605, 408.285, 79.0047, 0.07 ) }
    dend_32 { pt3dadd( -54.9259, 409.114, 79.2211, 0.07 ) }
    dend_32 { pt3dadd( -55.4586, 409.973, 79.2811, 0.44 ) }
    dend_32 { pt3dadd( -56.2517, 411.314, 79.2365, 0.44 ) }
    dend_32 { pt3dadd( -56.5037, 411.761, 79.1857, 1.25 ) }
    dend_32 { pt3dadd( -57.4476, 413.492, 78.9294, 0.07 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_22()
}

proc basic_shape_22() {
    dend_32 { pt3dadd( -57.8785, 414.286, 78.7881, 0.44 ) }
    dend_32 { pt3dadd( -59.1595, 416.6, 78.3803, 0.07 ) }
    dend_32 { pt3dadd( -59.556, 417.355, 78.2472, 0.07 ) }
    dend_32 { pt3dadd( -59.8018, 417.874, 78.1532, 0.07 ) }
    dend_32 { pt3dadd( -60.078, 418.491, 78.0277, 0.07 ) }
    dend_32 { pt3dadd( -60.9081, 420.461, 77.6178, 0.07 ) }
    dend_32 { pt3dadd( -61.3652, 421.464, 77.3656, 0.07 ) }
    dend_32 { pt3dadd( -61.6321, 422.034, 77.2179, 0.07 ) }
    dend_32 { pt3dadd( -62.227, 423.293, 76.7772, 0.07 ) }
    dend_32 { pt3dadd( -62.5902, 424.077, 76.4641, 0.07 ) }
    dend_32 { pt3dadd( -62.7742, 424.463, 76.298, 0.88 ) }
    dend_32 { pt3dadd( -63.609, 426.205, 75.568, 0.07 ) }
    dend_32 { pt3dadd( -63.7697, 426.554, 75.4255, 0.66 ) }
    dend_32 { pt3dadd( -64.3629, 427.934, 74.9485, 0.22 ) }
    dend_32 { pt3dadd( -64.5116, 428.349, 74.8331, 0.22 ) }
    dend_32 { pt3dadd( -64.8373, 429.45, 74.5711, 0.81 ) }
    dend_32 { pt3dadd( -65.0477, 430.875, 74.4156, 0.07 ) }
    dend_32 { pt3dadd( -65.0437, 432.011, 74.4673, 0.07 ) }
    dend_32 { pt3dadd( -64.987, 432.97, 74.6069, 0.07 ) }
    dend_32 { pt3dadd( -64.8365, 433.874, 74.941, 0.96 ) }
    dend_32 { pt3dadd( -64.7563, 434.213, 75.1194, 0.96 ) }
    dend_32 { pt3dadd( -64.232, 435.955, 76.3229, 0.07 ) }
    dend_32 { pt3dadd( -64.0174, 436.646, 76.9259, 0.07 ) }
    dend_32 { pt3dadd( -63.9101, 437.038, 77.3127, 0.81 ) }
    dend_32 { pt3dadd( -63.5077, 438.768, 78.9877, 0.29 ) }
    dend_32 { pt3dadd( -63.4514, 439.08, 79.2556, 0.29 ) }
    dend_32 { pt3dadd( -63.4066, 439.535, 79.5731, 1.03 ) }
    dend_32 { pt3dadd( -63.4092, 440.119, 79.8569, 1.03 ) }
    dend_32 { pt3dadd( -63.4301, 440.852, 80.1233, 1.03 ) }
    dend_32 { pt3dadd( -63.5052, 442.231, 80.4772, 0.29 ) }
    dend_32 { pt3dadd( -63.5957, 443.247, 80.6519, 0.29 ) }
    dend_32 { pt3dadd( -63.69, 444.043, 80.7825, 0.29 ) }
    dend_32 { pt3dadd( -63.9022, 445.338, 81.0116, 0.29 ) }
    dend_32 { pt3dadd( -64.15, 446.428, 81.2402, 1.03 ) }
    dend_32 { pt3dadd( -64.5171, 447.641, 81.5516, 0.07 ) }
    dend_32 { pt3dadd( -64.6136, 447.9, 81.63, 0.59 ) }
    dend_32 { pt3dadd( -65.1443, 449.06, 81.9837, 0.07 ) }
    dend_32 { pt3dadd( -65.8536, 450.334, 82.3973, 0.07 ) }
    dend_32 { pt3dadd( -66.3871, 451.106, 82.6874, 0.07 ) }
    dend_32 { pt3dadd( -67.1764, 452.031, 83.0467, 0.07 ) }
    dend_32 { pt3dadd( -67.687, 452.541, 83.2554, 0.07 ) }
    dend_32 { pt3dadd( -68.5271, 453.34, 83.5764, 0.88 ) }
    dend_32 { pt3dadd( -69.3229, 454.067, 83.8588, 0.07 ) }
    dend_32 { pt3dadd( -70.1475, 454.854, 84.047, 0.07 ) }
    dend_32 { pt3dadd( -71.0211, 455.828, 84.1688, 0.07 ) }
    dend_32 { pt3dadd( -71.4851, 456.419, 84.2135, 0.07 ) }
    dend_32 { pt3dadd( -71.8043, 456.918, 84.2423, 0.07 ) }
    dend_32 { pt3dadd( -72.0001, 457.332, 84.27, 0.07 ) }
    dend_32 { pt3dadd( -72.7931, 459.63, 84.3597, 0.07 ) }
    dend_32 { pt3dadd( -73.0373, 460.637, 84.4147, 0.07 ) }
    dend_32 { pt3dadd( -73.1748, 461.332, 84.4632, 0.07 ) }
    dend_32 { pt3dadd( -73.3587, 462.352, 84.5302, 0.07 ) }
    dend_32 { pt3dadd( -73.6298, 463.923, 84.6589, 0.07 ) }
    dend_32 { pt3dadd( -73.7895, 465.01, 84.781, 0.07 ) }
    dend_32 { pt3dadd( -73.9555, 467.216, 85.1774, 0.07 ) }
    // Section: dend_35, id: dend_35, parent: dend_33 (entry count 55/100)
    dend_35 { pt3dclear() }
    dend_35 { pt3dadd( -10.193, 226.563, 41.5156, 0.29 ) }
    dend_35 { pt3dadd( -9.944, 227.866, 40.7763, 0.29 ) }
    dend_35 { pt3dadd( -9.82872, 228.452, 40.5341, 0.29 ) }
    dend_35 { pt3dadd( -9.44073, 229.988, 40.0414, 0.29 ) }
    dend_35 { pt3dadd( -8.94968, 231.874, 39.4868, 0.88 ) }
    dend_35 { pt3dadd( -8.77656, 232.496, 39.3308, 0.88 ) }
    dend_35 { pt3dadd( -8.51673, 233.419, 39.1259, 0.88 ) }
    dend_35 { pt3dadd( -8.1107, 234.85, 38.9194, 0.37 ) }
    dend_35 { pt3dadd( -7.29423, 237.649, 38.6053, 0.07 ) }
    dend_35 { pt3dadd( -7.00695, 238.482, 38.5191, 0.07 ) }
    dend_35 { pt3dadd( -6.63384, 239.553, 38.3571, 0.07 ) }
    dend_35 { pt3dadd( -6.45255, 240.034, 38.2715, 0.07 ) }
    dend_35 { pt3dadd( -6.26138, 240.519, 38.17, 0.88 ) }
    dend_35 { pt3dadd( -5.97958, 241.231, 37.9848, 0.88 ) }
    dend_35 { pt3dadd( -5.34101, 242.851, 37.4288, 0.44 ) }
    dend_35 { pt3dadd( -5.07423, 243.511, 37.1478, 0.44 ) }
    dend_35 { pt3dadd( -4.63643, 244.532, 36.5677, 0.44 ) }
    dend_35 { pt3dadd( -4.23785, 245.335, 35.9877, 0.96 ) }
    dend_35 { pt3dadd( -3.88318, 246.055, 35.3055, 0.07 ) }
    dend_35 { pt3dadd( -3.75843, 246.39, 34.901, 0.07 ) }
    dend_35 { pt3dadd( -3.73077, 246.527, 34.6631, 0.07 ) }
    dend_35 { pt3dadd( -3.64521, 247.03, 33.4709, 0.07 ) }
    dend_35 { pt3dadd( -3.58967, 247.319, 32.5176, 0.52 ) }
    dend_35 { pt3dadd( -3.58059, 247.669, 31.1585, 0.52 ) }
    dend_35 { pt3dadd( -3.64798, 248.007, 30.0414, 0.07 ) }
    dend_35 { pt3dadd( -3.74256, 248.415, 28.9591, 0.07 ) }
    dend_35 { pt3dadd( -3.78532, 248.612, 28.5175, 0.07 ) }
    dend_35 { pt3dadd( -3.86685, 249.057, 27.7326, 0.07 ) }
    dend_35 { pt3dadd( -3.94305, 249.656, 26.784, 0.96 ) }
    dend_35 { pt3dadd( -3.95314, 250.655, 25.3458, 0.29 ) }
    dend_35 { pt3dadd( -3.93595, 251.194, 24.6561, 0.29 ) }
    dend_35 { pt3dadd( -3.91877, 251.555, 24.2668, 1.25 ) }
    dend_35 { pt3dadd( -3.85902, 252.677, 23.1295, 0.15 ) }
    dend_35 { pt3dadd( -3.81623, 253.232, 22.6076, 0.15 ) }
    dend_35 { pt3dadd( -3.71811, 253.913, 22.024, 0.59 ) }
    dend_35 { pt3dadd( -3.51364, 254.95, 21.1998, 0.15 ) }
    dend_35 { pt3dadd( -3.32808, 255.954, 20.4389, 0.74 ) }
    // Section: dend_34, id: dend_34, parent: dend_33 (entry count 92/100)
    dend_34 { pt3dclear() }
    dend_34 { pt3dadd( -10.193, 226.563, 41.5156, 0.22 ) }
    dend_34 { pt3dadd( -10.414, 227.944, 41.4493, 0.22 ) }
    dend_34 { pt3dadd( -10.4828, 228.512, 41.4084, 0.22 ) }
    dend_34 { pt3dadd( -10.5565, 229.244, 41.3573, 0.22 ) }
    dend_34 { pt3dadd( -10.5892, 229.655, 41.3242, 0.22 ) }
    dend_34 { pt3dadd( -10.6363, 230.573, 41.224, 0.66 ) }
    dend_34 { pt3dadd( -10.6611, 231.428, 41.1113, 0.07 ) }
    dend_34 { pt3dadd( -10.6479, 231.741, 41.0549, 0.07 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_23()
}

proc basic_shape_23() {
    dend_34 { pt3dadd( -10.6282, 232.216, 40.9624, 1.03 ) }
    dend_34 { pt3dadd( -10.5771, 232.868, 40.8428, 1.03 ) }
    dend_34 { pt3dadd( -10.4512, 234.07, 40.6284, 0.37 ) }
    dend_34 { pt3dadd( -10.3225, 235.124, 40.4565, 0.96 ) }
    dend_34 { pt3dadd( -10.1864, 236.149, 40.3028, 0.29 ) }
    dend_34 { pt3dadd( -10.0722, 236.975, 40.1889, 0.29 ) }
    dend_34 { pt3dadd( -9.91105, 238.126, 40.0458, 0.29 ) }
    dend_34 { pt3dadd( -9.84911, 238.587, 40.0029, 0.29 ) }
    dend_34 { pt3dadd( -9.75989, 239.316, 39.9662, 0.29 ) }
    dend_34 { pt3dadd( -9.69047, 239.993, 39.9599, 0.29 ) }
    dend_34 { pt3dadd( -9.63305, 240.461, 39.9789, 0.29 ) }
    dend_34 { pt3dadd( -9.52213, 241.343, 40.0523, 0.59 ) }
    dend_34 { pt3dadd( -9.46579, 241.957, 40.1321, 0.59 ) }
    dend_34 { pt3dadd( -9.41213, 242.498, 40.2229, 0.59 ) }
    dend_34 { pt3dadd( -9.37823, 242.826, 40.2833, 0.96 ) }
    dend_34 { pt3dadd( -9.2578, 244.024, 40.5085, 0.52 ) }
    dend_34 { pt3dadd( -9.18237, 244.823, 40.6492, 0.07 ) }
    dend_34 { pt3dadd( -9.05081, 246.376, 40.9007, 0.07 ) }
    dend_34 { pt3dadd( -9.03035, 246.687, 40.9424, 0.07 ) }
    dend_34 { pt3dadd( -8.99667, 247.467, 41.0265, 1.11 ) }
    dend_34 { pt3dadd( -8.9961, 248.242, 41.1115, 1.11 ) }
    dend_34 { pt3dadd( -9.02849, 248.923, 41.1868, 0.44 ) }
    dend_34 { pt3dadd( -9.05525, 249.497, 41.2486, 0.44 ) }
    dend_34 { pt3dadd( -9.13383, 250.62, 41.3424, 0.44 ) }
    dend_34 { pt3dadd( -9.17113, 251.094, 41.369, 0.88 ) }
    dend_34 { pt3dadd( -9.31268, 252.807, 41.4238, 0.52 ) }
    dend_34 { pt3dadd( -9.41037, 253.952, 41.439, 0.52 ) }
    dend_34 { pt3dadd( -9.53915, 255.51, 41.4189, 0.52 ) }
    dend_34 { pt3dadd( -9.67544, 257.291, 41.3435, 0.52 ) }
    dend_34 { pt3dadd( -9.73361, 258.246, 41.2732, 0.52 ) }
    dend_34 { pt3dadd( -9.75946, 259.042, 41.1876, 0.88 ) }
    dend_34 { pt3dadd( -9.75937, 259.206, 41.1634, 0.07 ) }
    dend_34 { pt3dadd( -9.71794, 260.221, 41.0093, 0.07 ) }
    dend_34 { pt3dadd( -9.63905, 261.146, 40.8729, 1.11 ) }
    dend_34 { pt3dadd( -9.43712, 262.645, 40.6667, 0.15 ) }
    dend_34 { pt3dadd( -9.26637, 263.642, 40.5331, 0.22 ) }
    dend_34 { pt3dadd( -9.1505, 264.221, 40.4547, 0.22 ) }
    dend_34 { pt3dadd( -8.98019, 265.006, 40.354, 0.96 ) }
    dend_34 { pt3dadd( -8.96419, 265.074, 40.3462, 0.07 ) }
    dend_34 { pt3dadd( -8.7638, 265.967, 40.2821, 0.07 ) }
    dend_34 { pt3dadd( -8.61574, 266.714, 40.2618, 0.07 ) }
    dend_34 { pt3dadd( -8.52239, 267.328, 40.2784, 0.96 ) }
    dend_34 { pt3dadd( -8.45124, 267.961, 40.316, 0.96 ) }
    dend_34 { pt3dadd( -8.39975, 268.744, 40.3811, 0.07 ) }
    dend_34 { pt3dadd( -8.37252, 269.65, 40.4932, 0.07 ) }
    dend_34 { pt3dadd( -8.38298, 270.078, 40.571, 0.07 ) }
    dend_34 { pt3dadd( -8.43791, 270.433, 40.6522, 0.52 ) }
    dend_34 { pt3dadd( -8.56048, 270.931, 40.797, 0.96 ) }
    dend_34 { pt3dadd( -8.7724, 271.536, 41.0364, 0.96 ) }
    dend_34 { pt3dadd( -8.95077, 271.941, 41.2394, 0.96 ) }
    dend_34 { pt3dadd( -9.31915, 272.702, 41.6647, 0.44 ) }
    dend_34 { pt3dadd( -9.8306, 273.674, 42.248, 0.44 ) }
    dend_34 { pt3dadd( -10.0522, 274.022, 42.4474, 0.88 ) }
    dend_34 { pt3dadd( -10.5746, 274.748, 42.8642, 0.88 ) }
    dend_34 { pt3dadd( -10.955, 275.251, 43.1435, 0.88 ) }
    dend_34 { pt3dadd( -11.2786, 275.697, 43.3591, 0.88 ) }
    dend_34 { pt3dadd( -11.7364, 276.405, 43.6379, 0.88 ) }
    dend_34 { pt3dadd( -12.3067, 277.584, 43.9557, 0.37 ) }
    dend_34 { pt3dadd( -12.5619, 278.192, 44.0812, 0.37 ) }
    dend_34 { pt3dadd( -12.7487, 278.693, 44.1753, 0.37 ) }
    dend_34 { pt3dadd( -12.9536, 279.331, 44.3153, 0.88 ) }
    dend_34 { pt3dadd( -13.1291, 280.02, 44.4905, 0.37 ) }
    dend_34 { pt3dadd( -13.3395, 281.33, 44.8233, 0.37 ) }
    dend_34 { pt3dadd( -13.3971, 281.944, 44.9831, 0.37 ) }
    dend_34 { pt3dadd( -13.4229, 282.55, 45.1465, 1.25 ) }
    dend_34 { pt3dadd( -13.429, 283.333, 45.391, 0.15 ) }
    dend_34 { pt3dadd( -13.4145, 284.034, 45.6472, 0.66 ) }
    dend_34 { pt3dadd( -13.3701, 285.124, 46.0848, 0.15 ) }
    dend_34 { pt3dadd( -13.3564, 285.299, 46.1607, 0.15 ) }
    dend_34 { pt3dadd( -13.2228, 286.365, 46.5922, 0.81 ) }
    dend_34 { pt3dadd( -13.1089, 286.982, 46.8269, 0.81 ) }
    dend_34 { pt3dadd( -13.0048, 287.366, 46.9873, 0.81 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_18, dend_13, dend_12, dend_5, dend_4, dend_3, dend_0, dend_39, dend_19, dend_17, dend_14, dend_11, dend_6, dend_2, dend_1, dend_40, dend_28, dend_23, dend_20, dend_16, dend_15, dend_8, dend_7, dend_38, dend_29, dend_27, dend_24, dend_22, dend_21, dend_10, dend_9, dend_37, dend_30, dend_26, dend_25, dend_36, dend_31, dend_33, dend_32, dend_35, dend_34]}
    ModelViewParmSubset_2 = new SectionList()
    dend_18 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_39 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_40 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_38 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_37 ModelViewParmSubset_2.append()
    dend_30 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_36 ModelViewParmSubset_2.append()
    dend_31 ModelViewParmSubset_2.append()
    dend_33 ModelViewParmSubset_2.append()
    dend_32 ModelViewParmSubset_2.append()
    dend_35 ModelViewParmSubset_2.append()
    dend_34 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_18, dend_13, dend_12, dend_5, dend_4, dend_3, dend_0, dend_39, dend_19, dend_17, dend_14, dend_11, dend_6, dend_2, dend_1, dend_40, dend_28, dend_23, dend_20, dend_16, dend_15, dend_8, dend_7, dend_38, dend_29, dend_27, dend_24, dend_22, dend_21, dend_10, dend_9, dend_37, dend_30, dend_26, dend_25, dend_36, dend_31, dend_33, dend_32, dend_35, dend_34]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_39 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_40 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_38 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_37 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_36 ModelViewParmSubset_4.append()
    dend_31 ModelViewParmSubset_4.append()
    dend_33 ModelViewParmSubset_4.append()
    dend_32 ModelViewParmSubset_4.append()
    dend_35 ModelViewParmSubset_4.append()
    dend_34 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_12 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_4 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_3 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_17 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_11 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_2 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_1 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_40]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_40 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_23 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_20 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_16 OneSecGrp_SectionRef_23.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_15 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_8 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_27 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_22 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_21 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_37]}
    OneSecGrp_SectionRef_35 = new SectionList()
    dend_37 OneSecGrp_SectionRef_35.append()

    // Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_36]}
    OneSecGrp_SectionRef_39 = new SectionList()
    dend_36 OneSecGrp_SectionRef_39.append()

    // Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_31]}
    OneSecGrp_SectionRef_40 = new SectionList()
    dend_31 OneSecGrp_SectionRef_40.append()

    // Group: {name=OneSecGrp_SectionRef_42, groups=[], sections=[dend_32]}
    OneSecGrp_SectionRef_42 = new SectionList()
    dend_32 OneSecGrp_SectionRef_42.append()

    // Group: {name=OneSecGrp_SectionRef_43, groups=[], sections=[dend_35]}
    OneSecGrp_SectionRef_43 = new SectionList()
    dend_35 OneSecGrp_SectionRef_43.append()

    // Group: {name=OneSecGrp_SectionRef_44, groups=[], sections=[dend_34]}
    OneSecGrp_SectionRef_44 = new SectionList()
    dend_34 OneSecGrp_SectionRef_44.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_0 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_5 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_18 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_39]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_39 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_6 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_13 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_19 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_14 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_7 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_28 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_10 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_9 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_29 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_38]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_38 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_36 = new SectionList()
    dend_30 OneSecGrp_SectionRef_36.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_24 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_37 = new SectionList()
    dend_26 OneSecGrp_SectionRef_37.append()

    // Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_38 = new SectionList()
    dend_25 OneSecGrp_SectionRef_38.append()

    // Group: {name=OneSecGrp_SectionRef_41, groups=[], sections=[dend_33]}
    OneSecGrp_SectionRef_41 = new SectionList()
    dend_33 OneSecGrp_SectionRef_41.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36, dend_37, dend_38, dend_39, dend_40], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()
    dend_31 basal.append()
    dend_32 basal.append()
    dend_33 basal.append()
    dend_34 basal.append()
    dend_35 basal.append()
    dend_36 basal.append()
    dend_37 basal.append()
    dend_38 basal.append()
    dend_39 basal.append()
    dend_40 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_18, dend_18, dend_18, dend_18, dend_18, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_39, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_33, dend_33, dend_33, dend_33, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_39 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_10()
}

proc subsets_10() {
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_11()
}

proc subsets_11() {
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_12()
}

proc subsets_12() {
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_13()
}

proc subsets_13() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_14()
}

proc subsets_14() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_15()
}

proc subsets_15() {
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_16()
}

proc subsets_16() {
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_17()
}

proc subsets_17() {
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_18()
}

proc subsets_18() {
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_19()
}

proc subsets_19() {
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_20()
}

proc subsets_20() {
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_21()
}

proc subsets_21() {
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_22()
}

proc subsets_22() {
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_23()
}

proc subsets_23() {
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_24()
}

proc subsets_24() {
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_25()
}

proc subsets_25() {
    dend_34 all.append()
    dend_34 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 5.67935E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 5.67935E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 3.6794998E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cSTUT_7_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cSTUT_7_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cSTUT_7_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cSTUT_7_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_12 nseg = 11
    dend_4 nseg = 7
    dend_3 nseg = 5
    dend_17 nseg = 3
    dend_11 nseg = 3
    dend_2 nseg = 11
    dend_1 nseg = 5
    dend_40 nseg = 11
    dend_23 nseg = 7
    dend_20 nseg = 5
    dend_16 nseg = 13
    dend_15 nseg = 9
    dend_8 nseg = 3
    dend_27 nseg = 3
    dend_22 nseg = 7
    dend_21 nseg = 5
    dend_37 nseg = 3
    dend_36 nseg = 5
    dend_31 nseg = 7
    dend_32 nseg = 13
    dend_35 nseg = 3
    dend_34 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cSTUT189_L6_LBC_1f1d59d3f5_0_0


