// Cell: dSTUT214_L4_BP_a62582b74c_0_0
/*
{
  "id" : "dSTUT214_L4_BP_a62582b74c_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-3.08452, 6.27464, 0.312461, 1.46623", "-2.79927, 5.64032, 0.287115, 2.64844", "-2.51401, 5.00599, 0.26177, 4.10361", "-2.22875, 4.37167, 0.236425, 4.91598", "-1.94349, 3.73735, 0.21108, 5.72835", "-1.65823, 3.10303, 0.185734, 6.53421", "-1.37297, 2.46871, 0.160389, 7.31212", "-1.08771, 1.83438, 0.135044, 8.08989", "-0.802456, 1.20006, 0.109699, 8.85679", "-0.517198, 0.56574, 0.0843534, 8.93483", "-0.23194, -0.0685822, 0.0590082, 8.92633", "0.0533189, -0.702904, 0.033663, 8.91784", "0.338577, -1.33723, 0.00831775, 8.90934", "0.623836, -1.97155, -0.0170275, 8.90084", "0.909094, -2.60587, -0.0423727, 8.82493", "1.19435, -3.24019, -0.067718, 7.82232", "1.47961, -3.87451, -0.0930632, 6.5965", "1.76487, -4.50884, -0.118408, 5.37067", "2.05013, -5.14316, -0.143754, 4.14485", "2.33539, -5.77748, -0.169099, 2.91903", "2.62064, -6.4118, -0.194444, 1.76337" ]
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "1.61629, -5.55298, -1.26548, 1.33", "2.67261, -9.91412, -2.11244, 1.33", "4.42395, -17.1447, -3.51668, 0.66", "5.7799, -22.7429, -4.60388, 0.66", "7.22478, -28.7082, -5.76239, 1.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500001318721313
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "2.62064, -6.4118, -0.194444, 0.33", "8.77276, -20.0921, -0.194444, 0.33", "14.9249, -33.7725, -0.194444, 0.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "7.22478, -28.7082, -5.76239, 0.66", "7.30446, -37.8974, -3.6133, 0.66", "7.40754, -51.5465, -0.404047, 0.66", "7.51754, -68.2105, 3.64781, 0.66", "7.65796, -81.0721, 6.79601, 0.66", "7.74985, -88.535, 8.61726, 0.66", "7.77136, -91.0115, 9.21589, 0.66", "7.81063, -94.3714, 10.054, 0.66", "7.79002, -97.5138, 10.857, 0.66", "7.7697, -101.138, 11.7148, 0.66", "7.78626, -103.092, 11.927, 0.66", "7.79483, -105.526, 11.9602, 0.66", "7.87196, -109.189, 11.576, 0.66", "7.96032, -114.0, 10.8294, 0.66", "8.0427, -116.095, 10.4888, 0.66", "8.51672, -125.933, 8.80173, 0.66", "8.68968, -128.255, 8.3686, 0.66", "9.37463, -135.424, 6.85671, 0.66", "9.70056, -138.451, 6.19474, 0.66", "10.3945, -144.013, 5.0616, 0.66", "10.7815, -147.204, 4.63051, 0.66", "11.1397, -150.315, 4.53674, 0.66", "11.4788, -153.319, 4.55698, 0.66", "11.69, -156.215, 4.57492, 0.66", "11.8742, -159.279, 4.46599, 0.66", "11.991, -164.01, 4.21274, 0.66", "12.0816, -166.889, 4.20057, 0.66", "12.1368, -170.381, 4.23344, 0.66", "12.1972, -175.108, 4.253, 0.66", "12.2174, -178.123, 4.11818, 0.66", "12.2858, -182.175, 3.75412, 0.66", "12.4781, -185.993, 3.38574, 0.66" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "7.22478, -28.7082, -5.76239, 0.66", "9.88237, -30.8115, -5.76814, 0.66", "15.9922, -35.6467, -5.78136, 0.33", "29.9775, -46.7147, -5.81162, 0.33", "30.5052, -47.1323, -5.81276, 0.66", "36.149, -51.5987, -5.82497, 0.33" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "14.9249, -33.7725, -0.194444, 0.33", "21.077, -47.4528, -0.194444, 0.33", "27.2291, -61.1331, -0.194444, 0.33" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "12.4781, -185.993, 3.38574, 0.66", "15.9654, -189.828, 4.89008, 0.66", "17.8519, -192.015, 6.0826, 0.66", "20.667, -195.402, 8.9627, 0.66", "22.4022, -197.43, 11.0223, 0.66", "25.6483, -201.161, 15.2667, 0.66", "28.1469, -203.88, 18.5172, 0.66", "30.51, -206.365, 21.9255, 0.66", "35.6555, -211.178, 29.2189, 0.66", "38.617, -213.695, 33.3429, 0.66", "42.06, -216.608, 38.2384, 0.33", "43.4731, -217.751, 40.117, 0.33", "43.9892, -218.112, 40.7336, 0.66", "47.1984, -220.023, 44.154, 0.33", "47.955, -220.382, 44.6438, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "12.4781, -185.993, 3.38574, 0.66", "12.7653, -189.568, 4.53369, 0.66", "13.1248, -194.188, 6.03978, 0.66", "14.0076, -203.426, 8.93905, 0.66", "14.36, -207.451, 10.1494, 0.66", "14.862, -212.351, 11.6746, 0.66", "15.3489, -217.327, 13.0698, 0.66", "15.631, -220.122, 13.7617, 0.66", "15.9102, -223.988, 14.5346, 0.66", "16.423, -231.418, 15.7248, 0.66", "16.7409, -235.636, 16.202, 0.66", "17.0809, -240.584, 16.6734, 0.66", "17.2951, -244.767, 16.7862, 0.66", "17.3531, -247.033, 16.8131, 0.66", "17.4284, -254.649, 16.7672, 0.66", "17.4666, -258.589, 16.617, 0.66", "17.4284, -264.048, 16.3473, 0.66", "17.4852, -268.423, 16.3263, 0.66", "17.514, -270.365, 16.2948, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "17.514, -270.365, 16.2948, 0.66", "17.9702, -274.081, 16.6707, 0.66", "18.1909, -280.142, 17.7602, 0.66", "18.2581, -286.618, 19.0812, 0.66", "18.1852, -290.869, 19.9335, 0.66", "18.0988, -296.741, 20.973, 0.66", "17.9154, -307.12, 22.4394, 0.66", "17.6592, -314.218, 23.2485, 0.66", "17.382, -319.091, 23.8211, 0.66", "17.1845, -324.183, 24.3124, 0.66", "17.0346, -329.892, 24.8239, 0.66", "16.9911, -333.795, 25.1511, 0.66", "17.1223, -339.148, 25.5148, 0.66", "17.3582, -344.067, 25.8634, 0.66", "17.8292, -355.646, 26.9478, 0.66", "18.066, -360.249, 27.486, 0.66", "18.5803, -371.805, 28.7075, 0.66", "18.8066, -376.46, 29.026, 0.66", "19.0226, -380.939, 29.1493, 0.66", "19.2455, -384.963, 29.0875, 0.66", "19.5553, -391.552, 28.8718, 0.66", "19.7663, -397.188, 28.5975, 0.66", "20.2537, -408.01, 27.6803, 0.66", "20.6131, -413.474, 27.2772, 0.66", "20.9102, -417.728, 26.9967, 0.66", "21.3503, -423.452, 26.6794, 0.66", "23.0582, -444.986, 25.453, 0.66", "23.8439, -452.89, 24.916, 0.66", "26.1055, -473.63, 23.2692, 0.66", "27.0265, -481.463, 22.5627, 0.66", "27.9459, -489.171, 21.9378, 0.66", "28.617, -494.533, 21.5562, 0.66", "29.6344, -501.87, 21.0304, 0.66", "30.6015, -510.034, 20.4099, 0.66", "31.7096, -518.923, 19.3889, 0.66", "32.293, -523.891, 18.8143, 0.66", "32.6642, -527.358, 18.5146, 0.66", "33.7688, -540.834, 18.0567, 0.66", "34.1046, -545.036, 17.9238, 0.66", "34.6981, -551.921, 17.3829, 0.66", "35.3492, -558.8, 16.7436, 0.66", "35.9232, -564.13, 16.3331, 0.66", "37.2383, -577.2, 15.885, 0.66", "38.7771, -592.22, 15.818, 0.66", "39.9107, -602.442, 15.7526, 0.66", "40.5068, -607.576, 15.6213, 0.66", "42.8725, -626.345, 14.8116, 0.66", "44.4133, -638.372, 13.7852, 0.66", "44.8938, -641.883, 13.417, 0.66", "45.7503, -647.568, 12.7037, 0.66", "47.1064, -655.892, 11.4147, 0.66", "47.6707, -659.483, 10.6983, 0.66", "49.1922, -669.083, 8.32315, 0.66", "52.5876, -689.09, 3.09784, 0.66", "54.274, -699.425, 0.750681, 0.66", "54.8965, -703.29, 0.0269389, 0.33", "55.3124, -705.875, -0.347196, 1.33", "56.3337, -712.019, -0.799774, 0.66", "57.6872, -719.448, -0.77374, 0.66", "58.7055, -724.727, -0.541366, 0.66", "59.7469, -730.078, -0.11095, 0.66", "60.7122, -734.452, 0.264216, 0.66", "64.5648, -752.447, 2.29423, 0.66", "65.0664, -754.988, 2.63695, 0.33", "65.718, -758.62, 3.09032, 1.33", "66.3802, -762.221, 3.45561, 0.66", "66.8682, -765.051, 3.71639, 0.33", "68.1135, -772.868, 4.44077, 0.66", "68.2932, -776.928, 5.0721, 0.66", "68.3051, -782.307, 6.10247, 0.33" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 25
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "17.514, -270.365, 16.2948, 0.66", "14.3289, -279.144, 15.2589, 0.66", "11.732, -286.595, 14.3, 0.66", "9.88687, -292.2, 13.9926, 0.33", "7.30374, -300.094, 13.8813, 0.33", "6.86796, -301.385, 13.9296, 0.66", "5.51289, -305.579, 14.2086, 0.33", "4.56041, -308.642, 14.6081, 0.66", "2.5825, -315.895, 15.3929, 0.33", "2.28555, -317.043, 15.5558, 0.66", "0.268331, -324.816, 16.6331, 0.33", "-0.616011, -328.847, 17.3736, 0.33", "-1.40048, -333.232, 18.3296, 0.66", "-2.23528, -338.487, 19.6435, 0.33", "-2.58238, -341.325, 20.3197, 0.33", "-2.68843, -342.918, 20.8029, 0.66", "-2.75572, -349.639, 23.9368, 0.33", "-2.78097, -350.621, 24.5306, 0.66", "-2.78641, -353.103, 26.2978, 0.33", "-2.81834, -354.379, 27.2285, 0.33", "-2.87161, -355.728, 28.0624, 0.66", "-3.21237, -360.772, 30.593, 0.33", "-3.57064, -363.848, 31.5774, 0.33", "-3.67527, -365.009, 31.872, 0.66", "-3.78218, -367.258, 32.2555, 0.33", "-3.83696, -368.449, 32.3732, 0.66", "-3.90104, -369.96, 32.4289, 0.33", "-3.95838, -371.522, 32.3685, 0.66", "-4.08875, -373.812, 32.3161, 0.33", "-4.15648, -374.648, 32.3118, 0.66", "-4.86356, -381.575, 32.421, 0.33", "-4.91914, -382.017, 32.4282, 0.66", "-5.17617, -383.61, 32.455, 0.33", "-5.33443, -384.44, 32.4686, 0.66", "-5.73199, -386.706, 32.7486, 0.33", "-5.89305, -387.745, 32.9539, 0.66", "-6.12337, -389.605, 33.4241, 0.33", "-6.26732, -390.923, 33.7792, 0.66", "-6.39212, -392.433, 34.2348, 0.33", "-6.889, -399.466, 36.6119, 0.33", "-7.00705, -401.521, 37.4182, 0.66" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "68.3051, -782.307, 6.10247, 0.66", "69.2429, -785.672, 5.51675, 0.66", "69.6001, -787.437, 5.6262, 1.33", "69.8407, -788.96, 5.84134, 0.66", "70.1216, -790.874, 6.04624, 0.66", "70.6487, -795.009, 6.67691, 0.33", "71.2831, -800.015, 7.57879, 0.66", "71.9513, -806.502, 9.13776, 0.66", "72.2909, -809.736, 10.0502, 0.66", "72.7745, -813.334, 11.0116, 0.33", "73.4923, -817.927, 12.0741, 0.33", "73.7117, -819.221, 12.2773, 0.66", "74.0123, -820.282, 12.2684, 0.33", "74.3191, -821.192, 12.1165, 0.66", "76.2349, -826.489, 11.0006, 0.33", "77.062, -828.7, 10.5422, 0.66", "77.85, -830.792, 10.0227, 0.33", "79.8643, -836.754, 8.75948, 0.33", "81.0032, -840.254, 8.16767, 0.66", "82.9788, -846.607, 7.34491, 0.33", "83.826, -849.613, 7.1019, 0.66", "84.641, -852.584, 6.93545, 1.33", "86.3929, -859.381, 6.82294, 0.33", "87.1319, -862.759, 6.95869, 0.33", "87.4036, -864.09, 7.04229, 0.66", "87.9755, -867.452, 7.3485, 0.33", "88.654, -871.97, 7.81163, 0.33", "88.8925, -873.622, 8.03559, 1.33", "89.5533, -878.368, 8.66701, 0.33", "89.7061, -880.015, 8.87653, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "68.3051, -782.307, 6.10247, 0.66", "67.1454, -784.23, 3.91074, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "89.7061, -880.015, 8.87653, 0.66", "87.3431, -879.714, 8.62012, 0.66" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "89.7061, -880.015, 8.87653, 0.66", "89.94, -881.025, 8.79043, 0.66", "90.9815, -885.522, 8.40703, 0.33", "91.3127, -886.952, 8.28509, 1.33" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "91.3127, -886.952, 8.28509, 0.33", "94.1681, -894.161, 13.7249, 0.33", "94.4557, -894.861, 14.1997, 1.33", "95.3159, -896.815, 15.4205, 0.33", "95.5145, -897.22, 15.623, 0.66", "96.5522, -899.142, 16.4011, 0.33", "96.8671, -899.726, 16.6372, 0.66", "97.1989, -900.251, 16.5917, 0.33", "97.6667, -900.905, 16.5134, 0.66", "99.4321, -902.935, 16.1303, 0.33", "100.143, -903.667, 15.9498, 1.33" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "91.3127, -886.952, 8.28509, 0.33", "90.1095, -903.899, 12.9035, 0.33", "89.4532, -913.142, 15.4222, 0.33", "89.3501, -914.594, 15.8181, 0.66", "88.6728, -924.134, 18.4178, 0.33", "88.5825, -925.406, 18.7643, 0.66" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_11", "dend_8", "dend_8", "dend_8", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "3.7868198E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "3.7868198E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.936579E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.2499998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dSTUT_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dSTUT_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate dSTUT214_L4_BP_a62582b74c_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_12, id: dend_12, parent: dend_2
create dend_12
public dend_12
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_5, id: dend_5, parent: dend_3
create dend_5
public dend_5
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_11, id: dend_11, parent: dend_7
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_16
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dSTUT_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dSTUT_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_0(0), soma_0(0.4500001318721313)
    connect axon_0(0), soma_0(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_12(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_5(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_11(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -3.08452, 6.27464, 0.312461, 1.46623 ) }
    soma_0 { pt3dadd( -2.79927, 5.64032, 0.287115, 2.64844 ) }
    soma_0 { pt3dadd( -2.51401, 5.00599, 0.26177, 4.10361 ) }
    soma_0 { pt3dadd( -2.22875, 4.37167, 0.236425, 4.91598 ) }
    soma_0 { pt3dadd( -1.94349, 3.73735, 0.21108, 5.72835 ) }
    soma_0 { pt3dadd( -1.65823, 3.10303, 0.185734, 6.53421 ) }
    soma_0 { pt3dadd( -1.37297, 2.46871, 0.160389, 7.31212 ) }
    soma_0 { pt3dadd( -1.08771, 1.83438, 0.135044, 8.08989 ) }
    soma_0 { pt3dadd( -0.802456, 1.20006, 0.109699, 8.85679 ) }
    soma_0 { pt3dadd( -0.517198, 0.56574, 0.0843534, 8.93483 ) }
    soma_0 { pt3dadd( -0.23194, -0.0685822, 0.0590082, 8.92633 ) }
    soma_0 { pt3dadd( 0.0533189, -0.702904, 0.033663, 8.91784 ) }
    soma_0 { pt3dadd( 0.338577, -1.33723, 0.00831775, 8.90934 ) }
    soma_0 { pt3dadd( 0.623836, -1.97155, -0.0170275, 8.90084 ) }
    soma_0 { pt3dadd( 0.909094, -2.60587, -0.0423727, 8.82493 ) }
    soma_0 { pt3dadd( 1.19435, -3.24019, -0.067718, 7.82232 ) }
    soma_0 { pt3dadd( 1.47961, -3.87451, -0.0930632, 6.5965 ) }
    soma_0 { pt3dadd( 1.76487, -4.50884, -0.118408, 5.37067 ) }
    soma_0 { pt3dadd( 2.05013, -5.14316, -0.143754, 4.14485 ) }
    soma_0 { pt3dadd( 2.33539, -5.77748, -0.169099, 2.91903 ) }
    soma_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 1.76337 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 21/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 1.61629, -5.55298, -1.26548, 1.33 ) }
    dend_0 { pt3dadd( 2.67261, -9.91412, -2.11244, 1.33 ) }
    dend_0 { pt3dadd( 4.42395, -17.1447, -3.51668, 0.66 ) }
    dend_0 { pt3dadd( 5.7799, -22.7429, -4.60388, 0.66 ) }
    dend_0 { pt3dadd( 7.22478, -28.7082, -5.76239, 1.33 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 26/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 8.77276, -20.0921, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 29/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 7.22478, -28.7082, -5.76239, 0.66 ) }
    dend_2 { pt3dadd( 7.30446, -37.8974, -3.6133, 0.66 ) }
    dend_2 { pt3dadd( 7.40754, -51.5465, -0.404047, 0.66 ) }
    dend_2 { pt3dadd( 7.51754, -68.2105, 3.64781, 0.66 ) }
    dend_2 { pt3dadd( 7.65796, -81.0721, 6.79601, 0.66 ) }
    dend_2 { pt3dadd( 7.74985, -88.535, 8.61726, 0.66 ) }
    dend_2 { pt3dadd( 7.77136, -91.0115, 9.21589, 0.66 ) }
    dend_2 { pt3dadd( 7.81063, -94.3714, 10.054, 0.66 ) }
    dend_2 { pt3dadd( 7.79002, -97.5138, 10.857, 0.66 ) }
    dend_2 { pt3dadd( 7.7697, -101.138, 11.7148, 0.66 ) }
    dend_2 { pt3dadd( 7.78626, -103.092, 11.927, 0.66 ) }
    dend_2 { pt3dadd( 7.79483, -105.526, 11.9602, 0.66 ) }
    dend_2 { pt3dadd( 7.87196, -109.189, 11.576, 0.66 ) }
    dend_2 { pt3dadd( 7.96032, -114.0, 10.8294, 0.66 ) }
    dend_2 { pt3dadd( 8.0427, -116.095, 10.4888, 0.66 ) }
    dend_2 { pt3dadd( 8.51672, -125.933, 8.80173, 0.66 ) }
    dend_2 { pt3dadd( 8.68968, -128.255, 8.3686, 0.66 ) }
    dend_2 { pt3dadd( 9.37463, -135.424, 6.85671, 0.66 ) }
    dend_2 { pt3dadd( 9.70056, -138.451, 6.19474, 0.66 ) }
    dend_2 { pt3dadd( 10.3945, -144.013, 5.0616, 0.66 ) }
    dend_2 { pt3dadd( 10.7815, -147.204, 4.63051, 0.66 ) }
    dend_2 { pt3dadd( 11.1397, -150.315, 4.53674, 0.66 ) }
    dend_2 { pt3dadd( 11.4788, -153.319, 4.55698, 0.66 ) }
    dend_2 { pt3dadd( 11.69, -156.215, 4.57492, 0.66 ) }
    dend_2 { pt3dadd( 11.8742, -159.279, 4.46599, 0.66 ) }
    dend_2 { pt3dadd( 11.991, -164.01, 4.21274, 0.66 ) }
    dend_2 { pt3dadd( 12.0816, -166.889, 4.20057, 0.66 ) }
    dend_2 { pt3dadd( 12.1368, -170.381, 4.23344, 0.66 ) }
    dend_2 { pt3dadd( 12.1972, -175.108, 4.253, 0.66 ) }
    dend_2 { pt3dadd( 12.2174, -178.123, 4.11818, 0.66 ) }
    dend_2 { pt3dadd( 12.2858, -182.175, 3.75412, 0.66 ) }
    dend_2 { pt3dadd( 12.4781, -185.993, 3.38574, 0.66 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 61/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 7.22478, -28.7082, -5.76239, 0.66 ) }
    dend_1 { pt3dadd( 9.88237, -30.8115, -5.76814, 0.66 ) }
    dend_1 { pt3dadd( 15.9922, -35.6467, -5.78136, 0.33 ) }
    dend_1 { pt3dadd( 29.9775, -46.7147, -5.81162, 0.33 ) }
    dend_1 { pt3dadd( 30.5052, -47.1323, -5.81276, 0.66 ) }
    dend_1 { pt3dadd( 36.149, -51.5987, -5.82497, 0.33 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 67/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 21.077, -47.4528, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 27.2291, -61.1331, -0.194444, 0.33 ) }
    // Section: dend_12, id: dend_12, parent: dend_2 (entry count 70/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 12.4781, -185.993, 3.38574, 0.66 ) }
    dend_12 { pt3dadd( 15.9654, -189.828, 4.89008, 0.66 ) }
    dend_12 { pt3dadd( 17.8519, -192.015, 6.0826, 0.66 ) }
    dend_12 { pt3dadd( 20.667, -195.402, 8.9627, 0.66 ) }
    dend_12 { pt3dadd( 22.4022, -197.43, 11.0223, 0.66 ) }
    dend_12 { pt3dadd( 25.6483, -201.161, 15.2667, 0.66 ) }
    dend_12 { pt3dadd( 28.1469, -203.88, 18.5172, 0.66 ) }
    dend_12 { pt3dadd( 30.51, -206.365, 21.9255, 0.66 ) }
    dend_12 { pt3dadd( 35.6555, -211.178, 29.2189, 0.66 ) }
    dend_12 { pt3dadd( 38.617, -213.695, 33.3429, 0.66 ) }
    dend_12 { pt3dadd( 42.06, -216.608, 38.2384, 0.33 ) }
    dend_12 { pt3dadd( 43.4731, -217.751, 40.117, 0.33 ) }
    dend_12 { pt3dadd( 43.9892, -218.112, 40.7336, 0.66 ) }
    dend_12 { pt3dadd( 47.1984, -220.023, 44.154, 0.33 ) }
    dend_12 { pt3dadd( 47.955, -220.382, 44.6438, 0.66 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 85/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 12.4781, -185.993, 3.38574, 0.66 ) }
    dend_3 { pt3dadd( 12.7653, -189.568, 4.53369, 0.66 ) }
    dend_3 { pt3dadd( 13.1248, -194.188, 6.03978, 0.66 ) }
    dend_3 { pt3dadd( 14.0076, -203.426, 8.93905, 0.66 ) }
    dend_3 { pt3dadd( 14.36, -207.451, 10.1494, 0.66 ) }
    dend_3 { pt3dadd( 14.862, -212.351, 11.6746, 0.66 ) }
    dend_3 { pt3dadd( 15.3489, -217.327, 13.0698, 0.66 ) }
    dend_3 { pt3dadd( 15.631, -220.122, 13.7617, 0.66 ) }
    dend_3 { pt3dadd( 15.9102, -223.988, 14.5346, 0.66 ) }
    dend_3 { pt3dadd( 16.423, -231.418, 15.7248, 0.66 ) }
    dend_3 { pt3dadd( 16.7409, -235.636, 16.202, 0.66 ) }
    dend_3 { pt3dadd( 17.0809, -240.584, 16.6734, 0.66 ) }
    dend_3 { pt3dadd( 17.2951, -244.767, 16.7862, 0.66 ) }
    dend_3 { pt3dadd( 17.3531, -247.033, 16.8131, 0.66 ) }
    dend_3 { pt3dadd( 17.4284, -254.649, 16.7672, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_3 { pt3dadd( 17.4666, -258.589, 16.617, 0.66 ) }
    dend_3 { pt3dadd( 17.4284, -264.048, 16.3473, 0.66 ) }
    dend_3 { pt3dadd( 17.4852, -268.423, 16.3263, 0.66 ) }
    dend_3 { pt3dadd( 17.514, -270.365, 16.2948, 0.66 ) }
    // Section: dend_5, id: dend_5, parent: dend_3 (entry count 4/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 17.514, -270.365, 16.2948, 0.66 ) }
    dend_5 { pt3dadd( 17.9702, -274.081, 16.6707, 0.66 ) }
    dend_5 { pt3dadd( 18.1909, -280.142, 17.7602, 0.66 ) }
    dend_5 { pt3dadd( 18.2581, -286.618, 19.0812, 0.66 ) }
    dend_5 { pt3dadd( 18.1852, -290.869, 19.9335, 0.66 ) }
    dend_5 { pt3dadd( 18.0988, -296.741, 20.973, 0.66 ) }
    dend_5 { pt3dadd( 17.9154, -307.12, 22.4394, 0.66 ) }
    dend_5 { pt3dadd( 17.6592, -314.218, 23.2485, 0.66 ) }
    dend_5 { pt3dadd( 17.382, -319.091, 23.8211, 0.66 ) }
    dend_5 { pt3dadd( 17.1845, -324.183, 24.3124, 0.66 ) }
    dend_5 { pt3dadd( 17.0346, -329.892, 24.8239, 0.66 ) }
    dend_5 { pt3dadd( 16.9911, -333.795, 25.1511, 0.66 ) }
    dend_5 { pt3dadd( 17.1223, -339.148, 25.5148, 0.66 ) }
    dend_5 { pt3dadd( 17.3582, -344.067, 25.8634, 0.66 ) }
    dend_5 { pt3dadd( 17.8292, -355.646, 26.9478, 0.66 ) }
    dend_5 { pt3dadd( 18.066, -360.249, 27.486, 0.66 ) }
    dend_5 { pt3dadd( 18.5803, -371.805, 28.7075, 0.66 ) }
    dend_5 { pt3dadd( 18.8066, -376.46, 29.026, 0.66 ) }
    dend_5 { pt3dadd( 19.0226, -380.939, 29.1493, 0.66 ) }
    dend_5 { pt3dadd( 19.2455, -384.963, 29.0875, 0.66 ) }
    dend_5 { pt3dadd( 19.5553, -391.552, 28.8718, 0.66 ) }
    dend_5 { pt3dadd( 19.7663, -397.188, 28.5975, 0.66 ) }
    dend_5 { pt3dadd( 20.2537, -408.01, 27.6803, 0.66 ) }
    dend_5 { pt3dadd( 20.6131, -413.474, 27.2772, 0.66 ) }
    dend_5 { pt3dadd( 20.9102, -417.728, 26.9967, 0.66 ) }
    dend_5 { pt3dadd( 21.3503, -423.452, 26.6794, 0.66 ) }
    dend_5 { pt3dadd( 23.0582, -444.986, 25.453, 0.66 ) }
    dend_5 { pt3dadd( 23.8439, -452.89, 24.916, 0.66 ) }
    dend_5 { pt3dadd( 26.1055, -473.63, 23.2692, 0.66 ) }
    dend_5 { pt3dadd( 27.0265, -481.463, 22.5627, 0.66 ) }
    dend_5 { pt3dadd( 27.9459, -489.171, 21.9378, 0.66 ) }
    dend_5 { pt3dadd( 28.617, -494.533, 21.5562, 0.66 ) }
    dend_5 { pt3dadd( 29.6344, -501.87, 21.0304, 0.66 ) }
    dend_5 { pt3dadd( 30.6015, -510.034, 20.4099, 0.66 ) }
    dend_5 { pt3dadd( 31.7096, -518.923, 19.3889, 0.66 ) }
    dend_5 { pt3dadd( 32.293, -523.891, 18.8143, 0.66 ) }
    dend_5 { pt3dadd( 32.6642, -527.358, 18.5146, 0.66 ) }
    dend_5 { pt3dadd( 33.7688, -540.834, 18.0567, 0.66 ) }
    dend_5 { pt3dadd( 34.1046, -545.036, 17.9238, 0.66 ) }
    dend_5 { pt3dadd( 34.6981, -551.921, 17.3829, 0.66 ) }
    dend_5 { pt3dadd( 35.3492, -558.8, 16.7436, 0.66 ) }
    dend_5 { pt3dadd( 35.9232, -564.13, 16.3331, 0.66 ) }
    dend_5 { pt3dadd( 37.2383, -577.2, 15.885, 0.66 ) }
    dend_5 { pt3dadd( 38.7771, -592.22, 15.818, 0.66 ) }
    dend_5 { pt3dadd( 39.9107, -602.442, 15.7526, 0.66 ) }
    dend_5 { pt3dadd( 40.5068, -607.576, 15.6213, 0.66 ) }
    dend_5 { pt3dadd( 42.8725, -626.345, 14.8116, 0.66 ) }
    dend_5 { pt3dadd( 44.4133, -638.372, 13.7852, 0.66 ) }
    dend_5 { pt3dadd( 44.8938, -641.883, 13.417, 0.66 ) }
    dend_5 { pt3dadd( 45.7503, -647.568, 12.7037, 0.66 ) }
    dend_5 { pt3dadd( 47.1064, -655.892, 11.4147, 0.66 ) }
    dend_5 { pt3dadd( 47.6707, -659.483, 10.6983, 0.66 ) }
    dend_5 { pt3dadd( 49.1922, -669.083, 8.32315, 0.66 ) }
    dend_5 { pt3dadd( 52.5876, -689.09, 3.09784, 0.66 ) }
    dend_5 { pt3dadd( 54.274, -699.425, 0.750681, 0.66 ) }
    dend_5 { pt3dadd( 54.8965, -703.29, 0.0269389, 0.33 ) }
    dend_5 { pt3dadd( 55.3124, -705.875, -0.347196, 1.33 ) }
    dend_5 { pt3dadd( 56.3337, -712.019, -0.799774, 0.66 ) }
    dend_5 { pt3dadd( 57.6872, -719.448, -0.77374, 0.66 ) }
    dend_5 { pt3dadd( 58.7055, -724.727, -0.541366, 0.66 ) }
    dend_5 { pt3dadd( 59.7469, -730.078, -0.11095, 0.66 ) }
    dend_5 { pt3dadd( 60.7122, -734.452, 0.264216, 0.66 ) }
    dend_5 { pt3dadd( 64.5648, -752.447, 2.29423, 0.66 ) }
    dend_5 { pt3dadd( 65.0664, -754.988, 2.63695, 0.33 ) }
    dend_5 { pt3dadd( 65.718, -758.62, 3.09032, 1.33 ) }
    dend_5 { pt3dadd( 66.3802, -762.221, 3.45561, 0.66 ) }
    dend_5 { pt3dadd( 66.8682, -765.051, 3.71639, 0.33 ) }
    dend_5 { pt3dadd( 68.1135, -772.868, 4.44077, 0.66 ) }
    dend_5 { pt3dadd( 68.2932, -776.928, 5.0721, 0.66 ) }
    dend_5 { pt3dadd( 68.3051, -782.307, 6.10247, 0.33 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 74/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 17.514, -270.365, 16.2948, 0.66 ) }
    dend_4 { pt3dadd( 14.3289, -279.144, 15.2589, 0.66 ) }
    dend_4 { pt3dadd( 11.732, -286.595, 14.3, 0.66 ) }
    dend_4 { pt3dadd( 9.88687, -292.2, 13.9926, 0.33 ) }
    dend_4 { pt3dadd( 7.30374, -300.094, 13.8813, 0.33 ) }
    dend_4 { pt3dadd( 6.86796, -301.385, 13.9296, 0.66 ) }
    dend_4 { pt3dadd( 5.51289, -305.579, 14.2086, 0.33 ) }
    dend_4 { pt3dadd( 4.56041, -308.642, 14.6081, 0.66 ) }
    dend_4 { pt3dadd( 2.5825, -315.895, 15.3929, 0.33 ) }
    dend_4 { pt3dadd( 2.28555, -317.043, 15.5558, 0.66 ) }
    dend_4 { pt3dadd( 0.268331, -324.816, 16.6331, 0.33 ) }
    dend_4 { pt3dadd( -0.616011, -328.847, 17.3736, 0.33 ) }
    dend_4 { pt3dadd( -1.40048, -333.232, 18.3296, 0.66 ) }
    dend_4 { pt3dadd( -2.23528, -338.487, 19.6435, 0.33 ) }
    dend_4 { pt3dadd( -2.58238, -341.325, 20.3197, 0.33 ) }
    dend_4 { pt3dadd( -2.68843, -342.918, 20.8029, 0.66 ) }
    dend_4 { pt3dadd( -2.75572, -349.639, 23.9368, 0.33 ) }
    dend_4 { pt3dadd( -2.78097, -350.621, 24.5306, 0.66 ) }
    dend_4 { pt3dadd( -2.78641, -353.103, 26.2978, 0.33 ) }
    dend_4 { pt3dadd( -2.81834, -354.379, 27.2285, 0.33 ) }
    dend_4 { pt3dadd( -2.87161, -355.728, 28.0624, 0.66 ) }
    dend_4 { pt3dadd( -3.21237, -360.772, 30.593, 0.33 ) }
    dend_4 { pt3dadd( -3.57064, -363.848, 31.5774, 0.33 ) }
    dend_4 { pt3dadd( -3.67527, -365.009, 31.872, 0.66 ) }
    dend_4 { pt3dadd( -3.78218, -367.258, 32.2555, 0.33 ) }
    dend_4 { pt3dadd( -3.83696, -368.449, 32.3732, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_4 { pt3dadd( -3.90104, -369.96, 32.4289, 0.33 ) }
    dend_4 { pt3dadd( -3.95838, -371.522, 32.3685, 0.66 ) }
    dend_4 { pt3dadd( -4.08875, -373.812, 32.3161, 0.33 ) }
    dend_4 { pt3dadd( -4.15648, -374.648, 32.3118, 0.66 ) }
    dend_4 { pt3dadd( -4.86356, -381.575, 32.421, 0.33 ) }
    dend_4 { pt3dadd( -4.91914, -382.017, 32.4282, 0.66 ) }
    dend_4 { pt3dadd( -5.17617, -383.61, 32.455, 0.33 ) }
    dend_4 { pt3dadd( -5.33443, -384.44, 32.4686, 0.66 ) }
    dend_4 { pt3dadd( -5.73199, -386.706, 32.7486, 0.33 ) }
    dend_4 { pt3dadd( -5.89305, -387.745, 32.9539, 0.66 ) }
    dend_4 { pt3dadd( -6.12337, -389.605, 33.4241, 0.33 ) }
    dend_4 { pt3dadd( -6.26732, -390.923, 33.7792, 0.66 ) }
    dend_4 { pt3dadd( -6.39212, -392.433, 34.2348, 0.33 ) }
    dend_4 { pt3dadd( -6.889, -399.466, 36.6119, 0.33 ) }
    dend_4 { pt3dadd( -7.00705, -401.521, 37.4182, 0.66 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 15/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 68.3051, -782.307, 6.10247, 0.66 ) }
    dend_7 { pt3dadd( 69.2429, -785.672, 5.51675, 0.66 ) }
    dend_7 { pt3dadd( 69.6001, -787.437, 5.6262, 1.33 ) }
    dend_7 { pt3dadd( 69.8407, -788.96, 5.84134, 0.66 ) }
    dend_7 { pt3dadd( 70.1216, -790.874, 6.04624, 0.66 ) }
    dend_7 { pt3dadd( 70.6487, -795.009, 6.67691, 0.33 ) }
    dend_7 { pt3dadd( 71.2831, -800.015, 7.57879, 0.66 ) }
    dend_7 { pt3dadd( 71.9513, -806.502, 9.13776, 0.66 ) }
    dend_7 { pt3dadd( 72.2909, -809.736, 10.0502, 0.66 ) }
    dend_7 { pt3dadd( 72.7745, -813.334, 11.0116, 0.33 ) }
    dend_7 { pt3dadd( 73.4923, -817.927, 12.0741, 0.33 ) }
    dend_7 { pt3dadd( 73.7117, -819.221, 12.2773, 0.66 ) }
    dend_7 { pt3dadd( 74.0123, -820.282, 12.2684, 0.33 ) }
    dend_7 { pt3dadd( 74.3191, -821.192, 12.1165, 0.66 ) }
    dend_7 { pt3dadd( 76.2349, -826.489, 11.0006, 0.33 ) }
    dend_7 { pt3dadd( 77.062, -828.7, 10.5422, 0.66 ) }
    dend_7 { pt3dadd( 77.85, -830.792, 10.0227, 0.33 ) }
    dend_7 { pt3dadd( 79.8643, -836.754, 8.75948, 0.33 ) }
    dend_7 { pt3dadd( 81.0032, -840.254, 8.16767, 0.66 ) }
    dend_7 { pt3dadd( 82.9788, -846.607, 7.34491, 0.33 ) }
    dend_7 { pt3dadd( 83.826, -849.613, 7.1019, 0.66 ) }
    dend_7 { pt3dadd( 84.641, -852.584, 6.93545, 1.33 ) }
    dend_7 { pt3dadd( 86.3929, -859.381, 6.82294, 0.33 ) }
    dend_7 { pt3dadd( 87.1319, -862.759, 6.95869, 0.33 ) }
    dend_7 { pt3dadd( 87.4036, -864.09, 7.04229, 0.66 ) }
    dend_7 { pt3dadd( 87.9755, -867.452, 7.3485, 0.33 ) }
    dend_7 { pt3dadd( 88.654, -871.97, 7.81163, 0.33 ) }
    dend_7 { pt3dadd( 88.8925, -873.622, 8.03559, 1.33 ) }
    dend_7 { pt3dadd( 89.5533, -878.368, 8.66701, 0.33 ) }
    dend_7 { pt3dadd( 89.7061, -880.015, 8.87653, 0.66 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 45/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 68.3051, -782.307, 6.10247, 0.66 ) }
    dend_6 { pt3dadd( 67.1454, -784.23, 3.91074, 0.66 ) }
    // Section: dend_11, id: dend_11, parent: dend_7 (entry count 47/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 89.7061, -880.015, 8.87653, 0.66 ) }
    dend_11 { pt3dadd( 87.3431, -879.714, 8.62012, 0.66 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 49/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 89.7061, -880.015, 8.87653, 0.66 ) }
    dend_8 { pt3dadd( 89.94, -881.025, 8.79043, 0.66 ) }
    dend_8 { pt3dadd( 90.9815, -885.522, 8.40703, 0.33 ) }
    dend_8 { pt3dadd( 91.3127, -886.952, 8.28509, 1.33 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 53/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 91.3127, -886.952, 8.28509, 0.33 ) }
    dend_10 { pt3dadd( 94.1681, -894.161, 13.7249, 0.33 ) }
    dend_10 { pt3dadd( 94.4557, -894.861, 14.1997, 1.33 ) }
    dend_10 { pt3dadd( 95.3159, -896.815, 15.4205, 0.33 ) }
    dend_10 { pt3dadd( 95.5145, -897.22, 15.623, 0.66 ) }
    dend_10 { pt3dadd( 96.5522, -899.142, 16.4011, 0.33 ) }
    dend_10 { pt3dadd( 96.8671, -899.726, 16.6372, 0.66 ) }
    dend_10 { pt3dadd( 97.1989, -900.251, 16.5917, 0.33 ) }
    dend_10 { pt3dadd( 97.6667, -900.905, 16.5134, 0.66 ) }
    dend_10 { pt3dadd( 99.4321, -902.935, 16.1303, 0.33 ) }
    dend_10 { pt3dadd( 100.143, -903.667, 15.9498, 1.33 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 64/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 91.3127, -886.952, 8.28509, 0.33 ) }
    dend_9 { pt3dadd( 90.1095, -903.899, 12.9035, 0.33 ) }
    dend_9 { pt3dadd( 89.4532, -913.142, 15.4222, 0.33 ) }
    dend_9 { pt3dadd( 89.3501, -914.594, 15.8181, 0.66 ) }
    dend_9 { pt3dadd( 88.6728, -924.134, 18.4178, 0.33 ) }
    dend_9 { pt3dadd( 88.5825, -925.406, 18.7643, 0.66 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_2 = new SectionList()
    dend_0 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_3 = new SectionList()
    soma_0 ModelViewParmSubset_3.append()
    dend_0 ModelViewParmSubset_3.append()
    dend_2 ModelViewParmSubset_3.append()
    dend_1 ModelViewParmSubset_3.append()
    dend_12 ModelViewParmSubset_3.append()
    dend_3 ModelViewParmSubset_3.append()
    dend_5 ModelViewParmSubset_3.append()
    dend_4 ModelViewParmSubset_3.append()
    dend_7 ModelViewParmSubset_3.append()
    dend_6 ModelViewParmSubset_3.append()
    dend_11 ModelViewParmSubset_3.append()
    dend_8 ModelViewParmSubset_3.append()
    dend_10 ModelViewParmSubset_3.append()
    dend_9 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_4 = new SectionList()
    axon_0 ModelViewParmSubset_4.append()
    axon_1 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_2 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_12 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_3 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_5 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_4 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_7 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_0 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_1 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_6 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_11 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_8 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_10 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_9 OneSecGrp_SectionRef_16.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_8 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 3.7868198E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 3.7868198E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 8.936579E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert KdShu2007
        gmax_KdShu2007 = 4.2499998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dSTUT_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__dSTUT_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dSTUT_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__dSTUT_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_2 nseg = 9
    dend_12 nseg = 3
    dend_3 nseg = 5
    dend_5 nseg = 25
    dend_4 nseg = 7
    dend_7 nseg = 5
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate dSTUT214_L4_BP_a62582b74c_0_0


