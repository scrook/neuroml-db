// Cell: bAC217_L23_DBC_55c1d16c8c_0_0
/*
{
  "id" : "bAC217_L23_DBC_55c1d16c8c_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-1.10046, -10.7769, 0.0, 1.2583", "-0.977881, -9.66658, 0.0, 1.27734", "-0.855301, -8.55625, 0.0, 1.93125", "-0.732721, -7.44592, 0.0, 2.73299", "-0.610142, -6.33559, 0.0, 3.81421", "-0.487562, -5.22526, 0.0, 4.86299", "-0.364982, -4.11493, 0.0, 5.49704", "-0.242403, -3.0046, 0.0, 6.12703", "-0.119823, -1.89427, 0.0, 6.84433", "0.00275685, -0.783937, 0.0, 7.36999", "0.125337, 0.326393, 0.0, 7.59231", "0.247916, 1.43672, 0.0, 7.67062", "0.370496, 2.54705, 0.0, 7.50992", "0.493076, 3.65738, 0.0, 7.33464", "0.615655, 4.76771, 0.0, 7.00391", "0.738235, 5.87804, 0.0, 6.54709", "0.860815, 6.98838, 0.0, 5.62524", "0.983394, 8.09871, 0.0, 4.30117", "1.10597, 9.20904, 0.0, 3.55313", "1.22855, 10.3194, 0.0, 2.60096", "1.35113, 11.4297, 0.0, 1.60168" ]
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-0.382575, -10.9767, -3.38, 1.94", "0.429178, -14.854, -3.38, 1.94", "1.14292, -18.2632, -3.38, 1.94", "1.44796, -19.7202, -3.38, 3.6" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4999996983969059
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "2.29743, 11.5533, -4.34, 1.66", "2.40614, 16.5356, -3.87607, 1.66", "2.46807, 19.3741, -3.61176, 1.66" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4999996983969059
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "1.35113, 11.4297, 0.0, 0.55", "2.99712, 26.3391, 0.0, 0.55", "4.64311, 41.2485, 0.0, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_33",
    "id" : "dend_33",
    "points3d" : [ "1.44796, -19.7202, -3.38, 0.83", "3.43004, -20.7605, -3.94673, 0.83", "5.41908, -21.7508, -4.5045, 0.83", "7.64022, -22.8478, -5.11437, 0.83", "10.0371, -23.8906, -5.76434, 0.83", "12.7838, -25.0545, -6.5016, 0.83", "14.1996, -25.6463, -6.87805, 0.83", "16.4343, -26.5587, -7.45809, 0.83", "18.92, -27.4315, -7.95836, 0.83", "20.9804, -28.0704, -8.24873, 0.83", "22.602, -28.6121, -8.38909, 0.83", "24.2165, -29.1783, -8.47452, 0.83", "24.5719, -29.3268, -8.50807, 0.83", "27.463, -30.7277, -8.90785, 0.83", "30.3285, -32.21, -9.30889, 0.83", "32.41, -33.402, -9.62269, 0.83", "33.8012, -34.1892, -9.86796, 0.83", "36.5736, -35.8744, -10.498, 1.11", "38.6936, -37.3018, -11.1862, 1.11" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "1.44796, -19.7202, -3.38, 1.94", "1.43753, -24.7488, -1.04179, 1.94", "1.43147, -27.6668, 0.315035, 2.22" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "2.46807, 19.3741, -3.61176, 0.83", "0.383911, 21.1727, -5.33043, 0.83", "-0.511841, 22.0657, -6.02943, 0.83", "-1.84153, 23.5767, -7.03254, 0.83", "-3.13955, 25.1883, -7.98026, 0.83", "-4.4069, 27.0777, -8.90538, 0.83", "-5.20332, 28.3385, -9.47949, 0.83", "-6.15878, 30.1753, -10.0871, 0.83", "-6.93103, 32.0234, -10.5983, 0.83", "-7.75788, 34.4802, -11.1722, 0.83", "-8.63533, 37.46, -11.802, 0.83", "-9.11283, 39.1403, -12.148, 0.83", "-10.1864, 43.0746, -12.9345, 0.83", "-10.7503, 45.3481, -13.3591, 0.83", "-11.0753, 46.7297, -13.6078, 0.83", "-11.6877, 49.4661, -14.0839, 0.83", "-12.1207, 51.2652, -14.4129, 0.83", "-12.7153, 53.761, -14.8661, 0.83", "-13.3175, 55.7845, -15.2971, 0.83", "-14.0477, 57.8831, -15.8, 0.83", "-14.7887, 59.7417, -16.2953, 0.83", "-15.265, 60.8282, -16.6077, 0.83", "-15.6689, 61.6569, -16.8674, 0.83", "-16.6389, 63.3465, -17.4745, 0.55", "-18.5238, 66.5158, -18.6479, 1.11", "-19.7422, 68.623, -19.4096, 1.11", "-21.2416, 71.3592, -20.3549, 1.11", "-22.01, 72.9301, -20.8487, 1.11", "-23.1533, 75.5002, -21.5963, 0.83", "-24.5163, 78.7712, -22.4992, 0.55", "-25.1867, 80.4145, -22.9452, 0.55", "-26.9867, 85.081, -24.1568, 0.83", "-27.8139, 87.3115, -24.7184, 0.83", "-28.5065, 89.2433, -25.1921, 0.83", "-29.6614, 92.5631, -25.9875, 0.83", "-30.2647, 94.227, -26.3992, 0.83", "-30.8796, 95.8852, -26.8166, 0.83", "-31.5743, 97.7651, -27.2886, 0.83", "-31.9856, 98.7922, -27.5633, 0.83", "-33.1211, 101.804, -28.3313, 0.83" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "2.46807, 19.3741, -3.61176, 0.83", "0.770845, 22.2622, -4.57461, 0.83", "-0.91216, 25.1261, -5.52939, 1.66" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "4.64311, 41.2485, 0.0, 0.55", "6.28909, 56.158, 0.0, 0.55", "7.93508, 71.0674, 0.0, 0.55" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_35",
    "id" : "dend_35",
    "points3d" : [ "38.6936, -37.3018, -11.1862, 0.83", "40.985, -38.0628, -11.6077, 0.83", "44.0272, -39.244, -12.1831, 0.83", "45.2059, -39.8219, -12.3957, 0.55", "47.2475, -40.9921, -12.7561, 0.83", "48.9045, -41.9958, -13.1914, 0.83", "49.9767, -42.7153, -13.529, 0.55", "50.648, -43.3161, -13.7993, 0.83", "51.8007, -44.57, -14.4521, 0.55", "52.7041, -45.5714, -15.0811, 0.83", "54.5299, -47.8081, -17.2865, 0.55", "55.1832, -48.6494, -18.3747, 0.28", "55.5972, -49.2339, -19.1585, 0.55", "56.4873, -50.5572, -20.9965, 0.28", "56.8863, -51.1601, -21.8274, 0.55", "58.7435, -54.4472, -26.1603, 0.28", "59.5815, -56.0642, -28.1138, 0.83", "60.7062, -58.0601, -30.4534, 0.55", "61.1023, -58.6979, -31.1766, 0.28", "61.9484, -60.0659, -32.586, 1.11", "63.8243, -62.9453, -35.2287, 0.28", "64.7085, -64.137, -36.1346, 0.83", "65.4108, -65.0097, -36.7968, 0.28", "66.4982, -66.1079, -37.8205, 0.55", "67.2036, -66.7571, -38.4763, 0.28", "68.8637, -68.1927, -39.9789, 0.83", "69.9238, -69.0682, -40.8327, 0.55", "70.684, -69.6937, -41.4631, 0.55", "72.6016, -71.3643, -43.0316, 0.83", "74.0459, -72.6869, -44.1475, 0.55", "74.8976, -73.4633, -44.8151, 0.83", "75.6506, -74.1982, -45.4299, 0.55", "76.7409, -75.3292, -46.2917, 0.55", "77.9217, -76.4881, -47.1579, 0.55", "78.3434, -76.9239, -47.4264, 0.83", "79.516, -78.2313, -48.3812, 0.55", "80.6538, -79.521, -49.379, 0.55", "80.9938, -79.9121, -49.6843, 0.83", "82.7342, -81.913, -51.1578, 0.55", "84.4994, -83.9161, -52.5778, 1.11", "86.3886, -86.0976, -54.0497, 0.55", "88.7577, -89.0657, -55.8882, 0.83", "89.7313, -90.3218, -56.6377, 0.28", "90.7191, -91.6888, -57.35, 0.55", "91.3086, -92.5196, -57.7148, 0.28", "92.1555, -93.6408, -58.1214, 0.55", "93.6998, -95.5803, -58.6193, 0.28", "95.1314, -97.4079, -59.2181, 0.55", "96.4089, -99.0012, -59.827, 0.28", "97.1995, -99.9691, -60.2738, 0.55", "97.9595, -100.855, -60.7115, 0.28", "99.0052, -102.067, -61.378, 0.83", "100.8, -104.188, -62.6674, 0.28", "101.994, -105.689, -63.6775, 0.83", "102.708, -106.568, -64.323, 0.28", "103.692, -107.891, -65.2572, 0.55", "104.891, -109.619, -66.4218, 0.28", "105.538, -110.601, -67.0288, 0.83", "106.457, -111.952, -67.754, 0.28", "106.895, -112.59, -68.0681, 0.55", "107.644, -113.687, -68.5505, 0.28", "108.113, -114.378, -68.8685, 0.83", "109.435, -116.226, -69.7269, 0.28", "109.84, -116.691, -69.9761, 0.55", "111.046, -118.037, -70.7041, 0.28", "111.645, -118.657, -71.0463, 0.55", "112.834, -119.737, -71.6606, 0.28", "114.043, -120.81, -72.2467, 0.55", "115.8, -122.35, -73.013, 0.55", "117.407, -123.785, -73.734, 0.55", "118.019, -124.325, -74.0029, 0.28", "119.083, -125.27, -74.4492, 0.55", "120.004, -126.127, -74.8305, 0.28", "120.545, -126.687, -75.1078, 0.55", "121.871, -128.114, -75.8897, 0.28", "122.826, -129.072, -76.5073, 0.55", "124.034, -130.194, -77.3092, 0.28", "124.672, -130.754, -77.7245, 0.55", "125.572, -131.451, -78.1547, 0.28", "126.073, -131.829, -78.3852, 0.55", "127.453, -132.802, -78.9445, 0.28", "129.349, -134.101, -79.6246, 0.55", "130.137, -134.581, -79.8145, 0.55", "132.66, -135.866, -80.2077, 0.28" ],
    "parent" : "dend_33",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_34",
    "id" : "dend_34",
    "points3d" : [ "38.6936, -37.3018, -11.1862, 1.11", "40.2133, -40.1068, -11.7399, 1.11", "41.2397, -42.1659, -12.1596, 0.55", "42.2592, -44.405, -12.724, 0.83", "43.8519, -48.2134, -13.7442, 0.83", "45.1009, -51.3512, -14.5878, 0.55", "46.1873, -54.1875, -15.3481, 0.83", "47.1974, -57.1324, -16.1827, 0.55", "48.181, -60.0414, -17.0317, 0.55", "48.642, -61.4922, -17.4191, 0.28", "48.9856, -62.457, -17.6788, 0.55", "49.6629, -64.1819, -17.994, 0.28", "50.3383, -65.7732, -18.2172, 0.55", "51.2302, -67.5108, -18.4106, 0.28", "52.6203, -69.8503, -18.5437, 0.55", "53.9719, -71.891, -18.5825, 0.28", "54.5549, -72.7535, -18.6212, 0.55", "55.3199, -74.0079, -18.7885, 0.55", "56.2131, -75.7449, -19.0683, 0.55", "56.4998, -76.3775, -19.2051, 0.83", "57.4422, -78.6029, -19.7299, 0.28", "58.3637, -81.43, -20.3849, 0.83", "59.533, -85.4904, -21.4431, 0.28", "59.8606, -86.9555, -21.9172, 0.55", "60.0898, -88.3456, -22.3753, 0.28", "60.2984, -89.9769, -22.9997, 0.83", "60.5732, -92.755, -24.0505, 0.28", "60.8302, -95.0636, -24.8394, 0.55", "61.3594, -98.6479, -26.0148, 0.28", "61.7626, -100.855, -26.7337, 0.55", "62.6555, -105.372, -28.0641, 0.55", "63.2508, -107.778, -28.6363, 0.55", "63.7413, -109.43, -28.8883, 0.28", "64.0307, -110.392, -28.9644, 0.55", "64.62, -112.102, -28.9502, 0.28", "64.9601, -112.822, -28.8959, 0.55", "66.4034, -115.425, -28.2016, 0.28", "67.2935, -116.758, -27.7687, 0.55", "68.6574, -118.774, -26.875, 0.28", "68.8391, -119.032, -26.7316, 0.55", "71.2663, -122.123, -24.8771, 0.28", "72.4476, -123.561, -24.0293, 0.55", "74.5557, -126.182, -22.6232, 0.28", "75.4148, -127.244, -22.1208, 0.55", "76.4116, -128.5, -21.6334, 0.28", "77.8432, -130.503, -21.118, 0.83", "79.4904, -132.888, -20.6833, 0.28", "80.8083, -134.63, -20.4212, 0.83", "82.2847, -136.506, -20.1573, 0.28", "83.3296, -137.665, -20.0126, 0.28", "84.0945, -138.373, -19.8961, 0.55", "86.8687, -140.348, -19.1647, 0.28", "87.7876, -140.838, -18.8357, 0.55", "89.263, -141.549, -18.2157, 0.28", "90.169, -142.026, -17.7987, 0.55", "91.9272, -143.231, -17.0005, 0.28", "93.2915, -144.44, -16.3594, 0.55", "96.2341, -148.073, -15.291, 0.28", "96.8775, -149.015, -15.1276, 0.28", "98.2548, -151.465, -14.9081, 0.83", "99.9368, -154.974, -14.7879, 0.28", "100.698, -156.861, -14.8269, 0.55", "102.265, -161.009, -15.0181, 0.28", "102.927, -162.862, -15.1159, 0.28", "103.545, -164.496, -15.1945, 0.55", "104.323, -166.462, -15.3285, 0.28", "104.89, -167.796, -15.4181, 0.55", "105.782, -169.841, -15.4874, 0.28", "106.181, -170.8, -15.4145, 0.55", "106.992, -172.91, -15.1669, 0.28", "107.36, -173.943, -15.0089, 0.55", "108.173, -176.66, -14.75, 0.28", "108.541, -178.198, -14.6204, 0.55", "109.136, -180.611, -14.4243, 0.55", "109.718, -182.893, -14.1406, 0.28", "110.174, -184.555, -13.8107, 0.55", "110.972, -187.955, -13.0476, 0.28", "111.388, -189.645, -12.7514, 0.55", "112.272, -193.179, -12.2989, 0.28", "112.474, -194.26, -12.2294, 0.55", "112.644, -195.632, -12.1789, 0.28", "112.846, -197.453, -12.1943, 0.55", "113.137, -200.792, -12.1713, 0.28", "113.265, -202.025, -12.1683, 0.55", "113.417, -204.414, -12.3928, 0.28", "113.497, -205.396, -12.5213, 0.55", "113.763, -208.147, -12.9917, 0.28", "114.015, -210.65, -13.3796, 0.55", "114.297, -213.575, -13.8173, 0.28", "114.985, -219.317, -14.7397, 0.55", "115.582, -223.268, -15.3475, 0.28", "115.936, -225.344, -15.6998, 0.28", "116.386, -227.737, -16.1389, 0.55", "116.988, -230.469, -16.741, 0.28", "117.375, -231.823, -17.0679, 0.55", "118.045, -233.216, -17.2478, 0.28", "119.212, -234.904, -17.3628, 0.55", "120.406, -236.293, -17.3065, 0.28", "122.402, -238.364, -17.1855, 0.55", "124.737, -240.762, -17.0504, 0.28", "128.21, -244.322, -16.9946, 0.55", "130.875, -247.257, -17.2162, 0.55", "132.098, -248.685, -17.4023, 0.28", "133.292, -250.247, -17.8246, 0.55", "134.811, -252.584, -18.7827, 0.28", "135.643, -254.187, -19.5771, 0.55", "136.8, -256.898, -21.0546, 0.28", "137.402, -258.406, -21.9865, 0.55", "138.12, -260.206, -23.1148, 0.28", "138.514, -261.037, -23.5578, 0.55", "139.256, -262.492, -24.1508, 0.28", "139.692, -263.407, -24.4333, 0.55" ],
    "parent" : "dend_33",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "1.43147, -27.6668, 0.315035, 1.38", "1.28314, -28.3133, 0.304838, 1.38", "0.701023, -30.8502, 0.264824, 1.38" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "1.43147, -27.6668, 0.315035, 0.83", "0.554925, -30.307, 1.02804, 0.83", "-0.089103, -32.99, 2.56847, 0.83", "-0.598457, -35.5838, 4.18957, 1.38", "-1.16144, -38.4102, 6.06132, 1.11", "-1.59287, -40.5762, 7.49571, 0.55", "-2.10908, -43.1678, 9.21195, 1.11", "-3.0689, -49.2464, 13.7439, 0.83", "-3.34485, -51.7176, 15.7683, 1.11", "-3.62191, -53.7523, 17.581, 0.83" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-0.91216, 25.1261, -5.52939, 1.38", "1.56802, 31.3348, -7.02856, 1.38", "3.58599, 36.3865, -8.24835, 1.38", "4.77525, 39.3637, -8.96721, 1.38", "5.7105, 41.7049, -9.53254, 1.38" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_37",
    "id" : "dend_37",
    "points3d" : [ "132.66, -135.866, -80.2077, 0.28", "134.389, -135.526, -80.6555, 0.28", "135.785, -135.252, -81.017, 0.55", "137.672, -134.882, -81.5055, 0.28", "138.963, -134.628, -81.84, 0.55" ],
    "parent" : "dend_35",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_36",
    "id" : "dend_36",
    "points3d" : [ "132.66, -135.866, -80.2077, 0.28", "135.533, -136.933, -81.2688, 0.28", "136.783, -137.366, -81.6344, 0.28", "139.349, -138.254, -82.0824, 0.83", "141.091, -138.859, -82.283, 0.28", "142.591, -139.324, -82.3152, 0.55", "143.984, -139.734, -82.2799, 0.28", "144.058, -139.751, -82.267, 0.55", "146.145, -140.194, -81.8173, 0.28", "146.227, -140.216, -81.7955, 0.55", "148.779, -140.882, -81.1521, 0.28", "149.187, -140.996, -81.0615, 0.55", "152.254, -141.872, -80.4415, 0.28", "152.829, -142.035, -80.3345, 0.55", "155.022, -142.643, -79.9916, 0.28", "156.561, -143.115, -79.78, 0.55" ],
    "parent" : "dend_35",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_32",
    "id" : "dend_32",
    "points3d" : [ "0.701023, -30.8502, 0.264824, 1.38", "0.398296, -31.031, 0.371703, 1.38", "-5.44096, -34.7617, 1.99243, 1.38", "-9.18138, -37.1724, 2.84209, 1.11", "-11.4438, -38.7124, 3.22234, 0.83", "-13.8807, -40.4219, 3.51179, 0.83", "-17.2074, -42.9183, 3.57177, 0.83", "-18.1702, -43.7467, 3.47262, 0.83", "-19.0682, -44.6345, 3.25442, 0.83", "-21.8686, -47.6599, 2.53454, 0.83", "-23.9494, -49.8815, 1.99636, 0.83", "-28.0082, -54.0726, 0.958395, 0.83", "-30.4892, -56.7299, 0.324835, 0.55", "-32.2286, -58.5526, -0.098867, 0.55", "-34.9848, -61.2438, -0.704624, 0.55", "-37.6911, -63.6638, -1.27103, 0.55", "-39.5731, -65.0931, -1.30023, 0.55", "-40.9813, -66.0306, -1.07719, 0.55", "-42.9559, -67.2368, -0.614313, 0.55", "-47.5637, -69.9766, 0.712491, 0.55", "-49.7328, -71.2691, 1.4328, 0.55", "-58.4111, -76.6452, 4.36256, 0.55", "-60.5239, -78.1028, 5.06925, 0.55", "-64.5385, -80.8713, 6.30693, 0.55", "-66.6225, -82.4249, 6.86539, 0.55", "-67.7275, -83.3335, 7.09477, 0.55", "-71.2794, -86.3859, 7.41301, 0.55", "-73.4146, -88.3567, 7.1631, 0.55", "-75.8197, -90.4295, 6.88171, 0.55", "-78.9192, -93.191, 6.61314, 0.55", "-79.973, -94.083, 6.65018, 0.55", "-80.9827, -94.8534, 6.79233, 0.55", "-83.052, -96.2761, 7.29774, 0.55", "-85.589, -97.8597, 8.03178, 0.55", "-87.7853, -99.2618, 8.73257, 0.55", "-91.9964, -101.566, 10.0204, 0.55", "-92.9093, -102.052, 10.2656, 0.55", "-96.28, -103.865, 11.0163, 0.55", "-98.4303, -104.947, 11.3616, 0.55", "-100.605, -105.988, 11.5196, 0.55", "-102.949, -107.053, 11.1337, 0.55", "-104.974, -108.021, 10.4527, 0.55", "-107.052, -108.955, 9.62113, 0.55", "-108.921, -109.707, 8.78759, 0.55", "-111.356, -110.598, 7.65926, 0.55", "-118.23, -112.853, 4.82821, 0.55", "-120.409, -113.536, 4.03902, 0.55", "-122.972, -114.37, 3.10553, 0.55", "-125.492, -115.356, 2.29663, 0.55", "-127.631, -116.315, 1.98972, 0.55", "-131.543, -118.128, 1.84382, 0.55", "-133.212, -118.918, 2.09141, 0.55", "-137.502, -121.09, 2.93665, 0.55", "-141.127, -123.298, 3.91323, 0.55", "-146.825, -127.41, 5.96259, 0.55", "-154.395, -132.63, 5.17021, 0.55" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "0.701023, -30.8502, 0.264824, 1.11", "0.646222, -31.5781, -0.70664, 1.11", "0.521554, -33.234, -2.91668, 1.11", "0.322625, -35.8763, -6.44313, 1.11", "0.0467159, -39.5412, -11.3343, 1.11" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-3.62191, -53.7523, 17.581, 0.83", "-2.21266, -60.4264, 26.7202, 0.83", "-1.73178, -62.9909, 29.8993, 0.83", "-1.18966, -65.7086, 33.0023, 0.83", "-0.83039, -67.7095, 35.103, 1.11", "-0.396562, -70.2036, 37.5604, 0.55", "0.0880628, -73.3029, 40.4042, 0.83", "0.457862, -76.2128, 42.3884, 0.83", "0.762005, -77.7425, 43.3752, 0.55", "1.13934, -79.7453, 44.4488, 0.83", "1.4603, -81.4613, 45.2195, 0.83", "1.88049, -83.3718, 46.0335, 0.83", "2.34664, -85.0977, 46.7222, 0.83", "2.61283, -86.1137, 47.1519, 0.83", "3.14738, -88.0929, 48.1786, 0.55", "3.49842, -89.4355, 48.9354, 1.11", "4.73042, -94.3, 51.805, 0.55", "5.12445, -95.8844, 52.8084, 0.55", "5.40754, -97.2885, 53.7351, 1.11", "5.99119, -100.601, 56.05, 0.55", "6.31452, -102.388, 57.4105, 1.11", "8.44653, -110.729, 64.8831, 1.11", "10.0822, -117.488, 73.9166, 1.11", "13.9761, -124.95, 81.6055, 1.11", "19.2105, -131.336, 89.4652, 1.11", "22.6999, -139.184, 96.9617, 1.11", "28.1742, -144.789, 105.243, 1.11", "33.3303, -150.345, 113.758, 1.11", "38.6815, -155.225, 122.562, 1.11", "43.6229, -157.946, 132.468, 1.11", "47.6591, -159.563, 143.007, 1.11" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-3.62191, -53.7523, 17.581, 1.11", "-3.64701, -54.2041, 17.9929, 1.11", "-3.70411, -55.0802, 18.778, 1.11", "-3.76166, -56.6543, 20.1777, 1.11", "-3.79354, -59.0668, 22.2609, 1.11", "-3.78386, -61.5221, 24.3831, 1.11", "-3.77677, -62.5334, 25.2231, 0.55", "-3.76198, -63.4999, 25.9818, 0.83", "-3.85172, -65.2758, 27.2874, 1.11", "-3.91677, -65.77, 27.6585, 1.11", "-4.30274, -67.1637, 28.5999, 0.55", "-4.73175, -68.2724, 29.3636, 0.83", "-5.45158, -69.8445, 30.5383, 0.83", "-6.36523, -71.7277, 32.0854, 0.83", "-7.46141, -73.7188, 33.9706, 0.55", "-8.02862, -74.7028, 34.9826, 0.83", "-8.75244, -75.8468, 36.2818, 0.55", "-9.18804, -76.5568, 37.176, 1.11", "-10.3202, -78.4971, 39.7978, 0.55", "-10.979, -79.7646, 41.4549, 0.83", "-11.3534, -80.5427, 42.3507, 0.83", "-12.0732, -82.0652, 44.0167, 0.83", "-12.4653, -82.8871, 44.8672, 1.11", "-12.8838, -83.6464, 45.678, 0.28", "-13.3132, -84.2683, 46.2734, 0.83", "-13.735, -85.0452, 46.8566, 0.28", "-14.2831, -86.1825, 47.6883, 0.83", "-15.4717, -91.7676, 51.7504, 0.83", "-16.642, -97.0422, 56.213, 0.83", "-17.2102, -101.71, 61.4079, 0.83", "-16.5998, -106.118, 66.8216, 0.83", "-14.9583, -109.788, 72.5613, 0.83", "-13.7716, -112.003, 79.1029, 0.83", "-13.3507, -113.02, 86.0234, 0.83", "-12.5536, -114.514, 92.8233, 0.83", "-12.166, -116.96, 99.3787, 0.83" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "5.7105, 41.7049, -9.53254, 1.11", "11.2125, 43.7201, -22.5719, 1.11", "16.7696, 45.7554, -35.742, 1.11" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "5.7105, 41.7049, -9.53254, 1.38", "5.33665, 46.8672, -10.8462, 1.38", "5.03242, 51.0682, -11.9153, 1.38" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "0.0467159, -39.5412, -11.3343, 0.83", "0.470578, -40.7761, -12.7379, 0.83", "1.39244, -43.4619, -15.7906, 0.83", "2.04043, -45.3498, -17.9364, 1.11" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "0.0467159, -39.5412, -11.3343, 0.55", "-0.445995, -40.1894, -12.0526, 0.55", "-2.0128, -42.3673, -14.6184, 0.55", "-3.55953, -44.4133, -17.1908, 0.55", "-4.10601, -45.1852, -18.1241, 0.28", "-5.81431, -47.5583, -20.986, 0.55", "-7.72684, -50.1717, -23.9819, 0.55", "-8.72572, -51.4711, -25.5273, 0.55", "-9.54296, -52.5411, -26.8884, 0.55", "-10.9715, -54.4522, -29.1918, 0.55", "-12.0354, -55.9354, -30.9193, 0.28", "-13.123, -57.5395, -32.5526, 0.55", "-13.9966, -58.7711, -33.7589, 0.55", "-15.5364, -60.7736, -35.7435, 0.28", "-16.0532, -61.4258, -36.4136, 0.55", "-16.6646, -62.1183, -37.2199, 0.28", "-18.1669, -63.8273, -39.3901, 0.55", "-19.2441, -64.8852, -41.0539, 0.28", "-19.4188, -65.0195, -41.3149, 0.55", "-20.4325, -65.6582, -42.7264, 0.28", "-21.198, -66.1243, -43.867, 0.83", "-22.3374, -66.8033, -45.7267, 0.28", "-23.2385, -67.4424, -47.519, 0.55", "-24.108, -68.2451, -49.7545, 0.28", "-24.4925, -68.7442, -51.1718, 0.55", "-24.7413, -69.1959, -52.3422, 0.28", "-24.919, -69.6204, -53.3327, 0.55", "-25.2574, -70.5152, -55.2414, 0.28", "-26.084, -72.8491, -59.8351, 0.55", "-26.6577, -74.5552, -63.1177, 0.28", "-26.8875, -75.1824, -64.3451, 0.83", "-27.6587, -76.9486, -67.8068, 0.28", "-28.0003, -77.6195, -69.0563, 0.55", "-28.1473, -77.883, -69.4991, 0.55", "-28.6225, -78.6675, -70.6945, 0.28", "-29.1165, -79.4488, -71.8739, 0.55", "-29.9198, -80.942, -74.1713, 0.28", "-30.3891, -81.9584, -75.6241, 0.55", "-30.6774, -82.8166, -76.7601, 0.55", "-31.1558, -84.6187, -79.0072, 0.28", "-31.2391, -85.1093, -79.5769, 0.55", "-31.3167, -86.0867, -80.5773, 0.28", "-31.3369, -88.1237, -82.3823, 0.55", "-31.2231, -90.7, -84.6721, 0.55", "-31.199, -91.6242, -85.4904, 0.28", "-31.0805, -93.1092, -86.7426, 0.55", "-30.9553, -94.8442, -88.3905, 0.28", "-30.9357, -95.3515, -88.9384, 0.83", "-30.8469, -97.9092, -92.0823, 0.28", "-30.8673, -99.1222, -93.6531, 0.55", "-30.9508, -100.376, -95.29, 0.28", "-31.2575, -102.838, -98.5916, 0.55", "-31.6356, -104.861, -101.471, 0.55", "-31.9568, -106.15, -103.319, 0.28", "-32.3136, -107.36, -105.091, 0.28", "-32.511, -108.009, -106.079, 0.28", "-33.0035, -109.546, -108.4, 0.55", "-33.7811, -112.098, -112.081, 0.28", "-34.0273, -112.883, -113.221, 0.83", "-34.8554, -115.355, -116.779, 0.28", "-35.0852, -116.001, -117.74, 0.55", "-35.6513, -117.508, -119.948, 0.28", "-36.1332, -118.762, -121.752, 0.55", "-36.7512, -120.323, -124.009, 0.28", "-37.0829, -121.077, -125.084, 0.55", "-37.8075, -122.441, -127.012, 0.28", "-38.5355, -123.747, -128.892, 0.55", "-39.8158, -125.925, -132.187, 0.55", "-40.4974, -127.094, -134.073, 0.28", "-41.0948, -128.045, -135.688, 0.55", "-41.7075, -129.015, -137.478, 0.83" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "16.7696, 45.7554, -35.742, 1.11", "19.4505, 54.0562, -26.9757, 1.11", "20.0561, 55.6626, -25.5429, 1.11", "20.9124, 57.5633, -24.0382, 1.11", "22.0767, 59.9947, -22.3302, 1.11", "23.5668, 63.0565, -20.417, 0.83", "25.0264, 65.9711, -18.7495, 0.83", "26.2977, 67.9825, -18.0956, 0.83", "27.476, 69.8094, -17.5088, 0.83", "28.4912, 71.3452, -17.0285, 0.83", "29.5888, 72.971, -16.5589, 0.83", "30.4652, 74.3604, -16.2563, 0.83", "31.4777, 76.1596, -16.1445, 0.83", "32.1566, 77.4952, -16.0872, 0.83", "32.5014, 78.2063, -16.0494, 0.83", "33.2781, 79.8472, -15.9702, 0.83", "34.0746, 81.415, -15.9567, 0.83", "35.7107, 84.7288, -16.0393, 0.83", "37.1863, 87.648, -16.2604, 0.55", "38.6554, 90.4185, -16.5688, 0.55", "39.86, 92.4422, -16.767, 0.55", "41.9911, 95.7432, -17.0018, 0.83", "42.9593, 97.2204, -17.081, 0.83", "45.5182, 101.078, -17.1924, 1.11", "47.4121, 103.874, -17.3497, 0.83", "50.8379, 108.831, -17.6231, 0.83", "53.0716, 112.026, -17.7365, 0.83", "54.048, 113.471, -17.7071, 0.83", "55.2417, 115.237, -17.5866, 1.11", "57.8706, 119.145, -17.0572, 0.55", "58.8138, 120.602, -16.8184, 0.55", "60.1903, 122.876, -16.4231, 0.55", "61.7055, 125.454, -16.0234, 0.55", "63.3537, 128.354, -15.6012, 0.55", "64.5113, 130.597, -15.3021, 0.55", "65.2244, 132.161, -15.0042, 0.28", "66.4184, 134.844, -14.3828, 0.28", "67.6602, 137.667, -13.6579, 0.55", "68.6876, 140.042, -13.0262, 0.55", "69.775, 142.721, -12.1918, 0.55", "71.4443, 147.086, -10.7175, 0.55", "72.7681, 150.617, -9.43361, 0.55", "73.3977, 152.529, -8.71309, 0.55", "73.7819, 153.728, -8.24254, 0.55", "74.9177, 157.524, -6.89073, 0.55", "75.6209, 160.177, -6.11207, 0.55", "76.1369, 162.185, -5.67385, 0.55", "77.2463, 166.831, -4.84638, 0.55", "77.9392, 169.711, -4.27052, 0.55", "78.4416, 171.869, -3.82941, 0.55", "79.0897, 174.488, -3.28485, 0.55", "79.9423, 177.692, -2.56886, 0.83", "80.4508, 179.465, -2.11558, 0.83", "82.1907, 185.07, -0.585944, 0.55", "82.7346, 186.82, -0.0941405, 0.55", "83.6871, 189.742, 0.747278, 0.55", "84.3755, 191.866, 1.28666, 0.55", "85.4734, 195.522, 1.97341, 0.55", "86.6604, 199.566, 2.46234, 0.83", "87.3679, 201.686, 2.42042, 0.55", "88.1677, 203.661, 2.25005, 0.83", "89.4667, 206.38, 1.80826, 0.55", "90.9605, 209.066, 1.22735, 0.55", "92.2317, 210.972, 0.682174, 1.11", "95.7043, 215.36, -0.688186, 0.83", "98.4753, 218.461, -1.56885, 0.83", "100.482, 220.536, -2.05348, 0.83", "102.206, 222.33, -2.26579, 0.83", "103.951, 224.3, -2.35054, 0.83", "106.168, 227.225, -2.22664, 1.11", "107.819, 229.997, -1.83578, 0.83", "109.678, 233.938, -1.19502, 0.83", "111.187, 237.788, -0.407703, 0.83", "112.15, 240.844, 0.29908, 0.83", "112.685, 243.235, 0.910273, 0.83", "113.103, 245.94, 1.62295, 0.83", "113.286, 247.406, 1.95572, 0.83", "113.467, 248.647, 2.19111, 0.83", "113.796, 250.063, 2.31806, 0.83", "114.451, 251.961, 2.48324, 0.83", "115.254, 253.808, 2.62084, 0.83", "116.106, 255.673, 2.77532, 0.55", "116.858, 257.16, 2.89276, 0.83", "118.523, 260.383, 3.12084, 0.55", "120.008, 262.984, 3.34427, 0.83", "120.529, 263.836, 3.43102, 0.83", "121.727, 265.785, 3.6355, 0.55", "122.836, 267.525, 3.85066, 0.83", "124.571, 270.202, 4.1502, 0.83", "125.751, 271.88, 4.33262, 0.83", "126.574, 273.244, 4.41319, 0.83" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "16.7696, 45.7554, -35.742, 1.94", "16.4755, 48.68, -37.428, 1.94", "16.2301, 51.6403, -39.2828, 1.94", "16.0881, 54.5838, -41.1178, 1.38", "15.8888, 60.2735, -44.6026, 1.38", "15.8708, 63.7033, -46.9279, 1.38", "15.8197, 69.0773, -50.3904, 1.11", "15.8477, 70.9631, -51.8586, 1.11", "15.9051, 72.4621, -53.0938, 1.38", "15.9833, 74.6981, -54.95, 1.38", "16.0053, 79.9242, -59.3262, 1.38", "15.965, 83.7928, -62.8452, 1.38", "15.7643, 89.7391, -68.2601, 1.38", "15.7174, 91.8877, -70.3074, 1.38", "15.6612, 96.0214, -74.3764, 1.38", "15.5865, 103.435, -81.6213, 1.11", "15.4583, 109.728, -87.4803, 1.11", "15.4221, 112.893, -90.3633, 1.11", "15.3671, 117.855, -94.6209, 1.11", "15.391, 121.279, -97.5194, 1.11", "15.4948, 124.168, -99.8438, 1.11", "15.7685, 127.815, -102.576, 1.11", "15.9667, 129.736, -103.912, 1.11", "17.0533, 137.539, -109.406, 1.11", "17.4683, 140.171, -111.223, 1.11", "18.2616, 144.268, -114.126, 1.11", "18.9405, 146.856, -116.138, 1.11", "19.6077, 148.869, -117.859, 1.11", "20.653, 151.747, -120.385, 1.11" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "5.03242, 51.0682, -11.9153, 0.83", "6.42341, 52.976, -10.0411, 0.83", "8.93726, 56.4265, -7.04936, 0.83", "9.66037, 57.7618, -5.06799, 0.83", "10.7781, 60.2565, -1.16652, 0.83", "11.2666, 61.4824, 0.687361, 0.83", "12.4273, 64.5817, 5.12794, 0.83", "13.0631, 66.4404, 7.65224, 0.83", "16.1968, 76.6077, 20.269, 0.83", "16.7173, 78.56, 22.3262, 0.83", "17.1417, 80.4752, 24.0019, 0.83", "17.517, 82.356, 25.5999, 0.83", "18.2387, 86.455, 28.6683, 0.83", "18.593, 88.0275, 29.5129, 0.83", "20.4427, 93.6111, 30.0654, 0.83", "20.6757, 94.2785, 30.1365, 0.83", "24.7412, 102.491, 37.2037, 0.83", "27.7881, 110.397, 45.0851, 0.83", "31.3272, 118.509, 52.541, 0.83", "36.3973, 126.109, 59.6429, 0.83", "43.063, 133.048, 66.0723, 0.83", "49.1387, 141.695, 70.7872, 0.83", "54.1179, 151.967, 72.6868, 0.83", "57.8766, 162.522, 75.5776, 0.83", "61.1613, 173.181, 78.6611, 0.83", "63.1758, 184.14, 81.7859, 0.83", "63.5747, 195.375, 84.5275, 0.83", "64.984, 206.844, 85.1592, 0.83", "68.0553, 217.498, 88.4714, 0.83", "72.8052, 226.237, 94.386, 0.83", "75.1107, 236.31, 99.5947, 0.83", "75.3405, 245.983, 105.943, 0.83", "74.8206, 255.672, 112.247, 0.83", "75.217, 264.384, 119.854, 0.83", "74.5623, 273.903, 126.403, 0.83", "75.8434, 284.287, 131.346, 0.83", "77.212, 294.241, 137.086, 0.83", "79.1849, 303.395, 143.886, 0.83", "82.5915, 312.817, 149.675, 0.83", "87.5524, 320.326, 156.95, 0.83", "92.2466, 328.92, 163.115, 0.83" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 17
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "5.03242, 51.0682, -11.9153, 0.83", "5.30251, 59.7224, -20.9161, 0.83", "5.33942, 62.0904, -22.6483, 0.83", "5.38247, 64.1069, -23.8653, 0.83", "5.36381, 66.8995, -25.3743, 0.83", "5.29442, 69.3998, -26.6856, 0.83", "5.22011, 72.1882, -28.0601, 0.83", "5.03755, 76.066, -29.324, 0.83", "4.90392, 79.5793, -30.4906, 0.83", "4.80371, 82.7588, -31.5169, 0.83", "4.79078, 87.2216, -32.9075, 0.83", "4.89369, 89.8708, -33.7028, 0.83", "5.00123, 92.1461, -34.3131, 0.83", "5.27026, 94.4097, -34.849, 0.83", "5.74757, 96.9222, -35.3599, 0.83", "6.84877, 101.111, -36.0954, 0.83", "7.46644, 103.37, -36.45, 0.83", "7.92623, 105.087, -36.8401, 0.83", "9.45241, 110.769, -38.3541, 0.83", "10.0958, 113.283, -39.0958, 0.83", "10.6577, 115.853, -39.914, 0.83", "11.1834, 119.443, -41.0786, 0.83", "11.802, 124.227, -42.6694, 0.83", "12.0833, 126.842, -43.5088, 0.83", "12.1163, 127.994, -43.8563, 0.83", "12.0876, 129.699, -44.3775, 0.83", "11.9055, 134.19, -45.632, 0.83", "11.9045, 136.201, -46.1546, 0.83", "11.9112, 139.126, -46.8405, 0.83", "11.9778, 142.194, -47.5822, 0.83", "12.0594, 144.471, -48.1209, 0.83", "12.3168, 149.806, -49.3547, 0.83", "12.7222, 155.797, -50.6131, 0.83", "12.9049, 158.376, -51.0982, 0.83", "13.1005, 160.848, -51.5208, 0.83", "13.4203, 164.616, -51.9958, 0.83", "13.7397, 169.114, -52.4632, 0.83", "13.8311, 173.406, -52.8096, 0.83", "13.753, 175.254, -52.9168, 0.83", "13.5036, 179.216, -53.1561, 0.83", "13.211, 182.489, -53.3768, 0.83", "12.9427, 184.621, -53.4983, 1.11", "12.3572, 188.484, -53.7379, 1.11", "11.6705, 192.209, -54.0526, 1.11", "10.8488, 196.088, -54.3688, 1.11", "10.2228, 198.987, -54.5879, 1.11", "9.50431, 202.66, -54.8322, 0.83", "8.87559, 205.968, -54.9251, 1.38", "8.46199, 208.424, -54.9294, 1.38", "7.81235, 212.366, -54.8773, 0.83", "7.49928, 214.018, -54.8592, 0.83", "7.04161, 216.606, -54.8512, 0.83", "6.43562, 220.151, -55.2861, 1.11", "5.97327, 222.782, -56.0037, 1.38", "5.60288, 225.515, -57.0331, 1.38", "5.42967, 227.229, -57.7554, 1.38", "5.22774, 230.119, -58.9779, 0.83", "5.03204, 234.617, -60.8267, 1.38", "4.84136, 237.966, -61.9516, 0.83", "4.63189, 241.442, -62.9071, 0.83", "4.42773, 244.391, -63.4718, 0.83", "4.2205, 247.71, -63.8188, 1.11", "4.00973, 249.456, -63.7183, 1.11", "3.12285, 254.335, -62.7895, 1.11", "2.37233, 257.474, -61.9602, 1.11", "1.53748, 260.388, -61.0737, 1.11", "0.886512, 262.459, -60.4232, 1.11", "-1.1532, 268.905, -58.4936, 1.38", "-2.19568, 272.267, -57.6322, 1.11", "-2.98895, 275.094, -57.0945, 1.11", "-4.03195, 279.024, -56.5374, 1.11", "-4.96658, 282.608, -56.1644, 0.83", "-5.95918, 286.619, -55.9044, 0.83", "-6.43914, 288.918, -55.8858, 0.83", "-7.32642, 293.377, -55.8693, 0.83", "-8.21568, 298.008, -56.3123, 0.83", "-8.49503, 300.303, -56.9003, 0.83", "-8.69638, 302.502, -57.7081, 0.83", "-8.71026, 305.32, -59.2934, 0.83", "-8.57099, 307.493, -60.7531, 0.83", "-8.02812, 313.386, -65.2882, 1.11", "-7.36212, 318.76, -69.8495, 1.38", "-6.79715, 322.439, -73.1772, 0.83", "-5.69389, 328.964, -79.4711, 0.83", "-5.24866, 331.149, -81.6934, 0.83", "-4.89093, 332.692, -83.2583, 0.83" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 15
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "5.03242, 51.0682, -11.9153, 1.38", "4.2386, 55.1743, -10.3317, 1.38", "3.88156, 57.3759, -9.57251, 1.38", "3.68343, 58.9997, -9.0753, 1.38", "3.4995, 60.9834, -8.49068, 1.38", "3.29024, 63.2402, -7.82558, 1.38", "3.14689, 64.7861, -7.36998, 1.38", "3.06569, 66.7869, -6.93373, 1.38", "2.97149, 68.5915, -6.50851, 1.38", "2.95517, 69.9977, -6.174, 1.38" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "2.04043, -45.3498, -17.9364, 0.28", "1.88273, -46.2042, -18.7857, 0.28", "1.57113, -47.8926, -20.4638, 0.83", "0.880326, -51.6354, -24.1842, 0.83", "0.0288095, -56.249, -28.77, 0.55", "-0.296749, -58.0129, -30.5233, 0.55", "-0.801526, -60.7478, -33.2418, 0.83" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "2.04043, -45.3498, -17.9364, 0.83", "2.42074, -47.732, -20.4337, 0.83", "2.92203, -49.8733, -22.7946, 0.83", "3.92237, -53.761, -27.0171, 0.83", "4.87265, -57.1194, -30.6542, 0.83", "5.15884, -58.0418, -31.7292, 0.83", "6.12094, -61.0506, -35.4208, 0.83", "7.17626, -64.3489, -39.5211, 1.11", "7.87287, -66.552, -42.252, 0.83", "9.10937, -69.9062, -46.7215, 0.83", "10.7596, -73.7049, -52.0724, 0.83", "11.9061, -76.2606, -55.7939, 1.38" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "20.653, 151.747, -120.385, 0.83", "22.4046, 155.517, -124.301, 0.83", "23.6297, 158.254, -127.088, 0.83", "24.9477, 161.268, -130.448, 0.83", "27.4177, 167.3, -137.329, 0.83", "29.1701, 171.824, -142.583, 0.83", "30.3003, 174.983, -146.289, 1.11", "30.9536, 176.773, -148.57, 1.11", "32.5312, 181.57, -155.041, 1.11", "32.7781, 182.518, -156.301, 1.11", "33.015, 184.709, -158.879, 1.11", "33.0712, 186.172, -160.563, 1.11", "33.0213, 189.919, -164.915, 1.11", "32.9347, 191.82, -167.421, 1.11", "32.8533, 193.132, -169.09, 1.11", "32.5883, 197.839, -175.313, 1.11", "32.4434, 199.836, -178.042, 1.11", "32.3084, 201.557, -180.535, 1.11", "31.6339, 206.035, -187.851, 1.11" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "20.653, 151.747, -120.385, 1.11", "20.851, 155.978, -120.464, 1.11", "21.0588, 159.263, -120.509, 1.11", "21.3216, 163.464, -120.572, 1.11", "21.5237, 166.521, -120.615, 1.11", "21.9577, 170.682, -120.872, 0.83", "22.4445, 174.255, -121.184, 0.83", "22.9561, 177.57, -121.604, 0.83", "23.2472, 179.059, -121.826, 0.83", "23.537, 180.483, -122.079, 0.83", "24.4941, 185.887, -122.601, 1.11", "25.0152, 189.169, -122.562, 1.11", "25.161, 193.638, -121.599, 0.55", "25.0558, 194.81, -121.094, 0.83", "24.2817, 197.342, -119.121, 0.83", "21.9139, 202.831, -113.757, 0.83", "20.8687, 204.946, -111.431, 0.83", "18.8328, 208.989, -106.679, 1.11", "18.2344, 210.165, -105.109, 1.11", "15.3285, 215.735, -97.6477, 1.11", "14.7918, 216.763, -96.231, 1.11", "13.9516, 218.48, -94.0529, 1.11", "12.9707, 220.435, -91.5105, 1.11", "10.8082, 226.935, -83.2323, 1.11" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "2.95517, 69.9977, -6.174, 0.83", "2.34013, 75.7788, -7.91554, 0.83", "1.65856, 79.4703, -8.93564, 0.83", "1.18453, 81.069, -9.39347, 0.55", "0.447486, 83.0137, -9.78074, 1.38", "-1.45363, 87.7082, -10.7196, 1.38", "-2.47213, 90.2488, -11.1728, 1.11", "-3.58331, 92.609, -11.2938, 1.66", "-5.26664, 95.8421, -11.3625, 0.55", "-7.27402, 100.221, -11.8838, 1.38", "-9.13512, 104.973, -12.7976, 0.83", "-10.1798, 107.91, -13.4351, 1.38", "-11.8688, 113.119, -14.6173, 1.11", "-12.6286, 115.386, -15.2005, 1.66", "-15.9603, 125.406, -18.0482, 0.83", "-17.7409, 130.2, -19.4583, 1.38", "-19.4479, 134.277, -20.5744, 1.11", "-21.065, 137.799, -21.3762, 1.38", "-22.2875, 140.237, -21.7539, 0.55", "-23.7045, 142.787, -21.8057, 0.83", "-25.9389, 146.394, -21.3475, 1.11", "-27.7914, 149.434, -20.9648, 1.38", "-30.684, 154.481, -20.4014, 1.11", "-32.2347, 157.484, -19.9859, 0.83", "-32.7608, 158.637, -19.8226, 0.83", "-33.7807, 160.994, -19.5324, 0.83", "-34.9954, 163.743, -18.9963, 0.83", "-35.7492, 165.486, -18.4842, 0.83", "-37.3165, 169.239, -16.9706, 0.83", "-38.1947, 171.435, -15.8973, 0.83", "-38.5597, 172.378, -15.3245, 0.83", "-41.0724, 179.132, -10.6568, 0.83", "-41.8673, 181.481, -9.0058, 0.83", "-43.3839, 185.914, -5.71218, 0.83", "-44.1309, 188.13, -3.99044, 0.83", "-45.4626, 192.451, -0.520413, 0.83", "-45.8016, 193.769, 0.483339, 0.83", "-46.2655, 196.756, 2.21231, 0.83", "-48.7269, 208.07, 3.32199, 0.83", "-51.1771, 219.305, 5.0787, 0.83", "-53.9562, 230.188, 8.10058, 0.83", "-55.4658, 241.626, 9.57864, 0.83", "-58.6979, 252.771, 8.7701, 0.83", "-62.7116, 263.273, 5.78768, 0.83", "-64.8557, 274.47, 3.47926, 0.83", "-66.8589, 285.809, 1.83055, 0.83", "-68.3136, 297.097, -0.573376, 0.83" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "2.95517, 69.9977, -6.174, 0.83", "4.52089, 73.8332, -6.79195, 0.83", "6.39965, 78.9788, -7.33037, 0.83", "6.96111, 80.6192, -7.43192, 0.83", "7.74204, 82.9366, -7.49873, 0.83", "8.61591, 85.5721, -7.50722, 0.83", "9.76244, 89.107, -7.45996, 0.83", "10.3883, 91.1981, -7.27937, 0.83", "11.1399, 93.7648, -6.82489, 0.83", "11.8187, 95.9378, -6.40035, 0.83", "12.4809, 97.7444, -6.00012, 0.83", "12.787, 98.5287, -5.8062, 0.83", "13.8238, 101.14, -5.08068, 0.83", "15.6255, 105.581, -3.66129, 0.83", "16.2218, 107.19, -3.10921, 1.11", "17.4453, 110.683, -1.87656, 1.11", "18.715, 114.448, -0.553038, 1.11", "19.4243, 116.612, 0.190625, 1.11", "19.8581, 118.025, 0.656502, 1.11", "20.917, 121.544, 1.75805, 0.83", "21.7057, 124.212, 2.5658, 0.83", "22.3448, 126.384, 3.14752, 0.83", "23.0672, 128.518, 3.61766, 0.83", "23.6472, 129.968, 3.88527, 0.83", "24.1198, 131.056, 4.07386, 0.83", "24.647, 132.138, 4.25294, 0.83", "25.4423, 133.765, 4.52407, 0.83", "26.295, 135.452, 4.8182, 0.83", "27.2369, 137.306, 5.21501, 0.83", "28.0906, 139.028, 5.61492, 0.83", "28.738, 140.377, 5.93653, 0.83", "29.3055, 141.578, 6.22599, 0.83", "29.9014, 142.757, 6.52134, 0.83", "32.0228, 147.018, 7.55015, 0.55", "32.8203, 148.612, 7.92447, 0.55", "34.0118, 150.952, 8.47062, 0.55", "35.2409, 153.493, 9.10933, 1.11", "36.7215, 156.717, 9.9531, 0.55", "37.4257, 158.429, 10.4384, 0.55", "38.1768, 160.549, 11.0693, 0.55", "38.4686, 161.463, 11.3623, 0.55", "39.3761, 164.418, 12.2915, 0.55", "39.6188, 165.318, 12.5885, 0.55", "40.7782, 170.41, 14.3095, 0.55", "41.5977, 173.947, 15.5265, 0.83", "41.8439, 175.006, 15.8825, 0.83", "43.1075, 180.212, 17.5429, 1.11", "44.1582, 184.276, 18.7407, 1.11", "45.0848, 187.788, 19.758, 0.55", "45.5408, 189.485, 20.2175, 0.55", "46.0304, 191.29, 20.6846, 0.55", "46.5597, 193.351, 21.1652, 0.83", "46.983, 195.09, 21.5007, 0.83", "47.0549, 195.348, 21.5301, 0.28", "47.8682, 198.262, 21.7541, 0.28", "48.2094, 199.754, 21.8369, 0.83", "48.5533, 201.696, 21.9704, 0.83", "48.7632, 203.033, 22.09, 0.83", "48.9558, 204.125, 22.1236, 0.83", "49.2695, 205.832, 22.1019, 0.83", "49.6504, 207.434, 22.0646, 0.83", "50.2809, 209.718, 22.0079, 0.83", "51.3598, 213.247, 21.9244, 0.55", "52.5547, 216.919, 21.8427, 0.55", "53.5029, 219.675, 21.7945, 1.38", "54.7413, 223.12, 21.7511, 0.55", "55.6555, 225.51, 21.7435, 0.55", "56.1909, 226.875, 21.7502, 0.55", "56.6407, 228.137, 21.8005, 0.83", "57.2562, 230.239, 21.9798, 0.83", "57.7241, 232.129, 22.1008, 0.83", "57.9766, 233.467, 22.1524, 0.83", "58.4617, 235.747, 22.2636, 0.83", "58.8371, 237.328, 22.3573, 0.83", "59.3452, 239.158, 22.4968, 0.83", "59.9443, 241.01, 22.674, 0.83", "60.5259, 242.626, 22.8534, 0.83", "61.8262, 246.242, 23.2546, 0.83", "63.1854, 249.744, 23.6855, 0.83", "63.8223, 251.225, 23.894, 0.83", "64.5469, 252.779, 24.1366, 0.83", "65.217, 254.2, 24.3616, 0.83", "66.2487, 256.453, 24.7053, 0.83", "70.0144, 264.991, 27.6945, 0.83" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_31",
    "id" : "dend_31",
    "points3d" : [ "-0.801526, -60.7478, -33.2418, 0.55", "-0.779314, -61.0478, -34.7916, 0.55", "-0.774086, -61.2773, -35.8253, 0.55", "-0.693746, -62.0238, -39.2187, 0.83", "-0.690152, -62.3823, -40.8927, 0.28", "-0.703898, -62.6418, -42.082, 0.55", "-0.691778, -63.8474, -46.8839, 0.28", "-0.684411, -64.1256, -47.9305, 0.83", "-0.676259, -65.3467, -52.1026, 0.55", "-0.697571, -65.6866, -53.1066, 0.55", "-0.727141, -66.2752, -54.847, 0.55", "-0.714003, -67.4408, -58.4736, 0.55", "-0.689263, -67.9937, -60.3267, 0.55", "-0.577596, -68.4189, -61.931, 0.55", "-0.45311, -68.7855, -63.3923, 0.28", "0.0494661, -69.7941, -67.7289, 0.83", "0.711899, -70.8691, -72.8728, 0.55", "1.26172, -71.6097, -76.8063, 0.55", "1.85311, -72.2936, -80.5357, 0.28", "2.03961, -72.5003, -81.7439, 0.55", "2.61233, -73.1444, -85.5329, 0.28", "2.74862, -73.3239, -86.4878, 0.55", "2.90566, -73.6379, -87.9656, 0.28", "2.96035, -73.8627, -88.7571, 0.55", "3.0421, -74.5912, -90.7047, 0.28", "3.08328, -74.8667, -91.3165, 0.55", "3.20084, -75.5597, -92.5015, 0.28", "3.31026, -75.9101, -93.0116, 0.55", "3.82001, -77.1407, -94.5038, 0.28", "4.19346, -77.9087, -95.3527, 0.55", "4.52186, -78.5357, -96.0109, 0.28", "5.13813, -79.7124, -97.2286, 0.55", "5.66561, -80.7593, -98.3936, 0.28", "6.01705, -81.5015, -99.2933, 0.55", "6.38925, -82.5383, -100.658, 0.28", "6.56334, -83.1782, -101.614, 0.55", "6.69623, -83.9056, -102.731, 0.28", "6.80882, -85.1489, -104.694, 0.55", "6.8428, -86.7169, -107.192, 0.28", "6.82787, -87.6877, -108.82, 0.55", "6.76221, -89.2783, -111.405, 0.28", "6.75538, -89.7233, -112.159, 0.55", "6.74217, -90.4776, -113.483, 0.28", "6.75991, -91.2645, -114.859, 0.55", "6.80195, -92.6709, -117.375, 0.83", "6.84797, -93.1693, -118.332, 0.83", "6.97726, -95.0393, -121.975, 0.28", "7.00706, -95.3011, -122.54, 0.55", "7.08722, -96.1217, -124.356, 0.28", "7.18716, -96.6721, -125.628, 0.55", "7.39006, -97.6806, -127.889, 0.28", "7.5535, -98.3767, -129.449, 0.83", "7.91508, -100.206, -133.106, 0.28", "8.03009, -100.783, -134.161, 0.83", "8.35427, -102.785, -137.397, 0.28", "8.4185, -103.169, -137.909, 0.55", "8.47733, -103.518, -138.289, 0.28", "8.69296, -104.688, -139.338, 0.28", "8.66192, -105.523, -139.499, 0.55", "8.35032, -106.975, -139.205, 0.28", "7.69111, -108.526, -138.405, 0.55" ],
    "parent" : "dend_29",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "-0.801526, -60.7478, -33.2418, 0.55", "-0.895244, -63.8872, -33.1301, 0.55", "-0.859705, -66.0536, -33.0041, 0.55", "-0.845798, -66.3577, -32.9821, 0.28", "-0.660341, -69.1369, -32.7508, 0.55", "-0.517206, -72.2691, -32.4947, 0.55", "-0.471788, -73.2418, -32.4228, 0.28", "-0.399058, -74.9653, -32.2984, 0.55", "-0.427847, -76.2378, -32.2675, 0.28", "-0.477961, -77.5092, -32.2928, 0.55", "-0.564491, -79.0969, -32.3972, 0.28", "-0.852851, -82.6101, -32.7895, 0.55", "-0.994475, -83.8643, -32.9645, 0.28", "-1.21864, -85.5185, -33.2207, 0.55", "-1.44882, -87.0109, -33.4513, 0.28", "-1.49468, -87.4414, -33.5343, 0.55", "-1.67765, -89.9205, -34.0484, 0.28", "-1.78927, -91.7442, -34.4683, 0.55", "-1.8588, -93.5419, -34.8837, 0.55", "-2.0159, -96.7714, -35.621, 0.55", "-2.30651, -100.048, -36.4204, 0.55", "-2.50825, -102.194, -37.0364, 0.55", "-2.63024, -103.891, -37.6085, 0.28", "-2.65335, -104.524, -37.8848, 0.55", "-2.6583, -105.561, -38.3933, 0.28", "-2.59149, -106.926, -39.0934, 0.55", "-2.48325, -109.008, -40.1618, 0.28", "-2.14487, -113.044, -42.3324, 0.55", "-1.75263, -117.062, -44.4625, 0.28", "-1.64722, -117.863, -44.8984, 0.55", "-1.39863, -119.574, -45.8393, 0.28", "-1.28972, -120.343, -46.223, 0.55", "-1.23794, -121.143, -46.5502, 0.28", "-1.19006, -122.602, -47.044, 0.55", "-1.28146, -124.846, -47.6143, 0.28", "-1.42757, -126.34, -48.0063, 0.55", "-1.80408, -128.439, -48.5745, 0.28", "-2.33282, -130.821, -49.3499, 0.28", "-3.01667, -133.357, -50.3107, 0.55", "-3.9226, -136.155, -51.5235, 0.55", "-4.69154, -138.284, -52.5811, 0.28", "-5.41233, -140.445, -53.8571, 0.55", "-6.16853, -142.755, -55.3583, 0.55", "-6.6536, -144.331, -56.4296, 0.28", "-7.20232, -146.388, -57.7898, 0.28", "-7.93749, -149.801, -59.8253, 0.55", "-8.66181, -153.991, -61.9483, 0.28", "-9.00478, -156.403, -62.9498, 0.83", "-9.16866, -157.706, -63.3779, 0.55", "-9.64337, -161.433, -64.3913, 0.28", "-10.1564, -165.089, -65.0433, 0.55", "-10.5808, -167.835, -65.1697, 0.28", "-10.9054, -169.671, -65.0511, 0.55", "-11.2369, -171.355, -64.8208, 0.28", "-11.6375, -173.048, -64.4944, 0.55", "-12.3707, -175.648, -63.9077, 0.28", "-13.0239, -178.072, -63.633, 0.28", "-13.2582, -178.971, -63.5932, 0.55", "-13.8852, -181.505, -63.6608, 0.28", "-14.2052, -182.856, -63.8185, 0.55", "-14.783, -185.938, -64.5615, 0.28", "-15.4447, -189.956, -66.1793, 0.55", "-15.6498, -191.212, -66.8189, 0.28", "-15.7855, -192.61, -67.6894, 0.55", "-15.833, -194.453, -68.9618, 0.28", "-15.7709, -196.778, -70.6321, 0.55", "-15.6817, -198.882, -72.1467, 0.28", "-15.6569, -200.033, -72.8895, 0.55", "-15.5929, -203.194, -74.7459, 0.28", "-15.459, -205.592, -76.1159, 0.83", "-15.3655, -207.272, -76.9963, 0.28", "-15.3775, -208.826, -77.8179, 0.55", "-15.4683, -209.98, -78.4423, 0.28", "-15.6609, -211.788, -79.4455, 0.55", "-16.4423, -216.148, -81.9301, 0.28", "-16.6255, -217.044, -82.5567, 0.55", "-17.2973, -220.075, -84.9929, 0.28", "-17.5373, -221.256, -86.1191, 0.55" ],
    "parent" : "dend_29",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "11.9061, -76.2606, -55.7939, 0.55", "12.4553, -79.4076, -59.0259, 0.55", "12.564, -80.2016, -59.7537, 0.83", "12.6588, -82.4739, -61.7715, 0.28", "12.6658, -83.8673, -63.0805, 0.55", "12.6616, -85.5016, -64.6769, 0.28", "12.5458, -86.823, -66.0034, 0.55", "12.389, -87.9685, -67.1453, 0.28", "12.0269, -89.8805, -69.0546, 0.55", "11.6007, -91.6263, -70.8065, 0.28", "11.3027, -92.9188, -72.3437, 0.55", "10.6375, -95.4079, -75.6914, 0.55", "10.2994, -96.8214, -77.8632, 0.55", "10.1128, -97.7833, -79.4536, 0.28", "9.91688, -99.5928, -82.7401, 0.55", "9.78127, -102.359, -88.0364, 0.83", "9.79519, -103.462, -90.3922, 0.55", "10.0281, -105.021, -93.9797, 0.28", "10.1115, -105.431, -94.9287, 0.83", "10.645, -107.337, -99.1634, 0.28", "10.8077, -107.864, -100.19, 0.55", "11.3288, -109.618, -102.938, 0.28", "11.7029, -110.855, -104.6, 0.55", "12.0434, -112.358, -106.275, 0.28", "12.2972, -113.628, -107.368, 0.55", "12.5767, -115.468, -108.351, 0.28", "12.7447, -116.641, -108.708, 0.55", "12.9466, -117.812, -108.779, 0.28", "13.1458, -119.11, -108.686, 0.55", "13.6634, -121.622, -108.218, 0.28", "13.8424, -122.383, -108.119, 0.55", "14.3893, -124.714, -107.938, 0.28", "14.6195, -125.814, -108.115, 0.55", "14.8464, -127.125, -108.624, 0.28", "14.9496, -128.068, -109.229, 0.55", "15.1781, -130.954, -111.304, 0.28", "15.2632, -131.812, -111.986, 0.83", "15.4993, -134.496, -114.271, 0.28", "15.5655, -135.399, -115.037, 0.55", "15.6684, -137.176, -116.541, 0.28", "15.7752, -139.969, -118.726, 0.55", "15.9053, -143.189, -120.921, 0.28", "15.9388, -144.24, -121.547, 0.55", "15.9842, -145.914, -122.398, 0.28", "16.0384, -147.693, -123.315, 0.55", "16.0787, -148.963, -123.954, 0.28", "16.0808, -149.704, -124.366, 0.55", "16.0901, -151.437, -125.163, 0.28", "16.2266, -153.854, -126.164, 0.83", "16.4348, -156.141, -127.035, 0.28", "16.6322, -157.913, -127.654, 0.28", "16.8227, -159.695, -128.257, 0.28", "16.9629, -161.64, -128.856, 0.55", "17.0279, -163.039, -129.226, 0.28", "17.0362, -163.3, -129.265, 0.55", "17.0557, -165.604, -129.636, 0.28", "16.9871, -168.105, -130.167, 0.28", "16.9729, -169.485, -130.525, 0.55", "16.9736, -170.273, -130.803, 0.28", "17.0006, -171.783, -131.384, 0.55", "17.1369, -174.614, -132.467, 0.28", "17.2155, -175.313, -132.728, 0.55", "17.3928, -176.419, -133.121, 0.28", "17.5106, -176.921, -133.263, 0.55", "17.8112, -178.219, -133.511, 0.28", "18.0464, -179.377, -133.593, 0.55", "18.2283, -180.461, -133.565, 0.28", "18.2734, -180.72, -133.558, 0.55", "18.5106, -182.477, -133.521, 0.28", "18.6887, -183.804, -133.495, 0.55", "19.011, -186.233, -133.448, 0.28", "19.1897, -187.398, -133.424, 0.83", "19.4154, -188.926, -133.391, 0.28", "19.6411, -190.443, -133.356, 0.55", "19.8066, -191.862, -133.326, 0.28", "20.0018, -193.173, -133.291, 0.55", "20.1468, -194.116, -133.264, 0.28", "20.258, -194.948, -133.24, 0.55", "20.4858, -197.316, -133.182, 0.28", "20.5999, -198.631, -133.131, 0.55", "20.6421, -200.538, -133.084, 0.28", "20.6437, -201.359, -133.184, 0.55", "20.5587, -202.665, -133.511, 0.28", "20.5371, -202.928, -133.578, 0.55", "20.4371, -204.042, -133.896, 0.28", "20.3688, -205.235, -134.37, 0.55", "20.1727, -208.647, -135.944, 0.28", "20.087, -211.009, -137.142, 0.55", "19.9884, -213.472, -138.453, 0.28", "19.945, -214.451, -138.938, 0.55", "19.7584, -217.607, -140.376, 0.28", "19.6395, -219.446, -141.03, 0.55", "19.4989, -220.897, -141.392, 0.28", "19.4118, -221.835, -141.584, 0.55", "19.2019, -224.536, -141.962, 0.28", "19.1261, -226.084, -142.097, 0.55", "19.0495, -228.298, -142.176, 0.28", "19.0826, -229.843, -142.237, 0.55", "19.1711, -231.713, -142.309, 0.28", "19.3055, -234.078, -142.445, 0.55", "19.5019, -237.034, -142.654, 0.28", "19.7309, -239.882, -142.839, 0.55", "19.9143, -242.23, -142.991, 0.28", "20.0972, -244.385, -143.077, 0.55", "20.1835, -245.508, -143.091, 0.28", "20.3002, -247.177, -143.023, 0.55", "20.5531, -249.536, -142.763, 0.28", "20.6444, -250.131, -142.695, 0.55", "20.9685, -252.042, -142.499, 0.28", "21.1612, -252.86, -142.428, 0.55", "21.392, -253.948, -142.353, 0.28", "21.5814, -255.321, -142.299, 0.55", "21.5998, -255.939, -142.288, 0.28", "21.5207, -256.723, -142.291, 0.55", "20.3457, -260.526, -142.428, 0.28", "19.6724, -262.266, -142.505, 0.55", "19.0915, -263.459, -142.57, 0.28", "18.3844, -264.61, -142.63, 0.55", "17.4174, -265.885, -142.706, 0.28", "16.0085, -267.119, -142.84, 0.55" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "11.9061, -76.2606, -55.7939, 0.28", "12.6275, -77.0245, -57.1381, 0.28", "13.3521, -77.7436, -58.3683, 0.55", "13.7103, -78.0287, -58.9666, 0.28", "14.0238, -78.2723, -59.48, 0.55", "17.0841, -80.7318, -64.477, 0.28", "17.5548, -81.1203, -65.2195, 0.55", "18.8219, -82.2557, -67.2672, 0.55", "20.097, -83.4605, -69.3477, 0.55", "21.5195, -84.9031, -71.5913, 0.83", "22.5625, -86.0208, -73.0833, 0.28", "23.6422, -87.2235, -74.329, 0.55", "24.8519, -88.6704, -75.6724, 0.55", "26.0925, -90.4081, -76.9788, 0.28", "26.7063, -91.3361, -77.5641, 0.55", "27.7946, -92.9146, -78.4282, 0.28", "28.4327, -93.7539, -78.8864, 0.55", "29.8853, -95.5876, -79.9261, 0.28", "30.6402, -96.4621, -80.4718, 0.55", "31.7894, -97.6931, -81.2352, 0.28", "33.5072, -99.4688, -82.3871, 0.83", "36.4926, -102.518, -84.4124, 0.28", "37.774, -103.762, -85.2877, 0.55", "40.0022, -105.762, -86.7482, 0.28", "40.898, -106.528, -87.3482, 0.55" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "40.898, -106.528, -87.3482, 0.28", "41.9986, -107.683, -88.3378, 0.28", "42.3652, -107.981, -88.723, 0.55", "44.0872, -109.182, -90.4234, 0.28", "45.4285, -110.112, -91.6563, 0.55", "46.8637, -111.186, -93.1148, 0.28", "47.198, -111.447, -93.4646, 0.55", "49.8555, -113.534, -96.6225, 0.28", "51.1822, -114.523, -98.3644, 0.55", "52.576, -115.602, -100.393, 0.28", "54.5105, -117.189, -103.424, 0.55", "55.8732, -118.467, -105.781, 0.55", "58.3131, -120.975, -110.156, 0.55", "60.1502, -122.952, -113.491, 0.55", "61.6078, -124.553, -116.163, 0.28", "62.4412, -125.42, -117.602, 0.55", "64.9743, -128.016, -121.602, 0.28", "65.916, -128.986, -123.032, 0.83", "68.1331, -131.114, -126.002, 0.28", "68.716, -131.662, -126.736, 0.55", "69.6527, -132.461, -127.921, 0.55", "71.8158, -134.26, -130.945, 0.55", "72.5946, -134.862, -132.209, 0.55", "74.0593, -136.109, -135.006, 0.28", "74.8956, -136.848, -136.828, 0.55", "76.616, -138.371, -140.637, 0.28", "77.9108, -139.592, -143.536, 0.55", "80.8688, -142.411, -150.162, 0.28", "81.8058, -143.403, -152.411, 0.55", "84.4175, -146.334, -158.952, 0.28", "85.4533, -147.48, -161.536, 0.55", "86.7028, -148.834, -164.478, 0.55", "88.4478, -150.758, -168.392, 0.28", "90.6444, -153.242, -173.152, 0.55", "91.3178, -154.025, -174.608, 0.55", "93.3969, -156.64, -179.165, 0.28", "93.9057, -157.298, -180.345, 0.55", "94.9901, -158.667, -182.867, 0.28", "95.7883, -159.718, -184.576, 0.55", "96.6313, -160.825, -186.226, 0.28", "97.5468, -162.138, -187.997, 0.55", "98.7923, -164.061, -190.201, 0.28", "99.758, -165.536, -191.678, 0.55", "101.772, -168.651, -194.155, 0.28", "103.416, -170.463, -195.755, 0.55", "104.56, -171.537, -196.676, 0.28", "105.607, -172.425, -197.328, 0.55", "106.665, -173.231, -197.885, 0.28", "108.917, -174.795, -199.334, 0.55", "113.165, -177.295, -203.118, 0.55" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "40.898, -106.528, -87.3482, 0.55", "43.0411, -106.746, -85.8869, 0.55", "47.0471, -107.26, -83.4232, 0.55", "49.1668, -107.569, -82.107, 0.28", "51.6033, -107.945, -80.5238, 0.83", "53.2512, -108.24, -79.5374, 0.28", "55.2855, -108.631, -78.3874, 0.28", "56.2166, -108.844, -77.9234, 0.55", "58.9558, -109.673, -76.6801, 0.28", "60.4503, -110.163, -76.0371, 0.55", "62.83, -111.087, -74.9649, 0.28", "63.1282, -111.211, -74.8346, 0.55", "66.0401, -112.448, -73.1533, 0.28", "67.7308, -113.157, -72.2253, 0.55", "70.302, -114.16, -70.907, 0.28", "71.5135, -114.585, -70.2674, 0.55", "73.927, -115.23, -68.9344, 0.28", "77.8971, -116.063, -66.6542, 0.28", "80.385, -116.37, -65.3188, 0.55", "81.272, -116.369, -64.936, 0.28", "81.598, -116.334, -64.8369, 0.55", "84.1556, -115.714, -64.1866, 0.55", "86.5416, -114.849, -63.7555, 0.28", "87.9699, -114.183, -63.5518, 0.55", "90.6947, -112.739, -63.053, 0.28", "91.8967, -112.092, -62.8488, 0.55", "93.4708, -111.192, -62.6076, 0.28", "95.4734, -109.928, -62.3546, 0.55", "98.0115, -108.286, -62.1296, 0.28", "99.6713, -107.183, -61.7579, 0.55" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_15", "dend_0", "dend_33", "dend_16", "dend_14", "dend_1", "dend_35", "dend_34", "dend_20", "dend_17", "dend_2", "dend_37", "dend_36", "dend_32", "dend_21", "dend_19", "dend_18", "dend_9", "dend_3", "dend_23", "dend_22", "dend_13", "dend_10", "dend_8", "dend_7", "dend_4", "dend_29", "dend_24", "dend_12", "dend_11", "dend_6", "dend_5", "dend_31", "dend_30", "dend_28", "dend_25", "dend_27", "dend_26" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_15", "dend_0", "dend_33", "dend_16", "dend_14", "dend_1", "dend_35", "dend_34", "dend_20", "dend_17", "dend_2", "dend_37", "dend_36", "dend_32", "dend_21", "dend_19", "dend_18", "dend_9", "dend_3", "dend_23", "dend_22", "dend_13", "dend_10", "dend_8", "dend_7", "dend_4", "dend_29", "dend_24", "dend_12", "dend_11", "dend_6", "dend_5", "dend_31", "dend_30", "dend_28", "dend_25", "dend_27", "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_33" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_35" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_34" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_32" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_35",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_36",
    "groups" : [ ],
    "sections" : [ "dend_31" ]
  }, {
    "name" : "OneSecGrp_SectionRef_37",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_38",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_39",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_40",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_41",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_37" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_36" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30", "dend_31", "dend_32", "dend_33", "dend_34", "dend_35", "dend_36", "dend_37" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_15", "dend_15", "dend_15", "dend_0", "dend_0", "axon_0", "axon_0", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_16", "dend_16", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_1", "dend_1", "axon_1", "axon_1", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_20", "dend_20", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_2", "dend_2", "dend_2", "dend_2", "dend_37", "dend_37", "dend_37", "dend_37", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_21", "dend_21", "dend_21", "dend_21", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_9", "dend_9", "dend_3", "dend_3", "dend_23", "dend_23", "dend_23", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.418459",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.026008999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.025854",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.19695699",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "2.0E-6",
    "erev" : "-60.2509"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.9899996E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.008343",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.026899999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.502333",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.653374",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "5.6999997E-5",
    "erev" : "-76.49812"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "7.84E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.30005398",
    "erev" : "50.0"
  }, {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.002256",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.38E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.005574",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "7.92E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bAC217_L23_DBC_55c1d16c8c_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_15, id: dend_15, parent: soma_0
create dend_15
public dend_15
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_33, id: dend_33, parent: dend_15
create dend_33
public dend_33
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_14, id: dend_14, parent: dend_0
create dend_14
public dend_14
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_35, id: dend_35, parent: dend_33
create dend_35
public dend_35
// Section: dend_34, id: dend_34, parent: dend_33
create dend_34
public dend_34
// Section: dend_20, id: dend_20, parent: dend_16
create dend_20
public dend_20
// Section: dend_17, id: dend_17, parent: dend_16
create dend_17
public dend_17
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_37, id: dend_37, parent: dend_35
create dend_37
public dend_37
// Section: dend_36, id: dend_36, parent: dend_35
create dend_36
public dend_36
// Section: dend_32, id: dend_32, parent: dend_20
create dend_32
public dend_32
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_9, id: dend_9, parent: dend_2
create dend_9
public dend_9
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_23, id: dend_23, parent: dend_21
create dend_23
public dend_23
// Section: dend_22, id: dend_22, parent: dend_21
create dend_22
public dend_22
// Section: dend_13, id: dend_13, parent: dend_9
create dend_13
public dend_13
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10
// Section: dend_8, id: dend_8, parent: dend_3
create dend_8
public dend_8
// Section: dend_7, id: dend_7, parent: dend_3
create dend_7
public dend_7
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_29, id: dend_29, parent: dend_23
create dend_29
public dend_29
// Section: dend_24, id: dend_24, parent: dend_23
create dend_24
public dend_24
// Section: dend_12, id: dend_12, parent: dend_10
create dend_12
public dend_12
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_6, id: dend_6, parent: dend_4
create dend_6
public dend_6
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5
// Section: dend_31, id: dend_31, parent: dend_29
create dend_31
public dend_31
// Section: dend_30, id: dend_30, parent: dend_29
create dend_30
public dend_30
// Section: dend_28, id: dend_28, parent: dend_24
create dend_28
public dend_28
// Section: dend_25, id: dend_25, parent: dend_24
create dend_25
public dend_25
// Section: dend_27, id: dend_27, parent: dend_25
create dend_27
public dend_27
// Section: dend_26, id: dend_26, parent: dend_25
create dend_26
public dend_26

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_15, dend_0, dend_33, dend_16, dend_14, dend_1, dend_35, dend_34, dend_20, dend_17, dend_2, dend_37, dend_36, dend_32, dend_21, dend_19, dend_18, dend_9, dend_3, dend_23, dend_22, dend_13, dend_10, dend_8, dend_7, dend_4, dend_29, dend_24, dend_12, dend_11, dend_6, dend_5, dend_31, dend_30, dend_28, dend_25, dend_27, dend_26]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_15, dend_0, dend_33, dend_16, dend_14, dend_1, dend_35, dend_34, dend_20, dend_17, dend_2, dend_37, dend_36, dend_32, dend_21, dend_19, dend_18, dend_9, dend_3, dend_23, dend_22, dend_13, dend_10, dend_8, dend_7, dend_4, dend_29, dend_24, dend_12, dend_11, dend_6, dend_5, dend_31, dend_30, dend_28, dend_25, dend_27, dend_26]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_33]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_35]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_34]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_32]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_35
// Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_31]}
objref OneSecGrp_SectionRef_36
// Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_37
// Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_38
// Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_39
// Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_40
// Group: {name=OneSecGrp_SectionRef_41, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_41
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_37]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_36]}
objref OneSecGrp_SectionRef_16
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36, dend_37], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_15, dend_15, dend_15, dend_0, dend_0, axon_0, axon_0, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_16, dend_16, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_1, dend_1, axon_1, axon_1, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_20, dend_20, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_2, dend_2, dend_2, dend_2, dend_37, dend_37, dend_37, dend_37, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_21, dend_21, dend_21, dend_21, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_9, dend_9, dend_3, dend_3, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_15(0), soma_0(0.4999996983969059)
    connect dend_0(0), soma_0(0.4999996983969059)
    connect axon_0(0), soma_0(1.0)
    connect dend_33(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_14(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_35(0), dend_33(1.0)
    connect dend_34(0), dend_33(1.0)
    connect dend_20(0), dend_16(1.0)
    connect dend_17(0), dend_16(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_37(0), dend_35(1.0)
    connect dend_36(0), dend_35(1.0)
    connect dend_32(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_9(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_23(0), dend_21(1.0)
    connect dend_22(0), dend_21(1.0)
    connect dend_13(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)
    connect dend_8(0), dend_3(1.0)
    connect dend_7(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_29(0), dend_23(1.0)
    connect dend_24(0), dend_23(1.0)
    connect dend_12(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_6(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)
    connect dend_31(0), dend_29(1.0)
    connect dend_30(0), dend_29(1.0)
    connect dend_28(0), dend_24(1.0)
    connect dend_25(0), dend_24(1.0)
    connect dend_27(0), dend_25(1.0)
    connect dend_26(0), dend_25(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -1.10046, -10.7769, 0.0, 1.2583 ) }
    soma_0 { pt3dadd( -0.977881, -9.66658, 0.0, 1.27734 ) }
    soma_0 { pt3dadd( -0.855301, -8.55625, 0.0, 1.93125 ) }
    soma_0 { pt3dadd( -0.732721, -7.44592, 0.0, 2.73299 ) }
    soma_0 { pt3dadd( -0.610142, -6.33559, 0.0, 3.81421 ) }
    soma_0 { pt3dadd( -0.487562, -5.22526, 0.0, 4.86299 ) }
    soma_0 { pt3dadd( -0.364982, -4.11493, 0.0, 5.49704 ) }
    soma_0 { pt3dadd( -0.242403, -3.0046, 0.0, 6.12703 ) }
    soma_0 { pt3dadd( -0.119823, -1.89427, 0.0, 6.84433 ) }
    soma_0 { pt3dadd( 0.00275685, -0.783937, 0.0, 7.36999 ) }
    soma_0 { pt3dadd( 0.125337, 0.326393, 0.0, 7.59231 ) }
    soma_0 { pt3dadd( 0.247916, 1.43672, 0.0, 7.67062 ) }
    soma_0 { pt3dadd( 0.370496, 2.54705, 0.0, 7.50992 ) }
    soma_0 { pt3dadd( 0.493076, 3.65738, 0.0, 7.33464 ) }
    soma_0 { pt3dadd( 0.615655, 4.76771, 0.0, 7.00391 ) }
    soma_0 { pt3dadd( 0.738235, 5.87804, 0.0, 6.54709 ) }
    soma_0 { pt3dadd( 0.860815, 6.98838, 0.0, 5.62524 ) }
    soma_0 { pt3dadd( 0.983394, 8.09871, 0.0, 4.30117 ) }
    soma_0 { pt3dadd( 1.10597, 9.20904, 0.0, 3.55313 ) }
    soma_0 { pt3dadd( 1.22855, 10.3194, 0.0, 2.60096 ) }
    soma_0 { pt3dadd( 1.35113, 11.4297, 0.0, 1.60168 ) }
    // Section: dend_15, id: dend_15, parent: soma_0 (entry count 21/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -0.382575, -10.9767, -3.38, 1.94 ) }
    dend_15 { pt3dadd( 0.429178, -14.854, -3.38, 1.94 ) }
    dend_15 { pt3dadd( 1.14292, -18.2632, -3.38, 1.94 ) }
    dend_15 { pt3dadd( 1.44796, -19.7202, -3.38, 3.6 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 25/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 2.29743, 11.5533, -4.34, 1.66 ) }
    dend_0 { pt3dadd( 2.40614, 16.5356, -3.87607, 1.66 ) }
    dend_0 { pt3dadd( 2.46807, 19.3741, -3.61176, 1.66 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 28/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 1.35113, 11.4297, 0.0, 0.55 ) }
    axon_0 { pt3dadd( 2.99712, 26.3391, 0.0, 0.55 ) }
    axon_0 { pt3dadd( 4.64311, 41.2485, 0.0, 0.55 ) }
    // Section: dend_33, id: dend_33, parent: dend_15 (entry count 31/100)
    dend_33 { pt3dclear() }
    dend_33 { pt3dadd( 1.44796, -19.7202, -3.38, 0.83 ) }
    dend_33 { pt3dadd( 3.43004, -20.7605, -3.94673, 0.83 ) }
    dend_33 { pt3dadd( 5.41908, -21.7508, -4.5045, 0.83 ) }
    dend_33 { pt3dadd( 7.64022, -22.8478, -5.11437, 0.83 ) }
    dend_33 { pt3dadd( 10.0371, -23.8906, -5.76434, 0.83 ) }
    dend_33 { pt3dadd( 12.7838, -25.0545, -6.5016, 0.83 ) }
    dend_33 { pt3dadd( 14.1996, -25.6463, -6.87805, 0.83 ) }
    dend_33 { pt3dadd( 16.4343, -26.5587, -7.45809, 0.83 ) }
    dend_33 { pt3dadd( 18.92, -27.4315, -7.95836, 0.83 ) }
    dend_33 { pt3dadd( 20.9804, -28.0704, -8.24873, 0.83 ) }
    dend_33 { pt3dadd( 22.602, -28.6121, -8.38909, 0.83 ) }
    dend_33 { pt3dadd( 24.2165, -29.1783, -8.47452, 0.83 ) }
    dend_33 { pt3dadd( 24.5719, -29.3268, -8.50807, 0.83 ) }
    dend_33 { pt3dadd( 27.463, -30.7277, -8.90785, 0.83 ) }
    dend_33 { pt3dadd( 30.3285, -32.21, -9.30889, 0.83 ) }
    dend_33 { pt3dadd( 32.41, -33.402, -9.62269, 0.83 ) }
    dend_33 { pt3dadd( 33.8012, -34.1892, -9.86796, 0.83 ) }
    dend_33 { pt3dadd( 36.5736, -35.8744, -10.498, 1.11 ) }
    dend_33 { pt3dadd( 38.6936, -37.3018, -11.1862, 1.11 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 50/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 1.44796, -19.7202, -3.38, 1.94 ) }
    dend_16 { pt3dadd( 1.43753, -24.7488, -1.04179, 1.94 ) }
    dend_16 { pt3dadd( 1.43147, -27.6668, 0.315035, 2.22 ) }
    // Section: dend_14, id: dend_14, parent: dend_0 (entry count 53/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 2.46807, 19.3741, -3.61176, 0.83 ) }
    dend_14 { pt3dadd( 0.383911, 21.1727, -5.33043, 0.83 ) }
    dend_14 { pt3dadd( -0.511841, 22.0657, -6.02943, 0.83 ) }
    dend_14 { pt3dadd( -1.84153, 23.5767, -7.03254, 0.83 ) }
    dend_14 { pt3dadd( -3.13955, 25.1883, -7.98026, 0.83 ) }
    dend_14 { pt3dadd( -4.4069, 27.0777, -8.90538, 0.83 ) }
    dend_14 { pt3dadd( -5.20332, 28.3385, -9.47949, 0.83 ) }
    dend_14 { pt3dadd( -6.15878, 30.1753, -10.0871, 0.83 ) }
    dend_14 { pt3dadd( -6.93103, 32.0234, -10.5983, 0.83 ) }
    dend_14 { pt3dadd( -7.75788, 34.4802, -11.1722, 0.83 ) }
    dend_14 { pt3dadd( -8.63533, 37.46, -11.802, 0.83 ) }
    dend_14 { pt3dadd( -9.11283, 39.1403, -12.148, 0.83 ) }
    dend_14 { pt3dadd( -10.1864, 43.0746, -12.9345, 0.83 ) }
    dend_14 { pt3dadd( -10.7503, 45.3481, -13.3591, 0.83 ) }
    dend_14 { pt3dadd( -11.0753, 46.7297, -13.6078, 0.83 ) }
    dend_14 { pt3dadd( -11.6877, 49.4661, -14.0839, 0.83 ) }
    dend_14 { pt3dadd( -12.1207, 51.2652, -14.4129, 0.83 ) }
    dend_14 { pt3dadd( -12.7153, 53.761, -14.8661, 0.83 ) }
    dend_14 { pt3dadd( -13.3175, 55.7845, -15.2971, 0.83 ) }
    dend_14 { pt3dadd( -14.0477, 57.8831, -15.8, 0.83 ) }
    dend_14 { pt3dadd( -14.7887, 59.7417, -16.2953, 0.83 ) }
    dend_14 { pt3dadd( -15.265, 60.8282, -16.6077, 0.83 ) }
    dend_14 { pt3dadd( -15.6689, 61.6569, -16.8674, 0.83 ) }
    dend_14 { pt3dadd( -16.6389, 63.3465, -17.4745, 0.55 ) }
    dend_14 { pt3dadd( -18.5238, 66.5158, -18.6479, 1.11 ) }
    dend_14 { pt3dadd( -19.7422, 68.623, -19.4096, 1.11 ) }
    dend_14 { pt3dadd( -21.2416, 71.3592, -20.3549, 1.11 ) }
    dend_14 { pt3dadd( -22.01, 72.9301, -20.8487, 1.11 ) }
    dend_14 { pt3dadd( -23.1533, 75.5002, -21.5963, 0.83 ) }
    dend_14 { pt3dadd( -24.5163, 78.7712, -22.4992, 0.55 ) }
    dend_14 { pt3dadd( -25.1867, 80.4145, -22.9452, 0.55 ) }
    dend_14 { pt3dadd( -26.9867, 85.081, -24.1568, 0.83 ) }
    dend_14 { pt3dadd( -27.8139, 87.3115, -24.7184, 0.83 ) }
    dend_14 { pt3dadd( -28.5065, 89.2433, -25.1921, 0.83 ) }
    dend_14 { pt3dadd( -29.6614, 92.5631, -25.9875, 0.83 ) }
    dend_14 { pt3dadd( -30.2647, 94.227, -26.3992, 0.83 ) }
    dend_14 { pt3dadd( -30.8796, 95.8852, -26.8166, 0.83 ) }
    dend_14 { pt3dadd( -31.5743, 97.7651, -27.2886, 0.83 ) }
    dend_14 { pt3dadd( -31.9856, 98.7922, -27.5633, 0.83 ) }
    dend_14 { pt3dadd( -33.1211, 101.804, -28.3313, 0.83 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 93/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 2.46807, 19.3741, -3.61176, 0.83 ) }
    dend_1 { pt3dadd( 0.770845, 22.2622, -4.57461, 0.83 ) }
    dend_1 { pt3dadd( -0.91216, 25.1261, -5.52939, 1.66 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 96/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 4.64311, 41.2485, 0.0, 0.55 ) }
    axon_1 { pt3dadd( 6.28909, 56.158, 0.0, 0.55 ) }
    axon_1 { pt3dadd( 7.93508, 71.0674, 0.0, 0.55 ) }
    // Section: dend_35, id: dend_35, parent: dend_33 (entry count 99/100)
    dend_35 { pt3dclear() }
    dend_35 { pt3dadd( 38.6936, -37.3018, -11.1862, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_35 { pt3dadd( 40.985, -38.0628, -11.6077, 0.83 ) }
    dend_35 { pt3dadd( 44.0272, -39.244, -12.1831, 0.83 ) }
    dend_35 { pt3dadd( 45.2059, -39.8219, -12.3957, 0.55 ) }
    dend_35 { pt3dadd( 47.2475, -40.9921, -12.7561, 0.83 ) }
    dend_35 { pt3dadd( 48.9045, -41.9958, -13.1914, 0.83 ) }
    dend_35 { pt3dadd( 49.9767, -42.7153, -13.529, 0.55 ) }
    dend_35 { pt3dadd( 50.648, -43.3161, -13.7993, 0.83 ) }
    dend_35 { pt3dadd( 51.8007, -44.57, -14.4521, 0.55 ) }
    dend_35 { pt3dadd( 52.7041, -45.5714, -15.0811, 0.83 ) }
    dend_35 { pt3dadd( 54.5299, -47.8081, -17.2865, 0.55 ) }
    dend_35 { pt3dadd( 55.1832, -48.6494, -18.3747, 0.28 ) }
    dend_35 { pt3dadd( 55.5972, -49.2339, -19.1585, 0.55 ) }
    dend_35 { pt3dadd( 56.4873, -50.5572, -20.9965, 0.28 ) }
    dend_35 { pt3dadd( 56.8863, -51.1601, -21.8274, 0.55 ) }
    dend_35 { pt3dadd( 58.7435, -54.4472, -26.1603, 0.28 ) }
    dend_35 { pt3dadd( 59.5815, -56.0642, -28.1138, 0.83 ) }
    dend_35 { pt3dadd( 60.7062, -58.0601, -30.4534, 0.55 ) }
    dend_35 { pt3dadd( 61.1023, -58.6979, -31.1766, 0.28 ) }
    dend_35 { pt3dadd( 61.9484, -60.0659, -32.586, 1.11 ) }
    dend_35 { pt3dadd( 63.8243, -62.9453, -35.2287, 0.28 ) }
    dend_35 { pt3dadd( 64.7085, -64.137, -36.1346, 0.83 ) }
    dend_35 { pt3dadd( 65.4108, -65.0097, -36.7968, 0.28 ) }
    dend_35 { pt3dadd( 66.4982, -66.1079, -37.8205, 0.55 ) }
    dend_35 { pt3dadd( 67.2036, -66.7571, -38.4763, 0.28 ) }
    dend_35 { pt3dadd( 68.8637, -68.1927, -39.9789, 0.83 ) }
    dend_35 { pt3dadd( 69.9238, -69.0682, -40.8327, 0.55 ) }
    dend_35 { pt3dadd( 70.684, -69.6937, -41.4631, 0.55 ) }
    dend_35 { pt3dadd( 72.6016, -71.3643, -43.0316, 0.83 ) }
    dend_35 { pt3dadd( 74.0459, -72.6869, -44.1475, 0.55 ) }
    dend_35 { pt3dadd( 74.8976, -73.4633, -44.8151, 0.83 ) }
    dend_35 { pt3dadd( 75.6506, -74.1982, -45.4299, 0.55 ) }
    dend_35 { pt3dadd( 76.7409, -75.3292, -46.2917, 0.55 ) }
    dend_35 { pt3dadd( 77.9217, -76.4881, -47.1579, 0.55 ) }
    dend_35 { pt3dadd( 78.3434, -76.9239, -47.4264, 0.83 ) }
    dend_35 { pt3dadd( 79.516, -78.2313, -48.3812, 0.55 ) }
    dend_35 { pt3dadd( 80.6538, -79.521, -49.379, 0.55 ) }
    dend_35 { pt3dadd( 80.9938, -79.9121, -49.6843, 0.83 ) }
    dend_35 { pt3dadd( 82.7342, -81.913, -51.1578, 0.55 ) }
    dend_35 { pt3dadd( 84.4994, -83.9161, -52.5778, 1.11 ) }
    dend_35 { pt3dadd( 86.3886, -86.0976, -54.0497, 0.55 ) }
    dend_35 { pt3dadd( 88.7577, -89.0657, -55.8882, 0.83 ) }
    dend_35 { pt3dadd( 89.7313, -90.3218, -56.6377, 0.28 ) }
    dend_35 { pt3dadd( 90.7191, -91.6888, -57.35, 0.55 ) }
    dend_35 { pt3dadd( 91.3086, -92.5196, -57.7148, 0.28 ) }
    dend_35 { pt3dadd( 92.1555, -93.6408, -58.1214, 0.55 ) }
    dend_35 { pt3dadd( 93.6998, -95.5803, -58.6193, 0.28 ) }
    dend_35 { pt3dadd( 95.1314, -97.4079, -59.2181, 0.55 ) }
    dend_35 { pt3dadd( 96.4089, -99.0012, -59.827, 0.28 ) }
    dend_35 { pt3dadd( 97.1995, -99.9691, -60.2738, 0.55 ) }
    dend_35 { pt3dadd( 97.9595, -100.855, -60.7115, 0.28 ) }
    dend_35 { pt3dadd( 99.0052, -102.067, -61.378, 0.83 ) }
    dend_35 { pt3dadd( 100.8, -104.188, -62.6674, 0.28 ) }
    dend_35 { pt3dadd( 101.994, -105.689, -63.6775, 0.83 ) }
    dend_35 { pt3dadd( 102.708, -106.568, -64.323, 0.28 ) }
    dend_35 { pt3dadd( 103.692, -107.891, -65.2572, 0.55 ) }
    dend_35 { pt3dadd( 104.891, -109.619, -66.4218, 0.28 ) }
    dend_35 { pt3dadd( 105.538, -110.601, -67.0288, 0.83 ) }
    dend_35 { pt3dadd( 106.457, -111.952, -67.754, 0.28 ) }
    dend_35 { pt3dadd( 106.895, -112.59, -68.0681, 0.55 ) }
    dend_35 { pt3dadd( 107.644, -113.687, -68.5505, 0.28 ) }
    dend_35 { pt3dadd( 108.113, -114.378, -68.8685, 0.83 ) }
    dend_35 { pt3dadd( 109.435, -116.226, -69.7269, 0.28 ) }
    dend_35 { pt3dadd( 109.84, -116.691, -69.9761, 0.55 ) }
    dend_35 { pt3dadd( 111.046, -118.037, -70.7041, 0.28 ) }
    dend_35 { pt3dadd( 111.645, -118.657, -71.0463, 0.55 ) }
    dend_35 { pt3dadd( 112.834, -119.737, -71.6606, 0.28 ) }
    dend_35 { pt3dadd( 114.043, -120.81, -72.2467, 0.55 ) }
    dend_35 { pt3dadd( 115.8, -122.35, -73.013, 0.55 ) }
    dend_35 { pt3dadd( 117.407, -123.785, -73.734, 0.55 ) }
    dend_35 { pt3dadd( 118.019, -124.325, -74.0029, 0.28 ) }
    dend_35 { pt3dadd( 119.083, -125.27, -74.4492, 0.55 ) }
    dend_35 { pt3dadd( 120.004, -126.127, -74.8305, 0.28 ) }
    dend_35 { pt3dadd( 120.545, -126.687, -75.1078, 0.55 ) }
    dend_35 { pt3dadd( 121.871, -128.114, -75.8897, 0.28 ) }
    dend_35 { pt3dadd( 122.826, -129.072, -76.5073, 0.55 ) }
    dend_35 { pt3dadd( 124.034, -130.194, -77.3092, 0.28 ) }
    dend_35 { pt3dadd( 124.672, -130.754, -77.7245, 0.55 ) }
    dend_35 { pt3dadd( 125.572, -131.451, -78.1547, 0.28 ) }
    dend_35 { pt3dadd( 126.073, -131.829, -78.3852, 0.55 ) }
    dend_35 { pt3dadd( 127.453, -132.802, -78.9445, 0.28 ) }
    dend_35 { pt3dadd( 129.349, -134.101, -79.6246, 0.55 ) }
    dend_35 { pt3dadd( 130.137, -134.581, -79.8145, 0.55 ) }
    dend_35 { pt3dadd( 132.66, -135.866, -80.2077, 0.28 ) }
    // Section: dend_34, id: dend_34, parent: dend_33 (entry count 83/100)
    dend_34 { pt3dclear() }
    dend_34 { pt3dadd( 38.6936, -37.3018, -11.1862, 1.11 ) }
    dend_34 { pt3dadd( 40.2133, -40.1068, -11.7399, 1.11 ) }
    dend_34 { pt3dadd( 41.2397, -42.1659, -12.1596, 0.55 ) }
    dend_34 { pt3dadd( 42.2592, -44.405, -12.724, 0.83 ) }
    dend_34 { pt3dadd( 43.8519, -48.2134, -13.7442, 0.83 ) }
    dend_34 { pt3dadd( 45.1009, -51.3512, -14.5878, 0.55 ) }
    dend_34 { pt3dadd( 46.1873, -54.1875, -15.3481, 0.83 ) }
    dend_34 { pt3dadd( 47.1974, -57.1324, -16.1827, 0.55 ) }
    dend_34 { pt3dadd( 48.181, -60.0414, -17.0317, 0.55 ) }
    dend_34 { pt3dadd( 48.642, -61.4922, -17.4191, 0.28 ) }
    dend_34 { pt3dadd( 48.9856, -62.457, -17.6788, 0.55 ) }
    dend_34 { pt3dadd( 49.6629, -64.1819, -17.994, 0.28 ) }
    dend_34 { pt3dadd( 50.3383, -65.7732, -18.2172, 0.55 ) }
    dend_34 { pt3dadd( 51.2302, -67.5108, -18.4106, 0.28 ) }
    dend_34 { pt3dadd( 52.6203, -69.8503, -18.5437, 0.55 ) }
    dend_34 { pt3dadd( 53.9719, -71.891, -18.5825, 0.28 ) }
    dend_34 { pt3dadd( 54.5549, -72.7535, -18.6212, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_34 { pt3dadd( 55.3199, -74.0079, -18.7885, 0.55 ) }
    dend_34 { pt3dadd( 56.2131, -75.7449, -19.0683, 0.55 ) }
    dend_34 { pt3dadd( 56.4998, -76.3775, -19.2051, 0.83 ) }
    dend_34 { pt3dadd( 57.4422, -78.6029, -19.7299, 0.28 ) }
    dend_34 { pt3dadd( 58.3637, -81.43, -20.3849, 0.83 ) }
    dend_34 { pt3dadd( 59.533, -85.4904, -21.4431, 0.28 ) }
    dend_34 { pt3dadd( 59.8606, -86.9555, -21.9172, 0.55 ) }
    dend_34 { pt3dadd( 60.0898, -88.3456, -22.3753, 0.28 ) }
    dend_34 { pt3dadd( 60.2984, -89.9769, -22.9997, 0.83 ) }
    dend_34 { pt3dadd( 60.5732, -92.755, -24.0505, 0.28 ) }
    dend_34 { pt3dadd( 60.8302, -95.0636, -24.8394, 0.55 ) }
    dend_34 { pt3dadd( 61.3594, -98.6479, -26.0148, 0.28 ) }
    dend_34 { pt3dadd( 61.7626, -100.855, -26.7337, 0.55 ) }
    dend_34 { pt3dadd( 62.6555, -105.372, -28.0641, 0.55 ) }
    dend_34 { pt3dadd( 63.2508, -107.778, -28.6363, 0.55 ) }
    dend_34 { pt3dadd( 63.7413, -109.43, -28.8883, 0.28 ) }
    dend_34 { pt3dadd( 64.0307, -110.392, -28.9644, 0.55 ) }
    dend_34 { pt3dadd( 64.62, -112.102, -28.9502, 0.28 ) }
    dend_34 { pt3dadd( 64.9601, -112.822, -28.8959, 0.55 ) }
    dend_34 { pt3dadd( 66.4034, -115.425, -28.2016, 0.28 ) }
    dend_34 { pt3dadd( 67.2935, -116.758, -27.7687, 0.55 ) }
    dend_34 { pt3dadd( 68.6574, -118.774, -26.875, 0.28 ) }
    dend_34 { pt3dadd( 68.8391, -119.032, -26.7316, 0.55 ) }
    dend_34 { pt3dadd( 71.2663, -122.123, -24.8771, 0.28 ) }
    dend_34 { pt3dadd( 72.4476, -123.561, -24.0293, 0.55 ) }
    dend_34 { pt3dadd( 74.5557, -126.182, -22.6232, 0.28 ) }
    dend_34 { pt3dadd( 75.4148, -127.244, -22.1208, 0.55 ) }
    dend_34 { pt3dadd( 76.4116, -128.5, -21.6334, 0.28 ) }
    dend_34 { pt3dadd( 77.8432, -130.503, -21.118, 0.83 ) }
    dend_34 { pt3dadd( 79.4904, -132.888, -20.6833, 0.28 ) }
    dend_34 { pt3dadd( 80.8083, -134.63, -20.4212, 0.83 ) }
    dend_34 { pt3dadd( 82.2847, -136.506, -20.1573, 0.28 ) }
    dend_34 { pt3dadd( 83.3296, -137.665, -20.0126, 0.28 ) }
    dend_34 { pt3dadd( 84.0945, -138.373, -19.8961, 0.55 ) }
    dend_34 { pt3dadd( 86.8687, -140.348, -19.1647, 0.28 ) }
    dend_34 { pt3dadd( 87.7876, -140.838, -18.8357, 0.55 ) }
    dend_34 { pt3dadd( 89.263, -141.549, -18.2157, 0.28 ) }
    dend_34 { pt3dadd( 90.169, -142.026, -17.7987, 0.55 ) }
    dend_34 { pt3dadd( 91.9272, -143.231, -17.0005, 0.28 ) }
    dend_34 { pt3dadd( 93.2915, -144.44, -16.3594, 0.55 ) }
    dend_34 { pt3dadd( 96.2341, -148.073, -15.291, 0.28 ) }
    dend_34 { pt3dadd( 96.8775, -149.015, -15.1276, 0.28 ) }
    dend_34 { pt3dadd( 98.2548, -151.465, -14.9081, 0.83 ) }
    dend_34 { pt3dadd( 99.9368, -154.974, -14.7879, 0.28 ) }
    dend_34 { pt3dadd( 100.698, -156.861, -14.8269, 0.55 ) }
    dend_34 { pt3dadd( 102.265, -161.009, -15.0181, 0.28 ) }
    dend_34 { pt3dadd( 102.927, -162.862, -15.1159, 0.28 ) }
    dend_34 { pt3dadd( 103.545, -164.496, -15.1945, 0.55 ) }
    dend_34 { pt3dadd( 104.323, -166.462, -15.3285, 0.28 ) }
    dend_34 { pt3dadd( 104.89, -167.796, -15.4181, 0.55 ) }
    dend_34 { pt3dadd( 105.782, -169.841, -15.4874, 0.28 ) }
    dend_34 { pt3dadd( 106.181, -170.8, -15.4145, 0.55 ) }
    dend_34 { pt3dadd( 106.992, -172.91, -15.1669, 0.28 ) }
    dend_34 { pt3dadd( 107.36, -173.943, -15.0089, 0.55 ) }
    dend_34 { pt3dadd( 108.173, -176.66, -14.75, 0.28 ) }
    dend_34 { pt3dadd( 108.541, -178.198, -14.6204, 0.55 ) }
    dend_34 { pt3dadd( 109.136, -180.611, -14.4243, 0.55 ) }
    dend_34 { pt3dadd( 109.718, -182.893, -14.1406, 0.28 ) }
    dend_34 { pt3dadd( 110.174, -184.555, -13.8107, 0.55 ) }
    dend_34 { pt3dadd( 110.972, -187.955, -13.0476, 0.28 ) }
    dend_34 { pt3dadd( 111.388, -189.645, -12.7514, 0.55 ) }
    dend_34 { pt3dadd( 112.272, -193.179, -12.2989, 0.28 ) }
    dend_34 { pt3dadd( 112.474, -194.26, -12.2294, 0.55 ) }
    dend_34 { pt3dadd( 112.644, -195.632, -12.1789, 0.28 ) }
    dend_34 { pt3dadd( 112.846, -197.453, -12.1943, 0.55 ) }
    dend_34 { pt3dadd( 113.137, -200.792, -12.1713, 0.28 ) }
    dend_34 { pt3dadd( 113.265, -202.025, -12.1683, 0.55 ) }
    dend_34 { pt3dadd( 113.417, -204.414, -12.3928, 0.28 ) }
    dend_34 { pt3dadd( 113.497, -205.396, -12.5213, 0.55 ) }
    dend_34 { pt3dadd( 113.763, -208.147, -12.9917, 0.28 ) }
    dend_34 { pt3dadd( 114.015, -210.65, -13.3796, 0.55 ) }
    dend_34 { pt3dadd( 114.297, -213.575, -13.8173, 0.28 ) }
    dend_34 { pt3dadd( 114.985, -219.317, -14.7397, 0.55 ) }
    dend_34 { pt3dadd( 115.582, -223.268, -15.3475, 0.28 ) }
    dend_34 { pt3dadd( 115.936, -225.344, -15.6998, 0.28 ) }
    dend_34 { pt3dadd( 116.386, -227.737, -16.1389, 0.55 ) }
    dend_34 { pt3dadd( 116.988, -230.469, -16.741, 0.28 ) }
    dend_34 { pt3dadd( 117.375, -231.823, -17.0679, 0.55 ) }
    dend_34 { pt3dadd( 118.045, -233.216, -17.2478, 0.28 ) }
    dend_34 { pt3dadd( 119.212, -234.904, -17.3628, 0.55 ) }
    dend_34 { pt3dadd( 120.406, -236.293, -17.3065, 0.28 ) }
    dend_34 { pt3dadd( 122.402, -238.364, -17.1855, 0.55 ) }
    dend_34 { pt3dadd( 124.737, -240.762, -17.0504, 0.28 ) }
    dend_34 { pt3dadd( 128.21, -244.322, -16.9946, 0.55 ) }
    dend_34 { pt3dadd( 130.875, -247.257, -17.2162, 0.55 ) }
    dend_34 { pt3dadd( 132.098, -248.685, -17.4023, 0.28 ) }
    dend_34 { pt3dadd( 133.292, -250.247, -17.8246, 0.55 ) }
    dend_34 { pt3dadd( 134.811, -252.584, -18.7827, 0.28 ) }
    dend_34 { pt3dadd( 135.643, -254.187, -19.5771, 0.55 ) }
    dend_34 { pt3dadd( 136.8, -256.898, -21.0546, 0.28 ) }
    dend_34 { pt3dadd( 137.402, -258.406, -21.9865, 0.55 ) }
    dend_34 { pt3dadd( 138.12, -260.206, -23.1148, 0.28 ) }
    dend_34 { pt3dadd( 138.514, -261.037, -23.5578, 0.55 ) }
    dend_34 { pt3dadd( 139.256, -262.492, -24.1508, 0.28 ) }
    dend_34 { pt3dadd( 139.692, -263.407, -24.4333, 0.55 ) }
    // Section: dend_20, id: dend_20, parent: dend_16 (entry count 95/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 1.43147, -27.6668, 0.315035, 1.38 ) }
    dend_20 { pt3dadd( 1.28314, -28.3133, 0.304838, 1.38 ) }
    dend_20 { pt3dadd( 0.701023, -30.8502, 0.264824, 1.38 ) }
    // Section: dend_17, id: dend_17, parent: dend_16 (entry count 98/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 1.43147, -27.6668, 0.315035, 0.83 ) }
    dend_17 { pt3dadd( 0.554925, -30.307, 1.02804, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_17 { pt3dadd( -0.089103, -32.99, 2.56847, 0.83 ) }
    dend_17 { pt3dadd( -0.598457, -35.5838, 4.18957, 1.38 ) }
    dend_17 { pt3dadd( -1.16144, -38.4102, 6.06132, 1.11 ) }
    dend_17 { pt3dadd( -1.59287, -40.5762, 7.49571, 0.55 ) }
    dend_17 { pt3dadd( -2.10908, -43.1678, 9.21195, 1.11 ) }
    dend_17 { pt3dadd( -3.0689, -49.2464, 13.7439, 0.83 ) }
    dend_17 { pt3dadd( -3.34485, -51.7176, 15.7683, 1.11 ) }
    dend_17 { pt3dadd( -3.62191, -53.7523, 17.581, 0.83 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 8/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -0.91216, 25.1261, -5.52939, 1.38 ) }
    dend_2 { pt3dadd( 1.56802, 31.3348, -7.02856, 1.38 ) }
    dend_2 { pt3dadd( 3.58599, 36.3865, -8.24835, 1.38 ) }
    dend_2 { pt3dadd( 4.77525, 39.3637, -8.96721, 1.38 ) }
    dend_2 { pt3dadd( 5.7105, 41.7049, -9.53254, 1.38 ) }
    // Section: dend_37, id: dend_37, parent: dend_35 (entry count 13/100)
    dend_37 { pt3dclear() }
    dend_37 { pt3dadd( 132.66, -135.866, -80.2077, 0.28 ) }
    dend_37 { pt3dadd( 134.389, -135.526, -80.6555, 0.28 ) }
    dend_37 { pt3dadd( 135.785, -135.252, -81.017, 0.55 ) }
    dend_37 { pt3dadd( 137.672, -134.882, -81.5055, 0.28 ) }
    dend_37 { pt3dadd( 138.963, -134.628, -81.84, 0.55 ) }
    // Section: dend_36, id: dend_36, parent: dend_35 (entry count 18/100)
    dend_36 { pt3dclear() }
    dend_36 { pt3dadd( 132.66, -135.866, -80.2077, 0.28 ) }
    dend_36 { pt3dadd( 135.533, -136.933, -81.2688, 0.28 ) }
    dend_36 { pt3dadd( 136.783, -137.366, -81.6344, 0.28 ) }
    dend_36 { pt3dadd( 139.349, -138.254, -82.0824, 0.83 ) }
    dend_36 { pt3dadd( 141.091, -138.859, -82.283, 0.28 ) }
    dend_36 { pt3dadd( 142.591, -139.324, -82.3152, 0.55 ) }
    dend_36 { pt3dadd( 143.984, -139.734, -82.2799, 0.28 ) }
    dend_36 { pt3dadd( 144.058, -139.751, -82.267, 0.55 ) }
    dend_36 { pt3dadd( 146.145, -140.194, -81.8173, 0.28 ) }
    dend_36 { pt3dadd( 146.227, -140.216, -81.7955, 0.55 ) }
    dend_36 { pt3dadd( 148.779, -140.882, -81.1521, 0.28 ) }
    dend_36 { pt3dadd( 149.187, -140.996, -81.0615, 0.55 ) }
    dend_36 { pt3dadd( 152.254, -141.872, -80.4415, 0.28 ) }
    dend_36 { pt3dadd( 152.829, -142.035, -80.3345, 0.55 ) }
    dend_36 { pt3dadd( 155.022, -142.643, -79.9916, 0.28 ) }
    dend_36 { pt3dadd( 156.561, -143.115, -79.78, 0.55 ) }
    // Section: dend_32, id: dend_32, parent: dend_20 (entry count 34/100)
    dend_32 { pt3dclear() }
    dend_32 { pt3dadd( 0.701023, -30.8502, 0.264824, 1.38 ) }
    dend_32 { pt3dadd( 0.398296, -31.031, 0.371703, 1.38 ) }
    dend_32 { pt3dadd( -5.44096, -34.7617, 1.99243, 1.38 ) }
    dend_32 { pt3dadd( -9.18138, -37.1724, 2.84209, 1.11 ) }
    dend_32 { pt3dadd( -11.4438, -38.7124, 3.22234, 0.83 ) }
    dend_32 { pt3dadd( -13.8807, -40.4219, 3.51179, 0.83 ) }
    dend_32 { pt3dadd( -17.2074, -42.9183, 3.57177, 0.83 ) }
    dend_32 { pt3dadd( -18.1702, -43.7467, 3.47262, 0.83 ) }
    dend_32 { pt3dadd( -19.0682, -44.6345, 3.25442, 0.83 ) }
    dend_32 { pt3dadd( -21.8686, -47.6599, 2.53454, 0.83 ) }
    dend_32 { pt3dadd( -23.9494, -49.8815, 1.99636, 0.83 ) }
    dend_32 { pt3dadd( -28.0082, -54.0726, 0.958395, 0.83 ) }
    dend_32 { pt3dadd( -30.4892, -56.7299, 0.324835, 0.55 ) }
    dend_32 { pt3dadd( -32.2286, -58.5526, -0.098867, 0.55 ) }
    dend_32 { pt3dadd( -34.9848, -61.2438, -0.704624, 0.55 ) }
    dend_32 { pt3dadd( -37.6911, -63.6638, -1.27103, 0.55 ) }
    dend_32 { pt3dadd( -39.5731, -65.0931, -1.30023, 0.55 ) }
    dend_32 { pt3dadd( -40.9813, -66.0306, -1.07719, 0.55 ) }
    dend_32 { pt3dadd( -42.9559, -67.2368, -0.614313, 0.55 ) }
    dend_32 { pt3dadd( -47.5637, -69.9766, 0.712491, 0.55 ) }
    dend_32 { pt3dadd( -49.7328, -71.2691, 1.4328, 0.55 ) }
    dend_32 { pt3dadd( -58.4111, -76.6452, 4.36256, 0.55 ) }
    dend_32 { pt3dadd( -60.5239, -78.1028, 5.06925, 0.55 ) }
    dend_32 { pt3dadd( -64.5385, -80.8713, 6.30693, 0.55 ) }
    dend_32 { pt3dadd( -66.6225, -82.4249, 6.86539, 0.55 ) }
    dend_32 { pt3dadd( -67.7275, -83.3335, 7.09477, 0.55 ) }
    dend_32 { pt3dadd( -71.2794, -86.3859, 7.41301, 0.55 ) }
    dend_32 { pt3dadd( -73.4146, -88.3567, 7.1631, 0.55 ) }
    dend_32 { pt3dadd( -75.8197, -90.4295, 6.88171, 0.55 ) }
    dend_32 { pt3dadd( -78.9192, -93.191, 6.61314, 0.55 ) }
    dend_32 { pt3dadd( -79.973, -94.083, 6.65018, 0.55 ) }
    dend_32 { pt3dadd( -80.9827, -94.8534, 6.79233, 0.55 ) }
    dend_32 { pt3dadd( -83.052, -96.2761, 7.29774, 0.55 ) }
    dend_32 { pt3dadd( -85.589, -97.8597, 8.03178, 0.55 ) }
    dend_32 { pt3dadd( -87.7853, -99.2618, 8.73257, 0.55 ) }
    dend_32 { pt3dadd( -91.9964, -101.566, 10.0204, 0.55 ) }
    dend_32 { pt3dadd( -92.9093, -102.052, 10.2656, 0.55 ) }
    dend_32 { pt3dadd( -96.28, -103.865, 11.0163, 0.55 ) }
    dend_32 { pt3dadd( -98.4303, -104.947, 11.3616, 0.55 ) }
    dend_32 { pt3dadd( -100.605, -105.988, 11.5196, 0.55 ) }
    dend_32 { pt3dadd( -102.949, -107.053, 11.1337, 0.55 ) }
    dend_32 { pt3dadd( -104.974, -108.021, 10.4527, 0.55 ) }
    dend_32 { pt3dadd( -107.052, -108.955, 9.62113, 0.55 ) }
    dend_32 { pt3dadd( -108.921, -109.707, 8.78759, 0.55 ) }
    dend_32 { pt3dadd( -111.356, -110.598, 7.65926, 0.55 ) }
    dend_32 { pt3dadd( -118.23, -112.853, 4.82821, 0.55 ) }
    dend_32 { pt3dadd( -120.409, -113.536, 4.03902, 0.55 ) }
    dend_32 { pt3dadd( -122.972, -114.37, 3.10553, 0.55 ) }
    dend_32 { pt3dadd( -125.492, -115.356, 2.29663, 0.55 ) }
    dend_32 { pt3dadd( -127.631, -116.315, 1.98972, 0.55 ) }
    dend_32 { pt3dadd( -131.543, -118.128, 1.84382, 0.55 ) }
    dend_32 { pt3dadd( -133.212, -118.918, 2.09141, 0.55 ) }
    dend_32 { pt3dadd( -137.502, -121.09, 2.93665, 0.55 ) }
    dend_32 { pt3dadd( -141.127, -123.298, 3.91323, 0.55 ) }
    dend_32 { pt3dadd( -146.825, -127.41, 5.96259, 0.55 ) }
    dend_32 { pt3dadd( -154.395, -132.63, 5.17021, 0.55 ) }
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 90/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 0.701023, -30.8502, 0.264824, 1.11 ) }
    dend_21 { pt3dadd( 0.646222, -31.5781, -0.70664, 1.11 ) }
    dend_21 { pt3dadd( 0.521554, -33.234, -2.91668, 1.11 ) }
    dend_21 { pt3dadd( 0.322625, -35.8763, -6.44313, 1.11 ) }
    dend_21 { pt3dadd( 0.0467159, -39.5412, -11.3343, 1.11 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 95/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -3.62191, -53.7523, 17.581, 0.83 ) }
    dend_19 { pt3dadd( -2.21266, -60.4264, 26.7202, 0.83 ) }
    dend_19 { pt3dadd( -1.73178, -62.9909, 29.8993, 0.83 ) }
    dend_19 { pt3dadd( -1.18966, -65.7086, 33.0023, 0.83 ) }
    dend_19 { pt3dadd( -0.83039, -67.7095, 35.103, 1.11 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_19 { pt3dadd( -0.396562, -70.2036, 37.5604, 0.55 ) }
    dend_19 { pt3dadd( 0.0880628, -73.3029, 40.4042, 0.83 ) }
    dend_19 { pt3dadd( 0.457862, -76.2128, 42.3884, 0.83 ) }
    dend_19 { pt3dadd( 0.762005, -77.7425, 43.3752, 0.55 ) }
    dend_19 { pt3dadd( 1.13934, -79.7453, 44.4488, 0.83 ) }
    dend_19 { pt3dadd( 1.4603, -81.4613, 45.2195, 0.83 ) }
    dend_19 { pt3dadd( 1.88049, -83.3718, 46.0335, 0.83 ) }
    dend_19 { pt3dadd( 2.34664, -85.0977, 46.7222, 0.83 ) }
    dend_19 { pt3dadd( 2.61283, -86.1137, 47.1519, 0.83 ) }
    dend_19 { pt3dadd( 3.14738, -88.0929, 48.1786, 0.55 ) }
    dend_19 { pt3dadd( 3.49842, -89.4355, 48.9354, 1.11 ) }
    dend_19 { pt3dadd( 4.73042, -94.3, 51.805, 0.55 ) }
    dend_19 { pt3dadd( 5.12445, -95.8844, 52.8084, 0.55 ) }
    dend_19 { pt3dadd( 5.40754, -97.2885, 53.7351, 1.11 ) }
    dend_19 { pt3dadd( 5.99119, -100.601, 56.05, 0.55 ) }
    dend_19 { pt3dadd( 6.31452, -102.388, 57.4105, 1.11 ) }
    dend_19 { pt3dadd( 8.44653, -110.729, 64.8831, 1.11 ) }
    dend_19 { pt3dadd( 10.0822, -117.488, 73.9166, 1.11 ) }
    dend_19 { pt3dadd( 13.9761, -124.95, 81.6055, 1.11 ) }
    dend_19 { pt3dadd( 19.2105, -131.336, 89.4652, 1.11 ) }
    dend_19 { pt3dadd( 22.6999, -139.184, 96.9617, 1.11 ) }
    dend_19 { pt3dadd( 28.1742, -144.789, 105.243, 1.11 ) }
    dend_19 { pt3dadd( 33.3303, -150.345, 113.758, 1.11 ) }
    dend_19 { pt3dadd( 38.6815, -155.225, 122.562, 1.11 ) }
    dend_19 { pt3dadd( 43.6229, -157.946, 132.468, 1.11 ) }
    dend_19 { pt3dadd( 47.6591, -159.563, 143.007, 1.11 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 26/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -3.62191, -53.7523, 17.581, 1.11 ) }
    dend_18 { pt3dadd( -3.64701, -54.2041, 17.9929, 1.11 ) }
    dend_18 { pt3dadd( -3.70411, -55.0802, 18.778, 1.11 ) }
    dend_18 { pt3dadd( -3.76166, -56.6543, 20.1777, 1.11 ) }
    dend_18 { pt3dadd( -3.79354, -59.0668, 22.2609, 1.11 ) }
    dend_18 { pt3dadd( -3.78386, -61.5221, 24.3831, 1.11 ) }
    dend_18 { pt3dadd( -3.77677, -62.5334, 25.2231, 0.55 ) }
    dend_18 { pt3dadd( -3.76198, -63.4999, 25.9818, 0.83 ) }
    dend_18 { pt3dadd( -3.85172, -65.2758, 27.2874, 1.11 ) }
    dend_18 { pt3dadd( -3.91677, -65.77, 27.6585, 1.11 ) }
    dend_18 { pt3dadd( -4.30274, -67.1637, 28.5999, 0.55 ) }
    dend_18 { pt3dadd( -4.73175, -68.2724, 29.3636, 0.83 ) }
    dend_18 { pt3dadd( -5.45158, -69.8445, 30.5383, 0.83 ) }
    dend_18 { pt3dadd( -6.36523, -71.7277, 32.0854, 0.83 ) }
    dend_18 { pt3dadd( -7.46141, -73.7188, 33.9706, 0.55 ) }
    dend_18 { pt3dadd( -8.02862, -74.7028, 34.9826, 0.83 ) }
    dend_18 { pt3dadd( -8.75244, -75.8468, 36.2818, 0.55 ) }
    dend_18 { pt3dadd( -9.18804, -76.5568, 37.176, 1.11 ) }
    dend_18 { pt3dadd( -10.3202, -78.4971, 39.7978, 0.55 ) }
    dend_18 { pt3dadd( -10.979, -79.7646, 41.4549, 0.83 ) }
    dend_18 { pt3dadd( -11.3534, -80.5427, 42.3507, 0.83 ) }
    dend_18 { pt3dadd( -12.0732, -82.0652, 44.0167, 0.83 ) }
    dend_18 { pt3dadd( -12.4653, -82.8871, 44.8672, 1.11 ) }
    dend_18 { pt3dadd( -12.8838, -83.6464, 45.678, 0.28 ) }
    dend_18 { pt3dadd( -13.3132, -84.2683, 46.2734, 0.83 ) }
    dend_18 { pt3dadd( -13.735, -85.0452, 46.8566, 0.28 ) }
    dend_18 { pt3dadd( -14.2831, -86.1825, 47.6883, 0.83 ) }
    dend_18 { pt3dadd( -15.4717, -91.7676, 51.7504, 0.83 ) }
    dend_18 { pt3dadd( -16.642, -97.0422, 56.213, 0.83 ) }
    dend_18 { pt3dadd( -17.2102, -101.71, 61.4079, 0.83 ) }
    dend_18 { pt3dadd( -16.5998, -106.118, 66.8216, 0.83 ) }
    dend_18 { pt3dadd( -14.9583, -109.788, 72.5613, 0.83 ) }
    dend_18 { pt3dadd( -13.7716, -112.003, 79.1029, 0.83 ) }
    dend_18 { pt3dadd( -13.3507, -113.02, 86.0234, 0.83 ) }
    dend_18 { pt3dadd( -12.5536, -114.514, 92.8233, 0.83 ) }
    dend_18 { pt3dadd( -12.166, -116.96, 99.3787, 0.83 ) }
    // Section: dend_9, id: dend_9, parent: dend_2 (entry count 62/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 5.7105, 41.7049, -9.53254, 1.11 ) }
    dend_9 { pt3dadd( 11.2125, 43.7201, -22.5719, 1.11 ) }
    dend_9 { pt3dadd( 16.7696, 45.7554, -35.742, 1.11 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 65/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 5.7105, 41.7049, -9.53254, 1.38 ) }
    dend_3 { pt3dadd( 5.33665, 46.8672, -10.8462, 1.38 ) }
    dend_3 { pt3dadd( 5.03242, 51.0682, -11.9153, 1.38 ) }
    // Section: dend_23, id: dend_23, parent: dend_21 (entry count 68/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( 0.0467159, -39.5412, -11.3343, 0.83 ) }
    dend_23 { pt3dadd( 0.470578, -40.7761, -12.7379, 0.83 ) }
    dend_23 { pt3dadd( 1.39244, -43.4619, -15.7906, 0.83 ) }
    dend_23 { pt3dadd( 2.04043, -45.3498, -17.9364, 1.11 ) }
    // Section: dend_22, id: dend_22, parent: dend_21 (entry count 72/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( 0.0467159, -39.5412, -11.3343, 0.55 ) }
    dend_22 { pt3dadd( -0.445995, -40.1894, -12.0526, 0.55 ) }
    dend_22 { pt3dadd( -2.0128, -42.3673, -14.6184, 0.55 ) }
    dend_22 { pt3dadd( -3.55953, -44.4133, -17.1908, 0.55 ) }
    dend_22 { pt3dadd( -4.10601, -45.1852, -18.1241, 0.28 ) }
    dend_22 { pt3dadd( -5.81431, -47.5583, -20.986, 0.55 ) }
    dend_22 { pt3dadd( -7.72684, -50.1717, -23.9819, 0.55 ) }
    dend_22 { pt3dadd( -8.72572, -51.4711, -25.5273, 0.55 ) }
    dend_22 { pt3dadd( -9.54296, -52.5411, -26.8884, 0.55 ) }
    dend_22 { pt3dadd( -10.9715, -54.4522, -29.1918, 0.55 ) }
    dend_22 { pt3dadd( -12.0354, -55.9354, -30.9193, 0.28 ) }
    dend_22 { pt3dadd( -13.123, -57.5395, -32.5526, 0.55 ) }
    dend_22 { pt3dadd( -13.9966, -58.7711, -33.7589, 0.55 ) }
    dend_22 { pt3dadd( -15.5364, -60.7736, -35.7435, 0.28 ) }
    dend_22 { pt3dadd( -16.0532, -61.4258, -36.4136, 0.55 ) }
    dend_22 { pt3dadd( -16.6646, -62.1183, -37.2199, 0.28 ) }
    dend_22 { pt3dadd( -18.1669, -63.8273, -39.3901, 0.55 ) }
    dend_22 { pt3dadd( -19.2441, -64.8852, -41.0539, 0.28 ) }
    dend_22 { pt3dadd( -19.4188, -65.0195, -41.3149, 0.55 ) }
    dend_22 { pt3dadd( -20.4325, -65.6582, -42.7264, 0.28 ) }
    dend_22 { pt3dadd( -21.198, -66.1243, -43.867, 0.83 ) }
    dend_22 { pt3dadd( -22.3374, -66.8033, -45.7267, 0.28 ) }
    dend_22 { pt3dadd( -23.2385, -67.4424, -47.519, 0.55 ) }
    dend_22 { pt3dadd( -24.108, -68.2451, -49.7545, 0.28 ) }
    dend_22 { pt3dadd( -24.4925, -68.7442, -51.1718, 0.55 ) }
    dend_22 { pt3dadd( -24.7413, -69.1959, -52.3422, 0.28 ) }
    dend_22 { pt3dadd( -24.919, -69.6204, -53.3327, 0.55 ) }
    dend_22 { pt3dadd( -25.2574, -70.5152, -55.2414, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_22 { pt3dadd( -26.084, -72.8491, -59.8351, 0.55 ) }
    dend_22 { pt3dadd( -26.6577, -74.5552, -63.1177, 0.28 ) }
    dend_22 { pt3dadd( -26.8875, -75.1824, -64.3451, 0.83 ) }
    dend_22 { pt3dadd( -27.6587, -76.9486, -67.8068, 0.28 ) }
    dend_22 { pt3dadd( -28.0003, -77.6195, -69.0563, 0.55 ) }
    dend_22 { pt3dadd( -28.1473, -77.883, -69.4991, 0.55 ) }
    dend_22 { pt3dadd( -28.6225, -78.6675, -70.6945, 0.28 ) }
    dend_22 { pt3dadd( -29.1165, -79.4488, -71.8739, 0.55 ) }
    dend_22 { pt3dadd( -29.9198, -80.942, -74.1713, 0.28 ) }
    dend_22 { pt3dadd( -30.3891, -81.9584, -75.6241, 0.55 ) }
    dend_22 { pt3dadd( -30.6774, -82.8166, -76.7601, 0.55 ) }
    dend_22 { pt3dadd( -31.1558, -84.6187, -79.0072, 0.28 ) }
    dend_22 { pt3dadd( -31.2391, -85.1093, -79.5769, 0.55 ) }
    dend_22 { pt3dadd( -31.3167, -86.0867, -80.5773, 0.28 ) }
    dend_22 { pt3dadd( -31.3369, -88.1237, -82.3823, 0.55 ) }
    dend_22 { pt3dadd( -31.2231, -90.7, -84.6721, 0.55 ) }
    dend_22 { pt3dadd( -31.199, -91.6242, -85.4904, 0.28 ) }
    dend_22 { pt3dadd( -31.0805, -93.1092, -86.7426, 0.55 ) }
    dend_22 { pt3dadd( -30.9553, -94.8442, -88.3905, 0.28 ) }
    dend_22 { pt3dadd( -30.9357, -95.3515, -88.9384, 0.83 ) }
    dend_22 { pt3dadd( -30.8469, -97.9092, -92.0823, 0.28 ) }
    dend_22 { pt3dadd( -30.8673, -99.1222, -93.6531, 0.55 ) }
    dend_22 { pt3dadd( -30.9508, -100.376, -95.29, 0.28 ) }
    dend_22 { pt3dadd( -31.2575, -102.838, -98.5916, 0.55 ) }
    dend_22 { pt3dadd( -31.6356, -104.861, -101.471, 0.55 ) }
    dend_22 { pt3dadd( -31.9568, -106.15, -103.319, 0.28 ) }
    dend_22 { pt3dadd( -32.3136, -107.36, -105.091, 0.28 ) }
    dend_22 { pt3dadd( -32.511, -108.009, -106.079, 0.28 ) }
    dend_22 { pt3dadd( -33.0035, -109.546, -108.4, 0.55 ) }
    dend_22 { pt3dadd( -33.7811, -112.098, -112.081, 0.28 ) }
    dend_22 { pt3dadd( -34.0273, -112.883, -113.221, 0.83 ) }
    dend_22 { pt3dadd( -34.8554, -115.355, -116.779, 0.28 ) }
    dend_22 { pt3dadd( -35.0852, -116.001, -117.74, 0.55 ) }
    dend_22 { pt3dadd( -35.6513, -117.508, -119.948, 0.28 ) }
    dend_22 { pt3dadd( -36.1332, -118.762, -121.752, 0.55 ) }
    dend_22 { pt3dadd( -36.7512, -120.323, -124.009, 0.28 ) }
    dend_22 { pt3dadd( -37.0829, -121.077, -125.084, 0.55 ) }
    dend_22 { pt3dadd( -37.8075, -122.441, -127.012, 0.28 ) }
    dend_22 { pt3dadd( -38.5355, -123.747, -128.892, 0.55 ) }
    dend_22 { pt3dadd( -39.8158, -125.925, -132.187, 0.55 ) }
    dend_22 { pt3dadd( -40.4974, -127.094, -134.073, 0.28 ) }
    dend_22 { pt3dadd( -41.0948, -128.045, -135.688, 0.55 ) }
    dend_22 { pt3dadd( -41.7075, -129.015, -137.478, 0.83 ) }
    // Section: dend_13, id: dend_13, parent: dend_9 (entry count 43/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 16.7696, 45.7554, -35.742, 1.11 ) }
    dend_13 { pt3dadd( 19.4505, 54.0562, -26.9757, 1.11 ) }
    dend_13 { pt3dadd( 20.0561, 55.6626, -25.5429, 1.11 ) }
    dend_13 { pt3dadd( 20.9124, 57.5633, -24.0382, 1.11 ) }
    dend_13 { pt3dadd( 22.0767, 59.9947, -22.3302, 1.11 ) }
    dend_13 { pt3dadd( 23.5668, 63.0565, -20.417, 0.83 ) }
    dend_13 { pt3dadd( 25.0264, 65.9711, -18.7495, 0.83 ) }
    dend_13 { pt3dadd( 26.2977, 67.9825, -18.0956, 0.83 ) }
    dend_13 { pt3dadd( 27.476, 69.8094, -17.5088, 0.83 ) }
    dend_13 { pt3dadd( 28.4912, 71.3452, -17.0285, 0.83 ) }
    dend_13 { pt3dadd( 29.5888, 72.971, -16.5589, 0.83 ) }
    dend_13 { pt3dadd( 30.4652, 74.3604, -16.2563, 0.83 ) }
    dend_13 { pt3dadd( 31.4777, 76.1596, -16.1445, 0.83 ) }
    dend_13 { pt3dadd( 32.1566, 77.4952, -16.0872, 0.83 ) }
    dend_13 { pt3dadd( 32.5014, 78.2063, -16.0494, 0.83 ) }
    dend_13 { pt3dadd( 33.2781, 79.8472, -15.9702, 0.83 ) }
    dend_13 { pt3dadd( 34.0746, 81.415, -15.9567, 0.83 ) }
    dend_13 { pt3dadd( 35.7107, 84.7288, -16.0393, 0.83 ) }
    dend_13 { pt3dadd( 37.1863, 87.648, -16.2604, 0.55 ) }
    dend_13 { pt3dadd( 38.6554, 90.4185, -16.5688, 0.55 ) }
    dend_13 { pt3dadd( 39.86, 92.4422, -16.767, 0.55 ) }
    dend_13 { pt3dadd( 41.9911, 95.7432, -17.0018, 0.83 ) }
    dend_13 { pt3dadd( 42.9593, 97.2204, -17.081, 0.83 ) }
    dend_13 { pt3dadd( 45.5182, 101.078, -17.1924, 1.11 ) }
    dend_13 { pt3dadd( 47.4121, 103.874, -17.3497, 0.83 ) }
    dend_13 { pt3dadd( 50.8379, 108.831, -17.6231, 0.83 ) }
    dend_13 { pt3dadd( 53.0716, 112.026, -17.7365, 0.83 ) }
    dend_13 { pt3dadd( 54.048, 113.471, -17.7071, 0.83 ) }
    dend_13 { pt3dadd( 55.2417, 115.237, -17.5866, 1.11 ) }
    dend_13 { pt3dadd( 57.8706, 119.145, -17.0572, 0.55 ) }
    dend_13 { pt3dadd( 58.8138, 120.602, -16.8184, 0.55 ) }
    dend_13 { pt3dadd( 60.1903, 122.876, -16.4231, 0.55 ) }
    dend_13 { pt3dadd( 61.7055, 125.454, -16.0234, 0.55 ) }
    dend_13 { pt3dadd( 63.3537, 128.354, -15.6012, 0.55 ) }
    dend_13 { pt3dadd( 64.5113, 130.597, -15.3021, 0.55 ) }
    dend_13 { pt3dadd( 65.2244, 132.161, -15.0042, 0.28 ) }
    dend_13 { pt3dadd( 66.4184, 134.844, -14.3828, 0.28 ) }
    dend_13 { pt3dadd( 67.6602, 137.667, -13.6579, 0.55 ) }
    dend_13 { pt3dadd( 68.6876, 140.042, -13.0262, 0.55 ) }
    dend_13 { pt3dadd( 69.775, 142.721, -12.1918, 0.55 ) }
    dend_13 { pt3dadd( 71.4443, 147.086, -10.7175, 0.55 ) }
    dend_13 { pt3dadd( 72.7681, 150.617, -9.43361, 0.55 ) }
    dend_13 { pt3dadd( 73.3977, 152.529, -8.71309, 0.55 ) }
    dend_13 { pt3dadd( 73.7819, 153.728, -8.24254, 0.55 ) }
    dend_13 { pt3dadd( 74.9177, 157.524, -6.89073, 0.55 ) }
    dend_13 { pt3dadd( 75.6209, 160.177, -6.11207, 0.55 ) }
    dend_13 { pt3dadd( 76.1369, 162.185, -5.67385, 0.55 ) }
    dend_13 { pt3dadd( 77.2463, 166.831, -4.84638, 0.55 ) }
    dend_13 { pt3dadd( 77.9392, 169.711, -4.27052, 0.55 ) }
    dend_13 { pt3dadd( 78.4416, 171.869, -3.82941, 0.55 ) }
    dend_13 { pt3dadd( 79.0897, 174.488, -3.28485, 0.55 ) }
    dend_13 { pt3dadd( 79.9423, 177.692, -2.56886, 0.83 ) }
    dend_13 { pt3dadd( 80.4508, 179.465, -2.11558, 0.83 ) }
    dend_13 { pt3dadd( 82.1907, 185.07, -0.585944, 0.55 ) }
    dend_13 { pt3dadd( 82.7346, 186.82, -0.0941405, 0.55 ) }
    dend_13 { pt3dadd( 83.6871, 189.742, 0.747278, 0.55 ) }
    dend_13 { pt3dadd( 84.3755, 191.866, 1.28666, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_13 { pt3dadd( 85.4734, 195.522, 1.97341, 0.55 ) }
    dend_13 { pt3dadd( 86.6604, 199.566, 2.46234, 0.83 ) }
    dend_13 { pt3dadd( 87.3679, 201.686, 2.42042, 0.55 ) }
    dend_13 { pt3dadd( 88.1677, 203.661, 2.25005, 0.83 ) }
    dend_13 { pt3dadd( 89.4667, 206.38, 1.80826, 0.55 ) }
    dend_13 { pt3dadd( 90.9605, 209.066, 1.22735, 0.55 ) }
    dend_13 { pt3dadd( 92.2317, 210.972, 0.682174, 1.11 ) }
    dend_13 { pt3dadd( 95.7043, 215.36, -0.688186, 0.83 ) }
    dend_13 { pt3dadd( 98.4753, 218.461, -1.56885, 0.83 ) }
    dend_13 { pt3dadd( 100.482, 220.536, -2.05348, 0.83 ) }
    dend_13 { pt3dadd( 102.206, 222.33, -2.26579, 0.83 ) }
    dend_13 { pt3dadd( 103.951, 224.3, -2.35054, 0.83 ) }
    dend_13 { pt3dadd( 106.168, 227.225, -2.22664, 1.11 ) }
    dend_13 { pt3dadd( 107.819, 229.997, -1.83578, 0.83 ) }
    dend_13 { pt3dadd( 109.678, 233.938, -1.19502, 0.83 ) }
    dend_13 { pt3dadd( 111.187, 237.788, -0.407703, 0.83 ) }
    dend_13 { pt3dadd( 112.15, 240.844, 0.29908, 0.83 ) }
    dend_13 { pt3dadd( 112.685, 243.235, 0.910273, 0.83 ) }
    dend_13 { pt3dadd( 113.103, 245.94, 1.62295, 0.83 ) }
    dend_13 { pt3dadd( 113.286, 247.406, 1.95572, 0.83 ) }
    dend_13 { pt3dadd( 113.467, 248.647, 2.19111, 0.83 ) }
    dend_13 { pt3dadd( 113.796, 250.063, 2.31806, 0.83 ) }
    dend_13 { pt3dadd( 114.451, 251.961, 2.48324, 0.83 ) }
    dend_13 { pt3dadd( 115.254, 253.808, 2.62084, 0.83 ) }
    dend_13 { pt3dadd( 116.106, 255.673, 2.77532, 0.55 ) }
    dend_13 { pt3dadd( 116.858, 257.16, 2.89276, 0.83 ) }
    dend_13 { pt3dadd( 118.523, 260.383, 3.12084, 0.55 ) }
    dend_13 { pt3dadd( 120.008, 262.984, 3.34427, 0.83 ) }
    dend_13 { pt3dadd( 120.529, 263.836, 3.43102, 0.83 ) }
    dend_13 { pt3dadd( 121.727, 265.785, 3.6355, 0.55 ) }
    dend_13 { pt3dadd( 122.836, 267.525, 3.85066, 0.83 ) }
    dend_13 { pt3dadd( 124.571, 270.202, 4.1502, 0.83 ) }
    dend_13 { pt3dadd( 125.751, 271.88, 4.33262, 0.83 ) }
    dend_13 { pt3dadd( 126.574, 273.244, 4.41319, 0.83 ) }
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 34/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 16.7696, 45.7554, -35.742, 1.94 ) }
    dend_10 { pt3dadd( 16.4755, 48.68, -37.428, 1.94 ) }
    dend_10 { pt3dadd( 16.2301, 51.6403, -39.2828, 1.94 ) }
    dend_10 { pt3dadd( 16.0881, 54.5838, -41.1178, 1.38 ) }
    dend_10 { pt3dadd( 15.8888, 60.2735, -44.6026, 1.38 ) }
    dend_10 { pt3dadd( 15.8708, 63.7033, -46.9279, 1.38 ) }
    dend_10 { pt3dadd( 15.8197, 69.0773, -50.3904, 1.11 ) }
    dend_10 { pt3dadd( 15.8477, 70.9631, -51.8586, 1.11 ) }
    dend_10 { pt3dadd( 15.9051, 72.4621, -53.0938, 1.38 ) }
    dend_10 { pt3dadd( 15.9833, 74.6981, -54.95, 1.38 ) }
    dend_10 { pt3dadd( 16.0053, 79.9242, -59.3262, 1.38 ) }
    dend_10 { pt3dadd( 15.965, 83.7928, -62.8452, 1.38 ) }
    dend_10 { pt3dadd( 15.7643, 89.7391, -68.2601, 1.38 ) }
    dend_10 { pt3dadd( 15.7174, 91.8877, -70.3074, 1.38 ) }
    dend_10 { pt3dadd( 15.6612, 96.0214, -74.3764, 1.38 ) }
    dend_10 { pt3dadd( 15.5865, 103.435, -81.6213, 1.11 ) }
    dend_10 { pt3dadd( 15.4583, 109.728, -87.4803, 1.11 ) }
    dend_10 { pt3dadd( 15.4221, 112.893, -90.3633, 1.11 ) }
    dend_10 { pt3dadd( 15.3671, 117.855, -94.6209, 1.11 ) }
    dend_10 { pt3dadd( 15.391, 121.279, -97.5194, 1.11 ) }
    dend_10 { pt3dadd( 15.4948, 124.168, -99.8438, 1.11 ) }
    dend_10 { pt3dadd( 15.7685, 127.815, -102.576, 1.11 ) }
    dend_10 { pt3dadd( 15.9667, 129.736, -103.912, 1.11 ) }
    dend_10 { pt3dadd( 17.0533, 137.539, -109.406, 1.11 ) }
    dend_10 { pt3dadd( 17.4683, 140.171, -111.223, 1.11 ) }
    dend_10 { pt3dadd( 18.2616, 144.268, -114.126, 1.11 ) }
    dend_10 { pt3dadd( 18.9405, 146.856, -116.138, 1.11 ) }
    dend_10 { pt3dadd( 19.6077, 148.869, -117.859, 1.11 ) }
    dend_10 { pt3dadd( 20.653, 151.747, -120.385, 1.11 ) }
    // Section: dend_8, id: dend_8, parent: dend_3 (entry count 63/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 5.03242, 51.0682, -11.9153, 0.83 ) }
    dend_8 { pt3dadd( 6.42341, 52.976, -10.0411, 0.83 ) }
    dend_8 { pt3dadd( 8.93726, 56.4265, -7.04936, 0.83 ) }
    dend_8 { pt3dadd( 9.66037, 57.7618, -5.06799, 0.83 ) }
    dend_8 { pt3dadd( 10.7781, 60.2565, -1.16652, 0.83 ) }
    dend_8 { pt3dadd( 11.2666, 61.4824, 0.687361, 0.83 ) }
    dend_8 { pt3dadd( 12.4273, 64.5817, 5.12794, 0.83 ) }
    dend_8 { pt3dadd( 13.0631, 66.4404, 7.65224, 0.83 ) }
    dend_8 { pt3dadd( 16.1968, 76.6077, 20.269, 0.83 ) }
    dend_8 { pt3dadd( 16.7173, 78.56, 22.3262, 0.83 ) }
    dend_8 { pt3dadd( 17.1417, 80.4752, 24.0019, 0.83 ) }
    dend_8 { pt3dadd( 17.517, 82.356, 25.5999, 0.83 ) }
    dend_8 { pt3dadd( 18.2387, 86.455, 28.6683, 0.83 ) }
    dend_8 { pt3dadd( 18.593, 88.0275, 29.5129, 0.83 ) }
    dend_8 { pt3dadd( 20.4427, 93.6111, 30.0654, 0.83 ) }
    dend_8 { pt3dadd( 20.6757, 94.2785, 30.1365, 0.83 ) }
    dend_8 { pt3dadd( 24.7412, 102.491, 37.2037, 0.83 ) }
    dend_8 { pt3dadd( 27.7881, 110.397, 45.0851, 0.83 ) }
    dend_8 { pt3dadd( 31.3272, 118.509, 52.541, 0.83 ) }
    dend_8 { pt3dadd( 36.3973, 126.109, 59.6429, 0.83 ) }
    dend_8 { pt3dadd( 43.063, 133.048, 66.0723, 0.83 ) }
    dend_8 { pt3dadd( 49.1387, 141.695, 70.7872, 0.83 ) }
    dend_8 { pt3dadd( 54.1179, 151.967, 72.6868, 0.83 ) }
    dend_8 { pt3dadd( 57.8766, 162.522, 75.5776, 0.83 ) }
    dend_8 { pt3dadd( 61.1613, 173.181, 78.6611, 0.83 ) }
    dend_8 { pt3dadd( 63.1758, 184.14, 81.7859, 0.83 ) }
    dend_8 { pt3dadd( 63.5747, 195.375, 84.5275, 0.83 ) }
    dend_8 { pt3dadd( 64.984, 206.844, 85.1592, 0.83 ) }
    dend_8 { pt3dadd( 68.0553, 217.498, 88.4714, 0.83 ) }
    dend_8 { pt3dadd( 72.8052, 226.237, 94.386, 0.83 ) }
    dend_8 { pt3dadd( 75.1107, 236.31, 99.5947, 0.83 ) }
    dend_8 { pt3dadd( 75.3405, 245.983, 105.943, 0.83 ) }
    dend_8 { pt3dadd( 74.8206, 255.672, 112.247, 0.83 ) }
    dend_8 { pt3dadd( 75.217, 264.384, 119.854, 0.83 ) }
    dend_8 { pt3dadd( 74.5623, 273.903, 126.403, 0.83 ) }
    dend_8 { pt3dadd( 75.8434, 284.287, 131.346, 0.83 ) }
    dend_8 { pt3dadd( 77.212, 294.241, 137.086, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_8 { pt3dadd( 79.1849, 303.395, 143.886, 0.83 ) }
    dend_8 { pt3dadd( 82.5915, 312.817, 149.675, 0.83 ) }
    dend_8 { pt3dadd( 87.5524, 320.326, 156.95, 0.83 ) }
    dend_8 { pt3dadd( 92.2466, 328.92, 163.115, 0.83 ) }
    // Section: dend_7, id: dend_7, parent: dend_3 (entry count 4/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 5.03242, 51.0682, -11.9153, 0.83 ) }
    dend_7 { pt3dadd( 5.30251, 59.7224, -20.9161, 0.83 ) }
    dend_7 { pt3dadd( 5.33942, 62.0904, -22.6483, 0.83 ) }
    dend_7 { pt3dadd( 5.38247, 64.1069, -23.8653, 0.83 ) }
    dend_7 { pt3dadd( 5.36381, 66.8995, -25.3743, 0.83 ) }
    dend_7 { pt3dadd( 5.29442, 69.3998, -26.6856, 0.83 ) }
    dend_7 { pt3dadd( 5.22011, 72.1882, -28.0601, 0.83 ) }
    dend_7 { pt3dadd( 5.03755, 76.066, -29.324, 0.83 ) }
    dend_7 { pt3dadd( 4.90392, 79.5793, -30.4906, 0.83 ) }
    dend_7 { pt3dadd( 4.80371, 82.7588, -31.5169, 0.83 ) }
    dend_7 { pt3dadd( 4.79078, 87.2216, -32.9075, 0.83 ) }
    dend_7 { pt3dadd( 4.89369, 89.8708, -33.7028, 0.83 ) }
    dend_7 { pt3dadd( 5.00123, 92.1461, -34.3131, 0.83 ) }
    dend_7 { pt3dadd( 5.27026, 94.4097, -34.849, 0.83 ) }
    dend_7 { pt3dadd( 5.74757, 96.9222, -35.3599, 0.83 ) }
    dend_7 { pt3dadd( 6.84877, 101.111, -36.0954, 0.83 ) }
    dend_7 { pt3dadd( 7.46644, 103.37, -36.45, 0.83 ) }
    dend_7 { pt3dadd( 7.92623, 105.087, -36.8401, 0.83 ) }
    dend_7 { pt3dadd( 9.45241, 110.769, -38.3541, 0.83 ) }
    dend_7 { pt3dadd( 10.0958, 113.283, -39.0958, 0.83 ) }
    dend_7 { pt3dadd( 10.6577, 115.853, -39.914, 0.83 ) }
    dend_7 { pt3dadd( 11.1834, 119.443, -41.0786, 0.83 ) }
    dend_7 { pt3dadd( 11.802, 124.227, -42.6694, 0.83 ) }
    dend_7 { pt3dadd( 12.0833, 126.842, -43.5088, 0.83 ) }
    dend_7 { pt3dadd( 12.1163, 127.994, -43.8563, 0.83 ) }
    dend_7 { pt3dadd( 12.0876, 129.699, -44.3775, 0.83 ) }
    dend_7 { pt3dadd( 11.9055, 134.19, -45.632, 0.83 ) }
    dend_7 { pt3dadd( 11.9045, 136.201, -46.1546, 0.83 ) }
    dend_7 { pt3dadd( 11.9112, 139.126, -46.8405, 0.83 ) }
    dend_7 { pt3dadd( 11.9778, 142.194, -47.5822, 0.83 ) }
    dend_7 { pt3dadd( 12.0594, 144.471, -48.1209, 0.83 ) }
    dend_7 { pt3dadd( 12.3168, 149.806, -49.3547, 0.83 ) }
    dend_7 { pt3dadd( 12.7222, 155.797, -50.6131, 0.83 ) }
    dend_7 { pt3dadd( 12.9049, 158.376, -51.0982, 0.83 ) }
    dend_7 { pt3dadd( 13.1005, 160.848, -51.5208, 0.83 ) }
    dend_7 { pt3dadd( 13.4203, 164.616, -51.9958, 0.83 ) }
    dend_7 { pt3dadd( 13.7397, 169.114, -52.4632, 0.83 ) }
    dend_7 { pt3dadd( 13.8311, 173.406, -52.8096, 0.83 ) }
    dend_7 { pt3dadd( 13.753, 175.254, -52.9168, 0.83 ) }
    dend_7 { pt3dadd( 13.5036, 179.216, -53.1561, 0.83 ) }
    dend_7 { pt3dadd( 13.211, 182.489, -53.3768, 0.83 ) }
    dend_7 { pt3dadd( 12.9427, 184.621, -53.4983, 1.11 ) }
    dend_7 { pt3dadd( 12.3572, 188.484, -53.7379, 1.11 ) }
    dend_7 { pt3dadd( 11.6705, 192.209, -54.0526, 1.11 ) }
    dend_7 { pt3dadd( 10.8488, 196.088, -54.3688, 1.11 ) }
    dend_7 { pt3dadd( 10.2228, 198.987, -54.5879, 1.11 ) }
    dend_7 { pt3dadd( 9.50431, 202.66, -54.8322, 0.83 ) }
    dend_7 { pt3dadd( 8.87559, 205.968, -54.9251, 1.38 ) }
    dend_7 { pt3dadd( 8.46199, 208.424, -54.9294, 1.38 ) }
    dend_7 { pt3dadd( 7.81235, 212.366, -54.8773, 0.83 ) }
    dend_7 { pt3dadd( 7.49928, 214.018, -54.8592, 0.83 ) }
    dend_7 { pt3dadd( 7.04161, 216.606, -54.8512, 0.83 ) }
    dend_7 { pt3dadd( 6.43562, 220.151, -55.2861, 1.11 ) }
    dend_7 { pt3dadd( 5.97327, 222.782, -56.0037, 1.38 ) }
    dend_7 { pt3dadd( 5.60288, 225.515, -57.0331, 1.38 ) }
    dend_7 { pt3dadd( 5.42967, 227.229, -57.7554, 1.38 ) }
    dend_7 { pt3dadd( 5.22774, 230.119, -58.9779, 0.83 ) }
    dend_7 { pt3dadd( 5.03204, 234.617, -60.8267, 1.38 ) }
    dend_7 { pt3dadd( 4.84136, 237.966, -61.9516, 0.83 ) }
    dend_7 { pt3dadd( 4.63189, 241.442, -62.9071, 0.83 ) }
    dend_7 { pt3dadd( 4.42773, 244.391, -63.4718, 0.83 ) }
    dend_7 { pt3dadd( 4.2205, 247.71, -63.8188, 1.11 ) }
    dend_7 { pt3dadd( 4.00973, 249.456, -63.7183, 1.11 ) }
    dend_7 { pt3dadd( 3.12285, 254.335, -62.7895, 1.11 ) }
    dend_7 { pt3dadd( 2.37233, 257.474, -61.9602, 1.11 ) }
    dend_7 { pt3dadd( 1.53748, 260.388, -61.0737, 1.11 ) }
    dend_7 { pt3dadd( 0.886512, 262.459, -60.4232, 1.11 ) }
    dend_7 { pt3dadd( -1.1532, 268.905, -58.4936, 1.38 ) }
    dend_7 { pt3dadd( -2.19568, 272.267, -57.6322, 1.11 ) }
    dend_7 { pt3dadd( -2.98895, 275.094, -57.0945, 1.11 ) }
    dend_7 { pt3dadd( -4.03195, 279.024, -56.5374, 1.11 ) }
    dend_7 { pt3dadd( -4.96658, 282.608, -56.1644, 0.83 ) }
    dend_7 { pt3dadd( -5.95918, 286.619, -55.9044, 0.83 ) }
    dend_7 { pt3dadd( -6.43914, 288.918, -55.8858, 0.83 ) }
    dend_7 { pt3dadd( -7.32642, 293.377, -55.8693, 0.83 ) }
    dend_7 { pt3dadd( -8.21568, 298.008, -56.3123, 0.83 ) }
    dend_7 { pt3dadd( -8.49503, 300.303, -56.9003, 0.83 ) }
    dend_7 { pt3dadd( -8.69638, 302.502, -57.7081, 0.83 ) }
    dend_7 { pt3dadd( -8.71026, 305.32, -59.2934, 0.83 ) }
    dend_7 { pt3dadd( -8.57099, 307.493, -60.7531, 0.83 ) }
    dend_7 { pt3dadd( -8.02812, 313.386, -65.2882, 1.11 ) }
    dend_7 { pt3dadd( -7.36212, 318.76, -69.8495, 1.38 ) }
    dend_7 { pt3dadd( -6.79715, 322.439, -73.1772, 0.83 ) }
    dend_7 { pt3dadd( -5.69389, 328.964, -79.4711, 0.83 ) }
    dend_7 { pt3dadd( -5.24866, 331.149, -81.6934, 0.83 ) }
    dend_7 { pt3dadd( -4.89093, 332.692, -83.2583, 0.83 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 90/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 5.03242, 51.0682, -11.9153, 1.38 ) }
    dend_4 { pt3dadd( 4.2386, 55.1743, -10.3317, 1.38 ) }
    dend_4 { pt3dadd( 3.88156, 57.3759, -9.57251, 1.38 ) }
    dend_4 { pt3dadd( 3.68343, 58.9997, -9.0753, 1.38 ) }
    dend_4 { pt3dadd( 3.4995, 60.9834, -8.49068, 1.38 ) }
    dend_4 { pt3dadd( 3.29024, 63.2402, -7.82558, 1.38 ) }
    dend_4 { pt3dadd( 3.14689, 64.7861, -7.36998, 1.38 ) }
    dend_4 { pt3dadd( 3.06569, 66.7869, -6.93373, 1.38 ) }
    dend_4 { pt3dadd( 2.97149, 68.5915, -6.50851, 1.38 ) }
    dend_4 { pt3dadd( 2.95517, 69.9977, -6.174, 1.38 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    // Section: dend_29, id: dend_29, parent: dend_23 (entry count 0/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 2.04043, -45.3498, -17.9364, 0.28 ) }
    dend_29 { pt3dadd( 1.88273, -46.2042, -18.7857, 0.28 ) }
    dend_29 { pt3dadd( 1.57113, -47.8926, -20.4638, 0.83 ) }
    dend_29 { pt3dadd( 0.880326, -51.6354, -24.1842, 0.83 ) }
    dend_29 { pt3dadd( 0.0288095, -56.249, -28.77, 0.55 ) }
    dend_29 { pt3dadd( -0.296749, -58.0129, -30.5233, 0.55 ) }
    dend_29 { pt3dadd( -0.801526, -60.7478, -33.2418, 0.83 ) }
    // Section: dend_24, id: dend_24, parent: dend_23 (entry count 7/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 2.04043, -45.3498, -17.9364, 0.83 ) }
    dend_24 { pt3dadd( 2.42074, -47.732, -20.4337, 0.83 ) }
    dend_24 { pt3dadd( 2.92203, -49.8733, -22.7946, 0.83 ) }
    dend_24 { pt3dadd( 3.92237, -53.761, -27.0171, 0.83 ) }
    dend_24 { pt3dadd( 4.87265, -57.1194, -30.6542, 0.83 ) }
    dend_24 { pt3dadd( 5.15884, -58.0418, -31.7292, 0.83 ) }
    dend_24 { pt3dadd( 6.12094, -61.0506, -35.4208, 0.83 ) }
    dend_24 { pt3dadd( 7.17626, -64.3489, -39.5211, 1.11 ) }
    dend_24 { pt3dadd( 7.87287, -66.552, -42.252, 0.83 ) }
    dend_24 { pt3dadd( 9.10937, -69.9062, -46.7215, 0.83 ) }
    dend_24 { pt3dadd( 10.7596, -73.7049, -52.0724, 0.83 ) }
    dend_24 { pt3dadd( 11.9061, -76.2606, -55.7939, 1.38 ) }
    // Section: dend_12, id: dend_12, parent: dend_10 (entry count 19/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 20.653, 151.747, -120.385, 0.83 ) }
    dend_12 { pt3dadd( 22.4046, 155.517, -124.301, 0.83 ) }
    dend_12 { pt3dadd( 23.6297, 158.254, -127.088, 0.83 ) }
    dend_12 { pt3dadd( 24.9477, 161.268, -130.448, 0.83 ) }
    dend_12 { pt3dadd( 27.4177, 167.3, -137.329, 0.83 ) }
    dend_12 { pt3dadd( 29.1701, 171.824, -142.583, 0.83 ) }
    dend_12 { pt3dadd( 30.3003, 174.983, -146.289, 1.11 ) }
    dend_12 { pt3dadd( 30.9536, 176.773, -148.57, 1.11 ) }
    dend_12 { pt3dadd( 32.5312, 181.57, -155.041, 1.11 ) }
    dend_12 { pt3dadd( 32.7781, 182.518, -156.301, 1.11 ) }
    dend_12 { pt3dadd( 33.015, 184.709, -158.879, 1.11 ) }
    dend_12 { pt3dadd( 33.0712, 186.172, -160.563, 1.11 ) }
    dend_12 { pt3dadd( 33.0213, 189.919, -164.915, 1.11 ) }
    dend_12 { pt3dadd( 32.9347, 191.82, -167.421, 1.11 ) }
    dend_12 { pt3dadd( 32.8533, 193.132, -169.09, 1.11 ) }
    dend_12 { pt3dadd( 32.5883, 197.839, -175.313, 1.11 ) }
    dend_12 { pt3dadd( 32.4434, 199.836, -178.042, 1.11 ) }
    dend_12 { pt3dadd( 32.3084, 201.557, -180.535, 1.11 ) }
    dend_12 { pt3dadd( 31.6339, 206.035, -187.851, 1.11 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 38/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 20.653, 151.747, -120.385, 1.11 ) }
    dend_11 { pt3dadd( 20.851, 155.978, -120.464, 1.11 ) }
    dend_11 { pt3dadd( 21.0588, 159.263, -120.509, 1.11 ) }
    dend_11 { pt3dadd( 21.3216, 163.464, -120.572, 1.11 ) }
    dend_11 { pt3dadd( 21.5237, 166.521, -120.615, 1.11 ) }
    dend_11 { pt3dadd( 21.9577, 170.682, -120.872, 0.83 ) }
    dend_11 { pt3dadd( 22.4445, 174.255, -121.184, 0.83 ) }
    dend_11 { pt3dadd( 22.9561, 177.57, -121.604, 0.83 ) }
    dend_11 { pt3dadd( 23.2472, 179.059, -121.826, 0.83 ) }
    dend_11 { pt3dadd( 23.537, 180.483, -122.079, 0.83 ) }
    dend_11 { pt3dadd( 24.4941, 185.887, -122.601, 1.11 ) }
    dend_11 { pt3dadd( 25.0152, 189.169, -122.562, 1.11 ) }
    dend_11 { pt3dadd( 25.161, 193.638, -121.599, 0.55 ) }
    dend_11 { pt3dadd( 25.0558, 194.81, -121.094, 0.83 ) }
    dend_11 { pt3dadd( 24.2817, 197.342, -119.121, 0.83 ) }
    dend_11 { pt3dadd( 21.9139, 202.831, -113.757, 0.83 ) }
    dend_11 { pt3dadd( 20.8687, 204.946, -111.431, 0.83 ) }
    dend_11 { pt3dadd( 18.8328, 208.989, -106.679, 1.11 ) }
    dend_11 { pt3dadd( 18.2344, 210.165, -105.109, 1.11 ) }
    dend_11 { pt3dadd( 15.3285, 215.735, -97.6477, 1.11 ) }
    dend_11 { pt3dadd( 14.7918, 216.763, -96.231, 1.11 ) }
    dend_11 { pt3dadd( 13.9516, 218.48, -94.0529, 1.11 ) }
    dend_11 { pt3dadd( 12.9707, 220.435, -91.5105, 1.11 ) }
    dend_11 { pt3dadd( 10.8082, 226.935, -83.2323, 1.11 ) }
    // Section: dend_6, id: dend_6, parent: dend_4 (entry count 62/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 2.95517, 69.9977, -6.174, 0.83 ) }
    dend_6 { pt3dadd( 2.34013, 75.7788, -7.91554, 0.83 ) }
    dend_6 { pt3dadd( 1.65856, 79.4703, -8.93564, 0.83 ) }
    dend_6 { pt3dadd( 1.18453, 81.069, -9.39347, 0.55 ) }
    dend_6 { pt3dadd( 0.447486, 83.0137, -9.78074, 1.38 ) }
    dend_6 { pt3dadd( -1.45363, 87.7082, -10.7196, 1.38 ) }
    dend_6 { pt3dadd( -2.47213, 90.2488, -11.1728, 1.11 ) }
    dend_6 { pt3dadd( -3.58331, 92.609, -11.2938, 1.66 ) }
    dend_6 { pt3dadd( -5.26664, 95.8421, -11.3625, 0.55 ) }
    dend_6 { pt3dadd( -7.27402, 100.221, -11.8838, 1.38 ) }
    dend_6 { pt3dadd( -9.13512, 104.973, -12.7976, 0.83 ) }
    dend_6 { pt3dadd( -10.1798, 107.91, -13.4351, 1.38 ) }
    dend_6 { pt3dadd( -11.8688, 113.119, -14.6173, 1.11 ) }
    dend_6 { pt3dadd( -12.6286, 115.386, -15.2005, 1.66 ) }
    dend_6 { pt3dadd( -15.9603, 125.406, -18.0482, 0.83 ) }
    dend_6 { pt3dadd( -17.7409, 130.2, -19.4583, 1.38 ) }
    dend_6 { pt3dadd( -19.4479, 134.277, -20.5744, 1.11 ) }
    dend_6 { pt3dadd( -21.065, 137.799, -21.3762, 1.38 ) }
    dend_6 { pt3dadd( -22.2875, 140.237, -21.7539, 0.55 ) }
    dend_6 { pt3dadd( -23.7045, 142.787, -21.8057, 0.83 ) }
    dend_6 { pt3dadd( -25.9389, 146.394, -21.3475, 1.11 ) }
    dend_6 { pt3dadd( -27.7914, 149.434, -20.9648, 1.38 ) }
    dend_6 { pt3dadd( -30.684, 154.481, -20.4014, 1.11 ) }
    dend_6 { pt3dadd( -32.2347, 157.484, -19.9859, 0.83 ) }
    dend_6 { pt3dadd( -32.7608, 158.637, -19.8226, 0.83 ) }
    dend_6 { pt3dadd( -33.7807, 160.994, -19.5324, 0.83 ) }
    dend_6 { pt3dadd( -34.9954, 163.743, -18.9963, 0.83 ) }
    dend_6 { pt3dadd( -35.7492, 165.486, -18.4842, 0.83 ) }
    dend_6 { pt3dadd( -37.3165, 169.239, -16.9706, 0.83 ) }
    dend_6 { pt3dadd( -38.1947, 171.435, -15.8973, 0.83 ) }
    dend_6 { pt3dadd( -38.5597, 172.378, -15.3245, 0.83 ) }
    dend_6 { pt3dadd( -41.0724, 179.132, -10.6568, 0.83 ) }
    dend_6 { pt3dadd( -41.8673, 181.481, -9.0058, 0.83 ) }
    dend_6 { pt3dadd( -43.3839, 185.914, -5.71218, 0.83 ) }
    dend_6 { pt3dadd( -44.1309, 188.13, -3.99044, 0.83 ) }
    dend_6 { pt3dadd( -45.4626, 192.451, -0.520413, 0.83 ) }
    dend_6 { pt3dadd( -45.8016, 193.769, 0.483339, 0.83 ) }
    dend_6 { pt3dadd( -46.2655, 196.756, 2.21231, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_6 { pt3dadd( -48.7269, 208.07, 3.32199, 0.83 ) }
    dend_6 { pt3dadd( -51.1771, 219.305, 5.0787, 0.83 ) }
    dend_6 { pt3dadd( -53.9562, 230.188, 8.10058, 0.83 ) }
    dend_6 { pt3dadd( -55.4658, 241.626, 9.57864, 0.83 ) }
    dend_6 { pt3dadd( -58.6979, 252.771, 8.7701, 0.83 ) }
    dend_6 { pt3dadd( -62.7116, 263.273, 5.78768, 0.83 ) }
    dend_6 { pt3dadd( -64.8557, 274.47, 3.47926, 0.83 ) }
    dend_6 { pt3dadd( -66.8589, 285.809, 1.83055, 0.83 ) }
    dend_6 { pt3dadd( -68.3136, 297.097, -0.573376, 0.83 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 9/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 2.95517, 69.9977, -6.174, 0.83 ) }
    dend_5 { pt3dadd( 4.52089, 73.8332, -6.79195, 0.83 ) }
    dend_5 { pt3dadd( 6.39965, 78.9788, -7.33037, 0.83 ) }
    dend_5 { pt3dadd( 6.96111, 80.6192, -7.43192, 0.83 ) }
    dend_5 { pt3dadd( 7.74204, 82.9366, -7.49873, 0.83 ) }
    dend_5 { pt3dadd( 8.61591, 85.5721, -7.50722, 0.83 ) }
    dend_5 { pt3dadd( 9.76244, 89.107, -7.45996, 0.83 ) }
    dend_5 { pt3dadd( 10.3883, 91.1981, -7.27937, 0.83 ) }
    dend_5 { pt3dadd( 11.1399, 93.7648, -6.82489, 0.83 ) }
    dend_5 { pt3dadd( 11.8187, 95.9378, -6.40035, 0.83 ) }
    dend_5 { pt3dadd( 12.4809, 97.7444, -6.00012, 0.83 ) }
    dend_5 { pt3dadd( 12.787, 98.5287, -5.8062, 0.83 ) }
    dend_5 { pt3dadd( 13.8238, 101.14, -5.08068, 0.83 ) }
    dend_5 { pt3dadd( 15.6255, 105.581, -3.66129, 0.83 ) }
    dend_5 { pt3dadd( 16.2218, 107.19, -3.10921, 1.11 ) }
    dend_5 { pt3dadd( 17.4453, 110.683, -1.87656, 1.11 ) }
    dend_5 { pt3dadd( 18.715, 114.448, -0.553038, 1.11 ) }
    dend_5 { pt3dadd( 19.4243, 116.612, 0.190625, 1.11 ) }
    dend_5 { pt3dadd( 19.8581, 118.025, 0.656502, 1.11 ) }
    dend_5 { pt3dadd( 20.917, 121.544, 1.75805, 0.83 ) }
    dend_5 { pt3dadd( 21.7057, 124.212, 2.5658, 0.83 ) }
    dend_5 { pt3dadd( 22.3448, 126.384, 3.14752, 0.83 ) }
    dend_5 { pt3dadd( 23.0672, 128.518, 3.61766, 0.83 ) }
    dend_5 { pt3dadd( 23.6472, 129.968, 3.88527, 0.83 ) }
    dend_5 { pt3dadd( 24.1198, 131.056, 4.07386, 0.83 ) }
    dend_5 { pt3dadd( 24.647, 132.138, 4.25294, 0.83 ) }
    dend_5 { pt3dadd( 25.4423, 133.765, 4.52407, 0.83 ) }
    dend_5 { pt3dadd( 26.295, 135.452, 4.8182, 0.83 ) }
    dend_5 { pt3dadd( 27.2369, 137.306, 5.21501, 0.83 ) }
    dend_5 { pt3dadd( 28.0906, 139.028, 5.61492, 0.83 ) }
    dend_5 { pt3dadd( 28.738, 140.377, 5.93653, 0.83 ) }
    dend_5 { pt3dadd( 29.3055, 141.578, 6.22599, 0.83 ) }
    dend_5 { pt3dadd( 29.9014, 142.757, 6.52134, 0.83 ) }
    dend_5 { pt3dadd( 32.0228, 147.018, 7.55015, 0.55 ) }
    dend_5 { pt3dadd( 32.8203, 148.612, 7.92447, 0.55 ) }
    dend_5 { pt3dadd( 34.0118, 150.952, 8.47062, 0.55 ) }
    dend_5 { pt3dadd( 35.2409, 153.493, 9.10933, 1.11 ) }
    dend_5 { pt3dadd( 36.7215, 156.717, 9.9531, 0.55 ) }
    dend_5 { pt3dadd( 37.4257, 158.429, 10.4384, 0.55 ) }
    dend_5 { pt3dadd( 38.1768, 160.549, 11.0693, 0.55 ) }
    dend_5 { pt3dadd( 38.4686, 161.463, 11.3623, 0.55 ) }
    dend_5 { pt3dadd( 39.3761, 164.418, 12.2915, 0.55 ) }
    dend_5 { pt3dadd( 39.6188, 165.318, 12.5885, 0.55 ) }
    dend_5 { pt3dadd( 40.7782, 170.41, 14.3095, 0.55 ) }
    dend_5 { pt3dadd( 41.5977, 173.947, 15.5265, 0.83 ) }
    dend_5 { pt3dadd( 41.8439, 175.006, 15.8825, 0.83 ) }
    dend_5 { pt3dadd( 43.1075, 180.212, 17.5429, 1.11 ) }
    dend_5 { pt3dadd( 44.1582, 184.276, 18.7407, 1.11 ) }
    dend_5 { pt3dadd( 45.0848, 187.788, 19.758, 0.55 ) }
    dend_5 { pt3dadd( 45.5408, 189.485, 20.2175, 0.55 ) }
    dend_5 { pt3dadd( 46.0304, 191.29, 20.6846, 0.55 ) }
    dend_5 { pt3dadd( 46.5597, 193.351, 21.1652, 0.83 ) }
    dend_5 { pt3dadd( 46.983, 195.09, 21.5007, 0.83 ) }
    dend_5 { pt3dadd( 47.0549, 195.348, 21.5301, 0.28 ) }
    dend_5 { pt3dadd( 47.8682, 198.262, 21.7541, 0.28 ) }
    dend_5 { pt3dadd( 48.2094, 199.754, 21.8369, 0.83 ) }
    dend_5 { pt3dadd( 48.5533, 201.696, 21.9704, 0.83 ) }
    dend_5 { pt3dadd( 48.7632, 203.033, 22.09, 0.83 ) }
    dend_5 { pt3dadd( 48.9558, 204.125, 22.1236, 0.83 ) }
    dend_5 { pt3dadd( 49.2695, 205.832, 22.1019, 0.83 ) }
    dend_5 { pt3dadd( 49.6504, 207.434, 22.0646, 0.83 ) }
    dend_5 { pt3dadd( 50.2809, 209.718, 22.0079, 0.83 ) }
    dend_5 { pt3dadd( 51.3598, 213.247, 21.9244, 0.55 ) }
    dend_5 { pt3dadd( 52.5547, 216.919, 21.8427, 0.55 ) }
    dend_5 { pt3dadd( 53.5029, 219.675, 21.7945, 1.38 ) }
    dend_5 { pt3dadd( 54.7413, 223.12, 21.7511, 0.55 ) }
    dend_5 { pt3dadd( 55.6555, 225.51, 21.7435, 0.55 ) }
    dend_5 { pt3dadd( 56.1909, 226.875, 21.7502, 0.55 ) }
    dend_5 { pt3dadd( 56.6407, 228.137, 21.8005, 0.83 ) }
    dend_5 { pt3dadd( 57.2562, 230.239, 21.9798, 0.83 ) }
    dend_5 { pt3dadd( 57.7241, 232.129, 22.1008, 0.83 ) }
    dend_5 { pt3dadd( 57.9766, 233.467, 22.1524, 0.83 ) }
    dend_5 { pt3dadd( 58.4617, 235.747, 22.2636, 0.83 ) }
    dend_5 { pt3dadd( 58.8371, 237.328, 22.3573, 0.83 ) }
    dend_5 { pt3dadd( 59.3452, 239.158, 22.4968, 0.83 ) }
    dend_5 { pt3dadd( 59.9443, 241.01, 22.674, 0.83 ) }
    dend_5 { pt3dadd( 60.5259, 242.626, 22.8534, 0.83 ) }
    dend_5 { pt3dadd( 61.8262, 246.242, 23.2546, 0.83 ) }
    dend_5 { pt3dadd( 63.1854, 249.744, 23.6855, 0.83 ) }
    dend_5 { pt3dadd( 63.8223, 251.225, 23.894, 0.83 ) }
    dend_5 { pt3dadd( 64.5469, 252.779, 24.1366, 0.83 ) }
    dend_5 { pt3dadd( 65.217, 254.2, 24.3616, 0.83 ) }
    dend_5 { pt3dadd( 66.2487, 256.453, 24.7053, 0.83 ) }
    dend_5 { pt3dadd( 70.0144, 264.991, 27.6945, 0.83 ) }
    // Section: dend_31, id: dend_31, parent: dend_29 (entry count 93/100)
    dend_31 { pt3dclear() }
    dend_31 { pt3dadd( -0.801526, -60.7478, -33.2418, 0.55 ) }
    dend_31 { pt3dadd( -0.779314, -61.0478, -34.7916, 0.55 ) }
    dend_31 { pt3dadd( -0.774086, -61.2773, -35.8253, 0.55 ) }
    dend_31 { pt3dadd( -0.693746, -62.0238, -39.2187, 0.83 ) }
    dend_31 { pt3dadd( -0.690152, -62.3823, -40.8927, 0.28 ) }
    dend_31 { pt3dadd( -0.703898, -62.6418, -42.082, 0.55 ) }
    dend_31 { pt3dadd( -0.691778, -63.8474, -46.8839, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_9()
}

proc basic_shape_9() {
    dend_31 { pt3dadd( -0.684411, -64.1256, -47.9305, 0.83 ) }
    dend_31 { pt3dadd( -0.676259, -65.3467, -52.1026, 0.55 ) }
    dend_31 { pt3dadd( -0.697571, -65.6866, -53.1066, 0.55 ) }
    dend_31 { pt3dadd( -0.727141, -66.2752, -54.847, 0.55 ) }
    dend_31 { pt3dadd( -0.714003, -67.4408, -58.4736, 0.55 ) }
    dend_31 { pt3dadd( -0.689263, -67.9937, -60.3267, 0.55 ) }
    dend_31 { pt3dadd( -0.577596, -68.4189, -61.931, 0.55 ) }
    dend_31 { pt3dadd( -0.45311, -68.7855, -63.3923, 0.28 ) }
    dend_31 { pt3dadd( 0.0494661, -69.7941, -67.7289, 0.83 ) }
    dend_31 { pt3dadd( 0.711899, -70.8691, -72.8728, 0.55 ) }
    dend_31 { pt3dadd( 1.26172, -71.6097, -76.8063, 0.55 ) }
    dend_31 { pt3dadd( 1.85311, -72.2936, -80.5357, 0.28 ) }
    dend_31 { pt3dadd( 2.03961, -72.5003, -81.7439, 0.55 ) }
    dend_31 { pt3dadd( 2.61233, -73.1444, -85.5329, 0.28 ) }
    dend_31 { pt3dadd( 2.74862, -73.3239, -86.4878, 0.55 ) }
    dend_31 { pt3dadd( 2.90566, -73.6379, -87.9656, 0.28 ) }
    dend_31 { pt3dadd( 2.96035, -73.8627, -88.7571, 0.55 ) }
    dend_31 { pt3dadd( 3.0421, -74.5912, -90.7047, 0.28 ) }
    dend_31 { pt3dadd( 3.08328, -74.8667, -91.3165, 0.55 ) }
    dend_31 { pt3dadd( 3.20084, -75.5597, -92.5015, 0.28 ) }
    dend_31 { pt3dadd( 3.31026, -75.9101, -93.0116, 0.55 ) }
    dend_31 { pt3dadd( 3.82001, -77.1407, -94.5038, 0.28 ) }
    dend_31 { pt3dadd( 4.19346, -77.9087, -95.3527, 0.55 ) }
    dend_31 { pt3dadd( 4.52186, -78.5357, -96.0109, 0.28 ) }
    dend_31 { pt3dadd( 5.13813, -79.7124, -97.2286, 0.55 ) }
    dend_31 { pt3dadd( 5.66561, -80.7593, -98.3936, 0.28 ) }
    dend_31 { pt3dadd( 6.01705, -81.5015, -99.2933, 0.55 ) }
    dend_31 { pt3dadd( 6.38925, -82.5383, -100.658, 0.28 ) }
    dend_31 { pt3dadd( 6.56334, -83.1782, -101.614, 0.55 ) }
    dend_31 { pt3dadd( 6.69623, -83.9056, -102.731, 0.28 ) }
    dend_31 { pt3dadd( 6.80882, -85.1489, -104.694, 0.55 ) }
    dend_31 { pt3dadd( 6.8428, -86.7169, -107.192, 0.28 ) }
    dend_31 { pt3dadd( 6.82787, -87.6877, -108.82, 0.55 ) }
    dend_31 { pt3dadd( 6.76221, -89.2783, -111.405, 0.28 ) }
    dend_31 { pt3dadd( 6.75538, -89.7233, -112.159, 0.55 ) }
    dend_31 { pt3dadd( 6.74217, -90.4776, -113.483, 0.28 ) }
    dend_31 { pt3dadd( 6.75991, -91.2645, -114.859, 0.55 ) }
    dend_31 { pt3dadd( 6.80195, -92.6709, -117.375, 0.83 ) }
    dend_31 { pt3dadd( 6.84797, -93.1693, -118.332, 0.83 ) }
    dend_31 { pt3dadd( 6.97726, -95.0393, -121.975, 0.28 ) }
    dend_31 { pt3dadd( 7.00706, -95.3011, -122.54, 0.55 ) }
    dend_31 { pt3dadd( 7.08722, -96.1217, -124.356, 0.28 ) }
    dend_31 { pt3dadd( 7.18716, -96.6721, -125.628, 0.55 ) }
    dend_31 { pt3dadd( 7.39006, -97.6806, -127.889, 0.28 ) }
    dend_31 { pt3dadd( 7.5535, -98.3767, -129.449, 0.83 ) }
    dend_31 { pt3dadd( 7.91508, -100.206, -133.106, 0.28 ) }
    dend_31 { pt3dadd( 8.03009, -100.783, -134.161, 0.83 ) }
    dend_31 { pt3dadd( 8.35427, -102.785, -137.397, 0.28 ) }
    dend_31 { pt3dadd( 8.4185, -103.169, -137.909, 0.55 ) }
    dend_31 { pt3dadd( 8.47733, -103.518, -138.289, 0.28 ) }
    dend_31 { pt3dadd( 8.69296, -104.688, -139.338, 0.28 ) }
    dend_31 { pt3dadd( 8.66192, -105.523, -139.499, 0.55 ) }
    dend_31 { pt3dadd( 8.35032, -106.975, -139.205, 0.28 ) }
    dend_31 { pt3dadd( 7.69111, -108.526, -138.405, 0.55 ) }
    // Section: dend_30, id: dend_30, parent: dend_29 (entry count 54/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( -0.801526, -60.7478, -33.2418, 0.55 ) }
    dend_30 { pt3dadd( -0.895244, -63.8872, -33.1301, 0.55 ) }
    dend_30 { pt3dadd( -0.859705, -66.0536, -33.0041, 0.55 ) }
    dend_30 { pt3dadd( -0.845798, -66.3577, -32.9821, 0.28 ) }
    dend_30 { pt3dadd( -0.660341, -69.1369, -32.7508, 0.55 ) }
    dend_30 { pt3dadd( -0.517206, -72.2691, -32.4947, 0.55 ) }
    dend_30 { pt3dadd( -0.471788, -73.2418, -32.4228, 0.28 ) }
    dend_30 { pt3dadd( -0.399058, -74.9653, -32.2984, 0.55 ) }
    dend_30 { pt3dadd( -0.427847, -76.2378, -32.2675, 0.28 ) }
    dend_30 { pt3dadd( -0.477961, -77.5092, -32.2928, 0.55 ) }
    dend_30 { pt3dadd( -0.564491, -79.0969, -32.3972, 0.28 ) }
    dend_30 { pt3dadd( -0.852851, -82.6101, -32.7895, 0.55 ) }
    dend_30 { pt3dadd( -0.994475, -83.8643, -32.9645, 0.28 ) }
    dend_30 { pt3dadd( -1.21864, -85.5185, -33.2207, 0.55 ) }
    dend_30 { pt3dadd( -1.44882, -87.0109, -33.4513, 0.28 ) }
    dend_30 { pt3dadd( -1.49468, -87.4414, -33.5343, 0.55 ) }
    dend_30 { pt3dadd( -1.67765, -89.9205, -34.0484, 0.28 ) }
    dend_30 { pt3dadd( -1.78927, -91.7442, -34.4683, 0.55 ) }
    dend_30 { pt3dadd( -1.8588, -93.5419, -34.8837, 0.55 ) }
    dend_30 { pt3dadd( -2.0159, -96.7714, -35.621, 0.55 ) }
    dend_30 { pt3dadd( -2.30651, -100.048, -36.4204, 0.55 ) }
    dend_30 { pt3dadd( -2.50825, -102.194, -37.0364, 0.55 ) }
    dend_30 { pt3dadd( -2.63024, -103.891, -37.6085, 0.28 ) }
    dend_30 { pt3dadd( -2.65335, -104.524, -37.8848, 0.55 ) }
    dend_30 { pt3dadd( -2.6583, -105.561, -38.3933, 0.28 ) }
    dend_30 { pt3dadd( -2.59149, -106.926, -39.0934, 0.55 ) }
    dend_30 { pt3dadd( -2.48325, -109.008, -40.1618, 0.28 ) }
    dend_30 { pt3dadd( -2.14487, -113.044, -42.3324, 0.55 ) }
    dend_30 { pt3dadd( -1.75263, -117.062, -44.4625, 0.28 ) }
    dend_30 { pt3dadd( -1.64722, -117.863, -44.8984, 0.55 ) }
    dend_30 { pt3dadd( -1.39863, -119.574, -45.8393, 0.28 ) }
    dend_30 { pt3dadd( -1.28972, -120.343, -46.223, 0.55 ) }
    dend_30 { pt3dadd( -1.23794, -121.143, -46.5502, 0.28 ) }
    dend_30 { pt3dadd( -1.19006, -122.602, -47.044, 0.55 ) }
    dend_30 { pt3dadd( -1.28146, -124.846, -47.6143, 0.28 ) }
    dend_30 { pt3dadd( -1.42757, -126.34, -48.0063, 0.55 ) }
    dend_30 { pt3dadd( -1.80408, -128.439, -48.5745, 0.28 ) }
    dend_30 { pt3dadd( -2.33282, -130.821, -49.3499, 0.28 ) }
    dend_30 { pt3dadd( -3.01667, -133.357, -50.3107, 0.55 ) }
    dend_30 { pt3dadd( -3.9226, -136.155, -51.5235, 0.55 ) }
    dend_30 { pt3dadd( -4.69154, -138.284, -52.5811, 0.28 ) }
    dend_30 { pt3dadd( -5.41233, -140.445, -53.8571, 0.55 ) }
    dend_30 { pt3dadd( -6.16853, -142.755, -55.3583, 0.55 ) }
    dend_30 { pt3dadd( -6.6536, -144.331, -56.4296, 0.28 ) }
    dend_30 { pt3dadd( -7.20232, -146.388, -57.7898, 0.28 ) }
    dend_30 { pt3dadd( -7.93749, -149.801, -59.8253, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_10()
}

proc basic_shape_10() {
    dend_30 { pt3dadd( -8.66181, -153.991, -61.9483, 0.28 ) }
    dend_30 { pt3dadd( -9.00478, -156.403, -62.9498, 0.83 ) }
    dend_30 { pt3dadd( -9.16866, -157.706, -63.3779, 0.55 ) }
    dend_30 { pt3dadd( -9.64337, -161.433, -64.3913, 0.28 ) }
    dend_30 { pt3dadd( -10.1564, -165.089, -65.0433, 0.55 ) }
    dend_30 { pt3dadd( -10.5808, -167.835, -65.1697, 0.28 ) }
    dend_30 { pt3dadd( -10.9054, -169.671, -65.0511, 0.55 ) }
    dend_30 { pt3dadd( -11.2369, -171.355, -64.8208, 0.28 ) }
    dend_30 { pt3dadd( -11.6375, -173.048, -64.4944, 0.55 ) }
    dend_30 { pt3dadd( -12.3707, -175.648, -63.9077, 0.28 ) }
    dend_30 { pt3dadd( -13.0239, -178.072, -63.633, 0.28 ) }
    dend_30 { pt3dadd( -13.2582, -178.971, -63.5932, 0.55 ) }
    dend_30 { pt3dadd( -13.8852, -181.505, -63.6608, 0.28 ) }
    dend_30 { pt3dadd( -14.2052, -182.856, -63.8185, 0.55 ) }
    dend_30 { pt3dadd( -14.783, -185.938, -64.5615, 0.28 ) }
    dend_30 { pt3dadd( -15.4447, -189.956, -66.1793, 0.55 ) }
    dend_30 { pt3dadd( -15.6498, -191.212, -66.8189, 0.28 ) }
    dend_30 { pt3dadd( -15.7855, -192.61, -67.6894, 0.55 ) }
    dend_30 { pt3dadd( -15.833, -194.453, -68.9618, 0.28 ) }
    dend_30 { pt3dadd( -15.7709, -196.778, -70.6321, 0.55 ) }
    dend_30 { pt3dadd( -15.6817, -198.882, -72.1467, 0.28 ) }
    dend_30 { pt3dadd( -15.6569, -200.033, -72.8895, 0.55 ) }
    dend_30 { pt3dadd( -15.5929, -203.194, -74.7459, 0.28 ) }
    dend_30 { pt3dadd( -15.459, -205.592, -76.1159, 0.83 ) }
    dend_30 { pt3dadd( -15.3655, -207.272, -76.9963, 0.28 ) }
    dend_30 { pt3dadd( -15.3775, -208.826, -77.8179, 0.55 ) }
    dend_30 { pt3dadd( -15.4683, -209.98, -78.4423, 0.28 ) }
    dend_30 { pt3dadd( -15.6609, -211.788, -79.4455, 0.55 ) }
    dend_30 { pt3dadd( -16.4423, -216.148, -81.9301, 0.28 ) }
    dend_30 { pt3dadd( -16.6255, -217.044, -82.5567, 0.55 ) }
    dend_30 { pt3dadd( -17.2973, -220.075, -84.9929, 0.28 ) }
    dend_30 { pt3dadd( -17.5373, -221.256, -86.1191, 0.55 ) }
    // Section: dend_28, id: dend_28, parent: dend_24 (entry count 32/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 11.9061, -76.2606, -55.7939, 0.55 ) }
    dend_28 { pt3dadd( 12.4553, -79.4076, -59.0259, 0.55 ) }
    dend_28 { pt3dadd( 12.564, -80.2016, -59.7537, 0.83 ) }
    dend_28 { pt3dadd( 12.6588, -82.4739, -61.7715, 0.28 ) }
    dend_28 { pt3dadd( 12.6658, -83.8673, -63.0805, 0.55 ) }
    dend_28 { pt3dadd( 12.6616, -85.5016, -64.6769, 0.28 ) }
    dend_28 { pt3dadd( 12.5458, -86.823, -66.0034, 0.55 ) }
    dend_28 { pt3dadd( 12.389, -87.9685, -67.1453, 0.28 ) }
    dend_28 { pt3dadd( 12.0269, -89.8805, -69.0546, 0.55 ) }
    dend_28 { pt3dadd( 11.6007, -91.6263, -70.8065, 0.28 ) }
    dend_28 { pt3dadd( 11.3027, -92.9188, -72.3437, 0.55 ) }
    dend_28 { pt3dadd( 10.6375, -95.4079, -75.6914, 0.55 ) }
    dend_28 { pt3dadd( 10.2994, -96.8214, -77.8632, 0.55 ) }
    dend_28 { pt3dadd( 10.1128, -97.7833, -79.4536, 0.28 ) }
    dend_28 { pt3dadd( 9.91688, -99.5928, -82.7401, 0.55 ) }
    dend_28 { pt3dadd( 9.78127, -102.359, -88.0364, 0.83 ) }
    dend_28 { pt3dadd( 9.79519, -103.462, -90.3922, 0.55 ) }
    dend_28 { pt3dadd( 10.0281, -105.021, -93.9797, 0.28 ) }
    dend_28 { pt3dadd( 10.1115, -105.431, -94.9287, 0.83 ) }
    dend_28 { pt3dadd( 10.645, -107.337, -99.1634, 0.28 ) }
    dend_28 { pt3dadd( 10.8077, -107.864, -100.19, 0.55 ) }
    dend_28 { pt3dadd( 11.3288, -109.618, -102.938, 0.28 ) }
    dend_28 { pt3dadd( 11.7029, -110.855, -104.6, 0.55 ) }
    dend_28 { pt3dadd( 12.0434, -112.358, -106.275, 0.28 ) }
    dend_28 { pt3dadd( 12.2972, -113.628, -107.368, 0.55 ) }
    dend_28 { pt3dadd( 12.5767, -115.468, -108.351, 0.28 ) }
    dend_28 { pt3dadd( 12.7447, -116.641, -108.708, 0.55 ) }
    dend_28 { pt3dadd( 12.9466, -117.812, -108.779, 0.28 ) }
    dend_28 { pt3dadd( 13.1458, -119.11, -108.686, 0.55 ) }
    dend_28 { pt3dadd( 13.6634, -121.622, -108.218, 0.28 ) }
    dend_28 { pt3dadd( 13.8424, -122.383, -108.119, 0.55 ) }
    dend_28 { pt3dadd( 14.3893, -124.714, -107.938, 0.28 ) }
    dend_28 { pt3dadd( 14.6195, -125.814, -108.115, 0.55 ) }
    dend_28 { pt3dadd( 14.8464, -127.125, -108.624, 0.28 ) }
    dend_28 { pt3dadd( 14.9496, -128.068, -109.229, 0.55 ) }
    dend_28 { pt3dadd( 15.1781, -130.954, -111.304, 0.28 ) }
    dend_28 { pt3dadd( 15.2632, -131.812, -111.986, 0.83 ) }
    dend_28 { pt3dadd( 15.4993, -134.496, -114.271, 0.28 ) }
    dend_28 { pt3dadd( 15.5655, -135.399, -115.037, 0.55 ) }
    dend_28 { pt3dadd( 15.6684, -137.176, -116.541, 0.28 ) }
    dend_28 { pt3dadd( 15.7752, -139.969, -118.726, 0.55 ) }
    dend_28 { pt3dadd( 15.9053, -143.189, -120.921, 0.28 ) }
    dend_28 { pt3dadd( 15.9388, -144.24, -121.547, 0.55 ) }
    dend_28 { pt3dadd( 15.9842, -145.914, -122.398, 0.28 ) }
    dend_28 { pt3dadd( 16.0384, -147.693, -123.315, 0.55 ) }
    dend_28 { pt3dadd( 16.0787, -148.963, -123.954, 0.28 ) }
    dend_28 { pt3dadd( 16.0808, -149.704, -124.366, 0.55 ) }
    dend_28 { pt3dadd( 16.0901, -151.437, -125.163, 0.28 ) }
    dend_28 { pt3dadd( 16.2266, -153.854, -126.164, 0.83 ) }
    dend_28 { pt3dadd( 16.4348, -156.141, -127.035, 0.28 ) }
    dend_28 { pt3dadd( 16.6322, -157.913, -127.654, 0.28 ) }
    dend_28 { pt3dadd( 16.8227, -159.695, -128.257, 0.28 ) }
    dend_28 { pt3dadd( 16.9629, -161.64, -128.856, 0.55 ) }
    dend_28 { pt3dadd( 17.0279, -163.039, -129.226, 0.28 ) }
    dend_28 { pt3dadd( 17.0362, -163.3, -129.265, 0.55 ) }
    dend_28 { pt3dadd( 17.0557, -165.604, -129.636, 0.28 ) }
    dend_28 { pt3dadd( 16.9871, -168.105, -130.167, 0.28 ) }
    dend_28 { pt3dadd( 16.9729, -169.485, -130.525, 0.55 ) }
    dend_28 { pt3dadd( 16.9736, -170.273, -130.803, 0.28 ) }
    dend_28 { pt3dadd( 17.0006, -171.783, -131.384, 0.55 ) }
    dend_28 { pt3dadd( 17.1369, -174.614, -132.467, 0.28 ) }
    dend_28 { pt3dadd( 17.2155, -175.313, -132.728, 0.55 ) }
    dend_28 { pt3dadd( 17.3928, -176.419, -133.121, 0.28 ) }
    dend_28 { pt3dadd( 17.5106, -176.921, -133.263, 0.55 ) }
    dend_28 { pt3dadd( 17.8112, -178.219, -133.511, 0.28 ) }
    dend_28 { pt3dadd( 18.0464, -179.377, -133.593, 0.55 ) }
    dend_28 { pt3dadd( 18.2283, -180.461, -133.565, 0.28 ) }
    dend_28 { pt3dadd( 18.2734, -180.72, -133.558, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_11()
}

proc basic_shape_11() {
    dend_28 { pt3dadd( 18.5106, -182.477, -133.521, 0.28 ) }
    dend_28 { pt3dadd( 18.6887, -183.804, -133.495, 0.55 ) }
    dend_28 { pt3dadd( 19.011, -186.233, -133.448, 0.28 ) }
    dend_28 { pt3dadd( 19.1897, -187.398, -133.424, 0.83 ) }
    dend_28 { pt3dadd( 19.4154, -188.926, -133.391, 0.28 ) }
    dend_28 { pt3dadd( 19.6411, -190.443, -133.356, 0.55 ) }
    dend_28 { pt3dadd( 19.8066, -191.862, -133.326, 0.28 ) }
    dend_28 { pt3dadd( 20.0018, -193.173, -133.291, 0.55 ) }
    dend_28 { pt3dadd( 20.1468, -194.116, -133.264, 0.28 ) }
    dend_28 { pt3dadd( 20.258, -194.948, -133.24, 0.55 ) }
    dend_28 { pt3dadd( 20.4858, -197.316, -133.182, 0.28 ) }
    dend_28 { pt3dadd( 20.5999, -198.631, -133.131, 0.55 ) }
    dend_28 { pt3dadd( 20.6421, -200.538, -133.084, 0.28 ) }
    dend_28 { pt3dadd( 20.6437, -201.359, -133.184, 0.55 ) }
    dend_28 { pt3dadd( 20.5587, -202.665, -133.511, 0.28 ) }
    dend_28 { pt3dadd( 20.5371, -202.928, -133.578, 0.55 ) }
    dend_28 { pt3dadd( 20.4371, -204.042, -133.896, 0.28 ) }
    dend_28 { pt3dadd( 20.3688, -205.235, -134.37, 0.55 ) }
    dend_28 { pt3dadd( 20.1727, -208.647, -135.944, 0.28 ) }
    dend_28 { pt3dadd( 20.087, -211.009, -137.142, 0.55 ) }
    dend_28 { pt3dadd( 19.9884, -213.472, -138.453, 0.28 ) }
    dend_28 { pt3dadd( 19.945, -214.451, -138.938, 0.55 ) }
    dend_28 { pt3dadd( 19.7584, -217.607, -140.376, 0.28 ) }
    dend_28 { pt3dadd( 19.6395, -219.446, -141.03, 0.55 ) }
    dend_28 { pt3dadd( 19.4989, -220.897, -141.392, 0.28 ) }
    dend_28 { pt3dadd( 19.4118, -221.835, -141.584, 0.55 ) }
    dend_28 { pt3dadd( 19.2019, -224.536, -141.962, 0.28 ) }
    dend_28 { pt3dadd( 19.1261, -226.084, -142.097, 0.55 ) }
    dend_28 { pt3dadd( 19.0495, -228.298, -142.176, 0.28 ) }
    dend_28 { pt3dadd( 19.0826, -229.843, -142.237, 0.55 ) }
    dend_28 { pt3dadd( 19.1711, -231.713, -142.309, 0.28 ) }
    dend_28 { pt3dadd( 19.3055, -234.078, -142.445, 0.55 ) }
    dend_28 { pt3dadd( 19.5019, -237.034, -142.654, 0.28 ) }
    dend_28 { pt3dadd( 19.7309, -239.882, -142.839, 0.55 ) }
    dend_28 { pt3dadd( 19.9143, -242.23, -142.991, 0.28 ) }
    dend_28 { pt3dadd( 20.0972, -244.385, -143.077, 0.55 ) }
    dend_28 { pt3dadd( 20.1835, -245.508, -143.091, 0.28 ) }
    dend_28 { pt3dadd( 20.3002, -247.177, -143.023, 0.55 ) }
    dend_28 { pt3dadd( 20.5531, -249.536, -142.763, 0.28 ) }
    dend_28 { pt3dadd( 20.6444, -250.131, -142.695, 0.55 ) }
    dend_28 { pt3dadd( 20.9685, -252.042, -142.499, 0.28 ) }
    dend_28 { pt3dadd( 21.1612, -252.86, -142.428, 0.55 ) }
    dend_28 { pt3dadd( 21.392, -253.948, -142.353, 0.28 ) }
    dend_28 { pt3dadd( 21.5814, -255.321, -142.299, 0.55 ) }
    dend_28 { pt3dadd( 21.5998, -255.939, -142.288, 0.28 ) }
    dend_28 { pt3dadd( 21.5207, -256.723, -142.291, 0.55 ) }
    dend_28 { pt3dadd( 20.3457, -260.526, -142.428, 0.28 ) }
    dend_28 { pt3dadd( 19.6724, -262.266, -142.505, 0.55 ) }
    dend_28 { pt3dadd( 19.0915, -263.459, -142.57, 0.28 ) }
    dend_28 { pt3dadd( 18.3844, -264.61, -142.63, 0.55 ) }
    dend_28 { pt3dadd( 17.4174, -265.885, -142.706, 0.28 ) }
    dend_28 { pt3dadd( 16.0085, -267.119, -142.84, 0.55 ) }
    // Section: dend_25, id: dend_25, parent: dend_24 (entry count 52/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 11.9061, -76.2606, -55.7939, 0.28 ) }
    dend_25 { pt3dadd( 12.6275, -77.0245, -57.1381, 0.28 ) }
    dend_25 { pt3dadd( 13.3521, -77.7436, -58.3683, 0.55 ) }
    dend_25 { pt3dadd( 13.7103, -78.0287, -58.9666, 0.28 ) }
    dend_25 { pt3dadd( 14.0238, -78.2723, -59.48, 0.55 ) }
    dend_25 { pt3dadd( 17.0841, -80.7318, -64.477, 0.28 ) }
    dend_25 { pt3dadd( 17.5548, -81.1203, -65.2195, 0.55 ) }
    dend_25 { pt3dadd( 18.8219, -82.2557, -67.2672, 0.55 ) }
    dend_25 { pt3dadd( 20.097, -83.4605, -69.3477, 0.55 ) }
    dend_25 { pt3dadd( 21.5195, -84.9031, -71.5913, 0.83 ) }
    dend_25 { pt3dadd( 22.5625, -86.0208, -73.0833, 0.28 ) }
    dend_25 { pt3dadd( 23.6422, -87.2235, -74.329, 0.55 ) }
    dend_25 { pt3dadd( 24.8519, -88.6704, -75.6724, 0.55 ) }
    dend_25 { pt3dadd( 26.0925, -90.4081, -76.9788, 0.28 ) }
    dend_25 { pt3dadd( 26.7063, -91.3361, -77.5641, 0.55 ) }
    dend_25 { pt3dadd( 27.7946, -92.9146, -78.4282, 0.28 ) }
    dend_25 { pt3dadd( 28.4327, -93.7539, -78.8864, 0.55 ) }
    dend_25 { pt3dadd( 29.8853, -95.5876, -79.9261, 0.28 ) }
    dend_25 { pt3dadd( 30.6402, -96.4621, -80.4718, 0.55 ) }
    dend_25 { pt3dadd( 31.7894, -97.6931, -81.2352, 0.28 ) }
    dend_25 { pt3dadd( 33.5072, -99.4688, -82.3871, 0.83 ) }
    dend_25 { pt3dadd( 36.4926, -102.518, -84.4124, 0.28 ) }
    dend_25 { pt3dadd( 37.774, -103.762, -85.2877, 0.55 ) }
    dend_25 { pt3dadd( 40.0022, -105.762, -86.7482, 0.28 ) }
    dend_25 { pt3dadd( 40.898, -106.528, -87.3482, 0.55 ) }
    // Section: dend_27, id: dend_27, parent: dend_25 (entry count 77/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( 40.898, -106.528, -87.3482, 0.28 ) }
    dend_27 { pt3dadd( 41.9986, -107.683, -88.3378, 0.28 ) }
    dend_27 { pt3dadd( 42.3652, -107.981, -88.723, 0.55 ) }
    dend_27 { pt3dadd( 44.0872, -109.182, -90.4234, 0.28 ) }
    dend_27 { pt3dadd( 45.4285, -110.112, -91.6563, 0.55 ) }
    dend_27 { pt3dadd( 46.8637, -111.186, -93.1148, 0.28 ) }
    dend_27 { pt3dadd( 47.198, -111.447, -93.4646, 0.55 ) }
    dend_27 { pt3dadd( 49.8555, -113.534, -96.6225, 0.28 ) }
    dend_27 { pt3dadd( 51.1822, -114.523, -98.3644, 0.55 ) }
    dend_27 { pt3dadd( 52.576, -115.602, -100.393, 0.28 ) }
    dend_27 { pt3dadd( 54.5105, -117.189, -103.424, 0.55 ) }
    dend_27 { pt3dadd( 55.8732, -118.467, -105.781, 0.55 ) }
    dend_27 { pt3dadd( 58.3131, -120.975, -110.156, 0.55 ) }
    dend_27 { pt3dadd( 60.1502, -122.952, -113.491, 0.55 ) }
    dend_27 { pt3dadd( 61.6078, -124.553, -116.163, 0.28 ) }
    dend_27 { pt3dadd( 62.4412, -125.42, -117.602, 0.55 ) }
    dend_27 { pt3dadd( 64.9743, -128.016, -121.602, 0.28 ) }
    dend_27 { pt3dadd( 65.916, -128.986, -123.032, 0.83 ) }
    dend_27 { pt3dadd( 68.1331, -131.114, -126.002, 0.28 ) }
    dend_27 { pt3dadd( 68.716, -131.662, -126.736, 0.55 ) }
    dend_27 { pt3dadd( 69.6527, -132.461, -127.921, 0.55 ) }
    dend_27 { pt3dadd( 71.8158, -134.26, -130.945, 0.55 ) }
    dend_27 { pt3dadd( 72.5946, -134.862, -132.209, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_12()
}

proc basic_shape_12() {
    dend_27 { pt3dadd( 74.0593, -136.109, -135.006, 0.28 ) }
    dend_27 { pt3dadd( 74.8956, -136.848, -136.828, 0.55 ) }
    dend_27 { pt3dadd( 76.616, -138.371, -140.637, 0.28 ) }
    dend_27 { pt3dadd( 77.9108, -139.592, -143.536, 0.55 ) }
    dend_27 { pt3dadd( 80.8688, -142.411, -150.162, 0.28 ) }
    dend_27 { pt3dadd( 81.8058, -143.403, -152.411, 0.55 ) }
    dend_27 { pt3dadd( 84.4175, -146.334, -158.952, 0.28 ) }
    dend_27 { pt3dadd( 85.4533, -147.48, -161.536, 0.55 ) }
    dend_27 { pt3dadd( 86.7028, -148.834, -164.478, 0.55 ) }
    dend_27 { pt3dadd( 88.4478, -150.758, -168.392, 0.28 ) }
    dend_27 { pt3dadd( 90.6444, -153.242, -173.152, 0.55 ) }
    dend_27 { pt3dadd( 91.3178, -154.025, -174.608, 0.55 ) }
    dend_27 { pt3dadd( 93.3969, -156.64, -179.165, 0.28 ) }
    dend_27 { pt3dadd( 93.9057, -157.298, -180.345, 0.55 ) }
    dend_27 { pt3dadd( 94.9901, -158.667, -182.867, 0.28 ) }
    dend_27 { pt3dadd( 95.7883, -159.718, -184.576, 0.55 ) }
    dend_27 { pt3dadd( 96.6313, -160.825, -186.226, 0.28 ) }
    dend_27 { pt3dadd( 97.5468, -162.138, -187.997, 0.55 ) }
    dend_27 { pt3dadd( 98.7923, -164.061, -190.201, 0.28 ) }
    dend_27 { pt3dadd( 99.758, -165.536, -191.678, 0.55 ) }
    dend_27 { pt3dadd( 101.772, -168.651, -194.155, 0.28 ) }
    dend_27 { pt3dadd( 103.416, -170.463, -195.755, 0.55 ) }
    dend_27 { pt3dadd( 104.56, -171.537, -196.676, 0.28 ) }
    dend_27 { pt3dadd( 105.607, -172.425, -197.328, 0.55 ) }
    dend_27 { pt3dadd( 106.665, -173.231, -197.885, 0.28 ) }
    dend_27 { pt3dadd( 108.917, -174.795, -199.334, 0.55 ) }
    dend_27 { pt3dadd( 113.165, -177.295, -203.118, 0.55 ) }
    // Section: dend_26, id: dend_26, parent: dend_25 (entry count 27/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 40.898, -106.528, -87.3482, 0.55 ) }
    dend_26 { pt3dadd( 43.0411, -106.746, -85.8869, 0.55 ) }
    dend_26 { pt3dadd( 47.0471, -107.26, -83.4232, 0.55 ) }
    dend_26 { pt3dadd( 49.1668, -107.569, -82.107, 0.28 ) }
    dend_26 { pt3dadd( 51.6033, -107.945, -80.5238, 0.83 ) }
    dend_26 { pt3dadd( 53.2512, -108.24, -79.5374, 0.28 ) }
    dend_26 { pt3dadd( 55.2855, -108.631, -78.3874, 0.28 ) }
    dend_26 { pt3dadd( 56.2166, -108.844, -77.9234, 0.55 ) }
    dend_26 { pt3dadd( 58.9558, -109.673, -76.6801, 0.28 ) }
    dend_26 { pt3dadd( 60.4503, -110.163, -76.0371, 0.55 ) }
    dend_26 { pt3dadd( 62.83, -111.087, -74.9649, 0.28 ) }
    dend_26 { pt3dadd( 63.1282, -111.211, -74.8346, 0.55 ) }
    dend_26 { pt3dadd( 66.0401, -112.448, -73.1533, 0.28 ) }
    dend_26 { pt3dadd( 67.7308, -113.157, -72.2253, 0.55 ) }
    dend_26 { pt3dadd( 70.302, -114.16, -70.907, 0.28 ) }
    dend_26 { pt3dadd( 71.5135, -114.585, -70.2674, 0.55 ) }
    dend_26 { pt3dadd( 73.927, -115.23, -68.9344, 0.28 ) }
    dend_26 { pt3dadd( 77.8971, -116.063, -66.6542, 0.28 ) }
    dend_26 { pt3dadd( 80.385, -116.37, -65.3188, 0.55 ) }
    dend_26 { pt3dadd( 81.272, -116.369, -64.936, 0.28 ) }
    dend_26 { pt3dadd( 81.598, -116.334, -64.8369, 0.55 ) }
    dend_26 { pt3dadd( 84.1556, -115.714, -64.1866, 0.55 ) }
    dend_26 { pt3dadd( 86.5416, -114.849, -63.7555, 0.28 ) }
    dend_26 { pt3dadd( 87.9699, -114.183, -63.5518, 0.55 ) }
    dend_26 { pt3dadd( 90.6947, -112.739, -63.053, 0.28 ) }
    dend_26 { pt3dadd( 91.8967, -112.092, -62.8488, 0.55 ) }
    dend_26 { pt3dadd( 93.4708, -111.192, -62.6076, 0.28 ) }
    dend_26 { pt3dadd( 95.4734, -109.928, -62.3546, 0.55 ) }
    dend_26 { pt3dadd( 98.0115, -108.286, -62.1296, 0.28 ) }
    dend_26 { pt3dadd( 99.6713, -107.183, -61.7579, 0.55 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_15, dend_0, dend_33, dend_16, dend_14, dend_1, dend_35, dend_34, dend_20, dend_17, dend_2, dend_37, dend_36, dend_32, dend_21, dend_19, dend_18, dend_9, dend_3, dend_23, dend_22, dend_13, dend_10, dend_8, dend_7, dend_4, dend_29, dend_24, dend_12, dend_11, dend_6, dend_5, dend_31, dend_30, dend_28, dend_25, dend_27, dend_26]}
    ModelViewParmSubset_2 = new SectionList()
    dend_15 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_33 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_35 ModelViewParmSubset_2.append()
    dend_34 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_37 ModelViewParmSubset_2.append()
    dend_36 ModelViewParmSubset_2.append()
    dend_32 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_31 ModelViewParmSubset_2.append()
    dend_30 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_15, dend_0, dend_33, dend_16, dend_14, dend_1, dend_35, dend_34, dend_20, dend_17, dend_2, dend_37, dend_36, dend_32, dend_21, dend_19, dend_18, dend_9, dend_3, dend_23, dend_22, dend_13, dend_10, dend_8, dend_7, dend_4, dend_29, dend_24, dend_12, dend_11, dend_6, dend_5, dend_31, dend_30, dend_28, dend_25, dend_27, dend_26]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_33 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_35 ModelViewParmSubset_4.append()
    dend_34 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_37 ModelViewParmSubset_4.append()
    dend_36 ModelViewParmSubset_4.append()
    dend_32 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_31 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_33]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_33 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_14 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_35]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_35 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_34]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_34 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_32]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_32 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_19 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_18 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_22 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_13 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_10 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_8 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_7 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_24 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_12 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_11 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_6 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_35 = new SectionList()
    dend_5 OneSecGrp_SectionRef_35.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_31]}
    OneSecGrp_SectionRef_36 = new SectionList()
    dend_31 OneSecGrp_SectionRef_36.append()

    // Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_37 = new SectionList()
    dend_30 OneSecGrp_SectionRef_37.append()

    // Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_38 = new SectionList()
    dend_28 OneSecGrp_SectionRef_38.append()

    // Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_39 = new SectionList()
    dend_25 OneSecGrp_SectionRef_39.append()

    // Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_40 = new SectionList()
    dend_27 OneSecGrp_SectionRef_40.append()

    // Group: {name=OneSecGrp_SectionRef_41, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_41 = new SectionList()
    dend_26 OneSecGrp_SectionRef_41.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_0 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_15 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_1 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_16 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_20 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_2 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_21 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_3 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_23 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_17 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_9 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_4 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_29 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_37]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_37 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_36]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_36 OneSecGrp_SectionRef_16.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36, dend_37], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()
    dend_31 basal.append()
    dend_32 basal.append()
    dend_33 basal.append()
    dend_34 basal.append()
    dend_35 basal.append()
    dend_36 basal.append()
    dend_37 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_15, dend_15, dend_15, dend_0, dend_0, axon_0, axon_0, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_16, dend_16, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_1, dend_1, axon_1, axon_1, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_20, dend_20, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_2, dend_2, dend_2, dend_2, dend_37, dend_37, dend_37, dend_37, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_21, dend_21, dend_21, dend_21, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_9, dend_9, dend_3, dend_3, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_8 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_10()
}

proc subsets_10() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_11()
}

proc subsets_11() {
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_12()
}

proc subsets_12() {
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_13()
}

proc subsets_13() {
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.418459  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.026008999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 9.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.025854  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.19695699  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-6  // units: S cm-2
        e_pas_nml2 = -60.2509  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.9899996E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.008343  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.026899999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.502333  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.653374  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 5.6999997E-5  // units: S cm-2
        e_pas_nml2 = -76.49812  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 7.84E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.30005398  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec basal {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.002256  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 1.38E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.005574  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 7.92E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_33 nseg = 3
    dend_14 nseg = 5
    dend_35 nseg = 7
    dend_34 nseg = 13
    dend_32 nseg = 9
    dend_19 nseg = 9
    dend_18 nseg = 5
    dend_22 nseg = 9
    dend_13 nseg = 13
    dend_10 nseg = 7
    dend_8 nseg = 17
    dend_7 nseg = 15
    dend_24 nseg = 3
    dend_12 nseg = 5
    dend_11 nseg = 5
    dend_6 nseg = 13
    dend_5 nseg = 11
    dend_31 nseg = 7
    dend_30 nseg = 9
    dend_28 nseg = 11
    dend_25 nseg = 3
    dend_27 nseg = 7
    dend_26 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bAC217_L23_DBC_55c1d16c8c_0_0


