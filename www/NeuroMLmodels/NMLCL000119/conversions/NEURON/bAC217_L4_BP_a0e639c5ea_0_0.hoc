// Cell: bAC217_L4_BP_a0e639c5ea_0_0
/*
{
  "id" : "bAC217_L4_BP_a0e639c5ea_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-3.08452, 6.27464, 0.312461, 1.46623", "-2.79927, 5.64032, 0.287115, 2.64844", "-2.51401, 5.00599, 0.26177, 4.10361", "-2.22875, 4.37167, 0.236425, 4.91598", "-1.94349, 3.73735, 0.21108, 5.72835", "-1.65823, 3.10303, 0.185734, 6.53421", "-1.37297, 2.46871, 0.160389, 7.31212", "-1.08771, 1.83438, 0.135044, 8.08989", "-0.802456, 1.20006, 0.109699, 8.85679", "-0.517198, 0.56574, 0.0843534, 8.93483", "-0.23194, -0.0685822, 0.0590082, 8.92633", "0.0533189, -0.702904, 0.033663, 8.91784", "0.338577, -1.33723, 0.00831775, 8.90934", "0.623836, -1.97155, -0.0170275, 8.90084", "0.909094, -2.60587, -0.0423727, 8.82493", "1.19435, -3.24019, -0.067718, 7.82232", "1.47961, -3.87451, -0.0930632, 6.5965", "1.76487, -4.50884, -0.118408, 5.37067", "2.05013, -5.14316, -0.143754, 4.14485", "2.33539, -5.77748, -0.169099, 2.91903", "2.62064, -6.4118, -0.194444, 1.76337" ]
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "1.61629, -5.87753, -1.26548, 1.33", "2.26448, -8.69448, -1.7852, 1.33", "3.33916, -13.3649, -2.64688, 0.66", "4.1712, -16.9809, -3.31402, 0.66", "5.05782, -20.8341, -4.02492, 1.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500001318721313
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "2.62064, -6.4118, -0.194444, 0.33", "8.77276, -20.0921, -0.194444, 0.33", "14.9249, -33.7725, -0.194444, 0.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "5.05782, -20.8341, -4.02492, 0.66", "5.55254, -32.5415, -1.20456, 0.66", "6.27056, -49.9311, 3.00692, 0.66", "7.14137, -71.1586, 8.31231, 0.66", "7.88286, -87.541, 12.4269, 0.66", "8.32518, -97.0467, 14.8066, 0.66", "8.4605, -100.201, 15.5903, 0.66", "8.65892, -104.48, 16.684, 0.66", "8.7769, -108.483, 17.7357, 0.66", "8.91033, -113.102, 18.8656, 0.66", "8.99053, -115.597, 19.1688, 0.66", "9.05269, -118.712, 19.2674, 0.66", "9.18059, -123.409, 18.8831, 0.66", "9.30867, -129.583, 18.0865, 0.66", "9.41609, -132.273, 17.7164, 0.66", "10.0175, -144.899, 15.8635, 0.66", "10.23, -147.879, 15.3777, 0.66", "11.0514, -157.082, 13.6509, 0.66", "11.4404, -160.966, 12.8895, 0.66", "12.2787, -168.102, 11.5818, 0.66", "12.7682, -172.191, 11.0981, 0.66", "13.2548, -176.169, 11.0242, 0.66", "13.7277, -180.008, 11.0877, 0.66", "14.0431, -183.711, 11.1587, 0.66", "14.3164, -187.632, 11.0828, 0.66", "14.5267, -193.693, 10.8793, 0.66", "14.6926, -197.376, 10.9255, 0.66", "14.8324, -201.844, 11.0448, 0.66", "15.0016, -207.894, 11.1775, 0.66", "15.0726, -211.755, 11.0855, 0.66", "15.1996, -216.95, 10.736, 0.66", "15.4719, -221.843, 10.3631, 0.66" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "5.05782, -20.8341, -4.02492, 0.66", "6.94814, -22.346, -4.23296, 0.66", "11.2939, -25.8218, -4.71123, 0.33", "21.2413, -33.778, -5.80601, 0.33", "21.6166, -34.0782, -5.84732, 0.66", "25.6309, -37.2888, -6.28911, 0.33" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "14.9249, -33.7725, -0.194444, 0.33", "21.077, -47.4528, -0.194444, 0.33", "27.2291, -61.1331, -0.194444, 0.33" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "15.4719, -221.843, 10.3631, 0.66", "18.3103, -224.795, 10.6987, 0.66", "19.9359, -226.471, 11.1493, 0.66", "22.6218, -229.039, 12.5983, 0.66", "24.3438, -230.568, 13.6897, 0.66", "27.6569, -233.37, 16.0048, 0.66", "30.2018, -235.408, 17.7712, 0.66", "32.6868, -237.259, 19.6743, 0.66", "38.0622, -240.827, 23.7127, 0.66", "41.1365, -242.685, 25.9786, 0.66", "44.7344, -244.832, 28.6835, 0.33", "46.1799, -245.675, 29.7005, 0.33", "46.691, -245.942, 30.0216, 0.66", "49.7688, -247.344, 31.7189, 0.33", "50.419, -247.612, 31.8942, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "15.4719, -221.843, 10.3631, 0.66", "15.9811, -224.182, 11.027, 0.66", "16.6389, -227.206, 11.9011, 0.66", "18.015, -233.254, 13.5393, 0.66", "18.5815, -235.891, 14.2324, 0.66", "19.3268, -239.1, 15.0847, 0.66", "20.0276, -242.362, 15.8702, 0.66", "20.4001, -244.197, 16.2574, 0.66", "20.801, -246.74, 16.7206, 0.66", "21.4747, -251.633, 17.4513, 0.66", "21.8163, -254.418, 17.747, 0.66", "22.1736, -257.685, 18.0533, 0.66", "22.3538, -260.454, 18.1722, 0.66", "22.4091, -261.956, 18.2337, 0.66", "22.4891, -267.003, 18.3974, 0.66", "22.4944, -269.617, 18.4112, 0.66", "22.433, -273.241, 18.4213, 0.66", "22.4881, -276.141, 18.5145, 0.66", "22.5083, -277.428, 18.5425, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "22.5083, -277.428, 18.5425, 0.66", "23.0784, -281.155, 18.7112, 0.66", "24.0486, -287.18, 19.6583, 0.66", "25.1008, -293.6, 20.8885, 0.66", "25.7105, -297.81, 21.774, 0.66", "26.4587, -303.631, 22.9042, 0.66", "27.4876, -313.938, 24.7033, 0.66", "27.9691, -320.99, 25.9149, 0.66", "28.2516, -325.824, 26.832, 0.66", "28.5226, -330.886, 27.6582, 0.66", "28.8401, -336.567, 28.508, 0.66", "29.0757, -340.457, 29.0319, 0.66", "29.45, -345.804, 29.5583, 0.66", "29.8737, -350.725, 29.9653, 0.66", "31.0165, -362.288, 31.143, 0.66", "31.5799, -366.883, 31.6384, 0.66", "32.8503, -378.419, 32.8642, 0.66", "33.2446, -383.075, 33.2402, 0.66", "33.487, -387.566, 33.494, 0.66", "33.5939, -391.61, 33.5978, 0.66", "33.6508, -398.235, 33.7401, 0.66", "33.6005, -403.903, 33.8484, 0.66", "33.2632, -414.81, 33.7622, 0.66", "33.2052, -420.321, 33.6705, 0.66", "33.1952, -424.611, 33.6063, 0.66", "33.2505, -430.382, 33.5258, 0.66", "33.4658, -452.097, 33.1651, 0.66", "33.5753, -460.082, 32.8632, 0.66", "33.8061, -481.053, 31.7812, 0.66", "33.8705, -488.982, 31.2727, 0.66", "33.9939, -496.782, 30.8045, 0.66", "34.138, -502.207, 30.4872, 0.66", "34.392, -509.634, 29.9773, 0.66", "34.5495, -517.893, 29.511, 0.66", "34.4974, -526.905, 28.7564, 0.66", "34.4438, -531.94, 28.359, 0.66", "34.4602, -535.447, 28.1686, 0.66", "34.8462, -549.024, 28.101, 0.66", "34.9687, -553.256, 28.0923, 0.66", "34.9554, -560.209, 27.853, 0.66", "34.9035, -567.163, 27.5118, 0.66", "34.968, -572.553, 27.2468, 0.66", "35.4853, -585.733, 26.9983, 0.66", "36.4289, -600.859, 26.9598, 0.66", "37.1082, -611.159, 26.8577, 0.66", "37.3921, -616.339, 26.7278, 0.66", "38.2974, -635.302, 25.9186, 0.66", "38.5155, -647.48, 25.0788, 0.66", "38.5466, -651.04, 24.7699, 0.66", "38.557, -656.815, 24.1419, 0.66", "38.4517, -665.288, 23.0008, 0.66", "38.2748, -668.951, 22.4282, 0.66", "37.4682, -678.767, 20.6136, 0.66", "35.717, -699.248, 16.5012, 0.66", "35.0334, -709.808, 14.637, 0.66", "34.8872, -713.748, 14.0377, 0.33", "34.8709, -716.378, 13.7029, 1.33", "35.1757, -722.609, 13.1433, 0.66", "36.0411, -730.12, 12.7207, 0.66", "36.8487, -735.449, 12.5063, 0.66", "37.8175, -740.842, 12.3983, 0.66", "38.695, -745.256, 12.2397, 0.66", "42.5954, -763.382, 11.9647, 0.66", "43.1624, -765.937, 11.9908, 0.33", "43.9066, -769.586, 12.0546, 1.33", "44.5916, -773.209, 12.0557, 0.66", "45.0911, -776.056, 12.0648, 0.33", "46.412, -783.914, 12.1686, 0.66", "47.0079, -787.958, 12.7207, 0.66", "47.8059, -793.292, 13.7352, 0.33" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 27
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "22.5083, -277.428, 18.5425, 0.66", "19.9226, -286.459, 17.2316, 0.66", "17.839, -294.12, 16.0549, 0.66", "16.3277, -299.879, 15.5788, 0.33", "14.1771, -307.988, 15.218, 0.33", "13.805, -309.315, 15.2212, 0.66", "12.64, -313.622, 15.3555, 0.33", "11.8022, -316.766, 15.6453, 0.66", "10.1026, -324.201, 16.2091, 0.33", "9.84457, -325.378, 16.3373, 0.66", "8.09396, -333.341, 17.1796, 0.33", "7.32006, -337.465, 17.8092, 0.33", "6.63081, -341.945, 18.6587, 0.66", "5.88621, -347.308, 19.85, 0.33", "5.58721, -350.2, 20.4732, 0.33", "5.49244, -351.821, 20.9326, 0.66", "5.33034, -358.642, 23.9635, 0.33", "5.27625, -359.639, 24.5348, 0.66", "5.16473, -362.156, 26.2406, 0.33", "5.07697, -363.452, 27.1354, 0.33", "4.98276, -364.822, 27.9355, 0.66", "4.5627, -369.952, 30.348, 0.33", "4.22684, -373.086, 31.2665, 0.33", "4.13823, -374.268, 31.543, 0.66", "4.07981, -376.555, 31.9104, 0.33", "4.06044, -377.765, 32.0233, 0.66", "4.05186, -379.301, 32.0775, 0.33", "4.06509, -380.888, 32.0216, 0.66", "4.03606, -383.218, 31.9688, 0.33", "4.00445, -384.069, 31.9615, 0.66", "3.58628, -391.125, 32.0225, 0.33", "3.54957, -391.576, 32.0255, 0.66", "3.36283, -393.202, 32.0303, 0.33", "3.24227, -394.05, 32.0296, 0.66", "2.91821, -396.365, 32.2645, 0.33", "2.78111, -397.425, 32.4483, 0.66", "2.57935, -399.322, 32.8823, 0.33", "2.45226, -400.664, 33.2131, 0.66", "2.33948, -402.201, 33.6434, 0.33", "1.8655, -409.355, 35.9017, 0.33", "1.74012, -411.444, 36.6718, 0.66" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "47.8059, -793.292, 13.7352, 0.66", "47.8237, -796.12, 13.107, 0.66", "48.0577, -797.577, 13.0334, 1.33", "48.3133, -798.827, 13.0632, 0.66", "48.5821, -800.399, 13.089, 0.66", "49.2566, -803.782, 13.2725, 0.33", "50.1641, -807.872, 13.5525, 0.66", "51.5396, -813.146, 14.1735, 0.66", "52.3184, -815.77, 14.5328, 0.66", "53.1913, -818.698, 14.8404, 0.33", "54.2357, -822.447, 15.1005, 0.33", "54.4725, -823.508, 15.124, 0.66", "54.5977, -824.392, 14.9927, 0.33", "54.6281, -825.16, 14.7899, 0.66", "54.7027, -829.643, 13.4305, 0.33", "54.7498, -831.516, 12.8477, 0.66", "54.7391, -833.292, 12.2584, 0.33", "54.7612, -838.33, 10.82, 0.33", "54.8569, -841.28, 10.0645, 0.66", "55.1621, -846.617, 8.85447, 0.33", "55.3692, -849.131, 8.39868, 0.66", "55.6143, -851.612, 7.99253, 1.33", "56.3093, -857.27, 7.24542, 0.33", "56.7301, -860.067, 7.03843, 0.33", "56.9082, -861.166, 6.98185, 0.66", "57.3759, -863.934, 6.95318, 0.33", "58.0029, -867.646, 6.99516, 0.33", "58.2648, -869.0, 7.03878, 1.33", "58.9994, -872.891, 7.17541, 0.33", "59.2173, -874.237, 7.27003, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "47.8059, -793.292, 13.7352, 0.66", "45.3112, -795.397, 13.5897, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "59.2173, -874.237, 7.27003, 0.66", "57.2018, -873.797, 8.71827, 0.66" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "59.2173, -874.237, 7.27003, 0.66", "59.367, -875.904, 7.02835, 0.66", "60.0335, -883.326, 5.95217, 0.33", "60.2455, -885.686, 5.60987, 1.33" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "60.2455, -885.686, 5.60987, 0.33", "68.1746, -896.967, 10.623, 0.33", "68.9133, -898.066, 11.0344, 1.33", "70.9608, -901.142, 12.0044, 0.33", "71.3688, -901.782, 12.1253, 0.66", "73.2731, -904.84, 12.3917, 0.33", "73.8511, -905.769, 12.4726, 0.66", "74.2184, -906.62, 12.1822, 0.33", "74.7264, -907.684, 11.7484, 0.66", "76.58, -911.012, 9.968, 0.33", "77.3071, -912.219, 9.21134, 1.33" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "60.2455, -885.686, 5.60987, 0.33", "61.1661, -896.839, 9.01897, 0.33", "61.6682, -902.921, 10.8782, 0.33", "61.7472, -903.877, 11.1704, 0.66", "62.2654, -910.155, 13.0894, 0.33", "62.3345, -910.992, 13.3452, 0.66" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_11", "dend_8", "dend_8", "dend_8", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.418459",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.026008999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.025854",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.19695699",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "2.0E-6",
    "erev" : "-60.2509"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.9899996E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.008343",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.026899999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.502333",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.653374",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "5.6999997E-5",
    "erev" : "-76.49812"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "7.84E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.30005398",
    "erev" : "50.0"
  }, {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.002256",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.38E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.005574",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "7.92E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bAC217_L4_BP_a0e639c5ea_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_12, id: dend_12, parent: dend_2
create dend_12
public dend_12
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_5, id: dend_5, parent: dend_3
create dend_5
public dend_5
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_11, id: dend_11, parent: dend_7
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_15
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_0(0), soma_0(0.4500001318721313)
    connect axon_0(0), soma_0(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_12(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_5(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_11(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -3.08452, 6.27464, 0.312461, 1.46623 ) }
    soma_0 { pt3dadd( -2.79927, 5.64032, 0.287115, 2.64844 ) }
    soma_0 { pt3dadd( -2.51401, 5.00599, 0.26177, 4.10361 ) }
    soma_0 { pt3dadd( -2.22875, 4.37167, 0.236425, 4.91598 ) }
    soma_0 { pt3dadd( -1.94349, 3.73735, 0.21108, 5.72835 ) }
    soma_0 { pt3dadd( -1.65823, 3.10303, 0.185734, 6.53421 ) }
    soma_0 { pt3dadd( -1.37297, 2.46871, 0.160389, 7.31212 ) }
    soma_0 { pt3dadd( -1.08771, 1.83438, 0.135044, 8.08989 ) }
    soma_0 { pt3dadd( -0.802456, 1.20006, 0.109699, 8.85679 ) }
    soma_0 { pt3dadd( -0.517198, 0.56574, 0.0843534, 8.93483 ) }
    soma_0 { pt3dadd( -0.23194, -0.0685822, 0.0590082, 8.92633 ) }
    soma_0 { pt3dadd( 0.0533189, -0.702904, 0.033663, 8.91784 ) }
    soma_0 { pt3dadd( 0.338577, -1.33723, 0.00831775, 8.90934 ) }
    soma_0 { pt3dadd( 0.623836, -1.97155, -0.0170275, 8.90084 ) }
    soma_0 { pt3dadd( 0.909094, -2.60587, -0.0423727, 8.82493 ) }
    soma_0 { pt3dadd( 1.19435, -3.24019, -0.067718, 7.82232 ) }
    soma_0 { pt3dadd( 1.47961, -3.87451, -0.0930632, 6.5965 ) }
    soma_0 { pt3dadd( 1.76487, -4.50884, -0.118408, 5.37067 ) }
    soma_0 { pt3dadd( 2.05013, -5.14316, -0.143754, 4.14485 ) }
    soma_0 { pt3dadd( 2.33539, -5.77748, -0.169099, 2.91903 ) }
    soma_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 1.76337 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 21/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 1.61629, -5.87753, -1.26548, 1.33 ) }
    dend_0 { pt3dadd( 2.26448, -8.69448, -1.7852, 1.33 ) }
    dend_0 { pt3dadd( 3.33916, -13.3649, -2.64688, 0.66 ) }
    dend_0 { pt3dadd( 4.1712, -16.9809, -3.31402, 0.66 ) }
    dend_0 { pt3dadd( 5.05782, -20.8341, -4.02492, 1.33 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 26/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 8.77276, -20.0921, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 29/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 5.05782, -20.8341, -4.02492, 0.66 ) }
    dend_2 { pt3dadd( 5.55254, -32.5415, -1.20456, 0.66 ) }
    dend_2 { pt3dadd( 6.27056, -49.9311, 3.00692, 0.66 ) }
    dend_2 { pt3dadd( 7.14137, -71.1586, 8.31231, 0.66 ) }
    dend_2 { pt3dadd( 7.88286, -87.541, 12.4269, 0.66 ) }
    dend_2 { pt3dadd( 8.32518, -97.0467, 14.8066, 0.66 ) }
    dend_2 { pt3dadd( 8.4605, -100.201, 15.5903, 0.66 ) }
    dend_2 { pt3dadd( 8.65892, -104.48, 16.684, 0.66 ) }
    dend_2 { pt3dadd( 8.7769, -108.483, 17.7357, 0.66 ) }
    dend_2 { pt3dadd( 8.91033, -113.102, 18.8656, 0.66 ) }
    dend_2 { pt3dadd( 8.99053, -115.597, 19.1688, 0.66 ) }
    dend_2 { pt3dadd( 9.05269, -118.712, 19.2674, 0.66 ) }
    dend_2 { pt3dadd( 9.18059, -123.409, 18.8831, 0.66 ) }
    dend_2 { pt3dadd( 9.30867, -129.583, 18.0865, 0.66 ) }
    dend_2 { pt3dadd( 9.41609, -132.273, 17.7164, 0.66 ) }
    dend_2 { pt3dadd( 10.0175, -144.899, 15.8635, 0.66 ) }
    dend_2 { pt3dadd( 10.23, -147.879, 15.3777, 0.66 ) }
    dend_2 { pt3dadd( 11.0514, -157.082, 13.6509, 0.66 ) }
    dend_2 { pt3dadd( 11.4404, -160.966, 12.8895, 0.66 ) }
    dend_2 { pt3dadd( 12.2787, -168.102, 11.5818, 0.66 ) }
    dend_2 { pt3dadd( 12.7682, -172.191, 11.0981, 0.66 ) }
    dend_2 { pt3dadd( 13.2548, -176.169, 11.0242, 0.66 ) }
    dend_2 { pt3dadd( 13.7277, -180.008, 11.0877, 0.66 ) }
    dend_2 { pt3dadd( 14.0431, -183.711, 11.1587, 0.66 ) }
    dend_2 { pt3dadd( 14.3164, -187.632, 11.0828, 0.66 ) }
    dend_2 { pt3dadd( 14.5267, -193.693, 10.8793, 0.66 ) }
    dend_2 { pt3dadd( 14.6926, -197.376, 10.9255, 0.66 ) }
    dend_2 { pt3dadd( 14.8324, -201.844, 11.0448, 0.66 ) }
    dend_2 { pt3dadd( 15.0016, -207.894, 11.1775, 0.66 ) }
    dend_2 { pt3dadd( 15.0726, -211.755, 11.0855, 0.66 ) }
    dend_2 { pt3dadd( 15.1996, -216.95, 10.736, 0.66 ) }
    dend_2 { pt3dadd( 15.4719, -221.843, 10.3631, 0.66 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 61/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 5.05782, -20.8341, -4.02492, 0.66 ) }
    dend_1 { pt3dadd( 6.94814, -22.346, -4.23296, 0.66 ) }
    dend_1 { pt3dadd( 11.2939, -25.8218, -4.71123, 0.33 ) }
    dend_1 { pt3dadd( 21.2413, -33.778, -5.80601, 0.33 ) }
    dend_1 { pt3dadd( 21.6166, -34.0782, -5.84732, 0.66 ) }
    dend_1 { pt3dadd( 25.6309, -37.2888, -6.28911, 0.33 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 67/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 21.077, -47.4528, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 27.2291, -61.1331, -0.194444, 0.33 ) }
    // Section: dend_12, id: dend_12, parent: dend_2 (entry count 70/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 15.4719, -221.843, 10.3631, 0.66 ) }
    dend_12 { pt3dadd( 18.3103, -224.795, 10.6987, 0.66 ) }
    dend_12 { pt3dadd( 19.9359, -226.471, 11.1493, 0.66 ) }
    dend_12 { pt3dadd( 22.6218, -229.039, 12.5983, 0.66 ) }
    dend_12 { pt3dadd( 24.3438, -230.568, 13.6897, 0.66 ) }
    dend_12 { pt3dadd( 27.6569, -233.37, 16.0048, 0.66 ) }
    dend_12 { pt3dadd( 30.2018, -235.408, 17.7712, 0.66 ) }
    dend_12 { pt3dadd( 32.6868, -237.259, 19.6743, 0.66 ) }
    dend_12 { pt3dadd( 38.0622, -240.827, 23.7127, 0.66 ) }
    dend_12 { pt3dadd( 41.1365, -242.685, 25.9786, 0.66 ) }
    dend_12 { pt3dadd( 44.7344, -244.832, 28.6835, 0.33 ) }
    dend_12 { pt3dadd( 46.1799, -245.675, 29.7005, 0.33 ) }
    dend_12 { pt3dadd( 46.691, -245.942, 30.0216, 0.66 ) }
    dend_12 { pt3dadd( 49.7688, -247.344, 31.7189, 0.33 ) }
    dend_12 { pt3dadd( 50.419, -247.612, 31.8942, 0.66 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 85/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 15.4719, -221.843, 10.3631, 0.66 ) }
    dend_3 { pt3dadd( 15.9811, -224.182, 11.027, 0.66 ) }
    dend_3 { pt3dadd( 16.6389, -227.206, 11.9011, 0.66 ) }
    dend_3 { pt3dadd( 18.015, -233.254, 13.5393, 0.66 ) }
    dend_3 { pt3dadd( 18.5815, -235.891, 14.2324, 0.66 ) }
    dend_3 { pt3dadd( 19.3268, -239.1, 15.0847, 0.66 ) }
    dend_3 { pt3dadd( 20.0276, -242.362, 15.8702, 0.66 ) }
    dend_3 { pt3dadd( 20.4001, -244.197, 16.2574, 0.66 ) }
    dend_3 { pt3dadd( 20.801, -246.74, 16.7206, 0.66 ) }
    dend_3 { pt3dadd( 21.4747, -251.633, 17.4513, 0.66 ) }
    dend_3 { pt3dadd( 21.8163, -254.418, 17.747, 0.66 ) }
    dend_3 { pt3dadd( 22.1736, -257.685, 18.0533, 0.66 ) }
    dend_3 { pt3dadd( 22.3538, -260.454, 18.1722, 0.66 ) }
    dend_3 { pt3dadd( 22.4091, -261.956, 18.2337, 0.66 ) }
    dend_3 { pt3dadd( 22.4891, -267.003, 18.3974, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_3 { pt3dadd( 22.4944, -269.617, 18.4112, 0.66 ) }
    dend_3 { pt3dadd( 22.433, -273.241, 18.4213, 0.66 ) }
    dend_3 { pt3dadd( 22.4881, -276.141, 18.5145, 0.66 ) }
    dend_3 { pt3dadd( 22.5083, -277.428, 18.5425, 0.66 ) }
    // Section: dend_5, id: dend_5, parent: dend_3 (entry count 4/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 22.5083, -277.428, 18.5425, 0.66 ) }
    dend_5 { pt3dadd( 23.0784, -281.155, 18.7112, 0.66 ) }
    dend_5 { pt3dadd( 24.0486, -287.18, 19.6583, 0.66 ) }
    dend_5 { pt3dadd( 25.1008, -293.6, 20.8885, 0.66 ) }
    dend_5 { pt3dadd( 25.7105, -297.81, 21.774, 0.66 ) }
    dend_5 { pt3dadd( 26.4587, -303.631, 22.9042, 0.66 ) }
    dend_5 { pt3dadd( 27.4876, -313.938, 24.7033, 0.66 ) }
    dend_5 { pt3dadd( 27.9691, -320.99, 25.9149, 0.66 ) }
    dend_5 { pt3dadd( 28.2516, -325.824, 26.832, 0.66 ) }
    dend_5 { pt3dadd( 28.5226, -330.886, 27.6582, 0.66 ) }
    dend_5 { pt3dadd( 28.8401, -336.567, 28.508, 0.66 ) }
    dend_5 { pt3dadd( 29.0757, -340.457, 29.0319, 0.66 ) }
    dend_5 { pt3dadd( 29.45, -345.804, 29.5583, 0.66 ) }
    dend_5 { pt3dadd( 29.8737, -350.725, 29.9653, 0.66 ) }
    dend_5 { pt3dadd( 31.0165, -362.288, 31.143, 0.66 ) }
    dend_5 { pt3dadd( 31.5799, -366.883, 31.6384, 0.66 ) }
    dend_5 { pt3dadd( 32.8503, -378.419, 32.8642, 0.66 ) }
    dend_5 { pt3dadd( 33.2446, -383.075, 33.2402, 0.66 ) }
    dend_5 { pt3dadd( 33.487, -387.566, 33.494, 0.66 ) }
    dend_5 { pt3dadd( 33.5939, -391.61, 33.5978, 0.66 ) }
    dend_5 { pt3dadd( 33.6508, -398.235, 33.7401, 0.66 ) }
    dend_5 { pt3dadd( 33.6005, -403.903, 33.8484, 0.66 ) }
    dend_5 { pt3dadd( 33.2632, -414.81, 33.7622, 0.66 ) }
    dend_5 { pt3dadd( 33.2052, -420.321, 33.6705, 0.66 ) }
    dend_5 { pt3dadd( 33.1952, -424.611, 33.6063, 0.66 ) }
    dend_5 { pt3dadd( 33.2505, -430.382, 33.5258, 0.66 ) }
    dend_5 { pt3dadd( 33.4658, -452.097, 33.1651, 0.66 ) }
    dend_5 { pt3dadd( 33.5753, -460.082, 32.8632, 0.66 ) }
    dend_5 { pt3dadd( 33.8061, -481.053, 31.7812, 0.66 ) }
    dend_5 { pt3dadd( 33.8705, -488.982, 31.2727, 0.66 ) }
    dend_5 { pt3dadd( 33.9939, -496.782, 30.8045, 0.66 ) }
    dend_5 { pt3dadd( 34.138, -502.207, 30.4872, 0.66 ) }
    dend_5 { pt3dadd( 34.392, -509.634, 29.9773, 0.66 ) }
    dend_5 { pt3dadd( 34.5495, -517.893, 29.511, 0.66 ) }
    dend_5 { pt3dadd( 34.4974, -526.905, 28.7564, 0.66 ) }
    dend_5 { pt3dadd( 34.4438, -531.94, 28.359, 0.66 ) }
    dend_5 { pt3dadd( 34.4602, -535.447, 28.1686, 0.66 ) }
    dend_5 { pt3dadd( 34.8462, -549.024, 28.101, 0.66 ) }
    dend_5 { pt3dadd( 34.9687, -553.256, 28.0923, 0.66 ) }
    dend_5 { pt3dadd( 34.9554, -560.209, 27.853, 0.66 ) }
    dend_5 { pt3dadd( 34.9035, -567.163, 27.5118, 0.66 ) }
    dend_5 { pt3dadd( 34.968, -572.553, 27.2468, 0.66 ) }
    dend_5 { pt3dadd( 35.4853, -585.733, 26.9983, 0.66 ) }
    dend_5 { pt3dadd( 36.4289, -600.859, 26.9598, 0.66 ) }
    dend_5 { pt3dadd( 37.1082, -611.159, 26.8577, 0.66 ) }
    dend_5 { pt3dadd( 37.3921, -616.339, 26.7278, 0.66 ) }
    dend_5 { pt3dadd( 38.2974, -635.302, 25.9186, 0.66 ) }
    dend_5 { pt3dadd( 38.5155, -647.48, 25.0788, 0.66 ) }
    dend_5 { pt3dadd( 38.5466, -651.04, 24.7699, 0.66 ) }
    dend_5 { pt3dadd( 38.557, -656.815, 24.1419, 0.66 ) }
    dend_5 { pt3dadd( 38.4517, -665.288, 23.0008, 0.66 ) }
    dend_5 { pt3dadd( 38.2748, -668.951, 22.4282, 0.66 ) }
    dend_5 { pt3dadd( 37.4682, -678.767, 20.6136, 0.66 ) }
    dend_5 { pt3dadd( 35.717, -699.248, 16.5012, 0.66 ) }
    dend_5 { pt3dadd( 35.0334, -709.808, 14.637, 0.66 ) }
    dend_5 { pt3dadd( 34.8872, -713.748, 14.0377, 0.33 ) }
    dend_5 { pt3dadd( 34.8709, -716.378, 13.7029, 1.33 ) }
    dend_5 { pt3dadd( 35.1757, -722.609, 13.1433, 0.66 ) }
    dend_5 { pt3dadd( 36.0411, -730.12, 12.7207, 0.66 ) }
    dend_5 { pt3dadd( 36.8487, -735.449, 12.5063, 0.66 ) }
    dend_5 { pt3dadd( 37.8175, -740.842, 12.3983, 0.66 ) }
    dend_5 { pt3dadd( 38.695, -745.256, 12.2397, 0.66 ) }
    dend_5 { pt3dadd( 42.5954, -763.382, 11.9647, 0.66 ) }
    dend_5 { pt3dadd( 43.1624, -765.937, 11.9908, 0.33 ) }
    dend_5 { pt3dadd( 43.9066, -769.586, 12.0546, 1.33 ) }
    dend_5 { pt3dadd( 44.5916, -773.209, 12.0557, 0.66 ) }
    dend_5 { pt3dadd( 45.0911, -776.056, 12.0648, 0.33 ) }
    dend_5 { pt3dadd( 46.412, -783.914, 12.1686, 0.66 ) }
    dend_5 { pt3dadd( 47.0079, -787.958, 12.7207, 0.66 ) }
    dend_5 { pt3dadd( 47.8059, -793.292, 13.7352, 0.33 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 74/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 22.5083, -277.428, 18.5425, 0.66 ) }
    dend_4 { pt3dadd( 19.9226, -286.459, 17.2316, 0.66 ) }
    dend_4 { pt3dadd( 17.839, -294.12, 16.0549, 0.66 ) }
    dend_4 { pt3dadd( 16.3277, -299.879, 15.5788, 0.33 ) }
    dend_4 { pt3dadd( 14.1771, -307.988, 15.218, 0.33 ) }
    dend_4 { pt3dadd( 13.805, -309.315, 15.2212, 0.66 ) }
    dend_4 { pt3dadd( 12.64, -313.622, 15.3555, 0.33 ) }
    dend_4 { pt3dadd( 11.8022, -316.766, 15.6453, 0.66 ) }
    dend_4 { pt3dadd( 10.1026, -324.201, 16.2091, 0.33 ) }
    dend_4 { pt3dadd( 9.84457, -325.378, 16.3373, 0.66 ) }
    dend_4 { pt3dadd( 8.09396, -333.341, 17.1796, 0.33 ) }
    dend_4 { pt3dadd( 7.32006, -337.465, 17.8092, 0.33 ) }
    dend_4 { pt3dadd( 6.63081, -341.945, 18.6587, 0.66 ) }
    dend_4 { pt3dadd( 5.88621, -347.308, 19.85, 0.33 ) }
    dend_4 { pt3dadd( 5.58721, -350.2, 20.4732, 0.33 ) }
    dend_4 { pt3dadd( 5.49244, -351.821, 20.9326, 0.66 ) }
    dend_4 { pt3dadd( 5.33034, -358.642, 23.9635, 0.33 ) }
    dend_4 { pt3dadd( 5.27625, -359.639, 24.5348, 0.66 ) }
    dend_4 { pt3dadd( 5.16473, -362.156, 26.2406, 0.33 ) }
    dend_4 { pt3dadd( 5.07697, -363.452, 27.1354, 0.33 ) }
    dend_4 { pt3dadd( 4.98276, -364.822, 27.9355, 0.66 ) }
    dend_4 { pt3dadd( 4.5627, -369.952, 30.348, 0.33 ) }
    dend_4 { pt3dadd( 4.22684, -373.086, 31.2665, 0.33 ) }
    dend_4 { pt3dadd( 4.13823, -374.268, 31.543, 0.66 ) }
    dend_4 { pt3dadd( 4.07981, -376.555, 31.9104, 0.33 ) }
    dend_4 { pt3dadd( 4.06044, -377.765, 32.0233, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_4 { pt3dadd( 4.05186, -379.301, 32.0775, 0.33 ) }
    dend_4 { pt3dadd( 4.06509, -380.888, 32.0216, 0.66 ) }
    dend_4 { pt3dadd( 4.03606, -383.218, 31.9688, 0.33 ) }
    dend_4 { pt3dadd( 4.00445, -384.069, 31.9615, 0.66 ) }
    dend_4 { pt3dadd( 3.58628, -391.125, 32.0225, 0.33 ) }
    dend_4 { pt3dadd( 3.54957, -391.576, 32.0255, 0.66 ) }
    dend_4 { pt3dadd( 3.36283, -393.202, 32.0303, 0.33 ) }
    dend_4 { pt3dadd( 3.24227, -394.05, 32.0296, 0.66 ) }
    dend_4 { pt3dadd( 2.91821, -396.365, 32.2645, 0.33 ) }
    dend_4 { pt3dadd( 2.78111, -397.425, 32.4483, 0.66 ) }
    dend_4 { pt3dadd( 2.57935, -399.322, 32.8823, 0.33 ) }
    dend_4 { pt3dadd( 2.45226, -400.664, 33.2131, 0.66 ) }
    dend_4 { pt3dadd( 2.33948, -402.201, 33.6434, 0.33 ) }
    dend_4 { pt3dadd( 1.8655, -409.355, 35.9017, 0.33 ) }
    dend_4 { pt3dadd( 1.74012, -411.444, 36.6718, 0.66 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 15/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 47.8059, -793.292, 13.7352, 0.66 ) }
    dend_7 { pt3dadd( 47.8237, -796.12, 13.107, 0.66 ) }
    dend_7 { pt3dadd( 48.0577, -797.577, 13.0334, 1.33 ) }
    dend_7 { pt3dadd( 48.3133, -798.827, 13.0632, 0.66 ) }
    dend_7 { pt3dadd( 48.5821, -800.399, 13.089, 0.66 ) }
    dend_7 { pt3dadd( 49.2566, -803.782, 13.2725, 0.33 ) }
    dend_7 { pt3dadd( 50.1641, -807.872, 13.5525, 0.66 ) }
    dend_7 { pt3dadd( 51.5396, -813.146, 14.1735, 0.66 ) }
    dend_7 { pt3dadd( 52.3184, -815.77, 14.5328, 0.66 ) }
    dend_7 { pt3dadd( 53.1913, -818.698, 14.8404, 0.33 ) }
    dend_7 { pt3dadd( 54.2357, -822.447, 15.1005, 0.33 ) }
    dend_7 { pt3dadd( 54.4725, -823.508, 15.124, 0.66 ) }
    dend_7 { pt3dadd( 54.5977, -824.392, 14.9927, 0.33 ) }
    dend_7 { pt3dadd( 54.6281, -825.16, 14.7899, 0.66 ) }
    dend_7 { pt3dadd( 54.7027, -829.643, 13.4305, 0.33 ) }
    dend_7 { pt3dadd( 54.7498, -831.516, 12.8477, 0.66 ) }
    dend_7 { pt3dadd( 54.7391, -833.292, 12.2584, 0.33 ) }
    dend_7 { pt3dadd( 54.7612, -838.33, 10.82, 0.33 ) }
    dend_7 { pt3dadd( 54.8569, -841.28, 10.0645, 0.66 ) }
    dend_7 { pt3dadd( 55.1621, -846.617, 8.85447, 0.33 ) }
    dend_7 { pt3dadd( 55.3692, -849.131, 8.39868, 0.66 ) }
    dend_7 { pt3dadd( 55.6143, -851.612, 7.99253, 1.33 ) }
    dend_7 { pt3dadd( 56.3093, -857.27, 7.24542, 0.33 ) }
    dend_7 { pt3dadd( 56.7301, -860.067, 7.03843, 0.33 ) }
    dend_7 { pt3dadd( 56.9082, -861.166, 6.98185, 0.66 ) }
    dend_7 { pt3dadd( 57.3759, -863.934, 6.95318, 0.33 ) }
    dend_7 { pt3dadd( 58.0029, -867.646, 6.99516, 0.33 ) }
    dend_7 { pt3dadd( 58.2648, -869.0, 7.03878, 1.33 ) }
    dend_7 { pt3dadd( 58.9994, -872.891, 7.17541, 0.33 ) }
    dend_7 { pt3dadd( 59.2173, -874.237, 7.27003, 0.66 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 45/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 47.8059, -793.292, 13.7352, 0.66 ) }
    dend_6 { pt3dadd( 45.3112, -795.397, 13.5897, 0.66 ) }
    // Section: dend_11, id: dend_11, parent: dend_7 (entry count 47/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 59.2173, -874.237, 7.27003, 0.66 ) }
    dend_11 { pt3dadd( 57.2018, -873.797, 8.71827, 0.66 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 49/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 59.2173, -874.237, 7.27003, 0.66 ) }
    dend_8 { pt3dadd( 59.367, -875.904, 7.02835, 0.66 ) }
    dend_8 { pt3dadd( 60.0335, -883.326, 5.95217, 0.33 ) }
    dend_8 { pt3dadd( 60.2455, -885.686, 5.60987, 1.33 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 53/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 60.2455, -885.686, 5.60987, 0.33 ) }
    dend_10 { pt3dadd( 68.1746, -896.967, 10.623, 0.33 ) }
    dend_10 { pt3dadd( 68.9133, -898.066, 11.0344, 1.33 ) }
    dend_10 { pt3dadd( 70.9608, -901.142, 12.0044, 0.33 ) }
    dend_10 { pt3dadd( 71.3688, -901.782, 12.1253, 0.66 ) }
    dend_10 { pt3dadd( 73.2731, -904.84, 12.3917, 0.33 ) }
    dend_10 { pt3dadd( 73.8511, -905.769, 12.4726, 0.66 ) }
    dend_10 { pt3dadd( 74.2184, -906.62, 12.1822, 0.33 ) }
    dend_10 { pt3dadd( 74.7264, -907.684, 11.7484, 0.66 ) }
    dend_10 { pt3dadd( 76.58, -911.012, 9.968, 0.33 ) }
    dend_10 { pt3dadd( 77.3071, -912.219, 9.21134, 1.33 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 64/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 60.2455, -885.686, 5.60987, 0.33 ) }
    dend_9 { pt3dadd( 61.1661, -896.839, 9.01897, 0.33 ) }
    dend_9 { pt3dadd( 61.6682, -902.921, 10.8782, 0.33 ) }
    dend_9 { pt3dadd( 61.7472, -903.877, 11.1704, 0.66 ) }
    dend_9 { pt3dadd( 62.2654, -910.155, 13.0894, 0.33 ) }
    dend_9 { pt3dadd( 62.3345, -910.992, 13.3452, 0.66 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_2 = new SectionList()
    dend_0 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_2 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_12 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_3 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_5 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_4 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_7 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_0 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_1 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_6 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_11 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_8 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_9 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_10 OneSecGrp_SectionRef_15.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_8 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.418459  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.026008999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 9.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.025854  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.19695699  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-6  // units: S cm-2
        e_pas_nml2 = -60.2509  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.9899996E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.008343  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.026899999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.502333  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.653374  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 5.6999997E-5  // units: S cm-2
        e_pas_nml2 = -76.49812  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 7.84E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.30005398  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec basal {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.002256  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 1.38E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.005574  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 7.92E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_2 nseg = 11
    dend_12 nseg = 3
    dend_3 nseg = 3
    dend_5 nseg = 27
    dend_4 nseg = 7
    dend_7 nseg = 5
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bAC217_L4_BP_a0e639c5ea_0_0


