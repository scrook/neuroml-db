// Cell: cACint209_L23_BTC_59062d6e7d_0_0
/*
{
  "id" : "cACint209_L23_BTC_59062d6e7d_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-0.351257, 12.3292, -0.186838, 3.86652", "-0.347473, 10.9465, -0.165007, 5.23139", "-0.343689, 9.56389, -0.143175, 6.66046", "-0.339906, 8.18126, -0.121344, 7.80859", "-0.336122, 6.79862, -0.099512, 8.71713", "-0.332338, 5.41599, -0.0776805, 9.2498", "-0.328554, 4.03335, -0.055849, 9.72954", "-0.32477, 2.65072, -0.0340174, 10.2491", "-0.320986, 1.26808, -0.0121859, 10.9027", "-0.317202, -0.11455, 0.0096456, 11.3454", "-0.313418, -1.49719, 0.0314771, 11.4682", "-0.309634, -2.87982, 0.0533086, 11.591", "-0.30585, -4.26246, 0.0751402, 11.5993", "-0.302066, -5.64509, 0.0969717, 11.088", "-0.298282, -7.02772, 0.118803, 10.4157", "-0.294499, -8.41036, 0.140635, 8.88199", "-0.290715, -9.79299, 0.162466, 8.06564", "-0.286931, -11.1756, 0.184298, 6.905", "-0.283147, -12.5583, 0.206129, 5.67041", "-0.279363, -13.9409, 0.227961, 4.43581", "-0.275579, -15.3235, 0.249792, 2.79205" ]
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-0.741306, -16.0575, 0.99962, 2.78", "-0.499008, -19.1447, 0.565374, 2.5", "-0.313591, -21.5071, 0.233069, 3.05", "-0.00773988, -25.4041, -0.31508, 3.05" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500012654214236
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-2.45131, 13.6785, -2.00038, 2.22", "-3.70062, 19.1478, -1.99755, 1.39", "-4.5577, 23.0829, -1.91578, 1.39", "-5.21619, 26.1061, -1.85296, 1.39", "-5.88573, 29.1801, -1.78909, 1.11", "-6.36782, 31.3935, -1.7431, 1.11", "-7.03846, 34.4725, -1.67912, 1.11", "-7.79765, 38.7208, -1.44, 1.67" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500012654214236
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-3.15131, -13.422, 4.63962, 1.11", "-4.5377, -13.9971, 5.8529, 1.11", "-6.68043, -15.0069, 8.05339, 1.11", "-7.54016, -15.4326, 9.11333, 1.11", "-9.14201, -16.2046, 11.3484, 1.11", "-11.0788, -16.9189, 14.3149, 1.11", "-12.8072, -17.209, 17.194, 1.11", "-14.011, -16.9304, 19.6725, 1.11", "-15.257, -16.0127, 22.831, 1.11", "-15.7398, -15.4364, 24.054, 1.11", "-16.8184, -13.5446, 26.7279, 1.11", "-18.1106, -10.8409, 29.5797, 1.11", "-19.141, -8.55985, 31.6078, 0.56", "-20.0112, -6.77404, 33.0168, 1.11", "-21.7158, -3.57649, 35.4007, 0.83", "-22.5088, -2.32805, 36.3744, 0.83", "-23.5557, -0.9518, 37.5422, 0.83", "-24.6059, 0.275585, 38.6318, 2.22", "-26.285, 2.2118, 40.3771, 0.83", "-27.6353, 3.99112, 41.8807, 0.28", "-28.4229, 5.16409, 42.8903, 0.56", "-29.4044, 6.73295, 44.3306, 0.56", "-30.6251, 8.9427, 46.28, 1.11", "-31.7342, 11.0632, 48.1452, 0.28", "-32.2789, 12.1966, 49.1547, 0.28", "-33.1389, 14.1774, 50.9139, 1.94", "-34.5266, 18.05, 54.3452, 0.28", "-35.0312, 19.7254, 55.8359, 2.78" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500012654214236,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "-0.275579, -15.3235, 0.249792, 0.81257", "-0.234528, -30.3234, 0.249792, 0.81257", "-0.193476, -45.3234, 0.249792, 0.81257" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "-0.00773988, -25.4041, -0.31508, 2.22", "-1.67036, -31.0856, 0.266768, 2.22", "-4.3267, -40.1629, 1.19637, 2.22", "-5.83833, -45.3285, 1.72538, 1.11", "-6.6507, -48.1045, 2.00968, 1.11", "-8.06362, -52.9328, 2.50414, 1.11", "-9.72041, -58.5943, 3.08394, 1.39" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-0.00773988, -25.4041, -0.31508, 0.83", "2.28848, -28.219, -2.234, 0.83", "5.22082, -31.4274, -4.47566, 0.83", "7.94583, -34.1103, -6.27254, 0.83", "9.78716, -35.7902, -7.21441, 0.83", "13.432, -39.1574, -8.67137, 0.83", "17.7021, -43.3348, -10.017, 0.83", "20.0328, -45.7554, -10.4837, 0.83", "22.8805, -48.5629, -10.8602, 0.83", "26.9348, -52.4926, -11.107, 0.83", "30.7943, -56.3691, -11.0537, 0.83", "33.4869, -59.4265, -10.606, 0.83", "35.1846, -61.4374, -10.038, 0.83" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-7.79765, 38.7208, -1.44, 1.11", "-6.69966, 41.8581, -0.876743, 1.11", "-5.92325, 44.2131, -0.605338, 0.83", "-5.12395, 47.6935, -0.437556, 1.11", "-4.21595, 52.5334, -0.446123, 0.83", "-3.77905, 55.0299, -0.498528, 0.83", "-2.88789, 60.1221, -0.605422, 0.83", "-1.87731, 67.1591, -0.904073, 0.83", "-0.965551, 74.8896, -1.36848, 0.83", "-0.434384, 80.4211, -1.84101, 0.83", "-0.127767, 83.3758, -2.20323, 1.39" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-7.79765, 38.7208, -1.44, 0.56", "-9.2652, 41.1396, -0.950808, 0.56", "-10.1263, 42.4097, -0.673846, 0.56", "-14.0514, 47.7182, 0.533694, 0.83", "-18.4672, 53.3711, 1.86633, 0.83", "-19.967, 55.4902, 2.34723, 0.83", "-22.5756, 59.2028, 3.12487, 0.83", "-25.3382, 63.126, 3.84883, 0.83", "-26.3518, 64.6039, 4.06964, 0.83", "-28.3051, 67.4149, 4.29615, 0.83", "-32.4203, 73.354, 4.59642, 0.83", "-34.5542, 76.3732, 4.64724, 0.83", "-37.5737, 80.627, 4.60466, 0.83", "-42.0129, 86.9792, 4.37159, 0.83", "-47.402, 94.5248, 3.94215, 0.83", "-48.7951, 96.3771, 3.79907, 0.83", "-50.6869, 98.6601, 3.62675, 1.11", "-53.1847, 101.82, 3.51851, 0.83", "-54.9366, 104.087, 3.55724, 1.11", "-58.358, 108.477, 3.91782, 0.83", "-59.8565, 110.491, 4.24057, 0.83", "-63.9801, 116.262, 5.41107, 0.83", "-66.551, 120.111, 6.39894, 0.83", "-68.9743, 123.881, 7.53577, 0.83", "-70.8115, 126.798, 8.52394, 0.83", "-72.1632, 128.947, 9.35906, 1.11", "-73.308, 130.808, 10.0431, 0.83", "-74.5478, 132.78, 10.6408, 0.83", "-76.9147, 136.225, 11.263, 0.83", "-79.0628, 139.208, 11.5147, 0.28", "-81.4133, 142.182, 11.4497, 1.11", "-83.6572, 144.751, 11.2097, 0.28", "-86.5201, 147.85, 10.6753, 0.83", "-89.1097, 150.539, 10.0415, 0.28", "-91.7844, 153.279, 9.22808, 0.28", "-96.8494, 158.37, 7.56912, 0.83", "-99.9975, 161.467, 6.52358, 0.28", "-102.182, 163.618, 5.88488, 0.56", "-103.738, 165.207, 5.46858, 0.56", "-106.806, 168.463, 4.70253, 0.83", "-108.573, 170.432, 4.21915, 0.28", "-109.915, 172.117, 3.85703, 0.83", "-111.946, 174.749, 3.30476, 0.28", "-113.403, 176.572, 2.89057, 0.83", "-115.102, 178.493, 2.33588, 0.28", "-116.831, 180.23, 1.84036, 0.83", "-118.959, 182.305, 1.19115, 0.28", "-120.471, 183.686, 0.739319, 0.28", "-123.674, 186.333, -0.178406, 0.83", "-129.357, 190.747, -1.66892, 0.56", "-133.185, 193.555, -2.51284, 0.28" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-35.0312, 19.7254, 55.8359, 0.28", "-39.7537, 20.5205, 57.415, 0.28", "-41.1618, 20.7575, 57.8858, 1.39" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-35.0312, 19.7254, 55.8359, 0.28", "-34.9017, 22.5816, 57.7008, 0.28", "-34.8646, 23.2975, 58.1743, 0.56", "-34.7315, 25.9604, 59.8507, 0.28", "-34.6814, 27.6264, 60.898, 1.11", "-34.6697, 30.2867, 62.5056, 0.28", "-34.6946, 30.9551, 62.9026, 0.56", "-35.1146, 34.3446, 64.5224, 0.28", "-35.3839, 35.9465, 65.1629, 1.67", "-36.0836, 39.1162, 66.4501, 0.28", "-36.4976, 40.7176, 67.0911, 1.39", "-37.1503, 42.9654, 68.0197, 0.28", "-39.7021, 50.9156, 71.4933, 0.28", "-40.0508, 51.9456, 72.1189, 1.39", "-41.8142, 57.2513, 75.948, 0.28", "-42.0563, 58.0997, 76.7861, 0.83", "-42.5741, 60.163, 79.2186, 0.28", "-42.8275, 61.2487, 80.6878, 1.94", "-44.1421, 67.0816, 89.7656, 0.28", "-44.4104, 68.2629, 91.6332, 1.94", "-46.0683, 75.3015, 102.681, 0.28", "-46.2428, 75.9852, 103.703, 1.67", "-46.8206, 78.062, 106.595, 0.28", "-46.9154, 78.3652, 106.965, 0.56", "-47.7136, 80.4616, 108.934, 0.28", "-48.1216, 81.3757, 109.724, 2.22", "-49.8501, 84.6928, 111.866, 0.28", "-50.0403, 85.0642, 112.102, 0.56", "-52.5505, 90.1075, 115.16, 0.28", "-53.0876, 91.2057, 115.815, 1.11", "-54.1295, 93.416, 117.079, 0.28", "-54.6232, 94.4644, 117.738, 1.94" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "-0.193476, -45.3234, 0.249792, 0.56", "-0.152425, -60.3233, 0.249792, 0.56", "-0.111373, -75.3233, 0.249792, 0.56" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "-9.72041, -58.5943, 3.08394, 1.11", "-11.0271, -61.6425, 2.78721, 1.11" ],
    "parent" : "dend_22",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "-9.72041, -58.5943, 3.08394, 0.56", "-10.504, -59.0224, 4.42784, 0.56", "-12.6084, -60.2249, 8.04344, 0.56", "-14.8538, -61.6393, 12.1625, 0.56", "-15.7667, -62.2771, 13.8629, 0.56", "-16.7696, -63.0441, 15.9152, 0.56", "-17.918, -63.962, 18.3829, 0.56", "-19.3507, -65.2773, 21.7333, 0.83", "-21.6892, -67.613, 27.2497, 0.28", "-22.1578, -68.1197, 28.3788, 1.11", "-24.7775, -70.8883, 34.4789, 0.28", "-25.318, -71.5037, 35.7892, 1.39", "-26.7853, -73.3015, 39.3835, 0.28", "-27.1089, -73.7787, 40.2286, 1.11", "-27.6525, -74.6816, 41.679, 0.28", "-28.1075, -75.4534, 42.8919, 0.56", "-29.1216, -77.3807, 45.5031, 0.28", "-29.831, -78.8688, 47.5125, 1.67", "-31.2209, -82.2892, 52.3104, 0.28", "-31.4308, -82.8983, 53.2168, 0.83" ],
    "parent" : "dend_22",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "35.1846, -61.4374, -10.038, 0.83", "37.0989, -63.2659, -9.73741, 0.83", "40.6332, -66.6419, -9.18244, 0.83", "43.087, -68.9857, -8.79713, 0.83" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "35.1846, -61.4374, -10.038, 0.56", "36.2312, -63.3018, -9.8205, 0.56", "37.0763, -64.7438, -9.61938, 0.83", "38.4402, -66.9461, -9.405, 0.56", "41.0875, -71.4075, -9.12134, 0.56", "43.7475, -75.9778, -8.88997, 0.56", "44.8672, -77.808, -8.81113, 0.56", "45.8253, -79.2398, -8.76695, 0.56", "48.145, -82.5883, -8.81281, 0.56", "51.8342, -87.7824, -9.10839, 0.56", "52.6549, -88.8907, -9.22667, 0.28", "53.983, -90.7825, -9.58707, 0.28", "55.9549, -93.7676, -10.1823, 0.56", "57.7128, -96.4038, -10.7587, 0.28", "58.517, -97.6417, -11.0277, 0.56", "59.7049, -99.5097, -11.4644, 0.56", "60.9451, -101.713, -11.9057, 0.56", "62.089, -104.147, -12.2543, 0.56", "63.2603, -106.916, -12.5736, 0.56", "63.7546, -108.172, -12.6231, 0.56", "64.3754, -110.486, -12.723, 0.56", "64.9156, -113.146, -12.8282, 0.56", "65.4061, -116.546, -13.0, 0.56", "65.7658, -119.969, -13.1829, 0.56", "66.0656, -123.698, -13.4327, 0.28", "66.8723, -136.757, -14.4352, 0.28", "66.9705, -138.793, -14.6049, 0.56", "67.2061, -145.343, -15.2035, 0.28", "67.2595, -147.607, -15.4323, 0.56", "67.2973, -151.479, -15.8332, 0.28", "67.3424, -156.905, -16.6186, 0.56", "71.979, -167.841, -19.1439, 0.56", "75.2483, -179.584, -19.9521, 0.56", "77.6213, -191.317, -22.3579, 0.56", "78.7835, -203.485, -23.2091, 0.56", "79.0028, -215.717, -23.9917, 0.56", "81.2682, -227.739, -23.4686, 0.56", "84.6018, -239.263, -21.2063, 0.56" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-0.127767, 83.3758, -2.20323, 0.56", "0.88333, 84.8748, -3.22586, 0.56", "2.33298, 87.024, -4.69205, 0.56", "3.25771, 88.3949, -5.62732, 0.83", "4.99611, 90.9722, -7.38554, 0.83", "6.11932, 92.6374, -8.52157, 0.56" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-0.127767, 83.3758, -2.20323, 0.83", "-0.976132, 85.1672, -0.453441, 0.83", "-1.58309, 86.3367, 0.750781, 0.56", "-2.44128, 87.8023, 2.28184, 0.56", "-2.69433, 88.2487, 2.71756, 0.56", "-3.89965, 90.4673, 5.15789, 0.56", "-5.61706, 93.9168, 8.94944, 0.56", "-6.25685, 95.4553, 10.698, 0.56", "-6.82493, 96.9526, 12.3533, 0.28", "-7.31351, 98.237, 13.6714, 0.83", "-8.49125, 101.829, 17.0905, 0.56", "-8.89536, 103.536, 18.4143, 0.83", "-9.29189, 105.313, 19.6294, 0.56", "-9.41903, 106.119, 20.1275, 0.56", "-9.70971, 108.592, 21.5664, 0.56", "-10.1453, 111.497, 23.1046, 0.56", "-10.4811, 113.741, 24.191, 0.83", "-10.8466, 115.921, 25.5246, 0.28", "-11.0499, 117.152, 26.3877, 0.83", "-11.2486, 118.803, 27.7155, 0.56", "-11.3425, 119.81, 28.6037, 0.56", "-11.6223, 123.155, 31.6192, 0.56", "-11.7958, 125.172, 33.5425, 0.28", "-11.8613, 126.857, 35.148, 1.39", "-11.8241, 128.847, 37.0911, 0.56", "-11.6991, 130.044, 38.2679, 0.28", "-11.6093, 130.509, 38.7365, 0.28", "-11.402, 131.45, 39.7084, 1.39", "-11.0098, 133.434, 41.6861, 0.56", "-10.9479, 134.128, 42.3281, 0.83", "-10.8754, 135.941, 43.9106, 0.28", "-10.8751, 136.992, 44.8254, 0.83", "-10.9941, 140.824, 48.125, 0.28", "-10.9883, 143.163, 50.063, 1.39", "-10.8013, 149.804, 55.2846, 0.28", "-10.7556, 150.567, 55.8661, 0.56", "-10.5181, 152.951, 57.5862, 0.28", "-10.2567, 154.901, 58.9657, 1.67", "-9.07351, 161.494, 63.5636, 0.28", "-8.75839, 162.992, 64.7517, 1.11", "-8.17555, 165.476, 67.0089, 0.28", "-7.93773, 166.7, 68.2396, 1.39", "-7.48304, 169.581, 71.3801, 0.28", "-7.38015, 170.98, 73.0635, 0.83", "-7.65046, 175.234, 78.927, 0.28", "-7.92797, 176.661, 81.1759, 1.94", "-8.58499, 178.497, 84.5769, 0.28", "-8.58499, 178.497, 84.5769, 0.83", "-8.9519, 179.101, 86.0425, 0.28", "-9.24311, 179.527, 87.0984, 0.83", "-10.9483, 181.981, 93.1535, 1.39", "-12.1604, 183.863, 97.7598, 1.39", "-13.2687, 185.811, 102.367, 0.28", "-14.2232, 187.672, 106.475, 0.83", "-14.9537, 189.357, 109.887, 0.28", "-15.3228, 190.348, 111.683, 0.83", "-15.7352, 191.603, 113.708, 0.28", "-16.2028, 193.074, 115.923, 1.67", "-17.1358, 196.008, 120.286, 0.28", "-17.3802, 196.833, 121.551, 0.83", "-18.325, 200.598, 127.374, 0.28", "-18.4397, 201.131, 128.199, 0.83", "-18.6962, 202.752, 130.681, 0.56", "-18.8474, 204.299, 133.033, 1.67", "-18.9351, 206.174, 135.806, 0.28", "-18.9407, 206.705, 136.529, 1.11", "-18.8254, 210.081, 140.659, 0.28", "-18.7985, 210.633, 141.303, 0.83", "-18.6597, 212.794, 143.716, 0.28", "-18.5563, 214.396, 145.392, 1.94", "-17.9304, 223.899, 154.856, 0.28", "-17.8112, 225.857, 156.782, 1.94", "-17.6669, 228.783, 159.599, 0.28", "-17.6447, 229.668, 160.432, 1.11", "-17.6348, 233.635, 163.69, 0.28", "-17.6478, 235.166, 164.791, 1.39", "-17.6851, 239.455, 167.311, 0.28", "-17.6815, 240.655, 167.98, 0.83", "-17.5996, 242.405, 168.855, 1.39", "-16.8676, 251.714, 173.146, 0.28", "-16.7289, 252.909, 173.628, 0.83", "-16.0673, 257.578, 175.285, 0.28", "-15.8415, 258.926, 175.64, 1.39", "-14.8636, 264.097, 176.734, 0.28", "-14.4886, 265.871, 176.989, 1.11", "-13.5323, 270.162, 177.227, 0.28", "-13.3945, 270.763, 177.226, 0.83", "-12.1373, 276.198, 176.942, 0.28", "-11.7189, 277.76, 176.81, 0.56", "-10.755, 280.88, 176.503, 0.28", "-10.4138, 281.893, 176.397, 0.83", "-7.04784, 290.999, 175.403, 0.28", "-6.82216, 291.571, 175.347, 0.56", "-4.99801, 295.721, 175.046, 0.28", "-4.35114, 297.107, 174.971, 0.83" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 15
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-54.6232, 94.4644, 117.738, 0.28", "-53.2005, 104.658, 122.51, 0.28", "-52.8558, 107.176, 123.858, 0.56", "-52.487, 109.994, 125.465, 0.28", "-52.2874, 112.102, 126.858, 1.67", "-51.4562, 122.663, 134.319, 0.28", "-51.407, 123.528, 134.985, 1.39", "-51.2231, 128.607, 139.435, 0.28", "-51.208, 129.314, 140.061, 0.56", "-51.1821, 140.169, 150.085, 0.28", "-51.2213, 142.253, 152.11, 1.67", "-51.61, 149.252, 159.658, 0.28", "-51.708, 150.788, 161.321, 1.11" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-54.6232, 94.4644, 117.738, 0.28", "-57.2979, 99.8491, 117.78, 0.28", "-57.586, 100.367, 117.864, 1.11", "-58.623, 102.164, 118.259, 0.28", "-58.7699, 102.413, 118.329, 0.56", "-59.1268, 103.01, 118.515, 0.28", "-59.5506, 103.711, 118.751, 1.11", "-61.9463, 107.49, 120.508, 0.28", "-62.1008, 107.723, 120.617, 0.83", "-62.8386, 108.78, 121.115, 0.28", "-63.0385, 109.07, 121.241, 1.11", "-64.4675, 111.169, 122.07, 0.28", "-64.9816, 111.957, 122.347, 1.39", "-65.9604, 113.53, 122.755, 0.28", "-66.0332, 113.639, 122.788, 0.56", "-67.4521, 115.65, 123.403, 0.28", "-67.9397, 116.316, 123.633, 0.56", "-69.109, 117.851, 124.207, 0.28", "-69.6377, 118.502, 124.445, 1.39", "-72.0677, 121.334, 125.448, 0.28", "-72.3953, 121.695, 125.568, 0.56", "-73.8704, 123.222, 126.036, 0.28", "-74.491, 123.896, 126.21, 1.11", "-78.8829, 128.884, 127.242, 0.28", "-79.4282, 129.596, 127.318, 1.11", "-80.6222, 131.4, 127.313, 0.28", "-80.8552, 131.813, 127.279, 0.83", "-82.0215, 134.256, 126.842, 0.28", "-82.353, 135.132, 126.61, 1.11", "-83.625, 139.708, 125.044, 0.28", "-83.8304, 140.463, 124.751, 0.83", "-84.7829, 143.955, 123.27, 0.28", "-85.0617, 144.881, 122.865, 0.56", "-86.0116, 147.644, 121.554, 0.28", "-86.3124, 148.395, 121.175, 0.83", "-88.0315, 152.052, 119.251, 0.28", "-88.2628, 152.475, 118.966, 0.83", "-88.7688, 153.221, 118.39, 0.28", "-89.2024, 153.792, 117.923, 0.83", "-92.4798, 157.603, 114.327, 0.28", "-92.8071, 157.956, 113.963, 0.83", "-97.9406, 162.994, 108.247, 0.28", "-100.127, 165.024, 105.813, 0.28", "-100.526, 165.383, 105.361, 0.83", "-103.509, 167.929, 101.995, 0.28", "-103.816, 168.162, 101.642, 0.56", "-105.682, 169.49, 99.5548, 0.28", "-106.099, 169.704, 99.1794, 0.83" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "-11.0271, -61.6425, 2.78721, 0.83", "-11.9929, -63.7004, 1.13343, 0.83", "-12.5927, -64.9785, 0.106395, 0.83", "-13.2565, -66.393, -1.03036, 0.83", "-13.676, -67.2869, -1.74871, 0.83" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "-11.0271, -61.6425, 2.78721, 0.83", "-11.6085, -64.4563, 3.3933, 0.83", "-12.8482, -71.3628, 4.82601, 0.83", "-13.68, -76.0584, 5.64788, 0.83", "-15.7624, -87.9829, 7.40013, 0.83", "-16.5426, -92.2238, 7.79107, 0.83", "-16.9366, -94.3267, 7.91374, 0.83", "-17.3337, -96.618, 7.95822, 0.83", "-18.1596, -102.756, 7.79688, 0.83", "-19.0729, -108.764, 7.49054, 0.83", "-20.0321, -114.664, 7.02463, 0.83", "-20.4408, -116.94, 6.86492, 0.83", "-21.0081, -120.251, 6.82981, 0.56", "-21.488, -123.011, 6.97569, 0.56", "-21.9431, -126.264, 7.37992, 0.56", "-22.2666, -129.016, 7.88355, 0.83", "-22.6399, -132.567, 8.71751, 0.56", "-23.2276, -138.022, 9.77693, 0.83", "-23.6463, -141.928, 10.3699, 0.56", "-23.7759, -143.423, 10.5688, 0.56", "-23.8902, -145.738, 10.841, 0.83", "-23.9227, -146.558, 10.9277, 0.83", "-24.1184, -151.342, 11.3988, 0.56", "-24.3502, -154.94, 11.7761, 0.56", "-24.6176, -159.863, 12.2404, 0.56", "-24.8008, -162.71, 12.4884, 0.56", "-25.0849, -166.788, 12.8659, 1.11", "-25.3522, -170.039, 13.3, 0.56", "-25.519, -171.834, 13.6675, 0.56", "-25.9679, -175.761, 14.7719, 0.56", "-26.0602, -176.531, 15.0382, 0.56", "-26.3547, -179.814, 16.3683, 1.11", "-26.5907, -184.205, 18.5032, 0.56", "-26.6257, -187.421, 20.2003, 0.28", "-26.5687, -191.333, 22.3114, 0.28", "-26.5146, -193.254, 23.3517, 0.83", "-26.2185, -196.545, 25.0138, 1.39", "-25.782, -199.418, 26.2887, 0.28", "-25.4559, -201.073, 26.9851, 1.11", "-25.144, -202.547, 27.5788, 0.56", "-24.2528, -206.66, 29.2225, 0.83", "-23.2983, -211.647, 31.2607, 0.28", "-22.8173, -214.337, 32.2885, 1.39", "-21.8099, -219.67, 34.4692, 0.28", "-21.6729, -220.318, 34.7591, 0.83", "-20.979, -222.585, 35.7226, 0.28", "-20.3239, -224.333, 36.4255, 0.83", "-19.2276, -227.009, 37.3935, 0.56", "-16.5937, -233.073, 39.4937, 0.28", "-15.6294, -235.215, 40.164, 1.11", "-11.4599, -244.656, 42.9224, 0.28", "-11.0198, -245.68, 43.2147, 0.56", "-10.0206, -248.271, 44.0789, 1.67", "-8.33032, -253.308, 45.8483, 0.28", "-8.02572, -254.359, 46.2239, 0.56", "-6.68304, -259.644, 48.2896, 0.28", "-5.99648, -262.611, 49.5981, 1.67", "-3.57741, -272.675, 54.1641, 0.28", "-3.04693, -274.612, 55.0872, 1.11", "-1.90908, -278.403, 57.0142, 0.28", "-1.47736, -279.618, 57.6701, 0.83", "0.450245, -284.206, 60.2918, 0.28", "0.908972, -285.1, 60.7929, 1.39", "3.75205, -289.497, 63.192, 0.28", "4.46078, -290.407, 63.6503, 1.11", "8.47603, -295.015, 65.7217, 0.28", "9.11485, -295.744, 66.0159, 0.56", "11.0754, -298.022, 66.8096, 0.28", "12.0519, -299.256, 67.1654, 1.67", "18.1806, -307.802, 69.0957, 0.28", "18.7711, -308.771, 69.2689, 1.11", "21.938, -315.026, 70.1482, 0.28", "22.4324, -316.233, 70.3054, 0.56", "23.9581, -321.106, 70.8359, 0.28", "24.267, -322.715, 70.9928, 1.39", "24.769, -328.368, 71.5658, 0.28", "24.8482, -329.457, 71.6827, 0.83", "25.0269, -332.724, 72.03, 0.28", "25.1172, -334.612, 72.2767, 0.56", "25.5556, -346.616, 74.127, 0.28", "25.6023, -349.786, 74.6925, 1.39", "25.5644, -354.214, 75.5801, 0.28", "25.5262, -355.509, 75.8581, 0.56", "25.405, -358.218, 76.4061, 0.28", "25.3651, -359.021, 76.576, 0.83", "24.6474, -370.182, 78.9354, 0.28", "24.5874, -371.255, 79.1655, 1.11", "24.0571, -381.283, 81.3288, 0.28", "23.9434, -383.966, 81.8985, 1.11", "23.8058, -388.739, 82.8669, 0.28", "23.7849, -390.042, 83.1355, 0.56", "23.9025, -395.552, 84.3022, 0.28", "23.9489, -396.848, 84.5949, 0.56" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 19
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "-31.4308, -82.8983, 53.2168, 1.67", "-32.5311, -85.1419, 54.3046, 1.67", "-34.0967, -88.0841, 55.8318, 0.56", "-34.6285, -89.1417, 56.419, 0.83", "-35.3229, -90.6084, 57.3158, 0.28", "-35.6328, -91.2443, 57.7346, 0.56", "-36.3776, -92.8038, 58.7892, 0.28", "-36.6789, -93.4029, 59.2597, 0.56", "-37.64, -95.4332, 60.7789, 0.28", "-38.2632, -96.8167, 61.7256, 1.11", "-38.8908, -98.2761, 62.5642, 0.56", "-39.6165, -100.18, 63.5003, 0.28", "-39.9346, -101.061, 63.8759, 0.56", "-41.0496, -104.196, 65.122, 0.28", "-41.3602, -105.042, 65.4127, 1.39", "-42.1512, -107.3, 66.066, 1.67", "-43.2088, -110.691, 66.9251, 0.28", "-43.4345, -111.431, 67.093, 0.83" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "-31.4308, -82.8983, 53.2168, 0.28", "-30.2854, -84.3806, 53.74, 0.28", "-28.8461, -86.2433, 54.3975, 1.11", "-24.3101, -92.1137, 56.4694, 0.28", "-24.0841, -92.4062, 56.5727, 0.83", "-22.7073, -94.188, 57.2015, 0.28", "-22.6992, -94.1985, 57.2052, 0.83" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "43.087, -68.9857, -8.79713, 0.83", "45.659, -69.8444, -7.99854, 0.83", "47.9649, -70.6573, -7.10607, 0.56", "50.342, -71.5679, -6.09505, 0.56", "53.0499, -72.7196, -4.77628, 0.28", "53.9948, -73.1566, -4.27233, 0.28", "55.8478, -74.066, -3.19056, 0.56", "57.3174, -74.9106, -2.16579, 0.28", "57.9706, -75.313, -1.6605, 0.56", "59.5029, -76.2646, -0.529615, 0.28", "60.4577, -76.9033, 0.128783, 0.83", "61.902, -77.8265, 1.16478, 0.28", "62.8124, -78.3894, 1.89164, 0.56", "63.104, -78.5506, 2.12464, 0.28", "64.6905, -79.4075, 3.49076, 0.56", "66.598, -80.4071, 5.32398, 0.28", "69.5749, -81.5532, 8.38591, 0.83", "71.6298, -82.0226, 10.5483, 0.28", "72.0656, -82.0614, 11.0232, 0.56", "74.095, -81.9768, 13.1997, 0.28", "75.6048, -81.7082, 14.7709, 0.83", "79.171, -80.5768, 18.1731, 0.28", "81.0704, -79.7399, 19.7411, 1.11", "82.4321, -79.056, 20.7682, 0.56", "83.5349, -78.4517, 21.556, 0.28", "84.4503, -77.9266, 22.1458, 0.83", "85.7893, -77.198, 22.9114, 0.28", "87.524, -76.3395, 23.8735, 0.83", "90.9965, -74.797, 25.6622, 0.28", "92.9591, -73.956, 26.619, 0.28", "94.2092, -73.4189, 27.2019, 0.56", "97.0989, -72.1944, 28.5369, 0.83", "99.3905, -71.2715, 29.5676, 0.28", "101.038, -70.6305, 30.2775, 0.56", "108.481, -67.6332, 33.0674, 0.28", "109.516, -67.2393, 33.4611, 1.67" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "43.087, -68.9857, -8.79713, 0.56", "44.7303, -72.128, -10.5392, 0.56", "46.0104, -74.8025, -12.0537, 0.56", "47.1048, -77.4003, -13.3805, 0.56", "49.1127, -81.9326, -15.9495, 0.56", "49.6888, -83.2332, -16.6867, 0.28", "50.302, -84.6174, -17.4713, 0.28", "50.5137, -85.1693, -17.8139, 0.56", "51.101, -87.2698, -19.2607, 0.28", "52.0398, -91.3768, -21.8628, 0.83", "55.1737, -101.196, -28.2561, 0.83" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "84.6018, -239.263, -21.2063, 0.56", "87.1511, -248.486, -21.9316, 0.56", "90.1003, -257.261, -24.2889, 0.56", "95.1708, -265.018, -26.2573, 0.56", "100.931, -272.036, -28.767, 0.56", "106.003, -279.958, -30.0165, 0.56", "110.343, -288.446, -29.689, 0.56", "116.034, -295.989, -29.1158, 0.56", "122.267, -302.765, -27.1416, 0.56", "129.139, -308.231, -23.9647, 0.56", "135.71, -312.515, -19.0046, 0.56", "141.731, -315.871, -12.8448, 0.56", "147.407, -319.502, -6.50094, 0.56", "153.105, -324.452, -1.04359, 0.56", "158.397, -329.639, 4.62014, 0.56", "164.436, -335.847, 8.23049, 0.56", "171.25, -339.854, 13.0699, 0.56" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "84.6018, -239.263, -21.2063, 0.56", "88.066, -251.523, -21.7914, 0.56", "89.7573, -264.191, -22.2323, 0.56", "90.218, -276.886, -20.6606, 0.56", "88.8783, -289.518, -19.173, 0.56", "86.0084, -301.369, -15.5156, 0.56", "81.9525, -312.984, -12.3503, 0.56" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "6.11932, 92.6374, -8.52157, 0.56", "7.0088, 93.847, -9.86073, 0.56", "7.63902, 94.704, -10.8095, 0.56", "8.79526, 96.2763, -12.5503, 0.83", "13.0196, 100.345, -16.5844, 0.83" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "6.11932, 92.6374, -8.52157, 0.56", "4.20123, 93.4322, -8.47962, 0.56", "-2.62162, 95.8064, -9.15193, 0.56" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "-13.676, -67.2869, -1.74871, 0.83", "-13.9348, -69.4847, -3.20997, 0.83", "-14.1666, -71.5045, -4.54511, 0.83", "-14.2454, -72.5503, -5.22295, 0.83", "-14.3552, -74.8199, -6.76302, 0.56", "-14.38, -75.6824, -7.39979, 0.83", "-14.4471, -78.0143, -9.12139, 0.56", "-14.4839, -79.835, -10.5094, 0.56", "-14.4465, -82.3612, -12.6195, 0.56", "-14.379, -84.6367, -14.5916, 0.56", "-14.2515, -86.6563, -16.3049, 0.56", "-15.2617, -94.2997, -20.5414, 0.56" ],
    "parent" : "dend_28",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "-13.676, -67.2869, -1.74871, 0.83", "-14.7671, -68.911, -2.46581, 0.83", "-16.2316, -71.0242, -3.60093, 0.83", "-18.9695, -74.846, -5.88293, 0.83", "-22.0408, -79.0242, -8.48314, 0.83", "-23.9919, -81.8067, -10.1854, 0.83", "-25.8609, -84.4997, -11.8516, 0.83", "-27.5674, -87.1267, -13.5657, 0.83", "-29.9675, -90.8981, -16.1373, 0.56", "-31.0182, -92.5756, -17.324, 0.56", "-33.3304, -95.7315, -19.4819, 0.56", "-35.5969, -98.2498, -21.1513, 0.56", "-38.9075, -101.536, -23.3044, 0.56", "-42.5099, -104.574, -25.196, 0.56", "-45.1323, -106.357, -26.3266, 0.56", "-51.6188, -109.826, -28.6478, 0.56", "-56.7928, -112.031, -30.3011, 0.56", "-60.1505, -113.272, -31.1761, 0.56", "-65.9718, -115.167, -32.4176, 0.56", "-69.2965, -116.245, -32.9916, 0.56", "-73.4182, -117.495, -33.4717, 0.56", "-76.1231, -118.278, -33.6406, 0.56", "-79.5104, -119.276, -33.584, 0.56", "-82.3786, -120.095, -33.4203, 0.56", "-84.6927, -120.702, -33.3575, 0.56", "-88.6801, -121.582, -33.182, 0.56", "-93.8083, -122.413, -32.8648, 0.56", "-95.5998, -122.576, -32.794, 0.56", "-100.107, -122.673, -32.7787, 0.56", "-104.625, -122.318, -32.5129, 0.56", "-110.136, -121.492, -32.0925, 0.56", "-112.84, -121.001, -31.866, 0.56", "-117.365, -120.046, -31.4187, 0.28", "-120.335, -119.445, -31.2861, 1.39", "-130.788, -117.34, -31.2698, 0.28", "-132.887, -116.922, -31.2784, 1.67", "-142.546, -114.928, -31.6142, 0.28", "-144.413, -114.576, -31.7225, 1.39", "-156.502, -112.579, -32.7621, 0.28", "-158.572, -112.338, -33.1206, 0.56" ],
    "parent" : "dend_28",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "109.516, -67.2393, 33.4611, 0.28", "110.334, -66.2821, 35.0177, 0.28", "111.278, -65.3537, 36.659, 0.56", "112.54, -64.1526, 38.7949, 0.28", "113.485, -63.3132, 40.2783, 0.83", "114.733, -62.2266, 42.1418, 0.28", "115.108, -61.9217, 42.6597, 1.11", "116.658, -60.8088, 44.6315, 0.56", "118.004, -59.9214, 46.1397, 0.28", "118.836, -59.3826, 46.9954, 0.28", "120.458, -58.289, 48.6855, 0.83", "122.913, -56.5618, 51.2874, 0.28", "123.228, -56.3314, 51.631, 0.83", "125.702, -54.4081, 54.5018, 0.28", "126.778, -53.5014, 55.8761, 0.83", "127.971, -52.3894, 57.5512, 0.28", "128.22, -52.1331, 57.9305, 0.83", "129.303, -50.8348, 59.7381, 0.28", "130.365, -49.3249, 61.3098, 1.39", "132.063, -46.6259, 63.5037, 0.28", "132.339, -46.1878, 63.7901, 0.83", "133.547, -44.2478, 64.831, 0.28", "134.3, -42.9891, 65.4009, 1.67", "137.955, -36.7227, 67.7536, 0.28", "138.601, -35.6024, 68.1211, 1.39", "141.178, -31.1189, 69.4343, 0.28", "141.815, -29.975, 69.7353, 1.11", "143.554, -26.8102, 70.4644, 0.28", "143.735, -26.4821, 70.5393, 0.83", "144.554, -24.9989, 70.8807, 0.28", "145.526, -23.1925, 71.3177, 0.83", "148.141, -18.1299, 72.576, 0.28", "149.047, -16.3045, 73.0984, 1.11", "152.637, -8.40668, 75.6774, 0.28", "153.131, -7.23905, 76.1265, 1.11", "154.104, -4.69403, 77.2407, 0.28", "154.498, -3.40472, 77.9296, 1.11", "154.912, -1.17382, 79.4321, 0.28", "155.004, 1.06217, 81.0778, 1.11", "154.703, 2.94924, 82.6565, 0.28", "154.573, 3.59266, 83.1868, 0.56", "153.985, 6.27089, 85.3682, 0.28", "153.664, 7.79761, 86.5975, 1.39", "153.425, 9.10666, 87.6385, 0.28", "153.238, 10.4081, 88.713, 0.83", "153.2, 10.6631, 88.9205, 1.11", "152.962, 12.8587, 90.8627, 0.28", "152.95, 13.2394, 91.2411, 0.56", "153.054, 15.2839, 93.5572, 0.28", "153.109, 15.8354, 94.273, 0.83" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "109.516, -67.2393, 33.4611, 0.28", "114.765, -67.5019, 34.1721, 0.28", "115.258, -67.4898, 34.1924, 0.56", "117.027, -67.3786, 34.1928, 0.28", "118.011, -67.2398, 34.1489, 0.56", "119.423, -66.9819, 34.064, 0.28", "120.491, -66.74, 33.9752, 0.56", "122.4, -66.0715, 33.7497, 0.28", "123.347, -65.6953, 33.7107, 0.83", "126.606, -64.3074, 33.8268, 0.28", "126.921, -64.1686, 33.8583, 0.56", "128.453, -63.5005, 34.0503, 0.28", "130.508, -62.5821, 34.3943, 0.83", "136.592, -59.8359, 35.697, 0.28", "137.744, -59.3063, 35.9716, 0.28", "138.769, -58.8473, 36.2713, 0.83" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_12", "dend_5", "dend_0", "dend_22", "dend_13", "dend_7", "dend_6", "dend_4", "dend_1", "dend_26", "dend_23", "dend_17", "dend_14", "dend_9", "dend_8", "dend_3", "dend_2", "dend_28", "dend_27", "dend_25", "dend_24", "dend_19", "dend_18", "dend_16", "dend_15", "dend_11", "dend_10", "dend_30", "dend_29", "dend_21", "dend_20" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_12", "dend_5", "dend_0", "dend_22", "dend_13", "dend_7", "dend_6", "dend_4", "dend_1", "dend_26", "dend_23", "dend_17", "dend_14", "dend_9", "dend_8", "dend_3", "dend_2", "dend_28", "dend_27", "dend_25", "dend_24", "dend_19", "dend_18", "dend_16", "dend_15", "dend_11", "dend_10", "dend_30", "dend_29", "dend_21", "dend_20" ]
  }, {
    "name" : "ModelViewParmSubset_5",
    "groups" : [ ],
    "sections" : [ "dend_12", "dend_5", "dend_0", "axon_0", "dend_22", "dend_13", "dend_7", "dend_6", "dend_4", "dend_1", "axon_1", "dend_26", "dend_23", "dend_17", "dend_14", "dend_9", "dend_8", "dend_3", "dend_2", "dend_28", "dend_27", "dend_25", "dend_24", "dend_19", "dend_18", "dend_16", "dend_15", "dend_11", "dend_10", "dend_30", "dend_29", "dend_21", "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_12", "dend_12", "dend_12", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_4", "dend_4", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_26", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_17", "dend_17", "dend_17", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_28", "dend_28", "dend_28", "dend_28", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_11", "dend_11", "dend_11", "dend_11", "dend_10", "dend_10", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.993125",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.005611",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.068459995",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.517764",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "6.3E-5",
    "erev" : "-64.6017"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "3.45E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.077616",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.002099",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "1.13999995E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.26087198",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "2.0E-5",
    "erev" : "-69.78141"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.395881",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009986",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "5.0100003E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.009728",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "2.7999999E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cACint209_L23_BTC_59062d6e7d_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_12, id: dend_12, parent: soma_0
create dend_12
public dend_12
// Section: dend_5, id: dend_5, parent: soma_0
create dend_5
public dend_5
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_22, id: dend_22, parent: dend_12
create dend_22
public dend_22
// Section: dend_13, id: dend_13, parent: dend_12
create dend_13
public dend_13
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_4, id: dend_4, parent: dend_0
create dend_4
public dend_4
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_26, id: dend_26, parent: dend_22
create dend_26
public dend_26
// Section: dend_23, id: dend_23, parent: dend_22
create dend_23
public dend_23
// Section: dend_17, id: dend_17, parent: dend_13
create dend_17
public dend_17
// Section: dend_14, id: dend_14, parent: dend_13
create dend_14
public dend_14
// Section: dend_9, id: dend_9, parent: dend_7
create dend_9
public dend_9
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_3, id: dend_3, parent: dend_1
create dend_3
public dend_3
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_28, id: dend_28, parent: dend_26
create dend_28
public dend_28
// Section: dend_27, id: dend_27, parent: dend_26
create dend_27
public dend_27
// Section: dend_25, id: dend_25, parent: dend_23
create dend_25
public dend_25
// Section: dend_24, id: dend_24, parent: dend_23
create dend_24
public dend_24
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_16, id: dend_16, parent: dend_14
create dend_16
public dend_16
// Section: dend_15, id: dend_15, parent: dend_14
create dend_15
public dend_15
// Section: dend_11, id: dend_11, parent: dend_9
create dend_11
public dend_11
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10
// Section: dend_30, id: dend_30, parent: dend_28
create dend_30
public dend_30
// Section: dend_29, id: dend_29, parent: dend_28
create dend_29
public dend_29
// Section: dend_21, id: dend_21, parent: dend_19
create dend_21
public dend_21
// Section: dend_20, id: dend_20, parent: dend_19
create dend_20
public dend_20

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_12, dend_5, dend_0, dend_22, dend_13, dend_7, dend_6, dend_4, dend_1, dend_26, dend_23, dend_17, dend_14, dend_9, dend_8, dend_3, dend_2, dend_28, dend_27, dend_25, dend_24, dend_19, dend_18, dend_16, dend_15, dend_11, dend_10, dend_30, dend_29, dend_21, dend_20]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_12, dend_5, dend_0, dend_22, dend_13, dend_7, dend_6, dend_4, dend_1, dend_26, dend_23, dend_17, dend_14, dend_9, dend_8, dend_3, dend_2, dend_28, dend_27, dend_25, dend_24, dend_19, dend_18, dend_16, dend_15, dend_11, dend_10, dend_30, dend_29, dend_21, dend_20]}
objref ModelViewParmSubset_4
// Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_12, dend_5, dend_0, axon_0, dend_22, dend_13, dend_7, dend_6, dend_4, dend_1, axon_1, dend_26, dend_23, dend_17, dend_14, dend_9, dend_8, dend_3, dend_2, dend_28, dend_27, dend_25, dend_24, dend_19, dend_18, dend_16, dend_15, dend_11, dend_10, dend_30, dend_29, dend_21, dend_20]}
objref ModelViewParmSubset_5
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_34
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_12, dend_12, dend_12, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_26, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_17, dend_17, dend_17, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_11, dend_11, dend_11, dend_11, dend_10, dend_10, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_12(0), soma_0(0.4500012654214236)
    connect dend_5(0), soma_0(0.4500012654214236)
    connect dend_0(0), soma_0(0.4500012654214236)
    connect axon_0(0), soma_0(1.0)
    connect dend_22(0), dend_12(1.0)
    connect dend_13(0), dend_12(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_4(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_26(0), dend_22(1.0)
    connect dend_23(0), dend_22(1.0)
    connect dend_17(0), dend_13(1.0)
    connect dend_14(0), dend_13(1.0)
    connect dend_9(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_3(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_28(0), dend_26(1.0)
    connect dend_27(0), dend_26(1.0)
    connect dend_25(0), dend_23(1.0)
    connect dend_24(0), dend_23(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_16(0), dend_14(1.0)
    connect dend_15(0), dend_14(1.0)
    connect dend_11(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)
    connect dend_30(0), dend_28(1.0)
    connect dend_29(0), dend_28(1.0)
    connect dend_21(0), dend_19(1.0)
    connect dend_20(0), dend_19(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -0.351257, 12.3292, -0.186838, 3.86652 ) }
    soma_0 { pt3dadd( -0.347473, 10.9465, -0.165007, 5.23139 ) }
    soma_0 { pt3dadd( -0.343689, 9.56389, -0.143175, 6.66046 ) }
    soma_0 { pt3dadd( -0.339906, 8.18126, -0.121344, 7.80859 ) }
    soma_0 { pt3dadd( -0.336122, 6.79862, -0.099512, 8.71713 ) }
    soma_0 { pt3dadd( -0.332338, 5.41599, -0.0776805, 9.2498 ) }
    soma_0 { pt3dadd( -0.328554, 4.03335, -0.055849, 9.72954 ) }
    soma_0 { pt3dadd( -0.32477, 2.65072, -0.0340174, 10.2491 ) }
    soma_0 { pt3dadd( -0.320986, 1.26808, -0.0121859, 10.9027 ) }
    soma_0 { pt3dadd( -0.317202, -0.11455, 0.0096456, 11.3454 ) }
    soma_0 { pt3dadd( -0.313418, -1.49719, 0.0314771, 11.4682 ) }
    soma_0 { pt3dadd( -0.309634, -2.87982, 0.0533086, 11.591 ) }
    soma_0 { pt3dadd( -0.30585, -4.26246, 0.0751402, 11.5993 ) }
    soma_0 { pt3dadd( -0.302066, -5.64509, 0.0969717, 11.088 ) }
    soma_0 { pt3dadd( -0.298282, -7.02772, 0.118803, 10.4157 ) }
    soma_0 { pt3dadd( -0.294499, -8.41036, 0.140635, 8.88199 ) }
    soma_0 { pt3dadd( -0.290715, -9.79299, 0.162466, 8.06564 ) }
    soma_0 { pt3dadd( -0.286931, -11.1756, 0.184298, 6.905 ) }
    soma_0 { pt3dadd( -0.283147, -12.5583, 0.206129, 5.67041 ) }
    soma_0 { pt3dadd( -0.279363, -13.9409, 0.227961, 4.43581 ) }
    soma_0 { pt3dadd( -0.275579, -15.3235, 0.249792, 2.79205 ) }
    // Section: dend_12, id: dend_12, parent: soma_0 (entry count 21/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -0.741306, -16.0575, 0.99962, 2.78 ) }
    dend_12 { pt3dadd( -0.499008, -19.1447, 0.565374, 2.5 ) }
    dend_12 { pt3dadd( -0.313591, -21.5071, 0.233069, 3.05 ) }
    dend_12 { pt3dadd( -0.00773988, -25.4041, -0.31508, 3.05 ) }
    // Section: dend_5, id: dend_5, parent: soma_0 (entry count 25/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -2.45131, 13.6785, -2.00038, 2.22 ) }
    dend_5 { pt3dadd( -3.70062, 19.1478, -1.99755, 1.39 ) }
    dend_5 { pt3dadd( -4.5577, 23.0829, -1.91578, 1.39 ) }
    dend_5 { pt3dadd( -5.21619, 26.1061, -1.85296, 1.39 ) }
    dend_5 { pt3dadd( -5.88573, 29.1801, -1.78909, 1.11 ) }
    dend_5 { pt3dadd( -6.36782, 31.3935, -1.7431, 1.11 ) }
    dend_5 { pt3dadd( -7.03846, 34.4725, -1.67912, 1.11 ) }
    dend_5 { pt3dadd( -7.79765, 38.7208, -1.44, 1.67 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 33/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -3.15131, -13.422, 4.63962, 1.11 ) }
    dend_0 { pt3dadd( -4.5377, -13.9971, 5.8529, 1.11 ) }
    dend_0 { pt3dadd( -6.68043, -15.0069, 8.05339, 1.11 ) }
    dend_0 { pt3dadd( -7.54016, -15.4326, 9.11333, 1.11 ) }
    dend_0 { pt3dadd( -9.14201, -16.2046, 11.3484, 1.11 ) }
    dend_0 { pt3dadd( -11.0788, -16.9189, 14.3149, 1.11 ) }
    dend_0 { pt3dadd( -12.8072, -17.209, 17.194, 1.11 ) }
    dend_0 { pt3dadd( -14.011, -16.9304, 19.6725, 1.11 ) }
    dend_0 { pt3dadd( -15.257, -16.0127, 22.831, 1.11 ) }
    dend_0 { pt3dadd( -15.7398, -15.4364, 24.054, 1.11 ) }
    dend_0 { pt3dadd( -16.8184, -13.5446, 26.7279, 1.11 ) }
    dend_0 { pt3dadd( -18.1106, -10.8409, 29.5797, 1.11 ) }
    dend_0 { pt3dadd( -19.141, -8.55985, 31.6078, 0.56 ) }
    dend_0 { pt3dadd( -20.0112, -6.77404, 33.0168, 1.11 ) }
    dend_0 { pt3dadd( -21.7158, -3.57649, 35.4007, 0.83 ) }
    dend_0 { pt3dadd( -22.5088, -2.32805, 36.3744, 0.83 ) }
    dend_0 { pt3dadd( -23.5557, -0.9518, 37.5422, 0.83 ) }
    dend_0 { pt3dadd( -24.6059, 0.275585, 38.6318, 2.22 ) }
    dend_0 { pt3dadd( -26.285, 2.2118, 40.3771, 0.83 ) }
    dend_0 { pt3dadd( -27.6353, 3.99112, 41.8807, 0.28 ) }
    dend_0 { pt3dadd( -28.4229, 5.16409, 42.8903, 0.56 ) }
    dend_0 { pt3dadd( -29.4044, 6.73295, 44.3306, 0.56 ) }
    dend_0 { pt3dadd( -30.6251, 8.9427, 46.28, 1.11 ) }
    dend_0 { pt3dadd( -31.7342, 11.0632, 48.1452, 0.28 ) }
    dend_0 { pt3dadd( -32.2789, 12.1966, 49.1547, 0.28 ) }
    dend_0 { pt3dadd( -33.1389, 14.1774, 50.9139, 1.94 ) }
    dend_0 { pt3dadd( -34.5266, 18.05, 54.3452, 0.28 ) }
    dend_0 { pt3dadd( -35.0312, 19.7254, 55.8359, 2.78 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 61/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( -0.275579, -15.3235, 0.249792, 0.81257 ) }
    axon_0 { pt3dadd( -0.234528, -30.3234, 0.249792, 0.81257 ) }
    axon_0 { pt3dadd( -0.193476, -45.3234, 0.249792, 0.81257 ) }
    // Section: dend_22, id: dend_22, parent: dend_12 (entry count 64/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( -0.00773988, -25.4041, -0.31508, 2.22 ) }
    dend_22 { pt3dadd( -1.67036, -31.0856, 0.266768, 2.22 ) }
    dend_22 { pt3dadd( -4.3267, -40.1629, 1.19637, 2.22 ) }
    dend_22 { pt3dadd( -5.83833, -45.3285, 1.72538, 1.11 ) }
    dend_22 { pt3dadd( -6.6507, -48.1045, 2.00968, 1.11 ) }
    dend_22 { pt3dadd( -8.06362, -52.9328, 2.50414, 1.11 ) }
    dend_22 { pt3dadd( -9.72041, -58.5943, 3.08394, 1.39 ) }
    // Section: dend_13, id: dend_13, parent: dend_12 (entry count 71/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -0.00773988, -25.4041, -0.31508, 0.83 ) }
    dend_13 { pt3dadd( 2.28848, -28.219, -2.234, 0.83 ) }
    dend_13 { pt3dadd( 5.22082, -31.4274, -4.47566, 0.83 ) }
    dend_13 { pt3dadd( 7.94583, -34.1103, -6.27254, 0.83 ) }
    dend_13 { pt3dadd( 9.78716, -35.7902, -7.21441, 0.83 ) }
    dend_13 { pt3dadd( 13.432, -39.1574, -8.67137, 0.83 ) }
    dend_13 { pt3dadd( 17.7021, -43.3348, -10.017, 0.83 ) }
    dend_13 { pt3dadd( 20.0328, -45.7554, -10.4837, 0.83 ) }
    dend_13 { pt3dadd( 22.8805, -48.5629, -10.8602, 0.83 ) }
    dend_13 { pt3dadd( 26.9348, -52.4926, -11.107, 0.83 ) }
    dend_13 { pt3dadd( 30.7943, -56.3691, -11.0537, 0.83 ) }
    dend_13 { pt3dadd( 33.4869, -59.4265, -10.606, 0.83 ) }
    dend_13 { pt3dadd( 35.1846, -61.4374, -10.038, 0.83 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 84/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -7.79765, 38.7208, -1.44, 1.11 ) }
    dend_7 { pt3dadd( -6.69966, 41.8581, -0.876743, 1.11 ) }
    dend_7 { pt3dadd( -5.92325, 44.2131, -0.605338, 0.83 ) }
    dend_7 { pt3dadd( -5.12395, 47.6935, -0.437556, 1.11 ) }
    dend_7 { pt3dadd( -4.21595, 52.5334, -0.446123, 0.83 ) }
    dend_7 { pt3dadd( -3.77905, 55.0299, -0.498528, 0.83 ) }
    dend_7 { pt3dadd( -2.88789, 60.1221, -0.605422, 0.83 ) }
    dend_7 { pt3dadd( -1.87731, 67.1591, -0.904073, 0.83 ) }
    dend_7 { pt3dadd( -0.965551, 74.8896, -1.36848, 0.83 ) }
    dend_7 { pt3dadd( -0.434384, 80.4211, -1.84101, 0.83 ) }
    dend_7 { pt3dadd( -0.127767, 83.3758, -2.20323, 1.39 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 95/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -7.79765, 38.7208, -1.44, 0.56 ) }
    dend_6 { pt3dadd( -9.2652, 41.1396, -0.950808, 0.56 ) }
    dend_6 { pt3dadd( -10.1263, 42.4097, -0.673846, 0.56 ) }
    dend_6 { pt3dadd( -14.0514, 47.7182, 0.533694, 0.83 ) }
    dend_6 { pt3dadd( -18.4672, 53.3711, 1.86633, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_6 { pt3dadd( -19.967, 55.4902, 2.34723, 0.83 ) }
    dend_6 { pt3dadd( -22.5756, 59.2028, 3.12487, 0.83 ) }
    dend_6 { pt3dadd( -25.3382, 63.126, 3.84883, 0.83 ) }
    dend_6 { pt3dadd( -26.3518, 64.6039, 4.06964, 0.83 ) }
    dend_6 { pt3dadd( -28.3051, 67.4149, 4.29615, 0.83 ) }
    dend_6 { pt3dadd( -32.4203, 73.354, 4.59642, 0.83 ) }
    dend_6 { pt3dadd( -34.5542, 76.3732, 4.64724, 0.83 ) }
    dend_6 { pt3dadd( -37.5737, 80.627, 4.60466, 0.83 ) }
    dend_6 { pt3dadd( -42.0129, 86.9792, 4.37159, 0.83 ) }
    dend_6 { pt3dadd( -47.402, 94.5248, 3.94215, 0.83 ) }
    dend_6 { pt3dadd( -48.7951, 96.3771, 3.79907, 0.83 ) }
    dend_6 { pt3dadd( -50.6869, 98.6601, 3.62675, 1.11 ) }
    dend_6 { pt3dadd( -53.1847, 101.82, 3.51851, 0.83 ) }
    dend_6 { pt3dadd( -54.9366, 104.087, 3.55724, 1.11 ) }
    dend_6 { pt3dadd( -58.358, 108.477, 3.91782, 0.83 ) }
    dend_6 { pt3dadd( -59.8565, 110.491, 4.24057, 0.83 ) }
    dend_6 { pt3dadd( -63.9801, 116.262, 5.41107, 0.83 ) }
    dend_6 { pt3dadd( -66.551, 120.111, 6.39894, 0.83 ) }
    dend_6 { pt3dadd( -68.9743, 123.881, 7.53577, 0.83 ) }
    dend_6 { pt3dadd( -70.8115, 126.798, 8.52394, 0.83 ) }
    dend_6 { pt3dadd( -72.1632, 128.947, 9.35906, 1.11 ) }
    dend_6 { pt3dadd( -73.308, 130.808, 10.0431, 0.83 ) }
    dend_6 { pt3dadd( -74.5478, 132.78, 10.6408, 0.83 ) }
    dend_6 { pt3dadd( -76.9147, 136.225, 11.263, 0.83 ) }
    dend_6 { pt3dadd( -79.0628, 139.208, 11.5147, 0.28 ) }
    dend_6 { pt3dadd( -81.4133, 142.182, 11.4497, 1.11 ) }
    dend_6 { pt3dadd( -83.6572, 144.751, 11.2097, 0.28 ) }
    dend_6 { pt3dadd( -86.5201, 147.85, 10.6753, 0.83 ) }
    dend_6 { pt3dadd( -89.1097, 150.539, 10.0415, 0.28 ) }
    dend_6 { pt3dadd( -91.7844, 153.279, 9.22808, 0.28 ) }
    dend_6 { pt3dadd( -96.8494, 158.37, 7.56912, 0.83 ) }
    dend_6 { pt3dadd( -99.9975, 161.467, 6.52358, 0.28 ) }
    dend_6 { pt3dadd( -102.182, 163.618, 5.88488, 0.56 ) }
    dend_6 { pt3dadd( -103.738, 165.207, 5.46858, 0.56 ) }
    dend_6 { pt3dadd( -106.806, 168.463, 4.70253, 0.83 ) }
    dend_6 { pt3dadd( -108.573, 170.432, 4.21915, 0.28 ) }
    dend_6 { pt3dadd( -109.915, 172.117, 3.85703, 0.83 ) }
    dend_6 { pt3dadd( -111.946, 174.749, 3.30476, 0.28 ) }
    dend_6 { pt3dadd( -113.403, 176.572, 2.89057, 0.83 ) }
    dend_6 { pt3dadd( -115.102, 178.493, 2.33588, 0.28 ) }
    dend_6 { pt3dadd( -116.831, 180.23, 1.84036, 0.83 ) }
    dend_6 { pt3dadd( -118.959, 182.305, 1.19115, 0.28 ) }
    dend_6 { pt3dadd( -120.471, 183.686, 0.739319, 0.28 ) }
    dend_6 { pt3dadd( -123.674, 186.333, -0.178406, 0.83 ) }
    dend_6 { pt3dadd( -129.357, 190.747, -1.66892, 0.56 ) }
    dend_6 { pt3dadd( -133.185, 193.555, -2.51284, 0.28 ) }
    // Section: dend_4, id: dend_4, parent: dend_0 (entry count 46/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -35.0312, 19.7254, 55.8359, 0.28 ) }
    dend_4 { pt3dadd( -39.7537, 20.5205, 57.415, 0.28 ) }
    dend_4 { pt3dadd( -41.1618, 20.7575, 57.8858, 1.39 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 49/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -35.0312, 19.7254, 55.8359, 0.28 ) }
    dend_1 { pt3dadd( -34.9017, 22.5816, 57.7008, 0.28 ) }
    dend_1 { pt3dadd( -34.8646, 23.2975, 58.1743, 0.56 ) }
    dend_1 { pt3dadd( -34.7315, 25.9604, 59.8507, 0.28 ) }
    dend_1 { pt3dadd( -34.6814, 27.6264, 60.898, 1.11 ) }
    dend_1 { pt3dadd( -34.6697, 30.2867, 62.5056, 0.28 ) }
    dend_1 { pt3dadd( -34.6946, 30.9551, 62.9026, 0.56 ) }
    dend_1 { pt3dadd( -35.1146, 34.3446, 64.5224, 0.28 ) }
    dend_1 { pt3dadd( -35.3839, 35.9465, 65.1629, 1.67 ) }
    dend_1 { pt3dadd( -36.0836, 39.1162, 66.4501, 0.28 ) }
    dend_1 { pt3dadd( -36.4976, 40.7176, 67.0911, 1.39 ) }
    dend_1 { pt3dadd( -37.1503, 42.9654, 68.0197, 0.28 ) }
    dend_1 { pt3dadd( -39.7021, 50.9156, 71.4933, 0.28 ) }
    dend_1 { pt3dadd( -40.0508, 51.9456, 72.1189, 1.39 ) }
    dend_1 { pt3dadd( -41.8142, 57.2513, 75.948, 0.28 ) }
    dend_1 { pt3dadd( -42.0563, 58.0997, 76.7861, 0.83 ) }
    dend_1 { pt3dadd( -42.5741, 60.163, 79.2186, 0.28 ) }
    dend_1 { pt3dadd( -42.8275, 61.2487, 80.6878, 1.94 ) }
    dend_1 { pt3dadd( -44.1421, 67.0816, 89.7656, 0.28 ) }
    dend_1 { pt3dadd( -44.4104, 68.2629, 91.6332, 1.94 ) }
    dend_1 { pt3dadd( -46.0683, 75.3015, 102.681, 0.28 ) }
    dend_1 { pt3dadd( -46.2428, 75.9852, 103.703, 1.67 ) }
    dend_1 { pt3dadd( -46.8206, 78.062, 106.595, 0.28 ) }
    dend_1 { pt3dadd( -46.9154, 78.3652, 106.965, 0.56 ) }
    dend_1 { pt3dadd( -47.7136, 80.4616, 108.934, 0.28 ) }
    dend_1 { pt3dadd( -48.1216, 81.3757, 109.724, 2.22 ) }
    dend_1 { pt3dadd( -49.8501, 84.6928, 111.866, 0.28 ) }
    dend_1 { pt3dadd( -50.0403, 85.0642, 112.102, 0.56 ) }
    dend_1 { pt3dadd( -52.5505, 90.1075, 115.16, 0.28 ) }
    dend_1 { pt3dadd( -53.0876, 91.2057, 115.815, 1.11 ) }
    dend_1 { pt3dadd( -54.1295, 93.416, 117.079, 0.28 ) }
    dend_1 { pt3dadd( -54.6232, 94.4644, 117.738, 1.94 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 81/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( -0.193476, -45.3234, 0.249792, 0.56 ) }
    axon_1 { pt3dadd( -0.152425, -60.3233, 0.249792, 0.56 ) }
    axon_1 { pt3dadd( -0.111373, -75.3233, 0.249792, 0.56 ) }
    // Section: dend_26, id: dend_26, parent: dend_22 (entry count 84/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( -9.72041, -58.5943, 3.08394, 1.11 ) }
    dend_26 { pt3dadd( -11.0271, -61.6425, 2.78721, 1.11 ) }
    // Section: dend_23, id: dend_23, parent: dend_22 (entry count 86/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( -9.72041, -58.5943, 3.08394, 0.56 ) }
    dend_23 { pt3dadd( -10.504, -59.0224, 4.42784, 0.56 ) }
    dend_23 { pt3dadd( -12.6084, -60.2249, 8.04344, 0.56 ) }
    dend_23 { pt3dadd( -14.8538, -61.6393, 12.1625, 0.56 ) }
    dend_23 { pt3dadd( -15.7667, -62.2771, 13.8629, 0.56 ) }
    dend_23 { pt3dadd( -16.7696, -63.0441, 15.9152, 0.56 ) }
    dend_23 { pt3dadd( -17.918, -63.962, 18.3829, 0.56 ) }
    dend_23 { pt3dadd( -19.3507, -65.2773, 21.7333, 0.83 ) }
    dend_23 { pt3dadd( -21.6892, -67.613, 27.2497, 0.28 ) }
    dend_23 { pt3dadd( -22.1578, -68.1197, 28.3788, 1.11 ) }
    dend_23 { pt3dadd( -24.7775, -70.8883, 34.4789, 0.28 ) }
    dend_23 { pt3dadd( -25.318, -71.5037, 35.7892, 1.39 ) }
    dend_23 { pt3dadd( -26.7853, -73.3015, 39.3835, 0.28 ) }
    dend_23 { pt3dadd( -27.1089, -73.7787, 40.2286, 1.11 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_23 { pt3dadd( -27.6525, -74.6816, 41.679, 0.28 ) }
    dend_23 { pt3dadd( -28.1075, -75.4534, 42.8919, 0.56 ) }
    dend_23 { pt3dadd( -29.1216, -77.3807, 45.5031, 0.28 ) }
    dend_23 { pt3dadd( -29.831, -78.8688, 47.5125, 1.67 ) }
    dend_23 { pt3dadd( -31.2209, -82.2892, 52.3104, 0.28 ) }
    dend_23 { pt3dadd( -31.4308, -82.8983, 53.2168, 0.83 ) }
    // Section: dend_17, id: dend_17, parent: dend_13 (entry count 6/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 35.1846, -61.4374, -10.038, 0.83 ) }
    dend_17 { pt3dadd( 37.0989, -63.2659, -9.73741, 0.83 ) }
    dend_17 { pt3dadd( 40.6332, -66.6419, -9.18244, 0.83 ) }
    dend_17 { pt3dadd( 43.087, -68.9857, -8.79713, 0.83 ) }
    // Section: dend_14, id: dend_14, parent: dend_13 (entry count 10/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 35.1846, -61.4374, -10.038, 0.56 ) }
    dend_14 { pt3dadd( 36.2312, -63.3018, -9.8205, 0.56 ) }
    dend_14 { pt3dadd( 37.0763, -64.7438, -9.61938, 0.83 ) }
    dend_14 { pt3dadd( 38.4402, -66.9461, -9.405, 0.56 ) }
    dend_14 { pt3dadd( 41.0875, -71.4075, -9.12134, 0.56 ) }
    dend_14 { pt3dadd( 43.7475, -75.9778, -8.88997, 0.56 ) }
    dend_14 { pt3dadd( 44.8672, -77.808, -8.81113, 0.56 ) }
    dend_14 { pt3dadd( 45.8253, -79.2398, -8.76695, 0.56 ) }
    dend_14 { pt3dadd( 48.145, -82.5883, -8.81281, 0.56 ) }
    dend_14 { pt3dadd( 51.8342, -87.7824, -9.10839, 0.56 ) }
    dend_14 { pt3dadd( 52.6549, -88.8907, -9.22667, 0.28 ) }
    dend_14 { pt3dadd( 53.983, -90.7825, -9.58707, 0.28 ) }
    dend_14 { pt3dadd( 55.9549, -93.7676, -10.1823, 0.56 ) }
    dend_14 { pt3dadd( 57.7128, -96.4038, -10.7587, 0.28 ) }
    dend_14 { pt3dadd( 58.517, -97.6417, -11.0277, 0.56 ) }
    dend_14 { pt3dadd( 59.7049, -99.5097, -11.4644, 0.56 ) }
    dend_14 { pt3dadd( 60.9451, -101.713, -11.9057, 0.56 ) }
    dend_14 { pt3dadd( 62.089, -104.147, -12.2543, 0.56 ) }
    dend_14 { pt3dadd( 63.2603, -106.916, -12.5736, 0.56 ) }
    dend_14 { pt3dadd( 63.7546, -108.172, -12.6231, 0.56 ) }
    dend_14 { pt3dadd( 64.3754, -110.486, -12.723, 0.56 ) }
    dend_14 { pt3dadd( 64.9156, -113.146, -12.8282, 0.56 ) }
    dend_14 { pt3dadd( 65.4061, -116.546, -13.0, 0.56 ) }
    dend_14 { pt3dadd( 65.7658, -119.969, -13.1829, 0.56 ) }
    dend_14 { pt3dadd( 66.0656, -123.698, -13.4327, 0.28 ) }
    dend_14 { pt3dadd( 66.8723, -136.757, -14.4352, 0.28 ) }
    dend_14 { pt3dadd( 66.9705, -138.793, -14.6049, 0.56 ) }
    dend_14 { pt3dadd( 67.2061, -145.343, -15.2035, 0.28 ) }
    dend_14 { pt3dadd( 67.2595, -147.607, -15.4323, 0.56 ) }
    dend_14 { pt3dadd( 67.2973, -151.479, -15.8332, 0.28 ) }
    dend_14 { pt3dadd( 67.3424, -156.905, -16.6186, 0.56 ) }
    dend_14 { pt3dadd( 71.979, -167.841, -19.1439, 0.56 ) }
    dend_14 { pt3dadd( 75.2483, -179.584, -19.9521, 0.56 ) }
    dend_14 { pt3dadd( 77.6213, -191.317, -22.3579, 0.56 ) }
    dend_14 { pt3dadd( 78.7835, -203.485, -23.2091, 0.56 ) }
    dend_14 { pt3dadd( 79.0028, -215.717, -23.9917, 0.56 ) }
    dend_14 { pt3dadd( 81.2682, -227.739, -23.4686, 0.56 ) }
    dend_14 { pt3dadd( 84.6018, -239.263, -21.2063, 0.56 ) }
    // Section: dend_9, id: dend_9, parent: dend_7 (entry count 48/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -0.127767, 83.3758, -2.20323, 0.56 ) }
    dend_9 { pt3dadd( 0.88333, 84.8748, -3.22586, 0.56 ) }
    dend_9 { pt3dadd( 2.33298, 87.024, -4.69205, 0.56 ) }
    dend_9 { pt3dadd( 3.25771, 88.3949, -5.62732, 0.83 ) }
    dend_9 { pt3dadd( 4.99611, 90.9722, -7.38554, 0.83 ) }
    dend_9 { pt3dadd( 6.11932, 92.6374, -8.52157, 0.56 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 54/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -0.127767, 83.3758, -2.20323, 0.83 ) }
    dend_8 { pt3dadd( -0.976132, 85.1672, -0.453441, 0.83 ) }
    dend_8 { pt3dadd( -1.58309, 86.3367, 0.750781, 0.56 ) }
    dend_8 { pt3dadd( -2.44128, 87.8023, 2.28184, 0.56 ) }
    dend_8 { pt3dadd( -2.69433, 88.2487, 2.71756, 0.56 ) }
    dend_8 { pt3dadd( -3.89965, 90.4673, 5.15789, 0.56 ) }
    dend_8 { pt3dadd( -5.61706, 93.9168, 8.94944, 0.56 ) }
    dend_8 { pt3dadd( -6.25685, 95.4553, 10.698, 0.56 ) }
    dend_8 { pt3dadd( -6.82493, 96.9526, 12.3533, 0.28 ) }
    dend_8 { pt3dadd( -7.31351, 98.237, 13.6714, 0.83 ) }
    dend_8 { pt3dadd( -8.49125, 101.829, 17.0905, 0.56 ) }
    dend_8 { pt3dadd( -8.89536, 103.536, 18.4143, 0.83 ) }
    dend_8 { pt3dadd( -9.29189, 105.313, 19.6294, 0.56 ) }
    dend_8 { pt3dadd( -9.41903, 106.119, 20.1275, 0.56 ) }
    dend_8 { pt3dadd( -9.70971, 108.592, 21.5664, 0.56 ) }
    dend_8 { pt3dadd( -10.1453, 111.497, 23.1046, 0.56 ) }
    dend_8 { pt3dadd( -10.4811, 113.741, 24.191, 0.83 ) }
    dend_8 { pt3dadd( -10.8466, 115.921, 25.5246, 0.28 ) }
    dend_8 { pt3dadd( -11.0499, 117.152, 26.3877, 0.83 ) }
    dend_8 { pt3dadd( -11.2486, 118.803, 27.7155, 0.56 ) }
    dend_8 { pt3dadd( -11.3425, 119.81, 28.6037, 0.56 ) }
    dend_8 { pt3dadd( -11.6223, 123.155, 31.6192, 0.56 ) }
    dend_8 { pt3dadd( -11.7958, 125.172, 33.5425, 0.28 ) }
    dend_8 { pt3dadd( -11.8613, 126.857, 35.148, 1.39 ) }
    dend_8 { pt3dadd( -11.8241, 128.847, 37.0911, 0.56 ) }
    dend_8 { pt3dadd( -11.6991, 130.044, 38.2679, 0.28 ) }
    dend_8 { pt3dadd( -11.6093, 130.509, 38.7365, 0.28 ) }
    dend_8 { pt3dadd( -11.402, 131.45, 39.7084, 1.39 ) }
    dend_8 { pt3dadd( -11.0098, 133.434, 41.6861, 0.56 ) }
    dend_8 { pt3dadd( -10.9479, 134.128, 42.3281, 0.83 ) }
    dend_8 { pt3dadd( -10.8754, 135.941, 43.9106, 0.28 ) }
    dend_8 { pt3dadd( -10.8751, 136.992, 44.8254, 0.83 ) }
    dend_8 { pt3dadd( -10.9941, 140.824, 48.125, 0.28 ) }
    dend_8 { pt3dadd( -10.9883, 143.163, 50.063, 1.39 ) }
    dend_8 { pt3dadd( -10.8013, 149.804, 55.2846, 0.28 ) }
    dend_8 { pt3dadd( -10.7556, 150.567, 55.8661, 0.56 ) }
    dend_8 { pt3dadd( -10.5181, 152.951, 57.5862, 0.28 ) }
    dend_8 { pt3dadd( -10.2567, 154.901, 58.9657, 1.67 ) }
    dend_8 { pt3dadd( -9.07351, 161.494, 63.5636, 0.28 ) }
    dend_8 { pt3dadd( -8.75839, 162.992, 64.7517, 1.11 ) }
    dend_8 { pt3dadd( -8.17555, 165.476, 67.0089, 0.28 ) }
    dend_8 { pt3dadd( -7.93773, 166.7, 68.2396, 1.39 ) }
    dend_8 { pt3dadd( -7.48304, 169.581, 71.3801, 0.28 ) }
    dend_8 { pt3dadd( -7.38015, 170.98, 73.0635, 0.83 ) }
    dend_8 { pt3dadd( -7.65046, 175.234, 78.927, 0.28 ) }
    dend_8 { pt3dadd( -7.92797, 176.661, 81.1759, 1.94 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_8 { pt3dadd( -8.58499, 178.497, 84.5769, 0.28 ) }
    dend_8 { pt3dadd( -8.58499, 178.497, 84.5769, 0.83 ) }
    dend_8 { pt3dadd( -8.9519, 179.101, 86.0425, 0.28 ) }
    dend_8 { pt3dadd( -9.24311, 179.527, 87.0984, 0.83 ) }
    dend_8 { pt3dadd( -10.9483, 181.981, 93.1535, 1.39 ) }
    dend_8 { pt3dadd( -12.1604, 183.863, 97.7598, 1.39 ) }
    dend_8 { pt3dadd( -13.2687, 185.811, 102.367, 0.28 ) }
    dend_8 { pt3dadd( -14.2232, 187.672, 106.475, 0.83 ) }
    dend_8 { pt3dadd( -14.9537, 189.357, 109.887, 0.28 ) }
    dend_8 { pt3dadd( -15.3228, 190.348, 111.683, 0.83 ) }
    dend_8 { pt3dadd( -15.7352, 191.603, 113.708, 0.28 ) }
    dend_8 { pt3dadd( -16.2028, 193.074, 115.923, 1.67 ) }
    dend_8 { pt3dadd( -17.1358, 196.008, 120.286, 0.28 ) }
    dend_8 { pt3dadd( -17.3802, 196.833, 121.551, 0.83 ) }
    dend_8 { pt3dadd( -18.325, 200.598, 127.374, 0.28 ) }
    dend_8 { pt3dadd( -18.4397, 201.131, 128.199, 0.83 ) }
    dend_8 { pt3dadd( -18.6962, 202.752, 130.681, 0.56 ) }
    dend_8 { pt3dadd( -18.8474, 204.299, 133.033, 1.67 ) }
    dend_8 { pt3dadd( -18.9351, 206.174, 135.806, 0.28 ) }
    dend_8 { pt3dadd( -18.9407, 206.705, 136.529, 1.11 ) }
    dend_8 { pt3dadd( -18.8254, 210.081, 140.659, 0.28 ) }
    dend_8 { pt3dadd( -18.7985, 210.633, 141.303, 0.83 ) }
    dend_8 { pt3dadd( -18.6597, 212.794, 143.716, 0.28 ) }
    dend_8 { pt3dadd( -18.5563, 214.396, 145.392, 1.94 ) }
    dend_8 { pt3dadd( -17.9304, 223.899, 154.856, 0.28 ) }
    dend_8 { pt3dadd( -17.8112, 225.857, 156.782, 1.94 ) }
    dend_8 { pt3dadd( -17.6669, 228.783, 159.599, 0.28 ) }
    dend_8 { pt3dadd( -17.6447, 229.668, 160.432, 1.11 ) }
    dend_8 { pt3dadd( -17.6348, 233.635, 163.69, 0.28 ) }
    dend_8 { pt3dadd( -17.6478, 235.166, 164.791, 1.39 ) }
    dend_8 { pt3dadd( -17.6851, 239.455, 167.311, 0.28 ) }
    dend_8 { pt3dadd( -17.6815, 240.655, 167.98, 0.83 ) }
    dend_8 { pt3dadd( -17.5996, 242.405, 168.855, 1.39 ) }
    dend_8 { pt3dadd( -16.8676, 251.714, 173.146, 0.28 ) }
    dend_8 { pt3dadd( -16.7289, 252.909, 173.628, 0.83 ) }
    dend_8 { pt3dadd( -16.0673, 257.578, 175.285, 0.28 ) }
    dend_8 { pt3dadd( -15.8415, 258.926, 175.64, 1.39 ) }
    dend_8 { pt3dadd( -14.8636, 264.097, 176.734, 0.28 ) }
    dend_8 { pt3dadd( -14.4886, 265.871, 176.989, 1.11 ) }
    dend_8 { pt3dadd( -13.5323, 270.162, 177.227, 0.28 ) }
    dend_8 { pt3dadd( -13.3945, 270.763, 177.226, 0.83 ) }
    dend_8 { pt3dadd( -12.1373, 276.198, 176.942, 0.28 ) }
    dend_8 { pt3dadd( -11.7189, 277.76, 176.81, 0.56 ) }
    dend_8 { pt3dadd( -10.755, 280.88, 176.503, 0.28 ) }
    dend_8 { pt3dadd( -10.4138, 281.893, 176.397, 0.83 ) }
    dend_8 { pt3dadd( -7.04784, 290.999, 175.403, 0.28 ) }
    dend_8 { pt3dadd( -6.82216, 291.571, 175.347, 0.56 ) }
    dend_8 { pt3dadd( -4.99801, 295.721, 175.046, 0.28 ) }
    dend_8 { pt3dadd( -4.35114, 297.107, 174.971, 0.83 ) }
    // Section: dend_3, id: dend_3, parent: dend_1 (entry count 49/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -54.6232, 94.4644, 117.738, 0.28 ) }
    dend_3 { pt3dadd( -53.2005, 104.658, 122.51, 0.28 ) }
    dend_3 { pt3dadd( -52.8558, 107.176, 123.858, 0.56 ) }
    dend_3 { pt3dadd( -52.487, 109.994, 125.465, 0.28 ) }
    dend_3 { pt3dadd( -52.2874, 112.102, 126.858, 1.67 ) }
    dend_3 { pt3dadd( -51.4562, 122.663, 134.319, 0.28 ) }
    dend_3 { pt3dadd( -51.407, 123.528, 134.985, 1.39 ) }
    dend_3 { pt3dadd( -51.2231, 128.607, 139.435, 0.28 ) }
    dend_3 { pt3dadd( -51.208, 129.314, 140.061, 0.56 ) }
    dend_3 { pt3dadd( -51.1821, 140.169, 150.085, 0.28 ) }
    dend_3 { pt3dadd( -51.2213, 142.253, 152.11, 1.67 ) }
    dend_3 { pt3dadd( -51.61, 149.252, 159.658, 0.28 ) }
    dend_3 { pt3dadd( -51.708, 150.788, 161.321, 1.11 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 62/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -54.6232, 94.4644, 117.738, 0.28 ) }
    dend_2 { pt3dadd( -57.2979, 99.8491, 117.78, 0.28 ) }
    dend_2 { pt3dadd( -57.586, 100.367, 117.864, 1.11 ) }
    dend_2 { pt3dadd( -58.623, 102.164, 118.259, 0.28 ) }
    dend_2 { pt3dadd( -58.7699, 102.413, 118.329, 0.56 ) }
    dend_2 { pt3dadd( -59.1268, 103.01, 118.515, 0.28 ) }
    dend_2 { pt3dadd( -59.5506, 103.711, 118.751, 1.11 ) }
    dend_2 { pt3dadd( -61.9463, 107.49, 120.508, 0.28 ) }
    dend_2 { pt3dadd( -62.1008, 107.723, 120.617, 0.83 ) }
    dend_2 { pt3dadd( -62.8386, 108.78, 121.115, 0.28 ) }
    dend_2 { pt3dadd( -63.0385, 109.07, 121.241, 1.11 ) }
    dend_2 { pt3dadd( -64.4675, 111.169, 122.07, 0.28 ) }
    dend_2 { pt3dadd( -64.9816, 111.957, 122.347, 1.39 ) }
    dend_2 { pt3dadd( -65.9604, 113.53, 122.755, 0.28 ) }
    dend_2 { pt3dadd( -66.0332, 113.639, 122.788, 0.56 ) }
    dend_2 { pt3dadd( -67.4521, 115.65, 123.403, 0.28 ) }
    dend_2 { pt3dadd( -67.9397, 116.316, 123.633, 0.56 ) }
    dend_2 { pt3dadd( -69.109, 117.851, 124.207, 0.28 ) }
    dend_2 { pt3dadd( -69.6377, 118.502, 124.445, 1.39 ) }
    dend_2 { pt3dadd( -72.0677, 121.334, 125.448, 0.28 ) }
    dend_2 { pt3dadd( -72.3953, 121.695, 125.568, 0.56 ) }
    dend_2 { pt3dadd( -73.8704, 123.222, 126.036, 0.28 ) }
    dend_2 { pt3dadd( -74.491, 123.896, 126.21, 1.11 ) }
    dend_2 { pt3dadd( -78.8829, 128.884, 127.242, 0.28 ) }
    dend_2 { pt3dadd( -79.4282, 129.596, 127.318, 1.11 ) }
    dend_2 { pt3dadd( -80.6222, 131.4, 127.313, 0.28 ) }
    dend_2 { pt3dadd( -80.8552, 131.813, 127.279, 0.83 ) }
    dend_2 { pt3dadd( -82.0215, 134.256, 126.842, 0.28 ) }
    dend_2 { pt3dadd( -82.353, 135.132, 126.61, 1.11 ) }
    dend_2 { pt3dadd( -83.625, 139.708, 125.044, 0.28 ) }
    dend_2 { pt3dadd( -83.8304, 140.463, 124.751, 0.83 ) }
    dend_2 { pt3dadd( -84.7829, 143.955, 123.27, 0.28 ) }
    dend_2 { pt3dadd( -85.0617, 144.881, 122.865, 0.56 ) }
    dend_2 { pt3dadd( -86.0116, 147.644, 121.554, 0.28 ) }
    dend_2 { pt3dadd( -86.3124, 148.395, 121.175, 0.83 ) }
    dend_2 { pt3dadd( -88.0315, 152.052, 119.251, 0.28 ) }
    dend_2 { pt3dadd( -88.2628, 152.475, 118.966, 0.83 ) }
    dend_2 { pt3dadd( -88.7688, 153.221, 118.39, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_2 { pt3dadd( -89.2024, 153.792, 117.923, 0.83 ) }
    dend_2 { pt3dadd( -92.4798, 157.603, 114.327, 0.28 ) }
    dend_2 { pt3dadd( -92.8071, 157.956, 113.963, 0.83 ) }
    dend_2 { pt3dadd( -97.9406, 162.994, 108.247, 0.28 ) }
    dend_2 { pt3dadd( -100.127, 165.024, 105.813, 0.28 ) }
    dend_2 { pt3dadd( -100.526, 165.383, 105.361, 0.83 ) }
    dend_2 { pt3dadd( -103.509, 167.929, 101.995, 0.28 ) }
    dend_2 { pt3dadd( -103.816, 168.162, 101.642, 0.56 ) }
    dend_2 { pt3dadd( -105.682, 169.49, 99.5548, 0.28 ) }
    dend_2 { pt3dadd( -106.099, 169.704, 99.1794, 0.83 ) }
    // Section: dend_28, id: dend_28, parent: dend_26 (entry count 10/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( -11.0271, -61.6425, 2.78721, 0.83 ) }
    dend_28 { pt3dadd( -11.9929, -63.7004, 1.13343, 0.83 ) }
    dend_28 { pt3dadd( -12.5927, -64.9785, 0.106395, 0.83 ) }
    dend_28 { pt3dadd( -13.2565, -66.393, -1.03036, 0.83 ) }
    dend_28 { pt3dadd( -13.676, -67.2869, -1.74871, 0.83 ) }
    // Section: dend_27, id: dend_27, parent: dend_26 (entry count 15/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( -11.0271, -61.6425, 2.78721, 0.83 ) }
    dend_27 { pt3dadd( -11.6085, -64.4563, 3.3933, 0.83 ) }
    dend_27 { pt3dadd( -12.8482, -71.3628, 4.82601, 0.83 ) }
    dend_27 { pt3dadd( -13.68, -76.0584, 5.64788, 0.83 ) }
    dend_27 { pt3dadd( -15.7624, -87.9829, 7.40013, 0.83 ) }
    dend_27 { pt3dadd( -16.5426, -92.2238, 7.79107, 0.83 ) }
    dend_27 { pt3dadd( -16.9366, -94.3267, 7.91374, 0.83 ) }
    dend_27 { pt3dadd( -17.3337, -96.618, 7.95822, 0.83 ) }
    dend_27 { pt3dadd( -18.1596, -102.756, 7.79688, 0.83 ) }
    dend_27 { pt3dadd( -19.0729, -108.764, 7.49054, 0.83 ) }
    dend_27 { pt3dadd( -20.0321, -114.664, 7.02463, 0.83 ) }
    dend_27 { pt3dadd( -20.4408, -116.94, 6.86492, 0.83 ) }
    dend_27 { pt3dadd( -21.0081, -120.251, 6.82981, 0.56 ) }
    dend_27 { pt3dadd( -21.488, -123.011, 6.97569, 0.56 ) }
    dend_27 { pt3dadd( -21.9431, -126.264, 7.37992, 0.56 ) }
    dend_27 { pt3dadd( -22.2666, -129.016, 7.88355, 0.83 ) }
    dend_27 { pt3dadd( -22.6399, -132.567, 8.71751, 0.56 ) }
    dend_27 { pt3dadd( -23.2276, -138.022, 9.77693, 0.83 ) }
    dend_27 { pt3dadd( -23.6463, -141.928, 10.3699, 0.56 ) }
    dend_27 { pt3dadd( -23.7759, -143.423, 10.5688, 0.56 ) }
    dend_27 { pt3dadd( -23.8902, -145.738, 10.841, 0.83 ) }
    dend_27 { pt3dadd( -23.9227, -146.558, 10.9277, 0.83 ) }
    dend_27 { pt3dadd( -24.1184, -151.342, 11.3988, 0.56 ) }
    dend_27 { pt3dadd( -24.3502, -154.94, 11.7761, 0.56 ) }
    dend_27 { pt3dadd( -24.6176, -159.863, 12.2404, 0.56 ) }
    dend_27 { pt3dadd( -24.8008, -162.71, 12.4884, 0.56 ) }
    dend_27 { pt3dadd( -25.0849, -166.788, 12.8659, 1.11 ) }
    dend_27 { pt3dadd( -25.3522, -170.039, 13.3, 0.56 ) }
    dend_27 { pt3dadd( -25.519, -171.834, 13.6675, 0.56 ) }
    dend_27 { pt3dadd( -25.9679, -175.761, 14.7719, 0.56 ) }
    dend_27 { pt3dadd( -26.0602, -176.531, 15.0382, 0.56 ) }
    dend_27 { pt3dadd( -26.3547, -179.814, 16.3683, 1.11 ) }
    dend_27 { pt3dadd( -26.5907, -184.205, 18.5032, 0.56 ) }
    dend_27 { pt3dadd( -26.6257, -187.421, 20.2003, 0.28 ) }
    dend_27 { pt3dadd( -26.5687, -191.333, 22.3114, 0.28 ) }
    dend_27 { pt3dadd( -26.5146, -193.254, 23.3517, 0.83 ) }
    dend_27 { pt3dadd( -26.2185, -196.545, 25.0138, 1.39 ) }
    dend_27 { pt3dadd( -25.782, -199.418, 26.2887, 0.28 ) }
    dend_27 { pt3dadd( -25.4559, -201.073, 26.9851, 1.11 ) }
    dend_27 { pt3dadd( -25.144, -202.547, 27.5788, 0.56 ) }
    dend_27 { pt3dadd( -24.2528, -206.66, 29.2225, 0.83 ) }
    dend_27 { pt3dadd( -23.2983, -211.647, 31.2607, 0.28 ) }
    dend_27 { pt3dadd( -22.8173, -214.337, 32.2885, 1.39 ) }
    dend_27 { pt3dadd( -21.8099, -219.67, 34.4692, 0.28 ) }
    dend_27 { pt3dadd( -21.6729, -220.318, 34.7591, 0.83 ) }
    dend_27 { pt3dadd( -20.979, -222.585, 35.7226, 0.28 ) }
    dend_27 { pt3dadd( -20.3239, -224.333, 36.4255, 0.83 ) }
    dend_27 { pt3dadd( -19.2276, -227.009, 37.3935, 0.56 ) }
    dend_27 { pt3dadd( -16.5937, -233.073, 39.4937, 0.28 ) }
    dend_27 { pt3dadd( -15.6294, -235.215, 40.164, 1.11 ) }
    dend_27 { pt3dadd( -11.4599, -244.656, 42.9224, 0.28 ) }
    dend_27 { pt3dadd( -11.0198, -245.68, 43.2147, 0.56 ) }
    dend_27 { pt3dadd( -10.0206, -248.271, 44.0789, 1.67 ) }
    dend_27 { pt3dadd( -8.33032, -253.308, 45.8483, 0.28 ) }
    dend_27 { pt3dadd( -8.02572, -254.359, 46.2239, 0.56 ) }
    dend_27 { pt3dadd( -6.68304, -259.644, 48.2896, 0.28 ) }
    dend_27 { pt3dadd( -5.99648, -262.611, 49.5981, 1.67 ) }
    dend_27 { pt3dadd( -3.57741, -272.675, 54.1641, 0.28 ) }
    dend_27 { pt3dadd( -3.04693, -274.612, 55.0872, 1.11 ) }
    dend_27 { pt3dadd( -1.90908, -278.403, 57.0142, 0.28 ) }
    dend_27 { pt3dadd( -1.47736, -279.618, 57.6701, 0.83 ) }
    dend_27 { pt3dadd( 0.450245, -284.206, 60.2918, 0.28 ) }
    dend_27 { pt3dadd( 0.908972, -285.1, 60.7929, 1.39 ) }
    dend_27 { pt3dadd( 3.75205, -289.497, 63.192, 0.28 ) }
    dend_27 { pt3dadd( 4.46078, -290.407, 63.6503, 1.11 ) }
    dend_27 { pt3dadd( 8.47603, -295.015, 65.7217, 0.28 ) }
    dend_27 { pt3dadd( 9.11485, -295.744, 66.0159, 0.56 ) }
    dend_27 { pt3dadd( 11.0754, -298.022, 66.8096, 0.28 ) }
    dend_27 { pt3dadd( 12.0519, -299.256, 67.1654, 1.67 ) }
    dend_27 { pt3dadd( 18.1806, -307.802, 69.0957, 0.28 ) }
    dend_27 { pt3dadd( 18.7711, -308.771, 69.2689, 1.11 ) }
    dend_27 { pt3dadd( 21.938, -315.026, 70.1482, 0.28 ) }
    dend_27 { pt3dadd( 22.4324, -316.233, 70.3054, 0.56 ) }
    dend_27 { pt3dadd( 23.9581, -321.106, 70.8359, 0.28 ) }
    dend_27 { pt3dadd( 24.267, -322.715, 70.9928, 1.39 ) }
    dend_27 { pt3dadd( 24.769, -328.368, 71.5658, 0.28 ) }
    dend_27 { pt3dadd( 24.8482, -329.457, 71.6827, 0.83 ) }
    dend_27 { pt3dadd( 25.0269, -332.724, 72.03, 0.28 ) }
    dend_27 { pt3dadd( 25.1172, -334.612, 72.2767, 0.56 ) }
    dend_27 { pt3dadd( 25.5556, -346.616, 74.127, 0.28 ) }
    dend_27 { pt3dadd( 25.6023, -349.786, 74.6925, 1.39 ) }
    dend_27 { pt3dadd( 25.5644, -354.214, 75.5801, 0.28 ) }
    dend_27 { pt3dadd( 25.5262, -355.509, 75.8581, 0.56 ) }
    dend_27 { pt3dadd( 25.405, -358.218, 76.4061, 0.28 ) }
    dend_27 { pt3dadd( 25.3651, -359.021, 76.576, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_27 { pt3dadd( 24.6474, -370.182, 78.9354, 0.28 ) }
    dend_27 { pt3dadd( 24.5874, -371.255, 79.1655, 1.11 ) }
    dend_27 { pt3dadd( 24.0571, -381.283, 81.3288, 0.28 ) }
    dend_27 { pt3dadd( 23.9434, -383.966, 81.8985, 1.11 ) }
    dend_27 { pt3dadd( 23.8058, -388.739, 82.8669, 0.28 ) }
    dend_27 { pt3dadd( 23.7849, -390.042, 83.1355, 0.56 ) }
    dend_27 { pt3dadd( 23.9025, -395.552, 84.3022, 0.28 ) }
    dend_27 { pt3dadd( 23.9489, -396.848, 84.5949, 0.56 ) }
    // Section: dend_25, id: dend_25, parent: dend_23 (entry count 8/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( -31.4308, -82.8983, 53.2168, 1.67 ) }
    dend_25 { pt3dadd( -32.5311, -85.1419, 54.3046, 1.67 ) }
    dend_25 { pt3dadd( -34.0967, -88.0841, 55.8318, 0.56 ) }
    dend_25 { pt3dadd( -34.6285, -89.1417, 56.419, 0.83 ) }
    dend_25 { pt3dadd( -35.3229, -90.6084, 57.3158, 0.28 ) }
    dend_25 { pt3dadd( -35.6328, -91.2443, 57.7346, 0.56 ) }
    dend_25 { pt3dadd( -36.3776, -92.8038, 58.7892, 0.28 ) }
    dend_25 { pt3dadd( -36.6789, -93.4029, 59.2597, 0.56 ) }
    dend_25 { pt3dadd( -37.64, -95.4332, 60.7789, 0.28 ) }
    dend_25 { pt3dadd( -38.2632, -96.8167, 61.7256, 1.11 ) }
    dend_25 { pt3dadd( -38.8908, -98.2761, 62.5642, 0.56 ) }
    dend_25 { pt3dadd( -39.6165, -100.18, 63.5003, 0.28 ) }
    dend_25 { pt3dadd( -39.9346, -101.061, 63.8759, 0.56 ) }
    dend_25 { pt3dadd( -41.0496, -104.196, 65.122, 0.28 ) }
    dend_25 { pt3dadd( -41.3602, -105.042, 65.4127, 1.39 ) }
    dend_25 { pt3dadd( -42.1512, -107.3, 66.066, 1.67 ) }
    dend_25 { pt3dadd( -43.2088, -110.691, 66.9251, 0.28 ) }
    dend_25 { pt3dadd( -43.4345, -111.431, 67.093, 0.83 ) }
    // Section: dend_24, id: dend_24, parent: dend_23 (entry count 26/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( -31.4308, -82.8983, 53.2168, 0.28 ) }
    dend_24 { pt3dadd( -30.2854, -84.3806, 53.74, 0.28 ) }
    dend_24 { pt3dadd( -28.8461, -86.2433, 54.3975, 1.11 ) }
    dend_24 { pt3dadd( -24.3101, -92.1137, 56.4694, 0.28 ) }
    dend_24 { pt3dadd( -24.0841, -92.4062, 56.5727, 0.83 ) }
    dend_24 { pt3dadd( -22.7073, -94.188, 57.2015, 0.28 ) }
    dend_24 { pt3dadd( -22.6992, -94.1985, 57.2052, 0.83 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 33/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 43.087, -68.9857, -8.79713, 0.83 ) }
    dend_19 { pt3dadd( 45.659, -69.8444, -7.99854, 0.83 ) }
    dend_19 { pt3dadd( 47.9649, -70.6573, -7.10607, 0.56 ) }
    dend_19 { pt3dadd( 50.342, -71.5679, -6.09505, 0.56 ) }
    dend_19 { pt3dadd( 53.0499, -72.7196, -4.77628, 0.28 ) }
    dend_19 { pt3dadd( 53.9948, -73.1566, -4.27233, 0.28 ) }
    dend_19 { pt3dadd( 55.8478, -74.066, -3.19056, 0.56 ) }
    dend_19 { pt3dadd( 57.3174, -74.9106, -2.16579, 0.28 ) }
    dend_19 { pt3dadd( 57.9706, -75.313, -1.6605, 0.56 ) }
    dend_19 { pt3dadd( 59.5029, -76.2646, -0.529615, 0.28 ) }
    dend_19 { pt3dadd( 60.4577, -76.9033, 0.128783, 0.83 ) }
    dend_19 { pt3dadd( 61.902, -77.8265, 1.16478, 0.28 ) }
    dend_19 { pt3dadd( 62.8124, -78.3894, 1.89164, 0.56 ) }
    dend_19 { pt3dadd( 63.104, -78.5506, 2.12464, 0.28 ) }
    dend_19 { pt3dadd( 64.6905, -79.4075, 3.49076, 0.56 ) }
    dend_19 { pt3dadd( 66.598, -80.4071, 5.32398, 0.28 ) }
    dend_19 { pt3dadd( 69.5749, -81.5532, 8.38591, 0.83 ) }
    dend_19 { pt3dadd( 71.6298, -82.0226, 10.5483, 0.28 ) }
    dend_19 { pt3dadd( 72.0656, -82.0614, 11.0232, 0.56 ) }
    dend_19 { pt3dadd( 74.095, -81.9768, 13.1997, 0.28 ) }
    dend_19 { pt3dadd( 75.6048, -81.7082, 14.7709, 0.83 ) }
    dend_19 { pt3dadd( 79.171, -80.5768, 18.1731, 0.28 ) }
    dend_19 { pt3dadd( 81.0704, -79.7399, 19.7411, 1.11 ) }
    dend_19 { pt3dadd( 82.4321, -79.056, 20.7682, 0.56 ) }
    dend_19 { pt3dadd( 83.5349, -78.4517, 21.556, 0.28 ) }
    dend_19 { pt3dadd( 84.4503, -77.9266, 22.1458, 0.83 ) }
    dend_19 { pt3dadd( 85.7893, -77.198, 22.9114, 0.28 ) }
    dend_19 { pt3dadd( 87.524, -76.3395, 23.8735, 0.83 ) }
    dend_19 { pt3dadd( 90.9965, -74.797, 25.6622, 0.28 ) }
    dend_19 { pt3dadd( 92.9591, -73.956, 26.619, 0.28 ) }
    dend_19 { pt3dadd( 94.2092, -73.4189, 27.2019, 0.56 ) }
    dend_19 { pt3dadd( 97.0989, -72.1944, 28.5369, 0.83 ) }
    dend_19 { pt3dadd( 99.3905, -71.2715, 29.5676, 0.28 ) }
    dend_19 { pt3dadd( 101.038, -70.6305, 30.2775, 0.56 ) }
    dend_19 { pt3dadd( 108.481, -67.6332, 33.0674, 0.28 ) }
    dend_19 { pt3dadd( 109.516, -67.2393, 33.4611, 1.67 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 69/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 43.087, -68.9857, -8.79713, 0.56 ) }
    dend_18 { pt3dadd( 44.7303, -72.128, -10.5392, 0.56 ) }
    dend_18 { pt3dadd( 46.0104, -74.8025, -12.0537, 0.56 ) }
    dend_18 { pt3dadd( 47.1048, -77.4003, -13.3805, 0.56 ) }
    dend_18 { pt3dadd( 49.1127, -81.9326, -15.9495, 0.56 ) }
    dend_18 { pt3dadd( 49.6888, -83.2332, -16.6867, 0.28 ) }
    dend_18 { pt3dadd( 50.302, -84.6174, -17.4713, 0.28 ) }
    dend_18 { pt3dadd( 50.5137, -85.1693, -17.8139, 0.56 ) }
    dend_18 { pt3dadd( 51.101, -87.2698, -19.2607, 0.28 ) }
    dend_18 { pt3dadd( 52.0398, -91.3768, -21.8628, 0.83 ) }
    dend_18 { pt3dadd( 55.1737, -101.196, -28.2561, 0.83 ) }
    // Section: dend_16, id: dend_16, parent: dend_14 (entry count 80/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 84.6018, -239.263, -21.2063, 0.56 ) }
    dend_16 { pt3dadd( 87.1511, -248.486, -21.9316, 0.56 ) }
    dend_16 { pt3dadd( 90.1003, -257.261, -24.2889, 0.56 ) }
    dend_16 { pt3dadd( 95.1708, -265.018, -26.2573, 0.56 ) }
    dend_16 { pt3dadd( 100.931, -272.036, -28.767, 0.56 ) }
    dend_16 { pt3dadd( 106.003, -279.958, -30.0165, 0.56 ) }
    dend_16 { pt3dadd( 110.343, -288.446, -29.689, 0.56 ) }
    dend_16 { pt3dadd( 116.034, -295.989, -29.1158, 0.56 ) }
    dend_16 { pt3dadd( 122.267, -302.765, -27.1416, 0.56 ) }
    dend_16 { pt3dadd( 129.139, -308.231, -23.9647, 0.56 ) }
    dend_16 { pt3dadd( 135.71, -312.515, -19.0046, 0.56 ) }
    dend_16 { pt3dadd( 141.731, -315.871, -12.8448, 0.56 ) }
    dend_16 { pt3dadd( 147.407, -319.502, -6.50094, 0.56 ) }
    dend_16 { pt3dadd( 153.105, -324.452, -1.04359, 0.56 ) }
    dend_16 { pt3dadd( 158.397, -329.639, 4.62014, 0.56 ) }
    dend_16 { pt3dadd( 164.436, -335.847, 8.23049, 0.56 ) }
    dend_16 { pt3dadd( 171.25, -339.854, 13.0699, 0.56 ) }
    // Section: dend_15, id: dend_15, parent: dend_14 (entry count 97/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 84.6018, -239.263, -21.2063, 0.56 ) }
    dend_15 { pt3dadd( 88.066, -251.523, -21.7914, 0.56 ) }
    dend_15 { pt3dadd( 89.7573, -264.191, -22.2323, 0.56 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_15 { pt3dadd( 90.218, -276.886, -20.6606, 0.56 ) }
    dend_15 { pt3dadd( 88.8783, -289.518, -19.173, 0.56 ) }
    dend_15 { pt3dadd( 86.0084, -301.369, -15.5156, 0.56 ) }
    dend_15 { pt3dadd( 81.9525, -312.984, -12.3503, 0.56 ) }
    // Section: dend_11, id: dend_11, parent: dend_9 (entry count 4/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 6.11932, 92.6374, -8.52157, 0.56 ) }
    dend_11 { pt3dadd( 7.0088, 93.847, -9.86073, 0.56 ) }
    dend_11 { pt3dadd( 7.63902, 94.704, -10.8095, 0.56 ) }
    dend_11 { pt3dadd( 8.79526, 96.2763, -12.5503, 0.83 ) }
    dend_11 { pt3dadd( 13.0196, 100.345, -16.5844, 0.83 ) }
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 9/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 6.11932, 92.6374, -8.52157, 0.56 ) }
    dend_10 { pt3dadd( 4.20123, 93.4322, -8.47962, 0.56 ) }
    dend_10 { pt3dadd( -2.62162, 95.8064, -9.15193, 0.56 ) }
    // Section: dend_30, id: dend_30, parent: dend_28 (entry count 12/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( -13.676, -67.2869, -1.74871, 0.83 ) }
    dend_30 { pt3dadd( -13.9348, -69.4847, -3.20997, 0.83 ) }
    dend_30 { pt3dadd( -14.1666, -71.5045, -4.54511, 0.83 ) }
    dend_30 { pt3dadd( -14.2454, -72.5503, -5.22295, 0.83 ) }
    dend_30 { pt3dadd( -14.3552, -74.8199, -6.76302, 0.56 ) }
    dend_30 { pt3dadd( -14.38, -75.6824, -7.39979, 0.83 ) }
    dend_30 { pt3dadd( -14.4471, -78.0143, -9.12139, 0.56 ) }
    dend_30 { pt3dadd( -14.4839, -79.835, -10.5094, 0.56 ) }
    dend_30 { pt3dadd( -14.4465, -82.3612, -12.6195, 0.56 ) }
    dend_30 { pt3dadd( -14.379, -84.6367, -14.5916, 0.56 ) }
    dend_30 { pt3dadd( -14.2515, -86.6563, -16.3049, 0.56 ) }
    dend_30 { pt3dadd( -15.2617, -94.2997, -20.5414, 0.56 ) }
    // Section: dend_29, id: dend_29, parent: dend_28 (entry count 24/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( -13.676, -67.2869, -1.74871, 0.83 ) }
    dend_29 { pt3dadd( -14.7671, -68.911, -2.46581, 0.83 ) }
    dend_29 { pt3dadd( -16.2316, -71.0242, -3.60093, 0.83 ) }
    dend_29 { pt3dadd( -18.9695, -74.846, -5.88293, 0.83 ) }
    dend_29 { pt3dadd( -22.0408, -79.0242, -8.48314, 0.83 ) }
    dend_29 { pt3dadd( -23.9919, -81.8067, -10.1854, 0.83 ) }
    dend_29 { pt3dadd( -25.8609, -84.4997, -11.8516, 0.83 ) }
    dend_29 { pt3dadd( -27.5674, -87.1267, -13.5657, 0.83 ) }
    dend_29 { pt3dadd( -29.9675, -90.8981, -16.1373, 0.56 ) }
    dend_29 { pt3dadd( -31.0182, -92.5756, -17.324, 0.56 ) }
    dend_29 { pt3dadd( -33.3304, -95.7315, -19.4819, 0.56 ) }
    dend_29 { pt3dadd( -35.5969, -98.2498, -21.1513, 0.56 ) }
    dend_29 { pt3dadd( -38.9075, -101.536, -23.3044, 0.56 ) }
    dend_29 { pt3dadd( -42.5099, -104.574, -25.196, 0.56 ) }
    dend_29 { pt3dadd( -45.1323, -106.357, -26.3266, 0.56 ) }
    dend_29 { pt3dadd( -51.6188, -109.826, -28.6478, 0.56 ) }
    dend_29 { pt3dadd( -56.7928, -112.031, -30.3011, 0.56 ) }
    dend_29 { pt3dadd( -60.1505, -113.272, -31.1761, 0.56 ) }
    dend_29 { pt3dadd( -65.9718, -115.167, -32.4176, 0.56 ) }
    dend_29 { pt3dadd( -69.2965, -116.245, -32.9916, 0.56 ) }
    dend_29 { pt3dadd( -73.4182, -117.495, -33.4717, 0.56 ) }
    dend_29 { pt3dadd( -76.1231, -118.278, -33.6406, 0.56 ) }
    dend_29 { pt3dadd( -79.5104, -119.276, -33.584, 0.56 ) }
    dend_29 { pt3dadd( -82.3786, -120.095, -33.4203, 0.56 ) }
    dend_29 { pt3dadd( -84.6927, -120.702, -33.3575, 0.56 ) }
    dend_29 { pt3dadd( -88.6801, -121.582, -33.182, 0.56 ) }
    dend_29 { pt3dadd( -93.8083, -122.413, -32.8648, 0.56 ) }
    dend_29 { pt3dadd( -95.5998, -122.576, -32.794, 0.56 ) }
    dend_29 { pt3dadd( -100.107, -122.673, -32.7787, 0.56 ) }
    dend_29 { pt3dadd( -104.625, -122.318, -32.5129, 0.56 ) }
    dend_29 { pt3dadd( -110.136, -121.492, -32.0925, 0.56 ) }
    dend_29 { pt3dadd( -112.84, -121.001, -31.866, 0.56 ) }
    dend_29 { pt3dadd( -117.365, -120.046, -31.4187, 0.28 ) }
    dend_29 { pt3dadd( -120.335, -119.445, -31.2861, 1.39 ) }
    dend_29 { pt3dadd( -130.788, -117.34, -31.2698, 0.28 ) }
    dend_29 { pt3dadd( -132.887, -116.922, -31.2784, 1.67 ) }
    dend_29 { pt3dadd( -142.546, -114.928, -31.6142, 0.28 ) }
    dend_29 { pt3dadd( -144.413, -114.576, -31.7225, 1.39 ) }
    dend_29 { pt3dadd( -156.502, -112.579, -32.7621, 0.28 ) }
    dend_29 { pt3dadd( -158.572, -112.338, -33.1206, 0.56 ) }
    // Section: dend_21, id: dend_21, parent: dend_19 (entry count 64/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 109.516, -67.2393, 33.4611, 0.28 ) }
    dend_21 { pt3dadd( 110.334, -66.2821, 35.0177, 0.28 ) }
    dend_21 { pt3dadd( 111.278, -65.3537, 36.659, 0.56 ) }
    dend_21 { pt3dadd( 112.54, -64.1526, 38.7949, 0.28 ) }
    dend_21 { pt3dadd( 113.485, -63.3132, 40.2783, 0.83 ) }
    dend_21 { pt3dadd( 114.733, -62.2266, 42.1418, 0.28 ) }
    dend_21 { pt3dadd( 115.108, -61.9217, 42.6597, 1.11 ) }
    dend_21 { pt3dadd( 116.658, -60.8088, 44.6315, 0.56 ) }
    dend_21 { pt3dadd( 118.004, -59.9214, 46.1397, 0.28 ) }
    dend_21 { pt3dadd( 118.836, -59.3826, 46.9954, 0.28 ) }
    dend_21 { pt3dadd( 120.458, -58.289, 48.6855, 0.83 ) }
    dend_21 { pt3dadd( 122.913, -56.5618, 51.2874, 0.28 ) }
    dend_21 { pt3dadd( 123.228, -56.3314, 51.631, 0.83 ) }
    dend_21 { pt3dadd( 125.702, -54.4081, 54.5018, 0.28 ) }
    dend_21 { pt3dadd( 126.778, -53.5014, 55.8761, 0.83 ) }
    dend_21 { pt3dadd( 127.971, -52.3894, 57.5512, 0.28 ) }
    dend_21 { pt3dadd( 128.22, -52.1331, 57.9305, 0.83 ) }
    dend_21 { pt3dadd( 129.303, -50.8348, 59.7381, 0.28 ) }
    dend_21 { pt3dadd( 130.365, -49.3249, 61.3098, 1.39 ) }
    dend_21 { pt3dadd( 132.063, -46.6259, 63.5037, 0.28 ) }
    dend_21 { pt3dadd( 132.339, -46.1878, 63.7901, 0.83 ) }
    dend_21 { pt3dadd( 133.547, -44.2478, 64.831, 0.28 ) }
    dend_21 { pt3dadd( 134.3, -42.9891, 65.4009, 1.67 ) }
    dend_21 { pt3dadd( 137.955, -36.7227, 67.7536, 0.28 ) }
    dend_21 { pt3dadd( 138.601, -35.6024, 68.1211, 1.39 ) }
    dend_21 { pt3dadd( 141.178, -31.1189, 69.4343, 0.28 ) }
    dend_21 { pt3dadd( 141.815, -29.975, 69.7353, 1.11 ) }
    dend_21 { pt3dadd( 143.554, -26.8102, 70.4644, 0.28 ) }
    dend_21 { pt3dadd( 143.735, -26.4821, 70.5393, 0.83 ) }
    dend_21 { pt3dadd( 144.554, -24.9989, 70.8807, 0.28 ) }
    dend_21 { pt3dadd( 145.526, -23.1925, 71.3177, 0.83 ) }
    dend_21 { pt3dadd( 148.141, -18.1299, 72.576, 0.28 ) }
    dend_21 { pt3dadd( 149.047, -16.3045, 73.0984, 1.11 ) }
    dend_21 { pt3dadd( 152.637, -8.40668, 75.6774, 0.28 ) }
    dend_21 { pt3dadd( 153.131, -7.23905, 76.1265, 1.11 ) }
    dend_21 { pt3dadd( 154.104, -4.69403, 77.2407, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_21 { pt3dadd( 154.498, -3.40472, 77.9296, 1.11 ) }
    dend_21 { pt3dadd( 154.912, -1.17382, 79.4321, 0.28 ) }
    dend_21 { pt3dadd( 155.004, 1.06217, 81.0778, 1.11 ) }
    dend_21 { pt3dadd( 154.703, 2.94924, 82.6565, 0.28 ) }
    dend_21 { pt3dadd( 154.573, 3.59266, 83.1868, 0.56 ) }
    dend_21 { pt3dadd( 153.985, 6.27089, 85.3682, 0.28 ) }
    dend_21 { pt3dadd( 153.664, 7.79761, 86.5975, 1.39 ) }
    dend_21 { pt3dadd( 153.425, 9.10666, 87.6385, 0.28 ) }
    dend_21 { pt3dadd( 153.238, 10.4081, 88.713, 0.83 ) }
    dend_21 { pt3dadd( 153.2, 10.6631, 88.9205, 1.11 ) }
    dend_21 { pt3dadd( 152.962, 12.8587, 90.8627, 0.28 ) }
    dend_21 { pt3dadd( 152.95, 13.2394, 91.2411, 0.56 ) }
    dend_21 { pt3dadd( 153.054, 15.2839, 93.5572, 0.28 ) }
    dend_21 { pt3dadd( 153.109, 15.8354, 94.273, 0.83 ) }
    // Section: dend_20, id: dend_20, parent: dend_19 (entry count 14/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 109.516, -67.2393, 33.4611, 0.28 ) }
    dend_20 { pt3dadd( 114.765, -67.5019, 34.1721, 0.28 ) }
    dend_20 { pt3dadd( 115.258, -67.4898, 34.1924, 0.56 ) }
    dend_20 { pt3dadd( 117.027, -67.3786, 34.1928, 0.28 ) }
    dend_20 { pt3dadd( 118.011, -67.2398, 34.1489, 0.56 ) }
    dend_20 { pt3dadd( 119.423, -66.9819, 34.064, 0.28 ) }
    dend_20 { pt3dadd( 120.491, -66.74, 33.9752, 0.56 ) }
    dend_20 { pt3dadd( 122.4, -66.0715, 33.7497, 0.28 ) }
    dend_20 { pt3dadd( 123.347, -65.6953, 33.7107, 0.83 ) }
    dend_20 { pt3dadd( 126.606, -64.3074, 33.8268, 0.28 ) }
    dend_20 { pt3dadd( 126.921, -64.1686, 33.8583, 0.56 ) }
    dend_20 { pt3dadd( 128.453, -63.5005, 34.0503, 0.28 ) }
    dend_20 { pt3dadd( 130.508, -62.5821, 34.3943, 0.83 ) }
    dend_20 { pt3dadd( 136.592, -59.8359, 35.697, 0.28 ) }
    dend_20 { pt3dadd( 137.744, -59.3063, 35.9716, 0.28 ) }
    dend_20 { pt3dadd( 138.769, -58.8473, 36.2713, 0.83 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_12, dend_5, dend_0, dend_22, dend_13, dend_7, dend_6, dend_4, dend_1, dend_26, dend_23, dend_17, dend_14, dend_9, dend_8, dend_3, dend_2, dend_28, dend_27, dend_25, dend_24, dend_19, dend_18, dend_16, dend_15, dend_11, dend_10, dend_30, dend_29, dend_21, dend_20]}
    ModelViewParmSubset_2 = new SectionList()
    dend_12 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_30 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_12, dend_5, dend_0, dend_22, dend_13, dend_7, dend_6, dend_4, dend_1, dend_26, dend_23, dend_17, dend_14, dend_9, dend_8, dend_3, dend_2, dend_28, dend_27, dend_25, dend_24, dend_19, dend_18, dend_16, dend_15, dend_11, dend_10, dend_30, dend_29, dend_21, dend_20]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()

    // Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_12, dend_5, dend_0, axon_0, dend_22, dend_13, dend_7, dend_6, dend_4, dend_1, axon_1, dend_26, dend_23, dend_17, dend_14, dend_9, dend_8, dend_3, dend_2, dend_28, dend_27, dend_25, dend_24, dend_19, dend_18, dend_16, dend_15, dend_11, dend_10, dend_30, dend_29, dend_21, dend_20]}
    ModelViewParmSubset_5 = new SectionList()
    dend_12 ModelViewParmSubset_5.append()
    dend_5 ModelViewParmSubset_5.append()
    dend_0 ModelViewParmSubset_5.append()
    axon_0 ModelViewParmSubset_5.append()
    dend_22 ModelViewParmSubset_5.append()
    dend_13 ModelViewParmSubset_5.append()
    dend_7 ModelViewParmSubset_5.append()
    dend_6 ModelViewParmSubset_5.append()
    dend_4 ModelViewParmSubset_5.append()
    dend_1 ModelViewParmSubset_5.append()
    axon_1 ModelViewParmSubset_5.append()
    dend_26 ModelViewParmSubset_5.append()
    dend_23 ModelViewParmSubset_5.append()
    dend_17 ModelViewParmSubset_5.append()
    dend_14 ModelViewParmSubset_5.append()
    dend_9 ModelViewParmSubset_5.append()
    dend_8 ModelViewParmSubset_5.append()
    dend_3 ModelViewParmSubset_5.append()
    dend_2 ModelViewParmSubset_5.append()
    dend_28 ModelViewParmSubset_5.append()
    dend_27 ModelViewParmSubset_5.append()
    dend_25 ModelViewParmSubset_5.append()
    dend_24 ModelViewParmSubset_5.append()
    dend_19 ModelViewParmSubset_5.append()
    dend_18 ModelViewParmSubset_5.append()
    dend_16 ModelViewParmSubset_5.append()
    dend_15 ModelViewParmSubset_5.append()
    dend_11 ModelViewParmSubset_5.append()
    dend_10 ModelViewParmSubset_5.append()
    dend_30 ModelViewParmSubset_5.append()
    dend_29 ModelViewParmSubset_5.append()
    dend_21 ModelViewParmSubset_5.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_20 ModelViewParmSubset_5.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_0 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_13 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_7 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_6 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_1 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_23 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_14 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_8 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_3 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_2 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_27 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_19 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_16 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_15 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_29 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_21 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_12 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_5 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_22 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_26 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_28 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_17 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_4 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_9 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_30 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_10 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_11 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_18 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_24 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_25 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_20 OneSecGrp_SectionRef_34.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_12, dend_12, dend_12, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_26, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_17, dend_17, dend_17, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_11, dend_11, dend_11, dend_11, dend_10, dend_10, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_26 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_9 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_3 all.append()
    dend_3 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_21 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.993125  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.0  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.005611  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.068459995  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.517764  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 6.3E-5  // units: S cm-2
        e_pas_nml2 = -64.6017  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 3.45E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.077616  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.002099  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 1.13999995E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.26087198  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-5  // units: S cm-2
        e_pas_nml2 = -69.78141  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 3.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.395881  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009986  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 5.0100003E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009728  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 2.7999999E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cACint_237_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cACint_237_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_0 nseg = 3
    dend_13 nseg = 3
    dend_7 nseg = 3
    dend_6 nseg = 11
    dend_1 nseg = 5
    dend_23 nseg = 3
    dend_14 nseg = 9
    dend_8 nseg = 15
    dend_3 nseg = 3
    dend_2 nseg = 5
    dend_27 nseg = 19
    dend_19 nseg = 5
    dend_16 nseg = 7
    dend_15 nseg = 3
    dend_29 nseg = 9
    dend_21 nseg = 5
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cACint209_L23_BTC_59062d6e7d_0_0


