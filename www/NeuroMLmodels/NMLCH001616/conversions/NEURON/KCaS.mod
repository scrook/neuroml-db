TITLE Mod file for component: Component(id=KCaS type=ionChannelHH)

COMMENT

    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.3
         org.neuroml.model   v1.5.3
         jLEMS               v0.9.9.0

ENDCOMMENT

NEURON {
    SUFFIX KCaS
    USEION ca READ cai
    USEION k READ ek WRITE ik VALENCE 1 ? Assuming valence = 1; TODO check this!!
    
    RANGE gion                           
    RANGE gmax                              : Will be changed when ion channel mechanism placed on cell!
    RANGE conductance                       : parameter
    
    RANGE g                                 : exposure
    
    RANGE fopen                             : exposure
    RANGE q_instances                       : parameter
    
    RANGE q_alpha                           : exposure
    
    RANGE q_beta                            : exposure
    
    RANGE q_tau                             : exposure
    
    RANGE q_inf                             : exposure
    
    RANGE q_rateScale                       : exposure
    
    RANGE q_fcond                           : exposure
    RANGE q_forwardRate_TIME_SCALE          : parameter
    RANGE q_forwardRate_CONC_SCALE          : parameter
    
    RANGE q_forwardRate_r                   : exposure
    RANGE q_reverseRate_TIME_SCALE          : parameter
    
    RANGE q_reverseRate_r                   : exposure
    RANGE q_q10Settings_q10Factor           : parameter
    RANGE q_q10Settings_experimentalTemp    : parameter
    RANGE q_q10Settings_TENDEGREES          : parameter
    
    RANGE q_q10Settings_q10                 : exposure
    RANGE q_forwardRate_ca_conc_i           : derived variable
    RANGE conductanceScale                  : derived variable
    RANGE fopen0                            : derived variable
    
}

UNITS {
    
    (nA) = (nanoamp)
    (uA) = (microamp)
    (mA) = (milliamp)
    (A) = (amp)
    (mV) = (millivolt)
    (mS) = (millisiemens)
    (uS) = (microsiemens)
    (molar) = (1/liter)
    (kHz) = (kilohertz)
    (mM) = (millimolar)
    (um) = (micrometer)
    (umol) = (micromole)
    (S) = (siemens)
    
}

PARAMETER {
    
    gmax = 0  (S/cm2)                       : Will be changed when ion channel mechanism placed on cell!
    
    conductance = 1.0E-6 (uS)
    q_instances = 2 
    q_forwardRate_TIME_SCALE = 1 (ms)
    q_forwardRate_CONC_SCALE = 1 (mM)
    q_reverseRate_TIME_SCALE = 1 (ms)
    q_q10Settings_q10Factor = 3 
    q_q10Settings_experimentalTemp = 307.15 (K)
    q_q10Settings_TENDEGREES = 10 (K)
}

ASSIGNED {
    
    gion   (S/cm2)                          : Transient conductance density of the channel? Standard Assigned variables with ionChannel
    v (mV)
    celsius (degC)
    temperature (K)
    ek (mV)
    ik (mA/cm2)
    
    cai (mM)
    
    cao (mM)
    
    
    q_forwardRate_ca_conc_i                : derived variable
    
    q_forwardRate_r (kHz)                  : derived variable
    
    q_reverseRate_r (kHz)                  : derived variable
    
    q_q10Settings_q10                      : derived variable
    
    q_rateScale                            : derived variable
    
    q_alpha (kHz)                          : derived variable
    
    q_beta (kHz)                           : derived variable
    
    q_fcond                                : derived variable
    
    q_inf                                  : derived variable
    
    q_tau (ms)                             : derived variable
    
    conductanceScale                       : derived variable
    
    fopen0                                 : derived variable
    
    fopen                                  : derived variable
    
    g (uS)                                 : derived variable
    rate_q_q (/ms)
    
}

STATE {
    q_q  
    
}

INITIAL {
    temperature = celsius + 273.15
    
    rates()
    rates() ? To ensure correct initialisation.
    
    q_q = q_inf
    
}

BREAKPOINT {
    
    SOLVE states METHOD cnexp
    
    ? DerivedVariable is based on path: conductanceScaling[*]/factor, on: Component(id=KCaS type=ionChannelHH), from conductanceScaling; null
    ? Path not present in component, using factor: 1
    
    conductanceScale = 1 
    
    ? DerivedVariable is based on path: gates[*]/fcond, on: Component(id=KCaS type=ionChannelHH), from gates; Component(id=q type=gateHHrates)
    ? multiply applied to all instances of fcond in: <gates> ([Component(id=q type=gateHHrates)]))
    fopen0 = q_fcond ? path based, prefix = 
    
    fopen = conductanceScale  *  fopen0 ? evaluable
    g = conductance  *  fopen ? evaluable
    gion = gmax * fopen 
    
    ik = gion * (v - ek)
    
}

DERIVATIVE states {
    rates()
    q_q' = rate_q_q 
    
}

PROCEDURE rates() {
    LOCAL caConc
    
    caConc = cai
    
    q_forwardRate_ca_conc_i = caConc /  q_forwardRate_CONC_SCALE ? evaluable
    q_forwardRate_r = (12.5 *  q_forwardRate_ca_conc_i  *  q_forwardRate_ca_conc_i ) /  q_forwardRate_TIME_SCALE ? evaluable
    q_reverseRate_r = 2.5e-4 /  q_reverseRate_TIME_SCALE ? evaluable
    q_q10Settings_q10 = q_q10Settings_q10Factor ^((temperature -  q_q10Settings_experimentalTemp )/ q_q10Settings_TENDEGREES ) ? evaluable
    ? DerivedVariable is based on path: q10Settings[*]/q10, on: Component(id=q type=gateHHrates), from q10Settings; Component(id=null type=q10ExpTemp)
    ? multiply applied to all instances of q10 in: <q10Settings> ([Component(id=null type=q10ExpTemp)]))
    q_rateScale = q_q10Settings_q10 ? path based, prefix = q_
    
    ? DerivedVariable is based on path: forwardRate/r, on: Component(id=q type=gateHHrates), from forwardRate; Component(id=null type=Bezaire_KCaS_alphaq)
    q_alpha = q_forwardRate_r ? path based, prefix = q_
    
    ? DerivedVariable is based on path: reverseRate/r, on: Component(id=q type=gateHHrates), from reverseRate; Component(id=null type=Bezaire_KCaS_betaq)
    q_beta = q_reverseRate_r ? path based, prefix = q_
    
    q_fcond = q_q ^ q_instances ? evaluable
    q_inf = q_alpha /( q_alpha + q_beta ) ? evaluable
    q_tau = 1/(( q_alpha + q_beta ) *  q_rateScale ) ? evaluable
    
     
    rate_q_q = ( q_inf  -  q_q ) /  q_tau ? Note units of all quantities used here need to be consistent!
    
     
    
     
    
     
    
     
    
}

