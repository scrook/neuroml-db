// Cell: cSTUT189_L6_NBC_23c8220f56_0_0
/*
{
  "id" : "cSTUT189_L6_NBC_23c8220f56_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-7.79996, 1.63899, 0.0, 2.31456", "-7.07575, 1.4414, 0.0, 3.87478", "-6.35154, 1.2438, 0.0, 5.48504", "-5.62733, 1.04621, 0.0, 6.75924", "-4.90312, 0.848615, 0.0, 7.77214", "-4.17891, 0.65102, 0.0, 8.39732", "-3.4547, 0.453425, 0.0, 9.01032", "-2.73049, 0.255831, 0.0, 9.61582", "-2.00628, 0.0582363, 0.0, 9.97495", "-1.28207, -0.139358, 0.0, 10.1182", "-0.557856, -0.336953, 0.0, 10.2615", "0.166353, -0.534547, 0.0, 10.4039", "0.890563, -0.732142, 0.0, 10.3605", "1.61477, -0.929737, 0.0, 10.3021", "2.33898, -1.12733, 0.0, 10.2398", "3.06319, -1.32493, 0.0, 10.0638", "3.7874, -1.52252, 0.0, 9.71016", "4.51161, -1.72011, 0.0, 8.98989", "5.23582, -1.91771, 0.0, 7.92103", "5.96003, -2.1153, 0.0, 6.49304", "6.68424, -2.3129, 0.0, 3.64119" ]
  }, {
    "name" : "dend_34",
    "id" : "dend_34",
    "points3d" : [ "2.72858, -5.1883, 7.36, 1.36", "2.72858, -5.1883, 7.36, 1.36", "2.98588, -6.57933, 7.16693, 1.14", "3.33417, -8.46236, 6.90558, 0.91", "3.78564, -10.9032, 6.56682, 0.91", "4.05842, -12.3779, 6.36214, 0.91", "4.4782, -14.6474, 6.04714, 0.91" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_31",
    "id" : "dend_31",
    "points3d" : [ "-1.14142, -3.00331, -3.98, 0.68", "-1.14142, -3.00331, -3.98, 0.68", "-1.92337, -3.63889, -5.32051, 0.68", "-2.66072, -4.15563, -6.5921, 0.68", "-3.20217, -4.52311, -7.51066, 0.68", "-3.82914, -4.93187, -8.5712, 0.68", "-4.54574, -5.34934, -9.72367, 0.68", "-5.26402, -5.73821, -10.8862, 0.68", "-5.91674, -6.03932, -11.9555, 0.68", "-6.62646, -6.32494, -13.0871, 0.68", "-7.43092, -6.62834, -14.3122, 0.68", "-8.37344, -6.95524, -15.6698, 0.68" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "4.57856, -3.78231, 2.8, 0.68", "4.57856, -3.78231, 2.8, 0.68", "6.12268, -5.74135, 3.15249, 0.68", "6.97855, -6.8804, 3.3768, 0.68", "8.51473, -8.93449, 3.81456, 0.68", "9.83462, -10.6237, 4.16826, 0.68", "11.2392, -12.3773, 4.50394, 0.68", "12.2894, -13.6402, 4.7284, 0.68", "13.8882, -15.4837, 5.05989, 0.45", "15.3896, -17.2392, 5.39036, 0.68", "17.6066, -19.838, 5.98219, 0.68", "19.2154, -21.6846, 6.48242, 0.68", "20.3444, -22.9936, 6.90388, 0.68", "21.3527, -24.145, 7.33204, 0.68", "22.3745, -25.3297, 7.80767, 0.68", "23.6693, -26.8685, 8.47038, 0.68", "24.7978, -28.1925, 9.13549, 0.68", "26.1108, -29.6818, 9.99717, 0.45", "27.0446, -30.72, 10.6363, 0.45", "28.6857, -32.4898, 11.7096, 0.45", "30.0699, -33.8879, 12.5737, 0.45", "31.1084, -34.8991, 13.2323, 0.45", "32.0316, -35.7644, 13.8591, 0.45", "33.2014, -36.8662, 14.7868, 0.45", "34.4334, -38.1485, 15.9605, 0.45", "35.2998, -39.1046, 16.9463, 0.45", "35.9289, -39.9069, 17.7483, 0.45", "36.6158, -40.8425, 18.601, 0.45", "37.3835, -41.9408, 19.5381, 0.45", "38.3566, -43.411, 20.7652, 0.45", "39.0734, -44.5853, 21.7287, 0.45", "39.7548, -45.751, 22.7014, 0.23", "40.5072, -46.9863, 23.7118, 0.23", "41.3841, -48.338, 24.797, 0.23", "41.9576, -49.1946, 25.4635, 0.23", "42.5416, -50.1194, 26.2128, 0.23", "43.4947, -51.8036, 27.5616, 0.23" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "6.16864, 1.4047, -0.84, 2.27", "6.16864, 1.4047, -0.84, 2.27", "7.38736, 2.02525, -1.58849, 1.82", "9.03562, 2.86452, -2.60079, 1.36", "10.2822, 3.49925, -3.36638, 1.36" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "3.79865, -4.3428, 5.46, 0.91", "3.79865, -4.3428, 5.46, 0.91", "4.87699, -5.4844, 6.09244, 0.91", "6.11168, -6.72418, 6.84967, 0.68", "7.36516, -7.86498, 7.67114, 0.68", "8.32048, -8.67835, 8.34841, 0.91", "9.35578, -9.46616, 9.1456, 0.91", "10.4192, -10.0593, 9.99379, 0.68", "11.7423, -10.4984, 11.0784, 0.68", "12.8206, -10.7461, 11.9991, 0.68", "13.4124, -10.8725, 12.5126, 0.68", "14.6279, -11.1279, 13.5578, 0.68", "16.4958, -11.5336, 15.0367, 0.45", "17.8435, -11.8503, 16.0, 0.45", "19.2607, -12.2152, 16.8681, 0.45", "20.6697, -12.6423, 17.6655, 0.45", "22.2385, -13.1863, 18.4836, 0.45", "23.4304, -13.6778, 19.0568, 0.45", "25.0967, -14.4488, 19.8324, 0.68", "27.0508, -15.3418, 20.6442, 0.68" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "0.288636, -4.27631, 6.82, 0.91", "0.288636, -4.27631, 6.82, 0.91", "-0.890178, -5.93692, 7.76582, 0.91", "-2.09406, -7.50125, 8.72446, 0.91", "-3.16574, -8.89379, 9.57782, 0.91", "-4.07741, -10.0785, 10.3038, 0.91", "-5.04395, -11.3344, 11.0734, 0.91", "-5.91749, -12.4283, 11.8055, 0.91", "-6.76444, -13.3878, 12.6044, 0.91" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-6.31134, 0.63519, 6.86, 0.91", "-6.31134, 0.63519, 6.86, 0.91", "-7.16464, 0.63519, 7.18789, 0.91", "-9.05177, 0.63519, 7.91302, 0.91" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-6.99139, 1.4617, -3.54, 0.91", "-6.99139, 1.4617, -3.54, 0.91", "-8.11462, 1.61852, -3.83855, 0.91", "-9.48289, 1.74001, -4.22266, 0.91", "-11.4023, 1.87534, -4.82956, 0.91", "-12.3932, 1.93075, -5.17675, 0.91", "-13.909, 1.98776, -5.74337, 0.91", "-15.3281, 1.99607, -6.31237, 0.91", "-16.7084, 1.97204, -6.88291, 0.91", "-18.2941, 1.91204, -7.558, 0.68", "-20.1859, 1.80085, -8.38268, 0.91", "-21.5891, 1.71373, -9.0086, 0.91", "-23.1556, 1.63918, -9.74136, 0.91", "-25.4829, 1.55819, -10.8095, 0.91" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-4.04144, 3.9127, 5.18, 0.91", "-4.04144, 3.9127, 5.18, 0.91", "-4.7177, 5.74672, 6.3361, 0.91", "-5.0629, 7.25199, 7.22538, 0.68", "-5.20106, 8.64963, 7.99612, 0.68", "-5.21535, 9.67983, 8.54932, 0.68", "-5.15114, 11.0674, 9.27785, 0.68", "-4.96681, 12.3276, 9.94854, 0.68", "-4.56232, 14.0458, 10.9223, 0.68", "-4.15803, 15.6998, 11.8739, 0.68", "-3.8608, 16.8508, 12.5783, 0.68", "-3.60488, 17.8815, 13.2812, 0.68", "-3.33723, 19.0063, 14.1249, 0.68", "-3.11894, 20.0665, 15.0159, 0.45", "-2.89585, 21.3575, 16.2964, 0.45", "-2.82105, 22.5102, 17.6128, 0.45", "-2.81547, 23.4425, 18.7619, 0.45", "-2.82396, 24.2158, 19.7365, 0.68", "-2.82255, 25.0107, 20.7046, 0.45", "-2.80571, 25.9101, 21.7373, 0.45", "-2.87025, 26.5771, 22.4872, 0.45", "-3.16718, 27.57, 23.5333, 0.45", "-3.49426, 28.4223, 24.4414, 0.45", "-3.82692, 29.4482, 25.5227, 0.45", "-4.02246, 30.362, 26.4087, 0.45", "-4.25602, 31.5539, 27.4867, 0.45", "-4.49056, 32.4721, 28.3401, 0.45", "-4.81562, 33.2713, 29.1446, 0.45", "-5.3897, 34.3754, 30.2961, 0.45", "-5.83328, 35.1747, 31.1378, 0.45", "-6.23007, 36.0173, 32.0186, 0.45", "-6.43196, 36.6384, 32.6541, 0.45", "-6.76962, 37.9919, 33.9767, 0.45", "-6.99099, 39.0551, 34.9491, 0.45", "-7.08683, 39.7333, 35.6017, 0.45", "-6.97288, 40.6604, 36.4943, 0.45", "-6.63521, 41.6469, 37.4372, 0.45", "-6.12284, 42.7114, 38.472, 0.45", "-5.60393, 43.6471, 39.3579, 0.45", "-4.87835, 44.8006, 40.464, 0.45", "-3.72621, 46.6132, 42.2312, 0.23", "-3.29986, 47.2431, 42.8699, 0.23", "-2.67227, 48.1359, 43.7689, 0.23", "-1.97549, 49.0752, 44.6726, 0.23", "-1.22341, 50.0514, 45.5494, 0.23", "-0.477, 50.9919, 46.3541, 0.23", "0.536559, 52.3146, 47.4856, 0.23", "1.72072, 53.7613, 48.7065, 0.23", "2.89274, 55.0765, 49.82, 0.23", "4.01993, 56.2519, 50.865, 0.23", "4.90071, 57.2295, 51.6798, 0.23" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "6.68424, -2.3129, 0.0, 0.767491", "21.1553, -6.2612, 0.0, 0.767491", "35.6263, -10.2095, 0.0, 0.767491" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_36",
    "id" : "dend_36",
    "points3d" : [ "4.4782, -14.6474, 6.04714, 0.68", "5.36533, -15.4821, 5.95352, 0.68", "6.89752, -16.9733, 5.71587, 0.68", "8.36946, -18.4562, 5.46192, 0.68", "9.70628, -19.8184, 5.23461, 0.68", "11.3528, -21.6033, 4.96119, 0.68", "12.8007, -23.3127, 4.72429, 0.68", "14.052, -24.958, 4.49468, 0.68", "14.7807, -26.0112, 4.33724, 0.68", "16.0801, -28.0229, 4.02395, 0.68", "17.2587, -29.9259, 3.72242, 0.68", "18.209, -31.5921, 3.47554, 0.68", "19.185, -33.4317, 3.26533, 0.45", "19.9884, -35.0925, 3.08324, 0.45", "20.7262, -36.7697, 2.82592, 0.45", "21.3425, -38.2404, 2.49988, 0.45", "22.2052, -40.1963, 1.88798, 0.45", "22.8808, -41.7396, 1.29391, 0.45", "23.5297, -43.2962, 0.590039, 0.68", "24.1979, -44.8365, -0.199064, 0.68", "24.9777, -46.527, -1.14024, 0.68", "25.8258, -48.1502, -2.1163, 0.45", "26.769, -49.6993, -3.09844, 0.45", "27.44, -50.7453, -3.7305, 0.45", "28.6693, -52.5194, -4.67653, 0.45", "29.2679, -53.3275, -5.0374, 0.45", "30.13, -54.4077, -5.46209, 0.45", "31.2499, -55.6799, -5.94682, 0.45", "32.8192, -57.2506, -6.62235, 0.45", "34.2914, -58.5872, -7.30757, 0.45", "35.7849, -59.8972, -8.12196, 0.45", "36.7512, -60.6666, -8.70345, 0.45", "37.8931, -61.4884, -9.43354, 0.45", "39.4087, -62.527, -10.4586, 0.45", "41.0819, -63.6702, -11.6774, 0.45", "42.7372, -64.8912, -12.9419, 0.45", "43.8315, -65.717, -13.831, 0.45", "44.9117, -66.5578, -14.7224, 0.45", "45.5502, -67.0753, -15.2493, 0.45", "46.489, -67.8584, -15.9901, 0.45", "47.6361, -68.8865, -16.8873, 0.45", "48.8233, -69.9694, -17.8365, 0.23", "49.9417, -71.0554, -18.7595, 0.23", "50.8739, -71.9824, -19.5688, 0.23", "51.887, -73.0816, -20.5574, 0.23", "53.0288, -74.5015, -21.7727, 0.23", "54.2095, -76.1954, -23.0806, 0.23", "54.4561, -76.5688, -23.3369, 0.23", "55.018, -77.4472, -23.8836, 0.23", "56.0178, -79.1014, -24.8238, 0.23", "56.8239, -80.5339, -25.5802, 0.23", "58.0223, -82.697, -26.6603, 0.23", "59.0144, -84.6061, -27.5732, 0.23", "59.8295, -86.3025, -28.3991, 0.23", "60.7298, -88.3962, -29.3993, 0.23", "61.425, -90.0572, -30.1934, 0.23", "61.7166, -90.8366, -30.5651, 0.23", "62.0272, -91.8687, -31.0131, 0.23", "62.4944, -93.5077, -31.6408, 0.23", "62.8581, -94.6817, -32.0479, 0.23", "63.4932, -96.5752, -32.6021, 0.23", "64.2131, -98.5078, -33.0618, 0.23", "65.0401, -100.532, -33.4343, 0.23", "65.782, -102.195, -33.6693, 0.23", "66.1947, -103.027, -33.7625, 0.23", "67.0552, -104.6, -33.9258, 0.23", "68.1745, -106.643, -34.1277, 0.23", "69.2199, -108.388, -34.3196, 0.23", "70.0556, -109.655, -34.4884, 0.23", "70.7264, -110.658, -34.6355, 0.23", "71.4395, -111.745, -34.8097, 0.23", "72.1751, -112.93, -35.0346, 0.23", "73.7376, -115.825, -35.6664, 0.23", "74.7863, -118.135, -36.1739, 0.23", "75.3973, -119.765, -36.5523, 0.23", "75.8817, -121.307, -36.9273, 0.23", "76.4226, -123.329, -37.444, 0.23", "76.9904, -125.661, -38.0424, 0.23", "77.8549, -130.035, -39.1575, 0.23", "78.2059, -132.144, -39.6912, 0.23", "78.4924, -133.903, -40.155, 0.23", "78.71, -135.125, -40.4889, 0.23", "85.0128, -142.191, -42.7146, 0.23" ],
    "parent" : "dend_34",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_35",
    "id" : "dend_35",
    "points3d" : [ "4.4782, -14.6474, 6.04714, 0.45", "4.36636, -15.9884, 4.31542, 0.45", "4.39218, -17.2274, 2.61426, 0.45", "4.39806, -17.8369, 1.77027, 0.45", "4.41744, -19.0421, 0.188825, 0.45", "4.50801, -20.0183, -1.09001, 0.45", "4.67042, -20.9501, -2.29619, 0.45", "4.96305, -21.8216, -3.40705, 0.45", "5.39064, -22.6718, -4.45166, 0.45", "5.97132, -23.5934, -5.50581, 0.45", "7.02015, -25.0957, -7.04656, 0.45", "7.83337, -26.2746, -8.14363, 0.45", "8.58402, -27.5125, -9.22571, 0.45", "9.30194, -28.6157, -10.2422, 0.45", "10.2313, -29.9537, -11.5845, 0.45", "10.7052, -30.6701, -12.4052, 0.45", "11.2677, -31.6538, -13.5695, 0.45", "11.9201, -32.8463, -15.2066, 0.23", "12.6962, -34.3217, -17.484, 0.23", "13.295, -35.4135, -19.2934, 0.23", "13.9973, -36.6424, -21.4934, 0.23", "14.3926, -37.3088, -22.7342, 0.23", "15.1675, -38.7403, -25.3877, 0.23", "15.7189, -39.881, -27.4492, 0.23", "16.2004, -41.1244, -29.5133, 0.23", "16.7279, -42.5329, -31.8152, 0.23", "17.0541, -43.416, -33.2201, 0.23", "17.5588, -44.9049, -35.604, 0.23", "17.758, -45.7001, -36.7436, 0.23", "17.934, -46.6921, -38.1617, 0.23", "19.7162, -53.7397, -44.6261, 0.23" ],
    "parent" : "dend_34",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_33",
    "id" : "dend_33",
    "points3d" : [ "-8.37344, -6.95524, -15.6698, 0.45", "-9.56623, -7.34503, -16.8062, 0.45", "-10.6073, -7.64383, -17.7993, 0.45", "-11.486, -7.89897, -18.6563, 0.45", "-12.3872, -8.15991, -19.468, 0.45", "-13.4514, -8.48808, -20.4223, 0.45", "-14.3876, -8.76383, -21.2672, 0.45", "-15.4969, -9.06886, -22.3512, 0.45", "-16.5713, -9.33933, -23.4462, 0.45", "-18.0827, -9.73679, -25.0082, 0.45", "-18.9353, -9.97596, -25.913, 0.45", "-20.0369, -10.3282, -27.144, 0.45", "-20.8831, -10.6302, -28.1854, 0.45", "-21.5517, -10.8773, -29.0802, 0.45", "-22.2625, -11.1422, -30.1107, 0.45", "-22.8923, -11.3995, -31.1673, 0.45", "-23.533, -11.6794, -32.2456, 0.45", "-24.2261, -12.0898, -33.4702, 0.45", "-30.8276, -13.593, -40.813, 0.45", "-36.7894, -13.6387, -48.8414, 0.45", "-41.8235, -13.1786, -57.4683, 0.45" ],
    "parent" : "dend_31",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_32",
    "id" : "dend_32",
    "points3d" : [ "-8.37344, -6.95524, -15.6698, 0.45", "-8.1126, -7.948, -16.7126, 0.45", "-7.93863, -8.75426, -17.5926, 0.45", "-7.72833, -10.1127, -19.038, 0.45", "-7.5306, -11.2378, -20.2958, 0.45", "-7.3865, -11.9593, -21.178, 0.45", "-7.18067, -12.7598, -22.2183, 0.45", "-6.85696, -13.6592, -23.5663, 0.45", "-6.70297, -14.0366, -24.1544, 0.45", "-6.38177, -14.9559, -25.4459, 0.45", "-6.15893, -15.8844, -26.568, 0.45", "-5.99474, -17.0228, -27.7338, 0.45", "-5.9279, -17.9547, -28.4621, 0.45", "-5.85658, -18.7186, -29.0212, 0.45", "-5.63258, -20.2241, -30.2167, 0.45", "-5.38994, -21.5929, -31.3133, 0.45", "-5.03181, -22.9281, -32.4419, 0.45", "-4.51604, -24.1299, -33.6973, 0.45", "-3.63005, -25.5495, -35.6837, 0.45", "-2.72786, -26.5951, -37.5779, 0.23", "-2.36589, -26.9185, -38.3222, 0.23", "-1.69453, -27.406, -39.7796, 0.23", "-0.865411, -27.9889, -41.5968, 0.23", "0.127167, -28.6904, -43.8621, 0.23", "0.517403, -29.0387, -44.8349, 0.23", "1.2171, -29.8169, -46.8229, 0.23", "1.66591, -30.3883, -48.247, 0.23", "2.3725, -31.3171, -50.7011, 0.23", "3.82411, -36.5517, -58.9188, 0.23" ],
    "parent" : "dend_31",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "10.2822, 3.49925, -3.36638, 1.36", "10.3578, 3.51613, -3.38812, 1.36", "11.7231, 3.82089, -3.7807, 1.82" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "10.2822, 3.49925, -3.36638, 0.45", "9.43696, 3.84624, -4.18933, 0.45", "8.5462, 4.19699, -4.94405, 0.45", "7.35469, 4.70104, -5.93219, 0.45", "6.43941, 5.16366, -6.70644, 0.45", "5.60438, 5.61465, -7.43333, 0.45", "4.73931, 6.1276, -8.25939, 0.45", "3.97746, 6.63242, -9.14671, 0.45", "3.55382, 7.01866, -9.8206, 0.45", "3.10592, 7.60561, -10.8812, 0.45", "2.67898, 8.34895, -12.3057, 0.45", "2.31417, 9.16445, -13.99, 0.45", "1.90491, 10.1711, -16.2535, 0.45", "1.57486, 11.0127, -18.32, 0.45", "1.23895, 11.7205, -20.2461, 0.45", "0.811057, 12.4583, -22.4469, 0.45", "0.324231, 13.1717, -24.5849, 0.45", "-0.0693951, 13.6056, -25.9029, 0.45", "-0.459482, 13.9192, -26.8357, 0.45", "-1.30001, 14.4701, -28.4379, 0.45", "-2.08468, 14.954, -29.7287, 0.45", "-2.79398, 15.373, -30.7966, 0.45", "-3.53051, 15.7897, -31.9058, 0.45", "-4.40102, 16.2959, -33.2021, 0.45", "-4.9448, 16.6231, -34.0266, 0.45", "-5.95919, 17.2811, -35.752, 0.23", "-6.71643, 17.8459, -37.1631, 0.23", "-8.05095, 18.9964, -39.923, 0.23", "-8.70292, 19.5899, -41.3381, 0.23", "-9.43797, 20.3039, -43.027, 0.23", "-10.4931, 21.3763, -45.4879, 0.23", "-11.258, 22.1866, -47.2534, 0.23", "-12.1912, 23.3007, -49.4719, 0.23", "-12.9411, 24.3691, -51.3778, 0.23", "-16.7505, 29.0508, -59.201, 0.23" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "27.0508, -15.3418, 20.6442, 0.45", "27.6843, -15.6849, 21.522, 0.45", "28.8149, -16.0896, 22.8064, 0.45", "30.1323, -16.4635, 24.1136, 0.45", "30.8222, -16.6802, 24.7803, 0.45", "31.7424, -16.9657, 25.693, 0.45", "32.9093, -17.2999, 26.8965, 0.45", "34.3958, -17.6349, 28.4316, 0.45", "35.2839, -17.8119, 29.3391, 0.45", "36.2766, -17.9648, 30.3572, 0.45", "37.2182, -18.0633, 31.3216, 0.45", "38.2293, -18.1474, 32.3241, 0.45", "39.3447, -18.2788, 33.4484, 0.45", "40.5623, -18.4409, 34.6035, 0.45", "41.6897, -18.5498, 35.53, 0.45", "42.9647, -18.671, 36.4507, 0.45", "44.3694, -18.8832, 37.3629, 0.45", "45.9584, -19.2072, 38.2541, 0.45", "47.8556, -19.5873, 39.0833, 0.45", "49.701, -19.8711, 39.7506, 0.23", "51.4087, -20.1356, 40.3184, 0.23", "53.0909, -20.4173, 40.8204, 0.23", "55.4106, -20.7704, 41.4368, 0.23", "59.1934, -21.2569, 42.3298, 0.23", "62.2343, -21.628, 42.9841, 0.23" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "27.0508, -15.3418, 20.6442, 0.45", "28.7467, -16.336, 20.9282, 0.45", "29.6161, -16.7433, 21.098, 0.45", "31.4001, -17.5609, 21.4335, 0.23", "32.815, -18.1632, 21.6789, 0.23", "34.1107, -18.631, 21.8821, 0.68", "35.8114, -19.1975, 22.1412, 0.45", "37.8368, -19.7375, 22.4428, 0.45", "40.2639, -20.2473, 22.7991, 0.45", "41.8137, -20.51, 23.022, 0.45", "43.7889, -20.7774, 23.3198, 0.45", "46.1494, -21.0709, 23.6771, 0.45", "48.1776, -21.2909, 23.965, 0.45", "49.3802, -21.4081, 24.1438, 0.45", "50.5494, -21.4551, 24.3519, 0.45", "51.7585, -21.5321, 24.6076, 0.45" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-6.76444, -13.3878, 12.6044, 0.45", "-6.96572, -13.1424, 13.3694, 0.45", "-7.40688, -12.9086, 14.8853, 0.45", "-7.73682, -12.9487, 15.9465, 0.45", "-8.09417, -13.1943, 16.9989, 0.45", "-8.2586, -13.3228, 17.4301, 0.45", "-8.50716, -13.5366, 18.1407, 0.45", "-8.86614, -13.9952, 19.3688, 0.45", "-9.11694, -14.4145, 20.2654, 0.45", "-9.38413, -15.0215, 21.3776, 0.45", "-9.43284, -15.2804, 21.8608, 0.45", "-9.44043, -15.7562, 22.779, 0.45", "-9.40624, -16.2973, 23.8816, 0.45", "-9.35476, -16.9784, 25.2584, 0.45", "-9.25391, -17.5618, 26.3907, 0.45", "-9.05303, -18.2111, 27.7467, 0.45", "-8.81829, -18.7878, 28.9816, 0.45", "-8.56099, -19.2944, 30.1074, 0.45", "-8.27221, -19.7685, 31.2666, 0.45", "-7.98706, -20.194, 32.5277, 0.45", "-7.76184, -20.6412, 33.9952, 0.45", "-7.66136, -20.9405, 34.864, 0.45", "-7.61386, -21.2179, 35.6299, 0.45", "-7.7055, -21.6432, 36.707, 0.45", "-8.05518, -22.1758, 37.8732, 0.45", "-8.39675, -22.6029, 38.6151, 0.45", "-8.96343, -23.3072, 39.617, 0.45", "-9.86881, -24.2319, 40.9293, 0.45", "-10.6873, -24.9753, 41.9847, 0.45", "-11.255, -25.5315, 42.7234, 0.45", "-11.9164, -26.2236, 43.6272, 0.45", "-12.4602, -26.7815, 44.3697, 0.45", "-13.4154, -27.7054, 45.5768, 0.45", "-13.9647, -28.3351, 46.3184, 0.45", "-14.7486, -29.5042, 47.5448, 0.45", "-15.4164, -30.5875, 48.6548, 0.45", "-15.6803, -31.0322, 49.137, 0.45", "-16.0945, -31.9122, 50.144, 0.45", "-16.3309, -32.8986, 51.2752, 0.45", "-16.3032, -33.8912, 52.5328, 0.45", "-16.1165, -34.4839, 53.3695, 0.45", "-15.6666, -35.0933, 54.1813, 0.45", "-14.9458, -35.6286, 54.902, 0.45", "-13.419, -36.3529, 55.8966, 0.45", "-11.7248, -36.8873, 56.7001, 0.45", "-9.85068, -37.2641, 57.3668, 0.23", "-7.25436, -37.755, 58.1619, 0.23", "-4.16795, -38.318, 58.9525, 0.23", "-1.96969, -38.6416, 59.4049, 0.23", "-0.509351, -38.7369, 59.6129, 0.23", "1.27341, -38.7332, 59.7584, 0.23" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-6.76444, -13.3878, 12.6044, 0.68", "-7.71486, -13.9003, 12.9798, 0.68", "-9.58348, -14.883, 13.6744, 0.45", "-11.2308, -15.8044, 14.2599, 0.45", "-12.6484, -16.6391, 14.7695, 0.68", "-13.923, -17.4538, 15.2447, 0.68", "-14.6117, -17.9143, 15.5049, 0.68", "-15.9152, -18.8282, 15.983, 0.45", "-17.7483, -20.1716, 16.6131, 0.45", "-18.8039, -20.9925, 16.9423, 0.45", "-20.0584, -22.0009, 17.289, 0.45", "-21.3076, -23.0029, 17.5948, 0.45", "-22.3661, -23.8819, 17.8451, 0.45", "-23.603, -24.9373, 18.1439, 0.68", "-24.6856, -25.8511, 18.3763, 0.68", "-26.5738, -27.4283, 18.7761, 0.68", "-28.3302, -28.8985, 19.1869, 0.45", "-29.9656, -30.338, 19.618, 0.45", "-31.1499, -31.4185, 19.9634, 0.45", "-32.1653, -32.3647, 20.273, 0.45", "-33.6954, -33.7765, 20.745, 0.45", "-34.8791, -34.8606, 21.0907, 0.45", "-36.3673, -36.1774, 21.5034, 0.45", "-37.0126, -36.7324, 21.6766, 0.45", "-38.1757, -37.7566, 21.9785, 0.45", "-39.1063, -38.5682, 22.2029, 0.45", "-40.1709, -39.4535, 22.4007, 0.45", "-41.1643, -40.2291, 22.5488, 0.45", "-42.5621, -41.2194, 22.7096, 0.45", "-43.8538, -42.098, 22.8208, 0.45", "-45.2417, -43.015, 22.9014, 0.45", "-46.2162, -43.6194, 22.928, 0.45", "-47.7119, -44.5528, 22.953, 0.45", "-49.5002, -45.7004, 22.9852, 0.45", "-50.9785, -46.6543, 23.061, 0.45", "-52.1377, -47.4254, 23.1791, 0.45", "-53.6465, -48.5098, 23.4191, 0.45", "-55.5492, -49.9438, 23.8409, 0.45", "-57.081, -51.1787, 24.2895, 0.45", "-58.4936, -52.4127, 24.8029, 0.45", "-60.2645, -54.0305, 25.5619, 0.45", "-61.6881, -55.3171, 26.247, 0.45", "-62.5896, -56.1327, 26.7193, 0.45", "-64.2418, -57.5726, 27.5998, 0.45", "-65.5714, -58.6681, 28.2814, 0.45", "-66.6905, -59.5777, 28.8322, 0.45", "-68.8904, -61.3869, 29.8674, 0.45", "-69.99, -62.3118, 30.3407, 0.45", "-70.6312, -62.8522, 30.5938, 0.45", "-71.7502, -63.8545, 30.9969, 0.45", "-72.7693, -64.8949, 31.3128, 0.45", "-73.7697, -66.0544, 31.5264, 0.45", "-74.7336, -67.284, 31.6414, 0.45", "-75.7261, -68.5678, 31.6979, 0.45", "-77.0525, -70.4034, 31.6946, 0.45", "-78.3586, -72.3512, 31.6086, 0.45", "-81.0524, -76.4102, 31.2869, 0.45", "-82.1216, -78.0365, 31.1369, 0.45", "-83.2807, -79.8342, 30.9818, 0.45", "-84.8046, -82.2605, 30.8104, 0.45", "-86.426, -84.7868, 30.6995, 0.45", "-87.768, -86.8654, 30.7017, 0.45", "-88.771, -88.4244, 30.8026, 0.45", "-89.9853, -90.1633, 31.0469, 0.45", "-91.7135, -92.5188, 31.4915, 0.45", "-92.2823, -93.2197, 31.672, 0.45", "-93.6773, -94.8255, 32.1857, 0.45", "-94.9282, -96.2262, 32.6764, 0.45", "-96.7144, -98.138, 33.3167, 0.45" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-9.05177, 0.63519, 7.91302, 0.45", "-8.60762, 0.308294, 8.92824, 0.45", "-8.19025, 0.0889516, 10.0995, 0.45", "-8.01225, 0.121575, 10.6297, 0.45", "-7.543, 0.400281, 11.6735, 0.45", "-7.09081, 0.748669, 12.5837, 0.45", "-6.69062, 1.1052, 13.4361, 0.45", "-6.21698, 1.61045, 14.4842, 0.45", "-5.77769, 2.1923, 15.6571, 0.45", "-5.24241, 3.02071, 17.2594, 0.45", "-5.01198, 3.37488, 17.9134, 0.45", "-4.78841, 3.66318, 18.461, 0.45", "-4.4304, 4.05716, 19.2524, 0.45", "-4.23442, 4.25035, 19.79, 0.45", "-4.06296, 4.48912, 20.7634, 0.45", "-4.01563, 4.79209, 21.9152, 0.45", "-3.95587, 5.11763, 23.0181, 0.45", "-3.92552, 5.34629, 23.7392, 0.45", "-3.84893, 5.93055, 25.2962, 0.45", "-3.71642, 6.73684, 27.1803, 0.45", "-3.61282, 7.36497, 28.4922, 0.45", "-3.40266, 8.14906, 29.8941, 0.45", "-3.12398, 9.05111, 31.4676, 0.45", "-2.75604, 10.0045, 33.0675, 0.23", "-2.29667, 11.0048, 34.5346, 0.23", "-1.83539, 11.8478, 35.6399, 0.23", "-0.888297, 13.4533, 37.6796, 0.23" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-9.05177, 0.63519, 7.91302, 0.68", "-9.92407, 0.333625, 8.12433, 0.68", "-11.411, -0.144761, 8.55905, 0.45", "-12.5111, -0.456777, 8.89726, 0.45", "-13.976, -0.811864, 9.40914, 0.45", "-15.0471, -1.0665, 9.84198, 0.45", "-16.4435, -1.45919, 10.488, 0.45", "-17.1148, -1.66386, 10.8636, 0.45", "-18.216, -2.03768, 11.6049, 0.45", "-19.1222, -2.40138, 12.2806, 0.45", "-19.8739, -2.79162, 12.8999, 0.45", "-20.9535, -3.446, 13.9002, 0.45", "-21.3482, -3.71852, 14.3261, 0.68", "-22.0883, -4.31462, 15.2381, 0.68", "-22.8868, -5.00836, 16.3576, 0.68", "-23.8415, -5.77792, 17.6912, 0.45", "-24.6775, -6.31498, 18.8842, 0.45", "-25.5877, -6.77371, 20.2348, 0.45", "-26.2093, -7.08693, 21.2969, 0.45", "-26.5635, -7.27009, 22.002, 0.45", "-27.0206, -7.4978, 23.0684, 0.45", "-27.5138, -7.6829, 24.2815, 0.45", "-27.8178, -7.75994, 25.0384, 0.45", "-28.2772, -7.90742, 26.3296, 0.45", "-28.6735, -8.05443, 27.3821, 0.45", "-28.8919, -8.15798, 27.8859, 0.45", "-29.3948, -8.43451, 28.942, 0.45", "-30.0541, -8.7559, 30.0271, 0.45", "-30.9045, -9.0596, 31.1548, 0.45", "-32.0383, -9.32244, 32.3902, 0.45", "-33.1725, -9.49482, 33.4411, 0.45", "-33.928, -9.59141, 34.0546, 0.45", "-34.9234, -9.71655, 34.7346, 0.45", "-35.7496, -9.82205, 35.2473, 0.45", "-37.072, -9.97646, 36.0496, 0.45", "-38.559, -10.1336, 36.9492, 0.23", "-39.3772, -10.2264, 37.4262, 0.23", "-41.2105, -10.4062, 38.4339, 0.23", "-42.4863, -10.5016, 39.1595, 0.23", "-43.6941, -10.6088, 39.8376, 0.23", "-44.7965, -10.729, 40.4327, 0.23", "-46.2905, -10.8764, 41.2476, 0.23", "-47.8709, -10.9383, 42.0976, 0.23", "-49.4661, -10.8238, 42.9776, 0.23" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-25.4829, 1.55819, -10.8095, 0.68", "-25.9504, 1.66282, -11.3596, 0.68", "-26.3978, 1.82109, -11.8756, 0.68", "-26.9575, 2.01861, -12.4867, 0.68", "-27.9339, 2.29259, -13.3842, 0.68", "-29.0462, 2.59061, -14.3149, 0.68", "-30.3295, 2.98203, -15.2702, 0.68", "-31.3357, 3.32024, -15.947, 0.68", "-32.4676, 3.7375, -16.6364, 0.68", "-33.9782, 4.30898, -17.506, 0.68", "-35.0419, 4.70332, -18.0743, 0.68", "-37.0683, 5.37729, -19.0875, 0.45", "-38.5869, 5.86929, -19.8967, 0.45", "-39.7139, 6.23031, -20.57, 0.45", "-40.996, 6.64668, -21.4438, 0.45", "-42.0431, 6.97388, -22.2702, 0.45", "-42.8036, 7.15963, -22.9335, 0.45", "-44.2732, 7.41011, -24.3463, 0.45", "-45.4951, 7.57818, -25.5445, 0.45", "-46.6999, 7.71932, -26.6495, 0.45", "-47.4568, 7.80702, -27.3492, 0.45", "-48.4898, 7.91488, -28.3238, 0.45", "-49.0735, 7.95572, -28.8379, 0.45", "-49.853, 7.97602, -29.3846, 0.45", "-51.8744, 8.0161, -30.5683, 0.45" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-25.4829, 1.55819, -10.8095, 0.68", "-27.3531, 0.560147, -10.8094, 0.68", "-29.3853, -0.559634, -10.8939, 0.68", "-30.8381, -1.38381, -10.9877, 0.45", "-32.4091, -2.27609, -11.1089, 0.45", "-33.8292, -3.08014, -11.2233, 0.45", "-35.2924, -3.89403, -11.3459, 0.45", "-37.0548, -4.88097, -11.5168, 0.45", "-38.2744, -5.58567, -11.6431, 0.45", "-39.5263, -6.32085, -11.7793, 0.45", "-41.4968, -7.52363, -11.9787, 0.45", "-42.9101, -8.41374, -12.1248, 0.45", "-44.3067, -9.31244, -12.2912, 0.45", "-46.0739, -10.4583, -12.53, 0.45", "-47.6392, -11.4832, -12.7832, 0.45", "-48.5263, -12.0768, -12.9473, 0.45", "-49.7092, -12.8769, -13.1938, 0.45", "-50.4404, -13.3582, -13.3537, 0.45", "-51.915, -14.2943, -13.7026, 0.45", "-53.2909, -15.1868, -14.0447, 0.45", "-54.8979, -16.1935, -14.4386, 0.45", "-56.1265, -16.8691, -14.708, 0.45", "-57.6385, -17.5904, -14.9915, 0.45", "-59.1697, -18.2717, -15.2685, 0.45", "-60.1681, -18.6942, -15.4503, 0.45", "-61.6611, -19.295, -15.7247, 0.45", "-63.7586, -20.0912, -16.0931, 0.45", "-65.3117, -20.6786, -16.3475, 0.45", "-66.5513, -21.1851, -16.5338, 0.45", "-68.1541, -21.9042, -16.757, 0.45", "-68.9672, -22.3022, -16.8618, 0.45", "-70.5074, -23.1735, -17.0958, 0.45", "-72.4627, -24.4125, -17.497, 0.45", "-74.0563, -25.4588, -17.899, 0.45", "-75.938, -26.6832, -18.434, 0.45", "-78.4656, -28.3246, -19.243, 0.23", "-80.5056, -29.6085, -19.9026, 0.23", "-82.8764, -31.0219, -20.6788, 0.23", "-84.8136, -32.1241, -21.2982, 0.23", "-86.9388, -33.2397, -21.9702, 0.23", "-89.3552, -34.4058, -22.7139, 0.23", "-92.5844, -35.865, -23.6645, 0.23", "-94.8266, -36.7714, -24.2614, 0.23", "-97.1174, -37.6066, -24.8138, 0.23", "-98.9398, -38.2367, -25.2469, 0.23", "-101.182, -38.9695, -25.814, 0.23", "-102.704, -39.4255, -26.2463, 0.23", "-104.068, -39.7945, -26.717, 0.23", "-105.113, -40.0374, -27.1191, 0.23", "-106.512, -40.3301, -27.7286, 0.23", "-107.531, -40.5618, -28.197, 0.23", "-108.768, -40.8472, -28.7895, 0.23", "-109.997, -41.1321, -29.3642, 0.23", "-110.719, -41.3311, -29.6932, 0.23", "-112.122, -41.7757, -30.3033, 0.23", "-113.437, -42.2302, -30.8128, 0.23", "-115.591, -43.1036, -31.5884, 0.23", "-116.81, -43.6517, -32.0064, 0.23", "-118.451, -44.4562, -32.5369, 0.23", "-119.664, -45.0823, -32.9204, 0.23", "-120.93, -45.7333, -33.3104, 0.23", "-122.351, -46.425, -33.7335, 0.23", "-124.584, -47.4904, -34.3835, 0.23", "-126.0, -48.1302, -34.7901, 0.23", "-127.336, -48.6861, -35.1364, 0.23", "-128.581, -49.1837, -35.4404, 0.23", "-131.75, -50.3955, -36.2062, 0.23", "-132.98, -50.85, -36.4835, 0.23", "-135.063, -51.6364, -36.9615, 0.23", "-136.144, -52.0408, -37.2197, 0.23", "-136.819, -52.3018, -37.3791, 0.23", "-138.399, -52.9813, -37.7487, 0.23", "-139.644, -53.581, -38.0475, 0.23", "-140.861, -54.1877, -38.3392, 0.23", "-141.641, -54.5925, -38.5361, 0.23", "-143.178, -55.4258, -38.9448, 0.23", "-144.379, -56.1072, -39.2347, 0.23", "-145.388, -56.6852, -39.4428, 0.23", "-146.177, -57.1226, -39.5924, 0.23", "-148.315, -58.3124, -39.9552, 0.23", "-149.391, -58.9229, -40.1233, 0.23", "-151.373, -60.0522, -40.3977, 0.23", "-153.383, -61.2011, -40.6326, 0.23", "-154.843, -62.0041, -40.7615, 0.23", "-155.932, -62.5922, -40.8395, 0.23", "-157.96, -63.6503, -40.8846, 0.23", "-160.186, -64.7431, -40.8407, 0.23", "-161.948, -65.5551, -40.7184, 0.23", "-164.01, -66.4703, -40.4819, 0.23", "-166.621, -67.5957, -40.056, 0.23", "-169.097, -68.6406, -39.5476, 0.23", "-170.422, -69.2225, -39.2416, 0.23", "-172.403, -70.1666, -38.7454, 0.23", "-173.724, -70.8518, -38.4152, 0.23", "-175.674, -71.9457, -37.9469, 0.23", "-177.775, -73.1863, -37.4803, 0.23", "-181.418, -75.4328, -36.9211, 0.23", "-183.672, -76.8692, -36.7051, 0.23", "-186.045, -78.4383, -36.6333, 0.23", "-187.691, -79.5438, -36.6845, 0.23", "-189.769, -80.9249, -36.8775, 0.23", "-192.065, -82.4446, -37.2309, 0.23", "-193.157, -83.1468, -37.4722, 0.23", "-195.088, -84.4399, -38.0319, 0.23", "-196.225, -85.264, -38.4458, 0.23", "-197.077, -85.9544, -38.8069, 0.23", "-198.218, -87.017, -39.3238, 0.23", "-198.956, -87.798, -39.6455, 0.23", "-200.497, -89.4945, -40.3092, 0.23", "-201.887, -91.1166, -40.921, 0.23", "-202.747, -92.2202, -41.3137, 0.23", "-204.665, -94.9446, -42.2661, 0.23", "-205.756, -96.6223, -42.8448, 0.23", "-206.664, -98.0865, -43.3572, 0.23", "-207.658, -99.7584, -43.9626, 0.23", "-208.711, -101.673, -44.6685, 0.23", "-209.575, -103.263, -45.2977, 0.23", "-210.318, -104.627, -45.8727, 0.23", "-211.338, -106.366, -46.6529, 0.23", "-212.264, -107.798, -47.3588, 0.23", "-212.816, -108.529, -47.7574, 0.23", "-214.253, -110.123, -48.6995, 0.23", "-216.001, -111.863, -49.7473, 0.23", "-217.061, -112.854, -50.3175, 0.23", "-218.944, -114.528, -51.1657, 0.23", "-220.443, -115.862, -51.7526, 0.23", "-221.479, -116.864, -52.1319, 0.23", "-222.601, -118.095, -52.5301, 0.23", "-223.849, -119.683, -52.9877, 0.23", "-226.173, -123.03, -53.83, 0.23", "-227.31, -124.828, -54.2403, 0.23", "-228.266, -126.535, -54.6103, 0.23", "-229.131, -128.401, -54.9929, 0.23", "-229.873, -130.379, -55.4004, 0.23", "-230.393, -132.25, -55.7932, 0.23", "-230.667, -133.862, -56.1214, 0.23", "-230.933, -135.724, -56.4859, 0.23", "-231.289, -138.671, -57.0275, 0.23", "-231.406, -140.16, -57.2693, 0.23", "-231.451, -141.791, -57.4855, 0.23", "-231.398, -142.646, -57.5948, 0.23" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "35.6263, -10.2095, 0.0, 0.23", "50.0974, -14.1578, 0.0, 0.23", "64.5684, -18.1061, 0.0, 0.23" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "11.7231, 3.82089, -3.7807, 0.68", "12.5888, 6.50447, -3.72794, 0.68", "13.0332, 7.88225, -3.70085, 0.68", "13.5091, 9.3574, -3.67185, 0.68" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "11.7231, 3.82089, -3.7807, 0.68", "12.8743, 3.3294, -3.87464, 0.68", "14.3612, 2.74288, -4.01647, 0.68", "16.1801, 2.11152, -4.18515, 0.68", "17.8709, 1.51995, -4.33033, 0.68", "19.5886, 0.895288, -4.4463, 0.68", "21.3901, 0.19629, -4.54789, 0.68", "23.5032, -0.629797, -4.67412, 0.68", "25.3897, -1.38364, -4.79312, 0.68", "27.5184, -2.23283, -4.93061, 0.68", "29.5363, -3.01512, -5.01199, 0.68", "30.8978, -3.53238, -4.99428, 0.68" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-51.8744, 8.0161, -30.5683, 0.45", "-52.9363, 8.37484, -30.9227, 0.45", "-53.8363, 8.6794, -31.2233, 0.45", "-54.8706, 9.04777, -31.5808, 0.45", "-56.5061, 9.67847, -32.1712, 0.45", "-58.0611, 10.2878, -32.7253, 0.45", "-59.1871, 10.7201, -33.1155, 0.45", "-60.4193, 11.1924, -33.5492, 0.45", "-61.3004, 11.5548, -33.8393, 0.45", "-62.6411, 12.1338, -34.2682, 0.45", "-63.8814, 12.6569, -34.6489, 0.45", "-64.7051, 12.9693, -34.8762, 0.45", "-66.0626, 13.4046, -35.2049, 0.45", "-67.5824, 13.8764, -35.5619, 0.45", "-68.9276, 14.2661, -35.8292, 0.45", "-70.0602, 14.5804, -36.0569, 0.45", "-71.1399, 14.875, -36.2749, 0.45", "-73.2932, 15.4608, -36.6769, 0.45", "-75.2493, 15.9932, -37.0596, 0.45", "-76.6259, 16.3767, -37.3763, 0.45", "-77.9616, 16.7618, -37.7374, 0.45", "-80.57, 17.4786, -38.419, 0.45", "-82.843, 18.0577, -39.0141, 0.23", "-85.0395, 18.5714, -39.5861, 0.23", "-86.851, 18.9186, -40.043, 0.23", "-88.0547, 19.1266, -40.368, 0.23", "-90.5434, 19.5399, -41.0093, 0.23", "-92.4029, 19.8001, -41.5075, 0.23", "-94.0502, 19.9678, -41.9267, 0.23", "-95.6586, 20.123, -42.2821, 0.23", "-97.8555, 20.3646, -42.7238, 0.23", "-99.4114, 20.5679, -43.076, 0.23", "-100.869, 20.7679, -43.513, 0.23", "-102.817, 20.9775, -44.1629, 0.23", "-103.656, 21.0476, -44.4573, 0.23", "-104.963, 21.1085, -44.9541, 0.23", "-106.751, 21.1289, -45.6896, 0.23", "-108.929, 21.1264, -46.7518, 0.23", "-111.0, 21.175, -47.9698, 0.23", "-112.9, 21.2328, -49.2788, 0.23", "-114.731, 21.262, -50.5861, 0.23", "-116.044, 21.2819, -51.5728, 0.23", "-118.985, 21.3527, -53.8898, 0.23", "-121.486, 21.4893, -56.0117, 0.23", "-123.331, 21.657, -57.7478, 0.23", "-132.577, 23.47, -61.0446, 0.23" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-51.8744, 8.0161, -30.5683, 0.23", "-53.2045, 7.20699, -30.9505, 0.23", "-54.6462, 6.35911, -31.3645, 0.23", "-56.4597, 5.3423, -31.9269, 0.23", "-58.0151, 4.47449, -32.4338, 0.23", "-59.0811, 3.88021, -32.8037, 0.23", "-60.4447, 3.11876, -33.3101, 0.23", "-61.9563, 2.30186, -33.9173, 0.23", "-63.1046, 1.68743, -34.4618, 0.23", "-64.1561, 1.17081, -35.0193, 0.23", "-65.1768, 0.720767, -35.5869, 0.23", "-66.2194, 0.269135, -36.1952, 0.23", "-67.4005, -0.246655, -36.8897, 0.23", "-68.6161, -0.78469, -37.5883, 0.23", "-69.7446, -1.28351, -38.209, 0.23", "-71.4458, -1.97283, -39.0237, 0.23", "-73.0592, -2.56452, -39.7178, 0.23", "-75.3333, -3.24533, -40.5685, 0.23", "-76.587, -3.53361, -40.9698, 0.23", "-77.7569, -3.78452, -41.2999, 0.23", "-79.6272, -4.13829, -41.7989, 0.23", "-80.7512, -4.25191, -42.0434, 0.23", "-82.5704, -4.14944, -42.2949, 0.23", "-83.9173, -3.77501, -42.3928, 0.23", "-93.5826, -5.46709, -44.2395, 0.23", "-102.924, -6.50153, -47.6381, 0.23", "-112.01, -6.26625, -51.8078, 0.23", "-121.756, -7.60716, -53.5439, 0.23", "-131.668, -7.66726, -54.8653, 0.23" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-231.398, -142.646, -57.5948, 0.23", "-231.821, -145.148, -57.4999, 0.23", "-232.098, -146.784, -57.4378, 0.23", "-232.512, -149.228, -57.345, 0.23", "-233.033, -152.311, -57.228, 0.23", "-232.979, -161.805, -57.5657, 0.23" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-231.398, -142.646, -57.5948, 0.23", "-230.69, -145.239, -57.8882, 0.23", "-230.007, -147.709, -58.2096, 0.23", "-229.658, -149.047, -58.3945, 0.23", "-229.154, -150.892, -58.6542, 0.23", "-228.72, -152.429, -58.8984, 0.23", "-228.027, -155.115, -59.4053, 0.23", "-227.69, -156.602, -59.7539, 0.23", "-227.329, -158.425, -60.2855, 0.23", "-226.983, -161.054, -61.226, 0.23", "-226.837, -162.397, -61.7575, 0.23", "-226.673, -164.837, -62.8196, 0.23", "-226.646, -165.873, -63.3265, 0.23", "-226.704, -167.215, -64.0595, 0.23", "-226.983, -169.272, -65.3971, 0.23", "-224.248, -178.315, -66.7738, 0.23" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "13.5091, 9.3574, -3.67185, 0.45", "14.4211, 10.8396, -3.72695, 0.45", "15.3178, 12.2971, -3.78113, 0.45", "16.3719, 14.0103, -3.84481, 0.45", "17.0957, 15.1868, -3.88854, 0.45", "18.0946, 16.8103, -3.94889, 0.45" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "13.5091, 9.3574, -3.67185, 0.45", "12.6478, 10.214, -3.28249, 0.45", "11.4001, 11.3535, -2.66797, 0.45", "10.3356, 12.2931, -2.12986, 0.45", "9.01819, 13.5186, -1.42841, 0.45", "8.17621, 14.3452, -0.932512, 0.45", "7.36929, 15.1819, -0.398706, 0.45", "6.86114, 15.7078, -0.0080789, 0.45", "6.21095, 16.4025, 0.541192, 0.45", "5.37863, 17.3675, 1.3059, 0.45", "4.65297, 18.2652, 2.04071, 0.45", "3.83857, 19.4099, 2.97378, 0.45", "3.45309, 20.0224, 3.41407, 0.45", "2.94462, 20.9657, 3.98276, 0.45", "2.51682, 21.9525, 4.48171, 0.45", "2.19437, 22.95, 4.85587, 0.45", "1.9151, 24.2232, 5.15318, 0.45", "1.60392, 26.3764, 5.44404, 0.45", "1.36503, 28.8315, 5.603, 0.45", "1.22086, 30.8318, 5.59797, 0.45", "1.12306, 32.8502, 5.45862, 0.45", "1.09414, 34.8675, 5.23777, 0.45", "1.15511, 36.7739, 4.98475, 0.45", "1.30034, 38.71, 4.70536, 0.45", "1.5578, 40.9759, 4.35621, 0.45", "1.95605, 43.724, 3.92964, 0.45", "2.35886, 46.2067, 3.5735, 0.45", "2.97195, 49.3263, 3.13333, 0.45", "3.57729, 52.0336, 2.74493, 0.45", "4.21906, 54.7435, 2.35653, 0.45", "4.64268, 56.4481, 2.10577, 0.45", "5.22897, 58.8612, 1.71446, 0.45", "5.6996, 61.0626, 1.31713, 0.45", "6.07466, 63.2011, 0.893723, 0.45", "6.26612, 64.6091, 0.591219, 0.45", "6.45105, 66.3639, 0.202577, 0.45", "6.63014, 68.342, -0.257009, 0.45", "6.87541, 71.3113, -0.980064, 0.45", "7.06355, 73.794, -1.61203, 0.45", "7.21516, 75.5446, -2.07305, 0.45", "7.42637, 77.8123, -2.64724, 0.45", "7.68853, 80.3156, -3.25382, 0.23", "7.91165, 82.2883, -3.72928, 0.23", "8.14621, 83.9691, -4.15214, 0.23", "8.30228, 85.0403, -4.43496, 0.23", "8.69913, 87.6557, -5.14212, 0.23", "8.9905, 89.9475, -5.7801, 0.23", "9.20457, 92.279, -6.39983, 0.23", "9.28345, 94.4216, -6.94142, 0.23", "9.22735, 95.9604, -7.31523, 0.23", "9.12813, 97.3505, -7.63968, 0.23", "9.02004, 98.3968, -7.85793, 0.23", "8.76469, 100.096, -8.14467, 0.23", "8.5675, 101.113, -8.27205, 0.23", "7.8655, 103.824, -8.53626, 0.23", "7.26481, 105.75, -8.71488, 0.23", "6.54723, 107.528, -8.86701, 0.23", "5.46992, 109.695, -9.0329, 0.23", "4.38799, 111.503, -9.15097, 0.23", "2.42176, 114.302, -9.29171, 0.23", "1.40797, 115.528, -9.33107, 0.23", "-0.595413, 117.673, -9.38239, 0.23", "-2.1706, 119.324, -9.40742, 0.23", "-3.38732, 120.623, -9.43222, 0.45", "-5.45524, 122.918, -9.54073, 0.23", "-6.38453, 123.992, -9.62741, 0.23", "-7.79668, 125.722, -9.82971, 0.23", "-9.91793, 128.491, -10.3078, 0.23", "-10.984, 129.891, -10.5916, 0.23", "-12.0677, 131.186, -10.8854, 0.23", "-13.6414, 132.848, -11.2845, 0.23", "-14.7872, 133.945, -11.5812, 0.23", "-15.9175, 134.898, -11.8629, 0.23", "-18.527, 136.734, -12.4674, 0.23", "-20.8592, 138.22, -12.9684, 0.23", "-22.2906, 139.082, -13.271, 0.23", "-23.5222, 139.809, -13.5745, 0.23", "-25.1478, 140.835, -14.0766, 0.23", "-25.7495, 141.266, -14.3424, 0.23", "-26.1608, 141.646, -14.606, 0.23", "-26.7977, 142.488, -15.1156, 0.23", "-27.6545, 143.926, -15.8181, 0.23", "-28.5063, 145.706, -16.5163, 0.23", "-29.2056, 147.533, -17.1091, 0.23", "-30.0523, 150.049, -17.8054, 0.23", "-30.8418, 152.473, -18.3693, 0.23", "-31.6844, 155.124, -18.925, 0.23", "-32.3838, 157.491, -19.34, 0.23", "-33.1123, 160.386, -19.7673, 0.23", "-33.4452, 162.031, -19.9574, 0.23", "-33.782, 164.54, -20.2395, 0.23", "-37.809, 173.218, -19.6663, 0.23" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "30.8978, -3.53238, -4.99428, 0.45", "31.3028, -4.33904, -6.31226, 0.45", "31.8353, -5.25164, -7.65713, 0.45", "32.4649, -6.01755, -8.82976, 0.45", "33.0386, -6.58401, -9.73171, 0.45", "33.3231, -6.81948, -10.1349, 0.45", "33.8365, -7.24638, -10.8902, 0.45", "34.6146, -7.79302, -11.976, 0.45", "35.6827, -8.43691, -13.5304, 0.45", "36.4383, -8.81611, -14.791, 0.45", "37.2638, -9.14243, -16.2916, 0.45", "38.0011, -9.39952, -17.6929, 0.45", "38.9642, -9.71216, -19.5112, 0.45", "40.0353, -10.0696, -21.5137, 0.45", "41.837, -10.7129, -24.7344, 0.23", "42.8493, -11.0771, -26.367, 0.23", "44.4047, -11.6144, -28.5516, 0.23", "46.1155, -12.1436, -30.5733, 0.23", "46.6172, -12.3021, -31.0827, 0.23", "48.2173, -12.8201, -32.5718, 0.23", "50.3061, -13.5542, -34.4406, 0.23", "52.6835, -14.3844, -36.5399, 0.23", "53.9363, -14.7979, -37.6503, 0.23", "56.2506, -15.5108, -39.7397, 0.23", "58.2616, -16.1109, -41.6094, 0.23", "60.2442, -16.7236, -43.5153, 0.23", "64.8548, -20.8005, -51.2822, 0.23" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "30.8978, -3.53238, -4.99428, 0.45", "32.9854, -4.65663, -5.07979, 0.45", "33.9209, -5.1995, -5.11039, 0.45", "35.6937, -6.22577, -5.16293, 0.68", "37.514, -7.27115, -5.22071, 0.45", "39.3425, -8.33966, -5.33529, 0.45", "40.9209, -9.23439, -5.47043, 0.45", "42.5915, -10.1794, -5.66664, 0.45", "44.2352, -11.0892, -5.85703, 0.45", "45.3301, -11.6962, -5.97671, 0.45", "46.9779, -12.6377, -6.19634, 0.45", "49.6268, -14.089, -6.62327, 0.45" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "18.0946, 16.8103, -3.94889, 0.45", "18.3063, 18.1361, -4.09976, 0.45", "18.7439, 20.6505, -4.26712, 0.45", "19.1595, 22.567, -4.28752, 0.45", "19.6626, 24.7411, -4.24004, 0.45", "20.2216, 26.8818, -4.15806, 0.45", "20.6681, 28.5172, -4.07139, 0.45", "21.3291, 30.7031, -3.86418, 0.45", "22.0374, 33.0364, -3.56641, 0.45", "22.6135, 35.1444, -3.25514, 0.45", "23.0988, 37.3772, -2.85831, 0.45", "23.4791, 40.0844, -2.25695, 0.45", "23.5718, 41.5133, -1.87554, 0.45", "23.5097, 43.6791, -1.17294, 0.45", "23.2386, 45.4497, -0.461866, 0.45", "22.8419, 46.8741, 0.272121, 0.45", "22.2803, 48.2903, 1.16078, 0.45", "21.7503, 49.4141, 1.99212, 0.45", "21.139, 50.6058, 3.00539, 0.45", "20.5073, 51.7838, 4.16517, 0.45", "20.0777, 52.5888, 4.991, 0.45", "19.5698, 53.4284, 5.86956, 0.45", "19.1395, 54.1238, 6.56306, 0.45", "18.6081, 54.9878, 7.38441, 0.45", "17.9553, 56.069, 8.38172, 0.45", "17.2542, 57.2248, 9.4336, 0.45", "16.6652, 58.1493, 10.2284, 0.45", "15.9991, 59.1721, 11.0858, 0.45", "15.3112, 60.2957, 12.0032, 0.45", "14.7166, 61.3664, 12.8461, 0.45", "14.1858, 62.4425, 13.708, 0.45", "13.7743, 63.3275, 14.482, 0.45", "13.0517, 64.8705, 15.8921, 0.23", "12.511, 65.9671, 16.937, 0.23", "11.7567, 67.5074, 18.3782, 0.23", "11.1512, 68.8217, 19.5545, 0.23", "10.4751, 70.3172, 20.8684, 0.23", "10.086, 71.1626, 21.5995, 0.23", "9.63424, 72.0719, 22.3246, 0.23", "9.09424, 73.1556, 23.1123, 0.23", "8.60236, 74.2185, 23.7955, 0.23", "8.2128, 75.2047, 24.3387, 0.23", "7.9259, 76.1254, 24.7757, 0.23", "7.63248, 77.3751, 25.3901, 0.23", "7.50495, 78.2435, 25.8495, 0.23", "7.41822, 79.8272, 26.695, 0.23", "7.49029, 81.1748, 27.4146, 0.23", "7.69477, 82.4645, 28.1249, 0.23", "8.1645, 84.4204, 29.2893, 0.23", "8.6859, 86.2703, 30.4341, 0.23", "9.15352, 87.7085, 31.3449, 0.23", "9.6766, 89.0845, 32.2548, 0.23", "10.2682, 90.4744, 33.2111, 0.23", "10.9765, 91.8518, 34.1793, 0.23" ],
    "parent" : "dend_27",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "18.0946, 16.8103, -3.94889, 0.45", "19.4576, 16.3923, -3.43476, 0.45", "21.6069, 15.6767, -2.65106, 0.45", "23.3475, 15.1121, -2.00587, 0.45", "25.1856, 14.5603, -1.33062, 0.45", "26.8778, 14.1358, -0.755494, 0.45", "28.1411, 13.8471, -0.352036, 0.45", "30.046, 13.4548, 0.178963, 0.45", "31.7806, 13.1435, 0.610612, 0.45", "33.5996, 12.8692, 0.998509, 0.45", "36.0921, 12.5064, 1.46419, 0.45", "37.5545, 12.2866, 1.70487, 0.45", "38.6921, 12.093, 1.86424, 0.45", "39.355, 11.9757, 1.95221, 0.45", "41.0052, 11.6393, 2.16742, 0.45", "43.1354, 11.1545, 2.48766, 0.45", "45.6116, 10.5319, 2.91521, 0.45", "48.6862, 9.74696, 3.47111, 0.45", "50.6721, 9.20168, 3.84237, 0.45", "52.8984, 8.55046, 4.28114, 0.45", "54.7974, 7.96187, 4.68842, 0.45", "55.6355, 7.69407, 4.88265, 0.45", "57.1884, 7.15455, 5.24435, 0.45", "58.8205, 6.5729, 5.65763, 0.45", "60.5632, 5.95503, 6.12837, 0.45", "61.8563, 5.52136, 6.48666, 0.45", "63.5895, 4.98119, 6.97139, 0.45", "65.9571, 4.32302, 7.65568, 0.23", "67.7526, 3.89299, 8.17045, 0.23", "69.9736, 3.37232, 8.79352, 0.23", "71.0755, 3.11262, 9.09202, 0.23", "72.9676, 2.65855, 9.51204, 0.23", "74.5659, 2.26382, 9.77985, 0.23", "76.5316, 1.77815, 9.96906, 0.23", "78.5904, 1.28553, 9.94649, 0.23", "80.0011, 0.948883, 9.78666, 0.23", "82.4336, 0.406943, 9.33853, 0.45", "84.2005, 0.0520391, 8.88285, 0.45", "85.7409, -0.238311, 8.42467, 0.45", "88.3653, -0.75819, 7.59689, 0.23", "89.9309, -1.05021, 7.10207, 0.23", "91.6336, -1.38727, 6.60068, 0.23", "93.2374, -1.71649, 6.22917, 0.23", "95.2724, -2.169, 5.86801, 0.23", "97.8796, -2.79259, 5.56449, 0.23", "98.9669, -3.08562, 5.48761, 0.23", "100.272, -3.47477, 5.40205, 0.23", "102.699, -4.24632, 5.21446, 0.23", "105.298, -5.06813, 4.99647, 0.23", "108.209, -5.96691, 4.70532, 0.23", "111.03, -6.79156, 4.32501, 0.23", "114.016, -7.67921, 3.7477, 0.23", "115.116, -8.01291, 3.51165, 0.23", "117.016, -8.58824, 3.04462, 0.23", "119.299, -9.26045, 2.39798, 0.23", "122.626, -10.1906, 1.31872, 0.23", "126.2, -11.0774, 0.0388651, 0.23", "135.136, -15.079, -1.50745, 0.23", "144.666, -17.9515, -1.7388, 0.23" ],
    "parent" : "dend_27",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "49.6268, -14.089, -6.62327, 0.45", "51.8646, -13.5957, -6.70291, 0.45", "53.9187, -13.1266, -6.85785, 0.45", "57.4611, -12.2815, -7.18841, 0.23", "58.6744, -12.0103, -7.30783, 0.23", "60.2414, -11.6623, -7.45831, 0.23", "62.1009, -11.2954, -7.63209, 0.23", "63.7244, -11.0025, -7.7824, 0.23", "65.3831, -10.7294, -7.92259, 0.23", "67.4204, -10.4164, -8.06973, 0.23", "69.8122, -10.0418, -8.19788, 0.23", "73.4197, -9.44676, -8.32997, 0.23", "76.1668, -8.99078, -8.36161, 0.23", "78.9095, -8.55653, -8.30593, 0.23", "80.7257, -8.26529, -8.24036, 0.23", "83.7718, -7.73292, -8.05601, 0.23", "85.3571, -7.46214, -7.92204, 0.23", "87.1911, -7.15743, -7.72269, 0.23", "90.1341, -6.79618, -7.36943, 0.23", "91.2259, -6.6892, -7.23749, 0.23", "92.6215, -6.58545, -7.07969, 0.23", "95.5542, -6.51737, -6.76916, 0.23", "96.8222, -6.52214, -6.63827, 0.23", "99.2668, -6.55465, -6.41636, 0.23", "101.803, -6.62879, -6.21536, 0.23", "103.166, -6.71067, -6.11466, 0.23", "105.54, -6.86808, -5.92899, 0.23", "106.738, -6.94904, -5.81371, 0.23", "108.631, -7.07651, -5.61821, 0.23", "110.45, -7.18729, -5.43087, 0.23", "111.952, -7.25155, -5.33597, 0.23", "114.132, -7.25799, -5.27054, 0.23", "117.159, -7.20463, -5.27528, 0.23", "118.775, -7.17517, -5.30929, 0.23", "121.339, -7.11332, -5.39496, 0.23", "124.912, -6.98646, -5.55915, 0.23", "126.298, -6.92328, -5.64809, 0.23", "129.369, -6.78635, -5.91367, 0.23", "132.079, -6.61829, -6.18697, 0.23", "134.842, -6.45826, -6.45888, 0.23", "144.4, -4.16909, -8.13898, 0.23" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "49.6268, -14.089, -6.62327, 0.45", "51.096, -15.273, -6.55469, 0.45", "52.6358, -16.4284, -6.53079, 0.45", "54.7458, -17.9818, -6.53151, 0.45", "57.7836, -20.1844, -6.66382, 0.45", "59.7852, -21.7098, -6.8261, 0.23", "61.4712, -23.0317, -6.99703, 0.23", "62.7958, -24.0769, -7.15682, 0.45", "63.8874, -25.0005, -7.27399, 0.45", "65.1176, -26.0975, -7.36211, 0.45", "67.3789, -28.2401, -7.40614, 0.45", "69.3853, -30.1704, -7.36036, 0.45", "71.2746, -31.9505, -7.28068, 0.45", "72.4524, -33.0869, -7.20656, 0.45", "75.4461, -36.0, -6.95853, 0.45", "78.1838, -38.709, -6.65971, 0.45", "80.1411, -40.6909, -6.41595, 0.45", "81.4377, -42.0984, -6.23923, 0.45", "83.2115, -44.1589, -5.9991, 0.23", "85.3327, -46.866, -5.69539, 0.23", "86.0108, -47.8701, -5.57391, 0.23", "86.9472, -49.4827, -5.36007, 0.23", "87.9266, -51.4147, -5.06639, 0.23", "88.4918, -52.7211, -4.84808, 0.23", "89.0008, -54.0562, -4.64275, 0.23", "89.4294, -55.3415, -4.48523, 0.23", "89.9618, -56.9693, -4.32892, 0.23", "90.4498, -58.5339, -4.22206, 0.23", "90.7351, -59.5367, -4.14265, 0.23", "91.0227, -60.6741, -4.00856, 0.23", "91.3561, -62.24, -3.74447, 0.23", "91.6398, -63.7097, -3.47476, 0.23", "91.9633, -65.3154, -3.14985, 0.23", "92.1886, -66.3357, -2.91816, 0.23", "92.7512, -68.7604, -2.3134, 0.23", "93.2746, -71.5058, -1.54801, 0.23", "99.5095, -78.9085, -0.911115, 0.23", "105.732, -86.3024, -0.0710087, 0.23", "112.546, -93.2552, 0.0410892, 0.23" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_34", "dend_31", "dend_30", "dend_17", "dend_14", "dend_11", "dend_8", "dend_1", "dend_0", "dend_36", "dend_35", "dend_33", "dend_32", "dend_19", "dend_18", "dend_16", "dend_15", "dend_13", "dend_12", "dend_10", "dend_9", "dend_5", "dend_2", "dend_25", "dend_20", "dend_7", "dend_6", "dend_4", "dend_3", "dend_27", "dend_26", "dend_24", "dend_21", "dend_29", "dend_28", "dend_23", "dend_22" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_34", "dend_31", "dend_30", "dend_17", "dend_14", "dend_11", "dend_8", "dend_1", "dend_0", "dend_36", "dend_35", "dend_33", "dend_32", "dend_19", "dend_18", "dend_16", "dend_15", "dend_13", "dend_12", "dend_10", "dend_9", "dend_5", "dend_2", "dend_25", "dend_20", "dend_7", "dend_6", "dend_4", "dend_3", "dend_27", "dend_26", "dend_24", "dend_21", "dend_29", "dend_28", "dend_23", "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_36" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_35" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_33" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_32" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_35",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_37",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_38",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_39",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_40",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_34" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_31" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_36",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30", "dend_31", "dend_32", "dend_33", "dend_34", "dend_35", "dend_36" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_17", "dend_17", "dend_17", "dend_17", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_8", "dend_8", "dend_8", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_19", "dend_19", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "axon_1", "axon_1", "dend_25", "dend_25", "dend_25", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "5.67935E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "5.67935E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "3.6794998E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cSTUT_7_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cSTUT_7_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cSTUT189_L6_NBC_23c8220f56_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_34, id: dend_34, parent: soma_0
create dend_34
public dend_34
// Section: dend_31, id: dend_31, parent: soma_0
create dend_31
public dend_31
// Section: dend_30, id: dend_30, parent: soma_0
create dend_30
public dend_30
// Section: dend_17, id: dend_17, parent: soma_0
create dend_17
public dend_17
// Section: dend_14, id: dend_14, parent: soma_0
create dend_14
public dend_14
// Section: dend_11, id: dend_11, parent: soma_0
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: soma_0
create dend_8
public dend_8
// Section: dend_1, id: dend_1, parent: soma_0
create dend_1
public dend_1
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_36, id: dend_36, parent: dend_34
create dend_36
public dend_36
// Section: dend_35, id: dend_35, parent: dend_34
create dend_35
public dend_35
// Section: dend_33, id: dend_33, parent: dend_31
create dend_33
public dend_33
// Section: dend_32, id: dend_32, parent: dend_31
create dend_32
public dend_32
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_16, id: dend_16, parent: dend_14
create dend_16
public dend_16
// Section: dend_15, id: dend_15, parent: dend_14
create dend_15
public dend_15
// Section: dend_13, id: dend_13, parent: dend_11
create dend_13
public dend_13
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9
// Section: dend_5, id: dend_5, parent: dend_1
create dend_5
public dend_5
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_25, id: dend_25, parent: dend_19
create dend_25
public dend_25
// Section: dend_20, id: dend_20, parent: dend_19
create dend_20
public dend_20
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_4, id: dend_4, parent: dend_2
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_27, id: dend_27, parent: dend_25
create dend_27
public dend_27
// Section: dend_26, id: dend_26, parent: dend_25
create dend_26
public dend_26
// Section: dend_24, id: dend_24, parent: dend_20
create dend_24
public dend_24
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_29, id: dend_29, parent: dend_27
create dend_29
public dend_29
// Section: dend_28, id: dend_28, parent: dend_27
create dend_28
public dend_28
// Section: dend_23, id: dend_23, parent: dend_21
create dend_23
public dend_23
// Section: dend_22, id: dend_22, parent: dend_21
create dend_22
public dend_22

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_34, dend_31, dend_30, dend_17, dend_14, dend_11, dend_8, dend_1, dend_0, dend_36, dend_35, dend_33, dend_32, dend_19, dend_18, dend_16, dend_15, dend_13, dend_12, dend_10, dend_9, dend_5, dend_2, dend_25, dend_20, dend_7, dend_6, dend_4, dend_3, dend_27, dend_26, dend_24, dend_21, dend_29, dend_28, dend_23, dend_22]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_34, dend_31, dend_30, dend_17, dend_14, dend_11, dend_8, dend_1, dend_0, dend_36, dend_35, dend_33, dend_32, dend_19, dend_18, dend_16, dend_15, dend_13, dend_12, dend_10, dend_9, dend_5, dend_2, dend_25, dend_20, dend_7, dend_6, dend_4, dend_3, dend_27, dend_26, dend_24, dend_21, dend_29, dend_28, dend_23, dend_22]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_36]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_35]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_33]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_32]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_35
// Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_37
// Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_38
// Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_39
// Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_40
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_34]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_31]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_36
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_32
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_17, dend_17, dend_17, dend_17, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, axon_1, axon_1, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_27, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cSTUT_7_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cSTUT_7_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_34(0), soma_0(0.44999995616860894)
    connect dend_31(0), soma_0(0.44999995616860894)
    connect dend_30(0), soma_0(0.44999995616860894)
    connect dend_17(0), soma_0(0.44999995616860894)
    connect dend_14(0), soma_0(0.44999995616860894)
    connect dend_11(0), soma_0(0.44999995616860894)
    connect dend_8(0), soma_0(0.44999995616860894)
    connect dend_1(0), soma_0(0.44999995616860894)
    connect dend_0(0), soma_0(0.44999995616860894)
    connect axon_0(0), soma_0(1.0)
    connect dend_36(0), dend_34(1.0)
    connect dend_35(0), dend_34(1.0)
    connect dend_33(0), dend_31(1.0)
    connect dend_32(0), dend_31(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_16(0), dend_14(1.0)
    connect dend_15(0), dend_14(1.0)
    connect dend_13(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)
    connect dend_5(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_25(0), dend_19(1.0)
    connect dend_20(0), dend_19(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_4(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_27(0), dend_25(1.0)
    connect dend_26(0), dend_25(1.0)
    connect dend_24(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_29(0), dend_27(1.0)
    connect dend_28(0), dend_27(1.0)
    connect dend_23(0), dend_21(1.0)
    connect dend_22(0), dend_21(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -7.79996, 1.63899, 0.0, 2.31456 ) }
    soma_0 { pt3dadd( -7.07575, 1.4414, 0.0, 3.87478 ) }
    soma_0 { pt3dadd( -6.35154, 1.2438, 0.0, 5.48504 ) }
    soma_0 { pt3dadd( -5.62733, 1.04621, 0.0, 6.75924 ) }
    soma_0 { pt3dadd( -4.90312, 0.848615, 0.0, 7.77214 ) }
    soma_0 { pt3dadd( -4.17891, 0.65102, 0.0, 8.39732 ) }
    soma_0 { pt3dadd( -3.4547, 0.453425, 0.0, 9.01032 ) }
    soma_0 { pt3dadd( -2.73049, 0.255831, 0.0, 9.61582 ) }
    soma_0 { pt3dadd( -2.00628, 0.0582363, 0.0, 9.97495 ) }
    soma_0 { pt3dadd( -1.28207, -0.139358, 0.0, 10.1182 ) }
    soma_0 { pt3dadd( -0.557856, -0.336953, 0.0, 10.2615 ) }
    soma_0 { pt3dadd( 0.166353, -0.534547, 0.0, 10.4039 ) }
    soma_0 { pt3dadd( 0.890563, -0.732142, 0.0, 10.3605 ) }
    soma_0 { pt3dadd( 1.61477, -0.929737, 0.0, 10.3021 ) }
    soma_0 { pt3dadd( 2.33898, -1.12733, 0.0, 10.2398 ) }
    soma_0 { pt3dadd( 3.06319, -1.32493, 0.0, 10.0638 ) }
    soma_0 { pt3dadd( 3.7874, -1.52252, 0.0, 9.71016 ) }
    soma_0 { pt3dadd( 4.51161, -1.72011, 0.0, 8.98989 ) }
    soma_0 { pt3dadd( 5.23582, -1.91771, 0.0, 7.92103 ) }
    soma_0 { pt3dadd( 5.96003, -2.1153, 0.0, 6.49304 ) }
    soma_0 { pt3dadd( 6.68424, -2.3129, 0.0, 3.64119 ) }
    // Section: dend_34, id: dend_34, parent: soma_0 (entry count 21/100)
    dend_34 { pt3dclear() }
    dend_34 { pt3dadd( 2.72858, -5.1883, 7.36, 1.36 ) }
    dend_34 { pt3dadd( 2.72858, -5.1883, 7.36, 1.36 ) }
    dend_34 { pt3dadd( 2.98588, -6.57933, 7.16693, 1.14 ) }
    dend_34 { pt3dadd( 3.33417, -8.46236, 6.90558, 0.91 ) }
    dend_34 { pt3dadd( 3.78564, -10.9032, 6.56682, 0.91 ) }
    dend_34 { pt3dadd( 4.05842, -12.3779, 6.36214, 0.91 ) }
    dend_34 { pt3dadd( 4.4782, -14.6474, 6.04714, 0.91 ) }
    // Section: dend_31, id: dend_31, parent: soma_0 (entry count 28/100)
    dend_31 { pt3dclear() }
    dend_31 { pt3dadd( -1.14142, -3.00331, -3.98, 0.68 ) }
    dend_31 { pt3dadd( -1.14142, -3.00331, -3.98, 0.68 ) }
    dend_31 { pt3dadd( -1.92337, -3.63889, -5.32051, 0.68 ) }
    dend_31 { pt3dadd( -2.66072, -4.15563, -6.5921, 0.68 ) }
    dend_31 { pt3dadd( -3.20217, -4.52311, -7.51066, 0.68 ) }
    dend_31 { pt3dadd( -3.82914, -4.93187, -8.5712, 0.68 ) }
    dend_31 { pt3dadd( -4.54574, -5.34934, -9.72367, 0.68 ) }
    dend_31 { pt3dadd( -5.26402, -5.73821, -10.8862, 0.68 ) }
    dend_31 { pt3dadd( -5.91674, -6.03932, -11.9555, 0.68 ) }
    dend_31 { pt3dadd( -6.62646, -6.32494, -13.0871, 0.68 ) }
    dend_31 { pt3dadd( -7.43092, -6.62834, -14.3122, 0.68 ) }
    dend_31 { pt3dadd( -8.37344, -6.95524, -15.6698, 0.68 ) }
    // Section: dend_30, id: dend_30, parent: soma_0 (entry count 40/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( 4.57856, -3.78231, 2.8, 0.68 ) }
    dend_30 { pt3dadd( 4.57856, -3.78231, 2.8, 0.68 ) }
    dend_30 { pt3dadd( 6.12268, -5.74135, 3.15249, 0.68 ) }
    dend_30 { pt3dadd( 6.97855, -6.8804, 3.3768, 0.68 ) }
    dend_30 { pt3dadd( 8.51473, -8.93449, 3.81456, 0.68 ) }
    dend_30 { pt3dadd( 9.83462, -10.6237, 4.16826, 0.68 ) }
    dend_30 { pt3dadd( 11.2392, -12.3773, 4.50394, 0.68 ) }
    dend_30 { pt3dadd( 12.2894, -13.6402, 4.7284, 0.68 ) }
    dend_30 { pt3dadd( 13.8882, -15.4837, 5.05989, 0.45 ) }
    dend_30 { pt3dadd( 15.3896, -17.2392, 5.39036, 0.68 ) }
    dend_30 { pt3dadd( 17.6066, -19.838, 5.98219, 0.68 ) }
    dend_30 { pt3dadd( 19.2154, -21.6846, 6.48242, 0.68 ) }
    dend_30 { pt3dadd( 20.3444, -22.9936, 6.90388, 0.68 ) }
    dend_30 { pt3dadd( 21.3527, -24.145, 7.33204, 0.68 ) }
    dend_30 { pt3dadd( 22.3745, -25.3297, 7.80767, 0.68 ) }
    dend_30 { pt3dadd( 23.6693, -26.8685, 8.47038, 0.68 ) }
    dend_30 { pt3dadd( 24.7978, -28.1925, 9.13549, 0.68 ) }
    dend_30 { pt3dadd( 26.1108, -29.6818, 9.99717, 0.45 ) }
    dend_30 { pt3dadd( 27.0446, -30.72, 10.6363, 0.45 ) }
    dend_30 { pt3dadd( 28.6857, -32.4898, 11.7096, 0.45 ) }
    dend_30 { pt3dadd( 30.0699, -33.8879, 12.5737, 0.45 ) }
    dend_30 { pt3dadd( 31.1084, -34.8991, 13.2323, 0.45 ) }
    dend_30 { pt3dadd( 32.0316, -35.7644, 13.8591, 0.45 ) }
    dend_30 { pt3dadd( 33.2014, -36.8662, 14.7868, 0.45 ) }
    dend_30 { pt3dadd( 34.4334, -38.1485, 15.9605, 0.45 ) }
    dend_30 { pt3dadd( 35.2998, -39.1046, 16.9463, 0.45 ) }
    dend_30 { pt3dadd( 35.9289, -39.9069, 17.7483, 0.45 ) }
    dend_30 { pt3dadd( 36.6158, -40.8425, 18.601, 0.45 ) }
    dend_30 { pt3dadd( 37.3835, -41.9408, 19.5381, 0.45 ) }
    dend_30 { pt3dadd( 38.3566, -43.411, 20.7652, 0.45 ) }
    dend_30 { pt3dadd( 39.0734, -44.5853, 21.7287, 0.45 ) }
    dend_30 { pt3dadd( 39.7548, -45.751, 22.7014, 0.23 ) }
    dend_30 { pt3dadd( 40.5072, -46.9863, 23.7118, 0.23 ) }
    dend_30 { pt3dadd( 41.3841, -48.338, 24.797, 0.23 ) }
    dend_30 { pt3dadd( 41.9576, -49.1946, 25.4635, 0.23 ) }
    dend_30 { pt3dadd( 42.5416, -50.1194, 26.2128, 0.23 ) }
    dend_30 { pt3dadd( 43.4947, -51.8036, 27.5616, 0.23 ) }
    // Section: dend_17, id: dend_17, parent: soma_0 (entry count 77/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 6.16864, 1.4047, -0.84, 2.27 ) }
    dend_17 { pt3dadd( 6.16864, 1.4047, -0.84, 2.27 ) }
    dend_17 { pt3dadd( 7.38736, 2.02525, -1.58849, 1.82 ) }
    dend_17 { pt3dadd( 9.03562, 2.86452, -2.60079, 1.36 ) }
    dend_17 { pt3dadd( 10.2822, 3.49925, -3.36638, 1.36 ) }
    // Section: dend_14, id: dend_14, parent: soma_0 (entry count 82/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 3.79865, -4.3428, 5.46, 0.91 ) }
    dend_14 { pt3dadd( 3.79865, -4.3428, 5.46, 0.91 ) }
    dend_14 { pt3dadd( 4.87699, -5.4844, 6.09244, 0.91 ) }
    dend_14 { pt3dadd( 6.11168, -6.72418, 6.84967, 0.68 ) }
    dend_14 { pt3dadd( 7.36516, -7.86498, 7.67114, 0.68 ) }
    dend_14 { pt3dadd( 8.32048, -8.67835, 8.34841, 0.91 ) }
    dend_14 { pt3dadd( 9.35578, -9.46616, 9.1456, 0.91 ) }
    dend_14 { pt3dadd( 10.4192, -10.0593, 9.99379, 0.68 ) }
    dend_14 { pt3dadd( 11.7423, -10.4984, 11.0784, 0.68 ) }
    dend_14 { pt3dadd( 12.8206, -10.7461, 11.9991, 0.68 ) }
    dend_14 { pt3dadd( 13.4124, -10.8725, 12.5126, 0.68 ) }
    dend_14 { pt3dadd( 14.6279, -11.1279, 13.5578, 0.68 ) }
    dend_14 { pt3dadd( 16.4958, -11.5336, 15.0367, 0.45 ) }
    dend_14 { pt3dadd( 17.8435, -11.8503, 16.0, 0.45 ) }
    dend_14 { pt3dadd( 19.2607, -12.2152, 16.8681, 0.45 ) }
    dend_14 { pt3dadd( 20.6697, -12.6423, 17.6655, 0.45 ) }
    dend_14 { pt3dadd( 22.2385, -13.1863, 18.4836, 0.45 ) }
    dend_14 { pt3dadd( 23.4304, -13.6778, 19.0568, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_14 { pt3dadd( 25.0967, -14.4488, 19.8324, 0.68 ) }
    dend_14 { pt3dadd( 27.0508, -15.3418, 20.6442, 0.68 ) }
    // Section: dend_11, id: dend_11, parent: soma_0 (entry count 2/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 0.288636, -4.27631, 6.82, 0.91 ) }
    dend_11 { pt3dadd( 0.288636, -4.27631, 6.82, 0.91 ) }
    dend_11 { pt3dadd( -0.890178, -5.93692, 7.76582, 0.91 ) }
    dend_11 { pt3dadd( -2.09406, -7.50125, 8.72446, 0.91 ) }
    dend_11 { pt3dadd( -3.16574, -8.89379, 9.57782, 0.91 ) }
    dend_11 { pt3dadd( -4.07741, -10.0785, 10.3038, 0.91 ) }
    dend_11 { pt3dadd( -5.04395, -11.3344, 11.0734, 0.91 ) }
    dend_11 { pt3dadd( -5.91749, -12.4283, 11.8055, 0.91 ) }
    dend_11 { pt3dadd( -6.76444, -13.3878, 12.6044, 0.91 ) }
    // Section: dend_8, id: dend_8, parent: soma_0 (entry count 11/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -6.31134, 0.63519, 6.86, 0.91 ) }
    dend_8 { pt3dadd( -6.31134, 0.63519, 6.86, 0.91 ) }
    dend_8 { pt3dadd( -7.16464, 0.63519, 7.18789, 0.91 ) }
    dend_8 { pt3dadd( -9.05177, 0.63519, 7.91302, 0.91 ) }
    // Section: dend_1, id: dend_1, parent: soma_0 (entry count 15/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -6.99139, 1.4617, -3.54, 0.91 ) }
    dend_1 { pt3dadd( -6.99139, 1.4617, -3.54, 0.91 ) }
    dend_1 { pt3dadd( -8.11462, 1.61852, -3.83855, 0.91 ) }
    dend_1 { pt3dadd( -9.48289, 1.74001, -4.22266, 0.91 ) }
    dend_1 { pt3dadd( -11.4023, 1.87534, -4.82956, 0.91 ) }
    dend_1 { pt3dadd( -12.3932, 1.93075, -5.17675, 0.91 ) }
    dend_1 { pt3dadd( -13.909, 1.98776, -5.74337, 0.91 ) }
    dend_1 { pt3dadd( -15.3281, 1.99607, -6.31237, 0.91 ) }
    dend_1 { pt3dadd( -16.7084, 1.97204, -6.88291, 0.91 ) }
    dend_1 { pt3dadd( -18.2941, 1.91204, -7.558, 0.68 ) }
    dend_1 { pt3dadd( -20.1859, 1.80085, -8.38268, 0.91 ) }
    dend_1 { pt3dadd( -21.5891, 1.71373, -9.0086, 0.91 ) }
    dend_1 { pt3dadd( -23.1556, 1.63918, -9.74136, 0.91 ) }
    dend_1 { pt3dadd( -25.4829, 1.55819, -10.8095, 0.91 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 29/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -4.04144, 3.9127, 5.18, 0.91 ) }
    dend_0 { pt3dadd( -4.04144, 3.9127, 5.18, 0.91 ) }
    dend_0 { pt3dadd( -4.7177, 5.74672, 6.3361, 0.91 ) }
    dend_0 { pt3dadd( -5.0629, 7.25199, 7.22538, 0.68 ) }
    dend_0 { pt3dadd( -5.20106, 8.64963, 7.99612, 0.68 ) }
    dend_0 { pt3dadd( -5.21535, 9.67983, 8.54932, 0.68 ) }
    dend_0 { pt3dadd( -5.15114, 11.0674, 9.27785, 0.68 ) }
    dend_0 { pt3dadd( -4.96681, 12.3276, 9.94854, 0.68 ) }
    dend_0 { pt3dadd( -4.56232, 14.0458, 10.9223, 0.68 ) }
    dend_0 { pt3dadd( -4.15803, 15.6998, 11.8739, 0.68 ) }
    dend_0 { pt3dadd( -3.8608, 16.8508, 12.5783, 0.68 ) }
    dend_0 { pt3dadd( -3.60488, 17.8815, 13.2812, 0.68 ) }
    dend_0 { pt3dadd( -3.33723, 19.0063, 14.1249, 0.68 ) }
    dend_0 { pt3dadd( -3.11894, 20.0665, 15.0159, 0.45 ) }
    dend_0 { pt3dadd( -2.89585, 21.3575, 16.2964, 0.45 ) }
    dend_0 { pt3dadd( -2.82105, 22.5102, 17.6128, 0.45 ) }
    dend_0 { pt3dadd( -2.81547, 23.4425, 18.7619, 0.45 ) }
    dend_0 { pt3dadd( -2.82396, 24.2158, 19.7365, 0.68 ) }
    dend_0 { pt3dadd( -2.82255, 25.0107, 20.7046, 0.45 ) }
    dend_0 { pt3dadd( -2.80571, 25.9101, 21.7373, 0.45 ) }
    dend_0 { pt3dadd( -2.87025, 26.5771, 22.4872, 0.45 ) }
    dend_0 { pt3dadd( -3.16718, 27.57, 23.5333, 0.45 ) }
    dend_0 { pt3dadd( -3.49426, 28.4223, 24.4414, 0.45 ) }
    dend_0 { pt3dadd( -3.82692, 29.4482, 25.5227, 0.45 ) }
    dend_0 { pt3dadd( -4.02246, 30.362, 26.4087, 0.45 ) }
    dend_0 { pt3dadd( -4.25602, 31.5539, 27.4867, 0.45 ) }
    dend_0 { pt3dadd( -4.49056, 32.4721, 28.3401, 0.45 ) }
    dend_0 { pt3dadd( -4.81562, 33.2713, 29.1446, 0.45 ) }
    dend_0 { pt3dadd( -5.3897, 34.3754, 30.2961, 0.45 ) }
    dend_0 { pt3dadd( -5.83328, 35.1747, 31.1378, 0.45 ) }
    dend_0 { pt3dadd( -6.23007, 36.0173, 32.0186, 0.45 ) }
    dend_0 { pt3dadd( -6.43196, 36.6384, 32.6541, 0.45 ) }
    dend_0 { pt3dadd( -6.76962, 37.9919, 33.9767, 0.45 ) }
    dend_0 { pt3dadd( -6.99099, 39.0551, 34.9491, 0.45 ) }
    dend_0 { pt3dadd( -7.08683, 39.7333, 35.6017, 0.45 ) }
    dend_0 { pt3dadd( -6.97288, 40.6604, 36.4943, 0.45 ) }
    dend_0 { pt3dadd( -6.63521, 41.6469, 37.4372, 0.45 ) }
    dend_0 { pt3dadd( -6.12284, 42.7114, 38.472, 0.45 ) }
    dend_0 { pt3dadd( -5.60393, 43.6471, 39.3579, 0.45 ) }
    dend_0 { pt3dadd( -4.87835, 44.8006, 40.464, 0.45 ) }
    dend_0 { pt3dadd( -3.72621, 46.6132, 42.2312, 0.23 ) }
    dend_0 { pt3dadd( -3.29986, 47.2431, 42.8699, 0.23 ) }
    dend_0 { pt3dadd( -2.67227, 48.1359, 43.7689, 0.23 ) }
    dend_0 { pt3dadd( -1.97549, 49.0752, 44.6726, 0.23 ) }
    dend_0 { pt3dadd( -1.22341, 50.0514, 45.5494, 0.23 ) }
    dend_0 { pt3dadd( -0.477, 50.9919, 46.3541, 0.23 ) }
    dend_0 { pt3dadd( 0.536559, 52.3146, 47.4856, 0.23 ) }
    dend_0 { pt3dadd( 1.72072, 53.7613, 48.7065, 0.23 ) }
    dend_0 { pt3dadd( 2.89274, 55.0765, 49.82, 0.23 ) }
    dend_0 { pt3dadd( 4.01993, 56.2519, 50.865, 0.23 ) }
    dend_0 { pt3dadd( 4.90071, 57.2295, 51.6798, 0.23 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 80/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 6.68424, -2.3129, 0.0, 0.767491 ) }
    axon_0 { pt3dadd( 21.1553, -6.2612, 0.0, 0.767491 ) }
    axon_0 { pt3dadd( 35.6263, -10.2095, 0.0, 0.767491 ) }
    // Section: dend_36, id: dend_36, parent: dend_34 (entry count 83/100)
    dend_36 { pt3dclear() }
    dend_36 { pt3dadd( 4.4782, -14.6474, 6.04714, 0.68 ) }
    dend_36 { pt3dadd( 5.36533, -15.4821, 5.95352, 0.68 ) }
    dend_36 { pt3dadd( 6.89752, -16.9733, 5.71587, 0.68 ) }
    dend_36 { pt3dadd( 8.36946, -18.4562, 5.46192, 0.68 ) }
    dend_36 { pt3dadd( 9.70628, -19.8184, 5.23461, 0.68 ) }
    dend_36 { pt3dadd( 11.3528, -21.6033, 4.96119, 0.68 ) }
    dend_36 { pt3dadd( 12.8007, -23.3127, 4.72429, 0.68 ) }
    dend_36 { pt3dadd( 14.052, -24.958, 4.49468, 0.68 ) }
    dend_36 { pt3dadd( 14.7807, -26.0112, 4.33724, 0.68 ) }
    dend_36 { pt3dadd( 16.0801, -28.0229, 4.02395, 0.68 ) }
    dend_36 { pt3dadd( 17.2587, -29.9259, 3.72242, 0.68 ) }
    dend_36 { pt3dadd( 18.209, -31.5921, 3.47554, 0.68 ) }
    dend_36 { pt3dadd( 19.185, -33.4317, 3.26533, 0.45 ) }
    dend_36 { pt3dadd( 19.9884, -35.0925, 3.08324, 0.45 ) }
    dend_36 { pt3dadd( 20.7262, -36.7697, 2.82592, 0.45 ) }
    dend_36 { pt3dadd( 21.3425, -38.2404, 2.49988, 0.45 ) }
    dend_36 { pt3dadd( 22.2052, -40.1963, 1.88798, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_36 { pt3dadd( 22.8808, -41.7396, 1.29391, 0.45 ) }
    dend_36 { pt3dadd( 23.5297, -43.2962, 0.590039, 0.68 ) }
    dend_36 { pt3dadd( 24.1979, -44.8365, -0.199064, 0.68 ) }
    dend_36 { pt3dadd( 24.9777, -46.527, -1.14024, 0.68 ) }
    dend_36 { pt3dadd( 25.8258, -48.1502, -2.1163, 0.45 ) }
    dend_36 { pt3dadd( 26.769, -49.6993, -3.09844, 0.45 ) }
    dend_36 { pt3dadd( 27.44, -50.7453, -3.7305, 0.45 ) }
    dend_36 { pt3dadd( 28.6693, -52.5194, -4.67653, 0.45 ) }
    dend_36 { pt3dadd( 29.2679, -53.3275, -5.0374, 0.45 ) }
    dend_36 { pt3dadd( 30.13, -54.4077, -5.46209, 0.45 ) }
    dend_36 { pt3dadd( 31.2499, -55.6799, -5.94682, 0.45 ) }
    dend_36 { pt3dadd( 32.8192, -57.2506, -6.62235, 0.45 ) }
    dend_36 { pt3dadd( 34.2914, -58.5872, -7.30757, 0.45 ) }
    dend_36 { pt3dadd( 35.7849, -59.8972, -8.12196, 0.45 ) }
    dend_36 { pt3dadd( 36.7512, -60.6666, -8.70345, 0.45 ) }
    dend_36 { pt3dadd( 37.8931, -61.4884, -9.43354, 0.45 ) }
    dend_36 { pt3dadd( 39.4087, -62.527, -10.4586, 0.45 ) }
    dend_36 { pt3dadd( 41.0819, -63.6702, -11.6774, 0.45 ) }
    dend_36 { pt3dadd( 42.7372, -64.8912, -12.9419, 0.45 ) }
    dend_36 { pt3dadd( 43.8315, -65.717, -13.831, 0.45 ) }
    dend_36 { pt3dadd( 44.9117, -66.5578, -14.7224, 0.45 ) }
    dend_36 { pt3dadd( 45.5502, -67.0753, -15.2493, 0.45 ) }
    dend_36 { pt3dadd( 46.489, -67.8584, -15.9901, 0.45 ) }
    dend_36 { pt3dadd( 47.6361, -68.8865, -16.8873, 0.45 ) }
    dend_36 { pt3dadd( 48.8233, -69.9694, -17.8365, 0.23 ) }
    dend_36 { pt3dadd( 49.9417, -71.0554, -18.7595, 0.23 ) }
    dend_36 { pt3dadd( 50.8739, -71.9824, -19.5688, 0.23 ) }
    dend_36 { pt3dadd( 51.887, -73.0816, -20.5574, 0.23 ) }
    dend_36 { pt3dadd( 53.0288, -74.5015, -21.7727, 0.23 ) }
    dend_36 { pt3dadd( 54.2095, -76.1954, -23.0806, 0.23 ) }
    dend_36 { pt3dadd( 54.4561, -76.5688, -23.3369, 0.23 ) }
    dend_36 { pt3dadd( 55.018, -77.4472, -23.8836, 0.23 ) }
    dend_36 { pt3dadd( 56.0178, -79.1014, -24.8238, 0.23 ) }
    dend_36 { pt3dadd( 56.8239, -80.5339, -25.5802, 0.23 ) }
    dend_36 { pt3dadd( 58.0223, -82.697, -26.6603, 0.23 ) }
    dend_36 { pt3dadd( 59.0144, -84.6061, -27.5732, 0.23 ) }
    dend_36 { pt3dadd( 59.8295, -86.3025, -28.3991, 0.23 ) }
    dend_36 { pt3dadd( 60.7298, -88.3962, -29.3993, 0.23 ) }
    dend_36 { pt3dadd( 61.425, -90.0572, -30.1934, 0.23 ) }
    dend_36 { pt3dadd( 61.7166, -90.8366, -30.5651, 0.23 ) }
    dend_36 { pt3dadd( 62.0272, -91.8687, -31.0131, 0.23 ) }
    dend_36 { pt3dadd( 62.4944, -93.5077, -31.6408, 0.23 ) }
    dend_36 { pt3dadd( 62.8581, -94.6817, -32.0479, 0.23 ) }
    dend_36 { pt3dadd( 63.4932, -96.5752, -32.6021, 0.23 ) }
    dend_36 { pt3dadd( 64.2131, -98.5078, -33.0618, 0.23 ) }
    dend_36 { pt3dadd( 65.0401, -100.532, -33.4343, 0.23 ) }
    dend_36 { pt3dadd( 65.782, -102.195, -33.6693, 0.23 ) }
    dend_36 { pt3dadd( 66.1947, -103.027, -33.7625, 0.23 ) }
    dend_36 { pt3dadd( 67.0552, -104.6, -33.9258, 0.23 ) }
    dend_36 { pt3dadd( 68.1745, -106.643, -34.1277, 0.23 ) }
    dend_36 { pt3dadd( 69.2199, -108.388, -34.3196, 0.23 ) }
    dend_36 { pt3dadd( 70.0556, -109.655, -34.4884, 0.23 ) }
    dend_36 { pt3dadd( 70.7264, -110.658, -34.6355, 0.23 ) }
    dend_36 { pt3dadd( 71.4395, -111.745, -34.8097, 0.23 ) }
    dend_36 { pt3dadd( 72.1751, -112.93, -35.0346, 0.23 ) }
    dend_36 { pt3dadd( 73.7376, -115.825, -35.6664, 0.23 ) }
    dend_36 { pt3dadd( 74.7863, -118.135, -36.1739, 0.23 ) }
    dend_36 { pt3dadd( 75.3973, -119.765, -36.5523, 0.23 ) }
    dend_36 { pt3dadd( 75.8817, -121.307, -36.9273, 0.23 ) }
    dend_36 { pt3dadd( 76.4226, -123.329, -37.444, 0.23 ) }
    dend_36 { pt3dadd( 76.9904, -125.661, -38.0424, 0.23 ) }
    dend_36 { pt3dadd( 77.8549, -130.035, -39.1575, 0.23 ) }
    dend_36 { pt3dadd( 78.2059, -132.144, -39.6912, 0.23 ) }
    dend_36 { pt3dadd( 78.4924, -133.903, -40.155, 0.23 ) }
    dend_36 { pt3dadd( 78.71, -135.125, -40.4889, 0.23 ) }
    dend_36 { pt3dadd( 85.0128, -142.191, -42.7146, 0.23 ) }
    // Section: dend_35, id: dend_35, parent: dend_34 (entry count 66/100)
    dend_35 { pt3dclear() }
    dend_35 { pt3dadd( 4.4782, -14.6474, 6.04714, 0.45 ) }
    dend_35 { pt3dadd( 4.36636, -15.9884, 4.31542, 0.45 ) }
    dend_35 { pt3dadd( 4.39218, -17.2274, 2.61426, 0.45 ) }
    dend_35 { pt3dadd( 4.39806, -17.8369, 1.77027, 0.45 ) }
    dend_35 { pt3dadd( 4.41744, -19.0421, 0.188825, 0.45 ) }
    dend_35 { pt3dadd( 4.50801, -20.0183, -1.09001, 0.45 ) }
    dend_35 { pt3dadd( 4.67042, -20.9501, -2.29619, 0.45 ) }
    dend_35 { pt3dadd( 4.96305, -21.8216, -3.40705, 0.45 ) }
    dend_35 { pt3dadd( 5.39064, -22.6718, -4.45166, 0.45 ) }
    dend_35 { pt3dadd( 5.97132, -23.5934, -5.50581, 0.45 ) }
    dend_35 { pt3dadd( 7.02015, -25.0957, -7.04656, 0.45 ) }
    dend_35 { pt3dadd( 7.83337, -26.2746, -8.14363, 0.45 ) }
    dend_35 { pt3dadd( 8.58402, -27.5125, -9.22571, 0.45 ) }
    dend_35 { pt3dadd( 9.30194, -28.6157, -10.2422, 0.45 ) }
    dend_35 { pt3dadd( 10.2313, -29.9537, -11.5845, 0.45 ) }
    dend_35 { pt3dadd( 10.7052, -30.6701, -12.4052, 0.45 ) }
    dend_35 { pt3dadd( 11.2677, -31.6538, -13.5695, 0.45 ) }
    dend_35 { pt3dadd( 11.9201, -32.8463, -15.2066, 0.23 ) }
    dend_35 { pt3dadd( 12.6962, -34.3217, -17.484, 0.23 ) }
    dend_35 { pt3dadd( 13.295, -35.4135, -19.2934, 0.23 ) }
    dend_35 { pt3dadd( 13.9973, -36.6424, -21.4934, 0.23 ) }
    dend_35 { pt3dadd( 14.3926, -37.3088, -22.7342, 0.23 ) }
    dend_35 { pt3dadd( 15.1675, -38.7403, -25.3877, 0.23 ) }
    dend_35 { pt3dadd( 15.7189, -39.881, -27.4492, 0.23 ) }
    dend_35 { pt3dadd( 16.2004, -41.1244, -29.5133, 0.23 ) }
    dend_35 { pt3dadd( 16.7279, -42.5329, -31.8152, 0.23 ) }
    dend_35 { pt3dadd( 17.0541, -43.416, -33.2201, 0.23 ) }
    dend_35 { pt3dadd( 17.5588, -44.9049, -35.604, 0.23 ) }
    dend_35 { pt3dadd( 17.758, -45.7001, -36.7436, 0.23 ) }
    dend_35 { pt3dadd( 17.934, -46.6921, -38.1617, 0.23 ) }
    dend_35 { pt3dadd( 19.7162, -53.7397, -44.6261, 0.23 ) }
    // Section: dend_33, id: dend_33, parent: dend_31 (entry count 97/100)
    dend_33 { pt3dclear() }
    dend_33 { pt3dadd( -8.37344, -6.95524, -15.6698, 0.45 ) }
    dend_33 { pt3dadd( -9.56623, -7.34503, -16.8062, 0.45 ) }
    dend_33 { pt3dadd( -10.6073, -7.64383, -17.7993, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_33 { pt3dadd( -11.486, -7.89897, -18.6563, 0.45 ) }
    dend_33 { pt3dadd( -12.3872, -8.15991, -19.468, 0.45 ) }
    dend_33 { pt3dadd( -13.4514, -8.48808, -20.4223, 0.45 ) }
    dend_33 { pt3dadd( -14.3876, -8.76383, -21.2672, 0.45 ) }
    dend_33 { pt3dadd( -15.4969, -9.06886, -22.3512, 0.45 ) }
    dend_33 { pt3dadd( -16.5713, -9.33933, -23.4462, 0.45 ) }
    dend_33 { pt3dadd( -18.0827, -9.73679, -25.0082, 0.45 ) }
    dend_33 { pt3dadd( -18.9353, -9.97596, -25.913, 0.45 ) }
    dend_33 { pt3dadd( -20.0369, -10.3282, -27.144, 0.45 ) }
    dend_33 { pt3dadd( -20.8831, -10.6302, -28.1854, 0.45 ) }
    dend_33 { pt3dadd( -21.5517, -10.8773, -29.0802, 0.45 ) }
    dend_33 { pt3dadd( -22.2625, -11.1422, -30.1107, 0.45 ) }
    dend_33 { pt3dadd( -22.8923, -11.3995, -31.1673, 0.45 ) }
    dend_33 { pt3dadd( -23.533, -11.6794, -32.2456, 0.45 ) }
    dend_33 { pt3dadd( -24.2261, -12.0898, -33.4702, 0.45 ) }
    dend_33 { pt3dadd( -30.8276, -13.593, -40.813, 0.45 ) }
    dend_33 { pt3dadd( -36.7894, -13.6387, -48.8414, 0.45 ) }
    dend_33 { pt3dadd( -41.8235, -13.1786, -57.4683, 0.45 ) }
    // Section: dend_32, id: dend_32, parent: dend_31 (entry count 18/100)
    dend_32 { pt3dclear() }
    dend_32 { pt3dadd( -8.37344, -6.95524, -15.6698, 0.45 ) }
    dend_32 { pt3dadd( -8.1126, -7.948, -16.7126, 0.45 ) }
    dend_32 { pt3dadd( -7.93863, -8.75426, -17.5926, 0.45 ) }
    dend_32 { pt3dadd( -7.72833, -10.1127, -19.038, 0.45 ) }
    dend_32 { pt3dadd( -7.5306, -11.2378, -20.2958, 0.45 ) }
    dend_32 { pt3dadd( -7.3865, -11.9593, -21.178, 0.45 ) }
    dend_32 { pt3dadd( -7.18067, -12.7598, -22.2183, 0.45 ) }
    dend_32 { pt3dadd( -6.85696, -13.6592, -23.5663, 0.45 ) }
    dend_32 { pt3dadd( -6.70297, -14.0366, -24.1544, 0.45 ) }
    dend_32 { pt3dadd( -6.38177, -14.9559, -25.4459, 0.45 ) }
    dend_32 { pt3dadd( -6.15893, -15.8844, -26.568, 0.45 ) }
    dend_32 { pt3dadd( -5.99474, -17.0228, -27.7338, 0.45 ) }
    dend_32 { pt3dadd( -5.9279, -17.9547, -28.4621, 0.45 ) }
    dend_32 { pt3dadd( -5.85658, -18.7186, -29.0212, 0.45 ) }
    dend_32 { pt3dadd( -5.63258, -20.2241, -30.2167, 0.45 ) }
    dend_32 { pt3dadd( -5.38994, -21.5929, -31.3133, 0.45 ) }
    dend_32 { pt3dadd( -5.03181, -22.9281, -32.4419, 0.45 ) }
    dend_32 { pt3dadd( -4.51604, -24.1299, -33.6973, 0.45 ) }
    dend_32 { pt3dadd( -3.63005, -25.5495, -35.6837, 0.45 ) }
    dend_32 { pt3dadd( -2.72786, -26.5951, -37.5779, 0.23 ) }
    dend_32 { pt3dadd( -2.36589, -26.9185, -38.3222, 0.23 ) }
    dend_32 { pt3dadd( -1.69453, -27.406, -39.7796, 0.23 ) }
    dend_32 { pt3dadd( -0.865411, -27.9889, -41.5968, 0.23 ) }
    dend_32 { pt3dadd( 0.127167, -28.6904, -43.8621, 0.23 ) }
    dend_32 { pt3dadd( 0.517403, -29.0387, -44.8349, 0.23 ) }
    dend_32 { pt3dadd( 1.2171, -29.8169, -46.8229, 0.23 ) }
    dend_32 { pt3dadd( 1.66591, -30.3883, -48.247, 0.23 ) }
    dend_32 { pt3dadd( 2.3725, -31.3171, -50.7011, 0.23 ) }
    dend_32 { pt3dadd( 3.82411, -36.5517, -58.9188, 0.23 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 47/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 10.2822, 3.49925, -3.36638, 1.36 ) }
    dend_19 { pt3dadd( 10.3578, 3.51613, -3.38812, 1.36 ) }
    dend_19 { pt3dadd( 11.7231, 3.82089, -3.7807, 1.82 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 50/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 10.2822, 3.49925, -3.36638, 0.45 ) }
    dend_18 { pt3dadd( 9.43696, 3.84624, -4.18933, 0.45 ) }
    dend_18 { pt3dadd( 8.5462, 4.19699, -4.94405, 0.45 ) }
    dend_18 { pt3dadd( 7.35469, 4.70104, -5.93219, 0.45 ) }
    dend_18 { pt3dadd( 6.43941, 5.16366, -6.70644, 0.45 ) }
    dend_18 { pt3dadd( 5.60438, 5.61465, -7.43333, 0.45 ) }
    dend_18 { pt3dadd( 4.73931, 6.1276, -8.25939, 0.45 ) }
    dend_18 { pt3dadd( 3.97746, 6.63242, -9.14671, 0.45 ) }
    dend_18 { pt3dadd( 3.55382, 7.01866, -9.8206, 0.45 ) }
    dend_18 { pt3dadd( 3.10592, 7.60561, -10.8812, 0.45 ) }
    dend_18 { pt3dadd( 2.67898, 8.34895, -12.3057, 0.45 ) }
    dend_18 { pt3dadd( 2.31417, 9.16445, -13.99, 0.45 ) }
    dend_18 { pt3dadd( 1.90491, 10.1711, -16.2535, 0.45 ) }
    dend_18 { pt3dadd( 1.57486, 11.0127, -18.32, 0.45 ) }
    dend_18 { pt3dadd( 1.23895, 11.7205, -20.2461, 0.45 ) }
    dend_18 { pt3dadd( 0.811057, 12.4583, -22.4469, 0.45 ) }
    dend_18 { pt3dadd( 0.324231, 13.1717, -24.5849, 0.45 ) }
    dend_18 { pt3dadd( -0.0693951, 13.6056, -25.9029, 0.45 ) }
    dend_18 { pt3dadd( -0.459482, 13.9192, -26.8357, 0.45 ) }
    dend_18 { pt3dadd( -1.30001, 14.4701, -28.4379, 0.45 ) }
    dend_18 { pt3dadd( -2.08468, 14.954, -29.7287, 0.45 ) }
    dend_18 { pt3dadd( -2.79398, 15.373, -30.7966, 0.45 ) }
    dend_18 { pt3dadd( -3.53051, 15.7897, -31.9058, 0.45 ) }
    dend_18 { pt3dadd( -4.40102, 16.2959, -33.2021, 0.45 ) }
    dend_18 { pt3dadd( -4.9448, 16.6231, -34.0266, 0.45 ) }
    dend_18 { pt3dadd( -5.95919, 17.2811, -35.752, 0.23 ) }
    dend_18 { pt3dadd( -6.71643, 17.8459, -37.1631, 0.23 ) }
    dend_18 { pt3dadd( -8.05095, 18.9964, -39.923, 0.23 ) }
    dend_18 { pt3dadd( -8.70292, 19.5899, -41.3381, 0.23 ) }
    dend_18 { pt3dadd( -9.43797, 20.3039, -43.027, 0.23 ) }
    dend_18 { pt3dadd( -10.4931, 21.3763, -45.4879, 0.23 ) }
    dend_18 { pt3dadd( -11.258, 22.1866, -47.2534, 0.23 ) }
    dend_18 { pt3dadd( -12.1912, 23.3007, -49.4719, 0.23 ) }
    dend_18 { pt3dadd( -12.9411, 24.3691, -51.3778, 0.23 ) }
    dend_18 { pt3dadd( -16.7505, 29.0508, -59.201, 0.23 ) }
    // Section: dend_16, id: dend_16, parent: dend_14 (entry count 85/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 27.0508, -15.3418, 20.6442, 0.45 ) }
    dend_16 { pt3dadd( 27.6843, -15.6849, 21.522, 0.45 ) }
    dend_16 { pt3dadd( 28.8149, -16.0896, 22.8064, 0.45 ) }
    dend_16 { pt3dadd( 30.1323, -16.4635, 24.1136, 0.45 ) }
    dend_16 { pt3dadd( 30.8222, -16.6802, 24.7803, 0.45 ) }
    dend_16 { pt3dadd( 31.7424, -16.9657, 25.693, 0.45 ) }
    dend_16 { pt3dadd( 32.9093, -17.2999, 26.8965, 0.45 ) }
    dend_16 { pt3dadd( 34.3958, -17.6349, 28.4316, 0.45 ) }
    dend_16 { pt3dadd( 35.2839, -17.8119, 29.3391, 0.45 ) }
    dend_16 { pt3dadd( 36.2766, -17.9648, 30.3572, 0.45 ) }
    dend_16 { pt3dadd( 37.2182, -18.0633, 31.3216, 0.45 ) }
    dend_16 { pt3dadd( 38.2293, -18.1474, 32.3241, 0.45 ) }
    dend_16 { pt3dadd( 39.3447, -18.2788, 33.4484, 0.45 ) }
    dend_16 { pt3dadd( 40.5623, -18.4409, 34.6035, 0.45 ) }
    dend_16 { pt3dadd( 41.6897, -18.5498, 35.53, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_16 { pt3dadd( 42.9647, -18.671, 36.4507, 0.45 ) }
    dend_16 { pt3dadd( 44.3694, -18.8832, 37.3629, 0.45 ) }
    dend_16 { pt3dadd( 45.9584, -19.2072, 38.2541, 0.45 ) }
    dend_16 { pt3dadd( 47.8556, -19.5873, 39.0833, 0.45 ) }
    dend_16 { pt3dadd( 49.701, -19.8711, 39.7506, 0.23 ) }
    dend_16 { pt3dadd( 51.4087, -20.1356, 40.3184, 0.23 ) }
    dend_16 { pt3dadd( 53.0909, -20.4173, 40.8204, 0.23 ) }
    dend_16 { pt3dadd( 55.4106, -20.7704, 41.4368, 0.23 ) }
    dend_16 { pt3dadd( 59.1934, -21.2569, 42.3298, 0.23 ) }
    dend_16 { pt3dadd( 62.2343, -21.628, 42.9841, 0.23 ) }
    // Section: dend_15, id: dend_15, parent: dend_14 (entry count 10/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 27.0508, -15.3418, 20.6442, 0.45 ) }
    dend_15 { pt3dadd( 28.7467, -16.336, 20.9282, 0.45 ) }
    dend_15 { pt3dadd( 29.6161, -16.7433, 21.098, 0.45 ) }
    dend_15 { pt3dadd( 31.4001, -17.5609, 21.4335, 0.23 ) }
    dend_15 { pt3dadd( 32.815, -18.1632, 21.6789, 0.23 ) }
    dend_15 { pt3dadd( 34.1107, -18.631, 21.8821, 0.68 ) }
    dend_15 { pt3dadd( 35.8114, -19.1975, 22.1412, 0.45 ) }
    dend_15 { pt3dadd( 37.8368, -19.7375, 22.4428, 0.45 ) }
    dend_15 { pt3dadd( 40.2639, -20.2473, 22.7991, 0.45 ) }
    dend_15 { pt3dadd( 41.8137, -20.51, 23.022, 0.45 ) }
    dend_15 { pt3dadd( 43.7889, -20.7774, 23.3198, 0.45 ) }
    dend_15 { pt3dadd( 46.1494, -21.0709, 23.6771, 0.45 ) }
    dend_15 { pt3dadd( 48.1776, -21.2909, 23.965, 0.45 ) }
    dend_15 { pt3dadd( 49.3802, -21.4081, 24.1438, 0.45 ) }
    dend_15 { pt3dadd( 50.5494, -21.4551, 24.3519, 0.45 ) }
    dend_15 { pt3dadd( 51.7585, -21.5321, 24.6076, 0.45 ) }
    // Section: dend_13, id: dend_13, parent: dend_11 (entry count 26/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -6.76444, -13.3878, 12.6044, 0.45 ) }
    dend_13 { pt3dadd( -6.96572, -13.1424, 13.3694, 0.45 ) }
    dend_13 { pt3dadd( -7.40688, -12.9086, 14.8853, 0.45 ) }
    dend_13 { pt3dadd( -7.73682, -12.9487, 15.9465, 0.45 ) }
    dend_13 { pt3dadd( -8.09417, -13.1943, 16.9989, 0.45 ) }
    dend_13 { pt3dadd( -8.2586, -13.3228, 17.4301, 0.45 ) }
    dend_13 { pt3dadd( -8.50716, -13.5366, 18.1407, 0.45 ) }
    dend_13 { pt3dadd( -8.86614, -13.9952, 19.3688, 0.45 ) }
    dend_13 { pt3dadd( -9.11694, -14.4145, 20.2654, 0.45 ) }
    dend_13 { pt3dadd( -9.38413, -15.0215, 21.3776, 0.45 ) }
    dend_13 { pt3dadd( -9.43284, -15.2804, 21.8608, 0.45 ) }
    dend_13 { pt3dadd( -9.44043, -15.7562, 22.779, 0.45 ) }
    dend_13 { pt3dadd( -9.40624, -16.2973, 23.8816, 0.45 ) }
    dend_13 { pt3dadd( -9.35476, -16.9784, 25.2584, 0.45 ) }
    dend_13 { pt3dadd( -9.25391, -17.5618, 26.3907, 0.45 ) }
    dend_13 { pt3dadd( -9.05303, -18.2111, 27.7467, 0.45 ) }
    dend_13 { pt3dadd( -8.81829, -18.7878, 28.9816, 0.45 ) }
    dend_13 { pt3dadd( -8.56099, -19.2944, 30.1074, 0.45 ) }
    dend_13 { pt3dadd( -8.27221, -19.7685, 31.2666, 0.45 ) }
    dend_13 { pt3dadd( -7.98706, -20.194, 32.5277, 0.45 ) }
    dend_13 { pt3dadd( -7.76184, -20.6412, 33.9952, 0.45 ) }
    dend_13 { pt3dadd( -7.66136, -20.9405, 34.864, 0.45 ) }
    dend_13 { pt3dadd( -7.61386, -21.2179, 35.6299, 0.45 ) }
    dend_13 { pt3dadd( -7.7055, -21.6432, 36.707, 0.45 ) }
    dend_13 { pt3dadd( -8.05518, -22.1758, 37.8732, 0.45 ) }
    dend_13 { pt3dadd( -8.39675, -22.6029, 38.6151, 0.45 ) }
    dend_13 { pt3dadd( -8.96343, -23.3072, 39.617, 0.45 ) }
    dend_13 { pt3dadd( -9.86881, -24.2319, 40.9293, 0.45 ) }
    dend_13 { pt3dadd( -10.6873, -24.9753, 41.9847, 0.45 ) }
    dend_13 { pt3dadd( -11.255, -25.5315, 42.7234, 0.45 ) }
    dend_13 { pt3dadd( -11.9164, -26.2236, 43.6272, 0.45 ) }
    dend_13 { pt3dadd( -12.4602, -26.7815, 44.3697, 0.45 ) }
    dend_13 { pt3dadd( -13.4154, -27.7054, 45.5768, 0.45 ) }
    dend_13 { pt3dadd( -13.9647, -28.3351, 46.3184, 0.45 ) }
    dend_13 { pt3dadd( -14.7486, -29.5042, 47.5448, 0.45 ) }
    dend_13 { pt3dadd( -15.4164, -30.5875, 48.6548, 0.45 ) }
    dend_13 { pt3dadd( -15.6803, -31.0322, 49.137, 0.45 ) }
    dend_13 { pt3dadd( -16.0945, -31.9122, 50.144, 0.45 ) }
    dend_13 { pt3dadd( -16.3309, -32.8986, 51.2752, 0.45 ) }
    dend_13 { pt3dadd( -16.3032, -33.8912, 52.5328, 0.45 ) }
    dend_13 { pt3dadd( -16.1165, -34.4839, 53.3695, 0.45 ) }
    dend_13 { pt3dadd( -15.6666, -35.0933, 54.1813, 0.45 ) }
    dend_13 { pt3dadd( -14.9458, -35.6286, 54.902, 0.45 ) }
    dend_13 { pt3dadd( -13.419, -36.3529, 55.8966, 0.45 ) }
    dend_13 { pt3dadd( -11.7248, -36.8873, 56.7001, 0.45 ) }
    dend_13 { pt3dadd( -9.85068, -37.2641, 57.3668, 0.23 ) }
    dend_13 { pt3dadd( -7.25436, -37.755, 58.1619, 0.23 ) }
    dend_13 { pt3dadd( -4.16795, -38.318, 58.9525, 0.23 ) }
    dend_13 { pt3dadd( -1.96969, -38.6416, 59.4049, 0.23 ) }
    dend_13 { pt3dadd( -0.509351, -38.7369, 59.6129, 0.23 ) }
    dend_13 { pt3dadd( 1.27341, -38.7332, 59.7584, 0.23 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 77/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -6.76444, -13.3878, 12.6044, 0.68 ) }
    dend_12 { pt3dadd( -7.71486, -13.9003, 12.9798, 0.68 ) }
    dend_12 { pt3dadd( -9.58348, -14.883, 13.6744, 0.45 ) }
    dend_12 { pt3dadd( -11.2308, -15.8044, 14.2599, 0.45 ) }
    dend_12 { pt3dadd( -12.6484, -16.6391, 14.7695, 0.68 ) }
    dend_12 { pt3dadd( -13.923, -17.4538, 15.2447, 0.68 ) }
    dend_12 { pt3dadd( -14.6117, -17.9143, 15.5049, 0.68 ) }
    dend_12 { pt3dadd( -15.9152, -18.8282, 15.983, 0.45 ) }
    dend_12 { pt3dadd( -17.7483, -20.1716, 16.6131, 0.45 ) }
    dend_12 { pt3dadd( -18.8039, -20.9925, 16.9423, 0.45 ) }
    dend_12 { pt3dadd( -20.0584, -22.0009, 17.289, 0.45 ) }
    dend_12 { pt3dadd( -21.3076, -23.0029, 17.5948, 0.45 ) }
    dend_12 { pt3dadd( -22.3661, -23.8819, 17.8451, 0.45 ) }
    dend_12 { pt3dadd( -23.603, -24.9373, 18.1439, 0.68 ) }
    dend_12 { pt3dadd( -24.6856, -25.8511, 18.3763, 0.68 ) }
    dend_12 { pt3dadd( -26.5738, -27.4283, 18.7761, 0.68 ) }
    dend_12 { pt3dadd( -28.3302, -28.8985, 19.1869, 0.45 ) }
    dend_12 { pt3dadd( -29.9656, -30.338, 19.618, 0.45 ) }
    dend_12 { pt3dadd( -31.1499, -31.4185, 19.9634, 0.45 ) }
    dend_12 { pt3dadd( -32.1653, -32.3647, 20.273, 0.45 ) }
    dend_12 { pt3dadd( -33.6954, -33.7765, 20.745, 0.45 ) }
    dend_12 { pt3dadd( -34.8791, -34.8606, 21.0907, 0.45 ) }
    dend_12 { pt3dadd( -36.3673, -36.1774, 21.5034, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_12 { pt3dadd( -37.0126, -36.7324, 21.6766, 0.45 ) }
    dend_12 { pt3dadd( -38.1757, -37.7566, 21.9785, 0.45 ) }
    dend_12 { pt3dadd( -39.1063, -38.5682, 22.2029, 0.45 ) }
    dend_12 { pt3dadd( -40.1709, -39.4535, 22.4007, 0.45 ) }
    dend_12 { pt3dadd( -41.1643, -40.2291, 22.5488, 0.45 ) }
    dend_12 { pt3dadd( -42.5621, -41.2194, 22.7096, 0.45 ) }
    dend_12 { pt3dadd( -43.8538, -42.098, 22.8208, 0.45 ) }
    dend_12 { pt3dadd( -45.2417, -43.015, 22.9014, 0.45 ) }
    dend_12 { pt3dadd( -46.2162, -43.6194, 22.928, 0.45 ) }
    dend_12 { pt3dadd( -47.7119, -44.5528, 22.953, 0.45 ) }
    dend_12 { pt3dadd( -49.5002, -45.7004, 22.9852, 0.45 ) }
    dend_12 { pt3dadd( -50.9785, -46.6543, 23.061, 0.45 ) }
    dend_12 { pt3dadd( -52.1377, -47.4254, 23.1791, 0.45 ) }
    dend_12 { pt3dadd( -53.6465, -48.5098, 23.4191, 0.45 ) }
    dend_12 { pt3dadd( -55.5492, -49.9438, 23.8409, 0.45 ) }
    dend_12 { pt3dadd( -57.081, -51.1787, 24.2895, 0.45 ) }
    dend_12 { pt3dadd( -58.4936, -52.4127, 24.8029, 0.45 ) }
    dend_12 { pt3dadd( -60.2645, -54.0305, 25.5619, 0.45 ) }
    dend_12 { pt3dadd( -61.6881, -55.3171, 26.247, 0.45 ) }
    dend_12 { pt3dadd( -62.5896, -56.1327, 26.7193, 0.45 ) }
    dend_12 { pt3dadd( -64.2418, -57.5726, 27.5998, 0.45 ) }
    dend_12 { pt3dadd( -65.5714, -58.6681, 28.2814, 0.45 ) }
    dend_12 { pt3dadd( -66.6905, -59.5777, 28.8322, 0.45 ) }
    dend_12 { pt3dadd( -68.8904, -61.3869, 29.8674, 0.45 ) }
    dend_12 { pt3dadd( -69.99, -62.3118, 30.3407, 0.45 ) }
    dend_12 { pt3dadd( -70.6312, -62.8522, 30.5938, 0.45 ) }
    dend_12 { pt3dadd( -71.7502, -63.8545, 30.9969, 0.45 ) }
    dend_12 { pt3dadd( -72.7693, -64.8949, 31.3128, 0.45 ) }
    dend_12 { pt3dadd( -73.7697, -66.0544, 31.5264, 0.45 ) }
    dend_12 { pt3dadd( -74.7336, -67.284, 31.6414, 0.45 ) }
    dend_12 { pt3dadd( -75.7261, -68.5678, 31.6979, 0.45 ) }
    dend_12 { pt3dadd( -77.0525, -70.4034, 31.6946, 0.45 ) }
    dend_12 { pt3dadd( -78.3586, -72.3512, 31.6086, 0.45 ) }
    dend_12 { pt3dadd( -81.0524, -76.4102, 31.2869, 0.45 ) }
    dend_12 { pt3dadd( -82.1216, -78.0365, 31.1369, 0.45 ) }
    dend_12 { pt3dadd( -83.2807, -79.8342, 30.9818, 0.45 ) }
    dend_12 { pt3dadd( -84.8046, -82.2605, 30.8104, 0.45 ) }
    dend_12 { pt3dadd( -86.426, -84.7868, 30.6995, 0.45 ) }
    dend_12 { pt3dadd( -87.768, -86.8654, 30.7017, 0.45 ) }
    dend_12 { pt3dadd( -88.771, -88.4244, 30.8026, 0.45 ) }
    dend_12 { pt3dadd( -89.9853, -90.1633, 31.0469, 0.45 ) }
    dend_12 { pt3dadd( -91.7135, -92.5188, 31.4915, 0.45 ) }
    dend_12 { pt3dadd( -92.2823, -93.2197, 31.672, 0.45 ) }
    dend_12 { pt3dadd( -93.6773, -94.8255, 32.1857, 0.45 ) }
    dend_12 { pt3dadd( -94.9282, -96.2262, 32.6764, 0.45 ) }
    dend_12 { pt3dadd( -96.7144, -98.138, 33.3167, 0.45 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 46/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -9.05177, 0.63519, 7.91302, 0.45 ) }
    dend_10 { pt3dadd( -8.60762, 0.308294, 8.92824, 0.45 ) }
    dend_10 { pt3dadd( -8.19025, 0.0889516, 10.0995, 0.45 ) }
    dend_10 { pt3dadd( -8.01225, 0.121575, 10.6297, 0.45 ) }
    dend_10 { pt3dadd( -7.543, 0.400281, 11.6735, 0.45 ) }
    dend_10 { pt3dadd( -7.09081, 0.748669, 12.5837, 0.45 ) }
    dend_10 { pt3dadd( -6.69062, 1.1052, 13.4361, 0.45 ) }
    dend_10 { pt3dadd( -6.21698, 1.61045, 14.4842, 0.45 ) }
    dend_10 { pt3dadd( -5.77769, 2.1923, 15.6571, 0.45 ) }
    dend_10 { pt3dadd( -5.24241, 3.02071, 17.2594, 0.45 ) }
    dend_10 { pt3dadd( -5.01198, 3.37488, 17.9134, 0.45 ) }
    dend_10 { pt3dadd( -4.78841, 3.66318, 18.461, 0.45 ) }
    dend_10 { pt3dadd( -4.4304, 4.05716, 19.2524, 0.45 ) }
    dend_10 { pt3dadd( -4.23442, 4.25035, 19.79, 0.45 ) }
    dend_10 { pt3dadd( -4.06296, 4.48912, 20.7634, 0.45 ) }
    dend_10 { pt3dadd( -4.01563, 4.79209, 21.9152, 0.45 ) }
    dend_10 { pt3dadd( -3.95587, 5.11763, 23.0181, 0.45 ) }
    dend_10 { pt3dadd( -3.92552, 5.34629, 23.7392, 0.45 ) }
    dend_10 { pt3dadd( -3.84893, 5.93055, 25.2962, 0.45 ) }
    dend_10 { pt3dadd( -3.71642, 6.73684, 27.1803, 0.45 ) }
    dend_10 { pt3dadd( -3.61282, 7.36497, 28.4922, 0.45 ) }
    dend_10 { pt3dadd( -3.40266, 8.14906, 29.8941, 0.45 ) }
    dend_10 { pt3dadd( -3.12398, 9.05111, 31.4676, 0.45 ) }
    dend_10 { pt3dadd( -2.75604, 10.0045, 33.0675, 0.23 ) }
    dend_10 { pt3dadd( -2.29667, 11.0048, 34.5346, 0.23 ) }
    dend_10 { pt3dadd( -1.83539, 11.8478, 35.6399, 0.23 ) }
    dend_10 { pt3dadd( -0.888297, 13.4533, 37.6796, 0.23 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 73/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -9.05177, 0.63519, 7.91302, 0.68 ) }
    dend_9 { pt3dadd( -9.92407, 0.333625, 8.12433, 0.68 ) }
    dend_9 { pt3dadd( -11.411, -0.144761, 8.55905, 0.45 ) }
    dend_9 { pt3dadd( -12.5111, -0.456777, 8.89726, 0.45 ) }
    dend_9 { pt3dadd( -13.976, -0.811864, 9.40914, 0.45 ) }
    dend_9 { pt3dadd( -15.0471, -1.0665, 9.84198, 0.45 ) }
    dend_9 { pt3dadd( -16.4435, -1.45919, 10.488, 0.45 ) }
    dend_9 { pt3dadd( -17.1148, -1.66386, 10.8636, 0.45 ) }
    dend_9 { pt3dadd( -18.216, -2.03768, 11.6049, 0.45 ) }
    dend_9 { pt3dadd( -19.1222, -2.40138, 12.2806, 0.45 ) }
    dend_9 { pt3dadd( -19.8739, -2.79162, 12.8999, 0.45 ) }
    dend_9 { pt3dadd( -20.9535, -3.446, 13.9002, 0.45 ) }
    dend_9 { pt3dadd( -21.3482, -3.71852, 14.3261, 0.68 ) }
    dend_9 { pt3dadd( -22.0883, -4.31462, 15.2381, 0.68 ) }
    dend_9 { pt3dadd( -22.8868, -5.00836, 16.3576, 0.68 ) }
    dend_9 { pt3dadd( -23.8415, -5.77792, 17.6912, 0.45 ) }
    dend_9 { pt3dadd( -24.6775, -6.31498, 18.8842, 0.45 ) }
    dend_9 { pt3dadd( -25.5877, -6.77371, 20.2348, 0.45 ) }
    dend_9 { pt3dadd( -26.2093, -7.08693, 21.2969, 0.45 ) }
    dend_9 { pt3dadd( -26.5635, -7.27009, 22.002, 0.45 ) }
    dend_9 { pt3dadd( -27.0206, -7.4978, 23.0684, 0.45 ) }
    dend_9 { pt3dadd( -27.5138, -7.6829, 24.2815, 0.45 ) }
    dend_9 { pt3dadd( -27.8178, -7.75994, 25.0384, 0.45 ) }
    dend_9 { pt3dadd( -28.2772, -7.90742, 26.3296, 0.45 ) }
    dend_9 { pt3dadd( -28.6735, -8.05443, 27.3821, 0.45 ) }
    dend_9 { pt3dadd( -28.8919, -8.15798, 27.8859, 0.45 ) }
    dend_9 { pt3dadd( -29.3948, -8.43451, 28.942, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_9 { pt3dadd( -30.0541, -8.7559, 30.0271, 0.45 ) }
    dend_9 { pt3dadd( -30.9045, -9.0596, 31.1548, 0.45 ) }
    dend_9 { pt3dadd( -32.0383, -9.32244, 32.3902, 0.45 ) }
    dend_9 { pt3dadd( -33.1725, -9.49482, 33.4411, 0.45 ) }
    dend_9 { pt3dadd( -33.928, -9.59141, 34.0546, 0.45 ) }
    dend_9 { pt3dadd( -34.9234, -9.71655, 34.7346, 0.45 ) }
    dend_9 { pt3dadd( -35.7496, -9.82205, 35.2473, 0.45 ) }
    dend_9 { pt3dadd( -37.072, -9.97646, 36.0496, 0.45 ) }
    dend_9 { pt3dadd( -38.559, -10.1336, 36.9492, 0.23 ) }
    dend_9 { pt3dadd( -39.3772, -10.2264, 37.4262, 0.23 ) }
    dend_9 { pt3dadd( -41.2105, -10.4062, 38.4339, 0.23 ) }
    dend_9 { pt3dadd( -42.4863, -10.5016, 39.1595, 0.23 ) }
    dend_9 { pt3dadd( -43.6941, -10.6088, 39.8376, 0.23 ) }
    dend_9 { pt3dadd( -44.7965, -10.729, 40.4327, 0.23 ) }
    dend_9 { pt3dadd( -46.2905, -10.8764, 41.2476, 0.23 ) }
    dend_9 { pt3dadd( -47.8709, -10.9383, 42.0976, 0.23 ) }
    dend_9 { pt3dadd( -49.4661, -10.8238, 42.9776, 0.23 ) }
    // Section: dend_5, id: dend_5, parent: dend_1 (entry count 17/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -25.4829, 1.55819, -10.8095, 0.68 ) }
    dend_5 { pt3dadd( -25.9504, 1.66282, -11.3596, 0.68 ) }
    dend_5 { pt3dadd( -26.3978, 1.82109, -11.8756, 0.68 ) }
    dend_5 { pt3dadd( -26.9575, 2.01861, -12.4867, 0.68 ) }
    dend_5 { pt3dadd( -27.9339, 2.29259, -13.3842, 0.68 ) }
    dend_5 { pt3dadd( -29.0462, 2.59061, -14.3149, 0.68 ) }
    dend_5 { pt3dadd( -30.3295, 2.98203, -15.2702, 0.68 ) }
    dend_5 { pt3dadd( -31.3357, 3.32024, -15.947, 0.68 ) }
    dend_5 { pt3dadd( -32.4676, 3.7375, -16.6364, 0.68 ) }
    dend_5 { pt3dadd( -33.9782, 4.30898, -17.506, 0.68 ) }
    dend_5 { pt3dadd( -35.0419, 4.70332, -18.0743, 0.68 ) }
    dend_5 { pt3dadd( -37.0683, 5.37729, -19.0875, 0.45 ) }
    dend_5 { pt3dadd( -38.5869, 5.86929, -19.8967, 0.45 ) }
    dend_5 { pt3dadd( -39.7139, 6.23031, -20.57, 0.45 ) }
    dend_5 { pt3dadd( -40.996, 6.64668, -21.4438, 0.45 ) }
    dend_5 { pt3dadd( -42.0431, 6.97388, -22.2702, 0.45 ) }
    dend_5 { pt3dadd( -42.8036, 7.15963, -22.9335, 0.45 ) }
    dend_5 { pt3dadd( -44.2732, 7.41011, -24.3463, 0.45 ) }
    dend_5 { pt3dadd( -45.4951, 7.57818, -25.5445, 0.45 ) }
    dend_5 { pt3dadd( -46.6999, 7.71932, -26.6495, 0.45 ) }
    dend_5 { pt3dadd( -47.4568, 7.80702, -27.3492, 0.45 ) }
    dend_5 { pt3dadd( -48.4898, 7.91488, -28.3238, 0.45 ) }
    dend_5 { pt3dadd( -49.0735, 7.95572, -28.8379, 0.45 ) }
    dend_5 { pt3dadd( -49.853, 7.97602, -29.3846, 0.45 ) }
    dend_5 { pt3dadd( -51.8744, 8.0161, -30.5683, 0.45 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 42/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -25.4829, 1.55819, -10.8095, 0.68 ) }
    dend_2 { pt3dadd( -27.3531, 0.560147, -10.8094, 0.68 ) }
    dend_2 { pt3dadd( -29.3853, -0.559634, -10.8939, 0.68 ) }
    dend_2 { pt3dadd( -30.8381, -1.38381, -10.9877, 0.45 ) }
    dend_2 { pt3dadd( -32.4091, -2.27609, -11.1089, 0.45 ) }
    dend_2 { pt3dadd( -33.8292, -3.08014, -11.2233, 0.45 ) }
    dend_2 { pt3dadd( -35.2924, -3.89403, -11.3459, 0.45 ) }
    dend_2 { pt3dadd( -37.0548, -4.88097, -11.5168, 0.45 ) }
    dend_2 { pt3dadd( -38.2744, -5.58567, -11.6431, 0.45 ) }
    dend_2 { pt3dadd( -39.5263, -6.32085, -11.7793, 0.45 ) }
    dend_2 { pt3dadd( -41.4968, -7.52363, -11.9787, 0.45 ) }
    dend_2 { pt3dadd( -42.9101, -8.41374, -12.1248, 0.45 ) }
    dend_2 { pt3dadd( -44.3067, -9.31244, -12.2912, 0.45 ) }
    dend_2 { pt3dadd( -46.0739, -10.4583, -12.53, 0.45 ) }
    dend_2 { pt3dadd( -47.6392, -11.4832, -12.7832, 0.45 ) }
    dend_2 { pt3dadd( -48.5263, -12.0768, -12.9473, 0.45 ) }
    dend_2 { pt3dadd( -49.7092, -12.8769, -13.1938, 0.45 ) }
    dend_2 { pt3dadd( -50.4404, -13.3582, -13.3537, 0.45 ) }
    dend_2 { pt3dadd( -51.915, -14.2943, -13.7026, 0.45 ) }
    dend_2 { pt3dadd( -53.2909, -15.1868, -14.0447, 0.45 ) }
    dend_2 { pt3dadd( -54.8979, -16.1935, -14.4386, 0.45 ) }
    dend_2 { pt3dadd( -56.1265, -16.8691, -14.708, 0.45 ) }
    dend_2 { pt3dadd( -57.6385, -17.5904, -14.9915, 0.45 ) }
    dend_2 { pt3dadd( -59.1697, -18.2717, -15.2685, 0.45 ) }
    dend_2 { pt3dadd( -60.1681, -18.6942, -15.4503, 0.45 ) }
    dend_2 { pt3dadd( -61.6611, -19.295, -15.7247, 0.45 ) }
    dend_2 { pt3dadd( -63.7586, -20.0912, -16.0931, 0.45 ) }
    dend_2 { pt3dadd( -65.3117, -20.6786, -16.3475, 0.45 ) }
    dend_2 { pt3dadd( -66.5513, -21.1851, -16.5338, 0.45 ) }
    dend_2 { pt3dadd( -68.1541, -21.9042, -16.757, 0.45 ) }
    dend_2 { pt3dadd( -68.9672, -22.3022, -16.8618, 0.45 ) }
    dend_2 { pt3dadd( -70.5074, -23.1735, -17.0958, 0.45 ) }
    dend_2 { pt3dadd( -72.4627, -24.4125, -17.497, 0.45 ) }
    dend_2 { pt3dadd( -74.0563, -25.4588, -17.899, 0.45 ) }
    dend_2 { pt3dadd( -75.938, -26.6832, -18.434, 0.45 ) }
    dend_2 { pt3dadd( -78.4656, -28.3246, -19.243, 0.23 ) }
    dend_2 { pt3dadd( -80.5056, -29.6085, -19.9026, 0.23 ) }
    dend_2 { pt3dadd( -82.8764, -31.0219, -20.6788, 0.23 ) }
    dend_2 { pt3dadd( -84.8136, -32.1241, -21.2982, 0.23 ) }
    dend_2 { pt3dadd( -86.9388, -33.2397, -21.9702, 0.23 ) }
    dend_2 { pt3dadd( -89.3552, -34.4058, -22.7139, 0.23 ) }
    dend_2 { pt3dadd( -92.5844, -35.865, -23.6645, 0.23 ) }
    dend_2 { pt3dadd( -94.8266, -36.7714, -24.2614, 0.23 ) }
    dend_2 { pt3dadd( -97.1174, -37.6066, -24.8138, 0.23 ) }
    dend_2 { pt3dadd( -98.9398, -38.2367, -25.2469, 0.23 ) }
    dend_2 { pt3dadd( -101.182, -38.9695, -25.814, 0.23 ) }
    dend_2 { pt3dadd( -102.704, -39.4255, -26.2463, 0.23 ) }
    dend_2 { pt3dadd( -104.068, -39.7945, -26.717, 0.23 ) }
    dend_2 { pt3dadd( -105.113, -40.0374, -27.1191, 0.23 ) }
    dend_2 { pt3dadd( -106.512, -40.3301, -27.7286, 0.23 ) }
    dend_2 { pt3dadd( -107.531, -40.5618, -28.197, 0.23 ) }
    dend_2 { pt3dadd( -108.768, -40.8472, -28.7895, 0.23 ) }
    dend_2 { pt3dadd( -109.997, -41.1321, -29.3642, 0.23 ) }
    dend_2 { pt3dadd( -110.719, -41.3311, -29.6932, 0.23 ) }
    dend_2 { pt3dadd( -112.122, -41.7757, -30.3033, 0.23 ) }
    dend_2 { pt3dadd( -113.437, -42.2302, -30.8128, 0.23 ) }
    dend_2 { pt3dadd( -115.591, -43.1036, -31.5884, 0.23 ) }
    dend_2 { pt3dadd( -116.81, -43.6517, -32.0064, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_2 { pt3dadd( -118.451, -44.4562, -32.5369, 0.23 ) }
    dend_2 { pt3dadd( -119.664, -45.0823, -32.9204, 0.23 ) }
    dend_2 { pt3dadd( -120.93, -45.7333, -33.3104, 0.23 ) }
    dend_2 { pt3dadd( -122.351, -46.425, -33.7335, 0.23 ) }
    dend_2 { pt3dadd( -124.584, -47.4904, -34.3835, 0.23 ) }
    dend_2 { pt3dadd( -126.0, -48.1302, -34.7901, 0.23 ) }
    dend_2 { pt3dadd( -127.336, -48.6861, -35.1364, 0.23 ) }
    dend_2 { pt3dadd( -128.581, -49.1837, -35.4404, 0.23 ) }
    dend_2 { pt3dadd( -131.75, -50.3955, -36.2062, 0.23 ) }
    dend_2 { pt3dadd( -132.98, -50.85, -36.4835, 0.23 ) }
    dend_2 { pt3dadd( -135.063, -51.6364, -36.9615, 0.23 ) }
    dend_2 { pt3dadd( -136.144, -52.0408, -37.2197, 0.23 ) }
    dend_2 { pt3dadd( -136.819, -52.3018, -37.3791, 0.23 ) }
    dend_2 { pt3dadd( -138.399, -52.9813, -37.7487, 0.23 ) }
    dend_2 { pt3dadd( -139.644, -53.581, -38.0475, 0.23 ) }
    dend_2 { pt3dadd( -140.861, -54.1877, -38.3392, 0.23 ) }
    dend_2 { pt3dadd( -141.641, -54.5925, -38.5361, 0.23 ) }
    dend_2 { pt3dadd( -143.178, -55.4258, -38.9448, 0.23 ) }
    dend_2 { pt3dadd( -144.379, -56.1072, -39.2347, 0.23 ) }
    dend_2 { pt3dadd( -145.388, -56.6852, -39.4428, 0.23 ) }
    dend_2 { pt3dadd( -146.177, -57.1226, -39.5924, 0.23 ) }
    dend_2 { pt3dadd( -148.315, -58.3124, -39.9552, 0.23 ) }
    dend_2 { pt3dadd( -149.391, -58.9229, -40.1233, 0.23 ) }
    dend_2 { pt3dadd( -151.373, -60.0522, -40.3977, 0.23 ) }
    dend_2 { pt3dadd( -153.383, -61.2011, -40.6326, 0.23 ) }
    dend_2 { pt3dadd( -154.843, -62.0041, -40.7615, 0.23 ) }
    dend_2 { pt3dadd( -155.932, -62.5922, -40.8395, 0.23 ) }
    dend_2 { pt3dadd( -157.96, -63.6503, -40.8846, 0.23 ) }
    dend_2 { pt3dadd( -160.186, -64.7431, -40.8407, 0.23 ) }
    dend_2 { pt3dadd( -161.948, -65.5551, -40.7184, 0.23 ) }
    dend_2 { pt3dadd( -164.01, -66.4703, -40.4819, 0.23 ) }
    dend_2 { pt3dadd( -166.621, -67.5957, -40.056, 0.23 ) }
    dend_2 { pt3dadd( -169.097, -68.6406, -39.5476, 0.23 ) }
    dend_2 { pt3dadd( -170.422, -69.2225, -39.2416, 0.23 ) }
    dend_2 { pt3dadd( -172.403, -70.1666, -38.7454, 0.23 ) }
    dend_2 { pt3dadd( -173.724, -70.8518, -38.4152, 0.23 ) }
    dend_2 { pt3dadd( -175.674, -71.9457, -37.9469, 0.23 ) }
    dend_2 { pt3dadd( -177.775, -73.1863, -37.4803, 0.23 ) }
    dend_2 { pt3dadd( -181.418, -75.4328, -36.9211, 0.23 ) }
    dend_2 { pt3dadd( -183.672, -76.8692, -36.7051, 0.23 ) }
    dend_2 { pt3dadd( -186.045, -78.4383, -36.6333, 0.23 ) }
    dend_2 { pt3dadd( -187.691, -79.5438, -36.6845, 0.23 ) }
    dend_2 { pt3dadd( -189.769, -80.9249, -36.8775, 0.23 ) }
    dend_2 { pt3dadd( -192.065, -82.4446, -37.2309, 0.23 ) }
    dend_2 { pt3dadd( -193.157, -83.1468, -37.4722, 0.23 ) }
    dend_2 { pt3dadd( -195.088, -84.4399, -38.0319, 0.23 ) }
    dend_2 { pt3dadd( -196.225, -85.264, -38.4458, 0.23 ) }
    dend_2 { pt3dadd( -197.077, -85.9544, -38.8069, 0.23 ) }
    dend_2 { pt3dadd( -198.218, -87.017, -39.3238, 0.23 ) }
    dend_2 { pt3dadd( -198.956, -87.798, -39.6455, 0.23 ) }
    dend_2 { pt3dadd( -200.497, -89.4945, -40.3092, 0.23 ) }
    dend_2 { pt3dadd( -201.887, -91.1166, -40.921, 0.23 ) }
    dend_2 { pt3dadd( -202.747, -92.2202, -41.3137, 0.23 ) }
    dend_2 { pt3dadd( -204.665, -94.9446, -42.2661, 0.23 ) }
    dend_2 { pt3dadd( -205.756, -96.6223, -42.8448, 0.23 ) }
    dend_2 { pt3dadd( -206.664, -98.0865, -43.3572, 0.23 ) }
    dend_2 { pt3dadd( -207.658, -99.7584, -43.9626, 0.23 ) }
    dend_2 { pt3dadd( -208.711, -101.673, -44.6685, 0.23 ) }
    dend_2 { pt3dadd( -209.575, -103.263, -45.2977, 0.23 ) }
    dend_2 { pt3dadd( -210.318, -104.627, -45.8727, 0.23 ) }
    dend_2 { pt3dadd( -211.338, -106.366, -46.6529, 0.23 ) }
    dend_2 { pt3dadd( -212.264, -107.798, -47.3588, 0.23 ) }
    dend_2 { pt3dadd( -212.816, -108.529, -47.7574, 0.23 ) }
    dend_2 { pt3dadd( -214.253, -110.123, -48.6995, 0.23 ) }
    dend_2 { pt3dadd( -216.001, -111.863, -49.7473, 0.23 ) }
    dend_2 { pt3dadd( -217.061, -112.854, -50.3175, 0.23 ) }
    dend_2 { pt3dadd( -218.944, -114.528, -51.1657, 0.23 ) }
    dend_2 { pt3dadd( -220.443, -115.862, -51.7526, 0.23 ) }
    dend_2 { pt3dadd( -221.479, -116.864, -52.1319, 0.23 ) }
    dend_2 { pt3dadd( -222.601, -118.095, -52.5301, 0.23 ) }
    dend_2 { pt3dadd( -223.849, -119.683, -52.9877, 0.23 ) }
    dend_2 { pt3dadd( -226.173, -123.03, -53.83, 0.23 ) }
    dend_2 { pt3dadd( -227.31, -124.828, -54.2403, 0.23 ) }
    dend_2 { pt3dadd( -228.266, -126.535, -54.6103, 0.23 ) }
    dend_2 { pt3dadd( -229.131, -128.401, -54.9929, 0.23 ) }
    dend_2 { pt3dadd( -229.873, -130.379, -55.4004, 0.23 ) }
    dend_2 { pt3dadd( -230.393, -132.25, -55.7932, 0.23 ) }
    dend_2 { pt3dadd( -230.667, -133.862, -56.1214, 0.23 ) }
    dend_2 { pt3dadd( -230.933, -135.724, -56.4859, 0.23 ) }
    dend_2 { pt3dadd( -231.289, -138.671, -57.0275, 0.23 ) }
    dend_2 { pt3dadd( -231.406, -140.16, -57.2693, 0.23 ) }
    dend_2 { pt3dadd( -231.451, -141.791, -57.4855, 0.23 ) }
    dend_2 { pt3dadd( -231.398, -142.646, -57.5948, 0.23 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 83/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 35.6263, -10.2095, 0.0, 0.23 ) }
    axon_1 { pt3dadd( 50.0974, -14.1578, 0.0, 0.23 ) }
    axon_1 { pt3dadd( 64.5684, -18.1061, 0.0, 0.23 ) }
    // Section: dend_25, id: dend_25, parent: dend_19 (entry count 86/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 11.7231, 3.82089, -3.7807, 0.68 ) }
    dend_25 { pt3dadd( 12.5888, 6.50447, -3.72794, 0.68 ) }
    dend_25 { pt3dadd( 13.0332, 7.88225, -3.70085, 0.68 ) }
    dend_25 { pt3dadd( 13.5091, 9.3574, -3.67185, 0.68 ) }
    // Section: dend_20, id: dend_20, parent: dend_19 (entry count 90/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 11.7231, 3.82089, -3.7807, 0.68 ) }
    dend_20 { pt3dadd( 12.8743, 3.3294, -3.87464, 0.68 ) }
    dend_20 { pt3dadd( 14.3612, 2.74288, -4.01647, 0.68 ) }
    dend_20 { pt3dadd( 16.1801, 2.11152, -4.18515, 0.68 ) }
    dend_20 { pt3dadd( 17.8709, 1.51995, -4.33033, 0.68 ) }
    dend_20 { pt3dadd( 19.5886, 0.895288, -4.4463, 0.68 ) }
    dend_20 { pt3dadd( 21.3901, 0.19629, -4.54789, 0.68 ) }
    dend_20 { pt3dadd( 23.5032, -0.629797, -4.67412, 0.68 ) }
    dend_20 { pt3dadd( 25.3897, -1.38364, -4.79312, 0.68 ) }
    dend_20 { pt3dadd( 27.5184, -2.23283, -4.93061, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_20 { pt3dadd( 29.5363, -3.01512, -5.01199, 0.68 ) }
    dend_20 { pt3dadd( 30.8978, -3.53238, -4.99428, 0.68 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 2/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -51.8744, 8.0161, -30.5683, 0.45 ) }
    dend_7 { pt3dadd( -52.9363, 8.37484, -30.9227, 0.45 ) }
    dend_7 { pt3dadd( -53.8363, 8.6794, -31.2233, 0.45 ) }
    dend_7 { pt3dadd( -54.8706, 9.04777, -31.5808, 0.45 ) }
    dend_7 { pt3dadd( -56.5061, 9.67847, -32.1712, 0.45 ) }
    dend_7 { pt3dadd( -58.0611, 10.2878, -32.7253, 0.45 ) }
    dend_7 { pt3dadd( -59.1871, 10.7201, -33.1155, 0.45 ) }
    dend_7 { pt3dadd( -60.4193, 11.1924, -33.5492, 0.45 ) }
    dend_7 { pt3dadd( -61.3004, 11.5548, -33.8393, 0.45 ) }
    dend_7 { pt3dadd( -62.6411, 12.1338, -34.2682, 0.45 ) }
    dend_7 { pt3dadd( -63.8814, 12.6569, -34.6489, 0.45 ) }
    dend_7 { pt3dadd( -64.7051, 12.9693, -34.8762, 0.45 ) }
    dend_7 { pt3dadd( -66.0626, 13.4046, -35.2049, 0.45 ) }
    dend_7 { pt3dadd( -67.5824, 13.8764, -35.5619, 0.45 ) }
    dend_7 { pt3dadd( -68.9276, 14.2661, -35.8292, 0.45 ) }
    dend_7 { pt3dadd( -70.0602, 14.5804, -36.0569, 0.45 ) }
    dend_7 { pt3dadd( -71.1399, 14.875, -36.2749, 0.45 ) }
    dend_7 { pt3dadd( -73.2932, 15.4608, -36.6769, 0.45 ) }
    dend_7 { pt3dadd( -75.2493, 15.9932, -37.0596, 0.45 ) }
    dend_7 { pt3dadd( -76.6259, 16.3767, -37.3763, 0.45 ) }
    dend_7 { pt3dadd( -77.9616, 16.7618, -37.7374, 0.45 ) }
    dend_7 { pt3dadd( -80.57, 17.4786, -38.419, 0.45 ) }
    dend_7 { pt3dadd( -82.843, 18.0577, -39.0141, 0.23 ) }
    dend_7 { pt3dadd( -85.0395, 18.5714, -39.5861, 0.23 ) }
    dend_7 { pt3dadd( -86.851, 18.9186, -40.043, 0.23 ) }
    dend_7 { pt3dadd( -88.0547, 19.1266, -40.368, 0.23 ) }
    dend_7 { pt3dadd( -90.5434, 19.5399, -41.0093, 0.23 ) }
    dend_7 { pt3dadd( -92.4029, 19.8001, -41.5075, 0.23 ) }
    dend_7 { pt3dadd( -94.0502, 19.9678, -41.9267, 0.23 ) }
    dend_7 { pt3dadd( -95.6586, 20.123, -42.2821, 0.23 ) }
    dend_7 { pt3dadd( -97.8555, 20.3646, -42.7238, 0.23 ) }
    dend_7 { pt3dadd( -99.4114, 20.5679, -43.076, 0.23 ) }
    dend_7 { pt3dadd( -100.869, 20.7679, -43.513, 0.23 ) }
    dend_7 { pt3dadd( -102.817, 20.9775, -44.1629, 0.23 ) }
    dend_7 { pt3dadd( -103.656, 21.0476, -44.4573, 0.23 ) }
    dend_7 { pt3dadd( -104.963, 21.1085, -44.9541, 0.23 ) }
    dend_7 { pt3dadd( -106.751, 21.1289, -45.6896, 0.23 ) }
    dend_7 { pt3dadd( -108.929, 21.1264, -46.7518, 0.23 ) }
    dend_7 { pt3dadd( -111.0, 21.175, -47.9698, 0.23 ) }
    dend_7 { pt3dadd( -112.9, 21.2328, -49.2788, 0.23 ) }
    dend_7 { pt3dadd( -114.731, 21.262, -50.5861, 0.23 ) }
    dend_7 { pt3dadd( -116.044, 21.2819, -51.5728, 0.23 ) }
    dend_7 { pt3dadd( -118.985, 21.3527, -53.8898, 0.23 ) }
    dend_7 { pt3dadd( -121.486, 21.4893, -56.0117, 0.23 ) }
    dend_7 { pt3dadd( -123.331, 21.657, -57.7478, 0.23 ) }
    dend_7 { pt3dadd( -132.577, 23.47, -61.0446, 0.23 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 48/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -51.8744, 8.0161, -30.5683, 0.23 ) }
    dend_6 { pt3dadd( -53.2045, 7.20699, -30.9505, 0.23 ) }
    dend_6 { pt3dadd( -54.6462, 6.35911, -31.3645, 0.23 ) }
    dend_6 { pt3dadd( -56.4597, 5.3423, -31.9269, 0.23 ) }
    dend_6 { pt3dadd( -58.0151, 4.47449, -32.4338, 0.23 ) }
    dend_6 { pt3dadd( -59.0811, 3.88021, -32.8037, 0.23 ) }
    dend_6 { pt3dadd( -60.4447, 3.11876, -33.3101, 0.23 ) }
    dend_6 { pt3dadd( -61.9563, 2.30186, -33.9173, 0.23 ) }
    dend_6 { pt3dadd( -63.1046, 1.68743, -34.4618, 0.23 ) }
    dend_6 { pt3dadd( -64.1561, 1.17081, -35.0193, 0.23 ) }
    dend_6 { pt3dadd( -65.1768, 0.720767, -35.5869, 0.23 ) }
    dend_6 { pt3dadd( -66.2194, 0.269135, -36.1952, 0.23 ) }
    dend_6 { pt3dadd( -67.4005, -0.246655, -36.8897, 0.23 ) }
    dend_6 { pt3dadd( -68.6161, -0.78469, -37.5883, 0.23 ) }
    dend_6 { pt3dadd( -69.7446, -1.28351, -38.209, 0.23 ) }
    dend_6 { pt3dadd( -71.4458, -1.97283, -39.0237, 0.23 ) }
    dend_6 { pt3dadd( -73.0592, -2.56452, -39.7178, 0.23 ) }
    dend_6 { pt3dadd( -75.3333, -3.24533, -40.5685, 0.23 ) }
    dend_6 { pt3dadd( -76.587, -3.53361, -40.9698, 0.23 ) }
    dend_6 { pt3dadd( -77.7569, -3.78452, -41.2999, 0.23 ) }
    dend_6 { pt3dadd( -79.6272, -4.13829, -41.7989, 0.23 ) }
    dend_6 { pt3dadd( -80.7512, -4.25191, -42.0434, 0.23 ) }
    dend_6 { pt3dadd( -82.5704, -4.14944, -42.2949, 0.23 ) }
    dend_6 { pt3dadd( -83.9173, -3.77501, -42.3928, 0.23 ) }
    dend_6 { pt3dadd( -93.5826, -5.46709, -44.2395, 0.23 ) }
    dend_6 { pt3dadd( -102.924, -6.50153, -47.6381, 0.23 ) }
    dend_6 { pt3dadd( -112.01, -6.26625, -51.8078, 0.23 ) }
    dend_6 { pt3dadd( -121.756, -7.60716, -53.5439, 0.23 ) }
    dend_6 { pt3dadd( -131.668, -7.66726, -54.8653, 0.23 ) }
    // Section: dend_4, id: dend_4, parent: dend_2 (entry count 77/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -231.398, -142.646, -57.5948, 0.23 ) }
    dend_4 { pt3dadd( -231.821, -145.148, -57.4999, 0.23 ) }
    dend_4 { pt3dadd( -232.098, -146.784, -57.4378, 0.23 ) }
    dend_4 { pt3dadd( -232.512, -149.228, -57.345, 0.23 ) }
    dend_4 { pt3dadd( -233.033, -152.311, -57.228, 0.23 ) }
    dend_4 { pt3dadd( -232.979, -161.805, -57.5657, 0.23 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 83/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -231.398, -142.646, -57.5948, 0.23 ) }
    dend_3 { pt3dadd( -230.69, -145.239, -57.8882, 0.23 ) }
    dend_3 { pt3dadd( -230.007, -147.709, -58.2096, 0.23 ) }
    dend_3 { pt3dadd( -229.658, -149.047, -58.3945, 0.23 ) }
    dend_3 { pt3dadd( -229.154, -150.892, -58.6542, 0.23 ) }
    dend_3 { pt3dadd( -228.72, -152.429, -58.8984, 0.23 ) }
    dend_3 { pt3dadd( -228.027, -155.115, -59.4053, 0.23 ) }
    dend_3 { pt3dadd( -227.69, -156.602, -59.7539, 0.23 ) }
    dend_3 { pt3dadd( -227.329, -158.425, -60.2855, 0.23 ) }
    dend_3 { pt3dadd( -226.983, -161.054, -61.226, 0.23 ) }
    dend_3 { pt3dadd( -226.837, -162.397, -61.7575, 0.23 ) }
    dend_3 { pt3dadd( -226.673, -164.837, -62.8196, 0.23 ) }
    dend_3 { pt3dadd( -226.646, -165.873, -63.3265, 0.23 ) }
    dend_3 { pt3dadd( -226.704, -167.215, -64.0595, 0.23 ) }
    dend_3 { pt3dadd( -226.983, -169.272, -65.3971, 0.23 ) }
    dend_3 { pt3dadd( -224.248, -178.315, -66.7738, 0.23 ) }
    // Section: dend_27, id: dend_27, parent: dend_25 (entry count 99/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( 13.5091, 9.3574, -3.67185, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_27 { pt3dadd( 14.4211, 10.8396, -3.72695, 0.45 ) }
    dend_27 { pt3dadd( 15.3178, 12.2971, -3.78113, 0.45 ) }
    dend_27 { pt3dadd( 16.3719, 14.0103, -3.84481, 0.45 ) }
    dend_27 { pt3dadd( 17.0957, 15.1868, -3.88854, 0.45 ) }
    dend_27 { pt3dadd( 18.0946, 16.8103, -3.94889, 0.45 ) }
    // Section: dend_26, id: dend_26, parent: dend_25 (entry count 5/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 13.5091, 9.3574, -3.67185, 0.45 ) }
    dend_26 { pt3dadd( 12.6478, 10.214, -3.28249, 0.45 ) }
    dend_26 { pt3dadd( 11.4001, 11.3535, -2.66797, 0.45 ) }
    dend_26 { pt3dadd( 10.3356, 12.2931, -2.12986, 0.45 ) }
    dend_26 { pt3dadd( 9.01819, 13.5186, -1.42841, 0.45 ) }
    dend_26 { pt3dadd( 8.17621, 14.3452, -0.932512, 0.45 ) }
    dend_26 { pt3dadd( 7.36929, 15.1819, -0.398706, 0.45 ) }
    dend_26 { pt3dadd( 6.86114, 15.7078, -0.0080789, 0.45 ) }
    dend_26 { pt3dadd( 6.21095, 16.4025, 0.541192, 0.45 ) }
    dend_26 { pt3dadd( 5.37863, 17.3675, 1.3059, 0.45 ) }
    dend_26 { pt3dadd( 4.65297, 18.2652, 2.04071, 0.45 ) }
    dend_26 { pt3dadd( 3.83857, 19.4099, 2.97378, 0.45 ) }
    dend_26 { pt3dadd( 3.45309, 20.0224, 3.41407, 0.45 ) }
    dend_26 { pt3dadd( 2.94462, 20.9657, 3.98276, 0.45 ) }
    dend_26 { pt3dadd( 2.51682, 21.9525, 4.48171, 0.45 ) }
    dend_26 { pt3dadd( 2.19437, 22.95, 4.85587, 0.45 ) }
    dend_26 { pt3dadd( 1.9151, 24.2232, 5.15318, 0.45 ) }
    dend_26 { pt3dadd( 1.60392, 26.3764, 5.44404, 0.45 ) }
    dend_26 { pt3dadd( 1.36503, 28.8315, 5.603, 0.45 ) }
    dend_26 { pt3dadd( 1.22086, 30.8318, 5.59797, 0.45 ) }
    dend_26 { pt3dadd( 1.12306, 32.8502, 5.45862, 0.45 ) }
    dend_26 { pt3dadd( 1.09414, 34.8675, 5.23777, 0.45 ) }
    dend_26 { pt3dadd( 1.15511, 36.7739, 4.98475, 0.45 ) }
    dend_26 { pt3dadd( 1.30034, 38.71, 4.70536, 0.45 ) }
    dend_26 { pt3dadd( 1.5578, 40.9759, 4.35621, 0.45 ) }
    dend_26 { pt3dadd( 1.95605, 43.724, 3.92964, 0.45 ) }
    dend_26 { pt3dadd( 2.35886, 46.2067, 3.5735, 0.45 ) }
    dend_26 { pt3dadd( 2.97195, 49.3263, 3.13333, 0.45 ) }
    dend_26 { pt3dadd( 3.57729, 52.0336, 2.74493, 0.45 ) }
    dend_26 { pt3dadd( 4.21906, 54.7435, 2.35653, 0.45 ) }
    dend_26 { pt3dadd( 4.64268, 56.4481, 2.10577, 0.45 ) }
    dend_26 { pt3dadd( 5.22897, 58.8612, 1.71446, 0.45 ) }
    dend_26 { pt3dadd( 5.6996, 61.0626, 1.31713, 0.45 ) }
    dend_26 { pt3dadd( 6.07466, 63.2011, 0.893723, 0.45 ) }
    dend_26 { pt3dadd( 6.26612, 64.6091, 0.591219, 0.45 ) }
    dend_26 { pt3dadd( 6.45105, 66.3639, 0.202577, 0.45 ) }
    dend_26 { pt3dadd( 6.63014, 68.342, -0.257009, 0.45 ) }
    dend_26 { pt3dadd( 6.87541, 71.3113, -0.980064, 0.45 ) }
    dend_26 { pt3dadd( 7.06355, 73.794, -1.61203, 0.45 ) }
    dend_26 { pt3dadd( 7.21516, 75.5446, -2.07305, 0.45 ) }
    dend_26 { pt3dadd( 7.42637, 77.8123, -2.64724, 0.45 ) }
    dend_26 { pt3dadd( 7.68853, 80.3156, -3.25382, 0.23 ) }
    dend_26 { pt3dadd( 7.91165, 82.2883, -3.72928, 0.23 ) }
    dend_26 { pt3dadd( 8.14621, 83.9691, -4.15214, 0.23 ) }
    dend_26 { pt3dadd( 8.30228, 85.0403, -4.43496, 0.23 ) }
    dend_26 { pt3dadd( 8.69913, 87.6557, -5.14212, 0.23 ) }
    dend_26 { pt3dadd( 8.9905, 89.9475, -5.7801, 0.23 ) }
    dend_26 { pt3dadd( 9.20457, 92.279, -6.39983, 0.23 ) }
    dend_26 { pt3dadd( 9.28345, 94.4216, -6.94142, 0.23 ) }
    dend_26 { pt3dadd( 9.22735, 95.9604, -7.31523, 0.23 ) }
    dend_26 { pt3dadd( 9.12813, 97.3505, -7.63968, 0.23 ) }
    dend_26 { pt3dadd( 9.02004, 98.3968, -7.85793, 0.23 ) }
    dend_26 { pt3dadd( 8.76469, 100.096, -8.14467, 0.23 ) }
    dend_26 { pt3dadd( 8.5675, 101.113, -8.27205, 0.23 ) }
    dend_26 { pt3dadd( 7.8655, 103.824, -8.53626, 0.23 ) }
    dend_26 { pt3dadd( 7.26481, 105.75, -8.71488, 0.23 ) }
    dend_26 { pt3dadd( 6.54723, 107.528, -8.86701, 0.23 ) }
    dend_26 { pt3dadd( 5.46992, 109.695, -9.0329, 0.23 ) }
    dend_26 { pt3dadd( 4.38799, 111.503, -9.15097, 0.23 ) }
    dend_26 { pt3dadd( 2.42176, 114.302, -9.29171, 0.23 ) }
    dend_26 { pt3dadd( 1.40797, 115.528, -9.33107, 0.23 ) }
    dend_26 { pt3dadd( -0.595413, 117.673, -9.38239, 0.23 ) }
    dend_26 { pt3dadd( -2.1706, 119.324, -9.40742, 0.23 ) }
    dend_26 { pt3dadd( -3.38732, 120.623, -9.43222, 0.45 ) }
    dend_26 { pt3dadd( -5.45524, 122.918, -9.54073, 0.23 ) }
    dend_26 { pt3dadd( -6.38453, 123.992, -9.62741, 0.23 ) }
    dend_26 { pt3dadd( -7.79668, 125.722, -9.82971, 0.23 ) }
    dend_26 { pt3dadd( -9.91793, 128.491, -10.3078, 0.23 ) }
    dend_26 { pt3dadd( -10.984, 129.891, -10.5916, 0.23 ) }
    dend_26 { pt3dadd( -12.0677, 131.186, -10.8854, 0.23 ) }
    dend_26 { pt3dadd( -13.6414, 132.848, -11.2845, 0.23 ) }
    dend_26 { pt3dadd( -14.7872, 133.945, -11.5812, 0.23 ) }
    dend_26 { pt3dadd( -15.9175, 134.898, -11.8629, 0.23 ) }
    dend_26 { pt3dadd( -18.527, 136.734, -12.4674, 0.23 ) }
    dend_26 { pt3dadd( -20.8592, 138.22, -12.9684, 0.23 ) }
    dend_26 { pt3dadd( -22.2906, 139.082, -13.271, 0.23 ) }
    dend_26 { pt3dadd( -23.5222, 139.809, -13.5745, 0.23 ) }
    dend_26 { pt3dadd( -25.1478, 140.835, -14.0766, 0.23 ) }
    dend_26 { pt3dadd( -25.7495, 141.266, -14.3424, 0.23 ) }
    dend_26 { pt3dadd( -26.1608, 141.646, -14.606, 0.23 ) }
    dend_26 { pt3dadd( -26.7977, 142.488, -15.1156, 0.23 ) }
    dend_26 { pt3dadd( -27.6545, 143.926, -15.8181, 0.23 ) }
    dend_26 { pt3dadd( -28.5063, 145.706, -16.5163, 0.23 ) }
    dend_26 { pt3dadd( -29.2056, 147.533, -17.1091, 0.23 ) }
    dend_26 { pt3dadd( -30.0523, 150.049, -17.8054, 0.23 ) }
    dend_26 { pt3dadd( -30.8418, 152.473, -18.3693, 0.23 ) }
    dend_26 { pt3dadd( -31.6844, 155.124, -18.925, 0.23 ) }
    dend_26 { pt3dadd( -32.3838, 157.491, -19.34, 0.23 ) }
    dend_26 { pt3dadd( -33.1123, 160.386, -19.7673, 0.23 ) }
    dend_26 { pt3dadd( -33.4452, 162.031, -19.9574, 0.23 ) }
    dend_26 { pt3dadd( -33.782, 164.54, -20.2395, 0.23 ) }
    dend_26 { pt3dadd( -37.809, 173.218, -19.6663, 0.23 ) }
    // Section: dend_24, id: dend_24, parent: dend_20 (entry count 97/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 30.8978, -3.53238, -4.99428, 0.45 ) }
    dend_24 { pt3dadd( 31.3028, -4.33904, -6.31226, 0.45 ) }
    dend_24 { pt3dadd( 31.8353, -5.25164, -7.65713, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_9()
}

proc basic_shape_9() {
    dend_24 { pt3dadd( 32.4649, -6.01755, -8.82976, 0.45 ) }
    dend_24 { pt3dadd( 33.0386, -6.58401, -9.73171, 0.45 ) }
    dend_24 { pt3dadd( 33.3231, -6.81948, -10.1349, 0.45 ) }
    dend_24 { pt3dadd( 33.8365, -7.24638, -10.8902, 0.45 ) }
    dend_24 { pt3dadd( 34.6146, -7.79302, -11.976, 0.45 ) }
    dend_24 { pt3dadd( 35.6827, -8.43691, -13.5304, 0.45 ) }
    dend_24 { pt3dadd( 36.4383, -8.81611, -14.791, 0.45 ) }
    dend_24 { pt3dadd( 37.2638, -9.14243, -16.2916, 0.45 ) }
    dend_24 { pt3dadd( 38.0011, -9.39952, -17.6929, 0.45 ) }
    dend_24 { pt3dadd( 38.9642, -9.71216, -19.5112, 0.45 ) }
    dend_24 { pt3dadd( 40.0353, -10.0696, -21.5137, 0.45 ) }
    dend_24 { pt3dadd( 41.837, -10.7129, -24.7344, 0.23 ) }
    dend_24 { pt3dadd( 42.8493, -11.0771, -26.367, 0.23 ) }
    dend_24 { pt3dadd( 44.4047, -11.6144, -28.5516, 0.23 ) }
    dend_24 { pt3dadd( 46.1155, -12.1436, -30.5733, 0.23 ) }
    dend_24 { pt3dadd( 46.6172, -12.3021, -31.0827, 0.23 ) }
    dend_24 { pt3dadd( 48.2173, -12.8201, -32.5718, 0.23 ) }
    dend_24 { pt3dadd( 50.3061, -13.5542, -34.4406, 0.23 ) }
    dend_24 { pt3dadd( 52.6835, -14.3844, -36.5399, 0.23 ) }
    dend_24 { pt3dadd( 53.9363, -14.7979, -37.6503, 0.23 ) }
    dend_24 { pt3dadd( 56.2506, -15.5108, -39.7397, 0.23 ) }
    dend_24 { pt3dadd( 58.2616, -16.1109, -41.6094, 0.23 ) }
    dend_24 { pt3dadd( 60.2442, -16.7236, -43.5153, 0.23 ) }
    dend_24 { pt3dadd( 64.8548, -20.8005, -51.2822, 0.23 ) }
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 24/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 30.8978, -3.53238, -4.99428, 0.45 ) }
    dend_21 { pt3dadd( 32.9854, -4.65663, -5.07979, 0.45 ) }
    dend_21 { pt3dadd( 33.9209, -5.1995, -5.11039, 0.45 ) }
    dend_21 { pt3dadd( 35.6937, -6.22577, -5.16293, 0.68 ) }
    dend_21 { pt3dadd( 37.514, -7.27115, -5.22071, 0.45 ) }
    dend_21 { pt3dadd( 39.3425, -8.33966, -5.33529, 0.45 ) }
    dend_21 { pt3dadd( 40.9209, -9.23439, -5.47043, 0.45 ) }
    dend_21 { pt3dadd( 42.5915, -10.1794, -5.66664, 0.45 ) }
    dend_21 { pt3dadd( 44.2352, -11.0892, -5.85703, 0.45 ) }
    dend_21 { pt3dadd( 45.3301, -11.6962, -5.97671, 0.45 ) }
    dend_21 { pt3dadd( 46.9779, -12.6377, -6.19634, 0.45 ) }
    dend_21 { pt3dadd( 49.6268, -14.089, -6.62327, 0.45 ) }
    // Section: dend_29, id: dend_29, parent: dend_27 (entry count 36/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 18.0946, 16.8103, -3.94889, 0.45 ) }
    dend_29 { pt3dadd( 18.3063, 18.1361, -4.09976, 0.45 ) }
    dend_29 { pt3dadd( 18.7439, 20.6505, -4.26712, 0.45 ) }
    dend_29 { pt3dadd( 19.1595, 22.567, -4.28752, 0.45 ) }
    dend_29 { pt3dadd( 19.6626, 24.7411, -4.24004, 0.45 ) }
    dend_29 { pt3dadd( 20.2216, 26.8818, -4.15806, 0.45 ) }
    dend_29 { pt3dadd( 20.6681, 28.5172, -4.07139, 0.45 ) }
    dend_29 { pt3dadd( 21.3291, 30.7031, -3.86418, 0.45 ) }
    dend_29 { pt3dadd( 22.0374, 33.0364, -3.56641, 0.45 ) }
    dend_29 { pt3dadd( 22.6135, 35.1444, -3.25514, 0.45 ) }
    dend_29 { pt3dadd( 23.0988, 37.3772, -2.85831, 0.45 ) }
    dend_29 { pt3dadd( 23.4791, 40.0844, -2.25695, 0.45 ) }
    dend_29 { pt3dadd( 23.5718, 41.5133, -1.87554, 0.45 ) }
    dend_29 { pt3dadd( 23.5097, 43.6791, -1.17294, 0.45 ) }
    dend_29 { pt3dadd( 23.2386, 45.4497, -0.461866, 0.45 ) }
    dend_29 { pt3dadd( 22.8419, 46.8741, 0.272121, 0.45 ) }
    dend_29 { pt3dadd( 22.2803, 48.2903, 1.16078, 0.45 ) }
    dend_29 { pt3dadd( 21.7503, 49.4141, 1.99212, 0.45 ) }
    dend_29 { pt3dadd( 21.139, 50.6058, 3.00539, 0.45 ) }
    dend_29 { pt3dadd( 20.5073, 51.7838, 4.16517, 0.45 ) }
    dend_29 { pt3dadd( 20.0777, 52.5888, 4.991, 0.45 ) }
    dend_29 { pt3dadd( 19.5698, 53.4284, 5.86956, 0.45 ) }
    dend_29 { pt3dadd( 19.1395, 54.1238, 6.56306, 0.45 ) }
    dend_29 { pt3dadd( 18.6081, 54.9878, 7.38441, 0.45 ) }
    dend_29 { pt3dadd( 17.9553, 56.069, 8.38172, 0.45 ) }
    dend_29 { pt3dadd( 17.2542, 57.2248, 9.4336, 0.45 ) }
    dend_29 { pt3dadd( 16.6652, 58.1493, 10.2284, 0.45 ) }
    dend_29 { pt3dadd( 15.9991, 59.1721, 11.0858, 0.45 ) }
    dend_29 { pt3dadd( 15.3112, 60.2957, 12.0032, 0.45 ) }
    dend_29 { pt3dadd( 14.7166, 61.3664, 12.8461, 0.45 ) }
    dend_29 { pt3dadd( 14.1858, 62.4425, 13.708, 0.45 ) }
    dend_29 { pt3dadd( 13.7743, 63.3275, 14.482, 0.45 ) }
    dend_29 { pt3dadd( 13.0517, 64.8705, 15.8921, 0.23 ) }
    dend_29 { pt3dadd( 12.511, 65.9671, 16.937, 0.23 ) }
    dend_29 { pt3dadd( 11.7567, 67.5074, 18.3782, 0.23 ) }
    dend_29 { pt3dadd( 11.1512, 68.8217, 19.5545, 0.23 ) }
    dend_29 { pt3dadd( 10.4751, 70.3172, 20.8684, 0.23 ) }
    dend_29 { pt3dadd( 10.086, 71.1626, 21.5995, 0.23 ) }
    dend_29 { pt3dadd( 9.63424, 72.0719, 22.3246, 0.23 ) }
    dend_29 { pt3dadd( 9.09424, 73.1556, 23.1123, 0.23 ) }
    dend_29 { pt3dadd( 8.60236, 74.2185, 23.7955, 0.23 ) }
    dend_29 { pt3dadd( 8.2128, 75.2047, 24.3387, 0.23 ) }
    dend_29 { pt3dadd( 7.9259, 76.1254, 24.7757, 0.23 ) }
    dend_29 { pt3dadd( 7.63248, 77.3751, 25.3901, 0.23 ) }
    dend_29 { pt3dadd( 7.50495, 78.2435, 25.8495, 0.23 ) }
    dend_29 { pt3dadd( 7.41822, 79.8272, 26.695, 0.23 ) }
    dend_29 { pt3dadd( 7.49029, 81.1748, 27.4146, 0.23 ) }
    dend_29 { pt3dadd( 7.69477, 82.4645, 28.1249, 0.23 ) }
    dend_29 { pt3dadd( 8.1645, 84.4204, 29.2893, 0.23 ) }
    dend_29 { pt3dadd( 8.6859, 86.2703, 30.4341, 0.23 ) }
    dend_29 { pt3dadd( 9.15352, 87.7085, 31.3449, 0.23 ) }
    dend_29 { pt3dadd( 9.6766, 89.0845, 32.2548, 0.23 ) }
    dend_29 { pt3dadd( 10.2682, 90.4744, 33.2111, 0.23 ) }
    dend_29 { pt3dadd( 10.9765, 91.8518, 34.1793, 0.23 ) }
    // Section: dend_28, id: dend_28, parent: dend_27 (entry count 90/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 18.0946, 16.8103, -3.94889, 0.45 ) }
    dend_28 { pt3dadd( 19.4576, 16.3923, -3.43476, 0.45 ) }
    dend_28 { pt3dadd( 21.6069, 15.6767, -2.65106, 0.45 ) }
    dend_28 { pt3dadd( 23.3475, 15.1121, -2.00587, 0.45 ) }
    dend_28 { pt3dadd( 25.1856, 14.5603, -1.33062, 0.45 ) }
    dend_28 { pt3dadd( 26.8778, 14.1358, -0.755494, 0.45 ) }
    dend_28 { pt3dadd( 28.1411, 13.8471, -0.352036, 0.45 ) }
    dend_28 { pt3dadd( 30.046, 13.4548, 0.178963, 0.45 ) }
    dend_28 { pt3dadd( 31.7806, 13.1435, 0.610612, 0.45 ) }
    dend_28 { pt3dadd( 33.5996, 12.8692, 0.998509, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_10()
}

proc basic_shape_10() {
    dend_28 { pt3dadd( 36.0921, 12.5064, 1.46419, 0.45 ) }
    dend_28 { pt3dadd( 37.5545, 12.2866, 1.70487, 0.45 ) }
    dend_28 { pt3dadd( 38.6921, 12.093, 1.86424, 0.45 ) }
    dend_28 { pt3dadd( 39.355, 11.9757, 1.95221, 0.45 ) }
    dend_28 { pt3dadd( 41.0052, 11.6393, 2.16742, 0.45 ) }
    dend_28 { pt3dadd( 43.1354, 11.1545, 2.48766, 0.45 ) }
    dend_28 { pt3dadd( 45.6116, 10.5319, 2.91521, 0.45 ) }
    dend_28 { pt3dadd( 48.6862, 9.74696, 3.47111, 0.45 ) }
    dend_28 { pt3dadd( 50.6721, 9.20168, 3.84237, 0.45 ) }
    dend_28 { pt3dadd( 52.8984, 8.55046, 4.28114, 0.45 ) }
    dend_28 { pt3dadd( 54.7974, 7.96187, 4.68842, 0.45 ) }
    dend_28 { pt3dadd( 55.6355, 7.69407, 4.88265, 0.45 ) }
    dend_28 { pt3dadd( 57.1884, 7.15455, 5.24435, 0.45 ) }
    dend_28 { pt3dadd( 58.8205, 6.5729, 5.65763, 0.45 ) }
    dend_28 { pt3dadd( 60.5632, 5.95503, 6.12837, 0.45 ) }
    dend_28 { pt3dadd( 61.8563, 5.52136, 6.48666, 0.45 ) }
    dend_28 { pt3dadd( 63.5895, 4.98119, 6.97139, 0.45 ) }
    dend_28 { pt3dadd( 65.9571, 4.32302, 7.65568, 0.23 ) }
    dend_28 { pt3dadd( 67.7526, 3.89299, 8.17045, 0.23 ) }
    dend_28 { pt3dadd( 69.9736, 3.37232, 8.79352, 0.23 ) }
    dend_28 { pt3dadd( 71.0755, 3.11262, 9.09202, 0.23 ) }
    dend_28 { pt3dadd( 72.9676, 2.65855, 9.51204, 0.23 ) }
    dend_28 { pt3dadd( 74.5659, 2.26382, 9.77985, 0.23 ) }
    dend_28 { pt3dadd( 76.5316, 1.77815, 9.96906, 0.23 ) }
    dend_28 { pt3dadd( 78.5904, 1.28553, 9.94649, 0.23 ) }
    dend_28 { pt3dadd( 80.0011, 0.948883, 9.78666, 0.23 ) }
    dend_28 { pt3dadd( 82.4336, 0.406943, 9.33853, 0.45 ) }
    dend_28 { pt3dadd( 84.2005, 0.0520391, 8.88285, 0.45 ) }
    dend_28 { pt3dadd( 85.7409, -0.238311, 8.42467, 0.45 ) }
    dend_28 { pt3dadd( 88.3653, -0.75819, 7.59689, 0.23 ) }
    dend_28 { pt3dadd( 89.9309, -1.05021, 7.10207, 0.23 ) }
    dend_28 { pt3dadd( 91.6336, -1.38727, 6.60068, 0.23 ) }
    dend_28 { pt3dadd( 93.2374, -1.71649, 6.22917, 0.23 ) }
    dend_28 { pt3dadd( 95.2724, -2.169, 5.86801, 0.23 ) }
    dend_28 { pt3dadd( 97.8796, -2.79259, 5.56449, 0.23 ) }
    dend_28 { pt3dadd( 98.9669, -3.08562, 5.48761, 0.23 ) }
    dend_28 { pt3dadd( 100.272, -3.47477, 5.40205, 0.23 ) }
    dend_28 { pt3dadd( 102.699, -4.24632, 5.21446, 0.23 ) }
    dend_28 { pt3dadd( 105.298, -5.06813, 4.99647, 0.23 ) }
    dend_28 { pt3dadd( 108.209, -5.96691, 4.70532, 0.23 ) }
    dend_28 { pt3dadd( 111.03, -6.79156, 4.32501, 0.23 ) }
    dend_28 { pt3dadd( 114.016, -7.67921, 3.7477, 0.23 ) }
    dend_28 { pt3dadd( 115.116, -8.01291, 3.51165, 0.23 ) }
    dend_28 { pt3dadd( 117.016, -8.58824, 3.04462, 0.23 ) }
    dend_28 { pt3dadd( 119.299, -9.26045, 2.39798, 0.23 ) }
    dend_28 { pt3dadd( 122.626, -10.1906, 1.31872, 0.23 ) }
    dend_28 { pt3dadd( 126.2, -11.0774, 0.0388651, 0.23 ) }
    dend_28 { pt3dadd( 135.136, -15.079, -1.50745, 0.23 ) }
    dend_28 { pt3dadd( 144.666, -17.9515, -1.7388, 0.23 ) }
    // Section: dend_23, id: dend_23, parent: dend_21 (entry count 49/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( 49.6268, -14.089, -6.62327, 0.45 ) }
    dend_23 { pt3dadd( 51.8646, -13.5957, -6.70291, 0.45 ) }
    dend_23 { pt3dadd( 53.9187, -13.1266, -6.85785, 0.45 ) }
    dend_23 { pt3dadd( 57.4611, -12.2815, -7.18841, 0.23 ) }
    dend_23 { pt3dadd( 58.6744, -12.0103, -7.30783, 0.23 ) }
    dend_23 { pt3dadd( 60.2414, -11.6623, -7.45831, 0.23 ) }
    dend_23 { pt3dadd( 62.1009, -11.2954, -7.63209, 0.23 ) }
    dend_23 { pt3dadd( 63.7244, -11.0025, -7.7824, 0.23 ) }
    dend_23 { pt3dadd( 65.3831, -10.7294, -7.92259, 0.23 ) }
    dend_23 { pt3dadd( 67.4204, -10.4164, -8.06973, 0.23 ) }
    dend_23 { pt3dadd( 69.8122, -10.0418, -8.19788, 0.23 ) }
    dend_23 { pt3dadd( 73.4197, -9.44676, -8.32997, 0.23 ) }
    dend_23 { pt3dadd( 76.1668, -8.99078, -8.36161, 0.23 ) }
    dend_23 { pt3dadd( 78.9095, -8.55653, -8.30593, 0.23 ) }
    dend_23 { pt3dadd( 80.7257, -8.26529, -8.24036, 0.23 ) }
    dend_23 { pt3dadd( 83.7718, -7.73292, -8.05601, 0.23 ) }
    dend_23 { pt3dadd( 85.3571, -7.46214, -7.92204, 0.23 ) }
    dend_23 { pt3dadd( 87.1911, -7.15743, -7.72269, 0.23 ) }
    dend_23 { pt3dadd( 90.1341, -6.79618, -7.36943, 0.23 ) }
    dend_23 { pt3dadd( 91.2259, -6.6892, -7.23749, 0.23 ) }
    dend_23 { pt3dadd( 92.6215, -6.58545, -7.07969, 0.23 ) }
    dend_23 { pt3dadd( 95.5542, -6.51737, -6.76916, 0.23 ) }
    dend_23 { pt3dadd( 96.8222, -6.52214, -6.63827, 0.23 ) }
    dend_23 { pt3dadd( 99.2668, -6.55465, -6.41636, 0.23 ) }
    dend_23 { pt3dadd( 101.803, -6.62879, -6.21536, 0.23 ) }
    dend_23 { pt3dadd( 103.166, -6.71067, -6.11466, 0.23 ) }
    dend_23 { pt3dadd( 105.54, -6.86808, -5.92899, 0.23 ) }
    dend_23 { pt3dadd( 106.738, -6.94904, -5.81371, 0.23 ) }
    dend_23 { pt3dadd( 108.631, -7.07651, -5.61821, 0.23 ) }
    dend_23 { pt3dadd( 110.45, -7.18729, -5.43087, 0.23 ) }
    dend_23 { pt3dadd( 111.952, -7.25155, -5.33597, 0.23 ) }
    dend_23 { pt3dadd( 114.132, -7.25799, -5.27054, 0.23 ) }
    dend_23 { pt3dadd( 117.159, -7.20463, -5.27528, 0.23 ) }
    dend_23 { pt3dadd( 118.775, -7.17517, -5.30929, 0.23 ) }
    dend_23 { pt3dadd( 121.339, -7.11332, -5.39496, 0.23 ) }
    dend_23 { pt3dadd( 124.912, -6.98646, -5.55915, 0.23 ) }
    dend_23 { pt3dadd( 126.298, -6.92328, -5.64809, 0.23 ) }
    dend_23 { pt3dadd( 129.369, -6.78635, -5.91367, 0.23 ) }
    dend_23 { pt3dadd( 132.079, -6.61829, -6.18697, 0.23 ) }
    dend_23 { pt3dadd( 134.842, -6.45826, -6.45888, 0.23 ) }
    dend_23 { pt3dadd( 144.4, -4.16909, -8.13898, 0.23 ) }
    // Section: dend_22, id: dend_22, parent: dend_21 (entry count 90/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( 49.6268, -14.089, -6.62327, 0.45 ) }
    dend_22 { pt3dadd( 51.096, -15.273, -6.55469, 0.45 ) }
    dend_22 { pt3dadd( 52.6358, -16.4284, -6.53079, 0.45 ) }
    dend_22 { pt3dadd( 54.7458, -17.9818, -6.53151, 0.45 ) }
    dend_22 { pt3dadd( 57.7836, -20.1844, -6.66382, 0.45 ) }
    dend_22 { pt3dadd( 59.7852, -21.7098, -6.8261, 0.23 ) }
    dend_22 { pt3dadd( 61.4712, -23.0317, -6.99703, 0.23 ) }
    dend_22 { pt3dadd( 62.7958, -24.0769, -7.15682, 0.45 ) }
    dend_22 { pt3dadd( 63.8874, -25.0005, -7.27399, 0.45 ) }
    dend_22 { pt3dadd( 65.1176, -26.0975, -7.36211, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_11()
}

proc basic_shape_11() {
    dend_22 { pt3dadd( 67.3789, -28.2401, -7.40614, 0.45 ) }
    dend_22 { pt3dadd( 69.3853, -30.1704, -7.36036, 0.45 ) }
    dend_22 { pt3dadd( 71.2746, -31.9505, -7.28068, 0.45 ) }
    dend_22 { pt3dadd( 72.4524, -33.0869, -7.20656, 0.45 ) }
    dend_22 { pt3dadd( 75.4461, -36.0, -6.95853, 0.45 ) }
    dend_22 { pt3dadd( 78.1838, -38.709, -6.65971, 0.45 ) }
    dend_22 { pt3dadd( 80.1411, -40.6909, -6.41595, 0.45 ) }
    dend_22 { pt3dadd( 81.4377, -42.0984, -6.23923, 0.45 ) }
    dend_22 { pt3dadd( 83.2115, -44.1589, -5.9991, 0.23 ) }
    dend_22 { pt3dadd( 85.3327, -46.866, -5.69539, 0.23 ) }
    dend_22 { pt3dadd( 86.0108, -47.8701, -5.57391, 0.23 ) }
    dend_22 { pt3dadd( 86.9472, -49.4827, -5.36007, 0.23 ) }
    dend_22 { pt3dadd( 87.9266, -51.4147, -5.06639, 0.23 ) }
    dend_22 { pt3dadd( 88.4918, -52.7211, -4.84808, 0.23 ) }
    dend_22 { pt3dadd( 89.0008, -54.0562, -4.64275, 0.23 ) }
    dend_22 { pt3dadd( 89.4294, -55.3415, -4.48523, 0.23 ) }
    dend_22 { pt3dadd( 89.9618, -56.9693, -4.32892, 0.23 ) }
    dend_22 { pt3dadd( 90.4498, -58.5339, -4.22206, 0.23 ) }
    dend_22 { pt3dadd( 90.7351, -59.5367, -4.14265, 0.23 ) }
    dend_22 { pt3dadd( 91.0227, -60.6741, -4.00856, 0.23 ) }
    dend_22 { pt3dadd( 91.3561, -62.24, -3.74447, 0.23 ) }
    dend_22 { pt3dadd( 91.6398, -63.7097, -3.47476, 0.23 ) }
    dend_22 { pt3dadd( 91.9633, -65.3154, -3.14985, 0.23 ) }
    dend_22 { pt3dadd( 92.1886, -66.3357, -2.91816, 0.23 ) }
    dend_22 { pt3dadd( 92.7512, -68.7604, -2.3134, 0.23 ) }
    dend_22 { pt3dadd( 93.2746, -71.5058, -1.54801, 0.23 ) }
    dend_22 { pt3dadd( 99.5095, -78.9085, -0.911115, 0.23 ) }
    dend_22 { pt3dadd( 105.732, -86.3024, -0.0710087, 0.23 ) }
    dend_22 { pt3dadd( 112.546, -93.2552, 0.0410892, 0.23 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_34, dend_31, dend_30, dend_17, dend_14, dend_11, dend_8, dend_1, dend_0, dend_36, dend_35, dend_33, dend_32, dend_19, dend_18, dend_16, dend_15, dend_13, dend_12, dend_10, dend_9, dend_5, dend_2, dend_25, dend_20, dend_7, dend_6, dend_4, dend_3, dend_27, dend_26, dend_24, dend_21, dend_29, dend_28, dend_23, dend_22]}
    ModelViewParmSubset_2 = new SectionList()
    dend_34 ModelViewParmSubset_2.append()
    dend_31 ModelViewParmSubset_2.append()
    dend_30 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_36 ModelViewParmSubset_2.append()
    dend_35 ModelViewParmSubset_2.append()
    dend_33 ModelViewParmSubset_2.append()
    dend_32 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_34, dend_31, dend_30, dend_17, dend_14, dend_11, dend_8, dend_1, dend_0, dend_36, dend_35, dend_33, dend_32, dend_19, dend_18, dend_16, dend_15, dend_13, dend_12, dend_10, dend_9, dend_5, dend_2, dend_25, dend_20, dend_7, dend_6, dend_4, dend_3, dend_27, dend_26, dend_24, dend_21, dend_29, dend_28, dend_23, dend_22]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_34 ModelViewParmSubset_4.append()
    dend_31 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_36 ModelViewParmSubset_4.append()
    dend_35 ModelViewParmSubset_4.append()
    dend_33 ModelViewParmSubset_4.append()
    dend_32 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_30 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_0 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_36]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_36 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_35]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_35 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_33]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_33 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_32]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_32 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_18 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_16 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_13 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_12 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_9 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_2 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_7 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_6 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_26 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_35 = new SectionList()
    dend_24 OneSecGrp_SectionRef_35.append()

    // Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_37 = new SectionList()
    dend_29 OneSecGrp_SectionRef_37.append()

    // Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_38 = new SectionList()
    dend_28 OneSecGrp_SectionRef_38.append()

    // Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_39 = new SectionList()
    dend_23 OneSecGrp_SectionRef_39.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_40 = new SectionList()
    dend_22 OneSecGrp_SectionRef_40.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_8 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_17 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_19 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_34]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_34 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_25 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_11 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_31]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_31 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_1 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_27 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_20 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_14 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_10 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_36 = new SectionList()
    dend_21 OneSecGrp_SectionRef_36.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_5 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_15 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_4 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_3 OneSecGrp_SectionRef_32.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()
    dend_31 basal.append()
    dend_32 basal.append()
    dend_33 basal.append()
    dend_34 basal.append()
    dend_35 basal.append()
    dend_36 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_17, dend_17, dend_17, dend_17, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, axon_1, axon_1, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_27, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_10()
}

proc subsets_10() {
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_11()
}

proc subsets_11() {
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_12()
}

proc subsets_12() {
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 5.67935E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 5.67935E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 3.6794998E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cSTUT_7_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cSTUT_7_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cSTUT_7_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cSTUT_7_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_30 nseg = 3
    dend_0 nseg = 3
    dend_36 nseg = 9
    dend_35 nseg = 3
    dend_33 nseg = 3
    dend_32 nseg = 3
    dend_18 nseg = 3
    dend_16 nseg = 3
    dend_13 nseg = 3
    dend_12 nseg = 7
    dend_9 nseg = 3
    dend_2 nseg = 13
    dend_7 nseg = 5
    dend_6 nseg = 5
    dend_26 nseg = 9
    dend_24 nseg = 3
    dend_29 nseg = 5
    dend_28 nseg = 7
    dend_23 nseg = 5
    dend_22 nseg = 5
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cSTUT189_L6_NBC_23c8220f56_0_0


