// Cell: bNAC219_L6_LBC_0491f28d21_0_0
/*
{
  "id" : "bNAC219_L6_LBC_0491f28d21_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-1.58794, -11.7196, 0.0, 2.80064", "-1.43666, -10.6109, 0.0, 4.56392", "-1.28539, -9.50222, 0.0, 6.24281", "-1.13412, -8.39354, 0.0, 7.62114", "-0.982843, -7.28486, 0.0, 8.91633", "-0.83157, -6.17618, 0.0, 10.2819", "-0.680297, -5.06751, 0.0, 11.6257", "-0.529024, -3.95883, 0.0, 12.7797", "-0.377751, -2.85015, 0.0, 13.5779", "-0.226478, -1.74148, 0.0, 14.0593", "-0.0752052, -0.632799, 0.0, 14.5256", "0.0760678, 0.475878, 0.0, 15.0335", "0.227341, 1.58456, 0.0, 15.6506", "0.378614, 2.69323, 0.0, 15.9776", "0.529887, 3.80191, 0.0, 15.9263", "0.68116, 4.91059, 0.0, 15.679", "0.832433, 6.01926, 0.0, 14.959", "0.983706, 7.12794, 0.0, 13.4415", "1.13498, 8.23662, 0.0, 11.0445", "1.28625, 9.3453, 0.0, 9.12656", "1.43752, 10.454, 0.0, 6.46763" ]
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "2.61877, -1.35452, -16.47, 0.91", "2.74927, -1.63523, -16.7088, 0.91", "3.2229, -3.84985, -18.5933, 0.91", "3.24766, -5.15217, -19.8273, 0.91", "3.17401, -5.81874, -20.6345, 0.91", "3.01859, -6.50752, -21.9872, 0.91", "2.89408, -6.65664, -23.2935, 0.91", "2.84037, -6.02619, -24.8859, 0.91", "3.01677, -4.97094, -26.1519, 0.91", "3.48419, -3.55079, -27.5051, 0.91", "4.37929, -1.66269, -29.2614, 0.91", "5.28596, -0.151614, -30.757, 0.91", "6.34717, 1.41936, -32.4232, 0.91", "7.46448, 2.93124, -34.1809, 0.91", "8.49898, 4.30844, -36.025, 0.91", "9.42675, 5.67702, -38.1366, 0.91", "10.0202, 6.64198, -39.822, 0.91", "10.4847, 7.47414, -41.3718, 0.91", "11.0243, 8.46278, -43.4885, 0.91", "11.6778, 9.5317, -46.1035, 1.36", "12.3352, 10.3203, -48.1911, 1.36", "13.2147, 11.0104, -50.3065, 0.91", "14.2574, 11.4759, -52.2645, 1.14", "15.4579, 11.6713, -54.1938, 0.68", "16.855, 11.5937, -56.2867, 0.68", "18.2566, 11.2922, -58.3347, 2.27", "19.8786, 10.7505, -60.7067, 0.45", "21.6345, 10.046, -63.3555, 1.59", "22.9813, 9.48526, -65.4053, 0.45", "24.3048, 8.9783, -67.369, 0.45", "24.8768, 8.76012, -68.1895, 2.5", "26.5825, 8.15172, -70.5701, 0.23", "28.6438, 7.53584, -73.1545, 0.23", "30.5516, 7.05013, -75.2989, 0.23", "32.1428, 6.70263, -76.9138, 2.27", "34.6132, 6.19875, -79.2368, 0.23", "36.9673, 5.73497, -81.3214, 0.23", "38.3616, 5.4711, -82.4752, 0.91", "40.422, 5.0551, -84.0583, 0.23", "42.2506, 4.70387, -85.3523, 0.91", "44.1093, 4.37985, -86.6283, 0.23", "45.7087, 4.13918, -87.7318, 0.23", "46.4955, 4.04062, -88.3235, 0.91", "48.3896, 3.91924, -89.9912, 0.23", "49.6077, 3.92618, -91.1498, 1.82", "51.354, 4.04471, -92.9618, 0.45", "53.0467, 4.2177, -94.7534, 0.68", "54.8513, 4.37753, -96.6932, 0.23", "56.8565, 4.4977, -98.8307, 1.59", "59.7964, 4.58358, -101.908, 0.23", "61.024, 4.53966, -103.19, 0.23", "62.189, 4.41338, -104.342, 0.91", "63.6366, 4.16857, -105.755, 0.23", "64.5698, 3.95141, -106.649, 0.91", "66.2991, 3.52065, -108.316, 0.23", "68.2524, 3.05528, -110.259, 0.91", "71.1004, 2.4902, -113.168, 0.45", "73.2728, 2.18433, -115.496, 0.45", "75.5606, 2.0362, -118.014, 0.45", "77.0988, 2.02773, -119.753, 0.68", "78.6947, 2.10308, -121.553, 0.23", "80.6289, 2.27811, -123.676, 1.14", "82.5689, 2.53819, -125.719, 0.45", "84.9372, 2.94465, -128.042, 0.45", "87.1536, 3.35058, -130.081, 0.91", "89.2018, 3.62811, -131.83, 0.45", "90.1523, 3.69499, -132.589, 1.59", "91.4898, 3.68506, -133.591, 1.36", "92.8279, 3.56292, -134.53, 0.68", "94.8309, 3.33125, -135.942, 0.68", "96.7721, 3.11791, -137.399, 1.36", "98.9427, 2.93537, -139.161, 1.36", "100.865, 2.87523, -140.899, 0.68", "102.903, 3.01222, -142.979, 0.68", "104.463, 3.3759, -144.745, 0.45", "105.453, 3.84078, -145.967, 0.45", "105.967, 4.22291, -146.644, 0.91", "107.128, 5.54337, -148.424, 0.45", "107.965, 6.9083, -150.036, 0.45", "108.744, 8.62718, -151.87, 0.45", "109.179, 9.70617, -152.939, 0.45", "109.529, 10.6263, -153.792, 0.91", "110.232, 12.5758, -155.498, 0.45", "110.849, 14.3483, -156.948, 0.91", "111.615, 16.289, -158.554, 0.45", "112.524, 18.3554, -160.356, 0.45", "113.449, 20.0743, -162.011, 0.91", "114.518, 21.658, -163.721, 0.45", "114.924, 22.1479, -164.31, 0.91", "116.392, 23.6824, -166.386, 0.45", "117.757, 24.869, -168.37, 0.45", "119.162, 25.9747, -170.59, 0.45", "120.029, 26.6442, -172.099, 0.91", "121.08, 27.4254, -173.998, 0.23", "122.187, 28.2346, -176.039, 0.68", "123.58, 29.2168, -178.782, 0.45", "124.815, 30.018, -181.286, 0.45", "125.767, 30.6259, -183.279, 0.91", "126.901, 31.2266, -185.703, 0.45", "128.21, 31.8555, -188.495, 0.45", "129.962, 32.6054, -192.157, 0.45", "131.548, 33.2169, -195.373, 0.45", "133.306, 33.7354, -198.75, 0.45", "135.133, 34.1558, -202.223, 0.45" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "3.75878, 8.90398, 6.75, 0.68", "4.82414, 10.0029, 7.16563, 0.68", "5.93486, 11.2536, 7.76026, 0.68", "7.34002, 12.9321, 8.69618, 0.91", "8.65522, 14.5243, 9.74704, 0.91", "9.81956, 15.908, 10.8946, 0.68", "10.7713, 16.9579, 12.0431, 0.68", "11.2254, 17.4454, 13.0359, 0.68", "11.4159, 17.6544, 13.9299, 0.68", "11.547, 17.8105, 15.2988, 0.68", "11.6524, 18.0731, 17.4424, 0.68", "11.7204, 18.3116, 18.5195, 0.68", "11.9472, 19.04, 20.6451, 0.68", "12.1103, 19.6662, 21.9697, 0.68", "12.3275, 20.5086, 23.4682, 0.68", "12.5589, 21.5257, 24.9799, 0.45", "12.7545, 22.5504, 26.2914, 0.45", "12.8978, 23.6607, 27.674, 0.45", "13.0216, 25.1947, 29.7748, 0.45", "14.6228, 29.9723, 39.1786, 0.45", "15.7343, 36.8614, 47.3958, 0.45", "16.5524, 42.8175, 56.2837, 0.45", "15.5831, 47.8299, 65.6792, 0.45", "15.6496, 53.7653, 74.6225, 0.45", "16.0582, 59.9153, 83.4219, 0.45", "16.2096, 64.653, 92.9863, 0.45", "15.012, 69.4816, 102.443, 0.45", "14.5623, 72.929, 112.484, 0.45", "11.9884, 78.2238, 121.436, 0.45", "8.1724, 84.5814, 129.26, 0.45", "6.16947, 90.4346, 138.041, 0.45", "2.8517, 94.4902, 147.324, 0.45", "0.459805, 98.6474, 156.845, 0.45", "-1.20349, 101.169, 167.006, 0.45", "-1.93747, 102.655, 177.448, 0.45", "-2.94143, 102.962, 187.951, 0.45", "-6.18156, 103.545, 197.986, 0.45", "-10.197, 103.584, 207.748, 0.45", "-14.8825, 104.142, 217.198, 0.45", "-18.6219, 105.961, 226.933, 0.45" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "8.97878, 4.37848, -0.65, 2.27", "8.97878, 4.37848, -0.65, 2.27", "12.4211, 5.66602, -0.65, 1.82", "14.5538, 6.46371, -0.65, 1.82" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "-2.83121, -9.19802, -6.2, 1.14", "-2.83121, -9.19802, -6.2, 1.14", "-3.35302, -11.1165, -6.47761, 1.14", "-3.87066, -13.0196, -6.753, 1.14", "-4.24997, -14.4141, -6.9548, 1.36", "-4.62376, -15.7884, -7.15366, 1.36", "-5.18239, -17.8421, -7.45086, 1.59", "-5.76863, -19.8682, -7.76081, 1.59" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "-2.55121, -11.8126, 3.96, 2.5", "-2.55121, -11.8126, 3.96, 2.5", "-2.9003, -13.9672, 4.1263, 1.82", "-3.48133, -17.5535, 4.40311, 1.82", "-3.95212, -20.4594, 4.62739, 1.82", "-4.46676, -23.6359, 4.87256, 1.82", "-4.94325, -26.577, 5.09956, 2.05" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-6.77122, 4.43098, 8.7, 1.59", "-6.77122, 4.43098, 8.7, 1.59", "-7.96958, 5.87588, 8.83864, 1.36", "-9.37497, 7.37047, 9.00701, 1.36", "-10.7658, 8.58539, 9.2038, 1.36", "-13.3455, 10.4845, 9.63708, 1.59", "-16.2251, 12.2726, 10.1947, 1.59", "-18.6447, 13.4895, 10.765, 1.36", "-20.9464, 14.3445, 11.4345, 1.36", "-23.8775, 14.942, 12.482, 1.36", "-25.673, 14.9929, 13.2516, 1.14", "-27.4501, 14.77, 14.1871, 1.14", "-28.7221, 14.563, 14.9725, 1.14", "-29.6434, 14.562, 15.6239, 1.14", "-30.7322, 14.6982, 16.5296, 1.14", "-31.4528, 15.0007, 17.1968, 1.14", "-32.9085, 16.0924, 18.5674, 1.14", "-34.875, 18.263, 20.3356, 1.14", "-36.7059, 20.7214, 21.7964, 1.14" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "1.32876, 10.7205, 0.58, 4.32", "1.32876, 10.7205, 0.58, 4.32", "2.08292, 13.3902, 1.28509, 2.5", "3.12541, 17.0806, 2.25973, 2.05", "3.8655, 19.7005, 2.95165, 2.5" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "1.43752, 10.454, 0.0, 1.15811", "3.46539, 25.3163, 0.0, 1.15811", "5.49327, 40.1786, 0.0, 1.15811" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "14.5538, 6.46371, -0.65, 1.82", "15.0047, 6.61218, -0.534718, 1.82", "17.7813, 7.52644, 0.175176, 1.59", "20.062, 8.27739, 0.758272, 1.36", "21.7752, 8.84146, 1.19626, 1.59" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "14.5538, 6.46371, -0.65, 0.91", "15.1326, 6.54482, -1.42533, 0.91", "16.007, 6.55935, -2.49167, 0.91", "16.6931, 6.49107, -3.3101, 0.91", "17.318, 6.41372, -4.03173, 0.91", "18.3045, 6.35648, -5.07364, 0.68", "19.5615, 6.38739, -6.2682, 0.68", "20.2826, 6.44488, -6.86071, 0.68", "21.3074, 6.55572, -7.54031, 0.68", "22.3185, 6.70155, -8.11409, 0.68", "23.8793, 6.99162, -8.9219, 0.91", "25.22, 7.28447, -9.59182, 0.68", "25.9361, 7.47114, -9.94809, 0.68", "27.4117, 7.87314, -10.6983, 0.68", "28.63, 8.17033, -11.3263, 0.68", "29.7713, 8.36557, -11.9163, 0.68", "30.6905, 8.47355, -12.4042, 0.68", "31.9125, 8.59865, -13.0372, 0.68", "33.0795, 8.74584, -13.6095, 0.68", "34.4361, 8.95363, -14.237, 0.45", "35.3535, 9.07569, -14.6578, 0.45", "35.9098, 9.15215, -14.9193, 0.45", "36.8331, 9.27678, -15.3769, 0.45", "38.2009, 9.46763, -16.1193, 1.14", "39.497, 9.66895, -16.8989, 0.45", "40.8175, 9.91292, -17.793, 0.45", "41.687, 10.0861, -18.4366, 0.45", "42.908, 10.3166, -19.3628, 0.68", "44.0509, 10.5534, -20.2449, 0.45", "45.277, 10.8587, -21.161, 1.36", "46.4871, 11.2125, -22.0098, 0.45", "48.1188, 11.7562, -23.0726, 0.45", "49.0641, 12.0915, -23.6442, 0.68", "50.1752, 12.5248, -24.2865, 0.23", "51.5311, 13.0713, -25.0411, 0.23", "52.3517, 13.4012, -25.4763, 1.82", "53.4546, 13.83, -26.0279, 0.45", "54.2307, 14.1203, -26.417, 0.45", "55.1734, 14.4356, -26.9133, 0.45", "56.1776, 14.7388, -27.4515, 0.45", "57.4856, 15.106, -28.1424, 0.45", "58.3234, 15.3403, -28.5709, 0.68", "59.639, 15.6865, -29.2226, 0.45", "61.1857, 16.0875, -29.9493, 1.36", "62.3566, 16.3881, -30.4535, 0.45", "63.5499, 16.7257, -30.9405, 0.45", "64.9382, 17.1555, -31.492, 0.23", "65.8737, 17.4649, -31.8601, 0.68", "67.3988, 18.013, -32.4219, 0.23", "68.1022, 18.2891, -32.6783, 1.36", "70.0655, 19.105, -33.4018, 0.23", "70.527, 19.3249, -33.5701, 0.68", "71.2858, 19.7288, -33.8267, 0.23", "71.8019, 20.0378, -33.9938, 0.68", "72.7085, 20.6291, -34.2975, 0.23", "73.4206, 21.1128, -34.5547, 1.14", "75.1076, 22.1866, -35.1892, 0.23", "75.5312, 22.4245, -35.3655, 1.14", "76.7078, 23.0384, -35.9113, 0.23", "78.351, 23.7963, -36.7059, 0.23", "79.1749, 24.1328, -37.1209, 0.68", "81.1149, 24.8509, -38.1329, 0.23", "82.9423, 25.4176, -39.1122, 0.23", "83.6663, 25.6092, -39.4962, 1.14", "85.2728, 25.9418, -40.3285, 0.45", "85.951, 26.0593, -40.6787, 0.45", "86.4, 26.1357, -40.915, 0.68", "87.3377, 26.3051, -41.4463, 0.23", "88.8737, 26.6162, -42.4156, 0.23", "89.0757, 26.6622, -42.5712, 0.68", "90.0757, 26.943, -43.5593, 0.23", "90.7117, 27.1406, -44.3118, 0.68", "91.3496, 27.3504, -45.1649, 0.23", "92.2087, 27.6852, -46.4459, 0.23", "93.0295, 28.0039, -47.7737, 0.68", "93.5571, 28.2039, -48.6426, 0.68", "94.1889, 28.4299, -49.6711, 0.68", "95.1678, 28.7745, -51.1725, 0.23", "95.9804, 29.0533, -52.2986, 0.45", "96.9831, 29.3811, -53.5323, 0.23", "97.697, 29.5975, -54.3116, 0.91", "98.7556, 29.9151, -55.4037, 0.23", "99.2127, 30.0609, -55.8635, 0.45", "100.249, 30.409, -56.9294, 0.23", "100.458, 30.4874, -57.1555, 1.14", "101.381, 30.9255, -58.2627, 0.23", "102.074, 31.3078, -59.2919, 0.23", "102.607, 31.6373, -60.1937, 1.59", "103.394, 32.1513, -61.6522, 0.23", "104.234, 32.7161, -63.278, 0.23", "104.866, 33.1806, -64.5679, 1.36", "106.135, 34.2444, -67.3213, 0.23", "106.841, 34.8518, -68.8931, 0.23", "107.295, 35.2464, -69.9319, 0.23", "107.469, 35.4015, -70.3467, 0.68", "108.261, 36.063, -72.1519, 0.23", "108.886, 36.5737, -73.492, 0.23" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "-5.76863, -19.8682, -7.76081, 0.68", "-7.06449, -19.4281, -9.38391, 0.68", "-8.01032, -19.2406, -10.6883, 0.68", "-8.91705, -19.1733, -12.0913, 0.91", "-9.66077, -19.2194, -13.4834, 0.91", "-10.2592, -19.393, -14.9131, 0.68", "-10.7542, -19.6851, -16.3966, 0.45", "-11.0415, -20.1717, -17.7053, 0.45", "-11.2931, -20.7352, -18.832, 0.68", "-11.6062, -21.4563, -20.0679, 0.68", "-11.9445, -22.2263, -21.2741, 0.68", "-12.2953, -22.8982, -22.3548, 0.68", "-12.8338, -23.6923, -23.5929, 0.68", "-13.6085, -24.6445, -25.0332, 0.68", "-14.2096, -25.3765, -26.0366, 0.68", "-14.9625, -26.4009, -27.2847, 0.68", "-15.6266, -27.4347, -28.5032, 0.68", "-16.266, -28.6085, -29.9117, 0.91", "-16.7871, -29.7865, -31.4007, 0.68", "-17.1613, -30.7096, -32.5778, 0.68", "-17.7572, -32.1229, -34.3814, 0.68", "-18.3078, -33.301, -35.9456, 0.68", "-18.774, -34.2611, -37.2574, 0.68", "-19.6352, -35.9417, -39.6989, 0.45", "-20.1068, -36.7725, -40.9587, 0.45", "-20.7112, -37.7229, -42.4726, 0.45", "-21.1425, -38.3351, -43.4851, 0.45", "-21.6252, -38.9558, -44.5636, 2.05", "-22.4009, -39.9428, -46.3134, 0.45", "-23.1842, -40.8946, -48.0209, 0.45", "-23.7319, -41.5575, -49.2305, 0.91", "-24.5242, -42.4988, -50.9217, 0.45", "-25.3031, -43.4243, -52.5078, 0.45", "-26.146, -44.4259, -54.1541, 1.82", "-27.1389, -45.6414, -56.0564, 0.45", "-27.6408, -46.283, -57.0359, 0.45", "-27.7514, -46.4307, -57.2566, 0.68", "-28.6373, -47.6678, -59.0544, 0.45", "-29.4133, -48.7118, -60.6076, 0.45", "-30.183, -49.6867, -62.1892, 0.68", "-30.9874, -50.6969, -63.9386, 0.45", "-31.6449, -51.4874, -65.3784, 0.45", "-32.2251, -52.1603, -66.6844, 2.05", "-33.1235, -53.1593, -68.674, 0.45", "-34.0097, -54.1133, -70.557, 0.45", "-34.8193, -54.9827, -72.1795, 0.45", "-35.7301, -55.9971, -73.8933, 0.45", "-36.3124, -56.6729, -74.9678, 0.45", "-36.772, -57.2336, -75.8061, 1.14", "-37.5874, -58.3243, -77.2512, 0.45", "-38.4542, -59.5183, -78.6503, 0.45", "-39.024, -60.333, -79.5492, 0.91", "-39.5874, -61.1553, -80.4308, 0.45", "-40.1619, -61.9971, -81.3143, 0.45", "-40.5827, -62.5979, -81.9968, 0.91", "-41.3572, -63.7023, -83.2831, 0.45", "-42.0407, -64.6928, -84.4749, 0.45", "-42.5623, -65.4725, -85.4407, 0.45", "-42.9427, -66.0506, -86.1705, 0.91", "-43.8598, -67.4808, -88.0489, 0.45", "-44.3589, -68.2992, -89.1905, 0.45", "-44.8378, -69.13, -90.3615, 0.45", "-45.2718, -69.8945, -91.4237, 0.45", "-45.8673, -70.9102, -92.8743, 0.45", "-46.2928, -71.6023, -93.8787, 0.45", "-46.9428, -72.6628, -95.2967, 0.45", "-47.3648, -73.3066, -96.1293, 0.45", "-48.0398, -74.368, -97.4587, 0.45", "-48.451, -75.041, -98.2796, 0.45", "-49.0687, -76.061, -99.5459, 0.45", "-49.6611, -76.972, -100.796, 1.36", "-50.3835, -77.916, -102.309, 1.36", "-51.0968, -78.6865, -103.864, 0.68", "-51.7478, -79.2159, -105.261, 0.68", "-52.4524, -79.5674, -106.682, 0.68", "-53.376, -79.7081, -108.373, 0.68", "-54.3806, -79.5913, -110.078, 0.45", "-55.3441, -79.3139, -111.582, 0.45", "-56.1996, -78.987, -112.805, 0.45", "-57.4386, -78.4573, -114.459, 0.45", "-58.9734, -77.8082, -116.387, 0.45", "-60.1779, -77.3226, -117.876, 0.45", "-60.9903, -77.0268, -118.898, 0.45", "-61.9167, -76.7592, -120.168, 0.45", "-62.7343, -76.6267, -121.4, 0.45", "-63.5919, -76.6615, -122.9, 0.45", "-64.6418, -76.9506, -125.056, 0.45", "-65.1165, -77.1787, -126.156, 0.23", "-65.9122, -77.6496, -128.19, 0.23", "-66.4505, -77.9785, -129.598, 0.91", "-67.4927, -78.4076, -131.96, 0.45", "-68.1204, -78.5014, -133.094, 0.45", "-69.502, -78.3643, -135.144, 0.45", "-70.2689, -78.1098, -136.165, 0.45", "-71.3605, -77.5603, -137.563, 0.45", "-73.4146, -76.2064, -140.312, 0.23", "-74.7937, -75.1386, -142.369, 0.23", "-75.9665, -74.0323, -144.621, 0.91", "-76.7546, -73.0902, -146.957, 0.23", "-77.1337, -72.4429, -149.277, 0.23", "-77.162, -72.1012, -151.197, 0.68", "-76.825, -71.9075, -154.162, 0.45", "-76.3071, -71.8915, -157.129, 0.45", "-75.5202, -72.09, -160.631, 0.45", "-74.7145, -72.4539, -163.682, 0.45", "-74.3537, -72.6419, -164.883, 0.45", "-73.748, -73.0066, -166.76, 0.45" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "-5.76863, -19.8682, -7.76081, 0.91", "-5.99361, -20.3522, -8.37526, 0.91", "-6.22608, -21.1872, -9.229, 0.68", "-6.35231, -21.9276, -9.79972, 0.68", "-6.41539, -22.6675, -10.2251, 0.68", "-6.38688, -23.6534, -10.6126, 0.68", "-6.20974, -25.004, -10.8881, 0.68", "-6.05152, -26.0905, -10.9557, 0.68", "-5.92862, -27.3177, -10.959, 0.68", "-5.90361, -28.0378, -10.9676, 1.14", "-5.92964, -29.379, -11.037, 1.14", "-6.13217, -31.4242, -11.2656, 0.68", "-6.44267, -32.9972, -11.542, 0.91", "-6.99706, -34.8387, -12.0518, 0.91", "-7.65188, -36.6028, -12.6783, 0.91", "-8.14173, -37.7048, -13.1352, 0.91", "-8.71821, -38.8311, -13.685, 1.14", "-9.56984, -40.3467, -14.5609, 1.36", "-10.525, -42.0185, -15.5835, 1.36", "-11.1254, -43.0026, -16.2237, 1.36", "-12.2093, -44.6536, -17.3205, 1.36", "-13.286, -46.2487, -18.343, 1.36", "-13.9119, -47.212, -18.9212, 1.14", "-14.4695, -48.1509, -19.4468, 0.68", "-14.851, -48.8771, -19.7871, 0.68", "-15.1139, -49.3907, -19.9831, 0.68", "-15.6523, -50.4462, -20.2314, 0.68", "-16.337, -51.6971, -20.3947, 0.68", "-17.0523, -52.9373, -20.5337, 0.68", "-17.3463, -53.4632, -20.6112, 0.68", "-18.0612, -54.7349, -20.8324, 0.68", "-19.05, -56.35, -21.1565, 0.91", "-19.9859, -57.7476, -21.496, 0.91", "-20.565, -58.5787, -21.7449, 0.68", "-21.2869, -59.6583, -22.1327, 0.68", "-21.9392, -60.793, -22.5808, 0.68", "-22.5215, -62.0329, -23.1403, 1.14", "-22.7737, -62.6445, -23.4611, 0.45", "-23.0502, -63.3979, -23.8431, 0.45", "-23.3164, -64.1794, -24.2165, 0.45", "-23.6457, -65.1512, -24.6488, 0.91", "-23.9265, -66.0821, -25.0505, 0.45", "-24.2755, -67.2976, -25.535, 0.45", "-24.8, -69.0812, -26.1403, 0.68", "-25.2073, -70.5512, -26.5538, 0.45", "-25.4029, -71.3175, -26.7381, 1.59", "-25.6524, -72.4219, -26.9753, 1.59", "-26.0469, -74.4232, -27.3414, 0.23", "-26.2998, -75.8741, -27.5889, 1.36", "-26.8221, -79.0102, -28.1002, 0.23", "-27.0582, -80.4671, -28.3185, 1.36", "-27.251, -81.6723, -28.5006, 0.23", "-27.4496, -82.8411, -28.6846, 1.36", "-27.7369, -84.2987, -28.9588, 0.23", "-27.9158, -85.0008, -29.1217, 0.68", "-28.4699, -86.6691, -29.5705, 0.23", "-28.8692, -87.6751, -29.8662, 0.23", "-29.4759, -88.9934, -30.2604, 0.91", "-30.0307, -90.0691, -30.5928, 0.23", "-30.5991, -91.1151, -30.9155, 0.68", "-31.5606, -92.8627, -31.4403, 0.23", "-31.999, -93.6625, -31.6754, 0.23", "-32.4065, -94.4433, -31.9016, 1.59", "-33.0262, -95.7178, -32.2865, 0.23", "-34.0184, -97.8541, -32.9905, 0.23", "-34.3334, -98.5526, -33.2418, 1.82", "-34.7985, -99.5641, -33.6344, 1.82", "-35.6883, -101.452, -34.3978, 0.23", "-36.1978, -102.494, -34.8289, 0.23", "-36.7472, -103.532, -35.2532, 0.23", "-37.3916, -104.613, -35.6806, 0.68", "-38.166, -105.758, -36.1407, 0.23", "-38.8416, -106.637, -36.4831, 0.23", "-39.2231, -107.082, -36.6436, 0.68", "-40.3553, -108.271, -37.089, 0.23", "-41.27, -109.142, -37.4569, 1.36", "-42.5014, -110.226, -37.9563, 0.23", "-42.7775, -110.453, -38.0696, 0.23", "-43.5862, -111.095, -38.4101, 0.91", "-44.892, -112.077, -39.0034, 0.23", "-45.8166, -112.721, -39.4688, 0.91" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-4.94325, -26.577, 5.09956, 1.36", "-3.96498, -29.0729, 4.19796, 1.36", "-3.00542, -31.8754, 3.19749, 1.14", "-2.23499, -34.1255, 2.39421, 1.14", "-1.60183, -35.9747, 1.73405, 1.14", "-0.702443, -38.6014, 0.796317, 1.14", "0.19884, -41.2337, -0.143395, 1.36", "1.05135, -43.4859, -0.858662, 1.59" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-4.94325, -26.577, 5.09956, 0.68", "-4.00429, -28.0667, 5.7816, 0.68", "-2.95676, -29.9172, 6.63591, 0.68", "-2.02021, -31.9943, 7.70089, 0.68", "-1.28366, -33.8958, 8.81722, 0.68", "-0.704548, -35.5021, 9.90747, 0.91", "-0.253679, -37.016, 11.0749, 0.91", "-0.0149827, -38.1079, 12.0624, 0.91", "-0.0893341, -39.716, 14.0128, 0.91", "-0.441571, -40.6418, 15.4647, 0.68", "-0.81121, -41.3507, 16.642, 0.68", "-1.4281, -42.5546, 18.4171, 0.68", "-1.94491, -43.8067, 19.9321, 0.68", "-2.34147, -45.1838, 21.2283, 0.68", "-2.67243, -46.7045, 22.3562, 0.68", "-3.2046, -49.1505, 23.9006, 0.68", "-3.64115, -51.1732, 25.022, 0.68", "-3.83319, -52.2623, 25.5405, 0.68", "-3.99814, -53.4473, 26.0065, 0.68", "-4.13979, -55.1298, 26.5937, 0.68", "-4.36811, -57.0336, 27.2486, 0.68" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-36.7059, 20.7214, 21.7964, 0.68", "-35.5735, 23.4107, 23.1474, 0.68", "-34.8443, 25.8376, 24.3157, 0.68", "-34.5778, 26.8986, 24.7473, 0.68", "-33.9288, 29.4417, 25.6859, 0.45", "-33.4626, 31.2683, 26.3602, 0.45", "-33.1043, 32.6722, 26.8783, 0.45", "-32.4557, 34.9255, 27.511, 0.45", "-31.8393, 36.5602, 28.007, 0.45", "-31.224, 38.779, 28.7374, 0.45", "-25.0445, 50.089, 32.7718, 0.45", "-17.1664, 58.9488, 38.8826, 0.45", "-11.3406, 70.3137, 43.2797, 0.45", "-3.97869, 81.4441, 45.3648, 0.45", "1.85338, 93.2804, 48.4638, 0.45", "7.72812, 105.214, 51.1304, 0.45", "15.396, 115.75, 54.4746, 0.45", "21.1893, 127.603, 57.5891, 0.45", "27.7667, 139.491, 57.8051, 0.45", "34.2491, 151.313, 59.3237, 0.45", "41.4045, 162.426, 62.0686, 0.45", "49.317, 173.334, 62.9219, 0.45", "59.4151, 181.868, 64.7457, 0.45", "70.2216, 188.978, 67.7316, 0.45", "81.433, 195.701, 69.9871, 0.45", "93.176, 200.892, 73.1261, 0.45", "105.548, 204.414, 76.0435, 0.45", "117.51, 208.166, 80.1493, 0.45", "130.069, 211.246, 82.7334, 0.45" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-36.7059, 20.7214, 21.7964, 0.68", "-38.4604, 20.9319, 22.1602, 0.68", "-39.944, 21.1459, 22.431, 0.68", "-41.3658, 21.3368, 22.6917, 0.68", "-42.7338, 21.5023, 22.9184, 0.68", "-43.7151, 21.6211, 23.0809, 0.68", "-45.5571, 21.844, 23.3861, 0.68", "-46.807, 21.9839, 23.5314, 0.68", "-48.0876, 22.1436, 23.64, 0.68", "-49.6321, 22.3949, 23.7536, 0.68" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "3.8655, 19.7005, 2.95165, 1.59", "2.84327, 22.7523, 1.68138, 1.59", "1.60924, 26.0026, 0.152089, 1.59", "0.582116, 28.7078, -1.12078, 1.59", "-0.243517, 30.8824, -2.14395, 1.59", "-1.09259, 33.1187, -3.19617, 1.59", "-1.77363, 34.9124, -4.04016, 1.59", "-1.80976, 34.977, -4.08351, 1.59" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "3.8655, 19.7005, 2.95165, 1.14", "4.4122, 20.7451, 2.7057, 1.14", "5.14983, 22.3417, 2.36121, 1.14", "5.68002, 23.4069, 2.11234, 1.14", "6.57484, 25.0359, 1.69178, 0.91", "7.27719, 26.2391, 1.36639, 0.91", "7.93034, 27.3319, 1.0697, 0.91", "8.72861, 28.7889, 0.673452, 0.91", "9.73919, 30.8032, 0.135556, 0.91", "10.3721, 32.0636, -0.194461, 0.91", "10.7695, 32.8308, -0.396662, 0.68", "11.2626, 33.8205, -0.668648, 0.68", "11.9368, 35.324, -1.13592, 0.91", "12.467, 36.5939, -1.57255, 0.91", "12.9838, 37.9352, -2.01427, 0.91", "13.4362, 39.0164, -2.34919, 0.91", "13.8861, 39.8972, -2.59357, 0.68", "14.6538, 41.0349, -2.81305, 0.68", "15.2421, 41.714, -2.83694, 0.68", "16.0638, 42.5957, -2.7461, 0.68", "16.8517, 43.4911, -2.56445, 0.68", "17.5254, 44.3711, -2.3885, 0.68", "18.3687, 45.6084, -2.21375, 0.68", "19.3248, 47.1898, -2.14471, 0.68", "19.9305, 48.3604, -2.24523, 0.68", "20.5521, 49.7766, -2.55683, 0.68", "21.1807, 51.4123, -3.1197, 0.68", "21.5979, 52.6135, -3.66418, 0.68", "21.964, 53.7709, -4.30476, 0.91", "22.2527, 54.7953, -4.95674, 0.68", "22.4724, 55.6984, -5.57684, 0.68", "22.6763, 56.6998, -6.30391, 0.68", "22.9295, 58.1632, -7.33614, 0.68", "23.0856, 59.4525, -8.15652, 0.68", "23.1984, 60.4457, -8.71553, 0.68", "23.3479, 61.5951, -9.28638, 0.68", "23.4905, 62.5125, -9.71393, 0.68", "23.6563, 63.4772, -10.1557, 1.14", "23.9194, 64.8266, -10.7688, 0.68", "24.2839, 66.3394, -11.3891, 0.68", "24.6087, 67.4492, -11.8116, 0.68", "24.9256, 68.4054, -12.1627, 0.68", "25.1287, 69.002, -12.3947, 1.36", "25.2442, 69.3562, -12.5572, 2.05", "25.7286, 70.9382, -13.3304, 0.45", "26.0672, 72.2939, -14.0296, 0.45", "26.1959, 72.9338, -14.3658, 0.91", "26.4069, 74.0732, -14.9443, 0.68", "26.6113, 75.2421, -15.5351, 0.68", "26.7444, 75.9721, -15.9205, 0.45", "26.9168, 76.8487, -16.4028, 0.45", "27.1307, 77.9392, -16.9919, 0.45", "27.3261, 78.8504, -17.4667, 0.91", "27.7365, 80.4685, -18.2455, 0.23", "28.0726, 81.5926, -18.7627, 0.23", "28.2936, 82.2639, -19.0883, 1.59" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "5.49327, 40.1786, 0.0, 0.68", "7.52114, 55.0409, 0.0, 0.68", "9.54902, 69.9032, 0.0, 0.68" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "21.7752, 8.84146, 1.19626, 0.68", "22.5461, 9.05838, 1.79927, 0.68", "23.3322, 9.42949, 2.38386, 0.68", "23.8348, 9.80692, 2.75733, 0.68", "24.3673, 10.306, 3.16574, 0.68", "24.9948, 10.9304, 3.65811, 0.68", "25.5543, 11.4861, 4.11238, 0.68", "26.352, 12.2526, 4.77883, 0.68", "27.2654, 13.1131, 5.563, 0.68", "27.9042, 13.6664, 6.08037, 0.68", "28.5205, 14.1299, 6.53005, 0.68", "29.2767, 14.5925, 7.02145, 0.68", "30.1282, 15.0151, 7.53294, 0.68", "31.0265, 15.4056, 8.04264, 0.68", "32.2952, 15.9401, 8.71385, 0.68", "33.2782, 16.3775, 9.20069, 0.68", "34.3792, 16.8848, 9.71515, 0.68", "34.9694, 17.1502, 9.97906, 0.68", "35.7096, 17.4749, 10.3135, 0.68", "36.2787, 17.7145, 10.5952, 0.68", "36.7346, 17.897, 10.8605, 0.68", "37.5593, 18.1708, 11.3493, 0.68", "38.3393, 18.3583, 11.7305, 0.68", "39.5726, 18.6505, 12.1964, 0.68", "40.445, 18.8736, 12.4708, 0.68", "41.6122, 19.2413, 12.8014, 0.68", "42.4986, 19.6206, 13.0439, 0.68", "43.7742, 20.2834, 13.389, 0.68", "45.3431, 21.1477, 13.7964, 0.68", "46.3791, 21.7068, 14.0461, 0.68", "47.3341, 22.2041, 14.2777, 0.45", "48.5569, 22.8538, 14.6253, 0.45", "49.6178, 23.458, 15.0208, 0.68", "50.2519, 23.819, 15.3262, 0.68", "51.3504, 24.3354, 15.9106, 0.45", "52.1423, 24.6741, 16.3302, 0.45", "53.0291, 25.084, 16.8088, 0.45", "54.0368, 25.621, 17.3848, 0.45", "54.752, 26.0934, 17.8187, 0.45", "55.6628, 26.85, 18.424, 0.45", "56.9262, 28.2252, 19.3217, 0.45", "57.6884, 29.397, 19.9261, 0.45", "58.179, 30.4544, 20.3713, 0.23", "58.5724, 31.6155, 20.7755, 0.23", "58.8355, 32.7458, 21.1126, 0.45", "59.1889, 34.9612, 21.6896, 0.45", "59.4072, 37.146, 22.2274, 0.23", "59.5041, 38.3663, 22.5165, 0.23", "59.543, 39.4567, 22.7487, 0.23", "59.5433, 40.3753, 22.9284, 0.23", "59.5918, 41.8329, 23.2021, 0.23", "65.1673, 46.1428, 25.3805, 0.23", "71.0597, 49.9716, 27.542, 0.23", "76.2629, 54.805, 29.6416, 0.23", "82.0061, 59.2514, 30.9732, 0.23", "87.7221, 63.9489, 31.1132, 0.23", "92.9173, 69.2128, 31.8675, 0.23", "97.7248, 74.917, 31.5708, 0.23", "102.497, 80.576, 32.4988, 0.23", "106.882, 86.3849, 34.1845, 0.23", "111.007, 92.1982, 36.4191, 0.23" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "21.7752, 8.84146, 1.19626, 0.68", "22.5738, 7.88389, 1.86719, 0.68", "23.6194, 6.75768, 2.90959, 0.68", "24.4188, 5.96599, 3.71112, 0.68", "25.3591, 5.01466, 4.6378, 0.68", "25.7737, 4.61839, 5.02551, 0.45", "26.4389, 4.00949, 5.61392, 0.45", "27.3995, 3.12852, 6.48386, 0.45", "28.3568, 2.26102, 7.33158, 0.68", "29.5576, 1.09082, 8.36962, 0.68", "30.8404, -0.219724, 9.43107, 0.68", "32.6344, -2.06566, 10.8625, 0.68", "33.9203, -3.41394, 11.8715, 0.68", "34.666, -4.22268, 12.5151, 0.45", "35.5576, -5.11961, 13.3549, 0.45", "35.9007, -5.44159, 13.7198, 0.45", "36.6694, -6.10361, 14.6521, 0.45", "37.4397, -6.67113, 15.6904, 0.68", "38.4461, -7.45185, 17.0821, 0.68", "39.5079, -8.43973, 18.4696, 0.45", "40.159, -9.13521, 19.2172, 0.45", "40.9416, -10.0705, 19.9482, 0.68", "41.6258, -10.9182, 20.3857, 0.68", "43.1101, -12.8855, 21.129, 0.23", "44.5414, -14.9029, 21.6262, 0.23", "45.6127, -16.4669, 21.8495, 0.23", "46.7945, -18.1498, 21.9616, 0.23", "48.7341, -20.8684, 21.9633, 0.23", "53.5799, -28.6512, 24.9925, 0.23", "57.7888, -37.0128, 27.4817, 0.23", "62.5189, -45.039, 30.0417, 0.23", "68.16, -52.4485, 32.4161, 0.23", "74.8071, -58.8916, 34.7382, 0.23", "81.2625, -64.9817, 38.2621, 0.23", "86.7201, -71.5114, 42.7053, 0.23", "92.4479, -76.915, 48.1058, 0.23", "96.9254, -82.7947, 54.23, 0.23", "99.9762, -88.7521, 61.1479, 0.23" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "1.05135, -43.4859, -0.858662, 1.36", "-0.134086, -44.1315, -1.22289, 1.36", "-1.3138, -44.8021, -1.62995, 1.14", "-2.31756, -45.3797, -2.01707, 1.14", "-3.70388, -46.2289, -2.62047, 0.91", "-4.24541, -46.5986, -2.89115, 0.91", "-4.94346, -47.1428, -3.29424, 0.91", "-5.66492, -47.8222, -3.83558, 0.91", "-6.20401, -48.5791, -4.41662, 0.91", "-6.58411, -49.2944, -4.94436, 0.91", "-6.96711, -50.1574, -5.54337, 0.91", "-7.35523, -51.0225, -6.10408, 0.91", "-7.77909, -51.8875, -6.63784, 0.91", "-8.45772, -53.1643, -7.37734, 0.91", "-9.34683, -54.6282, -8.18378, 0.91", "-10.0494, -55.617, -8.71307, 1.14", "-11.257, -57.0658, -9.45378, 1.36", "-12.2757, -58.1405, -9.98468, 1.14", "-13.4222, -59.2386, -10.512, 1.14", "-14.6057, -60.279, -11.0, 1.36", "-15.2612, -60.8384, -11.2656, 1.14", "-16.3315, -61.7395, -11.7008, 0.91", "-17.0548, -62.3566, -11.9738, 0.91", "-17.8388, -63.0944, -12.233, 0.91", "-18.4828, -63.8236, -12.4117, 0.91", "-19.1074, -64.7327, -12.5475, 0.68", "-19.8942, -66.1421, -12.7103, 0.91", "-20.3576, -67.1117, -12.8022, 1.14", "-20.9224, -68.3994, -12.8713, 1.14", "-21.4883, -69.8111, -12.8759, 0.68", "-21.912, -70.9513, -12.8539, 0.68", "-22.3982, -72.3165, -12.7969, 1.14", "-22.7011, -73.1557, -12.7584, 0.68", "-23.1605, -74.3959, -12.7257, 0.68", "-23.7708, -75.9989, -12.7224, 0.68", "-24.5306, -77.9592, -12.7666, 0.68", "-24.9895, -79.2025, -12.8278, 1.36", "-25.4656, -80.5388, -12.9251, 1.36", "-26.0142, -82.1037, -13.1076, 1.14", "-26.4455, -83.2375, -13.2939, 0.91", "-26.8872, -84.3016, -13.5157, 0.91", "-27.4442, -85.5628, -13.8291, 0.91", "-27.8164, -86.3616, -14.0623, 1.59", "-28.5298, -87.839, -14.5252, 0.91", "-29.3611, -89.5071, -15.0422, 1.14", "-29.9586, -90.6999, -15.3862, 1.14", "-30.7267, -92.2538, -15.7861, 1.82", "-31.6988, -94.2468, -16.2268, 1.36", "-32.4936, -95.9366, -16.569, 1.36", "-32.9758, -97.0356, -16.7759, 1.82", "-33.4015, -98.1577, -16.9461, 0.91", "-33.7916, -99.2889, -17.0429, 0.45", "-34.1088, -100.396, -17.0481, 0.45", "-34.2564, -101.124, -16.995, 0.45", "-34.4207, -102.272, -16.9013, 0.68", "-34.5255, -103.261, -16.8478, 0.45", "-34.6044, -104.179, -16.8378, 0.45", "-34.6576, -104.734, -16.8651, 0.45", "-34.8725, -106.366, -16.9952, 0.45", "-35.0805, -107.445, -17.0653, 0.23", "-35.1929, -107.86, -17.0779, 0.23", "-35.4808, -108.755, -17.0665, 0.23", "-35.7002, -109.408, -17.0158, 0.45", "-36.043, -110.377, -16.838, 0.23", "-36.2221, -110.896, -16.6758, 0.68", "-36.6107, -112.02, -16.2039, 0.23", "-36.8407, -112.719, -15.8638, 0.23", "-36.9491, -113.065, -15.6773, 0.45", "-37.2315, -114.048, -15.1199, 0.23", "-37.381, -114.592, -14.8309, 0.45", "-37.7293, -115.756, -14.3296, 0.23", "-38.0178, -116.615, -14.0503, 0.23", "-38.2822, -117.361, -13.8344, 0.45", "-38.5938, -118.182, -13.6211, 0.23", "-39.0842, -119.386, -13.366, 0.91", "-39.8263, -121.15, -13.0953, 0.23", "-40.2884, -122.271, -13.0187, 0.91" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "1.05135, -43.4859, -0.858662, 1.36", "1.00542, -43.9776, -0.090265, 1.36", "1.0133, -44.8189, 1.3797, 0.68", "1.08817, -45.5476, 2.60404, 0.68", "1.31397, -46.4966, 4.12344, 0.68", "1.5905, -47.2461, 5.19579, 0.68", "1.91459, -47.9408, 6.12572, 0.45", "2.29013, -48.4702, 6.89928, 0.45", "2.77925, -48.9132, 7.58029, 0.68", "3.47531, -49.4825, 8.3624, 0.68", "4.30646, -50.1771, 9.23945, 0.68", "4.9834, -50.8253, 9.99825, 0.68", "5.89202, -51.7605, 11.1376, 0.68", "6.73928, -52.7606, 12.4007, 0.68", "7.59228, -53.9854, 13.9329, 0.68", "8.0784, -54.8626, 14.945, 0.68", "8.4689, -55.7093, 15.8193, 0.68", "8.89916, -56.7383, 16.6974, 0.68", "9.39567, -58.1421, 17.6838, 0.68", "9.68785, -59.1793, 18.3434, 0.68", "10.0726, -60.785, 19.3039, 0.68", "10.3737, -62.3004, 20.1648, 0.68", "10.655, -63.7543, 20.9778, 0.68", "10.9045, -65.0697, 21.7645, 0.68", "11.1819, -66.2279, 22.5942, 0.68", "11.5867, -67.5591, 23.6402, 0.68", "11.8724, -68.3951, 24.3589, 0.68", "12.6931, -70.3244, 26.2893, 0.23", "13.0543, -71.0217, 27.0921, 0.23", "13.7517, -72.1328, 28.5198, 0.23", "14.6037, -73.2966, 30.0614, 0.23", "15.4184, -74.2843, 31.4473, 0.23", "16.1587, -75.1207, 32.6765, 0.23", "16.8855, -75.884, 33.9569, 0.23", "17.7598, -76.8341, 35.5475, 0.23", "20.6234, -84.1264, 40.9992, 0.23", "22.8994, -91.5923, 46.515, 0.23", "25.4192, -99.4082, 51.4543, 0.23", "26.1269, -107.702, 56.2776, 0.23", "27.8393, -116.374, 60.1509, 0.23", "30.4602, -124.794, 64.0189, 0.23", "32.138, -133.081, 68.6068, 0.23", "33.8888, -142.061, 71.7555, 0.23", "37.6954, -150.523, 74.336, 0.23", "41.065, -159.129, 77.09, 0.23", "44.5522, -167.9, 79.1291, 0.23", "48.5435, -176.688, 79.3765, 0.23", "51.8006, -185.804, 79.1372, 0.23", "56.3025, -194.231, 80.3155, 0.23", "60.5773, -202.528, 82.6327, 0.23", "65.7971, -209.178, 86.9643, 0.23" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-4.36811, -57.0336, 27.2486, 0.23", "-4.81998, -57.2722, 28.1335, 0.23", "-5.53704, -57.8389, 29.5336, 0.23", "-6.04311, -58.5194, 30.7123, 0.23", "-6.30528, -59.2719, 31.5543, 0.23", "-6.41126, -59.7936, 32.0187, 0.23", "-6.54344, -60.4935, 32.5306, 0.23", "-6.60424, -61.0235, 32.8666, 0.23", "-6.67083, -62.2902, 33.4803, 0.23", "-6.67965, -64.14, 34.2118, 0.23", "-6.66678, -65.0284, 34.5266, 0.23", "-6.63001, -66.9391, 35.1688, 0.23", "-8.75986, -73.1411, 41.7251, 0.23", "-11.8729, -77.3678, 49.2408, 0.23", "-13.7401, -81.4013, 57.2495, 0.23", "-16.6302, -84.6523, 65.2758, 0.23", "-19.8235, -89.2497, 72.5572, 0.23", "-23.0316, -94.6963, 79.2801, 0.23", "-27.0607, -100.731, 85.036, 0.23", "-29.674, -105.782, 92.2767, 0.23", "-31.4272, -111.654, 99.209, 0.23", "-32.8377, -118.789, 105.062, 0.23" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-4.36811, -57.0336, 27.2486, 0.23", "-4.29248, -58.7101, 28.506, 0.23", "-4.41388, -59.7221, 29.1848, 0.23", "-4.57006, -60.6966, 29.8855, 0.68", "-4.67851, -61.7032, 30.6372, 0.68", "-4.80014, -62.7972, 31.4373, 0.45", "-4.96986, -63.9979, 32.2579, 0.45", "-5.19305, -65.3179, 33.1094, 0.45", "-5.39197, -66.6211, 33.826, 0.45", "-5.57012, -68.3634, 34.5714, 0.45", "-5.53044, -69.2485, 34.8285, 0.45", "-5.17782, -70.5553, 35.0271, 0.45", "-4.72097, -71.5621, 34.9902, 0.45", "-3.7522, -73.3052, 34.7482, 0.45", "-2.69365, -74.9748, 34.3196, 0.23", "-1.54193, -76.5172, 33.7617, 0.23", "-0.933689, -77.199, 33.4823, 0.23", "0.406856, -78.4569, 32.8891, 0.23", "3.50795, -90.1512, 35.8724, 0.23", "5.79045, -101.288, 40.8605, 0.23", "10.514, -112.28, 44.1445, 0.23", "16.7763, -122.462, 47.225, 0.23", "21.479, -133.947, 48.1284, 0.23", "28.4622, -143.663, 51.0207, 0.23", "35.0049, -153.306, 54.973, 0.23", "42.643, -162.76, 56.8004, 0.23", "52.0852, -169.716, 59.9124, 0.23", "61.4333, -176.334, 63.8628, 0.23", "70.5227, -183.679, 67.2109, 0.23", "80.0934, -190.92, 69.0943, 0.23", "89.2847, -197.75, 73.0882, 0.23", "99.4905, -202.82, 76.9816, 0.23" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-49.6321, 22.3949, 23.7536, 0.68", "-50.1415, 23.0681, 24.4083, 0.68", "-50.763, 23.88, 25.1084, 0.45", "-51.4297, 24.6464, 25.7567, 0.45", "-51.9865, 25.2183, 26.2171, 0.45", "-52.8798, 26.1358, 26.9558, 0.45", "-53.641, 26.9175, 27.5851, 0.45", "-54.0802, 27.4067, 27.9158, 0.45", "-54.7641, 28.1721, 28.3643, 0.45", "-55.4227, 28.8034, 28.7076, 0.45", "-58.9553, 33.7049, 33.4551, 0.45", "-62.9591, 37.6938, 38.5919, 0.45", "-66.7064, 41.5655, 43.9954, 0.45", "-69.7508, 45.9957, 49.446, 0.45", "-72.2575, 49.6117, 55.6622, 0.45", "-75.1908, 51.8674, 62.2705, 0.45", "-78.9488, 52.9882, 68.7299, 0.45", "-82.823, 54.0245, 75.1338, 0.45", "-86.2558, 54.466, 81.8475, 0.45", "-89.9726, 56.4554, 88.1341, 0.45" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-49.6321, 22.3949, 23.7536, 0.68", "-50.4577, 22.9308, 22.9722, 0.68", "-51.6068, 23.771, 21.8264, 0.68", "-52.7023, 24.6336, 20.8138, 0.68", "-53.26, 25.0588, 20.3363, 0.68", "-54.1544, 25.7289, 19.6517, 0.68", "-55.1092, 26.4804, 19.0162, 0.68", "-56.3411, 27.52, 18.312, 0.68", "-57.9865, 28.923, 17.477, 0.68", "-59.4895, 30.1955, 16.7681, 0.68", "-61.2923, 31.6531, 15.9728, 0.68", "-63.7121, 33.4896, 14.9795, 0.68", "-65.1853, 34.4819, 14.3975, 0.68", "-65.9974, 34.9245, 14.0686, 0.68", "-66.7568, 35.2729, 13.7542, 0.68", "-67.9062, 35.7288, 13.2952, 0.68", "-68.8675, 36.014, 12.9536, 0.68", "-70.1675, 36.3167, 12.5146, 0.68", "-71.9238, 36.7288, 11.9261, 0.68", "-74.2604, 37.3764, 11.1051, 0.68", "-75.5458, 37.8032, 10.6039, 0.68", "-77.8425, 38.7086, 9.54249, 0.68", "-78.8555, 39.1644, 8.96597, 0.68", "-79.9679, 39.7566, 8.18254, 0.68", "-80.8024, 40.2338, 7.50079, 0.68", "-81.7133, 40.7142, 6.6932, 0.68", "-82.8429, 41.2817, 5.68972, 0.91", "-83.8755, 41.8139, 4.81562, 0.91", "-86.0263, 42.9071, 3.29054, 0.91", "-87.5859, 43.6263, 2.36761, 0.91", "-89.015, 44.1786, 1.65572, 0.68", "-90.5645, 44.6876, 1.01973, 0.68", "-92.2484, 45.2126, 0.438065, 0.68", "-93.058, 45.4876, 0.203028, 0.68", "-94.6729, 46.1293, -0.191112, 0.91", "-96.5056, 47.0458, -0.562652, 0.68", "-98.2183, 48.0433, -0.835687, 0.68", "-100.005, 49.1635, -1.01622, 1.14", "-101.774, 50.4233, -1.10886, 0.68", "-102.906, 51.3637, -1.12417, 0.68", "-104.192, 52.6003, -1.0843, 1.14", "-104.998, 53.4355, -1.05944, 0.91", "-105.965, 54.411, -1.08961, 0.68", "-107.797, 56.0449, -1.31009, 0.68", "-108.663, 56.721, -1.51045, 0.45", "-109.705, 57.4995, -1.8646, 0.45", "-111.189, 58.57, -2.53061, 1.36", "-112.501, 59.4354, -3.24393, 0.68", "-113.966, 60.3799, -4.14454, 0.91", "-114.855, 60.957, -4.7158, 0.68", "-115.758, 61.5787, -5.26996, 0.68", "-116.902, 62.4483, -5.95254, 0.91", "-117.964, 63.3162, -6.55954, 0.68", "-120.053, 65.1621, -7.7201, 0.68", "-121.032, 66.0825, -8.25622, 0.68", "-122.943, 67.9809, -9.24492, 0.68", "-123.525, 68.6046, -9.52602, 0.68", "-124.672, 69.9762, -10.0504, 1.59", "-125.729, 71.4388, -10.4983, 0.45", "-126.681, 72.9175, -10.8515, 0.91", "-127.333, 74.1152, -11.054, 0.45", "-127.916, 75.4435, -11.1751, 0.45", "-128.207, 76.1257, -11.2031, 0.45", "-128.975, 78.0169, -11.2203, 0.91", "-129.494, 79.1759, -11.2303, 0.45", "-130.406, 80.9065, -11.2849, 0.45", "-131.463, 82.5529, -11.4276, 1.36", "-132.315, 83.7598, -11.5909, 0.45", "-133.25, 85.0304, -11.8011, 0.45", "-134.257, 86.2958, -12.0332, 0.45", "-135.5, 87.804, -12.2773, 0.91", "-136.819, 89.3206, -12.4251, 0.45", "-137.352, 89.9483, -12.4314, 0.45", "-138.247, 91.0904, -12.3616, 0.45", "-139.195, 92.4209, -12.2155, 1.14", "-140.27, 94.1397, -11.9532, 0.68", "-141.199, 95.7065, -11.6569, 0.68", "-142.282, 97.4425, -11.2598, 0.68", "-142.886, 98.3023, -11.0473, 0.91", "-144.208, 100.078, -10.5993, 0.91", "-144.997, 101.094, -10.3782, 0.45", "-145.957, 102.243, -10.2219, 0.45", "-146.963, 103.375, -10.1857, 0.91", "-147.776, 104.199, -10.2766, 0.45", "-149.236, 105.578, -10.6324, 0.45", "-150.362, 106.577, -11.0653, 1.36", "-151.409, 107.485, -11.5738, 0.68", "-152.605, 108.524, -12.2573, 0.68", "-153.947, 109.747, -13.1627, 0.68", "-155.088, 110.775, -14.0531, 0.45", "-156.909, 112.303, -15.6547, 0.45", "-158.062, 113.199, -16.7329, 1.14", "-159.093, 113.984, -17.7647, 0.45", "-160.018, 114.746, -18.8215, 0.45", "-160.751, 115.488, -19.8801, 0.45", "-161.178, 116.1, -20.818, 0.45", "-161.45, 116.701, -21.7929, 0.45", "-161.704, 117.367, -22.8395, 0.45", "-161.996, 118.194, -24.0004, 1.36", "-162.414, 119.372, -25.4743, 1.14", "-162.672, 120.333, -26.4989, 0.45", "-162.883, 121.387, -27.5161, 0.45", "-163.05, 122.463, -28.5192, 0.23", "-163.241, 123.833, -29.7485, 0.23", "-163.282, 124.14, -30.0089, 0.23", "-163.386, 125.246, -30.8317, 1.36", "-163.39, 126.634, -31.7213, 0.45", "-163.31, 127.37, -32.1539, 0.45", "-163.129, 128.354, -32.7155, 0.91", "-162.863, 129.625, -33.4461, 0.23", "-162.632, 130.772, -34.122, 0.23", "-162.38, 132.029, -34.8668, 0.68", "-162.094, 133.483, -35.6828, 0.45", "-161.824, 135.057, -36.5748, 1.14", "-161.72, 135.964, -37.1037, 0.23", "-161.701, 137.248, -37.8527, 0.23", "-161.784, 138.186, -38.3931, 0.68", "-162.196, 140.102, -39.4495, 0.23", "-162.518, 141.133, -39.9733, 0.23", "-163.101, 142.529, -40.6307, 1.14", "-164.203, 144.661, -41.5618, 0.23", "-164.615, 145.323, -41.829, 0.91", "-165.731, 146.82, -42.417, 0.23", "-166.365, 147.547, -42.6837, 0.91", "-168.052, 149.301, -43.2841, 0.23", "-169.072, 150.293, -43.633, 1.14", "-170.125, 151.253, -43.9982, 0.45", "-171.204, 152.175, -44.3937, 0.45", "-171.934, 152.75, -44.6785, 0.91", "-173.722, 154.093, -45.4123, 0.45", "-174.921, 154.972, -45.9444, 0.45", "-175.761, 155.601, -46.3767, 1.14", "-177.244, 156.725, -47.2077, 0.23", "-178.67, 157.812, -48.0854, 0.23", "-179.375, 158.311, -48.5658, 0.91", "-180.372, 158.906, -49.3234, 0.91", "-181.348, 159.361, -50.083, 0.23", "-181.928, 159.529, -50.6126, 0.91", "-182.797, 159.603, -51.5599, 0.23", "-183.509, 159.533, -52.4389, 0.23", "-184.306, 159.373, -53.5056, 0.23", "-185.024, 159.168, -54.4971, 0.91", "-186.491, 158.726, -56.5269, 0.23", "-187.066, 158.583, -57.3143, 0.68", "-188.018, 158.43, -58.6353, 0.23", "-188.997, 158.383, -60.0183, 0.23", "-189.77, 158.385, -61.1214, 0.23", "-190.392, 158.416, -62.0351, 1.59", "-191.583, 158.614, -63.6359, 0.23", "-192.419, 158.787, -64.752, 0.23", "-192.93, 158.915, -65.4099, 1.59" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-1.80976, 34.977, -4.08351, 1.82", "-2.37035, 36.645, -4.57227, 1.82", "-3.39433, 39.6918, -5.46504, 1.36", "-4.01134, 41.5277, -6.00299, 1.36", "-4.81212, 43.9103, -6.70115, 1.36" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-1.80976, 34.977, -4.08351, 1.14", "-1.88458, 35.8998, -5.13963, 1.14", "-2.00523, 37.0192, -6.32655, 1.14", "-2.07389, 37.8346, -7.19359, 1.14", "-2.07537, 38.9913, -8.46196, 0.91", "-1.96814, 40.0172, -9.60198, 0.91", "-1.783, 40.9813, -10.6944, 0.68", "-1.55293, 41.7706, -11.5417, 0.68", "-1.35676, 42.2336, -12.0486, 0.68", "-0.791876, 43.1509, -13.1599, 0.68", "-0.320712, 43.7268, -13.9606, 0.68", "0.106683, 44.2045, -14.6002, 0.68", "0.800372, 45.0615, -15.6062, 0.68", "1.33223, 45.8652, -16.45, 0.68", "1.68236, 46.5462, -17.1239, 0.68", "1.95664, 47.2785, -17.8257, 0.68", "2.34212, 48.6462, -19.1299, 0.68", "2.59726, 49.6517, -20.0557, 0.68", "2.80742, 50.6673, -20.9931, 0.68", "2.95075, 51.5972, -21.8565, 0.91", "3.05435, 52.5928, -22.8096, 0.91", "3.1285, 53.5813, -23.8377, 0.68", "3.14145, 54.7087, -25.1303, 0.91", "3.12969, 55.6743, -26.1941, 0.68", "3.11404, 56.5539, -27.1086, 0.68", "3.09828, 57.6434, -28.1694, 0.68", "3.08798, 58.8032, -29.2276, 0.68", "3.06835, 59.9072, -30.1626, 0.68", "3.03023, 61.3796, -31.2987, 0.68", "3.02865, 62.844, -32.3229, 0.68", "3.06703, 64.7201, -33.5536, 0.45", "3.15289, 66.2663, -34.5099, 0.45", "3.21218, 66.861, -34.8632, 0.68", "3.45273, 68.4348, -35.7828, 0.45", "3.58911, 69.2167, -36.2494, 0.45", "3.76329, 70.1269, -36.7716, 1.82", "4.12308, 71.7534, -37.7235, 0.45", "4.35107, 72.7663, -38.3543, 0.45", "4.47269, 73.3411, -38.7253, 0.68", "4.7674, 74.878, -39.7581, 0.45", "4.92836, 75.8848, -40.4517, 1.82", "5.07432, 77.0968, -41.3552, 0.45", "5.20087, 78.438, -42.4408, 0.45", "5.23729, 78.8109, -42.7765, 0.45", "5.36639, 79.8384, -43.8007, 0.45", "5.52312, 80.7315, -44.7398, 1.59", "5.84856, 82.0438, -46.1757, 0.45", "6.16087, 83.0723, -47.3181, 0.45", "6.56168, 84.117, -48.484, 0.45", "6.94767, 84.9866, -49.4447, 1.59", "7.43853, 85.9904, -50.5194, 0.45", "7.91252, 86.8583, -51.4296, 0.45", "8.44716, 87.774, -52.35, 0.45", "8.87574, 88.488, -53.0569, 0.45", "9.33738, 89.2775, -53.814, 0.45", "9.69129, 89.8953, -54.3986, 0.91", "10.387, 91.207, -55.5423, 0.45", "10.9023, 92.2964, -56.3944, 0.45", "11.2885, 93.147, -57.0409, 0.45", "11.7779, 94.48, -58.0294, 0.45", "11.933, 95.0062, -58.4336, 0.91", "12.3032, 96.6707, -59.8145, 0.45", "12.4544, 97.9175, -60.9495, 0.45", "12.4629, 98.6396, -61.6936, 1.36", "12.3493, 99.9672, -63.2646, 0.45", "12.1694, 101.022, -64.6847, 0.68", "11.9815, 101.861, -65.9769, 0.45", "11.8031, 102.578, -67.2396, 1.36", "11.5914, 103.518, -68.982, 0.45", "11.4704, 104.391, -70.5872, 0.45", "11.4667, 105.406, -72.4218, 0.23", "11.6083, 106.489, -74.2239, 0.68", "11.8677, 107.433, -75.6867, 0.68", "12.3536, 108.573, -77.2634, 1.14", "12.9422, 109.629, -78.5023, 0.45", "13.7948, 111.012, -79.8334, 0.68", "14.6692, 112.348, -80.8948, 0.45", "15.3131, 113.338, -81.542, 0.91", "16.0038, 114.464, -82.185, 0.45", "16.568, 115.478, -82.7021, 0.91", "17.3113, 117.136, -83.5578, 0.45", "17.8456, 118.687, -84.4465, 0.45", "17.9468, 119.087, -84.721, 0.68", "18.2189, 120.533, -85.842, 0.45", "18.3007, 121.072, -86.3231, 0.91", "18.5135, 122.5, -87.7194, 0.45", "18.6739, 123.669, -88.8864, 0.91", "18.7866, 124.821, -90.1058, 0.23", "18.8287, 125.158, -90.4723, 0.45", "19.0539, 126.411, -91.85, 0.45", "19.4877, 127.8, -93.5026, 0.45", "19.7072, 128.273, -94.1089, 1.14", "20.3105, 129.242, -95.4554, 0.45", "20.983, 130.154, -96.8393, 0.45", "21.5899, 130.891, -98.0619, 0.91", "23.0574, 132.462, -100.874, 0.45", "23.9956, 133.392, -102.573, 0.45", "24.9228, 134.269, -104.112, 0.91", "25.8553, 135.16, -105.551, 0.91", "27.0463, 136.359, -107.348, 0.45", "27.5528, 136.913, -108.081, 0.45", "28.047, 137.554, -108.762, 1.14", "29.0675, 139.045, -110.117, 0.68", "30.0235, 140.594, -111.317, 0.45", "30.7756, 141.905, -112.217, 0.45", "30.9663, 142.275, -112.463, 0.45", "31.4291, 143.261, -113.126, 0.91", "31.8852, 144.261, -113.835, 0.45", "32.3275, 145.35, -114.643, 0.91", "32.8849, 146.805, -115.785, 0.23", "33.1477, 147.54, -116.421, 0.23", "33.4137, 148.369, -117.23, 0.23", "33.5972, 149.024, -117.919, 0.23", "33.7767, 150.028, -118.972, 0.23", "33.8591, 150.753, -119.732, 0.23", "33.8929, 151.924, -120.895, 0.23", "33.9212, 153.032, -121.964, 0.23", "33.9673, 153.932, -122.836, 0.23", "34.0532, 154.621, -123.471, 0.68", "34.3828, 156.134, -124.79, 0.23", "34.7826, 157.464, -125.922, 0.23", "35.2157, 158.601, -126.911, 0.45", "35.6745, 159.672, -127.879, 0.91", "36.4052, 161.377, -129.525, 0.23", "36.9067, 162.401, -130.744, 0.23", "37.276, 163.132, -131.657, 0.23", "37.8648, 164.229, -133.09, 0.23", "38.0839, 164.675, -133.692, 0.45", "38.6804, 165.929, -135.529, 0.23", "39.8157, 168.258, -139.647, 0.23" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "-192.93, 158.915, -65.4099, 0.23", "-191.914, 159.046, -66.9654, 0.23", "-190.854, 159.182, -68.5882, 0.68", "-189.579, 159.345, -70.5413, 0.23", "-188.294, 159.51, -72.5093, 0.23", "-187.322, 159.634, -73.9967, 0.23" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-192.93, 158.915, -65.4099, 0.45", "-194.419, 159.74, -67.1247, 0.45", "-196.151, 160.642, -69.0143, 0.45", "-197.608, 161.338, -70.5535, 0.91", "-199.609, 162.272, -72.5721, 0.23", "-200.435, 162.679, -73.3562, 0.68", "-202.169, 163.555, -74.984, 0.23", "-203.356, 164.099, -76.0588, 0.23", "-204.706, 164.644, -77.3162, 0.23", "-205.547, 164.908, -78.1384, 1.14", "-207.951, 165.598, -80.532, 0.23", "-208.806, 165.819, -81.4201, 0.91", "-211.103, 166.344, -83.8958, 0.23", "-213.78, 166.89, -86.9241, 0.23", "-215.889, 167.211, -89.4474, 0.23" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-4.81212, 43.9103, -6.70115, 0.91", "-5.18249, 45.3244, -6.24276, 0.91", "-5.78452, 47.5958, -5.51304, 0.91", "-6.70269, 51.9022, -4.13333, 0.91", "-7.00126, 53.6949, -3.54937, 0.91", "-7.30408, 56.2165, -2.68132, 0.91", "-7.50853, 58.6633, -1.79781, 0.91", "-7.61946, 60.1784, -1.24802, 0.91", "-7.88169, 62.8039, -0.184889, 0.91", "-8.17394, 64.5207, 0.690437, 0.91", "-8.52734, 65.9295, 1.42666, 0.91", "-8.9409, 67.3292, 2.06123, 0.68", "-9.36996, 68.6808, 2.59578, 0.91", "-10.3307, 71.8628, 3.75905, 0.91", "-11.3792, 75.619, 5.07632, 0.91", "-12.1078, 79.2121, 6.2674, 0.91", "-12.6915, 83.7778, 7.66332, 0.91", "-12.8411, 86.6195, 8.39973, 0.91", "-12.8074, 89.6024, 8.96712, 0.91", "-12.7153, 91.2787, 9.1776, 1.14", "-12.4999, 95.2156, 9.49532, 0.91", "-12.4584, 97.299, 9.57338, 0.91", "-12.5271, 100.505, 9.47649, 0.91", "-12.7121, 105.269, 8.98227, 0.91", "-12.9268, 109.094, 8.36175, 0.91", "-13.1649, 112.09, 7.76417, 0.91", "-13.3691, 113.964, 7.36342, 0.68", "-13.6133, 116.03, 7.01672, 0.68", "-13.9358, 118.939, 6.78007, 0.91", "-14.1094, 120.997, 6.78827, 0.91", "-14.3289, 124.206, 6.91486, 1.36", "-14.4732, 126.33, 6.99217, 0.91", "-14.7389, 129.522, 7.06798, 0.91", "-14.9482, 132.147, 7.01675, 0.91", "-15.2347, 136.004, 6.72964, 0.91", "-15.3987, 139.347, 6.2931, 1.14", "-15.4599, 142.641, 5.66784, 1.14", "-15.4514, 144.32, 5.2637, 0.91", "-15.3339, 149.517, 3.82166, 1.14", "-15.2627, 151.945, 3.14009, 1.14", "-15.1578, 155.382, 2.27651, 0.91", "-15.0885, 157.34, 1.91916, 0.68", "-14.9886, 159.233, 1.73125, 0.68", "-14.8658, 161.714, 1.69715, 0.91", "-14.7517, 165.527, 2.01243, 1.14", "-14.6806, 168.585, 2.4766, 1.14", "-14.6592, 171.211, 3.02457, 0.45", "-14.7207, 173.37, 3.58068, 0.45", "-14.9067, 175.877, 4.29347, 0.68", "-15.1342, 177.958, 4.89658, 0.45", "-15.2745, 178.991, 5.16376, 0.45", "-15.5677, 181.022, 5.49779, 0.91", "-15.8692, 182.864, 5.58081, 0.23", "-16.116, 184.245, 5.49187, 0.68", "-16.3836, 185.973, 5.25637, 0.23", "-16.7632, 188.696, 4.74745, 0.45", "-17.0177, 190.748, 4.28478, 0.23", "-17.152, 192.028, 3.92542, 0.23", "-17.3571, 194.106, 3.29036, 0.23", "-17.481, 195.439, 2.87524, 0.68", "-17.6965, 197.888, 2.12566, 0.23", "-17.93, 201.339, 0.991053, 0.23", "-18.0042, 203.522, 0.240836, 0.23", "-20.2501, 215.228, -0.946531, 0.23", "-20.4884, 227.167, -2.12773, 0.23", "-21.8431, 239.088, -2.19639, 0.23", "-21.2004, 251.0, -0.930417, 0.23", "-22.0708, 262.941, -1.72739, 0.23", "-24.3967, 274.682, -1.16848, 0.23" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-4.81212, 43.9103, -6.70115, 0.68", "-5.26025, 46.3683, -7.10335, 0.68", "-5.80836, 48.8043, -7.53279, 0.68", "-6.54381, 51.5057, -8.03464, 0.68", "-7.47952, 54.4683, -8.55476, 0.68", "-8.57423, 57.4783, -8.96386, 0.68", "-9.95546, 60.8404, -9.29211, 0.68", "-10.7974, 62.5972, -9.36626, 0.68", "-11.8575, 64.4723, -9.35817, 0.91", "-12.8987, 65.9725, -9.31784, 0.45", "-14.5966, 68.0863, -9.2016, 0.45", "-16.016, 69.7381, -9.09313, 0.45", "-17.0197, 70.9753, -9.03704, 0.45", "-17.493, 71.6241, -9.05985, 0.45", "-18.4983, 73.1904, -9.2861, 0.91", "-19.6585, 75.1409, -9.71679, 0.45", "-20.9061, 77.4426, -10.4214, 0.45", "-21.7803, 79.1912, -11.032, 0.45", "-22.5147, 80.7606, -11.6058, 0.45", "-23.2424, 82.419, -12.2274, 0.45" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_30", "dend_29", "dend_24", "dend_21", "dend_14", "dend_7", "dend_0", "dend_26", "dend_25", "dend_23", "dend_22", "dend_18", "dend_15", "dend_13", "dend_8", "dend_2", "dend_1", "dend_28", "dend_27", "dend_20", "dend_19", "dend_17", "dend_16", "dend_12", "dend_9", "dend_4", "dend_3", "dend_11", "dend_10", "dend_6", "dend_5" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_30", "dend_29", "dend_24", "dend_21", "dend_14", "dend_7", "dend_0", "dend_26", "dend_25", "dend_23", "dend_22", "dend_18", "dend_15", "dend_13", "dend_8", "dend_2", "dend_1", "dend_28", "dend_27", "dend_20", "dend_19", "dend_17", "dend_16", "dend_12", "dend_9", "dend_4", "dend_3", "dend_11", "dend_10", "dend_6", "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_24", "dend_24", "dend_24", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_26", "dend_26", "dend_26", "dend_26", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_4", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.999855",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.042115",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0012239999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.001693",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.386953",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "8.0E-6",
    "erev" : "-63.854015"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.5399997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.039862998",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "5.2299997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.0054459996",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.503893",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "1.0E-4",
    "erev" : "-67.1289"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.78E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.15074699",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009017",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "4.0E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.0032419998",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "1.74E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bNAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bNAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bNAC219_L6_LBC_0491f28d21_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_30, id: dend_30, parent: soma_0
create dend_30
public dend_30
// Section: dend_29, id: dend_29, parent: soma_0
create dend_29
public dend_29
// Section: dend_24, id: dend_24, parent: soma_0
create dend_24
public dend_24
// Section: dend_21, id: dend_21, parent: soma_0
create dend_21
public dend_21
// Section: dend_14, id: dend_14, parent: soma_0
create dend_14
public dend_14
// Section: dend_7, id: dend_7, parent: soma_0
create dend_7
public dend_7
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_26, id: dend_26, parent: dend_24
create dend_26
public dend_26
// Section: dend_25, id: dend_25, parent: dend_24
create dend_25
public dend_25
// Section: dend_23, id: dend_23, parent: dend_21
create dend_23
public dend_23
// Section: dend_22, id: dend_22, parent: dend_21
create dend_22
public dend_22
// Section: dend_18, id: dend_18, parent: dend_14
create dend_18
public dend_18
// Section: dend_15, id: dend_15, parent: dend_14
create dend_15
public dend_15
// Section: dend_13, id: dend_13, parent: dend_7
create dend_13
public dend_13
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_28, id: dend_28, parent: dend_26
create dend_28
public dend_28
// Section: dend_27, id: dend_27, parent: dend_26
create dend_27
public dend_27
// Section: dend_20, id: dend_20, parent: dend_18
create dend_20
public dend_20
// Section: dend_19, id: dend_19, parent: dend_18
create dend_19
public dend_19
// Section: dend_17, id: dend_17, parent: dend_15
create dend_17
public dend_17
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_12, id: dend_12, parent: dend_8
create dend_12
public dend_12
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9
// Section: dend_4, id: dend_4, parent: dend_2
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_11, id: dend_11, parent: dend_9
create dend_11
public dend_11
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10
// Section: dend_6, id: dend_6, parent: dend_4
create dend_6
public dend_6
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_30, dend_29, dend_24, dend_21, dend_14, dend_7, dend_0, dend_26, dend_25, dend_23, dend_22, dend_18, dend_15, dend_13, dend_8, dend_2, dend_1, dend_28, dend_27, dend_20, dend_19, dend_17, dend_16, dend_12, dend_9, dend_4, dend_3, dend_11, dend_10, dend_6, dend_5]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_30, dend_29, dend_24, dend_21, dend_14, dend_7, dend_0, dend_26, dend_25, dend_23, dend_22, dend_18, dend_15, dend_13, dend_8, dend_2, dend_1, dend_28, dend_27, dend_20, dend_19, dend_17, dend_16, dend_12, dend_9, dend_4, dend_3, dend_11, dend_10, dend_6, dend_5]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_32
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_26, dend_26, dend_26, dend_26, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_11, dend_11, dend_11, dend_11, dend_11, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bNAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bNAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_30(0), soma_0(0.45000003020513674)
    connect dend_29(0), soma_0(0.45000003020513674)
    connect dend_24(0), soma_0(0.45000003020513674)
    connect dend_21(0), soma_0(0.45000003020513674)
    connect dend_14(0), soma_0(0.45000003020513674)
    connect dend_7(0), soma_0(0.45000003020513674)
    connect dend_0(0), soma_0(0.45000003020513674)
    connect axon_0(0), soma_0(1.0)
    connect dend_26(0), dend_24(1.0)
    connect dend_25(0), dend_24(1.0)
    connect dend_23(0), dend_21(1.0)
    connect dend_22(0), dend_21(1.0)
    connect dend_18(0), dend_14(1.0)
    connect dend_15(0), dend_14(1.0)
    connect dend_13(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_28(0), dend_26(1.0)
    connect dend_27(0), dend_26(1.0)
    connect dend_20(0), dend_18(1.0)
    connect dend_19(0), dend_18(1.0)
    connect dend_17(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_12(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)
    connect dend_4(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_11(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)
    connect dend_6(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -1.58794, -11.7196, 0.0, 2.80064 ) }
    soma_0 { pt3dadd( -1.43666, -10.6109, 0.0, 4.56392 ) }
    soma_0 { pt3dadd( -1.28539, -9.50222, 0.0, 6.24281 ) }
    soma_0 { pt3dadd( -1.13412, -8.39354, 0.0, 7.62114 ) }
    soma_0 { pt3dadd( -0.982843, -7.28486, 0.0, 8.91633 ) }
    soma_0 { pt3dadd( -0.83157, -6.17618, 0.0, 10.2819 ) }
    soma_0 { pt3dadd( -0.680297, -5.06751, 0.0, 11.6257 ) }
    soma_0 { pt3dadd( -0.529024, -3.95883, 0.0, 12.7797 ) }
    soma_0 { pt3dadd( -0.377751, -2.85015, 0.0, 13.5779 ) }
    soma_0 { pt3dadd( -0.226478, -1.74148, 0.0, 14.0593 ) }
    soma_0 { pt3dadd( -0.0752052, -0.632799, 0.0, 14.5256 ) }
    soma_0 { pt3dadd( 0.0760678, 0.475878, 0.0, 15.0335 ) }
    soma_0 { pt3dadd( 0.227341, 1.58456, 0.0, 15.6506 ) }
    soma_0 { pt3dadd( 0.378614, 2.69323, 0.0, 15.9776 ) }
    soma_0 { pt3dadd( 0.529887, 3.80191, 0.0, 15.9263 ) }
    soma_0 { pt3dadd( 0.68116, 4.91059, 0.0, 15.679 ) }
    soma_0 { pt3dadd( 0.832433, 6.01926, 0.0, 14.959 ) }
    soma_0 { pt3dadd( 0.983706, 7.12794, 0.0, 13.4415 ) }
    soma_0 { pt3dadd( 1.13498, 8.23662, 0.0, 11.0445 ) }
    soma_0 { pt3dadd( 1.28625, 9.3453, 0.0, 9.12656 ) }
    soma_0 { pt3dadd( 1.43752, 10.454, 0.0, 6.46763 ) }
    // Section: dend_30, id: dend_30, parent: soma_0 (entry count 21/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( 2.61877, -1.35452, -16.47, 0.91 ) }
    dend_30 { pt3dadd( 2.74927, -1.63523, -16.7088, 0.91 ) }
    dend_30 { pt3dadd( 3.2229, -3.84985, -18.5933, 0.91 ) }
    dend_30 { pt3dadd( 3.24766, -5.15217, -19.8273, 0.91 ) }
    dend_30 { pt3dadd( 3.17401, -5.81874, -20.6345, 0.91 ) }
    dend_30 { pt3dadd( 3.01859, -6.50752, -21.9872, 0.91 ) }
    dend_30 { pt3dadd( 2.89408, -6.65664, -23.2935, 0.91 ) }
    dend_30 { pt3dadd( 2.84037, -6.02619, -24.8859, 0.91 ) }
    dend_30 { pt3dadd( 3.01677, -4.97094, -26.1519, 0.91 ) }
    dend_30 { pt3dadd( 3.48419, -3.55079, -27.5051, 0.91 ) }
    dend_30 { pt3dadd( 4.37929, -1.66269, -29.2614, 0.91 ) }
    dend_30 { pt3dadd( 5.28596, -0.151614, -30.757, 0.91 ) }
    dend_30 { pt3dadd( 6.34717, 1.41936, -32.4232, 0.91 ) }
    dend_30 { pt3dadd( 7.46448, 2.93124, -34.1809, 0.91 ) }
    dend_30 { pt3dadd( 8.49898, 4.30844, -36.025, 0.91 ) }
    dend_30 { pt3dadd( 9.42675, 5.67702, -38.1366, 0.91 ) }
    dend_30 { pt3dadd( 10.0202, 6.64198, -39.822, 0.91 ) }
    dend_30 { pt3dadd( 10.4847, 7.47414, -41.3718, 0.91 ) }
    dend_30 { pt3dadd( 11.0243, 8.46278, -43.4885, 0.91 ) }
    dend_30 { pt3dadd( 11.6778, 9.5317, -46.1035, 1.36 ) }
    dend_30 { pt3dadd( 12.3352, 10.3203, -48.1911, 1.36 ) }
    dend_30 { pt3dadd( 13.2147, 11.0104, -50.3065, 0.91 ) }
    dend_30 { pt3dadd( 14.2574, 11.4759, -52.2645, 1.14 ) }
    dend_30 { pt3dadd( 15.4579, 11.6713, -54.1938, 0.68 ) }
    dend_30 { pt3dadd( 16.855, 11.5937, -56.2867, 0.68 ) }
    dend_30 { pt3dadd( 18.2566, 11.2922, -58.3347, 2.27 ) }
    dend_30 { pt3dadd( 19.8786, 10.7505, -60.7067, 0.45 ) }
    dend_30 { pt3dadd( 21.6345, 10.046, -63.3555, 1.59 ) }
    dend_30 { pt3dadd( 22.9813, 9.48526, -65.4053, 0.45 ) }
    dend_30 { pt3dadd( 24.3048, 8.9783, -67.369, 0.45 ) }
    dend_30 { pt3dadd( 24.8768, 8.76012, -68.1895, 2.5 ) }
    dend_30 { pt3dadd( 26.5825, 8.15172, -70.5701, 0.23 ) }
    dend_30 { pt3dadd( 28.6438, 7.53584, -73.1545, 0.23 ) }
    dend_30 { pt3dadd( 30.5516, 7.05013, -75.2989, 0.23 ) }
    dend_30 { pt3dadd( 32.1428, 6.70263, -76.9138, 2.27 ) }
    dend_30 { pt3dadd( 34.6132, 6.19875, -79.2368, 0.23 ) }
    dend_30 { pt3dadd( 36.9673, 5.73497, -81.3214, 0.23 ) }
    dend_30 { pt3dadd( 38.3616, 5.4711, -82.4752, 0.91 ) }
    dend_30 { pt3dadd( 40.422, 5.0551, -84.0583, 0.23 ) }
    dend_30 { pt3dadd( 42.2506, 4.70387, -85.3523, 0.91 ) }
    dend_30 { pt3dadd( 44.1093, 4.37985, -86.6283, 0.23 ) }
    dend_30 { pt3dadd( 45.7087, 4.13918, -87.7318, 0.23 ) }
    dend_30 { pt3dadd( 46.4955, 4.04062, -88.3235, 0.91 ) }
    dend_30 { pt3dadd( 48.3896, 3.91924, -89.9912, 0.23 ) }
    dend_30 { pt3dadd( 49.6077, 3.92618, -91.1498, 1.82 ) }
    dend_30 { pt3dadd( 51.354, 4.04471, -92.9618, 0.45 ) }
    dend_30 { pt3dadd( 53.0467, 4.2177, -94.7534, 0.68 ) }
    dend_30 { pt3dadd( 54.8513, 4.37753, -96.6932, 0.23 ) }
    dend_30 { pt3dadd( 56.8565, 4.4977, -98.8307, 1.59 ) }
    dend_30 { pt3dadd( 59.7964, 4.58358, -101.908, 0.23 ) }
    dend_30 { pt3dadd( 61.024, 4.53966, -103.19, 0.23 ) }
    dend_30 { pt3dadd( 62.189, 4.41338, -104.342, 0.91 ) }
    dend_30 { pt3dadd( 63.6366, 4.16857, -105.755, 0.23 ) }
    dend_30 { pt3dadd( 64.5698, 3.95141, -106.649, 0.91 ) }
    dend_30 { pt3dadd( 66.2991, 3.52065, -108.316, 0.23 ) }
    dend_30 { pt3dadd( 68.2524, 3.05528, -110.259, 0.91 ) }
    dend_30 { pt3dadd( 71.1004, 2.4902, -113.168, 0.45 ) }
    dend_30 { pt3dadd( 73.2728, 2.18433, -115.496, 0.45 ) }
    dend_30 { pt3dadd( 75.5606, 2.0362, -118.014, 0.45 ) }
    dend_30 { pt3dadd( 77.0988, 2.02773, -119.753, 0.68 ) }
    dend_30 { pt3dadd( 78.6947, 2.10308, -121.553, 0.23 ) }
    dend_30 { pt3dadd( 80.6289, 2.27811, -123.676, 1.14 ) }
    dend_30 { pt3dadd( 82.5689, 2.53819, -125.719, 0.45 ) }
    dend_30 { pt3dadd( 84.9372, 2.94465, -128.042, 0.45 ) }
    dend_30 { pt3dadd( 87.1536, 3.35058, -130.081, 0.91 ) }
    dend_30 { pt3dadd( 89.2018, 3.62811, -131.83, 0.45 ) }
    dend_30 { pt3dadd( 90.1523, 3.69499, -132.589, 1.59 ) }
    dend_30 { pt3dadd( 91.4898, 3.68506, -133.591, 1.36 ) }
    dend_30 { pt3dadd( 92.8279, 3.56292, -134.53, 0.68 ) }
    dend_30 { pt3dadd( 94.8309, 3.33125, -135.942, 0.68 ) }
    dend_30 { pt3dadd( 96.7721, 3.11791, -137.399, 1.36 ) }
    dend_30 { pt3dadd( 98.9427, 2.93537, -139.161, 1.36 ) }
    dend_30 { pt3dadd( 100.865, 2.87523, -140.899, 0.68 ) }
    dend_30 { pt3dadd( 102.903, 3.01222, -142.979, 0.68 ) }
    dend_30 { pt3dadd( 104.463, 3.3759, -144.745, 0.45 ) }
    dend_30 { pt3dadd( 105.453, 3.84078, -145.967, 0.45 ) }
    dend_30 { pt3dadd( 105.967, 4.22291, -146.644, 0.91 ) }
    dend_30 { pt3dadd( 107.128, 5.54337, -148.424, 0.45 ) }
    dend_30 { pt3dadd( 107.965, 6.9083, -150.036, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_30 { pt3dadd( 108.744, 8.62718, -151.87, 0.45 ) }
    dend_30 { pt3dadd( 109.179, 9.70617, -152.939, 0.45 ) }
    dend_30 { pt3dadd( 109.529, 10.6263, -153.792, 0.91 ) }
    dend_30 { pt3dadd( 110.232, 12.5758, -155.498, 0.45 ) }
    dend_30 { pt3dadd( 110.849, 14.3483, -156.948, 0.91 ) }
    dend_30 { pt3dadd( 111.615, 16.289, -158.554, 0.45 ) }
    dend_30 { pt3dadd( 112.524, 18.3554, -160.356, 0.45 ) }
    dend_30 { pt3dadd( 113.449, 20.0743, -162.011, 0.91 ) }
    dend_30 { pt3dadd( 114.518, 21.658, -163.721, 0.45 ) }
    dend_30 { pt3dadd( 114.924, 22.1479, -164.31, 0.91 ) }
    dend_30 { pt3dadd( 116.392, 23.6824, -166.386, 0.45 ) }
    dend_30 { pt3dadd( 117.757, 24.869, -168.37, 0.45 ) }
    dend_30 { pt3dadd( 119.162, 25.9747, -170.59, 0.45 ) }
    dend_30 { pt3dadd( 120.029, 26.6442, -172.099, 0.91 ) }
    dend_30 { pt3dadd( 121.08, 27.4254, -173.998, 0.23 ) }
    dend_30 { pt3dadd( 122.187, 28.2346, -176.039, 0.68 ) }
    dend_30 { pt3dadd( 123.58, 29.2168, -178.782, 0.45 ) }
    dend_30 { pt3dadd( 124.815, 30.018, -181.286, 0.45 ) }
    dend_30 { pt3dadd( 125.767, 30.6259, -183.279, 0.91 ) }
    dend_30 { pt3dadd( 126.901, 31.2266, -185.703, 0.45 ) }
    dend_30 { pt3dadd( 128.21, 31.8555, -188.495, 0.45 ) }
    dend_30 { pt3dadd( 129.962, 32.6054, -192.157, 0.45 ) }
    dend_30 { pt3dadd( 131.548, 33.2169, -195.373, 0.45 ) }
    dend_30 { pt3dadd( 133.306, 33.7354, -198.75, 0.45 ) }
    dend_30 { pt3dadd( 135.133, 34.1558, -202.223, 0.45 ) }
    // Section: dend_29, id: dend_29, parent: soma_0 (entry count 25/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 3.75878, 8.90398, 6.75, 0.68 ) }
    dend_29 { pt3dadd( 4.82414, 10.0029, 7.16563, 0.68 ) }
    dend_29 { pt3dadd( 5.93486, 11.2536, 7.76026, 0.68 ) }
    dend_29 { pt3dadd( 7.34002, 12.9321, 8.69618, 0.91 ) }
    dend_29 { pt3dadd( 8.65522, 14.5243, 9.74704, 0.91 ) }
    dend_29 { pt3dadd( 9.81956, 15.908, 10.8946, 0.68 ) }
    dend_29 { pt3dadd( 10.7713, 16.9579, 12.0431, 0.68 ) }
    dend_29 { pt3dadd( 11.2254, 17.4454, 13.0359, 0.68 ) }
    dend_29 { pt3dadd( 11.4159, 17.6544, 13.9299, 0.68 ) }
    dend_29 { pt3dadd( 11.547, 17.8105, 15.2988, 0.68 ) }
    dend_29 { pt3dadd( 11.6524, 18.0731, 17.4424, 0.68 ) }
    dend_29 { pt3dadd( 11.7204, 18.3116, 18.5195, 0.68 ) }
    dend_29 { pt3dadd( 11.9472, 19.04, 20.6451, 0.68 ) }
    dend_29 { pt3dadd( 12.1103, 19.6662, 21.9697, 0.68 ) }
    dend_29 { pt3dadd( 12.3275, 20.5086, 23.4682, 0.68 ) }
    dend_29 { pt3dadd( 12.5589, 21.5257, 24.9799, 0.45 ) }
    dend_29 { pt3dadd( 12.7545, 22.5504, 26.2914, 0.45 ) }
    dend_29 { pt3dadd( 12.8978, 23.6607, 27.674, 0.45 ) }
    dend_29 { pt3dadd( 13.0216, 25.1947, 29.7748, 0.45 ) }
    dend_29 { pt3dadd( 14.6228, 29.9723, 39.1786, 0.45 ) }
    dend_29 { pt3dadd( 15.7343, 36.8614, 47.3958, 0.45 ) }
    dend_29 { pt3dadd( 16.5524, 42.8175, 56.2837, 0.45 ) }
    dend_29 { pt3dadd( 15.5831, 47.8299, 65.6792, 0.45 ) }
    dend_29 { pt3dadd( 15.6496, 53.7653, 74.6225, 0.45 ) }
    dend_29 { pt3dadd( 16.0582, 59.9153, 83.4219, 0.45 ) }
    dend_29 { pt3dadd( 16.2096, 64.653, 92.9863, 0.45 ) }
    dend_29 { pt3dadd( 15.012, 69.4816, 102.443, 0.45 ) }
    dend_29 { pt3dadd( 14.5623, 72.929, 112.484, 0.45 ) }
    dend_29 { pt3dadd( 11.9884, 78.2238, 121.436, 0.45 ) }
    dend_29 { pt3dadd( 8.1724, 84.5814, 129.26, 0.45 ) }
    dend_29 { pt3dadd( 6.16947, 90.4346, 138.041, 0.45 ) }
    dend_29 { pt3dadd( 2.8517, 94.4902, 147.324, 0.45 ) }
    dend_29 { pt3dadd( 0.459805, 98.6474, 156.845, 0.45 ) }
    dend_29 { pt3dadd( -1.20349, 101.169, 167.006, 0.45 ) }
    dend_29 { pt3dadd( -1.93747, 102.655, 177.448, 0.45 ) }
    dend_29 { pt3dadd( -2.94143, 102.962, 187.951, 0.45 ) }
    dend_29 { pt3dadd( -6.18156, 103.545, 197.986, 0.45 ) }
    dend_29 { pt3dadd( -10.197, 103.584, 207.748, 0.45 ) }
    dend_29 { pt3dadd( -14.8825, 104.142, 217.198, 0.45 ) }
    dend_29 { pt3dadd( -18.6219, 105.961, 226.933, 0.45 ) }
    // Section: dend_24, id: dend_24, parent: soma_0 (entry count 65/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 8.97878, 4.37848, -0.65, 2.27 ) }
    dend_24 { pt3dadd( 8.97878, 4.37848, -0.65, 2.27 ) }
    dend_24 { pt3dadd( 12.4211, 5.66602, -0.65, 1.82 ) }
    dend_24 { pt3dadd( 14.5538, 6.46371, -0.65, 1.82 ) }
    // Section: dend_21, id: dend_21, parent: soma_0 (entry count 69/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( -2.83121, -9.19802, -6.2, 1.14 ) }
    dend_21 { pt3dadd( -2.83121, -9.19802, -6.2, 1.14 ) }
    dend_21 { pt3dadd( -3.35302, -11.1165, -6.47761, 1.14 ) }
    dend_21 { pt3dadd( -3.87066, -13.0196, -6.753, 1.14 ) }
    dend_21 { pt3dadd( -4.24997, -14.4141, -6.9548, 1.36 ) }
    dend_21 { pt3dadd( -4.62376, -15.7884, -7.15366, 1.36 ) }
    dend_21 { pt3dadd( -5.18239, -17.8421, -7.45086, 1.59 ) }
    dend_21 { pt3dadd( -5.76863, -19.8682, -7.76081, 1.59 ) }
    // Section: dend_14, id: dend_14, parent: soma_0 (entry count 77/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( -2.55121, -11.8126, 3.96, 2.5 ) }
    dend_14 { pt3dadd( -2.55121, -11.8126, 3.96, 2.5 ) }
    dend_14 { pt3dadd( -2.9003, -13.9672, 4.1263, 1.82 ) }
    dend_14 { pt3dadd( -3.48133, -17.5535, 4.40311, 1.82 ) }
    dend_14 { pt3dadd( -3.95212, -20.4594, 4.62739, 1.82 ) }
    dend_14 { pt3dadd( -4.46676, -23.6359, 4.87256, 1.82 ) }
    dend_14 { pt3dadd( -4.94325, -26.577, 5.09956, 2.05 ) }
    // Section: dend_7, id: dend_7, parent: soma_0 (entry count 84/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -6.77122, 4.43098, 8.7, 1.59 ) }
    dend_7 { pt3dadd( -6.77122, 4.43098, 8.7, 1.59 ) }
    dend_7 { pt3dadd( -7.96958, 5.87588, 8.83864, 1.36 ) }
    dend_7 { pt3dadd( -9.37497, 7.37047, 9.00701, 1.36 ) }
    dend_7 { pt3dadd( -10.7658, 8.58539, 9.2038, 1.36 ) }
    dend_7 { pt3dadd( -13.3455, 10.4845, 9.63708, 1.59 ) }
    dend_7 { pt3dadd( -16.2251, 12.2726, 10.1947, 1.59 ) }
    dend_7 { pt3dadd( -18.6447, 13.4895, 10.765, 1.36 ) }
    dend_7 { pt3dadd( -20.9464, 14.3445, 11.4345, 1.36 ) }
    dend_7 { pt3dadd( -23.8775, 14.942, 12.482, 1.36 ) }
    dend_7 { pt3dadd( -25.673, 14.9929, 13.2516, 1.14 ) }
    dend_7 { pt3dadd( -27.4501, 14.77, 14.1871, 1.14 ) }
    dend_7 { pt3dadd( -28.7221, 14.563, 14.9725, 1.14 ) }
    dend_7 { pt3dadd( -29.6434, 14.562, 15.6239, 1.14 ) }
    dend_7 { pt3dadd( -30.7322, 14.6982, 16.5296, 1.14 ) }
    dend_7 { pt3dadd( -31.4528, 15.0007, 17.1968, 1.14 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_7 { pt3dadd( -32.9085, 16.0924, 18.5674, 1.14 ) }
    dend_7 { pt3dadd( -34.875, 18.263, 20.3356, 1.14 ) }
    dend_7 { pt3dadd( -36.7059, 20.7214, 21.7964, 1.14 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 3/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 1.32876, 10.7205, 0.58, 4.32 ) }
    dend_0 { pt3dadd( 1.32876, 10.7205, 0.58, 4.32 ) }
    dend_0 { pt3dadd( 2.08292, 13.3902, 1.28509, 2.5 ) }
    dend_0 { pt3dadd( 3.12541, 17.0806, 2.25973, 2.05 ) }
    dend_0 { pt3dadd( 3.8655, 19.7005, 2.95165, 2.5 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 8/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 1.43752, 10.454, 0.0, 1.15811 ) }
    axon_0 { pt3dadd( 3.46539, 25.3163, 0.0, 1.15811 ) }
    axon_0 { pt3dadd( 5.49327, 40.1786, 0.0, 1.15811 ) }
    // Section: dend_26, id: dend_26, parent: dend_24 (entry count 11/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 14.5538, 6.46371, -0.65, 1.82 ) }
    dend_26 { pt3dadd( 15.0047, 6.61218, -0.534718, 1.82 ) }
    dend_26 { pt3dadd( 17.7813, 7.52644, 0.175176, 1.59 ) }
    dend_26 { pt3dadd( 20.062, 8.27739, 0.758272, 1.36 ) }
    dend_26 { pt3dadd( 21.7752, 8.84146, 1.19626, 1.59 ) }
    // Section: dend_25, id: dend_25, parent: dend_24 (entry count 16/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 14.5538, 6.46371, -0.65, 0.91 ) }
    dend_25 { pt3dadd( 15.1326, 6.54482, -1.42533, 0.91 ) }
    dend_25 { pt3dadd( 16.007, 6.55935, -2.49167, 0.91 ) }
    dend_25 { pt3dadd( 16.6931, 6.49107, -3.3101, 0.91 ) }
    dend_25 { pt3dadd( 17.318, 6.41372, -4.03173, 0.91 ) }
    dend_25 { pt3dadd( 18.3045, 6.35648, -5.07364, 0.68 ) }
    dend_25 { pt3dadd( 19.5615, 6.38739, -6.2682, 0.68 ) }
    dend_25 { pt3dadd( 20.2826, 6.44488, -6.86071, 0.68 ) }
    dend_25 { pt3dadd( 21.3074, 6.55572, -7.54031, 0.68 ) }
    dend_25 { pt3dadd( 22.3185, 6.70155, -8.11409, 0.68 ) }
    dend_25 { pt3dadd( 23.8793, 6.99162, -8.9219, 0.91 ) }
    dend_25 { pt3dadd( 25.22, 7.28447, -9.59182, 0.68 ) }
    dend_25 { pt3dadd( 25.9361, 7.47114, -9.94809, 0.68 ) }
    dend_25 { pt3dadd( 27.4117, 7.87314, -10.6983, 0.68 ) }
    dend_25 { pt3dadd( 28.63, 8.17033, -11.3263, 0.68 ) }
    dend_25 { pt3dadd( 29.7713, 8.36557, -11.9163, 0.68 ) }
    dend_25 { pt3dadd( 30.6905, 8.47355, -12.4042, 0.68 ) }
    dend_25 { pt3dadd( 31.9125, 8.59865, -13.0372, 0.68 ) }
    dend_25 { pt3dadd( 33.0795, 8.74584, -13.6095, 0.68 ) }
    dend_25 { pt3dadd( 34.4361, 8.95363, -14.237, 0.45 ) }
    dend_25 { pt3dadd( 35.3535, 9.07569, -14.6578, 0.45 ) }
    dend_25 { pt3dadd( 35.9098, 9.15215, -14.9193, 0.45 ) }
    dend_25 { pt3dadd( 36.8331, 9.27678, -15.3769, 0.45 ) }
    dend_25 { pt3dadd( 38.2009, 9.46763, -16.1193, 1.14 ) }
    dend_25 { pt3dadd( 39.497, 9.66895, -16.8989, 0.45 ) }
    dend_25 { pt3dadd( 40.8175, 9.91292, -17.793, 0.45 ) }
    dend_25 { pt3dadd( 41.687, 10.0861, -18.4366, 0.45 ) }
    dend_25 { pt3dadd( 42.908, 10.3166, -19.3628, 0.68 ) }
    dend_25 { pt3dadd( 44.0509, 10.5534, -20.2449, 0.45 ) }
    dend_25 { pt3dadd( 45.277, 10.8587, -21.161, 1.36 ) }
    dend_25 { pt3dadd( 46.4871, 11.2125, -22.0098, 0.45 ) }
    dend_25 { pt3dadd( 48.1188, 11.7562, -23.0726, 0.45 ) }
    dend_25 { pt3dadd( 49.0641, 12.0915, -23.6442, 0.68 ) }
    dend_25 { pt3dadd( 50.1752, 12.5248, -24.2865, 0.23 ) }
    dend_25 { pt3dadd( 51.5311, 13.0713, -25.0411, 0.23 ) }
    dend_25 { pt3dadd( 52.3517, 13.4012, -25.4763, 1.82 ) }
    dend_25 { pt3dadd( 53.4546, 13.83, -26.0279, 0.45 ) }
    dend_25 { pt3dadd( 54.2307, 14.1203, -26.417, 0.45 ) }
    dend_25 { pt3dadd( 55.1734, 14.4356, -26.9133, 0.45 ) }
    dend_25 { pt3dadd( 56.1776, 14.7388, -27.4515, 0.45 ) }
    dend_25 { pt3dadd( 57.4856, 15.106, -28.1424, 0.45 ) }
    dend_25 { pt3dadd( 58.3234, 15.3403, -28.5709, 0.68 ) }
    dend_25 { pt3dadd( 59.639, 15.6865, -29.2226, 0.45 ) }
    dend_25 { pt3dadd( 61.1857, 16.0875, -29.9493, 1.36 ) }
    dend_25 { pt3dadd( 62.3566, 16.3881, -30.4535, 0.45 ) }
    dend_25 { pt3dadd( 63.5499, 16.7257, -30.9405, 0.45 ) }
    dend_25 { pt3dadd( 64.9382, 17.1555, -31.492, 0.23 ) }
    dend_25 { pt3dadd( 65.8737, 17.4649, -31.8601, 0.68 ) }
    dend_25 { pt3dadd( 67.3988, 18.013, -32.4219, 0.23 ) }
    dend_25 { pt3dadd( 68.1022, 18.2891, -32.6783, 1.36 ) }
    dend_25 { pt3dadd( 70.0655, 19.105, -33.4018, 0.23 ) }
    dend_25 { pt3dadd( 70.527, 19.3249, -33.5701, 0.68 ) }
    dend_25 { pt3dadd( 71.2858, 19.7288, -33.8267, 0.23 ) }
    dend_25 { pt3dadd( 71.8019, 20.0378, -33.9938, 0.68 ) }
    dend_25 { pt3dadd( 72.7085, 20.6291, -34.2975, 0.23 ) }
    dend_25 { pt3dadd( 73.4206, 21.1128, -34.5547, 1.14 ) }
    dend_25 { pt3dadd( 75.1076, 22.1866, -35.1892, 0.23 ) }
    dend_25 { pt3dadd( 75.5312, 22.4245, -35.3655, 1.14 ) }
    dend_25 { pt3dadd( 76.7078, 23.0384, -35.9113, 0.23 ) }
    dend_25 { pt3dadd( 78.351, 23.7963, -36.7059, 0.23 ) }
    dend_25 { pt3dadd( 79.1749, 24.1328, -37.1209, 0.68 ) }
    dend_25 { pt3dadd( 81.1149, 24.8509, -38.1329, 0.23 ) }
    dend_25 { pt3dadd( 82.9423, 25.4176, -39.1122, 0.23 ) }
    dend_25 { pt3dadd( 83.6663, 25.6092, -39.4962, 1.14 ) }
    dend_25 { pt3dadd( 85.2728, 25.9418, -40.3285, 0.45 ) }
    dend_25 { pt3dadd( 85.951, 26.0593, -40.6787, 0.45 ) }
    dend_25 { pt3dadd( 86.4, 26.1357, -40.915, 0.68 ) }
    dend_25 { pt3dadd( 87.3377, 26.3051, -41.4463, 0.23 ) }
    dend_25 { pt3dadd( 88.8737, 26.6162, -42.4156, 0.23 ) }
    dend_25 { pt3dadd( 89.0757, 26.6622, -42.5712, 0.68 ) }
    dend_25 { pt3dadd( 90.0757, 26.943, -43.5593, 0.23 ) }
    dend_25 { pt3dadd( 90.7117, 27.1406, -44.3118, 0.68 ) }
    dend_25 { pt3dadd( 91.3496, 27.3504, -45.1649, 0.23 ) }
    dend_25 { pt3dadd( 92.2087, 27.6852, -46.4459, 0.23 ) }
    dend_25 { pt3dadd( 93.0295, 28.0039, -47.7737, 0.68 ) }
    dend_25 { pt3dadd( 93.5571, 28.2039, -48.6426, 0.68 ) }
    dend_25 { pt3dadd( 94.1889, 28.4299, -49.6711, 0.68 ) }
    dend_25 { pt3dadd( 95.1678, 28.7745, -51.1725, 0.23 ) }
    dend_25 { pt3dadd( 95.9804, 29.0533, -52.2986, 0.45 ) }
    dend_25 { pt3dadd( 96.9831, 29.3811, -53.5323, 0.23 ) }
    dend_25 { pt3dadd( 97.697, 29.5975, -54.3116, 0.91 ) }
    dend_25 { pt3dadd( 98.7556, 29.9151, -55.4037, 0.23 ) }
    dend_25 { pt3dadd( 99.2127, 30.0609, -55.8635, 0.45 ) }
    dend_25 { pt3dadd( 100.249, 30.409, -56.9294, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_25 { pt3dadd( 100.458, 30.4874, -57.1555, 1.14 ) }
    dend_25 { pt3dadd( 101.381, 30.9255, -58.2627, 0.23 ) }
    dend_25 { pt3dadd( 102.074, 31.3078, -59.2919, 0.23 ) }
    dend_25 { pt3dadd( 102.607, 31.6373, -60.1937, 1.59 ) }
    dend_25 { pt3dadd( 103.394, 32.1513, -61.6522, 0.23 ) }
    dend_25 { pt3dadd( 104.234, 32.7161, -63.278, 0.23 ) }
    dend_25 { pt3dadd( 104.866, 33.1806, -64.5679, 1.36 ) }
    dend_25 { pt3dadd( 106.135, 34.2444, -67.3213, 0.23 ) }
    dend_25 { pt3dadd( 106.841, 34.8518, -68.8931, 0.23 ) }
    dend_25 { pt3dadd( 107.295, 35.2464, -69.9319, 0.23 ) }
    dend_25 { pt3dadd( 107.469, 35.4015, -70.3467, 0.68 ) }
    dend_25 { pt3dadd( 108.261, 36.063, -72.1519, 0.23 ) }
    dend_25 { pt3dadd( 108.886, 36.5737, -73.492, 0.23 ) }
    // Section: dend_23, id: dend_23, parent: dend_21 (entry count 13/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( -5.76863, -19.8682, -7.76081, 0.68 ) }
    dend_23 { pt3dadd( -7.06449, -19.4281, -9.38391, 0.68 ) }
    dend_23 { pt3dadd( -8.01032, -19.2406, -10.6883, 0.68 ) }
    dend_23 { pt3dadd( -8.91705, -19.1733, -12.0913, 0.91 ) }
    dend_23 { pt3dadd( -9.66077, -19.2194, -13.4834, 0.91 ) }
    dend_23 { pt3dadd( -10.2592, -19.393, -14.9131, 0.68 ) }
    dend_23 { pt3dadd( -10.7542, -19.6851, -16.3966, 0.45 ) }
    dend_23 { pt3dadd( -11.0415, -20.1717, -17.7053, 0.45 ) }
    dend_23 { pt3dadd( -11.2931, -20.7352, -18.832, 0.68 ) }
    dend_23 { pt3dadd( -11.6062, -21.4563, -20.0679, 0.68 ) }
    dend_23 { pt3dadd( -11.9445, -22.2263, -21.2741, 0.68 ) }
    dend_23 { pt3dadd( -12.2953, -22.8982, -22.3548, 0.68 ) }
    dend_23 { pt3dadd( -12.8338, -23.6923, -23.5929, 0.68 ) }
    dend_23 { pt3dadd( -13.6085, -24.6445, -25.0332, 0.68 ) }
    dend_23 { pt3dadd( -14.2096, -25.3765, -26.0366, 0.68 ) }
    dend_23 { pt3dadd( -14.9625, -26.4009, -27.2847, 0.68 ) }
    dend_23 { pt3dadd( -15.6266, -27.4347, -28.5032, 0.68 ) }
    dend_23 { pt3dadd( -16.266, -28.6085, -29.9117, 0.91 ) }
    dend_23 { pt3dadd( -16.7871, -29.7865, -31.4007, 0.68 ) }
    dend_23 { pt3dadd( -17.1613, -30.7096, -32.5778, 0.68 ) }
    dend_23 { pt3dadd( -17.7572, -32.1229, -34.3814, 0.68 ) }
    dend_23 { pt3dadd( -18.3078, -33.301, -35.9456, 0.68 ) }
    dend_23 { pt3dadd( -18.774, -34.2611, -37.2574, 0.68 ) }
    dend_23 { pt3dadd( -19.6352, -35.9417, -39.6989, 0.45 ) }
    dend_23 { pt3dadd( -20.1068, -36.7725, -40.9587, 0.45 ) }
    dend_23 { pt3dadd( -20.7112, -37.7229, -42.4726, 0.45 ) }
    dend_23 { pt3dadd( -21.1425, -38.3351, -43.4851, 0.45 ) }
    dend_23 { pt3dadd( -21.6252, -38.9558, -44.5636, 2.05 ) }
    dend_23 { pt3dadd( -22.4009, -39.9428, -46.3134, 0.45 ) }
    dend_23 { pt3dadd( -23.1842, -40.8946, -48.0209, 0.45 ) }
    dend_23 { pt3dadd( -23.7319, -41.5575, -49.2305, 0.91 ) }
    dend_23 { pt3dadd( -24.5242, -42.4988, -50.9217, 0.45 ) }
    dend_23 { pt3dadd( -25.3031, -43.4243, -52.5078, 0.45 ) }
    dend_23 { pt3dadd( -26.146, -44.4259, -54.1541, 1.82 ) }
    dend_23 { pt3dadd( -27.1389, -45.6414, -56.0564, 0.45 ) }
    dend_23 { pt3dadd( -27.6408, -46.283, -57.0359, 0.45 ) }
    dend_23 { pt3dadd( -27.7514, -46.4307, -57.2566, 0.68 ) }
    dend_23 { pt3dadd( -28.6373, -47.6678, -59.0544, 0.45 ) }
    dend_23 { pt3dadd( -29.4133, -48.7118, -60.6076, 0.45 ) }
    dend_23 { pt3dadd( -30.183, -49.6867, -62.1892, 0.68 ) }
    dend_23 { pt3dadd( -30.9874, -50.6969, -63.9386, 0.45 ) }
    dend_23 { pt3dadd( -31.6449, -51.4874, -65.3784, 0.45 ) }
    dend_23 { pt3dadd( -32.2251, -52.1603, -66.6844, 2.05 ) }
    dend_23 { pt3dadd( -33.1235, -53.1593, -68.674, 0.45 ) }
    dend_23 { pt3dadd( -34.0097, -54.1133, -70.557, 0.45 ) }
    dend_23 { pt3dadd( -34.8193, -54.9827, -72.1795, 0.45 ) }
    dend_23 { pt3dadd( -35.7301, -55.9971, -73.8933, 0.45 ) }
    dend_23 { pt3dadd( -36.3124, -56.6729, -74.9678, 0.45 ) }
    dend_23 { pt3dadd( -36.772, -57.2336, -75.8061, 1.14 ) }
    dend_23 { pt3dadd( -37.5874, -58.3243, -77.2512, 0.45 ) }
    dend_23 { pt3dadd( -38.4542, -59.5183, -78.6503, 0.45 ) }
    dend_23 { pt3dadd( -39.024, -60.333, -79.5492, 0.91 ) }
    dend_23 { pt3dadd( -39.5874, -61.1553, -80.4308, 0.45 ) }
    dend_23 { pt3dadd( -40.1619, -61.9971, -81.3143, 0.45 ) }
    dend_23 { pt3dadd( -40.5827, -62.5979, -81.9968, 0.91 ) }
    dend_23 { pt3dadd( -41.3572, -63.7023, -83.2831, 0.45 ) }
    dend_23 { pt3dadd( -42.0407, -64.6928, -84.4749, 0.45 ) }
    dend_23 { pt3dadd( -42.5623, -65.4725, -85.4407, 0.45 ) }
    dend_23 { pt3dadd( -42.9427, -66.0506, -86.1705, 0.91 ) }
    dend_23 { pt3dadd( -43.8598, -67.4808, -88.0489, 0.45 ) }
    dend_23 { pt3dadd( -44.3589, -68.2992, -89.1905, 0.45 ) }
    dend_23 { pt3dadd( -44.8378, -69.13, -90.3615, 0.45 ) }
    dend_23 { pt3dadd( -45.2718, -69.8945, -91.4237, 0.45 ) }
    dend_23 { pt3dadd( -45.8673, -70.9102, -92.8743, 0.45 ) }
    dend_23 { pt3dadd( -46.2928, -71.6023, -93.8787, 0.45 ) }
    dend_23 { pt3dadd( -46.9428, -72.6628, -95.2967, 0.45 ) }
    dend_23 { pt3dadd( -47.3648, -73.3066, -96.1293, 0.45 ) }
    dend_23 { pt3dadd( -48.0398, -74.368, -97.4587, 0.45 ) }
    dend_23 { pt3dadd( -48.451, -75.041, -98.2796, 0.45 ) }
    dend_23 { pt3dadd( -49.0687, -76.061, -99.5459, 0.45 ) }
    dend_23 { pt3dadd( -49.6611, -76.972, -100.796, 1.36 ) }
    dend_23 { pt3dadd( -50.3835, -77.916, -102.309, 1.36 ) }
    dend_23 { pt3dadd( -51.0968, -78.6865, -103.864, 0.68 ) }
    dend_23 { pt3dadd( -51.7478, -79.2159, -105.261, 0.68 ) }
    dend_23 { pt3dadd( -52.4524, -79.5674, -106.682, 0.68 ) }
    dend_23 { pt3dadd( -53.376, -79.7081, -108.373, 0.68 ) }
    dend_23 { pt3dadd( -54.3806, -79.5913, -110.078, 0.45 ) }
    dend_23 { pt3dadd( -55.3441, -79.3139, -111.582, 0.45 ) }
    dend_23 { pt3dadd( -56.1996, -78.987, -112.805, 0.45 ) }
    dend_23 { pt3dadd( -57.4386, -78.4573, -114.459, 0.45 ) }
    dend_23 { pt3dadd( -58.9734, -77.8082, -116.387, 0.45 ) }
    dend_23 { pt3dadd( -60.1779, -77.3226, -117.876, 0.45 ) }
    dend_23 { pt3dadd( -60.9903, -77.0268, -118.898, 0.45 ) }
    dend_23 { pt3dadd( -61.9167, -76.7592, -120.168, 0.45 ) }
    dend_23 { pt3dadd( -62.7343, -76.6267, -121.4, 0.45 ) }
    dend_23 { pt3dadd( -63.5919, -76.6615, -122.9, 0.45 ) }
    dend_23 { pt3dadd( -64.6418, -76.9506, -125.056, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_23 { pt3dadd( -65.1165, -77.1787, -126.156, 0.23 ) }
    dend_23 { pt3dadd( -65.9122, -77.6496, -128.19, 0.23 ) }
    dend_23 { pt3dadd( -66.4505, -77.9785, -129.598, 0.91 ) }
    dend_23 { pt3dadd( -67.4927, -78.4076, -131.96, 0.45 ) }
    dend_23 { pt3dadd( -68.1204, -78.5014, -133.094, 0.45 ) }
    dend_23 { pt3dadd( -69.502, -78.3643, -135.144, 0.45 ) }
    dend_23 { pt3dadd( -70.2689, -78.1098, -136.165, 0.45 ) }
    dend_23 { pt3dadd( -71.3605, -77.5603, -137.563, 0.45 ) }
    dend_23 { pt3dadd( -73.4146, -76.2064, -140.312, 0.23 ) }
    dend_23 { pt3dadd( -74.7937, -75.1386, -142.369, 0.23 ) }
    dend_23 { pt3dadd( -75.9665, -74.0323, -144.621, 0.91 ) }
    dend_23 { pt3dadd( -76.7546, -73.0902, -146.957, 0.23 ) }
    dend_23 { pt3dadd( -77.1337, -72.4429, -149.277, 0.23 ) }
    dend_23 { pt3dadd( -77.162, -72.1012, -151.197, 0.68 ) }
    dend_23 { pt3dadd( -76.825, -71.9075, -154.162, 0.45 ) }
    dend_23 { pt3dadd( -76.3071, -71.8915, -157.129, 0.45 ) }
    dend_23 { pt3dadd( -75.5202, -72.09, -160.631, 0.45 ) }
    dend_23 { pt3dadd( -74.7145, -72.4539, -163.682, 0.45 ) }
    dend_23 { pt3dadd( -74.3537, -72.6419, -164.883, 0.45 ) }
    dend_23 { pt3dadd( -73.748, -73.0066, -166.76, 0.45 ) }
    // Section: dend_22, id: dend_22, parent: dend_21 (entry count 20/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( -5.76863, -19.8682, -7.76081, 0.91 ) }
    dend_22 { pt3dadd( -5.99361, -20.3522, -8.37526, 0.91 ) }
    dend_22 { pt3dadd( -6.22608, -21.1872, -9.229, 0.68 ) }
    dend_22 { pt3dadd( -6.35231, -21.9276, -9.79972, 0.68 ) }
    dend_22 { pt3dadd( -6.41539, -22.6675, -10.2251, 0.68 ) }
    dend_22 { pt3dadd( -6.38688, -23.6534, -10.6126, 0.68 ) }
    dend_22 { pt3dadd( -6.20974, -25.004, -10.8881, 0.68 ) }
    dend_22 { pt3dadd( -6.05152, -26.0905, -10.9557, 0.68 ) }
    dend_22 { pt3dadd( -5.92862, -27.3177, -10.959, 0.68 ) }
    dend_22 { pt3dadd( -5.90361, -28.0378, -10.9676, 1.14 ) }
    dend_22 { pt3dadd( -5.92964, -29.379, -11.037, 1.14 ) }
    dend_22 { pt3dadd( -6.13217, -31.4242, -11.2656, 0.68 ) }
    dend_22 { pt3dadd( -6.44267, -32.9972, -11.542, 0.91 ) }
    dend_22 { pt3dadd( -6.99706, -34.8387, -12.0518, 0.91 ) }
    dend_22 { pt3dadd( -7.65188, -36.6028, -12.6783, 0.91 ) }
    dend_22 { pt3dadd( -8.14173, -37.7048, -13.1352, 0.91 ) }
    dend_22 { pt3dadd( -8.71821, -38.8311, -13.685, 1.14 ) }
    dend_22 { pt3dadd( -9.56984, -40.3467, -14.5609, 1.36 ) }
    dend_22 { pt3dadd( -10.525, -42.0185, -15.5835, 1.36 ) }
    dend_22 { pt3dadd( -11.1254, -43.0026, -16.2237, 1.36 ) }
    dend_22 { pt3dadd( -12.2093, -44.6536, -17.3205, 1.36 ) }
    dend_22 { pt3dadd( -13.286, -46.2487, -18.343, 1.36 ) }
    dend_22 { pt3dadd( -13.9119, -47.212, -18.9212, 1.14 ) }
    dend_22 { pt3dadd( -14.4695, -48.1509, -19.4468, 0.68 ) }
    dend_22 { pt3dadd( -14.851, -48.8771, -19.7871, 0.68 ) }
    dend_22 { pt3dadd( -15.1139, -49.3907, -19.9831, 0.68 ) }
    dend_22 { pt3dadd( -15.6523, -50.4462, -20.2314, 0.68 ) }
    dend_22 { pt3dadd( -16.337, -51.6971, -20.3947, 0.68 ) }
    dend_22 { pt3dadd( -17.0523, -52.9373, -20.5337, 0.68 ) }
    dend_22 { pt3dadd( -17.3463, -53.4632, -20.6112, 0.68 ) }
    dend_22 { pt3dadd( -18.0612, -54.7349, -20.8324, 0.68 ) }
    dend_22 { pt3dadd( -19.05, -56.35, -21.1565, 0.91 ) }
    dend_22 { pt3dadd( -19.9859, -57.7476, -21.496, 0.91 ) }
    dend_22 { pt3dadd( -20.565, -58.5787, -21.7449, 0.68 ) }
    dend_22 { pt3dadd( -21.2869, -59.6583, -22.1327, 0.68 ) }
    dend_22 { pt3dadd( -21.9392, -60.793, -22.5808, 0.68 ) }
    dend_22 { pt3dadd( -22.5215, -62.0329, -23.1403, 1.14 ) }
    dend_22 { pt3dadd( -22.7737, -62.6445, -23.4611, 0.45 ) }
    dend_22 { pt3dadd( -23.0502, -63.3979, -23.8431, 0.45 ) }
    dend_22 { pt3dadd( -23.3164, -64.1794, -24.2165, 0.45 ) }
    dend_22 { pt3dadd( -23.6457, -65.1512, -24.6488, 0.91 ) }
    dend_22 { pt3dadd( -23.9265, -66.0821, -25.0505, 0.45 ) }
    dend_22 { pt3dadd( -24.2755, -67.2976, -25.535, 0.45 ) }
    dend_22 { pt3dadd( -24.8, -69.0812, -26.1403, 0.68 ) }
    dend_22 { pt3dadd( -25.2073, -70.5512, -26.5538, 0.45 ) }
    dend_22 { pt3dadd( -25.4029, -71.3175, -26.7381, 1.59 ) }
    dend_22 { pt3dadd( -25.6524, -72.4219, -26.9753, 1.59 ) }
    dend_22 { pt3dadd( -26.0469, -74.4232, -27.3414, 0.23 ) }
    dend_22 { pt3dadd( -26.2998, -75.8741, -27.5889, 1.36 ) }
    dend_22 { pt3dadd( -26.8221, -79.0102, -28.1002, 0.23 ) }
    dend_22 { pt3dadd( -27.0582, -80.4671, -28.3185, 1.36 ) }
    dend_22 { pt3dadd( -27.251, -81.6723, -28.5006, 0.23 ) }
    dend_22 { pt3dadd( -27.4496, -82.8411, -28.6846, 1.36 ) }
    dend_22 { pt3dadd( -27.7369, -84.2987, -28.9588, 0.23 ) }
    dend_22 { pt3dadd( -27.9158, -85.0008, -29.1217, 0.68 ) }
    dend_22 { pt3dadd( -28.4699, -86.6691, -29.5705, 0.23 ) }
    dend_22 { pt3dadd( -28.8692, -87.6751, -29.8662, 0.23 ) }
    dend_22 { pt3dadd( -29.4759, -88.9934, -30.2604, 0.91 ) }
    dend_22 { pt3dadd( -30.0307, -90.0691, -30.5928, 0.23 ) }
    dend_22 { pt3dadd( -30.5991, -91.1151, -30.9155, 0.68 ) }
    dend_22 { pt3dadd( -31.5606, -92.8627, -31.4403, 0.23 ) }
    dend_22 { pt3dadd( -31.999, -93.6625, -31.6754, 0.23 ) }
    dend_22 { pt3dadd( -32.4065, -94.4433, -31.9016, 1.59 ) }
    dend_22 { pt3dadd( -33.0262, -95.7178, -32.2865, 0.23 ) }
    dend_22 { pt3dadd( -34.0184, -97.8541, -32.9905, 0.23 ) }
    dend_22 { pt3dadd( -34.3334, -98.5526, -33.2418, 1.82 ) }
    dend_22 { pt3dadd( -34.7985, -99.5641, -33.6344, 1.82 ) }
    dend_22 { pt3dadd( -35.6883, -101.452, -34.3978, 0.23 ) }
    dend_22 { pt3dadd( -36.1978, -102.494, -34.8289, 0.23 ) }
    dend_22 { pt3dadd( -36.7472, -103.532, -35.2532, 0.23 ) }
    dend_22 { pt3dadd( -37.3916, -104.613, -35.6806, 0.68 ) }
    dend_22 { pt3dadd( -38.166, -105.758, -36.1407, 0.23 ) }
    dend_22 { pt3dadd( -38.8416, -106.637, -36.4831, 0.23 ) }
    dend_22 { pt3dadd( -39.2231, -107.082, -36.6436, 0.68 ) }
    dend_22 { pt3dadd( -40.3553, -108.271, -37.089, 0.23 ) }
    dend_22 { pt3dadd( -41.27, -109.142, -37.4569, 1.36 ) }
    dend_22 { pt3dadd( -42.5014, -110.226, -37.9563, 0.23 ) }
    dend_22 { pt3dadd( -42.7775, -110.453, -38.0696, 0.23 ) }
    dend_22 { pt3dadd( -43.5862, -111.095, -38.4101, 0.91 ) }
    dend_22 { pt3dadd( -44.892, -112.077, -39.0034, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_22 { pt3dadd( -45.8166, -112.721, -39.4688, 0.91 ) }
    // Section: dend_18, id: dend_18, parent: dend_14 (entry count 1/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -4.94325, -26.577, 5.09956, 1.36 ) }
    dend_18 { pt3dadd( -3.96498, -29.0729, 4.19796, 1.36 ) }
    dend_18 { pt3dadd( -3.00542, -31.8754, 3.19749, 1.14 ) }
    dend_18 { pt3dadd( -2.23499, -34.1255, 2.39421, 1.14 ) }
    dend_18 { pt3dadd( -1.60183, -35.9747, 1.73405, 1.14 ) }
    dend_18 { pt3dadd( -0.702443, -38.6014, 0.796317, 1.14 ) }
    dend_18 { pt3dadd( 0.19884, -41.2337, -0.143395, 1.36 ) }
    dend_18 { pt3dadd( 1.05135, -43.4859, -0.858662, 1.59 ) }
    // Section: dend_15, id: dend_15, parent: dend_14 (entry count 9/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -4.94325, -26.577, 5.09956, 0.68 ) }
    dend_15 { pt3dadd( -4.00429, -28.0667, 5.7816, 0.68 ) }
    dend_15 { pt3dadd( -2.95676, -29.9172, 6.63591, 0.68 ) }
    dend_15 { pt3dadd( -2.02021, -31.9943, 7.70089, 0.68 ) }
    dend_15 { pt3dadd( -1.28366, -33.8958, 8.81722, 0.68 ) }
    dend_15 { pt3dadd( -0.704548, -35.5021, 9.90747, 0.91 ) }
    dend_15 { pt3dadd( -0.253679, -37.016, 11.0749, 0.91 ) }
    dend_15 { pt3dadd( -0.0149827, -38.1079, 12.0624, 0.91 ) }
    dend_15 { pt3dadd( -0.0893341, -39.716, 14.0128, 0.91 ) }
    dend_15 { pt3dadd( -0.441571, -40.6418, 15.4647, 0.68 ) }
    dend_15 { pt3dadd( -0.81121, -41.3507, 16.642, 0.68 ) }
    dend_15 { pt3dadd( -1.4281, -42.5546, 18.4171, 0.68 ) }
    dend_15 { pt3dadd( -1.94491, -43.8067, 19.9321, 0.68 ) }
    dend_15 { pt3dadd( -2.34147, -45.1838, 21.2283, 0.68 ) }
    dend_15 { pt3dadd( -2.67243, -46.7045, 22.3562, 0.68 ) }
    dend_15 { pt3dadd( -3.2046, -49.1505, 23.9006, 0.68 ) }
    dend_15 { pt3dadd( -3.64115, -51.1732, 25.022, 0.68 ) }
    dend_15 { pt3dadd( -3.83319, -52.2623, 25.5405, 0.68 ) }
    dend_15 { pt3dadd( -3.99814, -53.4473, 26.0065, 0.68 ) }
    dend_15 { pt3dadd( -4.13979, -55.1298, 26.5937, 0.68 ) }
    dend_15 { pt3dadd( -4.36811, -57.0336, 27.2486, 0.68 ) }
    // Section: dend_13, id: dend_13, parent: dend_7 (entry count 30/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -36.7059, 20.7214, 21.7964, 0.68 ) }
    dend_13 { pt3dadd( -35.5735, 23.4107, 23.1474, 0.68 ) }
    dend_13 { pt3dadd( -34.8443, 25.8376, 24.3157, 0.68 ) }
    dend_13 { pt3dadd( -34.5778, 26.8986, 24.7473, 0.68 ) }
    dend_13 { pt3dadd( -33.9288, 29.4417, 25.6859, 0.45 ) }
    dend_13 { pt3dadd( -33.4626, 31.2683, 26.3602, 0.45 ) }
    dend_13 { pt3dadd( -33.1043, 32.6722, 26.8783, 0.45 ) }
    dend_13 { pt3dadd( -32.4557, 34.9255, 27.511, 0.45 ) }
    dend_13 { pt3dadd( -31.8393, 36.5602, 28.007, 0.45 ) }
    dend_13 { pt3dadd( -31.224, 38.779, 28.7374, 0.45 ) }
    dend_13 { pt3dadd( -25.0445, 50.089, 32.7718, 0.45 ) }
    dend_13 { pt3dadd( -17.1664, 58.9488, 38.8826, 0.45 ) }
    dend_13 { pt3dadd( -11.3406, 70.3137, 43.2797, 0.45 ) }
    dend_13 { pt3dadd( -3.97869, 81.4441, 45.3648, 0.45 ) }
    dend_13 { pt3dadd( 1.85338, 93.2804, 48.4638, 0.45 ) }
    dend_13 { pt3dadd( 7.72812, 105.214, 51.1304, 0.45 ) }
    dend_13 { pt3dadd( 15.396, 115.75, 54.4746, 0.45 ) }
    dend_13 { pt3dadd( 21.1893, 127.603, 57.5891, 0.45 ) }
    dend_13 { pt3dadd( 27.7667, 139.491, 57.8051, 0.45 ) }
    dend_13 { pt3dadd( 34.2491, 151.313, 59.3237, 0.45 ) }
    dend_13 { pt3dadd( 41.4045, 162.426, 62.0686, 0.45 ) }
    dend_13 { pt3dadd( 49.317, 173.334, 62.9219, 0.45 ) }
    dend_13 { pt3dadd( 59.4151, 181.868, 64.7457, 0.45 ) }
    dend_13 { pt3dadd( 70.2216, 188.978, 67.7316, 0.45 ) }
    dend_13 { pt3dadd( 81.433, 195.701, 69.9871, 0.45 ) }
    dend_13 { pt3dadd( 93.176, 200.892, 73.1261, 0.45 ) }
    dend_13 { pt3dadd( 105.548, 204.414, 76.0435, 0.45 ) }
    dend_13 { pt3dadd( 117.51, 208.166, 80.1493, 0.45 ) }
    dend_13 { pt3dadd( 130.069, 211.246, 82.7334, 0.45 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 59/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -36.7059, 20.7214, 21.7964, 0.68 ) }
    dend_8 { pt3dadd( -38.4604, 20.9319, 22.1602, 0.68 ) }
    dend_8 { pt3dadd( -39.944, 21.1459, 22.431, 0.68 ) }
    dend_8 { pt3dadd( -41.3658, 21.3368, 22.6917, 0.68 ) }
    dend_8 { pt3dadd( -42.7338, 21.5023, 22.9184, 0.68 ) }
    dend_8 { pt3dadd( -43.7151, 21.6211, 23.0809, 0.68 ) }
    dend_8 { pt3dadd( -45.5571, 21.844, 23.3861, 0.68 ) }
    dend_8 { pt3dadd( -46.807, 21.9839, 23.5314, 0.68 ) }
    dend_8 { pt3dadd( -48.0876, 22.1436, 23.64, 0.68 ) }
    dend_8 { pt3dadd( -49.6321, 22.3949, 23.7536, 0.68 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 69/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 3.8655, 19.7005, 2.95165, 1.59 ) }
    dend_2 { pt3dadd( 2.84327, 22.7523, 1.68138, 1.59 ) }
    dend_2 { pt3dadd( 1.60924, 26.0026, 0.152089, 1.59 ) }
    dend_2 { pt3dadd( 0.582116, 28.7078, -1.12078, 1.59 ) }
    dend_2 { pt3dadd( -0.243517, 30.8824, -2.14395, 1.59 ) }
    dend_2 { pt3dadd( -1.09259, 33.1187, -3.19617, 1.59 ) }
    dend_2 { pt3dadd( -1.77363, 34.9124, -4.04016, 1.59 ) }
    dend_2 { pt3dadd( -1.80976, 34.977, -4.08351, 1.59 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 77/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 3.8655, 19.7005, 2.95165, 1.14 ) }
    dend_1 { pt3dadd( 4.4122, 20.7451, 2.7057, 1.14 ) }
    dend_1 { pt3dadd( 5.14983, 22.3417, 2.36121, 1.14 ) }
    dend_1 { pt3dadd( 5.68002, 23.4069, 2.11234, 1.14 ) }
    dend_1 { pt3dadd( 6.57484, 25.0359, 1.69178, 0.91 ) }
    dend_1 { pt3dadd( 7.27719, 26.2391, 1.36639, 0.91 ) }
    dend_1 { pt3dadd( 7.93034, 27.3319, 1.0697, 0.91 ) }
    dend_1 { pt3dadd( 8.72861, 28.7889, 0.673452, 0.91 ) }
    dend_1 { pt3dadd( 9.73919, 30.8032, 0.135556, 0.91 ) }
    dend_1 { pt3dadd( 10.3721, 32.0636, -0.194461, 0.91 ) }
    dend_1 { pt3dadd( 10.7695, 32.8308, -0.396662, 0.68 ) }
    dend_1 { pt3dadd( 11.2626, 33.8205, -0.668648, 0.68 ) }
    dend_1 { pt3dadd( 11.9368, 35.324, -1.13592, 0.91 ) }
    dend_1 { pt3dadd( 12.467, 36.5939, -1.57255, 0.91 ) }
    dend_1 { pt3dadd( 12.9838, 37.9352, -2.01427, 0.91 ) }
    dend_1 { pt3dadd( 13.4362, 39.0164, -2.34919, 0.91 ) }
    dend_1 { pt3dadd( 13.8861, 39.8972, -2.59357, 0.68 ) }
    dend_1 { pt3dadd( 14.6538, 41.0349, -2.81305, 0.68 ) }
    dend_1 { pt3dadd( 15.2421, 41.714, -2.83694, 0.68 ) }
    dend_1 { pt3dadd( 16.0638, 42.5957, -2.7461, 0.68 ) }
    dend_1 { pt3dadd( 16.8517, 43.4911, -2.56445, 0.68 ) }
    dend_1 { pt3dadd( 17.5254, 44.3711, -2.3885, 0.68 ) }
    dend_1 { pt3dadd( 18.3687, 45.6084, -2.21375, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_1 { pt3dadd( 19.3248, 47.1898, -2.14471, 0.68 ) }
    dend_1 { pt3dadd( 19.9305, 48.3604, -2.24523, 0.68 ) }
    dend_1 { pt3dadd( 20.5521, 49.7766, -2.55683, 0.68 ) }
    dend_1 { pt3dadd( 21.1807, 51.4123, -3.1197, 0.68 ) }
    dend_1 { pt3dadd( 21.5979, 52.6135, -3.66418, 0.68 ) }
    dend_1 { pt3dadd( 21.964, 53.7709, -4.30476, 0.91 ) }
    dend_1 { pt3dadd( 22.2527, 54.7953, -4.95674, 0.68 ) }
    dend_1 { pt3dadd( 22.4724, 55.6984, -5.57684, 0.68 ) }
    dend_1 { pt3dadd( 22.6763, 56.6998, -6.30391, 0.68 ) }
    dend_1 { pt3dadd( 22.9295, 58.1632, -7.33614, 0.68 ) }
    dend_1 { pt3dadd( 23.0856, 59.4525, -8.15652, 0.68 ) }
    dend_1 { pt3dadd( 23.1984, 60.4457, -8.71553, 0.68 ) }
    dend_1 { pt3dadd( 23.3479, 61.5951, -9.28638, 0.68 ) }
    dend_1 { pt3dadd( 23.4905, 62.5125, -9.71393, 0.68 ) }
    dend_1 { pt3dadd( 23.6563, 63.4772, -10.1557, 1.14 ) }
    dend_1 { pt3dadd( 23.9194, 64.8266, -10.7688, 0.68 ) }
    dend_1 { pt3dadd( 24.2839, 66.3394, -11.3891, 0.68 ) }
    dend_1 { pt3dadd( 24.6087, 67.4492, -11.8116, 0.68 ) }
    dend_1 { pt3dadd( 24.9256, 68.4054, -12.1627, 0.68 ) }
    dend_1 { pt3dadd( 25.1287, 69.002, -12.3947, 1.36 ) }
    dend_1 { pt3dadd( 25.2442, 69.3562, -12.5572, 2.05 ) }
    dend_1 { pt3dadd( 25.7286, 70.9382, -13.3304, 0.45 ) }
    dend_1 { pt3dadd( 26.0672, 72.2939, -14.0296, 0.45 ) }
    dend_1 { pt3dadd( 26.1959, 72.9338, -14.3658, 0.91 ) }
    dend_1 { pt3dadd( 26.4069, 74.0732, -14.9443, 0.68 ) }
    dend_1 { pt3dadd( 26.6113, 75.2421, -15.5351, 0.68 ) }
    dend_1 { pt3dadd( 26.7444, 75.9721, -15.9205, 0.45 ) }
    dend_1 { pt3dadd( 26.9168, 76.8487, -16.4028, 0.45 ) }
    dend_1 { pt3dadd( 27.1307, 77.9392, -16.9919, 0.45 ) }
    dend_1 { pt3dadd( 27.3261, 78.8504, -17.4667, 0.91 ) }
    dend_1 { pt3dadd( 27.7365, 80.4685, -18.2455, 0.23 ) }
    dend_1 { pt3dadd( 28.0726, 81.5926, -18.7627, 0.23 ) }
    dend_1 { pt3dadd( 28.2936, 82.2639, -19.0883, 1.59 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 33/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 5.49327, 40.1786, 0.0, 0.68 ) }
    axon_1 { pt3dadd( 7.52114, 55.0409, 0.0, 0.68 ) }
    axon_1 { pt3dadd( 9.54902, 69.9032, 0.0, 0.68 ) }
    // Section: dend_28, id: dend_28, parent: dend_26 (entry count 36/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 21.7752, 8.84146, 1.19626, 0.68 ) }
    dend_28 { pt3dadd( 22.5461, 9.05838, 1.79927, 0.68 ) }
    dend_28 { pt3dadd( 23.3322, 9.42949, 2.38386, 0.68 ) }
    dend_28 { pt3dadd( 23.8348, 9.80692, 2.75733, 0.68 ) }
    dend_28 { pt3dadd( 24.3673, 10.306, 3.16574, 0.68 ) }
    dend_28 { pt3dadd( 24.9948, 10.9304, 3.65811, 0.68 ) }
    dend_28 { pt3dadd( 25.5543, 11.4861, 4.11238, 0.68 ) }
    dend_28 { pt3dadd( 26.352, 12.2526, 4.77883, 0.68 ) }
    dend_28 { pt3dadd( 27.2654, 13.1131, 5.563, 0.68 ) }
    dend_28 { pt3dadd( 27.9042, 13.6664, 6.08037, 0.68 ) }
    dend_28 { pt3dadd( 28.5205, 14.1299, 6.53005, 0.68 ) }
    dend_28 { pt3dadd( 29.2767, 14.5925, 7.02145, 0.68 ) }
    dend_28 { pt3dadd( 30.1282, 15.0151, 7.53294, 0.68 ) }
    dend_28 { pt3dadd( 31.0265, 15.4056, 8.04264, 0.68 ) }
    dend_28 { pt3dadd( 32.2952, 15.9401, 8.71385, 0.68 ) }
    dend_28 { pt3dadd( 33.2782, 16.3775, 9.20069, 0.68 ) }
    dend_28 { pt3dadd( 34.3792, 16.8848, 9.71515, 0.68 ) }
    dend_28 { pt3dadd( 34.9694, 17.1502, 9.97906, 0.68 ) }
    dend_28 { pt3dadd( 35.7096, 17.4749, 10.3135, 0.68 ) }
    dend_28 { pt3dadd( 36.2787, 17.7145, 10.5952, 0.68 ) }
    dend_28 { pt3dadd( 36.7346, 17.897, 10.8605, 0.68 ) }
    dend_28 { pt3dadd( 37.5593, 18.1708, 11.3493, 0.68 ) }
    dend_28 { pt3dadd( 38.3393, 18.3583, 11.7305, 0.68 ) }
    dend_28 { pt3dadd( 39.5726, 18.6505, 12.1964, 0.68 ) }
    dend_28 { pt3dadd( 40.445, 18.8736, 12.4708, 0.68 ) }
    dend_28 { pt3dadd( 41.6122, 19.2413, 12.8014, 0.68 ) }
    dend_28 { pt3dadd( 42.4986, 19.6206, 13.0439, 0.68 ) }
    dend_28 { pt3dadd( 43.7742, 20.2834, 13.389, 0.68 ) }
    dend_28 { pt3dadd( 45.3431, 21.1477, 13.7964, 0.68 ) }
    dend_28 { pt3dadd( 46.3791, 21.7068, 14.0461, 0.68 ) }
    dend_28 { pt3dadd( 47.3341, 22.2041, 14.2777, 0.45 ) }
    dend_28 { pt3dadd( 48.5569, 22.8538, 14.6253, 0.45 ) }
    dend_28 { pt3dadd( 49.6178, 23.458, 15.0208, 0.68 ) }
    dend_28 { pt3dadd( 50.2519, 23.819, 15.3262, 0.68 ) }
    dend_28 { pt3dadd( 51.3504, 24.3354, 15.9106, 0.45 ) }
    dend_28 { pt3dadd( 52.1423, 24.6741, 16.3302, 0.45 ) }
    dend_28 { pt3dadd( 53.0291, 25.084, 16.8088, 0.45 ) }
    dend_28 { pt3dadd( 54.0368, 25.621, 17.3848, 0.45 ) }
    dend_28 { pt3dadd( 54.752, 26.0934, 17.8187, 0.45 ) }
    dend_28 { pt3dadd( 55.6628, 26.85, 18.424, 0.45 ) }
    dend_28 { pt3dadd( 56.9262, 28.2252, 19.3217, 0.45 ) }
    dend_28 { pt3dadd( 57.6884, 29.397, 19.9261, 0.45 ) }
    dend_28 { pt3dadd( 58.179, 30.4544, 20.3713, 0.23 ) }
    dend_28 { pt3dadd( 58.5724, 31.6155, 20.7755, 0.23 ) }
    dend_28 { pt3dadd( 58.8355, 32.7458, 21.1126, 0.45 ) }
    dend_28 { pt3dadd( 59.1889, 34.9612, 21.6896, 0.45 ) }
    dend_28 { pt3dadd( 59.4072, 37.146, 22.2274, 0.23 ) }
    dend_28 { pt3dadd( 59.5041, 38.3663, 22.5165, 0.23 ) }
    dend_28 { pt3dadd( 59.543, 39.4567, 22.7487, 0.23 ) }
    dend_28 { pt3dadd( 59.5433, 40.3753, 22.9284, 0.23 ) }
    dend_28 { pt3dadd( 59.5918, 41.8329, 23.2021, 0.23 ) }
    dend_28 { pt3dadd( 65.1673, 46.1428, 25.3805, 0.23 ) }
    dend_28 { pt3dadd( 71.0597, 49.9716, 27.542, 0.23 ) }
    dend_28 { pt3dadd( 76.2629, 54.805, 29.6416, 0.23 ) }
    dend_28 { pt3dadd( 82.0061, 59.2514, 30.9732, 0.23 ) }
    dend_28 { pt3dadd( 87.7221, 63.9489, 31.1132, 0.23 ) }
    dend_28 { pt3dadd( 92.9173, 69.2128, 31.8675, 0.23 ) }
    dend_28 { pt3dadd( 97.7248, 74.917, 31.5708, 0.23 ) }
    dend_28 { pt3dadd( 102.497, 80.576, 32.4988, 0.23 ) }
    dend_28 { pt3dadd( 106.882, 86.3849, 34.1845, 0.23 ) }
    dend_28 { pt3dadd( 111.007, 92.1982, 36.4191, 0.23 ) }
    // Section: dend_27, id: dend_27, parent: dend_26 (entry count 97/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( 21.7752, 8.84146, 1.19626, 0.68 ) }
    dend_27 { pt3dadd( 22.5738, 7.88389, 1.86719, 0.68 ) }
    dend_27 { pt3dadd( 23.6194, 6.75768, 2.90959, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_27 { pt3dadd( 24.4188, 5.96599, 3.71112, 0.68 ) }
    dend_27 { pt3dadd( 25.3591, 5.01466, 4.6378, 0.68 ) }
    dend_27 { pt3dadd( 25.7737, 4.61839, 5.02551, 0.45 ) }
    dend_27 { pt3dadd( 26.4389, 4.00949, 5.61392, 0.45 ) }
    dend_27 { pt3dadd( 27.3995, 3.12852, 6.48386, 0.45 ) }
    dend_27 { pt3dadd( 28.3568, 2.26102, 7.33158, 0.68 ) }
    dend_27 { pt3dadd( 29.5576, 1.09082, 8.36962, 0.68 ) }
    dend_27 { pt3dadd( 30.8404, -0.219724, 9.43107, 0.68 ) }
    dend_27 { pt3dadd( 32.6344, -2.06566, 10.8625, 0.68 ) }
    dend_27 { pt3dadd( 33.9203, -3.41394, 11.8715, 0.68 ) }
    dend_27 { pt3dadd( 34.666, -4.22268, 12.5151, 0.45 ) }
    dend_27 { pt3dadd( 35.5576, -5.11961, 13.3549, 0.45 ) }
    dend_27 { pt3dadd( 35.9007, -5.44159, 13.7198, 0.45 ) }
    dend_27 { pt3dadd( 36.6694, -6.10361, 14.6521, 0.45 ) }
    dend_27 { pt3dadd( 37.4397, -6.67113, 15.6904, 0.68 ) }
    dend_27 { pt3dadd( 38.4461, -7.45185, 17.0821, 0.68 ) }
    dend_27 { pt3dadd( 39.5079, -8.43973, 18.4696, 0.45 ) }
    dend_27 { pt3dadd( 40.159, -9.13521, 19.2172, 0.45 ) }
    dend_27 { pt3dadd( 40.9416, -10.0705, 19.9482, 0.68 ) }
    dend_27 { pt3dadd( 41.6258, -10.9182, 20.3857, 0.68 ) }
    dend_27 { pt3dadd( 43.1101, -12.8855, 21.129, 0.23 ) }
    dend_27 { pt3dadd( 44.5414, -14.9029, 21.6262, 0.23 ) }
    dend_27 { pt3dadd( 45.6127, -16.4669, 21.8495, 0.23 ) }
    dend_27 { pt3dadd( 46.7945, -18.1498, 21.9616, 0.23 ) }
    dend_27 { pt3dadd( 48.7341, -20.8684, 21.9633, 0.23 ) }
    dend_27 { pt3dadd( 53.5799, -28.6512, 24.9925, 0.23 ) }
    dend_27 { pt3dadd( 57.7888, -37.0128, 27.4817, 0.23 ) }
    dend_27 { pt3dadd( 62.5189, -45.039, 30.0417, 0.23 ) }
    dend_27 { pt3dadd( 68.16, -52.4485, 32.4161, 0.23 ) }
    dend_27 { pt3dadd( 74.8071, -58.8916, 34.7382, 0.23 ) }
    dend_27 { pt3dadd( 81.2625, -64.9817, 38.2621, 0.23 ) }
    dend_27 { pt3dadd( 86.7201, -71.5114, 42.7053, 0.23 ) }
    dend_27 { pt3dadd( 92.4479, -76.915, 48.1058, 0.23 ) }
    dend_27 { pt3dadd( 96.9254, -82.7947, 54.23, 0.23 ) }
    dend_27 { pt3dadd( 99.9762, -88.7521, 61.1479, 0.23 ) }
    // Section: dend_20, id: dend_20, parent: dend_18 (entry count 35/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 1.05135, -43.4859, -0.858662, 1.36 ) }
    dend_20 { pt3dadd( -0.134086, -44.1315, -1.22289, 1.36 ) }
    dend_20 { pt3dadd( -1.3138, -44.8021, -1.62995, 1.14 ) }
    dend_20 { pt3dadd( -2.31756, -45.3797, -2.01707, 1.14 ) }
    dend_20 { pt3dadd( -3.70388, -46.2289, -2.62047, 0.91 ) }
    dend_20 { pt3dadd( -4.24541, -46.5986, -2.89115, 0.91 ) }
    dend_20 { pt3dadd( -4.94346, -47.1428, -3.29424, 0.91 ) }
    dend_20 { pt3dadd( -5.66492, -47.8222, -3.83558, 0.91 ) }
    dend_20 { pt3dadd( -6.20401, -48.5791, -4.41662, 0.91 ) }
    dend_20 { pt3dadd( -6.58411, -49.2944, -4.94436, 0.91 ) }
    dend_20 { pt3dadd( -6.96711, -50.1574, -5.54337, 0.91 ) }
    dend_20 { pt3dadd( -7.35523, -51.0225, -6.10408, 0.91 ) }
    dend_20 { pt3dadd( -7.77909, -51.8875, -6.63784, 0.91 ) }
    dend_20 { pt3dadd( -8.45772, -53.1643, -7.37734, 0.91 ) }
    dend_20 { pt3dadd( -9.34683, -54.6282, -8.18378, 0.91 ) }
    dend_20 { pt3dadd( -10.0494, -55.617, -8.71307, 1.14 ) }
    dend_20 { pt3dadd( -11.257, -57.0658, -9.45378, 1.36 ) }
    dend_20 { pt3dadd( -12.2757, -58.1405, -9.98468, 1.14 ) }
    dend_20 { pt3dadd( -13.4222, -59.2386, -10.512, 1.14 ) }
    dend_20 { pt3dadd( -14.6057, -60.279, -11.0, 1.36 ) }
    dend_20 { pt3dadd( -15.2612, -60.8384, -11.2656, 1.14 ) }
    dend_20 { pt3dadd( -16.3315, -61.7395, -11.7008, 0.91 ) }
    dend_20 { pt3dadd( -17.0548, -62.3566, -11.9738, 0.91 ) }
    dend_20 { pt3dadd( -17.8388, -63.0944, -12.233, 0.91 ) }
    dend_20 { pt3dadd( -18.4828, -63.8236, -12.4117, 0.91 ) }
    dend_20 { pt3dadd( -19.1074, -64.7327, -12.5475, 0.68 ) }
    dend_20 { pt3dadd( -19.8942, -66.1421, -12.7103, 0.91 ) }
    dend_20 { pt3dadd( -20.3576, -67.1117, -12.8022, 1.14 ) }
    dend_20 { pt3dadd( -20.9224, -68.3994, -12.8713, 1.14 ) }
    dend_20 { pt3dadd( -21.4883, -69.8111, -12.8759, 0.68 ) }
    dend_20 { pt3dadd( -21.912, -70.9513, -12.8539, 0.68 ) }
    dend_20 { pt3dadd( -22.3982, -72.3165, -12.7969, 1.14 ) }
    dend_20 { pt3dadd( -22.7011, -73.1557, -12.7584, 0.68 ) }
    dend_20 { pt3dadd( -23.1605, -74.3959, -12.7257, 0.68 ) }
    dend_20 { pt3dadd( -23.7708, -75.9989, -12.7224, 0.68 ) }
    dend_20 { pt3dadd( -24.5306, -77.9592, -12.7666, 0.68 ) }
    dend_20 { pt3dadd( -24.9895, -79.2025, -12.8278, 1.36 ) }
    dend_20 { pt3dadd( -25.4656, -80.5388, -12.9251, 1.36 ) }
    dend_20 { pt3dadd( -26.0142, -82.1037, -13.1076, 1.14 ) }
    dend_20 { pt3dadd( -26.4455, -83.2375, -13.2939, 0.91 ) }
    dend_20 { pt3dadd( -26.8872, -84.3016, -13.5157, 0.91 ) }
    dend_20 { pt3dadd( -27.4442, -85.5628, -13.8291, 0.91 ) }
    dend_20 { pt3dadd( -27.8164, -86.3616, -14.0623, 1.59 ) }
    dend_20 { pt3dadd( -28.5298, -87.839, -14.5252, 0.91 ) }
    dend_20 { pt3dadd( -29.3611, -89.5071, -15.0422, 1.14 ) }
    dend_20 { pt3dadd( -29.9586, -90.6999, -15.3862, 1.14 ) }
    dend_20 { pt3dadd( -30.7267, -92.2538, -15.7861, 1.82 ) }
    dend_20 { pt3dadd( -31.6988, -94.2468, -16.2268, 1.36 ) }
    dend_20 { pt3dadd( -32.4936, -95.9366, -16.569, 1.36 ) }
    dend_20 { pt3dadd( -32.9758, -97.0356, -16.7759, 1.82 ) }
    dend_20 { pt3dadd( -33.4015, -98.1577, -16.9461, 0.91 ) }
    dend_20 { pt3dadd( -33.7916, -99.2889, -17.0429, 0.45 ) }
    dend_20 { pt3dadd( -34.1088, -100.396, -17.0481, 0.45 ) }
    dend_20 { pt3dadd( -34.2564, -101.124, -16.995, 0.45 ) }
    dend_20 { pt3dadd( -34.4207, -102.272, -16.9013, 0.68 ) }
    dend_20 { pt3dadd( -34.5255, -103.261, -16.8478, 0.45 ) }
    dend_20 { pt3dadd( -34.6044, -104.179, -16.8378, 0.45 ) }
    dend_20 { pt3dadd( -34.6576, -104.734, -16.8651, 0.45 ) }
    dend_20 { pt3dadd( -34.8725, -106.366, -16.9952, 0.45 ) }
    dend_20 { pt3dadd( -35.0805, -107.445, -17.0653, 0.23 ) }
    dend_20 { pt3dadd( -35.1929, -107.86, -17.0779, 0.23 ) }
    dend_20 { pt3dadd( -35.4808, -108.755, -17.0665, 0.23 ) }
    dend_20 { pt3dadd( -35.7002, -109.408, -17.0158, 0.45 ) }
    dend_20 { pt3dadd( -36.043, -110.377, -16.838, 0.23 ) }
    dend_20 { pt3dadd( -36.2221, -110.896, -16.6758, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_20 { pt3dadd( -36.6107, -112.02, -16.2039, 0.23 ) }
    dend_20 { pt3dadd( -36.8407, -112.719, -15.8638, 0.23 ) }
    dend_20 { pt3dadd( -36.9491, -113.065, -15.6773, 0.45 ) }
    dend_20 { pt3dadd( -37.2315, -114.048, -15.1199, 0.23 ) }
    dend_20 { pt3dadd( -37.381, -114.592, -14.8309, 0.45 ) }
    dend_20 { pt3dadd( -37.7293, -115.756, -14.3296, 0.23 ) }
    dend_20 { pt3dadd( -38.0178, -116.615, -14.0503, 0.23 ) }
    dend_20 { pt3dadd( -38.2822, -117.361, -13.8344, 0.45 ) }
    dend_20 { pt3dadd( -38.5938, -118.182, -13.6211, 0.23 ) }
    dend_20 { pt3dadd( -39.0842, -119.386, -13.366, 0.91 ) }
    dend_20 { pt3dadd( -39.8263, -121.15, -13.0953, 0.23 ) }
    dend_20 { pt3dadd( -40.2884, -122.271, -13.0187, 0.91 ) }
    // Section: dend_19, id: dend_19, parent: dend_18 (entry count 12/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 1.05135, -43.4859, -0.858662, 1.36 ) }
    dend_19 { pt3dadd( 1.00542, -43.9776, -0.090265, 1.36 ) }
    dend_19 { pt3dadd( 1.0133, -44.8189, 1.3797, 0.68 ) }
    dend_19 { pt3dadd( 1.08817, -45.5476, 2.60404, 0.68 ) }
    dend_19 { pt3dadd( 1.31397, -46.4966, 4.12344, 0.68 ) }
    dend_19 { pt3dadd( 1.5905, -47.2461, 5.19579, 0.68 ) }
    dend_19 { pt3dadd( 1.91459, -47.9408, 6.12572, 0.45 ) }
    dend_19 { pt3dadd( 2.29013, -48.4702, 6.89928, 0.45 ) }
    dend_19 { pt3dadd( 2.77925, -48.9132, 7.58029, 0.68 ) }
    dend_19 { pt3dadd( 3.47531, -49.4825, 8.3624, 0.68 ) }
    dend_19 { pt3dadd( 4.30646, -50.1771, 9.23945, 0.68 ) }
    dend_19 { pt3dadd( 4.9834, -50.8253, 9.99825, 0.68 ) }
    dend_19 { pt3dadd( 5.89202, -51.7605, 11.1376, 0.68 ) }
    dend_19 { pt3dadd( 6.73928, -52.7606, 12.4007, 0.68 ) }
    dend_19 { pt3dadd( 7.59228, -53.9854, 13.9329, 0.68 ) }
    dend_19 { pt3dadd( 8.0784, -54.8626, 14.945, 0.68 ) }
    dend_19 { pt3dadd( 8.4689, -55.7093, 15.8193, 0.68 ) }
    dend_19 { pt3dadd( 8.89916, -56.7383, 16.6974, 0.68 ) }
    dend_19 { pt3dadd( 9.39567, -58.1421, 17.6838, 0.68 ) }
    dend_19 { pt3dadd( 9.68785, -59.1793, 18.3434, 0.68 ) }
    dend_19 { pt3dadd( 10.0726, -60.785, 19.3039, 0.68 ) }
    dend_19 { pt3dadd( 10.3737, -62.3004, 20.1648, 0.68 ) }
    dend_19 { pt3dadd( 10.655, -63.7543, 20.9778, 0.68 ) }
    dend_19 { pt3dadd( 10.9045, -65.0697, 21.7645, 0.68 ) }
    dend_19 { pt3dadd( 11.1819, -66.2279, 22.5942, 0.68 ) }
    dend_19 { pt3dadd( 11.5867, -67.5591, 23.6402, 0.68 ) }
    dend_19 { pt3dadd( 11.8724, -68.3951, 24.3589, 0.68 ) }
    dend_19 { pt3dadd( 12.6931, -70.3244, 26.2893, 0.23 ) }
    dend_19 { pt3dadd( 13.0543, -71.0217, 27.0921, 0.23 ) }
    dend_19 { pt3dadd( 13.7517, -72.1328, 28.5198, 0.23 ) }
    dend_19 { pt3dadd( 14.6037, -73.2966, 30.0614, 0.23 ) }
    dend_19 { pt3dadd( 15.4184, -74.2843, 31.4473, 0.23 ) }
    dend_19 { pt3dadd( 16.1587, -75.1207, 32.6765, 0.23 ) }
    dend_19 { pt3dadd( 16.8855, -75.884, 33.9569, 0.23 ) }
    dend_19 { pt3dadd( 17.7598, -76.8341, 35.5475, 0.23 ) }
    dend_19 { pt3dadd( 20.6234, -84.1264, 40.9992, 0.23 ) }
    dend_19 { pt3dadd( 22.8994, -91.5923, 46.515, 0.23 ) }
    dend_19 { pt3dadd( 25.4192, -99.4082, 51.4543, 0.23 ) }
    dend_19 { pt3dadd( 26.1269, -107.702, 56.2776, 0.23 ) }
    dend_19 { pt3dadd( 27.8393, -116.374, 60.1509, 0.23 ) }
    dend_19 { pt3dadd( 30.4602, -124.794, 64.0189, 0.23 ) }
    dend_19 { pt3dadd( 32.138, -133.081, 68.6068, 0.23 ) }
    dend_19 { pt3dadd( 33.8888, -142.061, 71.7555, 0.23 ) }
    dend_19 { pt3dadd( 37.6954, -150.523, 74.336, 0.23 ) }
    dend_19 { pt3dadd( 41.065, -159.129, 77.09, 0.23 ) }
    dend_19 { pt3dadd( 44.5522, -167.9, 79.1291, 0.23 ) }
    dend_19 { pt3dadd( 48.5435, -176.688, 79.3765, 0.23 ) }
    dend_19 { pt3dadd( 51.8006, -185.804, 79.1372, 0.23 ) }
    dend_19 { pt3dadd( 56.3025, -194.231, 80.3155, 0.23 ) }
    dend_19 { pt3dadd( 60.5773, -202.528, 82.6327, 0.23 ) }
    dend_19 { pt3dadd( 65.7971, -209.178, 86.9643, 0.23 ) }
    // Section: dend_17, id: dend_17, parent: dend_15 (entry count 63/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -4.36811, -57.0336, 27.2486, 0.23 ) }
    dend_17 { pt3dadd( -4.81998, -57.2722, 28.1335, 0.23 ) }
    dend_17 { pt3dadd( -5.53704, -57.8389, 29.5336, 0.23 ) }
    dend_17 { pt3dadd( -6.04311, -58.5194, 30.7123, 0.23 ) }
    dend_17 { pt3dadd( -6.30528, -59.2719, 31.5543, 0.23 ) }
    dend_17 { pt3dadd( -6.41126, -59.7936, 32.0187, 0.23 ) }
    dend_17 { pt3dadd( -6.54344, -60.4935, 32.5306, 0.23 ) }
    dend_17 { pt3dadd( -6.60424, -61.0235, 32.8666, 0.23 ) }
    dend_17 { pt3dadd( -6.67083, -62.2902, 33.4803, 0.23 ) }
    dend_17 { pt3dadd( -6.67965, -64.14, 34.2118, 0.23 ) }
    dend_17 { pt3dadd( -6.66678, -65.0284, 34.5266, 0.23 ) }
    dend_17 { pt3dadd( -6.63001, -66.9391, 35.1688, 0.23 ) }
    dend_17 { pt3dadd( -8.75986, -73.1411, 41.7251, 0.23 ) }
    dend_17 { pt3dadd( -11.8729, -77.3678, 49.2408, 0.23 ) }
    dend_17 { pt3dadd( -13.7401, -81.4013, 57.2495, 0.23 ) }
    dend_17 { pt3dadd( -16.6302, -84.6523, 65.2758, 0.23 ) }
    dend_17 { pt3dadd( -19.8235, -89.2497, 72.5572, 0.23 ) }
    dend_17 { pt3dadd( -23.0316, -94.6963, 79.2801, 0.23 ) }
    dend_17 { pt3dadd( -27.0607, -100.731, 85.036, 0.23 ) }
    dend_17 { pt3dadd( -29.674, -105.782, 92.2767, 0.23 ) }
    dend_17 { pt3dadd( -31.4272, -111.654, 99.209, 0.23 ) }
    dend_17 { pt3dadd( -32.8377, -118.789, 105.062, 0.23 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 85/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -4.36811, -57.0336, 27.2486, 0.23 ) }
    dend_16 { pt3dadd( -4.29248, -58.7101, 28.506, 0.23 ) }
    dend_16 { pt3dadd( -4.41388, -59.7221, 29.1848, 0.23 ) }
    dend_16 { pt3dadd( -4.57006, -60.6966, 29.8855, 0.68 ) }
    dend_16 { pt3dadd( -4.67851, -61.7032, 30.6372, 0.68 ) }
    dend_16 { pt3dadd( -4.80014, -62.7972, 31.4373, 0.45 ) }
    dend_16 { pt3dadd( -4.96986, -63.9979, 32.2579, 0.45 ) }
    dend_16 { pt3dadd( -5.19305, -65.3179, 33.1094, 0.45 ) }
    dend_16 { pt3dadd( -5.39197, -66.6211, 33.826, 0.45 ) }
    dend_16 { pt3dadd( -5.57012, -68.3634, 34.5714, 0.45 ) }
    dend_16 { pt3dadd( -5.53044, -69.2485, 34.8285, 0.45 ) }
    dend_16 { pt3dadd( -5.17782, -70.5553, 35.0271, 0.45 ) }
    dend_16 { pt3dadd( -4.72097, -71.5621, 34.9902, 0.45 ) }
    dend_16 { pt3dadd( -3.7522, -73.3052, 34.7482, 0.45 ) }
    dend_16 { pt3dadd( -2.69365, -74.9748, 34.3196, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_16 { pt3dadd( -1.54193, -76.5172, 33.7617, 0.23 ) }
    dend_16 { pt3dadd( -0.933689, -77.199, 33.4823, 0.23 ) }
    dend_16 { pt3dadd( 0.406856, -78.4569, 32.8891, 0.23 ) }
    dend_16 { pt3dadd( 3.50795, -90.1512, 35.8724, 0.23 ) }
    dend_16 { pt3dadd( 5.79045, -101.288, 40.8605, 0.23 ) }
    dend_16 { pt3dadd( 10.514, -112.28, 44.1445, 0.23 ) }
    dend_16 { pt3dadd( 16.7763, -122.462, 47.225, 0.23 ) }
    dend_16 { pt3dadd( 21.479, -133.947, 48.1284, 0.23 ) }
    dend_16 { pt3dadd( 28.4622, -143.663, 51.0207, 0.23 ) }
    dend_16 { pt3dadd( 35.0049, -153.306, 54.973, 0.23 ) }
    dend_16 { pt3dadd( 42.643, -162.76, 56.8004, 0.23 ) }
    dend_16 { pt3dadd( 52.0852, -169.716, 59.9124, 0.23 ) }
    dend_16 { pt3dadd( 61.4333, -176.334, 63.8628, 0.23 ) }
    dend_16 { pt3dadd( 70.5227, -183.679, 67.2109, 0.23 ) }
    dend_16 { pt3dadd( 80.0934, -190.92, 69.0943, 0.23 ) }
    dend_16 { pt3dadd( 89.2847, -197.75, 73.0882, 0.23 ) }
    dend_16 { pt3dadd( 99.4905, -202.82, 76.9816, 0.23 ) }
    // Section: dend_12, id: dend_12, parent: dend_8 (entry count 17/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -49.6321, 22.3949, 23.7536, 0.68 ) }
    dend_12 { pt3dadd( -50.1415, 23.0681, 24.4083, 0.68 ) }
    dend_12 { pt3dadd( -50.763, 23.88, 25.1084, 0.45 ) }
    dend_12 { pt3dadd( -51.4297, 24.6464, 25.7567, 0.45 ) }
    dend_12 { pt3dadd( -51.9865, 25.2183, 26.2171, 0.45 ) }
    dend_12 { pt3dadd( -52.8798, 26.1358, 26.9558, 0.45 ) }
    dend_12 { pt3dadd( -53.641, 26.9175, 27.5851, 0.45 ) }
    dend_12 { pt3dadd( -54.0802, 27.4067, 27.9158, 0.45 ) }
    dend_12 { pt3dadd( -54.7641, 28.1721, 28.3643, 0.45 ) }
    dend_12 { pt3dadd( -55.4227, 28.8034, 28.7076, 0.45 ) }
    dend_12 { pt3dadd( -58.9553, 33.7049, 33.4551, 0.45 ) }
    dend_12 { pt3dadd( -62.9591, 37.6938, 38.5919, 0.45 ) }
    dend_12 { pt3dadd( -66.7064, 41.5655, 43.9954, 0.45 ) }
    dend_12 { pt3dadd( -69.7508, 45.9957, 49.446, 0.45 ) }
    dend_12 { pt3dadd( -72.2575, 49.6117, 55.6622, 0.45 ) }
    dend_12 { pt3dadd( -75.1908, 51.8674, 62.2705, 0.45 ) }
    dend_12 { pt3dadd( -78.9488, 52.9882, 68.7299, 0.45 ) }
    dend_12 { pt3dadd( -82.823, 54.0245, 75.1338, 0.45 ) }
    dend_12 { pt3dadd( -86.2558, 54.466, 81.8475, 0.45 ) }
    dend_12 { pt3dadd( -89.9726, 56.4554, 88.1341, 0.45 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 37/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -49.6321, 22.3949, 23.7536, 0.68 ) }
    dend_9 { pt3dadd( -50.4577, 22.9308, 22.9722, 0.68 ) }
    dend_9 { pt3dadd( -51.6068, 23.771, 21.8264, 0.68 ) }
    dend_9 { pt3dadd( -52.7023, 24.6336, 20.8138, 0.68 ) }
    dend_9 { pt3dadd( -53.26, 25.0588, 20.3363, 0.68 ) }
    dend_9 { pt3dadd( -54.1544, 25.7289, 19.6517, 0.68 ) }
    dend_9 { pt3dadd( -55.1092, 26.4804, 19.0162, 0.68 ) }
    dend_9 { pt3dadd( -56.3411, 27.52, 18.312, 0.68 ) }
    dend_9 { pt3dadd( -57.9865, 28.923, 17.477, 0.68 ) }
    dend_9 { pt3dadd( -59.4895, 30.1955, 16.7681, 0.68 ) }
    dend_9 { pt3dadd( -61.2923, 31.6531, 15.9728, 0.68 ) }
    dend_9 { pt3dadd( -63.7121, 33.4896, 14.9795, 0.68 ) }
    dend_9 { pt3dadd( -65.1853, 34.4819, 14.3975, 0.68 ) }
    dend_9 { pt3dadd( -65.9974, 34.9245, 14.0686, 0.68 ) }
    dend_9 { pt3dadd( -66.7568, 35.2729, 13.7542, 0.68 ) }
    dend_9 { pt3dadd( -67.9062, 35.7288, 13.2952, 0.68 ) }
    dend_9 { pt3dadd( -68.8675, 36.014, 12.9536, 0.68 ) }
    dend_9 { pt3dadd( -70.1675, 36.3167, 12.5146, 0.68 ) }
    dend_9 { pt3dadd( -71.9238, 36.7288, 11.9261, 0.68 ) }
    dend_9 { pt3dadd( -74.2604, 37.3764, 11.1051, 0.68 ) }
    dend_9 { pt3dadd( -75.5458, 37.8032, 10.6039, 0.68 ) }
    dend_9 { pt3dadd( -77.8425, 38.7086, 9.54249, 0.68 ) }
    dend_9 { pt3dadd( -78.8555, 39.1644, 8.96597, 0.68 ) }
    dend_9 { pt3dadd( -79.9679, 39.7566, 8.18254, 0.68 ) }
    dend_9 { pt3dadd( -80.8024, 40.2338, 7.50079, 0.68 ) }
    dend_9 { pt3dadd( -81.7133, 40.7142, 6.6932, 0.68 ) }
    dend_9 { pt3dadd( -82.8429, 41.2817, 5.68972, 0.91 ) }
    dend_9 { pt3dadd( -83.8755, 41.8139, 4.81562, 0.91 ) }
    dend_9 { pt3dadd( -86.0263, 42.9071, 3.29054, 0.91 ) }
    dend_9 { pt3dadd( -87.5859, 43.6263, 2.36761, 0.91 ) }
    dend_9 { pt3dadd( -89.015, 44.1786, 1.65572, 0.68 ) }
    dend_9 { pt3dadd( -90.5645, 44.6876, 1.01973, 0.68 ) }
    dend_9 { pt3dadd( -92.2484, 45.2126, 0.438065, 0.68 ) }
    dend_9 { pt3dadd( -93.058, 45.4876, 0.203028, 0.68 ) }
    dend_9 { pt3dadd( -94.6729, 46.1293, -0.191112, 0.91 ) }
    dend_9 { pt3dadd( -96.5056, 47.0458, -0.562652, 0.68 ) }
    dend_9 { pt3dadd( -98.2183, 48.0433, -0.835687, 0.68 ) }
    dend_9 { pt3dadd( -100.005, 49.1635, -1.01622, 1.14 ) }
    dend_9 { pt3dadd( -101.774, 50.4233, -1.10886, 0.68 ) }
    dend_9 { pt3dadd( -102.906, 51.3637, -1.12417, 0.68 ) }
    dend_9 { pt3dadd( -104.192, 52.6003, -1.0843, 1.14 ) }
    dend_9 { pt3dadd( -104.998, 53.4355, -1.05944, 0.91 ) }
    dend_9 { pt3dadd( -105.965, 54.411, -1.08961, 0.68 ) }
    dend_9 { pt3dadd( -107.797, 56.0449, -1.31009, 0.68 ) }
    dend_9 { pt3dadd( -108.663, 56.721, -1.51045, 0.45 ) }
    dend_9 { pt3dadd( -109.705, 57.4995, -1.8646, 0.45 ) }
    dend_9 { pt3dadd( -111.189, 58.57, -2.53061, 1.36 ) }
    dend_9 { pt3dadd( -112.501, 59.4354, -3.24393, 0.68 ) }
    dend_9 { pt3dadd( -113.966, 60.3799, -4.14454, 0.91 ) }
    dend_9 { pt3dadd( -114.855, 60.957, -4.7158, 0.68 ) }
    dend_9 { pt3dadd( -115.758, 61.5787, -5.26996, 0.68 ) }
    dend_9 { pt3dadd( -116.902, 62.4483, -5.95254, 0.91 ) }
    dend_9 { pt3dadd( -117.964, 63.3162, -6.55954, 0.68 ) }
    dend_9 { pt3dadd( -120.053, 65.1621, -7.7201, 0.68 ) }
    dend_9 { pt3dadd( -121.032, 66.0825, -8.25622, 0.68 ) }
    dend_9 { pt3dadd( -122.943, 67.9809, -9.24492, 0.68 ) }
    dend_9 { pt3dadd( -123.525, 68.6046, -9.52602, 0.68 ) }
    dend_9 { pt3dadd( -124.672, 69.9762, -10.0504, 1.59 ) }
    dend_9 { pt3dadd( -125.729, 71.4388, -10.4983, 0.45 ) }
    dend_9 { pt3dadd( -126.681, 72.9175, -10.8515, 0.91 ) }
    dend_9 { pt3dadd( -127.333, 74.1152, -11.054, 0.45 ) }
    dend_9 { pt3dadd( -127.916, 75.4435, -11.1751, 0.45 ) }
    dend_9 { pt3dadd( -128.207, 76.1257, -11.2031, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_9()
}

proc basic_shape_9() {
    dend_9 { pt3dadd( -128.975, 78.0169, -11.2203, 0.91 ) }
    dend_9 { pt3dadd( -129.494, 79.1759, -11.2303, 0.45 ) }
    dend_9 { pt3dadd( -130.406, 80.9065, -11.2849, 0.45 ) }
    dend_9 { pt3dadd( -131.463, 82.5529, -11.4276, 1.36 ) }
    dend_9 { pt3dadd( -132.315, 83.7598, -11.5909, 0.45 ) }
    dend_9 { pt3dadd( -133.25, 85.0304, -11.8011, 0.45 ) }
    dend_9 { pt3dadd( -134.257, 86.2958, -12.0332, 0.45 ) }
    dend_9 { pt3dadd( -135.5, 87.804, -12.2773, 0.91 ) }
    dend_9 { pt3dadd( -136.819, 89.3206, -12.4251, 0.45 ) }
    dend_9 { pt3dadd( -137.352, 89.9483, -12.4314, 0.45 ) }
    dend_9 { pt3dadd( -138.247, 91.0904, -12.3616, 0.45 ) }
    dend_9 { pt3dadd( -139.195, 92.4209, -12.2155, 1.14 ) }
    dend_9 { pt3dadd( -140.27, 94.1397, -11.9532, 0.68 ) }
    dend_9 { pt3dadd( -141.199, 95.7065, -11.6569, 0.68 ) }
    dend_9 { pt3dadd( -142.282, 97.4425, -11.2598, 0.68 ) }
    dend_9 { pt3dadd( -142.886, 98.3023, -11.0473, 0.91 ) }
    dend_9 { pt3dadd( -144.208, 100.078, -10.5993, 0.91 ) }
    dend_9 { pt3dadd( -144.997, 101.094, -10.3782, 0.45 ) }
    dend_9 { pt3dadd( -145.957, 102.243, -10.2219, 0.45 ) }
    dend_9 { pt3dadd( -146.963, 103.375, -10.1857, 0.91 ) }
    dend_9 { pt3dadd( -147.776, 104.199, -10.2766, 0.45 ) }
    dend_9 { pt3dadd( -149.236, 105.578, -10.6324, 0.45 ) }
    dend_9 { pt3dadd( -150.362, 106.577, -11.0653, 1.36 ) }
    dend_9 { pt3dadd( -151.409, 107.485, -11.5738, 0.68 ) }
    dend_9 { pt3dadd( -152.605, 108.524, -12.2573, 0.68 ) }
    dend_9 { pt3dadd( -153.947, 109.747, -13.1627, 0.68 ) }
    dend_9 { pt3dadd( -155.088, 110.775, -14.0531, 0.45 ) }
    dend_9 { pt3dadd( -156.909, 112.303, -15.6547, 0.45 ) }
    dend_9 { pt3dadd( -158.062, 113.199, -16.7329, 1.14 ) }
    dend_9 { pt3dadd( -159.093, 113.984, -17.7647, 0.45 ) }
    dend_9 { pt3dadd( -160.018, 114.746, -18.8215, 0.45 ) }
    dend_9 { pt3dadd( -160.751, 115.488, -19.8801, 0.45 ) }
    dend_9 { pt3dadd( -161.178, 116.1, -20.818, 0.45 ) }
    dend_9 { pt3dadd( -161.45, 116.701, -21.7929, 0.45 ) }
    dend_9 { pt3dadd( -161.704, 117.367, -22.8395, 0.45 ) }
    dend_9 { pt3dadd( -161.996, 118.194, -24.0004, 1.36 ) }
    dend_9 { pt3dadd( -162.414, 119.372, -25.4743, 1.14 ) }
    dend_9 { pt3dadd( -162.672, 120.333, -26.4989, 0.45 ) }
    dend_9 { pt3dadd( -162.883, 121.387, -27.5161, 0.45 ) }
    dend_9 { pt3dadd( -163.05, 122.463, -28.5192, 0.23 ) }
    dend_9 { pt3dadd( -163.241, 123.833, -29.7485, 0.23 ) }
    dend_9 { pt3dadd( -163.282, 124.14, -30.0089, 0.23 ) }
    dend_9 { pt3dadd( -163.386, 125.246, -30.8317, 1.36 ) }
    dend_9 { pt3dadd( -163.39, 126.634, -31.7213, 0.45 ) }
    dend_9 { pt3dadd( -163.31, 127.37, -32.1539, 0.45 ) }
    dend_9 { pt3dadd( -163.129, 128.354, -32.7155, 0.91 ) }
    dend_9 { pt3dadd( -162.863, 129.625, -33.4461, 0.23 ) }
    dend_9 { pt3dadd( -162.632, 130.772, -34.122, 0.23 ) }
    dend_9 { pt3dadd( -162.38, 132.029, -34.8668, 0.68 ) }
    dend_9 { pt3dadd( -162.094, 133.483, -35.6828, 0.45 ) }
    dend_9 { pt3dadd( -161.824, 135.057, -36.5748, 1.14 ) }
    dend_9 { pt3dadd( -161.72, 135.964, -37.1037, 0.23 ) }
    dend_9 { pt3dadd( -161.701, 137.248, -37.8527, 0.23 ) }
    dend_9 { pt3dadd( -161.784, 138.186, -38.3931, 0.68 ) }
    dend_9 { pt3dadd( -162.196, 140.102, -39.4495, 0.23 ) }
    dend_9 { pt3dadd( -162.518, 141.133, -39.9733, 0.23 ) }
    dend_9 { pt3dadd( -163.101, 142.529, -40.6307, 1.14 ) }
    dend_9 { pt3dadd( -164.203, 144.661, -41.5618, 0.23 ) }
    dend_9 { pt3dadd( -164.615, 145.323, -41.829, 0.91 ) }
    dend_9 { pt3dadd( -165.731, 146.82, -42.417, 0.23 ) }
    dend_9 { pt3dadd( -166.365, 147.547, -42.6837, 0.91 ) }
    dend_9 { pt3dadd( -168.052, 149.301, -43.2841, 0.23 ) }
    dend_9 { pt3dadd( -169.072, 150.293, -43.633, 1.14 ) }
    dend_9 { pt3dadd( -170.125, 151.253, -43.9982, 0.45 ) }
    dend_9 { pt3dadd( -171.204, 152.175, -44.3937, 0.45 ) }
    dend_9 { pt3dadd( -171.934, 152.75, -44.6785, 0.91 ) }
    dend_9 { pt3dadd( -173.722, 154.093, -45.4123, 0.45 ) }
    dend_9 { pt3dadd( -174.921, 154.972, -45.9444, 0.45 ) }
    dend_9 { pt3dadd( -175.761, 155.601, -46.3767, 1.14 ) }
    dend_9 { pt3dadd( -177.244, 156.725, -47.2077, 0.23 ) }
    dend_9 { pt3dadd( -178.67, 157.812, -48.0854, 0.23 ) }
    dend_9 { pt3dadd( -179.375, 158.311, -48.5658, 0.91 ) }
    dend_9 { pt3dadd( -180.372, 158.906, -49.3234, 0.91 ) }
    dend_9 { pt3dadd( -181.348, 159.361, -50.083, 0.23 ) }
    dend_9 { pt3dadd( -181.928, 159.529, -50.6126, 0.91 ) }
    dend_9 { pt3dadd( -182.797, 159.603, -51.5599, 0.23 ) }
    dend_9 { pt3dadd( -183.509, 159.533, -52.4389, 0.23 ) }
    dend_9 { pt3dadd( -184.306, 159.373, -53.5056, 0.23 ) }
    dend_9 { pt3dadd( -185.024, 159.168, -54.4971, 0.91 ) }
    dend_9 { pt3dadd( -186.491, 158.726, -56.5269, 0.23 ) }
    dend_9 { pt3dadd( -187.066, 158.583, -57.3143, 0.68 ) }
    dend_9 { pt3dadd( -188.018, 158.43, -58.6353, 0.23 ) }
    dend_9 { pt3dadd( -188.997, 158.383, -60.0183, 0.23 ) }
    dend_9 { pt3dadd( -189.77, 158.385, -61.1214, 0.23 ) }
    dend_9 { pt3dadd( -190.392, 158.416, -62.0351, 1.59 ) }
    dend_9 { pt3dadd( -191.583, 158.614, -63.6359, 0.23 ) }
    dend_9 { pt3dadd( -192.419, 158.787, -64.752, 0.23 ) }
    dend_9 { pt3dadd( -192.93, 158.915, -65.4099, 1.59 ) }
    // Section: dend_4, id: dend_4, parent: dend_2 (entry count 88/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -1.80976, 34.977, -4.08351, 1.82 ) }
    dend_4 { pt3dadd( -2.37035, 36.645, -4.57227, 1.82 ) }
    dend_4 { pt3dadd( -3.39433, 39.6918, -5.46504, 1.36 ) }
    dend_4 { pt3dadd( -4.01134, 41.5277, -6.00299, 1.36 ) }
    dend_4 { pt3dadd( -4.81212, 43.9103, -6.70115, 1.36 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 93/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -1.80976, 34.977, -4.08351, 1.14 ) }
    dend_3 { pt3dadd( -1.88458, 35.8998, -5.13963, 1.14 ) }
    dend_3 { pt3dadd( -2.00523, 37.0192, -6.32655, 1.14 ) }
    dend_3 { pt3dadd( -2.07389, 37.8346, -7.19359, 1.14 ) }
    dend_3 { pt3dadd( -2.07537, 38.9913, -8.46196, 0.91 ) }
    dend_3 { pt3dadd( -1.96814, 40.0172, -9.60198, 0.91 ) }
    dend_3 { pt3dadd( -1.783, 40.9813, -10.6944, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_10()
}

proc basic_shape_10() {
    dend_3 { pt3dadd( -1.55293, 41.7706, -11.5417, 0.68 ) }
    dend_3 { pt3dadd( -1.35676, 42.2336, -12.0486, 0.68 ) }
    dend_3 { pt3dadd( -0.791876, 43.1509, -13.1599, 0.68 ) }
    dend_3 { pt3dadd( -0.320712, 43.7268, -13.9606, 0.68 ) }
    dend_3 { pt3dadd( 0.106683, 44.2045, -14.6002, 0.68 ) }
    dend_3 { pt3dadd( 0.800372, 45.0615, -15.6062, 0.68 ) }
    dend_3 { pt3dadd( 1.33223, 45.8652, -16.45, 0.68 ) }
    dend_3 { pt3dadd( 1.68236, 46.5462, -17.1239, 0.68 ) }
    dend_3 { pt3dadd( 1.95664, 47.2785, -17.8257, 0.68 ) }
    dend_3 { pt3dadd( 2.34212, 48.6462, -19.1299, 0.68 ) }
    dend_3 { pt3dadd( 2.59726, 49.6517, -20.0557, 0.68 ) }
    dend_3 { pt3dadd( 2.80742, 50.6673, -20.9931, 0.68 ) }
    dend_3 { pt3dadd( 2.95075, 51.5972, -21.8565, 0.91 ) }
    dend_3 { pt3dadd( 3.05435, 52.5928, -22.8096, 0.91 ) }
    dend_3 { pt3dadd( 3.1285, 53.5813, -23.8377, 0.68 ) }
    dend_3 { pt3dadd( 3.14145, 54.7087, -25.1303, 0.91 ) }
    dend_3 { pt3dadd( 3.12969, 55.6743, -26.1941, 0.68 ) }
    dend_3 { pt3dadd( 3.11404, 56.5539, -27.1086, 0.68 ) }
    dend_3 { pt3dadd( 3.09828, 57.6434, -28.1694, 0.68 ) }
    dend_3 { pt3dadd( 3.08798, 58.8032, -29.2276, 0.68 ) }
    dend_3 { pt3dadd( 3.06835, 59.9072, -30.1626, 0.68 ) }
    dend_3 { pt3dadd( 3.03023, 61.3796, -31.2987, 0.68 ) }
    dend_3 { pt3dadd( 3.02865, 62.844, -32.3229, 0.68 ) }
    dend_3 { pt3dadd( 3.06703, 64.7201, -33.5536, 0.45 ) }
    dend_3 { pt3dadd( 3.15289, 66.2663, -34.5099, 0.45 ) }
    dend_3 { pt3dadd( 3.21218, 66.861, -34.8632, 0.68 ) }
    dend_3 { pt3dadd( 3.45273, 68.4348, -35.7828, 0.45 ) }
    dend_3 { pt3dadd( 3.58911, 69.2167, -36.2494, 0.45 ) }
    dend_3 { pt3dadd( 3.76329, 70.1269, -36.7716, 1.82 ) }
    dend_3 { pt3dadd( 4.12308, 71.7534, -37.7235, 0.45 ) }
    dend_3 { pt3dadd( 4.35107, 72.7663, -38.3543, 0.45 ) }
    dend_3 { pt3dadd( 4.47269, 73.3411, -38.7253, 0.68 ) }
    dend_3 { pt3dadd( 4.7674, 74.878, -39.7581, 0.45 ) }
    dend_3 { pt3dadd( 4.92836, 75.8848, -40.4517, 1.82 ) }
    dend_3 { pt3dadd( 5.07432, 77.0968, -41.3552, 0.45 ) }
    dend_3 { pt3dadd( 5.20087, 78.438, -42.4408, 0.45 ) }
    dend_3 { pt3dadd( 5.23729, 78.8109, -42.7765, 0.45 ) }
    dend_3 { pt3dadd( 5.36639, 79.8384, -43.8007, 0.45 ) }
    dend_3 { pt3dadd( 5.52312, 80.7315, -44.7398, 1.59 ) }
    dend_3 { pt3dadd( 5.84856, 82.0438, -46.1757, 0.45 ) }
    dend_3 { pt3dadd( 6.16087, 83.0723, -47.3181, 0.45 ) }
    dend_3 { pt3dadd( 6.56168, 84.117, -48.484, 0.45 ) }
    dend_3 { pt3dadd( 6.94767, 84.9866, -49.4447, 1.59 ) }
    dend_3 { pt3dadd( 7.43853, 85.9904, -50.5194, 0.45 ) }
    dend_3 { pt3dadd( 7.91252, 86.8583, -51.4296, 0.45 ) }
    dend_3 { pt3dadd( 8.44716, 87.774, -52.35, 0.45 ) }
    dend_3 { pt3dadd( 8.87574, 88.488, -53.0569, 0.45 ) }
    dend_3 { pt3dadd( 9.33738, 89.2775, -53.814, 0.45 ) }
    dend_3 { pt3dadd( 9.69129, 89.8953, -54.3986, 0.91 ) }
    dend_3 { pt3dadd( 10.387, 91.207, -55.5423, 0.45 ) }
    dend_3 { pt3dadd( 10.9023, 92.2964, -56.3944, 0.45 ) }
    dend_3 { pt3dadd( 11.2885, 93.147, -57.0409, 0.45 ) }
    dend_3 { pt3dadd( 11.7779, 94.48, -58.0294, 0.45 ) }
    dend_3 { pt3dadd( 11.933, 95.0062, -58.4336, 0.91 ) }
    dend_3 { pt3dadd( 12.3032, 96.6707, -59.8145, 0.45 ) }
    dend_3 { pt3dadd( 12.4544, 97.9175, -60.9495, 0.45 ) }
    dend_3 { pt3dadd( 12.4629, 98.6396, -61.6936, 1.36 ) }
    dend_3 { pt3dadd( 12.3493, 99.9672, -63.2646, 0.45 ) }
    dend_3 { pt3dadd( 12.1694, 101.022, -64.6847, 0.68 ) }
    dend_3 { pt3dadd( 11.9815, 101.861, -65.9769, 0.45 ) }
    dend_3 { pt3dadd( 11.8031, 102.578, -67.2396, 1.36 ) }
    dend_3 { pt3dadd( 11.5914, 103.518, -68.982, 0.45 ) }
    dend_3 { pt3dadd( 11.4704, 104.391, -70.5872, 0.45 ) }
    dend_3 { pt3dadd( 11.4667, 105.406, -72.4218, 0.23 ) }
    dend_3 { pt3dadd( 11.6083, 106.489, -74.2239, 0.68 ) }
    dend_3 { pt3dadd( 11.8677, 107.433, -75.6867, 0.68 ) }
    dend_3 { pt3dadd( 12.3536, 108.573, -77.2634, 1.14 ) }
    dend_3 { pt3dadd( 12.9422, 109.629, -78.5023, 0.45 ) }
    dend_3 { pt3dadd( 13.7948, 111.012, -79.8334, 0.68 ) }
    dend_3 { pt3dadd( 14.6692, 112.348, -80.8948, 0.45 ) }
    dend_3 { pt3dadd( 15.3131, 113.338, -81.542, 0.91 ) }
    dend_3 { pt3dadd( 16.0038, 114.464, -82.185, 0.45 ) }
    dend_3 { pt3dadd( 16.568, 115.478, -82.7021, 0.91 ) }
    dend_3 { pt3dadd( 17.3113, 117.136, -83.5578, 0.45 ) }
    dend_3 { pt3dadd( 17.8456, 118.687, -84.4465, 0.45 ) }
    dend_3 { pt3dadd( 17.9468, 119.087, -84.721, 0.68 ) }
    dend_3 { pt3dadd( 18.2189, 120.533, -85.842, 0.45 ) }
    dend_3 { pt3dadd( 18.3007, 121.072, -86.3231, 0.91 ) }
    dend_3 { pt3dadd( 18.5135, 122.5, -87.7194, 0.45 ) }
    dend_3 { pt3dadd( 18.6739, 123.669, -88.8864, 0.91 ) }
    dend_3 { pt3dadd( 18.7866, 124.821, -90.1058, 0.23 ) }
    dend_3 { pt3dadd( 18.8287, 125.158, -90.4723, 0.45 ) }
    dend_3 { pt3dadd( 19.0539, 126.411, -91.85, 0.45 ) }
    dend_3 { pt3dadd( 19.4877, 127.8, -93.5026, 0.45 ) }
    dend_3 { pt3dadd( 19.7072, 128.273, -94.1089, 1.14 ) }
    dend_3 { pt3dadd( 20.3105, 129.242, -95.4554, 0.45 ) }
    dend_3 { pt3dadd( 20.983, 130.154, -96.8393, 0.45 ) }
    dend_3 { pt3dadd( 21.5899, 130.891, -98.0619, 0.91 ) }
    dend_3 { pt3dadd( 23.0574, 132.462, -100.874, 0.45 ) }
    dend_3 { pt3dadd( 23.9956, 133.392, -102.573, 0.45 ) }
    dend_3 { pt3dadd( 24.9228, 134.269, -104.112, 0.91 ) }
    dend_3 { pt3dadd( 25.8553, 135.16, -105.551, 0.91 ) }
    dend_3 { pt3dadd( 27.0463, 136.359, -107.348, 0.45 ) }
    dend_3 { pt3dadd( 27.5528, 136.913, -108.081, 0.45 ) }
    dend_3 { pt3dadd( 28.047, 137.554, -108.762, 1.14 ) }
    dend_3 { pt3dadd( 29.0675, 139.045, -110.117, 0.68 ) }
    dend_3 { pt3dadd( 30.0235, 140.594, -111.317, 0.45 ) }
    dend_3 { pt3dadd( 30.7756, 141.905, -112.217, 0.45 ) }
    dend_3 { pt3dadd( 30.9663, 142.275, -112.463, 0.45 ) }
    dend_3 { pt3dadd( 31.4291, 143.261, -113.126, 0.91 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_11()
}

proc basic_shape_11() {
    dend_3 { pt3dadd( 31.8852, 144.261, -113.835, 0.45 ) }
    dend_3 { pt3dadd( 32.3275, 145.35, -114.643, 0.91 ) }
    dend_3 { pt3dadd( 32.8849, 146.805, -115.785, 0.23 ) }
    dend_3 { pt3dadd( 33.1477, 147.54, -116.421, 0.23 ) }
    dend_3 { pt3dadd( 33.4137, 148.369, -117.23, 0.23 ) }
    dend_3 { pt3dadd( 33.5972, 149.024, -117.919, 0.23 ) }
    dend_3 { pt3dadd( 33.7767, 150.028, -118.972, 0.23 ) }
    dend_3 { pt3dadd( 33.8591, 150.753, -119.732, 0.23 ) }
    dend_3 { pt3dadd( 33.8929, 151.924, -120.895, 0.23 ) }
    dend_3 { pt3dadd( 33.9212, 153.032, -121.964, 0.23 ) }
    dend_3 { pt3dadd( 33.9673, 153.932, -122.836, 0.23 ) }
    dend_3 { pt3dadd( 34.0532, 154.621, -123.471, 0.68 ) }
    dend_3 { pt3dadd( 34.3828, 156.134, -124.79, 0.23 ) }
    dend_3 { pt3dadd( 34.7826, 157.464, -125.922, 0.23 ) }
    dend_3 { pt3dadd( 35.2157, 158.601, -126.911, 0.45 ) }
    dend_3 { pt3dadd( 35.6745, 159.672, -127.879, 0.91 ) }
    dend_3 { pt3dadd( 36.4052, 161.377, -129.525, 0.23 ) }
    dend_3 { pt3dadd( 36.9067, 162.401, -130.744, 0.23 ) }
    dend_3 { pt3dadd( 37.276, 163.132, -131.657, 0.23 ) }
    dend_3 { pt3dadd( 37.8648, 164.229, -133.09, 0.23 ) }
    dend_3 { pt3dadd( 38.0839, 164.675, -133.692, 0.45 ) }
    dend_3 { pt3dadd( 38.6804, 165.929, -135.529, 0.23 ) }
    dend_3 { pt3dadd( 39.8157, 168.258, -139.647, 0.23 ) }
    // Section: dend_11, id: dend_11, parent: dend_9 (entry count 23/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( -192.93, 158.915, -65.4099, 0.23 ) }
    dend_11 { pt3dadd( -191.914, 159.046, -66.9654, 0.23 ) }
    dend_11 { pt3dadd( -190.854, 159.182, -68.5882, 0.68 ) }
    dend_11 { pt3dadd( -189.579, 159.345, -70.5413, 0.23 ) }
    dend_11 { pt3dadd( -188.294, 159.51, -72.5093, 0.23 ) }
    dend_11 { pt3dadd( -187.322, 159.634, -73.9967, 0.23 ) }
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 29/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -192.93, 158.915, -65.4099, 0.45 ) }
    dend_10 { pt3dadd( -194.419, 159.74, -67.1247, 0.45 ) }
    dend_10 { pt3dadd( -196.151, 160.642, -69.0143, 0.45 ) }
    dend_10 { pt3dadd( -197.608, 161.338, -70.5535, 0.91 ) }
    dend_10 { pt3dadd( -199.609, 162.272, -72.5721, 0.23 ) }
    dend_10 { pt3dadd( -200.435, 162.679, -73.3562, 0.68 ) }
    dend_10 { pt3dadd( -202.169, 163.555, -74.984, 0.23 ) }
    dend_10 { pt3dadd( -203.356, 164.099, -76.0588, 0.23 ) }
    dend_10 { pt3dadd( -204.706, 164.644, -77.3162, 0.23 ) }
    dend_10 { pt3dadd( -205.547, 164.908, -78.1384, 1.14 ) }
    dend_10 { pt3dadd( -207.951, 165.598, -80.532, 0.23 ) }
    dend_10 { pt3dadd( -208.806, 165.819, -81.4201, 0.91 ) }
    dend_10 { pt3dadd( -211.103, 166.344, -83.8958, 0.23 ) }
    dend_10 { pt3dadd( -213.78, 166.89, -86.9241, 0.23 ) }
    dend_10 { pt3dadd( -215.889, 167.211, -89.4474, 0.23 ) }
    // Section: dend_6, id: dend_6, parent: dend_4 (entry count 44/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -4.81212, 43.9103, -6.70115, 0.91 ) }
    dend_6 { pt3dadd( -5.18249, 45.3244, -6.24276, 0.91 ) }
    dend_6 { pt3dadd( -5.78452, 47.5958, -5.51304, 0.91 ) }
    dend_6 { pt3dadd( -6.70269, 51.9022, -4.13333, 0.91 ) }
    dend_6 { pt3dadd( -7.00126, 53.6949, -3.54937, 0.91 ) }
    dend_6 { pt3dadd( -7.30408, 56.2165, -2.68132, 0.91 ) }
    dend_6 { pt3dadd( -7.50853, 58.6633, -1.79781, 0.91 ) }
    dend_6 { pt3dadd( -7.61946, 60.1784, -1.24802, 0.91 ) }
    dend_6 { pt3dadd( -7.88169, 62.8039, -0.184889, 0.91 ) }
    dend_6 { pt3dadd( -8.17394, 64.5207, 0.690437, 0.91 ) }
    dend_6 { pt3dadd( -8.52734, 65.9295, 1.42666, 0.91 ) }
    dend_6 { pt3dadd( -8.9409, 67.3292, 2.06123, 0.68 ) }
    dend_6 { pt3dadd( -9.36996, 68.6808, 2.59578, 0.91 ) }
    dend_6 { pt3dadd( -10.3307, 71.8628, 3.75905, 0.91 ) }
    dend_6 { pt3dadd( -11.3792, 75.619, 5.07632, 0.91 ) }
    dend_6 { pt3dadd( -12.1078, 79.2121, 6.2674, 0.91 ) }
    dend_6 { pt3dadd( -12.6915, 83.7778, 7.66332, 0.91 ) }
    dend_6 { pt3dadd( -12.8411, 86.6195, 8.39973, 0.91 ) }
    dend_6 { pt3dadd( -12.8074, 89.6024, 8.96712, 0.91 ) }
    dend_6 { pt3dadd( -12.7153, 91.2787, 9.1776, 1.14 ) }
    dend_6 { pt3dadd( -12.4999, 95.2156, 9.49532, 0.91 ) }
    dend_6 { pt3dadd( -12.4584, 97.299, 9.57338, 0.91 ) }
    dend_6 { pt3dadd( -12.5271, 100.505, 9.47649, 0.91 ) }
    dend_6 { pt3dadd( -12.7121, 105.269, 8.98227, 0.91 ) }
    dend_6 { pt3dadd( -12.9268, 109.094, 8.36175, 0.91 ) }
    dend_6 { pt3dadd( -13.1649, 112.09, 7.76417, 0.91 ) }
    dend_6 { pt3dadd( -13.3691, 113.964, 7.36342, 0.68 ) }
    dend_6 { pt3dadd( -13.6133, 116.03, 7.01672, 0.68 ) }
    dend_6 { pt3dadd( -13.9358, 118.939, 6.78007, 0.91 ) }
    dend_6 { pt3dadd( -14.1094, 120.997, 6.78827, 0.91 ) }
    dend_6 { pt3dadd( -14.3289, 124.206, 6.91486, 1.36 ) }
    dend_6 { pt3dadd( -14.4732, 126.33, 6.99217, 0.91 ) }
    dend_6 { pt3dadd( -14.7389, 129.522, 7.06798, 0.91 ) }
    dend_6 { pt3dadd( -14.9482, 132.147, 7.01675, 0.91 ) }
    dend_6 { pt3dadd( -15.2347, 136.004, 6.72964, 0.91 ) }
    dend_6 { pt3dadd( -15.3987, 139.347, 6.2931, 1.14 ) }
    dend_6 { pt3dadd( -15.4599, 142.641, 5.66784, 1.14 ) }
    dend_6 { pt3dadd( -15.4514, 144.32, 5.2637, 0.91 ) }
    dend_6 { pt3dadd( -15.3339, 149.517, 3.82166, 1.14 ) }
    dend_6 { pt3dadd( -15.2627, 151.945, 3.14009, 1.14 ) }
    dend_6 { pt3dadd( -15.1578, 155.382, 2.27651, 0.91 ) }
    dend_6 { pt3dadd( -15.0885, 157.34, 1.91916, 0.68 ) }
    dend_6 { pt3dadd( -14.9886, 159.233, 1.73125, 0.68 ) }
    dend_6 { pt3dadd( -14.8658, 161.714, 1.69715, 0.91 ) }
    dend_6 { pt3dadd( -14.7517, 165.527, 2.01243, 1.14 ) }
    dend_6 { pt3dadd( -14.6806, 168.585, 2.4766, 1.14 ) }
    dend_6 { pt3dadd( -14.6592, 171.211, 3.02457, 0.45 ) }
    dend_6 { pt3dadd( -14.7207, 173.37, 3.58068, 0.45 ) }
    dend_6 { pt3dadd( -14.9067, 175.877, 4.29347, 0.68 ) }
    dend_6 { pt3dadd( -15.1342, 177.958, 4.89658, 0.45 ) }
    dend_6 { pt3dadd( -15.2745, 178.991, 5.16376, 0.45 ) }
    dend_6 { pt3dadd( -15.5677, 181.022, 5.49779, 0.91 ) }
    dend_6 { pt3dadd( -15.8692, 182.864, 5.58081, 0.23 ) }
    dend_6 { pt3dadd( -16.116, 184.245, 5.49187, 0.68 ) }
    dend_6 { pt3dadd( -16.3836, 185.973, 5.25637, 0.23 ) }
    dend_6 { pt3dadd( -16.7632, 188.696, 4.74745, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_12()
}

proc basic_shape_12() {
    dend_6 { pt3dadd( -17.0177, 190.748, 4.28478, 0.23 ) }
    dend_6 { pt3dadd( -17.152, 192.028, 3.92542, 0.23 ) }
    dend_6 { pt3dadd( -17.3571, 194.106, 3.29036, 0.23 ) }
    dend_6 { pt3dadd( -17.481, 195.439, 2.87524, 0.68 ) }
    dend_6 { pt3dadd( -17.6965, 197.888, 2.12566, 0.23 ) }
    dend_6 { pt3dadd( -17.93, 201.339, 0.991053, 0.23 ) }
    dend_6 { pt3dadd( -18.0042, 203.522, 0.240836, 0.23 ) }
    dend_6 { pt3dadd( -20.2501, 215.228, -0.946531, 0.23 ) }
    dend_6 { pt3dadd( -20.4884, 227.167, -2.12773, 0.23 ) }
    dend_6 { pt3dadd( -21.8431, 239.088, -2.19639, 0.23 ) }
    dend_6 { pt3dadd( -21.2004, 251.0, -0.930417, 0.23 ) }
    dend_6 { pt3dadd( -22.0708, 262.941, -1.72739, 0.23 ) }
    dend_6 { pt3dadd( -24.3967, 274.682, -1.16848, 0.23 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 13/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -4.81212, 43.9103, -6.70115, 0.68 ) }
    dend_5 { pt3dadd( -5.26025, 46.3683, -7.10335, 0.68 ) }
    dend_5 { pt3dadd( -5.80836, 48.8043, -7.53279, 0.68 ) }
    dend_5 { pt3dadd( -6.54381, 51.5057, -8.03464, 0.68 ) }
    dend_5 { pt3dadd( -7.47952, 54.4683, -8.55476, 0.68 ) }
    dend_5 { pt3dadd( -8.57423, 57.4783, -8.96386, 0.68 ) }
    dend_5 { pt3dadd( -9.95546, 60.8404, -9.29211, 0.68 ) }
    dend_5 { pt3dadd( -10.7974, 62.5972, -9.36626, 0.68 ) }
    dend_5 { pt3dadd( -11.8575, 64.4723, -9.35817, 0.91 ) }
    dend_5 { pt3dadd( -12.8987, 65.9725, -9.31784, 0.45 ) }
    dend_5 { pt3dadd( -14.5966, 68.0863, -9.2016, 0.45 ) }
    dend_5 { pt3dadd( -16.016, 69.7381, -9.09313, 0.45 ) }
    dend_5 { pt3dadd( -17.0197, 70.9753, -9.03704, 0.45 ) }
    dend_5 { pt3dadd( -17.493, 71.6241, -9.05985, 0.45 ) }
    dend_5 { pt3dadd( -18.4983, 73.1904, -9.2861, 0.91 ) }
    dend_5 { pt3dadd( -19.6585, 75.1409, -9.71679, 0.45 ) }
    dend_5 { pt3dadd( -20.9061, 77.4426, -10.4214, 0.45 ) }
    dend_5 { pt3dadd( -21.7803, 79.1912, -11.032, 0.45 ) }
    dend_5 { pt3dadd( -22.5147, 80.7606, -11.6058, 0.45 ) }
    dend_5 { pt3dadd( -23.2424, 82.419, -12.2274, 0.45 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_30, dend_29, dend_24, dend_21, dend_14, dend_7, dend_0, dend_26, dend_25, dend_23, dend_22, dend_18, dend_15, dend_13, dend_8, dend_2, dend_1, dend_28, dend_27, dend_20, dend_19, dend_17, dend_16, dend_12, dend_9, dend_4, dend_3, dend_11, dend_10, dend_6, dend_5]}
    ModelViewParmSubset_2 = new SectionList()
    dend_30 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_30, dend_29, dend_24, dend_21, dend_14, dend_7, dend_0, dend_26, dend_25, dend_23, dend_22, dend_18, dend_15, dend_13, dend_8, dend_2, dend_1, dend_28, dend_27, dend_20, dend_19, dend_17, dend_16, dend_12, dend_9, dend_4, dend_3, dend_11, dend_10, dend_6, dend_5]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_30 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_29 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_25 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_23 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_22 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_13 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_1 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_28 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_27 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_20 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_19 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_17 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_16 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_12 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_9 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_3 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_6 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_5 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_24 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_0 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_21 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_26 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_14 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_2 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_18 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_4 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_7 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_8 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_15 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_11 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_10 OneSecGrp_SectionRef_32.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_26, dend_26, dend_26, dend_26, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_11, dend_11, dend_11, dend_11, dend_11, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_21 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_10()
}

proc subsets_10() {
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_11()
}

proc subsets_11() {
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_12()
}

proc subsets_12() {
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_13()
}

proc subsets_13() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.999855  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.042115  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0012239999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.001693  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.386953  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 8.0E-6  // units: S cm-2
        e_pas_nml2 = -63.854015  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.5399997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.039862998  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 5.2299997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.0054459996  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.503893  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-4  // units: S cm-2
        e_pas_nml2 = -67.1289  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 4.78E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.15074699  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009017  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 4.0E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.0032419998  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 1.74E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bNAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bNAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bNAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bNAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_30 nseg = 13
    dend_29 nseg = 13
    dend_25 nseg = 7
    dend_23 nseg = 9
    dend_22 nseg = 5
    dend_13 nseg = 13
    dend_1 nseg = 3
    dend_28 nseg = 7
    dend_27 nseg = 7
    dend_20 nseg = 5
    dend_19 nseg = 11
    dend_17 nseg = 5
    dend_16 nseg = 9
    dend_12 nseg = 5
    dend_9 nseg = 13
    dend_3 nseg = 9
    dend_6 nseg = 11
    dend_5 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bNAC219_L6_LBC_0491f28d21_0_0


