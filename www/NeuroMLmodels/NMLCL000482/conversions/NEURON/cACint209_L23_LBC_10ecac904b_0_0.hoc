// Cell: cACint209_L23_LBC_10ecac904b_0_0
/*
{
  "id" : "cACint209_L23_LBC_10ecac904b_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-3.51694, 11.0104, -0.0819092, 3.19551", "-3.15841, 9.8621, -0.0768064, 5.3635", "-2.79987, 8.71381, -0.0717036, 5.2385", "-2.44133, 7.56552, -0.0666008, 5.40379", "-2.0828, 6.41722, -0.061498, 6.02088", "-1.72426, 5.26893, -0.0563952, 7.0572", "-1.36573, 4.12064, -0.0512924, 8.33548", "-1.00719, 2.97235, -0.0461896, 9.39045", "-0.648657, 1.82405, -0.0410868, 9.67825", "-0.290122, 0.675761, -0.035984, 9.93356", "0.0684139, -0.472532, -0.0308812, 10.1889", "0.426949, -1.62083, -0.0257784, 10.0539", "0.785485, -2.76912, -0.0206756, 9.68551", "1.14402, -3.91741, -0.0155728, 9.07939", "1.50256, -5.0657, -0.0104701, 8.46979", "1.86109, -6.214, -0.00536725, 7.63175", "2.21963, -7.36229, -2.64453E-4, 6.67377", "2.57816, -8.51058, 0.00483835, 5.68988", "2.9367, -9.65888, 0.00994114, 4.70477", "3.29523, -10.8072, 0.0150439, 3.57171", "3.65377, -11.9555, 0.0201467, 2.11631" ]
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "-2.91059, 2.62405, 14.561, 0.83", "-3.56324, 4.94244, 15.062, 0.83", "-4.65063, 8.69627, 15.9707, 0.83", "-5.22192, 10.6997, 16.4669, 0.55", "-5.80381, 12.4732, 16.9733, 0.83", "-6.7508, 15.3478, 17.8459, 0.55", "-7.66107, 18.0054, 18.7225, 0.55", "-8.59718, 20.6125, 19.7627, 0.55", "-9.42314, 22.6553, 20.7927, 0.55", "-10.6655, 25.4976, 22.5589, 0.55", "-12.0824, 28.4942, 24.5901, 0.55", "-13.1874, 30.6008, 26.1559, 0.55", "-14.8946, 33.7812, 28.6282, 0.55", "-16.56, 36.927, 31.0445, 0.55", "-18.1913, 40.1147, 33.4793, 0.55", "-19.3793, 42.4928, 35.2937, 0.55", "-20.8615, 45.3099, 37.4909, 0.55", "-21.7639, 47.1089, 38.8033, 0.55", "-22.5526, 48.7877, 39.8524, 0.83", "-23.3769, 50.9058, 40.7777, 0.55", "-26.3837, 59.3785, 44.1834, 0.55", "-29.9857, 66.6552, 49.3315, 0.55", "-32.7263, 74.5434, 54.0951, 0.55", "-33.614, 82.7009, 59.1047, 0.55", "-35.8607, 91.0126, 63.382, 0.55", "-36.3596, 99.3082, 68.2153, 0.55", "-35.7373, 107.985, 72.3088, 0.55", "-34.046, 116.263, 76.8954, 0.55", "-31.6627, 124.435, 81.3648, 0.55", "-29.4224, 132.02, 86.8298, 0.55", "-27.809, 138.848, 93.4032, 0.55", "-27.6024, 145.933, 99.8981, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999927224605856,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "-4.33059, 2.04405, 1.82102, 0.83", "-4.96975, 2.33034, 0.897293, 0.83", "-6.29083, 2.90008, -0.883554, 0.83", "-8.69226, 3.90949, -3.9406, 0.83", "-11.6393, 5.1392, -7.79842, 0.83", "-12.895, 5.62848, -9.34663, 0.55", "-14.0508, 6.05634, -10.6828, 0.83", "-14.9666, 6.482, -11.7815, 0.28", "-15.6833, 6.91244, -12.7823, 0.55", "-18.6737, 8.92505, -17.3549, 0.55", "-19.7807, 9.65826, -19.1819, 0.83", "-21.1077, 10.5766, -21.5253, 0.55", "-23.6182, 12.3158, -26.0817, 0.55", "-26.8666, 14.7145, -32.2276, 0.55", "-29.0883, 16.4139, -36.6027, 0.55", "-31.0221, 17.887, -40.3644, 0.55", "-31.8385, 18.4968, -41.9312, 0.55", "-32.5252, 18.9437, -43.1209, 0.55", "-34.6303, 20.0289, -46.0721, 0.55", "-37.0463, 21.1709, -48.7948, 0.55", "-38.775, 21.9473, -50.5432, 0.28", "-40.7844, 22.8126, -52.4579, 1.11", "-46.0819, 24.7414, -57.2654, 0.28", "-48.0458, 25.3542, -58.9125, 0.28", "-49.6129, 25.7369, -60.1, 1.11", "-53.3421, 26.4833, -62.726, 0.28", "-55.6882, 26.8634, -64.3418, 0.83", "-58.2962, 27.2007, -66.0635, 0.28", "-59.481, 27.3302, -66.7953, 1.11", "-62.771, 27.7597, -69.008, 0.28", "-63.9201, 27.9656, -69.7842, 0.28", "-65.532, 28.3865, -70.7459, 1.11", "-68.75, 29.5712, -72.4204, 0.28", "-69.9501, 30.1281, -72.9146, 0.83", "-73.6953, 32.3369, -73.9639, 0.28", "-75.5945, 33.7022, -74.235, 1.11", "-79.073, 36.618, -74.3512, 0.28", "-81.4252, 38.8257, -74.102, 0.83", "-83.7218, 41.25, -73.518, 0.28", "-86.3276, 44.2871, -72.591, 0.28", "-87.1343, 45.3429, -72.1888, 0.83", "-88.2899, 47.0086, -71.6303, 0.83", "-89.3402, 48.776, -71.1556, 0.28", "-90.1491, 50.3041, -70.9115, 0.55", "-91.0951, 52.2554, -70.8744, 0.28", "-91.7957, 53.771, -71.0942, 0.83", "-93.2054, 56.9299, -71.8164, 0.28", "-94.2129, 59.1495, -72.4936, 0.83", "-95.0796, 61.0225, -73.1658, 0.28", "-96.4436, 63.7977, -74.2893, 0.83", "-99.0256, 68.4212, -76.3562, 0.28", "-100.296, 70.2388, -77.1841, 0.83", "-101.426, 71.5102, -77.7526, 0.55", "-102.39, 72.3906, -78.1656, 0.55", "-103.785, 73.4113, -78.6205, 0.28", "-106.267, 74.8325, -79.1586, 0.83", "-110.569, 76.7013, -79.6701, 0.28", "-112.381, 77.4097, -79.8548, 0.83", "-114.285, 78.1865, -79.963, 0.28", "-117.213, 79.3888, -79.992, 0.83", "-119.557, 80.5026, -79.9377, 1.11", "-122.122, 81.9482, -79.8067, 0.55", "-123.321, 82.7195, -79.8104, 0.83", "-126.275, 84.8933, -79.9564, 0.28", "-127.636, 86.0379, -80.0635, 0.83", "-130.843, 89.0056, -80.5384, 0.28", "-132.346, 90.4694, -80.9322, 1.11", "-135.22, 93.2679, -81.9714, 0.28", "-136.73, 94.6822, -82.5912, 0.55", "-138.393, 96.1473, -83.4093, 0.55", "-140.851, 98.1678, -84.7157, 0.55", "-143.445, 100.011, -86.0586, 0.28", "-144.513, 100.762, -86.6077, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999927224605856,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "5.05941, 4.03406, 7.73102, 0.83", "5.86741, 4.5058, 8.05085, 0.83", "7.0544, 5.15193, 8.52241, 0.83", "9.23603, 6.37555, 9.44913, 0.83", "11.3228, 7.54479, 10.4982, 0.55", "13.7748, 8.85571, 11.777, 1.11", "16.6028, 10.429, 13.234, 0.55", "18.4588, 11.4417, 14.1949, 0.83", "21.1551, 12.9893, 15.5455, 0.55", "24.5537, 14.936, 17.1461, 0.83", "27.1669, 16.4158, 18.2182, 0.55", "31.2049, 18.7297, 19.6269, 0.55", "33.6493, 20.0841, 20.2032, 0.55", "38.1662, 22.6057, 20.7556, 0.55", "41.7967, 24.5846, 20.6988, 0.83", "44.8352, 26.2637, 20.2665, 0.83", "46.8771, 27.419, 19.803, 0.83", "50.7728, 29.4788, 18.7106, 0.83", "52.7419, 30.5142, 18.1271, 0.83", "56.3368, 32.4415, 17.06, 0.83", "59.1393, 34.1551, 16.3378, 0.83", "61.7624, 35.7994, 15.8504, 0.83", "64.9075, 37.7804, 15.4877, 0.83", "67.67, 39.5469, 15.4178, 0.83", "69.3574, 40.6515, 15.4331, 0.83", "72.8499, 42.9336, 15.4948, 0.83", "74.7259, 44.1332, 15.5546, 0.83", "77.1754, 45.6948, 15.6702, 1.11", "79.1415, 46.9211, 15.7636, 0.55", "81.194, 48.0839, 15.8876, 0.55", "84.5524, 49.8314, 16.178, 0.83", "86.8624, 50.9335, 16.4433, 0.83", "89.3097, 52.1957, 16.6062, 0.55", "91.3195, 53.3291, 16.5985, 0.55", "93.2717, 54.6388, 16.4231, 0.83", "94.3316, 55.4382, 16.2165, 0.83", "97.2527, 58.027, 15.1126, 0.55", "100.734, 61.0908, 13.3528, 0.55", "102.898, 62.9524, 12.1144, 0.55", "105.863, 65.4731, 10.2874, 0.55", "109.331, 68.4155, 8.09365, 0.55", "112.597, 71.1808, 6.04837, 0.83", "115.014, 73.2216, 4.59133, 0.55", "117.573, 75.199, 3.32877, 0.55", "119.317, 76.5515, 2.50389, 0.55", "122.132, 78.6768, 1.19255, 0.55", "123.482, 79.6875, 0.635958, 0.83", "125.022, 80.7832, 0.121746, 0.55", "127.616, 82.7226, -0.815168, 0.55", "129.471, 84.1071, -1.52977, 0.83", "131.379, 85.6939, -2.31271, 0.55", "133.669, 87.6357, -3.3548, 0.55", "135.428, 89.2044, -4.1452, 0.55", "136.579, 90.3316, -4.61053, 0.28", "137.343, 91.1516, -4.85893, 1.11", "140.618, 94.6967, -5.55132, 0.55", "142.408, 96.7635, -5.77308, 0.55", "143.566, 98.095, -5.86998, 0.55", "145.78, 100.461, -6.04778, 0.55", "146.877, 101.548, -6.11957, 0.28", "148.933, 103.525, -6.28392, 0.55", "150.24, 104.748, -6.39114, 0.55", "151.663, 106.184, -6.52936, 0.55", "154.457, 109.073, -6.92995, 0.55", "156.123, 110.766, -7.24907, 0.55", "157.871, 112.489, -7.65887, 0.28", "158.854, 113.47, -7.90428, 0.55", "160.582, 115.21, -8.3314, 1.38", "163.602, 118.185, -9.01817, 0.55", "165.386, 119.869, -9.36692, 1.11", "166.94, 121.305, -9.65611, 0.55", "168.709, 122.862, -9.96429, 0.55", "170.077, 123.983, -10.1966, 0.83", "173.302, 126.388, -10.6989, 0.55", "174.98, 127.484, -10.9212, 0.55", "175.98, 128.047, -11.0519, 0.83", "180.22, 130.085, -11.608, 0.55", "182.41, 130.995, -11.8678, 0.55", "184.499, 131.906, -12.0298, 0.55", "185.859, 132.555, -12.0292, 0.83", "187.956, 133.639, -11.8503, 0.55", "192.227, 136.124, -10.9873, 0.55", "194.542, 137.728, -10.214, 0.55", "197.818, 140.319, -8.82827, 0.55", "199.932, 142.166, -7.69714, 0.55", "201.345, 143.461, -6.83393, 0.83", "203.603, 145.519, -5.33516, 0.55", "206.379, 147.978, -3.38538, 0.55", "209.196, 150.401, -1.42722, 0.55", "210.902, 151.725, -0.329647, 0.83", "212.261, 152.742, 0.448143, 0.55", "213.943, 153.97, 1.35086, 0.28", "215.207, 154.774, 1.93831, 0.55", "224.064, 159.286, 0.459202, 0.55", "232.7, 163.851, -1.90231, 0.55", "241.658, 168.35, -2.62721, 0.55", "250.82, 172.298, -3.84062, 0.55", "260.051, 175.273, -6.473, 0.55", "268.706, 179.093, -9.86601, 0.55", "277.56, 181.535, -13.946, 0.55", "286.861, 182.996, -17.4622, 0.55", "295.774, 184.407, -21.886, 0.55", "304.268, 185.888, -27.0492, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999927224605856,
    "numberInternalDivisions" : 19
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "5.82941, 1.93406, -1.46898, 0.55", "7.84006, 2.53986, -1.9699, 0.55", "9.17514, 2.95966, -2.30688, 1.11", "11.48, 3.52512, -2.86833, 0.55", "12.8975, 3.74304, -3.33886, 0.83", "16.0304, 4.04808, -4.62096, 0.83", "18.6604, 4.23836, -5.86718, 0.55", "20.9824, 4.36711, -7.09612, 0.83", "23.081, 4.49518, -8.18416, 0.55", "26.7659, 4.76189, -10.0113, 0.55", "29.316, 4.93626, -11.0875, 0.55", "31.9921, 5.12554, -12.0818, 1.11", "35.5068, 5.34866, -12.9334, 0.55", "37.9088, 5.55847, -13.1797, 0.55", "39.5011, 5.79267, -13.0545, 0.55", "43.0008, 6.31916, -12.4106, 0.83", "46.2653, 6.71192, -11.6362, 0.55", "48.7678, 6.96768, -10.9858, 0.55", "51.7061, 7.11943, -10.387, 0.55", "55.6569, 7.30725, -10.1952, 0.83", "58.5952, 7.3934, -10.4517, 0.28", "59.4173, 7.38326, -10.6446, 0.55", "60.7113, 7.28694, -11.0477, 0.55", "63.7854, 6.72293, -12.4282, 0.55", "67.7382, 5.62838, -14.5864, 0.55", "70.2492, 4.76376, -16.2538, 0.55", "72.5654, 3.93615, -17.8912, 0.28", "73.9656, 3.44507, -18.913, 0.55", "76.9916, 2.44045, -21.0973, 0.28", "78.6011, 1.98168, -22.3006, 0.55", "82.386, 1.12049, -25.1456, 0.28", "84.1364, 0.94994, -26.5202, 0.55", "87.1595, 1.13738, -28.9003, 0.28", "88.8503, 1.53066, -30.1699, 0.55", "91.274, 2.56097, -31.8262, 0.28", "92.572, 3.27135, -32.7022, 0.83", "95.2372, 4.99249, -34.4525, 0.28", "97.0277, 6.20067, -35.765, 0.55", "98.9907, 7.57668, -37.3218, 0.28", "100.052, 8.27989, -38.153, 0.55", "103.996, 10.7124, -41.0284, 0.28", "105.299, 11.3924, -41.9219, 0.55", "108.248, 12.7891, -43.673, 0.28", "109.26, 13.2308, -44.2021, 1.11", "111.211, 14.017, -45.11, 0.28", "112.393, 14.4999, -45.5587, 1.11", "116.973, 16.4796, -46.7469, 0.28", "120.726, 18.1619, -47.5175, 0.28", "122.995, 19.2834, -47.775, 0.83", "126.074, 21.0235, -47.9602, 0.28", "127.106, 21.686, -47.9754, 0.55", "129.165, 23.2282, -47.8195, 0.28", "130.878, 24.7751, -47.5005, 1.11", "134.268, 28.26, -46.6677, 0.28", "137.112, 31.4759, -45.8533, 0.28", "137.93, 32.4938, -45.5832, 0.55", "139.781, 34.9098, -44.9812, 0.28", "140.544, 35.9741, -44.7319, 1.66", "141.577, 37.4512, -44.3745, 0.28", "142.871, 39.2927, -44.0386, 0.55", "143.677, 40.3892, -43.85, 0.28", "144.738, 41.7234, -43.7975, 0.55", "146.029, 43.2688, -43.9256, 0.28", "146.851, 44.1938, -44.16, 0.55", "148.232, 45.7416, -44.6511, 0.28", "149.452, 47.1022, -45.1686, 1.11", "152.419, 50.2694, -46.6243, 0.28", "153.398, 51.2686, -47.1843, 0.55", "156.625, 54.5319, -49.3406, 0.28", "158.089, 55.9914, -50.4334, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999927224605856,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "-5.12059, 9.35406, 7.96102, 1.11", "-7.02185, 9.13493, 7.05485, 1.11", "-11.1608, 8.65792, 5.08218, 1.11", "-16.6368, 8.0268, 2.47224, 1.38" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999927224605856
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-2.92059, 10.7341, 0.421023, 2.22", "-2.73646, 13.0943, -0.784214, 2.22" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999927224605856
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "2.75941, -11.7459, 2.43102, 2.49", "3.35001, -16.4831, 2.43102, 2.49" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999927224605856
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "3.65377, -11.9555, 0.0201467, 0.830559", "8.12441, -26.2738, 0.0201467, 0.830559", "12.5951, -40.5921, 0.0201467, 0.830559" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "-16.6368, 8.0268, 2.47224, 0.55", "-17.348, 7.71042, 2.80942, 0.55", "-17.8723, 7.40361, 3.0762, 0.55", "-18.4011, 7.08388, 3.33345, 0.55", "-18.962, 6.77074, 3.58873, 0.55", "-19.8415, 6.31871, 4.0024, 0.55", "-20.8465, 5.85917, 4.47792, 0.55", "-21.9987, 5.41835, 5.03136, 0.83", "-23.3328, 4.99879, 5.66263, 0.55", "-24.2007, 4.80163, 6.07811, 0.55", "-25.1363, 4.67181, 6.51285, 0.55", "-25.9501, 4.6193, 6.87419, 0.55", "-26.8664, 4.63391, 7.26066, 0.55", "-27.6584, 4.6769, 7.58552, 0.55", "-28.4665, 4.7378, 7.92263, 0.55", "-29.1273, 4.7667, 8.1864, 0.55", "-29.8496, 4.77051, 8.45311, 0.55", "-30.6579, 4.74944, 8.74037, 0.55", "-31.6187, 4.74834, 9.07298, 0.55", "-32.7843, 4.79808, 9.47131, 0.55", "-33.1996, 4.8366, 9.60928, 0.55", "-34.374, 5.00036, 10.0038, 0.83", "-35.3011, 5.1491, 10.3424, 0.55", "-36.5851, 5.39384, 10.8535, 0.55", "-37.0874, 5.5037, 11.0553, 0.83", "-38.1719, 5.72815, 11.4988, 0.55", "-38.9258, 5.89236, 11.8177, 0.55", "-39.7305, 6.04765, 12.1522, 0.55", "-40.3334, 6.13713, 12.3979, 0.55", "-40.7874, 6.1822, 12.5593, 0.28", "-41.7895, 6.24588, 12.8546, 0.55", "-42.381, 6.25409, 13.0129, 0.55", "-42.9925, 6.23337, 13.1798, 0.55", "-43.9451, 6.19394, 13.4239, 0.83", "-44.6261, 6.1419, 13.5964, 0.55", "-45.4744, 6.06141, 13.8375, 0.55", "-46.2761, 5.98617, 14.0959, 0.55", "-47.0383, 5.91302, 14.3642, 0.55", "-47.7508, 5.85435, 14.6606, 0.55", "-50.671, 5.7632, 16.4451, 0.55", "-53.7785, 5.07115, 17.7038, 0.55", "-56.9095, 4.82169, 19.0659, 0.55", "-59.8311, 4.18517, 20.7331, 0.55", "-62.1857, 3.09588, 22.9669, 0.55", "-64.3619, 1.20577, 24.8141, 0.55", "-66.4445, -1.1383, 26.1884, 0.55", "-68.7105, -2.94265, 28.0132, 0.55", "-70.9942, -4.70869, 29.8534, 0.55", "-73.4235, -6.18902, 31.758, 0.55", "-75.2691, -7.66691, 34.2339, 0.55", "-76.7428, -9.52045, 36.7064, 0.55", "-77.6602, -10.9502, 39.6787, 0.55", "-77.9059, -11.9971, 42.9289, 0.55", "-77.9188, -13.1874, 46.1388, 0.55", "-77.4681, -14.762, 49.1451, 0.55", "-77.34, -16.3457, 52.1776, 0.55", "-77.4679, -18.2734, 55.0039, 0.55", "-78.2515, -20.1909, 57.7296, 0.55", "-79.1552, -21.6924, 60.6706, 0.55", "-79.7365, -23.6288, 63.4334, 0.55", "-79.7052, -25.7441, 66.125, 0.55", "-79.1172, -28.2346, 68.3993, 0.55", "-78.2563, -30.614, 70.7053, 0.55", "-77.3716, -33.1329, 72.8483, 0.55", "-76.3576, -35.7121, 74.8584, 0.55", "-75.442, -38.0854, 77.1496, 0.55", "-74.3073, -40.7174, 79.0219, 0.55", "-72.87, -43.237, 80.8402, 0.55", "-71.4527, -45.6373, 82.8276, 0.55", "-69.9816, -48.1244, 84.6636, 0.55", "-69.1654, -50.6797, 86.7908, 0.55", "-68.92, -53.5828, 88.5887, 0.55" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "-16.6368, 8.0268, 2.47224, 0.83", "-19.3901, 10.2366, 2.10581, 0.83", "-20.5485, 11.2861, 1.18731, 0.83", "-21.9066, 12.5163, 0.110552, 1.38", "-23.8672, 14.2924, -1.44402, 1.11", "-25.811, 16.0533, -2.9852, 1.11", "-27.4966, 17.5803, -4.32173, 1.11", "-33.2843, 24.0512, -11.0, 1.11" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-2.73646, 13.0943, -0.784214, 1.66", "-3.54234, 16.0668, -2.33696, 1.66", "-4.40569, 18.7223, -3.6964, 1.94", "-5.1364, 21.1075, -4.87988, 0.83", "-5.88255, 24.128, -6.38178, 0.83", "-6.40326, 26.366, -7.61889, 0.83", "-7.13233, 30.4452, -9.8498, 0.83", "-7.54829, 33.2576, -11.4882, 0.83", "-7.8497, 35.6002, -12.8706, 0.83", "-8.19221, 39.0562, -14.8181, 1.38", "-8.58766, 44.5248, -18.0548, 0.83", "-8.83743, 51.2445, -21.8602, 0.83", "-8.69588, 56.0643, -24.3253, 0.83", "-8.48435, 59.2758, -25.8979, 0.83", "-8.09219, 64.0051, -28.037, 0.83", "-7.31963, 71.325, -31.0852, 0.83", "-6.79221, 74.9208, -32.435, 0.83", "-5.74257, 81.2362, -34.6648, 0.83", "-4.75095, 86.5925, -36.444, 0.83", "-4.32246, 88.8388, -37.2442, 1.94", "-3.93125, 91.3816, -38.1128, 1.11", "-3.65653, 93.9474, -38.9107, 0.55", "-3.48419, 96.533, -39.8914, 1.38", "-3.31114, 102.874, -42.4948, 0.55", "-3.28118, 107.253, -44.3507, 1.11", "-3.31805, 112.993, -46.8898, 0.55", "-3.38715, 116.486, -48.4638, 1.94", "-3.67567, 123.89, -51.8338, 0.28", "-3.8124, 126.123, -52.8204, 0.83", "-4.08664, 129.026, -54.0136, 0.28", "-4.31753, 131.173, -54.8268, 1.66", "-4.86463, 135.762, -56.3765, 0.55", "-5.16558, 137.901, -56.9027, 0.28", "-6.01302, 143.693, -57.6782, 0.55", "-6.41569, 146.537, -58.0698, 0.83", "-6.75285, 149.336, -58.4265, 0.83", "-6.95864, 151.364, -58.7296, 0.55", "-7.13469, 154.086, -59.2063, 0.55", "-7.06662, 158.513, -60.1956, 1.11", "-6.48379, 162.792, -61.32, 0.28", "-5.96991, 164.856, -61.9012, 0.55", "-5.05129, 167.489, -62.813, 0.28", "-4.48436, 168.821, -63.3368, 0.55", "-3.27447, 171.306, -64.3831, 0.55", "-1.65942, 174.441, -65.7052, 0.83", "-0.730674, 176.34, -66.4109, 0.55", "1.19646, 180.563, -67.9923, 1.38", "2.98653, 184.554, -69.5739, 0.55", "3.92479, 186.894, -70.6027, 0.28", "4.60732, 188.829, -71.496, 0.55", "5.40313, 191.581, -72.7303, 0.28", "5.96231, 193.877, -73.6642, 1.11", "6.66658, 197.089, -74.7099, 0.55", "7.25549, 200.001, -75.5396, 0.28", "7.81759, 202.828, -76.2292, 0.55", "8.6604, 206.8, -77.0712, 0.55", "9.21801, 209.208, -77.456, 0.55", "10.1408, 213.202, -78.0426, 0.55", "10.8305, 216.031, -78.4519, 0.28", "11.5117, 218.667, -78.9163, 0.55", "12.4326, 222.193, -79.6973, 0.83", "13.3782, 225.65, -80.7623, 0.55", "14.2029, 228.861, -82.167, 0.28", "14.668, 231.071, -83.5478, 0.55", "14.9463, 232.985, -84.9094, 0.55", "15.0009, 234.009, -85.714, 0.55", "14.9925, 237.679, -88.7, 0.28", "14.9355, 240.537, -90.8685, 1.11", "14.8292, 245.732, -94.2074, 0.83", "14.9128, 248.541, -95.7578, 0.55", "15.1884, 252.211, -97.4588, 0.83", "15.4087, 254.087, -98.1204, 0.83", "15.9536, 257.413, -98.8285, 0.28", "16.3447, 259.444, -99.0413, 0.55", "17.4537, 264.477, -99.2284, 0.55", "18.6895, 269.566, -99.325, 0.28", "19.8041, 273.995, -99.326, 0.55", "20.503, 276.96, -99.3724, 1.11", "21.1235, 279.702, -99.5087, 0.55", "21.5395, 281.759, -99.6665, 0.28", "21.679, 282.841, -99.7385, 0.55", "21.8663, 284.627, -99.7776, 0.28", "21.9063, 285.531, -99.7257, 0.55", "21.9532, 287.585, -99.4719, 0.55", "22.0527, 289.774, -99.092, 0.83", "22.378, 294.573, -97.9737, 0.55", "22.718, 298.502, -97.0345, 0.83", "23.3124, 304.269, -95.7571, 0.55", "23.614, 306.982, -95.2838, 0.55", "24.2057, 311.96, -94.627, 0.28", "24.5762, 314.784, -94.4809, 1.38", "25.0982, 318.324, -94.6909, 0.55", "25.5677, 321.58, -95.2612, 0.83", "25.8703, 324.789, -96.3321, 0.28", "25.8935, 325.759, -96.7232, 0.55", "25.7368, 328.61, -98.1291, 0.28", "25.5301, 330.506, -99.1272, 0.55", "25.2512, 332.353, -100.038, 0.55", "24.4079, 337.155, -102.281, 0.28", "24.1327, 338.709, -102.986, 0.83", "23.5316, 342.153, -104.551, 0.55", "22.8826, 345.911, -106.247, 0.28", "22.4861, 348.13, -107.206, 0.55", "22.0596, 350.945, -108.176, 0.28", "21.9576, 351.696, -108.369, 0.55", "21.66, 353.727, -108.767, 0.28", "21.3944, 355.43, -109.001, 0.55", "20.8592, 358.611, -109.33, 0.28", "19.9077, 363.708, -109.795, 0.55", "19.195, 367.15, -110.177, 1.11", "18.1032, 372.238, -110.994, 0.55", "17.7351, 373.931, -111.325, 0.83", "16.7566, 378.272, -112.432, 0.55", "15.7019, 382.839, -113.854, 0.55", "15.1281, 385.621, -114.99, 0.83", "14.6251, 389.729, -116.921, 0.28", "14.5598, 392.187, -118.161, 0.83", "14.7321, 395.648, -119.756, 0.28", "14.8739, 396.91, -120.286, 0.55", "15.6733, 402.068, -122.32, 0.28", "16.4678, 406.443, -123.783, 0.28", "17.279, 410.4, -124.902, 0.28", "18.663, 416.342, -126.39, 0.28", "19.0776, 417.981, -126.676, 0.55" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 21
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "-2.73646, 13.0943, -0.784214, 0.83", "-5.05372, 16.0572, -0.59513, 0.83", "-6.7768, 18.4518, -0.632579, 0.83", "-7.92224, 20.2072, -0.717596, 0.55", "-8.89461, 21.7942, -0.853174, 0.83", "-9.70984, 23.0964, -1.03037, 0.55", "-10.8301, 24.9087, -1.31338, 0.83", "-12.3285, 27.4713, -2.56568, 0.83", "-13.332, 29.237, -3.77751, 0.83", "-14.0372, 30.4982, -4.76246, 0.83", "-15.4235, 32.9263, -6.66601, 0.55", "-16.5263, 34.8765, -8.20161, 0.83", "-21.3069, 43.4784, -14.6691, 0.83", "-22.4322, 45.5249, -16.0687, 0.83", "-24.3456, 49.1043, -18.2362, 0.83", "-26.221, 52.9248, -20.0772, 0.83", "-27.6869, 56.1729, -21.2144, 0.83", "-29.6202, 60.8235, -22.2126, 0.83", "-30.9602, 64.5431, -22.4749, 0.83", "-32.0005, 67.9412, -22.6816, 0.83", "-33.064, 72.4868, -22.8812, 0.83", "-33.7418, 76.5536, -22.9594, 0.83", "-34.3054, 81.5414, -22.8654, 0.83", "-34.5193, 85.005, -22.8309, 0.83", "-34.5948, 87.5899, -22.8844, 0.55", "-34.6955, 90.7742, -23.0605, 1.11", "-34.769, 94.4746, -23.3759, 0.55", "-34.7737, 98.067, -23.7262, 0.55", "-34.8546, 101.222, -24.0532, 0.55", "-35.1011, 104.076, -24.3348, 0.55", "-35.6578, 107.728, -24.65, 0.83" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "3.35001, -16.4831, 2.43102, 0.83", "3.64947, -18.1176, 3.5367, 0.83", "4.19231, -21.0806, 5.54105, 1.66", "4.70862, -23.8988, 7.44743, 1.94", "5.29052, -27.0749, 9.59596, 1.94", "6.15903, -31.8155, 12.8028, 1.66" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "3.35001, -16.4831, 2.43102, 0.83", "2.11079, -19.5676, 2.61014, 0.83", "1.08931, -21.8396, 2.83657, 0.83", "0.497442, -23.1504, 2.93925, 0.55", "-0.46618, -25.0036, 3.02425, 1.11", "-1.49827, -26.9089, 3.04517, 0.83", "-2.14406, -28.1785, 3.0321, 0.55", "-3.32572, -30.4733, 2.83323, 0.83", "-4.67316, -33.0078, 2.42481, 0.55", "-5.74616, -35.0466, 1.82763, 0.55", "-6.57756, -36.642, 1.17081, 0.83", "-7.83995, -39.0842, -0.0544856, 0.83", "-9.18813, -41.6532, -1.52355, 0.55", "-10.0585, -43.4502, -2.7014, 0.55", "-11.2379, -45.8612, -4.44643, 1.11", "-11.8215, -47.0179, -5.43749, 0.55", "-12.1257, -47.5345, -5.96926, 0.55", "-12.799, -48.5409, -7.12766, 0.55", "-13.6047, -49.6803, -8.49831, 0.83", "-14.7505, -51.1562, -10.3401, 0.83", "-16.917, -53.6049, -13.2892, 0.55", "-17.9794, -54.6603, -14.5397, 0.28", "-18.9064, -55.5585, -15.5432, 0.83", "-20.1186, -56.7207, -16.755, 0.55", "-20.8124, -57.409, -17.3824, 0.55", "-22.2645, -59.0638, -18.5776, 1.38", "-24.6874, -62.3391, -20.3272, 0.55", "-25.1839, -63.1859, -20.7141, 0.83", "-25.8583, -65.0973, -21.445, 0.28", "-26.0041, -66.0596, -21.7202, 1.11", "-26.0491, -67.479, -22.051, 1.11", "-25.9895, -68.4898, -22.2297, 1.11", "-25.8286, -70.1982, -22.4076, 0.55", "-25.4813, -74.1951, -22.7821, 0.28", "-25.2177, -77.3809, -23.0232, 0.55", "-25.088, -79.1669, -23.1733, 0.55", "-24.911, -81.5794, -23.372, 1.94", "-24.8156, -83.3063, -23.4929, 0.55" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "12.5951, -40.5921, 0.0201467, 0.75621", "17.0657, -54.9104, 0.0201467, 0.75621", "21.5363, -69.2287, 0.0201467, 0.75621" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "-33.2843, 24.0512, -11.0, 0.83", "-33.694, 24.081, -11.0157, 0.83", "-36.5808, 24.358, -11.015, 0.83", "-39.9382, 24.8503, -11.1103, 0.83", "-42.4153, 25.3087, -11.2984, 0.83", "-45.5039, 25.9373, -11.6163, 0.83", "-47.3468, 26.3497, -11.8266, 0.83", "-49.8712, 27.0401, -12.1498, 0.55", "-53.6724, 28.3675, -12.7252, 1.38", "-56.0006, 29.3073, -13.1172, 0.55", "-57.3272, 29.8538, -13.3663, 0.55", "-59.5852, 30.7621, -13.9462, 0.55", "-62.3982, 31.8735, -14.7444, 0.55", "-63.9928, 32.5278, -15.2235, 0.83", "-66.488, 33.4987, -15.8679, 0.83", "-68.9518, 34.4242, -16.5047, 0.55", "-73.3024, 36.0275, -17.667, 0.55", "-77.4603, 37.4634, -19.0343, 0.55", "-79.2866, 38.0748, -19.6983, 0.55", "-81.825, 38.839, -20.6592, 0.83", "-84.5378, 39.6464, -21.7476, 0.55", "-87.3544, 40.4951, -22.8795, 1.66", "-91.7104, 41.7451, -24.5076, 0.28", "-92.6373, 42.0335, -24.8533, 0.55", "-95.335, 43.0227, -25.7009, 0.28", "-96.5969, 43.5685, -26.0149, 0.55", "-99.212, 44.8557, -26.4624, 0.55", "-101.527, 46.1551, -26.6972, 0.55", "-104.313, 47.9022, -26.8346, 0.83", "-107.276, 49.8833, -27.0235, 0.55", "-108.735, 50.9475, -27.1461, 0.55", "-111.372, 52.9796, -27.4163, 0.55", "-113.613, 54.9546, -27.797, 0.83", "-115.057, 56.367, -28.1179, 0.55", "-116.252, 57.6875, -28.4442, 0.55", "-117.383, 59.0835, -28.7441, 0.28", "-119.584, 61.9644, -29.2367, 0.55", "-122.03, 65.2742, -29.5711, 0.28", "-123.513, 67.294, -29.7248, 0.55", "-125.241, 69.5003, -29.862, 0.28", "-127.208, 71.7229, -29.9795, 0.55", "-129.032, 73.5228, -30.0219, 0.83", "-133.707, 77.4162, -30.0458, 0.55", "-134.899, 78.2461, -30.0617, 1.11", "-137.647, 79.9497, -30.2192, 0.55", "-140.349, 81.4124, -30.423, 0.83", "-143.088, 82.8451, -30.7192, 0.28", "-144.07, 83.3352, -30.9208, 0.83", "-146.584, 84.5495, -31.7027, 0.28", "-147.76, 85.2014, -32.1414, 0.55", "-149.423, 86.3568, -32.9971, 0.55", "-151.455, 87.9567, -34.4451, 0.55", "-153.761, 89.8363, -36.3651, 0.55", "-155.514, 91.3444, -37.9337, 0.55", "-156.711, 92.4013, -39.03, 0.55", "-159.212, 94.7817, -41.634, 0.55", "-161.075, 96.7411, -43.8746, 0.28", "-161.662, 97.3872, -44.7219, 0.55", "-162.348, 98.2114, -45.8145, 0.28", "-163.296, 99.5583, -47.7806, 1.11", "-164.196, 101.095, -50.0528, 0.55", "-164.446, 101.608, -51.1648, 0.83", "-165.1, 103.22, -55.3137, 0.28", "-165.306, 103.777, -56.9633, 0.55", "-165.549, 104.444, -59.1607, 0.28", "-165.662, 104.756, -60.2268, 0.83", "-166.987, 108.116, -71.5945, 0.55", "-167.112, 108.445, -72.7571, 0.83", "-167.472, 109.606, -76.9006, 0.28", "-167.573, 109.959, -78.2378, 0.55", "-167.709, 110.302, -79.6149, 0.28", "-167.95, 110.909, -81.9748, 0.55" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "-33.2843, 24.0512, -11.0, 1.11", "-33.7465, 26.3394, -15.8952, 1.11", "-34.0372, 28.4176, -19.9353, 0.28", "-34.1431, 28.81, -20.7207, 0.83", "-34.6923, 30.6998, -24.2152, 0.28", "-34.8342, 31.1968, -25.1072, 0.55", "-35.3362, 33.1284, -28.3659, 0.55", "-35.7349, 34.6447, -30.959, 2.22", "-37.4739, 41.3352, -41.9093, 0.28", "-37.7645, 42.4412, -43.6332, 1.94", "-39.2419, 48.4517, -52.4613, 0.28", "-39.5797, 49.8217, -54.435, 0.55", "-40.0623, 51.7843, -57.2015, 0.28", "-40.2748, 52.7047, -58.4064, 1.66", "-40.7817, 55.1389, -61.2291, 0.28", "-41.4131, 57.6692, -64.0416, 0.28", "-41.9573, 59.411, -65.7726, 2.49", "-43.674, 63.9216, -70.2975, 0.28", "-45.0225, 67.1385, -73.2727, 0.28", "-45.5494, 68.3994, -74.3013, 1.66", "-46.7661, 71.3971, -76.3957, 0.28", "-47.3959, 72.9798, -77.3256, 0.83", "-48.9742, 77.1444, -79.5387, 0.28", "-49.7017, 79.1627, -80.51, 1.11", "-50.8251, 82.6021, -82.3822, 0.28", "-51.5161, 85.1674, -83.8114, 0.28", "-51.8854, 87.0516, -84.8528, 0.83", "-52.307, 89.8247, -86.6006, 0.28", "-52.3696, 90.2783, -86.8959, 0.83", "-52.6099, 91.6953, -87.9498, 0.28", "-52.8333, 92.8521, -88.865, 0.83", "-53.0045, 93.8321, -89.6003, 0.83", "-53.5655, 98.6566, -93.0407, 0.28", "-53.6529, 100.68, -94.5768, 1.11", "-53.5919, 102.575, -96.1049, 0.28", "-53.4601, 103.675, -96.9844, 0.83", "-53.0933, 105.581, -98.6647, 0.28", "-52.5685, 107.491, -100.479, 0.83", "-51.3624, 110.949, -104.204, 0.28", "-50.8407, 112.336, -105.942, 0.28", "-50.379, 113.559, -107.754, 0.55", "-49.5196, 115.942, -111.643, 0.28", "-49.2832, 116.602, -112.757, 0.83", "-48.6782, 118.566, -116.037, 0.28", "-48.4435, 119.356, -117.352, 0.83", "-47.8729, 121.226, -120.745, 0.28", "-47.5943, 121.971, -122.148, 0.83", "-47.1719, 122.741, -123.574, 0.28", "-46.9902, 122.991, -124.058, 0.28", "-46.2906, 123.781, -125.541, 0.83", "-44.1067, 126.049, -129.921, 0.28", "-43.6844, 126.444, -130.718, 0.55", "-42.9389, 127.055, -132.31, 0.28", "-42.566, 127.306, -133.197, 0.83" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-35.6578, 107.728, -24.65, 0.55", "-34.5342, 111.261, -25.59, 0.55", "-34.2376, 112.228, -25.8613, 0.28", "-33.8201, 113.779, -26.3212, 0.55", "-32.8829, 117.866, -27.7302, 0.28", "-32.2253, 120.827, -28.8486, 0.55", "-31.7358, 123.617, -29.9406, 0.55", "-31.4416, 126.393, -31.0831, 0.55", "-31.1776, 129.748, -32.5649, 0.55", "-30.9255, 133.206, -34.1103, 0.55", "-30.7766, 135.421, -35.0397, 0.55", "-30.5886, 139.004, -36.4952, 0.55", "-30.3999, 143.108, -37.9757, 0.55", "-30.1648, 146.448, -38.9397, 0.55", "-29.7146, 151.079, -39.8455, 0.28", "-29.5358, 152.661, -40.0153, 0.55", "-29.32, 154.321, -40.1231, 0.55", "-28.9689, 156.592, -40.2074, 0.55", "-28.7524, 158.263, -40.2062, 0.55", "-28.5459, 160.88, -40.3079, 0.83", "-28.3786, 163.384, -40.5306, 0.55", "-28.0805, 166.171, -40.8071, 0.28", "-27.6154, 169.599, -41.2178, 0.55", "-27.201, 172.263, -41.5801, 0.28", "-26.9266, 173.962, -41.8289, 1.38", "-26.3463, 177.073, -42.3103, 1.38", "-25.0502, 183.61, -43.2005, 0.28", "-24.6569, 185.604, -43.4781, 0.83", "-24.3625, 187.03, -43.6758, 0.83", "-23.5054, 191.278, -44.2773, 0.28", "-23.1099, 193.365, -44.5481, 0.55", "-22.7734, 195.399, -44.8479, 0.55", "-22.3443, 198.557, -45.4179, 0.55", "-21.8697, 201.985, -45.9129, 0.28", "-21.6696, 203.227, -46.0958, 0.83" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-35.6578, 107.728, -24.65, 0.83", "-35.8764, 108.625, -24.7653, 0.83", "-36.2831, 110.296, -24.9799, 0.28", "-36.6388, 111.756, -25.1675, 0.55" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "6.15903, -31.8155, 12.8028, 1.66", "4.5404, -34.9251, 13.771, 1.66" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "6.15903, -31.8155, 12.8028, 0.55", "8.90418, -32.9562, 13.644, 0.55", "13.0187, -34.6131, 14.8934, 0.55", "16.1768, -35.8247, 15.8875, 0.55", "18.6183, -36.74, 16.6597, 0.55", "23.4166, -38.4961, 18.3403, 0.55", "25.5842, -39.2949, 19.1666, 0.55", "29.5291, -40.6944, 20.8183, 0.55", "31.2557, -41.2587, 21.6395, 0.55", "34.279, -42.2338, 23.1879, 0.55", "37.7261, -43.256, 25.0624, 0.55", "40.9602, -44.0639, 26.8977, 0.55", "45.1768, -45.0565, 29.3145, 0.55", "49.2839, -45.8532, 31.7124, 0.55", "51.5766, -46.1976, 33.0295, 0.55", "55.693, -46.636, 35.339, 0.55", "58.0823, -46.7879, 36.6228, 0.55", "60.6814, -46.8632, 37.9896, 0.55", "63.3055, -46.8612, 39.3359, 0.55", "66.2274, -46.8081, 40.8255, 0.55", "68.9171, -46.7651, 42.2182, 0.55", "70.5722, -46.7265, 43.0686, 0.55", "74.0295, -46.6025, 44.8281, 0.55", "76.9433, -46.4419, 46.2784, 0.55", "79.8731, -46.2113, 47.6718, 0.55", "81.1024, -46.1035, 48.2366, 0.55", "83.2712, -45.8437, 49.2761, 0.55", "85.2034, -45.6262, 50.2333, 0.55", "86.4267, -45.5039, 50.8718, 0.55", "89.3798, -45.3139, 52.4283, 0.55", "92.3163, -45.228, 53.956, 0.55", "96.0199, -45.3216, 55.9075, 0.55", "99.1413, -45.6263, 57.4931, 0.55", "100.638, -45.8745, 58.2907, 0.55", "103.403, -46.5635, 59.8722, 0.55", "105.37, -47.2806, 61.101, 0.55", "107.239, -48.2177, 62.5513, 0.28", "108.402, -49.0864, 63.6358, 1.38", "110.82, -51.2273, 66.2256, 0.55", "112.191, -52.6522, 67.9451, 0.55", "113.207, -54.0256, 69.5667, 0.83", "114.964, -56.9557, 73.1543, 0.55", "115.635, -58.341, 74.9478, 0.55", "123.565, -59.3201, 80.5839, 0.55", "131.726, -59.2563, 85.9685, 0.55", "140.175, -60.402, 90.7555, 0.55", "147.61, -62.8387, 96.6194, 0.55", "153.959, -65.695, 103.485, 0.55", "161.244, -67.4166, 109.775, 0.55" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-24.8156, -83.3063, -23.4929, 0.28", "-25.4279, -87.3065, -24.1852, 0.28", "-25.7025, -89.1239, -24.5066, 0.83", "-26.5194, -94.982, -25.813, 0.28", "-26.6844, -96.4999, -26.1366, 0.83", "-27.0035, -99.4331, -26.7621, 0.28", "-27.3442, -102.566, -27.4303, 0.55", "-27.6453, -104.748, -27.913, 0.55", "-28.3006, -109.554, -29.0712, 0.28", "-28.4939, -111.738, -29.7002, 0.55" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-24.8156, -83.3063, -23.4929, 0.28", "-27.2053, -92.4845, -21.9985, 0.28", "-27.7383, -94.5315, -21.6652, 0.55", "-28.4593, -97.3007, -21.2143, 0.55", "-29.0942, -99.7391, -20.8173, 0.28", "-29.6725, -101.96, -20.4557, 0.55", "-30.357, -104.589, -20.0276, 1.38" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-21.6696, 203.227, -46.0958, 0.28", "-22.1369, 204.987, -46.5569, 0.28", "-22.5545, 206.385, -46.9718, 0.83", "-23.2612, 208.303, -47.6564, 0.28", "-23.9294, 210.006, -48.2648, 0.28", "-24.2243, 210.76, -48.5174, 0.55", "-25.0934, 212.898, -49.1483, 0.28", "-25.702, 214.228, -49.5481, 0.83", "-27.0179, 216.333, -50.3275, 0.28", "-28.0709, 217.698, -50.9515, 0.28", "-28.6567, 218.418, -51.3021, 0.55", "-29.9845, 219.933, -52.067, 0.28", "-31.3011, 221.279, -52.8022, 0.83", "-33.6278, 223.434, -54.1475, 0.83", "-35.3624, 224.956, -55.0053, 0.83", "-37.1154, 226.411, -55.8291, 0.28", "-39.3369, 228.251, -56.7784, 0.55", "-41.8109, 230.352, -57.7214, 0.28", "-43.2897, 231.628, -58.2211, 1.11", "-47.1712, 235.055, -59.4029, 0.28", "-48.5122, 236.147, -59.7407, 0.83", "-50.5221, 237.68, -60.2209, 0.28", "-51.3745, 238.334, -60.3946, 0.55", "-53.4229, 239.909, -60.7248, 0.28", "-53.7577, 240.162, -60.7845, 0.55", "-55.3198, 241.242, -61.2345, 0.28", "-57.3674, 242.64, -61.7799, 0.83" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-21.6696, 203.227, -46.0958, 0.28", "-20.838, 204.541, -45.9113, 0.28", "-20.3346, 205.431, -45.7912, 0.55", "-19.7581, 206.59, -45.5763, 0.28", "-19.4066, 207.396, -45.5948, 0.55", "-18.9589, 208.466, -45.81, 0.28", "-18.8879, 208.635, -45.8441, 0.55", "-18.46, 209.854, -46.2292, 0.28", "-18.0802, 211.129, -46.7446, 0.83", "-17.2799, 213.911, -48.3566, 0.28", "-16.9906, 214.959, -49.1173, 0.83" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "4.5404, -34.9251, 13.771, 1.66", "4.55902, -35.5349, 13.7834, 1.66", "4.59266, -37.3802, 13.8285, 1.11", "4.76865, -42.162, 14.1558, 1.11", "4.9471, -47.0877, 14.6826, 1.11", "4.95793, -50.2129, 15.1063, 1.11", "4.93617, -53.8421, 15.7081, 1.11", "4.94912, -55.9121, 16.1454, 1.11", "5.03376, -59.9705, 17.2048, 1.11", "5.08896, -64.0436, 18.4525, 1.11", "4.98962, -71.1152, 20.6885, 1.11", "4.91603, -74.7965, 21.8038, 1.11", "4.81062, -78.3877, 22.8423, 1.11", "4.58293, -82.1786, 23.7373, 1.11", "4.08865, -86.5173, 24.4507, 0.83", "3.57054, -89.6572, 24.7459, 0.55", "3.06616, -92.1571, 24.7678, 0.55", "2.57722, -94.4808, 24.6108, 0.55", "1.74686, -97.8595, 24.2152, 0.55", "0.556528, -102.532, 23.4891, 0.55", "-0.275891, -106.221, 22.8626, 0.55", "-0.908358, -109.252, 22.3866, 0.55", "-1.64497, -112.924, 21.9269, 0.28", "-3.52551, -121.867, 23.1018, 0.28", "-6.72028, -130.333, 24.8399, 0.28", "-10.3102, -138.482, 27.2089, 0.28", "-14.1877, -146.051, 30.7564, 0.28", "-17.2025, -153.189, 35.7425, 0.28", "-19.7146, -159.329, 42.1382, 0.28", "-22.3086, -165.39, 48.5754, 0.28" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "4.5404, -34.9251, 13.771, 0.55", "5.72465, -35.5043, 15.4695, 0.55", "6.31583, -35.794, 16.1867, 0.55", "8.02944, -36.5607, 18.2467, 0.55", "12.4396, -38.3246, 23.2469, 0.55", "13.4424, -38.6472, 24.3265, 0.55", "15.9859, -39.2377, 27.0073, 0.55", "17.8026, -39.6348, 29.0217, 0.28", "20.5404, -40.1284, 32.085, 0.28", "21.6385, -40.2904, 33.3145, 0.28", "23.2209, -40.3132, 34.6126, 0.28", "25.7323, -40.0991, 36.7412, 0.28", "31.4296, -41.6822, 42.9386, 0.28", "36.0053, -43.7883, 49.8668, 0.28", "40.4738, -45.8831, 56.8681, 0.28", "44.4286, -46.4259, 64.4469, 0.28", "48.6394, -48.1298, 71.709, 0.28", "51.6209, -50.8213, 79.2747, 0.28", "54.6611, -55.1072, 86.0394, 0.28", "56.5235, -59.1255, 93.3714, 0.28", "57.7391, -62.7975, 101.014, 0.28", "60.0076, -66.5823, 108.356, 0.28", "62.5514, -70.1202, 115.731, 0.28", "64.3406, -72.4735, 123.77, 0.28", "68.1214, -74.9149, 131.058, 0.28", "72.7145, -76.0076, 138.206, 0.28", "76.7533, -77.4631, 145.618, 0.28", "81.267, -77.4884, 152.898, 0.28", "85.4315, -77.9467, 160.369, 0.28", "89.5793, -77.8375, 167.863, 0.28", "92.8878, -76.5376, 175.656, 0.28" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "161.244, -67.4166, 109.775, 0.28", "170.24, -69.0817, 113.087, 0.28", "179.069, -71.9022, 116.044, 0.28", "187.601, -74.3174, 120.047, 0.28" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "161.244, -67.4166, 109.775, 0.28", "167.979, -69.1333, 117.424, 0.28", "175.765, -71.6791, 123.727, 0.28", "183.985, -73.4632, 129.733, 0.28" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-30.357, -104.589, -20.0276, 0.28", "-32.2846, -107.856, -19.0532, 0.28", "-32.8814, -108.861, -18.7546, 0.55", "-34.461, -111.523, -18.1351, 0.28", "-35.4425, -113.134, -17.7903, 0.83", "-37.1709, -115.854, -17.2082, 0.28", "-38.4985, -117.924, -16.7663, 0.28", "-39.9408, -120.016, -16.4624, 0.83", "-42.3374, -123.368, -16.1316, 0.28", "-43.1944, -124.537, -16.1309, 0.55", "-46.1281, -128.568, -16.4154, 0.28", "-47.2681, -130.134, -16.6455, 0.83", "-50.7542, -134.843, -17.5947, 0.28", "-51.624, -136.076, -17.9224, 0.83", "-54.0257, -139.788, -19.0811, 0.28", "-54.6201, -140.934, -19.4808, 0.55", "-55.307, -142.78, -20.1961, 0.28", "-55.8099, -144.421, -20.8319, 0.83", "-56.598, -148.884, -22.3696, 0.28", "-56.7252, -150.171, -22.7913, 0.83", "-56.6462, -153.934, -23.7702, 0.28", "-56.4968, -155.413, -24.1713, 0.55" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-30.357, -104.589, -20.0276, 0.28", "-29.2279, -108.484, -21.9485, 0.28", "-28.6408, -110.509, -22.9473, 1.11", "-28.1146, -112.324, -23.8424, 0.28", "-27.6181, -114.037, -24.6871, 1.38" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_28", "dend_27", "dend_26", "dend_25", "dend_20", "dend_13", "dend_0", "dend_24", "dend_21", "dend_19", "dend_14", "dend_6", "dend_1", "dend_23", "dend_22", "dend_16", "dend_15", "dend_10", "dend_7", "dend_5", "dend_2", "dend_18", "dend_17", "dend_12", "dend_11", "dend_9", "dend_8", "dend_4", "dend_3" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_28", "dend_27", "dend_26", "dend_25", "dend_20", "dend_13", "dend_0", "dend_24", "dend_21", "dend_19", "dend_14", "dend_6", "dend_1", "dend_23", "dend_22", "dend_16", "dend_15", "dend_10", "dend_7", "dend_5", "dend_2", "dend_18", "dend_17", "dend_12", "dend_11", "dend_9", "dend_8", "dend_4", "dend_3" ]
  }, {
    "name" : "ModelViewParmSubset_5",
    "groups" : [ ],
    "sections" : [ "dend_28", "dend_27", "dend_26", "dend_25", "dend_20", "dend_13", "dend_0", "axon_0", "dend_24", "dend_21", "dend_19", "dend_14", "dend_6", "dend_1", "axon_1", "dend_23", "dend_22", "dend_16", "dend_15", "dend_10", "dend_7", "dend_5", "dend_2", "dend_18", "dend_17", "dend_12", "dend_11", "dend_9", "dend_8", "dend_4", "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_20", "dend_20", "dend_20", "dend_13", "dend_0", "axon_0", "axon_0", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_15", "dend_15", "dend_15", "dend_10", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_9", "dend_9", "dend_9", "dend_8", "dend_8", "dend_8", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.993125",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.005611",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.068459995",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.517764",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "6.3E-5",
    "erev" : "-64.6017"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "3.45E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.077616",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.002099",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "1.13999995E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.26087198",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "2.0E-5",
    "erev" : "-69.78141"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.395881",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009986",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "5.0100003E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.009728",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "2.7999999E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cACint209_L23_LBC_10ecac904b_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_28, id: dend_28, parent: soma_0
create dend_28
public dend_28
// Section: dend_27, id: dend_27, parent: soma_0
create dend_27
public dend_27
// Section: dend_26, id: dend_26, parent: soma_0
create dend_26
public dend_26
// Section: dend_25, id: dend_25, parent: soma_0
create dend_25
public dend_25
// Section: dend_20, id: dend_20, parent: soma_0
create dend_20
public dend_20
// Section: dend_13, id: dend_13, parent: soma_0
create dend_13
public dend_13
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_24, id: dend_24, parent: dend_20
create dend_24
public dend_24
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_19, id: dend_19, parent: dend_13
create dend_19
public dend_19
// Section: dend_14, id: dend_14, parent: dend_13
create dend_14
public dend_14
// Section: dend_6, id: dend_6, parent: dend_0
create dend_6
public dend_6
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_23, id: dend_23, parent: dend_21
create dend_23
public dend_23
// Section: dend_22, id: dend_22, parent: dend_21
create dend_22
public dend_22
// Section: dend_16, id: dend_16, parent: dend_14
create dend_16
public dend_16
// Section: dend_15, id: dend_15, parent: dend_14
create dend_15
public dend_15
// Section: dend_10, id: dend_10, parent: dend_6
create dend_10
public dend_10
// Section: dend_7, id: dend_7, parent: dend_6
create dend_7
public dend_7
// Section: dend_5, id: dend_5, parent: dend_1
create dend_5
public dend_5
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_18, id: dend_18, parent: dend_16
create dend_18
public dend_18
// Section: dend_17, id: dend_17, parent: dend_16
create dend_17
public dend_17
// Section: dend_12, id: dend_12, parent: dend_10
create dend_12
public dend_12
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_9, id: dend_9, parent: dend_7
create dend_9
public dend_9
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_4, id: dend_4, parent: dend_2
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_28, dend_27, dend_26, dend_25, dend_20, dend_13, dend_0, dend_24, dend_21, dend_19, dend_14, dend_6, dend_1, dend_23, dend_22, dend_16, dend_15, dend_10, dend_7, dend_5, dend_2, dend_18, dend_17, dend_12, dend_11, dend_9, dend_8, dend_4, dend_3]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_28, dend_27, dend_26, dend_25, dend_20, dend_13, dend_0, dend_24, dend_21, dend_19, dend_14, dend_6, dend_1, dend_23, dend_22, dend_16, dend_15, dend_10, dend_7, dend_5, dend_2, dend_18, dend_17, dend_12, dend_11, dend_9, dend_8, dend_4, dend_3]}
objref ModelViewParmSubset_4
// Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_28, dend_27, dend_26, dend_25, dend_20, dend_13, dend_0, axon_0, dend_24, dend_21, dend_19, dend_14, dend_6, dend_1, axon_1, dend_23, dend_22, dend_16, dend_15, dend_10, dend_7, dend_5, dend_2, dend_18, dend_17, dend_12, dend_11, dend_9, dend_8, dend_4, dend_3]}
objref ModelViewParmSubset_5
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_30
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_13, dend_0, axon_0, axon_0, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_6, dend_6, dend_6, dend_6, dend_6, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_10, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_28(0), soma_0(0.49999927224605856)
    connect dend_27(0), soma_0(0.49999927224605856)
    connect dend_26(0), soma_0(0.49999927224605856)
    connect dend_25(0), soma_0(0.49999927224605856)
    connect dend_20(0), soma_0(0.49999927224605856)
    connect dend_13(0), soma_0(0.49999927224605856)
    connect dend_0(0), soma_0(0.49999927224605856)
    connect axon_0(0), soma_0(1.0)
    connect dend_24(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_19(0), dend_13(1.0)
    connect dend_14(0), dend_13(1.0)
    connect dend_6(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_23(0), dend_21(1.0)
    connect dend_22(0), dend_21(1.0)
    connect dend_16(0), dend_14(1.0)
    connect dend_15(0), dend_14(1.0)
    connect dend_10(0), dend_6(1.0)
    connect dend_7(0), dend_6(1.0)
    connect dend_5(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_18(0), dend_16(1.0)
    connect dend_17(0), dend_16(1.0)
    connect dend_12(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_9(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_4(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -3.51694, 11.0104, -0.0819092, 3.19551 ) }
    soma_0 { pt3dadd( -3.15841, 9.8621, -0.0768064, 5.3635 ) }
    soma_0 { pt3dadd( -2.79987, 8.71381, -0.0717036, 5.2385 ) }
    soma_0 { pt3dadd( -2.44133, 7.56552, -0.0666008, 5.40379 ) }
    soma_0 { pt3dadd( -2.0828, 6.41722, -0.061498, 6.02088 ) }
    soma_0 { pt3dadd( -1.72426, 5.26893, -0.0563952, 7.0572 ) }
    soma_0 { pt3dadd( -1.36573, 4.12064, -0.0512924, 8.33548 ) }
    soma_0 { pt3dadd( -1.00719, 2.97235, -0.0461896, 9.39045 ) }
    soma_0 { pt3dadd( -0.648657, 1.82405, -0.0410868, 9.67825 ) }
    soma_0 { pt3dadd( -0.290122, 0.675761, -0.035984, 9.93356 ) }
    soma_0 { pt3dadd( 0.0684139, -0.472532, -0.0308812, 10.1889 ) }
    soma_0 { pt3dadd( 0.426949, -1.62083, -0.0257784, 10.0539 ) }
    soma_0 { pt3dadd( 0.785485, -2.76912, -0.0206756, 9.68551 ) }
    soma_0 { pt3dadd( 1.14402, -3.91741, -0.0155728, 9.07939 ) }
    soma_0 { pt3dadd( 1.50256, -5.0657, -0.0104701, 8.46979 ) }
    soma_0 { pt3dadd( 1.86109, -6.214, -0.00536725, 7.63175 ) }
    soma_0 { pt3dadd( 2.21963, -7.36229, -2.64453E-4, 6.67377 ) }
    soma_0 { pt3dadd( 2.57816, -8.51058, 0.00483835, 5.68988 ) }
    soma_0 { pt3dadd( 2.9367, -9.65888, 0.00994114, 4.70477 ) }
    soma_0 { pt3dadd( 3.29523, -10.8072, 0.0150439, 3.57171 ) }
    soma_0 { pt3dadd( 3.65377, -11.9555, 0.0201467, 2.11631 ) }
    // Section: dend_28, id: dend_28, parent: soma_0 (entry count 21/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( -2.91059, 2.62405, 14.561, 0.83 ) }
    dend_28 { pt3dadd( -3.56324, 4.94244, 15.062, 0.83 ) }
    dend_28 { pt3dadd( -4.65063, 8.69627, 15.9707, 0.83 ) }
    dend_28 { pt3dadd( -5.22192, 10.6997, 16.4669, 0.55 ) }
    dend_28 { pt3dadd( -5.80381, 12.4732, 16.9733, 0.83 ) }
    dend_28 { pt3dadd( -6.7508, 15.3478, 17.8459, 0.55 ) }
    dend_28 { pt3dadd( -7.66107, 18.0054, 18.7225, 0.55 ) }
    dend_28 { pt3dadd( -8.59718, 20.6125, 19.7627, 0.55 ) }
    dend_28 { pt3dadd( -9.42314, 22.6553, 20.7927, 0.55 ) }
    dend_28 { pt3dadd( -10.6655, 25.4976, 22.5589, 0.55 ) }
    dend_28 { pt3dadd( -12.0824, 28.4942, 24.5901, 0.55 ) }
    dend_28 { pt3dadd( -13.1874, 30.6008, 26.1559, 0.55 ) }
    dend_28 { pt3dadd( -14.8946, 33.7812, 28.6282, 0.55 ) }
    dend_28 { pt3dadd( -16.56, 36.927, 31.0445, 0.55 ) }
    dend_28 { pt3dadd( -18.1913, 40.1147, 33.4793, 0.55 ) }
    dend_28 { pt3dadd( -19.3793, 42.4928, 35.2937, 0.55 ) }
    dend_28 { pt3dadd( -20.8615, 45.3099, 37.4909, 0.55 ) }
    dend_28 { pt3dadd( -21.7639, 47.1089, 38.8033, 0.55 ) }
    dend_28 { pt3dadd( -22.5526, 48.7877, 39.8524, 0.83 ) }
    dend_28 { pt3dadd( -23.3769, 50.9058, 40.7777, 0.55 ) }
    dend_28 { pt3dadd( -26.3837, 59.3785, 44.1834, 0.55 ) }
    dend_28 { pt3dadd( -29.9857, 66.6552, 49.3315, 0.55 ) }
    dend_28 { pt3dadd( -32.7263, 74.5434, 54.0951, 0.55 ) }
    dend_28 { pt3dadd( -33.614, 82.7009, 59.1047, 0.55 ) }
    dend_28 { pt3dadd( -35.8607, 91.0126, 63.382, 0.55 ) }
    dend_28 { pt3dadd( -36.3596, 99.3082, 68.2153, 0.55 ) }
    dend_28 { pt3dadd( -35.7373, 107.985, 72.3088, 0.55 ) }
    dend_28 { pt3dadd( -34.046, 116.263, 76.8954, 0.55 ) }
    dend_28 { pt3dadd( -31.6627, 124.435, 81.3648, 0.55 ) }
    dend_28 { pt3dadd( -29.4224, 132.02, 86.8298, 0.55 ) }
    dend_28 { pt3dadd( -27.809, 138.848, 93.4032, 0.55 ) }
    dend_28 { pt3dadd( -27.6024, 145.933, 99.8981, 0.55 ) }
    // Section: dend_27, id: dend_27, parent: soma_0 (entry count 53/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( -4.33059, 2.04405, 1.82102, 0.83 ) }
    dend_27 { pt3dadd( -4.96975, 2.33034, 0.897293, 0.83 ) }
    dend_27 { pt3dadd( -6.29083, 2.90008, -0.883554, 0.83 ) }
    dend_27 { pt3dadd( -8.69226, 3.90949, -3.9406, 0.83 ) }
    dend_27 { pt3dadd( -11.6393, 5.1392, -7.79842, 0.83 ) }
    dend_27 { pt3dadd( -12.895, 5.62848, -9.34663, 0.55 ) }
    dend_27 { pt3dadd( -14.0508, 6.05634, -10.6828, 0.83 ) }
    dend_27 { pt3dadd( -14.9666, 6.482, -11.7815, 0.28 ) }
    dend_27 { pt3dadd( -15.6833, 6.91244, -12.7823, 0.55 ) }
    dend_27 { pt3dadd( -18.6737, 8.92505, -17.3549, 0.55 ) }
    dend_27 { pt3dadd( -19.7807, 9.65826, -19.1819, 0.83 ) }
    dend_27 { pt3dadd( -21.1077, 10.5766, -21.5253, 0.55 ) }
    dend_27 { pt3dadd( -23.6182, 12.3158, -26.0817, 0.55 ) }
    dend_27 { pt3dadd( -26.8666, 14.7145, -32.2276, 0.55 ) }
    dend_27 { pt3dadd( -29.0883, 16.4139, -36.6027, 0.55 ) }
    dend_27 { pt3dadd( -31.0221, 17.887, -40.3644, 0.55 ) }
    dend_27 { pt3dadd( -31.8385, 18.4968, -41.9312, 0.55 ) }
    dend_27 { pt3dadd( -32.5252, 18.9437, -43.1209, 0.55 ) }
    dend_27 { pt3dadd( -34.6303, 20.0289, -46.0721, 0.55 ) }
    dend_27 { pt3dadd( -37.0463, 21.1709, -48.7948, 0.55 ) }
    dend_27 { pt3dadd( -38.775, 21.9473, -50.5432, 0.28 ) }
    dend_27 { pt3dadd( -40.7844, 22.8126, -52.4579, 1.11 ) }
    dend_27 { pt3dadd( -46.0819, 24.7414, -57.2654, 0.28 ) }
    dend_27 { pt3dadd( -48.0458, 25.3542, -58.9125, 0.28 ) }
    dend_27 { pt3dadd( -49.6129, 25.7369, -60.1, 1.11 ) }
    dend_27 { pt3dadd( -53.3421, 26.4833, -62.726, 0.28 ) }
    dend_27 { pt3dadd( -55.6882, 26.8634, -64.3418, 0.83 ) }
    dend_27 { pt3dadd( -58.2962, 27.2007, -66.0635, 0.28 ) }
    dend_27 { pt3dadd( -59.481, 27.3302, -66.7953, 1.11 ) }
    dend_27 { pt3dadd( -62.771, 27.7597, -69.008, 0.28 ) }
    dend_27 { pt3dadd( -63.9201, 27.9656, -69.7842, 0.28 ) }
    dend_27 { pt3dadd( -65.532, 28.3865, -70.7459, 1.11 ) }
    dend_27 { pt3dadd( -68.75, 29.5712, -72.4204, 0.28 ) }
    dend_27 { pt3dadd( -69.9501, 30.1281, -72.9146, 0.83 ) }
    dend_27 { pt3dadd( -73.6953, 32.3369, -73.9639, 0.28 ) }
    dend_27 { pt3dadd( -75.5945, 33.7022, -74.235, 1.11 ) }
    dend_27 { pt3dadd( -79.073, 36.618, -74.3512, 0.28 ) }
    dend_27 { pt3dadd( -81.4252, 38.8257, -74.102, 0.83 ) }
    dend_27 { pt3dadd( -83.7218, 41.25, -73.518, 0.28 ) }
    dend_27 { pt3dadd( -86.3276, 44.2871, -72.591, 0.28 ) }
    dend_27 { pt3dadd( -87.1343, 45.3429, -72.1888, 0.83 ) }
    dend_27 { pt3dadd( -88.2899, 47.0086, -71.6303, 0.83 ) }
    dend_27 { pt3dadd( -89.3402, 48.776, -71.1556, 0.28 ) }
    dend_27 { pt3dadd( -90.1491, 50.3041, -70.9115, 0.55 ) }
    dend_27 { pt3dadd( -91.0951, 52.2554, -70.8744, 0.28 ) }
    dend_27 { pt3dadd( -91.7957, 53.771, -71.0942, 0.83 ) }
    dend_27 { pt3dadd( -93.2054, 56.9299, -71.8164, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_27 { pt3dadd( -94.2129, 59.1495, -72.4936, 0.83 ) }
    dend_27 { pt3dadd( -95.0796, 61.0225, -73.1658, 0.28 ) }
    dend_27 { pt3dadd( -96.4436, 63.7977, -74.2893, 0.83 ) }
    dend_27 { pt3dadd( -99.0256, 68.4212, -76.3562, 0.28 ) }
    dend_27 { pt3dadd( -100.296, 70.2388, -77.1841, 0.83 ) }
    dend_27 { pt3dadd( -101.426, 71.5102, -77.7526, 0.55 ) }
    dend_27 { pt3dadd( -102.39, 72.3906, -78.1656, 0.55 ) }
    dend_27 { pt3dadd( -103.785, 73.4113, -78.6205, 0.28 ) }
    dend_27 { pt3dadd( -106.267, 74.8325, -79.1586, 0.83 ) }
    dend_27 { pt3dadd( -110.569, 76.7013, -79.6701, 0.28 ) }
    dend_27 { pt3dadd( -112.381, 77.4097, -79.8548, 0.83 ) }
    dend_27 { pt3dadd( -114.285, 78.1865, -79.963, 0.28 ) }
    dend_27 { pt3dadd( -117.213, 79.3888, -79.992, 0.83 ) }
    dend_27 { pt3dadd( -119.557, 80.5026, -79.9377, 1.11 ) }
    dend_27 { pt3dadd( -122.122, 81.9482, -79.8067, 0.55 ) }
    dend_27 { pt3dadd( -123.321, 82.7195, -79.8104, 0.83 ) }
    dend_27 { pt3dadd( -126.275, 84.8933, -79.9564, 0.28 ) }
    dend_27 { pt3dadd( -127.636, 86.0379, -80.0635, 0.83 ) }
    dend_27 { pt3dadd( -130.843, 89.0056, -80.5384, 0.28 ) }
    dend_27 { pt3dadd( -132.346, 90.4694, -80.9322, 1.11 ) }
    dend_27 { pt3dadd( -135.22, 93.2679, -81.9714, 0.28 ) }
    dend_27 { pt3dadd( -136.73, 94.6822, -82.5912, 0.55 ) }
    dend_27 { pt3dadd( -138.393, 96.1473, -83.4093, 0.55 ) }
    dend_27 { pt3dadd( -140.851, 98.1678, -84.7157, 0.55 ) }
    dend_27 { pt3dadd( -143.445, 100.011, -86.0586, 0.28 ) }
    dend_27 { pt3dadd( -144.513, 100.762, -86.6077, 0.55 ) }
    // Section: dend_26, id: dend_26, parent: soma_0 (entry count 26/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 5.05941, 4.03406, 7.73102, 0.83 ) }
    dend_26 { pt3dadd( 5.86741, 4.5058, 8.05085, 0.83 ) }
    dend_26 { pt3dadd( 7.0544, 5.15193, 8.52241, 0.83 ) }
    dend_26 { pt3dadd( 9.23603, 6.37555, 9.44913, 0.83 ) }
    dend_26 { pt3dadd( 11.3228, 7.54479, 10.4982, 0.55 ) }
    dend_26 { pt3dadd( 13.7748, 8.85571, 11.777, 1.11 ) }
    dend_26 { pt3dadd( 16.6028, 10.429, 13.234, 0.55 ) }
    dend_26 { pt3dadd( 18.4588, 11.4417, 14.1949, 0.83 ) }
    dend_26 { pt3dadd( 21.1551, 12.9893, 15.5455, 0.55 ) }
    dend_26 { pt3dadd( 24.5537, 14.936, 17.1461, 0.83 ) }
    dend_26 { pt3dadd( 27.1669, 16.4158, 18.2182, 0.55 ) }
    dend_26 { pt3dadd( 31.2049, 18.7297, 19.6269, 0.55 ) }
    dend_26 { pt3dadd( 33.6493, 20.0841, 20.2032, 0.55 ) }
    dend_26 { pt3dadd( 38.1662, 22.6057, 20.7556, 0.55 ) }
    dend_26 { pt3dadd( 41.7967, 24.5846, 20.6988, 0.83 ) }
    dend_26 { pt3dadd( 44.8352, 26.2637, 20.2665, 0.83 ) }
    dend_26 { pt3dadd( 46.8771, 27.419, 19.803, 0.83 ) }
    dend_26 { pt3dadd( 50.7728, 29.4788, 18.7106, 0.83 ) }
    dend_26 { pt3dadd( 52.7419, 30.5142, 18.1271, 0.83 ) }
    dend_26 { pt3dadd( 56.3368, 32.4415, 17.06, 0.83 ) }
    dend_26 { pt3dadd( 59.1393, 34.1551, 16.3378, 0.83 ) }
    dend_26 { pt3dadd( 61.7624, 35.7994, 15.8504, 0.83 ) }
    dend_26 { pt3dadd( 64.9075, 37.7804, 15.4877, 0.83 ) }
    dend_26 { pt3dadd( 67.67, 39.5469, 15.4178, 0.83 ) }
    dend_26 { pt3dadd( 69.3574, 40.6515, 15.4331, 0.83 ) }
    dend_26 { pt3dadd( 72.8499, 42.9336, 15.4948, 0.83 ) }
    dend_26 { pt3dadd( 74.7259, 44.1332, 15.5546, 0.83 ) }
    dend_26 { pt3dadd( 77.1754, 45.6948, 15.6702, 1.11 ) }
    dend_26 { pt3dadd( 79.1415, 46.9211, 15.7636, 0.55 ) }
    dend_26 { pt3dadd( 81.194, 48.0839, 15.8876, 0.55 ) }
    dend_26 { pt3dadd( 84.5524, 49.8314, 16.178, 0.83 ) }
    dend_26 { pt3dadd( 86.8624, 50.9335, 16.4433, 0.83 ) }
    dend_26 { pt3dadd( 89.3097, 52.1957, 16.6062, 0.55 ) }
    dend_26 { pt3dadd( 91.3195, 53.3291, 16.5985, 0.55 ) }
    dend_26 { pt3dadd( 93.2717, 54.6388, 16.4231, 0.83 ) }
    dend_26 { pt3dadd( 94.3316, 55.4382, 16.2165, 0.83 ) }
    dend_26 { pt3dadd( 97.2527, 58.027, 15.1126, 0.55 ) }
    dend_26 { pt3dadd( 100.734, 61.0908, 13.3528, 0.55 ) }
    dend_26 { pt3dadd( 102.898, 62.9524, 12.1144, 0.55 ) }
    dend_26 { pt3dadd( 105.863, 65.4731, 10.2874, 0.55 ) }
    dend_26 { pt3dadd( 109.331, 68.4155, 8.09365, 0.55 ) }
    dend_26 { pt3dadd( 112.597, 71.1808, 6.04837, 0.83 ) }
    dend_26 { pt3dadd( 115.014, 73.2216, 4.59133, 0.55 ) }
    dend_26 { pt3dadd( 117.573, 75.199, 3.32877, 0.55 ) }
    dend_26 { pt3dadd( 119.317, 76.5515, 2.50389, 0.55 ) }
    dend_26 { pt3dadd( 122.132, 78.6768, 1.19255, 0.55 ) }
    dend_26 { pt3dadd( 123.482, 79.6875, 0.635958, 0.83 ) }
    dend_26 { pt3dadd( 125.022, 80.7832, 0.121746, 0.55 ) }
    dend_26 { pt3dadd( 127.616, 82.7226, -0.815168, 0.55 ) }
    dend_26 { pt3dadd( 129.471, 84.1071, -1.52977, 0.83 ) }
    dend_26 { pt3dadd( 131.379, 85.6939, -2.31271, 0.55 ) }
    dend_26 { pt3dadd( 133.669, 87.6357, -3.3548, 0.55 ) }
    dend_26 { pt3dadd( 135.428, 89.2044, -4.1452, 0.55 ) }
    dend_26 { pt3dadd( 136.579, 90.3316, -4.61053, 0.28 ) }
    dend_26 { pt3dadd( 137.343, 91.1516, -4.85893, 1.11 ) }
    dend_26 { pt3dadd( 140.618, 94.6967, -5.55132, 0.55 ) }
    dend_26 { pt3dadd( 142.408, 96.7635, -5.77308, 0.55 ) }
    dend_26 { pt3dadd( 143.566, 98.095, -5.86998, 0.55 ) }
    dend_26 { pt3dadd( 145.78, 100.461, -6.04778, 0.55 ) }
    dend_26 { pt3dadd( 146.877, 101.548, -6.11957, 0.28 ) }
    dend_26 { pt3dadd( 148.933, 103.525, -6.28392, 0.55 ) }
    dend_26 { pt3dadd( 150.24, 104.748, -6.39114, 0.55 ) }
    dend_26 { pt3dadd( 151.663, 106.184, -6.52936, 0.55 ) }
    dend_26 { pt3dadd( 154.457, 109.073, -6.92995, 0.55 ) }
    dend_26 { pt3dadd( 156.123, 110.766, -7.24907, 0.55 ) }
    dend_26 { pt3dadd( 157.871, 112.489, -7.65887, 0.28 ) }
    dend_26 { pt3dadd( 158.854, 113.47, -7.90428, 0.55 ) }
    dend_26 { pt3dadd( 160.582, 115.21, -8.3314, 1.38 ) }
    dend_26 { pt3dadd( 163.602, 118.185, -9.01817, 0.55 ) }
    dend_26 { pt3dadd( 165.386, 119.869, -9.36692, 1.11 ) }
    dend_26 { pt3dadd( 166.94, 121.305, -9.65611, 0.55 ) }
    dend_26 { pt3dadd( 168.709, 122.862, -9.96429, 0.55 ) }
    dend_26 { pt3dadd( 170.077, 123.983, -10.1966, 0.83 ) }
    dend_26 { pt3dadd( 173.302, 126.388, -10.6989, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_26 { pt3dadd( 174.98, 127.484, -10.9212, 0.55 ) }
    dend_26 { pt3dadd( 175.98, 128.047, -11.0519, 0.83 ) }
    dend_26 { pt3dadd( 180.22, 130.085, -11.608, 0.55 ) }
    dend_26 { pt3dadd( 182.41, 130.995, -11.8678, 0.55 ) }
    dend_26 { pt3dadd( 184.499, 131.906, -12.0298, 0.55 ) }
    dend_26 { pt3dadd( 185.859, 132.555, -12.0292, 0.83 ) }
    dend_26 { pt3dadd( 187.956, 133.639, -11.8503, 0.55 ) }
    dend_26 { pt3dadd( 192.227, 136.124, -10.9873, 0.55 ) }
    dend_26 { pt3dadd( 194.542, 137.728, -10.214, 0.55 ) }
    dend_26 { pt3dadd( 197.818, 140.319, -8.82827, 0.55 ) }
    dend_26 { pt3dadd( 199.932, 142.166, -7.69714, 0.55 ) }
    dend_26 { pt3dadd( 201.345, 143.461, -6.83393, 0.83 ) }
    dend_26 { pt3dadd( 203.603, 145.519, -5.33516, 0.55 ) }
    dend_26 { pt3dadd( 206.379, 147.978, -3.38538, 0.55 ) }
    dend_26 { pt3dadd( 209.196, 150.401, -1.42722, 0.55 ) }
    dend_26 { pt3dadd( 210.902, 151.725, -0.329647, 0.83 ) }
    dend_26 { pt3dadd( 212.261, 152.742, 0.448143, 0.55 ) }
    dend_26 { pt3dadd( 213.943, 153.97, 1.35086, 0.28 ) }
    dend_26 { pt3dadd( 215.207, 154.774, 1.93831, 0.55 ) }
    dend_26 { pt3dadd( 224.064, 159.286, 0.459202, 0.55 ) }
    dend_26 { pt3dadd( 232.7, 163.851, -1.90231, 0.55 ) }
    dend_26 { pt3dadd( 241.658, 168.35, -2.62721, 0.55 ) }
    dend_26 { pt3dadd( 250.82, 172.298, -3.84062, 0.55 ) }
    dend_26 { pt3dadd( 260.051, 175.273, -6.473, 0.55 ) }
    dend_26 { pt3dadd( 268.706, 179.093, -9.86601, 0.55 ) }
    dend_26 { pt3dadd( 277.56, 181.535, -13.946, 0.55 ) }
    dend_26 { pt3dadd( 286.861, 182.996, -17.4622, 0.55 ) }
    dend_26 { pt3dadd( 295.774, 184.407, -21.886, 0.55 ) }
    dend_26 { pt3dadd( 304.268, 185.888, -27.0492, 0.55 ) }
    // Section: dend_25, id: dend_25, parent: soma_0 (entry count 29/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 5.82941, 1.93406, -1.46898, 0.55 ) }
    dend_25 { pt3dadd( 7.84006, 2.53986, -1.9699, 0.55 ) }
    dend_25 { pt3dadd( 9.17514, 2.95966, -2.30688, 1.11 ) }
    dend_25 { pt3dadd( 11.48, 3.52512, -2.86833, 0.55 ) }
    dend_25 { pt3dadd( 12.8975, 3.74304, -3.33886, 0.83 ) }
    dend_25 { pt3dadd( 16.0304, 4.04808, -4.62096, 0.83 ) }
    dend_25 { pt3dadd( 18.6604, 4.23836, -5.86718, 0.55 ) }
    dend_25 { pt3dadd( 20.9824, 4.36711, -7.09612, 0.83 ) }
    dend_25 { pt3dadd( 23.081, 4.49518, -8.18416, 0.55 ) }
    dend_25 { pt3dadd( 26.7659, 4.76189, -10.0113, 0.55 ) }
    dend_25 { pt3dadd( 29.316, 4.93626, -11.0875, 0.55 ) }
    dend_25 { pt3dadd( 31.9921, 5.12554, -12.0818, 1.11 ) }
    dend_25 { pt3dadd( 35.5068, 5.34866, -12.9334, 0.55 ) }
    dend_25 { pt3dadd( 37.9088, 5.55847, -13.1797, 0.55 ) }
    dend_25 { pt3dadd( 39.5011, 5.79267, -13.0545, 0.55 ) }
    dend_25 { pt3dadd( 43.0008, 6.31916, -12.4106, 0.83 ) }
    dend_25 { pt3dadd( 46.2653, 6.71192, -11.6362, 0.55 ) }
    dend_25 { pt3dadd( 48.7678, 6.96768, -10.9858, 0.55 ) }
    dend_25 { pt3dadd( 51.7061, 7.11943, -10.387, 0.55 ) }
    dend_25 { pt3dadd( 55.6569, 7.30725, -10.1952, 0.83 ) }
    dend_25 { pt3dadd( 58.5952, 7.3934, -10.4517, 0.28 ) }
    dend_25 { pt3dadd( 59.4173, 7.38326, -10.6446, 0.55 ) }
    dend_25 { pt3dadd( 60.7113, 7.28694, -11.0477, 0.55 ) }
    dend_25 { pt3dadd( 63.7854, 6.72293, -12.4282, 0.55 ) }
    dend_25 { pt3dadd( 67.7382, 5.62838, -14.5864, 0.55 ) }
    dend_25 { pt3dadd( 70.2492, 4.76376, -16.2538, 0.55 ) }
    dend_25 { pt3dadd( 72.5654, 3.93615, -17.8912, 0.28 ) }
    dend_25 { pt3dadd( 73.9656, 3.44507, -18.913, 0.55 ) }
    dend_25 { pt3dadd( 76.9916, 2.44045, -21.0973, 0.28 ) }
    dend_25 { pt3dadd( 78.6011, 1.98168, -22.3006, 0.55 ) }
    dend_25 { pt3dadd( 82.386, 1.12049, -25.1456, 0.28 ) }
    dend_25 { pt3dadd( 84.1364, 0.94994, -26.5202, 0.55 ) }
    dend_25 { pt3dadd( 87.1595, 1.13738, -28.9003, 0.28 ) }
    dend_25 { pt3dadd( 88.8503, 1.53066, -30.1699, 0.55 ) }
    dend_25 { pt3dadd( 91.274, 2.56097, -31.8262, 0.28 ) }
    dend_25 { pt3dadd( 92.572, 3.27135, -32.7022, 0.83 ) }
    dend_25 { pt3dadd( 95.2372, 4.99249, -34.4525, 0.28 ) }
    dend_25 { pt3dadd( 97.0277, 6.20067, -35.765, 0.55 ) }
    dend_25 { pt3dadd( 98.9907, 7.57668, -37.3218, 0.28 ) }
    dend_25 { pt3dadd( 100.052, 8.27989, -38.153, 0.55 ) }
    dend_25 { pt3dadd( 103.996, 10.7124, -41.0284, 0.28 ) }
    dend_25 { pt3dadd( 105.299, 11.3924, -41.9219, 0.55 ) }
    dend_25 { pt3dadd( 108.248, 12.7891, -43.673, 0.28 ) }
    dend_25 { pt3dadd( 109.26, 13.2308, -44.2021, 1.11 ) }
    dend_25 { pt3dadd( 111.211, 14.017, -45.11, 0.28 ) }
    dend_25 { pt3dadd( 112.393, 14.4999, -45.5587, 1.11 ) }
    dend_25 { pt3dadd( 116.973, 16.4796, -46.7469, 0.28 ) }
    dend_25 { pt3dadd( 120.726, 18.1619, -47.5175, 0.28 ) }
    dend_25 { pt3dadd( 122.995, 19.2834, -47.775, 0.83 ) }
    dend_25 { pt3dadd( 126.074, 21.0235, -47.9602, 0.28 ) }
    dend_25 { pt3dadd( 127.106, 21.686, -47.9754, 0.55 ) }
    dend_25 { pt3dadd( 129.165, 23.2282, -47.8195, 0.28 ) }
    dend_25 { pt3dadd( 130.878, 24.7751, -47.5005, 1.11 ) }
    dend_25 { pt3dadd( 134.268, 28.26, -46.6677, 0.28 ) }
    dend_25 { pt3dadd( 137.112, 31.4759, -45.8533, 0.28 ) }
    dend_25 { pt3dadd( 137.93, 32.4938, -45.5832, 0.55 ) }
    dend_25 { pt3dadd( 139.781, 34.9098, -44.9812, 0.28 ) }
    dend_25 { pt3dadd( 140.544, 35.9741, -44.7319, 1.66 ) }
    dend_25 { pt3dadd( 141.577, 37.4512, -44.3745, 0.28 ) }
    dend_25 { pt3dadd( 142.871, 39.2927, -44.0386, 0.55 ) }
    dend_25 { pt3dadd( 143.677, 40.3892, -43.85, 0.28 ) }
    dend_25 { pt3dadd( 144.738, 41.7234, -43.7975, 0.55 ) }
    dend_25 { pt3dadd( 146.029, 43.2688, -43.9256, 0.28 ) }
    dend_25 { pt3dadd( 146.851, 44.1938, -44.16, 0.55 ) }
    dend_25 { pt3dadd( 148.232, 45.7416, -44.6511, 0.28 ) }
    dend_25 { pt3dadd( 149.452, 47.1022, -45.1686, 1.11 ) }
    dend_25 { pt3dadd( 152.419, 50.2694, -46.6243, 0.28 ) }
    dend_25 { pt3dadd( 153.398, 51.2686, -47.1843, 0.55 ) }
    dend_25 { pt3dadd( 156.625, 54.5319, -49.3406, 0.28 ) }
    dend_25 { pt3dadd( 158.089, 55.9914, -50.4334, 0.55 ) }
    // Section: dend_20, id: dend_20, parent: soma_0 (entry count 99/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( -5.12059, 9.35406, 7.96102, 1.11 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_20 { pt3dadd( -7.02185, 9.13493, 7.05485, 1.11 ) }
    dend_20 { pt3dadd( -11.1608, 8.65792, 5.08218, 1.11 ) }
    dend_20 { pt3dadd( -16.6368, 8.0268, 2.47224, 1.38 ) }
    // Section: dend_13, id: dend_13, parent: soma_0 (entry count 3/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -2.92059, 10.7341, 0.421023, 2.22 ) }
    dend_13 { pt3dadd( -2.73646, 13.0943, -0.784214, 2.22 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 5/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 2.75941, -11.7459, 2.43102, 2.49 ) }
    dend_0 { pt3dadd( 3.35001, -16.4831, 2.43102, 2.49 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 7/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 3.65377, -11.9555, 0.0201467, 0.830559 ) }
    axon_0 { pt3dadd( 8.12441, -26.2738, 0.0201467, 0.830559 ) }
    axon_0 { pt3dadd( 12.5951, -40.5921, 0.0201467, 0.830559 ) }
    // Section: dend_24, id: dend_24, parent: dend_20 (entry count 10/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( -16.6368, 8.0268, 2.47224, 0.55 ) }
    dend_24 { pt3dadd( -17.348, 7.71042, 2.80942, 0.55 ) }
    dend_24 { pt3dadd( -17.8723, 7.40361, 3.0762, 0.55 ) }
    dend_24 { pt3dadd( -18.4011, 7.08388, 3.33345, 0.55 ) }
    dend_24 { pt3dadd( -18.962, 6.77074, 3.58873, 0.55 ) }
    dend_24 { pt3dadd( -19.8415, 6.31871, 4.0024, 0.55 ) }
    dend_24 { pt3dadd( -20.8465, 5.85917, 4.47792, 0.55 ) }
    dend_24 { pt3dadd( -21.9987, 5.41835, 5.03136, 0.83 ) }
    dend_24 { pt3dadd( -23.3328, 4.99879, 5.66263, 0.55 ) }
    dend_24 { pt3dadd( -24.2007, 4.80163, 6.07811, 0.55 ) }
    dend_24 { pt3dadd( -25.1363, 4.67181, 6.51285, 0.55 ) }
    dend_24 { pt3dadd( -25.9501, 4.6193, 6.87419, 0.55 ) }
    dend_24 { pt3dadd( -26.8664, 4.63391, 7.26066, 0.55 ) }
    dend_24 { pt3dadd( -27.6584, 4.6769, 7.58552, 0.55 ) }
    dend_24 { pt3dadd( -28.4665, 4.7378, 7.92263, 0.55 ) }
    dend_24 { pt3dadd( -29.1273, 4.7667, 8.1864, 0.55 ) }
    dend_24 { pt3dadd( -29.8496, 4.77051, 8.45311, 0.55 ) }
    dend_24 { pt3dadd( -30.6579, 4.74944, 8.74037, 0.55 ) }
    dend_24 { pt3dadd( -31.6187, 4.74834, 9.07298, 0.55 ) }
    dend_24 { pt3dadd( -32.7843, 4.79808, 9.47131, 0.55 ) }
    dend_24 { pt3dadd( -33.1996, 4.8366, 9.60928, 0.55 ) }
    dend_24 { pt3dadd( -34.374, 5.00036, 10.0038, 0.83 ) }
    dend_24 { pt3dadd( -35.3011, 5.1491, 10.3424, 0.55 ) }
    dend_24 { pt3dadd( -36.5851, 5.39384, 10.8535, 0.55 ) }
    dend_24 { pt3dadd( -37.0874, 5.5037, 11.0553, 0.83 ) }
    dend_24 { pt3dadd( -38.1719, 5.72815, 11.4988, 0.55 ) }
    dend_24 { pt3dadd( -38.9258, 5.89236, 11.8177, 0.55 ) }
    dend_24 { pt3dadd( -39.7305, 6.04765, 12.1522, 0.55 ) }
    dend_24 { pt3dadd( -40.3334, 6.13713, 12.3979, 0.55 ) }
    dend_24 { pt3dadd( -40.7874, 6.1822, 12.5593, 0.28 ) }
    dend_24 { pt3dadd( -41.7895, 6.24588, 12.8546, 0.55 ) }
    dend_24 { pt3dadd( -42.381, 6.25409, 13.0129, 0.55 ) }
    dend_24 { pt3dadd( -42.9925, 6.23337, 13.1798, 0.55 ) }
    dend_24 { pt3dadd( -43.9451, 6.19394, 13.4239, 0.83 ) }
    dend_24 { pt3dadd( -44.6261, 6.1419, 13.5964, 0.55 ) }
    dend_24 { pt3dadd( -45.4744, 6.06141, 13.8375, 0.55 ) }
    dend_24 { pt3dadd( -46.2761, 5.98617, 14.0959, 0.55 ) }
    dend_24 { pt3dadd( -47.0383, 5.91302, 14.3642, 0.55 ) }
    dend_24 { pt3dadd( -47.7508, 5.85435, 14.6606, 0.55 ) }
    dend_24 { pt3dadd( -50.671, 5.7632, 16.4451, 0.55 ) }
    dend_24 { pt3dadd( -53.7785, 5.07115, 17.7038, 0.55 ) }
    dend_24 { pt3dadd( -56.9095, 4.82169, 19.0659, 0.55 ) }
    dend_24 { pt3dadd( -59.8311, 4.18517, 20.7331, 0.55 ) }
    dend_24 { pt3dadd( -62.1857, 3.09588, 22.9669, 0.55 ) }
    dend_24 { pt3dadd( -64.3619, 1.20577, 24.8141, 0.55 ) }
    dend_24 { pt3dadd( -66.4445, -1.1383, 26.1884, 0.55 ) }
    dend_24 { pt3dadd( -68.7105, -2.94265, 28.0132, 0.55 ) }
    dend_24 { pt3dadd( -70.9942, -4.70869, 29.8534, 0.55 ) }
    dend_24 { pt3dadd( -73.4235, -6.18902, 31.758, 0.55 ) }
    dend_24 { pt3dadd( -75.2691, -7.66691, 34.2339, 0.55 ) }
    dend_24 { pt3dadd( -76.7428, -9.52045, 36.7064, 0.55 ) }
    dend_24 { pt3dadd( -77.6602, -10.9502, 39.6787, 0.55 ) }
    dend_24 { pt3dadd( -77.9059, -11.9971, 42.9289, 0.55 ) }
    dend_24 { pt3dadd( -77.9188, -13.1874, 46.1388, 0.55 ) }
    dend_24 { pt3dadd( -77.4681, -14.762, 49.1451, 0.55 ) }
    dend_24 { pt3dadd( -77.34, -16.3457, 52.1776, 0.55 ) }
    dend_24 { pt3dadd( -77.4679, -18.2734, 55.0039, 0.55 ) }
    dend_24 { pt3dadd( -78.2515, -20.1909, 57.7296, 0.55 ) }
    dend_24 { pt3dadd( -79.1552, -21.6924, 60.6706, 0.55 ) }
    dend_24 { pt3dadd( -79.7365, -23.6288, 63.4334, 0.55 ) }
    dend_24 { pt3dadd( -79.7052, -25.7441, 66.125, 0.55 ) }
    dend_24 { pt3dadd( -79.1172, -28.2346, 68.3993, 0.55 ) }
    dend_24 { pt3dadd( -78.2563, -30.614, 70.7053, 0.55 ) }
    dend_24 { pt3dadd( -77.3716, -33.1329, 72.8483, 0.55 ) }
    dend_24 { pt3dadd( -76.3576, -35.7121, 74.8584, 0.55 ) }
    dend_24 { pt3dadd( -75.442, -38.0854, 77.1496, 0.55 ) }
    dend_24 { pt3dadd( -74.3073, -40.7174, 79.0219, 0.55 ) }
    dend_24 { pt3dadd( -72.87, -43.237, 80.8402, 0.55 ) }
    dend_24 { pt3dadd( -71.4527, -45.6373, 82.8276, 0.55 ) }
    dend_24 { pt3dadd( -69.9816, -48.1244, 84.6636, 0.55 ) }
    dend_24 { pt3dadd( -69.1654, -50.6797, 86.7908, 0.55 ) }
    dend_24 { pt3dadd( -68.92, -53.5828, 88.5887, 0.55 ) }
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 82/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( -16.6368, 8.0268, 2.47224, 0.83 ) }
    dend_21 { pt3dadd( -19.3901, 10.2366, 2.10581, 0.83 ) }
    dend_21 { pt3dadd( -20.5485, 11.2861, 1.18731, 0.83 ) }
    dend_21 { pt3dadd( -21.9066, 12.5163, 0.110552, 1.38 ) }
    dend_21 { pt3dadd( -23.8672, 14.2924, -1.44402, 1.11 ) }
    dend_21 { pt3dadd( -25.811, 16.0533, -2.9852, 1.11 ) }
    dend_21 { pt3dadd( -27.4966, 17.5803, -4.32173, 1.11 ) }
    dend_21 { pt3dadd( -33.2843, 24.0512, -11.0, 1.11 ) }
    // Section: dend_19, id: dend_19, parent: dend_13 (entry count 90/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -2.73646, 13.0943, -0.784214, 1.66 ) }
    dend_19 { pt3dadd( -3.54234, 16.0668, -2.33696, 1.66 ) }
    dend_19 { pt3dadd( -4.40569, 18.7223, -3.6964, 1.94 ) }
    dend_19 { pt3dadd( -5.1364, 21.1075, -4.87988, 0.83 ) }
    dend_19 { pt3dadd( -5.88255, 24.128, -6.38178, 0.83 ) }
    dend_19 { pt3dadd( -6.40326, 26.366, -7.61889, 0.83 ) }
    dend_19 { pt3dadd( -7.13233, 30.4452, -9.8498, 0.83 ) }
    dend_19 { pt3dadd( -7.54829, 33.2576, -11.4882, 0.83 ) }
    dend_19 { pt3dadd( -7.8497, 35.6002, -12.8706, 0.83 ) }
    dend_19 { pt3dadd( -8.19221, 39.0562, -14.8181, 1.38 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_19 { pt3dadd( -8.58766, 44.5248, -18.0548, 0.83 ) }
    dend_19 { pt3dadd( -8.83743, 51.2445, -21.8602, 0.83 ) }
    dend_19 { pt3dadd( -8.69588, 56.0643, -24.3253, 0.83 ) }
    dend_19 { pt3dadd( -8.48435, 59.2758, -25.8979, 0.83 ) }
    dend_19 { pt3dadd( -8.09219, 64.0051, -28.037, 0.83 ) }
    dend_19 { pt3dadd( -7.31963, 71.325, -31.0852, 0.83 ) }
    dend_19 { pt3dadd( -6.79221, 74.9208, -32.435, 0.83 ) }
    dend_19 { pt3dadd( -5.74257, 81.2362, -34.6648, 0.83 ) }
    dend_19 { pt3dadd( -4.75095, 86.5925, -36.444, 0.83 ) }
    dend_19 { pt3dadd( -4.32246, 88.8388, -37.2442, 1.94 ) }
    dend_19 { pt3dadd( -3.93125, 91.3816, -38.1128, 1.11 ) }
    dend_19 { pt3dadd( -3.65653, 93.9474, -38.9107, 0.55 ) }
    dend_19 { pt3dadd( -3.48419, 96.533, -39.8914, 1.38 ) }
    dend_19 { pt3dadd( -3.31114, 102.874, -42.4948, 0.55 ) }
    dend_19 { pt3dadd( -3.28118, 107.253, -44.3507, 1.11 ) }
    dend_19 { pt3dadd( -3.31805, 112.993, -46.8898, 0.55 ) }
    dend_19 { pt3dadd( -3.38715, 116.486, -48.4638, 1.94 ) }
    dend_19 { pt3dadd( -3.67567, 123.89, -51.8338, 0.28 ) }
    dend_19 { pt3dadd( -3.8124, 126.123, -52.8204, 0.83 ) }
    dend_19 { pt3dadd( -4.08664, 129.026, -54.0136, 0.28 ) }
    dend_19 { pt3dadd( -4.31753, 131.173, -54.8268, 1.66 ) }
    dend_19 { pt3dadd( -4.86463, 135.762, -56.3765, 0.55 ) }
    dend_19 { pt3dadd( -5.16558, 137.901, -56.9027, 0.28 ) }
    dend_19 { pt3dadd( -6.01302, 143.693, -57.6782, 0.55 ) }
    dend_19 { pt3dadd( -6.41569, 146.537, -58.0698, 0.83 ) }
    dend_19 { pt3dadd( -6.75285, 149.336, -58.4265, 0.83 ) }
    dend_19 { pt3dadd( -6.95864, 151.364, -58.7296, 0.55 ) }
    dend_19 { pt3dadd( -7.13469, 154.086, -59.2063, 0.55 ) }
    dend_19 { pt3dadd( -7.06662, 158.513, -60.1956, 1.11 ) }
    dend_19 { pt3dadd( -6.48379, 162.792, -61.32, 0.28 ) }
    dend_19 { pt3dadd( -5.96991, 164.856, -61.9012, 0.55 ) }
    dend_19 { pt3dadd( -5.05129, 167.489, -62.813, 0.28 ) }
    dend_19 { pt3dadd( -4.48436, 168.821, -63.3368, 0.55 ) }
    dend_19 { pt3dadd( -3.27447, 171.306, -64.3831, 0.55 ) }
    dend_19 { pt3dadd( -1.65942, 174.441, -65.7052, 0.83 ) }
    dend_19 { pt3dadd( -0.730674, 176.34, -66.4109, 0.55 ) }
    dend_19 { pt3dadd( 1.19646, 180.563, -67.9923, 1.38 ) }
    dend_19 { pt3dadd( 2.98653, 184.554, -69.5739, 0.55 ) }
    dend_19 { pt3dadd( 3.92479, 186.894, -70.6027, 0.28 ) }
    dend_19 { pt3dadd( 4.60732, 188.829, -71.496, 0.55 ) }
    dend_19 { pt3dadd( 5.40313, 191.581, -72.7303, 0.28 ) }
    dend_19 { pt3dadd( 5.96231, 193.877, -73.6642, 1.11 ) }
    dend_19 { pt3dadd( 6.66658, 197.089, -74.7099, 0.55 ) }
    dend_19 { pt3dadd( 7.25549, 200.001, -75.5396, 0.28 ) }
    dend_19 { pt3dadd( 7.81759, 202.828, -76.2292, 0.55 ) }
    dend_19 { pt3dadd( 8.6604, 206.8, -77.0712, 0.55 ) }
    dend_19 { pt3dadd( 9.21801, 209.208, -77.456, 0.55 ) }
    dend_19 { pt3dadd( 10.1408, 213.202, -78.0426, 0.55 ) }
    dend_19 { pt3dadd( 10.8305, 216.031, -78.4519, 0.28 ) }
    dend_19 { pt3dadd( 11.5117, 218.667, -78.9163, 0.55 ) }
    dend_19 { pt3dadd( 12.4326, 222.193, -79.6973, 0.83 ) }
    dend_19 { pt3dadd( 13.3782, 225.65, -80.7623, 0.55 ) }
    dend_19 { pt3dadd( 14.2029, 228.861, -82.167, 0.28 ) }
    dend_19 { pt3dadd( 14.668, 231.071, -83.5478, 0.55 ) }
    dend_19 { pt3dadd( 14.9463, 232.985, -84.9094, 0.55 ) }
    dend_19 { pt3dadd( 15.0009, 234.009, -85.714, 0.55 ) }
    dend_19 { pt3dadd( 14.9925, 237.679, -88.7, 0.28 ) }
    dend_19 { pt3dadd( 14.9355, 240.537, -90.8685, 1.11 ) }
    dend_19 { pt3dadd( 14.8292, 245.732, -94.2074, 0.83 ) }
    dend_19 { pt3dadd( 14.9128, 248.541, -95.7578, 0.55 ) }
    dend_19 { pt3dadd( 15.1884, 252.211, -97.4588, 0.83 ) }
    dend_19 { pt3dadd( 15.4087, 254.087, -98.1204, 0.83 ) }
    dend_19 { pt3dadd( 15.9536, 257.413, -98.8285, 0.28 ) }
    dend_19 { pt3dadd( 16.3447, 259.444, -99.0413, 0.55 ) }
    dend_19 { pt3dadd( 17.4537, 264.477, -99.2284, 0.55 ) }
    dend_19 { pt3dadd( 18.6895, 269.566, -99.325, 0.28 ) }
    dend_19 { pt3dadd( 19.8041, 273.995, -99.326, 0.55 ) }
    dend_19 { pt3dadd( 20.503, 276.96, -99.3724, 1.11 ) }
    dend_19 { pt3dadd( 21.1235, 279.702, -99.5087, 0.55 ) }
    dend_19 { pt3dadd( 21.5395, 281.759, -99.6665, 0.28 ) }
    dend_19 { pt3dadd( 21.679, 282.841, -99.7385, 0.55 ) }
    dend_19 { pt3dadd( 21.8663, 284.627, -99.7776, 0.28 ) }
    dend_19 { pt3dadd( 21.9063, 285.531, -99.7257, 0.55 ) }
    dend_19 { pt3dadd( 21.9532, 287.585, -99.4719, 0.55 ) }
    dend_19 { pt3dadd( 22.0527, 289.774, -99.092, 0.83 ) }
    dend_19 { pt3dadd( 22.378, 294.573, -97.9737, 0.55 ) }
    dend_19 { pt3dadd( 22.718, 298.502, -97.0345, 0.83 ) }
    dend_19 { pt3dadd( 23.3124, 304.269, -95.7571, 0.55 ) }
    dend_19 { pt3dadd( 23.614, 306.982, -95.2838, 0.55 ) }
    dend_19 { pt3dadd( 24.2057, 311.96, -94.627, 0.28 ) }
    dend_19 { pt3dadd( 24.5762, 314.784, -94.4809, 1.38 ) }
    dend_19 { pt3dadd( 25.0982, 318.324, -94.6909, 0.55 ) }
    dend_19 { pt3dadd( 25.5677, 321.58, -95.2612, 0.83 ) }
    dend_19 { pt3dadd( 25.8703, 324.789, -96.3321, 0.28 ) }
    dend_19 { pt3dadd( 25.8935, 325.759, -96.7232, 0.55 ) }
    dend_19 { pt3dadd( 25.7368, 328.61, -98.1291, 0.28 ) }
    dend_19 { pt3dadd( 25.5301, 330.506, -99.1272, 0.55 ) }
    dend_19 { pt3dadd( 25.2512, 332.353, -100.038, 0.55 ) }
    dend_19 { pt3dadd( 24.4079, 337.155, -102.281, 0.28 ) }
    dend_19 { pt3dadd( 24.1327, 338.709, -102.986, 0.83 ) }
    dend_19 { pt3dadd( 23.5316, 342.153, -104.551, 0.55 ) }
    dend_19 { pt3dadd( 22.8826, 345.911, -106.247, 0.28 ) }
    dend_19 { pt3dadd( 22.4861, 348.13, -107.206, 0.55 ) }
    dend_19 { pt3dadd( 22.0596, 350.945, -108.176, 0.28 ) }
    dend_19 { pt3dadd( 21.9576, 351.696, -108.369, 0.55 ) }
    dend_19 { pt3dadd( 21.66, 353.727, -108.767, 0.28 ) }
    dend_19 { pt3dadd( 21.3944, 355.43, -109.001, 0.55 ) }
    dend_19 { pt3dadd( 20.8592, 358.611, -109.33, 0.28 ) }
    dend_19 { pt3dadd( 19.9077, 363.708, -109.795, 0.55 ) }
    dend_19 { pt3dadd( 19.195, 367.15, -110.177, 1.11 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_19 { pt3dadd( 18.1032, 372.238, -110.994, 0.55 ) }
    dend_19 { pt3dadd( 17.7351, 373.931, -111.325, 0.83 ) }
    dend_19 { pt3dadd( 16.7566, 378.272, -112.432, 0.55 ) }
    dend_19 { pt3dadd( 15.7019, 382.839, -113.854, 0.55 ) }
    dend_19 { pt3dadd( 15.1281, 385.621, -114.99, 0.83 ) }
    dend_19 { pt3dadd( 14.6251, 389.729, -116.921, 0.28 ) }
    dend_19 { pt3dadd( 14.5598, 392.187, -118.161, 0.83 ) }
    dend_19 { pt3dadd( 14.7321, 395.648, -119.756, 0.28 ) }
    dend_19 { pt3dadd( 14.8739, 396.91, -120.286, 0.55 ) }
    dend_19 { pt3dadd( 15.6733, 402.068, -122.32, 0.28 ) }
    dend_19 { pt3dadd( 16.4678, 406.443, -123.783, 0.28 ) }
    dend_19 { pt3dadd( 17.279, 410.4, -124.902, 0.28 ) }
    dend_19 { pt3dadd( 18.663, 416.342, -126.39, 0.28 ) }
    dend_19 { pt3dadd( 19.0776, 417.981, -126.676, 0.55 ) }
    // Section: dend_14, id: dend_14, parent: dend_13 (entry count 14/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( -2.73646, 13.0943, -0.784214, 0.83 ) }
    dend_14 { pt3dadd( -5.05372, 16.0572, -0.59513, 0.83 ) }
    dend_14 { pt3dadd( -6.7768, 18.4518, -0.632579, 0.83 ) }
    dend_14 { pt3dadd( -7.92224, 20.2072, -0.717596, 0.55 ) }
    dend_14 { pt3dadd( -8.89461, 21.7942, -0.853174, 0.83 ) }
    dend_14 { pt3dadd( -9.70984, 23.0964, -1.03037, 0.55 ) }
    dend_14 { pt3dadd( -10.8301, 24.9087, -1.31338, 0.83 ) }
    dend_14 { pt3dadd( -12.3285, 27.4713, -2.56568, 0.83 ) }
    dend_14 { pt3dadd( -13.332, 29.237, -3.77751, 0.83 ) }
    dend_14 { pt3dadd( -14.0372, 30.4982, -4.76246, 0.83 ) }
    dend_14 { pt3dadd( -15.4235, 32.9263, -6.66601, 0.55 ) }
    dend_14 { pt3dadd( -16.5263, 34.8765, -8.20161, 0.83 ) }
    dend_14 { pt3dadd( -21.3069, 43.4784, -14.6691, 0.83 ) }
    dend_14 { pt3dadd( -22.4322, 45.5249, -16.0687, 0.83 ) }
    dend_14 { pt3dadd( -24.3456, 49.1043, -18.2362, 0.83 ) }
    dend_14 { pt3dadd( -26.221, 52.9248, -20.0772, 0.83 ) }
    dend_14 { pt3dadd( -27.6869, 56.1729, -21.2144, 0.83 ) }
    dend_14 { pt3dadd( -29.6202, 60.8235, -22.2126, 0.83 ) }
    dend_14 { pt3dadd( -30.9602, 64.5431, -22.4749, 0.83 ) }
    dend_14 { pt3dadd( -32.0005, 67.9412, -22.6816, 0.83 ) }
    dend_14 { pt3dadd( -33.064, 72.4868, -22.8812, 0.83 ) }
    dend_14 { pt3dadd( -33.7418, 76.5536, -22.9594, 0.83 ) }
    dend_14 { pt3dadd( -34.3054, 81.5414, -22.8654, 0.83 ) }
    dend_14 { pt3dadd( -34.5193, 85.005, -22.8309, 0.83 ) }
    dend_14 { pt3dadd( -34.5948, 87.5899, -22.8844, 0.55 ) }
    dend_14 { pt3dadd( -34.6955, 90.7742, -23.0605, 1.11 ) }
    dend_14 { pt3dadd( -34.769, 94.4746, -23.3759, 0.55 ) }
    dend_14 { pt3dadd( -34.7737, 98.067, -23.7262, 0.55 ) }
    dend_14 { pt3dadd( -34.8546, 101.222, -24.0532, 0.55 ) }
    dend_14 { pt3dadd( -35.1011, 104.076, -24.3348, 0.55 ) }
    dend_14 { pt3dadd( -35.6578, 107.728, -24.65, 0.83 ) }
    // Section: dend_6, id: dend_6, parent: dend_0 (entry count 45/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 3.35001, -16.4831, 2.43102, 0.83 ) }
    dend_6 { pt3dadd( 3.64947, -18.1176, 3.5367, 0.83 ) }
    dend_6 { pt3dadd( 4.19231, -21.0806, 5.54105, 1.66 ) }
    dend_6 { pt3dadd( 4.70862, -23.8988, 7.44743, 1.94 ) }
    dend_6 { pt3dadd( 5.29052, -27.0749, 9.59596, 1.94 ) }
    dend_6 { pt3dadd( 6.15903, -31.8155, 12.8028, 1.66 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 51/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 3.35001, -16.4831, 2.43102, 0.83 ) }
    dend_1 { pt3dadd( 2.11079, -19.5676, 2.61014, 0.83 ) }
    dend_1 { pt3dadd( 1.08931, -21.8396, 2.83657, 0.83 ) }
    dend_1 { pt3dadd( 0.497442, -23.1504, 2.93925, 0.55 ) }
    dend_1 { pt3dadd( -0.46618, -25.0036, 3.02425, 1.11 ) }
    dend_1 { pt3dadd( -1.49827, -26.9089, 3.04517, 0.83 ) }
    dend_1 { pt3dadd( -2.14406, -28.1785, 3.0321, 0.55 ) }
    dend_1 { pt3dadd( -3.32572, -30.4733, 2.83323, 0.83 ) }
    dend_1 { pt3dadd( -4.67316, -33.0078, 2.42481, 0.55 ) }
    dend_1 { pt3dadd( -5.74616, -35.0466, 1.82763, 0.55 ) }
    dend_1 { pt3dadd( -6.57756, -36.642, 1.17081, 0.83 ) }
    dend_1 { pt3dadd( -7.83995, -39.0842, -0.0544856, 0.83 ) }
    dend_1 { pt3dadd( -9.18813, -41.6532, -1.52355, 0.55 ) }
    dend_1 { pt3dadd( -10.0585, -43.4502, -2.7014, 0.55 ) }
    dend_1 { pt3dadd( -11.2379, -45.8612, -4.44643, 1.11 ) }
    dend_1 { pt3dadd( -11.8215, -47.0179, -5.43749, 0.55 ) }
    dend_1 { pt3dadd( -12.1257, -47.5345, -5.96926, 0.55 ) }
    dend_1 { pt3dadd( -12.799, -48.5409, -7.12766, 0.55 ) }
    dend_1 { pt3dadd( -13.6047, -49.6803, -8.49831, 0.83 ) }
    dend_1 { pt3dadd( -14.7505, -51.1562, -10.3401, 0.83 ) }
    dend_1 { pt3dadd( -16.917, -53.6049, -13.2892, 0.55 ) }
    dend_1 { pt3dadd( -17.9794, -54.6603, -14.5397, 0.28 ) }
    dend_1 { pt3dadd( -18.9064, -55.5585, -15.5432, 0.83 ) }
    dend_1 { pt3dadd( -20.1186, -56.7207, -16.755, 0.55 ) }
    dend_1 { pt3dadd( -20.8124, -57.409, -17.3824, 0.55 ) }
    dend_1 { pt3dadd( -22.2645, -59.0638, -18.5776, 1.38 ) }
    dend_1 { pt3dadd( -24.6874, -62.3391, -20.3272, 0.55 ) }
    dend_1 { pt3dadd( -25.1839, -63.1859, -20.7141, 0.83 ) }
    dend_1 { pt3dadd( -25.8583, -65.0973, -21.445, 0.28 ) }
    dend_1 { pt3dadd( -26.0041, -66.0596, -21.7202, 1.11 ) }
    dend_1 { pt3dadd( -26.0491, -67.479, -22.051, 1.11 ) }
    dend_1 { pt3dadd( -25.9895, -68.4898, -22.2297, 1.11 ) }
    dend_1 { pt3dadd( -25.8286, -70.1982, -22.4076, 0.55 ) }
    dend_1 { pt3dadd( -25.4813, -74.1951, -22.7821, 0.28 ) }
    dend_1 { pt3dadd( -25.2177, -77.3809, -23.0232, 0.55 ) }
    dend_1 { pt3dadd( -25.088, -79.1669, -23.1733, 0.55 ) }
    dend_1 { pt3dadd( -24.911, -81.5794, -23.372, 1.94 ) }
    dend_1 { pt3dadd( -24.8156, -83.3063, -23.4929, 0.55 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 89/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 12.5951, -40.5921, 0.0201467, 0.75621 ) }
    axon_1 { pt3dadd( 17.0657, -54.9104, 0.0201467, 0.75621 ) }
    axon_1 { pt3dadd( 21.5363, -69.2287, 0.0201467, 0.75621 ) }
    // Section: dend_23, id: dend_23, parent: dend_21 (entry count 92/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( -33.2843, 24.0512, -11.0, 0.83 ) }
    dend_23 { pt3dadd( -33.694, 24.081, -11.0157, 0.83 ) }
    dend_23 { pt3dadd( -36.5808, 24.358, -11.015, 0.83 ) }
    dend_23 { pt3dadd( -39.9382, 24.8503, -11.1103, 0.83 ) }
    dend_23 { pt3dadd( -42.4153, 25.3087, -11.2984, 0.83 ) }
    dend_23 { pt3dadd( -45.5039, 25.9373, -11.6163, 0.83 ) }
    dend_23 { pt3dadd( -47.3468, 26.3497, -11.8266, 0.83 ) }
    dend_23 { pt3dadd( -49.8712, 27.0401, -12.1498, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_23 { pt3dadd( -53.6724, 28.3675, -12.7252, 1.38 ) }
    dend_23 { pt3dadd( -56.0006, 29.3073, -13.1172, 0.55 ) }
    dend_23 { pt3dadd( -57.3272, 29.8538, -13.3663, 0.55 ) }
    dend_23 { pt3dadd( -59.5852, 30.7621, -13.9462, 0.55 ) }
    dend_23 { pt3dadd( -62.3982, 31.8735, -14.7444, 0.55 ) }
    dend_23 { pt3dadd( -63.9928, 32.5278, -15.2235, 0.83 ) }
    dend_23 { pt3dadd( -66.488, 33.4987, -15.8679, 0.83 ) }
    dend_23 { pt3dadd( -68.9518, 34.4242, -16.5047, 0.55 ) }
    dend_23 { pt3dadd( -73.3024, 36.0275, -17.667, 0.55 ) }
    dend_23 { pt3dadd( -77.4603, 37.4634, -19.0343, 0.55 ) }
    dend_23 { pt3dadd( -79.2866, 38.0748, -19.6983, 0.55 ) }
    dend_23 { pt3dadd( -81.825, 38.839, -20.6592, 0.83 ) }
    dend_23 { pt3dadd( -84.5378, 39.6464, -21.7476, 0.55 ) }
    dend_23 { pt3dadd( -87.3544, 40.4951, -22.8795, 1.66 ) }
    dend_23 { pt3dadd( -91.7104, 41.7451, -24.5076, 0.28 ) }
    dend_23 { pt3dadd( -92.6373, 42.0335, -24.8533, 0.55 ) }
    dend_23 { pt3dadd( -95.335, 43.0227, -25.7009, 0.28 ) }
    dend_23 { pt3dadd( -96.5969, 43.5685, -26.0149, 0.55 ) }
    dend_23 { pt3dadd( -99.212, 44.8557, -26.4624, 0.55 ) }
    dend_23 { pt3dadd( -101.527, 46.1551, -26.6972, 0.55 ) }
    dend_23 { pt3dadd( -104.313, 47.9022, -26.8346, 0.83 ) }
    dend_23 { pt3dadd( -107.276, 49.8833, -27.0235, 0.55 ) }
    dend_23 { pt3dadd( -108.735, 50.9475, -27.1461, 0.55 ) }
    dend_23 { pt3dadd( -111.372, 52.9796, -27.4163, 0.55 ) }
    dend_23 { pt3dadd( -113.613, 54.9546, -27.797, 0.83 ) }
    dend_23 { pt3dadd( -115.057, 56.367, -28.1179, 0.55 ) }
    dend_23 { pt3dadd( -116.252, 57.6875, -28.4442, 0.55 ) }
    dend_23 { pt3dadd( -117.383, 59.0835, -28.7441, 0.28 ) }
    dend_23 { pt3dadd( -119.584, 61.9644, -29.2367, 0.55 ) }
    dend_23 { pt3dadd( -122.03, 65.2742, -29.5711, 0.28 ) }
    dend_23 { pt3dadd( -123.513, 67.294, -29.7248, 0.55 ) }
    dend_23 { pt3dadd( -125.241, 69.5003, -29.862, 0.28 ) }
    dend_23 { pt3dadd( -127.208, 71.7229, -29.9795, 0.55 ) }
    dend_23 { pt3dadd( -129.032, 73.5228, -30.0219, 0.83 ) }
    dend_23 { pt3dadd( -133.707, 77.4162, -30.0458, 0.55 ) }
    dend_23 { pt3dadd( -134.899, 78.2461, -30.0617, 1.11 ) }
    dend_23 { pt3dadd( -137.647, 79.9497, -30.2192, 0.55 ) }
    dend_23 { pt3dadd( -140.349, 81.4124, -30.423, 0.83 ) }
    dend_23 { pt3dadd( -143.088, 82.8451, -30.7192, 0.28 ) }
    dend_23 { pt3dadd( -144.07, 83.3352, -30.9208, 0.83 ) }
    dend_23 { pt3dadd( -146.584, 84.5495, -31.7027, 0.28 ) }
    dend_23 { pt3dadd( -147.76, 85.2014, -32.1414, 0.55 ) }
    dend_23 { pt3dadd( -149.423, 86.3568, -32.9971, 0.55 ) }
    dend_23 { pt3dadd( -151.455, 87.9567, -34.4451, 0.55 ) }
    dend_23 { pt3dadd( -153.761, 89.8363, -36.3651, 0.55 ) }
    dend_23 { pt3dadd( -155.514, 91.3444, -37.9337, 0.55 ) }
    dend_23 { pt3dadd( -156.711, 92.4013, -39.03, 0.55 ) }
    dend_23 { pt3dadd( -159.212, 94.7817, -41.634, 0.55 ) }
    dend_23 { pt3dadd( -161.075, 96.7411, -43.8746, 0.28 ) }
    dend_23 { pt3dadd( -161.662, 97.3872, -44.7219, 0.55 ) }
    dend_23 { pt3dadd( -162.348, 98.2114, -45.8145, 0.28 ) }
    dend_23 { pt3dadd( -163.296, 99.5583, -47.7806, 1.11 ) }
    dend_23 { pt3dadd( -164.196, 101.095, -50.0528, 0.55 ) }
    dend_23 { pt3dadd( -164.446, 101.608, -51.1648, 0.83 ) }
    dend_23 { pt3dadd( -165.1, 103.22, -55.3137, 0.28 ) }
    dend_23 { pt3dadd( -165.306, 103.777, -56.9633, 0.55 ) }
    dend_23 { pt3dadd( -165.549, 104.444, -59.1607, 0.28 ) }
    dend_23 { pt3dadd( -165.662, 104.756, -60.2268, 0.83 ) }
    dend_23 { pt3dadd( -166.987, 108.116, -71.5945, 0.55 ) }
    dend_23 { pt3dadd( -167.112, 108.445, -72.7571, 0.83 ) }
    dend_23 { pt3dadd( -167.472, 109.606, -76.9006, 0.28 ) }
    dend_23 { pt3dadd( -167.573, 109.959, -78.2378, 0.55 ) }
    dend_23 { pt3dadd( -167.709, 110.302, -79.6149, 0.28 ) }
    dend_23 { pt3dadd( -167.95, 110.909, -81.9748, 0.55 ) }
    // Section: dend_22, id: dend_22, parent: dend_21 (entry count 64/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( -33.2843, 24.0512, -11.0, 1.11 ) }
    dend_22 { pt3dadd( -33.7465, 26.3394, -15.8952, 1.11 ) }
    dend_22 { pt3dadd( -34.0372, 28.4176, -19.9353, 0.28 ) }
    dend_22 { pt3dadd( -34.1431, 28.81, -20.7207, 0.83 ) }
    dend_22 { pt3dadd( -34.6923, 30.6998, -24.2152, 0.28 ) }
    dend_22 { pt3dadd( -34.8342, 31.1968, -25.1072, 0.55 ) }
    dend_22 { pt3dadd( -35.3362, 33.1284, -28.3659, 0.55 ) }
    dend_22 { pt3dadd( -35.7349, 34.6447, -30.959, 2.22 ) }
    dend_22 { pt3dadd( -37.4739, 41.3352, -41.9093, 0.28 ) }
    dend_22 { pt3dadd( -37.7645, 42.4412, -43.6332, 1.94 ) }
    dend_22 { pt3dadd( -39.2419, 48.4517, -52.4613, 0.28 ) }
    dend_22 { pt3dadd( -39.5797, 49.8217, -54.435, 0.55 ) }
    dend_22 { pt3dadd( -40.0623, 51.7843, -57.2015, 0.28 ) }
    dend_22 { pt3dadd( -40.2748, 52.7047, -58.4064, 1.66 ) }
    dend_22 { pt3dadd( -40.7817, 55.1389, -61.2291, 0.28 ) }
    dend_22 { pt3dadd( -41.4131, 57.6692, -64.0416, 0.28 ) }
    dend_22 { pt3dadd( -41.9573, 59.411, -65.7726, 2.49 ) }
    dend_22 { pt3dadd( -43.674, 63.9216, -70.2975, 0.28 ) }
    dend_22 { pt3dadd( -45.0225, 67.1385, -73.2727, 0.28 ) }
    dend_22 { pt3dadd( -45.5494, 68.3994, -74.3013, 1.66 ) }
    dend_22 { pt3dadd( -46.7661, 71.3971, -76.3957, 0.28 ) }
    dend_22 { pt3dadd( -47.3959, 72.9798, -77.3256, 0.83 ) }
    dend_22 { pt3dadd( -48.9742, 77.1444, -79.5387, 0.28 ) }
    dend_22 { pt3dadd( -49.7017, 79.1627, -80.51, 1.11 ) }
    dend_22 { pt3dadd( -50.8251, 82.6021, -82.3822, 0.28 ) }
    dend_22 { pt3dadd( -51.5161, 85.1674, -83.8114, 0.28 ) }
    dend_22 { pt3dadd( -51.8854, 87.0516, -84.8528, 0.83 ) }
    dend_22 { pt3dadd( -52.307, 89.8247, -86.6006, 0.28 ) }
    dend_22 { pt3dadd( -52.3696, 90.2783, -86.8959, 0.83 ) }
    dend_22 { pt3dadd( -52.6099, 91.6953, -87.9498, 0.28 ) }
    dend_22 { pt3dadd( -52.8333, 92.8521, -88.865, 0.83 ) }
    dend_22 { pt3dadd( -53.0045, 93.8321, -89.6003, 0.83 ) }
    dend_22 { pt3dadd( -53.5655, 98.6566, -93.0407, 0.28 ) }
    dend_22 { pt3dadd( -53.6529, 100.68, -94.5768, 1.11 ) }
    dend_22 { pt3dadd( -53.5919, 102.575, -96.1049, 0.28 ) }
    dend_22 { pt3dadd( -53.4601, 103.675, -96.9844, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_22 { pt3dadd( -53.0933, 105.581, -98.6647, 0.28 ) }
    dend_22 { pt3dadd( -52.5685, 107.491, -100.479, 0.83 ) }
    dend_22 { pt3dadd( -51.3624, 110.949, -104.204, 0.28 ) }
    dend_22 { pt3dadd( -50.8407, 112.336, -105.942, 0.28 ) }
    dend_22 { pt3dadd( -50.379, 113.559, -107.754, 0.55 ) }
    dend_22 { pt3dadd( -49.5196, 115.942, -111.643, 0.28 ) }
    dend_22 { pt3dadd( -49.2832, 116.602, -112.757, 0.83 ) }
    dend_22 { pt3dadd( -48.6782, 118.566, -116.037, 0.28 ) }
    dend_22 { pt3dadd( -48.4435, 119.356, -117.352, 0.83 ) }
    dend_22 { pt3dadd( -47.8729, 121.226, -120.745, 0.28 ) }
    dend_22 { pt3dadd( -47.5943, 121.971, -122.148, 0.83 ) }
    dend_22 { pt3dadd( -47.1719, 122.741, -123.574, 0.28 ) }
    dend_22 { pt3dadd( -46.9902, 122.991, -124.058, 0.28 ) }
    dend_22 { pt3dadd( -46.2906, 123.781, -125.541, 0.83 ) }
    dend_22 { pt3dadd( -44.1067, 126.049, -129.921, 0.28 ) }
    dend_22 { pt3dadd( -43.6844, 126.444, -130.718, 0.55 ) }
    dend_22 { pt3dadd( -42.9389, 127.055, -132.31, 0.28 ) }
    dend_22 { pt3dadd( -42.566, 127.306, -133.197, 0.83 ) }
    // Section: dend_16, id: dend_16, parent: dend_14 (entry count 18/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -35.6578, 107.728, -24.65, 0.55 ) }
    dend_16 { pt3dadd( -34.5342, 111.261, -25.59, 0.55 ) }
    dend_16 { pt3dadd( -34.2376, 112.228, -25.8613, 0.28 ) }
    dend_16 { pt3dadd( -33.8201, 113.779, -26.3212, 0.55 ) }
    dend_16 { pt3dadd( -32.8829, 117.866, -27.7302, 0.28 ) }
    dend_16 { pt3dadd( -32.2253, 120.827, -28.8486, 0.55 ) }
    dend_16 { pt3dadd( -31.7358, 123.617, -29.9406, 0.55 ) }
    dend_16 { pt3dadd( -31.4416, 126.393, -31.0831, 0.55 ) }
    dend_16 { pt3dadd( -31.1776, 129.748, -32.5649, 0.55 ) }
    dend_16 { pt3dadd( -30.9255, 133.206, -34.1103, 0.55 ) }
    dend_16 { pt3dadd( -30.7766, 135.421, -35.0397, 0.55 ) }
    dend_16 { pt3dadd( -30.5886, 139.004, -36.4952, 0.55 ) }
    dend_16 { pt3dadd( -30.3999, 143.108, -37.9757, 0.55 ) }
    dend_16 { pt3dadd( -30.1648, 146.448, -38.9397, 0.55 ) }
    dend_16 { pt3dadd( -29.7146, 151.079, -39.8455, 0.28 ) }
    dend_16 { pt3dadd( -29.5358, 152.661, -40.0153, 0.55 ) }
    dend_16 { pt3dadd( -29.32, 154.321, -40.1231, 0.55 ) }
    dend_16 { pt3dadd( -28.9689, 156.592, -40.2074, 0.55 ) }
    dend_16 { pt3dadd( -28.7524, 158.263, -40.2062, 0.55 ) }
    dend_16 { pt3dadd( -28.5459, 160.88, -40.3079, 0.83 ) }
    dend_16 { pt3dadd( -28.3786, 163.384, -40.5306, 0.55 ) }
    dend_16 { pt3dadd( -28.0805, 166.171, -40.8071, 0.28 ) }
    dend_16 { pt3dadd( -27.6154, 169.599, -41.2178, 0.55 ) }
    dend_16 { pt3dadd( -27.201, 172.263, -41.5801, 0.28 ) }
    dend_16 { pt3dadd( -26.9266, 173.962, -41.8289, 1.38 ) }
    dend_16 { pt3dadd( -26.3463, 177.073, -42.3103, 1.38 ) }
    dend_16 { pt3dadd( -25.0502, 183.61, -43.2005, 0.28 ) }
    dend_16 { pt3dadd( -24.6569, 185.604, -43.4781, 0.83 ) }
    dend_16 { pt3dadd( -24.3625, 187.03, -43.6758, 0.83 ) }
    dend_16 { pt3dadd( -23.5054, 191.278, -44.2773, 0.28 ) }
    dend_16 { pt3dadd( -23.1099, 193.365, -44.5481, 0.55 ) }
    dend_16 { pt3dadd( -22.7734, 195.399, -44.8479, 0.55 ) }
    dend_16 { pt3dadd( -22.3443, 198.557, -45.4179, 0.55 ) }
    dend_16 { pt3dadd( -21.8697, 201.985, -45.9129, 0.28 ) }
    dend_16 { pt3dadd( -21.6696, 203.227, -46.0958, 0.83 ) }
    // Section: dend_15, id: dend_15, parent: dend_14 (entry count 53/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -35.6578, 107.728, -24.65, 0.83 ) }
    dend_15 { pt3dadd( -35.8764, 108.625, -24.7653, 0.83 ) }
    dend_15 { pt3dadd( -36.2831, 110.296, -24.9799, 0.28 ) }
    dend_15 { pt3dadd( -36.6388, 111.756, -25.1675, 0.55 ) }
    // Section: dend_10, id: dend_10, parent: dend_6 (entry count 57/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 6.15903, -31.8155, 12.8028, 1.66 ) }
    dend_10 { pt3dadd( 4.5404, -34.9251, 13.771, 1.66 ) }
    // Section: dend_7, id: dend_7, parent: dend_6 (entry count 59/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 6.15903, -31.8155, 12.8028, 0.55 ) }
    dend_7 { pt3dadd( 8.90418, -32.9562, 13.644, 0.55 ) }
    dend_7 { pt3dadd( 13.0187, -34.6131, 14.8934, 0.55 ) }
    dend_7 { pt3dadd( 16.1768, -35.8247, 15.8875, 0.55 ) }
    dend_7 { pt3dadd( 18.6183, -36.74, 16.6597, 0.55 ) }
    dend_7 { pt3dadd( 23.4166, -38.4961, 18.3403, 0.55 ) }
    dend_7 { pt3dadd( 25.5842, -39.2949, 19.1666, 0.55 ) }
    dend_7 { pt3dadd( 29.5291, -40.6944, 20.8183, 0.55 ) }
    dend_7 { pt3dadd( 31.2557, -41.2587, 21.6395, 0.55 ) }
    dend_7 { pt3dadd( 34.279, -42.2338, 23.1879, 0.55 ) }
    dend_7 { pt3dadd( 37.7261, -43.256, 25.0624, 0.55 ) }
    dend_7 { pt3dadd( 40.9602, -44.0639, 26.8977, 0.55 ) }
    dend_7 { pt3dadd( 45.1768, -45.0565, 29.3145, 0.55 ) }
    dend_7 { pt3dadd( 49.2839, -45.8532, 31.7124, 0.55 ) }
    dend_7 { pt3dadd( 51.5766, -46.1976, 33.0295, 0.55 ) }
    dend_7 { pt3dadd( 55.693, -46.636, 35.339, 0.55 ) }
    dend_7 { pt3dadd( 58.0823, -46.7879, 36.6228, 0.55 ) }
    dend_7 { pt3dadd( 60.6814, -46.8632, 37.9896, 0.55 ) }
    dend_7 { pt3dadd( 63.3055, -46.8612, 39.3359, 0.55 ) }
    dend_7 { pt3dadd( 66.2274, -46.8081, 40.8255, 0.55 ) }
    dend_7 { pt3dadd( 68.9171, -46.7651, 42.2182, 0.55 ) }
    dend_7 { pt3dadd( 70.5722, -46.7265, 43.0686, 0.55 ) }
    dend_7 { pt3dadd( 74.0295, -46.6025, 44.8281, 0.55 ) }
    dend_7 { pt3dadd( 76.9433, -46.4419, 46.2784, 0.55 ) }
    dend_7 { pt3dadd( 79.8731, -46.2113, 47.6718, 0.55 ) }
    dend_7 { pt3dadd( 81.1024, -46.1035, 48.2366, 0.55 ) }
    dend_7 { pt3dadd( 83.2712, -45.8437, 49.2761, 0.55 ) }
    dend_7 { pt3dadd( 85.2034, -45.6262, 50.2333, 0.55 ) }
    dend_7 { pt3dadd( 86.4267, -45.5039, 50.8718, 0.55 ) }
    dend_7 { pt3dadd( 89.3798, -45.3139, 52.4283, 0.55 ) }
    dend_7 { pt3dadd( 92.3163, -45.228, 53.956, 0.55 ) }
    dend_7 { pt3dadd( 96.0199, -45.3216, 55.9075, 0.55 ) }
    dend_7 { pt3dadd( 99.1413, -45.6263, 57.4931, 0.55 ) }
    dend_7 { pt3dadd( 100.638, -45.8745, 58.2907, 0.55 ) }
    dend_7 { pt3dadd( 103.403, -46.5635, 59.8722, 0.55 ) }
    dend_7 { pt3dadd( 105.37, -47.2806, 61.101, 0.55 ) }
    dend_7 { pt3dadd( 107.239, -48.2177, 62.5513, 0.28 ) }
    dend_7 { pt3dadd( 108.402, -49.0864, 63.6358, 1.38 ) }
    dend_7 { pt3dadd( 110.82, -51.2273, 66.2256, 0.55 ) }
    dend_7 { pt3dadd( 112.191, -52.6522, 67.9451, 0.55 ) }
    dend_7 { pt3dadd( 113.207, -54.0256, 69.5667, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_7 { pt3dadd( 114.964, -56.9557, 73.1543, 0.55 ) }
    dend_7 { pt3dadd( 115.635, -58.341, 74.9478, 0.55 ) }
    dend_7 { pt3dadd( 123.565, -59.3201, 80.5839, 0.55 ) }
    dend_7 { pt3dadd( 131.726, -59.2563, 85.9685, 0.55 ) }
    dend_7 { pt3dadd( 140.175, -60.402, 90.7555, 0.55 ) }
    dend_7 { pt3dadd( 147.61, -62.8387, 96.6194, 0.55 ) }
    dend_7 { pt3dadd( 153.959, -65.695, 103.485, 0.55 ) }
    dend_7 { pt3dadd( 161.244, -67.4166, 109.775, 0.55 ) }
    // Section: dend_5, id: dend_5, parent: dend_1 (entry count 8/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -24.8156, -83.3063, -23.4929, 0.28 ) }
    dend_5 { pt3dadd( -25.4279, -87.3065, -24.1852, 0.28 ) }
    dend_5 { pt3dadd( -25.7025, -89.1239, -24.5066, 0.83 ) }
    dend_5 { pt3dadd( -26.5194, -94.982, -25.813, 0.28 ) }
    dend_5 { pt3dadd( -26.6844, -96.4999, -26.1366, 0.83 ) }
    dend_5 { pt3dadd( -27.0035, -99.4331, -26.7621, 0.28 ) }
    dend_5 { pt3dadd( -27.3442, -102.566, -27.4303, 0.55 ) }
    dend_5 { pt3dadd( -27.6453, -104.748, -27.913, 0.55 ) }
    dend_5 { pt3dadd( -28.3006, -109.554, -29.0712, 0.28 ) }
    dend_5 { pt3dadd( -28.4939, -111.738, -29.7002, 0.55 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 18/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -24.8156, -83.3063, -23.4929, 0.28 ) }
    dend_2 { pt3dadd( -27.2053, -92.4845, -21.9985, 0.28 ) }
    dend_2 { pt3dadd( -27.7383, -94.5315, -21.6652, 0.55 ) }
    dend_2 { pt3dadd( -28.4593, -97.3007, -21.2143, 0.55 ) }
    dend_2 { pt3dadd( -29.0942, -99.7391, -20.8173, 0.28 ) }
    dend_2 { pt3dadd( -29.6725, -101.96, -20.4557, 0.55 ) }
    dend_2 { pt3dadd( -30.357, -104.589, -20.0276, 1.38 ) }
    // Section: dend_18, id: dend_18, parent: dend_16 (entry count 25/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -21.6696, 203.227, -46.0958, 0.28 ) }
    dend_18 { pt3dadd( -22.1369, 204.987, -46.5569, 0.28 ) }
    dend_18 { pt3dadd( -22.5545, 206.385, -46.9718, 0.83 ) }
    dend_18 { pt3dadd( -23.2612, 208.303, -47.6564, 0.28 ) }
    dend_18 { pt3dadd( -23.9294, 210.006, -48.2648, 0.28 ) }
    dend_18 { pt3dadd( -24.2243, 210.76, -48.5174, 0.55 ) }
    dend_18 { pt3dadd( -25.0934, 212.898, -49.1483, 0.28 ) }
    dend_18 { pt3dadd( -25.702, 214.228, -49.5481, 0.83 ) }
    dend_18 { pt3dadd( -27.0179, 216.333, -50.3275, 0.28 ) }
    dend_18 { pt3dadd( -28.0709, 217.698, -50.9515, 0.28 ) }
    dend_18 { pt3dadd( -28.6567, 218.418, -51.3021, 0.55 ) }
    dend_18 { pt3dadd( -29.9845, 219.933, -52.067, 0.28 ) }
    dend_18 { pt3dadd( -31.3011, 221.279, -52.8022, 0.83 ) }
    dend_18 { pt3dadd( -33.6278, 223.434, -54.1475, 0.83 ) }
    dend_18 { pt3dadd( -35.3624, 224.956, -55.0053, 0.83 ) }
    dend_18 { pt3dadd( -37.1154, 226.411, -55.8291, 0.28 ) }
    dend_18 { pt3dadd( -39.3369, 228.251, -56.7784, 0.55 ) }
    dend_18 { pt3dadd( -41.8109, 230.352, -57.7214, 0.28 ) }
    dend_18 { pt3dadd( -43.2897, 231.628, -58.2211, 1.11 ) }
    dend_18 { pt3dadd( -47.1712, 235.055, -59.4029, 0.28 ) }
    dend_18 { pt3dadd( -48.5122, 236.147, -59.7407, 0.83 ) }
    dend_18 { pt3dadd( -50.5221, 237.68, -60.2209, 0.28 ) }
    dend_18 { pt3dadd( -51.3745, 238.334, -60.3946, 0.55 ) }
    dend_18 { pt3dadd( -53.4229, 239.909, -60.7248, 0.28 ) }
    dend_18 { pt3dadd( -53.7577, 240.162, -60.7845, 0.55 ) }
    dend_18 { pt3dadd( -55.3198, 241.242, -61.2345, 0.28 ) }
    dend_18 { pt3dadd( -57.3674, 242.64, -61.7799, 0.83 ) }
    // Section: dend_17, id: dend_17, parent: dend_16 (entry count 52/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -21.6696, 203.227, -46.0958, 0.28 ) }
    dend_17 { pt3dadd( -20.838, 204.541, -45.9113, 0.28 ) }
    dend_17 { pt3dadd( -20.3346, 205.431, -45.7912, 0.55 ) }
    dend_17 { pt3dadd( -19.7581, 206.59, -45.5763, 0.28 ) }
    dend_17 { pt3dadd( -19.4066, 207.396, -45.5948, 0.55 ) }
    dend_17 { pt3dadd( -18.9589, 208.466, -45.81, 0.28 ) }
    dend_17 { pt3dadd( -18.8879, 208.635, -45.8441, 0.55 ) }
    dend_17 { pt3dadd( -18.46, 209.854, -46.2292, 0.28 ) }
    dend_17 { pt3dadd( -18.0802, 211.129, -46.7446, 0.83 ) }
    dend_17 { pt3dadd( -17.2799, 213.911, -48.3566, 0.28 ) }
    dend_17 { pt3dadd( -16.9906, 214.959, -49.1173, 0.83 ) }
    // Section: dend_12, id: dend_12, parent: dend_10 (entry count 63/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 4.5404, -34.9251, 13.771, 1.66 ) }
    dend_12 { pt3dadd( 4.55902, -35.5349, 13.7834, 1.66 ) }
    dend_12 { pt3dadd( 4.59266, -37.3802, 13.8285, 1.11 ) }
    dend_12 { pt3dadd( 4.76865, -42.162, 14.1558, 1.11 ) }
    dend_12 { pt3dadd( 4.9471, -47.0877, 14.6826, 1.11 ) }
    dend_12 { pt3dadd( 4.95793, -50.2129, 15.1063, 1.11 ) }
    dend_12 { pt3dadd( 4.93617, -53.8421, 15.7081, 1.11 ) }
    dend_12 { pt3dadd( 4.94912, -55.9121, 16.1454, 1.11 ) }
    dend_12 { pt3dadd( 5.03376, -59.9705, 17.2048, 1.11 ) }
    dend_12 { pt3dadd( 5.08896, -64.0436, 18.4525, 1.11 ) }
    dend_12 { pt3dadd( 4.98962, -71.1152, 20.6885, 1.11 ) }
    dend_12 { pt3dadd( 4.91603, -74.7965, 21.8038, 1.11 ) }
    dend_12 { pt3dadd( 4.81062, -78.3877, 22.8423, 1.11 ) }
    dend_12 { pt3dadd( 4.58293, -82.1786, 23.7373, 1.11 ) }
    dend_12 { pt3dadd( 4.08865, -86.5173, 24.4507, 0.83 ) }
    dend_12 { pt3dadd( 3.57054, -89.6572, 24.7459, 0.55 ) }
    dend_12 { pt3dadd( 3.06616, -92.1571, 24.7678, 0.55 ) }
    dend_12 { pt3dadd( 2.57722, -94.4808, 24.6108, 0.55 ) }
    dend_12 { pt3dadd( 1.74686, -97.8595, 24.2152, 0.55 ) }
    dend_12 { pt3dadd( 0.556528, -102.532, 23.4891, 0.55 ) }
    dend_12 { pt3dadd( -0.275891, -106.221, 22.8626, 0.55 ) }
    dend_12 { pt3dadd( -0.908358, -109.252, 22.3866, 0.55 ) }
    dend_12 { pt3dadd( -1.64497, -112.924, 21.9269, 0.28 ) }
    dend_12 { pt3dadd( -3.52551, -121.867, 23.1018, 0.28 ) }
    dend_12 { pt3dadd( -6.72028, -130.333, 24.8399, 0.28 ) }
    dend_12 { pt3dadd( -10.3102, -138.482, 27.2089, 0.28 ) }
    dend_12 { pt3dadd( -14.1877, -146.051, 30.7564, 0.28 ) }
    dend_12 { pt3dadd( -17.2025, -153.189, 35.7425, 0.28 ) }
    dend_12 { pt3dadd( -19.7146, -159.329, 42.1382, 0.28 ) }
    dend_12 { pt3dadd( -22.3086, -165.39, 48.5754, 0.28 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 93/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 4.5404, -34.9251, 13.771, 0.55 ) }
    dend_11 { pt3dadd( 5.72465, -35.5043, 15.4695, 0.55 ) }
    dend_11 { pt3dadd( 6.31583, -35.794, 16.1867, 0.55 ) }
    dend_11 { pt3dadd( 8.02944, -36.5607, 18.2467, 0.55 ) }
    dend_11 { pt3dadd( 12.4396, -38.3246, 23.2469, 0.55 ) }
    dend_11 { pt3dadd( 13.4424, -38.6472, 24.3265, 0.55 ) }
    dend_11 { pt3dadd( 15.9859, -39.2377, 27.0073, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_11 { pt3dadd( 17.8026, -39.6348, 29.0217, 0.28 ) }
    dend_11 { pt3dadd( 20.5404, -40.1284, 32.085, 0.28 ) }
    dend_11 { pt3dadd( 21.6385, -40.2904, 33.3145, 0.28 ) }
    dend_11 { pt3dadd( 23.2209, -40.3132, 34.6126, 0.28 ) }
    dend_11 { pt3dadd( 25.7323, -40.0991, 36.7412, 0.28 ) }
    dend_11 { pt3dadd( 31.4296, -41.6822, 42.9386, 0.28 ) }
    dend_11 { pt3dadd( 36.0053, -43.7883, 49.8668, 0.28 ) }
    dend_11 { pt3dadd( 40.4738, -45.8831, 56.8681, 0.28 ) }
    dend_11 { pt3dadd( 44.4286, -46.4259, 64.4469, 0.28 ) }
    dend_11 { pt3dadd( 48.6394, -48.1298, 71.709, 0.28 ) }
    dend_11 { pt3dadd( 51.6209, -50.8213, 79.2747, 0.28 ) }
    dend_11 { pt3dadd( 54.6611, -55.1072, 86.0394, 0.28 ) }
    dend_11 { pt3dadd( 56.5235, -59.1255, 93.3714, 0.28 ) }
    dend_11 { pt3dadd( 57.7391, -62.7975, 101.014, 0.28 ) }
    dend_11 { pt3dadd( 60.0076, -66.5823, 108.356, 0.28 ) }
    dend_11 { pt3dadd( 62.5514, -70.1202, 115.731, 0.28 ) }
    dend_11 { pt3dadd( 64.3406, -72.4735, 123.77, 0.28 ) }
    dend_11 { pt3dadd( 68.1214, -74.9149, 131.058, 0.28 ) }
    dend_11 { pt3dadd( 72.7145, -76.0076, 138.206, 0.28 ) }
    dend_11 { pt3dadd( 76.7533, -77.4631, 145.618, 0.28 ) }
    dend_11 { pt3dadd( 81.267, -77.4884, 152.898, 0.28 ) }
    dend_11 { pt3dadd( 85.4315, -77.9467, 160.369, 0.28 ) }
    dend_11 { pt3dadd( 89.5793, -77.8375, 167.863, 0.28 ) }
    dend_11 { pt3dadd( 92.8878, -76.5376, 175.656, 0.28 ) }
    // Section: dend_9, id: dend_9, parent: dend_7 (entry count 24/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 161.244, -67.4166, 109.775, 0.28 ) }
    dend_9 { pt3dadd( 170.24, -69.0817, 113.087, 0.28 ) }
    dend_9 { pt3dadd( 179.069, -71.9022, 116.044, 0.28 ) }
    dend_9 { pt3dadd( 187.601, -74.3174, 120.047, 0.28 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 28/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 161.244, -67.4166, 109.775, 0.28 ) }
    dend_8 { pt3dadd( 167.979, -69.1333, 117.424, 0.28 ) }
    dend_8 { pt3dadd( 175.765, -71.6791, 123.727, 0.28 ) }
    dend_8 { pt3dadd( 183.985, -73.4632, 129.733, 0.28 ) }
    // Section: dend_4, id: dend_4, parent: dend_2 (entry count 32/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -30.357, -104.589, -20.0276, 0.28 ) }
    dend_4 { pt3dadd( -32.2846, -107.856, -19.0532, 0.28 ) }
    dend_4 { pt3dadd( -32.8814, -108.861, -18.7546, 0.55 ) }
    dend_4 { pt3dadd( -34.461, -111.523, -18.1351, 0.28 ) }
    dend_4 { pt3dadd( -35.4425, -113.134, -17.7903, 0.83 ) }
    dend_4 { pt3dadd( -37.1709, -115.854, -17.2082, 0.28 ) }
    dend_4 { pt3dadd( -38.4985, -117.924, -16.7663, 0.28 ) }
    dend_4 { pt3dadd( -39.9408, -120.016, -16.4624, 0.83 ) }
    dend_4 { pt3dadd( -42.3374, -123.368, -16.1316, 0.28 ) }
    dend_4 { pt3dadd( -43.1944, -124.537, -16.1309, 0.55 ) }
    dend_4 { pt3dadd( -46.1281, -128.568, -16.4154, 0.28 ) }
    dend_4 { pt3dadd( -47.2681, -130.134, -16.6455, 0.83 ) }
    dend_4 { pt3dadd( -50.7542, -134.843, -17.5947, 0.28 ) }
    dend_4 { pt3dadd( -51.624, -136.076, -17.9224, 0.83 ) }
    dend_4 { pt3dadd( -54.0257, -139.788, -19.0811, 0.28 ) }
    dend_4 { pt3dadd( -54.6201, -140.934, -19.4808, 0.55 ) }
    dend_4 { pt3dadd( -55.307, -142.78, -20.1961, 0.28 ) }
    dend_4 { pt3dadd( -55.8099, -144.421, -20.8319, 0.83 ) }
    dend_4 { pt3dadd( -56.598, -148.884, -22.3696, 0.28 ) }
    dend_4 { pt3dadd( -56.7252, -150.171, -22.7913, 0.83 ) }
    dend_4 { pt3dadd( -56.6462, -153.934, -23.7702, 0.28 ) }
    dend_4 { pt3dadd( -56.4968, -155.413, -24.1713, 0.55 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 54/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -30.357, -104.589, -20.0276, 0.28 ) }
    dend_3 { pt3dadd( -29.2279, -108.484, -21.9485, 0.28 ) }
    dend_3 { pt3dadd( -28.6408, -110.509, -22.9473, 1.11 ) }
    dend_3 { pt3dadd( -28.1146, -112.324, -23.8424, 0.28 ) }
    dend_3 { pt3dadd( -27.6181, -114.037, -24.6871, 1.38 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_28, dend_27, dend_26, dend_25, dend_20, dend_13, dend_0, dend_24, dend_21, dend_19, dend_14, dend_6, dend_1, dend_23, dend_22, dend_16, dend_15, dend_10, dend_7, dend_5, dend_2, dend_18, dend_17, dend_12, dend_11, dend_9, dend_8, dend_4, dend_3]}
    ModelViewParmSubset_2 = new SectionList()
    dend_28 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_28, dend_27, dend_26, dend_25, dend_20, dend_13, dend_0, dend_24, dend_21, dend_19, dend_14, dend_6, dend_1, dend_23, dend_22, dend_16, dend_15, dend_10, dend_7, dend_5, dend_2, dend_18, dend_17, dend_12, dend_11, dend_9, dend_8, dend_4, dend_3]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()

    // Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_28, dend_27, dend_26, dend_25, dend_20, dend_13, dend_0, axon_0, dend_24, dend_21, dend_19, dend_14, dend_6, dend_1, axon_1, dend_23, dend_22, dend_16, dend_15, dend_10, dend_7, dend_5, dend_2, dend_18, dend_17, dend_12, dend_11, dend_9, dend_8, dend_4, dend_3]}
    ModelViewParmSubset_5 = new SectionList()
    dend_28 ModelViewParmSubset_5.append()
    dend_27 ModelViewParmSubset_5.append()
    dend_26 ModelViewParmSubset_5.append()
    dend_25 ModelViewParmSubset_5.append()
    dend_20 ModelViewParmSubset_5.append()
    dend_13 ModelViewParmSubset_5.append()
    dend_0 ModelViewParmSubset_5.append()
    axon_0 ModelViewParmSubset_5.append()
    dend_24 ModelViewParmSubset_5.append()
    dend_21 ModelViewParmSubset_5.append()
    dend_19 ModelViewParmSubset_5.append()
    dend_14 ModelViewParmSubset_5.append()
    dend_6 ModelViewParmSubset_5.append()
    dend_1 ModelViewParmSubset_5.append()
    axon_1 ModelViewParmSubset_5.append()
    dend_23 ModelViewParmSubset_5.append()
    dend_22 ModelViewParmSubset_5.append()
    dend_16 ModelViewParmSubset_5.append()
    dend_15 ModelViewParmSubset_5.append()
    dend_10 ModelViewParmSubset_5.append()
    dend_7 ModelViewParmSubset_5.append()
    dend_5 ModelViewParmSubset_5.append()
    dend_2 ModelViewParmSubset_5.append()
    dend_18 ModelViewParmSubset_5.append()
    dend_17 ModelViewParmSubset_5.append()
    dend_12 ModelViewParmSubset_5.append()
    dend_11 ModelViewParmSubset_5.append()
    dend_9 ModelViewParmSubset_5.append()
    dend_8 ModelViewParmSubset_5.append()
    dend_4 ModelViewParmSubset_5.append()
    dend_3 ModelViewParmSubset_5.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_28 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_27 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_26 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_25 OneSecGrp_SectionRef_5.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_24 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_19 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_14 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_1 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_23 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_22 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_16 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_7 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_18 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_12 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_11 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_4 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_13 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_0 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_20 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_6 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_10 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_21 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_2 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_15 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_5 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_3 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_17 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_9 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_8 OneSecGrp_SectionRef_30.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_13, dend_0, axon_0, axon_0, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_6, dend_6, dend_6, dend_6, dend_6, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_10, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_13 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_10 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.993125  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.0  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.005611  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.068459995  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.517764  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 6.3E-5  // units: S cm-2
        e_pas_nml2 = -64.6017  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 3.45E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.077616  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.002099  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 1.13999995E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.26087198  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-5  // units: S cm-2
        e_pas_nml2 = -69.78141  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 3.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.395881  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009986  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 5.0100003E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009728  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 2.7999999E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cACint_237_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cACint_237_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_28 nseg = 9
    dend_27 nseg = 11
    dend_26 nseg = 19
    dend_25 nseg = 9
    dend_24 nseg = 7
    dend_19 nseg = 21
    dend_14 nseg = 5
    dend_1 nseg = 5
    dend_23 nseg = 9
    dend_22 nseg = 9
    dend_16 nseg = 5
    dend_7 nseg = 9
    dend_18 nseg = 3
    dend_12 nseg = 7
    dend_11 nseg = 9
    dend_4 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cACint209_L23_LBC_10ecac904b_0_0


