// Cell: bNAC219_L23_SBC_6d12eabed9_0_0
/*
{
  "id" : "bNAC219_L23_SBC_6d12eabed9_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-2.6237, -8.22758, 0.070813, 2.13548", "-2.39007, -7.49194, 0.0634915, 2.46199", "-2.15644, -6.75631, 0.05617, 3.24204", "-1.92281, -6.02068, 0.0488485, 4.12456", "-1.68917, -5.28505, 0.041527, 5.0352", "-1.45554, -4.54941, 0.0342055, 5.94585", "-1.22191, -3.81378, 0.026884, 6.72163", "-0.988273, -3.07815, 0.0195625, 6.80003", "-0.75464, -2.34252, 0.012241, 6.86698", "-0.521007, -1.60688, 0.00491951, 6.89693", "-0.287374, -0.871249, -0.00240198, 6.78633", "-0.0537407, -0.135617, -0.00972348, 6.68152", "0.179892, 0.600016, -0.017045, 7.03689", "0.413525, 1.33565, -0.0243665, 7.65538", "0.647159, 2.07128, -0.031688, 8.30636", "0.880792, 2.80691, -0.0390095, 9.12144", "1.11442, 3.54255, -0.0463309, 8.95229", "1.34806, 4.27818, -0.0536524, 8.48257", "1.58169, 5.01381, -0.0609739, 7.77052", "1.81532, 5.74945, -0.0682954, 6.51313", "2.04896, 6.48508, -0.0756169, 3.51755" ]
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "-0.13389, 3.3386, -9.166, 0.55", "0.0595723, 3.9794, -9.1792, 0.55", "0.375731, 5.27598, -9.20665, 0.28", "0.454533, 5.73998, -9.29109, 0.55", "0.611217, 6.95092, -9.5942, 0.28", "0.706182, 7.75094, -9.84127, 0.83", "0.894293, 9.3686, -10.3983, 0.28", "0.970243, 10.4443, -10.8255, 0.83", "1.013, 12.4913, -11.7318, 0.28", "1.00128, 12.8704, -11.9098, 0.55", "0.900483, 13.8629, -12.3918, 0.28", "0.855253, 14.4986, -12.7151, 0.55", "0.761883, 16.4321, -13.7138, 0.28", "0.759683, 16.7491, -13.8584, 0.83", "0.839823, 18.1481, -14.3886, 0.28", "0.935223, 18.9586, -14.7093, 0.55", "1.29049, 20.8971, -15.4824, 0.28", "1.34404, 21.0869, -15.5674, 0.55", "1.88934, 22.3839, -16.2144, 0.28", "2.09209, 22.7693, -16.435, 0.55", "2.85028, 23.9142, -17.1491, 0.28", "3.26543, 24.4704, -17.5391, 0.55", "4.17804, 25.6627, -18.4085, 0.28", "4.52315, 26.1192, -18.801, 0.55", "5.49236, 27.3584, -19.9791, 0.28", "5.93279, 27.9268, -20.5416, 0.55", "6.55156, 28.7533, -21.3788, 0.55", "7.04679, 29.4808, -22.1206, 0.83", "8.24469, 31.5052, -24.1226, 0.28", "8.6491, 32.2824, -24.8581, 0.55", "8.94216, 32.8954, -25.4115, 0.28", "9.19883, 33.4102, -25.905, 0.55", "9.68595, 34.2857, -26.8045, 0.28", "9.87544, 34.5745, -27.1357, 0.55", "10.6906, 35.6174, -28.388, 0.28", "10.9259, 35.8786, -28.7558, 0.55", "11.8811, 36.7483, -30.1302, 0.28", "12.4207, 37.2327, -30.9223, 0.83", "13.3744, 38.1055, -32.3756, 0.28", "13.6639, 38.3573, -32.8021, 0.83", "14.4897, 39.0795, -33.9852, 0.28", "14.9131, 39.419, -34.4781, 0.55", "16.3623, 40.5034, -35.7723, 0.28", "16.7687, 40.8211, -36.0787, 0.55", "17.9941, 41.8407, -36.9111, 0.28", "18.5247, 42.2864, -37.2462, 0.83", "20.8049, 44.1346, -38.5005, 0.28", "21.5842, 44.7342, -38.8816, 0.55", "23.4415, 45.9834, -39.5881, 0.28", "24.0095, 46.3999, -39.8014, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999998332546847,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "3.72611, 3.79685, 8.114, 0.55", "4.21778, 4.91483, 8.18731, 0.55", "4.62919, 6.03437, 8.2922, 0.83", "5.17376, 7.63947, 8.4565, 0.55", "6.50534, 11.9042, 8.91445, 0.55", "7.17988, 14.2323, 9.17156, 1.11", "7.91141, 16.8086, 9.45537, 0.55", "8.49068, 19.0928, 9.72272, 0.55", "9.00511, 21.3838, 10.0058, 0.28", "9.47642, 24.0118, 10.3568, 0.83", "9.86304, 27.1184, 10.8084, 0.28", "9.95394, 27.852, 10.9094, 0.83", "10.2135, 30.258, 11.2218, 0.28", "10.2852, 30.9247, 11.3158, 0.55", "10.4052, 32.5947, 11.5885, 0.28", "10.4442, 33.0589, 11.6678, 0.55", "10.8188, 35.403, 12.086, 0.28", "10.9886, 36.1261, 12.2165, 0.55", "11.5904, 37.8459, 12.5417, 0.28", "12.3619, 39.801, 12.8934, 0.28", "13.1168, 41.5857, 13.1967, 0.55", "14.0475, 43.8576, 13.5231, 0.28", "14.4038, 44.7447, 13.645, 0.55", "15.9018, 48.2589, 14.4017, 0.28", "16.8111, 50.2889, 14.942, 0.55", "17.6445, 52.2016, 15.5339, 0.55", "18.4707, 54.3318, 16.2598, 0.28", "19.121, 56.2106, 16.9005, 0.55", "20.7283, 61.2835, 18.6978, 0.28", "21.027, 62.3968, 19.0954, 0.55", "21.7771, 65.5564, 20.2925, 0.28", "22.0708, 67.1482, 20.8433, 0.55", "22.3815, 70.0725, 21.7592, 0.28", "22.362, 71.7904, 22.1979, 0.55", "22.0429, 74.1405, 22.6671, 0.28", "21.813, 75.3251, 22.9172, 0.55", "21.1358, 78.1199, 23.5383, 0.28", "20.5939, 80.4574, 24.2387, 0.83", "19.8243, 84.0257, 25.5391, 0.28", "19.4793, 85.8442, 26.2655, 0.55", "18.9654, 88.9804, 27.6486, 0.28", "18.7334, 90.4739, 28.3453, 0.55", "18.1828, 94.318, 30.3053, 0.28", "18.0778, 95.2315, 30.743, 0.55", "17.8387, 97.6604, 31.8498, 0.28", "17.7271, 99.0964, 32.4855, 0.55", "17.4915, 102.838, 34.0605, 0.28", "17.4247, 104.169, 34.5398, 0.55", "17.3139, 106.933, 35.3106, 0.28", "17.3182, 109.636, 36.0067, 0.28", "17.3318, 109.966, 36.0876, 0.83", "17.4403, 111.731, 36.486, 0.28", "17.6298, 113.366, 36.8173, 0.55", "17.9472, 116.004, 37.3893, 0.28", "18.3363, 118.322, 37.9256, 0.55", "20.342, 130.093, 39.8065, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999998332546847,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "2.55611, 4.83035, 8.114, 0.55", "4.15044, 6.18285, 8.9054, 0.55", "5.91533, 7.64662, 9.93435, 1.11", "7.30013, 8.91269, 10.7674, 0.55", "9.03354, 10.6032, 11.7191, 0.55", "10.7145, 12.2426, 12.6419, 0.55", "12.1688, 13.6608, 13.4403, 0.83", "13.4514, 14.8435, 14.2344, 0.55", "14.934, 16.1198, 15.2415, 0.28", "16.0086, 17.1774, 16.0521, 0.55", "22.7845, 24.882, 20.545, 0.55", "28.5101, 33.4662, 24.8251, 0.55", "33.6678, 42.9199, 27.6491, 0.55", "39.6126, 52.3138, 28.1009, 0.55", "46.5234, 61.03, 27.3512, 0.55", "54.7566, 68.2278, 24.929, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999998332546847,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-2.57389, 5.5421, 1.184, 0.83", "-2.70287, 8.22398, 2.6189, 0.83", "-2.69592, 11.207, 3.92407, 0.83", "-2.56945, 14.2214, 5.00502, 1.66", "-2.2055, 19.6599, 6.69372, 0.83", "-2.12868, 22.1909, 7.38525, 0.83", "-2.07675, 25.1821, 8.12727, 1.66", "-1.91944, 29.1715, 9.04407, 0.83", "-1.74769, 32.8948, 9.74172, 0.83", "-1.63611, 35.4054, 10.1321, 0.83", "-1.50503, 40.9218, 10.4597, 0.83", "-1.53483, 43.4608, 10.6363, 0.83" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999998332546847
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-2.93389, -8.97565, -0.806, 1.66", "-2.60052, -12.1063, -1.32224, 1.66", "-2.25431, -15.6249, -1.9907, 1.66", "-1.93945, -18.8249, -2.59864, 0.83", "-1.45824, -23.7154, -3.52775, 1.11", "-1.08142, -27.5451, -4.25531, 1.11", "-0.86253, -29.7697, -4.67794, 1.11", "-0.548759, -31.9195, -5.1559, 1.11" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999998332546847
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "2.04896, 6.48508, -0.0756169, 0.55", "6.58939, 20.7814, -0.0756169, 0.55", "11.1298, 35.0777, -0.0756169, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "-1.53483, 43.4608, 10.6363, 0.55", "-1.4368, 48.7839, 9.14957, 0.55", "-1.15354, 52.0508, 8.08506, 0.55", "-0.696246, 55.3002, 7.00119, 0.83", "-0.339485, 57.4394, 6.30147, 0.28", "-0.120119, 58.6289, 5.95251, 0.28", "0.0787163, 59.6898, 5.67036, 0.55", "0.704862, 62.5604, 4.95052, 0.55", "0.965353, 64.1756, 4.63825, 0.55", "1.08602, 65.3861, 4.51218, 0.83", "1.21522, 69.1173, 4.19572, 0.55", "1.10204, 70.6441, 4.09886, 0.83", "0.826273, 72.2019, 4.03543, 0.28", "0.436433, 73.725, 4.03555, 0.55", "-0.313018, 76.259, 3.98483, 0.55", "-1.29656, 79.173, 3.91611, 0.55", "-2.05795, 81.0933, 3.69785, 0.28", "-2.46247, 82.1173, 3.48299, 0.28", "-3.02425, 83.5389, 3.07797, 0.55", "-3.70373, 85.12, 2.44278, 0.28", "-4.30395, 86.5768, 1.74815, 1.11", "-6.17365, 90.8251, -0.369301, 0.28", "-6.80213, 92.2844, -1.04047, 0.83", "-7.88233, 94.7994, -2.08679, 0.83", "-9.09278, 97.5748, -3.08828, 0.28", "-9.99941, 99.6642, -3.70476, 0.28", "-11.7101, 103.823, -4.6664, 0.83", "-12.444, 105.791, -4.93216, 0.28", "-13.1666, 107.81, -5.11918, 0.55", "-14.4335, 111.631, -5.41782, 0.55", "-15.0384, 113.595, -5.52992, 1.11", "-15.7598, 116.032, -5.70774, 0.55", "-16.3569, 118.495, -5.85441, 0.55", "-17.0198, 121.318, -6.03252, 0.55", "-17.8197, 124.863, -6.27705, 0.55", "-18.0773, 126.265, -6.36761, 0.55", "-18.3399, 127.821, -6.47138, 0.55", "-19.0649, 132.271, -6.77133, 0.55", "-19.4959, 134.903, -6.9427, 0.83", "-19.8896, 137.936, -7.10354, 0.28", "-20.26, 140.839, -7.23582, 0.55", "-20.5268, 142.883, -7.34689, 0.55", "-20.7901, 145.043, -7.51972, 0.28", "-20.9309, 146.3, -7.65638, 0.55", "-21.2644, 149.403, -7.91285, 0.55", "-21.4495, 151.198, -8.02322, 0.28", "-21.5736, 152.111, -8.08705, 0.83", "-21.9053, 154.784, -8.25261, 0.28", "-22.0146, 155.704, -8.31865, 0.55", "-22.2416, 157.384, -8.45216, 0.28", "-22.4309, 158.759, -8.56008, 0.55", "-22.7728, 161.382, -8.7061, 0.55", "-23.4956, 165.937, -8.89858, 0.55", "-23.9898, 168.765, -9.02627, 0.28", "-24.161, 169.846, -9.08506, 0.83", "-24.4446, 171.767, -9.19321, 0.83", "-24.8457, 174.66, -9.35863, 0.55", "-25.1303, 177.808, -9.47984, 0.55", "-25.4149, 181.028, -9.37664, 0.55", "-25.5649, 183.499, -9.24333, 0.55", "-25.6557, 186.936, -9.02802, 0.55", "-25.6766, 190.858, -8.75102, 0.55", "-25.5148, 195.951, -8.32986, 0.55", "-25.2891, 200.198, -7.91569, 0.55", "-25.0577, 204.424, -7.46184, 0.55", "-24.9127, 206.952, -7.21085, 0.55", "-24.7168, 209.09, -7.03107, 0.83", "-24.498, 211.039, -6.90618, 0.55", "-24.1974, 213.853, -6.75579, 0.55", "-23.8333, 216.606, -6.61497, 0.55", "-23.6247, 218.247, -6.43818, 0.83", "-23.283, 220.885, -6.17325, 0.28", "-22.8359, 224.223, -5.74843, 0.55", "-22.3513, 228.139, -5.15255, 0.55", "-22.0359, 230.724, -4.67988, 0.55", "-21.868, 232.221, -4.38163, 0.28", "-21.6819, 234.185, -3.9616, 0.55", "-21.3911, 238.023, -3.06002, 0.55", "-21.1292, 241.639, -2.20661, 0.55", "-21.0087, 243.525, -1.82451, 0.55" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "-1.53483, 43.4608, 10.6363, 0.55", "-1.56436, 45.9053, 10.578, 0.55", "-1.60069, 48.9127, 10.5063, 0.55", "-1.62091, 50.5873, 10.4664, 0.55", "-1.63881, 52.0688, 10.431, 0.55", "-1.66373, 54.132, 10.3818, 0.55", "-1.68614, 55.9879, 10.3376, 0.55" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-0.548759, -31.9195, -5.1559, 0.55", "-0.0952956, -33.1522, -4.49648, 0.55", "0.737223, -35.4376, -3.70782, 0.55", "1.97517, -38.4995, -2.0291, 0.55", "2.51612, -39.8745, -1.22136, 0.55", "2.92869, -41.0175, -0.499098, 0.55", "3.70906, -43.1027, 0.826998, 0.55", "4.34036, -44.7075, 1.85395, 0.55", "6.02785, -48.2688, 4.18454, 0.55", "6.74266, -49.5959, 4.95594, 0.55", "8.50399, -52.3976, 6.57736, 0.28", "9.37169, -53.4997, 7.26233, 0.28", "10.438, -54.4521, 7.90659, 0.55", "11.5033, -55.0758, 8.28194, 0.28", "12.3557, -55.3156, 8.35053, 0.55", "15.1923, -55.461, 8.53853, 0.55", "16.4145, -55.2812, 8.43381, 0.55", "17.1739, -55.1352, 8.29752, 0.55", "18.4517, -54.8566, 7.98015, 0.55", "19.8705, -54.605, 7.56518, 0.55", "21.6213, -54.3214, 6.96606, 0.55", "25.8892, -53.6935, 5.41497, 0.55", "27.7948, -53.4119, 4.73527, 0.28", "28.5278, -53.2824, 4.48288, 0.55", "31.29, -52.7917, 3.40003, 0.55", "32.0175, -52.6226, 3.09243, 0.55", "33.6094, -52.1395, 2.44149, 0.28", "34.5932, -51.7466, 2.14591, 0.28", "36.1143, -51.0548, 1.71954, 0.55", "38.6684, -49.8513, 0.907807, 0.28", "39.8748, -49.2918, 0.49361, 0.28", "40.7687, -48.9405, 0.181233, 0.55", "43.2204, -48.1256, -0.797767, 0.28", "44.3954, -47.7645, -1.27624, 0.83", "46.5598, -47.1432, -2.11162, 0.28", "47.3757, -46.9216, -2.38406, 0.28", "48.2461, -46.7369, -2.71937, 0.83", "50.0686, -46.4332, -3.54388, 0.28", "51.2802, -46.38, -4.22762, 0.83" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-0.548759, -31.9195, -5.1559, 0.83", "-0.236174, -32.5867, -5.68937, 0.83", "0.874603, -34.9576, -7.58506, 0.83", "2.42656, -38.2703, -10.2337, 0.83", "4.66961, -43.0581, -14.0617, 0.83", "6.39013, -46.7305, -16.998, 0.83" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "11.1298, 35.0777, -0.0756169, 0.28", "15.6702, 49.374, -0.0756169, 0.28", "20.2107, 63.6703, -0.0756169, 0.28" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "-21.0087, 243.525, -1.82451, 0.55", "-19.5247, 244.252, -1.37232, 0.55", "-18.1563, 244.921, -0.955376, 0.28", "-16.4821, 245.741, -0.445251, 0.55", "-6.88741, 249.443, 3.77273, 0.55" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "-21.0087, 243.525, -1.82451, 0.55", "-20.5523, 245.488, -0.94425, 0.55", "-19.8808, 248.401, 0.301654, 0.55", "-19.3871, 250.659, 1.25052, 0.55", "-18.8695, 253.295, 2.24779, 0.55", "-18.4432, 255.528, 3.08489, 0.55", "-18.133, 257.509, 3.79745, 0.28", "-17.965, 258.762, 4.175, 0.28", "-17.8916, 259.417, 4.32227, 0.55", "-17.5593, 262.501, 4.88802, 0.55", "-17.2654, 266.297, 5.58911, 0.28", "-17.1483, 268.372, 5.96904, 0.28", "-17.0771, 270.28, 6.28758, 0.55", "-16.7989, 274.348, 6.91754, 0.28", "-16.6591, 276.152, 7.16404, 0.55", "-13.6353, 284.899, 9.18096, 0.55" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "-1.68614, 55.9879, 10.3376, 0.55", "-0.394966, 57.2682, 10.9878, 0.55", "1.21896, 58.8686, 11.8005, 0.55", "2.82329, 60.4594, 12.6084, 0.55", "3.55569, 61.1857, 12.9772, 0.55", "5.53436, 63.1477, 13.9736, 0.83", "13.4234, 72.1548, 16.4754, 0.83", "22.3738, 80.4892, 17.2928, 0.83" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "-1.68614, 55.9879, 10.3376, 0.55", "-2.65412, 58.1517, 10.2995, 0.55", "-3.81552, 60.8175, 10.1278, 0.55", "-4.73419, 62.7486, 9.94884, 0.55", "-5.69368, 64.5732, 9.81913, 0.55", "-6.18455, 65.4808, 9.77036, 0.83", "-7.34651, 67.5404, 9.73094, 0.55", "-8.38895, 69.2793, 9.69161, 0.55", "-9.03958, 70.3409, 9.77255, 0.83", "-10.0578, 71.9299, 9.95414, 0.28", "-10.7648, 72.9544, 10.0846, 0.55", "-11.8872, 74.6345, 10.339, 0.55", "-12.564, 75.6724, 10.6077, 0.55", "-13.3808, 77.2591, 11.0184, 0.28", "-13.9674, 78.6858, 11.2965, 0.55", "-14.4973, 80.0873, 11.5208, 0.55", "-15.0137, 81.5105, 11.747, 0.28", "-15.7731, 84.0291, 12.1045, 0.55", "-16.2846, 86.0074, 12.4036, 0.28", "-16.7265, 87.7142, 12.6568, 0.55" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "6.39013, -46.7305, -16.998, 0.55", "8.20184, -47.6329, -16.284, 0.55", "10.0725, -48.5053, -15.2736, 0.55", "12.6085, -49.7667, -13.8051, 0.55", "14.2269, -50.6082, -12.8836, 0.28", "16.0678, -51.5439, -11.6461, 0.55", "20.7502, -54.0188, -8.29618, 0.55", "22.164, -54.8272, -7.14166, 0.55", "23.3347, -55.4606, -6.13685, 0.28", "23.9736, -55.8014, -5.56699, 0.55", "27.0695, -57.036, -3.19154, 0.28", "28.3374, -57.4708, -2.20852, 0.28", "29.1885, -57.7, -1.62226, 0.55", "30.6119, -58.115, -0.566258, 0.55", "33.1058, -58.833, 1.26434, 0.55", "35.3446, -59.547, 2.80186, 0.55", "39.1459, -60.8379, 5.14252, 0.55", "42.0432, -61.8004, 6.93295, 0.28", "43.7272, -62.3622, 7.96849, 0.28", "45.2138, -62.8878, 8.86315, 0.83", "47.2211, -63.5892, 10.1116, 0.28", "48.1512, -63.8881, 10.688, 0.55", "50.0977, -64.3553, 11.6557, 0.28", "51.0095, -64.5149, 12.1091, 0.28", "51.8037, -64.6017, 12.5477, 0.55", "55.1278, -64.8436, 14.6382, 0.55", "56.8329, -64.8946, 15.8631, 0.28", "57.8531, -64.9602, 16.6462, 0.55", "59.1074, -65.13, 17.6352, 0.55", "66.3063, -68.0342, 24.3969, 0.55" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "6.39013, -46.7305, -16.998, 0.83", "4.21173, -49.3787, -17.3452, 0.83", "3.69708, -50.0044, -17.4272, 0.83" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "-16.7265, 87.7142, 12.6568, 0.55", "-19.2838, 90.2098, 15.3039, 0.55", "-25.7869, 96.0826, 20.8234, 0.55" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "-16.7265, 87.7142, 12.6568, 0.28", "-16.1111, 90.041, 12.6101, 0.28", "-15.7137, 92.2123, 12.6303, 0.55", "-15.1336, 95.3824, 12.6596, 0.28", "-14.7581, 97.4341, 12.6786, 0.28", "-14.6143, 98.2199, 12.6859, 0.55", "-14.2122, 100.416, 12.7062, 0.28", "-14.1275, 101.318, 12.7096, 0.83", "-13.4853, 110.542, 14.1745, 0.83" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "3.69708, -50.0044, -17.4272, 0.55", "3.86919, -51.0431, -17.2801, 0.55", "4.17509, -53.1317, -17.0341, 0.55", "4.3424, -54.6528, -16.8895, 0.28", "4.49855, -57.3709, -16.717, 0.55", "4.48152, -59.3877, -16.6565, 0.55", "4.38349, -61.7342, -16.6286, 0.55", "4.08759, -64.8296, -16.6554, 0.55", "3.90494, -66.0104, -16.6639, 0.55", "3.25801, -69.5359, -16.5706, 0.55", "2.73013, -71.8169, -16.4638, 0.55", "1.93274, -74.8172, -16.2533, 0.55", "1.40816, -76.5734, -16.0894, 0.28", "0.823544, -78.5343, -15.8384, 0.83", "0.0845605, -81.1664, -15.4448, 0.55", "-0.311422, -82.5083, -15.1798, 0.28", "-0.644099, -83.6266, -14.9343, 0.55", "-1.48562, -86.2559, -14.3923, 0.28", "-1.72938, -87.0605, -14.2549, 0.55", "-2.33136, -89.0873, -14.0225, 0.55", "-2.9671, -91.1878, -13.9849, 0.28", "-3.21243, -92.1321, -14.015, 0.55", "-3.54799, -93.7739, -14.1278, 0.28", "-3.68738, -94.9461, -14.2764, 0.28", "-3.80621, -96.3704, -14.4845, 0.55", "-3.94194, -99.0677, -14.9174, 0.28", "-3.98895, -101.885, -15.3881, 0.28", "-3.97384, -103.312, -15.6253, 0.83", "-3.93254, -104.882, -15.8746, 0.28", "-3.91996, -106.172, -16.0655, 0.55", "-3.95627, -107.698, -16.2459, 0.28", "-4.00489, -108.458, -16.3405, 0.55", "-4.29815, -111.137, -16.943, 0.28", "-4.41916, -112.051, -17.1923, 0.55", "-4.63964, -113.483, -17.7371, 0.28", "-4.78726, -114.459, -18.2013, 0.55", "-5.16091, -116.446, -19.2848, 0.55", "-5.54689, -118.277, -20.3336, 0.55", "-5.9618, -119.896, -21.2584, 0.55", "-6.49125, -122.179, -22.55, 0.28", "-6.56105, -122.64, -22.8203, 0.55", "-6.67659, -123.502, -23.3332, 0.28", "-6.71216, -123.79, -23.4889, 0.55", "-6.75153, -124.581, -23.9453, 0.28", "-6.74456, -125.432, -24.4172, 0.55", "-6.61615, -127.908, -25.8113, 0.28", "-6.56508, -128.559, -26.1954, 0.55", "-6.40967, -130.713, -27.3885, 0.55", "-6.29827, -133.07, -28.7126, 0.28", "-6.28014, -133.695, -29.0572, 0.55", "-6.5111, -135.774, -29.7288, 0.28", "-6.70387, -136.716, -29.8117, 0.55", "-7.20256, -138.729, -29.7651, 0.28", "-7.57935, -139.999, -29.5497, 0.55", "-7.93223, -141.101, -29.2544, 0.55", "-9.78722, -147.123, -27.2509, 0.28", "-10.2098, -148.545, -26.6491, 0.28", "-10.3757, -149.218, -26.3837, 0.55", "-10.7233, -151.218, -25.6632, 0.28", "-10.7797, -151.662, -25.5111, 0.55", "-10.9431, -153.819, -24.9016, 0.28", "-10.8696, -155.181, -24.7728, 0.55", "-10.7019, -158.605, -24.7134, 0.28", "-10.6267, -159.661, -24.795, 0.55", "-10.5257, -160.682, -25.0011, 0.28", "-10.4541, -161.349, -25.1834, 0.55", "-10.2381, -163.247, -25.8736, 0.28", "-10.1653, -163.938, -26.1536, 0.55", "-10.0259, -165.824, -26.8302, 0.55", "-9.9014, -167.197, -27.3671, 0.28", "-9.82361, -167.712, -27.5703, 0.55" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "3.69708, -50.0044, -17.4272, 0.55", "4.75581, -52.0316, -19.4029, 0.55", "6.25631, -54.9047, -22.2031, 0.55" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "6.25631, -54.9047, -22.2031, 0.55", "8.32653, -54.9628, -20.6219, 0.55", "9.68165, -54.9324, -19.5235, 0.28", "10.2291, -54.9269, -19.1051, 0.55", "11.7095, -54.8777, -17.9533, 0.55", "12.7881, -54.8809, -17.1061, 0.28", "13.58, -54.8962, -16.5473, 0.28", "14.9906, -54.9508, -15.6955, 0.55", "16.7728, -55.0435, -14.7363, 0.28", "18.5312, -55.1701, -13.9521, 0.28", "20.0668, -55.2715, -13.3598, 0.28", "22.4942, -55.4124, -12.6138, 0.55", "24.4144, -55.5059, -12.1392, 0.28", "26.7277, -55.5959, -11.7008, 0.28", "28.6611, -55.634, -11.4073, 0.55", "30.6252, -55.6697, -11.2424, 0.55", "33.3321, -55.6711, -11.1159, 0.28", "33.9126, -55.6952, -11.0942, 0.55", "35.3857, -55.8648, -11.0878, 0.28", "36.0917, -55.9988, -11.0747, 0.28", "37.7717, -56.3975, -10.9921, 0.55", "39.3215, -56.8344, -10.8355, 0.28", "40.7019, -57.2237, -10.5569, 0.83", "42.5687, -57.7977, -10.0094, 0.55", "44.8062, -58.4638, -9.14479, 0.28", "45.6226, -58.6782, -8.78273, 0.55", "47.1284, -59.0646, -7.789, 0.28", "47.7498, -59.2099, -7.26591, 0.83", "49.4884, -59.5195, -5.54244, 0.55", "50.4362, -59.6417, -4.42847, 0.55", "51.2111, -59.7225, -3.42552, 0.83", "53.4213, -59.8597, -0.376255, 0.28", "53.8514, -59.8878, 0.201913, 0.28", "54.8306, -59.9129, 1.55415, 0.83", "56.1446, -59.8128, 3.41902, 0.28", "56.561, -59.7793, 4.00228, 0.55", "57.2744, -59.7108, 4.88605, 0.55", "59.7321, -59.451, 6.92259, 0.55" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "6.25631, -54.9047, -22.2031, 0.55", "7.65959, -57.6196, -25.312, 0.55" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "7.65959, -57.6196, -25.312, 0.55", "8.31457, -57.945, -26.4531, 0.55", "8.58379, -58.0329, -26.9215, 0.55", "9.85634, -58.4016, -29.9196, 0.28", "10.6444, -58.68, -32.836, 0.55", "10.8238, -58.8084, -34.1212, 0.28", "10.9523, -58.9566, -35.7019, 0.28", "10.9405, -59.0979, -37.7637, 0.83", "10.9588, -59.039, -40.7668, 0.28", "10.9117, -58.8802, -42.3068, 0.55", "10.8636, -58.7114, -43.6829, 0.55", "11.064, -58.3271, -46.1085, 0.28", "11.309, -58.0089, -47.7326, 0.83", "12.0419, -56.9038, -51.553, 0.28", "12.2488, -56.6221, -52.3607, 0.28", "12.546, -56.1054, -53.5958, 0.83", "13.0731, -54.7159, -56.4945, 0.28", "13.1518, -54.2562, -57.3781, 1.11", "13.4177, -53.1327, -59.7396, 0.55", "13.4954, -52.6546, -60.8054, 0.55", "13.7164, -52.0274, -62.3205, 0.55", "14.0733, -51.3545, -64.1153, 0.28", "14.1739, -51.1852, -64.6272, 0.83", "15.279, -49.7657, -69.2525, 0.28", "15.6318, -49.2549, -70.7896, 0.28", "16.115, -48.3714, -73.1272, 0.83", "16.6086, -47.2676, -75.7682, 0.28", "16.8399, -46.4667, -77.5304, 0.28", "16.8923, -45.7389, -78.9453, 0.83", "16.6472, -44.0747, -81.7455, 0.28", "16.5783, -43.6007, -82.4902, 0.83", "16.2852, -42.1983, -84.6101, 0.28", "16.1738, -41.4978, -85.5945, 0.83", "16.1668, -40.4621, -87.004, 0.28", "16.2677, -39.7048, -87.9608, 0.55", "16.7407, -38.2246, -89.8525, 0.28", "16.9316, -37.7352, -90.4281, 0.83", "17.3949, -36.6463, -91.6216, 0.28", "18.1916, -34.8601, -93.4893, 0.83", "18.9536, -33.4177, -95.0212, 0.28", "19.2136, -32.8754, -95.5797, 0.55", "19.8046, -31.7704, -96.7302, 0.28", "20.0227, -31.3753, -97.1432, 0.83", "20.5768, -30.2433, -98.3251, 0.28", "21.4675, -28.2705, -100.282, 0.28", "22.0958, -26.7815, -101.624, 1.11", "22.9461, -24.5502, -103.412, 0.28", "23.2234, -23.7809, -103.954, 0.55", "23.7287, -22.3394, -104.809, 0.28", "24.1045, -21.3591, -105.306, 0.55", "24.6344, -19.8422, -105.958, 0.28", "24.7352, -19.6066, -106.058, 0.55", "25.1692, -18.3758, -106.508, 0.28", "25.1692, -18.3758, -106.508, 0.55", "26.3479, -16.4001, -107.473, 0.28", "26.474, -16.1703, -107.596, 0.83" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "7.65959, -57.6196, -25.312, 0.83", "7.35756, -59.5381, -24.7183, 0.83", "6.97744, -61.9525, -23.9713, 0.55" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "6.97744, -61.9525, -23.9713, 0.55", "7.80769, -63.403, -24.5014, 0.55", "8.47838, -64.0485, -24.9994, 0.55", "9.79244, -65.2789, -26.0512, 0.55", "10.9917, -66.4493, -26.9588, 0.55", "11.8623, -67.299, -27.6176, 0.83", "12.7968, -68.2109, -28.3248, 0.55", "16.4186, -71.2858, -31.023, 0.55", "17.1059, -71.8257, -31.4809, 0.55", "18.0937, -72.5971, -32.0999, 0.55" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "6.97744, -61.9525, -23.9713, 0.55", "5.47361, -64.8331, -25.0665, 0.55", "4.49183, -66.7925, -25.8578, 0.55", "3.13111, -69.847, -27.0649, 0.55", "2.27903, -71.8497, -27.8837, 0.55", "0.449817, -76.3811, -29.7312, 0.55", "-0.0912245, -77.7803, -30.2889, 0.28", "-1.07094, -80.6218, -31.4011, 0.55", "-1.76874, -82.9388, -32.3507, 0.28", "-2.22811, -84.7937, -33.1423, 0.55", "-2.81903, -87.9306, -34.4892, 0.55", "-2.89058, -88.5018, -34.7535, 0.55", "-3.10267, -90.3311, -35.689, 0.55", "-3.59681, -93.1515, -37.0702, 0.55", "-4.11701, -95.1512, -38.0564, 0.55", "-4.76775, -97.1739, -38.9664, 0.28", "-5.65541, -99.2857, -39.8985, 0.55", "-6.62988, -101.299, -40.7957, 0.55", "-8.9053, -105.455, -42.6616, 0.55", "-9.34373, -106.181, -42.9795, 0.55", "-11.4602, -109.641, -44.4819, 0.55", "-13.5501, -113.13, -45.9138, 0.55", "-14.4514, -114.766, -46.5388, 0.83", "-15.4031, -116.73, -47.336, 0.55", "-16.0238, -118.368, -48.1306, 0.55", "-16.6693, -120.16, -49.0143, 0.55", "-17.1631, -121.668, -49.7462, 0.55", "-17.6559, -123.48, -50.5471, 0.83", "-18.1647, -125.354, -51.344, 0.55", "-18.8129, -127.706, -52.3614, 0.28", "-19.1862, -128.924, -52.9365, 0.55", "-19.7678, -130.764, -53.7624, 0.55", "-20.1105, -131.769, -54.2162, 0.55", "-20.6292, -133.407, -54.9554, 0.55", "-21.1198, -134.956, -55.6496, 0.55", "-21.6487, -136.788, -56.5033, 0.55", "-22.0418, -138.374, -57.3268, 0.55", "-22.4143, -140.038, -58.2455, 0.55", "-22.9054, -142.678, -59.6247, 0.83", "-23.106, -144.074, -60.3024, 0.83", "-23.3856, -146.205, -61.3343, 0.55", "-23.6254, -148.014, -62.1983, 0.83", "-23.7911, -149.611, -63.0603, 0.55", "-23.9743, -151.77, -64.2275, 0.28", "-24.0357, -152.325, -64.5523, 0.55", "-24.1221, -153.1, -65.0206, 0.55", "-24.3988, -154.794, -66.1214, 0.55", "-25.0389, -158.138, -68.5133, 0.55", "-25.5396, -159.744, -69.6595, 0.83", "-26.0349, -160.986, -70.4463, 0.55", "-26.71, -162.474, -71.2505, 0.55", "-27.846, -164.726, -72.2484, 0.55", "-28.6429, -165.997, -72.6721, 0.83", "-30.7615, -168.919, -73.493, 0.83", "-33.3494, -171.823, -74.3017, 0.28", "-34.4987, -172.844, -74.5487, 1.11", "-35.7607, -173.705, -74.8075, 0.28", "-37.9954, -174.927, -75.2344, 0.55", "-40.2872, -175.971, -75.6183, 0.55", "-45.0334, -177.542, -76.2904, 0.83", "-48.8218, -178.381, -76.7549, 0.55", "-50.8436, -178.687, -77.0086, 0.55", "-52.9174, -178.845, -77.3189, 0.55", "-56.4731, -178.96, -77.8774, 0.83", "-60.111, -179.1, -78.3582, 0.55", "-61.9416, -179.195, -78.6874, 0.55", "-65.339, -179.389, -79.3901, 0.55", "-68.8078, -179.666, -80.1961, 0.55", "-71.9566, -179.775, -80.9971, 0.55", "-74.7928, -179.776, -81.8479, 0.55", "-76.9729, -179.814, -82.5943, 0.28", "-79.8347, -179.919, -83.5809, 0.55", "-82.256, -179.979, -84.6319, 0.55", "-86.2121, -180.032, -86.5995, 0.55", "-87.5006, -179.978, -87.346, 0.55", "-89.9758, -179.816, -88.9113, 0.55", "-91.5229, -179.745, -89.9735, 0.55", "-95.6283, -179.542, -92.8903, 0.55", "-98.1932, -179.323, -94.7278, 0.55", "-99.8798, -179.158, -95.9105, 0.55", "-101.469, -178.946, -96.8968, 0.55", "-103.569, -178.585, -98.0552, 0.55", "-107.571, -177.814, -99.8827, 0.55", "-109.205, -177.539, -100.543, 0.55", "-112.01, -176.973, -101.354, 0.55", "-113.98, -176.637, -101.738, 0.55", "-115.27, -176.438, -101.952, 0.55", "-119.625, -175.882, -102.831, 0.55", "-122.1, -175.633, -103.669, 0.55", "-128.75, -175.037, -105.991, 0.55", "-131.088, -174.73, -106.857, 0.55", "-133.119, -174.335, -107.612, 0.55", "-135.779, -173.704, -108.694, 0.55", "-139.11, -172.816, -110.721, 0.28", "-145.865, -178.885, -115.903, 0.28" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "18.0937, -72.5971, -32.0999, 0.55", "19.0932, -71.195, -33.518, 0.55", "19.7871, -69.2765, -35.7558, 0.28", "19.986, -68.8792, -36.2403, 0.55", "20.3348, -68.1671, -37.1185, 0.55", "21.0348, -66.8052, -38.652, 0.28", "21.4705, -66.0963, -39.4769, 0.28", "22.5953, -64.5521, -41.4865, 0.55", "24.0519, -62.6236, -44.0438, 0.28", "24.463, -62.1231, -44.7286, 0.83", "26.2872, -59.9775, -47.6078, 0.55", "28.3867, -57.6635, -50.6151, 0.83", "30.3797, -55.451, -53.3462, 0.28", "30.3797, -55.451, -53.3462, 0.55", "32.0606, -53.1804, -55.6919, 0.28", "32.3989, -52.6818, -56.1514, 0.83", "33.8357, -50.3387, -57.9164, 0.55", "34.9449, -48.0967, -59.2215, 0.55", "35.7298, -46.4565, -60.1491, 0.55", "37.0248, -43.8906, -61.6472, 0.83", "37.4926, -42.9045, -62.1796, 0.83", "38.9349, -40.0147, -63.8083, 0.55", "39.7939, -38.2996, -64.8177, 0.55", "41.5955, -35.5176, -67.0347, 1.11", "43.2888, -33.2085, -69.3176, 0.55", "44.3178, -31.8319, -70.829, 0.83", "46.1654, -29.4265, -73.7454, 0.55", "47.0937, -28.2186, -75.2629, 0.83", "50.1557, -24.3336, -80.2574, 0.28", "50.899, -23.3001, -81.5566, 0.55", "51.8308, -21.9877, -83.2037, 0.55", "53.2941, -20.0798, -85.4407, 1.11", "54.9062, -17.8152, -87.7122, 0.55", "55.5909, -16.7904, -88.5455, 0.55", "56.6727, -15.1576, -89.6216, 0.55", "58.3608, -12.7528, -91.1237, 0.83", "61.5955, -8.57385, -93.8001, 0.28", "62.4731, -7.46625, -94.517, 0.83", "64.8819, -4.53576, -96.3548, 0.28", "66.5251, -2.60764, -97.5337, 0.55", "67.5817, -1.3794, -98.3099, 0.55", "69.8189, 1.46502, -99.964, 0.83", "70.9975, 3.26487, -100.871, 0.55", "72.2543, 5.21632, -101.787, 0.55", "72.7725, 6.1002, -102.14, 0.55", "73.7113, 7.66703, -102.752, 0.83", "74.9122, 9.5727, -103.541, 0.83", "76.4164, 11.8799, -104.586, 0.55", "78.3684, 14.7129, -106.035, 0.83", "79.1603, 15.9286, -106.675, 0.83", "81.7932, 19.8806, -108.833, 0.55", "82.2728, 20.5726, -109.229, 0.83", "83.5198, 22.3754, -110.374, 0.28", "84.576, 23.9324, -111.382, 0.55", "85.767, 26.0818, -112.645, 0.28", "86.7624, 27.7768, -113.713, 0.83", "87.1885, 28.6158, -114.191, 0.28", "87.9321, 29.9516, -114.95, 0.55", "89.6678, 32.8415, -116.694, 0.28", "90.3025, 33.8005, -117.334, 0.28", "93.1588, 37.7938, -120.225, 0.83", "94.3701, 39.4151, -121.363, 0.28", "95.3863, 40.718, -122.263, 0.28", "96.3162, 41.88, -123.015, 0.55", "96.8039, 42.5807, -123.424, 0.28", "97.3276, 43.4572, -123.892, 0.55", "98.4821, 45.8883, -124.815, 0.28", "99.1081, 47.3179, -125.294, 0.55", "99.8674, 49.5293, -125.859, 0.28", "100.367, 51.6993, -126.345, 0.55", "100.455, 52.3237, -126.495, 0.55", "100.563, 53.6127, -126.819, 0.83", "100.755, 55.3318, -127.467, 0.28", "100.962, 56.2998, -127.941, 0.55", "101.345, 58.3427, -128.994, 0.28", "101.507, 58.8354, -129.279, 0.55", "102.396, 61.4832, -130.869, 0.28", "103.294, 64.126, -132.521, 0.83", "104.273, 66.6334, -134.185, 0.55", "105.12, 68.5399, -135.45, 0.55", "107.206, 72.1921, -137.974, 0.55" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "18.0937, -72.5971, -32.0999, 0.55", "19.9675, -76.249, -31.7823, 0.55", "21.1612, -78.1508, -31.557, 0.55", "22.367, -79.9591, -31.2781, 0.83", "23.8513, -82.185, -30.9348, 0.55", "24.9953, -83.9005, -30.6702, 0.55", "26.3213, -85.8891, -30.3634, 0.55", "27.7003, -88.0961, -30.0448, 0.55", "29.062, -89.9637, -29.5349, 1.11" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "107.206, 72.1921, -137.974, 0.28", "108.71, 73.2429, -137.944, 0.28", "109.88, 73.9446, -137.902, 0.83", "111.015, 74.6203, -137.749, 0.28", "111.751, 75.071, -137.626, 0.55", "113.76, 76.2747, -137.319, 0.28", "114.927, 76.936, -137.074, 0.83", "116.676, 77.7905, -136.629, 0.28", "118.19, 78.5061, -136.227, 0.83", "120.596, 79.6754, -135.514, 0.28", "121.953, 80.3542, -135.064, 0.83", "124.533, 81.7196, -134.059, 0.28", "124.947, 81.9175, -133.913, 0.83" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "107.206, 72.1921, -137.974, 0.55", "103.858, 73.8907, -140.861, 0.55", "102.586, 74.59, -142.071, 0.28", "101.697, 75.0992, -142.962, 0.55", "100.591, 75.764, -144.093, 0.28", "99.7133, 76.3086, -145.049, 0.55", "98.9975, 76.7528, -145.832, 0.28", "98.3622, 77.2117, -146.645, 0.28", "98.2034, 77.3199, -146.801, 0.55", "97.1873, 78.0689, -147.859, 0.28", "96.6359, 78.4274, -148.379, 0.83", "95.334, 79.2583, -149.613, 0.28", "94.2073, 79.9664, -150.646, 0.83", "93.0056, 80.7798, -151.693, 0.28", "90.9342, 82.1987, -153.446, 0.83" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "29.062, -89.9637, -29.5349, 0.28", "30.0483, -92.699, -29.0105, 0.28", "30.3851, -93.7538, -28.8159, 0.55", "31.3177, -95.8081, -28.2904, 0.28", "32.2452, -97.423, -27.931, 0.28", "32.9979, -98.6146, -27.594, 0.55", "34.3127, -100.396, -27.1192, 0.28", "35.2852, -101.627, -26.7983, 0.55", "37.2893, -104.054, -26.3004, 0.55", "39.4632, -106.527, -25.7365, 0.28", "41.0556, -108.355, -25.2862, 0.83", "43.4762, -111.157, -24.5316, 0.28", "44.1537, -112.022, -24.257, 0.55", "44.8676, -113.148, -23.9202, 0.55", "45.7629, -115.152, -23.4351, 0.55", "46.4666, -117.179, -22.8857, 0.28", "46.6953, -118.003, -22.6553, 0.55", "47.0376, -119.695, -22.0702, 1.11", "47.4884, -121.735, -21.3629, 0.55", "47.9933, -124.007, -20.5972, 0.55", "48.3978, -125.624, -20.1714, 0.55", "49.1592, -127.436, -19.866, 0.55", "50.0899, -129.11, -19.6938, 0.55", "51.9093, -131.702, -19.5249, 0.55", "52.6611, -132.599, -19.4614, 0.55", "55.0737, -135.053, -19.3305, 1.11", "60.1295, -139.491, -19.3906, 0.28", "60.6077, -139.872, -19.4112, 0.55", "61.9154, -140.893, -19.5033, 0.28", "63.2214, -141.934, -19.6055, 0.83", "66.4248, -144.854, -19.774, 0.28", "67.3703, -145.952, -19.692, 0.55", "68.1392, -147.259, -19.3947, 0.28", "69.6189, -150.176, -18.5924, 0.55", "70.7197, -152.75, -17.8086, 0.55", "71.538, -154.781, -17.104, 0.28", "72.271, -156.925, -16.177, 1.11", "72.9905, -158.898, -15.3037, 0.55", "74.0996, -161.259, -14.2046, 0.55", "74.5433, -162.1, -13.8119, 0.83", "75.6275, -164.097, -13.098, 0.55", "77.4155, -167.018, -12.3346, 0.83", "78.5511, -168.719, -12.111, 0.55", "79.8677, -170.715, -12.0188, 0.55", "81.4645, -173.016, -12.0586, 0.83", "83.6681, -176.254, -12.1964, 0.28", "85.037, -178.275, -12.3304, 0.55", "86.7519, -180.841, -12.5387, 0.28", "88.3477, -183.299, -12.6867, 0.83", "90.6642, -186.826, -12.6971, 0.55", "92.1805, -188.818, -12.4845, 0.55", "92.8147, -189.64, -12.2793, 0.55", "93.7306, -190.696, -11.8443, 0.83", "96.349, -193.044, -10.2445, 0.28", "98.1301, -194.286, -9.01925, 0.83", "100.245, -195.524, -7.32208, 0.55", "101.096, -195.985, -6.65018, 0.83", "103.213, -197.105, -4.87817, 0.83", "104.248, -197.625, -3.96984, 0.28", "105.221, -198.128, -2.94928, 0.83", "106.992, -199.141, -1.02594, 0.28", "107.777, -199.611, -0.196761, 0.28", "108.251, -199.932, 0.294596, 0.83", "109.406, -200.945, 1.42688, 0.28", "109.903, -201.485, 1.90665, 0.55", "110.648, -202.508, 2.64946, 0.28", "111.853, -204.185, 3.92225, 0.83", "112.68, -205.199, 4.75308, 0.28", "113.281, -205.763, 5.24756, 0.28", "114.515, -206.612, 5.93359, 0.55", "116.249, -207.569, 6.72093, 0.28", "118.863, -208.83, 7.65932, 0.83", "121.454, -209.992, 8.54671, 0.28", "125.47, -211.589, 9.73964, 0.83", "130.562, -213.403, 11.2181, 0.28", "132.628, -214.02, 11.8002, 0.55", "136.09, -214.943, 12.7182, 0.28", "137.737, -215.388, 13.1731, 0.83", "141.125, -216.198, 14.3243, 0.28", "142.1, -216.439, 14.8118, 0.28", "144.198, -217.183, 16.609, 0.55", "144.809, -217.606, 17.4615, 0.83", "145.286, -218.377, 18.8856, 0.83", "145.474, -219.415, 20.4227, 0.28", "145.369, -221.017, 22.4986, 0.55", "145.048, -223.069, 24.8689, 0.83", "144.66, -224.768, 26.6672, 0.28", "144.395, -225.84, 27.7965, 0.55", "144.156, -226.929, 28.8734, 0.28", "144.083, -227.507, 29.4146, 0.83", "144.13, -228.477, 30.3968, 0.28", "144.262, -228.947, 31.0675, 0.83", "144.744, -229.784, 32.6746, 0.28", "145.175, -230.343, 33.9964, 0.83", "145.73, -230.832, 35.7264, 0.28", "146.17, -231.225, 37.4062, 0.28", "146.665, -231.829, 39.7869, 0.83", "146.831, -232.117, 40.9141, 0.28", "146.98, -232.488, 42.2279, 0.28", "147.199, -233.196, 44.9594, 0.55", "147.315, -233.653, 46.6057, 0.55", "147.483, -234.33, 48.4636, 0.55", "147.582, -234.839, 49.5473, 0.55", "147.676, -235.81, 51.3054, 0.55", "147.759, -237.005, 53.3322, 0.28", "147.793, -237.768, 54.5002, 0.55", "147.923, -239.403, 56.9853, 0.55", "148.0, -241.262, 59.7557, 0.28", "147.992, -241.766, 60.4082, 0.83" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "29.062, -89.9637, -29.5349, 0.55", "33.1296, -90.1464, -28.4868, 0.55", "38.1343, -90.438, -27.0011, 0.83", "41.6523, -90.5894, -25.7874, 0.55", "43.3214, -90.6522, -25.1749, 0.55", "44.7379, -90.6746, -24.6564, 0.83", "48.875, -90.6625, -23.2014, 0.28", "52.103, -90.48, -22.1656, 0.83", "54.575, -90.1485, -21.3428, 0.28", "55.088, -90.0628, -21.2163, 0.55", "57.8782, -89.7329, -20.9268, 0.28", "59.492, -89.5689, -20.9088, 0.55", "62.4403, -89.3172, -21.0503, 0.28", "64.7601, -89.1278, -21.2602, 0.55", "70.8589, -88.894, -21.8451, 0.55", "75.5524, -88.7759, -22.1063, 0.28", "75.8885, -88.7688, -22.1051, 0.55", "78.0006, -88.7509, -21.9186, 0.55", "79.829, -88.7659, -21.5362, 0.28", "81.3846, -88.7224, -20.9733, 0.28", "83.6107, -88.4743, -19.5126, 0.55", "86.0318, -88.0035, -17.58, 0.28", "87.3724, -87.7643, -16.458, 0.55", "89.2154, -87.4297, -14.8354, 0.28", "89.7597, -87.3318, -14.3407, 0.83", "91.0971, -87.0263, -13.0409, 0.55", "92.0211, -86.8038, -12.0518, 0.83", "93.2725, -86.3605, -10.5826, 0.55", "94.7168, -85.6186, -8.85991, 0.28", "95.6757, -84.9925, -7.67326, 0.83", "96.6332, -84.3187, -6.66093, 0.28", "97.657, -83.4966, -5.66691, 0.55", "99.4798, -81.9139, -4.07569, 0.28", "100.395, -81.0605, -3.33225, 0.28", "101.02, -80.4738, -2.83507, 0.55", "103.579, -78.1774, -0.905351, 0.28", "105.057, -77.0531, 0.0236406, 0.83", "107.034, -75.6901, 1.20328, 0.28", "107.878, -75.2043, 1.60456, 0.83", "110.198, -74.0313, 2.62219, 0.28", "111.622, -73.3997, 3.23064, 0.83", "115.894, -71.6901, 4.80359, 0.28", "117.479, -71.0824, 5.28393, 0.83", "122.198, -69.3914, 6.38256, 0.28", "125.048, -68.458, 6.92195, 0.28", "125.95, -68.1788, 7.07883, 0.55", "130.236, -66.6509, 7.97515, 0.28", "131.392, -66.1461, 8.27114, 0.55", "135.05, -64.3124, 9.41942, 0.28", "137.34, -63.0036, 10.3805, 0.83", "139.178, -61.804, 11.3477, 0.28", "142.183, -59.4524, 13.4327, 0.55", "144.067, -57.7334, 15.1895, 0.28", "145.664, -55.9659, 17.04, 0.55", "146.292, -55.0451, 17.9834, 0.55", "147.833, -52.7264, 20.3511, 0.55", "148.919, -51.3112, 21.812, 0.28", "150.217, -50.1123, 23.0938, 0.55", "152.692, -47.9647, 25.2166, 0.55", "153.578, -47.2326, 25.8203, 0.55", "157.153, -44.5497, 27.8382, 0.28", "158.98, -43.3352, 28.6989, 0.83", "162.693, -41.1318, 30.3427, 0.28", "165.816, -39.2578, 31.6951, 0.28", "167.664, -38.2152, 32.5354, 0.83", "169.581, -37.1796, 33.4834, 0.28", "171.375, -36.2451, 34.4826, 0.55", "174.149, -34.9068, 36.1386, 0.28", "176.559, -33.9267, 37.5745, 0.28", "180.178, -32.7668, 39.6202, 0.55", "184.571, -31.5589, 42.1961, 0.28", "186.276, -31.158, 43.1641, 0.28", "188.487, -30.8273, 44.3482, 0.55", "190.796, -30.545, 45.469, 0.28", "191.695, -30.4619, 45.8503, 0.28", "195.789, -30.0994, 47.4055, 0.28", "199.26, -29.7714, 48.7114, 0.55", "203.646, -29.3432, 50.3528, 0.28", "207.161, -29.0216, 51.7344, 0.55", "208.587, -28.8921, 52.3447, 0.55", "210.43, -28.733, 53.1841, 0.28", "211.081, -28.6713, 53.5266, 0.55", "212.83, -28.444, 54.7702, 0.28", "213.319, -28.34, 55.3121, 0.55", "214.627, -28.139, 57.2704, 0.28", "214.964, -28.0257, 57.9364, 0.55", "215.648, -27.6485, 59.4804, 0.28", "215.928, -27.4555, 60.1256, 0.55", "217.019, -26.6859, 62.6439, 0.28", "217.158, -26.6003, 62.9503, 0.55", "218.121, -26.1634, 64.9924, 0.55", "220.344, -25.8442, 68.9935, 0.55", "221.583, -25.971, 70.7287, 0.55", "222.988, -26.1973, 72.5882, 0.55", "223.625, -26.3422, 73.3398, 0.55", "225.424, -26.8851, 75.238, 0.55", "228.439, -28.24, 77.7613, 0.55", "230.958, -29.9202, 79.3091, 0.55" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_30", "dend_29", "dend_28", "dend_19", "dend_0", "dend_25", "dend_20", "dend_18", "dend_1", "dend_27", "dend_26", "dend_24", "dend_21", "dend_17", "dend_2", "dend_23", "dend_22", "dend_16", "dend_3", "dend_15", "dend_4", "dend_14", "dend_5", "dend_7", "dend_6", "dend_11", "dend_8", "dend_13", "dend_12", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_30", "dend_29", "dend_28", "dend_19", "dend_0", "dend_25", "dend_20", "dend_18", "dend_1", "dend_27", "dend_26", "dend_24", "dend_21", "dend_17", "dend_2", "dend_23", "dend_22", "dend_16", "dend_3", "dend_15", "dend_4", "dend_14", "dend_5", "dend_7", "dend_6", "dend_11", "dend_8", "dend_13", "dend_12", "dend_10", "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_27", "dend_27", "dend_27", "dend_27", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_2", "dend_2", "dend_23", "dend_23", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_3", "dend_3", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_4", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_5", "dend_5", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.999855",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.042115",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0012239999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.001693",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.386953",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "8.0E-6",
    "erev" : "-63.854015"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.5399997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.039862998",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "5.2299997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.0054459996",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.503893",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "1.0E-4",
    "erev" : "-67.1289"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.78E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.15074699",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009017",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "4.0E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.0032419998",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "1.74E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bNAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bNAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bNAC219_L23_SBC_6d12eabed9_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_30, id: dend_30, parent: soma_0
create dend_30
public dend_30
// Section: dend_29, id: dend_29, parent: soma_0
create dend_29
public dend_29
// Section: dend_28, id: dend_28, parent: soma_0
create dend_28
public dend_28
// Section: dend_19, id: dend_19, parent: soma_0
create dend_19
public dend_19
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_25, id: dend_25, parent: dend_19
create dend_25
public dend_25
// Section: dend_20, id: dend_20, parent: dend_19
create dend_20
public dend_20
// Section: dend_18, id: dend_18, parent: dend_0
create dend_18
public dend_18
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_27, id: dend_27, parent: dend_25
create dend_27
public dend_27
// Section: dend_26, id: dend_26, parent: dend_25
create dend_26
public dend_26
// Section: dend_24, id: dend_24, parent: dend_20
create dend_24
public dend_24
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_17, id: dend_17, parent: dend_1
create dend_17
public dend_17
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_23, id: dend_23, parent: dend_21
create dend_23
public dend_23
// Section: dend_22, id: dend_22, parent: dend_21
create dend_22
public dend_22
// Section: dend_16, id: dend_16, parent: dend_2
create dend_16
public dend_16
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_15, id: dend_15, parent: dend_3
create dend_15
public dend_15
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_14, id: dend_14, parent: dend_4
create dend_14
public dend_14
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_11, id: dend_11, parent: dend_7
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_13, id: dend_13, parent: dend_11
create dend_13
public dend_13
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_30, dend_29, dend_28, dend_19, dend_0, dend_25, dend_20, dend_18, dend_1, dend_27, dend_26, dend_24, dend_21, dend_17, dend_2, dend_23, dend_22, dend_16, dend_3, dend_15, dend_4, dend_14, dend_5, dend_7, dend_6, dend_11, dend_8, dend_13, dend_12, dend_10, dend_9]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_30, dend_29, dend_28, dend_19, dend_0, dend_25, dend_20, dend_18, dend_1, dend_27, dend_26, dend_24, dend_21, dend_17, dend_2, dend_23, dend_22, dend_16, dend_3, dend_15, dend_4, dend_14, dend_5, dend_7, dend_6, dend_11, dend_8, dend_13, dend_12, dend_10, dend_9]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_32
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_2, dend_2, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_3, dend_3, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_4, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_5, dend_5, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bNAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bNAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_30(0), soma_0(0.49999998332546847)
    connect dend_29(0), soma_0(0.49999998332546847)
    connect dend_28(0), soma_0(0.49999998332546847)
    connect dend_19(0), soma_0(0.49999998332546847)
    connect dend_0(0), soma_0(0.49999998332546847)
    connect axon_0(0), soma_0(1.0)
    connect dend_25(0), dend_19(1.0)
    connect dend_20(0), dend_19(1.0)
    connect dend_18(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_27(0), dend_25(1.0)
    connect dend_26(0), dend_25(1.0)
    connect dend_24(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_17(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_23(0), dend_21(1.0)
    connect dend_22(0), dend_21(1.0)
    connect dend_16(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_15(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_14(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_11(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_13(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -2.6237, -8.22758, 0.070813, 2.13548 ) }
    soma_0 { pt3dadd( -2.39007, -7.49194, 0.0634915, 2.46199 ) }
    soma_0 { pt3dadd( -2.15644, -6.75631, 0.05617, 3.24204 ) }
    soma_0 { pt3dadd( -1.92281, -6.02068, 0.0488485, 4.12456 ) }
    soma_0 { pt3dadd( -1.68917, -5.28505, 0.041527, 5.0352 ) }
    soma_0 { pt3dadd( -1.45554, -4.54941, 0.0342055, 5.94585 ) }
    soma_0 { pt3dadd( -1.22191, -3.81378, 0.026884, 6.72163 ) }
    soma_0 { pt3dadd( -0.988273, -3.07815, 0.0195625, 6.80003 ) }
    soma_0 { pt3dadd( -0.75464, -2.34252, 0.012241, 6.86698 ) }
    soma_0 { pt3dadd( -0.521007, -1.60688, 0.00491951, 6.89693 ) }
    soma_0 { pt3dadd( -0.287374, -0.871249, -0.00240198, 6.78633 ) }
    soma_0 { pt3dadd( -0.0537407, -0.135617, -0.00972348, 6.68152 ) }
    soma_0 { pt3dadd( 0.179892, 0.600016, -0.017045, 7.03689 ) }
    soma_0 { pt3dadd( 0.413525, 1.33565, -0.0243665, 7.65538 ) }
    soma_0 { pt3dadd( 0.647159, 2.07128, -0.031688, 8.30636 ) }
    soma_0 { pt3dadd( 0.880792, 2.80691, -0.0390095, 9.12144 ) }
    soma_0 { pt3dadd( 1.11442, 3.54255, -0.0463309, 8.95229 ) }
    soma_0 { pt3dadd( 1.34806, 4.27818, -0.0536524, 8.48257 ) }
    soma_0 { pt3dadd( 1.58169, 5.01381, -0.0609739, 7.77052 ) }
    soma_0 { pt3dadd( 1.81532, 5.74945, -0.0682954, 6.51313 ) }
    soma_0 { pt3dadd( 2.04896, 6.48508, -0.0756169, 3.51755 ) }
    // Section: dend_30, id: dend_30, parent: soma_0 (entry count 21/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( -0.13389, 3.3386, -9.166, 0.55 ) }
    dend_30 { pt3dadd( 0.0595723, 3.9794, -9.1792, 0.55 ) }
    dend_30 { pt3dadd( 0.375731, 5.27598, -9.20665, 0.28 ) }
    dend_30 { pt3dadd( 0.454533, 5.73998, -9.29109, 0.55 ) }
    dend_30 { pt3dadd( 0.611217, 6.95092, -9.5942, 0.28 ) }
    dend_30 { pt3dadd( 0.706182, 7.75094, -9.84127, 0.83 ) }
    dend_30 { pt3dadd( 0.894293, 9.3686, -10.3983, 0.28 ) }
    dend_30 { pt3dadd( 0.970243, 10.4443, -10.8255, 0.83 ) }
    dend_30 { pt3dadd( 1.013, 12.4913, -11.7318, 0.28 ) }
    dend_30 { pt3dadd( 1.00128, 12.8704, -11.9098, 0.55 ) }
    dend_30 { pt3dadd( 0.900483, 13.8629, -12.3918, 0.28 ) }
    dend_30 { pt3dadd( 0.855253, 14.4986, -12.7151, 0.55 ) }
    dend_30 { pt3dadd( 0.761883, 16.4321, -13.7138, 0.28 ) }
    dend_30 { pt3dadd( 0.759683, 16.7491, -13.8584, 0.83 ) }
    dend_30 { pt3dadd( 0.839823, 18.1481, -14.3886, 0.28 ) }
    dend_30 { pt3dadd( 0.935223, 18.9586, -14.7093, 0.55 ) }
    dend_30 { pt3dadd( 1.29049, 20.8971, -15.4824, 0.28 ) }
    dend_30 { pt3dadd( 1.34404, 21.0869, -15.5674, 0.55 ) }
    dend_30 { pt3dadd( 1.88934, 22.3839, -16.2144, 0.28 ) }
    dend_30 { pt3dadd( 2.09209, 22.7693, -16.435, 0.55 ) }
    dend_30 { pt3dadd( 2.85028, 23.9142, -17.1491, 0.28 ) }
    dend_30 { pt3dadd( 3.26543, 24.4704, -17.5391, 0.55 ) }
    dend_30 { pt3dadd( 4.17804, 25.6627, -18.4085, 0.28 ) }
    dend_30 { pt3dadd( 4.52315, 26.1192, -18.801, 0.55 ) }
    dend_30 { pt3dadd( 5.49236, 27.3584, -19.9791, 0.28 ) }
    dend_30 { pt3dadd( 5.93279, 27.9268, -20.5416, 0.55 ) }
    dend_30 { pt3dadd( 6.55156, 28.7533, -21.3788, 0.55 ) }
    dend_30 { pt3dadd( 7.04679, 29.4808, -22.1206, 0.83 ) }
    dend_30 { pt3dadd( 8.24469, 31.5052, -24.1226, 0.28 ) }
    dend_30 { pt3dadd( 8.6491, 32.2824, -24.8581, 0.55 ) }
    dend_30 { pt3dadd( 8.94216, 32.8954, -25.4115, 0.28 ) }
    dend_30 { pt3dadd( 9.19883, 33.4102, -25.905, 0.55 ) }
    dend_30 { pt3dadd( 9.68595, 34.2857, -26.8045, 0.28 ) }
    dend_30 { pt3dadd( 9.87544, 34.5745, -27.1357, 0.55 ) }
    dend_30 { pt3dadd( 10.6906, 35.6174, -28.388, 0.28 ) }
    dend_30 { pt3dadd( 10.9259, 35.8786, -28.7558, 0.55 ) }
    dend_30 { pt3dadd( 11.8811, 36.7483, -30.1302, 0.28 ) }
    dend_30 { pt3dadd( 12.4207, 37.2327, -30.9223, 0.83 ) }
    dend_30 { pt3dadd( 13.3744, 38.1055, -32.3756, 0.28 ) }
    dend_30 { pt3dadd( 13.6639, 38.3573, -32.8021, 0.83 ) }
    dend_30 { pt3dadd( 14.4897, 39.0795, -33.9852, 0.28 ) }
    dend_30 { pt3dadd( 14.9131, 39.419, -34.4781, 0.55 ) }
    dend_30 { pt3dadd( 16.3623, 40.5034, -35.7723, 0.28 ) }
    dend_30 { pt3dadd( 16.7687, 40.8211, -36.0787, 0.55 ) }
    dend_30 { pt3dadd( 17.9941, 41.8407, -36.9111, 0.28 ) }
    dend_30 { pt3dadd( 18.5247, 42.2864, -37.2462, 0.83 ) }
    dend_30 { pt3dadd( 20.8049, 44.1346, -38.5005, 0.28 ) }
    dend_30 { pt3dadd( 21.5842, 44.7342, -38.8816, 0.55 ) }
    dend_30 { pt3dadd( 23.4415, 45.9834, -39.5881, 0.28 ) }
    dend_30 { pt3dadd( 24.0095, 46.3999, -39.8014, 0.55 ) }
    // Section: dend_29, id: dend_29, parent: soma_0 (entry count 71/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 3.72611, 3.79685, 8.114, 0.55 ) }
    dend_29 { pt3dadd( 4.21778, 4.91483, 8.18731, 0.55 ) }
    dend_29 { pt3dadd( 4.62919, 6.03437, 8.2922, 0.83 ) }
    dend_29 { pt3dadd( 5.17376, 7.63947, 8.4565, 0.55 ) }
    dend_29 { pt3dadd( 6.50534, 11.9042, 8.91445, 0.55 ) }
    dend_29 { pt3dadd( 7.17988, 14.2323, 9.17156, 1.11 ) }
    dend_29 { pt3dadd( 7.91141, 16.8086, 9.45537, 0.55 ) }
    dend_29 { pt3dadd( 8.49068, 19.0928, 9.72272, 0.55 ) }
    dend_29 { pt3dadd( 9.00511, 21.3838, 10.0058, 0.28 ) }
    dend_29 { pt3dadd( 9.47642, 24.0118, 10.3568, 0.83 ) }
    dend_29 { pt3dadd( 9.86304, 27.1184, 10.8084, 0.28 ) }
    dend_29 { pt3dadd( 9.95394, 27.852, 10.9094, 0.83 ) }
    dend_29 { pt3dadd( 10.2135, 30.258, 11.2218, 0.28 ) }
    dend_29 { pt3dadd( 10.2852, 30.9247, 11.3158, 0.55 ) }
    dend_29 { pt3dadd( 10.4052, 32.5947, 11.5885, 0.28 ) }
    dend_29 { pt3dadd( 10.4442, 33.0589, 11.6678, 0.55 ) }
    dend_29 { pt3dadd( 10.8188, 35.403, 12.086, 0.28 ) }
    dend_29 { pt3dadd( 10.9886, 36.1261, 12.2165, 0.55 ) }
    dend_29 { pt3dadd( 11.5904, 37.8459, 12.5417, 0.28 ) }
    dend_29 { pt3dadd( 12.3619, 39.801, 12.8934, 0.28 ) }
    dend_29 { pt3dadd( 13.1168, 41.5857, 13.1967, 0.55 ) }
    dend_29 { pt3dadd( 14.0475, 43.8576, 13.5231, 0.28 ) }
    dend_29 { pt3dadd( 14.4038, 44.7447, 13.645, 0.55 ) }
    dend_29 { pt3dadd( 15.9018, 48.2589, 14.4017, 0.28 ) }
    dend_29 { pt3dadd( 16.8111, 50.2889, 14.942, 0.55 ) }
    dend_29 { pt3dadd( 17.6445, 52.2016, 15.5339, 0.55 ) }
    dend_29 { pt3dadd( 18.4707, 54.3318, 16.2598, 0.28 ) }
    dend_29 { pt3dadd( 19.121, 56.2106, 16.9005, 0.55 ) }
    dend_29 { pt3dadd( 20.7283, 61.2835, 18.6978, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_29 { pt3dadd( 21.027, 62.3968, 19.0954, 0.55 ) }
    dend_29 { pt3dadd( 21.7771, 65.5564, 20.2925, 0.28 ) }
    dend_29 { pt3dadd( 22.0708, 67.1482, 20.8433, 0.55 ) }
    dend_29 { pt3dadd( 22.3815, 70.0725, 21.7592, 0.28 ) }
    dend_29 { pt3dadd( 22.362, 71.7904, 22.1979, 0.55 ) }
    dend_29 { pt3dadd( 22.0429, 74.1405, 22.6671, 0.28 ) }
    dend_29 { pt3dadd( 21.813, 75.3251, 22.9172, 0.55 ) }
    dend_29 { pt3dadd( 21.1358, 78.1199, 23.5383, 0.28 ) }
    dend_29 { pt3dadd( 20.5939, 80.4574, 24.2387, 0.83 ) }
    dend_29 { pt3dadd( 19.8243, 84.0257, 25.5391, 0.28 ) }
    dend_29 { pt3dadd( 19.4793, 85.8442, 26.2655, 0.55 ) }
    dend_29 { pt3dadd( 18.9654, 88.9804, 27.6486, 0.28 ) }
    dend_29 { pt3dadd( 18.7334, 90.4739, 28.3453, 0.55 ) }
    dend_29 { pt3dadd( 18.1828, 94.318, 30.3053, 0.28 ) }
    dend_29 { pt3dadd( 18.0778, 95.2315, 30.743, 0.55 ) }
    dend_29 { pt3dadd( 17.8387, 97.6604, 31.8498, 0.28 ) }
    dend_29 { pt3dadd( 17.7271, 99.0964, 32.4855, 0.55 ) }
    dend_29 { pt3dadd( 17.4915, 102.838, 34.0605, 0.28 ) }
    dend_29 { pt3dadd( 17.4247, 104.169, 34.5398, 0.55 ) }
    dend_29 { pt3dadd( 17.3139, 106.933, 35.3106, 0.28 ) }
    dend_29 { pt3dadd( 17.3182, 109.636, 36.0067, 0.28 ) }
    dend_29 { pt3dadd( 17.3318, 109.966, 36.0876, 0.83 ) }
    dend_29 { pt3dadd( 17.4403, 111.731, 36.486, 0.28 ) }
    dend_29 { pt3dadd( 17.6298, 113.366, 36.8173, 0.55 ) }
    dend_29 { pt3dadd( 17.9472, 116.004, 37.3893, 0.28 ) }
    dend_29 { pt3dadd( 18.3363, 118.322, 37.9256, 0.55 ) }
    dend_29 { pt3dadd( 20.342, 130.093, 39.8065, 0.55 ) }
    // Section: dend_28, id: dend_28, parent: soma_0 (entry count 27/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 2.55611, 4.83035, 8.114, 0.55 ) }
    dend_28 { pt3dadd( 4.15044, 6.18285, 8.9054, 0.55 ) }
    dend_28 { pt3dadd( 5.91533, 7.64662, 9.93435, 1.11 ) }
    dend_28 { pt3dadd( 7.30013, 8.91269, 10.7674, 0.55 ) }
    dend_28 { pt3dadd( 9.03354, 10.6032, 11.7191, 0.55 ) }
    dend_28 { pt3dadd( 10.7145, 12.2426, 12.6419, 0.55 ) }
    dend_28 { pt3dadd( 12.1688, 13.6608, 13.4403, 0.83 ) }
    dend_28 { pt3dadd( 13.4514, 14.8435, 14.2344, 0.55 ) }
    dend_28 { pt3dadd( 14.934, 16.1198, 15.2415, 0.28 ) }
    dend_28 { pt3dadd( 16.0086, 17.1774, 16.0521, 0.55 ) }
    dend_28 { pt3dadd( 22.7845, 24.882, 20.545, 0.55 ) }
    dend_28 { pt3dadd( 28.5101, 33.4662, 24.8251, 0.55 ) }
    dend_28 { pt3dadd( 33.6678, 42.9199, 27.6491, 0.55 ) }
    dend_28 { pt3dadd( 39.6126, 52.3138, 28.1009, 0.55 ) }
    dend_28 { pt3dadd( 46.5234, 61.03, 27.3512, 0.55 ) }
    dend_28 { pt3dadd( 54.7566, 68.2278, 24.929, 0.55 ) }
    // Section: dend_19, id: dend_19, parent: soma_0 (entry count 43/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -2.57389, 5.5421, 1.184, 0.83 ) }
    dend_19 { pt3dadd( -2.70287, 8.22398, 2.6189, 0.83 ) }
    dend_19 { pt3dadd( -2.69592, 11.207, 3.92407, 0.83 ) }
    dend_19 { pt3dadd( -2.56945, 14.2214, 5.00502, 1.66 ) }
    dend_19 { pt3dadd( -2.2055, 19.6599, 6.69372, 0.83 ) }
    dend_19 { pt3dadd( -2.12868, 22.1909, 7.38525, 0.83 ) }
    dend_19 { pt3dadd( -2.07675, 25.1821, 8.12727, 1.66 ) }
    dend_19 { pt3dadd( -1.91944, 29.1715, 9.04407, 0.83 ) }
    dend_19 { pt3dadd( -1.74769, 32.8948, 9.74172, 0.83 ) }
    dend_19 { pt3dadd( -1.63611, 35.4054, 10.1321, 0.83 ) }
    dend_19 { pt3dadd( -1.50503, 40.9218, 10.4597, 0.83 ) }
    dend_19 { pt3dadd( -1.53483, 43.4608, 10.6363, 0.83 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 55/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -2.93389, -8.97565, -0.806, 1.66 ) }
    dend_0 { pt3dadd( -2.60052, -12.1063, -1.32224, 1.66 ) }
    dend_0 { pt3dadd( -2.25431, -15.6249, -1.9907, 1.66 ) }
    dend_0 { pt3dadd( -1.93945, -18.8249, -2.59864, 0.83 ) }
    dend_0 { pt3dadd( -1.45824, -23.7154, -3.52775, 1.11 ) }
    dend_0 { pt3dadd( -1.08142, -27.5451, -4.25531, 1.11 ) }
    dend_0 { pt3dadd( -0.86253, -29.7697, -4.67794, 1.11 ) }
    dend_0 { pt3dadd( -0.548759, -31.9195, -5.1559, 1.11 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 63/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 2.04896, 6.48508, -0.0756169, 0.55 ) }
    axon_0 { pt3dadd( 6.58939, 20.7814, -0.0756169, 0.55 ) }
    axon_0 { pt3dadd( 11.1298, 35.0777, -0.0756169, 0.55 ) }
    // Section: dend_25, id: dend_25, parent: dend_19 (entry count 66/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( -1.53483, 43.4608, 10.6363, 0.55 ) }
    dend_25 { pt3dadd( -1.4368, 48.7839, 9.14957, 0.55 ) }
    dend_25 { pt3dadd( -1.15354, 52.0508, 8.08506, 0.55 ) }
    dend_25 { pt3dadd( -0.696246, 55.3002, 7.00119, 0.83 ) }
    dend_25 { pt3dadd( -0.339485, 57.4394, 6.30147, 0.28 ) }
    dend_25 { pt3dadd( -0.120119, 58.6289, 5.95251, 0.28 ) }
    dend_25 { pt3dadd( 0.0787163, 59.6898, 5.67036, 0.55 ) }
    dend_25 { pt3dadd( 0.704862, 62.5604, 4.95052, 0.55 ) }
    dend_25 { pt3dadd( 0.965353, 64.1756, 4.63825, 0.55 ) }
    dend_25 { pt3dadd( 1.08602, 65.3861, 4.51218, 0.83 ) }
    dend_25 { pt3dadd( 1.21522, 69.1173, 4.19572, 0.55 ) }
    dend_25 { pt3dadd( 1.10204, 70.6441, 4.09886, 0.83 ) }
    dend_25 { pt3dadd( 0.826273, 72.2019, 4.03543, 0.28 ) }
    dend_25 { pt3dadd( 0.436433, 73.725, 4.03555, 0.55 ) }
    dend_25 { pt3dadd( -0.313018, 76.259, 3.98483, 0.55 ) }
    dend_25 { pt3dadd( -1.29656, 79.173, 3.91611, 0.55 ) }
    dend_25 { pt3dadd( -2.05795, 81.0933, 3.69785, 0.28 ) }
    dend_25 { pt3dadd( -2.46247, 82.1173, 3.48299, 0.28 ) }
    dend_25 { pt3dadd( -3.02425, 83.5389, 3.07797, 0.55 ) }
    dend_25 { pt3dadd( -3.70373, 85.12, 2.44278, 0.28 ) }
    dend_25 { pt3dadd( -4.30395, 86.5768, 1.74815, 1.11 ) }
    dend_25 { pt3dadd( -6.17365, 90.8251, -0.369301, 0.28 ) }
    dend_25 { pt3dadd( -6.80213, 92.2844, -1.04047, 0.83 ) }
    dend_25 { pt3dadd( -7.88233, 94.7994, -2.08679, 0.83 ) }
    dend_25 { pt3dadd( -9.09278, 97.5748, -3.08828, 0.28 ) }
    dend_25 { pt3dadd( -9.99941, 99.6642, -3.70476, 0.28 ) }
    dend_25 { pt3dadd( -11.7101, 103.823, -4.6664, 0.83 ) }
    dend_25 { pt3dadd( -12.444, 105.791, -4.93216, 0.28 ) }
    dend_25 { pt3dadd( -13.1666, 107.81, -5.11918, 0.55 ) }
    dend_25 { pt3dadd( -14.4335, 111.631, -5.41782, 0.55 ) }
    dend_25 { pt3dadd( -15.0384, 113.595, -5.52992, 1.11 ) }
    dend_25 { pt3dadd( -15.7598, 116.032, -5.70774, 0.55 ) }
    dend_25 { pt3dadd( -16.3569, 118.495, -5.85441, 0.55 ) }
    dend_25 { pt3dadd( -17.0198, 121.318, -6.03252, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_25 { pt3dadd( -17.8197, 124.863, -6.27705, 0.55 ) }
    dend_25 { pt3dadd( -18.0773, 126.265, -6.36761, 0.55 ) }
    dend_25 { pt3dadd( -18.3399, 127.821, -6.47138, 0.55 ) }
    dend_25 { pt3dadd( -19.0649, 132.271, -6.77133, 0.55 ) }
    dend_25 { pt3dadd( -19.4959, 134.903, -6.9427, 0.83 ) }
    dend_25 { pt3dadd( -19.8896, 137.936, -7.10354, 0.28 ) }
    dend_25 { pt3dadd( -20.26, 140.839, -7.23582, 0.55 ) }
    dend_25 { pt3dadd( -20.5268, 142.883, -7.34689, 0.55 ) }
    dend_25 { pt3dadd( -20.7901, 145.043, -7.51972, 0.28 ) }
    dend_25 { pt3dadd( -20.9309, 146.3, -7.65638, 0.55 ) }
    dend_25 { pt3dadd( -21.2644, 149.403, -7.91285, 0.55 ) }
    dend_25 { pt3dadd( -21.4495, 151.198, -8.02322, 0.28 ) }
    dend_25 { pt3dadd( -21.5736, 152.111, -8.08705, 0.83 ) }
    dend_25 { pt3dadd( -21.9053, 154.784, -8.25261, 0.28 ) }
    dend_25 { pt3dadd( -22.0146, 155.704, -8.31865, 0.55 ) }
    dend_25 { pt3dadd( -22.2416, 157.384, -8.45216, 0.28 ) }
    dend_25 { pt3dadd( -22.4309, 158.759, -8.56008, 0.55 ) }
    dend_25 { pt3dadd( -22.7728, 161.382, -8.7061, 0.55 ) }
    dend_25 { pt3dadd( -23.4956, 165.937, -8.89858, 0.55 ) }
    dend_25 { pt3dadd( -23.9898, 168.765, -9.02627, 0.28 ) }
    dend_25 { pt3dadd( -24.161, 169.846, -9.08506, 0.83 ) }
    dend_25 { pt3dadd( -24.4446, 171.767, -9.19321, 0.83 ) }
    dend_25 { pt3dadd( -24.8457, 174.66, -9.35863, 0.55 ) }
    dend_25 { pt3dadd( -25.1303, 177.808, -9.47984, 0.55 ) }
    dend_25 { pt3dadd( -25.4149, 181.028, -9.37664, 0.55 ) }
    dend_25 { pt3dadd( -25.5649, 183.499, -9.24333, 0.55 ) }
    dend_25 { pt3dadd( -25.6557, 186.936, -9.02802, 0.55 ) }
    dend_25 { pt3dadd( -25.6766, 190.858, -8.75102, 0.55 ) }
    dend_25 { pt3dadd( -25.5148, 195.951, -8.32986, 0.55 ) }
    dend_25 { pt3dadd( -25.2891, 200.198, -7.91569, 0.55 ) }
    dend_25 { pt3dadd( -25.0577, 204.424, -7.46184, 0.55 ) }
    dend_25 { pt3dadd( -24.9127, 206.952, -7.21085, 0.55 ) }
    dend_25 { pt3dadd( -24.7168, 209.09, -7.03107, 0.83 ) }
    dend_25 { pt3dadd( -24.498, 211.039, -6.90618, 0.55 ) }
    dend_25 { pt3dadd( -24.1974, 213.853, -6.75579, 0.55 ) }
    dend_25 { pt3dadd( -23.8333, 216.606, -6.61497, 0.55 ) }
    dend_25 { pt3dadd( -23.6247, 218.247, -6.43818, 0.83 ) }
    dend_25 { pt3dadd( -23.283, 220.885, -6.17325, 0.28 ) }
    dend_25 { pt3dadd( -22.8359, 224.223, -5.74843, 0.55 ) }
    dend_25 { pt3dadd( -22.3513, 228.139, -5.15255, 0.55 ) }
    dend_25 { pt3dadd( -22.0359, 230.724, -4.67988, 0.55 ) }
    dend_25 { pt3dadd( -21.868, 232.221, -4.38163, 0.28 ) }
    dend_25 { pt3dadd( -21.6819, 234.185, -3.9616, 0.55 ) }
    dend_25 { pt3dadd( -21.3911, 238.023, -3.06002, 0.55 ) }
    dend_25 { pt3dadd( -21.1292, 241.639, -2.20661, 0.55 ) }
    dend_25 { pt3dadd( -21.0087, 243.525, -1.82451, 0.55 ) }
    // Section: dend_20, id: dend_20, parent: dend_19 (entry count 46/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( -1.53483, 43.4608, 10.6363, 0.55 ) }
    dend_20 { pt3dadd( -1.56436, 45.9053, 10.578, 0.55 ) }
    dend_20 { pt3dadd( -1.60069, 48.9127, 10.5063, 0.55 ) }
    dend_20 { pt3dadd( -1.62091, 50.5873, 10.4664, 0.55 ) }
    dend_20 { pt3dadd( -1.63881, 52.0688, 10.431, 0.55 ) }
    dend_20 { pt3dadd( -1.66373, 54.132, 10.3818, 0.55 ) }
    dend_20 { pt3dadd( -1.68614, 55.9879, 10.3376, 0.55 ) }
    // Section: dend_18, id: dend_18, parent: dend_0 (entry count 53/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -0.548759, -31.9195, -5.1559, 0.55 ) }
    dend_18 { pt3dadd( -0.0952956, -33.1522, -4.49648, 0.55 ) }
    dend_18 { pt3dadd( 0.737223, -35.4376, -3.70782, 0.55 ) }
    dend_18 { pt3dadd( 1.97517, -38.4995, -2.0291, 0.55 ) }
    dend_18 { pt3dadd( 2.51612, -39.8745, -1.22136, 0.55 ) }
    dend_18 { pt3dadd( 2.92869, -41.0175, -0.499098, 0.55 ) }
    dend_18 { pt3dadd( 3.70906, -43.1027, 0.826998, 0.55 ) }
    dend_18 { pt3dadd( 4.34036, -44.7075, 1.85395, 0.55 ) }
    dend_18 { pt3dadd( 6.02785, -48.2688, 4.18454, 0.55 ) }
    dend_18 { pt3dadd( 6.74266, -49.5959, 4.95594, 0.55 ) }
    dend_18 { pt3dadd( 8.50399, -52.3976, 6.57736, 0.28 ) }
    dend_18 { pt3dadd( 9.37169, -53.4997, 7.26233, 0.28 ) }
    dend_18 { pt3dadd( 10.438, -54.4521, 7.90659, 0.55 ) }
    dend_18 { pt3dadd( 11.5033, -55.0758, 8.28194, 0.28 ) }
    dend_18 { pt3dadd( 12.3557, -55.3156, 8.35053, 0.55 ) }
    dend_18 { pt3dadd( 15.1923, -55.461, 8.53853, 0.55 ) }
    dend_18 { pt3dadd( 16.4145, -55.2812, 8.43381, 0.55 ) }
    dend_18 { pt3dadd( 17.1739, -55.1352, 8.29752, 0.55 ) }
    dend_18 { pt3dadd( 18.4517, -54.8566, 7.98015, 0.55 ) }
    dend_18 { pt3dadd( 19.8705, -54.605, 7.56518, 0.55 ) }
    dend_18 { pt3dadd( 21.6213, -54.3214, 6.96606, 0.55 ) }
    dend_18 { pt3dadd( 25.8892, -53.6935, 5.41497, 0.55 ) }
    dend_18 { pt3dadd( 27.7948, -53.4119, 4.73527, 0.28 ) }
    dend_18 { pt3dadd( 28.5278, -53.2824, 4.48288, 0.55 ) }
    dend_18 { pt3dadd( 31.29, -52.7917, 3.40003, 0.55 ) }
    dend_18 { pt3dadd( 32.0175, -52.6226, 3.09243, 0.55 ) }
    dend_18 { pt3dadd( 33.6094, -52.1395, 2.44149, 0.28 ) }
    dend_18 { pt3dadd( 34.5932, -51.7466, 2.14591, 0.28 ) }
    dend_18 { pt3dadd( 36.1143, -51.0548, 1.71954, 0.55 ) }
    dend_18 { pt3dadd( 38.6684, -49.8513, 0.907807, 0.28 ) }
    dend_18 { pt3dadd( 39.8748, -49.2918, 0.49361, 0.28 ) }
    dend_18 { pt3dadd( 40.7687, -48.9405, 0.181233, 0.55 ) }
    dend_18 { pt3dadd( 43.2204, -48.1256, -0.797767, 0.28 ) }
    dend_18 { pt3dadd( 44.3954, -47.7645, -1.27624, 0.83 ) }
    dend_18 { pt3dadd( 46.5598, -47.1432, -2.11162, 0.28 ) }
    dend_18 { pt3dadd( 47.3757, -46.9216, -2.38406, 0.28 ) }
    dend_18 { pt3dadd( 48.2461, -46.7369, -2.71937, 0.83 ) }
    dend_18 { pt3dadd( 50.0686, -46.4332, -3.54388, 0.28 ) }
    dend_18 { pt3dadd( 51.2802, -46.38, -4.22762, 0.83 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 92/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -0.548759, -31.9195, -5.1559, 0.83 ) }
    dend_1 { pt3dadd( -0.236174, -32.5867, -5.68937, 0.83 ) }
    dend_1 { pt3dadd( 0.874603, -34.9576, -7.58506, 0.83 ) }
    dend_1 { pt3dadd( 2.42656, -38.2703, -10.2337, 0.83 ) }
    dend_1 { pt3dadd( 4.66961, -43.0581, -14.0617, 0.83 ) }
    dend_1 { pt3dadd( 6.39013, -46.7305, -16.998, 0.83 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 98/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 11.1298, 35.0777, -0.0756169, 0.28 ) }
    axon_1 { pt3dadd( 15.6702, 49.374, -0.0756169, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    axon_1 { pt3dadd( 20.2107, 63.6703, -0.0756169, 0.28 ) }
    // Section: dend_27, id: dend_27, parent: dend_25 (entry count 1/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( -21.0087, 243.525, -1.82451, 0.55 ) }
    dend_27 { pt3dadd( -19.5247, 244.252, -1.37232, 0.55 ) }
    dend_27 { pt3dadd( -18.1563, 244.921, -0.955376, 0.28 ) }
    dend_27 { pt3dadd( -16.4821, 245.741, -0.445251, 0.55 ) }
    dend_27 { pt3dadd( -6.88741, 249.443, 3.77273, 0.55 ) }
    // Section: dend_26, id: dend_26, parent: dend_25 (entry count 6/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( -21.0087, 243.525, -1.82451, 0.55 ) }
    dend_26 { pt3dadd( -20.5523, 245.488, -0.94425, 0.55 ) }
    dend_26 { pt3dadd( -19.8808, 248.401, 0.301654, 0.55 ) }
    dend_26 { pt3dadd( -19.3871, 250.659, 1.25052, 0.55 ) }
    dend_26 { pt3dadd( -18.8695, 253.295, 2.24779, 0.55 ) }
    dend_26 { pt3dadd( -18.4432, 255.528, 3.08489, 0.55 ) }
    dend_26 { pt3dadd( -18.133, 257.509, 3.79745, 0.28 ) }
    dend_26 { pt3dadd( -17.965, 258.762, 4.175, 0.28 ) }
    dend_26 { pt3dadd( -17.8916, 259.417, 4.32227, 0.55 ) }
    dend_26 { pt3dadd( -17.5593, 262.501, 4.88802, 0.55 ) }
    dend_26 { pt3dadd( -17.2654, 266.297, 5.58911, 0.28 ) }
    dend_26 { pt3dadd( -17.1483, 268.372, 5.96904, 0.28 ) }
    dend_26 { pt3dadd( -17.0771, 270.28, 6.28758, 0.55 ) }
    dend_26 { pt3dadd( -16.7989, 274.348, 6.91754, 0.28 ) }
    dend_26 { pt3dadd( -16.6591, 276.152, 7.16404, 0.55 ) }
    dend_26 { pt3dadd( -13.6353, 284.899, 9.18096, 0.55 ) }
    // Section: dend_24, id: dend_24, parent: dend_20 (entry count 22/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( -1.68614, 55.9879, 10.3376, 0.55 ) }
    dend_24 { pt3dadd( -0.394966, 57.2682, 10.9878, 0.55 ) }
    dend_24 { pt3dadd( 1.21896, 58.8686, 11.8005, 0.55 ) }
    dend_24 { pt3dadd( 2.82329, 60.4594, 12.6084, 0.55 ) }
    dend_24 { pt3dadd( 3.55569, 61.1857, 12.9772, 0.55 ) }
    dend_24 { pt3dadd( 5.53436, 63.1477, 13.9736, 0.83 ) }
    dend_24 { pt3dadd( 13.4234, 72.1548, 16.4754, 0.83 ) }
    dend_24 { pt3dadd( 22.3738, 80.4892, 17.2928, 0.83 ) }
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 30/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( -1.68614, 55.9879, 10.3376, 0.55 ) }
    dend_21 { pt3dadd( -2.65412, 58.1517, 10.2995, 0.55 ) }
    dend_21 { pt3dadd( -3.81552, 60.8175, 10.1278, 0.55 ) }
    dend_21 { pt3dadd( -4.73419, 62.7486, 9.94884, 0.55 ) }
    dend_21 { pt3dadd( -5.69368, 64.5732, 9.81913, 0.55 ) }
    dend_21 { pt3dadd( -6.18455, 65.4808, 9.77036, 0.83 ) }
    dend_21 { pt3dadd( -7.34651, 67.5404, 9.73094, 0.55 ) }
    dend_21 { pt3dadd( -8.38895, 69.2793, 9.69161, 0.55 ) }
    dend_21 { pt3dadd( -9.03958, 70.3409, 9.77255, 0.83 ) }
    dend_21 { pt3dadd( -10.0578, 71.9299, 9.95414, 0.28 ) }
    dend_21 { pt3dadd( -10.7648, 72.9544, 10.0846, 0.55 ) }
    dend_21 { pt3dadd( -11.8872, 74.6345, 10.339, 0.55 ) }
    dend_21 { pt3dadd( -12.564, 75.6724, 10.6077, 0.55 ) }
    dend_21 { pt3dadd( -13.3808, 77.2591, 11.0184, 0.28 ) }
    dend_21 { pt3dadd( -13.9674, 78.6858, 11.2965, 0.55 ) }
    dend_21 { pt3dadd( -14.4973, 80.0873, 11.5208, 0.55 ) }
    dend_21 { pt3dadd( -15.0137, 81.5105, 11.747, 0.28 ) }
    dend_21 { pt3dadd( -15.7731, 84.0291, 12.1045, 0.55 ) }
    dend_21 { pt3dadd( -16.2846, 86.0074, 12.4036, 0.28 ) }
    dend_21 { pt3dadd( -16.7265, 87.7142, 12.6568, 0.55 ) }
    // Section: dend_17, id: dend_17, parent: dend_1 (entry count 50/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 6.39013, -46.7305, -16.998, 0.55 ) }
    dend_17 { pt3dadd( 8.20184, -47.6329, -16.284, 0.55 ) }
    dend_17 { pt3dadd( 10.0725, -48.5053, -15.2736, 0.55 ) }
    dend_17 { pt3dadd( 12.6085, -49.7667, -13.8051, 0.55 ) }
    dend_17 { pt3dadd( 14.2269, -50.6082, -12.8836, 0.28 ) }
    dend_17 { pt3dadd( 16.0678, -51.5439, -11.6461, 0.55 ) }
    dend_17 { pt3dadd( 20.7502, -54.0188, -8.29618, 0.55 ) }
    dend_17 { pt3dadd( 22.164, -54.8272, -7.14166, 0.55 ) }
    dend_17 { pt3dadd( 23.3347, -55.4606, -6.13685, 0.28 ) }
    dend_17 { pt3dadd( 23.9736, -55.8014, -5.56699, 0.55 ) }
    dend_17 { pt3dadd( 27.0695, -57.036, -3.19154, 0.28 ) }
    dend_17 { pt3dadd( 28.3374, -57.4708, -2.20852, 0.28 ) }
    dend_17 { pt3dadd( 29.1885, -57.7, -1.62226, 0.55 ) }
    dend_17 { pt3dadd( 30.6119, -58.115, -0.566258, 0.55 ) }
    dend_17 { pt3dadd( 33.1058, -58.833, 1.26434, 0.55 ) }
    dend_17 { pt3dadd( 35.3446, -59.547, 2.80186, 0.55 ) }
    dend_17 { pt3dadd( 39.1459, -60.8379, 5.14252, 0.55 ) }
    dend_17 { pt3dadd( 42.0432, -61.8004, 6.93295, 0.28 ) }
    dend_17 { pt3dadd( 43.7272, -62.3622, 7.96849, 0.28 ) }
    dend_17 { pt3dadd( 45.2138, -62.8878, 8.86315, 0.83 ) }
    dend_17 { pt3dadd( 47.2211, -63.5892, 10.1116, 0.28 ) }
    dend_17 { pt3dadd( 48.1512, -63.8881, 10.688, 0.55 ) }
    dend_17 { pt3dadd( 50.0977, -64.3553, 11.6557, 0.28 ) }
    dend_17 { pt3dadd( 51.0095, -64.5149, 12.1091, 0.28 ) }
    dend_17 { pt3dadd( 51.8037, -64.6017, 12.5477, 0.55 ) }
    dend_17 { pt3dadd( 55.1278, -64.8436, 14.6382, 0.55 ) }
    dend_17 { pt3dadd( 56.8329, -64.8946, 15.8631, 0.28 ) }
    dend_17 { pt3dadd( 57.8531, -64.9602, 16.6462, 0.55 ) }
    dend_17 { pt3dadd( 59.1074, -65.13, 17.6352, 0.55 ) }
    dend_17 { pt3dadd( 66.3063, -68.0342, 24.3969, 0.55 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 80/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 6.39013, -46.7305, -16.998, 0.83 ) }
    dend_2 { pt3dadd( 4.21173, -49.3787, -17.3452, 0.83 ) }
    dend_2 { pt3dadd( 3.69708, -50.0044, -17.4272, 0.83 ) }
    // Section: dend_23, id: dend_23, parent: dend_21 (entry count 83/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( -16.7265, 87.7142, 12.6568, 0.55 ) }
    dend_23 { pt3dadd( -19.2838, 90.2098, 15.3039, 0.55 ) }
    dend_23 { pt3dadd( -25.7869, 96.0826, 20.8234, 0.55 ) }
    // Section: dend_22, id: dend_22, parent: dend_21 (entry count 86/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( -16.7265, 87.7142, 12.6568, 0.28 ) }
    dend_22 { pt3dadd( -16.1111, 90.041, 12.6101, 0.28 ) }
    dend_22 { pt3dadd( -15.7137, 92.2123, 12.6303, 0.55 ) }
    dend_22 { pt3dadd( -15.1336, 95.3824, 12.6596, 0.28 ) }
    dend_22 { pt3dadd( -14.7581, 97.4341, 12.6786, 0.28 ) }
    dend_22 { pt3dadd( -14.6143, 98.2199, 12.6859, 0.55 ) }
    dend_22 { pt3dadd( -14.2122, 100.416, 12.7062, 0.28 ) }
    dend_22 { pt3dadd( -14.1275, 101.318, 12.7096, 0.83 ) }
    dend_22 { pt3dadd( -13.4853, 110.542, 14.1745, 0.83 ) }
    // Section: dend_16, id: dend_16, parent: dend_2 (entry count 95/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 3.69708, -50.0044, -17.4272, 0.55 ) }
    dend_16 { pt3dadd( 3.86919, -51.0431, -17.2801, 0.55 ) }
    dend_16 { pt3dadd( 4.17509, -53.1317, -17.0341, 0.55 ) }
    dend_16 { pt3dadd( 4.3424, -54.6528, -16.8895, 0.28 ) }
    dend_16 { pt3dadd( 4.49855, -57.3709, -16.717, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_16 { pt3dadd( 4.48152, -59.3877, -16.6565, 0.55 ) }
    dend_16 { pt3dadd( 4.38349, -61.7342, -16.6286, 0.55 ) }
    dend_16 { pt3dadd( 4.08759, -64.8296, -16.6554, 0.55 ) }
    dend_16 { pt3dadd( 3.90494, -66.0104, -16.6639, 0.55 ) }
    dend_16 { pt3dadd( 3.25801, -69.5359, -16.5706, 0.55 ) }
    dend_16 { pt3dadd( 2.73013, -71.8169, -16.4638, 0.55 ) }
    dend_16 { pt3dadd( 1.93274, -74.8172, -16.2533, 0.55 ) }
    dend_16 { pt3dadd( 1.40816, -76.5734, -16.0894, 0.28 ) }
    dend_16 { pt3dadd( 0.823544, -78.5343, -15.8384, 0.83 ) }
    dend_16 { pt3dadd( 0.0845605, -81.1664, -15.4448, 0.55 ) }
    dend_16 { pt3dadd( -0.311422, -82.5083, -15.1798, 0.28 ) }
    dend_16 { pt3dadd( -0.644099, -83.6266, -14.9343, 0.55 ) }
    dend_16 { pt3dadd( -1.48562, -86.2559, -14.3923, 0.28 ) }
    dend_16 { pt3dadd( -1.72938, -87.0605, -14.2549, 0.55 ) }
    dend_16 { pt3dadd( -2.33136, -89.0873, -14.0225, 0.55 ) }
    dend_16 { pt3dadd( -2.9671, -91.1878, -13.9849, 0.28 ) }
    dend_16 { pt3dadd( -3.21243, -92.1321, -14.015, 0.55 ) }
    dend_16 { pt3dadd( -3.54799, -93.7739, -14.1278, 0.28 ) }
    dend_16 { pt3dadd( -3.68738, -94.9461, -14.2764, 0.28 ) }
    dend_16 { pt3dadd( -3.80621, -96.3704, -14.4845, 0.55 ) }
    dend_16 { pt3dadd( -3.94194, -99.0677, -14.9174, 0.28 ) }
    dend_16 { pt3dadd( -3.98895, -101.885, -15.3881, 0.28 ) }
    dend_16 { pt3dadd( -3.97384, -103.312, -15.6253, 0.83 ) }
    dend_16 { pt3dadd( -3.93254, -104.882, -15.8746, 0.28 ) }
    dend_16 { pt3dadd( -3.91996, -106.172, -16.0655, 0.55 ) }
    dend_16 { pt3dadd( -3.95627, -107.698, -16.2459, 0.28 ) }
    dend_16 { pt3dadd( -4.00489, -108.458, -16.3405, 0.55 ) }
    dend_16 { pt3dadd( -4.29815, -111.137, -16.943, 0.28 ) }
    dend_16 { pt3dadd( -4.41916, -112.051, -17.1923, 0.55 ) }
    dend_16 { pt3dadd( -4.63964, -113.483, -17.7371, 0.28 ) }
    dend_16 { pt3dadd( -4.78726, -114.459, -18.2013, 0.55 ) }
    dend_16 { pt3dadd( -5.16091, -116.446, -19.2848, 0.55 ) }
    dend_16 { pt3dadd( -5.54689, -118.277, -20.3336, 0.55 ) }
    dend_16 { pt3dadd( -5.9618, -119.896, -21.2584, 0.55 ) }
    dend_16 { pt3dadd( -6.49125, -122.179, -22.55, 0.28 ) }
    dend_16 { pt3dadd( -6.56105, -122.64, -22.8203, 0.55 ) }
    dend_16 { pt3dadd( -6.67659, -123.502, -23.3332, 0.28 ) }
    dend_16 { pt3dadd( -6.71216, -123.79, -23.4889, 0.55 ) }
    dend_16 { pt3dadd( -6.75153, -124.581, -23.9453, 0.28 ) }
    dend_16 { pt3dadd( -6.74456, -125.432, -24.4172, 0.55 ) }
    dend_16 { pt3dadd( -6.61615, -127.908, -25.8113, 0.28 ) }
    dend_16 { pt3dadd( -6.56508, -128.559, -26.1954, 0.55 ) }
    dend_16 { pt3dadd( -6.40967, -130.713, -27.3885, 0.55 ) }
    dend_16 { pt3dadd( -6.29827, -133.07, -28.7126, 0.28 ) }
    dend_16 { pt3dadd( -6.28014, -133.695, -29.0572, 0.55 ) }
    dend_16 { pt3dadd( -6.5111, -135.774, -29.7288, 0.28 ) }
    dend_16 { pt3dadd( -6.70387, -136.716, -29.8117, 0.55 ) }
    dend_16 { pt3dadd( -7.20256, -138.729, -29.7651, 0.28 ) }
    dend_16 { pt3dadd( -7.57935, -139.999, -29.5497, 0.55 ) }
    dend_16 { pt3dadd( -7.93223, -141.101, -29.2544, 0.55 ) }
    dend_16 { pt3dadd( -9.78722, -147.123, -27.2509, 0.28 ) }
    dend_16 { pt3dadd( -10.2098, -148.545, -26.6491, 0.28 ) }
    dend_16 { pt3dadd( -10.3757, -149.218, -26.3837, 0.55 ) }
    dend_16 { pt3dadd( -10.7233, -151.218, -25.6632, 0.28 ) }
    dend_16 { pt3dadd( -10.7797, -151.662, -25.5111, 0.55 ) }
    dend_16 { pt3dadd( -10.9431, -153.819, -24.9016, 0.28 ) }
    dend_16 { pt3dadd( -10.8696, -155.181, -24.7728, 0.55 ) }
    dend_16 { pt3dadd( -10.7019, -158.605, -24.7134, 0.28 ) }
    dend_16 { pt3dadd( -10.6267, -159.661, -24.795, 0.55 ) }
    dend_16 { pt3dadd( -10.5257, -160.682, -25.0011, 0.28 ) }
    dend_16 { pt3dadd( -10.4541, -161.349, -25.1834, 0.55 ) }
    dend_16 { pt3dadd( -10.2381, -163.247, -25.8736, 0.28 ) }
    dend_16 { pt3dadd( -10.1653, -163.938, -26.1536, 0.55 ) }
    dend_16 { pt3dadd( -10.0259, -165.824, -26.8302, 0.55 ) }
    dend_16 { pt3dadd( -9.9014, -167.197, -27.3671, 0.28 ) }
    dend_16 { pt3dadd( -9.82361, -167.712, -27.5703, 0.55 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 66/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 3.69708, -50.0044, -17.4272, 0.55 ) }
    dend_3 { pt3dadd( 4.75581, -52.0316, -19.4029, 0.55 ) }
    dend_3 { pt3dadd( 6.25631, -54.9047, -22.2031, 0.55 ) }
    // Section: dend_15, id: dend_15, parent: dend_3 (entry count 69/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 6.25631, -54.9047, -22.2031, 0.55 ) }
    dend_15 { pt3dadd( 8.32653, -54.9628, -20.6219, 0.55 ) }
    dend_15 { pt3dadd( 9.68165, -54.9324, -19.5235, 0.28 ) }
    dend_15 { pt3dadd( 10.2291, -54.9269, -19.1051, 0.55 ) }
    dend_15 { pt3dadd( 11.7095, -54.8777, -17.9533, 0.55 ) }
    dend_15 { pt3dadd( 12.7881, -54.8809, -17.1061, 0.28 ) }
    dend_15 { pt3dadd( 13.58, -54.8962, -16.5473, 0.28 ) }
    dend_15 { pt3dadd( 14.9906, -54.9508, -15.6955, 0.55 ) }
    dend_15 { pt3dadd( 16.7728, -55.0435, -14.7363, 0.28 ) }
    dend_15 { pt3dadd( 18.5312, -55.1701, -13.9521, 0.28 ) }
    dend_15 { pt3dadd( 20.0668, -55.2715, -13.3598, 0.28 ) }
    dend_15 { pt3dadd( 22.4942, -55.4124, -12.6138, 0.55 ) }
    dend_15 { pt3dadd( 24.4144, -55.5059, -12.1392, 0.28 ) }
    dend_15 { pt3dadd( 26.7277, -55.5959, -11.7008, 0.28 ) }
    dend_15 { pt3dadd( 28.6611, -55.634, -11.4073, 0.55 ) }
    dend_15 { pt3dadd( 30.6252, -55.6697, -11.2424, 0.55 ) }
    dend_15 { pt3dadd( 33.3321, -55.6711, -11.1159, 0.28 ) }
    dend_15 { pt3dadd( 33.9126, -55.6952, -11.0942, 0.55 ) }
    dend_15 { pt3dadd( 35.3857, -55.8648, -11.0878, 0.28 ) }
    dend_15 { pt3dadd( 36.0917, -55.9988, -11.0747, 0.28 ) }
    dend_15 { pt3dadd( 37.7717, -56.3975, -10.9921, 0.55 ) }
    dend_15 { pt3dadd( 39.3215, -56.8344, -10.8355, 0.28 ) }
    dend_15 { pt3dadd( 40.7019, -57.2237, -10.5569, 0.83 ) }
    dend_15 { pt3dadd( 42.5687, -57.7977, -10.0094, 0.55 ) }
    dend_15 { pt3dadd( 44.8062, -58.4638, -9.14479, 0.28 ) }
    dend_15 { pt3dadd( 45.6226, -58.6782, -8.78273, 0.55 ) }
    dend_15 { pt3dadd( 47.1284, -59.0646, -7.789, 0.28 ) }
    dend_15 { pt3dadd( 47.7498, -59.2099, -7.26591, 0.83 ) }
    dend_15 { pt3dadd( 49.4884, -59.5195, -5.54244, 0.55 ) }
    dend_15 { pt3dadd( 50.4362, -59.6417, -4.42847, 0.55 ) }
    dend_15 { pt3dadd( 51.2111, -59.7225, -3.42552, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_15 { pt3dadd( 53.4213, -59.8597, -0.376255, 0.28 ) }
    dend_15 { pt3dadd( 53.8514, -59.8878, 0.201913, 0.28 ) }
    dend_15 { pt3dadd( 54.8306, -59.9129, 1.55415, 0.83 ) }
    dend_15 { pt3dadd( 56.1446, -59.8128, 3.41902, 0.28 ) }
    dend_15 { pt3dadd( 56.561, -59.7793, 4.00228, 0.55 ) }
    dend_15 { pt3dadd( 57.2744, -59.7108, 4.88605, 0.55 ) }
    dend_15 { pt3dadd( 59.7321, -59.451, 6.92259, 0.55 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 7/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 6.25631, -54.9047, -22.2031, 0.55 ) }
    dend_4 { pt3dadd( 7.65959, -57.6196, -25.312, 0.55 ) }
    // Section: dend_14, id: dend_14, parent: dend_4 (entry count 9/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 7.65959, -57.6196, -25.312, 0.55 ) }
    dend_14 { pt3dadd( 8.31457, -57.945, -26.4531, 0.55 ) }
    dend_14 { pt3dadd( 8.58379, -58.0329, -26.9215, 0.55 ) }
    dend_14 { pt3dadd( 9.85634, -58.4016, -29.9196, 0.28 ) }
    dend_14 { pt3dadd( 10.6444, -58.68, -32.836, 0.55 ) }
    dend_14 { pt3dadd( 10.8238, -58.8084, -34.1212, 0.28 ) }
    dend_14 { pt3dadd( 10.9523, -58.9566, -35.7019, 0.28 ) }
    dend_14 { pt3dadd( 10.9405, -59.0979, -37.7637, 0.83 ) }
    dend_14 { pt3dadd( 10.9588, -59.039, -40.7668, 0.28 ) }
    dend_14 { pt3dadd( 10.9117, -58.8802, -42.3068, 0.55 ) }
    dend_14 { pt3dadd( 10.8636, -58.7114, -43.6829, 0.55 ) }
    dend_14 { pt3dadd( 11.064, -58.3271, -46.1085, 0.28 ) }
    dend_14 { pt3dadd( 11.309, -58.0089, -47.7326, 0.83 ) }
    dend_14 { pt3dadd( 12.0419, -56.9038, -51.553, 0.28 ) }
    dend_14 { pt3dadd( 12.2488, -56.6221, -52.3607, 0.28 ) }
    dend_14 { pt3dadd( 12.546, -56.1054, -53.5958, 0.83 ) }
    dend_14 { pt3dadd( 13.0731, -54.7159, -56.4945, 0.28 ) }
    dend_14 { pt3dadd( 13.1518, -54.2562, -57.3781, 1.11 ) }
    dend_14 { pt3dadd( 13.4177, -53.1327, -59.7396, 0.55 ) }
    dend_14 { pt3dadd( 13.4954, -52.6546, -60.8054, 0.55 ) }
    dend_14 { pt3dadd( 13.7164, -52.0274, -62.3205, 0.55 ) }
    dend_14 { pt3dadd( 14.0733, -51.3545, -64.1153, 0.28 ) }
    dend_14 { pt3dadd( 14.1739, -51.1852, -64.6272, 0.83 ) }
    dend_14 { pt3dadd( 15.279, -49.7657, -69.2525, 0.28 ) }
    dend_14 { pt3dadd( 15.6318, -49.2549, -70.7896, 0.28 ) }
    dend_14 { pt3dadd( 16.115, -48.3714, -73.1272, 0.83 ) }
    dend_14 { pt3dadd( 16.6086, -47.2676, -75.7682, 0.28 ) }
    dend_14 { pt3dadd( 16.8399, -46.4667, -77.5304, 0.28 ) }
    dend_14 { pt3dadd( 16.8923, -45.7389, -78.9453, 0.83 ) }
    dend_14 { pt3dadd( 16.6472, -44.0747, -81.7455, 0.28 ) }
    dend_14 { pt3dadd( 16.5783, -43.6007, -82.4902, 0.83 ) }
    dend_14 { pt3dadd( 16.2852, -42.1983, -84.6101, 0.28 ) }
    dend_14 { pt3dadd( 16.1738, -41.4978, -85.5945, 0.83 ) }
    dend_14 { pt3dadd( 16.1668, -40.4621, -87.004, 0.28 ) }
    dend_14 { pt3dadd( 16.2677, -39.7048, -87.9608, 0.55 ) }
    dend_14 { pt3dadd( 16.7407, -38.2246, -89.8525, 0.28 ) }
    dend_14 { pt3dadd( 16.9316, -37.7352, -90.4281, 0.83 ) }
    dend_14 { pt3dadd( 17.3949, -36.6463, -91.6216, 0.28 ) }
    dend_14 { pt3dadd( 18.1916, -34.8601, -93.4893, 0.83 ) }
    dend_14 { pt3dadd( 18.9536, -33.4177, -95.0212, 0.28 ) }
    dend_14 { pt3dadd( 19.2136, -32.8754, -95.5797, 0.55 ) }
    dend_14 { pt3dadd( 19.8046, -31.7704, -96.7302, 0.28 ) }
    dend_14 { pt3dadd( 20.0227, -31.3753, -97.1432, 0.83 ) }
    dend_14 { pt3dadd( 20.5768, -30.2433, -98.3251, 0.28 ) }
    dend_14 { pt3dadd( 21.4675, -28.2705, -100.282, 0.28 ) }
    dend_14 { pt3dadd( 22.0958, -26.7815, -101.624, 1.11 ) }
    dend_14 { pt3dadd( 22.9461, -24.5502, -103.412, 0.28 ) }
    dend_14 { pt3dadd( 23.2234, -23.7809, -103.954, 0.55 ) }
    dend_14 { pt3dadd( 23.7287, -22.3394, -104.809, 0.28 ) }
    dend_14 { pt3dadd( 24.1045, -21.3591, -105.306, 0.55 ) }
    dend_14 { pt3dadd( 24.6344, -19.8422, -105.958, 0.28 ) }
    dend_14 { pt3dadd( 24.7352, -19.6066, -106.058, 0.55 ) }
    dend_14 { pt3dadd( 25.1692, -18.3758, -106.508, 0.28 ) }
    dend_14 { pt3dadd( 25.1692, -18.3758, -106.508, 0.55 ) }
    dend_14 { pt3dadd( 26.3479, -16.4001, -107.473, 0.28 ) }
    dend_14 { pt3dadd( 26.474, -16.1703, -107.596, 0.83 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 65/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 7.65959, -57.6196, -25.312, 0.83 ) }
    dend_5 { pt3dadd( 7.35756, -59.5381, -24.7183, 0.83 ) }
    dend_5 { pt3dadd( 6.97744, -61.9525, -23.9713, 0.55 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 68/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 6.97744, -61.9525, -23.9713, 0.55 ) }
    dend_7 { pt3dadd( 7.80769, -63.403, -24.5014, 0.55 ) }
    dend_7 { pt3dadd( 8.47838, -64.0485, -24.9994, 0.55 ) }
    dend_7 { pt3dadd( 9.79244, -65.2789, -26.0512, 0.55 ) }
    dend_7 { pt3dadd( 10.9917, -66.4493, -26.9588, 0.55 ) }
    dend_7 { pt3dadd( 11.8623, -67.299, -27.6176, 0.83 ) }
    dend_7 { pt3dadd( 12.7968, -68.2109, -28.3248, 0.55 ) }
    dend_7 { pt3dadd( 16.4186, -71.2858, -31.023, 0.55 ) }
    dend_7 { pt3dadd( 17.1059, -71.8257, -31.4809, 0.55 ) }
    dend_7 { pt3dadd( 18.0937, -72.5971, -32.0999, 0.55 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 78/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 6.97744, -61.9525, -23.9713, 0.55 ) }
    dend_6 { pt3dadd( 5.47361, -64.8331, -25.0665, 0.55 ) }
    dend_6 { pt3dadd( 4.49183, -66.7925, -25.8578, 0.55 ) }
    dend_6 { pt3dadd( 3.13111, -69.847, -27.0649, 0.55 ) }
    dend_6 { pt3dadd( 2.27903, -71.8497, -27.8837, 0.55 ) }
    dend_6 { pt3dadd( 0.449817, -76.3811, -29.7312, 0.55 ) }
    dend_6 { pt3dadd( -0.0912245, -77.7803, -30.2889, 0.28 ) }
    dend_6 { pt3dadd( -1.07094, -80.6218, -31.4011, 0.55 ) }
    dend_6 { pt3dadd( -1.76874, -82.9388, -32.3507, 0.28 ) }
    dend_6 { pt3dadd( -2.22811, -84.7937, -33.1423, 0.55 ) }
    dend_6 { pt3dadd( -2.81903, -87.9306, -34.4892, 0.55 ) }
    dend_6 { pt3dadd( -2.89058, -88.5018, -34.7535, 0.55 ) }
    dend_6 { pt3dadd( -3.10267, -90.3311, -35.689, 0.55 ) }
    dend_6 { pt3dadd( -3.59681, -93.1515, -37.0702, 0.55 ) }
    dend_6 { pt3dadd( -4.11701, -95.1512, -38.0564, 0.55 ) }
    dend_6 { pt3dadd( -4.76775, -97.1739, -38.9664, 0.28 ) }
    dend_6 { pt3dadd( -5.65541, -99.2857, -39.8985, 0.55 ) }
    dend_6 { pt3dadd( -6.62988, -101.299, -40.7957, 0.55 ) }
    dend_6 { pt3dadd( -8.9053, -105.455, -42.6616, 0.55 ) }
    dend_6 { pt3dadd( -9.34373, -106.181, -42.9795, 0.55 ) }
    dend_6 { pt3dadd( -11.4602, -109.641, -44.4819, 0.55 ) }
    dend_6 { pt3dadd( -13.5501, -113.13, -45.9138, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_6 { pt3dadd( -14.4514, -114.766, -46.5388, 0.83 ) }
    dend_6 { pt3dadd( -15.4031, -116.73, -47.336, 0.55 ) }
    dend_6 { pt3dadd( -16.0238, -118.368, -48.1306, 0.55 ) }
    dend_6 { pt3dadd( -16.6693, -120.16, -49.0143, 0.55 ) }
    dend_6 { pt3dadd( -17.1631, -121.668, -49.7462, 0.55 ) }
    dend_6 { pt3dadd( -17.6559, -123.48, -50.5471, 0.83 ) }
    dend_6 { pt3dadd( -18.1647, -125.354, -51.344, 0.55 ) }
    dend_6 { pt3dadd( -18.8129, -127.706, -52.3614, 0.28 ) }
    dend_6 { pt3dadd( -19.1862, -128.924, -52.9365, 0.55 ) }
    dend_6 { pt3dadd( -19.7678, -130.764, -53.7624, 0.55 ) }
    dend_6 { pt3dadd( -20.1105, -131.769, -54.2162, 0.55 ) }
    dend_6 { pt3dadd( -20.6292, -133.407, -54.9554, 0.55 ) }
    dend_6 { pt3dadd( -21.1198, -134.956, -55.6496, 0.55 ) }
    dend_6 { pt3dadd( -21.6487, -136.788, -56.5033, 0.55 ) }
    dend_6 { pt3dadd( -22.0418, -138.374, -57.3268, 0.55 ) }
    dend_6 { pt3dadd( -22.4143, -140.038, -58.2455, 0.55 ) }
    dend_6 { pt3dadd( -22.9054, -142.678, -59.6247, 0.83 ) }
    dend_6 { pt3dadd( -23.106, -144.074, -60.3024, 0.83 ) }
    dend_6 { pt3dadd( -23.3856, -146.205, -61.3343, 0.55 ) }
    dend_6 { pt3dadd( -23.6254, -148.014, -62.1983, 0.83 ) }
    dend_6 { pt3dadd( -23.7911, -149.611, -63.0603, 0.55 ) }
    dend_6 { pt3dadd( -23.9743, -151.77, -64.2275, 0.28 ) }
    dend_6 { pt3dadd( -24.0357, -152.325, -64.5523, 0.55 ) }
    dend_6 { pt3dadd( -24.1221, -153.1, -65.0206, 0.55 ) }
    dend_6 { pt3dadd( -24.3988, -154.794, -66.1214, 0.55 ) }
    dend_6 { pt3dadd( -25.0389, -158.138, -68.5133, 0.55 ) }
    dend_6 { pt3dadd( -25.5396, -159.744, -69.6595, 0.83 ) }
    dend_6 { pt3dadd( -26.0349, -160.986, -70.4463, 0.55 ) }
    dend_6 { pt3dadd( -26.71, -162.474, -71.2505, 0.55 ) }
    dend_6 { pt3dadd( -27.846, -164.726, -72.2484, 0.55 ) }
    dend_6 { pt3dadd( -28.6429, -165.997, -72.6721, 0.83 ) }
    dend_6 { pt3dadd( -30.7615, -168.919, -73.493, 0.83 ) }
    dend_6 { pt3dadd( -33.3494, -171.823, -74.3017, 0.28 ) }
    dend_6 { pt3dadd( -34.4987, -172.844, -74.5487, 1.11 ) }
    dend_6 { pt3dadd( -35.7607, -173.705, -74.8075, 0.28 ) }
    dend_6 { pt3dadd( -37.9954, -174.927, -75.2344, 0.55 ) }
    dend_6 { pt3dadd( -40.2872, -175.971, -75.6183, 0.55 ) }
    dend_6 { pt3dadd( -45.0334, -177.542, -76.2904, 0.83 ) }
    dend_6 { pt3dadd( -48.8218, -178.381, -76.7549, 0.55 ) }
    dend_6 { pt3dadd( -50.8436, -178.687, -77.0086, 0.55 ) }
    dend_6 { pt3dadd( -52.9174, -178.845, -77.3189, 0.55 ) }
    dend_6 { pt3dadd( -56.4731, -178.96, -77.8774, 0.83 ) }
    dend_6 { pt3dadd( -60.111, -179.1, -78.3582, 0.55 ) }
    dend_6 { pt3dadd( -61.9416, -179.195, -78.6874, 0.55 ) }
    dend_6 { pt3dadd( -65.339, -179.389, -79.3901, 0.55 ) }
    dend_6 { pt3dadd( -68.8078, -179.666, -80.1961, 0.55 ) }
    dend_6 { pt3dadd( -71.9566, -179.775, -80.9971, 0.55 ) }
    dend_6 { pt3dadd( -74.7928, -179.776, -81.8479, 0.55 ) }
    dend_6 { pt3dadd( -76.9729, -179.814, -82.5943, 0.28 ) }
    dend_6 { pt3dadd( -79.8347, -179.919, -83.5809, 0.55 ) }
    dend_6 { pt3dadd( -82.256, -179.979, -84.6319, 0.55 ) }
    dend_6 { pt3dadd( -86.2121, -180.032, -86.5995, 0.55 ) }
    dend_6 { pt3dadd( -87.5006, -179.978, -87.346, 0.55 ) }
    dend_6 { pt3dadd( -89.9758, -179.816, -88.9113, 0.55 ) }
    dend_6 { pt3dadd( -91.5229, -179.745, -89.9735, 0.55 ) }
    dend_6 { pt3dadd( -95.6283, -179.542, -92.8903, 0.55 ) }
    dend_6 { pt3dadd( -98.1932, -179.323, -94.7278, 0.55 ) }
    dend_6 { pt3dadd( -99.8798, -179.158, -95.9105, 0.55 ) }
    dend_6 { pt3dadd( -101.469, -178.946, -96.8968, 0.55 ) }
    dend_6 { pt3dadd( -103.569, -178.585, -98.0552, 0.55 ) }
    dend_6 { pt3dadd( -107.571, -177.814, -99.8827, 0.55 ) }
    dend_6 { pt3dadd( -109.205, -177.539, -100.543, 0.55 ) }
    dend_6 { pt3dadd( -112.01, -176.973, -101.354, 0.55 ) }
    dend_6 { pt3dadd( -113.98, -176.637, -101.738, 0.55 ) }
    dend_6 { pt3dadd( -115.27, -176.438, -101.952, 0.55 ) }
    dend_6 { pt3dadd( -119.625, -175.882, -102.831, 0.55 ) }
    dend_6 { pt3dadd( -122.1, -175.633, -103.669, 0.55 ) }
    dend_6 { pt3dadd( -128.75, -175.037, -105.991, 0.55 ) }
    dend_6 { pt3dadd( -131.088, -174.73, -106.857, 0.55 ) }
    dend_6 { pt3dadd( -133.119, -174.335, -107.612, 0.55 ) }
    dend_6 { pt3dadd( -135.779, -173.704, -108.694, 0.55 ) }
    dend_6 { pt3dadd( -139.11, -172.816, -110.721, 0.28 ) }
    dend_6 { pt3dadd( -145.865, -178.885, -115.903, 0.28 ) }
    // Section: dend_11, id: dend_11, parent: dend_7 (entry count 73/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 18.0937, -72.5971, -32.0999, 0.55 ) }
    dend_11 { pt3dadd( 19.0932, -71.195, -33.518, 0.55 ) }
    dend_11 { pt3dadd( 19.7871, -69.2765, -35.7558, 0.28 ) }
    dend_11 { pt3dadd( 19.986, -68.8792, -36.2403, 0.55 ) }
    dend_11 { pt3dadd( 20.3348, -68.1671, -37.1185, 0.55 ) }
    dend_11 { pt3dadd( 21.0348, -66.8052, -38.652, 0.28 ) }
    dend_11 { pt3dadd( 21.4705, -66.0963, -39.4769, 0.28 ) }
    dend_11 { pt3dadd( 22.5953, -64.5521, -41.4865, 0.55 ) }
    dend_11 { pt3dadd( 24.0519, -62.6236, -44.0438, 0.28 ) }
    dend_11 { pt3dadd( 24.463, -62.1231, -44.7286, 0.83 ) }
    dend_11 { pt3dadd( 26.2872, -59.9775, -47.6078, 0.55 ) }
    dend_11 { pt3dadd( 28.3867, -57.6635, -50.6151, 0.83 ) }
    dend_11 { pt3dadd( 30.3797, -55.451, -53.3462, 0.28 ) }
    dend_11 { pt3dadd( 30.3797, -55.451, -53.3462, 0.55 ) }
    dend_11 { pt3dadd( 32.0606, -53.1804, -55.6919, 0.28 ) }
    dend_11 { pt3dadd( 32.3989, -52.6818, -56.1514, 0.83 ) }
    dend_11 { pt3dadd( 33.8357, -50.3387, -57.9164, 0.55 ) }
    dend_11 { pt3dadd( 34.9449, -48.0967, -59.2215, 0.55 ) }
    dend_11 { pt3dadd( 35.7298, -46.4565, -60.1491, 0.55 ) }
    dend_11 { pt3dadd( 37.0248, -43.8906, -61.6472, 0.83 ) }
    dend_11 { pt3dadd( 37.4926, -42.9045, -62.1796, 0.83 ) }
    dend_11 { pt3dadd( 38.9349, -40.0147, -63.8083, 0.55 ) }
    dend_11 { pt3dadd( 39.7939, -38.2996, -64.8177, 0.55 ) }
    dend_11 { pt3dadd( 41.5955, -35.5176, -67.0347, 1.11 ) }
    dend_11 { pt3dadd( 43.2888, -33.2085, -69.3176, 0.55 ) }
    dend_11 { pt3dadd( 44.3178, -31.8319, -70.829, 0.83 ) }
    dend_11 { pt3dadd( 46.1654, -29.4265, -73.7454, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_11 { pt3dadd( 47.0937, -28.2186, -75.2629, 0.83 ) }
    dend_11 { pt3dadd( 50.1557, -24.3336, -80.2574, 0.28 ) }
    dend_11 { pt3dadd( 50.899, -23.3001, -81.5566, 0.55 ) }
    dend_11 { pt3dadd( 51.8308, -21.9877, -83.2037, 0.55 ) }
    dend_11 { pt3dadd( 53.2941, -20.0798, -85.4407, 1.11 ) }
    dend_11 { pt3dadd( 54.9062, -17.8152, -87.7122, 0.55 ) }
    dend_11 { pt3dadd( 55.5909, -16.7904, -88.5455, 0.55 ) }
    dend_11 { pt3dadd( 56.6727, -15.1576, -89.6216, 0.55 ) }
    dend_11 { pt3dadd( 58.3608, -12.7528, -91.1237, 0.83 ) }
    dend_11 { pt3dadd( 61.5955, -8.57385, -93.8001, 0.28 ) }
    dend_11 { pt3dadd( 62.4731, -7.46625, -94.517, 0.83 ) }
    dend_11 { pt3dadd( 64.8819, -4.53576, -96.3548, 0.28 ) }
    dend_11 { pt3dadd( 66.5251, -2.60764, -97.5337, 0.55 ) }
    dend_11 { pt3dadd( 67.5817, -1.3794, -98.3099, 0.55 ) }
    dend_11 { pt3dadd( 69.8189, 1.46502, -99.964, 0.83 ) }
    dend_11 { pt3dadd( 70.9975, 3.26487, -100.871, 0.55 ) }
    dend_11 { pt3dadd( 72.2543, 5.21632, -101.787, 0.55 ) }
    dend_11 { pt3dadd( 72.7725, 6.1002, -102.14, 0.55 ) }
    dend_11 { pt3dadd( 73.7113, 7.66703, -102.752, 0.83 ) }
    dend_11 { pt3dadd( 74.9122, 9.5727, -103.541, 0.83 ) }
    dend_11 { pt3dadd( 76.4164, 11.8799, -104.586, 0.55 ) }
    dend_11 { pt3dadd( 78.3684, 14.7129, -106.035, 0.83 ) }
    dend_11 { pt3dadd( 79.1603, 15.9286, -106.675, 0.83 ) }
    dend_11 { pt3dadd( 81.7932, 19.8806, -108.833, 0.55 ) }
    dend_11 { pt3dadd( 82.2728, 20.5726, -109.229, 0.83 ) }
    dend_11 { pt3dadd( 83.5198, 22.3754, -110.374, 0.28 ) }
    dend_11 { pt3dadd( 84.576, 23.9324, -111.382, 0.55 ) }
    dend_11 { pt3dadd( 85.767, 26.0818, -112.645, 0.28 ) }
    dend_11 { pt3dadd( 86.7624, 27.7768, -113.713, 0.83 ) }
    dend_11 { pt3dadd( 87.1885, 28.6158, -114.191, 0.28 ) }
    dend_11 { pt3dadd( 87.9321, 29.9516, -114.95, 0.55 ) }
    dend_11 { pt3dadd( 89.6678, 32.8415, -116.694, 0.28 ) }
    dend_11 { pt3dadd( 90.3025, 33.8005, -117.334, 0.28 ) }
    dend_11 { pt3dadd( 93.1588, 37.7938, -120.225, 0.83 ) }
    dend_11 { pt3dadd( 94.3701, 39.4151, -121.363, 0.28 ) }
    dend_11 { pt3dadd( 95.3863, 40.718, -122.263, 0.28 ) }
    dend_11 { pt3dadd( 96.3162, 41.88, -123.015, 0.55 ) }
    dend_11 { pt3dadd( 96.8039, 42.5807, -123.424, 0.28 ) }
    dend_11 { pt3dadd( 97.3276, 43.4572, -123.892, 0.55 ) }
    dend_11 { pt3dadd( 98.4821, 45.8883, -124.815, 0.28 ) }
    dend_11 { pt3dadd( 99.1081, 47.3179, -125.294, 0.55 ) }
    dend_11 { pt3dadd( 99.8674, 49.5293, -125.859, 0.28 ) }
    dend_11 { pt3dadd( 100.367, 51.6993, -126.345, 0.55 ) }
    dend_11 { pt3dadd( 100.455, 52.3237, -126.495, 0.55 ) }
    dend_11 { pt3dadd( 100.563, 53.6127, -126.819, 0.83 ) }
    dend_11 { pt3dadd( 100.755, 55.3318, -127.467, 0.28 ) }
    dend_11 { pt3dadd( 100.962, 56.2998, -127.941, 0.55 ) }
    dend_11 { pt3dadd( 101.345, 58.3427, -128.994, 0.28 ) }
    dend_11 { pt3dadd( 101.507, 58.8354, -129.279, 0.55 ) }
    dend_11 { pt3dadd( 102.396, 61.4832, -130.869, 0.28 ) }
    dend_11 { pt3dadd( 103.294, 64.126, -132.521, 0.83 ) }
    dend_11 { pt3dadd( 104.273, 66.6334, -134.185, 0.55 ) }
    dend_11 { pt3dadd( 105.12, 68.5399, -135.45, 0.55 ) }
    dend_11 { pt3dadd( 107.206, 72.1921, -137.974, 0.55 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 54/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 18.0937, -72.5971, -32.0999, 0.55 ) }
    dend_8 { pt3dadd( 19.9675, -76.249, -31.7823, 0.55 ) }
    dend_8 { pt3dadd( 21.1612, -78.1508, -31.557, 0.55 ) }
    dend_8 { pt3dadd( 22.367, -79.9591, -31.2781, 0.83 ) }
    dend_8 { pt3dadd( 23.8513, -82.185, -30.9348, 0.55 ) }
    dend_8 { pt3dadd( 24.9953, -83.9005, -30.6702, 0.55 ) }
    dend_8 { pt3dadd( 26.3213, -85.8891, -30.3634, 0.55 ) }
    dend_8 { pt3dadd( 27.7003, -88.0961, -30.0448, 0.55 ) }
    dend_8 { pt3dadd( 29.062, -89.9637, -29.5349, 1.11 ) }
    // Section: dend_13, id: dend_13, parent: dend_11 (entry count 63/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 107.206, 72.1921, -137.974, 0.28 ) }
    dend_13 { pt3dadd( 108.71, 73.2429, -137.944, 0.28 ) }
    dend_13 { pt3dadd( 109.88, 73.9446, -137.902, 0.83 ) }
    dend_13 { pt3dadd( 111.015, 74.6203, -137.749, 0.28 ) }
    dend_13 { pt3dadd( 111.751, 75.071, -137.626, 0.55 ) }
    dend_13 { pt3dadd( 113.76, 76.2747, -137.319, 0.28 ) }
    dend_13 { pt3dadd( 114.927, 76.936, -137.074, 0.83 ) }
    dend_13 { pt3dadd( 116.676, 77.7905, -136.629, 0.28 ) }
    dend_13 { pt3dadd( 118.19, 78.5061, -136.227, 0.83 ) }
    dend_13 { pt3dadd( 120.596, 79.6754, -135.514, 0.28 ) }
    dend_13 { pt3dadd( 121.953, 80.3542, -135.064, 0.83 ) }
    dend_13 { pt3dadd( 124.533, 81.7196, -134.059, 0.28 ) }
    dend_13 { pt3dadd( 124.947, 81.9175, -133.913, 0.83 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 76/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 107.206, 72.1921, -137.974, 0.55 ) }
    dend_12 { pt3dadd( 103.858, 73.8907, -140.861, 0.55 ) }
    dend_12 { pt3dadd( 102.586, 74.59, -142.071, 0.28 ) }
    dend_12 { pt3dadd( 101.697, 75.0992, -142.962, 0.55 ) }
    dend_12 { pt3dadd( 100.591, 75.764, -144.093, 0.28 ) }
    dend_12 { pt3dadd( 99.7133, 76.3086, -145.049, 0.55 ) }
    dend_12 { pt3dadd( 98.9975, 76.7528, -145.832, 0.28 ) }
    dend_12 { pt3dadd( 98.3622, 77.2117, -146.645, 0.28 ) }
    dend_12 { pt3dadd( 98.2034, 77.3199, -146.801, 0.55 ) }
    dend_12 { pt3dadd( 97.1873, 78.0689, -147.859, 0.28 ) }
    dend_12 { pt3dadd( 96.6359, 78.4274, -148.379, 0.83 ) }
    dend_12 { pt3dadd( 95.334, 79.2583, -149.613, 0.28 ) }
    dend_12 { pt3dadd( 94.2073, 79.9664, -150.646, 0.83 ) }
    dend_12 { pt3dadd( 93.0056, 80.7798, -151.693, 0.28 ) }
    dend_12 { pt3dadd( 90.9342, 82.1987, -153.446, 0.83 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 91/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 29.062, -89.9637, -29.5349, 0.28 ) }
    dend_10 { pt3dadd( 30.0483, -92.699, -29.0105, 0.28 ) }
    dend_10 { pt3dadd( 30.3851, -93.7538, -28.8159, 0.55 ) }
    dend_10 { pt3dadd( 31.3177, -95.8081, -28.2904, 0.28 ) }
    dend_10 { pt3dadd( 32.2452, -97.423, -27.931, 0.28 ) }
    dend_10 { pt3dadd( 32.9979, -98.6146, -27.594, 0.55 ) }
    dend_10 { pt3dadd( 34.3127, -100.396, -27.1192, 0.28 ) }
    dend_10 { pt3dadd( 35.2852, -101.627, -26.7983, 0.55 ) }
    dend_10 { pt3dadd( 37.2893, -104.054, -26.3004, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_10 { pt3dadd( 39.4632, -106.527, -25.7365, 0.28 ) }
    dend_10 { pt3dadd( 41.0556, -108.355, -25.2862, 0.83 ) }
    dend_10 { pt3dadd( 43.4762, -111.157, -24.5316, 0.28 ) }
    dend_10 { pt3dadd( 44.1537, -112.022, -24.257, 0.55 ) }
    dend_10 { pt3dadd( 44.8676, -113.148, -23.9202, 0.55 ) }
    dend_10 { pt3dadd( 45.7629, -115.152, -23.4351, 0.55 ) }
    dend_10 { pt3dadd( 46.4666, -117.179, -22.8857, 0.28 ) }
    dend_10 { pt3dadd( 46.6953, -118.003, -22.6553, 0.55 ) }
    dend_10 { pt3dadd( 47.0376, -119.695, -22.0702, 1.11 ) }
    dend_10 { pt3dadd( 47.4884, -121.735, -21.3629, 0.55 ) }
    dend_10 { pt3dadd( 47.9933, -124.007, -20.5972, 0.55 ) }
    dend_10 { pt3dadd( 48.3978, -125.624, -20.1714, 0.55 ) }
    dend_10 { pt3dadd( 49.1592, -127.436, -19.866, 0.55 ) }
    dend_10 { pt3dadd( 50.0899, -129.11, -19.6938, 0.55 ) }
    dend_10 { pt3dadd( 51.9093, -131.702, -19.5249, 0.55 ) }
    dend_10 { pt3dadd( 52.6611, -132.599, -19.4614, 0.55 ) }
    dend_10 { pt3dadd( 55.0737, -135.053, -19.3305, 1.11 ) }
    dend_10 { pt3dadd( 60.1295, -139.491, -19.3906, 0.28 ) }
    dend_10 { pt3dadd( 60.6077, -139.872, -19.4112, 0.55 ) }
    dend_10 { pt3dadd( 61.9154, -140.893, -19.5033, 0.28 ) }
    dend_10 { pt3dadd( 63.2214, -141.934, -19.6055, 0.83 ) }
    dend_10 { pt3dadd( 66.4248, -144.854, -19.774, 0.28 ) }
    dend_10 { pt3dadd( 67.3703, -145.952, -19.692, 0.55 ) }
    dend_10 { pt3dadd( 68.1392, -147.259, -19.3947, 0.28 ) }
    dend_10 { pt3dadd( 69.6189, -150.176, -18.5924, 0.55 ) }
    dend_10 { pt3dadd( 70.7197, -152.75, -17.8086, 0.55 ) }
    dend_10 { pt3dadd( 71.538, -154.781, -17.104, 0.28 ) }
    dend_10 { pt3dadd( 72.271, -156.925, -16.177, 1.11 ) }
    dend_10 { pt3dadd( 72.9905, -158.898, -15.3037, 0.55 ) }
    dend_10 { pt3dadd( 74.0996, -161.259, -14.2046, 0.55 ) }
    dend_10 { pt3dadd( 74.5433, -162.1, -13.8119, 0.83 ) }
    dend_10 { pt3dadd( 75.6275, -164.097, -13.098, 0.55 ) }
    dend_10 { pt3dadd( 77.4155, -167.018, -12.3346, 0.83 ) }
    dend_10 { pt3dadd( 78.5511, -168.719, -12.111, 0.55 ) }
    dend_10 { pt3dadd( 79.8677, -170.715, -12.0188, 0.55 ) }
    dend_10 { pt3dadd( 81.4645, -173.016, -12.0586, 0.83 ) }
    dend_10 { pt3dadd( 83.6681, -176.254, -12.1964, 0.28 ) }
    dend_10 { pt3dadd( 85.037, -178.275, -12.3304, 0.55 ) }
    dend_10 { pt3dadd( 86.7519, -180.841, -12.5387, 0.28 ) }
    dend_10 { pt3dadd( 88.3477, -183.299, -12.6867, 0.83 ) }
    dend_10 { pt3dadd( 90.6642, -186.826, -12.6971, 0.55 ) }
    dend_10 { pt3dadd( 92.1805, -188.818, -12.4845, 0.55 ) }
    dend_10 { pt3dadd( 92.8147, -189.64, -12.2793, 0.55 ) }
    dend_10 { pt3dadd( 93.7306, -190.696, -11.8443, 0.83 ) }
    dend_10 { pt3dadd( 96.349, -193.044, -10.2445, 0.28 ) }
    dend_10 { pt3dadd( 98.1301, -194.286, -9.01925, 0.83 ) }
    dend_10 { pt3dadd( 100.245, -195.524, -7.32208, 0.55 ) }
    dend_10 { pt3dadd( 101.096, -195.985, -6.65018, 0.83 ) }
    dend_10 { pt3dadd( 103.213, -197.105, -4.87817, 0.83 ) }
    dend_10 { pt3dadd( 104.248, -197.625, -3.96984, 0.28 ) }
    dend_10 { pt3dadd( 105.221, -198.128, -2.94928, 0.83 ) }
    dend_10 { pt3dadd( 106.992, -199.141, -1.02594, 0.28 ) }
    dend_10 { pt3dadd( 107.777, -199.611, -0.196761, 0.28 ) }
    dend_10 { pt3dadd( 108.251, -199.932, 0.294596, 0.83 ) }
    dend_10 { pt3dadd( 109.406, -200.945, 1.42688, 0.28 ) }
    dend_10 { pt3dadd( 109.903, -201.485, 1.90665, 0.55 ) }
    dend_10 { pt3dadd( 110.648, -202.508, 2.64946, 0.28 ) }
    dend_10 { pt3dadd( 111.853, -204.185, 3.92225, 0.83 ) }
    dend_10 { pt3dadd( 112.68, -205.199, 4.75308, 0.28 ) }
    dend_10 { pt3dadd( 113.281, -205.763, 5.24756, 0.28 ) }
    dend_10 { pt3dadd( 114.515, -206.612, 5.93359, 0.55 ) }
    dend_10 { pt3dadd( 116.249, -207.569, 6.72093, 0.28 ) }
    dend_10 { pt3dadd( 118.863, -208.83, 7.65932, 0.83 ) }
    dend_10 { pt3dadd( 121.454, -209.992, 8.54671, 0.28 ) }
    dend_10 { pt3dadd( 125.47, -211.589, 9.73964, 0.83 ) }
    dend_10 { pt3dadd( 130.562, -213.403, 11.2181, 0.28 ) }
    dend_10 { pt3dadd( 132.628, -214.02, 11.8002, 0.55 ) }
    dend_10 { pt3dadd( 136.09, -214.943, 12.7182, 0.28 ) }
    dend_10 { pt3dadd( 137.737, -215.388, 13.1731, 0.83 ) }
    dend_10 { pt3dadd( 141.125, -216.198, 14.3243, 0.28 ) }
    dend_10 { pt3dadd( 142.1, -216.439, 14.8118, 0.28 ) }
    dend_10 { pt3dadd( 144.198, -217.183, 16.609, 0.55 ) }
    dend_10 { pt3dadd( 144.809, -217.606, 17.4615, 0.83 ) }
    dend_10 { pt3dadd( 145.286, -218.377, 18.8856, 0.83 ) }
    dend_10 { pt3dadd( 145.474, -219.415, 20.4227, 0.28 ) }
    dend_10 { pt3dadd( 145.369, -221.017, 22.4986, 0.55 ) }
    dend_10 { pt3dadd( 145.048, -223.069, 24.8689, 0.83 ) }
    dend_10 { pt3dadd( 144.66, -224.768, 26.6672, 0.28 ) }
    dend_10 { pt3dadd( 144.395, -225.84, 27.7965, 0.55 ) }
    dend_10 { pt3dadd( 144.156, -226.929, 28.8734, 0.28 ) }
    dend_10 { pt3dadd( 144.083, -227.507, 29.4146, 0.83 ) }
    dend_10 { pt3dadd( 144.13, -228.477, 30.3968, 0.28 ) }
    dend_10 { pt3dadd( 144.262, -228.947, 31.0675, 0.83 ) }
    dend_10 { pt3dadd( 144.744, -229.784, 32.6746, 0.28 ) }
    dend_10 { pt3dadd( 145.175, -230.343, 33.9964, 0.83 ) }
    dend_10 { pt3dadd( 145.73, -230.832, 35.7264, 0.28 ) }
    dend_10 { pt3dadd( 146.17, -231.225, 37.4062, 0.28 ) }
    dend_10 { pt3dadd( 146.665, -231.829, 39.7869, 0.83 ) }
    dend_10 { pt3dadd( 146.831, -232.117, 40.9141, 0.28 ) }
    dend_10 { pt3dadd( 146.98, -232.488, 42.2279, 0.28 ) }
    dend_10 { pt3dadd( 147.199, -233.196, 44.9594, 0.55 ) }
    dend_10 { pt3dadd( 147.315, -233.653, 46.6057, 0.55 ) }
    dend_10 { pt3dadd( 147.483, -234.33, 48.4636, 0.55 ) }
    dend_10 { pt3dadd( 147.582, -234.839, 49.5473, 0.55 ) }
    dend_10 { pt3dadd( 147.676, -235.81, 51.3054, 0.55 ) }
    dend_10 { pt3dadd( 147.759, -237.005, 53.3322, 0.28 ) }
    dend_10 { pt3dadd( 147.793, -237.768, 54.5002, 0.55 ) }
    dend_10 { pt3dadd( 147.923, -239.403, 56.9853, 0.55 ) }
    dend_10 { pt3dadd( 148.0, -241.262, 59.7557, 0.28 ) }
    dend_10 { pt3dadd( 147.992, -241.766, 60.4082, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 0/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 29.062, -89.9637, -29.5349, 0.55 ) }
    dend_9 { pt3dadd( 33.1296, -90.1464, -28.4868, 0.55 ) }
    dend_9 { pt3dadd( 38.1343, -90.438, -27.0011, 0.83 ) }
    dend_9 { pt3dadd( 41.6523, -90.5894, -25.7874, 0.55 ) }
    dend_9 { pt3dadd( 43.3214, -90.6522, -25.1749, 0.55 ) }
    dend_9 { pt3dadd( 44.7379, -90.6746, -24.6564, 0.83 ) }
    dend_9 { pt3dadd( 48.875, -90.6625, -23.2014, 0.28 ) }
    dend_9 { pt3dadd( 52.103, -90.48, -22.1656, 0.83 ) }
    dend_9 { pt3dadd( 54.575, -90.1485, -21.3428, 0.28 ) }
    dend_9 { pt3dadd( 55.088, -90.0628, -21.2163, 0.55 ) }
    dend_9 { pt3dadd( 57.8782, -89.7329, -20.9268, 0.28 ) }
    dend_9 { pt3dadd( 59.492, -89.5689, -20.9088, 0.55 ) }
    dend_9 { pt3dadd( 62.4403, -89.3172, -21.0503, 0.28 ) }
    dend_9 { pt3dadd( 64.7601, -89.1278, -21.2602, 0.55 ) }
    dend_9 { pt3dadd( 70.8589, -88.894, -21.8451, 0.55 ) }
    dend_9 { pt3dadd( 75.5524, -88.7759, -22.1063, 0.28 ) }
    dend_9 { pt3dadd( 75.8885, -88.7688, -22.1051, 0.55 ) }
    dend_9 { pt3dadd( 78.0006, -88.7509, -21.9186, 0.55 ) }
    dend_9 { pt3dadd( 79.829, -88.7659, -21.5362, 0.28 ) }
    dend_9 { pt3dadd( 81.3846, -88.7224, -20.9733, 0.28 ) }
    dend_9 { pt3dadd( 83.6107, -88.4743, -19.5126, 0.55 ) }
    dend_9 { pt3dadd( 86.0318, -88.0035, -17.58, 0.28 ) }
    dend_9 { pt3dadd( 87.3724, -87.7643, -16.458, 0.55 ) }
    dend_9 { pt3dadd( 89.2154, -87.4297, -14.8354, 0.28 ) }
    dend_9 { pt3dadd( 89.7597, -87.3318, -14.3407, 0.83 ) }
    dend_9 { pt3dadd( 91.0971, -87.0263, -13.0409, 0.55 ) }
    dend_9 { pt3dadd( 92.0211, -86.8038, -12.0518, 0.83 ) }
    dend_9 { pt3dadd( 93.2725, -86.3605, -10.5826, 0.55 ) }
    dend_9 { pt3dadd( 94.7168, -85.6186, -8.85991, 0.28 ) }
    dend_9 { pt3dadd( 95.6757, -84.9925, -7.67326, 0.83 ) }
    dend_9 { pt3dadd( 96.6332, -84.3187, -6.66093, 0.28 ) }
    dend_9 { pt3dadd( 97.657, -83.4966, -5.66691, 0.55 ) }
    dend_9 { pt3dadd( 99.4798, -81.9139, -4.07569, 0.28 ) }
    dend_9 { pt3dadd( 100.395, -81.0605, -3.33225, 0.28 ) }
    dend_9 { pt3dadd( 101.02, -80.4738, -2.83507, 0.55 ) }
    dend_9 { pt3dadd( 103.579, -78.1774, -0.905351, 0.28 ) }
    dend_9 { pt3dadd( 105.057, -77.0531, 0.0236406, 0.83 ) }
    dend_9 { pt3dadd( 107.034, -75.6901, 1.20328, 0.28 ) }
    dend_9 { pt3dadd( 107.878, -75.2043, 1.60456, 0.83 ) }
    dend_9 { pt3dadd( 110.198, -74.0313, 2.62219, 0.28 ) }
    dend_9 { pt3dadd( 111.622, -73.3997, 3.23064, 0.83 ) }
    dend_9 { pt3dadd( 115.894, -71.6901, 4.80359, 0.28 ) }
    dend_9 { pt3dadd( 117.479, -71.0824, 5.28393, 0.83 ) }
    dend_9 { pt3dadd( 122.198, -69.3914, 6.38256, 0.28 ) }
    dend_9 { pt3dadd( 125.048, -68.458, 6.92195, 0.28 ) }
    dend_9 { pt3dadd( 125.95, -68.1788, 7.07883, 0.55 ) }
    dend_9 { pt3dadd( 130.236, -66.6509, 7.97515, 0.28 ) }
    dend_9 { pt3dadd( 131.392, -66.1461, 8.27114, 0.55 ) }
    dend_9 { pt3dadd( 135.05, -64.3124, 9.41942, 0.28 ) }
    dend_9 { pt3dadd( 137.34, -63.0036, 10.3805, 0.83 ) }
    dend_9 { pt3dadd( 139.178, -61.804, 11.3477, 0.28 ) }
    dend_9 { pt3dadd( 142.183, -59.4524, 13.4327, 0.55 ) }
    dend_9 { pt3dadd( 144.067, -57.7334, 15.1895, 0.28 ) }
    dend_9 { pt3dadd( 145.664, -55.9659, 17.04, 0.55 ) }
    dend_9 { pt3dadd( 146.292, -55.0451, 17.9834, 0.55 ) }
    dend_9 { pt3dadd( 147.833, -52.7264, 20.3511, 0.55 ) }
    dend_9 { pt3dadd( 148.919, -51.3112, 21.812, 0.28 ) }
    dend_9 { pt3dadd( 150.217, -50.1123, 23.0938, 0.55 ) }
    dend_9 { pt3dadd( 152.692, -47.9647, 25.2166, 0.55 ) }
    dend_9 { pt3dadd( 153.578, -47.2326, 25.8203, 0.55 ) }
    dend_9 { pt3dadd( 157.153, -44.5497, 27.8382, 0.28 ) }
    dend_9 { pt3dadd( 158.98, -43.3352, 28.6989, 0.83 ) }
    dend_9 { pt3dadd( 162.693, -41.1318, 30.3427, 0.28 ) }
    dend_9 { pt3dadd( 165.816, -39.2578, 31.6951, 0.28 ) }
    dend_9 { pt3dadd( 167.664, -38.2152, 32.5354, 0.83 ) }
    dend_9 { pt3dadd( 169.581, -37.1796, 33.4834, 0.28 ) }
    dend_9 { pt3dadd( 171.375, -36.2451, 34.4826, 0.55 ) }
    dend_9 { pt3dadd( 174.149, -34.9068, 36.1386, 0.28 ) }
    dend_9 { pt3dadd( 176.559, -33.9267, 37.5745, 0.28 ) }
    dend_9 { pt3dadd( 180.178, -32.7668, 39.6202, 0.55 ) }
    dend_9 { pt3dadd( 184.571, -31.5589, 42.1961, 0.28 ) }
    dend_9 { pt3dadd( 186.276, -31.158, 43.1641, 0.28 ) }
    dend_9 { pt3dadd( 188.487, -30.8273, 44.3482, 0.55 ) }
    dend_9 { pt3dadd( 190.796, -30.545, 45.469, 0.28 ) }
    dend_9 { pt3dadd( 191.695, -30.4619, 45.8503, 0.28 ) }
    dend_9 { pt3dadd( 195.789, -30.0994, 47.4055, 0.28 ) }
    dend_9 { pt3dadd( 199.26, -29.7714, 48.7114, 0.55 ) }
    dend_9 { pt3dadd( 203.646, -29.3432, 50.3528, 0.28 ) }
    dend_9 { pt3dadd( 207.161, -29.0216, 51.7344, 0.55 ) }
    dend_9 { pt3dadd( 208.587, -28.8921, 52.3447, 0.55 ) }
    dend_9 { pt3dadd( 210.43, -28.733, 53.1841, 0.28 ) }
    dend_9 { pt3dadd( 211.081, -28.6713, 53.5266, 0.55 ) }
    dend_9 { pt3dadd( 212.83, -28.444, 54.7702, 0.28 ) }
    dend_9 { pt3dadd( 213.319, -28.34, 55.3121, 0.55 ) }
    dend_9 { pt3dadd( 214.627, -28.139, 57.2704, 0.28 ) }
    dend_9 { pt3dadd( 214.964, -28.0257, 57.9364, 0.55 ) }
    dend_9 { pt3dadd( 215.648, -27.6485, 59.4804, 0.28 ) }
    dend_9 { pt3dadd( 215.928, -27.4555, 60.1256, 0.55 ) }
    dend_9 { pt3dadd( 217.019, -26.6859, 62.6439, 0.28 ) }
    dend_9 { pt3dadd( 217.158, -26.6003, 62.9503, 0.55 ) }
    dend_9 { pt3dadd( 218.121, -26.1634, 64.9924, 0.55 ) }
    dend_9 { pt3dadd( 220.344, -25.8442, 68.9935, 0.55 ) }
    dend_9 { pt3dadd( 221.583, -25.971, 70.7287, 0.55 ) }
    dend_9 { pt3dadd( 222.988, -26.1973, 72.5882, 0.55 ) }
    dend_9 { pt3dadd( 223.625, -26.3422, 73.3398, 0.55 ) }
    dend_9 { pt3dadd( 225.424, -26.8851, 75.238, 0.55 ) }
    dend_9 { pt3dadd( 228.439, -28.24, 77.7613, 0.55 ) }
    dend_9 { pt3dadd( 230.958, -29.9202, 79.3091, 0.55 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_30, dend_29, dend_28, dend_19, dend_0, dend_25, dend_20, dend_18, dend_1, dend_27, dend_26, dend_24, dend_21, dend_17, dend_2, dend_23, dend_22, dend_16, dend_3, dend_15, dend_4, dend_14, dend_5, dend_7, dend_6, dend_11, dend_8, dend_13, dend_12, dend_10, dend_9]}
    ModelViewParmSubset_2 = new SectionList()
    dend_30 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_30, dend_29, dend_28, dend_19, dend_0, dend_25, dend_20, dend_18, dend_1, dend_27, dend_26, dend_24, dend_21, dend_17, dend_2, dend_23, dend_22, dend_16, dend_3, dend_15, dend_4, dend_14, dend_5, dend_7, dend_6, dend_11, dend_8, dend_13, dend_12, dend_10, dend_9]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_30 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_29 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_28 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_25 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_18 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_26 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_17 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_16 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_15 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_14 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_6 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_11 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_10 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_9 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_0 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_19 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_1 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_2 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_20 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_3 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_4 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_5 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_7 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_24 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_21 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_23 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_8 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_22 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_27 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_13 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_12 OneSecGrp_SectionRef_32.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_2, dend_2, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_3, dend_3, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_4, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_5, dend_5, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_23 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_23 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_4 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.999855  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.042115  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0012239999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.001693  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.386953  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 8.0E-6  // units: S cm-2
        e_pas_nml2 = -63.854015  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.5399997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.039862998  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 5.2299997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.0054459996  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.503893  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-4  // units: S cm-2
        e_pas_nml2 = -67.1289  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 4.78E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.15074699  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009017  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 4.0E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.0032419998  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 1.74E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bNAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bNAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bNAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bNAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_30 nseg = 3
    dend_29 nseg = 7
    dend_28 nseg = 5
    dend_25 nseg = 11
    dend_18 nseg = 3
    dend_26 nseg = 3
    dend_17 nseg = 3
    dend_16 nseg = 7
    dend_15 nseg = 3
    dend_14 nseg = 5
    dend_6 nseg = 13
    dend_11 nseg = 11
    dend_10 nseg = 13
    dend_9 nseg = 13
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bNAC219_L23_SBC_6d12eabed9_0_0


