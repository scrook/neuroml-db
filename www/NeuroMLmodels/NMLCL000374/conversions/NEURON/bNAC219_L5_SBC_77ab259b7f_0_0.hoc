// Cell: bNAC219_L5_SBC_77ab259b7f_0_0
/*
{
  "id" : "bNAC219_L5_SBC_77ab259b7f_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-1.0539, -10.2039, 0.0, 4.14336", "-1.01121, -9.20625, 0.0, 7.24872", "-0.968511, -8.20857, 0.0, 9.44401", "-0.925815, -7.2109, 0.0, 10.5422", "-0.88312, -6.21322, 0.0, 11.4092", "-0.840424, -5.21554, 0.0, 11.9642", "-0.797728, -4.21787, 0.0, 12.4342", "-0.755032, -3.22019, 0.0, 12.6614", "-0.712337, -2.22251, 0.0, 12.6364", "-0.669641, -1.22484, 0.0, 12.5104", "-0.626945, -0.227159, 0.0, 12.2671", "-0.584249, 0.770517, 0.0, 12.0239", "-0.541554, 1.76819, 0.0, 11.4645", "-0.498858, 2.76587, 0.0, 10.6882", "-0.456162, 3.76355, 0.0, 9.91399", "-0.413466, 4.76122, 0.0, 9.47101", "-0.370771, 5.7589, 0.0, 9.20688", "-0.328075, 6.75658, 0.0, 8.75449", "-0.285379, 7.75425, 0.0, 8.25522", "-0.242683, 8.75193, 0.0, 6.57349", "-0.199988, 9.74961, 0.0, 3.81" ]
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "0.284736, 7.67944, 0.16, 6.82", "0.939934, 10.0325, 0.634853, 6.82", "1.98093, 13.7711, 1.38932, 6.59" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999929751125366
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-2.66527, -10.4121, 1.27, 5.68", "-3.40882, -13.0072, 0.630427, 3.64", "-4.13163, -15.5299, 0.00869995, 2.95" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999929751125366
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-3.30527, 7.62694, 0.0100002, 1.59", "-4.5645, 8.09606, -0.0148919, 1.59", "-6.54372, 8.83337, -0.0540164, 1.36", "-7.58586, 9.22161, -0.074617, 1.36", "-10.0078, 10.1239, -0.122493, 1.82" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999929751125366
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "-0.199988, 9.74961, 0.0, 0.483343", "0.441352, 24.7359, 0.0, 0.483343", "1.08269, 39.7222, 0.0, 0.483343" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_34",
    "id" : "dend_34",
    "points3d" : [ "1.98093, 13.7711, 1.38932, 1.14", "0.0906221, 18.2183, 0.764871, 1.14", "-0.757379, 20.2133, 0.484742, 1.14", "-1.30598, 21.5039, 0.30352, 1.59" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "1.98093, 13.7711, 1.38932, 0.91", "6.24312, 15.2197, -0.137849, 0.91", "8.22617, 15.8937, -0.848387, 0.91" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "-4.13163, -15.5299, 0.00869995, 0.91", "-6.00773, -15.783, -0.141422, 0.91", "-8.30567, -15.8243, -0.204844, 0.91", "-10.3824, -15.7552, -0.239687, 1.14", "-11.8968, -15.6943, -0.283548, 0.91", "-14.6544, -15.6319, -0.355872, 0.68", "-16.0364, -15.6484, -0.3875, 0.91", "-18.6465, -15.6691, -0.417913, 1.36", "-21.056, -15.7168, -0.382941, 0.68", "-22.7208, -15.8312, -0.339313, 0.68", "-24.84, -16.1254, -0.26213, 1.59", "-27.6187, -16.6834, -0.129536, 1.14", "-28.8341, -16.9523, -0.0517916, 0.68", "-31.3766, -17.5363, 0.119938, 1.14", "-33.4084, -18.0059, 0.260989, 0.23", "-35.0373, -18.383, 0.365558, 1.14", "-37.0656, -18.8875, 0.449613, 0.91", "-40.4964, -19.8643, 0.529401, 0.23", "-42.1805, -20.4563, 0.530152, 0.91", "-43.6677, -21.1327, 0.481466, 0.91", "-44.6515, -21.7592, 0.415869, 1.14", "-45.9801, -23.0871, 0.285571, 0.45", "-46.735, -24.2369, 0.190652, 0.45", "-47.4428, -25.6712, 0.091692, 0.91", "-48.0639, -27.1751, 0.0188778, 0.45", "-48.616, -28.7143, -0.0283268, 1.59", "-49.58, -31.7438, -0.103635, 0.45", "-50.2703, -34.2536, -0.150524, 1.82" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-4.13163, -15.5299, 0.00869995, 2.95", "-4.72495, -19.6698, 0.251759, 2.95", "-5.32994, -23.891, 0.499594, 2.95", "-5.58792, -25.6911, 0.605278, 3.41" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-10.0078, 10.1239, -0.122493, 1.14", "-11.4407, 8.71971, -0.68969, 1.14", "-12.3868, 7.62701, -1.13548, 0.45", "-13.2522, 6.56612, -1.56317, 1.59", "-14.9996, 4.47741, -2.41708, 0.45", "-16.2937, 2.99999, -3.08282, 0.91", "-16.9207, 2.32609, -3.41189, 1.59", "-18.4258, 0.643172, -4.23915, 0.23", "-19.041, 0.0196192, -4.61183, 0.23", "-19.7, -0.444394, -5.0871, 0.23", "-20.9837, -0.497666, -5.97681, 0.68", "-22.2801, -0.322182, -6.69387, 0.68", "-23.2703, -0.251895, -7.14248, 0.68", "-24.9085, -0.280657, -7.73547, 1.59", "-26.2053, -0.488546, -8.13229, 1.59", "-28.0777, -0.946935, -8.61083, 0.23", "-29.7785, -1.46542, -8.97492, 0.91", "-31.3923, -1.968, -9.27445, 0.91", "-32.7798, -2.36981, -9.47803, 0.91", "-34.556, -2.8132, -9.70903, 0.23", "-37.0596, -3.35031, -10.0441, 0.68", "-38.4818, -3.58728, -10.2417, 0.68", "-40.3691, -3.8182, -10.5225, 0.23", "-42.1092, -3.96458, -10.7981, 0.45", "-44.2941, -4.10651, -11.1637, 0.45", "-45.6859, -4.16958, -11.4027, 0.23", "-47.0776, -4.21979, -11.6423, 0.23", "-49.0836, -4.27191, -11.9837, 1.36", "-50.8372, -4.34017, -12.2893, 0.45", "-53.1735, -4.43738, -12.6906, 0.91", "-54.617, -4.54188, -12.917, 0.91", "-55.8003, -4.63997, -13.0937, 1.36", "-57.5459, -4.79815, -13.3383, 0.23", "-59.5433, -4.98024, -13.5996, 0.23", "-60.545, -5.08818, -13.7371, 0.91", "-63.2151, -5.5364, -14.1242, 0.23" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-10.0078, 10.1239, -0.122493, 0.23", "-11.4414, 10.4877, 0.262818, 0.23", "-12.9143, 10.8571, 0.700602, 0.68", "-14.2524, 11.1893, 1.16595, 0.23", "-14.839, 11.3293, 1.38169, 0.45", "-16.0635, 11.6289, 1.88142, 0.91", "-17.3391, 11.9632, 2.42612, 0.23", "-17.8937, 12.1026, 2.71066, 0.68", "-18.661, 12.3691, 3.20621, 0.23", "-19.0491, 12.5419, 3.50938, 0.68", "-19.9081, 12.9887, 4.21434, 0.23", "-20.3566, 13.2193, 4.58041, 0.68", "-21.3175, 13.6461, 5.34137, 0.23", "-22.3126, 14.0044, 6.07053, 0.68", "-24.0799, 14.54, 7.26693, 0.23", "-24.9239, 14.7509, 7.77965, 0.45", "-26.3602, 14.9995, 8.49568, 0.23", "-27.3455, 15.11, 8.86933, 0.23", "-28.2938, 15.2157, 9.09191, 0.23", "-29.1673, 15.3419, 9.21223, 0.23", "-30.1047, 15.5852, 9.27846, 0.23", "-31.1773, 15.9967, 9.33481, 0.23", "-32.7545, 16.7894, 9.40737, 0.45", "-34.4468, 17.7488, 9.5077, 0.23", "-35.41, 18.3062, 9.57894, 0.68", "-36.8817, 19.0982, 9.70255, 0.23", "-38.4177, 19.8941, 9.86065, 0.23", "-40.0346, 20.7038, 10.0232, 0.23", "-41.6203, 21.4681, 10.1875, 0.23", "-43.3448, 22.2079, 10.3607, 0.23", "-45.4351, 22.989, 10.5441, 0.45", "-46.011, 23.1714, 10.578, 0.23", "-46.9025, 23.4065, 10.6216, 0.68" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "1.08269, 39.7222, 0.0, 0.483343", "1.72403, 54.7085, 0.0, 0.483343", "2.36537, 69.6947, 0.0, 0.483343" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_40",
    "id" : "dend_40",
    "points3d" : [ "-1.30598, 21.5039, 0.30352, 0.23", "-1.57667, 21.333, 1.72027, 0.23", "-1.48722, 20.7477, 2.48411, 0.91", "-1.30676, 19.4786, 3.63071, 0.23", "-1.31757, 18.4802, 4.62075, 0.23", "-1.47447, 17.8103, 5.64316, 0.23", "-1.67228, 17.4213, 6.44799, 0.91", "-2.19375, 16.8543, 7.50729, 0.23", "-2.52618, 16.665, 7.95617, 0.23", "-3.44877, 16.2478, 9.07869, 0.91", "-4.56691, 15.871, 10.4104, 0.23", "-5.85018, 15.5637, 11.7969, 0.23", "-7.23644, 15.3618, 13.243, 0.68", "-9.5622, 15.1344, 15.5804, 0.23" ],
    "parent" : "dend_34",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_35",
    "id" : "dend_35",
    "points3d" : [ "-1.30598, 21.5039, 0.30352, 0.68", "-1.09254, 24.0913, 0.147015, 0.68", "-0.939008, 25.9098, 0.0763398, 0.68", "-0.860244, 26.9419, 0.0515347, 1.36", "-0.634652, 29.8299, 0.00375265, 0.68", "-0.567783, 30.8921, -0.0188128, 0.68", "-0.506861, 33.0722, -0.0699523, 1.59", "-0.507978, 34.1079, -0.0661394, 1.59", "-0.625994, 36.7233, 0.0265595, 0.23", "-0.796522, 38.0733, 0.108691, 0.23", "-1.14542, 39.6858, 0.242007, 1.14", "-1.62336, 41.4924, 0.40979, 0.91", "-2.01661, 42.7891, 0.535997, 0.91", "-2.51963, 44.4005, 0.703589, 1.36", "-3.09318, 46.077, 0.906412, 0.68", "-3.68969, 47.7726, 1.13244, 1.14", "-4.25518, 49.4963, 1.38305, 0.45", "-4.60343, 50.7252, 1.53929, 1.59", "-5.05502, 52.48, 1.67357, 2.27" ],
    "parent" : "dend_34",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_33",
    "id" : "dend_33",
    "points3d" : [ "8.22617, 15.8937, -0.848387, 0.91", "8.51589, 15.8325, -2.24612, 0.91", "8.9167, 15.3181, -4.29419, 0.91", "9.71201, 14.261, -7.41416, 0.68", "10.1245, 13.6984, -8.77538, 0.68", "10.5945, 12.9998, -10.1447, 1.14", "11.3837, 11.7164, -12.197, 0.68", "12.3465, 9.83981, -14.333, 0.23", "12.845, 8.56832, -15.3053, 0.23", "13.1082, 7.71083, -15.7819, 0.23", "13.5116, 6.01683, -16.5622, 1.14", "13.9133, 4.34936, -17.2638, 1.82", "14.3229, 2.54249, -17.9169, 0.68", "14.6766, 0.236556, -18.5612, 1.14", "14.8215, -1.57766, -19.0399, 0.45", "14.8798, -3.06055, -19.4168, 0.45" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "8.22617, 15.8937, -0.848387, 1.14", "10.569, 16.2156, -1.58781, 1.14", "11.8869, 16.3967, -2.00377, 1.59", "14.2476, 16.7212, -2.74885, 1.59" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "-50.2703, -34.2536, -0.150524, 0.23", "-52.3874, -35.2524, 0.571271, 0.23", "-53.8629, -36.0591, 1.02092, 0.68", "-55.7045, -37.2216, 1.56102, 0.23", "-56.4742, -37.7645, 1.77738, 0.23", "-58.1149, -38.9967, 2.2173, 0.23", "-59.8346, -40.3741, 2.65187, 0.91", "-61.012, -41.426, 2.90626, 0.23", "-62.1075, -42.5076, 3.13117, 0.91", "-63.0283, -43.4417, 3.32609, 0.23", "-64.1723, -44.5686, 3.57975, 1.59", "-65.8199, -46.0786, 3.959, 0.23", "-66.8983, -46.9842, 4.22296, 0.23", "-68.9075, -48.4771, 4.72815, 0.23", "-70.093, -49.2524, 5.02743, 1.59", "-70.8265, -49.6866, 5.21605, 0.23", "-72.4117, -50.5236, 5.62185, 0.68", "-74.1327, -51.3262, 6.03135, 0.23", "-75.4136, -51.8879, 6.27475, 1.14", "-75.9646, -52.1311, 6.35336, 1.14", "-76.9855, -52.6073, 6.46285, 0.23", "-78.6211, -53.4489, 6.63599, 0.68", "-80.2588, -54.3608, 6.80701, 0.23", "-82.194, -55.4834, 7.07243, 1.14", "-84.6625, -56.9912, 7.4875, 0.23", "-86.0764, -57.9001, 7.77227, 0.91", "-88.761, -59.7285, 8.38365, 0.23", "-89.5231, -60.2915, 8.57603, 0.91", "-92.261, -62.4686, 9.35139, 0.23", "-94.4207, -64.3539, 10.0718, 1.14", "-96.2908, -66.0441, 10.7444, 0.45", "-97.5398, -67.2231, 11.1949, 1.14", "-98.5308, -68.1968, 11.5354, 1.14", "-99.7321, -69.4702, 11.9439, 0.23", "-100.561, -70.562, 12.1935, 0.23" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "-50.2703, -34.2536, -0.150524, 0.45", "-52.0956, -36.1935, -0.550279, 0.45", "-53.3985, -37.5782, -0.835637, 1.14", "-54.2148, -38.4458, -1.01442, 0.23", "-55.2872, -39.5855, -1.24928, 1.36", "-56.3736, -40.74, -1.4872, 0.45" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "-5.58792, -25.6911, 0.605278, 0.23", "-4.86713, -27.5711, 0.806169, 0.23", "-4.02129, -29.8182, 1.01945, 0.23", "-3.10443, -32.1714, 1.24765, 1.14", "-2.14955, -34.5181, 1.47393, 0.23", "-1.46209, -36.1507, 1.62505, 0.91", "-0.930664, -37.3951, 1.73369, 0.91", "0.341697, -40.4199, 1.97085, 0.23", "1.29639, -42.6355, 2.1337, 1.14", "1.95424, -44.1523, 2.23305, 1.14", "3.14527, -46.945, 2.38483, 0.45", "4.29863, -49.6575, 2.50454, 0.45", "4.87486, -51.0787, 2.56613, 0.91", "5.83843, -53.5059, 2.66747, 0.23", "6.71093, -55.8204, 2.79008, 0.23", "7.69258, -58.5269, 2.97136, 0.68", "8.82583, -61.6516, 3.21659, 0.23", "9.58196, -63.7163, 3.41447, 0.91", "10.6273, -66.5659, 3.7618, 1.14", "12.3569, -71.3634, 4.54664, 0.23", "12.9012, -72.9071, 4.86825, 0.23", "13.6413, -75.1283, 5.4071, 0.68", "14.5236, -77.9311, 6.17124, 0.23", "15.5879, -81.4214, 7.23714, 1.36", "16.312, -83.9011, 8.06065, 0.68", "17.1568, -87.0352, 9.10145, 0.23", "17.4005, -88.0267, 9.41955, 0.91", "18.0678, -90.9253, 10.3268, 0.23", "18.504, -92.8829, 10.8956, 0.91", "19.1288, -95.6858, 11.6162, 1.14", "19.9081, -99.0778, 12.39, 0.23", "20.3036, -100.783, 12.758, 0.91", "20.9578, -103.566, 13.3379, 0.23", "21.2157, -104.578, 13.5162, 0.91", "21.5998, -105.962, 13.7202, 0.91", "22.621, -109.145, 14.1753, 0.23", "23.492, -111.534, 14.4964, 2.05", "23.8816, -112.561, 14.6189, 2.05", "26.189, -118.428, 15.2317, 0.23", "26.9826, -120.399, 15.428, 0.91", "29.093, -125.556, 15.8838, 0.23", "29.7247, -127.068, 15.9959, 0.23", "30.2873, -128.366, 16.0878, 1.14", "30.8374, -129.593, 16.1732, 1.14", "32.7988, -133.846, 16.4988, 0.23", "33.697, -135.697, 16.6687, 0.23", "34.3793, -137.06, 16.8178, 0.91", "35.1791, -138.593, 17.0117, 0.91", "37.0337, -141.873, 17.4777, 0.23", "38.0175, -143.521, 17.7414, 1.14", "40.2994, -147.023, 18.3716, 0.23", "41.6427, -149.005, 18.7515, 0.23", "42.3143, -149.971, 18.9352, 0.91", "43.2366, -151.209, 19.2046, 0.91", "44.6544, -152.939, 19.6168, 0.23", "45.5319, -153.932, 19.8529, 0.68", "46.7214, -155.209, 20.1809, 0.23", "48.1208, -156.67, 20.556, 0.91", "52.0771, -160.657, 21.5747, 0.23", "53.0242, -161.576, 21.8128, 1.14", "54.2822, -162.717, 22.1075, 1.14", "57.3075, -165.417, 22.8779, 0.23", "58.3326, -166.337, 23.2034, 0.23", "60.1671, -168.062, 23.8939, 0.68", "61.4773, -169.511, 24.5575, 0.23", "62.7933, -171.307, 25.4381, 0.91", "63.6547, -172.788, 26.2443, 0.23", "64.7927, -175.048, 27.6174, 0.23", "65.4835, -176.409, 28.4645, 0.68", "66.8545, -179.085, 30.0874, 0.23", "68.0837, -181.269, 31.4334, 0.68", "70.3817, -184.993, 33.7314, 0.23", "73.2511, -189.1, 36.1531, 0.23", "74.9056, -191.309, 37.4343, 0.23", "76.1772, -192.869, 38.3743, 0.68", "78.8509, -195.82, 40.1875, 0.23", "81.2924, -198.317, 41.8042, 0.23", "83.2815, -200.251, 42.9782, 0.23" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-5.58792, -25.6911, 0.605278, 2.27", "-7.30276, -29.7195, 0.279526, 2.27", "-8.1142, -31.6258, 0.125384, 2.73", "-8.98217, -33.6648, -0.0394968, 3.64" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_39",
    "id" : "dend_39",
    "points3d" : [ "-5.05502, 52.48, 1.67357, 0.23", "-2.8813, 54.0228, 3.71955, 0.23", "-1.20278, 54.7623, 5.00239, 0.91", "0.444125, 55.4352, 6.1479, 0.23", "1.89095, 56.0484, 7.17718, 0.23", "3.19617, 56.5777, 8.07921, 0.91", "4.9006, 57.304, 9.20224, 0.23", "5.8099, 57.6258, 9.75571, 0.23", "6.63171, 58.0005, 10.261, 0.23", "7.95947, 58.8535, 11.0625, 0.23", "9.06828, 59.876, 11.746, 1.36", "10.0038, 60.8846, 12.3267, 1.36", "11.9774, 63.3321, 13.4885, 0.23", "13.2067, 64.8474, 14.1457, 0.23", "14.2386, 66.1161, 14.6182, 0.23", "15.6938, 68.0248, 15.173, 0.23", "17.4194, 70.4121, 15.7498, 1.14", "19.0765, 72.8062, 16.2817, 0.23", "20.3067, 74.6234, 16.6038, 0.23", "21.9779, 77.1703, 17.0315, 0.45", "23.48, 79.7089, 17.4108, 0.23", "24.3676, 81.4307, 17.6238, 0.68", "25.4845, 84.1994, 17.8943, 0.23", "25.9014, 85.4959, 18.0532, 0.23", "26.3321, 87.1759, 18.2842, 0.91", "26.6091, 88.3096, 18.4555, 0.91", "26.9271, 89.431, 18.6292, 0.23", "27.8329, 92.2775, 19.1764, 0.68", "29.1448, 95.9191, 19.9248, 0.23", "29.5843, 97.1071, 20.2098, 0.91", "30.5871, 99.7824, 20.8709, 0.23", "31.7147, 102.762, 21.6469, 0.68", "32.9251, 105.96, 22.5351, 0.23", "34.1508, 109.458, 23.5186, 0.68", "34.8155, 111.662, 24.1307, 0.23", "35.4204, 114.288, 24.8829, 0.68", "35.6914, 116.123, 25.4389, 0.23", "35.7847, 117.631, 25.9337, 0.23", "35.8377, 119.622, 26.5661, 0.23", "35.8176, 121.983, 27.3747, 0.68", "35.7472, 125.413, 28.5613, 0.23", "35.598, 128.313, 29.6266, 0.68", "35.316, 131.304, 30.6936, 0.23" ],
    "parent" : "dend_35",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_36",
    "id" : "dend_36",
    "points3d" : [ "-5.05502, 52.48, 1.67357, 0.23", "-6.33212, 55.0786, 1.67176, 0.23", "-7.48823, 57.2376, 1.68016, 0.91", "-9.88007, 61.4229, 1.6926, 0.23", "-10.7542, 62.8178, 1.68507, 0.91", "-11.6822, 64.2344, 1.66784, 0.91", "-13.1232, 66.4782, 1.63742, 0.23", "-14.843, 69.1485, 1.62797, 0.23", "-16.496, 71.7607, 1.57151, 0.23", "-17.7353, 73.896, 1.49342, 0.68", "-18.5114, 75.3671, 1.43116, 0.23", "-19.2578, 77.0004, 1.36613, 0.23", "-19.6338, 77.9433, 1.34163, 0.23", "-20.478, 80.2911, 1.34324, 1.59", "-21.5008, 83.2984, 1.4047, 0.68", "-22.182, 85.2599, 1.45439, 0.23", "-22.6444, 86.3913, 1.47804, 0.91", "-23.471, 88.0972, 1.49749, 0.23", "-23.9179, 88.9301, 1.49885, 0.91", "-24.7434, 90.3622, 1.51064, 0.23", "-25.5088, 91.6297, 1.4962, 1.14", "-26.2401, 92.817, 1.44945, 1.14", "-27.1147, 94.1211, 1.3793, 0.23", "-28.3162, 95.7574, 1.29329, 0.23", "-29.7981, 97.608, 1.25608, 0.91", "-30.9115, 98.8781, 1.26335, 0.23", "-32.4006, 100.406, 1.33291, 0.23", "-33.5404, 101.454, 1.41545, 0.91", "-35.4731, 103.036, 1.62499, 0.23", "-37.1392, 104.332, 1.8446, 0.68", "-37.8518, 104.909, 1.9405, 0.68", "-39.1486, 106.0, 2.12792, 0.23", "-40.5642, 107.262, 2.30253, 0.68", "-41.8713, 108.431, 2.39623, 0.23", "-43.2964, 109.6, 2.44542, 0.23", "-45.5521, 111.294, 2.40999, 0.91", "-47.3088, 112.477, 2.27965, 0.23", "-49.6313, 113.924, 1.97087, 0.23", "-52.333, 115.505, 1.50589, 0.91", "-54.4928, 116.691, 1.05845, 0.23", "-56.2671, 117.574, 0.668958, 0.91", "-58.0845, 118.46, 0.230482, 0.23", "-60.9491, 119.952, -0.529449, 0.23", "-62.8514, 121.005, -1.05413, 0.91", "-64.7129, 122.176, -1.59007, 0.23", "-65.6818, 122.844, -1.87066, 0.68", "-67.4326, 124.028, -2.30272, 0.23", "-68.8026, 124.942, -2.56736, 0.91", "-70.191, 125.824, -2.77269, 0.23", "-71.425, 126.615, -2.90092, 0.68", "-72.6486, 127.392, -2.98707, 0.23", "-75.1445, 128.964, -3.11767, 0.91", "-77.8673, 130.66, -3.21474, 0.23", "-80.3903, 132.29, -3.29319, 0.23", "-82.2629, 133.579, -3.3527, 0.91", "-83.7836, 134.727, -3.40561, 0.23", "-84.4819, 135.32, -3.45012, 0.68", "-85.5462, 136.394, -3.5623, 0.23", "-86.5151, 137.576, -3.72856, 0.91", "-87.9312, 139.643, -4.10387, 0.23", "-88.7101, 140.915, -4.37551, 0.91", "-89.6943, 142.665, -4.76325, 0.23", "-90.4143, 143.963, -5.08038, 1.14", "-91.9022, 146.647, -5.8428, 0.23", "-93.3393, 149.159, -6.63031, 0.91", "-94.5304, 151.142, -7.31714, 0.23", "-95.5738, 152.766, -7.92053, 0.91", "-96.9706, 154.871, -8.73995, 0.23", "-98.0209, 156.362, -9.38234, 0.23", "-99.1927, 157.895, -10.1061, 0.91", "-100.716, 159.823, -11.0376, 0.23", "-101.504, 160.79, -11.5128, 0.23", "-102.295, 161.726, -11.9774, 0.68", "-102.842, 162.326, -12.267, 0.23", "-104.17, 163.729, -12.9266, 0.68", "-105.663, 165.219, -13.6535, 0.23", "-106.817, 166.331, -14.1504, 0.23", "-107.596, 167.086, -14.4682, 0.68", "-108.585, 168.03, -14.8394, 0.23", "-109.478, 168.914, -15.1578, 0.23", "-110.392, 169.817, -15.4611, 0.45", "-112.307, 171.714, -16.0858, 0.23", "-113.658, 173.138, -16.5419, 1.82", "-114.639, 174.206, -16.8727, 0.68", "-116.62, 176.455, -17.532, 0.23", "-118.199, 178.195, -17.9959, 0.91", "-119.696, 179.867, -18.4394, 0.23", "-120.911, 181.201, -18.7928, 0.23", "-121.647, 182.014, -18.9877, 0.91", "-122.665, 183.178, -19.2556, 0.23", "-123.776, 184.462, -19.5145, 1.36" ],
    "parent" : "dend_35",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "14.2476, 16.7212, -2.74885, 0.68", "15.8004, 15.7347, -3.35469, 0.68", "17.4944, 14.6794, -3.90695, 0.68", "18.9683, 13.7257, -4.33253, 0.68", "20.4258, 12.6489, -4.70635, 1.14", "22.1635, 11.3108, -5.1695, 1.59", "24.5973, 9.41479, -5.83314, 0.68", "26.6547, 7.81305, -6.35971, 1.82", "28.8259, 6.11195, -6.91962, 0.91", "32.4998, 3.16639, -7.93247, 0.68", "34.3698, 1.64904, -8.50693, 0.68", "36.3105, 0.0398332, -9.16838, 1.14", "37.6295, -1.07235, -9.65624, 1.14", "40.4767, -3.49437, -10.7799, 1.82", "42.7791, -5.39962, -11.735, 0.23", "44.5036, -6.77086, -12.4806, 0.91", "46.4797, -8.43157, -13.3145, 1.14", "47.7927, -9.61572, -13.8988, 2.05" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "14.2476, 16.7212, -2.74885, 0.45", "15.715, 16.9438, -2.54291, 0.45", "18.0638, 17.304, -2.18997, 0.91", "20.0057, 17.6363, -1.89237, 0.45", "22.3254, 18.0539, -1.52287, 1.14", "25.3065, 18.7188, -1.03637, 0.68", "28.4413, 19.5305, -0.52258, 0.45", "30.2353, 20.0736, -0.227841, 0.91", "31.6424, 20.5928, -0.0027805, 0.91", "34.2076, 21.683, 0.409235, 2.05", "37.9507, 23.3927, 1.02364, 0.68", "40.1824, 24.4849, 1.38073, 1.14", "42.1234, 25.5267, 1.67899, 0.68", "43.0772, 26.0788, 1.81788, 1.59", "45.1412, 27.3212, 2.10911, 1.59" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-8.98217, -33.6648, -0.0394968, 0.68", "-12.6105, -34.9257, -1.26844, 0.68", "-16.2516, -36.0889, -2.37975, 0.68", "-18.3261, -36.7104, -2.97638, 1.14", "-22.3659, -37.7645, -4.16144, 0.68", "-25.2718, -38.4279, -5.02485, 1.36", "-27.872, -38.956, -5.82447, 0.45", "-30.9242, -39.3813, -6.77941, 1.14", "-33.8799, -39.6465, -7.70505, 0.23", "-36.4898, -39.9378, -8.53067, 0.45", "-37.7512, -40.1441, -8.95825, 0.45", "-40.6459, -40.8465, -10.0214, 1.14", "-42.9806, -41.649, -10.9347, 0.23", "-45.0375, -42.6179, -11.7712, 0.91", "-47.8645, -44.2269, -12.8395, 0.45", "-49.5667, -45.3156, -13.4246, 1.14", "-51.9955, -46.9302, -14.2021, 0.23", "-54.1393, -48.371, -14.8284, 0.91", "-56.6109, -49.9811, -15.4864, 0.68", "-58.9383, -51.3928, -16.0472, 0.23", "-60.6309, -52.3055, -16.3926, 0.91", "-63.0638, -53.4316, -16.8083, 0.23", "-66.1263, -54.7195, -17.2756, 0.91", "-67.8283, -55.4256, -17.5249, 0.68", "-70.472, -56.5729, -17.9037, 0.68", "-73.5468, -58.0332, -18.3403, 1.36", "-76.1925, -59.3709, -18.7024, 0.23", "-77.3549, -59.9961, -18.8631, 0.23", "-79.5724, -61.2579, -19.1954, 1.36", "-81.0059, -62.1727, -19.4131, 1.36", "-82.5816, -63.3096, -19.6491, 0.23", "-84.7343, -65.0889, -20.0335, 0.91", "-86.6978, -66.9309, -20.4537, 0.91", "-88.6055, -68.8477, -20.9035, 0.23", "-90.5165, -70.8925, -21.3947, 0.91", "-92.0132, -72.5823, -21.8308, 0.23", "-93.6608, -74.6287, -22.3618, 0.23", "-94.8604, -76.3728, -22.7704, 0.23", "-95.6257, -77.585, -23.017, 1.14", "-96.4521, -78.9261, -23.2463, 0.45", "-97.3302, -80.3464, -23.4573, 1.59", "-99.6595, -84.1328, -23.8849, 0.68", "-102.167, -88.1387, -24.1791, 0.68", "-103.831, -90.6528, -24.3085, 0.23", "-105.425, -92.9317, -24.4039, 0.91", "-106.533, -94.3928, -24.4589, 0.91", "-107.42, -95.4128, -24.5022, 0.23", "-108.783, -96.7989, -24.574, 0.91", "-110.786, -98.6835, -24.7126, 0.23", "-112.336, -100.115, -24.868, 0.45", "-113.965, -101.612, -25.0699, 1.14", "-115.455, -102.98, -25.2726, 0.23", "-117.615, -104.968, -25.5955, 0.91", "-119.879, -107.024, -25.9464, 0.91", "-121.307, -108.3, -26.174, 0.23", "-123.264, -110.005, -26.4727, 0.68", "-124.839, -111.359, -26.6759, 0.23", "-125.598, -111.969, -26.7554, 0.23", "-127.756, -113.55, -26.9664, 0.91", "-129.98, -115.095, -27.1294, 2.05", "-132.941, -117.179, -27.2892, 0.68", "-135.348, -118.886, -27.3607, 1.36", "-137.811, -120.664, -27.4009, 0.45", "-139.706, -122.061, -27.4079, 0.45", "-141.887, -123.7, -27.4044, 0.23", "-143.156, -124.655, -27.3949, 0.91", "-144.667, -125.774, -27.4017, 0.23", "-145.762, -126.563, -27.4381, 0.23", "-148.037, -128.192, -27.5719, 1.14", "-149.281, -129.054, -27.6712, 1.14", "-152.171, -130.931, -27.9722, 0.23", "-153.042, -131.452, -28.0783, 0.91", "-154.91, -132.546, -28.345, 1.59", "-156.374, -133.407, -28.5223, 0.45", "-157.21, -133.892, -28.6083, 1.14", "-160.01, -135.476, -28.8431, 0.23", "-161.372, -136.242, -28.9476, 1.36", "-162.853, -137.085, -29.0221, 1.36", "-166.986, -139.508, -29.1521, 0.23", "-168.756, -140.592, -29.1914, 1.36", "-169.369, -141.002, -29.2018, 2.27", "-171.885, -142.901, -29.2479, 0.23", "-173.677, -144.295, -29.2687, 0.68", "-174.864, -145.261, -29.2856, 0.23", "-176.201, -146.485, -29.3459, 0.91", "-177.306, -147.643, -29.3922, 0.23", "-178.591, -149.194, -29.4218, 1.59" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-8.98217, -33.6648, -0.0394968, 2.27", "-9.08009, -36.8214, -0.0413388, 2.27", "-9.10467, -37.6139, -0.0418013, 2.27" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_38",
    "id" : "dend_38",
    "points3d" : [ "-123.776, 184.462, -19.5145, 0.23", "-127.656, 185.894, -21.0966, 0.23", "-129.742, 186.618, -21.9523, 0.91", "-132.812, 187.591, -23.228, 0.23", "-134.861, 188.155, -24.0459, 0.91", "-136.342, 188.529, -24.6245, 0.23", "-138.711, 189.134, -25.5804, 0.23", "-139.852, 189.371, -26.0464, 0.23", "-141.445, 189.738, -26.7562, 0.91", "-144.02, 190.306, -28.0379, 0.23", "-144.951, 190.495, -28.5114, 0.68", "-146.621, 190.818, -29.3659, 0.23", "-147.354, 190.963, -29.7264, 1.14", "-149.581, 191.366, -30.7807, 0.23", "-152.393, 191.831, -32.0323, 1.14", "-154.401, 192.147, -32.8838, 0.23", "-156.626, 192.456, -33.7269, 0.68", "-157.891, 192.612, -34.1393, 0.23", "-160.565, 192.989, -34.9239, 0.91", "-164.096, 193.566, -35.8492, 0.23", "-166.679, 194.136, -36.5024, 0.23", "-168.105, 194.495, -36.8794, 0.91", "-170.203, 195.12, -37.4355, 0.23", "-171.855, 195.704, -37.897, 0.68", "-173.782, 196.48, -38.4405, 0.23", "-175.481, 197.197, -38.9904, 0.23", "-176.855, 197.71, -39.5131, 0.68", "-178.503, 198.328, -40.207, 0.23", "-180.718, 199.122, -41.2272, 0.23", "-182.287, 199.598, -41.9871, 0.68", "-183.584, 199.931, -42.6509, 0.23", "-185.648, 200.268, -43.7933, 0.91" ],
    "parent" : "dend_36",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_37",
    "id" : "dend_37",
    "points3d" : [ "-123.776, 184.462, -19.5145, 0.23", "-125.699, 186.607, -19.3464, 0.23", "-126.152, 187.197, -19.3041, 0.68", "-127.415, 188.957, -19.1558, 0.23", "-128.692, 190.865, -19.147, 0.23", "-129.568, 192.199, -19.2113, 0.68", "-130.665, 193.878, -19.3378, 0.23", "-131.451, 195.149, -19.4468, 0.68", "-133.101, 197.783, -19.773, 0.23", "-134.59, 200.11, -20.1567, 0.91", "-136.492, 203.012, -20.6724, 0.23", "-137.626, 204.682, -20.995, 0.23", "-139.012, 206.616, -21.4084, 0.91", "-140.584, 208.748, -21.8913, 0.23", "-141.798, 210.363, -22.269, 0.68" ],
    "parent" : "dend_36",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_32",
    "id" : "dend_32",
    "points3d" : [ "47.7927, -9.61572, -13.8988, 0.45", "48.65, -12.1628, -14.4879, 0.45", "49.1275, -13.4227, -14.7458, 0.91", "49.6478, -14.4415, -14.9482, 0.23", "50.0881, -15.2031, -15.1072, 0.91", "50.5693, -15.9485, -15.2679, 0.91", "51.9582, -17.9065, -15.6916, 0.23", "52.8934, -19.0701, -15.952, 1.59", "54.9405, -21.4811, -16.5484, 0.45", "56.0727, -22.7569, -16.8924, 0.45", "57.4785, -24.3005, -17.3442, 1.36", "60.1693, -27.1595, -18.2353, 0.68", "61.9399, -28.9782, -18.8672, 0.68", "63.4383, -30.4673, -19.4279, 1.14", "66.3399, -33.223, -20.5429, 0.45", "67.0479, -33.8493, -20.8136, 1.14", "68.4809, -35.0796, -21.3757, 0.23", "70.0561, -36.4096, -22.0078, 1.36", "70.5901, -36.8639, -22.2149, 2.05", "72.331, -38.4212, -22.868, 0.23", "74.0657, -40.1353, -23.5189, 0.23", "75.4935, -41.6163, -24.0405, 1.14", "76.9407, -43.2393, -24.5669, 0.23", "77.8552, -44.3591, -24.8802, 1.36", "78.9323, -45.8155, -25.2664, 1.59", "80.1371, -47.7598, -25.7318, 0.45" ],
    "parent" : "dend_30",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_31",
    "id" : "dend_31",
    "points3d" : [ "47.7927, -9.61572, -13.8988, 0.68", "52.5375, -10.7946, -14.6727, 0.68", "54.7268, -11.3068, -15.0491, 0.23", "56.1727, -11.6, -15.3294, 0.68", "58.0559, -11.9769, -15.7176, 0.23", "59.7619, -12.3694, -16.1162, 0.91", "62.9616, -13.1849, -16.9195, 0.23", "65.634, -13.9357, -17.5853, 1.14", "70.9187, -15.4492, -18.7997, 0.45", "72.5219, -15.8999, -19.1175, 0.91", "76.3568, -16.8909, -19.7246, 0.23", "80.1384, -17.7541, -20.1713, 0.91", "83.5465, -18.4079, -20.4128, 0.23", "87.8637, -19.0152, -20.4965, 0.91", "92.4095, -19.3535, -20.3218, 0.23", "96.0805, -19.3041, -19.9915, 0.68", "98.191, -19.0465, -19.668, 0.23", "100.261, -18.6005, -19.2925, 1.14", "102.376, -17.9924, -18.9076, 0.23", "105.49, -16.9379, -18.3333, 0.91", "108.14, -15.9589, -17.8896, 0.23", "110.381, -15.106, -17.5423, 1.14", "112.497, -14.3329, -17.2323, 0.23", "115.349, -13.289, -16.8557, 1.82", "116.81, -12.7654, -16.6896, 2.27", "121.084, -11.1769, -16.3093, 0.23", "122.012, -10.8692, -16.2633, 0.23", "125.387, -9.86075, -16.1688, 0.68", "128.359, -9.12813, -16.1393, 0.23", "130.666, -8.69113, -16.1838, 1.36", "134.315, -8.32164, -16.403, 0.23", "137.986, -8.30184, -16.7693, 0.23", "139.47, -8.38698, -16.966, 1.14", "143.077, -8.87784, -17.5699, 0.23", "144.869, -9.23714, -17.8792, 0.68", "147.799, -9.91305, -18.3735, 0.23", "148.577, -10.1126, -18.5086, 1.59", "149.781, -10.4281, -18.7232, 0.23", "152.184, -11.0624, -19.1555, 1.36", "155.635, -11.9203, -19.7329, 0.23", "158.84, -12.6016, -20.1753, 0.91" ],
    "parent" : "dend_30",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "45.1412, 27.3212, 2.10911, 0.23", "47.9778, 28.3972, 2.13993, 0.23", "49.8395, 29.1637, 2.22166, 0.23", "51.2928, 29.7556, 2.30993, 1.36", "53.3034, 30.577, 2.40343, 1.36", "56.0585, 31.6903, 2.51243, 0.23", "57.3546, 32.1972, 2.55914, 0.23", "59.9555, 33.2203, 2.65175, 0.91", "62.813, 34.23, 2.7368, 0.23", "65.0766, 34.9184, 2.79564, 1.59", "65.9141, 35.1295, 2.81005, 1.59", "68.8682, 35.7253, 2.84305, 0.45", "70.3765, 35.9696, 2.81553, 0.45", "72.7847, 36.2772, 2.74627, 0.23", "74.1678, 36.4204, 2.70824, 1.14", "76.1763, 36.595, 2.69608, 0.23", "77.4857, 36.7001, 2.69595, 0.68", "79.9014, 36.9221, 2.71804, 0.23", "82.7061, 37.2562, 2.77814, 1.14", "85.9188, 37.7989, 2.85534, 0.23", "87.8963, 38.2304, 2.90552, 0.23", "88.9745, 38.5376, 2.93958, 1.59", "91.3357, 39.35, 3.01408, 0.23", "92.4442, 39.8258, 3.04404, 0.23", "93.5556, 40.415, 3.05273, 0.68", "94.7507, 41.1573, 2.99336, 0.68", "97.2121, 42.7391, 2.75333, 0.23", "98.31, 43.3943, 2.61399, 0.23", "99.302, 43.9356, 2.46179, 1.82", "99.883, 44.2088, 2.37266, 1.82", "101.899, 44.9953, 2.09664, 0.23", "103.602, 45.5654, 1.88118, 0.68", "106.144, 46.2958, 1.61013, 0.23", "107.152, 46.5822, 1.52836, 0.91", "108.824, 47.0666, 1.41633, 0.23", "110.66, 47.6475, 1.31327, 1.14", "113.158, 48.5074, 1.22741, 0.23", "114.988, 49.1922, 1.14605, 1.14", "116.796, 49.9379, 1.06987, 0.23", "118.088, 50.491, 1.01724, 0.91", "119.828, 51.2892, 0.936288, 0.23", "121.648, 52.1643, 0.848565, 1.36", "123.106, 52.8669, 0.781805, 0.23", "124.863, 53.7433, 0.709211, 0.91", "127.762, 55.2572, 0.595676, 0.23", "129.401, 56.1185, 0.543755, 1.14", "130.302, 56.5918, 0.515323, 0.23", "131.26, 57.1087, 0.486394, 1.14", "133.102, 58.1297, 0.466008, 0.23", "134.499, 58.9934, 0.411635, 1.36" ],
    "parent" : "dend_27",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "45.1412, 27.3212, 2.10911, 0.23", "47.0407, 28.9418, 1.94575, 0.23", "48.0536, 29.8183, 1.86888, 0.91", "49.6344, 31.1318, 1.77424, 0.23", "51.2581, 32.3629, 1.69756, 0.68", "52.9627, 33.4982, 1.6645, 0.68", "55.8455, 35.3397, 1.67458, 0.23", "57.2671, 36.1934, 1.68093, 0.91", "58.8319, 37.1415, 1.7047, 0.91", "61.76, 38.9364, 1.78145, 0.23", "64.5891, 40.7505, 1.86865, 0.68", "67.2895, 42.5352, 1.90696, 0.23", "69.0922, 43.7795, 1.89641, 0.91", "71.0461, 45.2158, 1.84184, 0.91", "72.7919, 46.6627, 1.71861, 0.23", "74.9288, 48.7545, 1.42365, 1.14", "76.8843, 50.958, 1.02829, 0.23", "77.9763, 52.3353, 0.778226, 0.23", "78.7658, 53.5043, 0.6142, 0.23", "80.4234, 56.2762, 0.309889, 0.91", "82.2259, 59.6047, 0.0595137, 0.45", "82.8542, 60.8884, 0.00632155, 0.45", "84.2388, 63.9815, -0.0649477, 1.59", "86.2218, 68.37, -0.0752617, 0.45", "86.9292, 69.8828, -0.0512098, 0.68", "87.4853, 71.0315, 0.0036366, 0.23", "88.5561, 73.0438, 0.108588, 0.91", "90.2333, 75.9391, 0.202525, 0.23", "91.2339, 77.5042, 0.224322, 0.23", "91.8147, 78.3434, 0.221954, 1.36", "92.5028, 79.3908, 0.227357, 1.36", "93.8902, 81.5862, 0.255749, 0.23", "95.3471, 83.9958, 0.318264, 0.68", "96.5978, 86.1315, 0.399914, 0.23", "98.4867, 89.3973, 0.542799, 1.14", "100.392, 92.7699, 0.69684, 0.23", "101.761, 95.2636, 0.823522, 0.91", "102.623, 96.8781, 0.92635, 1.59", "103.502, 98.5383, 1.02721, 0.91", "104.815, 101.106, 1.1828, 0.23" ],
    "parent" : "dend_27",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-178.591, -149.194, -29.4218, 0.23", "-179.859, -149.533, -28.7653, 0.23", "-180.255, -149.651, -28.5684, 1.14", "-181.633, -150.05, -27.8999, 0.23", "-182.157, -150.214, -27.6448, 0.91", "-183.848, -150.838, -26.8644, 0.23", "-184.688, -151.171, -26.4698, 0.91", "-186.437, -151.949, -25.6778, 0.23", "-187.54, -152.454, -25.1764, 0.91", "-188.551, -152.933, -24.7339, 0.23", "-189.807, -153.516, -24.1657, 1.14", "-191.493, -154.32, -23.4042, 0.23" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-178.591, -149.194, -29.4218, 0.23", "-179.877, -152.573, -30.2996, 0.23", "-180.736, -154.962, -30.9579, 1.59", "-181.966, -158.541, -32.0131, 0.23", "-182.786, -160.84, -32.8335, 1.36", "-183.456, -162.514, -33.5199, 0.23", "-184.158, -164.041, -34.2151, 0.23", "-185.145, -165.581, -35.1057, 1.36", "-186.471, -167.124, -36.2374, 2.27", "-188.034, -168.49, -37.4573, 0.23", "-189.484, -169.408, -38.4328, 1.14", "-190.972, -170.105, -39.3147, 0.23", "-192.778, -170.739, -40.2197, 1.14", "-193.525, -170.883, -40.509, 1.14", "-195.069, -171.019, -41.0001, 0.23", "-195.793, -171.027, -41.2046, 0.23", "-196.753, -170.866, -41.4656, 1.36", "-197.427, -170.58, -41.6088, 1.36", "-200.161, -169.025, -42.0582, 0.23", "-200.724, -168.67, -42.1372, 0.23", "-202.453, -167.457, -42.3609, 0.23", "-204.568, -165.916, -42.6653, 1.14", "-206.173, -164.788, -42.913, 0.23", "-208.712, -163.35, -43.3318, 0.23", "-210.165, -162.803, -43.6411, 1.36", "-212.415, -162.095, -44.1348, 0.23", "-214.356, -161.643, -44.5969, 1.14", "-215.809, -161.399, -45.0638, 1.14", "-219.161, -161.097, -46.3631, 0.23", "-222.009, -161.297, -47.5737, 1.14" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-9.10467, -37.6139, -0.0418013, 0.23", "-8.98999, -41.0213, 2.13723, 0.23", "-9.05302, -41.9264, 2.64646, 0.23", "-9.24808, -43.7916, 3.6854, 0.23", "-9.39343, -45.1927, 4.40764, 1.14", "-9.63134, -47.3914, 5.4586, 0.23", "-9.82953, -49.1465, 6.26457, 1.14", "-10.1888, -51.8872, 7.34135, 0.23", "-10.5443, -54.6783, 8.39863, 0.23", "-10.8029, -56.9988, 9.23936, 1.36", "-11.3642, -61.6269, 10.8435, 0.23", "-11.5538, -63.0774, 11.3043, 0.23", "-11.8039, -65.1434, 11.9309, 0.91", "-11.9087, -66.1712, 12.2266, 0.91", "-12.1791, -68.9154, 12.971, 0.23", "-12.3896, -71.06, 13.572, 0.23", "-12.5351, -73.4497, 14.2407, 0.68", "-12.6758, -77.9783, 15.5706, 0.23", "-12.6644, -79.3343, 16.0032, 1.36", "-12.6257, -80.4754, 16.3834, 1.36", "-12.4134, -83.3754, 17.3617, 0.45", "-12.0988, -85.799, 18.1661, 1.14", "-11.6181, -88.578, 19.1339, 0.23", "-11.1731, -90.6264, 19.8305, 0.45", "-10.4823, -93.6658, 20.8909, 0.23", "-9.92431, -96.0252, 21.703, 0.23", "-9.43674, -98.0995, 22.4378, 0.91", "-8.88348, -101.111, 23.5465, 0.23", "-8.40648, -104.141, 24.6612, 0.91", "-8.19029, -105.741, 25.239, 0.23", "-7.92267, -108.115, 26.1152, 1.14", "-7.83967, -111.012, 27.224, 0.23", "-7.96768, -113.448, 28.1251, 0.91", "-8.25536, -115.129, 28.7252, 0.23", "-8.92953, -118.243, 29.8554, 0.23", "-9.24306, -119.497, 30.2994, 0.91", "-10.4747, -123.69, 31.7714, 0.23", "-11.1276, -125.761, 32.4437, 1.14", "-12.6411, -130.141, 33.8825, 0.23" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-9.10467, -37.6139, -0.0418013, 1.59", "-9.2209, -39.5275, -0.107708, 1.59", "-9.39961, -42.4696, -0.209036, 2.27" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "-9.39961, -42.4696, -0.209036, 0.23", "-8.8603, -46.4784, 0.328567, 0.23", "-8.4446, -49.2902, 0.693624, 0.45", "-8.05996, -51.343, 0.946984, 1.36", "-7.46965, -54.0401, 1.20122, 1.36", "-6.75591, -57.0821, 1.43939, 0.91", "-6.00364, -60.1301, 1.62569, 1.14", "-5.54486, -61.9932, 1.69259, 1.14", "-4.38299, -66.6571, 1.75416, 0.91", "-3.62323, -69.7174, 1.72984, 1.14", "-3.1411, -71.7496, 1.68159, 1.14", "-2.57735, -74.2521, 1.59837, 0.23", "-1.95936, -77.3563, 1.48503, 0.23", "-1.68215, -79.0639, 1.43246, 0.23", "-1.42109, -81.2108, 1.39163, 2.05", "-1.05639, -84.6575, 1.40345, 1.59", "-0.834706, -86.8188, 1.42755, 1.59", "-0.578977, -89.2463, 1.48421, 0.45", "-0.28472, -91.6543, 1.57611, 1.14", "0.0226637, -94.0753, 1.69823, 1.14", "0.431175, -97.5244, 1.88392, 1.59", "0.707998, -99.9346, 1.98695, 1.14", "1.11718, -104.096, 2.12069, 0.68", "1.32188, -106.414, 2.17594, 1.14", "1.56474, -109.542, 2.22953, 0.23", "1.75269, -112.47, 2.26528, 1.59", "1.84155, -115.056, 2.28565, 0.68", "1.88065, -116.976, 2.29596, 0.91", "1.90814, -119.76, 2.30705, 0.91", "1.95542, -123.933, 2.33191, 1.36", "2.05941, -128.116, 2.40194, 0.91", "2.32071, -133.773, 2.56138, 1.14", "2.48008, -136.564, 2.68453, 0.68", "2.66258, -139.326, 2.82866, 1.14", "2.83896, -142.807, 3.02238, 0.23", "2.92993, -145.634, 3.18557, 0.68", "2.96334, -148.813, 3.37001, 0.45", "2.94991, -150.797, 3.4713, 2.05", "2.79196, -155.764, 3.68196, 0.91", "2.51007, -161.564, 3.88152, 0.45", "2.36069, -163.806, 3.93912, 0.91", "2.1186, -166.62, 3.97868, 0.91", "1.80142, -169.79, 3.98639, 0.23", "1.63664, -171.525, 3.97573, 0.91", "1.37497, -174.995, 3.97464, 0.45", "1.21223, -178.165, 4.02642, 1.36", "1.09935, -180.927, 4.11495, 0.68", "1.05708, -182.118, 4.17255, 1.14", "0.997479, -184.588, 4.33292, 0.23", "1.02997, -186.689, 4.49262, 0.68", "1.18926, -189.162, 4.69916, 0.23", "1.35498, -190.902, 4.84787, 0.91", "1.60294, -192.978, 5.02564, 0.91", "2.16849, -197.774, 5.39735, 0.23", "2.50347, -201.086, 5.61412, 1.36", "2.94773, -206.286, 5.94863, 0.23", "3.13398, -208.78, 6.10142, 1.14", "3.19805, -209.854, 6.16844, 1.14", "3.3472, -213.077, 6.39917, 0.23", "3.41848, -215.975, 6.62752, 0.91", "3.42489, -217.791, 6.77648, 1.82", "3.40994, -219.517, 6.94157, 1.82", "3.42159, -224.018, 7.41314, 0.45", "3.45155, -226.265, 7.67848, 1.14", "3.50034, -227.67, 7.8708, 1.14", "3.62599, -230.069, 8.21831, 0.23", "3.87745, -233.647, 8.73652, 0.23", "3.99856, -235.046, 8.94306, 1.36", "4.19424, -236.874, 9.1943, 1.36", "4.56307, -240.002, 9.55902, 0.23", "4.90927, -242.744, 9.87181, 0.91", "5.18085, -244.647, 10.0793, 0.91", "5.78276, -248.401, 10.4529, 0.23", "6.20341, -250.948, 10.6873, 0.45", "6.72182, -254.015, 10.9491, 0.91", "7.2254, -256.832, 11.1885, 0.45", "7.58249, -259.033, 11.3785, 1.14", "7.81025, -260.767, 11.5434, 1.14", "8.12774, -263.567, 11.8508, 0.23", "8.23007, -264.649, 11.9818, 1.14", "8.42158, -266.769, 12.2526, 1.14", "8.82341, -271.305, 12.8295, 0.23", "9.16884, -275.192, 13.3437, 0.68", "9.37858, -277.302, 13.6253, 1.59", "9.54673, -278.658, 13.8085, 2.05", "10.3362, -283.518, 14.4505, 0.23", "10.6977, -285.218, 14.6832, 1.14", "11.0597, -286.483, 14.8608, 1.59", "12.1125, -289.393, 15.2482, 0.45", "13.0943, -291.832, 15.6105, 0.91", "14.3527, -294.738, 16.1238, 0.23", "15.458, -297.127, 16.5984, 1.14", "16.1513, -298.519, 16.9049, 1.14", "18.4715, -302.945, 17.9429, 0.23", "19.968, -305.602, 18.6022, 0.23", "21.0006, -307.394, 19.0459, 0.68", "21.577, -308.379, 19.279, 0.68", "22.9171, -310.759, 19.7822, 0.23", "24.3312, -313.289, 20.2944, 1.36", "26.1033, -316.478, 20.8688, 0.45", "27.3418, -318.68, 21.1689, 1.14", "28.2188, -320.286, 21.3412, 0.23", "29.3079, -322.419, 21.5542, 2.5" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 15
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-9.39961, -42.4696, -0.209036, 0.91", "-11.0726, -45.4118, 0.334998, 0.91", "-12.3618, -47.679, 0.75421, 0.91", "-13.5088, -49.6961, 1.12717, 0.68", "-14.1853, -50.8859, 1.34718, 1.36", "-15.1786, -52.6328, 1.67018, 1.59" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "29.3079, -322.419, 21.5542, 0.23", "32.4906, -322.479, 20.9528, 0.23", "34.7125, -322.528, 20.559, 0.91", "37.7035, -322.621, 20.0588, 0.23", "40.3688, -322.704, 19.613, 1.14", "43.2899, -322.795, 19.1244, 0.23", "44.0758, -322.82, 18.993, 0.68", "45.5321, -322.722, 18.8107, 0.23", "46.1344, -322.65, 18.7273, 0.68" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "29.3079, -322.419, 21.5542, 0.23", "28.3489, -326.198, 21.86, 0.23", "28.0849, -327.379, 21.9717, 0.91", "27.7682, -328.926, 22.1579, 0.45", "27.5856, -329.83, 22.2842, 1.36", "27.1231, -331.873, 22.5771, 0.23", "26.8377, -333.121, 22.7738, 1.14", "26.1144, -336.331, 23.3445, 0.23", "25.5971, -338.45, 23.7914, 0.23", "25.1463, -340.32, 24.2193, 1.59", "24.5932, -342.859, 24.7884, 0.91", "24.1501, -345.301, 25.315, 0.23", "23.8936, -347.255, 25.7482, 1.14", "23.673, -350.197, 26.3935, 0.23", "23.6259, -352.264, 26.8199, 0.91", "23.692, -354.904, 27.3321, 0.23", "23.819, -357.026, 27.7117, 1.14", "23.9932, -359.467, 28.0718, 0.23", "24.1735, -361.543, 28.3277, 1.36", "24.2258, -362.136, 28.3828, 1.36", "24.5042, -366.098, 28.6658, 0.23", "24.59, -368.236, 28.7186, 0.91", "24.6366, -370.722, 28.6245, 0.23", "24.6672, -372.812, 28.4202, 1.36", "24.7256, -373.991, 28.2429, 1.36", "25.142, -378.094, 27.3931, 0.23", "25.635, -381.137, 26.5764, 1.14", "26.1007, -383.312, 25.8802, 0.23", "26.4325, -384.705, 25.3843, 1.36", "27.1855, -387.519, 24.272, 0.23", "27.8965, -389.739, 23.3108, 1.82", "28.1799, -390.367, 23.0, 1.82", "28.7257, -391.247, 22.5755, 0.45" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-15.1786, -52.6328, 1.67018, 0.68", "-17.516, -53.0072, 1.25646, 0.68", "-19.9086, -53.2373, 0.752634, 1.14", "-22.5993, -53.5166, 0.161172, 0.23", "-24.2982, -53.7662, -0.235128, 0.23", "-26.0076, -54.2001, -0.594985, 1.14", "-27.3493, -54.6079, -0.805452, 0.23", "-28.8803, -55.0915, -0.942847, 0.45", "-29.9521, -55.4648, -0.97954, 0.45", "-31.5122, -55.9971, -0.993534, 1.14", "-34.9234, -57.1309, -0.984809, 0.23", "-37.4319, -57.8427, -0.949341, 0.91", "-39.047, -58.1101, -0.915366, 0.91", "-40.7355, -58.0727, -0.89744, 0.45", "-42.635, -57.682, -0.947171, 0.45", "-44.0742, -57.0345, -1.07297, 0.45", "-45.4258, -55.9062, -1.38009, 0.91", "-46.9947, -53.9695, -2.05349, 0.45", "-47.8235, -52.5563, -2.52846, 0.45", "-48.3362, -51.2761, -2.90821, 0.45", "-48.7461, -49.8707, -3.14666, 0.45", "-48.1225, -50.9306, -3.58479, 1.36", "-47.248, -51.8329, -4.44556, 1.36", "-46.2763, -52.9527, -5.36027, 0.23" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-15.1786, -52.6328, 1.67018, 0.23", "-15.3708, -55.5839, 1.94015, 0.23", "-15.4313, -56.9531, 2.0577, 0.91", "-15.4558, -58.8005, 2.20954, 0.91", "-15.4448, -60.959, 2.36053, 0.91", "-15.3757, -63.3697, 2.50887, 0.23", "-15.2378, -66.1136, 2.66348, 0.68", "-15.0111, -69.0609, 2.81885, 0.45", "-14.6994, -72.3483, 2.97639, 0.91", "-14.4168, -74.9828, 3.08174, 0.68", "-14.0822, -77.9934, 3.16658, 1.59", "-13.4158, -84.2247, 3.34432, 0.45", "-13.1294, -86.8784, 3.40523, 0.45", "-12.9444, -88.671, 3.4391, 1.59", "-12.8226, -90.1534, 3.46141, 1.59", "-12.6553, -93.9933, 3.50715, 0.23", "-12.6615, -96.6618, 3.53935, 0.68", "-12.8367, -100.503, 3.59831, 0.23", "-13.0201, -102.848, 3.64627, 1.36", "-13.4355, -106.792, 3.7396, 0.45", "-14.1998, -112.289, 3.90447, 0.45", "-14.6542, -114.921, 4.00362, 0.45", "-15.0606, -116.902, 4.08155, 1.36", "-15.5849, -119.008, 4.19656, 1.59", "-16.1561, -121.031, 4.34436, 0.23", "-16.7142, -122.829, 4.5108, 0.45", "-17.8134, -126.302, 4.86601, 0.23", "-18.1992, -127.618, 5.01271, 0.23", "-18.8671, -129.99, 5.33785, 1.14", "-19.9339, -133.849, 5.96772, 0.23", "-20.557, -136.139, 6.38424, 1.14", "-21.2793, -138.957, 6.96121, 0.23", "-21.9122, -141.456, 7.52324, 0.45", "-22.4357, -143.793, 8.11539, 0.23", "-22.8439, -145.685, 8.64861, 1.14", "-23.0378, -146.622, 8.94156, 1.14", "-23.524, -148.883, 9.68981, 0.23", "-23.8107, -150.133, 10.1293, 0.91", "-24.4411, -152.83, 11.031, 0.23", "-24.7581, -154.567, 11.5866, 1.14", "-25.0721, -156.765, 12.2544, 0.23", "-25.2159, -158.331, 12.6593, 0.91", "-25.2459, -159.182, 12.8265, 0.23", "-25.2253, -160.38, 13.019, 0.68", "-25.1473, -163.331, 13.3894, 0.23", "-25.0799, -165.093, 13.5988, 0.68", "-25.0387, -167.767, 13.8938, 0.23", "-25.0402, -169.59, 14.1402, 0.91", "-25.2423, -174.263, 14.8338, 0.23", "-25.3494, -176.114, 15.1198, 0.68", "-25.5116, -177.997, 15.4205, 0.23", "-25.7284, -179.951, 15.7837, 0.91", "-26.3477, -183.919, 16.6594, 0.23", "-26.882, -186.646, 17.3257, 0.91" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "28.7257, -391.247, 22.5755, 0.23", "29.2545, -392.085, 22.5418, 0.23", "29.8977, -393.056, 22.4656, 0.91", "30.5128, -393.901, 22.3833, 0.23", "31.2074, -394.883, 22.2598, 0.91", "31.6709, -395.549, 22.1689, 0.23", "32.2958, -396.46, 22.017, 0.68", "32.8006, -397.208, 21.8509, 0.23", "33.3875, -398.054, 21.6094, 0.91", "33.9861, -398.863, 21.3138, 0.23", "34.4764, -399.525, 21.0263, 0.91", "35.152, -400.516, 20.5763, 0.23", "35.7324, -401.401, 20.154, 1.14", "36.5272, -402.682, 19.5351, 0.23", "37.1056, -403.638, 19.0474, 0.68", "37.6638, -404.51, 18.581, 0.23", "38.2956, -405.545, 17.9958, 1.14" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "28.7257, -391.247, 22.5755, 0.23", "29.3935, -392.43, 22.3221, 0.23", "30.2183, -393.89, 22.0092, 0.68", "30.6195, -394.601, 21.8569, 0.23", "31.6755, -396.472, 21.4563, 0.91" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_24", "dend_3", "dend_0", "dend_34", "dend_25", "dend_21", "dend_4", "dend_2", "dend_1", "dend_40", "dend_35", "dend_33", "dend_26", "dend_23", "dend_22", "dend_20", "dend_5", "dend_39", "dend_36", "dend_30", "dend_27", "dend_17", "dend_6", "dend_38", "dend_37", "dend_32", "dend_31", "dend_29", "dend_28", "dend_19", "dend_18", "dend_16", "dend_7", "dend_11", "dend_8", "dend_15", "dend_12", "dend_10", "dend_9", "dend_14", "dend_13" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_24", "dend_3", "dend_0", "dend_34", "dend_25", "dend_21", "dend_4", "dend_2", "dend_1", "dend_40", "dend_35", "dend_33", "dend_26", "dend_23", "dend_22", "dend_20", "dend_5", "dend_39", "dend_36", "dend_30", "dend_27", "dend_17", "dend_6", "dend_38", "dend_37", "dend_32", "dend_31", "dend_29", "dend_28", "dend_19", "dend_18", "dend_16", "dend_7", "dend_11", "dend_8", "dend_15", "dend_12", "dend_10", "dend_9", "dend_14", "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_39" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_36" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_38" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_32" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_31" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_35",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_37",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_40",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_41",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_42",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_34" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_36",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_40" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_33" ]
  }, {
    "name" : "OneSecGrp_SectionRef_38",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_35" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_37" ]
  }, {
    "name" : "OneSecGrp_SectionRef_39",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_44",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_43",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30", "dend_31", "dend_32", "dend_33", "dend_34", "dend_35", "dend_36", "dend_37", "dend_38", "dend_39", "dend_40" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_24", "dend_24", "dend_3", "dend_3", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_34", "dend_34", "dend_34", "dend_25", "dend_25", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_4", "dend_4", "dend_4", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_26", "dend_26", "dend_26", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_5", "dend_5", "dend_5", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_6", "dend_6", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_7", "dend_7", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_13", "dend_13", "dend_13", "dend_13" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.999855",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.042115",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0012239999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.001693",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.386953",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "8.0E-6",
    "erev" : "-63.854015"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.5399997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.039862998",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "5.2299997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.0054459996",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.503893",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "1.0E-4",
    "erev" : "-67.1289"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.78E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.15074699",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009017",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "4.0E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.0032419998",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "1.74E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bNAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bNAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bNAC219_L5_SBC_77ab259b7f_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_24, id: dend_24, parent: soma_0
create dend_24
public dend_24
// Section: dend_3, id: dend_3, parent: soma_0
create dend_3
public dend_3
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_34, id: dend_34, parent: dend_24
create dend_34
public dend_34
// Section: dend_25, id: dend_25, parent: dend_24
create dend_25
public dend_25
// Section: dend_21, id: dend_21, parent: dend_3
create dend_21
public dend_21
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_40, id: dend_40, parent: dend_34
create dend_40
public dend_40
// Section: dend_35, id: dend_35, parent: dend_34
create dend_35
public dend_35
// Section: dend_33, id: dend_33, parent: dend_25
create dend_33
public dend_33
// Section: dend_26, id: dend_26, parent: dend_25
create dend_26
public dend_26
// Section: dend_23, id: dend_23, parent: dend_21
create dend_23
public dend_23
// Section: dend_22, id: dend_22, parent: dend_21
create dend_22
public dend_22
// Section: dend_20, id: dend_20, parent: dend_4
create dend_20
public dend_20
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5
// Section: dend_39, id: dend_39, parent: dend_35
create dend_39
public dend_39
// Section: dend_36, id: dend_36, parent: dend_35
create dend_36
public dend_36
// Section: dend_30, id: dend_30, parent: dend_26
create dend_30
public dend_30
// Section: dend_27, id: dend_27, parent: dend_26
create dend_27
public dend_27
// Section: dend_17, id: dend_17, parent: dend_5
create dend_17
public dend_17
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_38, id: dend_38, parent: dend_36
create dend_38
public dend_38
// Section: dend_37, id: dend_37, parent: dend_36
create dend_37
public dend_37
// Section: dend_32, id: dend_32, parent: dend_30
create dend_32
public dend_32
// Section: dend_31, id: dend_31, parent: dend_30
create dend_31
public dend_31
// Section: dend_29, id: dend_29, parent: dend_27
create dend_29
public dend_29
// Section: dend_28, id: dend_28, parent: dend_27
create dend_28
public dend_28
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_16, id: dend_16, parent: dend_6
create dend_16
public dend_16
// Section: dend_7, id: dend_7, parent: dend_6
create dend_7
public dend_7
// Section: dend_11, id: dend_11, parent: dend_7
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_15, id: dend_15, parent: dend_11
create dend_15
public dend_15
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9
// Section: dend_14, id: dend_14, parent: dend_12
create dend_14
public dend_14
// Section: dend_13, id: dend_13, parent: dend_12
create dend_13
public dend_13

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_24, dend_3, dend_0, dend_34, dend_25, dend_21, dend_4, dend_2, dend_1, dend_40, dend_35, dend_33, dend_26, dend_23, dend_22, dend_20, dend_5, dend_39, dend_36, dend_30, dend_27, dend_17, dend_6, dend_38, dend_37, dend_32, dend_31, dend_29, dend_28, dend_19, dend_18, dend_16, dend_7, dend_11, dend_8, dend_15, dend_12, dend_10, dend_9, dend_14, dend_13]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_24, dend_3, dend_0, dend_34, dend_25, dend_21, dend_4, dend_2, dend_1, dend_40, dend_35, dend_33, dend_26, dend_23, dend_22, dend_20, dend_5, dend_39, dend_36, dend_30, dend_27, dend_17, dend_6, dend_38, dend_37, dend_32, dend_31, dend_29, dend_28, dend_19, dend_18, dend_16, dend_7, dend_11, dend_8, dend_15, dend_12, dend_10, dend_9, dend_14, dend_13]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_39]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_36]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_38]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_32]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_31]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_35
// Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_37
// Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_40
// Group: {name=OneSecGrp_SectionRef_41, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_41
// Group: {name=OneSecGrp_SectionRef_42, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_42
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_34]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_36
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_40]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_33]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_38
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_35]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_37]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_39
// Group: {name=OneSecGrp_SectionRef_44, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_44
// Group: {name=OneSecGrp_SectionRef_43, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_43
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36, dend_37, dend_38, dend_39, dend_40], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_24, dend_24, dend_3, dend_3, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_34, dend_34, dend_34, dend_25, dend_25, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_4, dend_4, dend_4, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_26, dend_26, dend_26, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_5, dend_5, dend_5, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_6, dend_6, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_7, dend_7, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_8, dend_8, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bNAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bNAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_24(0), soma_0(0.49999929751125366)
    connect dend_3(0), soma_0(0.49999929751125366)
    connect dend_0(0), soma_0(0.49999929751125366)
    connect axon_0(0), soma_0(1.0)
    connect dend_34(0), dend_24(1.0)
    connect dend_25(0), dend_24(1.0)
    connect dend_21(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_40(0), dend_34(1.0)
    connect dend_35(0), dend_34(1.0)
    connect dend_33(0), dend_25(1.0)
    connect dend_26(0), dend_25(1.0)
    connect dend_23(0), dend_21(1.0)
    connect dend_22(0), dend_21(1.0)
    connect dend_20(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)
    connect dend_39(0), dend_35(1.0)
    connect dend_36(0), dend_35(1.0)
    connect dend_30(0), dend_26(1.0)
    connect dend_27(0), dend_26(1.0)
    connect dend_17(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_38(0), dend_36(1.0)
    connect dend_37(0), dend_36(1.0)
    connect dend_32(0), dend_30(1.0)
    connect dend_31(0), dend_30(1.0)
    connect dend_29(0), dend_27(1.0)
    connect dend_28(0), dend_27(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_16(0), dend_6(1.0)
    connect dend_7(0), dend_6(1.0)
    connect dend_11(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_15(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)
    connect dend_14(0), dend_12(1.0)
    connect dend_13(0), dend_12(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -1.0539, -10.2039, 0.0, 4.14336 ) }
    soma_0 { pt3dadd( -1.01121, -9.20625, 0.0, 7.24872 ) }
    soma_0 { pt3dadd( -0.968511, -8.20857, 0.0, 9.44401 ) }
    soma_0 { pt3dadd( -0.925815, -7.2109, 0.0, 10.5422 ) }
    soma_0 { pt3dadd( -0.88312, -6.21322, 0.0, 11.4092 ) }
    soma_0 { pt3dadd( -0.840424, -5.21554, 0.0, 11.9642 ) }
    soma_0 { pt3dadd( -0.797728, -4.21787, 0.0, 12.4342 ) }
    soma_0 { pt3dadd( -0.755032, -3.22019, 0.0, 12.6614 ) }
    soma_0 { pt3dadd( -0.712337, -2.22251, 0.0, 12.6364 ) }
    soma_0 { pt3dadd( -0.669641, -1.22484, 0.0, 12.5104 ) }
    soma_0 { pt3dadd( -0.626945, -0.227159, 0.0, 12.2671 ) }
    soma_0 { pt3dadd( -0.584249, 0.770517, 0.0, 12.0239 ) }
    soma_0 { pt3dadd( -0.541554, 1.76819, 0.0, 11.4645 ) }
    soma_0 { pt3dadd( -0.498858, 2.76587, 0.0, 10.6882 ) }
    soma_0 { pt3dadd( -0.456162, 3.76355, 0.0, 9.91399 ) }
    soma_0 { pt3dadd( -0.413466, 4.76122, 0.0, 9.47101 ) }
    soma_0 { pt3dadd( -0.370771, 5.7589, 0.0, 9.20688 ) }
    soma_0 { pt3dadd( -0.328075, 6.75658, 0.0, 8.75449 ) }
    soma_0 { pt3dadd( -0.285379, 7.75425, 0.0, 8.25522 ) }
    soma_0 { pt3dadd( -0.242683, 8.75193, 0.0, 6.57349 ) }
    soma_0 { pt3dadd( -0.199988, 9.74961, 0.0, 3.81 ) }
    // Section: dend_24, id: dend_24, parent: soma_0 (entry count 21/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 0.284736, 7.67944, 0.16, 6.82 ) }
    dend_24 { pt3dadd( 0.939934, 10.0325, 0.634853, 6.82 ) }
    dend_24 { pt3dadd( 1.98093, 13.7711, 1.38932, 6.59 ) }
    // Section: dend_3, id: dend_3, parent: soma_0 (entry count 24/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -2.66527, -10.4121, 1.27, 5.68 ) }
    dend_3 { pt3dadd( -3.40882, -13.0072, 0.630427, 3.64 ) }
    dend_3 { pt3dadd( -4.13163, -15.5299, 0.00869995, 2.95 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 27/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -3.30527, 7.62694, 0.0100002, 1.59 ) }
    dend_0 { pt3dadd( -4.5645, 8.09606, -0.0148919, 1.59 ) }
    dend_0 { pt3dadd( -6.54372, 8.83337, -0.0540164, 1.36 ) }
    dend_0 { pt3dadd( -7.58586, 9.22161, -0.074617, 1.36 ) }
    dend_0 { pt3dadd( -10.0078, 10.1239, -0.122493, 1.82 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 32/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( -0.199988, 9.74961, 0.0, 0.483343 ) }
    axon_0 { pt3dadd( 0.441352, 24.7359, 0.0, 0.483343 ) }
    axon_0 { pt3dadd( 1.08269, 39.7222, 0.0, 0.483343 ) }
    // Section: dend_34, id: dend_34, parent: dend_24 (entry count 35/100)
    dend_34 { pt3dclear() }
    dend_34 { pt3dadd( 1.98093, 13.7711, 1.38932, 1.14 ) }
    dend_34 { pt3dadd( 0.0906221, 18.2183, 0.764871, 1.14 ) }
    dend_34 { pt3dadd( -0.757379, 20.2133, 0.484742, 1.14 ) }
    dend_34 { pt3dadd( -1.30598, 21.5039, 0.30352, 1.59 ) }
    // Section: dend_25, id: dend_25, parent: dend_24 (entry count 39/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 1.98093, 13.7711, 1.38932, 0.91 ) }
    dend_25 { pt3dadd( 6.24312, 15.2197, -0.137849, 0.91 ) }
    dend_25 { pt3dadd( 8.22617, 15.8937, -0.848387, 0.91 ) }
    // Section: dend_21, id: dend_21, parent: dend_3 (entry count 42/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( -4.13163, -15.5299, 0.00869995, 0.91 ) }
    dend_21 { pt3dadd( -6.00773, -15.783, -0.141422, 0.91 ) }
    dend_21 { pt3dadd( -8.30567, -15.8243, -0.204844, 0.91 ) }
    dend_21 { pt3dadd( -10.3824, -15.7552, -0.239687, 1.14 ) }
    dend_21 { pt3dadd( -11.8968, -15.6943, -0.283548, 0.91 ) }
    dend_21 { pt3dadd( -14.6544, -15.6319, -0.355872, 0.68 ) }
    dend_21 { pt3dadd( -16.0364, -15.6484, -0.3875, 0.91 ) }
    dend_21 { pt3dadd( -18.6465, -15.6691, -0.417913, 1.36 ) }
    dend_21 { pt3dadd( -21.056, -15.7168, -0.382941, 0.68 ) }
    dend_21 { pt3dadd( -22.7208, -15.8312, -0.339313, 0.68 ) }
    dend_21 { pt3dadd( -24.84, -16.1254, -0.26213, 1.59 ) }
    dend_21 { pt3dadd( -27.6187, -16.6834, -0.129536, 1.14 ) }
    dend_21 { pt3dadd( -28.8341, -16.9523, -0.0517916, 0.68 ) }
    dend_21 { pt3dadd( -31.3766, -17.5363, 0.119938, 1.14 ) }
    dend_21 { pt3dadd( -33.4084, -18.0059, 0.260989, 0.23 ) }
    dend_21 { pt3dadd( -35.0373, -18.383, 0.365558, 1.14 ) }
    dend_21 { pt3dadd( -37.0656, -18.8875, 0.449613, 0.91 ) }
    dend_21 { pt3dadd( -40.4964, -19.8643, 0.529401, 0.23 ) }
    dend_21 { pt3dadd( -42.1805, -20.4563, 0.530152, 0.91 ) }
    dend_21 { pt3dadd( -43.6677, -21.1327, 0.481466, 0.91 ) }
    dend_21 { pt3dadd( -44.6515, -21.7592, 0.415869, 1.14 ) }
    dend_21 { pt3dadd( -45.9801, -23.0871, 0.285571, 0.45 ) }
    dend_21 { pt3dadd( -46.735, -24.2369, 0.190652, 0.45 ) }
    dend_21 { pt3dadd( -47.4428, -25.6712, 0.091692, 0.91 ) }
    dend_21 { pt3dadd( -48.0639, -27.1751, 0.0188778, 0.45 ) }
    dend_21 { pt3dadd( -48.616, -28.7143, -0.0283268, 1.59 ) }
    dend_21 { pt3dadd( -49.58, -31.7438, -0.103635, 0.45 ) }
    dend_21 { pt3dadd( -50.2703, -34.2536, -0.150524, 1.82 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 70/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -4.13163, -15.5299, 0.00869995, 2.95 ) }
    dend_4 { pt3dadd( -4.72495, -19.6698, 0.251759, 2.95 ) }
    dend_4 { pt3dadd( -5.32994, -23.891, 0.499594, 2.95 ) }
    dend_4 { pt3dadd( -5.58792, -25.6911, 0.605278, 3.41 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 74/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -10.0078, 10.1239, -0.122493, 1.14 ) }
    dend_2 { pt3dadd( -11.4407, 8.71971, -0.68969, 1.14 ) }
    dend_2 { pt3dadd( -12.3868, 7.62701, -1.13548, 0.45 ) }
    dend_2 { pt3dadd( -13.2522, 6.56612, -1.56317, 1.59 ) }
    dend_2 { pt3dadd( -14.9996, 4.47741, -2.41708, 0.45 ) }
    dend_2 { pt3dadd( -16.2937, 2.99999, -3.08282, 0.91 ) }
    dend_2 { pt3dadd( -16.9207, 2.32609, -3.41189, 1.59 ) }
    dend_2 { pt3dadd( -18.4258, 0.643172, -4.23915, 0.23 ) }
    dend_2 { pt3dadd( -19.041, 0.0196192, -4.61183, 0.23 ) }
    dend_2 { pt3dadd( -19.7, -0.444394, -5.0871, 0.23 ) }
    dend_2 { pt3dadd( -20.9837, -0.497666, -5.97681, 0.68 ) }
    dend_2 { pt3dadd( -22.2801, -0.322182, -6.69387, 0.68 ) }
    dend_2 { pt3dadd( -23.2703, -0.251895, -7.14248, 0.68 ) }
    dend_2 { pt3dadd( -24.9085, -0.280657, -7.73547, 1.59 ) }
    dend_2 { pt3dadd( -26.2053, -0.488546, -8.13229, 1.59 ) }
    dend_2 { pt3dadd( -28.0777, -0.946935, -8.61083, 0.23 ) }
    dend_2 { pt3dadd( -29.7785, -1.46542, -8.97492, 0.91 ) }
    dend_2 { pt3dadd( -31.3923, -1.968, -9.27445, 0.91 ) }
    dend_2 { pt3dadd( -32.7798, -2.36981, -9.47803, 0.91 ) }
    dend_2 { pt3dadd( -34.556, -2.8132, -9.70903, 0.23 ) }
    dend_2 { pt3dadd( -37.0596, -3.35031, -10.0441, 0.68 ) }
    dend_2 { pt3dadd( -38.4818, -3.58728, -10.2417, 0.68 ) }
    dend_2 { pt3dadd( -40.3691, -3.8182, -10.5225, 0.23 ) }
    dend_2 { pt3dadd( -42.1092, -3.96458, -10.7981, 0.45 ) }
    dend_2 { pt3dadd( -44.2941, -4.10651, -11.1637, 0.45 ) }
    dend_2 { pt3dadd( -45.6859, -4.16958, -11.4027, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_2 { pt3dadd( -47.0776, -4.21979, -11.6423, 0.23 ) }
    dend_2 { pt3dadd( -49.0836, -4.27191, -11.9837, 1.36 ) }
    dend_2 { pt3dadd( -50.8372, -4.34017, -12.2893, 0.45 ) }
    dend_2 { pt3dadd( -53.1735, -4.43738, -12.6906, 0.91 ) }
    dend_2 { pt3dadd( -54.617, -4.54188, -12.917, 0.91 ) }
    dend_2 { pt3dadd( -55.8003, -4.63997, -13.0937, 1.36 ) }
    dend_2 { pt3dadd( -57.5459, -4.79815, -13.3383, 0.23 ) }
    dend_2 { pt3dadd( -59.5433, -4.98024, -13.5996, 0.23 ) }
    dend_2 { pt3dadd( -60.545, -5.08818, -13.7371, 0.91 ) }
    dend_2 { pt3dadd( -63.2151, -5.5364, -14.1242, 0.23 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 10/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -10.0078, 10.1239, -0.122493, 0.23 ) }
    dend_1 { pt3dadd( -11.4414, 10.4877, 0.262818, 0.23 ) }
    dend_1 { pt3dadd( -12.9143, 10.8571, 0.700602, 0.68 ) }
    dend_1 { pt3dadd( -14.2524, 11.1893, 1.16595, 0.23 ) }
    dend_1 { pt3dadd( -14.839, 11.3293, 1.38169, 0.45 ) }
    dend_1 { pt3dadd( -16.0635, 11.6289, 1.88142, 0.91 ) }
    dend_1 { pt3dadd( -17.3391, 11.9632, 2.42612, 0.23 ) }
    dend_1 { pt3dadd( -17.8937, 12.1026, 2.71066, 0.68 ) }
    dend_1 { pt3dadd( -18.661, 12.3691, 3.20621, 0.23 ) }
    dend_1 { pt3dadd( -19.0491, 12.5419, 3.50938, 0.68 ) }
    dend_1 { pt3dadd( -19.9081, 12.9887, 4.21434, 0.23 ) }
    dend_1 { pt3dadd( -20.3566, 13.2193, 4.58041, 0.68 ) }
    dend_1 { pt3dadd( -21.3175, 13.6461, 5.34137, 0.23 ) }
    dend_1 { pt3dadd( -22.3126, 14.0044, 6.07053, 0.68 ) }
    dend_1 { pt3dadd( -24.0799, 14.54, 7.26693, 0.23 ) }
    dend_1 { pt3dadd( -24.9239, 14.7509, 7.77965, 0.45 ) }
    dend_1 { pt3dadd( -26.3602, 14.9995, 8.49568, 0.23 ) }
    dend_1 { pt3dadd( -27.3455, 15.11, 8.86933, 0.23 ) }
    dend_1 { pt3dadd( -28.2938, 15.2157, 9.09191, 0.23 ) }
    dend_1 { pt3dadd( -29.1673, 15.3419, 9.21223, 0.23 ) }
    dend_1 { pt3dadd( -30.1047, 15.5852, 9.27846, 0.23 ) }
    dend_1 { pt3dadd( -31.1773, 15.9967, 9.33481, 0.23 ) }
    dend_1 { pt3dadd( -32.7545, 16.7894, 9.40737, 0.45 ) }
    dend_1 { pt3dadd( -34.4468, 17.7488, 9.5077, 0.23 ) }
    dend_1 { pt3dadd( -35.41, 18.3062, 9.57894, 0.68 ) }
    dend_1 { pt3dadd( -36.8817, 19.0982, 9.70255, 0.23 ) }
    dend_1 { pt3dadd( -38.4177, 19.8941, 9.86065, 0.23 ) }
    dend_1 { pt3dadd( -40.0346, 20.7038, 10.0232, 0.23 ) }
    dend_1 { pt3dadd( -41.6203, 21.4681, 10.1875, 0.23 ) }
    dend_1 { pt3dadd( -43.3448, 22.2079, 10.3607, 0.23 ) }
    dend_1 { pt3dadd( -45.4351, 22.989, 10.5441, 0.45 ) }
    dend_1 { pt3dadd( -46.011, 23.1714, 10.578, 0.23 ) }
    dend_1 { pt3dadd( -46.9025, 23.4065, 10.6216, 0.68 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 43/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 1.08269, 39.7222, 0.0, 0.483343 ) }
    axon_1 { pt3dadd( 1.72403, 54.7085, 0.0, 0.483343 ) }
    axon_1 { pt3dadd( 2.36537, 69.6947, 0.0, 0.483343 ) }
    // Section: dend_40, id: dend_40, parent: dend_34 (entry count 46/100)
    dend_40 { pt3dclear() }
    dend_40 { pt3dadd( -1.30598, 21.5039, 0.30352, 0.23 ) }
    dend_40 { pt3dadd( -1.57667, 21.333, 1.72027, 0.23 ) }
    dend_40 { pt3dadd( -1.48722, 20.7477, 2.48411, 0.91 ) }
    dend_40 { pt3dadd( -1.30676, 19.4786, 3.63071, 0.23 ) }
    dend_40 { pt3dadd( -1.31757, 18.4802, 4.62075, 0.23 ) }
    dend_40 { pt3dadd( -1.47447, 17.8103, 5.64316, 0.23 ) }
    dend_40 { pt3dadd( -1.67228, 17.4213, 6.44799, 0.91 ) }
    dend_40 { pt3dadd( -2.19375, 16.8543, 7.50729, 0.23 ) }
    dend_40 { pt3dadd( -2.52618, 16.665, 7.95617, 0.23 ) }
    dend_40 { pt3dadd( -3.44877, 16.2478, 9.07869, 0.91 ) }
    dend_40 { pt3dadd( -4.56691, 15.871, 10.4104, 0.23 ) }
    dend_40 { pt3dadd( -5.85018, 15.5637, 11.7969, 0.23 ) }
    dend_40 { pt3dadd( -7.23644, 15.3618, 13.243, 0.68 ) }
    dend_40 { pt3dadd( -9.5622, 15.1344, 15.5804, 0.23 ) }
    // Section: dend_35, id: dend_35, parent: dend_34 (entry count 60/100)
    dend_35 { pt3dclear() }
    dend_35 { pt3dadd( -1.30598, 21.5039, 0.30352, 0.68 ) }
    dend_35 { pt3dadd( -1.09254, 24.0913, 0.147015, 0.68 ) }
    dend_35 { pt3dadd( -0.939008, 25.9098, 0.0763398, 0.68 ) }
    dend_35 { pt3dadd( -0.860244, 26.9419, 0.0515347, 1.36 ) }
    dend_35 { pt3dadd( -0.634652, 29.8299, 0.00375265, 0.68 ) }
    dend_35 { pt3dadd( -0.567783, 30.8921, -0.0188128, 0.68 ) }
    dend_35 { pt3dadd( -0.506861, 33.0722, -0.0699523, 1.59 ) }
    dend_35 { pt3dadd( -0.507978, 34.1079, -0.0661394, 1.59 ) }
    dend_35 { pt3dadd( -0.625994, 36.7233, 0.0265595, 0.23 ) }
    dend_35 { pt3dadd( -0.796522, 38.0733, 0.108691, 0.23 ) }
    dend_35 { pt3dadd( -1.14542, 39.6858, 0.242007, 1.14 ) }
    dend_35 { pt3dadd( -1.62336, 41.4924, 0.40979, 0.91 ) }
    dend_35 { pt3dadd( -2.01661, 42.7891, 0.535997, 0.91 ) }
    dend_35 { pt3dadd( -2.51963, 44.4005, 0.703589, 1.36 ) }
    dend_35 { pt3dadd( -3.09318, 46.077, 0.906412, 0.68 ) }
    dend_35 { pt3dadd( -3.68969, 47.7726, 1.13244, 1.14 ) }
    dend_35 { pt3dadd( -4.25518, 49.4963, 1.38305, 0.45 ) }
    dend_35 { pt3dadd( -4.60343, 50.7252, 1.53929, 1.59 ) }
    dend_35 { pt3dadd( -5.05502, 52.48, 1.67357, 2.27 ) }
    // Section: dend_33, id: dend_33, parent: dend_25 (entry count 79/100)
    dend_33 { pt3dclear() }
    dend_33 { pt3dadd( 8.22617, 15.8937, -0.848387, 0.91 ) }
    dend_33 { pt3dadd( 8.51589, 15.8325, -2.24612, 0.91 ) }
    dend_33 { pt3dadd( 8.9167, 15.3181, -4.29419, 0.91 ) }
    dend_33 { pt3dadd( 9.71201, 14.261, -7.41416, 0.68 ) }
    dend_33 { pt3dadd( 10.1245, 13.6984, -8.77538, 0.68 ) }
    dend_33 { pt3dadd( 10.5945, 12.9998, -10.1447, 1.14 ) }
    dend_33 { pt3dadd( 11.3837, 11.7164, -12.197, 0.68 ) }
    dend_33 { pt3dadd( 12.3465, 9.83981, -14.333, 0.23 ) }
    dend_33 { pt3dadd( 12.845, 8.56832, -15.3053, 0.23 ) }
    dend_33 { pt3dadd( 13.1082, 7.71083, -15.7819, 0.23 ) }
    dend_33 { pt3dadd( 13.5116, 6.01683, -16.5622, 1.14 ) }
    dend_33 { pt3dadd( 13.9133, 4.34936, -17.2638, 1.82 ) }
    dend_33 { pt3dadd( 14.3229, 2.54249, -17.9169, 0.68 ) }
    dend_33 { pt3dadd( 14.6766, 0.236556, -18.5612, 1.14 ) }
    dend_33 { pt3dadd( 14.8215, -1.57766, -19.0399, 0.45 ) }
    dend_33 { pt3dadd( 14.8798, -3.06055, -19.4168, 0.45 ) }
    // Section: dend_26, id: dend_26, parent: dend_25 (entry count 95/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 8.22617, 15.8937, -0.848387, 1.14 ) }
    dend_26 { pt3dadd( 10.569, 16.2156, -1.58781, 1.14 ) }
    dend_26 { pt3dadd( 11.8869, 16.3967, -2.00377, 1.59 ) }
    dend_26 { pt3dadd( 14.2476, 16.7212, -2.74885, 1.59 ) }
    // Section: dend_23, id: dend_23, parent: dend_21 (entry count 99/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( -50.2703, -34.2536, -0.150524, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_23 { pt3dadd( -52.3874, -35.2524, 0.571271, 0.23 ) }
    dend_23 { pt3dadd( -53.8629, -36.0591, 1.02092, 0.68 ) }
    dend_23 { pt3dadd( -55.7045, -37.2216, 1.56102, 0.23 ) }
    dend_23 { pt3dadd( -56.4742, -37.7645, 1.77738, 0.23 ) }
    dend_23 { pt3dadd( -58.1149, -38.9967, 2.2173, 0.23 ) }
    dend_23 { pt3dadd( -59.8346, -40.3741, 2.65187, 0.91 ) }
    dend_23 { pt3dadd( -61.012, -41.426, 2.90626, 0.23 ) }
    dend_23 { pt3dadd( -62.1075, -42.5076, 3.13117, 0.91 ) }
    dend_23 { pt3dadd( -63.0283, -43.4417, 3.32609, 0.23 ) }
    dend_23 { pt3dadd( -64.1723, -44.5686, 3.57975, 1.59 ) }
    dend_23 { pt3dadd( -65.8199, -46.0786, 3.959, 0.23 ) }
    dend_23 { pt3dadd( -66.8983, -46.9842, 4.22296, 0.23 ) }
    dend_23 { pt3dadd( -68.9075, -48.4771, 4.72815, 0.23 ) }
    dend_23 { pt3dadd( -70.093, -49.2524, 5.02743, 1.59 ) }
    dend_23 { pt3dadd( -70.8265, -49.6866, 5.21605, 0.23 ) }
    dend_23 { pt3dadd( -72.4117, -50.5236, 5.62185, 0.68 ) }
    dend_23 { pt3dadd( -74.1327, -51.3262, 6.03135, 0.23 ) }
    dend_23 { pt3dadd( -75.4136, -51.8879, 6.27475, 1.14 ) }
    dend_23 { pt3dadd( -75.9646, -52.1311, 6.35336, 1.14 ) }
    dend_23 { pt3dadd( -76.9855, -52.6073, 6.46285, 0.23 ) }
    dend_23 { pt3dadd( -78.6211, -53.4489, 6.63599, 0.68 ) }
    dend_23 { pt3dadd( -80.2588, -54.3608, 6.80701, 0.23 ) }
    dend_23 { pt3dadd( -82.194, -55.4834, 7.07243, 1.14 ) }
    dend_23 { pt3dadd( -84.6625, -56.9912, 7.4875, 0.23 ) }
    dend_23 { pt3dadd( -86.0764, -57.9001, 7.77227, 0.91 ) }
    dend_23 { pt3dadd( -88.761, -59.7285, 8.38365, 0.23 ) }
    dend_23 { pt3dadd( -89.5231, -60.2915, 8.57603, 0.91 ) }
    dend_23 { pt3dadd( -92.261, -62.4686, 9.35139, 0.23 ) }
    dend_23 { pt3dadd( -94.4207, -64.3539, 10.0718, 1.14 ) }
    dend_23 { pt3dadd( -96.2908, -66.0441, 10.7444, 0.45 ) }
    dend_23 { pt3dadd( -97.5398, -67.2231, 11.1949, 1.14 ) }
    dend_23 { pt3dadd( -98.5308, -68.1968, 11.5354, 1.14 ) }
    dend_23 { pt3dadd( -99.7321, -69.4702, 11.9439, 0.23 ) }
    dend_23 { pt3dadd( -100.561, -70.562, 12.1935, 0.23 ) }
    // Section: dend_22, id: dend_22, parent: dend_21 (entry count 34/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( -50.2703, -34.2536, -0.150524, 0.45 ) }
    dend_22 { pt3dadd( -52.0956, -36.1935, -0.550279, 0.45 ) }
    dend_22 { pt3dadd( -53.3985, -37.5782, -0.835637, 1.14 ) }
    dend_22 { pt3dadd( -54.2148, -38.4458, -1.01442, 0.23 ) }
    dend_22 { pt3dadd( -55.2872, -39.5855, -1.24928, 1.36 ) }
    dend_22 { pt3dadd( -56.3736, -40.74, -1.4872, 0.45 ) }
    // Section: dend_20, id: dend_20, parent: dend_4 (entry count 40/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( -5.58792, -25.6911, 0.605278, 0.23 ) }
    dend_20 { pt3dadd( -4.86713, -27.5711, 0.806169, 0.23 ) }
    dend_20 { pt3dadd( -4.02129, -29.8182, 1.01945, 0.23 ) }
    dend_20 { pt3dadd( -3.10443, -32.1714, 1.24765, 1.14 ) }
    dend_20 { pt3dadd( -2.14955, -34.5181, 1.47393, 0.23 ) }
    dend_20 { pt3dadd( -1.46209, -36.1507, 1.62505, 0.91 ) }
    dend_20 { pt3dadd( -0.930664, -37.3951, 1.73369, 0.91 ) }
    dend_20 { pt3dadd( 0.341697, -40.4199, 1.97085, 0.23 ) }
    dend_20 { pt3dadd( 1.29639, -42.6355, 2.1337, 1.14 ) }
    dend_20 { pt3dadd( 1.95424, -44.1523, 2.23305, 1.14 ) }
    dend_20 { pt3dadd( 3.14527, -46.945, 2.38483, 0.45 ) }
    dend_20 { pt3dadd( 4.29863, -49.6575, 2.50454, 0.45 ) }
    dend_20 { pt3dadd( 4.87486, -51.0787, 2.56613, 0.91 ) }
    dend_20 { pt3dadd( 5.83843, -53.5059, 2.66747, 0.23 ) }
    dend_20 { pt3dadd( 6.71093, -55.8204, 2.79008, 0.23 ) }
    dend_20 { pt3dadd( 7.69258, -58.5269, 2.97136, 0.68 ) }
    dend_20 { pt3dadd( 8.82583, -61.6516, 3.21659, 0.23 ) }
    dend_20 { pt3dadd( 9.58196, -63.7163, 3.41447, 0.91 ) }
    dend_20 { pt3dadd( 10.6273, -66.5659, 3.7618, 1.14 ) }
    dend_20 { pt3dadd( 12.3569, -71.3634, 4.54664, 0.23 ) }
    dend_20 { pt3dadd( 12.9012, -72.9071, 4.86825, 0.23 ) }
    dend_20 { pt3dadd( 13.6413, -75.1283, 5.4071, 0.68 ) }
    dend_20 { pt3dadd( 14.5236, -77.9311, 6.17124, 0.23 ) }
    dend_20 { pt3dadd( 15.5879, -81.4214, 7.23714, 1.36 ) }
    dend_20 { pt3dadd( 16.312, -83.9011, 8.06065, 0.68 ) }
    dend_20 { pt3dadd( 17.1568, -87.0352, 9.10145, 0.23 ) }
    dend_20 { pt3dadd( 17.4005, -88.0267, 9.41955, 0.91 ) }
    dend_20 { pt3dadd( 18.0678, -90.9253, 10.3268, 0.23 ) }
    dend_20 { pt3dadd( 18.504, -92.8829, 10.8956, 0.91 ) }
    dend_20 { pt3dadd( 19.1288, -95.6858, 11.6162, 1.14 ) }
    dend_20 { pt3dadd( 19.9081, -99.0778, 12.39, 0.23 ) }
    dend_20 { pt3dadd( 20.3036, -100.783, 12.758, 0.91 ) }
    dend_20 { pt3dadd( 20.9578, -103.566, 13.3379, 0.23 ) }
    dend_20 { pt3dadd( 21.2157, -104.578, 13.5162, 0.91 ) }
    dend_20 { pt3dadd( 21.5998, -105.962, 13.7202, 0.91 ) }
    dend_20 { pt3dadd( 22.621, -109.145, 14.1753, 0.23 ) }
    dend_20 { pt3dadd( 23.492, -111.534, 14.4964, 2.05 ) }
    dend_20 { pt3dadd( 23.8816, -112.561, 14.6189, 2.05 ) }
    dend_20 { pt3dadd( 26.189, -118.428, 15.2317, 0.23 ) }
    dend_20 { pt3dadd( 26.9826, -120.399, 15.428, 0.91 ) }
    dend_20 { pt3dadd( 29.093, -125.556, 15.8838, 0.23 ) }
    dend_20 { pt3dadd( 29.7247, -127.068, 15.9959, 0.23 ) }
    dend_20 { pt3dadd( 30.2873, -128.366, 16.0878, 1.14 ) }
    dend_20 { pt3dadd( 30.8374, -129.593, 16.1732, 1.14 ) }
    dend_20 { pt3dadd( 32.7988, -133.846, 16.4988, 0.23 ) }
    dend_20 { pt3dadd( 33.697, -135.697, 16.6687, 0.23 ) }
    dend_20 { pt3dadd( 34.3793, -137.06, 16.8178, 0.91 ) }
    dend_20 { pt3dadd( 35.1791, -138.593, 17.0117, 0.91 ) }
    dend_20 { pt3dadd( 37.0337, -141.873, 17.4777, 0.23 ) }
    dend_20 { pt3dadd( 38.0175, -143.521, 17.7414, 1.14 ) }
    dend_20 { pt3dadd( 40.2994, -147.023, 18.3716, 0.23 ) }
    dend_20 { pt3dadd( 41.6427, -149.005, 18.7515, 0.23 ) }
    dend_20 { pt3dadd( 42.3143, -149.971, 18.9352, 0.91 ) }
    dend_20 { pt3dadd( 43.2366, -151.209, 19.2046, 0.91 ) }
    dend_20 { pt3dadd( 44.6544, -152.939, 19.6168, 0.23 ) }
    dend_20 { pt3dadd( 45.5319, -153.932, 19.8529, 0.68 ) }
    dend_20 { pt3dadd( 46.7214, -155.209, 20.1809, 0.23 ) }
    dend_20 { pt3dadd( 48.1208, -156.67, 20.556, 0.91 ) }
    dend_20 { pt3dadd( 52.0771, -160.657, 21.5747, 0.23 ) }
    dend_20 { pt3dadd( 53.0242, -161.576, 21.8128, 1.14 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_20 { pt3dadd( 54.2822, -162.717, 22.1075, 1.14 ) }
    dend_20 { pt3dadd( 57.3075, -165.417, 22.8779, 0.23 ) }
    dend_20 { pt3dadd( 58.3326, -166.337, 23.2034, 0.23 ) }
    dend_20 { pt3dadd( 60.1671, -168.062, 23.8939, 0.68 ) }
    dend_20 { pt3dadd( 61.4773, -169.511, 24.5575, 0.23 ) }
    dend_20 { pt3dadd( 62.7933, -171.307, 25.4381, 0.91 ) }
    dend_20 { pt3dadd( 63.6547, -172.788, 26.2443, 0.23 ) }
    dend_20 { pt3dadd( 64.7927, -175.048, 27.6174, 0.23 ) }
    dend_20 { pt3dadd( 65.4835, -176.409, 28.4645, 0.68 ) }
    dend_20 { pt3dadd( 66.8545, -179.085, 30.0874, 0.23 ) }
    dend_20 { pt3dadd( 68.0837, -181.269, 31.4334, 0.68 ) }
    dend_20 { pt3dadd( 70.3817, -184.993, 33.7314, 0.23 ) }
    dend_20 { pt3dadd( 73.2511, -189.1, 36.1531, 0.23 ) }
    dend_20 { pt3dadd( 74.9056, -191.309, 37.4343, 0.23 ) }
    dend_20 { pt3dadd( 76.1772, -192.869, 38.3743, 0.68 ) }
    dend_20 { pt3dadd( 78.8509, -195.82, 40.1875, 0.23 ) }
    dend_20 { pt3dadd( 81.2924, -198.317, 41.8042, 0.23 ) }
    dend_20 { pt3dadd( 83.2815, -200.251, 42.9782, 0.23 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 18/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -5.58792, -25.6911, 0.605278, 2.27 ) }
    dend_5 { pt3dadd( -7.30276, -29.7195, 0.279526, 2.27 ) }
    dend_5 { pt3dadd( -8.1142, -31.6258, 0.125384, 2.73 ) }
    dend_5 { pt3dadd( -8.98217, -33.6648, -0.0394968, 3.64 ) }
    // Section: dend_39, id: dend_39, parent: dend_35 (entry count 22/100)
    dend_39 { pt3dclear() }
    dend_39 { pt3dadd( -5.05502, 52.48, 1.67357, 0.23 ) }
    dend_39 { pt3dadd( -2.8813, 54.0228, 3.71955, 0.23 ) }
    dend_39 { pt3dadd( -1.20278, 54.7623, 5.00239, 0.91 ) }
    dend_39 { pt3dadd( 0.444125, 55.4352, 6.1479, 0.23 ) }
    dend_39 { pt3dadd( 1.89095, 56.0484, 7.17718, 0.23 ) }
    dend_39 { pt3dadd( 3.19617, 56.5777, 8.07921, 0.91 ) }
    dend_39 { pt3dadd( 4.9006, 57.304, 9.20224, 0.23 ) }
    dend_39 { pt3dadd( 5.8099, 57.6258, 9.75571, 0.23 ) }
    dend_39 { pt3dadd( 6.63171, 58.0005, 10.261, 0.23 ) }
    dend_39 { pt3dadd( 7.95947, 58.8535, 11.0625, 0.23 ) }
    dend_39 { pt3dadd( 9.06828, 59.876, 11.746, 1.36 ) }
    dend_39 { pt3dadd( 10.0038, 60.8846, 12.3267, 1.36 ) }
    dend_39 { pt3dadd( 11.9774, 63.3321, 13.4885, 0.23 ) }
    dend_39 { pt3dadd( 13.2067, 64.8474, 14.1457, 0.23 ) }
    dend_39 { pt3dadd( 14.2386, 66.1161, 14.6182, 0.23 ) }
    dend_39 { pt3dadd( 15.6938, 68.0248, 15.173, 0.23 ) }
    dend_39 { pt3dadd( 17.4194, 70.4121, 15.7498, 1.14 ) }
    dend_39 { pt3dadd( 19.0765, 72.8062, 16.2817, 0.23 ) }
    dend_39 { pt3dadd( 20.3067, 74.6234, 16.6038, 0.23 ) }
    dend_39 { pt3dadd( 21.9779, 77.1703, 17.0315, 0.45 ) }
    dend_39 { pt3dadd( 23.48, 79.7089, 17.4108, 0.23 ) }
    dend_39 { pt3dadd( 24.3676, 81.4307, 17.6238, 0.68 ) }
    dend_39 { pt3dadd( 25.4845, 84.1994, 17.8943, 0.23 ) }
    dend_39 { pt3dadd( 25.9014, 85.4959, 18.0532, 0.23 ) }
    dend_39 { pt3dadd( 26.3321, 87.1759, 18.2842, 0.91 ) }
    dend_39 { pt3dadd( 26.6091, 88.3096, 18.4555, 0.91 ) }
    dend_39 { pt3dadd( 26.9271, 89.431, 18.6292, 0.23 ) }
    dend_39 { pt3dadd( 27.8329, 92.2775, 19.1764, 0.68 ) }
    dend_39 { pt3dadd( 29.1448, 95.9191, 19.9248, 0.23 ) }
    dend_39 { pt3dadd( 29.5843, 97.1071, 20.2098, 0.91 ) }
    dend_39 { pt3dadd( 30.5871, 99.7824, 20.8709, 0.23 ) }
    dend_39 { pt3dadd( 31.7147, 102.762, 21.6469, 0.68 ) }
    dend_39 { pt3dadd( 32.9251, 105.96, 22.5351, 0.23 ) }
    dend_39 { pt3dadd( 34.1508, 109.458, 23.5186, 0.68 ) }
    dend_39 { pt3dadd( 34.8155, 111.662, 24.1307, 0.23 ) }
    dend_39 { pt3dadd( 35.4204, 114.288, 24.8829, 0.68 ) }
    dend_39 { pt3dadd( 35.6914, 116.123, 25.4389, 0.23 ) }
    dend_39 { pt3dadd( 35.7847, 117.631, 25.9337, 0.23 ) }
    dend_39 { pt3dadd( 35.8377, 119.622, 26.5661, 0.23 ) }
    dend_39 { pt3dadd( 35.8176, 121.983, 27.3747, 0.68 ) }
    dend_39 { pt3dadd( 35.7472, 125.413, 28.5613, 0.23 ) }
    dend_39 { pt3dadd( 35.598, 128.313, 29.6266, 0.68 ) }
    dend_39 { pt3dadd( 35.316, 131.304, 30.6936, 0.23 ) }
    // Section: dend_36, id: dend_36, parent: dend_35 (entry count 65/100)
    dend_36 { pt3dclear() }
    dend_36 { pt3dadd( -5.05502, 52.48, 1.67357, 0.23 ) }
    dend_36 { pt3dadd( -6.33212, 55.0786, 1.67176, 0.23 ) }
    dend_36 { pt3dadd( -7.48823, 57.2376, 1.68016, 0.91 ) }
    dend_36 { pt3dadd( -9.88007, 61.4229, 1.6926, 0.23 ) }
    dend_36 { pt3dadd( -10.7542, 62.8178, 1.68507, 0.91 ) }
    dend_36 { pt3dadd( -11.6822, 64.2344, 1.66784, 0.91 ) }
    dend_36 { pt3dadd( -13.1232, 66.4782, 1.63742, 0.23 ) }
    dend_36 { pt3dadd( -14.843, 69.1485, 1.62797, 0.23 ) }
    dend_36 { pt3dadd( -16.496, 71.7607, 1.57151, 0.23 ) }
    dend_36 { pt3dadd( -17.7353, 73.896, 1.49342, 0.68 ) }
    dend_36 { pt3dadd( -18.5114, 75.3671, 1.43116, 0.23 ) }
    dend_36 { pt3dadd( -19.2578, 77.0004, 1.36613, 0.23 ) }
    dend_36 { pt3dadd( -19.6338, 77.9433, 1.34163, 0.23 ) }
    dend_36 { pt3dadd( -20.478, 80.2911, 1.34324, 1.59 ) }
    dend_36 { pt3dadd( -21.5008, 83.2984, 1.4047, 0.68 ) }
    dend_36 { pt3dadd( -22.182, 85.2599, 1.45439, 0.23 ) }
    dend_36 { pt3dadd( -22.6444, 86.3913, 1.47804, 0.91 ) }
    dend_36 { pt3dadd( -23.471, 88.0972, 1.49749, 0.23 ) }
    dend_36 { pt3dadd( -23.9179, 88.9301, 1.49885, 0.91 ) }
    dend_36 { pt3dadd( -24.7434, 90.3622, 1.51064, 0.23 ) }
    dend_36 { pt3dadd( -25.5088, 91.6297, 1.4962, 1.14 ) }
    dend_36 { pt3dadd( -26.2401, 92.817, 1.44945, 1.14 ) }
    dend_36 { pt3dadd( -27.1147, 94.1211, 1.3793, 0.23 ) }
    dend_36 { pt3dadd( -28.3162, 95.7574, 1.29329, 0.23 ) }
    dend_36 { pt3dadd( -29.7981, 97.608, 1.25608, 0.91 ) }
    dend_36 { pt3dadd( -30.9115, 98.8781, 1.26335, 0.23 ) }
    dend_36 { pt3dadd( -32.4006, 100.406, 1.33291, 0.23 ) }
    dend_36 { pt3dadd( -33.5404, 101.454, 1.41545, 0.91 ) }
    dend_36 { pt3dadd( -35.4731, 103.036, 1.62499, 0.23 ) }
    dend_36 { pt3dadd( -37.1392, 104.332, 1.8446, 0.68 ) }
    dend_36 { pt3dadd( -37.8518, 104.909, 1.9405, 0.68 ) }
    dend_36 { pt3dadd( -39.1486, 106.0, 2.12792, 0.23 ) }
    dend_36 { pt3dadd( -40.5642, 107.262, 2.30253, 0.68 ) }
    dend_36 { pt3dadd( -41.8713, 108.431, 2.39623, 0.23 ) }
    dend_36 { pt3dadd( -43.2964, 109.6, 2.44542, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_36 { pt3dadd( -45.5521, 111.294, 2.40999, 0.91 ) }
    dend_36 { pt3dadd( -47.3088, 112.477, 2.27965, 0.23 ) }
    dend_36 { pt3dadd( -49.6313, 113.924, 1.97087, 0.23 ) }
    dend_36 { pt3dadd( -52.333, 115.505, 1.50589, 0.91 ) }
    dend_36 { pt3dadd( -54.4928, 116.691, 1.05845, 0.23 ) }
    dend_36 { pt3dadd( -56.2671, 117.574, 0.668958, 0.91 ) }
    dend_36 { pt3dadd( -58.0845, 118.46, 0.230482, 0.23 ) }
    dend_36 { pt3dadd( -60.9491, 119.952, -0.529449, 0.23 ) }
    dend_36 { pt3dadd( -62.8514, 121.005, -1.05413, 0.91 ) }
    dend_36 { pt3dadd( -64.7129, 122.176, -1.59007, 0.23 ) }
    dend_36 { pt3dadd( -65.6818, 122.844, -1.87066, 0.68 ) }
    dend_36 { pt3dadd( -67.4326, 124.028, -2.30272, 0.23 ) }
    dend_36 { pt3dadd( -68.8026, 124.942, -2.56736, 0.91 ) }
    dend_36 { pt3dadd( -70.191, 125.824, -2.77269, 0.23 ) }
    dend_36 { pt3dadd( -71.425, 126.615, -2.90092, 0.68 ) }
    dend_36 { pt3dadd( -72.6486, 127.392, -2.98707, 0.23 ) }
    dend_36 { pt3dadd( -75.1445, 128.964, -3.11767, 0.91 ) }
    dend_36 { pt3dadd( -77.8673, 130.66, -3.21474, 0.23 ) }
    dend_36 { pt3dadd( -80.3903, 132.29, -3.29319, 0.23 ) }
    dend_36 { pt3dadd( -82.2629, 133.579, -3.3527, 0.91 ) }
    dend_36 { pt3dadd( -83.7836, 134.727, -3.40561, 0.23 ) }
    dend_36 { pt3dadd( -84.4819, 135.32, -3.45012, 0.68 ) }
    dend_36 { pt3dadd( -85.5462, 136.394, -3.5623, 0.23 ) }
    dend_36 { pt3dadd( -86.5151, 137.576, -3.72856, 0.91 ) }
    dend_36 { pt3dadd( -87.9312, 139.643, -4.10387, 0.23 ) }
    dend_36 { pt3dadd( -88.7101, 140.915, -4.37551, 0.91 ) }
    dend_36 { pt3dadd( -89.6943, 142.665, -4.76325, 0.23 ) }
    dend_36 { pt3dadd( -90.4143, 143.963, -5.08038, 1.14 ) }
    dend_36 { pt3dadd( -91.9022, 146.647, -5.8428, 0.23 ) }
    dend_36 { pt3dadd( -93.3393, 149.159, -6.63031, 0.91 ) }
    dend_36 { pt3dadd( -94.5304, 151.142, -7.31714, 0.23 ) }
    dend_36 { pt3dadd( -95.5738, 152.766, -7.92053, 0.91 ) }
    dend_36 { pt3dadd( -96.9706, 154.871, -8.73995, 0.23 ) }
    dend_36 { pt3dadd( -98.0209, 156.362, -9.38234, 0.23 ) }
    dend_36 { pt3dadd( -99.1927, 157.895, -10.1061, 0.91 ) }
    dend_36 { pt3dadd( -100.716, 159.823, -11.0376, 0.23 ) }
    dend_36 { pt3dadd( -101.504, 160.79, -11.5128, 0.23 ) }
    dend_36 { pt3dadd( -102.295, 161.726, -11.9774, 0.68 ) }
    dend_36 { pt3dadd( -102.842, 162.326, -12.267, 0.23 ) }
    dend_36 { pt3dadd( -104.17, 163.729, -12.9266, 0.68 ) }
    dend_36 { pt3dadd( -105.663, 165.219, -13.6535, 0.23 ) }
    dend_36 { pt3dadd( -106.817, 166.331, -14.1504, 0.23 ) }
    dend_36 { pt3dadd( -107.596, 167.086, -14.4682, 0.68 ) }
    dend_36 { pt3dadd( -108.585, 168.03, -14.8394, 0.23 ) }
    dend_36 { pt3dadd( -109.478, 168.914, -15.1578, 0.23 ) }
    dend_36 { pt3dadd( -110.392, 169.817, -15.4611, 0.45 ) }
    dend_36 { pt3dadd( -112.307, 171.714, -16.0858, 0.23 ) }
    dend_36 { pt3dadd( -113.658, 173.138, -16.5419, 1.82 ) }
    dend_36 { pt3dadd( -114.639, 174.206, -16.8727, 0.68 ) }
    dend_36 { pt3dadd( -116.62, 176.455, -17.532, 0.23 ) }
    dend_36 { pt3dadd( -118.199, 178.195, -17.9959, 0.91 ) }
    dend_36 { pt3dadd( -119.696, 179.867, -18.4394, 0.23 ) }
    dend_36 { pt3dadd( -120.911, 181.201, -18.7928, 0.23 ) }
    dend_36 { pt3dadd( -121.647, 182.014, -18.9877, 0.91 ) }
    dend_36 { pt3dadd( -122.665, 183.178, -19.2556, 0.23 ) }
    dend_36 { pt3dadd( -123.776, 184.462, -19.5145, 1.36 ) }
    // Section: dend_30, id: dend_30, parent: dend_26 (entry count 56/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( 14.2476, 16.7212, -2.74885, 0.68 ) }
    dend_30 { pt3dadd( 15.8004, 15.7347, -3.35469, 0.68 ) }
    dend_30 { pt3dadd( 17.4944, 14.6794, -3.90695, 0.68 ) }
    dend_30 { pt3dadd( 18.9683, 13.7257, -4.33253, 0.68 ) }
    dend_30 { pt3dadd( 20.4258, 12.6489, -4.70635, 1.14 ) }
    dend_30 { pt3dadd( 22.1635, 11.3108, -5.1695, 1.59 ) }
    dend_30 { pt3dadd( 24.5973, 9.41479, -5.83314, 0.68 ) }
    dend_30 { pt3dadd( 26.6547, 7.81305, -6.35971, 1.82 ) }
    dend_30 { pt3dadd( 28.8259, 6.11195, -6.91962, 0.91 ) }
    dend_30 { pt3dadd( 32.4998, 3.16639, -7.93247, 0.68 ) }
    dend_30 { pt3dadd( 34.3698, 1.64904, -8.50693, 0.68 ) }
    dend_30 { pt3dadd( 36.3105, 0.0398332, -9.16838, 1.14 ) }
    dend_30 { pt3dadd( 37.6295, -1.07235, -9.65624, 1.14 ) }
    dend_30 { pt3dadd( 40.4767, -3.49437, -10.7799, 1.82 ) }
    dend_30 { pt3dadd( 42.7791, -5.39962, -11.735, 0.23 ) }
    dend_30 { pt3dadd( 44.5036, -6.77086, -12.4806, 0.91 ) }
    dend_30 { pt3dadd( 46.4797, -8.43157, -13.3145, 1.14 ) }
    dend_30 { pt3dadd( 47.7927, -9.61572, -13.8988, 2.05 ) }
    // Section: dend_27, id: dend_27, parent: dend_26 (entry count 74/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( 14.2476, 16.7212, -2.74885, 0.45 ) }
    dend_27 { pt3dadd( 15.715, 16.9438, -2.54291, 0.45 ) }
    dend_27 { pt3dadd( 18.0638, 17.304, -2.18997, 0.91 ) }
    dend_27 { pt3dadd( 20.0057, 17.6363, -1.89237, 0.45 ) }
    dend_27 { pt3dadd( 22.3254, 18.0539, -1.52287, 1.14 ) }
    dend_27 { pt3dadd( 25.3065, 18.7188, -1.03637, 0.68 ) }
    dend_27 { pt3dadd( 28.4413, 19.5305, -0.52258, 0.45 ) }
    dend_27 { pt3dadd( 30.2353, 20.0736, -0.227841, 0.91 ) }
    dend_27 { pt3dadd( 31.6424, 20.5928, -0.0027805, 0.91 ) }
    dend_27 { pt3dadd( 34.2076, 21.683, 0.409235, 2.05 ) }
    dend_27 { pt3dadd( 37.9507, 23.3927, 1.02364, 0.68 ) }
    dend_27 { pt3dadd( 40.1824, 24.4849, 1.38073, 1.14 ) }
    dend_27 { pt3dadd( 42.1234, 25.5267, 1.67899, 0.68 ) }
    dend_27 { pt3dadd( 43.0772, 26.0788, 1.81788, 1.59 ) }
    dend_27 { pt3dadd( 45.1412, 27.3212, 2.10911, 1.59 ) }
    // Section: dend_17, id: dend_17, parent: dend_5 (entry count 89/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -8.98217, -33.6648, -0.0394968, 0.68 ) }
    dend_17 { pt3dadd( -12.6105, -34.9257, -1.26844, 0.68 ) }
    dend_17 { pt3dadd( -16.2516, -36.0889, -2.37975, 0.68 ) }
    dend_17 { pt3dadd( -18.3261, -36.7104, -2.97638, 1.14 ) }
    dend_17 { pt3dadd( -22.3659, -37.7645, -4.16144, 0.68 ) }
    dend_17 { pt3dadd( -25.2718, -38.4279, -5.02485, 1.36 ) }
    dend_17 { pt3dadd( -27.872, -38.956, -5.82447, 0.45 ) }
    dend_17 { pt3dadd( -30.9242, -39.3813, -6.77941, 1.14 ) }
    dend_17 { pt3dadd( -33.8799, -39.6465, -7.70505, 0.23 ) }
    dend_17 { pt3dadd( -36.4898, -39.9378, -8.53067, 0.45 ) }
    dend_17 { pt3dadd( -37.7512, -40.1441, -8.95825, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_17 { pt3dadd( -40.6459, -40.8465, -10.0214, 1.14 ) }
    dend_17 { pt3dadd( -42.9806, -41.649, -10.9347, 0.23 ) }
    dend_17 { pt3dadd( -45.0375, -42.6179, -11.7712, 0.91 ) }
    dend_17 { pt3dadd( -47.8645, -44.2269, -12.8395, 0.45 ) }
    dend_17 { pt3dadd( -49.5667, -45.3156, -13.4246, 1.14 ) }
    dend_17 { pt3dadd( -51.9955, -46.9302, -14.2021, 0.23 ) }
    dend_17 { pt3dadd( -54.1393, -48.371, -14.8284, 0.91 ) }
    dend_17 { pt3dadd( -56.6109, -49.9811, -15.4864, 0.68 ) }
    dend_17 { pt3dadd( -58.9383, -51.3928, -16.0472, 0.23 ) }
    dend_17 { pt3dadd( -60.6309, -52.3055, -16.3926, 0.91 ) }
    dend_17 { pt3dadd( -63.0638, -53.4316, -16.8083, 0.23 ) }
    dend_17 { pt3dadd( -66.1263, -54.7195, -17.2756, 0.91 ) }
    dend_17 { pt3dadd( -67.8283, -55.4256, -17.5249, 0.68 ) }
    dend_17 { pt3dadd( -70.472, -56.5729, -17.9037, 0.68 ) }
    dend_17 { pt3dadd( -73.5468, -58.0332, -18.3403, 1.36 ) }
    dend_17 { pt3dadd( -76.1925, -59.3709, -18.7024, 0.23 ) }
    dend_17 { pt3dadd( -77.3549, -59.9961, -18.8631, 0.23 ) }
    dend_17 { pt3dadd( -79.5724, -61.2579, -19.1954, 1.36 ) }
    dend_17 { pt3dadd( -81.0059, -62.1727, -19.4131, 1.36 ) }
    dend_17 { pt3dadd( -82.5816, -63.3096, -19.6491, 0.23 ) }
    dend_17 { pt3dadd( -84.7343, -65.0889, -20.0335, 0.91 ) }
    dend_17 { pt3dadd( -86.6978, -66.9309, -20.4537, 0.91 ) }
    dend_17 { pt3dadd( -88.6055, -68.8477, -20.9035, 0.23 ) }
    dend_17 { pt3dadd( -90.5165, -70.8925, -21.3947, 0.91 ) }
    dend_17 { pt3dadd( -92.0132, -72.5823, -21.8308, 0.23 ) }
    dend_17 { pt3dadd( -93.6608, -74.6287, -22.3618, 0.23 ) }
    dend_17 { pt3dadd( -94.8604, -76.3728, -22.7704, 0.23 ) }
    dend_17 { pt3dadd( -95.6257, -77.585, -23.017, 1.14 ) }
    dend_17 { pt3dadd( -96.4521, -78.9261, -23.2463, 0.45 ) }
    dend_17 { pt3dadd( -97.3302, -80.3464, -23.4573, 1.59 ) }
    dend_17 { pt3dadd( -99.6595, -84.1328, -23.8849, 0.68 ) }
    dend_17 { pt3dadd( -102.167, -88.1387, -24.1791, 0.68 ) }
    dend_17 { pt3dadd( -103.831, -90.6528, -24.3085, 0.23 ) }
    dend_17 { pt3dadd( -105.425, -92.9317, -24.4039, 0.91 ) }
    dend_17 { pt3dadd( -106.533, -94.3928, -24.4589, 0.91 ) }
    dend_17 { pt3dadd( -107.42, -95.4128, -24.5022, 0.23 ) }
    dend_17 { pt3dadd( -108.783, -96.7989, -24.574, 0.91 ) }
    dend_17 { pt3dadd( -110.786, -98.6835, -24.7126, 0.23 ) }
    dend_17 { pt3dadd( -112.336, -100.115, -24.868, 0.45 ) }
    dend_17 { pt3dadd( -113.965, -101.612, -25.0699, 1.14 ) }
    dend_17 { pt3dadd( -115.455, -102.98, -25.2726, 0.23 ) }
    dend_17 { pt3dadd( -117.615, -104.968, -25.5955, 0.91 ) }
    dend_17 { pt3dadd( -119.879, -107.024, -25.9464, 0.91 ) }
    dend_17 { pt3dadd( -121.307, -108.3, -26.174, 0.23 ) }
    dend_17 { pt3dadd( -123.264, -110.005, -26.4727, 0.68 ) }
    dend_17 { pt3dadd( -124.839, -111.359, -26.6759, 0.23 ) }
    dend_17 { pt3dadd( -125.598, -111.969, -26.7554, 0.23 ) }
    dend_17 { pt3dadd( -127.756, -113.55, -26.9664, 0.91 ) }
    dend_17 { pt3dadd( -129.98, -115.095, -27.1294, 2.05 ) }
    dend_17 { pt3dadd( -132.941, -117.179, -27.2892, 0.68 ) }
    dend_17 { pt3dadd( -135.348, -118.886, -27.3607, 1.36 ) }
    dend_17 { pt3dadd( -137.811, -120.664, -27.4009, 0.45 ) }
    dend_17 { pt3dadd( -139.706, -122.061, -27.4079, 0.45 ) }
    dend_17 { pt3dadd( -141.887, -123.7, -27.4044, 0.23 ) }
    dend_17 { pt3dadd( -143.156, -124.655, -27.3949, 0.91 ) }
    dend_17 { pt3dadd( -144.667, -125.774, -27.4017, 0.23 ) }
    dend_17 { pt3dadd( -145.762, -126.563, -27.4381, 0.23 ) }
    dend_17 { pt3dadd( -148.037, -128.192, -27.5719, 1.14 ) }
    dend_17 { pt3dadd( -149.281, -129.054, -27.6712, 1.14 ) }
    dend_17 { pt3dadd( -152.171, -130.931, -27.9722, 0.23 ) }
    dend_17 { pt3dadd( -153.042, -131.452, -28.0783, 0.91 ) }
    dend_17 { pt3dadd( -154.91, -132.546, -28.345, 1.59 ) }
    dend_17 { pt3dadd( -156.374, -133.407, -28.5223, 0.45 ) }
    dend_17 { pt3dadd( -157.21, -133.892, -28.6083, 1.14 ) }
    dend_17 { pt3dadd( -160.01, -135.476, -28.8431, 0.23 ) }
    dend_17 { pt3dadd( -161.372, -136.242, -28.9476, 1.36 ) }
    dend_17 { pt3dadd( -162.853, -137.085, -29.0221, 1.36 ) }
    dend_17 { pt3dadd( -166.986, -139.508, -29.1521, 0.23 ) }
    dend_17 { pt3dadd( -168.756, -140.592, -29.1914, 1.36 ) }
    dend_17 { pt3dadd( -169.369, -141.002, -29.2018, 2.27 ) }
    dend_17 { pt3dadd( -171.885, -142.901, -29.2479, 0.23 ) }
    dend_17 { pt3dadd( -173.677, -144.295, -29.2687, 0.68 ) }
    dend_17 { pt3dadd( -174.864, -145.261, -29.2856, 0.23 ) }
    dend_17 { pt3dadd( -176.201, -146.485, -29.3459, 0.91 ) }
    dend_17 { pt3dadd( -177.306, -147.643, -29.3922, 0.23 ) }
    dend_17 { pt3dadd( -178.591, -149.194, -29.4218, 1.59 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 76/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -8.98217, -33.6648, -0.0394968, 2.27 ) }
    dend_6 { pt3dadd( -9.08009, -36.8214, -0.0413388, 2.27 ) }
    dend_6 { pt3dadd( -9.10467, -37.6139, -0.0418013, 2.27 ) }
    // Section: dend_38, id: dend_38, parent: dend_36 (entry count 79/100)
    dend_38 { pt3dclear() }
    dend_38 { pt3dadd( -123.776, 184.462, -19.5145, 0.23 ) }
    dend_38 { pt3dadd( -127.656, 185.894, -21.0966, 0.23 ) }
    dend_38 { pt3dadd( -129.742, 186.618, -21.9523, 0.91 ) }
    dend_38 { pt3dadd( -132.812, 187.591, -23.228, 0.23 ) }
    dend_38 { pt3dadd( -134.861, 188.155, -24.0459, 0.91 ) }
    dend_38 { pt3dadd( -136.342, 188.529, -24.6245, 0.23 ) }
    dend_38 { pt3dadd( -138.711, 189.134, -25.5804, 0.23 ) }
    dend_38 { pt3dadd( -139.852, 189.371, -26.0464, 0.23 ) }
    dend_38 { pt3dadd( -141.445, 189.738, -26.7562, 0.91 ) }
    dend_38 { pt3dadd( -144.02, 190.306, -28.0379, 0.23 ) }
    dend_38 { pt3dadd( -144.951, 190.495, -28.5114, 0.68 ) }
    dend_38 { pt3dadd( -146.621, 190.818, -29.3659, 0.23 ) }
    dend_38 { pt3dadd( -147.354, 190.963, -29.7264, 1.14 ) }
    dend_38 { pt3dadd( -149.581, 191.366, -30.7807, 0.23 ) }
    dend_38 { pt3dadd( -152.393, 191.831, -32.0323, 1.14 ) }
    dend_38 { pt3dadd( -154.401, 192.147, -32.8838, 0.23 ) }
    dend_38 { pt3dadd( -156.626, 192.456, -33.7269, 0.68 ) }
    dend_38 { pt3dadd( -157.891, 192.612, -34.1393, 0.23 ) }
    dend_38 { pt3dadd( -160.565, 192.989, -34.9239, 0.91 ) }
    dend_38 { pt3dadd( -164.096, 193.566, -35.8492, 0.23 ) }
    dend_38 { pt3dadd( -166.679, 194.136, -36.5024, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_38 { pt3dadd( -168.105, 194.495, -36.8794, 0.91 ) }
    dend_38 { pt3dadd( -170.203, 195.12, -37.4355, 0.23 ) }
    dend_38 { pt3dadd( -171.855, 195.704, -37.897, 0.68 ) }
    dend_38 { pt3dadd( -173.782, 196.48, -38.4405, 0.23 ) }
    dend_38 { pt3dadd( -175.481, 197.197, -38.9904, 0.23 ) }
    dend_38 { pt3dadd( -176.855, 197.71, -39.5131, 0.68 ) }
    dend_38 { pt3dadd( -178.503, 198.328, -40.207, 0.23 ) }
    dend_38 { pt3dadd( -180.718, 199.122, -41.2272, 0.23 ) }
    dend_38 { pt3dadd( -182.287, 199.598, -41.9871, 0.68 ) }
    dend_38 { pt3dadd( -183.584, 199.931, -42.6509, 0.23 ) }
    dend_38 { pt3dadd( -185.648, 200.268, -43.7933, 0.91 ) }
    // Section: dend_37, id: dend_37, parent: dend_36 (entry count 11/100)
    dend_37 { pt3dclear() }
    dend_37 { pt3dadd( -123.776, 184.462, -19.5145, 0.23 ) }
    dend_37 { pt3dadd( -125.699, 186.607, -19.3464, 0.23 ) }
    dend_37 { pt3dadd( -126.152, 187.197, -19.3041, 0.68 ) }
    dend_37 { pt3dadd( -127.415, 188.957, -19.1558, 0.23 ) }
    dend_37 { pt3dadd( -128.692, 190.865, -19.147, 0.23 ) }
    dend_37 { pt3dadd( -129.568, 192.199, -19.2113, 0.68 ) }
    dend_37 { pt3dadd( -130.665, 193.878, -19.3378, 0.23 ) }
    dend_37 { pt3dadd( -131.451, 195.149, -19.4468, 0.68 ) }
    dend_37 { pt3dadd( -133.101, 197.783, -19.773, 0.23 ) }
    dend_37 { pt3dadd( -134.59, 200.11, -20.1567, 0.91 ) }
    dend_37 { pt3dadd( -136.492, 203.012, -20.6724, 0.23 ) }
    dend_37 { pt3dadd( -137.626, 204.682, -20.995, 0.23 ) }
    dend_37 { pt3dadd( -139.012, 206.616, -21.4084, 0.91 ) }
    dend_37 { pt3dadd( -140.584, 208.748, -21.8913, 0.23 ) }
    dend_37 { pt3dadd( -141.798, 210.363, -22.269, 0.68 ) }
    // Section: dend_32, id: dend_32, parent: dend_30 (entry count 26/100)
    dend_32 { pt3dclear() }
    dend_32 { pt3dadd( 47.7927, -9.61572, -13.8988, 0.45 ) }
    dend_32 { pt3dadd( 48.65, -12.1628, -14.4879, 0.45 ) }
    dend_32 { pt3dadd( 49.1275, -13.4227, -14.7458, 0.91 ) }
    dend_32 { pt3dadd( 49.6478, -14.4415, -14.9482, 0.23 ) }
    dend_32 { pt3dadd( 50.0881, -15.2031, -15.1072, 0.91 ) }
    dend_32 { pt3dadd( 50.5693, -15.9485, -15.2679, 0.91 ) }
    dend_32 { pt3dadd( 51.9582, -17.9065, -15.6916, 0.23 ) }
    dend_32 { pt3dadd( 52.8934, -19.0701, -15.952, 1.59 ) }
    dend_32 { pt3dadd( 54.9405, -21.4811, -16.5484, 0.45 ) }
    dend_32 { pt3dadd( 56.0727, -22.7569, -16.8924, 0.45 ) }
    dend_32 { pt3dadd( 57.4785, -24.3005, -17.3442, 1.36 ) }
    dend_32 { pt3dadd( 60.1693, -27.1595, -18.2353, 0.68 ) }
    dend_32 { pt3dadd( 61.9399, -28.9782, -18.8672, 0.68 ) }
    dend_32 { pt3dadd( 63.4383, -30.4673, -19.4279, 1.14 ) }
    dend_32 { pt3dadd( 66.3399, -33.223, -20.5429, 0.45 ) }
    dend_32 { pt3dadd( 67.0479, -33.8493, -20.8136, 1.14 ) }
    dend_32 { pt3dadd( 68.4809, -35.0796, -21.3757, 0.23 ) }
    dend_32 { pt3dadd( 70.0561, -36.4096, -22.0078, 1.36 ) }
    dend_32 { pt3dadd( 70.5901, -36.8639, -22.2149, 2.05 ) }
    dend_32 { pt3dadd( 72.331, -38.4212, -22.868, 0.23 ) }
    dend_32 { pt3dadd( 74.0657, -40.1353, -23.5189, 0.23 ) }
    dend_32 { pt3dadd( 75.4935, -41.6163, -24.0405, 1.14 ) }
    dend_32 { pt3dadd( 76.9407, -43.2393, -24.5669, 0.23 ) }
    dend_32 { pt3dadd( 77.8552, -44.3591, -24.8802, 1.36 ) }
    dend_32 { pt3dadd( 78.9323, -45.8155, -25.2664, 1.59 ) }
    dend_32 { pt3dadd( 80.1371, -47.7598, -25.7318, 0.45 ) }
    // Section: dend_31, id: dend_31, parent: dend_30 (entry count 52/100)
    dend_31 { pt3dclear() }
    dend_31 { pt3dadd( 47.7927, -9.61572, -13.8988, 0.68 ) }
    dend_31 { pt3dadd( 52.5375, -10.7946, -14.6727, 0.68 ) }
    dend_31 { pt3dadd( 54.7268, -11.3068, -15.0491, 0.23 ) }
    dend_31 { pt3dadd( 56.1727, -11.6, -15.3294, 0.68 ) }
    dend_31 { pt3dadd( 58.0559, -11.9769, -15.7176, 0.23 ) }
    dend_31 { pt3dadd( 59.7619, -12.3694, -16.1162, 0.91 ) }
    dend_31 { pt3dadd( 62.9616, -13.1849, -16.9195, 0.23 ) }
    dend_31 { pt3dadd( 65.634, -13.9357, -17.5853, 1.14 ) }
    dend_31 { pt3dadd( 70.9187, -15.4492, -18.7997, 0.45 ) }
    dend_31 { pt3dadd( 72.5219, -15.8999, -19.1175, 0.91 ) }
    dend_31 { pt3dadd( 76.3568, -16.8909, -19.7246, 0.23 ) }
    dend_31 { pt3dadd( 80.1384, -17.7541, -20.1713, 0.91 ) }
    dend_31 { pt3dadd( 83.5465, -18.4079, -20.4128, 0.23 ) }
    dend_31 { pt3dadd( 87.8637, -19.0152, -20.4965, 0.91 ) }
    dend_31 { pt3dadd( 92.4095, -19.3535, -20.3218, 0.23 ) }
    dend_31 { pt3dadd( 96.0805, -19.3041, -19.9915, 0.68 ) }
    dend_31 { pt3dadd( 98.191, -19.0465, -19.668, 0.23 ) }
    dend_31 { pt3dadd( 100.261, -18.6005, -19.2925, 1.14 ) }
    dend_31 { pt3dadd( 102.376, -17.9924, -18.9076, 0.23 ) }
    dend_31 { pt3dadd( 105.49, -16.9379, -18.3333, 0.91 ) }
    dend_31 { pt3dadd( 108.14, -15.9589, -17.8896, 0.23 ) }
    dend_31 { pt3dadd( 110.381, -15.106, -17.5423, 1.14 ) }
    dend_31 { pt3dadd( 112.497, -14.3329, -17.2323, 0.23 ) }
    dend_31 { pt3dadd( 115.349, -13.289, -16.8557, 1.82 ) }
    dend_31 { pt3dadd( 116.81, -12.7654, -16.6896, 2.27 ) }
    dend_31 { pt3dadd( 121.084, -11.1769, -16.3093, 0.23 ) }
    dend_31 { pt3dadd( 122.012, -10.8692, -16.2633, 0.23 ) }
    dend_31 { pt3dadd( 125.387, -9.86075, -16.1688, 0.68 ) }
    dend_31 { pt3dadd( 128.359, -9.12813, -16.1393, 0.23 ) }
    dend_31 { pt3dadd( 130.666, -8.69113, -16.1838, 1.36 ) }
    dend_31 { pt3dadd( 134.315, -8.32164, -16.403, 0.23 ) }
    dend_31 { pt3dadd( 137.986, -8.30184, -16.7693, 0.23 ) }
    dend_31 { pt3dadd( 139.47, -8.38698, -16.966, 1.14 ) }
    dend_31 { pt3dadd( 143.077, -8.87784, -17.5699, 0.23 ) }
    dend_31 { pt3dadd( 144.869, -9.23714, -17.8792, 0.68 ) }
    dend_31 { pt3dadd( 147.799, -9.91305, -18.3735, 0.23 ) }
    dend_31 { pt3dadd( 148.577, -10.1126, -18.5086, 1.59 ) }
    dend_31 { pt3dadd( 149.781, -10.4281, -18.7232, 0.23 ) }
    dend_31 { pt3dadd( 152.184, -11.0624, -19.1555, 1.36 ) }
    dend_31 { pt3dadd( 155.635, -11.9203, -19.7329, 0.23 ) }
    dend_31 { pt3dadd( 158.84, -12.6016, -20.1753, 0.91 ) }
    // Section: dend_29, id: dend_29, parent: dend_27 (entry count 93/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 45.1412, 27.3212, 2.10911, 0.23 ) }
    dend_29 { pt3dadd( 47.9778, 28.3972, 2.13993, 0.23 ) }
    dend_29 { pt3dadd( 49.8395, 29.1637, 2.22166, 0.23 ) }
    dend_29 { pt3dadd( 51.2928, 29.7556, 2.30993, 1.36 ) }
    dend_29 { pt3dadd( 53.3034, 30.577, 2.40343, 1.36 ) }
    dend_29 { pt3dadd( 56.0585, 31.6903, 2.51243, 0.23 ) }
    dend_29 { pt3dadd( 57.3546, 32.1972, 2.55914, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_29 { pt3dadd( 59.9555, 33.2203, 2.65175, 0.91 ) }
    dend_29 { pt3dadd( 62.813, 34.23, 2.7368, 0.23 ) }
    dend_29 { pt3dadd( 65.0766, 34.9184, 2.79564, 1.59 ) }
    dend_29 { pt3dadd( 65.9141, 35.1295, 2.81005, 1.59 ) }
    dend_29 { pt3dadd( 68.8682, 35.7253, 2.84305, 0.45 ) }
    dend_29 { pt3dadd( 70.3765, 35.9696, 2.81553, 0.45 ) }
    dend_29 { pt3dadd( 72.7847, 36.2772, 2.74627, 0.23 ) }
    dend_29 { pt3dadd( 74.1678, 36.4204, 2.70824, 1.14 ) }
    dend_29 { pt3dadd( 76.1763, 36.595, 2.69608, 0.23 ) }
    dend_29 { pt3dadd( 77.4857, 36.7001, 2.69595, 0.68 ) }
    dend_29 { pt3dadd( 79.9014, 36.9221, 2.71804, 0.23 ) }
    dend_29 { pt3dadd( 82.7061, 37.2562, 2.77814, 1.14 ) }
    dend_29 { pt3dadd( 85.9188, 37.7989, 2.85534, 0.23 ) }
    dend_29 { pt3dadd( 87.8963, 38.2304, 2.90552, 0.23 ) }
    dend_29 { pt3dadd( 88.9745, 38.5376, 2.93958, 1.59 ) }
    dend_29 { pt3dadd( 91.3357, 39.35, 3.01408, 0.23 ) }
    dend_29 { pt3dadd( 92.4442, 39.8258, 3.04404, 0.23 ) }
    dend_29 { pt3dadd( 93.5556, 40.415, 3.05273, 0.68 ) }
    dend_29 { pt3dadd( 94.7507, 41.1573, 2.99336, 0.68 ) }
    dend_29 { pt3dadd( 97.2121, 42.7391, 2.75333, 0.23 ) }
    dend_29 { pt3dadd( 98.31, 43.3943, 2.61399, 0.23 ) }
    dend_29 { pt3dadd( 99.302, 43.9356, 2.46179, 1.82 ) }
    dend_29 { pt3dadd( 99.883, 44.2088, 2.37266, 1.82 ) }
    dend_29 { pt3dadd( 101.899, 44.9953, 2.09664, 0.23 ) }
    dend_29 { pt3dadd( 103.602, 45.5654, 1.88118, 0.68 ) }
    dend_29 { pt3dadd( 106.144, 46.2958, 1.61013, 0.23 ) }
    dend_29 { pt3dadd( 107.152, 46.5822, 1.52836, 0.91 ) }
    dend_29 { pt3dadd( 108.824, 47.0666, 1.41633, 0.23 ) }
    dend_29 { pt3dadd( 110.66, 47.6475, 1.31327, 1.14 ) }
    dend_29 { pt3dadd( 113.158, 48.5074, 1.22741, 0.23 ) }
    dend_29 { pt3dadd( 114.988, 49.1922, 1.14605, 1.14 ) }
    dend_29 { pt3dadd( 116.796, 49.9379, 1.06987, 0.23 ) }
    dend_29 { pt3dadd( 118.088, 50.491, 1.01724, 0.91 ) }
    dend_29 { pt3dadd( 119.828, 51.2892, 0.936288, 0.23 ) }
    dend_29 { pt3dadd( 121.648, 52.1643, 0.848565, 1.36 ) }
    dend_29 { pt3dadd( 123.106, 52.8669, 0.781805, 0.23 ) }
    dend_29 { pt3dadd( 124.863, 53.7433, 0.709211, 0.91 ) }
    dend_29 { pt3dadd( 127.762, 55.2572, 0.595676, 0.23 ) }
    dend_29 { pt3dadd( 129.401, 56.1185, 0.543755, 1.14 ) }
    dend_29 { pt3dadd( 130.302, 56.5918, 0.515323, 0.23 ) }
    dend_29 { pt3dadd( 131.26, 57.1087, 0.486394, 1.14 ) }
    dend_29 { pt3dadd( 133.102, 58.1297, 0.466008, 0.23 ) }
    dend_29 { pt3dadd( 134.499, 58.9934, 0.411635, 1.36 ) }
    // Section: dend_28, id: dend_28, parent: dend_27 (entry count 43/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 45.1412, 27.3212, 2.10911, 0.23 ) }
    dend_28 { pt3dadd( 47.0407, 28.9418, 1.94575, 0.23 ) }
    dend_28 { pt3dadd( 48.0536, 29.8183, 1.86888, 0.91 ) }
    dend_28 { pt3dadd( 49.6344, 31.1318, 1.77424, 0.23 ) }
    dend_28 { pt3dadd( 51.2581, 32.3629, 1.69756, 0.68 ) }
    dend_28 { pt3dadd( 52.9627, 33.4982, 1.6645, 0.68 ) }
    dend_28 { pt3dadd( 55.8455, 35.3397, 1.67458, 0.23 ) }
    dend_28 { pt3dadd( 57.2671, 36.1934, 1.68093, 0.91 ) }
    dend_28 { pt3dadd( 58.8319, 37.1415, 1.7047, 0.91 ) }
    dend_28 { pt3dadd( 61.76, 38.9364, 1.78145, 0.23 ) }
    dend_28 { pt3dadd( 64.5891, 40.7505, 1.86865, 0.68 ) }
    dend_28 { pt3dadd( 67.2895, 42.5352, 1.90696, 0.23 ) }
    dend_28 { pt3dadd( 69.0922, 43.7795, 1.89641, 0.91 ) }
    dend_28 { pt3dadd( 71.0461, 45.2158, 1.84184, 0.91 ) }
    dend_28 { pt3dadd( 72.7919, 46.6627, 1.71861, 0.23 ) }
    dend_28 { pt3dadd( 74.9288, 48.7545, 1.42365, 1.14 ) }
    dend_28 { pt3dadd( 76.8843, 50.958, 1.02829, 0.23 ) }
    dend_28 { pt3dadd( 77.9763, 52.3353, 0.778226, 0.23 ) }
    dend_28 { pt3dadd( 78.7658, 53.5043, 0.6142, 0.23 ) }
    dend_28 { pt3dadd( 80.4234, 56.2762, 0.309889, 0.91 ) }
    dend_28 { pt3dadd( 82.2259, 59.6047, 0.0595137, 0.45 ) }
    dend_28 { pt3dadd( 82.8542, 60.8884, 0.00632155, 0.45 ) }
    dend_28 { pt3dadd( 84.2388, 63.9815, -0.0649477, 1.59 ) }
    dend_28 { pt3dadd( 86.2218, 68.37, -0.0752617, 0.45 ) }
    dend_28 { pt3dadd( 86.9292, 69.8828, -0.0512098, 0.68 ) }
    dend_28 { pt3dadd( 87.4853, 71.0315, 0.0036366, 0.23 ) }
    dend_28 { pt3dadd( 88.5561, 73.0438, 0.108588, 0.91 ) }
    dend_28 { pt3dadd( 90.2333, 75.9391, 0.202525, 0.23 ) }
    dend_28 { pt3dadd( 91.2339, 77.5042, 0.224322, 0.23 ) }
    dend_28 { pt3dadd( 91.8147, 78.3434, 0.221954, 1.36 ) }
    dend_28 { pt3dadd( 92.5028, 79.3908, 0.227357, 1.36 ) }
    dend_28 { pt3dadd( 93.8902, 81.5862, 0.255749, 0.23 ) }
    dend_28 { pt3dadd( 95.3471, 83.9958, 0.318264, 0.68 ) }
    dend_28 { pt3dadd( 96.5978, 86.1315, 0.399914, 0.23 ) }
    dend_28 { pt3dadd( 98.4867, 89.3973, 0.542799, 1.14 ) }
    dend_28 { pt3dadd( 100.392, 92.7699, 0.69684, 0.23 ) }
    dend_28 { pt3dadd( 101.761, 95.2636, 0.823522, 0.91 ) }
    dend_28 { pt3dadd( 102.623, 96.8781, 0.92635, 1.59 ) }
    dend_28 { pt3dadd( 103.502, 98.5383, 1.02721, 0.91 ) }
    dend_28 { pt3dadd( 104.815, 101.106, 1.1828, 0.23 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 83/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -178.591, -149.194, -29.4218, 0.23 ) }
    dend_19 { pt3dadd( -179.859, -149.533, -28.7653, 0.23 ) }
    dend_19 { pt3dadd( -180.255, -149.651, -28.5684, 1.14 ) }
    dend_19 { pt3dadd( -181.633, -150.05, -27.8999, 0.23 ) }
    dend_19 { pt3dadd( -182.157, -150.214, -27.6448, 0.91 ) }
    dend_19 { pt3dadd( -183.848, -150.838, -26.8644, 0.23 ) }
    dend_19 { pt3dadd( -184.688, -151.171, -26.4698, 0.91 ) }
    dend_19 { pt3dadd( -186.437, -151.949, -25.6778, 0.23 ) }
    dend_19 { pt3dadd( -187.54, -152.454, -25.1764, 0.91 ) }
    dend_19 { pt3dadd( -188.551, -152.933, -24.7339, 0.23 ) }
    dend_19 { pt3dadd( -189.807, -153.516, -24.1657, 1.14 ) }
    dend_19 { pt3dadd( -191.493, -154.32, -23.4042, 0.23 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 95/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -178.591, -149.194, -29.4218, 0.23 ) }
    dend_18 { pt3dadd( -179.877, -152.573, -30.2996, 0.23 ) }
    dend_18 { pt3dadd( -180.736, -154.962, -30.9579, 1.59 ) }
    dend_18 { pt3dadd( -181.966, -158.541, -32.0131, 0.23 ) }
    dend_18 { pt3dadd( -182.786, -160.84, -32.8335, 1.36 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_18 { pt3dadd( -183.456, -162.514, -33.5199, 0.23 ) }
    dend_18 { pt3dadd( -184.158, -164.041, -34.2151, 0.23 ) }
    dend_18 { pt3dadd( -185.145, -165.581, -35.1057, 1.36 ) }
    dend_18 { pt3dadd( -186.471, -167.124, -36.2374, 2.27 ) }
    dend_18 { pt3dadd( -188.034, -168.49, -37.4573, 0.23 ) }
    dend_18 { pt3dadd( -189.484, -169.408, -38.4328, 1.14 ) }
    dend_18 { pt3dadd( -190.972, -170.105, -39.3147, 0.23 ) }
    dend_18 { pt3dadd( -192.778, -170.739, -40.2197, 1.14 ) }
    dend_18 { pt3dadd( -193.525, -170.883, -40.509, 1.14 ) }
    dend_18 { pt3dadd( -195.069, -171.019, -41.0001, 0.23 ) }
    dend_18 { pt3dadd( -195.793, -171.027, -41.2046, 0.23 ) }
    dend_18 { pt3dadd( -196.753, -170.866, -41.4656, 1.36 ) }
    dend_18 { pt3dadd( -197.427, -170.58, -41.6088, 1.36 ) }
    dend_18 { pt3dadd( -200.161, -169.025, -42.0582, 0.23 ) }
    dend_18 { pt3dadd( -200.724, -168.67, -42.1372, 0.23 ) }
    dend_18 { pt3dadd( -202.453, -167.457, -42.3609, 0.23 ) }
    dend_18 { pt3dadd( -204.568, -165.916, -42.6653, 1.14 ) }
    dend_18 { pt3dadd( -206.173, -164.788, -42.913, 0.23 ) }
    dend_18 { pt3dadd( -208.712, -163.35, -43.3318, 0.23 ) }
    dend_18 { pt3dadd( -210.165, -162.803, -43.6411, 1.36 ) }
    dend_18 { pt3dadd( -212.415, -162.095, -44.1348, 0.23 ) }
    dend_18 { pt3dadd( -214.356, -161.643, -44.5969, 1.14 ) }
    dend_18 { pt3dadd( -215.809, -161.399, -45.0638, 1.14 ) }
    dend_18 { pt3dadd( -219.161, -161.097, -46.3631, 0.23 ) }
    dend_18 { pt3dadd( -222.009, -161.297, -47.5737, 1.14 ) }
    // Section: dend_16, id: dend_16, parent: dend_6 (entry count 25/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -9.10467, -37.6139, -0.0418013, 0.23 ) }
    dend_16 { pt3dadd( -8.98999, -41.0213, 2.13723, 0.23 ) }
    dend_16 { pt3dadd( -9.05302, -41.9264, 2.64646, 0.23 ) }
    dend_16 { pt3dadd( -9.24808, -43.7916, 3.6854, 0.23 ) }
    dend_16 { pt3dadd( -9.39343, -45.1927, 4.40764, 1.14 ) }
    dend_16 { pt3dadd( -9.63134, -47.3914, 5.4586, 0.23 ) }
    dend_16 { pt3dadd( -9.82953, -49.1465, 6.26457, 1.14 ) }
    dend_16 { pt3dadd( -10.1888, -51.8872, 7.34135, 0.23 ) }
    dend_16 { pt3dadd( -10.5443, -54.6783, 8.39863, 0.23 ) }
    dend_16 { pt3dadd( -10.8029, -56.9988, 9.23936, 1.36 ) }
    dend_16 { pt3dadd( -11.3642, -61.6269, 10.8435, 0.23 ) }
    dend_16 { pt3dadd( -11.5538, -63.0774, 11.3043, 0.23 ) }
    dend_16 { pt3dadd( -11.8039, -65.1434, 11.9309, 0.91 ) }
    dend_16 { pt3dadd( -11.9087, -66.1712, 12.2266, 0.91 ) }
    dend_16 { pt3dadd( -12.1791, -68.9154, 12.971, 0.23 ) }
    dend_16 { pt3dadd( -12.3896, -71.06, 13.572, 0.23 ) }
    dend_16 { pt3dadd( -12.5351, -73.4497, 14.2407, 0.68 ) }
    dend_16 { pt3dadd( -12.6758, -77.9783, 15.5706, 0.23 ) }
    dend_16 { pt3dadd( -12.6644, -79.3343, 16.0032, 1.36 ) }
    dend_16 { pt3dadd( -12.6257, -80.4754, 16.3834, 1.36 ) }
    dend_16 { pt3dadd( -12.4134, -83.3754, 17.3617, 0.45 ) }
    dend_16 { pt3dadd( -12.0988, -85.799, 18.1661, 1.14 ) }
    dend_16 { pt3dadd( -11.6181, -88.578, 19.1339, 0.23 ) }
    dend_16 { pt3dadd( -11.1731, -90.6264, 19.8305, 0.45 ) }
    dend_16 { pt3dadd( -10.4823, -93.6658, 20.8909, 0.23 ) }
    dend_16 { pt3dadd( -9.92431, -96.0252, 21.703, 0.23 ) }
    dend_16 { pt3dadd( -9.43674, -98.0995, 22.4378, 0.91 ) }
    dend_16 { pt3dadd( -8.88348, -101.111, 23.5465, 0.23 ) }
    dend_16 { pt3dadd( -8.40648, -104.141, 24.6612, 0.91 ) }
    dend_16 { pt3dadd( -8.19029, -105.741, 25.239, 0.23 ) }
    dend_16 { pt3dadd( -7.92267, -108.115, 26.1152, 1.14 ) }
    dend_16 { pt3dadd( -7.83967, -111.012, 27.224, 0.23 ) }
    dend_16 { pt3dadd( -7.96768, -113.448, 28.1251, 0.91 ) }
    dend_16 { pt3dadd( -8.25536, -115.129, 28.7252, 0.23 ) }
    dend_16 { pt3dadd( -8.92953, -118.243, 29.8554, 0.23 ) }
    dend_16 { pt3dadd( -9.24306, -119.497, 30.2994, 0.91 ) }
    dend_16 { pt3dadd( -10.4747, -123.69, 31.7714, 0.23 ) }
    dend_16 { pt3dadd( -11.1276, -125.761, 32.4437, 1.14 ) }
    dend_16 { pt3dadd( -12.6411, -130.141, 33.8825, 0.23 ) }
    // Section: dend_7, id: dend_7, parent: dend_6 (entry count 64/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -9.10467, -37.6139, -0.0418013, 1.59 ) }
    dend_7 { pt3dadd( -9.2209, -39.5275, -0.107708, 1.59 ) }
    dend_7 { pt3dadd( -9.39961, -42.4696, -0.209036, 2.27 ) }
    // Section: dend_11, id: dend_11, parent: dend_7 (entry count 67/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( -9.39961, -42.4696, -0.209036, 0.23 ) }
    dend_11 { pt3dadd( -8.8603, -46.4784, 0.328567, 0.23 ) }
    dend_11 { pt3dadd( -8.4446, -49.2902, 0.693624, 0.45 ) }
    dend_11 { pt3dadd( -8.05996, -51.343, 0.946984, 1.36 ) }
    dend_11 { pt3dadd( -7.46965, -54.0401, 1.20122, 1.36 ) }
    dend_11 { pt3dadd( -6.75591, -57.0821, 1.43939, 0.91 ) }
    dend_11 { pt3dadd( -6.00364, -60.1301, 1.62569, 1.14 ) }
    dend_11 { pt3dadd( -5.54486, -61.9932, 1.69259, 1.14 ) }
    dend_11 { pt3dadd( -4.38299, -66.6571, 1.75416, 0.91 ) }
    dend_11 { pt3dadd( -3.62323, -69.7174, 1.72984, 1.14 ) }
    dend_11 { pt3dadd( -3.1411, -71.7496, 1.68159, 1.14 ) }
    dend_11 { pt3dadd( -2.57735, -74.2521, 1.59837, 0.23 ) }
    dend_11 { pt3dadd( -1.95936, -77.3563, 1.48503, 0.23 ) }
    dend_11 { pt3dadd( -1.68215, -79.0639, 1.43246, 0.23 ) }
    dend_11 { pt3dadd( -1.42109, -81.2108, 1.39163, 2.05 ) }
    dend_11 { pt3dadd( -1.05639, -84.6575, 1.40345, 1.59 ) }
    dend_11 { pt3dadd( -0.834706, -86.8188, 1.42755, 1.59 ) }
    dend_11 { pt3dadd( -0.578977, -89.2463, 1.48421, 0.45 ) }
    dend_11 { pt3dadd( -0.28472, -91.6543, 1.57611, 1.14 ) }
    dend_11 { pt3dadd( 0.0226637, -94.0753, 1.69823, 1.14 ) }
    dend_11 { pt3dadd( 0.431175, -97.5244, 1.88392, 1.59 ) }
    dend_11 { pt3dadd( 0.707998, -99.9346, 1.98695, 1.14 ) }
    dend_11 { pt3dadd( 1.11718, -104.096, 2.12069, 0.68 ) }
    dend_11 { pt3dadd( 1.32188, -106.414, 2.17594, 1.14 ) }
    dend_11 { pt3dadd( 1.56474, -109.542, 2.22953, 0.23 ) }
    dend_11 { pt3dadd( 1.75269, -112.47, 2.26528, 1.59 ) }
    dend_11 { pt3dadd( 1.84155, -115.056, 2.28565, 0.68 ) }
    dend_11 { pt3dadd( 1.88065, -116.976, 2.29596, 0.91 ) }
    dend_11 { pt3dadd( 1.90814, -119.76, 2.30705, 0.91 ) }
    dend_11 { pt3dadd( 1.95542, -123.933, 2.33191, 1.36 ) }
    dend_11 { pt3dadd( 2.05941, -128.116, 2.40194, 0.91 ) }
    dend_11 { pt3dadd( 2.32071, -133.773, 2.56138, 1.14 ) }
    dend_11 { pt3dadd( 2.48008, -136.564, 2.68453, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_11 { pt3dadd( 2.66258, -139.326, 2.82866, 1.14 ) }
    dend_11 { pt3dadd( 2.83896, -142.807, 3.02238, 0.23 ) }
    dend_11 { pt3dadd( 2.92993, -145.634, 3.18557, 0.68 ) }
    dend_11 { pt3dadd( 2.96334, -148.813, 3.37001, 0.45 ) }
    dend_11 { pt3dadd( 2.94991, -150.797, 3.4713, 2.05 ) }
    dend_11 { pt3dadd( 2.79196, -155.764, 3.68196, 0.91 ) }
    dend_11 { pt3dadd( 2.51007, -161.564, 3.88152, 0.45 ) }
    dend_11 { pt3dadd( 2.36069, -163.806, 3.93912, 0.91 ) }
    dend_11 { pt3dadd( 2.1186, -166.62, 3.97868, 0.91 ) }
    dend_11 { pt3dadd( 1.80142, -169.79, 3.98639, 0.23 ) }
    dend_11 { pt3dadd( 1.63664, -171.525, 3.97573, 0.91 ) }
    dend_11 { pt3dadd( 1.37497, -174.995, 3.97464, 0.45 ) }
    dend_11 { pt3dadd( 1.21223, -178.165, 4.02642, 1.36 ) }
    dend_11 { pt3dadd( 1.09935, -180.927, 4.11495, 0.68 ) }
    dend_11 { pt3dadd( 1.05708, -182.118, 4.17255, 1.14 ) }
    dend_11 { pt3dadd( 0.997479, -184.588, 4.33292, 0.23 ) }
    dend_11 { pt3dadd( 1.02997, -186.689, 4.49262, 0.68 ) }
    dend_11 { pt3dadd( 1.18926, -189.162, 4.69916, 0.23 ) }
    dend_11 { pt3dadd( 1.35498, -190.902, 4.84787, 0.91 ) }
    dend_11 { pt3dadd( 1.60294, -192.978, 5.02564, 0.91 ) }
    dend_11 { pt3dadd( 2.16849, -197.774, 5.39735, 0.23 ) }
    dend_11 { pt3dadd( 2.50347, -201.086, 5.61412, 1.36 ) }
    dend_11 { pt3dadd( 2.94773, -206.286, 5.94863, 0.23 ) }
    dend_11 { pt3dadd( 3.13398, -208.78, 6.10142, 1.14 ) }
    dend_11 { pt3dadd( 3.19805, -209.854, 6.16844, 1.14 ) }
    dend_11 { pt3dadd( 3.3472, -213.077, 6.39917, 0.23 ) }
    dend_11 { pt3dadd( 3.41848, -215.975, 6.62752, 0.91 ) }
    dend_11 { pt3dadd( 3.42489, -217.791, 6.77648, 1.82 ) }
    dend_11 { pt3dadd( 3.40994, -219.517, 6.94157, 1.82 ) }
    dend_11 { pt3dadd( 3.42159, -224.018, 7.41314, 0.45 ) }
    dend_11 { pt3dadd( 3.45155, -226.265, 7.67848, 1.14 ) }
    dend_11 { pt3dadd( 3.50034, -227.67, 7.8708, 1.14 ) }
    dend_11 { pt3dadd( 3.62599, -230.069, 8.21831, 0.23 ) }
    dend_11 { pt3dadd( 3.87745, -233.647, 8.73652, 0.23 ) }
    dend_11 { pt3dadd( 3.99856, -235.046, 8.94306, 1.36 ) }
    dend_11 { pt3dadd( 4.19424, -236.874, 9.1943, 1.36 ) }
    dend_11 { pt3dadd( 4.56307, -240.002, 9.55902, 0.23 ) }
    dend_11 { pt3dadd( 4.90927, -242.744, 9.87181, 0.91 ) }
    dend_11 { pt3dadd( 5.18085, -244.647, 10.0793, 0.91 ) }
    dend_11 { pt3dadd( 5.78276, -248.401, 10.4529, 0.23 ) }
    dend_11 { pt3dadd( 6.20341, -250.948, 10.6873, 0.45 ) }
    dend_11 { pt3dadd( 6.72182, -254.015, 10.9491, 0.91 ) }
    dend_11 { pt3dadd( 7.2254, -256.832, 11.1885, 0.45 ) }
    dend_11 { pt3dadd( 7.58249, -259.033, 11.3785, 1.14 ) }
    dend_11 { pt3dadd( 7.81025, -260.767, 11.5434, 1.14 ) }
    dend_11 { pt3dadd( 8.12774, -263.567, 11.8508, 0.23 ) }
    dend_11 { pt3dadd( 8.23007, -264.649, 11.9818, 1.14 ) }
    dend_11 { pt3dadd( 8.42158, -266.769, 12.2526, 1.14 ) }
    dend_11 { pt3dadd( 8.82341, -271.305, 12.8295, 0.23 ) }
    dend_11 { pt3dadd( 9.16884, -275.192, 13.3437, 0.68 ) }
    dend_11 { pt3dadd( 9.37858, -277.302, 13.6253, 1.59 ) }
    dend_11 { pt3dadd( 9.54673, -278.658, 13.8085, 2.05 ) }
    dend_11 { pt3dadd( 10.3362, -283.518, 14.4505, 0.23 ) }
    dend_11 { pt3dadd( 10.6977, -285.218, 14.6832, 1.14 ) }
    dend_11 { pt3dadd( 11.0597, -286.483, 14.8608, 1.59 ) }
    dend_11 { pt3dadd( 12.1125, -289.393, 15.2482, 0.45 ) }
    dend_11 { pt3dadd( 13.0943, -291.832, 15.6105, 0.91 ) }
    dend_11 { pt3dadd( 14.3527, -294.738, 16.1238, 0.23 ) }
    dend_11 { pt3dadd( 15.458, -297.127, 16.5984, 1.14 ) }
    dend_11 { pt3dadd( 16.1513, -298.519, 16.9049, 1.14 ) }
    dend_11 { pt3dadd( 18.4715, -302.945, 17.9429, 0.23 ) }
    dend_11 { pt3dadd( 19.968, -305.602, 18.6022, 0.23 ) }
    dend_11 { pt3dadd( 21.0006, -307.394, 19.0459, 0.68 ) }
    dend_11 { pt3dadd( 21.577, -308.379, 19.279, 0.68 ) }
    dend_11 { pt3dadd( 22.9171, -310.759, 19.7822, 0.23 ) }
    dend_11 { pt3dadd( 24.3312, -313.289, 20.2944, 1.36 ) }
    dend_11 { pt3dadd( 26.1033, -316.478, 20.8688, 0.45 ) }
    dend_11 { pt3dadd( 27.3418, -318.68, 21.1689, 1.14 ) }
    dend_11 { pt3dadd( 28.2188, -320.286, 21.3412, 0.23 ) }
    dend_11 { pt3dadd( 29.3079, -322.419, 21.5542, 2.5 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 70/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -9.39961, -42.4696, -0.209036, 0.91 ) }
    dend_8 { pt3dadd( -11.0726, -45.4118, 0.334998, 0.91 ) }
    dend_8 { pt3dadd( -12.3618, -47.679, 0.75421, 0.91 ) }
    dend_8 { pt3dadd( -13.5088, -49.6961, 1.12717, 0.68 ) }
    dend_8 { pt3dadd( -14.1853, -50.8859, 1.34718, 1.36 ) }
    dend_8 { pt3dadd( -15.1786, -52.6328, 1.67018, 1.59 ) }
    // Section: dend_15, id: dend_15, parent: dend_11 (entry count 76/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 29.3079, -322.419, 21.5542, 0.23 ) }
    dend_15 { pt3dadd( 32.4906, -322.479, 20.9528, 0.23 ) }
    dend_15 { pt3dadd( 34.7125, -322.528, 20.559, 0.91 ) }
    dend_15 { pt3dadd( 37.7035, -322.621, 20.0588, 0.23 ) }
    dend_15 { pt3dadd( 40.3688, -322.704, 19.613, 1.14 ) }
    dend_15 { pt3dadd( 43.2899, -322.795, 19.1244, 0.23 ) }
    dend_15 { pt3dadd( 44.0758, -322.82, 18.993, 0.68 ) }
    dend_15 { pt3dadd( 45.5321, -322.722, 18.8107, 0.23 ) }
    dend_15 { pt3dadd( 46.1344, -322.65, 18.7273, 0.68 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 85/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 29.3079, -322.419, 21.5542, 0.23 ) }
    dend_12 { pt3dadd( 28.3489, -326.198, 21.86, 0.23 ) }
    dend_12 { pt3dadd( 28.0849, -327.379, 21.9717, 0.91 ) }
    dend_12 { pt3dadd( 27.7682, -328.926, 22.1579, 0.45 ) }
    dend_12 { pt3dadd( 27.5856, -329.83, 22.2842, 1.36 ) }
    dend_12 { pt3dadd( 27.1231, -331.873, 22.5771, 0.23 ) }
    dend_12 { pt3dadd( 26.8377, -333.121, 22.7738, 1.14 ) }
    dend_12 { pt3dadd( 26.1144, -336.331, 23.3445, 0.23 ) }
    dend_12 { pt3dadd( 25.5971, -338.45, 23.7914, 0.23 ) }
    dend_12 { pt3dadd( 25.1463, -340.32, 24.2193, 1.59 ) }
    dend_12 { pt3dadd( 24.5932, -342.859, 24.7884, 0.91 ) }
    dend_12 { pt3dadd( 24.1501, -345.301, 25.315, 0.23 ) }
    dend_12 { pt3dadd( 23.8936, -347.255, 25.7482, 1.14 ) }
    dend_12 { pt3dadd( 23.673, -350.197, 26.3935, 0.23 ) }
    dend_12 { pt3dadd( 23.6259, -352.264, 26.8199, 0.91 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_9()
}

proc basic_shape_9() {
    dend_12 { pt3dadd( 23.692, -354.904, 27.3321, 0.23 ) }
    dend_12 { pt3dadd( 23.819, -357.026, 27.7117, 1.14 ) }
    dend_12 { pt3dadd( 23.9932, -359.467, 28.0718, 0.23 ) }
    dend_12 { pt3dadd( 24.1735, -361.543, 28.3277, 1.36 ) }
    dend_12 { pt3dadd( 24.2258, -362.136, 28.3828, 1.36 ) }
    dend_12 { pt3dadd( 24.5042, -366.098, 28.6658, 0.23 ) }
    dend_12 { pt3dadd( 24.59, -368.236, 28.7186, 0.91 ) }
    dend_12 { pt3dadd( 24.6366, -370.722, 28.6245, 0.23 ) }
    dend_12 { pt3dadd( 24.6672, -372.812, 28.4202, 1.36 ) }
    dend_12 { pt3dadd( 24.7256, -373.991, 28.2429, 1.36 ) }
    dend_12 { pt3dadd( 25.142, -378.094, 27.3931, 0.23 ) }
    dend_12 { pt3dadd( 25.635, -381.137, 26.5764, 1.14 ) }
    dend_12 { pt3dadd( 26.1007, -383.312, 25.8802, 0.23 ) }
    dend_12 { pt3dadd( 26.4325, -384.705, 25.3843, 1.36 ) }
    dend_12 { pt3dadd( 27.1855, -387.519, 24.272, 0.23 ) }
    dend_12 { pt3dadd( 27.8965, -389.739, 23.3108, 1.82 ) }
    dend_12 { pt3dadd( 28.1799, -390.367, 23.0, 1.82 ) }
    dend_12 { pt3dadd( 28.7257, -391.247, 22.5755, 0.45 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 18/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -15.1786, -52.6328, 1.67018, 0.68 ) }
    dend_10 { pt3dadd( -17.516, -53.0072, 1.25646, 0.68 ) }
    dend_10 { pt3dadd( -19.9086, -53.2373, 0.752634, 1.14 ) }
    dend_10 { pt3dadd( -22.5993, -53.5166, 0.161172, 0.23 ) }
    dend_10 { pt3dadd( -24.2982, -53.7662, -0.235128, 0.23 ) }
    dend_10 { pt3dadd( -26.0076, -54.2001, -0.594985, 1.14 ) }
    dend_10 { pt3dadd( -27.3493, -54.6079, -0.805452, 0.23 ) }
    dend_10 { pt3dadd( -28.8803, -55.0915, -0.942847, 0.45 ) }
    dend_10 { pt3dadd( -29.9521, -55.4648, -0.97954, 0.45 ) }
    dend_10 { pt3dadd( -31.5122, -55.9971, -0.993534, 1.14 ) }
    dend_10 { pt3dadd( -34.9234, -57.1309, -0.984809, 0.23 ) }
    dend_10 { pt3dadd( -37.4319, -57.8427, -0.949341, 0.91 ) }
    dend_10 { pt3dadd( -39.047, -58.1101, -0.915366, 0.91 ) }
    dend_10 { pt3dadd( -40.7355, -58.0727, -0.89744, 0.45 ) }
    dend_10 { pt3dadd( -42.635, -57.682, -0.947171, 0.45 ) }
    dend_10 { pt3dadd( -44.0742, -57.0345, -1.07297, 0.45 ) }
    dend_10 { pt3dadd( -45.4258, -55.9062, -1.38009, 0.91 ) }
    dend_10 { pt3dadd( -46.9947, -53.9695, -2.05349, 0.45 ) }
    dend_10 { pt3dadd( -47.8235, -52.5563, -2.52846, 0.45 ) }
    dend_10 { pt3dadd( -48.3362, -51.2761, -2.90821, 0.45 ) }
    dend_10 { pt3dadd( -48.7461, -49.8707, -3.14666, 0.45 ) }
    dend_10 { pt3dadd( -48.1225, -50.9306, -3.58479, 1.36 ) }
    dend_10 { pt3dadd( -47.248, -51.8329, -4.44556, 1.36 ) }
    dend_10 { pt3dadd( -46.2763, -52.9527, -5.36027, 0.23 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 42/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -15.1786, -52.6328, 1.67018, 0.23 ) }
    dend_9 { pt3dadd( -15.3708, -55.5839, 1.94015, 0.23 ) }
    dend_9 { pt3dadd( -15.4313, -56.9531, 2.0577, 0.91 ) }
    dend_9 { pt3dadd( -15.4558, -58.8005, 2.20954, 0.91 ) }
    dend_9 { pt3dadd( -15.4448, -60.959, 2.36053, 0.91 ) }
    dend_9 { pt3dadd( -15.3757, -63.3697, 2.50887, 0.23 ) }
    dend_9 { pt3dadd( -15.2378, -66.1136, 2.66348, 0.68 ) }
    dend_9 { pt3dadd( -15.0111, -69.0609, 2.81885, 0.45 ) }
    dend_9 { pt3dadd( -14.6994, -72.3483, 2.97639, 0.91 ) }
    dend_9 { pt3dadd( -14.4168, -74.9828, 3.08174, 0.68 ) }
    dend_9 { pt3dadd( -14.0822, -77.9934, 3.16658, 1.59 ) }
    dend_9 { pt3dadd( -13.4158, -84.2247, 3.34432, 0.45 ) }
    dend_9 { pt3dadd( -13.1294, -86.8784, 3.40523, 0.45 ) }
    dend_9 { pt3dadd( -12.9444, -88.671, 3.4391, 1.59 ) }
    dend_9 { pt3dadd( -12.8226, -90.1534, 3.46141, 1.59 ) }
    dend_9 { pt3dadd( -12.6553, -93.9933, 3.50715, 0.23 ) }
    dend_9 { pt3dadd( -12.6615, -96.6618, 3.53935, 0.68 ) }
    dend_9 { pt3dadd( -12.8367, -100.503, 3.59831, 0.23 ) }
    dend_9 { pt3dadd( -13.0201, -102.848, 3.64627, 1.36 ) }
    dend_9 { pt3dadd( -13.4355, -106.792, 3.7396, 0.45 ) }
    dend_9 { pt3dadd( -14.1998, -112.289, 3.90447, 0.45 ) }
    dend_9 { pt3dadd( -14.6542, -114.921, 4.00362, 0.45 ) }
    dend_9 { pt3dadd( -15.0606, -116.902, 4.08155, 1.36 ) }
    dend_9 { pt3dadd( -15.5849, -119.008, 4.19656, 1.59 ) }
    dend_9 { pt3dadd( -16.1561, -121.031, 4.34436, 0.23 ) }
    dend_9 { pt3dadd( -16.7142, -122.829, 4.5108, 0.45 ) }
    dend_9 { pt3dadd( -17.8134, -126.302, 4.86601, 0.23 ) }
    dend_9 { pt3dadd( -18.1992, -127.618, 5.01271, 0.23 ) }
    dend_9 { pt3dadd( -18.8671, -129.99, 5.33785, 1.14 ) }
    dend_9 { pt3dadd( -19.9339, -133.849, 5.96772, 0.23 ) }
    dend_9 { pt3dadd( -20.557, -136.139, 6.38424, 1.14 ) }
    dend_9 { pt3dadd( -21.2793, -138.957, 6.96121, 0.23 ) }
    dend_9 { pt3dadd( -21.9122, -141.456, 7.52324, 0.45 ) }
    dend_9 { pt3dadd( -22.4357, -143.793, 8.11539, 0.23 ) }
    dend_9 { pt3dadd( -22.8439, -145.685, 8.64861, 1.14 ) }
    dend_9 { pt3dadd( -23.0378, -146.622, 8.94156, 1.14 ) }
    dend_9 { pt3dadd( -23.524, -148.883, 9.68981, 0.23 ) }
    dend_9 { pt3dadd( -23.8107, -150.133, 10.1293, 0.91 ) }
    dend_9 { pt3dadd( -24.4411, -152.83, 11.031, 0.23 ) }
    dend_9 { pt3dadd( -24.7581, -154.567, 11.5866, 1.14 ) }
    dend_9 { pt3dadd( -25.0721, -156.765, 12.2544, 0.23 ) }
    dend_9 { pt3dadd( -25.2159, -158.331, 12.6593, 0.91 ) }
    dend_9 { pt3dadd( -25.2459, -159.182, 12.8265, 0.23 ) }
    dend_9 { pt3dadd( -25.2253, -160.38, 13.019, 0.68 ) }
    dend_9 { pt3dadd( -25.1473, -163.331, 13.3894, 0.23 ) }
    dend_9 { pt3dadd( -25.0799, -165.093, 13.5988, 0.68 ) }
    dend_9 { pt3dadd( -25.0387, -167.767, 13.8938, 0.23 ) }
    dend_9 { pt3dadd( -25.0402, -169.59, 14.1402, 0.91 ) }
    dend_9 { pt3dadd( -25.2423, -174.263, 14.8338, 0.23 ) }
    dend_9 { pt3dadd( -25.3494, -176.114, 15.1198, 0.68 ) }
    dend_9 { pt3dadd( -25.5116, -177.997, 15.4205, 0.23 ) }
    dend_9 { pt3dadd( -25.7284, -179.951, 15.7837, 0.91 ) }
    dend_9 { pt3dadd( -26.3477, -183.919, 16.6594, 0.23 ) }
    dend_9 { pt3dadd( -26.882, -186.646, 17.3257, 0.91 ) }
    // Section: dend_14, id: dend_14, parent: dend_12 (entry count 96/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 28.7257, -391.247, 22.5755, 0.23 ) }
    dend_14 { pt3dadd( 29.2545, -392.085, 22.5418, 0.23 ) }
    dend_14 { pt3dadd( 29.8977, -393.056, 22.4656, 0.91 ) }
    dend_14 { pt3dadd( 30.5128, -393.901, 22.3833, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_10()
}

proc basic_shape_10() {
    dend_14 { pt3dadd( 31.2074, -394.883, 22.2598, 0.91 ) }
    dend_14 { pt3dadd( 31.6709, -395.549, 22.1689, 0.23 ) }
    dend_14 { pt3dadd( 32.2958, -396.46, 22.017, 0.68 ) }
    dend_14 { pt3dadd( 32.8006, -397.208, 21.8509, 0.23 ) }
    dend_14 { pt3dadd( 33.3875, -398.054, 21.6094, 0.91 ) }
    dend_14 { pt3dadd( 33.9861, -398.863, 21.3138, 0.23 ) }
    dend_14 { pt3dadd( 34.4764, -399.525, 21.0263, 0.91 ) }
    dend_14 { pt3dadd( 35.152, -400.516, 20.5763, 0.23 ) }
    dend_14 { pt3dadd( 35.7324, -401.401, 20.154, 1.14 ) }
    dend_14 { pt3dadd( 36.5272, -402.682, 19.5351, 0.23 ) }
    dend_14 { pt3dadd( 37.1056, -403.638, 19.0474, 0.68 ) }
    dend_14 { pt3dadd( 37.6638, -404.51, 18.581, 0.23 ) }
    dend_14 { pt3dadd( 38.2956, -405.545, 17.9958, 1.14 ) }
    // Section: dend_13, id: dend_13, parent: dend_12 (entry count 13/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 28.7257, -391.247, 22.5755, 0.23 ) }
    dend_13 { pt3dadd( 29.3935, -392.43, 22.3221, 0.23 ) }
    dend_13 { pt3dadd( 30.2183, -393.89, 22.0092, 0.68 ) }
    dend_13 { pt3dadd( 30.6195, -394.601, 21.8569, 0.23 ) }
    dend_13 { pt3dadd( 31.6755, -396.472, 21.4563, 0.91 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_24, dend_3, dend_0, dend_34, dend_25, dend_21, dend_4, dend_2, dend_1, dend_40, dend_35, dend_33, dend_26, dend_23, dend_22, dend_20, dend_5, dend_39, dend_36, dend_30, dend_27, dend_17, dend_6, dend_38, dend_37, dend_32, dend_31, dend_29, dend_28, dend_19, dend_18, dend_16, dend_7, dend_11, dend_8, dend_15, dend_12, dend_10, dend_9, dend_14, dend_13]}
    ModelViewParmSubset_2 = new SectionList()
    dend_24 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_34 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_40 ModelViewParmSubset_2.append()
    dend_35 ModelViewParmSubset_2.append()
    dend_33 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_39 ModelViewParmSubset_2.append()
    dend_36 ModelViewParmSubset_2.append()
    dend_30 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_38 ModelViewParmSubset_2.append()
    dend_37 ModelViewParmSubset_2.append()
    dend_32 ModelViewParmSubset_2.append()
    dend_31 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_24, dend_3, dend_0, dend_34, dend_25, dend_21, dend_4, dend_2, dend_1, dend_40, dend_35, dend_33, dend_26, dend_23, dend_22, dend_20, dend_5, dend_39, dend_36, dend_30, dend_27, dend_17, dend_6, dend_38, dend_37, dend_32, dend_31, dend_29, dend_28, dend_19, dend_18, dend_16, dend_7, dend_11, dend_8, dend_15, dend_12, dend_10, dend_9, dend_14, dend_13]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_34 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_40 ModelViewParmSubset_4.append()
    dend_35 ModelViewParmSubset_4.append()
    dend_33 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_39 ModelViewParmSubset_4.append()
    dend_36 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_38 ModelViewParmSubset_4.append()
    dend_37 ModelViewParmSubset_4.append()
    dend_32 ModelViewParmSubset_4.append()
    dend_31 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_21 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_2 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_1 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_23 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_20 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_39]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_39 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_36]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_36 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_30 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_17 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_38]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_38 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_32]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_32 OneSecGrp_SectionRef_29.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_31]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_31 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_29 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_28 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_18 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_35 = new SectionList()
    dend_16 OneSecGrp_SectionRef_35.append()

    // Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_37 = new SectionList()
    dend_11 OneSecGrp_SectionRef_37.append()

    // Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_40 = new SectionList()
    dend_12 OneSecGrp_SectionRef_40.append()

    // Group: {name=OneSecGrp_SectionRef_41, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_41 = new SectionList()
    dend_10 OneSecGrp_SectionRef_41.append()

    // Group: {name=OneSecGrp_SectionRef_42, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_42 = new SectionList()
    dend_9 OneSecGrp_SectionRef_42.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_3 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_24 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_0 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_25 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_34]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_34 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_4 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_26 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_5 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_6 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_36 = new SectionList()
    dend_7 OneSecGrp_SectionRef_36.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_40]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_40 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_33]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_33 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_38 = new SectionList()
    dend_8 OneSecGrp_SectionRef_38.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_35]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_35 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_27 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_22 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_19 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_37]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_37 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_39 = new SectionList()
    dend_15 OneSecGrp_SectionRef_39.append()

    // Group: {name=OneSecGrp_SectionRef_44, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_44 = new SectionList()
    dend_13 OneSecGrp_SectionRef_44.append()

    // Group: {name=OneSecGrp_SectionRef_43, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_43 = new SectionList()
    dend_14 OneSecGrp_SectionRef_43.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36, dend_37, dend_38, dend_39, dend_40], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()
    dend_31 basal.append()
    dend_32 basal.append()
    dend_33 basal.append()
    dend_34 basal.append()
    dend_35 basal.append()
    dend_36 basal.append()
    dend_37 basal.append()
    dend_38 basal.append()
    dend_39 basal.append()
    dend_40 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_24, dend_24, dend_3, dend_3, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_34, dend_34, dend_34, dend_25, dend_25, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_4, dend_4, dend_4, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_26, dend_26, dend_26, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_5, dend_5, dend_5, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_6, dend_6, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_7, dend_7, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_8, dend_8, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_0 all.append()
    dend_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_10()
}

proc subsets_10() {
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_11()
}

proc subsets_11() {
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.999855  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.042115  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0012239999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.001693  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.386953  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 8.0E-6  // units: S cm-2
        e_pas_nml2 = -63.854015  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.5399997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.039862998  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 5.2299997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.0054459996  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.503893  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-4  // units: S cm-2
        e_pas_nml2 = -67.1289  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 4.78E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.15074699  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009017  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 4.0E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.0032419998  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 1.74E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bNAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bNAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bNAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bNAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_21 nseg = 3
    dend_2 nseg = 3
    dend_1 nseg = 3
    dend_23 nseg = 3
    dend_20 nseg = 11
    dend_39 nseg = 5
    dend_36 nseg = 9
    dend_30 nseg = 3
    dend_17 nseg = 11
    dend_38 nseg = 3
    dend_32 nseg = 3
    dend_31 nseg = 5
    dend_29 nseg = 5
    dend_28 nseg = 5
    dend_18 nseg = 3
    dend_16 nseg = 5
    dend_11 nseg = 15
    dend_12 nseg = 3
    dend_10 nseg = 3
    dend_9 nseg = 7
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bNAC219_L5_SBC_77ab259b7f_0_0


