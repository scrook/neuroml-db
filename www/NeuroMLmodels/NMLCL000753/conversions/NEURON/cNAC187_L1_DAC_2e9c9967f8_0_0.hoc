// Cell: cNAC187_L1_DAC_2e9c9967f8_0_0
/*
{
  "id" : "cNAC187_L1_DAC_2e9c9967f8_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-0.533804, -11.8261, 0.0, 2.99447", "-0.55982, -10.6383, 0.0, 4.95616", "-0.585835, -9.45036, 0.0, 7.22088", "-0.611851, -8.26247, 0.0, 8.90602", "-0.637867, -7.07457, 0.0, 10.8187", "-0.663882, -5.88668, 0.0, 12.4551", "-0.689898, -4.69878, 0.0, 13.663", "-0.715914, -3.51089, 0.0, 14.1893", "-0.741929, -2.32299, 0.0, 14.7858", "-0.767945, -1.1351, 0.0, 15.5433", "-0.793961, 0.052794, 0.0, 16.1092", "-0.819977, 1.24069, 0.0, 16.4465", "-0.845992, 2.42858, 0.0, 16.5232", "-0.872008, 3.61648, 0.0, 16.3774", "-0.898024, 4.80437, 0.0, 15.8693", "-0.924039, 5.99226, 0.0, 15.3638", "-0.950055, 7.18016, 0.0, 14.6976", "-0.976071, 8.36805, 0.0, 13.2926", "-1.00209, 9.55595, 0.0, 11.7589", "-1.0281, 10.7438, 0.0, 8.85168", "-1.05412, 11.9317, 0.0, 5.03592" ]
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-0.503777, -11.3208, -0.73, 5.01", "-0.503777, -11.3208, -0.73, 5.01", "-0.697942, -13.9061, -1.31103, 3.87", "-0.93005, -16.1235, -1.75692, 3.87", "-1.31448, -19.0062, -2.11004, 3.87", "-1.82161, -22.0194, -2.34653, 3.42", "-2.1946, -23.8737, -2.46252, 3.64", "-2.84467, -26.4622, -2.61995, 4.1", "-3.48876, -28.4261, -2.7535, 3.42", "-5.02104, -32.0598, -3.03532, 3.19", "-6.59613, -34.9029, -3.32775, 3.42", "-7.93731, -36.8006, -3.65613, 3.42", "-9.41713, -38.4898, -4.13418, 3.42", "-10.924, -39.977, -4.68119, 3.87", "-12.363, -41.2058, -5.30613, 3.87", "-14.0782, -42.3773, -6.21388, 3.64", "-15.8333, -43.3484, -7.15666, 3.42", "-17.8636, -44.3326, -8.19884, 3.42" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999974665068725,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-1.25378, 9.38917, 7.83, 3.19", "-1.25378, 9.38917, 7.83, 3.19", "-0.946346, 10.0397, 8.24138, 2.51", "-0.0729539, 11.4884, 9.23408, 2.05", "1.13213, 13.2052, 10.4867, 1.59", "2.19072, 14.5485, 11.5425, 1.59", "3.18665, 15.6933, 12.5051, 2.05", "4.65082, 17.1449, 13.8247, 1.59", "5.90624, 18.1844, 14.9252, 1.59", "7.58375, 19.3069, 16.381, 1.59", "9.0184, 20.0679, 17.6764, 1.59", "10.5578, 20.7115, 19.1549, 1.59", "11.5956, 21.087, 20.1985, 1.82", "13.1375, 21.5517, 21.8514, 1.82", "14.3507, 21.8158, 23.2082, 1.82", "15.419, 21.9002, 24.4749, 1.82", "15.9371, 21.8714, 25.1397, 1.82" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999974665068725
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "5.74622, 8.96167, 1.13, 2.28", "5.99656, 9.19068, 0.989607, 2.05", "7.77007, 10.6112, 0.121356, 1.37", "9.22944, 11.6428, -0.515389, 1.59", "10.5256, 12.4608, -0.946492, 1.59", "11.6755, 13.1235, -1.22211, 1.59", "13.6621, 14.1757, -1.58326, 1.37", "16.0635, 15.1988, -1.73715, 1.37", "17.7016, 15.6448, -1.54515, 1.59", "19.8896, 15.8819, -0.865442, 1.37", "21.2604, 15.7865, -0.180873, 1.37", "21.8594, 15.6654, 0.219442, 1.82", "23.5312, 15.0358, 1.67982, 1.37", "25.1522, 14.185, 3.38666, 1.37", "26.3929, 13.4602, 4.78741, 1.37", "27.6563, 12.7235, 6.18572, 1.59", "27.8083, 12.6449, 6.34325, 1.59", "29.158, 12.0278, 7.6674, 1.59", "30.5618, 11.4955, 8.8901, 1.37", "32.276, 10.9523, 10.209, 1.37", "33.7607, 10.5304, 11.2448, 1.37", "35.0709, 10.161, 12.0727, 1.14", "35.6776, 9.98226, 12.4285, 1.37", "37.5595, 9.38929, 13.4304, 1.14", "39.6865, 8.57423, 14.5309, 1.14", "41.0287, 7.94339, 15.2446, 1.37", "42.0652, 7.38116, 15.8307, 1.82", "43.7685, 6.37471, 16.8669, 1.14", "45.5263, 5.27471, 17.9999, 1.14", "47.0281, 4.3084, 19.0255, 1.37", "48.5717, 3.30199, 20.1471, 1.37", "50.1358, 2.26063, 21.3395, 1.59", "51.6074, 1.28589, 22.5286, 0.91", "52.8226, 0.546234, 23.5539, 0.68", "53.8328, 0.0435337, 24.3972, 1.14", "55.0363, -0.3851, 25.4105, 1.82", "55.6512, -0.516574, 25.9524, 0.91", "56.7151, -0.51721, 26.9884, 0.91", "57.863, -0.112162, 28.2485, 0.91", "58.552, 0.50157, 29.2419, 1.14", "59.1981, 1.51586, 30.3638, 1.14", "59.4315, 2.13858, 30.9218, 1.14", "59.6833, 3.27215, 31.8855, 1.14", "59.824, 4.61697, 33.0526, 0.91", "59.842, 5.85459, 34.2319, 0.91", "59.8047, 6.90866, 35.4048, 0.91", "59.8074, 7.69411, 36.5835, 0.91", "59.9645, 7.73067, 37.6129, 0.91", "60.3908, 7.21123, 39.099, 0.91", "60.8677, 6.70404, 40.153, 0.91", "61.4864, 6.14166, 41.0819, 1.37", "62.3605, 5.40416, 42.2066, 1.14", "63.208, 4.7417, 43.1694, 0.68", "63.9022, 4.2625, 43.8748, 0.68", "64.8964, 3.67218, 44.7797, 0.91", "65.5996, 3.28111, 45.3195, 0.68", "66.8844, 2.54225, 46.0904, 0.68", "67.7616, 2.0805, 46.4854, 0.68", "68.5138, 1.70823, 46.7698, 1.14", "69.4321, 1.26358, 47.0946, 1.14", "71.1017, 0.509293, 47.6511, 0.91", "72.2553, -0.0147603, 48.0154, 0.23", "73.8755, -0.726664, 48.5017, 0.23", "75.3813, -1.36688, 48.9587, 0.23", "76.9068, -2.01545, 49.4521, 0.23", "78.5355, -2.73372, 50.015, 0.23", "80.3683, -3.54724, 50.6849, 0.23", "81.2768, -3.9903, 51.0502, 0.23", "81.9866, -4.41873, 51.3591, 0.91" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999974665068725,
    "numberInternalDivisions" : 5
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "-1.05412, 11.9317, 0.0, 0.727756", "-1.38255, 26.9281, 0.0, 0.727756", "-1.71099, 41.9245, 0.0, 0.727756" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "-17.8636, -44.3326, -8.19884, 2.51", "-18.5232, -45.8165, -8.18134, 2.51", "-19.0974, -47.1081, -8.1661, 2.05", "-19.8999, -48.9134, -8.1448, 2.05" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-17.8636, -44.3326, -8.19884, 2.05", "-20.719, -43.7967, -8.88042, 2.05", "-23.7075, -43.0323, -9.62113, 2.05", "-26.7443, -42.2556, -10.3738, 2.05", "-29.1388, -41.6432, -10.9673, 2.28", "-31.6788, -40.9935, -11.5968, 2.05", "-33.748, -40.4642, -12.1097, 1.82", "-35.3087, -39.9307, -12.5665, 1.82" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "15.9371, 21.8714, 25.1397, 1.14", "14.9656, 22.7724, 25.2942, 1.14", "13.6172, 24.201, 25.2654, 1.14", "12.3249, 25.811, 25.129, 1.14", "11.2473, 27.1536, 25.0152, 1.37", "10.3398, 28.2842, 24.9194, 1.14", "9.07535, 29.8596, 24.7859, 0.91", "8.00197, 31.1394, 24.4796, 0.91", "7.22584, 32.1463, 24.0269, 1.14" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "15.9371, 21.8714, 25.1397, 1.59", "15.1374, 20.5851, 26.4221, 1.59", "14.2517, 19.3701, 27.4618, 1.14", "13.0693, 17.987, 28.6428, 1.14", "12.4591, 17.3494, 29.2145, 1.14", "11.1656, 16.1059, 30.3377, 0.68", "10.0425, 15.0262, 31.3129, 0.68", "9.26269, 14.3736, 31.7531, 0.68", "8.13203, 13.5685, 32.1191, 0.68", "6.86436, 12.8824, 32.2685, 0.91", "5.64373, 12.4336, 32.328, 1.37" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "-1.71099, 41.9245, 0.0, 0.23", "-2.03942, 56.9209, 0.0, 0.23", "-2.36786, 71.9173, 0.0, 0.23" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "-19.8999, -48.9134, -8.1448, 1.59", "-20.4431, -50.559, -8.16077, 1.59", "-21.2932, -52.7136, -8.64264, 1.59", "-22.4077, -54.7537, -9.55581, 0.91", "-24.0032, -56.8504, -11.094, 0.91", "-25.4616, -58.3976, -12.7309, 0.91", "-26.3723, -59.2674, -14.0233, 1.37", "-26.8776, -59.6781, -15.0907, 1.14", "-27.4775, -60.2036, -17.0224, 0.68", "-27.8219, -60.6523, -18.93, 0.68", "-27.8649, -61.0522, -20.3662, 0.68", "-27.3257, -61.9116, -22.2039, 0.68", "-26.547, -62.7378, -23.3338, 0.91", "-25.2751, -63.7729, -24.2919, 0.91", "-23.9268, -64.6093, -24.8996, 1.14", "-22.2485, -65.4005, -25.4062, 1.14", "-20.1649, -66.2018, -25.9224, 1.14", "-18.7375, -66.543, -26.2869, 0.91", "-16.6202, -66.7916, -27.0841, 0.91", "-14.8325, -66.8558, -28.1336, 0.91", "-13.2628, -66.8589, -29.54, 0.91", "-12.2106, -66.8821, -30.8858, 1.14", "-10.8692, -67.0482, -33.0511, 1.37", "-9.65291, -67.4572, -35.1875, 1.37", "-8.33869, -68.1679, -37.4964, 1.59", "-7.16648, -68.9694, -39.3294, 1.59", "-6.06185, -69.8216, -40.8098, 1.37", "-5.02877, -70.7084, -42.0512, 1.37", "-3.37033, -72.4052, -43.8536, 1.14", "-2.43144, -73.5369, -44.7314, 1.14", "-0.995328, -75.5671, -45.9197, 1.14", "0.0350423, -77.2129, -46.6965, 1.14", "1.0326, -78.9763, -47.3916, 0.91", "1.93532, -80.7281, -48.0206, 0.91", "3.31037, -83.4014, -48.7801, 0.68", "4.07185, -84.6212, -48.8903, 0.68", "5.07848, -85.7884, -48.5815, 0.68", "6.45639, -86.8928, -47.8903, 0.68", "7.73956, -87.7242, -47.1677, 0.68", "9.61051, -88.7093, -46.0633, 0.68", "11.9887, -89.8244, -44.5642, 0.68", "13.1004, -90.3283, -43.8666, 0.68", "15.0393, -91.2424, -42.6591, 0.68", "17.6969, -92.5747, -41.0597, 0.91", "19.5761, -93.6151, -39.9559, 0.91", "21.9652, -95.1606, -38.627, 0.91", "24.0226, -96.6381, -37.6675, 0.91", "25.5562, -97.8477, -37.0089, 1.59", "26.1916, -98.385, -36.7454, 1.14", "27.9284, -99.9206, -36.0311, 0.91", "30.0326, -101.94, -35.249, 0.68", "31.8078, -103.736, -34.6483, 0.68", "33.1529, -105.089, -34.2292, 0.68", "35.3604, -107.205, -33.5204, 0.91", "37.4933, -109.198, -32.8149, 1.14", "38.7538, -110.382, -32.3919, 1.14", "39.9081, -111.57, -32.0281, 0.91", "41.5102, -113.563, -31.5561, 1.14", "42.9608, -115.948, -31.2597, 0.91", "43.8098, -117.812, -31.1678, 0.68", "44.4022, -119.478, -31.1267, 1.14", "45.0226, -121.69, -31.0479, 1.37", "45.4555, -124.188, -30.9905, 1.37", "45.721, -126.962, -30.9095, 0.91", "45.819, -128.073, -30.8346, 0.91", "46.0183, -130.241, -30.5161, 1.37", "46.1854, -132.038, -30.1169, 1.37", "46.5248, -134.796, -29.2724, 0.91", "46.8792, -136.842, -28.4562, 0.91", "47.6942, -140.679, -26.7075, 0.91", "48.1455, -142.662, -25.6965, 0.91", "48.5062, -144.154, -24.8321, 0.91", "49.2973, -147.117, -22.9523, 0.46", "49.9345, -149.407, -21.3868, 0.46", "50.6412, -152.197, -19.3918, 0.46", "51.2545, -154.553, -17.6028, 0.46", "51.8145, -156.417, -16.0669, 0.46", "52.6246, -158.879, -14.0652, 0.46", "53.6036, -161.592, -11.9151, 0.46", "54.4442, -163.512, -10.4439, 0.68", "55.6291, -165.663, -8.82274, 1.14", "57.2885, -168.179, -7.14986, 0.68", "59.1051, -170.622, -5.68765, 0.68", "60.5557, -172.367, -4.59172, 0.68", "62.3582, -174.396, -3.28106, 0.68", "63.1356, -175.26, -2.67608, 0.68", "64.877, -177.263, -1.06668, 0.91", "66.2138, -178.793, 0.400389, 0.91", "67.9537, -180.689, 2.64087, 0.91", "69.4243, -182.278, 4.90785, 0.91", "70.6325, -183.604, 7.13648, 0.91", "72.0512, -185.146, 9.9601, 0.91", "73.0911, -186.221, 12.1931, 0.91", "74.2009, -187.309, 14.6333, 1.14", "75.962, -188.993, 18.6526, 0.46", "77.0181, -189.936, 21.3412, 0.46" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-19.8999, -48.9134, -8.1448, 0.91", "-19.4772, -48.8449, -8.98356, 0.91", "-17.8351, -48.5063, -11.5953, 0.91", "-16.4496, -48.089, -13.6057, 0.91", "-15.6125, -47.7203, -14.9489, 0.91", "-14.8273, -47.2653, -16.3415, 0.68", "-13.9598, -46.6919, -17.9855, 0.46", "-13.2335, -46.1543, -19.2945, 0.46", "-12.4383, -45.5035, -20.734, 0.46", "-11.0905, -44.2266, -23.4053, 0.68", "-10.2246, -43.2508, -25.4797, 0.68", "-9.38008, -42.1615, -27.8535, 0.91", "-9.10854, -41.8154, -28.7107, 0.91", "-8.44728, -41.226, -30.6209, 0.91", "-7.77298, -40.9518, -32.0508, 0.91", "-7.27565, -41.071, -32.6836, 0.91", "-6.5955, -41.5341, -33.2681, 0.91", "-5.50864, -42.3766, -34.0275, 0.91", "-3.66586, -43.7593, -35.4474, 0.91", "-2.1989, -44.7754, -36.7172, 0.91", "-0.504833, -45.9009, -38.2897, 0.91", "0.643379, -46.5666, -39.3816, 0.91", "1.99323, -47.1471, -40.7179, 1.37", "3.96892, -47.6635, -42.741, 0.68", "5.8441, -47.9072, -44.7216, 0.68", "6.84554, -47.9785, -45.7589, 0.68", "8.1852, -48.0671, -46.9861, 0.68", "10.3323, -48.4286, -48.8582, 0.91", "11.6709, -48.9129, -50.0225, 0.68", "12.4431, -49.3276, -50.7144, 0.68", "13.2732, -49.8739, -51.5953, 1.14", "14.0981, -50.4396, -52.7008, 1.14", "15.2083, -51.1891, -54.5213, 0.68", "16.3129, -51.8496, -56.7129, 0.68", "17.1683, -52.1842, -58.7485, 0.91", "17.9233, -52.2569, -60.9353, 0.68", "18.4852, -52.102, -62.9183, 1.14", "18.971, -51.6493, -65.367, 1.14", "19.284, -50.9939, -67.5903, 1.14", "19.4688, -50.3139, -69.3067, 1.14", "19.6901, -49.2476, -71.4657, 1.14", "19.7997, -48.7693, -72.3097, 0.68", "20.3044, -47.5105, -74.1678, 0.68", "20.8732, -46.6618, -75.0917, 0.68", "22.2076, -45.2903, -76.2839, 1.14", "23.2499, -44.4171, -77.067, 0.68", "24.3637, -43.5826, -77.9449, 0.68", "25.8316, -42.5854, -79.0601, 1.37", "27.0905, -41.7434, -80.0676, 1.37", "28.4157, -40.8033, -81.4394, 1.37", "30.135, -39.4503, -83.8137, 0.91", "31.3782, -38.4796, -85.8887, 0.91", "32.4276, -37.7786, -87.7284, 0.91", "33.2278, -37.4609, -89.1637, 1.37", "34.075, -37.3875, -90.4681, 1.37", "35.4599, -37.5494, -92.0525, 1.37", "36.7501, -37.8846, -93.118, 1.37", "38.2631, -38.3599, -94.221, 1.14", "39.6169, -38.8623, -95.2033, 1.14", "41.3995, -39.6125, -96.2098, 1.14", "42.9324, -40.2799, -96.8513, 1.14", "43.5796, -40.6022, -97.045, 1.14" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-35.3087, -39.9307, -12.5665, 1.37", "-36.8452, -39.4908, -13.6836, 1.37", "-38.5154, -39.2013, -14.8514, 1.37", "-39.9805, -39.051, -15.8754, 1.37", "-42.1786, -38.8256, -17.4115, 1.37", "-43.8192, -38.6573, -18.5581, 1.37", "-44.9668, -38.5396, -19.3601, 1.37", "-46.8839, -38.5394, -20.5623, 1.82", "-48.5826, -38.6985, -21.5205, 1.82" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-35.3087, -39.9307, -12.5665, 1.14", "-35.9828, -39.9776, -11.3976, 1.14", "-37.1928, -40.2111, -9.09992, 1.14", "-37.9272, -40.4979, -7.64792, 1.14", "-38.8234, -41.0144, -5.8682, 1.14", "-39.8454, -41.7545, -3.9436, 1.14", "-40.5207, -42.2978, -2.76779, 1.37", "-41.3647, -43.1202, -1.42873, 1.14", "-42.5515, -44.4473, 0.0634772, 0.91", "-43.6618, -45.6374, 0.954671, 1.14", "-44.8892, -46.7023, 1.28575, 0.91", "-45.8136, -47.3221, 1.21477, 0.91", "-47.2345, -48.1335, 0.853186, 1.14", "-48.9336, -49.0248, 0.170836, 1.14", "-50.865, -49.9631, -0.962382, 0.91", "-52.4404, -50.6713, -2.07656, 1.14", "-53.4955, -51.1068, -2.87047, 1.14", "-54.7055, -51.5783, -3.81757, 1.14", "-56.1739, -52.1283, -4.98011, 0.91", "-58.4369, -53.0032, -6.48954, 0.91", "-60.0682, -53.786, -7.35523, 0.91", "-61.0959, -54.3856, -7.6992, 0.91", "-62.4059, -55.3989, -7.80991, 0.91", "-63.1188, -56.1299, -7.70896, 0.91", "-64.9466, -58.3761, -7.14131, 0.91", "-66.1193, -60.0021, -6.585, 1.14", "-67.5178, -62.1672, -5.74691, 0.91", "-68.9616, -64.4622, -4.73732, 0.91", "-70.1941, -66.4109, -3.73744, 0.91", "-71.0875, -67.7574, -2.94939, 1.14", "-72.4822, -69.6004, -1.81653, 1.14", "-73.6483, -70.8587, -0.890687, 1.14", "-75.2656, -72.2673, 0.391375, 0.91", "-76.909, -73.3917, 1.77164, 1.14", "-77.8427, -73.9295, 2.63804, 1.14", "-80.1131, -75.0618, 4.97958, 0.91", "-81.446, -75.6297, 6.48703, 1.14", "-82.5615, -76.0754, 7.82653, 1.37", "-83.9822, -76.6948, 9.65055, 1.37", "-85.3184, -77.3793, 11.4973, 1.37", "-86.6481, -78.2382, 13.4642, 1.37", "-87.7999, -79.2475, 15.3613, 1.37", "-88.8732, -80.4709, 17.1373, 1.37", "-89.6635, -81.5742, 18.4184, 1.37", "-90.3664, -82.7744, 19.5815, 1.14", "-90.884, -83.8803, 20.5019, 0.68", "-91.6675, -85.9218, 21.9947, 0.46", "-92.1444, -87.5019, 23.0435, 0.68", "-92.5427, -89.2923, 24.1734, 0.91", "-92.8988, -91.3177, 25.3564, 0.91", "-93.1476, -92.9846, 26.2504, 0.91", "-93.3604, -94.4367, 26.9445, 0.91", "-93.6364, -96.4138, 27.6379, 1.14", "-93.8896, -98.1199, 28.0017, 1.37", "-94.1439, -99.6357, 28.1517, 1.14", "-94.3882, -101.077, 28.1629, 0.91", "-94.6591, -102.866, 28.0898, 0.91", "-94.9398, -105.28, 27.9994, 1.14", "-95.0927, -107.207, 27.9893, 0.91", "-95.1424, -108.973, 28.0646, 0.91", "-95.0191, -111.296, 28.3578, 1.14", "-94.7972, -112.898, 28.6692, 1.14", "-94.3821, -114.879, 29.1893, 0.68", "-93.8432, -116.965, 29.8321, 0.91", "-93.34, -118.779, 30.4849, 0.91", "-92.7176, -121.065, 31.3191, 0.91", "-92.185, -123.127, 31.9726, 1.37", "-91.5986, -125.557, 32.5541, 0.68", "-90.9134, -128.798, 33.068, 0.68", "-90.5347, -130.968, 33.2142, 1.37", "-90.1387, -133.848, 33.2472, 0.91", "-89.8635, -136.585, 33.1932, 0.91", "-89.7116, -138.606, 33.1874, 1.14", "-89.5963, -140.425, 33.2214, 1.14", "-89.3261, -145.006, 33.4335, 0.68", "-89.2093, -146.938, 33.5707, 0.68", "-89.082, -149.13, 33.9153, 0.91", "-89.023, -150.62, 34.3516, 0.68", "-89.0144, -152.211, 35.0308, 0.68", "-89.04, -153.068, 35.5286, 0.68", "-89.1758, -154.025, 36.3047, 0.91", "-89.5017, -155.355, 37.5255, 1.37", "-89.9299, -156.65, 38.7982, 0.91", "-90.5167, -158.103, 40.2834, 0.68", "-91.1593, -159.399, 41.6746, 0.68", "-91.784, -160.539, 42.9035, 0.68", "-92.4581, -161.692, 44.1017, 0.91", "-93.1431, -162.691, 45.0547, 0.91", "-93.8211, -163.564, 45.8253, 0.91", "-94.8624, -164.689, 46.7763, 0.68", "-95.7215, -165.532, 47.4094, 0.68", "-96.6892, -166.444, 47.9989, 0.91", "-98.5088, -168.214, 48.8747, 0.68", "-99.3139, -169.028, 49.2083, 0.68", "-101.296, -171.133, 49.9225, 0.91", "-102.557, -172.581, 50.3297, 1.37", "-104.015, -174.384, 50.7506, 0.91", "-105.707, -176.706, 51.3199, 0.46", "-107.182, -178.944, 51.8283, 0.46", "-107.773, -179.894, 52.0793, 0.46", "-108.698, -181.496, 52.5897, 1.14", "-109.404, -182.783, 53.0977, 1.14", "-110.708, -185.138, 54.1058, 1.14", "-111.659, -186.844, 54.7419, 0.91", "-113.016, -189.392, 55.3016, 0.46", "-113.766, -190.862, 55.4644, 0.68", "-114.978, -193.24, 55.3749, 0.68", "-116.101, -195.469, 54.9215, 0.68", "-117.496, -198.263, 53.9168, 0.68", "-118.517, -200.324, 52.9415, 0.68", "-119.059, -201.444, 52.2712, 0.68", "-120.022, -203.521, 50.9472, 0.68", "-120.957, -205.467, 49.7005, 0.68", "-121.388, -206.324, 49.208, 0.68", "-122.245, -207.852, 48.5072, 0.68", "-123.165, -209.341, 47.9348, 0.68", "-124.329, -211.051, 47.3802, 0.68", "-125.514, -212.61, 47.0464, 0.68", "-126.363, -213.645, 46.9099, 0.68", "-127.252, -214.713, 46.776, 0.68", "-127.975, -215.588, 46.6799, 0.91", "-129.753, -217.623, 46.4914, 0.46", "-131.076, -219.122, 46.3208, 0.46", "-132.16, -220.461, 46.1404, 0.46", "-133.725, -222.525, 45.8152, 0.46", "-134.743, -223.895, 45.5472, 0.91" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "5.64373, 12.4336, 32.328, 0.68", "4.57325, 12.5781, 32.328, 0.68", "2.98339, 12.7926, 32.328, 0.68", "2.24535, 12.8922, 32.328, 1.59" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "5.64373, 12.4336, 32.328, 1.14", "5.36433, 13.4471, 32.3562, 1.14", "4.43961, 14.9599, 31.9766, 0.91", "3.60396, 15.438, 31.2191, 0.91", "3.10342, 15.7245, 30.7654, 1.37", "1.93364, 16.3938, 29.7051, 0.91", "1.28242, 16.7665, 29.1148, 1.37", "-0.237826, 17.0519, 27.5762, 1.37", "-1.65372, 17.0254, 26.0224, 1.37" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "77.0181, -189.936, 21.3412, 0.46", "76.2624, -190.776, 23.996, 0.46", "75.5408, -191.561, 26.5378, 0.46", "74.5978, -192.527, 29.8885, 0.46", "73.9516, -193.069, 32.1668, 0.46", "73.2174, -193.584, 34.7769, 0.46", "72.3394, -194.123, 37.6328, 0.46", "71.7993, -194.388, 39.3455, 0.46", "71.096, -194.691, 41.465, 0.46", "70.1246, -195.001, 44.2883, 0.68", "69.2666, -195.156, 46.8169, 0.68", "68.5402, -195.183, 49.0251, 0.68" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "77.0181, -189.936, 21.3412, 0.68", "77.5985, -189.992, 22.1038, 0.68", "79.5019, -190.148, 24.948, 0.91", "80.5524, -190.243, 26.5472, 0.91", "81.5917, -190.345, 28.1401, 1.14", "83.1549, -190.515, 30.4233, 0.68", "84.4171, -190.686, 32.2841, 0.68", "86.3877, -190.966, 35.241, 0.68", "88.1024, -191.224, 37.8132, 0.46", "88.9793, -191.36, 39.116, 0.46", "89.8854, -191.521, 40.4461, 0.91", "91.5165, -191.825, 42.687, 0.91", "92.4506, -191.988, 43.7995, 1.14", "93.2212, -192.095, 44.5308, 1.14", "93.9866, -192.207, 45.1008, 0.23", "95.3849, -192.401, 45.8679, 1.37", "96.0564, -192.49, 46.0996, 0.68", "97.8676, -192.748, 46.4789, 0.68", "99.5216, -193.029, 46.7637, 1.14", "101.711, -193.462, 47.1402, 0.46", "102.581, -193.63, 47.3399, 0.46", "104.283, -193.933, 47.7803, 0.68", "106.725, -194.303, 48.4841, 0.68", "109.26, -194.631, 49.4104, 0.68", "110.35, -194.736, 49.93, 0.68", "112.196, -194.859, 51.0306, 0.68", "113.84, -194.94, 52.0945, 0.23", "115.241, -194.964, 53.0159, 0.68", "117.37, -194.942, 54.3436, 0.46", "118.929, -194.884, 55.3272, 1.14", "120.698, -194.777, 56.3725, 0.68", "121.719, -194.736, 56.9567, 0.68", "123.571, -194.664, 58.0498, 0.91", "124.51, -194.658, 58.5855, 0.91", "126.396, -194.732, 59.5095, 0.46", "127.44, -194.834, 59.9609, 0.91", "129.353, -195.146, 60.6525, 1.14", "131.385, -195.586, 61.3225, 0.91", "133.035, -196.002, 61.8254, 0.23", "134.471, -196.397, 62.194, 0.23", "135.632, -196.74, 62.4747, 0.91", "137.552, -197.248, 62.9811, 0.23", "138.407, -197.395, 63.2254, 0.68", "140.19, -197.558, 63.8203, 0.23", "140.7, -197.546, 64.0278, 0.91", "142.773, -197.221, 65.1283, 1.14", "144.323, -196.814, 66.0836, 1.37", "145.693, -196.344, 67.0018, 0.23", "146.878, -195.893, 67.7533, 0.23", "147.679, -195.573, 68.2099, 0.23", "149.559, -194.804, 69.3535, 0.23", "150.099, -194.563, 69.7227, 0.23", "150.915, -194.21, 70.3089, 0.68", "151.881, -193.823, 71.0479, 1.14", "152.891, -193.435, 71.9157, 0.91", "155.21, -192.687, 74.0132, 0.91", "156.66, -192.236, 75.5117, 1.14" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "43.5796, -40.6022, -97.045, 0.91", "44.4853, -42.3118, -97.6163, 0.91", "45.4347, -43.9406, -98.3448, 0.91", "46.1205, -45.025, -99.0405, 0.68", "47.0967, -46.3111, -100.138, 0.68", "48.0255, -47.3391, -101.071, 0.68", "48.7162, -47.9651, -101.736, 0.68", "50.0244, -48.8379, -103.092, 0.68", "51.7374, -49.6147, -104.779, 0.68", "53.3178, -50.0883, -106.352, 0.68", "54.749, -50.2972, -107.718, 0.68", "56.6905, -50.2819, -109.599, 0.68", "58.0991, -50.0446, -110.991, 0.68", "58.7321, -49.8469, -111.605, 0.23", "60.0565, -49.3511, -112.878, 0.23", "61.2004, -48.9101, -114.042, 0.46", "62.2209, -48.5557, -115.068, 0.46", "63.7558, -48.1265, -116.388, 0.46", "65.4523, -47.9766, -117.628, 0.46", "66.9905, -48.1322, -118.602, 0.46", "67.4919, -48.257, -118.838, 0.91", "69.0767, -48.7482, -119.596, 0.46", "69.8043, -49.0048, -119.958, 0.46", "72.2411, -49.9385, -121.159, 0.46", "73.2765, -50.3784, -121.703, 0.91", "75.9135, -51.5002, -123.185, 0.68", "78.2475, -52.4708, -124.622, 1.37", "79.4891, -52.9886, -125.5, 1.37", "80.3893, -53.3327, -126.176, 0.91", "81.3088, -53.6607, -126.943, 0.91" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "43.5796, -40.6022, -97.045, 0.91", "45.1352, -40.0276, -97.7904, 0.91", "46.6012, -39.2964, -98.4995, 0.68", "47.3621, -38.8624, -98.8547, 0.68", "49.3298, -37.6543, -99.6783, 0.68", "50.5655, -36.8891, -100.14, 0.46", "51.4813, -36.3089, -100.497, 0.46", "52.7364, -35.355, -101.039, 0.46", "53.2355, -34.9397, -101.227, 0.91", "54.4023, -33.9889, -101.653, 1.37", "55.115, -33.4291, -101.877, 0.68", "56.6932, -32.3372, -102.289, 0.68", "57.7222, -31.7382, -102.625, 0.91", "59.6461, -30.725, -103.445, 0.91", "61.0769, -30.0282, -104.2, 0.46", "62.362, -29.4346, -104.963, 0.46", "64.3046, -28.616, -106.305, 0.46", "66.4638, -27.7808, -107.923, 0.68", "67.6715, -27.3296, -108.929, 0.68", "68.9407, -26.8738, -110.147, 0.68", "69.8806, -26.4832, -111.103, 0.91", "71.4787, -25.761, -112.845, 0.91", "71.9775, -25.4929, -113.4, 0.91", "72.4437, -25.1761, -113.864, 0.91", "74.2982, -23.7583, -115.419, 0.91", "75.2691, -22.9536, -116.126, 0.91", "76.2734, -22.1295, -116.93, 0.91", "77.5189, -21.0951, -117.91, 0.91", "78.2284, -20.539, -118.516, 0.91", "79.7221, -19.4056, -119.792, 0.91", "80.3418, -18.9859, -120.289, 0.91", "83.0957, -17.5483, -122.325, 1.14", "83.861, -17.2539, -122.807, 1.14", "86.2046, -16.6178, -124.05, 0.91", "87.4257, -16.3659, -124.625, 0.91", "89.649, -15.9991, -125.514, 0.91", "91.1857, -15.818, -125.993, 0.91", "93.3783, -15.6741, -126.512, 0.91", "95.0209, -15.6817, -126.896, 0.91", "96.2618, -15.7561, -127.185, 0.91", "98.1176, -15.8849, -127.69, 0.68", "99.8201, -15.9883, -128.219, 0.68", "101.284, -16.1315, -128.736, 0.68", "102.203, -16.2653, -129.07, 0.68", "103.107, -16.3896, -129.435, 0.68", "104.324, -16.4528, -129.85, 0.68", "105.041, -16.4079, -130.043, 0.68", "106.332, -16.2115, -130.284, 0.68", "107.907, -15.9092, -130.502, 0.68", "109.464, -15.6335, -130.808, 0.68", "111.39, -15.3874, -131.344, 0.68", "112.277, -15.2959, -131.676, 0.68", "113.421, -15.1864, -132.175, 0.68", "114.418, -15.1476, -132.652, 0.68", "116.741, -15.3148, -133.777, 0.46", "118.503, -15.6707, -134.537, 0.46", "119.688, -16.0006, -135.012, 0.46", "120.687, -16.3123, -135.32, 0.46", "122.329, -16.806, -135.62, 0.68", "124.198, -17.3048, -135.742, 0.68", "126.575, -17.7771, -135.594, 0.68", "128.36, -17.9966, -135.399, 0.46", "131.206, -18.1278, -135.037, 0.46", "133.662, -18.0293, -134.732, 0.46", "136.714, -17.6798, -134.394, 0.46", "139.278, -17.249, -134.191, 0.23", "141.176, -16.8437, -134.107, 0.23", "142.113, -16.6532, -134.107, 0.23", "143.572, -16.4446, -134.156, 0.23", "145.132, -16.3902, -134.249, 0.23", "148.055, -16.4582, -134.394, 0.23", "148.954, -16.5052, -134.424, 0.23", "150.647, -16.6454, -134.407, 0.23", "153.021, -16.9089, -134.341, 0.46", "155.756, -17.255, -134.105, 0.46", "157.343, -17.4841, -133.896, 0.46", "160.223, -17.9284, -133.433, 0.46", "162.498, -18.2664, -133.134, 0.46", "164.682, -18.5015, -132.924, 0.46", "166.845, -18.6896, -132.83, 0.46", "168.309, -18.8616, -132.841, 0.46", "170.113, -19.0974, -132.926, 0.46", "172.584, -19.3691, -133.212, 0.46", "174.607, -19.5307, -133.631, 0.46", "176.549, -19.6566, -134.137, 0.46", "179.416, -19.8743, -134.943, 0.46", "181.821, -20.0747, -135.588, 0.68", "184.736, -20.3626, -136.322, 0.46", "187.787, -20.7668, -137.018, 0.46", "190.045, -21.1655, -137.515, 0.68", "192.327, -21.7006, -137.967, 0.46", "194.121, -22.2646, -138.266, 0.46", "194.783, -22.5416, -138.345, 0.68", "196.795, -23.6163, -138.426, 0.68", "198.827, -24.9033, -138.382, 0.68", "200.845, -26.4372, -138.354, 0.68", "201.473, -26.9894, -138.356, 0.68", "202.836, -28.328, -138.356, 0.68", "203.531, -28.9906, -138.356, 2.05" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-48.5826, -38.6985, -21.5205, 1.14", "-49.9211, -40.2557, -20.1753, 1.14", "-51.0272, -41.5205, -19.0183, 0.91", "-52.1378, -42.6238, -17.8798, 0.91", "-53.1988, -43.5918, -16.8694, 0.91", "-54.0417, -44.2937, -16.1533, 0.46", "-55.5939, -45.4847, -15.0204, 0.46", "-57.3205, -46.6825, -14.0183, 0.46", "-58.826, -47.5863, -13.2773, 0.68", "-60.1821, -48.253, -12.703, 0.68", "-61.7914, -48.8721, -12.0978, 0.68", "-64.0849, -49.5336, -11.3263, 0.46", "-66.2745, -50.0319, -10.7338, 0.68", "-68.4607, -50.3886, -10.1937, 0.68", "-69.2944, -50.4818, -9.98236, 0.68", "-70.7038, -50.5359, -9.60873, 0.68", "-73.078, -50.4577, -8.94346, 0.68", "-74.4506, -50.329, -8.54038, 0.68", "-77.2052, -50.0142, -7.79622, 0.68", "-79.7766, -49.7567, -7.18098, 0.91", "-81.3417, -49.6514, -6.7854, 0.91", "-83.6441, -49.5752, -6.19784, 0.91", "-85.5632, -49.5594, -5.68068, 0.91", "-86.8483, -49.585, -5.3329, 0.91", "-88.4741, -49.7007, -4.90733, 0.68", "-90.6062, -49.9573, -4.43739, 0.68", "-92.3843, -50.3029, -4.121, 1.14", "-93.9199, -50.6845, -3.92672, 0.91", "-96.6938, -51.4212, -3.68945, 0.91", "-98.6816, -51.9407, -3.56323, 1.14", "-100.601, -52.4351, -3.56555, 1.14", "-103.033, -53.0523, -3.72694, 1.14", "-104.653, -53.4954, -3.90563, 0.68", "-106.759, -54.114, -4.23488, 0.68", "-108.145, -54.5483, -4.48835, 1.14", "-110.024, -55.1024, -4.84279, 1.14", "-111.567, -55.5418, -5.12335, 0.68", "-113.671, -56.1333, -5.56509, 0.68", "-115.277, -56.6166, -5.91633, 0.68", "-116.8, -57.0752, -6.2363, 0.91", "-119.007, -57.7413, -6.64003, 0.91", "-121.339, -58.4301, -6.98399, 0.68", "-122.959, -58.9039, -7.18496, 0.68", "-124.718, -59.4168, -7.2924, 1.14", "-126.943, -60.1349, -7.27753, 0.68", "-128.254, -60.6258, -7.16715, 0.68", "-129.111, -61.0003, -7.02359, 1.37", "-130.888, -61.851, -6.52401, 1.37", "-132.387, -62.6461, -6.00047, 0.91", "-133.833, -63.5319, -5.39061, 0.68", "-135.499, -64.6551, -4.62263, 0.68", "-136.508, -65.3707, -4.12597, 0.68", "-137.837, -66.3454, -3.47146, 0.91", "-138.858, -67.1092, -3.02054, 0.68", "-140.809, -68.555, -2.35452, 0.68", "-141.722, -69.216, -2.10094, 0.68", "-142.858, -70.024, -1.85343, 0.68", "-144.322, -71.0371, -1.63268, 0.91", "-145.744, -71.9677, -1.53646, 0.68", "-147.302, -72.8927, -1.53935, 1.14", "-148.271, -73.4174, -1.63561, 1.14", "-149.882, -74.2671, -1.86619, 0.68", "-151.877, -75.2654, -2.21186, 0.68", "-153.529, -76.0732, -2.50296, 0.46", "-155.781, -77.1943, -2.90898, 0.46", "-157.584, -78.1327, -3.2849, 0.68", "-159.344, -79.0883, -3.68392, 1.14", "-161.068, -80.1066, -4.0989, 0.91", "-162.166, -80.8283, -4.36715, 0.68", "-163.2, -81.5282, -4.58923, 0.68", "-164.488, -82.3909, -4.79778, 1.14", "-165.436, -82.9891, -4.89516, 1.14", "-166.798, -83.7907, -5.00907, 0.68", "-168.187, -84.5483, -5.08928, 0.68", "-169.917, -85.4449, -5.1263, 0.68", "-171.749, -86.3645, -5.15612, 0.68", "-172.977, -86.9835, -5.17042, 0.68", "-174.185, -87.6092, -5.2089, 0.91", "-175.801, -88.4433, -5.30689, 0.91", "-177.843, -89.5567, -5.4847, 0.68", "-179.726, -90.7425, -5.74962, 0.46", "-180.624, -91.377, -5.93094, 0.91", "-181.292, -91.8505, -6.08762, 0.91", "-182.66, -92.8299, -6.44989, 0.46", "-183.727, -93.5847, -6.78141, 0.46", "-185.532, -94.8033, -7.36071, 0.46", "-186.992, -95.833, -7.80849, 0.46", "-189.231, -97.5635, -8.47974, 0.68", "-190.171, -98.3716, -8.74767, 1.14", "-192.111, -100.254, -9.26145, 1.14", "-193.447, -101.696, -9.58716, 0.91", "-194.582, -103.03, -9.82074, 0.68", "-195.794, -104.708, -10.0339, 1.14", "-196.542, -105.901, -10.138, 0.91", "-197.616, -107.749, -10.2675, 0.68", "-198.29, -108.984, -10.3266, 0.68", "-199.181, -110.606, -10.4118, 0.68", "-200.645, -113.14, -10.5539, 1.14", "-201.894, -115.278, -10.6399, 0.68", "-203.113, -117.365, -10.6889, 0.23", "-203.757, -118.478, -10.7302, 0.23", "-204.479, -119.711, -10.706, 1.37", "-205.327, -121.202, -10.5912, 0.46", "-206.135, -122.706, -10.4065, 0.46", "-206.899, -124.256, -10.1594, 0.23", "-207.771, -126.098, -9.7399, 0.23", "-209.004, -128.927, -9.04206, 0.91", "-209.681, -130.629, -8.60691, 0.91", "-210.698, -133.323, -7.93872, 0.68", "-211.315, -134.951, -7.50544, 1.14", "-211.985, -136.687, -7.01029, 0.68", "-212.65, -138.402, -6.51535, 0.68", "-213.51, -140.423, -5.97486, 0.68", "-214.503, -142.496, -5.27834, 0.68", "-215.784, -144.637, -4.38363, 0.68", "-216.517, -145.644, -3.86793, 1.14", "-217.369, -146.619, -3.26086, 1.14", "-219.026, -148.275, -2.00617, 0.68", "-220.397, -149.463, -0.974847, 0.68", "-222.248, -150.918, 0.354829, 0.68", "-223.722, -152.036, 1.36553, 0.68", "-225.358, -153.225, 2.41833, 0.68", "-226.388, -153.95, 3.03814, 1.14", "-227.731, -154.939, 3.78462, 0.91", "-228.846, -155.85, 4.44225, 0.46", "-229.948, -156.896, 5.15972, 0.46", "-231.198, -158.185, 6.06922, 0.91", "-232.535, -159.689, 7.22983, 0.91", "-234.235, -161.672, 8.97744, 0.68", "-235.446, -163.192, 10.4316, 0.68", "-236.022, -163.951, 11.2066, 0.91", "-237.086, -165.464, 12.7429, 0.68", "-238.012, -166.895, 14.1796, 0.91", "-239.371, -169.041, 16.124, 0.91", "-240.299, -170.515, 17.2946, 0.91", "-241.385, -172.112, 18.3955, 0.91", "-242.647, -173.847, 19.4881, 0.91", "-243.231, -174.631, 19.8826, 0.91", "-244.719, -176.602, 20.6351, 0.91", "-245.577, -177.882, 20.9255, 0.91", "-246.556, -179.529, 21.168, 0.91", "-247.989, -182.228, 21.527, 0.68", "-249.075, -184.54, 21.9413, 0.68", "-250.136, -187.172, 22.569, 0.46", "-251.326, -190.597, 23.6103, 0.46", "-252.215, -193.717, 24.7234, 0.46", "-252.982, -197.286, 26.258, 0.46", "-253.34, -199.823, 27.6503, 0.46", "-253.495, -202.32, 29.4208, 0.46", "-253.524, -205.023, 31.8079, 0.46", "-253.529, -207.448, 34.3551, 0.46", "-253.523, -209.738, 37.0237, 0.46", "-253.555, -212.287, 40.1402, 0.46", "-253.793, -215.234, 43.8569, 0.46", "-254.166, -217.202, 46.3729, 0.46", "-254.898, -219.431, 49.1889, 0.46", "-255.722, -220.883, 50.9645, 0.68", "-256.599, -221.956, 52.2215, 0.46", "-258.435, -223.673, 54.1499, 0.46", "-260.854, -225.43, 56.1663, 0.46", "-261.836, -226.035, 56.8735, 0.68", "-264.85, -227.537, 58.9524, 0.23", "-266.585, -228.227, 60.1427, 0.23", "-267.137, -228.389, 60.5264, 0.46", "-269.192, -228.837, 61.9355, 0.23", "-270.35, -228.985, 62.7645, 0.68", "-272.942, -229.19, 64.6406, 0.23", "-273.925, -229.199, 65.2945, 0.23", "-275.406, -229.179, 66.2403, 0.68" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 17
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-48.5826, -38.6985, -21.5205, 0.91", "-49.0737, -38.8272, -22.0024, 0.91", "-50.0682, -38.9256, -22.8342, 0.91", "-51.9617, -38.8971, -24.418, 0.91", "-53.5336, -38.7867, -25.6464, 0.68", "-55.6364, -38.6391, -27.2898, 0.68", "-56.7073, -38.5639, -28.1268, 0.68", "-58.1033, -38.4614, -29.165, 0.91", "-60.0708, -38.1898, -30.4062, 0.91", "-61.1746, -37.8443, -30.951, 0.91" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "156.66, -192.236, 75.5117, 0.46", "157.853, -191.178, 75.4917, 0.46", "158.544, -190.551, 75.483, 0.46", "159.745, -189.546, 75.6362, 0.46", "160.763, -188.747, 75.8624, 0.46", "162.493, -187.39, 76.2466, 0.46", "163.705, -186.438, 76.5158, 0.46", "165.103, -185.405, 76.8847, 0.46", "167.245, -183.858, 77.5406, 0.46", "168.603, -182.898, 78.0469, 0.46" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "156.66, -192.236, 75.5117, 0.68", "156.82, -192.086, 76.6958, 0.68", "156.938, -191.925, 77.823, 0.68", "157.197, -191.658, 79.5977, 0.68", "157.586, -191.369, 81.7265, 0.68", "157.899, -191.165, 83.6446, 0.68", "158.177, -190.949, 85.7056, 0.68", "158.279, -190.764, 87.1949, 0.68", "158.268, -190.407, 89.705, 0.68", "158.259, -190.228, 90.9822, 0.68", "158.337, -189.882, 92.96, 0.68", "158.421, -189.653, 93.9805, 1.14", "158.712, -189.112, 96.0863, 0.91", "159.018, -188.661, 97.7973, 0.91", "159.66, -188.102, 99.8719, 0.91", "159.976, -187.925, 100.533, 1.14", "160.442, -187.769, 101.276, 1.14", "161.554, -187.597, 102.854, 0.68", "162.782, -187.595, 104.372, 0.68", "164.242, -187.672, 106.066, 1.37", "165.577, -187.763, 107.692, 0.68", "166.555, -187.877, 108.914, 0.68", "167.274, -187.999, 109.796, 0.68", "168.135, -188.149, 110.806, 0.68", "169.349, -188.327, 112.164, 0.68", "170.63, -188.448, 113.57, 0.23", "172.024, -188.447, 115.039, 0.23", "172.645, -188.41, 115.677, 0.68", "174.439, -188.22, 117.532, 0.23", "174.904, -188.158, 118.036, 0.91", "176.493, -187.991, 119.697, 0.68", "178.118, -187.737, 121.29, 0.68" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "81.3088, -53.6607, -126.943, 0.23", "79.9705, -56.1159, -125.641, 0.23", "79.1617, -57.5999, -124.854, 0.23", "78.4892, -58.8337, -124.2, 0.23", "77.7317, -60.2235, -123.463, 0.23" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "81.3088, -53.6607, -126.943, 0.46", "82.6723, -54.6679, -127.341, 0.46", "83.9915, -55.6936, -127.777, 0.46", "85.9218, -57.2194, -128.79, 0.46", "87.4238, -58.4973, -129.901, 0.46", "88.5137, -59.4642, -130.865, 0.46", "90.0629, -60.7796, -132.264, 0.46", "90.8037, -61.3957, -132.96, 1.37", "92.9517, -63.1502, -134.962, 1.37", "94.6163, -64.5715, -136.613, 0.91", "95.8416, -65.5721, -137.776, 0.91", "96.9769, -66.5017, -138.792, 1.14", "98.2185, -67.5872, -139.608, 1.14", "100.005, -69.0347, -140.251, 0.68", "101.142, -69.864, -140.445, 0.68", "102.072, -70.5087, -140.556, 0.68", "103.199, -71.3394, -140.702, 0.68", "105.227, -73.0938, -141.193, 0.68", "107.136, -74.9559, -142.035, 1.14", "108.741, -76.7143, -143.286, 0.91", "109.732, -77.9986, -144.476, 0.46", "110.301, -78.8966, -145.513, 0.91", "111.022, -80.3356, -147.509, 0.91", "111.481, -81.5889, -149.638, 0.91", "111.738, -82.7691, -151.98, 0.91", "111.894, -83.9215, -154.635, 0.91", "111.988, -84.671, -156.908, 1.59", "112.076, -85.2904, -159.548, 1.59", "112.108, -85.8622, -163.434, 1.59", "112.098, -86.252, -166.896, 1.59", "112.073, -86.334, -168.066, 0.91", "111.936, -86.3789, -171.195, 0.91", "111.728, -86.2683, -174.139, 0.91", "111.338, -85.8491, -178.443, 0.91" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-61.1746, -37.8443, -30.951, 0.91", "-61.2301, -36.4667, -32.2407, 0.91", "-61.3146, -34.8693, -33.9697, 0.68", "-61.4764, -33.29, -35.7827, 0.68", "-61.6144, -32.191, -37.0816, 0.68", "-61.7407, -31.1968, -38.2703, 0.91", "-61.9266, -29.7482, -40.0764, 1.37", "-62.0862, -28.6686, -41.5372, 1.59", "-62.2867, -27.4648, -43.2331, 0.91", "-62.6156, -25.8617, -45.5085, 0.91", "-62.9329, -24.4704, -47.472, 0.91", "-63.1846, -23.2664, -49.1824, 0.91", "-63.3984, -21.9723, -51.0582, 0.91", "-63.4813, -20.9907, -52.4566, 0.91", "-63.477, -19.7194, -54.3824, 0.91", "-63.3539, -18.5329, -56.3905, 0.91", "-63.0591, -17.2994, -58.9069, 0.91", "-62.767, -16.631, -60.7284, 0.91", "-62.2668, -16.0178, -63.6889, 0.91", "-62.0111, -15.8392, -65.5966, 0.91", "-61.8478, -15.7857, -67.3595, 0.91", "-61.8448, -15.7619, -69.1634, 0.91", "-62.2124, -15.5961, -71.3987, 0.91", "-62.8925, -15.2555, -73.5355, 0.91", "-63.8538, -14.7547, -75.3712, 0.91", "-64.8329, -14.2652, -76.3495, 1.14", "-65.5245, -13.945, -76.8026, 1.14", "-68.0311, -12.7931, -78.0186, 0.46", "-69.9101, -11.9611, -78.6976, 0.46", "-72.2821, -10.9169, -79.4509, 0.68", "-74.8067, -9.79912, -80.1831, 0.68", "-77.7058, -8.52687, -81.1716, 0.68", "-80.1947, -7.39626, -82.1264, 0.68", "-82.0872, -6.48931, -83.0624, 1.14", "-83.3082, -5.8489, -83.818, 1.14", "-84.5664, -5.15047, -84.6842, 0.46", "-86.7422, -3.97878, -86.2146, 0.46", "-88.2174, -3.29336, -87.2535, 0.68", "-90.1901, -2.53119, -88.5115, 0.68", "-92.1699, -1.92322, -89.6325, 0.68", "-94.0867, -1.50206, -90.5036, 0.91", "-96.4802, -1.19702, -91.3471, 0.91", "-99.3847, -1.01622, -92.0017, 0.91", "-102.5, -0.949565, -92.5207, 0.91", "-104.123, -0.941848, -92.6177, 1.14", "-105.705, -0.923778, -92.6093, 1.14", "-107.832, -0.856982, -92.5374, 0.68", "-109.82, -0.781734, -92.4148, 1.14", "-111.761, -0.724098, -92.2939, 1.14", "-113.223, -0.668705, -92.2712, 1.14", "-116.437, -0.542719, -92.1708, 0.91", "-118.659, -0.54827, -92.0152, 0.91", "-119.554, -0.612335, -91.8932, 0.91", "-122.106, -1.02286, -91.3488, 0.91", "-124.493, -1.56289, -90.7081, 0.91", "-126.038, -1.95407, -90.1922, 0.91", "-128.292, -2.51701, -89.3622, 0.91", "-131.675, -3.36821, -88.0396, 0.91", "-134.875, -4.16475, -86.7336, 0.91", "-139.016, -5.20141, -84.9514, 0.46", "-141.959, -5.92864, -83.6726, 0.46", "-145.382, -6.65518, -82.2404, 0.46" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "-61.1746, -37.8443, -30.951, 0.68", "-62.1724, -38.1552, -32.2225, 0.68", "-63.7184, -38.3903, -33.9774, 0.68", "-64.8667, -38.48, -35.0986, 0.91", "-66.6149, -38.637, -36.686, 0.91", "-68.3809, -38.8293, -38.2536, 0.91", "-69.7112, -38.9879, -39.2798, 0.91", "-71.4179, -39.1806, -40.4487, 0.91", "-73.2419, -39.42, -41.4646, 0.91", "-75.0556, -39.715, -42.3119, 0.91", "-76.3286, -39.9695, -42.7986, 0.91", "-78.9572, -40.5328, -43.6073, 0.91", "-80.1573, -40.7542, -44.0097, 0.68", "-81.8089, -41.0263, -44.7759, 0.68", "-82.8817, -41.1413, -45.3935, 0.68", "-84.41, -41.2397, -46.592, 0.68", "-85.5437, -41.3523, -47.7713, 0.91", "-87.3426, -41.5166, -49.9805, 0.91", "-88.3446, -41.5764, -51.1875, 0.91", "-89.4069, -41.6345, -52.4302, 1.37", "-91.3334, -41.8306, -54.5875, 1.14", "-92.9562, -42.0725, -56.3342, 0.68", "-94.4972, -42.3767, -57.9871, 0.68", "-95.6626, -42.6168, -59.174, 0.91", "-96.9348, -42.8741, -60.4273, 0.91", "-98.7256, -43.1663, -62.1345, 0.91", "-100.906, -43.4602, -64.098, 0.91", "-103.022, -43.7452, -66.0148, 0.91", "-105.343, -44.0616, -68.0798, 0.91", "-106.556, -44.2138, -69.1664, 0.91", "-108.403, -44.411, -70.7853, 0.91", "-110.443, -44.5809, -72.6108, 0.91", "-112.205, -44.7076, -74.3311, 0.91", "-113.746, -44.8541, -76.0686, 1.37", "-114.983, -45.0379, -77.6747, 1.37", "-115.965, -45.2416, -79.0835, 1.37", "-117.58, -45.6688, -81.5467, 1.37", "-119.896, -46.3551, -85.2923, 1.37", "-121.337, -46.8075, -87.7644, 1.37", "-123.453, -47.5683, -91.7521, 0.91", "-124.415, -47.9204, -93.5989, 0.91" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "178.118, -187.737, 121.29, 0.46", "177.265, -188.303, 122.268, 0.46", "176.023, -189.17, 123.693, 0.91", "174.752, -190.067, 125.067, 0.46", "173.524, -190.934, 126.396, 0.46", "173.249, -191.128, 126.694, 0.68", "171.885, -192.092, 128.17, 0.23", "171.193, -192.503, 128.792, 0.23", "170.673, -192.802, 129.169, 1.14" ],
    "parent" : "dend_22",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "178.118, -187.737, 121.29, 0.68", "179.819, -187.257, 121.712, 0.68", "180.393, -187.069, 121.866, 0.68", "182.572, -186.238, 122.441, 0.68", "184.205, -185.531, 122.848, 0.91", "185.962, -184.704, 123.246, 0.46", "186.922, -184.284, 123.481, 0.46", "187.822, -183.919, 123.714, 0.46", "189.274, -183.323, 124.091, 0.46", "190.537, -182.831, 124.412, 0.91", "192.187, -182.241, 124.839, 0.46", "194.921, -181.358, 125.487, 0.46", "198.386, -180.468, 126.339, 0.46" ],
    "parent" : "dend_22",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_6", "dend_1", "dend_0", "dend_14", "dend_7", "dend_5", "dend_2", "dend_20", "dend_15", "dend_9", "dend_8", "dend_4", "dend_3", "dend_26", "dend_21", "dend_17", "dend_16", "dend_13", "dend_10", "dend_25", "dend_22", "dend_19", "dend_18", "dend_12", "dend_11", "dend_24", "dend_23" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_6", "dend_1", "dend_0", "dend_14", "dend_7", "dend_5", "dend_2", "dend_20", "dend_15", "dend_9", "dend_8", "dend_4", "dend_3", "dend_26", "dend_21", "dend_17", "dend_16", "dend_13", "dend_10", "dend_25", "dend_22", "dend_19", "dend_18", "dend_12", "dend_11", "dend_24", "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_14", "dend_14", "dend_14", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "axon_1", "axon_1", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_19", "dend_19", "dend_19", "dend_19", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cNAC_149_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cNAC_149_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cNAC187_L1_DAC_2e9c9967f8_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_6, id: dend_6, parent: soma_0
create dend_6
public dend_6
// Section: dend_1, id: dend_1, parent: soma_0
create dend_1
public dend_1
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_14, id: dend_14, parent: dend_6
create dend_14
public dend_14
// Section: dend_7, id: dend_7, parent: dend_6
create dend_7
public dend_7
// Section: dend_5, id: dend_5, parent: dend_1
create dend_5
public dend_5
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_20, id: dend_20, parent: dend_14
create dend_20
public dend_20
// Section: dend_15, id: dend_15, parent: dend_14
create dend_15
public dend_15
// Section: dend_9, id: dend_9, parent: dend_7
create dend_9
public dend_9
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_4, id: dend_4, parent: dend_2
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_26, id: dend_26, parent: dend_20
create dend_26
public dend_26
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_17, id: dend_17, parent: dend_15
create dend_17
public dend_17
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_13, id: dend_13, parent: dend_9
create dend_13
public dend_13
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10
// Section: dend_25, id: dend_25, parent: dend_21
create dend_25
public dend_25
// Section: dend_22, id: dend_22, parent: dend_21
create dend_22
public dend_22
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_12, id: dend_12, parent: dend_10
create dend_12
public dend_12
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_24, id: dend_24, parent: dend_22
create dend_24
public dend_24
// Section: dend_23, id: dend_23, parent: dend_22
create dend_23
public dend_23

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_6, dend_1, dend_0, dend_14, dend_7, dend_5, dend_2, dend_20, dend_15, dend_9, dend_8, dend_4, dend_3, dend_26, dend_21, dend_17, dend_16, dend_13, dend_10, dend_25, dend_22, dend_19, dend_18, dend_12, dend_11, dend_24, dend_23]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_6, dend_1, dend_0, dend_14, dend_7, dend_5, dend_2, dend_20, dend_15, dend_9, dend_8, dend_4, dend_3, dend_26, dend_21, dend_17, dend_16, dend_13, dend_10, dend_25, dend_22, dend_19, dend_18, dend_12, dend_11, dend_24, dend_23]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_30
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_14, dend_14, dend_14, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, axon_1, axon_1, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_19, dend_19, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cNAC_149_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cNAC_149_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_6(0), soma_0(0.49999974665068725)
    connect dend_1(0), soma_0(0.49999974665068725)
    connect dend_0(0), soma_0(0.49999974665068725)
    connect axon_0(0), soma_0(1.0)
    connect dend_14(0), dend_6(1.0)
    connect dend_7(0), dend_6(1.0)
    connect dend_5(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_20(0), dend_14(1.0)
    connect dend_15(0), dend_14(1.0)
    connect dend_9(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_4(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_26(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_17(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_13(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)
    connect dend_25(0), dend_21(1.0)
    connect dend_22(0), dend_21(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_12(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_24(0), dend_22(1.0)
    connect dend_23(0), dend_22(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -0.533804, -11.8261, 0.0, 2.99447 ) }
    soma_0 { pt3dadd( -0.55982, -10.6383, 0.0, 4.95616 ) }
    soma_0 { pt3dadd( -0.585835, -9.45036, 0.0, 7.22088 ) }
    soma_0 { pt3dadd( -0.611851, -8.26247, 0.0, 8.90602 ) }
    soma_0 { pt3dadd( -0.637867, -7.07457, 0.0, 10.8187 ) }
    soma_0 { pt3dadd( -0.663882, -5.88668, 0.0, 12.4551 ) }
    soma_0 { pt3dadd( -0.689898, -4.69878, 0.0, 13.663 ) }
    soma_0 { pt3dadd( -0.715914, -3.51089, 0.0, 14.1893 ) }
    soma_0 { pt3dadd( -0.741929, -2.32299, 0.0, 14.7858 ) }
    soma_0 { pt3dadd( -0.767945, -1.1351, 0.0, 15.5433 ) }
    soma_0 { pt3dadd( -0.793961, 0.052794, 0.0, 16.1092 ) }
    soma_0 { pt3dadd( -0.819977, 1.24069, 0.0, 16.4465 ) }
    soma_0 { pt3dadd( -0.845992, 2.42858, 0.0, 16.5232 ) }
    soma_0 { pt3dadd( -0.872008, 3.61648, 0.0, 16.3774 ) }
    soma_0 { pt3dadd( -0.898024, 4.80437, 0.0, 15.8693 ) }
    soma_0 { pt3dadd( -0.924039, 5.99226, 0.0, 15.3638 ) }
    soma_0 { pt3dadd( -0.950055, 7.18016, 0.0, 14.6976 ) }
    soma_0 { pt3dadd( -0.976071, 8.36805, 0.0, 13.2926 ) }
    soma_0 { pt3dadd( -1.00209, 9.55595, 0.0, 11.7589 ) }
    soma_0 { pt3dadd( -1.0281, 10.7438, 0.0, 8.85168 ) }
    soma_0 { pt3dadd( -1.05412, 11.9317, 0.0, 5.03592 ) }
    // Section: dend_6, id: dend_6, parent: soma_0 (entry count 21/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -0.503777, -11.3208, -0.73, 5.01 ) }
    dend_6 { pt3dadd( -0.503777, -11.3208, -0.73, 5.01 ) }
    dend_6 { pt3dadd( -0.697942, -13.9061, -1.31103, 3.87 ) }
    dend_6 { pt3dadd( -0.93005, -16.1235, -1.75692, 3.87 ) }
    dend_6 { pt3dadd( -1.31448, -19.0062, -2.11004, 3.87 ) }
    dend_6 { pt3dadd( -1.82161, -22.0194, -2.34653, 3.42 ) }
    dend_6 { pt3dadd( -2.1946, -23.8737, -2.46252, 3.64 ) }
    dend_6 { pt3dadd( -2.84467, -26.4622, -2.61995, 4.1 ) }
    dend_6 { pt3dadd( -3.48876, -28.4261, -2.7535, 3.42 ) }
    dend_6 { pt3dadd( -5.02104, -32.0598, -3.03532, 3.19 ) }
    dend_6 { pt3dadd( -6.59613, -34.9029, -3.32775, 3.42 ) }
    dend_6 { pt3dadd( -7.93731, -36.8006, -3.65613, 3.42 ) }
    dend_6 { pt3dadd( -9.41713, -38.4898, -4.13418, 3.42 ) }
    dend_6 { pt3dadd( -10.924, -39.977, -4.68119, 3.87 ) }
    dend_6 { pt3dadd( -12.363, -41.2058, -5.30613, 3.87 ) }
    dend_6 { pt3dadd( -14.0782, -42.3773, -6.21388, 3.64 ) }
    dend_6 { pt3dadd( -15.8333, -43.3484, -7.15666, 3.42 ) }
    dend_6 { pt3dadd( -17.8636, -44.3326, -8.19884, 3.42 ) }
    // Section: dend_1, id: dend_1, parent: soma_0 (entry count 39/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -1.25378, 9.38917, 7.83, 3.19 ) }
    dend_1 { pt3dadd( -1.25378, 9.38917, 7.83, 3.19 ) }
    dend_1 { pt3dadd( -0.946346, 10.0397, 8.24138, 2.51 ) }
    dend_1 { pt3dadd( -0.0729539, 11.4884, 9.23408, 2.05 ) }
    dend_1 { pt3dadd( 1.13213, 13.2052, 10.4867, 1.59 ) }
    dend_1 { pt3dadd( 2.19072, 14.5485, 11.5425, 1.59 ) }
    dend_1 { pt3dadd( 3.18665, 15.6933, 12.5051, 2.05 ) }
    dend_1 { pt3dadd( 4.65082, 17.1449, 13.8247, 1.59 ) }
    dend_1 { pt3dadd( 5.90624, 18.1844, 14.9252, 1.59 ) }
    dend_1 { pt3dadd( 7.58375, 19.3069, 16.381, 1.59 ) }
    dend_1 { pt3dadd( 9.0184, 20.0679, 17.6764, 1.59 ) }
    dend_1 { pt3dadd( 10.5578, 20.7115, 19.1549, 1.59 ) }
    dend_1 { pt3dadd( 11.5956, 21.087, 20.1985, 1.82 ) }
    dend_1 { pt3dadd( 13.1375, 21.5517, 21.8514, 1.82 ) }
    dend_1 { pt3dadd( 14.3507, 21.8158, 23.2082, 1.82 ) }
    dend_1 { pt3dadd( 15.419, 21.9002, 24.4749, 1.82 ) }
    dend_1 { pt3dadd( 15.9371, 21.8714, 25.1397, 1.82 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 56/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 5.74622, 8.96167, 1.13, 2.28 ) }
    dend_0 { pt3dadd( 5.99656, 9.19068, 0.989607, 2.05 ) }
    dend_0 { pt3dadd( 7.77007, 10.6112, 0.121356, 1.37 ) }
    dend_0 { pt3dadd( 9.22944, 11.6428, -0.515389, 1.59 ) }
    dend_0 { pt3dadd( 10.5256, 12.4608, -0.946492, 1.59 ) }
    dend_0 { pt3dadd( 11.6755, 13.1235, -1.22211, 1.59 ) }
    dend_0 { pt3dadd( 13.6621, 14.1757, -1.58326, 1.37 ) }
    dend_0 { pt3dadd( 16.0635, 15.1988, -1.73715, 1.37 ) }
    dend_0 { pt3dadd( 17.7016, 15.6448, -1.54515, 1.59 ) }
    dend_0 { pt3dadd( 19.8896, 15.8819, -0.865442, 1.37 ) }
    dend_0 { pt3dadd( 21.2604, 15.7865, -0.180873, 1.37 ) }
    dend_0 { pt3dadd( 21.8594, 15.6654, 0.219442, 1.82 ) }
    dend_0 { pt3dadd( 23.5312, 15.0358, 1.67982, 1.37 ) }
    dend_0 { pt3dadd( 25.1522, 14.185, 3.38666, 1.37 ) }
    dend_0 { pt3dadd( 26.3929, 13.4602, 4.78741, 1.37 ) }
    dend_0 { pt3dadd( 27.6563, 12.7235, 6.18572, 1.59 ) }
    dend_0 { pt3dadd( 27.8083, 12.6449, 6.34325, 1.59 ) }
    dend_0 { pt3dadd( 29.158, 12.0278, 7.6674, 1.59 ) }
    dend_0 { pt3dadd( 30.5618, 11.4955, 8.8901, 1.37 ) }
    dend_0 { pt3dadd( 32.276, 10.9523, 10.209, 1.37 ) }
    dend_0 { pt3dadd( 33.7607, 10.5304, 11.2448, 1.37 ) }
    dend_0 { pt3dadd( 35.0709, 10.161, 12.0727, 1.14 ) }
    dend_0 { pt3dadd( 35.6776, 9.98226, 12.4285, 1.37 ) }
    dend_0 { pt3dadd( 37.5595, 9.38929, 13.4304, 1.14 ) }
    dend_0 { pt3dadd( 39.6865, 8.57423, 14.5309, 1.14 ) }
    dend_0 { pt3dadd( 41.0287, 7.94339, 15.2446, 1.37 ) }
    dend_0 { pt3dadd( 42.0652, 7.38116, 15.8307, 1.82 ) }
    dend_0 { pt3dadd( 43.7685, 6.37471, 16.8669, 1.14 ) }
    dend_0 { pt3dadd( 45.5263, 5.27471, 17.9999, 1.14 ) }
    dend_0 { pt3dadd( 47.0281, 4.3084, 19.0255, 1.37 ) }
    dend_0 { pt3dadd( 48.5717, 3.30199, 20.1471, 1.37 ) }
    dend_0 { pt3dadd( 50.1358, 2.26063, 21.3395, 1.59 ) }
    dend_0 { pt3dadd( 51.6074, 1.28589, 22.5286, 0.91 ) }
    dend_0 { pt3dadd( 52.8226, 0.546234, 23.5539, 0.68 ) }
    dend_0 { pt3dadd( 53.8328, 0.0435337, 24.3972, 1.14 ) }
    dend_0 { pt3dadd( 55.0363, -0.3851, 25.4105, 1.82 ) }
    dend_0 { pt3dadd( 55.6512, -0.516574, 25.9524, 0.91 ) }
    dend_0 { pt3dadd( 56.7151, -0.51721, 26.9884, 0.91 ) }
    dend_0 { pt3dadd( 57.863, -0.112162, 28.2485, 0.91 ) }
    dend_0 { pt3dadd( 58.552, 0.50157, 29.2419, 1.14 ) }
    dend_0 { pt3dadd( 59.1981, 1.51586, 30.3638, 1.14 ) }
    dend_0 { pt3dadd( 59.4315, 2.13858, 30.9218, 1.14 ) }
    dend_0 { pt3dadd( 59.6833, 3.27215, 31.8855, 1.14 ) }
    dend_0 { pt3dadd( 59.824, 4.61697, 33.0526, 0.91 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_0 { pt3dadd( 59.842, 5.85459, 34.2319, 0.91 ) }
    dend_0 { pt3dadd( 59.8047, 6.90866, 35.4048, 0.91 ) }
    dend_0 { pt3dadd( 59.8074, 7.69411, 36.5835, 0.91 ) }
    dend_0 { pt3dadd( 59.9645, 7.73067, 37.6129, 0.91 ) }
    dend_0 { pt3dadd( 60.3908, 7.21123, 39.099, 0.91 ) }
    dend_0 { pt3dadd( 60.8677, 6.70404, 40.153, 0.91 ) }
    dend_0 { pt3dadd( 61.4864, 6.14166, 41.0819, 1.37 ) }
    dend_0 { pt3dadd( 62.3605, 5.40416, 42.2066, 1.14 ) }
    dend_0 { pt3dadd( 63.208, 4.7417, 43.1694, 0.68 ) }
    dend_0 { pt3dadd( 63.9022, 4.2625, 43.8748, 0.68 ) }
    dend_0 { pt3dadd( 64.8964, 3.67218, 44.7797, 0.91 ) }
    dend_0 { pt3dadd( 65.5996, 3.28111, 45.3195, 0.68 ) }
    dend_0 { pt3dadd( 66.8844, 2.54225, 46.0904, 0.68 ) }
    dend_0 { pt3dadd( 67.7616, 2.0805, 46.4854, 0.68 ) }
    dend_0 { pt3dadd( 68.5138, 1.70823, 46.7698, 1.14 ) }
    dend_0 { pt3dadd( 69.4321, 1.26358, 47.0946, 1.14 ) }
    dend_0 { pt3dadd( 71.1017, 0.509293, 47.6511, 0.91 ) }
    dend_0 { pt3dadd( 72.2553, -0.0147603, 48.0154, 0.23 ) }
    dend_0 { pt3dadd( 73.8755, -0.726664, 48.5017, 0.23 ) }
    dend_0 { pt3dadd( 75.3813, -1.36688, 48.9587, 0.23 ) }
    dend_0 { pt3dadd( 76.9068, -2.01545, 49.4521, 0.23 ) }
    dend_0 { pt3dadd( 78.5355, -2.73372, 50.015, 0.23 ) }
    dend_0 { pt3dadd( 80.3683, -3.54724, 50.6849, 0.23 ) }
    dend_0 { pt3dadd( 81.2768, -3.9903, 51.0502, 0.23 ) }
    dend_0 { pt3dadd( 81.9866, -4.41873, 51.3591, 0.91 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 25/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( -1.05412, 11.9317, 0.0, 0.727756 ) }
    axon_0 { pt3dadd( -1.38255, 26.9281, 0.0, 0.727756 ) }
    axon_0 { pt3dadd( -1.71099, 41.9245, 0.0, 0.727756 ) }
    // Section: dend_14, id: dend_14, parent: dend_6 (entry count 28/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( -17.8636, -44.3326, -8.19884, 2.51 ) }
    dend_14 { pt3dadd( -18.5232, -45.8165, -8.18134, 2.51 ) }
    dend_14 { pt3dadd( -19.0974, -47.1081, -8.1661, 2.05 ) }
    dend_14 { pt3dadd( -19.8999, -48.9134, -8.1448, 2.05 ) }
    // Section: dend_7, id: dend_7, parent: dend_6 (entry count 32/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -17.8636, -44.3326, -8.19884, 2.05 ) }
    dend_7 { pt3dadd( -20.719, -43.7967, -8.88042, 2.05 ) }
    dend_7 { pt3dadd( -23.7075, -43.0323, -9.62113, 2.05 ) }
    dend_7 { pt3dadd( -26.7443, -42.2556, -10.3738, 2.05 ) }
    dend_7 { pt3dadd( -29.1388, -41.6432, -10.9673, 2.28 ) }
    dend_7 { pt3dadd( -31.6788, -40.9935, -11.5968, 2.05 ) }
    dend_7 { pt3dadd( -33.748, -40.4642, -12.1097, 1.82 ) }
    dend_7 { pt3dadd( -35.3087, -39.9307, -12.5665, 1.82 ) }
    // Section: dend_5, id: dend_5, parent: dend_1 (entry count 40/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 15.9371, 21.8714, 25.1397, 1.14 ) }
    dend_5 { pt3dadd( 14.9656, 22.7724, 25.2942, 1.14 ) }
    dend_5 { pt3dadd( 13.6172, 24.201, 25.2654, 1.14 ) }
    dend_5 { pt3dadd( 12.3249, 25.811, 25.129, 1.14 ) }
    dend_5 { pt3dadd( 11.2473, 27.1536, 25.0152, 1.37 ) }
    dend_5 { pt3dadd( 10.3398, 28.2842, 24.9194, 1.14 ) }
    dend_5 { pt3dadd( 9.07535, 29.8596, 24.7859, 0.91 ) }
    dend_5 { pt3dadd( 8.00197, 31.1394, 24.4796, 0.91 ) }
    dend_5 { pt3dadd( 7.22584, 32.1463, 24.0269, 1.14 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 49/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 15.9371, 21.8714, 25.1397, 1.59 ) }
    dend_2 { pt3dadd( 15.1374, 20.5851, 26.4221, 1.59 ) }
    dend_2 { pt3dadd( 14.2517, 19.3701, 27.4618, 1.14 ) }
    dend_2 { pt3dadd( 13.0693, 17.987, 28.6428, 1.14 ) }
    dend_2 { pt3dadd( 12.4591, 17.3494, 29.2145, 1.14 ) }
    dend_2 { pt3dadd( 11.1656, 16.1059, 30.3377, 0.68 ) }
    dend_2 { pt3dadd( 10.0425, 15.0262, 31.3129, 0.68 ) }
    dend_2 { pt3dadd( 9.26269, 14.3736, 31.7531, 0.68 ) }
    dend_2 { pt3dadd( 8.13203, 13.5685, 32.1191, 0.68 ) }
    dend_2 { pt3dadd( 6.86436, 12.8824, 32.2685, 0.91 ) }
    dend_2 { pt3dadd( 5.64373, 12.4336, 32.328, 1.37 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 60/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( -1.71099, 41.9245, 0.0, 0.23 ) }
    axon_1 { pt3dadd( -2.03942, 56.9209, 0.0, 0.23 ) }
    axon_1 { pt3dadd( -2.36786, 71.9173, 0.0, 0.23 ) }
    // Section: dend_20, id: dend_20, parent: dend_14 (entry count 63/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( -19.8999, -48.9134, -8.1448, 1.59 ) }
    dend_20 { pt3dadd( -20.4431, -50.559, -8.16077, 1.59 ) }
    dend_20 { pt3dadd( -21.2932, -52.7136, -8.64264, 1.59 ) }
    dend_20 { pt3dadd( -22.4077, -54.7537, -9.55581, 0.91 ) }
    dend_20 { pt3dadd( -24.0032, -56.8504, -11.094, 0.91 ) }
    dend_20 { pt3dadd( -25.4616, -58.3976, -12.7309, 0.91 ) }
    dend_20 { pt3dadd( -26.3723, -59.2674, -14.0233, 1.37 ) }
    dend_20 { pt3dadd( -26.8776, -59.6781, -15.0907, 1.14 ) }
    dend_20 { pt3dadd( -27.4775, -60.2036, -17.0224, 0.68 ) }
    dend_20 { pt3dadd( -27.8219, -60.6523, -18.93, 0.68 ) }
    dend_20 { pt3dadd( -27.8649, -61.0522, -20.3662, 0.68 ) }
    dend_20 { pt3dadd( -27.3257, -61.9116, -22.2039, 0.68 ) }
    dend_20 { pt3dadd( -26.547, -62.7378, -23.3338, 0.91 ) }
    dend_20 { pt3dadd( -25.2751, -63.7729, -24.2919, 0.91 ) }
    dend_20 { pt3dadd( -23.9268, -64.6093, -24.8996, 1.14 ) }
    dend_20 { pt3dadd( -22.2485, -65.4005, -25.4062, 1.14 ) }
    dend_20 { pt3dadd( -20.1649, -66.2018, -25.9224, 1.14 ) }
    dend_20 { pt3dadd( -18.7375, -66.543, -26.2869, 0.91 ) }
    dend_20 { pt3dadd( -16.6202, -66.7916, -27.0841, 0.91 ) }
    dend_20 { pt3dadd( -14.8325, -66.8558, -28.1336, 0.91 ) }
    dend_20 { pt3dadd( -13.2628, -66.8589, -29.54, 0.91 ) }
    dend_20 { pt3dadd( -12.2106, -66.8821, -30.8858, 1.14 ) }
    dend_20 { pt3dadd( -10.8692, -67.0482, -33.0511, 1.37 ) }
    dend_20 { pt3dadd( -9.65291, -67.4572, -35.1875, 1.37 ) }
    dend_20 { pt3dadd( -8.33869, -68.1679, -37.4964, 1.59 ) }
    dend_20 { pt3dadd( -7.16648, -68.9694, -39.3294, 1.59 ) }
    dend_20 { pt3dadd( -6.06185, -69.8216, -40.8098, 1.37 ) }
    dend_20 { pt3dadd( -5.02877, -70.7084, -42.0512, 1.37 ) }
    dend_20 { pt3dadd( -3.37033, -72.4052, -43.8536, 1.14 ) }
    dend_20 { pt3dadd( -2.43144, -73.5369, -44.7314, 1.14 ) }
    dend_20 { pt3dadd( -0.995328, -75.5671, -45.9197, 1.14 ) }
    dend_20 { pt3dadd( 0.0350423, -77.2129, -46.6965, 1.14 ) }
    dend_20 { pt3dadd( 1.0326, -78.9763, -47.3916, 0.91 ) }
    dend_20 { pt3dadd( 1.93532, -80.7281, -48.0206, 0.91 ) }
    dend_20 { pt3dadd( 3.31037, -83.4014, -48.7801, 0.68 ) }
    dend_20 { pt3dadd( 4.07185, -84.6212, -48.8903, 0.68 ) }
    dend_20 { pt3dadd( 5.07848, -85.7884, -48.5815, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_20 { pt3dadd( 6.45639, -86.8928, -47.8903, 0.68 ) }
    dend_20 { pt3dadd( 7.73956, -87.7242, -47.1677, 0.68 ) }
    dend_20 { pt3dadd( 9.61051, -88.7093, -46.0633, 0.68 ) }
    dend_20 { pt3dadd( 11.9887, -89.8244, -44.5642, 0.68 ) }
    dend_20 { pt3dadd( 13.1004, -90.3283, -43.8666, 0.68 ) }
    dend_20 { pt3dadd( 15.0393, -91.2424, -42.6591, 0.68 ) }
    dend_20 { pt3dadd( 17.6969, -92.5747, -41.0597, 0.91 ) }
    dend_20 { pt3dadd( 19.5761, -93.6151, -39.9559, 0.91 ) }
    dend_20 { pt3dadd( 21.9652, -95.1606, -38.627, 0.91 ) }
    dend_20 { pt3dadd( 24.0226, -96.6381, -37.6675, 0.91 ) }
    dend_20 { pt3dadd( 25.5562, -97.8477, -37.0089, 1.59 ) }
    dend_20 { pt3dadd( 26.1916, -98.385, -36.7454, 1.14 ) }
    dend_20 { pt3dadd( 27.9284, -99.9206, -36.0311, 0.91 ) }
    dend_20 { pt3dadd( 30.0326, -101.94, -35.249, 0.68 ) }
    dend_20 { pt3dadd( 31.8078, -103.736, -34.6483, 0.68 ) }
    dend_20 { pt3dadd( 33.1529, -105.089, -34.2292, 0.68 ) }
    dend_20 { pt3dadd( 35.3604, -107.205, -33.5204, 0.91 ) }
    dend_20 { pt3dadd( 37.4933, -109.198, -32.8149, 1.14 ) }
    dend_20 { pt3dadd( 38.7538, -110.382, -32.3919, 1.14 ) }
    dend_20 { pt3dadd( 39.9081, -111.57, -32.0281, 0.91 ) }
    dend_20 { pt3dadd( 41.5102, -113.563, -31.5561, 1.14 ) }
    dend_20 { pt3dadd( 42.9608, -115.948, -31.2597, 0.91 ) }
    dend_20 { pt3dadd( 43.8098, -117.812, -31.1678, 0.68 ) }
    dend_20 { pt3dadd( 44.4022, -119.478, -31.1267, 1.14 ) }
    dend_20 { pt3dadd( 45.0226, -121.69, -31.0479, 1.37 ) }
    dend_20 { pt3dadd( 45.4555, -124.188, -30.9905, 1.37 ) }
    dend_20 { pt3dadd( 45.721, -126.962, -30.9095, 0.91 ) }
    dend_20 { pt3dadd( 45.819, -128.073, -30.8346, 0.91 ) }
    dend_20 { pt3dadd( 46.0183, -130.241, -30.5161, 1.37 ) }
    dend_20 { pt3dadd( 46.1854, -132.038, -30.1169, 1.37 ) }
    dend_20 { pt3dadd( 46.5248, -134.796, -29.2724, 0.91 ) }
    dend_20 { pt3dadd( 46.8792, -136.842, -28.4562, 0.91 ) }
    dend_20 { pt3dadd( 47.6942, -140.679, -26.7075, 0.91 ) }
    dend_20 { pt3dadd( 48.1455, -142.662, -25.6965, 0.91 ) }
    dend_20 { pt3dadd( 48.5062, -144.154, -24.8321, 0.91 ) }
    dend_20 { pt3dadd( 49.2973, -147.117, -22.9523, 0.46 ) }
    dend_20 { pt3dadd( 49.9345, -149.407, -21.3868, 0.46 ) }
    dend_20 { pt3dadd( 50.6412, -152.197, -19.3918, 0.46 ) }
    dend_20 { pt3dadd( 51.2545, -154.553, -17.6028, 0.46 ) }
    dend_20 { pt3dadd( 51.8145, -156.417, -16.0669, 0.46 ) }
    dend_20 { pt3dadd( 52.6246, -158.879, -14.0652, 0.46 ) }
    dend_20 { pt3dadd( 53.6036, -161.592, -11.9151, 0.46 ) }
    dend_20 { pt3dadd( 54.4442, -163.512, -10.4439, 0.68 ) }
    dend_20 { pt3dadd( 55.6291, -165.663, -8.82274, 1.14 ) }
    dend_20 { pt3dadd( 57.2885, -168.179, -7.14986, 0.68 ) }
    dend_20 { pt3dadd( 59.1051, -170.622, -5.68765, 0.68 ) }
    dend_20 { pt3dadd( 60.5557, -172.367, -4.59172, 0.68 ) }
    dend_20 { pt3dadd( 62.3582, -174.396, -3.28106, 0.68 ) }
    dend_20 { pt3dadd( 63.1356, -175.26, -2.67608, 0.68 ) }
    dend_20 { pt3dadd( 64.877, -177.263, -1.06668, 0.91 ) }
    dend_20 { pt3dadd( 66.2138, -178.793, 0.400389, 0.91 ) }
    dend_20 { pt3dadd( 67.9537, -180.689, 2.64087, 0.91 ) }
    dend_20 { pt3dadd( 69.4243, -182.278, 4.90785, 0.91 ) }
    dend_20 { pt3dadd( 70.6325, -183.604, 7.13648, 0.91 ) }
    dend_20 { pt3dadd( 72.0512, -185.146, 9.9601, 0.91 ) }
    dend_20 { pt3dadd( 73.0911, -186.221, 12.1931, 0.91 ) }
    dend_20 { pt3dadd( 74.2009, -187.309, 14.6333, 1.14 ) }
    dend_20 { pt3dadd( 75.962, -188.993, 18.6526, 0.46 ) }
    dend_20 { pt3dadd( 77.0181, -189.936, 21.3412, 0.46 ) }
    // Section: dend_15, id: dend_15, parent: dend_14 (entry count 59/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -19.8999, -48.9134, -8.1448, 0.91 ) }
    dend_15 { pt3dadd( -19.4772, -48.8449, -8.98356, 0.91 ) }
    dend_15 { pt3dadd( -17.8351, -48.5063, -11.5953, 0.91 ) }
    dend_15 { pt3dadd( -16.4496, -48.089, -13.6057, 0.91 ) }
    dend_15 { pt3dadd( -15.6125, -47.7203, -14.9489, 0.91 ) }
    dend_15 { pt3dadd( -14.8273, -47.2653, -16.3415, 0.68 ) }
    dend_15 { pt3dadd( -13.9598, -46.6919, -17.9855, 0.46 ) }
    dend_15 { pt3dadd( -13.2335, -46.1543, -19.2945, 0.46 ) }
    dend_15 { pt3dadd( -12.4383, -45.5035, -20.734, 0.46 ) }
    dend_15 { pt3dadd( -11.0905, -44.2266, -23.4053, 0.68 ) }
    dend_15 { pt3dadd( -10.2246, -43.2508, -25.4797, 0.68 ) }
    dend_15 { pt3dadd( -9.38008, -42.1615, -27.8535, 0.91 ) }
    dend_15 { pt3dadd( -9.10854, -41.8154, -28.7107, 0.91 ) }
    dend_15 { pt3dadd( -8.44728, -41.226, -30.6209, 0.91 ) }
    dend_15 { pt3dadd( -7.77298, -40.9518, -32.0508, 0.91 ) }
    dend_15 { pt3dadd( -7.27565, -41.071, -32.6836, 0.91 ) }
    dend_15 { pt3dadd( -6.5955, -41.5341, -33.2681, 0.91 ) }
    dend_15 { pt3dadd( -5.50864, -42.3766, -34.0275, 0.91 ) }
    dend_15 { pt3dadd( -3.66586, -43.7593, -35.4474, 0.91 ) }
    dend_15 { pt3dadd( -2.1989, -44.7754, -36.7172, 0.91 ) }
    dend_15 { pt3dadd( -0.504833, -45.9009, -38.2897, 0.91 ) }
    dend_15 { pt3dadd( 0.643379, -46.5666, -39.3816, 0.91 ) }
    dend_15 { pt3dadd( 1.99323, -47.1471, -40.7179, 1.37 ) }
    dend_15 { pt3dadd( 3.96892, -47.6635, -42.741, 0.68 ) }
    dend_15 { pt3dadd( 5.8441, -47.9072, -44.7216, 0.68 ) }
    dend_15 { pt3dadd( 6.84554, -47.9785, -45.7589, 0.68 ) }
    dend_15 { pt3dadd( 8.1852, -48.0671, -46.9861, 0.68 ) }
    dend_15 { pt3dadd( 10.3323, -48.4286, -48.8582, 0.91 ) }
    dend_15 { pt3dadd( 11.6709, -48.9129, -50.0225, 0.68 ) }
    dend_15 { pt3dadd( 12.4431, -49.3276, -50.7144, 0.68 ) }
    dend_15 { pt3dadd( 13.2732, -49.8739, -51.5953, 1.14 ) }
    dend_15 { pt3dadd( 14.0981, -50.4396, -52.7008, 1.14 ) }
    dend_15 { pt3dadd( 15.2083, -51.1891, -54.5213, 0.68 ) }
    dend_15 { pt3dadd( 16.3129, -51.8496, -56.7129, 0.68 ) }
    dend_15 { pt3dadd( 17.1683, -52.1842, -58.7485, 0.91 ) }
    dend_15 { pt3dadd( 17.9233, -52.2569, -60.9353, 0.68 ) }
    dend_15 { pt3dadd( 18.4852, -52.102, -62.9183, 1.14 ) }
    dend_15 { pt3dadd( 18.971, -51.6493, -65.367, 1.14 ) }
    dend_15 { pt3dadd( 19.284, -50.9939, -67.5903, 1.14 ) }
    dend_15 { pt3dadd( 19.4688, -50.3139, -69.3067, 1.14 ) }
    dend_15 { pt3dadd( 19.6901, -49.2476, -71.4657, 1.14 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_15 { pt3dadd( 19.7997, -48.7693, -72.3097, 0.68 ) }
    dend_15 { pt3dadd( 20.3044, -47.5105, -74.1678, 0.68 ) }
    dend_15 { pt3dadd( 20.8732, -46.6618, -75.0917, 0.68 ) }
    dend_15 { pt3dadd( 22.2076, -45.2903, -76.2839, 1.14 ) }
    dend_15 { pt3dadd( 23.2499, -44.4171, -77.067, 0.68 ) }
    dend_15 { pt3dadd( 24.3637, -43.5826, -77.9449, 0.68 ) }
    dend_15 { pt3dadd( 25.8316, -42.5854, -79.0601, 1.37 ) }
    dend_15 { pt3dadd( 27.0905, -41.7434, -80.0676, 1.37 ) }
    dend_15 { pt3dadd( 28.4157, -40.8033, -81.4394, 1.37 ) }
    dend_15 { pt3dadd( 30.135, -39.4503, -83.8137, 0.91 ) }
    dend_15 { pt3dadd( 31.3782, -38.4796, -85.8887, 0.91 ) }
    dend_15 { pt3dadd( 32.4276, -37.7786, -87.7284, 0.91 ) }
    dend_15 { pt3dadd( 33.2278, -37.4609, -89.1637, 1.37 ) }
    dend_15 { pt3dadd( 34.075, -37.3875, -90.4681, 1.37 ) }
    dend_15 { pt3dadd( 35.4599, -37.5494, -92.0525, 1.37 ) }
    dend_15 { pt3dadd( 36.7501, -37.8846, -93.118, 1.37 ) }
    dend_15 { pt3dadd( 38.2631, -38.3599, -94.221, 1.14 ) }
    dend_15 { pt3dadd( 39.6169, -38.8623, -95.2033, 1.14 ) }
    dend_15 { pt3dadd( 41.3995, -39.6125, -96.2098, 1.14 ) }
    dend_15 { pt3dadd( 42.9324, -40.2799, -96.8513, 1.14 ) }
    dend_15 { pt3dadd( 43.5796, -40.6022, -97.045, 1.14 ) }
    // Section: dend_9, id: dend_9, parent: dend_7 (entry count 21/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -35.3087, -39.9307, -12.5665, 1.37 ) }
    dend_9 { pt3dadd( -36.8452, -39.4908, -13.6836, 1.37 ) }
    dend_9 { pt3dadd( -38.5154, -39.2013, -14.8514, 1.37 ) }
    dend_9 { pt3dadd( -39.9805, -39.051, -15.8754, 1.37 ) }
    dend_9 { pt3dadd( -42.1786, -38.8256, -17.4115, 1.37 ) }
    dend_9 { pt3dadd( -43.8192, -38.6573, -18.5581, 1.37 ) }
    dend_9 { pt3dadd( -44.9668, -38.5396, -19.3601, 1.37 ) }
    dend_9 { pt3dadd( -46.8839, -38.5394, -20.5623, 1.82 ) }
    dend_9 { pt3dadd( -48.5826, -38.6985, -21.5205, 1.82 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 30/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -35.3087, -39.9307, -12.5665, 1.14 ) }
    dend_8 { pt3dadd( -35.9828, -39.9776, -11.3976, 1.14 ) }
    dend_8 { pt3dadd( -37.1928, -40.2111, -9.09992, 1.14 ) }
    dend_8 { pt3dadd( -37.9272, -40.4979, -7.64792, 1.14 ) }
    dend_8 { pt3dadd( -38.8234, -41.0144, -5.8682, 1.14 ) }
    dend_8 { pt3dadd( -39.8454, -41.7545, -3.9436, 1.14 ) }
    dend_8 { pt3dadd( -40.5207, -42.2978, -2.76779, 1.37 ) }
    dend_8 { pt3dadd( -41.3647, -43.1202, -1.42873, 1.14 ) }
    dend_8 { pt3dadd( -42.5515, -44.4473, 0.0634772, 0.91 ) }
    dend_8 { pt3dadd( -43.6618, -45.6374, 0.954671, 1.14 ) }
    dend_8 { pt3dadd( -44.8892, -46.7023, 1.28575, 0.91 ) }
    dend_8 { pt3dadd( -45.8136, -47.3221, 1.21477, 0.91 ) }
    dend_8 { pt3dadd( -47.2345, -48.1335, 0.853186, 1.14 ) }
    dend_8 { pt3dadd( -48.9336, -49.0248, 0.170836, 1.14 ) }
    dend_8 { pt3dadd( -50.865, -49.9631, -0.962382, 0.91 ) }
    dend_8 { pt3dadd( -52.4404, -50.6713, -2.07656, 1.14 ) }
    dend_8 { pt3dadd( -53.4955, -51.1068, -2.87047, 1.14 ) }
    dend_8 { pt3dadd( -54.7055, -51.5783, -3.81757, 1.14 ) }
    dend_8 { pt3dadd( -56.1739, -52.1283, -4.98011, 0.91 ) }
    dend_8 { pt3dadd( -58.4369, -53.0032, -6.48954, 0.91 ) }
    dend_8 { pt3dadd( -60.0682, -53.786, -7.35523, 0.91 ) }
    dend_8 { pt3dadd( -61.0959, -54.3856, -7.6992, 0.91 ) }
    dend_8 { pt3dadd( -62.4059, -55.3989, -7.80991, 0.91 ) }
    dend_8 { pt3dadd( -63.1188, -56.1299, -7.70896, 0.91 ) }
    dend_8 { pt3dadd( -64.9466, -58.3761, -7.14131, 0.91 ) }
    dend_8 { pt3dadd( -66.1193, -60.0021, -6.585, 1.14 ) }
    dend_8 { pt3dadd( -67.5178, -62.1672, -5.74691, 0.91 ) }
    dend_8 { pt3dadd( -68.9616, -64.4622, -4.73732, 0.91 ) }
    dend_8 { pt3dadd( -70.1941, -66.4109, -3.73744, 0.91 ) }
    dend_8 { pt3dadd( -71.0875, -67.7574, -2.94939, 1.14 ) }
    dend_8 { pt3dadd( -72.4822, -69.6004, -1.81653, 1.14 ) }
    dend_8 { pt3dadd( -73.6483, -70.8587, -0.890687, 1.14 ) }
    dend_8 { pt3dadd( -75.2656, -72.2673, 0.391375, 0.91 ) }
    dend_8 { pt3dadd( -76.909, -73.3917, 1.77164, 1.14 ) }
    dend_8 { pt3dadd( -77.8427, -73.9295, 2.63804, 1.14 ) }
    dend_8 { pt3dadd( -80.1131, -75.0618, 4.97958, 0.91 ) }
    dend_8 { pt3dadd( -81.446, -75.6297, 6.48703, 1.14 ) }
    dend_8 { pt3dadd( -82.5615, -76.0754, 7.82653, 1.37 ) }
    dend_8 { pt3dadd( -83.9822, -76.6948, 9.65055, 1.37 ) }
    dend_8 { pt3dadd( -85.3184, -77.3793, 11.4973, 1.37 ) }
    dend_8 { pt3dadd( -86.6481, -78.2382, 13.4642, 1.37 ) }
    dend_8 { pt3dadd( -87.7999, -79.2475, 15.3613, 1.37 ) }
    dend_8 { pt3dadd( -88.8732, -80.4709, 17.1373, 1.37 ) }
    dend_8 { pt3dadd( -89.6635, -81.5742, 18.4184, 1.37 ) }
    dend_8 { pt3dadd( -90.3664, -82.7744, 19.5815, 1.14 ) }
    dend_8 { pt3dadd( -90.884, -83.8803, 20.5019, 0.68 ) }
    dend_8 { pt3dadd( -91.6675, -85.9218, 21.9947, 0.46 ) }
    dend_8 { pt3dadd( -92.1444, -87.5019, 23.0435, 0.68 ) }
    dend_8 { pt3dadd( -92.5427, -89.2923, 24.1734, 0.91 ) }
    dend_8 { pt3dadd( -92.8988, -91.3177, 25.3564, 0.91 ) }
    dend_8 { pt3dadd( -93.1476, -92.9846, 26.2504, 0.91 ) }
    dend_8 { pt3dadd( -93.3604, -94.4367, 26.9445, 0.91 ) }
    dend_8 { pt3dadd( -93.6364, -96.4138, 27.6379, 1.14 ) }
    dend_8 { pt3dadd( -93.8896, -98.1199, 28.0017, 1.37 ) }
    dend_8 { pt3dadd( -94.1439, -99.6357, 28.1517, 1.14 ) }
    dend_8 { pt3dadd( -94.3882, -101.077, 28.1629, 0.91 ) }
    dend_8 { pt3dadd( -94.6591, -102.866, 28.0898, 0.91 ) }
    dend_8 { pt3dadd( -94.9398, -105.28, 27.9994, 1.14 ) }
    dend_8 { pt3dadd( -95.0927, -107.207, 27.9893, 0.91 ) }
    dend_8 { pt3dadd( -95.1424, -108.973, 28.0646, 0.91 ) }
    dend_8 { pt3dadd( -95.0191, -111.296, 28.3578, 1.14 ) }
    dend_8 { pt3dadd( -94.7972, -112.898, 28.6692, 1.14 ) }
    dend_8 { pt3dadd( -94.3821, -114.879, 29.1893, 0.68 ) }
    dend_8 { pt3dadd( -93.8432, -116.965, 29.8321, 0.91 ) }
    dend_8 { pt3dadd( -93.34, -118.779, 30.4849, 0.91 ) }
    dend_8 { pt3dadd( -92.7176, -121.065, 31.3191, 0.91 ) }
    dend_8 { pt3dadd( -92.185, -123.127, 31.9726, 1.37 ) }
    dend_8 { pt3dadd( -91.5986, -125.557, 32.5541, 0.68 ) }
    dend_8 { pt3dadd( -90.9134, -128.798, 33.068, 0.68 ) }
    dend_8 { pt3dadd( -90.5347, -130.968, 33.2142, 1.37 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_8 { pt3dadd( -90.1387, -133.848, 33.2472, 0.91 ) }
    dend_8 { pt3dadd( -89.8635, -136.585, 33.1932, 0.91 ) }
    dend_8 { pt3dadd( -89.7116, -138.606, 33.1874, 1.14 ) }
    dend_8 { pt3dadd( -89.5963, -140.425, 33.2214, 1.14 ) }
    dend_8 { pt3dadd( -89.3261, -145.006, 33.4335, 0.68 ) }
    dend_8 { pt3dadd( -89.2093, -146.938, 33.5707, 0.68 ) }
    dend_8 { pt3dadd( -89.082, -149.13, 33.9153, 0.91 ) }
    dend_8 { pt3dadd( -89.023, -150.62, 34.3516, 0.68 ) }
    dend_8 { pt3dadd( -89.0144, -152.211, 35.0308, 0.68 ) }
    dend_8 { pt3dadd( -89.04, -153.068, 35.5286, 0.68 ) }
    dend_8 { pt3dadd( -89.1758, -154.025, 36.3047, 0.91 ) }
    dend_8 { pt3dadd( -89.5017, -155.355, 37.5255, 1.37 ) }
    dend_8 { pt3dadd( -89.9299, -156.65, 38.7982, 0.91 ) }
    dend_8 { pt3dadd( -90.5167, -158.103, 40.2834, 0.68 ) }
    dend_8 { pt3dadd( -91.1593, -159.399, 41.6746, 0.68 ) }
    dend_8 { pt3dadd( -91.784, -160.539, 42.9035, 0.68 ) }
    dend_8 { pt3dadd( -92.4581, -161.692, 44.1017, 0.91 ) }
    dend_8 { pt3dadd( -93.1431, -162.691, 45.0547, 0.91 ) }
    dend_8 { pt3dadd( -93.8211, -163.564, 45.8253, 0.91 ) }
    dend_8 { pt3dadd( -94.8624, -164.689, 46.7763, 0.68 ) }
    dend_8 { pt3dadd( -95.7215, -165.532, 47.4094, 0.68 ) }
    dend_8 { pt3dadd( -96.6892, -166.444, 47.9989, 0.91 ) }
    dend_8 { pt3dadd( -98.5088, -168.214, 48.8747, 0.68 ) }
    dend_8 { pt3dadd( -99.3139, -169.028, 49.2083, 0.68 ) }
    dend_8 { pt3dadd( -101.296, -171.133, 49.9225, 0.91 ) }
    dend_8 { pt3dadd( -102.557, -172.581, 50.3297, 1.37 ) }
    dend_8 { pt3dadd( -104.015, -174.384, 50.7506, 0.91 ) }
    dend_8 { pt3dadd( -105.707, -176.706, 51.3199, 0.46 ) }
    dend_8 { pt3dadd( -107.182, -178.944, 51.8283, 0.46 ) }
    dend_8 { pt3dadd( -107.773, -179.894, 52.0793, 0.46 ) }
    dend_8 { pt3dadd( -108.698, -181.496, 52.5897, 1.14 ) }
    dend_8 { pt3dadd( -109.404, -182.783, 53.0977, 1.14 ) }
    dend_8 { pt3dadd( -110.708, -185.138, 54.1058, 1.14 ) }
    dend_8 { pt3dadd( -111.659, -186.844, 54.7419, 0.91 ) }
    dend_8 { pt3dadd( -113.016, -189.392, 55.3016, 0.46 ) }
    dend_8 { pt3dadd( -113.766, -190.862, 55.4644, 0.68 ) }
    dend_8 { pt3dadd( -114.978, -193.24, 55.3749, 0.68 ) }
    dend_8 { pt3dadd( -116.101, -195.469, 54.9215, 0.68 ) }
    dend_8 { pt3dadd( -117.496, -198.263, 53.9168, 0.68 ) }
    dend_8 { pt3dadd( -118.517, -200.324, 52.9415, 0.68 ) }
    dend_8 { pt3dadd( -119.059, -201.444, 52.2712, 0.68 ) }
    dend_8 { pt3dadd( -120.022, -203.521, 50.9472, 0.68 ) }
    dend_8 { pt3dadd( -120.957, -205.467, 49.7005, 0.68 ) }
    dend_8 { pt3dadd( -121.388, -206.324, 49.208, 0.68 ) }
    dend_8 { pt3dadd( -122.245, -207.852, 48.5072, 0.68 ) }
    dend_8 { pt3dadd( -123.165, -209.341, 47.9348, 0.68 ) }
    dend_8 { pt3dadd( -124.329, -211.051, 47.3802, 0.68 ) }
    dend_8 { pt3dadd( -125.514, -212.61, 47.0464, 0.68 ) }
    dend_8 { pt3dadd( -126.363, -213.645, 46.9099, 0.68 ) }
    dend_8 { pt3dadd( -127.252, -214.713, 46.776, 0.68 ) }
    dend_8 { pt3dadd( -127.975, -215.588, 46.6799, 0.91 ) }
    dend_8 { pt3dadd( -129.753, -217.623, 46.4914, 0.46 ) }
    dend_8 { pt3dadd( -131.076, -219.122, 46.3208, 0.46 ) }
    dend_8 { pt3dadd( -132.16, -220.461, 46.1404, 0.46 ) }
    dend_8 { pt3dadd( -133.725, -222.525, 45.8152, 0.46 ) }
    dend_8 { pt3dadd( -134.743, -223.895, 45.5472, 0.91 ) }
    // Section: dend_4, id: dend_4, parent: dend_2 (entry count 56/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 5.64373, 12.4336, 32.328, 0.68 ) }
    dend_4 { pt3dadd( 4.57325, 12.5781, 32.328, 0.68 ) }
    dend_4 { pt3dadd( 2.98339, 12.7926, 32.328, 0.68 ) }
    dend_4 { pt3dadd( 2.24535, 12.8922, 32.328, 1.59 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 60/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 5.64373, 12.4336, 32.328, 1.14 ) }
    dend_3 { pt3dadd( 5.36433, 13.4471, 32.3562, 1.14 ) }
    dend_3 { pt3dadd( 4.43961, 14.9599, 31.9766, 0.91 ) }
    dend_3 { pt3dadd( 3.60396, 15.438, 31.2191, 0.91 ) }
    dend_3 { pt3dadd( 3.10342, 15.7245, 30.7654, 1.37 ) }
    dend_3 { pt3dadd( 1.93364, 16.3938, 29.7051, 0.91 ) }
    dend_3 { pt3dadd( 1.28242, 16.7665, 29.1148, 1.37 ) }
    dend_3 { pt3dadd( -0.237826, 17.0519, 27.5762, 1.37 ) }
    dend_3 { pt3dadd( -1.65372, 17.0254, 26.0224, 1.37 ) }
    // Section: dend_26, id: dend_26, parent: dend_20 (entry count 69/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 77.0181, -189.936, 21.3412, 0.46 ) }
    dend_26 { pt3dadd( 76.2624, -190.776, 23.996, 0.46 ) }
    dend_26 { pt3dadd( 75.5408, -191.561, 26.5378, 0.46 ) }
    dend_26 { pt3dadd( 74.5978, -192.527, 29.8885, 0.46 ) }
    dend_26 { pt3dadd( 73.9516, -193.069, 32.1668, 0.46 ) }
    dend_26 { pt3dadd( 73.2174, -193.584, 34.7769, 0.46 ) }
    dend_26 { pt3dadd( 72.3394, -194.123, 37.6328, 0.46 ) }
    dend_26 { pt3dadd( 71.7993, -194.388, 39.3455, 0.46 ) }
    dend_26 { pt3dadd( 71.096, -194.691, 41.465, 0.46 ) }
    dend_26 { pt3dadd( 70.1246, -195.001, 44.2883, 0.68 ) }
    dend_26 { pt3dadd( 69.2666, -195.156, 46.8169, 0.68 ) }
    dend_26 { pt3dadd( 68.5402, -195.183, 49.0251, 0.68 ) }
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 81/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 77.0181, -189.936, 21.3412, 0.68 ) }
    dend_21 { pt3dadd( 77.5985, -189.992, 22.1038, 0.68 ) }
    dend_21 { pt3dadd( 79.5019, -190.148, 24.948, 0.91 ) }
    dend_21 { pt3dadd( 80.5524, -190.243, 26.5472, 0.91 ) }
    dend_21 { pt3dadd( 81.5917, -190.345, 28.1401, 1.14 ) }
    dend_21 { pt3dadd( 83.1549, -190.515, 30.4233, 0.68 ) }
    dend_21 { pt3dadd( 84.4171, -190.686, 32.2841, 0.68 ) }
    dend_21 { pt3dadd( 86.3877, -190.966, 35.241, 0.68 ) }
    dend_21 { pt3dadd( 88.1024, -191.224, 37.8132, 0.46 ) }
    dend_21 { pt3dadd( 88.9793, -191.36, 39.116, 0.46 ) }
    dend_21 { pt3dadd( 89.8854, -191.521, 40.4461, 0.91 ) }
    dend_21 { pt3dadd( 91.5165, -191.825, 42.687, 0.91 ) }
    dend_21 { pt3dadd( 92.4506, -191.988, 43.7995, 1.14 ) }
    dend_21 { pt3dadd( 93.2212, -192.095, 44.5308, 1.14 ) }
    dend_21 { pt3dadd( 93.9866, -192.207, 45.1008, 0.23 ) }
    dend_21 { pt3dadd( 95.3849, -192.401, 45.8679, 1.37 ) }
    dend_21 { pt3dadd( 96.0564, -192.49, 46.0996, 0.68 ) }
    dend_21 { pt3dadd( 97.8676, -192.748, 46.4789, 0.68 ) }
    dend_21 { pt3dadd( 99.5216, -193.029, 46.7637, 1.14 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_21 { pt3dadd( 101.711, -193.462, 47.1402, 0.46 ) }
    dend_21 { pt3dadd( 102.581, -193.63, 47.3399, 0.46 ) }
    dend_21 { pt3dadd( 104.283, -193.933, 47.7803, 0.68 ) }
    dend_21 { pt3dadd( 106.725, -194.303, 48.4841, 0.68 ) }
    dend_21 { pt3dadd( 109.26, -194.631, 49.4104, 0.68 ) }
    dend_21 { pt3dadd( 110.35, -194.736, 49.93, 0.68 ) }
    dend_21 { pt3dadd( 112.196, -194.859, 51.0306, 0.68 ) }
    dend_21 { pt3dadd( 113.84, -194.94, 52.0945, 0.23 ) }
    dend_21 { pt3dadd( 115.241, -194.964, 53.0159, 0.68 ) }
    dend_21 { pt3dadd( 117.37, -194.942, 54.3436, 0.46 ) }
    dend_21 { pt3dadd( 118.929, -194.884, 55.3272, 1.14 ) }
    dend_21 { pt3dadd( 120.698, -194.777, 56.3725, 0.68 ) }
    dend_21 { pt3dadd( 121.719, -194.736, 56.9567, 0.68 ) }
    dend_21 { pt3dadd( 123.571, -194.664, 58.0498, 0.91 ) }
    dend_21 { pt3dadd( 124.51, -194.658, 58.5855, 0.91 ) }
    dend_21 { pt3dadd( 126.396, -194.732, 59.5095, 0.46 ) }
    dend_21 { pt3dadd( 127.44, -194.834, 59.9609, 0.91 ) }
    dend_21 { pt3dadd( 129.353, -195.146, 60.6525, 1.14 ) }
    dend_21 { pt3dadd( 131.385, -195.586, 61.3225, 0.91 ) }
    dend_21 { pt3dadd( 133.035, -196.002, 61.8254, 0.23 ) }
    dend_21 { pt3dadd( 134.471, -196.397, 62.194, 0.23 ) }
    dend_21 { pt3dadd( 135.632, -196.74, 62.4747, 0.91 ) }
    dend_21 { pt3dadd( 137.552, -197.248, 62.9811, 0.23 ) }
    dend_21 { pt3dadd( 138.407, -197.395, 63.2254, 0.68 ) }
    dend_21 { pt3dadd( 140.19, -197.558, 63.8203, 0.23 ) }
    dend_21 { pt3dadd( 140.7, -197.546, 64.0278, 0.91 ) }
    dend_21 { pt3dadd( 142.773, -197.221, 65.1283, 1.14 ) }
    dend_21 { pt3dadd( 144.323, -196.814, 66.0836, 1.37 ) }
    dend_21 { pt3dadd( 145.693, -196.344, 67.0018, 0.23 ) }
    dend_21 { pt3dadd( 146.878, -195.893, 67.7533, 0.23 ) }
    dend_21 { pt3dadd( 147.679, -195.573, 68.2099, 0.23 ) }
    dend_21 { pt3dadd( 149.559, -194.804, 69.3535, 0.23 ) }
    dend_21 { pt3dadd( 150.099, -194.563, 69.7227, 0.23 ) }
    dend_21 { pt3dadd( 150.915, -194.21, 70.3089, 0.68 ) }
    dend_21 { pt3dadd( 151.881, -193.823, 71.0479, 1.14 ) }
    dend_21 { pt3dadd( 152.891, -193.435, 71.9157, 0.91 ) }
    dend_21 { pt3dadd( 155.21, -192.687, 74.0132, 0.91 ) }
    dend_21 { pt3dadd( 156.66, -192.236, 75.5117, 1.14 ) }
    // Section: dend_17, id: dend_17, parent: dend_15 (entry count 38/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 43.5796, -40.6022, -97.045, 0.91 ) }
    dend_17 { pt3dadd( 44.4853, -42.3118, -97.6163, 0.91 ) }
    dend_17 { pt3dadd( 45.4347, -43.9406, -98.3448, 0.91 ) }
    dend_17 { pt3dadd( 46.1205, -45.025, -99.0405, 0.68 ) }
    dend_17 { pt3dadd( 47.0967, -46.3111, -100.138, 0.68 ) }
    dend_17 { pt3dadd( 48.0255, -47.3391, -101.071, 0.68 ) }
    dend_17 { pt3dadd( 48.7162, -47.9651, -101.736, 0.68 ) }
    dend_17 { pt3dadd( 50.0244, -48.8379, -103.092, 0.68 ) }
    dend_17 { pt3dadd( 51.7374, -49.6147, -104.779, 0.68 ) }
    dend_17 { pt3dadd( 53.3178, -50.0883, -106.352, 0.68 ) }
    dend_17 { pt3dadd( 54.749, -50.2972, -107.718, 0.68 ) }
    dend_17 { pt3dadd( 56.6905, -50.2819, -109.599, 0.68 ) }
    dend_17 { pt3dadd( 58.0991, -50.0446, -110.991, 0.68 ) }
    dend_17 { pt3dadd( 58.7321, -49.8469, -111.605, 0.23 ) }
    dend_17 { pt3dadd( 60.0565, -49.3511, -112.878, 0.23 ) }
    dend_17 { pt3dadd( 61.2004, -48.9101, -114.042, 0.46 ) }
    dend_17 { pt3dadd( 62.2209, -48.5557, -115.068, 0.46 ) }
    dend_17 { pt3dadd( 63.7558, -48.1265, -116.388, 0.46 ) }
    dend_17 { pt3dadd( 65.4523, -47.9766, -117.628, 0.46 ) }
    dend_17 { pt3dadd( 66.9905, -48.1322, -118.602, 0.46 ) }
    dend_17 { pt3dadd( 67.4919, -48.257, -118.838, 0.91 ) }
    dend_17 { pt3dadd( 69.0767, -48.7482, -119.596, 0.46 ) }
    dend_17 { pt3dadd( 69.8043, -49.0048, -119.958, 0.46 ) }
    dend_17 { pt3dadd( 72.2411, -49.9385, -121.159, 0.46 ) }
    dend_17 { pt3dadd( 73.2765, -50.3784, -121.703, 0.91 ) }
    dend_17 { pt3dadd( 75.9135, -51.5002, -123.185, 0.68 ) }
    dend_17 { pt3dadd( 78.2475, -52.4708, -124.622, 1.37 ) }
    dend_17 { pt3dadd( 79.4891, -52.9886, -125.5, 1.37 ) }
    dend_17 { pt3dadd( 80.3893, -53.3327, -126.176, 0.91 ) }
    dend_17 { pt3dadd( 81.3088, -53.6607, -126.943, 0.91 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 68/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 43.5796, -40.6022, -97.045, 0.91 ) }
    dend_16 { pt3dadd( 45.1352, -40.0276, -97.7904, 0.91 ) }
    dend_16 { pt3dadd( 46.6012, -39.2964, -98.4995, 0.68 ) }
    dend_16 { pt3dadd( 47.3621, -38.8624, -98.8547, 0.68 ) }
    dend_16 { pt3dadd( 49.3298, -37.6543, -99.6783, 0.68 ) }
    dend_16 { pt3dadd( 50.5655, -36.8891, -100.14, 0.46 ) }
    dend_16 { pt3dadd( 51.4813, -36.3089, -100.497, 0.46 ) }
    dend_16 { pt3dadd( 52.7364, -35.355, -101.039, 0.46 ) }
    dend_16 { pt3dadd( 53.2355, -34.9397, -101.227, 0.91 ) }
    dend_16 { pt3dadd( 54.4023, -33.9889, -101.653, 1.37 ) }
    dend_16 { pt3dadd( 55.115, -33.4291, -101.877, 0.68 ) }
    dend_16 { pt3dadd( 56.6932, -32.3372, -102.289, 0.68 ) }
    dend_16 { pt3dadd( 57.7222, -31.7382, -102.625, 0.91 ) }
    dend_16 { pt3dadd( 59.6461, -30.725, -103.445, 0.91 ) }
    dend_16 { pt3dadd( 61.0769, -30.0282, -104.2, 0.46 ) }
    dend_16 { pt3dadd( 62.362, -29.4346, -104.963, 0.46 ) }
    dend_16 { pt3dadd( 64.3046, -28.616, -106.305, 0.46 ) }
    dend_16 { pt3dadd( 66.4638, -27.7808, -107.923, 0.68 ) }
    dend_16 { pt3dadd( 67.6715, -27.3296, -108.929, 0.68 ) }
    dend_16 { pt3dadd( 68.9407, -26.8738, -110.147, 0.68 ) }
    dend_16 { pt3dadd( 69.8806, -26.4832, -111.103, 0.91 ) }
    dend_16 { pt3dadd( 71.4787, -25.761, -112.845, 0.91 ) }
    dend_16 { pt3dadd( 71.9775, -25.4929, -113.4, 0.91 ) }
    dend_16 { pt3dadd( 72.4437, -25.1761, -113.864, 0.91 ) }
    dend_16 { pt3dadd( 74.2982, -23.7583, -115.419, 0.91 ) }
    dend_16 { pt3dadd( 75.2691, -22.9536, -116.126, 0.91 ) }
    dend_16 { pt3dadd( 76.2734, -22.1295, -116.93, 0.91 ) }
    dend_16 { pt3dadd( 77.5189, -21.0951, -117.91, 0.91 ) }
    dend_16 { pt3dadd( 78.2284, -20.539, -118.516, 0.91 ) }
    dend_16 { pt3dadd( 79.7221, -19.4056, -119.792, 0.91 ) }
    dend_16 { pt3dadd( 80.3418, -18.9859, -120.289, 0.91 ) }
    dend_16 { pt3dadd( 83.0957, -17.5483, -122.325, 1.14 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_16 { pt3dadd( 83.861, -17.2539, -122.807, 1.14 ) }
    dend_16 { pt3dadd( 86.2046, -16.6178, -124.05, 0.91 ) }
    dend_16 { pt3dadd( 87.4257, -16.3659, -124.625, 0.91 ) }
    dend_16 { pt3dadd( 89.649, -15.9991, -125.514, 0.91 ) }
    dend_16 { pt3dadd( 91.1857, -15.818, -125.993, 0.91 ) }
    dend_16 { pt3dadd( 93.3783, -15.6741, -126.512, 0.91 ) }
    dend_16 { pt3dadd( 95.0209, -15.6817, -126.896, 0.91 ) }
    dend_16 { pt3dadd( 96.2618, -15.7561, -127.185, 0.91 ) }
    dend_16 { pt3dadd( 98.1176, -15.8849, -127.69, 0.68 ) }
    dend_16 { pt3dadd( 99.8201, -15.9883, -128.219, 0.68 ) }
    dend_16 { pt3dadd( 101.284, -16.1315, -128.736, 0.68 ) }
    dend_16 { pt3dadd( 102.203, -16.2653, -129.07, 0.68 ) }
    dend_16 { pt3dadd( 103.107, -16.3896, -129.435, 0.68 ) }
    dend_16 { pt3dadd( 104.324, -16.4528, -129.85, 0.68 ) }
    dend_16 { pt3dadd( 105.041, -16.4079, -130.043, 0.68 ) }
    dend_16 { pt3dadd( 106.332, -16.2115, -130.284, 0.68 ) }
    dend_16 { pt3dadd( 107.907, -15.9092, -130.502, 0.68 ) }
    dend_16 { pt3dadd( 109.464, -15.6335, -130.808, 0.68 ) }
    dend_16 { pt3dadd( 111.39, -15.3874, -131.344, 0.68 ) }
    dend_16 { pt3dadd( 112.277, -15.2959, -131.676, 0.68 ) }
    dend_16 { pt3dadd( 113.421, -15.1864, -132.175, 0.68 ) }
    dend_16 { pt3dadd( 114.418, -15.1476, -132.652, 0.68 ) }
    dend_16 { pt3dadd( 116.741, -15.3148, -133.777, 0.46 ) }
    dend_16 { pt3dadd( 118.503, -15.6707, -134.537, 0.46 ) }
    dend_16 { pt3dadd( 119.688, -16.0006, -135.012, 0.46 ) }
    dend_16 { pt3dadd( 120.687, -16.3123, -135.32, 0.46 ) }
    dend_16 { pt3dadd( 122.329, -16.806, -135.62, 0.68 ) }
    dend_16 { pt3dadd( 124.198, -17.3048, -135.742, 0.68 ) }
    dend_16 { pt3dadd( 126.575, -17.7771, -135.594, 0.68 ) }
    dend_16 { pt3dadd( 128.36, -17.9966, -135.399, 0.46 ) }
    dend_16 { pt3dadd( 131.206, -18.1278, -135.037, 0.46 ) }
    dend_16 { pt3dadd( 133.662, -18.0293, -134.732, 0.46 ) }
    dend_16 { pt3dadd( 136.714, -17.6798, -134.394, 0.46 ) }
    dend_16 { pt3dadd( 139.278, -17.249, -134.191, 0.23 ) }
    dend_16 { pt3dadd( 141.176, -16.8437, -134.107, 0.23 ) }
    dend_16 { pt3dadd( 142.113, -16.6532, -134.107, 0.23 ) }
    dend_16 { pt3dadd( 143.572, -16.4446, -134.156, 0.23 ) }
    dend_16 { pt3dadd( 145.132, -16.3902, -134.249, 0.23 ) }
    dend_16 { pt3dadd( 148.055, -16.4582, -134.394, 0.23 ) }
    dend_16 { pt3dadd( 148.954, -16.5052, -134.424, 0.23 ) }
    dend_16 { pt3dadd( 150.647, -16.6454, -134.407, 0.23 ) }
    dend_16 { pt3dadd( 153.021, -16.9089, -134.341, 0.46 ) }
    dend_16 { pt3dadd( 155.756, -17.255, -134.105, 0.46 ) }
    dend_16 { pt3dadd( 157.343, -17.4841, -133.896, 0.46 ) }
    dend_16 { pt3dadd( 160.223, -17.9284, -133.433, 0.46 ) }
    dend_16 { pt3dadd( 162.498, -18.2664, -133.134, 0.46 ) }
    dend_16 { pt3dadd( 164.682, -18.5015, -132.924, 0.46 ) }
    dend_16 { pt3dadd( 166.845, -18.6896, -132.83, 0.46 ) }
    dend_16 { pt3dadd( 168.309, -18.8616, -132.841, 0.46 ) }
    dend_16 { pt3dadd( 170.113, -19.0974, -132.926, 0.46 ) }
    dend_16 { pt3dadd( 172.584, -19.3691, -133.212, 0.46 ) }
    dend_16 { pt3dadd( 174.607, -19.5307, -133.631, 0.46 ) }
    dend_16 { pt3dadd( 176.549, -19.6566, -134.137, 0.46 ) }
    dend_16 { pt3dadd( 179.416, -19.8743, -134.943, 0.46 ) }
    dend_16 { pt3dadd( 181.821, -20.0747, -135.588, 0.68 ) }
    dend_16 { pt3dadd( 184.736, -20.3626, -136.322, 0.46 ) }
    dend_16 { pt3dadd( 187.787, -20.7668, -137.018, 0.46 ) }
    dend_16 { pt3dadd( 190.045, -21.1655, -137.515, 0.68 ) }
    dend_16 { pt3dadd( 192.327, -21.7006, -137.967, 0.46 ) }
    dend_16 { pt3dadd( 194.121, -22.2646, -138.266, 0.46 ) }
    dend_16 { pt3dadd( 194.783, -22.5416, -138.345, 0.68 ) }
    dend_16 { pt3dadd( 196.795, -23.6163, -138.426, 0.68 ) }
    dend_16 { pt3dadd( 198.827, -24.9033, -138.382, 0.68 ) }
    dend_16 { pt3dadd( 200.845, -26.4372, -138.354, 0.68 ) }
    dend_16 { pt3dadd( 201.473, -26.9894, -138.356, 0.68 ) }
    dend_16 { pt3dadd( 202.836, -28.328, -138.356, 0.68 ) }
    dend_16 { pt3dadd( 203.531, -28.9906, -138.356, 2.05 ) }
    // Section: dend_13, id: dend_13, parent: dend_9 (entry count 67/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -48.5826, -38.6985, -21.5205, 1.14 ) }
    dend_13 { pt3dadd( -49.9211, -40.2557, -20.1753, 1.14 ) }
    dend_13 { pt3dadd( -51.0272, -41.5205, -19.0183, 0.91 ) }
    dend_13 { pt3dadd( -52.1378, -42.6238, -17.8798, 0.91 ) }
    dend_13 { pt3dadd( -53.1988, -43.5918, -16.8694, 0.91 ) }
    dend_13 { pt3dadd( -54.0417, -44.2937, -16.1533, 0.46 ) }
    dend_13 { pt3dadd( -55.5939, -45.4847, -15.0204, 0.46 ) }
    dend_13 { pt3dadd( -57.3205, -46.6825, -14.0183, 0.46 ) }
    dend_13 { pt3dadd( -58.826, -47.5863, -13.2773, 0.68 ) }
    dend_13 { pt3dadd( -60.1821, -48.253, -12.703, 0.68 ) }
    dend_13 { pt3dadd( -61.7914, -48.8721, -12.0978, 0.68 ) }
    dend_13 { pt3dadd( -64.0849, -49.5336, -11.3263, 0.46 ) }
    dend_13 { pt3dadd( -66.2745, -50.0319, -10.7338, 0.68 ) }
    dend_13 { pt3dadd( -68.4607, -50.3886, -10.1937, 0.68 ) }
    dend_13 { pt3dadd( -69.2944, -50.4818, -9.98236, 0.68 ) }
    dend_13 { pt3dadd( -70.7038, -50.5359, -9.60873, 0.68 ) }
    dend_13 { pt3dadd( -73.078, -50.4577, -8.94346, 0.68 ) }
    dend_13 { pt3dadd( -74.4506, -50.329, -8.54038, 0.68 ) }
    dend_13 { pt3dadd( -77.2052, -50.0142, -7.79622, 0.68 ) }
    dend_13 { pt3dadd( -79.7766, -49.7567, -7.18098, 0.91 ) }
    dend_13 { pt3dadd( -81.3417, -49.6514, -6.7854, 0.91 ) }
    dend_13 { pt3dadd( -83.6441, -49.5752, -6.19784, 0.91 ) }
    dend_13 { pt3dadd( -85.5632, -49.5594, -5.68068, 0.91 ) }
    dend_13 { pt3dadd( -86.8483, -49.585, -5.3329, 0.91 ) }
    dend_13 { pt3dadd( -88.4741, -49.7007, -4.90733, 0.68 ) }
    dend_13 { pt3dadd( -90.6062, -49.9573, -4.43739, 0.68 ) }
    dend_13 { pt3dadd( -92.3843, -50.3029, -4.121, 1.14 ) }
    dend_13 { pt3dadd( -93.9199, -50.6845, -3.92672, 0.91 ) }
    dend_13 { pt3dadd( -96.6938, -51.4212, -3.68945, 0.91 ) }
    dend_13 { pt3dadd( -98.6816, -51.9407, -3.56323, 1.14 ) }
    dend_13 { pt3dadd( -100.601, -52.4351, -3.56555, 1.14 ) }
    dend_13 { pt3dadd( -103.033, -53.0523, -3.72694, 1.14 ) }
    dend_13 { pt3dadd( -104.653, -53.4954, -3.90563, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_13 { pt3dadd( -106.759, -54.114, -4.23488, 0.68 ) }
    dend_13 { pt3dadd( -108.145, -54.5483, -4.48835, 1.14 ) }
    dend_13 { pt3dadd( -110.024, -55.1024, -4.84279, 1.14 ) }
    dend_13 { pt3dadd( -111.567, -55.5418, -5.12335, 0.68 ) }
    dend_13 { pt3dadd( -113.671, -56.1333, -5.56509, 0.68 ) }
    dend_13 { pt3dadd( -115.277, -56.6166, -5.91633, 0.68 ) }
    dend_13 { pt3dadd( -116.8, -57.0752, -6.2363, 0.91 ) }
    dend_13 { pt3dadd( -119.007, -57.7413, -6.64003, 0.91 ) }
    dend_13 { pt3dadd( -121.339, -58.4301, -6.98399, 0.68 ) }
    dend_13 { pt3dadd( -122.959, -58.9039, -7.18496, 0.68 ) }
    dend_13 { pt3dadd( -124.718, -59.4168, -7.2924, 1.14 ) }
    dend_13 { pt3dadd( -126.943, -60.1349, -7.27753, 0.68 ) }
    dend_13 { pt3dadd( -128.254, -60.6258, -7.16715, 0.68 ) }
    dend_13 { pt3dadd( -129.111, -61.0003, -7.02359, 1.37 ) }
    dend_13 { pt3dadd( -130.888, -61.851, -6.52401, 1.37 ) }
    dend_13 { pt3dadd( -132.387, -62.6461, -6.00047, 0.91 ) }
    dend_13 { pt3dadd( -133.833, -63.5319, -5.39061, 0.68 ) }
    dend_13 { pt3dadd( -135.499, -64.6551, -4.62263, 0.68 ) }
    dend_13 { pt3dadd( -136.508, -65.3707, -4.12597, 0.68 ) }
    dend_13 { pt3dadd( -137.837, -66.3454, -3.47146, 0.91 ) }
    dend_13 { pt3dadd( -138.858, -67.1092, -3.02054, 0.68 ) }
    dend_13 { pt3dadd( -140.809, -68.555, -2.35452, 0.68 ) }
    dend_13 { pt3dadd( -141.722, -69.216, -2.10094, 0.68 ) }
    dend_13 { pt3dadd( -142.858, -70.024, -1.85343, 0.68 ) }
    dend_13 { pt3dadd( -144.322, -71.0371, -1.63268, 0.91 ) }
    dend_13 { pt3dadd( -145.744, -71.9677, -1.53646, 0.68 ) }
    dend_13 { pt3dadd( -147.302, -72.8927, -1.53935, 1.14 ) }
    dend_13 { pt3dadd( -148.271, -73.4174, -1.63561, 1.14 ) }
    dend_13 { pt3dadd( -149.882, -74.2671, -1.86619, 0.68 ) }
    dend_13 { pt3dadd( -151.877, -75.2654, -2.21186, 0.68 ) }
    dend_13 { pt3dadd( -153.529, -76.0732, -2.50296, 0.46 ) }
    dend_13 { pt3dadd( -155.781, -77.1943, -2.90898, 0.46 ) }
    dend_13 { pt3dadd( -157.584, -78.1327, -3.2849, 0.68 ) }
    dend_13 { pt3dadd( -159.344, -79.0883, -3.68392, 1.14 ) }
    dend_13 { pt3dadd( -161.068, -80.1066, -4.0989, 0.91 ) }
    dend_13 { pt3dadd( -162.166, -80.8283, -4.36715, 0.68 ) }
    dend_13 { pt3dadd( -163.2, -81.5282, -4.58923, 0.68 ) }
    dend_13 { pt3dadd( -164.488, -82.3909, -4.79778, 1.14 ) }
    dend_13 { pt3dadd( -165.436, -82.9891, -4.89516, 1.14 ) }
    dend_13 { pt3dadd( -166.798, -83.7907, -5.00907, 0.68 ) }
    dend_13 { pt3dadd( -168.187, -84.5483, -5.08928, 0.68 ) }
    dend_13 { pt3dadd( -169.917, -85.4449, -5.1263, 0.68 ) }
    dend_13 { pt3dadd( -171.749, -86.3645, -5.15612, 0.68 ) }
    dend_13 { pt3dadd( -172.977, -86.9835, -5.17042, 0.68 ) }
    dend_13 { pt3dadd( -174.185, -87.6092, -5.2089, 0.91 ) }
    dend_13 { pt3dadd( -175.801, -88.4433, -5.30689, 0.91 ) }
    dend_13 { pt3dadd( -177.843, -89.5567, -5.4847, 0.68 ) }
    dend_13 { pt3dadd( -179.726, -90.7425, -5.74962, 0.46 ) }
    dend_13 { pt3dadd( -180.624, -91.377, -5.93094, 0.91 ) }
    dend_13 { pt3dadd( -181.292, -91.8505, -6.08762, 0.91 ) }
    dend_13 { pt3dadd( -182.66, -92.8299, -6.44989, 0.46 ) }
    dend_13 { pt3dadd( -183.727, -93.5847, -6.78141, 0.46 ) }
    dend_13 { pt3dadd( -185.532, -94.8033, -7.36071, 0.46 ) }
    dend_13 { pt3dadd( -186.992, -95.833, -7.80849, 0.46 ) }
    dend_13 { pt3dadd( -189.231, -97.5635, -8.47974, 0.68 ) }
    dend_13 { pt3dadd( -190.171, -98.3716, -8.74767, 1.14 ) }
    dend_13 { pt3dadd( -192.111, -100.254, -9.26145, 1.14 ) }
    dend_13 { pt3dadd( -193.447, -101.696, -9.58716, 0.91 ) }
    dend_13 { pt3dadd( -194.582, -103.03, -9.82074, 0.68 ) }
    dend_13 { pt3dadd( -195.794, -104.708, -10.0339, 1.14 ) }
    dend_13 { pt3dadd( -196.542, -105.901, -10.138, 0.91 ) }
    dend_13 { pt3dadd( -197.616, -107.749, -10.2675, 0.68 ) }
    dend_13 { pt3dadd( -198.29, -108.984, -10.3266, 0.68 ) }
    dend_13 { pt3dadd( -199.181, -110.606, -10.4118, 0.68 ) }
    dend_13 { pt3dadd( -200.645, -113.14, -10.5539, 1.14 ) }
    dend_13 { pt3dadd( -201.894, -115.278, -10.6399, 0.68 ) }
    dend_13 { pt3dadd( -203.113, -117.365, -10.6889, 0.23 ) }
    dend_13 { pt3dadd( -203.757, -118.478, -10.7302, 0.23 ) }
    dend_13 { pt3dadd( -204.479, -119.711, -10.706, 1.37 ) }
    dend_13 { pt3dadd( -205.327, -121.202, -10.5912, 0.46 ) }
    dend_13 { pt3dadd( -206.135, -122.706, -10.4065, 0.46 ) }
    dend_13 { pt3dadd( -206.899, -124.256, -10.1594, 0.23 ) }
    dend_13 { pt3dadd( -207.771, -126.098, -9.7399, 0.23 ) }
    dend_13 { pt3dadd( -209.004, -128.927, -9.04206, 0.91 ) }
    dend_13 { pt3dadd( -209.681, -130.629, -8.60691, 0.91 ) }
    dend_13 { pt3dadd( -210.698, -133.323, -7.93872, 0.68 ) }
    dend_13 { pt3dadd( -211.315, -134.951, -7.50544, 1.14 ) }
    dend_13 { pt3dadd( -211.985, -136.687, -7.01029, 0.68 ) }
    dend_13 { pt3dadd( -212.65, -138.402, -6.51535, 0.68 ) }
    dend_13 { pt3dadd( -213.51, -140.423, -5.97486, 0.68 ) }
    dend_13 { pt3dadd( -214.503, -142.496, -5.27834, 0.68 ) }
    dend_13 { pt3dadd( -215.784, -144.637, -4.38363, 0.68 ) }
    dend_13 { pt3dadd( -216.517, -145.644, -3.86793, 1.14 ) }
    dend_13 { pt3dadd( -217.369, -146.619, -3.26086, 1.14 ) }
    dend_13 { pt3dadd( -219.026, -148.275, -2.00617, 0.68 ) }
    dend_13 { pt3dadd( -220.397, -149.463, -0.974847, 0.68 ) }
    dend_13 { pt3dadd( -222.248, -150.918, 0.354829, 0.68 ) }
    dend_13 { pt3dadd( -223.722, -152.036, 1.36553, 0.68 ) }
    dend_13 { pt3dadd( -225.358, -153.225, 2.41833, 0.68 ) }
    dend_13 { pt3dadd( -226.388, -153.95, 3.03814, 1.14 ) }
    dend_13 { pt3dadd( -227.731, -154.939, 3.78462, 0.91 ) }
    dend_13 { pt3dadd( -228.846, -155.85, 4.44225, 0.46 ) }
    dend_13 { pt3dadd( -229.948, -156.896, 5.15972, 0.46 ) }
    dend_13 { pt3dadd( -231.198, -158.185, 6.06922, 0.91 ) }
    dend_13 { pt3dadd( -232.535, -159.689, 7.22983, 0.91 ) }
    dend_13 { pt3dadd( -234.235, -161.672, 8.97744, 0.68 ) }
    dend_13 { pt3dadd( -235.446, -163.192, 10.4316, 0.68 ) }
    dend_13 { pt3dadd( -236.022, -163.951, 11.2066, 0.91 ) }
    dend_13 { pt3dadd( -237.086, -165.464, 12.7429, 0.68 ) }
    dend_13 { pt3dadd( -238.012, -166.895, 14.1796, 0.91 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_13 { pt3dadd( -239.371, -169.041, 16.124, 0.91 ) }
    dend_13 { pt3dadd( -240.299, -170.515, 17.2946, 0.91 ) }
    dend_13 { pt3dadd( -241.385, -172.112, 18.3955, 0.91 ) }
    dend_13 { pt3dadd( -242.647, -173.847, 19.4881, 0.91 ) }
    dend_13 { pt3dadd( -243.231, -174.631, 19.8826, 0.91 ) }
    dend_13 { pt3dadd( -244.719, -176.602, 20.6351, 0.91 ) }
    dend_13 { pt3dadd( -245.577, -177.882, 20.9255, 0.91 ) }
    dend_13 { pt3dadd( -246.556, -179.529, 21.168, 0.91 ) }
    dend_13 { pt3dadd( -247.989, -182.228, 21.527, 0.68 ) }
    dend_13 { pt3dadd( -249.075, -184.54, 21.9413, 0.68 ) }
    dend_13 { pt3dadd( -250.136, -187.172, 22.569, 0.46 ) }
    dend_13 { pt3dadd( -251.326, -190.597, 23.6103, 0.46 ) }
    dend_13 { pt3dadd( -252.215, -193.717, 24.7234, 0.46 ) }
    dend_13 { pt3dadd( -252.982, -197.286, 26.258, 0.46 ) }
    dend_13 { pt3dadd( -253.34, -199.823, 27.6503, 0.46 ) }
    dend_13 { pt3dadd( -253.495, -202.32, 29.4208, 0.46 ) }
    dend_13 { pt3dadd( -253.524, -205.023, 31.8079, 0.46 ) }
    dend_13 { pt3dadd( -253.529, -207.448, 34.3551, 0.46 ) }
    dend_13 { pt3dadd( -253.523, -209.738, 37.0237, 0.46 ) }
    dend_13 { pt3dadd( -253.555, -212.287, 40.1402, 0.46 ) }
    dend_13 { pt3dadd( -253.793, -215.234, 43.8569, 0.46 ) }
    dend_13 { pt3dadd( -254.166, -217.202, 46.3729, 0.46 ) }
    dend_13 { pt3dadd( -254.898, -219.431, 49.1889, 0.46 ) }
    dend_13 { pt3dadd( -255.722, -220.883, 50.9645, 0.68 ) }
    dend_13 { pt3dadd( -256.599, -221.956, 52.2215, 0.46 ) }
    dend_13 { pt3dadd( -258.435, -223.673, 54.1499, 0.46 ) }
    dend_13 { pt3dadd( -260.854, -225.43, 56.1663, 0.46 ) }
    dend_13 { pt3dadd( -261.836, -226.035, 56.8735, 0.68 ) }
    dend_13 { pt3dadd( -264.85, -227.537, 58.9524, 0.23 ) }
    dend_13 { pt3dadd( -266.585, -228.227, 60.1427, 0.23 ) }
    dend_13 { pt3dadd( -267.137, -228.389, 60.5264, 0.46 ) }
    dend_13 { pt3dadd( -269.192, -228.837, 61.9355, 0.23 ) }
    dend_13 { pt3dadd( -270.35, -228.985, 62.7645, 0.68 ) }
    dend_13 { pt3dadd( -272.942, -229.19, 64.6406, 0.23 ) }
    dend_13 { pt3dadd( -273.925, -229.199, 65.2945, 0.23 ) }
    dend_13 { pt3dadd( -275.406, -229.179, 66.2403, 0.68 ) }
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 36/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -48.5826, -38.6985, -21.5205, 0.91 ) }
    dend_10 { pt3dadd( -49.0737, -38.8272, -22.0024, 0.91 ) }
    dend_10 { pt3dadd( -50.0682, -38.9256, -22.8342, 0.91 ) }
    dend_10 { pt3dadd( -51.9617, -38.8971, -24.418, 0.91 ) }
    dend_10 { pt3dadd( -53.5336, -38.7867, -25.6464, 0.68 ) }
    dend_10 { pt3dadd( -55.6364, -38.6391, -27.2898, 0.68 ) }
    dend_10 { pt3dadd( -56.7073, -38.5639, -28.1268, 0.68 ) }
    dend_10 { pt3dadd( -58.1033, -38.4614, -29.165, 0.91 ) }
    dend_10 { pt3dadd( -60.0708, -38.1898, -30.4062, 0.91 ) }
    dend_10 { pt3dadd( -61.1746, -37.8443, -30.951, 0.91 ) }
    // Section: dend_25, id: dend_25, parent: dend_21 (entry count 46/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 156.66, -192.236, 75.5117, 0.46 ) }
    dend_25 { pt3dadd( 157.853, -191.178, 75.4917, 0.46 ) }
    dend_25 { pt3dadd( 158.544, -190.551, 75.483, 0.46 ) }
    dend_25 { pt3dadd( 159.745, -189.546, 75.6362, 0.46 ) }
    dend_25 { pt3dadd( 160.763, -188.747, 75.8624, 0.46 ) }
    dend_25 { pt3dadd( 162.493, -187.39, 76.2466, 0.46 ) }
    dend_25 { pt3dadd( 163.705, -186.438, 76.5158, 0.46 ) }
    dend_25 { pt3dadd( 165.103, -185.405, 76.8847, 0.46 ) }
    dend_25 { pt3dadd( 167.245, -183.858, 77.5406, 0.46 ) }
    dend_25 { pt3dadd( 168.603, -182.898, 78.0469, 0.46 ) }
    // Section: dend_22, id: dend_22, parent: dend_21 (entry count 56/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( 156.66, -192.236, 75.5117, 0.68 ) }
    dend_22 { pt3dadd( 156.82, -192.086, 76.6958, 0.68 ) }
    dend_22 { pt3dadd( 156.938, -191.925, 77.823, 0.68 ) }
    dend_22 { pt3dadd( 157.197, -191.658, 79.5977, 0.68 ) }
    dend_22 { pt3dadd( 157.586, -191.369, 81.7265, 0.68 ) }
    dend_22 { pt3dadd( 157.899, -191.165, 83.6446, 0.68 ) }
    dend_22 { pt3dadd( 158.177, -190.949, 85.7056, 0.68 ) }
    dend_22 { pt3dadd( 158.279, -190.764, 87.1949, 0.68 ) }
    dend_22 { pt3dadd( 158.268, -190.407, 89.705, 0.68 ) }
    dend_22 { pt3dadd( 158.259, -190.228, 90.9822, 0.68 ) }
    dend_22 { pt3dadd( 158.337, -189.882, 92.96, 0.68 ) }
    dend_22 { pt3dadd( 158.421, -189.653, 93.9805, 1.14 ) }
    dend_22 { pt3dadd( 158.712, -189.112, 96.0863, 0.91 ) }
    dend_22 { pt3dadd( 159.018, -188.661, 97.7973, 0.91 ) }
    dend_22 { pt3dadd( 159.66, -188.102, 99.8719, 0.91 ) }
    dend_22 { pt3dadd( 159.976, -187.925, 100.533, 1.14 ) }
    dend_22 { pt3dadd( 160.442, -187.769, 101.276, 1.14 ) }
    dend_22 { pt3dadd( 161.554, -187.597, 102.854, 0.68 ) }
    dend_22 { pt3dadd( 162.782, -187.595, 104.372, 0.68 ) }
    dend_22 { pt3dadd( 164.242, -187.672, 106.066, 1.37 ) }
    dend_22 { pt3dadd( 165.577, -187.763, 107.692, 0.68 ) }
    dend_22 { pt3dadd( 166.555, -187.877, 108.914, 0.68 ) }
    dend_22 { pt3dadd( 167.274, -187.999, 109.796, 0.68 ) }
    dend_22 { pt3dadd( 168.135, -188.149, 110.806, 0.68 ) }
    dend_22 { pt3dadd( 169.349, -188.327, 112.164, 0.68 ) }
    dend_22 { pt3dadd( 170.63, -188.448, 113.57, 0.23 ) }
    dend_22 { pt3dadd( 172.024, -188.447, 115.039, 0.23 ) }
    dend_22 { pt3dadd( 172.645, -188.41, 115.677, 0.68 ) }
    dend_22 { pt3dadd( 174.439, -188.22, 117.532, 0.23 ) }
    dend_22 { pt3dadd( 174.904, -188.158, 118.036, 0.91 ) }
    dend_22 { pt3dadd( 176.493, -187.991, 119.697, 0.68 ) }
    dend_22 { pt3dadd( 178.118, -187.737, 121.29, 0.68 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 88/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 81.3088, -53.6607, -126.943, 0.23 ) }
    dend_19 { pt3dadd( 79.9705, -56.1159, -125.641, 0.23 ) }
    dend_19 { pt3dadd( 79.1617, -57.5999, -124.854, 0.23 ) }
    dend_19 { pt3dadd( 78.4892, -58.8337, -124.2, 0.23 ) }
    dend_19 { pt3dadd( 77.7317, -60.2235, -123.463, 0.23 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 93/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 81.3088, -53.6607, -126.943, 0.46 ) }
    dend_18 { pt3dadd( 82.6723, -54.6679, -127.341, 0.46 ) }
    dend_18 { pt3dadd( 83.9915, -55.6936, -127.777, 0.46 ) }
    dend_18 { pt3dadd( 85.9218, -57.2194, -128.79, 0.46 ) }
    dend_18 { pt3dadd( 87.4238, -58.4973, -129.901, 0.46 ) }
    dend_18 { pt3dadd( 88.5137, -59.4642, -130.865, 0.46 ) }
    dend_18 { pt3dadd( 90.0629, -60.7796, -132.264, 0.46 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_18 { pt3dadd( 90.8037, -61.3957, -132.96, 1.37 ) }
    dend_18 { pt3dadd( 92.9517, -63.1502, -134.962, 1.37 ) }
    dend_18 { pt3dadd( 94.6163, -64.5715, -136.613, 0.91 ) }
    dend_18 { pt3dadd( 95.8416, -65.5721, -137.776, 0.91 ) }
    dend_18 { pt3dadd( 96.9769, -66.5017, -138.792, 1.14 ) }
    dend_18 { pt3dadd( 98.2185, -67.5872, -139.608, 1.14 ) }
    dend_18 { pt3dadd( 100.005, -69.0347, -140.251, 0.68 ) }
    dend_18 { pt3dadd( 101.142, -69.864, -140.445, 0.68 ) }
    dend_18 { pt3dadd( 102.072, -70.5087, -140.556, 0.68 ) }
    dend_18 { pt3dadd( 103.199, -71.3394, -140.702, 0.68 ) }
    dend_18 { pt3dadd( 105.227, -73.0938, -141.193, 0.68 ) }
    dend_18 { pt3dadd( 107.136, -74.9559, -142.035, 1.14 ) }
    dend_18 { pt3dadd( 108.741, -76.7143, -143.286, 0.91 ) }
    dend_18 { pt3dadd( 109.732, -77.9986, -144.476, 0.46 ) }
    dend_18 { pt3dadd( 110.301, -78.8966, -145.513, 0.91 ) }
    dend_18 { pt3dadd( 111.022, -80.3356, -147.509, 0.91 ) }
    dend_18 { pt3dadd( 111.481, -81.5889, -149.638, 0.91 ) }
    dend_18 { pt3dadd( 111.738, -82.7691, -151.98, 0.91 ) }
    dend_18 { pt3dadd( 111.894, -83.9215, -154.635, 0.91 ) }
    dend_18 { pt3dadd( 111.988, -84.671, -156.908, 1.59 ) }
    dend_18 { pt3dadd( 112.076, -85.2904, -159.548, 1.59 ) }
    dend_18 { pt3dadd( 112.108, -85.8622, -163.434, 1.59 ) }
    dend_18 { pt3dadd( 112.098, -86.252, -166.896, 1.59 ) }
    dend_18 { pt3dadd( 112.073, -86.334, -168.066, 0.91 ) }
    dend_18 { pt3dadd( 111.936, -86.3789, -171.195, 0.91 ) }
    dend_18 { pt3dadd( 111.728, -86.2683, -174.139, 0.91 ) }
    dend_18 { pt3dadd( 111.338, -85.8491, -178.443, 0.91 ) }
    // Section: dend_12, id: dend_12, parent: dend_10 (entry count 27/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -61.1746, -37.8443, -30.951, 0.91 ) }
    dend_12 { pt3dadd( -61.2301, -36.4667, -32.2407, 0.91 ) }
    dend_12 { pt3dadd( -61.3146, -34.8693, -33.9697, 0.68 ) }
    dend_12 { pt3dadd( -61.4764, -33.29, -35.7827, 0.68 ) }
    dend_12 { pt3dadd( -61.6144, -32.191, -37.0816, 0.68 ) }
    dend_12 { pt3dadd( -61.7407, -31.1968, -38.2703, 0.91 ) }
    dend_12 { pt3dadd( -61.9266, -29.7482, -40.0764, 1.37 ) }
    dend_12 { pt3dadd( -62.0862, -28.6686, -41.5372, 1.59 ) }
    dend_12 { pt3dadd( -62.2867, -27.4648, -43.2331, 0.91 ) }
    dend_12 { pt3dadd( -62.6156, -25.8617, -45.5085, 0.91 ) }
    dend_12 { pt3dadd( -62.9329, -24.4704, -47.472, 0.91 ) }
    dend_12 { pt3dadd( -63.1846, -23.2664, -49.1824, 0.91 ) }
    dend_12 { pt3dadd( -63.3984, -21.9723, -51.0582, 0.91 ) }
    dend_12 { pt3dadd( -63.4813, -20.9907, -52.4566, 0.91 ) }
    dend_12 { pt3dadd( -63.477, -19.7194, -54.3824, 0.91 ) }
    dend_12 { pt3dadd( -63.3539, -18.5329, -56.3905, 0.91 ) }
    dend_12 { pt3dadd( -63.0591, -17.2994, -58.9069, 0.91 ) }
    dend_12 { pt3dadd( -62.767, -16.631, -60.7284, 0.91 ) }
    dend_12 { pt3dadd( -62.2668, -16.0178, -63.6889, 0.91 ) }
    dend_12 { pt3dadd( -62.0111, -15.8392, -65.5966, 0.91 ) }
    dend_12 { pt3dadd( -61.8478, -15.7857, -67.3595, 0.91 ) }
    dend_12 { pt3dadd( -61.8448, -15.7619, -69.1634, 0.91 ) }
    dend_12 { pt3dadd( -62.2124, -15.5961, -71.3987, 0.91 ) }
    dend_12 { pt3dadd( -62.8925, -15.2555, -73.5355, 0.91 ) }
    dend_12 { pt3dadd( -63.8538, -14.7547, -75.3712, 0.91 ) }
    dend_12 { pt3dadd( -64.8329, -14.2652, -76.3495, 1.14 ) }
    dend_12 { pt3dadd( -65.5245, -13.945, -76.8026, 1.14 ) }
    dend_12 { pt3dadd( -68.0311, -12.7931, -78.0186, 0.46 ) }
    dend_12 { pt3dadd( -69.9101, -11.9611, -78.6976, 0.46 ) }
    dend_12 { pt3dadd( -72.2821, -10.9169, -79.4509, 0.68 ) }
    dend_12 { pt3dadd( -74.8067, -9.79912, -80.1831, 0.68 ) }
    dend_12 { pt3dadd( -77.7058, -8.52687, -81.1716, 0.68 ) }
    dend_12 { pt3dadd( -80.1947, -7.39626, -82.1264, 0.68 ) }
    dend_12 { pt3dadd( -82.0872, -6.48931, -83.0624, 1.14 ) }
    dend_12 { pt3dadd( -83.3082, -5.8489, -83.818, 1.14 ) }
    dend_12 { pt3dadd( -84.5664, -5.15047, -84.6842, 0.46 ) }
    dend_12 { pt3dadd( -86.7422, -3.97878, -86.2146, 0.46 ) }
    dend_12 { pt3dadd( -88.2174, -3.29336, -87.2535, 0.68 ) }
    dend_12 { pt3dadd( -90.1901, -2.53119, -88.5115, 0.68 ) }
    dend_12 { pt3dadd( -92.1699, -1.92322, -89.6325, 0.68 ) }
    dend_12 { pt3dadd( -94.0867, -1.50206, -90.5036, 0.91 ) }
    dend_12 { pt3dadd( -96.4802, -1.19702, -91.3471, 0.91 ) }
    dend_12 { pt3dadd( -99.3847, -1.01622, -92.0017, 0.91 ) }
    dend_12 { pt3dadd( -102.5, -0.949565, -92.5207, 0.91 ) }
    dend_12 { pt3dadd( -104.123, -0.941848, -92.6177, 1.14 ) }
    dend_12 { pt3dadd( -105.705, -0.923778, -92.6093, 1.14 ) }
    dend_12 { pt3dadd( -107.832, -0.856982, -92.5374, 0.68 ) }
    dend_12 { pt3dadd( -109.82, -0.781734, -92.4148, 1.14 ) }
    dend_12 { pt3dadd( -111.761, -0.724098, -92.2939, 1.14 ) }
    dend_12 { pt3dadd( -113.223, -0.668705, -92.2712, 1.14 ) }
    dend_12 { pt3dadd( -116.437, -0.542719, -92.1708, 0.91 ) }
    dend_12 { pt3dadd( -118.659, -0.54827, -92.0152, 0.91 ) }
    dend_12 { pt3dadd( -119.554, -0.612335, -91.8932, 0.91 ) }
    dend_12 { pt3dadd( -122.106, -1.02286, -91.3488, 0.91 ) }
    dend_12 { pt3dadd( -124.493, -1.56289, -90.7081, 0.91 ) }
    dend_12 { pt3dadd( -126.038, -1.95407, -90.1922, 0.91 ) }
    dend_12 { pt3dadd( -128.292, -2.51701, -89.3622, 0.91 ) }
    dend_12 { pt3dadd( -131.675, -3.36821, -88.0396, 0.91 ) }
    dend_12 { pt3dadd( -134.875, -4.16475, -86.7336, 0.91 ) }
    dend_12 { pt3dadd( -139.016, -5.20141, -84.9514, 0.46 ) }
    dend_12 { pt3dadd( -141.959, -5.92864, -83.6726, 0.46 ) }
    dend_12 { pt3dadd( -145.382, -6.65518, -82.2404, 0.46 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 89/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( -61.1746, -37.8443, -30.951, 0.68 ) }
    dend_11 { pt3dadd( -62.1724, -38.1552, -32.2225, 0.68 ) }
    dend_11 { pt3dadd( -63.7184, -38.3903, -33.9774, 0.68 ) }
    dend_11 { pt3dadd( -64.8667, -38.48, -35.0986, 0.91 ) }
    dend_11 { pt3dadd( -66.6149, -38.637, -36.686, 0.91 ) }
    dend_11 { pt3dadd( -68.3809, -38.8293, -38.2536, 0.91 ) }
    dend_11 { pt3dadd( -69.7112, -38.9879, -39.2798, 0.91 ) }
    dend_11 { pt3dadd( -71.4179, -39.1806, -40.4487, 0.91 ) }
    dend_11 { pt3dadd( -73.2419, -39.42, -41.4646, 0.91 ) }
    dend_11 { pt3dadd( -75.0556, -39.715, -42.3119, 0.91 ) }
    dend_11 { pt3dadd( -76.3286, -39.9695, -42.7986, 0.91 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_9()
}

proc basic_shape_9() {
    dend_11 { pt3dadd( -78.9572, -40.5328, -43.6073, 0.91 ) }
    dend_11 { pt3dadd( -80.1573, -40.7542, -44.0097, 0.68 ) }
    dend_11 { pt3dadd( -81.8089, -41.0263, -44.7759, 0.68 ) }
    dend_11 { pt3dadd( -82.8817, -41.1413, -45.3935, 0.68 ) }
    dend_11 { pt3dadd( -84.41, -41.2397, -46.592, 0.68 ) }
    dend_11 { pt3dadd( -85.5437, -41.3523, -47.7713, 0.91 ) }
    dend_11 { pt3dadd( -87.3426, -41.5166, -49.9805, 0.91 ) }
    dend_11 { pt3dadd( -88.3446, -41.5764, -51.1875, 0.91 ) }
    dend_11 { pt3dadd( -89.4069, -41.6345, -52.4302, 1.37 ) }
    dend_11 { pt3dadd( -91.3334, -41.8306, -54.5875, 1.14 ) }
    dend_11 { pt3dadd( -92.9562, -42.0725, -56.3342, 0.68 ) }
    dend_11 { pt3dadd( -94.4972, -42.3767, -57.9871, 0.68 ) }
    dend_11 { pt3dadd( -95.6626, -42.6168, -59.174, 0.91 ) }
    dend_11 { pt3dadd( -96.9348, -42.8741, -60.4273, 0.91 ) }
    dend_11 { pt3dadd( -98.7256, -43.1663, -62.1345, 0.91 ) }
    dend_11 { pt3dadd( -100.906, -43.4602, -64.098, 0.91 ) }
    dend_11 { pt3dadd( -103.022, -43.7452, -66.0148, 0.91 ) }
    dend_11 { pt3dadd( -105.343, -44.0616, -68.0798, 0.91 ) }
    dend_11 { pt3dadd( -106.556, -44.2138, -69.1664, 0.91 ) }
    dend_11 { pt3dadd( -108.403, -44.411, -70.7853, 0.91 ) }
    dend_11 { pt3dadd( -110.443, -44.5809, -72.6108, 0.91 ) }
    dend_11 { pt3dadd( -112.205, -44.7076, -74.3311, 0.91 ) }
    dend_11 { pt3dadd( -113.746, -44.8541, -76.0686, 1.37 ) }
    dend_11 { pt3dadd( -114.983, -45.0379, -77.6747, 1.37 ) }
    dend_11 { pt3dadd( -115.965, -45.2416, -79.0835, 1.37 ) }
    dend_11 { pt3dadd( -117.58, -45.6688, -81.5467, 1.37 ) }
    dend_11 { pt3dadd( -119.896, -46.3551, -85.2923, 1.37 ) }
    dend_11 { pt3dadd( -121.337, -46.8075, -87.7644, 1.37 ) }
    dend_11 { pt3dadd( -123.453, -47.5683, -91.7521, 0.91 ) }
    dend_11 { pt3dadd( -124.415, -47.9204, -93.5989, 0.91 ) }
    // Section: dend_24, id: dend_24, parent: dend_22 (entry count 30/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 178.118, -187.737, 121.29, 0.46 ) }
    dend_24 { pt3dadd( 177.265, -188.303, 122.268, 0.46 ) }
    dend_24 { pt3dadd( 176.023, -189.17, 123.693, 0.91 ) }
    dend_24 { pt3dadd( 174.752, -190.067, 125.067, 0.46 ) }
    dend_24 { pt3dadd( 173.524, -190.934, 126.396, 0.46 ) }
    dend_24 { pt3dadd( 173.249, -191.128, 126.694, 0.68 ) }
    dend_24 { pt3dadd( 171.885, -192.092, 128.17, 0.23 ) }
    dend_24 { pt3dadd( 171.193, -192.503, 128.792, 0.23 ) }
    dend_24 { pt3dadd( 170.673, -192.802, 129.169, 1.14 ) }
    // Section: dend_23, id: dend_23, parent: dend_22 (entry count 39/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( 178.118, -187.737, 121.29, 0.68 ) }
    dend_23 { pt3dadd( 179.819, -187.257, 121.712, 0.68 ) }
    dend_23 { pt3dadd( 180.393, -187.069, 121.866, 0.68 ) }
    dend_23 { pt3dadd( 182.572, -186.238, 122.441, 0.68 ) }
    dend_23 { pt3dadd( 184.205, -185.531, 122.848, 0.91 ) }
    dend_23 { pt3dadd( 185.962, -184.704, 123.246, 0.46 ) }
    dend_23 { pt3dadd( 186.922, -184.284, 123.481, 0.46 ) }
    dend_23 { pt3dadd( 187.822, -183.919, 123.714, 0.46 ) }
    dend_23 { pt3dadd( 189.274, -183.323, 124.091, 0.46 ) }
    dend_23 { pt3dadd( 190.537, -182.831, 124.412, 0.91 ) }
    dend_23 { pt3dadd( 192.187, -182.241, 124.839, 0.46 ) }
    dend_23 { pt3dadd( 194.921, -181.358, 125.487, 0.46 ) }
    dend_23 { pt3dadd( 198.386, -180.468, 126.339, 0.46 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_6, dend_1, dend_0, dend_14, dend_7, dend_5, dend_2, dend_20, dend_15, dend_9, dend_8, dend_4, dend_3, dend_26, dend_21, dend_17, dend_16, dend_13, dend_10, dend_25, dend_22, dend_19, dend_18, dend_12, dend_11, dend_24, dend_23]}
    ModelViewParmSubset_2 = new SectionList()
    dend_6 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_6, dend_1, dend_0, dend_14, dend_7, dend_5, dend_2, dend_20, dend_15, dend_9, dend_8, dend_4, dend_3, dend_26, dend_21, dend_17, dend_16, dend_13, dend_10, dend_25, dend_22, dend_19, dend_18, dend_12, dend_11, dend_24, dend_23]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_6 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_0 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_20 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_15 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_8 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_21 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_17 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_16 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_13 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_22 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_18 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_12 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_11 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_1 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_5 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_2 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_14 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_4 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_3 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_7 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_9 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_10 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_19 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_26 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_25 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_24 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_23 OneSecGrp_SectionRef_30.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_14, dend_14, dend_14, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, axon_1, axon_1, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_19, dend_19, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_10()
}

proc subsets_10() {
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cNAC_149_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cNAC_149_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cNAC_149_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cNAC_149_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_6 nseg = 3
    dend_0 nseg = 5
    dend_20 nseg = 11
    dend_15 nseg = 7
    dend_8 nseg = 13
    dend_21 nseg = 5
    dend_17 nseg = 3
    dend_16 nseg = 9
    dend_13 nseg = 17
    dend_22 nseg = 3
    dend_18 nseg = 3
    dend_12 nseg = 7
    dend_11 nseg = 5
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cNAC187_L1_DAC_2e9c9967f8_0_0


