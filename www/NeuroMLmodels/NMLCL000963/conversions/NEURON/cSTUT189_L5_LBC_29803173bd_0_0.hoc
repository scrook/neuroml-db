// Cell: cSTUT189_L5_LBC_29803173bd_0_0
/*
{
  "id" : "cSTUT189_L5_LBC_29803173bd_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-4.47353, -9.82937, -0.0150783, 3.11345", "-4.06901, -8.79368, -0.0135938, 5.39642", "-3.66449, -7.75799, -0.0121094, 6.72082", "-3.25998, -6.72231, -0.0106249, 7.70122", "-2.85546, -5.68662, -0.00914047, 8.43968", "-2.45095, -4.65093, -0.00765602, 9.25919", "-2.04643, -3.61524, -0.00617157, 10.0787", "-1.64192, -2.57956, -0.00468712, 10.8982", "-1.2374, -1.54387, -0.00320267, 11.7151", "-0.832884, -0.508183, -0.00171822, 12.3073", "-0.428368, 0.527504, -2.33766E-4, 12.0741", "-0.023852, 1.56319, 0.00125068, 11.8342", "0.380664, 2.59888, 0.00273513, 11.5616", "0.78518, 3.63457, 0.00421958, 11.0624", "1.1897, 4.67025, 0.00570403, 10.5822", "1.59421, 5.70594, 0.00718848, 10.0942", "1.99873, 6.74163, 0.00867293, 9.27653", "2.40324, 7.77731, 0.0101574, 7.88308", "2.80776, 8.813, 0.0116418, 6.37032", "3.21227, 9.84869, 0.0131263, 4.97817", "3.61679, 10.8844, 0.0146107, 4.57234" ]
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "0.0120471, -7.68767, 1.51098, 1.08", "3.08543, -12.945, 1.04432, 1.08", "5.49592, -17.0684, 0.6783, 1.08", "7.15502, -19.9064, 0.42638, 1.08" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "-4.41795, -8.40967, -0.0190242, 1.08", "-3.93629, -8.87293, -0.0258147, 1.08", "-0.957946, -11.4432, -0.0788157, 1.08", "0.301847, -12.6108, -0.101273, 1.08", "2.32667, -14.5042, -0.135407, 1.08", "5.8078, -17.9082, -0.191782, 1.08", "8.37435, -20.4813, -0.230321, 1.08", "8.51183, -20.6334, -0.232473, 1.08", "12.6996, -26.1245, -0.339848, 1.08", "13.9372, -28.0392, -0.418934, 1.08", "14.9432, -29.9325, -0.532749, 1.08", "15.9773, -33.0005, -0.754891, 1.08", "16.8188, -37.1187, -1.07042, 1.08", "17.2221, -40.7379, -1.36846, 1.08", "17.1825, -42.1311, -1.49097, 1.08", "17.0984, -43.8859, -1.62873, 1.08", "16.9293, -48.258, -1.93889, 1.08", "16.9797, -50.88, -2.09687, 1.08", "17.2655, -53.183, -2.31434, 1.08", "17.7583, -56.212, -2.71327, 1.08", "18.5798, -60.2995, -3.33826, 1.08", "18.6662, -60.7509, -3.42176, 1.08", "19.305, -63.7172, -4.06257, 1.08", "20.3366, -67.4609, -4.91246, 1.08", "21.167, -70.3524, -5.52452, 1.08", "22.6341, -74.8653, -6.54801, 1.08", "23.3372, -77.0779, -7.04789, 1.08", "23.6938, -78.319, -7.30606, 1.08", "24.4844, -81.4629, -7.92953, 1.08", "25.8687, -86.2091, -8.72123, 1.08", "26.8663, -89.7575, -9.35129, 0.81", "27.2551, -90.9944, -9.584, 0.81", "27.9617, -93.273, -10.1151, 0.81", "28.6764, -95.6489, -10.712, 0.81", "29.2534, -98.0287, -11.3105, 0.81", "30.1408, -101.968, -12.2888, 0.81", "31.7873, -109.185, -14.1223, 0.81", "32.7433, -112.534, -15.0327, 0.81", "33.7735, -115.701, -15.8674, 0.81", "34.9719, -119.068, -16.6774, 0.81", "35.0494, -119.257, -16.7244, 0.81", "36.8415, -122.952, -17.6539, 0.81", "37.8719, -125.068, -18.1263, 0.81", "40.8779, -130.295, -19.0658, 0.81", "43.0177, -133.677, -19.6846, 0.81", "44.4408, -135.781, -20.0978, 0.81", "44.552, -135.958, -20.1312, 0.81", "45.7642, -138.227, -20.4968, 0.81", "48.3422, -143.66, -21.5076, 0.81", "48.3561, -143.696, -21.5142, 0.81", "48.7531, -145.645, -21.8039, 0.81", "48.9463, -147.022, -21.9529, 0.81", "49.3451, -150.312, -22.2567, 0.81", "49.4783, -151.251, -22.3334, 0.81", "50.1481, -156.898, -22.8282, 0.81", "50.5459, -159.736, -23.2152, 0.81", "51.0795, -162.939, -23.7488, 0.81", "51.8569, -167.617, -24.9049, 0.81", "52.3701, -170.439, -25.8069, 0.81", "52.9463, -173.499, -27.0191, 0.81", "53.6933, -177.338, -28.8572, 0.81", "53.7017, -177.378, -28.8792, 0.81", "54.3194, -181.534, -31.486, 0.81", "54.5435, -183.706, -33.0682, 0.81", "54.5934, -185.633, -34.517, 0.27" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-6.04795, -7.43117, 1.45098, 1.08", "-6.22308, -11.1516, 0.078477, 1.08", "-6.46538, -16.2991, -1.82051, 1.35", "-6.85725, -24.6242, -4.89172, 1.35", "-7.00897, -27.8475, -6.0808, 1.35", "-7.02147, -28.1132, -6.17883, 1.35" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-2.31794, 6.75233, 2.93098, 1.89", "-4.58436, 7.85551, 2.93098, 1.89", "-7.69331, 9.36879, 2.93098, 1.89" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-0.377952, 8.23434, 1.46098, 1.41", "-3.71664, 9.5506, 2.53994, 1.41", "-7.15519, 10.9062, 3.65117, 1.23", "-10.5824, 12.2574, 4.75875, 1.23" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "4.75205, 10.7233, -2.91902, 1.11", "4.80754, 11.7312, -2.97639, 1.11", "5.30731, 14.4304, -3.1882, 1.11", "6.10127, 17.0327, -3.40478, 1.11", "6.80916, 18.506, -3.51917, 1.11", "8.27929, 21.1003, -3.85377, 1.11", "9.98336, 24.0637, -4.36216, 1.11", "11.0077, 25.6377, -4.68182, 1.11", "13.0942, 28.4746, -5.38314, 1.67", "16.2505, 32.6607, -6.5616, 1.11", "17.5828, 34.4233, -7.06909, 1.11", "18.8224, 36.1225, -7.58598, 1.11", "20.1223, 38.0609, -8.17172, 1.11", "22.0141, 40.9567, -8.96815, 1.11", "23.711, 43.5809, -9.76822, 1.11", "25.0624, 45.7378, -10.4274, 1.11", "26.7128, 48.2584, -11.1416, 1.11", "27.3204, 49.1803, -11.3999, 1.11", "29.6505, 52.777, -12.4469, 1.11", "31.2442, 55.2406, -13.1355, 1.11", "31.6608, 55.8986, -13.3193, 1.11", "32.458, 57.2892, -13.6912, 1.11", "34.0329, 60.1464, -14.4721, 1.11", "35.832, 63.5055, -15.3951, 1.11", "36.9907, 65.8275, -16.0452, 1.11", "38.2636, 68.2014, -16.6818, 1.11", "39.4241, 70.2828, -17.2953, 1.11", "40.4287, 72.1426, -17.9059, 1.06", "40.9847, 73.1831, -18.3177, 0.53", "41.4083, 74.1898, -18.7527, 0.35", "41.9665, 75.8582, -19.5781, 0.35", "41.9992, 75.983, -19.6462, 0.35", "42.3989, 78.4436, -20.928, 0.35", "42.4833, 79.2287, -21.3517, 0.35", "42.6154, 80.5362, -22.1081, 0.35", "42.8118, 82.3049, -23.1214, 0.35", "42.9651, 83.4363, -23.7796, 0.35", "43.2701, 84.8982, -24.6594, 0.35", "43.7582, 86.4915, -25.6268, 0.35", "43.9991, 87.2474, -26.06, 0.35", "44.2939, 88.1704, -26.574, 0.35", "44.6618, 89.4733, -27.2571, 0.35", "44.9435, 90.5577, -27.8036, 0.35", "45.1683, 91.3641, -28.2176, 0.35", "45.2955, 91.9155, -28.4534, 1.23", "45.3322, 92.0918, -28.5409, 1.23", "45.5399, 93.1776, -29.1641, 0.18", "45.7439, 93.9494, -29.6913, 0.18", "45.9617, 94.524, -30.1101, 0.18", "46.2916, 95.2798, -30.7168, 1.23", "46.6496, 95.932, -31.2117, 0.18", "46.7872, 96.1544, -31.3477, 0.18", "47.7897, 97.4321, -31.9628, 0.18", "48.0533, 97.7359, -32.1019, 0.88", "48.2281, 97.9176, -32.1831, 0.18", "49.2361, 98.8973, -32.5723, 0.18", "50.1649, 99.8174, -32.8323, 0.18", "51.5633, 101.173, -33.112, 1.06", "51.7123, 101.311, -33.1252, 1.06" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796,
    "numberInternalDivisions" : 5
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "3.61679, 10.8844, 0.0146107, 0.836755", "9.07397, 24.8565, 0.0146107, 0.836755", "14.5311, 38.8286, 0.0146107, 0.836755" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "7.15502, -19.9064, 0.42638, 1.08", "13.3991, -19.6235, -0.485399, 1.08", "25.5326, -17.8909, -1.60677, 1.08", "37.773, -17.8561, -3.01723, 1.08", "49.7582, -18.6741, -5.74715, 1.08", "62.0644, -18.5798, -6.35244, 1.08", "74.206, -16.8451, -7.37937, 1.08", "86.0558, -13.6391, -7.5051, 1.08", "98.0323, -11.686, -5.45815, 1.08", "109.258, -7.84952, -2.36029, 1.08", "120.425, -3.33377, -0.213382, 1.08", "131.636, 1.39756, 0.963583, 1.08", "142.535, 6.77493, 1.98783, 1.08", "154.399, 9.75775, 0.900739, 1.08", "165.669, 14.41, 1.82999, 1.08", "176.368, 20.21, 2.1593, 1.08", "186.452, 26.9009, 1.44676, 1.08", "197.687, 31.6742, 2.0654, 1.08", "209.451, 34.1533, 4.64645, 1.08", "221.65, 35.0955, 6.07711, 1.08", "233.431, 36.6715, 9.2903, 1.08", "245.686, 36.1059, 10.4157, 1.08" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "7.15502, -19.9064, 0.42638, 1.08", "9.38638, -24.2486, 0.430672, 1.08", "11.7733, -28.5408, 0.312277, 1.08", "14.7568, -33.0805, 0.0527598, 1.08", "17.3683, -36.7527, -0.217957, 1.08", "21.2848, -42.2597, -0.62394, 0.81", "22.6764, -44.2165, -0.768196, 0.81", "24.9115, -47.1281, -1.05064, 0.81", "28.0588, -51.0287, -1.65442, 0.81", "28.1009, -51.0684, -1.66476, 0.81" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "54.5934, -185.633, -34.517, 0.27", "66.568, -190.478, -35.0697, 0.27", "82.7934, -197.043, -35.8187, 0.27" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "54.5934, -185.633, -34.517, 0.27", "53.741, -189.507, -37.2055, 0.27", "52.505, -194.864, -41.0497, 0.27", "51.309, -200.04, -44.7082, 0.27", "50.3752, -204.081, -47.5647, 0.27", "49.1676, -209.308, -51.259, 0.27", "46.9976, -218.7, -57.8973, 0.27", "46.9403, -218.909, -58.052, 0.27", "46.5356, -220.611, -59.2965, 0.27" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-7.02147, -28.1132, -6.17883, 1.08", "-9.35966, -31.2093, -5.47434, 1.08", "-12.4917, -35.3567, -4.53065, 1.08", "-15.7308, -39.6458, -3.55472, 1.08", "-20.557, -46.0366, -2.10059, 1.08", "-22.983, -49.249, -1.36964, 1.08", "-25.6998, -52.8465, -0.551072, 1.08" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "-7.02147, -28.1132, -6.17883, 0.27", "-8.10761, -30.4242, -6.61874, 0.27", "-8.46934, -32.414, -6.82815, 0.54", "-8.50768, -32.8705, -6.83719, 1.08", "-8.51676, -33.0322, -6.83627, 1.08", "-8.68689, -35.4905, -6.84838, 1.08", "-8.78031, -36.626, -6.85948, 1.08", "-9.04167, -40.3897, -6.87561, 1.08", "-9.2717, -43.9088, -6.97329, 1.08", "-9.2789, -44.0705, -6.98028, 1.08", "-9.27043, -47.0567, -7.14405, 1.08", "-9.15268, -48.6957, -7.25581, 1.08", "-9.11435, -49.9158, -7.35556, 1.08", "-9.15446, -51.0731, -7.47037, 1.08", "-9.09107, -52.6575, -7.59565, 1.08", "-8.96801, -54.5412, -7.68487, 1.08", "-8.92786, -55.8412, -7.69802, 1.08", "-9.00417, -60.114, -7.70983, 1.08", "-9.0513, -60.9322, -7.73904, 1.08", "-9.188, -64.5029, -7.96856, 1.08", "-9.20615, -64.8634, -7.99968, 1.08", "-9.38551, -68.8112, -8.4117, 1.08", "-9.44322, -71.2432, -8.69882, 1.08", "-9.29929, -73.7411, -8.99321, 1.08", "-9.26648, -77.5166, -9.53404, 1.08", "-9.26791, -77.6707, -9.55982, 1.08", "-9.26362, -78.324, -9.67393, 1.08", "-9.20765, -80.6037, -10.0911, 1.08", "-9.10531, -85.7644, -10.9635, 1.08", "-9.19694, -89.7577, -11.5096, 1.08", "-9.33668, -92.9341, -11.8664, 1.08", "-9.43915, -95.2937, -12.0606, 1.08", "-9.44007, -95.3296, -12.0621, 1.08", "-9.4951, -98.2431, -12.0624, 1.08", "-9.42295, -102.165, -11.8517, 1.08", "-9.27293, -105.343, -11.5597, 1.08", "-9.20502, -108.036, -11.2566, 0.81", "-9.12081, -110.851, -10.9644, 0.81", "-9.06767, -112.872, -10.788, 0.81", "-8.71705, -118.639, -10.4825, 0.81", "-8.41222, -121.894, -10.4109, 0.81", "-8.30127, -123.015, -10.4159, 0.81", "-8.00604, -126.351, -10.4134, 0.81", "-7.86451, -128.597, -10.3695, 0.81", "-7.69985, -135.173, -10.0727, 0.81", "-7.79262, -137.016, -10.0045, 0.81", "-7.80601, -137.177, -9.99912, 0.81", "-8.26625, -140.732, -9.8966, 0.81", "-8.77724, -143.439, -9.79453, 0.81", "-9.58222, -146.449, -9.71983, 0.81", "-10.7357, -149.864, -9.59582, 0.81", "-11.1515, -151.107, -9.56014, 0.81", "-12.0164, -153.889, -9.49838, 0.81", "-12.6767, -156.085, -9.48376, 0.81", "-13.5971, -159.064, -9.50739, 0.81", "-14.7772, -163.328, -9.47655, 0.81", "-15.6577, -166.621, -9.40032, 0.81", "-16.3888, -169.466, -9.37218, 0.81", "-17.3518, -173.184, -9.33581, 0.81", "-17.8063, -175.048, -9.32231, 0.81", "-18.265, -177.173, -9.32628, 0.81", "-18.8634, -180.004, -9.39762, 0.81", "-19.2207, -182.964, -9.39052, 0.81", "-19.251, -184.072, -9.35273, 0.81", "-19.2415, -184.3, -9.33681, 1.08", "-19.2313, -184.527, -9.31122, 1.08", "-19.0411, -187.416, -8.97279, 0.54", "-18.6092, -191.679, -8.47463, 0.54", "-18.3787, -193.971, -8.23718, 0.54", "-18.1573, -196.345, -8.03002, 0.54", "-18.0665, -197.901, -7.89942, 0.54", "-18.0305, -200.138, -7.711, 0.54", "-18.0948, -201.578, -7.56395, 0.54", "-18.3905, -204.775, -7.18283, 0.54", "-18.5803, -206.288, -6.98901, 0.54", "-18.7968, -208.104, -6.75221, 0.54", "-19.032, -209.332, -6.61417, 0.54", "-19.633, -212.028, -6.32454, 0.54", "-19.6423, -212.069, -6.31988, 0.54", "-19.7994, -212.714, -6.23304, 0.54", "-20.2744, -214.915, -5.92841, 0.54", "-20.7915, -217.703, -5.53965, 0.54", "-21.5397, -221.645, -5.03542, 0.54", "-22.1307, -225.18, -4.63065, 0.54", "-22.4488, -227.141, -4.39946, 0.54", "-22.8651, -229.892, -4.15784, 0.54", "-22.9287, -230.373, -4.12855, 0.54", "-23.2148, -233.105, -4.02807, 0.54", "-23.6678, -236.35, -4.09398, 0.54", "-24.1415, -240.051, -4.31451, 0.54", "-24.5053, -242.815, -4.56975, 0.54", "-24.8896, -245.44, -4.86155, 0.54", "-24.9553, -245.919, -4.92043, 0.54", "-25.2971, -248.886, -5.403, 0.54" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-7.69331, 9.36879, 2.93098, 0.81", "-8.36676, 11.0016, 3.04509, 0.81", "-9.88475, 14.6041, 3.2926, 1.08", "-13.0242, 19.5097, 3.76979, 1.08", "-13.8365, 20.5818, 3.87341, 1.08", "-16.2197, 23.8992, 4.07478, 1.08", "-16.254, 23.9472, 4.07658, 1.08", "-18.8244, 27.2192, 4.11878, 1.08", "-22.7223, 32.1938, 4.02842, 1.08", "-24.3744, 34.5339, 3.80505, 1.08", "-27.9063, 39.7685, 3.03321, 1.08", "-31.3162, 44.8915, 2.02361, 1.08", "-33.2666, 47.7722, 1.39636, 1.08", "-36.0481, 51.8802, 0.411655, 1.08", "-38.1869, 55.0171, -0.406999, 1.08", "-38.4303, 55.2962, -0.478971, 1.08", "-39.3415, 56.059, -0.660434, 1.08", "-44.1614, 59.5378, -1.3254, 1.08", "-47.9406, 61.9422, -1.65213, 1.08", "-51.7399, 63.9638, -1.80372, 1.08", "-55.1163, 65.6642, -1.82448, 1.08", "-57.1866, 66.6878, -1.84126, 1.08", "-59.0435, 67.8188, -1.90231, 1.08", "-62.1061, 70.0418, -2.04666, 1.08", "-64.6516, 72.2878, -2.19349, 1.08", "-64.8387, 72.4651, -2.20763, 1.08", "-68.2739, 76.1074, -2.55229, 1.08", "-73.1582, 81.7329, -3.34329, 1.08", "-77.2297, 86.5186, -4.09269, 1.08", "-80.9112, 90.9763, -4.96489, 1.08", "-84.7332, 95.9477, -6.01224, 1.08", "-88.8051, 101.557, -7.21845, 1.08", "-92.5025, 107.104, -8.54195, 1.08", "-95.4874, 111.576, -9.75142, 1.08", "-97.0876, 114.249, -10.5244, 1.08", "-99.9589, 119.019, -11.8439, 1.08", "-102.679, 124.136, -13.0824, 1.08", "-105.249, 128.723, -13.9838, 0.81", "-107.257, 131.952, -14.3729, 0.81", "-109.813, 135.871, -14.699, 0.81", "-111.97, 138.738, -14.7777, 0.81", "-113.84, 140.896, -14.7934, 0.54", "-118.151, 145.487, -14.5888, 0.54", "-122.638, 149.962, -14.0688, 1.08", "-123.419, 150.736, -13.9496, 1.08", "-125.955, 153.102, -13.6132, 1.08", "-131.664, 158.511, -13.2003, 1.08" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-7.69331, 9.36879, 2.93098, 1.08", "-11.8203, 4.17522, -3.96772, 1.08", "-14.3181, 1.06274, -7.96161, 0.81", "-17.4154, -3.34284, -13.7376, 1.08", "-19.0699, -5.88253, -17.055, 1.08", "-20.7554, -8.46988, -20.4346, 1.08", "-23.1974, -12.2184, -25.331, 1.08", "-24.3678, -14.4204, -27.8309, 1.08", "-26.0888, -18.6834, -32.9968, 0.54", "-26.3021, -19.2038, -33.7254, 0.54" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-10.5824, 12.2574, 4.75875, 0.53", "-11.9654, 12.3321, 4.80927, 0.53", "-15.0694, 12.4999, 4.92264, 0.53", "-15.4794, 12.522, 4.93761, 0.53", "-17.3524, 12.6232, 5.00602, 0.53", "-19.6131, 12.7454, 5.08859, 0.53", "-22.4783, 12.9002, 5.19324, 0.53", "-34.0359, 14.5848, 4.08828, 0.53", "-45.1533, 18.0595, 5.10159, 0.53", "-55.9446, 22.3492, 6.19676, 0.53", "-65.3871, 28.2684, 9.34284, 0.53", "-75.5705, 33.3565, 11.7039, 0.53", "-85.5527, 37.9741, 15.5187, 0.53", "-96.0599, 40.8793, 19.7662, 0.53", "-106.757, 43.9477, 23.3674, 0.53", "-117.935, 46.0488, 26.2003, 0.53", "-129.558, 46.4014, 27.8071, 0.53", "-140.759, 48.4383, 30.5992, 0.53", "-151.941, 50.7747, 33.2016, 0.53", "-163.092, 53.8486, 34.9711, 0.53", "-174.634, 54.7743, 36.8852, 0.53", "-186.337, 54.7991, 37.8007, 0.53", "-197.823, 56.7035, 39.19, 0.53", "-208.998, 59.8052, 40.7449, 0.53", "-219.753, 63.824, 42.8403, 0.53", "-230.304, 67.3646, 46.3958, 0.53", "-241.018, 69.7582, 50.4768, 0.53", "-250.649, 71.5308, 56.9166, 0.53", "-260.087, 71.0005, 63.8756, 0.53", "-269.075, 68.9228, 71.1125, 0.53" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 15
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-10.5824, 12.2574, 4.75875, 0.53", "-10.4441, 14.5559, 5.92479, 0.53", "-10.4216, 14.9301, 6.11461, 0.53", "-10.2109, 18.4324, 7.89134, 0.53", "-11.1946, 28.6331, 11.2131, 0.53", "-11.1915, 38.9845, 14.1422, 0.53", "-12.8288, 49.0799, 17.5683, 0.53", "-14.148, 58.3999, 22.9266, 0.53", "-14.8147, 68.5381, 26.5092, 0.53", "-14.9003, 78.8217, 29.6794, 0.53", "-12.9696, 89.3216, 31.0028, 0.53", "-10.6065, 99.8279, 31.2657, 0.53", "-8.16716, 110.318, 30.6569, 0.53", "-6.8113, 120.738, 28.0218, 0.53", "-4.77454, 131.225, 26.3923, 0.53", "-4.24101, 141.929, 25.182, 0.53", "-4.13306, 152.498, 22.8671, 0.53", "-3.03996, 162.882, 19.9487, 0.53", "-4.29502, 173.422, 17.8064, 0.53", "-7.58337, 183.21, 14.2258, 0.53", "-10.0382, 193.056, 10.1749, 0.53", "-11.2726, 202.724, 5.18923, 0.53", "-10.5257, 212.433, 0.212861, 0.53", "-11.6914, 222.633, -3.39378, 0.53" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "51.7123, 101.311, -33.1252, 0.18", "52.238, 101.649, -33.0367, 0.18", "53.795, 102.704, -32.7346, 0.18", "56.5552, 104.769, -32.1741, 0.53", "59.782, 107.157, -31.678, 0.53", "62.5301, 109.289, -31.345, 0.35", "65.1649, 111.285, -31.2182, 0.35", "65.5282, 111.565, -31.2259, 0.35", "67.6637, 113.3, -31.527, 0.35", "70.4756, 115.523, -32.291, 0.35", "72.7685, 116.888, -33.5348, 0.35", "75.4418, 118.045, -35.4101, 0.35", "75.6031, 118.105, -35.5472, 0.35", "77.3006, 118.652, -37.32, 0.18", "79.3773, 119.174, -39.6752, 0.18", "83.2422, 120.006, -44.4901, 0.18", "83.3095, 120.016, -44.5767, 0.18", "85.0994, 120.349, -46.8728, 0.53", "88.1329, 120.88, -50.7973, 0.53" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "51.7123, 101.311, -33.1252, 0.18", "51.7643, 102.238, -33.4494, 0.18", "52.0609, 107.522, -35.2975, 0.18" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "14.5311, 38.8286, 0.0146107, 0.54", "19.9883, 52.8007, 0.0146107, 0.54", "25.4455, 66.7728, 0.0146107, 0.54" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "245.686, 36.1059, 10.4157, 0.18", "256.121, 39.9266, 7.05328, 0.18", "266.231, 45.19, 5.2011, 0.18", "276.381, 50.6072, 5.8145, 0.18", "285.977, 56.3108, 8.53115, 0.18", "296.03, 60.4099, 12.495, 0.18" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "245.686, 36.1059, 10.4157, 0.18", "255.509, 38.0949, 13.0694, 0.18", "264.93, 41.2401, 15.9359, 0.18", "273.534, 43.4842, 21.2584, 0.18", "282.03, 43.9987, 27.2096, 0.18", "290.248, 46.255, 33.1077, 0.18", "299.495, 48.7548, 37.0435, 0.18", "307.769, 52.5302, 41.9161, 0.18" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-25.6998, -52.8465, -0.551072, 1.08", "-28.8033, -55.3349, 2.74653, 1.08", "-31.3208, -57.3796, 5.22836, 0.81", "-33.9994, -59.6896, 7.86688, 0.81", "-36.5137, -61.8579, 10.3436, 0.81", "-39.4444, -64.3854, 13.2304, 0.81", "-43.0235, -67.4719, 16.7559, 0.81", "-44.4516, -68.7146, 18.0081, 0.81", "-46.8619, -70.5551, 19.908, 0.81", "-53.9854, -79.1966, 26.5977, 0.81", "-60.5223, -87.9504, 33.7184, 0.81", "-66.408, -94.8919, 43.2114, 0.81", "-70.8299, -103.243, 52.2504, 0.81", "-74.7486, -111.913, 61.1918, 0.81", "-79.8488, -121.864, 67.7297, 0.81", "-82.5511, -133.143, 73.2148, 0.81", "-84.2345, -144.637, 78.6075, 0.81", "-86.9164, -155.674, 84.6316, 0.81", "-90.0454, -166.412, 91.0313, 0.81", "-92.9997, -176.698, 98.29, 0.81", "-98.1356, -184.888, 107.108, 0.81", "-103.148, -191.644, 117.23, 0.81", "-109.025, -199.6, 125.813, 0.81", "-114.87, -204.971, 136.375, 0.81", "-121.857, -209.96, 146.429, 0.81", "-128.832, -214.182, 156.859, 0.81", "-134.623, -216.303, 168.599, 0.81" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-25.6998, -52.8465, -0.551072, 0.81", "-29.1766, -58.8554, -0.931398, 0.81", "-32.2375, -64.1973, -1.12447, 1.08", "-33.8767, -66.858, -1.09972, 1.08", "-36.1627, -70.6083, -1.33018, 1.08", "-37.346, -72.6499, -1.52593, 1.08", "-40.9699, -78.875, -2.05802, 1.08", "-41.141, -79.1669, -2.06824, 1.08", "-43.5932, -82.9721, -2.29202, 0.81", "-47.5406, -89.2723, -2.87581, 0.54", "-50.0288, -93.701, -3.48361, 1.08", "-53.8242, -101.536, -4.80031, 1.08", "-55.4471, -105.699, -5.68374, 1.08", "-56.4069, -109.125, -6.60155, 0.81", "-56.8911, -112.556, -7.59664, 0.81", "-56.9517, -116.218, -8.59536, 1.08", "-56.3801, -122.532, -10.6462, 1.08", "-55.594, -126.881, -12.1962, 0.81", "-54.4052, -134.178, -14.5551, 0.54", "-53.8956, -138.305, -15.639, 0.54", "-53.6199, -142.103, -16.5126, 0.54", "-53.5584, -146.472, -17.3441, 0.54", "-53.7147, -149.787, -17.8269, 1.08", "-54.583, -156.323, -18.429, 1.08", "-57.3968, -169.228, -19.0869, 1.08", "-57.4863, -169.551, -19.1028, 1.08", "-59.2749, -175.261, -19.2802, 1.08", "-61.3379, -181.151, -19.2214, 1.08", "-63.3348, -186.52, -19.1275, 1.08", "-64.1899, -188.383, -19.0251, 0.81", "-64.3667, -188.67, -18.9889, 0.81", "-65.3356, -190.452, -18.8903, 0.81", "-67.2211, -194.299, -19.0075, 0.81", "-69.5683, -199.532, -19.4577, 0.81", "-72.5831, -206.394, -20.1738, 0.81", "-74.1965, -210.124, -20.6436, 0.81", "-77.639, -218.215, -21.7312, 0.81", "-79.191, -222.001, -22.3156, 1.08", "-81.131, -227.071, -23.2063, 1.08", "-82.4607, -230.828, -23.8211, 1.08", "-83.5354, -234.497, -24.3311, 0.27", "-85.1636, -239.93, -24.7089, 0.27", "-85.8592, -242.237, -24.631, 0.27", "-86.8517, -245.841, -24.351, 0.54", "-87.6352, -249.491, -24.1406, 0.54", "-88.6376, -255.091, -23.9587, 0.54", "-88.7693, -255.747, -23.9315, 0.54", "-89.409, -259.823, -23.9012, 0.54", "-90.2795, -265.891, -24.3096, 0.54", "-91.1586, -272.519, -25.1775, 0.54", "-92.4752, -280.715, -26.6784, 0.54", "-93.1585, -284.614, -27.5268, 0.54", "-94.1888, -290.054, -28.818, 0.54", "-95.5361, -296.69, -30.5048, 0.54", "-97.0037, -303.2, -32.2149, 0.54", "-99.423, -311.926, -34.4773, 0.54", "-99.8339, -313.36, -34.8596, 0.54", "-101.857, -319.929, -36.4832, 0.54", "-103.179, -323.945, -37.374, 0.54", "-104.581, -328.478, -38.2721, 0.54", "-106.259, -334.444, -39.5713, 0.54", "-107.553, -339.477, -40.6912, 0.54", "-109.077, -345.361, -41.9941, 0.54", "-110.619, -350.699, -43.2822, 0.54", "-110.634, -350.757, -43.2981, 0.54", "-111.356, -354.253, -44.4019, 0.54" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 17
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-131.664, 158.511, -13.2003, 0.81", "-134.445, 161.562, -12.7686, 0.81", "-136.895, 163.819, -12.312, 0.81", "-139.637, 166.192, -11.6758, 0.81", "-142.987, 168.634, -10.7149, 0.81", "-146.148, 171.062, -9.54948, 0.81", "-146.197, 171.103, -9.52825, 0.81", "-149.616, 174.129, -7.84432, 0.81", "-152.66, 176.706, -6.15239, 0.81", "-155.924, 179.262, -4.13553, 0.81", "-160.393, 182.737, -1.07267, 0.81", "-163.912, 185.397, 1.38964, 0.81", "-170.801, 192.593, 6.27351, 0.81" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "-131.664, 158.511, -13.2003, 0.27", "-133.473, 161.295, -11.8994, 0.27", "-136.041, 165.245, -10.0531, 0.27", "-137.377, 167.302, -9.09182, 0.27" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-26.3021, -19.2038, -33.7254, 0.54", "-27.1364, -22.9214, -34.6256, 0.54", "-28.1099, -26.3714, -35.4354, 0.54", "-29.2343, -29.6117, -36.2514, 0.54", "-31.81, -35.424, -37.8982, 0.54", "-34.5719, -40.8384, -39.6974, 0.54", "-38.3486, -47.5912, -42.3637, 0.54", "-38.4925, -47.827, -42.4702, 0.54", "-41.1166, -51.8491, -44.4148, 0.54", "-45.539, -58.3219, -47.6537, 0.54", "-48.7862, -62.4972, -49.8255, 0.54", "-51.8349, -66.33, -52.2156, 0.54", "-53.9703, -69.0575, -54.2012, 0.54" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-26.3021, -19.2038, -33.7254, 0.54", "-32.0913, -20.6329, -39.8048, 0.54", "-36.595, -21.7727, -43.8581, 0.81", "-39.7344, -22.6821, -46.3884, 0.81", "-51.0496, -26.4073, -55.0092, 0.81", "-57.5575, -28.7004, -59.5334, 0.81", "-63.3414, -30.9058, -63.4902, 0.81", "-71.661, -34.1639, -68.6301, 0.81", "-76.8251, -36.3791, -71.5397, 0.81", "-82.814, -39.1935, -74.7868, 0.81", "-90.1792, -42.9681, -78.5656, 0.81", "-100.103, -48.3491, -83.8894, 0.81", "-100.158, -48.3794, -83.9185, 0.81", "-109.702, -53.7778, -89.2243, 0.81", "-109.943, -53.9089, -89.3635, 0.81", "-120.805, -59.7176, -95.5448, 0.81" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "307.769, 52.5302, 41.9161, 0.27", "314.128, 54.0323, 45.1493, 0.27", "320.443, 55.372, 48.546, 0.27" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "307.769, 52.5302, 41.9161, 0.27", "315.66, 54.7, 45.9316, 0.27", "323.864, 55.3666, 49.8973, 0.27" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-111.356, -354.253, -44.4019, 0.54", "-112.071, -359.094, -45.7547, 0.54", "-112.901, -364.404, -47.2425, 0.54", "-112.938, -364.695, -47.3241, 0.54", "-113.619, -370.297, -48.5675, 0.54", "-114.075, -373.911, -49.2003, 0.54", "-114.102, -374.123, -49.2265, 0.54", "-115.063, -381.125, -49.641, 0.54", "-115.717, -386.28, -49.7404, 0.54", "-116.403, -391.748, -49.7372, 0.54", "-117.254, -398.842, -49.3327, 0.54", "-117.917, -403.702, -48.7804, 0.54", "-118.68, -408.605, -47.993, 0.54", "-119.385, -412.373, -47.1133, 0.54", "-120.482, -416.996, -45.6997, 0.54", "-121.874, -421.625, -43.9814, 0.54", "-122.886, -424.034, -42.7611, 0.54", "-123.876, -425.715, -41.7157, 0.54", "-124.704, -426.754, -40.918, 0.54", "-126.504, -428.531, -39.3581, 0.54", "-128.475, -430.164, -37.8019, 0.54", "-130.354, -431.702, -36.4686, 0.54", "-131.871, -433.14, -35.3561, 0.54", "-133.809, -435.155, -33.8742, 0.54", "-134.873, -436.374, -33.1295, 0.54", "-135.908, -437.665, -32.4937, 0.54", "-138.124, -440.856, -31.089, 0.54", "-139.976, -443.982, -29.816, 0.54", "-141.618, -447.411, -28.4983, 0.54", "-142.901, -450.725, -27.3515, 0.54", "-144.083, -454.738, -26.1676, 0.54", "-144.814, -458.419, -25.245, 0.54", "-145.193, -461.258, -24.629, 0.54", "-145.278, -464.984, -23.8705, 0.54", "-145.003, -466.789, -23.5642, 0.54", "-143.594, -470.358, -22.7983, 0.54", "-143.396, -470.589, -22.7759, 0.54" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-111.356, -354.253, -44.4019, 0.54", "-111.28, -358.551, -41.4473, 0.54", "-111.235, -361.107, -39.6894, 0.54" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_23", "dend_20", "dend_13", "dend_6", "dend_3", "dend_0", "dend_25", "dend_24", "dend_22", "dend_21", "dend_15", "dend_14", "dend_10", "dend_7", "dend_5", "dend_4", "dend_2", "dend_1", "dend_29", "dend_26", "dend_19", "dend_16", "dend_12", "dend_11", "dend_9", "dend_8", "dend_28", "dend_27", "dend_18", "dend_17" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_23", "dend_20", "dend_13", "dend_6", "dend_3", "dend_0", "dend_25", "dend_24", "dend_22", "dend_21", "dend_15", "dend_14", "dend_10", "dend_7", "dend_5", "dend_4", "dend_2", "dend_1", "dend_29", "dend_26", "dend_19", "dend_16", "dend_12", "dend_11", "dend_9", "dend_8", "dend_28", "dend_27", "dend_18", "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_23", "dend_23", "dend_23", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_6", "dend_6", "dend_3", "dend_3", "dend_3", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_22", "dend_22", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "axon_1", "axon_1", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_11", "dend_11", "dend_11", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_28", "dend_28", "dend_27", "dend_27", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_17", "dend_17" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "5.67935E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "5.67935E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "3.6794998E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cSTUT_7_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cSTUT_7_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cSTUT189_L5_LBC_29803173bd_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_23, id: dend_23, parent: soma_0
create dend_23
public dend_23
// Section: dend_20, id: dend_20, parent: soma_0
create dend_20
public dend_20
// Section: dend_13, id: dend_13, parent: soma_0
create dend_13
public dend_13
// Section: dend_6, id: dend_6, parent: soma_0
create dend_6
public dend_6
// Section: dend_3, id: dend_3, parent: soma_0
create dend_3
public dend_3
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_25, id: dend_25, parent: dend_23
create dend_25
public dend_25
// Section: dend_24, id: dend_24, parent: dend_23
create dend_24
public dend_24
// Section: dend_22, id: dend_22, parent: dend_20
create dend_22
public dend_22
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_15, id: dend_15, parent: dend_13
create dend_15
public dend_15
// Section: dend_14, id: dend_14, parent: dend_13
create dend_14
public dend_14
// Section: dend_10, id: dend_10, parent: dend_6
create dend_10
public dend_10
// Section: dend_7, id: dend_7, parent: dend_6
create dend_7
public dend_7
// Section: dend_5, id: dend_5, parent: dend_3
create dend_5
public dend_5
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_29, id: dend_29, parent: dend_25
create dend_29
public dend_29
// Section: dend_26, id: dend_26, parent: dend_25
create dend_26
public dend_26
// Section: dend_19, id: dend_19, parent: dend_15
create dend_19
public dend_19
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_12, id: dend_12, parent: dend_10
create dend_12
public dend_12
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_9, id: dend_9, parent: dend_7
create dend_9
public dend_9
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_28, id: dend_28, parent: dend_26
create dend_28
public dend_28
// Section: dend_27, id: dend_27, parent: dend_26
create dend_27
public dend_27
// Section: dend_18, id: dend_18, parent: dend_16
create dend_18
public dend_18
// Section: dend_17, id: dend_17, parent: dend_16
create dend_17
public dend_17

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_33
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_23, dend_23, dend_23, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_13, dend_13, dend_13, dend_13, dend_13, dend_6, dend_6, dend_3, dend_3, dend_3, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, axon_1, axon_1, dend_29, dend_29, dend_29, dend_29, dend_29, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_28, dend_28, dend_27, dend_27, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cSTUT_7_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cSTUT_7_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_23(0), soma_0(0.49999957196365796)
    connect dend_20(0), soma_0(0.49999957196365796)
    connect dend_13(0), soma_0(0.49999957196365796)
    connect dend_6(0), soma_0(0.49999957196365796)
    connect dend_3(0), soma_0(0.49999957196365796)
    connect dend_0(0), soma_0(0.49999957196365796)
    connect axon_0(0), soma_0(1.0)
    connect dend_25(0), dend_23(1.0)
    connect dend_24(0), dend_23(1.0)
    connect dend_22(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_15(0), dend_13(1.0)
    connect dend_14(0), dend_13(1.0)
    connect dend_10(0), dend_6(1.0)
    connect dend_7(0), dend_6(1.0)
    connect dend_5(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_29(0), dend_25(1.0)
    connect dend_26(0), dend_25(1.0)
    connect dend_19(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_12(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_9(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_28(0), dend_26(1.0)
    connect dend_27(0), dend_26(1.0)
    connect dend_18(0), dend_16(1.0)
    connect dend_17(0), dend_16(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -4.47353, -9.82937, -0.0150783, 3.11345 ) }
    soma_0 { pt3dadd( -4.06901, -8.79368, -0.0135938, 5.39642 ) }
    soma_0 { pt3dadd( -3.66449, -7.75799, -0.0121094, 6.72082 ) }
    soma_0 { pt3dadd( -3.25998, -6.72231, -0.0106249, 7.70122 ) }
    soma_0 { pt3dadd( -2.85546, -5.68662, -0.00914047, 8.43968 ) }
    soma_0 { pt3dadd( -2.45095, -4.65093, -0.00765602, 9.25919 ) }
    soma_0 { pt3dadd( -2.04643, -3.61524, -0.00617157, 10.0787 ) }
    soma_0 { pt3dadd( -1.64192, -2.57956, -0.00468712, 10.8982 ) }
    soma_0 { pt3dadd( -1.2374, -1.54387, -0.00320267, 11.7151 ) }
    soma_0 { pt3dadd( -0.832884, -0.508183, -0.00171822, 12.3073 ) }
    soma_0 { pt3dadd( -0.428368, 0.527504, -2.33766E-4, 12.0741 ) }
    soma_0 { pt3dadd( -0.023852, 1.56319, 0.00125068, 11.8342 ) }
    soma_0 { pt3dadd( 0.380664, 2.59888, 0.00273513, 11.5616 ) }
    soma_0 { pt3dadd( 0.78518, 3.63457, 0.00421958, 11.0624 ) }
    soma_0 { pt3dadd( 1.1897, 4.67025, 0.00570403, 10.5822 ) }
    soma_0 { pt3dadd( 1.59421, 5.70594, 0.00718848, 10.0942 ) }
    soma_0 { pt3dadd( 1.99873, 6.74163, 0.00867293, 9.27653 ) }
    soma_0 { pt3dadd( 2.40324, 7.77731, 0.0101574, 7.88308 ) }
    soma_0 { pt3dadd( 2.80776, 8.813, 0.0116418, 6.37032 ) }
    soma_0 { pt3dadd( 3.21227, 9.84869, 0.0131263, 4.97817 ) }
    soma_0 { pt3dadd( 3.61679, 10.8844, 0.0146107, 4.57234 ) }
    // Section: dend_23, id: dend_23, parent: soma_0 (entry count 21/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( 0.0120471, -7.68767, 1.51098, 1.08 ) }
    dend_23 { pt3dadd( 3.08543, -12.945, 1.04432, 1.08 ) }
    dend_23 { pt3dadd( 5.49592, -17.0684, 0.6783, 1.08 ) }
    dend_23 { pt3dadd( 7.15502, -19.9064, 0.42638, 1.08 ) }
    // Section: dend_20, id: dend_20, parent: soma_0 (entry count 25/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( -4.41795, -8.40967, -0.0190242, 1.08 ) }
    dend_20 { pt3dadd( -3.93629, -8.87293, -0.0258147, 1.08 ) }
    dend_20 { pt3dadd( -0.957946, -11.4432, -0.0788157, 1.08 ) }
    dend_20 { pt3dadd( 0.301847, -12.6108, -0.101273, 1.08 ) }
    dend_20 { pt3dadd( 2.32667, -14.5042, -0.135407, 1.08 ) }
    dend_20 { pt3dadd( 5.8078, -17.9082, -0.191782, 1.08 ) }
    dend_20 { pt3dadd( 8.37435, -20.4813, -0.230321, 1.08 ) }
    dend_20 { pt3dadd( 8.51183, -20.6334, -0.232473, 1.08 ) }
    dend_20 { pt3dadd( 12.6996, -26.1245, -0.339848, 1.08 ) }
    dend_20 { pt3dadd( 13.9372, -28.0392, -0.418934, 1.08 ) }
    dend_20 { pt3dadd( 14.9432, -29.9325, -0.532749, 1.08 ) }
    dend_20 { pt3dadd( 15.9773, -33.0005, -0.754891, 1.08 ) }
    dend_20 { pt3dadd( 16.8188, -37.1187, -1.07042, 1.08 ) }
    dend_20 { pt3dadd( 17.2221, -40.7379, -1.36846, 1.08 ) }
    dend_20 { pt3dadd( 17.1825, -42.1311, -1.49097, 1.08 ) }
    dend_20 { pt3dadd( 17.0984, -43.8859, -1.62873, 1.08 ) }
    dend_20 { pt3dadd( 16.9293, -48.258, -1.93889, 1.08 ) }
    dend_20 { pt3dadd( 16.9797, -50.88, -2.09687, 1.08 ) }
    dend_20 { pt3dadd( 17.2655, -53.183, -2.31434, 1.08 ) }
    dend_20 { pt3dadd( 17.7583, -56.212, -2.71327, 1.08 ) }
    dend_20 { pt3dadd( 18.5798, -60.2995, -3.33826, 1.08 ) }
    dend_20 { pt3dadd( 18.6662, -60.7509, -3.42176, 1.08 ) }
    dend_20 { pt3dadd( 19.305, -63.7172, -4.06257, 1.08 ) }
    dend_20 { pt3dadd( 20.3366, -67.4609, -4.91246, 1.08 ) }
    dend_20 { pt3dadd( 21.167, -70.3524, -5.52452, 1.08 ) }
    dend_20 { pt3dadd( 22.6341, -74.8653, -6.54801, 1.08 ) }
    dend_20 { pt3dadd( 23.3372, -77.0779, -7.04789, 1.08 ) }
    dend_20 { pt3dadd( 23.6938, -78.319, -7.30606, 1.08 ) }
    dend_20 { pt3dadd( 24.4844, -81.4629, -7.92953, 1.08 ) }
    dend_20 { pt3dadd( 25.8687, -86.2091, -8.72123, 1.08 ) }
    dend_20 { pt3dadd( 26.8663, -89.7575, -9.35129, 0.81 ) }
    dend_20 { pt3dadd( 27.2551, -90.9944, -9.584, 0.81 ) }
    dend_20 { pt3dadd( 27.9617, -93.273, -10.1151, 0.81 ) }
    dend_20 { pt3dadd( 28.6764, -95.6489, -10.712, 0.81 ) }
    dend_20 { pt3dadd( 29.2534, -98.0287, -11.3105, 0.81 ) }
    dend_20 { pt3dadd( 30.1408, -101.968, -12.2888, 0.81 ) }
    dend_20 { pt3dadd( 31.7873, -109.185, -14.1223, 0.81 ) }
    dend_20 { pt3dadd( 32.7433, -112.534, -15.0327, 0.81 ) }
    dend_20 { pt3dadd( 33.7735, -115.701, -15.8674, 0.81 ) }
    dend_20 { pt3dadd( 34.9719, -119.068, -16.6774, 0.81 ) }
    dend_20 { pt3dadd( 35.0494, -119.257, -16.7244, 0.81 ) }
    dend_20 { pt3dadd( 36.8415, -122.952, -17.6539, 0.81 ) }
    dend_20 { pt3dadd( 37.8719, -125.068, -18.1263, 0.81 ) }
    dend_20 { pt3dadd( 40.8779, -130.295, -19.0658, 0.81 ) }
    dend_20 { pt3dadd( 43.0177, -133.677, -19.6846, 0.81 ) }
    dend_20 { pt3dadd( 44.4408, -135.781, -20.0978, 0.81 ) }
    dend_20 { pt3dadd( 44.552, -135.958, -20.1312, 0.81 ) }
    dend_20 { pt3dadd( 45.7642, -138.227, -20.4968, 0.81 ) }
    dend_20 { pt3dadd( 48.3422, -143.66, -21.5076, 0.81 ) }
    dend_20 { pt3dadd( 48.3561, -143.696, -21.5142, 0.81 ) }
    dend_20 { pt3dadd( 48.7531, -145.645, -21.8039, 0.81 ) }
    dend_20 { pt3dadd( 48.9463, -147.022, -21.9529, 0.81 ) }
    dend_20 { pt3dadd( 49.3451, -150.312, -22.2567, 0.81 ) }
    dend_20 { pt3dadd( 49.4783, -151.251, -22.3334, 0.81 ) }
    dend_20 { pt3dadd( 50.1481, -156.898, -22.8282, 0.81 ) }
    dend_20 { pt3dadd( 50.5459, -159.736, -23.2152, 0.81 ) }
    dend_20 { pt3dadd( 51.0795, -162.939, -23.7488, 0.81 ) }
    dend_20 { pt3dadd( 51.8569, -167.617, -24.9049, 0.81 ) }
    dend_20 { pt3dadd( 52.3701, -170.439, -25.8069, 0.81 ) }
    dend_20 { pt3dadd( 52.9463, -173.499, -27.0191, 0.81 ) }
    dend_20 { pt3dadd( 53.6933, -177.338, -28.8572, 0.81 ) }
    dend_20 { pt3dadd( 53.7017, -177.378, -28.8792, 0.81 ) }
    dend_20 { pt3dadd( 54.3194, -181.534, -31.486, 0.81 ) }
    dend_20 { pt3dadd( 54.5435, -183.706, -33.0682, 0.81 ) }
    dend_20 { pt3dadd( 54.5934, -185.633, -34.517, 0.27 ) }
    // Section: dend_13, id: dend_13, parent: soma_0 (entry count 90/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -6.04795, -7.43117, 1.45098, 1.08 ) }
    dend_13 { pt3dadd( -6.22308, -11.1516, 0.078477, 1.08 ) }
    dend_13 { pt3dadd( -6.46538, -16.2991, -1.82051, 1.35 ) }
    dend_13 { pt3dadd( -6.85725, -24.6242, -4.89172, 1.35 ) }
    dend_13 { pt3dadd( -7.00897, -27.8475, -6.0808, 1.35 ) }
    dend_13 { pt3dadd( -7.02147, -28.1132, -6.17883, 1.35 ) }
    // Section: dend_6, id: dend_6, parent: soma_0 (entry count 96/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -2.31794, 6.75233, 2.93098, 1.89 ) }
    dend_6 { pt3dadd( -4.58436, 7.85551, 2.93098, 1.89 ) }
    dend_6 { pt3dadd( -7.69331, 9.36879, 2.93098, 1.89 ) }
    // Section: dend_3, id: dend_3, parent: soma_0 (entry count 99/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -0.377952, 8.23434, 1.46098, 1.41 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_3 { pt3dadd( -3.71664, 9.5506, 2.53994, 1.41 ) }
    dend_3 { pt3dadd( -7.15519, 10.9062, 3.65117, 1.23 ) }
    dend_3 { pt3dadd( -10.5824, 12.2574, 4.75875, 1.23 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 3/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 4.75205, 10.7233, -2.91902, 1.11 ) }
    dend_0 { pt3dadd( 4.80754, 11.7312, -2.97639, 1.11 ) }
    dend_0 { pt3dadd( 5.30731, 14.4304, -3.1882, 1.11 ) }
    dend_0 { pt3dadd( 6.10127, 17.0327, -3.40478, 1.11 ) }
    dend_0 { pt3dadd( 6.80916, 18.506, -3.51917, 1.11 ) }
    dend_0 { pt3dadd( 8.27929, 21.1003, -3.85377, 1.11 ) }
    dend_0 { pt3dadd( 9.98336, 24.0637, -4.36216, 1.11 ) }
    dend_0 { pt3dadd( 11.0077, 25.6377, -4.68182, 1.11 ) }
    dend_0 { pt3dadd( 13.0942, 28.4746, -5.38314, 1.67 ) }
    dend_0 { pt3dadd( 16.2505, 32.6607, -6.5616, 1.11 ) }
    dend_0 { pt3dadd( 17.5828, 34.4233, -7.06909, 1.11 ) }
    dend_0 { pt3dadd( 18.8224, 36.1225, -7.58598, 1.11 ) }
    dend_0 { pt3dadd( 20.1223, 38.0609, -8.17172, 1.11 ) }
    dend_0 { pt3dadd( 22.0141, 40.9567, -8.96815, 1.11 ) }
    dend_0 { pt3dadd( 23.711, 43.5809, -9.76822, 1.11 ) }
    dend_0 { pt3dadd( 25.0624, 45.7378, -10.4274, 1.11 ) }
    dend_0 { pt3dadd( 26.7128, 48.2584, -11.1416, 1.11 ) }
    dend_0 { pt3dadd( 27.3204, 49.1803, -11.3999, 1.11 ) }
    dend_0 { pt3dadd( 29.6505, 52.777, -12.4469, 1.11 ) }
    dend_0 { pt3dadd( 31.2442, 55.2406, -13.1355, 1.11 ) }
    dend_0 { pt3dadd( 31.6608, 55.8986, -13.3193, 1.11 ) }
    dend_0 { pt3dadd( 32.458, 57.2892, -13.6912, 1.11 ) }
    dend_0 { pt3dadd( 34.0329, 60.1464, -14.4721, 1.11 ) }
    dend_0 { pt3dadd( 35.832, 63.5055, -15.3951, 1.11 ) }
    dend_0 { pt3dadd( 36.9907, 65.8275, -16.0452, 1.11 ) }
    dend_0 { pt3dadd( 38.2636, 68.2014, -16.6818, 1.11 ) }
    dend_0 { pt3dadd( 39.4241, 70.2828, -17.2953, 1.11 ) }
    dend_0 { pt3dadd( 40.4287, 72.1426, -17.9059, 1.06 ) }
    dend_0 { pt3dadd( 40.9847, 73.1831, -18.3177, 0.53 ) }
    dend_0 { pt3dadd( 41.4083, 74.1898, -18.7527, 0.35 ) }
    dend_0 { pt3dadd( 41.9665, 75.8582, -19.5781, 0.35 ) }
    dend_0 { pt3dadd( 41.9992, 75.983, -19.6462, 0.35 ) }
    dend_0 { pt3dadd( 42.3989, 78.4436, -20.928, 0.35 ) }
    dend_0 { pt3dadd( 42.4833, 79.2287, -21.3517, 0.35 ) }
    dend_0 { pt3dadd( 42.6154, 80.5362, -22.1081, 0.35 ) }
    dend_0 { pt3dadd( 42.8118, 82.3049, -23.1214, 0.35 ) }
    dend_0 { pt3dadd( 42.9651, 83.4363, -23.7796, 0.35 ) }
    dend_0 { pt3dadd( 43.2701, 84.8982, -24.6594, 0.35 ) }
    dend_0 { pt3dadd( 43.7582, 86.4915, -25.6268, 0.35 ) }
    dend_0 { pt3dadd( 43.9991, 87.2474, -26.06, 0.35 ) }
    dend_0 { pt3dadd( 44.2939, 88.1704, -26.574, 0.35 ) }
    dend_0 { pt3dadd( 44.6618, 89.4733, -27.2571, 0.35 ) }
    dend_0 { pt3dadd( 44.9435, 90.5577, -27.8036, 0.35 ) }
    dend_0 { pt3dadd( 45.1683, 91.3641, -28.2176, 0.35 ) }
    dend_0 { pt3dadd( 45.2955, 91.9155, -28.4534, 1.23 ) }
    dend_0 { pt3dadd( 45.3322, 92.0918, -28.5409, 1.23 ) }
    dend_0 { pt3dadd( 45.5399, 93.1776, -29.1641, 0.18 ) }
    dend_0 { pt3dadd( 45.7439, 93.9494, -29.6913, 0.18 ) }
    dend_0 { pt3dadd( 45.9617, 94.524, -30.1101, 0.18 ) }
    dend_0 { pt3dadd( 46.2916, 95.2798, -30.7168, 1.23 ) }
    dend_0 { pt3dadd( 46.6496, 95.932, -31.2117, 0.18 ) }
    dend_0 { pt3dadd( 46.7872, 96.1544, -31.3477, 0.18 ) }
    dend_0 { pt3dadd( 47.7897, 97.4321, -31.9628, 0.18 ) }
    dend_0 { pt3dadd( 48.0533, 97.7359, -32.1019, 0.88 ) }
    dend_0 { pt3dadd( 48.2281, 97.9176, -32.1831, 0.18 ) }
    dend_0 { pt3dadd( 49.2361, 98.8973, -32.5723, 0.18 ) }
    dend_0 { pt3dadd( 50.1649, 99.8174, -32.8323, 0.18 ) }
    dend_0 { pt3dadd( 51.5633, 101.173, -33.112, 1.06 ) }
    dend_0 { pt3dadd( 51.7123, 101.311, -33.1252, 1.06 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 62/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 3.61679, 10.8844, 0.0146107, 0.836755 ) }
    axon_0 { pt3dadd( 9.07397, 24.8565, 0.0146107, 0.836755 ) }
    axon_0 { pt3dadd( 14.5311, 38.8286, 0.0146107, 0.836755 ) }
    // Section: dend_25, id: dend_25, parent: dend_23 (entry count 65/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 7.15502, -19.9064, 0.42638, 1.08 ) }
    dend_25 { pt3dadd( 13.3991, -19.6235, -0.485399, 1.08 ) }
    dend_25 { pt3dadd( 25.5326, -17.8909, -1.60677, 1.08 ) }
    dend_25 { pt3dadd( 37.773, -17.8561, -3.01723, 1.08 ) }
    dend_25 { pt3dadd( 49.7582, -18.6741, -5.74715, 1.08 ) }
    dend_25 { pt3dadd( 62.0644, -18.5798, -6.35244, 1.08 ) }
    dend_25 { pt3dadd( 74.206, -16.8451, -7.37937, 1.08 ) }
    dend_25 { pt3dadd( 86.0558, -13.6391, -7.5051, 1.08 ) }
    dend_25 { pt3dadd( 98.0323, -11.686, -5.45815, 1.08 ) }
    dend_25 { pt3dadd( 109.258, -7.84952, -2.36029, 1.08 ) }
    dend_25 { pt3dadd( 120.425, -3.33377, -0.213382, 1.08 ) }
    dend_25 { pt3dadd( 131.636, 1.39756, 0.963583, 1.08 ) }
    dend_25 { pt3dadd( 142.535, 6.77493, 1.98783, 1.08 ) }
    dend_25 { pt3dadd( 154.399, 9.75775, 0.900739, 1.08 ) }
    dend_25 { pt3dadd( 165.669, 14.41, 1.82999, 1.08 ) }
    dend_25 { pt3dadd( 176.368, 20.21, 2.1593, 1.08 ) }
    dend_25 { pt3dadd( 186.452, 26.9009, 1.44676, 1.08 ) }
    dend_25 { pt3dadd( 197.687, 31.6742, 2.0654, 1.08 ) }
    dend_25 { pt3dadd( 209.451, 34.1533, 4.64645, 1.08 ) }
    dend_25 { pt3dadd( 221.65, 35.0955, 6.07711, 1.08 ) }
    dend_25 { pt3dadd( 233.431, 36.6715, 9.2903, 1.08 ) }
    dend_25 { pt3dadd( 245.686, 36.1059, 10.4157, 1.08 ) }
    // Section: dend_24, id: dend_24, parent: dend_23 (entry count 87/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 7.15502, -19.9064, 0.42638, 1.08 ) }
    dend_24 { pt3dadd( 9.38638, -24.2486, 0.430672, 1.08 ) }
    dend_24 { pt3dadd( 11.7733, -28.5408, 0.312277, 1.08 ) }
    dend_24 { pt3dadd( 14.7568, -33.0805, 0.0527598, 1.08 ) }
    dend_24 { pt3dadd( 17.3683, -36.7527, -0.217957, 1.08 ) }
    dend_24 { pt3dadd( 21.2848, -42.2597, -0.62394, 0.81 ) }
    dend_24 { pt3dadd( 22.6764, -44.2165, -0.768196, 0.81 ) }
    dend_24 { pt3dadd( 24.9115, -47.1281, -1.05064, 0.81 ) }
    dend_24 { pt3dadd( 28.0588, -51.0287, -1.65442, 0.81 ) }
    dend_24 { pt3dadd( 28.1009, -51.0684, -1.66476, 0.81 ) }
    // Section: dend_22, id: dend_22, parent: dend_20 (entry count 97/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( 54.5934, -185.633, -34.517, 0.27 ) }
    dend_22 { pt3dadd( 66.568, -190.478, -35.0697, 0.27 ) }
    dend_22 { pt3dadd( 82.7934, -197.043, -35.8187, 0.27 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 0/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 54.5934, -185.633, -34.517, 0.27 ) }
    dend_21 { pt3dadd( 53.741, -189.507, -37.2055, 0.27 ) }
    dend_21 { pt3dadd( 52.505, -194.864, -41.0497, 0.27 ) }
    dend_21 { pt3dadd( 51.309, -200.04, -44.7082, 0.27 ) }
    dend_21 { pt3dadd( 50.3752, -204.081, -47.5647, 0.27 ) }
    dend_21 { pt3dadd( 49.1676, -209.308, -51.259, 0.27 ) }
    dend_21 { pt3dadd( 46.9976, -218.7, -57.8973, 0.27 ) }
    dend_21 { pt3dadd( 46.9403, -218.909, -58.052, 0.27 ) }
    dend_21 { pt3dadd( 46.5356, -220.611, -59.2965, 0.27 ) }
    // Section: dend_15, id: dend_15, parent: dend_13 (entry count 9/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -7.02147, -28.1132, -6.17883, 1.08 ) }
    dend_15 { pt3dadd( -9.35966, -31.2093, -5.47434, 1.08 ) }
    dend_15 { pt3dadd( -12.4917, -35.3567, -4.53065, 1.08 ) }
    dend_15 { pt3dadd( -15.7308, -39.6458, -3.55472, 1.08 ) }
    dend_15 { pt3dadd( -20.557, -46.0366, -2.10059, 1.08 ) }
    dend_15 { pt3dadd( -22.983, -49.249, -1.36964, 1.08 ) }
    dend_15 { pt3dadd( -25.6998, -52.8465, -0.551072, 1.08 ) }
    // Section: dend_14, id: dend_14, parent: dend_13 (entry count 16/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( -7.02147, -28.1132, -6.17883, 0.27 ) }
    dend_14 { pt3dadd( -8.10761, -30.4242, -6.61874, 0.27 ) }
    dend_14 { pt3dadd( -8.46934, -32.414, -6.82815, 0.54 ) }
    dend_14 { pt3dadd( -8.50768, -32.8705, -6.83719, 1.08 ) }
    dend_14 { pt3dadd( -8.51676, -33.0322, -6.83627, 1.08 ) }
    dend_14 { pt3dadd( -8.68689, -35.4905, -6.84838, 1.08 ) }
    dend_14 { pt3dadd( -8.78031, -36.626, -6.85948, 1.08 ) }
    dend_14 { pt3dadd( -9.04167, -40.3897, -6.87561, 1.08 ) }
    dend_14 { pt3dadd( -9.2717, -43.9088, -6.97329, 1.08 ) }
    dend_14 { pt3dadd( -9.2789, -44.0705, -6.98028, 1.08 ) }
    dend_14 { pt3dadd( -9.27043, -47.0567, -7.14405, 1.08 ) }
    dend_14 { pt3dadd( -9.15268, -48.6957, -7.25581, 1.08 ) }
    dend_14 { pt3dadd( -9.11435, -49.9158, -7.35556, 1.08 ) }
    dend_14 { pt3dadd( -9.15446, -51.0731, -7.47037, 1.08 ) }
    dend_14 { pt3dadd( -9.09107, -52.6575, -7.59565, 1.08 ) }
    dend_14 { pt3dadd( -8.96801, -54.5412, -7.68487, 1.08 ) }
    dend_14 { pt3dadd( -8.92786, -55.8412, -7.69802, 1.08 ) }
    dend_14 { pt3dadd( -9.00417, -60.114, -7.70983, 1.08 ) }
    dend_14 { pt3dadd( -9.0513, -60.9322, -7.73904, 1.08 ) }
    dend_14 { pt3dadd( -9.188, -64.5029, -7.96856, 1.08 ) }
    dend_14 { pt3dadd( -9.20615, -64.8634, -7.99968, 1.08 ) }
    dend_14 { pt3dadd( -9.38551, -68.8112, -8.4117, 1.08 ) }
    dend_14 { pt3dadd( -9.44322, -71.2432, -8.69882, 1.08 ) }
    dend_14 { pt3dadd( -9.29929, -73.7411, -8.99321, 1.08 ) }
    dend_14 { pt3dadd( -9.26648, -77.5166, -9.53404, 1.08 ) }
    dend_14 { pt3dadd( -9.26791, -77.6707, -9.55982, 1.08 ) }
    dend_14 { pt3dadd( -9.26362, -78.324, -9.67393, 1.08 ) }
    dend_14 { pt3dadd( -9.20765, -80.6037, -10.0911, 1.08 ) }
    dend_14 { pt3dadd( -9.10531, -85.7644, -10.9635, 1.08 ) }
    dend_14 { pt3dadd( -9.19694, -89.7577, -11.5096, 1.08 ) }
    dend_14 { pt3dadd( -9.33668, -92.9341, -11.8664, 1.08 ) }
    dend_14 { pt3dadd( -9.43915, -95.2937, -12.0606, 1.08 ) }
    dend_14 { pt3dadd( -9.44007, -95.3296, -12.0621, 1.08 ) }
    dend_14 { pt3dadd( -9.4951, -98.2431, -12.0624, 1.08 ) }
    dend_14 { pt3dadd( -9.42295, -102.165, -11.8517, 1.08 ) }
    dend_14 { pt3dadd( -9.27293, -105.343, -11.5597, 1.08 ) }
    dend_14 { pt3dadd( -9.20502, -108.036, -11.2566, 0.81 ) }
    dend_14 { pt3dadd( -9.12081, -110.851, -10.9644, 0.81 ) }
    dend_14 { pt3dadd( -9.06767, -112.872, -10.788, 0.81 ) }
    dend_14 { pt3dadd( -8.71705, -118.639, -10.4825, 0.81 ) }
    dend_14 { pt3dadd( -8.41222, -121.894, -10.4109, 0.81 ) }
    dend_14 { pt3dadd( -8.30127, -123.015, -10.4159, 0.81 ) }
    dend_14 { pt3dadd( -8.00604, -126.351, -10.4134, 0.81 ) }
    dend_14 { pt3dadd( -7.86451, -128.597, -10.3695, 0.81 ) }
    dend_14 { pt3dadd( -7.69985, -135.173, -10.0727, 0.81 ) }
    dend_14 { pt3dadd( -7.79262, -137.016, -10.0045, 0.81 ) }
    dend_14 { pt3dadd( -7.80601, -137.177, -9.99912, 0.81 ) }
    dend_14 { pt3dadd( -8.26625, -140.732, -9.8966, 0.81 ) }
    dend_14 { pt3dadd( -8.77724, -143.439, -9.79453, 0.81 ) }
    dend_14 { pt3dadd( -9.58222, -146.449, -9.71983, 0.81 ) }
    dend_14 { pt3dadd( -10.7357, -149.864, -9.59582, 0.81 ) }
    dend_14 { pt3dadd( -11.1515, -151.107, -9.56014, 0.81 ) }
    dend_14 { pt3dadd( -12.0164, -153.889, -9.49838, 0.81 ) }
    dend_14 { pt3dadd( -12.6767, -156.085, -9.48376, 0.81 ) }
    dend_14 { pt3dadd( -13.5971, -159.064, -9.50739, 0.81 ) }
    dend_14 { pt3dadd( -14.7772, -163.328, -9.47655, 0.81 ) }
    dend_14 { pt3dadd( -15.6577, -166.621, -9.40032, 0.81 ) }
    dend_14 { pt3dadd( -16.3888, -169.466, -9.37218, 0.81 ) }
    dend_14 { pt3dadd( -17.3518, -173.184, -9.33581, 0.81 ) }
    dend_14 { pt3dadd( -17.8063, -175.048, -9.32231, 0.81 ) }
    dend_14 { pt3dadd( -18.265, -177.173, -9.32628, 0.81 ) }
    dend_14 { pt3dadd( -18.8634, -180.004, -9.39762, 0.81 ) }
    dend_14 { pt3dadd( -19.2207, -182.964, -9.39052, 0.81 ) }
    dend_14 { pt3dadd( -19.251, -184.072, -9.35273, 0.81 ) }
    dend_14 { pt3dadd( -19.2415, -184.3, -9.33681, 1.08 ) }
    dend_14 { pt3dadd( -19.2313, -184.527, -9.31122, 1.08 ) }
    dend_14 { pt3dadd( -19.0411, -187.416, -8.97279, 0.54 ) }
    dend_14 { pt3dadd( -18.6092, -191.679, -8.47463, 0.54 ) }
    dend_14 { pt3dadd( -18.3787, -193.971, -8.23718, 0.54 ) }
    dend_14 { pt3dadd( -18.1573, -196.345, -8.03002, 0.54 ) }
    dend_14 { pt3dadd( -18.0665, -197.901, -7.89942, 0.54 ) }
    dend_14 { pt3dadd( -18.0305, -200.138, -7.711, 0.54 ) }
    dend_14 { pt3dadd( -18.0948, -201.578, -7.56395, 0.54 ) }
    dend_14 { pt3dadd( -18.3905, -204.775, -7.18283, 0.54 ) }
    dend_14 { pt3dadd( -18.5803, -206.288, -6.98901, 0.54 ) }
    dend_14 { pt3dadd( -18.7968, -208.104, -6.75221, 0.54 ) }
    dend_14 { pt3dadd( -19.032, -209.332, -6.61417, 0.54 ) }
    dend_14 { pt3dadd( -19.633, -212.028, -6.32454, 0.54 ) }
    dend_14 { pt3dadd( -19.6423, -212.069, -6.31988, 0.54 ) }
    dend_14 { pt3dadd( -19.7994, -212.714, -6.23304, 0.54 ) }
    dend_14 { pt3dadd( -20.2744, -214.915, -5.92841, 0.54 ) }
    dend_14 { pt3dadd( -20.7915, -217.703, -5.53965, 0.54 ) }
    dend_14 { pt3dadd( -21.5397, -221.645, -5.03542, 0.54 ) }
    dend_14 { pt3dadd( -22.1307, -225.18, -4.63065, 0.54 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_14 { pt3dadd( -22.4488, -227.141, -4.39946, 0.54 ) }
    dend_14 { pt3dadd( -22.8651, -229.892, -4.15784, 0.54 ) }
    dend_14 { pt3dadd( -22.9287, -230.373, -4.12855, 0.54 ) }
    dend_14 { pt3dadd( -23.2148, -233.105, -4.02807, 0.54 ) }
    dend_14 { pt3dadd( -23.6678, -236.35, -4.09398, 0.54 ) }
    dend_14 { pt3dadd( -24.1415, -240.051, -4.31451, 0.54 ) }
    dend_14 { pt3dadd( -24.5053, -242.815, -4.56975, 0.54 ) }
    dend_14 { pt3dadd( -24.8896, -245.44, -4.86155, 0.54 ) }
    dend_14 { pt3dadd( -24.9553, -245.919, -4.92043, 0.54 ) }
    dend_14 { pt3dadd( -25.2971, -248.886, -5.403, 0.54 ) }
    // Section: dend_10, id: dend_10, parent: dend_6 (entry count 10/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -7.69331, 9.36879, 2.93098, 0.81 ) }
    dend_10 { pt3dadd( -8.36676, 11.0016, 3.04509, 0.81 ) }
    dend_10 { pt3dadd( -9.88475, 14.6041, 3.2926, 1.08 ) }
    dend_10 { pt3dadd( -13.0242, 19.5097, 3.76979, 1.08 ) }
    dend_10 { pt3dadd( -13.8365, 20.5818, 3.87341, 1.08 ) }
    dend_10 { pt3dadd( -16.2197, 23.8992, 4.07478, 1.08 ) }
    dend_10 { pt3dadd( -16.254, 23.9472, 4.07658, 1.08 ) }
    dend_10 { pt3dadd( -18.8244, 27.2192, 4.11878, 1.08 ) }
    dend_10 { pt3dadd( -22.7223, 32.1938, 4.02842, 1.08 ) }
    dend_10 { pt3dadd( -24.3744, 34.5339, 3.80505, 1.08 ) }
    dend_10 { pt3dadd( -27.9063, 39.7685, 3.03321, 1.08 ) }
    dend_10 { pt3dadd( -31.3162, 44.8915, 2.02361, 1.08 ) }
    dend_10 { pt3dadd( -33.2666, 47.7722, 1.39636, 1.08 ) }
    dend_10 { pt3dadd( -36.0481, 51.8802, 0.411655, 1.08 ) }
    dend_10 { pt3dadd( -38.1869, 55.0171, -0.406999, 1.08 ) }
    dend_10 { pt3dadd( -38.4303, 55.2962, -0.478971, 1.08 ) }
    dend_10 { pt3dadd( -39.3415, 56.059, -0.660434, 1.08 ) }
    dend_10 { pt3dadd( -44.1614, 59.5378, -1.3254, 1.08 ) }
    dend_10 { pt3dadd( -47.9406, 61.9422, -1.65213, 1.08 ) }
    dend_10 { pt3dadd( -51.7399, 63.9638, -1.80372, 1.08 ) }
    dend_10 { pt3dadd( -55.1163, 65.6642, -1.82448, 1.08 ) }
    dend_10 { pt3dadd( -57.1866, 66.6878, -1.84126, 1.08 ) }
    dend_10 { pt3dadd( -59.0435, 67.8188, -1.90231, 1.08 ) }
    dend_10 { pt3dadd( -62.1061, 70.0418, -2.04666, 1.08 ) }
    dend_10 { pt3dadd( -64.6516, 72.2878, -2.19349, 1.08 ) }
    dend_10 { pt3dadd( -64.8387, 72.4651, -2.20763, 1.08 ) }
    dend_10 { pt3dadd( -68.2739, 76.1074, -2.55229, 1.08 ) }
    dend_10 { pt3dadd( -73.1582, 81.7329, -3.34329, 1.08 ) }
    dend_10 { pt3dadd( -77.2297, 86.5186, -4.09269, 1.08 ) }
    dend_10 { pt3dadd( -80.9112, 90.9763, -4.96489, 1.08 ) }
    dend_10 { pt3dadd( -84.7332, 95.9477, -6.01224, 1.08 ) }
    dend_10 { pt3dadd( -88.8051, 101.557, -7.21845, 1.08 ) }
    dend_10 { pt3dadd( -92.5025, 107.104, -8.54195, 1.08 ) }
    dend_10 { pt3dadd( -95.4874, 111.576, -9.75142, 1.08 ) }
    dend_10 { pt3dadd( -97.0876, 114.249, -10.5244, 1.08 ) }
    dend_10 { pt3dadd( -99.9589, 119.019, -11.8439, 1.08 ) }
    dend_10 { pt3dadd( -102.679, 124.136, -13.0824, 1.08 ) }
    dend_10 { pt3dadd( -105.249, 128.723, -13.9838, 0.81 ) }
    dend_10 { pt3dadd( -107.257, 131.952, -14.3729, 0.81 ) }
    dend_10 { pt3dadd( -109.813, 135.871, -14.699, 0.81 ) }
    dend_10 { pt3dadd( -111.97, 138.738, -14.7777, 0.81 ) }
    dend_10 { pt3dadd( -113.84, 140.896, -14.7934, 0.54 ) }
    dend_10 { pt3dadd( -118.151, 145.487, -14.5888, 0.54 ) }
    dend_10 { pt3dadd( -122.638, 149.962, -14.0688, 1.08 ) }
    dend_10 { pt3dadd( -123.419, 150.736, -13.9496, 1.08 ) }
    dend_10 { pt3dadd( -125.955, 153.102, -13.6132, 1.08 ) }
    dend_10 { pt3dadd( -131.664, 158.511, -13.2003, 1.08 ) }
    // Section: dend_7, id: dend_7, parent: dend_6 (entry count 57/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -7.69331, 9.36879, 2.93098, 1.08 ) }
    dend_7 { pt3dadd( -11.8203, 4.17522, -3.96772, 1.08 ) }
    dend_7 { pt3dadd( -14.3181, 1.06274, -7.96161, 0.81 ) }
    dend_7 { pt3dadd( -17.4154, -3.34284, -13.7376, 1.08 ) }
    dend_7 { pt3dadd( -19.0699, -5.88253, -17.055, 1.08 ) }
    dend_7 { pt3dadd( -20.7554, -8.46988, -20.4346, 1.08 ) }
    dend_7 { pt3dadd( -23.1974, -12.2184, -25.331, 1.08 ) }
    dend_7 { pt3dadd( -24.3678, -14.4204, -27.8309, 1.08 ) }
    dend_7 { pt3dadd( -26.0888, -18.6834, -32.9968, 0.54 ) }
    dend_7 { pt3dadd( -26.3021, -19.2038, -33.7254, 0.54 ) }
    // Section: dend_5, id: dend_5, parent: dend_3 (entry count 67/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -10.5824, 12.2574, 4.75875, 0.53 ) }
    dend_5 { pt3dadd( -11.9654, 12.3321, 4.80927, 0.53 ) }
    dend_5 { pt3dadd( -15.0694, 12.4999, 4.92264, 0.53 ) }
    dend_5 { pt3dadd( -15.4794, 12.522, 4.93761, 0.53 ) }
    dend_5 { pt3dadd( -17.3524, 12.6232, 5.00602, 0.53 ) }
    dend_5 { pt3dadd( -19.6131, 12.7454, 5.08859, 0.53 ) }
    dend_5 { pt3dadd( -22.4783, 12.9002, 5.19324, 0.53 ) }
    dend_5 { pt3dadd( -34.0359, 14.5848, 4.08828, 0.53 ) }
    dend_5 { pt3dadd( -45.1533, 18.0595, 5.10159, 0.53 ) }
    dend_5 { pt3dadd( -55.9446, 22.3492, 6.19676, 0.53 ) }
    dend_5 { pt3dadd( -65.3871, 28.2684, 9.34284, 0.53 ) }
    dend_5 { pt3dadd( -75.5705, 33.3565, 11.7039, 0.53 ) }
    dend_5 { pt3dadd( -85.5527, 37.9741, 15.5187, 0.53 ) }
    dend_5 { pt3dadd( -96.0599, 40.8793, 19.7662, 0.53 ) }
    dend_5 { pt3dadd( -106.757, 43.9477, 23.3674, 0.53 ) }
    dend_5 { pt3dadd( -117.935, 46.0488, 26.2003, 0.53 ) }
    dend_5 { pt3dadd( -129.558, 46.4014, 27.8071, 0.53 ) }
    dend_5 { pt3dadd( -140.759, 48.4383, 30.5992, 0.53 ) }
    dend_5 { pt3dadd( -151.941, 50.7747, 33.2016, 0.53 ) }
    dend_5 { pt3dadd( -163.092, 53.8486, 34.9711, 0.53 ) }
    dend_5 { pt3dadd( -174.634, 54.7743, 36.8852, 0.53 ) }
    dend_5 { pt3dadd( -186.337, 54.7991, 37.8007, 0.53 ) }
    dend_5 { pt3dadd( -197.823, 56.7035, 39.19, 0.53 ) }
    dend_5 { pt3dadd( -208.998, 59.8052, 40.7449, 0.53 ) }
    dend_5 { pt3dadd( -219.753, 63.824, 42.8403, 0.53 ) }
    dend_5 { pt3dadd( -230.304, 67.3646, 46.3958, 0.53 ) }
    dend_5 { pt3dadd( -241.018, 69.7582, 50.4768, 0.53 ) }
    dend_5 { pt3dadd( -250.649, 71.5308, 56.9166, 0.53 ) }
    dend_5 { pt3dadd( -260.087, 71.0005, 63.8756, 0.53 ) }
    dend_5 { pt3dadd( -269.075, 68.9228, 71.1125, 0.53 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 97/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -10.5824, 12.2574, 4.75875, 0.53 ) }
    dend_4 { pt3dadd( -10.4441, 14.5559, 5.92479, 0.53 ) }
    dend_4 { pt3dadd( -10.4216, 14.9301, 6.11461, 0.53 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_4 { pt3dadd( -10.2109, 18.4324, 7.89134, 0.53 ) }
    dend_4 { pt3dadd( -11.1946, 28.6331, 11.2131, 0.53 ) }
    dend_4 { pt3dadd( -11.1915, 38.9845, 14.1422, 0.53 ) }
    dend_4 { pt3dadd( -12.8288, 49.0799, 17.5683, 0.53 ) }
    dend_4 { pt3dadd( -14.148, 58.3999, 22.9266, 0.53 ) }
    dend_4 { pt3dadd( -14.8147, 68.5381, 26.5092, 0.53 ) }
    dend_4 { pt3dadd( -14.9003, 78.8217, 29.6794, 0.53 ) }
    dend_4 { pt3dadd( -12.9696, 89.3216, 31.0028, 0.53 ) }
    dend_4 { pt3dadd( -10.6065, 99.8279, 31.2657, 0.53 ) }
    dend_4 { pt3dadd( -8.16716, 110.318, 30.6569, 0.53 ) }
    dend_4 { pt3dadd( -6.8113, 120.738, 28.0218, 0.53 ) }
    dend_4 { pt3dadd( -4.77454, 131.225, 26.3923, 0.53 ) }
    dend_4 { pt3dadd( -4.24101, 141.929, 25.182, 0.53 ) }
    dend_4 { pt3dadd( -4.13306, 152.498, 22.8671, 0.53 ) }
    dend_4 { pt3dadd( -3.03996, 162.882, 19.9487, 0.53 ) }
    dend_4 { pt3dadd( -4.29502, 173.422, 17.8064, 0.53 ) }
    dend_4 { pt3dadd( -7.58337, 183.21, 14.2258, 0.53 ) }
    dend_4 { pt3dadd( -10.0382, 193.056, 10.1749, 0.53 ) }
    dend_4 { pt3dadd( -11.2726, 202.724, 5.18923, 0.53 ) }
    dend_4 { pt3dadd( -10.5257, 212.433, 0.212861, 0.53 ) }
    dend_4 { pt3dadd( -11.6914, 222.633, -3.39378, 0.53 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 21/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 51.7123, 101.311, -33.1252, 0.18 ) }
    dend_2 { pt3dadd( 52.238, 101.649, -33.0367, 0.18 ) }
    dend_2 { pt3dadd( 53.795, 102.704, -32.7346, 0.18 ) }
    dend_2 { pt3dadd( 56.5552, 104.769, -32.1741, 0.53 ) }
    dend_2 { pt3dadd( 59.782, 107.157, -31.678, 0.53 ) }
    dend_2 { pt3dadd( 62.5301, 109.289, -31.345, 0.35 ) }
    dend_2 { pt3dadd( 65.1649, 111.285, -31.2182, 0.35 ) }
    dend_2 { pt3dadd( 65.5282, 111.565, -31.2259, 0.35 ) }
    dend_2 { pt3dadd( 67.6637, 113.3, -31.527, 0.35 ) }
    dend_2 { pt3dadd( 70.4756, 115.523, -32.291, 0.35 ) }
    dend_2 { pt3dadd( 72.7685, 116.888, -33.5348, 0.35 ) }
    dend_2 { pt3dadd( 75.4418, 118.045, -35.4101, 0.35 ) }
    dend_2 { pt3dadd( 75.6031, 118.105, -35.5472, 0.35 ) }
    dend_2 { pt3dadd( 77.3006, 118.652, -37.32, 0.18 ) }
    dend_2 { pt3dadd( 79.3773, 119.174, -39.6752, 0.18 ) }
    dend_2 { pt3dadd( 83.2422, 120.006, -44.4901, 0.18 ) }
    dend_2 { pt3dadd( 83.3095, 120.016, -44.5767, 0.18 ) }
    dend_2 { pt3dadd( 85.0994, 120.349, -46.8728, 0.53 ) }
    dend_2 { pt3dadd( 88.1329, 120.88, -50.7973, 0.53 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 40/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 51.7123, 101.311, -33.1252, 0.18 ) }
    dend_1 { pt3dadd( 51.7643, 102.238, -33.4494, 0.18 ) }
    dend_1 { pt3dadd( 52.0609, 107.522, -35.2975, 0.18 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 43/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 14.5311, 38.8286, 0.0146107, 0.54 ) }
    axon_1 { pt3dadd( 19.9883, 52.8007, 0.0146107, 0.54 ) }
    axon_1 { pt3dadd( 25.4455, 66.7728, 0.0146107, 0.54 ) }
    // Section: dend_29, id: dend_29, parent: dend_25 (entry count 46/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 245.686, 36.1059, 10.4157, 0.18 ) }
    dend_29 { pt3dadd( 256.121, 39.9266, 7.05328, 0.18 ) }
    dend_29 { pt3dadd( 266.231, 45.19, 5.2011, 0.18 ) }
    dend_29 { pt3dadd( 276.381, 50.6072, 5.8145, 0.18 ) }
    dend_29 { pt3dadd( 285.977, 56.3108, 8.53115, 0.18 ) }
    dend_29 { pt3dadd( 296.03, 60.4099, 12.495, 0.18 ) }
    // Section: dend_26, id: dend_26, parent: dend_25 (entry count 52/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 245.686, 36.1059, 10.4157, 0.18 ) }
    dend_26 { pt3dadd( 255.509, 38.0949, 13.0694, 0.18 ) }
    dend_26 { pt3dadd( 264.93, 41.2401, 15.9359, 0.18 ) }
    dend_26 { pt3dadd( 273.534, 43.4842, 21.2584, 0.18 ) }
    dend_26 { pt3dadd( 282.03, 43.9987, 27.2096, 0.18 ) }
    dend_26 { pt3dadd( 290.248, 46.255, 33.1077, 0.18 ) }
    dend_26 { pt3dadd( 299.495, 48.7548, 37.0435, 0.18 ) }
    dend_26 { pt3dadd( 307.769, 52.5302, 41.9161, 0.18 ) }
    // Section: dend_19, id: dend_19, parent: dend_15 (entry count 60/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -25.6998, -52.8465, -0.551072, 1.08 ) }
    dend_19 { pt3dadd( -28.8033, -55.3349, 2.74653, 1.08 ) }
    dend_19 { pt3dadd( -31.3208, -57.3796, 5.22836, 0.81 ) }
    dend_19 { pt3dadd( -33.9994, -59.6896, 7.86688, 0.81 ) }
    dend_19 { pt3dadd( -36.5137, -61.8579, 10.3436, 0.81 ) }
    dend_19 { pt3dadd( -39.4444, -64.3854, 13.2304, 0.81 ) }
    dend_19 { pt3dadd( -43.0235, -67.4719, 16.7559, 0.81 ) }
    dend_19 { pt3dadd( -44.4516, -68.7146, 18.0081, 0.81 ) }
    dend_19 { pt3dadd( -46.8619, -70.5551, 19.908, 0.81 ) }
    dend_19 { pt3dadd( -53.9854, -79.1966, 26.5977, 0.81 ) }
    dend_19 { pt3dadd( -60.5223, -87.9504, 33.7184, 0.81 ) }
    dend_19 { pt3dadd( -66.408, -94.8919, 43.2114, 0.81 ) }
    dend_19 { pt3dadd( -70.8299, -103.243, 52.2504, 0.81 ) }
    dend_19 { pt3dadd( -74.7486, -111.913, 61.1918, 0.81 ) }
    dend_19 { pt3dadd( -79.8488, -121.864, 67.7297, 0.81 ) }
    dend_19 { pt3dadd( -82.5511, -133.143, 73.2148, 0.81 ) }
    dend_19 { pt3dadd( -84.2345, -144.637, 78.6075, 0.81 ) }
    dend_19 { pt3dadd( -86.9164, -155.674, 84.6316, 0.81 ) }
    dend_19 { pt3dadd( -90.0454, -166.412, 91.0313, 0.81 ) }
    dend_19 { pt3dadd( -92.9997, -176.698, 98.29, 0.81 ) }
    dend_19 { pt3dadd( -98.1356, -184.888, 107.108, 0.81 ) }
    dend_19 { pt3dadd( -103.148, -191.644, 117.23, 0.81 ) }
    dend_19 { pt3dadd( -109.025, -199.6, 125.813, 0.81 ) }
    dend_19 { pt3dadd( -114.87, -204.971, 136.375, 0.81 ) }
    dend_19 { pt3dadd( -121.857, -209.96, 146.429, 0.81 ) }
    dend_19 { pt3dadd( -128.832, -214.182, 156.859, 0.81 ) }
    dend_19 { pt3dadd( -134.623, -216.303, 168.599, 0.81 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 87/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -25.6998, -52.8465, -0.551072, 0.81 ) }
    dend_16 { pt3dadd( -29.1766, -58.8554, -0.931398, 0.81 ) }
    dend_16 { pt3dadd( -32.2375, -64.1973, -1.12447, 1.08 ) }
    dend_16 { pt3dadd( -33.8767, -66.858, -1.09972, 1.08 ) }
    dend_16 { pt3dadd( -36.1627, -70.6083, -1.33018, 1.08 ) }
    dend_16 { pt3dadd( -37.346, -72.6499, -1.52593, 1.08 ) }
    dend_16 { pt3dadd( -40.9699, -78.875, -2.05802, 1.08 ) }
    dend_16 { pt3dadd( -41.141, -79.1669, -2.06824, 1.08 ) }
    dend_16 { pt3dadd( -43.5932, -82.9721, -2.29202, 0.81 ) }
    dend_16 { pt3dadd( -47.5406, -89.2723, -2.87581, 0.54 ) }
    dend_16 { pt3dadd( -50.0288, -93.701, -3.48361, 1.08 ) }
    dend_16 { pt3dadd( -53.8242, -101.536, -4.80031, 1.08 ) }
    dend_16 { pt3dadd( -55.4471, -105.699, -5.68374, 1.08 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_16 { pt3dadd( -56.4069, -109.125, -6.60155, 0.81 ) }
    dend_16 { pt3dadd( -56.8911, -112.556, -7.59664, 0.81 ) }
    dend_16 { pt3dadd( -56.9517, -116.218, -8.59536, 1.08 ) }
    dend_16 { pt3dadd( -56.3801, -122.532, -10.6462, 1.08 ) }
    dend_16 { pt3dadd( -55.594, -126.881, -12.1962, 0.81 ) }
    dend_16 { pt3dadd( -54.4052, -134.178, -14.5551, 0.54 ) }
    dend_16 { pt3dadd( -53.8956, -138.305, -15.639, 0.54 ) }
    dend_16 { pt3dadd( -53.6199, -142.103, -16.5126, 0.54 ) }
    dend_16 { pt3dadd( -53.5584, -146.472, -17.3441, 0.54 ) }
    dend_16 { pt3dadd( -53.7147, -149.787, -17.8269, 1.08 ) }
    dend_16 { pt3dadd( -54.583, -156.323, -18.429, 1.08 ) }
    dend_16 { pt3dadd( -57.3968, -169.228, -19.0869, 1.08 ) }
    dend_16 { pt3dadd( -57.4863, -169.551, -19.1028, 1.08 ) }
    dend_16 { pt3dadd( -59.2749, -175.261, -19.2802, 1.08 ) }
    dend_16 { pt3dadd( -61.3379, -181.151, -19.2214, 1.08 ) }
    dend_16 { pt3dadd( -63.3348, -186.52, -19.1275, 1.08 ) }
    dend_16 { pt3dadd( -64.1899, -188.383, -19.0251, 0.81 ) }
    dend_16 { pt3dadd( -64.3667, -188.67, -18.9889, 0.81 ) }
    dend_16 { pt3dadd( -65.3356, -190.452, -18.8903, 0.81 ) }
    dend_16 { pt3dadd( -67.2211, -194.299, -19.0075, 0.81 ) }
    dend_16 { pt3dadd( -69.5683, -199.532, -19.4577, 0.81 ) }
    dend_16 { pt3dadd( -72.5831, -206.394, -20.1738, 0.81 ) }
    dend_16 { pt3dadd( -74.1965, -210.124, -20.6436, 0.81 ) }
    dend_16 { pt3dadd( -77.639, -218.215, -21.7312, 0.81 ) }
    dend_16 { pt3dadd( -79.191, -222.001, -22.3156, 1.08 ) }
    dend_16 { pt3dadd( -81.131, -227.071, -23.2063, 1.08 ) }
    dend_16 { pt3dadd( -82.4607, -230.828, -23.8211, 1.08 ) }
    dend_16 { pt3dadd( -83.5354, -234.497, -24.3311, 0.27 ) }
    dend_16 { pt3dadd( -85.1636, -239.93, -24.7089, 0.27 ) }
    dend_16 { pt3dadd( -85.8592, -242.237, -24.631, 0.27 ) }
    dend_16 { pt3dadd( -86.8517, -245.841, -24.351, 0.54 ) }
    dend_16 { pt3dadd( -87.6352, -249.491, -24.1406, 0.54 ) }
    dend_16 { pt3dadd( -88.6376, -255.091, -23.9587, 0.54 ) }
    dend_16 { pt3dadd( -88.7693, -255.747, -23.9315, 0.54 ) }
    dend_16 { pt3dadd( -89.409, -259.823, -23.9012, 0.54 ) }
    dend_16 { pt3dadd( -90.2795, -265.891, -24.3096, 0.54 ) }
    dend_16 { pt3dadd( -91.1586, -272.519, -25.1775, 0.54 ) }
    dend_16 { pt3dadd( -92.4752, -280.715, -26.6784, 0.54 ) }
    dend_16 { pt3dadd( -93.1585, -284.614, -27.5268, 0.54 ) }
    dend_16 { pt3dadd( -94.1888, -290.054, -28.818, 0.54 ) }
    dend_16 { pt3dadd( -95.5361, -296.69, -30.5048, 0.54 ) }
    dend_16 { pt3dadd( -97.0037, -303.2, -32.2149, 0.54 ) }
    dend_16 { pt3dadd( -99.423, -311.926, -34.4773, 0.54 ) }
    dend_16 { pt3dadd( -99.8339, -313.36, -34.8596, 0.54 ) }
    dend_16 { pt3dadd( -101.857, -319.929, -36.4832, 0.54 ) }
    dend_16 { pt3dadd( -103.179, -323.945, -37.374, 0.54 ) }
    dend_16 { pt3dadd( -104.581, -328.478, -38.2721, 0.54 ) }
    dend_16 { pt3dadd( -106.259, -334.444, -39.5713, 0.54 ) }
    dend_16 { pt3dadd( -107.553, -339.477, -40.6912, 0.54 ) }
    dend_16 { pt3dadd( -109.077, -345.361, -41.9941, 0.54 ) }
    dend_16 { pt3dadd( -110.619, -350.699, -43.2822, 0.54 ) }
    dend_16 { pt3dadd( -110.634, -350.757, -43.2981, 0.54 ) }
    dend_16 { pt3dadd( -111.356, -354.253, -44.4019, 0.54 ) }
    // Section: dend_12, id: dend_12, parent: dend_10 (entry count 53/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -131.664, 158.511, -13.2003, 0.81 ) }
    dend_12 { pt3dadd( -134.445, 161.562, -12.7686, 0.81 ) }
    dend_12 { pt3dadd( -136.895, 163.819, -12.312, 0.81 ) }
    dend_12 { pt3dadd( -139.637, 166.192, -11.6758, 0.81 ) }
    dend_12 { pt3dadd( -142.987, 168.634, -10.7149, 0.81 ) }
    dend_12 { pt3dadd( -146.148, 171.062, -9.54948, 0.81 ) }
    dend_12 { pt3dadd( -146.197, 171.103, -9.52825, 0.81 ) }
    dend_12 { pt3dadd( -149.616, 174.129, -7.84432, 0.81 ) }
    dend_12 { pt3dadd( -152.66, 176.706, -6.15239, 0.81 ) }
    dend_12 { pt3dadd( -155.924, 179.262, -4.13553, 0.81 ) }
    dend_12 { pt3dadd( -160.393, 182.737, -1.07267, 0.81 ) }
    dend_12 { pt3dadd( -163.912, 185.397, 1.38964, 0.81 ) }
    dend_12 { pt3dadd( -170.801, 192.593, 6.27351, 0.81 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 66/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( -131.664, 158.511, -13.2003, 0.27 ) }
    dend_11 { pt3dadd( -133.473, 161.295, -11.8994, 0.27 ) }
    dend_11 { pt3dadd( -136.041, 165.245, -10.0531, 0.27 ) }
    dend_11 { pt3dadd( -137.377, 167.302, -9.09182, 0.27 ) }
    // Section: dend_9, id: dend_9, parent: dend_7 (entry count 70/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -26.3021, -19.2038, -33.7254, 0.54 ) }
    dend_9 { pt3dadd( -27.1364, -22.9214, -34.6256, 0.54 ) }
    dend_9 { pt3dadd( -28.1099, -26.3714, -35.4354, 0.54 ) }
    dend_9 { pt3dadd( -29.2343, -29.6117, -36.2514, 0.54 ) }
    dend_9 { pt3dadd( -31.81, -35.424, -37.8982, 0.54 ) }
    dend_9 { pt3dadd( -34.5719, -40.8384, -39.6974, 0.54 ) }
    dend_9 { pt3dadd( -38.3486, -47.5912, -42.3637, 0.54 ) }
    dend_9 { pt3dadd( -38.4925, -47.827, -42.4702, 0.54 ) }
    dend_9 { pt3dadd( -41.1166, -51.8491, -44.4148, 0.54 ) }
    dend_9 { pt3dadd( -45.539, -58.3219, -47.6537, 0.54 ) }
    dend_9 { pt3dadd( -48.7862, -62.4972, -49.8255, 0.54 ) }
    dend_9 { pt3dadd( -51.8349, -66.33, -52.2156, 0.54 ) }
    dend_9 { pt3dadd( -53.9703, -69.0575, -54.2012, 0.54 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 83/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -26.3021, -19.2038, -33.7254, 0.54 ) }
    dend_8 { pt3dadd( -32.0913, -20.6329, -39.8048, 0.54 ) }
    dend_8 { pt3dadd( -36.595, -21.7727, -43.8581, 0.81 ) }
    dend_8 { pt3dadd( -39.7344, -22.6821, -46.3884, 0.81 ) }
    dend_8 { pt3dadd( -51.0496, -26.4073, -55.0092, 0.81 ) }
    dend_8 { pt3dadd( -57.5575, -28.7004, -59.5334, 0.81 ) }
    dend_8 { pt3dadd( -63.3414, -30.9058, -63.4902, 0.81 ) }
    dend_8 { pt3dadd( -71.661, -34.1639, -68.6301, 0.81 ) }
    dend_8 { pt3dadd( -76.8251, -36.3791, -71.5397, 0.81 ) }
    dend_8 { pt3dadd( -82.814, -39.1935, -74.7868, 0.81 ) }
    dend_8 { pt3dadd( -90.1792, -42.9681, -78.5656, 0.81 ) }
    dend_8 { pt3dadd( -100.103, -48.3491, -83.8894, 0.81 ) }
    dend_8 { pt3dadd( -100.158, -48.3794, -83.9185, 0.81 ) }
    dend_8 { pt3dadd( -109.702, -53.7778, -89.2243, 0.81 ) }
    dend_8 { pt3dadd( -109.943, -53.9089, -89.3635, 0.81 ) }
    dend_8 { pt3dadd( -120.805, -59.7176, -95.5448, 0.81 ) }
    // Section: dend_28, id: dend_28, parent: dend_26 (entry count 99/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 307.769, 52.5302, 41.9161, 0.27 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_28 { pt3dadd( 314.128, 54.0323, 45.1493, 0.27 ) }
    dend_28 { pt3dadd( 320.443, 55.372, 48.546, 0.27 ) }
    // Section: dend_27, id: dend_27, parent: dend_26 (entry count 2/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( 307.769, 52.5302, 41.9161, 0.27 ) }
    dend_27 { pt3dadd( 315.66, 54.7, 45.9316, 0.27 ) }
    dend_27 { pt3dadd( 323.864, 55.3666, 49.8973, 0.27 ) }
    // Section: dend_18, id: dend_18, parent: dend_16 (entry count 5/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -111.356, -354.253, -44.4019, 0.54 ) }
    dend_18 { pt3dadd( -112.071, -359.094, -45.7547, 0.54 ) }
    dend_18 { pt3dadd( -112.901, -364.404, -47.2425, 0.54 ) }
    dend_18 { pt3dadd( -112.938, -364.695, -47.3241, 0.54 ) }
    dend_18 { pt3dadd( -113.619, -370.297, -48.5675, 0.54 ) }
    dend_18 { pt3dadd( -114.075, -373.911, -49.2003, 0.54 ) }
    dend_18 { pt3dadd( -114.102, -374.123, -49.2265, 0.54 ) }
    dend_18 { pt3dadd( -115.063, -381.125, -49.641, 0.54 ) }
    dend_18 { pt3dadd( -115.717, -386.28, -49.7404, 0.54 ) }
    dend_18 { pt3dadd( -116.403, -391.748, -49.7372, 0.54 ) }
    dend_18 { pt3dadd( -117.254, -398.842, -49.3327, 0.54 ) }
    dend_18 { pt3dadd( -117.917, -403.702, -48.7804, 0.54 ) }
    dend_18 { pt3dadd( -118.68, -408.605, -47.993, 0.54 ) }
    dend_18 { pt3dadd( -119.385, -412.373, -47.1133, 0.54 ) }
    dend_18 { pt3dadd( -120.482, -416.996, -45.6997, 0.54 ) }
    dend_18 { pt3dadd( -121.874, -421.625, -43.9814, 0.54 ) }
    dend_18 { pt3dadd( -122.886, -424.034, -42.7611, 0.54 ) }
    dend_18 { pt3dadd( -123.876, -425.715, -41.7157, 0.54 ) }
    dend_18 { pt3dadd( -124.704, -426.754, -40.918, 0.54 ) }
    dend_18 { pt3dadd( -126.504, -428.531, -39.3581, 0.54 ) }
    dend_18 { pt3dadd( -128.475, -430.164, -37.8019, 0.54 ) }
    dend_18 { pt3dadd( -130.354, -431.702, -36.4686, 0.54 ) }
    dend_18 { pt3dadd( -131.871, -433.14, -35.3561, 0.54 ) }
    dend_18 { pt3dadd( -133.809, -435.155, -33.8742, 0.54 ) }
    dend_18 { pt3dadd( -134.873, -436.374, -33.1295, 0.54 ) }
    dend_18 { pt3dadd( -135.908, -437.665, -32.4937, 0.54 ) }
    dend_18 { pt3dadd( -138.124, -440.856, -31.089, 0.54 ) }
    dend_18 { pt3dadd( -139.976, -443.982, -29.816, 0.54 ) }
    dend_18 { pt3dadd( -141.618, -447.411, -28.4983, 0.54 ) }
    dend_18 { pt3dadd( -142.901, -450.725, -27.3515, 0.54 ) }
    dend_18 { pt3dadd( -144.083, -454.738, -26.1676, 0.54 ) }
    dend_18 { pt3dadd( -144.814, -458.419, -25.245, 0.54 ) }
    dend_18 { pt3dadd( -145.193, -461.258, -24.629, 0.54 ) }
    dend_18 { pt3dadd( -145.278, -464.984, -23.8705, 0.54 ) }
    dend_18 { pt3dadd( -145.003, -466.789, -23.5642, 0.54 ) }
    dend_18 { pt3dadd( -143.594, -470.358, -22.7983, 0.54 ) }
    dend_18 { pt3dadd( -143.396, -470.589, -22.7759, 0.54 ) }
    // Section: dend_17, id: dend_17, parent: dend_16 (entry count 42/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -111.356, -354.253, -44.4019, 0.54 ) }
    dend_17 { pt3dadd( -111.28, -358.551, -41.4473, 0.54 ) }
    dend_17 { pt3dadd( -111.235, -361.107, -39.6894, 0.54 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
    ModelViewParmSubset_2 = new SectionList()
    dend_23 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_20 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_0 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_25 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_21 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_14 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_10 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_7 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_5 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_4 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_2 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_29 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_26 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_19 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_16 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_12 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_9 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_8 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_18 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_6 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_3 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_23 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_13 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_24 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_15 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_1 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_11 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_22 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_28 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_27 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_17 OneSecGrp_SectionRef_33.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_23, dend_23, dend_23, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_13, dend_13, dend_13, dend_13, dend_13, dend_6, dend_6, dend_3, dend_3, dend_3, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, axon_1, axon_1, dend_29, dend_29, dend_29, dend_29, dend_29, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_28, dend_28, dend_27, dend_27, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_28 all.append()
    dend_28 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_17 all.append()
    dend_17 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 5.67935E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 5.67935E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 3.6794998E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cSTUT_7_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cSTUT_7_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cSTUT_7_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cSTUT_7_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_20 nseg = 9
    dend_0 nseg = 5
    dend_25 nseg = 13
    dend_21 nseg = 3
    dend_14 nseg = 11
    dend_10 nseg = 9
    dend_7 nseg = 3
    dend_5 nseg = 15
    dend_4 nseg = 11
    dend_2 nseg = 3
    dend_29 nseg = 3
    dend_26 nseg = 3
    dend_19 nseg = 13
    dend_16 nseg = 17
    dend_12 nseg = 3
    dend_9 nseg = 3
    dend_8 nseg = 7
    dend_18 nseg = 7
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cSTUT189_L5_LBC_29803173bd_0_0


