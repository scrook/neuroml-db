// Cell: bIR215_L23_BP_ab6ff08482_0_0
/*
{
  "id" : "bIR215_L23_BP_ab6ff08482_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-0.559629, -8.92861, -0.706689, 1.8952", "-0.520561, -8.09769, -0.641537, 3.08207", "-0.481493, -7.26678, -0.576385, 4.07229", "-0.442425, -6.43586, -0.511233, 5.06251", "-0.403357, -5.60495, -0.446081, 6.03705", "-0.364289, -4.77403, -0.380929, 6.87153", "-0.325221, -3.94312, -0.315777, 7.33623", "-0.286154, -3.1122, -0.250625, 7.77277", "-0.247086, -2.28129, -0.185472, 8.20481", "-0.208018, -1.45038, -0.12032, 8.51332", "-0.16895, -0.619461, -0.0551684, 8.81943", "-0.129882, 0.211453, 0.00998366, 9.1018", "-0.0908139, 1.04237, 0.0751357, 8.76619", "-0.051746, 1.87328, 0.140288, 8.18075", "-0.0126781, 2.7042, 0.20544, 7.29107", "0.0263898, 3.53511, 0.270592, 6.47013", "0.0654577, 4.36603, 0.335744, 5.69271", "0.104526, 5.19694, 0.400896, 4.78435", "0.143594, 6.02786, 0.466048, 3.7615", "0.182661, 6.85877, 0.5312, 2.16282", "0.221729, 7.68968, 0.596352, 1.49642" ]
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-0.0529134, -9.3824, 10.7418, 1.66", "-0.535549, -11.3641, 12.3056, 1.66", "-1.05647, -13.503, 13.9935, 1.66", "-1.95109, -17.1763, 16.8922, 1.39", "-5.50901, -31.785, 28.4205, 1.11", "-6.13315, -34.3478, 30.4428, 1.11", "-6.92365, -37.5935, 33.0042, 1.11" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999997245508955
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "0.617087, 8.2471, -0.778182, 1.39", "0.631812, 16.6618, 2.71857, 0.83", "0.636661, 19.4325, 3.86995, 0.83" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999997245508955
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "0.221729, 7.68968, 0.596352, 0.55", "0.92622, 22.6731, 0.596352, 0.55", "1.63071, 37.6566, 0.596352, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-6.92365, -37.5935, 33.0042, 0.83", "-8.17933, -42.5008, 31.3423, 0.83", "-8.47832, -43.6692, 30.9466, 0.83", "-9.24153, -46.6519, 29.9366, 0.83", "-9.58366, -47.989, 29.4838, 0.83", "-10.3194, -50.8644, 28.51, 0.83" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-6.92365, -37.5935, 33.0042, 0.83", "-6.59849, -39.1625, 33.3995, 0.83", "-6.29744, -40.584, 33.737, 0.83", "-5.95056, -42.4637, 34.1376, 0.83", "-5.05359, -46.7412, 34.9691, 0.83", "-4.25405, -50.2592, 35.6193, 0.55", "-2.85786, -56.2293, 36.5984, 0.55", "-2.09604, -59.1742, 37.1351, 0.83", "-1.15569, -62.5197, 37.776, 0.55", "0.476953, -67.9346, 39.0283, 0.55", "0.966437, -69.4714, 39.414, 0.55", "2.29832, -73.6342, 40.4868, 0.55", "3.95072, -78.8749, 41.9739, 0.55", "4.92488, -82.0131, 42.898, 0.55", "6.17169, -86.203, 44.1539, 0.55", "8.14273, -93.8232, 46.4137, 0.55", "9.0808, -97.8803, 47.5565, 0.55", "9.73406, -100.929, 48.3487, 0.55", "10.0988, -103.082, 48.7749, 0.55", "10.3417, -104.997, 49.0825, 0.55", "10.6558, -108.879, 49.7283, 0.55", "10.7688, -110.834, 50.0537, 0.55", "10.8893, -113.82, 50.6608, 0.55", "11.0181, -117.821, 51.5305, 0.55", "11.1159, -123.61, 52.8458, 0.55", "11.2088, -128.811, 54.1092, 0.55", "11.2237, -133.356, 55.2862, 0.83", "11.1801, -137.694, 56.5449, 0.83" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "0.636661, 19.4325, 3.86995, 0.83", "0.211255, 28.6656, -0.287212, 0.83", "0.175598, 31.0987, -1.29911, 0.83", "0.1285, 34.0809, -2.56795, 0.83", "0.128276, 36.5441, -3.54899, 0.83", "0.150831, 40.4831, -5.0397, 0.83", "0.249578, 45.6344, -6.88373, 0.83", "0.301404, 49.296, -7.90376, 0.83", "0.388002, 53.2579, -9.07585, 0.83", "0.521505, 57.3257, -10.4369, 0.55", "0.563363, 58.6139, -10.8753, 0.55", "0.601155, 60.8179, -11.6368, 0.55", "0.745107, 65.4196, -13.1502, 0.55", "0.819991, 68.7581, -14.207, 0.55", "1.07284, 77.1241, -16.8483, 0.55", "1.14259, 80.9009, -18.1924, 0.55" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "0.636661, 19.4325, 3.86995, 0.83", "1.35709, 21.5202, 4.57753, 0.83", "1.88704, 23.1667, 5.19506, 0.83", "2.66009, 25.7628, 6.25801, 0.83", "3.37987, 28.2647, 7.3071, 0.83", "4.19166, 31.4316, 8.51028, 0.83", "4.79638, 33.8191, 9.3549, 0.83", "5.19063, 35.6246, 10.0004, 0.83", "5.59763, 37.6055, 10.6422, 0.83", "5.68448, 38.1446, 10.788, 0.83", "6.65954, 44.3449, 12.1408, 0.83", "6.83406, 45.663, 12.3445, 0.83", "7.05003, 47.4558, 12.5309, 0.83", "7.21913, 49.0078, 12.6584, 0.83", "7.38549, 50.8076, 12.7781, 0.83", "7.6123, 53.081, 12.9301, 0.83", "7.7877, 55.4233, 13.0798, 0.83", "7.91102, 56.7615, 13.1663, 0.83", "8.15635, 58.8317, 13.2964, 0.83", "8.36498, 60.8671, 13.4293, 0.83", "8.61888, 63.0066, 13.5444, 0.83", "8.9514, 65.8027, 13.724, 0.83", "9.17305, 67.6289, 13.9225, 0.83", "9.27848, 68.6392, 14.06, 0.83", "9.37863, 69.7816, 14.2726, 0.83", "9.52904, 71.4713, 14.6849, 0.83", "9.65032, 73.9506, 15.4472, 0.55", "9.82945, 77.202, 16.576, 0.55", "9.83561, 78.1581, 16.9253, 0.55", "9.83999, 80.169, 17.6487, 0.55", "9.82016, 81.012, 17.9401, 0.55", "9.75788, 82.5927, 18.4834, 0.55", "9.71899, 84.2424, 18.9742, 0.55", "9.75797, 86.6409, 19.5505, 0.55", "9.78766, 88.2216, 19.9066, 0.55", "9.78855, 89.6602, 20.186, 0.55", "9.83605, 91.4585, 20.5273, 0.55", "9.98969, 93.3324, 20.8457, 0.55", "10.2743, 95.8882, 21.3152, 0.28" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "1.63071, 37.6566, 0.596352, 0.55", "2.3352, 52.64, 0.596352, 0.55", "3.03969, 67.6235, 0.596352, 0.55" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-10.3194, -50.8644, 28.51, 0.83", "-11.6429, -55.0624, 30.1156, 0.83", "-12.6642, -58.3887, 31.2374, 0.83", "-13.8661, -62.4004, 32.4252, 0.83", "-14.8546, -65.7164, 33.3006, 0.83", "-15.4553, -67.7316, 33.8325, 0.83", "-16.1715, -70.1343, 34.4667, 0.83", "-16.6152, -71.872, 34.8138, 0.83", "-17.1081, -73.8555, 35.1272, 0.83", "-17.6502, -76.3905, 35.1735, 0.83" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-10.3194, -50.8644, 28.51, 0.55", "-8.00069, -51.2553, 38.3281, 0.55", "-5.21064, -51.6069, 48.7646, 0.55", "-3.79336, -51.7854, 54.0661, 0.55", "-2.00826, -52.0103, 60.7435, 0.28", "-1.71337, -52.0475, 61.8466, 0.83", "-0.166353, -52.2424, 67.6335, 0.28", "0.132741, -52.2078, 68.6159, 0.55" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "1.14259, 80.9009, -18.1924, 0.55", "1.84885, 84.8858, -18.5116, 0.55", "2.60457, 89.0952, -18.961, 0.55", "3.13645, 92.0544, -19.2487, 0.55", "3.97844, 96.4938, -19.6551, 0.83", "4.57861, 99.6495, -19.926, 0.55", "5.16691, 102.591, -20.1648, 0.55", "5.71747, 105.342, -20.3114, 1.11", "6.70862, 110.118, -20.705, 0.55", "6.99816, 111.718, -20.8687, 0.55", "7.35564, 113.736, -21.0981, 1.11", "7.78707, 116.242, -21.4013, 0.55", "8.03855, 117.88, -21.6017, 1.11", "8.7572, 122.886, -22.1645, 0.55", "9.0488, 125.527, -22.644, 1.11" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "1.14259, 80.9009, -18.1924, 0.28", "0.811895, 83.0371, -20.2518, 0.28", "0.776375, 83.3557, -20.5533, 0.55", "0.530312, 86.1691, -23.1124, 0.28", "0.343597, 88.7855, -25.645, 1.11", "0.271883, 90.1421, -27.0408, 0.28", "0.271883, 90.1421, -27.0408, 0.55", "0.444883, 91.7728, -28.4376, 0.28", "0.579197, 92.392, -28.9146, 1.11", "1.83421, 95.0853, -30.3143, 0.55", "3.2577, 97.1481, -30.7739, 0.28", "5.78707, 100.35, -31.108, 1.11", "8.12049, 103.05, -31.0987, 0.28", "8.18343, 103.112, -31.0846, 0.55", "10.1736, 104.856, -30.3436, 0.28", "10.3667, 105.008, -30.2344, 0.55" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "-17.6502, -76.3905, 35.1735, 0.83", "-17.4866, -82.0207, 36.9877, 0.83", "-17.3743, -86.5382, 38.7348, 0.83", "-17.2662, -88.6529, 39.5632, 0.83", "-17.2194, -89.8686, 40.139, 0.83", "-17.1721, -93.1916, 41.7914, 0.83", "-17.1571, -95.157, 42.6343, 0.83", "-17.0959, -98.8927, 43.8887, 0.83", "-16.9518, -101.484, 44.7649, 0.83", "-16.4992, -105.911, 46.1143, 0.83", "-16.1534, -108.189, 46.6626, 0.83", "-15.1746, -113.797, 47.4986, 0.83", "-14.3377, -118.803, 47.9344, 0.83", "-13.7484, -122.944, 47.9555, 0.83", "-13.4592, -125.942, 47.8897, 0.83", "-13.4096, -126.547, 47.8578, 0.83", "-13.2592, -130.016, 47.8466, 0.28", "-13.2792, -130.933, 47.9063, 0.83", "-13.4825, -133.301, 48.0016, 0.28", "-13.897, -137.506, 48.1087, 0.28", "-13.9955, -138.408, 48.1639, 0.28", "-14.29, -141.285, 48.3606, 0.83", "-14.4905, -143.83, 48.5668, 0.28", "-14.6391, -145.871, 48.7587, 0.83", "-14.695, -147.505, 48.9538, 0.28" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-17.6502, -76.3905, 35.1735, 0.55", "-21.8454, -83.5835, 33.0141, 0.55", "-23.7374, -86.657, 32.2, 0.55", "-27.867, -93.1677, 30.6706, 0.55", "-29.6954, -95.9473, 30.0928, 0.55", "-31.5656, -98.6417, 29.6154, 0.28", "-32.4013, -99.8459, 29.4021, 0.55", "-34.5611, -102.605, 29.1537, 0.28", "-35.9877, -104.395, 29.0467, 0.55", "-37.753, -106.467, 29.1459, 0.28", "-40.5485, -109.563, 29.2995, 0.28" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_5", "dend_0", "dend_7", "dend_6", "dend_2", "dend_1", "dend_9", "dend_8", "dend_4", "dend_3", "dend_11", "dend_10" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_5", "dend_0", "dend_7", "dend_6", "dend_2", "dend_1", "dend_9", "dend_8", "dend_4", "dend_3", "dend_11", "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_0", "dend_0", "axon_0", "axon_0", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "2.90744E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "2.90744E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.418459",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.026008999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.025854",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.19695699",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "2.0E-6",
    "erev" : "-60.2509"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.9899996E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.008343",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "6.58298E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.026899999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.502333",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.653374",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "5.6999997E-5",
    "erev" : "-76.49812"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "7.84E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.30005398",
    "erev" : "50.0"
  }, {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.002256",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.38E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.005574",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "7.92E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bIR_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bIR_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bIR215_L23_BP_ab6ff08482_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_5, id: dend_5, parent: soma_0
create dend_5
public dend_5
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_9, id: dend_9, parent: dend_7
create dend_9
public dend_9
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_4, id: dend_4, parent: dend_2
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_11, id: dend_11, parent: dend_9
create dend_11
public dend_11
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_5, dend_0, dend_7, dend_6, dend_2, dend_1, dend_9, dend_8, dend_4, dend_3, dend_11, dend_10]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_5, dend_0, dend_7, dend_6, dend_2, dend_1, dend_9, dend_8, dend_4, dend_3, dend_11, dend_10]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_13
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_0, dend_0, axon_0, axon_0, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bIR_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bIR_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_5(0), soma_0(0.44999997245508955)
    connect dend_0(0), soma_0(0.44999997245508955)
    connect axon_0(0), soma_0(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_9(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_4(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_11(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -0.559629, -8.92861, -0.706689, 1.8952 ) }
    soma_0 { pt3dadd( -0.520561, -8.09769, -0.641537, 3.08207 ) }
    soma_0 { pt3dadd( -0.481493, -7.26678, -0.576385, 4.07229 ) }
    soma_0 { pt3dadd( -0.442425, -6.43586, -0.511233, 5.06251 ) }
    soma_0 { pt3dadd( -0.403357, -5.60495, -0.446081, 6.03705 ) }
    soma_0 { pt3dadd( -0.364289, -4.77403, -0.380929, 6.87153 ) }
    soma_0 { pt3dadd( -0.325221, -3.94312, -0.315777, 7.33623 ) }
    soma_0 { pt3dadd( -0.286154, -3.1122, -0.250625, 7.77277 ) }
    soma_0 { pt3dadd( -0.247086, -2.28129, -0.185472, 8.20481 ) }
    soma_0 { pt3dadd( -0.208018, -1.45038, -0.12032, 8.51332 ) }
    soma_0 { pt3dadd( -0.16895, -0.619461, -0.0551684, 8.81943 ) }
    soma_0 { pt3dadd( -0.129882, 0.211453, 0.00998366, 9.1018 ) }
    soma_0 { pt3dadd( -0.0908139, 1.04237, 0.0751357, 8.76619 ) }
    soma_0 { pt3dadd( -0.051746, 1.87328, 0.140288, 8.18075 ) }
    soma_0 { pt3dadd( -0.0126781, 2.7042, 0.20544, 7.29107 ) }
    soma_0 { pt3dadd( 0.0263898, 3.53511, 0.270592, 6.47013 ) }
    soma_0 { pt3dadd( 0.0654577, 4.36603, 0.335744, 5.69271 ) }
    soma_0 { pt3dadd( 0.104526, 5.19694, 0.400896, 4.78435 ) }
    soma_0 { pt3dadd( 0.143594, 6.02786, 0.466048, 3.7615 ) }
    soma_0 { pt3dadd( 0.182661, 6.85877, 0.5312, 2.16282 ) }
    soma_0 { pt3dadd( 0.221729, 7.68968, 0.596352, 1.49642 ) }
    // Section: dend_5, id: dend_5, parent: soma_0 (entry count 21/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -0.0529134, -9.3824, 10.7418, 1.66 ) }
    dend_5 { pt3dadd( -0.535549, -11.3641, 12.3056, 1.66 ) }
    dend_5 { pt3dadd( -1.05647, -13.503, 13.9935, 1.66 ) }
    dend_5 { pt3dadd( -1.95109, -17.1763, 16.8922, 1.39 ) }
    dend_5 { pt3dadd( -5.50901, -31.785, 28.4205, 1.11 ) }
    dend_5 { pt3dadd( -6.13315, -34.3478, 30.4428, 1.11 ) }
    dend_5 { pt3dadd( -6.92365, -37.5935, 33.0042, 1.11 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 28/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 0.617087, 8.2471, -0.778182, 1.39 ) }
    dend_0 { pt3dadd( 0.631812, 16.6618, 2.71857, 0.83 ) }
    dend_0 { pt3dadd( 0.636661, 19.4325, 3.86995, 0.83 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 31/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 0.221729, 7.68968, 0.596352, 0.55 ) }
    axon_0 { pt3dadd( 0.92622, 22.6731, 0.596352, 0.55 ) }
    axon_0 { pt3dadd( 1.63071, 37.6566, 0.596352, 0.55 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 34/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -6.92365, -37.5935, 33.0042, 0.83 ) }
    dend_7 { pt3dadd( -8.17933, -42.5008, 31.3423, 0.83 ) }
    dend_7 { pt3dadd( -8.47832, -43.6692, 30.9466, 0.83 ) }
    dend_7 { pt3dadd( -9.24153, -46.6519, 29.9366, 0.83 ) }
    dend_7 { pt3dadd( -9.58366, -47.989, 29.4838, 0.83 ) }
    dend_7 { pt3dadd( -10.3194, -50.8644, 28.51, 0.83 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 40/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -6.92365, -37.5935, 33.0042, 0.83 ) }
    dend_6 { pt3dadd( -6.59849, -39.1625, 33.3995, 0.83 ) }
    dend_6 { pt3dadd( -6.29744, -40.584, 33.737, 0.83 ) }
    dend_6 { pt3dadd( -5.95056, -42.4637, 34.1376, 0.83 ) }
    dend_6 { pt3dadd( -5.05359, -46.7412, 34.9691, 0.83 ) }
    dend_6 { pt3dadd( -4.25405, -50.2592, 35.6193, 0.55 ) }
    dend_6 { pt3dadd( -2.85786, -56.2293, 36.5984, 0.55 ) }
    dend_6 { pt3dadd( -2.09604, -59.1742, 37.1351, 0.83 ) }
    dend_6 { pt3dadd( -1.15569, -62.5197, 37.776, 0.55 ) }
    dend_6 { pt3dadd( 0.476953, -67.9346, 39.0283, 0.55 ) }
    dend_6 { pt3dadd( 0.966437, -69.4714, 39.414, 0.55 ) }
    dend_6 { pt3dadd( 2.29832, -73.6342, 40.4868, 0.55 ) }
    dend_6 { pt3dadd( 3.95072, -78.8749, 41.9739, 0.55 ) }
    dend_6 { pt3dadd( 4.92488, -82.0131, 42.898, 0.55 ) }
    dend_6 { pt3dadd( 6.17169, -86.203, 44.1539, 0.55 ) }
    dend_6 { pt3dadd( 8.14273, -93.8232, 46.4137, 0.55 ) }
    dend_6 { pt3dadd( 9.0808, -97.8803, 47.5565, 0.55 ) }
    dend_6 { pt3dadd( 9.73406, -100.929, 48.3487, 0.55 ) }
    dend_6 { pt3dadd( 10.0988, -103.082, 48.7749, 0.55 ) }
    dend_6 { pt3dadd( 10.3417, -104.997, 49.0825, 0.55 ) }
    dend_6 { pt3dadd( 10.6558, -108.879, 49.7283, 0.55 ) }
    dend_6 { pt3dadd( 10.7688, -110.834, 50.0537, 0.55 ) }
    dend_6 { pt3dadd( 10.8893, -113.82, 50.6608, 0.55 ) }
    dend_6 { pt3dadd( 11.0181, -117.821, 51.5305, 0.55 ) }
    dend_6 { pt3dadd( 11.1159, -123.61, 52.8458, 0.55 ) }
    dend_6 { pt3dadd( 11.2088, -128.811, 54.1092, 0.55 ) }
    dend_6 { pt3dadd( 11.2237, -133.356, 55.2862, 0.83 ) }
    dend_6 { pt3dadd( 11.1801, -137.694, 56.5449, 0.83 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 68/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 0.636661, 19.4325, 3.86995, 0.83 ) }
    dend_2 { pt3dadd( 0.211255, 28.6656, -0.287212, 0.83 ) }
    dend_2 { pt3dadd( 0.175598, 31.0987, -1.29911, 0.83 ) }
    dend_2 { pt3dadd( 0.1285, 34.0809, -2.56795, 0.83 ) }
    dend_2 { pt3dadd( 0.128276, 36.5441, -3.54899, 0.83 ) }
    dend_2 { pt3dadd( 0.150831, 40.4831, -5.0397, 0.83 ) }
    dend_2 { pt3dadd( 0.249578, 45.6344, -6.88373, 0.83 ) }
    dend_2 { pt3dadd( 0.301404, 49.296, -7.90376, 0.83 ) }
    dend_2 { pt3dadd( 0.388002, 53.2579, -9.07585, 0.83 ) }
    dend_2 { pt3dadd( 0.521505, 57.3257, -10.4369, 0.55 ) }
    dend_2 { pt3dadd( 0.563363, 58.6139, -10.8753, 0.55 ) }
    dend_2 { pt3dadd( 0.601155, 60.8179, -11.6368, 0.55 ) }
    dend_2 { pt3dadd( 0.745107, 65.4196, -13.1502, 0.55 ) }
    dend_2 { pt3dadd( 0.819991, 68.7581, -14.207, 0.55 ) }
    dend_2 { pt3dadd( 1.07284, 77.1241, -16.8483, 0.55 ) }
    dend_2 { pt3dadd( 1.14259, 80.9009, -18.1924, 0.55 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 84/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 0.636661, 19.4325, 3.86995, 0.83 ) }
    dend_1 { pt3dadd( 1.35709, 21.5202, 4.57753, 0.83 ) }
    dend_1 { pt3dadd( 1.88704, 23.1667, 5.19506, 0.83 ) }
    dend_1 { pt3dadd( 2.66009, 25.7628, 6.25801, 0.83 ) }
    dend_1 { pt3dadd( 3.37987, 28.2647, 7.3071, 0.83 ) }
    dend_1 { pt3dadd( 4.19166, 31.4316, 8.51028, 0.83 ) }
    dend_1 { pt3dadd( 4.79638, 33.8191, 9.3549, 0.83 ) }
    dend_1 { pt3dadd( 5.19063, 35.6246, 10.0004, 0.83 ) }
    dend_1 { pt3dadd( 5.59763, 37.6055, 10.6422, 0.83 ) }
    dend_1 { pt3dadd( 5.68448, 38.1446, 10.788, 0.83 ) }
    dend_1 { pt3dadd( 6.65954, 44.3449, 12.1408, 0.83 ) }
    dend_1 { pt3dadd( 6.83406, 45.663, 12.3445, 0.83 ) }
    dend_1 { pt3dadd( 7.05003, 47.4558, 12.5309, 0.83 ) }
    dend_1 { pt3dadd( 7.21913, 49.0078, 12.6584, 0.83 ) }
    dend_1 { pt3dadd( 7.38549, 50.8076, 12.7781, 0.83 ) }
    dend_1 { pt3dadd( 7.6123, 53.081, 12.9301, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_1 { pt3dadd( 7.7877, 55.4233, 13.0798, 0.83 ) }
    dend_1 { pt3dadd( 7.91102, 56.7615, 13.1663, 0.83 ) }
    dend_1 { pt3dadd( 8.15635, 58.8317, 13.2964, 0.83 ) }
    dend_1 { pt3dadd( 8.36498, 60.8671, 13.4293, 0.83 ) }
    dend_1 { pt3dadd( 8.61888, 63.0066, 13.5444, 0.83 ) }
    dend_1 { pt3dadd( 8.9514, 65.8027, 13.724, 0.83 ) }
    dend_1 { pt3dadd( 9.17305, 67.6289, 13.9225, 0.83 ) }
    dend_1 { pt3dadd( 9.27848, 68.6392, 14.06, 0.83 ) }
    dend_1 { pt3dadd( 9.37863, 69.7816, 14.2726, 0.83 ) }
    dend_1 { pt3dadd( 9.52904, 71.4713, 14.6849, 0.83 ) }
    dend_1 { pt3dadd( 9.65032, 73.9506, 15.4472, 0.55 ) }
    dend_1 { pt3dadd( 9.82945, 77.202, 16.576, 0.55 ) }
    dend_1 { pt3dadd( 9.83561, 78.1581, 16.9253, 0.55 ) }
    dend_1 { pt3dadd( 9.83999, 80.169, 17.6487, 0.55 ) }
    dend_1 { pt3dadd( 9.82016, 81.012, 17.9401, 0.55 ) }
    dend_1 { pt3dadd( 9.75788, 82.5927, 18.4834, 0.55 ) }
    dend_1 { pt3dadd( 9.71899, 84.2424, 18.9742, 0.55 ) }
    dend_1 { pt3dadd( 9.75797, 86.6409, 19.5505, 0.55 ) }
    dend_1 { pt3dadd( 9.78766, 88.2216, 19.9066, 0.55 ) }
    dend_1 { pt3dadd( 9.78855, 89.6602, 20.186, 0.55 ) }
    dend_1 { pt3dadd( 9.83605, 91.4585, 20.5273, 0.55 ) }
    dend_1 { pt3dadd( 9.98969, 93.3324, 20.8457, 0.55 ) }
    dend_1 { pt3dadd( 10.2743, 95.8882, 21.3152, 0.28 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 23/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 1.63071, 37.6566, 0.596352, 0.55 ) }
    axon_1 { pt3dadd( 2.3352, 52.64, 0.596352, 0.55 ) }
    axon_1 { pt3dadd( 3.03969, 67.6235, 0.596352, 0.55 ) }
    // Section: dend_9, id: dend_9, parent: dend_7 (entry count 26/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -10.3194, -50.8644, 28.51, 0.83 ) }
    dend_9 { pt3dadd( -11.6429, -55.0624, 30.1156, 0.83 ) }
    dend_9 { pt3dadd( -12.6642, -58.3887, 31.2374, 0.83 ) }
    dend_9 { pt3dadd( -13.8661, -62.4004, 32.4252, 0.83 ) }
    dend_9 { pt3dadd( -14.8546, -65.7164, 33.3006, 0.83 ) }
    dend_9 { pt3dadd( -15.4553, -67.7316, 33.8325, 0.83 ) }
    dend_9 { pt3dadd( -16.1715, -70.1343, 34.4667, 0.83 ) }
    dend_9 { pt3dadd( -16.6152, -71.872, 34.8138, 0.83 ) }
    dend_9 { pt3dadd( -17.1081, -73.8555, 35.1272, 0.83 ) }
    dend_9 { pt3dadd( -17.6502, -76.3905, 35.1735, 0.83 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 36/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -10.3194, -50.8644, 28.51, 0.55 ) }
    dend_8 { pt3dadd( -8.00069, -51.2553, 38.3281, 0.55 ) }
    dend_8 { pt3dadd( -5.21064, -51.6069, 48.7646, 0.55 ) }
    dend_8 { pt3dadd( -3.79336, -51.7854, 54.0661, 0.55 ) }
    dend_8 { pt3dadd( -2.00826, -52.0103, 60.7435, 0.28 ) }
    dend_8 { pt3dadd( -1.71337, -52.0475, 61.8466, 0.83 ) }
    dend_8 { pt3dadd( -0.166353, -52.2424, 67.6335, 0.28 ) }
    dend_8 { pt3dadd( 0.132741, -52.2078, 68.6159, 0.55 ) }
    // Section: dend_4, id: dend_4, parent: dend_2 (entry count 44/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 1.14259, 80.9009, -18.1924, 0.55 ) }
    dend_4 { pt3dadd( 1.84885, 84.8858, -18.5116, 0.55 ) }
    dend_4 { pt3dadd( 2.60457, 89.0952, -18.961, 0.55 ) }
    dend_4 { pt3dadd( 3.13645, 92.0544, -19.2487, 0.55 ) }
    dend_4 { pt3dadd( 3.97844, 96.4938, -19.6551, 0.83 ) }
    dend_4 { pt3dadd( 4.57861, 99.6495, -19.926, 0.55 ) }
    dend_4 { pt3dadd( 5.16691, 102.591, -20.1648, 0.55 ) }
    dend_4 { pt3dadd( 5.71747, 105.342, -20.3114, 1.11 ) }
    dend_4 { pt3dadd( 6.70862, 110.118, -20.705, 0.55 ) }
    dend_4 { pt3dadd( 6.99816, 111.718, -20.8687, 0.55 ) }
    dend_4 { pt3dadd( 7.35564, 113.736, -21.0981, 1.11 ) }
    dend_4 { pt3dadd( 7.78707, 116.242, -21.4013, 0.55 ) }
    dend_4 { pt3dadd( 8.03855, 117.88, -21.6017, 1.11 ) }
    dend_4 { pt3dadd( 8.7572, 122.886, -22.1645, 0.55 ) }
    dend_4 { pt3dadd( 9.0488, 125.527, -22.644, 1.11 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 59/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 1.14259, 80.9009, -18.1924, 0.28 ) }
    dend_3 { pt3dadd( 0.811895, 83.0371, -20.2518, 0.28 ) }
    dend_3 { pt3dadd( 0.776375, 83.3557, -20.5533, 0.55 ) }
    dend_3 { pt3dadd( 0.530312, 86.1691, -23.1124, 0.28 ) }
    dend_3 { pt3dadd( 0.343597, 88.7855, -25.645, 1.11 ) }
    dend_3 { pt3dadd( 0.271883, 90.1421, -27.0408, 0.28 ) }
    dend_3 { pt3dadd( 0.271883, 90.1421, -27.0408, 0.55 ) }
    dend_3 { pt3dadd( 0.444883, 91.7728, -28.4376, 0.28 ) }
    dend_3 { pt3dadd( 0.579197, 92.392, -28.9146, 1.11 ) }
    dend_3 { pt3dadd( 1.83421, 95.0853, -30.3143, 0.55 ) }
    dend_3 { pt3dadd( 3.2577, 97.1481, -30.7739, 0.28 ) }
    dend_3 { pt3dadd( 5.78707, 100.35, -31.108, 1.11 ) }
    dend_3 { pt3dadd( 8.12049, 103.05, -31.0987, 0.28 ) }
    dend_3 { pt3dadd( 8.18343, 103.112, -31.0846, 0.55 ) }
    dend_3 { pt3dadd( 10.1736, 104.856, -30.3436, 0.28 ) }
    dend_3 { pt3dadd( 10.3667, 105.008, -30.2344, 0.55 ) }
    // Section: dend_11, id: dend_11, parent: dend_9 (entry count 75/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( -17.6502, -76.3905, 35.1735, 0.83 ) }
    dend_11 { pt3dadd( -17.4866, -82.0207, 36.9877, 0.83 ) }
    dend_11 { pt3dadd( -17.3743, -86.5382, 38.7348, 0.83 ) }
    dend_11 { pt3dadd( -17.2662, -88.6529, 39.5632, 0.83 ) }
    dend_11 { pt3dadd( -17.2194, -89.8686, 40.139, 0.83 ) }
    dend_11 { pt3dadd( -17.1721, -93.1916, 41.7914, 0.83 ) }
    dend_11 { pt3dadd( -17.1571, -95.157, 42.6343, 0.83 ) }
    dend_11 { pt3dadd( -17.0959, -98.8927, 43.8887, 0.83 ) }
    dend_11 { pt3dadd( -16.9518, -101.484, 44.7649, 0.83 ) }
    dend_11 { pt3dadd( -16.4992, -105.911, 46.1143, 0.83 ) }
    dend_11 { pt3dadd( -16.1534, -108.189, 46.6626, 0.83 ) }
    dend_11 { pt3dadd( -15.1746, -113.797, 47.4986, 0.83 ) }
    dend_11 { pt3dadd( -14.3377, -118.803, 47.9344, 0.83 ) }
    dend_11 { pt3dadd( -13.7484, -122.944, 47.9555, 0.83 ) }
    dend_11 { pt3dadd( -13.4592, -125.942, 47.8897, 0.83 ) }
    dend_11 { pt3dadd( -13.4096, -126.547, 47.8578, 0.83 ) }
    dend_11 { pt3dadd( -13.2592, -130.016, 47.8466, 0.28 ) }
    dend_11 { pt3dadd( -13.2792, -130.933, 47.9063, 0.83 ) }
    dend_11 { pt3dadd( -13.4825, -133.301, 48.0016, 0.28 ) }
    dend_11 { pt3dadd( -13.897, -137.506, 48.1087, 0.28 ) }
    dend_11 { pt3dadd( -13.9955, -138.408, 48.1639, 0.28 ) }
    dend_11 { pt3dadd( -14.29, -141.285, 48.3606, 0.83 ) }
    dend_11 { pt3dadd( -14.4905, -143.83, 48.5668, 0.28 ) }
    dend_11 { pt3dadd( -14.6391, -145.871, 48.7587, 0.83 ) }
    dend_11 { pt3dadd( -14.695, -147.505, 48.9538, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 0/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -17.6502, -76.3905, 35.1735, 0.55 ) }
    dend_10 { pt3dadd( -21.8454, -83.5835, 33.0141, 0.55 ) }
    dend_10 { pt3dadd( -23.7374, -86.657, 32.2, 0.55 ) }
    dend_10 { pt3dadd( -27.867, -93.1677, 30.6706, 0.55 ) }
    dend_10 { pt3dadd( -29.6954, -95.9473, 30.0928, 0.55 ) }
    dend_10 { pt3dadd( -31.5656, -98.6417, 29.6154, 0.28 ) }
    dend_10 { pt3dadd( -32.4013, -99.8459, 29.4021, 0.55 ) }
    dend_10 { pt3dadd( -34.5611, -102.605, 29.1537, 0.28 ) }
    dend_10 { pt3dadd( -35.9877, -104.395, 29.0467, 0.55 ) }
    dend_10 { pt3dadd( -37.753, -106.467, 29.1459, 0.28 ) }
    dend_10 { pt3dadd( -40.5485, -109.563, 29.2995, 0.28 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_5, dend_0, dend_7, dend_6, dend_2, dend_1, dend_9, dend_8, dend_4, dend_3, dend_11, dend_10]}
    ModelViewParmSubset_2 = new SectionList()
    dend_5 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_5, dend_0, dend_7, dend_6, dend_2, dend_1, dend_9, dend_8, dend_4, dend_3, dend_11, dend_10]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_6 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_2 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_1 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_8 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_4 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_11 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_10 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_0 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_5 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_7 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_9 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_3 OneSecGrp_SectionRef_13.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_0, dend_0, axon_0, axon_0, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 2.90744E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 2.90744E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.418459  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.026008999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 9.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.025854  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.19695699  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-6  // units: S cm-2
        e_pas_nml2 = -60.2509  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.9899996E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.008343  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 6.58298E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.026899999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.502333  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.653374  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 5.6999997E-5  // units: S cm-2
        e_pas_nml2 = -76.49812  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 7.84E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.30005398  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec basal {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.002256  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 1.38E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.005574  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 7.92E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bIR_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bIR_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bIR_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bIR_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_6 nseg = 5
    dend_2 nseg = 3
    dend_1 nseg = 3
    dend_8 nseg = 3
    dend_4 nseg = 3
    dend_11 nseg = 3
    dend_10 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bIR215_L23_BP_ab6ff08482_0_0


