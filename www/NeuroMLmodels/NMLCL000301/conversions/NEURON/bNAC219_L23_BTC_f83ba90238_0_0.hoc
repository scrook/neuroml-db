// Cell: bNAC219_L23_BTC_f83ba90238_0_0
/*
{
  "id" : "bNAC219_L23_BTC_f83ba90238_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-0.351257, 12.3292, -0.186838, 3.86652", "-0.347473, 10.9465, -0.165007, 5.23139", "-0.343689, 9.56389, -0.143175, 6.66046", "-0.339906, 8.18126, -0.121344, 7.80859", "-0.336122, 6.79862, -0.099512, 8.71713", "-0.332338, 5.41599, -0.0776805, 9.2498", "-0.328554, 4.03335, -0.055849, 9.72954", "-0.32477, 2.65072, -0.0340174, 10.2491", "-0.320986, 1.26808, -0.0121859, 10.9027", "-0.317202, -0.11455, 0.0096456, 11.3454", "-0.313418, -1.49719, 0.0314771, 11.4682", "-0.309634, -2.87982, 0.0533086, 11.591", "-0.30585, -4.26246, 0.0751402, 11.5993", "-0.302066, -5.64509, 0.0969717, 11.088", "-0.298282, -7.02772, 0.118803, 10.4157", "-0.294499, -8.41036, 0.140635, 8.88199", "-0.290715, -9.79299, 0.162466, 8.06564", "-0.286931, -11.1756, 0.184298, 6.905", "-0.283147, -12.5583, 0.206129, 5.67041", "-0.279363, -13.9409, 0.227961, 4.43581", "-0.275579, -15.3235, 0.249792, 2.79205" ]
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-0.741306, -15.6696, 0.99962, 2.78", "-0.52975, -18.3009, 0.620471, 2.5", "-0.367859, -20.3145, 0.330327, 3.05", "-0.100813, -23.636, -0.148275, 3.05" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500012654214236
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-2.45131, 13.3584, -2.00038, 2.22", "-3.53224, 17.9779, -1.99793, 1.39", "-4.27381, 21.3016, -1.92718, 1.39", "-4.84356, 23.8551, -1.87283, 1.39", "-5.42286, 26.4515, -1.81756, 1.11", "-5.83998, 28.3209, -1.77777, 1.11", "-6.42023, 30.9216, -1.72242, 1.11", "-7.07711, 34.5098, -1.51552, 1.67" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500012654214236
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-3.15131, -13.0968, 4.63962, 1.11", "-4.31607, -13.5685, 5.65895, 1.11", "-6.11626, -14.3967, 7.50766, 1.11", "-6.83855, -14.7458, 8.39815, 1.11", "-8.18432, -15.379, 10.276, 1.11", "-9.81152, -15.9647, 12.7682, 1.11", "-11.2636, -16.2027, 15.187, 1.11", "-12.275, -15.9742, 17.2693, 1.11", "-13.3217, -15.2215, 19.9229, 1.11", "-13.7274, -14.7489, 20.9504, 1.11", "-14.6335, -13.1974, 23.1968, 1.11", "-15.7192, -10.98, 25.5927, 1.11", "-16.5848, -9.10921, 27.2966, 0.56", "-17.316, -7.64461, 28.4804, 1.11", "-18.748, -5.02219, 30.4832, 0.83", "-19.4142, -3.99829, 31.3013, 0.83", "-20.2938, -2.86958, 32.2823, 0.83", "-21.1761, -1.86296, 33.1977, 2.22", "-22.5868, -0.275007, 34.664, 0.83", "-23.7213, 1.18427, 35.9272, 0.28", "-24.3829, 2.14627, 36.7755, 0.56", "-25.2075, 3.43295, 37.9855, 0.56", "-26.2331, 5.24524, 39.6233, 1.11", "-27.1649, 6.98432, 41.1903, 0.28", "-27.6225, 7.91388, 42.0385, 0.28", "-28.345, 9.53842, 43.5164, 1.94", "-29.5109, 12.7145, 46.3992, 0.28", "-29.9348, 14.0885, 47.6516, 2.78" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500012654214236,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "-0.275579, -15.3235, 0.249792, 0.812579", "-0.234528, -30.3234, 0.249792, 0.812579", "-0.193476, -45.3234, 0.249792, 0.812579" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "-0.100813, -23.636, -0.148275, 2.22", "-1.28771, -27.606, 0.27159, 2.22", "-3.184, -33.9487, 0.942397, 2.22", "-4.26312, -37.5581, 1.32413, 1.11", "-4.84304, -39.4978, 1.52928, 1.11", "-5.85169, -42.8715, 1.88608, 1.11", "-7.03443, -46.8275, 2.30447, 1.39" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-0.100813, -23.636, -0.148275, 0.83", "1.42813, -25.6556, -1.75026, 0.83", "3.39742, -27.9572, -3.64182, 0.83", "5.25061, -29.8818, -5.18887, 0.83", "6.52493, -31.0872, -6.03421, 0.83", "9.08056, -33.5047, -7.4089, 0.83", "12.1043, -36.5054, -8.75525, 0.83", "13.7765, -38.2451, -9.29412, 0.83", "15.8355, -40.2633, -9.81015, 0.83", "18.7903, -43.0889, -10.3325, 0.83", "21.6266, -45.8771, -10.6189, 0.83", "23.6391, -48.0777, -10.5186, 0.83", "24.9313, -49.5259, -10.2462, 0.83" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-7.07711, 34.5098, -1.51552, 1.11", "-6.05526, 37.421, -0.91974, 1.11", "-5.32879, 39.6077, -0.618064, 0.83", "-4.5788, 42.8409, -0.405369, 1.11", "-3.72165, 47.3389, -0.346224, 0.83", "-3.30789, 49.6594, -0.362373, 0.83", "-2.46395, 54.3926, -0.395313, 0.83", "-1.50296, 60.9347, -0.591512, 0.83", "-0.631625, 68.1224, -0.943111, 0.83", "-0.118948, 73.2665, -1.33198, 0.83", "0.180213, 76.0154, -1.64341, 1.39" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-7.07711, 34.5098, -1.51552, 0.56", "-8.1716, 37.2766, -0.476711, 0.56", "-8.81797, 38.7375, 0.143097, 0.56", "-11.7916, 44.8689, 2.9809, 0.83", "-15.1487, 51.4183, 6.19154, 0.83", "-16.2741, 53.8617, 7.28191, 0.83", "-18.2684, 58.1337, 9.12071, 0.83", "-20.442, 62.6369, 10.9773, 0.83", "-21.2679, 64.3256, 11.6122, 0.83", "-22.9821, 67.5165, 12.6569, 0.83", "-26.7036, 74.2369, 14.6925, 0.83", "-28.6975, 77.6438, 15.6593, 0.83", "-31.5896, 82.4316, 16.9241, 0.83", "-35.9486, 89.557, 18.6136, 0.83", "-41.3287, 98.0105, 20.5512, 0.83", "-42.738, 100.086, 21.0354, 0.83", "-44.635, 102.655, 21.7437, 1.11", "-47.0676, 106.218, 22.7698, 0.83", "-48.7036, 108.786, 23.5885, 1.11", "-51.7212, 113.793, 25.4551, 0.83", "-52.942, 116.104, 26.4127, 0.83", "-56.1296, 122.744, 29.2781, 0.83", "-57.9604, 127.186, 31.2696, 0.83", "-59.5607, 131.55, 33.3178, 0.83", "-60.6964, 134.938, 34.9793, 0.83", "-61.465, 137.445, 36.301, 1.11", "-62.131, 139.611, 37.3937, 0.83", "-62.9403, 141.892, 38.4508, 0.83", "-64.8026, 145.842, 40.0321, 0.83", "-66.6847, 149.234, 41.1978, 0.28", "-68.951, 152.592, 42.1973, 1.11", "-71.2212, 155.484, 43.0229, 0.28", "-74.2565, 158.955, 43.889, 0.83", "-77.0938, 161.952, 44.5491, 0.28", "-80.1221, 164.99, 45.0891, 0.28", "-85.929, 170.622, 46.0152, 0.83", "-89.5462, 174.048, 46.5865, 0.28", "-92.0023, 176.438, 47.0625, 0.56", "-93.7288, 178.206, 47.4299, 0.56", "-97.1002, 181.833, 48.1881, 0.83", "-99.0698, 184.018, 48.574, 0.28", "-100.565, 185.882, 48.8466, 0.83", "-102.832, 188.794, 49.2449, 0.28", "-104.469, 190.809, 49.5224, 0.83", "-106.418, 192.93, 49.8067, 0.28", "-108.357, 194.86, 50.1882, 0.83", "-110.765, 197.163, 50.6294, 0.28", "-112.47, 198.699, 50.9639, 0.28", "-116.053, 201.656, 51.7461, 0.83", "-122.32, 206.613, 53.2978, 0.56", "-126.441, 209.793, 54.5121, 0.28" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-29.9348, 14.0885, 47.6516, 0.28", "-34.3165, 14.4789, 49.2597, 0.28", "-35.6229, 14.5953, 49.7392, 1.39" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-29.9348, 14.0885, 47.6516, 0.28", "-29.8273, 17.8854, 50.1063, 0.28", "-29.7941, 18.8373, 50.7297, 0.56", "-29.6781, 22.3765, 52.9342, 0.28", "-29.6503, 24.5898, 54.3118, 1.11", "-29.699, 28.1212, 56.4255, 0.28", "-29.7489, 29.0076, 56.9476, 0.56", "-30.4041, 33.4886, 59.0696, 0.28", "-30.8112, 35.6023, 59.9049, 1.67", "-31.8413, 39.7808, 61.5872, 0.28", "-32.4435, 41.8901, 62.4256, 1.39", "-33.3848, 44.8494, 63.6424, 0.28", "-37.0393, 55.313, 68.2055, 0.28", "-37.5346, 56.6709, 69.0339, 1.39", "-40.0319, 63.6772, 74.1183, 0.28", "-40.374, 64.8024, 75.2353, 0.83", "-41.1044, 67.5469, 78.4827, 0.28", "-41.4601, 68.9947, 80.4464, 1.94", "-43.2899, 76.7939, 92.5936, 0.28", "-43.6628, 78.3737, 95.093, 1.94", "-45.9661, 87.7846, 109.878, 0.28", "-46.2087, 88.6976, 111.247, 1.67", "-47.0134, 91.4659, 115.114, 0.28", "-47.1457, 91.8689, 115.608, 0.56", "-48.2624, 94.6421, 118.234, 0.28", "-48.8312, 95.8486, 119.288, 2.22", "-51.2407, 100.208, 122.137, 0.28", "-51.506, 100.696, 122.451, 0.56", "-55.0135, 107.325, 126.512, 0.28", "-55.7647, 108.768, 127.382, 1.11", "-57.2245, 111.673, 129.059, 0.28", "-57.9154, 113.052, 129.934, 1.94" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "-0.193476, -45.3234, 0.249792, 0.56", "-0.152425, -60.3233, 0.249792, 0.56", "-0.111373, -75.3233, 0.249792, 0.56" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "-7.03443, -46.8275, 2.30447, 1.11", "-8.78184, -51.2229, 1.63929, 1.11" ],
    "parent" : "dend_22",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "-7.03443, -46.8275, 2.30447, 0.56", "-7.39353, -47.3788, 4.02786, 0.56", "-8.35733, -48.9187, 8.66028, 0.56", "-9.2923, -50.7247, 13.8783, 0.56", "-9.66479, -51.5306, 16.0242, 0.56", "-10.0073, -52.5015, 18.5771, 0.56", "-10.3568, -53.6648, 21.6255, 0.56", "-10.6967, -55.3231, 25.7129, 0.83", "-11.2399, -58.2434, 32.4262, 0.28", "-11.3412, -58.8733, 33.795, 1.11", "-11.9845, -62.3097, 41.2212, 0.28", "-12.0993, -63.0712, 42.8068, 1.39", "-12.4012, -65.2829, 47.1448, 0.28", "-12.4509, -65.8639, 48.1537, 1.11", "-12.5261, -66.9552, 49.8764, 0.28", "-12.59, -67.8863, 51.3162, 0.56", "-12.7738, -70.1872, 54.4146, 0.28", "-12.8386, -71.9643, 56.772, 1.67", "-12.6599, -76.0635, 62.2939, 0.28", "-12.5679, -76.7972, 63.3194, 0.83" ],
    "parent" : "dend_22",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "24.9313, -49.5259, -10.2462, 0.83", "27.3609, -51.5682, -10.4796, 0.83", "31.8465, -55.3387, -10.9106, 0.83", "34.9607, -57.9565, -11.2099, 0.83" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "24.9313, -49.5259, -10.2462, 0.56", "25.6616, -50.748, -10.1866, 0.56", "26.2535, -51.6927, -10.122, 0.83", "27.1974, -53.1361, -10.0924, 0.56", "29.0177, -56.0622, -10.122, 0.56", "30.8421, -59.0605, -10.1868, 0.56", "31.6079, -60.2611, -10.2273, 0.56", "32.2601, -61.2001, -10.2785, 0.56", "33.8239, -63.3973, -10.5056, 0.56", "36.2889, -66.8074, -11.0167, 0.56", "36.832, -67.5355, -11.1659, 0.28", "37.6951, -68.7802, -11.5195, 0.28", "38.9717, -70.745, -12.0832, 0.56", "40.1053, -72.4806, -12.6166, 0.28", "40.6235, -73.2956, -12.8639, 0.56", "41.3854, -74.526, -13.2552, 0.56", "42.1836, -75.9771, -13.6518, 0.56", "42.9276, -77.5798, -13.9755, 0.56", "43.6945, -79.4032, -14.2795, 0.56", "44.0268, -80.2293, -14.3501, 0.56", "44.4444, -81.7528, -14.4582, 0.56", "44.8094, -83.5052, -14.5593, 0.56", "45.1387, -85.7462, -14.6942, 0.56", "45.3797, -88.0026, -14.8238, 0.56", "45.5758, -90.4618, -14.9898, 0.28", "46.0877, -99.0769, -15.6333, 0.28", "46.1478, -100.42, -15.74, 0.56", "46.2824, -104.743, -16.1105, 0.28", "46.308, -106.238, -16.2506, 0.56", "46.3153, -108.794, -16.4913, 0.28", "46.2986, -112.379, -16.9773, 0.56", "49.2129, -119.591, -19.024, 0.56", "51.3826, -127.326, -19.7851, 0.56", "52.7995, -135.074, -21.5278, 0.56", "53.5589, -143.098, -22.1116, 0.56", "53.6949, -151.168, -22.5582, 0.56", "55.3231, -159.078, -22.3307, 0.56", "57.8297, -166.636, -21.0475, 0.56" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "0.180213, 76.0154, -1.64341, 0.56", "1.10106, 77.2942, -2.4697, 0.56", "2.4213, 79.1276, -3.65438, 0.56", "3.26348, 80.2972, -4.41008, 0.83", "4.84669, 82.4958, -5.83074, 0.83", "5.86964, 83.9164, -6.74864, 0.56" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "0.180213, 76.0154, -1.64341, 0.83", "0.624969, 77.3499, -0.243357, 0.83", "0.917529, 78.2217, 0.732538, 0.56", "1.241, 79.3153, 2.01798, 0.56", "1.32843, 79.6484, 2.38811, 0.56", "1.93358, 81.3024, 4.35418, 0.56", "2.9605, 83.8724, 7.32892, 0.56", "3.51853, 85.017, 8.62281, 0.56", "4.06823, 86.1303, 9.8281, 0.28", "4.4866, 87.0855, 10.8058, 0.83", "5.62448, 89.7551, 13.2938, 0.56", "6.0971, 91.0228, 14.228, 0.83", "6.51871, 92.3424, 15.0971, 0.56", "6.71208, 92.9399, 15.4346, 0.56", "7.31483, 94.7737, 16.369, 0.56", "7.89203, 96.9289, 17.4301, 0.56", "8.28588, 98.594, 18.1927, 0.83", "8.78981, 100.212, 19.1089, 0.28", "9.1327, 101.124, 19.6862, 0.83", "9.72149, 102.349, 20.5173, 0.56", "10.1362, 103.094, 21.0539, 0.56", "11.5651, 105.571, 22.8563, 0.56", "12.4781, 107.064, 24.0043, 0.28", "13.2845, 108.31, 24.9217, 1.39", "14.325, 109.781, 25.9724, 0.56", "15.0124, 110.664, 26.556, 0.28", "15.3082, 111.007, 26.768, 0.28", "15.9335, 111.7, 27.1967, 1.39", "17.1899, 113.162, 28.0841, 0.56", "17.5618, 113.674, 28.4055, 0.83", "18.4346, 115.014, 29.238, 0.28", "18.916, 115.791, 29.7407, 0.83", "20.5857, 118.626, 31.6153, 0.28", "21.6095, 120.355, 32.6767, 1.39", "24.467, 125.266, 35.4457, 0.28", "24.7993, 125.829, 35.7411, 0.56", "25.8407, 127.59, 36.5613, 0.28", "26.716, 129.029, 37.1823, 1.67", "29.808, 133.892, 39.0908, 0.28", "30.6102, 134.996, 39.5807, 1.11", "32.1218, 136.826, 40.5222, 0.28", "32.9001, 137.728, 41.0777, 1.39", "34.7987, 139.851, 42.5753, 0.28", "35.7364, 140.883, 43.4517, 0.83", "38.6455, 144.028, 46.8323, 0.28", "39.6622, 145.085, 48.2199, 1.94", "41.064, 146.446, 50.443, 0.28", "41.064, 146.446, 50.443, 0.83", "41.6196, 146.896, 51.4455, 0.28", "42.0047, 147.213, 52.1817, 0.83", "44.1937, 149.04, 56.4213, 1.39", "45.9066, 150.441, 59.6026, 1.39", "47.6787, 151.889, 62.7305, 0.28", "49.2785, 153.272, 65.5009, 0.83", "50.6436, 154.523, 67.7692, 0.28", "51.3718, 155.258, 68.9544, 0.83", "52.1961, 156.189, 70.2876, 0.28", "53.09, 157.28, 71.7541, 1.67", "54.8437, 159.458, 74.6479, 0.28", "55.3666, 160.07, 75.4737, 0.83", "57.8733, 162.86, 79.1824, 0.28", "58.2391, 163.255, 79.698, 0.83", "59.3896, 164.455, 81.2036, 0.56", "60.5311, 165.598, 82.5829, 1.67", "61.928, 166.984, 84.1622, 0.28", "62.302, 167.376, 84.5645, 1.11", "64.5254, 169.868, 86.7854, 0.28", "64.8777, 170.276, 87.1274, 0.83", "66.2184, 171.871, 88.3868, 0.28", "67.1544, 173.054, 89.257, 1.94", "72.469, 180.071, 94.1475, 0.28", "73.5459, 181.516, 95.1464, 1.94", "75.1053, 183.678, 96.6229, 0.28", "75.5552, 184.332, 97.0699, 1.11", "77.277, 187.265, 98.8541, 0.28", "77.8512, 188.399, 99.4637, 1.39", "79.1696, 191.573, 100.857, 0.28", "79.5281, 192.461, 101.22, 0.83", "80.0411, 193.755, 101.653, 1.39", "82.7501, 200.637, 103.602, 0.28", "83.0873, 201.521, 103.791, 0.83", "84.3556, 204.97, 104.34, 0.28", "84.6778, 205.966, 104.412, 1.39", "85.838, 209.784, 104.481, 0.28", "86.1957, 211.093, 104.417, 1.11", "86.8946, 214.262, 104.026, 0.28", "86.977, 214.706, 103.95, 0.83", "87.5859, 218.719, 103.103, 0.28", "87.767, 219.873, 102.803, 0.56", "88.1775, 222.174, 102.112, 0.28", "88.3237, 222.921, 101.87, 0.83", "89.7808, 229.631, 99.5145, 0.28", "89.8832, 230.052, 99.3624, 0.56", "90.7878, 233.107, 98.2249, 0.28", "91.1235, 234.126, 97.8393, 0.83" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-57.9154, 113.052, 129.934, 0.28", "-55.6574, 120.08, 135.338, 0.28", "-55.1432, 121.805, 136.805, 0.56", "-54.6028, 123.733, 138.52, 0.28", "-54.2996, 125.181, 139.939, 1.67", "-53.0176, 132.441, 147.392, 0.28", "-52.9394, 133.036, 148.042, 1.39", "-52.6815, 136.52, 152.261, 0.28", "-52.6551, 137.007, 152.852, 0.56", "-52.4986, 144.507, 162.203, 0.28", "-52.5246, 145.951, 164.068, 1.67", "-52.9765, 150.81, 170.871, 0.28", "-53.0867, 151.88, 172.366, 1.11" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-57.9154, 113.052, 129.934, 0.28", "-69.2477, 124.242, 130.557, 0.28", "-70.3642, 125.334, 130.844, 1.11", "-74.2625, 129.146, 132.142, 0.28", "-74.8014, 129.68, 132.362, 0.56", "-76.0934, 130.964, 132.942, 0.28", "-77.6109, 132.478, 133.672, 1.11", "-85.7611, 140.795, 138.941, 0.28", "-86.2802, 141.302, 139.271, 0.83", "-88.7224, 143.58, 140.814, 0.28", "-89.3926, 144.2, 141.207, 1.11", "-94.2538, 148.669, 143.829, 0.28", "-96.0458, 150.347, 144.707, 1.39", "-99.5949, 153.662, 146.057, 0.28", "-99.8501, 153.888, 146.165, 0.56", "-104.742, 158.041, 148.255, 0.28", "-106.389, 159.416, 149.028, 0.56", "-110.271, 162.57, 150.955, 0.28", "-112.001, 163.881, 151.785, 1.39", "-119.869, 169.461, 155.406, 0.28", "-120.92, 170.152, 155.859, 0.56", "-125.614, 172.997, 157.748, 0.28", "-127.631, 174.259, 158.475, 1.11", "-142.223, 183.63, 163.046, 0.28", "-144.149, 184.994, 163.454, 1.11", "-148.691, 188.502, 163.839, 0.28", "-149.652, 189.319, 163.811, 0.83", "-154.963, 194.204, 162.886, 0.28", "-156.7, 195.985, 162.297, 1.11", "-164.867, 205.469, 157.953, 0.28", "-166.224, 207.02, 157.146, 0.83", "-172.59, 214.129, 153.084, 0.28", "-174.351, 215.987, 151.995, 0.56", "-179.959, 221.389, 148.569, 0.28", "-181.601, 222.812, 147.614, 0.83", "-190.278, 229.506, 142.946, 0.28", "-191.402, 230.224, 142.267, 0.83", "-193.669, 231.375, 140.961, 0.28", "-195.534, 232.208, 139.93, 0.83", "-209.232, 237.224, 132.094, 0.28", "-210.579, 237.656, 131.307, 0.83", "-231.261, 243.18, 119.082, 0.28", "-239.965, 245.247, 113.908, 0.28", "-241.549, 245.592, 112.948, 0.83", "-253.256, 247.841, 105.837, 0.28", "-254.438, 247.997, 105.094, 0.56", "-261.519, 248.761, 100.767, 0.28", "-262.969, 248.775, 100.056, 0.83" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "-8.78184, -51.2229, 1.63929, 0.83", "-9.5589, -54.1362, -0.804511, 0.83", "-10.0414, -55.9454, -2.32216, 0.83", "-10.5756, -57.9478, -4.00194, 0.83", "-10.9131, -59.2133, -5.06345, 0.83" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "-8.78184, -51.2229, 1.63929, 0.83", "-9.44996, -53.5438, 2.07347, 0.83", "-10.9253, -59.2377, 3.16726, 0.83", "-11.8628, -63.1178, 3.79857, 0.83", "-14.0948, -72.9904, 5.15685, 0.83", "-14.832, -76.5168, 5.4474, 0.83", "-15.1762, -78.27, 5.53436, 0.83", "-15.4931, -80.1845, 5.57293, 0.83", "-16.0542, -85.3228, 5.55064, 0.83", "-16.6283, -90.3645, 5.37604, 0.83", "-17.1779, -95.3271, 5.05499, 0.83", "-17.4271, -97.2416, 4.932, 0.83", "-17.8428, -100.015, 4.91415, 0.56", "-18.2603, -102.315, 5.03061, 0.56", "-18.7548, -105.009, 5.387, 0.56", "-19.1867, -107.276, 5.83507, 0.83", "-19.7791, -110.189, 6.57061, 0.56", "-20.6169, -114.678, 7.52568, 0.83", "-21.1531, -117.903, 8.08363, 0.56", "-21.3242, -119.138, 8.28716, 0.56", "-21.5095, -121.05, 8.60733, 0.83", "-21.5653, -121.727, 8.71624, 0.83", "-21.8829, -125.682, 9.32306, 0.56", "-22.1953, -128.657, 9.76529, 0.56", "-22.565, -132.729, 10.3493, 0.56", "-22.793, -135.087, 10.6607, 0.56", "-23.1447, -138.463, 11.1156, 1.11", "-23.5064, -141.147, 11.5649, 0.56", "-23.7687, -142.623, 11.9035, 0.56", "-24.5199, -145.835, 12.8428, 0.56", "-24.6892, -146.461, 13.0635, 0.56", "-25.4078, -149.12, 14.1902, 1.11", "-26.3815, -152.648, 16.0284, 0.56", "-27.0389, -155.22, 17.5285, 0.28", "-27.7797, -158.342, 19.426, 0.28", "-28.1248, -159.874, 20.3705, 0.83", "-28.5148, -162.5, 21.9725, 1.39", "-28.6526, -164.798, 23.303, 0.28", "-28.6605, -166.121, 24.0682, 1.11", "-28.641, -167.301, 24.7375, 0.56", "-28.5659, -170.592, 26.6029, 0.83", "-28.5884, -174.584, 28.8521, 0.28", "-28.5997, -176.743, 29.9979, 1.39", "-28.6345, -181.012, 32.3992, 0.28", "-28.6369, -181.528, 32.7155, 0.83", "-28.4615, -183.333, 33.8634, 0.28", "-28.2191, -184.722, 34.7628, 0.83", "-27.7359, -186.853, 36.092, 0.56", "-26.4908, -191.683, 39.0886, 0.28", "-25.9981, -193.392, 40.1051, 1.11", "-23.815, -200.941, 44.4049, 0.28", "-23.5849, -201.76, 44.8616, 0.56", "-23.1375, -203.83, 46.0694, 1.67", "-22.4943, -207.856, 48.3914, 0.28", "-22.3995, -208.697, 48.8629, 0.56", "-22.1339, -212.923, 51.2982, 0.28", "-22.0923, -215.288, 52.7542, 1.67", "-21.9296, -223.301, 57.824, 0.28", "-21.8651, -224.839, 58.8579, 1.11", "-21.7076, -227.837, 61.0108, 0.28", "-21.62, -228.794, 61.7551, 0.83", "-21.1156, -232.388, 64.788, 0.28", "-20.9499, -233.086, 65.4026, 1.39", "-19.6598, -236.505, 68.5947, 0.28", "-19.2861, -237.211, 69.2711, 1.11", "-16.9731, -240.788, 72.665, 0.28", "-16.5919, -241.357, 73.1777, 0.56", "-15.3807, -243.14, 74.67, 0.28", "-14.7625, -244.112, 75.3898, 1.67", "-10.7669, -250.905, 79.729, 0.28", "-10.3768, -251.681, 80.1471, 1.11", "-8.26428, -256.726, 82.4218, 0.28", "-7.94152, -257.704, 82.8074, 0.56", "-6.96012, -261.674, 84.1093, 0.28", "-6.77881, -262.992, 84.4522, 1.39", "-6.59743, -267.64, 85.4558, 0.28", "-6.57839, -268.536, 85.6476, 0.83", "-6.56514, -271.225, 86.1984, 0.28", "-6.58474, -272.777, 86.5469, 0.56", "-6.91899, -282.629, 88.9282, 0.28", "-7.08915, -285.229, 89.5899, 1.39", "-7.44256, -288.857, 90.5506, 0.28", "-7.57371, -289.918, 90.8355, 0.56", "-7.86701, -292.14, 91.3903, 0.28", "-7.95983, -292.799, 91.559, 0.83", "-9.37402, -301.957, 93.841, 0.28", "-9.50426, -302.836, 94.0662, 1.11", "-10.7032, -311.059, 96.1927, 0.28", "-10.999, -313.258, 96.7653, 1.11", "-11.4586, -317.171, 97.7734, 0.28", "-11.5729, -318.239, 98.0581, 0.56", "-11.9096, -322.744, 99.3626, 0.28", "-11.9813, -323.803, 99.6905, 0.56" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 15
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "-12.5679, -76.7972, 63.3194, 1.67", "-13.3173, -79.4423, 64.6815, 1.67", "-14.4324, -82.9311, 66.5905, 0.56", "-14.7961, -84.1782, 67.3186, 0.83", "-15.247, -85.8972, 68.4199, 0.28", "-15.4508, -86.6432, 68.9321, 0.56", "-15.9316, -88.4692, 70.2191, 0.28", "-16.1297, -89.1716, 70.7891, 0.56", "-16.7375, -91.5428, 72.6312, 0.28", "-17.1211, -93.1554, 73.7832, 1.11", "-17.5015, -94.8557, 74.8135, 0.56", "-17.9018, -97.0615, 75.9712, 0.28", "-18.0707, -98.0799, 76.44, 0.56", "-18.6571, -101.707, 78.0036, 0.28", "-18.8289, -102.688, 78.374, 1.39", "-19.2519, -105.305, 79.2202, 1.67", "-19.7475, -109.213, 80.3432, 0.28", "-19.851, -110.065, 80.5655, 0.83" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "-12.5679, -76.7972, 63.3194, 0.28", "-11.5866, -77.6101, 63.7168, 0.28", "-10.3533, -78.6317, 64.2162, 1.11", "-6.46676, -81.8512, 65.7902, 0.28", "-6.27312, -82.0116, 65.8686, 0.83", "-5.09347, -82.9888, 66.3463, 0.28", "-5.08652, -82.9945, 66.3491, 0.83" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "34.9607, -57.9565, -11.2099, 0.83", "37.8188, -58.5949, -11.9318, 0.83", "40.4936, -59.159, -12.4211, 0.56", "43.3175, -59.787, -12.8322, 0.56", "46.653, -60.5683, -13.1335, 0.28", "47.8488, -60.8634, -13.1936, 0.28", "50.2584, -61.4675, -13.2209, 0.56", "52.2895, -62.0216, -13.0737, 0.28", "53.2265, -62.2806, -12.9601, 0.56", "55.3933, -62.9114, -12.7375, 0.28", "56.7233, -63.3639, -12.6266, 0.83", "58.7522, -63.9935, -12.4356, 0.28", "60.072, -64.3499, -12.258, 0.56", "60.4916, -64.4448, -12.2054, 0.28", "62.8303, -64.9125, -11.842, 0.56", "65.751, -65.3885, -11.2529, 0.28", "70.3603, -65.6581, -10.2635, 0.83", "73.5179, -65.5075, -9.6163, 0.28", "74.1871, -65.4099, -9.47978, 0.56", "77.2392, -64.6997, -8.93642, 0.28", "79.4469, -63.979, -8.62128, 0.83", "84.3948, -61.8686, -8.25347, 0.28", "86.8456, -60.5806, -8.31755, 1.11", "88.5307, -59.6015, -8.46447, 0.56", "89.8607, -58.7706, -8.63236, 0.28", "90.9227, -58.0762, -8.83102, 0.83", "92.4246, -57.1281, -9.19334, 0.28", "94.3667, -55.9942, -9.6674, 0.83", "98.2016, -53.9408, -10.6894, 0.28", "100.341, -52.8268, -11.305, 0.28", "101.689, -52.1235, -11.7197, 0.56", "104.798, -50.5186, -12.6846, 0.83", "107.255, -49.3023, -13.4618, 0.28", "109.007, -48.4595, -14.0411, 0.56", "116.655, -44.6715, -17.0321, 0.28", "117.726, -44.166, -17.4378, 1.67" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "34.9607, -57.9565, -11.2099, 0.56", "35.6924, -60.564, -12.5316, 0.56", "36.2235, -62.7896, -13.6309, 0.56", "36.6944, -64.9277, -14.546, 0.56", "37.4853, -68.7006, -16.3472, 0.56", "37.7123, -69.7833, -16.8641, 0.28", "37.9538, -70.9356, -17.4143, 0.28", "38.0168, -71.4003, -17.6402, 0.56", "38.0557, -73.1948, -18.5082, 0.28", "38.0776, -76.6661, -19.9749, 0.83", "38.6608, -84.989, -23.9425, 0.83" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "57.8297, -166.636, -21.0475, 0.56", "60.3036, -175.39, -21.8631, 0.56", "62.4934, -183.886, -24.3234, 0.56", "66.6767, -191.352, -27.3384, 0.56", "71.2344, -198.167, -31.1639, 0.56", "75.6997, -205.713, -33.5252, 0.56", "80.1375, -213.638, -34.1535, 0.56", "85.8288, -220.628, -35.1629, 0.56", "92.4972, -226.739, -35.1998, 0.56", "100.127, -231.478, -34.5254, 0.56", "108.104, -234.918, -32.2522, 0.56", "115.996, -237.364, -28.7816, 0.56", "123.664, -240.054, -24.9914, 0.56", "131.082, -244.083, -21.8832, 0.56", "138.228, -248.32, -18.4153, 0.56", "145.314, -253.725, -16.9713, 0.56", "153.449, -256.913, -14.9228, 0.56" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "57.8297, -166.636, -21.0475, 0.56", "59.7769, -173.242, -21.5203, 0.56", "60.8096, -180.077, -21.6336, 0.56", "61.4936, -186.864, -20.4896, 0.56", "61.2062, -193.633, -19.1171, 0.56", "60.4221, -199.916, -16.3824, 0.56", "58.9286, -206.098, -13.7348, 0.56" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "5.86964, 83.9164, -6.74864, 0.56", "6.74176, 84.9863, -7.88158, 0.56", "7.35968, 85.7444, -8.68429, 0.56", "8.49336, 87.1351, -10.157, 0.83", "12.4985, 90.7333, -13.4728, 0.83" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "5.86964, 83.9164, -6.74864, 0.56", "3.42475, 84.8706, -7.42236, 0.56", "-4.94906, 87.6886, -10.8448, 0.56" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "-10.9131, -59.2133, -5.06345, 0.83", "-10.8441, -61.1513, -6.29743, 0.83", "-10.7771, -62.9322, -7.42364, 0.83", "-10.7096, -63.8533, -7.98727, 0.83", "-10.4972, -65.8541, -9.25793, 0.56", "-10.392, -66.6158, -9.78176, 0.83", "-10.1077, -68.6755, -11.198, 0.56", "-9.86388, -70.285, -12.3384, 0.56", "-9.4141, -72.523, -14.0618, 0.56", "-8.96616, -74.541, -15.6689, 0.56", "-8.51764, -76.33, -17.0505, 0.56", "-8.5355, -83.0438, -20.6377, 0.56" ],
    "parent" : "dend_28",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "-10.9131, -59.2133, -5.06345, 0.83", "-11.6654, -60.4033, -5.62388, 0.83", "-12.6705, -61.9535, -6.50344, 0.83", "-14.546, -64.7597, -8.26598, 0.83", "-16.6504, -67.8294, -10.2732, 0.83", "-17.9834, -69.8721, -11.585, 0.83", "-19.2586, -71.849, -12.8678, 0.83", "-20.4136, -73.776, -14.1805, 0.83", "-22.0313, -76.5424, -16.1449, 0.56", "-22.737, -77.7728, -17.0497, 0.56", "-24.3142, -80.0924, -18.7083, 0.56", "-25.8849, -81.9495, -20.0076, 0.56", "-28.1955, -84.3782, -21.6965, 0.56", "-30.734, -86.6317, -23.2036, 0.56", "-32.5975, -87.9614, -24.1207, 0.56", "-37.2384, -90.5719, -26.0417, 0.56", "-40.9563, -92.2482, -27.4298, 0.56", "-43.3789, -93.1982, -28.1854, 0.56", "-47.5928, -94.6594, -29.2934, 0.56", "-50.0041, -95.4898, -29.8267, 0.56", "-53.0028, -96.4561, -30.3177, 0.56", "-54.9764, -97.0626, -30.5323, 0.56", "-57.4568, -97.833, -30.6035, 0.56", "-59.5614, -98.466, -30.5787, 0.56", "-61.258, -98.9378, -30.6098, 0.56", "-64.1863, -99.6323, -30.6144, 0.56", "-67.9606, -100.308, -30.5539, 0.56", "-69.2798, -100.452, -30.5627, 0.56", "-72.5978, -100.592, -30.7056, 0.56", "-75.9405, -100.404, -30.6658, 0.56", "-80.0275, -99.892, -30.5477, 0.56", "-82.035, -99.5792, -30.4751, 0.56", "-85.3989, -98.9588, -30.3038, 0.28", "-87.6003, -98.5715, -30.3098, 1.39", "-95.3345, -97.217, -30.6628, 0.28", "-96.8868, -96.9483, -30.7424, 1.67", "-104.023, -95.6639, -31.3272, 0.28", "-105.4, -95.4402, -31.4721, 1.39", "-114.301, -94.1945, -32.6586, 0.28", "-115.817, -94.0551, -32.9944, 0.56" ],
    "parent" : "dend_28",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "117.726, -44.166, -17.4378, 0.28", "118.98, -43.148, -16.56, 0.28", "120.376, -42.1405, -15.6697, 0.56", "122.221, -40.8331, -14.5264, 0.28", "123.556, -39.9148, -13.7629, 0.83", "125.28, -38.7274, -12.832, 0.28", "125.781, -38.3927, -12.5857, 1.11", "127.793, -37.1507, -11.703, 0.56", "129.457, -36.1553, -11.1005, 0.28", "130.453, -35.5533, -10.7898, 0.28", "132.399, -34.3397, -10.1667, 0.83", "135.357, -32.4357, -9.18923, 0.28", "135.739, -32.183, -9.05585, 0.83", "138.813, -30.0855, -7.87206, 0.28", "140.198, -29.1028, -7.25645, 0.83", "141.791, -27.9085, -6.45303, 0.28", "142.134, -27.6358, -6.26147, 0.83", "143.679, -26.2754, -5.30429, 0.28", "145.081, -24.7413, -4.53005, 1.39", "147.152, -22.0522, -3.55342, 0.28", "147.457, -21.6198, -3.45124, 0.83", "148.696, -19.7202, -3.17642, 0.28", "149.43, -18.4964, -3.06982, 1.67", "152.786, -12.4409, -2.88628, 0.28", "153.356, -11.3621, -2.89296, 1.39", "155.561, -7.05492, -3.04321, 0.28", "156.093, -5.95968, -3.09991, 1.11", "157.498, -2.93766, -3.3301, 0.28", "157.644, -2.62432, -3.35494, 0.83", "158.305, -1.20774, -3.4648, 0.28", "159.1, 0.516731, -3.56993, 0.83", "161.254, 5.3429, -3.78867, 0.28", "162.031, 7.0842, -3.79555, 1.11", "165.273, 14.6103, -3.41936, 0.28", "165.752, 15.7241, -3.29245, 1.11", "166.776, 18.1515, -2.86055, 0.28", "167.27, 19.3806, -2.49624, 1.11", "168.048, 21.5042, -1.49589, 0.28", "168.631, 23.6149, -0.23509, 1.11", "168.903, 25.3768, 1.15246, 0.28", "168.97, 25.9749, 1.63109, 0.56", "169.201, 28.4589, 3.62459, 0.28", "169.337, 29.8752, 4.74326, 1.39", "169.478, 31.0917, 5.67529, 0.28", "169.676, 32.3077, 6.61129, 0.83", "169.712, 32.5456, 6.79302, 1.11", "170.166, 34.6111, 8.442, 0.28", "170.287, 34.9741, 8.74808, 0.56", "171.197, 36.9543, 10.5472, 0.28", "171.504, 37.4961, 11.094, 0.83" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "117.726, -44.166, -17.4378, 0.28", "124.088, -44.5497, -21.0937, 0.28", "124.639, -44.5635, -21.5002, 0.56", "126.536, -44.5652, -23.0589, 0.28", "127.536, -44.4924, -24.0045, 0.56", "128.938, -44.3256, -25.4089, 0.28", "129.965, -44.1533, -26.5163, 0.56", "131.687, -43.584, -28.6677, 0.28", "132.589, -43.2085, -29.6817, 0.83", "135.874, -41.6715, -32.9654, 0.28", "136.207, -41.5068, -33.2647, 0.56", "137.86, -40.6945, -34.6793, 0.28", "140.142, -39.5327, -36.5, 0.83", "147.122, -35.9138, -41.6191, 0.28", "148.464, -35.2023, -42.5648, 0.28", "149.707, -34.5561, -43.3462, 0.83" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_12", "dend_5", "dend_0", "dend_22", "dend_13", "dend_7", "dend_6", "dend_4", "dend_1", "dend_26", "dend_23", "dend_17", "dend_14", "dend_9", "dend_8", "dend_3", "dend_2", "dend_28", "dend_27", "dend_25", "dend_24", "dend_19", "dend_18", "dend_16", "dend_15", "dend_11", "dend_10", "dend_30", "dend_29", "dend_21", "dend_20" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_12", "dend_5", "dend_0", "dend_22", "dend_13", "dend_7", "dend_6", "dend_4", "dend_1", "dend_26", "dend_23", "dend_17", "dend_14", "dend_9", "dend_8", "dend_3", "dend_2", "dend_28", "dend_27", "dend_25", "dend_24", "dend_19", "dend_18", "dend_16", "dend_15", "dend_11", "dend_10", "dend_30", "dend_29", "dend_21", "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_12", "dend_12", "dend_12", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_4", "dend_4", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_26", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_17", "dend_17", "dend_17", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_28", "dend_28", "dend_28", "dend_28", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_11", "dend_11", "dend_11", "dend_11", "dend_10", "dend_10", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.999855",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.042115",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0012239999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.001693",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.386953",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "8.0E-6",
    "erev" : "-63.854015"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.5399997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.039862998",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "5.2299997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.0054459996",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.503893",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "1.0E-4",
    "erev" : "-67.1289"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.78E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.15074699",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009017",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "4.0E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.0032419998",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "1.74E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bNAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bNAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bNAC219_L23_BTC_f83ba90238_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_12, id: dend_12, parent: soma_0
create dend_12
public dend_12
// Section: dend_5, id: dend_5, parent: soma_0
create dend_5
public dend_5
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_22, id: dend_22, parent: dend_12
create dend_22
public dend_22
// Section: dend_13, id: dend_13, parent: dend_12
create dend_13
public dend_13
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_4, id: dend_4, parent: dend_0
create dend_4
public dend_4
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_26, id: dend_26, parent: dend_22
create dend_26
public dend_26
// Section: dend_23, id: dend_23, parent: dend_22
create dend_23
public dend_23
// Section: dend_17, id: dend_17, parent: dend_13
create dend_17
public dend_17
// Section: dend_14, id: dend_14, parent: dend_13
create dend_14
public dend_14
// Section: dend_9, id: dend_9, parent: dend_7
create dend_9
public dend_9
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_3, id: dend_3, parent: dend_1
create dend_3
public dend_3
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_28, id: dend_28, parent: dend_26
create dend_28
public dend_28
// Section: dend_27, id: dend_27, parent: dend_26
create dend_27
public dend_27
// Section: dend_25, id: dend_25, parent: dend_23
create dend_25
public dend_25
// Section: dend_24, id: dend_24, parent: dend_23
create dend_24
public dend_24
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_16, id: dend_16, parent: dend_14
create dend_16
public dend_16
// Section: dend_15, id: dend_15, parent: dend_14
create dend_15
public dend_15
// Section: dend_11, id: dend_11, parent: dend_9
create dend_11
public dend_11
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10
// Section: dend_30, id: dend_30, parent: dend_28
create dend_30
public dend_30
// Section: dend_29, id: dend_29, parent: dend_28
create dend_29
public dend_29
// Section: dend_21, id: dend_21, parent: dend_19
create dend_21
public dend_21
// Section: dend_20, id: dend_20, parent: dend_19
create dend_20
public dend_20

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_12, dend_5, dend_0, dend_22, dend_13, dend_7, dend_6, dend_4, dend_1, dend_26, dend_23, dend_17, dend_14, dend_9, dend_8, dend_3, dend_2, dend_28, dend_27, dend_25, dend_24, dend_19, dend_18, dend_16, dend_15, dend_11, dend_10, dend_30, dend_29, dend_21, dend_20]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_12, dend_5, dend_0, dend_22, dend_13, dend_7, dend_6, dend_4, dend_1, dend_26, dend_23, dend_17, dend_14, dend_9, dend_8, dend_3, dend_2, dend_28, dend_27, dend_25, dend_24, dend_19, dend_18, dend_16, dend_15, dend_11, dend_10, dend_30, dend_29, dend_21, dend_20]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_23
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_12, dend_12, dend_12, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_26, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_17, dend_17, dend_17, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_11, dend_11, dend_11, dend_11, dend_10, dend_10, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bNAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bNAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_12(0), soma_0(0.4500012654214236)
    connect dend_5(0), soma_0(0.4500012654214236)
    connect dend_0(0), soma_0(0.4500012654214236)
    connect axon_0(0), soma_0(1.0)
    connect dend_22(0), dend_12(1.0)
    connect dend_13(0), dend_12(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_4(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_26(0), dend_22(1.0)
    connect dend_23(0), dend_22(1.0)
    connect dend_17(0), dend_13(1.0)
    connect dend_14(0), dend_13(1.0)
    connect dend_9(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_3(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_28(0), dend_26(1.0)
    connect dend_27(0), dend_26(1.0)
    connect dend_25(0), dend_23(1.0)
    connect dend_24(0), dend_23(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_16(0), dend_14(1.0)
    connect dend_15(0), dend_14(1.0)
    connect dend_11(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)
    connect dend_30(0), dend_28(1.0)
    connect dend_29(0), dend_28(1.0)
    connect dend_21(0), dend_19(1.0)
    connect dend_20(0), dend_19(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -0.351257, 12.3292, -0.186838, 3.86652 ) }
    soma_0 { pt3dadd( -0.347473, 10.9465, -0.165007, 5.23139 ) }
    soma_0 { pt3dadd( -0.343689, 9.56389, -0.143175, 6.66046 ) }
    soma_0 { pt3dadd( -0.339906, 8.18126, -0.121344, 7.80859 ) }
    soma_0 { pt3dadd( -0.336122, 6.79862, -0.099512, 8.71713 ) }
    soma_0 { pt3dadd( -0.332338, 5.41599, -0.0776805, 9.2498 ) }
    soma_0 { pt3dadd( -0.328554, 4.03335, -0.055849, 9.72954 ) }
    soma_0 { pt3dadd( -0.32477, 2.65072, -0.0340174, 10.2491 ) }
    soma_0 { pt3dadd( -0.320986, 1.26808, -0.0121859, 10.9027 ) }
    soma_0 { pt3dadd( -0.317202, -0.11455, 0.0096456, 11.3454 ) }
    soma_0 { pt3dadd( -0.313418, -1.49719, 0.0314771, 11.4682 ) }
    soma_0 { pt3dadd( -0.309634, -2.87982, 0.0533086, 11.591 ) }
    soma_0 { pt3dadd( -0.30585, -4.26246, 0.0751402, 11.5993 ) }
    soma_0 { pt3dadd( -0.302066, -5.64509, 0.0969717, 11.088 ) }
    soma_0 { pt3dadd( -0.298282, -7.02772, 0.118803, 10.4157 ) }
    soma_0 { pt3dadd( -0.294499, -8.41036, 0.140635, 8.88199 ) }
    soma_0 { pt3dadd( -0.290715, -9.79299, 0.162466, 8.06564 ) }
    soma_0 { pt3dadd( -0.286931, -11.1756, 0.184298, 6.905 ) }
    soma_0 { pt3dadd( -0.283147, -12.5583, 0.206129, 5.67041 ) }
    soma_0 { pt3dadd( -0.279363, -13.9409, 0.227961, 4.43581 ) }
    soma_0 { pt3dadd( -0.275579, -15.3235, 0.249792, 2.79205 ) }
    // Section: dend_12, id: dend_12, parent: soma_0 (entry count 21/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -0.741306, -15.6696, 0.99962, 2.78 ) }
    dend_12 { pt3dadd( -0.52975, -18.3009, 0.620471, 2.5 ) }
    dend_12 { pt3dadd( -0.367859, -20.3145, 0.330327, 3.05 ) }
    dend_12 { pt3dadd( -0.100813, -23.636, -0.148275, 3.05 ) }
    // Section: dend_5, id: dend_5, parent: soma_0 (entry count 25/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -2.45131, 13.3584, -2.00038, 2.22 ) }
    dend_5 { pt3dadd( -3.53224, 17.9779, -1.99793, 1.39 ) }
    dend_5 { pt3dadd( -4.27381, 21.3016, -1.92718, 1.39 ) }
    dend_5 { pt3dadd( -4.84356, 23.8551, -1.87283, 1.39 ) }
    dend_5 { pt3dadd( -5.42286, 26.4515, -1.81756, 1.11 ) }
    dend_5 { pt3dadd( -5.83998, 28.3209, -1.77777, 1.11 ) }
    dend_5 { pt3dadd( -6.42023, 30.9216, -1.72242, 1.11 ) }
    dend_5 { pt3dadd( -7.07711, 34.5098, -1.51552, 1.67 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 33/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -3.15131, -13.0968, 4.63962, 1.11 ) }
    dend_0 { pt3dadd( -4.31607, -13.5685, 5.65895, 1.11 ) }
    dend_0 { pt3dadd( -6.11626, -14.3967, 7.50766, 1.11 ) }
    dend_0 { pt3dadd( -6.83855, -14.7458, 8.39815, 1.11 ) }
    dend_0 { pt3dadd( -8.18432, -15.379, 10.276, 1.11 ) }
    dend_0 { pt3dadd( -9.81152, -15.9647, 12.7682, 1.11 ) }
    dend_0 { pt3dadd( -11.2636, -16.2027, 15.187, 1.11 ) }
    dend_0 { pt3dadd( -12.275, -15.9742, 17.2693, 1.11 ) }
    dend_0 { pt3dadd( -13.3217, -15.2215, 19.9229, 1.11 ) }
    dend_0 { pt3dadd( -13.7274, -14.7489, 20.9504, 1.11 ) }
    dend_0 { pt3dadd( -14.6335, -13.1974, 23.1968, 1.11 ) }
    dend_0 { pt3dadd( -15.7192, -10.98, 25.5927, 1.11 ) }
    dend_0 { pt3dadd( -16.5848, -9.10921, 27.2966, 0.56 ) }
    dend_0 { pt3dadd( -17.316, -7.64461, 28.4804, 1.11 ) }
    dend_0 { pt3dadd( -18.748, -5.02219, 30.4832, 0.83 ) }
    dend_0 { pt3dadd( -19.4142, -3.99829, 31.3013, 0.83 ) }
    dend_0 { pt3dadd( -20.2938, -2.86958, 32.2823, 0.83 ) }
    dend_0 { pt3dadd( -21.1761, -1.86296, 33.1977, 2.22 ) }
    dend_0 { pt3dadd( -22.5868, -0.275007, 34.664, 0.83 ) }
    dend_0 { pt3dadd( -23.7213, 1.18427, 35.9272, 0.28 ) }
    dend_0 { pt3dadd( -24.3829, 2.14627, 36.7755, 0.56 ) }
    dend_0 { pt3dadd( -25.2075, 3.43295, 37.9855, 0.56 ) }
    dend_0 { pt3dadd( -26.2331, 5.24524, 39.6233, 1.11 ) }
    dend_0 { pt3dadd( -27.1649, 6.98432, 41.1903, 0.28 ) }
    dend_0 { pt3dadd( -27.6225, 7.91388, 42.0385, 0.28 ) }
    dend_0 { pt3dadd( -28.345, 9.53842, 43.5164, 1.94 ) }
    dend_0 { pt3dadd( -29.5109, 12.7145, 46.3992, 0.28 ) }
    dend_0 { pt3dadd( -29.9348, 14.0885, 47.6516, 2.78 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 61/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( -0.275579, -15.3235, 0.249792, 0.812579 ) }
    axon_0 { pt3dadd( -0.234528, -30.3234, 0.249792, 0.812579 ) }
    axon_0 { pt3dadd( -0.193476, -45.3234, 0.249792, 0.812579 ) }
    // Section: dend_22, id: dend_22, parent: dend_12 (entry count 64/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( -0.100813, -23.636, -0.148275, 2.22 ) }
    dend_22 { pt3dadd( -1.28771, -27.606, 0.27159, 2.22 ) }
    dend_22 { pt3dadd( -3.184, -33.9487, 0.942397, 2.22 ) }
    dend_22 { pt3dadd( -4.26312, -37.5581, 1.32413, 1.11 ) }
    dend_22 { pt3dadd( -4.84304, -39.4978, 1.52928, 1.11 ) }
    dend_22 { pt3dadd( -5.85169, -42.8715, 1.88608, 1.11 ) }
    dend_22 { pt3dadd( -7.03443, -46.8275, 2.30447, 1.39 ) }
    // Section: dend_13, id: dend_13, parent: dend_12 (entry count 71/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -0.100813, -23.636, -0.148275, 0.83 ) }
    dend_13 { pt3dadd( 1.42813, -25.6556, -1.75026, 0.83 ) }
    dend_13 { pt3dadd( 3.39742, -27.9572, -3.64182, 0.83 ) }
    dend_13 { pt3dadd( 5.25061, -29.8818, -5.18887, 0.83 ) }
    dend_13 { pt3dadd( 6.52493, -31.0872, -6.03421, 0.83 ) }
    dend_13 { pt3dadd( 9.08056, -33.5047, -7.4089, 0.83 ) }
    dend_13 { pt3dadd( 12.1043, -36.5054, -8.75525, 0.83 ) }
    dend_13 { pt3dadd( 13.7765, -38.2451, -9.29412, 0.83 ) }
    dend_13 { pt3dadd( 15.8355, -40.2633, -9.81015, 0.83 ) }
    dend_13 { pt3dadd( 18.7903, -43.0889, -10.3325, 0.83 ) }
    dend_13 { pt3dadd( 21.6266, -45.8771, -10.6189, 0.83 ) }
    dend_13 { pt3dadd( 23.6391, -48.0777, -10.5186, 0.83 ) }
    dend_13 { pt3dadd( 24.9313, -49.5259, -10.2462, 0.83 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 84/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -7.07711, 34.5098, -1.51552, 1.11 ) }
    dend_7 { pt3dadd( -6.05526, 37.421, -0.91974, 1.11 ) }
    dend_7 { pt3dadd( -5.32879, 39.6077, -0.618064, 0.83 ) }
    dend_7 { pt3dadd( -4.5788, 42.8409, -0.405369, 1.11 ) }
    dend_7 { pt3dadd( -3.72165, 47.3389, -0.346224, 0.83 ) }
    dend_7 { pt3dadd( -3.30789, 49.6594, -0.362373, 0.83 ) }
    dend_7 { pt3dadd( -2.46395, 54.3926, -0.395313, 0.83 ) }
    dend_7 { pt3dadd( -1.50296, 60.9347, -0.591512, 0.83 ) }
    dend_7 { pt3dadd( -0.631625, 68.1224, -0.943111, 0.83 ) }
    dend_7 { pt3dadd( -0.118948, 73.2665, -1.33198, 0.83 ) }
    dend_7 { pt3dadd( 0.180213, 76.0154, -1.64341, 1.39 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 95/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -7.07711, 34.5098, -1.51552, 0.56 ) }
    dend_6 { pt3dadd( -8.1716, 37.2766, -0.476711, 0.56 ) }
    dend_6 { pt3dadd( -8.81797, 38.7375, 0.143097, 0.56 ) }
    dend_6 { pt3dadd( -11.7916, 44.8689, 2.9809, 0.83 ) }
    dend_6 { pt3dadd( -15.1487, 51.4183, 6.19154, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_6 { pt3dadd( -16.2741, 53.8617, 7.28191, 0.83 ) }
    dend_6 { pt3dadd( -18.2684, 58.1337, 9.12071, 0.83 ) }
    dend_6 { pt3dadd( -20.442, 62.6369, 10.9773, 0.83 ) }
    dend_6 { pt3dadd( -21.2679, 64.3256, 11.6122, 0.83 ) }
    dend_6 { pt3dadd( -22.9821, 67.5165, 12.6569, 0.83 ) }
    dend_6 { pt3dadd( -26.7036, 74.2369, 14.6925, 0.83 ) }
    dend_6 { pt3dadd( -28.6975, 77.6438, 15.6593, 0.83 ) }
    dend_6 { pt3dadd( -31.5896, 82.4316, 16.9241, 0.83 ) }
    dend_6 { pt3dadd( -35.9486, 89.557, 18.6136, 0.83 ) }
    dend_6 { pt3dadd( -41.3287, 98.0105, 20.5512, 0.83 ) }
    dend_6 { pt3dadd( -42.738, 100.086, 21.0354, 0.83 ) }
    dend_6 { pt3dadd( -44.635, 102.655, 21.7437, 1.11 ) }
    dend_6 { pt3dadd( -47.0676, 106.218, 22.7698, 0.83 ) }
    dend_6 { pt3dadd( -48.7036, 108.786, 23.5885, 1.11 ) }
    dend_6 { pt3dadd( -51.7212, 113.793, 25.4551, 0.83 ) }
    dend_6 { pt3dadd( -52.942, 116.104, 26.4127, 0.83 ) }
    dend_6 { pt3dadd( -56.1296, 122.744, 29.2781, 0.83 ) }
    dend_6 { pt3dadd( -57.9604, 127.186, 31.2696, 0.83 ) }
    dend_6 { pt3dadd( -59.5607, 131.55, 33.3178, 0.83 ) }
    dend_6 { pt3dadd( -60.6964, 134.938, 34.9793, 0.83 ) }
    dend_6 { pt3dadd( -61.465, 137.445, 36.301, 1.11 ) }
    dend_6 { pt3dadd( -62.131, 139.611, 37.3937, 0.83 ) }
    dend_6 { pt3dadd( -62.9403, 141.892, 38.4508, 0.83 ) }
    dend_6 { pt3dadd( -64.8026, 145.842, 40.0321, 0.83 ) }
    dend_6 { pt3dadd( -66.6847, 149.234, 41.1978, 0.28 ) }
    dend_6 { pt3dadd( -68.951, 152.592, 42.1973, 1.11 ) }
    dend_6 { pt3dadd( -71.2212, 155.484, 43.0229, 0.28 ) }
    dend_6 { pt3dadd( -74.2565, 158.955, 43.889, 0.83 ) }
    dend_6 { pt3dadd( -77.0938, 161.952, 44.5491, 0.28 ) }
    dend_6 { pt3dadd( -80.1221, 164.99, 45.0891, 0.28 ) }
    dend_6 { pt3dadd( -85.929, 170.622, 46.0152, 0.83 ) }
    dend_6 { pt3dadd( -89.5462, 174.048, 46.5865, 0.28 ) }
    dend_6 { pt3dadd( -92.0023, 176.438, 47.0625, 0.56 ) }
    dend_6 { pt3dadd( -93.7288, 178.206, 47.4299, 0.56 ) }
    dend_6 { pt3dadd( -97.1002, 181.833, 48.1881, 0.83 ) }
    dend_6 { pt3dadd( -99.0698, 184.018, 48.574, 0.28 ) }
    dend_6 { pt3dadd( -100.565, 185.882, 48.8466, 0.83 ) }
    dend_6 { pt3dadd( -102.832, 188.794, 49.2449, 0.28 ) }
    dend_6 { pt3dadd( -104.469, 190.809, 49.5224, 0.83 ) }
    dend_6 { pt3dadd( -106.418, 192.93, 49.8067, 0.28 ) }
    dend_6 { pt3dadd( -108.357, 194.86, 50.1882, 0.83 ) }
    dend_6 { pt3dadd( -110.765, 197.163, 50.6294, 0.28 ) }
    dend_6 { pt3dadd( -112.47, 198.699, 50.9639, 0.28 ) }
    dend_6 { pt3dadd( -116.053, 201.656, 51.7461, 0.83 ) }
    dend_6 { pt3dadd( -122.32, 206.613, 53.2978, 0.56 ) }
    dend_6 { pt3dadd( -126.441, 209.793, 54.5121, 0.28 ) }
    // Section: dend_4, id: dend_4, parent: dend_0 (entry count 46/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -29.9348, 14.0885, 47.6516, 0.28 ) }
    dend_4 { pt3dadd( -34.3165, 14.4789, 49.2597, 0.28 ) }
    dend_4 { pt3dadd( -35.6229, 14.5953, 49.7392, 1.39 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 49/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -29.9348, 14.0885, 47.6516, 0.28 ) }
    dend_1 { pt3dadd( -29.8273, 17.8854, 50.1063, 0.28 ) }
    dend_1 { pt3dadd( -29.7941, 18.8373, 50.7297, 0.56 ) }
    dend_1 { pt3dadd( -29.6781, 22.3765, 52.9342, 0.28 ) }
    dend_1 { pt3dadd( -29.6503, 24.5898, 54.3118, 1.11 ) }
    dend_1 { pt3dadd( -29.699, 28.1212, 56.4255, 0.28 ) }
    dend_1 { pt3dadd( -29.7489, 29.0076, 56.9476, 0.56 ) }
    dend_1 { pt3dadd( -30.4041, 33.4886, 59.0696, 0.28 ) }
    dend_1 { pt3dadd( -30.8112, 35.6023, 59.9049, 1.67 ) }
    dend_1 { pt3dadd( -31.8413, 39.7808, 61.5872, 0.28 ) }
    dend_1 { pt3dadd( -32.4435, 41.8901, 62.4256, 1.39 ) }
    dend_1 { pt3dadd( -33.3848, 44.8494, 63.6424, 0.28 ) }
    dend_1 { pt3dadd( -37.0393, 55.313, 68.2055, 0.28 ) }
    dend_1 { pt3dadd( -37.5346, 56.6709, 69.0339, 1.39 ) }
    dend_1 { pt3dadd( -40.0319, 63.6772, 74.1183, 0.28 ) }
    dend_1 { pt3dadd( -40.374, 64.8024, 75.2353, 0.83 ) }
    dend_1 { pt3dadd( -41.1044, 67.5469, 78.4827, 0.28 ) }
    dend_1 { pt3dadd( -41.4601, 68.9947, 80.4464, 1.94 ) }
    dend_1 { pt3dadd( -43.2899, 76.7939, 92.5936, 0.28 ) }
    dend_1 { pt3dadd( -43.6628, 78.3737, 95.093, 1.94 ) }
    dend_1 { pt3dadd( -45.9661, 87.7846, 109.878, 0.28 ) }
    dend_1 { pt3dadd( -46.2087, 88.6976, 111.247, 1.67 ) }
    dend_1 { pt3dadd( -47.0134, 91.4659, 115.114, 0.28 ) }
    dend_1 { pt3dadd( -47.1457, 91.8689, 115.608, 0.56 ) }
    dend_1 { pt3dadd( -48.2624, 94.6421, 118.234, 0.28 ) }
    dend_1 { pt3dadd( -48.8312, 95.8486, 119.288, 2.22 ) }
    dend_1 { pt3dadd( -51.2407, 100.208, 122.137, 0.28 ) }
    dend_1 { pt3dadd( -51.506, 100.696, 122.451, 0.56 ) }
    dend_1 { pt3dadd( -55.0135, 107.325, 126.512, 0.28 ) }
    dend_1 { pt3dadd( -55.7647, 108.768, 127.382, 1.11 ) }
    dend_1 { pt3dadd( -57.2245, 111.673, 129.059, 0.28 ) }
    dend_1 { pt3dadd( -57.9154, 113.052, 129.934, 1.94 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 81/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( -0.193476, -45.3234, 0.249792, 0.56 ) }
    axon_1 { pt3dadd( -0.152425, -60.3233, 0.249792, 0.56 ) }
    axon_1 { pt3dadd( -0.111373, -75.3233, 0.249792, 0.56 ) }
    // Section: dend_26, id: dend_26, parent: dend_22 (entry count 84/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( -7.03443, -46.8275, 2.30447, 1.11 ) }
    dend_26 { pt3dadd( -8.78184, -51.2229, 1.63929, 1.11 ) }
    // Section: dend_23, id: dend_23, parent: dend_22 (entry count 86/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( -7.03443, -46.8275, 2.30447, 0.56 ) }
    dend_23 { pt3dadd( -7.39353, -47.3788, 4.02786, 0.56 ) }
    dend_23 { pt3dadd( -8.35733, -48.9187, 8.66028, 0.56 ) }
    dend_23 { pt3dadd( -9.2923, -50.7247, 13.8783, 0.56 ) }
    dend_23 { pt3dadd( -9.66479, -51.5306, 16.0242, 0.56 ) }
    dend_23 { pt3dadd( -10.0073, -52.5015, 18.5771, 0.56 ) }
    dend_23 { pt3dadd( -10.3568, -53.6648, 21.6255, 0.56 ) }
    dend_23 { pt3dadd( -10.6967, -55.3231, 25.7129, 0.83 ) }
    dend_23 { pt3dadd( -11.2399, -58.2434, 32.4262, 0.28 ) }
    dend_23 { pt3dadd( -11.3412, -58.8733, 33.795, 1.11 ) }
    dend_23 { pt3dadd( -11.9845, -62.3097, 41.2212, 0.28 ) }
    dend_23 { pt3dadd( -12.0993, -63.0712, 42.8068, 1.39 ) }
    dend_23 { pt3dadd( -12.4012, -65.2829, 47.1448, 0.28 ) }
    dend_23 { pt3dadd( -12.4509, -65.8639, 48.1537, 1.11 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_23 { pt3dadd( -12.5261, -66.9552, 49.8764, 0.28 ) }
    dend_23 { pt3dadd( -12.59, -67.8863, 51.3162, 0.56 ) }
    dend_23 { pt3dadd( -12.7738, -70.1872, 54.4146, 0.28 ) }
    dend_23 { pt3dadd( -12.8386, -71.9643, 56.772, 1.67 ) }
    dend_23 { pt3dadd( -12.6599, -76.0635, 62.2939, 0.28 ) }
    dend_23 { pt3dadd( -12.5679, -76.7972, 63.3194, 0.83 ) }
    // Section: dend_17, id: dend_17, parent: dend_13 (entry count 6/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 24.9313, -49.5259, -10.2462, 0.83 ) }
    dend_17 { pt3dadd( 27.3609, -51.5682, -10.4796, 0.83 ) }
    dend_17 { pt3dadd( 31.8465, -55.3387, -10.9106, 0.83 ) }
    dend_17 { pt3dadd( 34.9607, -57.9565, -11.2099, 0.83 ) }
    // Section: dend_14, id: dend_14, parent: dend_13 (entry count 10/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 24.9313, -49.5259, -10.2462, 0.56 ) }
    dend_14 { pt3dadd( 25.6616, -50.748, -10.1866, 0.56 ) }
    dend_14 { pt3dadd( 26.2535, -51.6927, -10.122, 0.83 ) }
    dend_14 { pt3dadd( 27.1974, -53.1361, -10.0924, 0.56 ) }
    dend_14 { pt3dadd( 29.0177, -56.0622, -10.122, 0.56 ) }
    dend_14 { pt3dadd( 30.8421, -59.0605, -10.1868, 0.56 ) }
    dend_14 { pt3dadd( 31.6079, -60.2611, -10.2273, 0.56 ) }
    dend_14 { pt3dadd( 32.2601, -61.2001, -10.2785, 0.56 ) }
    dend_14 { pt3dadd( 33.8239, -63.3973, -10.5056, 0.56 ) }
    dend_14 { pt3dadd( 36.2889, -66.8074, -11.0167, 0.56 ) }
    dend_14 { pt3dadd( 36.832, -67.5355, -11.1659, 0.28 ) }
    dend_14 { pt3dadd( 37.6951, -68.7802, -11.5195, 0.28 ) }
    dend_14 { pt3dadd( 38.9717, -70.745, -12.0832, 0.56 ) }
    dend_14 { pt3dadd( 40.1053, -72.4806, -12.6166, 0.28 ) }
    dend_14 { pt3dadd( 40.6235, -73.2956, -12.8639, 0.56 ) }
    dend_14 { pt3dadd( 41.3854, -74.526, -13.2552, 0.56 ) }
    dend_14 { pt3dadd( 42.1836, -75.9771, -13.6518, 0.56 ) }
    dend_14 { pt3dadd( 42.9276, -77.5798, -13.9755, 0.56 ) }
    dend_14 { pt3dadd( 43.6945, -79.4032, -14.2795, 0.56 ) }
    dend_14 { pt3dadd( 44.0268, -80.2293, -14.3501, 0.56 ) }
    dend_14 { pt3dadd( 44.4444, -81.7528, -14.4582, 0.56 ) }
    dend_14 { pt3dadd( 44.8094, -83.5052, -14.5593, 0.56 ) }
    dend_14 { pt3dadd( 45.1387, -85.7462, -14.6942, 0.56 ) }
    dend_14 { pt3dadd( 45.3797, -88.0026, -14.8238, 0.56 ) }
    dend_14 { pt3dadd( 45.5758, -90.4618, -14.9898, 0.28 ) }
    dend_14 { pt3dadd( 46.0877, -99.0769, -15.6333, 0.28 ) }
    dend_14 { pt3dadd( 46.1478, -100.42, -15.74, 0.56 ) }
    dend_14 { pt3dadd( 46.2824, -104.743, -16.1105, 0.28 ) }
    dend_14 { pt3dadd( 46.308, -106.238, -16.2506, 0.56 ) }
    dend_14 { pt3dadd( 46.3153, -108.794, -16.4913, 0.28 ) }
    dend_14 { pt3dadd( 46.2986, -112.379, -16.9773, 0.56 ) }
    dend_14 { pt3dadd( 49.2129, -119.591, -19.024, 0.56 ) }
    dend_14 { pt3dadd( 51.3826, -127.326, -19.7851, 0.56 ) }
    dend_14 { pt3dadd( 52.7995, -135.074, -21.5278, 0.56 ) }
    dend_14 { pt3dadd( 53.5589, -143.098, -22.1116, 0.56 ) }
    dend_14 { pt3dadd( 53.6949, -151.168, -22.5582, 0.56 ) }
    dend_14 { pt3dadd( 55.3231, -159.078, -22.3307, 0.56 ) }
    dend_14 { pt3dadd( 57.8297, -166.636, -21.0475, 0.56 ) }
    // Section: dend_9, id: dend_9, parent: dend_7 (entry count 48/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 0.180213, 76.0154, -1.64341, 0.56 ) }
    dend_9 { pt3dadd( 1.10106, 77.2942, -2.4697, 0.56 ) }
    dend_9 { pt3dadd( 2.4213, 79.1276, -3.65438, 0.56 ) }
    dend_9 { pt3dadd( 3.26348, 80.2972, -4.41008, 0.83 ) }
    dend_9 { pt3dadd( 4.84669, 82.4958, -5.83074, 0.83 ) }
    dend_9 { pt3dadd( 5.86964, 83.9164, -6.74864, 0.56 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 54/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 0.180213, 76.0154, -1.64341, 0.83 ) }
    dend_8 { pt3dadd( 0.624969, 77.3499, -0.243357, 0.83 ) }
    dend_8 { pt3dadd( 0.917529, 78.2217, 0.732538, 0.56 ) }
    dend_8 { pt3dadd( 1.241, 79.3153, 2.01798, 0.56 ) }
    dend_8 { pt3dadd( 1.32843, 79.6484, 2.38811, 0.56 ) }
    dend_8 { pt3dadd( 1.93358, 81.3024, 4.35418, 0.56 ) }
    dend_8 { pt3dadd( 2.9605, 83.8724, 7.32892, 0.56 ) }
    dend_8 { pt3dadd( 3.51853, 85.017, 8.62281, 0.56 ) }
    dend_8 { pt3dadd( 4.06823, 86.1303, 9.8281, 0.28 ) }
    dend_8 { pt3dadd( 4.4866, 87.0855, 10.8058, 0.83 ) }
    dend_8 { pt3dadd( 5.62448, 89.7551, 13.2938, 0.56 ) }
    dend_8 { pt3dadd( 6.0971, 91.0228, 14.228, 0.83 ) }
    dend_8 { pt3dadd( 6.51871, 92.3424, 15.0971, 0.56 ) }
    dend_8 { pt3dadd( 6.71208, 92.9399, 15.4346, 0.56 ) }
    dend_8 { pt3dadd( 7.31483, 94.7737, 16.369, 0.56 ) }
    dend_8 { pt3dadd( 7.89203, 96.9289, 17.4301, 0.56 ) }
    dend_8 { pt3dadd( 8.28588, 98.594, 18.1927, 0.83 ) }
    dend_8 { pt3dadd( 8.78981, 100.212, 19.1089, 0.28 ) }
    dend_8 { pt3dadd( 9.1327, 101.124, 19.6862, 0.83 ) }
    dend_8 { pt3dadd( 9.72149, 102.349, 20.5173, 0.56 ) }
    dend_8 { pt3dadd( 10.1362, 103.094, 21.0539, 0.56 ) }
    dend_8 { pt3dadd( 11.5651, 105.571, 22.8563, 0.56 ) }
    dend_8 { pt3dadd( 12.4781, 107.064, 24.0043, 0.28 ) }
    dend_8 { pt3dadd( 13.2845, 108.31, 24.9217, 1.39 ) }
    dend_8 { pt3dadd( 14.325, 109.781, 25.9724, 0.56 ) }
    dend_8 { pt3dadd( 15.0124, 110.664, 26.556, 0.28 ) }
    dend_8 { pt3dadd( 15.3082, 111.007, 26.768, 0.28 ) }
    dend_8 { pt3dadd( 15.9335, 111.7, 27.1967, 1.39 ) }
    dend_8 { pt3dadd( 17.1899, 113.162, 28.0841, 0.56 ) }
    dend_8 { pt3dadd( 17.5618, 113.674, 28.4055, 0.83 ) }
    dend_8 { pt3dadd( 18.4346, 115.014, 29.238, 0.28 ) }
    dend_8 { pt3dadd( 18.916, 115.791, 29.7407, 0.83 ) }
    dend_8 { pt3dadd( 20.5857, 118.626, 31.6153, 0.28 ) }
    dend_8 { pt3dadd( 21.6095, 120.355, 32.6767, 1.39 ) }
    dend_8 { pt3dadd( 24.467, 125.266, 35.4457, 0.28 ) }
    dend_8 { pt3dadd( 24.7993, 125.829, 35.7411, 0.56 ) }
    dend_8 { pt3dadd( 25.8407, 127.59, 36.5613, 0.28 ) }
    dend_8 { pt3dadd( 26.716, 129.029, 37.1823, 1.67 ) }
    dend_8 { pt3dadd( 29.808, 133.892, 39.0908, 0.28 ) }
    dend_8 { pt3dadd( 30.6102, 134.996, 39.5807, 1.11 ) }
    dend_8 { pt3dadd( 32.1218, 136.826, 40.5222, 0.28 ) }
    dend_8 { pt3dadd( 32.9001, 137.728, 41.0777, 1.39 ) }
    dend_8 { pt3dadd( 34.7987, 139.851, 42.5753, 0.28 ) }
    dend_8 { pt3dadd( 35.7364, 140.883, 43.4517, 0.83 ) }
    dend_8 { pt3dadd( 38.6455, 144.028, 46.8323, 0.28 ) }
    dend_8 { pt3dadd( 39.6622, 145.085, 48.2199, 1.94 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_8 { pt3dadd( 41.064, 146.446, 50.443, 0.28 ) }
    dend_8 { pt3dadd( 41.064, 146.446, 50.443, 0.83 ) }
    dend_8 { pt3dadd( 41.6196, 146.896, 51.4455, 0.28 ) }
    dend_8 { pt3dadd( 42.0047, 147.213, 52.1817, 0.83 ) }
    dend_8 { pt3dadd( 44.1937, 149.04, 56.4213, 1.39 ) }
    dend_8 { pt3dadd( 45.9066, 150.441, 59.6026, 1.39 ) }
    dend_8 { pt3dadd( 47.6787, 151.889, 62.7305, 0.28 ) }
    dend_8 { pt3dadd( 49.2785, 153.272, 65.5009, 0.83 ) }
    dend_8 { pt3dadd( 50.6436, 154.523, 67.7692, 0.28 ) }
    dend_8 { pt3dadd( 51.3718, 155.258, 68.9544, 0.83 ) }
    dend_8 { pt3dadd( 52.1961, 156.189, 70.2876, 0.28 ) }
    dend_8 { pt3dadd( 53.09, 157.28, 71.7541, 1.67 ) }
    dend_8 { pt3dadd( 54.8437, 159.458, 74.6479, 0.28 ) }
    dend_8 { pt3dadd( 55.3666, 160.07, 75.4737, 0.83 ) }
    dend_8 { pt3dadd( 57.8733, 162.86, 79.1824, 0.28 ) }
    dend_8 { pt3dadd( 58.2391, 163.255, 79.698, 0.83 ) }
    dend_8 { pt3dadd( 59.3896, 164.455, 81.2036, 0.56 ) }
    dend_8 { pt3dadd( 60.5311, 165.598, 82.5829, 1.67 ) }
    dend_8 { pt3dadd( 61.928, 166.984, 84.1622, 0.28 ) }
    dend_8 { pt3dadd( 62.302, 167.376, 84.5645, 1.11 ) }
    dend_8 { pt3dadd( 64.5254, 169.868, 86.7854, 0.28 ) }
    dend_8 { pt3dadd( 64.8777, 170.276, 87.1274, 0.83 ) }
    dend_8 { pt3dadd( 66.2184, 171.871, 88.3868, 0.28 ) }
    dend_8 { pt3dadd( 67.1544, 173.054, 89.257, 1.94 ) }
    dend_8 { pt3dadd( 72.469, 180.071, 94.1475, 0.28 ) }
    dend_8 { pt3dadd( 73.5459, 181.516, 95.1464, 1.94 ) }
    dend_8 { pt3dadd( 75.1053, 183.678, 96.6229, 0.28 ) }
    dend_8 { pt3dadd( 75.5552, 184.332, 97.0699, 1.11 ) }
    dend_8 { pt3dadd( 77.277, 187.265, 98.8541, 0.28 ) }
    dend_8 { pt3dadd( 77.8512, 188.399, 99.4637, 1.39 ) }
    dend_8 { pt3dadd( 79.1696, 191.573, 100.857, 0.28 ) }
    dend_8 { pt3dadd( 79.5281, 192.461, 101.22, 0.83 ) }
    dend_8 { pt3dadd( 80.0411, 193.755, 101.653, 1.39 ) }
    dend_8 { pt3dadd( 82.7501, 200.637, 103.602, 0.28 ) }
    dend_8 { pt3dadd( 83.0873, 201.521, 103.791, 0.83 ) }
    dend_8 { pt3dadd( 84.3556, 204.97, 104.34, 0.28 ) }
    dend_8 { pt3dadd( 84.6778, 205.966, 104.412, 1.39 ) }
    dend_8 { pt3dadd( 85.838, 209.784, 104.481, 0.28 ) }
    dend_8 { pt3dadd( 86.1957, 211.093, 104.417, 1.11 ) }
    dend_8 { pt3dadd( 86.8946, 214.262, 104.026, 0.28 ) }
    dend_8 { pt3dadd( 86.977, 214.706, 103.95, 0.83 ) }
    dend_8 { pt3dadd( 87.5859, 218.719, 103.103, 0.28 ) }
    dend_8 { pt3dadd( 87.767, 219.873, 102.803, 0.56 ) }
    dend_8 { pt3dadd( 88.1775, 222.174, 102.112, 0.28 ) }
    dend_8 { pt3dadd( 88.3237, 222.921, 101.87, 0.83 ) }
    dend_8 { pt3dadd( 89.7808, 229.631, 99.5145, 0.28 ) }
    dend_8 { pt3dadd( 89.8832, 230.052, 99.3624, 0.56 ) }
    dend_8 { pt3dadd( 90.7878, 233.107, 98.2249, 0.28 ) }
    dend_8 { pt3dadd( 91.1235, 234.126, 97.8393, 0.83 ) }
    // Section: dend_3, id: dend_3, parent: dend_1 (entry count 49/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -57.9154, 113.052, 129.934, 0.28 ) }
    dend_3 { pt3dadd( -55.6574, 120.08, 135.338, 0.28 ) }
    dend_3 { pt3dadd( -55.1432, 121.805, 136.805, 0.56 ) }
    dend_3 { pt3dadd( -54.6028, 123.733, 138.52, 0.28 ) }
    dend_3 { pt3dadd( -54.2996, 125.181, 139.939, 1.67 ) }
    dend_3 { pt3dadd( -53.0176, 132.441, 147.392, 0.28 ) }
    dend_3 { pt3dadd( -52.9394, 133.036, 148.042, 1.39 ) }
    dend_3 { pt3dadd( -52.6815, 136.52, 152.261, 0.28 ) }
    dend_3 { pt3dadd( -52.6551, 137.007, 152.852, 0.56 ) }
    dend_3 { pt3dadd( -52.4986, 144.507, 162.203, 0.28 ) }
    dend_3 { pt3dadd( -52.5246, 145.951, 164.068, 1.67 ) }
    dend_3 { pt3dadd( -52.9765, 150.81, 170.871, 0.28 ) }
    dend_3 { pt3dadd( -53.0867, 151.88, 172.366, 1.11 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 62/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -57.9154, 113.052, 129.934, 0.28 ) }
    dend_2 { pt3dadd( -69.2477, 124.242, 130.557, 0.28 ) }
    dend_2 { pt3dadd( -70.3642, 125.334, 130.844, 1.11 ) }
    dend_2 { pt3dadd( -74.2625, 129.146, 132.142, 0.28 ) }
    dend_2 { pt3dadd( -74.8014, 129.68, 132.362, 0.56 ) }
    dend_2 { pt3dadd( -76.0934, 130.964, 132.942, 0.28 ) }
    dend_2 { pt3dadd( -77.6109, 132.478, 133.672, 1.11 ) }
    dend_2 { pt3dadd( -85.7611, 140.795, 138.941, 0.28 ) }
    dend_2 { pt3dadd( -86.2802, 141.302, 139.271, 0.83 ) }
    dend_2 { pt3dadd( -88.7224, 143.58, 140.814, 0.28 ) }
    dend_2 { pt3dadd( -89.3926, 144.2, 141.207, 1.11 ) }
    dend_2 { pt3dadd( -94.2538, 148.669, 143.829, 0.28 ) }
    dend_2 { pt3dadd( -96.0458, 150.347, 144.707, 1.39 ) }
    dend_2 { pt3dadd( -99.5949, 153.662, 146.057, 0.28 ) }
    dend_2 { pt3dadd( -99.8501, 153.888, 146.165, 0.56 ) }
    dend_2 { pt3dadd( -104.742, 158.041, 148.255, 0.28 ) }
    dend_2 { pt3dadd( -106.389, 159.416, 149.028, 0.56 ) }
    dend_2 { pt3dadd( -110.271, 162.57, 150.955, 0.28 ) }
    dend_2 { pt3dadd( -112.001, 163.881, 151.785, 1.39 ) }
    dend_2 { pt3dadd( -119.869, 169.461, 155.406, 0.28 ) }
    dend_2 { pt3dadd( -120.92, 170.152, 155.859, 0.56 ) }
    dend_2 { pt3dadd( -125.614, 172.997, 157.748, 0.28 ) }
    dend_2 { pt3dadd( -127.631, 174.259, 158.475, 1.11 ) }
    dend_2 { pt3dadd( -142.223, 183.63, 163.046, 0.28 ) }
    dend_2 { pt3dadd( -144.149, 184.994, 163.454, 1.11 ) }
    dend_2 { pt3dadd( -148.691, 188.502, 163.839, 0.28 ) }
    dend_2 { pt3dadd( -149.652, 189.319, 163.811, 0.83 ) }
    dend_2 { pt3dadd( -154.963, 194.204, 162.886, 0.28 ) }
    dend_2 { pt3dadd( -156.7, 195.985, 162.297, 1.11 ) }
    dend_2 { pt3dadd( -164.867, 205.469, 157.953, 0.28 ) }
    dend_2 { pt3dadd( -166.224, 207.02, 157.146, 0.83 ) }
    dend_2 { pt3dadd( -172.59, 214.129, 153.084, 0.28 ) }
    dend_2 { pt3dadd( -174.351, 215.987, 151.995, 0.56 ) }
    dend_2 { pt3dadd( -179.959, 221.389, 148.569, 0.28 ) }
    dend_2 { pt3dadd( -181.601, 222.812, 147.614, 0.83 ) }
    dend_2 { pt3dadd( -190.278, 229.506, 142.946, 0.28 ) }
    dend_2 { pt3dadd( -191.402, 230.224, 142.267, 0.83 ) }
    dend_2 { pt3dadd( -193.669, 231.375, 140.961, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_2 { pt3dadd( -195.534, 232.208, 139.93, 0.83 ) }
    dend_2 { pt3dadd( -209.232, 237.224, 132.094, 0.28 ) }
    dend_2 { pt3dadd( -210.579, 237.656, 131.307, 0.83 ) }
    dend_2 { pt3dadd( -231.261, 243.18, 119.082, 0.28 ) }
    dend_2 { pt3dadd( -239.965, 245.247, 113.908, 0.28 ) }
    dend_2 { pt3dadd( -241.549, 245.592, 112.948, 0.83 ) }
    dend_2 { pt3dadd( -253.256, 247.841, 105.837, 0.28 ) }
    dend_2 { pt3dadd( -254.438, 247.997, 105.094, 0.56 ) }
    dend_2 { pt3dadd( -261.519, 248.761, 100.767, 0.28 ) }
    dend_2 { pt3dadd( -262.969, 248.775, 100.056, 0.83 ) }
    // Section: dend_28, id: dend_28, parent: dend_26 (entry count 10/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( -8.78184, -51.2229, 1.63929, 0.83 ) }
    dend_28 { pt3dadd( -9.5589, -54.1362, -0.804511, 0.83 ) }
    dend_28 { pt3dadd( -10.0414, -55.9454, -2.32216, 0.83 ) }
    dend_28 { pt3dadd( -10.5756, -57.9478, -4.00194, 0.83 ) }
    dend_28 { pt3dadd( -10.9131, -59.2133, -5.06345, 0.83 ) }
    // Section: dend_27, id: dend_27, parent: dend_26 (entry count 15/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( -8.78184, -51.2229, 1.63929, 0.83 ) }
    dend_27 { pt3dadd( -9.44996, -53.5438, 2.07347, 0.83 ) }
    dend_27 { pt3dadd( -10.9253, -59.2377, 3.16726, 0.83 ) }
    dend_27 { pt3dadd( -11.8628, -63.1178, 3.79857, 0.83 ) }
    dend_27 { pt3dadd( -14.0948, -72.9904, 5.15685, 0.83 ) }
    dend_27 { pt3dadd( -14.832, -76.5168, 5.4474, 0.83 ) }
    dend_27 { pt3dadd( -15.1762, -78.27, 5.53436, 0.83 ) }
    dend_27 { pt3dadd( -15.4931, -80.1845, 5.57293, 0.83 ) }
    dend_27 { pt3dadd( -16.0542, -85.3228, 5.55064, 0.83 ) }
    dend_27 { pt3dadd( -16.6283, -90.3645, 5.37604, 0.83 ) }
    dend_27 { pt3dadd( -17.1779, -95.3271, 5.05499, 0.83 ) }
    dend_27 { pt3dadd( -17.4271, -97.2416, 4.932, 0.83 ) }
    dend_27 { pt3dadd( -17.8428, -100.015, 4.91415, 0.56 ) }
    dend_27 { pt3dadd( -18.2603, -102.315, 5.03061, 0.56 ) }
    dend_27 { pt3dadd( -18.7548, -105.009, 5.387, 0.56 ) }
    dend_27 { pt3dadd( -19.1867, -107.276, 5.83507, 0.83 ) }
    dend_27 { pt3dadd( -19.7791, -110.189, 6.57061, 0.56 ) }
    dend_27 { pt3dadd( -20.6169, -114.678, 7.52568, 0.83 ) }
    dend_27 { pt3dadd( -21.1531, -117.903, 8.08363, 0.56 ) }
    dend_27 { pt3dadd( -21.3242, -119.138, 8.28716, 0.56 ) }
    dend_27 { pt3dadd( -21.5095, -121.05, 8.60733, 0.83 ) }
    dend_27 { pt3dadd( -21.5653, -121.727, 8.71624, 0.83 ) }
    dend_27 { pt3dadd( -21.8829, -125.682, 9.32306, 0.56 ) }
    dend_27 { pt3dadd( -22.1953, -128.657, 9.76529, 0.56 ) }
    dend_27 { pt3dadd( -22.565, -132.729, 10.3493, 0.56 ) }
    dend_27 { pt3dadd( -22.793, -135.087, 10.6607, 0.56 ) }
    dend_27 { pt3dadd( -23.1447, -138.463, 11.1156, 1.11 ) }
    dend_27 { pt3dadd( -23.5064, -141.147, 11.5649, 0.56 ) }
    dend_27 { pt3dadd( -23.7687, -142.623, 11.9035, 0.56 ) }
    dend_27 { pt3dadd( -24.5199, -145.835, 12.8428, 0.56 ) }
    dend_27 { pt3dadd( -24.6892, -146.461, 13.0635, 0.56 ) }
    dend_27 { pt3dadd( -25.4078, -149.12, 14.1902, 1.11 ) }
    dend_27 { pt3dadd( -26.3815, -152.648, 16.0284, 0.56 ) }
    dend_27 { pt3dadd( -27.0389, -155.22, 17.5285, 0.28 ) }
    dend_27 { pt3dadd( -27.7797, -158.342, 19.426, 0.28 ) }
    dend_27 { pt3dadd( -28.1248, -159.874, 20.3705, 0.83 ) }
    dend_27 { pt3dadd( -28.5148, -162.5, 21.9725, 1.39 ) }
    dend_27 { pt3dadd( -28.6526, -164.798, 23.303, 0.28 ) }
    dend_27 { pt3dadd( -28.6605, -166.121, 24.0682, 1.11 ) }
    dend_27 { pt3dadd( -28.641, -167.301, 24.7375, 0.56 ) }
    dend_27 { pt3dadd( -28.5659, -170.592, 26.6029, 0.83 ) }
    dend_27 { pt3dadd( -28.5884, -174.584, 28.8521, 0.28 ) }
    dend_27 { pt3dadd( -28.5997, -176.743, 29.9979, 1.39 ) }
    dend_27 { pt3dadd( -28.6345, -181.012, 32.3992, 0.28 ) }
    dend_27 { pt3dadd( -28.6369, -181.528, 32.7155, 0.83 ) }
    dend_27 { pt3dadd( -28.4615, -183.333, 33.8634, 0.28 ) }
    dend_27 { pt3dadd( -28.2191, -184.722, 34.7628, 0.83 ) }
    dend_27 { pt3dadd( -27.7359, -186.853, 36.092, 0.56 ) }
    dend_27 { pt3dadd( -26.4908, -191.683, 39.0886, 0.28 ) }
    dend_27 { pt3dadd( -25.9981, -193.392, 40.1051, 1.11 ) }
    dend_27 { pt3dadd( -23.815, -200.941, 44.4049, 0.28 ) }
    dend_27 { pt3dadd( -23.5849, -201.76, 44.8616, 0.56 ) }
    dend_27 { pt3dadd( -23.1375, -203.83, 46.0694, 1.67 ) }
    dend_27 { pt3dadd( -22.4943, -207.856, 48.3914, 0.28 ) }
    dend_27 { pt3dadd( -22.3995, -208.697, 48.8629, 0.56 ) }
    dend_27 { pt3dadd( -22.1339, -212.923, 51.2982, 0.28 ) }
    dend_27 { pt3dadd( -22.0923, -215.288, 52.7542, 1.67 ) }
    dend_27 { pt3dadd( -21.9296, -223.301, 57.824, 0.28 ) }
    dend_27 { pt3dadd( -21.8651, -224.839, 58.8579, 1.11 ) }
    dend_27 { pt3dadd( -21.7076, -227.837, 61.0108, 0.28 ) }
    dend_27 { pt3dadd( -21.62, -228.794, 61.7551, 0.83 ) }
    dend_27 { pt3dadd( -21.1156, -232.388, 64.788, 0.28 ) }
    dend_27 { pt3dadd( -20.9499, -233.086, 65.4026, 1.39 ) }
    dend_27 { pt3dadd( -19.6598, -236.505, 68.5947, 0.28 ) }
    dend_27 { pt3dadd( -19.2861, -237.211, 69.2711, 1.11 ) }
    dend_27 { pt3dadd( -16.9731, -240.788, 72.665, 0.28 ) }
    dend_27 { pt3dadd( -16.5919, -241.357, 73.1777, 0.56 ) }
    dend_27 { pt3dadd( -15.3807, -243.14, 74.67, 0.28 ) }
    dend_27 { pt3dadd( -14.7625, -244.112, 75.3898, 1.67 ) }
    dend_27 { pt3dadd( -10.7669, -250.905, 79.729, 0.28 ) }
    dend_27 { pt3dadd( -10.3768, -251.681, 80.1471, 1.11 ) }
    dend_27 { pt3dadd( -8.26428, -256.726, 82.4218, 0.28 ) }
    dend_27 { pt3dadd( -7.94152, -257.704, 82.8074, 0.56 ) }
    dend_27 { pt3dadd( -6.96012, -261.674, 84.1093, 0.28 ) }
    dend_27 { pt3dadd( -6.77881, -262.992, 84.4522, 1.39 ) }
    dend_27 { pt3dadd( -6.59743, -267.64, 85.4558, 0.28 ) }
    dend_27 { pt3dadd( -6.57839, -268.536, 85.6476, 0.83 ) }
    dend_27 { pt3dadd( -6.56514, -271.225, 86.1984, 0.28 ) }
    dend_27 { pt3dadd( -6.58474, -272.777, 86.5469, 0.56 ) }
    dend_27 { pt3dadd( -6.91899, -282.629, 88.9282, 0.28 ) }
    dend_27 { pt3dadd( -7.08915, -285.229, 89.5899, 1.39 ) }
    dend_27 { pt3dadd( -7.44256, -288.857, 90.5506, 0.28 ) }
    dend_27 { pt3dadd( -7.57371, -289.918, 90.8355, 0.56 ) }
    dend_27 { pt3dadd( -7.86701, -292.14, 91.3903, 0.28 ) }
    dend_27 { pt3dadd( -7.95983, -292.799, 91.559, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_27 { pt3dadd( -9.37402, -301.957, 93.841, 0.28 ) }
    dend_27 { pt3dadd( -9.50426, -302.836, 94.0662, 1.11 ) }
    dend_27 { pt3dadd( -10.7032, -311.059, 96.1927, 0.28 ) }
    dend_27 { pt3dadd( -10.999, -313.258, 96.7653, 1.11 ) }
    dend_27 { pt3dadd( -11.4586, -317.171, 97.7734, 0.28 ) }
    dend_27 { pt3dadd( -11.5729, -318.239, 98.0581, 0.56 ) }
    dend_27 { pt3dadd( -11.9096, -322.744, 99.3626, 0.28 ) }
    dend_27 { pt3dadd( -11.9813, -323.803, 99.6905, 0.56 ) }
    // Section: dend_25, id: dend_25, parent: dend_23 (entry count 8/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( -12.5679, -76.7972, 63.3194, 1.67 ) }
    dend_25 { pt3dadd( -13.3173, -79.4423, 64.6815, 1.67 ) }
    dend_25 { pt3dadd( -14.4324, -82.9311, 66.5905, 0.56 ) }
    dend_25 { pt3dadd( -14.7961, -84.1782, 67.3186, 0.83 ) }
    dend_25 { pt3dadd( -15.247, -85.8972, 68.4199, 0.28 ) }
    dend_25 { pt3dadd( -15.4508, -86.6432, 68.9321, 0.56 ) }
    dend_25 { pt3dadd( -15.9316, -88.4692, 70.2191, 0.28 ) }
    dend_25 { pt3dadd( -16.1297, -89.1716, 70.7891, 0.56 ) }
    dend_25 { pt3dadd( -16.7375, -91.5428, 72.6312, 0.28 ) }
    dend_25 { pt3dadd( -17.1211, -93.1554, 73.7832, 1.11 ) }
    dend_25 { pt3dadd( -17.5015, -94.8557, 74.8135, 0.56 ) }
    dend_25 { pt3dadd( -17.9018, -97.0615, 75.9712, 0.28 ) }
    dend_25 { pt3dadd( -18.0707, -98.0799, 76.44, 0.56 ) }
    dend_25 { pt3dadd( -18.6571, -101.707, 78.0036, 0.28 ) }
    dend_25 { pt3dadd( -18.8289, -102.688, 78.374, 1.39 ) }
    dend_25 { pt3dadd( -19.2519, -105.305, 79.2202, 1.67 ) }
    dend_25 { pt3dadd( -19.7475, -109.213, 80.3432, 0.28 ) }
    dend_25 { pt3dadd( -19.851, -110.065, 80.5655, 0.83 ) }
    // Section: dend_24, id: dend_24, parent: dend_23 (entry count 26/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( -12.5679, -76.7972, 63.3194, 0.28 ) }
    dend_24 { pt3dadd( -11.5866, -77.6101, 63.7168, 0.28 ) }
    dend_24 { pt3dadd( -10.3533, -78.6317, 64.2162, 1.11 ) }
    dend_24 { pt3dadd( -6.46676, -81.8512, 65.7902, 0.28 ) }
    dend_24 { pt3dadd( -6.27312, -82.0116, 65.8686, 0.83 ) }
    dend_24 { pt3dadd( -5.09347, -82.9888, 66.3463, 0.28 ) }
    dend_24 { pt3dadd( -5.08652, -82.9945, 66.3491, 0.83 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 33/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 34.9607, -57.9565, -11.2099, 0.83 ) }
    dend_19 { pt3dadd( 37.8188, -58.5949, -11.9318, 0.83 ) }
    dend_19 { pt3dadd( 40.4936, -59.159, -12.4211, 0.56 ) }
    dend_19 { pt3dadd( 43.3175, -59.787, -12.8322, 0.56 ) }
    dend_19 { pt3dadd( 46.653, -60.5683, -13.1335, 0.28 ) }
    dend_19 { pt3dadd( 47.8488, -60.8634, -13.1936, 0.28 ) }
    dend_19 { pt3dadd( 50.2584, -61.4675, -13.2209, 0.56 ) }
    dend_19 { pt3dadd( 52.2895, -62.0216, -13.0737, 0.28 ) }
    dend_19 { pt3dadd( 53.2265, -62.2806, -12.9601, 0.56 ) }
    dend_19 { pt3dadd( 55.3933, -62.9114, -12.7375, 0.28 ) }
    dend_19 { pt3dadd( 56.7233, -63.3639, -12.6266, 0.83 ) }
    dend_19 { pt3dadd( 58.7522, -63.9935, -12.4356, 0.28 ) }
    dend_19 { pt3dadd( 60.072, -64.3499, -12.258, 0.56 ) }
    dend_19 { pt3dadd( 60.4916, -64.4448, -12.2054, 0.28 ) }
    dend_19 { pt3dadd( 62.8303, -64.9125, -11.842, 0.56 ) }
    dend_19 { pt3dadd( 65.751, -65.3885, -11.2529, 0.28 ) }
    dend_19 { pt3dadd( 70.3603, -65.6581, -10.2635, 0.83 ) }
    dend_19 { pt3dadd( 73.5179, -65.5075, -9.6163, 0.28 ) }
    dend_19 { pt3dadd( 74.1871, -65.4099, -9.47978, 0.56 ) }
    dend_19 { pt3dadd( 77.2392, -64.6997, -8.93642, 0.28 ) }
    dend_19 { pt3dadd( 79.4469, -63.979, -8.62128, 0.83 ) }
    dend_19 { pt3dadd( 84.3948, -61.8686, -8.25347, 0.28 ) }
    dend_19 { pt3dadd( 86.8456, -60.5806, -8.31755, 1.11 ) }
    dend_19 { pt3dadd( 88.5307, -59.6015, -8.46447, 0.56 ) }
    dend_19 { pt3dadd( 89.8607, -58.7706, -8.63236, 0.28 ) }
    dend_19 { pt3dadd( 90.9227, -58.0762, -8.83102, 0.83 ) }
    dend_19 { pt3dadd( 92.4246, -57.1281, -9.19334, 0.28 ) }
    dend_19 { pt3dadd( 94.3667, -55.9942, -9.6674, 0.83 ) }
    dend_19 { pt3dadd( 98.2016, -53.9408, -10.6894, 0.28 ) }
    dend_19 { pt3dadd( 100.341, -52.8268, -11.305, 0.28 ) }
    dend_19 { pt3dadd( 101.689, -52.1235, -11.7197, 0.56 ) }
    dend_19 { pt3dadd( 104.798, -50.5186, -12.6846, 0.83 ) }
    dend_19 { pt3dadd( 107.255, -49.3023, -13.4618, 0.28 ) }
    dend_19 { pt3dadd( 109.007, -48.4595, -14.0411, 0.56 ) }
    dend_19 { pt3dadd( 116.655, -44.6715, -17.0321, 0.28 ) }
    dend_19 { pt3dadd( 117.726, -44.166, -17.4378, 1.67 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 69/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 34.9607, -57.9565, -11.2099, 0.56 ) }
    dend_18 { pt3dadd( 35.6924, -60.564, -12.5316, 0.56 ) }
    dend_18 { pt3dadd( 36.2235, -62.7896, -13.6309, 0.56 ) }
    dend_18 { pt3dadd( 36.6944, -64.9277, -14.546, 0.56 ) }
    dend_18 { pt3dadd( 37.4853, -68.7006, -16.3472, 0.56 ) }
    dend_18 { pt3dadd( 37.7123, -69.7833, -16.8641, 0.28 ) }
    dend_18 { pt3dadd( 37.9538, -70.9356, -17.4143, 0.28 ) }
    dend_18 { pt3dadd( 38.0168, -71.4003, -17.6402, 0.56 ) }
    dend_18 { pt3dadd( 38.0557, -73.1948, -18.5082, 0.28 ) }
    dend_18 { pt3dadd( 38.0776, -76.6661, -19.9749, 0.83 ) }
    dend_18 { pt3dadd( 38.6608, -84.989, -23.9425, 0.83 ) }
    // Section: dend_16, id: dend_16, parent: dend_14 (entry count 80/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 57.8297, -166.636, -21.0475, 0.56 ) }
    dend_16 { pt3dadd( 60.3036, -175.39, -21.8631, 0.56 ) }
    dend_16 { pt3dadd( 62.4934, -183.886, -24.3234, 0.56 ) }
    dend_16 { pt3dadd( 66.6767, -191.352, -27.3384, 0.56 ) }
    dend_16 { pt3dadd( 71.2344, -198.167, -31.1639, 0.56 ) }
    dend_16 { pt3dadd( 75.6997, -205.713, -33.5252, 0.56 ) }
    dend_16 { pt3dadd( 80.1375, -213.638, -34.1535, 0.56 ) }
    dend_16 { pt3dadd( 85.8288, -220.628, -35.1629, 0.56 ) }
    dend_16 { pt3dadd( 92.4972, -226.739, -35.1998, 0.56 ) }
    dend_16 { pt3dadd( 100.127, -231.478, -34.5254, 0.56 ) }
    dend_16 { pt3dadd( 108.104, -234.918, -32.2522, 0.56 ) }
    dend_16 { pt3dadd( 115.996, -237.364, -28.7816, 0.56 ) }
    dend_16 { pt3dadd( 123.664, -240.054, -24.9914, 0.56 ) }
    dend_16 { pt3dadd( 131.082, -244.083, -21.8832, 0.56 ) }
    dend_16 { pt3dadd( 138.228, -248.32, -18.4153, 0.56 ) }
    dend_16 { pt3dadd( 145.314, -253.725, -16.9713, 0.56 ) }
    dend_16 { pt3dadd( 153.449, -256.913, -14.9228, 0.56 ) }
    // Section: dend_15, id: dend_15, parent: dend_14 (entry count 97/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 57.8297, -166.636, -21.0475, 0.56 ) }
    dend_15 { pt3dadd( 59.7769, -173.242, -21.5203, 0.56 ) }
    dend_15 { pt3dadd( 60.8096, -180.077, -21.6336, 0.56 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_15 { pt3dadd( 61.4936, -186.864, -20.4896, 0.56 ) }
    dend_15 { pt3dadd( 61.2062, -193.633, -19.1171, 0.56 ) }
    dend_15 { pt3dadd( 60.4221, -199.916, -16.3824, 0.56 ) }
    dend_15 { pt3dadd( 58.9286, -206.098, -13.7348, 0.56 ) }
    // Section: dend_11, id: dend_11, parent: dend_9 (entry count 4/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 5.86964, 83.9164, -6.74864, 0.56 ) }
    dend_11 { pt3dadd( 6.74176, 84.9863, -7.88158, 0.56 ) }
    dend_11 { pt3dadd( 7.35968, 85.7444, -8.68429, 0.56 ) }
    dend_11 { pt3dadd( 8.49336, 87.1351, -10.157, 0.83 ) }
    dend_11 { pt3dadd( 12.4985, 90.7333, -13.4728, 0.83 ) }
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 9/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 5.86964, 83.9164, -6.74864, 0.56 ) }
    dend_10 { pt3dadd( 3.42475, 84.8706, -7.42236, 0.56 ) }
    dend_10 { pt3dadd( -4.94906, 87.6886, -10.8448, 0.56 ) }
    // Section: dend_30, id: dend_30, parent: dend_28 (entry count 12/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( -10.9131, -59.2133, -5.06345, 0.83 ) }
    dend_30 { pt3dadd( -10.8441, -61.1513, -6.29743, 0.83 ) }
    dend_30 { pt3dadd( -10.7771, -62.9322, -7.42364, 0.83 ) }
    dend_30 { pt3dadd( -10.7096, -63.8533, -7.98727, 0.83 ) }
    dend_30 { pt3dadd( -10.4972, -65.8541, -9.25793, 0.56 ) }
    dend_30 { pt3dadd( -10.392, -66.6158, -9.78176, 0.83 ) }
    dend_30 { pt3dadd( -10.1077, -68.6755, -11.198, 0.56 ) }
    dend_30 { pt3dadd( -9.86388, -70.285, -12.3384, 0.56 ) }
    dend_30 { pt3dadd( -9.4141, -72.523, -14.0618, 0.56 ) }
    dend_30 { pt3dadd( -8.96616, -74.541, -15.6689, 0.56 ) }
    dend_30 { pt3dadd( -8.51764, -76.33, -17.0505, 0.56 ) }
    dend_30 { pt3dadd( -8.5355, -83.0438, -20.6377, 0.56 ) }
    // Section: dend_29, id: dend_29, parent: dend_28 (entry count 24/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( -10.9131, -59.2133, -5.06345, 0.83 ) }
    dend_29 { pt3dadd( -11.6654, -60.4033, -5.62388, 0.83 ) }
    dend_29 { pt3dadd( -12.6705, -61.9535, -6.50344, 0.83 ) }
    dend_29 { pt3dadd( -14.546, -64.7597, -8.26598, 0.83 ) }
    dend_29 { pt3dadd( -16.6504, -67.8294, -10.2732, 0.83 ) }
    dend_29 { pt3dadd( -17.9834, -69.8721, -11.585, 0.83 ) }
    dend_29 { pt3dadd( -19.2586, -71.849, -12.8678, 0.83 ) }
    dend_29 { pt3dadd( -20.4136, -73.776, -14.1805, 0.83 ) }
    dend_29 { pt3dadd( -22.0313, -76.5424, -16.1449, 0.56 ) }
    dend_29 { pt3dadd( -22.737, -77.7728, -17.0497, 0.56 ) }
    dend_29 { pt3dadd( -24.3142, -80.0924, -18.7083, 0.56 ) }
    dend_29 { pt3dadd( -25.8849, -81.9495, -20.0076, 0.56 ) }
    dend_29 { pt3dadd( -28.1955, -84.3782, -21.6965, 0.56 ) }
    dend_29 { pt3dadd( -30.734, -86.6317, -23.2036, 0.56 ) }
    dend_29 { pt3dadd( -32.5975, -87.9614, -24.1207, 0.56 ) }
    dend_29 { pt3dadd( -37.2384, -90.5719, -26.0417, 0.56 ) }
    dend_29 { pt3dadd( -40.9563, -92.2482, -27.4298, 0.56 ) }
    dend_29 { pt3dadd( -43.3789, -93.1982, -28.1854, 0.56 ) }
    dend_29 { pt3dadd( -47.5928, -94.6594, -29.2934, 0.56 ) }
    dend_29 { pt3dadd( -50.0041, -95.4898, -29.8267, 0.56 ) }
    dend_29 { pt3dadd( -53.0028, -96.4561, -30.3177, 0.56 ) }
    dend_29 { pt3dadd( -54.9764, -97.0626, -30.5323, 0.56 ) }
    dend_29 { pt3dadd( -57.4568, -97.833, -30.6035, 0.56 ) }
    dend_29 { pt3dadd( -59.5614, -98.466, -30.5787, 0.56 ) }
    dend_29 { pt3dadd( -61.258, -98.9378, -30.6098, 0.56 ) }
    dend_29 { pt3dadd( -64.1863, -99.6323, -30.6144, 0.56 ) }
    dend_29 { pt3dadd( -67.9606, -100.308, -30.5539, 0.56 ) }
    dend_29 { pt3dadd( -69.2798, -100.452, -30.5627, 0.56 ) }
    dend_29 { pt3dadd( -72.5978, -100.592, -30.7056, 0.56 ) }
    dend_29 { pt3dadd( -75.9405, -100.404, -30.6658, 0.56 ) }
    dend_29 { pt3dadd( -80.0275, -99.892, -30.5477, 0.56 ) }
    dend_29 { pt3dadd( -82.035, -99.5792, -30.4751, 0.56 ) }
    dend_29 { pt3dadd( -85.3989, -98.9588, -30.3038, 0.28 ) }
    dend_29 { pt3dadd( -87.6003, -98.5715, -30.3098, 1.39 ) }
    dend_29 { pt3dadd( -95.3345, -97.217, -30.6628, 0.28 ) }
    dend_29 { pt3dadd( -96.8868, -96.9483, -30.7424, 1.67 ) }
    dend_29 { pt3dadd( -104.023, -95.6639, -31.3272, 0.28 ) }
    dend_29 { pt3dadd( -105.4, -95.4402, -31.4721, 1.39 ) }
    dend_29 { pt3dadd( -114.301, -94.1945, -32.6586, 0.28 ) }
    dend_29 { pt3dadd( -115.817, -94.0551, -32.9944, 0.56 ) }
    // Section: dend_21, id: dend_21, parent: dend_19 (entry count 64/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 117.726, -44.166, -17.4378, 0.28 ) }
    dend_21 { pt3dadd( 118.98, -43.148, -16.56, 0.28 ) }
    dend_21 { pt3dadd( 120.376, -42.1405, -15.6697, 0.56 ) }
    dend_21 { pt3dadd( 122.221, -40.8331, -14.5264, 0.28 ) }
    dend_21 { pt3dadd( 123.556, -39.9148, -13.7629, 0.83 ) }
    dend_21 { pt3dadd( 125.28, -38.7274, -12.832, 0.28 ) }
    dend_21 { pt3dadd( 125.781, -38.3927, -12.5857, 1.11 ) }
    dend_21 { pt3dadd( 127.793, -37.1507, -11.703, 0.56 ) }
    dend_21 { pt3dadd( 129.457, -36.1553, -11.1005, 0.28 ) }
    dend_21 { pt3dadd( 130.453, -35.5533, -10.7898, 0.28 ) }
    dend_21 { pt3dadd( 132.399, -34.3397, -10.1667, 0.83 ) }
    dend_21 { pt3dadd( 135.357, -32.4357, -9.18923, 0.28 ) }
    dend_21 { pt3dadd( 135.739, -32.183, -9.05585, 0.83 ) }
    dend_21 { pt3dadd( 138.813, -30.0855, -7.87206, 0.28 ) }
    dend_21 { pt3dadd( 140.198, -29.1028, -7.25645, 0.83 ) }
    dend_21 { pt3dadd( 141.791, -27.9085, -6.45303, 0.28 ) }
    dend_21 { pt3dadd( 142.134, -27.6358, -6.26147, 0.83 ) }
    dend_21 { pt3dadd( 143.679, -26.2754, -5.30429, 0.28 ) }
    dend_21 { pt3dadd( 145.081, -24.7413, -4.53005, 1.39 ) }
    dend_21 { pt3dadd( 147.152, -22.0522, -3.55342, 0.28 ) }
    dend_21 { pt3dadd( 147.457, -21.6198, -3.45124, 0.83 ) }
    dend_21 { pt3dadd( 148.696, -19.7202, -3.17642, 0.28 ) }
    dend_21 { pt3dadd( 149.43, -18.4964, -3.06982, 1.67 ) }
    dend_21 { pt3dadd( 152.786, -12.4409, -2.88628, 0.28 ) }
    dend_21 { pt3dadd( 153.356, -11.3621, -2.89296, 1.39 ) }
    dend_21 { pt3dadd( 155.561, -7.05492, -3.04321, 0.28 ) }
    dend_21 { pt3dadd( 156.093, -5.95968, -3.09991, 1.11 ) }
    dend_21 { pt3dadd( 157.498, -2.93766, -3.3301, 0.28 ) }
    dend_21 { pt3dadd( 157.644, -2.62432, -3.35494, 0.83 ) }
    dend_21 { pt3dadd( 158.305, -1.20774, -3.4648, 0.28 ) }
    dend_21 { pt3dadd( 159.1, 0.516731, -3.56993, 0.83 ) }
    dend_21 { pt3dadd( 161.254, 5.3429, -3.78867, 0.28 ) }
    dend_21 { pt3dadd( 162.031, 7.0842, -3.79555, 1.11 ) }
    dend_21 { pt3dadd( 165.273, 14.6103, -3.41936, 0.28 ) }
    dend_21 { pt3dadd( 165.752, 15.7241, -3.29245, 1.11 ) }
    dend_21 { pt3dadd( 166.776, 18.1515, -2.86055, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_21 { pt3dadd( 167.27, 19.3806, -2.49624, 1.11 ) }
    dend_21 { pt3dadd( 168.048, 21.5042, -1.49589, 0.28 ) }
    dend_21 { pt3dadd( 168.631, 23.6149, -0.23509, 1.11 ) }
    dend_21 { pt3dadd( 168.903, 25.3768, 1.15246, 0.28 ) }
    dend_21 { pt3dadd( 168.97, 25.9749, 1.63109, 0.56 ) }
    dend_21 { pt3dadd( 169.201, 28.4589, 3.62459, 0.28 ) }
    dend_21 { pt3dadd( 169.337, 29.8752, 4.74326, 1.39 ) }
    dend_21 { pt3dadd( 169.478, 31.0917, 5.67529, 0.28 ) }
    dend_21 { pt3dadd( 169.676, 32.3077, 6.61129, 0.83 ) }
    dend_21 { pt3dadd( 169.712, 32.5456, 6.79302, 1.11 ) }
    dend_21 { pt3dadd( 170.166, 34.6111, 8.442, 0.28 ) }
    dend_21 { pt3dadd( 170.287, 34.9741, 8.74808, 0.56 ) }
    dend_21 { pt3dadd( 171.197, 36.9543, 10.5472, 0.28 ) }
    dend_21 { pt3dadd( 171.504, 37.4961, 11.094, 0.83 ) }
    // Section: dend_20, id: dend_20, parent: dend_19 (entry count 14/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 117.726, -44.166, -17.4378, 0.28 ) }
    dend_20 { pt3dadd( 124.088, -44.5497, -21.0937, 0.28 ) }
    dend_20 { pt3dadd( 124.639, -44.5635, -21.5002, 0.56 ) }
    dend_20 { pt3dadd( 126.536, -44.5652, -23.0589, 0.28 ) }
    dend_20 { pt3dadd( 127.536, -44.4924, -24.0045, 0.56 ) }
    dend_20 { pt3dadd( 128.938, -44.3256, -25.4089, 0.28 ) }
    dend_20 { pt3dadd( 129.965, -44.1533, -26.5163, 0.56 ) }
    dend_20 { pt3dadd( 131.687, -43.584, -28.6677, 0.28 ) }
    dend_20 { pt3dadd( 132.589, -43.2085, -29.6817, 0.83 ) }
    dend_20 { pt3dadd( 135.874, -41.6715, -32.9654, 0.28 ) }
    dend_20 { pt3dadd( 136.207, -41.5068, -33.2647, 0.56 ) }
    dend_20 { pt3dadd( 137.86, -40.6945, -34.6793, 0.28 ) }
    dend_20 { pt3dadd( 140.142, -39.5327, -36.5, 0.83 ) }
    dend_20 { pt3dadd( 147.122, -35.9138, -41.6191, 0.28 ) }
    dend_20 { pt3dadd( 148.464, -35.2023, -42.5648, 0.28 ) }
    dend_20 { pt3dadd( 149.707, -34.5561, -43.3462, 0.83 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_12, dend_5, dend_0, dend_22, dend_13, dend_7, dend_6, dend_4, dend_1, dend_26, dend_23, dend_17, dend_14, dend_9, dend_8, dend_3, dend_2, dend_28, dend_27, dend_25, dend_24, dend_19, dend_18, dend_16, dend_15, dend_11, dend_10, dend_30, dend_29, dend_21, dend_20]}
    ModelViewParmSubset_2 = new SectionList()
    dend_12 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_30 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_12, dend_5, dend_0, dend_22, dend_13, dend_7, dend_6, dend_4, dend_1, dend_26, dend_23, dend_17, dend_14, dend_9, dend_8, dend_3, dend_2, dend_28, dend_27, dend_25, dend_24, dend_19, dend_18, dend_16, dend_15, dend_11, dend_10, dend_30, dend_29, dend_21, dend_20]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_0 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_7 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_6 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_1 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_23 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_14 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_8 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_3 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_2 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_27 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_19 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_16 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_15 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_29 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_21 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_20 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_12 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_5 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_22 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_26 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_13 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_28 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_17 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_4 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_9 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_30 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_11 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_10 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_18 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_24 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_25 OneSecGrp_SectionRef_23.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_12, dend_12, dend_12, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_26, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_17, dend_17, dend_17, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_11, dend_11, dend_11, dend_11, dend_10, dend_10, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_26 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.999855  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.042115  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0012239999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.001693  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.386953  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 8.0E-6  // units: S cm-2
        e_pas_nml2 = -63.854015  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.5399997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.039862998  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 5.2299997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.0054459996  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.503893  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-4  // units: S cm-2
        e_pas_nml2 = -67.1289  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 4.78E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.15074699  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009017  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 4.0E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.0032419998  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 1.74E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bNAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bNAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bNAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bNAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_0 nseg = 3
    dend_7 nseg = 3
    dend_6 nseg = 11
    dend_1 nseg = 7
    dend_23 nseg = 3
    dend_14 nseg = 7
    dend_8 nseg = 11
    dend_3 nseg = 3
    dend_2 nseg = 13
    dend_27 nseg = 15
    dend_19 nseg = 5
    dend_16 nseg = 7
    dend_15 nseg = 3
    dend_29 nseg = 7
    dend_21 nseg = 5
    dend_20 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bNAC219_L23_BTC_f83ba90238_0_0


