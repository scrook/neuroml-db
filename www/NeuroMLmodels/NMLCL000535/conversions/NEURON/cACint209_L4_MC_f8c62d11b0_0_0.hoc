// Cell: cACint209_L4_MC_f8c62d11b0_0_0
/*
{
  "id" : "cACint209_L4_MC_f8c62d11b0_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-0.511903, -9.88904, 0.0703489, 2.34591", "-0.41677, -8.88293, 0.0661135, 3.85245", "-0.321636, -7.87683, 0.061878, 5.28887", "-0.226503, -6.87073, 0.0576426, 6.89192", "-0.131369, -5.86462, 0.0534072, 8.24306", "-0.0362354, -4.85852, 0.0491717, 8.92174", "0.0588982, -3.85242, 0.0449363, 9.44137", "0.154032, -2.84631, 0.0407009, 9.86083", "0.249165, -1.84021, 0.0364654, 10.0508", "0.344299, -0.834108, 0.03223, 10.2369", "0.439433, 0.171995, 0.0279946, 10.423", "0.534566, 1.1781, 0.0237591, 10.4521", "0.6297, 2.1842, 0.0195237, 10.157", "0.724833, 3.19031, 0.0152883, 9.86184", "0.819967, 4.19641, 0.0110528, 9.49883", "0.915101, 5.20251, 0.00681741, 9.03118", "1.01023, 6.20861, 0.00258198, 8.56352", "1.10537, 7.21472, -0.00165345, 8.09586", "1.2005, 8.22082, -0.00588889, 7.15819", "1.29564, 9.22692, -0.0101243, 4.92366", "1.39077, 10.233, -0.0143598, 3.77085" ]
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "4.21382, 9.48026, 3.26771, 0.55", "4.6934, 10.8025, 3.9647, 0.55", "5.49824, 12.991, 4.87081, 0.83", "6.62237, 15.664, 5.81353, 0.83", "8.06029, 18.4917, 6.78488, 0.83", "9.55996, 21.1447, 7.65363, 0.83", "11.1201, 23.8097, 8.47388, 0.83", "12.3606, 25.7221, 9.08797, 0.83", "13.5674, 27.3571, 9.65624, 0.83", "15.8452, 30.197, 10.5902, 0.83", "17.0101, 31.4528, 11.0464, 0.28", "18.1668, 32.5796, 11.5223, 0.83", "20.2405, 34.5323, 12.5459, 0.55", "21.7848, 35.9904, 13.3271, 0.28", "22.8367, 37.0326, 13.8483, 0.83", "24.313, 38.569, 14.5067, 0.55", "24.7372, 38.9938, 14.668, 0.83", "25.9526, 40.226, 15.0154, 0.28", "26.7937, 41.1271, 15.1771, 0.83", "28.4267, 42.8855, 15.6098, 0.55", "29.1631, 43.6577, 15.877, 0.55", "30.5197, 45.0241, 16.4851, 0.55", "32.2351, 46.5919, 17.344, 0.55", "33.6113, 47.7328, 18.083, 0.83", "36.1902, 49.6714, 19.8146, 0.55", "37.0454, 50.2469, 20.4533, 0.28", "38.0706, 50.8512, 21.2877, 0.55", "39.7105, 51.753, 22.6971, 0.28", "40.7417, 52.2326, 23.653, 0.55", "43.9287, 53.6675, 26.7071, 0.28", "45.0935, 54.1831, 27.8079, 0.83", "46.8705, 55.0553, 29.591, 0.28", "47.8121, 55.596, 30.7247, 0.55", "50.0252, 57.0665, 33.6667, 0.55", "50.6427, 57.501, 34.5273, 0.55", "51.3046, 58.0087, 35.431, 0.55", "52.5199, 59.0206, 37.0961, 0.83", "56.3009, 62.0351, 41.7833, 0.28", "57.2021, 62.68, 42.8851, 0.55", "58.6502, 63.6093, 44.5339, 0.28", "59.6754, 64.1728, 45.6535, 0.83", "60.9744, 64.7813, 46.9767, 0.55", "62.8215, 65.4832, 48.6139, 0.55", "66.4654, 66.679, 51.448, 0.55", "68.0882, 67.1822, 52.7585, 0.28", "68.7478, 67.3677, 53.3043, 0.55", "70.491, 67.829, 54.9282, 0.28", "70.9138, 67.9573, 55.3596, 0.55", "72.4512, 68.5761, 57.1237, 0.28", "72.8093, 68.7419, 57.5212, 0.28", "73.6572, 69.1605, 58.6745, 0.55", "75.3753, 70.0997, 61.3303, 0.28", "75.7819, 70.3651, 62.06, 0.55", "77.2003, 71.4141, 64.8655, 0.28", "77.5079, 71.7006, 65.5284, 0.55", "78.9583, 73.2617, 68.446, 0.28", "79.3203, 73.7184, 69.1061, 0.55", "80.796, 75.6497, 71.0798, 0.28", "80.9858, 75.9218, 71.3151, 0.55", "81.8702, 77.3439, 72.2953, 0.28", "83.1956, 79.4858, 73.6407, 0.28", "83.8661, 80.5913, 74.221, 0.83", "85.5836, 83.3375, 75.6223, 0.55", "87.7568, 86.6947, 77.1853, 0.55", "88.3524, 87.5761, 77.6351, 0.28", "88.7815, 88.1866, 78.0147, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000068561369555,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "0.573824, -9.16974, 0.64771, 1.66", "1.51669, -11.1315, 1.3178, 1.66", "3.41616, -15.0837, 2.66776, 1.38", "4.77172, -17.9042, 3.63115, 1.66" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000068561369555
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "1.58382, 10.8102, -5.68229, 2.22", "2.34095, 14.6149, -5.97281, 2.22", "3.22934, 19.0791, -6.3137, 2.22", "4.19391, 23.9261, -6.68382, 2.22" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000068561369555
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "1.39077, 10.233, -0.0143598, 0.83", "2.80282, 25.1664, -0.0143598, 0.83", "4.21487, 40.0998, -0.0143598, 0.83" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "88.7815, 88.1866, 78.0147, 0.55", "89.4955, 88.8335, 80.0148, 0.55", "89.883, 89.3357, 82.158, 0.55", "90.4633, 90.6836, 88.3438, 0.28", "90.5205, 90.8164, 88.9529, 0.55", "91.0229, 91.9832, 94.3076, 0.28", "91.0485, 92.0426, 94.5802, 0.55", "91.2868, 93.8173, 103.604, 0.55", "91.2277, 94.1199, 105.539, 0.83" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "88.7815, 88.1866, 78.0147, 0.28", "88.5395, 90.2023, 78.453, 0.28", "88.5069, 90.474, 78.5121, 0.55", "88.2522, 92.5954, 78.9734, 0.28", "88.2205, 92.859, 79.0307, 0.55", "88.0214, 94.517, 79.3912, 0.28", "87.9574, 95.0508, 79.5073, 0.55" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "4.77172, -17.9042, 3.63115, 0.83", "6.10329, -19.8545, 5.54598, 0.83", "7.73167, -21.7311, 7.38499, 0.83", "8.96487, -23.053, 8.57632, 0.83", "11.0556, -25.2645, 10.5198, 0.83", "16.2714, -30.1994, 14.7337, 0.83", "17.1663, -31.0536, 15.4061, 0.83", "20.6014, -34.1366, 17.7047, 0.83", "21.9287, -35.2048, 18.5596, 0.83", "25.279, -37.6753, 20.6065, 0.83", "29.9504, -40.8876, 23.263, 0.83", "32.7109, -42.7614, 24.7768, 0.83", "36.5487, -45.311, 27.0274, 0.83", "40.6167, -47.9477, 29.5384, 0.83", "43.8984, -49.9525, 31.657, 0.83", "47.359, -51.9356, 33.7585, 0.83", "49.7185, -53.2707, 35.1918, 0.55", "51.0486, -53.9616, 35.9053, 0.55", "52.88, -54.9591, 36.7113, 0.55", "54.8575, -56.181, 37.1107, 0.55", "57.5099, -57.9305, 37.1785, 0.28", "59.3322, -59.0744, 36.8751, 0.55", "60.8149, -59.975, 36.4403, 0.28", "61.2765, -60.2469, 36.2769, 0.55", "63.6215, -61.6082, 35.272, 0.55", "65.2433, -62.6276, 34.3872, 0.55", "66.5252, -63.4712, 33.7029, 0.83", "67.7375, -64.3024, 33.0019, 0.55", "68.3161, -64.7151, 32.6686, 0.83", "71.2034, -66.9417, 30.8607, 0.55", "72.7239, -68.249, 29.825, 0.83", "73.9404, -69.3608, 29.063, 0.55", "74.876, -70.2736, 28.5566, 0.83", "75.7022, -71.1103, 28.1668, 0.83", "77.8142, -73.2909, 27.2931, 0.55", "79.411, -74.9029, 26.5836, 0.83", "80.8442, -76.3082, 25.9032, 0.55", "81.6013, -77.0629, 25.4933, 0.55", "82.0028, -77.4682, 25.2577, 0.55", "82.5019, -77.9715, 24.9375, 0.83", "85.5944, -80.8023, 22.8277, 0.28", "85.8364, -80.9929, 22.6021, 0.83" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "4.77172, -17.9042, 3.63115, 0.83", "2.94647, -22.8511, 1.14177, 0.83", "1.71341, -26.1931, -0.539949, 0.83", "1.08307, -27.9015, -1.39964, 0.83" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "4.19391, 23.9261, -6.68382, 0.83", "7.08509, 27.7987, -6.09689, 0.83", "10.3551, 32.1624, -5.4733, 0.83", "14.5578, 37.7779, -4.68501, 0.83", "16.3234, 40.1146, -4.34671, 0.83", "18.2343, 42.6997, -3.97253, 0.83", "19.9741, 45.0661, -3.63551, 0.83", "21.4817, 47.191, -3.46842, 0.83", "23.4365, 49.9898, -3.23985, 0.83", "24.3118, 51.1627, -3.14087, 0.55", "25.2103, 52.3591, -3.05715, 0.55", "26.5385, 54.0542, -2.90785, 0.55", "28.3481, 56.436, -2.69107, 1.66", "29.549, 57.9825, -2.58796, 0.55", "30.3996, 59.1042, -2.54964, 0.28", "31.3708, 60.3886, -2.53069, 0.55", "32.8684, 62.323, -2.48307, 0.28", "34.1212, 64.0085, -2.42609, 1.38", "35.5878, 66.0434, -2.32882, 0.55", "36.5778, 67.4021, -2.28082, 0.55", "37.7869, 69.1996, -2.26932, 0.55", "39.0138, 71.0569, -2.36344, 0.55", "46.5111, 77.6741, -2.29631, 0.55", "54.1326, 84.1219, -1.71536, 0.55", "61.2935, 90.6949, 0.633694, 0.55", "68.4511, 97.6413, 1.35249, 0.55", "74.9758, 105.199, 0.795789, 0.55", "80.6718, 113.154, -1.27146, 0.55", "88.0757, 119.59, -3.2096, 0.55", "96.1375, 125.331, -4.64346, 0.55" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "4.19391, 23.9261, -6.68382, 2.22", "3.9566, 25.3914, -5.72344, 2.22", "3.76198, 26.9075, -4.49639, 0.83", "3.62997, 29.1614, -2.60944, 1.94", "3.38403, 33.3601, 0.905821, 1.11", "3.27159, 35.2799, 2.51302, 1.11", "3.18099, 36.8266, 3.80798, 1.11", "3.06412, 41.15, 7.77332, 1.11", "3.08034, 42.6703, 9.3148, 1.11" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "4.21487, 40.0998, -0.0143598, 0.55", "5.62693, 55.0332, -0.0143598, 0.55", "7.03898, 69.9666, -0.0143598, 0.55" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "85.8364, -80.9929, 22.6021, 0.28", "87.4837, -80.8781, 21.4131, 0.28", "87.9879, -80.8887, 21.0496, 0.55", "89.9626, -81.2555, 18.9856, 0.28", "91.5005, -81.587, 17.246, 0.83", "93.6417, -82.098, 14.5437, 0.55", "93.9736, -82.1686, 14.1109, 0.55", "95.1049, -82.3848, 12.5785, 0.83", "99.8306, -83.1845, 6.53124, 0.28", "100.343, -83.2637, 5.93136, 0.55", "103.585, -83.6217, 2.45265, 0.28", "104.559, -83.6789, 1.39709, 0.55", "106.226, -83.727, -0.308104, 0.28", "109.577, -83.6992, -3.36933, 0.28", "111.143, -83.7258, -4.54888, 0.28", "112.286, -83.8152, -5.37571, 0.55", "116.845, -84.6366, -8.34699, 0.28", "117.68, -84.901, -8.89932, 0.55", "118.549, -85.3697, -9.45459, 0.55", "120.842, -87.3333, -10.7759, 0.28", "121.089, -87.6085, -10.8964, 0.55", "122.758, -89.8806, -11.3266, 0.28", "123.344, -90.8635, -11.2996, 0.55", "124.894, -93.8902, -11.0954, 0.55", "125.933, -96.2438, -10.8823, 0.28", "126.237, -97.0171, -10.7822, 0.55", "127.148, -99.3932, -10.4394, 0.28", "127.92, -101.464, -10.075, 0.55", "128.528, -103.043, -9.74762, 0.28", "128.921, -104.243, -9.41541, 0.55", "137.11, -108.411, -13.3602, 0.55" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "85.8364, -80.9929, 22.6021, 0.28", "87.5939, -82.0818, 23.6296, 0.28", "88.5896, -82.6617, 24.1502, 0.55", "91.5414, -84.2015, 23.7774, 0.28", "92.2744, -84.6033, 23.5006, 0.83", "93.4883, -85.3592, 23.0031, 0.55", "95.0448, -86.3865, 22.2291, 0.55", "95.8269, -86.9059, 21.7614, 0.83", "101.643, -91.0534, 18.0598, 0.55", "103.548, -92.5456, 16.767, 0.55", "105.589, -94.2849, 15.3837, 0.55", "107.895, -96.3717, 13.8482, 0.55", "108.605, -97.0955, 13.3986, 0.83", "110.468, -99.1427, 12.4118, 0.28", "111.316, -100.214, 12.181, 0.55", "112.431, -101.72, 11.9248, 0.28", "112.877, -102.354, 11.8652, 0.55", "113.787, -103.732, 11.9351, 0.28", "114.474, -104.768, 12.0343, 0.55", "115.445, -106.228, 12.2964, 0.55", "116.268, -107.444, 12.5948, 0.28", "116.892, -108.391, 12.898, 0.55", "117.512, -109.343, 13.2118, 0.28", "118.069, -110.255, 13.4487, 0.55", "118.953, -111.787, 13.6837, 0.28", "119.374, -112.553, 13.7464, 0.55", "119.763, -113.282, 13.7196, 0.28", "120.101, -113.988, 13.6348, 0.55", "121.0, -116.073, 13.1121, 0.28", "121.158, -116.491, 12.9561, 0.55" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "1.08307, -27.9015, -1.39964, 0.83", "-0.359051, -30.5194, 3.56758, 0.83", "-1.26336, -32.1611, 6.68236, 0.83", "-2.01754, -33.5302, 9.28005, 0.83", "-5.8177, -40.4289, 22.3692, 0.83" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "1.08307, -27.9015, -1.39964, 0.83", "2.42684, -30.4233, -0.746215, 0.83", "3.25409, -31.9757, -0.343957, 0.83", "4.70115, -34.6913, 0.359685, 0.83" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "96.1375, 125.331, -4.64346, 0.55", "104.827, 128.541, -8.41042, 0.55" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "96.1375, 125.331, -4.64346, 0.28", "98.3053, 134.202, -0.568841, 0.55" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "3.08034, 42.6703, 9.3148, 0.83", "3.48265, 43.8698, 12.5419, 0.83", "4.20172, 46.364, 18.6667, 0.55", "4.59739, 47.3798, 21.1755, 0.55", "5.45499, 48.2734, 25.0532, 0.55", "6.13159, 48.6286, 27.9975, 0.55", "6.59803, 48.7429, 29.9111, 0.55", "7.03088, 48.7348, 31.6284, 0.55", "7.7008, 48.6138, 34.0131, 0.55", "11.4665, 47.5286, 46.9447, 0.55", "15.4157, 46.0545, 59.231, 0.55", "17.4461, 45.1942, 65.009, 0.55", "18.0375, 44.9102, 66.6402, 0.55", "19.6865, 43.9969, 71.2217, 0.55", "20.3106, 43.616, 72.9389, 0.55", "21.4912, 42.7816, 75.7229, 0.28", "21.9582, 42.3913, 76.7315, 0.83", "23.805, 40.7402, 81.1365, 0.28", "24.0827, 40.4884, 81.8512, 0.83", "25.581, 38.9572, 85.9576, 0.28", "25.8602, 38.6756, 86.7892, 0.83", "27.112, 37.4678, 90.599, 0.28", "27.4854, 37.1141, 91.7509, 0.83", "28.8092, 35.9018, 95.6236, 0.28", "29.006, 35.7341, 96.1839, 0.83", "30.6514, 34.4861, 100.522, 0.28", "30.9661, 34.2806, 101.313, 0.55" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "3.08034, 42.6703, 9.3148, 0.83", "3.46953, 44.9662, 9.02638, 0.83", "3.81642, 46.5812, 8.86147, 0.83", "4.29392, 48.8857, 8.69357, 0.83", "4.67605, 51.0249, 8.56961, 0.83", "5.0037, 53.1072, 8.47443, 0.83", "5.28321, 54.8547, 8.40718, 0.83", "5.49669, 57.0092, 8.39241, 0.83", "5.79366, 60.5972, 8.38966, 0.83", "5.9635, 62.0823, 8.39688, 0.83", "6.33354, 64.8407, 8.41471, 0.83", "6.52682, 66.205, 8.42737, 0.83", "7.13071, 71.3713, 8.54358, 0.83", "7.43717, 75.0774, 8.66612, 0.83", "7.64491, 79.6029, 8.99774, 0.83", "7.66358, 82.584, 9.31611, 0.83", "7.54157, 84.5568, 9.60045, 0.83", "7.12806, 87.8264, 10.1852, 0.83", "6.51795, 90.7763, 10.9137, 0.83", "5.38276, 94.0235, 11.9573, 0.83", "4.55921, 95.9769, 12.675, 0.83", "3.78058, 98.1169, 13.5136, 0.83", "3.41079, 99.6124, 14.1665, 0.83", "2.92675, 102.561, 15.4745, 0.83", "2.57486, 105.271, 16.7686, 0.83", "2.42251, 107.829, 17.9927, 0.83", "2.312, 113.17, 20.6124, 0.83", "2.33358, 117.445, 22.6981, 0.83", "2.37704, 119.979, 23.9564, 0.83", "2.49941, 121.946, 24.9153, 0.28", "2.69853, 124.584, 26.1449, 0.55", "2.78889, 126.117, 26.8336, 0.55", "2.8537, 129.043, 28.0272, 0.55", "2.81896, 132.408, 28.8518, 0.55", "2.82651, 134.63, 29.098, 0.55", "2.72459, 137.872, 28.9868, 0.55", "2.63165, 139.547, 28.8449, 1.11", "2.49588, 142.521, 28.4796, 0.55", "2.24063, 149.256, 27.6377, 0.55", "2.12412, 151.624, 27.3637, 0.55", "1.95376, 156.473, 27.1575, 0.55", "2.0939, 159.33, 27.2475, 0.28", "2.28388, 160.992, 27.5097, 0.83", "2.77733, 163.991, 28.3261, 0.28", "3.0284, 165.224, 28.9172, 0.83", "3.78933, 168.127, 30.5601, 0.55", "4.47528, 170.097, 31.8883, 0.55", "5.49372, 172.741, 33.9287, 0.83", "6.32868, 174.796, 35.6756, 0.83", "8.01034, 178.609, 39.1404, 0.55", "8.53155, 179.698, 40.219, 0.55", "9.58893, 181.769, 42.4641, 0.83", "10.8869, 184.089, 45.043, 0.28", "11.4522, 184.903, 46.0177, 0.55", "12.512, 186.117, 47.6258, 0.28", "13.0777, 186.697, 48.4172, 0.28", "13.9124, 187.542, 49.6239, 0.55", "14.7343, 188.366, 50.7488, 0.55", "16.5663, 190.346, 53.1825, 0.55", "17.9458, 191.876, 54.9674, 0.55", "19.1196, 193.306, 56.4801, 0.83", "20.4971, 195.091, 58.1699, 0.28", "21.3575, 196.205, 59.0944, 0.83", "22.6322, 197.886, 60.2934, 0.83", "24.4625, 200.217, 61.5373, 0.28", "25.171, 201.094, 61.9212, 0.55", "25.8492, 201.842, 62.197, 0.83", "27.3356, 203.244, 62.7282, 0.28", "27.7499, 203.594, 62.8658, 0.83", "28.9873, 204.63, 63.2198, 0.28", "29.5316, 205.169, 63.3556, 0.83", "30.6357, 206.499, 63.6855, 0.28", "30.6466, 206.515, 63.69, 0.55", "31.0343, 207.177, 63.8609, 0.28", "31.6171, 208.127, 64.1212, 0.83", "32.6464, 209.79, 64.5801, 0.28", "33.3689, 210.921, 64.8999, 0.83", "35.1204, 213.668, 65.6359, 0.55", "35.6459, 214.495, 65.8195, 0.83", "36.5964, 215.938, 66.089, 0.28", "36.9606, 216.44, 66.1748, 0.83", "38.159, 217.936, 66.3782, 0.28", "39.2512, 219.31, 66.4892, 0.83", "40.4283, 220.921, 66.4865, 0.28", "40.9784, 221.746, 66.4001, 0.55", "41.871, 223.274, 66.107, 0.28", "42.191, 223.837, 65.9612, 0.55", "42.6793, 224.723, 65.6973, 0.28", "43.0479, 225.388, 65.5354, 0.83", "44.2166, 227.576, 65.1017, 0.28", "44.91, 228.864, 64.8427, 0.83", "46.196, 231.165, 64.3906, 0.28", "46.9118, 232.383, 64.1908, 0.83", "48.4787, 234.776, 63.875, 0.28", "48.811, 235.251, 63.827, 0.83", "50.3498, 237.262, 63.7477, 0.28", "50.9864, 238.034, 63.7211, 0.83", "51.9786, 239.154, 63.665, 0.28", "52.745, 239.954, 63.5951, 0.28", "53.6076, 240.82, 63.4582, 0.83", "54.5868, 241.843, 63.3001, 0.28", "54.8383, 242.144, 63.2456, 0.83", "56.2371, 243.896, 62.8559, 0.28", "56.7593, 244.584, 62.6955, 0.83", "57.7759, 246.066, 62.3559, 0.28", "58.4977, 247.254, 62.0921, 0.83", "59.5956, 249.515, 61.6636, 0.28", "59.7959, 250.034, 61.5964, 0.83", "60.176, 251.272, 61.4876, 0.28", "60.4582, 252.37, 61.4315, 0.83", "60.7925, 253.831, 61.4157, 0.83", "61.3212, 256.281, 61.4186, 0.28", "61.8893, 259.209, 61.4952, 0.28", "61.9524, 259.56, 61.5028, 0.83", "62.3688, 261.823, 61.5304, 0.28", "62.4981, 262.443, 61.5398, 0.55" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-5.8177, -40.4289, 22.3692, 0.55", "-7.12919, -40.5247, 24.2584, 0.55", "-8.21972, -40.5363, 25.6537, 0.55", "-9.28599, -40.5315, 26.7966, 0.55", "-13.7987, -40.5111, 31.6333, 0.55", "-16.6274, -40.4984, 34.6651, 0.55", "-18.226, -40.4912, 36.3784, 0.55", "-21.1672, -40.5495, 39.63, 0.55", "-28.8, -41.0574, 49.9613, 0.55" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-5.8177, -40.4289, 22.3692, 0.55", "-5.99116, -41.8797, 24.3854, 0.55", "-6.4092, -44.7474, 27.5943, 0.55", "-6.54509, -45.988, 28.6132, 0.55", "-7.47324, -54.5986, 34.2914, 0.55", "-7.69854, -57.2299, 35.7166, 0.55", "-7.98748, -60.2886, 37.0939, 0.55", "-8.28863, -63.2633, 38.0515, 0.55", "-8.69882, -68.1588, 39.2156, 0.55", "-8.93065, -70.4739, 39.6674, 0.55", "-9.27112, -73.5886, 40.085, 0.55", "-9.77363, -77.2153, 40.6969, 0.55", "-11.1033, -84.8716, 42.417, 0.55", "-11.6236, -87.4911, 43.1539, 0.55", "-12.6561, -91.7227, 44.5569, 0.55", "-13.0691, -93.2406, 45.0923, 0.55", "-13.8393, -95.8447, 46.086, 0.55", "-15.0507, -99.6245, 47.5642, 0.55", "-15.6409, -101.468, 48.3471, 0.55", "-16.486, -104.154, 49.4937, 0.55", "-17.6768, -107.765, 51.0883, 0.55", "-18.6149, -110.554, 52.4117, 0.55", "-19.4894, -113.216, 53.8273, 0.55", "-20.8015, -116.866, 55.9389, 0.55", "-21.3896, -118.185, 56.872, 0.55", "-22.8093, -120.987, 59.1373, 0.55", "-24.5586, -123.939, 61.7012, 0.55", "-26.8753, -127.618, 64.9379, 0.55", "-29.0748, -131.309, 67.9534, 0.55", "-30.8844, -134.543, 70.4241, 0.55", "-31.4836, -135.892, 71.3644, 0.55", "-32.5475, -138.889, 73.3543, 0.55", "-33.2133, -141.054, 74.8088, 0.55", "-34.4577, -146.087, 77.9655, 0.55", "-34.9194, -148.8, 79.4889, 0.55", "-35.5286, -152.974, 81.6833, 0.55", "-35.9043, -155.676, 83.1355, 0.55", "-36.3073, -158.801, 84.7943, 0.55", "-36.5059, -159.903, 85.3396, 0.55", "-37.1881, -162.91, 86.6915, 0.55", "-37.8063, -165.167, 87.7241, 0.55", "-38.1304, -166.414, 88.3562, 0.55", "-38.5284, -168.124, 89.2234, 0.55", "-39.923, -174.043, 92.2244, 0.55", "-40.8888, -177.824, 94.3239, 0.55", "-41.8982, -181.598, 96.592, 0.83", "-42.5097, -183.703, 97.8991, 0.55", "-42.8952, -184.838, 98.6378, 0.55", "-43.1998, -185.625, 99.1827, 0.83", "-43.978, -187.046, 100.226, 0.55", "-44.4761, -187.775, 100.687, 0.83", "-45.3129, -188.899, 101.181, 0.55", "-46.7277, -190.671, 101.907, 0.55", "-47.261, -191.315, 102.177, 0.83", "-48.3988, -192.678, 102.795, 0.28", "-48.888, -193.345, 103.082, 0.55", "-49.9175, -195.076, 103.876, 0.28", "-50.1259, -195.594, 104.139, 0.55", "-50.6272, -197.4, 105.109, 0.55", "-50.8186, -198.858, 106.034, 0.55", "-50.9641, -200.53, 107.314, 0.55", "-51.025, -201.911, 108.403, 0.83", "-51.0349, -203.713, 109.876, 0.83", "-50.9491, -205.617, 111.505, 0.55", "-50.6124, -208.533, 114.122, 0.28", "-50.3156, -211.243, 116.636, 0.83" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "4.70115, -34.6913, 0.359685, 0.55", "4.48578, -37.9974, 0.450055, 0.55", "4.23885, -39.7348, 0.480302, 0.55", "3.9412, -41.1997, 0.495391, 0.55", "3.32939, -43.6776, 0.50811, 0.28", "3.04555, -44.8166, 0.515655, 0.55", "2.32048, -47.4921, 0.521668, 0.55", "1.9509, -48.8468, 0.514386, 0.55", "1.55931, -50.2798, 0.501464, 0.55", "0.993791, -52.2153, 0.485749, 0.55", "0.705239, -53.1816, 0.486703, 0.55", "-0.109764, -55.9249, 0.513171, 0.55", "-0.803447, -58.3315, 0.52103, 0.55", "-1.2124, -59.7677, 0.504403, 0.55", "-2.22814, -63.3994, 0.403048, 0.55", "-2.73998, -65.2981, 0.330934, 0.55", "-3.46419, -67.8074, 0.221564, 0.55", "-4.49706, -71.1652, 0.0629852, 0.55", "-5.57132, -74.4043, -0.099402, 0.55", "-6.45866, -77.0509, -0.248317, 0.55", "-7.46111, -80.2223, -0.447907, 0.55", "-8.23847, -82.6496, -0.614363, 0.55", "-8.92935, -84.9254, -0.754586, 0.28", "-9.93419, -88.2072, -0.875348, 0.55" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "4.70115, -34.6913, 0.359685, 0.83", "5.75675, -38.2826, 0.1273, 0.83", "6.38179, -40.596, -0.0623609, 0.83", "6.81312, -42.3251, -0.322981, 0.83", "7.33274, -44.408, -0.636946, 0.83", "8.1401, -47.6444, -1.12477, 0.83", "8.99807, -51.0837, -1.64317, 0.83", "9.6211, -54.6739, -2.25236, 0.83", "10.1983, -57.9318, -2.94427, 0.83" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "10.1983, -57.9318, -2.94427, 0.55", "9.998, -61.9837, -3.60386, 0.55", "9.79562, -64.0564, -3.94331, 0.55", "9.5058, -66.6158, -4.49532, 0.55", "9.15415, -69.7149, -5.36325, 0.55", "8.8295, -72.3405, -6.20796, 0.55", "8.48329, -75.5578, -7.29881, 0.55", "8.29614, -78.228, -8.22873, 0.55", "8.00488, -82.543, -9.81023, 0.55", "7.81385, -85.938, -11.0695, 0.55", "7.67944, -88.6623, -11.987, 0.55", "7.68112, -90.2156, -12.4432, 0.55", "7.79227, -92.7175, -12.6815, 0.55", "7.99778, -94.6871, -12.3566, 0.55", "8.26586, -96.6798, -11.515, 0.55", "8.75483, -101.24, -8.88912, 0.55", "8.84795, -102.26, -8.16736, 0.55", "9.50134, -110.164, -1.45946, 0.28", "9.63364, -111.377, -0.29998, 0.55", "9.73721, -112.484, 0.876478, 0.28", "9.91015, -114.627, 2.97028, 0.28", "10.0986, -115.987, 4.1627, 0.55", "10.7929, -119.923, 6.90086, 0.55", "11.2495, -121.938, 8.0616, 0.55", "12.1163, -125.837, 10.1006, 0.55", "13.1946, -131.099, 12.6482, 0.55", "13.6532, -133.818, 13.8394, 0.55", "14.4932, -141.64, 16.7287, 0.55", "14.6641, -147.64, 18.543, 0.55", "14.4498, -152.202, 19.7359, 0.55", "13.8869, -157.507, 20.7514, 0.55", "13.1795, -161.114, 21.3573, 0.55", "12.3801, -164.033, 21.6792, 0.55", "10.8648, -168.488, 21.7465, 0.55", "9.43051, -172.203, 21.7088, 0.28", "8.292, -175.276, 21.9245, 0.28", "7.63977, -177.122, 22.0667, 0.28", "7.32773, -178.126, 22.2148, 0.55", "6.90751, -179.402, 22.5284, 0.28", "6.36667, -180.657, 23.2289, 0.83", "4.86585, -183.127, 25.3518, 0.55", "4.39271, -183.713, 26.0154, 0.55", "3.4016, -184.756, 27.1878, 0.28", "2.54978, -185.544, 28.1452, 0.55", "-1.81206, -189.07, 32.1504, 0.28", "-3.03197, -189.966, 33.0858, 0.55", "-5.38591, -191.513, 34.6368, 0.28", "-8.46417, -193.62, 36.4321, 0.55", "-12.736, -196.724, 38.5836, 0.28", "-17.9315, -200.639, 40.7306, 0.28", "-19.5667, -201.911, 41.0474, 0.55", "-24.3494, -205.61, 42.079, 0.28", "-26.5537, -207.373, 42.6437, 0.28", "-27.6083, -208.248, 43.2034, 0.55" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "10.1983, -57.9318, -2.94427, 0.55", "12.6915, -59.1035, -3.14727, 0.55", "16.2129, -60.9459, -3.33792, 0.55", "18.6592, -62.2724, -3.43593, 0.55", "21.8157, -64.1854, -3.51236, 0.55", "23.6318, -65.4429, -3.54738, 0.55", "27.2578, -68.2195, -3.54969, 0.55", "28.8109, -69.6476, -3.52305, 0.55", "29.7963, -70.7695, -3.45177, 0.55", "31.6217, -73.1245, -3.18352, 0.55", "33.6838, -75.9027, -2.73665, 0.28", "34.697, -77.1822, -2.48426, 0.83", "36.4256, -79.2222, -2.02541, 0.28", "38.7441, -81.626, -1.45379, 0.55", "42.0011, -84.6261, -0.729754, 0.55", "45.4888, -87.436, -0.0771433, 0.55", "49.5607, -90.4408, 0.667839, 0.55", "52.9356, -92.7416, 1.22586, 0.55", "55.1397, -94.1058, 1.57157, 0.55", "56.6059, -94.9553, 1.71686, 0.55", "59.1822, -96.4421, 1.65331, 0.55" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_20", "dend_7", "dend_0", "dend_22", "dend_21", "dend_17", "dend_8", "dend_4", "dend_1", "dend_19", "dend_18", "dend_14", "dend_9", "dend_6", "dend_5", "dend_3", "dend_2", "dend_16", "dend_15", "dend_13", "dend_10", "dend_12", "dend_11" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_20", "dend_7", "dend_0", "dend_22", "dend_21", "dend_17", "dend_8", "dend_4", "dend_1", "dend_19", "dend_18", "dend_14", "dend_9", "dend_6", "dend_5", "dend_3", "dend_2", "dend_16", "dend_15", "dend_13", "dend_10", "dend_12", "dend_11" ]
  }, {
    "name" : "ModelViewParmSubset_5",
    "groups" : [ ],
    "sections" : [ "dend_6", "dend_5" ]
  }, {
    "name" : "ModelViewParmSubset_6",
    "groups" : [ ],
    "sections" : [ "dend_20", "dend_7", "dend_0", "axon_0", "dend_22", "dend_21", "dend_17", "dend_8", "dend_4", "dend_1", "axon_1", "dend_19", "dend_18", "dend_14", "dend_9", "dend_6", "dend_5", "dend_3", "dend_2", "dend_16", "dend_15", "dend_13", "dend_10", "dend_12", "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_7", "dend_7", "dend_7", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_8", "dend_8", "dend_8", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_14", "dend_14", "dend_14", "dend_14", "dend_9", "dend_9", "dend_9", "dend_6", "dend_5", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.993125",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.005611",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.068459995",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.517764",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "6.3E-5",
    "erev" : "-64.6017"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "3.45E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.077616",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.002099",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "1.13999995E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.26087198",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "2.0E-5",
    "erev" : "-69.78141"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.395881",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009986",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "5.0100003E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.009728",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "2.7999999E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cACint209_L4_MC_f8c62d11b0_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_20, id: dend_20, parent: soma_0
create dend_20
public dend_20
// Section: dend_7, id: dend_7, parent: soma_0
create dend_7
public dend_7
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_22, id: dend_22, parent: dend_20
create dend_22
public dend_22
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_17, id: dend_17, parent: dend_7
create dend_17
public dend_17
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_4, id: dend_4, parent: dend_0
create dend_4
public dend_4
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_14, id: dend_14, parent: dend_8
create dend_14
public dend_14
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9
// Section: dend_6, id: dend_6, parent: dend_4
create dend_6
public dend_6
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5
// Section: dend_3, id: dend_3, parent: dend_1
create dend_3
public dend_3
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_16, id: dend_16, parent: dend_14
create dend_16
public dend_16
// Section: dend_15, id: dend_15, parent: dend_14
create dend_15
public dend_15
// Section: dend_13, id: dend_13, parent: dend_9
create dend_13
public dend_13
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10
// Section: dend_12, id: dend_12, parent: dend_10
create dend_12
public dend_12
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_20, dend_7, dend_0, dend_22, dend_21, dend_17, dend_8, dend_4, dend_1, dend_19, dend_18, dend_14, dend_9, dend_6, dend_5, dend_3, dend_2, dend_16, dend_15, dend_13, dend_10, dend_12, dend_11]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_20, dend_7, dend_0, dend_22, dend_21, dend_17, dend_8, dend_4, dend_1, dend_19, dend_18, dend_14, dend_9, dend_6, dend_5, dend_3, dend_2, dend_16, dend_15, dend_13, dend_10, dend_12, dend_11]}
objref ModelViewParmSubset_4
// Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_6, dend_5]}
objref ModelViewParmSubset_5
// Group: {name=ModelViewParmSubset_6, groups=[], sections=[dend_20, dend_7, dend_0, axon_0, dend_22, dend_21, dend_17, dend_8, dend_4, dend_1, axon_1, dend_19, dend_18, dend_14, dend_9, dend_6, dend_5, dend_3, dend_2, dend_16, dend_15, dend_13, dend_10, dend_12, dend_11]}
objref ModelViewParmSubset_6
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_6
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_7, dend_7, dend_7, dend_0, dend_0, dend_0, axon_0, axon_0, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_8, dend_8, dend_8, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_14, dend_14, dend_14, dend_14, dend_9, dend_9, dend_9, dend_6, dend_5, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_20(0), soma_0(0.45000068561369555)
    connect dend_7(0), soma_0(0.45000068561369555)
    connect dend_0(0), soma_0(0.45000068561369555)
    connect axon_0(0), soma_0(1.0)
    connect dend_22(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_17(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_4(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_14(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)
    connect dend_6(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)
    connect dend_3(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_16(0), dend_14(1.0)
    connect dend_15(0), dend_14(1.0)
    connect dend_13(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)
    connect dend_12(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -0.511903, -9.88904, 0.0703489, 2.34591 ) }
    soma_0 { pt3dadd( -0.41677, -8.88293, 0.0661135, 3.85245 ) }
    soma_0 { pt3dadd( -0.321636, -7.87683, 0.061878, 5.28887 ) }
    soma_0 { pt3dadd( -0.226503, -6.87073, 0.0576426, 6.89192 ) }
    soma_0 { pt3dadd( -0.131369, -5.86462, 0.0534072, 8.24306 ) }
    soma_0 { pt3dadd( -0.0362354, -4.85852, 0.0491717, 8.92174 ) }
    soma_0 { pt3dadd( 0.0588982, -3.85242, 0.0449363, 9.44137 ) }
    soma_0 { pt3dadd( 0.154032, -2.84631, 0.0407009, 9.86083 ) }
    soma_0 { pt3dadd( 0.249165, -1.84021, 0.0364654, 10.0508 ) }
    soma_0 { pt3dadd( 0.344299, -0.834108, 0.03223, 10.2369 ) }
    soma_0 { pt3dadd( 0.439433, 0.171995, 0.0279946, 10.423 ) }
    soma_0 { pt3dadd( 0.534566, 1.1781, 0.0237591, 10.4521 ) }
    soma_0 { pt3dadd( 0.6297, 2.1842, 0.0195237, 10.157 ) }
    soma_0 { pt3dadd( 0.724833, 3.19031, 0.0152883, 9.86184 ) }
    soma_0 { pt3dadd( 0.819967, 4.19641, 0.0110528, 9.49883 ) }
    soma_0 { pt3dadd( 0.915101, 5.20251, 0.00681741, 9.03118 ) }
    soma_0 { pt3dadd( 1.01023, 6.20861, 0.00258198, 8.56352 ) }
    soma_0 { pt3dadd( 1.10537, 7.21472, -0.00165345, 8.09586 ) }
    soma_0 { pt3dadd( 1.2005, 8.22082, -0.00588889, 7.15819 ) }
    soma_0 { pt3dadd( 1.29564, 9.22692, -0.0101243, 4.92366 ) }
    soma_0 { pt3dadd( 1.39077, 10.233, -0.0143598, 3.77085 ) }
    // Section: dend_20, id: dend_20, parent: soma_0 (entry count 21/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 4.21382, 9.48026, 3.26771, 0.55 ) }
    dend_20 { pt3dadd( 4.6934, 10.8025, 3.9647, 0.55 ) }
    dend_20 { pt3dadd( 5.49824, 12.991, 4.87081, 0.83 ) }
    dend_20 { pt3dadd( 6.62237, 15.664, 5.81353, 0.83 ) }
    dend_20 { pt3dadd( 8.06029, 18.4917, 6.78488, 0.83 ) }
    dend_20 { pt3dadd( 9.55996, 21.1447, 7.65363, 0.83 ) }
    dend_20 { pt3dadd( 11.1201, 23.8097, 8.47388, 0.83 ) }
    dend_20 { pt3dadd( 12.3606, 25.7221, 9.08797, 0.83 ) }
    dend_20 { pt3dadd( 13.5674, 27.3571, 9.65624, 0.83 ) }
    dend_20 { pt3dadd( 15.8452, 30.197, 10.5902, 0.83 ) }
    dend_20 { pt3dadd( 17.0101, 31.4528, 11.0464, 0.28 ) }
    dend_20 { pt3dadd( 18.1668, 32.5796, 11.5223, 0.83 ) }
    dend_20 { pt3dadd( 20.2405, 34.5323, 12.5459, 0.55 ) }
    dend_20 { pt3dadd( 21.7848, 35.9904, 13.3271, 0.28 ) }
    dend_20 { pt3dadd( 22.8367, 37.0326, 13.8483, 0.83 ) }
    dend_20 { pt3dadd( 24.313, 38.569, 14.5067, 0.55 ) }
    dend_20 { pt3dadd( 24.7372, 38.9938, 14.668, 0.83 ) }
    dend_20 { pt3dadd( 25.9526, 40.226, 15.0154, 0.28 ) }
    dend_20 { pt3dadd( 26.7937, 41.1271, 15.1771, 0.83 ) }
    dend_20 { pt3dadd( 28.4267, 42.8855, 15.6098, 0.55 ) }
    dend_20 { pt3dadd( 29.1631, 43.6577, 15.877, 0.55 ) }
    dend_20 { pt3dadd( 30.5197, 45.0241, 16.4851, 0.55 ) }
    dend_20 { pt3dadd( 32.2351, 46.5919, 17.344, 0.55 ) }
    dend_20 { pt3dadd( 33.6113, 47.7328, 18.083, 0.83 ) }
    dend_20 { pt3dadd( 36.1902, 49.6714, 19.8146, 0.55 ) }
    dend_20 { pt3dadd( 37.0454, 50.2469, 20.4533, 0.28 ) }
    dend_20 { pt3dadd( 38.0706, 50.8512, 21.2877, 0.55 ) }
    dend_20 { pt3dadd( 39.7105, 51.753, 22.6971, 0.28 ) }
    dend_20 { pt3dadd( 40.7417, 52.2326, 23.653, 0.55 ) }
    dend_20 { pt3dadd( 43.9287, 53.6675, 26.7071, 0.28 ) }
    dend_20 { pt3dadd( 45.0935, 54.1831, 27.8079, 0.83 ) }
    dend_20 { pt3dadd( 46.8705, 55.0553, 29.591, 0.28 ) }
    dend_20 { pt3dadd( 47.8121, 55.596, 30.7247, 0.55 ) }
    dend_20 { pt3dadd( 50.0252, 57.0665, 33.6667, 0.55 ) }
    dend_20 { pt3dadd( 50.6427, 57.501, 34.5273, 0.55 ) }
    dend_20 { pt3dadd( 51.3046, 58.0087, 35.431, 0.55 ) }
    dend_20 { pt3dadd( 52.5199, 59.0206, 37.0961, 0.83 ) }
    dend_20 { pt3dadd( 56.3009, 62.0351, 41.7833, 0.28 ) }
    dend_20 { pt3dadd( 57.2021, 62.68, 42.8851, 0.55 ) }
    dend_20 { pt3dadd( 58.6502, 63.6093, 44.5339, 0.28 ) }
    dend_20 { pt3dadd( 59.6754, 64.1728, 45.6535, 0.83 ) }
    dend_20 { pt3dadd( 60.9744, 64.7813, 46.9767, 0.55 ) }
    dend_20 { pt3dadd( 62.8215, 65.4832, 48.6139, 0.55 ) }
    dend_20 { pt3dadd( 66.4654, 66.679, 51.448, 0.55 ) }
    dend_20 { pt3dadd( 68.0882, 67.1822, 52.7585, 0.28 ) }
    dend_20 { pt3dadd( 68.7478, 67.3677, 53.3043, 0.55 ) }
    dend_20 { pt3dadd( 70.491, 67.829, 54.9282, 0.28 ) }
    dend_20 { pt3dadd( 70.9138, 67.9573, 55.3596, 0.55 ) }
    dend_20 { pt3dadd( 72.4512, 68.5761, 57.1237, 0.28 ) }
    dend_20 { pt3dadd( 72.8093, 68.7419, 57.5212, 0.28 ) }
    dend_20 { pt3dadd( 73.6572, 69.1605, 58.6745, 0.55 ) }
    dend_20 { pt3dadd( 75.3753, 70.0997, 61.3303, 0.28 ) }
    dend_20 { pt3dadd( 75.7819, 70.3651, 62.06, 0.55 ) }
    dend_20 { pt3dadd( 77.2003, 71.4141, 64.8655, 0.28 ) }
    dend_20 { pt3dadd( 77.5079, 71.7006, 65.5284, 0.55 ) }
    dend_20 { pt3dadd( 78.9583, 73.2617, 68.446, 0.28 ) }
    dend_20 { pt3dadd( 79.3203, 73.7184, 69.1061, 0.55 ) }
    dend_20 { pt3dadd( 80.796, 75.6497, 71.0798, 0.28 ) }
    dend_20 { pt3dadd( 80.9858, 75.9218, 71.3151, 0.55 ) }
    dend_20 { pt3dadd( 81.8702, 77.3439, 72.2953, 0.28 ) }
    dend_20 { pt3dadd( 83.1956, 79.4858, 73.6407, 0.28 ) }
    dend_20 { pt3dadd( 83.8661, 80.5913, 74.221, 0.83 ) }
    dend_20 { pt3dadd( 85.5836, 83.3375, 75.6223, 0.55 ) }
    dend_20 { pt3dadd( 87.7568, 86.6947, 77.1853, 0.55 ) }
    dend_20 { pt3dadd( 88.3524, 87.5761, 77.6351, 0.28 ) }
    dend_20 { pt3dadd( 88.7815, 88.1866, 78.0147, 0.55 ) }
    // Section: dend_7, id: dend_7, parent: soma_0 (entry count 87/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 0.573824, -9.16974, 0.64771, 1.66 ) }
    dend_7 { pt3dadd( 1.51669, -11.1315, 1.3178, 1.66 ) }
    dend_7 { pt3dadd( 3.41616, -15.0837, 2.66776, 1.38 ) }
    dend_7 { pt3dadd( 4.77172, -17.9042, 3.63115, 1.66 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 91/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 1.58382, 10.8102, -5.68229, 2.22 ) }
    dend_0 { pt3dadd( 2.34095, 14.6149, -5.97281, 2.22 ) }
    dend_0 { pt3dadd( 3.22934, 19.0791, -6.3137, 2.22 ) }
    dend_0 { pt3dadd( 4.19391, 23.9261, -6.68382, 2.22 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 95/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 1.39077, 10.233, -0.0143598, 0.83 ) }
    axon_0 { pt3dadd( 2.80282, 25.1664, -0.0143598, 0.83 ) }
    axon_0 { pt3dadd( 4.21487, 40.0998, -0.0143598, 0.83 ) }
    // Section: dend_22, id: dend_22, parent: dend_20 (entry count 98/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( 88.7815, 88.1866, 78.0147, 0.55 ) }
    dend_22 { pt3dadd( 89.4955, 88.8335, 80.0148, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_22 { pt3dadd( 89.883, 89.3357, 82.158, 0.55 ) }
    dend_22 { pt3dadd( 90.4633, 90.6836, 88.3438, 0.28 ) }
    dend_22 { pt3dadd( 90.5205, 90.8164, 88.9529, 0.55 ) }
    dend_22 { pt3dadd( 91.0229, 91.9832, 94.3076, 0.28 ) }
    dend_22 { pt3dadd( 91.0485, 92.0426, 94.5802, 0.55 ) }
    dend_22 { pt3dadd( 91.2868, 93.8173, 103.604, 0.55 ) }
    dend_22 { pt3dadd( 91.2277, 94.1199, 105.539, 0.83 ) }
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 7/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 88.7815, 88.1866, 78.0147, 0.28 ) }
    dend_21 { pt3dadd( 88.5395, 90.2023, 78.453, 0.28 ) }
    dend_21 { pt3dadd( 88.5069, 90.474, 78.5121, 0.55 ) }
    dend_21 { pt3dadd( 88.2522, 92.5954, 78.9734, 0.28 ) }
    dend_21 { pt3dadd( 88.2205, 92.859, 79.0307, 0.55 ) }
    dend_21 { pt3dadd( 88.0214, 94.517, 79.3912, 0.28 ) }
    dend_21 { pt3dadd( 87.9574, 95.0508, 79.5073, 0.55 ) }
    // Section: dend_17, id: dend_17, parent: dend_7 (entry count 14/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 4.77172, -17.9042, 3.63115, 0.83 ) }
    dend_17 { pt3dadd( 6.10329, -19.8545, 5.54598, 0.83 ) }
    dend_17 { pt3dadd( 7.73167, -21.7311, 7.38499, 0.83 ) }
    dend_17 { pt3dadd( 8.96487, -23.053, 8.57632, 0.83 ) }
    dend_17 { pt3dadd( 11.0556, -25.2645, 10.5198, 0.83 ) }
    dend_17 { pt3dadd( 16.2714, -30.1994, 14.7337, 0.83 ) }
    dend_17 { pt3dadd( 17.1663, -31.0536, 15.4061, 0.83 ) }
    dend_17 { pt3dadd( 20.6014, -34.1366, 17.7047, 0.83 ) }
    dend_17 { pt3dadd( 21.9287, -35.2048, 18.5596, 0.83 ) }
    dend_17 { pt3dadd( 25.279, -37.6753, 20.6065, 0.83 ) }
    dend_17 { pt3dadd( 29.9504, -40.8876, 23.263, 0.83 ) }
    dend_17 { pt3dadd( 32.7109, -42.7614, 24.7768, 0.83 ) }
    dend_17 { pt3dadd( 36.5487, -45.311, 27.0274, 0.83 ) }
    dend_17 { pt3dadd( 40.6167, -47.9477, 29.5384, 0.83 ) }
    dend_17 { pt3dadd( 43.8984, -49.9525, 31.657, 0.83 ) }
    dend_17 { pt3dadd( 47.359, -51.9356, 33.7585, 0.83 ) }
    dend_17 { pt3dadd( 49.7185, -53.2707, 35.1918, 0.55 ) }
    dend_17 { pt3dadd( 51.0486, -53.9616, 35.9053, 0.55 ) }
    dend_17 { pt3dadd( 52.88, -54.9591, 36.7113, 0.55 ) }
    dend_17 { pt3dadd( 54.8575, -56.181, 37.1107, 0.55 ) }
    dend_17 { pt3dadd( 57.5099, -57.9305, 37.1785, 0.28 ) }
    dend_17 { pt3dadd( 59.3322, -59.0744, 36.8751, 0.55 ) }
    dend_17 { pt3dadd( 60.8149, -59.975, 36.4403, 0.28 ) }
    dend_17 { pt3dadd( 61.2765, -60.2469, 36.2769, 0.55 ) }
    dend_17 { pt3dadd( 63.6215, -61.6082, 35.272, 0.55 ) }
    dend_17 { pt3dadd( 65.2433, -62.6276, 34.3872, 0.55 ) }
    dend_17 { pt3dadd( 66.5252, -63.4712, 33.7029, 0.83 ) }
    dend_17 { pt3dadd( 67.7375, -64.3024, 33.0019, 0.55 ) }
    dend_17 { pt3dadd( 68.3161, -64.7151, 32.6686, 0.83 ) }
    dend_17 { pt3dadd( 71.2034, -66.9417, 30.8607, 0.55 ) }
    dend_17 { pt3dadd( 72.7239, -68.249, 29.825, 0.83 ) }
    dend_17 { pt3dadd( 73.9404, -69.3608, 29.063, 0.55 ) }
    dend_17 { pt3dadd( 74.876, -70.2736, 28.5566, 0.83 ) }
    dend_17 { pt3dadd( 75.7022, -71.1103, 28.1668, 0.83 ) }
    dend_17 { pt3dadd( 77.8142, -73.2909, 27.2931, 0.55 ) }
    dend_17 { pt3dadd( 79.411, -74.9029, 26.5836, 0.83 ) }
    dend_17 { pt3dadd( 80.8442, -76.3082, 25.9032, 0.55 ) }
    dend_17 { pt3dadd( 81.6013, -77.0629, 25.4933, 0.55 ) }
    dend_17 { pt3dadd( 82.0028, -77.4682, 25.2577, 0.55 ) }
    dend_17 { pt3dadd( 82.5019, -77.9715, 24.9375, 0.83 ) }
    dend_17 { pt3dadd( 85.5944, -80.8023, 22.8277, 0.28 ) }
    dend_17 { pt3dadd( 85.8364, -80.9929, 22.6021, 0.83 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 56/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 4.77172, -17.9042, 3.63115, 0.83 ) }
    dend_8 { pt3dadd( 2.94647, -22.8511, 1.14177, 0.83 ) }
    dend_8 { pt3dadd( 1.71341, -26.1931, -0.539949, 0.83 ) }
    dend_8 { pt3dadd( 1.08307, -27.9015, -1.39964, 0.83 ) }
    // Section: dend_4, id: dend_4, parent: dend_0 (entry count 60/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 4.19391, 23.9261, -6.68382, 0.83 ) }
    dend_4 { pt3dadd( 7.08509, 27.7987, -6.09689, 0.83 ) }
    dend_4 { pt3dadd( 10.3551, 32.1624, -5.4733, 0.83 ) }
    dend_4 { pt3dadd( 14.5578, 37.7779, -4.68501, 0.83 ) }
    dend_4 { pt3dadd( 16.3234, 40.1146, -4.34671, 0.83 ) }
    dend_4 { pt3dadd( 18.2343, 42.6997, -3.97253, 0.83 ) }
    dend_4 { pt3dadd( 19.9741, 45.0661, -3.63551, 0.83 ) }
    dend_4 { pt3dadd( 21.4817, 47.191, -3.46842, 0.83 ) }
    dend_4 { pt3dadd( 23.4365, 49.9898, -3.23985, 0.83 ) }
    dend_4 { pt3dadd( 24.3118, 51.1627, -3.14087, 0.55 ) }
    dend_4 { pt3dadd( 25.2103, 52.3591, -3.05715, 0.55 ) }
    dend_4 { pt3dadd( 26.5385, 54.0542, -2.90785, 0.55 ) }
    dend_4 { pt3dadd( 28.3481, 56.436, -2.69107, 1.66 ) }
    dend_4 { pt3dadd( 29.549, 57.9825, -2.58796, 0.55 ) }
    dend_4 { pt3dadd( 30.3996, 59.1042, -2.54964, 0.28 ) }
    dend_4 { pt3dadd( 31.3708, 60.3886, -2.53069, 0.55 ) }
    dend_4 { pt3dadd( 32.8684, 62.323, -2.48307, 0.28 ) }
    dend_4 { pt3dadd( 34.1212, 64.0085, -2.42609, 1.38 ) }
    dend_4 { pt3dadd( 35.5878, 66.0434, -2.32882, 0.55 ) }
    dend_4 { pt3dadd( 36.5778, 67.4021, -2.28082, 0.55 ) }
    dend_4 { pt3dadd( 37.7869, 69.1996, -2.26932, 0.55 ) }
    dend_4 { pt3dadd( 39.0138, 71.0569, -2.36344, 0.55 ) }
    dend_4 { pt3dadd( 46.5111, 77.6741, -2.29631, 0.55 ) }
    dend_4 { pt3dadd( 54.1326, 84.1219, -1.71536, 0.55 ) }
    dend_4 { pt3dadd( 61.2935, 90.6949, 0.633694, 0.55 ) }
    dend_4 { pt3dadd( 68.4511, 97.6413, 1.35249, 0.55 ) }
    dend_4 { pt3dadd( 74.9758, 105.199, 0.795789, 0.55 ) }
    dend_4 { pt3dadd( 80.6718, 113.154, -1.27146, 0.55 ) }
    dend_4 { pt3dadd( 88.0757, 119.59, -3.2096, 0.55 ) }
    dend_4 { pt3dadd( 96.1375, 125.331, -4.64346, 0.55 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 90/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 4.19391, 23.9261, -6.68382, 2.22 ) }
    dend_1 { pt3dadd( 3.9566, 25.3914, -5.72344, 2.22 ) }
    dend_1 { pt3dadd( 3.76198, 26.9075, -4.49639, 0.83 ) }
    dend_1 { pt3dadd( 3.62997, 29.1614, -2.60944, 1.94 ) }
    dend_1 { pt3dadd( 3.38403, 33.3601, 0.905821, 1.11 ) }
    dend_1 { pt3dadd( 3.27159, 35.2799, 2.51302, 1.11 ) }
    dend_1 { pt3dadd( 3.18099, 36.8266, 3.80798, 1.11 ) }
    dend_1 { pt3dadd( 3.06412, 41.15, 7.77332, 1.11 ) }
    dend_1 { pt3dadd( 3.08034, 42.6703, 9.3148, 1.11 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 99/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 4.21487, 40.0998, -0.0143598, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    axon_1 { pt3dadd( 5.62693, 55.0332, -0.0143598, 0.55 ) }
    axon_1 { pt3dadd( 7.03898, 69.9666, -0.0143598, 0.55 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 2/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 85.8364, -80.9929, 22.6021, 0.28 ) }
    dend_19 { pt3dadd( 87.4837, -80.8781, 21.4131, 0.28 ) }
    dend_19 { pt3dadd( 87.9879, -80.8887, 21.0496, 0.55 ) }
    dend_19 { pt3dadd( 89.9626, -81.2555, 18.9856, 0.28 ) }
    dend_19 { pt3dadd( 91.5005, -81.587, 17.246, 0.83 ) }
    dend_19 { pt3dadd( 93.6417, -82.098, 14.5437, 0.55 ) }
    dend_19 { pt3dadd( 93.9736, -82.1686, 14.1109, 0.55 ) }
    dend_19 { pt3dadd( 95.1049, -82.3848, 12.5785, 0.83 ) }
    dend_19 { pt3dadd( 99.8306, -83.1845, 6.53124, 0.28 ) }
    dend_19 { pt3dadd( 100.343, -83.2637, 5.93136, 0.55 ) }
    dend_19 { pt3dadd( 103.585, -83.6217, 2.45265, 0.28 ) }
    dend_19 { pt3dadd( 104.559, -83.6789, 1.39709, 0.55 ) }
    dend_19 { pt3dadd( 106.226, -83.727, -0.308104, 0.28 ) }
    dend_19 { pt3dadd( 109.577, -83.6992, -3.36933, 0.28 ) }
    dend_19 { pt3dadd( 111.143, -83.7258, -4.54888, 0.28 ) }
    dend_19 { pt3dadd( 112.286, -83.8152, -5.37571, 0.55 ) }
    dend_19 { pt3dadd( 116.845, -84.6366, -8.34699, 0.28 ) }
    dend_19 { pt3dadd( 117.68, -84.901, -8.89932, 0.55 ) }
    dend_19 { pt3dadd( 118.549, -85.3697, -9.45459, 0.55 ) }
    dend_19 { pt3dadd( 120.842, -87.3333, -10.7759, 0.28 ) }
    dend_19 { pt3dadd( 121.089, -87.6085, -10.8964, 0.55 ) }
    dend_19 { pt3dadd( 122.758, -89.8806, -11.3266, 0.28 ) }
    dend_19 { pt3dadd( 123.344, -90.8635, -11.2996, 0.55 ) }
    dend_19 { pt3dadd( 124.894, -93.8902, -11.0954, 0.55 ) }
    dend_19 { pt3dadd( 125.933, -96.2438, -10.8823, 0.28 ) }
    dend_19 { pt3dadd( 126.237, -97.0171, -10.7822, 0.55 ) }
    dend_19 { pt3dadd( 127.148, -99.3932, -10.4394, 0.28 ) }
    dend_19 { pt3dadd( 127.92, -101.464, -10.075, 0.55 ) }
    dend_19 { pt3dadd( 128.528, -103.043, -9.74762, 0.28 ) }
    dend_19 { pt3dadd( 128.921, -104.243, -9.41541, 0.55 ) }
    dend_19 { pt3dadd( 137.11, -108.411, -13.3602, 0.55 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 33/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 85.8364, -80.9929, 22.6021, 0.28 ) }
    dend_18 { pt3dadd( 87.5939, -82.0818, 23.6296, 0.28 ) }
    dend_18 { pt3dadd( 88.5896, -82.6617, 24.1502, 0.55 ) }
    dend_18 { pt3dadd( 91.5414, -84.2015, 23.7774, 0.28 ) }
    dend_18 { pt3dadd( 92.2744, -84.6033, 23.5006, 0.83 ) }
    dend_18 { pt3dadd( 93.4883, -85.3592, 23.0031, 0.55 ) }
    dend_18 { pt3dadd( 95.0448, -86.3865, 22.2291, 0.55 ) }
    dend_18 { pt3dadd( 95.8269, -86.9059, 21.7614, 0.83 ) }
    dend_18 { pt3dadd( 101.643, -91.0534, 18.0598, 0.55 ) }
    dend_18 { pt3dadd( 103.548, -92.5456, 16.767, 0.55 ) }
    dend_18 { pt3dadd( 105.589, -94.2849, 15.3837, 0.55 ) }
    dend_18 { pt3dadd( 107.895, -96.3717, 13.8482, 0.55 ) }
    dend_18 { pt3dadd( 108.605, -97.0955, 13.3986, 0.83 ) }
    dend_18 { pt3dadd( 110.468, -99.1427, 12.4118, 0.28 ) }
    dend_18 { pt3dadd( 111.316, -100.214, 12.181, 0.55 ) }
    dend_18 { pt3dadd( 112.431, -101.72, 11.9248, 0.28 ) }
    dend_18 { pt3dadd( 112.877, -102.354, 11.8652, 0.55 ) }
    dend_18 { pt3dadd( 113.787, -103.732, 11.9351, 0.28 ) }
    dend_18 { pt3dadd( 114.474, -104.768, 12.0343, 0.55 ) }
    dend_18 { pt3dadd( 115.445, -106.228, 12.2964, 0.55 ) }
    dend_18 { pt3dadd( 116.268, -107.444, 12.5948, 0.28 ) }
    dend_18 { pt3dadd( 116.892, -108.391, 12.898, 0.55 ) }
    dend_18 { pt3dadd( 117.512, -109.343, 13.2118, 0.28 ) }
    dend_18 { pt3dadd( 118.069, -110.255, 13.4487, 0.55 ) }
    dend_18 { pt3dadd( 118.953, -111.787, 13.6837, 0.28 ) }
    dend_18 { pt3dadd( 119.374, -112.553, 13.7464, 0.55 ) }
    dend_18 { pt3dadd( 119.763, -113.282, 13.7196, 0.28 ) }
    dend_18 { pt3dadd( 120.101, -113.988, 13.6348, 0.55 ) }
    dend_18 { pt3dadd( 121.0, -116.073, 13.1121, 0.28 ) }
    dend_18 { pt3dadd( 121.158, -116.491, 12.9561, 0.55 ) }
    // Section: dend_14, id: dend_14, parent: dend_8 (entry count 63/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 1.08307, -27.9015, -1.39964, 0.83 ) }
    dend_14 { pt3dadd( -0.359051, -30.5194, 3.56758, 0.83 ) }
    dend_14 { pt3dadd( -1.26336, -32.1611, 6.68236, 0.83 ) }
    dend_14 { pt3dadd( -2.01754, -33.5302, 9.28005, 0.83 ) }
    dend_14 { pt3dadd( -5.8177, -40.4289, 22.3692, 0.83 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 68/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 1.08307, -27.9015, -1.39964, 0.83 ) }
    dend_9 { pt3dadd( 2.42684, -30.4233, -0.746215, 0.83 ) }
    dend_9 { pt3dadd( 3.25409, -31.9757, -0.343957, 0.83 ) }
    dend_9 { pt3dadd( 4.70115, -34.6913, 0.359685, 0.83 ) }
    // Section: dend_6, id: dend_6, parent: dend_4 (entry count 72/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 96.1375, 125.331, -4.64346, 0.55 ) }
    dend_6 { pt3dadd( 104.827, 128.541, -8.41042, 0.55 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 74/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 96.1375, 125.331, -4.64346, 0.28 ) }
    dend_5 { pt3dadd( 98.3053, 134.202, -0.568841, 0.55 ) }
    // Section: dend_3, id: dend_3, parent: dend_1 (entry count 76/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 3.08034, 42.6703, 9.3148, 0.83 ) }
    dend_3 { pt3dadd( 3.48265, 43.8698, 12.5419, 0.83 ) }
    dend_3 { pt3dadd( 4.20172, 46.364, 18.6667, 0.55 ) }
    dend_3 { pt3dadd( 4.59739, 47.3798, 21.1755, 0.55 ) }
    dend_3 { pt3dadd( 5.45499, 48.2734, 25.0532, 0.55 ) }
    dend_3 { pt3dadd( 6.13159, 48.6286, 27.9975, 0.55 ) }
    dend_3 { pt3dadd( 6.59803, 48.7429, 29.9111, 0.55 ) }
    dend_3 { pt3dadd( 7.03088, 48.7348, 31.6284, 0.55 ) }
    dend_3 { pt3dadd( 7.7008, 48.6138, 34.0131, 0.55 ) }
    dend_3 { pt3dadd( 11.4665, 47.5286, 46.9447, 0.55 ) }
    dend_3 { pt3dadd( 15.4157, 46.0545, 59.231, 0.55 ) }
    dend_3 { pt3dadd( 17.4461, 45.1942, 65.009, 0.55 ) }
    dend_3 { pt3dadd( 18.0375, 44.9102, 66.6402, 0.55 ) }
    dend_3 { pt3dadd( 19.6865, 43.9969, 71.2217, 0.55 ) }
    dend_3 { pt3dadd( 20.3106, 43.616, 72.9389, 0.55 ) }
    dend_3 { pt3dadd( 21.4912, 42.7816, 75.7229, 0.28 ) }
    dend_3 { pt3dadd( 21.9582, 42.3913, 76.7315, 0.83 ) }
    dend_3 { pt3dadd( 23.805, 40.7402, 81.1365, 0.28 ) }
    dend_3 { pt3dadd( 24.0827, 40.4884, 81.8512, 0.83 ) }
    dend_3 { pt3dadd( 25.581, 38.9572, 85.9576, 0.28 ) }
    dend_3 { pt3dadd( 25.8602, 38.6756, 86.7892, 0.83 ) }
    dend_3 { pt3dadd( 27.112, 37.4678, 90.599, 0.28 ) }
    dend_3 { pt3dadd( 27.4854, 37.1141, 91.7509, 0.83 ) }
    dend_3 { pt3dadd( 28.8092, 35.9018, 95.6236, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_3 { pt3dadd( 29.006, 35.7341, 96.1839, 0.83 ) }
    dend_3 { pt3dadd( 30.6514, 34.4861, 100.522, 0.28 ) }
    dend_3 { pt3dadd( 30.9661, 34.2806, 101.313, 0.55 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 3/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 3.08034, 42.6703, 9.3148, 0.83 ) }
    dend_2 { pt3dadd( 3.46953, 44.9662, 9.02638, 0.83 ) }
    dend_2 { pt3dadd( 3.81642, 46.5812, 8.86147, 0.83 ) }
    dend_2 { pt3dadd( 4.29392, 48.8857, 8.69357, 0.83 ) }
    dend_2 { pt3dadd( 4.67605, 51.0249, 8.56961, 0.83 ) }
    dend_2 { pt3dadd( 5.0037, 53.1072, 8.47443, 0.83 ) }
    dend_2 { pt3dadd( 5.28321, 54.8547, 8.40718, 0.83 ) }
    dend_2 { pt3dadd( 5.49669, 57.0092, 8.39241, 0.83 ) }
    dend_2 { pt3dadd( 5.79366, 60.5972, 8.38966, 0.83 ) }
    dend_2 { pt3dadd( 5.9635, 62.0823, 8.39688, 0.83 ) }
    dend_2 { pt3dadd( 6.33354, 64.8407, 8.41471, 0.83 ) }
    dend_2 { pt3dadd( 6.52682, 66.205, 8.42737, 0.83 ) }
    dend_2 { pt3dadd( 7.13071, 71.3713, 8.54358, 0.83 ) }
    dend_2 { pt3dadd( 7.43717, 75.0774, 8.66612, 0.83 ) }
    dend_2 { pt3dadd( 7.64491, 79.6029, 8.99774, 0.83 ) }
    dend_2 { pt3dadd( 7.66358, 82.584, 9.31611, 0.83 ) }
    dend_2 { pt3dadd( 7.54157, 84.5568, 9.60045, 0.83 ) }
    dend_2 { pt3dadd( 7.12806, 87.8264, 10.1852, 0.83 ) }
    dend_2 { pt3dadd( 6.51795, 90.7763, 10.9137, 0.83 ) }
    dend_2 { pt3dadd( 5.38276, 94.0235, 11.9573, 0.83 ) }
    dend_2 { pt3dadd( 4.55921, 95.9769, 12.675, 0.83 ) }
    dend_2 { pt3dadd( 3.78058, 98.1169, 13.5136, 0.83 ) }
    dend_2 { pt3dadd( 3.41079, 99.6124, 14.1665, 0.83 ) }
    dend_2 { pt3dadd( 2.92675, 102.561, 15.4745, 0.83 ) }
    dend_2 { pt3dadd( 2.57486, 105.271, 16.7686, 0.83 ) }
    dend_2 { pt3dadd( 2.42251, 107.829, 17.9927, 0.83 ) }
    dend_2 { pt3dadd( 2.312, 113.17, 20.6124, 0.83 ) }
    dend_2 { pt3dadd( 2.33358, 117.445, 22.6981, 0.83 ) }
    dend_2 { pt3dadd( 2.37704, 119.979, 23.9564, 0.83 ) }
    dend_2 { pt3dadd( 2.49941, 121.946, 24.9153, 0.28 ) }
    dend_2 { pt3dadd( 2.69853, 124.584, 26.1449, 0.55 ) }
    dend_2 { pt3dadd( 2.78889, 126.117, 26.8336, 0.55 ) }
    dend_2 { pt3dadd( 2.8537, 129.043, 28.0272, 0.55 ) }
    dend_2 { pt3dadd( 2.81896, 132.408, 28.8518, 0.55 ) }
    dend_2 { pt3dadd( 2.82651, 134.63, 29.098, 0.55 ) }
    dend_2 { pt3dadd( 2.72459, 137.872, 28.9868, 0.55 ) }
    dend_2 { pt3dadd( 2.63165, 139.547, 28.8449, 1.11 ) }
    dend_2 { pt3dadd( 2.49588, 142.521, 28.4796, 0.55 ) }
    dend_2 { pt3dadd( 2.24063, 149.256, 27.6377, 0.55 ) }
    dend_2 { pt3dadd( 2.12412, 151.624, 27.3637, 0.55 ) }
    dend_2 { pt3dadd( 1.95376, 156.473, 27.1575, 0.55 ) }
    dend_2 { pt3dadd( 2.0939, 159.33, 27.2475, 0.28 ) }
    dend_2 { pt3dadd( 2.28388, 160.992, 27.5097, 0.83 ) }
    dend_2 { pt3dadd( 2.77733, 163.991, 28.3261, 0.28 ) }
    dend_2 { pt3dadd( 3.0284, 165.224, 28.9172, 0.83 ) }
    dend_2 { pt3dadd( 3.78933, 168.127, 30.5601, 0.55 ) }
    dend_2 { pt3dadd( 4.47528, 170.097, 31.8883, 0.55 ) }
    dend_2 { pt3dadd( 5.49372, 172.741, 33.9287, 0.83 ) }
    dend_2 { pt3dadd( 6.32868, 174.796, 35.6756, 0.83 ) }
    dend_2 { pt3dadd( 8.01034, 178.609, 39.1404, 0.55 ) }
    dend_2 { pt3dadd( 8.53155, 179.698, 40.219, 0.55 ) }
    dend_2 { pt3dadd( 9.58893, 181.769, 42.4641, 0.83 ) }
    dend_2 { pt3dadd( 10.8869, 184.089, 45.043, 0.28 ) }
    dend_2 { pt3dadd( 11.4522, 184.903, 46.0177, 0.55 ) }
    dend_2 { pt3dadd( 12.512, 186.117, 47.6258, 0.28 ) }
    dend_2 { pt3dadd( 13.0777, 186.697, 48.4172, 0.28 ) }
    dend_2 { pt3dadd( 13.9124, 187.542, 49.6239, 0.55 ) }
    dend_2 { pt3dadd( 14.7343, 188.366, 50.7488, 0.55 ) }
    dend_2 { pt3dadd( 16.5663, 190.346, 53.1825, 0.55 ) }
    dend_2 { pt3dadd( 17.9458, 191.876, 54.9674, 0.55 ) }
    dend_2 { pt3dadd( 19.1196, 193.306, 56.4801, 0.83 ) }
    dend_2 { pt3dadd( 20.4971, 195.091, 58.1699, 0.28 ) }
    dend_2 { pt3dadd( 21.3575, 196.205, 59.0944, 0.83 ) }
    dend_2 { pt3dadd( 22.6322, 197.886, 60.2934, 0.83 ) }
    dend_2 { pt3dadd( 24.4625, 200.217, 61.5373, 0.28 ) }
    dend_2 { pt3dadd( 25.171, 201.094, 61.9212, 0.55 ) }
    dend_2 { pt3dadd( 25.8492, 201.842, 62.197, 0.83 ) }
    dend_2 { pt3dadd( 27.3356, 203.244, 62.7282, 0.28 ) }
    dend_2 { pt3dadd( 27.7499, 203.594, 62.8658, 0.83 ) }
    dend_2 { pt3dadd( 28.9873, 204.63, 63.2198, 0.28 ) }
    dend_2 { pt3dadd( 29.5316, 205.169, 63.3556, 0.83 ) }
    dend_2 { pt3dadd( 30.6357, 206.499, 63.6855, 0.28 ) }
    dend_2 { pt3dadd( 30.6466, 206.515, 63.69, 0.55 ) }
    dend_2 { pt3dadd( 31.0343, 207.177, 63.8609, 0.28 ) }
    dend_2 { pt3dadd( 31.6171, 208.127, 64.1212, 0.83 ) }
    dend_2 { pt3dadd( 32.6464, 209.79, 64.5801, 0.28 ) }
    dend_2 { pt3dadd( 33.3689, 210.921, 64.8999, 0.83 ) }
    dend_2 { pt3dadd( 35.1204, 213.668, 65.6359, 0.55 ) }
    dend_2 { pt3dadd( 35.6459, 214.495, 65.8195, 0.83 ) }
    dend_2 { pt3dadd( 36.5964, 215.938, 66.089, 0.28 ) }
    dend_2 { pt3dadd( 36.9606, 216.44, 66.1748, 0.83 ) }
    dend_2 { pt3dadd( 38.159, 217.936, 66.3782, 0.28 ) }
    dend_2 { pt3dadd( 39.2512, 219.31, 66.4892, 0.83 ) }
    dend_2 { pt3dadd( 40.4283, 220.921, 66.4865, 0.28 ) }
    dend_2 { pt3dadd( 40.9784, 221.746, 66.4001, 0.55 ) }
    dend_2 { pt3dadd( 41.871, 223.274, 66.107, 0.28 ) }
    dend_2 { pt3dadd( 42.191, 223.837, 65.9612, 0.55 ) }
    dend_2 { pt3dadd( 42.6793, 224.723, 65.6973, 0.28 ) }
    dend_2 { pt3dadd( 43.0479, 225.388, 65.5354, 0.83 ) }
    dend_2 { pt3dadd( 44.2166, 227.576, 65.1017, 0.28 ) }
    dend_2 { pt3dadd( 44.91, 228.864, 64.8427, 0.83 ) }
    dend_2 { pt3dadd( 46.196, 231.165, 64.3906, 0.28 ) }
    dend_2 { pt3dadd( 46.9118, 232.383, 64.1908, 0.83 ) }
    dend_2 { pt3dadd( 48.4787, 234.776, 63.875, 0.28 ) }
    dend_2 { pt3dadd( 48.811, 235.251, 63.827, 0.83 ) }
    dend_2 { pt3dadd( 50.3498, 237.262, 63.7477, 0.28 ) }
    dend_2 { pt3dadd( 50.9864, 238.034, 63.7211, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_2 { pt3dadd( 51.9786, 239.154, 63.665, 0.28 ) }
    dend_2 { pt3dadd( 52.745, 239.954, 63.5951, 0.28 ) }
    dend_2 { pt3dadd( 53.6076, 240.82, 63.4582, 0.83 ) }
    dend_2 { pt3dadd( 54.5868, 241.843, 63.3001, 0.28 ) }
    dend_2 { pt3dadd( 54.8383, 242.144, 63.2456, 0.83 ) }
    dend_2 { pt3dadd( 56.2371, 243.896, 62.8559, 0.28 ) }
    dend_2 { pt3dadd( 56.7593, 244.584, 62.6955, 0.83 ) }
    dend_2 { pt3dadd( 57.7759, 246.066, 62.3559, 0.28 ) }
    dend_2 { pt3dadd( 58.4977, 247.254, 62.0921, 0.83 ) }
    dend_2 { pt3dadd( 59.5956, 249.515, 61.6636, 0.28 ) }
    dend_2 { pt3dadd( 59.7959, 250.034, 61.5964, 0.83 ) }
    dend_2 { pt3dadd( 60.176, 251.272, 61.4876, 0.28 ) }
    dend_2 { pt3dadd( 60.4582, 252.37, 61.4315, 0.83 ) }
    dend_2 { pt3dadd( 60.7925, 253.831, 61.4157, 0.83 ) }
    dend_2 { pt3dadd( 61.3212, 256.281, 61.4186, 0.28 ) }
    dend_2 { pt3dadd( 61.8893, 259.209, 61.4952, 0.28 ) }
    dend_2 { pt3dadd( 61.9524, 259.56, 61.5028, 0.83 ) }
    dend_2 { pt3dadd( 62.3688, 261.823, 61.5304, 0.28 ) }
    dend_2 { pt3dadd( 62.4981, 262.443, 61.5398, 0.55 ) }
    // Section: dend_16, id: dend_16, parent: dend_14 (entry count 19/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -5.8177, -40.4289, 22.3692, 0.55 ) }
    dend_16 { pt3dadd( -7.12919, -40.5247, 24.2584, 0.55 ) }
    dend_16 { pt3dadd( -8.21972, -40.5363, 25.6537, 0.55 ) }
    dend_16 { pt3dadd( -9.28599, -40.5315, 26.7966, 0.55 ) }
    dend_16 { pt3dadd( -13.7987, -40.5111, 31.6333, 0.55 ) }
    dend_16 { pt3dadd( -16.6274, -40.4984, 34.6651, 0.55 ) }
    dend_16 { pt3dadd( -18.226, -40.4912, 36.3784, 0.55 ) }
    dend_16 { pt3dadd( -21.1672, -40.5495, 39.63, 0.55 ) }
    dend_16 { pt3dadd( -28.8, -41.0574, 49.9613, 0.55 ) }
    // Section: dend_15, id: dend_15, parent: dend_14 (entry count 28/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -5.8177, -40.4289, 22.3692, 0.55 ) }
    dend_15 { pt3dadd( -5.99116, -41.8797, 24.3854, 0.55 ) }
    dend_15 { pt3dadd( -6.4092, -44.7474, 27.5943, 0.55 ) }
    dend_15 { pt3dadd( -6.54509, -45.988, 28.6132, 0.55 ) }
    dend_15 { pt3dadd( -7.47324, -54.5986, 34.2914, 0.55 ) }
    dend_15 { pt3dadd( -7.69854, -57.2299, 35.7166, 0.55 ) }
    dend_15 { pt3dadd( -7.98748, -60.2886, 37.0939, 0.55 ) }
    dend_15 { pt3dadd( -8.28863, -63.2633, 38.0515, 0.55 ) }
    dend_15 { pt3dadd( -8.69882, -68.1588, 39.2156, 0.55 ) }
    dend_15 { pt3dadd( -8.93065, -70.4739, 39.6674, 0.55 ) }
    dend_15 { pt3dadd( -9.27112, -73.5886, 40.085, 0.55 ) }
    dend_15 { pt3dadd( -9.77363, -77.2153, 40.6969, 0.55 ) }
    dend_15 { pt3dadd( -11.1033, -84.8716, 42.417, 0.55 ) }
    dend_15 { pt3dadd( -11.6236, -87.4911, 43.1539, 0.55 ) }
    dend_15 { pt3dadd( -12.6561, -91.7227, 44.5569, 0.55 ) }
    dend_15 { pt3dadd( -13.0691, -93.2406, 45.0923, 0.55 ) }
    dend_15 { pt3dadd( -13.8393, -95.8447, 46.086, 0.55 ) }
    dend_15 { pt3dadd( -15.0507, -99.6245, 47.5642, 0.55 ) }
    dend_15 { pt3dadd( -15.6409, -101.468, 48.3471, 0.55 ) }
    dend_15 { pt3dadd( -16.486, -104.154, 49.4937, 0.55 ) }
    dend_15 { pt3dadd( -17.6768, -107.765, 51.0883, 0.55 ) }
    dend_15 { pt3dadd( -18.6149, -110.554, 52.4117, 0.55 ) }
    dend_15 { pt3dadd( -19.4894, -113.216, 53.8273, 0.55 ) }
    dend_15 { pt3dadd( -20.8015, -116.866, 55.9389, 0.55 ) }
    dend_15 { pt3dadd( -21.3896, -118.185, 56.872, 0.55 ) }
    dend_15 { pt3dadd( -22.8093, -120.987, 59.1373, 0.55 ) }
    dend_15 { pt3dadd( -24.5586, -123.939, 61.7012, 0.55 ) }
    dend_15 { pt3dadd( -26.8753, -127.618, 64.9379, 0.55 ) }
    dend_15 { pt3dadd( -29.0748, -131.309, 67.9534, 0.55 ) }
    dend_15 { pt3dadd( -30.8844, -134.543, 70.4241, 0.55 ) }
    dend_15 { pt3dadd( -31.4836, -135.892, 71.3644, 0.55 ) }
    dend_15 { pt3dadd( -32.5475, -138.889, 73.3543, 0.55 ) }
    dend_15 { pt3dadd( -33.2133, -141.054, 74.8088, 0.55 ) }
    dend_15 { pt3dadd( -34.4577, -146.087, 77.9655, 0.55 ) }
    dend_15 { pt3dadd( -34.9194, -148.8, 79.4889, 0.55 ) }
    dend_15 { pt3dadd( -35.5286, -152.974, 81.6833, 0.55 ) }
    dend_15 { pt3dadd( -35.9043, -155.676, 83.1355, 0.55 ) }
    dend_15 { pt3dadd( -36.3073, -158.801, 84.7943, 0.55 ) }
    dend_15 { pt3dadd( -36.5059, -159.903, 85.3396, 0.55 ) }
    dend_15 { pt3dadd( -37.1881, -162.91, 86.6915, 0.55 ) }
    dend_15 { pt3dadd( -37.8063, -165.167, 87.7241, 0.55 ) }
    dend_15 { pt3dadd( -38.1304, -166.414, 88.3562, 0.55 ) }
    dend_15 { pt3dadd( -38.5284, -168.124, 89.2234, 0.55 ) }
    dend_15 { pt3dadd( -39.923, -174.043, 92.2244, 0.55 ) }
    dend_15 { pt3dadd( -40.8888, -177.824, 94.3239, 0.55 ) }
    dend_15 { pt3dadd( -41.8982, -181.598, 96.592, 0.83 ) }
    dend_15 { pt3dadd( -42.5097, -183.703, 97.8991, 0.55 ) }
    dend_15 { pt3dadd( -42.8952, -184.838, 98.6378, 0.55 ) }
    dend_15 { pt3dadd( -43.1998, -185.625, 99.1827, 0.83 ) }
    dend_15 { pt3dadd( -43.978, -187.046, 100.226, 0.55 ) }
    dend_15 { pt3dadd( -44.4761, -187.775, 100.687, 0.83 ) }
    dend_15 { pt3dadd( -45.3129, -188.899, 101.181, 0.55 ) }
    dend_15 { pt3dadd( -46.7277, -190.671, 101.907, 0.55 ) }
    dend_15 { pt3dadd( -47.261, -191.315, 102.177, 0.83 ) }
    dend_15 { pt3dadd( -48.3988, -192.678, 102.795, 0.28 ) }
    dend_15 { pt3dadd( -48.888, -193.345, 103.082, 0.55 ) }
    dend_15 { pt3dadd( -49.9175, -195.076, 103.876, 0.28 ) }
    dend_15 { pt3dadd( -50.1259, -195.594, 104.139, 0.55 ) }
    dend_15 { pt3dadd( -50.6272, -197.4, 105.109, 0.55 ) }
    dend_15 { pt3dadd( -50.8186, -198.858, 106.034, 0.55 ) }
    dend_15 { pt3dadd( -50.9641, -200.53, 107.314, 0.55 ) }
    dend_15 { pt3dadd( -51.025, -201.911, 108.403, 0.83 ) }
    dend_15 { pt3dadd( -51.0349, -203.713, 109.876, 0.83 ) }
    dend_15 { pt3dadd( -50.9491, -205.617, 111.505, 0.55 ) }
    dend_15 { pt3dadd( -50.6124, -208.533, 114.122, 0.28 ) }
    dend_15 { pt3dadd( -50.3156, -211.243, 116.636, 0.83 ) }
    // Section: dend_13, id: dend_13, parent: dend_9 (entry count 94/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 4.70115, -34.6913, 0.359685, 0.55 ) }
    dend_13 { pt3dadd( 4.48578, -37.9974, 0.450055, 0.55 ) }
    dend_13 { pt3dadd( 4.23885, -39.7348, 0.480302, 0.55 ) }
    dend_13 { pt3dadd( 3.9412, -41.1997, 0.495391, 0.55 ) }
    dend_13 { pt3dadd( 3.32939, -43.6776, 0.50811, 0.28 ) }
    dend_13 { pt3dadd( 3.04555, -44.8166, 0.515655, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_13 { pt3dadd( 2.32048, -47.4921, 0.521668, 0.55 ) }
    dend_13 { pt3dadd( 1.9509, -48.8468, 0.514386, 0.55 ) }
    dend_13 { pt3dadd( 1.55931, -50.2798, 0.501464, 0.55 ) }
    dend_13 { pt3dadd( 0.993791, -52.2153, 0.485749, 0.55 ) }
    dend_13 { pt3dadd( 0.705239, -53.1816, 0.486703, 0.55 ) }
    dend_13 { pt3dadd( -0.109764, -55.9249, 0.513171, 0.55 ) }
    dend_13 { pt3dadd( -0.803447, -58.3315, 0.52103, 0.55 ) }
    dend_13 { pt3dadd( -1.2124, -59.7677, 0.504403, 0.55 ) }
    dend_13 { pt3dadd( -2.22814, -63.3994, 0.403048, 0.55 ) }
    dend_13 { pt3dadd( -2.73998, -65.2981, 0.330934, 0.55 ) }
    dend_13 { pt3dadd( -3.46419, -67.8074, 0.221564, 0.55 ) }
    dend_13 { pt3dadd( -4.49706, -71.1652, 0.0629852, 0.55 ) }
    dend_13 { pt3dadd( -5.57132, -74.4043, -0.099402, 0.55 ) }
    dend_13 { pt3dadd( -6.45866, -77.0509, -0.248317, 0.55 ) }
    dend_13 { pt3dadd( -7.46111, -80.2223, -0.447907, 0.55 ) }
    dend_13 { pt3dadd( -8.23847, -82.6496, -0.614363, 0.55 ) }
    dend_13 { pt3dadd( -8.92935, -84.9254, -0.754586, 0.28 ) }
    dend_13 { pt3dadd( -9.93419, -88.2072, -0.875348, 0.55 ) }
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 18/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 4.70115, -34.6913, 0.359685, 0.83 ) }
    dend_10 { pt3dadd( 5.75675, -38.2826, 0.1273, 0.83 ) }
    dend_10 { pt3dadd( 6.38179, -40.596, -0.0623609, 0.83 ) }
    dend_10 { pt3dadd( 6.81312, -42.3251, -0.322981, 0.83 ) }
    dend_10 { pt3dadd( 7.33274, -44.408, -0.636946, 0.83 ) }
    dend_10 { pt3dadd( 8.1401, -47.6444, -1.12477, 0.83 ) }
    dend_10 { pt3dadd( 8.99807, -51.0837, -1.64317, 0.83 ) }
    dend_10 { pt3dadd( 9.6211, -54.6739, -2.25236, 0.83 ) }
    dend_10 { pt3dadd( 10.1983, -57.9318, -2.94427, 0.83 ) }
    // Section: dend_12, id: dend_12, parent: dend_10 (entry count 27/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 10.1983, -57.9318, -2.94427, 0.55 ) }
    dend_12 { pt3dadd( 9.998, -61.9837, -3.60386, 0.55 ) }
    dend_12 { pt3dadd( 9.79562, -64.0564, -3.94331, 0.55 ) }
    dend_12 { pt3dadd( 9.5058, -66.6158, -4.49532, 0.55 ) }
    dend_12 { pt3dadd( 9.15415, -69.7149, -5.36325, 0.55 ) }
    dend_12 { pt3dadd( 8.8295, -72.3405, -6.20796, 0.55 ) }
    dend_12 { pt3dadd( 8.48329, -75.5578, -7.29881, 0.55 ) }
    dend_12 { pt3dadd( 8.29614, -78.228, -8.22873, 0.55 ) }
    dend_12 { pt3dadd( 8.00488, -82.543, -9.81023, 0.55 ) }
    dend_12 { pt3dadd( 7.81385, -85.938, -11.0695, 0.55 ) }
    dend_12 { pt3dadd( 7.67944, -88.6623, -11.987, 0.55 ) }
    dend_12 { pt3dadd( 7.68112, -90.2156, -12.4432, 0.55 ) }
    dend_12 { pt3dadd( 7.79227, -92.7175, -12.6815, 0.55 ) }
    dend_12 { pt3dadd( 7.99778, -94.6871, -12.3566, 0.55 ) }
    dend_12 { pt3dadd( 8.26586, -96.6798, -11.515, 0.55 ) }
    dend_12 { pt3dadd( 8.75483, -101.24, -8.88912, 0.55 ) }
    dend_12 { pt3dadd( 8.84795, -102.26, -8.16736, 0.55 ) }
    dend_12 { pt3dadd( 9.50134, -110.164, -1.45946, 0.28 ) }
    dend_12 { pt3dadd( 9.63364, -111.377, -0.29998, 0.55 ) }
    dend_12 { pt3dadd( 9.73721, -112.484, 0.876478, 0.28 ) }
    dend_12 { pt3dadd( 9.91015, -114.627, 2.97028, 0.28 ) }
    dend_12 { pt3dadd( 10.0986, -115.987, 4.1627, 0.55 ) }
    dend_12 { pt3dadd( 10.7929, -119.923, 6.90086, 0.55 ) }
    dend_12 { pt3dadd( 11.2495, -121.938, 8.0616, 0.55 ) }
    dend_12 { pt3dadd( 12.1163, -125.837, 10.1006, 0.55 ) }
    dend_12 { pt3dadd( 13.1946, -131.099, 12.6482, 0.55 ) }
    dend_12 { pt3dadd( 13.6532, -133.818, 13.8394, 0.55 ) }
    dend_12 { pt3dadd( 14.4932, -141.64, 16.7287, 0.55 ) }
    dend_12 { pt3dadd( 14.6641, -147.64, 18.543, 0.55 ) }
    dend_12 { pt3dadd( 14.4498, -152.202, 19.7359, 0.55 ) }
    dend_12 { pt3dadd( 13.8869, -157.507, 20.7514, 0.55 ) }
    dend_12 { pt3dadd( 13.1795, -161.114, 21.3573, 0.55 ) }
    dend_12 { pt3dadd( 12.3801, -164.033, 21.6792, 0.55 ) }
    dend_12 { pt3dadd( 10.8648, -168.488, 21.7465, 0.55 ) }
    dend_12 { pt3dadd( 9.43051, -172.203, 21.7088, 0.28 ) }
    dend_12 { pt3dadd( 8.292, -175.276, 21.9245, 0.28 ) }
    dend_12 { pt3dadd( 7.63977, -177.122, 22.0667, 0.28 ) }
    dend_12 { pt3dadd( 7.32773, -178.126, 22.2148, 0.55 ) }
    dend_12 { pt3dadd( 6.90751, -179.402, 22.5284, 0.28 ) }
    dend_12 { pt3dadd( 6.36667, -180.657, 23.2289, 0.83 ) }
    dend_12 { pt3dadd( 4.86585, -183.127, 25.3518, 0.55 ) }
    dend_12 { pt3dadd( 4.39271, -183.713, 26.0154, 0.55 ) }
    dend_12 { pt3dadd( 3.4016, -184.756, 27.1878, 0.28 ) }
    dend_12 { pt3dadd( 2.54978, -185.544, 28.1452, 0.55 ) }
    dend_12 { pt3dadd( -1.81206, -189.07, 32.1504, 0.28 ) }
    dend_12 { pt3dadd( -3.03197, -189.966, 33.0858, 0.55 ) }
    dend_12 { pt3dadd( -5.38591, -191.513, 34.6368, 0.28 ) }
    dend_12 { pt3dadd( -8.46417, -193.62, 36.4321, 0.55 ) }
    dend_12 { pt3dadd( -12.736, -196.724, 38.5836, 0.28 ) }
    dend_12 { pt3dadd( -17.9315, -200.639, 40.7306, 0.28 ) }
    dend_12 { pt3dadd( -19.5667, -201.911, 41.0474, 0.55 ) }
    dend_12 { pt3dadd( -24.3494, -205.61, 42.079, 0.28 ) }
    dend_12 { pt3dadd( -26.5537, -207.373, 42.6437, 0.28 ) }
    dend_12 { pt3dadd( -27.6083, -208.248, 43.2034, 0.55 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 81/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 10.1983, -57.9318, -2.94427, 0.55 ) }
    dend_11 { pt3dadd( 12.6915, -59.1035, -3.14727, 0.55 ) }
    dend_11 { pt3dadd( 16.2129, -60.9459, -3.33792, 0.55 ) }
    dend_11 { pt3dadd( 18.6592, -62.2724, -3.43593, 0.55 ) }
    dend_11 { pt3dadd( 21.8157, -64.1854, -3.51236, 0.55 ) }
    dend_11 { pt3dadd( 23.6318, -65.4429, -3.54738, 0.55 ) }
    dend_11 { pt3dadd( 27.2578, -68.2195, -3.54969, 0.55 ) }
    dend_11 { pt3dadd( 28.8109, -69.6476, -3.52305, 0.55 ) }
    dend_11 { pt3dadd( 29.7963, -70.7695, -3.45177, 0.55 ) }
    dend_11 { pt3dadd( 31.6217, -73.1245, -3.18352, 0.55 ) }
    dend_11 { pt3dadd( 33.6838, -75.9027, -2.73665, 0.28 ) }
    dend_11 { pt3dadd( 34.697, -77.1822, -2.48426, 0.83 ) }
    dend_11 { pt3dadd( 36.4256, -79.2222, -2.02541, 0.28 ) }
    dend_11 { pt3dadd( 38.7441, -81.626, -1.45379, 0.55 ) }
    dend_11 { pt3dadd( 42.0011, -84.6261, -0.729754, 0.55 ) }
    dend_11 { pt3dadd( 45.4888, -87.436, -0.0771433, 0.55 ) }
    dend_11 { pt3dadd( 49.5607, -90.4408, 0.667839, 0.55 ) }
    dend_11 { pt3dadd( 52.9356, -92.7416, 1.22586, 0.55 ) }
    dend_11 { pt3dadd( 55.1397, -94.1058, 1.57157, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_11 { pt3dadd( 56.6059, -94.9553, 1.71686, 0.55 ) }
    dend_11 { pt3dadd( 59.1822, -96.4421, 1.65331, 0.55 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_20, dend_7, dend_0, dend_22, dend_21, dend_17, dend_8, dend_4, dend_1, dend_19, dend_18, dend_14, dend_9, dend_6, dend_5, dend_3, dend_2, dend_16, dend_15, dend_13, dend_10, dend_12, dend_11]}
    ModelViewParmSubset_2 = new SectionList()
    dend_20 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_20, dend_7, dend_0, dend_22, dend_21, dend_17, dend_8, dend_4, dend_1, dend_19, dend_18, dend_14, dend_9, dend_6, dend_5, dend_3, dend_2, dend_16, dend_15, dend_13, dend_10, dend_12, dend_11]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()

    // Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_6, dend_5]}
    ModelViewParmSubset_5 = new SectionList()
    dend_6 ModelViewParmSubset_5.append()
    dend_5 ModelViewParmSubset_5.append()

    // Group: {name=ModelViewParmSubset_6, groups=[], sections=[dend_20, dend_7, dend_0, axon_0, dend_22, dend_21, dend_17, dend_8, dend_4, dend_1, axon_1, dend_19, dend_18, dend_14, dend_9, dend_6, dend_5, dend_3, dend_2, dend_16, dend_15, dend_13, dend_10, dend_12, dend_11]}
    ModelViewParmSubset_6 = new SectionList()
    dend_20 ModelViewParmSubset_6.append()
    dend_7 ModelViewParmSubset_6.append()
    dend_0 ModelViewParmSubset_6.append()
    axon_0 ModelViewParmSubset_6.append()
    dend_22 ModelViewParmSubset_6.append()
    dend_21 ModelViewParmSubset_6.append()
    dend_17 ModelViewParmSubset_6.append()
    dend_8 ModelViewParmSubset_6.append()
    dend_4 ModelViewParmSubset_6.append()
    dend_1 ModelViewParmSubset_6.append()
    axon_1 ModelViewParmSubset_6.append()
    dend_19 ModelViewParmSubset_6.append()
    dend_18 ModelViewParmSubset_6.append()
    dend_14 ModelViewParmSubset_6.append()
    dend_9 ModelViewParmSubset_6.append()
    dend_6 ModelViewParmSubset_6.append()
    dend_5 ModelViewParmSubset_6.append()
    dend_3 ModelViewParmSubset_6.append()
    dend_2 ModelViewParmSubset_6.append()
    dend_16 ModelViewParmSubset_6.append()
    dend_15 ModelViewParmSubset_6.append()
    dend_13 ModelViewParmSubset_6.append()
    dend_10 ModelViewParmSubset_6.append()
    dend_12 ModelViewParmSubset_6.append()
    dend_11 ModelViewParmSubset_6.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_20 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_17 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_4 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_19 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_18 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_3 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_2 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_15 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_13 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_12 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_11 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_7 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_0 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_8 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_9 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_1 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_14 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_10 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_16 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_21 OneSecGrp_SectionRef_7.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_22 OneSecGrp_SectionRef_6.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_7, dend_7, dend_7, dend_0, dend_0, dend_0, axon_0, axon_0, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_8, dend_8, dend_8, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_14, dend_14, dend_14, dend_14, dend_9, dend_9, dend_9, dend_6, dend_5, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_6 all.append()
    dend_5 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.993125  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.0  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.005611  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.068459995  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.517764  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 6.3E-5  // units: S cm-2
        e_pas_nml2 = -64.6017  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 3.45E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.077616  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.002099  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 1.13999995E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.26087198  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-5  // units: S cm-2
        e_pas_nml2 = -69.78141  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 3.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.395881  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009986  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 5.0100003E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009728  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 2.7999999E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cACint_237_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cACint_237_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_20 nseg = 7
    dend_17 nseg = 5
    dend_4 nseg = 7
    dend_19 nseg = 3
    dend_18 nseg = 3
    dend_3 nseg = 5
    dend_2 nseg = 13
    dend_15 nseg = 11
    dend_13 nseg = 3
    dend_12 nseg = 9
    dend_11 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cACint209_L4_MC_f8c62d11b0_0_0


