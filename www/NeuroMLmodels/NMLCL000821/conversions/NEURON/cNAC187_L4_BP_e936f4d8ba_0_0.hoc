// Cell: cNAC187_L4_BP_e936f4d8ba_0_0
/*
{
  "id" : "cNAC187_L4_BP_e936f4d8ba_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-3.08452, 6.27464, 0.312461, 1.46623", "-2.79927, 5.64032, 0.287115, 2.64844", "-2.51401, 5.00599, 0.26177, 4.10361", "-2.22875, 4.37167, 0.236425, 4.91598", "-1.94349, 3.73735, 0.21108, 5.72835", "-1.65823, 3.10303, 0.185734, 6.53421", "-1.37297, 2.46871, 0.160389, 7.31212", "-1.08771, 1.83438, 0.135044, 8.08989", "-0.802456, 1.20006, 0.109699, 8.85679", "-0.517198, 0.56574, 0.0843534, 8.93483", "-0.23194, -0.0685822, 0.0590082, 8.92633", "0.0533189, -0.702904, 0.033663, 8.91784", "0.338577, -1.33723, 0.00831775, 8.90934", "0.623836, -1.97155, -0.0170275, 8.90084", "0.909094, -2.60587, -0.0423727, 8.82493", "1.19435, -3.24019, -0.067718, 7.82232", "1.47961, -3.87451, -0.0930632, 6.5965", "1.76487, -4.50884, -0.118408, 5.37067", "2.05013, -5.14316, -0.143754, 4.14485", "2.33539, -5.77748, -0.169099, 2.91903", "2.62064, -6.4118, -0.194444, 1.76337" ]
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "1.61629, -5.71525, -1.26548, 1.33", "2.51986, -9.54392, -1.98996, 1.33", "4.01795, -15.8917, -3.19115, 0.66", "5.17782, -20.8064, -4.12113, 0.66", "6.41377, -26.0434, -5.11212, 1.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500001318721313
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "2.62064, -6.4118, -0.194444, 0.33", "8.77276, -20.0921, -0.194444, 0.33", "14.9249, -33.7725, -0.194444, 0.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "6.41377, -26.0434, -5.11212, 0.66", "7.90957, -38.034, -1.73494, 0.66", "10.1177, -55.8437, 3.30774, 0.66", "12.8361, -77.5757, 9.63706, 0.66", "15.0106, -94.344, 14.5305, 0.66", "16.2837, -104.073, 17.3596, 0.66", "16.693, -107.303, 18.2941, 0.66", "17.2694, -111.682, 19.5914, 0.66", "17.7425, -115.779, 20.847, 0.66", "18.2707, -120.51, 22.2085, 0.66", "18.5104, -123.082, 22.6198, 0.66", "18.7203, -126.308, 22.8461, 0.66", "18.9786, -131.199, 22.6214, 0.66", "19.2247, -137.645, 22.0271, 0.66", "19.382, -140.452, 21.7347, 0.66", "20.2023, -153.633, 20.2237, 0.66", "20.4615, -156.743, 19.8035, 0.66", "21.3955, -166.356, 18.2386, 0.66", "21.8285, -170.414, 17.5364, 0.66", "22.7697, -177.859, 16.3199, 0.66", "23.3656, -182.111, 15.9001, 0.66", "24.0263, -186.227, 15.9066, 0.66", "24.6912, -190.193, 16.054, 0.66", "25.1864, -194.022, 16.2314, 0.66", "25.6202, -198.087, 16.2714, 0.66", "26.0527, -204.381, 16.2804, 0.66", "26.3856, -208.197, 16.4576, 0.66", "26.7359, -212.824, 16.75, 0.66", "27.1842, -219.091, 17.1191, 0.66", "27.4003, -223.101, 17.1756, 0.66", "27.6841, -228.507, 17.009, 0.66", "28.1041, -233.595, 16.779, 0.66" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "6.41377, -26.0434, -5.11212, 0.66", "8.81514, -27.9911, -5.12847, 0.66", "14.3358, -32.4689, -5.16607, 0.33", "26.9726, -42.7186, -5.25213, 0.33", "27.4494, -43.1053, -5.25537, 0.66", "32.549, -47.2416, -5.2901, 0.33" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "14.9249, -33.7725, -0.194444, 0.33", "21.077, -47.4528, -0.194444, 0.33", "27.2291, -61.1331, -0.194444, 0.33" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "28.1041, -233.595, 16.779, 0.66", "30.904, -236.174, 17.076, 0.66", "32.5159, -237.629, 17.4886, 0.66", "35.1954, -239.825, 18.8271, 0.66", "36.9141, -241.12, 19.8346, 0.66", "40.2225, -243.477, 21.9715, 0.66", "42.7588, -245.183, 23.5985, 0.66", "45.2358, -246.715, 25.3508, 0.66", "50.5735, -249.633, 29.0554, 0.66", "53.6174, -251.136, 31.1278, 0.66", "57.1802, -252.867, 33.6023, 0.33", "58.6085, -253.548, 34.5304, 0.33", "59.1108, -253.761, 34.8214, 0.66", "62.1196, -254.864, 36.3462, 0.33", "62.7478, -255.077, 36.4952, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "28.1041, -233.595, 16.779, 0.66", "29.2613, -238.231, 18.3485, 0.66", "30.7532, -244.22, 20.4096, 0.66", "33.8833, -256.201, 24.3174, 0.66", "35.1832, -261.427, 25.9711, 0.66", "36.8785, -267.781, 28.0126, 0.66", "38.5005, -274.251, 29.91, 0.66", "39.3791, -277.896, 30.8605, 0.66", "40.3733, -282.959, 32.0042, 0.66", "42.1173, -292.723, 33.8549, 0.66", "43.0471, -298.288, 34.6523, 0.66", "44.0564, -304.824, 35.4958, 0.66", "44.6871, -310.383, 35.897, 0.66", "44.9423, -313.401, 36.1002, 0.66", "45.5907, -323.562, 36.6739, 0.66", "45.866, -328.831, 36.8178, 0.66", "46.1079, -336.143, 36.9853, 0.66", "46.4993, -341.98, 37.315, 0.66", "46.667, -344.572, 37.4328, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "46.667, -344.572, 37.4328, 0.66", "47.1597, -346.975, 37.6389, 0.66", "47.9314, -350.852, 38.4235, 0.66", "48.7472, -354.979, 39.4076, 0.66", "49.2223, -357.688, 40.0984, 0.66", "49.8244, -361.438, 40.9832, 0.66", "50.7116, -368.091, 42.3911, 0.66", "51.1729, -372.651, 43.3229, 0.66", "51.4504, -375.778, 44.015, 0.66", "51.7358, -379.055, 44.6488, 0.66", "52.0714, -382.733, 45.3098, 0.66", "52.3182, -385.251, 45.7255, 0.66", "52.7072, -388.713, 46.1727, 0.66", "53.1242, -391.896, 46.5394, 0.66", "54.1829, -399.368, 47.5604, 0.66", "54.6737, -402.333, 47.9935, 0.66", "55.812, -409.784, 49.0567, 0.66", "56.203, -412.796, 49.3972, 0.66", "56.4979, -415.707, 49.6419, 0.66", "56.7003, -418.335, 49.77, 0.66", "56.9559, -422.644, 49.9518, 0.66", "57.1101, -426.334, 50.0901, 0.66", "57.2725, -433.447, 50.1408, 0.66", "57.4331, -437.037, 50.1439, 0.66", "57.5807, -439.83, 50.1539, 0.66", "57.8245, -443.586, 50.1772, 0.66", "58.7511, -457.716, 50.2268, 0.66", "59.1262, -462.912, 50.1354, 0.66", "60.0982, -476.565, 49.6988, 0.66", "60.459, -481.729, 49.4659, 0.66", "60.8509, -486.806, 49.263, 0.66", "61.1615, -490.335, 49.1323, 0.66", "61.6305, -495.166, 48.9081, 0.66", "62.0608, -500.54, 48.7151, 0.66", "62.4027, -506.416, 48.3227, 0.66", "62.5756, -509.699, 48.1175, 0.66", "62.7242, -511.983, 48.0363, 0.66", "63.4567, -520.807, 48.1932, 0.66", "63.6854, -523.557, 48.2505, 0.66", "63.9381, -528.086, 48.1774, 0.66", "64.174, -532.618, 48.0336, 0.66", "64.4261, -536.126, 47.9304, 0.66", "65.2471, -544.689, 47.9734, 0.66", "66.4002, -554.5, 48.2155, 0.66", "67.2162, -561.18, 48.3332, 0.66", "67.595, -564.542, 48.3355, 0.66", "68.921, -576.861, 48.1113, 0.66", "69.559, -584.788, 47.7245, 0.66", "69.7292, -587.107, 47.5666, 0.66", "69.9896, -590.872, 47.2231, 0.66", "70.3103, -596.402, 46.5633, 0.66", "70.3686, -598.799, 46.2144, 0.66", "70.3282, -605.236, 45.0659, 0.66", "70.2265, -618.674, 42.4474, 0.66", "70.2976, -625.591, 41.2856, 0.66", "70.3881, -628.167, 40.9251, 0.33", "70.4968, -629.883, 40.7344, 1.33", "70.9622, -633.933, 40.4666, 0.66", "71.8317, -638.794, 40.3526, 0.66", "72.5697, -642.235, 40.3445, 0.66", "73.4076, -645.711, 40.4214, 0.66", "74.1554, -648.553, 40.4447, 0.66", "77.391, -660.21, 40.8153, 0.66", "77.853, -661.851, 40.912, 0.33", "78.4671, -664.198, 41.0622, 1.33", "79.0465, -666.532, 41.1655, 0.66", "79.4753, -668.366, 41.2489, 0.33", "80.6142, -673.431, 41.5264, 0.66", "81.1025, -676.036, 41.9929, 0.66", "81.7305, -679.468, 42.7991, 0.33" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 17
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "46.667, -344.572, 37.4328, 0.66", "44.0011, -353.185, 38.6611, 0.66", "41.7909, -360.502, 39.5893, 0.66", "40.4051, -365.969, 40.5811, 0.33", "38.6112, -373.641, 42.237, 0.33", "38.3368, -374.89, 42.5689, 0.66", "37.5506, -378.936, 43.7207, 0.33", "37.0957, -381.874, 44.7071, 0.66", "36.1761, -388.842, 46.7833, 0.33", "36.0615, -389.942, 47.1367, 0.66", "35.2677, -397.388, 49.5109, 0.33", "35.0725, -401.233, 50.8193, 0.33", "35.0755, -405.401, 52.2865, 0.66", "35.2425, -410.38, 54.1363, 0.33", "35.4037, -413.07, 55.0605, 0.33", "35.6148, -414.57, 55.6249, 0.66", "37.3151, -420.803, 58.7399, 0.33", "37.612, -421.702, 59.3146, 0.66", "38.5311, -423.951, 60.9609, 0.33", "38.9894, -425.105, 61.8389, 0.33", "39.3901, -426.339, 62.6518, 0.66", "40.5056, -431.004, 65.2692, 0.33", "40.8087, -433.898, 66.471, 0.33", "40.9138, -434.997, 66.847, 0.66", "41.1127, -437.141, 67.3771, 0.33", "41.1809, -438.283, 67.5863, 0.66", "41.2298, -439.741, 67.7717, 0.33", "41.2345, -441.258, 67.8617, 0.66", "41.2193, -443.48, 68.0446, 0.33", "41.2037, -444.289, 68.1328, 0.66", "41.0185, -450.988, 69.0494, 0.33", "40.9981, -451.416, 69.1129, 0.66", "40.8778, -452.957, 69.3679, 0.33", "40.7948, -453.76, 69.5115, 0.66", "40.7063, -455.932, 70.089, 0.33", "40.7181, -456.921, 70.4079, 0.66", "40.8336, -458.683, 71.0373, 0.33", "40.9414, -459.928, 71.4927, 0.66", "41.1202, -461.351, 72.0367, 0.33", "42.138, -467.954, 74.7429, 0.33", "42.5084, -469.874, 75.6139, 0.66" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "81.7305, -679.468, 42.7991, 0.66", "81.8736, -682.882, 42.1322, 0.66", "82.2396, -684.617, 42.0805, 1.33", "82.6269, -686.098, 42.1464, 0.66", "83.0487, -687.964, 42.2185, 0.66", "84.0825, -691.969, 42.5244, 0.33", "85.4493, -696.803, 42.9594, 0.66", "87.4806, -703.012, 43.8255, 0.66", "88.6104, -706.094, 44.3118, 0.66", "89.8697, -709.537, 44.7397, 0.33", "91.3835, -713.955, 45.1283, 0.33", "91.7365, -715.212, 45.1808, 0.66", "91.9323, -716.269, 45.0441, 0.33", "92.0004, -717.196, 44.8218, 0.66", "92.2603, -722.622, 43.3152, 0.33", "92.3875, -724.888, 42.6665, 0.66", "92.4377, -727.041, 42.01, 0.33", "92.6601, -733.138, 40.4309, 0.33", "92.8974, -736.699, 39.607, 0.66", "93.4991, -743.127, 38.3001, 0.33", "93.8678, -746.147, 37.8204, 0.66", "94.2843, -749.122, 37.3978, 1.33", "95.4131, -755.892, 36.6448, 0.33", "96.0765, -759.227, 36.4666, 0.33", "96.3545, -760.535, 36.4261, 0.66", "97.0854, -763.825, 36.4626, 0.33", "98.0705, -768.232, 36.6103, 0.33", "98.4725, -769.837, 36.6966, 1.33", "99.6063, -774.448, 36.9598, 0.33", "99.9571, -776.044, 37.1115, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "81.7305, -679.468, 42.7991, 0.66", "80.1779, -681.191, 41.7712, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "99.9571, -776.044, 37.1115, 0.66", "98.2985, -775.783, 38.0218, 0.66" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "99.9571, -776.044, 37.1115, 0.66", "100.159, -777.286, 36.9635, 0.66", "101.06, -782.819, 36.3043, 0.33", "101.347, -784.578, 36.0946, 1.33" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "101.347, -784.578, 36.0946, 0.33", "109.979, -794.574, 40.3205, 0.33", "110.779, -795.553, 40.6627, 1.33", "112.978, -798.3, 41.4505, 0.33", "113.409, -798.876, 41.5396, 0.66", "115.389, -801.642, 41.6739, 0.33", "115.991, -802.482, 41.7146, 0.66", "116.345, -803.274, 41.4241, 0.33", "116.826, -804.265, 40.9878, 0.66", "118.535, -807.373, 39.1889, 0.33", "119.194, -808.502, 38.4245, 1.33" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "101.347, -784.578, 36.0946, 0.33", "102.621, -793.435, 39.1522, 0.33", "103.316, -798.265, 40.8198, 0.33", "103.425, -799.024, 41.0819, 0.66", "104.143, -804.009, 42.803, 0.33", "104.238, -804.674, 43.0324, 0.66" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_11", "dend_8", "dend_8", "dend_8", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cNAC_149_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cNAC_149_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cNAC187_L4_BP_e936f4d8ba_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_12, id: dend_12, parent: dend_2
create dend_12
public dend_12
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_5, id: dend_5, parent: dend_3
create dend_5
public dend_5
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_11, id: dend_11, parent: dend_7
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_15
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cNAC_149_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cNAC_149_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_0(0), soma_0(0.4500001318721313)
    connect axon_0(0), soma_0(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_12(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_5(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_11(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -3.08452, 6.27464, 0.312461, 1.46623 ) }
    soma_0 { pt3dadd( -2.79927, 5.64032, 0.287115, 2.64844 ) }
    soma_0 { pt3dadd( -2.51401, 5.00599, 0.26177, 4.10361 ) }
    soma_0 { pt3dadd( -2.22875, 4.37167, 0.236425, 4.91598 ) }
    soma_0 { pt3dadd( -1.94349, 3.73735, 0.21108, 5.72835 ) }
    soma_0 { pt3dadd( -1.65823, 3.10303, 0.185734, 6.53421 ) }
    soma_0 { pt3dadd( -1.37297, 2.46871, 0.160389, 7.31212 ) }
    soma_0 { pt3dadd( -1.08771, 1.83438, 0.135044, 8.08989 ) }
    soma_0 { pt3dadd( -0.802456, 1.20006, 0.109699, 8.85679 ) }
    soma_0 { pt3dadd( -0.517198, 0.56574, 0.0843534, 8.93483 ) }
    soma_0 { pt3dadd( -0.23194, -0.0685822, 0.0590082, 8.92633 ) }
    soma_0 { pt3dadd( 0.0533189, -0.702904, 0.033663, 8.91784 ) }
    soma_0 { pt3dadd( 0.338577, -1.33723, 0.00831775, 8.90934 ) }
    soma_0 { pt3dadd( 0.623836, -1.97155, -0.0170275, 8.90084 ) }
    soma_0 { pt3dadd( 0.909094, -2.60587, -0.0423727, 8.82493 ) }
    soma_0 { pt3dadd( 1.19435, -3.24019, -0.067718, 7.82232 ) }
    soma_0 { pt3dadd( 1.47961, -3.87451, -0.0930632, 6.5965 ) }
    soma_0 { pt3dadd( 1.76487, -4.50884, -0.118408, 5.37067 ) }
    soma_0 { pt3dadd( 2.05013, -5.14316, -0.143754, 4.14485 ) }
    soma_0 { pt3dadd( 2.33539, -5.77748, -0.169099, 2.91903 ) }
    soma_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 1.76337 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 21/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 1.61629, -5.71525, -1.26548, 1.33 ) }
    dend_0 { pt3dadd( 2.51986, -9.54392, -1.98996, 1.33 ) }
    dend_0 { pt3dadd( 4.01795, -15.8917, -3.19115, 0.66 ) }
    dend_0 { pt3dadd( 5.17782, -20.8064, -4.12113, 0.66 ) }
    dend_0 { pt3dadd( 6.41377, -26.0434, -5.11212, 1.33 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 26/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 8.77276, -20.0921, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 29/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 6.41377, -26.0434, -5.11212, 0.66 ) }
    dend_2 { pt3dadd( 7.90957, -38.034, -1.73494, 0.66 ) }
    dend_2 { pt3dadd( 10.1177, -55.8437, 3.30774, 0.66 ) }
    dend_2 { pt3dadd( 12.8361, -77.5757, 9.63706, 0.66 ) }
    dend_2 { pt3dadd( 15.0106, -94.344, 14.5305, 0.66 ) }
    dend_2 { pt3dadd( 16.2837, -104.073, 17.3596, 0.66 ) }
    dend_2 { pt3dadd( 16.693, -107.303, 18.2941, 0.66 ) }
    dend_2 { pt3dadd( 17.2694, -111.682, 19.5914, 0.66 ) }
    dend_2 { pt3dadd( 17.7425, -115.779, 20.847, 0.66 ) }
    dend_2 { pt3dadd( 18.2707, -120.51, 22.2085, 0.66 ) }
    dend_2 { pt3dadd( 18.5104, -123.082, 22.6198, 0.66 ) }
    dend_2 { pt3dadd( 18.7203, -126.308, 22.8461, 0.66 ) }
    dend_2 { pt3dadd( 18.9786, -131.199, 22.6214, 0.66 ) }
    dend_2 { pt3dadd( 19.2247, -137.645, 22.0271, 0.66 ) }
    dend_2 { pt3dadd( 19.382, -140.452, 21.7347, 0.66 ) }
    dend_2 { pt3dadd( 20.2023, -153.633, 20.2237, 0.66 ) }
    dend_2 { pt3dadd( 20.4615, -156.743, 19.8035, 0.66 ) }
    dend_2 { pt3dadd( 21.3955, -166.356, 18.2386, 0.66 ) }
    dend_2 { pt3dadd( 21.8285, -170.414, 17.5364, 0.66 ) }
    dend_2 { pt3dadd( 22.7697, -177.859, 16.3199, 0.66 ) }
    dend_2 { pt3dadd( 23.3656, -182.111, 15.9001, 0.66 ) }
    dend_2 { pt3dadd( 24.0263, -186.227, 15.9066, 0.66 ) }
    dend_2 { pt3dadd( 24.6912, -190.193, 16.054, 0.66 ) }
    dend_2 { pt3dadd( 25.1864, -194.022, 16.2314, 0.66 ) }
    dend_2 { pt3dadd( 25.6202, -198.087, 16.2714, 0.66 ) }
    dend_2 { pt3dadd( 26.0527, -204.381, 16.2804, 0.66 ) }
    dend_2 { pt3dadd( 26.3856, -208.197, 16.4576, 0.66 ) }
    dend_2 { pt3dadd( 26.7359, -212.824, 16.75, 0.66 ) }
    dend_2 { pt3dadd( 27.1842, -219.091, 17.1191, 0.66 ) }
    dend_2 { pt3dadd( 27.4003, -223.101, 17.1756, 0.66 ) }
    dend_2 { pt3dadd( 27.6841, -228.507, 17.009, 0.66 ) }
    dend_2 { pt3dadd( 28.1041, -233.595, 16.779, 0.66 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 61/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 6.41377, -26.0434, -5.11212, 0.66 ) }
    dend_1 { pt3dadd( 8.81514, -27.9911, -5.12847, 0.66 ) }
    dend_1 { pt3dadd( 14.3358, -32.4689, -5.16607, 0.33 ) }
    dend_1 { pt3dadd( 26.9726, -42.7186, -5.25213, 0.33 ) }
    dend_1 { pt3dadd( 27.4494, -43.1053, -5.25537, 0.66 ) }
    dend_1 { pt3dadd( 32.549, -47.2416, -5.2901, 0.33 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 67/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 21.077, -47.4528, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 27.2291, -61.1331, -0.194444, 0.33 ) }
    // Section: dend_12, id: dend_12, parent: dend_2 (entry count 70/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 28.1041, -233.595, 16.779, 0.66 ) }
    dend_12 { pt3dadd( 30.904, -236.174, 17.076, 0.66 ) }
    dend_12 { pt3dadd( 32.5159, -237.629, 17.4886, 0.66 ) }
    dend_12 { pt3dadd( 35.1954, -239.825, 18.8271, 0.66 ) }
    dend_12 { pt3dadd( 36.9141, -241.12, 19.8346, 0.66 ) }
    dend_12 { pt3dadd( 40.2225, -243.477, 21.9715, 0.66 ) }
    dend_12 { pt3dadd( 42.7588, -245.183, 23.5985, 0.66 ) }
    dend_12 { pt3dadd( 45.2358, -246.715, 25.3508, 0.66 ) }
    dend_12 { pt3dadd( 50.5735, -249.633, 29.0554, 0.66 ) }
    dend_12 { pt3dadd( 53.6174, -251.136, 31.1278, 0.66 ) }
    dend_12 { pt3dadd( 57.1802, -252.867, 33.6023, 0.33 ) }
    dend_12 { pt3dadd( 58.6085, -253.548, 34.5304, 0.33 ) }
    dend_12 { pt3dadd( 59.1108, -253.761, 34.8214, 0.66 ) }
    dend_12 { pt3dadd( 62.1196, -254.864, 36.3462, 0.33 ) }
    dend_12 { pt3dadd( 62.7478, -255.077, 36.4952, 0.66 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 85/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 28.1041, -233.595, 16.779, 0.66 ) }
    dend_3 { pt3dadd( 29.2613, -238.231, 18.3485, 0.66 ) }
    dend_3 { pt3dadd( 30.7532, -244.22, 20.4096, 0.66 ) }
    dend_3 { pt3dadd( 33.8833, -256.201, 24.3174, 0.66 ) }
    dend_3 { pt3dadd( 35.1832, -261.427, 25.9711, 0.66 ) }
    dend_3 { pt3dadd( 36.8785, -267.781, 28.0126, 0.66 ) }
    dend_3 { pt3dadd( 38.5005, -274.251, 29.91, 0.66 ) }
    dend_3 { pt3dadd( 39.3791, -277.896, 30.8605, 0.66 ) }
    dend_3 { pt3dadd( 40.3733, -282.959, 32.0042, 0.66 ) }
    dend_3 { pt3dadd( 42.1173, -292.723, 33.8549, 0.66 ) }
    dend_3 { pt3dadd( 43.0471, -298.288, 34.6523, 0.66 ) }
    dend_3 { pt3dadd( 44.0564, -304.824, 35.4958, 0.66 ) }
    dend_3 { pt3dadd( 44.6871, -310.383, 35.897, 0.66 ) }
    dend_3 { pt3dadd( 44.9423, -313.401, 36.1002, 0.66 ) }
    dend_3 { pt3dadd( 45.5907, -323.562, 36.6739, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_3 { pt3dadd( 45.866, -328.831, 36.8178, 0.66 ) }
    dend_3 { pt3dadd( 46.1079, -336.143, 36.9853, 0.66 ) }
    dend_3 { pt3dadd( 46.4993, -341.98, 37.315, 0.66 ) }
    dend_3 { pt3dadd( 46.667, -344.572, 37.4328, 0.66 ) }
    // Section: dend_5, id: dend_5, parent: dend_3 (entry count 4/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 46.667, -344.572, 37.4328, 0.66 ) }
    dend_5 { pt3dadd( 47.1597, -346.975, 37.6389, 0.66 ) }
    dend_5 { pt3dadd( 47.9314, -350.852, 38.4235, 0.66 ) }
    dend_5 { pt3dadd( 48.7472, -354.979, 39.4076, 0.66 ) }
    dend_5 { pt3dadd( 49.2223, -357.688, 40.0984, 0.66 ) }
    dend_5 { pt3dadd( 49.8244, -361.438, 40.9832, 0.66 ) }
    dend_5 { pt3dadd( 50.7116, -368.091, 42.3911, 0.66 ) }
    dend_5 { pt3dadd( 51.1729, -372.651, 43.3229, 0.66 ) }
    dend_5 { pt3dadd( 51.4504, -375.778, 44.015, 0.66 ) }
    dend_5 { pt3dadd( 51.7358, -379.055, 44.6488, 0.66 ) }
    dend_5 { pt3dadd( 52.0714, -382.733, 45.3098, 0.66 ) }
    dend_5 { pt3dadd( 52.3182, -385.251, 45.7255, 0.66 ) }
    dend_5 { pt3dadd( 52.7072, -388.713, 46.1727, 0.66 ) }
    dend_5 { pt3dadd( 53.1242, -391.896, 46.5394, 0.66 ) }
    dend_5 { pt3dadd( 54.1829, -399.368, 47.5604, 0.66 ) }
    dend_5 { pt3dadd( 54.6737, -402.333, 47.9935, 0.66 ) }
    dend_5 { pt3dadd( 55.812, -409.784, 49.0567, 0.66 ) }
    dend_5 { pt3dadd( 56.203, -412.796, 49.3972, 0.66 ) }
    dend_5 { pt3dadd( 56.4979, -415.707, 49.6419, 0.66 ) }
    dend_5 { pt3dadd( 56.7003, -418.335, 49.77, 0.66 ) }
    dend_5 { pt3dadd( 56.9559, -422.644, 49.9518, 0.66 ) }
    dend_5 { pt3dadd( 57.1101, -426.334, 50.0901, 0.66 ) }
    dend_5 { pt3dadd( 57.2725, -433.447, 50.1408, 0.66 ) }
    dend_5 { pt3dadd( 57.4331, -437.037, 50.1439, 0.66 ) }
    dend_5 { pt3dadd( 57.5807, -439.83, 50.1539, 0.66 ) }
    dend_5 { pt3dadd( 57.8245, -443.586, 50.1772, 0.66 ) }
    dend_5 { pt3dadd( 58.7511, -457.716, 50.2268, 0.66 ) }
    dend_5 { pt3dadd( 59.1262, -462.912, 50.1354, 0.66 ) }
    dend_5 { pt3dadd( 60.0982, -476.565, 49.6988, 0.66 ) }
    dend_5 { pt3dadd( 60.459, -481.729, 49.4659, 0.66 ) }
    dend_5 { pt3dadd( 60.8509, -486.806, 49.263, 0.66 ) }
    dend_5 { pt3dadd( 61.1615, -490.335, 49.1323, 0.66 ) }
    dend_5 { pt3dadd( 61.6305, -495.166, 48.9081, 0.66 ) }
    dend_5 { pt3dadd( 62.0608, -500.54, 48.7151, 0.66 ) }
    dend_5 { pt3dadd( 62.4027, -506.416, 48.3227, 0.66 ) }
    dend_5 { pt3dadd( 62.5756, -509.699, 48.1175, 0.66 ) }
    dend_5 { pt3dadd( 62.7242, -511.983, 48.0363, 0.66 ) }
    dend_5 { pt3dadd( 63.4567, -520.807, 48.1932, 0.66 ) }
    dend_5 { pt3dadd( 63.6854, -523.557, 48.2505, 0.66 ) }
    dend_5 { pt3dadd( 63.9381, -528.086, 48.1774, 0.66 ) }
    dend_5 { pt3dadd( 64.174, -532.618, 48.0336, 0.66 ) }
    dend_5 { pt3dadd( 64.4261, -536.126, 47.9304, 0.66 ) }
    dend_5 { pt3dadd( 65.2471, -544.689, 47.9734, 0.66 ) }
    dend_5 { pt3dadd( 66.4002, -554.5, 48.2155, 0.66 ) }
    dend_5 { pt3dadd( 67.2162, -561.18, 48.3332, 0.66 ) }
    dend_5 { pt3dadd( 67.595, -564.542, 48.3355, 0.66 ) }
    dend_5 { pt3dadd( 68.921, -576.861, 48.1113, 0.66 ) }
    dend_5 { pt3dadd( 69.559, -584.788, 47.7245, 0.66 ) }
    dend_5 { pt3dadd( 69.7292, -587.107, 47.5666, 0.66 ) }
    dend_5 { pt3dadd( 69.9896, -590.872, 47.2231, 0.66 ) }
    dend_5 { pt3dadd( 70.3103, -596.402, 46.5633, 0.66 ) }
    dend_5 { pt3dadd( 70.3686, -598.799, 46.2144, 0.66 ) }
    dend_5 { pt3dadd( 70.3282, -605.236, 45.0659, 0.66 ) }
    dend_5 { pt3dadd( 70.2265, -618.674, 42.4474, 0.66 ) }
    dend_5 { pt3dadd( 70.2976, -625.591, 41.2856, 0.66 ) }
    dend_5 { pt3dadd( 70.3881, -628.167, 40.9251, 0.33 ) }
    dend_5 { pt3dadd( 70.4968, -629.883, 40.7344, 1.33 ) }
    dend_5 { pt3dadd( 70.9622, -633.933, 40.4666, 0.66 ) }
    dend_5 { pt3dadd( 71.8317, -638.794, 40.3526, 0.66 ) }
    dend_5 { pt3dadd( 72.5697, -642.235, 40.3445, 0.66 ) }
    dend_5 { pt3dadd( 73.4076, -645.711, 40.4214, 0.66 ) }
    dend_5 { pt3dadd( 74.1554, -648.553, 40.4447, 0.66 ) }
    dend_5 { pt3dadd( 77.391, -660.21, 40.8153, 0.66 ) }
    dend_5 { pt3dadd( 77.853, -661.851, 40.912, 0.33 ) }
    dend_5 { pt3dadd( 78.4671, -664.198, 41.0622, 1.33 ) }
    dend_5 { pt3dadd( 79.0465, -666.532, 41.1655, 0.66 ) }
    dend_5 { pt3dadd( 79.4753, -668.366, 41.2489, 0.33 ) }
    dend_5 { pt3dadd( 80.6142, -673.431, 41.5264, 0.66 ) }
    dend_5 { pt3dadd( 81.1025, -676.036, 41.9929, 0.66 ) }
    dend_5 { pt3dadd( 81.7305, -679.468, 42.7991, 0.33 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 74/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 46.667, -344.572, 37.4328, 0.66 ) }
    dend_4 { pt3dadd( 44.0011, -353.185, 38.6611, 0.66 ) }
    dend_4 { pt3dadd( 41.7909, -360.502, 39.5893, 0.66 ) }
    dend_4 { pt3dadd( 40.4051, -365.969, 40.5811, 0.33 ) }
    dend_4 { pt3dadd( 38.6112, -373.641, 42.237, 0.33 ) }
    dend_4 { pt3dadd( 38.3368, -374.89, 42.5689, 0.66 ) }
    dend_4 { pt3dadd( 37.5506, -378.936, 43.7207, 0.33 ) }
    dend_4 { pt3dadd( 37.0957, -381.874, 44.7071, 0.66 ) }
    dend_4 { pt3dadd( 36.1761, -388.842, 46.7833, 0.33 ) }
    dend_4 { pt3dadd( 36.0615, -389.942, 47.1367, 0.66 ) }
    dend_4 { pt3dadd( 35.2677, -397.388, 49.5109, 0.33 ) }
    dend_4 { pt3dadd( 35.0725, -401.233, 50.8193, 0.33 ) }
    dend_4 { pt3dadd( 35.0755, -405.401, 52.2865, 0.66 ) }
    dend_4 { pt3dadd( 35.2425, -410.38, 54.1363, 0.33 ) }
    dend_4 { pt3dadd( 35.4037, -413.07, 55.0605, 0.33 ) }
    dend_4 { pt3dadd( 35.6148, -414.57, 55.6249, 0.66 ) }
    dend_4 { pt3dadd( 37.3151, -420.803, 58.7399, 0.33 ) }
    dend_4 { pt3dadd( 37.612, -421.702, 59.3146, 0.66 ) }
    dend_4 { pt3dadd( 38.5311, -423.951, 60.9609, 0.33 ) }
    dend_4 { pt3dadd( 38.9894, -425.105, 61.8389, 0.33 ) }
    dend_4 { pt3dadd( 39.3901, -426.339, 62.6518, 0.66 ) }
    dend_4 { pt3dadd( 40.5056, -431.004, 65.2692, 0.33 ) }
    dend_4 { pt3dadd( 40.8087, -433.898, 66.471, 0.33 ) }
    dend_4 { pt3dadd( 40.9138, -434.997, 66.847, 0.66 ) }
    dend_4 { pt3dadd( 41.1127, -437.141, 67.3771, 0.33 ) }
    dend_4 { pt3dadd( 41.1809, -438.283, 67.5863, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_4 { pt3dadd( 41.2298, -439.741, 67.7717, 0.33 ) }
    dend_4 { pt3dadd( 41.2345, -441.258, 67.8617, 0.66 ) }
    dend_4 { pt3dadd( 41.2193, -443.48, 68.0446, 0.33 ) }
    dend_4 { pt3dadd( 41.2037, -444.289, 68.1328, 0.66 ) }
    dend_4 { pt3dadd( 41.0185, -450.988, 69.0494, 0.33 ) }
    dend_4 { pt3dadd( 40.9981, -451.416, 69.1129, 0.66 ) }
    dend_4 { pt3dadd( 40.8778, -452.957, 69.3679, 0.33 ) }
    dend_4 { pt3dadd( 40.7948, -453.76, 69.5115, 0.66 ) }
    dend_4 { pt3dadd( 40.7063, -455.932, 70.089, 0.33 ) }
    dend_4 { pt3dadd( 40.7181, -456.921, 70.4079, 0.66 ) }
    dend_4 { pt3dadd( 40.8336, -458.683, 71.0373, 0.33 ) }
    dend_4 { pt3dadd( 40.9414, -459.928, 71.4927, 0.66 ) }
    dend_4 { pt3dadd( 41.1202, -461.351, 72.0367, 0.33 ) }
    dend_4 { pt3dadd( 42.138, -467.954, 74.7429, 0.33 ) }
    dend_4 { pt3dadd( 42.5084, -469.874, 75.6139, 0.66 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 15/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 81.7305, -679.468, 42.7991, 0.66 ) }
    dend_7 { pt3dadd( 81.8736, -682.882, 42.1322, 0.66 ) }
    dend_7 { pt3dadd( 82.2396, -684.617, 42.0805, 1.33 ) }
    dend_7 { pt3dadd( 82.6269, -686.098, 42.1464, 0.66 ) }
    dend_7 { pt3dadd( 83.0487, -687.964, 42.2185, 0.66 ) }
    dend_7 { pt3dadd( 84.0825, -691.969, 42.5244, 0.33 ) }
    dend_7 { pt3dadd( 85.4493, -696.803, 42.9594, 0.66 ) }
    dend_7 { pt3dadd( 87.4806, -703.012, 43.8255, 0.66 ) }
    dend_7 { pt3dadd( 88.6104, -706.094, 44.3118, 0.66 ) }
    dend_7 { pt3dadd( 89.8697, -709.537, 44.7397, 0.33 ) }
    dend_7 { pt3dadd( 91.3835, -713.955, 45.1283, 0.33 ) }
    dend_7 { pt3dadd( 91.7365, -715.212, 45.1808, 0.66 ) }
    dend_7 { pt3dadd( 91.9323, -716.269, 45.0441, 0.33 ) }
    dend_7 { pt3dadd( 92.0004, -717.196, 44.8218, 0.66 ) }
    dend_7 { pt3dadd( 92.2603, -722.622, 43.3152, 0.33 ) }
    dend_7 { pt3dadd( 92.3875, -724.888, 42.6665, 0.66 ) }
    dend_7 { pt3dadd( 92.4377, -727.041, 42.01, 0.33 ) }
    dend_7 { pt3dadd( 92.6601, -733.138, 40.4309, 0.33 ) }
    dend_7 { pt3dadd( 92.8974, -736.699, 39.607, 0.66 ) }
    dend_7 { pt3dadd( 93.4991, -743.127, 38.3001, 0.33 ) }
    dend_7 { pt3dadd( 93.8678, -746.147, 37.8204, 0.66 ) }
    dend_7 { pt3dadd( 94.2843, -749.122, 37.3978, 1.33 ) }
    dend_7 { pt3dadd( 95.4131, -755.892, 36.6448, 0.33 ) }
    dend_7 { pt3dadd( 96.0765, -759.227, 36.4666, 0.33 ) }
    dend_7 { pt3dadd( 96.3545, -760.535, 36.4261, 0.66 ) }
    dend_7 { pt3dadd( 97.0854, -763.825, 36.4626, 0.33 ) }
    dend_7 { pt3dadd( 98.0705, -768.232, 36.6103, 0.33 ) }
    dend_7 { pt3dadd( 98.4725, -769.837, 36.6966, 1.33 ) }
    dend_7 { pt3dadd( 99.6063, -774.448, 36.9598, 0.33 ) }
    dend_7 { pt3dadd( 99.9571, -776.044, 37.1115, 0.66 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 45/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 81.7305, -679.468, 42.7991, 0.66 ) }
    dend_6 { pt3dadd( 80.1779, -681.191, 41.7712, 0.66 ) }
    // Section: dend_11, id: dend_11, parent: dend_7 (entry count 47/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 99.9571, -776.044, 37.1115, 0.66 ) }
    dend_11 { pt3dadd( 98.2985, -775.783, 38.0218, 0.66 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 49/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 99.9571, -776.044, 37.1115, 0.66 ) }
    dend_8 { pt3dadd( 100.159, -777.286, 36.9635, 0.66 ) }
    dend_8 { pt3dadd( 101.06, -782.819, 36.3043, 0.33 ) }
    dend_8 { pt3dadd( 101.347, -784.578, 36.0946, 1.33 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 53/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 101.347, -784.578, 36.0946, 0.33 ) }
    dend_10 { pt3dadd( 109.979, -794.574, 40.3205, 0.33 ) }
    dend_10 { pt3dadd( 110.779, -795.553, 40.6627, 1.33 ) }
    dend_10 { pt3dadd( 112.978, -798.3, 41.4505, 0.33 ) }
    dend_10 { pt3dadd( 113.409, -798.876, 41.5396, 0.66 ) }
    dend_10 { pt3dadd( 115.389, -801.642, 41.6739, 0.33 ) }
    dend_10 { pt3dadd( 115.991, -802.482, 41.7146, 0.66 ) }
    dend_10 { pt3dadd( 116.345, -803.274, 41.4241, 0.33 ) }
    dend_10 { pt3dadd( 116.826, -804.265, 40.9878, 0.66 ) }
    dend_10 { pt3dadd( 118.535, -807.373, 39.1889, 0.33 ) }
    dend_10 { pt3dadd( 119.194, -808.502, 38.4245, 1.33 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 64/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 101.347, -784.578, 36.0946, 0.33 ) }
    dend_9 { pt3dadd( 102.621, -793.435, 39.1522, 0.33 ) }
    dend_9 { pt3dadd( 103.316, -798.265, 40.8198, 0.33 ) }
    dend_9 { pt3dadd( 103.425, -799.024, 41.0819, 0.66 ) }
    dend_9 { pt3dadd( 104.143, -804.009, 42.803, 0.33 ) }
    dend_9 { pt3dadd( 104.238, -804.674, 43.0324, 0.66 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_2 = new SectionList()
    dend_0 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_2 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_12 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_3 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_5 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_4 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_7 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_0 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_1 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_6 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_11 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_8 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_9 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_10 OneSecGrp_SectionRef_15.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_8 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cNAC_149_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cNAC_149_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cNAC_149_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cNAC_149_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_2 nseg = 11
    dend_12 nseg = 3
    dend_3 nseg = 5
    dend_5 nseg = 17
    dend_4 nseg = 7
    dend_7 nseg = 5
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cNAC187_L4_BP_e936f4d8ba_0_0


