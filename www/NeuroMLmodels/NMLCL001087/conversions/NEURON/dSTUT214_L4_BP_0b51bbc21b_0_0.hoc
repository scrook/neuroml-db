// Cell: dSTUT214_L4_BP_0b51bbc21b_0_0
/*
{
  "id" : "dSTUT214_L4_BP_0b51bbc21b_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-3.08452, 6.27464, 0.312461, 1.46623", "-2.79927, 5.64032, 0.287115, 2.64844", "-2.51401, 5.00599, 0.26177, 4.10361", "-2.22875, 4.37167, 0.236425, 4.91598", "-1.94349, 3.73735, 0.21108, 5.72835", "-1.65823, 3.10303, 0.185734, 6.53421", "-1.37297, 2.46871, 0.160389, 7.31212", "-1.08771, 1.83438, 0.135044, 8.08989", "-0.802456, 1.20006, 0.109699, 8.85679", "-0.517198, 0.56574, 0.0843534, 8.93483", "-0.23194, -0.0685822, 0.0590082, 8.92633", "0.0533189, -0.702904, 0.033663, 8.91784", "0.338577, -1.33723, 0.00831775, 8.90934", "0.623836, -1.97155, -0.0170275, 8.90084", "0.909094, -2.60587, -0.0423727, 8.82493", "1.19435, -3.24019, -0.067718, 7.82232", "1.47961, -3.87451, -0.0930632, 6.5965", "1.76487, -4.50884, -0.118408, 5.37067", "2.05013, -5.14316, -0.143754, 4.14485", "2.33539, -5.77748, -0.169099, 2.91903", "2.62064, -6.4118, -0.194444, 1.76337" ]
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "1.61629, -5.87753, -1.26548, 1.33", "2.59462, -10.1292, -2.04991, 1.33", "4.21666, -17.1785, -3.35047, 0.66", "5.47249, -22.6362, -4.3574, 0.66", "6.8107, -28.4519, -5.43038, 1.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500001318721313
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "2.62064, -6.4118, -0.194444, 0.33", "8.77276, -20.0921, -0.194444, 0.33", "14.9249, -33.7725, -0.194444, 0.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "6.8107, -28.4519, -5.43038, 0.66", "5.79411, -39.8701, -3.77375, 0.66", "4.26181, -56.8304, -1.29825, 0.66", "2.33366, -77.5446, 1.87044, 0.66", "0.90203, -93.5376, 4.35587, 0.66", "0.0847376, -102.817, 5.79488, 0.66", "-0.194947, -105.896, 6.26331, 0.66", "-0.570655, -110.075, 6.93112, 0.66", "-0.992465, -113.981, 7.56049, 0.66", "-1.45491, -118.482, 8.21026, 0.66", "-1.59924, -120.893, 8.2861, 0.66", "-1.72439, -123.881, 8.116, 0.66", "-1.71196, -128.353, 7.38851, 0.66", "-1.63879, -134.208, 6.15624, 0.66", "-1.55278, -136.761, 5.61476, 0.66", "-1.02438, -148.745, 2.99913, 0.66", "-0.820319, -151.576, 2.36015, 0.66", "0.0317896, -160.313, 0.234079, 0.66", "0.440081, -164.002, -0.679497, 0.66", "1.27305, -170.794, -2.23659, 0.66", "1.67376, -174.705, -2.88588, 0.66", "1.94634, -178.538, -3.15583, 0.66", "2.16927, -182.247, -3.29339, 0.66", "2.25385, -185.814, -3.4615, 0.66", "2.3367, -189.576, -3.79523, 0.66", "2.30039, -195.369, -4.45543, 0.66", "2.25847, -198.905, -4.69122, 0.66", "2.1318, -203.194, -4.93937, 0.66", "1.95143, -208.996, -5.30765, 0.66", "1.85925, -212.686, -5.71413, 0.66", "1.8358, -217.635, -6.45497, 0.66", "1.96582, -222.306, -7.14428, 0.66" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "6.8107, -28.4519, -5.43038, 0.66", "9.05861, -30.8139, -4.68478, 0.66", "14.2264, -36.2439, -2.97071, 0.33", "26.0557, -48.6733, 0.952861, 0.33", "26.502, -49.1423, 1.1009, 0.66", "31.2757, -54.1582, 2.68425, 0.33" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "14.9249, -33.7725, -0.194444, 0.33", "21.077, -47.4528, -0.194444, 0.33", "27.2291, -61.1331, -0.194444, 0.33" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "1.96582, -222.306, -7.14428, 0.66", "3.05682, -224.326, -5.94946, 0.66", "3.56725, -225.485, -5.14898, 0.66", "4.10024, -227.303, -3.49877, 0.66", "4.37109, -228.402, -2.36034, 0.66", "4.79821, -230.438, -0.0644512, 0.66", "5.13272, -231.929, 1.7017, 0.66", "5.3817, -233.306, 3.5152, 0.66", "5.95944, -236.008, 7.4334, 0.66", "6.31114, -237.438, 9.66742, 0.66", "6.69942, -239.096, 12.3074, 0.33", "6.88653, -239.747, 13.3383, 0.33", "6.97009, -239.955, 13.6879, 0.66", "7.58001, -241.076, 15.7015, 0.33", "7.79045, -241.287, 16.0473, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "1.96582, -222.306, -7.14428, 0.66", "1.90411, -225.351, -6.40651, 0.66", "1.81227, -229.288, -5.43691, 0.66", "1.77179, -237.161, -3.56482, 0.66", "1.7359, -240.588, -2.79458, 0.66", "1.74245, -244.765, -1.80716, 0.66", "1.75152, -248.998, -0.927526, 0.66", "1.7753, -251.373, -0.504181, 0.66", "1.74562, -254.644, -0.0768464, 0.66", "1.70881, -260.915, 0.510213, 0.66", "1.73485, -264.468, 0.69162, 0.66", "1.75141, -268.63, 0.831091, 0.66", "1.74556, -272.132, 0.716068, 0.66", "1.70141, -274.026, 0.61944, 0.66", "1.47752, -280.377, 0.172692, 0.66", "1.37769, -283.657, -0.157388, 0.66", "1.17612, -288.194, -0.674722, 0.66", "1.05737, -291.844, -0.925491, 0.66", "1.01036, -293.463, -1.05361, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "1.01036, -293.463, -1.05361, 0.66", "1.20947, -296.482, -0.980403, 0.66", "1.21671, -301.403, -0.422448, 0.66", "1.12277, -306.659, 0.317462, 0.66", "0.97137, -310.105, 0.8105, 0.66", "0.75154, -314.858, 1.38612, 0.66", "0.282833, -323.243, 2.13106, 0.66", "-0.16539, -328.962, 2.51617, 0.66", "-0.546216, -332.885, 2.80929, 0.66", "-0.891787, -336.984, 3.02103, 0.66", "-1.23187, -341.581, 3.21776, 0.66", "-1.42383, -344.726, 3.32615, 0.66", "-1.55749, -349.043, 3.38129, 0.66", "-1.59199, -353.016, 3.42453, 0.66", "-1.69527, -362.376, 3.73706, 0.66", "-1.68276, -366.104, 3.93351, 0.66", "-1.7313, -375.453, 4.34252, 0.66", "-1.76338, -379.212, 4.37452, 0.66", "-1.82389, -382.822, 4.26854, 0.66", "-1.88337, -386.059, 4.03974, 0.66", "-2.03965, -391.351, 3.58811, 0.66", "-2.22763, -395.871, 3.14322, 0.66", "-2.5874, -404.538, 1.98386, 0.66", "-2.67508, -408.922, 1.4255, 0.66", "-2.72532, -412.337, 1.01307, 0.66", "-2.7534, -416.936, 0.496707, 0.66", "-2.8252, -434.24, -1.47839, 0.66", "-2.74633, -440.596, -2.29333, 0.66", "-2.4266, -457.269, -4.64072, 0.66", "-2.26899, -463.565, -5.60096, 0.66", "-2.09328, -469.765, -6.49543, 0.66", "-1.93923, -474.082, -7.08289, 0.66", "-1.65488, -479.992, -7.90496, 0.66", "-1.46727, -486.56, -8.82029, 0.66", "-1.27529, -493.699, -10.084, 0.66", "-1.19544, -497.687, -10.7875, 0.66", "-1.1509, -500.473, -11.1971, 0.66", "-1.12122, -511.317, -12.2073, 0.66", "-1.11691, -514.698, -12.5135, 0.66", "-1.12743, -520.227, -13.2637, 0.66", "-1.10971, -525.748, -14.0964, 0.66", "-1.03103, -530.034, -14.689, 0.66", "-0.820634, -540.561, -15.7099, 0.66", "-0.489196, -552.681, -16.5526, 0.66", "-0.202022, -560.932, -17.1543, 0.66", "-0.0530864, -565.073, -17.5345, 0.66", "0.57985, -580.206, -19.1999, 0.66", "0.92555, -589.882, -20.6506, 0.66", "1.03885, -592.704, -21.1302, 0.66", "1.26277, -597.274, -22.0066, 0.66", "1.62912, -603.959, -23.4889, 0.66", "1.74689, -606.835, -24.2451, 0.66", "2.00018, -614.504, -26.6125, 0.66", "2.65343, -630.485, -31.7875, 0.66", "2.99477, -638.753, -34.1868, 0.66", "3.14013, -641.851, -34.9676, 0.33", "3.25404, -643.928, -35.4075, 1.33", "3.6167, -648.885, -36.1317, 0.66", "4.23258, -654.908, -36.5973, 0.66", "4.74548, -659.2, -36.777, 0.66", "5.30237, -663.559, -36.8149, 0.66", "5.84638, -667.128, -36.8464, 0.66", "8.0712, -681.828, -36.5931, 0.66", "8.36234, -683.905, -36.5088, 0.33", "8.72395, -686.868, -36.4052, 1.33", "9.08156, -689.803, -36.3681, 0.66", "9.33437, -692.107, -36.3535, 0.33", "9.95647, -698.467, -36.294, 0.66", "9.96987, -701.761, -35.999, 0.66", "9.84867, -706.122, -35.4275, 0.33" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 21
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "1.01036, -293.463, -1.05361, 0.66", "-0.832098, -300.155, -3.40059, 0.66", "-2.29766, -305.834, -5.40622, 0.66", "-3.47885, -310.13, -6.60671, 0.33", "-5.24823, -316.193, -8.08264, 0.33", "-5.57028, -317.187, -8.28552, 0.66", "-6.62104, -320.423, -8.8433, 0.33", "-7.43481, -322.797, -9.11001, 0.66", "-9.12268, -328.422, -9.74694, 0.33", "-9.3933, -329.315, -9.8168, 0.66", "-11.2205, -335.358, -10.3089, 0.33", "-12.1283, -338.506, -10.3877, 0.33", "-13.0542, -341.945, -10.3119, 0.66", "-14.156, -346.077, -10.0737, 0.33", "-14.6712, -348.31, -9.92955, 0.33", "-14.94, -349.573, -9.74937, 0.66", "-16.221, -354.96, -8.14002, 0.33", "-16.4673, -355.753, -7.82197, 0.66", "-17.1477, -357.769, -6.82383, 0.33", "-17.5245, -358.805, -6.30668, 0.33", "-17.8815, -359.894, -5.86457, 0.66", "-19.0967, -363.933, -4.64465, 0.33", "-19.7342, -366.366, -4.31835, 0.33", "-19.9271, -367.282, -4.23429, 0.66", "-20.1709, -369.053, -4.15891, 0.33", "-20.268, -369.987, -4.17388, 0.66", "-20.3538, -371.169, -4.25191, 0.33", "-20.3942, -372.385, -4.40611, 0.66", "-20.4967, -374.169, -4.62538, 0.33", "-20.5526, -374.82, -4.70294, 0.66", "-21.163, -380.212, -5.30389, 0.33", "-21.2089, -380.557, -5.34584, 0.66", "-21.4114, -381.793, -5.51684, 0.33", "-21.5327, -382.436, -5.61487, 0.66", "-21.9289, -384.204, -5.71211, 0.33", "-22.1244, -385.019, -5.69908, 0.66", "-22.4738, -386.484, -5.58809, 0.33", "-22.7166, -387.524, -5.48824, 0.66", "-22.9863, -388.72, -5.32773, 0.33", "-24.2795, -394.301, -4.3838, 0.33", "-24.6799, -395.938, -4.02551, 0.66" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "9.84867, -706.122, -35.4275, 0.66", "10.6061, -710.948, -36.6897, 0.66", "10.9418, -713.5, -36.7604, 1.33", "11.1757, -715.706, -36.642, 0.66", "11.4227, -718.473, -36.574, 0.66", "11.9037, -724.455, -36.1547, 0.33", "12.5197, -731.709, -35.4625, 0.66", "13.2239, -741.125, -34.0036, 0.66", "13.6214, -745.831, -33.0986, 0.66", "14.1889, -751.07, -32.1934, 0.33", "15.0002, -757.754, -31.285, 0.33", "15.2245, -759.631, -31.1616, 0.66", "15.5192, -761.166, -31.3277, 0.33", "15.7963, -762.477, -31.6758, 0.66", "17.5169, -770.093, -34.0455, 0.33", "18.2735, -773.275, -35.0326, 0.66", "18.9726, -776.28, -36.0821, 0.33", "20.7189, -784.841, -38.7183, 0.33", "21.7283, -789.875, -40.0548, 0.66", "23.5096, -799.023, -42.1208, 0.33", "24.2775, -803.356, -42.8793, 0.66", "25.0274, -807.642, -43.5246, 1.33", "26.6692, -817.46, -44.613, 0.33", "27.3643, -822.344, -44.8621, 0.33", "27.6209, -824.268, -44.9147, 0.66", "28.1439, -829.129, -44.8888, 0.33", "28.7421, -835.657, -44.7598, 0.33", "28.9632, -838.048, -44.6374, 1.33", "29.5633, -844.912, -44.2948, 0.33", "29.6674, -847.288, -44.1668, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "9.84867, -706.122, -35.4275, 0.66", "8.89513, -707.605, -37.3845, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "29.6674, -847.288, -44.1668, 0.66", "27.3182, -846.743, -44.9242, 0.66" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "29.6674, -847.288, -44.1668, 0.66", "29.9827, -849.162, -44.3987, 0.66", "31.3871, -857.509, -45.4309, 0.33", "31.8337, -860.164, -45.7593, 1.33" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "31.8337, -860.164, -45.7593, 0.33", "34.9666, -871.803, -38.5969, 0.33", "35.2881, -872.929, -37.9774, 1.33", "36.2726, -876.069, -36.3956, 0.33", "36.5081, -876.716, -36.1393, 0.66", "37.7704, -879.783, -35.1809, 0.33", "38.1535, -880.714, -34.8901, 0.66", "38.5795, -881.532, -34.9958, 0.33", "39.1893, -882.554, -35.156, 0.66", "41.5371, -885.743, -35.8415, 0.33", "42.4926, -886.896, -36.1462, 1.33" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "31.8337, -860.164, -45.7593, 0.33", "30.0368, -871.748, -43.7391, 0.33", "29.0567, -878.065, -42.6374, 0.33", "28.9027, -879.058, -42.4642, 0.66", "27.8912, -885.578, -41.3271, 0.33", "27.7564, -886.448, -41.1755, 0.66" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_11", "dend_8", "dend_8", "dend_8", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "3.7868198E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "3.7868198E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.936579E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.2499998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dSTUT_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dSTUT_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate dSTUT214_L4_BP_0b51bbc21b_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_12, id: dend_12, parent: dend_2
create dend_12
public dend_12
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_5, id: dend_5, parent: dend_3
create dend_5
public dend_5
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_11, id: dend_11, parent: dend_7
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_15
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dSTUT_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dSTUT_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_0(0), soma_0(0.4500001318721313)
    connect axon_0(0), soma_0(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_12(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_5(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_11(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -3.08452, 6.27464, 0.312461, 1.46623 ) }
    soma_0 { pt3dadd( -2.79927, 5.64032, 0.287115, 2.64844 ) }
    soma_0 { pt3dadd( -2.51401, 5.00599, 0.26177, 4.10361 ) }
    soma_0 { pt3dadd( -2.22875, 4.37167, 0.236425, 4.91598 ) }
    soma_0 { pt3dadd( -1.94349, 3.73735, 0.21108, 5.72835 ) }
    soma_0 { pt3dadd( -1.65823, 3.10303, 0.185734, 6.53421 ) }
    soma_0 { pt3dadd( -1.37297, 2.46871, 0.160389, 7.31212 ) }
    soma_0 { pt3dadd( -1.08771, 1.83438, 0.135044, 8.08989 ) }
    soma_0 { pt3dadd( -0.802456, 1.20006, 0.109699, 8.85679 ) }
    soma_0 { pt3dadd( -0.517198, 0.56574, 0.0843534, 8.93483 ) }
    soma_0 { pt3dadd( -0.23194, -0.0685822, 0.0590082, 8.92633 ) }
    soma_0 { pt3dadd( 0.0533189, -0.702904, 0.033663, 8.91784 ) }
    soma_0 { pt3dadd( 0.338577, -1.33723, 0.00831775, 8.90934 ) }
    soma_0 { pt3dadd( 0.623836, -1.97155, -0.0170275, 8.90084 ) }
    soma_0 { pt3dadd( 0.909094, -2.60587, -0.0423727, 8.82493 ) }
    soma_0 { pt3dadd( 1.19435, -3.24019, -0.067718, 7.82232 ) }
    soma_0 { pt3dadd( 1.47961, -3.87451, -0.0930632, 6.5965 ) }
    soma_0 { pt3dadd( 1.76487, -4.50884, -0.118408, 5.37067 ) }
    soma_0 { pt3dadd( 2.05013, -5.14316, -0.143754, 4.14485 ) }
    soma_0 { pt3dadd( 2.33539, -5.77748, -0.169099, 2.91903 ) }
    soma_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 1.76337 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 21/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 1.61629, -5.87753, -1.26548, 1.33 ) }
    dend_0 { pt3dadd( 2.59462, -10.1292, -2.04991, 1.33 ) }
    dend_0 { pt3dadd( 4.21666, -17.1785, -3.35047, 0.66 ) }
    dend_0 { pt3dadd( 5.47249, -22.6362, -4.3574, 0.66 ) }
    dend_0 { pt3dadd( 6.8107, -28.4519, -5.43038, 1.33 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 26/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 8.77276, -20.0921, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 29/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 6.8107, -28.4519, -5.43038, 0.66 ) }
    dend_2 { pt3dadd( 5.79411, -39.8701, -3.77375, 0.66 ) }
    dend_2 { pt3dadd( 4.26181, -56.8304, -1.29825, 0.66 ) }
    dend_2 { pt3dadd( 2.33366, -77.5446, 1.87044, 0.66 ) }
    dend_2 { pt3dadd( 0.90203, -93.5376, 4.35587, 0.66 ) }
    dend_2 { pt3dadd( 0.0847376, -102.817, 5.79488, 0.66 ) }
    dend_2 { pt3dadd( -0.194947, -105.896, 6.26331, 0.66 ) }
    dend_2 { pt3dadd( -0.570655, -110.075, 6.93112, 0.66 ) }
    dend_2 { pt3dadd( -0.992465, -113.981, 7.56049, 0.66 ) }
    dend_2 { pt3dadd( -1.45491, -118.482, 8.21026, 0.66 ) }
    dend_2 { pt3dadd( -1.59924, -120.893, 8.2861, 0.66 ) }
    dend_2 { pt3dadd( -1.72439, -123.881, 8.116, 0.66 ) }
    dend_2 { pt3dadd( -1.71196, -128.353, 7.38851, 0.66 ) }
    dend_2 { pt3dadd( -1.63879, -134.208, 6.15624, 0.66 ) }
    dend_2 { pt3dadd( -1.55278, -136.761, 5.61476, 0.66 ) }
    dend_2 { pt3dadd( -1.02438, -148.745, 2.99913, 0.66 ) }
    dend_2 { pt3dadd( -0.820319, -151.576, 2.36015, 0.66 ) }
    dend_2 { pt3dadd( 0.0317896, -160.313, 0.234079, 0.66 ) }
    dend_2 { pt3dadd( 0.440081, -164.002, -0.679497, 0.66 ) }
    dend_2 { pt3dadd( 1.27305, -170.794, -2.23659, 0.66 ) }
    dend_2 { pt3dadd( 1.67376, -174.705, -2.88588, 0.66 ) }
    dend_2 { pt3dadd( 1.94634, -178.538, -3.15583, 0.66 ) }
    dend_2 { pt3dadd( 2.16927, -182.247, -3.29339, 0.66 ) }
    dend_2 { pt3dadd( 2.25385, -185.814, -3.4615, 0.66 ) }
    dend_2 { pt3dadd( 2.3367, -189.576, -3.79523, 0.66 ) }
    dend_2 { pt3dadd( 2.30039, -195.369, -4.45543, 0.66 ) }
    dend_2 { pt3dadd( 2.25847, -198.905, -4.69122, 0.66 ) }
    dend_2 { pt3dadd( 2.1318, -203.194, -4.93937, 0.66 ) }
    dend_2 { pt3dadd( 1.95143, -208.996, -5.30765, 0.66 ) }
    dend_2 { pt3dadd( 1.85925, -212.686, -5.71413, 0.66 ) }
    dend_2 { pt3dadd( 1.8358, -217.635, -6.45497, 0.66 ) }
    dend_2 { pt3dadd( 1.96582, -222.306, -7.14428, 0.66 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 61/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 6.8107, -28.4519, -5.43038, 0.66 ) }
    dend_1 { pt3dadd( 9.05861, -30.8139, -4.68478, 0.66 ) }
    dend_1 { pt3dadd( 14.2264, -36.2439, -2.97071, 0.33 ) }
    dend_1 { pt3dadd( 26.0557, -48.6733, 0.952861, 0.33 ) }
    dend_1 { pt3dadd( 26.502, -49.1423, 1.1009, 0.66 ) }
    dend_1 { pt3dadd( 31.2757, -54.1582, 2.68425, 0.33 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 67/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 21.077, -47.4528, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 27.2291, -61.1331, -0.194444, 0.33 ) }
    // Section: dend_12, id: dend_12, parent: dend_2 (entry count 70/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 1.96582, -222.306, -7.14428, 0.66 ) }
    dend_12 { pt3dadd( 3.05682, -224.326, -5.94946, 0.66 ) }
    dend_12 { pt3dadd( 3.56725, -225.485, -5.14898, 0.66 ) }
    dend_12 { pt3dadd( 4.10024, -227.303, -3.49877, 0.66 ) }
    dend_12 { pt3dadd( 4.37109, -228.402, -2.36034, 0.66 ) }
    dend_12 { pt3dadd( 4.79821, -230.438, -0.0644512, 0.66 ) }
    dend_12 { pt3dadd( 5.13272, -231.929, 1.7017, 0.66 ) }
    dend_12 { pt3dadd( 5.3817, -233.306, 3.5152, 0.66 ) }
    dend_12 { pt3dadd( 5.95944, -236.008, 7.4334, 0.66 ) }
    dend_12 { pt3dadd( 6.31114, -237.438, 9.66742, 0.66 ) }
    dend_12 { pt3dadd( 6.69942, -239.096, 12.3074, 0.33 ) }
    dend_12 { pt3dadd( 6.88653, -239.747, 13.3383, 0.33 ) }
    dend_12 { pt3dadd( 6.97009, -239.955, 13.6879, 0.66 ) }
    dend_12 { pt3dadd( 7.58001, -241.076, 15.7015, 0.33 ) }
    dend_12 { pt3dadd( 7.79045, -241.287, 16.0473, 0.66 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 85/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 1.96582, -222.306, -7.14428, 0.66 ) }
    dend_3 { pt3dadd( 1.90411, -225.351, -6.40651, 0.66 ) }
    dend_3 { pt3dadd( 1.81227, -229.288, -5.43691, 0.66 ) }
    dend_3 { pt3dadd( 1.77179, -237.161, -3.56482, 0.66 ) }
    dend_3 { pt3dadd( 1.7359, -240.588, -2.79458, 0.66 ) }
    dend_3 { pt3dadd( 1.74245, -244.765, -1.80716, 0.66 ) }
    dend_3 { pt3dadd( 1.75152, -248.998, -0.927526, 0.66 ) }
    dend_3 { pt3dadd( 1.7753, -251.373, -0.504181, 0.66 ) }
    dend_3 { pt3dadd( 1.74562, -254.644, -0.0768464, 0.66 ) }
    dend_3 { pt3dadd( 1.70881, -260.915, 0.510213, 0.66 ) }
    dend_3 { pt3dadd( 1.73485, -264.468, 0.69162, 0.66 ) }
    dend_3 { pt3dadd( 1.75141, -268.63, 0.831091, 0.66 ) }
    dend_3 { pt3dadd( 1.74556, -272.132, 0.716068, 0.66 ) }
    dend_3 { pt3dadd( 1.70141, -274.026, 0.61944, 0.66 ) }
    dend_3 { pt3dadd( 1.47752, -280.377, 0.172692, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_3 { pt3dadd( 1.37769, -283.657, -0.157388, 0.66 ) }
    dend_3 { pt3dadd( 1.17612, -288.194, -0.674722, 0.66 ) }
    dend_3 { pt3dadd( 1.05737, -291.844, -0.925491, 0.66 ) }
    dend_3 { pt3dadd( 1.01036, -293.463, -1.05361, 0.66 ) }
    // Section: dend_5, id: dend_5, parent: dend_3 (entry count 4/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 1.01036, -293.463, -1.05361, 0.66 ) }
    dend_5 { pt3dadd( 1.20947, -296.482, -0.980403, 0.66 ) }
    dend_5 { pt3dadd( 1.21671, -301.403, -0.422448, 0.66 ) }
    dend_5 { pt3dadd( 1.12277, -306.659, 0.317462, 0.66 ) }
    dend_5 { pt3dadd( 0.97137, -310.105, 0.8105, 0.66 ) }
    dend_5 { pt3dadd( 0.75154, -314.858, 1.38612, 0.66 ) }
    dend_5 { pt3dadd( 0.282833, -323.243, 2.13106, 0.66 ) }
    dend_5 { pt3dadd( -0.16539, -328.962, 2.51617, 0.66 ) }
    dend_5 { pt3dadd( -0.546216, -332.885, 2.80929, 0.66 ) }
    dend_5 { pt3dadd( -0.891787, -336.984, 3.02103, 0.66 ) }
    dend_5 { pt3dadd( -1.23187, -341.581, 3.21776, 0.66 ) }
    dend_5 { pt3dadd( -1.42383, -344.726, 3.32615, 0.66 ) }
    dend_5 { pt3dadd( -1.55749, -349.043, 3.38129, 0.66 ) }
    dend_5 { pt3dadd( -1.59199, -353.016, 3.42453, 0.66 ) }
    dend_5 { pt3dadd( -1.69527, -362.376, 3.73706, 0.66 ) }
    dend_5 { pt3dadd( -1.68276, -366.104, 3.93351, 0.66 ) }
    dend_5 { pt3dadd( -1.7313, -375.453, 4.34252, 0.66 ) }
    dend_5 { pt3dadd( -1.76338, -379.212, 4.37452, 0.66 ) }
    dend_5 { pt3dadd( -1.82389, -382.822, 4.26854, 0.66 ) }
    dend_5 { pt3dadd( -1.88337, -386.059, 4.03974, 0.66 ) }
    dend_5 { pt3dadd( -2.03965, -391.351, 3.58811, 0.66 ) }
    dend_5 { pt3dadd( -2.22763, -395.871, 3.14322, 0.66 ) }
    dend_5 { pt3dadd( -2.5874, -404.538, 1.98386, 0.66 ) }
    dend_5 { pt3dadd( -2.67508, -408.922, 1.4255, 0.66 ) }
    dend_5 { pt3dadd( -2.72532, -412.337, 1.01307, 0.66 ) }
    dend_5 { pt3dadd( -2.7534, -416.936, 0.496707, 0.66 ) }
    dend_5 { pt3dadd( -2.8252, -434.24, -1.47839, 0.66 ) }
    dend_5 { pt3dadd( -2.74633, -440.596, -2.29333, 0.66 ) }
    dend_5 { pt3dadd( -2.4266, -457.269, -4.64072, 0.66 ) }
    dend_5 { pt3dadd( -2.26899, -463.565, -5.60096, 0.66 ) }
    dend_5 { pt3dadd( -2.09328, -469.765, -6.49543, 0.66 ) }
    dend_5 { pt3dadd( -1.93923, -474.082, -7.08289, 0.66 ) }
    dend_5 { pt3dadd( -1.65488, -479.992, -7.90496, 0.66 ) }
    dend_5 { pt3dadd( -1.46727, -486.56, -8.82029, 0.66 ) }
    dend_5 { pt3dadd( -1.27529, -493.699, -10.084, 0.66 ) }
    dend_5 { pt3dadd( -1.19544, -497.687, -10.7875, 0.66 ) }
    dend_5 { pt3dadd( -1.1509, -500.473, -11.1971, 0.66 ) }
    dend_5 { pt3dadd( -1.12122, -511.317, -12.2073, 0.66 ) }
    dend_5 { pt3dadd( -1.11691, -514.698, -12.5135, 0.66 ) }
    dend_5 { pt3dadd( -1.12743, -520.227, -13.2637, 0.66 ) }
    dend_5 { pt3dadd( -1.10971, -525.748, -14.0964, 0.66 ) }
    dend_5 { pt3dadd( -1.03103, -530.034, -14.689, 0.66 ) }
    dend_5 { pt3dadd( -0.820634, -540.561, -15.7099, 0.66 ) }
    dend_5 { pt3dadd( -0.489196, -552.681, -16.5526, 0.66 ) }
    dend_5 { pt3dadd( -0.202022, -560.932, -17.1543, 0.66 ) }
    dend_5 { pt3dadd( -0.0530864, -565.073, -17.5345, 0.66 ) }
    dend_5 { pt3dadd( 0.57985, -580.206, -19.1999, 0.66 ) }
    dend_5 { pt3dadd( 0.92555, -589.882, -20.6506, 0.66 ) }
    dend_5 { pt3dadd( 1.03885, -592.704, -21.1302, 0.66 ) }
    dend_5 { pt3dadd( 1.26277, -597.274, -22.0066, 0.66 ) }
    dend_5 { pt3dadd( 1.62912, -603.959, -23.4889, 0.66 ) }
    dend_5 { pt3dadd( 1.74689, -606.835, -24.2451, 0.66 ) }
    dend_5 { pt3dadd( 2.00018, -614.504, -26.6125, 0.66 ) }
    dend_5 { pt3dadd( 2.65343, -630.485, -31.7875, 0.66 ) }
    dend_5 { pt3dadd( 2.99477, -638.753, -34.1868, 0.66 ) }
    dend_5 { pt3dadd( 3.14013, -641.851, -34.9676, 0.33 ) }
    dend_5 { pt3dadd( 3.25404, -643.928, -35.4075, 1.33 ) }
    dend_5 { pt3dadd( 3.6167, -648.885, -36.1317, 0.66 ) }
    dend_5 { pt3dadd( 4.23258, -654.908, -36.5973, 0.66 ) }
    dend_5 { pt3dadd( 4.74548, -659.2, -36.777, 0.66 ) }
    dend_5 { pt3dadd( 5.30237, -663.559, -36.8149, 0.66 ) }
    dend_5 { pt3dadd( 5.84638, -667.128, -36.8464, 0.66 ) }
    dend_5 { pt3dadd( 8.0712, -681.828, -36.5931, 0.66 ) }
    dend_5 { pt3dadd( 8.36234, -683.905, -36.5088, 0.33 ) }
    dend_5 { pt3dadd( 8.72395, -686.868, -36.4052, 1.33 ) }
    dend_5 { pt3dadd( 9.08156, -689.803, -36.3681, 0.66 ) }
    dend_5 { pt3dadd( 9.33437, -692.107, -36.3535, 0.33 ) }
    dend_5 { pt3dadd( 9.95647, -698.467, -36.294, 0.66 ) }
    dend_5 { pt3dadd( 9.96987, -701.761, -35.999, 0.66 ) }
    dend_5 { pt3dadd( 9.84867, -706.122, -35.4275, 0.33 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 74/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 1.01036, -293.463, -1.05361, 0.66 ) }
    dend_4 { pt3dadd( -0.832098, -300.155, -3.40059, 0.66 ) }
    dend_4 { pt3dadd( -2.29766, -305.834, -5.40622, 0.66 ) }
    dend_4 { pt3dadd( -3.47885, -310.13, -6.60671, 0.33 ) }
    dend_4 { pt3dadd( -5.24823, -316.193, -8.08264, 0.33 ) }
    dend_4 { pt3dadd( -5.57028, -317.187, -8.28552, 0.66 ) }
    dend_4 { pt3dadd( -6.62104, -320.423, -8.8433, 0.33 ) }
    dend_4 { pt3dadd( -7.43481, -322.797, -9.11001, 0.66 ) }
    dend_4 { pt3dadd( -9.12268, -328.422, -9.74694, 0.33 ) }
    dend_4 { pt3dadd( -9.3933, -329.315, -9.8168, 0.66 ) }
    dend_4 { pt3dadd( -11.2205, -335.358, -10.3089, 0.33 ) }
    dend_4 { pt3dadd( -12.1283, -338.506, -10.3877, 0.33 ) }
    dend_4 { pt3dadd( -13.0542, -341.945, -10.3119, 0.66 ) }
    dend_4 { pt3dadd( -14.156, -346.077, -10.0737, 0.33 ) }
    dend_4 { pt3dadd( -14.6712, -348.31, -9.92955, 0.33 ) }
    dend_4 { pt3dadd( -14.94, -349.573, -9.74937, 0.66 ) }
    dend_4 { pt3dadd( -16.221, -354.96, -8.14002, 0.33 ) }
    dend_4 { pt3dadd( -16.4673, -355.753, -7.82197, 0.66 ) }
    dend_4 { pt3dadd( -17.1477, -357.769, -6.82383, 0.33 ) }
    dend_4 { pt3dadd( -17.5245, -358.805, -6.30668, 0.33 ) }
    dend_4 { pt3dadd( -17.8815, -359.894, -5.86457, 0.66 ) }
    dend_4 { pt3dadd( -19.0967, -363.933, -4.64465, 0.33 ) }
    dend_4 { pt3dadd( -19.7342, -366.366, -4.31835, 0.33 ) }
    dend_4 { pt3dadd( -19.9271, -367.282, -4.23429, 0.66 ) }
    dend_4 { pt3dadd( -20.1709, -369.053, -4.15891, 0.33 ) }
    dend_4 { pt3dadd( -20.268, -369.987, -4.17388, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_4 { pt3dadd( -20.3538, -371.169, -4.25191, 0.33 ) }
    dend_4 { pt3dadd( -20.3942, -372.385, -4.40611, 0.66 ) }
    dend_4 { pt3dadd( -20.4967, -374.169, -4.62538, 0.33 ) }
    dend_4 { pt3dadd( -20.5526, -374.82, -4.70294, 0.66 ) }
    dend_4 { pt3dadd( -21.163, -380.212, -5.30389, 0.33 ) }
    dend_4 { pt3dadd( -21.2089, -380.557, -5.34584, 0.66 ) }
    dend_4 { pt3dadd( -21.4114, -381.793, -5.51684, 0.33 ) }
    dend_4 { pt3dadd( -21.5327, -382.436, -5.61487, 0.66 ) }
    dend_4 { pt3dadd( -21.9289, -384.204, -5.71211, 0.33 ) }
    dend_4 { pt3dadd( -22.1244, -385.019, -5.69908, 0.66 ) }
    dend_4 { pt3dadd( -22.4738, -386.484, -5.58809, 0.33 ) }
    dend_4 { pt3dadd( -22.7166, -387.524, -5.48824, 0.66 ) }
    dend_4 { pt3dadd( -22.9863, -388.72, -5.32773, 0.33 ) }
    dend_4 { pt3dadd( -24.2795, -394.301, -4.3838, 0.33 ) }
    dend_4 { pt3dadd( -24.6799, -395.938, -4.02551, 0.66 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 15/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 9.84867, -706.122, -35.4275, 0.66 ) }
    dend_7 { pt3dadd( 10.6061, -710.948, -36.6897, 0.66 ) }
    dend_7 { pt3dadd( 10.9418, -713.5, -36.7604, 1.33 ) }
    dend_7 { pt3dadd( 11.1757, -715.706, -36.642, 0.66 ) }
    dend_7 { pt3dadd( 11.4227, -718.473, -36.574, 0.66 ) }
    dend_7 { pt3dadd( 11.9037, -724.455, -36.1547, 0.33 ) }
    dend_7 { pt3dadd( 12.5197, -731.709, -35.4625, 0.66 ) }
    dend_7 { pt3dadd( 13.2239, -741.125, -34.0036, 0.66 ) }
    dend_7 { pt3dadd( 13.6214, -745.831, -33.0986, 0.66 ) }
    dend_7 { pt3dadd( 14.1889, -751.07, -32.1934, 0.33 ) }
    dend_7 { pt3dadd( 15.0002, -757.754, -31.285, 0.33 ) }
    dend_7 { pt3dadd( 15.2245, -759.631, -31.1616, 0.66 ) }
    dend_7 { pt3dadd( 15.5192, -761.166, -31.3277, 0.33 ) }
    dend_7 { pt3dadd( 15.7963, -762.477, -31.6758, 0.66 ) }
    dend_7 { pt3dadd( 17.5169, -770.093, -34.0455, 0.33 ) }
    dend_7 { pt3dadd( 18.2735, -773.275, -35.0326, 0.66 ) }
    dend_7 { pt3dadd( 18.9726, -776.28, -36.0821, 0.33 ) }
    dend_7 { pt3dadd( 20.7189, -784.841, -38.7183, 0.33 ) }
    dend_7 { pt3dadd( 21.7283, -789.875, -40.0548, 0.66 ) }
    dend_7 { pt3dadd( 23.5096, -799.023, -42.1208, 0.33 ) }
    dend_7 { pt3dadd( 24.2775, -803.356, -42.8793, 0.66 ) }
    dend_7 { pt3dadd( 25.0274, -807.642, -43.5246, 1.33 ) }
    dend_7 { pt3dadd( 26.6692, -817.46, -44.613, 0.33 ) }
    dend_7 { pt3dadd( 27.3643, -822.344, -44.8621, 0.33 ) }
    dend_7 { pt3dadd( 27.6209, -824.268, -44.9147, 0.66 ) }
    dend_7 { pt3dadd( 28.1439, -829.129, -44.8888, 0.33 ) }
    dend_7 { pt3dadd( 28.7421, -835.657, -44.7598, 0.33 ) }
    dend_7 { pt3dadd( 28.9632, -838.048, -44.6374, 1.33 ) }
    dend_7 { pt3dadd( 29.5633, -844.912, -44.2948, 0.33 ) }
    dend_7 { pt3dadd( 29.6674, -847.288, -44.1668, 0.66 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 45/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 9.84867, -706.122, -35.4275, 0.66 ) }
    dend_6 { pt3dadd( 8.89513, -707.605, -37.3845, 0.66 ) }
    // Section: dend_11, id: dend_11, parent: dend_7 (entry count 47/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 29.6674, -847.288, -44.1668, 0.66 ) }
    dend_11 { pt3dadd( 27.3182, -846.743, -44.9242, 0.66 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 49/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 29.6674, -847.288, -44.1668, 0.66 ) }
    dend_8 { pt3dadd( 29.9827, -849.162, -44.3987, 0.66 ) }
    dend_8 { pt3dadd( 31.3871, -857.509, -45.4309, 0.33 ) }
    dend_8 { pt3dadd( 31.8337, -860.164, -45.7593, 1.33 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 53/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 31.8337, -860.164, -45.7593, 0.33 ) }
    dend_10 { pt3dadd( 34.9666, -871.803, -38.5969, 0.33 ) }
    dend_10 { pt3dadd( 35.2881, -872.929, -37.9774, 1.33 ) }
    dend_10 { pt3dadd( 36.2726, -876.069, -36.3956, 0.33 ) }
    dend_10 { pt3dadd( 36.5081, -876.716, -36.1393, 0.66 ) }
    dend_10 { pt3dadd( 37.7704, -879.783, -35.1809, 0.33 ) }
    dend_10 { pt3dadd( 38.1535, -880.714, -34.8901, 0.66 ) }
    dend_10 { pt3dadd( 38.5795, -881.532, -34.9958, 0.33 ) }
    dend_10 { pt3dadd( 39.1893, -882.554, -35.156, 0.66 ) }
    dend_10 { pt3dadd( 41.5371, -885.743, -35.8415, 0.33 ) }
    dend_10 { pt3dadd( 42.4926, -886.896, -36.1462, 1.33 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 64/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 31.8337, -860.164, -45.7593, 0.33 ) }
    dend_9 { pt3dadd( 30.0368, -871.748, -43.7391, 0.33 ) }
    dend_9 { pt3dadd( 29.0567, -878.065, -42.6374, 0.33 ) }
    dend_9 { pt3dadd( 28.9027, -879.058, -42.4642, 0.66 ) }
    dend_9 { pt3dadd( 27.8912, -885.578, -41.3271, 0.33 ) }
    dend_9 { pt3dadd( 27.7564, -886.448, -41.1755, 0.66 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_2 = new SectionList()
    dend_0 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_3 = new SectionList()
    soma_0 ModelViewParmSubset_3.append()
    dend_0 ModelViewParmSubset_3.append()
    dend_2 ModelViewParmSubset_3.append()
    dend_1 ModelViewParmSubset_3.append()
    dend_12 ModelViewParmSubset_3.append()
    dend_3 ModelViewParmSubset_3.append()
    dend_5 ModelViewParmSubset_3.append()
    dend_4 ModelViewParmSubset_3.append()
    dend_7 ModelViewParmSubset_3.append()
    dend_6 ModelViewParmSubset_3.append()
    dend_11 ModelViewParmSubset_3.append()
    dend_8 ModelViewParmSubset_3.append()
    dend_10 ModelViewParmSubset_3.append()
    dend_9 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_4 = new SectionList()
    axon_0 ModelViewParmSubset_4.append()
    axon_1 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_2 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_3 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_5 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_4 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_7 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_0 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_1 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_12 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_6 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_11 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_8 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_9 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_10 OneSecGrp_SectionRef_15.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_8 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 3.7868198E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 3.7868198E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 8.936579E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert KdShu2007
        gmax_KdShu2007 = 4.2499998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dSTUT_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__dSTUT_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dSTUT_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__dSTUT_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_2 nseg = 9
    dend_3 nseg = 3
    dend_5 nseg = 21
    dend_4 nseg = 5
    dend_7 nseg = 7
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate dSTUT214_L4_BP_0b51bbc21b_0_0


