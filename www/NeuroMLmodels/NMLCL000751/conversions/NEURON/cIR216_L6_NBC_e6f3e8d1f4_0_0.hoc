// Cell: cIR216_L6_NBC_e6f3e8d1f4_0_0
/*
{
  "id" : "cIR216_L6_NBC_e6f3e8d1f4_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-7.79996, 1.63899, 0.0, 2.31456", "-7.07575, 1.4414, 0.0, 3.87478", "-6.35154, 1.2438, 0.0, 5.48504", "-5.62733, 1.04621, 0.0, 6.75924", "-4.90312, 0.848615, 0.0, 7.77214", "-4.17891, 0.65102, 0.0, 8.39732", "-3.4547, 0.453425, 0.0, 9.01032", "-2.73049, 0.255831, 0.0, 9.61582", "-2.00628, 0.0582363, 0.0, 9.97495", "-1.28207, -0.139358, 0.0, 10.1182", "-0.557856, -0.336953, 0.0, 10.2615", "0.166353, -0.534547, 0.0, 10.4039", "0.890563, -0.732142, 0.0, 10.3605", "1.61477, -0.929737, 0.0, 10.3021", "2.33898, -1.12733, 0.0, 10.2398", "3.06319, -1.32493, 0.0, 10.0638", "3.7874, -1.52252, 0.0, 9.71016", "4.51161, -1.72011, 0.0, 8.98989", "5.23582, -1.91771, 0.0, 7.92103", "5.96003, -2.1153, 0.0, 6.49304", "6.68424, -2.3129, 0.0, 3.64119" ]
  }, {
    "name" : "dend_34",
    "id" : "dend_34",
    "points3d" : [ "2.72858, -5.46425, 7.36, 1.36", "2.72858, -5.46425, 7.36, 1.36", "2.99959, -7.00655, 7.15664, 1.14", "3.36646, -9.09436, 6.88136, 0.91", "3.84199, -11.8006, 6.52453, 0.91", "4.12931, -13.4357, 6.30894, 0.91", "4.57148, -15.9521, 5.97715, 0.91" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_31",
    "id" : "dend_31",
    "points3d" : [ "-1.14142, -3.16426, -3.98, 0.68", "-1.14142, -3.16426, -3.98, 0.68", "-1.82398, -3.74825, -5.15011, 0.68", "-2.4676, -4.22304, -6.26007, 0.68", "-2.94022, -4.56069, -7.06187, 0.68", "-3.48749, -4.93628, -7.9876, 0.68", "-4.113, -5.31986, -8.99358, 0.68", "-4.73999, -5.67716, -10.0083, 0.68", "-5.30974, -5.95383, -10.9418, 0.68", "-5.92924, -6.21627, -11.9295, 0.68", "-6.63144, -6.49504, -12.9989, 0.68", "-7.45416, -6.7954, -14.1839, 0.68" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "4.57856, -3.98425, 2.8, 0.68", "4.57856, -3.98425, 2.8, 0.68", "5.76086, -5.68552, 3.14508, 0.68", "6.41557, -6.67163, 3.36338, 0.68", "7.59219, -8.44745, 3.78413, 0.68", "8.60502, -9.91063, 4.12223, 0.68", "9.68241, -11.4332, 4.44619, 0.68", "10.4885, -12.5324, 4.66366, 0.68", "11.7185, -14.1396, 4.98087, 0.45", "12.8734, -15.6682, 5.29591, 0.68", "14.5843, -17.9243, 5.84499, 0.68", "15.8311, -19.5235, 6.29748, 0.68", "16.7094, -20.6523, 6.67253, 0.68", "17.4973, -21.6422, 7.04779, 0.68", "18.2972, -22.6577, 7.46289, 0.68", "19.3125, -23.9725, 8.03978, 0.68", "20.2028, -25.0981, 8.61164, 0.68", "21.2455, -26.3588, 9.34392, 0.45", "21.9894, -27.2359, 9.8843, 0.45", "23.2961, -28.7342, 10.7901, 0.45", "24.4, -29.9207, 11.5143, 0.45", "25.2302, -30.7781, 12.0631, 0.45", "25.9719, -31.5093, 12.5818, 0.45", "26.9186, -32.4316, 13.3468, 0.45", "27.9213, -33.4933, 14.319, 0.45", "28.6328, -34.2755, 15.1354, 0.45", "29.1496, -34.9293, 15.8052, 0.45", "29.7103, -35.695, 16.5223, 0.45", "30.334, -36.5966, 17.3148, 0.45", "31.1234, -37.8027, 18.3563, 0.45", "31.7045, -38.7645, 19.178, 0.45", "32.2578, -39.717, 20.0082, 0.23", "32.8675, -40.729, 20.87, 0.23", "33.5767, -41.8399, 21.794, 0.23", "34.0394, -42.5461, 22.3616, 0.23", "34.5121, -43.3051, 23.0, 0.23", "35.2833, -44.6835, 24.1557, 0.23" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "6.16864, 1.47576, -0.84, 2.27", "6.16864, 1.47576, -0.84, 2.27", "7.59676, 2.2412, -1.71709, 1.82", "9.52822, 3.27643, -2.90332, 1.36", "10.989, 4.05937, -3.80046, 1.36" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "3.79865, -4.57425, 5.46, 0.91", "3.79865, -4.57425, 5.46, 0.91", "4.5307, -5.39003, 5.88934, 0.91", "5.36889, -6.27598, 6.4034, 0.68", "6.21984, -7.09119, 6.96107, 0.68", "6.86838, -7.67242, 7.42085, 0.91", "7.57121, -8.23539, 7.96204, 0.91", "8.29315, -8.65924, 8.53785, 0.68", "9.19136, -8.97297, 9.27415, 0.68", "9.92342, -9.14998, 9.8992, 0.68", "10.3251, -9.24035, 10.2478, 0.68", "11.1503, -9.42281, 10.9574, 0.68", "12.4183, -9.71277, 11.9613, 0.45", "13.3332, -9.93905, 12.6153, 0.45", "14.2954, -10.1999, 13.2046, 0.45", "15.2519, -10.505, 13.7459, 0.45", "16.3169, -10.8938, 14.3013, 0.45", "17.126, -11.245, 14.6905, 0.45", "18.2572, -11.796, 15.217, 0.68", "19.5838, -12.4341, 15.7681, 0.68" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "0.288636, -4.50425, 6.82, 0.91", "0.288636, -4.50425, 6.82, 0.91", "-0.950339, -6.34147, 7.81409, 0.91", "-2.21566, -8.07218, 8.82165, 0.91", "-3.34203, -9.61282, 9.71857, 0.91", "-4.30024, -10.9235, 10.4816, 0.91", "-5.3161, -12.313, 11.2905, 0.91", "-6.23423, -13.5232, 12.0599, 0.91", "-7.1244, -14.5847, 12.8996, 0.91" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-6.31134, 0.665745, 6.86, 0.91", "-6.31134, 0.665745, 6.86, 0.91", "-7.19139, 0.665745, 7.19816, 0.91", "-9.13766, 0.665745, 7.94602, 0.91" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-6.99139, 1.53575, -3.54, 0.91", "-6.99139, 1.53575, -3.54, 0.91", "-7.72794, 1.644, -3.73577, 0.91", "-8.62518, 1.72786, -3.98765, 0.91", "-9.88382, 1.82128, -4.38562, 0.91", "-10.5336, 1.85952, -4.61329, 0.91", "-11.5276, 1.89887, -4.98485, 0.91", "-12.4582, 1.90461, -5.35797, 0.91", "-13.3633, 1.88802, -5.7321, 0.91", "-14.4031, 1.84661, -6.17478, 0.68", "-15.6436, 1.76986, -6.71556, 0.91", "-16.5638, 1.70972, -7.126, 0.91", "-17.591, 1.65826, -7.60651, 0.91", "-19.1171, 1.60236, -8.30692, 0.91" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-4.04144, 4.11576, 5.18, 0.91", "-4.04144, 4.11576, 5.18, 0.91", "-4.75488, 6.1751, 6.42003, 0.91", "-5.11607, 7.86383, 7.37573, 0.68", "-5.25643, 9.43054, 8.20579, 0.68", "-5.26637, 10.5847, 8.80235, 0.68", "-5.19055, 12.1386, 9.58878, 0.68", "-4.9873, 13.5486, 10.3136, 0.68", "-4.54717, 15.4696, 11.3663, 0.68", "-4.10767, 17.3185, 12.3949, 0.68", "-3.78519, 18.6048, 13.1558, 0.68", "-3.50786, 19.7562, 13.914, 0.68", "-3.2182, 21.0126, 14.8233, 0.68", "-2.98216, 22.1964, 15.7822, 0.45", "-2.74175, 23.6372, 17.1582, 0.45", "-2.66112, 24.9238, 18.5706, 0.45", "-2.65512, 25.9643, 19.8026, 0.45", "-2.66431, 26.8274, 20.8473, 0.68", "-2.66268, 27.7148, 21.8854, 0.45", "-2.64411, 28.719, 22.993, 0.45", "-2.71243, 29.4643, 23.7968, 0.45", "-3.02794, 30.5762, 24.9171, 0.45", "-3.37588, 31.5313, 25.889, 0.45", "-3.72948, 32.6803, 27.0468, 0.45", "-3.93633, 33.7033, 27.9965, 0.45", "-4.18264, 35.038, 29.1525, 0.45", "-4.43083, 36.0665, 30.0671, 0.45", "-4.77634, 36.9624, 30.9281, 0.45", "-5.38737, 38.2009, 32.1595, 0.45", "-5.85963, 39.0978, 33.0594, 0.45", "-6.28186, 40.0427, 34.0016, 0.45", "-6.49631, 40.7385, 34.682, 0.45", "-6.85403, 42.2541, 36.0993, 0.45", "-7.08772, 43.4447, 37.1419, 0.45", "-7.18862, 44.2037, 37.8418, 0.45", "-7.06514, 45.2388, 38.8008, 0.45", "-6.70275, 46.3387, 39.8156, 0.45", "-6.15391, 47.524, 40.9302, 0.45", "-5.59816, 48.5653, 41.8851, 0.45", "-4.82151, 49.8484, 43.0778, 0.45", "-3.58852, 51.8643, 44.9832, 0.23", "-3.13252, 52.5644, 45.6718, 0.23", "-2.46128, 53.5566, 46.6412, 0.23", "-1.71583, 54.6005, 47.6164, 0.23", "-0.910827, 55.6855, 48.5636, 0.23", "-0.111663, 56.7308, 49.4336, 0.23", "0.973657, 58.2011, 50.6565, 0.23", "2.24149, 59.8089, 51.9769, 0.23", "3.49597, 61.2696, 53.1819, 0.23", "4.70184, 62.574, 54.3125, 0.23", "5.64465, 63.6598, 55.1944, 0.23" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894,
    "numberInternalDivisions" : 5
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "6.68424, -2.3129, 0.0, 0.767544", "21.1553, -6.2612, 0.0, 0.767544", "35.6263, -10.2095, 0.0, 0.767544" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_36",
    "id" : "dend_36",
    "points3d" : [ "4.57148, -15.9521, 5.97715, 0.68", "5.38427, -16.9385, 5.76729, 0.68", "6.7693, -18.6994, 5.33093, 0.68", "8.09079, -20.4468, 4.88893, 0.68", "9.29036, -22.0504, 4.49189, 0.68", "10.7604, -24.1413, 4.0164, 0.68", "12.0425, -26.1313, 3.61085, 0.68", "13.1319, -28.0344, 3.24596, 0.68", "13.7541, -29.2469, 3.01549, 0.68", "14.8463, -31.5551, 2.5801, 0.68", "15.8272, -33.7345, 2.1726, 0.68", "16.6067, -35.6348, 1.84869, 0.68", "17.4052, -37.7237, 1.56831, 0.45", "18.0489, -39.6023, 1.33774, 0.45", "18.6102, -41.4965, 1.04433, 0.45", "19.0518, -43.1594, 0.690957, 0.45", "19.6481, -45.3827, 0.0318473, 0.45", "20.0918, -47.1417, -0.600181, 0.45", "20.486, -48.9178, -1.33773, 0.68", "20.8845, -50.6819, -2.16649, 0.68", "21.3544, -52.6254, -3.16119, 0.68", "21.892, -54.5036, -4.20856, 0.45", "22.531, -56.3099, -5.28497, 0.45", "23.003, -57.5311, -5.9867, 0.45", "23.9206, -59.6047, -7.06634, 0.45", "24.3913, -60.5494, -7.49434, 0.45", "25.0945, -61.8149, -8.0197, 0.45", "26.0315, -63.3138, -8.64261, 0.45", "27.3626, -65.1841, -9.52537, 0.45", "28.6125, -66.7927, -10.4146, 0.45", "29.8609, -68.3802, -11.4407, 0.45", "30.6645, -69.3251, -12.165, 0.45", "31.6127, -70.3489, -13.0701, 0.45", "32.8647, -71.6537, -14.3317, 0.45", "34.2302, -73.0945, -15.8132, 0.45", "35.5624, -74.6202, -17.3327, 0.45", "36.4312, -75.6515, -18.3899, 0.45", "37.2842, -76.6979, -19.4458, 0.45", "37.7866, -77.3387, -20.0687, 0.45", "38.5303, -78.3033, -20.9486, 0.45", "39.4345, -79.5587, -22.011, 0.45", "40.3649, -80.8796, -23.1305, 0.23", "41.2305, -82.1964, -24.2099, 0.23", "41.9424, -83.3196, -25.1488, 0.23", "42.6874, -84.6447, -26.274, 0.23", "43.4928, -86.3389, -27.6332, 0.23", "44.2972, -88.338, -29.076, 0.23", "44.467, -88.7759, -29.359, 0.23", "44.8587, -89.8021, -29.9642, 0.23", "45.5545, -91.7254, -31.002, 0.23", "46.1079, -93.383, -31.8307, 0.23", "46.9365, -95.8818, -33.0156, 0.23", "47.6092, -98.0795, -34.0078, 0.23", "48.1367, -100.027, -34.8918, 0.23", "48.6845, -102.421, -35.9433, 0.23", "49.0996, -104.318, -36.7744, 0.23", "49.2595, -105.205, -37.157, 0.23", "49.4032, -106.372, -37.6043, 0.23", "49.6215, -108.218, -38.2247, 0.23", "49.8156, -109.541, -38.6315, 0.23", "50.1975, -111.674, -39.1928, 0.23", "50.6806, -113.853, -39.6718, 0.23", "51.2816, -116.136, -40.0767, 0.23", "51.8525, -118.015, -40.3491, 0.23", "52.185, -118.957, -40.4686, 0.23", "52.8972, -120.745, -40.6966, 0.23", "53.8261, -123.066, -40.9827, 0.23", "54.7063, -125.057, -41.2638, 0.23", "55.4172, -126.512, -41.5123, 0.23", "55.9868, -127.663, -41.7245, 0.23", "56.587, -128.913, -41.9668, 0.23", "57.1923, -130.271, -42.2587, 0.23", "58.4176, -133.574, -43.0104, 0.23", "59.1937, -136.193, -43.5762, 0.23", "59.6068, -138.031, -43.9714, 0.23", "59.8996, -139.761, -44.3448, 0.23", "60.1828, -142.025, -44.8418, 0.23", "60.4525, -144.629, -45.4071, 0.23", "60.7563, -149.496, -46.4216, 0.23", "60.837, -151.838, -46.8942, 0.23", "60.8942, -153.79, -47.3062, 0.23", "60.9505, -155.15, -47.6078, 0.23", "66.3298, -163.461, -50.6097, 0.23" ],
    "parent" : "dend_34",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_35",
    "id" : "dend_35",
    "points3d" : [ "4.57148, -15.9521, 5.97715, 0.45", "4.80756, -17.3617, 4.08937, 0.45", "5.17591, -18.6514, 2.25901, 0.45", "5.35105, -19.2858, 1.35008, 0.45", "5.69235, -20.5443, -0.354506, 0.45", "6.0468, -21.5593, -1.72157, 0.45", "6.4624, -22.5244, -2.9997, 0.45", "6.99568, -23.4193, -4.15559, 0.45", "7.65868, -24.286, -5.22063, 0.45", "8.4882, -25.2223, -6.2754, 0.45", "9.92072, -26.7514, -7.79329, 0.45", "11.0178, -27.9576, -8.8687, 0.45", "12.0514, -29.2337, -9.94051, 0.45", "13.0315, -30.3655, -10.9428, 0.45", "14.298, -31.7292, -12.2641, 0.45", "14.9665, -32.4556, -13.0819, 0.45", "15.7978, -33.4565, -14.2574, 0.45", "16.8085, -34.6602, -15.9231, 0.23", "18.0643, -36.1387, -18.2525, 0.23", "19.0378, -37.2251, -20.1024, 0.23", "20.1876, -38.438, -22.3513, 0.23", "20.8333, -39.0923, -23.6187, 0.23", "22.1411, -40.5032, -26.3399, 0.23", "23.1062, -41.6341, -28.463, 0.23", "24.0057, -42.8832, -30.6039, 0.23", "25.0005, -44.3009, -32.9939, 0.23", "25.6138, -45.192, -34.453, 0.23", "26.6026, -46.6964, -36.9357, 0.23", "27.0372, -47.5108, -38.1327, 0.23", "27.5029, -48.5312, -39.6331, 0.23", "30.8273, -55.9307, -46.4332, 0.23" ],
    "parent" : "dend_34",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_33",
    "id" : "dend_33",
    "points3d" : [ "-7.45416, -6.7954, -14.1839, 0.45", "-8.66544, -7.2175, -15.3336, 0.45", "-9.72309, -7.54168, -16.338, 0.45", "-10.6158, -7.81834, -17.205, 0.45", "-11.5312, -8.10166, -18.0259, 0.45", "-12.6118, -8.45764, -18.9911, 0.45", "-13.5626, -8.75695, -19.8456, 0.45", "-14.6898, -9.08798, -20.942, 0.45", "-15.782, -9.38169, -22.0496, 0.45", "-17.3184, -9.81288, -23.6297, 0.45", "-18.1851, -10.072, -24.5452, 0.45", "-19.3047, -10.4525, -25.7911, 0.45", "-20.1649, -10.7779, -26.8454, 0.45", "-20.8447, -11.0437, -27.7516, 0.45", "-21.5679, -11.3282, -28.7954, 0.45", "-22.2089, -11.6036, -29.866, 0.45", "-22.861, -11.9031, -30.9587, 0.45", "-23.5655, -12.3417, -32.2002, 0.45", "-30.2812, -13.9737, -39.6283, 0.45", "-36.3662, -14.039, -47.7466, 0.45", "-41.5182, -13.5517, -56.4735, 0.45" ],
    "parent" : "dend_31",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_32",
    "id" : "dend_32",
    "points3d" : [ "-7.45416, -6.7954, -14.1839, 0.45", "-7.09552, -7.6917, -15.3912, 0.45", "-6.8457, -8.42381, -16.4026, 0.45", "-6.50473, -9.67742, -18.0622, 0.45", "-6.20447, -10.7051, -19.5006, 0.45", "-6.00186, -11.353, -20.5015, 0.45", "-5.7367, -12.0567, -21.6785, 0.45", "-5.36303, -12.811, -23.191, 0.45", "-5.19009, -13.1217, -23.85, 0.45", "-4.80946, -13.9033, -25.3071, 0.45", "-4.50968, -14.7311, -26.5846, 0.45", "-4.23165, -15.7886, -27.928, 0.45", "-4.05015, -16.6902, -28.7916, 0.45", "-3.88097, -17.4299, -29.4621, 0.45", "-3.47251, -18.8617, -30.8856, 0.45", "-3.06275, -20.1548, -32.1926, 0.45", "-2.54628, -21.3862, -33.5371, 0.45", "-1.90966, -22.4323, -35.007, 0.45", "-0.927604, -23.5628, -37.2789, 0.45", "0.00543095, -24.3028, -39.412, 0.23", "0.362223, -24.4995, -40.24, 0.23", "0.994127, -24.7374, -41.8405, 0.23", "1.76901, -25.0092, -43.8325, 0.23", "2.68861, -25.3295, -46.3093, 0.23", "3.05655, -25.5241, -47.376, 0.23", "3.72297, -26.0115, -49.5564, 0.23", "4.15026, -26.3858, -51.116, 0.23", "4.80803, -26.9847, -53.7916, 0.23", "6.51029, -31.4237, -62.9415, 0.23" ],
    "parent" : "dend_31",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "10.989, 4.05937, -3.80046, 1.36", "11.0525, 4.0745, -3.81807, 1.36", "12.1999, 4.3477, -4.13605, 1.82" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "10.989, 4.05937, -3.80046, 0.45", "9.99972, 4.2067, -4.96717, 0.45", "8.94666, 4.37111, -6.05601, 0.45", "7.53253, 4.64096, -7.49598, 0.45", "6.44101, 4.94085, -8.64107, 0.45", "5.44475, 5.24627, -9.71854, 0.45", "4.41629, 5.60283, -10.9359, 0.45", "3.52275, 5.9446, -12.2165, 0.45", "3.03552, 6.22426, -13.1764, 0.45", "2.54127, 6.66091, -14.6625, 0.45", "2.09751, 7.20844, -16.6312, 0.45", "1.75173, 7.78964, -18.9295, 0.45", "1.3953, 8.46527, -21.9869, 0.45", "1.13085, 8.98762, -24.7534, 0.45", "0.856337, 9.37361, -27.3136, 0.45", "0.494589, 9.71933, -30.2232, 0.45", "0.055497, 10.0433, -33.0553, 0.45", "-0.330319, 10.2256, -34.8076, 0.45", "-0.741867, 10.351, -36.0593, 0.45", "-1.66076, 10.5642, -38.2271, 0.45", "-2.53765, 10.7756, -39.9939, 0.45", "-3.33916, 10.968, -41.4659, 0.45", "-4.16974, 11.1441, -42.9897, 0.45", "-5.15424, 11.3736, -44.7766, 0.45", "-5.76865, 11.5273, -45.9137, 0.45", "-6.89915, 11.8278, -48.2753, 0.23", "-7.73664, 12.1154, -50.2078, 0.23", "-9.19759, 12.7521, -53.9871, 0.23", "-9.90706, 13.0866, -55.9231, 0.23", "-10.7011, 13.4975, -58.2315, 0.23", "-11.8412, 14.1389, -61.6023, 0.23", "-12.6727, 14.6507, -64.0324, 0.23", "-13.6916, 15.4191, -67.1098, 0.23", "-14.5131, 16.2271, -69.7794, 0.23", "-18.8161, 19.8444, -80.8808, 0.23" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "19.5838, -12.4341, 15.7681, 0.45", "20.0589, -12.7305, 16.4435, 0.45", "20.9068, -13.0788, 17.4423, 0.45", "21.8963, -13.3973, 18.4653, 0.45", "22.4158, -13.5802, 18.9864, 0.45", "23.1079, -13.8222, 19.6996, 0.45", "23.9832, -14.1089, 20.6407, 0.45", "25.0951, -14.4008, 21.8452, 0.45", "25.7587, -14.5561, 22.5586, 0.45", "26.4988, -14.6936, 23.3609, 0.45", "27.1993, -14.7864, 24.1231, 0.45", "27.9514, -14.8671, 24.9171, 0.45", "28.7822, -14.9881, 25.8054, 0.45", "29.6915, -15.132, 26.7189, 0.45", "30.536, -15.2254, 27.4569, 0.45", "31.4942, -15.3236, 28.1941, 0.45", "32.5555, -15.4907, 28.9244, 0.45", "33.763, -15.7411, 29.6385, 0.45", "35.2106, -16.0238, 30.3113, 0.45", "36.6194, -16.2232, 30.863, 0.23", "37.9244, -16.4069, 31.3354, 0.23", "39.2123, -16.6023, 31.7557, 0.23", "40.989, -16.8398, 32.2788, 0.23", "43.8861, -17.1498, 33.05, 0.23", "46.216, -17.38, 33.6221, 0.23" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "19.5838, -12.4341, 15.7681, 0.45", "21.146, -13.2744, 16.0229, 0.45", "21.938, -13.6123, 16.1845, 0.45", "23.5624, -14.2875, 16.5065, 0.23", "24.8484, -14.7782, 16.7481, 0.23", "26.0209, -15.1478, 16.9581, 0.68", "27.5568, -15.5879, 17.2316, 0.45", "29.3763, -15.9862, 17.5639, 0.45", "31.5465, -16.3355, 17.9706, 0.45", "32.9279, -16.4997, 18.2321, 0.45", "34.6827, -16.6476, 18.584, 0.45", "36.7779, -16.8003, 19.0081, 0.45", "38.5767, -16.8998, 19.3588, 0.45", "39.6417, -16.9472, 19.5751, 0.45", "40.6706, -16.9344, 19.822, 0.45", "41.7346, -16.9513, 20.1105, 0.45" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-7.1244, -14.5847, 12.8996, 0.45", "-7.20179, -14.3269, 13.8047, 0.45", "-7.44041, -14.1089, 15.5887, 0.45", "-7.66173, -14.1945, 16.8281, 0.45", "-7.94591, -14.5189, 18.049, 0.45", "-8.08664, -14.6823, 18.5503, 0.45", "-8.29387, -14.9572, 19.3727, 0.45", "-8.58665, -15.5471, 20.7778, 0.45", "-8.80053, -16.0793, 21.7966, 0.45", "-9.02992, -16.848, 23.0482, 0.45", "-9.05364, -17.1854, 23.582, 0.45", "-9.0014, -17.8187, 24.5845, 0.45", "-8.88579, -18.5492, 25.7835, 0.45", "-8.73243, -19.469, 27.2789, 0.45", "-8.54448, -20.2608, 28.4984, 0.45", "-8.22254, -21.1614, 29.9497, 0.45", "-7.86932, -21.9711, 31.2644, 0.45", "-7.49608, -22.6926, 32.4576, 0.45", "-7.078, -23.3824, 33.6854, 0.45", "-6.64194, -24.0221, 35.0313, 0.45", "-6.24626, -24.6955, 36.6167, 0.45", "-6.05392, -25.1306, 37.5581, 0.45", "-5.93224, -25.5247, 38.3935, 0.45", "-5.94332, -26.0993, 39.5903, 0.45", "-6.2458, -26.7733, 40.9198, 0.45", "-6.58449, -27.2904, 41.7783, 0.45", "-7.17879, -28.1255, 42.9457, 0.45", "-8.13966, -29.2002, 44.4997, 0.45", "-9.01324, -30.052, 45.7632, 0.45", "-9.62433, -30.6913, 46.6445, 0.45", "-10.3366, -31.4918, 47.717, 0.45", "-10.9207, -32.1367, 48.5989, 0.45", "-11.9523, -33.1954, 50.0423, 0.45", "-12.5535, -33.9245, 50.9196, 0.45", "-13.428, -35.2979, 52.3431, 0.45", "-14.1767, -36.5764, 53.6237, 0.45", "-14.4688, -37.1046, 54.1777, 0.45", "-14.9186, -38.1685, 55.3166, 0.45", "-15.1681, -39.3919, 56.5611, 0.45", "-15.1055, -40.6678, 57.907, 0.45", "-14.8657, -41.4591, 58.7808, 0.45", "-14.3382, -42.3036, 59.5855, 0.45", "-13.5103, -43.0897, 60.2513, 0.45", "-11.7716, -44.2289, 61.0896, 0.45", "-9.84493, -45.1509, 61.6997, 0.45", "-7.71337, -45.9, 62.1387, 0.23", "-4.77426, -46.8909, 62.6044, 0.23", "-1.29955, -48.0327, 62.9856, 0.23", "1.17098, -48.7456, 63.1378, 0.23", "2.81689, -49.0704, 63.1424, 0.23", "4.82863, -49.3166, 63.0338, 0.23" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-7.1244, -14.5847, 12.8996, 0.68", "-8.16654, -15.2031, 13.2841, 0.68", "-10.2144, -16.3912, 13.9914, 0.45", "-12.0164, -17.5029, 14.5872, 0.45", "-13.5657, -18.5079, 15.1075, 0.68", "-14.9572, -19.4853, 15.596, 0.68", "-15.7083, -20.0369, 15.8643, 0.68", "-17.1278, -21.13, 16.3576, 0.45", "-19.1199, -22.7359, 17.0067, 0.45", "-20.2636, -23.7162, 17.3449, 0.45", "-21.6197, -24.9205, 17.699, 0.45", "-22.968, -26.1183, 18.0082, 0.45", "-24.1091, -27.1682, 18.2613, 0.45", "-25.4416, -28.4275, 18.5649, 0.68", "-26.6069, -29.5189, 18.7984, 0.68", "-28.6398, -31.4037, 19.199, 0.68", "-30.5326, -33.1594, 19.6145, 0.45", "-32.2943, -34.8744, 20.0569, 0.45", "-33.5704, -36.1596, 20.415, 0.45", "-34.6643, -37.2839, 20.7373, 0.45", "-36.3134, -38.9618, 21.2286, 0.45", "-37.5886, -40.2511, 21.5872, 0.45", "-39.1927, -41.8191, 22.0124, 0.45", "-39.8884, -42.4807, 22.19, 0.45", "-41.1413, -43.7012, 22.4994, 0.45", "-42.1432, -44.6689, 22.728, 0.45", "-43.2882, -45.7277, 22.9233, 0.45", "-44.3569, -46.6583, 23.0641, 0.45", "-45.8622, -47.852, 23.2067, 0.45", "-47.2529, -48.914, 23.2964, 0.45", "-48.7464, -50.0248, 23.3491, 0.45", "-49.7952, -50.7599, 23.3519, 0.45", "-51.4039, -51.8952, 23.3392, 0.45", "-53.3262, -53.2891, 23.3274, 0.45", "-54.9173, -54.4461, 23.3718, 0.45", "-56.1669, -55.3785, 23.4718, 0.45", "-57.7944, -56.6831, 23.6993, 0.45", "-59.8497, -58.4022, 24.119, 0.45", "-61.5063, -59.876, 24.5792, 0.45", "-63.0352, -61.3427, 25.1161, 0.45", "-64.9544, -63.2603, 25.918, 0.45", "-66.5013, -64.7835, 26.6446, 0.45", "-67.4828, -65.7481, 27.147, 0.45", "-69.2841, -67.4519, 28.0824, 0.45", "-70.7348, -68.7507, 28.8037, 0.45", "-71.9554, -69.8299, 29.3852, 0.45", "-74.3516, -71.9774, 30.4768, 0.45", "-75.5464, -73.0758, 30.9744, 0.45", "-76.2421, -73.7182, 31.2397, 0.45", "-77.4521, -74.9089, 31.6616, 0.45", "-78.5467, -76.1421, 31.9936, 0.45", "-79.6114, -77.5155, 32.2177, 0.45", "-80.6288, -78.9711, 32.3372, 0.45", "-81.6728, -80.4921, 32.3928, 0.45", "-83.0598, -82.6658, 32.384, 0.45", "-84.4163, -84.9707, 32.2888, 0.45", "-87.2057, -89.7769, 31.935, 0.45", "-88.3111, -91.7028, 31.7705, 0.45", "-89.5087, -93.8304, 31.6015, 0.45", "-91.0821, -96.6996, 31.417, 0.45", "-92.7618, -99.6864, 31.2974, 0.45", "-94.1568, -102.141, 31.3015, 0.45", "-95.204, -103.98, 31.4137, 0.45", "-96.4831, -106.031, 31.6793, 0.45", "-98.3125, -108.809, 32.1601, 0.45", "-98.9191, -109.636, 32.3536, 0.45", "-100.414, -111.532, 32.9028, 0.45", "-101.758, -113.186, 33.4272, 0.45", "-103.677, -115.448, 34.1069, 0.45" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-9.13766, 0.665745, 7.94602, 0.45", "-8.70829, -0.085628, 9.12719, 0.45", "-8.29281, -0.727771, 10.5279, 0.45", "-8.0865, -0.846534, 11.1938, 0.45", "-7.48133, -0.832614, 12.5562, 0.45", "-6.87488, -0.695202, 13.7697, 0.45", "-6.32855, -0.522246, 14.9134, 0.45", "-5.66353, -0.219457, 16.3358, 0.45", "-5.02793, 0.161632, 17.9315, 0.45", "-4.23195, 0.740381, 20.1195, 0.45", "-3.88838, 0.994435, 21.0164, 0.45", "-3.5647, 1.18943, 21.7654, 0.45", "-3.05909, 1.43399, 22.8425, 0.45", "-2.79213, 1.51553, 23.5562, 0.45", "-2.56295, 1.56333, 24.8216, 0.45", "-2.47979, 1.68228, 26.324, 0.45", "-2.37369, 1.83834, 27.7712, 0.45", "-2.31135, 1.96269, 28.7212, 0.45", "-2.14121, 2.34488, 30.7942, 0.45", "-1.86199, 2.92559, 33.3266, 0.45", "-1.63745, 3.41296, 35.106, 0.45", "-1.24696, 4.05553, 37.0346, 0.45", "-0.750295, 4.79502, 39.2045, 0.45", "-0.131664, 5.57376, 41.4197, 0.23", "0.61727, 6.42132, 43.4814, 0.23", "1.3459, 7.14775, 45.0561, 0.23", "2.82143, 8.53005, 47.9741, 0.23" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-9.13766, 0.665745, 7.94602, 0.68", "-10.1952, 0.0998916, 8.3471, 0.68", "-12.009, -0.794955, 9.11621, 0.45", "-13.3628, -1.39611, 9.69374, 0.45", "-15.1834, -2.09773, 10.5237, 0.45", "-16.5171, -2.58674, 11.2049, 0.45", "-18.2409, -3.28115, 12.2175, 0.45", "-19.0665, -3.61693, 12.7935, 0.45", "-20.4128, -4.18158, 13.9121, 0.45", "-21.5067, -4.7017, 14.935, 0.45", "-22.3909, -5.23396, 15.8872, 0.45", "-23.6372, -6.09108, 17.4272, 0.45", "-24.085, -6.43106, 18.0785, 0.68", "-24.9034, -7.14864, 19.4728, 0.68", "-25.7753, -7.9503, 21.1684, 0.68", "-26.834, -8.83023, 23.1708, 0.45", "-27.7991, -9.41057, 24.9145, 0.45", "-28.8855, -9.85877, 26.8409, 0.45", "-29.6303, -10.1235, 28.3375, 0.45", "-30.0554, -10.251, 29.3209, 0.45", "-30.6095, -10.3576, 30.7901, 0.45", "-31.2253, -10.3732, 32.4375, 0.45", "-31.6151, -10.3306, 33.4532, 0.45", "-32.1987, -10.2641, 35.1887, 0.45", "-32.6956, -10.2513, 36.6125, 0.45", "-32.9616, -10.2969, 37.3054, 0.45", "-33.5617, -10.4836, 38.7782, 0.45", "-34.3538, -10.7622, 40.3086, 0.45", "-35.4005, -11.0539, 41.8959, 0.45", "-36.8296, -11.3324, 43.6213, 0.45", "-38.2804, -11.5448, 45.0797, 0.45", "-39.2502, -11.6876, 45.9335, 0.45", "-40.5258, -11.9109, 46.8915, 0.45", "-41.583, -12.1137, 47.6204, 0.45", "-43.2789, -12.4244, 48.7587, 0.45", "-45.1904, -12.7525, 50.0303, 0.23", "-46.24, -12.9469, 50.7086, 0.23", "-48.5984, -13.3628, 52.1407, 0.23", "-50.2483, -13.6055, 53.1596, 0.23", "-51.8055, -13.8602, 54.118, 0.23", "-53.2201, -14.1297, 54.9688, 0.23", "-55.1416, -14.4717, 56.1281, 0.23", "-57.1999, -14.7115, 57.3096, 0.23", "-59.3265, -14.7106, 58.4759, 0.23" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-19.1171, 1.60236, -8.30692, 0.68", "-19.3287, 1.6639, -8.5519, 0.68", "-19.5322, 1.74997, -8.77955, 0.68", "-19.7867, 1.85626, -9.04889, 0.68", "-20.23, 2.00254, -9.44539, 0.68", "-20.7348, 2.15939, -9.85633, 0.68", "-21.3181, 2.35888, -10.2754, 0.68", "-21.7761, 2.52767, -10.5704, 0.68", "-22.2919, 2.73253, -10.8686, 0.68", "-22.9806, 3.01113, -11.2432, 0.68", "-23.4655, 3.20201, -11.4876, 0.68", "-24.3881, 3.52669, -11.9245, 0.45", "-25.0793, 3.76551, -12.2749, 0.45", "-25.5921, 3.94326, -12.5678, 0.45", "-26.1754, 4.15181, -12.9493, 0.45", "-26.6514, 4.31988, -13.3121, 0.45", "-26.9962, 4.41951, -13.6058, 0.45", "-27.6608, 4.56514, -14.2363, 0.45", "-28.2127, 4.66799, -14.7724, 0.45", "-28.7567, 4.75517, -15.2676, 0.45", "-29.0984, 4.80967, -15.5812, 0.45", "-29.5646, 4.87912, -16.0185, 0.45", "-29.8277, 4.9076, -16.2498, 0.45", "-30.1788, 4.92468, -16.497, 0.45", "-31.0894, 4.95512, -17.0332, 0.45" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-19.1171, 1.60236, -8.30692, 0.68", "-20.8543, 0.71721, -8.21543, 0.68", "-22.7436, -0.285323, -8.18963, 0.68", "-24.0953, -1.02735, -8.19927, 0.45", "-25.5571, -1.83242, -8.22765, 0.45", "-26.8784, -2.55814, -8.25783, 0.45", "-28.2393, -3.29241, -8.29447, 0.45", "-29.879, -4.18508, -8.3591, 0.45", "-31.0144, -4.8242, -8.4092, 0.45", "-32.1803, -5.49206, -8.46552, 0.45", "-34.0172, -6.58546, -8.53653, 0.45", "-35.3357, -7.39609, -8.58789, 0.45", "-36.6394, -8.2172, -8.65691, 0.45", "-38.2896, -9.26675, -8.76899, 0.45", "-39.7518, -10.2095, -8.90525, 0.45", "-40.581, -10.7576, -8.99997, 0.45", "-41.6872, -11.4991, -9.15062, 0.45", "-42.3706, -11.9453, -9.25178, 0.45", "-43.7475, -12.8146, -9.48268, 0.45", "-45.0331, -13.6452, -9.71147, 0.45", "-46.5332, -14.5808, -9.97669, 0.45", "-47.6765, -15.2038, -10.1589, 0.45", "-49.0791, -15.8615, -10.3495, 0.45", "-50.4978, -16.48, -10.5376, 0.45", "-51.422, -16.8626, -10.6632, 0.45", "-52.803, -17.4055, -10.8562, 0.45", "-54.7412, -18.121, -11.116, 0.45", "-56.1763, -18.6473, -11.2918, 0.45", "-57.3228, -19.1018, -11.4137, 0.45", "-58.8077, -19.7492, -11.5497, 0.45", "-59.5622, -20.1086, -11.6081, 0.45", "-60.9958, -20.9042, -11.7404, 0.45", "-62.8212, -22.0495, -11.9912, 0.45", "-64.3107, -23.024, -12.2603, 0.45", "-66.0693, -24.1693, -12.6336, 0.45", "-68.432, -25.712, -13.2173, 0.23", "-70.3373, -26.9187, -13.698, 0.23", "-72.5488, -28.247, -14.2723, 0.23", "-74.3538, -29.2808, -14.7329, 0.23", "-76.3305, -30.3252, -15.2395, 0.23", "-78.5743, -31.4134, -15.8062, 0.23", "-81.5687, -32.7696, -16.533, 0.23", "-83.6438, -33.6042, -16.9898, 0.23", "-85.7601, -34.3655, -17.4124, 0.23", "-87.4424, -34.9379, -17.746, 0.23", "-89.511, -35.6046, -18.1911, 0.23", "-90.9137, -36.0216, -18.5398, 0.23", "-92.1702, -36.3645, -18.9312, 0.23", "-93.1313, -36.5927, -19.2723, 0.23", "-94.4172, -36.8733, -19.7961, 0.23", "-95.3548, -37.0973, -20.1983, 0.23", "-96.4923, -37.3751, -20.7077, 0.23", "-97.6234, -37.6513, -21.201, 0.23", "-98.2892, -37.843, -21.4803, 0.23", "-99.5837, -38.2683, -21.9912, 0.23", "-100.798, -38.6976, -22.4104, 0.23", "-102.793, -39.5188, -23.0322, 0.23", "-103.924, -40.0331, -23.3604, 0.23", "-105.448, -40.7862, -23.7672, 0.23", "-106.576, -41.3722, -24.0572, 0.23", "-107.753, -41.9805, -24.3508, 0.23", "-109.073, -42.625, -24.6706, 0.23", "-111.146, -43.6158, -25.1616, 0.23", "-112.458, -44.2097, -25.471, 0.23", "-113.695, -44.7212, -25.7333, 0.23", "-114.847, -45.177, -25.9627, 0.23", "-117.777, -46.284, -26.5438, 0.23", "-118.913, -46.697, -26.7528, 0.23", "-120.839, -47.4128, -27.1128, 0.23", "-121.838, -47.7817, -27.3091, 0.23", "-122.461, -48.02, -27.4293, 0.23", "-123.925, -48.6427, -27.7014, 0.23", "-125.081, -49.1952, -27.917, 0.23", "-126.211, -49.7549, -28.1256, 0.23", "-126.936, -50.1297, -28.2668, 0.23", "-128.366, -50.9037, -28.5609, 0.23", "-129.484, -51.535, -28.7613, 0.23", "-130.424, -52.0676, -28.8971, 0.23", "-131.158, -52.4691, -28.9926, 0.23", "-133.148, -53.5578, -29.2125, 0.23", "-134.15, -54.1158, -29.309, 0.23", "-135.995, -55.145, -29.4545, 0.23", "-137.865, -56.1887, -29.5624, 0.23", "-139.224, -56.9132, -29.6058, 0.23", "-140.235, -57.4418, -29.6226, 0.23", "-142.119, -58.3824, -29.5665, 0.23", "-144.183, -59.3416, -29.4264, 0.23", "-145.814, -60.0431, -29.2408, 0.23", "-147.721, -60.8228, -28.9421, 0.23", "-150.135, -61.7675, -28.4522, 0.23", "-152.421, -62.6335, -27.895, 0.23", "-153.646, -63.1157, -27.564, 0.23", "-155.48, -63.904, -27.0276, 0.23", "-156.704, -64.4828, -26.6656, 0.23", "-158.515, -65.4174, -26.1413, 0.23", "-160.468, -66.4866, -25.6054, 0.23", "-163.86, -68.4522, -24.8941, 0.23", "-165.961, -69.7235, -24.5677, 0.23", "-168.176, -71.1292, -24.36, 0.23", "-169.714, -72.1289, -24.3059, 0.23", "-171.655, -73.3879, -24.3552, 0.23", "-173.8, -74.7847, -24.5373, 0.23", "-174.82, -75.4356, -24.692, 0.23", "-176.627, -76.6466, -25.0817, 0.23", "-177.693, -77.4265, -25.3819, 0.23", "-178.494, -78.0846, -25.6467, 0.23", "-179.573, -79.1002, -26.0192, 0.23", "-180.275, -79.8453, -26.2406, 0.23", "-181.742, -81.4633, -26.6895, 0.23", "-183.069, -83.0112, -27.0983, 0.23", "-183.893, -84.0655, -27.3553, 0.23", "-185.741, -86.6738, -27.9745, 0.23", "-186.798, -88.2826, -28.349, 0.23", "-187.68, -89.6888, -28.6825, 0.23", "-188.649, -91.2977, -29.0819, 0.23", "-189.68, -93.1442, -29.5507, 0.23", "-190.528, -94.6817, -29.9791, 0.23", "-191.257, -96.0038, -30.3785, 0.23", "-192.251, -97.6902, -30.9302, 0.23", "-193.15, -99.0817, -31.4418, 0.23", "-193.681, -99.7919, -31.7376, 0.23", "-195.051, -101.338, -32.448, 0.23", "-196.71, -103.023, -33.2407, 0.23", "-197.712, -103.978, -33.6681, 0.23", "-199.491, -105.577, -34.2856, 0.23", "-200.905, -106.845, -34.6971, 0.23", "-201.886, -107.795, -34.9504, 0.23", "-202.953, -108.962, -35.2007, 0.23", "-204.149, -110.469, -35.473, 0.23", "-206.389, -113.647, -35.9369, 0.23", "-207.492, -115.355, -36.1481, 0.23", "-208.425, -116.979, -36.3312, 0.23", "-209.283, -118.759, -36.5118, 0.23", "-210.032, -120.652, -36.7052, 0.23", "-210.575, -122.45, -36.8952, 0.23", "-210.885, -124.004, -37.0501, 0.23", "-211.198, -125.799, -37.2157, 0.23", "-211.633, -128.641, -37.446, 0.23", "-211.795, -130.075, -37.5336, 0.23", "-211.897, -131.646, -37.5856, 0.23", "-211.881, -132.472, -37.6094, 0.23" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "35.6263, -10.2095, 0.0, 0.23", "50.0974, -14.1578, 0.0, 0.23", "64.5684, -18.1061, 0.0, 0.23" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "12.1999, 4.3477, -4.13605, 0.68", "13.0513, 7.6174, -4.50128, 0.68", "13.4883, 9.2961, -4.68879, 0.68", "13.9563, 11.0934, -4.88955, 0.68" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "12.1999, 4.3477, -4.13605, 0.68", "13.0191, 4.0198, -4.11639, 0.68", "14.0764, 3.62941, -4.11004, 0.68", "15.367, 3.21487, -4.1077, 0.68", "16.5665, 2.82723, -4.09703, 0.68", "17.7847, 2.41921, -4.06204, 0.68", "19.0629, 1.96134, -4.00706, 0.68", "20.5626, 1.4191, -3.94682, 0.68", "21.9023, 0.922538, -3.89574, 0.68", "23.414, 0.362973, -3.84045, 0.68", "24.8446, -0.146334, -3.75657, 0.68", "25.8071, -0.475398, -3.65094, 0.68" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-31.0894, 4.95512, -17.0332, 0.45", "-31.855, 5.2894, -17.335, 0.45", "-32.5038, 5.57307, -17.591, 0.45", "-33.2479, 5.91092, -17.8974, 0.45", "-34.4204, 6.47743, -18.4095, 0.45", "-35.5338, 7.02475, -18.8929, 0.45", "-36.3404, 7.41611, -19.2332, 0.45", "-37.2235, 7.8427, -19.6103, 0.45", "-37.8512, 8.16997, -19.87, 0.45", "-38.8027, 8.69105, -20.2612, 0.45", "-39.6835, 9.16637, -20.6091, 0.45", "-40.271, 9.45988, -20.8149, 0.45", "-41.2462, 9.89109, -21.1055, 0.45", "-42.3391, 10.364, -21.4199, 0.45", "-43.3072, 10.7697, -21.6574, 0.45", "-44.1239, 11.1004, -21.8567, 0.45", "-44.9031, 11.4117, -22.0464, 0.45", "-46.4557, 12.0368, -22.4005, 0.45", "-47.867, 12.6019, -22.735, 0.45", "-48.8615, 12.9981, -23.0066, 0.45", "-49.8277, 13.3829, -23.312, 0.45", "-51.7173, 14.1119, -23.8843, 0.45", "-53.3692, 14.7123, -24.3753, 0.23", "-54.9705, 15.2581, -24.8389, 0.23", "-56.299, 15.6527, -25.1959, 0.23", "-57.1854, 15.8939, -25.4445, 0.23", "-59.0184, 16.3852, -25.933, 0.23", "-60.3944, 16.7121, -26.3026, 0.23", "-61.6194, 16.9578, -26.6021, 0.23", "-62.8137, 17.2005, -26.8536, 0.23", "-64.4395, 17.5622, -27.1707, 0.23", "-65.5893, 17.836, -27.4301, 0.23", "-66.6712, 18.0812, -27.753, 0.23", "-68.1261, 18.3535, -28.2218, 0.23", "-68.7558, 18.4529, -28.4305, 0.23", "-69.7441, 18.5644, -28.7743, 0.23", "-71.1054, 18.6594, -29.2736, 0.23", "-72.776, 18.7256, -29.9978, 0.23", "-74.3688, 18.791, -30.848, 0.23", "-75.8381, 18.8279, -31.7702, 0.23", "-77.2595, 18.8353, -32.6874, 0.23", "-78.2807, 18.8312, -33.3809, 0.23", "-80.5722, 18.8236, -35.017, 0.23", "-82.519, 18.8488, -36.5334, 0.23", "-83.9562, 18.8885, -37.7894, 0.23", "-90.7805, 20.7661, -40.3235, 0.23" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-31.0894, 4.95512, -17.0332, 0.23", "-32.3675, 4.10759, -17.4788, 0.23", "-33.7538, 3.21893, -17.9591, 0.23", "-35.4994, 2.15565, -18.5997, 0.23", "-36.9967, 1.25009, -19.173, 0.23", "-38.0229, 0.631751, -19.5878, 0.23", "-39.3356, -0.157853, -20.1511, 0.23", "-40.7918, -1.00147, -20.8181, 0.23", "-41.8982, -1.62935, -21.4058, 0.23", "-42.913, -2.15216, -21.9979, 0.23", "-43.8999, -2.60456, -22.594, 0.23", "-44.9082, -3.05604, -23.2304, 0.23", "-46.0504, -3.57138, -23.9567, 0.23", "-47.2257, -4.11045, -24.6891, 0.23", "-48.3167, -4.61244, -25.3417, 0.23", "-49.9636, -5.31431, -26.2017, 0.23", "-51.5277, -5.92231, -26.9351, 0.23", "-53.7376, -6.63165, -27.831, 0.23", "-54.959, -6.93844, -28.2512, 0.23", "-56.0993, -7.2096, -28.5984, 0.23", "-57.9241, -7.59663, -29.1213, 0.23", "-59.0241, -7.73165, -29.3729, 0.23", "-60.8146, -7.66664, -29.615, 0.23", "-62.1508, -7.31793, -29.6824, 0.23", "-71.5849, -9.23629, -31.6562, 0.23", "-80.7248, -10.342, -35.0938, 0.23", "-89.6586, -10.0691, -39.1793, 0.23", "-99.1849, -11.6372, -41.0154, 0.23", "-108.918, -11.9242, -42.3377, 0.23" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-211.881, -132.472, -37.6094, 0.23", "-212.359, -135.19, -37.5017, 0.23", "-212.671, -136.967, -37.4313, 0.23", "-213.138, -139.622, -37.3261, 0.23", "-213.728, -142.971, -37.1934, 0.23", "-213.876, -153.308, -37.6215, 0.23" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-211.881, -132.472, -37.6094, 0.23", "-210.991, -136.535, -37.7249, 0.23", "-210.131, -140.412, -37.8964, 0.23", "-209.698, -142.513, -38.0047, 0.23", "-209.066, -145.41, -38.1613, 0.23", "-208.518, -147.828, -38.3329, 0.23", "-207.659, -152.059, -38.7489, 0.23", "-207.254, -154.407, -39.0779, 0.23", "-206.834, -157.296, -39.6332, 0.23", "-206.489, -161.472, -40.6858, 0.23", "-206.36, -163.608, -41.298, 0.23", "-206.274, -167.5, -42.5494, 0.23", "-206.301, -169.154, -43.1622, 0.23", "-206.472, -171.304, -44.0662, 0.23", "-207.02, -174.612, -45.7626, 0.23", "-203.534, -188.842, -46.6861, 0.23" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "13.9563, 11.0934, -4.88955, 0.45", "14.4931, 12.0396, -4.96011, 0.45", "15.021, 12.9699, -5.02949, 0.45", "15.6414, 14.0634, -5.11104, 0.45", "16.0675, 14.8144, -5.16704, 0.45", "16.6554, 15.8507, -5.24432, 0.45" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "13.9563, 11.0934, -4.88955, 0.45", "13.058, 11.8027, -5.13392, 0.45", "11.7518, 12.7662, -5.40368, 0.45", "10.6364, 13.5669, -5.60861, 0.45", "9.24282, 14.6235, -5.86316, 0.45", "8.33726, 15.3534, -6.00886, 0.45", "7.45179, 16.1128, -6.12362, 0.45", "6.88091, 16.6117, -6.1537, 0.45", "6.13675, 17.2875, -6.1641, 0.45", "5.16348, 18.2395, -6.1642, 0.45", "4.2941, 19.1429, -6.13742, 0.45", "3.28176, 20.3129, -6.08589, 0.45", "2.79771, 20.9246, -6.09429, 0.45", "2.15219, 21.8384, -6.17539, 0.45", "1.58983, 22.775, -6.31464, 0.45", "1.14771, 23.6897, -6.53497, 0.45", "0.741164, 24.8094, -6.93001, 0.45", "0.243901, 26.6479, -7.73092, 0.45", "-0.181252, 28.6965, -8.75515, 0.45", "-0.451362, 30.3214, -9.68346, 0.45", "-0.650104, 31.9165, -10.7143, 0.45", "-0.769634, 33.4906, -11.7945, 0.45", "-0.795912, 34.9763, -12.8329, 0.45", "-0.745553, 36.491, -13.8896, 0.45", "-0.606029, 38.2704, -15.127, 0.45", "-0.362182, 40.4424, -16.6145, 0.45", "-0.112097, 42.4238, -17.9279, 0.45", "0.292221, 44.9352, -19.5531, 0.45", "0.707604, 47.1252, -20.955, 0.45", "1.15409, 49.3237, -22.3513, 0.45", "1.45364, 50.7075, -23.2309, 0.45", "1.87508, 52.6499, -24.5064, 0.45", "2.21425, 54.3947, -25.7128, 0.45", "2.48236, 56.0602, -26.9283, 0.45", "2.61703, 57.1378, -27.7571, 0.45", "2.7416, 58.4666, -28.8087, 0.45", "2.86206, 59.9509, -30.016, 0.45", "3.03078, 62.1616, -31.8579, 0.45", "3.16399, 63.9963, -33.4222, 0.45", "3.27798, 65.2873, -34.5334, 0.45", "3.43272, 66.9712, -35.9526, 0.45", "3.62179, 68.846, -37.4931, 0.23", "3.78435, 70.3273, -38.702, 0.23", "3.96539, 71.5903, -39.7375, 0.23", "4.08968, 72.3911, -40.4065, 0.23", "4.41079, 74.3425, -42.0496, 0.23", "4.64824, 76.0354, -43.5137, 0.23", "4.81188, 77.7546, -44.9959, 0.23", "4.85421, 79.3247, -46.3583, 0.23", "4.78405, 80.4384, -47.3458, 0.23", "4.67574, 81.4412, -48.2367, 0.23", "4.55917, 82.2003, -48.8934, 0.23", "4.28476, 83.4453, -49.9226, 0.23", "4.07155, 84.2006, -50.5131, 0.23", "3.33331, 86.2121, -52.0616, 0.23", "2.71905, 87.6265, -53.1733, 0.23", "2.00883, 88.9085, -54.2197, 0.23", "0.964327, 90.4425, -55.5171, 0.23", "-0.06947, 91.6991, -56.6182, 0.23", "-1.93026, 93.6082, -58.3432, 0.23", "-2.88187, 94.427, -59.1101, 0.23", "-4.74824, 95.8247, -60.4799, 0.23", "-6.21685, 96.9006, -61.5294, 0.23", "-7.35166, 97.7491, -62.3549, 0.45", "-9.27057, 99.2372, -63.8479, 0.23", "-10.1268, 99.9267, -64.5673, 0.23", "-11.4178, 101.027, -65.7581, 0.23", "-13.327, 102.751, -67.7567, 0.23", "-14.2765, 103.608, -68.7988, 0.23", "-15.2309, 104.37, -69.804, 0.23", "-16.6075, 105.308, -71.1448, 0.23", "-17.5999, 105.895, -72.0749, 0.23", "-18.5721, 106.371, -72.9259, 0.23", "-20.801, 107.189, -74.6924, 0.23", "-22.7912, 107.808, -76.1717, 0.23", "-24.0101, 108.148, -77.0531, 0.23", "-25.0473, 108.411, -77.8379, 0.23", "-26.3964, 108.774, -78.9817, 0.23", "-26.8799, 108.919, -79.4895, 0.23", "-27.1966, 109.056, -79.9374, 0.23", "-27.6812, 109.439, -80.823, 0.23", "-28.3512, 110.198, -82.1641, 0.23", "-29.043, 111.242, -83.6541, 0.23", "-29.6334, 112.394, -85.057, 0.23", "-30.3757, 114.049, -86.8754, 0.23", "-31.0947, 115.69, -88.5409, 0.23", "-31.8778, 117.511, -90.3114, 0.23", "-32.5515, 119.179, -91.82, 0.23", "-33.2862, 121.274, -93.5811, 0.23", "-33.6468, 122.499, -94.5262, 0.23", "-34.0521, 124.4, -95.9304, 0.23", "-38.2914, 131.085, -100.127, 0.23" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "25.8071, -0.475398, -3.65094, 0.45", "26.2068, -0.915468, -4.74797, 0.45", "26.7075, -1.43567, -5.87448, 0.45", "27.2707, -1.86557, -6.84189, 0.45", "27.7722, -2.17823, -7.57693, 0.45", "28.0178, -2.30388, -7.90094, 0.45", "28.4625, -2.52797, -8.5069, 0.45", "29.1318, -2.79681, -9.36474, 0.45", "30.053, -3.07143, -10.5734, 0.45", "30.7133, -3.18045, -11.5374, 0.45", "31.441, -3.21079, -12.6694, 0.45", "32.0941, -3.20123, -13.7209, 0.45", "32.9462, -3.17216, -15.0815, 0.45", "33.8928, -3.15057, -16.5815, 0.45", "35.4768, -3.17027, -19.0001, 0.23", "36.3563, -3.21061, -20.2261, 0.23", "37.6881, -3.30425, -21.8626, 0.23", "39.1293, -3.41638, -23.3657, 0.23", "39.5471, -3.46466, -23.7441, 0.23", "40.8715, -3.64919, -24.8511, 0.23", "42.5967, -3.9476, -26.2489, 0.23", "44.5585, -4.28723, -27.8181, 0.23", "45.5922, -4.44656, -28.6443, 0.23", "47.5034, -4.69444, -30.1912, 0.23", "49.1672, -4.88618, -31.5729, 0.23", "50.8114, -5.08235, -32.9856, 0.23", "54.8673, -7.13785, -39.2069, 0.23" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "25.8071, -0.475398, -3.65094, 0.45", "27.6503, -1.49504, -3.77223, 0.45", "28.476, -1.98873, -3.82654, 0.45", "30.0406, -2.9229, -3.92431, 0.68", "31.6471, -3.87385, -4.02659, 0.45", "33.2649, -4.83679, -4.18115, 0.45", "34.6637, -5.63708, -4.3411, 0.45", "36.1478, -6.47376, -4.55587, 0.45", "37.6076, -7.27927, -4.76153, 0.45", "38.5796, -7.81778, -4.89251, 0.45", "40.0453, -8.64749, -5.12842, 0.45", "42.4059, -9.91274, -5.56076, 0.45" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "16.6554, 15.8507, -5.24432, 0.45", "16.8392, 17.0528, -5.27229, 0.45", "17.2374, 19.3209, -5.23196, 0.45", "17.6273, 21.039, -5.12509, 0.45", "18.1076, 22.981, -4.95, 0.45", "18.6399, 24.8896, -4.75857, 0.45", "19.0667, 26.3452, -4.5954, 0.45", "19.706, 28.2817, -4.31146, 0.45", "20.4031, 30.3414, -3.94482, 0.45", "20.9861, 32.1983, -3.56782, 0.45", "21.5095, 34.1589, -3.09199, 0.45", "21.9885, 36.5249, -2.38055, 0.45", "22.1608, 37.7679, -1.93391, 0.45", "22.2718, 39.6404, -1.11971, 0.45", "22.1994, 41.1586, -0.303846, 0.45", "22.0171, 42.3647, 0.517051, 0.45", "21.7211, 43.5488, 1.49335, 0.45", "21.4356, 44.4764, 2.38731, 0.45", "21.1128, 45.4474, 3.45342, 0.45", "20.7964, 46.3919, 4.64392, 0.45", "20.5872, 47.034, 5.48492, 0.45", "20.3216, 47.7024, 6.38627, 0.45", "20.0879, 48.2592, 7.10585, 0.45", "19.7938, 48.955, 7.96566, 0.45", "19.431, 49.8287, 9.01414, 0.45", "19.0382, 50.764, 10.1236, 0.45", "18.6926, 51.5168, 10.9767, 0.45", "18.2946, 52.3518, 11.9046, 0.45", "17.8903, 53.2713, 12.8963, 0.45", "17.5513, 54.1505, 13.8052, 0.45", "17.269, 55.0323, 14.7199, 0.45", "17.0685, 55.7512, 15.5227, 0.45", "16.7245, 56.9987, 16.9739, 0.23", "16.4641, 57.8811, 18.0453, 0.23", "16.0983, 59.1232, 19.5274, 0.23", "15.8096, 60.1881, 20.741, 0.23", "15.488, 61.4022, 22.0993, 0.23", "15.2985, 62.0897, 22.8587, 0.23", "15.0568, 62.8352, 23.6295, 0.23", "14.7549, 63.7312, 24.4846, 0.23", "14.4762, 64.6186, 25.2424, 0.23", "14.259, 65.4506, 25.8589, 0.23", "14.1095, 66.2339, 26.3632, 0.23", "13.9908, 67.2947, 27.0498, 0.23", "13.9777, 68.0285, 27.5415, 0.23", "14.0779, 69.3655, 28.4208, 0.23", "14.2859, 70.5027, 29.1454, 0.23", "14.6024, 71.5886, 29.8346, 0.23", "15.2308, 73.2263, 30.9268, 0.23", "15.897, 74.7707, 31.9835, 0.23", "16.4708, 75.9692, 32.8122, 0.23", "17.0896, 77.112, 33.6248, 0.23", "17.7739, 78.2623, 34.4665, 0.23", "18.5579, 79.4001, 35.2977, 0.23" ],
    "parent" : "dend_27",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "16.6554, 15.8507, -5.24432, 0.45", "17.8318, 15.5763, -4.68468, 0.45", "19.69, 15.0891, -3.81889, 0.45", "21.1939, 14.7093, -3.1104, 0.45", "22.7808, 14.348, -2.37277, 0.45", "24.2417, 14.0866, -1.74392, 0.45", "25.3326, 13.9142, -1.30024, 0.45", "26.9802, 13.6849, -0.703374, 0.45", "28.4818, 13.5124, -0.210257, 0.45", "30.0581, 13.3718, 0.244551, 0.45", "32.221, 13.1838, 0.809164, 0.45", "33.492, 13.0636, 1.11308, 0.45", "34.4828, 12.9463, 1.32805, 0.45", "35.0606, 12.8733, 1.44961, 0.45", "36.5005, 12.6507, 1.75422, 0.45", "38.3587, 12.3219, 2.1902, 0.45", "40.5176, 11.892, 2.75191, 0.45", "43.1974, 11.3501, 3.47246, 0.45", "44.9289, 10.9665, 3.953, 0.45", "46.8701, 10.5025, 4.516, 0.45", "48.5253, 10.0802, 5.02876, 0.45", "49.2553, 9.88812, 5.26857, 0.45", "50.6091, 9.49284, 5.71961, 0.45", "52.0308, 9.06775, 6.2241, 0.45", "53.5472, 8.62003, 6.78791, 0.45", "54.6711, 8.31145, 7.21111, 0.45", "56.176, 7.93585, 7.77735, 0.45", "58.2281, 7.49799, 8.56055, 0.23", "59.7823, 7.22853, 9.14266, 0.23", "61.7052, 6.90397, 9.84954, 0.23", "62.6598, 6.74052, 10.1912, 0.23", "64.304, 6.44214, 10.6987, 0.23", "65.6977, 6.17023, 11.0533, 0.23", "67.4191, 5.82008, 11.3681, 0.23", "69.2329, 5.44347, 11.5047, 0.23", "70.4831, 5.1702, 11.4731, 0.23", "72.6467, 4.71502, 11.2646, 0.45", "74.2236, 4.40528, 10.9958, 0.45", "75.6011, 4.14589, 10.7064, 0.45", "77.9509, 3.6757, 10.1755, 0.23", "79.3523, 3.41164, 9.8558, 0.23", "80.8751, 3.11076, 9.54224, 0.23", "82.3046, 2.82784, 9.33555, 0.23", "84.1138, 2.44936, 9.17294, 0.23", "86.425, 1.94212, 9.1077, 0.23", "87.3873, 1.70601, 9.12747, 0.23", "88.5427, 1.38919, 9.16143, 0.23", "90.6955, 0.753203, 9.20569, 0.23", "93.0017, 0.0742747, 9.23774, 0.23", "95.5858, -0.671606, 9.23032, 0.23", "98.0935, -1.36305, 9.13258, 0.23", "100.759, -2.12777, 8.87955, 0.23", "101.742, -2.41819, 8.76689, 0.23", "103.442, -2.92548, 8.52076, 0.23", "105.49, -3.52708, 8.14873, 0.23", "108.479, -4.37386, 7.48208, 0.23", "111.692, -5.19432, 6.64817, 0.23", "119.7, -8.6904, 6.20797, 0.23", "128.12, -10.9883, 6.80062, 0.23" ],
    "parent" : "dend_27",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "42.4059, -9.91274, -5.56076, 0.45", "43.9164, -9.57882, -5.40241, 0.45", "45.3078, -9.2487, -5.30825, 0.45", "47.711, -8.64486, -5.18177, 0.23", "48.5346, -8.44976, -5.14541, 0.23", "49.598, -8.19991, -5.09634, 0.23", "50.8599, -7.93621, -5.04225, 0.23", "51.9616, -7.72514, -4.99843, 0.23", "53.0866, -7.5297, -4.949, 0.23", "54.4669, -7.30904, -4.87541, 0.23", "56.0847, -7.05168, -4.75856, 0.23", "58.5209, -6.65182, -4.53738, 0.23", "60.372, -6.35568, -4.32319, 0.23", "62.215, -6.08768, -4.05534, 0.23", "63.4337, -5.91197, -3.85853, 0.23", "65.473, -5.59792, -3.47263, 0.23", "66.5321, -5.44456, -3.24782, 0.23", "67.7547, -5.27971, -2.95993, 0.23", "69.7152, -5.10888, -2.49623, 0.23", "70.4426, -5.06441, -2.3279, 0.23", "71.3731, -5.02885, -2.12508, 0.23", "73.3305, -5.05509, -1.73643, 0.23", "74.1772, -5.08967, -1.57601, 0.23", "75.8114, -5.16798, -1.29043, 0.23", "77.5084, -5.27288, -1.01977, 0.23", "78.4216, -5.35737, -0.885715, 0.23", "80.0107, -5.5163, -0.647904, 0.23", "80.8116, -5.60081, -0.513922, 0.23", "82.0758, -5.73602, -0.29343, 0.23", "83.2914, -5.85775, -0.0799856, 0.23", "84.2981, -5.9304, 0.0612495, 0.23", "85.7633, -5.96469, 0.23247, 0.23", "87.8031, -5.95472, 0.417243, 0.23", "88.8937, -5.944, 0.495346, 0.23", "90.6266, -5.91174, 0.600873, 0.23", "93.0436, -5.83183, 0.724895, 0.23", "93.9827, -5.78735, 0.758633, 0.23", "96.0672, -5.68062, 0.787846, 0.23", "97.9093, -5.54781, 0.795563, 0.23", "99.7866, -5.42127, 0.80602, 0.23", "106.319, -3.6675, 0.630902, 0.23" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "42.4059, -9.91274, -5.56076, 0.45", "43.9275, -11.1695, -5.50371, 0.45", "45.5228, -12.3914, -5.48702, 0.45", "47.71, -14.0314, -5.49629, 0.45", "50.8641, -16.3475, -5.64133, 0.45", "52.9472, -17.9485, -5.81865, 0.23", "54.704, -19.3345, -6.00552, 0.23", "56.0855, -20.4288, -6.17881, 0.45", "57.2245, -21.3987, -6.31107, 0.45", "58.5072, -22.555, -6.41914, 0.45", "60.8619, -24.8237, -6.506, 0.45", "62.9479, -26.8737, -6.49845, 0.45", "64.9098, -28.7662, -6.45142, 0.45", "66.1322, -29.9763, -6.39898, 0.45", "69.2371, -33.0823, -6.20648, 0.45", "72.0739, -35.976, -5.96003, 0.45", "74.1016, -38.0953, -5.75618, 0.45", "75.446, -39.602, -5.61205, 0.45", "77.2875, -41.8082, -5.42582, 0.23", "79.4936, -44.7092, -5.20288, 0.23", "80.2003, -45.7874, -5.11622, 0.23", "81.1782, -47.5223, -4.965, 0.23", "82.2024, -49.6056, -4.75218, 0.23", "82.7948, -51.0169, -4.59263, 0.23", "83.3308, -52.4591, -4.45092, 0.23", "83.7858, -53.8458, -4.35835, 0.23", "84.3533, -55.5992, -4.28568, 0.23", "84.8766, -57.2821, -4.26121, 0.23", "85.1833, -58.3618, -4.23566, 0.23", "85.4923, -59.5899, -4.16341, 0.23", "85.8504, -61.2868, -3.98569, 0.23", "86.1554, -62.8813, -3.79795, 0.23", "86.5012, -64.6251, -3.56134, 0.23", "86.74, -65.7346, -3.3843, 0.23", "87.3328, -68.3743, -2.90703, 0.23", "87.8842, -71.3702, -2.28958, 0.23", "94.3698, -79.2839, -1.85743, 0.23", "100.834, -87.2016, -1.21779, 0.23", "107.927, -94.5883, -1.26371, 0.23" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_34", "dend_31", "dend_30", "dend_17", "dend_14", "dend_11", "dend_8", "dend_1", "dend_0", "dend_36", "dend_35", "dend_33", "dend_32", "dend_19", "dend_18", "dend_16", "dend_15", "dend_13", "dend_12", "dend_10", "dend_9", "dend_5", "dend_2", "dend_25", "dend_20", "dend_7", "dend_6", "dend_4", "dend_3", "dend_27", "dend_26", "dend_24", "dend_21", "dend_29", "dend_28", "dend_23", "dend_22" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_34", "dend_31", "dend_30", "dend_17", "dend_14", "dend_11", "dend_8", "dend_1", "dend_0", "dend_36", "dend_35", "dend_33", "dend_32", "dend_19", "dend_18", "dend_16", "dend_15", "dend_13", "dend_12", "dend_10", "dend_9", "dend_5", "dend_2", "dend_25", "dend_20", "dend_7", "dend_6", "dend_4", "dend_3", "dend_27", "dend_26", "dend_24", "dend_21", "dend_29", "dend_28", "dend_23", "dend_22" ]
  }, {
    "name" : "ModelViewParmSubset_5",
    "groups" : [ ],
    "sections" : [ "dend_34", "dend_31", "dend_30", "dend_17", "dend_14", "dend_11", "dend_8", "dend_1", "dend_0", "axon_0", "dend_36", "dend_35", "dend_33", "dend_32", "dend_19", "dend_18", "dend_16", "dend_15", "dend_13", "dend_12", "dend_10", "dend_9", "dend_5", "dend_2", "axon_1", "dend_25", "dend_20", "dend_7", "dend_6", "dend_4", "dend_3", "dend_27", "dend_26", "dend_24", "dend_21", "dend_29", "dend_28", "dend_23", "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_36" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_35" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_33" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_32" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_35",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_37",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_38",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_39",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_40",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_34" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_31" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_36",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30", "dend_31", "dend_32", "dend_33", "dend_34", "dend_35", "dend_36" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_17", "dend_17", "dend_17", "dend_17", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_8", "dend_8", "dend_8", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_19", "dend_19", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "axon_1", "axon_1", "dend_25", "dend_25", "dend_25", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "3.25478E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "3.25478E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.993125",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.005611",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.068459995",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.517764",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "6.3E-5",
    "erev" : "-64.6017"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "3.45E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.077616",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "7.43567E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.002099",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "1.13999995E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.26087198",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "2.0E-5",
    "erev" : "-69.78141"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.395881",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009986",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "5.0100003E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.009728",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "2.7999999E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cIR_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cIR_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cIR216_L6_NBC_e6f3e8d1f4_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_34, id: dend_34, parent: soma_0
create dend_34
public dend_34
// Section: dend_31, id: dend_31, parent: soma_0
create dend_31
public dend_31
// Section: dend_30, id: dend_30, parent: soma_0
create dend_30
public dend_30
// Section: dend_17, id: dend_17, parent: soma_0
create dend_17
public dend_17
// Section: dend_14, id: dend_14, parent: soma_0
create dend_14
public dend_14
// Section: dend_11, id: dend_11, parent: soma_0
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: soma_0
create dend_8
public dend_8
// Section: dend_1, id: dend_1, parent: soma_0
create dend_1
public dend_1
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_36, id: dend_36, parent: dend_34
create dend_36
public dend_36
// Section: dend_35, id: dend_35, parent: dend_34
create dend_35
public dend_35
// Section: dend_33, id: dend_33, parent: dend_31
create dend_33
public dend_33
// Section: dend_32, id: dend_32, parent: dend_31
create dend_32
public dend_32
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_16, id: dend_16, parent: dend_14
create dend_16
public dend_16
// Section: dend_15, id: dend_15, parent: dend_14
create dend_15
public dend_15
// Section: dend_13, id: dend_13, parent: dend_11
create dend_13
public dend_13
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9
// Section: dend_5, id: dend_5, parent: dend_1
create dend_5
public dend_5
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_25, id: dend_25, parent: dend_19
create dend_25
public dend_25
// Section: dend_20, id: dend_20, parent: dend_19
create dend_20
public dend_20
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_4, id: dend_4, parent: dend_2
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_27, id: dend_27, parent: dend_25
create dend_27
public dend_27
// Section: dend_26, id: dend_26, parent: dend_25
create dend_26
public dend_26
// Section: dend_24, id: dend_24, parent: dend_20
create dend_24
public dend_24
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_29, id: dend_29, parent: dend_27
create dend_29
public dend_29
// Section: dend_28, id: dend_28, parent: dend_27
create dend_28
public dend_28
// Section: dend_23, id: dend_23, parent: dend_21
create dend_23
public dend_23
// Section: dend_22, id: dend_22, parent: dend_21
create dend_22
public dend_22

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_34, dend_31, dend_30, dend_17, dend_14, dend_11, dend_8, dend_1, dend_0, dend_36, dend_35, dend_33, dend_32, dend_19, dend_18, dend_16, dend_15, dend_13, dend_12, dend_10, dend_9, dend_5, dend_2, dend_25, dend_20, dend_7, dend_6, dend_4, dend_3, dend_27, dend_26, dend_24, dend_21, dend_29, dend_28, dend_23, dend_22]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_34, dend_31, dend_30, dend_17, dend_14, dend_11, dend_8, dend_1, dend_0, dend_36, dend_35, dend_33, dend_32, dend_19, dend_18, dend_16, dend_15, dend_13, dend_12, dend_10, dend_9, dend_5, dend_2, dend_25, dend_20, dend_7, dend_6, dend_4, dend_3, dend_27, dend_26, dend_24, dend_21, dend_29, dend_28, dend_23, dend_22]}
objref ModelViewParmSubset_4
// Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_34, dend_31, dend_30, dend_17, dend_14, dend_11, dend_8, dend_1, dend_0, axon_0, dend_36, dend_35, dend_33, dend_32, dend_19, dend_18, dend_16, dend_15, dend_13, dend_12, dend_10, dend_9, dend_5, dend_2, axon_1, dend_25, dend_20, dend_7, dend_6, dend_4, dend_3, dend_27, dend_26, dend_24, dend_21, dend_29, dend_28, dend_23, dend_22]}
objref ModelViewParmSubset_5
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_36]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_35]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_33]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_32]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_35
// Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_37
// Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_38
// Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_39
// Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_40
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_34]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_31]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_36
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_31
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_17, dend_17, dend_17, dend_17, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, axon_1, axon_1, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_27, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cIR_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cIR_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_34(0), soma_0(0.44999995616860894)
    connect dend_31(0), soma_0(0.44999995616860894)
    connect dend_30(0), soma_0(0.44999995616860894)
    connect dend_17(0), soma_0(0.44999995616860894)
    connect dend_14(0), soma_0(0.44999995616860894)
    connect dend_11(0), soma_0(0.44999995616860894)
    connect dend_8(0), soma_0(0.44999995616860894)
    connect dend_1(0), soma_0(0.44999995616860894)
    connect dend_0(0), soma_0(0.44999995616860894)
    connect axon_0(0), soma_0(1.0)
    connect dend_36(0), dend_34(1.0)
    connect dend_35(0), dend_34(1.0)
    connect dend_33(0), dend_31(1.0)
    connect dend_32(0), dend_31(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_16(0), dend_14(1.0)
    connect dend_15(0), dend_14(1.0)
    connect dend_13(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)
    connect dend_5(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_25(0), dend_19(1.0)
    connect dend_20(0), dend_19(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_4(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_27(0), dend_25(1.0)
    connect dend_26(0), dend_25(1.0)
    connect dend_24(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_29(0), dend_27(1.0)
    connect dend_28(0), dend_27(1.0)
    connect dend_23(0), dend_21(1.0)
    connect dend_22(0), dend_21(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -7.79996, 1.63899, 0.0, 2.31456 ) }
    soma_0 { pt3dadd( -7.07575, 1.4414, 0.0, 3.87478 ) }
    soma_0 { pt3dadd( -6.35154, 1.2438, 0.0, 5.48504 ) }
    soma_0 { pt3dadd( -5.62733, 1.04621, 0.0, 6.75924 ) }
    soma_0 { pt3dadd( -4.90312, 0.848615, 0.0, 7.77214 ) }
    soma_0 { pt3dadd( -4.17891, 0.65102, 0.0, 8.39732 ) }
    soma_0 { pt3dadd( -3.4547, 0.453425, 0.0, 9.01032 ) }
    soma_0 { pt3dadd( -2.73049, 0.255831, 0.0, 9.61582 ) }
    soma_0 { pt3dadd( -2.00628, 0.0582363, 0.0, 9.97495 ) }
    soma_0 { pt3dadd( -1.28207, -0.139358, 0.0, 10.1182 ) }
    soma_0 { pt3dadd( -0.557856, -0.336953, 0.0, 10.2615 ) }
    soma_0 { pt3dadd( 0.166353, -0.534547, 0.0, 10.4039 ) }
    soma_0 { pt3dadd( 0.890563, -0.732142, 0.0, 10.3605 ) }
    soma_0 { pt3dadd( 1.61477, -0.929737, 0.0, 10.3021 ) }
    soma_0 { pt3dadd( 2.33898, -1.12733, 0.0, 10.2398 ) }
    soma_0 { pt3dadd( 3.06319, -1.32493, 0.0, 10.0638 ) }
    soma_0 { pt3dadd( 3.7874, -1.52252, 0.0, 9.71016 ) }
    soma_0 { pt3dadd( 4.51161, -1.72011, 0.0, 8.98989 ) }
    soma_0 { pt3dadd( 5.23582, -1.91771, 0.0, 7.92103 ) }
    soma_0 { pt3dadd( 5.96003, -2.1153, 0.0, 6.49304 ) }
    soma_0 { pt3dadd( 6.68424, -2.3129, 0.0, 3.64119 ) }
    // Section: dend_34, id: dend_34, parent: soma_0 (entry count 21/100)
    dend_34 { pt3dclear() }
    dend_34 { pt3dadd( 2.72858, -5.46425, 7.36, 1.36 ) }
    dend_34 { pt3dadd( 2.72858, -5.46425, 7.36, 1.36 ) }
    dend_34 { pt3dadd( 2.99959, -7.00655, 7.15664, 1.14 ) }
    dend_34 { pt3dadd( 3.36646, -9.09436, 6.88136, 0.91 ) }
    dend_34 { pt3dadd( 3.84199, -11.8006, 6.52453, 0.91 ) }
    dend_34 { pt3dadd( 4.12931, -13.4357, 6.30894, 0.91 ) }
    dend_34 { pt3dadd( 4.57148, -15.9521, 5.97715, 0.91 ) }
    // Section: dend_31, id: dend_31, parent: soma_0 (entry count 28/100)
    dend_31 { pt3dclear() }
    dend_31 { pt3dadd( -1.14142, -3.16426, -3.98, 0.68 ) }
    dend_31 { pt3dadd( -1.14142, -3.16426, -3.98, 0.68 ) }
    dend_31 { pt3dadd( -1.82398, -3.74825, -5.15011, 0.68 ) }
    dend_31 { pt3dadd( -2.4676, -4.22304, -6.26007, 0.68 ) }
    dend_31 { pt3dadd( -2.94022, -4.56069, -7.06187, 0.68 ) }
    dend_31 { pt3dadd( -3.48749, -4.93628, -7.9876, 0.68 ) }
    dend_31 { pt3dadd( -4.113, -5.31986, -8.99358, 0.68 ) }
    dend_31 { pt3dadd( -4.73999, -5.67716, -10.0083, 0.68 ) }
    dend_31 { pt3dadd( -5.30974, -5.95383, -10.9418, 0.68 ) }
    dend_31 { pt3dadd( -5.92924, -6.21627, -11.9295, 0.68 ) }
    dend_31 { pt3dadd( -6.63144, -6.49504, -12.9989, 0.68 ) }
    dend_31 { pt3dadd( -7.45416, -6.7954, -14.1839, 0.68 ) }
    // Section: dend_30, id: dend_30, parent: soma_0 (entry count 40/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( 4.57856, -3.98425, 2.8, 0.68 ) }
    dend_30 { pt3dadd( 4.57856, -3.98425, 2.8, 0.68 ) }
    dend_30 { pt3dadd( 5.76086, -5.68552, 3.14508, 0.68 ) }
    dend_30 { pt3dadd( 6.41557, -6.67163, 3.36338, 0.68 ) }
    dend_30 { pt3dadd( 7.59219, -8.44745, 3.78413, 0.68 ) }
    dend_30 { pt3dadd( 8.60502, -9.91063, 4.12223, 0.68 ) }
    dend_30 { pt3dadd( 9.68241, -11.4332, 4.44619, 0.68 ) }
    dend_30 { pt3dadd( 10.4885, -12.5324, 4.66366, 0.68 ) }
    dend_30 { pt3dadd( 11.7185, -14.1396, 4.98087, 0.45 ) }
    dend_30 { pt3dadd( 12.8734, -15.6682, 5.29591, 0.68 ) }
    dend_30 { pt3dadd( 14.5843, -17.9243, 5.84499, 0.68 ) }
    dend_30 { pt3dadd( 15.8311, -19.5235, 6.29748, 0.68 ) }
    dend_30 { pt3dadd( 16.7094, -20.6523, 6.67253, 0.68 ) }
    dend_30 { pt3dadd( 17.4973, -21.6422, 7.04779, 0.68 ) }
    dend_30 { pt3dadd( 18.2972, -22.6577, 7.46289, 0.68 ) }
    dend_30 { pt3dadd( 19.3125, -23.9725, 8.03978, 0.68 ) }
    dend_30 { pt3dadd( 20.2028, -25.0981, 8.61164, 0.68 ) }
    dend_30 { pt3dadd( 21.2455, -26.3588, 9.34392, 0.45 ) }
    dend_30 { pt3dadd( 21.9894, -27.2359, 9.8843, 0.45 ) }
    dend_30 { pt3dadd( 23.2961, -28.7342, 10.7901, 0.45 ) }
    dend_30 { pt3dadd( 24.4, -29.9207, 11.5143, 0.45 ) }
    dend_30 { pt3dadd( 25.2302, -30.7781, 12.0631, 0.45 ) }
    dend_30 { pt3dadd( 25.9719, -31.5093, 12.5818, 0.45 ) }
    dend_30 { pt3dadd( 26.9186, -32.4316, 13.3468, 0.45 ) }
    dend_30 { pt3dadd( 27.9213, -33.4933, 14.319, 0.45 ) }
    dend_30 { pt3dadd( 28.6328, -34.2755, 15.1354, 0.45 ) }
    dend_30 { pt3dadd( 29.1496, -34.9293, 15.8052, 0.45 ) }
    dend_30 { pt3dadd( 29.7103, -35.695, 16.5223, 0.45 ) }
    dend_30 { pt3dadd( 30.334, -36.5966, 17.3148, 0.45 ) }
    dend_30 { pt3dadd( 31.1234, -37.8027, 18.3563, 0.45 ) }
    dend_30 { pt3dadd( 31.7045, -38.7645, 19.178, 0.45 ) }
    dend_30 { pt3dadd( 32.2578, -39.717, 20.0082, 0.23 ) }
    dend_30 { pt3dadd( 32.8675, -40.729, 20.87, 0.23 ) }
    dend_30 { pt3dadd( 33.5767, -41.8399, 21.794, 0.23 ) }
    dend_30 { pt3dadd( 34.0394, -42.5461, 22.3616, 0.23 ) }
    dend_30 { pt3dadd( 34.5121, -43.3051, 23.0, 0.23 ) }
    dend_30 { pt3dadd( 35.2833, -44.6835, 24.1557, 0.23 ) }
    // Section: dend_17, id: dend_17, parent: soma_0 (entry count 77/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 6.16864, 1.47576, -0.84, 2.27 ) }
    dend_17 { pt3dadd( 6.16864, 1.47576, -0.84, 2.27 ) }
    dend_17 { pt3dadd( 7.59676, 2.2412, -1.71709, 1.82 ) }
    dend_17 { pt3dadd( 9.52822, 3.27643, -2.90332, 1.36 ) }
    dend_17 { pt3dadd( 10.989, 4.05937, -3.80046, 1.36 ) }
    // Section: dend_14, id: dend_14, parent: soma_0 (entry count 82/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 3.79865, -4.57425, 5.46, 0.91 ) }
    dend_14 { pt3dadd( 3.79865, -4.57425, 5.46, 0.91 ) }
    dend_14 { pt3dadd( 4.5307, -5.39003, 5.88934, 0.91 ) }
    dend_14 { pt3dadd( 5.36889, -6.27598, 6.4034, 0.68 ) }
    dend_14 { pt3dadd( 6.21984, -7.09119, 6.96107, 0.68 ) }
    dend_14 { pt3dadd( 6.86838, -7.67242, 7.42085, 0.91 ) }
    dend_14 { pt3dadd( 7.57121, -8.23539, 7.96204, 0.91 ) }
    dend_14 { pt3dadd( 8.29315, -8.65924, 8.53785, 0.68 ) }
    dend_14 { pt3dadd( 9.19136, -8.97297, 9.27415, 0.68 ) }
    dend_14 { pt3dadd( 9.92342, -9.14998, 9.8992, 0.68 ) }
    dend_14 { pt3dadd( 10.3251, -9.24035, 10.2478, 0.68 ) }
    dend_14 { pt3dadd( 11.1503, -9.42281, 10.9574, 0.68 ) }
    dend_14 { pt3dadd( 12.4183, -9.71277, 11.9613, 0.45 ) }
    dend_14 { pt3dadd( 13.3332, -9.93905, 12.6153, 0.45 ) }
    dend_14 { pt3dadd( 14.2954, -10.1999, 13.2046, 0.45 ) }
    dend_14 { pt3dadd( 15.2519, -10.505, 13.7459, 0.45 ) }
    dend_14 { pt3dadd( 16.3169, -10.8938, 14.3013, 0.45 ) }
    dend_14 { pt3dadd( 17.126, -11.245, 14.6905, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_14 { pt3dadd( 18.2572, -11.796, 15.217, 0.68 ) }
    dend_14 { pt3dadd( 19.5838, -12.4341, 15.7681, 0.68 ) }
    // Section: dend_11, id: dend_11, parent: soma_0 (entry count 2/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 0.288636, -4.50425, 6.82, 0.91 ) }
    dend_11 { pt3dadd( 0.288636, -4.50425, 6.82, 0.91 ) }
    dend_11 { pt3dadd( -0.950339, -6.34147, 7.81409, 0.91 ) }
    dend_11 { pt3dadd( -2.21566, -8.07218, 8.82165, 0.91 ) }
    dend_11 { pt3dadd( -3.34203, -9.61282, 9.71857, 0.91 ) }
    dend_11 { pt3dadd( -4.30024, -10.9235, 10.4816, 0.91 ) }
    dend_11 { pt3dadd( -5.3161, -12.313, 11.2905, 0.91 ) }
    dend_11 { pt3dadd( -6.23423, -13.5232, 12.0599, 0.91 ) }
    dend_11 { pt3dadd( -7.1244, -14.5847, 12.8996, 0.91 ) }
    // Section: dend_8, id: dend_8, parent: soma_0 (entry count 11/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -6.31134, 0.665745, 6.86, 0.91 ) }
    dend_8 { pt3dadd( -6.31134, 0.665745, 6.86, 0.91 ) }
    dend_8 { pt3dadd( -7.19139, 0.665745, 7.19816, 0.91 ) }
    dend_8 { pt3dadd( -9.13766, 0.665745, 7.94602, 0.91 ) }
    // Section: dend_1, id: dend_1, parent: soma_0 (entry count 15/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -6.99139, 1.53575, -3.54, 0.91 ) }
    dend_1 { pt3dadd( -6.99139, 1.53575, -3.54, 0.91 ) }
    dend_1 { pt3dadd( -7.72794, 1.644, -3.73577, 0.91 ) }
    dend_1 { pt3dadd( -8.62518, 1.72786, -3.98765, 0.91 ) }
    dend_1 { pt3dadd( -9.88382, 1.82128, -4.38562, 0.91 ) }
    dend_1 { pt3dadd( -10.5336, 1.85952, -4.61329, 0.91 ) }
    dend_1 { pt3dadd( -11.5276, 1.89887, -4.98485, 0.91 ) }
    dend_1 { pt3dadd( -12.4582, 1.90461, -5.35797, 0.91 ) }
    dend_1 { pt3dadd( -13.3633, 1.88802, -5.7321, 0.91 ) }
    dend_1 { pt3dadd( -14.4031, 1.84661, -6.17478, 0.68 ) }
    dend_1 { pt3dadd( -15.6436, 1.76986, -6.71556, 0.91 ) }
    dend_1 { pt3dadd( -16.5638, 1.70972, -7.126, 0.91 ) }
    dend_1 { pt3dadd( -17.591, 1.65826, -7.60651, 0.91 ) }
    dend_1 { pt3dadd( -19.1171, 1.60236, -8.30692, 0.91 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 29/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -4.04144, 4.11576, 5.18, 0.91 ) }
    dend_0 { pt3dadd( -4.04144, 4.11576, 5.18, 0.91 ) }
    dend_0 { pt3dadd( -4.75488, 6.1751, 6.42003, 0.91 ) }
    dend_0 { pt3dadd( -5.11607, 7.86383, 7.37573, 0.68 ) }
    dend_0 { pt3dadd( -5.25643, 9.43054, 8.20579, 0.68 ) }
    dend_0 { pt3dadd( -5.26637, 10.5847, 8.80235, 0.68 ) }
    dend_0 { pt3dadd( -5.19055, 12.1386, 9.58878, 0.68 ) }
    dend_0 { pt3dadd( -4.9873, 13.5486, 10.3136, 0.68 ) }
    dend_0 { pt3dadd( -4.54717, 15.4696, 11.3663, 0.68 ) }
    dend_0 { pt3dadd( -4.10767, 17.3185, 12.3949, 0.68 ) }
    dend_0 { pt3dadd( -3.78519, 18.6048, 13.1558, 0.68 ) }
    dend_0 { pt3dadd( -3.50786, 19.7562, 13.914, 0.68 ) }
    dend_0 { pt3dadd( -3.2182, 21.0126, 14.8233, 0.68 ) }
    dend_0 { pt3dadd( -2.98216, 22.1964, 15.7822, 0.45 ) }
    dend_0 { pt3dadd( -2.74175, 23.6372, 17.1582, 0.45 ) }
    dend_0 { pt3dadd( -2.66112, 24.9238, 18.5706, 0.45 ) }
    dend_0 { pt3dadd( -2.65512, 25.9643, 19.8026, 0.45 ) }
    dend_0 { pt3dadd( -2.66431, 26.8274, 20.8473, 0.68 ) }
    dend_0 { pt3dadd( -2.66268, 27.7148, 21.8854, 0.45 ) }
    dend_0 { pt3dadd( -2.64411, 28.719, 22.993, 0.45 ) }
    dend_0 { pt3dadd( -2.71243, 29.4643, 23.7968, 0.45 ) }
    dend_0 { pt3dadd( -3.02794, 30.5762, 24.9171, 0.45 ) }
    dend_0 { pt3dadd( -3.37588, 31.5313, 25.889, 0.45 ) }
    dend_0 { pt3dadd( -3.72948, 32.6803, 27.0468, 0.45 ) }
    dend_0 { pt3dadd( -3.93633, 33.7033, 27.9965, 0.45 ) }
    dend_0 { pt3dadd( -4.18264, 35.038, 29.1525, 0.45 ) }
    dend_0 { pt3dadd( -4.43083, 36.0665, 30.0671, 0.45 ) }
    dend_0 { pt3dadd( -4.77634, 36.9624, 30.9281, 0.45 ) }
    dend_0 { pt3dadd( -5.38737, 38.2009, 32.1595, 0.45 ) }
    dend_0 { pt3dadd( -5.85963, 39.0978, 33.0594, 0.45 ) }
    dend_0 { pt3dadd( -6.28186, 40.0427, 34.0016, 0.45 ) }
    dend_0 { pt3dadd( -6.49631, 40.7385, 34.682, 0.45 ) }
    dend_0 { pt3dadd( -6.85403, 42.2541, 36.0993, 0.45 ) }
    dend_0 { pt3dadd( -7.08772, 43.4447, 37.1419, 0.45 ) }
    dend_0 { pt3dadd( -7.18862, 44.2037, 37.8418, 0.45 ) }
    dend_0 { pt3dadd( -7.06514, 45.2388, 38.8008, 0.45 ) }
    dend_0 { pt3dadd( -6.70275, 46.3387, 39.8156, 0.45 ) }
    dend_0 { pt3dadd( -6.15391, 47.524, 40.9302, 0.45 ) }
    dend_0 { pt3dadd( -5.59816, 48.5653, 41.8851, 0.45 ) }
    dend_0 { pt3dadd( -4.82151, 49.8484, 43.0778, 0.45 ) }
    dend_0 { pt3dadd( -3.58852, 51.8643, 44.9832, 0.23 ) }
    dend_0 { pt3dadd( -3.13252, 52.5644, 45.6718, 0.23 ) }
    dend_0 { pt3dadd( -2.46128, 53.5566, 46.6412, 0.23 ) }
    dend_0 { pt3dadd( -1.71583, 54.6005, 47.6164, 0.23 ) }
    dend_0 { pt3dadd( -0.910827, 55.6855, 48.5636, 0.23 ) }
    dend_0 { pt3dadd( -0.111663, 56.7308, 49.4336, 0.23 ) }
    dend_0 { pt3dadd( 0.973657, 58.2011, 50.6565, 0.23 ) }
    dend_0 { pt3dadd( 2.24149, 59.8089, 51.9769, 0.23 ) }
    dend_0 { pt3dadd( 3.49597, 61.2696, 53.1819, 0.23 ) }
    dend_0 { pt3dadd( 4.70184, 62.574, 54.3125, 0.23 ) }
    dend_0 { pt3dadd( 5.64465, 63.6598, 55.1944, 0.23 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 80/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 6.68424, -2.3129, 0.0, 0.767544 ) }
    axon_0 { pt3dadd( 21.1553, -6.2612, 0.0, 0.767544 ) }
    axon_0 { pt3dadd( 35.6263, -10.2095, 0.0, 0.767544 ) }
    // Section: dend_36, id: dend_36, parent: dend_34 (entry count 83/100)
    dend_36 { pt3dclear() }
    dend_36 { pt3dadd( 4.57148, -15.9521, 5.97715, 0.68 ) }
    dend_36 { pt3dadd( 5.38427, -16.9385, 5.76729, 0.68 ) }
    dend_36 { pt3dadd( 6.7693, -18.6994, 5.33093, 0.68 ) }
    dend_36 { pt3dadd( 8.09079, -20.4468, 4.88893, 0.68 ) }
    dend_36 { pt3dadd( 9.29036, -22.0504, 4.49189, 0.68 ) }
    dend_36 { pt3dadd( 10.7604, -24.1413, 4.0164, 0.68 ) }
    dend_36 { pt3dadd( 12.0425, -26.1313, 3.61085, 0.68 ) }
    dend_36 { pt3dadd( 13.1319, -28.0344, 3.24596, 0.68 ) }
    dend_36 { pt3dadd( 13.7541, -29.2469, 3.01549, 0.68 ) }
    dend_36 { pt3dadd( 14.8463, -31.5551, 2.5801, 0.68 ) }
    dend_36 { pt3dadd( 15.8272, -33.7345, 2.1726, 0.68 ) }
    dend_36 { pt3dadd( 16.6067, -35.6348, 1.84869, 0.68 ) }
    dend_36 { pt3dadd( 17.4052, -37.7237, 1.56831, 0.45 ) }
    dend_36 { pt3dadd( 18.0489, -39.6023, 1.33774, 0.45 ) }
    dend_36 { pt3dadd( 18.6102, -41.4965, 1.04433, 0.45 ) }
    dend_36 { pt3dadd( 19.0518, -43.1594, 0.690957, 0.45 ) }
    dend_36 { pt3dadd( 19.6481, -45.3827, 0.0318473, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_36 { pt3dadd( 20.0918, -47.1417, -0.600181, 0.45 ) }
    dend_36 { pt3dadd( 20.486, -48.9178, -1.33773, 0.68 ) }
    dend_36 { pt3dadd( 20.8845, -50.6819, -2.16649, 0.68 ) }
    dend_36 { pt3dadd( 21.3544, -52.6254, -3.16119, 0.68 ) }
    dend_36 { pt3dadd( 21.892, -54.5036, -4.20856, 0.45 ) }
    dend_36 { pt3dadd( 22.531, -56.3099, -5.28497, 0.45 ) }
    dend_36 { pt3dadd( 23.003, -57.5311, -5.9867, 0.45 ) }
    dend_36 { pt3dadd( 23.9206, -59.6047, -7.06634, 0.45 ) }
    dend_36 { pt3dadd( 24.3913, -60.5494, -7.49434, 0.45 ) }
    dend_36 { pt3dadd( 25.0945, -61.8149, -8.0197, 0.45 ) }
    dend_36 { pt3dadd( 26.0315, -63.3138, -8.64261, 0.45 ) }
    dend_36 { pt3dadd( 27.3626, -65.1841, -9.52537, 0.45 ) }
    dend_36 { pt3dadd( 28.6125, -66.7927, -10.4146, 0.45 ) }
    dend_36 { pt3dadd( 29.8609, -68.3802, -11.4407, 0.45 ) }
    dend_36 { pt3dadd( 30.6645, -69.3251, -12.165, 0.45 ) }
    dend_36 { pt3dadd( 31.6127, -70.3489, -13.0701, 0.45 ) }
    dend_36 { pt3dadd( 32.8647, -71.6537, -14.3317, 0.45 ) }
    dend_36 { pt3dadd( 34.2302, -73.0945, -15.8132, 0.45 ) }
    dend_36 { pt3dadd( 35.5624, -74.6202, -17.3327, 0.45 ) }
    dend_36 { pt3dadd( 36.4312, -75.6515, -18.3899, 0.45 ) }
    dend_36 { pt3dadd( 37.2842, -76.6979, -19.4458, 0.45 ) }
    dend_36 { pt3dadd( 37.7866, -77.3387, -20.0687, 0.45 ) }
    dend_36 { pt3dadd( 38.5303, -78.3033, -20.9486, 0.45 ) }
    dend_36 { pt3dadd( 39.4345, -79.5587, -22.011, 0.45 ) }
    dend_36 { pt3dadd( 40.3649, -80.8796, -23.1305, 0.23 ) }
    dend_36 { pt3dadd( 41.2305, -82.1964, -24.2099, 0.23 ) }
    dend_36 { pt3dadd( 41.9424, -83.3196, -25.1488, 0.23 ) }
    dend_36 { pt3dadd( 42.6874, -84.6447, -26.274, 0.23 ) }
    dend_36 { pt3dadd( 43.4928, -86.3389, -27.6332, 0.23 ) }
    dend_36 { pt3dadd( 44.2972, -88.338, -29.076, 0.23 ) }
    dend_36 { pt3dadd( 44.467, -88.7759, -29.359, 0.23 ) }
    dend_36 { pt3dadd( 44.8587, -89.8021, -29.9642, 0.23 ) }
    dend_36 { pt3dadd( 45.5545, -91.7254, -31.002, 0.23 ) }
    dend_36 { pt3dadd( 46.1079, -93.383, -31.8307, 0.23 ) }
    dend_36 { pt3dadd( 46.9365, -95.8818, -33.0156, 0.23 ) }
    dend_36 { pt3dadd( 47.6092, -98.0795, -34.0078, 0.23 ) }
    dend_36 { pt3dadd( 48.1367, -100.027, -34.8918, 0.23 ) }
    dend_36 { pt3dadd( 48.6845, -102.421, -35.9433, 0.23 ) }
    dend_36 { pt3dadd( 49.0996, -104.318, -36.7744, 0.23 ) }
    dend_36 { pt3dadd( 49.2595, -105.205, -37.157, 0.23 ) }
    dend_36 { pt3dadd( 49.4032, -106.372, -37.6043, 0.23 ) }
    dend_36 { pt3dadd( 49.6215, -108.218, -38.2247, 0.23 ) }
    dend_36 { pt3dadd( 49.8156, -109.541, -38.6315, 0.23 ) }
    dend_36 { pt3dadd( 50.1975, -111.674, -39.1928, 0.23 ) }
    dend_36 { pt3dadd( 50.6806, -113.853, -39.6718, 0.23 ) }
    dend_36 { pt3dadd( 51.2816, -116.136, -40.0767, 0.23 ) }
    dend_36 { pt3dadd( 51.8525, -118.015, -40.3491, 0.23 ) }
    dend_36 { pt3dadd( 52.185, -118.957, -40.4686, 0.23 ) }
    dend_36 { pt3dadd( 52.8972, -120.745, -40.6966, 0.23 ) }
    dend_36 { pt3dadd( 53.8261, -123.066, -40.9827, 0.23 ) }
    dend_36 { pt3dadd( 54.7063, -125.057, -41.2638, 0.23 ) }
    dend_36 { pt3dadd( 55.4172, -126.512, -41.5123, 0.23 ) }
    dend_36 { pt3dadd( 55.9868, -127.663, -41.7245, 0.23 ) }
    dend_36 { pt3dadd( 56.587, -128.913, -41.9668, 0.23 ) }
    dend_36 { pt3dadd( 57.1923, -130.271, -42.2587, 0.23 ) }
    dend_36 { pt3dadd( 58.4176, -133.574, -43.0104, 0.23 ) }
    dend_36 { pt3dadd( 59.1937, -136.193, -43.5762, 0.23 ) }
    dend_36 { pt3dadd( 59.6068, -138.031, -43.9714, 0.23 ) }
    dend_36 { pt3dadd( 59.8996, -139.761, -44.3448, 0.23 ) }
    dend_36 { pt3dadd( 60.1828, -142.025, -44.8418, 0.23 ) }
    dend_36 { pt3dadd( 60.4525, -144.629, -45.4071, 0.23 ) }
    dend_36 { pt3dadd( 60.7563, -149.496, -46.4216, 0.23 ) }
    dend_36 { pt3dadd( 60.837, -151.838, -46.8942, 0.23 ) }
    dend_36 { pt3dadd( 60.8942, -153.79, -47.3062, 0.23 ) }
    dend_36 { pt3dadd( 60.9505, -155.15, -47.6078, 0.23 ) }
    dend_36 { pt3dadd( 66.3298, -163.461, -50.6097, 0.23 ) }
    // Section: dend_35, id: dend_35, parent: dend_34 (entry count 66/100)
    dend_35 { pt3dclear() }
    dend_35 { pt3dadd( 4.57148, -15.9521, 5.97715, 0.45 ) }
    dend_35 { pt3dadd( 4.80756, -17.3617, 4.08937, 0.45 ) }
    dend_35 { pt3dadd( 5.17591, -18.6514, 2.25901, 0.45 ) }
    dend_35 { pt3dadd( 5.35105, -19.2858, 1.35008, 0.45 ) }
    dend_35 { pt3dadd( 5.69235, -20.5443, -0.354506, 0.45 ) }
    dend_35 { pt3dadd( 6.0468, -21.5593, -1.72157, 0.45 ) }
    dend_35 { pt3dadd( 6.4624, -22.5244, -2.9997, 0.45 ) }
    dend_35 { pt3dadd( 6.99568, -23.4193, -4.15559, 0.45 ) }
    dend_35 { pt3dadd( 7.65868, -24.286, -5.22063, 0.45 ) }
    dend_35 { pt3dadd( 8.4882, -25.2223, -6.2754, 0.45 ) }
    dend_35 { pt3dadd( 9.92072, -26.7514, -7.79329, 0.45 ) }
    dend_35 { pt3dadd( 11.0178, -27.9576, -8.8687, 0.45 ) }
    dend_35 { pt3dadd( 12.0514, -29.2337, -9.94051, 0.45 ) }
    dend_35 { pt3dadd( 13.0315, -30.3655, -10.9428, 0.45 ) }
    dend_35 { pt3dadd( 14.298, -31.7292, -12.2641, 0.45 ) }
    dend_35 { pt3dadd( 14.9665, -32.4556, -13.0819, 0.45 ) }
    dend_35 { pt3dadd( 15.7978, -33.4565, -14.2574, 0.45 ) }
    dend_35 { pt3dadd( 16.8085, -34.6602, -15.9231, 0.23 ) }
    dend_35 { pt3dadd( 18.0643, -36.1387, -18.2525, 0.23 ) }
    dend_35 { pt3dadd( 19.0378, -37.2251, -20.1024, 0.23 ) }
    dend_35 { pt3dadd( 20.1876, -38.438, -22.3513, 0.23 ) }
    dend_35 { pt3dadd( 20.8333, -39.0923, -23.6187, 0.23 ) }
    dend_35 { pt3dadd( 22.1411, -40.5032, -26.3399, 0.23 ) }
    dend_35 { pt3dadd( 23.1062, -41.6341, -28.463, 0.23 ) }
    dend_35 { pt3dadd( 24.0057, -42.8832, -30.6039, 0.23 ) }
    dend_35 { pt3dadd( 25.0005, -44.3009, -32.9939, 0.23 ) }
    dend_35 { pt3dadd( 25.6138, -45.192, -34.453, 0.23 ) }
    dend_35 { pt3dadd( 26.6026, -46.6964, -36.9357, 0.23 ) }
    dend_35 { pt3dadd( 27.0372, -47.5108, -38.1327, 0.23 ) }
    dend_35 { pt3dadd( 27.5029, -48.5312, -39.6331, 0.23 ) }
    dend_35 { pt3dadd( 30.8273, -55.9307, -46.4332, 0.23 ) }
    // Section: dend_33, id: dend_33, parent: dend_31 (entry count 97/100)
    dend_33 { pt3dclear() }
    dend_33 { pt3dadd( -7.45416, -6.7954, -14.1839, 0.45 ) }
    dend_33 { pt3dadd( -8.66544, -7.2175, -15.3336, 0.45 ) }
    dend_33 { pt3dadd( -9.72309, -7.54168, -16.338, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_33 { pt3dadd( -10.6158, -7.81834, -17.205, 0.45 ) }
    dend_33 { pt3dadd( -11.5312, -8.10166, -18.0259, 0.45 ) }
    dend_33 { pt3dadd( -12.6118, -8.45764, -18.9911, 0.45 ) }
    dend_33 { pt3dadd( -13.5626, -8.75695, -19.8456, 0.45 ) }
    dend_33 { pt3dadd( -14.6898, -9.08798, -20.942, 0.45 ) }
    dend_33 { pt3dadd( -15.782, -9.38169, -22.0496, 0.45 ) }
    dend_33 { pt3dadd( -17.3184, -9.81288, -23.6297, 0.45 ) }
    dend_33 { pt3dadd( -18.1851, -10.072, -24.5452, 0.45 ) }
    dend_33 { pt3dadd( -19.3047, -10.4525, -25.7911, 0.45 ) }
    dend_33 { pt3dadd( -20.1649, -10.7779, -26.8454, 0.45 ) }
    dend_33 { pt3dadd( -20.8447, -11.0437, -27.7516, 0.45 ) }
    dend_33 { pt3dadd( -21.5679, -11.3282, -28.7954, 0.45 ) }
    dend_33 { pt3dadd( -22.2089, -11.6036, -29.866, 0.45 ) }
    dend_33 { pt3dadd( -22.861, -11.9031, -30.9587, 0.45 ) }
    dend_33 { pt3dadd( -23.5655, -12.3417, -32.2002, 0.45 ) }
    dend_33 { pt3dadd( -30.2812, -13.9737, -39.6283, 0.45 ) }
    dend_33 { pt3dadd( -36.3662, -14.039, -47.7466, 0.45 ) }
    dend_33 { pt3dadd( -41.5182, -13.5517, -56.4735, 0.45 ) }
    // Section: dend_32, id: dend_32, parent: dend_31 (entry count 18/100)
    dend_32 { pt3dclear() }
    dend_32 { pt3dadd( -7.45416, -6.7954, -14.1839, 0.45 ) }
    dend_32 { pt3dadd( -7.09552, -7.6917, -15.3912, 0.45 ) }
    dend_32 { pt3dadd( -6.8457, -8.42381, -16.4026, 0.45 ) }
    dend_32 { pt3dadd( -6.50473, -9.67742, -18.0622, 0.45 ) }
    dend_32 { pt3dadd( -6.20447, -10.7051, -19.5006, 0.45 ) }
    dend_32 { pt3dadd( -6.00186, -11.353, -20.5015, 0.45 ) }
    dend_32 { pt3dadd( -5.7367, -12.0567, -21.6785, 0.45 ) }
    dend_32 { pt3dadd( -5.36303, -12.811, -23.191, 0.45 ) }
    dend_32 { pt3dadd( -5.19009, -13.1217, -23.85, 0.45 ) }
    dend_32 { pt3dadd( -4.80946, -13.9033, -25.3071, 0.45 ) }
    dend_32 { pt3dadd( -4.50968, -14.7311, -26.5846, 0.45 ) }
    dend_32 { pt3dadd( -4.23165, -15.7886, -27.928, 0.45 ) }
    dend_32 { pt3dadd( -4.05015, -16.6902, -28.7916, 0.45 ) }
    dend_32 { pt3dadd( -3.88097, -17.4299, -29.4621, 0.45 ) }
    dend_32 { pt3dadd( -3.47251, -18.8617, -30.8856, 0.45 ) }
    dend_32 { pt3dadd( -3.06275, -20.1548, -32.1926, 0.45 ) }
    dend_32 { pt3dadd( -2.54628, -21.3862, -33.5371, 0.45 ) }
    dend_32 { pt3dadd( -1.90966, -22.4323, -35.007, 0.45 ) }
    dend_32 { pt3dadd( -0.927604, -23.5628, -37.2789, 0.45 ) }
    dend_32 { pt3dadd( 0.00543095, -24.3028, -39.412, 0.23 ) }
    dend_32 { pt3dadd( 0.362223, -24.4995, -40.24, 0.23 ) }
    dend_32 { pt3dadd( 0.994127, -24.7374, -41.8405, 0.23 ) }
    dend_32 { pt3dadd( 1.76901, -25.0092, -43.8325, 0.23 ) }
    dend_32 { pt3dadd( 2.68861, -25.3295, -46.3093, 0.23 ) }
    dend_32 { pt3dadd( 3.05655, -25.5241, -47.376, 0.23 ) }
    dend_32 { pt3dadd( 3.72297, -26.0115, -49.5564, 0.23 ) }
    dend_32 { pt3dadd( 4.15026, -26.3858, -51.116, 0.23 ) }
    dend_32 { pt3dadd( 4.80803, -26.9847, -53.7916, 0.23 ) }
    dend_32 { pt3dadd( 6.51029, -31.4237, -62.9415, 0.23 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 47/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 10.989, 4.05937, -3.80046, 1.36 ) }
    dend_19 { pt3dadd( 11.0525, 4.0745, -3.81807, 1.36 ) }
    dend_19 { pt3dadd( 12.1999, 4.3477, -4.13605, 1.82 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 50/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 10.989, 4.05937, -3.80046, 0.45 ) }
    dend_18 { pt3dadd( 9.99972, 4.2067, -4.96717, 0.45 ) }
    dend_18 { pt3dadd( 8.94666, 4.37111, -6.05601, 0.45 ) }
    dend_18 { pt3dadd( 7.53253, 4.64096, -7.49598, 0.45 ) }
    dend_18 { pt3dadd( 6.44101, 4.94085, -8.64107, 0.45 ) }
    dend_18 { pt3dadd( 5.44475, 5.24627, -9.71854, 0.45 ) }
    dend_18 { pt3dadd( 4.41629, 5.60283, -10.9359, 0.45 ) }
    dend_18 { pt3dadd( 3.52275, 5.9446, -12.2165, 0.45 ) }
    dend_18 { pt3dadd( 3.03552, 6.22426, -13.1764, 0.45 ) }
    dend_18 { pt3dadd( 2.54127, 6.66091, -14.6625, 0.45 ) }
    dend_18 { pt3dadd( 2.09751, 7.20844, -16.6312, 0.45 ) }
    dend_18 { pt3dadd( 1.75173, 7.78964, -18.9295, 0.45 ) }
    dend_18 { pt3dadd( 1.3953, 8.46527, -21.9869, 0.45 ) }
    dend_18 { pt3dadd( 1.13085, 8.98762, -24.7534, 0.45 ) }
    dend_18 { pt3dadd( 0.856337, 9.37361, -27.3136, 0.45 ) }
    dend_18 { pt3dadd( 0.494589, 9.71933, -30.2232, 0.45 ) }
    dend_18 { pt3dadd( 0.055497, 10.0433, -33.0553, 0.45 ) }
    dend_18 { pt3dadd( -0.330319, 10.2256, -34.8076, 0.45 ) }
    dend_18 { pt3dadd( -0.741867, 10.351, -36.0593, 0.45 ) }
    dend_18 { pt3dadd( -1.66076, 10.5642, -38.2271, 0.45 ) }
    dend_18 { pt3dadd( -2.53765, 10.7756, -39.9939, 0.45 ) }
    dend_18 { pt3dadd( -3.33916, 10.968, -41.4659, 0.45 ) }
    dend_18 { pt3dadd( -4.16974, 11.1441, -42.9897, 0.45 ) }
    dend_18 { pt3dadd( -5.15424, 11.3736, -44.7766, 0.45 ) }
    dend_18 { pt3dadd( -5.76865, 11.5273, -45.9137, 0.45 ) }
    dend_18 { pt3dadd( -6.89915, 11.8278, -48.2753, 0.23 ) }
    dend_18 { pt3dadd( -7.73664, 12.1154, -50.2078, 0.23 ) }
    dend_18 { pt3dadd( -9.19759, 12.7521, -53.9871, 0.23 ) }
    dend_18 { pt3dadd( -9.90706, 13.0866, -55.9231, 0.23 ) }
    dend_18 { pt3dadd( -10.7011, 13.4975, -58.2315, 0.23 ) }
    dend_18 { pt3dadd( -11.8412, 14.1389, -61.6023, 0.23 ) }
    dend_18 { pt3dadd( -12.6727, 14.6507, -64.0324, 0.23 ) }
    dend_18 { pt3dadd( -13.6916, 15.4191, -67.1098, 0.23 ) }
    dend_18 { pt3dadd( -14.5131, 16.2271, -69.7794, 0.23 ) }
    dend_18 { pt3dadd( -18.8161, 19.8444, -80.8808, 0.23 ) }
    // Section: dend_16, id: dend_16, parent: dend_14 (entry count 85/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 19.5838, -12.4341, 15.7681, 0.45 ) }
    dend_16 { pt3dadd( 20.0589, -12.7305, 16.4435, 0.45 ) }
    dend_16 { pt3dadd( 20.9068, -13.0788, 17.4423, 0.45 ) }
    dend_16 { pt3dadd( 21.8963, -13.3973, 18.4653, 0.45 ) }
    dend_16 { pt3dadd( 22.4158, -13.5802, 18.9864, 0.45 ) }
    dend_16 { pt3dadd( 23.1079, -13.8222, 19.6996, 0.45 ) }
    dend_16 { pt3dadd( 23.9832, -14.1089, 20.6407, 0.45 ) }
    dend_16 { pt3dadd( 25.0951, -14.4008, 21.8452, 0.45 ) }
    dend_16 { pt3dadd( 25.7587, -14.5561, 22.5586, 0.45 ) }
    dend_16 { pt3dadd( 26.4988, -14.6936, 23.3609, 0.45 ) }
    dend_16 { pt3dadd( 27.1993, -14.7864, 24.1231, 0.45 ) }
    dend_16 { pt3dadd( 27.9514, -14.8671, 24.9171, 0.45 ) }
    dend_16 { pt3dadd( 28.7822, -14.9881, 25.8054, 0.45 ) }
    dend_16 { pt3dadd( 29.6915, -15.132, 26.7189, 0.45 ) }
    dend_16 { pt3dadd( 30.536, -15.2254, 27.4569, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_16 { pt3dadd( 31.4942, -15.3236, 28.1941, 0.45 ) }
    dend_16 { pt3dadd( 32.5555, -15.4907, 28.9244, 0.45 ) }
    dend_16 { pt3dadd( 33.763, -15.7411, 29.6385, 0.45 ) }
    dend_16 { pt3dadd( 35.2106, -16.0238, 30.3113, 0.45 ) }
    dend_16 { pt3dadd( 36.6194, -16.2232, 30.863, 0.23 ) }
    dend_16 { pt3dadd( 37.9244, -16.4069, 31.3354, 0.23 ) }
    dend_16 { pt3dadd( 39.2123, -16.6023, 31.7557, 0.23 ) }
    dend_16 { pt3dadd( 40.989, -16.8398, 32.2788, 0.23 ) }
    dend_16 { pt3dadd( 43.8861, -17.1498, 33.05, 0.23 ) }
    dend_16 { pt3dadd( 46.216, -17.38, 33.6221, 0.23 ) }
    // Section: dend_15, id: dend_15, parent: dend_14 (entry count 10/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 19.5838, -12.4341, 15.7681, 0.45 ) }
    dend_15 { pt3dadd( 21.146, -13.2744, 16.0229, 0.45 ) }
    dend_15 { pt3dadd( 21.938, -13.6123, 16.1845, 0.45 ) }
    dend_15 { pt3dadd( 23.5624, -14.2875, 16.5065, 0.23 ) }
    dend_15 { pt3dadd( 24.8484, -14.7782, 16.7481, 0.23 ) }
    dend_15 { pt3dadd( 26.0209, -15.1478, 16.9581, 0.68 ) }
    dend_15 { pt3dadd( 27.5568, -15.5879, 17.2316, 0.45 ) }
    dend_15 { pt3dadd( 29.3763, -15.9862, 17.5639, 0.45 ) }
    dend_15 { pt3dadd( 31.5465, -16.3355, 17.9706, 0.45 ) }
    dend_15 { pt3dadd( 32.9279, -16.4997, 18.2321, 0.45 ) }
    dend_15 { pt3dadd( 34.6827, -16.6476, 18.584, 0.45 ) }
    dend_15 { pt3dadd( 36.7779, -16.8003, 19.0081, 0.45 ) }
    dend_15 { pt3dadd( 38.5767, -16.8998, 19.3588, 0.45 ) }
    dend_15 { pt3dadd( 39.6417, -16.9472, 19.5751, 0.45 ) }
    dend_15 { pt3dadd( 40.6706, -16.9344, 19.822, 0.45 ) }
    dend_15 { pt3dadd( 41.7346, -16.9513, 20.1105, 0.45 ) }
    // Section: dend_13, id: dend_13, parent: dend_11 (entry count 26/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -7.1244, -14.5847, 12.8996, 0.45 ) }
    dend_13 { pt3dadd( -7.20179, -14.3269, 13.8047, 0.45 ) }
    dend_13 { pt3dadd( -7.44041, -14.1089, 15.5887, 0.45 ) }
    dend_13 { pt3dadd( -7.66173, -14.1945, 16.8281, 0.45 ) }
    dend_13 { pt3dadd( -7.94591, -14.5189, 18.049, 0.45 ) }
    dend_13 { pt3dadd( -8.08664, -14.6823, 18.5503, 0.45 ) }
    dend_13 { pt3dadd( -8.29387, -14.9572, 19.3727, 0.45 ) }
    dend_13 { pt3dadd( -8.58665, -15.5471, 20.7778, 0.45 ) }
    dend_13 { pt3dadd( -8.80053, -16.0793, 21.7966, 0.45 ) }
    dend_13 { pt3dadd( -9.02992, -16.848, 23.0482, 0.45 ) }
    dend_13 { pt3dadd( -9.05364, -17.1854, 23.582, 0.45 ) }
    dend_13 { pt3dadd( -9.0014, -17.8187, 24.5845, 0.45 ) }
    dend_13 { pt3dadd( -8.88579, -18.5492, 25.7835, 0.45 ) }
    dend_13 { pt3dadd( -8.73243, -19.469, 27.2789, 0.45 ) }
    dend_13 { pt3dadd( -8.54448, -20.2608, 28.4984, 0.45 ) }
    dend_13 { pt3dadd( -8.22254, -21.1614, 29.9497, 0.45 ) }
    dend_13 { pt3dadd( -7.86932, -21.9711, 31.2644, 0.45 ) }
    dend_13 { pt3dadd( -7.49608, -22.6926, 32.4576, 0.45 ) }
    dend_13 { pt3dadd( -7.078, -23.3824, 33.6854, 0.45 ) }
    dend_13 { pt3dadd( -6.64194, -24.0221, 35.0313, 0.45 ) }
    dend_13 { pt3dadd( -6.24626, -24.6955, 36.6167, 0.45 ) }
    dend_13 { pt3dadd( -6.05392, -25.1306, 37.5581, 0.45 ) }
    dend_13 { pt3dadd( -5.93224, -25.5247, 38.3935, 0.45 ) }
    dend_13 { pt3dadd( -5.94332, -26.0993, 39.5903, 0.45 ) }
    dend_13 { pt3dadd( -6.2458, -26.7733, 40.9198, 0.45 ) }
    dend_13 { pt3dadd( -6.58449, -27.2904, 41.7783, 0.45 ) }
    dend_13 { pt3dadd( -7.17879, -28.1255, 42.9457, 0.45 ) }
    dend_13 { pt3dadd( -8.13966, -29.2002, 44.4997, 0.45 ) }
    dend_13 { pt3dadd( -9.01324, -30.052, 45.7632, 0.45 ) }
    dend_13 { pt3dadd( -9.62433, -30.6913, 46.6445, 0.45 ) }
    dend_13 { pt3dadd( -10.3366, -31.4918, 47.717, 0.45 ) }
    dend_13 { pt3dadd( -10.9207, -32.1367, 48.5989, 0.45 ) }
    dend_13 { pt3dadd( -11.9523, -33.1954, 50.0423, 0.45 ) }
    dend_13 { pt3dadd( -12.5535, -33.9245, 50.9196, 0.45 ) }
    dend_13 { pt3dadd( -13.428, -35.2979, 52.3431, 0.45 ) }
    dend_13 { pt3dadd( -14.1767, -36.5764, 53.6237, 0.45 ) }
    dend_13 { pt3dadd( -14.4688, -37.1046, 54.1777, 0.45 ) }
    dend_13 { pt3dadd( -14.9186, -38.1685, 55.3166, 0.45 ) }
    dend_13 { pt3dadd( -15.1681, -39.3919, 56.5611, 0.45 ) }
    dend_13 { pt3dadd( -15.1055, -40.6678, 57.907, 0.45 ) }
    dend_13 { pt3dadd( -14.8657, -41.4591, 58.7808, 0.45 ) }
    dend_13 { pt3dadd( -14.3382, -42.3036, 59.5855, 0.45 ) }
    dend_13 { pt3dadd( -13.5103, -43.0897, 60.2513, 0.45 ) }
    dend_13 { pt3dadd( -11.7716, -44.2289, 61.0896, 0.45 ) }
    dend_13 { pt3dadd( -9.84493, -45.1509, 61.6997, 0.45 ) }
    dend_13 { pt3dadd( -7.71337, -45.9, 62.1387, 0.23 ) }
    dend_13 { pt3dadd( -4.77426, -46.8909, 62.6044, 0.23 ) }
    dend_13 { pt3dadd( -1.29955, -48.0327, 62.9856, 0.23 ) }
    dend_13 { pt3dadd( 1.17098, -48.7456, 63.1378, 0.23 ) }
    dend_13 { pt3dadd( 2.81689, -49.0704, 63.1424, 0.23 ) }
    dend_13 { pt3dadd( 4.82863, -49.3166, 63.0338, 0.23 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 77/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -7.1244, -14.5847, 12.8996, 0.68 ) }
    dend_12 { pt3dadd( -8.16654, -15.2031, 13.2841, 0.68 ) }
    dend_12 { pt3dadd( -10.2144, -16.3912, 13.9914, 0.45 ) }
    dend_12 { pt3dadd( -12.0164, -17.5029, 14.5872, 0.45 ) }
    dend_12 { pt3dadd( -13.5657, -18.5079, 15.1075, 0.68 ) }
    dend_12 { pt3dadd( -14.9572, -19.4853, 15.596, 0.68 ) }
    dend_12 { pt3dadd( -15.7083, -20.0369, 15.8643, 0.68 ) }
    dend_12 { pt3dadd( -17.1278, -21.13, 16.3576, 0.45 ) }
    dend_12 { pt3dadd( -19.1199, -22.7359, 17.0067, 0.45 ) }
    dend_12 { pt3dadd( -20.2636, -23.7162, 17.3449, 0.45 ) }
    dend_12 { pt3dadd( -21.6197, -24.9205, 17.699, 0.45 ) }
    dend_12 { pt3dadd( -22.968, -26.1183, 18.0082, 0.45 ) }
    dend_12 { pt3dadd( -24.1091, -27.1682, 18.2613, 0.45 ) }
    dend_12 { pt3dadd( -25.4416, -28.4275, 18.5649, 0.68 ) }
    dend_12 { pt3dadd( -26.6069, -29.5189, 18.7984, 0.68 ) }
    dend_12 { pt3dadd( -28.6398, -31.4037, 19.199, 0.68 ) }
    dend_12 { pt3dadd( -30.5326, -33.1594, 19.6145, 0.45 ) }
    dend_12 { pt3dadd( -32.2943, -34.8744, 20.0569, 0.45 ) }
    dend_12 { pt3dadd( -33.5704, -36.1596, 20.415, 0.45 ) }
    dend_12 { pt3dadd( -34.6643, -37.2839, 20.7373, 0.45 ) }
    dend_12 { pt3dadd( -36.3134, -38.9618, 21.2286, 0.45 ) }
    dend_12 { pt3dadd( -37.5886, -40.2511, 21.5872, 0.45 ) }
    dend_12 { pt3dadd( -39.1927, -41.8191, 22.0124, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_12 { pt3dadd( -39.8884, -42.4807, 22.19, 0.45 ) }
    dend_12 { pt3dadd( -41.1413, -43.7012, 22.4994, 0.45 ) }
    dend_12 { pt3dadd( -42.1432, -44.6689, 22.728, 0.45 ) }
    dend_12 { pt3dadd( -43.2882, -45.7277, 22.9233, 0.45 ) }
    dend_12 { pt3dadd( -44.3569, -46.6583, 23.0641, 0.45 ) }
    dend_12 { pt3dadd( -45.8622, -47.852, 23.2067, 0.45 ) }
    dend_12 { pt3dadd( -47.2529, -48.914, 23.2964, 0.45 ) }
    dend_12 { pt3dadd( -48.7464, -50.0248, 23.3491, 0.45 ) }
    dend_12 { pt3dadd( -49.7952, -50.7599, 23.3519, 0.45 ) }
    dend_12 { pt3dadd( -51.4039, -51.8952, 23.3392, 0.45 ) }
    dend_12 { pt3dadd( -53.3262, -53.2891, 23.3274, 0.45 ) }
    dend_12 { pt3dadd( -54.9173, -54.4461, 23.3718, 0.45 ) }
    dend_12 { pt3dadd( -56.1669, -55.3785, 23.4718, 0.45 ) }
    dend_12 { pt3dadd( -57.7944, -56.6831, 23.6993, 0.45 ) }
    dend_12 { pt3dadd( -59.8497, -58.4022, 24.119, 0.45 ) }
    dend_12 { pt3dadd( -61.5063, -59.876, 24.5792, 0.45 ) }
    dend_12 { pt3dadd( -63.0352, -61.3427, 25.1161, 0.45 ) }
    dend_12 { pt3dadd( -64.9544, -63.2603, 25.918, 0.45 ) }
    dend_12 { pt3dadd( -66.5013, -64.7835, 26.6446, 0.45 ) }
    dend_12 { pt3dadd( -67.4828, -65.7481, 27.147, 0.45 ) }
    dend_12 { pt3dadd( -69.2841, -67.4519, 28.0824, 0.45 ) }
    dend_12 { pt3dadd( -70.7348, -68.7507, 28.8037, 0.45 ) }
    dend_12 { pt3dadd( -71.9554, -69.8299, 29.3852, 0.45 ) }
    dend_12 { pt3dadd( -74.3516, -71.9774, 30.4768, 0.45 ) }
    dend_12 { pt3dadd( -75.5464, -73.0758, 30.9744, 0.45 ) }
    dend_12 { pt3dadd( -76.2421, -73.7182, 31.2397, 0.45 ) }
    dend_12 { pt3dadd( -77.4521, -74.9089, 31.6616, 0.45 ) }
    dend_12 { pt3dadd( -78.5467, -76.1421, 31.9936, 0.45 ) }
    dend_12 { pt3dadd( -79.6114, -77.5155, 32.2177, 0.45 ) }
    dend_12 { pt3dadd( -80.6288, -78.9711, 32.3372, 0.45 ) }
    dend_12 { pt3dadd( -81.6728, -80.4921, 32.3928, 0.45 ) }
    dend_12 { pt3dadd( -83.0598, -82.6658, 32.384, 0.45 ) }
    dend_12 { pt3dadd( -84.4163, -84.9707, 32.2888, 0.45 ) }
    dend_12 { pt3dadd( -87.2057, -89.7769, 31.935, 0.45 ) }
    dend_12 { pt3dadd( -88.3111, -91.7028, 31.7705, 0.45 ) }
    dend_12 { pt3dadd( -89.5087, -93.8304, 31.6015, 0.45 ) }
    dend_12 { pt3dadd( -91.0821, -96.6996, 31.417, 0.45 ) }
    dend_12 { pt3dadd( -92.7618, -99.6864, 31.2974, 0.45 ) }
    dend_12 { pt3dadd( -94.1568, -102.141, 31.3015, 0.45 ) }
    dend_12 { pt3dadd( -95.204, -103.98, 31.4137, 0.45 ) }
    dend_12 { pt3dadd( -96.4831, -106.031, 31.6793, 0.45 ) }
    dend_12 { pt3dadd( -98.3125, -108.809, 32.1601, 0.45 ) }
    dend_12 { pt3dadd( -98.9191, -109.636, 32.3536, 0.45 ) }
    dend_12 { pt3dadd( -100.414, -111.532, 32.9028, 0.45 ) }
    dend_12 { pt3dadd( -101.758, -113.186, 33.4272, 0.45 ) }
    dend_12 { pt3dadd( -103.677, -115.448, 34.1069, 0.45 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 46/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -9.13766, 0.665745, 7.94602, 0.45 ) }
    dend_10 { pt3dadd( -8.70829, -0.085628, 9.12719, 0.45 ) }
    dend_10 { pt3dadd( -8.29281, -0.727771, 10.5279, 0.45 ) }
    dend_10 { pt3dadd( -8.0865, -0.846534, 11.1938, 0.45 ) }
    dend_10 { pt3dadd( -7.48133, -0.832614, 12.5562, 0.45 ) }
    dend_10 { pt3dadd( -6.87488, -0.695202, 13.7697, 0.45 ) }
    dend_10 { pt3dadd( -6.32855, -0.522246, 14.9134, 0.45 ) }
    dend_10 { pt3dadd( -5.66353, -0.219457, 16.3358, 0.45 ) }
    dend_10 { pt3dadd( -5.02793, 0.161632, 17.9315, 0.45 ) }
    dend_10 { pt3dadd( -4.23195, 0.740381, 20.1195, 0.45 ) }
    dend_10 { pt3dadd( -3.88838, 0.994435, 21.0164, 0.45 ) }
    dend_10 { pt3dadd( -3.5647, 1.18943, 21.7654, 0.45 ) }
    dend_10 { pt3dadd( -3.05909, 1.43399, 22.8425, 0.45 ) }
    dend_10 { pt3dadd( -2.79213, 1.51553, 23.5562, 0.45 ) }
    dend_10 { pt3dadd( -2.56295, 1.56333, 24.8216, 0.45 ) }
    dend_10 { pt3dadd( -2.47979, 1.68228, 26.324, 0.45 ) }
    dend_10 { pt3dadd( -2.37369, 1.83834, 27.7712, 0.45 ) }
    dend_10 { pt3dadd( -2.31135, 1.96269, 28.7212, 0.45 ) }
    dend_10 { pt3dadd( -2.14121, 2.34488, 30.7942, 0.45 ) }
    dend_10 { pt3dadd( -1.86199, 2.92559, 33.3266, 0.45 ) }
    dend_10 { pt3dadd( -1.63745, 3.41296, 35.106, 0.45 ) }
    dend_10 { pt3dadd( -1.24696, 4.05553, 37.0346, 0.45 ) }
    dend_10 { pt3dadd( -0.750295, 4.79502, 39.2045, 0.45 ) }
    dend_10 { pt3dadd( -0.131664, 5.57376, 41.4197, 0.23 ) }
    dend_10 { pt3dadd( 0.61727, 6.42132, 43.4814, 0.23 ) }
    dend_10 { pt3dadd( 1.3459, 7.14775, 45.0561, 0.23 ) }
    dend_10 { pt3dadd( 2.82143, 8.53005, 47.9741, 0.23 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 73/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -9.13766, 0.665745, 7.94602, 0.68 ) }
    dend_9 { pt3dadd( -10.1952, 0.0998916, 8.3471, 0.68 ) }
    dend_9 { pt3dadd( -12.009, -0.794955, 9.11621, 0.45 ) }
    dend_9 { pt3dadd( -13.3628, -1.39611, 9.69374, 0.45 ) }
    dend_9 { pt3dadd( -15.1834, -2.09773, 10.5237, 0.45 ) }
    dend_9 { pt3dadd( -16.5171, -2.58674, 11.2049, 0.45 ) }
    dend_9 { pt3dadd( -18.2409, -3.28115, 12.2175, 0.45 ) }
    dend_9 { pt3dadd( -19.0665, -3.61693, 12.7935, 0.45 ) }
    dend_9 { pt3dadd( -20.4128, -4.18158, 13.9121, 0.45 ) }
    dend_9 { pt3dadd( -21.5067, -4.7017, 14.935, 0.45 ) }
    dend_9 { pt3dadd( -22.3909, -5.23396, 15.8872, 0.45 ) }
    dend_9 { pt3dadd( -23.6372, -6.09108, 17.4272, 0.45 ) }
    dend_9 { pt3dadd( -24.085, -6.43106, 18.0785, 0.68 ) }
    dend_9 { pt3dadd( -24.9034, -7.14864, 19.4728, 0.68 ) }
    dend_9 { pt3dadd( -25.7753, -7.9503, 21.1684, 0.68 ) }
    dend_9 { pt3dadd( -26.834, -8.83023, 23.1708, 0.45 ) }
    dend_9 { pt3dadd( -27.7991, -9.41057, 24.9145, 0.45 ) }
    dend_9 { pt3dadd( -28.8855, -9.85877, 26.8409, 0.45 ) }
    dend_9 { pt3dadd( -29.6303, -10.1235, 28.3375, 0.45 ) }
    dend_9 { pt3dadd( -30.0554, -10.251, 29.3209, 0.45 ) }
    dend_9 { pt3dadd( -30.6095, -10.3576, 30.7901, 0.45 ) }
    dend_9 { pt3dadd( -31.2253, -10.3732, 32.4375, 0.45 ) }
    dend_9 { pt3dadd( -31.6151, -10.3306, 33.4532, 0.45 ) }
    dend_9 { pt3dadd( -32.1987, -10.2641, 35.1887, 0.45 ) }
    dend_9 { pt3dadd( -32.6956, -10.2513, 36.6125, 0.45 ) }
    dend_9 { pt3dadd( -32.9616, -10.2969, 37.3054, 0.45 ) }
    dend_9 { pt3dadd( -33.5617, -10.4836, 38.7782, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_9 { pt3dadd( -34.3538, -10.7622, 40.3086, 0.45 ) }
    dend_9 { pt3dadd( -35.4005, -11.0539, 41.8959, 0.45 ) }
    dend_9 { pt3dadd( -36.8296, -11.3324, 43.6213, 0.45 ) }
    dend_9 { pt3dadd( -38.2804, -11.5448, 45.0797, 0.45 ) }
    dend_9 { pt3dadd( -39.2502, -11.6876, 45.9335, 0.45 ) }
    dend_9 { pt3dadd( -40.5258, -11.9109, 46.8915, 0.45 ) }
    dend_9 { pt3dadd( -41.583, -12.1137, 47.6204, 0.45 ) }
    dend_9 { pt3dadd( -43.2789, -12.4244, 48.7587, 0.45 ) }
    dend_9 { pt3dadd( -45.1904, -12.7525, 50.0303, 0.23 ) }
    dend_9 { pt3dadd( -46.24, -12.9469, 50.7086, 0.23 ) }
    dend_9 { pt3dadd( -48.5984, -13.3628, 52.1407, 0.23 ) }
    dend_9 { pt3dadd( -50.2483, -13.6055, 53.1596, 0.23 ) }
    dend_9 { pt3dadd( -51.8055, -13.8602, 54.118, 0.23 ) }
    dend_9 { pt3dadd( -53.2201, -14.1297, 54.9688, 0.23 ) }
    dend_9 { pt3dadd( -55.1416, -14.4717, 56.1281, 0.23 ) }
    dend_9 { pt3dadd( -57.1999, -14.7115, 57.3096, 0.23 ) }
    dend_9 { pt3dadd( -59.3265, -14.7106, 58.4759, 0.23 ) }
    // Section: dend_5, id: dend_5, parent: dend_1 (entry count 17/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -19.1171, 1.60236, -8.30692, 0.68 ) }
    dend_5 { pt3dadd( -19.3287, 1.6639, -8.5519, 0.68 ) }
    dend_5 { pt3dadd( -19.5322, 1.74997, -8.77955, 0.68 ) }
    dend_5 { pt3dadd( -19.7867, 1.85626, -9.04889, 0.68 ) }
    dend_5 { pt3dadd( -20.23, 2.00254, -9.44539, 0.68 ) }
    dend_5 { pt3dadd( -20.7348, 2.15939, -9.85633, 0.68 ) }
    dend_5 { pt3dadd( -21.3181, 2.35888, -10.2754, 0.68 ) }
    dend_5 { pt3dadd( -21.7761, 2.52767, -10.5704, 0.68 ) }
    dend_5 { pt3dadd( -22.2919, 2.73253, -10.8686, 0.68 ) }
    dend_5 { pt3dadd( -22.9806, 3.01113, -11.2432, 0.68 ) }
    dend_5 { pt3dadd( -23.4655, 3.20201, -11.4876, 0.68 ) }
    dend_5 { pt3dadd( -24.3881, 3.52669, -11.9245, 0.45 ) }
    dend_5 { pt3dadd( -25.0793, 3.76551, -12.2749, 0.45 ) }
    dend_5 { pt3dadd( -25.5921, 3.94326, -12.5678, 0.45 ) }
    dend_5 { pt3dadd( -26.1754, 4.15181, -12.9493, 0.45 ) }
    dend_5 { pt3dadd( -26.6514, 4.31988, -13.3121, 0.45 ) }
    dend_5 { pt3dadd( -26.9962, 4.41951, -13.6058, 0.45 ) }
    dend_5 { pt3dadd( -27.6608, 4.56514, -14.2363, 0.45 ) }
    dend_5 { pt3dadd( -28.2127, 4.66799, -14.7724, 0.45 ) }
    dend_5 { pt3dadd( -28.7567, 4.75517, -15.2676, 0.45 ) }
    dend_5 { pt3dadd( -29.0984, 4.80967, -15.5812, 0.45 ) }
    dend_5 { pt3dadd( -29.5646, 4.87912, -16.0185, 0.45 ) }
    dend_5 { pt3dadd( -29.8277, 4.9076, -16.2498, 0.45 ) }
    dend_5 { pt3dadd( -30.1788, 4.92468, -16.497, 0.45 ) }
    dend_5 { pt3dadd( -31.0894, 4.95512, -17.0332, 0.45 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 42/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -19.1171, 1.60236, -8.30692, 0.68 ) }
    dend_2 { pt3dadd( -20.8543, 0.71721, -8.21543, 0.68 ) }
    dend_2 { pt3dadd( -22.7436, -0.285323, -8.18963, 0.68 ) }
    dend_2 { pt3dadd( -24.0953, -1.02735, -8.19927, 0.45 ) }
    dend_2 { pt3dadd( -25.5571, -1.83242, -8.22765, 0.45 ) }
    dend_2 { pt3dadd( -26.8784, -2.55814, -8.25783, 0.45 ) }
    dend_2 { pt3dadd( -28.2393, -3.29241, -8.29447, 0.45 ) }
    dend_2 { pt3dadd( -29.879, -4.18508, -8.3591, 0.45 ) }
    dend_2 { pt3dadd( -31.0144, -4.8242, -8.4092, 0.45 ) }
    dend_2 { pt3dadd( -32.1803, -5.49206, -8.46552, 0.45 ) }
    dend_2 { pt3dadd( -34.0172, -6.58546, -8.53653, 0.45 ) }
    dend_2 { pt3dadd( -35.3357, -7.39609, -8.58789, 0.45 ) }
    dend_2 { pt3dadd( -36.6394, -8.2172, -8.65691, 0.45 ) }
    dend_2 { pt3dadd( -38.2896, -9.26675, -8.76899, 0.45 ) }
    dend_2 { pt3dadd( -39.7518, -10.2095, -8.90525, 0.45 ) }
    dend_2 { pt3dadd( -40.581, -10.7576, -8.99997, 0.45 ) }
    dend_2 { pt3dadd( -41.6872, -11.4991, -9.15062, 0.45 ) }
    dend_2 { pt3dadd( -42.3706, -11.9453, -9.25178, 0.45 ) }
    dend_2 { pt3dadd( -43.7475, -12.8146, -9.48268, 0.45 ) }
    dend_2 { pt3dadd( -45.0331, -13.6452, -9.71147, 0.45 ) }
    dend_2 { pt3dadd( -46.5332, -14.5808, -9.97669, 0.45 ) }
    dend_2 { pt3dadd( -47.6765, -15.2038, -10.1589, 0.45 ) }
    dend_2 { pt3dadd( -49.0791, -15.8615, -10.3495, 0.45 ) }
    dend_2 { pt3dadd( -50.4978, -16.48, -10.5376, 0.45 ) }
    dend_2 { pt3dadd( -51.422, -16.8626, -10.6632, 0.45 ) }
    dend_2 { pt3dadd( -52.803, -17.4055, -10.8562, 0.45 ) }
    dend_2 { pt3dadd( -54.7412, -18.121, -11.116, 0.45 ) }
    dend_2 { pt3dadd( -56.1763, -18.6473, -11.2918, 0.45 ) }
    dend_2 { pt3dadd( -57.3228, -19.1018, -11.4137, 0.45 ) }
    dend_2 { pt3dadd( -58.8077, -19.7492, -11.5497, 0.45 ) }
    dend_2 { pt3dadd( -59.5622, -20.1086, -11.6081, 0.45 ) }
    dend_2 { pt3dadd( -60.9958, -20.9042, -11.7404, 0.45 ) }
    dend_2 { pt3dadd( -62.8212, -22.0495, -11.9912, 0.45 ) }
    dend_2 { pt3dadd( -64.3107, -23.024, -12.2603, 0.45 ) }
    dend_2 { pt3dadd( -66.0693, -24.1693, -12.6336, 0.45 ) }
    dend_2 { pt3dadd( -68.432, -25.712, -13.2173, 0.23 ) }
    dend_2 { pt3dadd( -70.3373, -26.9187, -13.698, 0.23 ) }
    dend_2 { pt3dadd( -72.5488, -28.247, -14.2723, 0.23 ) }
    dend_2 { pt3dadd( -74.3538, -29.2808, -14.7329, 0.23 ) }
    dend_2 { pt3dadd( -76.3305, -30.3252, -15.2395, 0.23 ) }
    dend_2 { pt3dadd( -78.5743, -31.4134, -15.8062, 0.23 ) }
    dend_2 { pt3dadd( -81.5687, -32.7696, -16.533, 0.23 ) }
    dend_2 { pt3dadd( -83.6438, -33.6042, -16.9898, 0.23 ) }
    dend_2 { pt3dadd( -85.7601, -34.3655, -17.4124, 0.23 ) }
    dend_2 { pt3dadd( -87.4424, -34.9379, -17.746, 0.23 ) }
    dend_2 { pt3dadd( -89.511, -35.6046, -18.1911, 0.23 ) }
    dend_2 { pt3dadd( -90.9137, -36.0216, -18.5398, 0.23 ) }
    dend_2 { pt3dadd( -92.1702, -36.3645, -18.9312, 0.23 ) }
    dend_2 { pt3dadd( -93.1313, -36.5927, -19.2723, 0.23 ) }
    dend_2 { pt3dadd( -94.4172, -36.8733, -19.7961, 0.23 ) }
    dend_2 { pt3dadd( -95.3548, -37.0973, -20.1983, 0.23 ) }
    dend_2 { pt3dadd( -96.4923, -37.3751, -20.7077, 0.23 ) }
    dend_2 { pt3dadd( -97.6234, -37.6513, -21.201, 0.23 ) }
    dend_2 { pt3dadd( -98.2892, -37.843, -21.4803, 0.23 ) }
    dend_2 { pt3dadd( -99.5837, -38.2683, -21.9912, 0.23 ) }
    dend_2 { pt3dadd( -100.798, -38.6976, -22.4104, 0.23 ) }
    dend_2 { pt3dadd( -102.793, -39.5188, -23.0322, 0.23 ) }
    dend_2 { pt3dadd( -103.924, -40.0331, -23.3604, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_2 { pt3dadd( -105.448, -40.7862, -23.7672, 0.23 ) }
    dend_2 { pt3dadd( -106.576, -41.3722, -24.0572, 0.23 ) }
    dend_2 { pt3dadd( -107.753, -41.9805, -24.3508, 0.23 ) }
    dend_2 { pt3dadd( -109.073, -42.625, -24.6706, 0.23 ) }
    dend_2 { pt3dadd( -111.146, -43.6158, -25.1616, 0.23 ) }
    dend_2 { pt3dadd( -112.458, -44.2097, -25.471, 0.23 ) }
    dend_2 { pt3dadd( -113.695, -44.7212, -25.7333, 0.23 ) }
    dend_2 { pt3dadd( -114.847, -45.177, -25.9627, 0.23 ) }
    dend_2 { pt3dadd( -117.777, -46.284, -26.5438, 0.23 ) }
    dend_2 { pt3dadd( -118.913, -46.697, -26.7528, 0.23 ) }
    dend_2 { pt3dadd( -120.839, -47.4128, -27.1128, 0.23 ) }
    dend_2 { pt3dadd( -121.838, -47.7817, -27.3091, 0.23 ) }
    dend_2 { pt3dadd( -122.461, -48.02, -27.4293, 0.23 ) }
    dend_2 { pt3dadd( -123.925, -48.6427, -27.7014, 0.23 ) }
    dend_2 { pt3dadd( -125.081, -49.1952, -27.917, 0.23 ) }
    dend_2 { pt3dadd( -126.211, -49.7549, -28.1256, 0.23 ) }
    dend_2 { pt3dadd( -126.936, -50.1297, -28.2668, 0.23 ) }
    dend_2 { pt3dadd( -128.366, -50.9037, -28.5609, 0.23 ) }
    dend_2 { pt3dadd( -129.484, -51.535, -28.7613, 0.23 ) }
    dend_2 { pt3dadd( -130.424, -52.0676, -28.8971, 0.23 ) }
    dend_2 { pt3dadd( -131.158, -52.4691, -28.9926, 0.23 ) }
    dend_2 { pt3dadd( -133.148, -53.5578, -29.2125, 0.23 ) }
    dend_2 { pt3dadd( -134.15, -54.1158, -29.309, 0.23 ) }
    dend_2 { pt3dadd( -135.995, -55.145, -29.4545, 0.23 ) }
    dend_2 { pt3dadd( -137.865, -56.1887, -29.5624, 0.23 ) }
    dend_2 { pt3dadd( -139.224, -56.9132, -29.6058, 0.23 ) }
    dend_2 { pt3dadd( -140.235, -57.4418, -29.6226, 0.23 ) }
    dend_2 { pt3dadd( -142.119, -58.3824, -29.5665, 0.23 ) }
    dend_2 { pt3dadd( -144.183, -59.3416, -29.4264, 0.23 ) }
    dend_2 { pt3dadd( -145.814, -60.0431, -29.2408, 0.23 ) }
    dend_2 { pt3dadd( -147.721, -60.8228, -28.9421, 0.23 ) }
    dend_2 { pt3dadd( -150.135, -61.7675, -28.4522, 0.23 ) }
    dend_2 { pt3dadd( -152.421, -62.6335, -27.895, 0.23 ) }
    dend_2 { pt3dadd( -153.646, -63.1157, -27.564, 0.23 ) }
    dend_2 { pt3dadd( -155.48, -63.904, -27.0276, 0.23 ) }
    dend_2 { pt3dadd( -156.704, -64.4828, -26.6656, 0.23 ) }
    dend_2 { pt3dadd( -158.515, -65.4174, -26.1413, 0.23 ) }
    dend_2 { pt3dadd( -160.468, -66.4866, -25.6054, 0.23 ) }
    dend_2 { pt3dadd( -163.86, -68.4522, -24.8941, 0.23 ) }
    dend_2 { pt3dadd( -165.961, -69.7235, -24.5677, 0.23 ) }
    dend_2 { pt3dadd( -168.176, -71.1292, -24.36, 0.23 ) }
    dend_2 { pt3dadd( -169.714, -72.1289, -24.3059, 0.23 ) }
    dend_2 { pt3dadd( -171.655, -73.3879, -24.3552, 0.23 ) }
    dend_2 { pt3dadd( -173.8, -74.7847, -24.5373, 0.23 ) }
    dend_2 { pt3dadd( -174.82, -75.4356, -24.692, 0.23 ) }
    dend_2 { pt3dadd( -176.627, -76.6466, -25.0817, 0.23 ) }
    dend_2 { pt3dadd( -177.693, -77.4265, -25.3819, 0.23 ) }
    dend_2 { pt3dadd( -178.494, -78.0846, -25.6467, 0.23 ) }
    dend_2 { pt3dadd( -179.573, -79.1002, -26.0192, 0.23 ) }
    dend_2 { pt3dadd( -180.275, -79.8453, -26.2406, 0.23 ) }
    dend_2 { pt3dadd( -181.742, -81.4633, -26.6895, 0.23 ) }
    dend_2 { pt3dadd( -183.069, -83.0112, -27.0983, 0.23 ) }
    dend_2 { pt3dadd( -183.893, -84.0655, -27.3553, 0.23 ) }
    dend_2 { pt3dadd( -185.741, -86.6738, -27.9745, 0.23 ) }
    dend_2 { pt3dadd( -186.798, -88.2826, -28.349, 0.23 ) }
    dend_2 { pt3dadd( -187.68, -89.6888, -28.6825, 0.23 ) }
    dend_2 { pt3dadd( -188.649, -91.2977, -29.0819, 0.23 ) }
    dend_2 { pt3dadd( -189.68, -93.1442, -29.5507, 0.23 ) }
    dend_2 { pt3dadd( -190.528, -94.6817, -29.9791, 0.23 ) }
    dend_2 { pt3dadd( -191.257, -96.0038, -30.3785, 0.23 ) }
    dend_2 { pt3dadd( -192.251, -97.6902, -30.9302, 0.23 ) }
    dend_2 { pt3dadd( -193.15, -99.0817, -31.4418, 0.23 ) }
    dend_2 { pt3dadd( -193.681, -99.7919, -31.7376, 0.23 ) }
    dend_2 { pt3dadd( -195.051, -101.338, -32.448, 0.23 ) }
    dend_2 { pt3dadd( -196.71, -103.023, -33.2407, 0.23 ) }
    dend_2 { pt3dadd( -197.712, -103.978, -33.6681, 0.23 ) }
    dend_2 { pt3dadd( -199.491, -105.577, -34.2856, 0.23 ) }
    dend_2 { pt3dadd( -200.905, -106.845, -34.6971, 0.23 ) }
    dend_2 { pt3dadd( -201.886, -107.795, -34.9504, 0.23 ) }
    dend_2 { pt3dadd( -202.953, -108.962, -35.2007, 0.23 ) }
    dend_2 { pt3dadd( -204.149, -110.469, -35.473, 0.23 ) }
    dend_2 { pt3dadd( -206.389, -113.647, -35.9369, 0.23 ) }
    dend_2 { pt3dadd( -207.492, -115.355, -36.1481, 0.23 ) }
    dend_2 { pt3dadd( -208.425, -116.979, -36.3312, 0.23 ) }
    dend_2 { pt3dadd( -209.283, -118.759, -36.5118, 0.23 ) }
    dend_2 { pt3dadd( -210.032, -120.652, -36.7052, 0.23 ) }
    dend_2 { pt3dadd( -210.575, -122.45, -36.8952, 0.23 ) }
    dend_2 { pt3dadd( -210.885, -124.004, -37.0501, 0.23 ) }
    dend_2 { pt3dadd( -211.198, -125.799, -37.2157, 0.23 ) }
    dend_2 { pt3dadd( -211.633, -128.641, -37.446, 0.23 ) }
    dend_2 { pt3dadd( -211.795, -130.075, -37.5336, 0.23 ) }
    dend_2 { pt3dadd( -211.897, -131.646, -37.5856, 0.23 ) }
    dend_2 { pt3dadd( -211.881, -132.472, -37.6094, 0.23 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 83/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 35.6263, -10.2095, 0.0, 0.23 ) }
    axon_1 { pt3dadd( 50.0974, -14.1578, 0.0, 0.23 ) }
    axon_1 { pt3dadd( 64.5684, -18.1061, 0.0, 0.23 ) }
    // Section: dend_25, id: dend_25, parent: dend_19 (entry count 86/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 12.1999, 4.3477, -4.13605, 0.68 ) }
    dend_25 { pt3dadd( 13.0513, 7.6174, -4.50128, 0.68 ) }
    dend_25 { pt3dadd( 13.4883, 9.2961, -4.68879, 0.68 ) }
    dend_25 { pt3dadd( 13.9563, 11.0934, -4.88955, 0.68 ) }
    // Section: dend_20, id: dend_20, parent: dend_19 (entry count 90/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 12.1999, 4.3477, -4.13605, 0.68 ) }
    dend_20 { pt3dadd( 13.0191, 4.0198, -4.11639, 0.68 ) }
    dend_20 { pt3dadd( 14.0764, 3.62941, -4.11004, 0.68 ) }
    dend_20 { pt3dadd( 15.367, 3.21487, -4.1077, 0.68 ) }
    dend_20 { pt3dadd( 16.5665, 2.82723, -4.09703, 0.68 ) }
    dend_20 { pt3dadd( 17.7847, 2.41921, -4.06204, 0.68 ) }
    dend_20 { pt3dadd( 19.0629, 1.96134, -4.00706, 0.68 ) }
    dend_20 { pt3dadd( 20.5626, 1.4191, -3.94682, 0.68 ) }
    dend_20 { pt3dadd( 21.9023, 0.922538, -3.89574, 0.68 ) }
    dend_20 { pt3dadd( 23.414, 0.362973, -3.84045, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_20 { pt3dadd( 24.8446, -0.146334, -3.75657, 0.68 ) }
    dend_20 { pt3dadd( 25.8071, -0.475398, -3.65094, 0.68 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 2/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -31.0894, 4.95512, -17.0332, 0.45 ) }
    dend_7 { pt3dadd( -31.855, 5.2894, -17.335, 0.45 ) }
    dend_7 { pt3dadd( -32.5038, 5.57307, -17.591, 0.45 ) }
    dend_7 { pt3dadd( -33.2479, 5.91092, -17.8974, 0.45 ) }
    dend_7 { pt3dadd( -34.4204, 6.47743, -18.4095, 0.45 ) }
    dend_7 { pt3dadd( -35.5338, 7.02475, -18.8929, 0.45 ) }
    dend_7 { pt3dadd( -36.3404, 7.41611, -19.2332, 0.45 ) }
    dend_7 { pt3dadd( -37.2235, 7.8427, -19.6103, 0.45 ) }
    dend_7 { pt3dadd( -37.8512, 8.16997, -19.87, 0.45 ) }
    dend_7 { pt3dadd( -38.8027, 8.69105, -20.2612, 0.45 ) }
    dend_7 { pt3dadd( -39.6835, 9.16637, -20.6091, 0.45 ) }
    dend_7 { pt3dadd( -40.271, 9.45988, -20.8149, 0.45 ) }
    dend_7 { pt3dadd( -41.2462, 9.89109, -21.1055, 0.45 ) }
    dend_7 { pt3dadd( -42.3391, 10.364, -21.4199, 0.45 ) }
    dend_7 { pt3dadd( -43.3072, 10.7697, -21.6574, 0.45 ) }
    dend_7 { pt3dadd( -44.1239, 11.1004, -21.8567, 0.45 ) }
    dend_7 { pt3dadd( -44.9031, 11.4117, -22.0464, 0.45 ) }
    dend_7 { pt3dadd( -46.4557, 12.0368, -22.4005, 0.45 ) }
    dend_7 { pt3dadd( -47.867, 12.6019, -22.735, 0.45 ) }
    dend_7 { pt3dadd( -48.8615, 12.9981, -23.0066, 0.45 ) }
    dend_7 { pt3dadd( -49.8277, 13.3829, -23.312, 0.45 ) }
    dend_7 { pt3dadd( -51.7173, 14.1119, -23.8843, 0.45 ) }
    dend_7 { pt3dadd( -53.3692, 14.7123, -24.3753, 0.23 ) }
    dend_7 { pt3dadd( -54.9705, 15.2581, -24.8389, 0.23 ) }
    dend_7 { pt3dadd( -56.299, 15.6527, -25.1959, 0.23 ) }
    dend_7 { pt3dadd( -57.1854, 15.8939, -25.4445, 0.23 ) }
    dend_7 { pt3dadd( -59.0184, 16.3852, -25.933, 0.23 ) }
    dend_7 { pt3dadd( -60.3944, 16.7121, -26.3026, 0.23 ) }
    dend_7 { pt3dadd( -61.6194, 16.9578, -26.6021, 0.23 ) }
    dend_7 { pt3dadd( -62.8137, 17.2005, -26.8536, 0.23 ) }
    dend_7 { pt3dadd( -64.4395, 17.5622, -27.1707, 0.23 ) }
    dend_7 { pt3dadd( -65.5893, 17.836, -27.4301, 0.23 ) }
    dend_7 { pt3dadd( -66.6712, 18.0812, -27.753, 0.23 ) }
    dend_7 { pt3dadd( -68.1261, 18.3535, -28.2218, 0.23 ) }
    dend_7 { pt3dadd( -68.7558, 18.4529, -28.4305, 0.23 ) }
    dend_7 { pt3dadd( -69.7441, 18.5644, -28.7743, 0.23 ) }
    dend_7 { pt3dadd( -71.1054, 18.6594, -29.2736, 0.23 ) }
    dend_7 { pt3dadd( -72.776, 18.7256, -29.9978, 0.23 ) }
    dend_7 { pt3dadd( -74.3688, 18.791, -30.848, 0.23 ) }
    dend_7 { pt3dadd( -75.8381, 18.8279, -31.7702, 0.23 ) }
    dend_7 { pt3dadd( -77.2595, 18.8353, -32.6874, 0.23 ) }
    dend_7 { pt3dadd( -78.2807, 18.8312, -33.3809, 0.23 ) }
    dend_7 { pt3dadd( -80.5722, 18.8236, -35.017, 0.23 ) }
    dend_7 { pt3dadd( -82.519, 18.8488, -36.5334, 0.23 ) }
    dend_7 { pt3dadd( -83.9562, 18.8885, -37.7894, 0.23 ) }
    dend_7 { pt3dadd( -90.7805, 20.7661, -40.3235, 0.23 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 48/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -31.0894, 4.95512, -17.0332, 0.23 ) }
    dend_6 { pt3dadd( -32.3675, 4.10759, -17.4788, 0.23 ) }
    dend_6 { pt3dadd( -33.7538, 3.21893, -17.9591, 0.23 ) }
    dend_6 { pt3dadd( -35.4994, 2.15565, -18.5997, 0.23 ) }
    dend_6 { pt3dadd( -36.9967, 1.25009, -19.173, 0.23 ) }
    dend_6 { pt3dadd( -38.0229, 0.631751, -19.5878, 0.23 ) }
    dend_6 { pt3dadd( -39.3356, -0.157853, -20.1511, 0.23 ) }
    dend_6 { pt3dadd( -40.7918, -1.00147, -20.8181, 0.23 ) }
    dend_6 { pt3dadd( -41.8982, -1.62935, -21.4058, 0.23 ) }
    dend_6 { pt3dadd( -42.913, -2.15216, -21.9979, 0.23 ) }
    dend_6 { pt3dadd( -43.8999, -2.60456, -22.594, 0.23 ) }
    dend_6 { pt3dadd( -44.9082, -3.05604, -23.2304, 0.23 ) }
    dend_6 { pt3dadd( -46.0504, -3.57138, -23.9567, 0.23 ) }
    dend_6 { pt3dadd( -47.2257, -4.11045, -24.6891, 0.23 ) }
    dend_6 { pt3dadd( -48.3167, -4.61244, -25.3417, 0.23 ) }
    dend_6 { pt3dadd( -49.9636, -5.31431, -26.2017, 0.23 ) }
    dend_6 { pt3dadd( -51.5277, -5.92231, -26.9351, 0.23 ) }
    dend_6 { pt3dadd( -53.7376, -6.63165, -27.831, 0.23 ) }
    dend_6 { pt3dadd( -54.959, -6.93844, -28.2512, 0.23 ) }
    dend_6 { pt3dadd( -56.0993, -7.2096, -28.5984, 0.23 ) }
    dend_6 { pt3dadd( -57.9241, -7.59663, -29.1213, 0.23 ) }
    dend_6 { pt3dadd( -59.0241, -7.73165, -29.3729, 0.23 ) }
    dend_6 { pt3dadd( -60.8146, -7.66664, -29.615, 0.23 ) }
    dend_6 { pt3dadd( -62.1508, -7.31793, -29.6824, 0.23 ) }
    dend_6 { pt3dadd( -71.5849, -9.23629, -31.6562, 0.23 ) }
    dend_6 { pt3dadd( -80.7248, -10.342, -35.0938, 0.23 ) }
    dend_6 { pt3dadd( -89.6586, -10.0691, -39.1793, 0.23 ) }
    dend_6 { pt3dadd( -99.1849, -11.6372, -41.0154, 0.23 ) }
    dend_6 { pt3dadd( -108.918, -11.9242, -42.3377, 0.23 ) }
    // Section: dend_4, id: dend_4, parent: dend_2 (entry count 77/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -211.881, -132.472, -37.6094, 0.23 ) }
    dend_4 { pt3dadd( -212.359, -135.19, -37.5017, 0.23 ) }
    dend_4 { pt3dadd( -212.671, -136.967, -37.4313, 0.23 ) }
    dend_4 { pt3dadd( -213.138, -139.622, -37.3261, 0.23 ) }
    dend_4 { pt3dadd( -213.728, -142.971, -37.1934, 0.23 ) }
    dend_4 { pt3dadd( -213.876, -153.308, -37.6215, 0.23 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 83/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -211.881, -132.472, -37.6094, 0.23 ) }
    dend_3 { pt3dadd( -210.991, -136.535, -37.7249, 0.23 ) }
    dend_3 { pt3dadd( -210.131, -140.412, -37.8964, 0.23 ) }
    dend_3 { pt3dadd( -209.698, -142.513, -38.0047, 0.23 ) }
    dend_3 { pt3dadd( -209.066, -145.41, -38.1613, 0.23 ) }
    dend_3 { pt3dadd( -208.518, -147.828, -38.3329, 0.23 ) }
    dend_3 { pt3dadd( -207.659, -152.059, -38.7489, 0.23 ) }
    dend_3 { pt3dadd( -207.254, -154.407, -39.0779, 0.23 ) }
    dend_3 { pt3dadd( -206.834, -157.296, -39.6332, 0.23 ) }
    dend_3 { pt3dadd( -206.489, -161.472, -40.6858, 0.23 ) }
    dend_3 { pt3dadd( -206.36, -163.608, -41.298, 0.23 ) }
    dend_3 { pt3dadd( -206.274, -167.5, -42.5494, 0.23 ) }
    dend_3 { pt3dadd( -206.301, -169.154, -43.1622, 0.23 ) }
    dend_3 { pt3dadd( -206.472, -171.304, -44.0662, 0.23 ) }
    dend_3 { pt3dadd( -207.02, -174.612, -45.7626, 0.23 ) }
    dend_3 { pt3dadd( -203.534, -188.842, -46.6861, 0.23 ) }
    // Section: dend_27, id: dend_27, parent: dend_25 (entry count 99/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( 13.9563, 11.0934, -4.88955, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_27 { pt3dadd( 14.4931, 12.0396, -4.96011, 0.45 ) }
    dend_27 { pt3dadd( 15.021, 12.9699, -5.02949, 0.45 ) }
    dend_27 { pt3dadd( 15.6414, 14.0634, -5.11104, 0.45 ) }
    dend_27 { pt3dadd( 16.0675, 14.8144, -5.16704, 0.45 ) }
    dend_27 { pt3dadd( 16.6554, 15.8507, -5.24432, 0.45 ) }
    // Section: dend_26, id: dend_26, parent: dend_25 (entry count 5/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 13.9563, 11.0934, -4.88955, 0.45 ) }
    dend_26 { pt3dadd( 13.058, 11.8027, -5.13392, 0.45 ) }
    dend_26 { pt3dadd( 11.7518, 12.7662, -5.40368, 0.45 ) }
    dend_26 { pt3dadd( 10.6364, 13.5669, -5.60861, 0.45 ) }
    dend_26 { pt3dadd( 9.24282, 14.6235, -5.86316, 0.45 ) }
    dend_26 { pt3dadd( 8.33726, 15.3534, -6.00886, 0.45 ) }
    dend_26 { pt3dadd( 7.45179, 16.1128, -6.12362, 0.45 ) }
    dend_26 { pt3dadd( 6.88091, 16.6117, -6.1537, 0.45 ) }
    dend_26 { pt3dadd( 6.13675, 17.2875, -6.1641, 0.45 ) }
    dend_26 { pt3dadd( 5.16348, 18.2395, -6.1642, 0.45 ) }
    dend_26 { pt3dadd( 4.2941, 19.1429, -6.13742, 0.45 ) }
    dend_26 { pt3dadd( 3.28176, 20.3129, -6.08589, 0.45 ) }
    dend_26 { pt3dadd( 2.79771, 20.9246, -6.09429, 0.45 ) }
    dend_26 { pt3dadd( 2.15219, 21.8384, -6.17539, 0.45 ) }
    dend_26 { pt3dadd( 1.58983, 22.775, -6.31464, 0.45 ) }
    dend_26 { pt3dadd( 1.14771, 23.6897, -6.53497, 0.45 ) }
    dend_26 { pt3dadd( 0.741164, 24.8094, -6.93001, 0.45 ) }
    dend_26 { pt3dadd( 0.243901, 26.6479, -7.73092, 0.45 ) }
    dend_26 { pt3dadd( -0.181252, 28.6965, -8.75515, 0.45 ) }
    dend_26 { pt3dadd( -0.451362, 30.3214, -9.68346, 0.45 ) }
    dend_26 { pt3dadd( -0.650104, 31.9165, -10.7143, 0.45 ) }
    dend_26 { pt3dadd( -0.769634, 33.4906, -11.7945, 0.45 ) }
    dend_26 { pt3dadd( -0.795912, 34.9763, -12.8329, 0.45 ) }
    dend_26 { pt3dadd( -0.745553, 36.491, -13.8896, 0.45 ) }
    dend_26 { pt3dadd( -0.606029, 38.2704, -15.127, 0.45 ) }
    dend_26 { pt3dadd( -0.362182, 40.4424, -16.6145, 0.45 ) }
    dend_26 { pt3dadd( -0.112097, 42.4238, -17.9279, 0.45 ) }
    dend_26 { pt3dadd( 0.292221, 44.9352, -19.5531, 0.45 ) }
    dend_26 { pt3dadd( 0.707604, 47.1252, -20.955, 0.45 ) }
    dend_26 { pt3dadd( 1.15409, 49.3237, -22.3513, 0.45 ) }
    dend_26 { pt3dadd( 1.45364, 50.7075, -23.2309, 0.45 ) }
    dend_26 { pt3dadd( 1.87508, 52.6499, -24.5064, 0.45 ) }
    dend_26 { pt3dadd( 2.21425, 54.3947, -25.7128, 0.45 ) }
    dend_26 { pt3dadd( 2.48236, 56.0602, -26.9283, 0.45 ) }
    dend_26 { pt3dadd( 2.61703, 57.1378, -27.7571, 0.45 ) }
    dend_26 { pt3dadd( 2.7416, 58.4666, -28.8087, 0.45 ) }
    dend_26 { pt3dadd( 2.86206, 59.9509, -30.016, 0.45 ) }
    dend_26 { pt3dadd( 3.03078, 62.1616, -31.8579, 0.45 ) }
    dend_26 { pt3dadd( 3.16399, 63.9963, -33.4222, 0.45 ) }
    dend_26 { pt3dadd( 3.27798, 65.2873, -34.5334, 0.45 ) }
    dend_26 { pt3dadd( 3.43272, 66.9712, -35.9526, 0.45 ) }
    dend_26 { pt3dadd( 3.62179, 68.846, -37.4931, 0.23 ) }
    dend_26 { pt3dadd( 3.78435, 70.3273, -38.702, 0.23 ) }
    dend_26 { pt3dadd( 3.96539, 71.5903, -39.7375, 0.23 ) }
    dend_26 { pt3dadd( 4.08968, 72.3911, -40.4065, 0.23 ) }
    dend_26 { pt3dadd( 4.41079, 74.3425, -42.0496, 0.23 ) }
    dend_26 { pt3dadd( 4.64824, 76.0354, -43.5137, 0.23 ) }
    dend_26 { pt3dadd( 4.81188, 77.7546, -44.9959, 0.23 ) }
    dend_26 { pt3dadd( 4.85421, 79.3247, -46.3583, 0.23 ) }
    dend_26 { pt3dadd( 4.78405, 80.4384, -47.3458, 0.23 ) }
    dend_26 { pt3dadd( 4.67574, 81.4412, -48.2367, 0.23 ) }
    dend_26 { pt3dadd( 4.55917, 82.2003, -48.8934, 0.23 ) }
    dend_26 { pt3dadd( 4.28476, 83.4453, -49.9226, 0.23 ) }
    dend_26 { pt3dadd( 4.07155, 84.2006, -50.5131, 0.23 ) }
    dend_26 { pt3dadd( 3.33331, 86.2121, -52.0616, 0.23 ) }
    dend_26 { pt3dadd( 2.71905, 87.6265, -53.1733, 0.23 ) }
    dend_26 { pt3dadd( 2.00883, 88.9085, -54.2197, 0.23 ) }
    dend_26 { pt3dadd( 0.964327, 90.4425, -55.5171, 0.23 ) }
    dend_26 { pt3dadd( -0.06947, 91.6991, -56.6182, 0.23 ) }
    dend_26 { pt3dadd( -1.93026, 93.6082, -58.3432, 0.23 ) }
    dend_26 { pt3dadd( -2.88187, 94.427, -59.1101, 0.23 ) }
    dend_26 { pt3dadd( -4.74824, 95.8247, -60.4799, 0.23 ) }
    dend_26 { pt3dadd( -6.21685, 96.9006, -61.5294, 0.23 ) }
    dend_26 { pt3dadd( -7.35166, 97.7491, -62.3549, 0.45 ) }
    dend_26 { pt3dadd( -9.27057, 99.2372, -63.8479, 0.23 ) }
    dend_26 { pt3dadd( -10.1268, 99.9267, -64.5673, 0.23 ) }
    dend_26 { pt3dadd( -11.4178, 101.027, -65.7581, 0.23 ) }
    dend_26 { pt3dadd( -13.327, 102.751, -67.7567, 0.23 ) }
    dend_26 { pt3dadd( -14.2765, 103.608, -68.7988, 0.23 ) }
    dend_26 { pt3dadd( -15.2309, 104.37, -69.804, 0.23 ) }
    dend_26 { pt3dadd( -16.6075, 105.308, -71.1448, 0.23 ) }
    dend_26 { pt3dadd( -17.5999, 105.895, -72.0749, 0.23 ) }
    dend_26 { pt3dadd( -18.5721, 106.371, -72.9259, 0.23 ) }
    dend_26 { pt3dadd( -20.801, 107.189, -74.6924, 0.23 ) }
    dend_26 { pt3dadd( -22.7912, 107.808, -76.1717, 0.23 ) }
    dend_26 { pt3dadd( -24.0101, 108.148, -77.0531, 0.23 ) }
    dend_26 { pt3dadd( -25.0473, 108.411, -77.8379, 0.23 ) }
    dend_26 { pt3dadd( -26.3964, 108.774, -78.9817, 0.23 ) }
    dend_26 { pt3dadd( -26.8799, 108.919, -79.4895, 0.23 ) }
    dend_26 { pt3dadd( -27.1966, 109.056, -79.9374, 0.23 ) }
    dend_26 { pt3dadd( -27.6812, 109.439, -80.823, 0.23 ) }
    dend_26 { pt3dadd( -28.3512, 110.198, -82.1641, 0.23 ) }
    dend_26 { pt3dadd( -29.043, 111.242, -83.6541, 0.23 ) }
    dend_26 { pt3dadd( -29.6334, 112.394, -85.057, 0.23 ) }
    dend_26 { pt3dadd( -30.3757, 114.049, -86.8754, 0.23 ) }
    dend_26 { pt3dadd( -31.0947, 115.69, -88.5409, 0.23 ) }
    dend_26 { pt3dadd( -31.8778, 117.511, -90.3114, 0.23 ) }
    dend_26 { pt3dadd( -32.5515, 119.179, -91.82, 0.23 ) }
    dend_26 { pt3dadd( -33.2862, 121.274, -93.5811, 0.23 ) }
    dend_26 { pt3dadd( -33.6468, 122.499, -94.5262, 0.23 ) }
    dend_26 { pt3dadd( -34.0521, 124.4, -95.9304, 0.23 ) }
    dend_26 { pt3dadd( -38.2914, 131.085, -100.127, 0.23 ) }
    // Section: dend_24, id: dend_24, parent: dend_20 (entry count 97/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 25.8071, -0.475398, -3.65094, 0.45 ) }
    dend_24 { pt3dadd( 26.2068, -0.915468, -4.74797, 0.45 ) }
    dend_24 { pt3dadd( 26.7075, -1.43567, -5.87448, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_9()
}

proc basic_shape_9() {
    dend_24 { pt3dadd( 27.2707, -1.86557, -6.84189, 0.45 ) }
    dend_24 { pt3dadd( 27.7722, -2.17823, -7.57693, 0.45 ) }
    dend_24 { pt3dadd( 28.0178, -2.30388, -7.90094, 0.45 ) }
    dend_24 { pt3dadd( 28.4625, -2.52797, -8.5069, 0.45 ) }
    dend_24 { pt3dadd( 29.1318, -2.79681, -9.36474, 0.45 ) }
    dend_24 { pt3dadd( 30.053, -3.07143, -10.5734, 0.45 ) }
    dend_24 { pt3dadd( 30.7133, -3.18045, -11.5374, 0.45 ) }
    dend_24 { pt3dadd( 31.441, -3.21079, -12.6694, 0.45 ) }
    dend_24 { pt3dadd( 32.0941, -3.20123, -13.7209, 0.45 ) }
    dend_24 { pt3dadd( 32.9462, -3.17216, -15.0815, 0.45 ) }
    dend_24 { pt3dadd( 33.8928, -3.15057, -16.5815, 0.45 ) }
    dend_24 { pt3dadd( 35.4768, -3.17027, -19.0001, 0.23 ) }
    dend_24 { pt3dadd( 36.3563, -3.21061, -20.2261, 0.23 ) }
    dend_24 { pt3dadd( 37.6881, -3.30425, -21.8626, 0.23 ) }
    dend_24 { pt3dadd( 39.1293, -3.41638, -23.3657, 0.23 ) }
    dend_24 { pt3dadd( 39.5471, -3.46466, -23.7441, 0.23 ) }
    dend_24 { pt3dadd( 40.8715, -3.64919, -24.8511, 0.23 ) }
    dend_24 { pt3dadd( 42.5967, -3.9476, -26.2489, 0.23 ) }
    dend_24 { pt3dadd( 44.5585, -4.28723, -27.8181, 0.23 ) }
    dend_24 { pt3dadd( 45.5922, -4.44656, -28.6443, 0.23 ) }
    dend_24 { pt3dadd( 47.5034, -4.69444, -30.1912, 0.23 ) }
    dend_24 { pt3dadd( 49.1672, -4.88618, -31.5729, 0.23 ) }
    dend_24 { pt3dadd( 50.8114, -5.08235, -32.9856, 0.23 ) }
    dend_24 { pt3dadd( 54.8673, -7.13785, -39.2069, 0.23 ) }
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 24/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 25.8071, -0.475398, -3.65094, 0.45 ) }
    dend_21 { pt3dadd( 27.6503, -1.49504, -3.77223, 0.45 ) }
    dend_21 { pt3dadd( 28.476, -1.98873, -3.82654, 0.45 ) }
    dend_21 { pt3dadd( 30.0406, -2.9229, -3.92431, 0.68 ) }
    dend_21 { pt3dadd( 31.6471, -3.87385, -4.02659, 0.45 ) }
    dend_21 { pt3dadd( 33.2649, -4.83679, -4.18115, 0.45 ) }
    dend_21 { pt3dadd( 34.6637, -5.63708, -4.3411, 0.45 ) }
    dend_21 { pt3dadd( 36.1478, -6.47376, -4.55587, 0.45 ) }
    dend_21 { pt3dadd( 37.6076, -7.27927, -4.76153, 0.45 ) }
    dend_21 { pt3dadd( 38.5796, -7.81778, -4.89251, 0.45 ) }
    dend_21 { pt3dadd( 40.0453, -8.64749, -5.12842, 0.45 ) }
    dend_21 { pt3dadd( 42.4059, -9.91274, -5.56076, 0.45 ) }
    // Section: dend_29, id: dend_29, parent: dend_27 (entry count 36/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 16.6554, 15.8507, -5.24432, 0.45 ) }
    dend_29 { pt3dadd( 16.8392, 17.0528, -5.27229, 0.45 ) }
    dend_29 { pt3dadd( 17.2374, 19.3209, -5.23196, 0.45 ) }
    dend_29 { pt3dadd( 17.6273, 21.039, -5.12509, 0.45 ) }
    dend_29 { pt3dadd( 18.1076, 22.981, -4.95, 0.45 ) }
    dend_29 { pt3dadd( 18.6399, 24.8896, -4.75857, 0.45 ) }
    dend_29 { pt3dadd( 19.0667, 26.3452, -4.5954, 0.45 ) }
    dend_29 { pt3dadd( 19.706, 28.2817, -4.31146, 0.45 ) }
    dend_29 { pt3dadd( 20.4031, 30.3414, -3.94482, 0.45 ) }
    dend_29 { pt3dadd( 20.9861, 32.1983, -3.56782, 0.45 ) }
    dend_29 { pt3dadd( 21.5095, 34.1589, -3.09199, 0.45 ) }
    dend_29 { pt3dadd( 21.9885, 36.5249, -2.38055, 0.45 ) }
    dend_29 { pt3dadd( 22.1608, 37.7679, -1.93391, 0.45 ) }
    dend_29 { pt3dadd( 22.2718, 39.6404, -1.11971, 0.45 ) }
    dend_29 { pt3dadd( 22.1994, 41.1586, -0.303846, 0.45 ) }
    dend_29 { pt3dadd( 22.0171, 42.3647, 0.517051, 0.45 ) }
    dend_29 { pt3dadd( 21.7211, 43.5488, 1.49335, 0.45 ) }
    dend_29 { pt3dadd( 21.4356, 44.4764, 2.38731, 0.45 ) }
    dend_29 { pt3dadd( 21.1128, 45.4474, 3.45342, 0.45 ) }
    dend_29 { pt3dadd( 20.7964, 46.3919, 4.64392, 0.45 ) }
    dend_29 { pt3dadd( 20.5872, 47.034, 5.48492, 0.45 ) }
    dend_29 { pt3dadd( 20.3216, 47.7024, 6.38627, 0.45 ) }
    dend_29 { pt3dadd( 20.0879, 48.2592, 7.10585, 0.45 ) }
    dend_29 { pt3dadd( 19.7938, 48.955, 7.96566, 0.45 ) }
    dend_29 { pt3dadd( 19.431, 49.8287, 9.01414, 0.45 ) }
    dend_29 { pt3dadd( 19.0382, 50.764, 10.1236, 0.45 ) }
    dend_29 { pt3dadd( 18.6926, 51.5168, 10.9767, 0.45 ) }
    dend_29 { pt3dadd( 18.2946, 52.3518, 11.9046, 0.45 ) }
    dend_29 { pt3dadd( 17.8903, 53.2713, 12.8963, 0.45 ) }
    dend_29 { pt3dadd( 17.5513, 54.1505, 13.8052, 0.45 ) }
    dend_29 { pt3dadd( 17.269, 55.0323, 14.7199, 0.45 ) }
    dend_29 { pt3dadd( 17.0685, 55.7512, 15.5227, 0.45 ) }
    dend_29 { pt3dadd( 16.7245, 56.9987, 16.9739, 0.23 ) }
    dend_29 { pt3dadd( 16.4641, 57.8811, 18.0453, 0.23 ) }
    dend_29 { pt3dadd( 16.0983, 59.1232, 19.5274, 0.23 ) }
    dend_29 { pt3dadd( 15.8096, 60.1881, 20.741, 0.23 ) }
    dend_29 { pt3dadd( 15.488, 61.4022, 22.0993, 0.23 ) }
    dend_29 { pt3dadd( 15.2985, 62.0897, 22.8587, 0.23 ) }
    dend_29 { pt3dadd( 15.0568, 62.8352, 23.6295, 0.23 ) }
    dend_29 { pt3dadd( 14.7549, 63.7312, 24.4846, 0.23 ) }
    dend_29 { pt3dadd( 14.4762, 64.6186, 25.2424, 0.23 ) }
    dend_29 { pt3dadd( 14.259, 65.4506, 25.8589, 0.23 ) }
    dend_29 { pt3dadd( 14.1095, 66.2339, 26.3632, 0.23 ) }
    dend_29 { pt3dadd( 13.9908, 67.2947, 27.0498, 0.23 ) }
    dend_29 { pt3dadd( 13.9777, 68.0285, 27.5415, 0.23 ) }
    dend_29 { pt3dadd( 14.0779, 69.3655, 28.4208, 0.23 ) }
    dend_29 { pt3dadd( 14.2859, 70.5027, 29.1454, 0.23 ) }
    dend_29 { pt3dadd( 14.6024, 71.5886, 29.8346, 0.23 ) }
    dend_29 { pt3dadd( 15.2308, 73.2263, 30.9268, 0.23 ) }
    dend_29 { pt3dadd( 15.897, 74.7707, 31.9835, 0.23 ) }
    dend_29 { pt3dadd( 16.4708, 75.9692, 32.8122, 0.23 ) }
    dend_29 { pt3dadd( 17.0896, 77.112, 33.6248, 0.23 ) }
    dend_29 { pt3dadd( 17.7739, 78.2623, 34.4665, 0.23 ) }
    dend_29 { pt3dadd( 18.5579, 79.4001, 35.2977, 0.23 ) }
    // Section: dend_28, id: dend_28, parent: dend_27 (entry count 90/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 16.6554, 15.8507, -5.24432, 0.45 ) }
    dend_28 { pt3dadd( 17.8318, 15.5763, -4.68468, 0.45 ) }
    dend_28 { pt3dadd( 19.69, 15.0891, -3.81889, 0.45 ) }
    dend_28 { pt3dadd( 21.1939, 14.7093, -3.1104, 0.45 ) }
    dend_28 { pt3dadd( 22.7808, 14.348, -2.37277, 0.45 ) }
    dend_28 { pt3dadd( 24.2417, 14.0866, -1.74392, 0.45 ) }
    dend_28 { pt3dadd( 25.3326, 13.9142, -1.30024, 0.45 ) }
    dend_28 { pt3dadd( 26.9802, 13.6849, -0.703374, 0.45 ) }
    dend_28 { pt3dadd( 28.4818, 13.5124, -0.210257, 0.45 ) }
    dend_28 { pt3dadd( 30.0581, 13.3718, 0.244551, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_10()
}

proc basic_shape_10() {
    dend_28 { pt3dadd( 32.221, 13.1838, 0.809164, 0.45 ) }
    dend_28 { pt3dadd( 33.492, 13.0636, 1.11308, 0.45 ) }
    dend_28 { pt3dadd( 34.4828, 12.9463, 1.32805, 0.45 ) }
    dend_28 { pt3dadd( 35.0606, 12.8733, 1.44961, 0.45 ) }
    dend_28 { pt3dadd( 36.5005, 12.6507, 1.75422, 0.45 ) }
    dend_28 { pt3dadd( 38.3587, 12.3219, 2.1902, 0.45 ) }
    dend_28 { pt3dadd( 40.5176, 11.892, 2.75191, 0.45 ) }
    dend_28 { pt3dadd( 43.1974, 11.3501, 3.47246, 0.45 ) }
    dend_28 { pt3dadd( 44.9289, 10.9665, 3.953, 0.45 ) }
    dend_28 { pt3dadd( 46.8701, 10.5025, 4.516, 0.45 ) }
    dend_28 { pt3dadd( 48.5253, 10.0802, 5.02876, 0.45 ) }
    dend_28 { pt3dadd( 49.2553, 9.88812, 5.26857, 0.45 ) }
    dend_28 { pt3dadd( 50.6091, 9.49284, 5.71961, 0.45 ) }
    dend_28 { pt3dadd( 52.0308, 9.06775, 6.2241, 0.45 ) }
    dend_28 { pt3dadd( 53.5472, 8.62003, 6.78791, 0.45 ) }
    dend_28 { pt3dadd( 54.6711, 8.31145, 7.21111, 0.45 ) }
    dend_28 { pt3dadd( 56.176, 7.93585, 7.77735, 0.45 ) }
    dend_28 { pt3dadd( 58.2281, 7.49799, 8.56055, 0.23 ) }
    dend_28 { pt3dadd( 59.7823, 7.22853, 9.14266, 0.23 ) }
    dend_28 { pt3dadd( 61.7052, 6.90397, 9.84954, 0.23 ) }
    dend_28 { pt3dadd( 62.6598, 6.74052, 10.1912, 0.23 ) }
    dend_28 { pt3dadd( 64.304, 6.44214, 10.6987, 0.23 ) }
    dend_28 { pt3dadd( 65.6977, 6.17023, 11.0533, 0.23 ) }
    dend_28 { pt3dadd( 67.4191, 5.82008, 11.3681, 0.23 ) }
    dend_28 { pt3dadd( 69.2329, 5.44347, 11.5047, 0.23 ) }
    dend_28 { pt3dadd( 70.4831, 5.1702, 11.4731, 0.23 ) }
    dend_28 { pt3dadd( 72.6467, 4.71502, 11.2646, 0.45 ) }
    dend_28 { pt3dadd( 74.2236, 4.40528, 10.9958, 0.45 ) }
    dend_28 { pt3dadd( 75.6011, 4.14589, 10.7064, 0.45 ) }
    dend_28 { pt3dadd( 77.9509, 3.6757, 10.1755, 0.23 ) }
    dend_28 { pt3dadd( 79.3523, 3.41164, 9.8558, 0.23 ) }
    dend_28 { pt3dadd( 80.8751, 3.11076, 9.54224, 0.23 ) }
    dend_28 { pt3dadd( 82.3046, 2.82784, 9.33555, 0.23 ) }
    dend_28 { pt3dadd( 84.1138, 2.44936, 9.17294, 0.23 ) }
    dend_28 { pt3dadd( 86.425, 1.94212, 9.1077, 0.23 ) }
    dend_28 { pt3dadd( 87.3873, 1.70601, 9.12747, 0.23 ) }
    dend_28 { pt3dadd( 88.5427, 1.38919, 9.16143, 0.23 ) }
    dend_28 { pt3dadd( 90.6955, 0.753203, 9.20569, 0.23 ) }
    dend_28 { pt3dadd( 93.0017, 0.0742747, 9.23774, 0.23 ) }
    dend_28 { pt3dadd( 95.5858, -0.671606, 9.23032, 0.23 ) }
    dend_28 { pt3dadd( 98.0935, -1.36305, 9.13258, 0.23 ) }
    dend_28 { pt3dadd( 100.759, -2.12777, 8.87955, 0.23 ) }
    dend_28 { pt3dadd( 101.742, -2.41819, 8.76689, 0.23 ) }
    dend_28 { pt3dadd( 103.442, -2.92548, 8.52076, 0.23 ) }
    dend_28 { pt3dadd( 105.49, -3.52708, 8.14873, 0.23 ) }
    dend_28 { pt3dadd( 108.479, -4.37386, 7.48208, 0.23 ) }
    dend_28 { pt3dadd( 111.692, -5.19432, 6.64817, 0.23 ) }
    dend_28 { pt3dadd( 119.7, -8.6904, 6.20797, 0.23 ) }
    dend_28 { pt3dadd( 128.12, -10.9883, 6.80062, 0.23 ) }
    // Section: dend_23, id: dend_23, parent: dend_21 (entry count 49/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( 42.4059, -9.91274, -5.56076, 0.45 ) }
    dend_23 { pt3dadd( 43.9164, -9.57882, -5.40241, 0.45 ) }
    dend_23 { pt3dadd( 45.3078, -9.2487, -5.30825, 0.45 ) }
    dend_23 { pt3dadd( 47.711, -8.64486, -5.18177, 0.23 ) }
    dend_23 { pt3dadd( 48.5346, -8.44976, -5.14541, 0.23 ) }
    dend_23 { pt3dadd( 49.598, -8.19991, -5.09634, 0.23 ) }
    dend_23 { pt3dadd( 50.8599, -7.93621, -5.04225, 0.23 ) }
    dend_23 { pt3dadd( 51.9616, -7.72514, -4.99843, 0.23 ) }
    dend_23 { pt3dadd( 53.0866, -7.5297, -4.949, 0.23 ) }
    dend_23 { pt3dadd( 54.4669, -7.30904, -4.87541, 0.23 ) }
    dend_23 { pt3dadd( 56.0847, -7.05168, -4.75856, 0.23 ) }
    dend_23 { pt3dadd( 58.5209, -6.65182, -4.53738, 0.23 ) }
    dend_23 { pt3dadd( 60.372, -6.35568, -4.32319, 0.23 ) }
    dend_23 { pt3dadd( 62.215, -6.08768, -4.05534, 0.23 ) }
    dend_23 { pt3dadd( 63.4337, -5.91197, -3.85853, 0.23 ) }
    dend_23 { pt3dadd( 65.473, -5.59792, -3.47263, 0.23 ) }
    dend_23 { pt3dadd( 66.5321, -5.44456, -3.24782, 0.23 ) }
    dend_23 { pt3dadd( 67.7547, -5.27971, -2.95993, 0.23 ) }
    dend_23 { pt3dadd( 69.7152, -5.10888, -2.49623, 0.23 ) }
    dend_23 { pt3dadd( 70.4426, -5.06441, -2.3279, 0.23 ) }
    dend_23 { pt3dadd( 71.3731, -5.02885, -2.12508, 0.23 ) }
    dend_23 { pt3dadd( 73.3305, -5.05509, -1.73643, 0.23 ) }
    dend_23 { pt3dadd( 74.1772, -5.08967, -1.57601, 0.23 ) }
    dend_23 { pt3dadd( 75.8114, -5.16798, -1.29043, 0.23 ) }
    dend_23 { pt3dadd( 77.5084, -5.27288, -1.01977, 0.23 ) }
    dend_23 { pt3dadd( 78.4216, -5.35737, -0.885715, 0.23 ) }
    dend_23 { pt3dadd( 80.0107, -5.5163, -0.647904, 0.23 ) }
    dend_23 { pt3dadd( 80.8116, -5.60081, -0.513922, 0.23 ) }
    dend_23 { pt3dadd( 82.0758, -5.73602, -0.29343, 0.23 ) }
    dend_23 { pt3dadd( 83.2914, -5.85775, -0.0799856, 0.23 ) }
    dend_23 { pt3dadd( 84.2981, -5.9304, 0.0612495, 0.23 ) }
    dend_23 { pt3dadd( 85.7633, -5.96469, 0.23247, 0.23 ) }
    dend_23 { pt3dadd( 87.8031, -5.95472, 0.417243, 0.23 ) }
    dend_23 { pt3dadd( 88.8937, -5.944, 0.495346, 0.23 ) }
    dend_23 { pt3dadd( 90.6266, -5.91174, 0.600873, 0.23 ) }
    dend_23 { pt3dadd( 93.0436, -5.83183, 0.724895, 0.23 ) }
    dend_23 { pt3dadd( 93.9827, -5.78735, 0.758633, 0.23 ) }
    dend_23 { pt3dadd( 96.0672, -5.68062, 0.787846, 0.23 ) }
    dend_23 { pt3dadd( 97.9093, -5.54781, 0.795563, 0.23 ) }
    dend_23 { pt3dadd( 99.7866, -5.42127, 0.80602, 0.23 ) }
    dend_23 { pt3dadd( 106.319, -3.6675, 0.630902, 0.23 ) }
    // Section: dend_22, id: dend_22, parent: dend_21 (entry count 90/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( 42.4059, -9.91274, -5.56076, 0.45 ) }
    dend_22 { pt3dadd( 43.9275, -11.1695, -5.50371, 0.45 ) }
    dend_22 { pt3dadd( 45.5228, -12.3914, -5.48702, 0.45 ) }
    dend_22 { pt3dadd( 47.71, -14.0314, -5.49629, 0.45 ) }
    dend_22 { pt3dadd( 50.8641, -16.3475, -5.64133, 0.45 ) }
    dend_22 { pt3dadd( 52.9472, -17.9485, -5.81865, 0.23 ) }
    dend_22 { pt3dadd( 54.704, -19.3345, -6.00552, 0.23 ) }
    dend_22 { pt3dadd( 56.0855, -20.4288, -6.17881, 0.45 ) }
    dend_22 { pt3dadd( 57.2245, -21.3987, -6.31107, 0.45 ) }
    dend_22 { pt3dadd( 58.5072, -22.555, -6.41914, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_11()
}

proc basic_shape_11() {
    dend_22 { pt3dadd( 60.8619, -24.8237, -6.506, 0.45 ) }
    dend_22 { pt3dadd( 62.9479, -26.8737, -6.49845, 0.45 ) }
    dend_22 { pt3dadd( 64.9098, -28.7662, -6.45142, 0.45 ) }
    dend_22 { pt3dadd( 66.1322, -29.9763, -6.39898, 0.45 ) }
    dend_22 { pt3dadd( 69.2371, -33.0823, -6.20648, 0.45 ) }
    dend_22 { pt3dadd( 72.0739, -35.976, -5.96003, 0.45 ) }
    dend_22 { pt3dadd( 74.1016, -38.0953, -5.75618, 0.45 ) }
    dend_22 { pt3dadd( 75.446, -39.602, -5.61205, 0.45 ) }
    dend_22 { pt3dadd( 77.2875, -41.8082, -5.42582, 0.23 ) }
    dend_22 { pt3dadd( 79.4936, -44.7092, -5.20288, 0.23 ) }
    dend_22 { pt3dadd( 80.2003, -45.7874, -5.11622, 0.23 ) }
    dend_22 { pt3dadd( 81.1782, -47.5223, -4.965, 0.23 ) }
    dend_22 { pt3dadd( 82.2024, -49.6056, -4.75218, 0.23 ) }
    dend_22 { pt3dadd( 82.7948, -51.0169, -4.59263, 0.23 ) }
    dend_22 { pt3dadd( 83.3308, -52.4591, -4.45092, 0.23 ) }
    dend_22 { pt3dadd( 83.7858, -53.8458, -4.35835, 0.23 ) }
    dend_22 { pt3dadd( 84.3533, -55.5992, -4.28568, 0.23 ) }
    dend_22 { pt3dadd( 84.8766, -57.2821, -4.26121, 0.23 ) }
    dend_22 { pt3dadd( 85.1833, -58.3618, -4.23566, 0.23 ) }
    dend_22 { pt3dadd( 85.4923, -59.5899, -4.16341, 0.23 ) }
    dend_22 { pt3dadd( 85.8504, -61.2868, -3.98569, 0.23 ) }
    dend_22 { pt3dadd( 86.1554, -62.8813, -3.79795, 0.23 ) }
    dend_22 { pt3dadd( 86.5012, -64.6251, -3.56134, 0.23 ) }
    dend_22 { pt3dadd( 86.74, -65.7346, -3.3843, 0.23 ) }
    dend_22 { pt3dadd( 87.3328, -68.3743, -2.90703, 0.23 ) }
    dend_22 { pt3dadd( 87.8842, -71.3702, -2.28958, 0.23 ) }
    dend_22 { pt3dadd( 94.3698, -79.2839, -1.85743, 0.23 ) }
    dend_22 { pt3dadd( 100.834, -87.2016, -1.21779, 0.23 ) }
    dend_22 { pt3dadd( 107.927, -94.5883, -1.26371, 0.23 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_34, dend_31, dend_30, dend_17, dend_14, dend_11, dend_8, dend_1, dend_0, dend_36, dend_35, dend_33, dend_32, dend_19, dend_18, dend_16, dend_15, dend_13, dend_12, dend_10, dend_9, dend_5, dend_2, dend_25, dend_20, dend_7, dend_6, dend_4, dend_3, dend_27, dend_26, dend_24, dend_21, dend_29, dend_28, dend_23, dend_22]}
    ModelViewParmSubset_2 = new SectionList()
    dend_34 ModelViewParmSubset_2.append()
    dend_31 ModelViewParmSubset_2.append()
    dend_30 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_36 ModelViewParmSubset_2.append()
    dend_35 ModelViewParmSubset_2.append()
    dend_33 ModelViewParmSubset_2.append()
    dend_32 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_34, dend_31, dend_30, dend_17, dend_14, dend_11, dend_8, dend_1, dend_0, dend_36, dend_35, dend_33, dend_32, dend_19, dend_18, dend_16, dend_15, dend_13, dend_12, dend_10, dend_9, dend_5, dend_2, dend_25, dend_20, dend_7, dend_6, dend_4, dend_3, dend_27, dend_26, dend_24, dend_21, dend_29, dend_28, dend_23, dend_22]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_34 ModelViewParmSubset_4.append()
    dend_31 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_36 ModelViewParmSubset_4.append()
    dend_35 ModelViewParmSubset_4.append()
    dend_33 ModelViewParmSubset_4.append()
    dend_32 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()

    // Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_34, dend_31, dend_30, dend_17, dend_14, dend_11, dend_8, dend_1, dend_0, axon_0, dend_36, dend_35, dend_33, dend_32, dend_19, dend_18, dend_16, dend_15, dend_13, dend_12, dend_10, dend_9, dend_5, dend_2, axon_1, dend_25, dend_20, dend_7, dend_6, dend_4, dend_3, dend_27, dend_26, dend_24, dend_21, dend_29, dend_28, dend_23, dend_22]}
    ModelViewParmSubset_5 = new SectionList()
    dend_34 ModelViewParmSubset_5.append()
    dend_31 ModelViewParmSubset_5.append()
    dend_30 ModelViewParmSubset_5.append()
    dend_17 ModelViewParmSubset_5.append()
    dend_14 ModelViewParmSubset_5.append()
    dend_11 ModelViewParmSubset_5.append()
    dend_8 ModelViewParmSubset_5.append()
    dend_1 ModelViewParmSubset_5.append()
    dend_0 ModelViewParmSubset_5.append()
    axon_0 ModelViewParmSubset_5.append()
    dend_36 ModelViewParmSubset_5.append()
    dend_35 ModelViewParmSubset_5.append()
    dend_33 ModelViewParmSubset_5.append()
    dend_32 ModelViewParmSubset_5.append()
    dend_19 ModelViewParmSubset_5.append()
    dend_18 ModelViewParmSubset_5.append()
    dend_16 ModelViewParmSubset_5.append()
    dend_15 ModelViewParmSubset_5.append()
    dend_13 ModelViewParmSubset_5.append()
    dend_12 ModelViewParmSubset_5.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_10 ModelViewParmSubset_5.append()
    dend_9 ModelViewParmSubset_5.append()
    dend_5 ModelViewParmSubset_5.append()
    dend_2 ModelViewParmSubset_5.append()
    axon_1 ModelViewParmSubset_5.append()
    dend_25 ModelViewParmSubset_5.append()
    dend_20 ModelViewParmSubset_5.append()
    dend_7 ModelViewParmSubset_5.append()
    dend_6 ModelViewParmSubset_5.append()
    dend_4 ModelViewParmSubset_5.append()
    dend_3 ModelViewParmSubset_5.append()
    dend_27 ModelViewParmSubset_5.append()
    dend_26 ModelViewParmSubset_5.append()
    dend_24 ModelViewParmSubset_5.append()
    dend_21 ModelViewParmSubset_5.append()
    dend_29 ModelViewParmSubset_5.append()
    dend_28 ModelViewParmSubset_5.append()
    dend_23 ModelViewParmSubset_5.append()
    dend_22 ModelViewParmSubset_5.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_30 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_0 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_36]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_36 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_35]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_35 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_33]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_33 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_32]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_32 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_18 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_13 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_12 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_10 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_9 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_2 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_7 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_6 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_3 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_26 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_35 = new SectionList()
    dend_24 OneSecGrp_SectionRef_35.append()

    // Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_37 = new SectionList()
    dend_29 OneSecGrp_SectionRef_37.append()

    // Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_38 = new SectionList()
    dend_28 OneSecGrp_SectionRef_38.append()

    // Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_39 = new SectionList()
    dend_23 OneSecGrp_SectionRef_39.append()

    // Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_40 = new SectionList()
    dend_22 OneSecGrp_SectionRef_40.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_8 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_17 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_19 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_34]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_34 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_31]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_31 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_1 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_11 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_25 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_27 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_14 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_20 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_5 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_36 = new SectionList()
    dend_21 OneSecGrp_SectionRef_36.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_15 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_16 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_4 OneSecGrp_SectionRef_31.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()
    dend_31 basal.append()
    dend_32 basal.append()
    dend_33 basal.append()
    dend_34 basal.append()
    dend_35 basal.append()
    dend_36 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_17, dend_17, dend_17, dend_17, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, axon_1, axon_1, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_27, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_33 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_10()
}

proc subsets_10() {
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_11()
}

proc subsets_11() {
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_12()
}

proc subsets_12() {
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 3.25478E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 3.25478E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.993125  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.0  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.005611  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.068459995  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.517764  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 6.3E-5  // units: S cm-2
        e_pas_nml2 = -64.6017  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 3.45E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.077616  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 7.43567E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.002099  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 1.13999995E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.26087198  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-5  // units: S cm-2
        e_pas_nml2 = -69.78141  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 3.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.395881  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009986  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 5.0100003E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009728  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 2.7999999E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cIR_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cIR_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cIR_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cIR_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_30 nseg = 3
    dend_0 nseg = 5
    dend_36 nseg = 9
    dend_35 nseg = 3
    dend_33 nseg = 3
    dend_32 nseg = 3
    dend_18 nseg = 5
    dend_13 nseg = 3
    dend_12 nseg = 7
    dend_10 nseg = 3
    dend_9 nseg = 3
    dend_2 nseg = 13
    dend_7 nseg = 3
    dend_6 nseg = 5
    dend_3 nseg = 3
    dend_26 nseg = 9
    dend_24 nseg = 3
    dend_29 nseg = 5
    dend_28 nseg = 5
    dend_23 nseg = 3
    dend_22 nseg = 5
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cIR216_L6_NBC_e6f3e8d1f4_0_0


