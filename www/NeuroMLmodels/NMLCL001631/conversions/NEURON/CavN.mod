TITLE Mod file for component: Component(id=CavN type=ionChannelHH)

COMMENT

    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.3
         org.neuroml.model   v1.5.3
         jLEMS               v0.9.9.0

ENDCOMMENT

NEURON {
    SUFFIX CavN
    USEION ca WRITE ica VALENCE 2 ? Assuming valence = 2 (Ca ion); TODO check this!!
    
    RANGE gion                           
    RANGE gmax                              : Will be changed when ion channel mechanism placed on cell!
    RANGE conductance                       : parameter
    
    RANGE g                                 : exposure
    
    RANGE fopen                             : exposure
    RANGE c_instances                       : parameter
    
    RANGE c_alpha                           : exposure
    
    RANGE c_beta                            : exposure
    
    RANGE c_tau                             : exposure
    
    RANGE c_inf                             : exposure
    
    RANGE c_rateScale                       : exposure
    
    RANGE c_fcond                           : exposure
    RANGE c_forwardRate_rate                : parameter
    RANGE c_forwardRate_midpoint            : parameter
    RANGE c_forwardRate_scale               : parameter
    
    RANGE c_forwardRate_r                   : exposure
    RANGE c_reverseRate_rate                : parameter
    RANGE c_reverseRate_midpoint            : parameter
    RANGE c_reverseRate_scale               : parameter
    
    RANGE c_reverseRate_r                   : exposure
    RANGE c_q10Settings_q10Factor           : parameter
    RANGE c_q10Settings_experimentalTemp    : parameter
    RANGE c_q10Settings_TENDEGREES          : parameter
    
    RANGE c_q10Settings_q10                 : exposure
    RANGE d_instances                       : parameter
    
    RANGE d_alpha                           : exposure
    
    RANGE d_beta                            : exposure
    
    RANGE d_tau                             : exposure
    
    RANGE d_inf                             : exposure
    
    RANGE d_rateScale                       : exposure
    
    RANGE d_fcond                           : exposure
    RANGE d_forwardRate_rate                : parameter
    RANGE d_forwardRate_midpoint            : parameter
    RANGE d_forwardRate_scale               : parameter
    
    RANGE d_forwardRate_r                   : exposure
    RANGE d_reverseRate_rate                : parameter
    RANGE d_reverseRate_midpoint            : parameter
    RANGE d_reverseRate_scale               : parameter
    
    RANGE d_reverseRate_r                   : exposure
    RANGE d_q10Settings_q10Factor           : parameter
    RANGE d_q10Settings_experimentalTemp    : parameter
    RANGE d_q10Settings_TENDEGREES          : parameter
    
    RANGE d_q10Settings_q10                 : exposure
    RANGE c_forwardRate_x                   : derived variable
    RANGE conductanceScale                  : derived variable
    RANGE fopen0                            : derived variable
    
}

UNITS {
    
    (nA) = (nanoamp)
    (uA) = (microamp)
    (mA) = (milliamp)
    (A) = (amp)
    (mV) = (millivolt)
    (mS) = (millisiemens)
    (uS) = (microsiemens)
    (molar) = (1/liter)
    (kHz) = (kilohertz)
    (mM) = (millimolar)
    (um) = (micrometer)
    (umol) = (micromole)
    (S) = (siemens)
    
}

PARAMETER {
    
    gmax = 0  (S/cm2)                       : Will be changed when ion channel mechanism placed on cell!
    
    conductance = 1.0E-6 (uS)
    c_instances = 2 
    c_forwardRate_rate = 1.9000001 (kHz)
    c_forwardRate_midpoint = 19.88 (mV)
    c_forwardRate_scale = 10 (mV)
    c_reverseRate_rate = 0.046000004 (kHz)
    c_reverseRate_midpoint = 0 (mV)
    c_reverseRate_scale = -20.73 (mV)
    c_q10Settings_q10Factor = 3 
    c_q10Settings_experimentalTemp = 307.15 (K)
    c_q10Settings_TENDEGREES = 10 (K)
    d_instances = 1 
    d_forwardRate_rate = 1.6000001E-4 (kHz)
    d_forwardRate_midpoint = 0 (mV)
    d_forwardRate_scale = -48.4 (mV)
    d_reverseRate_rate = 1 (kHz)
    d_reverseRate_midpoint = 39 (mV)
    d_reverseRate_scale = 10 (mV)
    d_q10Settings_q10Factor = 3 
    d_q10Settings_experimentalTemp = 307.15 (K)
    d_q10Settings_TENDEGREES = 10 (K)
}

ASSIGNED {
    
    gion   (S/cm2)                          : Transient conductance density of the channel? Standard Assigned variables with ionChannel
    v (mV)
    celsius (degC)
    temperature (K)
    eca (mV)
    ica (mA/cm2)
    
    
    c_forwardRate_x                        : derived variable
    
    c_forwardRate_r (kHz)                  : conditional derived var...
    
    c_reverseRate_r (kHz)                  : derived variable
    
    c_q10Settings_q10                      : derived variable
    
    c_rateScale                            : derived variable
    
    c_alpha (kHz)                          : derived variable
    
    c_beta (kHz)                           : derived variable
    
    c_fcond                                : derived variable
    
    c_inf                                  : derived variable
    
    c_tau (ms)                             : derived variable
    
    d_forwardRate_r (kHz)                  : derived variable
    
    d_reverseRate_r (kHz)                  : derived variable
    
    d_q10Settings_q10                      : derived variable
    
    d_rateScale                            : derived variable
    
    d_alpha (kHz)                          : derived variable
    
    d_beta (kHz)                           : derived variable
    
    d_fcond                                : derived variable
    
    d_inf                                  : derived variable
    
    d_tau (ms)                             : derived variable
    
    conductanceScale                       : derived variable
    
    fopen0                                 : derived variable
    
    fopen                                  : derived variable
    
    g (uS)                                 : derived variable
    rate_c_q (/ms)
    rate_d_q (/ms)
    
}

STATE {
    c_q  
    d_q  
    
}

INITIAL {
    eca = 170.69
    
    temperature = celsius + 273.15
    
    rates()
    rates() ? To ensure correct initialisation.
    
    c_q = c_inf
    
    d_q = d_inf
    
}

BREAKPOINT {
    
    SOLVE states METHOD cnexp
    
    ? DerivedVariable is based on path: conductanceScaling[*]/factor, on: Component(id=CavN type=ionChannelHH), from conductanceScaling; null
    ? Path not present in component, using factor: 1
    
    conductanceScale = 1 
    
    ? DerivedVariable is based on path: gates[*]/fcond, on: Component(id=CavN type=ionChannelHH), from gates; Component(id=c type=gateHHrates)
    ? multiply applied to all instances of fcond in: <gates> ([Component(id=c type=gateHHrates), Component(id=d type=gateHHrates)]))
    fopen0 = c_fcond * d_fcond ? path based, prefix = 
    
    fopen = conductanceScale  *  fopen0 ? evaluable
    g = conductance  *  fopen ? evaluable
    gion = gmax * fopen 
    
    ica = gion * (v - eca)
    
}

DERIVATIVE states {
    rates()
    c_q' = rate_c_q 
    d_q' = rate_d_q 
    
}

PROCEDURE rates() {
    
    c_forwardRate_x = (v -  c_forwardRate_midpoint ) /  c_forwardRate_scale ? evaluable
    if (c_forwardRate_x  != 0)  { 
        c_forwardRate_r = c_forwardRate_rate  *  c_forwardRate_x  / (1 - exp(0 -  c_forwardRate_x )) ? evaluable cdv
    } else if (c_forwardRate_x  == 0)  { 
        c_forwardRate_r = c_forwardRate_rate ? evaluable cdv
    }
    
    c_reverseRate_r = c_reverseRate_rate  * exp((v -  c_reverseRate_midpoint )/ c_reverseRate_scale ) ? evaluable
    c_q10Settings_q10 = c_q10Settings_q10Factor ^((temperature -  c_q10Settings_experimentalTemp )/ c_q10Settings_TENDEGREES ) ? evaluable
    ? DerivedVariable is based on path: q10Settings[*]/q10, on: Component(id=c type=gateHHrates), from q10Settings; Component(id=null type=q10ExpTemp)
    ? multiply applied to all instances of q10 in: <q10Settings> ([Component(id=null type=q10ExpTemp)]))
    c_rateScale = c_q10Settings_q10 ? path based, prefix = c_
    
    ? DerivedVariable is based on path: forwardRate/r, on: Component(id=c type=gateHHrates), from forwardRate; Component(id=null type=HHExpLinearRate)
    c_alpha = c_forwardRate_r ? path based, prefix = c_
    
    ? DerivedVariable is based on path: reverseRate/r, on: Component(id=c type=gateHHrates), from reverseRate; Component(id=null type=HHExpRate)
    c_beta = c_reverseRate_r ? path based, prefix = c_
    
    c_fcond = c_q ^ c_instances ? evaluable
    c_inf = c_alpha /( c_alpha + c_beta ) ? evaluable
    c_tau = 1/(( c_alpha + c_beta ) *  c_rateScale ) ? evaluable
    d_forwardRate_r = d_forwardRate_rate  * exp((v -  d_forwardRate_midpoint )/ d_forwardRate_scale ) ? evaluable
    d_reverseRate_r = d_reverseRate_rate  / (1 + exp(0 - (v -  d_reverseRate_midpoint )/ d_reverseRate_scale )) ? evaluable
    d_q10Settings_q10 = d_q10Settings_q10Factor ^((temperature -  d_q10Settings_experimentalTemp )/ d_q10Settings_TENDEGREES ) ? evaluable
    ? DerivedVariable is based on path: q10Settings[*]/q10, on: Component(id=d type=gateHHrates), from q10Settings; Component(id=null type=q10ExpTemp)
    ? multiply applied to all instances of q10 in: <q10Settings> ([Component(id=null type=q10ExpTemp)]))
    d_rateScale = d_q10Settings_q10 ? path based, prefix = d_
    
    ? DerivedVariable is based on path: forwardRate/r, on: Component(id=d type=gateHHrates), from forwardRate; Component(id=null type=HHExpRate)
    d_alpha = d_forwardRate_r ? path based, prefix = d_
    
    ? DerivedVariable is based on path: reverseRate/r, on: Component(id=d type=gateHHrates), from reverseRate; Component(id=null type=HHSigmoidRate)
    d_beta = d_reverseRate_r ? path based, prefix = d_
    
    d_fcond = d_q ^ d_instances ? evaluable
    d_inf = d_alpha /( d_alpha + d_beta ) ? evaluable
    d_tau = 1/(( d_alpha + d_beta ) *  d_rateScale ) ? evaluable
    
     
    rate_c_q = ( c_inf  -  c_q ) /  c_tau ? Note units of all quantities used here need to be consistent!
    
     
    
     
    
     
    
     
    rate_d_q = ( d_inf  -  d_q ) /  d_tau ? Note units of all quantities used here need to be consistent!
    
     
    
     
    
     
    
     
    
}

