// Cell: bAC217_L4_BP_a8b6abe396_0_0
/*
{
  "id" : "bAC217_L4_BP_a8b6abe396_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-3.08452, 6.27464, 0.312461, 1.46623", "-2.79927, 5.64032, 0.287115, 2.64844", "-2.51401, 5.00599, 0.26177, 4.10361", "-2.22875, 4.37167, 0.236425, 4.91598", "-1.94349, 3.73735, 0.21108, 5.72835", "-1.65823, 3.10303, 0.185734, 6.53421", "-1.37297, 2.46871, 0.160389, 7.31212", "-1.08771, 1.83438, 0.135044, 8.08989", "-0.802456, 1.20006, 0.109699, 8.85679", "-0.517198, 0.56574, 0.0843534, 8.93483", "-0.23194, -0.0685822, 0.0590082, 8.92633", "0.0533189, -0.702904, 0.033663, 8.91784", "0.338577, -1.33723, 0.00831775, 8.90934", "0.623836, -1.97155, -0.0170275, 8.90084", "0.909094, -2.60587, -0.0423727, 8.82493", "1.19435, -3.24019, -0.067718, 7.82232", "1.47961, -3.87451, -0.0930632, 6.5965", "1.76487, -4.50884, -0.118408, 5.37067", "2.05013, -5.14316, -0.143754, 4.14485", "2.33539, -5.77748, -0.169099, 2.91903", "2.62064, -6.4118, -0.194444, 1.76337" ]
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "1.61629, -6.03981, -1.26548, 1.33", "2.46894, -9.83802, -1.94914, 1.33", "3.88262, -16.1353, -3.08263, 0.66", "4.97713, -21.0108, -3.96021, 0.66", "6.14342, -26.2062, -4.89536, 1.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500001318721313
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "2.62064, -6.4118, -0.194444, 0.33", "8.77276, -20.0921, -0.194444, 0.33", "14.9249, -33.7725, -0.194444, 0.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "6.14342, -26.2062, -4.89536, 0.66", "6.29343, -39.8093, -1.92227, 0.66", "6.49545, -60.0149, 2.51742, 0.66", "6.72175, -84.683, 8.12149, 0.66", "6.97284, -103.722, 12.4749, 0.66", "7.13277, -114.769, 14.9933, 0.66", "7.17344, -118.435, 15.8213, 0.66", "7.24276, -123.409, 16.9801, 0.66", "7.22907, -128.061, 18.0907, 0.66", "7.21732, -133.427, 19.2778, 0.66", "7.24612, -136.32, 19.5741, 0.66", "7.26304, -139.924, 19.6259, 0.66", "7.3721, -145.35, 19.1073, 0.66", "7.49507, -152.477, 18.0942, 0.66", "7.6087, -155.582, 17.6312, 0.66", "8.26109, -170.156, 15.3363, 0.66", "8.49854, -173.595, 14.746, 0.66", "9.43702, -184.216, 12.6823, 0.66", "9.88347, -188.7, 11.7781, 0.66", "10.835, -196.939, 10.23, 0.66", "11.3681, -201.665, 9.6426, 0.66", "11.8648, -206.272, 9.51827, 0.66", "12.3365, -210.721, 9.55036, 0.66", "12.6323, -215.009, 9.58033, 0.66", "12.89, -219.547, 9.43689, 0.66", "13.0569, -226.554, 9.10041, 0.66", "13.1869, -230.818, 9.09027, 0.66", "13.2699, -235.99, 9.14394, 0.66", "13.3623, -242.991, 9.18252, 0.66", "13.3947, -247.456, 9.00512, 0.66", "13.4926, -253.458, 8.51527, 0.66", "13.7603, -259.113, 8.01759, 0.66" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "6.14342, -26.2062, -4.89536, 0.66", "8.99889, -28.7342, -4.71737, 0.66", "15.5634, -34.5459, -4.30818, 0.33", "30.5898, -47.8491, -3.37153, 0.33", "31.1567, -48.351, -3.33619, 0.66", "37.2206, -53.7195, -2.95821, 0.33" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "14.9249, -33.7725, -0.194444, 0.33", "21.077, -47.4528, -0.194444, 0.33", "27.2291, -61.1331, -0.194444, 0.33" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "13.7603, -259.113, 8.01759, 0.66", "16.2106, -262.221, 9.50987, 0.66", "17.4942, -263.996, 10.5986, 0.66", "19.2865, -266.752, 13.0422, 0.66", "20.3589, -268.404, 14.7605, 0.66", "22.3208, -271.447, 18.2668, 0.66", "23.8318, -273.665, 20.9542, 0.66", "25.2229, -275.694, 23.7452, 0.66", "28.2626, -279.626, 29.7301, 0.66", "30.019, -281.683, 33.1212, 0.66", "32.0495, -284.064, 37.139, 0.33", "32.8972, -284.997, 38.6909, 0.33", "33.2144, -285.292, 39.2062, 0.66", "35.2308, -286.85, 42.1045, 0.33", "35.7413, -287.141, 42.5524, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "13.7603, -259.113, 8.01759, 0.66", "14.1116, -262.913, 9.14855, 0.66", "14.5554, -267.824, 10.633, 0.66", "15.5977, -277.645, 13.481, 0.66", "16.0169, -281.924, 14.6717, 0.66", "16.6021, -287.133, 16.1678, 0.66", "17.1648, -292.423, 17.5372, 0.66", "17.4838, -295.396, 18.2155, 0.66", "17.8046, -299.508, 18.979, 0.66", "18.3802, -307.411, 20.1569, 0.66", "18.7213, -311.901, 20.6285, 0.66", "19.0839, -317.166, 21.0967, 0.66", "19.301, -321.618, 21.2155, 0.66", "19.3595, -324.031, 21.2497, 0.66", "19.4299, -332.14, 21.2373, 0.66", "19.458, -336.335, 21.1064, 0.66", "19.4034, -342.148, 20.8699, 0.66", "19.4576, -346.807, 20.8672, 0.66", "19.4838, -348.875, 20.844, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "19.4838, -348.875, 20.844, 0.66", "19.8716, -351.972, 21.0732, 0.66", "20.2372, -357.008, 21.9239, 0.66", "20.5427, -362.384, 22.9888, 0.66", "20.654, -365.912, 23.7057, 0.66", "20.7843, -370.787, 24.5914, 0.66", "20.9017, -379.408, 25.8927, 0.66", "20.8388, -385.304, 26.6727, 0.66", "20.7256, -389.35, 27.2455, 0.66", "20.6486, -393.581, 27.7431, 0.66", "20.6051, -398.326, 28.2547, 0.66", "20.613, -401.572, 28.5736, 0.66", "20.743, -406.028, 28.902, 0.66", "20.9503, -410.124, 29.1862, 0.66", "21.4413, -419.76, 30.069, 0.66", "21.6989, -423.591, 30.4863, 0.66", "22.2553, -433.208, 31.4585, 0.66", "22.451, -437.084, 31.7184, 0.66", "22.5933, -440.817, 31.8347, 0.66", "22.7, -444.173, 31.8057, 0.66", "22.8064, -449.67, 31.6879, 0.66", "22.8358, -454.372, 31.5346, 0.66", "22.8572, -463.407, 30.9341, 0.66", "22.9656, -467.97, 30.6471, 0.66", "23.0708, -471.523, 30.4439, 0.66", "23.2567, -476.302, 30.2046, 0.66", "23.9862, -494.285, 29.2679, 0.66", "24.349, -500.89, 28.8216, 0.66", "25.3894, -518.226, 27.4277, 0.66", "25.8106, -524.776, 26.8231, 0.66", "26.2519, -531.221, 26.2764, 0.66", "26.5949, -535.704, 25.9272, 0.66", "27.1361, -541.839, 25.4226, 0.66", "27.6088, -548.665, 24.8755, 0.66", "28.0792, -556.102, 24.0133, 0.66", "28.3149, -560.258, 23.5374, 0.66", "28.4779, -563.157, 23.2881, 0.66", "29.0363, -574.407, 22.9199, 0.66", "29.2065, -577.914, 22.8145, 0.66", "29.438, -583.667, 22.3944, 0.66", "29.6879, -589.416, 21.888, 0.66", "29.9531, -593.872, 21.5409, 0.66", "30.6723, -604.786, 21.1214, 0.66", "31.6283, -617.324, 20.9605, 0.66", "32.3375, -625.858, 20.8155, 0.66", "32.6891, -630.146, 20.664, 0.66", "34.0308, -645.831, 19.8232, 0.66", "34.7846, -655.889, 18.9066, 0.66", "35.0104, -658.827, 18.5812, 0.66", "35.4048, -663.587, 17.9496, 0.66", "35.9973, -670.561, 16.8206, 0.66", "36.1985, -673.572, 16.2212, 0.66", "36.6334, -681.628, 14.2788, 0.66", "37.6369, -698.425, 9.97411, 0.66", "38.1919, -707.096, 8.02483, 0.66", "38.4311, -710.336, 7.41067, 0.33", "38.6176, -712.501, 7.08051, 1.33", "39.1918, -717.642, 6.60763, 0.66", "40.1131, -723.852, 6.42673, 0.66", "40.8615, -728.263, 6.44104, 0.66", "41.6744, -732.731, 6.59603, 0.66", "42.4281, -736.385, 6.71197, 0.66", "45.5611, -751.408, 7.57426, 0.66", "45.9862, -753.528, 7.74744, 0.33", "46.5369, -756.557, 7.98422, 1.33", "47.0742, -759.563, 8.15335, 0.66", "47.4663, -761.924, 8.27491, 0.33", "48.4751, -768.445, 8.63876, 0.66", "48.7193, -771.822, 9.12868, 0.66", "48.9246, -776.287, 9.97501, 0.33" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 21
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "19.4838, -348.875, 20.844, 0.66", "16.8605, -356.786, 19.9747, 0.66", "14.7233, -363.501, 19.1708, 0.66", "13.204, -368.551, 18.9118, 0.33", "11.076, -375.664, 18.8153, 0.33", "10.7166, -376.827, 18.8549, 0.66", "9.59895, -380.605, 19.0857, 0.33", "8.81286, -383.364, 19.4177, 0.66", "7.1836, -389.897, 20.0705, 0.33", "6.939, -390.931, 20.2062, 0.66", "5.27738, -397.931, 21.1033, 0.33", "4.54982, -401.561, 21.7209, 0.33", "3.90577, -405.509, 22.5189, 0.66", "3.22103, -410.239, 23.616, 0.33", "2.93789, -412.792, 24.1811, 0.33", "2.85256, -414.226, 24.5851, 0.66", "2.80485, -420.271, 27.2048, 0.33", "2.78443, -421.154, 27.7008, 0.66", "2.78036, -423.386, 29.1769, 0.33", "2.75389, -424.533, 29.9542, 0.33", "2.71026, -425.746, 30.6507, 0.66", "2.43161, -430.284, 32.7645, 0.33", "2.1386, -433.052, 33.5868, 0.33", "2.05386, -434.096, 33.8332, 0.66", "1.97038, -436.12, 34.1547, 0.33", "1.92807, -437.192, 34.2537, 0.66", "1.87931, -438.551, 34.3013, 0.33", "1.83685, -439.957, 34.2521, 0.66", "1.73582, -442.019, 34.21, 0.33", "1.68207, -442.771, 34.207, 0.66", "1.11449, -449.006, 34.3015, 0.33", "1.06955, -449.405, 34.3077, 0.66", "0.86027, -450.839, 34.3304, 0.33", "0.73093, -451.586, 34.3419, 0.66", "0.405561, -453.626, 34.5759, 0.33", "0.273748, -454.562, 34.7474, 0.66", "0.0857046, -456.236, 35.1402, 0.33", "-0.0315884, -457.422, 35.437, 0.66", "-0.132702, -458.781, 35.8179, 0.33", "-0.534415, -465.108, 37.8048, 0.33", "-0.629638, -466.956, 38.4787, 0.66" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "48.9246, -776.287, 9.97501, 0.66", "49.6179, -780.64, 9.01293, 0.66", "50.0329, -782.906, 9.02541, 1.33", "50.3748, -784.858, 9.19954, 0.66", "50.7499, -787.311, 9.35738, 0.66", "51.563, -792.602, 9.94059, 0.33", "52.6089, -799.004, 10.799, 0.66", "53.9824, -807.282, 12.4088, 0.66", "54.7383, -811.407, 13.3554, 0.66", "55.669, -815.999, 14.2999, 0.33", "56.8879, -821.87, 15.2788, 0.33", "57.2043, -823.527, 15.4418, 0.66", "57.5118, -824.895, 15.3273, 0.33", "57.7602, -826.074, 15.0489, 0.66", "59.2377, -832.945, 13.115, 0.33", "59.8878, -835.813, 12.3029, 0.66", "60.4681, -838.53, 11.4385, 0.33", "61.9733, -846.259, 9.32136, 0.33", "62.8805, -850.791, 8.26207, 0.66", "64.5471, -859.007, 6.65627, 0.33", "65.3098, -862.887, 6.09714, 0.66", "66.0743, -866.719, 5.63533, 1.33", "67.8284, -875.477, 4.92403, 0.33", "68.6479, -879.82, 4.84149, 0.33", "68.9639, -881.529, 4.85096, 0.66", "69.6828, -885.842, 5.03252, 0.33", "70.5755, -891.632, 5.3753, 0.33", "70.9174, -893.748, 5.56466, 1.33", "71.8674, -899.825, 6.10706, 0.33", "72.1093, -901.933, 6.32114, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "48.9246, -776.287, 9.97501, 0.66", "47.5146, -778.204, 8.165, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "72.1093, -901.933, 6.32114, 0.66", "70.0293, -901.615, 6.32114, 0.66" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "72.1093, -901.933, 6.32114, 0.66", "72.3948, -903.592, 6.12563, 0.66", "73.6662, -910.982, 5.25508, 0.33", "74.0706, -913.332, 4.97818, 1.33" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "74.0706, -913.332, 4.97818, 0.33", "78.7114, -924.636, 12.3933, 0.33", "79.1701, -925.733, 13.0354, 1.33", "80.5194, -928.798, 14.6702, 0.33", "80.8217, -929.433, 14.9339, 0.66", "82.3699, -932.449, 15.9107, 0.33", "82.8397, -933.365, 16.2072, 0.66", "83.2991, -934.189, 16.0974, 0.33", "83.9467, -935.215, 15.9227, 0.66", "86.3887, -938.408, 15.1395, 0.33", "87.3711, -939.561, 14.7869, 1.33" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "74.0706, -913.332, 4.97818, 0.33", "73.3677, -927.34, 8.59913, 0.33", "72.9844, -934.98, 10.5739, 0.33", "72.9242, -936.18, 10.8843, 0.66", "72.5285, -944.065, 12.9225, 0.33", "72.4758, -945.116, 13.1942, 0.66" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_11", "dend_8", "dend_8", "dend_8", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.418459",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.026008999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.025854",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.19695699",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "2.0E-6",
    "erev" : "-60.2509"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.9899996E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.008343",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.026899999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.502333",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.653374",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "5.6999997E-5",
    "erev" : "-76.49812"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "7.84E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.30005398",
    "erev" : "50.0"
  }, {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.002256",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.38E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.005574",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "7.92E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bAC217_L4_BP_a8b6abe396_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_12, id: dend_12, parent: dend_2
create dend_12
public dend_12
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_5, id: dend_5, parent: dend_3
create dend_5
public dend_5
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_11, id: dend_11, parent: dend_7
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_16
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_0(0), soma_0(0.4500001318721313)
    connect axon_0(0), soma_0(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_12(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_5(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_11(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -3.08452, 6.27464, 0.312461, 1.46623 ) }
    soma_0 { pt3dadd( -2.79927, 5.64032, 0.287115, 2.64844 ) }
    soma_0 { pt3dadd( -2.51401, 5.00599, 0.26177, 4.10361 ) }
    soma_0 { pt3dadd( -2.22875, 4.37167, 0.236425, 4.91598 ) }
    soma_0 { pt3dadd( -1.94349, 3.73735, 0.21108, 5.72835 ) }
    soma_0 { pt3dadd( -1.65823, 3.10303, 0.185734, 6.53421 ) }
    soma_0 { pt3dadd( -1.37297, 2.46871, 0.160389, 7.31212 ) }
    soma_0 { pt3dadd( -1.08771, 1.83438, 0.135044, 8.08989 ) }
    soma_0 { pt3dadd( -0.802456, 1.20006, 0.109699, 8.85679 ) }
    soma_0 { pt3dadd( -0.517198, 0.56574, 0.0843534, 8.93483 ) }
    soma_0 { pt3dadd( -0.23194, -0.0685822, 0.0590082, 8.92633 ) }
    soma_0 { pt3dadd( 0.0533189, -0.702904, 0.033663, 8.91784 ) }
    soma_0 { pt3dadd( 0.338577, -1.33723, 0.00831775, 8.90934 ) }
    soma_0 { pt3dadd( 0.623836, -1.97155, -0.0170275, 8.90084 ) }
    soma_0 { pt3dadd( 0.909094, -2.60587, -0.0423727, 8.82493 ) }
    soma_0 { pt3dadd( 1.19435, -3.24019, -0.067718, 7.82232 ) }
    soma_0 { pt3dadd( 1.47961, -3.87451, -0.0930632, 6.5965 ) }
    soma_0 { pt3dadd( 1.76487, -4.50884, -0.118408, 5.37067 ) }
    soma_0 { pt3dadd( 2.05013, -5.14316, -0.143754, 4.14485 ) }
    soma_0 { pt3dadd( 2.33539, -5.77748, -0.169099, 2.91903 ) }
    soma_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 1.76337 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 21/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 1.61629, -6.03981, -1.26548, 1.33 ) }
    dend_0 { pt3dadd( 2.46894, -9.83802, -1.94914, 1.33 ) }
    dend_0 { pt3dadd( 3.88262, -16.1353, -3.08263, 0.66 ) }
    dend_0 { pt3dadd( 4.97713, -21.0108, -3.96021, 0.66 ) }
    dend_0 { pt3dadd( 6.14342, -26.2062, -4.89536, 1.33 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 26/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 8.77276, -20.0921, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 29/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 6.14342, -26.2062, -4.89536, 0.66 ) }
    dend_2 { pt3dadd( 6.29343, -39.8093, -1.92227, 0.66 ) }
    dend_2 { pt3dadd( 6.49545, -60.0149, 2.51742, 0.66 ) }
    dend_2 { pt3dadd( 6.72175, -84.683, 8.12149, 0.66 ) }
    dend_2 { pt3dadd( 6.97284, -103.722, 12.4749, 0.66 ) }
    dend_2 { pt3dadd( 7.13277, -114.769, 14.9933, 0.66 ) }
    dend_2 { pt3dadd( 7.17344, -118.435, 15.8213, 0.66 ) }
    dend_2 { pt3dadd( 7.24276, -123.409, 16.9801, 0.66 ) }
    dend_2 { pt3dadd( 7.22907, -128.061, 18.0907, 0.66 ) }
    dend_2 { pt3dadd( 7.21732, -133.427, 19.2778, 0.66 ) }
    dend_2 { pt3dadd( 7.24612, -136.32, 19.5741, 0.66 ) }
    dend_2 { pt3dadd( 7.26304, -139.924, 19.6259, 0.66 ) }
    dend_2 { pt3dadd( 7.3721, -145.35, 19.1073, 0.66 ) }
    dend_2 { pt3dadd( 7.49507, -152.477, 18.0942, 0.66 ) }
    dend_2 { pt3dadd( 7.6087, -155.582, 17.6312, 0.66 ) }
    dend_2 { pt3dadd( 8.26109, -170.156, 15.3363, 0.66 ) }
    dend_2 { pt3dadd( 8.49854, -173.595, 14.746, 0.66 ) }
    dend_2 { pt3dadd( 9.43702, -184.216, 12.6823, 0.66 ) }
    dend_2 { pt3dadd( 9.88347, -188.7, 11.7781, 0.66 ) }
    dend_2 { pt3dadd( 10.835, -196.939, 10.23, 0.66 ) }
    dend_2 { pt3dadd( 11.3681, -201.665, 9.6426, 0.66 ) }
    dend_2 { pt3dadd( 11.8648, -206.272, 9.51827, 0.66 ) }
    dend_2 { pt3dadd( 12.3365, -210.721, 9.55036, 0.66 ) }
    dend_2 { pt3dadd( 12.6323, -215.009, 9.58033, 0.66 ) }
    dend_2 { pt3dadd( 12.89, -219.547, 9.43689, 0.66 ) }
    dend_2 { pt3dadd( 13.0569, -226.554, 9.10041, 0.66 ) }
    dend_2 { pt3dadd( 13.1869, -230.818, 9.09027, 0.66 ) }
    dend_2 { pt3dadd( 13.2699, -235.99, 9.14394, 0.66 ) }
    dend_2 { pt3dadd( 13.3623, -242.991, 9.18252, 0.66 ) }
    dend_2 { pt3dadd( 13.3947, -247.456, 9.00512, 0.66 ) }
    dend_2 { pt3dadd( 13.4926, -253.458, 8.51527, 0.66 ) }
    dend_2 { pt3dadd( 13.7603, -259.113, 8.01759, 0.66 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 61/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 6.14342, -26.2062, -4.89536, 0.66 ) }
    dend_1 { pt3dadd( 8.99889, -28.7342, -4.71737, 0.66 ) }
    dend_1 { pt3dadd( 15.5634, -34.5459, -4.30818, 0.33 ) }
    dend_1 { pt3dadd( 30.5898, -47.8491, -3.37153, 0.33 ) }
    dend_1 { pt3dadd( 31.1567, -48.351, -3.33619, 0.66 ) }
    dend_1 { pt3dadd( 37.2206, -53.7195, -2.95821, 0.33 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 67/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 21.077, -47.4528, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 27.2291, -61.1331, -0.194444, 0.33 ) }
    // Section: dend_12, id: dend_12, parent: dend_2 (entry count 70/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 13.7603, -259.113, 8.01759, 0.66 ) }
    dend_12 { pt3dadd( 16.2106, -262.221, 9.50987, 0.66 ) }
    dend_12 { pt3dadd( 17.4942, -263.996, 10.5986, 0.66 ) }
    dend_12 { pt3dadd( 19.2865, -266.752, 13.0422, 0.66 ) }
    dend_12 { pt3dadd( 20.3589, -268.404, 14.7605, 0.66 ) }
    dend_12 { pt3dadd( 22.3208, -271.447, 18.2668, 0.66 ) }
    dend_12 { pt3dadd( 23.8318, -273.665, 20.9542, 0.66 ) }
    dend_12 { pt3dadd( 25.2229, -275.694, 23.7452, 0.66 ) }
    dend_12 { pt3dadd( 28.2626, -279.626, 29.7301, 0.66 ) }
    dend_12 { pt3dadd( 30.019, -281.683, 33.1212, 0.66 ) }
    dend_12 { pt3dadd( 32.0495, -284.064, 37.139, 0.33 ) }
    dend_12 { pt3dadd( 32.8972, -284.997, 38.6909, 0.33 ) }
    dend_12 { pt3dadd( 33.2144, -285.292, 39.2062, 0.66 ) }
    dend_12 { pt3dadd( 35.2308, -286.85, 42.1045, 0.33 ) }
    dend_12 { pt3dadd( 35.7413, -287.141, 42.5524, 0.66 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 85/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 13.7603, -259.113, 8.01759, 0.66 ) }
    dend_3 { pt3dadd( 14.1116, -262.913, 9.14855, 0.66 ) }
    dend_3 { pt3dadd( 14.5554, -267.824, 10.633, 0.66 ) }
    dend_3 { pt3dadd( 15.5977, -277.645, 13.481, 0.66 ) }
    dend_3 { pt3dadd( 16.0169, -281.924, 14.6717, 0.66 ) }
    dend_3 { pt3dadd( 16.6021, -287.133, 16.1678, 0.66 ) }
    dend_3 { pt3dadd( 17.1648, -292.423, 17.5372, 0.66 ) }
    dend_3 { pt3dadd( 17.4838, -295.396, 18.2155, 0.66 ) }
    dend_3 { pt3dadd( 17.8046, -299.508, 18.979, 0.66 ) }
    dend_3 { pt3dadd( 18.3802, -307.411, 20.1569, 0.66 ) }
    dend_3 { pt3dadd( 18.7213, -311.901, 20.6285, 0.66 ) }
    dend_3 { pt3dadd( 19.0839, -317.166, 21.0967, 0.66 ) }
    dend_3 { pt3dadd( 19.301, -321.618, 21.2155, 0.66 ) }
    dend_3 { pt3dadd( 19.3595, -324.031, 21.2497, 0.66 ) }
    dend_3 { pt3dadd( 19.4299, -332.14, 21.2373, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_3 { pt3dadd( 19.458, -336.335, 21.1064, 0.66 ) }
    dend_3 { pt3dadd( 19.4034, -342.148, 20.8699, 0.66 ) }
    dend_3 { pt3dadd( 19.4576, -346.807, 20.8672, 0.66 ) }
    dend_3 { pt3dadd( 19.4838, -348.875, 20.844, 0.66 ) }
    // Section: dend_5, id: dend_5, parent: dend_3 (entry count 4/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 19.4838, -348.875, 20.844, 0.66 ) }
    dend_5 { pt3dadd( 19.8716, -351.972, 21.0732, 0.66 ) }
    dend_5 { pt3dadd( 20.2372, -357.008, 21.9239, 0.66 ) }
    dend_5 { pt3dadd( 20.5427, -362.384, 22.9888, 0.66 ) }
    dend_5 { pt3dadd( 20.654, -365.912, 23.7057, 0.66 ) }
    dend_5 { pt3dadd( 20.7843, -370.787, 24.5914, 0.66 ) }
    dend_5 { pt3dadd( 20.9017, -379.408, 25.8927, 0.66 ) }
    dend_5 { pt3dadd( 20.8388, -385.304, 26.6727, 0.66 ) }
    dend_5 { pt3dadd( 20.7256, -389.35, 27.2455, 0.66 ) }
    dend_5 { pt3dadd( 20.6486, -393.581, 27.7431, 0.66 ) }
    dend_5 { pt3dadd( 20.6051, -398.326, 28.2547, 0.66 ) }
    dend_5 { pt3dadd( 20.613, -401.572, 28.5736, 0.66 ) }
    dend_5 { pt3dadd( 20.743, -406.028, 28.902, 0.66 ) }
    dend_5 { pt3dadd( 20.9503, -410.124, 29.1862, 0.66 ) }
    dend_5 { pt3dadd( 21.4413, -419.76, 30.069, 0.66 ) }
    dend_5 { pt3dadd( 21.6989, -423.591, 30.4863, 0.66 ) }
    dend_5 { pt3dadd( 22.2553, -433.208, 31.4585, 0.66 ) }
    dend_5 { pt3dadd( 22.451, -437.084, 31.7184, 0.66 ) }
    dend_5 { pt3dadd( 22.5933, -440.817, 31.8347, 0.66 ) }
    dend_5 { pt3dadd( 22.7, -444.173, 31.8057, 0.66 ) }
    dend_5 { pt3dadd( 22.8064, -449.67, 31.6879, 0.66 ) }
    dend_5 { pt3dadd( 22.8358, -454.372, 31.5346, 0.66 ) }
    dend_5 { pt3dadd( 22.8572, -463.407, 30.9341, 0.66 ) }
    dend_5 { pt3dadd( 22.9656, -467.97, 30.6471, 0.66 ) }
    dend_5 { pt3dadd( 23.0708, -471.523, 30.4439, 0.66 ) }
    dend_5 { pt3dadd( 23.2567, -476.302, 30.2046, 0.66 ) }
    dend_5 { pt3dadd( 23.9862, -494.285, 29.2679, 0.66 ) }
    dend_5 { pt3dadd( 24.349, -500.89, 28.8216, 0.66 ) }
    dend_5 { pt3dadd( 25.3894, -518.226, 27.4277, 0.66 ) }
    dend_5 { pt3dadd( 25.8106, -524.776, 26.8231, 0.66 ) }
    dend_5 { pt3dadd( 26.2519, -531.221, 26.2764, 0.66 ) }
    dend_5 { pt3dadd( 26.5949, -535.704, 25.9272, 0.66 ) }
    dend_5 { pt3dadd( 27.1361, -541.839, 25.4226, 0.66 ) }
    dend_5 { pt3dadd( 27.6088, -548.665, 24.8755, 0.66 ) }
    dend_5 { pt3dadd( 28.0792, -556.102, 24.0133, 0.66 ) }
    dend_5 { pt3dadd( 28.3149, -560.258, 23.5374, 0.66 ) }
    dend_5 { pt3dadd( 28.4779, -563.157, 23.2881, 0.66 ) }
    dend_5 { pt3dadd( 29.0363, -574.407, 22.9199, 0.66 ) }
    dend_5 { pt3dadd( 29.2065, -577.914, 22.8145, 0.66 ) }
    dend_5 { pt3dadd( 29.438, -583.667, 22.3944, 0.66 ) }
    dend_5 { pt3dadd( 29.6879, -589.416, 21.888, 0.66 ) }
    dend_5 { pt3dadd( 29.9531, -593.872, 21.5409, 0.66 ) }
    dend_5 { pt3dadd( 30.6723, -604.786, 21.1214, 0.66 ) }
    dend_5 { pt3dadd( 31.6283, -617.324, 20.9605, 0.66 ) }
    dend_5 { pt3dadd( 32.3375, -625.858, 20.8155, 0.66 ) }
    dend_5 { pt3dadd( 32.6891, -630.146, 20.664, 0.66 ) }
    dend_5 { pt3dadd( 34.0308, -645.831, 19.8232, 0.66 ) }
    dend_5 { pt3dadd( 34.7846, -655.889, 18.9066, 0.66 ) }
    dend_5 { pt3dadd( 35.0104, -658.827, 18.5812, 0.66 ) }
    dend_5 { pt3dadd( 35.4048, -663.587, 17.9496, 0.66 ) }
    dend_5 { pt3dadd( 35.9973, -670.561, 16.8206, 0.66 ) }
    dend_5 { pt3dadd( 36.1985, -673.572, 16.2212, 0.66 ) }
    dend_5 { pt3dadd( 36.6334, -681.628, 14.2788, 0.66 ) }
    dend_5 { pt3dadd( 37.6369, -698.425, 9.97411, 0.66 ) }
    dend_5 { pt3dadd( 38.1919, -707.096, 8.02483, 0.66 ) }
    dend_5 { pt3dadd( 38.4311, -710.336, 7.41067, 0.33 ) }
    dend_5 { pt3dadd( 38.6176, -712.501, 7.08051, 1.33 ) }
    dend_5 { pt3dadd( 39.1918, -717.642, 6.60763, 0.66 ) }
    dend_5 { pt3dadd( 40.1131, -723.852, 6.42673, 0.66 ) }
    dend_5 { pt3dadd( 40.8615, -728.263, 6.44104, 0.66 ) }
    dend_5 { pt3dadd( 41.6744, -732.731, 6.59603, 0.66 ) }
    dend_5 { pt3dadd( 42.4281, -736.385, 6.71197, 0.66 ) }
    dend_5 { pt3dadd( 45.5611, -751.408, 7.57426, 0.66 ) }
    dend_5 { pt3dadd( 45.9862, -753.528, 7.74744, 0.33 ) }
    dend_5 { pt3dadd( 46.5369, -756.557, 7.98422, 1.33 ) }
    dend_5 { pt3dadd( 47.0742, -759.563, 8.15335, 0.66 ) }
    dend_5 { pt3dadd( 47.4663, -761.924, 8.27491, 0.33 ) }
    dend_5 { pt3dadd( 48.4751, -768.445, 8.63876, 0.66 ) }
    dend_5 { pt3dadd( 48.7193, -771.822, 9.12868, 0.66 ) }
    dend_5 { pt3dadd( 48.9246, -776.287, 9.97501, 0.33 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 74/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 19.4838, -348.875, 20.844, 0.66 ) }
    dend_4 { pt3dadd( 16.8605, -356.786, 19.9747, 0.66 ) }
    dend_4 { pt3dadd( 14.7233, -363.501, 19.1708, 0.66 ) }
    dend_4 { pt3dadd( 13.204, -368.551, 18.9118, 0.33 ) }
    dend_4 { pt3dadd( 11.076, -375.664, 18.8153, 0.33 ) }
    dend_4 { pt3dadd( 10.7166, -376.827, 18.8549, 0.66 ) }
    dend_4 { pt3dadd( 9.59895, -380.605, 19.0857, 0.33 ) }
    dend_4 { pt3dadd( 8.81286, -383.364, 19.4177, 0.66 ) }
    dend_4 { pt3dadd( 7.1836, -389.897, 20.0705, 0.33 ) }
    dend_4 { pt3dadd( 6.939, -390.931, 20.2062, 0.66 ) }
    dend_4 { pt3dadd( 5.27738, -397.931, 21.1033, 0.33 ) }
    dend_4 { pt3dadd( 4.54982, -401.561, 21.7209, 0.33 ) }
    dend_4 { pt3dadd( 3.90577, -405.509, 22.5189, 0.66 ) }
    dend_4 { pt3dadd( 3.22103, -410.239, 23.616, 0.33 ) }
    dend_4 { pt3dadd( 2.93789, -412.792, 24.1811, 0.33 ) }
    dend_4 { pt3dadd( 2.85256, -414.226, 24.5851, 0.66 ) }
    dend_4 { pt3dadd( 2.80485, -420.271, 27.2048, 0.33 ) }
    dend_4 { pt3dadd( 2.78443, -421.154, 27.7008, 0.66 ) }
    dend_4 { pt3dadd( 2.78036, -423.386, 29.1769, 0.33 ) }
    dend_4 { pt3dadd( 2.75389, -424.533, 29.9542, 0.33 ) }
    dend_4 { pt3dadd( 2.71026, -425.746, 30.6507, 0.66 ) }
    dend_4 { pt3dadd( 2.43161, -430.284, 32.7645, 0.33 ) }
    dend_4 { pt3dadd( 2.1386, -433.052, 33.5868, 0.33 ) }
    dend_4 { pt3dadd( 2.05386, -434.096, 33.8332, 0.66 ) }
    dend_4 { pt3dadd( 1.97038, -436.12, 34.1547, 0.33 ) }
    dend_4 { pt3dadd( 1.92807, -437.192, 34.2537, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_4 { pt3dadd( 1.87931, -438.551, 34.3013, 0.33 ) }
    dend_4 { pt3dadd( 1.83685, -439.957, 34.2521, 0.66 ) }
    dend_4 { pt3dadd( 1.73582, -442.019, 34.21, 0.33 ) }
    dend_4 { pt3dadd( 1.68207, -442.771, 34.207, 0.66 ) }
    dend_4 { pt3dadd( 1.11449, -449.006, 34.3015, 0.33 ) }
    dend_4 { pt3dadd( 1.06955, -449.405, 34.3077, 0.66 ) }
    dend_4 { pt3dadd( 0.86027, -450.839, 34.3304, 0.33 ) }
    dend_4 { pt3dadd( 0.73093, -451.586, 34.3419, 0.66 ) }
    dend_4 { pt3dadd( 0.405561, -453.626, 34.5759, 0.33 ) }
    dend_4 { pt3dadd( 0.273748, -454.562, 34.7474, 0.66 ) }
    dend_4 { pt3dadd( 0.0857046, -456.236, 35.1402, 0.33 ) }
    dend_4 { pt3dadd( -0.0315884, -457.422, 35.437, 0.66 ) }
    dend_4 { pt3dadd( -0.132702, -458.781, 35.8179, 0.33 ) }
    dend_4 { pt3dadd( -0.534415, -465.108, 37.8048, 0.33 ) }
    dend_4 { pt3dadd( -0.629638, -466.956, 38.4787, 0.66 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 15/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 48.9246, -776.287, 9.97501, 0.66 ) }
    dend_7 { pt3dadd( 49.6179, -780.64, 9.01293, 0.66 ) }
    dend_7 { pt3dadd( 50.0329, -782.906, 9.02541, 1.33 ) }
    dend_7 { pt3dadd( 50.3748, -784.858, 9.19954, 0.66 ) }
    dend_7 { pt3dadd( 50.7499, -787.311, 9.35738, 0.66 ) }
    dend_7 { pt3dadd( 51.563, -792.602, 9.94059, 0.33 ) }
    dend_7 { pt3dadd( 52.6089, -799.004, 10.799, 0.66 ) }
    dend_7 { pt3dadd( 53.9824, -807.282, 12.4088, 0.66 ) }
    dend_7 { pt3dadd( 54.7383, -811.407, 13.3554, 0.66 ) }
    dend_7 { pt3dadd( 55.669, -815.999, 14.2999, 0.33 ) }
    dend_7 { pt3dadd( 56.8879, -821.87, 15.2788, 0.33 ) }
    dend_7 { pt3dadd( 57.2043, -823.527, 15.4418, 0.66 ) }
    dend_7 { pt3dadd( 57.5118, -824.895, 15.3273, 0.33 ) }
    dend_7 { pt3dadd( 57.7602, -826.074, 15.0489, 0.66 ) }
    dend_7 { pt3dadd( 59.2377, -832.945, 13.115, 0.33 ) }
    dend_7 { pt3dadd( 59.8878, -835.813, 12.3029, 0.66 ) }
    dend_7 { pt3dadd( 60.4681, -838.53, 11.4385, 0.33 ) }
    dend_7 { pt3dadd( 61.9733, -846.259, 9.32136, 0.33 ) }
    dend_7 { pt3dadd( 62.8805, -850.791, 8.26207, 0.66 ) }
    dend_7 { pt3dadd( 64.5471, -859.007, 6.65627, 0.33 ) }
    dend_7 { pt3dadd( 65.3098, -862.887, 6.09714, 0.66 ) }
    dend_7 { pt3dadd( 66.0743, -866.719, 5.63533, 1.33 ) }
    dend_7 { pt3dadd( 67.8284, -875.477, 4.92403, 0.33 ) }
    dend_7 { pt3dadd( 68.6479, -879.82, 4.84149, 0.33 ) }
    dend_7 { pt3dadd( 68.9639, -881.529, 4.85096, 0.66 ) }
    dend_7 { pt3dadd( 69.6828, -885.842, 5.03252, 0.33 ) }
    dend_7 { pt3dadd( 70.5755, -891.632, 5.3753, 0.33 ) }
    dend_7 { pt3dadd( 70.9174, -893.748, 5.56466, 1.33 ) }
    dend_7 { pt3dadd( 71.8674, -899.825, 6.10706, 0.33 ) }
    dend_7 { pt3dadd( 72.1093, -901.933, 6.32114, 0.66 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 45/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 48.9246, -776.287, 9.97501, 0.66 ) }
    dend_6 { pt3dadd( 47.5146, -778.204, 8.165, 0.66 ) }
    // Section: dend_11, id: dend_11, parent: dend_7 (entry count 47/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 72.1093, -901.933, 6.32114, 0.66 ) }
    dend_11 { pt3dadd( 70.0293, -901.615, 6.32114, 0.66 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 49/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 72.1093, -901.933, 6.32114, 0.66 ) }
    dend_8 { pt3dadd( 72.3948, -903.592, 6.12563, 0.66 ) }
    dend_8 { pt3dadd( 73.6662, -910.982, 5.25508, 0.33 ) }
    dend_8 { pt3dadd( 74.0706, -913.332, 4.97818, 1.33 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 53/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 74.0706, -913.332, 4.97818, 0.33 ) }
    dend_10 { pt3dadd( 78.7114, -924.636, 12.3933, 0.33 ) }
    dend_10 { pt3dadd( 79.1701, -925.733, 13.0354, 1.33 ) }
    dend_10 { pt3dadd( 80.5194, -928.798, 14.6702, 0.33 ) }
    dend_10 { pt3dadd( 80.8217, -929.433, 14.9339, 0.66 ) }
    dend_10 { pt3dadd( 82.3699, -932.449, 15.9107, 0.33 ) }
    dend_10 { pt3dadd( 82.8397, -933.365, 16.2072, 0.66 ) }
    dend_10 { pt3dadd( 83.2991, -934.189, 16.0974, 0.33 ) }
    dend_10 { pt3dadd( 83.9467, -935.215, 15.9227, 0.66 ) }
    dend_10 { pt3dadd( 86.3887, -938.408, 15.1395, 0.33 ) }
    dend_10 { pt3dadd( 87.3711, -939.561, 14.7869, 1.33 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 64/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 74.0706, -913.332, 4.97818, 0.33 ) }
    dend_9 { pt3dadd( 73.3677, -927.34, 8.59913, 0.33 ) }
    dend_9 { pt3dadd( 72.9844, -934.98, 10.5739, 0.33 ) }
    dend_9 { pt3dadd( 72.9242, -936.18, 10.8843, 0.66 ) }
    dend_9 { pt3dadd( 72.5285, -944.065, 12.9225, 0.33 ) }
    dend_9 { pt3dadd( 72.4758, -945.116, 13.1942, 0.66 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_2 = new SectionList()
    dend_0 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_2 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_1 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_12 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_3 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_5 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_4 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_7 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_0 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_6 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_11 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_8 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_10 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_9 OneSecGrp_SectionRef_16.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_8 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.418459  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.026008999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 9.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.025854  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.19695699  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-6  // units: S cm-2
        e_pas_nml2 = -60.2509  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.9899996E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.008343  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.026899999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.502333  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.653374  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 5.6999997E-5  // units: S cm-2
        e_pas_nml2 = -76.49812  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 7.84E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.30005398  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec basal {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.002256  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 1.38E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.005574  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 7.92E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_2 nseg = 11
    dend_1 nseg = 3
    dend_12 nseg = 3
    dend_3 nseg = 5
    dend_5 nseg = 21
    dend_4 nseg = 7
    dend_7 nseg = 7
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bAC217_L4_BP_a8b6abe396_0_0


