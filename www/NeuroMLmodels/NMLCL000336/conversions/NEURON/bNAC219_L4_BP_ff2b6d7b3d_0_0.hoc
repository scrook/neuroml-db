// Cell: bNAC219_L4_BP_ff2b6d7b3d_0_0
/*
{
  "id" : "bNAC219_L4_BP_ff2b6d7b3d_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-3.08452, 6.27464, 0.312461, 1.46623", "-2.79927, 5.64032, 0.287115, 2.64844", "-2.51401, 5.00599, 0.26177, 4.10361", "-2.22875, 4.37167, 0.236425, 4.91598", "-1.94349, 3.73735, 0.21108, 5.72835", "-1.65823, 3.10303, 0.185734, 6.53421", "-1.37297, 2.46871, 0.160389, 7.31212", "-1.08771, 1.83438, 0.135044, 8.08989", "-0.802456, 1.20006, 0.109699, 8.85679", "-0.517198, 0.56574, 0.0843534, 8.93483", "-0.23194, -0.0685822, 0.0590082, 8.92633", "0.0533189, -0.702904, 0.033663, 8.91784", "0.338577, -1.33723, 0.00831775, 8.90934", "0.623836, -1.97155, -0.0170275, 8.90084", "0.909094, -2.60587, -0.0423727, 8.82493", "1.19435, -3.24019, -0.067718, 7.82232", "1.47961, -3.87451, -0.0930632, 6.5965", "1.76487, -4.50884, -0.118408, 5.37067", "2.05013, -5.14316, -0.143754, 4.14485", "2.33539, -5.77748, -0.169099, 2.91903", "2.62064, -6.4118, -0.194444, 1.76337" ]
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "1.61629, -5.55298, -1.26548, 1.33", "2.53114, -9.33001, -1.99901, 1.33", "4.04793, -15.5923, -3.21518, 0.66", "5.22228, -20.4407, -4.15678, 0.66", "6.47365, -25.6071, -5.16013, 1.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500001318721313
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "2.62064, -6.4118, -0.194444, 0.33", "8.77276, -20.0921, -0.194444, 0.33", "14.9249, -33.7725, -0.194444, 0.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "6.47365, -25.6071, -5.16013, 0.66", "7.84687, -37.5737, -1.75233, 0.66", "9.87187, -55.3477, 3.33604, 0.66", "12.3627, -77.037, 9.72567, 0.66", "14.363, -93.7727, 14.6679, 0.66", "15.5355, -103.483, 17.5254, 0.66", "15.9113, -106.706, 18.469, 0.66", "16.4418, -111.077, 19.7796, 0.66", "16.8694, -115.166, 21.0469, 0.66", "17.3471, -119.888, 22.4194, 0.66", "17.5672, -122.453, 22.8282, 0.66", "17.7584, -125.669, 23.0424, 0.66", "18.0024, -130.543, 22.7853, 0.66", "18.2357, -136.964, 22.139, 0.66", "18.3894, -139.761, 21.8246, 0.66", "19.1986, -152.892, 20.2093, 0.66", "19.4583, -155.99, 19.7649, 0.66", "20.4042, -165.566, 18.1228, 0.66", "20.8441, -169.608, 17.3881, 0.66", "21.7995, -177.024, 16.1175, 0.66", "22.3973, -181.261, 15.6746, 0.66", "23.0505, -185.365, 15.67, 0.66", "23.7049, -189.319, 15.8106, 0.66", "24.1858, -193.137, 15.9783, 0.66", "24.6065, -197.189, 16.0022, 0.66", "25.0147, -203.462, 15.9788, 0.66", "25.3298, -207.266, 16.142, 0.66", "25.6552, -211.879, 16.4176, 0.66", "26.07, -218.127, 16.7628, 0.66", "26.2679, -222.124, 16.7982, 0.66", "26.5337, -227.511, 16.5975, 0.66", "26.942, -232.582, 16.3378, 0.66" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "6.47365, -25.6071, -5.16013, 0.66", "9.87227, -28.2425, -5.30616, 0.66", "17.6856, -34.3011, -5.64185, 0.33", "35.5703, -48.1696, -6.41027, 0.33", "36.2451, -48.6928, -6.43927, 0.66", "43.4625, -54.2894, -6.74936, 0.33" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "14.9249, -33.7725, -0.194444, 0.33", "21.077, -47.4528, -0.194444, 0.33", "27.2291, -61.1331, -0.194444, 0.33" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "26.942, -232.582, 16.3378, 0.66", "30.5751, -235.881, 16.9793, 0.66", "32.6405, -237.745, 17.6653, 0.66", "36.0033, -240.569, 19.664, 0.66", "38.1441, -242.238, 21.1432, 0.66", "42.2438, -245.278, 24.2516, 0.66", "45.3879, -247.479, 26.6218, 0.66", "48.4408, -249.461, 29.153, 0.66", "55.0272, -253.237, 34.5212, 0.66", "58.7874, -255.183, 37.533, 0.66", "63.1836, -257.428, 41.1227, 0.33", "64.9527, -258.31, 42.4782, 0.33", "65.5788, -258.585, 42.9093, 0.66", "69.3523, -260.013, 45.2082, 0.33", "70.1584, -260.286, 45.4669, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "26.942, -232.582, 16.3378, 0.66", "27.829, -235.662, 17.3267, 0.66", "28.9762, -239.64, 18.6273, 0.66", "31.3474, -247.603, 21.0687, 0.66", "32.3323, -251.077, 22.106, 0.66", "33.6105, -255.301, 23.3764, 0.66", "34.8232, -259.603, 24.5581, 0.66", "35.4706, -262.027, 25.1475, 0.66", "36.1992, -265.394, 25.87, 0.66", "37.451, -271.889, 27.0416, 0.66", "38.0949, -275.593, 27.5421, 0.66", "38.7859, -279.943, 28.0756, 0.66", "39.1876, -283.644, 28.3391, 0.66", "39.3453, -285.652, 28.4812, 0.66", "39.7228, -292.412, 28.9065, 0.66", "39.8618, -295.919, 29.0296, 0.66", "39.9568, -300.783, 29.1929, 0.66", "40.1866, -304.667, 29.4354, 0.66", "40.2815, -306.392, 29.5245, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "40.2815, -306.392, 29.5245, 0.66", "40.707, -308.549, 29.6535, 0.66", "41.5004, -312.014, 30.2627, 0.66", "42.3817, -315.699, 31.0429, 0.66", "42.9201, -318.114, 31.611, 0.66", "43.5969, -321.458, 32.3507, 0.66", "44.5939, -327.388, 33.5723, 0.66", "45.1397, -331.448, 34.4218, 0.66", "45.495, -334.23, 35.0616, 0.66", "45.837, -337.148, 35.6536, 0.66", "46.22, -340.424, 36.2699, 0.66", "46.4867, -342.669, 36.655, 0.66", "46.8619, -345.761, 37.0618, 0.66", "47.2462, -348.607, 37.3805, 0.66", "48.2629, -355.287, 38.2461, 0.66", "48.7359, -357.939, 38.5941, 0.66", "49.8346, -364.601, 39.4734, 0.66", "50.1932, -367.295, 39.7703, 0.66", "50.4437, -369.898, 40.0068, 0.66", "50.588, -372.248, 40.1572, 0.66", "50.75, -376.1, 40.4004, 0.66", "50.8274, -379.397, 40.6116, 0.66", "50.7982, -385.756, 40.868, 0.66", "50.8458, -388.968, 40.9558, 0.66", "50.9048, -391.468, 41.0244, 0.66", "51.0264, -394.83, 41.1125, 0.66", "51.4815, -407.482, 41.4082, 0.66", "51.648, -412.139, 41.4116, 0.66", "52.0185, -424.382, 41.2528, 0.66", "52.1336, -429.014, 41.1355, 0.66", "52.2866, -433.569, 41.0326, 0.66", "52.4292, -436.735, 40.9594, 0.66", "52.6499, -441.073, 40.8073, 0.66", "52.8315, -445.895, 40.713, 0.66", "52.8668, -451.167, 40.4876, 0.66", "52.8745, -454.112, 40.3789, 0.66", "52.922, -456.16, 40.3492, 0.66", "53.376, -464.062, 40.6007, 0.66", "53.5201, -466.525, 40.6862, 0.66", "53.6023, -470.581, 40.7157, 0.66", "53.6498, -474.642, 40.6883, 0.66", "53.7496, -477.787, 40.6548, 0.66", "54.2556, -485.463, 40.7725, 0.66", "55.075, -494.259, 41.0165, 0.66", "55.6466, -500.251, 41.1327, 0.66", "55.8905, -503.267, 41.1504, 0.66", "56.6645, -514.323, 41.0296, 0.66", "56.9065, -521.437, 40.8004, 0.66", "56.9504, -523.519, 40.699, 0.66", "56.9832, -526.902, 40.4625, 0.66", "56.9338, -531.874, 39.997, 0.66", "56.8242, -534.027, 39.7629, 0.66", "56.2986, -539.811, 39.0048, 0.66", "55.1241, -551.89, 37.2342, 0.66", "54.6796, -558.107, 36.4506, 0.66", "54.5903, -560.422, 36.2039, 0.33", "54.5869, -561.964, 36.0691, 1.33", "54.8126, -565.606, 35.8517, 0.66", "55.4132, -569.982, 35.6848, 0.66", "55.9657, -573.082, 35.5958, 0.66", "56.6285, -576.213, 35.5541, 0.66", "57.214, -578.776, 35.4681, 0.66", "59.8399, -589.289, 35.3078, 0.66", "60.2277, -590.768, 35.3223, 0.33", "60.7451, -592.881, 35.3665, 1.33", "61.2193, -594.982, 35.379, 0.66", "61.5694, -596.633, 35.3982, 0.33", "62.5099, -601.188, 35.505, 0.66", "62.9996, -603.517, 35.8699, 0.66", "63.6851, -606.58, 36.5221, 0.33" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 15
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "40.2815, -306.392, 29.5245, 0.66", "37.9154, -313.754, 30.4371, 0.66", "35.9568, -320.007, 31.1132, 0.66", "34.7163, -324.681, 31.8877, 0.33", "33.0991, -331.24, 33.2102, 0.33", "32.8493, -332.309, 33.4806, 0.66", "32.1276, -335.769, 34.4267, 0.33", "31.7001, -338.283, 35.2485, 0.66", "30.8343, -344.242, 36.9726, 0.33", "30.7235, -345.183, 37.2682, 0.66", "29.9585, -351.552, 39.2524, 0.33", "29.7488, -354.841, 40.3559, 0.33", "29.7076, -358.405, 41.6016, 0.66", "29.7982, -362.663, 43.1797, 0.33", "29.9117, -364.963, 43.9688, 0.33", "30.0795, -366.246, 44.4554, 0.66", "31.4724, -371.578, 47.177, 0.33", "31.7146, -372.348, 47.6809, 0.66", "32.4681, -374.274, 49.1294, 0.33", "32.8421, -375.263, 49.9013, 0.33", "33.1677, -376.319, 50.6138, 0.66", "34.0638, -380.312, 52.8959, 0.33", "34.2929, -382.788, 53.9304, 0.33", "34.3736, -383.727, 54.2527, 0.66", "34.5321, -385.559, 54.7031, 0.33", "34.5858, -386.534, 54.8779, 0.66", "34.6236, -387.779, 55.0283, 0.33", "34.6258, -389.073, 55.0934, 0.66", "34.608, -390.97, 55.2327, 0.33", "34.592, -391.662, 55.302, 0.66", "34.405, -397.382, 56.0372, 0.33", "34.3854, -397.748, 56.0882, 0.66", "34.273, -399.065, 56.2935, 0.33", "34.1963, -399.751, 56.4092, 0.66", "34.1019, -401.608, 56.8919, 0.33", "34.1028, -402.454, 57.1622, 0.66", "34.185, -403.96, 57.7004, 0.33", "34.2657, -405.025, 58.0908, 0.66", "34.4058, -406.242, 58.5593, 0.33", "35.2148, -411.889, 60.8985, 0.33", "35.5125, -413.531, 61.6546, 0.66" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "63.6851, -606.58, 36.5221, 0.66", "63.6371, -610.251, 35.8484, 0.66", "63.9792, -612.118, 35.7682, 1.33", "64.3711, -613.711, 35.8066, 0.66", "64.791, -615.717, 35.8541, 0.66", "65.8574, -620.022, 36.0987, 0.33", "67.2846, -625.22, 36.4451, 0.66", "69.4685, -631.898, 37.1771, 0.66", "70.6939, -635.215, 37.5812, 0.66", "72.0403, -638.922, 37.908, 0.33", "73.6302, -643.681, 38.1704, 0.33", "73.9886, -645.034, 38.1951, 0.66", "74.1497, -646.173, 38.0368, 0.33", "74.1616, -647.172, 37.8042, 0.66", "74.0454, -653.016, 36.2434, 0.33", "74.0138, -655.458, 35.5673, 0.66", "73.9004, -657.778, 34.8933, 0.33", "73.7135, -664.342, 33.2747, 0.33", "73.7374, -668.175, 32.4179, 0.66", "73.9989, -675.097, 31.038, 0.33", "74.2377, -678.349, 30.5209, 0.66", "74.5392, -681.552, 30.0567, 1.33", "75.4566, -688.841, 29.1964, 0.33", "76.0575, -692.43, 28.9636, 0.33", "76.3173, -693.839, 28.9012, 0.66", "77.0288, -697.377, 28.8889, 0.33", "78.005, -702.114, 28.9786, 0.33", "78.4128, -703.84, 29.0393, 1.33", "79.5643, -708.798, 29.2338, 0.33", "79.9279, -710.511, 29.3738, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "63.6851, -606.58, 36.5221, 0.66", "61.7057, -608.52, 35.5551, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "79.9279, -710.511, 29.3738, 0.66", "79.2505, -709.869, 31.924, 0.66" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "79.9279, -710.511, 29.3738, 0.66", "79.9952, -711.977, 29.2096, 0.66", "80.2949, -718.507, 28.4785, 0.33", "80.3903, -720.584, 28.2459, 1.33" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "80.3903, -720.584, 28.2459, 0.33", "88.7713, -731.818, 34.7172, 0.33", "89.5594, -732.915, 35.2609, 1.33", "91.7626, -735.992, 36.5849, 0.33", "92.21, -736.635, 36.7711, 0.66", "94.3317, -739.715, 37.3201, 0.33", "94.9756, -740.649, 37.4867, 0.66", "95.4286, -741.521, 37.229, 0.33", "96.0551, -742.611, 36.8355, 0.66", "98.3447, -746.018, 35.1747, 0.33", "99.2459, -747.255, 34.4583, 1.33" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "80.3903, -720.584, 28.2459, 0.33", "82.3718, -733.489, 32.788, 0.33", "83.4525, -740.526, 35.2651, 0.33", "83.6224, -741.633, 35.6544, 0.66", "84.7378, -748.897, 38.2111, 0.33", "84.8865, -749.865, 38.5518, 0.66" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_11", "dend_8", "dend_8", "dend_8", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.999855",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.042115",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0012239999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.001693",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.386953",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "8.0E-6",
    "erev" : "-63.854015"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.5399997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.039862998",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "5.2299997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.0054459996",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.503893",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "1.0E-4",
    "erev" : "-67.1289"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.78E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.15074699",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009017",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "4.0E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.0032419998",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "1.74E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bNAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bNAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bNAC219_L4_BP_ff2b6d7b3d_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_12, id: dend_12, parent: dend_2
create dend_12
public dend_12
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_5, id: dend_5, parent: dend_3
create dend_5
public dend_5
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_11, id: dend_11, parent: dend_7
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_15
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bNAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bNAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_0(0), soma_0(0.4500001318721313)
    connect axon_0(0), soma_0(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_12(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_5(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_11(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -3.08452, 6.27464, 0.312461, 1.46623 ) }
    soma_0 { pt3dadd( -2.79927, 5.64032, 0.287115, 2.64844 ) }
    soma_0 { pt3dadd( -2.51401, 5.00599, 0.26177, 4.10361 ) }
    soma_0 { pt3dadd( -2.22875, 4.37167, 0.236425, 4.91598 ) }
    soma_0 { pt3dadd( -1.94349, 3.73735, 0.21108, 5.72835 ) }
    soma_0 { pt3dadd( -1.65823, 3.10303, 0.185734, 6.53421 ) }
    soma_0 { pt3dadd( -1.37297, 2.46871, 0.160389, 7.31212 ) }
    soma_0 { pt3dadd( -1.08771, 1.83438, 0.135044, 8.08989 ) }
    soma_0 { pt3dadd( -0.802456, 1.20006, 0.109699, 8.85679 ) }
    soma_0 { pt3dadd( -0.517198, 0.56574, 0.0843534, 8.93483 ) }
    soma_0 { pt3dadd( -0.23194, -0.0685822, 0.0590082, 8.92633 ) }
    soma_0 { pt3dadd( 0.0533189, -0.702904, 0.033663, 8.91784 ) }
    soma_0 { pt3dadd( 0.338577, -1.33723, 0.00831775, 8.90934 ) }
    soma_0 { pt3dadd( 0.623836, -1.97155, -0.0170275, 8.90084 ) }
    soma_0 { pt3dadd( 0.909094, -2.60587, -0.0423727, 8.82493 ) }
    soma_0 { pt3dadd( 1.19435, -3.24019, -0.067718, 7.82232 ) }
    soma_0 { pt3dadd( 1.47961, -3.87451, -0.0930632, 6.5965 ) }
    soma_0 { pt3dadd( 1.76487, -4.50884, -0.118408, 5.37067 ) }
    soma_0 { pt3dadd( 2.05013, -5.14316, -0.143754, 4.14485 ) }
    soma_0 { pt3dadd( 2.33539, -5.77748, -0.169099, 2.91903 ) }
    soma_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 1.76337 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 21/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 1.61629, -5.55298, -1.26548, 1.33 ) }
    dend_0 { pt3dadd( 2.53114, -9.33001, -1.99901, 1.33 ) }
    dend_0 { pt3dadd( 4.04793, -15.5923, -3.21518, 0.66 ) }
    dend_0 { pt3dadd( 5.22228, -20.4407, -4.15678, 0.66 ) }
    dend_0 { pt3dadd( 6.47365, -25.6071, -5.16013, 1.33 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 26/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 8.77276, -20.0921, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 29/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 6.47365, -25.6071, -5.16013, 0.66 ) }
    dend_2 { pt3dadd( 7.84687, -37.5737, -1.75233, 0.66 ) }
    dend_2 { pt3dadd( 9.87187, -55.3477, 3.33604, 0.66 ) }
    dend_2 { pt3dadd( 12.3627, -77.037, 9.72567, 0.66 ) }
    dend_2 { pt3dadd( 14.363, -93.7727, 14.6679, 0.66 ) }
    dend_2 { pt3dadd( 15.5355, -103.483, 17.5254, 0.66 ) }
    dend_2 { pt3dadd( 15.9113, -106.706, 18.469, 0.66 ) }
    dend_2 { pt3dadd( 16.4418, -111.077, 19.7796, 0.66 ) }
    dend_2 { pt3dadd( 16.8694, -115.166, 21.0469, 0.66 ) }
    dend_2 { pt3dadd( 17.3471, -119.888, 22.4194, 0.66 ) }
    dend_2 { pt3dadd( 17.5672, -122.453, 22.8282, 0.66 ) }
    dend_2 { pt3dadd( 17.7584, -125.669, 23.0424, 0.66 ) }
    dend_2 { pt3dadd( 18.0024, -130.543, 22.7853, 0.66 ) }
    dend_2 { pt3dadd( 18.2357, -136.964, 22.139, 0.66 ) }
    dend_2 { pt3dadd( 18.3894, -139.761, 21.8246, 0.66 ) }
    dend_2 { pt3dadd( 19.1986, -152.892, 20.2093, 0.66 ) }
    dend_2 { pt3dadd( 19.4583, -155.99, 19.7649, 0.66 ) }
    dend_2 { pt3dadd( 20.4042, -165.566, 18.1228, 0.66 ) }
    dend_2 { pt3dadd( 20.8441, -169.608, 17.3881, 0.66 ) }
    dend_2 { pt3dadd( 21.7995, -177.024, 16.1175, 0.66 ) }
    dend_2 { pt3dadd( 22.3973, -181.261, 15.6746, 0.66 ) }
    dend_2 { pt3dadd( 23.0505, -185.365, 15.67, 0.66 ) }
    dend_2 { pt3dadd( 23.7049, -189.319, 15.8106, 0.66 ) }
    dend_2 { pt3dadd( 24.1858, -193.137, 15.9783, 0.66 ) }
    dend_2 { pt3dadd( 24.6065, -197.189, 16.0022, 0.66 ) }
    dend_2 { pt3dadd( 25.0147, -203.462, 15.9788, 0.66 ) }
    dend_2 { pt3dadd( 25.3298, -207.266, 16.142, 0.66 ) }
    dend_2 { pt3dadd( 25.6552, -211.879, 16.4176, 0.66 ) }
    dend_2 { pt3dadd( 26.07, -218.127, 16.7628, 0.66 ) }
    dend_2 { pt3dadd( 26.2679, -222.124, 16.7982, 0.66 ) }
    dend_2 { pt3dadd( 26.5337, -227.511, 16.5975, 0.66 ) }
    dend_2 { pt3dadd( 26.942, -232.582, 16.3378, 0.66 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 61/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 6.47365, -25.6071, -5.16013, 0.66 ) }
    dend_1 { pt3dadd( 9.87227, -28.2425, -5.30616, 0.66 ) }
    dend_1 { pt3dadd( 17.6856, -34.3011, -5.64185, 0.33 ) }
    dend_1 { pt3dadd( 35.5703, -48.1696, -6.41027, 0.33 ) }
    dend_1 { pt3dadd( 36.2451, -48.6928, -6.43927, 0.66 ) }
    dend_1 { pt3dadd( 43.4625, -54.2894, -6.74936, 0.33 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 67/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 21.077, -47.4528, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 27.2291, -61.1331, -0.194444, 0.33 ) }
    // Section: dend_12, id: dend_12, parent: dend_2 (entry count 70/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 26.942, -232.582, 16.3378, 0.66 ) }
    dend_12 { pt3dadd( 30.5751, -235.881, 16.9793, 0.66 ) }
    dend_12 { pt3dadd( 32.6405, -237.745, 17.6653, 0.66 ) }
    dend_12 { pt3dadd( 36.0033, -240.569, 19.664, 0.66 ) }
    dend_12 { pt3dadd( 38.1441, -242.238, 21.1432, 0.66 ) }
    dend_12 { pt3dadd( 42.2438, -245.278, 24.2516, 0.66 ) }
    dend_12 { pt3dadd( 45.3879, -247.479, 26.6218, 0.66 ) }
    dend_12 { pt3dadd( 48.4408, -249.461, 29.153, 0.66 ) }
    dend_12 { pt3dadd( 55.0272, -253.237, 34.5212, 0.66 ) }
    dend_12 { pt3dadd( 58.7874, -255.183, 37.533, 0.66 ) }
    dend_12 { pt3dadd( 63.1836, -257.428, 41.1227, 0.33 ) }
    dend_12 { pt3dadd( 64.9527, -258.31, 42.4782, 0.33 ) }
    dend_12 { pt3dadd( 65.5788, -258.585, 42.9093, 0.66 ) }
    dend_12 { pt3dadd( 69.3523, -260.013, 45.2082, 0.33 ) }
    dend_12 { pt3dadd( 70.1584, -260.286, 45.4669, 0.66 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 85/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 26.942, -232.582, 16.3378, 0.66 ) }
    dend_3 { pt3dadd( 27.829, -235.662, 17.3267, 0.66 ) }
    dend_3 { pt3dadd( 28.9762, -239.64, 18.6273, 0.66 ) }
    dend_3 { pt3dadd( 31.3474, -247.603, 21.0687, 0.66 ) }
    dend_3 { pt3dadd( 32.3323, -251.077, 22.106, 0.66 ) }
    dend_3 { pt3dadd( 33.6105, -255.301, 23.3764, 0.66 ) }
    dend_3 { pt3dadd( 34.8232, -259.603, 24.5581, 0.66 ) }
    dend_3 { pt3dadd( 35.4706, -262.027, 25.1475, 0.66 ) }
    dend_3 { pt3dadd( 36.1992, -265.394, 25.87, 0.66 ) }
    dend_3 { pt3dadd( 37.451, -271.889, 27.0416, 0.66 ) }
    dend_3 { pt3dadd( 38.0949, -275.593, 27.5421, 0.66 ) }
    dend_3 { pt3dadd( 38.7859, -279.943, 28.0756, 0.66 ) }
    dend_3 { pt3dadd( 39.1876, -283.644, 28.3391, 0.66 ) }
    dend_3 { pt3dadd( 39.3453, -285.652, 28.4812, 0.66 ) }
    dend_3 { pt3dadd( 39.7228, -292.412, 28.9065, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_3 { pt3dadd( 39.8618, -295.919, 29.0296, 0.66 ) }
    dend_3 { pt3dadd( 39.9568, -300.783, 29.1929, 0.66 ) }
    dend_3 { pt3dadd( 40.1866, -304.667, 29.4354, 0.66 ) }
    dend_3 { pt3dadd( 40.2815, -306.392, 29.5245, 0.66 ) }
    // Section: dend_5, id: dend_5, parent: dend_3 (entry count 4/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 40.2815, -306.392, 29.5245, 0.66 ) }
    dend_5 { pt3dadd( 40.707, -308.549, 29.6535, 0.66 ) }
    dend_5 { pt3dadd( 41.5004, -312.014, 30.2627, 0.66 ) }
    dend_5 { pt3dadd( 42.3817, -315.699, 31.0429, 0.66 ) }
    dend_5 { pt3dadd( 42.9201, -318.114, 31.611, 0.66 ) }
    dend_5 { pt3dadd( 43.5969, -321.458, 32.3507, 0.66 ) }
    dend_5 { pt3dadd( 44.5939, -327.388, 33.5723, 0.66 ) }
    dend_5 { pt3dadd( 45.1397, -331.448, 34.4218, 0.66 ) }
    dend_5 { pt3dadd( 45.495, -334.23, 35.0616, 0.66 ) }
    dend_5 { pt3dadd( 45.837, -337.148, 35.6536, 0.66 ) }
    dend_5 { pt3dadd( 46.22, -340.424, 36.2699, 0.66 ) }
    dend_5 { pt3dadd( 46.4867, -342.669, 36.655, 0.66 ) }
    dend_5 { pt3dadd( 46.8619, -345.761, 37.0618, 0.66 ) }
    dend_5 { pt3dadd( 47.2462, -348.607, 37.3805, 0.66 ) }
    dend_5 { pt3dadd( 48.2629, -355.287, 38.2461, 0.66 ) }
    dend_5 { pt3dadd( 48.7359, -357.939, 38.5941, 0.66 ) }
    dend_5 { pt3dadd( 49.8346, -364.601, 39.4734, 0.66 ) }
    dend_5 { pt3dadd( 50.1932, -367.295, 39.7703, 0.66 ) }
    dend_5 { pt3dadd( 50.4437, -369.898, 40.0068, 0.66 ) }
    dend_5 { pt3dadd( 50.588, -372.248, 40.1572, 0.66 ) }
    dend_5 { pt3dadd( 50.75, -376.1, 40.4004, 0.66 ) }
    dend_5 { pt3dadd( 50.8274, -379.397, 40.6116, 0.66 ) }
    dend_5 { pt3dadd( 50.7982, -385.756, 40.868, 0.66 ) }
    dend_5 { pt3dadd( 50.8458, -388.968, 40.9558, 0.66 ) }
    dend_5 { pt3dadd( 50.9048, -391.468, 41.0244, 0.66 ) }
    dend_5 { pt3dadd( 51.0264, -394.83, 41.1125, 0.66 ) }
    dend_5 { pt3dadd( 51.4815, -407.482, 41.4082, 0.66 ) }
    dend_5 { pt3dadd( 51.648, -412.139, 41.4116, 0.66 ) }
    dend_5 { pt3dadd( 52.0185, -424.382, 41.2528, 0.66 ) }
    dend_5 { pt3dadd( 52.1336, -429.014, 41.1355, 0.66 ) }
    dend_5 { pt3dadd( 52.2866, -433.569, 41.0326, 0.66 ) }
    dend_5 { pt3dadd( 52.4292, -436.735, 40.9594, 0.66 ) }
    dend_5 { pt3dadd( 52.6499, -441.073, 40.8073, 0.66 ) }
    dend_5 { pt3dadd( 52.8315, -445.895, 40.713, 0.66 ) }
    dend_5 { pt3dadd( 52.8668, -451.167, 40.4876, 0.66 ) }
    dend_5 { pt3dadd( 52.8745, -454.112, 40.3789, 0.66 ) }
    dend_5 { pt3dadd( 52.922, -456.16, 40.3492, 0.66 ) }
    dend_5 { pt3dadd( 53.376, -464.062, 40.6007, 0.66 ) }
    dend_5 { pt3dadd( 53.5201, -466.525, 40.6862, 0.66 ) }
    dend_5 { pt3dadd( 53.6023, -470.581, 40.7157, 0.66 ) }
    dend_5 { pt3dadd( 53.6498, -474.642, 40.6883, 0.66 ) }
    dend_5 { pt3dadd( 53.7496, -477.787, 40.6548, 0.66 ) }
    dend_5 { pt3dadd( 54.2556, -485.463, 40.7725, 0.66 ) }
    dend_5 { pt3dadd( 55.075, -494.259, 41.0165, 0.66 ) }
    dend_5 { pt3dadd( 55.6466, -500.251, 41.1327, 0.66 ) }
    dend_5 { pt3dadd( 55.8905, -503.267, 41.1504, 0.66 ) }
    dend_5 { pt3dadd( 56.6645, -514.323, 41.0296, 0.66 ) }
    dend_5 { pt3dadd( 56.9065, -521.437, 40.8004, 0.66 ) }
    dend_5 { pt3dadd( 56.9504, -523.519, 40.699, 0.66 ) }
    dend_5 { pt3dadd( 56.9832, -526.902, 40.4625, 0.66 ) }
    dend_5 { pt3dadd( 56.9338, -531.874, 39.997, 0.66 ) }
    dend_5 { pt3dadd( 56.8242, -534.027, 39.7629, 0.66 ) }
    dend_5 { pt3dadd( 56.2986, -539.811, 39.0048, 0.66 ) }
    dend_5 { pt3dadd( 55.1241, -551.89, 37.2342, 0.66 ) }
    dend_5 { pt3dadd( 54.6796, -558.107, 36.4506, 0.66 ) }
    dend_5 { pt3dadd( 54.5903, -560.422, 36.2039, 0.33 ) }
    dend_5 { pt3dadd( 54.5869, -561.964, 36.0691, 1.33 ) }
    dend_5 { pt3dadd( 54.8126, -565.606, 35.8517, 0.66 ) }
    dend_5 { pt3dadd( 55.4132, -569.982, 35.6848, 0.66 ) }
    dend_5 { pt3dadd( 55.9657, -573.082, 35.5958, 0.66 ) }
    dend_5 { pt3dadd( 56.6285, -576.213, 35.5541, 0.66 ) }
    dend_5 { pt3dadd( 57.214, -578.776, 35.4681, 0.66 ) }
    dend_5 { pt3dadd( 59.8399, -589.289, 35.3078, 0.66 ) }
    dend_5 { pt3dadd( 60.2277, -590.768, 35.3223, 0.33 ) }
    dend_5 { pt3dadd( 60.7451, -592.881, 35.3665, 1.33 ) }
    dend_5 { pt3dadd( 61.2193, -594.982, 35.379, 0.66 ) }
    dend_5 { pt3dadd( 61.5694, -596.633, 35.3982, 0.33 ) }
    dend_5 { pt3dadd( 62.5099, -601.188, 35.505, 0.66 ) }
    dend_5 { pt3dadd( 62.9996, -603.517, 35.8699, 0.66 ) }
    dend_5 { pt3dadd( 63.6851, -606.58, 36.5221, 0.33 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 74/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 40.2815, -306.392, 29.5245, 0.66 ) }
    dend_4 { pt3dadd( 37.9154, -313.754, 30.4371, 0.66 ) }
    dend_4 { pt3dadd( 35.9568, -320.007, 31.1132, 0.66 ) }
    dend_4 { pt3dadd( 34.7163, -324.681, 31.8877, 0.33 ) }
    dend_4 { pt3dadd( 33.0991, -331.24, 33.2102, 0.33 ) }
    dend_4 { pt3dadd( 32.8493, -332.309, 33.4806, 0.66 ) }
    dend_4 { pt3dadd( 32.1276, -335.769, 34.4267, 0.33 ) }
    dend_4 { pt3dadd( 31.7001, -338.283, 35.2485, 0.66 ) }
    dend_4 { pt3dadd( 30.8343, -344.242, 36.9726, 0.33 ) }
    dend_4 { pt3dadd( 30.7235, -345.183, 37.2682, 0.66 ) }
    dend_4 { pt3dadd( 29.9585, -351.552, 39.2524, 0.33 ) }
    dend_4 { pt3dadd( 29.7488, -354.841, 40.3559, 0.33 ) }
    dend_4 { pt3dadd( 29.7076, -358.405, 41.6016, 0.66 ) }
    dend_4 { pt3dadd( 29.7982, -362.663, 43.1797, 0.33 ) }
    dend_4 { pt3dadd( 29.9117, -364.963, 43.9688, 0.33 ) }
    dend_4 { pt3dadd( 30.0795, -366.246, 44.4554, 0.66 ) }
    dend_4 { pt3dadd( 31.4724, -371.578, 47.177, 0.33 ) }
    dend_4 { pt3dadd( 31.7146, -372.348, 47.6809, 0.66 ) }
    dend_4 { pt3dadd( 32.4681, -374.274, 49.1294, 0.33 ) }
    dend_4 { pt3dadd( 32.8421, -375.263, 49.9013, 0.33 ) }
    dend_4 { pt3dadd( 33.1677, -376.319, 50.6138, 0.66 ) }
    dend_4 { pt3dadd( 34.0638, -380.312, 52.8959, 0.33 ) }
    dend_4 { pt3dadd( 34.2929, -382.788, 53.9304, 0.33 ) }
    dend_4 { pt3dadd( 34.3736, -383.727, 54.2527, 0.66 ) }
    dend_4 { pt3dadd( 34.5321, -385.559, 54.7031, 0.33 ) }
    dend_4 { pt3dadd( 34.5858, -386.534, 54.8779, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_4 { pt3dadd( 34.6236, -387.779, 55.0283, 0.33 ) }
    dend_4 { pt3dadd( 34.6258, -389.073, 55.0934, 0.66 ) }
    dend_4 { pt3dadd( 34.608, -390.97, 55.2327, 0.33 ) }
    dend_4 { pt3dadd( 34.592, -391.662, 55.302, 0.66 ) }
    dend_4 { pt3dadd( 34.405, -397.382, 56.0372, 0.33 ) }
    dend_4 { pt3dadd( 34.3854, -397.748, 56.0882, 0.66 ) }
    dend_4 { pt3dadd( 34.273, -399.065, 56.2935, 0.33 ) }
    dend_4 { pt3dadd( 34.1963, -399.751, 56.4092, 0.66 ) }
    dend_4 { pt3dadd( 34.1019, -401.608, 56.8919, 0.33 ) }
    dend_4 { pt3dadd( 34.1028, -402.454, 57.1622, 0.66 ) }
    dend_4 { pt3dadd( 34.185, -403.96, 57.7004, 0.33 ) }
    dend_4 { pt3dadd( 34.2657, -405.025, 58.0908, 0.66 ) }
    dend_4 { pt3dadd( 34.4058, -406.242, 58.5593, 0.33 ) }
    dend_4 { pt3dadd( 35.2148, -411.889, 60.8985, 0.33 ) }
    dend_4 { pt3dadd( 35.5125, -413.531, 61.6546, 0.66 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 15/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 63.6851, -606.58, 36.5221, 0.66 ) }
    dend_7 { pt3dadd( 63.6371, -610.251, 35.8484, 0.66 ) }
    dend_7 { pt3dadd( 63.9792, -612.118, 35.7682, 1.33 ) }
    dend_7 { pt3dadd( 64.3711, -613.711, 35.8066, 0.66 ) }
    dend_7 { pt3dadd( 64.791, -615.717, 35.8541, 0.66 ) }
    dend_7 { pt3dadd( 65.8574, -620.022, 36.0987, 0.33 ) }
    dend_7 { pt3dadd( 67.2846, -625.22, 36.4451, 0.66 ) }
    dend_7 { pt3dadd( 69.4685, -631.898, 37.1771, 0.66 ) }
    dend_7 { pt3dadd( 70.6939, -635.215, 37.5812, 0.66 ) }
    dend_7 { pt3dadd( 72.0403, -638.922, 37.908, 0.33 ) }
    dend_7 { pt3dadd( 73.6302, -643.681, 38.1704, 0.33 ) }
    dend_7 { pt3dadd( 73.9886, -645.034, 38.1951, 0.66 ) }
    dend_7 { pt3dadd( 74.1497, -646.173, 38.0368, 0.33 ) }
    dend_7 { pt3dadd( 74.1616, -647.172, 37.8042, 0.66 ) }
    dend_7 { pt3dadd( 74.0454, -653.016, 36.2434, 0.33 ) }
    dend_7 { pt3dadd( 74.0138, -655.458, 35.5673, 0.66 ) }
    dend_7 { pt3dadd( 73.9004, -657.778, 34.8933, 0.33 ) }
    dend_7 { pt3dadd( 73.7135, -664.342, 33.2747, 0.33 ) }
    dend_7 { pt3dadd( 73.7374, -668.175, 32.4179, 0.66 ) }
    dend_7 { pt3dadd( 73.9989, -675.097, 31.038, 0.33 ) }
    dend_7 { pt3dadd( 74.2377, -678.349, 30.5209, 0.66 ) }
    dend_7 { pt3dadd( 74.5392, -681.552, 30.0567, 1.33 ) }
    dend_7 { pt3dadd( 75.4566, -688.841, 29.1964, 0.33 ) }
    dend_7 { pt3dadd( 76.0575, -692.43, 28.9636, 0.33 ) }
    dend_7 { pt3dadd( 76.3173, -693.839, 28.9012, 0.66 ) }
    dend_7 { pt3dadd( 77.0288, -697.377, 28.8889, 0.33 ) }
    dend_7 { pt3dadd( 78.005, -702.114, 28.9786, 0.33 ) }
    dend_7 { pt3dadd( 78.4128, -703.84, 29.0393, 1.33 ) }
    dend_7 { pt3dadd( 79.5643, -708.798, 29.2338, 0.33 ) }
    dend_7 { pt3dadd( 79.9279, -710.511, 29.3738, 0.66 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 45/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 63.6851, -606.58, 36.5221, 0.66 ) }
    dend_6 { pt3dadd( 61.7057, -608.52, 35.5551, 0.66 ) }
    // Section: dend_11, id: dend_11, parent: dend_7 (entry count 47/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 79.9279, -710.511, 29.3738, 0.66 ) }
    dend_11 { pt3dadd( 79.2505, -709.869, 31.924, 0.66 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 49/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 79.9279, -710.511, 29.3738, 0.66 ) }
    dend_8 { pt3dadd( 79.9952, -711.977, 29.2096, 0.66 ) }
    dend_8 { pt3dadd( 80.2949, -718.507, 28.4785, 0.33 ) }
    dend_8 { pt3dadd( 80.3903, -720.584, 28.2459, 1.33 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 53/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 80.3903, -720.584, 28.2459, 0.33 ) }
    dend_10 { pt3dadd( 88.7713, -731.818, 34.7172, 0.33 ) }
    dend_10 { pt3dadd( 89.5594, -732.915, 35.2609, 1.33 ) }
    dend_10 { pt3dadd( 91.7626, -735.992, 36.5849, 0.33 ) }
    dend_10 { pt3dadd( 92.21, -736.635, 36.7711, 0.66 ) }
    dend_10 { pt3dadd( 94.3317, -739.715, 37.3201, 0.33 ) }
    dend_10 { pt3dadd( 94.9756, -740.649, 37.4867, 0.66 ) }
    dend_10 { pt3dadd( 95.4286, -741.521, 37.229, 0.33 ) }
    dend_10 { pt3dadd( 96.0551, -742.611, 36.8355, 0.66 ) }
    dend_10 { pt3dadd( 98.3447, -746.018, 35.1747, 0.33 ) }
    dend_10 { pt3dadd( 99.2459, -747.255, 34.4583, 1.33 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 64/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 80.3903, -720.584, 28.2459, 0.33 ) }
    dend_9 { pt3dadd( 82.3718, -733.489, 32.788, 0.33 ) }
    dend_9 { pt3dadd( 83.4525, -740.526, 35.2651, 0.33 ) }
    dend_9 { pt3dadd( 83.6224, -741.633, 35.6544, 0.66 ) }
    dend_9 { pt3dadd( 84.7378, -748.897, 38.2111, 0.33 ) }
    dend_9 { pt3dadd( 84.8865, -749.865, 38.5518, 0.66 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_2 = new SectionList()
    dend_0 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_2 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_1 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_12 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_3 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_5 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_4 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_7 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_0 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_6 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_11 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_8 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_9 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_10 OneSecGrp_SectionRef_15.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_8 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.999855  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.042115  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0012239999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.001693  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.386953  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 8.0E-6  // units: S cm-2
        e_pas_nml2 = -63.854015  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.5399997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.039862998  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 5.2299997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.0054459996  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.503893  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-4  // units: S cm-2
        e_pas_nml2 = -67.1289  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 4.78E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.15074699  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009017  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 4.0E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.0032419998  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 1.74E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bNAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bNAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bNAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bNAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_2 nseg = 11
    dend_1 nseg = 3
    dend_12 nseg = 3
    dend_3 nseg = 3
    dend_5 nseg = 15
    dend_4 nseg = 5
    dend_7 nseg = 5
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bNAC219_L4_BP_ff2b6d7b3d_0_0


