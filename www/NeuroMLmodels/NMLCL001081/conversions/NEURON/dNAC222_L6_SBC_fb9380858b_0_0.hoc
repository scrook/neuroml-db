// Cell: dNAC222_L6_SBC_fb9380858b_0_0
/*
{
  "id" : "dNAC222_L6_SBC_fb9380858b_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-10.7291, -0.0854046, 0.0, 3.99032", "-9.68547, -0.112313, 0.0, 6.86778", "-8.64179, -0.139222, 0.0, 9.47623", "-7.59812, -0.166131, 0.0, 11.571", "-6.55444, -0.193039, 0.0, 12.9501", "-5.51077, -0.219948, 0.0, 14.0712", "-4.4671, -0.246857, 0.0, 14.5683", "-3.42342, -0.273765, 0.0, 15.0452", "-2.37975, -0.300674, 0.0, 15.2095", "-1.33607, -0.327583, 0.0, 15.2281", "-0.292397, -0.354492, 0.0, 15.0943", "0.751277, -0.3814, 0.0, 14.7073", "1.79495, -0.408309, 0.0, 14.315", "2.83863, -0.435218, 0.0, 13.884", "3.8823, -0.462126, 0.0, 13.321", "4.92598, -0.489035, 0.0, 12.6944", "5.96965, -0.515944, 0.0, 11.6806", "7.01332, -0.542852, 0.0, 10.285", "8.057, -0.569761, 0.0, 8.67743", "9.10067, -0.59667, 0.0, 6.63248", "10.1443, -0.623578, 0.0, 3.86307" ]
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "4.18666, -5.58001, 7.75, 0.52", "4.33777, -6.23842, 8.12143, 0.52", "4.52731, -7.20906, 8.67101, 0.52", "4.70462, -8.21334, 9.17887, 0.88", "4.89589, -9.29675, 9.72674, 0.88", "5.11692, -10.5487, 10.3598, 0.74", "5.30241, -11.5994, 10.8911, 1.18", "5.47601, -12.679, 11.4265, 2.21", "5.67163, -14.1444, 12.0765, 3.39" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.450000000456733
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "-6.05334, -2.23051, -15.93, 1.55", "-6.42561, -1.98033, -15.8826, 1.55", "-7.65003, -1.15746, -15.7267, 1.55", "-9.22045, -0.102055, -15.5267, 0.52", "-10.0331, 0.444102, -15.4232, 0.52", "-10.6531, 0.860769, -15.3443, 1.18", "-12.207, 1.90507, -15.1464, 2.65" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.450000000456733
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "5.14666, 5.50799, 7.36, 0.37", "5.24842, 6.42757, 7.3262, 0.37", "5.30455, 7.29164, 7.29558, 0.52", "5.38072, 8.4643, 7.25402, 0.66", "5.42112, 9.08628, 7.23198, 0.88", "5.47226, 9.87364, 7.20408, 1.55", "5.53352, 10.8167, 7.17066, 2.73", "5.53658, 12.1386, 7.11596, 3.83" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.450000000456733
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-10.1633, 1.40249, -1.79, 0.29", "-10.7335, 1.51096, -1.7161, 0.29", "-11.3775, 1.74666, -1.61419, 0.29", "-11.9527, 2.0602, -1.51989, 0.29", "-12.3894, 2.36717, -1.45098, 0.22", "-12.9275, 2.87541, -1.35096, 0.22", "-13.1866, 3.14295, -1.29292, 0.52", "-13.8379, 3.92298, -1.13696, 1.25", "-14.3148, 4.55057, -1.01196, 1.25", "-14.8022, 5.21954, -0.865598, 0.59", "-15.7402, 6.46618, -0.547059, 0.22", "-16.2909, 7.14872, -0.334546, 0.22", "-16.704, 7.61812, -0.167001, 0.88", "-17.082, 8.0127, -0.0103162, 1.47", "-17.623, 8.51079, 0.194768, 1.99", "-19.0252, 9.62879, 0.675963, 0.22", "-19.8564, 10.2057, 0.961798, 0.22", "-20.3539, 10.528, 1.13603, 0.22", "-20.7458, 10.7636, 1.27304, 1.03", "-21.7657, 11.3244, 1.5956, 2.65", "-23.1717, 12.0133, 1.92434, 0.15", "-24.5829, 12.6417, 2.15763, 0.15", "-25.3163, 12.9774, 2.24064, 0.15", "-25.9451, 13.2798, 2.29259, 1.25", "-27.2267, 13.9212, 2.34973, 3.02", "-29.3445, 15.0544, 2.34295, 0.07", "-30.0966, 15.4965, 2.28241, 0.59", "-31.219, 16.2345, 2.10035, 0.07", "-31.859, 16.7041, 1.97565, 0.22", "-32.3844, 17.1328, 1.84837, 0.22", "-33.0512, 17.7463, 1.6437, 1.11", "-33.7915, 18.4992, 1.38338, 2.51", "-34.8777, 19.6444, 0.952422, 0.15", "-35.5405, 20.3624, 0.672762, 0.29", "-36.4674, 21.423, 0.274742, 0.07", "-37.1121, 22.2201, 0.0115678, 0.07", "-37.4916, 22.7374, -0.126419, 0.22", "-37.927, 23.3897, -0.263068, 0.07", "-38.3348, 24.1062, -0.363996, 0.81", "-38.7232, 24.8821, -0.453306, 2.29", "-39.5301, 26.7176, -0.596023, 0.07", "-39.8774, 27.5596, -0.666263, 0.88", "-40.0317, 27.9487, -0.704673, 0.88", "-40.6613, 29.5662, -0.921523, 0.07", "-40.9436, 30.287, -1.04794, 0.74", "-41.1613, 30.8486, -1.17276, 1.92", "-41.8446, 32.6796, -1.62922, 0.07", "-42.0825, 33.3266, -1.79146, 0.37", "-42.4276, 34.2655, -1.99936, 0.07", "-42.7188, 35.0575, -2.13821, 0.81", "-43.0184, 35.9173, -2.22914, 2.51", "-43.6911, 37.9967, -2.34535, 0.07", "-43.9266, 38.834, -2.33595, 0.07", "-44.1902, 39.8003, -2.28106, 0.07", "-44.453, 40.7899, -2.17474, 1.62", "-44.8883, 42.3655, -1.96404, 0.22", "-45.1166, 43.0959, -1.85442, 0.22", "-45.5133, 44.2221, -1.68278, 0.07", "-45.8609, 45.1056, -1.56141, 0.07", "-46.1602, 45.7738, -1.48129, 1.03", "-46.6743, 46.7385, -1.39377, 2.73", "-47.6959, 48.33, -1.30448, 0.07", "-48.0174, 48.7588, -1.28567, 0.37", "-48.3704, 49.1759, -1.27499, 0.37", "-48.9576, 49.8067, -1.26059, 0.15", "-49.6082, 50.4268, -1.25897, 0.96", "-50.3713, 51.0923, -1.29174, 2.06", "-51.5872, 52.0812, -1.39185, 0.15", "-52.0786, 52.4875, -1.44809, 0.22", "-52.5614, 52.9024, -1.5215, 0.66", "-53.5109, 53.8071, -1.7338, 0.07", "-54.32, 54.6739, -1.97074, 0.07", "-54.8278, 55.2897, -2.15395, 0.07", "-55.1954, 55.8048, -2.32207, 0.96", "-55.5659, 56.4101, -2.52661, 1.62", "-56.1582, 57.5792, -2.91729, 0.15", "-56.4619, 58.3029, -3.14772, 0.22", "-56.6732, 58.8637, -3.32136, 0.15", "-56.8946, 59.4824, -3.52689, 0.22", "-57.1598, 60.2051, -3.77447, 0.22", "-57.4393, 60.912, -3.99729, 0.15", "-57.7371, 61.6199, -4.20002, 0.37", "-58.1369, 62.5433, -4.44673, 1.11", "-58.4964, 63.3477, -4.63658, 2.21", "-59.0923, 64.65, -4.88895, 2.95", "-59.9512, 66.4914, -5.21925, 0.22", "-60.2396, 67.1011, -5.32765, 0.15", "-60.5082, 67.6895, -5.43504, 0.22", "-60.8617, 68.5158, -5.59051, 0.07", "-61.2455, 69.5057, -5.78317, 0.22", "-61.5321, 70.3438, -5.95783, 0.22", "-61.6278, 70.6484, -6.02623, 1.11", "-61.9831, 71.8074, -6.28544, 2.8", "-62.6704, 74.2542, -6.8092, 0.15", "-62.9002, 75.1364, -6.98422, 0.15", "-63.0776, 75.8025, -7.09476, 0.66", "-63.2457, 76.3939, -7.16587, 1.11", "-63.4388, 77.0216, -7.22068, 0.07", "-63.7401, 77.9424, -7.26819, 0.07", "-63.9159, 78.4554, -7.27445, 0.29", "-64.3924, 79.7232, -7.2802, 0.15", "-64.6776, 80.4351, -7.2802, 0.96", "-64.9019, 80.9748, -7.2802, 1.03" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.450000000456733,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "10.5067, -2.07301, -1.95, 1.03", "10.723, -2.22571, -1.9191, 1.03", "11.6267, -2.88439, -1.80136, 0.96", "12.1039, -3.24129, -1.74771, 0.96", "12.7409, -3.73472, -1.69904, 1.03", "13.3979, -4.2539, -1.69388, 1.25", "14.1491, -4.85473, -1.75044, 1.62", "14.7192, -5.32893, -1.85975, 1.62", "15.4911, -6.00354, -2.13075, 1.25", "16.1914, -6.62418, -2.48339, 0.88", "16.9624, -7.29873, -2.98309, 0.81", "17.7065, -7.93087, -3.54218, 0.81", "18.6412, -8.66572, -4.24482, 0.52", "19.5067, -9.27328, -4.86021, 0.52", "20.0407, -9.61283, -5.21342, 1.11", "20.9425, -10.1374, -5.73472, 1.92", "22.0178, -10.7321, -6.30561, 2.88", "23.3231, -11.4122, -6.92242, 2.95", "24.6481, -12.053, -7.46479, 1.4", "25.9517, -12.6633, -7.91023, 0.52", "27.1444, -13.2253, -8.26663, 0.81" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.450000000456733
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "10.1443, -0.623578, 0.0, 0.37", "25.1393, -1.01019, 0.0, 0.37", "40.1343, -1.3968, 0.0, 0.37" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "5.67163, -14.1444, 12.0765, 1.25", "5.65746, -15.7356, 11.7775, 1.25", "5.65289, -17.0828, 11.569, 0.29", "5.64911, -18.5713, 11.4323, 0.22", "5.63784, -19.8204, 11.4028, 0.22", "5.63023, -20.3556, 11.4227, 0.59", "5.59607, -21.3307, 11.5269, 0.88", "5.53724, -22.3289, 11.7252, 0.22", "5.45283, -23.3982, 12.0059, 0.22", "5.36627, -24.2849, 12.2722, 1.47", "5.15245, -25.9362, 12.761, 3.54", "4.65873, -29.0169, 13.6561, 0.44", "4.43636, -30.2068, 13.9671, 0.22", "4.33516, -30.6867, 14.0744, 0.66", "4.1537, -31.4924, 14.1855, 1.11", "3.77301, -33.1467, 14.2951, 0.22", "3.54788, -34.1003, 14.2966, 0.22", "3.34686, -35.0228, 14.2346, 1.25", "3.07635, -36.3714, 14.143, 2.65", "2.70827, -38.4704, 14.0262, 0.22", "2.57834, -39.3098, 13.9948, 0.22", "2.43922, -40.3338, 13.9845, 1.4", "2.2347, -41.8102, 13.9821, 3.32", "1.82825, -44.5226, 14.043, 0.22", "1.68515, -45.4409, 14.076, 0.29", "1.47529, -46.653, 14.1417, 0.74", "1.183, -48.0815, 14.252, 0.15", "0.945577, -49.1121, 14.3514, 0.15", "0.753388, -49.8767, 14.4347, 0.22", "0.604908, -50.4812, 14.5154, 1.18", "0.386047, -51.3554, 14.6478, 1.62", "-0.234019, -53.8717, 15.0563, 0.15", "-0.432977, -54.7414, 15.206, 1.7", "-0.654036, -55.8956, 15.419, 2.51", "-1.00401, -58.2272, 15.8237, 0.15", "-1.11387, -59.179, 15.9702, 0.15", "-1.14159, -59.5973, 16.0211, 0.44", "-1.13989, -60.6882, 16.0975, 1.25", "-1.1078, -61.486, 16.1379, 0.81", "-1.02864, -62.6276, 16.1895, 0.22", "-0.940419, -63.6783, 16.2464, 0.15", "-0.856919, -64.7647, 16.3309, 0.22", "-0.822409, -65.4704, 16.4042, 1.03", "-0.822379, -66.5412, 16.5607, 2.8", "-0.901879, -68.4502, 16.8911, 0.29", "-1.00732, -69.792, 17.1819, 0.22", "-1.12565, -70.935, 17.4724, 0.96", "-1.27934, -72.1428, 17.8206, 0.22", "-1.48976, -73.6531, 18.2786, 0.22", "-1.59455, -74.4993, 18.5309, 1.11", "-1.7028, -75.5766, 18.8105, 2.73", "-1.76957, -76.5134, 19.0184, 3.17", "-1.86334, -78.9293, 19.4667, 0.22", "-1.856, -79.7687, 19.5715, 0.44", "-1.74867, -81.4942, 19.7274, 0.15", "-1.62949, -82.6978, 19.8096, 0.15", "-1.57092, -83.152, 19.8252, 0.74", "-1.43143, -84.0072, 19.8467, 1.25", "-1.15197, -85.5457, 19.9414, 0.15", "-0.982109, -86.4926, 20.0461, 0.15", "-0.786319, -87.6107, 20.2268, 0.07", "-0.688701, -88.1785, 20.3372, 0.74", "-0.482323, -89.4782, 20.6021, 2.58", "-0.123096, -92.0665, 21.127, 0.22", "-0.0513662, -92.7587, 21.2735, 0.22", "0.0406789, -94.0819, 21.5325, 0.15", "0.0748859, -94.7599, 21.6654, 1.03", "0.115285, -95.8596, 21.8663, 2.73", "0.118395, -97.3326, 22.0919, 0.66", "0.0575699, -98.9757, 22.2658, 0.07", "-0.00632915, -99.8791, 22.3124, 0.22", "-0.0716441, -100.575, 22.3136, 0.15", "-0.145732, -101.283, 22.2861, 0.66", "-0.31121, -102.867, 22.1649, 0.07", "-0.391475, -103.708, 22.0316, 0.96", "-0.535092, -105.539, 21.6096, 0.07", "-0.556209, -105.945, 21.5024, 0.44", "-0.577175, -107.084, 21.1686, 2.14", "-0.51645, -108.705, 20.674, 0.07", "-0.327604, -110.301, 20.1437, 0.07", "-0.233487, -110.833, 19.9699, 0.44", "-0.0752141, -111.576, 19.7439, 1.25", "0.166189, -112.734, 19.4095, 0.22", "0.389167, -114.035, 19.0933, 0.15", "0.548302, -115.478, 18.8258, 0.15", "0.562534, -116.49, 18.7192, 1.25", "0.435752, -117.732, 18.6765, 0.15", "0.28259, -118.447, 18.6923, 0.29", "-0.239797, -120.059, 18.8041, 0.07", "-0.514004, -120.716, 18.8721, 1.77", "-1.07776, -121.876, 19.0471, 3.47", "-2.09068, -123.884, 19.4032, 0.15", "-2.47497, -124.645, 19.5527, 0.15", "-2.84748, -125.466, 19.741, 0.88", "-3.14748, -126.224, 19.9129, 0.29", "-3.53053, -127.382, 20.1668, 0.07", "-3.79738, -128.564, 20.4255, 0.07", "-3.92396, -129.386, 20.5653, 0.59", "-4.12815, -131.222, 20.791, 0.15", "-4.20242, -132.154, 20.8447, 1.25", "-4.25452, -133.098, 20.8291, 2.51", "-4.3294, -135.318, 20.639, 0.15", "-4.36858, -136.427, 20.4757, 0.15", "-4.40006, -137.345, 20.3028, 0.22", "-4.4478, -138.586, 20.0237, 2.06", "-4.53092, -140.409, 19.6525, 0.22", "-4.5615, -141.104, 19.5139, 0.37", "-4.60657, -142.275, 19.2938, 0.15", "-4.61451, -142.805, 19.2268, 0.74", "-4.6178, -143.589, 19.1501, 1.4", "-4.62215, -145.41, 18.9982, 0.15", "-4.62286, -146.803, 18.8905, 0.15", "-4.6131, -147.512, 18.8425, 1.25", "-4.55835, -149.16, 18.7523, 0.07", "-4.50354, -150.379, 18.6928, 0.07", "-4.46668, -150.991, 18.6673, 0.96", "-4.40105, -151.848, 18.6334, 1.92", "-4.28448, -153.222, 18.5778, 0.15", "-4.22108, -153.842, 18.5482, 0.29", "-4.11726, -154.688, 18.51, 0.07", "-4.05904, -155.153, 18.4935, 0.15", "-3.96572, -156.289, 18.4934, 0.07", "-3.92872, -157.141, 18.5489, 0.07", "-3.92424, -157.422, 18.5806, 0.07", "-3.92394, -158.04, 18.6689, 1.03", "-3.93277, -159.031, 18.8461, 2.36", "-3.94122, -161.016, 19.2438, 0.07", "-3.92904, -162.295, 19.4809, 0.07", "-3.90701, -163.29, 19.6431, 1.33", "-3.83625, -165.474, 19.9371, 0.15", "-3.79566, -166.322, 20.0241, 1.18", "-3.73788, -167.274, 20.0901, 2.36", "-3.54099, -169.364, 20.1345, 0.15", "-3.45248, -170.132, 20.1353, 0.29", "-3.28606, -171.309, 20.1352, 0.07", "-3.14291, -172.157, 20.1337, 0.07", "-2.94664, -173.22, 20.1368, 1.7", "-2.52874, -175.312, 20.2109, 0.07", "-2.3838, -175.976, 20.2603, 0.52", "-2.1437, -177.046, 20.3492, 0.07", "-1.99636, -177.736, 20.4076, 0.07", "-1.87602, -178.352, 20.4592, 0.29", "-1.71083, -179.392, 20.5411, 0.07", "-1.65444, -180.053, 20.5836, 1.25", "-1.624, -180.913, 20.6188, 2.43", "-1.64834, -182.793, 20.6777, 0.07", "-1.66982, -183.115, 20.6813, 0.07", "-1.73527, -183.689, 20.6799, 0.59", "-1.9592, -184.925, 20.6597, 0.07", "-2.29003, -186.201, 20.6307, 0.07", "-2.58533, -187.124, 20.6043, 1.03", "-3.15345, -188.618, 20.5585, 0.07", "-3.36196, -189.141, 20.5333, 1.18", "-3.89106, -190.445, 20.4567, 3.17", "-4.97903, -193.124, 20.2669, 0.07", "-5.33572, -194.018, 20.1866, 1.4", "-6.24933, -196.45, 19.9637, 0.07", "-6.69446, -197.861, 19.8006, 0.07", "-6.86925, -198.547, 19.7066, 0.81", "-7.12922, -199.798, 19.5153, 0.07", "-7.31235, -200.989, 19.3049, 0.07", "-7.42628, -202.011, 19.1079, 1.11", "-7.50935, -204.395, 18.5864, 0.07", "-7.51603, -205.008, 18.4581, 0.66" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "5.67163, -14.1444, 12.0765, 0.74", "6.0421, -13.9954, 15.3631, 0.74", "6.327, -13.7788, 17.3184, 0.74", "6.79657, -13.4304, 19.8712, 0.74", "6.99951, -13.2992, 20.8456, 0.74", "7.40968, -13.0892, 22.691, 0.74", "7.74877, -12.9592, 24.2413, 0.74", "8.06043, -12.818, 25.6224, 0.74", "8.36821, -12.6648, 27.4116, 1.18", "8.4874, -12.6568, 28.6936, 1.18", "8.4933, -12.7701, 29.6781, 0.96", "8.3484, -13.0832, 31.0222, 0.96", "8.08058, -13.4103, 32.1337, 0.96", "7.64409, -13.7714, 33.3111, 0.96", "7.09413, -14.0637, 34.3738, 0.96", "6.27318, -14.3573, 35.7597, 0.96", "5.59211, -14.5118, 36.8746, 1.25", "4.75739, -14.613, 38.2545, 2.14", "3.99316, -14.6366, 39.539, 2.51", "2.45846, -14.5002, 41.9996, 0.44", "1.56359, -14.2774, 43.2909, 0.44", "0.525695, -13.9046, 44.6973, 0.44", "-0.330905, -13.5243, 45.8161, 0.44", "-0.819339, -13.2633, 46.4419, 1.03", "-1.65256, -12.7142, 47.5738, 3.02", "-3.03901, -11.6407, 49.6117, 0.29", "-3.73316, -11.1078, 50.7137, 0.29", "-4.07138, -10.8714, 51.3088, 1.03", "-4.60986, -10.5509, 52.4246, 1.84", "-5.36338, -10.2323, 54.2764, 0.52", "-5.88796, -10.1188, 55.7934, 0.52", "-6.47203, -10.1391, 57.6751, 0.52", "-7.03282, -10.2375, 59.4477, 1.11", "-7.50018, -10.3795, 60.8526, 1.03", "-8.22325, -10.6424, 62.8302, 0.66", "-9.14397, -10.9775, 65.114, 0.37", "-9.80354, -11.1803, 66.6689, 0.37", "-10.5207, -11.3355, 68.2643, 1.33", "-11.1617, -11.3995, 69.5981, 2.06", "-12.1749, -11.4007, 71.6777, 0.52", "-12.8863, -11.3351, 73.1857, 0.37", "-13.7065, -11.1749, 74.9832, 1.03", "-14.4081, -10.9617, 76.4516, 1.92", "-15.3804, -10.5956, 78.3699, 0.59", "-16.1985, -10.2374, 79.9183, 0.59", "-17.1139, -9.80365, 81.5001, 1.55", "-18.0618, -9.35719, 82.9158, 1.84", "-19.138, -8.85931, 84.2989, 0.07", "-19.761, -8.57633, 84.9857, 0.07", "-20.3497, -8.29966, 85.5244, 0.07", "-21.1235, -7.93306, 86.1484, 0.59", "-22.407, -7.30357, 87.194, 0.07", "-22.7941, -7.10096, 87.5481, 1.11", "-23.3349, -6.79508, 88.1668, 1.92", "-24.4445, -6.16938, 89.6807, 0.22", "-25.3518, -5.67324, 91.1197, 0.22", "-25.8987, -5.38357, 92.167, 0.22", "-26.2961, -5.18186, 93.0601, 1.77", "-27.1075, -4.77774, 95.1945, 0.29", "-27.7685, -4.44655, 97.1948, 0.29", "-28.2687, -4.19461, 98.8647, 0.52", "-28.7927, -3.89807, 100.798, 0.88", "-29.357, -3.55073, 102.985, 1.25", "-30.1579, -3.02456, 106.339, 0.15", "-30.5865, -2.72284, 108.351, 0.15", "-30.8683, -2.51513, 109.783, 0.44", "-31.4568, -2.11567, 113.035, 0.88", "-31.729, -1.93756, 114.598, 1.18", "-32.4599, -1.44578, 118.957, 0.59", "-33.0555, -1.02821, 122.584, 0.59", "-33.5042, -0.705884, 125.245, 0.29", "-34.7059, 0.172882, 131.985, 0.07", "-35.0843, 0.45781, 133.901, 0.07", "-35.4069, 0.709671, 135.337, 0.07", "-35.8314, 1.03615, 136.796, 0.07", "-36.3827, 1.4273, 138.185, 0.37", "-36.9743, 1.79466, 139.281, 0.15", "-37.9082, 2.29926, 140.54, 0.15", "-38.5463, 2.58988, 141.326, 0.74", "-40.0686, 3.20591, 143.198, 0.15", "-41.0785, 3.58666, 144.444, 0.88", "-42.3018, 4.00507, 146.02, 0.15", "-43.4437, 4.33205, 147.609, 0.15", "-44.1016, 4.47944, 148.622, 0.29", "-45.1861, 4.66937, 150.552, 0.66", "-45.975, 4.76723, 152.132, 1.55", "-46.7628, 4.84083, 153.793, 0.81", "-47.8099, 4.91976, 156.012, 0.44", "-48.5834, 4.96676, 157.624, 0.81", "-49.886, 5.06735, 160.286, 1.84", "-50.4789, 5.12859, 161.47, 2.14", "-51.5048, 5.28489, 163.519, 0.07", "-51.9276, 5.39012, 164.32, 0.22", "-52.4769, 5.57281, 165.263, 0.07", "-53.0627, 5.79775, 166.169, 0.37", "-53.9104, 6.15415, 167.402, 0.37", "-54.4449, 6.38184, 168.214, 0.15", "-55.1231, 6.68215, 169.324, 1.11", "-55.3699, 6.79699, 169.736, 1.33", "-56.4267, 7.34961, 171.485, 0.15", "-57.2333, 7.80368, 172.773, 0.15", "-58.0972, 8.304, 174.116, 0.29", "-58.6803, 8.65248, 175.027, 1.03", "-59.1007, 8.89902, 175.689, 1.77", "-60.6206, 9.80239, 178.061, 0.07", "-61.2159, 10.1709, 178.985, 0.37", "-62.188, 10.7817, 180.581, 0.15", "-63.0799, 11.336, 182.153, 1.99", "-64.8843, 12.407, 185.616, 0.07", "-65.3246, 12.656, 186.531, 0.44", "-65.9252, 12.9864, 187.874, 0.15", "-67.0613, 13.6108, 190.485, 0.44", "-67.7185, 13.9815, 192.069, 1.03", "-68.5881, 14.4663, 194.276, 0.22", "-69.2639, 14.8377, 196.105, 0.22", "-69.5997, 15.0049, 197.016, 0.22", "-70.0994, 15.2272, 198.239, 0.22" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-12.207, 1.90507, -15.1464, 1.33", "-13.6456, 2.33143, -15.5359, 1.33", "-14.9415, 2.80722, -15.9536, 0.66", "-16.0001, 3.25877, -16.3135, 0.44", "-17.0662, 3.74574, -16.707, 0.29", "-17.6959, 4.02211, -16.9443, 1.03", "-18.5386, 4.34702, -17.2503, 0.88", "-19.3015, 4.62308, -17.5578, 0.59", "-19.9296, 4.77631, -17.7944, 0.37", "-20.7209, 4.73809, -17.9878, 0.22", "-21.3436, 4.40965, -17.9961, 0.29", "-22.1474, 3.81196, -17.9026, 0.59", "-22.9267, 3.15724, -17.7323, 0.44", "-23.6379, 2.57212, -17.5332, 0.74", "-24.132, 2.19382, -17.3801, 0.96", "-25.2079, 1.53739, -16.9846, 0.29", "-25.6034, 1.40541, -16.8341, 0.29", "-26.2215, 1.34515, -16.6021, 0.88", "-27.2319, 1.41503, -16.2175, 1.55", "-27.6449, 1.4864, -16.0521, 1.62", "-28.5604, 1.68189, -15.6499, 1.03", "-29.764, 1.97766, -15.0794, 0.37", "-30.2819, 2.09146, -14.8214, 0.96", "-31.3196, 2.26893, -14.2947, 2.14", "-32.0288, 2.35248, -13.9411, 2.14", "-33.71, 2.4374, -13.173, 0.29", "-34.5828, 2.40561, -12.8355, 0.22", "-35.0843, 2.34808, -12.6763, 0.22", "-35.7779, 2.24612, -12.494, 0.29", "-36.424, 2.13707, -12.3645, 0.74", "-37.5456, 1.95809, -12.2178, 0.96", "-38.5047, 1.83953, -12.146, 0.37", "-39.5544, 1.77923, -12.0849, 0.22", "-40.0781, 1.83152, -12.0422, 0.15", "-40.5813, 1.95253, -11.9794, 0.15", "-41.1546, 2.14119, -11.8614, 0.15", "-41.7553, 2.35472, -11.6975, 0.29", "-42.2855, 2.50899, -11.5368, 1.03", "-43.3346, 2.71654, -11.2181, 2.58", "-44.1709, 2.80727, -10.9831, 2.21", "-45.6654, 2.88486, -10.6005, 0.22", "-46.1923, 2.88568, -10.4825, 0.22", "-46.8021, 2.8711, -10.3707, 0.22", "-47.3906, 2.86907, -10.2891, 0.22", "-48.1579, 2.8631, -10.214, 0.22", "-48.783, 2.8567, -10.1837, 1.18", "-49.8142, 2.85122, -10.1747, 2.58", "-50.6337, 2.88548, -10.1607, 3.39", "-52.5029, 3.07056, -10.1007, 0.15", "-53.0182, 3.14021, -10.0774, 0.15", "-53.7711, 3.27844, -10.0339, 0.15", "-54.1913, 3.39167, -10.0071, 0.22", "-55.1378, 3.77542, -9.9388, 0.29", "-55.7631, 4.08835, -9.90443, 0.59", "-56.2029, 4.32982, -9.89072, 0.88", "-56.8002, 4.66972, -9.90143, 0.88", "-57.5937, 5.10894, -9.95602, 0.29", "-58.4133, 5.50088, -10.0085, 0.22", "-59.0635, 5.75467, -10.0412, 0.22", "-59.8267, 6.03194, -10.0688, 0.22", "-60.4345, 6.24434, -10.088, 1.18", "-61.5701, 6.62878, -10.1409, 2.73", "-62.7095, 7.02938, -10.2063, 2.95", "-65.0535, 7.97163, -10.3582, 0.22", "-66.1055, 8.48028, -10.4265, 0.22", "-66.9014, 8.92696, -10.4846, 0.44", "-67.6111, 9.36889, -10.5455, 1.33", "-68.5649, 10.036, -10.6582, 2.88", "-69.7572, 10.9836, -10.8495, 0.15", "-70.3248, 11.4918, -10.9297, 0.15", "-70.7773, 11.8953, -10.9517, 0.29", "-71.4842, 12.5077, -10.9252, 0.22", "-72.2847, 13.1425, -10.8346, 0.22", "-72.8416, 13.5558, -10.7533, 0.15", "-73.6715, 14.1074, -10.6069, 0.29", "-74.5734, 14.6413, -10.4277, 0.29", "-75.2569, 15.024, -10.2647, 1.55", "-76.3046, 15.5978, -9.94019, 3.47" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-12.207, 1.90507, -15.1464, 0.59", "-11.4226, 1.05815, -16.8989, 0.59", "-11.0054, 0.607748, -17.8308, 0.52", "-10.6097, 0.180543, -18.7148, 0.52", "-10.1424, -0.324, -19.7588, 1.03", "-9.41775, -1.10643, -21.3778, 1.7", "-9.05499, -1.49809, -22.1882, 1.7" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "5.53658, 12.1386, 7.11596, 0.22", "6.39333, 13.3941, 5.70748, 0.22", "6.78312, 14.0809, 4.95082, 0.22", "7.22112, 14.8716, 4.08475, 0.22", "7.42704, 15.2365, 3.69778, 0.81", "7.7857, 15.8327, 3.07305, 1.33", "8.42891, 16.8075, 2.04008, 0.37", "8.77777, 17.3273, 1.47514, 0.37", "9.68774, 18.3943, 0.280359, 0.22", "10.0754, 18.8065, -0.174086, 0.22", "10.6182, 19.3142, -0.774016, 0.66", "11.3641, 19.8968, -1.5196, 1.47", "11.7857, 20.1529, -1.87004, 1.47", "12.9332, 20.6866, -2.69777, 0.3" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "5.53658, 12.1386, 7.11596, 2.06", "4.94206, 13.0096, 8.00279, 2.06", "4.15978, 14.1557, 9.16969, 0.66", "3.36444, 15.3208, 10.3561, 0.66", "2.84672, 16.0793, 11.1283, 0.66" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "27.1444, -13.2253, -8.26663, 0.37", "27.8028, -13.6888, -8.0202, 0.37", "28.2009, -13.9618, -7.80942, 0.74", "28.739, -14.3393, -7.48702, 1.18", "29.3336, -14.7514, -7.13482, 1.33", "30.2781, -15.4113, -6.57598, 0.37", "30.9952, -15.8919, -6.17313, 0.37", "31.6535, -16.2978, -5.79911, 0.81", "32.1778, -16.6087, -5.51091, 1.47", "32.96, -17.0659, -5.13142, 1.77", "34.0435, -17.663, -4.75518, 0.29", "34.7237, -18.0098, -4.66366, 0.22", "34.9883, -18.1471, -4.67713, 0.22", "35.4603, -18.406, -4.77488, 0.22", "36.1653, -18.8143, -5.01274, 0.29", "36.652, -19.1078, -5.22941, 0.96", "37.5956, -19.7117, -5.6908, 1.7", "38.4635, -20.302, -6.10048, 0.74", "39.108, -20.7619, -6.37558, 0.37", "39.9888, -21.4493, -6.66757, 0.22", "40.5768, -21.9386, -6.79756, 0.22", "41.1302, -22.4141, -6.8958, 0.22", "41.5015, -22.74, -6.94989, 0.52", "42.027, -23.2185, -7.02044, 1.18", "43.104, -24.2538, -7.17134, 0.29", "43.7776, -24.9345, -7.30148, 0.29", "44.5514, -25.7405, -7.51872, 0.74", "45.0238, -26.2313, -7.69794, 1.7", "45.6638, -26.8895, -7.9808, 2.36", "46.7373, -27.976, -8.50633, 0.29", "47.4766, -28.7122, -8.89197, 0.22", "48.3002, -29.5062, -9.28282, 0.59", "49.2991, -30.4096, -9.68489, 0.22", "49.8876, -30.8965, -9.91009, 0.81", "50.3454, -31.2401, -10.074, 1.47", "50.8473, -31.5864, -10.2514, 2.14", "52.3133, -32.5455, -10.7471, 0.22", "53.7137, -33.4196, -11.1957, 0.29", "54.6408, -33.9721, -11.4866, 0.29", "55.1539, -34.2705, -11.6545, 1.18", "55.8337, -34.6483, -11.8981, 2.14", "56.2868, -34.8953, -12.0851, 0.29" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "27.1444, -13.2253, -8.26663, 0.22", "27.224, -12.4811, -8.7991, 0.22", "27.2716, -11.8248, -9.1836, 0.22", "27.302, -11.5516, -9.31177, 0.22", "27.3638, -11.1381, -9.46775, 0.22", "27.4969, -10.4984, -9.68891, 0.29", "27.7025, -9.72466, -9.94441, 0.37", "27.9101, -9.02507, -10.1614, 0.81", "28.2036, -8.23567, -10.4326, 1.03", "28.5676, -7.52493, -10.7427, 0.66", "29.2513, -6.61242, -11.2547, 0.29", "29.5996, -6.32287, -11.4991, 0.22", "30.0887, -6.22407, -11.7857, 0.22", "30.7189, -6.30531, -12.109, 0.37", "31.3256, -6.48222, -12.3815, 1.03", "31.981, -6.71948, -12.6397, 2.14", "32.5434, -6.90638, -12.7862, 2.14", "34.5248, -7.38167, -13.1069, 0.29", "35.1199, -7.45518, -13.1423, 0.29", "35.56, -7.4682, -13.1519, 0.74", "36.2692, -7.42572, -13.1802, 0.88", "37.9392, -7.18188, -13.3406, 0.37", "38.5513, -7.06144, -13.466, 0.44", "39.4113, -6.82504, -13.692, 0.29", "40.2797, -6.58248, -13.9637, 0.96", "41.4479, -6.26596, -14.4109, 1.77", "42.2978, -6.06439, -14.8379, 1.99", "43.6776, -5.82614, -15.8276, 0.29" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "40.1343, -1.3968, 0.0, 0.191972", "55.1293, -1.78342, 0.0, 0.191972", "70.1244, -2.17003, 0.0, 0.191972" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-76.3046, 15.5978, -9.94019, 0.29", "-77.7671, 13.7807, -9.57659, 0.29", "-78.5422, 12.8176, -9.38388, 0.52", "-79.1908, 12.0118, -9.22264, 0.07", "-79.5967, 11.5074, -9.1217, 0.15", "-80.6685, 10.1757, -8.85524, 0.15", "-81.0274, 9.72978, -8.766, 0.15" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "-76.3046, 15.5978, -9.94019, 0.15", "-77.7263, 17.0294, -10.1614, 0.15", "-78.4861, 17.816, -10.2029, 0.66", "-79.012, 18.3594, -10.2048, 0.07", "-79.5725, 18.9324, -10.1924, 0.81", "-79.8748, 19.2394, -10.1945, 0.81", "-80.819, 20.1646, -10.173, 0.15", "-81.5932, 20.9118, -10.0865, 0.15", "-82.2075, 21.4955, -9.98976, 1.18", "-82.7485, 22.0179, -9.90196, 2.21", "-83.907, 23.1707, -9.66411, 0.07", "-84.7986, 24.0811, -9.4694, 0.15", "-85.3279, 24.6149, -9.34252, 0.15", "-85.8121, 25.1053, -9.24304, 0.81", "-86.7362, 26.0413, -9.07559, 2.14", "-88.602, 27.8897, -8.77149, 0.29", "-89.6789, 28.9617, -8.63275, 0.22", "-90.6803, 29.952, -8.56553, 0.15", "-91.7525, 30.9838, -8.53715, 1.03", "-92.259, 31.4595, -8.55058, 2.21", "-93.7926, 32.8527, -8.69271, 0.07", "-94.5962, 33.561, -8.84835, 0.07", "-94.824, 33.7629, -8.90088, 0.29", "-95.6081, 34.4726, -9.09745, 0.81", "-96.4537, 35.2275, -9.27598, 0.15", "-97.1627, 35.8527, -9.44409, 0.29", "-97.9432, 36.5316, -9.6454, 0.15", "-98.3495, 36.8738, -9.73456, 0.96", "-98.9975, 37.4305, -9.86525, 1.84", "-100.248, 38.5149, -10.0075, 0.07", "-100.641, 38.8604, -10.0118, 0.22", "-101.209, 39.3716, -9.97082, 0.15", "-101.827, 39.9381, -9.86872, 0.29", "-102.589, 40.6347, -9.71453, 0.22", "-103.543, 41.5099, -9.49792, 1.33", "-104.336, 42.1976, -9.30502, 2.73", "-104.931, 42.682, -9.16722, 2.73", "-106.897, 44.2081, -8.73383, 0.15", "-107.651, 44.7711, -8.58027, 1.47", "-108.329, 45.2612, -8.45321, 2.43", "-110.172, 46.555, -8.18549, 0.07", "-110.974, 47.1013, -8.06778, 1.11", "-112.043, 47.7993, -7.91973, 0.15", "-112.802, 48.2656, -7.81428, 0.15" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "2.84672, 16.0793, 11.1283, 0.52", "2.00823, 16.5109, 11.1212, 0.52", "1.34599, 16.9044, 11.157, 1.03", "0.703902, 17.3663, 11.2585, 0.88", "-0.0538031, 17.9699, 11.424, 0.22", "-1.07636, 18.836, 11.6829, 0.52", "-1.62545, 19.3332, 11.8336, 0.15", "-2.16596, 19.894, 12.0463, 0.29", "-2.8927, 20.7205, 12.3813, 0.29", "-3.06117, 20.9235, 12.4635, 0.29", "-3.44988, 21.4083, 12.6441, 1.18", "-4.00624, 22.1342, 12.9008, 2.58", "-4.68075, 23.0002, 13.2025, 2.58", "-6.3555, 25.0741, 13.9138, 0.37", "-7.09312, 25.9627, 14.2109, 0.37", "-7.93798, 26.9734, 14.5524, 0.22", "-8.44295, 27.5688, 14.7589, 0.44", "-8.81375, 27.9974, 14.9092, 1.33", "-9.4011, 28.6739, 15.1416, 2.06", "-10.9087, 30.399, 15.7647, 0.15", "-11.3638, 30.919, 15.9548, 0.74", "-12.0008, 31.6569, 16.2139, 2.06", "-12.1077, 31.7837, 16.2562, 2.06", "-13.5202, 33.509, 16.8146, 0.22", "-13.9428, 34.0625, 16.9835, 0.74", "-14.4015, 34.7189, 17.1865, 1.03", "-15.1693, 35.8654, 17.5333, 0.15", "-15.6038, 36.5888, 17.7367, 0.88", "-15.9729, 37.241, 17.9088, 1.25", "-16.819, 38.882, 18.3207, 0.22", "-17.1886, 39.642, 18.5032, 1.55", "-17.5431, 40.4171, 18.6968, 2.43", "-18.7323, 43.0301, 19.3605, 0.22", "-19.0543, 43.7291, 19.5371, 0.22", "-19.5693, 44.8022, 19.8147, 0.22", "-19.8164, 45.2918, 19.9398, 0.88", "-20.4541, 46.4702, 20.2349, 2.88", "-21.6841, 48.5141, 20.7499, 0.15", "-22.1623, 49.2051, 20.9188, 0.37", "-23.2005, 50.6002, 21.2567, 0.07", "-23.4715, 50.9372, 21.3388, 1.03", "-23.9484, 51.5045, 21.4784, 1.55", "-25.1363, 52.8361, 21.8113, 0.15", "-25.6841, 53.4265, 21.9734, 0.96", "-26.7088, 54.5147, 22.3023, 0.07", "-27.2795, 55.1322, 22.5164, 0.07", "-27.6744, 55.5711, 22.6658, 0.52", "-28.2477, 56.2306, 22.8808, 1.4", "-28.845, 56.9708, 23.0651, 0.37", "-29.6653, 58.0318, 23.2925, 0.07", "-30.5048, 59.1609, 23.4584, 0.07", "-31.0091, 59.8702, 23.5283, 0.81", "-31.6959, 60.8676, 23.6038, 2.43", "-33.046, 62.87, 23.7186, 0.07", "-33.9454, 64.1979, 23.8269, 0.07", "-34.6283, 65.1974, 23.9563, 1.18", "-35.6691, 66.7018, 24.2578, 0.15", "-36.0289, 67.212, 24.4027, 0.96", "-36.4835, 67.8074, 24.6209, 1.99", "-37.7101, 69.2297, 25.3121, 0.15", "-38.4515, 69.9936, 25.7224, 0.96", "-39.2416, 70.6962, 26.1672, 0.07", "-39.7658, 71.0848, 26.4136, 0.29", "-40.7762, 71.7734, 26.7848, 0.07", "-41.2131, 72.0541, 26.8993, 0.07", "-41.9543, 72.511, 27.0287, 1.33", "-42.5602, 72.9017, 27.0922, 1.62", "-44.2099, 74.1819, 27.2589, 0.15", "-44.8549, 74.7873, 27.3282, 0.44", "-45.8549, 75.9048, 27.4424, 0.15", "-46.3554, 76.5337, 27.5166, 1.03", "-47.0078, 77.4352, 27.6662, 2.21", "-48.3444, 79.4485, 28.0665, 0.15", "-48.7607, 80.1282, 28.2238, 0.59", "-48.9953, 80.5077, 28.3117, 1.03", "-49.5111, 81.3304, 28.4701, 0.07", "-50.1459, 82.2952, 28.6192, 0.15", "-50.7034, 83.0866, 28.7064, 0.88", "-50.807, 83.2234, 28.7043, 0.88", "-51.8689, 84.6081, 28.5228, 0.15", "-52.6825, 85.6707, 28.2611, 0.22", "-52.9113, 85.974, 28.1576, 0.81", "-53.4166, 86.6361, 27.8776, 1.55", "-53.8943, 87.2453, 27.5942, 2.14", "-54.8097, 88.3804, 27.0504, 0.59", "-55.3531, 88.9991, 26.7428, 0.22", "-56.3412, 90.0346, 26.206, 0.15", "-56.7163, 90.4048, 26.0024, 0.15", "-56.9748, 90.6465, 25.8667, 0.44", "-57.2708, 90.9133, 25.7104, 0.44", "-58.16, 91.7188, 25.2286, 0.22", "-59.5105, 92.9901, 24.4681, 0.22", "-59.7841, 93.2612, 24.3098, 1.62", "-60.2809, 93.7786, 24.042, 2.58", "-61.9657, 95.5979, 23.2314, 0.07", "-62.315, 95.9892, 23.0863, 0.07", "-62.7136, 96.4574, 22.9617, 0.29", "-63.1532, 96.9685, 22.9086, 0.52", "-64.0634, 98.0304, 22.9188, 0.15", "-64.5686, 98.6334, 22.9839, 0.81", "-64.9734, 99.1256, 23.0875, 1.55", "-65.6257, 99.8955, 23.2669, 0.37", "-66.7028, 101.151, 23.5812, 0.07", "-67.3528, 101.922, 23.7855, 0.07", "-67.7714, 102.447, 23.9263, 0.88", "-68.0069, 102.751, 23.9957, 0.88" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "2.84672, 16.0793, 11.1283, 0.29", "2.74147, 16.1508, 11.887, 0.29", "2.57305, 16.4062, 12.9789, 0.29", "2.41286, 16.8463, 13.8855, 0.29", "2.18858, 17.604, 15.1114, 0.29", "2.01036, 18.2515, 16.0453, 0.96", "1.75013, 19.3724, 17.5661, 1.33", "1.58519, 20.2844, 18.5991, 2.65", "1.3133, 22.1096, 20.5174, 0.52", "1.20877, 22.8465, 21.3143, 0.52", "1.07142, 23.8053, 22.4086, 0.59", "0.907703, 24.9473, 23.818, 1.84", "0.853686, 25.5281, 24.6135, 1.7", "0.78441, 27.1114, 27.0957, 0.44", "0.7989, 28.1379, 28.9026, 1.25", "0.866159, 28.9482, 30.3343, 2.51", "0.937658, 29.3875, 31.1134, 2.51", "1.31521, 30.6171, 33.2977, 0.44", "1.62716, 31.2633, 34.4608, 0.37", "2.0272, 31.8534, 35.4758, 0.37", "2.37634, 32.2887, 36.2183, 2.21", "2.6687, 32.6132, 36.7801, 2.73", "3.63479, 33.5793, 38.5431, 0.37", "4.21069, 34.1023, 39.6229, 0.37", "4.83611, 34.6867, 40.9086, 0.37", "5.37346, 35.2392, 42.2371, 0.96", "5.67153, 35.5876, 43.1451, 2.58", "6.05936, 36.1139, 44.6169, 0.15", "6.37045, 36.6193, 46.0131, 0.15", "6.83089, 37.3882, 47.9975, 0.37", "7.25376, 38.1049, 49.7502, 0.37", "7.58527, 38.6715, 51.0763, 1.18", "8.02378, 39.4164, 52.7623, 1.4", "8.27633, 39.8583, 53.7304, 0.37", "8.57896, 40.396, 54.8288, 1.4", "8.93406, 41.041, 56.1376, 0.29", "9.19825, 41.5627, 57.2199, 0.66", "9.45071, 42.1669, 58.4876, 0.37", "9.719, 43.2838, 60.8441, 0.88", "9.74561, 43.5794, 61.5004, 1.11", "9.75859, 44.2338, 63.0633, 1.11", "9.7504, 45.015, 64.9585, 1.11", "9.7332, 45.3998, 65.8628, 2.29", "9.67682, 46.4059, 68.1188, 0.44", "9.67371, 47.1138, 69.6897, 0.59", "9.72604, 47.8145, 71.2904, 0.59", "9.78725, 48.1786, 72.0875, 0.59", "9.9182, 48.6728, 73.1804, 0.22", "10.1282, 49.2522, 74.5176, 0.37", "10.4574, 49.9891, 76.1886, 1.55", "10.6868, 50.4964, 77.2778, 2.36", "11.2541, 51.8792, 80.0755, 0.22", "11.5884, 52.6878, 81.7276, 0.22", "11.8172, 53.2599, 82.9175, 0.22", "11.9928, 53.7432, 83.895, 1.18", "12.1208, 54.1494, 84.7037, 1.47", "12.4553, 55.3804, 87.1868, 0.66", "12.7248, 56.5803, 89.6476, 0.15", "12.9114, 57.5532, 91.6358, 0.66", "13.0456, 58.3132, 93.1726, 1.33", "13.1993, 59.2953, 95.1753, 0.52", "13.3163, 60.1518, 96.9618, 1.11", "13.4365, 61.0212, 98.7171, 1.33", "13.5689, 61.9052, 100.435, 0.22", "13.6472, 62.3135, 101.208, 0.81", "13.8794, 63.3364, 103.131, 0.22", "14.2387, 64.6062, 105.521, 0.74", "14.5114, 65.3744, 107.037, 0.22", "14.889, 66.2636, 108.884, 0.15", "15.1905, 66.8917, 110.185, 0.29", "15.66, 67.7553, 111.944, 0.07", "16.2671, 68.7531, 113.818, 0.07", "16.9947, 69.8138, 115.683, 0.07", "17.3249, 70.2792, 116.464, 0.07", "18.0804, 71.3733, 118.182, 0.37", "18.8768, 72.5541, 119.924, 0.37", "19.9978, 74.2553, 122.238, 0.07", "20.6505, 75.3013, 123.553, 1.03", "21.6561, 76.9438, 125.615, 0.22", "22.6583, 78.5828, 127.742, 0.22", "22.9198, 79.0077, 128.372, 1.33", "23.1732, 79.4211, 129.026, 1.92", "24.0445, 80.7721, 131.403, 0.07", "24.5858, 81.5748, 132.956, 0.07", "24.837, 81.9078, 133.663, 0.07", "25.8669, 83.1769, 136.53, 0.37", "26.3971, 83.8032, 138.056, 0.37", "26.8983, 84.3714, 139.565, 0.37", "27.2525, 84.7741, 140.606, 0.37", "27.5196, 85.1028, 141.349, 0.07", "27.8384, 85.5231, 142.227, 0.59", "28.7069, 86.8026, 144.505, 0.07", "29.469, 88.0704, 146.668, 0.52", "29.8453, 88.78, 147.801, 0.07", "30.0799, 89.2729, 148.582, 0.07", "30.5349, 90.3963, 150.318, 0.07", "30.6668, 90.8155, 150.921, 0.37", "30.8915, 91.9036, 152.362, 0.07", "30.9266, 92.2028, 152.745, 0.29", "31.0166, 93.6687, 154.619, 0.15", "31.0507, 94.4018, 155.474, 1.18", "31.1037, 95.5372, 156.708, 1.7", "31.1736, 97.3249, 158.639, 0.15", "31.2024, 98.3921, 159.768, 0.15", "31.2226, 99.36, 160.804, 1.11", "31.2419, 101.132, 162.727, 0.07", "31.2529, 102.32, 164.061, 0.07", "31.2555, 103.38, 165.266, 0.66", "31.2421, 104.3, 166.32, 1.25", "31.2105, 105.01, 167.166, 1.25", "31.1102, 106.361, 168.795, 0.52", "31.0548, 106.948, 169.497, 0.52", "31.013, 107.48, 170.103, 0.29", "30.9701, 108.417, 171.116, 1.18", "30.934, 109.711, 172.428, 0.15", "30.9245, 110.434, 173.162, 0.44", "30.9401, 111.497, 174.325, 0.07", "30.9624, 112.265, 175.265, 0.07", "30.9952, 112.836, 176.012, 0.37", "31.0832, 113.811, 177.278, 1.77", "31.3189, 115.553, 179.408, 0.29", "31.5493, 116.943, 181.057, 0.29", "31.7271, 117.9, 182.099, 0.29", "31.9333, 118.845, 183.053, 1.33", "32.1612, 119.756, 183.933, 2.88", "32.8273, 122.083, 186.011, 0.07", "33.173, 123.203, 186.904, 0.07", "33.377, 123.852, 187.404, 0.96", "33.8038, 125.191, 188.475, 0.15", "34.2193, 126.448, 189.554, 0.15", "34.4789, 127.247, 190.318, 1.03", "34.8497, 128.409, 191.557, 0.29", "35.2334, 129.676, 193.015, 0.29", "35.5067, 130.626, 194.194, 1.47", "35.7055, 131.39, 195.198, 2.95", "36.1826, 133.485, 197.989, 0.22", "36.4108, 134.613, 199.516, 0.22", "36.4789, 135.054, 200.118, 0.22", "36.5707, 135.86, 201.27, 0.88", "36.6219, 136.561, 202.332, 1.84", "36.68, 137.741, 204.159, 0.15", "36.7146, 138.661, 205.579, 1.25", "36.7594, 140.247, 207.978, 0.52", "36.8086, 142.178, 210.936, 0.15", "36.8255, 143.257, 212.657, 0.37" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "43.6776, -5.82614, -15.8276, 0.22", "44.0982, -5.69847, -16.5091, 0.22", "44.6033, -5.51065, -17.2116, 0.59", "45.0318, -5.32207, -17.7463, 0.59", "45.7333, -5.0134, -18.6216, 0.81", "46.463, -4.69232, -19.5321, 1.55", "47.0838, -4.41912, -20.3068, 2.14", "47.9784, -4.05637, -21.393, 0.22", "48.4579, -3.84719, -21.9931, 0.44" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "43.6776, -5.82614, -15.8276, 0.15", "44.1956, -6.06248, -15.6368, 0.15", "44.7651, -6.30843, -15.5053, 0.29", "45.7106, -6.6836, -15.3551, 0.15", "46.4275, -6.94111, -15.2724, 0.74", "46.9795, -7.12034, -15.224, 0.96", "48.2923, -7.50161, -15.126, 0.22", "49.1845, -7.71319, -15.1212, 0.37", "49.7723, -7.82791, -15.1753, 0.88", "50.4064, -7.94954, -15.3169, 1.25", "50.9725, -8.05875, -15.4866, 0.81", "51.6766, -8.17747, -15.7234, 0.22", "52.6241, -8.31682, -16.0582, 0.15", "53.2991, -8.42496, -16.2762, 0.52", "54.2157, -8.58443, -16.548, 1.03", "55.0342, -8.74288, -16.7777, 0.22", "55.3999, -8.81678, -16.8663, 0.22", "56.2553, -8.9908, -17.052, 0.37", "56.8767, -9.11195, -17.1593, 1.18", "58.0856, -9.32388, -17.3298, 2.43", "59.931, -9.61294, -17.5613, 0.22", "61.2271, -9.80357, -17.7224, 0.15", "61.8231, -9.88708, -17.7944, 0.88", "62.4974, -9.96227, -17.8733, 1.25", "63.8237, -10.051, -18.055, 0.15", "64.5011, -10.0589, -18.1143, 0.22", "65.6082, -9.98435, -18.1533, 0.15", "66.0481, -9.93394, -18.169, 0.29", "66.6161, -9.86187, -18.2033, 0.29", "67.777, -9.69493, -18.3512, 0.22", "69.1263, -9.47408, -18.6258, 1.33", "70.0728, -9.31522, -18.8691, 2.65", "70.7133, -9.22571, -19.0628, 2.65", "72.6129, -9.0535, -19.6797, 0.15", "73.5151, -9.02882, -19.9835, 0.29", "74.0199, -9.05021, -20.1492, 0.29", "74.4381, -9.08461, -20.2942, 0.22", "75.0899, -9.15164, -20.4831, 0.22", "75.67, -9.20907, -20.6276, 0.59", "76.2473, -9.27417, -20.7451, 0.81", "77.3789, -9.44775, -20.9253, 0.22", "78.2463, -9.58702, -21.0478, 0.22", "79.3923, -9.72264, -21.2034, 0.15", "79.805, -9.74881, -21.27, 0.29", "80.5957, -9.77077, -21.4208, 0.66", "81.7071, -9.78302, -21.7014, 0.07", "82.2658, -9.77831, -21.8721, 0.15", "83.2537, -9.76075, -22.1753, 0.15", "84.0278, -9.71817, -22.3929, 0.15", "84.2703, -9.68857, -22.4569, 0.66", "85.2284, -9.45189, -22.6955, 1.4", "86.1934, -9.12473, -22.9448, 2.88", "87.6739, -8.54471, -23.3133, 0.22", "88.4432, -8.23316, -23.4892, 0.52", "89.0234, -7.9814, -23.5971, 0.52", "90.3857, -7.33262, -23.8182, 0.15", "91.285, -6.83221, -23.9289, 0.15", "91.9534, -6.39473, -24.0311, 0.15" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_16", "dend_11", "dend_6", "dend_5", "dend_0", "dend_18", "dend_17", "dend_13", "dend_12", "dend_10", "dend_7", "dend_4", "dend_1", "dend_15", "dend_14", "dend_9", "dend_8", "dend_3", "dend_2" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_16", "dend_11", "dend_6", "dend_5", "dend_0", "dend_18", "dend_17", "dend_13", "dend_12", "dend_10", "dend_7", "dend_4", "dend_1", "dend_15", "dend_14", "dend_9", "dend_8", "dend_3", "dend_2" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_7", "dend_7", "dend_7", "dend_7", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.2499998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dNAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dNAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate dNAC222_L6_SBC_fb9380858b_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_16, id: dend_16, parent: soma_0
create dend_16
public dend_16
// Section: dend_11, id: dend_11, parent: soma_0
create dend_11
public dend_11
// Section: dend_6, id: dend_6, parent: soma_0
create dend_6
public dend_6
// Section: dend_5, id: dend_5, parent: soma_0
create dend_5
public dend_5
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_18, id: dend_18, parent: dend_16
create dend_18
public dend_18
// Section: dend_17, id: dend_17, parent: dend_16
create dend_17
public dend_17
// Section: dend_13, id: dend_13, parent: dend_11
create dend_13
public dend_13
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12
// Section: dend_10, id: dend_10, parent: dend_6
create dend_10
public dend_10
// Section: dend_7, id: dend_7, parent: dend_6
create dend_7
public dend_7
// Section: dend_4, id: dend_4, parent: dend_0
create dend_4
public dend_4
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_15, id: dend_15, parent: dend_13
create dend_15
public dend_15
// Section: dend_14, id: dend_14, parent: dend_13
create dend_14
public dend_14
// Section: dend_9, id: dend_9, parent: dend_7
create dend_9
public dend_9
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_3, id: dend_3, parent: dend_1
create dend_3
public dend_3
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_16, dend_11, dend_6, dend_5, dend_0, dend_18, dend_17, dend_13, dend_12, dend_10, dend_7, dend_4, dend_1, dend_15, dend_14, dend_9, dend_8, dend_3, dend_2]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_16, dend_11, dend_6, dend_5, dend_0, dend_18, dend_17, dend_13, dend_12, dend_10, dend_7, dend_4, dend_1, dend_15, dend_14, dend_9, dend_8, dend_3, dend_2]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_17
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_7, dend_7, dend_7, dend_7, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dNAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dNAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_16(0), soma_0(0.450000000456733)
    connect dend_11(0), soma_0(0.450000000456733)
    connect dend_6(0), soma_0(0.450000000456733)
    connect dend_5(0), soma_0(0.450000000456733)
    connect dend_0(0), soma_0(0.450000000456733)
    connect axon_0(0), soma_0(1.0)
    connect dend_18(0), dend_16(1.0)
    connect dend_17(0), dend_16(1.0)
    connect dend_13(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)
    connect dend_10(0), dend_6(1.0)
    connect dend_7(0), dend_6(1.0)
    connect dend_4(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_15(0), dend_13(1.0)
    connect dend_14(0), dend_13(1.0)
    connect dend_9(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_3(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -10.7291, -0.0854046, 0.0, 3.99032 ) }
    soma_0 { pt3dadd( -9.68547, -0.112313, 0.0, 6.86778 ) }
    soma_0 { pt3dadd( -8.64179, -0.139222, 0.0, 9.47623 ) }
    soma_0 { pt3dadd( -7.59812, -0.166131, 0.0, 11.571 ) }
    soma_0 { pt3dadd( -6.55444, -0.193039, 0.0, 12.9501 ) }
    soma_0 { pt3dadd( -5.51077, -0.219948, 0.0, 14.0712 ) }
    soma_0 { pt3dadd( -4.4671, -0.246857, 0.0, 14.5683 ) }
    soma_0 { pt3dadd( -3.42342, -0.273765, 0.0, 15.0452 ) }
    soma_0 { pt3dadd( -2.37975, -0.300674, 0.0, 15.2095 ) }
    soma_0 { pt3dadd( -1.33607, -0.327583, 0.0, 15.2281 ) }
    soma_0 { pt3dadd( -0.292397, -0.354492, 0.0, 15.0943 ) }
    soma_0 { pt3dadd( 0.751277, -0.3814, 0.0, 14.7073 ) }
    soma_0 { pt3dadd( 1.79495, -0.408309, 0.0, 14.315 ) }
    soma_0 { pt3dadd( 2.83863, -0.435218, 0.0, 13.884 ) }
    soma_0 { pt3dadd( 3.8823, -0.462126, 0.0, 13.321 ) }
    soma_0 { pt3dadd( 4.92598, -0.489035, 0.0, 12.6944 ) }
    soma_0 { pt3dadd( 5.96965, -0.515944, 0.0, 11.6806 ) }
    soma_0 { pt3dadd( 7.01332, -0.542852, 0.0, 10.285 ) }
    soma_0 { pt3dadd( 8.057, -0.569761, 0.0, 8.67743 ) }
    soma_0 { pt3dadd( 9.10067, -0.59667, 0.0, 6.63248 ) }
    soma_0 { pt3dadd( 10.1443, -0.623578, 0.0, 3.86307 ) }
    // Section: dend_16, id: dend_16, parent: soma_0 (entry count 21/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 4.18666, -5.58001, 7.75, 0.52 ) }
    dend_16 { pt3dadd( 4.33777, -6.23842, 8.12143, 0.52 ) }
    dend_16 { pt3dadd( 4.52731, -7.20906, 8.67101, 0.52 ) }
    dend_16 { pt3dadd( 4.70462, -8.21334, 9.17887, 0.88 ) }
    dend_16 { pt3dadd( 4.89589, -9.29675, 9.72674, 0.88 ) }
    dend_16 { pt3dadd( 5.11692, -10.5487, 10.3598, 0.74 ) }
    dend_16 { pt3dadd( 5.30241, -11.5994, 10.8911, 1.18 ) }
    dend_16 { pt3dadd( 5.47601, -12.679, 11.4265, 2.21 ) }
    dend_16 { pt3dadd( 5.67163, -14.1444, 12.0765, 3.39 ) }
    // Section: dend_11, id: dend_11, parent: soma_0 (entry count 30/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( -6.05334, -2.23051, -15.93, 1.55 ) }
    dend_11 { pt3dadd( -6.42561, -1.98033, -15.8826, 1.55 ) }
    dend_11 { pt3dadd( -7.65003, -1.15746, -15.7267, 1.55 ) }
    dend_11 { pt3dadd( -9.22045, -0.102055, -15.5267, 0.52 ) }
    dend_11 { pt3dadd( -10.0331, 0.444102, -15.4232, 0.52 ) }
    dend_11 { pt3dadd( -10.6531, 0.860769, -15.3443, 1.18 ) }
    dend_11 { pt3dadd( -12.207, 1.90507, -15.1464, 2.65 ) }
    // Section: dend_6, id: dend_6, parent: soma_0 (entry count 37/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 5.14666, 5.50799, 7.36, 0.37 ) }
    dend_6 { pt3dadd( 5.24842, 6.42757, 7.3262, 0.37 ) }
    dend_6 { pt3dadd( 5.30455, 7.29164, 7.29558, 0.52 ) }
    dend_6 { pt3dadd( 5.38072, 8.4643, 7.25402, 0.66 ) }
    dend_6 { pt3dadd( 5.42112, 9.08628, 7.23198, 0.88 ) }
    dend_6 { pt3dadd( 5.47226, 9.87364, 7.20408, 1.55 ) }
    dend_6 { pt3dadd( 5.53352, 10.8167, 7.17066, 2.73 ) }
    dend_6 { pt3dadd( 5.53658, 12.1386, 7.11596, 3.83 ) }
    // Section: dend_5, id: dend_5, parent: soma_0 (entry count 45/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -10.1633, 1.40249, -1.79, 0.29 ) }
    dend_5 { pt3dadd( -10.7335, 1.51096, -1.7161, 0.29 ) }
    dend_5 { pt3dadd( -11.3775, 1.74666, -1.61419, 0.29 ) }
    dend_5 { pt3dadd( -11.9527, 2.0602, -1.51989, 0.29 ) }
    dend_5 { pt3dadd( -12.3894, 2.36717, -1.45098, 0.22 ) }
    dend_5 { pt3dadd( -12.9275, 2.87541, -1.35096, 0.22 ) }
    dend_5 { pt3dadd( -13.1866, 3.14295, -1.29292, 0.52 ) }
    dend_5 { pt3dadd( -13.8379, 3.92298, -1.13696, 1.25 ) }
    dend_5 { pt3dadd( -14.3148, 4.55057, -1.01196, 1.25 ) }
    dend_5 { pt3dadd( -14.8022, 5.21954, -0.865598, 0.59 ) }
    dend_5 { pt3dadd( -15.7402, 6.46618, -0.547059, 0.22 ) }
    dend_5 { pt3dadd( -16.2909, 7.14872, -0.334546, 0.22 ) }
    dend_5 { pt3dadd( -16.704, 7.61812, -0.167001, 0.88 ) }
    dend_5 { pt3dadd( -17.082, 8.0127, -0.0103162, 1.47 ) }
    dend_5 { pt3dadd( -17.623, 8.51079, 0.194768, 1.99 ) }
    dend_5 { pt3dadd( -19.0252, 9.62879, 0.675963, 0.22 ) }
    dend_5 { pt3dadd( -19.8564, 10.2057, 0.961798, 0.22 ) }
    dend_5 { pt3dadd( -20.3539, 10.528, 1.13603, 0.22 ) }
    dend_5 { pt3dadd( -20.7458, 10.7636, 1.27304, 1.03 ) }
    dend_5 { pt3dadd( -21.7657, 11.3244, 1.5956, 2.65 ) }
    dend_5 { pt3dadd( -23.1717, 12.0133, 1.92434, 0.15 ) }
    dend_5 { pt3dadd( -24.5829, 12.6417, 2.15763, 0.15 ) }
    dend_5 { pt3dadd( -25.3163, 12.9774, 2.24064, 0.15 ) }
    dend_5 { pt3dadd( -25.9451, 13.2798, 2.29259, 1.25 ) }
    dend_5 { pt3dadd( -27.2267, 13.9212, 2.34973, 3.02 ) }
    dend_5 { pt3dadd( -29.3445, 15.0544, 2.34295, 0.07 ) }
    dend_5 { pt3dadd( -30.0966, 15.4965, 2.28241, 0.59 ) }
    dend_5 { pt3dadd( -31.219, 16.2345, 2.10035, 0.07 ) }
    dend_5 { pt3dadd( -31.859, 16.7041, 1.97565, 0.22 ) }
    dend_5 { pt3dadd( -32.3844, 17.1328, 1.84837, 0.22 ) }
    dend_5 { pt3dadd( -33.0512, 17.7463, 1.6437, 1.11 ) }
    dend_5 { pt3dadd( -33.7915, 18.4992, 1.38338, 2.51 ) }
    dend_5 { pt3dadd( -34.8777, 19.6444, 0.952422, 0.15 ) }
    dend_5 { pt3dadd( -35.5405, 20.3624, 0.672762, 0.29 ) }
    dend_5 { pt3dadd( -36.4674, 21.423, 0.274742, 0.07 ) }
    dend_5 { pt3dadd( -37.1121, 22.2201, 0.0115678, 0.07 ) }
    dend_5 { pt3dadd( -37.4916, 22.7374, -0.126419, 0.22 ) }
    dend_5 { pt3dadd( -37.927, 23.3897, -0.263068, 0.07 ) }
    dend_5 { pt3dadd( -38.3348, 24.1062, -0.363996, 0.81 ) }
    dend_5 { pt3dadd( -38.7232, 24.8821, -0.453306, 2.29 ) }
    dend_5 { pt3dadd( -39.5301, 26.7176, -0.596023, 0.07 ) }
    dend_5 { pt3dadd( -39.8774, 27.5596, -0.666263, 0.88 ) }
    dend_5 { pt3dadd( -40.0317, 27.9487, -0.704673, 0.88 ) }
    dend_5 { pt3dadd( -40.6613, 29.5662, -0.921523, 0.07 ) }
    dend_5 { pt3dadd( -40.9436, 30.287, -1.04794, 0.74 ) }
    dend_5 { pt3dadd( -41.1613, 30.8486, -1.17276, 1.92 ) }
    dend_5 { pt3dadd( -41.8446, 32.6796, -1.62922, 0.07 ) }
    dend_5 { pt3dadd( -42.0825, 33.3266, -1.79146, 0.37 ) }
    dend_5 { pt3dadd( -42.4276, 34.2655, -1.99936, 0.07 ) }
    dend_5 { pt3dadd( -42.7188, 35.0575, -2.13821, 0.81 ) }
    dend_5 { pt3dadd( -43.0184, 35.9173, -2.22914, 2.51 ) }
    dend_5 { pt3dadd( -43.6911, 37.9967, -2.34535, 0.07 ) }
    dend_5 { pt3dadd( -43.9266, 38.834, -2.33595, 0.07 ) }
    dend_5 { pt3dadd( -44.1902, 39.8003, -2.28106, 0.07 ) }
    dend_5 { pt3dadd( -44.453, 40.7899, -2.17474, 1.62 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_5 { pt3dadd( -44.8883, 42.3655, -1.96404, 0.22 ) }
    dend_5 { pt3dadd( -45.1166, 43.0959, -1.85442, 0.22 ) }
    dend_5 { pt3dadd( -45.5133, 44.2221, -1.68278, 0.07 ) }
    dend_5 { pt3dadd( -45.8609, 45.1056, -1.56141, 0.07 ) }
    dend_5 { pt3dadd( -46.1602, 45.7738, -1.48129, 1.03 ) }
    dend_5 { pt3dadd( -46.6743, 46.7385, -1.39377, 2.73 ) }
    dend_5 { pt3dadd( -47.6959, 48.33, -1.30448, 0.07 ) }
    dend_5 { pt3dadd( -48.0174, 48.7588, -1.28567, 0.37 ) }
    dend_5 { pt3dadd( -48.3704, 49.1759, -1.27499, 0.37 ) }
    dend_5 { pt3dadd( -48.9576, 49.8067, -1.26059, 0.15 ) }
    dend_5 { pt3dadd( -49.6082, 50.4268, -1.25897, 0.96 ) }
    dend_5 { pt3dadd( -50.3713, 51.0923, -1.29174, 2.06 ) }
    dend_5 { pt3dadd( -51.5872, 52.0812, -1.39185, 0.15 ) }
    dend_5 { pt3dadd( -52.0786, 52.4875, -1.44809, 0.22 ) }
    dend_5 { pt3dadd( -52.5614, 52.9024, -1.5215, 0.66 ) }
    dend_5 { pt3dadd( -53.5109, 53.8071, -1.7338, 0.07 ) }
    dend_5 { pt3dadd( -54.32, 54.6739, -1.97074, 0.07 ) }
    dend_5 { pt3dadd( -54.8278, 55.2897, -2.15395, 0.07 ) }
    dend_5 { pt3dadd( -55.1954, 55.8048, -2.32207, 0.96 ) }
    dend_5 { pt3dadd( -55.5659, 56.4101, -2.52661, 1.62 ) }
    dend_5 { pt3dadd( -56.1582, 57.5792, -2.91729, 0.15 ) }
    dend_5 { pt3dadd( -56.4619, 58.3029, -3.14772, 0.22 ) }
    dend_5 { pt3dadd( -56.6732, 58.8637, -3.32136, 0.15 ) }
    dend_5 { pt3dadd( -56.8946, 59.4824, -3.52689, 0.22 ) }
    dend_5 { pt3dadd( -57.1598, 60.2051, -3.77447, 0.22 ) }
    dend_5 { pt3dadd( -57.4393, 60.912, -3.99729, 0.15 ) }
    dend_5 { pt3dadd( -57.7371, 61.6199, -4.20002, 0.37 ) }
    dend_5 { pt3dadd( -58.1369, 62.5433, -4.44673, 1.11 ) }
    dend_5 { pt3dadd( -58.4964, 63.3477, -4.63658, 2.21 ) }
    dend_5 { pt3dadd( -59.0923, 64.65, -4.88895, 2.95 ) }
    dend_5 { pt3dadd( -59.9512, 66.4914, -5.21925, 0.22 ) }
    dend_5 { pt3dadd( -60.2396, 67.1011, -5.32765, 0.15 ) }
    dend_5 { pt3dadd( -60.5082, 67.6895, -5.43504, 0.22 ) }
    dend_5 { pt3dadd( -60.8617, 68.5158, -5.59051, 0.07 ) }
    dend_5 { pt3dadd( -61.2455, 69.5057, -5.78317, 0.22 ) }
    dend_5 { pt3dadd( -61.5321, 70.3438, -5.95783, 0.22 ) }
    dend_5 { pt3dadd( -61.6278, 70.6484, -6.02623, 1.11 ) }
    dend_5 { pt3dadd( -61.9831, 71.8074, -6.28544, 2.8 ) }
    dend_5 { pt3dadd( -62.6704, 74.2542, -6.8092, 0.15 ) }
    dend_5 { pt3dadd( -62.9002, 75.1364, -6.98422, 0.15 ) }
    dend_5 { pt3dadd( -63.0776, 75.8025, -7.09476, 0.66 ) }
    dend_5 { pt3dadd( -63.2457, 76.3939, -7.16587, 1.11 ) }
    dend_5 { pt3dadd( -63.4388, 77.0216, -7.22068, 0.07 ) }
    dend_5 { pt3dadd( -63.7401, 77.9424, -7.26819, 0.07 ) }
    dend_5 { pt3dadd( -63.9159, 78.4554, -7.27445, 0.29 ) }
    dend_5 { pt3dadd( -64.3924, 79.7232, -7.2802, 0.15 ) }
    dend_5 { pt3dadd( -64.6776, 80.4351, -7.2802, 0.96 ) }
    dend_5 { pt3dadd( -64.9019, 80.9748, -7.2802, 1.03 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 48/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 10.5067, -2.07301, -1.95, 1.03 ) }
    dend_0 { pt3dadd( 10.723, -2.22571, -1.9191, 1.03 ) }
    dend_0 { pt3dadd( 11.6267, -2.88439, -1.80136, 0.96 ) }
    dend_0 { pt3dadd( 12.1039, -3.24129, -1.74771, 0.96 ) }
    dend_0 { pt3dadd( 12.7409, -3.73472, -1.69904, 1.03 ) }
    dend_0 { pt3dadd( 13.3979, -4.2539, -1.69388, 1.25 ) }
    dend_0 { pt3dadd( 14.1491, -4.85473, -1.75044, 1.62 ) }
    dend_0 { pt3dadd( 14.7192, -5.32893, -1.85975, 1.62 ) }
    dend_0 { pt3dadd( 15.4911, -6.00354, -2.13075, 1.25 ) }
    dend_0 { pt3dadd( 16.1914, -6.62418, -2.48339, 0.88 ) }
    dend_0 { pt3dadd( 16.9624, -7.29873, -2.98309, 0.81 ) }
    dend_0 { pt3dadd( 17.7065, -7.93087, -3.54218, 0.81 ) }
    dend_0 { pt3dadd( 18.6412, -8.66572, -4.24482, 0.52 ) }
    dend_0 { pt3dadd( 19.5067, -9.27328, -4.86021, 0.52 ) }
    dend_0 { pt3dadd( 20.0407, -9.61283, -5.21342, 1.11 ) }
    dend_0 { pt3dadd( 20.9425, -10.1374, -5.73472, 1.92 ) }
    dend_0 { pt3dadd( 22.0178, -10.7321, -6.30561, 2.88 ) }
    dend_0 { pt3dadd( 23.3231, -11.4122, -6.92242, 2.95 ) }
    dend_0 { pt3dadd( 24.6481, -12.053, -7.46479, 1.4 ) }
    dend_0 { pt3dadd( 25.9517, -12.6633, -7.91023, 0.52 ) }
    dend_0 { pt3dadd( 27.1444, -13.2253, -8.26663, 0.81 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 69/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 10.1443, -0.623578, 0.0, 0.37 ) }
    axon_0 { pt3dadd( 25.1393, -1.01019, 0.0, 0.37 ) }
    axon_0 { pt3dadd( 40.1343, -1.3968, 0.0, 0.37 ) }
    // Section: dend_18, id: dend_18, parent: dend_16 (entry count 72/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 5.67163, -14.1444, 12.0765, 1.25 ) }
    dend_18 { pt3dadd( 5.65746, -15.7356, 11.7775, 1.25 ) }
    dend_18 { pt3dadd( 5.65289, -17.0828, 11.569, 0.29 ) }
    dend_18 { pt3dadd( 5.64911, -18.5713, 11.4323, 0.22 ) }
    dend_18 { pt3dadd( 5.63784, -19.8204, 11.4028, 0.22 ) }
    dend_18 { pt3dadd( 5.63023, -20.3556, 11.4227, 0.59 ) }
    dend_18 { pt3dadd( 5.59607, -21.3307, 11.5269, 0.88 ) }
    dend_18 { pt3dadd( 5.53724, -22.3289, 11.7252, 0.22 ) }
    dend_18 { pt3dadd( 5.45283, -23.3982, 12.0059, 0.22 ) }
    dend_18 { pt3dadd( 5.36627, -24.2849, 12.2722, 1.47 ) }
    dend_18 { pt3dadd( 5.15245, -25.9362, 12.761, 3.54 ) }
    dend_18 { pt3dadd( 4.65873, -29.0169, 13.6561, 0.44 ) }
    dend_18 { pt3dadd( 4.43636, -30.2068, 13.9671, 0.22 ) }
    dend_18 { pt3dadd( 4.33516, -30.6867, 14.0744, 0.66 ) }
    dend_18 { pt3dadd( 4.1537, -31.4924, 14.1855, 1.11 ) }
    dend_18 { pt3dadd( 3.77301, -33.1467, 14.2951, 0.22 ) }
    dend_18 { pt3dadd( 3.54788, -34.1003, 14.2966, 0.22 ) }
    dend_18 { pt3dadd( 3.34686, -35.0228, 14.2346, 1.25 ) }
    dend_18 { pt3dadd( 3.07635, -36.3714, 14.143, 2.65 ) }
    dend_18 { pt3dadd( 2.70827, -38.4704, 14.0262, 0.22 ) }
    dend_18 { pt3dadd( 2.57834, -39.3098, 13.9948, 0.22 ) }
    dend_18 { pt3dadd( 2.43922, -40.3338, 13.9845, 1.4 ) }
    dend_18 { pt3dadd( 2.2347, -41.8102, 13.9821, 3.32 ) }
    dend_18 { pt3dadd( 1.82825, -44.5226, 14.043, 0.22 ) }
    dend_18 { pt3dadd( 1.68515, -45.4409, 14.076, 0.29 ) }
    dend_18 { pt3dadd( 1.47529, -46.653, 14.1417, 0.74 ) }
    dend_18 { pt3dadd( 1.183, -48.0815, 14.252, 0.15 ) }
    dend_18 { pt3dadd( 0.945577, -49.1121, 14.3514, 0.15 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_18 { pt3dadd( 0.753388, -49.8767, 14.4347, 0.22 ) }
    dend_18 { pt3dadd( 0.604908, -50.4812, 14.5154, 1.18 ) }
    dend_18 { pt3dadd( 0.386047, -51.3554, 14.6478, 1.62 ) }
    dend_18 { pt3dadd( -0.234019, -53.8717, 15.0563, 0.15 ) }
    dend_18 { pt3dadd( -0.432977, -54.7414, 15.206, 1.7 ) }
    dend_18 { pt3dadd( -0.654036, -55.8956, 15.419, 2.51 ) }
    dend_18 { pt3dadd( -1.00401, -58.2272, 15.8237, 0.15 ) }
    dend_18 { pt3dadd( -1.11387, -59.179, 15.9702, 0.15 ) }
    dend_18 { pt3dadd( -1.14159, -59.5973, 16.0211, 0.44 ) }
    dend_18 { pt3dadd( -1.13989, -60.6882, 16.0975, 1.25 ) }
    dend_18 { pt3dadd( -1.1078, -61.486, 16.1379, 0.81 ) }
    dend_18 { pt3dadd( -1.02864, -62.6276, 16.1895, 0.22 ) }
    dend_18 { pt3dadd( -0.940419, -63.6783, 16.2464, 0.15 ) }
    dend_18 { pt3dadd( -0.856919, -64.7647, 16.3309, 0.22 ) }
    dend_18 { pt3dadd( -0.822409, -65.4704, 16.4042, 1.03 ) }
    dend_18 { pt3dadd( -0.822379, -66.5412, 16.5607, 2.8 ) }
    dend_18 { pt3dadd( -0.901879, -68.4502, 16.8911, 0.29 ) }
    dend_18 { pt3dadd( -1.00732, -69.792, 17.1819, 0.22 ) }
    dend_18 { pt3dadd( -1.12565, -70.935, 17.4724, 0.96 ) }
    dend_18 { pt3dadd( -1.27934, -72.1428, 17.8206, 0.22 ) }
    dend_18 { pt3dadd( -1.48976, -73.6531, 18.2786, 0.22 ) }
    dend_18 { pt3dadd( -1.59455, -74.4993, 18.5309, 1.11 ) }
    dend_18 { pt3dadd( -1.7028, -75.5766, 18.8105, 2.73 ) }
    dend_18 { pt3dadd( -1.76957, -76.5134, 19.0184, 3.17 ) }
    dend_18 { pt3dadd( -1.86334, -78.9293, 19.4667, 0.22 ) }
    dend_18 { pt3dadd( -1.856, -79.7687, 19.5715, 0.44 ) }
    dend_18 { pt3dadd( -1.74867, -81.4942, 19.7274, 0.15 ) }
    dend_18 { pt3dadd( -1.62949, -82.6978, 19.8096, 0.15 ) }
    dend_18 { pt3dadd( -1.57092, -83.152, 19.8252, 0.74 ) }
    dend_18 { pt3dadd( -1.43143, -84.0072, 19.8467, 1.25 ) }
    dend_18 { pt3dadd( -1.15197, -85.5457, 19.9414, 0.15 ) }
    dend_18 { pt3dadd( -0.982109, -86.4926, 20.0461, 0.15 ) }
    dend_18 { pt3dadd( -0.786319, -87.6107, 20.2268, 0.07 ) }
    dend_18 { pt3dadd( -0.688701, -88.1785, 20.3372, 0.74 ) }
    dend_18 { pt3dadd( -0.482323, -89.4782, 20.6021, 2.58 ) }
    dend_18 { pt3dadd( -0.123096, -92.0665, 21.127, 0.22 ) }
    dend_18 { pt3dadd( -0.0513662, -92.7587, 21.2735, 0.22 ) }
    dend_18 { pt3dadd( 0.0406789, -94.0819, 21.5325, 0.15 ) }
    dend_18 { pt3dadd( 0.0748859, -94.7599, 21.6654, 1.03 ) }
    dend_18 { pt3dadd( 0.115285, -95.8596, 21.8663, 2.73 ) }
    dend_18 { pt3dadd( 0.118395, -97.3326, 22.0919, 0.66 ) }
    dend_18 { pt3dadd( 0.0575699, -98.9757, 22.2658, 0.07 ) }
    dend_18 { pt3dadd( -0.00632915, -99.8791, 22.3124, 0.22 ) }
    dend_18 { pt3dadd( -0.0716441, -100.575, 22.3136, 0.15 ) }
    dend_18 { pt3dadd( -0.145732, -101.283, 22.2861, 0.66 ) }
    dend_18 { pt3dadd( -0.31121, -102.867, 22.1649, 0.07 ) }
    dend_18 { pt3dadd( -0.391475, -103.708, 22.0316, 0.96 ) }
    dend_18 { pt3dadd( -0.535092, -105.539, 21.6096, 0.07 ) }
    dend_18 { pt3dadd( -0.556209, -105.945, 21.5024, 0.44 ) }
    dend_18 { pt3dadd( -0.577175, -107.084, 21.1686, 2.14 ) }
    dend_18 { pt3dadd( -0.51645, -108.705, 20.674, 0.07 ) }
    dend_18 { pt3dadd( -0.327604, -110.301, 20.1437, 0.07 ) }
    dend_18 { pt3dadd( -0.233487, -110.833, 19.9699, 0.44 ) }
    dend_18 { pt3dadd( -0.0752141, -111.576, 19.7439, 1.25 ) }
    dend_18 { pt3dadd( 0.166189, -112.734, 19.4095, 0.22 ) }
    dend_18 { pt3dadd( 0.389167, -114.035, 19.0933, 0.15 ) }
    dend_18 { pt3dadd( 0.548302, -115.478, 18.8258, 0.15 ) }
    dend_18 { pt3dadd( 0.562534, -116.49, 18.7192, 1.25 ) }
    dend_18 { pt3dadd( 0.435752, -117.732, 18.6765, 0.15 ) }
    dend_18 { pt3dadd( 0.28259, -118.447, 18.6923, 0.29 ) }
    dend_18 { pt3dadd( -0.239797, -120.059, 18.8041, 0.07 ) }
    dend_18 { pt3dadd( -0.514004, -120.716, 18.8721, 1.77 ) }
    dend_18 { pt3dadd( -1.07776, -121.876, 19.0471, 3.47 ) }
    dend_18 { pt3dadd( -2.09068, -123.884, 19.4032, 0.15 ) }
    dend_18 { pt3dadd( -2.47497, -124.645, 19.5527, 0.15 ) }
    dend_18 { pt3dadd( -2.84748, -125.466, 19.741, 0.88 ) }
    dend_18 { pt3dadd( -3.14748, -126.224, 19.9129, 0.29 ) }
    dend_18 { pt3dadd( -3.53053, -127.382, 20.1668, 0.07 ) }
    dend_18 { pt3dadd( -3.79738, -128.564, 20.4255, 0.07 ) }
    dend_18 { pt3dadd( -3.92396, -129.386, 20.5653, 0.59 ) }
    dend_18 { pt3dadd( -4.12815, -131.222, 20.791, 0.15 ) }
    dend_18 { pt3dadd( -4.20242, -132.154, 20.8447, 1.25 ) }
    dend_18 { pt3dadd( -4.25452, -133.098, 20.8291, 2.51 ) }
    dend_18 { pt3dadd( -4.3294, -135.318, 20.639, 0.15 ) }
    dend_18 { pt3dadd( -4.36858, -136.427, 20.4757, 0.15 ) }
    dend_18 { pt3dadd( -4.40006, -137.345, 20.3028, 0.22 ) }
    dend_18 { pt3dadd( -4.4478, -138.586, 20.0237, 2.06 ) }
    dend_18 { pt3dadd( -4.53092, -140.409, 19.6525, 0.22 ) }
    dend_18 { pt3dadd( -4.5615, -141.104, 19.5139, 0.37 ) }
    dend_18 { pt3dadd( -4.60657, -142.275, 19.2938, 0.15 ) }
    dend_18 { pt3dadd( -4.61451, -142.805, 19.2268, 0.74 ) }
    dend_18 { pt3dadd( -4.6178, -143.589, 19.1501, 1.4 ) }
    dend_18 { pt3dadd( -4.62215, -145.41, 18.9982, 0.15 ) }
    dend_18 { pt3dadd( -4.62286, -146.803, 18.8905, 0.15 ) }
    dend_18 { pt3dadd( -4.6131, -147.512, 18.8425, 1.25 ) }
    dend_18 { pt3dadd( -4.55835, -149.16, 18.7523, 0.07 ) }
    dend_18 { pt3dadd( -4.50354, -150.379, 18.6928, 0.07 ) }
    dend_18 { pt3dadd( -4.46668, -150.991, 18.6673, 0.96 ) }
    dend_18 { pt3dadd( -4.40105, -151.848, 18.6334, 1.92 ) }
    dend_18 { pt3dadd( -4.28448, -153.222, 18.5778, 0.15 ) }
    dend_18 { pt3dadd( -4.22108, -153.842, 18.5482, 0.29 ) }
    dend_18 { pt3dadd( -4.11726, -154.688, 18.51, 0.07 ) }
    dend_18 { pt3dadd( -4.05904, -155.153, 18.4935, 0.15 ) }
    dend_18 { pt3dadd( -3.96572, -156.289, 18.4934, 0.07 ) }
    dend_18 { pt3dadd( -3.92872, -157.141, 18.5489, 0.07 ) }
    dend_18 { pt3dadd( -3.92424, -157.422, 18.5806, 0.07 ) }
    dend_18 { pt3dadd( -3.92394, -158.04, 18.6689, 1.03 ) }
    dend_18 { pt3dadd( -3.93277, -159.031, 18.8461, 2.36 ) }
    dend_18 { pt3dadd( -3.94122, -161.016, 19.2438, 0.07 ) }
    dend_18 { pt3dadd( -3.92904, -162.295, 19.4809, 0.07 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_18 { pt3dadd( -3.90701, -163.29, 19.6431, 1.33 ) }
    dend_18 { pt3dadd( -3.83625, -165.474, 19.9371, 0.15 ) }
    dend_18 { pt3dadd( -3.79566, -166.322, 20.0241, 1.18 ) }
    dend_18 { pt3dadd( -3.73788, -167.274, 20.0901, 2.36 ) }
    dend_18 { pt3dadd( -3.54099, -169.364, 20.1345, 0.15 ) }
    dend_18 { pt3dadd( -3.45248, -170.132, 20.1353, 0.29 ) }
    dend_18 { pt3dadd( -3.28606, -171.309, 20.1352, 0.07 ) }
    dend_18 { pt3dadd( -3.14291, -172.157, 20.1337, 0.07 ) }
    dend_18 { pt3dadd( -2.94664, -173.22, 20.1368, 1.7 ) }
    dend_18 { pt3dadd( -2.52874, -175.312, 20.2109, 0.07 ) }
    dend_18 { pt3dadd( -2.3838, -175.976, 20.2603, 0.52 ) }
    dend_18 { pt3dadd( -2.1437, -177.046, 20.3492, 0.07 ) }
    dend_18 { pt3dadd( -1.99636, -177.736, 20.4076, 0.07 ) }
    dend_18 { pt3dadd( -1.87602, -178.352, 20.4592, 0.29 ) }
    dend_18 { pt3dadd( -1.71083, -179.392, 20.5411, 0.07 ) }
    dend_18 { pt3dadd( -1.65444, -180.053, 20.5836, 1.25 ) }
    dend_18 { pt3dadd( -1.624, -180.913, 20.6188, 2.43 ) }
    dend_18 { pt3dadd( -1.64834, -182.793, 20.6777, 0.07 ) }
    dend_18 { pt3dadd( -1.66982, -183.115, 20.6813, 0.07 ) }
    dend_18 { pt3dadd( -1.73527, -183.689, 20.6799, 0.59 ) }
    dend_18 { pt3dadd( -1.9592, -184.925, 20.6597, 0.07 ) }
    dend_18 { pt3dadd( -2.29003, -186.201, 20.6307, 0.07 ) }
    dend_18 { pt3dadd( -2.58533, -187.124, 20.6043, 1.03 ) }
    dend_18 { pt3dadd( -3.15345, -188.618, 20.5585, 0.07 ) }
    dend_18 { pt3dadd( -3.36196, -189.141, 20.5333, 1.18 ) }
    dend_18 { pt3dadd( -3.89106, -190.445, 20.4567, 3.17 ) }
    dend_18 { pt3dadd( -4.97903, -193.124, 20.2669, 0.07 ) }
    dend_18 { pt3dadd( -5.33572, -194.018, 20.1866, 1.4 ) }
    dend_18 { pt3dadd( -6.24933, -196.45, 19.9637, 0.07 ) }
    dend_18 { pt3dadd( -6.69446, -197.861, 19.8006, 0.07 ) }
    dend_18 { pt3dadd( -6.86925, -198.547, 19.7066, 0.81 ) }
    dend_18 { pt3dadd( -7.12922, -199.798, 19.5153, 0.07 ) }
    dend_18 { pt3dadd( -7.31235, -200.989, 19.3049, 0.07 ) }
    dend_18 { pt3dadd( -7.42628, -202.011, 19.1079, 1.11 ) }
    dend_18 { pt3dadd( -7.50935, -204.395, 18.5864, 0.07 ) }
    dend_18 { pt3dadd( -7.51603, -205.008, 18.4581, 0.66 ) }
    // Section: dend_17, id: dend_17, parent: dend_16 (entry count 36/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 5.67163, -14.1444, 12.0765, 0.74 ) }
    dend_17 { pt3dadd( 6.0421, -13.9954, 15.3631, 0.74 ) }
    dend_17 { pt3dadd( 6.327, -13.7788, 17.3184, 0.74 ) }
    dend_17 { pt3dadd( 6.79657, -13.4304, 19.8712, 0.74 ) }
    dend_17 { pt3dadd( 6.99951, -13.2992, 20.8456, 0.74 ) }
    dend_17 { pt3dadd( 7.40968, -13.0892, 22.691, 0.74 ) }
    dend_17 { pt3dadd( 7.74877, -12.9592, 24.2413, 0.74 ) }
    dend_17 { pt3dadd( 8.06043, -12.818, 25.6224, 0.74 ) }
    dend_17 { pt3dadd( 8.36821, -12.6648, 27.4116, 1.18 ) }
    dend_17 { pt3dadd( 8.4874, -12.6568, 28.6936, 1.18 ) }
    dend_17 { pt3dadd( 8.4933, -12.7701, 29.6781, 0.96 ) }
    dend_17 { pt3dadd( 8.3484, -13.0832, 31.0222, 0.96 ) }
    dend_17 { pt3dadd( 8.08058, -13.4103, 32.1337, 0.96 ) }
    dend_17 { pt3dadd( 7.64409, -13.7714, 33.3111, 0.96 ) }
    dend_17 { pt3dadd( 7.09413, -14.0637, 34.3738, 0.96 ) }
    dend_17 { pt3dadd( 6.27318, -14.3573, 35.7597, 0.96 ) }
    dend_17 { pt3dadd( 5.59211, -14.5118, 36.8746, 1.25 ) }
    dend_17 { pt3dadd( 4.75739, -14.613, 38.2545, 2.14 ) }
    dend_17 { pt3dadd( 3.99316, -14.6366, 39.539, 2.51 ) }
    dend_17 { pt3dadd( 2.45846, -14.5002, 41.9996, 0.44 ) }
    dend_17 { pt3dadd( 1.56359, -14.2774, 43.2909, 0.44 ) }
    dend_17 { pt3dadd( 0.525695, -13.9046, 44.6973, 0.44 ) }
    dend_17 { pt3dadd( -0.330905, -13.5243, 45.8161, 0.44 ) }
    dend_17 { pt3dadd( -0.819339, -13.2633, 46.4419, 1.03 ) }
    dend_17 { pt3dadd( -1.65256, -12.7142, 47.5738, 3.02 ) }
    dend_17 { pt3dadd( -3.03901, -11.6407, 49.6117, 0.29 ) }
    dend_17 { pt3dadd( -3.73316, -11.1078, 50.7137, 0.29 ) }
    dend_17 { pt3dadd( -4.07138, -10.8714, 51.3088, 1.03 ) }
    dend_17 { pt3dadd( -4.60986, -10.5509, 52.4246, 1.84 ) }
    dend_17 { pt3dadd( -5.36338, -10.2323, 54.2764, 0.52 ) }
    dend_17 { pt3dadd( -5.88796, -10.1188, 55.7934, 0.52 ) }
    dend_17 { pt3dadd( -6.47203, -10.1391, 57.6751, 0.52 ) }
    dend_17 { pt3dadd( -7.03282, -10.2375, 59.4477, 1.11 ) }
    dend_17 { pt3dadd( -7.50018, -10.3795, 60.8526, 1.03 ) }
    dend_17 { pt3dadd( -8.22325, -10.6424, 62.8302, 0.66 ) }
    dend_17 { pt3dadd( -9.14397, -10.9775, 65.114, 0.37 ) }
    dend_17 { pt3dadd( -9.80354, -11.1803, 66.6689, 0.37 ) }
    dend_17 { pt3dadd( -10.5207, -11.3355, 68.2643, 1.33 ) }
    dend_17 { pt3dadd( -11.1617, -11.3995, 69.5981, 2.06 ) }
    dend_17 { pt3dadd( -12.1749, -11.4007, 71.6777, 0.52 ) }
    dend_17 { pt3dadd( -12.8863, -11.3351, 73.1857, 0.37 ) }
    dend_17 { pt3dadd( -13.7065, -11.1749, 74.9832, 1.03 ) }
    dend_17 { pt3dadd( -14.4081, -10.9617, 76.4516, 1.92 ) }
    dend_17 { pt3dadd( -15.3804, -10.5956, 78.3699, 0.59 ) }
    dend_17 { pt3dadd( -16.1985, -10.2374, 79.9183, 0.59 ) }
    dend_17 { pt3dadd( -17.1139, -9.80365, 81.5001, 1.55 ) }
    dend_17 { pt3dadd( -18.0618, -9.35719, 82.9158, 1.84 ) }
    dend_17 { pt3dadd( -19.138, -8.85931, 84.2989, 0.07 ) }
    dend_17 { pt3dadd( -19.761, -8.57633, 84.9857, 0.07 ) }
    dend_17 { pt3dadd( -20.3497, -8.29966, 85.5244, 0.07 ) }
    dend_17 { pt3dadd( -21.1235, -7.93306, 86.1484, 0.59 ) }
    dend_17 { pt3dadd( -22.407, -7.30357, 87.194, 0.07 ) }
    dend_17 { pt3dadd( -22.7941, -7.10096, 87.5481, 1.11 ) }
    dend_17 { pt3dadd( -23.3349, -6.79508, 88.1668, 1.92 ) }
    dend_17 { pt3dadd( -24.4445, -6.16938, 89.6807, 0.22 ) }
    dend_17 { pt3dadd( -25.3518, -5.67324, 91.1197, 0.22 ) }
    dend_17 { pt3dadd( -25.8987, -5.38357, 92.167, 0.22 ) }
    dend_17 { pt3dadd( -26.2961, -5.18186, 93.0601, 1.77 ) }
    dend_17 { pt3dadd( -27.1075, -4.77774, 95.1945, 0.29 ) }
    dend_17 { pt3dadd( -27.7685, -4.44655, 97.1948, 0.29 ) }
    dend_17 { pt3dadd( -28.2687, -4.19461, 98.8647, 0.52 ) }
    dend_17 { pt3dadd( -28.7927, -3.89807, 100.798, 0.88 ) }
    dend_17 { pt3dadd( -29.357, -3.55073, 102.985, 1.25 ) }
    dend_17 { pt3dadd( -30.1579, -3.02456, 106.339, 0.15 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_17 { pt3dadd( -30.5865, -2.72284, 108.351, 0.15 ) }
    dend_17 { pt3dadd( -30.8683, -2.51513, 109.783, 0.44 ) }
    dend_17 { pt3dadd( -31.4568, -2.11567, 113.035, 0.88 ) }
    dend_17 { pt3dadd( -31.729, -1.93756, 114.598, 1.18 ) }
    dend_17 { pt3dadd( -32.4599, -1.44578, 118.957, 0.59 ) }
    dend_17 { pt3dadd( -33.0555, -1.02821, 122.584, 0.59 ) }
    dend_17 { pt3dadd( -33.5042, -0.705884, 125.245, 0.29 ) }
    dend_17 { pt3dadd( -34.7059, 0.172882, 131.985, 0.07 ) }
    dend_17 { pt3dadd( -35.0843, 0.45781, 133.901, 0.07 ) }
    dend_17 { pt3dadd( -35.4069, 0.709671, 135.337, 0.07 ) }
    dend_17 { pt3dadd( -35.8314, 1.03615, 136.796, 0.07 ) }
    dend_17 { pt3dadd( -36.3827, 1.4273, 138.185, 0.37 ) }
    dend_17 { pt3dadd( -36.9743, 1.79466, 139.281, 0.15 ) }
    dend_17 { pt3dadd( -37.9082, 2.29926, 140.54, 0.15 ) }
    dend_17 { pt3dadd( -38.5463, 2.58988, 141.326, 0.74 ) }
    dend_17 { pt3dadd( -40.0686, 3.20591, 143.198, 0.15 ) }
    dend_17 { pt3dadd( -41.0785, 3.58666, 144.444, 0.88 ) }
    dend_17 { pt3dadd( -42.3018, 4.00507, 146.02, 0.15 ) }
    dend_17 { pt3dadd( -43.4437, 4.33205, 147.609, 0.15 ) }
    dend_17 { pt3dadd( -44.1016, 4.47944, 148.622, 0.29 ) }
    dend_17 { pt3dadd( -45.1861, 4.66937, 150.552, 0.66 ) }
    dend_17 { pt3dadd( -45.975, 4.76723, 152.132, 1.55 ) }
    dend_17 { pt3dadd( -46.7628, 4.84083, 153.793, 0.81 ) }
    dend_17 { pt3dadd( -47.8099, 4.91976, 156.012, 0.44 ) }
    dend_17 { pt3dadd( -48.5834, 4.96676, 157.624, 0.81 ) }
    dend_17 { pt3dadd( -49.886, 5.06735, 160.286, 1.84 ) }
    dend_17 { pt3dadd( -50.4789, 5.12859, 161.47, 2.14 ) }
    dend_17 { pt3dadd( -51.5048, 5.28489, 163.519, 0.07 ) }
    dend_17 { pt3dadd( -51.9276, 5.39012, 164.32, 0.22 ) }
    dend_17 { pt3dadd( -52.4769, 5.57281, 165.263, 0.07 ) }
    dend_17 { pt3dadd( -53.0627, 5.79775, 166.169, 0.37 ) }
    dend_17 { pt3dadd( -53.9104, 6.15415, 167.402, 0.37 ) }
    dend_17 { pt3dadd( -54.4449, 6.38184, 168.214, 0.15 ) }
    dend_17 { pt3dadd( -55.1231, 6.68215, 169.324, 1.11 ) }
    dend_17 { pt3dadd( -55.3699, 6.79699, 169.736, 1.33 ) }
    dend_17 { pt3dadd( -56.4267, 7.34961, 171.485, 0.15 ) }
    dend_17 { pt3dadd( -57.2333, 7.80368, 172.773, 0.15 ) }
    dend_17 { pt3dadd( -58.0972, 8.304, 174.116, 0.29 ) }
    dend_17 { pt3dadd( -58.6803, 8.65248, 175.027, 1.03 ) }
    dend_17 { pt3dadd( -59.1007, 8.89902, 175.689, 1.77 ) }
    dend_17 { pt3dadd( -60.6206, 9.80239, 178.061, 0.07 ) }
    dend_17 { pt3dadd( -61.2159, 10.1709, 178.985, 0.37 ) }
    dend_17 { pt3dadd( -62.188, 10.7817, 180.581, 0.15 ) }
    dend_17 { pt3dadd( -63.0799, 11.336, 182.153, 1.99 ) }
    dend_17 { pt3dadd( -64.8843, 12.407, 185.616, 0.07 ) }
    dend_17 { pt3dadd( -65.3246, 12.656, 186.531, 0.44 ) }
    dend_17 { pt3dadd( -65.9252, 12.9864, 187.874, 0.15 ) }
    dend_17 { pt3dadd( -67.0613, 13.6108, 190.485, 0.44 ) }
    dend_17 { pt3dadd( -67.7185, 13.9815, 192.069, 1.03 ) }
    dend_17 { pt3dadd( -68.5881, 14.4663, 194.276, 0.22 ) }
    dend_17 { pt3dadd( -69.2639, 14.8377, 196.105, 0.22 ) }
    dend_17 { pt3dadd( -69.5997, 15.0049, 197.016, 0.22 ) }
    dend_17 { pt3dadd( -70.0994, 15.2272, 198.239, 0.22 ) }
    // Section: dend_13, id: dend_13, parent: dend_11 (entry count 53/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -12.207, 1.90507, -15.1464, 1.33 ) }
    dend_13 { pt3dadd( -13.6456, 2.33143, -15.5359, 1.33 ) }
    dend_13 { pt3dadd( -14.9415, 2.80722, -15.9536, 0.66 ) }
    dend_13 { pt3dadd( -16.0001, 3.25877, -16.3135, 0.44 ) }
    dend_13 { pt3dadd( -17.0662, 3.74574, -16.707, 0.29 ) }
    dend_13 { pt3dadd( -17.6959, 4.02211, -16.9443, 1.03 ) }
    dend_13 { pt3dadd( -18.5386, 4.34702, -17.2503, 0.88 ) }
    dend_13 { pt3dadd( -19.3015, 4.62308, -17.5578, 0.59 ) }
    dend_13 { pt3dadd( -19.9296, 4.77631, -17.7944, 0.37 ) }
    dend_13 { pt3dadd( -20.7209, 4.73809, -17.9878, 0.22 ) }
    dend_13 { pt3dadd( -21.3436, 4.40965, -17.9961, 0.29 ) }
    dend_13 { pt3dadd( -22.1474, 3.81196, -17.9026, 0.59 ) }
    dend_13 { pt3dadd( -22.9267, 3.15724, -17.7323, 0.44 ) }
    dend_13 { pt3dadd( -23.6379, 2.57212, -17.5332, 0.74 ) }
    dend_13 { pt3dadd( -24.132, 2.19382, -17.3801, 0.96 ) }
    dend_13 { pt3dadd( -25.2079, 1.53739, -16.9846, 0.29 ) }
    dend_13 { pt3dadd( -25.6034, 1.40541, -16.8341, 0.29 ) }
    dend_13 { pt3dadd( -26.2215, 1.34515, -16.6021, 0.88 ) }
    dend_13 { pt3dadd( -27.2319, 1.41503, -16.2175, 1.55 ) }
    dend_13 { pt3dadd( -27.6449, 1.4864, -16.0521, 1.62 ) }
    dend_13 { pt3dadd( -28.5604, 1.68189, -15.6499, 1.03 ) }
    dend_13 { pt3dadd( -29.764, 1.97766, -15.0794, 0.37 ) }
    dend_13 { pt3dadd( -30.2819, 2.09146, -14.8214, 0.96 ) }
    dend_13 { pt3dadd( -31.3196, 2.26893, -14.2947, 2.14 ) }
    dend_13 { pt3dadd( -32.0288, 2.35248, -13.9411, 2.14 ) }
    dend_13 { pt3dadd( -33.71, 2.4374, -13.173, 0.29 ) }
    dend_13 { pt3dadd( -34.5828, 2.40561, -12.8355, 0.22 ) }
    dend_13 { pt3dadd( -35.0843, 2.34808, -12.6763, 0.22 ) }
    dend_13 { pt3dadd( -35.7779, 2.24612, -12.494, 0.29 ) }
    dend_13 { pt3dadd( -36.424, 2.13707, -12.3645, 0.74 ) }
    dend_13 { pt3dadd( -37.5456, 1.95809, -12.2178, 0.96 ) }
    dend_13 { pt3dadd( -38.5047, 1.83953, -12.146, 0.37 ) }
    dend_13 { pt3dadd( -39.5544, 1.77923, -12.0849, 0.22 ) }
    dend_13 { pt3dadd( -40.0781, 1.83152, -12.0422, 0.15 ) }
    dend_13 { pt3dadd( -40.5813, 1.95253, -11.9794, 0.15 ) }
    dend_13 { pt3dadd( -41.1546, 2.14119, -11.8614, 0.15 ) }
    dend_13 { pt3dadd( -41.7553, 2.35472, -11.6975, 0.29 ) }
    dend_13 { pt3dadd( -42.2855, 2.50899, -11.5368, 1.03 ) }
    dend_13 { pt3dadd( -43.3346, 2.71654, -11.2181, 2.58 ) }
    dend_13 { pt3dadd( -44.1709, 2.80727, -10.9831, 2.21 ) }
    dend_13 { pt3dadd( -45.6654, 2.88486, -10.6005, 0.22 ) }
    dend_13 { pt3dadd( -46.1923, 2.88568, -10.4825, 0.22 ) }
    dend_13 { pt3dadd( -46.8021, 2.8711, -10.3707, 0.22 ) }
    dend_13 { pt3dadd( -47.3906, 2.86907, -10.2891, 0.22 ) }
    dend_13 { pt3dadd( -48.1579, 2.8631, -10.214, 0.22 ) }
    dend_13 { pt3dadd( -48.783, 2.8567, -10.1837, 1.18 ) }
    dend_13 { pt3dadd( -49.8142, 2.85122, -10.1747, 2.58 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_13 { pt3dadd( -50.6337, 2.88548, -10.1607, 3.39 ) }
    dend_13 { pt3dadd( -52.5029, 3.07056, -10.1007, 0.15 ) }
    dend_13 { pt3dadd( -53.0182, 3.14021, -10.0774, 0.15 ) }
    dend_13 { pt3dadd( -53.7711, 3.27844, -10.0339, 0.15 ) }
    dend_13 { pt3dadd( -54.1913, 3.39167, -10.0071, 0.22 ) }
    dend_13 { pt3dadd( -55.1378, 3.77542, -9.9388, 0.29 ) }
    dend_13 { pt3dadd( -55.7631, 4.08835, -9.90443, 0.59 ) }
    dend_13 { pt3dadd( -56.2029, 4.32982, -9.89072, 0.88 ) }
    dend_13 { pt3dadd( -56.8002, 4.66972, -9.90143, 0.88 ) }
    dend_13 { pt3dadd( -57.5937, 5.10894, -9.95602, 0.29 ) }
    dend_13 { pt3dadd( -58.4133, 5.50088, -10.0085, 0.22 ) }
    dend_13 { pt3dadd( -59.0635, 5.75467, -10.0412, 0.22 ) }
    dend_13 { pt3dadd( -59.8267, 6.03194, -10.0688, 0.22 ) }
    dend_13 { pt3dadd( -60.4345, 6.24434, -10.088, 1.18 ) }
    dend_13 { pt3dadd( -61.5701, 6.62878, -10.1409, 2.73 ) }
    dend_13 { pt3dadd( -62.7095, 7.02938, -10.2063, 2.95 ) }
    dend_13 { pt3dadd( -65.0535, 7.97163, -10.3582, 0.22 ) }
    dend_13 { pt3dadd( -66.1055, 8.48028, -10.4265, 0.22 ) }
    dend_13 { pt3dadd( -66.9014, 8.92696, -10.4846, 0.44 ) }
    dend_13 { pt3dadd( -67.6111, 9.36889, -10.5455, 1.33 ) }
    dend_13 { pt3dadd( -68.5649, 10.036, -10.6582, 2.88 ) }
    dend_13 { pt3dadd( -69.7572, 10.9836, -10.8495, 0.15 ) }
    dend_13 { pt3dadd( -70.3248, 11.4918, -10.9297, 0.15 ) }
    dend_13 { pt3dadd( -70.7773, 11.8953, -10.9517, 0.29 ) }
    dend_13 { pt3dadd( -71.4842, 12.5077, -10.9252, 0.22 ) }
    dend_13 { pt3dadd( -72.2847, 13.1425, -10.8346, 0.22 ) }
    dend_13 { pt3dadd( -72.8416, 13.5558, -10.7533, 0.15 ) }
    dend_13 { pt3dadd( -73.6715, 14.1074, -10.6069, 0.29 ) }
    dend_13 { pt3dadd( -74.5734, 14.6413, -10.4277, 0.29 ) }
    dend_13 { pt3dadd( -75.2569, 15.024, -10.2647, 1.55 ) }
    dend_13 { pt3dadd( -76.3046, 15.5978, -9.94019, 3.47 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 31/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -12.207, 1.90507, -15.1464, 0.59 ) }
    dend_12 { pt3dadd( -11.4226, 1.05815, -16.8989, 0.59 ) }
    dend_12 { pt3dadd( -11.0054, 0.607748, -17.8308, 0.52 ) }
    dend_12 { pt3dadd( -10.6097, 0.180543, -18.7148, 0.52 ) }
    dend_12 { pt3dadd( -10.1424, -0.324, -19.7588, 1.03 ) }
    dend_12 { pt3dadd( -9.41775, -1.10643, -21.3778, 1.7 ) }
    dend_12 { pt3dadd( -9.05499, -1.49809, -22.1882, 1.7 ) }
    // Section: dend_10, id: dend_10, parent: dend_6 (entry count 38/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 5.53658, 12.1386, 7.11596, 0.22 ) }
    dend_10 { pt3dadd( 6.39333, 13.3941, 5.70748, 0.22 ) }
    dend_10 { pt3dadd( 6.78312, 14.0809, 4.95082, 0.22 ) }
    dend_10 { pt3dadd( 7.22112, 14.8716, 4.08475, 0.22 ) }
    dend_10 { pt3dadd( 7.42704, 15.2365, 3.69778, 0.81 ) }
    dend_10 { pt3dadd( 7.7857, 15.8327, 3.07305, 1.33 ) }
    dend_10 { pt3dadd( 8.42891, 16.8075, 2.04008, 0.37 ) }
    dend_10 { pt3dadd( 8.77777, 17.3273, 1.47514, 0.37 ) }
    dend_10 { pt3dadd( 9.68774, 18.3943, 0.280359, 0.22 ) }
    dend_10 { pt3dadd( 10.0754, 18.8065, -0.174086, 0.22 ) }
    dend_10 { pt3dadd( 10.6182, 19.3142, -0.774016, 0.66 ) }
    dend_10 { pt3dadd( 11.3641, 19.8968, -1.5196, 1.47 ) }
    dend_10 { pt3dadd( 11.7857, 20.1529, -1.87004, 1.47 ) }
    dend_10 { pt3dadd( 12.9332, 20.6866, -2.69777, 0.3 ) }
    // Section: dend_7, id: dend_7, parent: dend_6 (entry count 52/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 5.53658, 12.1386, 7.11596, 2.06 ) }
    dend_7 { pt3dadd( 4.94206, 13.0096, 8.00279, 2.06 ) }
    dend_7 { pt3dadd( 4.15978, 14.1557, 9.16969, 0.66 ) }
    dend_7 { pt3dadd( 3.36444, 15.3208, 10.3561, 0.66 ) }
    dend_7 { pt3dadd( 2.84672, 16.0793, 11.1283, 0.66 ) }
    // Section: dend_4, id: dend_4, parent: dend_0 (entry count 57/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 27.1444, -13.2253, -8.26663, 0.37 ) }
    dend_4 { pt3dadd( 27.8028, -13.6888, -8.0202, 0.37 ) }
    dend_4 { pt3dadd( 28.2009, -13.9618, -7.80942, 0.74 ) }
    dend_4 { pt3dadd( 28.739, -14.3393, -7.48702, 1.18 ) }
    dend_4 { pt3dadd( 29.3336, -14.7514, -7.13482, 1.33 ) }
    dend_4 { pt3dadd( 30.2781, -15.4113, -6.57598, 0.37 ) }
    dend_4 { pt3dadd( 30.9952, -15.8919, -6.17313, 0.37 ) }
    dend_4 { pt3dadd( 31.6535, -16.2978, -5.79911, 0.81 ) }
    dend_4 { pt3dadd( 32.1778, -16.6087, -5.51091, 1.47 ) }
    dend_4 { pt3dadd( 32.96, -17.0659, -5.13142, 1.77 ) }
    dend_4 { pt3dadd( 34.0435, -17.663, -4.75518, 0.29 ) }
    dend_4 { pt3dadd( 34.7237, -18.0098, -4.66366, 0.22 ) }
    dend_4 { pt3dadd( 34.9883, -18.1471, -4.67713, 0.22 ) }
    dend_4 { pt3dadd( 35.4603, -18.406, -4.77488, 0.22 ) }
    dend_4 { pt3dadd( 36.1653, -18.8143, -5.01274, 0.29 ) }
    dend_4 { pt3dadd( 36.652, -19.1078, -5.22941, 0.96 ) }
    dend_4 { pt3dadd( 37.5956, -19.7117, -5.6908, 1.7 ) }
    dend_4 { pt3dadd( 38.4635, -20.302, -6.10048, 0.74 ) }
    dend_4 { pt3dadd( 39.108, -20.7619, -6.37558, 0.37 ) }
    dend_4 { pt3dadd( 39.9888, -21.4493, -6.66757, 0.22 ) }
    dend_4 { pt3dadd( 40.5768, -21.9386, -6.79756, 0.22 ) }
    dend_4 { pt3dadd( 41.1302, -22.4141, -6.8958, 0.22 ) }
    dend_4 { pt3dadd( 41.5015, -22.74, -6.94989, 0.52 ) }
    dend_4 { pt3dadd( 42.027, -23.2185, -7.02044, 1.18 ) }
    dend_4 { pt3dadd( 43.104, -24.2538, -7.17134, 0.29 ) }
    dend_4 { pt3dadd( 43.7776, -24.9345, -7.30148, 0.29 ) }
    dend_4 { pt3dadd( 44.5514, -25.7405, -7.51872, 0.74 ) }
    dend_4 { pt3dadd( 45.0238, -26.2313, -7.69794, 1.7 ) }
    dend_4 { pt3dadd( 45.6638, -26.8895, -7.9808, 2.36 ) }
    dend_4 { pt3dadd( 46.7373, -27.976, -8.50633, 0.29 ) }
    dend_4 { pt3dadd( 47.4766, -28.7122, -8.89197, 0.22 ) }
    dend_4 { pt3dadd( 48.3002, -29.5062, -9.28282, 0.59 ) }
    dend_4 { pt3dadd( 49.2991, -30.4096, -9.68489, 0.22 ) }
    dend_4 { pt3dadd( 49.8876, -30.8965, -9.91009, 0.81 ) }
    dend_4 { pt3dadd( 50.3454, -31.2401, -10.074, 1.47 ) }
    dend_4 { pt3dadd( 50.8473, -31.5864, -10.2514, 2.14 ) }
    dend_4 { pt3dadd( 52.3133, -32.5455, -10.7471, 0.22 ) }
    dend_4 { pt3dadd( 53.7137, -33.4196, -11.1957, 0.29 ) }
    dend_4 { pt3dadd( 54.6408, -33.9721, -11.4866, 0.29 ) }
    dend_4 { pt3dadd( 55.1539, -34.2705, -11.6545, 1.18 ) }
    dend_4 { pt3dadd( 55.8337, -34.6483, -11.8981, 2.14 ) }
    dend_4 { pt3dadd( 56.2868, -34.8953, -12.0851, 0.29 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 99/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 27.1444, -13.2253, -8.26663, 0.22 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_1 { pt3dadd( 27.224, -12.4811, -8.7991, 0.22 ) }
    dend_1 { pt3dadd( 27.2716, -11.8248, -9.1836, 0.22 ) }
    dend_1 { pt3dadd( 27.302, -11.5516, -9.31177, 0.22 ) }
    dend_1 { pt3dadd( 27.3638, -11.1381, -9.46775, 0.22 ) }
    dend_1 { pt3dadd( 27.4969, -10.4984, -9.68891, 0.29 ) }
    dend_1 { pt3dadd( 27.7025, -9.72466, -9.94441, 0.37 ) }
    dend_1 { pt3dadd( 27.9101, -9.02507, -10.1614, 0.81 ) }
    dend_1 { pt3dadd( 28.2036, -8.23567, -10.4326, 1.03 ) }
    dend_1 { pt3dadd( 28.5676, -7.52493, -10.7427, 0.66 ) }
    dend_1 { pt3dadd( 29.2513, -6.61242, -11.2547, 0.29 ) }
    dend_1 { pt3dadd( 29.5996, -6.32287, -11.4991, 0.22 ) }
    dend_1 { pt3dadd( 30.0887, -6.22407, -11.7857, 0.22 ) }
    dend_1 { pt3dadd( 30.7189, -6.30531, -12.109, 0.37 ) }
    dend_1 { pt3dadd( 31.3256, -6.48222, -12.3815, 1.03 ) }
    dend_1 { pt3dadd( 31.981, -6.71948, -12.6397, 2.14 ) }
    dend_1 { pt3dadd( 32.5434, -6.90638, -12.7862, 2.14 ) }
    dend_1 { pt3dadd( 34.5248, -7.38167, -13.1069, 0.29 ) }
    dend_1 { pt3dadd( 35.1199, -7.45518, -13.1423, 0.29 ) }
    dend_1 { pt3dadd( 35.56, -7.4682, -13.1519, 0.74 ) }
    dend_1 { pt3dadd( 36.2692, -7.42572, -13.1802, 0.88 ) }
    dend_1 { pt3dadd( 37.9392, -7.18188, -13.3406, 0.37 ) }
    dend_1 { pt3dadd( 38.5513, -7.06144, -13.466, 0.44 ) }
    dend_1 { pt3dadd( 39.4113, -6.82504, -13.692, 0.29 ) }
    dend_1 { pt3dadd( 40.2797, -6.58248, -13.9637, 0.96 ) }
    dend_1 { pt3dadd( 41.4479, -6.26596, -14.4109, 1.77 ) }
    dend_1 { pt3dadd( 42.2978, -6.06439, -14.8379, 1.99 ) }
    dend_1 { pt3dadd( 43.6776, -5.82614, -15.8276, 0.29 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 27/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 40.1343, -1.3968, 0.0, 0.191972 ) }
    axon_1 { pt3dadd( 55.1293, -1.78342, 0.0, 0.191972 ) }
    axon_1 { pt3dadd( 70.1244, -2.17003, 0.0, 0.191972 ) }
    // Section: dend_15, id: dend_15, parent: dend_13 (entry count 30/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -76.3046, 15.5978, -9.94019, 0.29 ) }
    dend_15 { pt3dadd( -77.7671, 13.7807, -9.57659, 0.29 ) }
    dend_15 { pt3dadd( -78.5422, 12.8176, -9.38388, 0.52 ) }
    dend_15 { pt3dadd( -79.1908, 12.0118, -9.22264, 0.07 ) }
    dend_15 { pt3dadd( -79.5967, 11.5074, -9.1217, 0.15 ) }
    dend_15 { pt3dadd( -80.6685, 10.1757, -8.85524, 0.15 ) }
    dend_15 { pt3dadd( -81.0274, 9.72978, -8.766, 0.15 ) }
    // Section: dend_14, id: dend_14, parent: dend_13 (entry count 37/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( -76.3046, 15.5978, -9.94019, 0.15 ) }
    dend_14 { pt3dadd( -77.7263, 17.0294, -10.1614, 0.15 ) }
    dend_14 { pt3dadd( -78.4861, 17.816, -10.2029, 0.66 ) }
    dend_14 { pt3dadd( -79.012, 18.3594, -10.2048, 0.07 ) }
    dend_14 { pt3dadd( -79.5725, 18.9324, -10.1924, 0.81 ) }
    dend_14 { pt3dadd( -79.8748, 19.2394, -10.1945, 0.81 ) }
    dend_14 { pt3dadd( -80.819, 20.1646, -10.173, 0.15 ) }
    dend_14 { pt3dadd( -81.5932, 20.9118, -10.0865, 0.15 ) }
    dend_14 { pt3dadd( -82.2075, 21.4955, -9.98976, 1.18 ) }
    dend_14 { pt3dadd( -82.7485, 22.0179, -9.90196, 2.21 ) }
    dend_14 { pt3dadd( -83.907, 23.1707, -9.66411, 0.07 ) }
    dend_14 { pt3dadd( -84.7986, 24.0811, -9.4694, 0.15 ) }
    dend_14 { pt3dadd( -85.3279, 24.6149, -9.34252, 0.15 ) }
    dend_14 { pt3dadd( -85.8121, 25.1053, -9.24304, 0.81 ) }
    dend_14 { pt3dadd( -86.7362, 26.0413, -9.07559, 2.14 ) }
    dend_14 { pt3dadd( -88.602, 27.8897, -8.77149, 0.29 ) }
    dend_14 { pt3dadd( -89.6789, 28.9617, -8.63275, 0.22 ) }
    dend_14 { pt3dadd( -90.6803, 29.952, -8.56553, 0.15 ) }
    dend_14 { pt3dadd( -91.7525, 30.9838, -8.53715, 1.03 ) }
    dend_14 { pt3dadd( -92.259, 31.4595, -8.55058, 2.21 ) }
    dend_14 { pt3dadd( -93.7926, 32.8527, -8.69271, 0.07 ) }
    dend_14 { pt3dadd( -94.5962, 33.561, -8.84835, 0.07 ) }
    dend_14 { pt3dadd( -94.824, 33.7629, -8.90088, 0.29 ) }
    dend_14 { pt3dadd( -95.6081, 34.4726, -9.09745, 0.81 ) }
    dend_14 { pt3dadd( -96.4537, 35.2275, -9.27598, 0.15 ) }
    dend_14 { pt3dadd( -97.1627, 35.8527, -9.44409, 0.29 ) }
    dend_14 { pt3dadd( -97.9432, 36.5316, -9.6454, 0.15 ) }
    dend_14 { pt3dadd( -98.3495, 36.8738, -9.73456, 0.96 ) }
    dend_14 { pt3dadd( -98.9975, 37.4305, -9.86525, 1.84 ) }
    dend_14 { pt3dadd( -100.248, 38.5149, -10.0075, 0.07 ) }
    dend_14 { pt3dadd( -100.641, 38.8604, -10.0118, 0.22 ) }
    dend_14 { pt3dadd( -101.209, 39.3716, -9.97082, 0.15 ) }
    dend_14 { pt3dadd( -101.827, 39.9381, -9.86872, 0.29 ) }
    dend_14 { pt3dadd( -102.589, 40.6347, -9.71453, 0.22 ) }
    dend_14 { pt3dadd( -103.543, 41.5099, -9.49792, 1.33 ) }
    dend_14 { pt3dadd( -104.336, 42.1976, -9.30502, 2.73 ) }
    dend_14 { pt3dadd( -104.931, 42.682, -9.16722, 2.73 ) }
    dend_14 { pt3dadd( -106.897, 44.2081, -8.73383, 0.15 ) }
    dend_14 { pt3dadd( -107.651, 44.7711, -8.58027, 1.47 ) }
    dend_14 { pt3dadd( -108.329, 45.2612, -8.45321, 2.43 ) }
    dend_14 { pt3dadd( -110.172, 46.555, -8.18549, 0.07 ) }
    dend_14 { pt3dadd( -110.974, 47.1013, -8.06778, 1.11 ) }
    dend_14 { pt3dadd( -112.043, 47.7993, -7.91973, 0.15 ) }
    dend_14 { pt3dadd( -112.802, 48.2656, -7.81428, 0.15 ) }
    // Section: dend_9, id: dend_9, parent: dend_7 (entry count 81/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 2.84672, 16.0793, 11.1283, 0.52 ) }
    dend_9 { pt3dadd( 2.00823, 16.5109, 11.1212, 0.52 ) }
    dend_9 { pt3dadd( 1.34599, 16.9044, 11.157, 1.03 ) }
    dend_9 { pt3dadd( 0.703902, 17.3663, 11.2585, 0.88 ) }
    dend_9 { pt3dadd( -0.0538031, 17.9699, 11.424, 0.22 ) }
    dend_9 { pt3dadd( -1.07636, 18.836, 11.6829, 0.52 ) }
    dend_9 { pt3dadd( -1.62545, 19.3332, 11.8336, 0.15 ) }
    dend_9 { pt3dadd( -2.16596, 19.894, 12.0463, 0.29 ) }
    dend_9 { pt3dadd( -2.8927, 20.7205, 12.3813, 0.29 ) }
    dend_9 { pt3dadd( -3.06117, 20.9235, 12.4635, 0.29 ) }
    dend_9 { pt3dadd( -3.44988, 21.4083, 12.6441, 1.18 ) }
    dend_9 { pt3dadd( -4.00624, 22.1342, 12.9008, 2.58 ) }
    dend_9 { pt3dadd( -4.68075, 23.0002, 13.2025, 2.58 ) }
    dend_9 { pt3dadd( -6.3555, 25.0741, 13.9138, 0.37 ) }
    dend_9 { pt3dadd( -7.09312, 25.9627, 14.2109, 0.37 ) }
    dend_9 { pt3dadd( -7.93798, 26.9734, 14.5524, 0.22 ) }
    dend_9 { pt3dadd( -8.44295, 27.5688, 14.7589, 0.44 ) }
    dend_9 { pt3dadd( -8.81375, 27.9974, 14.9092, 1.33 ) }
    dend_9 { pt3dadd( -9.4011, 28.6739, 15.1416, 2.06 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_9 { pt3dadd( -10.9087, 30.399, 15.7647, 0.15 ) }
    dend_9 { pt3dadd( -11.3638, 30.919, 15.9548, 0.74 ) }
    dend_9 { pt3dadd( -12.0008, 31.6569, 16.2139, 2.06 ) }
    dend_9 { pt3dadd( -12.1077, 31.7837, 16.2562, 2.06 ) }
    dend_9 { pt3dadd( -13.5202, 33.509, 16.8146, 0.22 ) }
    dend_9 { pt3dadd( -13.9428, 34.0625, 16.9835, 0.74 ) }
    dend_9 { pt3dadd( -14.4015, 34.7189, 17.1865, 1.03 ) }
    dend_9 { pt3dadd( -15.1693, 35.8654, 17.5333, 0.15 ) }
    dend_9 { pt3dadd( -15.6038, 36.5888, 17.7367, 0.88 ) }
    dend_9 { pt3dadd( -15.9729, 37.241, 17.9088, 1.25 ) }
    dend_9 { pt3dadd( -16.819, 38.882, 18.3207, 0.22 ) }
    dend_9 { pt3dadd( -17.1886, 39.642, 18.5032, 1.55 ) }
    dend_9 { pt3dadd( -17.5431, 40.4171, 18.6968, 2.43 ) }
    dend_9 { pt3dadd( -18.7323, 43.0301, 19.3605, 0.22 ) }
    dend_9 { pt3dadd( -19.0543, 43.7291, 19.5371, 0.22 ) }
    dend_9 { pt3dadd( -19.5693, 44.8022, 19.8147, 0.22 ) }
    dend_9 { pt3dadd( -19.8164, 45.2918, 19.9398, 0.88 ) }
    dend_9 { pt3dadd( -20.4541, 46.4702, 20.2349, 2.88 ) }
    dend_9 { pt3dadd( -21.6841, 48.5141, 20.7499, 0.15 ) }
    dend_9 { pt3dadd( -22.1623, 49.2051, 20.9188, 0.37 ) }
    dend_9 { pt3dadd( -23.2005, 50.6002, 21.2567, 0.07 ) }
    dend_9 { pt3dadd( -23.4715, 50.9372, 21.3388, 1.03 ) }
    dend_9 { pt3dadd( -23.9484, 51.5045, 21.4784, 1.55 ) }
    dend_9 { pt3dadd( -25.1363, 52.8361, 21.8113, 0.15 ) }
    dend_9 { pt3dadd( -25.6841, 53.4265, 21.9734, 0.96 ) }
    dend_9 { pt3dadd( -26.7088, 54.5147, 22.3023, 0.07 ) }
    dend_9 { pt3dadd( -27.2795, 55.1322, 22.5164, 0.07 ) }
    dend_9 { pt3dadd( -27.6744, 55.5711, 22.6658, 0.52 ) }
    dend_9 { pt3dadd( -28.2477, 56.2306, 22.8808, 1.4 ) }
    dend_9 { pt3dadd( -28.845, 56.9708, 23.0651, 0.37 ) }
    dend_9 { pt3dadd( -29.6653, 58.0318, 23.2925, 0.07 ) }
    dend_9 { pt3dadd( -30.5048, 59.1609, 23.4584, 0.07 ) }
    dend_9 { pt3dadd( -31.0091, 59.8702, 23.5283, 0.81 ) }
    dend_9 { pt3dadd( -31.6959, 60.8676, 23.6038, 2.43 ) }
    dend_9 { pt3dadd( -33.046, 62.87, 23.7186, 0.07 ) }
    dend_9 { pt3dadd( -33.9454, 64.1979, 23.8269, 0.07 ) }
    dend_9 { pt3dadd( -34.6283, 65.1974, 23.9563, 1.18 ) }
    dend_9 { pt3dadd( -35.6691, 66.7018, 24.2578, 0.15 ) }
    dend_9 { pt3dadd( -36.0289, 67.212, 24.4027, 0.96 ) }
    dend_9 { pt3dadd( -36.4835, 67.8074, 24.6209, 1.99 ) }
    dend_9 { pt3dadd( -37.7101, 69.2297, 25.3121, 0.15 ) }
    dend_9 { pt3dadd( -38.4515, 69.9936, 25.7224, 0.96 ) }
    dend_9 { pt3dadd( -39.2416, 70.6962, 26.1672, 0.07 ) }
    dend_9 { pt3dadd( -39.7658, 71.0848, 26.4136, 0.29 ) }
    dend_9 { pt3dadd( -40.7762, 71.7734, 26.7848, 0.07 ) }
    dend_9 { pt3dadd( -41.2131, 72.0541, 26.8993, 0.07 ) }
    dend_9 { pt3dadd( -41.9543, 72.511, 27.0287, 1.33 ) }
    dend_9 { pt3dadd( -42.5602, 72.9017, 27.0922, 1.62 ) }
    dend_9 { pt3dadd( -44.2099, 74.1819, 27.2589, 0.15 ) }
    dend_9 { pt3dadd( -44.8549, 74.7873, 27.3282, 0.44 ) }
    dend_9 { pt3dadd( -45.8549, 75.9048, 27.4424, 0.15 ) }
    dend_9 { pt3dadd( -46.3554, 76.5337, 27.5166, 1.03 ) }
    dend_9 { pt3dadd( -47.0078, 77.4352, 27.6662, 2.21 ) }
    dend_9 { pt3dadd( -48.3444, 79.4485, 28.0665, 0.15 ) }
    dend_9 { pt3dadd( -48.7607, 80.1282, 28.2238, 0.59 ) }
    dend_9 { pt3dadd( -48.9953, 80.5077, 28.3117, 1.03 ) }
    dend_9 { pt3dadd( -49.5111, 81.3304, 28.4701, 0.07 ) }
    dend_9 { pt3dadd( -50.1459, 82.2952, 28.6192, 0.15 ) }
    dend_9 { pt3dadd( -50.7034, 83.0866, 28.7064, 0.88 ) }
    dend_9 { pt3dadd( -50.807, 83.2234, 28.7043, 0.88 ) }
    dend_9 { pt3dadd( -51.8689, 84.6081, 28.5228, 0.15 ) }
    dend_9 { pt3dadd( -52.6825, 85.6707, 28.2611, 0.22 ) }
    dend_9 { pt3dadd( -52.9113, 85.974, 28.1576, 0.81 ) }
    dend_9 { pt3dadd( -53.4166, 86.6361, 27.8776, 1.55 ) }
    dend_9 { pt3dadd( -53.8943, 87.2453, 27.5942, 2.14 ) }
    dend_9 { pt3dadd( -54.8097, 88.3804, 27.0504, 0.59 ) }
    dend_9 { pt3dadd( -55.3531, 88.9991, 26.7428, 0.22 ) }
    dend_9 { pt3dadd( -56.3412, 90.0346, 26.206, 0.15 ) }
    dend_9 { pt3dadd( -56.7163, 90.4048, 26.0024, 0.15 ) }
    dend_9 { pt3dadd( -56.9748, 90.6465, 25.8667, 0.44 ) }
    dend_9 { pt3dadd( -57.2708, 90.9133, 25.7104, 0.44 ) }
    dend_9 { pt3dadd( -58.16, 91.7188, 25.2286, 0.22 ) }
    dend_9 { pt3dadd( -59.5105, 92.9901, 24.4681, 0.22 ) }
    dend_9 { pt3dadd( -59.7841, 93.2612, 24.3098, 1.62 ) }
    dend_9 { pt3dadd( -60.2809, 93.7786, 24.042, 2.58 ) }
    dend_9 { pt3dadd( -61.9657, 95.5979, 23.2314, 0.07 ) }
    dend_9 { pt3dadd( -62.315, 95.9892, 23.0863, 0.07 ) }
    dend_9 { pt3dadd( -62.7136, 96.4574, 22.9617, 0.29 ) }
    dend_9 { pt3dadd( -63.1532, 96.9685, 22.9086, 0.52 ) }
    dend_9 { pt3dadd( -64.0634, 98.0304, 22.9188, 0.15 ) }
    dend_9 { pt3dadd( -64.5686, 98.6334, 22.9839, 0.81 ) }
    dend_9 { pt3dadd( -64.9734, 99.1256, 23.0875, 1.55 ) }
    dend_9 { pt3dadd( -65.6257, 99.8955, 23.2669, 0.37 ) }
    dend_9 { pt3dadd( -66.7028, 101.151, 23.5812, 0.07 ) }
    dend_9 { pt3dadd( -67.3528, 101.922, 23.7855, 0.07 ) }
    dend_9 { pt3dadd( -67.7714, 102.447, 23.9263, 0.88 ) }
    dend_9 { pt3dadd( -68.0069, 102.751, 23.9957, 0.88 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 87/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 2.84672, 16.0793, 11.1283, 0.29 ) }
    dend_8 { pt3dadd( 2.74147, 16.1508, 11.887, 0.29 ) }
    dend_8 { pt3dadd( 2.57305, 16.4062, 12.9789, 0.29 ) }
    dend_8 { pt3dadd( 2.41286, 16.8463, 13.8855, 0.29 ) }
    dend_8 { pt3dadd( 2.18858, 17.604, 15.1114, 0.29 ) }
    dend_8 { pt3dadd( 2.01036, 18.2515, 16.0453, 0.96 ) }
    dend_8 { pt3dadd( 1.75013, 19.3724, 17.5661, 1.33 ) }
    dend_8 { pt3dadd( 1.58519, 20.2844, 18.5991, 2.65 ) }
    dend_8 { pt3dadd( 1.3133, 22.1096, 20.5174, 0.52 ) }
    dend_8 { pt3dadd( 1.20877, 22.8465, 21.3143, 0.52 ) }
    dend_8 { pt3dadd( 1.07142, 23.8053, 22.4086, 0.59 ) }
    dend_8 { pt3dadd( 0.907703, 24.9473, 23.818, 1.84 ) }
    dend_8 { pt3dadd( 0.853686, 25.5281, 24.6135, 1.7 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_8 { pt3dadd( 0.78441, 27.1114, 27.0957, 0.44 ) }
    dend_8 { pt3dadd( 0.7989, 28.1379, 28.9026, 1.25 ) }
    dend_8 { pt3dadd( 0.866159, 28.9482, 30.3343, 2.51 ) }
    dend_8 { pt3dadd( 0.937658, 29.3875, 31.1134, 2.51 ) }
    dend_8 { pt3dadd( 1.31521, 30.6171, 33.2977, 0.44 ) }
    dend_8 { pt3dadd( 1.62716, 31.2633, 34.4608, 0.37 ) }
    dend_8 { pt3dadd( 2.0272, 31.8534, 35.4758, 0.37 ) }
    dend_8 { pt3dadd( 2.37634, 32.2887, 36.2183, 2.21 ) }
    dend_8 { pt3dadd( 2.6687, 32.6132, 36.7801, 2.73 ) }
    dend_8 { pt3dadd( 3.63479, 33.5793, 38.5431, 0.37 ) }
    dend_8 { pt3dadd( 4.21069, 34.1023, 39.6229, 0.37 ) }
    dend_8 { pt3dadd( 4.83611, 34.6867, 40.9086, 0.37 ) }
    dend_8 { pt3dadd( 5.37346, 35.2392, 42.2371, 0.96 ) }
    dend_8 { pt3dadd( 5.67153, 35.5876, 43.1451, 2.58 ) }
    dend_8 { pt3dadd( 6.05936, 36.1139, 44.6169, 0.15 ) }
    dend_8 { pt3dadd( 6.37045, 36.6193, 46.0131, 0.15 ) }
    dend_8 { pt3dadd( 6.83089, 37.3882, 47.9975, 0.37 ) }
    dend_8 { pt3dadd( 7.25376, 38.1049, 49.7502, 0.37 ) }
    dend_8 { pt3dadd( 7.58527, 38.6715, 51.0763, 1.18 ) }
    dend_8 { pt3dadd( 8.02378, 39.4164, 52.7623, 1.4 ) }
    dend_8 { pt3dadd( 8.27633, 39.8583, 53.7304, 0.37 ) }
    dend_8 { pt3dadd( 8.57896, 40.396, 54.8288, 1.4 ) }
    dend_8 { pt3dadd( 8.93406, 41.041, 56.1376, 0.29 ) }
    dend_8 { pt3dadd( 9.19825, 41.5627, 57.2199, 0.66 ) }
    dend_8 { pt3dadd( 9.45071, 42.1669, 58.4876, 0.37 ) }
    dend_8 { pt3dadd( 9.719, 43.2838, 60.8441, 0.88 ) }
    dend_8 { pt3dadd( 9.74561, 43.5794, 61.5004, 1.11 ) }
    dend_8 { pt3dadd( 9.75859, 44.2338, 63.0633, 1.11 ) }
    dend_8 { pt3dadd( 9.7504, 45.015, 64.9585, 1.11 ) }
    dend_8 { pt3dadd( 9.7332, 45.3998, 65.8628, 2.29 ) }
    dend_8 { pt3dadd( 9.67682, 46.4059, 68.1188, 0.44 ) }
    dend_8 { pt3dadd( 9.67371, 47.1138, 69.6897, 0.59 ) }
    dend_8 { pt3dadd( 9.72604, 47.8145, 71.2904, 0.59 ) }
    dend_8 { pt3dadd( 9.78725, 48.1786, 72.0875, 0.59 ) }
    dend_8 { pt3dadd( 9.9182, 48.6728, 73.1804, 0.22 ) }
    dend_8 { pt3dadd( 10.1282, 49.2522, 74.5176, 0.37 ) }
    dend_8 { pt3dadd( 10.4574, 49.9891, 76.1886, 1.55 ) }
    dend_8 { pt3dadd( 10.6868, 50.4964, 77.2778, 2.36 ) }
    dend_8 { pt3dadd( 11.2541, 51.8792, 80.0755, 0.22 ) }
    dend_8 { pt3dadd( 11.5884, 52.6878, 81.7276, 0.22 ) }
    dend_8 { pt3dadd( 11.8172, 53.2599, 82.9175, 0.22 ) }
    dend_8 { pt3dadd( 11.9928, 53.7432, 83.895, 1.18 ) }
    dend_8 { pt3dadd( 12.1208, 54.1494, 84.7037, 1.47 ) }
    dend_8 { pt3dadd( 12.4553, 55.3804, 87.1868, 0.66 ) }
    dend_8 { pt3dadd( 12.7248, 56.5803, 89.6476, 0.15 ) }
    dend_8 { pt3dadd( 12.9114, 57.5532, 91.6358, 0.66 ) }
    dend_8 { pt3dadd( 13.0456, 58.3132, 93.1726, 1.33 ) }
    dend_8 { pt3dadd( 13.1993, 59.2953, 95.1753, 0.52 ) }
    dend_8 { pt3dadd( 13.3163, 60.1518, 96.9618, 1.11 ) }
    dend_8 { pt3dadd( 13.4365, 61.0212, 98.7171, 1.33 ) }
    dend_8 { pt3dadd( 13.5689, 61.9052, 100.435, 0.22 ) }
    dend_8 { pt3dadd( 13.6472, 62.3135, 101.208, 0.81 ) }
    dend_8 { pt3dadd( 13.8794, 63.3364, 103.131, 0.22 ) }
    dend_8 { pt3dadd( 14.2387, 64.6062, 105.521, 0.74 ) }
    dend_8 { pt3dadd( 14.5114, 65.3744, 107.037, 0.22 ) }
    dend_8 { pt3dadd( 14.889, 66.2636, 108.884, 0.15 ) }
    dend_8 { pt3dadd( 15.1905, 66.8917, 110.185, 0.29 ) }
    dend_8 { pt3dadd( 15.66, 67.7553, 111.944, 0.07 ) }
    dend_8 { pt3dadd( 16.2671, 68.7531, 113.818, 0.07 ) }
    dend_8 { pt3dadd( 16.9947, 69.8138, 115.683, 0.07 ) }
    dend_8 { pt3dadd( 17.3249, 70.2792, 116.464, 0.07 ) }
    dend_8 { pt3dadd( 18.0804, 71.3733, 118.182, 0.37 ) }
    dend_8 { pt3dadd( 18.8768, 72.5541, 119.924, 0.37 ) }
    dend_8 { pt3dadd( 19.9978, 74.2553, 122.238, 0.07 ) }
    dend_8 { pt3dadd( 20.6505, 75.3013, 123.553, 1.03 ) }
    dend_8 { pt3dadd( 21.6561, 76.9438, 125.615, 0.22 ) }
    dend_8 { pt3dadd( 22.6583, 78.5828, 127.742, 0.22 ) }
    dend_8 { pt3dadd( 22.9198, 79.0077, 128.372, 1.33 ) }
    dend_8 { pt3dadd( 23.1732, 79.4211, 129.026, 1.92 ) }
    dend_8 { pt3dadd( 24.0445, 80.7721, 131.403, 0.07 ) }
    dend_8 { pt3dadd( 24.5858, 81.5748, 132.956, 0.07 ) }
    dend_8 { pt3dadd( 24.837, 81.9078, 133.663, 0.07 ) }
    dend_8 { pt3dadd( 25.8669, 83.1769, 136.53, 0.37 ) }
    dend_8 { pt3dadd( 26.3971, 83.8032, 138.056, 0.37 ) }
    dend_8 { pt3dadd( 26.8983, 84.3714, 139.565, 0.37 ) }
    dend_8 { pt3dadd( 27.2525, 84.7741, 140.606, 0.37 ) }
    dend_8 { pt3dadd( 27.5196, 85.1028, 141.349, 0.07 ) }
    dend_8 { pt3dadd( 27.8384, 85.5231, 142.227, 0.59 ) }
    dend_8 { pt3dadd( 28.7069, 86.8026, 144.505, 0.07 ) }
    dend_8 { pt3dadd( 29.469, 88.0704, 146.668, 0.52 ) }
    dend_8 { pt3dadd( 29.8453, 88.78, 147.801, 0.07 ) }
    dend_8 { pt3dadd( 30.0799, 89.2729, 148.582, 0.07 ) }
    dend_8 { pt3dadd( 30.5349, 90.3963, 150.318, 0.07 ) }
    dend_8 { pt3dadd( 30.6668, 90.8155, 150.921, 0.37 ) }
    dend_8 { pt3dadd( 30.8915, 91.9036, 152.362, 0.07 ) }
    dend_8 { pt3dadd( 30.9266, 92.2028, 152.745, 0.29 ) }
    dend_8 { pt3dadd( 31.0166, 93.6687, 154.619, 0.15 ) }
    dend_8 { pt3dadd( 31.0507, 94.4018, 155.474, 1.18 ) }
    dend_8 { pt3dadd( 31.1037, 95.5372, 156.708, 1.7 ) }
    dend_8 { pt3dadd( 31.1736, 97.3249, 158.639, 0.15 ) }
    dend_8 { pt3dadd( 31.2024, 98.3921, 159.768, 0.15 ) }
    dend_8 { pt3dadd( 31.2226, 99.36, 160.804, 1.11 ) }
    dend_8 { pt3dadd( 31.2419, 101.132, 162.727, 0.07 ) }
    dend_8 { pt3dadd( 31.2529, 102.32, 164.061, 0.07 ) }
    dend_8 { pt3dadd( 31.2555, 103.38, 165.266, 0.66 ) }
    dend_8 { pt3dadd( 31.2421, 104.3, 166.32, 1.25 ) }
    dend_8 { pt3dadd( 31.2105, 105.01, 167.166, 1.25 ) }
    dend_8 { pt3dadd( 31.1102, 106.361, 168.795, 0.52 ) }
    dend_8 { pt3dadd( 31.0548, 106.948, 169.497, 0.52 ) }
    dend_8 { pt3dadd( 31.013, 107.48, 170.103, 0.29 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_8 { pt3dadd( 30.9701, 108.417, 171.116, 1.18 ) }
    dend_8 { pt3dadd( 30.934, 109.711, 172.428, 0.15 ) }
    dend_8 { pt3dadd( 30.9245, 110.434, 173.162, 0.44 ) }
    dend_8 { pt3dadd( 30.9401, 111.497, 174.325, 0.07 ) }
    dend_8 { pt3dadd( 30.9624, 112.265, 175.265, 0.07 ) }
    dend_8 { pt3dadd( 30.9952, 112.836, 176.012, 0.37 ) }
    dend_8 { pt3dadd( 31.0832, 113.811, 177.278, 1.77 ) }
    dend_8 { pt3dadd( 31.3189, 115.553, 179.408, 0.29 ) }
    dend_8 { pt3dadd( 31.5493, 116.943, 181.057, 0.29 ) }
    dend_8 { pt3dadd( 31.7271, 117.9, 182.099, 0.29 ) }
    dend_8 { pt3dadd( 31.9333, 118.845, 183.053, 1.33 ) }
    dend_8 { pt3dadd( 32.1612, 119.756, 183.933, 2.88 ) }
    dend_8 { pt3dadd( 32.8273, 122.083, 186.011, 0.07 ) }
    dend_8 { pt3dadd( 33.173, 123.203, 186.904, 0.07 ) }
    dend_8 { pt3dadd( 33.377, 123.852, 187.404, 0.96 ) }
    dend_8 { pt3dadd( 33.8038, 125.191, 188.475, 0.15 ) }
    dend_8 { pt3dadd( 34.2193, 126.448, 189.554, 0.15 ) }
    dend_8 { pt3dadd( 34.4789, 127.247, 190.318, 1.03 ) }
    dend_8 { pt3dadd( 34.8497, 128.409, 191.557, 0.29 ) }
    dend_8 { pt3dadd( 35.2334, 129.676, 193.015, 0.29 ) }
    dend_8 { pt3dadd( 35.5067, 130.626, 194.194, 1.47 ) }
    dend_8 { pt3dadd( 35.7055, 131.39, 195.198, 2.95 ) }
    dend_8 { pt3dadd( 36.1826, 133.485, 197.989, 0.22 ) }
    dend_8 { pt3dadd( 36.4108, 134.613, 199.516, 0.22 ) }
    dend_8 { pt3dadd( 36.4789, 135.054, 200.118, 0.22 ) }
    dend_8 { pt3dadd( 36.5707, 135.86, 201.27, 0.88 ) }
    dend_8 { pt3dadd( 36.6219, 136.561, 202.332, 1.84 ) }
    dend_8 { pt3dadd( 36.68, 137.741, 204.159, 0.15 ) }
    dend_8 { pt3dadd( 36.7146, 138.661, 205.579, 1.25 ) }
    dend_8 { pt3dadd( 36.7594, 140.247, 207.978, 0.52 ) }
    dend_8 { pt3dadd( 36.8086, 142.178, 210.936, 0.15 ) }
    dend_8 { pt3dadd( 36.8255, 143.257, 212.657, 0.37 ) }
    // Section: dend_3, id: dend_3, parent: dend_1 (entry count 32/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 43.6776, -5.82614, -15.8276, 0.22 ) }
    dend_3 { pt3dadd( 44.0982, -5.69847, -16.5091, 0.22 ) }
    dend_3 { pt3dadd( 44.6033, -5.51065, -17.2116, 0.59 ) }
    dend_3 { pt3dadd( 45.0318, -5.32207, -17.7463, 0.59 ) }
    dend_3 { pt3dadd( 45.7333, -5.0134, -18.6216, 0.81 ) }
    dend_3 { pt3dadd( 46.463, -4.69232, -19.5321, 1.55 ) }
    dend_3 { pt3dadd( 47.0838, -4.41912, -20.3068, 2.14 ) }
    dend_3 { pt3dadd( 47.9784, -4.05637, -21.393, 0.22 ) }
    dend_3 { pt3dadd( 48.4579, -3.84719, -21.9931, 0.44 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 41/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 43.6776, -5.82614, -15.8276, 0.15 ) }
    dend_2 { pt3dadd( 44.1956, -6.06248, -15.6368, 0.15 ) }
    dend_2 { pt3dadd( 44.7651, -6.30843, -15.5053, 0.29 ) }
    dend_2 { pt3dadd( 45.7106, -6.6836, -15.3551, 0.15 ) }
    dend_2 { pt3dadd( 46.4275, -6.94111, -15.2724, 0.74 ) }
    dend_2 { pt3dadd( 46.9795, -7.12034, -15.224, 0.96 ) }
    dend_2 { pt3dadd( 48.2923, -7.50161, -15.126, 0.22 ) }
    dend_2 { pt3dadd( 49.1845, -7.71319, -15.1212, 0.37 ) }
    dend_2 { pt3dadd( 49.7723, -7.82791, -15.1753, 0.88 ) }
    dend_2 { pt3dadd( 50.4064, -7.94954, -15.3169, 1.25 ) }
    dend_2 { pt3dadd( 50.9725, -8.05875, -15.4866, 0.81 ) }
    dend_2 { pt3dadd( 51.6766, -8.17747, -15.7234, 0.22 ) }
    dend_2 { pt3dadd( 52.6241, -8.31682, -16.0582, 0.15 ) }
    dend_2 { pt3dadd( 53.2991, -8.42496, -16.2762, 0.52 ) }
    dend_2 { pt3dadd( 54.2157, -8.58443, -16.548, 1.03 ) }
    dend_2 { pt3dadd( 55.0342, -8.74288, -16.7777, 0.22 ) }
    dend_2 { pt3dadd( 55.3999, -8.81678, -16.8663, 0.22 ) }
    dend_2 { pt3dadd( 56.2553, -8.9908, -17.052, 0.37 ) }
    dend_2 { pt3dadd( 56.8767, -9.11195, -17.1593, 1.18 ) }
    dend_2 { pt3dadd( 58.0856, -9.32388, -17.3298, 2.43 ) }
    dend_2 { pt3dadd( 59.931, -9.61294, -17.5613, 0.22 ) }
    dend_2 { pt3dadd( 61.2271, -9.80357, -17.7224, 0.15 ) }
    dend_2 { pt3dadd( 61.8231, -9.88708, -17.7944, 0.88 ) }
    dend_2 { pt3dadd( 62.4974, -9.96227, -17.8733, 1.25 ) }
    dend_2 { pt3dadd( 63.8237, -10.051, -18.055, 0.15 ) }
    dend_2 { pt3dadd( 64.5011, -10.0589, -18.1143, 0.22 ) }
    dend_2 { pt3dadd( 65.6082, -9.98435, -18.1533, 0.15 ) }
    dend_2 { pt3dadd( 66.0481, -9.93394, -18.169, 0.29 ) }
    dend_2 { pt3dadd( 66.6161, -9.86187, -18.2033, 0.29 ) }
    dend_2 { pt3dadd( 67.777, -9.69493, -18.3512, 0.22 ) }
    dend_2 { pt3dadd( 69.1263, -9.47408, -18.6258, 1.33 ) }
    dend_2 { pt3dadd( 70.0728, -9.31522, -18.8691, 2.65 ) }
    dend_2 { pt3dadd( 70.7133, -9.22571, -19.0628, 2.65 ) }
    dend_2 { pt3dadd( 72.6129, -9.0535, -19.6797, 0.15 ) }
    dend_2 { pt3dadd( 73.5151, -9.02882, -19.9835, 0.29 ) }
    dend_2 { pt3dadd( 74.0199, -9.05021, -20.1492, 0.29 ) }
    dend_2 { pt3dadd( 74.4381, -9.08461, -20.2942, 0.22 ) }
    dend_2 { pt3dadd( 75.0899, -9.15164, -20.4831, 0.22 ) }
    dend_2 { pt3dadd( 75.67, -9.20907, -20.6276, 0.59 ) }
    dend_2 { pt3dadd( 76.2473, -9.27417, -20.7451, 0.81 ) }
    dend_2 { pt3dadd( 77.3789, -9.44775, -20.9253, 0.22 ) }
    dend_2 { pt3dadd( 78.2463, -9.58702, -21.0478, 0.22 ) }
    dend_2 { pt3dadd( 79.3923, -9.72264, -21.2034, 0.15 ) }
    dend_2 { pt3dadd( 79.805, -9.74881, -21.27, 0.29 ) }
    dend_2 { pt3dadd( 80.5957, -9.77077, -21.4208, 0.66 ) }
    dend_2 { pt3dadd( 81.7071, -9.78302, -21.7014, 0.07 ) }
    dend_2 { pt3dadd( 82.2658, -9.77831, -21.8721, 0.15 ) }
    dend_2 { pt3dadd( 83.2537, -9.76075, -22.1753, 0.15 ) }
    dend_2 { pt3dadd( 84.0278, -9.71817, -22.3929, 0.15 ) }
    dend_2 { pt3dadd( 84.2703, -9.68857, -22.4569, 0.66 ) }
    dend_2 { pt3dadd( 85.2284, -9.45189, -22.6955, 1.4 ) }
    dend_2 { pt3dadd( 86.1934, -9.12473, -22.9448, 2.88 ) }
    dend_2 { pt3dadd( 87.6739, -8.54471, -23.3133, 0.22 ) }
    dend_2 { pt3dadd( 88.4432, -8.23316, -23.4892, 0.52 ) }
    dend_2 { pt3dadd( 89.0234, -7.9814, -23.5971, 0.52 ) }
    dend_2 { pt3dadd( 90.3857, -7.33262, -23.8182, 0.15 ) }
    dend_2 { pt3dadd( 91.285, -6.83221, -23.9289, 0.15 ) }
    dend_2 { pt3dadd( 91.9534, -6.39473, -24.0311, 0.15 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_16, dend_11, dend_6, dend_5, dend_0, dend_18, dend_17, dend_13, dend_12, dend_10, dend_7, dend_4, dend_1, dend_15, dend_14, dend_9, dend_8, dend_3, dend_2]}
    ModelViewParmSubset_2 = new SectionList()
    dend_16 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_16, dend_11, dend_6, dend_5, dend_0, dend_18, dend_17, dend_13, dend_12, dend_10, dend_7, dend_4, dend_1, dend_15, dend_14, dend_9, dend_8, dend_3, dend_2]}
    ModelViewParmSubset_3 = new SectionList()
    soma_0 ModelViewParmSubset_3.append()
    dend_16 ModelViewParmSubset_3.append()
    dend_11 ModelViewParmSubset_3.append()
    dend_6 ModelViewParmSubset_3.append()
    dend_5 ModelViewParmSubset_3.append()
    dend_0 ModelViewParmSubset_3.append()
    dend_18 ModelViewParmSubset_3.append()
    dend_17 ModelViewParmSubset_3.append()
    dend_13 ModelViewParmSubset_3.append()
    dend_12 ModelViewParmSubset_3.append()
    dend_10 ModelViewParmSubset_3.append()
    dend_7 ModelViewParmSubset_3.append()
    dend_4 ModelViewParmSubset_3.append()
    dend_1 ModelViewParmSubset_3.append()
    dend_15 ModelViewParmSubset_3.append()
    dend_14 ModelViewParmSubset_3.append()
    dend_9 ModelViewParmSubset_3.append()
    dend_8 ModelViewParmSubset_3.append()
    dend_3 ModelViewParmSubset_3.append()
    dend_2 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_4 = new SectionList()
    axon_0 ModelViewParmSubset_4.append()
    axon_1 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_5 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_18 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_17 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_13 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_14 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_9 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_8 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_2 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_6 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_11 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_16 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_7 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_12 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_0 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_10 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_1 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_3 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_4 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_15 OneSecGrp_SectionRef_17.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_7, dend_7, dend_7, dend_7, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_3 all.append()
    dend_3 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert KdShu2007
        gmax_KdShu2007 = 4.2499998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dNAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__dNAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dNAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__dNAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_5 nseg = 5
    dend_18 nseg = 9
    dend_17 nseg = 11
    dend_13 nseg = 3
    dend_14 nseg = 3
    dend_9 nseg = 5
    dend_8 nseg = 13
    dend_2 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate dNAC222_L6_SBC_fb9380858b_0_0


