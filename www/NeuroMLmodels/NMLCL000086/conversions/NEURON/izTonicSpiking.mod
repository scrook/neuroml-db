TITLE Mod file for component: Component(id=izTonicSpiking type=izhikevichCell)

COMMENT

    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.3
         org.neuroml.model   v1.5.3
         jLEMS               v0.9.9.0

ENDCOMMENT

NEURON {
    POINT_PROCESS izTonicSpiking
    
    
    NONSPECIFIC_CURRENT i                    : To ensure v of section follows v_I
    RANGE v0                                : parameter
    RANGE a                                 : parameter
    RANGE b                                 : parameter
    RANGE c                                 : parameter
    RANGE d                                 : parameter
    RANGE thresh                            : parameter
    RANGE MSEC                              : parameter
    RANGE MVOLT                             : parameter
    
    RANGE copy_v                           : copy of v on section
    RANGE ISyn                              : derived variable
    
}

UNITS {
    
    (nA) = (nanoamp)
    (uA) = (microamp)
    (mA) = (milliamp)
    (A) = (amp)
    (mV) = (millivolt)
    (mS) = (millisiemens)
    (uS) = (microsiemens)
    (molar) = (1/liter)
    (kHz) = (kilohertz)
    (mM) = (millimolar)
    (um) = (micrometer)
    (umol) = (micromole)
    (S) = (siemens)
    
}

PARAMETER {
    
    v0 = -70 (mV)
    a = 0.02 
    b = 0.2 
    c = -65 
    d = 6 
    thresh = 30 (mV)
    MSEC = 1 (ms)
    MVOLT = 1 (mV)
}

ASSIGNED {
    v (mV)
    i (mA/cm2)
    
    copy_v (mV)
    
    v_I (nA) 
    
    ISyn                                   : derived variable
    rate_v (mV/ms)
    rate_U (/ms)
    
}

STATE {
    U  
    
}

INITIAL {
    rates()
    rates() ? To ensure correct initialisation.
    
    net_send(0, 1) : go to NET_RECEIVE block, flag 1, for initial state
    
    U = v0  *  b  /  MVOLT
    
}

BREAKPOINT {
    
    SOLVE states METHOD cnexp
    
    
    copy_v = v
    i = v_I
}

NET_RECEIVE(flag) {
    
    if (flag == 1) { : Setting watch for top level OnCondition...
        WATCH (v >  thresh) 1000
    }
    if (flag == 1000) {
    
        v = c  *  MVOLT
    
        v_I = 0 : Setting rate of change of v to 0
    
        U = U  +  d
    }
    if (flag == 1) { : Set initial states
    
        v = v0
    }
    
}

DERIVATIVE states {
    rates()
    U' = rate_U 
    
}

PROCEDURE rates() {
    
    ? DerivedVariable is based on path: synapses[*]/I, on: Component(id=izTonicSpiking type=izhikevichCell), from synapses; null
    ISyn = 0 ? Was: synapses[*]_I but insertion of currents from external attachments not yet supported ? path based, prefix = 
    
    rate_v = (0.04 * v^2 /  MVOLT  + 5 * v + (140.0 -  U  +   ISyn  ) *   MVOLT  )/  MSEC ? Note units of all quantities used here need to be consistent!
    rate_U = a  * (  b   * v /  MVOLT  -   U  ) /  MSEC ? Note units of all quantities used here need to be consistent!
    
    v_I = -1 * rate_v
     
    
}

