// Cell: cACint209_L23_SBC_c2414afe0b_0_0
/*
{
  "id" : "cACint209_L23_SBC_c2414afe0b_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-2.6237, -8.22758, 0.070813, 2.13548", "-2.39007, -7.49194, 0.0634915, 2.46199", "-2.15644, -6.75631, 0.05617, 3.24204", "-1.92281, -6.02068, 0.0488485, 4.12456", "-1.68917, -5.28505, 0.041527, 5.0352", "-1.45554, -4.54941, 0.0342055, 5.94585", "-1.22191, -3.81378, 0.026884, 6.72163", "-0.988273, -3.07815, 0.0195625, 6.80003", "-0.75464, -2.34252, 0.012241, 6.86698", "-0.521007, -1.60688, 0.00491951, 6.89693", "-0.287374, -0.871249, -0.00240198, 6.78633", "-0.0537407, -0.135617, -0.00972348, 6.68152", "0.179892, 0.600016, -0.017045, 7.03689", "0.413525, 1.33565, -0.0243665, 7.65538", "0.647159, 2.07128, -0.031688, 8.30636", "0.880792, 2.80691, -0.0390095, 9.12144", "1.11442, 3.54255, -0.0463309, 8.95229", "1.34806, 4.27818, -0.0536524, 8.48257", "1.58169, 5.01381, -0.0609739, 7.77052", "1.81532, 5.74945, -0.0682954, 6.51313", "2.04896, 6.48508, -0.0756169, 3.51755" ]
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "-0.13389, 3.44653, -9.166, 0.55", "0.257994, 4.18898, -9.21072, 0.55", "0.960833, 5.70995, -9.29243, 0.28", "1.16185, 6.2643, -9.40836, 0.55", "1.61743, 7.72484, -9.80567, 0.28", "1.90225, 8.69284, -10.1242, 0.83", "2.46621, 10.6523, -10.8379, 0.28", "2.7753, 11.9686, -11.3755, 0.83", "3.22999, 14.5007, -12.4996, 0.28", "3.28945, 14.9747, -12.7175, 0.55", "3.35923, 16.2334, -13.299, 0.28", "3.42519, 17.0351, -13.6916, 0.55", "3.67671, 19.463, -14.9103, 0.28", "3.73602, 19.8573, -15.0884, 0.83", "4.11895, 21.5734, -15.7542, 0.28", "4.39762, 22.5557, -16.1628, 0.55", "5.21527, 24.8737, -17.1636, 0.28", "5.31657, 25.0961, -17.2754, 0.55", "6.21487, 26.5731, -18.1429, 0.28", "6.52686, 27.0025, -18.4405, 0.55", "7.6326, 28.2404, -19.4162, 0.28", "8.22029, 28.8311, -19.9489, 0.55", "9.50291, 30.0922, -21.1344, 0.28", "9.98134, 30.5774, -21.6605, 0.55", "11.3043, 31.8885, -23.2303, 0.28", "11.9034, 32.4914, -23.9769, 0.55", "12.7462, 33.3738, -25.0832, 0.55", "13.4284, 34.1628, -26.0567, 0.83", "15.1192, 36.4022, -28.6662, 0.28", "15.7062, 37.275, -29.6207, 0.55", "16.1416, 37.9693, -30.3374, 0.28", "16.5163, 38.5503, -30.9758, 0.55", "17.2063, 39.5271, -32.1417, 0.28", "17.4639, 39.8428, -32.572, 0.55", "18.5438, 40.9517, -34.2115, 0.28", "18.8445, 41.2228, -34.6923, 0.55", "20.0323, 42.0858, -36.4978, 0.28", "20.6996, 42.565, -37.5369, 0.83", "21.8764, 43.4337, -39.4385, 0.28", "22.2322, 43.6809, -39.9979, 0.83", "23.2522, 44.3903, -41.5523, 0.28", "23.7817, 44.7137, -42.2104, 0.55", "25.6246, 45.717, -43.9826, 0.28", "26.152, 46.0139, -44.4108, 0.55", "27.7695, 46.9837, -45.5901, 0.28", "28.4742, 47.4083, -46.0698, 0.83", "31.5088, 49.1463, -47.9045, 0.28", "32.5438, 49.6997, -48.4733, 0.55", "34.9908, 50.793, -49.5813, 0.28", "35.7482, 51.1698, -49.917, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999998332546847,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "3.72611, 3.91653, 8.114, 0.55", "4.58737, 4.56032, 8.17425, 0.55", "5.38716, 5.24716, 8.22957, 0.83", "6.49963, 6.25426, 8.30324, 0.55", "9.37146, 8.98253, 8.47372, 0.55", "10.9016, 10.4948, 8.55331, 1.11", "12.5848, 12.1739, 8.63541, 0.55", "14.026, 13.6951, 8.69522, 0.55", "15.4225, 15.2519, 8.74259, 0.28", "16.9369, 17.093, 8.77424, 0.83", "18.6019, 19.3485, 8.77815, 0.28", "18.996, 19.8795, 8.77455, 0.83", "20.2666, 21.6298, 8.73427, 0.28", "20.6168, 22.1174, 8.72881, 0.55", "21.4447, 23.3742, 8.72216, 0.28", "21.6779, 23.7225, 8.72506, 0.55", "22.9737, 25.4171, 8.81799, 0.28", "23.4102, 25.919, 8.86749, 0.55", "24.5812, 27.0396, 9.06841, 0.28", "25.9764, 28.2733, 9.31462, 0.28", "27.2888, 29.3737, 9.54406, 0.55", "28.952, 30.7669, 9.77886, 0.28", "29.5978, 31.3119, 9.8637, 0.55", "32.154, 33.5262, 10.443, 0.28", "33.6374, 34.8218, 10.8733, 0.55", "35.0006, 36.0788, 11.3344, 0.55", "36.4336, 37.5406, 11.8625, 0.28", "37.6436, 38.861, 12.3002, 0.55", "40.7938, 42.5065, 13.4803, 0.28", "41.4472, 43.3288, 13.7221, 0.55", "43.2194, 45.7235, 14.4262, 0.28", "44.0662, 46.946, 14.7099, 0.55", "45.4864, 49.2506, 15.074, 0.28", "46.2043, 50.6514, 15.1377, 0.55", "47.0152, 52.6401, 15.0176, 0.28", "47.3736, 53.6742, 14.9424, 0.55", "48.1193, 56.177, 14.7404, 0.28", "48.7192, 58.3198, 14.7203, 0.83", "49.6224, 61.6437, 14.8893, 0.28", "50.1007, 63.34, 15.0419, 0.55", "50.952, 66.2759, 15.4351, 0.28", "51.3575, 67.6815, 15.6564, 0.55", "52.3958, 71.3355, 16.3719, 0.28", "52.6666, 72.1845, 16.5296, 0.55", "53.427, 74.4074, 16.9193, 0.28", "53.9011, 75.7039, 17.1461, 0.55", "55.1931, 79.0339, 17.694, 0.28", "55.6821, 80.1846, 17.8325, 0.55", "56.7682, 82.4911, 17.9565, 0.28", "57.9206, 84.6834, 18.074, 0.28", "58.0713, 84.9449, 18.0899, 0.83", "58.9089, 86.3163, 18.1615, 0.28", "59.7548, 87.5399, 18.2308, 0.55", "61.1182, 89.5206, 18.3761, 0.28", "62.3849, 91.2295, 18.5697, 0.55", "69.0264, 99.6182, 18.9119, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999998332546847,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "2.55611, 4.97653, 8.114, 0.55", "4.02144, 6.3718, 8.82466, 0.55", "5.65414, 7.87893, 9.7548, 1.11", "6.92928, 9.1746, 10.5131, 0.55", "8.51376, 10.9018, 11.3797, 0.55", "10.0503, 12.5769, 12.2201, 0.55", "11.3796, 14.026, 12.9471, 0.83", "12.5613, 15.2351, 13.6711, 0.55", "13.9379, 16.5417, 14.589, 0.28", "14.9318, 17.6145, 15.3354, 0.55", "21.1, 25.404, 19.4925, 0.55", "26.2093, 33.9806, 23.5351, 0.55", "30.6467, 43.4084, 26.2611, 0.55", "35.6994, 52.9101, 26.6989, 0.55", "41.6399, 61.8608, 25.9246, 0.55", "48.8313, 69.4856, 23.4445, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999998332546847,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-2.57389, 5.70653, 1.184, 0.83", "-2.67386, 7.83841, 2.29611, 0.83", "-2.66847, 10.2096, 3.30768, 0.83", "-2.57045, 12.6059, 4.14547, 1.66", "-2.28837, 16.929, 5.45429, 0.83", "-2.22883, 18.9409, 5.99026, 0.83", "-2.18858, 21.3187, 6.56536, 1.66", "-2.06666, 24.49, 7.27592, 0.83", "-1.93355, 27.4497, 7.81663, 0.83", "-1.84707, 29.4454, 8.11917, 0.83", "-1.74547, 33.8305, 8.37309, 0.83", "-1.76857, 35.8489, 8.50993, 0.83" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999998332546847
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-2.93389, -9.18347, -0.806, 1.66", "-2.54405, -12.9384, -1.40969, 1.66", "-2.13918, -17.1586, -2.1914, 1.66", "-1.77098, -20.9966, -2.90233, 0.83", "-1.20825, -26.8623, -3.98884, 1.11", "-0.767588, -31.4556, -4.83966, 1.11", "-0.51162, -34.1237, -5.33389, 1.11", "-0.144693, -36.7022, -5.89282, 1.11" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999998332546847
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "2.04896, 6.48508, -0.0756169, 0.55", "6.58939, 20.7814, -0.0756169, 0.55", "11.1298, 35.0777, -0.0756169, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "-1.76857, 35.8489, 8.50993, 0.55", "-2.08407, 40.3271, 7.2784, 0.55", "-2.11919, 43.0817, 6.36708, 0.55", "-2.0157, 45.8272, 5.41489, 0.83", "-1.90049, 47.6366, 4.79115, 0.28", "-1.81364, 48.6438, 4.47377, 0.28", "-1.7294, 49.5425, 4.21379, 0.55", "-1.42381, 51.9774, 3.53287, 0.55", "-1.31273, 53.3451, 3.23817, 0.55", "-1.27419, 54.3686, 3.11555, 0.83", "-1.34138, 57.516, 2.83116, 0.55", "-1.4985, 58.7985, 2.76529, 0.83", "-1.7834, 60.1021, 2.74998, 0.28", "-2.15022, 61.3731, 2.80276, 0.55", "-2.8495, 63.4839, 2.86394, 0.55", "-3.75363, 65.9072, 2.94354, 0.55", "-4.4661, 67.4988, 2.87232, 0.28", "-4.85908, 68.3467, 2.75439, 0.28", "-5.42024, 69.523, 2.50425, 0.55", "-6.11534, 70.8277, 2.08439, 0.28", "-6.75071, 72.0299, 1.60521, 1.11", "-8.71342, 75.5307, 0.150812, 0.28", "-9.36835, 76.7342, -0.305282, 0.83", "-10.4787, 78.8095, -1.00234, 0.83", "-11.6968, 81.1002, -1.64488, 0.28", "-12.5902, 82.8265, -2.01795, 0.28", "-14.2539, 86.2673, -2.55919, 0.83", "-14.9526, 87.8992, -2.67297, 0.28", "-15.6325, 89.5754, -2.72475, 0.55", "-16.8298, 92.752, -2.79256, 0.55", "-17.4017, 94.3864, -2.8006, 1.11", "-18.0935, 96.4157, -2.84615, 0.55", "-18.6809, 98.4705, -2.88458, 0.55", "-19.3384, 100.827, -2.93981, 0.55", "-20.1406, 103.787, -3.0308, 0.55", "-20.4095, 104.959, -3.07033, 0.55", "-20.6895, 106.262, -3.12021, 0.55", "-21.4697, 109.986, -3.26921, 0.55", "-21.9321, 112.189, -3.35213, 0.83", "-22.3763, 114.732, -3.43294, 0.28", "-22.7931, 117.166, -3.49367, 0.55", "-23.0941, 118.879, -3.55008, 0.55", "-23.4051, 120.69, -3.6573, 0.28", "-23.5812, 121.743, -3.75072, 0.55", "-23.9928, 124.346, -3.91789, 0.55", "-24.2193, 125.853, -3.98494, 0.28", "-24.3597, 126.617, -4.02093, 0.83", "-24.7422, 128.859, -4.11365, 0.28", "-24.8713, 129.63, -4.1536, 0.55", "-25.131, 131.038, -4.23304, 0.28", "-25.3462, 132.19, -4.29645, 0.55", "-25.7325, 134.388, -4.37174, 0.55", "-26.499, 138.203, -4.43428, 0.55", "-27.0128, 140.57, -4.47317, 0.28", "-27.1962, 141.474, -4.49868, 0.83", "-27.5062, 143.084, -4.54998, 0.83", "-27.9523, 145.508, -4.63308, 0.55", "-28.3064, 148.151, -4.69789, 0.55", "-28.6304, 150.857, -4.58117, 0.55", "-28.8159, 152.937, -4.45768, 0.55", "-28.9742, 155.833, -4.2788, 0.55", "-29.0834, 159.142, -4.06132, 0.55", "-29.0634, 163.444, -3.75652, 0.55", "-28.9641, 167.035, -3.46451, 0.55", "-28.8538, 170.61, -3.14115, 0.55", "-28.7855, 172.748, -2.96527, 0.55", "-28.6731, 174.559, -2.85345, 0.83", "-28.5438, 176.21, -2.78893, 0.55", "-28.3738, 178.595, -2.71779, 0.55", "-28.1516, 180.928, -2.66346, 0.55", "-28.0127, 182.321, -2.55465, 0.83", "-27.7868, 184.558, -2.39628, 0.28", "-27.4763, 187.391, -2.12546, 0.55", "-27.1301, 190.714, -1.72299, 0.55", "-26.8937, 192.908, -1.39243, 0.55", "-26.7652, 194.178, -1.17901, 0.28", "-26.6201, 195.844, -0.870786, 0.55", "-26.3838, 199.097, -0.192486, 0.55", "-26.1704, 202.162, 0.451563, 0.55", "-26.0813, 203.759, 0.73878, 0.55" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "-1.76857, 35.8489, 8.50993, 0.55", "-1.92525, 40.0702, 8.40944, 0.55", "-2.11802, 45.2636, 8.28581, 0.55", "-2.22535, 48.1555, 8.21698, 0.55", "-2.32031, 50.7139, 8.15607, 0.55", "-2.45255, 54.2769, 8.07126, 0.55", "-2.5715, 57.4817, 7.99497, 0.55" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-0.144693, -36.7022, -5.89282, 0.55", "0.212311, -38.5271, -4.84963, 0.55", "1.00479, -41.9078, -3.52009, 0.55", "2.03292, -46.446, -0.835856, 0.55", "2.45623, -48.4836, 0.439385, 0.55", "2.74005, -50.1759, 1.55781, 0.55", "3.29349, -53.2645, 3.61895, 0.55", "3.75992, -55.6431, 5.22412, 0.55", "5.17537, -60.9347, 8.95147, 0.55", "5.85378, -62.91, 10.2339, 0.55", "7.63807, -67.0916, 13.0139, 0.28", "8.56694, -68.7448, 14.23, 0.28", "9.79124, -70.1881, 15.4569, 0.55", "11.117, -71.1498, 16.3158, 0.28", "12.2656, -71.5394, 16.6857, 0.55", "16.1301, -71.8822, 17.8712, 0.55", "17.867, -71.6749, 18.1283, 0.55", "18.9709, -71.4955, 18.1898, 0.55", "20.859, -71.1452, 18.1717, 0.55", "22.9731, -70.8403, 18.0638, 0.55", "25.6093, -70.5028, 17.8095, 0.55", "32.0622, -69.7724, 17.063, 0.55", "34.9393, -69.4444, 16.7475, 0.28", "36.0439, -69.2874, 16.6391, 0.55", "40.2499, -68.6911, 16.0477, 0.55", "41.3669, -68.4756, 15.8615, 0.55", "43.8087, -67.8393, 15.4866, 0.28", "45.2872, -67.3087, 15.4045, 0.28", "47.5668, -66.3653, 15.3212, 0.55", "51.4281, -64.7195, 15.0493, 0.28", "53.2614, -63.9551, 14.878, 0.28", "54.619, -63.481, 14.7425, 0.55", "58.3752, -62.3974, 14.1989, 0.28", "60.1771, -61.9212, 13.925, 0.83", "63.4793, -61.1081, 13.4836, 0.28", "64.7097, -60.8202, 13.3759, 0.28", "66.0345, -60.5883, 13.1983, 0.83", "68.8446, -60.2236, 12.6551, 0.28", "70.7505, -60.1976, 12.1036, 0.83" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-0.144693, -36.7022, -5.89282, 0.83", "0.11351, -37.3006, -6.37102, 0.83", "1.03103, -39.4271, -8.07032, 0.83", "2.31299, -42.3983, -10.4445, 0.83", "4.1658, -46.6926, -13.876, 0.83", "5.58699, -49.9865, -16.5081, 0.83" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "11.1298, 35.0777, -0.0756169, 0.28", "15.6702, 49.374, -0.0756169, 0.28", "20.2107, 63.6703, -0.0756169, 0.28" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "-26.0813, 203.759, 0.73878, 0.55", "-25.0086, 204.373, 1.25011, 0.55", "-24.0195, 204.939, 1.7216, 0.28", "-22.8094, 205.631, 2.29844, 0.55", "-15.9707, 208.778, 6.58164, 0.55" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "-26.0813, 203.759, 0.73878, 0.55", "-26.2109, 205.392, 1.65481, 0.55", "-26.3822, 207.819, 2.96815, 0.55", "-26.5272, 209.7, 3.96272, 0.55", "-26.6929, 211.903, 5.01942, 0.55", "-26.8387, 213.769, 5.90387, 0.55", "-27.0047, 215.425, 6.63821, 0.28", "-27.0994, 216.476, 7.03807, 0.28", "-27.1384, 217.029, 7.20487, 0.55", "-27.2781, 219.637, 7.89254, 0.55", "-27.5353, 222.846, 8.69402, 0.28", "-27.7059, 224.6, 9.11142, 0.28", "-27.8763, 226.213, 9.45763, 0.55", "-28.1276, 229.659, 10.2135, 0.28", "-28.2135, 231.188, 10.5319, 0.55", "-27.2783, 238.601, 13.6554, 0.55" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "-2.5715, 57.4817, 7.99497, 0.55", "-1.5591, 58.5437, 8.57029, 0.55", "-0.293635, 59.8711, 9.28943, 0.55", "0.964314, 61.1906, 10.0043, 0.55", "1.53858, 61.793, 10.3307, 0.55", "3.09004, 63.4205, 11.2123, 0.83", "9.34311, 70.8807, 13.5394, 0.83", "16.5235, 77.7777, 14.5612, 0.83" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "-2.5715, 57.4817, 7.99497, 0.55", "-3.65027, 59.8131, 8.03886, 0.55", "-4.95834, 62.6851, 7.95792, 0.55", "-5.99293, 64.7634, 7.84909, 0.55", "-7.06342, 66.7249, 7.79664, 0.55", "-7.60877, 67.7005, 7.78851, 0.83", "-8.89029, 69.9134, 7.85003, 0.55", "-10.0378, 71.7802, 7.90148, 0.55", "-10.7433, 72.9202, 8.04525, 0.83", "-11.8404, 74.6259, 8.32862, 0.28", "-12.5999, 75.7244, 8.53031, 0.55", "-13.8024, 77.5272, 8.90029, 0.55", "-14.517, 78.642, 9.2453, 0.55", "-15.3791, 80.3518, 9.75164, 0.28", "-16.0066, 81.8923, 10.0963, 0.55", "-16.5789, 83.4065, 10.3787, 0.55", "-17.1371, 84.9446, 10.6617, 0.28", "-17.9658, 87.6703, 11.1025, 0.55", "-18.5252, 89.8134, 11.46, 0.28", "-19.0089, 91.6624, 11.7632, 0.55" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "5.58699, -49.9865, -16.5081, 0.55", "7.44725, -50.6931, -16.2445, 0.55", "9.42246, -51.3582, -15.7257, 0.55", "12.1275, -52.3317, -14.9319, 0.55", "13.8532, -52.9883, -14.4391, 0.28", "15.8555, -53.7089, -13.7073, 0.55", "20.9994, -55.6263, -11.6616, 0.55", "22.5882, -56.2592, -10.9136, 0.55", "23.9115, -56.7476, -10.2504, 0.28", "24.638, -57.0088, -9.86913, 0.55", "28.0425, -57.8892, -8.37613, 0.28", "29.4334, -58.1821, -7.75635, 0.28", "30.3464, -58.3212, -7.40776, 0.55", "31.892, -58.5817, -6.75599, 0.55", "34.595, -59.0301, -5.63189, 0.55", "37.0041, -59.5019, -4.71776, 0.55", "41.0424, -60.3857, -3.40915, 0.55", "44.12, -61.0389, -2.40618, 0.28", "45.9079, -61.421, -1.82784, 0.28", "47.4843, -61.7871, -1.33457, 0.83", "49.621, -62.2723, -0.632072, 0.28", "50.6086, -62.4723, -0.308699, 0.55", "52.6115, -62.7472, 0.149799, 0.28", "53.5451, -62.8196, 0.363975, 0.28", "54.3637, -62.8316, 0.589484, 0.55", "57.8355, -62.7587, 1.76225, 0.55", "59.6436, -62.6473, 2.5011, 0.28", "60.7391, -62.6124, 2.98915, 0.55", "62.0984, -62.6537, 3.61399, 0.55", "70.2848, -64.6957, 8.2074, 0.55" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "5.58699, -49.9865, -16.5081, 0.83", "3.5071, -53.8073, -15.6221, 0.83", "3.01573, -54.7099, -15.4128, 0.83" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "-19.0089, 91.6624, 11.7632, 0.55", "-21.1087, 94.6239, 15.4062, 0.55", "-26.8149, 101.525, 23.3595, 0.55" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "-19.0089, 91.6624, 11.7632, 0.28", "-18.8235, 93.8186, 11.2552, 0.28", "-18.7487, 95.8291, 10.9192, 0.55", "-18.6394, 98.7644, 10.4286, 0.28", "-18.5688, 100.664, 10.1111, 0.28", "-18.5417, 101.392, 9.98943, 0.55", "-18.466, 103.426, 9.64948, 0.28", "-18.4968, 104.256, 9.54768, 0.83", "-18.2507, 112.903, 9.67527, 0.83" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "3.01573, -54.7099, -15.4128, 0.55", "3.73178, -55.9567, -15.5708, 0.55", "5.09103, -58.4912, -15.8834, 0.55", "6.00554, -60.3642, -16.0778, 0.28", "7.4483, -63.781, -16.3369, 0.55", "8.3539, -66.3775, -16.4377, 0.55", "9.30762, -69.4351, -16.503, 0.55", "10.3807, -73.5392, -16.4583, 0.55", "10.7422, -75.1259, -16.3645, 0.55", "11.8731, -79.8594, -15.8831, 0.55", "12.5754, -82.9422, -15.4177, 0.55", "13.4989, -87.0082, -14.6401, 0.55", "14.0406, -89.3942, -14.0911, 0.28", "14.7172, -92.0376, -13.4269, 0.83", "15.7172, -95.555, -12.541, 0.55", "16.2803, -97.3351, -12.019, 0.28", "16.7736, -98.8122, -11.5621, 0.55", "17.8541, -102.314, -10.4507, 0.28", "18.1648, -103.39, -10.1475, 0.55", "18.8376, -106.129, -9.48428, 0.55", "19.3145, -109.032, -8.94077, 0.28", "19.5087, -110.339, -8.77644, 0.55", "19.848, -112.6, -8.63569, 0.28", "20.0905, -114.204, -8.69596, 0.28", "20.3925, -116.145, -8.84502, 0.55", "20.9875, -119.805, -9.25375, 0.28", "21.6571, -123.603, -9.79743, 0.28", "22.025, -125.514, -10.1139, 0.83", "22.4596, -127.606, -10.4797, 0.28", "22.8164, -129.328, -10.7466, 0.55", "23.2491, -131.367, -10.9719, 0.28", "23.4379, -132.394, -11.0548, 0.55", "23.7363, -136.129, -11.4225, 0.28", "23.7772, -137.422, -11.559, 0.55", "23.659, -139.504, -11.8585, 0.28", "23.4835, -140.95, -12.137, 0.55", "22.93, -143.958, -12.7319, 0.55", "22.3374, -146.757, -13.2739, 0.55", "21.7638, -149.254, -13.6716, 0.55", "21.0074, -152.753, -14.2828, 0.28", "20.8714, -153.452, -14.4537, 0.55", "20.6196, -154.755, -14.7952, 0.28", "20.5538, -155.184, -14.9004, 0.55", "20.3852, -156.355, -15.2747, 0.28", "20.2585, -157.593, -15.716, 0.55", "19.9454, -161.169, -17.1332, 0.28", "19.8568, -162.109, -17.5381, 0.55", "19.6363, -165.202, -18.803, 0.55", "19.3337, -168.609, -20.1381, 0.28", "19.2521, -169.514, -20.4747, 0.55", "19.2681, -172.473, -20.9137, 0.28", "19.4439, -173.776, -20.8468, 0.55", "19.9904, -176.521, -20.4372, 0.28", "20.4853, -178.217, -19.9683, 0.55", "21.0088, -179.664, -19.4498, 0.55", "24.3302, -187.436, -16.3951, 0.28", "25.2594, -189.228, -15.5912, 0.28", "25.7035, -190.072, -15.2627, 0.55", "27.0549, -192.553, -14.4958, 0.28", "27.3614, -193.1, -14.3541, 0.55", "28.7947, -195.76, -13.8848, 0.28", "29.5587, -197.462, -13.9769, 0.55", "31.1909, -201.822, -14.3938, 0.28", "31.6066, -203.188, -14.6247, 0.55", "31.8963, -204.539, -14.9768, 0.28", "32.0396, -205.433, -15.2495, 0.55", "32.2779, -208.026, -16.171, 0.28", "32.3307, -208.981, -16.5224, 0.55", "32.5235, -211.578, -17.3497, 0.55", "32.6339, -213.474, -18.0111, 0.28", "32.6959, -214.177, -18.2942, 0.55" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "3.01573, -54.7099, -15.4128, 0.55", "2.98383, -55.9872, -16.7384, 0.55", "2.93862, -57.7973, -18.6171, 0.55" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "2.93862, -57.7973, -18.6171, 0.55", "6.71466, -56.6296, -19.4351, 0.55", "9.22503, -55.7409, -19.903, 0.28", "10.214, -55.4005, -20.118, 0.55", "12.8948, -54.4213, -20.6772, 0.55", "14.8755, -53.7643, -21.0783, 0.28", "16.265, -53.3225, -21.4375, 0.28", "18.5919, -52.6242, -22.2242, 0.55", "21.4119, -51.8165, -23.338, 0.28", "24.0288, -51.1263, -24.603, 0.28", "26.2059, -50.5404, -25.8013, 0.28", "29.4249, -49.6478, -27.8869, 0.55", "31.833, -48.953, -29.6531, 0.28", "34.5738, -48.1256, -31.9149, 0.28", "36.7648, -47.4023, -33.8773, 0.55", "38.8399, -46.7071, -36.0059, 0.55", "41.5638, -45.71, -39.0391, 0.28", "42.1532, -45.5339, -39.6962, 0.55", "43.6458, -45.267, -41.4186, 0.28", "44.3975, -45.2155, -42.2364, 0.28", "46.2817, -45.1963, -44.1343, 0.55", "48.143, -45.2563, -45.807, 0.28", "49.9571, -45.2641, -47.156, 0.83", "52.6244, -45.29, -48.8094, 0.55", "56.0449, -45.2189, -50.5789, 0.28", "57.3316, -45.1341, -51.1759, 0.55", "60.0662, -44.8565, -51.9463, 0.28", "61.3149, -44.6832, -52.149, 0.83", "65.0538, -43.9656, -52.4478, 0.55", "67.2658, -43.4463, -52.4317, 0.55", "69.1685, -42.9624, -52.3241, 0.83", "74.763, -41.379, -51.8215, 0.28", "75.8353, -41.078, -51.7391, 0.28", "78.2983, -40.3221, -51.5134, 0.83", "81.5964, -39.0888, -51.153, 0.28", "82.632, -38.698, -51.0464, 0.55", "84.2715, -38.0497, -50.9806, 0.55", "88.7769, -36.1141, -51.774, 0.55" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "2.93862, -57.7973, -18.6171, 0.55", "1.6294, -61.8327, -22.4834, 0.55" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "1.6294, -61.8327, -22.4834, 0.55", "0.498757, -62.7469, -22.9072, 0.55", "0.0108225, -63.0814, -23.0596, 0.55", "-2.97229, -65.1512, -23.5113, 0.28", "-5.67547, -67.1939, -23.4829, 0.55", "-6.77408, -68.1369, -23.3129, 0.28", "-8.08104, -69.3086, -23.0113, 0.28", "-9.71697, -70.8309, -22.4215, 0.83", "-12.256, -72.8046, -21.4691, 0.28", "-13.5945, -73.7151, -20.8648, 0.55", "-14.8013, -74.5061, -20.3061, 0.55", "-17.1258, -75.759, -19.5517, 0.28", "-18.7729, -76.5191, -19.123, 0.83", "-22.9161, -77.9543, -18.0922, 0.28", "-23.8447, -78.2033, -17.9007, 0.28", "-25.299, -78.512, -17.5483, 0.83", "-28.7128, -79.1173, -16.4733, 0.28", "-29.7283, -79.288, -16.05, 1.11", "-32.4178, -79.8252, -15.0222, 0.55", "-33.5939, -80.103, -14.5319, 0.55", "-35.2977, -80.5197, -13.9658, 0.55", "-37.3306, -81.0544, -13.4195, 0.28", "-37.8981, -81.2272, -13.2735, 0.83", "-43.0728, -82.8435, -12.1941, 0.28", "-44.805, -83.3492, -11.8029, 0.28", "-47.4661, -84.0352, -11.1055, 0.83", "-50.4995, -84.7279, -10.2168, 0.28", "-52.5045, -85.1548, -9.4994, 0.28", "-54.087, -85.452, -8.75532, 0.83", "-57.1488, -85.9193, -6.84202, 0.28", "-57.9774, -86.0165, -6.31454, 0.83", "-60.3118, -86.2676, -4.69491, 0.28", "-61.4345, -86.3349, -3.9426, 0.83", "-63.1404, -86.3678, -2.99525, 0.28", "-64.3831, -86.3181, -2.42689, 0.55", "-66.9772, -86.174, -1.57232, 0.28", "-67.8118, -86.0849, -1.33828, 0.83", "-69.6169, -85.8191, -0.881834, 0.28", "-72.5226, -85.314, -0.19628, 0.83", "-74.9521, -84.8954, 0.251495, 0.28", "-75.8368, -84.7323, 0.439734, 0.55", "-77.6827, -84.3943, 0.768592, 0.28", "-78.3477, -84.2731, 0.880176, 0.83", "-80.214, -83.9408, 1.2672, 0.28", "-83.3413, -83.3093, 1.98101, 0.28", "-85.5652, -82.7505, 2.51908, 1.11", "-88.6641, -81.7835, 3.34286, 0.28", "-89.6624, -81.4035, 3.61887, 0.55", "-91.3912, -80.5858, 4.0989, 0.28", "-92.5135, -79.9652, 4.3681, 0.55", "-94.1257, -78.9376, 4.79739, 0.28", "-94.3846, -78.7729, 4.84596, 0.55", "-95.6288, -77.8843, 5.16548, 0.28", "-95.6288, -77.8843, 5.16548, 0.55", "-98.086, -76.5149, 5.29481, 0.28", "-98.3745, -76.3652, 5.32363, 0.83" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "1.6294, -61.8327, -22.4834, 0.83", "3.06896, -63.2231, -22.7614, 0.83", "4.88062, -64.9728, -23.1113, 0.55" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "4.88062, -64.9728, -23.1113, 0.55", "4.81275, -66.9218, -24.896, 0.55", "4.30119, -67.9161, -26.0147, 0.55", "3.18477, -69.8875, -28.1639, 0.55", "2.2614, -71.6997, -30.1684, 0.55", "1.59113, -73.0152, -31.6236, 0.83", "0.871663, -74.4272, -33.1855, 0.55", "-2.19325, -79.3044, -38.988, 0.55", "-2.74176, -80.1306, -40.0804, 0.55", "-3.48729, -81.2789, -41.6597, 0.55" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "4.88062, -64.9728, -23.1113, 0.55", "6.42098, -68.6202, -22.7352, 0.55", "7.40634, -71.1257, -22.4998, 0.55", "8.85988, -74.9806, -22.3021, 0.55", "9.76644, -77.5198, -22.1994, 0.55", "11.7615, -83.2423, -22.0615, 0.55", "12.3732, -84.9958, -22.046, 0.28", "13.5592, -88.5199, -22.1341, 0.55", "14.4301, -91.4042, -22.2839, 0.28", "15.0414, -93.7163, -22.4846, 0.55", "15.955, -97.5967, -22.9949, 0.55", "16.0841, -98.3097, -23.1142, 0.55", "16.4154, -100.652, -23.4776, 0.55", "17.0775, -104.254, -23.9053, 0.55", "17.6452, -106.844, -24.0469, 0.55", "18.3659, -109.427, -24.1074, 0.28", "19.26, -112.15, -23.9826, 0.55", "20.1841, -114.777, -23.7405, 0.55", "22.2411, -120.259, -22.9876, 0.55", "22.6321, -121.219, -22.821, 0.55", "24.5221, -125.791, -22.0069, 0.55", "26.4669, -130.333, -21.2589, 0.55", "27.3681, -132.415, -20.9999, 0.83", "28.3329, -134.923, -20.7929, 0.55", "28.9278, -137.073, -20.7321, 0.55", "29.5462, -139.429, -20.6911, 0.55", "30.0455, -141.393, -20.7071, 0.55", "30.6478, -143.68, -20.8515, 0.83", "31.2947, -146.022, -21.0132, 0.55", "32.0993, -148.976, -21.2011, 0.28", "32.5, -150.546, -21.2443, 0.55", "33.151, -152.892, -21.3099, 0.55", "33.5195, -154.181, -21.3213, 0.55", "34.0964, -156.272, -21.3772, 0.55", "34.6456, -158.246, -21.4317, 0.55", "35.2377, -160.595, -21.5317, 0.55", "35.6428, -162.674, -21.6462, 0.55", "35.9995, -164.887, -21.7825, 0.55", "36.5673, -168.324, -22.1225, 0.83", "36.8728, -170.093, -22.3777, 0.83", "37.3252, -172.788, -22.7931, 0.55", "37.7207, -175.069, -23.1484, 0.83", "37.9614, -177.142, -23.4663, 0.55", "38.2605, -179.938, -23.9334, 0.28", "38.3263, -180.677, -24.0304, 0.55", "38.4072, -181.72, -24.1602, 0.55", "38.5743, -184.068, -24.3304, 0.55", "38.787, -188.877, -24.4948, 0.55", "39.0091, -191.221, -24.3936, 0.83", "39.3274, -192.985, -24.2532, 0.55", "39.8689, -195.016, -24.0613, 0.55", "40.9351, -197.96, -23.7494, 0.55", "41.7441, -199.553, -23.4818, 0.83", "43.9024, -203.163, -22.6576, 0.83", "46.3475, -206.836, -21.3894, 0.28", "47.3837, -208.148, -20.734, 1.11", "48.3961, -209.345, -19.888, 0.28", "50.0559, -211.17, -18.2485, 0.55", "51.6923, -212.815, -16.4822, 0.55", "54.8726, -215.605, -12.5739, 0.83", "57.2521, -217.407, -9.27182, 0.55", "58.4441, -218.246, -7.43624, 0.55", "59.545, -219.001, -5.45492, 0.55", "61.3299, -220.173, -1.96878, 0.83", "63.2409, -221.33, 1.55133, 0.55", "64.145, -221.995, 3.34428, 0.55", "65.7586, -223.309, 6.69819, 0.55", "67.3762, -224.784, 10.117, 0.55", "68.715, -226.044, 13.319, 0.55", "69.766, -227.181, 16.3026, 0.55", "70.5194, -228.154, 18.6127, 0.28", "71.5313, -229.485, 21.6203, 0.55", "72.199, -230.737, 24.263, 0.55", "73.065, -232.917, 28.7009, 0.55", "73.2249, -233.637, 30.2234, 0.55", "73.3971, -235.06, 33.2278, 0.55", "73.4527, -236.035, 35.1232, 0.55", "73.5142, -238.678, 40.1981, 0.55", "73.4926, -240.257, 43.4211, 0.55", "73.4882, -241.259, 45.5409, 0.55", "73.5568, -242.061, 47.5171, 0.55", "73.7227, -242.949, 50.1136, 0.55", "74.3002, -244.298, 54.9561, 0.55", "74.6254, -244.824, 56.8804, 0.55", "75.3939, -245.418, 60.1054, 0.55", "76.1149, -245.76, 62.2678, 0.55", "76.6287, -245.977, 63.6589, 0.55", "78.2942, -246.921, 68.3561, 0.55", "79.0051, -247.756, 71.1231, 0.55", "80.8955, -250.115, 78.547, 0.55", "81.4703, -250.89, 81.2262, 0.55", "81.8992, -251.45, 83.6183, 0.55", "82.3278, -252.147, 86.8461, 0.55", "82.2745, -253.402, 91.1979, 0.28", "85.4035, -263.785, 96.4606, 0.28" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 15
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "-3.48729, -81.2789, -41.6597, 0.55", "-5.63382, -80.6931, -41.8085, 0.55", "-8.57992, -80.2071, -41.3501, 0.28", "-9.226, -80.1058, -41.3016, 0.55", "-10.3892, -79.9315, -41.2059, 0.55", "-12.5073, -79.5096, -41.078, 0.28", "-13.6557, -79.2888, -41.0715, 0.28", "-16.3892, -78.8871, -41.1799, 0.55", "-19.8591, -78.4, -41.3541, 0.28", "-20.7881, -78.2779, -41.4257, 0.83", "-24.7458, -77.7096, -41.7981, 0.55", "-28.9805, -77.0127, -42.3365, 0.83", "-32.9082, -76.2695, -42.8631, 0.28", "-32.9082, -76.2695, -42.8631, 0.55", "-36.4455, -75.3342, -43.152, 0.28", "-37.1668, -75.1048, -43.1972, 0.83", "-40.1861, -73.8421, -43.3386, 0.55", "-42.6745, -72.48, -43.2993, 0.55", "-44.4641, -71.4744, -43.2512, 0.55", "-47.3243, -69.9122, -43.2287, 0.83", "-48.3785, -69.2945, -43.2004, 0.83", "-51.5471, -67.5063, -43.1705, 0.55", "-53.4632, -66.468, -43.148, 0.55", "-57.1788, -65.0149, -43.3816, 1.11", "-60.6877, -64.0104, -43.6786, 0.55", "-62.9076, -63.4907, -43.8473, 0.83", "-67.0258, -62.7246, -44.1397, 0.55", "-69.1366, -62.3692, -44.2778, 0.83", "-76.0438, -61.2723, -44.7715, 0.28", "-77.8331, -60.98, -44.8433, 0.55", "-80.0989, -60.6101, -44.924, 0.55", "-83.3031, -59.9605, -45.1671, 1.11", "-86.754, -59.0044, -45.4087, 0.55", "-88.1434, -58.4737, -45.5109, 0.55", "-90.1509, -57.4902, -45.709, 0.55", "-93.0733, -55.9748, -46.1011, 0.83", "-98.3085, -53.3108, -47.0438, 0.28", "-99.7089, -52.6044, -47.3108, 0.83", "-103.397, -50.6832, -48.1059, 0.28", "-105.819, -49.3893, -48.6872, 0.55", "-107.386, -48.577, -49.0621, 0.55", "-110.826, -46.6627, -49.7649, 0.83", "-112.809, -45.4268, -50.0188, 0.55", "-114.898, -44.0543, -50.2866, 0.55", "-115.776, -43.4096, -50.3723, 0.55", "-117.329, -42.2542, -50.5451, 0.83", "-119.274, -40.861, -50.8009, 0.83", "-121.72, -39.2131, -51.1407, 0.55", "-124.891, -37.2578, -51.6245, 0.83", "-126.251, -36.4388, -51.7876, 0.83", "-130.754, -33.8074, -52.3573, 0.55", "-131.564, -33.3526, -52.4708, 0.83", "-133.764, -32.2312, -52.7445, 0.28", "-135.672, -31.278, -52.9589, 0.55", "-138.111, -29.9502, -53.0349, 0.28", "-140.112, -28.9307, -53.1332, 0.83", "-141.039, -28.4128, -53.1303, 0.28", "-142.535, -27.5724, -53.1851, 0.55", "-145.897, -25.7825, -53.4012, 0.28", "-147.082, -25.2094, -53.5157, 0.28", "-152.273, -22.9016, -54.1462, 0.83", "-154.369, -21.9328, -54.4553, 0.28", "-156.057, -21.1373, -54.7448, 0.28", "-157.53, -20.3941, -55.0332, 0.55", "-158.357, -19.9376, -55.1485, 0.28", "-159.326, -19.3611, -55.2222, 0.55", "-161.611, -17.622, -55.2207, 0.28", "-162.885, -16.575, -55.183, 0.55", "-164.642, -14.9052, -54.9655, 0.28", "-166.227, -13.2832, -54.5413, 0.55", "-166.673, -12.8347, -54.3677, 0.55", "-167.578, -11.933, -53.9384, 0.83", "-168.976, -10.8398, -53.3718, 0.28", "-169.885, -10.2623, -53.1242, 0.55", "-171.827, -9.08588, -52.5423, 0.28", "-172.345, -8.80399, -52.4598, 0.55", "-175.179, -7.3163, -52.0243, 0.28", "-178.063, -5.86479, -51.5866, 0.83", "-180.922, -4.51367, -51.2708, 0.55", "-183.13, -3.46327, -51.123, 0.55", "-187.6, -1.40295, -51.2433, 0.55" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-3.48729, -81.2789, -41.6597, 0.55", "-2.92657, -83.4124, -45.0816, 0.55", "-2.75109, -84.4571, -47.0405, 0.55", "-2.59763, -85.3971, -48.9799, 0.83", "-2.40872, -86.5542, -51.3672, 0.55", "-2.26313, -87.446, -53.207, 0.55", "-2.09437, -88.4797, -55.3397, 0.55", "-1.85549, -89.6526, -57.633, 0.55", "-1.65675, -90.4548, -59.8111, 1.11" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-187.6, -1.40295, -51.2433, 0.28", "-188.669, -0.0773011, -52.1452, 0.28", "-189.426, 0.873544, -52.9028, 0.83", "-190.064, 1.86155, -53.6529, 0.28", "-190.467, 2.52683, -54.1377, 0.55", "-191.572, 4.30412, -55.4673, 0.28", "-192.141, 5.34771, -56.2659, 0.83", "-192.86, 6.85096, -57.5349, 0.28", "-193.455, 8.14393, -58.6467, 0.83", "-194.358, 10.2693, -60.4075, 0.28", "-194.837, 11.5135, -61.3977, 0.83", "-195.666, 14.0306, -63.2661, 0.28", "-195.8, 14.4081, -63.5734, 0.83" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-187.6, -1.40295, -51.2433, 0.55", "-189.405, -1.57273, -47.4869, 0.55", "-190.195, -1.64294, -46.0235, 0.28", "-190.789, -1.69516, -44.9871, 0.55", "-191.556, -1.74483, -43.686, 0.28", "-192.213, -1.79548, -42.6365, 0.55", "-192.753, -1.8386, -41.7802, 0.28", "-193.344, -1.87579, -40.9811, 0.28", "-193.454, -1.87004, -40.7931, 0.55", "-194.225, -1.81462, -39.5657, 0.28", "-194.585, -1.79917, -38.9214, 0.83", "-195.434, -1.77802, -37.4017, 0.28", "-196.139, -1.75374, -36.0964, 0.83", "-196.871, -1.65801, -34.7048, 0.28", "-198.103, -1.45863, -32.314, 0.83" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-1.65675, -90.4548, -59.8111, 0.28", "-1.06581, -91.7247, -62.1492, 0.28", "-0.808775, -92.2211, -63.0236, 0.55", "-0.457672, -93.0761, -64.9448, 0.28", "-0.344213, -93.7797, -66.5363, 0.28", "-0.28426, -94.2462, -67.781, 0.55", "-0.344449, -94.9581, -69.7318, 0.28", "-0.435929, -95.4527, -71.1109, 0.55", "-0.728786, -96.5204, -73.8157, 0.55", "-1.10379, -97.5638, -76.6692, 0.28", "-1.35756, -98.3126, -78.7866, 0.83", "-1.70856, -99.4153, -82.0503, 0.28", "-1.75034, -99.7288, -83.0391, 0.55", "-1.68917, -100.156, -84.225, 0.55", "-1.34589, -101.011, -86.0789, 0.55", "-0.829153, -101.84, -87.8711, 0.28", "-0.574315, -102.174, -88.5717, 0.55", "0.0834245, -102.785, -89.9925, 1.11", "0.848963, -103.519, -91.7271, 0.55", "1.69136, -104.351, -93.65, 0.55", "2.21422, -105.026, -94.9885, 0.55", "2.51096, -105.893, -96.5768, 0.55", "2.57808, -106.765, -98.1175, 0.55", "2.36776, -108.17, -100.663, 0.55", "2.20744, -108.649, -101.613, 0.55", "1.49078, -109.977, -104.386, 1.11", "-0.422276, -112.567, -109.641, 0.28", "-0.624451, -112.798, -110.11, 0.55", "-1.19931, -113.445, -111.362, 0.28", "-1.76851, -114.11, -112.619, 0.83", "-2.98433, -115.908, -115.95, 0.28", "-3.19743, -116.491, -117.129, 0.55", "-3.11675, -117.055, -118.43, 0.28", "-2.71206, -118.225, -121.268, 0.55", "-2.17648, -119.21, -123.697, 0.55", "-1.68542, -119.929, -125.625, 0.28", "-1.00359, -120.563, -127.675, 1.11", "-0.402238, -121.131, -129.594, 0.55", "0.155257, -121.764, -132.051, 0.55", "0.318457, -121.987, -132.953, 0.83", "0.603867, -122.67, -135.012, 0.55", "0.769614, -123.86, -138.003, 0.83", "0.715954, -124.705, -139.694, 0.55", "0.602087, -125.816, -141.591, 0.55", "0.359748, -127.198, -143.754, 0.83", "0.0205105, -129.201, -146.736, 0.28", "-0.20404, -130.485, -148.571, 0.55", "-0.486206, -132.143, -150.871, 0.28", "-0.703398, -133.696, -153.072, 0.83", "-0.959961, -135.782, -156.34, 0.55", "-1.17788, -136.8, -158.399, 0.55", "-1.23098, -137.138, -159.308, 0.55", "-1.31081, -137.447, -160.609, 0.83", "-1.68407, -137.672, -164.112, 0.28", "-2.03355, -137.513, -166.356, 0.83", "-2.45721, -137.008, -168.998, 0.55", "-2.64719, -136.79, -170.034, 0.83", "-3.09296, -136.161, -172.644, 0.83", "-3.3066, -135.807, -173.924, 0.28", "-3.44128, -135.366, -175.212, 0.83", "-3.62191, -134.576, -177.642, 0.28", "-3.70179, -134.255, -178.721, 0.28", "-3.73828, -134.091, -179.389, 0.83", "-3.75585, -133.876, -181.118, 0.28", "-3.72363, -133.853, -181.918, 0.55", "-3.57823, -133.932, -183.249, 0.28", "-3.30892, -134.023, -185.45, 0.83", "-3.19593, -134.031, -186.861, 0.28", "-3.22398, -134.009, -187.738, 0.28", "-3.53101, -134.006, -189.211, 0.55", "-4.12296, -133.981, -191.065, 0.28", "-5.18169, -134.008, -193.641, 0.83", "-6.28271, -134.01, -196.124, 0.28", "-8.13977, -134.018, -199.773, 0.83", "-10.5934, -133.924, -204.263, 0.28", "-11.6443, -133.825, -206.01, 0.55", "-13.4716, -133.633, -208.845, 0.28", "-14.3327, -133.532, -210.206, 0.83", "-16.0665, -133.109, -213.045, 0.28", "-16.5055, -132.882, -213.939, 0.28", "-17.0826, -132.006, -216.336, 0.55", "-17.0454, -131.646, -217.303, 0.83", "-16.5577, -131.1, -218.66, 0.83", "-15.7068, -130.648, -220.064, 0.28", "-14.2116, -130.171, -221.878, 0.55", "-12.2651, -129.769, -223.967, 0.83", "-10.6234, -129.555, -225.554, 0.28", "-9.57507, -129.424, -226.542, 0.55", "-8.55784, -129.341, -227.53, 0.28", "-8.06863, -129.316, -228.069, 0.83", "-7.34529, -129.216, -229.102, 0.28", "-7.00353, -129.028, -229.751, 0.83", "-6.42522, -128.394, -231.232, 0.28", "-6.02833, -127.793, -232.397, 0.83", "-5.60117, -126.858, -233.776, 0.28", "-5.14836, -125.903, -235.016, 0.28", "-4.39137, -124.584, -236.729, 0.83", "-3.98229, -123.962, -237.504, 0.28", "-3.45815, -123.261, -238.403, 0.28", "-2.32812, -121.767, -240.187, 0.55", "-1.62316, -120.886, -241.272, 0.55", "-0.787757, -119.988, -242.607, 0.55", "-0.254299, -119.534, -243.451, 0.55", "0.719052, -118.889, -244.867, 0.55", "1.8908, -118.192, -246.53, 0.28", "2.60708, -117.836, -247.522, 0.55", "4.09296, -117.084, -249.673, 0.55", "5.81461, -116.27, -252.053, 0.28", "6.26655, -116.119, -252.637, 0.83" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-1.65675, -90.4548, -59.8111, 0.55", "-3.43114, -88.8556, -64.4615, 0.55", "-5.40639, -86.7946, -70.3027, 0.83", "-6.68096, -85.1592, -74.4455, 0.55", "-7.25931, -84.3452, -76.4206, 0.55", "-7.76949, -83.6261, -78.0779, 0.83", "-9.35596, -81.4991, -82.8484, 0.28", "-10.7808, -79.7538, -86.4278, 0.83", "-11.9591, -78.2108, -89.0674, 0.28", "-12.2516, -77.9098, -89.5872, 0.55", "-14.105, -76.7221, -92.3335, 0.28", "-15.2898, -76.1805, -93.8773, 0.55", "-17.576, -75.3764, -96.6553, 0.28", "-19.4545, -74.8309, -98.8063, 0.55", "-24.2665, -73.6754, -104.604, 0.55", "-27.7712, -72.6938, -109.179, 0.28", "-28.0042, -72.6088, -109.516, 0.55", "-29.2991, -71.9573, -111.719, 0.55", "-30.2124, -71.2454, -113.733, 0.28", "-30.8183, -70.3958, -115.511, 0.28", "-31.231, -68.4779, -118.209, 0.55", "-31.5022, -65.9247, -121.165, 0.28", "-31.595, -64.49, -122.835, 0.55", "-31.6573, -62.4478, -125.16, 0.28", "-31.6619, -61.8331, -125.854, 0.83", "-31.6386, -60.1935, -127.553, 0.55", "-31.5511, -58.9767, -128.758, 0.83", "-31.4043, -57.0896, -130.358, 0.55", "-31.3467, -54.6701, -132.079, 0.28", "-31.35, -52.9018, -133.16, 0.83", "-31.5301, -51.2281, -134.14, 0.28", "-31.8584, -49.4122, -135.093, 0.55", "-32.6661, -46.2085, -136.646, 0.28", "-33.1541, -44.5883, -137.369, 0.28", "-33.4987, -43.4864, -137.856, 0.55", "-34.9375, -39.1614, -139.868, 0.28", "-35.81, -37.0047, -141.075, 0.83", "-36.9482, -34.3048, -142.748, 0.28", "-37.4653, -33.326, -143.476, 0.83", "-38.8659, -30.8586, -145.543, 0.28", "-39.6876, -29.4413, -146.857, 0.83", "-42.2612, -25.5686, -150.807, 0.28", "-43.2892, -24.2397, -152.246, 0.83", "-46.5652, -20.6619, -156.467, 0.28", "-48.5989, -18.6843, -159.018, 0.28", "-49.2444, -18.0852, -159.828, 0.55", "-52.3029, -14.9243, -163.626, 0.28", "-53.135, -13.9401, -164.617, 0.55", "-55.7262, -10.4301, -167.699, 0.28", "-57.2346, -7.8851, -169.632, 0.83", "-58.3647, -5.54321, -171.174, 0.28", "-60.008, -0.938593, -173.669, 0.55", "-60.7951, 2.54187, -175.27, 0.28", "-61.3341, 6.07769, -176.59, 0.55", "-61.4924, 7.8563, -177.062, 0.55", "-61.8724, 12.3198, -178.21, 0.55", "-62.1898, 15.09, -179.063, 0.28", "-62.6788, 17.5589, -180.186, 0.55", "-63.8078, 21.8774, -182.281, 0.55", "-64.3244, 23.2633, -182.989, 0.55", "-66.6093, 28.2611, -185.837, 0.28", "-67.8319, 30.5293, -187.316, 0.83", "-70.2515, 34.8017, -190.435, 0.28", "-72.3251, 38.3909, -193.035, 0.28", "-73.479, 40.4836, -194.63, 0.83", "-74.5828, 42.6715, -196.341, 0.28", "-75.4998, 44.7759, -198.009, 0.55", "-76.759, 48.0166, -200.696, 0.28", "-77.7484, 50.6556, -203.137, 0.28", "-79.1458, 54.2321, -206.942, 0.55", "-80.6455, 58.457, -211.718, 0.28", "-81.2152, 60.0066, -213.599, 0.28", "-81.9038, 61.7783, -216.121, 0.55", "-82.6852, 63.4756, -218.745, 0.28", "-83.0214, 64.0669, -219.761, 0.28", "-84.6981, 66.5987, -224.322, 0.28", "-86.1423, 68.7549, -228.17, 0.55", "-87.983, 71.4854, -233.022, 0.28", "-89.3883, 73.7062, -236.949, 0.55", "-89.9153, 74.6461, -238.563, 0.55", "-90.548, 75.8936, -240.675, 0.28", "-90.7347, 76.3761, -241.436, 0.55", "-90.9959, 77.9908, -243.577, 0.28", "-90.9255, 78.6363, -244.23, 0.55", "-90.2547, 80.6969, -246.229, 0.28", "-89.9789, 81.4157, -246.772, 0.55", "-89.3413, 83.1695, -247.868, 0.28", "-89.0911, 83.9346, -248.298, 0.55", "-88.1244, 86.9365, -249.967, 0.28", "-88.0066, 87.2956, -250.182, 0.55", "-87.1664, 89.5693, -251.726, 0.55", "-85.4346, 93.5887, -255.409, 0.55", "-84.7161, 95.1418, -257.442, 0.55", "-83.9462, 96.7377, -259.752, 0.55", "-83.6508, 97.3476, -260.787, 0.55", "-82.9311, 98.7627, -263.699, 0.55", "-82.0292, 100.182, -268.576, 0.55", "-81.436, 100.397, -272.749, 0.55" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 15
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_30", "dend_29", "dend_28", "dend_19", "dend_0", "dend_25", "dend_20", "dend_18", "dend_1", "dend_27", "dend_26", "dend_24", "dend_21", "dend_17", "dend_2", "dend_23", "dend_22", "dend_16", "dend_3", "dend_15", "dend_4", "dend_14", "dend_5", "dend_7", "dend_6", "dend_11", "dend_8", "dend_13", "dend_12", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_30", "dend_29", "dend_28", "dend_19", "dend_0", "dend_25", "dend_20", "dend_18", "dend_1", "dend_27", "dend_26", "dend_24", "dend_21", "dend_17", "dend_2", "dend_23", "dend_22", "dend_16", "dend_3", "dend_15", "dend_4", "dend_14", "dend_5", "dend_7", "dend_6", "dend_11", "dend_8", "dend_13", "dend_12", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_5",
    "groups" : [ ],
    "sections" : [ "dend_30", "dend_29", "dend_28", "dend_19", "dend_0", "axon_0", "dend_25", "dend_20", "dend_18", "dend_1", "axon_1", "dend_27", "dend_26", "dend_24", "dend_21", "dend_17", "dend_2", "dend_23", "dend_22", "dend_16", "dend_3", "dend_15", "dend_4", "dend_14", "dend_5", "dend_7", "dend_6", "dend_11", "dend_8", "dend_13", "dend_12", "dend_10", "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_27", "dend_27", "dend_27", "dend_27", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_2", "dend_2", "dend_23", "dend_23", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_3", "dend_3", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_4", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_5", "dend_5", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.993125",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.005611",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.068459995",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.517764",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "6.3E-5",
    "erev" : "-64.6017"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "3.45E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.077616",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.002099",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "1.13999995E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.26087198",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "2.0E-5",
    "erev" : "-69.78141"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.395881",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009986",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "5.0100003E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.009728",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "2.7999999E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cACint209_L23_SBC_c2414afe0b_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_30, id: dend_30, parent: soma_0
create dend_30
public dend_30
// Section: dend_29, id: dend_29, parent: soma_0
create dend_29
public dend_29
// Section: dend_28, id: dend_28, parent: soma_0
create dend_28
public dend_28
// Section: dend_19, id: dend_19, parent: soma_0
create dend_19
public dend_19
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_25, id: dend_25, parent: dend_19
create dend_25
public dend_25
// Section: dend_20, id: dend_20, parent: dend_19
create dend_20
public dend_20
// Section: dend_18, id: dend_18, parent: dend_0
create dend_18
public dend_18
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_27, id: dend_27, parent: dend_25
create dend_27
public dend_27
// Section: dend_26, id: dend_26, parent: dend_25
create dend_26
public dend_26
// Section: dend_24, id: dend_24, parent: dend_20
create dend_24
public dend_24
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_17, id: dend_17, parent: dend_1
create dend_17
public dend_17
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_23, id: dend_23, parent: dend_21
create dend_23
public dend_23
// Section: dend_22, id: dend_22, parent: dend_21
create dend_22
public dend_22
// Section: dend_16, id: dend_16, parent: dend_2
create dend_16
public dend_16
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_15, id: dend_15, parent: dend_3
create dend_15
public dend_15
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_14, id: dend_14, parent: dend_4
create dend_14
public dend_14
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_11, id: dend_11, parent: dend_7
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_13, id: dend_13, parent: dend_11
create dend_13
public dend_13
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_30, dend_29, dend_28, dend_19, dend_0, dend_25, dend_20, dend_18, dend_1, dend_27, dend_26, dend_24, dend_21, dend_17, dend_2, dend_23, dend_22, dend_16, dend_3, dend_15, dend_4, dend_14, dend_5, dend_7, dend_6, dend_11, dend_8, dend_13, dend_12, dend_10, dend_9]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_30, dend_29, dend_28, dend_19, dend_0, dend_25, dend_20, dend_18, dend_1, dend_27, dend_26, dend_24, dend_21, dend_17, dend_2, dend_23, dend_22, dend_16, dend_3, dend_15, dend_4, dend_14, dend_5, dend_7, dend_6, dend_11, dend_8, dend_13, dend_12, dend_10, dend_9]}
objref ModelViewParmSubset_4
// Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_30, dend_29, dend_28, dend_19, dend_0, axon_0, dend_25, dend_20, dend_18, dend_1, axon_1, dend_27, dend_26, dend_24, dend_21, dend_17, dend_2, dend_23, dend_22, dend_16, dend_3, dend_15, dend_4, dend_14, dend_5, dend_7, dend_6, dend_11, dend_8, dend_13, dend_12, dend_10, dend_9]}
objref ModelViewParmSubset_5
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_31
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_2, dend_2, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_3, dend_3, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_4, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_5, dend_5, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_30(0), soma_0(0.49999998332546847)
    connect dend_29(0), soma_0(0.49999998332546847)
    connect dend_28(0), soma_0(0.49999998332546847)
    connect dend_19(0), soma_0(0.49999998332546847)
    connect dend_0(0), soma_0(0.49999998332546847)
    connect axon_0(0), soma_0(1.0)
    connect dend_25(0), dend_19(1.0)
    connect dend_20(0), dend_19(1.0)
    connect dend_18(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_27(0), dend_25(1.0)
    connect dend_26(0), dend_25(1.0)
    connect dend_24(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_17(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_23(0), dend_21(1.0)
    connect dend_22(0), dend_21(1.0)
    connect dend_16(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_15(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_14(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_11(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_13(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -2.6237, -8.22758, 0.070813, 2.13548 ) }
    soma_0 { pt3dadd( -2.39007, -7.49194, 0.0634915, 2.46199 ) }
    soma_0 { pt3dadd( -2.15644, -6.75631, 0.05617, 3.24204 ) }
    soma_0 { pt3dadd( -1.92281, -6.02068, 0.0488485, 4.12456 ) }
    soma_0 { pt3dadd( -1.68917, -5.28505, 0.041527, 5.0352 ) }
    soma_0 { pt3dadd( -1.45554, -4.54941, 0.0342055, 5.94585 ) }
    soma_0 { pt3dadd( -1.22191, -3.81378, 0.026884, 6.72163 ) }
    soma_0 { pt3dadd( -0.988273, -3.07815, 0.0195625, 6.80003 ) }
    soma_0 { pt3dadd( -0.75464, -2.34252, 0.012241, 6.86698 ) }
    soma_0 { pt3dadd( -0.521007, -1.60688, 0.00491951, 6.89693 ) }
    soma_0 { pt3dadd( -0.287374, -0.871249, -0.00240198, 6.78633 ) }
    soma_0 { pt3dadd( -0.0537407, -0.135617, -0.00972348, 6.68152 ) }
    soma_0 { pt3dadd( 0.179892, 0.600016, -0.017045, 7.03689 ) }
    soma_0 { pt3dadd( 0.413525, 1.33565, -0.0243665, 7.65538 ) }
    soma_0 { pt3dadd( 0.647159, 2.07128, -0.031688, 8.30636 ) }
    soma_0 { pt3dadd( 0.880792, 2.80691, -0.0390095, 9.12144 ) }
    soma_0 { pt3dadd( 1.11442, 3.54255, -0.0463309, 8.95229 ) }
    soma_0 { pt3dadd( 1.34806, 4.27818, -0.0536524, 8.48257 ) }
    soma_0 { pt3dadd( 1.58169, 5.01381, -0.0609739, 7.77052 ) }
    soma_0 { pt3dadd( 1.81532, 5.74945, -0.0682954, 6.51313 ) }
    soma_0 { pt3dadd( 2.04896, 6.48508, -0.0756169, 3.51755 ) }
    // Section: dend_30, id: dend_30, parent: soma_0 (entry count 21/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( -0.13389, 3.44653, -9.166, 0.55 ) }
    dend_30 { pt3dadd( 0.257994, 4.18898, -9.21072, 0.55 ) }
    dend_30 { pt3dadd( 0.960833, 5.70995, -9.29243, 0.28 ) }
    dend_30 { pt3dadd( 1.16185, 6.2643, -9.40836, 0.55 ) }
    dend_30 { pt3dadd( 1.61743, 7.72484, -9.80567, 0.28 ) }
    dend_30 { pt3dadd( 1.90225, 8.69284, -10.1242, 0.83 ) }
    dend_30 { pt3dadd( 2.46621, 10.6523, -10.8379, 0.28 ) }
    dend_30 { pt3dadd( 2.7753, 11.9686, -11.3755, 0.83 ) }
    dend_30 { pt3dadd( 3.22999, 14.5007, -12.4996, 0.28 ) }
    dend_30 { pt3dadd( 3.28945, 14.9747, -12.7175, 0.55 ) }
    dend_30 { pt3dadd( 3.35923, 16.2334, -13.299, 0.28 ) }
    dend_30 { pt3dadd( 3.42519, 17.0351, -13.6916, 0.55 ) }
    dend_30 { pt3dadd( 3.67671, 19.463, -14.9103, 0.28 ) }
    dend_30 { pt3dadd( 3.73602, 19.8573, -15.0884, 0.83 ) }
    dend_30 { pt3dadd( 4.11895, 21.5734, -15.7542, 0.28 ) }
    dend_30 { pt3dadd( 4.39762, 22.5557, -16.1628, 0.55 ) }
    dend_30 { pt3dadd( 5.21527, 24.8737, -17.1636, 0.28 ) }
    dend_30 { pt3dadd( 5.31657, 25.0961, -17.2754, 0.55 ) }
    dend_30 { pt3dadd( 6.21487, 26.5731, -18.1429, 0.28 ) }
    dend_30 { pt3dadd( 6.52686, 27.0025, -18.4405, 0.55 ) }
    dend_30 { pt3dadd( 7.6326, 28.2404, -19.4162, 0.28 ) }
    dend_30 { pt3dadd( 8.22029, 28.8311, -19.9489, 0.55 ) }
    dend_30 { pt3dadd( 9.50291, 30.0922, -21.1344, 0.28 ) }
    dend_30 { pt3dadd( 9.98134, 30.5774, -21.6605, 0.55 ) }
    dend_30 { pt3dadd( 11.3043, 31.8885, -23.2303, 0.28 ) }
    dend_30 { pt3dadd( 11.9034, 32.4914, -23.9769, 0.55 ) }
    dend_30 { pt3dadd( 12.7462, 33.3738, -25.0832, 0.55 ) }
    dend_30 { pt3dadd( 13.4284, 34.1628, -26.0567, 0.83 ) }
    dend_30 { pt3dadd( 15.1192, 36.4022, -28.6662, 0.28 ) }
    dend_30 { pt3dadd( 15.7062, 37.275, -29.6207, 0.55 ) }
    dend_30 { pt3dadd( 16.1416, 37.9693, -30.3374, 0.28 ) }
    dend_30 { pt3dadd( 16.5163, 38.5503, -30.9758, 0.55 ) }
    dend_30 { pt3dadd( 17.2063, 39.5271, -32.1417, 0.28 ) }
    dend_30 { pt3dadd( 17.4639, 39.8428, -32.572, 0.55 ) }
    dend_30 { pt3dadd( 18.5438, 40.9517, -34.2115, 0.28 ) }
    dend_30 { pt3dadd( 18.8445, 41.2228, -34.6923, 0.55 ) }
    dend_30 { pt3dadd( 20.0323, 42.0858, -36.4978, 0.28 ) }
    dend_30 { pt3dadd( 20.6996, 42.565, -37.5369, 0.83 ) }
    dend_30 { pt3dadd( 21.8764, 43.4337, -39.4385, 0.28 ) }
    dend_30 { pt3dadd( 22.2322, 43.6809, -39.9979, 0.83 ) }
    dend_30 { pt3dadd( 23.2522, 44.3903, -41.5523, 0.28 ) }
    dend_30 { pt3dadd( 23.7817, 44.7137, -42.2104, 0.55 ) }
    dend_30 { pt3dadd( 25.6246, 45.717, -43.9826, 0.28 ) }
    dend_30 { pt3dadd( 26.152, 46.0139, -44.4108, 0.55 ) }
    dend_30 { pt3dadd( 27.7695, 46.9837, -45.5901, 0.28 ) }
    dend_30 { pt3dadd( 28.4742, 47.4083, -46.0698, 0.83 ) }
    dend_30 { pt3dadd( 31.5088, 49.1463, -47.9045, 0.28 ) }
    dend_30 { pt3dadd( 32.5438, 49.6997, -48.4733, 0.55 ) }
    dend_30 { pt3dadd( 34.9908, 50.793, -49.5813, 0.28 ) }
    dend_30 { pt3dadd( 35.7482, 51.1698, -49.917, 0.55 ) }
    // Section: dend_29, id: dend_29, parent: soma_0 (entry count 71/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 3.72611, 3.91653, 8.114, 0.55 ) }
    dend_29 { pt3dadd( 4.58737, 4.56032, 8.17425, 0.55 ) }
    dend_29 { pt3dadd( 5.38716, 5.24716, 8.22957, 0.83 ) }
    dend_29 { pt3dadd( 6.49963, 6.25426, 8.30324, 0.55 ) }
    dend_29 { pt3dadd( 9.37146, 8.98253, 8.47372, 0.55 ) }
    dend_29 { pt3dadd( 10.9016, 10.4948, 8.55331, 1.11 ) }
    dend_29 { pt3dadd( 12.5848, 12.1739, 8.63541, 0.55 ) }
    dend_29 { pt3dadd( 14.026, 13.6951, 8.69522, 0.55 ) }
    dend_29 { pt3dadd( 15.4225, 15.2519, 8.74259, 0.28 ) }
    dend_29 { pt3dadd( 16.9369, 17.093, 8.77424, 0.83 ) }
    dend_29 { pt3dadd( 18.6019, 19.3485, 8.77815, 0.28 ) }
    dend_29 { pt3dadd( 18.996, 19.8795, 8.77455, 0.83 ) }
    dend_29 { pt3dadd( 20.2666, 21.6298, 8.73427, 0.28 ) }
    dend_29 { pt3dadd( 20.6168, 22.1174, 8.72881, 0.55 ) }
    dend_29 { pt3dadd( 21.4447, 23.3742, 8.72216, 0.28 ) }
    dend_29 { pt3dadd( 21.6779, 23.7225, 8.72506, 0.55 ) }
    dend_29 { pt3dadd( 22.9737, 25.4171, 8.81799, 0.28 ) }
    dend_29 { pt3dadd( 23.4102, 25.919, 8.86749, 0.55 ) }
    dend_29 { pt3dadd( 24.5812, 27.0396, 9.06841, 0.28 ) }
    dend_29 { pt3dadd( 25.9764, 28.2733, 9.31462, 0.28 ) }
    dend_29 { pt3dadd( 27.2888, 29.3737, 9.54406, 0.55 ) }
    dend_29 { pt3dadd( 28.952, 30.7669, 9.77886, 0.28 ) }
    dend_29 { pt3dadd( 29.5978, 31.3119, 9.8637, 0.55 ) }
    dend_29 { pt3dadd( 32.154, 33.5262, 10.443, 0.28 ) }
    dend_29 { pt3dadd( 33.6374, 34.8218, 10.8733, 0.55 ) }
    dend_29 { pt3dadd( 35.0006, 36.0788, 11.3344, 0.55 ) }
    dend_29 { pt3dadd( 36.4336, 37.5406, 11.8625, 0.28 ) }
    dend_29 { pt3dadd( 37.6436, 38.861, 12.3002, 0.55 ) }
    dend_29 { pt3dadd( 40.7938, 42.5065, 13.4803, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_29 { pt3dadd( 41.4472, 43.3288, 13.7221, 0.55 ) }
    dend_29 { pt3dadd( 43.2194, 45.7235, 14.4262, 0.28 ) }
    dend_29 { pt3dadd( 44.0662, 46.946, 14.7099, 0.55 ) }
    dend_29 { pt3dadd( 45.4864, 49.2506, 15.074, 0.28 ) }
    dend_29 { pt3dadd( 46.2043, 50.6514, 15.1377, 0.55 ) }
    dend_29 { pt3dadd( 47.0152, 52.6401, 15.0176, 0.28 ) }
    dend_29 { pt3dadd( 47.3736, 53.6742, 14.9424, 0.55 ) }
    dend_29 { pt3dadd( 48.1193, 56.177, 14.7404, 0.28 ) }
    dend_29 { pt3dadd( 48.7192, 58.3198, 14.7203, 0.83 ) }
    dend_29 { pt3dadd( 49.6224, 61.6437, 14.8893, 0.28 ) }
    dend_29 { pt3dadd( 50.1007, 63.34, 15.0419, 0.55 ) }
    dend_29 { pt3dadd( 50.952, 66.2759, 15.4351, 0.28 ) }
    dend_29 { pt3dadd( 51.3575, 67.6815, 15.6564, 0.55 ) }
    dend_29 { pt3dadd( 52.3958, 71.3355, 16.3719, 0.28 ) }
    dend_29 { pt3dadd( 52.6666, 72.1845, 16.5296, 0.55 ) }
    dend_29 { pt3dadd( 53.427, 74.4074, 16.9193, 0.28 ) }
    dend_29 { pt3dadd( 53.9011, 75.7039, 17.1461, 0.55 ) }
    dend_29 { pt3dadd( 55.1931, 79.0339, 17.694, 0.28 ) }
    dend_29 { pt3dadd( 55.6821, 80.1846, 17.8325, 0.55 ) }
    dend_29 { pt3dadd( 56.7682, 82.4911, 17.9565, 0.28 ) }
    dend_29 { pt3dadd( 57.9206, 84.6834, 18.074, 0.28 ) }
    dend_29 { pt3dadd( 58.0713, 84.9449, 18.0899, 0.83 ) }
    dend_29 { pt3dadd( 58.9089, 86.3163, 18.1615, 0.28 ) }
    dend_29 { pt3dadd( 59.7548, 87.5399, 18.2308, 0.55 ) }
    dend_29 { pt3dadd( 61.1182, 89.5206, 18.3761, 0.28 ) }
    dend_29 { pt3dadd( 62.3849, 91.2295, 18.5697, 0.55 ) }
    dend_29 { pt3dadd( 69.0264, 99.6182, 18.9119, 0.55 ) }
    // Section: dend_28, id: dend_28, parent: soma_0 (entry count 27/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 2.55611, 4.97653, 8.114, 0.55 ) }
    dend_28 { pt3dadd( 4.02144, 6.3718, 8.82466, 0.55 ) }
    dend_28 { pt3dadd( 5.65414, 7.87893, 9.7548, 1.11 ) }
    dend_28 { pt3dadd( 6.92928, 9.1746, 10.5131, 0.55 ) }
    dend_28 { pt3dadd( 8.51376, 10.9018, 11.3797, 0.55 ) }
    dend_28 { pt3dadd( 10.0503, 12.5769, 12.2201, 0.55 ) }
    dend_28 { pt3dadd( 11.3796, 14.026, 12.9471, 0.83 ) }
    dend_28 { pt3dadd( 12.5613, 15.2351, 13.6711, 0.55 ) }
    dend_28 { pt3dadd( 13.9379, 16.5417, 14.589, 0.28 ) }
    dend_28 { pt3dadd( 14.9318, 17.6145, 15.3354, 0.55 ) }
    dend_28 { pt3dadd( 21.1, 25.404, 19.4925, 0.55 ) }
    dend_28 { pt3dadd( 26.2093, 33.9806, 23.5351, 0.55 ) }
    dend_28 { pt3dadd( 30.6467, 43.4084, 26.2611, 0.55 ) }
    dend_28 { pt3dadd( 35.6994, 52.9101, 26.6989, 0.55 ) }
    dend_28 { pt3dadd( 41.6399, 61.8608, 25.9246, 0.55 ) }
    dend_28 { pt3dadd( 48.8313, 69.4856, 23.4445, 0.55 ) }
    // Section: dend_19, id: dend_19, parent: soma_0 (entry count 43/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -2.57389, 5.70653, 1.184, 0.83 ) }
    dend_19 { pt3dadd( -2.67386, 7.83841, 2.29611, 0.83 ) }
    dend_19 { pt3dadd( -2.66847, 10.2096, 3.30768, 0.83 ) }
    dend_19 { pt3dadd( -2.57045, 12.6059, 4.14547, 1.66 ) }
    dend_19 { pt3dadd( -2.28837, 16.929, 5.45429, 0.83 ) }
    dend_19 { pt3dadd( -2.22883, 18.9409, 5.99026, 0.83 ) }
    dend_19 { pt3dadd( -2.18858, 21.3187, 6.56536, 1.66 ) }
    dend_19 { pt3dadd( -2.06666, 24.49, 7.27592, 0.83 ) }
    dend_19 { pt3dadd( -1.93355, 27.4497, 7.81663, 0.83 ) }
    dend_19 { pt3dadd( -1.84707, 29.4454, 8.11917, 0.83 ) }
    dend_19 { pt3dadd( -1.74547, 33.8305, 8.37309, 0.83 ) }
    dend_19 { pt3dadd( -1.76857, 35.8489, 8.50993, 0.83 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 55/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -2.93389, -9.18347, -0.806, 1.66 ) }
    dend_0 { pt3dadd( -2.54405, -12.9384, -1.40969, 1.66 ) }
    dend_0 { pt3dadd( -2.13918, -17.1586, -2.1914, 1.66 ) }
    dend_0 { pt3dadd( -1.77098, -20.9966, -2.90233, 0.83 ) }
    dend_0 { pt3dadd( -1.20825, -26.8623, -3.98884, 1.11 ) }
    dend_0 { pt3dadd( -0.767588, -31.4556, -4.83966, 1.11 ) }
    dend_0 { pt3dadd( -0.51162, -34.1237, -5.33389, 1.11 ) }
    dend_0 { pt3dadd( -0.144693, -36.7022, -5.89282, 1.11 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 63/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 2.04896, 6.48508, -0.0756169, 0.55 ) }
    axon_0 { pt3dadd( 6.58939, 20.7814, -0.0756169, 0.55 ) }
    axon_0 { pt3dadd( 11.1298, 35.0777, -0.0756169, 0.55 ) }
    // Section: dend_25, id: dend_25, parent: dend_19 (entry count 66/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( -1.76857, 35.8489, 8.50993, 0.55 ) }
    dend_25 { pt3dadd( -2.08407, 40.3271, 7.2784, 0.55 ) }
    dend_25 { pt3dadd( -2.11919, 43.0817, 6.36708, 0.55 ) }
    dend_25 { pt3dadd( -2.0157, 45.8272, 5.41489, 0.83 ) }
    dend_25 { pt3dadd( -1.90049, 47.6366, 4.79115, 0.28 ) }
    dend_25 { pt3dadd( -1.81364, 48.6438, 4.47377, 0.28 ) }
    dend_25 { pt3dadd( -1.7294, 49.5425, 4.21379, 0.55 ) }
    dend_25 { pt3dadd( -1.42381, 51.9774, 3.53287, 0.55 ) }
    dend_25 { pt3dadd( -1.31273, 53.3451, 3.23817, 0.55 ) }
    dend_25 { pt3dadd( -1.27419, 54.3686, 3.11555, 0.83 ) }
    dend_25 { pt3dadd( -1.34138, 57.516, 2.83116, 0.55 ) }
    dend_25 { pt3dadd( -1.4985, 58.7985, 2.76529, 0.83 ) }
    dend_25 { pt3dadd( -1.7834, 60.1021, 2.74998, 0.28 ) }
    dend_25 { pt3dadd( -2.15022, 61.3731, 2.80276, 0.55 ) }
    dend_25 { pt3dadd( -2.8495, 63.4839, 2.86394, 0.55 ) }
    dend_25 { pt3dadd( -3.75363, 65.9072, 2.94354, 0.55 ) }
    dend_25 { pt3dadd( -4.4661, 67.4988, 2.87232, 0.28 ) }
    dend_25 { pt3dadd( -4.85908, 68.3467, 2.75439, 0.28 ) }
    dend_25 { pt3dadd( -5.42024, 69.523, 2.50425, 0.55 ) }
    dend_25 { pt3dadd( -6.11534, 70.8277, 2.08439, 0.28 ) }
    dend_25 { pt3dadd( -6.75071, 72.0299, 1.60521, 1.11 ) }
    dend_25 { pt3dadd( -8.71342, 75.5307, 0.150812, 0.28 ) }
    dend_25 { pt3dadd( -9.36835, 76.7342, -0.305282, 0.83 ) }
    dend_25 { pt3dadd( -10.4787, 78.8095, -1.00234, 0.83 ) }
    dend_25 { pt3dadd( -11.6968, 81.1002, -1.64488, 0.28 ) }
    dend_25 { pt3dadd( -12.5902, 82.8265, -2.01795, 0.28 ) }
    dend_25 { pt3dadd( -14.2539, 86.2673, -2.55919, 0.83 ) }
    dend_25 { pt3dadd( -14.9526, 87.8992, -2.67297, 0.28 ) }
    dend_25 { pt3dadd( -15.6325, 89.5754, -2.72475, 0.55 ) }
    dend_25 { pt3dadd( -16.8298, 92.752, -2.79256, 0.55 ) }
    dend_25 { pt3dadd( -17.4017, 94.3864, -2.8006, 1.11 ) }
    dend_25 { pt3dadd( -18.0935, 96.4157, -2.84615, 0.55 ) }
    dend_25 { pt3dadd( -18.6809, 98.4705, -2.88458, 0.55 ) }
    dend_25 { pt3dadd( -19.3384, 100.827, -2.93981, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_25 { pt3dadd( -20.1406, 103.787, -3.0308, 0.55 ) }
    dend_25 { pt3dadd( -20.4095, 104.959, -3.07033, 0.55 ) }
    dend_25 { pt3dadd( -20.6895, 106.262, -3.12021, 0.55 ) }
    dend_25 { pt3dadd( -21.4697, 109.986, -3.26921, 0.55 ) }
    dend_25 { pt3dadd( -21.9321, 112.189, -3.35213, 0.83 ) }
    dend_25 { pt3dadd( -22.3763, 114.732, -3.43294, 0.28 ) }
    dend_25 { pt3dadd( -22.7931, 117.166, -3.49367, 0.55 ) }
    dend_25 { pt3dadd( -23.0941, 118.879, -3.55008, 0.55 ) }
    dend_25 { pt3dadd( -23.4051, 120.69, -3.6573, 0.28 ) }
    dend_25 { pt3dadd( -23.5812, 121.743, -3.75072, 0.55 ) }
    dend_25 { pt3dadd( -23.9928, 124.346, -3.91789, 0.55 ) }
    dend_25 { pt3dadd( -24.2193, 125.853, -3.98494, 0.28 ) }
    dend_25 { pt3dadd( -24.3597, 126.617, -4.02093, 0.83 ) }
    dend_25 { pt3dadd( -24.7422, 128.859, -4.11365, 0.28 ) }
    dend_25 { pt3dadd( -24.8713, 129.63, -4.1536, 0.55 ) }
    dend_25 { pt3dadd( -25.131, 131.038, -4.23304, 0.28 ) }
    dend_25 { pt3dadd( -25.3462, 132.19, -4.29645, 0.55 ) }
    dend_25 { pt3dadd( -25.7325, 134.388, -4.37174, 0.55 ) }
    dend_25 { pt3dadd( -26.499, 138.203, -4.43428, 0.55 ) }
    dend_25 { pt3dadd( -27.0128, 140.57, -4.47317, 0.28 ) }
    dend_25 { pt3dadd( -27.1962, 141.474, -4.49868, 0.83 ) }
    dend_25 { pt3dadd( -27.5062, 143.084, -4.54998, 0.83 ) }
    dend_25 { pt3dadd( -27.9523, 145.508, -4.63308, 0.55 ) }
    dend_25 { pt3dadd( -28.3064, 148.151, -4.69789, 0.55 ) }
    dend_25 { pt3dadd( -28.6304, 150.857, -4.58117, 0.55 ) }
    dend_25 { pt3dadd( -28.8159, 152.937, -4.45768, 0.55 ) }
    dend_25 { pt3dadd( -28.9742, 155.833, -4.2788, 0.55 ) }
    dend_25 { pt3dadd( -29.0834, 159.142, -4.06132, 0.55 ) }
    dend_25 { pt3dadd( -29.0634, 163.444, -3.75652, 0.55 ) }
    dend_25 { pt3dadd( -28.9641, 167.035, -3.46451, 0.55 ) }
    dend_25 { pt3dadd( -28.8538, 170.61, -3.14115, 0.55 ) }
    dend_25 { pt3dadd( -28.7855, 172.748, -2.96527, 0.55 ) }
    dend_25 { pt3dadd( -28.6731, 174.559, -2.85345, 0.83 ) }
    dend_25 { pt3dadd( -28.5438, 176.21, -2.78893, 0.55 ) }
    dend_25 { pt3dadd( -28.3738, 178.595, -2.71779, 0.55 ) }
    dend_25 { pt3dadd( -28.1516, 180.928, -2.66346, 0.55 ) }
    dend_25 { pt3dadd( -28.0127, 182.321, -2.55465, 0.83 ) }
    dend_25 { pt3dadd( -27.7868, 184.558, -2.39628, 0.28 ) }
    dend_25 { pt3dadd( -27.4763, 187.391, -2.12546, 0.55 ) }
    dend_25 { pt3dadd( -27.1301, 190.714, -1.72299, 0.55 ) }
    dend_25 { pt3dadd( -26.8937, 192.908, -1.39243, 0.55 ) }
    dend_25 { pt3dadd( -26.7652, 194.178, -1.17901, 0.28 ) }
    dend_25 { pt3dadd( -26.6201, 195.844, -0.870786, 0.55 ) }
    dend_25 { pt3dadd( -26.3838, 199.097, -0.192486, 0.55 ) }
    dend_25 { pt3dadd( -26.1704, 202.162, 0.451563, 0.55 ) }
    dend_25 { pt3dadd( -26.0813, 203.759, 0.73878, 0.55 ) }
    // Section: dend_20, id: dend_20, parent: dend_19 (entry count 46/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( -1.76857, 35.8489, 8.50993, 0.55 ) }
    dend_20 { pt3dadd( -1.92525, 40.0702, 8.40944, 0.55 ) }
    dend_20 { pt3dadd( -2.11802, 45.2636, 8.28581, 0.55 ) }
    dend_20 { pt3dadd( -2.22535, 48.1555, 8.21698, 0.55 ) }
    dend_20 { pt3dadd( -2.32031, 50.7139, 8.15607, 0.55 ) }
    dend_20 { pt3dadd( -2.45255, 54.2769, 8.07126, 0.55 ) }
    dend_20 { pt3dadd( -2.5715, 57.4817, 7.99497, 0.55 ) }
    // Section: dend_18, id: dend_18, parent: dend_0 (entry count 53/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -0.144693, -36.7022, -5.89282, 0.55 ) }
    dend_18 { pt3dadd( 0.212311, -38.5271, -4.84963, 0.55 ) }
    dend_18 { pt3dadd( 1.00479, -41.9078, -3.52009, 0.55 ) }
    dend_18 { pt3dadd( 2.03292, -46.446, -0.835856, 0.55 ) }
    dend_18 { pt3dadd( 2.45623, -48.4836, 0.439385, 0.55 ) }
    dend_18 { pt3dadd( 2.74005, -50.1759, 1.55781, 0.55 ) }
    dend_18 { pt3dadd( 3.29349, -53.2645, 3.61895, 0.55 ) }
    dend_18 { pt3dadd( 3.75992, -55.6431, 5.22412, 0.55 ) }
    dend_18 { pt3dadd( 5.17537, -60.9347, 8.95147, 0.55 ) }
    dend_18 { pt3dadd( 5.85378, -62.91, 10.2339, 0.55 ) }
    dend_18 { pt3dadd( 7.63807, -67.0916, 13.0139, 0.28 ) }
    dend_18 { pt3dadd( 8.56694, -68.7448, 14.23, 0.28 ) }
    dend_18 { pt3dadd( 9.79124, -70.1881, 15.4569, 0.55 ) }
    dend_18 { pt3dadd( 11.117, -71.1498, 16.3158, 0.28 ) }
    dend_18 { pt3dadd( 12.2656, -71.5394, 16.6857, 0.55 ) }
    dend_18 { pt3dadd( 16.1301, -71.8822, 17.8712, 0.55 ) }
    dend_18 { pt3dadd( 17.867, -71.6749, 18.1283, 0.55 ) }
    dend_18 { pt3dadd( 18.9709, -71.4955, 18.1898, 0.55 ) }
    dend_18 { pt3dadd( 20.859, -71.1452, 18.1717, 0.55 ) }
    dend_18 { pt3dadd( 22.9731, -70.8403, 18.0638, 0.55 ) }
    dend_18 { pt3dadd( 25.6093, -70.5028, 17.8095, 0.55 ) }
    dend_18 { pt3dadd( 32.0622, -69.7724, 17.063, 0.55 ) }
    dend_18 { pt3dadd( 34.9393, -69.4444, 16.7475, 0.28 ) }
    dend_18 { pt3dadd( 36.0439, -69.2874, 16.6391, 0.55 ) }
    dend_18 { pt3dadd( 40.2499, -68.6911, 16.0477, 0.55 ) }
    dend_18 { pt3dadd( 41.3669, -68.4756, 15.8615, 0.55 ) }
    dend_18 { pt3dadd( 43.8087, -67.8393, 15.4866, 0.28 ) }
    dend_18 { pt3dadd( 45.2872, -67.3087, 15.4045, 0.28 ) }
    dend_18 { pt3dadd( 47.5668, -66.3653, 15.3212, 0.55 ) }
    dend_18 { pt3dadd( 51.4281, -64.7195, 15.0493, 0.28 ) }
    dend_18 { pt3dadd( 53.2614, -63.9551, 14.878, 0.28 ) }
    dend_18 { pt3dadd( 54.619, -63.481, 14.7425, 0.55 ) }
    dend_18 { pt3dadd( 58.3752, -62.3974, 14.1989, 0.28 ) }
    dend_18 { pt3dadd( 60.1771, -61.9212, 13.925, 0.83 ) }
    dend_18 { pt3dadd( 63.4793, -61.1081, 13.4836, 0.28 ) }
    dend_18 { pt3dadd( 64.7097, -60.8202, 13.3759, 0.28 ) }
    dend_18 { pt3dadd( 66.0345, -60.5883, 13.1983, 0.83 ) }
    dend_18 { pt3dadd( 68.8446, -60.2236, 12.6551, 0.28 ) }
    dend_18 { pt3dadd( 70.7505, -60.1976, 12.1036, 0.83 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 92/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -0.144693, -36.7022, -5.89282, 0.83 ) }
    dend_1 { pt3dadd( 0.11351, -37.3006, -6.37102, 0.83 ) }
    dend_1 { pt3dadd( 1.03103, -39.4271, -8.07032, 0.83 ) }
    dend_1 { pt3dadd( 2.31299, -42.3983, -10.4445, 0.83 ) }
    dend_1 { pt3dadd( 4.1658, -46.6926, -13.876, 0.83 ) }
    dend_1 { pt3dadd( 5.58699, -49.9865, -16.5081, 0.83 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 98/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 11.1298, 35.0777, -0.0756169, 0.28 ) }
    axon_1 { pt3dadd( 15.6702, 49.374, -0.0756169, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    axon_1 { pt3dadd( 20.2107, 63.6703, -0.0756169, 0.28 ) }
    // Section: dend_27, id: dend_27, parent: dend_25 (entry count 1/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( -26.0813, 203.759, 0.73878, 0.55 ) }
    dend_27 { pt3dadd( -25.0086, 204.373, 1.25011, 0.55 ) }
    dend_27 { pt3dadd( -24.0195, 204.939, 1.7216, 0.28 ) }
    dend_27 { pt3dadd( -22.8094, 205.631, 2.29844, 0.55 ) }
    dend_27 { pt3dadd( -15.9707, 208.778, 6.58164, 0.55 ) }
    // Section: dend_26, id: dend_26, parent: dend_25 (entry count 6/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( -26.0813, 203.759, 0.73878, 0.55 ) }
    dend_26 { pt3dadd( -26.2109, 205.392, 1.65481, 0.55 ) }
    dend_26 { pt3dadd( -26.3822, 207.819, 2.96815, 0.55 ) }
    dend_26 { pt3dadd( -26.5272, 209.7, 3.96272, 0.55 ) }
    dend_26 { pt3dadd( -26.6929, 211.903, 5.01942, 0.55 ) }
    dend_26 { pt3dadd( -26.8387, 213.769, 5.90387, 0.55 ) }
    dend_26 { pt3dadd( -27.0047, 215.425, 6.63821, 0.28 ) }
    dend_26 { pt3dadd( -27.0994, 216.476, 7.03807, 0.28 ) }
    dend_26 { pt3dadd( -27.1384, 217.029, 7.20487, 0.55 ) }
    dend_26 { pt3dadd( -27.2781, 219.637, 7.89254, 0.55 ) }
    dend_26 { pt3dadd( -27.5353, 222.846, 8.69402, 0.28 ) }
    dend_26 { pt3dadd( -27.7059, 224.6, 9.11142, 0.28 ) }
    dend_26 { pt3dadd( -27.8763, 226.213, 9.45763, 0.55 ) }
    dend_26 { pt3dadd( -28.1276, 229.659, 10.2135, 0.28 ) }
    dend_26 { pt3dadd( -28.2135, 231.188, 10.5319, 0.55 ) }
    dend_26 { pt3dadd( -27.2783, 238.601, 13.6554, 0.55 ) }
    // Section: dend_24, id: dend_24, parent: dend_20 (entry count 22/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( -2.5715, 57.4817, 7.99497, 0.55 ) }
    dend_24 { pt3dadd( -1.5591, 58.5437, 8.57029, 0.55 ) }
    dend_24 { pt3dadd( -0.293635, 59.8711, 9.28943, 0.55 ) }
    dend_24 { pt3dadd( 0.964314, 61.1906, 10.0043, 0.55 ) }
    dend_24 { pt3dadd( 1.53858, 61.793, 10.3307, 0.55 ) }
    dend_24 { pt3dadd( 3.09004, 63.4205, 11.2123, 0.83 ) }
    dend_24 { pt3dadd( 9.34311, 70.8807, 13.5394, 0.83 ) }
    dend_24 { pt3dadd( 16.5235, 77.7777, 14.5612, 0.83 ) }
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 30/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( -2.5715, 57.4817, 7.99497, 0.55 ) }
    dend_21 { pt3dadd( -3.65027, 59.8131, 8.03886, 0.55 ) }
    dend_21 { pt3dadd( -4.95834, 62.6851, 7.95792, 0.55 ) }
    dend_21 { pt3dadd( -5.99293, 64.7634, 7.84909, 0.55 ) }
    dend_21 { pt3dadd( -7.06342, 66.7249, 7.79664, 0.55 ) }
    dend_21 { pt3dadd( -7.60877, 67.7005, 7.78851, 0.83 ) }
    dend_21 { pt3dadd( -8.89029, 69.9134, 7.85003, 0.55 ) }
    dend_21 { pt3dadd( -10.0378, 71.7802, 7.90148, 0.55 ) }
    dend_21 { pt3dadd( -10.7433, 72.9202, 8.04525, 0.83 ) }
    dend_21 { pt3dadd( -11.8404, 74.6259, 8.32862, 0.28 ) }
    dend_21 { pt3dadd( -12.5999, 75.7244, 8.53031, 0.55 ) }
    dend_21 { pt3dadd( -13.8024, 77.5272, 8.90029, 0.55 ) }
    dend_21 { pt3dadd( -14.517, 78.642, 9.2453, 0.55 ) }
    dend_21 { pt3dadd( -15.3791, 80.3518, 9.75164, 0.28 ) }
    dend_21 { pt3dadd( -16.0066, 81.8923, 10.0963, 0.55 ) }
    dend_21 { pt3dadd( -16.5789, 83.4065, 10.3787, 0.55 ) }
    dend_21 { pt3dadd( -17.1371, 84.9446, 10.6617, 0.28 ) }
    dend_21 { pt3dadd( -17.9658, 87.6703, 11.1025, 0.55 ) }
    dend_21 { pt3dadd( -18.5252, 89.8134, 11.46, 0.28 ) }
    dend_21 { pt3dadd( -19.0089, 91.6624, 11.7632, 0.55 ) }
    // Section: dend_17, id: dend_17, parent: dend_1 (entry count 50/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 5.58699, -49.9865, -16.5081, 0.55 ) }
    dend_17 { pt3dadd( 7.44725, -50.6931, -16.2445, 0.55 ) }
    dend_17 { pt3dadd( 9.42246, -51.3582, -15.7257, 0.55 ) }
    dend_17 { pt3dadd( 12.1275, -52.3317, -14.9319, 0.55 ) }
    dend_17 { pt3dadd( 13.8532, -52.9883, -14.4391, 0.28 ) }
    dend_17 { pt3dadd( 15.8555, -53.7089, -13.7073, 0.55 ) }
    dend_17 { pt3dadd( 20.9994, -55.6263, -11.6616, 0.55 ) }
    dend_17 { pt3dadd( 22.5882, -56.2592, -10.9136, 0.55 ) }
    dend_17 { pt3dadd( 23.9115, -56.7476, -10.2504, 0.28 ) }
    dend_17 { pt3dadd( 24.638, -57.0088, -9.86913, 0.55 ) }
    dend_17 { pt3dadd( 28.0425, -57.8892, -8.37613, 0.28 ) }
    dend_17 { pt3dadd( 29.4334, -58.1821, -7.75635, 0.28 ) }
    dend_17 { pt3dadd( 30.3464, -58.3212, -7.40776, 0.55 ) }
    dend_17 { pt3dadd( 31.892, -58.5817, -6.75599, 0.55 ) }
    dend_17 { pt3dadd( 34.595, -59.0301, -5.63189, 0.55 ) }
    dend_17 { pt3dadd( 37.0041, -59.5019, -4.71776, 0.55 ) }
    dend_17 { pt3dadd( 41.0424, -60.3857, -3.40915, 0.55 ) }
    dend_17 { pt3dadd( 44.12, -61.0389, -2.40618, 0.28 ) }
    dend_17 { pt3dadd( 45.9079, -61.421, -1.82784, 0.28 ) }
    dend_17 { pt3dadd( 47.4843, -61.7871, -1.33457, 0.83 ) }
    dend_17 { pt3dadd( 49.621, -62.2723, -0.632072, 0.28 ) }
    dend_17 { pt3dadd( 50.6086, -62.4723, -0.308699, 0.55 ) }
    dend_17 { pt3dadd( 52.6115, -62.7472, 0.149799, 0.28 ) }
    dend_17 { pt3dadd( 53.5451, -62.8196, 0.363975, 0.28 ) }
    dend_17 { pt3dadd( 54.3637, -62.8316, 0.589484, 0.55 ) }
    dend_17 { pt3dadd( 57.8355, -62.7587, 1.76225, 0.55 ) }
    dend_17 { pt3dadd( 59.6436, -62.6473, 2.5011, 0.28 ) }
    dend_17 { pt3dadd( 60.7391, -62.6124, 2.98915, 0.55 ) }
    dend_17 { pt3dadd( 62.0984, -62.6537, 3.61399, 0.55 ) }
    dend_17 { pt3dadd( 70.2848, -64.6957, 8.2074, 0.55 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 80/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 5.58699, -49.9865, -16.5081, 0.83 ) }
    dend_2 { pt3dadd( 3.5071, -53.8073, -15.6221, 0.83 ) }
    dend_2 { pt3dadd( 3.01573, -54.7099, -15.4128, 0.83 ) }
    // Section: dend_23, id: dend_23, parent: dend_21 (entry count 83/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( -19.0089, 91.6624, 11.7632, 0.55 ) }
    dend_23 { pt3dadd( -21.1087, 94.6239, 15.4062, 0.55 ) }
    dend_23 { pt3dadd( -26.8149, 101.525, 23.3595, 0.55 ) }
    // Section: dend_22, id: dend_22, parent: dend_21 (entry count 86/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( -19.0089, 91.6624, 11.7632, 0.28 ) }
    dend_22 { pt3dadd( -18.8235, 93.8186, 11.2552, 0.28 ) }
    dend_22 { pt3dadd( -18.7487, 95.8291, 10.9192, 0.55 ) }
    dend_22 { pt3dadd( -18.6394, 98.7644, 10.4286, 0.28 ) }
    dend_22 { pt3dadd( -18.5688, 100.664, 10.1111, 0.28 ) }
    dend_22 { pt3dadd( -18.5417, 101.392, 9.98943, 0.55 ) }
    dend_22 { pt3dadd( -18.466, 103.426, 9.64948, 0.28 ) }
    dend_22 { pt3dadd( -18.4968, 104.256, 9.54768, 0.83 ) }
    dend_22 { pt3dadd( -18.2507, 112.903, 9.67527, 0.83 ) }
    // Section: dend_16, id: dend_16, parent: dend_2 (entry count 95/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 3.01573, -54.7099, -15.4128, 0.55 ) }
    dend_16 { pt3dadd( 3.73178, -55.9567, -15.5708, 0.55 ) }
    dend_16 { pt3dadd( 5.09103, -58.4912, -15.8834, 0.55 ) }
    dend_16 { pt3dadd( 6.00554, -60.3642, -16.0778, 0.28 ) }
    dend_16 { pt3dadd( 7.4483, -63.781, -16.3369, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_16 { pt3dadd( 8.3539, -66.3775, -16.4377, 0.55 ) }
    dend_16 { pt3dadd( 9.30762, -69.4351, -16.503, 0.55 ) }
    dend_16 { pt3dadd( 10.3807, -73.5392, -16.4583, 0.55 ) }
    dend_16 { pt3dadd( 10.7422, -75.1259, -16.3645, 0.55 ) }
    dend_16 { pt3dadd( 11.8731, -79.8594, -15.8831, 0.55 ) }
    dend_16 { pt3dadd( 12.5754, -82.9422, -15.4177, 0.55 ) }
    dend_16 { pt3dadd( 13.4989, -87.0082, -14.6401, 0.55 ) }
    dend_16 { pt3dadd( 14.0406, -89.3942, -14.0911, 0.28 ) }
    dend_16 { pt3dadd( 14.7172, -92.0376, -13.4269, 0.83 ) }
    dend_16 { pt3dadd( 15.7172, -95.555, -12.541, 0.55 ) }
    dend_16 { pt3dadd( 16.2803, -97.3351, -12.019, 0.28 ) }
    dend_16 { pt3dadd( 16.7736, -98.8122, -11.5621, 0.55 ) }
    dend_16 { pt3dadd( 17.8541, -102.314, -10.4507, 0.28 ) }
    dend_16 { pt3dadd( 18.1648, -103.39, -10.1475, 0.55 ) }
    dend_16 { pt3dadd( 18.8376, -106.129, -9.48428, 0.55 ) }
    dend_16 { pt3dadd( 19.3145, -109.032, -8.94077, 0.28 ) }
    dend_16 { pt3dadd( 19.5087, -110.339, -8.77644, 0.55 ) }
    dend_16 { pt3dadd( 19.848, -112.6, -8.63569, 0.28 ) }
    dend_16 { pt3dadd( 20.0905, -114.204, -8.69596, 0.28 ) }
    dend_16 { pt3dadd( 20.3925, -116.145, -8.84502, 0.55 ) }
    dend_16 { pt3dadd( 20.9875, -119.805, -9.25375, 0.28 ) }
    dend_16 { pt3dadd( 21.6571, -123.603, -9.79743, 0.28 ) }
    dend_16 { pt3dadd( 22.025, -125.514, -10.1139, 0.83 ) }
    dend_16 { pt3dadd( 22.4596, -127.606, -10.4797, 0.28 ) }
    dend_16 { pt3dadd( 22.8164, -129.328, -10.7466, 0.55 ) }
    dend_16 { pt3dadd( 23.2491, -131.367, -10.9719, 0.28 ) }
    dend_16 { pt3dadd( 23.4379, -132.394, -11.0548, 0.55 ) }
    dend_16 { pt3dadd( 23.7363, -136.129, -11.4225, 0.28 ) }
    dend_16 { pt3dadd( 23.7772, -137.422, -11.559, 0.55 ) }
    dend_16 { pt3dadd( 23.659, -139.504, -11.8585, 0.28 ) }
    dend_16 { pt3dadd( 23.4835, -140.95, -12.137, 0.55 ) }
    dend_16 { pt3dadd( 22.93, -143.958, -12.7319, 0.55 ) }
    dend_16 { pt3dadd( 22.3374, -146.757, -13.2739, 0.55 ) }
    dend_16 { pt3dadd( 21.7638, -149.254, -13.6716, 0.55 ) }
    dend_16 { pt3dadd( 21.0074, -152.753, -14.2828, 0.28 ) }
    dend_16 { pt3dadd( 20.8714, -153.452, -14.4537, 0.55 ) }
    dend_16 { pt3dadd( 20.6196, -154.755, -14.7952, 0.28 ) }
    dend_16 { pt3dadd( 20.5538, -155.184, -14.9004, 0.55 ) }
    dend_16 { pt3dadd( 20.3852, -156.355, -15.2747, 0.28 ) }
    dend_16 { pt3dadd( 20.2585, -157.593, -15.716, 0.55 ) }
    dend_16 { pt3dadd( 19.9454, -161.169, -17.1332, 0.28 ) }
    dend_16 { pt3dadd( 19.8568, -162.109, -17.5381, 0.55 ) }
    dend_16 { pt3dadd( 19.6363, -165.202, -18.803, 0.55 ) }
    dend_16 { pt3dadd( 19.3337, -168.609, -20.1381, 0.28 ) }
    dend_16 { pt3dadd( 19.2521, -169.514, -20.4747, 0.55 ) }
    dend_16 { pt3dadd( 19.2681, -172.473, -20.9137, 0.28 ) }
    dend_16 { pt3dadd( 19.4439, -173.776, -20.8468, 0.55 ) }
    dend_16 { pt3dadd( 19.9904, -176.521, -20.4372, 0.28 ) }
    dend_16 { pt3dadd( 20.4853, -178.217, -19.9683, 0.55 ) }
    dend_16 { pt3dadd( 21.0088, -179.664, -19.4498, 0.55 ) }
    dend_16 { pt3dadd( 24.3302, -187.436, -16.3951, 0.28 ) }
    dend_16 { pt3dadd( 25.2594, -189.228, -15.5912, 0.28 ) }
    dend_16 { pt3dadd( 25.7035, -190.072, -15.2627, 0.55 ) }
    dend_16 { pt3dadd( 27.0549, -192.553, -14.4958, 0.28 ) }
    dend_16 { pt3dadd( 27.3614, -193.1, -14.3541, 0.55 ) }
    dend_16 { pt3dadd( 28.7947, -195.76, -13.8848, 0.28 ) }
    dend_16 { pt3dadd( 29.5587, -197.462, -13.9769, 0.55 ) }
    dend_16 { pt3dadd( 31.1909, -201.822, -14.3938, 0.28 ) }
    dend_16 { pt3dadd( 31.6066, -203.188, -14.6247, 0.55 ) }
    dend_16 { pt3dadd( 31.8963, -204.539, -14.9768, 0.28 ) }
    dend_16 { pt3dadd( 32.0396, -205.433, -15.2495, 0.55 ) }
    dend_16 { pt3dadd( 32.2779, -208.026, -16.171, 0.28 ) }
    dend_16 { pt3dadd( 32.3307, -208.981, -16.5224, 0.55 ) }
    dend_16 { pt3dadd( 32.5235, -211.578, -17.3497, 0.55 ) }
    dend_16 { pt3dadd( 32.6339, -213.474, -18.0111, 0.28 ) }
    dend_16 { pt3dadd( 32.6959, -214.177, -18.2942, 0.55 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 66/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 3.01573, -54.7099, -15.4128, 0.55 ) }
    dend_3 { pt3dadd( 2.98383, -55.9872, -16.7384, 0.55 ) }
    dend_3 { pt3dadd( 2.93862, -57.7973, -18.6171, 0.55 ) }
    // Section: dend_15, id: dend_15, parent: dend_3 (entry count 69/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 2.93862, -57.7973, -18.6171, 0.55 ) }
    dend_15 { pt3dadd( 6.71466, -56.6296, -19.4351, 0.55 ) }
    dend_15 { pt3dadd( 9.22503, -55.7409, -19.903, 0.28 ) }
    dend_15 { pt3dadd( 10.214, -55.4005, -20.118, 0.55 ) }
    dend_15 { pt3dadd( 12.8948, -54.4213, -20.6772, 0.55 ) }
    dend_15 { pt3dadd( 14.8755, -53.7643, -21.0783, 0.28 ) }
    dend_15 { pt3dadd( 16.265, -53.3225, -21.4375, 0.28 ) }
    dend_15 { pt3dadd( 18.5919, -52.6242, -22.2242, 0.55 ) }
    dend_15 { pt3dadd( 21.4119, -51.8165, -23.338, 0.28 ) }
    dend_15 { pt3dadd( 24.0288, -51.1263, -24.603, 0.28 ) }
    dend_15 { pt3dadd( 26.2059, -50.5404, -25.8013, 0.28 ) }
    dend_15 { pt3dadd( 29.4249, -49.6478, -27.8869, 0.55 ) }
    dend_15 { pt3dadd( 31.833, -48.953, -29.6531, 0.28 ) }
    dend_15 { pt3dadd( 34.5738, -48.1256, -31.9149, 0.28 ) }
    dend_15 { pt3dadd( 36.7648, -47.4023, -33.8773, 0.55 ) }
    dend_15 { pt3dadd( 38.8399, -46.7071, -36.0059, 0.55 ) }
    dend_15 { pt3dadd( 41.5638, -45.71, -39.0391, 0.28 ) }
    dend_15 { pt3dadd( 42.1532, -45.5339, -39.6962, 0.55 ) }
    dend_15 { pt3dadd( 43.6458, -45.267, -41.4186, 0.28 ) }
    dend_15 { pt3dadd( 44.3975, -45.2155, -42.2364, 0.28 ) }
    dend_15 { pt3dadd( 46.2817, -45.1963, -44.1343, 0.55 ) }
    dend_15 { pt3dadd( 48.143, -45.2563, -45.807, 0.28 ) }
    dend_15 { pt3dadd( 49.9571, -45.2641, -47.156, 0.83 ) }
    dend_15 { pt3dadd( 52.6244, -45.29, -48.8094, 0.55 ) }
    dend_15 { pt3dadd( 56.0449, -45.2189, -50.5789, 0.28 ) }
    dend_15 { pt3dadd( 57.3316, -45.1341, -51.1759, 0.55 ) }
    dend_15 { pt3dadd( 60.0662, -44.8565, -51.9463, 0.28 ) }
    dend_15 { pt3dadd( 61.3149, -44.6832, -52.149, 0.83 ) }
    dend_15 { pt3dadd( 65.0538, -43.9656, -52.4478, 0.55 ) }
    dend_15 { pt3dadd( 67.2658, -43.4463, -52.4317, 0.55 ) }
    dend_15 { pt3dadd( 69.1685, -42.9624, -52.3241, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_15 { pt3dadd( 74.763, -41.379, -51.8215, 0.28 ) }
    dend_15 { pt3dadd( 75.8353, -41.078, -51.7391, 0.28 ) }
    dend_15 { pt3dadd( 78.2983, -40.3221, -51.5134, 0.83 ) }
    dend_15 { pt3dadd( 81.5964, -39.0888, -51.153, 0.28 ) }
    dend_15 { pt3dadd( 82.632, -38.698, -51.0464, 0.55 ) }
    dend_15 { pt3dadd( 84.2715, -38.0497, -50.9806, 0.55 ) }
    dend_15 { pt3dadd( 88.7769, -36.1141, -51.774, 0.55 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 7/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 2.93862, -57.7973, -18.6171, 0.55 ) }
    dend_4 { pt3dadd( 1.6294, -61.8327, -22.4834, 0.55 ) }
    // Section: dend_14, id: dend_14, parent: dend_4 (entry count 9/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 1.6294, -61.8327, -22.4834, 0.55 ) }
    dend_14 { pt3dadd( 0.498757, -62.7469, -22.9072, 0.55 ) }
    dend_14 { pt3dadd( 0.0108225, -63.0814, -23.0596, 0.55 ) }
    dend_14 { pt3dadd( -2.97229, -65.1512, -23.5113, 0.28 ) }
    dend_14 { pt3dadd( -5.67547, -67.1939, -23.4829, 0.55 ) }
    dend_14 { pt3dadd( -6.77408, -68.1369, -23.3129, 0.28 ) }
    dend_14 { pt3dadd( -8.08104, -69.3086, -23.0113, 0.28 ) }
    dend_14 { pt3dadd( -9.71697, -70.8309, -22.4215, 0.83 ) }
    dend_14 { pt3dadd( -12.256, -72.8046, -21.4691, 0.28 ) }
    dend_14 { pt3dadd( -13.5945, -73.7151, -20.8648, 0.55 ) }
    dend_14 { pt3dadd( -14.8013, -74.5061, -20.3061, 0.55 ) }
    dend_14 { pt3dadd( -17.1258, -75.759, -19.5517, 0.28 ) }
    dend_14 { pt3dadd( -18.7729, -76.5191, -19.123, 0.83 ) }
    dend_14 { pt3dadd( -22.9161, -77.9543, -18.0922, 0.28 ) }
    dend_14 { pt3dadd( -23.8447, -78.2033, -17.9007, 0.28 ) }
    dend_14 { pt3dadd( -25.299, -78.512, -17.5483, 0.83 ) }
    dend_14 { pt3dadd( -28.7128, -79.1173, -16.4733, 0.28 ) }
    dend_14 { pt3dadd( -29.7283, -79.288, -16.05, 1.11 ) }
    dend_14 { pt3dadd( -32.4178, -79.8252, -15.0222, 0.55 ) }
    dend_14 { pt3dadd( -33.5939, -80.103, -14.5319, 0.55 ) }
    dend_14 { pt3dadd( -35.2977, -80.5197, -13.9658, 0.55 ) }
    dend_14 { pt3dadd( -37.3306, -81.0544, -13.4195, 0.28 ) }
    dend_14 { pt3dadd( -37.8981, -81.2272, -13.2735, 0.83 ) }
    dend_14 { pt3dadd( -43.0728, -82.8435, -12.1941, 0.28 ) }
    dend_14 { pt3dadd( -44.805, -83.3492, -11.8029, 0.28 ) }
    dend_14 { pt3dadd( -47.4661, -84.0352, -11.1055, 0.83 ) }
    dend_14 { pt3dadd( -50.4995, -84.7279, -10.2168, 0.28 ) }
    dend_14 { pt3dadd( -52.5045, -85.1548, -9.4994, 0.28 ) }
    dend_14 { pt3dadd( -54.087, -85.452, -8.75532, 0.83 ) }
    dend_14 { pt3dadd( -57.1488, -85.9193, -6.84202, 0.28 ) }
    dend_14 { pt3dadd( -57.9774, -86.0165, -6.31454, 0.83 ) }
    dend_14 { pt3dadd( -60.3118, -86.2676, -4.69491, 0.28 ) }
    dend_14 { pt3dadd( -61.4345, -86.3349, -3.9426, 0.83 ) }
    dend_14 { pt3dadd( -63.1404, -86.3678, -2.99525, 0.28 ) }
    dend_14 { pt3dadd( -64.3831, -86.3181, -2.42689, 0.55 ) }
    dend_14 { pt3dadd( -66.9772, -86.174, -1.57232, 0.28 ) }
    dend_14 { pt3dadd( -67.8118, -86.0849, -1.33828, 0.83 ) }
    dend_14 { pt3dadd( -69.6169, -85.8191, -0.881834, 0.28 ) }
    dend_14 { pt3dadd( -72.5226, -85.314, -0.19628, 0.83 ) }
    dend_14 { pt3dadd( -74.9521, -84.8954, 0.251495, 0.28 ) }
    dend_14 { pt3dadd( -75.8368, -84.7323, 0.439734, 0.55 ) }
    dend_14 { pt3dadd( -77.6827, -84.3943, 0.768592, 0.28 ) }
    dend_14 { pt3dadd( -78.3477, -84.2731, 0.880176, 0.83 ) }
    dend_14 { pt3dadd( -80.214, -83.9408, 1.2672, 0.28 ) }
    dend_14 { pt3dadd( -83.3413, -83.3093, 1.98101, 0.28 ) }
    dend_14 { pt3dadd( -85.5652, -82.7505, 2.51908, 1.11 ) }
    dend_14 { pt3dadd( -88.6641, -81.7835, 3.34286, 0.28 ) }
    dend_14 { pt3dadd( -89.6624, -81.4035, 3.61887, 0.55 ) }
    dend_14 { pt3dadd( -91.3912, -80.5858, 4.0989, 0.28 ) }
    dend_14 { pt3dadd( -92.5135, -79.9652, 4.3681, 0.55 ) }
    dend_14 { pt3dadd( -94.1257, -78.9376, 4.79739, 0.28 ) }
    dend_14 { pt3dadd( -94.3846, -78.7729, 4.84596, 0.55 ) }
    dend_14 { pt3dadd( -95.6288, -77.8843, 5.16548, 0.28 ) }
    dend_14 { pt3dadd( -95.6288, -77.8843, 5.16548, 0.55 ) }
    dend_14 { pt3dadd( -98.086, -76.5149, 5.29481, 0.28 ) }
    dend_14 { pt3dadd( -98.3745, -76.3652, 5.32363, 0.83 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 65/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 1.6294, -61.8327, -22.4834, 0.83 ) }
    dend_5 { pt3dadd( 3.06896, -63.2231, -22.7614, 0.83 ) }
    dend_5 { pt3dadd( 4.88062, -64.9728, -23.1113, 0.55 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 68/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 4.88062, -64.9728, -23.1113, 0.55 ) }
    dend_7 { pt3dadd( 4.81275, -66.9218, -24.896, 0.55 ) }
    dend_7 { pt3dadd( 4.30119, -67.9161, -26.0147, 0.55 ) }
    dend_7 { pt3dadd( 3.18477, -69.8875, -28.1639, 0.55 ) }
    dend_7 { pt3dadd( 2.2614, -71.6997, -30.1684, 0.55 ) }
    dend_7 { pt3dadd( 1.59113, -73.0152, -31.6236, 0.83 ) }
    dend_7 { pt3dadd( 0.871663, -74.4272, -33.1855, 0.55 ) }
    dend_7 { pt3dadd( -2.19325, -79.3044, -38.988, 0.55 ) }
    dend_7 { pt3dadd( -2.74176, -80.1306, -40.0804, 0.55 ) }
    dend_7 { pt3dadd( -3.48729, -81.2789, -41.6597, 0.55 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 78/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 4.88062, -64.9728, -23.1113, 0.55 ) }
    dend_6 { pt3dadd( 6.42098, -68.6202, -22.7352, 0.55 ) }
    dend_6 { pt3dadd( 7.40634, -71.1257, -22.4998, 0.55 ) }
    dend_6 { pt3dadd( 8.85988, -74.9806, -22.3021, 0.55 ) }
    dend_6 { pt3dadd( 9.76644, -77.5198, -22.1994, 0.55 ) }
    dend_6 { pt3dadd( 11.7615, -83.2423, -22.0615, 0.55 ) }
    dend_6 { pt3dadd( 12.3732, -84.9958, -22.046, 0.28 ) }
    dend_6 { pt3dadd( 13.5592, -88.5199, -22.1341, 0.55 ) }
    dend_6 { pt3dadd( 14.4301, -91.4042, -22.2839, 0.28 ) }
    dend_6 { pt3dadd( 15.0414, -93.7163, -22.4846, 0.55 ) }
    dend_6 { pt3dadd( 15.955, -97.5967, -22.9949, 0.55 ) }
    dend_6 { pt3dadd( 16.0841, -98.3097, -23.1142, 0.55 ) }
    dend_6 { pt3dadd( 16.4154, -100.652, -23.4776, 0.55 ) }
    dend_6 { pt3dadd( 17.0775, -104.254, -23.9053, 0.55 ) }
    dend_6 { pt3dadd( 17.6452, -106.844, -24.0469, 0.55 ) }
    dend_6 { pt3dadd( 18.3659, -109.427, -24.1074, 0.28 ) }
    dend_6 { pt3dadd( 19.26, -112.15, -23.9826, 0.55 ) }
    dend_6 { pt3dadd( 20.1841, -114.777, -23.7405, 0.55 ) }
    dend_6 { pt3dadd( 22.2411, -120.259, -22.9876, 0.55 ) }
    dend_6 { pt3dadd( 22.6321, -121.219, -22.821, 0.55 ) }
    dend_6 { pt3dadd( 24.5221, -125.791, -22.0069, 0.55 ) }
    dend_6 { pt3dadd( 26.4669, -130.333, -21.2589, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_6 { pt3dadd( 27.3681, -132.415, -20.9999, 0.83 ) }
    dend_6 { pt3dadd( 28.3329, -134.923, -20.7929, 0.55 ) }
    dend_6 { pt3dadd( 28.9278, -137.073, -20.7321, 0.55 ) }
    dend_6 { pt3dadd( 29.5462, -139.429, -20.6911, 0.55 ) }
    dend_6 { pt3dadd( 30.0455, -141.393, -20.7071, 0.55 ) }
    dend_6 { pt3dadd( 30.6478, -143.68, -20.8515, 0.83 ) }
    dend_6 { pt3dadd( 31.2947, -146.022, -21.0132, 0.55 ) }
    dend_6 { pt3dadd( 32.0993, -148.976, -21.2011, 0.28 ) }
    dend_6 { pt3dadd( 32.5, -150.546, -21.2443, 0.55 ) }
    dend_6 { pt3dadd( 33.151, -152.892, -21.3099, 0.55 ) }
    dend_6 { pt3dadd( 33.5195, -154.181, -21.3213, 0.55 ) }
    dend_6 { pt3dadd( 34.0964, -156.272, -21.3772, 0.55 ) }
    dend_6 { pt3dadd( 34.6456, -158.246, -21.4317, 0.55 ) }
    dend_6 { pt3dadd( 35.2377, -160.595, -21.5317, 0.55 ) }
    dend_6 { pt3dadd( 35.6428, -162.674, -21.6462, 0.55 ) }
    dend_6 { pt3dadd( 35.9995, -164.887, -21.7825, 0.55 ) }
    dend_6 { pt3dadd( 36.5673, -168.324, -22.1225, 0.83 ) }
    dend_6 { pt3dadd( 36.8728, -170.093, -22.3777, 0.83 ) }
    dend_6 { pt3dadd( 37.3252, -172.788, -22.7931, 0.55 ) }
    dend_6 { pt3dadd( 37.7207, -175.069, -23.1484, 0.83 ) }
    dend_6 { pt3dadd( 37.9614, -177.142, -23.4663, 0.55 ) }
    dend_6 { pt3dadd( 38.2605, -179.938, -23.9334, 0.28 ) }
    dend_6 { pt3dadd( 38.3263, -180.677, -24.0304, 0.55 ) }
    dend_6 { pt3dadd( 38.4072, -181.72, -24.1602, 0.55 ) }
    dend_6 { pt3dadd( 38.5743, -184.068, -24.3304, 0.55 ) }
    dend_6 { pt3dadd( 38.787, -188.877, -24.4948, 0.55 ) }
    dend_6 { pt3dadd( 39.0091, -191.221, -24.3936, 0.83 ) }
    dend_6 { pt3dadd( 39.3274, -192.985, -24.2532, 0.55 ) }
    dend_6 { pt3dadd( 39.8689, -195.016, -24.0613, 0.55 ) }
    dend_6 { pt3dadd( 40.9351, -197.96, -23.7494, 0.55 ) }
    dend_6 { pt3dadd( 41.7441, -199.553, -23.4818, 0.83 ) }
    dend_6 { pt3dadd( 43.9024, -203.163, -22.6576, 0.83 ) }
    dend_6 { pt3dadd( 46.3475, -206.836, -21.3894, 0.28 ) }
    dend_6 { pt3dadd( 47.3837, -208.148, -20.734, 1.11 ) }
    dend_6 { pt3dadd( 48.3961, -209.345, -19.888, 0.28 ) }
    dend_6 { pt3dadd( 50.0559, -211.17, -18.2485, 0.55 ) }
    dend_6 { pt3dadd( 51.6923, -212.815, -16.4822, 0.55 ) }
    dend_6 { pt3dadd( 54.8726, -215.605, -12.5739, 0.83 ) }
    dend_6 { pt3dadd( 57.2521, -217.407, -9.27182, 0.55 ) }
    dend_6 { pt3dadd( 58.4441, -218.246, -7.43624, 0.55 ) }
    dend_6 { pt3dadd( 59.545, -219.001, -5.45492, 0.55 ) }
    dend_6 { pt3dadd( 61.3299, -220.173, -1.96878, 0.83 ) }
    dend_6 { pt3dadd( 63.2409, -221.33, 1.55133, 0.55 ) }
    dend_6 { pt3dadd( 64.145, -221.995, 3.34428, 0.55 ) }
    dend_6 { pt3dadd( 65.7586, -223.309, 6.69819, 0.55 ) }
    dend_6 { pt3dadd( 67.3762, -224.784, 10.117, 0.55 ) }
    dend_6 { pt3dadd( 68.715, -226.044, 13.319, 0.55 ) }
    dend_6 { pt3dadd( 69.766, -227.181, 16.3026, 0.55 ) }
    dend_6 { pt3dadd( 70.5194, -228.154, 18.6127, 0.28 ) }
    dend_6 { pt3dadd( 71.5313, -229.485, 21.6203, 0.55 ) }
    dend_6 { pt3dadd( 72.199, -230.737, 24.263, 0.55 ) }
    dend_6 { pt3dadd( 73.065, -232.917, 28.7009, 0.55 ) }
    dend_6 { pt3dadd( 73.2249, -233.637, 30.2234, 0.55 ) }
    dend_6 { pt3dadd( 73.3971, -235.06, 33.2278, 0.55 ) }
    dend_6 { pt3dadd( 73.4527, -236.035, 35.1232, 0.55 ) }
    dend_6 { pt3dadd( 73.5142, -238.678, 40.1981, 0.55 ) }
    dend_6 { pt3dadd( 73.4926, -240.257, 43.4211, 0.55 ) }
    dend_6 { pt3dadd( 73.4882, -241.259, 45.5409, 0.55 ) }
    dend_6 { pt3dadd( 73.5568, -242.061, 47.5171, 0.55 ) }
    dend_6 { pt3dadd( 73.7227, -242.949, 50.1136, 0.55 ) }
    dend_6 { pt3dadd( 74.3002, -244.298, 54.9561, 0.55 ) }
    dend_6 { pt3dadd( 74.6254, -244.824, 56.8804, 0.55 ) }
    dend_6 { pt3dadd( 75.3939, -245.418, 60.1054, 0.55 ) }
    dend_6 { pt3dadd( 76.1149, -245.76, 62.2678, 0.55 ) }
    dend_6 { pt3dadd( 76.6287, -245.977, 63.6589, 0.55 ) }
    dend_6 { pt3dadd( 78.2942, -246.921, 68.3561, 0.55 ) }
    dend_6 { pt3dadd( 79.0051, -247.756, 71.1231, 0.55 ) }
    dend_6 { pt3dadd( 80.8955, -250.115, 78.547, 0.55 ) }
    dend_6 { pt3dadd( 81.4703, -250.89, 81.2262, 0.55 ) }
    dend_6 { pt3dadd( 81.8992, -251.45, 83.6183, 0.55 ) }
    dend_6 { pt3dadd( 82.3278, -252.147, 86.8461, 0.55 ) }
    dend_6 { pt3dadd( 82.2745, -253.402, 91.1979, 0.28 ) }
    dend_6 { pt3dadd( 85.4035, -263.785, 96.4606, 0.28 ) }
    // Section: dend_11, id: dend_11, parent: dend_7 (entry count 73/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( -3.48729, -81.2789, -41.6597, 0.55 ) }
    dend_11 { pt3dadd( -5.63382, -80.6931, -41.8085, 0.55 ) }
    dend_11 { pt3dadd( -8.57992, -80.2071, -41.3501, 0.28 ) }
    dend_11 { pt3dadd( -9.226, -80.1058, -41.3016, 0.55 ) }
    dend_11 { pt3dadd( -10.3892, -79.9315, -41.2059, 0.55 ) }
    dend_11 { pt3dadd( -12.5073, -79.5096, -41.078, 0.28 ) }
    dend_11 { pt3dadd( -13.6557, -79.2888, -41.0715, 0.28 ) }
    dend_11 { pt3dadd( -16.3892, -78.8871, -41.1799, 0.55 ) }
    dend_11 { pt3dadd( -19.8591, -78.4, -41.3541, 0.28 ) }
    dend_11 { pt3dadd( -20.7881, -78.2779, -41.4257, 0.83 ) }
    dend_11 { pt3dadd( -24.7458, -77.7096, -41.7981, 0.55 ) }
    dend_11 { pt3dadd( -28.9805, -77.0127, -42.3365, 0.83 ) }
    dend_11 { pt3dadd( -32.9082, -76.2695, -42.8631, 0.28 ) }
    dend_11 { pt3dadd( -32.9082, -76.2695, -42.8631, 0.55 ) }
    dend_11 { pt3dadd( -36.4455, -75.3342, -43.152, 0.28 ) }
    dend_11 { pt3dadd( -37.1668, -75.1048, -43.1972, 0.83 ) }
    dend_11 { pt3dadd( -40.1861, -73.8421, -43.3386, 0.55 ) }
    dend_11 { pt3dadd( -42.6745, -72.48, -43.2993, 0.55 ) }
    dend_11 { pt3dadd( -44.4641, -71.4744, -43.2512, 0.55 ) }
    dend_11 { pt3dadd( -47.3243, -69.9122, -43.2287, 0.83 ) }
    dend_11 { pt3dadd( -48.3785, -69.2945, -43.2004, 0.83 ) }
    dend_11 { pt3dadd( -51.5471, -67.5063, -43.1705, 0.55 ) }
    dend_11 { pt3dadd( -53.4632, -66.468, -43.148, 0.55 ) }
    dend_11 { pt3dadd( -57.1788, -65.0149, -43.3816, 1.11 ) }
    dend_11 { pt3dadd( -60.6877, -64.0104, -43.6786, 0.55 ) }
    dend_11 { pt3dadd( -62.9076, -63.4907, -43.8473, 0.83 ) }
    dend_11 { pt3dadd( -67.0258, -62.7246, -44.1397, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_11 { pt3dadd( -69.1366, -62.3692, -44.2778, 0.83 ) }
    dend_11 { pt3dadd( -76.0438, -61.2723, -44.7715, 0.28 ) }
    dend_11 { pt3dadd( -77.8331, -60.98, -44.8433, 0.55 ) }
    dend_11 { pt3dadd( -80.0989, -60.6101, -44.924, 0.55 ) }
    dend_11 { pt3dadd( -83.3031, -59.9605, -45.1671, 1.11 ) }
    dend_11 { pt3dadd( -86.754, -59.0044, -45.4087, 0.55 ) }
    dend_11 { pt3dadd( -88.1434, -58.4737, -45.5109, 0.55 ) }
    dend_11 { pt3dadd( -90.1509, -57.4902, -45.709, 0.55 ) }
    dend_11 { pt3dadd( -93.0733, -55.9748, -46.1011, 0.83 ) }
    dend_11 { pt3dadd( -98.3085, -53.3108, -47.0438, 0.28 ) }
    dend_11 { pt3dadd( -99.7089, -52.6044, -47.3108, 0.83 ) }
    dend_11 { pt3dadd( -103.397, -50.6832, -48.1059, 0.28 ) }
    dend_11 { pt3dadd( -105.819, -49.3893, -48.6872, 0.55 ) }
    dend_11 { pt3dadd( -107.386, -48.577, -49.0621, 0.55 ) }
    dend_11 { pt3dadd( -110.826, -46.6627, -49.7649, 0.83 ) }
    dend_11 { pt3dadd( -112.809, -45.4268, -50.0188, 0.55 ) }
    dend_11 { pt3dadd( -114.898, -44.0543, -50.2866, 0.55 ) }
    dend_11 { pt3dadd( -115.776, -43.4096, -50.3723, 0.55 ) }
    dend_11 { pt3dadd( -117.329, -42.2542, -50.5451, 0.83 ) }
    dend_11 { pt3dadd( -119.274, -40.861, -50.8009, 0.83 ) }
    dend_11 { pt3dadd( -121.72, -39.2131, -51.1407, 0.55 ) }
    dend_11 { pt3dadd( -124.891, -37.2578, -51.6245, 0.83 ) }
    dend_11 { pt3dadd( -126.251, -36.4388, -51.7876, 0.83 ) }
    dend_11 { pt3dadd( -130.754, -33.8074, -52.3573, 0.55 ) }
    dend_11 { pt3dadd( -131.564, -33.3526, -52.4708, 0.83 ) }
    dend_11 { pt3dadd( -133.764, -32.2312, -52.7445, 0.28 ) }
    dend_11 { pt3dadd( -135.672, -31.278, -52.9589, 0.55 ) }
    dend_11 { pt3dadd( -138.111, -29.9502, -53.0349, 0.28 ) }
    dend_11 { pt3dadd( -140.112, -28.9307, -53.1332, 0.83 ) }
    dend_11 { pt3dadd( -141.039, -28.4128, -53.1303, 0.28 ) }
    dend_11 { pt3dadd( -142.535, -27.5724, -53.1851, 0.55 ) }
    dend_11 { pt3dadd( -145.897, -25.7825, -53.4012, 0.28 ) }
    dend_11 { pt3dadd( -147.082, -25.2094, -53.5157, 0.28 ) }
    dend_11 { pt3dadd( -152.273, -22.9016, -54.1462, 0.83 ) }
    dend_11 { pt3dadd( -154.369, -21.9328, -54.4553, 0.28 ) }
    dend_11 { pt3dadd( -156.057, -21.1373, -54.7448, 0.28 ) }
    dend_11 { pt3dadd( -157.53, -20.3941, -55.0332, 0.55 ) }
    dend_11 { pt3dadd( -158.357, -19.9376, -55.1485, 0.28 ) }
    dend_11 { pt3dadd( -159.326, -19.3611, -55.2222, 0.55 ) }
    dend_11 { pt3dadd( -161.611, -17.622, -55.2207, 0.28 ) }
    dend_11 { pt3dadd( -162.885, -16.575, -55.183, 0.55 ) }
    dend_11 { pt3dadd( -164.642, -14.9052, -54.9655, 0.28 ) }
    dend_11 { pt3dadd( -166.227, -13.2832, -54.5413, 0.55 ) }
    dend_11 { pt3dadd( -166.673, -12.8347, -54.3677, 0.55 ) }
    dend_11 { pt3dadd( -167.578, -11.933, -53.9384, 0.83 ) }
    dend_11 { pt3dadd( -168.976, -10.8398, -53.3718, 0.28 ) }
    dend_11 { pt3dadd( -169.885, -10.2623, -53.1242, 0.55 ) }
    dend_11 { pt3dadd( -171.827, -9.08588, -52.5423, 0.28 ) }
    dend_11 { pt3dadd( -172.345, -8.80399, -52.4598, 0.55 ) }
    dend_11 { pt3dadd( -175.179, -7.3163, -52.0243, 0.28 ) }
    dend_11 { pt3dadd( -178.063, -5.86479, -51.5866, 0.83 ) }
    dend_11 { pt3dadd( -180.922, -4.51367, -51.2708, 0.55 ) }
    dend_11 { pt3dadd( -183.13, -3.46327, -51.123, 0.55 ) }
    dend_11 { pt3dadd( -187.6, -1.40295, -51.2433, 0.55 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 54/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -3.48729, -81.2789, -41.6597, 0.55 ) }
    dend_8 { pt3dadd( -2.92657, -83.4124, -45.0816, 0.55 ) }
    dend_8 { pt3dadd( -2.75109, -84.4571, -47.0405, 0.55 ) }
    dend_8 { pt3dadd( -2.59763, -85.3971, -48.9799, 0.83 ) }
    dend_8 { pt3dadd( -2.40872, -86.5542, -51.3672, 0.55 ) }
    dend_8 { pt3dadd( -2.26313, -87.446, -53.207, 0.55 ) }
    dend_8 { pt3dadd( -2.09437, -88.4797, -55.3397, 0.55 ) }
    dend_8 { pt3dadd( -1.85549, -89.6526, -57.633, 0.55 ) }
    dend_8 { pt3dadd( -1.65675, -90.4548, -59.8111, 1.11 ) }
    // Section: dend_13, id: dend_13, parent: dend_11 (entry count 63/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -187.6, -1.40295, -51.2433, 0.28 ) }
    dend_13 { pt3dadd( -188.669, -0.0773011, -52.1452, 0.28 ) }
    dend_13 { pt3dadd( -189.426, 0.873544, -52.9028, 0.83 ) }
    dend_13 { pt3dadd( -190.064, 1.86155, -53.6529, 0.28 ) }
    dend_13 { pt3dadd( -190.467, 2.52683, -54.1377, 0.55 ) }
    dend_13 { pt3dadd( -191.572, 4.30412, -55.4673, 0.28 ) }
    dend_13 { pt3dadd( -192.141, 5.34771, -56.2659, 0.83 ) }
    dend_13 { pt3dadd( -192.86, 6.85096, -57.5349, 0.28 ) }
    dend_13 { pt3dadd( -193.455, 8.14393, -58.6467, 0.83 ) }
    dend_13 { pt3dadd( -194.358, 10.2693, -60.4075, 0.28 ) }
    dend_13 { pt3dadd( -194.837, 11.5135, -61.3977, 0.83 ) }
    dend_13 { pt3dadd( -195.666, 14.0306, -63.2661, 0.28 ) }
    dend_13 { pt3dadd( -195.8, 14.4081, -63.5734, 0.83 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 76/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -187.6, -1.40295, -51.2433, 0.55 ) }
    dend_12 { pt3dadd( -189.405, -1.57273, -47.4869, 0.55 ) }
    dend_12 { pt3dadd( -190.195, -1.64294, -46.0235, 0.28 ) }
    dend_12 { pt3dadd( -190.789, -1.69516, -44.9871, 0.55 ) }
    dend_12 { pt3dadd( -191.556, -1.74483, -43.686, 0.28 ) }
    dend_12 { pt3dadd( -192.213, -1.79548, -42.6365, 0.55 ) }
    dend_12 { pt3dadd( -192.753, -1.8386, -41.7802, 0.28 ) }
    dend_12 { pt3dadd( -193.344, -1.87579, -40.9811, 0.28 ) }
    dend_12 { pt3dadd( -193.454, -1.87004, -40.7931, 0.55 ) }
    dend_12 { pt3dadd( -194.225, -1.81462, -39.5657, 0.28 ) }
    dend_12 { pt3dadd( -194.585, -1.79917, -38.9214, 0.83 ) }
    dend_12 { pt3dadd( -195.434, -1.77802, -37.4017, 0.28 ) }
    dend_12 { pt3dadd( -196.139, -1.75374, -36.0964, 0.83 ) }
    dend_12 { pt3dadd( -196.871, -1.65801, -34.7048, 0.28 ) }
    dend_12 { pt3dadd( -198.103, -1.45863, -32.314, 0.83 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 91/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -1.65675, -90.4548, -59.8111, 0.28 ) }
    dend_10 { pt3dadd( -1.06581, -91.7247, -62.1492, 0.28 ) }
    dend_10 { pt3dadd( -0.808775, -92.2211, -63.0236, 0.55 ) }
    dend_10 { pt3dadd( -0.457672, -93.0761, -64.9448, 0.28 ) }
    dend_10 { pt3dadd( -0.344213, -93.7797, -66.5363, 0.28 ) }
    dend_10 { pt3dadd( -0.28426, -94.2462, -67.781, 0.55 ) }
    dend_10 { pt3dadd( -0.344449, -94.9581, -69.7318, 0.28 ) }
    dend_10 { pt3dadd( -0.435929, -95.4527, -71.1109, 0.55 ) }
    dend_10 { pt3dadd( -0.728786, -96.5204, -73.8157, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_10 { pt3dadd( -1.10379, -97.5638, -76.6692, 0.28 ) }
    dend_10 { pt3dadd( -1.35756, -98.3126, -78.7866, 0.83 ) }
    dend_10 { pt3dadd( -1.70856, -99.4153, -82.0503, 0.28 ) }
    dend_10 { pt3dadd( -1.75034, -99.7288, -83.0391, 0.55 ) }
    dend_10 { pt3dadd( -1.68917, -100.156, -84.225, 0.55 ) }
    dend_10 { pt3dadd( -1.34589, -101.011, -86.0789, 0.55 ) }
    dend_10 { pt3dadd( -0.829153, -101.84, -87.8711, 0.28 ) }
    dend_10 { pt3dadd( -0.574315, -102.174, -88.5717, 0.55 ) }
    dend_10 { pt3dadd( 0.0834245, -102.785, -89.9925, 1.11 ) }
    dend_10 { pt3dadd( 0.848963, -103.519, -91.7271, 0.55 ) }
    dend_10 { pt3dadd( 1.69136, -104.351, -93.65, 0.55 ) }
    dend_10 { pt3dadd( 2.21422, -105.026, -94.9885, 0.55 ) }
    dend_10 { pt3dadd( 2.51096, -105.893, -96.5768, 0.55 ) }
    dend_10 { pt3dadd( 2.57808, -106.765, -98.1175, 0.55 ) }
    dend_10 { pt3dadd( 2.36776, -108.17, -100.663, 0.55 ) }
    dend_10 { pt3dadd( 2.20744, -108.649, -101.613, 0.55 ) }
    dend_10 { pt3dadd( 1.49078, -109.977, -104.386, 1.11 ) }
    dend_10 { pt3dadd( -0.422276, -112.567, -109.641, 0.28 ) }
    dend_10 { pt3dadd( -0.624451, -112.798, -110.11, 0.55 ) }
    dend_10 { pt3dadd( -1.19931, -113.445, -111.362, 0.28 ) }
    dend_10 { pt3dadd( -1.76851, -114.11, -112.619, 0.83 ) }
    dend_10 { pt3dadd( -2.98433, -115.908, -115.95, 0.28 ) }
    dend_10 { pt3dadd( -3.19743, -116.491, -117.129, 0.55 ) }
    dend_10 { pt3dadd( -3.11675, -117.055, -118.43, 0.28 ) }
    dend_10 { pt3dadd( -2.71206, -118.225, -121.268, 0.55 ) }
    dend_10 { pt3dadd( -2.17648, -119.21, -123.697, 0.55 ) }
    dend_10 { pt3dadd( -1.68542, -119.929, -125.625, 0.28 ) }
    dend_10 { pt3dadd( -1.00359, -120.563, -127.675, 1.11 ) }
    dend_10 { pt3dadd( -0.402238, -121.131, -129.594, 0.55 ) }
    dend_10 { pt3dadd( 0.155257, -121.764, -132.051, 0.55 ) }
    dend_10 { pt3dadd( 0.318457, -121.987, -132.953, 0.83 ) }
    dend_10 { pt3dadd( 0.603867, -122.67, -135.012, 0.55 ) }
    dend_10 { pt3dadd( 0.769614, -123.86, -138.003, 0.83 ) }
    dend_10 { pt3dadd( 0.715954, -124.705, -139.694, 0.55 ) }
    dend_10 { pt3dadd( 0.602087, -125.816, -141.591, 0.55 ) }
    dend_10 { pt3dadd( 0.359748, -127.198, -143.754, 0.83 ) }
    dend_10 { pt3dadd( 0.0205105, -129.201, -146.736, 0.28 ) }
    dend_10 { pt3dadd( -0.20404, -130.485, -148.571, 0.55 ) }
    dend_10 { pt3dadd( -0.486206, -132.143, -150.871, 0.28 ) }
    dend_10 { pt3dadd( -0.703398, -133.696, -153.072, 0.83 ) }
    dend_10 { pt3dadd( -0.959961, -135.782, -156.34, 0.55 ) }
    dend_10 { pt3dadd( -1.17788, -136.8, -158.399, 0.55 ) }
    dend_10 { pt3dadd( -1.23098, -137.138, -159.308, 0.55 ) }
    dend_10 { pt3dadd( -1.31081, -137.447, -160.609, 0.83 ) }
    dend_10 { pt3dadd( -1.68407, -137.672, -164.112, 0.28 ) }
    dend_10 { pt3dadd( -2.03355, -137.513, -166.356, 0.83 ) }
    dend_10 { pt3dadd( -2.45721, -137.008, -168.998, 0.55 ) }
    dend_10 { pt3dadd( -2.64719, -136.79, -170.034, 0.83 ) }
    dend_10 { pt3dadd( -3.09296, -136.161, -172.644, 0.83 ) }
    dend_10 { pt3dadd( -3.3066, -135.807, -173.924, 0.28 ) }
    dend_10 { pt3dadd( -3.44128, -135.366, -175.212, 0.83 ) }
    dend_10 { pt3dadd( -3.62191, -134.576, -177.642, 0.28 ) }
    dend_10 { pt3dadd( -3.70179, -134.255, -178.721, 0.28 ) }
    dend_10 { pt3dadd( -3.73828, -134.091, -179.389, 0.83 ) }
    dend_10 { pt3dadd( -3.75585, -133.876, -181.118, 0.28 ) }
    dend_10 { pt3dadd( -3.72363, -133.853, -181.918, 0.55 ) }
    dend_10 { pt3dadd( -3.57823, -133.932, -183.249, 0.28 ) }
    dend_10 { pt3dadd( -3.30892, -134.023, -185.45, 0.83 ) }
    dend_10 { pt3dadd( -3.19593, -134.031, -186.861, 0.28 ) }
    dend_10 { pt3dadd( -3.22398, -134.009, -187.738, 0.28 ) }
    dend_10 { pt3dadd( -3.53101, -134.006, -189.211, 0.55 ) }
    dend_10 { pt3dadd( -4.12296, -133.981, -191.065, 0.28 ) }
    dend_10 { pt3dadd( -5.18169, -134.008, -193.641, 0.83 ) }
    dend_10 { pt3dadd( -6.28271, -134.01, -196.124, 0.28 ) }
    dend_10 { pt3dadd( -8.13977, -134.018, -199.773, 0.83 ) }
    dend_10 { pt3dadd( -10.5934, -133.924, -204.263, 0.28 ) }
    dend_10 { pt3dadd( -11.6443, -133.825, -206.01, 0.55 ) }
    dend_10 { pt3dadd( -13.4716, -133.633, -208.845, 0.28 ) }
    dend_10 { pt3dadd( -14.3327, -133.532, -210.206, 0.83 ) }
    dend_10 { pt3dadd( -16.0665, -133.109, -213.045, 0.28 ) }
    dend_10 { pt3dadd( -16.5055, -132.882, -213.939, 0.28 ) }
    dend_10 { pt3dadd( -17.0826, -132.006, -216.336, 0.55 ) }
    dend_10 { pt3dadd( -17.0454, -131.646, -217.303, 0.83 ) }
    dend_10 { pt3dadd( -16.5577, -131.1, -218.66, 0.83 ) }
    dend_10 { pt3dadd( -15.7068, -130.648, -220.064, 0.28 ) }
    dend_10 { pt3dadd( -14.2116, -130.171, -221.878, 0.55 ) }
    dend_10 { pt3dadd( -12.2651, -129.769, -223.967, 0.83 ) }
    dend_10 { pt3dadd( -10.6234, -129.555, -225.554, 0.28 ) }
    dend_10 { pt3dadd( -9.57507, -129.424, -226.542, 0.55 ) }
    dend_10 { pt3dadd( -8.55784, -129.341, -227.53, 0.28 ) }
    dend_10 { pt3dadd( -8.06863, -129.316, -228.069, 0.83 ) }
    dend_10 { pt3dadd( -7.34529, -129.216, -229.102, 0.28 ) }
    dend_10 { pt3dadd( -7.00353, -129.028, -229.751, 0.83 ) }
    dend_10 { pt3dadd( -6.42522, -128.394, -231.232, 0.28 ) }
    dend_10 { pt3dadd( -6.02833, -127.793, -232.397, 0.83 ) }
    dend_10 { pt3dadd( -5.60117, -126.858, -233.776, 0.28 ) }
    dend_10 { pt3dadd( -5.14836, -125.903, -235.016, 0.28 ) }
    dend_10 { pt3dadd( -4.39137, -124.584, -236.729, 0.83 ) }
    dend_10 { pt3dadd( -3.98229, -123.962, -237.504, 0.28 ) }
    dend_10 { pt3dadd( -3.45815, -123.261, -238.403, 0.28 ) }
    dend_10 { pt3dadd( -2.32812, -121.767, -240.187, 0.55 ) }
    dend_10 { pt3dadd( -1.62316, -120.886, -241.272, 0.55 ) }
    dend_10 { pt3dadd( -0.787757, -119.988, -242.607, 0.55 ) }
    dend_10 { pt3dadd( -0.254299, -119.534, -243.451, 0.55 ) }
    dend_10 { pt3dadd( 0.719052, -118.889, -244.867, 0.55 ) }
    dend_10 { pt3dadd( 1.8908, -118.192, -246.53, 0.28 ) }
    dend_10 { pt3dadd( 2.60708, -117.836, -247.522, 0.55 ) }
    dend_10 { pt3dadd( 4.09296, -117.084, -249.673, 0.55 ) }
    dend_10 { pt3dadd( 5.81461, -116.27, -252.053, 0.28 ) }
    dend_10 { pt3dadd( 6.26655, -116.119, -252.637, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 0/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -1.65675, -90.4548, -59.8111, 0.55 ) }
    dend_9 { pt3dadd( -3.43114, -88.8556, -64.4615, 0.55 ) }
    dend_9 { pt3dadd( -5.40639, -86.7946, -70.3027, 0.83 ) }
    dend_9 { pt3dadd( -6.68096, -85.1592, -74.4455, 0.55 ) }
    dend_9 { pt3dadd( -7.25931, -84.3452, -76.4206, 0.55 ) }
    dend_9 { pt3dadd( -7.76949, -83.6261, -78.0779, 0.83 ) }
    dend_9 { pt3dadd( -9.35596, -81.4991, -82.8484, 0.28 ) }
    dend_9 { pt3dadd( -10.7808, -79.7538, -86.4278, 0.83 ) }
    dend_9 { pt3dadd( -11.9591, -78.2108, -89.0674, 0.28 ) }
    dend_9 { pt3dadd( -12.2516, -77.9098, -89.5872, 0.55 ) }
    dend_9 { pt3dadd( -14.105, -76.7221, -92.3335, 0.28 ) }
    dend_9 { pt3dadd( -15.2898, -76.1805, -93.8773, 0.55 ) }
    dend_9 { pt3dadd( -17.576, -75.3764, -96.6553, 0.28 ) }
    dend_9 { pt3dadd( -19.4545, -74.8309, -98.8063, 0.55 ) }
    dend_9 { pt3dadd( -24.2665, -73.6754, -104.604, 0.55 ) }
    dend_9 { pt3dadd( -27.7712, -72.6938, -109.179, 0.28 ) }
    dend_9 { pt3dadd( -28.0042, -72.6088, -109.516, 0.55 ) }
    dend_9 { pt3dadd( -29.2991, -71.9573, -111.719, 0.55 ) }
    dend_9 { pt3dadd( -30.2124, -71.2454, -113.733, 0.28 ) }
    dend_9 { pt3dadd( -30.8183, -70.3958, -115.511, 0.28 ) }
    dend_9 { pt3dadd( -31.231, -68.4779, -118.209, 0.55 ) }
    dend_9 { pt3dadd( -31.5022, -65.9247, -121.165, 0.28 ) }
    dend_9 { pt3dadd( -31.595, -64.49, -122.835, 0.55 ) }
    dend_9 { pt3dadd( -31.6573, -62.4478, -125.16, 0.28 ) }
    dend_9 { pt3dadd( -31.6619, -61.8331, -125.854, 0.83 ) }
    dend_9 { pt3dadd( -31.6386, -60.1935, -127.553, 0.55 ) }
    dend_9 { pt3dadd( -31.5511, -58.9767, -128.758, 0.83 ) }
    dend_9 { pt3dadd( -31.4043, -57.0896, -130.358, 0.55 ) }
    dend_9 { pt3dadd( -31.3467, -54.6701, -132.079, 0.28 ) }
    dend_9 { pt3dadd( -31.35, -52.9018, -133.16, 0.83 ) }
    dend_9 { pt3dadd( -31.5301, -51.2281, -134.14, 0.28 ) }
    dend_9 { pt3dadd( -31.8584, -49.4122, -135.093, 0.55 ) }
    dend_9 { pt3dadd( -32.6661, -46.2085, -136.646, 0.28 ) }
    dend_9 { pt3dadd( -33.1541, -44.5883, -137.369, 0.28 ) }
    dend_9 { pt3dadd( -33.4987, -43.4864, -137.856, 0.55 ) }
    dend_9 { pt3dadd( -34.9375, -39.1614, -139.868, 0.28 ) }
    dend_9 { pt3dadd( -35.81, -37.0047, -141.075, 0.83 ) }
    dend_9 { pt3dadd( -36.9482, -34.3048, -142.748, 0.28 ) }
    dend_9 { pt3dadd( -37.4653, -33.326, -143.476, 0.83 ) }
    dend_9 { pt3dadd( -38.8659, -30.8586, -145.543, 0.28 ) }
    dend_9 { pt3dadd( -39.6876, -29.4413, -146.857, 0.83 ) }
    dend_9 { pt3dadd( -42.2612, -25.5686, -150.807, 0.28 ) }
    dend_9 { pt3dadd( -43.2892, -24.2397, -152.246, 0.83 ) }
    dend_9 { pt3dadd( -46.5652, -20.6619, -156.467, 0.28 ) }
    dend_9 { pt3dadd( -48.5989, -18.6843, -159.018, 0.28 ) }
    dend_9 { pt3dadd( -49.2444, -18.0852, -159.828, 0.55 ) }
    dend_9 { pt3dadd( -52.3029, -14.9243, -163.626, 0.28 ) }
    dend_9 { pt3dadd( -53.135, -13.9401, -164.617, 0.55 ) }
    dend_9 { pt3dadd( -55.7262, -10.4301, -167.699, 0.28 ) }
    dend_9 { pt3dadd( -57.2346, -7.8851, -169.632, 0.83 ) }
    dend_9 { pt3dadd( -58.3647, -5.54321, -171.174, 0.28 ) }
    dend_9 { pt3dadd( -60.008, -0.938593, -173.669, 0.55 ) }
    dend_9 { pt3dadd( -60.7951, 2.54187, -175.27, 0.28 ) }
    dend_9 { pt3dadd( -61.3341, 6.07769, -176.59, 0.55 ) }
    dend_9 { pt3dadd( -61.4924, 7.8563, -177.062, 0.55 ) }
    dend_9 { pt3dadd( -61.8724, 12.3198, -178.21, 0.55 ) }
    dend_9 { pt3dadd( -62.1898, 15.09, -179.063, 0.28 ) }
    dend_9 { pt3dadd( -62.6788, 17.5589, -180.186, 0.55 ) }
    dend_9 { pt3dadd( -63.8078, 21.8774, -182.281, 0.55 ) }
    dend_9 { pt3dadd( -64.3244, 23.2633, -182.989, 0.55 ) }
    dend_9 { pt3dadd( -66.6093, 28.2611, -185.837, 0.28 ) }
    dend_9 { pt3dadd( -67.8319, 30.5293, -187.316, 0.83 ) }
    dend_9 { pt3dadd( -70.2515, 34.8017, -190.435, 0.28 ) }
    dend_9 { pt3dadd( -72.3251, 38.3909, -193.035, 0.28 ) }
    dend_9 { pt3dadd( -73.479, 40.4836, -194.63, 0.83 ) }
    dend_9 { pt3dadd( -74.5828, 42.6715, -196.341, 0.28 ) }
    dend_9 { pt3dadd( -75.4998, 44.7759, -198.009, 0.55 ) }
    dend_9 { pt3dadd( -76.759, 48.0166, -200.696, 0.28 ) }
    dend_9 { pt3dadd( -77.7484, 50.6556, -203.137, 0.28 ) }
    dend_9 { pt3dadd( -79.1458, 54.2321, -206.942, 0.55 ) }
    dend_9 { pt3dadd( -80.6455, 58.457, -211.718, 0.28 ) }
    dend_9 { pt3dadd( -81.2152, 60.0066, -213.599, 0.28 ) }
    dend_9 { pt3dadd( -81.9038, 61.7783, -216.121, 0.55 ) }
    dend_9 { pt3dadd( -82.6852, 63.4756, -218.745, 0.28 ) }
    dend_9 { pt3dadd( -83.0214, 64.0669, -219.761, 0.28 ) }
    dend_9 { pt3dadd( -84.6981, 66.5987, -224.322, 0.28 ) }
    dend_9 { pt3dadd( -86.1423, 68.7549, -228.17, 0.55 ) }
    dend_9 { pt3dadd( -87.983, 71.4854, -233.022, 0.28 ) }
    dend_9 { pt3dadd( -89.3883, 73.7062, -236.949, 0.55 ) }
    dend_9 { pt3dadd( -89.9153, 74.6461, -238.563, 0.55 ) }
    dend_9 { pt3dadd( -90.548, 75.8936, -240.675, 0.28 ) }
    dend_9 { pt3dadd( -90.7347, 76.3761, -241.436, 0.55 ) }
    dend_9 { pt3dadd( -90.9959, 77.9908, -243.577, 0.28 ) }
    dend_9 { pt3dadd( -90.9255, 78.6363, -244.23, 0.55 ) }
    dend_9 { pt3dadd( -90.2547, 80.6969, -246.229, 0.28 ) }
    dend_9 { pt3dadd( -89.9789, 81.4157, -246.772, 0.55 ) }
    dend_9 { pt3dadd( -89.3413, 83.1695, -247.868, 0.28 ) }
    dend_9 { pt3dadd( -89.0911, 83.9346, -248.298, 0.55 ) }
    dend_9 { pt3dadd( -88.1244, 86.9365, -249.967, 0.28 ) }
    dend_9 { pt3dadd( -88.0066, 87.2956, -250.182, 0.55 ) }
    dend_9 { pt3dadd( -87.1664, 89.5693, -251.726, 0.55 ) }
    dend_9 { pt3dadd( -85.4346, 93.5887, -255.409, 0.55 ) }
    dend_9 { pt3dadd( -84.7161, 95.1418, -257.442, 0.55 ) }
    dend_9 { pt3dadd( -83.9462, 96.7377, -259.752, 0.55 ) }
    dend_9 { pt3dadd( -83.6508, 97.3476, -260.787, 0.55 ) }
    dend_9 { pt3dadd( -82.9311, 98.7627, -263.699, 0.55 ) }
    dend_9 { pt3dadd( -82.0292, 100.182, -268.576, 0.55 ) }
    dend_9 { pt3dadd( -81.436, 100.397, -272.749, 0.55 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_30, dend_29, dend_28, dend_19, dend_0, dend_25, dend_20, dend_18, dend_1, dend_27, dend_26, dend_24, dend_21, dend_17, dend_2, dend_23, dend_22, dend_16, dend_3, dend_15, dend_4, dend_14, dend_5, dend_7, dend_6, dend_11, dend_8, dend_13, dend_12, dend_10, dend_9]}
    ModelViewParmSubset_2 = new SectionList()
    dend_30 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_30, dend_29, dend_28, dend_19, dend_0, dend_25, dend_20, dend_18, dend_1, dend_27, dend_26, dend_24, dend_21, dend_17, dend_2, dend_23, dend_22, dend_16, dend_3, dend_15, dend_4, dend_14, dend_5, dend_7, dend_6, dend_11, dend_8, dend_13, dend_12, dend_10, dend_9]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()

    // Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_30, dend_29, dend_28, dend_19, dend_0, axon_0, dend_25, dend_20, dend_18, dend_1, axon_1, dend_27, dend_26, dend_24, dend_21, dend_17, dend_2, dend_23, dend_22, dend_16, dend_3, dend_15, dend_4, dend_14, dend_5, dend_7, dend_6, dend_11, dend_8, dend_13, dend_12, dend_10, dend_9]}
    ModelViewParmSubset_5 = new SectionList()
    dend_30 ModelViewParmSubset_5.append()
    dend_29 ModelViewParmSubset_5.append()
    dend_28 ModelViewParmSubset_5.append()
    dend_19 ModelViewParmSubset_5.append()
    dend_0 ModelViewParmSubset_5.append()
    axon_0 ModelViewParmSubset_5.append()
    dend_25 ModelViewParmSubset_5.append()
    dend_20 ModelViewParmSubset_5.append()
    dend_18 ModelViewParmSubset_5.append()
    dend_1 ModelViewParmSubset_5.append()
    axon_1 ModelViewParmSubset_5.append()
    dend_27 ModelViewParmSubset_5.append()
    dend_26 ModelViewParmSubset_5.append()
    dend_24 ModelViewParmSubset_5.append()
    dend_21 ModelViewParmSubset_5.append()
    dend_17 ModelViewParmSubset_5.append()
    dend_2 ModelViewParmSubset_5.append()
    dend_23 ModelViewParmSubset_5.append()
    dend_22 ModelViewParmSubset_5.append()
    dend_16 ModelViewParmSubset_5.append()
    dend_3 ModelViewParmSubset_5.append()
    dend_15 ModelViewParmSubset_5.append()
    dend_4 ModelViewParmSubset_5.append()
    dend_14 ModelViewParmSubset_5.append()
    dend_5 ModelViewParmSubset_5.append()
    dend_7 ModelViewParmSubset_5.append()
    dend_6 ModelViewParmSubset_5.append()
    dend_11 ModelViewParmSubset_5.append()
    dend_8 ModelViewParmSubset_5.append()
    dend_13 ModelViewParmSubset_5.append()
    dend_12 ModelViewParmSubset_5.append()
    dend_10 ModelViewParmSubset_5.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_9 ModelViewParmSubset_5.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_30 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_29 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_28 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_25 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_18 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_17 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_16 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_15 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_14 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_6 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_11 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_10 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_9 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_0 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_19 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_1 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_2 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_20 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_3 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_4 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_5 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_24 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_21 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_7 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_23 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_22 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_8 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_27 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_26 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_12 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_13 OneSecGrp_SectionRef_31.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_2, dend_2, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_3, dend_3, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_4, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_5, dend_5, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_21 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_4 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_10()
}

proc subsets_10() {
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.993125  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.0  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.005611  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.068459995  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.517764  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 6.3E-5  // units: S cm-2
        e_pas_nml2 = -64.6017  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 3.45E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.077616  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.002099  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 1.13999995E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.26087198  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-5  // units: S cm-2
        e_pas_nml2 = -69.78141  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 3.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.395881  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009986  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 5.0100003E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009728  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 2.7999999E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cACint_237_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cACint_237_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_30 nseg = 3
    dend_29 nseg = 5
    dend_28 nseg = 5
    dend_25 nseg = 9
    dend_18 nseg = 5
    dend_17 nseg = 3
    dend_16 nseg = 9
    dend_15 nseg = 5
    dend_14 nseg = 5
    dend_6 nseg = 15
    dend_11 nseg = 11
    dend_10 nseg = 11
    dend_9 nseg = 15
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cACint209_L23_SBC_c2414afe0b_0_0


