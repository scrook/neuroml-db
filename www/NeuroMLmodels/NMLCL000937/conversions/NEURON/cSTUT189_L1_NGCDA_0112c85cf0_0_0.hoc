// Cell: cSTUT189_L1_NGCDA_0112c85cf0_0_0
/*
{
  "id" : "cSTUT189_L1_NGCDA_0112c85cf0_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-2.48569, -6.90544, 0.0, 3.00414", "-2.31617, -6.1725, 0.0, 5.1666", "-2.14664, -5.43956, 0.0, 7.66052", "-1.97711, -4.70663, 0.0, 9.30052", "-1.80758, -3.97369, 0.0, 10.5298", "-1.63805, -3.24075, 0.0, 11.6445", "-1.46852, -2.50781, 0.0, 12.1344", "-1.29899, -1.77488, 0.0, 12.5209", "-1.12946, -1.04194, 0.0, 12.8728", "-0.959926, -0.309003, 0.0, 13.2248", "-0.790396, 0.423934, 0.0, 13.2522", "-0.620866, 1.15687, 0.0, 13.1027", "-0.451336, 1.88981, 0.0, 12.9579", "-0.281807, 2.62275, 0.0, 12.8305", "-0.112277, 3.35568, 0.0, 12.5604", "0.0572532, 4.08862, 0.0, 12.1963", "0.226783, 4.82156, 0.0, 11.554", "0.396313, 5.55449, 0.0, 10.4434", "0.565843, 6.28743, 0.0, 9.14943", "0.735373, 7.02037, 0.0, 6.97128", "0.904903, 7.75331, 0.0, 3.71762" ]
  }, {
    "name" : "dend_34",
    "id" : "dend_34",
    "points3d" : [ "-3.94808, 0.562457, 6.09, 1.15", "-5.37231, 0.604732, 7.39372, 1.15", "-7.26461, 0.703533, 9.18427, 1.15", "-8.59219, 0.862976, 10.5647, 1.15", "-9.47796, 1.0566, 11.6391, 1.15", "-10.59, 1.29966, 12.9879, 0.92", "-11.5162, 1.50211, 14.1113, 0.92", "-12.1332, 1.68986, 14.9983, 0.92", "-12.9012, 1.96351, 16.1572, 0.92", "-13.6251, 2.42564, 17.5628, 1.15" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999989780389625
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "-1.43808, -6.58804, -9.43, 2.29", "-1.43808, -6.58804, -9.43, 2.29", "-1.79594, -7.21894, -11.0833, 2.29", "-2.13123, -7.81006, -12.6323, 2.29" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999989780389625
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "5.35192, 4.40546, -9.58, 1.15", "5.35192, 4.40546, -9.58, 1.15", "6.33306, 5.57975, -10.3137, 1.15", "7.1141, 6.47719, -11.0094, 1.15", "7.70041, 7.13186, -11.6431, 1.38", "8.3304, 7.80711, -12.4462, 1.38", "8.939, 8.47431, -13.3785, 1.15", "9.64608, 9.23608, -14.5109, 1.15", "10.4978, 10.1234, -15.9884, 1.15", "11.299, 10.9281, -17.5204, 1.15", "12.0974, 11.7501, -19.2983, 0.92", "13.0, 12.7248, -21.6591, 0.92" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999989780389625
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "2.86192, 6.50546, -1.91, 4.59", "2.86192, 6.50546, -1.91, 4.59", "3.31364, 8.0206, -2.69354, 4.36", "3.9295, 10.0863, -3.7618, 3.21", "4.3304, 11.431, -4.45719, 2.52", "4.83258, 13.1154, -5.32828, 1.61", "5.20879, 14.3773, -5.98083, 1.61", "5.77613, 16.2322, -6.93429, 1.61" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999989780389625
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-3.99808, 7.20896, 1.25, 3.21", "-3.99808, 7.20896, 1.25, 3.21", "-4.1909, 7.94025, 1.37261, 2.06", "-4.64733, 9.67137, 1.66284, 1.61", "-4.93507, 10.7626, 1.84581, 1.61", "-5.35383, 12.3509, 2.11208, 1.61" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999989780389625
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "0.904903, 7.75331, 0.0, 0.989129", "4.28518, 22.3675, 0.0, 0.989129", "7.66546, 36.9816, 0.0, 0.989129" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_36",
    "id" : "dend_36",
    "points3d" : [ "-13.6251, 2.42564, 17.5628, 0.92", "-13.3025, 1.68841, 17.8413, 0.92", "-12.9661, 0.727233, 18.1091, 0.69", "-12.6926, -0.395614, 18.3343, 0.69", "-12.4738, -1.29441, 18.5145, 0.92", "-12.1813, -2.49523, 18.7554, 0.69", "-11.9279, -3.53567, 18.964, 0.69", "-11.6786, -4.83639, 19.2238, 0.69", "-11.4916, -5.84293, 19.3512, 1.15" ],
    "parent" : "dend_34",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_35",
    "id" : "dend_35",
    "points3d" : [ "-13.6251, 2.42564, 17.5628, 0.92", "-13.4009, 1.9355, 18.8782, 0.92", "-13.1122, 1.30416, 20.5725, 0.69", "-12.7997, 0.620887, 22.4062, 0.69", "-12.5219, 0.0136191, 24.0359, 0.69", "-12.3622, -0.335609, 24.9731, 0.69" ],
    "parent" : "dend_34",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "-2.13123, -7.81006, -12.6323, 1.38", "-1.20304, -8.51659, -13.1434, 1.38", "-0.201503, -9.27895, -13.6948, 1.38", "0.670866, -9.94299, -14.1751, 1.38", "1.55064, -10.6127, -14.6596, 1.38", "2.57525, -11.3926, -15.2237, 1.38" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "-2.13123, -7.81006, -12.6323, 0.92", "-3.1097, -6.78712, -14.4692, 0.92", "-4.12693, -4.62142, -17.1816, 0.69", "-4.50255, -3.8217, -18.1831, 0.69", "-5.1569, -2.42858, -19.9279, 0.92", "-5.76179, -1.14075, -21.5408, 1.15", "-6.52554, 0.485303, -23.5773, 1.15", "-6.80564, 2.13379, -25.4155, 0.92" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "13.0, 12.7248, -21.6591, 0.92", "13.1836, 11.7382, -23.047, 0.92", "13.502, 10.5644, -24.5863, 0.92", "13.833, 9.48158, -25.9883, 0.92", "14.1142, 8.51242, -27.224, 0.92", "14.3273, 7.77225, -28.2454, 0.92", "14.5574, 7.02247, -29.4516, 0.92", "14.7357, 6.47925, -30.5315, 0.92", "15.0465, 6.06429, -31.9557, 0.92", "15.2119, 6.02463, -32.5166, 0.92", "15.7302, 6.12673, -33.8973, 0.92", "16.3165, 6.39693, -35.4127, 0.92", "16.9809, 6.8826, -37.2007, 0.92", "17.4182, 7.2702, -38.4303, 0.92", "18.1461, 7.87628, -40.0034, 0.92", "19.4027, 8.70442, -42.2255, 0.92" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "13.0, 12.7248, -21.6591, 0.69", "12.7496, 12.2255, -21.9554, 0.69", "12.182, 11.18, -22.4729, 0.46", "11.5567, 10.2668, -22.9924, 0.46", "11.0451, 9.65972, -23.4402, 0.46", "10.5098, 9.11334, -23.9629, 0.46", "9.82037, 8.4487, -24.737, 0.46", "9.09498, 7.84241, -25.6675, 0.46", "8.04067, 7.03296, -27.2365, 0.46", "7.36482, 6.51033, -28.4699, 0.46", "6.71117, 5.99634, -30.0091, 0.46", "6.27877, 5.61522, -31.5162, 0.46", "6.05073, 5.29691, -33.1385, 0.46", "6.01766, 5.07069, -34.5354, 0.46", "6.14057, 4.90951, -35.6485, 0.46", "6.3422, 4.76375, -36.7078, 0.46", "6.70352, 4.53157, -38.3859, 0.46", "7.0718, 4.25207, -40.0902, 0.46", "7.33588, 4.02049, -41.3757, 0.46", "7.66166, 3.69638, -43.2751, 0.46", "7.86605, 3.47399, -44.8194, 0.46", "8.11401, 3.27196, -46.9707, 0.46", "8.33601, 3.21244, -49.2185, 0.46", "8.44697, 3.30614, -50.5403, 0.46", "8.59708, 3.54043, -52.4104, 0.46", "8.81996, 4.03473, -54.8862, 0.46", "8.98672, 4.4849, -56.4235, 0.46", "9.09712, 4.83142, -57.2349, 0.46", "9.22118, 5.41698, -58.2455, 0.46" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "5.77613, 16.2322, -6.93429, 1.83", "5.82262, 17.3789, -8.05618, 1.83", "5.8534, 18.1381, -8.79888, 1.61", "5.91962, 19.7712, -10.3967, 1.61" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "5.77613, 16.2322, -6.93429, 0.92", "6.86691, 18.4993, -6.70339, 0.92", "7.68492, 21.3057, -7.01264, 0.92", "7.94212, 23.058, -7.35399, 0.69", "8.08255, 25.1744, -7.66445, 0.69", "8.16744, 27.9958, -8.0246, 0.69", "8.2754, 31.1549, -8.34469, 0.69", "8.24868, 33.4367, -8.65482, 0.69", "8.09853, 36.0422, -9.10596, 0.92", "7.86658, 38.7619, -9.54834, 1.15", "7.70253, 40.4218, -9.73249, 0.69", "7.4841, 42.0689, -9.71716, 0.46", "7.25572, 44.8995, -9.33348, 0.46" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-5.35383, 12.3509, 2.11208, 1.83", "-5.52058, 12.495, 1.91811, 1.83", "-6.80879, 13.3833, 0.735586, 1.83", "-7.99384, 14.0717, -0.270182, 1.61", "-8.91301, 14.5631, -0.990097, 1.15", "-9.95128, 15.1181, -1.80328, 1.15", "-10.9455, 15.6496, -2.58197, 1.15", "-12.1447, 16.2218, -3.44392, 1.15", "-13.1668, 16.6225, -4.04727, 1.38", "-14.7412, 17.1626, -4.83229, 1.15" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-5.35383, 12.3509, 2.11208, 0.92", "-5.23867, 13.9902, 2.12221, 0.92", "-5.27217, 15.0974, 2.13604, 0.92", "-5.34422, 16.5591, 2.14379, 0.92", "-5.37108, 17.6179, 2.13257, 0.92", "-5.34447, 18.4756, 2.08068, 0.92", "-5.18404, 20.5212, 1.8156, 0.92", "-5.06853, 21.1948, 1.65168, 0.92", "-4.95897, 21.8346, 1.41659, 0.92", "-4.8725, 22.6066, 1.03402, 0.92", "-4.85714, 23.8873, 0.252357, 0.92", "-4.93242, 24.6448, -0.365929, 0.92", "-4.99889, 25.0754, -0.772365, 0.92", "-5.26231, 25.8288, -1.46638, 0.92", "-5.65195, 26.5924, -2.1323, 0.69", "-6.14003, 27.4835, -2.88531, 0.69", "-6.61859, 28.3197, -3.63892, 0.69", "-7.01604, 29.0265, -4.47183, 0.69", "-7.352, 29.6752, -5.35765, 0.69", "-7.47132, 30.0437, -5.97334, 0.69", "-7.49505, 30.5274, -6.91576, 0.46", "-7.3069, 31.0405, -8.26104, 0.46", "-7.01737, 31.1359, -9.54713, 0.46" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "7.66546, 36.9816, 0.0, 0.480383", "11.0457, 51.5958, 0.0, 0.480383", "14.426, 66.21, 0.0, 0.480383" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_38",
    "id" : "dend_38",
    "points3d" : [ "-11.4916, -5.84293, 19.3512, 0.69", "-10.8397, -7.47784, 19.6748, 0.69", "-9.77707, -9.54053, 19.9557, 0.69", "-9.03951, -10.9723, 20.1507, 0.69", "-8.2443, -12.516, 20.361, 0.69", "-7.54974, -13.8643, 20.5446, 0.69", "-6.66952, -15.573, 20.7774, 0.69", "-5.47609, -17.6905, 20.9841, 0.69" ],
    "parent" : "dend_36",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_37",
    "id" : "dend_37",
    "points3d" : [ "-11.4916, -5.84293, 19.3512, 0.69", "-12.5422, -7.79483, 19.5445, 0.69", "-13.1097, -8.98788, 19.6415, 0.69", "-13.631, -10.3181, 19.7019, 0.69", "-14.2064, -11.9471, 19.7537, 0.69", "-14.7523, -13.3879, 19.8084, 0.69", "-15.2614, -14.6124, 19.8397, 0.69", "-15.7457, -15.7873, 19.8524, 0.69", "-16.3549, -17.0712, 19.8868, 0.69", "-17.2023, -18.6166, 19.9682, 0.69", "-18.0436, -20.0139, 20.1022, 0.69", "-18.9594, -21.3515, 20.3233, 0.69", "-19.9374, -22.5495, 20.6651, 0.69", "-21.3991, -24.155, 21.3153, 0.69", "-22.2805, -25.0412, 21.7474, 0.69", "-23.2598, -25.9811, 22.2927, 0.69", "-24.0494, -26.7415, 22.8157, 0.46", "-25.1139, -27.7083, 23.6723, 0.46", "-26.2791, -28.6627, 24.7262, 0.46" ],
    "parent" : "dend_36",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_31",
    "id" : "dend_31",
    "points3d" : [ "2.57525, -11.3926, -15.2237, 0.92", "2.37668, -12.7645, -15.2168, 0.92", "2.14813, -14.049, -15.1647, 0.92", "1.92826, -15.0147, -15.1167, 0.92", "1.69948, -15.9716, -15.0697, 0.92", "1.38372, -17.125, -15.0074, 0.92", "1.22905, -17.5712, -14.9884, 0.92", "0.850872, -18.3885, -14.967, 0.92", "0.0151849, -19.9376, -14.9519, 0.92", "-0.704239, -21.1268, -14.9661, 0.92", "-1.39465, -22.2499, -15.0568, 0.92", "-2.23914, -23.5559, -15.2055, 1.15", "-3.35063, -25.2082, -15.4285, 0.92", "-3.78669, -25.8437, -15.5385, 0.92", "-4.38219, -26.6425, -15.7076, 1.15", "-5.36812, -27.8839, -16.0355, 0.92" ],
    "parent" : "dend_27",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "2.57525, -11.3926, -15.2237, 0.69", "3.94146, -13.369, -15.1221, 0.69", "5.31042, -15.3451, -15.2175, 0.69", "6.56218, -17.2424, -15.4774, 0.46", "7.85682, -19.3322, -15.9258, 0.46", "9.06064, -21.4635, -16.4677, 0.46", "10.3104, -23.8425, -17.2171, 0.46", "11.0476, -25.3996, -18.0156, 0.46", "11.5367, -26.6037, -18.8613, 0.46", "11.9092, -27.709, -19.7687, 0.46", "12.1302, -28.7479, -20.6433, 0.46", "12.3315, -30.146, -21.8461, 0.46", "12.4861, -32.1892, -23.6048, 0.46", "12.5715, -33.4939, -24.8219, 0.46", "12.6951, -34.8973, -26.112, 0.46", "12.8091, -36.0077, -27.1412, 0.46" ],
    "parent" : "dend_27",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "-6.80564, 2.13379, -25.4155, 0.69", "-6.96928, 2.33138, -28.0892, 0.69", "-7.0609, 2.52862, -29.7683, 0.69", "-7.15324, 2.70511, -30.8905, 0.69", "-7.33211, 2.89788, -32.1799, 0.69", "-7.51575, 3.03713, -33.182, 0.69", "-7.71833, 3.16154, -34.1518, 0.69", "-8.24725, 3.36133, -35.7872, 0.69", "-8.6505, 3.48756, -36.7966, 0.69", "-9.36446, 3.63471, -38.3096, 0.69", "-10.0964, 3.69329, -39.578, 0.69", "-10.7701, 3.69804, -40.5911, 0.69", "-11.8018, 3.64049, -41.9537, 0.46", "-13.3057, 3.51577, -43.5881, 0.46", "-14.5479, 3.42629, -44.7552, 0.46", "-15.6618, 3.38842, -45.6799, 0.46", "-17.1841, 3.40748, -46.8921, 0.46", "-18.8067, 3.43636, -48.1243, 0.46", "-21.2018, 3.50322, -49.9066, 0.23", "-22.2222, 3.58686, -50.5852, 0.46", "-23.7943, 3.80907, -51.617, 0.46", "-25.6032, 4.17804, -52.8331, 0.46" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "-6.80564, 2.13379, -25.4155, 0.69", "-7.17954, 3.74579, -25.7146, 0.69", "-7.58358, 4.98722, -26.0455, 0.69", "-7.94773, 6.10084, -26.3772, 0.69", "-8.49555, 7.77614, -26.8763, 0.69", "-9.21742, 9.98371, -27.5338, 0.69", "-9.59474, 11.1376, -27.8776, 0.46", "-10.3869, 13.266, -28.6275, 0.46", "-10.6988, 14.0214, -28.9242, 0.46" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "19.4027, 8.70442, -42.2255, 0.69", "19.7697, 10.2484, -42.542, 0.69", "20.0057, 11.2408, -42.7455, 0.69", "20.3484, 12.6826, -43.0411, 0.69" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "19.4027, 8.70442, -42.2255, 0.69", "18.2696, 8.14326, -43.0435, 0.69", "16.6463, 7.14055, -43.8571, 0.69", "15.6537, 6.43054, -44.3833, 0.69", "14.7338, 5.69423, -44.9013, 0.69", "13.4389, 4.59612, -45.7269, 0.46", "11.5845, 2.93212, -47.2595, 0.46", "11.0673, 2.38526, -47.7293, 0.23", "10.3148, 1.33966, -48.6197, 0.23", "10.0675, 0.940056, -48.9751, 0.23", "9.44662, -0.256127, -50.2633, 0.23", "8.84443, -1.6138, -52.1247, 0.23", "8.5606, -2.30112, -53.2704, 0.23", "8.25879, -2.94411, -54.3676, 0.23" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "5.91962, 19.7712, -10.3967, 0.92", "7.1392, 20.758, -10.8035, 0.92", "8.72523, 21.8394, -11.1467, 0.92", "10.0052, 22.6851, -11.3044, 0.92", "10.9628, 23.3108, -11.3942, 0.92", "12.4872, 24.3432, -11.517, 1.15", "13.9948, 25.3659, -11.6265, 0.92", "14.9364, 25.9114, -11.6686, 1.15", "16.4088, 26.6761, -11.752, 0.92", "17.432, 27.2411, -11.9206, 0.92", "18.4388, 27.9348, -12.2052, 0.92", "18.8749, 28.3163, -12.427, 0.92", "20.0818, 29.5191, -13.3941, 0.92", "20.862, 30.3934, -14.3466, 0.92", "21.6174, 31.4088, -15.9794, 0.92", "21.9751, 31.9394, -17.0291, 1.15", "22.4193, 32.6202, -18.5468, 0.92", "22.7342, 33.2238, -19.7799, 1.15", "23.0789, 34.1048, -21.3312, 1.15", "23.6483, 35.6097, -23.7592, 0.69", "23.9609, 36.394, -25.0126, 0.46", "24.1157, 36.7901, -25.6682, 0.46", "24.2649, 38.4625, -24.4615, 0.46", "24.2738, 40.0842, -23.1065, 0.23", "24.2701, 41.6202, -21.7342, 0.23", "24.2488, 42.2033, -21.1293, 0.23", "24.0607, 43.5142, -19.573, 0.23", "23.9092, 44.1681, -18.6621, 0.23", "23.6271, 44.9808, -17.0957, 0.23" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "5.91962, 19.7712, -10.3967, 1.15", "6.21598, 20.9798, -11.2662, 1.15", "6.66216, 22.3628, -12.0676, 1.15", "7.27354, 23.8762, -12.7282, 1.15", "7.98076, 25.5353, -13.399, 0.92", "8.28661, 26.2637, -13.7295, 1.15", "8.81374, 27.6785, -14.5181, 1.15", "9.08122, 28.5479, -15.1653, 1.15", "9.28097, 29.6635, -16.1126, 1.15", "9.39146, 30.9817, -17.3558, 1.15", "9.33844, 31.999, -18.525, 1.15", "9.05939, 33.2864, -20.3479, 1.15", "8.59281, 34.4449, -22.3352, 1.15", "8.30918, 34.8736, -23.2444, 1.15" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-14.7412, 17.1626, -4.83229, 0.92", "-15.7402, 18.2898, -3.51225, 0.92", "-17.1775, 19.3579, -1.94936, 0.92", "-18.6, 19.9553, -0.59685, 0.92", "-20.0269, 20.1788, 0.582788, 0.92", "-21.4681, 20.0102, 1.70831, 0.92", "-22.8632, 19.5109, 2.83052, 0.92", "-24.0547, 18.6127, 3.61635, 1.15", "-24.9039, 17.786, 4.08999, 1.15", "-25.596, 17.0577, 4.42994, 0.92", "-26.8936, 15.6352, 5.04295, 0.92", "-28.0081, 14.4832, 5.56727, 0.92", "-28.9679, 13.6211, 5.99389, 0.92", "-30.7201, 12.2915, 6.64701, 1.15", "-32.0602, 11.4176, 7.0566, 1.15", "-33.4813, 10.6537, 7.39448, 0.92", "-35.5487, 9.7913, 7.73945, 0.92", "-37.7414, 9.14863, 8.00714, 0.92", "-39.2656, 8.90765, 8.15422, 0.92", "-40.5906, 8.9235, 8.16749, 1.15", "-42.0622, 9.26906, 7.98341, 1.15", "-42.5891, 9.57446, 7.80909, 1.15", "-43.7413, 10.6394, 7.13532, 0.92", "-44.7289, 11.8949, 6.36384, 0.69", "-45.4579, 12.9772, 5.71281, 0.69", "-46.2316, 14.2598, 4.90966, 0.69", "-46.9422, 15.4853, 4.09991, 0.46", "-47.4644, 16.4205, 3.41841, 0.46", "-48.1356, 17.6423, 2.36465, 0.46" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-14.7412, 17.1626, -4.83229, 0.92", "-15.0966, 18.0043, -5.65121, 0.92", "-15.3878, 18.7974, -6.41312, 0.92", "-15.6521, 19.3881, -7.01277, 0.92", "-15.9628, 19.9896, -7.65827, 0.92", "-16.2948, 20.5043, -8.29481, 0.92", "-16.5701, 20.8597, -8.80513, 0.92", "-17.2082, 21.5898, -9.95054, 0.92", "-17.5985, 21.9101, -10.4917, 0.92", "-17.8262, 22.035, -10.7416, 1.15", "-18.6157, 22.3872, -11.4841, 1.15", "-19.2885, 22.6818, -12.0745, 1.15", "-20.0413, 23.035, -12.7449, 1.15", "-21.0133, 23.6434, -13.6205, 0.92", "-21.6562, 24.1904, -14.2311, 0.92", "-22.1969, 24.7105, -14.7104, 0.92", "-22.8044, 25.3095, -15.1691, 0.69", "-23.3606, 25.8244, -15.5424, 0.69", "-24.114, 26.4495, -16.0346, 0.69", "-24.8487, 27.0313, -16.5441, 0.69", "-25.8235, 27.8462, -17.0988, 0.69", "-26.7182, 28.6068, -17.4977, 0.92", "-27.6865, 29.4594, -17.7889, 1.15", "-28.6154, 30.3157, -17.9344, 1.15", "-29.5015, 31.2052, -17.8798, 0.92", "-30.7795, 32.9227, -17.3025, 0.69", "-31.1847, 33.7766, -16.6963, 0.69", "-31.3202, 34.3439, -16.0293, 0.69", "-31.3615, 34.7224, -15.454, 0.69", "-31.3561, 35.2554, -14.428, 0.69", "-31.3407, 35.4789, -13.8202, 0.69", "-31.3796, 35.6499, -12.8205, 0.69", "-31.4013, 35.6563, -11.8963, 0.69" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_33",
    "id" : "dend_33",
    "points3d" : [ "-5.36812, -27.8839, -16.0355, 0.69", "-6.41191, -29.7337, -13.0307, 0.69", "-7.15277, -31.073, -11.1531, 0.69", "-7.73213, -32.227, -9.84678, 0.69", "-8.25126, -33.3993, -8.76013, 0.69", "-8.65556, -34.4049, -7.86336, 0.69", "-8.84137, -34.8583, -7.44999, 0.69", "-9.10064, -35.6081, -6.86132, 0.69", "-9.48389, -36.9629, -5.89017, 0.46", "-9.79043, -38.7303, -4.68466, 0.69", "-9.91254, -41.0689, -3.08427, 0.69", "-9.86183, -42.4798, -2.16018, 0.69", "-9.80025, -43.4139, -1.54694, 0.69", "-9.66115, -44.7493, -0.62433, 0.69", "-9.45189, -46.5497, 0.67774, 0.46", "-9.36848, -47.5833, 1.51926, 0.46", "-9.25162, -48.9053, 2.51776, 0.46", "-9.1473, -50.3167, 3.60918, 0.46", "-9.18326, -51.8576, 4.97818, 0.46", "-9.44214, -53.4781, 6.80662, 0.46", "-10.0171, -55.2158, 9.31406, 0.46" ],
    "parent" : "dend_31",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_32",
    "id" : "dend_32",
    "points3d" : [ "-5.36812, -27.8839, -16.0355, 0.69", "-5.53476, -28.6934, -17.4733, 0.69", "-5.77728, -29.6591, -18.9454, 0.69", "-5.9671, -30.6451, -20.2214, 0.69", "-6.05765, -31.4076, -21.1083, 0.69", "-6.10603, -32.1497, -21.862, 0.69", "-6.21472, -33.4262, -23.0387, 0.69", "-6.31813, -34.6091, -23.9187, 0.69", "-6.43683, -35.7028, -24.5236, 0.69", "-6.51646, -36.4172, -24.8772, 0.69", "-6.56188, -37.4653, -25.3214, 0.69", "-6.52578, -39.0276, -26.0202, 0.69", "-6.48896, -39.8304, -26.4117, 0.69", "-6.50865, -41.4384, -27.2985, 0.69", "-6.6285, -42.7242, -28.1309, 0.69", "-6.86893, -44.2436, -29.2179, 0.92", "-7.15823, -45.7246, -30.3529, 0.92", "-7.29108, -46.2885, -30.7975, 0.69", "-7.70568, -47.4478, -31.7622, 0.69", "-8.4009, -48.6074, -32.7882, 0.69", "-8.80082, -49.0802, -33.2358, 0.69", "-9.19488, -49.4487, -33.6378, 0.69", "-9.93671, -50.0257, -34.2591, 0.69", "-10.3425, -50.323, -34.6303, 0.69", "-11.3259, -51.1119, -35.7311, 1.15", "-12.2924, -51.9685, -36.8877, 0.92", "-13.1971, -52.7922, -37.8698, 0.92", "-14.2887, -53.7387, -38.8981, 0.92", "-16.0681, -55.248, -40.2895, 0.92", "-17.6193, -56.5463, -41.2807, 0.69", "-19.181, -57.7715, -42.0495, 0.69", "-21.4477, -59.4936, -42.8753, 0.23", "-22.761, -60.4415, -43.2518, 0.46", "-24.5818, -61.7084, -43.6248, 0.23", "-26.2282, -62.7804, -43.841, 0.46", "-28.5406, -64.1818, -44.0639, 0.23", "-30.644, -65.4101, -44.2958, 0.23", "-32.6025, -66.5891, -44.4891, 0.23", "-34.3355, -67.6671, -44.6343, 0.23" ],
    "parent" : "dend_31",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "12.8091, -36.0077, -27.1412, 0.23", "11.0596, -35.777, -28.2017, 0.23", "9.65577, -35.5918, -29.0528, 0.23", "8.6325, -35.4568, -29.6731, 0.23", "7.0829, -35.2525, -30.6124, 0.23", "5.336, -35.0221, -31.6714, 0.23" ],
    "parent" : "dend_28",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "12.8091, -36.0077, -27.1412, 0.46", "13.8853, -36.9136, -27.8522, 0.46", "14.7791, -37.666, -28.4427, 0.46", "15.307, -38.1103, -28.7914, 0.46", "16.4699, -39.0892, -29.5597, 0.69", "17.8099, -40.2171, -30.445, 0.46" ],
    "parent" : "dend_28",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "20.3484, 12.6826, -43.0411, 0.46", "21.3544, 13.2803, -42.6974, 0.46", "22.7149, 14.2142, -42.3204, 0.46", "24.1314, 15.3825, -42.0226, 0.46", "25.144, 16.336, -41.9434, 0.46", "26.6246, 17.7549, -41.9204, 0.46", "28.7145, 19.7056, -41.9589, 0.69", "29.6077, 20.5496, -42.0614, 0.46", "31.2564, 22.1246, -42.4729, 0.69", "33.0657, 23.7095, -43.1923, 0.46", "33.8537, 24.2724, -43.5432, 0.46", "34.5395, 24.5838, -43.8506, 0.46", "35.6326, 24.8673, -44.3627, 0.46", "37.2906, 25.1571, -45.1211, 0.69", "38.6009, 25.3224, -45.7409, 0.69", "40.5327, 25.602, -46.7564, 0.46", "42.2784, 25.9361, -47.8556, 0.46", "43.7498, 26.2491, -48.8692, 0.46", "44.6847, 26.4906, -49.5344, 0.46", "45.8483, 26.7839, -50.4278, 0.46", "47.185, 27.1805, -51.5104, 0.46", "47.9044, 27.47, -52.2116, 0.46", "48.5927, 27.8758, -52.9068, 0.46", "49.5905, 28.4495, -53.8073, 0.46", "50.4923, 29.0073, -54.5339, 0.46", "51.3678, 29.5496, -55.1673, 0.46", "52.6484, 30.313, -56.0187, 0.46", "53.576, 30.8835, -56.657, 0.46", "54.5534, 31.5135, -57.4019, 0.46", "55.8009, 32.2193, -58.3657, 0.46", "56.8998, 32.8722, -59.2347, 0.46", "57.9481, 33.5215, -60.1366, 0.46", "58.7784, 34.0495, -60.8752, 0.46", "59.9492, 34.8415, -61.9802, 0.46", "60.9909, 35.6155, -62.9947, 0.46", "62.3143, 36.5633, -64.1245, 0.46", "63.4342, 37.4056, -64.9538, 0.46", "64.3603, 38.1308, -65.617, 0.46", "65.599, 39.1057, -66.4597, 0.46", "66.261, 39.6124, -66.8628, 0.46", "68.5608, 41.3974, -68.3445, 0.46", "69.6507, 42.1838, -69.1997, 0.46", "70.7395, 43.0239, -70.3901, 0.46", "71.3685, 43.5472, -71.3106, 0.46", "71.7096, 43.8478, -71.9221, 0.46", "72.4561, 44.4451, -73.3382, 0.46", "73.692, 45.3507, -75.7216, 0.46", "74.6016, 45.8156, -77.1845, 0.46", "75.121, 46.0132, -77.8474, 0.46", "75.8789, 46.2562, -78.7117, 0.46", "76.5428, 46.4364, -79.4368, 0.46", "77.2574, 46.5481, -80.1467, 0.46", "78.2545, 46.5023, -81.1278, 0.46", "79.9969, 46.0924, -82.7175, 0.46", "81.4803, 45.4155, -84.0765, 0.46", "82.604, 44.6532, -85.0305, 0.69", "83.7496, 43.6476, -85.91, 0.69", "84.988, 42.3398, -86.7792, 0.69", "86.6455, 40.4766, -87.7727, 0.46", "87.6791, 39.3214, -88.2487, 0.46", "88.9599, 38.1077, -88.6623, 0.46", "89.9903, 37.2067, -88.9192, 0.46", "91.12, 36.3549, -89.1648, 0.23", "92.8208, 35.4408, -89.6299, 0.23", "94.2562, 34.9653, -90.2694, 0.23", "95.8593, 34.7572, -91.0175, 0.23" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "20.3484, 12.6826, -43.0411, 0.46", "20.968, 13.6564, -43.6878, 0.46", "21.5013, 14.4568, -44.2278, 0.46", "22.5382, 15.8922, -45.2543, 0.46", "23.9064, 17.6719, -46.5834, 0.46", "24.9629, 19.0936, -47.7225, 0.46", "25.9315, 20.5065, -48.8487, 0.46", "26.6177, 21.6045, -49.8463, 0.46", "27.0082, 22.2889, -50.5122, 0.46", "27.603, 23.4396, -51.6623, 0.23", "28.1854, 24.6136, -52.8561, 0.23", "28.6167, 25.7204, -53.9027, 0.23", "29.4102, 28.1949, -56.2482, 0.23", "29.6316, 29.1361, -57.1973, 0.23" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "8.30918, 34.8736, -23.2444, 1.15", "7.00136, 36.5153, -23.7005, 1.15", "6.4396, 37.2628, -24.0144, 0.92", "5.49732, 38.5502, -24.7009, 0.92", "4.78248, 39.5446, -25.2969, 1.15", "3.85743, 40.8579, -26.1495, 0.92", "2.97746, 42.1763, -27.0334, 1.15", "2.16631, 43.5041, -27.9691, 1.15", "1.7436, 44.3168, -28.5846, 1.15", "1.1665, 45.6589, -29.6055, 1.15", "0.749536, 46.7576, -30.4429, 1.15", "0.505161, 47.5151, -30.9771, 1.15", "0.127606, 48.8535, -31.861, 0.92", "-0.229702, 50.2051, -32.7375, 0.92", "-0.463345, 51.2483, -33.4585, 0.92", "-0.617381, 52.1777, -34.161, 0.92", "-0.70972, 52.8008, -34.6529, 0.92", "-0.935498, 53.9202, -35.5708, 0.92", "-1.12302, 54.575, -36.134, 0.92", "-1.68122, 55.7372, -37.0871, 0.92", "-1.92277, 56.1157, -37.3765, 0.92", "-2.56079, 56.9296, -37.8557, 0.92", "-3.31748, 57.8884, -38.1792, 0.92", "-3.87075, 58.6154, -38.3231, 0.92", "-4.51337, 59.5008, -38.5128, 0.92", "-4.88363, 60.0147, -38.6485, 0.92", "-5.29188, 60.6684, -38.9337, 0.92", "-5.80168, 61.8583, -39.7308, 0.92", "-5.97232, 62.678, -40.4114, 0.92", "-6.14271, 63.797, -41.3255, 0.92", "-6.22614, 64.3256, -41.7603, 0.92", "-6.30876, 64.921, -42.1624, 0.92", "-6.39052, 65.4417, -42.3975, 0.92", "-6.5286, 65.9965, -42.5226, 0.69", "-7.17856, 67.8475, -42.618, 0.69", "-7.55263, 68.6382, -42.5608, 0.69", "-8.50001, 70.1243, -42.3181, 0.69", "-9.20118, 70.9115, -42.0847, 0.69", "-9.76194, 71.3618, -41.8878, 0.69", "-10.7958, 71.9954, -41.5307, 0.69", "-11.7104, 72.3748, -41.1298, 0.69", "-12.4759, 72.5405, -40.6954, 0.69", "-13.4653, 72.5931, -40.0078, 0.69", "-14.0772, 72.5748, -39.5282, 0.69", "-14.7996, 72.5179, -38.9265, 0.69", "-16.0615, 72.3498, -37.8352, 0.69", "-17.3789, 72.1678, -36.7854, 0.69", "-18.4669, 72.0385, -35.9575, 0.69", "-19.3691, 71.9481, -35.3248, 0.69", "-20.3029, 71.8715, -34.6983, 0.69", "-21.3675, 71.8678, -34.0532, 0.69", "-22.4943, 72.0114, -33.4949, 0.69", "-23.6618, 72.3064, -32.9514, 0.69", "-24.5536, 72.6106, -32.5489, 0.69", "-25.3429, 72.9549, -32.1949, 0.69", "-26.7846, 73.6906, -31.5674, 0.69", "-28.0006, 74.3601, -31.1324, 0.69", "-28.6782, 74.7029, -30.9099, 0.69", "-30.0887, 75.3121, -30.5264, 0.69", "-31.1332, 75.7112, -30.3082, 0.69", "-31.7695, 75.9204, -30.2399, 0.92", "-33.0109, 76.2631, -30.1711, 0.92", "-34.9059, 76.7726, -30.1036, 0.92", "-36.5611, 77.2189, -30.0729, 0.69", "-38.0186, 77.6376, -30.0473, 0.69", "-40.0227, 78.304, -29.996, 0.69", "-41.1958, 78.7537, -29.9441, 0.69", "-42.2023, 79.2618, -29.812, 0.69", "-43.1023, 79.9162, -29.5918, 0.69", "-43.533, 80.3877, -29.3527, 0.69", "-43.9622, 80.9692, -28.9809, 0.69", "-44.5261, 81.7607, -28.3827, 0.69", "-45.4108, 82.8781, -27.4507, 0.46", "-46.0015, 83.4922, -26.8775, 0.46", "-47.0343, 84.4285, -25.9726, 0.46", "-47.6251, 84.9125, -25.5314, 0.46", "-48.1147, 85.3062, -25.1955, 0.46", "-49.0241, 86.0409, -24.6604, 0.46", "-50.3914, 86.9923, -24.0254, 0.46", "-51.2524, 87.4785, -23.7283, 0.46", "-52.1164, 87.9174, -23.5239, 0.46", "-52.9543, 88.3797, -23.3589, 0.46", "-54.0825, 89.0335, -23.0431, 0.46", "-55.0873, 89.5606, -22.7351, 0.46", "-56.256, 90.0733, -22.2771, 0.46", "-57.1849, 90.3719, -21.7679, 0.46", "-58.2101, 90.5611, -21.0273, 0.46", "-60.1177, 90.864, -19.3175, 0.46", "-60.9998, 91.0195, -18.439, 0.46", "-61.4838, 91.1175, -17.9725, 0.46", "-62.3004, 91.3337, -17.2046, 0.46", "-63.6363, 91.689, -16.1471, 0.46", "-64.5721, 92.0005, -15.5693, 0.46", "-66.1402, 92.7043, -14.8127, 0.46", "-67.0578, 93.2372, -14.3873, 0.46", "-68.2598, 94.0599, -13.8874, 0.46", "-69.595, 95.1123, -13.4286, 0.46", "-70.3039, 95.7515, -13.2741, 0.46", "-71.1406, 96.5825, -13.1791, 0.46", "-72.2525, 97.9091, -13.1652, 0.46", "-73.0125, 98.8942, -13.2969, 0.46", "-73.5545, 99.64, -13.5384, 0.46", "-74.7852, 101.483, -14.2437, 0.46", "-75.831, 103.069, -14.9421, 0.46", "-76.3844, 103.921, -15.4001, 0.46", "-77.1906, 105.181, -16.243, 0.46", "-78.1245, 106.627, -17.3629, 0.46" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "8.30918, 34.8736, -23.2444, 1.38", "7.9648, 35.4276, -24.161, 1.38", "7.25983, 36.5616, -26.0374, 1.38", "6.78404, 37.327, -27.3038, 1.15" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "6.78404, 37.327, -27.3038, 0.46", "7.52841, 38.5269, -28.9031, 0.46", "8.26629, 39.8207, -30.5944, 0.46", "8.38704, 40.0694, -30.8764, 0.46", "8.8849, 41.1686, -32.0035, 0.46", "9.29453, 42.0722, -32.9, 0.46", "9.69351, 43.068, -33.8923, 0.46", "9.97622, 43.9185, -34.6999, 0.46", "10.2998, 45.1055, -35.9221, 0.46", "10.3995, 45.4777, -36.3875, 0.69", "10.734, 46.339, -37.651, 0.69", "11.202, 47.1866, -39.1449, 0.69", "11.6773, 47.6919, -40.2931, 0.46", "12.4934, 48.0865, -41.7839, 0.46", "13.5201, 48.2485, -43.1248, 0.46", "14.9665, 48.3173, -44.7848, 0.46", "15.6864, 48.266, -45.4042, 0.69", "16.5065, 48.1497, -45.906, 0.69", "17.8141, 47.9143, -46.4619, 0.23", "19.2646, 47.6952, -46.7999, 0.23" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "6.78404, 37.327, -27.3038, 0.69", "7.28847, 36.551, -28.6034, 0.69", "8.04427, 35.4398, -30.6787, 0.69", "8.54448, 34.7673, -32.0683, 0.69", "9.22728, 33.9532, -33.8932, 0.69", "9.48034, 33.682, -34.6686, 1.15", "9.63925, 33.5417, -35.2787, 0.92", "9.96952, 33.5992, -37.3106, 0.92", "10.0531, 33.7376, -37.9667, 0.92", "10.0814, 33.9155, -38.5679, 0.92", "10.1622, 34.6958, -40.7636, 0.92", "10.2068, 35.5444, -42.8344, 0.69", "10.2628, 36.1106, -43.8958, 0.69", "10.4352, 37.2083, -45.4262, 0.69", "10.6344, 38.1049, -46.5564, 0.69", "10.8397, 38.8871, -47.5461, 0.69", "11.0942, 39.707, -48.7117, 0.69", "11.4221, 40.5407, -50.1431, 0.69", "11.7778, 41.309, -51.7674, 0.69", "12.1235, 41.9962, -53.7129, 0.92", "12.3968, 42.3606, -55.6121, 0.69", "12.6124, 42.4449, -57.5098, 0.69", "12.8873, 42.2442, -59.5721, 0.92", "13.1641, 41.7211, -61.6458, 0.69", "13.5283, 40.7396, -64.3201, 0.92", "13.7604, 39.8172, -66.2952, 0.92", "13.865, 39.3174, -67.1924, 0.92", "14.0618, 38.174, -68.9603, 0.69", "14.3386, 36.3427, -71.4317, 0.69", "14.5442, 34.9418, -73.2184, 0.69", "14.8392, 33.359, -75.1047, 0.69", "15.1976, 31.7437, -76.9979, 0.92", "15.5014, 30.5385, -78.4385, 0.69", "15.847, 29.1242, -80.1022, 0.92", "16.3319, 27.4678, -81.9794, 0.46", "16.6108, 26.606, -82.9334, 0.46", "16.9495, 25.7113, -84.042, 0.46", "17.1495, 25.1668, -84.9224, 0.46", "17.4035, 24.5294, -86.3369, 0.46", "17.5905, 24.0423, -87.8821, 0.46", "17.701, 23.8135, -88.7995, 0.46", "17.7848, 23.6632, -90.0645, 0.69", "17.8599, 23.6685, -92.1339, 0.69", "17.9096, 23.7465, -93.229, 0.46", "18.0207, 23.9435, -94.7496, 0.46", "18.1297, 24.1928, -96.6935, 0.46", "18.2818, 24.3197, -98.9735, 0.46", "18.3895, 24.3199, -100.276, 0.46", "18.4736, 24.3013, -101.122, 0.69", "18.6945, 24.2799, -102.768, 0.46", "18.9138, 24.2924, -104.122, 0.46", "19.2361, 24.3643, -105.7, 0.46", "19.7413, 24.4096, -107.571, 0.46", "20.1102, 24.3872, -108.785, 0.46", "20.568, 24.4113, -110.279, 0.46" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "20.568, 24.4113, -110.279, 0.46", "21.7465, 23.7669, -113.11, 0.46", "22.6222, 23.3339, -115.412, 0.46", "23.1978, 22.9947, -117.202, 0.46", "23.5412, 22.7, -118.631, 0.46", "24.0264, 22.1587, -120.93, 0.46", "24.4587, 21.4956, -123.408, 0.46", "24.5371, 21.0884, -124.61, 0.46", "24.6614, 20.0311, -127.135, 0.46", "24.9342, 18.9614, -129.337, 0.46", "25.1166, 18.26, -130.694, 0.23", "25.3501, 17.5887, -131.819, 0.23", "25.9326, 15.9451, -134.054, 0.23", "26.5164, 14.2022, -136.128, 0.23", "27.4576, 12.4748, -137.809, 0.23" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "20.568, 24.4113, -110.279, 0.46", "20.6127, 24.6135, -112.572, 0.46", "20.7058, 24.8329, -114.503, 0.46", "20.8097, 24.9085, -115.795, 0.46", "20.9521, 24.9232, -117.149, 0.46", "21.0959, 24.9061, -118.614, 0.46", "21.1881, 24.9177, -119.78, 0.46", "21.3257, 24.919, -121.25, 0.46", "21.5012, 24.924, -123.21, 0.46", "21.6583, 24.9444, -125.117, 0.46", "21.7797, 24.9797, -126.957, 0.46", "21.8666, 25.0748, -128.297, 0.46", "22.0072, 25.2882, -130.866, 0.46" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_34", "dend_23", "dend_16", "dend_5", "dend_0", "dend_36", "dend_35", "dend_27", "dend_24", "dend_18", "dend_17", "dend_7", "dend_6", "dend_2", "dend_1", "dend_38", "dend_37", "dend_31", "dend_28", "dend_26", "dend_25", "dend_20", "dend_19", "dend_15", "dend_8", "dend_4", "dend_3", "dend_33", "dend_32", "dend_30", "dend_29", "dend_22", "dend_21", "dend_14", "dend_9", "dend_13", "dend_10", "dend_12", "dend_11" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_34", "dend_23", "dend_16", "dend_5", "dend_0", "dend_36", "dend_35", "dend_27", "dend_24", "dend_18", "dend_17", "dend_7", "dend_6", "dend_2", "dend_1", "dend_38", "dend_37", "dend_31", "dend_28", "dend_26", "dend_25", "dend_20", "dend_19", "dend_15", "dend_8", "dend_4", "dend_3", "dend_33", "dend_32", "dend_30", "dend_29", "dend_22", "dend_21", "dend_14", "dend_9", "dend_13", "dend_10", "dend_12", "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_32" ]
  }, {
    "name" : "OneSecGrp_SectionRef_35",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_37",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_40",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_34" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_35" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_36" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_31" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_38" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_38",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_37" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_33" ]
  }, {
    "name" : "OneSecGrp_SectionRef_36",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_39",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_42",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_41",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30", "dend_31", "dend_32", "dend_33", "dend_34", "dend_35", "dend_36", "dend_37", "dend_38" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_23", "dend_23", "dend_23", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_7", "dend_7", "dend_7", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_20", "dend_20", "dend_20", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_9", "dend_9", "dend_9", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "5.67935E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "5.67935E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "3.6794998E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cSTUT_7_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cSTUT_7_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cSTUT189_L1_NGCDA_0112c85cf0_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_34, id: dend_34, parent: soma_0
create dend_34
public dend_34
// Section: dend_23, id: dend_23, parent: soma_0
create dend_23
public dend_23
// Section: dend_16, id: dend_16, parent: soma_0
create dend_16
public dend_16
// Section: dend_5, id: dend_5, parent: soma_0
create dend_5
public dend_5
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_36, id: dend_36, parent: dend_34
create dend_36
public dend_36
// Section: dend_35, id: dend_35, parent: dend_34
create dend_35
public dend_35
// Section: dend_27, id: dend_27, parent: dend_23
create dend_27
public dend_27
// Section: dend_24, id: dend_24, parent: dend_23
create dend_24
public dend_24
// Section: dend_18, id: dend_18, parent: dend_16
create dend_18
public dend_18
// Section: dend_17, id: dend_17, parent: dend_16
create dend_17
public dend_17
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_38, id: dend_38, parent: dend_36
create dend_38
public dend_38
// Section: dend_37, id: dend_37, parent: dend_36
create dend_37
public dend_37
// Section: dend_31, id: dend_31, parent: dend_27
create dend_31
public dend_31
// Section: dend_28, id: dend_28, parent: dend_27
create dend_28
public dend_28
// Section: dend_26, id: dend_26, parent: dend_24
create dend_26
public dend_26
// Section: dend_25, id: dend_25, parent: dend_24
create dend_25
public dend_25
// Section: dend_20, id: dend_20, parent: dend_18
create dend_20
public dend_20
// Section: dend_19, id: dend_19, parent: dend_18
create dend_19
public dend_19
// Section: dend_15, id: dend_15, parent: dend_7
create dend_15
public dend_15
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_4, id: dend_4, parent: dend_2
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_33, id: dend_33, parent: dend_31
create dend_33
public dend_33
// Section: dend_32, id: dend_32, parent: dend_31
create dend_32
public dend_32
// Section: dend_30, id: dend_30, parent: dend_28
create dend_30
public dend_30
// Section: dend_29, id: dend_29, parent: dend_28
create dend_29
public dend_29
// Section: dend_22, id: dend_22, parent: dend_20
create dend_22
public dend_22
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_14, id: dend_14, parent: dend_8
create dend_14
public dend_14
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9
// Section: dend_13, id: dend_13, parent: dend_9
create dend_13
public dend_13
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10
// Section: dend_12, id: dend_12, parent: dend_10
create dend_12
public dend_12
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_34, dend_23, dend_16, dend_5, dend_0, dend_36, dend_35, dend_27, dend_24, dend_18, dend_17, dend_7, dend_6, dend_2, dend_1, dend_38, dend_37, dend_31, dend_28, dend_26, dend_25, dend_20, dend_19, dend_15, dend_8, dend_4, dend_3, dend_33, dend_32, dend_30, dend_29, dend_22, dend_21, dend_14, dend_9, dend_13, dend_10, dend_12, dend_11]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_34, dend_23, dend_16, dend_5, dend_0, dend_36, dend_35, dend_27, dend_24, dend_18, dend_17, dend_7, dend_6, dend_2, dend_1, dend_38, dend_37, dend_31, dend_28, dend_26, dend_25, dend_20, dend_19, dend_15, dend_8, dend_4, dend_3, dend_33, dend_32, dend_30, dend_29, dend_22, dend_21, dend_14, dend_9, dend_13, dend_10, dend_12, dend_11]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_32]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_35
// Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_37
// Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_40
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_34]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_35]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_36]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_31]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_38]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_38
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_37]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_33]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_36
// Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_39
// Group: {name=OneSecGrp_SectionRef_42, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_42
// Group: {name=OneSecGrp_SectionRef_41, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_41
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36, dend_37, dend_38], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_23, dend_23, dend_23, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_35, dend_35, dend_35, dend_35, dend_35, dend_27, dend_27, dend_27, dend_27, dend_27, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_9, dend_9, dend_9, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cSTUT_7_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cSTUT_7_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_34(0), soma_0(0.49999989780389625)
    connect dend_23(0), soma_0(0.49999989780389625)
    connect dend_16(0), soma_0(0.49999989780389625)
    connect dend_5(0), soma_0(0.49999989780389625)
    connect dend_0(0), soma_0(0.49999989780389625)
    connect axon_0(0), soma_0(1.0)
    connect dend_36(0), dend_34(1.0)
    connect dend_35(0), dend_34(1.0)
    connect dend_27(0), dend_23(1.0)
    connect dend_24(0), dend_23(1.0)
    connect dend_18(0), dend_16(1.0)
    connect dend_17(0), dend_16(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_38(0), dend_36(1.0)
    connect dend_37(0), dend_36(1.0)
    connect dend_31(0), dend_27(1.0)
    connect dend_28(0), dend_27(1.0)
    connect dend_26(0), dend_24(1.0)
    connect dend_25(0), dend_24(1.0)
    connect dend_20(0), dend_18(1.0)
    connect dend_19(0), dend_18(1.0)
    connect dend_15(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_4(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_33(0), dend_31(1.0)
    connect dend_32(0), dend_31(1.0)
    connect dend_30(0), dend_28(1.0)
    connect dend_29(0), dend_28(1.0)
    connect dend_22(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_14(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)
    connect dend_13(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)
    connect dend_12(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -2.48569, -6.90544, 0.0, 3.00414 ) }
    soma_0 { pt3dadd( -2.31617, -6.1725, 0.0, 5.1666 ) }
    soma_0 { pt3dadd( -2.14664, -5.43956, 0.0, 7.66052 ) }
    soma_0 { pt3dadd( -1.97711, -4.70663, 0.0, 9.30052 ) }
    soma_0 { pt3dadd( -1.80758, -3.97369, 0.0, 10.5298 ) }
    soma_0 { pt3dadd( -1.63805, -3.24075, 0.0, 11.6445 ) }
    soma_0 { pt3dadd( -1.46852, -2.50781, 0.0, 12.1344 ) }
    soma_0 { pt3dadd( -1.29899, -1.77488, 0.0, 12.5209 ) }
    soma_0 { pt3dadd( -1.12946, -1.04194, 0.0, 12.8728 ) }
    soma_0 { pt3dadd( -0.959926, -0.309003, 0.0, 13.2248 ) }
    soma_0 { pt3dadd( -0.790396, 0.423934, 0.0, 13.2522 ) }
    soma_0 { pt3dadd( -0.620866, 1.15687, 0.0, 13.1027 ) }
    soma_0 { pt3dadd( -0.451336, 1.88981, 0.0, 12.9579 ) }
    soma_0 { pt3dadd( -0.281807, 2.62275, 0.0, 12.8305 ) }
    soma_0 { pt3dadd( -0.112277, 3.35568, 0.0, 12.5604 ) }
    soma_0 { pt3dadd( 0.0572532, 4.08862, 0.0, 12.1963 ) }
    soma_0 { pt3dadd( 0.226783, 4.82156, 0.0, 11.554 ) }
    soma_0 { pt3dadd( 0.396313, 5.55449, 0.0, 10.4434 ) }
    soma_0 { pt3dadd( 0.565843, 6.28743, 0.0, 9.14943 ) }
    soma_0 { pt3dadd( 0.735373, 7.02037, 0.0, 6.97128 ) }
    soma_0 { pt3dadd( 0.904903, 7.75331, 0.0, 3.71762 ) }
    // Section: dend_34, id: dend_34, parent: soma_0 (entry count 21/100)
    dend_34 { pt3dclear() }
    dend_34 { pt3dadd( -3.94808, 0.562457, 6.09, 1.15 ) }
    dend_34 { pt3dadd( -5.37231, 0.604732, 7.39372, 1.15 ) }
    dend_34 { pt3dadd( -7.26461, 0.703533, 9.18427, 1.15 ) }
    dend_34 { pt3dadd( -8.59219, 0.862976, 10.5647, 1.15 ) }
    dend_34 { pt3dadd( -9.47796, 1.0566, 11.6391, 1.15 ) }
    dend_34 { pt3dadd( -10.59, 1.29966, 12.9879, 0.92 ) }
    dend_34 { pt3dadd( -11.5162, 1.50211, 14.1113, 0.92 ) }
    dend_34 { pt3dadd( -12.1332, 1.68986, 14.9983, 0.92 ) }
    dend_34 { pt3dadd( -12.9012, 1.96351, 16.1572, 0.92 ) }
    dend_34 { pt3dadd( -13.6251, 2.42564, 17.5628, 1.15 ) }
    // Section: dend_23, id: dend_23, parent: soma_0 (entry count 31/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( -1.43808, -6.58804, -9.43, 2.29 ) }
    dend_23 { pt3dadd( -1.43808, -6.58804, -9.43, 2.29 ) }
    dend_23 { pt3dadd( -1.79594, -7.21894, -11.0833, 2.29 ) }
    dend_23 { pt3dadd( -2.13123, -7.81006, -12.6323, 2.29 ) }
    // Section: dend_16, id: dend_16, parent: soma_0 (entry count 35/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 5.35192, 4.40546, -9.58, 1.15 ) }
    dend_16 { pt3dadd( 5.35192, 4.40546, -9.58, 1.15 ) }
    dend_16 { pt3dadd( 6.33306, 5.57975, -10.3137, 1.15 ) }
    dend_16 { pt3dadd( 7.1141, 6.47719, -11.0094, 1.15 ) }
    dend_16 { pt3dadd( 7.70041, 7.13186, -11.6431, 1.38 ) }
    dend_16 { pt3dadd( 8.3304, 7.80711, -12.4462, 1.38 ) }
    dend_16 { pt3dadd( 8.939, 8.47431, -13.3785, 1.15 ) }
    dend_16 { pt3dadd( 9.64608, 9.23608, -14.5109, 1.15 ) }
    dend_16 { pt3dadd( 10.4978, 10.1234, -15.9884, 1.15 ) }
    dend_16 { pt3dadd( 11.299, 10.9281, -17.5204, 1.15 ) }
    dend_16 { pt3dadd( 12.0974, 11.7501, -19.2983, 0.92 ) }
    dend_16 { pt3dadd( 13.0, 12.7248, -21.6591, 0.92 ) }
    // Section: dend_5, id: dend_5, parent: soma_0 (entry count 47/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 2.86192, 6.50546, -1.91, 4.59 ) }
    dend_5 { pt3dadd( 2.86192, 6.50546, -1.91, 4.59 ) }
    dend_5 { pt3dadd( 3.31364, 8.0206, -2.69354, 4.36 ) }
    dend_5 { pt3dadd( 3.9295, 10.0863, -3.7618, 3.21 ) }
    dend_5 { pt3dadd( 4.3304, 11.431, -4.45719, 2.52 ) }
    dend_5 { pt3dadd( 4.83258, 13.1154, -5.32828, 1.61 ) }
    dend_5 { pt3dadd( 5.20879, 14.3773, -5.98083, 1.61 ) }
    dend_5 { pt3dadd( 5.77613, 16.2322, -6.93429, 1.61 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 55/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -3.99808, 7.20896, 1.25, 3.21 ) }
    dend_0 { pt3dadd( -3.99808, 7.20896, 1.25, 3.21 ) }
    dend_0 { pt3dadd( -4.1909, 7.94025, 1.37261, 2.06 ) }
    dend_0 { pt3dadd( -4.64733, 9.67137, 1.66284, 1.61 ) }
    dend_0 { pt3dadd( -4.93507, 10.7626, 1.84581, 1.61 ) }
    dend_0 { pt3dadd( -5.35383, 12.3509, 2.11208, 1.61 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 61/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 0.904903, 7.75331, 0.0, 0.989129 ) }
    axon_0 { pt3dadd( 4.28518, 22.3675, 0.0, 0.989129 ) }
    axon_0 { pt3dadd( 7.66546, 36.9816, 0.0, 0.989129 ) }
    // Section: dend_36, id: dend_36, parent: dend_34 (entry count 64/100)
    dend_36 { pt3dclear() }
    dend_36 { pt3dadd( -13.6251, 2.42564, 17.5628, 0.92 ) }
    dend_36 { pt3dadd( -13.3025, 1.68841, 17.8413, 0.92 ) }
    dend_36 { pt3dadd( -12.9661, 0.727233, 18.1091, 0.69 ) }
    dend_36 { pt3dadd( -12.6926, -0.395614, 18.3343, 0.69 ) }
    dend_36 { pt3dadd( -12.4738, -1.29441, 18.5145, 0.92 ) }
    dend_36 { pt3dadd( -12.1813, -2.49523, 18.7554, 0.69 ) }
    dend_36 { pt3dadd( -11.9279, -3.53567, 18.964, 0.69 ) }
    dend_36 { pt3dadd( -11.6786, -4.83639, 19.2238, 0.69 ) }
    dend_36 { pt3dadd( -11.4916, -5.84293, 19.3512, 1.15 ) }
    // Section: dend_35, id: dend_35, parent: dend_34 (entry count 73/100)
    dend_35 { pt3dclear() }
    dend_35 { pt3dadd( -13.6251, 2.42564, 17.5628, 0.92 ) }
    dend_35 { pt3dadd( -13.4009, 1.9355, 18.8782, 0.92 ) }
    dend_35 { pt3dadd( -13.1122, 1.30416, 20.5725, 0.69 ) }
    dend_35 { pt3dadd( -12.7997, 0.620887, 22.4062, 0.69 ) }
    dend_35 { pt3dadd( -12.5219, 0.0136191, 24.0359, 0.69 ) }
    dend_35 { pt3dadd( -12.3622, -0.335609, 24.9731, 0.69 ) }
    // Section: dend_27, id: dend_27, parent: dend_23 (entry count 79/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( -2.13123, -7.81006, -12.6323, 1.38 ) }
    dend_27 { pt3dadd( -1.20304, -8.51659, -13.1434, 1.38 ) }
    dend_27 { pt3dadd( -0.201503, -9.27895, -13.6948, 1.38 ) }
    dend_27 { pt3dadd( 0.670866, -9.94299, -14.1751, 1.38 ) }
    dend_27 { pt3dadd( 1.55064, -10.6127, -14.6596, 1.38 ) }
    dend_27 { pt3dadd( 2.57525, -11.3926, -15.2237, 1.38 ) }
    // Section: dend_24, id: dend_24, parent: dend_23 (entry count 85/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( -2.13123, -7.81006, -12.6323, 0.92 ) }
    dend_24 { pt3dadd( -3.1097, -6.78712, -14.4692, 0.92 ) }
    dend_24 { pt3dadd( -4.12693, -4.62142, -17.1816, 0.69 ) }
    dend_24 { pt3dadd( -4.50255, -3.8217, -18.1831, 0.69 ) }
    dend_24 { pt3dadd( -5.1569, -2.42858, -19.9279, 0.92 ) }
    dend_24 { pt3dadd( -5.76179, -1.14075, -21.5408, 1.15 ) }
    dend_24 { pt3dadd( -6.52554, 0.485303, -23.5773, 1.15 ) }
    dend_24 { pt3dadd( -6.80564, 2.13379, -25.4155, 0.92 ) }
    // Section: dend_18, id: dend_18, parent: dend_16 (entry count 93/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 13.0, 12.7248, -21.6591, 0.92 ) }
    dend_18 { pt3dadd( 13.1836, 11.7382, -23.047, 0.92 ) }
    dend_18 { pt3dadd( 13.502, 10.5644, -24.5863, 0.92 ) }
    dend_18 { pt3dadd( 13.833, 9.48158, -25.9883, 0.92 ) }
    dend_18 { pt3dadd( 14.1142, 8.51242, -27.224, 0.92 ) }
    dend_18 { pt3dadd( 14.3273, 7.77225, -28.2454, 0.92 ) }
    dend_18 { pt3dadd( 14.5574, 7.02247, -29.4516, 0.92 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_18 { pt3dadd( 14.7357, 6.47925, -30.5315, 0.92 ) }
    dend_18 { pt3dadd( 15.0465, 6.06429, -31.9557, 0.92 ) }
    dend_18 { pt3dadd( 15.2119, 6.02463, -32.5166, 0.92 ) }
    dend_18 { pt3dadd( 15.7302, 6.12673, -33.8973, 0.92 ) }
    dend_18 { pt3dadd( 16.3165, 6.39693, -35.4127, 0.92 ) }
    dend_18 { pt3dadd( 16.9809, 6.8826, -37.2007, 0.92 ) }
    dend_18 { pt3dadd( 17.4182, 7.2702, -38.4303, 0.92 ) }
    dend_18 { pt3dadd( 18.1461, 7.87628, -40.0034, 0.92 ) }
    dend_18 { pt3dadd( 19.4027, 8.70442, -42.2255, 0.92 ) }
    // Section: dend_17, id: dend_17, parent: dend_16 (entry count 9/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 13.0, 12.7248, -21.6591, 0.69 ) }
    dend_17 { pt3dadd( 12.7496, 12.2255, -21.9554, 0.69 ) }
    dend_17 { pt3dadd( 12.182, 11.18, -22.4729, 0.46 ) }
    dend_17 { pt3dadd( 11.5567, 10.2668, -22.9924, 0.46 ) }
    dend_17 { pt3dadd( 11.0451, 9.65972, -23.4402, 0.46 ) }
    dend_17 { pt3dadd( 10.5098, 9.11334, -23.9629, 0.46 ) }
    dend_17 { pt3dadd( 9.82037, 8.4487, -24.737, 0.46 ) }
    dend_17 { pt3dadd( 9.09498, 7.84241, -25.6675, 0.46 ) }
    dend_17 { pt3dadd( 8.04067, 7.03296, -27.2365, 0.46 ) }
    dend_17 { pt3dadd( 7.36482, 6.51033, -28.4699, 0.46 ) }
    dend_17 { pt3dadd( 6.71117, 5.99634, -30.0091, 0.46 ) }
    dend_17 { pt3dadd( 6.27877, 5.61522, -31.5162, 0.46 ) }
    dend_17 { pt3dadd( 6.05073, 5.29691, -33.1385, 0.46 ) }
    dend_17 { pt3dadd( 6.01766, 5.07069, -34.5354, 0.46 ) }
    dend_17 { pt3dadd( 6.14057, 4.90951, -35.6485, 0.46 ) }
    dend_17 { pt3dadd( 6.3422, 4.76375, -36.7078, 0.46 ) }
    dend_17 { pt3dadd( 6.70352, 4.53157, -38.3859, 0.46 ) }
    dend_17 { pt3dadd( 7.0718, 4.25207, -40.0902, 0.46 ) }
    dend_17 { pt3dadd( 7.33588, 4.02049, -41.3757, 0.46 ) }
    dend_17 { pt3dadd( 7.66166, 3.69638, -43.2751, 0.46 ) }
    dend_17 { pt3dadd( 7.86605, 3.47399, -44.8194, 0.46 ) }
    dend_17 { pt3dadd( 8.11401, 3.27196, -46.9707, 0.46 ) }
    dend_17 { pt3dadd( 8.33601, 3.21244, -49.2185, 0.46 ) }
    dend_17 { pt3dadd( 8.44697, 3.30614, -50.5403, 0.46 ) }
    dend_17 { pt3dadd( 8.59708, 3.54043, -52.4104, 0.46 ) }
    dend_17 { pt3dadd( 8.81996, 4.03473, -54.8862, 0.46 ) }
    dend_17 { pt3dadd( 8.98672, 4.4849, -56.4235, 0.46 ) }
    dend_17 { pt3dadd( 9.09712, 4.83142, -57.2349, 0.46 ) }
    dend_17 { pt3dadd( 9.22118, 5.41698, -58.2455, 0.46 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 38/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 5.77613, 16.2322, -6.93429, 1.83 ) }
    dend_7 { pt3dadd( 5.82262, 17.3789, -8.05618, 1.83 ) }
    dend_7 { pt3dadd( 5.8534, 18.1381, -8.79888, 1.61 ) }
    dend_7 { pt3dadd( 5.91962, 19.7712, -10.3967, 1.61 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 42/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 5.77613, 16.2322, -6.93429, 0.92 ) }
    dend_6 { pt3dadd( 6.86691, 18.4993, -6.70339, 0.92 ) }
    dend_6 { pt3dadd( 7.68492, 21.3057, -7.01264, 0.92 ) }
    dend_6 { pt3dadd( 7.94212, 23.058, -7.35399, 0.69 ) }
    dend_6 { pt3dadd( 8.08255, 25.1744, -7.66445, 0.69 ) }
    dend_6 { pt3dadd( 8.16744, 27.9958, -8.0246, 0.69 ) }
    dend_6 { pt3dadd( 8.2754, 31.1549, -8.34469, 0.69 ) }
    dend_6 { pt3dadd( 8.24868, 33.4367, -8.65482, 0.69 ) }
    dend_6 { pt3dadd( 8.09853, 36.0422, -9.10596, 0.92 ) }
    dend_6 { pt3dadd( 7.86658, 38.7619, -9.54834, 1.15 ) }
    dend_6 { pt3dadd( 7.70253, 40.4218, -9.73249, 0.69 ) }
    dend_6 { pt3dadd( 7.4841, 42.0689, -9.71716, 0.46 ) }
    dend_6 { pt3dadd( 7.25572, 44.8995, -9.33348, 0.46 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 55/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -5.35383, 12.3509, 2.11208, 1.83 ) }
    dend_2 { pt3dadd( -5.52058, 12.495, 1.91811, 1.83 ) }
    dend_2 { pt3dadd( -6.80879, 13.3833, 0.735586, 1.83 ) }
    dend_2 { pt3dadd( -7.99384, 14.0717, -0.270182, 1.61 ) }
    dend_2 { pt3dadd( -8.91301, 14.5631, -0.990097, 1.15 ) }
    dend_2 { pt3dadd( -9.95128, 15.1181, -1.80328, 1.15 ) }
    dend_2 { pt3dadd( -10.9455, 15.6496, -2.58197, 1.15 ) }
    dend_2 { pt3dadd( -12.1447, 16.2218, -3.44392, 1.15 ) }
    dend_2 { pt3dadd( -13.1668, 16.6225, -4.04727, 1.38 ) }
    dend_2 { pt3dadd( -14.7412, 17.1626, -4.83229, 1.15 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 65/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -5.35383, 12.3509, 2.11208, 0.92 ) }
    dend_1 { pt3dadd( -5.23867, 13.9902, 2.12221, 0.92 ) }
    dend_1 { pt3dadd( -5.27217, 15.0974, 2.13604, 0.92 ) }
    dend_1 { pt3dadd( -5.34422, 16.5591, 2.14379, 0.92 ) }
    dend_1 { pt3dadd( -5.37108, 17.6179, 2.13257, 0.92 ) }
    dend_1 { pt3dadd( -5.34447, 18.4756, 2.08068, 0.92 ) }
    dend_1 { pt3dadd( -5.18404, 20.5212, 1.8156, 0.92 ) }
    dend_1 { pt3dadd( -5.06853, 21.1948, 1.65168, 0.92 ) }
    dend_1 { pt3dadd( -4.95897, 21.8346, 1.41659, 0.92 ) }
    dend_1 { pt3dadd( -4.8725, 22.6066, 1.03402, 0.92 ) }
    dend_1 { pt3dadd( -4.85714, 23.8873, 0.252357, 0.92 ) }
    dend_1 { pt3dadd( -4.93242, 24.6448, -0.365929, 0.92 ) }
    dend_1 { pt3dadd( -4.99889, 25.0754, -0.772365, 0.92 ) }
    dend_1 { pt3dadd( -5.26231, 25.8288, -1.46638, 0.92 ) }
    dend_1 { pt3dadd( -5.65195, 26.5924, -2.1323, 0.69 ) }
    dend_1 { pt3dadd( -6.14003, 27.4835, -2.88531, 0.69 ) }
    dend_1 { pt3dadd( -6.61859, 28.3197, -3.63892, 0.69 ) }
    dend_1 { pt3dadd( -7.01604, 29.0265, -4.47183, 0.69 ) }
    dend_1 { pt3dadd( -7.352, 29.6752, -5.35765, 0.69 ) }
    dend_1 { pt3dadd( -7.47132, 30.0437, -5.97334, 0.69 ) }
    dend_1 { pt3dadd( -7.49505, 30.5274, -6.91576, 0.46 ) }
    dend_1 { pt3dadd( -7.3069, 31.0405, -8.26104, 0.46 ) }
    dend_1 { pt3dadd( -7.01737, 31.1359, -9.54713, 0.46 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 88/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 7.66546, 36.9816, 0.0, 0.480383 ) }
    axon_1 { pt3dadd( 11.0457, 51.5958, 0.0, 0.480383 ) }
    axon_1 { pt3dadd( 14.426, 66.21, 0.0, 0.480383 ) }
    // Section: dend_38, id: dend_38, parent: dend_36 (entry count 91/100)
    dend_38 { pt3dclear() }
    dend_38 { pt3dadd( -11.4916, -5.84293, 19.3512, 0.69 ) }
    dend_38 { pt3dadd( -10.8397, -7.47784, 19.6748, 0.69 ) }
    dend_38 { pt3dadd( -9.77707, -9.54053, 19.9557, 0.69 ) }
    dend_38 { pt3dadd( -9.03951, -10.9723, 20.1507, 0.69 ) }
    dend_38 { pt3dadd( -8.2443, -12.516, 20.361, 0.69 ) }
    dend_38 { pt3dadd( -7.54974, -13.8643, 20.5446, 0.69 ) }
    dend_38 { pt3dadd( -6.66952, -15.573, 20.7774, 0.69 ) }
    dend_38 { pt3dadd( -5.47609, -17.6905, 20.9841, 0.69 ) }
    // Section: dend_37, id: dend_37, parent: dend_36 (entry count 99/100)
    dend_37 { pt3dclear() }
    dend_37 { pt3dadd( -11.4916, -5.84293, 19.3512, 0.69 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_37 { pt3dadd( -12.5422, -7.79483, 19.5445, 0.69 ) }
    dend_37 { pt3dadd( -13.1097, -8.98788, 19.6415, 0.69 ) }
    dend_37 { pt3dadd( -13.631, -10.3181, 19.7019, 0.69 ) }
    dend_37 { pt3dadd( -14.2064, -11.9471, 19.7537, 0.69 ) }
    dend_37 { pt3dadd( -14.7523, -13.3879, 19.8084, 0.69 ) }
    dend_37 { pt3dadd( -15.2614, -14.6124, 19.8397, 0.69 ) }
    dend_37 { pt3dadd( -15.7457, -15.7873, 19.8524, 0.69 ) }
    dend_37 { pt3dadd( -16.3549, -17.0712, 19.8868, 0.69 ) }
    dend_37 { pt3dadd( -17.2023, -18.6166, 19.9682, 0.69 ) }
    dend_37 { pt3dadd( -18.0436, -20.0139, 20.1022, 0.69 ) }
    dend_37 { pt3dadd( -18.9594, -21.3515, 20.3233, 0.69 ) }
    dend_37 { pt3dadd( -19.9374, -22.5495, 20.6651, 0.69 ) }
    dend_37 { pt3dadd( -21.3991, -24.155, 21.3153, 0.69 ) }
    dend_37 { pt3dadd( -22.2805, -25.0412, 21.7474, 0.69 ) }
    dend_37 { pt3dadd( -23.2598, -25.9811, 22.2927, 0.69 ) }
    dend_37 { pt3dadd( -24.0494, -26.7415, 22.8157, 0.46 ) }
    dend_37 { pt3dadd( -25.1139, -27.7083, 23.6723, 0.46 ) }
    dend_37 { pt3dadd( -26.2791, -28.6627, 24.7262, 0.46 ) }
    // Section: dend_31, id: dend_31, parent: dend_27 (entry count 18/100)
    dend_31 { pt3dclear() }
    dend_31 { pt3dadd( 2.57525, -11.3926, -15.2237, 0.92 ) }
    dend_31 { pt3dadd( 2.37668, -12.7645, -15.2168, 0.92 ) }
    dend_31 { pt3dadd( 2.14813, -14.049, -15.1647, 0.92 ) }
    dend_31 { pt3dadd( 1.92826, -15.0147, -15.1167, 0.92 ) }
    dend_31 { pt3dadd( 1.69948, -15.9716, -15.0697, 0.92 ) }
    dend_31 { pt3dadd( 1.38372, -17.125, -15.0074, 0.92 ) }
    dend_31 { pt3dadd( 1.22905, -17.5712, -14.9884, 0.92 ) }
    dend_31 { pt3dadd( 0.850872, -18.3885, -14.967, 0.92 ) }
    dend_31 { pt3dadd( 0.0151849, -19.9376, -14.9519, 0.92 ) }
    dend_31 { pt3dadd( -0.704239, -21.1268, -14.9661, 0.92 ) }
    dend_31 { pt3dadd( -1.39465, -22.2499, -15.0568, 0.92 ) }
    dend_31 { pt3dadd( -2.23914, -23.5559, -15.2055, 1.15 ) }
    dend_31 { pt3dadd( -3.35063, -25.2082, -15.4285, 0.92 ) }
    dend_31 { pt3dadd( -3.78669, -25.8437, -15.5385, 0.92 ) }
    dend_31 { pt3dadd( -4.38219, -26.6425, -15.7076, 1.15 ) }
    dend_31 { pt3dadd( -5.36812, -27.8839, -16.0355, 0.92 ) }
    // Section: dend_28, id: dend_28, parent: dend_27 (entry count 34/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 2.57525, -11.3926, -15.2237, 0.69 ) }
    dend_28 { pt3dadd( 3.94146, -13.369, -15.1221, 0.69 ) }
    dend_28 { pt3dadd( 5.31042, -15.3451, -15.2175, 0.69 ) }
    dend_28 { pt3dadd( 6.56218, -17.2424, -15.4774, 0.46 ) }
    dend_28 { pt3dadd( 7.85682, -19.3322, -15.9258, 0.46 ) }
    dend_28 { pt3dadd( 9.06064, -21.4635, -16.4677, 0.46 ) }
    dend_28 { pt3dadd( 10.3104, -23.8425, -17.2171, 0.46 ) }
    dend_28 { pt3dadd( 11.0476, -25.3996, -18.0156, 0.46 ) }
    dend_28 { pt3dadd( 11.5367, -26.6037, -18.8613, 0.46 ) }
    dend_28 { pt3dadd( 11.9092, -27.709, -19.7687, 0.46 ) }
    dend_28 { pt3dadd( 12.1302, -28.7479, -20.6433, 0.46 ) }
    dend_28 { pt3dadd( 12.3315, -30.146, -21.8461, 0.46 ) }
    dend_28 { pt3dadd( 12.4861, -32.1892, -23.6048, 0.46 ) }
    dend_28 { pt3dadd( 12.5715, -33.4939, -24.8219, 0.46 ) }
    dend_28 { pt3dadd( 12.6951, -34.8973, -26.112, 0.46 ) }
    dend_28 { pt3dadd( 12.8091, -36.0077, -27.1412, 0.46 ) }
    // Section: dend_26, id: dend_26, parent: dend_24 (entry count 50/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( -6.80564, 2.13379, -25.4155, 0.69 ) }
    dend_26 { pt3dadd( -6.96928, 2.33138, -28.0892, 0.69 ) }
    dend_26 { pt3dadd( -7.0609, 2.52862, -29.7683, 0.69 ) }
    dend_26 { pt3dadd( -7.15324, 2.70511, -30.8905, 0.69 ) }
    dend_26 { pt3dadd( -7.33211, 2.89788, -32.1799, 0.69 ) }
    dend_26 { pt3dadd( -7.51575, 3.03713, -33.182, 0.69 ) }
    dend_26 { pt3dadd( -7.71833, 3.16154, -34.1518, 0.69 ) }
    dend_26 { pt3dadd( -8.24725, 3.36133, -35.7872, 0.69 ) }
    dend_26 { pt3dadd( -8.6505, 3.48756, -36.7966, 0.69 ) }
    dend_26 { pt3dadd( -9.36446, 3.63471, -38.3096, 0.69 ) }
    dend_26 { pt3dadd( -10.0964, 3.69329, -39.578, 0.69 ) }
    dend_26 { pt3dadd( -10.7701, 3.69804, -40.5911, 0.69 ) }
    dend_26 { pt3dadd( -11.8018, 3.64049, -41.9537, 0.46 ) }
    dend_26 { pt3dadd( -13.3057, 3.51577, -43.5881, 0.46 ) }
    dend_26 { pt3dadd( -14.5479, 3.42629, -44.7552, 0.46 ) }
    dend_26 { pt3dadd( -15.6618, 3.38842, -45.6799, 0.46 ) }
    dend_26 { pt3dadd( -17.1841, 3.40748, -46.8921, 0.46 ) }
    dend_26 { pt3dadd( -18.8067, 3.43636, -48.1243, 0.46 ) }
    dend_26 { pt3dadd( -21.2018, 3.50322, -49.9066, 0.23 ) }
    dend_26 { pt3dadd( -22.2222, 3.58686, -50.5852, 0.46 ) }
    dend_26 { pt3dadd( -23.7943, 3.80907, -51.617, 0.46 ) }
    dend_26 { pt3dadd( -25.6032, 4.17804, -52.8331, 0.46 ) }
    // Section: dend_25, id: dend_25, parent: dend_24 (entry count 72/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( -6.80564, 2.13379, -25.4155, 0.69 ) }
    dend_25 { pt3dadd( -7.17954, 3.74579, -25.7146, 0.69 ) }
    dend_25 { pt3dadd( -7.58358, 4.98722, -26.0455, 0.69 ) }
    dend_25 { pt3dadd( -7.94773, 6.10084, -26.3772, 0.69 ) }
    dend_25 { pt3dadd( -8.49555, 7.77614, -26.8763, 0.69 ) }
    dend_25 { pt3dadd( -9.21742, 9.98371, -27.5338, 0.69 ) }
    dend_25 { pt3dadd( -9.59474, 11.1376, -27.8776, 0.46 ) }
    dend_25 { pt3dadd( -10.3869, 13.266, -28.6275, 0.46 ) }
    dend_25 { pt3dadd( -10.6988, 14.0214, -28.9242, 0.46 ) }
    // Section: dend_20, id: dend_20, parent: dend_18 (entry count 81/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 19.4027, 8.70442, -42.2255, 0.69 ) }
    dend_20 { pt3dadd( 19.7697, 10.2484, -42.542, 0.69 ) }
    dend_20 { pt3dadd( 20.0057, 11.2408, -42.7455, 0.69 ) }
    dend_20 { pt3dadd( 20.3484, 12.6826, -43.0411, 0.69 ) }
    // Section: dend_19, id: dend_19, parent: dend_18 (entry count 85/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 19.4027, 8.70442, -42.2255, 0.69 ) }
    dend_19 { pt3dadd( 18.2696, 8.14326, -43.0435, 0.69 ) }
    dend_19 { pt3dadd( 16.6463, 7.14055, -43.8571, 0.69 ) }
    dend_19 { pt3dadd( 15.6537, 6.43054, -44.3833, 0.69 ) }
    dend_19 { pt3dadd( 14.7338, 5.69423, -44.9013, 0.69 ) }
    dend_19 { pt3dadd( 13.4389, 4.59612, -45.7269, 0.46 ) }
    dend_19 { pt3dadd( 11.5845, 2.93212, -47.2595, 0.46 ) }
    dend_19 { pt3dadd( 11.0673, 2.38526, -47.7293, 0.23 ) }
    dend_19 { pt3dadd( 10.3148, 1.33966, -48.6197, 0.23 ) }
    dend_19 { pt3dadd( 10.0675, 0.940056, -48.9751, 0.23 ) }
    dend_19 { pt3dadd( 9.44662, -0.256127, -50.2633, 0.23 ) }
    dend_19 { pt3dadd( 8.84443, -1.6138, -52.1247, 0.23 ) }
    dend_19 { pt3dadd( 8.5606, -2.30112, -53.2704, 0.23 ) }
    dend_19 { pt3dadd( 8.25879, -2.94411, -54.3676, 0.23 ) }
    // Section: dend_15, id: dend_15, parent: dend_7 (entry count 99/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 5.91962, 19.7712, -10.3967, 0.92 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_15 { pt3dadd( 7.1392, 20.758, -10.8035, 0.92 ) }
    dend_15 { pt3dadd( 8.72523, 21.8394, -11.1467, 0.92 ) }
    dend_15 { pt3dadd( 10.0052, 22.6851, -11.3044, 0.92 ) }
    dend_15 { pt3dadd( 10.9628, 23.3108, -11.3942, 0.92 ) }
    dend_15 { pt3dadd( 12.4872, 24.3432, -11.517, 1.15 ) }
    dend_15 { pt3dadd( 13.9948, 25.3659, -11.6265, 0.92 ) }
    dend_15 { pt3dadd( 14.9364, 25.9114, -11.6686, 1.15 ) }
    dend_15 { pt3dadd( 16.4088, 26.6761, -11.752, 0.92 ) }
    dend_15 { pt3dadd( 17.432, 27.2411, -11.9206, 0.92 ) }
    dend_15 { pt3dadd( 18.4388, 27.9348, -12.2052, 0.92 ) }
    dend_15 { pt3dadd( 18.8749, 28.3163, -12.427, 0.92 ) }
    dend_15 { pt3dadd( 20.0818, 29.5191, -13.3941, 0.92 ) }
    dend_15 { pt3dadd( 20.862, 30.3934, -14.3466, 0.92 ) }
    dend_15 { pt3dadd( 21.6174, 31.4088, -15.9794, 0.92 ) }
    dend_15 { pt3dadd( 21.9751, 31.9394, -17.0291, 1.15 ) }
    dend_15 { pt3dadd( 22.4193, 32.6202, -18.5468, 0.92 ) }
    dend_15 { pt3dadd( 22.7342, 33.2238, -19.7799, 1.15 ) }
    dend_15 { pt3dadd( 23.0789, 34.1048, -21.3312, 1.15 ) }
    dend_15 { pt3dadd( 23.6483, 35.6097, -23.7592, 0.69 ) }
    dend_15 { pt3dadd( 23.9609, 36.394, -25.0126, 0.46 ) }
    dend_15 { pt3dadd( 24.1157, 36.7901, -25.6682, 0.46 ) }
    dend_15 { pt3dadd( 24.2649, 38.4625, -24.4615, 0.46 ) }
    dend_15 { pt3dadd( 24.2738, 40.0842, -23.1065, 0.23 ) }
    dend_15 { pt3dadd( 24.2701, 41.6202, -21.7342, 0.23 ) }
    dend_15 { pt3dadd( 24.2488, 42.2033, -21.1293, 0.23 ) }
    dend_15 { pt3dadd( 24.0607, 43.5142, -19.573, 0.23 ) }
    dend_15 { pt3dadd( 23.9092, 44.1681, -18.6621, 0.23 ) }
    dend_15 { pt3dadd( 23.6271, 44.9808, -17.0957, 0.23 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 28/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 5.91962, 19.7712, -10.3967, 1.15 ) }
    dend_8 { pt3dadd( 6.21598, 20.9798, -11.2662, 1.15 ) }
    dend_8 { pt3dadd( 6.66216, 22.3628, -12.0676, 1.15 ) }
    dend_8 { pt3dadd( 7.27354, 23.8762, -12.7282, 1.15 ) }
    dend_8 { pt3dadd( 7.98076, 25.5353, -13.399, 0.92 ) }
    dend_8 { pt3dadd( 8.28661, 26.2637, -13.7295, 1.15 ) }
    dend_8 { pt3dadd( 8.81374, 27.6785, -14.5181, 1.15 ) }
    dend_8 { pt3dadd( 9.08122, 28.5479, -15.1653, 1.15 ) }
    dend_8 { pt3dadd( 9.28097, 29.6635, -16.1126, 1.15 ) }
    dend_8 { pt3dadd( 9.39146, 30.9817, -17.3558, 1.15 ) }
    dend_8 { pt3dadd( 9.33844, 31.999, -18.525, 1.15 ) }
    dend_8 { pt3dadd( 9.05939, 33.2864, -20.3479, 1.15 ) }
    dend_8 { pt3dadd( 8.59281, 34.4449, -22.3352, 1.15 ) }
    dend_8 { pt3dadd( 8.30918, 34.8736, -23.2444, 1.15 ) }
    // Section: dend_4, id: dend_4, parent: dend_2 (entry count 42/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -14.7412, 17.1626, -4.83229, 0.92 ) }
    dend_4 { pt3dadd( -15.7402, 18.2898, -3.51225, 0.92 ) }
    dend_4 { pt3dadd( -17.1775, 19.3579, -1.94936, 0.92 ) }
    dend_4 { pt3dadd( -18.6, 19.9553, -0.59685, 0.92 ) }
    dend_4 { pt3dadd( -20.0269, 20.1788, 0.582788, 0.92 ) }
    dend_4 { pt3dadd( -21.4681, 20.0102, 1.70831, 0.92 ) }
    dend_4 { pt3dadd( -22.8632, 19.5109, 2.83052, 0.92 ) }
    dend_4 { pt3dadd( -24.0547, 18.6127, 3.61635, 1.15 ) }
    dend_4 { pt3dadd( -24.9039, 17.786, 4.08999, 1.15 ) }
    dend_4 { pt3dadd( -25.596, 17.0577, 4.42994, 0.92 ) }
    dend_4 { pt3dadd( -26.8936, 15.6352, 5.04295, 0.92 ) }
    dend_4 { pt3dadd( -28.0081, 14.4832, 5.56727, 0.92 ) }
    dend_4 { pt3dadd( -28.9679, 13.6211, 5.99389, 0.92 ) }
    dend_4 { pt3dadd( -30.7201, 12.2915, 6.64701, 1.15 ) }
    dend_4 { pt3dadd( -32.0602, 11.4176, 7.0566, 1.15 ) }
    dend_4 { pt3dadd( -33.4813, 10.6537, 7.39448, 0.92 ) }
    dend_4 { pt3dadd( -35.5487, 9.7913, 7.73945, 0.92 ) }
    dend_4 { pt3dadd( -37.7414, 9.14863, 8.00714, 0.92 ) }
    dend_4 { pt3dadd( -39.2656, 8.90765, 8.15422, 0.92 ) }
    dend_4 { pt3dadd( -40.5906, 8.9235, 8.16749, 1.15 ) }
    dend_4 { pt3dadd( -42.0622, 9.26906, 7.98341, 1.15 ) }
    dend_4 { pt3dadd( -42.5891, 9.57446, 7.80909, 1.15 ) }
    dend_4 { pt3dadd( -43.7413, 10.6394, 7.13532, 0.92 ) }
    dend_4 { pt3dadd( -44.7289, 11.8949, 6.36384, 0.69 ) }
    dend_4 { pt3dadd( -45.4579, 12.9772, 5.71281, 0.69 ) }
    dend_4 { pt3dadd( -46.2316, 14.2598, 4.90966, 0.69 ) }
    dend_4 { pt3dadd( -46.9422, 15.4853, 4.09991, 0.46 ) }
    dend_4 { pt3dadd( -47.4644, 16.4205, 3.41841, 0.46 ) }
    dend_4 { pt3dadd( -48.1356, 17.6423, 2.36465, 0.46 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 71/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -14.7412, 17.1626, -4.83229, 0.92 ) }
    dend_3 { pt3dadd( -15.0966, 18.0043, -5.65121, 0.92 ) }
    dend_3 { pt3dadd( -15.3878, 18.7974, -6.41312, 0.92 ) }
    dend_3 { pt3dadd( -15.6521, 19.3881, -7.01277, 0.92 ) }
    dend_3 { pt3dadd( -15.9628, 19.9896, -7.65827, 0.92 ) }
    dend_3 { pt3dadd( -16.2948, 20.5043, -8.29481, 0.92 ) }
    dend_3 { pt3dadd( -16.5701, 20.8597, -8.80513, 0.92 ) }
    dend_3 { pt3dadd( -17.2082, 21.5898, -9.95054, 0.92 ) }
    dend_3 { pt3dadd( -17.5985, 21.9101, -10.4917, 0.92 ) }
    dend_3 { pt3dadd( -17.8262, 22.035, -10.7416, 1.15 ) }
    dend_3 { pt3dadd( -18.6157, 22.3872, -11.4841, 1.15 ) }
    dend_3 { pt3dadd( -19.2885, 22.6818, -12.0745, 1.15 ) }
    dend_3 { pt3dadd( -20.0413, 23.035, -12.7449, 1.15 ) }
    dend_3 { pt3dadd( -21.0133, 23.6434, -13.6205, 0.92 ) }
    dend_3 { pt3dadd( -21.6562, 24.1904, -14.2311, 0.92 ) }
    dend_3 { pt3dadd( -22.1969, 24.7105, -14.7104, 0.92 ) }
    dend_3 { pt3dadd( -22.8044, 25.3095, -15.1691, 0.69 ) }
    dend_3 { pt3dadd( -23.3606, 25.8244, -15.5424, 0.69 ) }
    dend_3 { pt3dadd( -24.114, 26.4495, -16.0346, 0.69 ) }
    dend_3 { pt3dadd( -24.8487, 27.0313, -16.5441, 0.69 ) }
    dend_3 { pt3dadd( -25.8235, 27.8462, -17.0988, 0.69 ) }
    dend_3 { pt3dadd( -26.7182, 28.6068, -17.4977, 0.92 ) }
    dend_3 { pt3dadd( -27.6865, 29.4594, -17.7889, 1.15 ) }
    dend_3 { pt3dadd( -28.6154, 30.3157, -17.9344, 1.15 ) }
    dend_3 { pt3dadd( -29.5015, 31.2052, -17.8798, 0.92 ) }
    dend_3 { pt3dadd( -30.7795, 32.9227, -17.3025, 0.69 ) }
    dend_3 { pt3dadd( -31.1847, 33.7766, -16.6963, 0.69 ) }
    dend_3 { pt3dadd( -31.3202, 34.3439, -16.0293, 0.69 ) }
    dend_3 { pt3dadd( -31.3615, 34.7224, -15.454, 0.69 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_3 { pt3dadd( -31.3561, 35.2554, -14.428, 0.69 ) }
    dend_3 { pt3dadd( -31.3407, 35.4789, -13.8202, 0.69 ) }
    dend_3 { pt3dadd( -31.3796, 35.6499, -12.8205, 0.69 ) }
    dend_3 { pt3dadd( -31.4013, 35.6563, -11.8963, 0.69 ) }
    // Section: dend_33, id: dend_33, parent: dend_31 (entry count 4/100)
    dend_33 { pt3dclear() }
    dend_33 { pt3dadd( -5.36812, -27.8839, -16.0355, 0.69 ) }
    dend_33 { pt3dadd( -6.41191, -29.7337, -13.0307, 0.69 ) }
    dend_33 { pt3dadd( -7.15277, -31.073, -11.1531, 0.69 ) }
    dend_33 { pt3dadd( -7.73213, -32.227, -9.84678, 0.69 ) }
    dend_33 { pt3dadd( -8.25126, -33.3993, -8.76013, 0.69 ) }
    dend_33 { pt3dadd( -8.65556, -34.4049, -7.86336, 0.69 ) }
    dend_33 { pt3dadd( -8.84137, -34.8583, -7.44999, 0.69 ) }
    dend_33 { pt3dadd( -9.10064, -35.6081, -6.86132, 0.69 ) }
    dend_33 { pt3dadd( -9.48389, -36.9629, -5.89017, 0.46 ) }
    dend_33 { pt3dadd( -9.79043, -38.7303, -4.68466, 0.69 ) }
    dend_33 { pt3dadd( -9.91254, -41.0689, -3.08427, 0.69 ) }
    dend_33 { pt3dadd( -9.86183, -42.4798, -2.16018, 0.69 ) }
    dend_33 { pt3dadd( -9.80025, -43.4139, -1.54694, 0.69 ) }
    dend_33 { pt3dadd( -9.66115, -44.7493, -0.62433, 0.69 ) }
    dend_33 { pt3dadd( -9.45189, -46.5497, 0.67774, 0.46 ) }
    dend_33 { pt3dadd( -9.36848, -47.5833, 1.51926, 0.46 ) }
    dend_33 { pt3dadd( -9.25162, -48.9053, 2.51776, 0.46 ) }
    dend_33 { pt3dadd( -9.1473, -50.3167, 3.60918, 0.46 ) }
    dend_33 { pt3dadd( -9.18326, -51.8576, 4.97818, 0.46 ) }
    dend_33 { pt3dadd( -9.44214, -53.4781, 6.80662, 0.46 ) }
    dend_33 { pt3dadd( -10.0171, -55.2158, 9.31406, 0.46 ) }
    // Section: dend_32, id: dend_32, parent: dend_31 (entry count 25/100)
    dend_32 { pt3dclear() }
    dend_32 { pt3dadd( -5.36812, -27.8839, -16.0355, 0.69 ) }
    dend_32 { pt3dadd( -5.53476, -28.6934, -17.4733, 0.69 ) }
    dend_32 { pt3dadd( -5.77728, -29.6591, -18.9454, 0.69 ) }
    dend_32 { pt3dadd( -5.9671, -30.6451, -20.2214, 0.69 ) }
    dend_32 { pt3dadd( -6.05765, -31.4076, -21.1083, 0.69 ) }
    dend_32 { pt3dadd( -6.10603, -32.1497, -21.862, 0.69 ) }
    dend_32 { pt3dadd( -6.21472, -33.4262, -23.0387, 0.69 ) }
    dend_32 { pt3dadd( -6.31813, -34.6091, -23.9187, 0.69 ) }
    dend_32 { pt3dadd( -6.43683, -35.7028, -24.5236, 0.69 ) }
    dend_32 { pt3dadd( -6.51646, -36.4172, -24.8772, 0.69 ) }
    dend_32 { pt3dadd( -6.56188, -37.4653, -25.3214, 0.69 ) }
    dend_32 { pt3dadd( -6.52578, -39.0276, -26.0202, 0.69 ) }
    dend_32 { pt3dadd( -6.48896, -39.8304, -26.4117, 0.69 ) }
    dend_32 { pt3dadd( -6.50865, -41.4384, -27.2985, 0.69 ) }
    dend_32 { pt3dadd( -6.6285, -42.7242, -28.1309, 0.69 ) }
    dend_32 { pt3dadd( -6.86893, -44.2436, -29.2179, 0.92 ) }
    dend_32 { pt3dadd( -7.15823, -45.7246, -30.3529, 0.92 ) }
    dend_32 { pt3dadd( -7.29108, -46.2885, -30.7975, 0.69 ) }
    dend_32 { pt3dadd( -7.70568, -47.4478, -31.7622, 0.69 ) }
    dend_32 { pt3dadd( -8.4009, -48.6074, -32.7882, 0.69 ) }
    dend_32 { pt3dadd( -8.80082, -49.0802, -33.2358, 0.69 ) }
    dend_32 { pt3dadd( -9.19488, -49.4487, -33.6378, 0.69 ) }
    dend_32 { pt3dadd( -9.93671, -50.0257, -34.2591, 0.69 ) }
    dend_32 { pt3dadd( -10.3425, -50.323, -34.6303, 0.69 ) }
    dend_32 { pt3dadd( -11.3259, -51.1119, -35.7311, 1.15 ) }
    dend_32 { pt3dadd( -12.2924, -51.9685, -36.8877, 0.92 ) }
    dend_32 { pt3dadd( -13.1971, -52.7922, -37.8698, 0.92 ) }
    dend_32 { pt3dadd( -14.2887, -53.7387, -38.8981, 0.92 ) }
    dend_32 { pt3dadd( -16.0681, -55.248, -40.2895, 0.92 ) }
    dend_32 { pt3dadd( -17.6193, -56.5463, -41.2807, 0.69 ) }
    dend_32 { pt3dadd( -19.181, -57.7715, -42.0495, 0.69 ) }
    dend_32 { pt3dadd( -21.4477, -59.4936, -42.8753, 0.23 ) }
    dend_32 { pt3dadd( -22.761, -60.4415, -43.2518, 0.46 ) }
    dend_32 { pt3dadd( -24.5818, -61.7084, -43.6248, 0.23 ) }
    dend_32 { pt3dadd( -26.2282, -62.7804, -43.841, 0.46 ) }
    dend_32 { pt3dadd( -28.5406, -64.1818, -44.0639, 0.23 ) }
    dend_32 { pt3dadd( -30.644, -65.4101, -44.2958, 0.23 ) }
    dend_32 { pt3dadd( -32.6025, -66.5891, -44.4891, 0.23 ) }
    dend_32 { pt3dadd( -34.3355, -67.6671, -44.6343, 0.23 ) }
    // Section: dend_30, id: dend_30, parent: dend_28 (entry count 64/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( 12.8091, -36.0077, -27.1412, 0.23 ) }
    dend_30 { pt3dadd( 11.0596, -35.777, -28.2017, 0.23 ) }
    dend_30 { pt3dadd( 9.65577, -35.5918, -29.0528, 0.23 ) }
    dend_30 { pt3dadd( 8.6325, -35.4568, -29.6731, 0.23 ) }
    dend_30 { pt3dadd( 7.0829, -35.2525, -30.6124, 0.23 ) }
    dend_30 { pt3dadd( 5.336, -35.0221, -31.6714, 0.23 ) }
    // Section: dend_29, id: dend_29, parent: dend_28 (entry count 70/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 12.8091, -36.0077, -27.1412, 0.46 ) }
    dend_29 { pt3dadd( 13.8853, -36.9136, -27.8522, 0.46 ) }
    dend_29 { pt3dadd( 14.7791, -37.666, -28.4427, 0.46 ) }
    dend_29 { pt3dadd( 15.307, -38.1103, -28.7914, 0.46 ) }
    dend_29 { pt3dadd( 16.4699, -39.0892, -29.5597, 0.69 ) }
    dend_29 { pt3dadd( 17.8099, -40.2171, -30.445, 0.46 ) }
    // Section: dend_22, id: dend_22, parent: dend_20 (entry count 76/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( 20.3484, 12.6826, -43.0411, 0.46 ) }
    dend_22 { pt3dadd( 21.3544, 13.2803, -42.6974, 0.46 ) }
    dend_22 { pt3dadd( 22.7149, 14.2142, -42.3204, 0.46 ) }
    dend_22 { pt3dadd( 24.1314, 15.3825, -42.0226, 0.46 ) }
    dend_22 { pt3dadd( 25.144, 16.336, -41.9434, 0.46 ) }
    dend_22 { pt3dadd( 26.6246, 17.7549, -41.9204, 0.46 ) }
    dend_22 { pt3dadd( 28.7145, 19.7056, -41.9589, 0.69 ) }
    dend_22 { pt3dadd( 29.6077, 20.5496, -42.0614, 0.46 ) }
    dend_22 { pt3dadd( 31.2564, 22.1246, -42.4729, 0.69 ) }
    dend_22 { pt3dadd( 33.0657, 23.7095, -43.1923, 0.46 ) }
    dend_22 { pt3dadd( 33.8537, 24.2724, -43.5432, 0.46 ) }
    dend_22 { pt3dadd( 34.5395, 24.5838, -43.8506, 0.46 ) }
    dend_22 { pt3dadd( 35.6326, 24.8673, -44.3627, 0.46 ) }
    dend_22 { pt3dadd( 37.2906, 25.1571, -45.1211, 0.69 ) }
    dend_22 { pt3dadd( 38.6009, 25.3224, -45.7409, 0.69 ) }
    dend_22 { pt3dadd( 40.5327, 25.602, -46.7564, 0.46 ) }
    dend_22 { pt3dadd( 42.2784, 25.9361, -47.8556, 0.46 ) }
    dend_22 { pt3dadd( 43.7498, 26.2491, -48.8692, 0.46 ) }
    dend_22 { pt3dadd( 44.6847, 26.4906, -49.5344, 0.46 ) }
    dend_22 { pt3dadd( 45.8483, 26.7839, -50.4278, 0.46 ) }
    dend_22 { pt3dadd( 47.185, 27.1805, -51.5104, 0.46 ) }
    dend_22 { pt3dadd( 47.9044, 27.47, -52.2116, 0.46 ) }
    dend_22 { pt3dadd( 48.5927, 27.8758, -52.9068, 0.46 ) }
    dend_22 { pt3dadd( 49.5905, 28.4495, -53.8073, 0.46 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_22 { pt3dadd( 50.4923, 29.0073, -54.5339, 0.46 ) }
    dend_22 { pt3dadd( 51.3678, 29.5496, -55.1673, 0.46 ) }
    dend_22 { pt3dadd( 52.6484, 30.313, -56.0187, 0.46 ) }
    dend_22 { pt3dadd( 53.576, 30.8835, -56.657, 0.46 ) }
    dend_22 { pt3dadd( 54.5534, 31.5135, -57.4019, 0.46 ) }
    dend_22 { pt3dadd( 55.8009, 32.2193, -58.3657, 0.46 ) }
    dend_22 { pt3dadd( 56.8998, 32.8722, -59.2347, 0.46 ) }
    dend_22 { pt3dadd( 57.9481, 33.5215, -60.1366, 0.46 ) }
    dend_22 { pt3dadd( 58.7784, 34.0495, -60.8752, 0.46 ) }
    dend_22 { pt3dadd( 59.9492, 34.8415, -61.9802, 0.46 ) }
    dend_22 { pt3dadd( 60.9909, 35.6155, -62.9947, 0.46 ) }
    dend_22 { pt3dadd( 62.3143, 36.5633, -64.1245, 0.46 ) }
    dend_22 { pt3dadd( 63.4342, 37.4056, -64.9538, 0.46 ) }
    dend_22 { pt3dadd( 64.3603, 38.1308, -65.617, 0.46 ) }
    dend_22 { pt3dadd( 65.599, 39.1057, -66.4597, 0.46 ) }
    dend_22 { pt3dadd( 66.261, 39.6124, -66.8628, 0.46 ) }
    dend_22 { pt3dadd( 68.5608, 41.3974, -68.3445, 0.46 ) }
    dend_22 { pt3dadd( 69.6507, 42.1838, -69.1997, 0.46 ) }
    dend_22 { pt3dadd( 70.7395, 43.0239, -70.3901, 0.46 ) }
    dend_22 { pt3dadd( 71.3685, 43.5472, -71.3106, 0.46 ) }
    dend_22 { pt3dadd( 71.7096, 43.8478, -71.9221, 0.46 ) }
    dend_22 { pt3dadd( 72.4561, 44.4451, -73.3382, 0.46 ) }
    dend_22 { pt3dadd( 73.692, 45.3507, -75.7216, 0.46 ) }
    dend_22 { pt3dadd( 74.6016, 45.8156, -77.1845, 0.46 ) }
    dend_22 { pt3dadd( 75.121, 46.0132, -77.8474, 0.46 ) }
    dend_22 { pt3dadd( 75.8789, 46.2562, -78.7117, 0.46 ) }
    dend_22 { pt3dadd( 76.5428, 46.4364, -79.4368, 0.46 ) }
    dend_22 { pt3dadd( 77.2574, 46.5481, -80.1467, 0.46 ) }
    dend_22 { pt3dadd( 78.2545, 46.5023, -81.1278, 0.46 ) }
    dend_22 { pt3dadd( 79.9969, 46.0924, -82.7175, 0.46 ) }
    dend_22 { pt3dadd( 81.4803, 45.4155, -84.0765, 0.46 ) }
    dend_22 { pt3dadd( 82.604, 44.6532, -85.0305, 0.69 ) }
    dend_22 { pt3dadd( 83.7496, 43.6476, -85.91, 0.69 ) }
    dend_22 { pt3dadd( 84.988, 42.3398, -86.7792, 0.69 ) }
    dend_22 { pt3dadd( 86.6455, 40.4766, -87.7727, 0.46 ) }
    dend_22 { pt3dadd( 87.6791, 39.3214, -88.2487, 0.46 ) }
    dend_22 { pt3dadd( 88.9599, 38.1077, -88.6623, 0.46 ) }
    dend_22 { pt3dadd( 89.9903, 37.2067, -88.9192, 0.46 ) }
    dend_22 { pt3dadd( 91.12, 36.3549, -89.1648, 0.23 ) }
    dend_22 { pt3dadd( 92.8208, 35.4408, -89.6299, 0.23 ) }
    dend_22 { pt3dadd( 94.2562, 34.9653, -90.2694, 0.23 ) }
    dend_22 { pt3dadd( 95.8593, 34.7572, -91.0175, 0.23 ) }
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 42/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 20.3484, 12.6826, -43.0411, 0.46 ) }
    dend_21 { pt3dadd( 20.968, 13.6564, -43.6878, 0.46 ) }
    dend_21 { pt3dadd( 21.5013, 14.4568, -44.2278, 0.46 ) }
    dend_21 { pt3dadd( 22.5382, 15.8922, -45.2543, 0.46 ) }
    dend_21 { pt3dadd( 23.9064, 17.6719, -46.5834, 0.46 ) }
    dend_21 { pt3dadd( 24.9629, 19.0936, -47.7225, 0.46 ) }
    dend_21 { pt3dadd( 25.9315, 20.5065, -48.8487, 0.46 ) }
    dend_21 { pt3dadd( 26.6177, 21.6045, -49.8463, 0.46 ) }
    dend_21 { pt3dadd( 27.0082, 22.2889, -50.5122, 0.46 ) }
    dend_21 { pt3dadd( 27.603, 23.4396, -51.6623, 0.23 ) }
    dend_21 { pt3dadd( 28.1854, 24.6136, -52.8561, 0.23 ) }
    dend_21 { pt3dadd( 28.6167, 25.7204, -53.9027, 0.23 ) }
    dend_21 { pt3dadd( 29.4102, 28.1949, -56.2482, 0.23 ) }
    dend_21 { pt3dadd( 29.6316, 29.1361, -57.1973, 0.23 ) }
    // Section: dend_14, id: dend_14, parent: dend_8 (entry count 56/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 8.30918, 34.8736, -23.2444, 1.15 ) }
    dend_14 { pt3dadd( 7.00136, 36.5153, -23.7005, 1.15 ) }
    dend_14 { pt3dadd( 6.4396, 37.2628, -24.0144, 0.92 ) }
    dend_14 { pt3dadd( 5.49732, 38.5502, -24.7009, 0.92 ) }
    dend_14 { pt3dadd( 4.78248, 39.5446, -25.2969, 1.15 ) }
    dend_14 { pt3dadd( 3.85743, 40.8579, -26.1495, 0.92 ) }
    dend_14 { pt3dadd( 2.97746, 42.1763, -27.0334, 1.15 ) }
    dend_14 { pt3dadd( 2.16631, 43.5041, -27.9691, 1.15 ) }
    dend_14 { pt3dadd( 1.7436, 44.3168, -28.5846, 1.15 ) }
    dend_14 { pt3dadd( 1.1665, 45.6589, -29.6055, 1.15 ) }
    dend_14 { pt3dadd( 0.749536, 46.7576, -30.4429, 1.15 ) }
    dend_14 { pt3dadd( 0.505161, 47.5151, -30.9771, 1.15 ) }
    dend_14 { pt3dadd( 0.127606, 48.8535, -31.861, 0.92 ) }
    dend_14 { pt3dadd( -0.229702, 50.2051, -32.7375, 0.92 ) }
    dend_14 { pt3dadd( -0.463345, 51.2483, -33.4585, 0.92 ) }
    dend_14 { pt3dadd( -0.617381, 52.1777, -34.161, 0.92 ) }
    dend_14 { pt3dadd( -0.70972, 52.8008, -34.6529, 0.92 ) }
    dend_14 { pt3dadd( -0.935498, 53.9202, -35.5708, 0.92 ) }
    dend_14 { pt3dadd( -1.12302, 54.575, -36.134, 0.92 ) }
    dend_14 { pt3dadd( -1.68122, 55.7372, -37.0871, 0.92 ) }
    dend_14 { pt3dadd( -1.92277, 56.1157, -37.3765, 0.92 ) }
    dend_14 { pt3dadd( -2.56079, 56.9296, -37.8557, 0.92 ) }
    dend_14 { pt3dadd( -3.31748, 57.8884, -38.1792, 0.92 ) }
    dend_14 { pt3dadd( -3.87075, 58.6154, -38.3231, 0.92 ) }
    dend_14 { pt3dadd( -4.51337, 59.5008, -38.5128, 0.92 ) }
    dend_14 { pt3dadd( -4.88363, 60.0147, -38.6485, 0.92 ) }
    dend_14 { pt3dadd( -5.29188, 60.6684, -38.9337, 0.92 ) }
    dend_14 { pt3dadd( -5.80168, 61.8583, -39.7308, 0.92 ) }
    dend_14 { pt3dadd( -5.97232, 62.678, -40.4114, 0.92 ) }
    dend_14 { pt3dadd( -6.14271, 63.797, -41.3255, 0.92 ) }
    dend_14 { pt3dadd( -6.22614, 64.3256, -41.7603, 0.92 ) }
    dend_14 { pt3dadd( -6.30876, 64.921, -42.1624, 0.92 ) }
    dend_14 { pt3dadd( -6.39052, 65.4417, -42.3975, 0.92 ) }
    dend_14 { pt3dadd( -6.5286, 65.9965, -42.5226, 0.69 ) }
    dend_14 { pt3dadd( -7.17856, 67.8475, -42.618, 0.69 ) }
    dend_14 { pt3dadd( -7.55263, 68.6382, -42.5608, 0.69 ) }
    dend_14 { pt3dadd( -8.50001, 70.1243, -42.3181, 0.69 ) }
    dend_14 { pt3dadd( -9.20118, 70.9115, -42.0847, 0.69 ) }
    dend_14 { pt3dadd( -9.76194, 71.3618, -41.8878, 0.69 ) }
    dend_14 { pt3dadd( -10.7958, 71.9954, -41.5307, 0.69 ) }
    dend_14 { pt3dadd( -11.7104, 72.3748, -41.1298, 0.69 ) }
    dend_14 { pt3dadd( -12.4759, 72.5405, -40.6954, 0.69 ) }
    dend_14 { pt3dadd( -13.4653, 72.5931, -40.0078, 0.69 ) }
    dend_14 { pt3dadd( -14.0772, 72.5748, -39.5282, 0.69 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_14 { pt3dadd( -14.7996, 72.5179, -38.9265, 0.69 ) }
    dend_14 { pt3dadd( -16.0615, 72.3498, -37.8352, 0.69 ) }
    dend_14 { pt3dadd( -17.3789, 72.1678, -36.7854, 0.69 ) }
    dend_14 { pt3dadd( -18.4669, 72.0385, -35.9575, 0.69 ) }
    dend_14 { pt3dadd( -19.3691, 71.9481, -35.3248, 0.69 ) }
    dend_14 { pt3dadd( -20.3029, 71.8715, -34.6983, 0.69 ) }
    dend_14 { pt3dadd( -21.3675, 71.8678, -34.0532, 0.69 ) }
    dend_14 { pt3dadd( -22.4943, 72.0114, -33.4949, 0.69 ) }
    dend_14 { pt3dadd( -23.6618, 72.3064, -32.9514, 0.69 ) }
    dend_14 { pt3dadd( -24.5536, 72.6106, -32.5489, 0.69 ) }
    dend_14 { pt3dadd( -25.3429, 72.9549, -32.1949, 0.69 ) }
    dend_14 { pt3dadd( -26.7846, 73.6906, -31.5674, 0.69 ) }
    dend_14 { pt3dadd( -28.0006, 74.3601, -31.1324, 0.69 ) }
    dend_14 { pt3dadd( -28.6782, 74.7029, -30.9099, 0.69 ) }
    dend_14 { pt3dadd( -30.0887, 75.3121, -30.5264, 0.69 ) }
    dend_14 { pt3dadd( -31.1332, 75.7112, -30.3082, 0.69 ) }
    dend_14 { pt3dadd( -31.7695, 75.9204, -30.2399, 0.92 ) }
    dend_14 { pt3dadd( -33.0109, 76.2631, -30.1711, 0.92 ) }
    dend_14 { pt3dadd( -34.9059, 76.7726, -30.1036, 0.92 ) }
    dend_14 { pt3dadd( -36.5611, 77.2189, -30.0729, 0.69 ) }
    dend_14 { pt3dadd( -38.0186, 77.6376, -30.0473, 0.69 ) }
    dend_14 { pt3dadd( -40.0227, 78.304, -29.996, 0.69 ) }
    dend_14 { pt3dadd( -41.1958, 78.7537, -29.9441, 0.69 ) }
    dend_14 { pt3dadd( -42.2023, 79.2618, -29.812, 0.69 ) }
    dend_14 { pt3dadd( -43.1023, 79.9162, -29.5918, 0.69 ) }
    dend_14 { pt3dadd( -43.533, 80.3877, -29.3527, 0.69 ) }
    dend_14 { pt3dadd( -43.9622, 80.9692, -28.9809, 0.69 ) }
    dend_14 { pt3dadd( -44.5261, 81.7607, -28.3827, 0.69 ) }
    dend_14 { pt3dadd( -45.4108, 82.8781, -27.4507, 0.46 ) }
    dend_14 { pt3dadd( -46.0015, 83.4922, -26.8775, 0.46 ) }
    dend_14 { pt3dadd( -47.0343, 84.4285, -25.9726, 0.46 ) }
    dend_14 { pt3dadd( -47.6251, 84.9125, -25.5314, 0.46 ) }
    dend_14 { pt3dadd( -48.1147, 85.3062, -25.1955, 0.46 ) }
    dend_14 { pt3dadd( -49.0241, 86.0409, -24.6604, 0.46 ) }
    dend_14 { pt3dadd( -50.3914, 86.9923, -24.0254, 0.46 ) }
    dend_14 { pt3dadd( -51.2524, 87.4785, -23.7283, 0.46 ) }
    dend_14 { pt3dadd( -52.1164, 87.9174, -23.5239, 0.46 ) }
    dend_14 { pt3dadd( -52.9543, 88.3797, -23.3589, 0.46 ) }
    dend_14 { pt3dadd( -54.0825, 89.0335, -23.0431, 0.46 ) }
    dend_14 { pt3dadd( -55.0873, 89.5606, -22.7351, 0.46 ) }
    dend_14 { pt3dadd( -56.256, 90.0733, -22.2771, 0.46 ) }
    dend_14 { pt3dadd( -57.1849, 90.3719, -21.7679, 0.46 ) }
    dend_14 { pt3dadd( -58.2101, 90.5611, -21.0273, 0.46 ) }
    dend_14 { pt3dadd( -60.1177, 90.864, -19.3175, 0.46 ) }
    dend_14 { pt3dadd( -60.9998, 91.0195, -18.439, 0.46 ) }
    dend_14 { pt3dadd( -61.4838, 91.1175, -17.9725, 0.46 ) }
    dend_14 { pt3dadd( -62.3004, 91.3337, -17.2046, 0.46 ) }
    dend_14 { pt3dadd( -63.6363, 91.689, -16.1471, 0.46 ) }
    dend_14 { pt3dadd( -64.5721, 92.0005, -15.5693, 0.46 ) }
    dend_14 { pt3dadd( -66.1402, 92.7043, -14.8127, 0.46 ) }
    dend_14 { pt3dadd( -67.0578, 93.2372, -14.3873, 0.46 ) }
    dend_14 { pt3dadd( -68.2598, 94.0599, -13.8874, 0.46 ) }
    dend_14 { pt3dadd( -69.595, 95.1123, -13.4286, 0.46 ) }
    dend_14 { pt3dadd( -70.3039, 95.7515, -13.2741, 0.46 ) }
    dend_14 { pt3dadd( -71.1406, 96.5825, -13.1791, 0.46 ) }
    dend_14 { pt3dadd( -72.2525, 97.9091, -13.1652, 0.46 ) }
    dend_14 { pt3dadd( -73.0125, 98.8942, -13.2969, 0.46 ) }
    dend_14 { pt3dadd( -73.5545, 99.64, -13.5384, 0.46 ) }
    dend_14 { pt3dadd( -74.7852, 101.483, -14.2437, 0.46 ) }
    dend_14 { pt3dadd( -75.831, 103.069, -14.9421, 0.46 ) }
    dend_14 { pt3dadd( -76.3844, 103.921, -15.4001, 0.46 ) }
    dend_14 { pt3dadd( -77.1906, 105.181, -16.243, 0.46 ) }
    dend_14 { pt3dadd( -78.1245, 106.627, -17.3629, 0.46 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 63/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 8.30918, 34.8736, -23.2444, 1.38 ) }
    dend_9 { pt3dadd( 7.9648, 35.4276, -24.161, 1.38 ) }
    dend_9 { pt3dadd( 7.25983, 36.5616, -26.0374, 1.38 ) }
    dend_9 { pt3dadd( 6.78404, 37.327, -27.3038, 1.15 ) }
    // Section: dend_13, id: dend_13, parent: dend_9 (entry count 67/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 6.78404, 37.327, -27.3038, 0.46 ) }
    dend_13 { pt3dadd( 7.52841, 38.5269, -28.9031, 0.46 ) }
    dend_13 { pt3dadd( 8.26629, 39.8207, -30.5944, 0.46 ) }
    dend_13 { pt3dadd( 8.38704, 40.0694, -30.8764, 0.46 ) }
    dend_13 { pt3dadd( 8.8849, 41.1686, -32.0035, 0.46 ) }
    dend_13 { pt3dadd( 9.29453, 42.0722, -32.9, 0.46 ) }
    dend_13 { pt3dadd( 9.69351, 43.068, -33.8923, 0.46 ) }
    dend_13 { pt3dadd( 9.97622, 43.9185, -34.6999, 0.46 ) }
    dend_13 { pt3dadd( 10.2998, 45.1055, -35.9221, 0.46 ) }
    dend_13 { pt3dadd( 10.3995, 45.4777, -36.3875, 0.69 ) }
    dend_13 { pt3dadd( 10.734, 46.339, -37.651, 0.69 ) }
    dend_13 { pt3dadd( 11.202, 47.1866, -39.1449, 0.69 ) }
    dend_13 { pt3dadd( 11.6773, 47.6919, -40.2931, 0.46 ) }
    dend_13 { pt3dadd( 12.4934, 48.0865, -41.7839, 0.46 ) }
    dend_13 { pt3dadd( 13.5201, 48.2485, -43.1248, 0.46 ) }
    dend_13 { pt3dadd( 14.9665, 48.3173, -44.7848, 0.46 ) }
    dend_13 { pt3dadd( 15.6864, 48.266, -45.4042, 0.69 ) }
    dend_13 { pt3dadd( 16.5065, 48.1497, -45.906, 0.69 ) }
    dend_13 { pt3dadd( 17.8141, 47.9143, -46.4619, 0.23 ) }
    dend_13 { pt3dadd( 19.2646, 47.6952, -46.7999, 0.23 ) }
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 87/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 6.78404, 37.327, -27.3038, 0.69 ) }
    dend_10 { pt3dadd( 7.28847, 36.551, -28.6034, 0.69 ) }
    dend_10 { pt3dadd( 8.04427, 35.4398, -30.6787, 0.69 ) }
    dend_10 { pt3dadd( 8.54448, 34.7673, -32.0683, 0.69 ) }
    dend_10 { pt3dadd( 9.22728, 33.9532, -33.8932, 0.69 ) }
    dend_10 { pt3dadd( 9.48034, 33.682, -34.6686, 1.15 ) }
    dend_10 { pt3dadd( 9.63925, 33.5417, -35.2787, 0.92 ) }
    dend_10 { pt3dadd( 9.96952, 33.5992, -37.3106, 0.92 ) }
    dend_10 { pt3dadd( 10.0531, 33.7376, -37.9667, 0.92 ) }
    dend_10 { pt3dadd( 10.0814, 33.9155, -38.5679, 0.92 ) }
    dend_10 { pt3dadd( 10.1622, 34.6958, -40.7636, 0.92 ) }
    dend_10 { pt3dadd( 10.2068, 35.5444, -42.8344, 0.69 ) }
    dend_10 { pt3dadd( 10.2628, 36.1106, -43.8958, 0.69 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_10 { pt3dadd( 10.4352, 37.2083, -45.4262, 0.69 ) }
    dend_10 { pt3dadd( 10.6344, 38.1049, -46.5564, 0.69 ) }
    dend_10 { pt3dadd( 10.8397, 38.8871, -47.5461, 0.69 ) }
    dend_10 { pt3dadd( 11.0942, 39.707, -48.7117, 0.69 ) }
    dend_10 { pt3dadd( 11.4221, 40.5407, -50.1431, 0.69 ) }
    dend_10 { pt3dadd( 11.7778, 41.309, -51.7674, 0.69 ) }
    dend_10 { pt3dadd( 12.1235, 41.9962, -53.7129, 0.92 ) }
    dend_10 { pt3dadd( 12.3968, 42.3606, -55.6121, 0.69 ) }
    dend_10 { pt3dadd( 12.6124, 42.4449, -57.5098, 0.69 ) }
    dend_10 { pt3dadd( 12.8873, 42.2442, -59.5721, 0.92 ) }
    dend_10 { pt3dadd( 13.1641, 41.7211, -61.6458, 0.69 ) }
    dend_10 { pt3dadd( 13.5283, 40.7396, -64.3201, 0.92 ) }
    dend_10 { pt3dadd( 13.7604, 39.8172, -66.2952, 0.92 ) }
    dend_10 { pt3dadd( 13.865, 39.3174, -67.1924, 0.92 ) }
    dend_10 { pt3dadd( 14.0618, 38.174, -68.9603, 0.69 ) }
    dend_10 { pt3dadd( 14.3386, 36.3427, -71.4317, 0.69 ) }
    dend_10 { pt3dadd( 14.5442, 34.9418, -73.2184, 0.69 ) }
    dend_10 { pt3dadd( 14.8392, 33.359, -75.1047, 0.69 ) }
    dend_10 { pt3dadd( 15.1976, 31.7437, -76.9979, 0.92 ) }
    dend_10 { pt3dadd( 15.5014, 30.5385, -78.4385, 0.69 ) }
    dend_10 { pt3dadd( 15.847, 29.1242, -80.1022, 0.92 ) }
    dend_10 { pt3dadd( 16.3319, 27.4678, -81.9794, 0.46 ) }
    dend_10 { pt3dadd( 16.6108, 26.606, -82.9334, 0.46 ) }
    dend_10 { pt3dadd( 16.9495, 25.7113, -84.042, 0.46 ) }
    dend_10 { pt3dadd( 17.1495, 25.1668, -84.9224, 0.46 ) }
    dend_10 { pt3dadd( 17.4035, 24.5294, -86.3369, 0.46 ) }
    dend_10 { pt3dadd( 17.5905, 24.0423, -87.8821, 0.46 ) }
    dend_10 { pt3dadd( 17.701, 23.8135, -88.7995, 0.46 ) }
    dend_10 { pt3dadd( 17.7848, 23.6632, -90.0645, 0.69 ) }
    dend_10 { pt3dadd( 17.8599, 23.6685, -92.1339, 0.69 ) }
    dend_10 { pt3dadd( 17.9096, 23.7465, -93.229, 0.46 ) }
    dend_10 { pt3dadd( 18.0207, 23.9435, -94.7496, 0.46 ) }
    dend_10 { pt3dadd( 18.1297, 24.1928, -96.6935, 0.46 ) }
    dend_10 { pt3dadd( 18.2818, 24.3197, -98.9735, 0.46 ) }
    dend_10 { pt3dadd( 18.3895, 24.3199, -100.276, 0.46 ) }
    dend_10 { pt3dadd( 18.4736, 24.3013, -101.122, 0.69 ) }
    dend_10 { pt3dadd( 18.6945, 24.2799, -102.768, 0.46 ) }
    dend_10 { pt3dadd( 18.9138, 24.2924, -104.122, 0.46 ) }
    dend_10 { pt3dadd( 19.2361, 24.3643, -105.7, 0.46 ) }
    dend_10 { pt3dadd( 19.7413, 24.4096, -107.571, 0.46 ) }
    dend_10 { pt3dadd( 20.1102, 24.3872, -108.785, 0.46 ) }
    dend_10 { pt3dadd( 20.568, 24.4113, -110.279, 0.46 ) }
    // Section: dend_12, id: dend_12, parent: dend_10 (entry count 42/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 20.568, 24.4113, -110.279, 0.46 ) }
    dend_12 { pt3dadd( 21.7465, 23.7669, -113.11, 0.46 ) }
    dend_12 { pt3dadd( 22.6222, 23.3339, -115.412, 0.46 ) }
    dend_12 { pt3dadd( 23.1978, 22.9947, -117.202, 0.46 ) }
    dend_12 { pt3dadd( 23.5412, 22.7, -118.631, 0.46 ) }
    dend_12 { pt3dadd( 24.0264, 22.1587, -120.93, 0.46 ) }
    dend_12 { pt3dadd( 24.4587, 21.4956, -123.408, 0.46 ) }
    dend_12 { pt3dadd( 24.5371, 21.0884, -124.61, 0.46 ) }
    dend_12 { pt3dadd( 24.6614, 20.0311, -127.135, 0.46 ) }
    dend_12 { pt3dadd( 24.9342, 18.9614, -129.337, 0.46 ) }
    dend_12 { pt3dadd( 25.1166, 18.26, -130.694, 0.23 ) }
    dend_12 { pt3dadd( 25.3501, 17.5887, -131.819, 0.23 ) }
    dend_12 { pt3dadd( 25.9326, 15.9451, -134.054, 0.23 ) }
    dend_12 { pt3dadd( 26.5164, 14.2022, -136.128, 0.23 ) }
    dend_12 { pt3dadd( 27.4576, 12.4748, -137.809, 0.23 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 57/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 20.568, 24.4113, -110.279, 0.46 ) }
    dend_11 { pt3dadd( 20.6127, 24.6135, -112.572, 0.46 ) }
    dend_11 { pt3dadd( 20.7058, 24.8329, -114.503, 0.46 ) }
    dend_11 { pt3dadd( 20.8097, 24.9085, -115.795, 0.46 ) }
    dend_11 { pt3dadd( 20.9521, 24.9232, -117.149, 0.46 ) }
    dend_11 { pt3dadd( 21.0959, 24.9061, -118.614, 0.46 ) }
    dend_11 { pt3dadd( 21.1881, 24.9177, -119.78, 0.46 ) }
    dend_11 { pt3dadd( 21.3257, 24.919, -121.25, 0.46 ) }
    dend_11 { pt3dadd( 21.5012, 24.924, -123.21, 0.46 ) }
    dend_11 { pt3dadd( 21.6583, 24.9444, -125.117, 0.46 ) }
    dend_11 { pt3dadd( 21.7797, 24.9797, -126.957, 0.46 ) }
    dend_11 { pt3dadd( 21.8666, 25.0748, -128.297, 0.46 ) }
    dend_11 { pt3dadd( 22.0072, 25.2882, -130.866, 0.46 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_34, dend_23, dend_16, dend_5, dend_0, dend_36, dend_35, dend_27, dend_24, dend_18, dend_17, dend_7, dend_6, dend_2, dend_1, dend_38, dend_37, dend_31, dend_28, dend_26, dend_25, dend_20, dend_19, dend_15, dend_8, dend_4, dend_3, dend_33, dend_32, dend_30, dend_29, dend_22, dend_21, dend_14, dend_9, dend_13, dend_10, dend_12, dend_11]}
    ModelViewParmSubset_2 = new SectionList()
    dend_34 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_36 ModelViewParmSubset_2.append()
    dend_35 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_38 ModelViewParmSubset_2.append()
    dend_37 ModelViewParmSubset_2.append()
    dend_31 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_33 ModelViewParmSubset_2.append()
    dend_32 ModelViewParmSubset_2.append()
    dend_30 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_34, dend_23, dend_16, dend_5, dend_0, dend_36, dend_35, dend_27, dend_24, dend_18, dend_17, dend_7, dend_6, dend_2, dend_1, dend_38, dend_37, dend_31, dend_28, dend_26, dend_25, dend_20, dend_19, dend_15, dend_8, dend_4, dend_3, dend_33, dend_32, dend_30, dend_29, dend_22, dend_21, dend_14, dend_9, dend_13, dend_10, dend_12, dend_11]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_34 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_36 ModelViewParmSubset_4.append()
    dend_35 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_38 ModelViewParmSubset_4.append()
    dend_37 ModelViewParmSubset_4.append()
    dend_31 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_33 ModelViewParmSubset_4.append()
    dend_32 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_17 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_15 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_4 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_32]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_32 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_35 = new SectionList()
    dend_22 OneSecGrp_SectionRef_35.append()

    // Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_37 = new SectionList()
    dend_14 OneSecGrp_SectionRef_37.append()

    // Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_40 = new SectionList()
    dend_10 OneSecGrp_SectionRef_40.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_23 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_0 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_27 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_5 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_34]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_34 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_7 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_16 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_2 OneSecGrp_SectionRef_16.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_24 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_35]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_35 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_36]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_36 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_31]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_31 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_1 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_25 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_8 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_38]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_38 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_6 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_28 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_18 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_38 = new SectionList()
    dend_9 OneSecGrp_SectionRef_38.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_20 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_29 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_30 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_3 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_37]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_37 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_26 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_19 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_33]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_33 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_36 = new SectionList()
    dend_21 OneSecGrp_SectionRef_36.append()

    // Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_39 = new SectionList()
    dend_13 OneSecGrp_SectionRef_39.append()

    // Group: {name=OneSecGrp_SectionRef_42, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_42 = new SectionList()
    dend_11 OneSecGrp_SectionRef_42.append()

    // Group: {name=OneSecGrp_SectionRef_41, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_41 = new SectionList()
    dend_12 OneSecGrp_SectionRef_41.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36, dend_37, dend_38], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()
    dend_31 basal.append()
    dend_32 basal.append()
    dend_33 basal.append()
    dend_34 basal.append()
    dend_35 basal.append()
    dend_36 basal.append()
    dend_37 basal.append()
    dend_38 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_23, dend_23, dend_23, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_35, dend_35, dend_35, dend_35, dend_35, dend_27, dend_27, dend_27, dend_27, dend_27, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_9, dend_9, dend_9, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_30 all.append()
    dend_30 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 5.67935E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 5.67935E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 3.6794998E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cSTUT_7_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cSTUT_7_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cSTUT_7_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cSTUT_7_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_17 nseg = 3
    dend_15 nseg = 3
    dend_4 nseg = 3
    dend_32 nseg = 3
    dend_22 nseg = 5
    dend_14 nseg = 7
    dend_10 nseg = 5
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cSTUT189_L1_NGCDA_0112c85cf0_0_0


