TITLE Mod file for component: Component(id=GLIF_472455459 type=glifRAscATCell)

COMMENT

    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.3
         org.neuroml.model   v1.5.3
         jLEMS               v0.9.9.0

ENDCOMMENT

NEURON {
    POINT_PROCESS GLIF_472455459
    
    
    NONSPECIFIC_CURRENT i                    : To ensure v of section follows v_I
    RANGE leakConductance                   : parameter
    RANGE leakReversal                      : parameter
    RANGE tau1                              : parameter
    RANGE tau2                              : parameter
    RANGE amp1                              : parameter
    RANGE amp2                              : parameter
    RANGE bs                                : parameter
    RANGE deltaThresh                       : parameter
    RANGE deltaV                            : parameter
    RANGE fv                                : parameter
    RANGE a                                 : parameter
    RANGE bv                                : parameter
    RANGE thresh                            : parameter
    RANGE reset                             : parameter
    RANGE C                                 : parameter
    
    RANGE threshTotal                       : exposure
    
    RANGE iSyn                              : exposure
    
    RANGE iMemb                             : exposure
    
    RANGE copy_v                           : copy of v on section
    
}

UNITS {
    
    (nA) = (nanoamp)
    (uA) = (microamp)
    (mA) = (milliamp)
    (A) = (amp)
    (mV) = (millivolt)
    (mS) = (millisiemens)
    (uS) = (microsiemens)
    (molar) = (1/liter)
    (kHz) = (kilohertz)
    (mM) = (millimolar)
    (um) = (micrometer)
    (umol) = (micromole)
    (S) = (siemens)
    
}

PARAMETER {
    
    leakConductance = 0.0046942495 (uS)
    leakReversal = 0 (mV)
    tau1 = 33.333336 (ms)
    tau2 = 3.3333335 (ms)
    amp1 = -0.053284075 (nA)
    amp2 = 0.05978385 (nA)
    bs = 0.035436586 (kHz)
    deltaThresh = 1.8016185 (mV)
    deltaV = -15.394348 (mV)
    fv = 0.98310524 
    a = 0.0040434273 (kHz)
    bv = 0.08241954 (kHz)
    thresh = 21.669846 (mV)
    reset = 0 (mV)
    C = 7.780686E-5 (microfarads)
}

ASSIGNED {
    v (mV)
    i (mA/cm2)
    
    copy_v (mV)
    
    v_I (nA) 
    
    iSyn (nA)                              : derived variable
    
    iMemb (nA)                             : derived variable
    
    threshTotal (mV)                       : derived variable
    rate_v (mV/ms)
    rate_asc1 (nA/ms)
    rate_asc2 (nA/ms)
    rate_threshS (mV/ms)
    rate_threshV (mV/ms)
    
}

STATE {
    asc1 (nA) 
    asc2 (nA) 
    threshS (mV) 
    threshV (mV) 
    
}

INITIAL {
    rates()
    rates() ? To ensure correct initialisation.
    
    net_send(0, 1) : go to NET_RECEIVE block, flag 1, for initial state
    
    threshV = thresh
    
}

BREAKPOINT {
    
    SOLVE states METHOD cnexp
    
    
    copy_v = v
    i = v_I * C
}

NET_RECEIVE(flag) {
    
    if (flag == 1) { : Setting watch for top level OnCondition...
        WATCH (v >  threshTotal) 1000
    }
    if (flag == 1000) {
    
        asc1 = asc1  +  amp1
    
        asc2 = asc2  +  amp2
    
        v = leakReversal  +  fv  * (v -   leakReversal  ) +  deltaV
    
        v_I = 0 : Setting rate of change of v to 0
    
        threshS = threshS  +  deltaThresh
    }
    if (flag == 1) { : Set initial states
    
        v = leakReversal
    }
    
}

DERIVATIVE states {
    rates()
    asc1' = rate_asc1 
    asc2' = rate_asc2 
    threshS' = rate_threshS 
    threshV' = rate_threshV 
    
}

PROCEDURE rates() {
    
    ? DerivedVariable is based on path: synapses[*]/i, on: Component(id=GLIF_472455459 type=glifRAscATCell), from synapses; null
    iSyn = 0 ? Was: synapses[*]_i but insertion of currents from external attachments not yet supported ? path based, prefix = 
    
    iMemb = leakConductance  * (  leakReversal   - v) +  asc1  +  asc2  +  iSyn ? evaluable
    threshTotal = threshV  +  threshS ? evaluable
    rate_v = iMemb  /  C ? Note units of all quantities used here need to be consistent!
    rate_asc1 = -1 *  asc1  /  tau1 ? Note units of all quantities used here need to be consistent!
    rate_asc2 = -1 *  asc2  /  tau2 ? Note units of all quantities used here need to be consistent!
    rate_threshS = -1 *  bs  *  threshS ? Note units of all quantities used here need to be consistent!
    rate_threshV = a  * (v -   leakReversal  ) - (  bv  * (  threshV   -   thresh  )) ? Note units of all quantities used here need to be consistent!
    
    v_I = -1 * rate_v
     
    
}

