// Cell: bAC217_L4_BP_8c9cdc6683_0_0
/*
{
  "id" : "bAC217_L4_BP_8c9cdc6683_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-3.08452, 6.27464, 0.312461, 1.46623", "-2.79927, 5.64032, 0.287115, 2.64844", "-2.51401, 5.00599, 0.26177, 4.10361", "-2.22875, 4.37167, 0.236425, 4.91598", "-1.94349, 3.73735, 0.21108, 5.72835", "-1.65823, 3.10303, 0.185734, 6.53421", "-1.37297, 2.46871, 0.160389, 7.31212", "-1.08771, 1.83438, 0.135044, 8.08989", "-0.802456, 1.20006, 0.109699, 8.85679", "-0.517198, 0.56574, 0.0843534, 8.93483", "-0.23194, -0.0685822, 0.0590082, 8.92633", "0.0533189, -0.702904, 0.033663, 8.91784", "0.338577, -1.33723, 0.00831775, 8.90934", "0.623836, -1.97155, -0.0170275, 8.90084", "0.909094, -2.60587, -0.0423727, 8.82493", "1.19435, -3.24019, -0.067718, 7.82232", "1.47961, -3.87451, -0.0930632, 6.5965", "1.76487, -4.50884, -0.118408, 5.37067", "2.05013, -5.14316, -0.143754, 4.14485", "2.33539, -5.77748, -0.169099, 2.91903", "2.62064, -6.4118, -0.194444, 1.76337" ]
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "1.61629, -5.71525, -1.26548, 1.33", "2.44078, -9.20881, -1.92656, 1.33", "3.80776, -15.001, -3.02261, 0.66", "4.86611, -19.4856, -3.8712, 0.66", "5.99389, -24.2642, -4.77546, 1.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500001318721313
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "2.62064, -6.4118, -0.194444, 0.33", "8.77276, -20.0921, -0.194444, 0.33", "14.9249, -33.7725, -0.194444, 0.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "5.99389, -24.2642, -4.77546, 0.66", "6.37938, -38.3714, -1.40745, 0.66", "6.93025, -59.3255, 3.62187, 0.66", "7.58811, -84.9058, 9.96351, 0.66", "8.18047, -104.648, 14.8857, 0.66", "8.53941, -116.103, 17.7328, 0.66", "8.64467, -119.905, 18.6696, 0.66", "8.80436, -125.062, 19.9789, 0.66", "8.86909, -129.886, 21.2358, 0.66", "8.9443, -135.451, 22.5829, 0.66", "9.0091, -138.454, 22.9324, 0.66", "9.05611, -142.2, 23.0222, 0.66", "9.19366, -147.844, 22.5024, 0.66", "9.33855, -155.261, 21.4581, 0.66", "9.46636, -158.491, 20.9771, 0.66", "10.1913, -173.658, 18.5814, 0.66", "10.4516, -177.237, 17.9594, 0.66", "11.4694, -188.29, 15.7673, 0.66", "11.9526, -192.955, 14.8038, 0.66", "12.9884, -201.527, 13.1517, 0.66", "13.581, -206.442, 12.5328, 0.66", "14.1521, -211.228, 12.4199, 0.66", "14.701, -215.848, 12.4773, 0.66", "15.0566, -220.303, 12.5382, 0.66", "15.3653, -225.019, 12.4136, 0.66", "15.5852, -232.304, 12.1052, 0.66", "15.7578, -236.734, 12.1289, 0.66", "15.8886, -242.108, 12.2327, 0.66", "16.0424, -249.384, 12.3368, 0.66", "16.1031, -254.026, 12.1837, 0.66", "16.234, -260.269, 11.7012, 0.66", "16.5473, -266.149, 11.1999, 0.66" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "5.99389, -24.2642, -4.77546, 0.66", "8.95628, -26.5141, -6.00093, 0.66", "15.7666, -31.6865, -8.81819, 0.33", "31.3557, -43.5263, -15.267, 0.33", "31.9439, -43.973, -15.5103, 0.66", "38.2348, -48.7509, -18.1127, 0.33" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "14.9249, -33.7725, -0.194444, 0.33", "21.077, -47.4528, -0.194444, 0.33", "27.2291, -61.1331, -0.194444, 0.33" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "16.5473, -266.149, 11.1999, 0.66", "19.9947, -269.812, 12.2745, 0.66", "21.9022, -271.897, 13.211, 0.66", "24.8711, -275.11, 15.638, 0.66", "26.732, -277.029, 17.3987, 0.66", "30.2564, -280.554, 21.0571, 0.66", "32.9663, -283.119, 23.8554, 0.66", "35.5658, -285.457, 26.8126, 0.66", "41.2077, -289.972, 33.1237, 0.66", "44.4452, -292.328, 36.6836, 0.66", "48.2202, -295.052, 40.9163, 0.33", "49.7548, -296.121, 42.5307, 0.33", "50.3072, -296.459, 43.0546, 0.66", "53.6944, -298.238, 45.9213, 0.33", "54.4574, -298.574, 46.3002, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "16.5473, -266.149, 11.1999, 0.66", "17.1781, -269.595, 12.232, 0.66", "17.99, -274.047, 13.5896, 0.66", "19.7241, -282.953, 16.1519, 0.66", "20.4342, -286.834, 17.2315, 0.66", "21.38, -291.558, 18.5686, 0.66", "22.2714, -296.36, 19.7966, 0.66", "22.7504, -299.06, 20.4019, 0.66", "23.2556, -302.797, 21.1101, 0.66", "24.1114, -309.989, 22.2154, 0.66", "24.558, -314.078, 22.6574, 0.66", "25.0245, -318.875, 23.1074, 0.66", "25.2626, -322.938, 23.2564, 0.66", "25.3289, -325.141, 23.3251, 0.66", "25.4018, -332.543, 23.4722, 0.66", "25.3986, -336.376, 23.4358, 0.66", "25.2933, -341.687, 23.3594, 0.66", "25.349, -345.941, 23.4443, 0.66", "25.3698, -347.829, 23.4612, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "25.3698, -347.829, 23.4612, 0.66", "25.784, -350.589, 23.6526, 0.66", "26.2956, -355.071, 24.4506, 0.66", "26.7905, -359.852, 25.4618, 0.66", "27.0362, -362.989, 26.1574, 0.66", "27.3358, -367.326, 27.0258, 0.66", "27.7156, -375.001, 28.3368, 0.66", "27.8242, -380.253, 29.1568, 0.66", "27.8406, -383.856, 29.7661, 0.66", "27.8784, -387.626, 30.3027, 0.66", "27.9523, -391.854, 30.8541, 0.66", "28.0323, -394.747, 31.1962, 0.66", "28.233, -398.719, 31.5443, 0.66", "28.4956, -402.371, 31.8328, 0.66", "29.1532, -410.958, 32.7085, 0.66", "29.4838, -414.371, 33.107, 0.66", "30.2172, -422.939, 34.0536, 0.66", "30.4636, -426.395, 34.3183, 0.66", "30.6351, -429.726, 34.4576, 0.66", "30.7467, -432.723, 34.4634, 0.66", "30.8542, -437.632, 34.4196, 0.66", "30.8803, -441.832, 34.3444, 0.66", "30.845, -449.909, 33.9237, 0.66", "30.9201, -453.988, 33.7094, 0.66", "31.0013, -457.163, 33.5576, 0.66", "31.1573, -461.434, 33.3772, 0.66", "31.7656, -477.503, 32.6596, 0.66", "32.059, -483.407, 32.2853, 0.66", "32.8718, -498.906, 31.0823, 0.66", "33.1913, -504.763, 30.5511, 0.66", "33.5388, -510.525, 30.0681, 0.66", "33.8192, -514.533, 29.7547, 0.66", "34.2645, -520.017, 29.2886, 0.66", "34.643, -526.119, 28.8057, 0.66", "34.9683, -532.773, 28.0417, 0.66", "35.1259, -536.491, 27.6248, 0.66", "35.2489, -539.082, 27.4107, 0.66", "35.7613, -549.132, 27.145, 0.66", "35.919, -552.264, 27.0715, 0.66", "36.0912, -557.407, 26.7311, 0.66", "36.2653, -562.548, 26.308, 0.66", "36.4741, -566.531, 26.0095, 0.66", "37.1241, -576.281, 25.6636, 0.66", "38.0463, -587.475, 25.54, 0.66", "38.7217, -595.095, 25.4131, 0.66", "39.0431, -598.925, 25.2775, 0.66", "40.2205, -612.94, 24.5077, 0.66", "40.812, -621.934, 23.6843, 0.66", "40.98, -624.561, 23.3896, 0.66", "41.2605, -628.821, 22.8109, 0.66", "41.6497, -635.065, 21.7727, 0.66", "41.7481, -637.763, 21.2305, 0.66", "41.8572, -644.987, 19.4855, 0.66", "42.13, -660.053, 15.5953, 0.66", "42.3521, -667.825, 13.8324, 0.66", "42.4842, -670.728, 13.2736, 0.33", "42.6109, -672.666, 12.9696, 1.33", "43.0868, -677.263, 12.512, 0.66", "43.9392, -682.808, 12.28, 0.66", "44.656, -686.744, 12.2307, 0.66", "45.457, -690.728, 12.3009, 0.66", "46.1923, -693.987, 12.333, 0.66", "49.3133, -707.377, 12.8147, 0.66", "49.7469, -709.266, 12.9331, 0.33", "50.3123, -711.965, 13.1023, 1.33", "50.8536, -714.644, 13.211, 0.66", "51.2492, -716.749, 13.2912, 0.33", "52.2781, -722.563, 13.5513, 0.66", "52.6063, -725.569, 14.0123, 0.66", "52.9661, -729.541, 14.8254, 0.33" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 19
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "25.3698, -347.829, 23.4612, 0.66", "22.7889, -355.24, 22.9976, 0.66", "20.6778, -361.53, 22.5298, 0.66", "19.2147, -366.257, 22.5047, 0.33", "17.1956, -372.909, 22.7293, 0.33", "16.8605, -373.997, 22.8213, 0.66", "15.8321, -377.526, 23.214, 0.33", "15.1287, -380.102, 23.6566, 0.66", "13.6743, -386.199, 24.5486, 0.33", "13.4606, -387.164, 24.7199, 0.66", "12.0063, -393.695, 25.8587, 0.33", "11.3999, -397.079, 26.5827, 0.33", "10.898, -400.756, 27.4766, 0.66", "10.3971, -405.159, 28.6753, 0.33", "10.208, -407.536, 29.2861, 0.33", "10.1832, -408.868, 29.7053, 0.66", "10.4857, -414.473, 32.3302, 0.33", "10.5295, -415.291, 32.8256, 0.66", "10.7115, -417.353, 34.2889, 0.33", "10.7833, -418.414, 35.0618, 0.33", "10.8301, -419.537, 35.7588, 0.66", "10.8371, -423.744, 37.9, 0.33", "10.6691, -426.318, 38.7649, 0.33", "10.6237, -427.29, 39.0261, 0.66", "10.5969, -429.174, 39.3713, 0.33", "10.5765, -430.172, 39.4845, 0.66", "10.5468, -431.44, 39.5516, 0.33", "10.5127, -432.752, 39.5242, 0.66", "10.4283, -434.677, 39.5176, 0.33", "10.3824, -435.379, 39.5291, 0.66", "9.89687, -441.198, 39.7548, 0.33", "9.85737, -441.57, 39.7704, 0.66", "9.66914, -442.909, 39.8321, 0.33", "9.55123, -443.606, 39.8661, 0.66", "9.27909, -445.509, 40.1534, 0.33", "9.17845, -446.38, 40.3458, 0.66", "9.05459, -447.938, 40.7683, 0.33", "8.98442, -449.042, 41.0839, 0.66", "8.94102, -450.305, 41.4814, 0.33", "8.83024, -456.184, 43.5329, 0.33", "8.82992, -457.9, 44.2208, 0.66" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "52.9661, -729.541, 14.8254, 0.66", "53.5422, -733.225, 13.9622, 0.66", "53.9234, -735.139, 13.9643, 1.33", "54.2486, -736.785, 14.1119, 0.66", "54.605, -738.855, 14.2468, 0.66", "55.3931, -743.318, 14.7529, 0.33", "56.4116, -748.716, 15.4965, 0.66", "57.7798, -755.693, 16.8996, 0.66", "58.5344, -759.167, 17.7222, 0.66", "59.4463, -763.036, 18.5351, 0.33", "60.6231, -767.983, 19.37, 0.33", "60.9234, -769.381, 19.5071, 0.66", "61.196, -770.536, 19.3965, 0.33", "61.4046, -771.534, 19.1429, 0.66", "62.6264, -777.351, 17.3875, 0.33", "63.1657, -779.779, 16.6482, 0.66", "63.6388, -782.08, 15.8659, 0.33", "64.8779, -788.624, 13.9531, 0.33", "65.6383, -792.46, 12.9912, 0.66", "67.0564, -799.409, 11.5249, 0.33", "67.7176, -802.691, 11.0106, 0.66", "68.3865, -805.93, 10.582, 1.33", "69.9435, -813.329, 9.9071, 0.33", "70.6886, -816.997, 9.81514, 0.33", "70.9788, -818.44, 9.81655, 0.66", "71.6518, -822.08, 9.96496, 0.33", "72.4976, -826.967, 10.2567, 0.33", "72.8246, -828.752, 10.4191, 1.33", "73.7358, -833.879, 10.8863, 0.33", "73.9759, -835.657, 11.077, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "52.9661, -729.541, 14.8254, 0.66", "51.4228, -731.194, 13.5353, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "73.9759, -835.657, 11.077, 0.66", "72.1015, -835.365, 10.2232, 0.66" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "73.9759, -835.657, 11.077, 0.66", "74.2235, -836.856, 10.951, 0.66", "75.3258, -842.191, 10.3899, 0.33", "75.6765, -843.888, 10.2115, 1.33" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "75.6765, -843.888, 10.2115, 0.33", "78.0501, -856.878, 20.0411, 0.33", "78.3209, -858.137, 20.9118, 1.33", "79.2176, -861.646, 23.1942, 0.33", "79.459, -862.369, 23.5925, 0.66", "80.8423, -865.8, 25.2216, 0.33", "81.2621, -866.842, 25.7161, 0.66", "81.8324, -867.766, 25.7553, 0.33", "82.6424, -868.916, 25.7922, 0.66", "85.7362, -872.481, 25.8117, 0.33", "86.9939, -873.765, 25.7813, 1.33" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "75.6765, -843.888, 10.2115, 0.33", "74.0002, -858.869, 13.6018, 0.33", "73.0861, -867.038, 15.4508, 0.33", "72.9424, -868.323, 15.7414, 0.66", "71.9988, -876.755, 17.6498, 0.33", "71.8731, -877.879, 17.9042, 0.66" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_11", "dend_8", "dend_8", "dend_8", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.418459",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.026008999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.025854",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.19695699",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "2.0E-6",
    "erev" : "-60.2509"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.9899996E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.008343",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.026899999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.502333",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.653374",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "5.6999997E-5",
    "erev" : "-76.49812"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "7.84E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.30005398",
    "erev" : "50.0"
  }, {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.002256",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.38E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.005574",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "7.92E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bAC217_L4_BP_8c9cdc6683_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_12, id: dend_12, parent: dend_2
create dend_12
public dend_12
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_5, id: dend_5, parent: dend_3
create dend_5
public dend_5
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_11, id: dend_11, parent: dend_7
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_15
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_0(0), soma_0(0.4500001318721313)
    connect axon_0(0), soma_0(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_12(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_5(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_11(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -3.08452, 6.27464, 0.312461, 1.46623 ) }
    soma_0 { pt3dadd( -2.79927, 5.64032, 0.287115, 2.64844 ) }
    soma_0 { pt3dadd( -2.51401, 5.00599, 0.26177, 4.10361 ) }
    soma_0 { pt3dadd( -2.22875, 4.37167, 0.236425, 4.91598 ) }
    soma_0 { pt3dadd( -1.94349, 3.73735, 0.21108, 5.72835 ) }
    soma_0 { pt3dadd( -1.65823, 3.10303, 0.185734, 6.53421 ) }
    soma_0 { pt3dadd( -1.37297, 2.46871, 0.160389, 7.31212 ) }
    soma_0 { pt3dadd( -1.08771, 1.83438, 0.135044, 8.08989 ) }
    soma_0 { pt3dadd( -0.802456, 1.20006, 0.109699, 8.85679 ) }
    soma_0 { pt3dadd( -0.517198, 0.56574, 0.0843534, 8.93483 ) }
    soma_0 { pt3dadd( -0.23194, -0.0685822, 0.0590082, 8.92633 ) }
    soma_0 { pt3dadd( 0.0533189, -0.702904, 0.033663, 8.91784 ) }
    soma_0 { pt3dadd( 0.338577, -1.33723, 0.00831775, 8.90934 ) }
    soma_0 { pt3dadd( 0.623836, -1.97155, -0.0170275, 8.90084 ) }
    soma_0 { pt3dadd( 0.909094, -2.60587, -0.0423727, 8.82493 ) }
    soma_0 { pt3dadd( 1.19435, -3.24019, -0.067718, 7.82232 ) }
    soma_0 { pt3dadd( 1.47961, -3.87451, -0.0930632, 6.5965 ) }
    soma_0 { pt3dadd( 1.76487, -4.50884, -0.118408, 5.37067 ) }
    soma_0 { pt3dadd( 2.05013, -5.14316, -0.143754, 4.14485 ) }
    soma_0 { pt3dadd( 2.33539, -5.77748, -0.169099, 2.91903 ) }
    soma_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 1.76337 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 21/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 1.61629, -5.71525, -1.26548, 1.33 ) }
    dend_0 { pt3dadd( 2.44078, -9.20881, -1.92656, 1.33 ) }
    dend_0 { pt3dadd( 3.80776, -15.001, -3.02261, 0.66 ) }
    dend_0 { pt3dadd( 4.86611, -19.4856, -3.8712, 0.66 ) }
    dend_0 { pt3dadd( 5.99389, -24.2642, -4.77546, 1.33 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 26/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 8.77276, -20.0921, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 29/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 5.99389, -24.2642, -4.77546, 0.66 ) }
    dend_2 { pt3dadd( 6.37938, -38.3714, -1.40745, 0.66 ) }
    dend_2 { pt3dadd( 6.93025, -59.3255, 3.62187, 0.66 ) }
    dend_2 { pt3dadd( 7.58811, -84.9058, 9.96351, 0.66 ) }
    dend_2 { pt3dadd( 8.18047, -104.648, 14.8857, 0.66 ) }
    dend_2 { pt3dadd( 8.53941, -116.103, 17.7328, 0.66 ) }
    dend_2 { pt3dadd( 8.64467, -119.905, 18.6696, 0.66 ) }
    dend_2 { pt3dadd( 8.80436, -125.062, 19.9789, 0.66 ) }
    dend_2 { pt3dadd( 8.86909, -129.886, 21.2358, 0.66 ) }
    dend_2 { pt3dadd( 8.9443, -135.451, 22.5829, 0.66 ) }
    dend_2 { pt3dadd( 9.0091, -138.454, 22.9324, 0.66 ) }
    dend_2 { pt3dadd( 9.05611, -142.2, 23.0222, 0.66 ) }
    dend_2 { pt3dadd( 9.19366, -147.844, 22.5024, 0.66 ) }
    dend_2 { pt3dadd( 9.33855, -155.261, 21.4581, 0.66 ) }
    dend_2 { pt3dadd( 9.46636, -158.491, 20.9771, 0.66 ) }
    dend_2 { pt3dadd( 10.1913, -173.658, 18.5814, 0.66 ) }
    dend_2 { pt3dadd( 10.4516, -177.237, 17.9594, 0.66 ) }
    dend_2 { pt3dadd( 11.4694, -188.29, 15.7673, 0.66 ) }
    dend_2 { pt3dadd( 11.9526, -192.955, 14.8038, 0.66 ) }
    dend_2 { pt3dadd( 12.9884, -201.527, 13.1517, 0.66 ) }
    dend_2 { pt3dadd( 13.581, -206.442, 12.5328, 0.66 ) }
    dend_2 { pt3dadd( 14.1521, -211.228, 12.4199, 0.66 ) }
    dend_2 { pt3dadd( 14.701, -215.848, 12.4773, 0.66 ) }
    dend_2 { pt3dadd( 15.0566, -220.303, 12.5382, 0.66 ) }
    dend_2 { pt3dadd( 15.3653, -225.019, 12.4136, 0.66 ) }
    dend_2 { pt3dadd( 15.5852, -232.304, 12.1052, 0.66 ) }
    dend_2 { pt3dadd( 15.7578, -236.734, 12.1289, 0.66 ) }
    dend_2 { pt3dadd( 15.8886, -242.108, 12.2327, 0.66 ) }
    dend_2 { pt3dadd( 16.0424, -249.384, 12.3368, 0.66 ) }
    dend_2 { pt3dadd( 16.1031, -254.026, 12.1837, 0.66 ) }
    dend_2 { pt3dadd( 16.234, -260.269, 11.7012, 0.66 ) }
    dend_2 { pt3dadd( 16.5473, -266.149, 11.1999, 0.66 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 61/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 5.99389, -24.2642, -4.77546, 0.66 ) }
    dend_1 { pt3dadd( 8.95628, -26.5141, -6.00093, 0.66 ) }
    dend_1 { pt3dadd( 15.7666, -31.6865, -8.81819, 0.33 ) }
    dend_1 { pt3dadd( 31.3557, -43.5263, -15.267, 0.33 ) }
    dend_1 { pt3dadd( 31.9439, -43.973, -15.5103, 0.66 ) }
    dend_1 { pt3dadd( 38.2348, -48.7509, -18.1127, 0.33 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 67/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 21.077, -47.4528, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 27.2291, -61.1331, -0.194444, 0.33 ) }
    // Section: dend_12, id: dend_12, parent: dend_2 (entry count 70/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 16.5473, -266.149, 11.1999, 0.66 ) }
    dend_12 { pt3dadd( 19.9947, -269.812, 12.2745, 0.66 ) }
    dend_12 { pt3dadd( 21.9022, -271.897, 13.211, 0.66 ) }
    dend_12 { pt3dadd( 24.8711, -275.11, 15.638, 0.66 ) }
    dend_12 { pt3dadd( 26.732, -277.029, 17.3987, 0.66 ) }
    dend_12 { pt3dadd( 30.2564, -280.554, 21.0571, 0.66 ) }
    dend_12 { pt3dadd( 32.9663, -283.119, 23.8554, 0.66 ) }
    dend_12 { pt3dadd( 35.5658, -285.457, 26.8126, 0.66 ) }
    dend_12 { pt3dadd( 41.2077, -289.972, 33.1237, 0.66 ) }
    dend_12 { pt3dadd( 44.4452, -292.328, 36.6836, 0.66 ) }
    dend_12 { pt3dadd( 48.2202, -295.052, 40.9163, 0.33 ) }
    dend_12 { pt3dadd( 49.7548, -296.121, 42.5307, 0.33 ) }
    dend_12 { pt3dadd( 50.3072, -296.459, 43.0546, 0.66 ) }
    dend_12 { pt3dadd( 53.6944, -298.238, 45.9213, 0.33 ) }
    dend_12 { pt3dadd( 54.4574, -298.574, 46.3002, 0.66 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 85/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 16.5473, -266.149, 11.1999, 0.66 ) }
    dend_3 { pt3dadd( 17.1781, -269.595, 12.232, 0.66 ) }
    dend_3 { pt3dadd( 17.99, -274.047, 13.5896, 0.66 ) }
    dend_3 { pt3dadd( 19.7241, -282.953, 16.1519, 0.66 ) }
    dend_3 { pt3dadd( 20.4342, -286.834, 17.2315, 0.66 ) }
    dend_3 { pt3dadd( 21.38, -291.558, 18.5686, 0.66 ) }
    dend_3 { pt3dadd( 22.2714, -296.36, 19.7966, 0.66 ) }
    dend_3 { pt3dadd( 22.7504, -299.06, 20.4019, 0.66 ) }
    dend_3 { pt3dadd( 23.2556, -302.797, 21.1101, 0.66 ) }
    dend_3 { pt3dadd( 24.1114, -309.989, 22.2154, 0.66 ) }
    dend_3 { pt3dadd( 24.558, -314.078, 22.6574, 0.66 ) }
    dend_3 { pt3dadd( 25.0245, -318.875, 23.1074, 0.66 ) }
    dend_3 { pt3dadd( 25.2626, -322.938, 23.2564, 0.66 ) }
    dend_3 { pt3dadd( 25.3289, -325.141, 23.3251, 0.66 ) }
    dend_3 { pt3dadd( 25.4018, -332.543, 23.4722, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_3 { pt3dadd( 25.3986, -336.376, 23.4358, 0.66 ) }
    dend_3 { pt3dadd( 25.2933, -341.687, 23.3594, 0.66 ) }
    dend_3 { pt3dadd( 25.349, -345.941, 23.4443, 0.66 ) }
    dend_3 { pt3dadd( 25.3698, -347.829, 23.4612, 0.66 ) }
    // Section: dend_5, id: dend_5, parent: dend_3 (entry count 4/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 25.3698, -347.829, 23.4612, 0.66 ) }
    dend_5 { pt3dadd( 25.784, -350.589, 23.6526, 0.66 ) }
    dend_5 { pt3dadd( 26.2956, -355.071, 24.4506, 0.66 ) }
    dend_5 { pt3dadd( 26.7905, -359.852, 25.4618, 0.66 ) }
    dend_5 { pt3dadd( 27.0362, -362.989, 26.1574, 0.66 ) }
    dend_5 { pt3dadd( 27.3358, -367.326, 27.0258, 0.66 ) }
    dend_5 { pt3dadd( 27.7156, -375.001, 28.3368, 0.66 ) }
    dend_5 { pt3dadd( 27.8242, -380.253, 29.1568, 0.66 ) }
    dend_5 { pt3dadd( 27.8406, -383.856, 29.7661, 0.66 ) }
    dend_5 { pt3dadd( 27.8784, -387.626, 30.3027, 0.66 ) }
    dend_5 { pt3dadd( 27.9523, -391.854, 30.8541, 0.66 ) }
    dend_5 { pt3dadd( 28.0323, -394.747, 31.1962, 0.66 ) }
    dend_5 { pt3dadd( 28.233, -398.719, 31.5443, 0.66 ) }
    dend_5 { pt3dadd( 28.4956, -402.371, 31.8328, 0.66 ) }
    dend_5 { pt3dadd( 29.1532, -410.958, 32.7085, 0.66 ) }
    dend_5 { pt3dadd( 29.4838, -414.371, 33.107, 0.66 ) }
    dend_5 { pt3dadd( 30.2172, -422.939, 34.0536, 0.66 ) }
    dend_5 { pt3dadd( 30.4636, -426.395, 34.3183, 0.66 ) }
    dend_5 { pt3dadd( 30.6351, -429.726, 34.4576, 0.66 ) }
    dend_5 { pt3dadd( 30.7467, -432.723, 34.4634, 0.66 ) }
    dend_5 { pt3dadd( 30.8542, -437.632, 34.4196, 0.66 ) }
    dend_5 { pt3dadd( 30.8803, -441.832, 34.3444, 0.66 ) }
    dend_5 { pt3dadd( 30.845, -449.909, 33.9237, 0.66 ) }
    dend_5 { pt3dadd( 30.9201, -453.988, 33.7094, 0.66 ) }
    dend_5 { pt3dadd( 31.0013, -457.163, 33.5576, 0.66 ) }
    dend_5 { pt3dadd( 31.1573, -461.434, 33.3772, 0.66 ) }
    dend_5 { pt3dadd( 31.7656, -477.503, 32.6596, 0.66 ) }
    dend_5 { pt3dadd( 32.059, -483.407, 32.2853, 0.66 ) }
    dend_5 { pt3dadd( 32.8718, -498.906, 31.0823, 0.66 ) }
    dend_5 { pt3dadd( 33.1913, -504.763, 30.5511, 0.66 ) }
    dend_5 { pt3dadd( 33.5388, -510.525, 30.0681, 0.66 ) }
    dend_5 { pt3dadd( 33.8192, -514.533, 29.7547, 0.66 ) }
    dend_5 { pt3dadd( 34.2645, -520.017, 29.2886, 0.66 ) }
    dend_5 { pt3dadd( 34.643, -526.119, 28.8057, 0.66 ) }
    dend_5 { pt3dadd( 34.9683, -532.773, 28.0417, 0.66 ) }
    dend_5 { pt3dadd( 35.1259, -536.491, 27.6248, 0.66 ) }
    dend_5 { pt3dadd( 35.2489, -539.082, 27.4107, 0.66 ) }
    dend_5 { pt3dadd( 35.7613, -549.132, 27.145, 0.66 ) }
    dend_5 { pt3dadd( 35.919, -552.264, 27.0715, 0.66 ) }
    dend_5 { pt3dadd( 36.0912, -557.407, 26.7311, 0.66 ) }
    dend_5 { pt3dadd( 36.2653, -562.548, 26.308, 0.66 ) }
    dend_5 { pt3dadd( 36.4741, -566.531, 26.0095, 0.66 ) }
    dend_5 { pt3dadd( 37.1241, -576.281, 25.6636, 0.66 ) }
    dend_5 { pt3dadd( 38.0463, -587.475, 25.54, 0.66 ) }
    dend_5 { pt3dadd( 38.7217, -595.095, 25.4131, 0.66 ) }
    dend_5 { pt3dadd( 39.0431, -598.925, 25.2775, 0.66 ) }
    dend_5 { pt3dadd( 40.2205, -612.94, 24.5077, 0.66 ) }
    dend_5 { pt3dadd( 40.812, -621.934, 23.6843, 0.66 ) }
    dend_5 { pt3dadd( 40.98, -624.561, 23.3896, 0.66 ) }
    dend_5 { pt3dadd( 41.2605, -628.821, 22.8109, 0.66 ) }
    dend_5 { pt3dadd( 41.6497, -635.065, 21.7727, 0.66 ) }
    dend_5 { pt3dadd( 41.7481, -637.763, 21.2305, 0.66 ) }
    dend_5 { pt3dadd( 41.8572, -644.987, 19.4855, 0.66 ) }
    dend_5 { pt3dadd( 42.13, -660.053, 15.5953, 0.66 ) }
    dend_5 { pt3dadd( 42.3521, -667.825, 13.8324, 0.66 ) }
    dend_5 { pt3dadd( 42.4842, -670.728, 13.2736, 0.33 ) }
    dend_5 { pt3dadd( 42.6109, -672.666, 12.9696, 1.33 ) }
    dend_5 { pt3dadd( 43.0868, -677.263, 12.512, 0.66 ) }
    dend_5 { pt3dadd( 43.9392, -682.808, 12.28, 0.66 ) }
    dend_5 { pt3dadd( 44.656, -686.744, 12.2307, 0.66 ) }
    dend_5 { pt3dadd( 45.457, -690.728, 12.3009, 0.66 ) }
    dend_5 { pt3dadd( 46.1923, -693.987, 12.333, 0.66 ) }
    dend_5 { pt3dadd( 49.3133, -707.377, 12.8147, 0.66 ) }
    dend_5 { pt3dadd( 49.7469, -709.266, 12.9331, 0.33 ) }
    dend_5 { pt3dadd( 50.3123, -711.965, 13.1023, 1.33 ) }
    dend_5 { pt3dadd( 50.8536, -714.644, 13.211, 0.66 ) }
    dend_5 { pt3dadd( 51.2492, -716.749, 13.2912, 0.33 ) }
    dend_5 { pt3dadd( 52.2781, -722.563, 13.5513, 0.66 ) }
    dend_5 { pt3dadd( 52.6063, -725.569, 14.0123, 0.66 ) }
    dend_5 { pt3dadd( 52.9661, -729.541, 14.8254, 0.33 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 74/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 25.3698, -347.829, 23.4612, 0.66 ) }
    dend_4 { pt3dadd( 22.7889, -355.24, 22.9976, 0.66 ) }
    dend_4 { pt3dadd( 20.6778, -361.53, 22.5298, 0.66 ) }
    dend_4 { pt3dadd( 19.2147, -366.257, 22.5047, 0.33 ) }
    dend_4 { pt3dadd( 17.1956, -372.909, 22.7293, 0.33 ) }
    dend_4 { pt3dadd( 16.8605, -373.997, 22.8213, 0.66 ) }
    dend_4 { pt3dadd( 15.8321, -377.526, 23.214, 0.33 ) }
    dend_4 { pt3dadd( 15.1287, -380.102, 23.6566, 0.66 ) }
    dend_4 { pt3dadd( 13.6743, -386.199, 24.5486, 0.33 ) }
    dend_4 { pt3dadd( 13.4606, -387.164, 24.7199, 0.66 ) }
    dend_4 { pt3dadd( 12.0063, -393.695, 25.8587, 0.33 ) }
    dend_4 { pt3dadd( 11.3999, -397.079, 26.5827, 0.33 ) }
    dend_4 { pt3dadd( 10.898, -400.756, 27.4766, 0.66 ) }
    dend_4 { pt3dadd( 10.3971, -405.159, 28.6753, 0.33 ) }
    dend_4 { pt3dadd( 10.208, -407.536, 29.2861, 0.33 ) }
    dend_4 { pt3dadd( 10.1832, -408.868, 29.7053, 0.66 ) }
    dend_4 { pt3dadd( 10.4857, -414.473, 32.3302, 0.33 ) }
    dend_4 { pt3dadd( 10.5295, -415.291, 32.8256, 0.66 ) }
    dend_4 { pt3dadd( 10.7115, -417.353, 34.2889, 0.33 ) }
    dend_4 { pt3dadd( 10.7833, -418.414, 35.0618, 0.33 ) }
    dend_4 { pt3dadd( 10.8301, -419.537, 35.7588, 0.66 ) }
    dend_4 { pt3dadd( 10.8371, -423.744, 37.9, 0.33 ) }
    dend_4 { pt3dadd( 10.6691, -426.318, 38.7649, 0.33 ) }
    dend_4 { pt3dadd( 10.6237, -427.29, 39.0261, 0.66 ) }
    dend_4 { pt3dadd( 10.5969, -429.174, 39.3713, 0.33 ) }
    dend_4 { pt3dadd( 10.5765, -430.172, 39.4845, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_4 { pt3dadd( 10.5468, -431.44, 39.5516, 0.33 ) }
    dend_4 { pt3dadd( 10.5127, -432.752, 39.5242, 0.66 ) }
    dend_4 { pt3dadd( 10.4283, -434.677, 39.5176, 0.33 ) }
    dend_4 { pt3dadd( 10.3824, -435.379, 39.5291, 0.66 ) }
    dend_4 { pt3dadd( 9.89687, -441.198, 39.7548, 0.33 ) }
    dend_4 { pt3dadd( 9.85737, -441.57, 39.7704, 0.66 ) }
    dend_4 { pt3dadd( 9.66914, -442.909, 39.8321, 0.33 ) }
    dend_4 { pt3dadd( 9.55123, -443.606, 39.8661, 0.66 ) }
    dend_4 { pt3dadd( 9.27909, -445.509, 40.1534, 0.33 ) }
    dend_4 { pt3dadd( 9.17845, -446.38, 40.3458, 0.66 ) }
    dend_4 { pt3dadd( 9.05459, -447.938, 40.7683, 0.33 ) }
    dend_4 { pt3dadd( 8.98442, -449.042, 41.0839, 0.66 ) }
    dend_4 { pt3dadd( 8.94102, -450.305, 41.4814, 0.33 ) }
    dend_4 { pt3dadd( 8.83024, -456.184, 43.5329, 0.33 ) }
    dend_4 { pt3dadd( 8.82992, -457.9, 44.2208, 0.66 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 15/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 52.9661, -729.541, 14.8254, 0.66 ) }
    dend_7 { pt3dadd( 53.5422, -733.225, 13.9622, 0.66 ) }
    dend_7 { pt3dadd( 53.9234, -735.139, 13.9643, 1.33 ) }
    dend_7 { pt3dadd( 54.2486, -736.785, 14.1119, 0.66 ) }
    dend_7 { pt3dadd( 54.605, -738.855, 14.2468, 0.66 ) }
    dend_7 { pt3dadd( 55.3931, -743.318, 14.7529, 0.33 ) }
    dend_7 { pt3dadd( 56.4116, -748.716, 15.4965, 0.66 ) }
    dend_7 { pt3dadd( 57.7798, -755.693, 16.8996, 0.66 ) }
    dend_7 { pt3dadd( 58.5344, -759.167, 17.7222, 0.66 ) }
    dend_7 { pt3dadd( 59.4463, -763.036, 18.5351, 0.33 ) }
    dend_7 { pt3dadd( 60.6231, -767.983, 19.37, 0.33 ) }
    dend_7 { pt3dadd( 60.9234, -769.381, 19.5071, 0.66 ) }
    dend_7 { pt3dadd( 61.196, -770.536, 19.3965, 0.33 ) }
    dend_7 { pt3dadd( 61.4046, -771.534, 19.1429, 0.66 ) }
    dend_7 { pt3dadd( 62.6264, -777.351, 17.3875, 0.33 ) }
    dend_7 { pt3dadd( 63.1657, -779.779, 16.6482, 0.66 ) }
    dend_7 { pt3dadd( 63.6388, -782.08, 15.8659, 0.33 ) }
    dend_7 { pt3dadd( 64.8779, -788.624, 13.9531, 0.33 ) }
    dend_7 { pt3dadd( 65.6383, -792.46, 12.9912, 0.66 ) }
    dend_7 { pt3dadd( 67.0564, -799.409, 11.5249, 0.33 ) }
    dend_7 { pt3dadd( 67.7176, -802.691, 11.0106, 0.66 ) }
    dend_7 { pt3dadd( 68.3865, -805.93, 10.582, 1.33 ) }
    dend_7 { pt3dadd( 69.9435, -813.329, 9.9071, 0.33 ) }
    dend_7 { pt3dadd( 70.6886, -816.997, 9.81514, 0.33 ) }
    dend_7 { pt3dadd( 70.9788, -818.44, 9.81655, 0.66 ) }
    dend_7 { pt3dadd( 71.6518, -822.08, 9.96496, 0.33 ) }
    dend_7 { pt3dadd( 72.4976, -826.967, 10.2567, 0.33 ) }
    dend_7 { pt3dadd( 72.8246, -828.752, 10.4191, 1.33 ) }
    dend_7 { pt3dadd( 73.7358, -833.879, 10.8863, 0.33 ) }
    dend_7 { pt3dadd( 73.9759, -835.657, 11.077, 0.66 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 45/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 52.9661, -729.541, 14.8254, 0.66 ) }
    dend_6 { pt3dadd( 51.4228, -731.194, 13.5353, 0.66 ) }
    // Section: dend_11, id: dend_11, parent: dend_7 (entry count 47/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 73.9759, -835.657, 11.077, 0.66 ) }
    dend_11 { pt3dadd( 72.1015, -835.365, 10.2232, 0.66 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 49/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 73.9759, -835.657, 11.077, 0.66 ) }
    dend_8 { pt3dadd( 74.2235, -836.856, 10.951, 0.66 ) }
    dend_8 { pt3dadd( 75.3258, -842.191, 10.3899, 0.33 ) }
    dend_8 { pt3dadd( 75.6765, -843.888, 10.2115, 1.33 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 53/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 75.6765, -843.888, 10.2115, 0.33 ) }
    dend_10 { pt3dadd( 78.0501, -856.878, 20.0411, 0.33 ) }
    dend_10 { pt3dadd( 78.3209, -858.137, 20.9118, 1.33 ) }
    dend_10 { pt3dadd( 79.2176, -861.646, 23.1942, 0.33 ) }
    dend_10 { pt3dadd( 79.459, -862.369, 23.5925, 0.66 ) }
    dend_10 { pt3dadd( 80.8423, -865.8, 25.2216, 0.33 ) }
    dend_10 { pt3dadd( 81.2621, -866.842, 25.7161, 0.66 ) }
    dend_10 { pt3dadd( 81.8324, -867.766, 25.7553, 0.33 ) }
    dend_10 { pt3dadd( 82.6424, -868.916, 25.7922, 0.66 ) }
    dend_10 { pt3dadd( 85.7362, -872.481, 25.8117, 0.33 ) }
    dend_10 { pt3dadd( 86.9939, -873.765, 25.7813, 1.33 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 64/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 75.6765, -843.888, 10.2115, 0.33 ) }
    dend_9 { pt3dadd( 74.0002, -858.869, 13.6018, 0.33 ) }
    dend_9 { pt3dadd( 73.0861, -867.038, 15.4508, 0.33 ) }
    dend_9 { pt3dadd( 72.9424, -868.323, 15.7414, 0.66 ) }
    dend_9 { pt3dadd( 71.9988, -876.755, 17.6498, 0.33 ) }
    dend_9 { pt3dadd( 71.8731, -877.879, 17.9042, 0.66 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_2 = new SectionList()
    dend_0 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_2 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_1 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_12 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_3 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_5 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_4 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_7 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_0 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_6 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_11 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_8 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_9 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_10 OneSecGrp_SectionRef_15.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_8 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.418459  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.026008999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 9.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.025854  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.19695699  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-6  // units: S cm-2
        e_pas_nml2 = -60.2509  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.9899996E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.008343  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.026899999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.502333  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.653374  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 5.6999997E-5  // units: S cm-2
        e_pas_nml2 = -76.49812  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 7.84E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.30005398  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec basal {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.002256  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 1.38E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.005574  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 7.92E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_2 nseg = 13
    dend_1 nseg = 3
    dend_12 nseg = 3
    dend_3 nseg = 5
    dend_5 nseg = 19
    dend_4 nseg = 5
    dend_7 nseg = 5
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bAC217_L4_BP_8c9cdc6683_0_0


