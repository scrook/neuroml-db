TITLE Mod file for component: Component(id=IL type=ionChannelHH)

COMMENT

    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.3
         org.neuroml.model   v1.5.3
         jLEMS               v0.9.9.0

ENDCOMMENT

NEURON {
    SUFFIX IL
    USEION ca READ eca WRITE ica VALENCE 2 ? Assuming valence = 2 (Ca ion); TODO check this!!
    
    RANGE gion                           
    RANGE gmax                              : Will be changed when ion channel mechanism placed on cell!
    RANGE conductance                       : parameter
    
    RANGE g                                 : exposure
    
    RANGE fopen                             : exposure
    RANGE q_instances                       : parameter
    
    RANGE q_alpha                           : exposure
    
    RANGE q_beta                            : exposure
    
    RANGE q_tau                             : exposure
    
    RANGE q_inf                             : exposure
    
    RANGE q_rateScale                       : exposure
    
    RANGE q_fcond                           : exposure
    RANGE q_forwardRate_TIME_SCALE          : parameter
    RANGE q_forwardRate_VOLT_SCALE          : parameter
    
    RANGE q_forwardRate_r                   : exposure
    RANGE q_reverseRate_TIME_SCALE          : parameter
    RANGE q_reverseRate_VOLT_SCALE          : parameter
    
    RANGE q_reverseRate_r                   : exposure
    RANGE r_instances                       : parameter
    
    RANGE r_alpha                           : exposure
    
    RANGE r_beta                            : exposure
    
    RANGE r_tau                             : exposure
    
    RANGE r_inf                             : exposure
    
    RANGE r_rateScale                       : exposure
    
    RANGE r_fcond                           : exposure
    RANGE r_forwardRate_TIME_SCALE          : parameter
    RANGE r_forwardRate_VOLT_SCALE          : parameter
    
    RANGE r_forwardRate_r                   : exposure
    RANGE r_reverseRate_TIME_SCALE          : parameter
    RANGE r_reverseRate_VOLT_SCALE          : parameter
    
    RANGE r_reverseRate_r                   : exposure
    RANGE q_forwardRate_V                   : derived variable
    RANGE q_reverseRate_V                   : derived variable
    RANGE r_forwardRate_V                   : derived variable
    RANGE r_reverseRate_V                   : derived variable
    RANGE conductanceScale                  : derived variable
    RANGE fopen0                            : derived variable
    
}

UNITS {
    
    (nA) = (nanoamp)
    (uA) = (microamp)
    (mA) = (milliamp)
    (A) = (amp)
    (mV) = (millivolt)
    (mS) = (millisiemens)
    (uS) = (microsiemens)
    (molar) = (1/liter)
    (kHz) = (kilohertz)
    (mM) = (millimolar)
    (um) = (micrometer)
    (umol) = (micromole)
    (S) = (siemens)
    
}

PARAMETER {
    
    gmax = 0  (S/cm2)                       : Will be changed when ion channel mechanism placed on cell!
    
    conductance = 0 (uS)
    q_instances = 2 
    q_forwardRate_TIME_SCALE = 1 (ms)
    q_forwardRate_VOLT_SCALE = 1 (mV)
    q_reverseRate_TIME_SCALE = 1 (ms)
    q_reverseRate_VOLT_SCALE = 1 (mV)
    r_instances = 1 
    r_forwardRate_TIME_SCALE = 1 (ms)
    r_forwardRate_VOLT_SCALE = 1 (mV)
    r_reverseRate_TIME_SCALE = 1 (ms)
    r_reverseRate_VOLT_SCALE = 1 (mV)
}

ASSIGNED {
    
    gion   (S/cm2)                          : Transient conductance density of the channel? Standard Assigned variables with ionChannel
    v (mV)
    celsius (degC)
    temperature (K)
    eca (mV)
    ica (mA/cm2)
    
    
    q_forwardRate_V                        : derived variable
    
    q_forwardRate_r (kHz)                  : derived variable
    
    q_reverseRate_V                        : derived variable
    
    q_reverseRate_r (kHz)                  : derived variable
    
    q_rateScale                            : derived variable
    
    q_alpha (kHz)                          : derived variable
    
    q_beta (kHz)                           : derived variable
    
    q_fcond                                : derived variable
    
    q_inf                                  : derived variable
    
    q_tau (ms)                             : derived variable
    
    r_forwardRate_V                        : derived variable
    
    r_forwardRate_r (kHz)                  : derived variable
    
    r_reverseRate_V                        : derived variable
    
    r_reverseRate_r (kHz)                  : derived variable
    
    r_rateScale                            : derived variable
    
    r_alpha (kHz)                          : derived variable
    
    r_beta (kHz)                           : derived variable
    
    r_fcond                                : derived variable
    
    r_inf                                  : derived variable
    
    r_tau (ms)                             : derived variable
    
    conductanceScale                       : derived variable
    
    fopen0                                 : derived variable
    
    fopen                                  : derived variable
    
    g (uS)                                 : derived variable
    rate_q_q (/ms)
    rate_r_q (/ms)
    
}

STATE {
    q_q  
    r_q  
    
}

INITIAL {
    temperature = celsius + 273.15
    
    rates()
    rates() ? To ensure correct initialisation.
    
    q_q = q_inf
    
    r_q = r_inf
    
}

BREAKPOINT {
    
    SOLVE states METHOD cnexp
    
    ? DerivedVariable is based on path: conductanceScaling[*]/factor, on: Component(id=IL type=ionChannelHH), from conductanceScaling; null
    ? Path not present in component, using factor: 1
    
    conductanceScale = 1 
    
    ? DerivedVariable is based on path: gates[*]/fcond, on: Component(id=IL type=ionChannelHH), from gates; Component(id=q type=gateHHrates)
    ? multiply applied to all instances of fcond in: <gates> ([Component(id=q type=gateHHrates), Component(id=r type=gateHHrates)]))
    fopen0 = q_fcond * r_fcond ? path based, prefix = 
    
    fopen = conductanceScale  *  fopen0 ? evaluable
    g = conductance  *  fopen ? evaluable
    gion = gmax * fopen 
    
    ica = gion * (v - eca)
    
}

DERIVATIVE states {
    rates()
    q_q' = rate_q_q 
    r_q' = rate_r_q 
    
}

PROCEDURE rates() {
    
    q_forwardRate_V = v /  q_forwardRate_VOLT_SCALE ? evaluable
    q_forwardRate_r = 0.055 * (-27- q_forwardRate_V ) / (exp((-27- q_forwardRate_V )/3.8) - 1) /  q_forwardRate_TIME_SCALE ? evaluable
    q_reverseRate_V = v /  q_reverseRate_VOLT_SCALE ? evaluable
    q_reverseRate_r = 0.94 * exp((-75- q_reverseRate_V )/17) /  q_reverseRate_TIME_SCALE ? evaluable
    ? DerivedVariable is based on path: q10Settings[*]/q10, on: Component(id=q type=gateHHrates), from q10Settings; null
    ? Path not present in component, using factor: 1
    
    q_rateScale = 1 
    
    ? DerivedVariable is based on path: forwardRate/r, on: Component(id=q type=gateHHrates), from forwardRate; Component(id=null type=IL_q_alpha_rate)
    q_alpha = q_forwardRate_r ? path based, prefix = q_
    
    ? DerivedVariable is based on path: reverseRate/r, on: Component(id=q type=gateHHrates), from reverseRate; Component(id=null type=IL_q_beta_rate)
    q_beta = q_reverseRate_r ? path based, prefix = q_
    
    q_fcond = q_q ^ q_instances ? evaluable
    q_inf = q_alpha /( q_alpha + q_beta ) ? evaluable
    q_tau = 1/(( q_alpha + q_beta ) *  q_rateScale ) ? evaluable
    r_forwardRate_V = v /  r_forwardRate_VOLT_SCALE ? evaluable
    r_forwardRate_r = 0.000457 * exp((-13- r_forwardRate_V )/50) /  r_forwardRate_TIME_SCALE ? evaluable
    r_reverseRate_V = v /  r_reverseRate_VOLT_SCALE ? evaluable
    r_reverseRate_r = 0.0065 / (exp((-15- r_reverseRate_V )/28) + 1) /  r_reverseRate_TIME_SCALE ? evaluable
    ? DerivedVariable is based on path: q10Settings[*]/q10, on: Component(id=r type=gateHHrates), from q10Settings; null
    ? Path not present in component, using factor: 1
    
    r_rateScale = 1 
    
    ? DerivedVariable is based on path: forwardRate/r, on: Component(id=r type=gateHHrates), from forwardRate; Component(id=null type=IL_r_alpha_rate)
    r_alpha = r_forwardRate_r ? path based, prefix = r_
    
    ? DerivedVariable is based on path: reverseRate/r, on: Component(id=r type=gateHHrates), from reverseRate; Component(id=null type=IL_r_beta_rate)
    r_beta = r_reverseRate_r ? path based, prefix = r_
    
    r_fcond = r_q ^ r_instances ? evaluable
    r_inf = r_alpha /( r_alpha + r_beta ) ? evaluable
    r_tau = 1/(( r_alpha + r_beta ) *  r_rateScale ) ? evaluable
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    rate_q_q = ( q_inf  -  q_q ) /  q_tau ? Note units of all quantities used here need to be consistent!
    
     
    
     
    
     
    rate_r_q = ( r_inf  -  r_q ) /  r_tau ? Note units of all quantities used here need to be consistent!
    
     
    
     
    
     
    
}

