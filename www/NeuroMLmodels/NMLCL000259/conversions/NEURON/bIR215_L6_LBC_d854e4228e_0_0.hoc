// Cell: bIR215_L6_LBC_d854e4228e_0_0
/*
{
  "id" : "bIR215_L6_LBC_d854e4228e_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "4.2367, -9.76448, 0.00225588, 4.58694", "3.82852, -8.84534, 0.00235142, 7.99356", "3.42034, -7.92621, 0.00244695, 13.6531", "3.01216, -7.00707, 0.00254249, 15.6165", "2.60398, -6.08793, 0.00263803, 16.6635", "2.19581, -5.1688, 0.00273357, 17.324", "1.78763, -4.24966, 0.00282911, 17.8707", "1.37945, -3.33052, 0.00292465, 18.253", "0.971266, -2.41139, 0.00302019, 18.5857", "0.563086, -1.49225, 0.00311573, 18.7248", "0.154906, -0.573117, 0.00321127, 18.6468", "-0.253273, 0.34602, 0.0033068, 18.1821", "-0.661453, 1.26516, 0.00340234, 17.5647", "-1.06963, 2.18429, 0.00349788, 16.6059", "-1.47781, 3.10343, 0.00359342, 15.0647", "-1.88599, 4.02256, 0.00368896, 12.8788", "-2.29417, 4.9417, 0.0037845, 10.2973", "-2.70235, 5.86084, 0.00388004, 7.98803", "-3.11053, 6.77997, 0.00397558, 5.82735", "-3.51871, 7.69911, 0.00407112, 4.11866", "-3.92689, 8.61824, 0.00416665, 2.58199" ]
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "9.56674, -4.12939, -8.4286, 1.11", "9.67498, -4.30758, -8.45105, 1.11", "10.4904, -5.76, -8.63841, 1.11", "11.1412, -7.01509, -8.84575, 1.11", "11.9309, -8.53815, -9.09737, 1.11", "12.751, -10.1196, -9.35864, 1.11", "13.7312, -12.0099, -9.67092, 1.11", "14.7838, -14.1606, -10.0549, 1.11", "15.6839, -16.2165, -10.4658, 1.11" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000024236019176
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-4.85326, -9.18964, -0.068597, 0.88", "-5.45206, -9.59584, -0.0494771, 0.88", "-6.54758, -10.339, -0.0144965, 0.88", "-7.84468, -11.219, 0.0269205, 0.88", "-8.62019, -11.7451, 0.0516831, 0.88" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000024236019176
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "-9.86326, -1.39939, -9.0686, 2.2", "-10.1135, -1.45379, -9.18932, 2.21", "-13.3162, -2.15006, -10.7344, 1.69", "-15.2038, -2.56044, -11.6451, 1.69", "-16.3722, -2.81443, -12.2088, 1.69", "-17.7353, -3.11078, -12.8664, 1.69" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000024236019176
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-3.19326, -10.8276, -1.8786, 1.47", "-3.32063, -11.1558, -1.94656, 1.47", "-4.05401, -12.7547, -2.40065, 1.47", "-5.01106, -14.5809, -2.98613, 1.47", "-5.7485, -15.8796, -3.40075, 1.47", "-6.53603, -17.1841, -3.79474, 1.47", "-7.79936, -19.2298, -4.40325, 1.33", "-9.05761, -21.1928, -4.98424, 1.18", "-10.3831, -23.2214, -5.56184, 1.18", "-11.3845, -24.7484, -5.95612, 1.18", "-12.4592, -26.4387, -6.33808, 1.18", "-13.704, -28.4922, -6.70619, 1.18", "-14.4422, -29.7985, -6.88828, 1.11", "-15.36, -31.5453, -7.11394, 1.11", "-15.9846, -32.8171, -7.2714, 0.88", "-16.691, -34.3431, -7.47368, 0.88", "-17.23, -35.5744, -7.64266, 0.88", "-17.9815, -37.2799, -7.85313, 0.88", "-18.0796, -37.4941, -7.88775, 0.88" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000024236019176
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-5.46326, 9.95936, -0.378597, 2.58", "-5.50652, 10.0284, -0.384284, 2.58", "-6.75501, 12.0221, -0.548425, 2.58", "-7.46529, 13.1562, -0.641808, 2.28", "-8.85772, 15.3797, -0.824874, 2.28", "-9.51198, 16.4244, -0.910892, 2.28" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000024236019176
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "-3.92689, 8.61824, 0.00416665, 1.03", "-10.0149, 22.3272, 0.00416665, 1.03", "-16.1029, 36.0362, 0.00416665, 1.03" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "15.6839, -16.2165, -10.4658, 0.37", "16.0637, -18.8007, -10.6387, 0.37", "16.2221, -20.3097, -10.6818, 0.37", "16.3543, -21.8237, -10.7035, 0.37", "16.5238, -23.8797, -10.6777, 0.37", "16.6551, -25.6724, -10.6321, 0.37", "16.8387, -28.7872, -10.5345, 0.37", "16.9382, -32.49, -10.3211, 0.37", "16.9203, -34.3799, -10.2016, 0.37", "16.7724, -36.9836, -10.0303, 0.37", "16.4683, -39.791, -9.84638, 0.37", "16.1539, -41.8266, -9.72476, 0.37", "15.6612, -44.4627, -9.60543, 0.37", "15.2536, -46.4155, -9.50493, 0.37", "14.7412, -48.6922, -9.38786, 0.37", "14.2426, -50.8741, -9.28767, 0.37", "13.5285, -54.4242, -9.11704, 0.37", "12.8493, -58.5198, -8.81643, 0.37", "12.6712, -59.9983, -8.68292, 0.37", "12.5023, -62.3076, -8.45154, 0.37", "12.3958, -65.4372, -8.04905, 0.37", "12.4253, -68.5649, -7.57479, 0.37", "12.5982, -71.5965, -7.11386, 0.37", "12.8014, -74.0904, -6.71272, 0.37", "12.9531, -75.56, -6.48239, 0.37", "13.2956, -77.9871, -6.06393, 0.37", "13.7334, -80.5141, -5.58976, 0.37", "14.1245, -82.5193, -5.23197, 0.37" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-17.7353, -3.11078, -12.8664, 0.52", "-20.3409, -6.52082, -12.8818, 0.52", "-22.5746, -9.56484, -12.826, 0.52", "-24.2621, -11.9786, -12.7405, 0.52", "-25.416, -13.6794, -12.6595, 0.52", "-26.5236, -15.3254, -12.564, 0.52", "-27.4492, -16.7153, -12.4882, 0.52", "-28.5755, -18.4873, -12.326, 0.52", "-29.4937, -19.9726, -12.1787, 0.52", "-30.2953, -21.2711, -12.0438, 0.52", "-31.5241, -23.2288, -11.7786, 0.52", "-33.1958, -25.7889, -11.3661, 0.52", "-34.4465, -27.6283, -11.0322, 0.52", "-35.5184, -29.0973, -10.742, 0.52", "-36.9091, -31.0021, -10.3389, 0.52", "-38.0754, -32.6671, -9.94613, 0.52", "-39.0147, -34.0543, -9.59391, 0.52", "-40.5393, -36.3385, -8.99113, 0.52", "-41.6312, -37.9721, -8.58761, 0.52", "-42.8155, -39.7595, -8.20925, 0.52", "-44.3378, -42.0621, -7.79682, 0.52", "-45.5742, -43.9036, -7.53162, 0.52", "-46.7571, -45.6459, -7.29864, 0.52", "-47.7421, -47.05, -7.12659, 0.52", "-48.925, -48.6923, -6.94323, 0.52", "-51.26, -51.817, -6.62684, 0.52", "-52.7275, -53.7823, -6.44336, 0.52", "-54.516, -56.1975, -6.20779, 0.52", "-56.5054, -58.8841, -5.85838, 0.52", "-58.432, -61.5254, -5.44912, 0.52", "-61.4064, -65.6621, -4.71547, 0.52", "-62.988, -67.8845, -4.22505, 0.52", "-64.7716, -70.4324, -3.56544, 0.52", "-66.8876, -73.5778, -2.63686, 0.52", "-67.7704, -75.0082, -2.139, 0.52", "-68.412, -76.1967, -1.66925, 0.52", "-69.2707, -78.1532, -0.588033, 0.52", "-69.7615, -79.7112, 0.436099, 0.52", "-69.9934, -81.4591, 1.8454, 0.52", "-70.0831, -83.3008, 3.41798, 0.52", "-70.0821, -85.1626, 5.13289, 0.52", "-69.8588, -88.9043, 8.79757, 0.59", "-69.6489, -90.3666, 10.2965, 0.59", "-69.0347, -92.7911, 13.2537, 0.59" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-17.7353, -3.11078, -12.8664, 0.81", "-19.2639, -2.25819, -12.9864, 0.81", "-20.8361, -1.46488, -13.0424, 0.81", "-22.5865, -0.62547, -13.0072, 0.81", "-23.9126, -0.0598457, -12.9693, 0.59", "-25.7427, 0.640032, -12.9162, 0.59", "-27.808, 1.34932, -12.865, 0.59", "-29.4523, 1.80947, -12.8161, 0.59", "-30.6881, 2.09379, -12.8223, 0.59", "-33.2425, 2.60122, -12.9546, 0.59", "-34.9271, 2.90677, -13.12, 0.59", "-37.0366, 3.2869, -13.4185, 0.59", "-39.187, 3.68637, -13.8195, 0.59", "-41.3509, 4.1176, -14.2644, 0.59", "-42.862, 4.43709, -14.5994, 0.59", "-44.2558, 4.75785, -14.888, 0.59", "-45.3332, 5.0017, -15.0854, 0.59", "-47.0527, 5.35557, -15.34, 0.59", "-48.4778, 5.63084, -15.4925, 0.59", "-49.7288, 5.83821, -15.5881, 0.59", "-51.7999, 6.1283, -15.7084, 0.59", "-54.4752, 6.46547, -15.8538, 0.59", "-56.0822, 6.65517, -15.9395, 0.59", "-57.3823, 6.8037, -16.0083, 0.59", "-58.8856, 6.96921, -16.0873, 0.59", "-60.63, 7.17164, -16.1673, 0.59", "-62.448, 7.4252, -16.2013, 0.59", "-64.2641, 7.72963, -16.1951, 0.59", "-65.9656, 8.05456, -16.1669, 0.59", "-67.0526, 8.26637, -16.1393, 0.59", "-68.7685, 8.62048, -16.0919, 0.59", "-70.7827, 9.04866, -16.0354, 0.59", "-72.3936, 9.38599, -16.0025, 0.59", "-74.8655, 9.90214, -15.9871, 0.59", "-76.8094, 10.3164, -16.0152, 0.59", "-78.9203, 10.7453, -16.0912, 0.59", "-79.859, 10.9171, -16.149, 0.59", "-81.0717, 11.1331, -16.2556, 0.44", "-83.1225, 11.5572, -16.4481, 0.44", "-84.7625, 11.9615, -16.6135, 0.44", "-86.0507, 12.3292, -16.7495, 0.44", "-87.006, 12.6274, -16.8649, 0.44", "-88.5084, 13.1133, -17.056, 0.44", "-91.166, 13.956, -17.3911, 0.44", "-92.7654, 14.461, -17.6219, 0.44", "-94.7343, 15.0656, -17.9295, 0.44", "-96.0518, 15.4444, -18.1434, 0.44", "-97.6274, 15.8521, -18.4024, 0.44", "-99.9296, 16.3618, -18.7802, 0.44", "-100.932, 16.5613, -18.9424, 0.44", "-101.986, 16.766, -19.103, 0.44", "-103.005, 16.9669, -19.2428, 0.44", "-103.958, 17.1566, -19.3496, 0.44", "-104.899, 17.3506, -19.4497, 0.44", "-106.791, 17.7463, -19.6309, 0.44", "-108.287, 18.0387, -19.7533, 0.44", "-109.302, 18.2262, -19.8349, 0.44", "-110.747, 18.4834, -19.9486, 0.44", "-113.427, 18.9256, -20.1544, 0.44", "-115.679, 19.2715, -20.324, 0.44", "-117.564, 19.537, -20.4626, 0.44", "-119.534, 19.8231, -20.6099, 0.44", "-122.39, 20.2527, -20.8243, 0.44" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-18.0796, -37.4941, -7.88775, 0.37", "-18.3273, -38.5582, -8.53006, 0.37", "-18.6292, -39.8615, -9.32366, 0.37", "-18.848, -40.8123, -9.86598, 0.37", "-18.9617, -41.2869, -10.1332, 0.37", "-19.4741, -43.4256, -11.3375, 0.37", "-19.8702, -45.079, -12.2685, 0.37", "-20.3162, -46.6574, -13.1766, 0.37", "-20.5977, -47.5707, -13.7456, 0.37", "-20.9957, -48.9145, -14.5952, 0.37" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-18.0796, -37.4941, -7.88775, 0.52", "-20.2999, -38.7339, -8.95902, 0.52", "-21.8362, -39.5964, -9.64367, 0.52", "-24.5473, -41.0511, -10.866, 0.52", "-27.1441, -42.3604, -11.9943, 0.52", "-28.8782, -43.2181, -12.7671, 0.52", "-30.2601, -43.902, -13.3772, 0.52", "-31.4968, -44.5223, -13.8967, 0.52", "-33.4564, -45.495, -14.6983, 0.52", "-35.3385, -46.37, -15.3732, 0.52", "-37.1067, -47.1341, -15.9162, 0.52", "-38.7435, -47.8443, -16.4703, 0.52", "-41.8142, -49.198, -17.5606, 0.52", "-43.0219, -49.7515, -18.0281, 0.52", "-51.3671, -53.6596, -21.3566, 0.52", "-56.2323, -55.969, -23.3617, 0.52", "-59.0318, -57.2746, -24.5132, 0.52", "-61.6518, -58.4856, -25.605, 0.52", "-64.9537, -60.0213, -26.9907, 0.52", "-66.6355, -60.8449, -27.7014, 0.52", "-67.9135, -61.5435, -28.2328, 0.52", "-69.9374, -62.741, -28.9364, 0.52", "-72.0509, -63.984, -29.3891, 0.44", "-72.8287, -64.4566, -29.5527, 0.44", "-74.0389, -65.2072, -29.817, 0.44", "-75.8005, -66.32, -30.3926, 0.44", "-78.1526, -67.7349, -31.1451, 0.44", "-79.8572, -68.684, -31.6671, 0.37", "-82.8115, -70.2607, -32.639, 0.37", "-84.0837, -70.8912, -33.0752, 0.37", "-86.43, -71.917, -33.9177, 0.37", "-89.9213, -73.2482, -35.2409, 0.37", "-92.5138, -74.0824, -36.2197, 0.37" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-9.51198, 16.4244, -0.910892, 0.59", "-11.5033, 17.6457, 0.448923, 0.59", "-12.9214, 18.6365, 1.32333, 0.59", "-14.8886, 20.1206, 2.50403, 0.59", "-16.5746, 21.4776, 3.3667, 0.59", "-17.7455, 22.4518, 3.92901, 0.59", "-19.2505, 23.6868, 4.65445, 0.44", "-20.3831, 24.6608, 5.19172, 0.44", "-21.9974, 26.0499, 5.90259, 0.44", "-23.5192, 27.3272, 6.59603, 0.37", "-25.1329, 28.5979, 7.3515, 0.37", "-26.4293, 29.5427, 8.03462, 0.37", "-28.8062, 31.1659, 9.45781, 0.37", "-30.1726, 32.0579, 10.2699, 0.37", "-31.5452, 32.9068, 11.1397, 0.37", "-37.5473, 37.1044, 13.8869, 0.37", "-42.8086, 41.5906, 17.5187, 0.37", "-48.0202, 45.4121, 21.9355, 0.37", "-53.8471, 47.7986, 26.6434, 0.37", "-60.5535, 49.3946, 30.4556, 0.37" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-9.51198, 16.4244, -0.910892, 1.84", "-9.73295, 19.4746, -0.745867, 1.84", "-9.92917, 22.6956, -0.556657, 1.84", "-10.1597, 25.8342, -0.362956, 1.84", "-10.3899, 28.418, -0.192548, 1.84", "-10.6562, 30.9627, -0.0203126, 1.55", "-10.9841, 33.802, 0.172596, 1.47", "-11.3327, 36.3964, 0.335757, 1.47", "-11.8455, 39.9429, 0.529446, 1.47", "-12.3198, 43.0058, 0.684918, 1.47", "-12.642, 44.9483, 0.783105, 1.18", "-13.2993, 48.5656, 1.00225, 1.18", "-14.2734, 53.8895, 1.3455, 1.18", "-14.8195, 56.9674, 1.5619, 1.18", "-15.2883, 59.697, 1.83207, 1.03", "-15.7765, 62.6868, 2.20827, 1.03", "-16.0746, 64.6593, 2.51776, 0.81", "-16.2635, 65.9951, 2.77696, 0.81", "-16.5096, 67.9646, 3.22497, 0.81", "-16.8484, 70.9813, 3.91736, 0.81", "-16.9958, 72.5608, 4.22396, 0.74", "-17.1465, 74.857, 4.59511, 0.66", "-17.2519, 77.4304, 4.93635, 0.66", "-17.3084, 80.9507, 5.34971, 0.66", "-17.2635, 84.0316, 5.59902, 0.66", "-17.1373, 87.5433, 5.77464, 0.66", "-17.0648, 90.6354, 5.90036, 0.66", "-16.9993, 93.7161, 6.0122, 0.66", "-16.9312, 97.1434, 6.13794, 0.66", "-16.8578, 101.17, 6.26986, 0.66", "-16.8338, 103.507, 6.35229, 0.66", "-16.8321, 107.517, 6.53604, 0.66", "-16.8649, 110.711, 6.68756, 0.66", "-16.9007, 113.589, 6.85912, 0.66", "-16.9113, 116.443, 7.0892, 0.59", "-16.8533, 119.104, 7.3881, 0.59", "-16.681, 122.177, 7.77178, 0.59", "-16.4533, 124.904, 8.14312, 0.59", "-16.1188, 128.896, 8.70921, 0.59", "-15.8052, 132.509, 9.24733, 0.59", "-15.2808, 138.247, 10.2983, 0.59", "-14.9278, 141.627, 10.8794, 0.59", "-14.6352, 144.379, 11.3176, 0.59", "-14.4007, 147.023, 11.6914, 0.59", "-14.2848, 148.601, 11.8658, 0.59", "-14.0545, 152.365, 12.1299, 0.59", "-13.793, 156.582, 12.2421, 0.59", "-13.6255, 158.907, 12.2425, 0.59", "-13.2601, 163.143, 12.1708, 0.59", "-13.0233, 165.787, 12.0872, 0.59", "-12.6588, 169.928, 11.9119, 0.59", "-12.4605, 172.183, 11.8086, 0.52", "-12.2728, 174.141, 11.8462, 0.52", "-12.1073, 175.514, 11.9028, 0.52", "-11.9556, 176.618, 11.9843, 0.52", "-11.7664, 177.982, 12.1464, 0.52", "-11.3318, 181.019, 12.6095, 0.52", "-10.9795, 183.635, 13.0415, 0.52", "-10.6905, 185.817, 13.4378, 0.52", "-10.4171, 187.796, 13.8235, 0.52", "-10.1618, 189.503, 14.1749, 0.52", "-9.89685, 191.258, 14.5463, 0.52", "-9.45413, 194.162, 15.1673, 0.52", "-9.08766, 196.868, 15.7263, 0.52", "-8.716, 199.801, 16.311, 0.52", "-8.43323, 202.261, 16.78, 0.52", "-8.16448, 204.864, 17.2517, 0.52", "-7.71643, 209.163, 18.0034, 0.52", "-7.23063, 213.814, 18.7812, 0.52", "-6.91245, 217.288, 19.3194, 0.52", "-6.67115, 220.749, 19.8375, 0.52", "-6.46771, 224.75, 20.4185, 0.52", "-6.38731, 226.998, 20.7368, 0.52", "-6.35546, 229.13, 20.9827, 0.52", "-6.34277, 231.53, 21.2065, 0.52", "-6.41289, 234.489, 21.4201, 0.52", "-6.53572, 238.545, 21.5209, 0.52", "-6.63081, 241.849, 21.4995, 0.52", "-6.6742, 244.792, 21.4345, 0.52", "-6.5949, 248.208, 21.348, 0.52", "-6.28751, 253.322, 21.3213, 0.52", "-5.95568, 257.083, 21.3834, 0.52", "-5.65216, 259.941, 21.5015, 0.52", "-5.36244, 262.179, 21.6402, 0.52", "-4.89264, 265.151, 21.9553, 0.52", "-4.32378, 268.146, 22.3617, 0.52", "-3.77703, 270.308, 22.8315, 0.52", "-3.55255, 271.218, 23.1566, 0.52" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "-16.1029, 36.0362, 0.00416665, 0.74", "-22.191, 49.7452, 0.00416665, 0.74", "-28.279, 63.4541, 0.00416665, 0.74" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "-20.9957, -48.9145, -14.5952, 0.37", "-20.3162, -50.7375, -14.2911, 0.37", "-19.587, -52.8519, -13.876, 0.37", "-18.9313, -55.0694, -13.2828, 0.37", "-18.625, -56.2932, -12.9345, 0.37", "-18.1727, -58.2759, -12.3849, 0.37", "-17.8082, -59.9503, -11.9169, 0.37", "-17.471, -61.6562, -11.4166, 0.37", "-17.0365, -63.9003, -10.8085, 0.37", "-16.6005, -66.2047, -10.2059, 0.37", "-16.1518, -68.5973, -9.59941, 0.37", "-15.5187, -71.8215, -8.8198, 0.37", "-14.7175, -75.6625, -7.98712, 0.37", "-14.1207, -78.3668, -7.44063, 0.37", "-13.5844, -80.5342, -7.04012, 0.37", "-13.1725, -82.0482, -6.75156, 0.37", "-12.4136, -84.5764, -6.27688, 0.37", "-11.5791, -87.0183, -5.85916, 0.37", "-11.0413, -88.3266, -5.64097, 0.37", "-10.6221, -89.1821, -5.48739, 0.37", "-10.1486, -90.0025, -5.34397, 0.37", "-9.19693, -91.4821, -4.9461, 0.37", "-8.4208, -92.587, -4.54313, 0.37", "-7.4812, -93.878, -3.99463, 0.37", "-6.46585, -95.2866, -3.37506, 0.37", "-5.91548, -96.1024, -3.01391, 0.37", "-4.93103, -97.7314, -2.22346, 0.37", "-4.28751, -98.9366, -1.61329, 0.37", "-3.60575, -100.4, -0.922556, 0.37", "-3.18042, -101.498, -0.468861, 0.37", "-2.87587, -102.498, -0.145596, 0.37", "-2.42898, -104.548, 0.388707, 0.37", "-2.27026, -105.703, 0.596438, 0.37", "-2.2101, -106.833, 0.76301, 0.37", "-2.22479, -107.617, 0.846583, 0.37", "-2.28815, -108.916, 0.883993, 0.37", "-2.38366, -110.27, 0.819605, 0.37", "-2.46974, -111.189, 0.718483, 0.37", "-2.65365, -112.833, 0.509344, 0.37", "-2.82117, -114.229, 0.331794, 0.37", "-2.99393, -115.553, 0.143944, 0.37", "-3.15744, -116.679, -0.0240052, 0.37", "-3.29205, -117.535, -0.149492, 0.37", "-3.44772, -118.541, -0.282083, 0.37", "-3.63711, -119.751, -0.413291, 0.37", "-3.86468, -121.283, -0.523477, 0.37", "-4.04691, -122.572, -0.477617, 0.37", "-4.19967, -123.699, -0.362385, 0.37", "-4.34721, -124.732, -0.192777, 0.37", "-4.51879, -125.749, 0.0387069, 0.37", "-4.68614, -126.677, 0.310291, 0.37", "-5.06098, -128.513, 0.984684, 0.37", "-5.27994, -129.368, 1.36649, 0.37", "-5.45707, -129.95, 1.65225, 0.37", "-5.62244, -130.495, 1.94644, 0.37", "-5.81456, -131.28, 2.35142, 0.37", "-5.93497, -131.953, 2.60268, 0.37", "-6.00421, -132.596, 2.74523, 0.37", "-6.05816, -133.521, 2.95543, 0.37", "-6.07587, -134.764, 3.22386, 0.37", "-6.00046, -136.185, 3.50279, 0.37", "-5.82284, -137.852, 3.78157, 0.37", "-5.67686, -139.027, 3.95079, 0.37", "-5.47305, -140.776, 4.16527, 0.37", "-5.3831, -141.899, 4.29013, 0.37", "-5.34141, -143.177, 4.47702, 0.37", "-5.388, -144.207, 4.77109, 0.37", "-5.58374, -145.423, 5.36402, 0.37", "-5.83808, -146.315, 6.00879, 0.37", "-6.07273, -146.953, 6.56973, 0.37", "-6.59301, -148.302, 7.92696, 0.37", "-7.02198, -149.554, 9.26425, 0.37", "-7.22562, -150.427, 10.2044, 0.37", "-7.29058, -151.587, 11.5185, 0.37", "-7.22363, -152.416, 12.4097, 0.37", "-7.09008, -153.25, 13.2229, 0.37", "-6.88985, -154.137, 13.9777, 0.37", "-6.64568, -155.019, 14.7318, 0.37", "-6.13659, -156.729, 16.2211, 0.37", "-5.95193, -157.374, 16.8268, 0.37", "-5.63831, -158.515, 18.019, 0.37", "-5.51636, -159.033, 18.606, 0.37", "-5.37467, -159.72, 19.4502, 0.37", "-5.29008, -160.212, 20.0841, 0.37", "-5.23504, -160.958, 20.9458, 0.37" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-20.9957, -48.9145, -14.5952, 0.37", "-23.5214, -52.082, -15.1414, 0.37", "-25.2262, -54.2709, -15.4467, 0.37", "-26.2424, -55.6081, -15.596, 0.37", "-27.9337, -57.9161, -15.8218, 0.37", "-29.29, -59.8487, -15.9925, 0.37", "-30.0782, -61.0066, -16.0854, 0.37", "-31.0768, -62.5361, -16.11, 0.37", "-32.3942, -64.5441, -16.1431, 0.37", "-33.4624, -66.129, -16.1674, 0.37", "-34.5311, -67.6956, -16.1882, 0.37", "-35.4362, -69.0664, -16.2028, 0.37", "-36.8877, -71.4196, -16.2561, 0.37", "-38.0464, -73.473, -16.318, 0.37", "-38.8665, -75.0643, -16.3719, 0.37", "-40.2195, -77.9224, -16.5001, 0.37", "-41.9202, -81.931, -16.7162, 0.37", "-42.9642, -84.8203, -16.8943, 0.37", "-43.7108, -87.491, -17.0775, 0.37", "-44.3762, -90.6992, -17.341, 0.37", "-44.8662, -94.0857, -17.6712, 0.37", "-45.0719, -96.4125, -17.9594, 0.37", "-45.1346, -98.4053, -18.2533, 0.37", "-45.1006, -100.671, -18.6208, 0.37", "-44.9105, -103.691, -19.1735, 0.37", "-44.7197, -105.429, -19.5072, 0.37", "-44.5383, -106.844, -19.7602, 0.37", "-44.435, -107.75, -19.9087, 0.37", "-44.32, -108.824, -20.1169, 0.37", "-44.1267, -110.824, -20.5309, 0.37", "-43.8482, -113.466, -21.1425, 0.37", "-43.5522, -115.926, -21.8216, 0.37", "-43.3306, -117.854, -22.4755, 0.37", "-43.0038, -120.953, -23.7367, 0.37", "-42.7592, -123.17, -24.7603, 0.37", "-42.4849, -125.525, -26.0011, 0.37", "-42.2052, -127.604, -27.2355, 0.37", "-41.7937, -130.469, -29.0328, 0.37", "-41.6743, -131.303, -29.5458, 0.37", "-41.4852, -132.688, -30.3708, 0.37", "-41.1521, -134.873, -31.7, 0.37", "-40.824, -136.871, -32.8641, 0.37", "-40.5846, -138.274, -33.6257, 0.37", "-40.0521, -140.664, -34.8472, 0.37", "-39.5664, -142.914, -35.9937, 0.37" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-3.55255, 271.218, 23.1566, 0.52", "-3.69633, 273.012, 23.3316, 0.52", "-3.74648, 275.045, 23.3565, 0.52", "-3.72915, 276.733, 23.3266, 0.52", "-3.70484, 278.454, 23.2761, 0.52", "-3.67241, 280.032, 23.2299, 0.52", "-3.6112, 281.989, 23.1907, 0.52", "-3.46315, 284.45, 23.1402, 0.52", "-3.31516, 286.039, 23.1266, 0.52", "-3.17942, 287.497, 23.1439, 0.52", "-3.07528, 288.806, 23.1884, 0.52", "-2.93786, 290.813, 23.2396, 0.52", "-2.79434, 293.315, 23.3041, 0.52", "-2.67297, 296.037, 23.4058, 0.52", "-2.59159, 299.132, 23.4928, 0.52", "-2.58203, 300.984, 23.5372, 0.52", "-2.63726, 304.863, 23.6289, 0.52", "-2.71845, 307.537, 23.705, 0.52", "-2.81839, 310.091, 23.8052, 0.52", "-2.94954, 313.298, 23.9937, 0.52", "-3.04285, 316.122, 24.2151, 0.52", "-3.09608, 318.564, 24.4353, 0.52", "-3.13954, 321.417, 24.7447, 0.52", "-3.17026, 323.97, 25.0016, 0.52", "-3.23584, 326.968, 25.2881, 0.52", "-3.35305, 329.98, 25.5602, 0.52", "-3.54932, 332.727, 25.7896, 0.52", "-3.73016, 334.427, 25.9196, 0.52", "-4.06481, 336.874, 26.1047, 0.52", "-4.4722, 339.453, 26.3115, 0.52", "-4.86744, 342.626, 26.3184, 0.52", "-5.13687, 345.766, 26.1722, 0.52", "-5.16296, 346.453, 26.1253, 0.52", "-5.11059, 349.269, 25.897, 0.52", "-4.84564, 352.509, 25.6179, 0.52", "-3.73604, 359.622, 25.042, 0.52", "-3.18482, 361.964, 24.932, 0.52", "-2.20268, 365.093, 24.9112, 0.52", "-1.06378, 367.943, 25.0616, 0.52", "-0.248958, 369.498, 25.2858, 0.52", "0.882603, 371.19, 25.7829, 0.52", "2.64928, 373.324, 26.8961, 0.52", "3.63484, 374.339, 27.4815, 0.52", "5.24484, 375.744, 28.4365, 0.52", "6.72884, 376.949, 29.3147, 0.52", "7.82379, 377.847, 29.9532, 0.52", "8.61456, 378.508, 30.4876, 0.52", "9.66816, 379.374, 31.2617, 0.52", "11.2151, 380.65, 32.612, 0.52", "12.2587, 381.53, 33.6404, 0.52", "13.2142, 382.384, 34.6515, 0.52", "15.4523, 384.691, 37.2655, 0.52", "16.0767, 385.487, 38.0695, 0.52", "17.3036, 387.468, 39.8081, 0.52", "17.8345, 388.581, 40.6619, 0.52", "18.3966, 390.073, 41.6848, 0.52", "18.9647, 391.944, 42.7858, 0.52", "19.5683, 394.298, 43.9112, 0.52", "19.826, 395.421, 44.4128, 0.52", "20.3318, 397.794, 45.3694, 0.52", "20.7045, 399.59, 46.0536, 0.52", "21.0038, 401.034, 46.5831, 0.52", "21.3194, 402.388, 47.087, 0.52", "21.7056, 403.843, 47.6531, 0.52", "22.4564, 406.411, 48.6752, 0.52", "22.9243, 407.9, 49.2569, 0.52", "23.5705, 409.745, 50.0445, 0.52", "24.3828, 411.884, 51.0037, 0.52", "24.8481, 413.003, 51.4924, 0.52", "25.2442, 413.892, 51.8571, 0.52", "25.7124, 414.93, 52.2322, 0.52", "26.3596, 416.59, 52.7066, 0.52", "26.799, 418.037, 52.9974, 0.52", "27.1964, 419.865, 53.2627, 0.52", "27.4107, 421.494, 53.4684, 0.52", "27.5816, 423.077, 53.6542, 0.52", "27.7428, 425.314, 53.8895, 0.52", "27.7894, 427.238, 54.0621, 0.52", "27.7686, 429.016, 54.2332, 0.52", "27.6317, 431.769, 54.5669, 0.52" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-3.55255, 271.218, 23.1566, 0.52", "-2.32699, 270.69, 23.1138, 0.52" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-5.23504, -160.958, 20.9458, 0.37", "-5.41281, -161.358, 20.981, 0.37", "-5.62334, -161.86, 21.0151, 0.37", "-5.86601, -162.342, 21.0664, 0.37", "-6.19461, -162.95, 21.116, 0.37", "-6.48482, -163.487, 21.1459, 0.37", "-6.6982, -163.89, 21.1493, 0.37", "-6.89327, -164.242, 21.1442, 0.37", "-7.3072, -164.974, 21.1293, 0.37", "-7.70196, -165.69, 21.1082, 0.37", "-8.03983, -166.316, 21.0687, 0.37", "-8.87369, -167.795, 20.9587, 0.37", "-11.4961, -173.963, 22.0602, 0.37" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-5.23504, -160.958, 20.9458, 0.37", "-3.54557, -159.646, 21.1375, 0.37", "-2.38376, -158.743, 21.2693, 0.37", "-1.30385, -157.905, 21.3918, 0.37", "0.149463, -156.776, 21.5566, 0.37", "1.04862, -156.078, 21.6586, 0.37", "12.4711, -150.485, 22.3992, 0.37" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-39.5664, -142.914, -35.9937, 0.37", "-39.3357, -143.724, -36.3599, 0.37", "-39.0531, -144.704, -36.8274, 0.37", "-38.6708, -145.918, -37.4466, 0.37", "-38.2078, -147.212, -38.1304, 0.37", "-37.6614, -148.553, -38.8937, 0.37", "-36.99, -150.035, -39.7435, 0.37", "-36.4977, -150.966, -40.2965, 0.37", "-36.0375, -151.698, -40.7665, 0.37", "-35.1002, -152.962, -41.5798, 0.37", "-34.2379, -153.98, -42.2181, 0.37", "-33.368, -154.912, -42.7951, 0.37", "-32.161, -156.166, -43.4991, 0.37", "-31.1677, -157.216, -44.0254, 0.37", "-30.3578, -158.103, -44.4267, 0.37", "-29.6388, -158.957, -44.7578, 0.37", "-29.1417, -159.625, -44.9625, 0.37", "-28.1438, -161.117, -45.3443, 0.37", "-27.4188, -162.374, -45.5836, 0.37", "-26.9994, -163.215, -45.7014, 0.37", "-26.2823, -164.78, -45.8966, 0.37", "-25.5192, -166.554, -46.1712, 0.37", "-24.9625, -167.952, -46.4091, 0.37", "-24.4572, -169.389, -46.6579, 0.37", "-23.9758, -171.003, -46.9164, 0.37", "-23.69, -172.192, -47.1623, 0.37", "-23.3436, -173.964, -47.5926, 0.37", "-23.1726, -174.923, -47.8406, 0.37", "-22.9556, -176.197, -48.1643, 0.37", "-22.7184, -177.458, -48.4661, 0.37", "-22.2157, -179.628, -48.9216, 0.37", "-21.7958, -181.166, -49.1806, 0.37", "-21.1374, -183.053, -49.4273, 0.37", "-20.5607, -184.332, -49.636, 0.37", "-19.9835, -185.359, -49.8251, 0.37", "-18.9461, -186.96, -50.1299, 0.37", "-18.1779, -188.041, -50.3432, 0.37", "-17.1525, -189.382, -50.6659, 0.37", "-15.938, -190.88, -51.1574, 0.37", "-14.6995, -192.311, -51.7607, 0.37", "-13.6401, -193.506, -52.3709, 0.37", "-12.501, -194.777, -53.1293, 0.37", "-11.4078, -195.959, -53.8992, 0.37", "-9.6936, -197.778, -55.1389, 0.37", "-8.77528, -198.725, -55.8147, 0.37", "-7.70742, -199.764, -56.6181, 0.37", "-6.77939, -200.62, -57.3183, 0.37", "-6.04966, -201.283, -57.8955, 0.37", "-5.58701, -201.712, -58.2493, 0.37", "-4.68656, -202.535, -58.8618, 0.37", "-3.88958, -203.237, -59.3582, 0.37", "-2.62247, -204.316, -60.1555, 0.37", "-0.72264, -205.932, -61.3689, 0.37", "0.61801, -207.101, -62.2842, 0.37", "1.28749, -207.701, -62.7472, 0.37", "2.47051, -208.792, -63.6077, 0.37", "3.3274, -209.63, -64.2879, 0.37", "3.8324, -210.131, -64.678, 0.37", "4.91201, -211.236, -65.5173, 0.37", "5.51619, -211.891, -66.0567, 0.37", "6.80911, -213.389, -67.3178, 0.37", "7.70904, -214.5, -68.2489, 0.37", "8.57557, -215.542, -69.0983, 0.37" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-39.5664, -142.914, -35.9937, 0.37", "-40.2245, -144.985, -36.3389, 0.37", "-40.8859, -146.876, -36.5968, 0.37", "-41.1482, -147.605, -36.6804, 0.37", "-41.4735, -148.563, -36.7741, 0.37", "-41.7038, -149.298, -36.8366, 0.37", "-41.8882, -149.951, -36.8861, 0.37", "-42.2583, -151.358, -36.9541, 0.37", "-42.4635, -152.198, -36.9621, 0.37", "-42.7273, -153.31, -36.9734, 0.37", "-42.9465, -154.207, -36.983, 0.37", "-43.1575, -155.117, -36.9945, 0.37", "-43.2942, -155.728, -37.0036, 0.37", "-43.4627, -156.544, -36.9559, 0.37", "-43.5843, -157.188, -36.8805, 0.37", "-43.7004, -157.964, -36.7663, 0.37", "-43.8089, -159.064, -36.5991, 0.37", "-43.8788, -160.07, -36.4502, 0.37", "-43.9547, -161.904, -36.1968, 0.37", "-43.9891, -163.35, -35.9618, 0.37", "-44.02, -165.29, -35.6285, 0.37", "-44.0484, -166.84, -35.3597, 0.37", "-44.0809, -167.871, -35.2027, 0.37", "-44.1391, -168.882, -35.0782, 0.37", "-44.4653, -171.821, -34.9341, 0.37", "-44.6374, -172.782, -34.9179, 0.37", "-44.8308, -173.556, -34.9305, 0.37", "-45.3851, -175.544, -35.001, 0.37", "-45.7416, -176.732, -35.081, 0.37", "-46.4649, -178.839, -35.3462, 0.37", "-46.9541, -179.994, -35.6345, 0.37", "-47.3488, -180.82, -35.8639, 0.37" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_18", "dend_17", "dend_14", "dend_5", "dend_0", "dend_19", "dend_16", "dend_15", "dend_7", "dend_6", "dend_4", "dend_1", "dend_11", "dend_8", "dend_3", "dend_2", "dend_13", "dend_12", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_18", "dend_17", "dend_14", "dend_5", "dend_0", "dend_19", "dend_16", "dend_15", "dend_7", "dend_6", "dend_4", "dend_1", "dend_11", "dend_8", "dend_3", "dend_2", "dend_13", "dend_12", "dend_10", "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_17", "dend_17", "dend_17", "dend_17", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_2", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "2.90744E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "2.90744E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.418459",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.026008999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.025854",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.19695699",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "2.0E-6",
    "erev" : "-60.2509"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.9899996E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.008343",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "6.58298E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.026899999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.502333",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.653374",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "5.6999997E-5",
    "erev" : "-76.49812"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "7.84E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.30005398",
    "erev" : "50.0"
  }, {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.002256",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.38E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.005574",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "7.92E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bIR_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bIR_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bIR215_L6_LBC_d854e4228e_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_18, id: dend_18, parent: soma_0
create dend_18
public dend_18
// Section: dend_17, id: dend_17, parent: soma_0
create dend_17
public dend_17
// Section: dend_14, id: dend_14, parent: soma_0
create dend_14
public dend_14
// Section: dend_5, id: dend_5, parent: soma_0
create dend_5
public dend_5
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_19, id: dend_19, parent: dend_18
create dend_19
public dend_19
// Section: dend_16, id: dend_16, parent: dend_14
create dend_16
public dend_16
// Section: dend_15, id: dend_15, parent: dend_14
create dend_15
public dend_15
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_4, id: dend_4, parent: dend_0
create dend_4
public dend_4
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_11, id: dend_11, parent: dend_7
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_3, id: dend_3, parent: dend_1
create dend_3
public dend_3
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_13, id: dend_13, parent: dend_11
create dend_13
public dend_13
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_18, dend_17, dend_14, dend_5, dend_0, dend_19, dend_16, dend_15, dend_7, dend_6, dend_4, dend_1, dend_11, dend_8, dend_3, dend_2, dend_13, dend_12, dend_10, dend_9]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_18, dend_17, dend_14, dend_5, dend_0, dend_19, dend_16, dend_15, dend_7, dend_6, dend_4, dend_1, dend_11, dend_8, dend_3, dend_2, dend_13, dend_12, dend_10, dend_9]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_19
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17, dend_17, dend_17, dend_14, dend_14, dend_14, dend_14, dend_14, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bIR_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bIR_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_18(0), soma_0(0.45000024236019176)
    connect dend_17(0), soma_0(0.45000024236019176)
    connect dend_14(0), soma_0(0.45000024236019176)
    connect dend_5(0), soma_0(0.45000024236019176)
    connect dend_0(0), soma_0(0.45000024236019176)
    connect axon_0(0), soma_0(1.0)
    connect dend_19(0), dend_18(1.0)
    connect dend_16(0), dend_14(1.0)
    connect dend_15(0), dend_14(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_4(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_11(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_3(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_13(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( 4.2367, -9.76448, 0.00225588, 4.58694 ) }
    soma_0 { pt3dadd( 3.82852, -8.84534, 0.00235142, 7.99356 ) }
    soma_0 { pt3dadd( 3.42034, -7.92621, 0.00244695, 13.6531 ) }
    soma_0 { pt3dadd( 3.01216, -7.00707, 0.00254249, 15.6165 ) }
    soma_0 { pt3dadd( 2.60398, -6.08793, 0.00263803, 16.6635 ) }
    soma_0 { pt3dadd( 2.19581, -5.1688, 0.00273357, 17.324 ) }
    soma_0 { pt3dadd( 1.78763, -4.24966, 0.00282911, 17.8707 ) }
    soma_0 { pt3dadd( 1.37945, -3.33052, 0.00292465, 18.253 ) }
    soma_0 { pt3dadd( 0.971266, -2.41139, 0.00302019, 18.5857 ) }
    soma_0 { pt3dadd( 0.563086, -1.49225, 0.00311573, 18.7248 ) }
    soma_0 { pt3dadd( 0.154906, -0.573117, 0.00321127, 18.6468 ) }
    soma_0 { pt3dadd( -0.253273, 0.34602, 0.0033068, 18.1821 ) }
    soma_0 { pt3dadd( -0.661453, 1.26516, 0.00340234, 17.5647 ) }
    soma_0 { pt3dadd( -1.06963, 2.18429, 0.00349788, 16.6059 ) }
    soma_0 { pt3dadd( -1.47781, 3.10343, 0.00359342, 15.0647 ) }
    soma_0 { pt3dadd( -1.88599, 4.02256, 0.00368896, 12.8788 ) }
    soma_0 { pt3dadd( -2.29417, 4.9417, 0.0037845, 10.2973 ) }
    soma_0 { pt3dadd( -2.70235, 5.86084, 0.00388004, 7.98803 ) }
    soma_0 { pt3dadd( -3.11053, 6.77997, 0.00397558, 5.82735 ) }
    soma_0 { pt3dadd( -3.51871, 7.69911, 0.00407112, 4.11866 ) }
    soma_0 { pt3dadd( -3.92689, 8.61824, 0.00416665, 2.58199 ) }
    // Section: dend_18, id: dend_18, parent: soma_0 (entry count 21/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 9.56674, -4.12939, -8.4286, 1.11 ) }
    dend_18 { pt3dadd( 9.67498, -4.30758, -8.45105, 1.11 ) }
    dend_18 { pt3dadd( 10.4904, -5.76, -8.63841, 1.11 ) }
    dend_18 { pt3dadd( 11.1412, -7.01509, -8.84575, 1.11 ) }
    dend_18 { pt3dadd( 11.9309, -8.53815, -9.09737, 1.11 ) }
    dend_18 { pt3dadd( 12.751, -10.1196, -9.35864, 1.11 ) }
    dend_18 { pt3dadd( 13.7312, -12.0099, -9.67092, 1.11 ) }
    dend_18 { pt3dadd( 14.7838, -14.1606, -10.0549, 1.11 ) }
    dend_18 { pt3dadd( 15.6839, -16.2165, -10.4658, 1.11 ) }
    // Section: dend_17, id: dend_17, parent: soma_0 (entry count 30/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -4.85326, -9.18964, -0.068597, 0.88 ) }
    dend_17 { pt3dadd( -5.45206, -9.59584, -0.0494771, 0.88 ) }
    dend_17 { pt3dadd( -6.54758, -10.339, -0.0144965, 0.88 ) }
    dend_17 { pt3dadd( -7.84468, -11.219, 0.0269205, 0.88 ) }
    dend_17 { pt3dadd( -8.62019, -11.7451, 0.0516831, 0.88 ) }
    // Section: dend_14, id: dend_14, parent: soma_0 (entry count 35/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( -9.86326, -1.39939, -9.0686, 2.2 ) }
    dend_14 { pt3dadd( -10.1135, -1.45379, -9.18932, 2.21 ) }
    dend_14 { pt3dadd( -13.3162, -2.15006, -10.7344, 1.69 ) }
    dend_14 { pt3dadd( -15.2038, -2.56044, -11.6451, 1.69 ) }
    dend_14 { pt3dadd( -16.3722, -2.81443, -12.2088, 1.69 ) }
    dend_14 { pt3dadd( -17.7353, -3.11078, -12.8664, 1.69 ) }
    // Section: dend_5, id: dend_5, parent: soma_0 (entry count 41/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -3.19326, -10.8276, -1.8786, 1.47 ) }
    dend_5 { pt3dadd( -3.32063, -11.1558, -1.94656, 1.47 ) }
    dend_5 { pt3dadd( -4.05401, -12.7547, -2.40065, 1.47 ) }
    dend_5 { pt3dadd( -5.01106, -14.5809, -2.98613, 1.47 ) }
    dend_5 { pt3dadd( -5.7485, -15.8796, -3.40075, 1.47 ) }
    dend_5 { pt3dadd( -6.53603, -17.1841, -3.79474, 1.47 ) }
    dend_5 { pt3dadd( -7.79936, -19.2298, -4.40325, 1.33 ) }
    dend_5 { pt3dadd( -9.05761, -21.1928, -4.98424, 1.18 ) }
    dend_5 { pt3dadd( -10.3831, -23.2214, -5.56184, 1.18 ) }
    dend_5 { pt3dadd( -11.3845, -24.7484, -5.95612, 1.18 ) }
    dend_5 { pt3dadd( -12.4592, -26.4387, -6.33808, 1.18 ) }
    dend_5 { pt3dadd( -13.704, -28.4922, -6.70619, 1.18 ) }
    dend_5 { pt3dadd( -14.4422, -29.7985, -6.88828, 1.11 ) }
    dend_5 { pt3dadd( -15.36, -31.5453, -7.11394, 1.11 ) }
    dend_5 { pt3dadd( -15.9846, -32.8171, -7.2714, 0.88 ) }
    dend_5 { pt3dadd( -16.691, -34.3431, -7.47368, 0.88 ) }
    dend_5 { pt3dadd( -17.23, -35.5744, -7.64266, 0.88 ) }
    dend_5 { pt3dadd( -17.9815, -37.2799, -7.85313, 0.88 ) }
    dend_5 { pt3dadd( -18.0796, -37.4941, -7.88775, 0.88 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 60/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -5.46326, 9.95936, -0.378597, 2.58 ) }
    dend_0 { pt3dadd( -5.50652, 10.0284, -0.384284, 2.58 ) }
    dend_0 { pt3dadd( -6.75501, 12.0221, -0.548425, 2.58 ) }
    dend_0 { pt3dadd( -7.46529, 13.1562, -0.641808, 2.28 ) }
    dend_0 { pt3dadd( -8.85772, 15.3797, -0.824874, 2.28 ) }
    dend_0 { pt3dadd( -9.51198, 16.4244, -0.910892, 2.28 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 66/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( -3.92689, 8.61824, 0.00416665, 1.03 ) }
    axon_0 { pt3dadd( -10.0149, 22.3272, 0.00416665, 1.03 ) }
    axon_0 { pt3dadd( -16.1029, 36.0362, 0.00416665, 1.03 ) }
    // Section: dend_19, id: dend_19, parent: dend_18 (entry count 69/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 15.6839, -16.2165, -10.4658, 0.37 ) }
    dend_19 { pt3dadd( 16.0637, -18.8007, -10.6387, 0.37 ) }
    dend_19 { pt3dadd( 16.2221, -20.3097, -10.6818, 0.37 ) }
    dend_19 { pt3dadd( 16.3543, -21.8237, -10.7035, 0.37 ) }
    dend_19 { pt3dadd( 16.5238, -23.8797, -10.6777, 0.37 ) }
    dend_19 { pt3dadd( 16.6551, -25.6724, -10.6321, 0.37 ) }
    dend_19 { pt3dadd( 16.8387, -28.7872, -10.5345, 0.37 ) }
    dend_19 { pt3dadd( 16.9382, -32.49, -10.3211, 0.37 ) }
    dend_19 { pt3dadd( 16.9203, -34.3799, -10.2016, 0.37 ) }
    dend_19 { pt3dadd( 16.7724, -36.9836, -10.0303, 0.37 ) }
    dend_19 { pt3dadd( 16.4683, -39.791, -9.84638, 0.37 ) }
    dend_19 { pt3dadd( 16.1539, -41.8266, -9.72476, 0.37 ) }
    dend_19 { pt3dadd( 15.6612, -44.4627, -9.60543, 0.37 ) }
    dend_19 { pt3dadd( 15.2536, -46.4155, -9.50493, 0.37 ) }
    dend_19 { pt3dadd( 14.7412, -48.6922, -9.38786, 0.37 ) }
    dend_19 { pt3dadd( 14.2426, -50.8741, -9.28767, 0.37 ) }
    dend_19 { pt3dadd( 13.5285, -54.4242, -9.11704, 0.37 ) }
    dend_19 { pt3dadd( 12.8493, -58.5198, -8.81643, 0.37 ) }
    dend_19 { pt3dadd( 12.6712, -59.9983, -8.68292, 0.37 ) }
    dend_19 { pt3dadd( 12.5023, -62.3076, -8.45154, 0.37 ) }
    dend_19 { pt3dadd( 12.3958, -65.4372, -8.04905, 0.37 ) }
    dend_19 { pt3dadd( 12.4253, -68.5649, -7.57479, 0.37 ) }
    dend_19 { pt3dadd( 12.5982, -71.5965, -7.11386, 0.37 ) }
    dend_19 { pt3dadd( 12.8014, -74.0904, -6.71272, 0.37 ) }
    dend_19 { pt3dadd( 12.9531, -75.56, -6.48239, 0.37 ) }
    dend_19 { pt3dadd( 13.2956, -77.9871, -6.06393, 0.37 ) }
    dend_19 { pt3dadd( 13.7334, -80.5141, -5.58976, 0.37 ) }
    dend_19 { pt3dadd( 14.1245, -82.5193, -5.23197, 0.37 ) }
    // Section: dend_16, id: dend_16, parent: dend_14 (entry count 97/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -17.7353, -3.11078, -12.8664, 0.52 ) }
    dend_16 { pt3dadd( -20.3409, -6.52082, -12.8818, 0.52 ) }
    dend_16 { pt3dadd( -22.5746, -9.56484, -12.826, 0.52 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_16 { pt3dadd( -24.2621, -11.9786, -12.7405, 0.52 ) }
    dend_16 { pt3dadd( -25.416, -13.6794, -12.6595, 0.52 ) }
    dend_16 { pt3dadd( -26.5236, -15.3254, -12.564, 0.52 ) }
    dend_16 { pt3dadd( -27.4492, -16.7153, -12.4882, 0.52 ) }
    dend_16 { pt3dadd( -28.5755, -18.4873, -12.326, 0.52 ) }
    dend_16 { pt3dadd( -29.4937, -19.9726, -12.1787, 0.52 ) }
    dend_16 { pt3dadd( -30.2953, -21.2711, -12.0438, 0.52 ) }
    dend_16 { pt3dadd( -31.5241, -23.2288, -11.7786, 0.52 ) }
    dend_16 { pt3dadd( -33.1958, -25.7889, -11.3661, 0.52 ) }
    dend_16 { pt3dadd( -34.4465, -27.6283, -11.0322, 0.52 ) }
    dend_16 { pt3dadd( -35.5184, -29.0973, -10.742, 0.52 ) }
    dend_16 { pt3dadd( -36.9091, -31.0021, -10.3389, 0.52 ) }
    dend_16 { pt3dadd( -38.0754, -32.6671, -9.94613, 0.52 ) }
    dend_16 { pt3dadd( -39.0147, -34.0543, -9.59391, 0.52 ) }
    dend_16 { pt3dadd( -40.5393, -36.3385, -8.99113, 0.52 ) }
    dend_16 { pt3dadd( -41.6312, -37.9721, -8.58761, 0.52 ) }
    dend_16 { pt3dadd( -42.8155, -39.7595, -8.20925, 0.52 ) }
    dend_16 { pt3dadd( -44.3378, -42.0621, -7.79682, 0.52 ) }
    dend_16 { pt3dadd( -45.5742, -43.9036, -7.53162, 0.52 ) }
    dend_16 { pt3dadd( -46.7571, -45.6459, -7.29864, 0.52 ) }
    dend_16 { pt3dadd( -47.7421, -47.05, -7.12659, 0.52 ) }
    dend_16 { pt3dadd( -48.925, -48.6923, -6.94323, 0.52 ) }
    dend_16 { pt3dadd( -51.26, -51.817, -6.62684, 0.52 ) }
    dend_16 { pt3dadd( -52.7275, -53.7823, -6.44336, 0.52 ) }
    dend_16 { pt3dadd( -54.516, -56.1975, -6.20779, 0.52 ) }
    dend_16 { pt3dadd( -56.5054, -58.8841, -5.85838, 0.52 ) }
    dend_16 { pt3dadd( -58.432, -61.5254, -5.44912, 0.52 ) }
    dend_16 { pt3dadd( -61.4064, -65.6621, -4.71547, 0.52 ) }
    dend_16 { pt3dadd( -62.988, -67.8845, -4.22505, 0.52 ) }
    dend_16 { pt3dadd( -64.7716, -70.4324, -3.56544, 0.52 ) }
    dend_16 { pt3dadd( -66.8876, -73.5778, -2.63686, 0.52 ) }
    dend_16 { pt3dadd( -67.7704, -75.0082, -2.139, 0.52 ) }
    dend_16 { pt3dadd( -68.412, -76.1967, -1.66925, 0.52 ) }
    dend_16 { pt3dadd( -69.2707, -78.1532, -0.588033, 0.52 ) }
    dend_16 { pt3dadd( -69.7615, -79.7112, 0.436099, 0.52 ) }
    dend_16 { pt3dadd( -69.9934, -81.4591, 1.8454, 0.52 ) }
    dend_16 { pt3dadd( -70.0831, -83.3008, 3.41798, 0.52 ) }
    dend_16 { pt3dadd( -70.0821, -85.1626, 5.13289, 0.52 ) }
    dend_16 { pt3dadd( -69.8588, -88.9043, 8.79757, 0.59 ) }
    dend_16 { pt3dadd( -69.6489, -90.3666, 10.2965, 0.59 ) }
    dend_16 { pt3dadd( -69.0347, -92.7911, 13.2537, 0.59 ) }
    // Section: dend_15, id: dend_15, parent: dend_14 (entry count 41/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -17.7353, -3.11078, -12.8664, 0.81 ) }
    dend_15 { pt3dadd( -19.2639, -2.25819, -12.9864, 0.81 ) }
    dend_15 { pt3dadd( -20.8361, -1.46488, -13.0424, 0.81 ) }
    dend_15 { pt3dadd( -22.5865, -0.62547, -13.0072, 0.81 ) }
    dend_15 { pt3dadd( -23.9126, -0.0598457, -12.9693, 0.59 ) }
    dend_15 { pt3dadd( -25.7427, 0.640032, -12.9162, 0.59 ) }
    dend_15 { pt3dadd( -27.808, 1.34932, -12.865, 0.59 ) }
    dend_15 { pt3dadd( -29.4523, 1.80947, -12.8161, 0.59 ) }
    dend_15 { pt3dadd( -30.6881, 2.09379, -12.8223, 0.59 ) }
    dend_15 { pt3dadd( -33.2425, 2.60122, -12.9546, 0.59 ) }
    dend_15 { pt3dadd( -34.9271, 2.90677, -13.12, 0.59 ) }
    dend_15 { pt3dadd( -37.0366, 3.2869, -13.4185, 0.59 ) }
    dend_15 { pt3dadd( -39.187, 3.68637, -13.8195, 0.59 ) }
    dend_15 { pt3dadd( -41.3509, 4.1176, -14.2644, 0.59 ) }
    dend_15 { pt3dadd( -42.862, 4.43709, -14.5994, 0.59 ) }
    dend_15 { pt3dadd( -44.2558, 4.75785, -14.888, 0.59 ) }
    dend_15 { pt3dadd( -45.3332, 5.0017, -15.0854, 0.59 ) }
    dend_15 { pt3dadd( -47.0527, 5.35557, -15.34, 0.59 ) }
    dend_15 { pt3dadd( -48.4778, 5.63084, -15.4925, 0.59 ) }
    dend_15 { pt3dadd( -49.7288, 5.83821, -15.5881, 0.59 ) }
    dend_15 { pt3dadd( -51.7999, 6.1283, -15.7084, 0.59 ) }
    dend_15 { pt3dadd( -54.4752, 6.46547, -15.8538, 0.59 ) }
    dend_15 { pt3dadd( -56.0822, 6.65517, -15.9395, 0.59 ) }
    dend_15 { pt3dadd( -57.3823, 6.8037, -16.0083, 0.59 ) }
    dend_15 { pt3dadd( -58.8856, 6.96921, -16.0873, 0.59 ) }
    dend_15 { pt3dadd( -60.63, 7.17164, -16.1673, 0.59 ) }
    dend_15 { pt3dadd( -62.448, 7.4252, -16.2013, 0.59 ) }
    dend_15 { pt3dadd( -64.2641, 7.72963, -16.1951, 0.59 ) }
    dend_15 { pt3dadd( -65.9656, 8.05456, -16.1669, 0.59 ) }
    dend_15 { pt3dadd( -67.0526, 8.26637, -16.1393, 0.59 ) }
    dend_15 { pt3dadd( -68.7685, 8.62048, -16.0919, 0.59 ) }
    dend_15 { pt3dadd( -70.7827, 9.04866, -16.0354, 0.59 ) }
    dend_15 { pt3dadd( -72.3936, 9.38599, -16.0025, 0.59 ) }
    dend_15 { pt3dadd( -74.8655, 9.90214, -15.9871, 0.59 ) }
    dend_15 { pt3dadd( -76.8094, 10.3164, -16.0152, 0.59 ) }
    dend_15 { pt3dadd( -78.9203, 10.7453, -16.0912, 0.59 ) }
    dend_15 { pt3dadd( -79.859, 10.9171, -16.149, 0.59 ) }
    dend_15 { pt3dadd( -81.0717, 11.1331, -16.2556, 0.44 ) }
    dend_15 { pt3dadd( -83.1225, 11.5572, -16.4481, 0.44 ) }
    dend_15 { pt3dadd( -84.7625, 11.9615, -16.6135, 0.44 ) }
    dend_15 { pt3dadd( -86.0507, 12.3292, -16.7495, 0.44 ) }
    dend_15 { pt3dadd( -87.006, 12.6274, -16.8649, 0.44 ) }
    dend_15 { pt3dadd( -88.5084, 13.1133, -17.056, 0.44 ) }
    dend_15 { pt3dadd( -91.166, 13.956, -17.3911, 0.44 ) }
    dend_15 { pt3dadd( -92.7654, 14.461, -17.6219, 0.44 ) }
    dend_15 { pt3dadd( -94.7343, 15.0656, -17.9295, 0.44 ) }
    dend_15 { pt3dadd( -96.0518, 15.4444, -18.1434, 0.44 ) }
    dend_15 { pt3dadd( -97.6274, 15.8521, -18.4024, 0.44 ) }
    dend_15 { pt3dadd( -99.9296, 16.3618, -18.7802, 0.44 ) }
    dend_15 { pt3dadd( -100.932, 16.5613, -18.9424, 0.44 ) }
    dend_15 { pt3dadd( -101.986, 16.766, -19.103, 0.44 ) }
    dend_15 { pt3dadd( -103.005, 16.9669, -19.2428, 0.44 ) }
    dend_15 { pt3dadd( -103.958, 17.1566, -19.3496, 0.44 ) }
    dend_15 { pt3dadd( -104.899, 17.3506, -19.4497, 0.44 ) }
    dend_15 { pt3dadd( -106.791, 17.7463, -19.6309, 0.44 ) }
    dend_15 { pt3dadd( -108.287, 18.0387, -19.7533, 0.44 ) }
    dend_15 { pt3dadd( -109.302, 18.2262, -19.8349, 0.44 ) }
    dend_15 { pt3dadd( -110.747, 18.4834, -19.9486, 0.44 ) }
    dend_15 { pt3dadd( -113.427, 18.9256, -20.1544, 0.44 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_15 { pt3dadd( -115.679, 19.2715, -20.324, 0.44 ) }
    dend_15 { pt3dadd( -117.564, 19.537, -20.4626, 0.44 ) }
    dend_15 { pt3dadd( -119.534, 19.8231, -20.6099, 0.44 ) }
    dend_15 { pt3dadd( -122.39, 20.2527, -20.8243, 0.44 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 4/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -18.0796, -37.4941, -7.88775, 0.37 ) }
    dend_7 { pt3dadd( -18.3273, -38.5582, -8.53006, 0.37 ) }
    dend_7 { pt3dadd( -18.6292, -39.8615, -9.32366, 0.37 ) }
    dend_7 { pt3dadd( -18.848, -40.8123, -9.86598, 0.37 ) }
    dend_7 { pt3dadd( -18.9617, -41.2869, -10.1332, 0.37 ) }
    dend_7 { pt3dadd( -19.4741, -43.4256, -11.3375, 0.37 ) }
    dend_7 { pt3dadd( -19.8702, -45.079, -12.2685, 0.37 ) }
    dend_7 { pt3dadd( -20.3162, -46.6574, -13.1766, 0.37 ) }
    dend_7 { pt3dadd( -20.5977, -47.5707, -13.7456, 0.37 ) }
    dend_7 { pt3dadd( -20.9957, -48.9145, -14.5952, 0.37 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 14/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -18.0796, -37.4941, -7.88775, 0.52 ) }
    dend_6 { pt3dadd( -20.2999, -38.7339, -8.95902, 0.52 ) }
    dend_6 { pt3dadd( -21.8362, -39.5964, -9.64367, 0.52 ) }
    dend_6 { pt3dadd( -24.5473, -41.0511, -10.866, 0.52 ) }
    dend_6 { pt3dadd( -27.1441, -42.3604, -11.9943, 0.52 ) }
    dend_6 { pt3dadd( -28.8782, -43.2181, -12.7671, 0.52 ) }
    dend_6 { pt3dadd( -30.2601, -43.902, -13.3772, 0.52 ) }
    dend_6 { pt3dadd( -31.4968, -44.5223, -13.8967, 0.52 ) }
    dend_6 { pt3dadd( -33.4564, -45.495, -14.6983, 0.52 ) }
    dend_6 { pt3dadd( -35.3385, -46.37, -15.3732, 0.52 ) }
    dend_6 { pt3dadd( -37.1067, -47.1341, -15.9162, 0.52 ) }
    dend_6 { pt3dadd( -38.7435, -47.8443, -16.4703, 0.52 ) }
    dend_6 { pt3dadd( -41.8142, -49.198, -17.5606, 0.52 ) }
    dend_6 { pt3dadd( -43.0219, -49.7515, -18.0281, 0.52 ) }
    dend_6 { pt3dadd( -51.3671, -53.6596, -21.3566, 0.52 ) }
    dend_6 { pt3dadd( -56.2323, -55.969, -23.3617, 0.52 ) }
    dend_6 { pt3dadd( -59.0318, -57.2746, -24.5132, 0.52 ) }
    dend_6 { pt3dadd( -61.6518, -58.4856, -25.605, 0.52 ) }
    dend_6 { pt3dadd( -64.9537, -60.0213, -26.9907, 0.52 ) }
    dend_6 { pt3dadd( -66.6355, -60.8449, -27.7014, 0.52 ) }
    dend_6 { pt3dadd( -67.9135, -61.5435, -28.2328, 0.52 ) }
    dend_6 { pt3dadd( -69.9374, -62.741, -28.9364, 0.52 ) }
    dend_6 { pt3dadd( -72.0509, -63.984, -29.3891, 0.44 ) }
    dend_6 { pt3dadd( -72.8287, -64.4566, -29.5527, 0.44 ) }
    dend_6 { pt3dadd( -74.0389, -65.2072, -29.817, 0.44 ) }
    dend_6 { pt3dadd( -75.8005, -66.32, -30.3926, 0.44 ) }
    dend_6 { pt3dadd( -78.1526, -67.7349, -31.1451, 0.44 ) }
    dend_6 { pt3dadd( -79.8572, -68.684, -31.6671, 0.37 ) }
    dend_6 { pt3dadd( -82.8115, -70.2607, -32.639, 0.37 ) }
    dend_6 { pt3dadd( -84.0837, -70.8912, -33.0752, 0.37 ) }
    dend_6 { pt3dadd( -86.43, -71.917, -33.9177, 0.37 ) }
    dend_6 { pt3dadd( -89.9213, -73.2482, -35.2409, 0.37 ) }
    dend_6 { pt3dadd( -92.5138, -74.0824, -36.2197, 0.37 ) }
    // Section: dend_4, id: dend_4, parent: dend_0 (entry count 47/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -9.51198, 16.4244, -0.910892, 0.59 ) }
    dend_4 { pt3dadd( -11.5033, 17.6457, 0.448923, 0.59 ) }
    dend_4 { pt3dadd( -12.9214, 18.6365, 1.32333, 0.59 ) }
    dend_4 { pt3dadd( -14.8886, 20.1206, 2.50403, 0.59 ) }
    dend_4 { pt3dadd( -16.5746, 21.4776, 3.3667, 0.59 ) }
    dend_4 { pt3dadd( -17.7455, 22.4518, 3.92901, 0.59 ) }
    dend_4 { pt3dadd( -19.2505, 23.6868, 4.65445, 0.44 ) }
    dend_4 { pt3dadd( -20.3831, 24.6608, 5.19172, 0.44 ) }
    dend_4 { pt3dadd( -21.9974, 26.0499, 5.90259, 0.44 ) }
    dend_4 { pt3dadd( -23.5192, 27.3272, 6.59603, 0.37 ) }
    dend_4 { pt3dadd( -25.1329, 28.5979, 7.3515, 0.37 ) }
    dend_4 { pt3dadd( -26.4293, 29.5427, 8.03462, 0.37 ) }
    dend_4 { pt3dadd( -28.8062, 31.1659, 9.45781, 0.37 ) }
    dend_4 { pt3dadd( -30.1726, 32.0579, 10.2699, 0.37 ) }
    dend_4 { pt3dadd( -31.5452, 32.9068, 11.1397, 0.37 ) }
    dend_4 { pt3dadd( -37.5473, 37.1044, 13.8869, 0.37 ) }
    dend_4 { pt3dadd( -42.8086, 41.5906, 17.5187, 0.37 ) }
    dend_4 { pt3dadd( -48.0202, 45.4121, 21.9355, 0.37 ) }
    dend_4 { pt3dadd( -53.8471, 47.7986, 26.6434, 0.37 ) }
    dend_4 { pt3dadd( -60.5535, 49.3946, 30.4556, 0.37 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 67/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -9.51198, 16.4244, -0.910892, 1.84 ) }
    dend_1 { pt3dadd( -9.73295, 19.4746, -0.745867, 1.84 ) }
    dend_1 { pt3dadd( -9.92917, 22.6956, -0.556657, 1.84 ) }
    dend_1 { pt3dadd( -10.1597, 25.8342, -0.362956, 1.84 ) }
    dend_1 { pt3dadd( -10.3899, 28.418, -0.192548, 1.84 ) }
    dend_1 { pt3dadd( -10.6562, 30.9627, -0.0203126, 1.55 ) }
    dend_1 { pt3dadd( -10.9841, 33.802, 0.172596, 1.47 ) }
    dend_1 { pt3dadd( -11.3327, 36.3964, 0.335757, 1.47 ) }
    dend_1 { pt3dadd( -11.8455, 39.9429, 0.529446, 1.47 ) }
    dend_1 { pt3dadd( -12.3198, 43.0058, 0.684918, 1.47 ) }
    dend_1 { pt3dadd( -12.642, 44.9483, 0.783105, 1.18 ) }
    dend_1 { pt3dadd( -13.2993, 48.5656, 1.00225, 1.18 ) }
    dend_1 { pt3dadd( -14.2734, 53.8895, 1.3455, 1.18 ) }
    dend_1 { pt3dadd( -14.8195, 56.9674, 1.5619, 1.18 ) }
    dend_1 { pt3dadd( -15.2883, 59.697, 1.83207, 1.03 ) }
    dend_1 { pt3dadd( -15.7765, 62.6868, 2.20827, 1.03 ) }
    dend_1 { pt3dadd( -16.0746, 64.6593, 2.51776, 0.81 ) }
    dend_1 { pt3dadd( -16.2635, 65.9951, 2.77696, 0.81 ) }
    dend_1 { pt3dadd( -16.5096, 67.9646, 3.22497, 0.81 ) }
    dend_1 { pt3dadd( -16.8484, 70.9813, 3.91736, 0.81 ) }
    dend_1 { pt3dadd( -16.9958, 72.5608, 4.22396, 0.74 ) }
    dend_1 { pt3dadd( -17.1465, 74.857, 4.59511, 0.66 ) }
    dend_1 { pt3dadd( -17.2519, 77.4304, 4.93635, 0.66 ) }
    dend_1 { pt3dadd( -17.3084, 80.9507, 5.34971, 0.66 ) }
    dend_1 { pt3dadd( -17.2635, 84.0316, 5.59902, 0.66 ) }
    dend_1 { pt3dadd( -17.1373, 87.5433, 5.77464, 0.66 ) }
    dend_1 { pt3dadd( -17.0648, 90.6354, 5.90036, 0.66 ) }
    dend_1 { pt3dadd( -16.9993, 93.7161, 6.0122, 0.66 ) }
    dend_1 { pt3dadd( -16.9312, 97.1434, 6.13794, 0.66 ) }
    dend_1 { pt3dadd( -16.8578, 101.17, 6.26986, 0.66 ) }
    dend_1 { pt3dadd( -16.8338, 103.507, 6.35229, 0.66 ) }
    dend_1 { pt3dadd( -16.8321, 107.517, 6.53604, 0.66 ) }
    dend_1 { pt3dadd( -16.8649, 110.711, 6.68756, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_1 { pt3dadd( -16.9007, 113.589, 6.85912, 0.66 ) }
    dend_1 { pt3dadd( -16.9113, 116.443, 7.0892, 0.59 ) }
    dend_1 { pt3dadd( -16.8533, 119.104, 7.3881, 0.59 ) }
    dend_1 { pt3dadd( -16.681, 122.177, 7.77178, 0.59 ) }
    dend_1 { pt3dadd( -16.4533, 124.904, 8.14312, 0.59 ) }
    dend_1 { pt3dadd( -16.1188, 128.896, 8.70921, 0.59 ) }
    dend_1 { pt3dadd( -15.8052, 132.509, 9.24733, 0.59 ) }
    dend_1 { pt3dadd( -15.2808, 138.247, 10.2983, 0.59 ) }
    dend_1 { pt3dadd( -14.9278, 141.627, 10.8794, 0.59 ) }
    dend_1 { pt3dadd( -14.6352, 144.379, 11.3176, 0.59 ) }
    dend_1 { pt3dadd( -14.4007, 147.023, 11.6914, 0.59 ) }
    dend_1 { pt3dadd( -14.2848, 148.601, 11.8658, 0.59 ) }
    dend_1 { pt3dadd( -14.0545, 152.365, 12.1299, 0.59 ) }
    dend_1 { pt3dadd( -13.793, 156.582, 12.2421, 0.59 ) }
    dend_1 { pt3dadd( -13.6255, 158.907, 12.2425, 0.59 ) }
    dend_1 { pt3dadd( -13.2601, 163.143, 12.1708, 0.59 ) }
    dend_1 { pt3dadd( -13.0233, 165.787, 12.0872, 0.59 ) }
    dend_1 { pt3dadd( -12.6588, 169.928, 11.9119, 0.59 ) }
    dend_1 { pt3dadd( -12.4605, 172.183, 11.8086, 0.52 ) }
    dend_1 { pt3dadd( -12.2728, 174.141, 11.8462, 0.52 ) }
    dend_1 { pt3dadd( -12.1073, 175.514, 11.9028, 0.52 ) }
    dend_1 { pt3dadd( -11.9556, 176.618, 11.9843, 0.52 ) }
    dend_1 { pt3dadd( -11.7664, 177.982, 12.1464, 0.52 ) }
    dend_1 { pt3dadd( -11.3318, 181.019, 12.6095, 0.52 ) }
    dend_1 { pt3dadd( -10.9795, 183.635, 13.0415, 0.52 ) }
    dend_1 { pt3dadd( -10.6905, 185.817, 13.4378, 0.52 ) }
    dend_1 { pt3dadd( -10.4171, 187.796, 13.8235, 0.52 ) }
    dend_1 { pt3dadd( -10.1618, 189.503, 14.1749, 0.52 ) }
    dend_1 { pt3dadd( -9.89685, 191.258, 14.5463, 0.52 ) }
    dend_1 { pt3dadd( -9.45413, 194.162, 15.1673, 0.52 ) }
    dend_1 { pt3dadd( -9.08766, 196.868, 15.7263, 0.52 ) }
    dend_1 { pt3dadd( -8.716, 199.801, 16.311, 0.52 ) }
    dend_1 { pt3dadd( -8.43323, 202.261, 16.78, 0.52 ) }
    dend_1 { pt3dadd( -8.16448, 204.864, 17.2517, 0.52 ) }
    dend_1 { pt3dadd( -7.71643, 209.163, 18.0034, 0.52 ) }
    dend_1 { pt3dadd( -7.23063, 213.814, 18.7812, 0.52 ) }
    dend_1 { pt3dadd( -6.91245, 217.288, 19.3194, 0.52 ) }
    dend_1 { pt3dadd( -6.67115, 220.749, 19.8375, 0.52 ) }
    dend_1 { pt3dadd( -6.46771, 224.75, 20.4185, 0.52 ) }
    dend_1 { pt3dadd( -6.38731, 226.998, 20.7368, 0.52 ) }
    dend_1 { pt3dadd( -6.35546, 229.13, 20.9827, 0.52 ) }
    dend_1 { pt3dadd( -6.34277, 231.53, 21.2065, 0.52 ) }
    dend_1 { pt3dadd( -6.41289, 234.489, 21.4201, 0.52 ) }
    dend_1 { pt3dadd( -6.53572, 238.545, 21.5209, 0.52 ) }
    dend_1 { pt3dadd( -6.63081, 241.849, 21.4995, 0.52 ) }
    dend_1 { pt3dadd( -6.6742, 244.792, 21.4345, 0.52 ) }
    dend_1 { pt3dadd( -6.5949, 248.208, 21.348, 0.52 ) }
    dend_1 { pt3dadd( -6.28751, 253.322, 21.3213, 0.52 ) }
    dend_1 { pt3dadd( -5.95568, 257.083, 21.3834, 0.52 ) }
    dend_1 { pt3dadd( -5.65216, 259.941, 21.5015, 0.52 ) }
    dend_1 { pt3dadd( -5.36244, 262.179, 21.6402, 0.52 ) }
    dend_1 { pt3dadd( -4.89264, 265.151, 21.9553, 0.52 ) }
    dend_1 { pt3dadd( -4.32378, 268.146, 22.3617, 0.52 ) }
    dend_1 { pt3dadd( -3.77703, 270.308, 22.8315, 0.52 ) }
    dend_1 { pt3dadd( -3.55255, 271.218, 23.1566, 0.52 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 55/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( -16.1029, 36.0362, 0.00416665, 0.74 ) }
    axon_1 { pt3dadd( -22.191, 49.7452, 0.00416665, 0.74 ) }
    axon_1 { pt3dadd( -28.279, 63.4541, 0.00416665, 0.74 ) }
    // Section: dend_11, id: dend_11, parent: dend_7 (entry count 58/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( -20.9957, -48.9145, -14.5952, 0.37 ) }
    dend_11 { pt3dadd( -20.3162, -50.7375, -14.2911, 0.37 ) }
    dend_11 { pt3dadd( -19.587, -52.8519, -13.876, 0.37 ) }
    dend_11 { pt3dadd( -18.9313, -55.0694, -13.2828, 0.37 ) }
    dend_11 { pt3dadd( -18.625, -56.2932, -12.9345, 0.37 ) }
    dend_11 { pt3dadd( -18.1727, -58.2759, -12.3849, 0.37 ) }
    dend_11 { pt3dadd( -17.8082, -59.9503, -11.9169, 0.37 ) }
    dend_11 { pt3dadd( -17.471, -61.6562, -11.4166, 0.37 ) }
    dend_11 { pt3dadd( -17.0365, -63.9003, -10.8085, 0.37 ) }
    dend_11 { pt3dadd( -16.6005, -66.2047, -10.2059, 0.37 ) }
    dend_11 { pt3dadd( -16.1518, -68.5973, -9.59941, 0.37 ) }
    dend_11 { pt3dadd( -15.5187, -71.8215, -8.8198, 0.37 ) }
    dend_11 { pt3dadd( -14.7175, -75.6625, -7.98712, 0.37 ) }
    dend_11 { pt3dadd( -14.1207, -78.3668, -7.44063, 0.37 ) }
    dend_11 { pt3dadd( -13.5844, -80.5342, -7.04012, 0.37 ) }
    dend_11 { pt3dadd( -13.1725, -82.0482, -6.75156, 0.37 ) }
    dend_11 { pt3dadd( -12.4136, -84.5764, -6.27688, 0.37 ) }
    dend_11 { pt3dadd( -11.5791, -87.0183, -5.85916, 0.37 ) }
    dend_11 { pt3dadd( -11.0413, -88.3266, -5.64097, 0.37 ) }
    dend_11 { pt3dadd( -10.6221, -89.1821, -5.48739, 0.37 ) }
    dend_11 { pt3dadd( -10.1486, -90.0025, -5.34397, 0.37 ) }
    dend_11 { pt3dadd( -9.19693, -91.4821, -4.9461, 0.37 ) }
    dend_11 { pt3dadd( -8.4208, -92.587, -4.54313, 0.37 ) }
    dend_11 { pt3dadd( -7.4812, -93.878, -3.99463, 0.37 ) }
    dend_11 { pt3dadd( -6.46585, -95.2866, -3.37506, 0.37 ) }
    dend_11 { pt3dadd( -5.91548, -96.1024, -3.01391, 0.37 ) }
    dend_11 { pt3dadd( -4.93103, -97.7314, -2.22346, 0.37 ) }
    dend_11 { pt3dadd( -4.28751, -98.9366, -1.61329, 0.37 ) }
    dend_11 { pt3dadd( -3.60575, -100.4, -0.922556, 0.37 ) }
    dend_11 { pt3dadd( -3.18042, -101.498, -0.468861, 0.37 ) }
    dend_11 { pt3dadd( -2.87587, -102.498, -0.145596, 0.37 ) }
    dend_11 { pt3dadd( -2.42898, -104.548, 0.388707, 0.37 ) }
    dend_11 { pt3dadd( -2.27026, -105.703, 0.596438, 0.37 ) }
    dend_11 { pt3dadd( -2.2101, -106.833, 0.76301, 0.37 ) }
    dend_11 { pt3dadd( -2.22479, -107.617, 0.846583, 0.37 ) }
    dend_11 { pt3dadd( -2.28815, -108.916, 0.883993, 0.37 ) }
    dend_11 { pt3dadd( -2.38366, -110.27, 0.819605, 0.37 ) }
    dend_11 { pt3dadd( -2.46974, -111.189, 0.718483, 0.37 ) }
    dend_11 { pt3dadd( -2.65365, -112.833, 0.509344, 0.37 ) }
    dend_11 { pt3dadd( -2.82117, -114.229, 0.331794, 0.37 ) }
    dend_11 { pt3dadd( -2.99393, -115.553, 0.143944, 0.37 ) }
    dend_11 { pt3dadd( -3.15744, -116.679, -0.0240052, 0.37 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_11 { pt3dadd( -3.29205, -117.535, -0.149492, 0.37 ) }
    dend_11 { pt3dadd( -3.44772, -118.541, -0.282083, 0.37 ) }
    dend_11 { pt3dadd( -3.63711, -119.751, -0.413291, 0.37 ) }
    dend_11 { pt3dadd( -3.86468, -121.283, -0.523477, 0.37 ) }
    dend_11 { pt3dadd( -4.04691, -122.572, -0.477617, 0.37 ) }
    dend_11 { pt3dadd( -4.19967, -123.699, -0.362385, 0.37 ) }
    dend_11 { pt3dadd( -4.34721, -124.732, -0.192777, 0.37 ) }
    dend_11 { pt3dadd( -4.51879, -125.749, 0.0387069, 0.37 ) }
    dend_11 { pt3dadd( -4.68614, -126.677, 0.310291, 0.37 ) }
    dend_11 { pt3dadd( -5.06098, -128.513, 0.984684, 0.37 ) }
    dend_11 { pt3dadd( -5.27994, -129.368, 1.36649, 0.37 ) }
    dend_11 { pt3dadd( -5.45707, -129.95, 1.65225, 0.37 ) }
    dend_11 { pt3dadd( -5.62244, -130.495, 1.94644, 0.37 ) }
    dend_11 { pt3dadd( -5.81456, -131.28, 2.35142, 0.37 ) }
    dend_11 { pt3dadd( -5.93497, -131.953, 2.60268, 0.37 ) }
    dend_11 { pt3dadd( -6.00421, -132.596, 2.74523, 0.37 ) }
    dend_11 { pt3dadd( -6.05816, -133.521, 2.95543, 0.37 ) }
    dend_11 { pt3dadd( -6.07587, -134.764, 3.22386, 0.37 ) }
    dend_11 { pt3dadd( -6.00046, -136.185, 3.50279, 0.37 ) }
    dend_11 { pt3dadd( -5.82284, -137.852, 3.78157, 0.37 ) }
    dend_11 { pt3dadd( -5.67686, -139.027, 3.95079, 0.37 ) }
    dend_11 { pt3dadd( -5.47305, -140.776, 4.16527, 0.37 ) }
    dend_11 { pt3dadd( -5.3831, -141.899, 4.29013, 0.37 ) }
    dend_11 { pt3dadd( -5.34141, -143.177, 4.47702, 0.37 ) }
    dend_11 { pt3dadd( -5.388, -144.207, 4.77109, 0.37 ) }
    dend_11 { pt3dadd( -5.58374, -145.423, 5.36402, 0.37 ) }
    dend_11 { pt3dadd( -5.83808, -146.315, 6.00879, 0.37 ) }
    dend_11 { pt3dadd( -6.07273, -146.953, 6.56973, 0.37 ) }
    dend_11 { pt3dadd( -6.59301, -148.302, 7.92696, 0.37 ) }
    dend_11 { pt3dadd( -7.02198, -149.554, 9.26425, 0.37 ) }
    dend_11 { pt3dadd( -7.22562, -150.427, 10.2044, 0.37 ) }
    dend_11 { pt3dadd( -7.29058, -151.587, 11.5185, 0.37 ) }
    dend_11 { pt3dadd( -7.22363, -152.416, 12.4097, 0.37 ) }
    dend_11 { pt3dadd( -7.09008, -153.25, 13.2229, 0.37 ) }
    dend_11 { pt3dadd( -6.88985, -154.137, 13.9777, 0.37 ) }
    dend_11 { pt3dadd( -6.64568, -155.019, 14.7318, 0.37 ) }
    dend_11 { pt3dadd( -6.13659, -156.729, 16.2211, 0.37 ) }
    dend_11 { pt3dadd( -5.95193, -157.374, 16.8268, 0.37 ) }
    dend_11 { pt3dadd( -5.63831, -158.515, 18.019, 0.37 ) }
    dend_11 { pt3dadd( -5.51636, -159.033, 18.606, 0.37 ) }
    dend_11 { pt3dadd( -5.37467, -159.72, 19.4502, 0.37 ) }
    dend_11 { pt3dadd( -5.29008, -160.212, 20.0841, 0.37 ) }
    dend_11 { pt3dadd( -5.23504, -160.958, 20.9458, 0.37 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 43/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -20.9957, -48.9145, -14.5952, 0.37 ) }
    dend_8 { pt3dadd( -23.5214, -52.082, -15.1414, 0.37 ) }
    dend_8 { pt3dadd( -25.2262, -54.2709, -15.4467, 0.37 ) }
    dend_8 { pt3dadd( -26.2424, -55.6081, -15.596, 0.37 ) }
    dend_8 { pt3dadd( -27.9337, -57.9161, -15.8218, 0.37 ) }
    dend_8 { pt3dadd( -29.29, -59.8487, -15.9925, 0.37 ) }
    dend_8 { pt3dadd( -30.0782, -61.0066, -16.0854, 0.37 ) }
    dend_8 { pt3dadd( -31.0768, -62.5361, -16.11, 0.37 ) }
    dend_8 { pt3dadd( -32.3942, -64.5441, -16.1431, 0.37 ) }
    dend_8 { pt3dadd( -33.4624, -66.129, -16.1674, 0.37 ) }
    dend_8 { pt3dadd( -34.5311, -67.6956, -16.1882, 0.37 ) }
    dend_8 { pt3dadd( -35.4362, -69.0664, -16.2028, 0.37 ) }
    dend_8 { pt3dadd( -36.8877, -71.4196, -16.2561, 0.37 ) }
    dend_8 { pt3dadd( -38.0464, -73.473, -16.318, 0.37 ) }
    dend_8 { pt3dadd( -38.8665, -75.0643, -16.3719, 0.37 ) }
    dend_8 { pt3dadd( -40.2195, -77.9224, -16.5001, 0.37 ) }
    dend_8 { pt3dadd( -41.9202, -81.931, -16.7162, 0.37 ) }
    dend_8 { pt3dadd( -42.9642, -84.8203, -16.8943, 0.37 ) }
    dend_8 { pt3dadd( -43.7108, -87.491, -17.0775, 0.37 ) }
    dend_8 { pt3dadd( -44.3762, -90.6992, -17.341, 0.37 ) }
    dend_8 { pt3dadd( -44.8662, -94.0857, -17.6712, 0.37 ) }
    dend_8 { pt3dadd( -45.0719, -96.4125, -17.9594, 0.37 ) }
    dend_8 { pt3dadd( -45.1346, -98.4053, -18.2533, 0.37 ) }
    dend_8 { pt3dadd( -45.1006, -100.671, -18.6208, 0.37 ) }
    dend_8 { pt3dadd( -44.9105, -103.691, -19.1735, 0.37 ) }
    dend_8 { pt3dadd( -44.7197, -105.429, -19.5072, 0.37 ) }
    dend_8 { pt3dadd( -44.5383, -106.844, -19.7602, 0.37 ) }
    dend_8 { pt3dadd( -44.435, -107.75, -19.9087, 0.37 ) }
    dend_8 { pt3dadd( -44.32, -108.824, -20.1169, 0.37 ) }
    dend_8 { pt3dadd( -44.1267, -110.824, -20.5309, 0.37 ) }
    dend_8 { pt3dadd( -43.8482, -113.466, -21.1425, 0.37 ) }
    dend_8 { pt3dadd( -43.5522, -115.926, -21.8216, 0.37 ) }
    dend_8 { pt3dadd( -43.3306, -117.854, -22.4755, 0.37 ) }
    dend_8 { pt3dadd( -43.0038, -120.953, -23.7367, 0.37 ) }
    dend_8 { pt3dadd( -42.7592, -123.17, -24.7603, 0.37 ) }
    dend_8 { pt3dadd( -42.4849, -125.525, -26.0011, 0.37 ) }
    dend_8 { pt3dadd( -42.2052, -127.604, -27.2355, 0.37 ) }
    dend_8 { pt3dadd( -41.7937, -130.469, -29.0328, 0.37 ) }
    dend_8 { pt3dadd( -41.6743, -131.303, -29.5458, 0.37 ) }
    dend_8 { pt3dadd( -41.4852, -132.688, -30.3708, 0.37 ) }
    dend_8 { pt3dadd( -41.1521, -134.873, -31.7, 0.37 ) }
    dend_8 { pt3dadd( -40.824, -136.871, -32.8641, 0.37 ) }
    dend_8 { pt3dadd( -40.5846, -138.274, -33.6257, 0.37 ) }
    dend_8 { pt3dadd( -40.0521, -140.664, -34.8472, 0.37 ) }
    dend_8 { pt3dadd( -39.5664, -142.914, -35.9937, 0.37 ) }
    // Section: dend_3, id: dend_3, parent: dend_1 (entry count 88/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -3.55255, 271.218, 23.1566, 0.52 ) }
    dend_3 { pt3dadd( -3.69633, 273.012, 23.3316, 0.52 ) }
    dend_3 { pt3dadd( -3.74648, 275.045, 23.3565, 0.52 ) }
    dend_3 { pt3dadd( -3.72915, 276.733, 23.3266, 0.52 ) }
    dend_3 { pt3dadd( -3.70484, 278.454, 23.2761, 0.52 ) }
    dend_3 { pt3dadd( -3.67241, 280.032, 23.2299, 0.52 ) }
    dend_3 { pt3dadd( -3.6112, 281.989, 23.1907, 0.52 ) }
    dend_3 { pt3dadd( -3.46315, 284.45, 23.1402, 0.52 ) }
    dend_3 { pt3dadd( -3.31516, 286.039, 23.1266, 0.52 ) }
    dend_3 { pt3dadd( -3.17942, 287.497, 23.1439, 0.52 ) }
    dend_3 { pt3dadd( -3.07528, 288.806, 23.1884, 0.52 ) }
    dend_3 { pt3dadd( -2.93786, 290.813, 23.2396, 0.52 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_3 { pt3dadd( -2.79434, 293.315, 23.3041, 0.52 ) }
    dend_3 { pt3dadd( -2.67297, 296.037, 23.4058, 0.52 ) }
    dend_3 { pt3dadd( -2.59159, 299.132, 23.4928, 0.52 ) }
    dend_3 { pt3dadd( -2.58203, 300.984, 23.5372, 0.52 ) }
    dend_3 { pt3dadd( -2.63726, 304.863, 23.6289, 0.52 ) }
    dend_3 { pt3dadd( -2.71845, 307.537, 23.705, 0.52 ) }
    dend_3 { pt3dadd( -2.81839, 310.091, 23.8052, 0.52 ) }
    dend_3 { pt3dadd( -2.94954, 313.298, 23.9937, 0.52 ) }
    dend_3 { pt3dadd( -3.04285, 316.122, 24.2151, 0.52 ) }
    dend_3 { pt3dadd( -3.09608, 318.564, 24.4353, 0.52 ) }
    dend_3 { pt3dadd( -3.13954, 321.417, 24.7447, 0.52 ) }
    dend_3 { pt3dadd( -3.17026, 323.97, 25.0016, 0.52 ) }
    dend_3 { pt3dadd( -3.23584, 326.968, 25.2881, 0.52 ) }
    dend_3 { pt3dadd( -3.35305, 329.98, 25.5602, 0.52 ) }
    dend_3 { pt3dadd( -3.54932, 332.727, 25.7896, 0.52 ) }
    dend_3 { pt3dadd( -3.73016, 334.427, 25.9196, 0.52 ) }
    dend_3 { pt3dadd( -4.06481, 336.874, 26.1047, 0.52 ) }
    dend_3 { pt3dadd( -4.4722, 339.453, 26.3115, 0.52 ) }
    dend_3 { pt3dadd( -4.86744, 342.626, 26.3184, 0.52 ) }
    dend_3 { pt3dadd( -5.13687, 345.766, 26.1722, 0.52 ) }
    dend_3 { pt3dadd( -5.16296, 346.453, 26.1253, 0.52 ) }
    dend_3 { pt3dadd( -5.11059, 349.269, 25.897, 0.52 ) }
    dend_3 { pt3dadd( -4.84564, 352.509, 25.6179, 0.52 ) }
    dend_3 { pt3dadd( -3.73604, 359.622, 25.042, 0.52 ) }
    dend_3 { pt3dadd( -3.18482, 361.964, 24.932, 0.52 ) }
    dend_3 { pt3dadd( -2.20268, 365.093, 24.9112, 0.52 ) }
    dend_3 { pt3dadd( -1.06378, 367.943, 25.0616, 0.52 ) }
    dend_3 { pt3dadd( -0.248958, 369.498, 25.2858, 0.52 ) }
    dend_3 { pt3dadd( 0.882603, 371.19, 25.7829, 0.52 ) }
    dend_3 { pt3dadd( 2.64928, 373.324, 26.8961, 0.52 ) }
    dend_3 { pt3dadd( 3.63484, 374.339, 27.4815, 0.52 ) }
    dend_3 { pt3dadd( 5.24484, 375.744, 28.4365, 0.52 ) }
    dend_3 { pt3dadd( 6.72884, 376.949, 29.3147, 0.52 ) }
    dend_3 { pt3dadd( 7.82379, 377.847, 29.9532, 0.52 ) }
    dend_3 { pt3dadd( 8.61456, 378.508, 30.4876, 0.52 ) }
    dend_3 { pt3dadd( 9.66816, 379.374, 31.2617, 0.52 ) }
    dend_3 { pt3dadd( 11.2151, 380.65, 32.612, 0.52 ) }
    dend_3 { pt3dadd( 12.2587, 381.53, 33.6404, 0.52 ) }
    dend_3 { pt3dadd( 13.2142, 382.384, 34.6515, 0.52 ) }
    dend_3 { pt3dadd( 15.4523, 384.691, 37.2655, 0.52 ) }
    dend_3 { pt3dadd( 16.0767, 385.487, 38.0695, 0.52 ) }
    dend_3 { pt3dadd( 17.3036, 387.468, 39.8081, 0.52 ) }
    dend_3 { pt3dadd( 17.8345, 388.581, 40.6619, 0.52 ) }
    dend_3 { pt3dadd( 18.3966, 390.073, 41.6848, 0.52 ) }
    dend_3 { pt3dadd( 18.9647, 391.944, 42.7858, 0.52 ) }
    dend_3 { pt3dadd( 19.5683, 394.298, 43.9112, 0.52 ) }
    dend_3 { pt3dadd( 19.826, 395.421, 44.4128, 0.52 ) }
    dend_3 { pt3dadd( 20.3318, 397.794, 45.3694, 0.52 ) }
    dend_3 { pt3dadd( 20.7045, 399.59, 46.0536, 0.52 ) }
    dend_3 { pt3dadd( 21.0038, 401.034, 46.5831, 0.52 ) }
    dend_3 { pt3dadd( 21.3194, 402.388, 47.087, 0.52 ) }
    dend_3 { pt3dadd( 21.7056, 403.843, 47.6531, 0.52 ) }
    dend_3 { pt3dadd( 22.4564, 406.411, 48.6752, 0.52 ) }
    dend_3 { pt3dadd( 22.9243, 407.9, 49.2569, 0.52 ) }
    dend_3 { pt3dadd( 23.5705, 409.745, 50.0445, 0.52 ) }
    dend_3 { pt3dadd( 24.3828, 411.884, 51.0037, 0.52 ) }
    dend_3 { pt3dadd( 24.8481, 413.003, 51.4924, 0.52 ) }
    dend_3 { pt3dadd( 25.2442, 413.892, 51.8571, 0.52 ) }
    dend_3 { pt3dadd( 25.7124, 414.93, 52.2322, 0.52 ) }
    dend_3 { pt3dadd( 26.3596, 416.59, 52.7066, 0.52 ) }
    dend_3 { pt3dadd( 26.799, 418.037, 52.9974, 0.52 ) }
    dend_3 { pt3dadd( 27.1964, 419.865, 53.2627, 0.52 ) }
    dend_3 { pt3dadd( 27.4107, 421.494, 53.4684, 0.52 ) }
    dend_3 { pt3dadd( 27.5816, 423.077, 53.6542, 0.52 ) }
    dend_3 { pt3dadd( 27.7428, 425.314, 53.8895, 0.52 ) }
    dend_3 { pt3dadd( 27.7894, 427.238, 54.0621, 0.52 ) }
    dend_3 { pt3dadd( 27.7686, 429.016, 54.2332, 0.52 ) }
    dend_3 { pt3dadd( 27.6317, 431.769, 54.5669, 0.52 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 68/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -3.55255, 271.218, 23.1566, 0.52 ) }
    dend_2 { pt3dadd( -2.32699, 270.69, 23.1138, 0.52 ) }
    // Section: dend_13, id: dend_13, parent: dend_11 (entry count 70/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -5.23504, -160.958, 20.9458, 0.37 ) }
    dend_13 { pt3dadd( -5.41281, -161.358, 20.981, 0.37 ) }
    dend_13 { pt3dadd( -5.62334, -161.86, 21.0151, 0.37 ) }
    dend_13 { pt3dadd( -5.86601, -162.342, 21.0664, 0.37 ) }
    dend_13 { pt3dadd( -6.19461, -162.95, 21.116, 0.37 ) }
    dend_13 { pt3dadd( -6.48482, -163.487, 21.1459, 0.37 ) }
    dend_13 { pt3dadd( -6.6982, -163.89, 21.1493, 0.37 ) }
    dend_13 { pt3dadd( -6.89327, -164.242, 21.1442, 0.37 ) }
    dend_13 { pt3dadd( -7.3072, -164.974, 21.1293, 0.37 ) }
    dend_13 { pt3dadd( -7.70196, -165.69, 21.1082, 0.37 ) }
    dend_13 { pt3dadd( -8.03983, -166.316, 21.0687, 0.37 ) }
    dend_13 { pt3dadd( -8.87369, -167.795, 20.9587, 0.37 ) }
    dend_13 { pt3dadd( -11.4961, -173.963, 22.0602, 0.37 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 83/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -5.23504, -160.958, 20.9458, 0.37 ) }
    dend_12 { pt3dadd( -3.54557, -159.646, 21.1375, 0.37 ) }
    dend_12 { pt3dadd( -2.38376, -158.743, 21.2693, 0.37 ) }
    dend_12 { pt3dadd( -1.30385, -157.905, 21.3918, 0.37 ) }
    dend_12 { pt3dadd( 0.149463, -156.776, 21.5566, 0.37 ) }
    dend_12 { pt3dadd( 1.04862, -156.078, 21.6586, 0.37 ) }
    dend_12 { pt3dadd( 12.4711, -150.485, 22.3992, 0.37 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 90/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -39.5664, -142.914, -35.9937, 0.37 ) }
    dend_10 { pt3dadd( -39.3357, -143.724, -36.3599, 0.37 ) }
    dend_10 { pt3dadd( -39.0531, -144.704, -36.8274, 0.37 ) }
    dend_10 { pt3dadd( -38.6708, -145.918, -37.4466, 0.37 ) }
    dend_10 { pt3dadd( -38.2078, -147.212, -38.1304, 0.37 ) }
    dend_10 { pt3dadd( -37.6614, -148.553, -38.8937, 0.37 ) }
    dend_10 { pt3dadd( -36.99, -150.035, -39.7435, 0.37 ) }
    dend_10 { pt3dadd( -36.4977, -150.966, -40.2965, 0.37 ) }
    dend_10 { pt3dadd( -36.0375, -151.698, -40.7665, 0.37 ) }
    dend_10 { pt3dadd( -35.1002, -152.962, -41.5798, 0.37 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_10 { pt3dadd( -34.2379, -153.98, -42.2181, 0.37 ) }
    dend_10 { pt3dadd( -33.368, -154.912, -42.7951, 0.37 ) }
    dend_10 { pt3dadd( -32.161, -156.166, -43.4991, 0.37 ) }
    dend_10 { pt3dadd( -31.1677, -157.216, -44.0254, 0.37 ) }
    dend_10 { pt3dadd( -30.3578, -158.103, -44.4267, 0.37 ) }
    dend_10 { pt3dadd( -29.6388, -158.957, -44.7578, 0.37 ) }
    dend_10 { pt3dadd( -29.1417, -159.625, -44.9625, 0.37 ) }
    dend_10 { pt3dadd( -28.1438, -161.117, -45.3443, 0.37 ) }
    dend_10 { pt3dadd( -27.4188, -162.374, -45.5836, 0.37 ) }
    dend_10 { pt3dadd( -26.9994, -163.215, -45.7014, 0.37 ) }
    dend_10 { pt3dadd( -26.2823, -164.78, -45.8966, 0.37 ) }
    dend_10 { pt3dadd( -25.5192, -166.554, -46.1712, 0.37 ) }
    dend_10 { pt3dadd( -24.9625, -167.952, -46.4091, 0.37 ) }
    dend_10 { pt3dadd( -24.4572, -169.389, -46.6579, 0.37 ) }
    dend_10 { pt3dadd( -23.9758, -171.003, -46.9164, 0.37 ) }
    dend_10 { pt3dadd( -23.69, -172.192, -47.1623, 0.37 ) }
    dend_10 { pt3dadd( -23.3436, -173.964, -47.5926, 0.37 ) }
    dend_10 { pt3dadd( -23.1726, -174.923, -47.8406, 0.37 ) }
    dend_10 { pt3dadd( -22.9556, -176.197, -48.1643, 0.37 ) }
    dend_10 { pt3dadd( -22.7184, -177.458, -48.4661, 0.37 ) }
    dend_10 { pt3dadd( -22.2157, -179.628, -48.9216, 0.37 ) }
    dend_10 { pt3dadd( -21.7958, -181.166, -49.1806, 0.37 ) }
    dend_10 { pt3dadd( -21.1374, -183.053, -49.4273, 0.37 ) }
    dend_10 { pt3dadd( -20.5607, -184.332, -49.636, 0.37 ) }
    dend_10 { pt3dadd( -19.9835, -185.359, -49.8251, 0.37 ) }
    dend_10 { pt3dadd( -18.9461, -186.96, -50.1299, 0.37 ) }
    dend_10 { pt3dadd( -18.1779, -188.041, -50.3432, 0.37 ) }
    dend_10 { pt3dadd( -17.1525, -189.382, -50.6659, 0.37 ) }
    dend_10 { pt3dadd( -15.938, -190.88, -51.1574, 0.37 ) }
    dend_10 { pt3dadd( -14.6995, -192.311, -51.7607, 0.37 ) }
    dend_10 { pt3dadd( -13.6401, -193.506, -52.3709, 0.37 ) }
    dend_10 { pt3dadd( -12.501, -194.777, -53.1293, 0.37 ) }
    dend_10 { pt3dadd( -11.4078, -195.959, -53.8992, 0.37 ) }
    dend_10 { pt3dadd( -9.6936, -197.778, -55.1389, 0.37 ) }
    dend_10 { pt3dadd( -8.77528, -198.725, -55.8147, 0.37 ) }
    dend_10 { pt3dadd( -7.70742, -199.764, -56.6181, 0.37 ) }
    dend_10 { pt3dadd( -6.77939, -200.62, -57.3183, 0.37 ) }
    dend_10 { pt3dadd( -6.04966, -201.283, -57.8955, 0.37 ) }
    dend_10 { pt3dadd( -5.58701, -201.712, -58.2493, 0.37 ) }
    dend_10 { pt3dadd( -4.68656, -202.535, -58.8618, 0.37 ) }
    dend_10 { pt3dadd( -3.88958, -203.237, -59.3582, 0.37 ) }
    dend_10 { pt3dadd( -2.62247, -204.316, -60.1555, 0.37 ) }
    dend_10 { pt3dadd( -0.72264, -205.932, -61.3689, 0.37 ) }
    dend_10 { pt3dadd( 0.61801, -207.101, -62.2842, 0.37 ) }
    dend_10 { pt3dadd( 1.28749, -207.701, -62.7472, 0.37 ) }
    dend_10 { pt3dadd( 2.47051, -208.792, -63.6077, 0.37 ) }
    dend_10 { pt3dadd( 3.3274, -209.63, -64.2879, 0.37 ) }
    dend_10 { pt3dadd( 3.8324, -210.131, -64.678, 0.37 ) }
    dend_10 { pt3dadd( 4.91201, -211.236, -65.5173, 0.37 ) }
    dend_10 { pt3dadd( 5.51619, -211.891, -66.0567, 0.37 ) }
    dend_10 { pt3dadd( 6.80911, -213.389, -67.3178, 0.37 ) }
    dend_10 { pt3dadd( 7.70904, -214.5, -68.2489, 0.37 ) }
    dend_10 { pt3dadd( 8.57557, -215.542, -69.0983, 0.37 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 53/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -39.5664, -142.914, -35.9937, 0.37 ) }
    dend_9 { pt3dadd( -40.2245, -144.985, -36.3389, 0.37 ) }
    dend_9 { pt3dadd( -40.8859, -146.876, -36.5968, 0.37 ) }
    dend_9 { pt3dadd( -41.1482, -147.605, -36.6804, 0.37 ) }
    dend_9 { pt3dadd( -41.4735, -148.563, -36.7741, 0.37 ) }
    dend_9 { pt3dadd( -41.7038, -149.298, -36.8366, 0.37 ) }
    dend_9 { pt3dadd( -41.8882, -149.951, -36.8861, 0.37 ) }
    dend_9 { pt3dadd( -42.2583, -151.358, -36.9541, 0.37 ) }
    dend_9 { pt3dadd( -42.4635, -152.198, -36.9621, 0.37 ) }
    dend_9 { pt3dadd( -42.7273, -153.31, -36.9734, 0.37 ) }
    dend_9 { pt3dadd( -42.9465, -154.207, -36.983, 0.37 ) }
    dend_9 { pt3dadd( -43.1575, -155.117, -36.9945, 0.37 ) }
    dend_9 { pt3dadd( -43.2942, -155.728, -37.0036, 0.37 ) }
    dend_9 { pt3dadd( -43.4627, -156.544, -36.9559, 0.37 ) }
    dend_9 { pt3dadd( -43.5843, -157.188, -36.8805, 0.37 ) }
    dend_9 { pt3dadd( -43.7004, -157.964, -36.7663, 0.37 ) }
    dend_9 { pt3dadd( -43.8089, -159.064, -36.5991, 0.37 ) }
    dend_9 { pt3dadd( -43.8788, -160.07, -36.4502, 0.37 ) }
    dend_9 { pt3dadd( -43.9547, -161.904, -36.1968, 0.37 ) }
    dend_9 { pt3dadd( -43.9891, -163.35, -35.9618, 0.37 ) }
    dend_9 { pt3dadd( -44.02, -165.29, -35.6285, 0.37 ) }
    dend_9 { pt3dadd( -44.0484, -166.84, -35.3597, 0.37 ) }
    dend_9 { pt3dadd( -44.0809, -167.871, -35.2027, 0.37 ) }
    dend_9 { pt3dadd( -44.1391, -168.882, -35.0782, 0.37 ) }
    dend_9 { pt3dadd( -44.4653, -171.821, -34.9341, 0.37 ) }
    dend_9 { pt3dadd( -44.6374, -172.782, -34.9179, 0.37 ) }
    dend_9 { pt3dadd( -44.8308, -173.556, -34.9305, 0.37 ) }
    dend_9 { pt3dadd( -45.3851, -175.544, -35.001, 0.37 ) }
    dend_9 { pt3dadd( -45.7416, -176.732, -35.081, 0.37 ) }
    dend_9 { pt3dadd( -46.4649, -178.839, -35.3462, 0.37 ) }
    dend_9 { pt3dadd( -46.9541, -179.994, -35.6345, 0.37 ) }
    dend_9 { pt3dadd( -47.3488, -180.82, -35.8639, 0.37 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_18, dend_17, dend_14, dend_5, dend_0, dend_19, dend_16, dend_15, dend_7, dend_6, dend_4, dend_1, dend_11, dend_8, dend_3, dend_2, dend_13, dend_12, dend_10, dend_9]}
    ModelViewParmSubset_2 = new SectionList()
    dend_18 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_18, dend_17, dend_14, dend_5, dend_0, dend_19, dend_16, dend_15, dend_7, dend_6, dend_4, dend_1, dend_11, dend_8, dend_3, dend_2, dend_13, dend_12, dend_10, dend_9]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_19 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_16 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_15 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_6 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_4 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_1 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_11 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_8 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_3 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_10 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_17 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_0 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_14 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_18 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_5 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_7 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_13 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_9 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_12 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_2 OneSecGrp_SectionRef_19.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17, dend_17, dend_17, dend_14, dend_14, dend_14, dend_14, dend_14, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_2 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 2.90744E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 2.90744E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.418459  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.026008999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 9.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.025854  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.19695699  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-6  // units: S cm-2
        e_pas_nml2 = -60.2509  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.9899996E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.008343  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 6.58298E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.026899999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.502333  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.653374  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 5.6999997E-5  // units: S cm-2
        e_pas_nml2 = -76.49812  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 7.84E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.30005398  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec basal {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.002256  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 1.38E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.005574  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 7.92E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bIR_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bIR_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bIR_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bIR_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_19 nseg = 3
    dend_16 nseg = 5
    dend_15 nseg = 5
    dend_6 nseg = 5
    dend_4 nseg = 3
    dend_1 nseg = 13
    dend_11 nseg = 7
    dend_8 nseg = 5
    dend_3 nseg = 9
    dend_10 nseg = 5
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bIR215_L6_LBC_d854e4228e_0_0


