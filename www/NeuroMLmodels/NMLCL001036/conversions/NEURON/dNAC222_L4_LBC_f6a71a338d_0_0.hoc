// Cell: dNAC222_L4_LBC_f6a71a338d_0_0
/*
{
  "id" : "dNAC222_L4_LBC_f6a71a338d_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-3.05395, 9.08547, -0.234601, 2.54687", "-2.79219, 8.19057, -0.218348, 4.32292", "-2.53043, 7.29567, -0.202095, 9.95036", "-2.26867, 6.40077, -0.185842, 10.1502", "-2.00691, 5.50587, -0.169589, 10.462", "-1.74515, 4.61097, -0.153336, 10.4262", "-1.48339, 3.71607, -0.137083, 10.5866", "-1.22164, 2.82117, -0.12083, 10.9135", "-0.959876, 1.92627, -0.104577, 11.2266", "-0.698117, 1.03137, -0.0883238, 11.5453", "-0.436358, 0.136465, -0.0720707, 11.9293", "-0.174598, -0.758436, -0.0558177, 12.2062", "0.0871607, -1.65334, -0.0395646, 12.3612", "0.34892, -2.54824, -0.0233116, 12.3583", "0.610679, -3.44314, -0.00705855, 12.2953", "0.872438, -4.33804, 0.0091945, 11.8309", "1.1342, -5.23294, 0.0254475, 11.1435", "1.39596, -6.12784, 0.0417006, 10.0426", "1.65772, -7.02274, 0.0579536, 8.49572", "1.91947, -7.91764, 0.0742067, 6.62324", "2.18123, -8.81254, 0.0904597, 3.82196" ]
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "-3.18195, -5.17787, -7.31829, 0.81", "-3.48557, -5.60308, -7.1949, 0.81", "-3.79308, -6.09542, -7.08477, 0.81", "-4.20331, -6.85481, -6.95242, 0.52", "-4.6633, -7.76052, -6.82777, 0.44", "-4.99287, -8.42271, -6.75293, 0.29", "-5.1901, -8.8112, -6.71622, 0.74", "-5.48548, -9.43048, -6.67709, 0.74", "-5.73307, -10.0003, -6.66311, 0.59", "-6.04343, -10.7773, -6.67868, 1.03", "-6.2642, -11.3853, -6.69991, 1.03", "-6.53386, -12.2213, -6.71646, 0.74", "-6.65829, -12.6842, -6.72595, 0.44", "-6.81586, -13.4234, -6.74421, 1.4", "-6.89537, -14.0409, -6.76343, 1.62", "-6.91899, -14.6672, -6.78724, 1.77", "-6.88725, -15.746, -6.83375, 1.11", "-6.82692, -16.4933, -6.87336, 0.29", "-6.74796, -17.298, -6.92037, 0.29", "-6.622, -18.4053, -6.99598, 0.44", "-6.52316, -19.2242, -7.06391, 0.59", "-6.43616, -19.9691, -7.14742, 0.81", "-6.31405, -21.1903, -7.31509, 0.22", "-6.25955, -21.9887, -7.43647, 1.33", "-6.23252, -22.815, -7.56605, 2.06", "-6.2323, -23.3155, -7.64796, 2.14", "-6.25201, -24.2686, -7.8154, 1.62", "-6.31813, -26.0039, -8.1612, 0.22", "-6.40961, -27.8592, -8.57718, 0.22", "-6.44505, -28.8765, -8.8209, 1.11", "-6.4631, -29.647, -9.00757, 1.33", "-6.46664, -30.1877, -9.13869, 1.18", "-6.45541, -30.9684, -9.33663, 0.96", "-6.41721, -31.8049, -9.57353, 0.22", "-6.29379, -33.796, -10.1748, 0.22", "-6.25531, -34.4481, -10.3665, 0.88", "-6.24745, -34.6505, -10.4206, 1.18", "-6.2575, -35.1192, -10.5213, 1.33", "-6.31294, -35.7906, -10.6364, 1.03", "-6.51707, -37.1027, -10.8407, 0.22", "-6.65237, -37.6584, -10.9343, 0.44", "-6.74578, -38.0078, -10.9972, 0.44", "-7.2664, -39.7838, -11.3549, 0.22", "-7.43731, -40.3125, -11.4703, 0.44", "-7.65181, -40.9254, -11.6165, 0.44", "-8.57479, -43.3338, -12.3486, 0.22", "-9.10305, -44.579, -12.8151, 1.77", "-9.32474, -45.0418, -13.0172, 2.36", "-9.55581, -45.457, -13.234, 2.36", "-10.0635, -46.2575, -13.684, 1.4", "-10.9281, -47.4485, -14.4072, 0.52", "-11.5969, -48.2421, -14.9459, 0.22", "-11.9563, -48.6948, -15.2811, 0.66", "-12.5519, -49.681, -15.885, 0.22", "-12.8233, -50.2275, -16.1846, 1.33", "-13.014, -50.6987, -16.4038, 1.62", "-13.1608, -51.149, -16.5805, 1.62", "-13.8269, -53.6583, -17.4186, 0.22", "-14.5018, -56.7252, -18.2897, 0.22", "-14.6899, -57.6954, -18.5441, 0.59", "-14.9744, -59.3172, -18.9406, 0.22", "-15.1417, -60.3345, -19.1541, 1.4", "-15.3073, -61.3717, -19.3084, 1.92", "-15.4182, -62.1787, -19.3035, 1.92" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4499997984545444,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "-4.68195, -3.24937, 2.62171, 1.92", "-4.84513, -3.74223, 2.6658, 1.92", "-5.0406, -5.03085, 2.71812, 1.25", "-5.08945, -5.8314, 2.72989, 0.88", "-5.10341, -6.66495, 2.73699, 1.11", "-5.10767, -7.34744, 2.74387, 1.47", "-5.12204, -7.91444, 2.75051, 1.69", "-5.12253, -9.14651, 2.76387, 1.69", "-5.12147, -9.82047, 2.76961, 1.4", "-5.19393, -10.5375, 2.77211, 1.4", "-5.41831, -11.2433, 2.78156, 1.11", "-5.69649, -11.7648, 2.79523, 0.74", "-5.98964, -12.1688, 2.81632, 0.74", "-6.42906, -12.6367, 2.88386, 1.11", "-6.8476, -13.0348, 2.95939, 1.11", "-7.4394, -13.5706, 3.07395, 0.81", "-7.93671, -14.0232, 3.19881, 1.25", "-8.33233, -14.3933, 3.31553, 1.47", "-8.73881, -14.7641, 3.43698, 1.62", "-9.24459, -15.2067, 3.58256, 1.33", "-9.8355, -15.6598, 3.72828, 0.74", "-10.4462, -16.0323, 3.84461, 0.52", "-11.0216, -16.2975, 3.93175, 0.66", "-11.9257, -16.6119, 4.02481, 0.66", "-12.4926, -16.7564, 4.05745, 0.66", "-13.3346, -16.9132, 4.06537, 0.88", "-13.98, -17.0031, 4.03352, 0.81", "-14.7, -17.0961, 3.94681, 0.52", "-15.0909, -17.1599, 3.8784, 0.52", "-15.555, -17.255, 3.77056, 0.52", "-16.3569, -17.4506, 3.55289, 0.88", "-16.9034, -17.5941, 3.39307, 0.88", "-17.3722, -17.7223, 3.25685, 0.88", "-18.0138, -17.8903, 3.08171, 0.74", "-18.6426, -18.0361, 2.92447, 0.59", "-19.2685, -18.153, 2.78261, 0.81", "-20.076, -18.2739, 2.62011, 0.81", "-20.7661, -18.3588, 2.49774, 1.03", "-21.464, -18.4322, 2.37652, 1.25", "-21.7689, -18.4649, 2.34558, 1.25", "-22.4696, -18.5831, 2.3155, 0.66", "-23.1495, -18.7603, 2.31036, 0.66", "-23.7715, -19.0119, 2.33136, 0.81", "-24.028, -19.1611, 2.36621, 0.81", "-25.0321, -19.9256, 2.61019, 0.37", "-25.3473, -20.1947, 2.71756, 0.29", "-25.7322, -20.5605, 2.88625, 0.29", "-26.0097, -20.8347, 3.01937, 0.29", "-26.6519, -21.4231, 3.29436, 0.74", "-27.0323, -21.7376, 3.4157, 1.25", "-27.3516, -21.9765, 3.47653, 1.25", "-27.6357, -22.1714, 3.53131, 1.25", "-27.8581, -22.3192, 3.57621, 1.25", "-28.5044, -22.7665, 3.69543, 0.52", "-28.9619, -23.1352, 3.7551, 1.03", "-29.153, -23.3242, 3.78116, 1.33", "-29.4385, -23.6678, 3.82225, 1.55", "-29.6275, -23.947, 3.85849, 1.55", "-29.7349, -24.156, 3.88936, 1.55", "-29.9165, -24.7094, 3.98618, 1.03", "-30.0732, -25.3007, 4.10847, 0.44", "-30.1184, -25.4764, 4.15094, 0.44", "-30.2163, -25.8006, 4.26144, 0.29", "-30.3005, -26.0322, 4.35627, 0.29", "-30.4631, -26.3856, 4.52301, 0.29", "-30.6824, -26.8107, 4.75394, 0.29", "-30.89, -27.1668, 4.97466, 0.29", "-31.2594, -27.825, 5.37278, 0.44", "-31.4655, -28.1954, 5.5974, 0.66", "-31.8261, -28.8509, 5.97799, 0.74", "-32.2233, -29.5763, 6.39095, 0.66", "-32.6114, -30.28, 6.81604, 0.29", "-32.9358, -30.8388, 7.16228, 0.22", "-33.2918, -31.3577, 7.48979, 0.22", "-33.5659, -31.709, 7.70987, 0.74", "-33.7258, -31.9029, 7.82431, 0.74", "-34.23, -32.5018, 8.15707, 0.59", "-34.6217, -32.96, 8.40497, 0.66", "-35.1892, -33.5646, 8.74612, 0.22", "-35.616, -33.9971, 8.98102, 0.22", "-35.9903, -34.3534, 9.18608, 0.37", "-36.2946, -34.6568, 9.33996, 0.37", "-36.6459, -35.0188, 9.49135, 0.15", "-37.0909, -35.4317, 9.69137, 0.15", "-37.5252, -35.7344, 9.89219, 0.37", "-37.9254, -35.8999, 10.0418, 0.37", "-43.5395, -40.2861, 11.4791, 0.37" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4499997984545444,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "5.67805, -4.68387, -3.44829, 3.83", "6.35858, -5.52432, -3.7999, 3.83" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4499997984545444
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "0.528048, -8.54087, 1.37171, 2.8", "0.528048, -8.54087, 1.37171, 2.8", "0.703891, -9.6953, 1.44409, 2.8", "0.879533, -10.8484, 1.51639, 2.43", "1.04252, -11.9184, 1.58348, 2.21", "1.23675, -13.1936, 1.66343, 2.06", "1.32631, -13.7816, 1.70029, 2.06" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4499997984545444
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-6.84195, 5.76613, -0.638285, 1.62", "-6.84195, 5.76613, -0.638285, 1.62", "-7.61003, 6.04008, -0.519376, 0.81", "-8.5958, 6.36423, -0.388516, 0.74", "-9.36615, 6.59708, -0.297829, 0.96", "-10.3978, 6.88988, -0.187468, 1.18", "-11.1946, 7.10551, -0.120058, 1.18", "-11.897, 7.29278, -0.0648636, 1.47", "-12.4804, 7.45146, -0.0180235, 1.47", "-13.1641, 7.64833, 0.0274267, 1.33", "-13.8539, 7.87243, 0.0872001, 0.88", "-14.6065, 8.14739, 0.176086, 0.52", "-15.241, 8.39902, 0.268178, 0.52", "-15.8599, 8.65025, 0.36674, 0.52", "-16.379, 8.85721, 0.451395, 1.03", "-16.9135, 9.05627, 0.542217, 1.33", "-17.2255, 9.15446, 0.603006, 1.33", "-18.0687, 9.37598, 0.776457, 0.81", "-18.7686, 9.53643, 0.906347, 0.81", "-19.4689, 9.66916, 1.01693, 1.03", "-20.0366, 9.75357, 1.09666, 1.03", "-21.0725, 9.86593, 1.23134, 0.66", "-21.8683, 9.92943, 1.33969, 0.37", "-22.3691, 9.97033, 1.41475, 0.37", "-23.0737, 10.0299, 1.52614, 0.37", "-23.6147, 10.0823, 1.60726, 0.37", "-24.0571, 10.1311, 1.66358, 0.29", "-24.6013, 10.2038, 1.71994, 0.29", "-25.5309, 10.3675, 1.81638, 0.59", "-26.1215, 10.5045, 1.87748, 1.03", "-26.702, 10.6695, 1.93571, 1.03", "-27.2774, 10.8513, 1.98058, 1.03", "-28.0753, 11.1078, 2.02225, 0.88", "-28.9882, 11.3934, 2.04764, 0.66", "-29.5817, 11.5683, 2.05815, 0.66", "-30.528, 11.8529, 2.07424, 1.25", "-31.0243, 12.0094, 2.08335, 1.55", "-31.5514, 12.1855, 2.10001, 1.55", "-32.1532, 12.4001, 2.12215, 0.88", "-32.8746, 12.666, 2.17368, 0.37", "-33.2817, 12.8304, 2.22241, 0.37", "-33.629, 12.9842, 2.27942, 0.37", "-33.9618, 13.1395, 2.34379, 0.37", "-34.3989, 13.3516, 2.43392, 0.59", "-34.9342, 13.6043, 2.54551, 0.81", "-35.551, 13.8802, 2.6671, 0.96", "-36.0967, 14.1023, 2.76234, 0.96", "-36.8905, 14.3758, 2.87425, 0.37", "-37.4342, 14.5343, 2.92977, 0.96", "-37.912, 14.6544, 2.97371, 1.25", "-38.3437, 14.7497, 2.9693, 1.25", "-38.614, 14.7981, 2.92902, 1.25", "-39.194, 14.8836, 2.77642, 0.74", "-39.6096, 14.9374, 2.63306, 0.59", "-39.978, 14.9871, 2.47532, 0.88", "-40.8852, 15.1191, 2.05027, 1.18", "-41.8182, 15.2593, 1.6107, 0.96", "-42.2672, 15.332, 1.41034, 0.96", "-42.9707, 15.4681, 1.12228, 0.66", "-43.7682, 15.6318, 0.832914, 0.88", "-44.2897, 15.7481, 0.678042, 0.88", "-44.9206, 15.9081, 0.571481, 0.59", "-45.6216, 16.1031, 0.530462, 0.29", "-46.3059, 16.3025, 0.520377, 0.29", "-46.5433, 16.3732, 0.525697, 0.59", "-47.0074, 16.5218, 0.552778, 0.59", "-48.1598, 16.9047, 0.651183, 0.37", "-49.3829, 17.3094, 0.789698, 0.37", "-50.2783, 17.5903, 0.908775, 0.74", "-50.8088, 17.7454, 0.993387, 0.96", "-51.1498, 17.845, 1.0433, 0.96", "-51.9147, 18.0542, 1.14403, 0.37", "-52.4698, 18.1983, 1.2176, 0.66", "-53.0029, 18.3359, 1.2795, 1.25", "-53.4158, 18.4413, 1.33719, 1.25", "-54.2796, 18.6459, 1.44346, 0.81", "-54.719, 18.7368, 1.47396, 0.81" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4499997984545444,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "0.408048, 9.16713, -0.318285, 1.4", "0.514926, 9.37259, -0.337064, 1.4", "1.0211, 10.3456, -0.426003, 1.18", "1.4977, 11.2618, -0.509747, 1.4", "1.98934, 12.207, -0.596132, 1.4", "2.43196, 13.0578, -0.673904, 1.18", "2.73662, 13.6435, -0.727436, 1.18" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4499997984545444
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "2.18123, -8.81254, 0.0904597, 0.792933", "6.39229, -23.2093, 0.0904597, 0.792933", "10.6034, -37.6061, 0.0904597, 0.792933" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "6.35858, -5.52432, -3.7999, 0.66", "7.78427, -7.74578, -3.97971, 0.66", "7.98844, -7.92908, -4.06655, 0.66", "9.17123, -8.22973, -4.65538, 0.44", "11.1813, -8.26592, -5.49674, 0.44", "11.7744, -8.22467, -5.71747, 0.88", "12.6953, -8.09854, -6.02437, 1.03", "13.7178, -7.79807, -6.27897, 1.03", "15.233, -7.26651, -6.64488, 0.96", "16.2561, -6.88839, -6.88909, 1.33", "16.7452, -6.71361, -7.02138, 1.55", "17.7493, -6.41685, -7.25755, 1.55", "18.7121, -6.23403, -7.42857, 1.25", "20.3254, -6.23545, -7.62448, 0.96", "20.8697, -6.40522, -7.68092, 0.66", "21.7729, -6.90494, -7.68112, 1.11", "22.2366, -7.21681, -7.66749, 1.33", "22.7815, -7.61363, -7.64713, 1.33", "23.9424, -8.43626, -7.61585, 0.81", "24.8988, -8.99838, -7.60816, 0.66", "26.5499, -9.50926, -7.67128, 0.66", "27.5067, -9.57862, -7.77429, 1.11", "28.4263, -9.51092, -7.91546, 1.11", "29.2704, -9.35856, -8.09806, 1.11", "30.1632, -9.12211, -8.35621, 0.81", "31.0683, -8.8921, -8.69078, 0.81", "31.9646, -8.66523, -9.07755, 0.96", "33.0003, -8.45399, -9.49404, 1.92", "34.0263, -8.32601, -9.9079, 2.65", "34.6609, -8.29521, -10.1736, 2.65", "35.8321, -8.32407, -10.7169, 1.62" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "6.35858, -5.52432, -3.7999, 0.96", "9.13586, -6.98366, -1.28267, 0.96", "9.81933, -7.26929, -0.752337, 1.11", "10.289, -7.42995, -0.435636, 1.25", "10.7847, -7.56953, -0.147691, 1.4", "11.3328, -7.69974, 0.13982, 1.4", "12.2553, -7.8897, 0.591743, 1.11", "12.9395, -7.92846, 0.785542, 0.96", "13.6499, -7.93919, 1.00599, 0.66", "14.5065, -7.92332, 1.2902, 0.66", "15.0392, -7.89295, 1.4727, 0.66", "15.5764, -7.85633, 1.65567, 0.66", "16.1541, -7.82294, 1.84918, 0.81", "16.7065, -7.81329, 2.04928, 1.03", "17.1182, -7.8361, 2.21806, 1.03", "17.7157, -7.96926, 2.5031, 0.59", "18.2369, -8.18317, 2.76423, 0.44", "18.4857, -8.30711, 2.88631, 0.44", "18.9555, -8.51603, 3.08872, 0.44", "19.6683, -8.74874, 3.34956, 0.44", "20.2592, -8.86739, 3.52956, 0.59", "20.9421, -8.91652, 3.71523, 0.59", "21.7639, -8.87686, 3.91646, 0.74", "22.77, -8.73395, 4.1466, 1.18", "23.3883, -8.58839, 4.28185, 1.4", "24.0712, -8.38338, 4.4236, 1.47", "24.6008, -8.20373, 4.52783, 1.11", "25.3155, -7.95061, 4.66444, 0.29", "25.7331, -7.80195, 4.74034, 0.29", "26.1813, -7.64235, 4.81888, 0.29", "27.0289, -7.3542, 4.95757, 0.74", "27.5772, -7.18026, 5.04, 1.03", "28.1556, -7.01258, 5.12456, 1.03", "28.9548, -6.80325, 5.2443, 0.74", "29.6334, -6.6396, 5.33788, 0.74", "30.5122, -6.43115, 5.43858, 0.74", "31.4, -6.21257, 5.52384, 1.33", "32.0899, -6.05113, 5.57909, 1.62", "32.3977, -5.9746, 5.60019, 1.62", "33.1508, -5.77762, 5.63657, 1.11", "33.9937, -5.55843, 5.66106, 0.37", "34.8364, -5.34142, 5.67303, 0.29", "35.2397, -5.24282, 5.67626, 0.29", "35.8844, -5.09517, 5.68356, 0.29", "36.3916, -4.98157, 5.70034, 0.29", "37.0746, -4.83215, 5.74528, 0.66", "37.6239, -4.70411, 5.7965, 0.66", "38.2511, -4.54903, 5.86163, 0.66", "38.7551, -4.40707, 5.92129, 0.52", "39.5079, -4.18057, 6.02136, 0.52", "39.9673, -4.02744, 6.09071, 0.44", "40.6891, -3.77136, 6.21491, 0.59", "41.2079, -3.57049, 6.31393, 0.74", "41.8514, -3.30865, 6.45156, 0.52", "42.3651, -3.107, 6.57253, 0.52", "42.8384, -2.9304, 6.69515, 0.66", "43.7911, -2.59304, 6.95487, 0.66", "44.1839, -2.45346, 7.06778, 1.11", "44.4395, -2.35249, 7.14776, 1.11", "44.907, -2.14299, 7.29917, 1.11", "45.5672, -1.79855, 7.51051, 0.81", "46.086, -1.483, 7.69228, 0.96", "46.4713, -1.21901, 7.8349, 0.96", "47.1244, -0.738869, 8.08615, 1.18", "47.7746, -0.22984, 8.34332, 0.37", "48.425, 0.300068, 8.60496, 0.37", "49.1141, 0.836132, 8.87439, 0.37", "49.5946, 1.18804, 9.06394, 0.81", "50.0153, 1.47695, 9.23165, 0.81", "50.8117, 1.99408, 9.54357, 0.59", "51.3146, 2.30633, 9.73927, 0.59", "52.0571, 2.7456, 10.018, 0.74", "52.6229, 3.06196, 10.2151, 0.74", "53.1796, 3.36796, 10.4194, 0.37", "53.8795, 3.75305, 10.6908, 1.03", "54.0563, 3.84928, 10.7621, 1.25", "54.4333, 4.03875, 10.9175, 1.4", "54.9851, 4.27395, 11.1426, 0.88", "55.5462, 4.4446, 11.3524, 0.52", "55.921, 4.51038, 11.482, 0.52", "56.5342, 4.56436, 11.6805, 0.29", "57.152, 4.5953, 11.8685, 0.29", "57.8853, 4.59181, 12.0759, 0.29", "58.6108, 4.54387, 12.2632, 0.29", "59.2243, 4.47736, 12.4062, 0.29", "59.8742, 4.38898, 12.5479, 0.88", "60.455, 4.29797, 12.6657, 1.11", "60.9845, 4.21284, 12.7654, 1.11", "61.4295, 4.13665, 12.8418, 0.52", "61.9871, 4.0271, 12.9315, 0.52", "62.6532, 3.86865, 13.0379, 0.44", "62.8136, 3.8172, 13.0609, 0.29", "69.1068, 4.02446, 16.4693, 0.29" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "1.32631, -13.7816, 1.70029, 1.11", "1.14096, -14.4985, 1.14923, 1.11", "0.920848, -16.0867, 0.321563, 0.96", "0.879176, -16.9395, 0.0445092, 1.4", "0.840233, -18.1982, -0.206597, 1.25", "0.810029, -19.1308, -0.328763, 1.33", "0.756849, -20.1909, -0.420596, 1.4", "0.681006, -21.3244, -0.428812, 1.11", "0.582705, -22.5618, -0.307789, 1.4", "0.477843, -23.86, -0.138416, 1.84", "0.405363, -24.7852, -0.00740891, 1.84", "0.349081, -25.6897, 0.0997422, 1.55", "0.30796, -26.9288, 0.197791, 1.25", "0.303513, -28.0381, 0.26497, 0.66", "0.343528, -29.9054, 0.394393, 0.52", "0.37326, -30.4919, 0.451082, 0.52", "0.420466, -31.1906, 0.546612, 0.52", "0.485862, -32.0477, 0.69726, 0.52", "0.534727, -32.7461, 0.856444, 0.52", "0.568885, -33.9823, 1.20164, 0.88", "0.528106, -34.8343, 1.46911, 1.18", "0.465253, -35.7708, 1.75526, 1.33", "0.384363, -36.6058, 1.98772, 1.4", "0.298268, -37.3008, 2.16754, 1.4", "0.196485, -38.094, 2.35145, 1.4", "0.0931325, -38.8756, 2.50751, 1.55", "-0.112759, -40.1274, 2.72334, 1.33", "-0.446844, -41.7703, 2.98349, 1.03", "-0.716542, -42.8588, 3.15111, 0.81", "-1.04986, -43.9986, 3.31844, 0.88", "-1.38453, -45.0171, 3.46369, 0.88", "-1.80855, -46.16, 3.62763, 0.88", "-2.13448, -46.9635, 3.73964, 0.88", "-2.46186, -47.7731, 3.85357, 1.33", "-2.82024, -48.6823, 3.98042, 1.55", "-3.01683, -49.1691, 4.0506, 1.69", "-3.37109, -49.9331, 4.17497, 1.69", "-3.62254, -50.406, 4.26157, 1.69" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "1.32631, -13.7816, 1.70029, 1.18", "1.54041, -14.2471, 3.048, 1.18", "1.69882, -14.5123, 3.69434, 1.18", "2.00294, -15.0106, 4.69217, 1.33", "2.18677, -15.3269, 5.22583, 1.33", "2.531, -15.9183, 6.07999, 1.03", "2.81205, -16.4214, 6.71521, 0.88", "3.0949, -16.8573, 7.14889, 1.03", "3.37424, -17.3661, 7.54121, 1.18", "3.56262, -17.8575, 7.83864, 1.18", "3.6556, -18.3715, 8.12489, 1.18", "3.62953, -18.8003, 8.33422, 1.25", "3.44162, -19.3111, 8.5637, 1.25", "3.05593, -19.9295, 8.8867, 0.96", "2.74209, -20.3423, 9.12362, 0.74", "2.42117, -20.7779, 9.39674, 0.74", "2.00054, -21.4803, 9.85701, 0.66", "1.77271, -22.0716, 10.2367, 0.66", "1.57312, -23.0091, 10.8038, 0.96", "1.52337, -23.6391, 11.1723, 0.96", "1.52392, -24.3257, 11.5312, 0.66", "1.53286, -24.7988, 11.7469, 0.44", "1.52287, -25.3764, 11.9919, 0.29", "1.39137, -25.9866, 12.2337, 0.66", "1.23069, -26.3188, 12.3435, 0.66", "0.864301, -26.9242, 12.5255, 0.44", "0.4905, -27.5142, 12.6783, 1.03", "0.246576, -27.8984, 12.774, 1.03", "-0.214031, -28.6273, 12.9648, 0.59", "-0.545524, -29.124, 13.1073, 1.18", "-0.926498, -29.6322, 13.2577, 1.33", "-1.42705, -30.1879, 13.4441, 1.47", "-2.14876, -30.8962, 13.748, 0.37", "-2.77256, -31.4473, 14.0383, 0.37", "-3.32531, -31.8214, 14.2276, 0.52", "-4.04841, -32.1653, 14.3759, 0.52", "-4.71682, -32.3804, 14.4378, 0.29", "-5.76493, -32.6411, 14.4905, 0.29", "-6.64639, -32.8039, 14.4753, 0.29", "-8.88647, -33.1098, 14.2669, 0.29", "-10.0405, -33.2087, 14.0765, 0.44", "-10.5981, -33.2262, 13.9373, 0.59", "-14.1468, -38.3251, 19.3219, 0.59", "-19.439, -43.0631, 23.5035, 0.59", "-26.1442, -46.6308, 26.8749, 0.59" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-54.719, 18.7368, 1.47396, 0.66", "-57.4771, 18.3886, -0.0320324, 0.66", "-58.4341, 18.2284, -0.510156, 0.66", "-59.4165, 18.0139, -0.961456, 0.44", "-60.9938, 17.6111, -1.60407, 0.22", "-62.3743, 17.2471, -2.10022, 0.96", "-63.2421, 17.0123, -2.37687, 1.47", "-64.3846, 16.6846, -2.62583, 1.62", "-65.5688, 16.354, -2.86347, 1.62", "-67.3465, 15.8871, -3.19621, 0.37", "-68.9305, 15.5102, -3.46962, 0.22", "-72.1827, 14.8247, -3.97549, 0.22", "-75.572, 14.2049, -4.43873, 0.22", "-76.922, 13.9963, -4.61371, 0.81", "-78.0307, 13.85, -4.75016, 0.81", "-80.868, 13.5038, -5.08171, 0.22", "-82.5516, 13.2913, -5.27419, 0.96", "-84.0639, 13.0988, -5.44192, 1.11", "-85.2491, 12.9405, -5.57885, 1.25", "-86.2885, 12.7929, -5.70473, 0.81", "-89.2299, 12.371, -6.07332, 0.22", "-91.225, 12.0877, -6.33413, 0.29", "-92.9781, 11.8337, -6.58195, 0.44", "-94.5657, 11.6079, -6.81572, 0.52", "-97.5712, 11.2274, -7.25542, 0.22", "-98.6672, 11.1188, -7.41886, 0.59", "-99.5381, 11.0589, -7.56268, 0.74", "-100.497, 11.0075, -7.73598, 0.22", "-103.091, 10.8515, -8.35038, 0.22", "-104.24, 10.761, -8.68054, 0.66", "-105.114, 10.6898, -8.96073, 0.96", "-106.291, 10.5935, -9.34872, 0.96", "-107.244, 10.5178, -9.63728, 0.96", "-110.179, 10.3347, -10.448, 0.22", "-111.259, 10.2893, -10.7294, 0.37", "-112.669, 10.2503, -11.0708, 0.37", "-113.342, 10.2499, -11.2156, 0.37", "-117.277, 10.3374, -11.9007, 0.15", "-118.738, 10.4268, -12.0642, 1.18", "-119.455, 10.5135, -12.0807, 1.4", "-119.991, 10.622, -12.0593, 1.4", "-120.938, 10.886, -11.9948, 1.18", "-121.602, 11.1225, -11.9428, 0.81", "-123.521, 12.0468, -11.7532, 0.22", "-124.649, 12.6464, -11.6497, 0.22", "-126.664, 13.7985, -11.3395, 0.29", "-127.639, 14.3967, -11.1487, 0.59", "-128.984, 15.2734, -10.8224, 1.11", "-129.701, 15.7744, -10.6209, 1.11", "-130.142, 16.1256, -10.4637, 0.88", "-131.836, 17.5549, -9.84882, 0.44", "-132.428, 18.0748, -9.62858, 0.59", "-133.126, 18.6984, -9.36633, 0.59", "-134.024, 19.495, -9.07358, 0.59", "-136.131, 21.2915, -8.51812, 0.15", "-140.33, 24.7756, -7.63363, 0.15", "-141.282, 25.5623, -7.4827, 0.66", "-141.922, 26.0906, -7.39319, 0.81", "-144.879, 28.5557, -7.0388, 0.22", "-146.792, 30.1519, -6.83087, 0.22", "-147.626, 30.8386, -6.74185, 0.59", "-148.201, 31.3323, -6.67431, 0.59", "-150.291, 33.2247, -6.40304, 0.22", "-150.892, 33.8057, -6.31567, 0.81", "-151.413, 34.3483, -6.23044, 1.03", "-151.608, 34.5698, -6.19527, 1.03", "-154.163, 37.6345, -5.70827, 0.22", "-154.931, 38.5905, -5.55692, 0.81", "-155.425, 39.249, -5.45232, 0.88", "-157.711, 42.4374, -4.94329, 0.22", "-159.783, 45.4747, -4.45112, 0.22", "-160.425, 46.479, -4.27482, 0.66", "-160.744, 47.049, -4.16535, 0.66", "-161.705, 48.9361, -3.78611, 0.29", "-162.084, 49.7915, -3.60773, 0.52", "-162.191, 50.1028, -3.53921, 0.52", "-162.728, 51.8142, -3.1545, 0.22", "-163.391, 54.002, -2.65708, 0.22", "-163.673, 54.9602, -2.43797, 0.22", "-163.983, 56.0391, -2.19091, 0.66", "-164.175, 56.7431, -2.03405, 0.66", "-164.32, 57.2854, -1.9226, 0.52" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-54.719, 18.7368, 1.47396, 0.29", "-55.769, 19.2123, 1.46935, 0.29", "-58.3714, 20.4637, 1.45542, 0.22", "-59.2358, 20.8793, 1.45079, 0.74", "-59.726, 21.115, 1.44816, 0.74", "-60.3218, 21.4015, 1.44497, 0.37", "-61.5076, 21.9717, 1.43863, 0.22", "-62.4709, 22.4313, 1.43359, 0.22", "-71.0331, 26.8918, 2.48154, 0.22" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "2.73662, 13.6435, -0.727436, 0.96", "4.80276, 14.8804, -1.64568, 0.96", "5.29161, 15.1974, -1.80502, 1.03", "5.7749, 15.5244, -1.93592, 0.74", "6.40667, 15.9712, -2.07655, 0.22", "7.55092, 16.821, -2.31351, 0.22", "8.30085, 17.3941, -2.47219, 0.88", "8.72475, 17.7591, -2.50763, 1.03", "9.22064, 18.2058, -2.55622, 0.81", "9.7336, 18.6714, -2.62562, 0.22", "10.33, 19.2117, -2.72825, 0.74", "10.5852, 19.4433, -2.77764, 1.18", "10.8772, 19.7185, -2.84373, 1.18", "11.3924, 20.23, -2.96292, 0.22", "11.6717, 20.5429, -3.03028, 0.29", "11.93, 20.8932, -3.13183, 0.29", "12.2741, 21.4363, -3.32848, 0.88", "12.5613, 21.9606, -3.55121, 1.03", "12.7275, 22.3181, -3.69251, 0.81", "13.0409, 23.0833, -3.99001, 0.29", "13.4797, 24.2989, -4.42767, 1.77", "13.6703, 24.8673, -4.61591, 2.21", "13.8672, 25.4408, -4.77096, 1.99", "14.2277, 26.4349, -4.95761, 1.25", "14.5417, 27.2523, -5.04965, 0.22", "14.7898, 27.8533, -5.08233, 0.81", "14.9436, 28.2083, -5.08366, 0.59", "15.6163, 29.7003, -5.08604, 0.22", "16.1502, 30.8106, -5.11633, 0.22", "16.6469, 31.8139, -5.19946, 0.22", "17.0545, 32.6097, -5.29561, 1.62", "17.1754, 32.8356, -5.33061, 2.06", "17.3953, 33.2329, -5.3971, 1.62", "17.6492, 33.6738, -5.48005, 1.11", "18.3375, 34.8154, -5.7185, 0.22", "19.0231, 35.882, -5.96996, 0.22", "19.5037, 36.6003, -6.1605, 0.22", "19.8059, 37.0386, -6.2984, 0.59", "19.9518, 37.2449, -6.37278, 0.59", "20.3655, 37.7459, -6.63099, 0.22", "21.1377, 38.4976, -7.16944, 1.77", "21.5112, 38.8341, -7.44303, 2.36", "21.9236, 39.1893, -7.71916, 3.02", "22.165, 39.3951, -7.85671, 3.02", "23.2938, 40.3433, -8.38963, 0.74", "23.7068, 40.6873, -8.566, 0.44", "24.605, 41.4259, -8.8875, 0.15", "25.703, 42.3626, -9.25712, 0.15", "26.2812, 42.8648, -9.4611, 1.4", "26.6296, 43.175, -9.60191, 1.62", "28.4383, 44.8526, -10.4736, 0.15", "29.3702, 45.7071, -11.0152, 0.15", "30.0828, 46.3475, -11.5225, 1.55", "30.6053, 46.7852, -12.0226, 1.99", "31.0852, 47.1421, -12.5746, 1.77", "31.7752, 47.5633, -13.5025, 0.96", "32.0473, 47.6494, -13.9649, 0.74", "32.5199, 47.589, -14.9346, 1.18", "33.5263, 46.8927, -17.2116, 0.88", "33.8887, 46.3973, -18.1245, 0.29", "34.0888, 45.9801, -18.6538, 1.18", "34.2731, 45.5098, -19.1094, 1.47", "34.6699, 44.4883, -19.9212, 0.22", "34.9422, 43.8394, -20.3255, 0.22", "35.1925, 43.3766, -20.5382, 1.62", "35.6412, 42.8575, -20.8245, 1.77", "36.3031, 42.3419, -21.1723, 0.22", "36.8257, 42.0782, -21.3813, 1.4", "37.3066, 41.9307, -21.541, 1.47", "37.8691, 41.8094, -21.7349, 0.81", "38.9702, 41.6333, -22.1198, 1.18", "39.5566, 41.5633, -22.3413, 0.66", "40.064, 41.5148, -22.5681, 1.4", "40.5448, 41.4754, -22.813, 1.4", "41.2089, 41.4333, -23.1663, 0.59" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "2.73662, 13.6435, -0.727436, 0.88", "3.15844, 14.2124, -0.75716, 0.88", "3.81103, 15.0601, -0.770801, 1.03", "4.38766, 15.8169, -0.741327, 1.25", "4.94798, 16.5526, -0.69013, 1.4", "5.73207, 17.5821, -0.618489, 1.62", "6.36035, 18.4071, -0.561083, 1.77", "6.6432, 18.7699, -0.511471, 2.21", "7.09555, 19.3386, -0.415798, 2.36", "7.44182, 19.7877, -0.322316, 2.73" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "10.6034, -37.6061, 0.0904597, 0.233668", "14.8144, -52.0028, 0.0904597, 0.233668", "19.0255, -66.3996, 0.0904597, 0.233668" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "35.8321, -8.32407, -10.7169, 0.81", "37.3567, -7.89515, -10.6899, 0.81", "38.6384, -7.52897, -10.8324, 0.96", "40.5857, -7.01767, -11.2023, 0.88", "41.5066, -6.83536, -11.5021, 1.18", "42.224, -6.72901, -11.7763, 1.18", "42.8275, -6.67815, -12.012, 1.18", "43.931, -6.61051, -12.5156, 1.11", "44.8927, -6.61019, -12.9891, 0.81", "46.4116, -6.74651, -13.8569, 0.66", "47.1312, -6.86654, -14.2629, 0.66", "48.0659, -7.07708, -14.7841, 0.66", "48.7565, -7.27082, -15.1607, 0.44", "49.6117, -7.53626, -15.5905, 1.03", "50.2356, -7.72697, -15.8949, 1.18", "50.8999, -7.90481, -16.1986, 1.18", "51.615, -8.07199, -16.5547, 0.96", "52.1668, -8.18096, -16.8368, 0.66", "52.8804, -8.29378, -17.1964, 0.52", "53.6015, -8.33982, -17.5879, 0.81", "54.4071, -8.28712, -18.0367, 0.81", "55.0384, -8.17608, -18.3891, 0.59", "55.7627, -7.99425, -18.7767, 0.44", "56.4022, -7.81652, -19.0956, 0.37", "56.991, -7.67729, -19.3622, 0.37", "57.6472, -7.58177, -19.6142, 0.74", "58.3752, -7.56928, -19.8269, 0.74", "59.0091, -7.65472, -19.9735, 0.74", "59.6776, -7.8947, -20.1449, 0.59", "60.4139, -8.29425, -20.3735, 0.59", "61.2366, -8.79495, -20.6093, 1.03", "61.8547, -9.18095, -20.779, 1.25", "62.3596, -9.49711, -20.9109, 1.4", "63.7811, -10.3176, -21.234, 0.88", "64.8214, -10.8003, -21.4314, 0.37", "65.8752, -11.1158, -21.7166, 0.29", "66.6858, -11.2508, -22.0273, 0.29", "67.1632, -11.307, -22.2763, 0.29", "68.2048, -11.4187, -22.9542, 0.52", "68.8638, -11.531, -23.4262, 0.66", "70.4796, -11.9343, -24.8193, 1.84", "71.3062, -12.1565, -25.6153, 3.32", "72.2393, -12.3717, -26.5594, 3.68", "72.9421, -12.4918, -27.2962, 3.54", "74.409, -12.6612, -28.8955, 1.25", "75.8046, -12.6609, -30.4395, 0.37", "76.5335, -12.5282, -31.2364, 0.22", "77.4266, -12.1783, -32.2207, 1.4", "77.7735, -11.9754, -32.6082, 1.62", "78.1012, -11.7414, -32.9809, 1.62", "79.3538, -10.692, -34.4789, 0.22", "80.2085, -9.99342, -35.4727, 0.22", "80.9718, -9.43059, -36.364, 0.22", "81.843, -8.86531, -37.3468, 1.4", "82.2461, -8.63847, -37.768, 1.84", "82.7764, -8.40275, -38.2423, 2.06", "83.0203, -8.31851, -38.4226, 2.28", "83.5574, -8.16809, -38.7813, 2.28", "85.4361, -7.7274, -39.984, 0.22", "86.4463, -7.51126, -40.5987, 0.22", "87.7753, -7.22973, -41.3826, 0.22", "88.9064, -6.99593, -42.019, 1.55", "89.5175, -6.87359, -42.3534, 1.77", "90.1943, -6.73102, -42.7092, 1.47", "90.7637, -6.58455, -42.9867, 0.81", "91.8575, -6.25348, -43.4955, 0.22", "92.621, -6.00149, -43.8481, 0.88", "93.2026, -5.79695, -44.1115, 0.96", "96.0328, -4.74097, -45.3378, 0.22", "97.9078, -3.96457, -46.1295, 0.22", "99.007, -3.46338, -46.5895, 1.33", "99.6083, -3.17248, -46.8384, 1.99", "100.233, -2.84169, -47.0978, 1.18", "100.946, -2.43925, -47.3943, 0.29", "104.101, -0.540928, -48.7104, 0.22", "104.654, -0.19569, -48.9455, 0.59", "105.106, 0.0919731, -49.1466, 0.59", "106.665, 1.09978, -49.8691, 0.22", "108.117, 2.0404, -50.5093, 0.22", "109.385, 2.87647, -51.052, 0.22", "110.601, 3.68424, -51.5507, 1.99", "111.166, 4.05996, -51.7754, 2.65", "111.776, 4.47325, -52.0119, 2.87", "113.381, 5.54409, -52.6043, 0.59", "114.325, 6.20309, -52.9589, 0.22", "115.048, 6.68069, -53.2544, 0.66", "115.465, 6.94153, -53.4352, 0.96", "115.922, 7.22013, -53.6445, 0.96", "116.413, 7.49478, -53.8824, 0.59", "118.405, 8.5579, -54.9378, 0.22", "120.423, 9.58983, -55.9777, 0.22", "121.241, 9.97763, -56.3875, 0.66", "122.023, 10.3122, -56.7914, 0.66", "123.498, 10.8909, -57.569, 0.22", "123.852, 11.0181, -57.7667, 0.96", "124.769, 11.2929, -58.2951, 1.18", "126.22, 11.6473, -59.258, 0.22", "127.443, 11.8804, -60.1742, 0.96", "128.046, 11.9564, -60.6734, 1.33", "129.033, 12.0235, -61.5657, 1.25", "130.013, 12.0064, -62.4618, 0.52", "131.348, 11.8704, -63.7001, 0.88", "131.812, 11.7673, -64.1295, 1.55", "132.266, 11.6164, -64.5151, 1.77", "132.674, 11.4242, -64.8576, 1.77", "133.851, 10.6912, -65.8181, 0.66", "134.52, 10.1436, -66.351, 0.52", "135.538, 9.17258, -67.0543, 0.37", "136.151, 8.49746, -67.4536, 1.03", "136.764, 7.71147, -67.8373, 1.92", "137.188, 7.08915, -68.0838, 1.92", "137.918, 5.86944, -68.4506, 0.22", "138.408, 5.0052, -68.6502, 0.22", "138.714, 4.49285, -68.737, 0.74", "139.128, 3.88455, -68.8415, 0.74", "139.683, 3.21233, -68.9773, 0.22", "140.029, 2.87176, -69.0869, 0.52", "140.477, 2.54561, -69.2615, 0.52", "141.835, 1.88773, -69.8924, 0.22", "142.68, 1.66478, -70.3164, 1.18", "143.115, 1.62511, -70.5368, 1.4", "143.778, 1.63816, -70.8914, 1.47", "144.682, 1.72284, -71.3917, 0.81", "145.922, 1.94705, -72.1343, 0.22", "146.394, 2.05227, -72.485, 0.22", "146.964, 2.13052, -72.9728, 0.81", "147.552, 2.16621, -73.5033, 1.03", "147.838, 2.16451, -73.7837, 1.03", "148.744, 2.12244, -74.7521, 0.44", "149.846, 2.12162, -75.9799, 0.81", "150.504, 2.17855, -76.7471, 0.37", "151.417, 2.33445, -77.7675, 1.99", "152.031, 2.47363, -78.3767, 1.99", "152.495, 2.59023, -78.8126, 1.4", "153.516, 2.87612, -79.743, 0.29", "154.106, 3.06371, -80.2681, 0.22", "154.95, 3.36048, -81.0968, 0.22", "156.09, 3.78843, -82.3116, 1.4", "156.751, 4.03165, -83.0085, 1.99", "157.369, 4.22514, -83.6501, 2.06", "157.738, 4.32313, -84.0173, 2.06", "158.639, 4.57539, -84.8491, 0.44", "159.365, 4.77914, -85.4772, 0.22", "159.959, 4.91932, -85.8862, 0.66", "160.758, 5.03489, -86.3062, 0.66", "161.45, 5.0562, -86.5971, 0.22", "162.142, 5.02392, -86.8433, 0.66", "162.634, 4.97181, -86.994, 1.11", "163.231, 4.89892, -87.1848, 1.11", "163.855, 4.84654, -87.4002, 1.11", "164.414, 4.82626, -87.6036, 0.88", "165.262, 4.83668, -87.9265, 0.22", "166.031, 4.87591, -88.2168, 0.96", "166.56, 4.92018, -88.4084, 1.11", "167.027, 4.9686, -88.567, 1.11", "167.585, 5.02887, -88.7385, 0.81", "169.094, 5.1647, -89.156, 0.15", "170.292, 5.18299, -89.4491, 0.15", "171.255, 5.12133, -89.6821, 0.74", "171.816, 5.05842, -89.8132, 0.81", "172.374, 4.97438, -89.9475, 0.81", "173.691, 4.72609, -90.2971, 0.22", "175.801, 4.24159, -90.9046, 0.22", "177.325, 3.83448, -91.3641, 0.66", "178.252, 3.53936, -91.6454, 0.66", "179.145, 3.20443, -91.9172, 0.66", "180.016, 2.77956, -92.18, 0.37", "180.611, 2.36102, -92.3395, 0.22", "181.063, 1.91329, -92.4252, 0.37", "181.675, 1.1171, -92.4594, 0.15", "182.013, 0.592067, -92.4513, 0.29", "182.733, -0.724443, -92.3396, 0.22", "183.307, -1.94721, -92.1682, 0.22", "183.495, -2.41933, -92.0973, 0.37", "183.682, -2.94563, -92.0191, 0.37" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "35.8321, -8.32407, -10.7169, 0.29", "34.8093, -7.57997, -11.966, 0.29", "34.5962, -7.40091, -12.2273, 0.29", "34.3331, -7.15369, -12.5861, 0.74", "34.2042, -7.02375, -12.7964, 0.74", "34.0654, -6.87141, -13.0896, 0.52", "33.925, -6.70802, -13.4339, 1.18", "33.8213, -6.53574, -13.8205, 1.18", "33.7481, -6.35836, -14.2637, 0.88", "33.692, -6.1376, -14.7969, 0.96", "33.6407, -5.89278, -15.3602, 0.74", "33.6318, -5.84316, -15.4607, 1.4", "33.5839, -5.57715, -15.8799, 1.55", "33.5026, -5.23107, -16.3209, 0.59", "33.4286, -4.95775, -16.6278, 0.44", "33.3238, -4.60828, -17.0112, 0.29", "33.2405, -4.33388, -17.2709, 0.29", "33.0879, -3.77379, -17.7677, 1.62", "33.0073, -3.45927, -18.0652, 1.84", "32.8295, -2.78838, -18.7034, 0.59", "32.7342, -2.45171, -19.0281, 0.59", "32.5309, -1.7687, -19.7141, 0.22", "32.2673, -0.896204, -20.6179, 0.22", "31.9804, 0.0613301, -21.6199, 0.22", "31.8123, 0.655775, -22.2129, 1.77", "31.7152, 0.988742, -22.5367, 2.36", "31.5688, 1.47335, -23.0339, 2.58", "31.5336, 1.57704, -23.1659, 2.58" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "-3.62254, -50.406, 4.26157, 0.52", "-3.11141, -51.7415, 2.986, 0.52", "-2.91262, -52.1995, 2.56824, 0.52", "-2.66752, -52.766, 2.08134, 0.74", "-2.3206, -53.585, 1.41523, 0.88", "-2.12146, -54.0649, 1.0335, 0.88", "-1.92416, -54.5376, 0.678294, 0.88", "-1.62196, -55.1719, 0.25068, 0.44", "-1.40769, -55.5991, -0.0225499, 0.44", "-1.18578, -55.999, -0.281007, 0.81", "-0.964162, -56.3308, -0.514979, 0.96", "-0.511365, -56.9496, -0.966753, 0.96", "0.0694949, -57.7342, -1.51439, 0.44", "0.540811, -58.3882, -1.95208, 0.44", "1.05998, -59.1588, -2.42795, 0.66", "1.54156, -59.9143, -2.88676, 0.66", "2.04299, -60.6849, -3.3123, 0.52", "2.53493, -61.4654, -3.72368, 0.81", "3.00599, -62.2569, -4.12485, 0.81", "3.69818, -63.4734, -4.68781, 0.52", "4.0909, -64.2217, -5.01328, 0.52", "4.7097, -65.459, -5.53365, 0.52", "5.06652, -66.1291, -5.8166, 1.47", "5.39045, -66.7325, -6.06961, 1.92", "5.78643, -67.52, -6.35818, 2.58", "6.04684, -68.1195, -6.53875, 2.58", "6.42857, -69.1741, -6.79494, 0.96", "6.69708, -70.1329, -7.00991, 0.52", "6.92128, -71.0508, -7.17797, 0.88", "7.12443, -72.0731, -7.33412, 0.88", "7.27954, -73.1065, -7.48235, 0.88", "7.36052, -73.8052, -7.56711, 0.74", "7.43365, -74.8651, -7.69865, 0.74", "7.45179, -75.8233, -7.86606, 1.11", "7.45471, -76.6269, -8.03795, 1.11", "7.44904, -77.3827, -8.22332, 0.81", "7.44302, -77.9524, -8.37253, 0.81", "7.4354, -79.0709, -8.68261, 0.74", "7.44278, -80.6184, -9.11768, 0.59", "7.47572, -82.1111, -9.54665, 0.44", "7.51245, -83.5266, -9.95984, 1.77", "7.52, -83.9743, -10.0854, 2.14", "7.51605, -84.9754, -10.3403, 1.62", "7.4706, -86.3307, -10.651, 0.22", "7.40348, -87.3263, -10.8515, 0.22", "7.30086, -88.2652, -11.0643, 0.96", "7.20867, -88.9672, -11.2345, 1.18", "7.09464, -89.7875, -11.4217, 0.96", "6.92228, -90.9709, -11.6648, 0.22", "6.78529, -91.8278, -11.8195, 0.59", "6.72831, -92.2379, -11.8822, 0.59", "6.65584, -92.9949, -11.9842, 0.22", "6.59692, -94.1443, -12.1292, 0.29", "6.58735, -94.7175, -12.1868, 0.29", "6.6047, -95.4843, -12.2028, 1.84", "6.63859, -96.2218, -12.1969, 2.5", "6.65477, -96.531, -12.1901, 2.73", "6.67935, -96.9949, -12.1768, 2.65", "6.74079, -98.0065, -12.1465, 1.77", "6.88193, -99.9362, -12.0918, 0.22", "7.0543, -101.935, -12.0379, 0.22", "7.13323, -102.819, -12.018, 0.52", "7.20365, -103.451, -12.0093, 0.66", "7.31286, -104.211, -12.0161, 0.29", "7.48572, -105.147, -12.059, 1.47", "7.59645, -105.643, -12.1089, 2.14", "7.73045, -106.114, -12.163, 2.21", "7.97943, -106.907, -12.2633, 1.55", "8.44664, -108.372, -12.4512, 0.22", "8.56761, -108.792, -12.509, 0.52", "8.67133, -109.21, -12.5662, 0.52", "9.02424, -110.903, -12.7793, 0.22", "9.09964, -111.324, -12.8314, 0.66", "9.16139, -111.823, -12.891, 0.66", "9.31958, -113.819, -13.1355, 0.22", "9.40368, -115.705, -13.3899, 0.22", "9.41293, -116.71, -13.5516, 0.81", "9.39715, -117.219, -13.6546, 1.03", "9.34852, -118.184, -13.9328, 0.22", "9.311, -118.905, -14.2136, 0.22", "9.29742, -119.753, -14.6297, 1.47", "9.34422, -120.398, -14.9896, 2.28", "9.43423, -120.912, -15.2864, 2.28", "10.0194, -123.16, -16.5918, 0.22", "10.3536, -124.207, -17.1533, 0.22", "10.7659, -125.4, -17.7287, 0.22", "11.2295, -126.681, -18.2622, 0.22", "11.5494, -127.547, -18.5659, 2.28", "11.8413, -128.339, -18.7857, 2.5", "12.5935, -130.452, -19.1744, 0.29", "12.7281, -130.96, -19.2523, 0.29", "12.879, -131.911, -19.3897, 1.55", "12.9143, -132.368, -19.4543, 2.06", "12.9281, -133.006, -19.5672, 1.69", "12.9164, -133.696, -19.7129, 0.88", "12.7973, -135.61, -20.1933, 0.22", "12.7501, -136.12, -20.3254, 0.66", "12.6902, -136.63, -20.4577, 0.66", "12.4319, -138.516, -20.9473, 0.22", "12.2224, -139.894, -21.2987, 0.22", "12.0606, -140.866, -21.5424, 0.22", "11.9674, -141.363, -21.6432, 0.44", "11.8207, -142.036, -21.771, 0.44", "11.5635, -143.046, -21.9312, 1.11", "11.4578, -143.404, -21.9771, 1.55", "11.2373, -144.052, -22.0647, 1.69", "10.5077, -146.024, -22.3788, 0.15", "9.55248, -148.43, -22.7905, 0.15", "8.99813, -149.756, -23.0308, 2.5", "8.76976, -150.291, -23.1309, 2.5", "8.11623, -151.814, -23.4407, 0.15", "7.89233, -152.365, -23.5703, 0.15", "7.72254, -152.836, -23.7124, 0.66", "7.61843, -153.242, -23.8409, 0.88", "7.53945, -153.746, -24.0053, 0.88", "7.50079, -154.197, -24.1244, 0.52", "7.41817, -155.58, -24.3377, 0.22", "7.33829, -156.412, -24.3963, 0.22", "7.23416, -157.172, -24.421, 0.96", "7.16896, -157.542, -24.4259, 1.11", "6.88583, -158.856, -24.4327, 0.22", "6.00043, -162.055, -24.4281, 0.22", "4.89161, -164.987, -24.3499, 0.22", "4.47781, -165.86, -24.3118, 1.47", "4.08811, -166.567, -24.2743, 1.62", "3.24005, -167.893, -24.1854, 0.22", "1.64842, -169.998, -24.0038, 0.22", "-0.523878, -172.368, -23.736, 0.22", "-1.77983, -173.568, -23.5783, 0.88", "-2.17163, -173.924, -23.524, 0.88", "-3.34988, -174.912, -23.3108, 0.22", "-3.88226, -175.311, -23.1994, 0.88", "-4.25619, -175.564, -23.1188, 0.88", "-6.04514, -176.691, -22.7636, 0.22", "-7.12717, -177.314, -22.5558, 0.22", "-8.28567, -177.889, -22.3431, 1.55", "-8.70597, -178.06, -22.2709, 2.06", "-9.48398, -178.33, -22.1421, 2.06", "-9.71905, -178.382, -22.1116, 2.06", "-10.806, -178.461, -22.0101, 0.22", "-11.9932, -178.454, -21.9446, 0.22", "-12.6819, -178.422, -21.9254, 0.74", "-13.0838, -178.385, -21.9097, 0.74", "-14.9431, -178.111, -21.8458, 0.15", "-15.4831, -178.014, -21.8363, 0.52", "-15.8145, -177.94, -21.8393, 0.52", "-16.7367, -177.693, -21.8685, 0.22", "-17.2707, -177.55, -21.9111, 0.66", "-17.9184, -177.383, -21.9744, 0.66", "-18.666, -177.195, -22.0547, 0.22", "-19.2143, -177.059, -22.1247, 1.18", "-19.7317, -176.932, -22.1992, 1.33", "-21.4607, -176.519, -22.4775, 0.22", "-22.0461, -176.399, -22.5721, 0.96", "-22.63, -176.298, -22.6603, 1.03" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "-3.62254, -50.406, 4.26157, 1.4", "-3.81138, -50.8331, 4.23732, 1.4", "-4.39806, -52.3443, 4.15375, 0.66", "-4.781, -53.4245, 4.10038, 0.66", "-5.1424, -54.5449, 4.04779, 0.66", "-5.40806, -55.4431, 4.04899, 0.59", "-5.72084, -56.5006, 4.05041, 0.59", "-5.95761, -57.4127, 4.06696, 0.59", "-6.11543, -58.1728, 4.11205, 0.96", "-6.24236, -58.9377, 4.16239, 1.18", "-6.40634, -60.1909, 4.26715, 1.33" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "7.44182, 19.7877, -0.322316, 1.4", "8.17263, 20.0414, 0.0175111, 1.4", "9.90547, 20.6041, 0.868599, 1.11", "10.5853, 20.8445, 1.21755, 0.81", "11.4112, 21.1812, 1.64151, 1.11", "12.3441, 21.6133, 2.10946, 0.74", "12.715, 21.8038, 2.29163, 0.74", "13.5492, 22.2468, 2.66806, 0.66", "14.1208, 22.5582, 2.89619, 0.66", "14.8641, 23.0198, 3.20645, 0.74", "15.4709, 23.4619, 3.46027, 0.74", "16.0248, 23.938, 3.69761, 0.59", "16.8205, 24.6506, 4.01546, 0.59", "17.7062, 25.4214, 4.33758, 0.74", "18.334, 25.9253, 4.55722, 0.74", "19.0526, 26.455, 4.80558, 0.74", "19.8104, 26.9818, 5.09001, 0.44", "20.5663, 27.4809, 5.3751, 0.44", "21.2732, 27.9445, 5.64073, 0.81", "21.8812, 28.3178, 5.85154, 1.11", "22.7663, 28.8449, 6.15259, 1.11", "23.637, 29.3916, 6.44192, 0.88", "24.3672, 29.8971, 6.70417, 0.88", "25.02, 30.4636, 6.98861, 0.74", "25.6236, 31.0946, 7.29769, 0.74", "26.2239, 31.7988, 7.6027, 0.59", "26.6951, 32.3995, 7.80967, 0.44", "27.112, 32.9761, 7.97553, 0.44", "27.6216, 33.7769, 8.21347, 0.44", "28.1236, 34.6439, 8.47416, 0.44", "28.6402, 35.5862, 8.77359, 0.44", "29.0505, 36.339, 9.02659, 0.59", "29.6358, 37.2965, 9.37933, 0.81", "30.0747, 37.9216, 9.63345, 1.25", "30.4532, 38.4056, 9.86133, 1.25", "31.1387, 39.2789, 10.3636, 0.74", "31.617, 39.878, 10.7762, 0.52", "32.0342, 40.354, 11.1181, 0.74", "32.5217, 40.8049, 11.4301, 0.74", "32.8831, 41.1431, 11.6102, 0.74", "33.3236, 41.6889, 11.7874, 0.44", "33.654, 42.3337, 11.901, 0.44", "33.8988, 43.0792, 12.0, 0.44", "34.0335, 43.6885, 12.0767, 0.44", "34.2355, 44.9138, 12.2289, 0.81", "34.4033, 46.0041, 12.3746, 0.81", "34.5506, 46.8707, 12.5077, 1.03", "34.7366, 47.5831, 12.6373, 0.74", "34.9881, 48.2583, 12.7795, 0.52", "35.352, 48.9389, 12.933, 0.52", "35.687, 49.3358, 13.028, 0.88", "36.0288, 49.6543, 13.1143, 0.88", "36.8811, 50.389, 13.3279, 0.37", "37.5387, 50.9559, 13.527, 0.37", "38.0946, 51.4715, 13.7474, 0.37", "38.4851, 51.8557, 13.9324, 0.37", "39.1105, 52.6891, 14.3654, 0.66", "39.3067, 53.1952, 14.6517, 1.03", "39.2546, 53.7174, 14.9935, 1.25", "39.1711, 53.9402, 15.1485, 1.25", "45.3879, 61.9494, 18.5465, 1.25" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "7.44182, 19.7877, -0.322316, 0.81", "7.24304, 20.9473, -0.0628888, 0.81", "7.1712, 21.4484, 0.0534345, 0.81", "7.10913, 21.9206, 0.169079, 0.81", "6.98318, 22.8486, 0.401773, 0.74", "6.88802, 23.4568, 0.579443, 0.74", "6.81056, 24.0186, 0.756317, 0.81", "6.79342, 24.3425, 0.874373, 0.81", "6.81505, 24.8095, 1.04333, 0.52", "6.85912, 25.1229, 1.15026, 0.52", "7.01921, 25.7593, 1.33699, 0.44", "7.19346, 26.1945, 1.40846, 0.37", "7.35184, 26.4813, 1.41293, 0.37", "7.83038, 27.2083, 1.32593, 1.25", "8.09302, 27.5819, 1.23632, 1.69", "8.33725, 27.9293, 1.12774, 1.55", "8.90028, 28.7547, 0.823197, 0.88", "9.21002, 29.2544, 0.630292, 0.37", "9.47615, 29.7103, 0.440939, 0.37", "9.65496, 30.0253, 0.300778, 0.37", "9.93548, 30.5856, 0.0684223, 0.81", "10.0903, 30.9224, -0.0560819, 1.03", "10.2307, 31.2285, -0.141832, 1.18", "10.3653, 31.5032, -0.217736, 1.18", "10.5594, 31.8729, -0.314329, 0.59", "10.8514, 32.3851, -0.460029, 0.29", "11.0419, 32.7261, -0.590678, 0.29", "11.4015, 33.391, -0.878091, 0.29", "11.7393, 34.0449, -1.17399, 0.66", "11.9315, 34.431, -1.36176, 0.66", "12.1584, 34.9152, -1.60594, 1.25", "12.588, 35.9041, -2.08135, 2.36", "12.7029, 36.2019, -2.21171, 2.58", "12.8961, 36.7618, -2.43543, 1.99", "13.0983, 37.415, -2.64521, 0.88", "13.3419, 38.2996, -2.83903, 0.29", "13.575, 39.2209, -2.95019, 0.81", "13.6966, 39.7237, -2.97293, 0.81", "13.7671, 40.0339, -2.97765, 0.44", "13.9134, 40.7237, -2.96536, 0.22", "14.1656, 41.9703, -2.91049, 0.22", "14.3245, 42.7393, -2.88587, 1.25", "14.3923, 43.0518, -2.88568, 1.69", "14.4527, 43.3197, -2.89587, 1.69", "14.5628, 43.7605, -2.92778, 0.96", "14.6881, 44.2259, -2.97838, 0.52", "14.9253, 45.0018, -3.08337, 0.29", "15.1576, 45.708, -3.18278, 0.29", "15.4182, 46.4624, -3.30171, 0.29", "15.5896, 46.9379, -3.39232, 0.81", "15.6984, 47.2316, -3.45854, 0.81", "16.0231, 48.0831, -3.67822, 0.22", "16.3385, 48.8591, -3.9088, 0.22", "16.6539, 49.5896, -4.14748, 1.69", "16.8693, 50.0743, -4.31499, 2.43", "17.0392, 50.4611, -4.44933, 2.28", "17.2868, 51.012, -4.63412, 0.96", "17.6307, 51.7745, -4.87025, 0.22", "17.8291, 52.2078, -4.98947, 0.66", "17.9461, 52.4558, -5.04632, 0.66", "18.3392, 53.2919, -5.20934, 0.22", "18.5957, 53.8389, -5.30561, 1.11", "18.793, 54.2709, -5.37944, 1.62", "18.9495, 54.5991, -5.43331, 1.99", "19.0605, 54.8214, -5.46931, 1.99", "19.3098, 55.2929, -5.54132, 1.4", "19.4993, 55.6311, -5.58952, 0.59", "20.0404, 56.5585, -5.70907, 0.22", "20.7127, 57.644, -5.82735, 0.22", "21.1409, 58.3067, -5.8909, 0.22", "21.4971, 58.8387, -5.93582, 0.74", "21.7017, 59.1302, -5.95856, 0.74", "21.9544, 59.4753, -5.98778, 0.37", "22.5671, 60.2647, -6.08025, 0.22", "23.1658, 60.9987, -6.20185, 1.25", "23.3366, 61.2006, -6.24284, 1.69", "23.5765, 61.4863, -6.3051, 1.69", "23.9163, 61.8961, -6.40397, 0.81", "24.5055, 62.6158, -6.60017, 0.22", "24.7751, 62.9506, -6.69915, 0.66", "24.993, 63.2186, -6.78036, 0.66", "25.5297, 63.8747, -6.98753, 0.22", "26.1913, 64.6632, -7.21792, 1.92", "26.4201, 64.9423, -7.28398, 2.36", "26.6947, 65.2861, -7.34699, 2.58", "26.945, 65.6064, -7.39824, 2.28", "27.231, 65.9944, -7.44573, 1.47", "27.9763, 67.0772, -7.53641, 0.15", "28.6238, 68.0632, -7.58059, 0.15", "29.0056, 68.6708, -7.59197, 0.66", "29.1326, 68.8831, -7.58944, 0.66", "30.0439, 70.4727, -7.5149, 0.22", "30.5399, 71.3545, -7.43557, 0.22", "30.9878, 72.1642, -7.3303, 0.22", "31.3687, 72.8217, -7.21457, 0.52", "31.7452, 73.4403, -7.07358, 0.22", "32.1543, 74.066, -6.89706, 1.4", "32.4255, 74.4036, -6.77899, 1.62", "32.5805, 74.5773, -6.71883, 1.62", "33.178, 75.2047, -6.52688, 0.22", "33.5047, 75.531, -6.44478, 0.66", "33.6895, 75.7139, -6.40999, 0.66", "34.9555, 77.0068, -6.22569, 0.15", "35.6108, 77.7061, -6.15525, 0.15", "36.0537, 78.2, -6.12757, 0.74", "36.2278, 78.4029, -6.12306, 1.03", "36.4105, 78.6302, -6.12493, 1.03", "37.243, 79.7396, -6.15422, 0.22", "37.922, 80.6296, -6.19984, 0.22", "38.4755, 81.296, -6.2465, 1.4", "38.7962, 81.6571, -6.27524, 1.69", "39.1216, 81.9967, -6.3055, 1.84", "39.5647, 82.4203, -6.34841, 1.11", "41.7003, 84.2426, -6.56652, 0.22", "42.1338, 84.5484, -6.60349, 0.22", "42.6314, 84.8284, -6.63601, 0.96", "42.9899, 84.9895, -6.65857, 1.18", "43.3222, 85.0999, -6.67207, 1.18", "43.6527, 85.1759, -6.67958, 0.59", "45.0572, 85.3395, -6.68973, 0.22", "45.9169, 85.4309, -6.68803, 0.59", "46.3472, 85.4749, -6.68462, 0.59", "47.8838, 85.6437, -6.67274, 0.15", "48.3674, 85.7036, -6.66919, 0.88", "48.8009, 85.7709, -6.666, 1.47", "49.0928, 85.8583, -6.66071, 1.47", "49.2867, 85.9511, -6.65762, 1.47", "50.2498, 86.5166, -6.64849, 0.15", "50.5655, 86.732, -6.64751, 0.44", "50.8902, 86.9733, -6.64499, 0.37", "52.8891, 88.5872, -6.61366, 0.22", "54.3013, 89.8204, -6.56537, 0.22", "54.6879, 90.1751, -6.54923, 0.96", "54.9718, 90.4567, -6.53372, 1.4", "55.0698, 90.5565, -6.52787, 1.4", "55.8578, 91.383, -6.4763, 0.22", "56.3075, 91.9348, -6.43885, 0.22" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "31.5336, 1.57704, -23.1659, 0.15", "32.7162, 0.405415, -25.0178, 0.15", "33.2584, -0.0853195, -25.7379, 1.18", "34.1648, -0.883368, -26.8431, 0.37", "34.9278, -1.58284, -27.7319, 0.74", "35.7841, -2.37214, -28.6186, 0.88", "36.4251, -2.99766, -29.2228, 0.22", "36.8261, -3.415, -29.577, 0.22", "37.2973, -3.91186, -29.9439, 0.96", "37.7966, -4.41142, -30.2717, 1.11", "38.6283, -5.24343, -30.7793, 0.22", "39.5224, -6.17091, -31.3641, 0.22", "39.9542, -6.70154, -31.7252, 0.96", "40.2982, -7.22441, -32.0877, 1.62", "40.4451, -7.52259, -32.2987, 1.62", "40.6682, -8.21952, -32.8157, 1.4", "40.8305, -9.08259, -33.4881, 1.18", "40.9081, -10.1194, -34.3034, 0.44", "40.898, -10.7702, -34.7879, 0.29", "40.842, -11.5289, -35.312, 0.88", "40.7607, -12.1687, -35.7339, 0.88" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "31.5336, 1.57704, -23.1659, 0.29", "32.4502, 2.95487, -24.6833, 0.29", "33.0559, 3.86541, -25.686, 0.29", "33.6918, 4.82124, -26.7387, 0.37", "34.3307, 5.78161, -27.7963, 0.81" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-6.40634, -60.1909, 4.26715, 0.59", "-6.28421, -61.2327, 3.94404, 0.59", "-6.27017, -61.8552, 3.76918, 0.74", "-6.28298, -62.3224, 3.65255, 0.96", "-6.31447, -62.8041, 3.55171, 1.11", "-6.36693, -63.3576, 3.45357, 1.11", "-6.43261, -63.9255, 3.36183, 0.81", "-6.54929, -64.7061, 3.28523, 0.29", "-6.62575, -65.1553, 3.22984, 0.29", "-6.7445, -65.8654, 3.13707, 0.59", "-6.80692, -66.2818, 3.08238, 0.96", "-6.85878, -66.7053, 3.02578, 1.11", "-6.92728, -67.3942, 2.94183, 0.59", "-7.00969, -68.3436, 2.82309, 0.29", "-7.07415, -69.1607, 2.72058, 0.29", "-7.11369, -69.6682, 2.64408, 0.29", "-7.20214, -70.7489, 2.47038, 0.29", "-7.24714, -71.2565, 2.39281, 0.52", "-7.29914, -71.7639, 2.32314, 0.66", "-7.38034, -72.4921, 2.23935, 1.11", "-7.46003, -73.192, 2.15487, 1.4", "-7.52463, -73.7505, 2.09109, 1.62", "-7.61039, -74.7265, 2.00836, 0.44", "-7.65774, -75.541, 1.95779, 0.44", "-7.68477, -76.2155, 1.93499, 0.44", "-7.69797, -76.7311, 1.93798, 0.66", "-7.70802, -77.3445, 1.97545, 0.66", "-7.72042, -78.0872, 2.02263, 0.37", "-7.73435, -78.7192, 2.06342, 0.37", "-7.74022, -78.9274, 2.07639, 0.59", "-7.76947, -79.5951, 2.10913, 0.59", "-7.84545, -80.641, 2.1117, 0.29", "-7.92432, -81.348, 2.08944, 0.74", "-8.00145, -81.856, 2.0632, 0.96", "-8.09005, -82.4123, 2.03154, 0.96", "-8.17878, -82.9405, 1.98886, 0.96", "-8.37843, -84.0775, 1.87702, 0.29", "-8.63812, -85.4907, 1.72465, 0.29", "-8.86551, -86.7005, 1.61038, 1.4", "-8.97023, -87.2598, 1.56277, 1.92", "-9.05989, -87.74, 1.52914, 2.28", "-9.19416, -88.4462, 1.49762, 2.28", "-9.31381, -89.008, 1.4811, 1.4", "-9.62008, -90.2601, 1.44843, 0.22", "-9.82298, -91.0026, 1.44521, 0.22", "-9.96895, -91.4978, 1.45559, 0.88", "-10.1119, -91.9681, 1.47759, 0.96", "-10.3598, -92.7251, 1.5125, 0.22", "-10.6451, -93.5596, 1.55056, 0.22", "-10.8965, -94.306, 1.58409, 0.74", "-10.9745, -94.5571, 1.59489, 1.03", "-11.072, -94.9545, 1.60899, 1.03", "-11.1383, -95.3182, 1.61705, 1.03", "-11.2015, -95.8285, 1.62578, 0.81", "-11.2788, -96.8106, 1.61753, 0.22", "-11.3044, -97.2826, 1.60705, 0.22", "-11.3323, -98.1828, 1.57455, 0.22", "-11.3271, -98.7614, 1.54641, 1.18", "-11.3065, -99.169, 1.52201, 1.77", "-11.2776, -99.5139, 1.49735, 1.99", "-11.202, -100.175, 1.44345, 1.47", "-10.9834, -101.73, 1.30621, 0.22", "-10.7168, -103.428, 1.12633, 0.22", "-10.5707, -104.284, 1.02675, 0.59", "-10.4752, -104.83, 0.957803, 1.03", "-10.4075, -105.233, 0.90385, 1.25", "-10.356, -105.551, 0.854737, 1.47", "-10.1512, -106.869, 0.652191, 0.22", "-10.0494, -107.558, 0.547871, 0.66", "-10.0117, -107.813, 0.510676, 0.96", "-9.92488, -108.373, 0.430863, 0.96", "-9.7301, -109.558, 0.265453, 0.22", "-9.31407, -111.785, -0.0389339, 0.22", "-9.17808, -112.412, -0.118698, 0.88", "-9.11547, -112.662, -0.152498, 1.11", "-9.04381, -112.909, -0.188333, 1.33", "-8.90043, -113.325, -0.245358, 0.96", "-8.67269, -113.872, -0.276626, 0.44", "-8.13748, -115.018, -0.268562, 0.22", "-7.85819, -115.62, -0.235816, 0.66", "-7.64026, -116.091, -0.197916, 0.88", "-7.26371, -116.896, -0.105273, 0.22", "-6.55256, -118.411, 0.133454, 0.22", "-6.38265, -118.819, 0.221031, 0.22", "-6.20985, -119.354, 0.34449, 1.62", "-6.08462, -119.961, 0.477625, 2.5", "-6.06738, -120.228, 0.512779, 2.73", "-6.08655, -120.455, 0.514264, 2.73", "-6.31866, -121.541, 0.353338, 1.25", "-6.56996, -122.581, 0.12356, 0.29", "-6.66358, -122.967, 0.0180757, 0.29", "-6.87245, -123.91, -0.281047, 0.66", "-6.93467, -124.209, -0.385374, 1.11", "-7.05498, -124.796, -0.595702, 1.25", "-7.132, -125.223, -0.74463, 1.25", "-7.25709, -125.921, -0.923394, 1.03", "-7.42413, -126.772, -1.09125, 0.22", "-7.49881, -127.124, -1.1309, 0.22", "-7.66873, -127.722, -1.18563, 0.22", "-7.97321, -128.619, -1.24581, 1.84", "-8.23333, -129.297, -1.28527, 3.32", "-8.45494, -129.813, -1.30722, 3.54", "-8.70004, -130.341, -1.31575, 2.8", "-9.35132, -131.733, -1.32077, 0.29", "-9.5154, -132.066, -1.31434, 0.81", "-9.69291, -132.392, -1.29427, 0.88", "-10.1262, -133.136, -1.21588, 0.22", "-10.518, -133.77, -1.14395, 0.22", "-10.8329, -134.268, -1.08942, 0.88", "-11.0457, -134.602, -1.04987, 1.25", "-11.2511, -134.921, -1.02291, 1.25", "-11.5803, -135.463, -1.00087, 0.59", "-12.188, -136.565, -1.00336, 0.22", "-12.3754, -136.932, -1.01356, 0.74", "-12.5509, -137.274, -1.03604, 0.74", "-12.6635, -137.492, -1.05283, 0.52", "-13.1537, -138.464, -1.12989, 0.22", "-13.3572, -138.885, -1.16994, 1.03", "-13.4685, -139.123, -1.1972, 1.25", "-13.9696, -140.32, -1.39081, 0.22", "-14.1778, -140.919, -1.5188, 0.22", "-14.2948, -141.3, -1.62023, 0.59", "-14.4182, -141.778, -1.78916, 0.59", "-14.5275, -142.486, -2.08886, 0.22", "-14.5837, -143.556, -2.59296, 0.22", "-14.5509, -144.123, -2.88676, 1.03", "-14.4978, -144.477, -3.07822, 1.33", "-14.3645, -144.95, -3.33292, 1.33", "-13.8676, -146.151, -3.97854, 0.22", "-13.7235, -146.42, -4.1244, 0.52", "-13.5941, -146.625, -4.24063, 0.52", "-12.6653, -147.797, -4.92171, 0.22", "-11.5659, -148.942, -5.60121, 0.22", "-11.0779, -149.385, -5.86571, 1.47", "-10.7494, -149.658, -6.03037, 2.21", "-10.339, -149.992, -6.22947, 1.62", "-8.6121, -151.372, -7.04378, 0.29", "-7.59187, -152.207, -7.53177, 0.29", "-6.52047, -153.211, -8.0657, 0.22", "-5.99172, -153.78, -8.33634, 1.03", "-5.84205, -153.96, -8.41636, 1.25", "-5.6055, -154.277, -8.54719, 1.25", "-4.77106, -155.684, -9.06973, 0.29", "-3.8636, -157.462, -9.67854, 0.22", "-3.46861, -158.315, -9.95163, 1.92", "-3.28707, -158.722, -10.0759, 2.36", "-3.10217, -159.147, -10.198, 2.58", "-2.41084, -160.92, -10.6469, 0.22", "-2.20088, -161.583, -10.7806, 0.22", "-2.04378, -162.259, -10.8892, 0.22", "-1.96512, -162.692, -10.9463, 0.74", "-1.9244, -163.018, -10.9777, 0.88", "-1.88971, -164.107, -11.045, 0.22", "-1.91859, -164.57, -11.0556, 0.22", "-1.97947, -165.13, -11.0589, 0.81", "-2.05046, -165.608, -11.0481, 0.96", "-2.08931, -165.828, -11.0383, 0.96", "-2.42368, -167.599, -10.9413, 0.22", "-2.51685, -168.104, -10.9129, 0.66", "-2.5714, -168.402, -10.896, 0.66", "-3.18276, -171.63, -10.7005, 0.22", "-3.56779, -173.584, -10.5709, 0.22", "-3.65896, -174.048, -10.5378, 0.44" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-6.40634, -60.1909, 4.26715, 0.29", "-7.44663, -61.6534, 4.05186, 0.29", "-8.47418, -63.0016, 3.98729, 0.29", "-8.99215, -63.627, 3.97633, 0.44", "-9.93706, -64.7072, 3.96509, 0.22", "-10.3439, -65.1648, 3.96057, 0.52", "-10.7528, -65.6238, 3.95552, 0.66", "-12.163, -67.1611, 3.95929, 0.22", "-13.1009, -68.1222, 3.96536, 0.22", "-14.0823, -69.068, 3.94671, 0.22", "-14.8689, -69.7687, 3.90985, 0.66", "-15.3596, -70.1701, 3.8692, 0.96", "-16.0033, -70.6602, 3.78317, 0.96", "-16.7858, -71.1956, 3.62687, 0.52", "-18.1068, -72.0297, 3.36366, 0.22", "-18.6266, -72.3197, 3.25769, 0.66", "-19.7084, -72.8612, 3.03427, 0.66", "-20.6734, -73.332, 2.82455, 0.29", "-21.6687, -73.8017, 2.59743, 0.29", "-22.1039, -74.0108, 2.4946, 0.59", "-22.8861, -74.3829, 2.30113, 0.59", "-23.7557, -74.7999, 2.05582, 0.59", "-25.5608, -75.6533, 1.47641, 0.22", "-27.1517, -76.431, 0.896358, 0.22", "-28.6919, -77.1824, 0.391537, 0.22", "-30.0463, -77.8028, 0.00520718, 0.22", "-31.2754, -78.3632, -0.306067, 0.88", "-32.1408, -78.7685, -0.508857, 1.18", "-33.111, -79.2365, -0.643982, 1.18", "-35.8013, -80.6656, -0.764102, 0.22", "-38.2862, -82.1495, -0.630851, 0.22", "-39.022, -82.6594, -0.517479, 0.59", "-39.7551, -83.2402, -0.344839, 0.59", "-41.597, -84.8612, 0.149207, 0.37", "-42.2114, -85.4571, 0.3121, 0.88", "-42.9751, -86.3294, 0.460913, 1.03", "-43.4036, -86.8302, 0.521112, 1.03", "-44.5264, -87.9926, 0.537206, 0.29", "-45.3877, -88.7659, 0.444952, 0.44", "-46.1083, -89.3729, 0.273675, 0.66", "-47.4562, -90.3918, -0.0636421, 0.29", "-48.2388, -90.9138, -0.271406, 0.52", "-48.7198, -91.2045, -0.407169, 0.59", "-49.3192, -91.5309, -0.596438, 0.59", "-57.924, -101.031, -2.08976, 0.59" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_23", "dend_22", "dend_15", "dend_8", "dend_5", "dend_0", "dend_17", "dend_16", "dend_10", "dend_9", "dend_7", "dend_6", "dend_4", "dend_1", "dend_21", "dend_18", "dend_14", "dend_11", "dend_3", "dend_2", "dend_20", "dend_19", "dend_13", "dend_12" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_23", "dend_22", "dend_15", "dend_8", "dend_5", "dend_0", "dend_17", "dend_16", "dend_10", "dend_9", "dend_7", "dend_6", "dend_4", "dend_1", "dend_21", "dend_18", "dend_14", "dend_11", "dend_3", "dend_2", "dend_20", "dend_19", "dend_13", "dend_12" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_15", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_19", "dend_19", "dend_19", "dend_19", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.2499998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dNAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dNAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate dNAC222_L4_LBC_f6a71a338d_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_23, id: dend_23, parent: soma_0
create dend_23
public dend_23
// Section: dend_22, id: dend_22, parent: soma_0
create dend_22
public dend_22
// Section: dend_15, id: dend_15, parent: soma_0
create dend_15
public dend_15
// Section: dend_8, id: dend_8, parent: soma_0
create dend_8
public dend_8
// Section: dend_5, id: dend_5, parent: soma_0
create dend_5
public dend_5
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_17, id: dend_17, parent: dend_15
create dend_17
public dend_17
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_4, id: dend_4, parent: dend_0
create dend_4
public dend_4
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_21, id: dend_21, parent: dend_17
create dend_21
public dend_21
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_14, id: dend_14, parent: dend_10
create dend_14
public dend_14
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_3, id: dend_3, parent: dend_1
create dend_3
public dend_3
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_20, id: dend_20, parent: dend_18
create dend_20
public dend_20
// Section: dend_19, id: dend_19, parent: dend_18
create dend_19
public dend_19
// Section: dend_13, id: dend_13, parent: dend_11
create dend_13
public dend_13
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_23, dend_22, dend_15, dend_8, dend_5, dend_0, dend_17, dend_16, dend_10, dend_9, dend_7, dend_6, dend_4, dend_1, dend_21, dend_18, dend_14, dend_11, dend_3, dend_2, dend_20, dend_19, dend_13, dend_12]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_23, dend_22, dend_15, dend_8, dend_5, dend_0, dend_17, dend_16, dend_10, dend_9, dend_7, dend_6, dend_4, dend_1, dend_21, dend_18, dend_14, dend_11, dend_3, dend_2, dend_20, dend_19, dend_13, dend_12]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_24
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_15, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_19, dend_19, dend_19, dend_19, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dNAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dNAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_23(0), soma_0(0.4499997984545444)
    connect dend_22(0), soma_0(0.4499997984545444)
    connect dend_15(0), soma_0(0.4499997984545444)
    connect dend_8(0), soma_0(0.4499997984545444)
    connect dend_5(0), soma_0(0.4499997984545444)
    connect dend_0(0), soma_0(0.4499997984545444)
    connect axon_0(0), soma_0(1.0)
    connect dend_17(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_4(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_21(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_14(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_3(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_20(0), dend_18(1.0)
    connect dend_19(0), dend_18(1.0)
    connect dend_13(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -3.05395, 9.08547, -0.234601, 2.54687 ) }
    soma_0 { pt3dadd( -2.79219, 8.19057, -0.218348, 4.32292 ) }
    soma_0 { pt3dadd( -2.53043, 7.29567, -0.202095, 9.95036 ) }
    soma_0 { pt3dadd( -2.26867, 6.40077, -0.185842, 10.1502 ) }
    soma_0 { pt3dadd( -2.00691, 5.50587, -0.169589, 10.462 ) }
    soma_0 { pt3dadd( -1.74515, 4.61097, -0.153336, 10.4262 ) }
    soma_0 { pt3dadd( -1.48339, 3.71607, -0.137083, 10.5866 ) }
    soma_0 { pt3dadd( -1.22164, 2.82117, -0.12083, 10.9135 ) }
    soma_0 { pt3dadd( -0.959876, 1.92627, -0.104577, 11.2266 ) }
    soma_0 { pt3dadd( -0.698117, 1.03137, -0.0883238, 11.5453 ) }
    soma_0 { pt3dadd( -0.436358, 0.136465, -0.0720707, 11.9293 ) }
    soma_0 { pt3dadd( -0.174598, -0.758436, -0.0558177, 12.2062 ) }
    soma_0 { pt3dadd( 0.0871607, -1.65334, -0.0395646, 12.3612 ) }
    soma_0 { pt3dadd( 0.34892, -2.54824, -0.0233116, 12.3583 ) }
    soma_0 { pt3dadd( 0.610679, -3.44314, -0.00705855, 12.2953 ) }
    soma_0 { pt3dadd( 0.872438, -4.33804, 0.0091945, 11.8309 ) }
    soma_0 { pt3dadd( 1.1342, -5.23294, 0.0254475, 11.1435 ) }
    soma_0 { pt3dadd( 1.39596, -6.12784, 0.0417006, 10.0426 ) }
    soma_0 { pt3dadd( 1.65772, -7.02274, 0.0579536, 8.49572 ) }
    soma_0 { pt3dadd( 1.91947, -7.91764, 0.0742067, 6.62324 ) }
    soma_0 { pt3dadd( 2.18123, -8.81254, 0.0904597, 3.82196 ) }
    // Section: dend_23, id: dend_23, parent: soma_0 (entry count 21/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( -3.18195, -5.17787, -7.31829, 0.81 ) }
    dend_23 { pt3dadd( -3.48557, -5.60308, -7.1949, 0.81 ) }
    dend_23 { pt3dadd( -3.79308, -6.09542, -7.08477, 0.81 ) }
    dend_23 { pt3dadd( -4.20331, -6.85481, -6.95242, 0.52 ) }
    dend_23 { pt3dadd( -4.6633, -7.76052, -6.82777, 0.44 ) }
    dend_23 { pt3dadd( -4.99287, -8.42271, -6.75293, 0.29 ) }
    dend_23 { pt3dadd( -5.1901, -8.8112, -6.71622, 0.74 ) }
    dend_23 { pt3dadd( -5.48548, -9.43048, -6.67709, 0.74 ) }
    dend_23 { pt3dadd( -5.73307, -10.0003, -6.66311, 0.59 ) }
    dend_23 { pt3dadd( -6.04343, -10.7773, -6.67868, 1.03 ) }
    dend_23 { pt3dadd( -6.2642, -11.3853, -6.69991, 1.03 ) }
    dend_23 { pt3dadd( -6.53386, -12.2213, -6.71646, 0.74 ) }
    dend_23 { pt3dadd( -6.65829, -12.6842, -6.72595, 0.44 ) }
    dend_23 { pt3dadd( -6.81586, -13.4234, -6.74421, 1.4 ) }
    dend_23 { pt3dadd( -6.89537, -14.0409, -6.76343, 1.62 ) }
    dend_23 { pt3dadd( -6.91899, -14.6672, -6.78724, 1.77 ) }
    dend_23 { pt3dadd( -6.88725, -15.746, -6.83375, 1.11 ) }
    dend_23 { pt3dadd( -6.82692, -16.4933, -6.87336, 0.29 ) }
    dend_23 { pt3dadd( -6.74796, -17.298, -6.92037, 0.29 ) }
    dend_23 { pt3dadd( -6.622, -18.4053, -6.99598, 0.44 ) }
    dend_23 { pt3dadd( -6.52316, -19.2242, -7.06391, 0.59 ) }
    dend_23 { pt3dadd( -6.43616, -19.9691, -7.14742, 0.81 ) }
    dend_23 { pt3dadd( -6.31405, -21.1903, -7.31509, 0.22 ) }
    dend_23 { pt3dadd( -6.25955, -21.9887, -7.43647, 1.33 ) }
    dend_23 { pt3dadd( -6.23252, -22.815, -7.56605, 2.06 ) }
    dend_23 { pt3dadd( -6.2323, -23.3155, -7.64796, 2.14 ) }
    dend_23 { pt3dadd( -6.25201, -24.2686, -7.8154, 1.62 ) }
    dend_23 { pt3dadd( -6.31813, -26.0039, -8.1612, 0.22 ) }
    dend_23 { pt3dadd( -6.40961, -27.8592, -8.57718, 0.22 ) }
    dend_23 { pt3dadd( -6.44505, -28.8765, -8.8209, 1.11 ) }
    dend_23 { pt3dadd( -6.4631, -29.647, -9.00757, 1.33 ) }
    dend_23 { pt3dadd( -6.46664, -30.1877, -9.13869, 1.18 ) }
    dend_23 { pt3dadd( -6.45541, -30.9684, -9.33663, 0.96 ) }
    dend_23 { pt3dadd( -6.41721, -31.8049, -9.57353, 0.22 ) }
    dend_23 { pt3dadd( -6.29379, -33.796, -10.1748, 0.22 ) }
    dend_23 { pt3dadd( -6.25531, -34.4481, -10.3665, 0.88 ) }
    dend_23 { pt3dadd( -6.24745, -34.6505, -10.4206, 1.18 ) }
    dend_23 { pt3dadd( -6.2575, -35.1192, -10.5213, 1.33 ) }
    dend_23 { pt3dadd( -6.31294, -35.7906, -10.6364, 1.03 ) }
    dend_23 { pt3dadd( -6.51707, -37.1027, -10.8407, 0.22 ) }
    dend_23 { pt3dadd( -6.65237, -37.6584, -10.9343, 0.44 ) }
    dend_23 { pt3dadd( -6.74578, -38.0078, -10.9972, 0.44 ) }
    dend_23 { pt3dadd( -7.2664, -39.7838, -11.3549, 0.22 ) }
    dend_23 { pt3dadd( -7.43731, -40.3125, -11.4703, 0.44 ) }
    dend_23 { pt3dadd( -7.65181, -40.9254, -11.6165, 0.44 ) }
    dend_23 { pt3dadd( -8.57479, -43.3338, -12.3486, 0.22 ) }
    dend_23 { pt3dadd( -9.10305, -44.579, -12.8151, 1.77 ) }
    dend_23 { pt3dadd( -9.32474, -45.0418, -13.0172, 2.36 ) }
    dend_23 { pt3dadd( -9.55581, -45.457, -13.234, 2.36 ) }
    dend_23 { pt3dadd( -10.0635, -46.2575, -13.684, 1.4 ) }
    dend_23 { pt3dadd( -10.9281, -47.4485, -14.4072, 0.52 ) }
    dend_23 { pt3dadd( -11.5969, -48.2421, -14.9459, 0.22 ) }
    dend_23 { pt3dadd( -11.9563, -48.6948, -15.2811, 0.66 ) }
    dend_23 { pt3dadd( -12.5519, -49.681, -15.885, 0.22 ) }
    dend_23 { pt3dadd( -12.8233, -50.2275, -16.1846, 1.33 ) }
    dend_23 { pt3dadd( -13.014, -50.6987, -16.4038, 1.62 ) }
    dend_23 { pt3dadd( -13.1608, -51.149, -16.5805, 1.62 ) }
    dend_23 { pt3dadd( -13.8269, -53.6583, -17.4186, 0.22 ) }
    dend_23 { pt3dadd( -14.5018, -56.7252, -18.2897, 0.22 ) }
    dend_23 { pt3dadd( -14.6899, -57.6954, -18.5441, 0.59 ) }
    dend_23 { pt3dadd( -14.9744, -59.3172, -18.9406, 0.22 ) }
    dend_23 { pt3dadd( -15.1417, -60.3345, -19.1541, 1.4 ) }
    dend_23 { pt3dadd( -15.3073, -61.3717, -19.3084, 1.92 ) }
    dend_23 { pt3dadd( -15.4182, -62.1787, -19.3035, 1.92 ) }
    // Section: dend_22, id: dend_22, parent: soma_0 (entry count 85/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( -4.68195, -3.24937, 2.62171, 1.92 ) }
    dend_22 { pt3dadd( -4.84513, -3.74223, 2.6658, 1.92 ) }
    dend_22 { pt3dadd( -5.0406, -5.03085, 2.71812, 1.25 ) }
    dend_22 { pt3dadd( -5.08945, -5.8314, 2.72989, 0.88 ) }
    dend_22 { pt3dadd( -5.10341, -6.66495, 2.73699, 1.11 ) }
    dend_22 { pt3dadd( -5.10767, -7.34744, 2.74387, 1.47 ) }
    dend_22 { pt3dadd( -5.12204, -7.91444, 2.75051, 1.69 ) }
    dend_22 { pt3dadd( -5.12253, -9.14651, 2.76387, 1.69 ) }
    dend_22 { pt3dadd( -5.12147, -9.82047, 2.76961, 1.4 ) }
    dend_22 { pt3dadd( -5.19393, -10.5375, 2.77211, 1.4 ) }
    dend_22 { pt3dadd( -5.41831, -11.2433, 2.78156, 1.11 ) }
    dend_22 { pt3dadd( -5.69649, -11.7648, 2.79523, 0.74 ) }
    dend_22 { pt3dadd( -5.98964, -12.1688, 2.81632, 0.74 ) }
    dend_22 { pt3dadd( -6.42906, -12.6367, 2.88386, 1.11 ) }
    dend_22 { pt3dadd( -6.8476, -13.0348, 2.95939, 1.11 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_22 { pt3dadd( -7.4394, -13.5706, 3.07395, 0.81 ) }
    dend_22 { pt3dadd( -7.93671, -14.0232, 3.19881, 1.25 ) }
    dend_22 { pt3dadd( -8.33233, -14.3933, 3.31553, 1.47 ) }
    dend_22 { pt3dadd( -8.73881, -14.7641, 3.43698, 1.62 ) }
    dend_22 { pt3dadd( -9.24459, -15.2067, 3.58256, 1.33 ) }
    dend_22 { pt3dadd( -9.8355, -15.6598, 3.72828, 0.74 ) }
    dend_22 { pt3dadd( -10.4462, -16.0323, 3.84461, 0.52 ) }
    dend_22 { pt3dadd( -11.0216, -16.2975, 3.93175, 0.66 ) }
    dend_22 { pt3dadd( -11.9257, -16.6119, 4.02481, 0.66 ) }
    dend_22 { pt3dadd( -12.4926, -16.7564, 4.05745, 0.66 ) }
    dend_22 { pt3dadd( -13.3346, -16.9132, 4.06537, 0.88 ) }
    dend_22 { pt3dadd( -13.98, -17.0031, 4.03352, 0.81 ) }
    dend_22 { pt3dadd( -14.7, -17.0961, 3.94681, 0.52 ) }
    dend_22 { pt3dadd( -15.0909, -17.1599, 3.8784, 0.52 ) }
    dend_22 { pt3dadd( -15.555, -17.255, 3.77056, 0.52 ) }
    dend_22 { pt3dadd( -16.3569, -17.4506, 3.55289, 0.88 ) }
    dend_22 { pt3dadd( -16.9034, -17.5941, 3.39307, 0.88 ) }
    dend_22 { pt3dadd( -17.3722, -17.7223, 3.25685, 0.88 ) }
    dend_22 { pt3dadd( -18.0138, -17.8903, 3.08171, 0.74 ) }
    dend_22 { pt3dadd( -18.6426, -18.0361, 2.92447, 0.59 ) }
    dend_22 { pt3dadd( -19.2685, -18.153, 2.78261, 0.81 ) }
    dend_22 { pt3dadd( -20.076, -18.2739, 2.62011, 0.81 ) }
    dend_22 { pt3dadd( -20.7661, -18.3588, 2.49774, 1.03 ) }
    dend_22 { pt3dadd( -21.464, -18.4322, 2.37652, 1.25 ) }
    dend_22 { pt3dadd( -21.7689, -18.4649, 2.34558, 1.25 ) }
    dend_22 { pt3dadd( -22.4696, -18.5831, 2.3155, 0.66 ) }
    dend_22 { pt3dadd( -23.1495, -18.7603, 2.31036, 0.66 ) }
    dend_22 { pt3dadd( -23.7715, -19.0119, 2.33136, 0.81 ) }
    dend_22 { pt3dadd( -24.028, -19.1611, 2.36621, 0.81 ) }
    dend_22 { pt3dadd( -25.0321, -19.9256, 2.61019, 0.37 ) }
    dend_22 { pt3dadd( -25.3473, -20.1947, 2.71756, 0.29 ) }
    dend_22 { pt3dadd( -25.7322, -20.5605, 2.88625, 0.29 ) }
    dend_22 { pt3dadd( -26.0097, -20.8347, 3.01937, 0.29 ) }
    dend_22 { pt3dadd( -26.6519, -21.4231, 3.29436, 0.74 ) }
    dend_22 { pt3dadd( -27.0323, -21.7376, 3.4157, 1.25 ) }
    dend_22 { pt3dadd( -27.3516, -21.9765, 3.47653, 1.25 ) }
    dend_22 { pt3dadd( -27.6357, -22.1714, 3.53131, 1.25 ) }
    dend_22 { pt3dadd( -27.8581, -22.3192, 3.57621, 1.25 ) }
    dend_22 { pt3dadd( -28.5044, -22.7665, 3.69543, 0.52 ) }
    dend_22 { pt3dadd( -28.9619, -23.1352, 3.7551, 1.03 ) }
    dend_22 { pt3dadd( -29.153, -23.3242, 3.78116, 1.33 ) }
    dend_22 { pt3dadd( -29.4385, -23.6678, 3.82225, 1.55 ) }
    dend_22 { pt3dadd( -29.6275, -23.947, 3.85849, 1.55 ) }
    dend_22 { pt3dadd( -29.7349, -24.156, 3.88936, 1.55 ) }
    dend_22 { pt3dadd( -29.9165, -24.7094, 3.98618, 1.03 ) }
    dend_22 { pt3dadd( -30.0732, -25.3007, 4.10847, 0.44 ) }
    dend_22 { pt3dadd( -30.1184, -25.4764, 4.15094, 0.44 ) }
    dend_22 { pt3dadd( -30.2163, -25.8006, 4.26144, 0.29 ) }
    dend_22 { pt3dadd( -30.3005, -26.0322, 4.35627, 0.29 ) }
    dend_22 { pt3dadd( -30.4631, -26.3856, 4.52301, 0.29 ) }
    dend_22 { pt3dadd( -30.6824, -26.8107, 4.75394, 0.29 ) }
    dend_22 { pt3dadd( -30.89, -27.1668, 4.97466, 0.29 ) }
    dend_22 { pt3dadd( -31.2594, -27.825, 5.37278, 0.44 ) }
    dend_22 { pt3dadd( -31.4655, -28.1954, 5.5974, 0.66 ) }
    dend_22 { pt3dadd( -31.8261, -28.8509, 5.97799, 0.74 ) }
    dend_22 { pt3dadd( -32.2233, -29.5763, 6.39095, 0.66 ) }
    dend_22 { pt3dadd( -32.6114, -30.28, 6.81604, 0.29 ) }
    dend_22 { pt3dadd( -32.9358, -30.8388, 7.16228, 0.22 ) }
    dend_22 { pt3dadd( -33.2918, -31.3577, 7.48979, 0.22 ) }
    dend_22 { pt3dadd( -33.5659, -31.709, 7.70987, 0.74 ) }
    dend_22 { pt3dadd( -33.7258, -31.9029, 7.82431, 0.74 ) }
    dend_22 { pt3dadd( -34.23, -32.5018, 8.15707, 0.59 ) }
    dend_22 { pt3dadd( -34.6217, -32.96, 8.40497, 0.66 ) }
    dend_22 { pt3dadd( -35.1892, -33.5646, 8.74612, 0.22 ) }
    dend_22 { pt3dadd( -35.616, -33.9971, 8.98102, 0.22 ) }
    dend_22 { pt3dadd( -35.9903, -34.3534, 9.18608, 0.37 ) }
    dend_22 { pt3dadd( -36.2946, -34.6568, 9.33996, 0.37 ) }
    dend_22 { pt3dadd( -36.6459, -35.0188, 9.49135, 0.15 ) }
    dend_22 { pt3dadd( -37.0909, -35.4317, 9.69137, 0.15 ) }
    dend_22 { pt3dadd( -37.5252, -35.7344, 9.89219, 0.37 ) }
    dend_22 { pt3dadd( -37.9254, -35.8999, 10.0418, 0.37 ) }
    dend_22 { pt3dadd( -43.5395, -40.2861, 11.4791, 0.37 ) }
    // Section: dend_15, id: dend_15, parent: soma_0 (entry count 72/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 5.67805, -4.68387, -3.44829, 3.83 ) }
    dend_15 { pt3dadd( 6.35858, -5.52432, -3.7999, 3.83 ) }
    // Section: dend_8, id: dend_8, parent: soma_0 (entry count 74/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 0.528048, -8.54087, 1.37171, 2.8 ) }
    dend_8 { pt3dadd( 0.528048, -8.54087, 1.37171, 2.8 ) }
    dend_8 { pt3dadd( 0.703891, -9.6953, 1.44409, 2.8 ) }
    dend_8 { pt3dadd( 0.879533, -10.8484, 1.51639, 2.43 ) }
    dend_8 { pt3dadd( 1.04252, -11.9184, 1.58348, 2.21 ) }
    dend_8 { pt3dadd( 1.23675, -13.1936, 1.66343, 2.06 ) }
    dend_8 { pt3dadd( 1.32631, -13.7816, 1.70029, 2.06 ) }
    // Section: dend_5, id: dend_5, parent: soma_0 (entry count 81/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -6.84195, 5.76613, -0.638285, 1.62 ) }
    dend_5 { pt3dadd( -6.84195, 5.76613, -0.638285, 1.62 ) }
    dend_5 { pt3dadd( -7.61003, 6.04008, -0.519376, 0.81 ) }
    dend_5 { pt3dadd( -8.5958, 6.36423, -0.388516, 0.74 ) }
    dend_5 { pt3dadd( -9.36615, 6.59708, -0.297829, 0.96 ) }
    dend_5 { pt3dadd( -10.3978, 6.88988, -0.187468, 1.18 ) }
    dend_5 { pt3dadd( -11.1946, 7.10551, -0.120058, 1.18 ) }
    dend_5 { pt3dadd( -11.897, 7.29278, -0.0648636, 1.47 ) }
    dend_5 { pt3dadd( -12.4804, 7.45146, -0.0180235, 1.47 ) }
    dend_5 { pt3dadd( -13.1641, 7.64833, 0.0274267, 1.33 ) }
    dend_5 { pt3dadd( -13.8539, 7.87243, 0.0872001, 0.88 ) }
    dend_5 { pt3dadd( -14.6065, 8.14739, 0.176086, 0.52 ) }
    dend_5 { pt3dadd( -15.241, 8.39902, 0.268178, 0.52 ) }
    dend_5 { pt3dadd( -15.8599, 8.65025, 0.36674, 0.52 ) }
    dend_5 { pt3dadd( -16.379, 8.85721, 0.451395, 1.03 ) }
    dend_5 { pt3dadd( -16.9135, 9.05627, 0.542217, 1.33 ) }
    dend_5 { pt3dadd( -17.2255, 9.15446, 0.603006, 1.33 ) }
    dend_5 { pt3dadd( -18.0687, 9.37598, 0.776457, 0.81 ) }
    dend_5 { pt3dadd( -18.7686, 9.53643, 0.906347, 0.81 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_5 { pt3dadd( -19.4689, 9.66916, 1.01693, 1.03 ) }
    dend_5 { pt3dadd( -20.0366, 9.75357, 1.09666, 1.03 ) }
    dend_5 { pt3dadd( -21.0725, 9.86593, 1.23134, 0.66 ) }
    dend_5 { pt3dadd( -21.8683, 9.92943, 1.33969, 0.37 ) }
    dend_5 { pt3dadd( -22.3691, 9.97033, 1.41475, 0.37 ) }
    dend_5 { pt3dadd( -23.0737, 10.0299, 1.52614, 0.37 ) }
    dend_5 { pt3dadd( -23.6147, 10.0823, 1.60726, 0.37 ) }
    dend_5 { pt3dadd( -24.0571, 10.1311, 1.66358, 0.29 ) }
    dend_5 { pt3dadd( -24.6013, 10.2038, 1.71994, 0.29 ) }
    dend_5 { pt3dadd( -25.5309, 10.3675, 1.81638, 0.59 ) }
    dend_5 { pt3dadd( -26.1215, 10.5045, 1.87748, 1.03 ) }
    dend_5 { pt3dadd( -26.702, 10.6695, 1.93571, 1.03 ) }
    dend_5 { pt3dadd( -27.2774, 10.8513, 1.98058, 1.03 ) }
    dend_5 { pt3dadd( -28.0753, 11.1078, 2.02225, 0.88 ) }
    dend_5 { pt3dadd( -28.9882, 11.3934, 2.04764, 0.66 ) }
    dend_5 { pt3dadd( -29.5817, 11.5683, 2.05815, 0.66 ) }
    dend_5 { pt3dadd( -30.528, 11.8529, 2.07424, 1.25 ) }
    dend_5 { pt3dadd( -31.0243, 12.0094, 2.08335, 1.55 ) }
    dend_5 { pt3dadd( -31.5514, 12.1855, 2.10001, 1.55 ) }
    dend_5 { pt3dadd( -32.1532, 12.4001, 2.12215, 0.88 ) }
    dend_5 { pt3dadd( -32.8746, 12.666, 2.17368, 0.37 ) }
    dend_5 { pt3dadd( -33.2817, 12.8304, 2.22241, 0.37 ) }
    dend_5 { pt3dadd( -33.629, 12.9842, 2.27942, 0.37 ) }
    dend_5 { pt3dadd( -33.9618, 13.1395, 2.34379, 0.37 ) }
    dend_5 { pt3dadd( -34.3989, 13.3516, 2.43392, 0.59 ) }
    dend_5 { pt3dadd( -34.9342, 13.6043, 2.54551, 0.81 ) }
    dend_5 { pt3dadd( -35.551, 13.8802, 2.6671, 0.96 ) }
    dend_5 { pt3dadd( -36.0967, 14.1023, 2.76234, 0.96 ) }
    dend_5 { pt3dadd( -36.8905, 14.3758, 2.87425, 0.37 ) }
    dend_5 { pt3dadd( -37.4342, 14.5343, 2.92977, 0.96 ) }
    dend_5 { pt3dadd( -37.912, 14.6544, 2.97371, 1.25 ) }
    dend_5 { pt3dadd( -38.3437, 14.7497, 2.9693, 1.25 ) }
    dend_5 { pt3dadd( -38.614, 14.7981, 2.92902, 1.25 ) }
    dend_5 { pt3dadd( -39.194, 14.8836, 2.77642, 0.74 ) }
    dend_5 { pt3dadd( -39.6096, 14.9374, 2.63306, 0.59 ) }
    dend_5 { pt3dadd( -39.978, 14.9871, 2.47532, 0.88 ) }
    dend_5 { pt3dadd( -40.8852, 15.1191, 2.05027, 1.18 ) }
    dend_5 { pt3dadd( -41.8182, 15.2593, 1.6107, 0.96 ) }
    dend_5 { pt3dadd( -42.2672, 15.332, 1.41034, 0.96 ) }
    dend_5 { pt3dadd( -42.9707, 15.4681, 1.12228, 0.66 ) }
    dend_5 { pt3dadd( -43.7682, 15.6318, 0.832914, 0.88 ) }
    dend_5 { pt3dadd( -44.2897, 15.7481, 0.678042, 0.88 ) }
    dend_5 { pt3dadd( -44.9206, 15.9081, 0.571481, 0.59 ) }
    dend_5 { pt3dadd( -45.6216, 16.1031, 0.530462, 0.29 ) }
    dend_5 { pt3dadd( -46.3059, 16.3025, 0.520377, 0.29 ) }
    dend_5 { pt3dadd( -46.5433, 16.3732, 0.525697, 0.59 ) }
    dend_5 { pt3dadd( -47.0074, 16.5218, 0.552778, 0.59 ) }
    dend_5 { pt3dadd( -48.1598, 16.9047, 0.651183, 0.37 ) }
    dend_5 { pt3dadd( -49.3829, 17.3094, 0.789698, 0.37 ) }
    dend_5 { pt3dadd( -50.2783, 17.5903, 0.908775, 0.74 ) }
    dend_5 { pt3dadd( -50.8088, 17.7454, 0.993387, 0.96 ) }
    dend_5 { pt3dadd( -51.1498, 17.845, 1.0433, 0.96 ) }
    dend_5 { pt3dadd( -51.9147, 18.0542, 1.14403, 0.37 ) }
    dend_5 { pt3dadd( -52.4698, 18.1983, 1.2176, 0.66 ) }
    dend_5 { pt3dadd( -53.0029, 18.3359, 1.2795, 1.25 ) }
    dend_5 { pt3dadd( -53.4158, 18.4413, 1.33719, 1.25 ) }
    dend_5 { pt3dadd( -54.2796, 18.6459, 1.44346, 0.81 ) }
    dend_5 { pt3dadd( -54.719, 18.7368, 1.47396, 0.81 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 58/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 0.408048, 9.16713, -0.318285, 1.4 ) }
    dend_0 { pt3dadd( 0.514926, 9.37259, -0.337064, 1.4 ) }
    dend_0 { pt3dadd( 1.0211, 10.3456, -0.426003, 1.18 ) }
    dend_0 { pt3dadd( 1.4977, 11.2618, -0.509747, 1.4 ) }
    dend_0 { pt3dadd( 1.98934, 12.207, -0.596132, 1.4 ) }
    dend_0 { pt3dadd( 2.43196, 13.0578, -0.673904, 1.18 ) }
    dend_0 { pt3dadd( 2.73662, 13.6435, -0.727436, 1.18 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 65/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 2.18123, -8.81254, 0.0904597, 0.792933 ) }
    axon_0 { pt3dadd( 6.39229, -23.2093, 0.0904597, 0.792933 ) }
    axon_0 { pt3dadd( 10.6034, -37.6061, 0.0904597, 0.792933 ) }
    // Section: dend_17, id: dend_17, parent: dend_15 (entry count 68/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 6.35858, -5.52432, -3.7999, 0.66 ) }
    dend_17 { pt3dadd( 7.78427, -7.74578, -3.97971, 0.66 ) }
    dend_17 { pt3dadd( 7.98844, -7.92908, -4.06655, 0.66 ) }
    dend_17 { pt3dadd( 9.17123, -8.22973, -4.65538, 0.44 ) }
    dend_17 { pt3dadd( 11.1813, -8.26592, -5.49674, 0.44 ) }
    dend_17 { pt3dadd( 11.7744, -8.22467, -5.71747, 0.88 ) }
    dend_17 { pt3dadd( 12.6953, -8.09854, -6.02437, 1.03 ) }
    dend_17 { pt3dadd( 13.7178, -7.79807, -6.27897, 1.03 ) }
    dend_17 { pt3dadd( 15.233, -7.26651, -6.64488, 0.96 ) }
    dend_17 { pt3dadd( 16.2561, -6.88839, -6.88909, 1.33 ) }
    dend_17 { pt3dadd( 16.7452, -6.71361, -7.02138, 1.55 ) }
    dend_17 { pt3dadd( 17.7493, -6.41685, -7.25755, 1.55 ) }
    dend_17 { pt3dadd( 18.7121, -6.23403, -7.42857, 1.25 ) }
    dend_17 { pt3dadd( 20.3254, -6.23545, -7.62448, 0.96 ) }
    dend_17 { pt3dadd( 20.8697, -6.40522, -7.68092, 0.66 ) }
    dend_17 { pt3dadd( 21.7729, -6.90494, -7.68112, 1.11 ) }
    dend_17 { pt3dadd( 22.2366, -7.21681, -7.66749, 1.33 ) }
    dend_17 { pt3dadd( 22.7815, -7.61363, -7.64713, 1.33 ) }
    dend_17 { pt3dadd( 23.9424, -8.43626, -7.61585, 0.81 ) }
    dend_17 { pt3dadd( 24.8988, -8.99838, -7.60816, 0.66 ) }
    dend_17 { pt3dadd( 26.5499, -9.50926, -7.67128, 0.66 ) }
    dend_17 { pt3dadd( 27.5067, -9.57862, -7.77429, 1.11 ) }
    dend_17 { pt3dadd( 28.4263, -9.51092, -7.91546, 1.11 ) }
    dend_17 { pt3dadd( 29.2704, -9.35856, -8.09806, 1.11 ) }
    dend_17 { pt3dadd( 30.1632, -9.12211, -8.35621, 0.81 ) }
    dend_17 { pt3dadd( 31.0683, -8.8921, -8.69078, 0.81 ) }
    dend_17 { pt3dadd( 31.9646, -8.66523, -9.07755, 0.96 ) }
    dend_17 { pt3dadd( 33.0003, -8.45399, -9.49404, 1.92 ) }
    dend_17 { pt3dadd( 34.0263, -8.32601, -9.9079, 2.65 ) }
    dend_17 { pt3dadd( 34.6609, -8.29521, -10.1736, 2.65 ) }
    dend_17 { pt3dadd( 35.8321, -8.32407, -10.7169, 1.62 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 99/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 6.35858, -5.52432, -3.7999, 0.96 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_16 { pt3dadd( 9.13586, -6.98366, -1.28267, 0.96 ) }
    dend_16 { pt3dadd( 9.81933, -7.26929, -0.752337, 1.11 ) }
    dend_16 { pt3dadd( 10.289, -7.42995, -0.435636, 1.25 ) }
    dend_16 { pt3dadd( 10.7847, -7.56953, -0.147691, 1.4 ) }
    dend_16 { pt3dadd( 11.3328, -7.69974, 0.13982, 1.4 ) }
    dend_16 { pt3dadd( 12.2553, -7.8897, 0.591743, 1.11 ) }
    dend_16 { pt3dadd( 12.9395, -7.92846, 0.785542, 0.96 ) }
    dend_16 { pt3dadd( 13.6499, -7.93919, 1.00599, 0.66 ) }
    dend_16 { pt3dadd( 14.5065, -7.92332, 1.2902, 0.66 ) }
    dend_16 { pt3dadd( 15.0392, -7.89295, 1.4727, 0.66 ) }
    dend_16 { pt3dadd( 15.5764, -7.85633, 1.65567, 0.66 ) }
    dend_16 { pt3dadd( 16.1541, -7.82294, 1.84918, 0.81 ) }
    dend_16 { pt3dadd( 16.7065, -7.81329, 2.04928, 1.03 ) }
    dend_16 { pt3dadd( 17.1182, -7.8361, 2.21806, 1.03 ) }
    dend_16 { pt3dadd( 17.7157, -7.96926, 2.5031, 0.59 ) }
    dend_16 { pt3dadd( 18.2369, -8.18317, 2.76423, 0.44 ) }
    dend_16 { pt3dadd( 18.4857, -8.30711, 2.88631, 0.44 ) }
    dend_16 { pt3dadd( 18.9555, -8.51603, 3.08872, 0.44 ) }
    dend_16 { pt3dadd( 19.6683, -8.74874, 3.34956, 0.44 ) }
    dend_16 { pt3dadd( 20.2592, -8.86739, 3.52956, 0.59 ) }
    dend_16 { pt3dadd( 20.9421, -8.91652, 3.71523, 0.59 ) }
    dend_16 { pt3dadd( 21.7639, -8.87686, 3.91646, 0.74 ) }
    dend_16 { pt3dadd( 22.77, -8.73395, 4.1466, 1.18 ) }
    dend_16 { pt3dadd( 23.3883, -8.58839, 4.28185, 1.4 ) }
    dend_16 { pt3dadd( 24.0712, -8.38338, 4.4236, 1.47 ) }
    dend_16 { pt3dadd( 24.6008, -8.20373, 4.52783, 1.11 ) }
    dend_16 { pt3dadd( 25.3155, -7.95061, 4.66444, 0.29 ) }
    dend_16 { pt3dadd( 25.7331, -7.80195, 4.74034, 0.29 ) }
    dend_16 { pt3dadd( 26.1813, -7.64235, 4.81888, 0.29 ) }
    dend_16 { pt3dadd( 27.0289, -7.3542, 4.95757, 0.74 ) }
    dend_16 { pt3dadd( 27.5772, -7.18026, 5.04, 1.03 ) }
    dend_16 { pt3dadd( 28.1556, -7.01258, 5.12456, 1.03 ) }
    dend_16 { pt3dadd( 28.9548, -6.80325, 5.2443, 0.74 ) }
    dend_16 { pt3dadd( 29.6334, -6.6396, 5.33788, 0.74 ) }
    dend_16 { pt3dadd( 30.5122, -6.43115, 5.43858, 0.74 ) }
    dend_16 { pt3dadd( 31.4, -6.21257, 5.52384, 1.33 ) }
    dend_16 { pt3dadd( 32.0899, -6.05113, 5.57909, 1.62 ) }
    dend_16 { pt3dadd( 32.3977, -5.9746, 5.60019, 1.62 ) }
    dend_16 { pt3dadd( 33.1508, -5.77762, 5.63657, 1.11 ) }
    dend_16 { pt3dadd( 33.9937, -5.55843, 5.66106, 0.37 ) }
    dend_16 { pt3dadd( 34.8364, -5.34142, 5.67303, 0.29 ) }
    dend_16 { pt3dadd( 35.2397, -5.24282, 5.67626, 0.29 ) }
    dend_16 { pt3dadd( 35.8844, -5.09517, 5.68356, 0.29 ) }
    dend_16 { pt3dadd( 36.3916, -4.98157, 5.70034, 0.29 ) }
    dend_16 { pt3dadd( 37.0746, -4.83215, 5.74528, 0.66 ) }
    dend_16 { pt3dadd( 37.6239, -4.70411, 5.7965, 0.66 ) }
    dend_16 { pt3dadd( 38.2511, -4.54903, 5.86163, 0.66 ) }
    dend_16 { pt3dadd( 38.7551, -4.40707, 5.92129, 0.52 ) }
    dend_16 { pt3dadd( 39.5079, -4.18057, 6.02136, 0.52 ) }
    dend_16 { pt3dadd( 39.9673, -4.02744, 6.09071, 0.44 ) }
    dend_16 { pt3dadd( 40.6891, -3.77136, 6.21491, 0.59 ) }
    dend_16 { pt3dadd( 41.2079, -3.57049, 6.31393, 0.74 ) }
    dend_16 { pt3dadd( 41.8514, -3.30865, 6.45156, 0.52 ) }
    dend_16 { pt3dadd( 42.3651, -3.107, 6.57253, 0.52 ) }
    dend_16 { pt3dadd( 42.8384, -2.9304, 6.69515, 0.66 ) }
    dend_16 { pt3dadd( 43.7911, -2.59304, 6.95487, 0.66 ) }
    dend_16 { pt3dadd( 44.1839, -2.45346, 7.06778, 1.11 ) }
    dend_16 { pt3dadd( 44.4395, -2.35249, 7.14776, 1.11 ) }
    dend_16 { pt3dadd( 44.907, -2.14299, 7.29917, 1.11 ) }
    dend_16 { pt3dadd( 45.5672, -1.79855, 7.51051, 0.81 ) }
    dend_16 { pt3dadd( 46.086, -1.483, 7.69228, 0.96 ) }
    dend_16 { pt3dadd( 46.4713, -1.21901, 7.8349, 0.96 ) }
    dend_16 { pt3dadd( 47.1244, -0.738869, 8.08615, 1.18 ) }
    dend_16 { pt3dadd( 47.7746, -0.22984, 8.34332, 0.37 ) }
    dend_16 { pt3dadd( 48.425, 0.300068, 8.60496, 0.37 ) }
    dend_16 { pt3dadd( 49.1141, 0.836132, 8.87439, 0.37 ) }
    dend_16 { pt3dadd( 49.5946, 1.18804, 9.06394, 0.81 ) }
    dend_16 { pt3dadd( 50.0153, 1.47695, 9.23165, 0.81 ) }
    dend_16 { pt3dadd( 50.8117, 1.99408, 9.54357, 0.59 ) }
    dend_16 { pt3dadd( 51.3146, 2.30633, 9.73927, 0.59 ) }
    dend_16 { pt3dadd( 52.0571, 2.7456, 10.018, 0.74 ) }
    dend_16 { pt3dadd( 52.6229, 3.06196, 10.2151, 0.74 ) }
    dend_16 { pt3dadd( 53.1796, 3.36796, 10.4194, 0.37 ) }
    dend_16 { pt3dadd( 53.8795, 3.75305, 10.6908, 1.03 ) }
    dend_16 { pt3dadd( 54.0563, 3.84928, 10.7621, 1.25 ) }
    dend_16 { pt3dadd( 54.4333, 4.03875, 10.9175, 1.4 ) }
    dend_16 { pt3dadd( 54.9851, 4.27395, 11.1426, 0.88 ) }
    dend_16 { pt3dadd( 55.5462, 4.4446, 11.3524, 0.52 ) }
    dend_16 { pt3dadd( 55.921, 4.51038, 11.482, 0.52 ) }
    dend_16 { pt3dadd( 56.5342, 4.56436, 11.6805, 0.29 ) }
    dend_16 { pt3dadd( 57.152, 4.5953, 11.8685, 0.29 ) }
    dend_16 { pt3dadd( 57.8853, 4.59181, 12.0759, 0.29 ) }
    dend_16 { pt3dadd( 58.6108, 4.54387, 12.2632, 0.29 ) }
    dend_16 { pt3dadd( 59.2243, 4.47736, 12.4062, 0.29 ) }
    dend_16 { pt3dadd( 59.8742, 4.38898, 12.5479, 0.88 ) }
    dend_16 { pt3dadd( 60.455, 4.29797, 12.6657, 1.11 ) }
    dend_16 { pt3dadd( 60.9845, 4.21284, 12.7654, 1.11 ) }
    dend_16 { pt3dadd( 61.4295, 4.13665, 12.8418, 0.52 ) }
    dend_16 { pt3dadd( 61.9871, 4.0271, 12.9315, 0.52 ) }
    dend_16 { pt3dadd( 62.6532, 3.86865, 13.0379, 0.44 ) }
    dend_16 { pt3dadd( 62.8136, 3.8172, 13.0609, 0.29 ) }
    dend_16 { pt3dadd( 69.1068, 4.02446, 16.4693, 0.29 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 92/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 1.32631, -13.7816, 1.70029, 1.11 ) }
    dend_10 { pt3dadd( 1.14096, -14.4985, 1.14923, 1.11 ) }
    dend_10 { pt3dadd( 0.920848, -16.0867, 0.321563, 0.96 ) }
    dend_10 { pt3dadd( 0.879176, -16.9395, 0.0445092, 1.4 ) }
    dend_10 { pt3dadd( 0.840233, -18.1982, -0.206597, 1.25 ) }
    dend_10 { pt3dadd( 0.810029, -19.1308, -0.328763, 1.33 ) }
    dend_10 { pt3dadd( 0.756849, -20.1909, -0.420596, 1.4 ) }
    dend_10 { pt3dadd( 0.681006, -21.3244, -0.428812, 1.11 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_10 { pt3dadd( 0.582705, -22.5618, -0.307789, 1.4 ) }
    dend_10 { pt3dadd( 0.477843, -23.86, -0.138416, 1.84 ) }
    dend_10 { pt3dadd( 0.405363, -24.7852, -0.00740891, 1.84 ) }
    dend_10 { pt3dadd( 0.349081, -25.6897, 0.0997422, 1.55 ) }
    dend_10 { pt3dadd( 0.30796, -26.9288, 0.197791, 1.25 ) }
    dend_10 { pt3dadd( 0.303513, -28.0381, 0.26497, 0.66 ) }
    dend_10 { pt3dadd( 0.343528, -29.9054, 0.394393, 0.52 ) }
    dend_10 { pt3dadd( 0.37326, -30.4919, 0.451082, 0.52 ) }
    dend_10 { pt3dadd( 0.420466, -31.1906, 0.546612, 0.52 ) }
    dend_10 { pt3dadd( 0.485862, -32.0477, 0.69726, 0.52 ) }
    dend_10 { pt3dadd( 0.534727, -32.7461, 0.856444, 0.52 ) }
    dend_10 { pt3dadd( 0.568885, -33.9823, 1.20164, 0.88 ) }
    dend_10 { pt3dadd( 0.528106, -34.8343, 1.46911, 1.18 ) }
    dend_10 { pt3dadd( 0.465253, -35.7708, 1.75526, 1.33 ) }
    dend_10 { pt3dadd( 0.384363, -36.6058, 1.98772, 1.4 ) }
    dend_10 { pt3dadd( 0.298268, -37.3008, 2.16754, 1.4 ) }
    dend_10 { pt3dadd( 0.196485, -38.094, 2.35145, 1.4 ) }
    dend_10 { pt3dadd( 0.0931325, -38.8756, 2.50751, 1.55 ) }
    dend_10 { pt3dadd( -0.112759, -40.1274, 2.72334, 1.33 ) }
    dend_10 { pt3dadd( -0.446844, -41.7703, 2.98349, 1.03 ) }
    dend_10 { pt3dadd( -0.716542, -42.8588, 3.15111, 0.81 ) }
    dend_10 { pt3dadd( -1.04986, -43.9986, 3.31844, 0.88 ) }
    dend_10 { pt3dadd( -1.38453, -45.0171, 3.46369, 0.88 ) }
    dend_10 { pt3dadd( -1.80855, -46.16, 3.62763, 0.88 ) }
    dend_10 { pt3dadd( -2.13448, -46.9635, 3.73964, 0.88 ) }
    dend_10 { pt3dadd( -2.46186, -47.7731, 3.85357, 1.33 ) }
    dend_10 { pt3dadd( -2.82024, -48.6823, 3.98042, 1.55 ) }
    dend_10 { pt3dadd( -3.01683, -49.1691, 4.0506, 1.69 ) }
    dend_10 { pt3dadd( -3.37109, -49.9331, 4.17497, 1.69 ) }
    dend_10 { pt3dadd( -3.62254, -50.406, 4.26157, 1.69 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 30/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 1.32631, -13.7816, 1.70029, 1.18 ) }
    dend_9 { pt3dadd( 1.54041, -14.2471, 3.048, 1.18 ) }
    dend_9 { pt3dadd( 1.69882, -14.5123, 3.69434, 1.18 ) }
    dend_9 { pt3dadd( 2.00294, -15.0106, 4.69217, 1.33 ) }
    dend_9 { pt3dadd( 2.18677, -15.3269, 5.22583, 1.33 ) }
    dend_9 { pt3dadd( 2.531, -15.9183, 6.07999, 1.03 ) }
    dend_9 { pt3dadd( 2.81205, -16.4214, 6.71521, 0.88 ) }
    dend_9 { pt3dadd( 3.0949, -16.8573, 7.14889, 1.03 ) }
    dend_9 { pt3dadd( 3.37424, -17.3661, 7.54121, 1.18 ) }
    dend_9 { pt3dadd( 3.56262, -17.8575, 7.83864, 1.18 ) }
    dend_9 { pt3dadd( 3.6556, -18.3715, 8.12489, 1.18 ) }
    dend_9 { pt3dadd( 3.62953, -18.8003, 8.33422, 1.25 ) }
    dend_9 { pt3dadd( 3.44162, -19.3111, 8.5637, 1.25 ) }
    dend_9 { pt3dadd( 3.05593, -19.9295, 8.8867, 0.96 ) }
    dend_9 { pt3dadd( 2.74209, -20.3423, 9.12362, 0.74 ) }
    dend_9 { pt3dadd( 2.42117, -20.7779, 9.39674, 0.74 ) }
    dend_9 { pt3dadd( 2.00054, -21.4803, 9.85701, 0.66 ) }
    dend_9 { pt3dadd( 1.77271, -22.0716, 10.2367, 0.66 ) }
    dend_9 { pt3dadd( 1.57312, -23.0091, 10.8038, 0.96 ) }
    dend_9 { pt3dadd( 1.52337, -23.6391, 11.1723, 0.96 ) }
    dend_9 { pt3dadd( 1.52392, -24.3257, 11.5312, 0.66 ) }
    dend_9 { pt3dadd( 1.53286, -24.7988, 11.7469, 0.44 ) }
    dend_9 { pt3dadd( 1.52287, -25.3764, 11.9919, 0.29 ) }
    dend_9 { pt3dadd( 1.39137, -25.9866, 12.2337, 0.66 ) }
    dend_9 { pt3dadd( 1.23069, -26.3188, 12.3435, 0.66 ) }
    dend_9 { pt3dadd( 0.864301, -26.9242, 12.5255, 0.44 ) }
    dend_9 { pt3dadd( 0.4905, -27.5142, 12.6783, 1.03 ) }
    dend_9 { pt3dadd( 0.246576, -27.8984, 12.774, 1.03 ) }
    dend_9 { pt3dadd( -0.214031, -28.6273, 12.9648, 0.59 ) }
    dend_9 { pt3dadd( -0.545524, -29.124, 13.1073, 1.18 ) }
    dend_9 { pt3dadd( -0.926498, -29.6322, 13.2577, 1.33 ) }
    dend_9 { pt3dadd( -1.42705, -30.1879, 13.4441, 1.47 ) }
    dend_9 { pt3dadd( -2.14876, -30.8962, 13.748, 0.37 ) }
    dend_9 { pt3dadd( -2.77256, -31.4473, 14.0383, 0.37 ) }
    dend_9 { pt3dadd( -3.32531, -31.8214, 14.2276, 0.52 ) }
    dend_9 { pt3dadd( -4.04841, -32.1653, 14.3759, 0.52 ) }
    dend_9 { pt3dadd( -4.71682, -32.3804, 14.4378, 0.29 ) }
    dend_9 { pt3dadd( -5.76493, -32.6411, 14.4905, 0.29 ) }
    dend_9 { pt3dadd( -6.64639, -32.8039, 14.4753, 0.29 ) }
    dend_9 { pt3dadd( -8.88647, -33.1098, 14.2669, 0.29 ) }
    dend_9 { pt3dadd( -10.0405, -33.2087, 14.0765, 0.44 ) }
    dend_9 { pt3dadd( -10.5981, -33.2262, 13.9373, 0.59 ) }
    dend_9 { pt3dadd( -14.1468, -38.3251, 19.3219, 0.59 ) }
    dend_9 { pt3dadd( -19.439, -43.0631, 23.5035, 0.59 ) }
    dend_9 { pt3dadd( -26.1442, -46.6308, 26.8749, 0.59 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 75/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -54.719, 18.7368, 1.47396, 0.66 ) }
    dend_7 { pt3dadd( -57.4771, 18.3886, -0.0320324, 0.66 ) }
    dend_7 { pt3dadd( -58.4341, 18.2284, -0.510156, 0.66 ) }
    dend_7 { pt3dadd( -59.4165, 18.0139, -0.961456, 0.44 ) }
    dend_7 { pt3dadd( -60.9938, 17.6111, -1.60407, 0.22 ) }
    dend_7 { pt3dadd( -62.3743, 17.2471, -2.10022, 0.96 ) }
    dend_7 { pt3dadd( -63.2421, 17.0123, -2.37687, 1.47 ) }
    dend_7 { pt3dadd( -64.3846, 16.6846, -2.62583, 1.62 ) }
    dend_7 { pt3dadd( -65.5688, 16.354, -2.86347, 1.62 ) }
    dend_7 { pt3dadd( -67.3465, 15.8871, -3.19621, 0.37 ) }
    dend_7 { pt3dadd( -68.9305, 15.5102, -3.46962, 0.22 ) }
    dend_7 { pt3dadd( -72.1827, 14.8247, -3.97549, 0.22 ) }
    dend_7 { pt3dadd( -75.572, 14.2049, -4.43873, 0.22 ) }
    dend_7 { pt3dadd( -76.922, 13.9963, -4.61371, 0.81 ) }
    dend_7 { pt3dadd( -78.0307, 13.85, -4.75016, 0.81 ) }
    dend_7 { pt3dadd( -80.868, 13.5038, -5.08171, 0.22 ) }
    dend_7 { pt3dadd( -82.5516, 13.2913, -5.27419, 0.96 ) }
    dend_7 { pt3dadd( -84.0639, 13.0988, -5.44192, 1.11 ) }
    dend_7 { pt3dadd( -85.2491, 12.9405, -5.57885, 1.25 ) }
    dend_7 { pt3dadd( -86.2885, 12.7929, -5.70473, 0.81 ) }
    dend_7 { pt3dadd( -89.2299, 12.371, -6.07332, 0.22 ) }
    dend_7 { pt3dadd( -91.225, 12.0877, -6.33413, 0.29 ) }
    dend_7 { pt3dadd( -92.9781, 11.8337, -6.58195, 0.44 ) }
    dend_7 { pt3dadd( -94.5657, 11.6079, -6.81572, 0.52 ) }
    dend_7 { pt3dadd( -97.5712, 11.2274, -7.25542, 0.22 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_7 { pt3dadd( -98.6672, 11.1188, -7.41886, 0.59 ) }
    dend_7 { pt3dadd( -99.5381, 11.0589, -7.56268, 0.74 ) }
    dend_7 { pt3dadd( -100.497, 11.0075, -7.73598, 0.22 ) }
    dend_7 { pt3dadd( -103.091, 10.8515, -8.35038, 0.22 ) }
    dend_7 { pt3dadd( -104.24, 10.761, -8.68054, 0.66 ) }
    dend_7 { pt3dadd( -105.114, 10.6898, -8.96073, 0.96 ) }
    dend_7 { pt3dadd( -106.291, 10.5935, -9.34872, 0.96 ) }
    dend_7 { pt3dadd( -107.244, 10.5178, -9.63728, 0.96 ) }
    dend_7 { pt3dadd( -110.179, 10.3347, -10.448, 0.22 ) }
    dend_7 { pt3dadd( -111.259, 10.2893, -10.7294, 0.37 ) }
    dend_7 { pt3dadd( -112.669, 10.2503, -11.0708, 0.37 ) }
    dend_7 { pt3dadd( -113.342, 10.2499, -11.2156, 0.37 ) }
    dend_7 { pt3dadd( -117.277, 10.3374, -11.9007, 0.15 ) }
    dend_7 { pt3dadd( -118.738, 10.4268, -12.0642, 1.18 ) }
    dend_7 { pt3dadd( -119.455, 10.5135, -12.0807, 1.4 ) }
    dend_7 { pt3dadd( -119.991, 10.622, -12.0593, 1.4 ) }
    dend_7 { pt3dadd( -120.938, 10.886, -11.9948, 1.18 ) }
    dend_7 { pt3dadd( -121.602, 11.1225, -11.9428, 0.81 ) }
    dend_7 { pt3dadd( -123.521, 12.0468, -11.7532, 0.22 ) }
    dend_7 { pt3dadd( -124.649, 12.6464, -11.6497, 0.22 ) }
    dend_7 { pt3dadd( -126.664, 13.7985, -11.3395, 0.29 ) }
    dend_7 { pt3dadd( -127.639, 14.3967, -11.1487, 0.59 ) }
    dend_7 { pt3dadd( -128.984, 15.2734, -10.8224, 1.11 ) }
    dend_7 { pt3dadd( -129.701, 15.7744, -10.6209, 1.11 ) }
    dend_7 { pt3dadd( -130.142, 16.1256, -10.4637, 0.88 ) }
    dend_7 { pt3dadd( -131.836, 17.5549, -9.84882, 0.44 ) }
    dend_7 { pt3dadd( -132.428, 18.0748, -9.62858, 0.59 ) }
    dend_7 { pt3dadd( -133.126, 18.6984, -9.36633, 0.59 ) }
    dend_7 { pt3dadd( -134.024, 19.495, -9.07358, 0.59 ) }
    dend_7 { pt3dadd( -136.131, 21.2915, -8.51812, 0.15 ) }
    dend_7 { pt3dadd( -140.33, 24.7756, -7.63363, 0.15 ) }
    dend_7 { pt3dadd( -141.282, 25.5623, -7.4827, 0.66 ) }
    dend_7 { pt3dadd( -141.922, 26.0906, -7.39319, 0.81 ) }
    dend_7 { pt3dadd( -144.879, 28.5557, -7.0388, 0.22 ) }
    dend_7 { pt3dadd( -146.792, 30.1519, -6.83087, 0.22 ) }
    dend_7 { pt3dadd( -147.626, 30.8386, -6.74185, 0.59 ) }
    dend_7 { pt3dadd( -148.201, 31.3323, -6.67431, 0.59 ) }
    dend_7 { pt3dadd( -150.291, 33.2247, -6.40304, 0.22 ) }
    dend_7 { pt3dadd( -150.892, 33.8057, -6.31567, 0.81 ) }
    dend_7 { pt3dadd( -151.413, 34.3483, -6.23044, 1.03 ) }
    dend_7 { pt3dadd( -151.608, 34.5698, -6.19527, 1.03 ) }
    dend_7 { pt3dadd( -154.163, 37.6345, -5.70827, 0.22 ) }
    dend_7 { pt3dadd( -154.931, 38.5905, -5.55692, 0.81 ) }
    dend_7 { pt3dadd( -155.425, 39.249, -5.45232, 0.88 ) }
    dend_7 { pt3dadd( -157.711, 42.4374, -4.94329, 0.22 ) }
    dend_7 { pt3dadd( -159.783, 45.4747, -4.45112, 0.22 ) }
    dend_7 { pt3dadd( -160.425, 46.479, -4.27482, 0.66 ) }
    dend_7 { pt3dadd( -160.744, 47.049, -4.16535, 0.66 ) }
    dend_7 { pt3dadd( -161.705, 48.9361, -3.78611, 0.29 ) }
    dend_7 { pt3dadd( -162.084, 49.7915, -3.60773, 0.52 ) }
    dend_7 { pt3dadd( -162.191, 50.1028, -3.53921, 0.52 ) }
    dend_7 { pt3dadd( -162.728, 51.8142, -3.1545, 0.22 ) }
    dend_7 { pt3dadd( -163.391, 54.002, -2.65708, 0.22 ) }
    dend_7 { pt3dadd( -163.673, 54.9602, -2.43797, 0.22 ) }
    dend_7 { pt3dadd( -163.983, 56.0391, -2.19091, 0.66 ) }
    dend_7 { pt3dadd( -164.175, 56.7431, -2.03405, 0.66 ) }
    dend_7 { pt3dadd( -164.32, 57.2854, -1.9226, 0.52 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 57/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -54.719, 18.7368, 1.47396, 0.29 ) }
    dend_6 { pt3dadd( -55.769, 19.2123, 1.46935, 0.29 ) }
    dend_6 { pt3dadd( -58.3714, 20.4637, 1.45542, 0.22 ) }
    dend_6 { pt3dadd( -59.2358, 20.8793, 1.45079, 0.74 ) }
    dend_6 { pt3dadd( -59.726, 21.115, 1.44816, 0.74 ) }
    dend_6 { pt3dadd( -60.3218, 21.4015, 1.44497, 0.37 ) }
    dend_6 { pt3dadd( -61.5076, 21.9717, 1.43863, 0.22 ) }
    dend_6 { pt3dadd( -62.4709, 22.4313, 1.43359, 0.22 ) }
    dend_6 { pt3dadd( -71.0331, 26.8918, 2.48154, 0.22 ) }
    // Section: dend_4, id: dend_4, parent: dend_0 (entry count 66/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 2.73662, 13.6435, -0.727436, 0.96 ) }
    dend_4 { pt3dadd( 4.80276, 14.8804, -1.64568, 0.96 ) }
    dend_4 { pt3dadd( 5.29161, 15.1974, -1.80502, 1.03 ) }
    dend_4 { pt3dadd( 5.7749, 15.5244, -1.93592, 0.74 ) }
    dend_4 { pt3dadd( 6.40667, 15.9712, -2.07655, 0.22 ) }
    dend_4 { pt3dadd( 7.55092, 16.821, -2.31351, 0.22 ) }
    dend_4 { pt3dadd( 8.30085, 17.3941, -2.47219, 0.88 ) }
    dend_4 { pt3dadd( 8.72475, 17.7591, -2.50763, 1.03 ) }
    dend_4 { pt3dadd( 9.22064, 18.2058, -2.55622, 0.81 ) }
    dend_4 { pt3dadd( 9.7336, 18.6714, -2.62562, 0.22 ) }
    dend_4 { pt3dadd( 10.33, 19.2117, -2.72825, 0.74 ) }
    dend_4 { pt3dadd( 10.5852, 19.4433, -2.77764, 1.18 ) }
    dend_4 { pt3dadd( 10.8772, 19.7185, -2.84373, 1.18 ) }
    dend_4 { pt3dadd( 11.3924, 20.23, -2.96292, 0.22 ) }
    dend_4 { pt3dadd( 11.6717, 20.5429, -3.03028, 0.29 ) }
    dend_4 { pt3dadd( 11.93, 20.8932, -3.13183, 0.29 ) }
    dend_4 { pt3dadd( 12.2741, 21.4363, -3.32848, 0.88 ) }
    dend_4 { pt3dadd( 12.5613, 21.9606, -3.55121, 1.03 ) }
    dend_4 { pt3dadd( 12.7275, 22.3181, -3.69251, 0.81 ) }
    dend_4 { pt3dadd( 13.0409, 23.0833, -3.99001, 0.29 ) }
    dend_4 { pt3dadd( 13.4797, 24.2989, -4.42767, 1.77 ) }
    dend_4 { pt3dadd( 13.6703, 24.8673, -4.61591, 2.21 ) }
    dend_4 { pt3dadd( 13.8672, 25.4408, -4.77096, 1.99 ) }
    dend_4 { pt3dadd( 14.2277, 26.4349, -4.95761, 1.25 ) }
    dend_4 { pt3dadd( 14.5417, 27.2523, -5.04965, 0.22 ) }
    dend_4 { pt3dadd( 14.7898, 27.8533, -5.08233, 0.81 ) }
    dend_4 { pt3dadd( 14.9436, 28.2083, -5.08366, 0.59 ) }
    dend_4 { pt3dadd( 15.6163, 29.7003, -5.08604, 0.22 ) }
    dend_4 { pt3dadd( 16.1502, 30.8106, -5.11633, 0.22 ) }
    dend_4 { pt3dadd( 16.6469, 31.8139, -5.19946, 0.22 ) }
    dend_4 { pt3dadd( 17.0545, 32.6097, -5.29561, 1.62 ) }
    dend_4 { pt3dadd( 17.1754, 32.8356, -5.33061, 2.06 ) }
    dend_4 { pt3dadd( 17.3953, 33.2329, -5.3971, 1.62 ) }
    dend_4 { pt3dadd( 17.6492, 33.6738, -5.48005, 1.11 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_4 { pt3dadd( 18.3375, 34.8154, -5.7185, 0.22 ) }
    dend_4 { pt3dadd( 19.0231, 35.882, -5.96996, 0.22 ) }
    dend_4 { pt3dadd( 19.5037, 36.6003, -6.1605, 0.22 ) }
    dend_4 { pt3dadd( 19.8059, 37.0386, -6.2984, 0.59 ) }
    dend_4 { pt3dadd( 19.9518, 37.2449, -6.37278, 0.59 ) }
    dend_4 { pt3dadd( 20.3655, 37.7459, -6.63099, 0.22 ) }
    dend_4 { pt3dadd( 21.1377, 38.4976, -7.16944, 1.77 ) }
    dend_4 { pt3dadd( 21.5112, 38.8341, -7.44303, 2.36 ) }
    dend_4 { pt3dadd( 21.9236, 39.1893, -7.71916, 3.02 ) }
    dend_4 { pt3dadd( 22.165, 39.3951, -7.85671, 3.02 ) }
    dend_4 { pt3dadd( 23.2938, 40.3433, -8.38963, 0.74 ) }
    dend_4 { pt3dadd( 23.7068, 40.6873, -8.566, 0.44 ) }
    dend_4 { pt3dadd( 24.605, 41.4259, -8.8875, 0.15 ) }
    dend_4 { pt3dadd( 25.703, 42.3626, -9.25712, 0.15 ) }
    dend_4 { pt3dadd( 26.2812, 42.8648, -9.4611, 1.4 ) }
    dend_4 { pt3dadd( 26.6296, 43.175, -9.60191, 1.62 ) }
    dend_4 { pt3dadd( 28.4383, 44.8526, -10.4736, 0.15 ) }
    dend_4 { pt3dadd( 29.3702, 45.7071, -11.0152, 0.15 ) }
    dend_4 { pt3dadd( 30.0828, 46.3475, -11.5225, 1.55 ) }
    dend_4 { pt3dadd( 30.6053, 46.7852, -12.0226, 1.99 ) }
    dend_4 { pt3dadd( 31.0852, 47.1421, -12.5746, 1.77 ) }
    dend_4 { pt3dadd( 31.7752, 47.5633, -13.5025, 0.96 ) }
    dend_4 { pt3dadd( 32.0473, 47.6494, -13.9649, 0.74 ) }
    dend_4 { pt3dadd( 32.5199, 47.589, -14.9346, 1.18 ) }
    dend_4 { pt3dadd( 33.5263, 46.8927, -17.2116, 0.88 ) }
    dend_4 { pt3dadd( 33.8887, 46.3973, -18.1245, 0.29 ) }
    dend_4 { pt3dadd( 34.0888, 45.9801, -18.6538, 1.18 ) }
    dend_4 { pt3dadd( 34.2731, 45.5098, -19.1094, 1.47 ) }
    dend_4 { pt3dadd( 34.6699, 44.4883, -19.9212, 0.22 ) }
    dend_4 { pt3dadd( 34.9422, 43.8394, -20.3255, 0.22 ) }
    dend_4 { pt3dadd( 35.1925, 43.3766, -20.5382, 1.62 ) }
    dend_4 { pt3dadd( 35.6412, 42.8575, -20.8245, 1.77 ) }
    dend_4 { pt3dadd( 36.3031, 42.3419, -21.1723, 0.22 ) }
    dend_4 { pt3dadd( 36.8257, 42.0782, -21.3813, 1.4 ) }
    dend_4 { pt3dadd( 37.3066, 41.9307, -21.541, 1.47 ) }
    dend_4 { pt3dadd( 37.8691, 41.8094, -21.7349, 0.81 ) }
    dend_4 { pt3dadd( 38.9702, 41.6333, -22.1198, 1.18 ) }
    dend_4 { pt3dadd( 39.5566, 41.5633, -22.3413, 0.66 ) }
    dend_4 { pt3dadd( 40.064, 41.5148, -22.5681, 1.4 ) }
    dend_4 { pt3dadd( 40.5448, 41.4754, -22.813, 1.4 ) }
    dend_4 { pt3dadd( 41.2089, 41.4333, -23.1663, 0.59 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 41/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 2.73662, 13.6435, -0.727436, 0.88 ) }
    dend_1 { pt3dadd( 3.15844, 14.2124, -0.75716, 0.88 ) }
    dend_1 { pt3dadd( 3.81103, 15.0601, -0.770801, 1.03 ) }
    dend_1 { pt3dadd( 4.38766, 15.8169, -0.741327, 1.25 ) }
    dend_1 { pt3dadd( 4.94798, 16.5526, -0.69013, 1.4 ) }
    dend_1 { pt3dadd( 5.73207, 17.5821, -0.618489, 1.62 ) }
    dend_1 { pt3dadd( 6.36035, 18.4071, -0.561083, 1.77 ) }
    dend_1 { pt3dadd( 6.6432, 18.7699, -0.511471, 2.21 ) }
    dend_1 { pt3dadd( 7.09555, 19.3386, -0.415798, 2.36 ) }
    dend_1 { pt3dadd( 7.44182, 19.7877, -0.322316, 2.73 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 51/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 10.6034, -37.6061, 0.0904597, 0.233668 ) }
    axon_1 { pt3dadd( 14.8144, -52.0028, 0.0904597, 0.233668 ) }
    axon_1 { pt3dadd( 19.0255, -66.3996, 0.0904597, 0.233668 ) }
    // Section: dend_21, id: dend_21, parent: dend_17 (entry count 54/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 35.8321, -8.32407, -10.7169, 0.81 ) }
    dend_21 { pt3dadd( 37.3567, -7.89515, -10.6899, 0.81 ) }
    dend_21 { pt3dadd( 38.6384, -7.52897, -10.8324, 0.96 ) }
    dend_21 { pt3dadd( 40.5857, -7.01767, -11.2023, 0.88 ) }
    dend_21 { pt3dadd( 41.5066, -6.83536, -11.5021, 1.18 ) }
    dend_21 { pt3dadd( 42.224, -6.72901, -11.7763, 1.18 ) }
    dend_21 { pt3dadd( 42.8275, -6.67815, -12.012, 1.18 ) }
    dend_21 { pt3dadd( 43.931, -6.61051, -12.5156, 1.11 ) }
    dend_21 { pt3dadd( 44.8927, -6.61019, -12.9891, 0.81 ) }
    dend_21 { pt3dadd( 46.4116, -6.74651, -13.8569, 0.66 ) }
    dend_21 { pt3dadd( 47.1312, -6.86654, -14.2629, 0.66 ) }
    dend_21 { pt3dadd( 48.0659, -7.07708, -14.7841, 0.66 ) }
    dend_21 { pt3dadd( 48.7565, -7.27082, -15.1607, 0.44 ) }
    dend_21 { pt3dadd( 49.6117, -7.53626, -15.5905, 1.03 ) }
    dend_21 { pt3dadd( 50.2356, -7.72697, -15.8949, 1.18 ) }
    dend_21 { pt3dadd( 50.8999, -7.90481, -16.1986, 1.18 ) }
    dend_21 { pt3dadd( 51.615, -8.07199, -16.5547, 0.96 ) }
    dend_21 { pt3dadd( 52.1668, -8.18096, -16.8368, 0.66 ) }
    dend_21 { pt3dadd( 52.8804, -8.29378, -17.1964, 0.52 ) }
    dend_21 { pt3dadd( 53.6015, -8.33982, -17.5879, 0.81 ) }
    dend_21 { pt3dadd( 54.4071, -8.28712, -18.0367, 0.81 ) }
    dend_21 { pt3dadd( 55.0384, -8.17608, -18.3891, 0.59 ) }
    dend_21 { pt3dadd( 55.7627, -7.99425, -18.7767, 0.44 ) }
    dend_21 { pt3dadd( 56.4022, -7.81652, -19.0956, 0.37 ) }
    dend_21 { pt3dadd( 56.991, -7.67729, -19.3622, 0.37 ) }
    dend_21 { pt3dadd( 57.6472, -7.58177, -19.6142, 0.74 ) }
    dend_21 { pt3dadd( 58.3752, -7.56928, -19.8269, 0.74 ) }
    dend_21 { pt3dadd( 59.0091, -7.65472, -19.9735, 0.74 ) }
    dend_21 { pt3dadd( 59.6776, -7.8947, -20.1449, 0.59 ) }
    dend_21 { pt3dadd( 60.4139, -8.29425, -20.3735, 0.59 ) }
    dend_21 { pt3dadd( 61.2366, -8.79495, -20.6093, 1.03 ) }
    dend_21 { pt3dadd( 61.8547, -9.18095, -20.779, 1.25 ) }
    dend_21 { pt3dadd( 62.3596, -9.49711, -20.9109, 1.4 ) }
    dend_21 { pt3dadd( 63.7811, -10.3176, -21.234, 0.88 ) }
    dend_21 { pt3dadd( 64.8214, -10.8003, -21.4314, 0.37 ) }
    dend_21 { pt3dadd( 65.8752, -11.1158, -21.7166, 0.29 ) }
    dend_21 { pt3dadd( 66.6858, -11.2508, -22.0273, 0.29 ) }
    dend_21 { pt3dadd( 67.1632, -11.307, -22.2763, 0.29 ) }
    dend_21 { pt3dadd( 68.2048, -11.4187, -22.9542, 0.52 ) }
    dend_21 { pt3dadd( 68.8638, -11.531, -23.4262, 0.66 ) }
    dend_21 { pt3dadd( 70.4796, -11.9343, -24.8193, 1.84 ) }
    dend_21 { pt3dadd( 71.3062, -12.1565, -25.6153, 3.32 ) }
    dend_21 { pt3dadd( 72.2393, -12.3717, -26.5594, 3.68 ) }
    dend_21 { pt3dadd( 72.9421, -12.4918, -27.2962, 3.54 ) }
    dend_21 { pt3dadd( 74.409, -12.6612, -28.8955, 1.25 ) }
    dend_21 { pt3dadd( 75.8046, -12.6609, -30.4395, 0.37 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_21 { pt3dadd( 76.5335, -12.5282, -31.2364, 0.22 ) }
    dend_21 { pt3dadd( 77.4266, -12.1783, -32.2207, 1.4 ) }
    dend_21 { pt3dadd( 77.7735, -11.9754, -32.6082, 1.62 ) }
    dend_21 { pt3dadd( 78.1012, -11.7414, -32.9809, 1.62 ) }
    dend_21 { pt3dadd( 79.3538, -10.692, -34.4789, 0.22 ) }
    dend_21 { pt3dadd( 80.2085, -9.99342, -35.4727, 0.22 ) }
    dend_21 { pt3dadd( 80.9718, -9.43059, -36.364, 0.22 ) }
    dend_21 { pt3dadd( 81.843, -8.86531, -37.3468, 1.4 ) }
    dend_21 { pt3dadd( 82.2461, -8.63847, -37.768, 1.84 ) }
    dend_21 { pt3dadd( 82.7764, -8.40275, -38.2423, 2.06 ) }
    dend_21 { pt3dadd( 83.0203, -8.31851, -38.4226, 2.28 ) }
    dend_21 { pt3dadd( 83.5574, -8.16809, -38.7813, 2.28 ) }
    dend_21 { pt3dadd( 85.4361, -7.7274, -39.984, 0.22 ) }
    dend_21 { pt3dadd( 86.4463, -7.51126, -40.5987, 0.22 ) }
    dend_21 { pt3dadd( 87.7753, -7.22973, -41.3826, 0.22 ) }
    dend_21 { pt3dadd( 88.9064, -6.99593, -42.019, 1.55 ) }
    dend_21 { pt3dadd( 89.5175, -6.87359, -42.3534, 1.77 ) }
    dend_21 { pt3dadd( 90.1943, -6.73102, -42.7092, 1.47 ) }
    dend_21 { pt3dadd( 90.7637, -6.58455, -42.9867, 0.81 ) }
    dend_21 { pt3dadd( 91.8575, -6.25348, -43.4955, 0.22 ) }
    dend_21 { pt3dadd( 92.621, -6.00149, -43.8481, 0.88 ) }
    dend_21 { pt3dadd( 93.2026, -5.79695, -44.1115, 0.96 ) }
    dend_21 { pt3dadd( 96.0328, -4.74097, -45.3378, 0.22 ) }
    dend_21 { pt3dadd( 97.9078, -3.96457, -46.1295, 0.22 ) }
    dend_21 { pt3dadd( 99.007, -3.46338, -46.5895, 1.33 ) }
    dend_21 { pt3dadd( 99.6083, -3.17248, -46.8384, 1.99 ) }
    dend_21 { pt3dadd( 100.233, -2.84169, -47.0978, 1.18 ) }
    dend_21 { pt3dadd( 100.946, -2.43925, -47.3943, 0.29 ) }
    dend_21 { pt3dadd( 104.101, -0.540928, -48.7104, 0.22 ) }
    dend_21 { pt3dadd( 104.654, -0.19569, -48.9455, 0.59 ) }
    dend_21 { pt3dadd( 105.106, 0.0919731, -49.1466, 0.59 ) }
    dend_21 { pt3dadd( 106.665, 1.09978, -49.8691, 0.22 ) }
    dend_21 { pt3dadd( 108.117, 2.0404, -50.5093, 0.22 ) }
    dend_21 { pt3dadd( 109.385, 2.87647, -51.052, 0.22 ) }
    dend_21 { pt3dadd( 110.601, 3.68424, -51.5507, 1.99 ) }
    dend_21 { pt3dadd( 111.166, 4.05996, -51.7754, 2.65 ) }
    dend_21 { pt3dadd( 111.776, 4.47325, -52.0119, 2.87 ) }
    dend_21 { pt3dadd( 113.381, 5.54409, -52.6043, 0.59 ) }
    dend_21 { pt3dadd( 114.325, 6.20309, -52.9589, 0.22 ) }
    dend_21 { pt3dadd( 115.048, 6.68069, -53.2544, 0.66 ) }
    dend_21 { pt3dadd( 115.465, 6.94153, -53.4352, 0.96 ) }
    dend_21 { pt3dadd( 115.922, 7.22013, -53.6445, 0.96 ) }
    dend_21 { pt3dadd( 116.413, 7.49478, -53.8824, 0.59 ) }
    dend_21 { pt3dadd( 118.405, 8.5579, -54.9378, 0.22 ) }
    dend_21 { pt3dadd( 120.423, 9.58983, -55.9777, 0.22 ) }
    dend_21 { pt3dadd( 121.241, 9.97763, -56.3875, 0.66 ) }
    dend_21 { pt3dadd( 122.023, 10.3122, -56.7914, 0.66 ) }
    dend_21 { pt3dadd( 123.498, 10.8909, -57.569, 0.22 ) }
    dend_21 { pt3dadd( 123.852, 11.0181, -57.7667, 0.96 ) }
    dend_21 { pt3dadd( 124.769, 11.2929, -58.2951, 1.18 ) }
    dend_21 { pt3dadd( 126.22, 11.6473, -59.258, 0.22 ) }
    dend_21 { pt3dadd( 127.443, 11.8804, -60.1742, 0.96 ) }
    dend_21 { pt3dadd( 128.046, 11.9564, -60.6734, 1.33 ) }
    dend_21 { pt3dadd( 129.033, 12.0235, -61.5657, 1.25 ) }
    dend_21 { pt3dadd( 130.013, 12.0064, -62.4618, 0.52 ) }
    dend_21 { pt3dadd( 131.348, 11.8704, -63.7001, 0.88 ) }
    dend_21 { pt3dadd( 131.812, 11.7673, -64.1295, 1.55 ) }
    dend_21 { pt3dadd( 132.266, 11.6164, -64.5151, 1.77 ) }
    dend_21 { pt3dadd( 132.674, 11.4242, -64.8576, 1.77 ) }
    dend_21 { pt3dadd( 133.851, 10.6912, -65.8181, 0.66 ) }
    dend_21 { pt3dadd( 134.52, 10.1436, -66.351, 0.52 ) }
    dend_21 { pt3dadd( 135.538, 9.17258, -67.0543, 0.37 ) }
    dend_21 { pt3dadd( 136.151, 8.49746, -67.4536, 1.03 ) }
    dend_21 { pt3dadd( 136.764, 7.71147, -67.8373, 1.92 ) }
    dend_21 { pt3dadd( 137.188, 7.08915, -68.0838, 1.92 ) }
    dend_21 { pt3dadd( 137.918, 5.86944, -68.4506, 0.22 ) }
    dend_21 { pt3dadd( 138.408, 5.0052, -68.6502, 0.22 ) }
    dend_21 { pt3dadd( 138.714, 4.49285, -68.737, 0.74 ) }
    dend_21 { pt3dadd( 139.128, 3.88455, -68.8415, 0.74 ) }
    dend_21 { pt3dadd( 139.683, 3.21233, -68.9773, 0.22 ) }
    dend_21 { pt3dadd( 140.029, 2.87176, -69.0869, 0.52 ) }
    dend_21 { pt3dadd( 140.477, 2.54561, -69.2615, 0.52 ) }
    dend_21 { pt3dadd( 141.835, 1.88773, -69.8924, 0.22 ) }
    dend_21 { pt3dadd( 142.68, 1.66478, -70.3164, 1.18 ) }
    dend_21 { pt3dadd( 143.115, 1.62511, -70.5368, 1.4 ) }
    dend_21 { pt3dadd( 143.778, 1.63816, -70.8914, 1.47 ) }
    dend_21 { pt3dadd( 144.682, 1.72284, -71.3917, 0.81 ) }
    dend_21 { pt3dadd( 145.922, 1.94705, -72.1343, 0.22 ) }
    dend_21 { pt3dadd( 146.394, 2.05227, -72.485, 0.22 ) }
    dend_21 { pt3dadd( 146.964, 2.13052, -72.9728, 0.81 ) }
    dend_21 { pt3dadd( 147.552, 2.16621, -73.5033, 1.03 ) }
    dend_21 { pt3dadd( 147.838, 2.16451, -73.7837, 1.03 ) }
    dend_21 { pt3dadd( 148.744, 2.12244, -74.7521, 0.44 ) }
    dend_21 { pt3dadd( 149.846, 2.12162, -75.9799, 0.81 ) }
    dend_21 { pt3dadd( 150.504, 2.17855, -76.7471, 0.37 ) }
    dend_21 { pt3dadd( 151.417, 2.33445, -77.7675, 1.99 ) }
    dend_21 { pt3dadd( 152.031, 2.47363, -78.3767, 1.99 ) }
    dend_21 { pt3dadd( 152.495, 2.59023, -78.8126, 1.4 ) }
    dend_21 { pt3dadd( 153.516, 2.87612, -79.743, 0.29 ) }
    dend_21 { pt3dadd( 154.106, 3.06371, -80.2681, 0.22 ) }
    dend_21 { pt3dadd( 154.95, 3.36048, -81.0968, 0.22 ) }
    dend_21 { pt3dadd( 156.09, 3.78843, -82.3116, 1.4 ) }
    dend_21 { pt3dadd( 156.751, 4.03165, -83.0085, 1.99 ) }
    dend_21 { pt3dadd( 157.369, 4.22514, -83.6501, 2.06 ) }
    dend_21 { pt3dadd( 157.738, 4.32313, -84.0173, 2.06 ) }
    dend_21 { pt3dadd( 158.639, 4.57539, -84.8491, 0.44 ) }
    dend_21 { pt3dadd( 159.365, 4.77914, -85.4772, 0.22 ) }
    dend_21 { pt3dadd( 159.959, 4.91932, -85.8862, 0.66 ) }
    dend_21 { pt3dadd( 160.758, 5.03489, -86.3062, 0.66 ) }
    dend_21 { pt3dadd( 161.45, 5.0562, -86.5971, 0.22 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_21 { pt3dadd( 162.142, 5.02392, -86.8433, 0.66 ) }
    dend_21 { pt3dadd( 162.634, 4.97181, -86.994, 1.11 ) }
    dend_21 { pt3dadd( 163.231, 4.89892, -87.1848, 1.11 ) }
    dend_21 { pt3dadd( 163.855, 4.84654, -87.4002, 1.11 ) }
    dend_21 { pt3dadd( 164.414, 4.82626, -87.6036, 0.88 ) }
    dend_21 { pt3dadd( 165.262, 4.83668, -87.9265, 0.22 ) }
    dend_21 { pt3dadd( 166.031, 4.87591, -88.2168, 0.96 ) }
    dend_21 { pt3dadd( 166.56, 4.92018, -88.4084, 1.11 ) }
    dend_21 { pt3dadd( 167.027, 4.9686, -88.567, 1.11 ) }
    dend_21 { pt3dadd( 167.585, 5.02887, -88.7385, 0.81 ) }
    dend_21 { pt3dadd( 169.094, 5.1647, -89.156, 0.15 ) }
    dend_21 { pt3dadd( 170.292, 5.18299, -89.4491, 0.15 ) }
    dend_21 { pt3dadd( 171.255, 5.12133, -89.6821, 0.74 ) }
    dend_21 { pt3dadd( 171.816, 5.05842, -89.8132, 0.81 ) }
    dend_21 { pt3dadd( 172.374, 4.97438, -89.9475, 0.81 ) }
    dend_21 { pt3dadd( 173.691, 4.72609, -90.2971, 0.22 ) }
    dend_21 { pt3dadd( 175.801, 4.24159, -90.9046, 0.22 ) }
    dend_21 { pt3dadd( 177.325, 3.83448, -91.3641, 0.66 ) }
    dend_21 { pt3dadd( 178.252, 3.53936, -91.6454, 0.66 ) }
    dend_21 { pt3dadd( 179.145, 3.20443, -91.9172, 0.66 ) }
    dend_21 { pt3dadd( 180.016, 2.77956, -92.18, 0.37 ) }
    dend_21 { pt3dadd( 180.611, 2.36102, -92.3395, 0.22 ) }
    dend_21 { pt3dadd( 181.063, 1.91329, -92.4252, 0.37 ) }
    dend_21 { pt3dadd( 181.675, 1.1171, -92.4594, 0.15 ) }
    dend_21 { pt3dadd( 182.013, 0.592067, -92.4513, 0.29 ) }
    dend_21 { pt3dadd( 182.733, -0.724443, -92.3396, 0.22 ) }
    dend_21 { pt3dadd( 183.307, -1.94721, -92.1682, 0.22 ) }
    dend_21 { pt3dadd( 183.495, -2.41933, -92.0973, 0.37 ) }
    dend_21 { pt3dadd( 183.682, -2.94563, -92.0191, 0.37 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 29/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 35.8321, -8.32407, -10.7169, 0.29 ) }
    dend_18 { pt3dadd( 34.8093, -7.57997, -11.966, 0.29 ) }
    dend_18 { pt3dadd( 34.5962, -7.40091, -12.2273, 0.29 ) }
    dend_18 { pt3dadd( 34.3331, -7.15369, -12.5861, 0.74 ) }
    dend_18 { pt3dadd( 34.2042, -7.02375, -12.7964, 0.74 ) }
    dend_18 { pt3dadd( 34.0654, -6.87141, -13.0896, 0.52 ) }
    dend_18 { pt3dadd( 33.925, -6.70802, -13.4339, 1.18 ) }
    dend_18 { pt3dadd( 33.8213, -6.53574, -13.8205, 1.18 ) }
    dend_18 { pt3dadd( 33.7481, -6.35836, -14.2637, 0.88 ) }
    dend_18 { pt3dadd( 33.692, -6.1376, -14.7969, 0.96 ) }
    dend_18 { pt3dadd( 33.6407, -5.89278, -15.3602, 0.74 ) }
    dend_18 { pt3dadd( 33.6318, -5.84316, -15.4607, 1.4 ) }
    dend_18 { pt3dadd( 33.5839, -5.57715, -15.8799, 1.55 ) }
    dend_18 { pt3dadd( 33.5026, -5.23107, -16.3209, 0.59 ) }
    dend_18 { pt3dadd( 33.4286, -4.95775, -16.6278, 0.44 ) }
    dend_18 { pt3dadd( 33.3238, -4.60828, -17.0112, 0.29 ) }
    dend_18 { pt3dadd( 33.2405, -4.33388, -17.2709, 0.29 ) }
    dend_18 { pt3dadd( 33.0879, -3.77379, -17.7677, 1.62 ) }
    dend_18 { pt3dadd( 33.0073, -3.45927, -18.0652, 1.84 ) }
    dend_18 { pt3dadd( 32.8295, -2.78838, -18.7034, 0.59 ) }
    dend_18 { pt3dadd( 32.7342, -2.45171, -19.0281, 0.59 ) }
    dend_18 { pt3dadd( 32.5309, -1.7687, -19.7141, 0.22 ) }
    dend_18 { pt3dadd( 32.2673, -0.896204, -20.6179, 0.22 ) }
    dend_18 { pt3dadd( 31.9804, 0.0613301, -21.6199, 0.22 ) }
    dend_18 { pt3dadd( 31.8123, 0.655775, -22.2129, 1.77 ) }
    dend_18 { pt3dadd( 31.7152, 0.988742, -22.5367, 2.36 ) }
    dend_18 { pt3dadd( 31.5688, 1.47335, -23.0339, 2.58 ) }
    dend_18 { pt3dadd( 31.5336, 1.57704, -23.1659, 2.58 ) }
    // Section: dend_14, id: dend_14, parent: dend_10 (entry count 57/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( -3.62254, -50.406, 4.26157, 0.52 ) }
    dend_14 { pt3dadd( -3.11141, -51.7415, 2.986, 0.52 ) }
    dend_14 { pt3dadd( -2.91262, -52.1995, 2.56824, 0.52 ) }
    dend_14 { pt3dadd( -2.66752, -52.766, 2.08134, 0.74 ) }
    dend_14 { pt3dadd( -2.3206, -53.585, 1.41523, 0.88 ) }
    dend_14 { pt3dadd( -2.12146, -54.0649, 1.0335, 0.88 ) }
    dend_14 { pt3dadd( -1.92416, -54.5376, 0.678294, 0.88 ) }
    dend_14 { pt3dadd( -1.62196, -55.1719, 0.25068, 0.44 ) }
    dend_14 { pt3dadd( -1.40769, -55.5991, -0.0225499, 0.44 ) }
    dend_14 { pt3dadd( -1.18578, -55.999, -0.281007, 0.81 ) }
    dend_14 { pt3dadd( -0.964162, -56.3308, -0.514979, 0.96 ) }
    dend_14 { pt3dadd( -0.511365, -56.9496, -0.966753, 0.96 ) }
    dend_14 { pt3dadd( 0.0694949, -57.7342, -1.51439, 0.44 ) }
    dend_14 { pt3dadd( 0.540811, -58.3882, -1.95208, 0.44 ) }
    dend_14 { pt3dadd( 1.05998, -59.1588, -2.42795, 0.66 ) }
    dend_14 { pt3dadd( 1.54156, -59.9143, -2.88676, 0.66 ) }
    dend_14 { pt3dadd( 2.04299, -60.6849, -3.3123, 0.52 ) }
    dend_14 { pt3dadd( 2.53493, -61.4654, -3.72368, 0.81 ) }
    dend_14 { pt3dadd( 3.00599, -62.2569, -4.12485, 0.81 ) }
    dend_14 { pt3dadd( 3.69818, -63.4734, -4.68781, 0.52 ) }
    dend_14 { pt3dadd( 4.0909, -64.2217, -5.01328, 0.52 ) }
    dend_14 { pt3dadd( 4.7097, -65.459, -5.53365, 0.52 ) }
    dend_14 { pt3dadd( 5.06652, -66.1291, -5.8166, 1.47 ) }
    dend_14 { pt3dadd( 5.39045, -66.7325, -6.06961, 1.92 ) }
    dend_14 { pt3dadd( 5.78643, -67.52, -6.35818, 2.58 ) }
    dend_14 { pt3dadd( 6.04684, -68.1195, -6.53875, 2.58 ) }
    dend_14 { pt3dadd( 6.42857, -69.1741, -6.79494, 0.96 ) }
    dend_14 { pt3dadd( 6.69708, -70.1329, -7.00991, 0.52 ) }
    dend_14 { pt3dadd( 6.92128, -71.0508, -7.17797, 0.88 ) }
    dend_14 { pt3dadd( 7.12443, -72.0731, -7.33412, 0.88 ) }
    dend_14 { pt3dadd( 7.27954, -73.1065, -7.48235, 0.88 ) }
    dend_14 { pt3dadd( 7.36052, -73.8052, -7.56711, 0.74 ) }
    dend_14 { pt3dadd( 7.43365, -74.8651, -7.69865, 0.74 ) }
    dend_14 { pt3dadd( 7.45179, -75.8233, -7.86606, 1.11 ) }
    dend_14 { pt3dadd( 7.45471, -76.6269, -8.03795, 1.11 ) }
    dend_14 { pt3dadd( 7.44904, -77.3827, -8.22332, 0.81 ) }
    dend_14 { pt3dadd( 7.44302, -77.9524, -8.37253, 0.81 ) }
    dend_14 { pt3dadd( 7.4354, -79.0709, -8.68261, 0.74 ) }
    dend_14 { pt3dadd( 7.44278, -80.6184, -9.11768, 0.59 ) }
    dend_14 { pt3dadd( 7.47572, -82.1111, -9.54665, 0.44 ) }
    dend_14 { pt3dadd( 7.51245, -83.5266, -9.95984, 1.77 ) }
    dend_14 { pt3dadd( 7.52, -83.9743, -10.0854, 2.14 ) }
    dend_14 { pt3dadd( 7.51605, -84.9754, -10.3403, 1.62 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_14 { pt3dadd( 7.4706, -86.3307, -10.651, 0.22 ) }
    dend_14 { pt3dadd( 7.40348, -87.3263, -10.8515, 0.22 ) }
    dend_14 { pt3dadd( 7.30086, -88.2652, -11.0643, 0.96 ) }
    dend_14 { pt3dadd( 7.20867, -88.9672, -11.2345, 1.18 ) }
    dend_14 { pt3dadd( 7.09464, -89.7875, -11.4217, 0.96 ) }
    dend_14 { pt3dadd( 6.92228, -90.9709, -11.6648, 0.22 ) }
    dend_14 { pt3dadd( 6.78529, -91.8278, -11.8195, 0.59 ) }
    dend_14 { pt3dadd( 6.72831, -92.2379, -11.8822, 0.59 ) }
    dend_14 { pt3dadd( 6.65584, -92.9949, -11.9842, 0.22 ) }
    dend_14 { pt3dadd( 6.59692, -94.1443, -12.1292, 0.29 ) }
    dend_14 { pt3dadd( 6.58735, -94.7175, -12.1868, 0.29 ) }
    dend_14 { pt3dadd( 6.6047, -95.4843, -12.2028, 1.84 ) }
    dend_14 { pt3dadd( 6.63859, -96.2218, -12.1969, 2.5 ) }
    dend_14 { pt3dadd( 6.65477, -96.531, -12.1901, 2.73 ) }
    dend_14 { pt3dadd( 6.67935, -96.9949, -12.1768, 2.65 ) }
    dend_14 { pt3dadd( 6.74079, -98.0065, -12.1465, 1.77 ) }
    dend_14 { pt3dadd( 6.88193, -99.9362, -12.0918, 0.22 ) }
    dend_14 { pt3dadd( 7.0543, -101.935, -12.0379, 0.22 ) }
    dend_14 { pt3dadd( 7.13323, -102.819, -12.018, 0.52 ) }
    dend_14 { pt3dadd( 7.20365, -103.451, -12.0093, 0.66 ) }
    dend_14 { pt3dadd( 7.31286, -104.211, -12.0161, 0.29 ) }
    dend_14 { pt3dadd( 7.48572, -105.147, -12.059, 1.47 ) }
    dend_14 { pt3dadd( 7.59645, -105.643, -12.1089, 2.14 ) }
    dend_14 { pt3dadd( 7.73045, -106.114, -12.163, 2.21 ) }
    dend_14 { pt3dadd( 7.97943, -106.907, -12.2633, 1.55 ) }
    dend_14 { pt3dadd( 8.44664, -108.372, -12.4512, 0.22 ) }
    dend_14 { pt3dadd( 8.56761, -108.792, -12.509, 0.52 ) }
    dend_14 { pt3dadd( 8.67133, -109.21, -12.5662, 0.52 ) }
    dend_14 { pt3dadd( 9.02424, -110.903, -12.7793, 0.22 ) }
    dend_14 { pt3dadd( 9.09964, -111.324, -12.8314, 0.66 ) }
    dend_14 { pt3dadd( 9.16139, -111.823, -12.891, 0.66 ) }
    dend_14 { pt3dadd( 9.31958, -113.819, -13.1355, 0.22 ) }
    dend_14 { pt3dadd( 9.40368, -115.705, -13.3899, 0.22 ) }
    dend_14 { pt3dadd( 9.41293, -116.71, -13.5516, 0.81 ) }
    dend_14 { pt3dadd( 9.39715, -117.219, -13.6546, 1.03 ) }
    dend_14 { pt3dadd( 9.34852, -118.184, -13.9328, 0.22 ) }
    dend_14 { pt3dadd( 9.311, -118.905, -14.2136, 0.22 ) }
    dend_14 { pt3dadd( 9.29742, -119.753, -14.6297, 1.47 ) }
    dend_14 { pt3dadd( 9.34422, -120.398, -14.9896, 2.28 ) }
    dend_14 { pt3dadd( 9.43423, -120.912, -15.2864, 2.28 ) }
    dend_14 { pt3dadd( 10.0194, -123.16, -16.5918, 0.22 ) }
    dend_14 { pt3dadd( 10.3536, -124.207, -17.1533, 0.22 ) }
    dend_14 { pt3dadd( 10.7659, -125.4, -17.7287, 0.22 ) }
    dend_14 { pt3dadd( 11.2295, -126.681, -18.2622, 0.22 ) }
    dend_14 { pt3dadd( 11.5494, -127.547, -18.5659, 2.28 ) }
    dend_14 { pt3dadd( 11.8413, -128.339, -18.7857, 2.5 ) }
    dend_14 { pt3dadd( 12.5935, -130.452, -19.1744, 0.29 ) }
    dend_14 { pt3dadd( 12.7281, -130.96, -19.2523, 0.29 ) }
    dend_14 { pt3dadd( 12.879, -131.911, -19.3897, 1.55 ) }
    dend_14 { pt3dadd( 12.9143, -132.368, -19.4543, 2.06 ) }
    dend_14 { pt3dadd( 12.9281, -133.006, -19.5672, 1.69 ) }
    dend_14 { pt3dadd( 12.9164, -133.696, -19.7129, 0.88 ) }
    dend_14 { pt3dadd( 12.7973, -135.61, -20.1933, 0.22 ) }
    dend_14 { pt3dadd( 12.7501, -136.12, -20.3254, 0.66 ) }
    dend_14 { pt3dadd( 12.6902, -136.63, -20.4577, 0.66 ) }
    dend_14 { pt3dadd( 12.4319, -138.516, -20.9473, 0.22 ) }
    dend_14 { pt3dadd( 12.2224, -139.894, -21.2987, 0.22 ) }
    dend_14 { pt3dadd( 12.0606, -140.866, -21.5424, 0.22 ) }
    dend_14 { pt3dadd( 11.9674, -141.363, -21.6432, 0.44 ) }
    dend_14 { pt3dadd( 11.8207, -142.036, -21.771, 0.44 ) }
    dend_14 { pt3dadd( 11.5635, -143.046, -21.9312, 1.11 ) }
    dend_14 { pt3dadd( 11.4578, -143.404, -21.9771, 1.55 ) }
    dend_14 { pt3dadd( 11.2373, -144.052, -22.0647, 1.69 ) }
    dend_14 { pt3dadd( 10.5077, -146.024, -22.3788, 0.15 ) }
    dend_14 { pt3dadd( 9.55248, -148.43, -22.7905, 0.15 ) }
    dend_14 { pt3dadd( 8.99813, -149.756, -23.0308, 2.5 ) }
    dend_14 { pt3dadd( 8.76976, -150.291, -23.1309, 2.5 ) }
    dend_14 { pt3dadd( 8.11623, -151.814, -23.4407, 0.15 ) }
    dend_14 { pt3dadd( 7.89233, -152.365, -23.5703, 0.15 ) }
    dend_14 { pt3dadd( 7.72254, -152.836, -23.7124, 0.66 ) }
    dend_14 { pt3dadd( 7.61843, -153.242, -23.8409, 0.88 ) }
    dend_14 { pt3dadd( 7.53945, -153.746, -24.0053, 0.88 ) }
    dend_14 { pt3dadd( 7.50079, -154.197, -24.1244, 0.52 ) }
    dend_14 { pt3dadd( 7.41817, -155.58, -24.3377, 0.22 ) }
    dend_14 { pt3dadd( 7.33829, -156.412, -24.3963, 0.22 ) }
    dend_14 { pt3dadd( 7.23416, -157.172, -24.421, 0.96 ) }
    dend_14 { pt3dadd( 7.16896, -157.542, -24.4259, 1.11 ) }
    dend_14 { pt3dadd( 6.88583, -158.856, -24.4327, 0.22 ) }
    dend_14 { pt3dadd( 6.00043, -162.055, -24.4281, 0.22 ) }
    dend_14 { pt3dadd( 4.89161, -164.987, -24.3499, 0.22 ) }
    dend_14 { pt3dadd( 4.47781, -165.86, -24.3118, 1.47 ) }
    dend_14 { pt3dadd( 4.08811, -166.567, -24.2743, 1.62 ) }
    dend_14 { pt3dadd( 3.24005, -167.893, -24.1854, 0.22 ) }
    dend_14 { pt3dadd( 1.64842, -169.998, -24.0038, 0.22 ) }
    dend_14 { pt3dadd( -0.523878, -172.368, -23.736, 0.22 ) }
    dend_14 { pt3dadd( -1.77983, -173.568, -23.5783, 0.88 ) }
    dend_14 { pt3dadd( -2.17163, -173.924, -23.524, 0.88 ) }
    dend_14 { pt3dadd( -3.34988, -174.912, -23.3108, 0.22 ) }
    dend_14 { pt3dadd( -3.88226, -175.311, -23.1994, 0.88 ) }
    dend_14 { pt3dadd( -4.25619, -175.564, -23.1188, 0.88 ) }
    dend_14 { pt3dadd( -6.04514, -176.691, -22.7636, 0.22 ) }
    dend_14 { pt3dadd( -7.12717, -177.314, -22.5558, 0.22 ) }
    dend_14 { pt3dadd( -8.28567, -177.889, -22.3431, 1.55 ) }
    dend_14 { pt3dadd( -8.70597, -178.06, -22.2709, 2.06 ) }
    dend_14 { pt3dadd( -9.48398, -178.33, -22.1421, 2.06 ) }
    dend_14 { pt3dadd( -9.71905, -178.382, -22.1116, 2.06 ) }
    dend_14 { pt3dadd( -10.806, -178.461, -22.0101, 0.22 ) }
    dend_14 { pt3dadd( -11.9932, -178.454, -21.9446, 0.22 ) }
    dend_14 { pt3dadd( -12.6819, -178.422, -21.9254, 0.74 ) }
    dend_14 { pt3dadd( -13.0838, -178.385, -21.9097, 0.74 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_9()
}

proc basic_shape_9() {
    dend_14 { pt3dadd( -14.9431, -178.111, -21.8458, 0.15 ) }
    dend_14 { pt3dadd( -15.4831, -178.014, -21.8363, 0.52 ) }
    dend_14 { pt3dadd( -15.8145, -177.94, -21.8393, 0.52 ) }
    dend_14 { pt3dadd( -16.7367, -177.693, -21.8685, 0.22 ) }
    dend_14 { pt3dadd( -17.2707, -177.55, -21.9111, 0.66 ) }
    dend_14 { pt3dadd( -17.9184, -177.383, -21.9744, 0.66 ) }
    dend_14 { pt3dadd( -18.666, -177.195, -22.0547, 0.22 ) }
    dend_14 { pt3dadd( -19.2143, -177.059, -22.1247, 1.18 ) }
    dend_14 { pt3dadd( -19.7317, -176.932, -22.1992, 1.33 ) }
    dend_14 { pt3dadd( -21.4607, -176.519, -22.4775, 0.22 ) }
    dend_14 { pt3dadd( -22.0461, -176.399, -22.5721, 0.96 ) }
    dend_14 { pt3dadd( -22.63, -176.298, -22.6603, 1.03 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 12/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( -3.62254, -50.406, 4.26157, 1.4 ) }
    dend_11 { pt3dadd( -3.81138, -50.8331, 4.23732, 1.4 ) }
    dend_11 { pt3dadd( -4.39806, -52.3443, 4.15375, 0.66 ) }
    dend_11 { pt3dadd( -4.781, -53.4245, 4.10038, 0.66 ) }
    dend_11 { pt3dadd( -5.1424, -54.5449, 4.04779, 0.66 ) }
    dend_11 { pt3dadd( -5.40806, -55.4431, 4.04899, 0.59 ) }
    dend_11 { pt3dadd( -5.72084, -56.5006, 4.05041, 0.59 ) }
    dend_11 { pt3dadd( -5.95761, -57.4127, 4.06696, 0.59 ) }
    dend_11 { pt3dadd( -6.11543, -58.1728, 4.11205, 0.96 ) }
    dend_11 { pt3dadd( -6.24236, -58.9377, 4.16239, 1.18 ) }
    dend_11 { pt3dadd( -6.40634, -60.1909, 4.26715, 1.33 ) }
    // Section: dend_3, id: dend_3, parent: dend_1 (entry count 23/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 7.44182, 19.7877, -0.322316, 1.4 ) }
    dend_3 { pt3dadd( 8.17263, 20.0414, 0.0175111, 1.4 ) }
    dend_3 { pt3dadd( 9.90547, 20.6041, 0.868599, 1.11 ) }
    dend_3 { pt3dadd( 10.5853, 20.8445, 1.21755, 0.81 ) }
    dend_3 { pt3dadd( 11.4112, 21.1812, 1.64151, 1.11 ) }
    dend_3 { pt3dadd( 12.3441, 21.6133, 2.10946, 0.74 ) }
    dend_3 { pt3dadd( 12.715, 21.8038, 2.29163, 0.74 ) }
    dend_3 { pt3dadd( 13.5492, 22.2468, 2.66806, 0.66 ) }
    dend_3 { pt3dadd( 14.1208, 22.5582, 2.89619, 0.66 ) }
    dend_3 { pt3dadd( 14.8641, 23.0198, 3.20645, 0.74 ) }
    dend_3 { pt3dadd( 15.4709, 23.4619, 3.46027, 0.74 ) }
    dend_3 { pt3dadd( 16.0248, 23.938, 3.69761, 0.59 ) }
    dend_3 { pt3dadd( 16.8205, 24.6506, 4.01546, 0.59 ) }
    dend_3 { pt3dadd( 17.7062, 25.4214, 4.33758, 0.74 ) }
    dend_3 { pt3dadd( 18.334, 25.9253, 4.55722, 0.74 ) }
    dend_3 { pt3dadd( 19.0526, 26.455, 4.80558, 0.74 ) }
    dend_3 { pt3dadd( 19.8104, 26.9818, 5.09001, 0.44 ) }
    dend_3 { pt3dadd( 20.5663, 27.4809, 5.3751, 0.44 ) }
    dend_3 { pt3dadd( 21.2732, 27.9445, 5.64073, 0.81 ) }
    dend_3 { pt3dadd( 21.8812, 28.3178, 5.85154, 1.11 ) }
    dend_3 { pt3dadd( 22.7663, 28.8449, 6.15259, 1.11 ) }
    dend_3 { pt3dadd( 23.637, 29.3916, 6.44192, 0.88 ) }
    dend_3 { pt3dadd( 24.3672, 29.8971, 6.70417, 0.88 ) }
    dend_3 { pt3dadd( 25.02, 30.4636, 6.98861, 0.74 ) }
    dend_3 { pt3dadd( 25.6236, 31.0946, 7.29769, 0.74 ) }
    dend_3 { pt3dadd( 26.2239, 31.7988, 7.6027, 0.59 ) }
    dend_3 { pt3dadd( 26.6951, 32.3995, 7.80967, 0.44 ) }
    dend_3 { pt3dadd( 27.112, 32.9761, 7.97553, 0.44 ) }
    dend_3 { pt3dadd( 27.6216, 33.7769, 8.21347, 0.44 ) }
    dend_3 { pt3dadd( 28.1236, 34.6439, 8.47416, 0.44 ) }
    dend_3 { pt3dadd( 28.6402, 35.5862, 8.77359, 0.44 ) }
    dend_3 { pt3dadd( 29.0505, 36.339, 9.02659, 0.59 ) }
    dend_3 { pt3dadd( 29.6358, 37.2965, 9.37933, 0.81 ) }
    dend_3 { pt3dadd( 30.0747, 37.9216, 9.63345, 1.25 ) }
    dend_3 { pt3dadd( 30.4532, 38.4056, 9.86133, 1.25 ) }
    dend_3 { pt3dadd( 31.1387, 39.2789, 10.3636, 0.74 ) }
    dend_3 { pt3dadd( 31.617, 39.878, 10.7762, 0.52 ) }
    dend_3 { pt3dadd( 32.0342, 40.354, 11.1181, 0.74 ) }
    dend_3 { pt3dadd( 32.5217, 40.8049, 11.4301, 0.74 ) }
    dend_3 { pt3dadd( 32.8831, 41.1431, 11.6102, 0.74 ) }
    dend_3 { pt3dadd( 33.3236, 41.6889, 11.7874, 0.44 ) }
    dend_3 { pt3dadd( 33.654, 42.3337, 11.901, 0.44 ) }
    dend_3 { pt3dadd( 33.8988, 43.0792, 12.0, 0.44 ) }
    dend_3 { pt3dadd( 34.0335, 43.6885, 12.0767, 0.44 ) }
    dend_3 { pt3dadd( 34.2355, 44.9138, 12.2289, 0.81 ) }
    dend_3 { pt3dadd( 34.4033, 46.0041, 12.3746, 0.81 ) }
    dend_3 { pt3dadd( 34.5506, 46.8707, 12.5077, 1.03 ) }
    dend_3 { pt3dadd( 34.7366, 47.5831, 12.6373, 0.74 ) }
    dend_3 { pt3dadd( 34.9881, 48.2583, 12.7795, 0.52 ) }
    dend_3 { pt3dadd( 35.352, 48.9389, 12.933, 0.52 ) }
    dend_3 { pt3dadd( 35.687, 49.3358, 13.028, 0.88 ) }
    dend_3 { pt3dadd( 36.0288, 49.6543, 13.1143, 0.88 ) }
    dend_3 { pt3dadd( 36.8811, 50.389, 13.3279, 0.37 ) }
    dend_3 { pt3dadd( 37.5387, 50.9559, 13.527, 0.37 ) }
    dend_3 { pt3dadd( 38.0946, 51.4715, 13.7474, 0.37 ) }
    dend_3 { pt3dadd( 38.4851, 51.8557, 13.9324, 0.37 ) }
    dend_3 { pt3dadd( 39.1105, 52.6891, 14.3654, 0.66 ) }
    dend_3 { pt3dadd( 39.3067, 53.1952, 14.6517, 1.03 ) }
    dend_3 { pt3dadd( 39.2546, 53.7174, 14.9935, 1.25 ) }
    dend_3 { pt3dadd( 39.1711, 53.9402, 15.1485, 1.25 ) }
    dend_3 { pt3dadd( 45.3879, 61.9494, 18.5465, 1.25 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 84/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 7.44182, 19.7877, -0.322316, 0.81 ) }
    dend_2 { pt3dadd( 7.24304, 20.9473, -0.0628888, 0.81 ) }
    dend_2 { pt3dadd( 7.1712, 21.4484, 0.0534345, 0.81 ) }
    dend_2 { pt3dadd( 7.10913, 21.9206, 0.169079, 0.81 ) }
    dend_2 { pt3dadd( 6.98318, 22.8486, 0.401773, 0.74 ) }
    dend_2 { pt3dadd( 6.88802, 23.4568, 0.579443, 0.74 ) }
    dend_2 { pt3dadd( 6.81056, 24.0186, 0.756317, 0.81 ) }
    dend_2 { pt3dadd( 6.79342, 24.3425, 0.874373, 0.81 ) }
    dend_2 { pt3dadd( 6.81505, 24.8095, 1.04333, 0.52 ) }
    dend_2 { pt3dadd( 6.85912, 25.1229, 1.15026, 0.52 ) }
    dend_2 { pt3dadd( 7.01921, 25.7593, 1.33699, 0.44 ) }
    dend_2 { pt3dadd( 7.19346, 26.1945, 1.40846, 0.37 ) }
    dend_2 { pt3dadd( 7.35184, 26.4813, 1.41293, 0.37 ) }
    dend_2 { pt3dadd( 7.83038, 27.2083, 1.32593, 1.25 ) }
    dend_2 { pt3dadd( 8.09302, 27.5819, 1.23632, 1.69 ) }
    dend_2 { pt3dadd( 8.33725, 27.9293, 1.12774, 1.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_10()
}

proc basic_shape_10() {
    dend_2 { pt3dadd( 8.90028, 28.7547, 0.823197, 0.88 ) }
    dend_2 { pt3dadd( 9.21002, 29.2544, 0.630292, 0.37 ) }
    dend_2 { pt3dadd( 9.47615, 29.7103, 0.440939, 0.37 ) }
    dend_2 { pt3dadd( 9.65496, 30.0253, 0.300778, 0.37 ) }
    dend_2 { pt3dadd( 9.93548, 30.5856, 0.0684223, 0.81 ) }
    dend_2 { pt3dadd( 10.0903, 30.9224, -0.0560819, 1.03 ) }
    dend_2 { pt3dadd( 10.2307, 31.2285, -0.141832, 1.18 ) }
    dend_2 { pt3dadd( 10.3653, 31.5032, -0.217736, 1.18 ) }
    dend_2 { pt3dadd( 10.5594, 31.8729, -0.314329, 0.59 ) }
    dend_2 { pt3dadd( 10.8514, 32.3851, -0.460029, 0.29 ) }
    dend_2 { pt3dadd( 11.0419, 32.7261, -0.590678, 0.29 ) }
    dend_2 { pt3dadd( 11.4015, 33.391, -0.878091, 0.29 ) }
    dend_2 { pt3dadd( 11.7393, 34.0449, -1.17399, 0.66 ) }
    dend_2 { pt3dadd( 11.9315, 34.431, -1.36176, 0.66 ) }
    dend_2 { pt3dadd( 12.1584, 34.9152, -1.60594, 1.25 ) }
    dend_2 { pt3dadd( 12.588, 35.9041, -2.08135, 2.36 ) }
    dend_2 { pt3dadd( 12.7029, 36.2019, -2.21171, 2.58 ) }
    dend_2 { pt3dadd( 12.8961, 36.7618, -2.43543, 1.99 ) }
    dend_2 { pt3dadd( 13.0983, 37.415, -2.64521, 0.88 ) }
    dend_2 { pt3dadd( 13.3419, 38.2996, -2.83903, 0.29 ) }
    dend_2 { pt3dadd( 13.575, 39.2209, -2.95019, 0.81 ) }
    dend_2 { pt3dadd( 13.6966, 39.7237, -2.97293, 0.81 ) }
    dend_2 { pt3dadd( 13.7671, 40.0339, -2.97765, 0.44 ) }
    dend_2 { pt3dadd( 13.9134, 40.7237, -2.96536, 0.22 ) }
    dend_2 { pt3dadd( 14.1656, 41.9703, -2.91049, 0.22 ) }
    dend_2 { pt3dadd( 14.3245, 42.7393, -2.88587, 1.25 ) }
    dend_2 { pt3dadd( 14.3923, 43.0518, -2.88568, 1.69 ) }
    dend_2 { pt3dadd( 14.4527, 43.3197, -2.89587, 1.69 ) }
    dend_2 { pt3dadd( 14.5628, 43.7605, -2.92778, 0.96 ) }
    dend_2 { pt3dadd( 14.6881, 44.2259, -2.97838, 0.52 ) }
    dend_2 { pt3dadd( 14.9253, 45.0018, -3.08337, 0.29 ) }
    dend_2 { pt3dadd( 15.1576, 45.708, -3.18278, 0.29 ) }
    dend_2 { pt3dadd( 15.4182, 46.4624, -3.30171, 0.29 ) }
    dend_2 { pt3dadd( 15.5896, 46.9379, -3.39232, 0.81 ) }
    dend_2 { pt3dadd( 15.6984, 47.2316, -3.45854, 0.81 ) }
    dend_2 { pt3dadd( 16.0231, 48.0831, -3.67822, 0.22 ) }
    dend_2 { pt3dadd( 16.3385, 48.8591, -3.9088, 0.22 ) }
    dend_2 { pt3dadd( 16.6539, 49.5896, -4.14748, 1.69 ) }
    dend_2 { pt3dadd( 16.8693, 50.0743, -4.31499, 2.43 ) }
    dend_2 { pt3dadd( 17.0392, 50.4611, -4.44933, 2.28 ) }
    dend_2 { pt3dadd( 17.2868, 51.012, -4.63412, 0.96 ) }
    dend_2 { pt3dadd( 17.6307, 51.7745, -4.87025, 0.22 ) }
    dend_2 { pt3dadd( 17.8291, 52.2078, -4.98947, 0.66 ) }
    dend_2 { pt3dadd( 17.9461, 52.4558, -5.04632, 0.66 ) }
    dend_2 { pt3dadd( 18.3392, 53.2919, -5.20934, 0.22 ) }
    dend_2 { pt3dadd( 18.5957, 53.8389, -5.30561, 1.11 ) }
    dend_2 { pt3dadd( 18.793, 54.2709, -5.37944, 1.62 ) }
    dend_2 { pt3dadd( 18.9495, 54.5991, -5.43331, 1.99 ) }
    dend_2 { pt3dadd( 19.0605, 54.8214, -5.46931, 1.99 ) }
    dend_2 { pt3dadd( 19.3098, 55.2929, -5.54132, 1.4 ) }
    dend_2 { pt3dadd( 19.4993, 55.6311, -5.58952, 0.59 ) }
    dend_2 { pt3dadd( 20.0404, 56.5585, -5.70907, 0.22 ) }
    dend_2 { pt3dadd( 20.7127, 57.644, -5.82735, 0.22 ) }
    dend_2 { pt3dadd( 21.1409, 58.3067, -5.8909, 0.22 ) }
    dend_2 { pt3dadd( 21.4971, 58.8387, -5.93582, 0.74 ) }
    dend_2 { pt3dadd( 21.7017, 59.1302, -5.95856, 0.74 ) }
    dend_2 { pt3dadd( 21.9544, 59.4753, -5.98778, 0.37 ) }
    dend_2 { pt3dadd( 22.5671, 60.2647, -6.08025, 0.22 ) }
    dend_2 { pt3dadd( 23.1658, 60.9987, -6.20185, 1.25 ) }
    dend_2 { pt3dadd( 23.3366, 61.2006, -6.24284, 1.69 ) }
    dend_2 { pt3dadd( 23.5765, 61.4863, -6.3051, 1.69 ) }
    dend_2 { pt3dadd( 23.9163, 61.8961, -6.40397, 0.81 ) }
    dend_2 { pt3dadd( 24.5055, 62.6158, -6.60017, 0.22 ) }
    dend_2 { pt3dadd( 24.7751, 62.9506, -6.69915, 0.66 ) }
    dend_2 { pt3dadd( 24.993, 63.2186, -6.78036, 0.66 ) }
    dend_2 { pt3dadd( 25.5297, 63.8747, -6.98753, 0.22 ) }
    dend_2 { pt3dadd( 26.1913, 64.6632, -7.21792, 1.92 ) }
    dend_2 { pt3dadd( 26.4201, 64.9423, -7.28398, 2.36 ) }
    dend_2 { pt3dadd( 26.6947, 65.2861, -7.34699, 2.58 ) }
    dend_2 { pt3dadd( 26.945, 65.6064, -7.39824, 2.28 ) }
    dend_2 { pt3dadd( 27.231, 65.9944, -7.44573, 1.47 ) }
    dend_2 { pt3dadd( 27.9763, 67.0772, -7.53641, 0.15 ) }
    dend_2 { pt3dadd( 28.6238, 68.0632, -7.58059, 0.15 ) }
    dend_2 { pt3dadd( 29.0056, 68.6708, -7.59197, 0.66 ) }
    dend_2 { pt3dadd( 29.1326, 68.8831, -7.58944, 0.66 ) }
    dend_2 { pt3dadd( 30.0439, 70.4727, -7.5149, 0.22 ) }
    dend_2 { pt3dadd( 30.5399, 71.3545, -7.43557, 0.22 ) }
    dend_2 { pt3dadd( 30.9878, 72.1642, -7.3303, 0.22 ) }
    dend_2 { pt3dadd( 31.3687, 72.8217, -7.21457, 0.52 ) }
    dend_2 { pt3dadd( 31.7452, 73.4403, -7.07358, 0.22 ) }
    dend_2 { pt3dadd( 32.1543, 74.066, -6.89706, 1.4 ) }
    dend_2 { pt3dadd( 32.4255, 74.4036, -6.77899, 1.62 ) }
    dend_2 { pt3dadd( 32.5805, 74.5773, -6.71883, 1.62 ) }
    dend_2 { pt3dadd( 33.178, 75.2047, -6.52688, 0.22 ) }
    dend_2 { pt3dadd( 33.5047, 75.531, -6.44478, 0.66 ) }
    dend_2 { pt3dadd( 33.6895, 75.7139, -6.40999, 0.66 ) }
    dend_2 { pt3dadd( 34.9555, 77.0068, -6.22569, 0.15 ) }
    dend_2 { pt3dadd( 35.6108, 77.7061, -6.15525, 0.15 ) }
    dend_2 { pt3dadd( 36.0537, 78.2, -6.12757, 0.74 ) }
    dend_2 { pt3dadd( 36.2278, 78.4029, -6.12306, 1.03 ) }
    dend_2 { pt3dadd( 36.4105, 78.6302, -6.12493, 1.03 ) }
    dend_2 { pt3dadd( 37.243, 79.7396, -6.15422, 0.22 ) }
    dend_2 { pt3dadd( 37.922, 80.6296, -6.19984, 0.22 ) }
    dend_2 { pt3dadd( 38.4755, 81.296, -6.2465, 1.4 ) }
    dend_2 { pt3dadd( 38.7962, 81.6571, -6.27524, 1.69 ) }
    dend_2 { pt3dadd( 39.1216, 81.9967, -6.3055, 1.84 ) }
    dend_2 { pt3dadd( 39.5647, 82.4203, -6.34841, 1.11 ) }
    dend_2 { pt3dadd( 41.7003, 84.2426, -6.56652, 0.22 ) }
    dend_2 { pt3dadd( 42.1338, 84.5484, -6.60349, 0.22 ) }
    dend_2 { pt3dadd( 42.6314, 84.8284, -6.63601, 0.96 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_11()
}

proc basic_shape_11() {
    dend_2 { pt3dadd( 42.9899, 84.9895, -6.65857, 1.18 ) }
    dend_2 { pt3dadd( 43.3222, 85.0999, -6.67207, 1.18 ) }
    dend_2 { pt3dadd( 43.6527, 85.1759, -6.67958, 0.59 ) }
    dend_2 { pt3dadd( 45.0572, 85.3395, -6.68973, 0.22 ) }
    dend_2 { pt3dadd( 45.9169, 85.4309, -6.68803, 0.59 ) }
    dend_2 { pt3dadd( 46.3472, 85.4749, -6.68462, 0.59 ) }
    dend_2 { pt3dadd( 47.8838, 85.6437, -6.67274, 0.15 ) }
    dend_2 { pt3dadd( 48.3674, 85.7036, -6.66919, 0.88 ) }
    dend_2 { pt3dadd( 48.8009, 85.7709, -6.666, 1.47 ) }
    dend_2 { pt3dadd( 49.0928, 85.8583, -6.66071, 1.47 ) }
    dend_2 { pt3dadd( 49.2867, 85.9511, -6.65762, 1.47 ) }
    dend_2 { pt3dadd( 50.2498, 86.5166, -6.64849, 0.15 ) }
    dend_2 { pt3dadd( 50.5655, 86.732, -6.64751, 0.44 ) }
    dend_2 { pt3dadd( 50.8902, 86.9733, -6.64499, 0.37 ) }
    dend_2 { pt3dadd( 52.8891, 88.5872, -6.61366, 0.22 ) }
    dend_2 { pt3dadd( 54.3013, 89.8204, -6.56537, 0.22 ) }
    dend_2 { pt3dadd( 54.6879, 90.1751, -6.54923, 0.96 ) }
    dend_2 { pt3dadd( 54.9718, 90.4567, -6.53372, 1.4 ) }
    dend_2 { pt3dadd( 55.0698, 90.5565, -6.52787, 1.4 ) }
    dend_2 { pt3dadd( 55.8578, 91.383, -6.4763, 0.22 ) }
    dend_2 { pt3dadd( 56.3075, 91.9348, -6.43885, 0.22 ) }
    // Section: dend_20, id: dend_20, parent: dend_18 (entry count 21/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 31.5336, 1.57704, -23.1659, 0.15 ) }
    dend_20 { pt3dadd( 32.7162, 0.405415, -25.0178, 0.15 ) }
    dend_20 { pt3dadd( 33.2584, -0.0853195, -25.7379, 1.18 ) }
    dend_20 { pt3dadd( 34.1648, -0.883368, -26.8431, 0.37 ) }
    dend_20 { pt3dadd( 34.9278, -1.58284, -27.7319, 0.74 ) }
    dend_20 { pt3dadd( 35.7841, -2.37214, -28.6186, 0.88 ) }
    dend_20 { pt3dadd( 36.4251, -2.99766, -29.2228, 0.22 ) }
    dend_20 { pt3dadd( 36.8261, -3.415, -29.577, 0.22 ) }
    dend_20 { pt3dadd( 37.2973, -3.91186, -29.9439, 0.96 ) }
    dend_20 { pt3dadd( 37.7966, -4.41142, -30.2717, 1.11 ) }
    dend_20 { pt3dadd( 38.6283, -5.24343, -30.7793, 0.22 ) }
    dend_20 { pt3dadd( 39.5224, -6.17091, -31.3641, 0.22 ) }
    dend_20 { pt3dadd( 39.9542, -6.70154, -31.7252, 0.96 ) }
    dend_20 { pt3dadd( 40.2982, -7.22441, -32.0877, 1.62 ) }
    dend_20 { pt3dadd( 40.4451, -7.52259, -32.2987, 1.62 ) }
    dend_20 { pt3dadd( 40.6682, -8.21952, -32.8157, 1.4 ) }
    dend_20 { pt3dadd( 40.8305, -9.08259, -33.4881, 1.18 ) }
    dend_20 { pt3dadd( 40.9081, -10.1194, -34.3034, 0.44 ) }
    dend_20 { pt3dadd( 40.898, -10.7702, -34.7879, 0.29 ) }
    dend_20 { pt3dadd( 40.842, -11.5289, -35.312, 0.88 ) }
    dend_20 { pt3dadd( 40.7607, -12.1687, -35.7339, 0.88 ) }
    // Section: dend_19, id: dend_19, parent: dend_18 (entry count 42/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 31.5336, 1.57704, -23.1659, 0.29 ) }
    dend_19 { pt3dadd( 32.4502, 2.95487, -24.6833, 0.29 ) }
    dend_19 { pt3dadd( 33.0559, 3.86541, -25.686, 0.29 ) }
    dend_19 { pt3dadd( 33.6918, 4.82124, -26.7387, 0.37 ) }
    dend_19 { pt3dadd( 34.3307, 5.78161, -27.7963, 0.81 ) }
    // Section: dend_13, id: dend_13, parent: dend_11 (entry count 47/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -6.40634, -60.1909, 4.26715, 0.59 ) }
    dend_13 { pt3dadd( -6.28421, -61.2327, 3.94404, 0.59 ) }
    dend_13 { pt3dadd( -6.27017, -61.8552, 3.76918, 0.74 ) }
    dend_13 { pt3dadd( -6.28298, -62.3224, 3.65255, 0.96 ) }
    dend_13 { pt3dadd( -6.31447, -62.8041, 3.55171, 1.11 ) }
    dend_13 { pt3dadd( -6.36693, -63.3576, 3.45357, 1.11 ) }
    dend_13 { pt3dadd( -6.43261, -63.9255, 3.36183, 0.81 ) }
    dend_13 { pt3dadd( -6.54929, -64.7061, 3.28523, 0.29 ) }
    dend_13 { pt3dadd( -6.62575, -65.1553, 3.22984, 0.29 ) }
    dend_13 { pt3dadd( -6.7445, -65.8654, 3.13707, 0.59 ) }
    dend_13 { pt3dadd( -6.80692, -66.2818, 3.08238, 0.96 ) }
    dend_13 { pt3dadd( -6.85878, -66.7053, 3.02578, 1.11 ) }
    dend_13 { pt3dadd( -6.92728, -67.3942, 2.94183, 0.59 ) }
    dend_13 { pt3dadd( -7.00969, -68.3436, 2.82309, 0.29 ) }
    dend_13 { pt3dadd( -7.07415, -69.1607, 2.72058, 0.29 ) }
    dend_13 { pt3dadd( -7.11369, -69.6682, 2.64408, 0.29 ) }
    dend_13 { pt3dadd( -7.20214, -70.7489, 2.47038, 0.29 ) }
    dend_13 { pt3dadd( -7.24714, -71.2565, 2.39281, 0.52 ) }
    dend_13 { pt3dadd( -7.29914, -71.7639, 2.32314, 0.66 ) }
    dend_13 { pt3dadd( -7.38034, -72.4921, 2.23935, 1.11 ) }
    dend_13 { pt3dadd( -7.46003, -73.192, 2.15487, 1.4 ) }
    dend_13 { pt3dadd( -7.52463, -73.7505, 2.09109, 1.62 ) }
    dend_13 { pt3dadd( -7.61039, -74.7265, 2.00836, 0.44 ) }
    dend_13 { pt3dadd( -7.65774, -75.541, 1.95779, 0.44 ) }
    dend_13 { pt3dadd( -7.68477, -76.2155, 1.93499, 0.44 ) }
    dend_13 { pt3dadd( -7.69797, -76.7311, 1.93798, 0.66 ) }
    dend_13 { pt3dadd( -7.70802, -77.3445, 1.97545, 0.66 ) }
    dend_13 { pt3dadd( -7.72042, -78.0872, 2.02263, 0.37 ) }
    dend_13 { pt3dadd( -7.73435, -78.7192, 2.06342, 0.37 ) }
    dend_13 { pt3dadd( -7.74022, -78.9274, 2.07639, 0.59 ) }
    dend_13 { pt3dadd( -7.76947, -79.5951, 2.10913, 0.59 ) }
    dend_13 { pt3dadd( -7.84545, -80.641, 2.1117, 0.29 ) }
    dend_13 { pt3dadd( -7.92432, -81.348, 2.08944, 0.74 ) }
    dend_13 { pt3dadd( -8.00145, -81.856, 2.0632, 0.96 ) }
    dend_13 { pt3dadd( -8.09005, -82.4123, 2.03154, 0.96 ) }
    dend_13 { pt3dadd( -8.17878, -82.9405, 1.98886, 0.96 ) }
    dend_13 { pt3dadd( -8.37843, -84.0775, 1.87702, 0.29 ) }
    dend_13 { pt3dadd( -8.63812, -85.4907, 1.72465, 0.29 ) }
    dend_13 { pt3dadd( -8.86551, -86.7005, 1.61038, 1.4 ) }
    dend_13 { pt3dadd( -8.97023, -87.2598, 1.56277, 1.92 ) }
    dend_13 { pt3dadd( -9.05989, -87.74, 1.52914, 2.28 ) }
    dend_13 { pt3dadd( -9.19416, -88.4462, 1.49762, 2.28 ) }
    dend_13 { pt3dadd( -9.31381, -89.008, 1.4811, 1.4 ) }
    dend_13 { pt3dadd( -9.62008, -90.2601, 1.44843, 0.22 ) }
    dend_13 { pt3dadd( -9.82298, -91.0026, 1.44521, 0.22 ) }
    dend_13 { pt3dadd( -9.96895, -91.4978, 1.45559, 0.88 ) }
    dend_13 { pt3dadd( -10.1119, -91.9681, 1.47759, 0.96 ) }
    dend_13 { pt3dadd( -10.3598, -92.7251, 1.5125, 0.22 ) }
    dend_13 { pt3dadd( -10.6451, -93.5596, 1.55056, 0.22 ) }
    dend_13 { pt3dadd( -10.8965, -94.306, 1.58409, 0.74 ) }
    dend_13 { pt3dadd( -10.9745, -94.5571, 1.59489, 1.03 ) }
    dend_13 { pt3dadd( -11.072, -94.9545, 1.60899, 1.03 ) }
    dend_13 { pt3dadd( -11.1383, -95.3182, 1.61705, 1.03 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_12()
}

proc basic_shape_12() {
    dend_13 { pt3dadd( -11.2015, -95.8285, 1.62578, 0.81 ) }
    dend_13 { pt3dadd( -11.2788, -96.8106, 1.61753, 0.22 ) }
    dend_13 { pt3dadd( -11.3044, -97.2826, 1.60705, 0.22 ) }
    dend_13 { pt3dadd( -11.3323, -98.1828, 1.57455, 0.22 ) }
    dend_13 { pt3dadd( -11.3271, -98.7614, 1.54641, 1.18 ) }
    dend_13 { pt3dadd( -11.3065, -99.169, 1.52201, 1.77 ) }
    dend_13 { pt3dadd( -11.2776, -99.5139, 1.49735, 1.99 ) }
    dend_13 { pt3dadd( -11.202, -100.175, 1.44345, 1.47 ) }
    dend_13 { pt3dadd( -10.9834, -101.73, 1.30621, 0.22 ) }
    dend_13 { pt3dadd( -10.7168, -103.428, 1.12633, 0.22 ) }
    dend_13 { pt3dadd( -10.5707, -104.284, 1.02675, 0.59 ) }
    dend_13 { pt3dadd( -10.4752, -104.83, 0.957803, 1.03 ) }
    dend_13 { pt3dadd( -10.4075, -105.233, 0.90385, 1.25 ) }
    dend_13 { pt3dadd( -10.356, -105.551, 0.854737, 1.47 ) }
    dend_13 { pt3dadd( -10.1512, -106.869, 0.652191, 0.22 ) }
    dend_13 { pt3dadd( -10.0494, -107.558, 0.547871, 0.66 ) }
    dend_13 { pt3dadd( -10.0117, -107.813, 0.510676, 0.96 ) }
    dend_13 { pt3dadd( -9.92488, -108.373, 0.430863, 0.96 ) }
    dend_13 { pt3dadd( -9.7301, -109.558, 0.265453, 0.22 ) }
    dend_13 { pt3dadd( -9.31407, -111.785, -0.0389339, 0.22 ) }
    dend_13 { pt3dadd( -9.17808, -112.412, -0.118698, 0.88 ) }
    dend_13 { pt3dadd( -9.11547, -112.662, -0.152498, 1.11 ) }
    dend_13 { pt3dadd( -9.04381, -112.909, -0.188333, 1.33 ) }
    dend_13 { pt3dadd( -8.90043, -113.325, -0.245358, 0.96 ) }
    dend_13 { pt3dadd( -8.67269, -113.872, -0.276626, 0.44 ) }
    dend_13 { pt3dadd( -8.13748, -115.018, -0.268562, 0.22 ) }
    dend_13 { pt3dadd( -7.85819, -115.62, -0.235816, 0.66 ) }
    dend_13 { pt3dadd( -7.64026, -116.091, -0.197916, 0.88 ) }
    dend_13 { pt3dadd( -7.26371, -116.896, -0.105273, 0.22 ) }
    dend_13 { pt3dadd( -6.55256, -118.411, 0.133454, 0.22 ) }
    dend_13 { pt3dadd( -6.38265, -118.819, 0.221031, 0.22 ) }
    dend_13 { pt3dadd( -6.20985, -119.354, 0.34449, 1.62 ) }
    dend_13 { pt3dadd( -6.08462, -119.961, 0.477625, 2.5 ) }
    dend_13 { pt3dadd( -6.06738, -120.228, 0.512779, 2.73 ) }
    dend_13 { pt3dadd( -6.08655, -120.455, 0.514264, 2.73 ) }
    dend_13 { pt3dadd( -6.31866, -121.541, 0.353338, 1.25 ) }
    dend_13 { pt3dadd( -6.56996, -122.581, 0.12356, 0.29 ) }
    dend_13 { pt3dadd( -6.66358, -122.967, 0.0180757, 0.29 ) }
    dend_13 { pt3dadd( -6.87245, -123.91, -0.281047, 0.66 ) }
    dend_13 { pt3dadd( -6.93467, -124.209, -0.385374, 1.11 ) }
    dend_13 { pt3dadd( -7.05498, -124.796, -0.595702, 1.25 ) }
    dend_13 { pt3dadd( -7.132, -125.223, -0.74463, 1.25 ) }
    dend_13 { pt3dadd( -7.25709, -125.921, -0.923394, 1.03 ) }
    dend_13 { pt3dadd( -7.42413, -126.772, -1.09125, 0.22 ) }
    dend_13 { pt3dadd( -7.49881, -127.124, -1.1309, 0.22 ) }
    dend_13 { pt3dadd( -7.66873, -127.722, -1.18563, 0.22 ) }
    dend_13 { pt3dadd( -7.97321, -128.619, -1.24581, 1.84 ) }
    dend_13 { pt3dadd( -8.23333, -129.297, -1.28527, 3.32 ) }
    dend_13 { pt3dadd( -8.45494, -129.813, -1.30722, 3.54 ) }
    dend_13 { pt3dadd( -8.70004, -130.341, -1.31575, 2.8 ) }
    dend_13 { pt3dadd( -9.35132, -131.733, -1.32077, 0.29 ) }
    dend_13 { pt3dadd( -9.5154, -132.066, -1.31434, 0.81 ) }
    dend_13 { pt3dadd( -9.69291, -132.392, -1.29427, 0.88 ) }
    dend_13 { pt3dadd( -10.1262, -133.136, -1.21588, 0.22 ) }
    dend_13 { pt3dadd( -10.518, -133.77, -1.14395, 0.22 ) }
    dend_13 { pt3dadd( -10.8329, -134.268, -1.08942, 0.88 ) }
    dend_13 { pt3dadd( -11.0457, -134.602, -1.04987, 1.25 ) }
    dend_13 { pt3dadd( -11.2511, -134.921, -1.02291, 1.25 ) }
    dend_13 { pt3dadd( -11.5803, -135.463, -1.00087, 0.59 ) }
    dend_13 { pt3dadd( -12.188, -136.565, -1.00336, 0.22 ) }
    dend_13 { pt3dadd( -12.3754, -136.932, -1.01356, 0.74 ) }
    dend_13 { pt3dadd( -12.5509, -137.274, -1.03604, 0.74 ) }
    dend_13 { pt3dadd( -12.6635, -137.492, -1.05283, 0.52 ) }
    dend_13 { pt3dadd( -13.1537, -138.464, -1.12989, 0.22 ) }
    dend_13 { pt3dadd( -13.3572, -138.885, -1.16994, 1.03 ) }
    dend_13 { pt3dadd( -13.4685, -139.123, -1.1972, 1.25 ) }
    dend_13 { pt3dadd( -13.9696, -140.32, -1.39081, 0.22 ) }
    dend_13 { pt3dadd( -14.1778, -140.919, -1.5188, 0.22 ) }
    dend_13 { pt3dadd( -14.2948, -141.3, -1.62023, 0.59 ) }
    dend_13 { pt3dadd( -14.4182, -141.778, -1.78916, 0.59 ) }
    dend_13 { pt3dadd( -14.5275, -142.486, -2.08886, 0.22 ) }
    dend_13 { pt3dadd( -14.5837, -143.556, -2.59296, 0.22 ) }
    dend_13 { pt3dadd( -14.5509, -144.123, -2.88676, 1.03 ) }
    dend_13 { pt3dadd( -14.4978, -144.477, -3.07822, 1.33 ) }
    dend_13 { pt3dadd( -14.3645, -144.95, -3.33292, 1.33 ) }
    dend_13 { pt3dadd( -13.8676, -146.151, -3.97854, 0.22 ) }
    dend_13 { pt3dadd( -13.7235, -146.42, -4.1244, 0.52 ) }
    dend_13 { pt3dadd( -13.5941, -146.625, -4.24063, 0.52 ) }
    dend_13 { pt3dadd( -12.6653, -147.797, -4.92171, 0.22 ) }
    dend_13 { pt3dadd( -11.5659, -148.942, -5.60121, 0.22 ) }
    dend_13 { pt3dadd( -11.0779, -149.385, -5.86571, 1.47 ) }
    dend_13 { pt3dadd( -10.7494, -149.658, -6.03037, 2.21 ) }
    dend_13 { pt3dadd( -10.339, -149.992, -6.22947, 1.62 ) }
    dend_13 { pt3dadd( -8.6121, -151.372, -7.04378, 0.29 ) }
    dend_13 { pt3dadd( -7.59187, -152.207, -7.53177, 0.29 ) }
    dend_13 { pt3dadd( -6.52047, -153.211, -8.0657, 0.22 ) }
    dend_13 { pt3dadd( -5.99172, -153.78, -8.33634, 1.03 ) }
    dend_13 { pt3dadd( -5.84205, -153.96, -8.41636, 1.25 ) }
    dend_13 { pt3dadd( -5.6055, -154.277, -8.54719, 1.25 ) }
    dend_13 { pt3dadd( -4.77106, -155.684, -9.06973, 0.29 ) }
    dend_13 { pt3dadd( -3.8636, -157.462, -9.67854, 0.22 ) }
    dend_13 { pt3dadd( -3.46861, -158.315, -9.95163, 1.92 ) }
    dend_13 { pt3dadd( -3.28707, -158.722, -10.0759, 2.36 ) }
    dend_13 { pt3dadd( -3.10217, -159.147, -10.198, 2.58 ) }
    dend_13 { pt3dadd( -2.41084, -160.92, -10.6469, 0.22 ) }
    dend_13 { pt3dadd( -2.20088, -161.583, -10.7806, 0.22 ) }
    dend_13 { pt3dadd( -2.04378, -162.259, -10.8892, 0.22 ) }
    dend_13 { pt3dadd( -1.96512, -162.692, -10.9463, 0.74 ) }
    dend_13 { pt3dadd( -1.9244, -163.018, -10.9777, 0.88 ) }
    dend_13 { pt3dadd( -1.88971, -164.107, -11.045, 0.22 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_13()
}

proc basic_shape_13() {
    dend_13 { pt3dadd( -1.91859, -164.57, -11.0556, 0.22 ) }
    dend_13 { pt3dadd( -1.97947, -165.13, -11.0589, 0.81 ) }
    dend_13 { pt3dadd( -2.05046, -165.608, -11.0481, 0.96 ) }
    dend_13 { pt3dadd( -2.08931, -165.828, -11.0383, 0.96 ) }
    dend_13 { pt3dadd( -2.42368, -167.599, -10.9413, 0.22 ) }
    dend_13 { pt3dadd( -2.51685, -168.104, -10.9129, 0.66 ) }
    dend_13 { pt3dadd( -2.5714, -168.402, -10.896, 0.66 ) }
    dend_13 { pt3dadd( -3.18276, -171.63, -10.7005, 0.22 ) }
    dend_13 { pt3dadd( -3.56779, -173.584, -10.5709, 0.22 ) }
    dend_13 { pt3dadd( -3.65896, -174.048, -10.5378, 0.44 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 10/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -6.40634, -60.1909, 4.26715, 0.29 ) }
    dend_12 { pt3dadd( -7.44663, -61.6534, 4.05186, 0.29 ) }
    dend_12 { pt3dadd( -8.47418, -63.0016, 3.98729, 0.29 ) }
    dend_12 { pt3dadd( -8.99215, -63.627, 3.97633, 0.44 ) }
    dend_12 { pt3dadd( -9.93706, -64.7072, 3.96509, 0.22 ) }
    dend_12 { pt3dadd( -10.3439, -65.1648, 3.96057, 0.52 ) }
    dend_12 { pt3dadd( -10.7528, -65.6238, 3.95552, 0.66 ) }
    dend_12 { pt3dadd( -12.163, -67.1611, 3.95929, 0.22 ) }
    dend_12 { pt3dadd( -13.1009, -68.1222, 3.96536, 0.22 ) }
    dend_12 { pt3dadd( -14.0823, -69.068, 3.94671, 0.22 ) }
    dend_12 { pt3dadd( -14.8689, -69.7687, 3.90985, 0.66 ) }
    dend_12 { pt3dadd( -15.3596, -70.1701, 3.8692, 0.96 ) }
    dend_12 { pt3dadd( -16.0033, -70.6602, 3.78317, 0.96 ) }
    dend_12 { pt3dadd( -16.7858, -71.1956, 3.62687, 0.52 ) }
    dend_12 { pt3dadd( -18.1068, -72.0297, 3.36366, 0.22 ) }
    dend_12 { pt3dadd( -18.6266, -72.3197, 3.25769, 0.66 ) }
    dend_12 { pt3dadd( -19.7084, -72.8612, 3.03427, 0.66 ) }
    dend_12 { pt3dadd( -20.6734, -73.332, 2.82455, 0.29 ) }
    dend_12 { pt3dadd( -21.6687, -73.8017, 2.59743, 0.29 ) }
    dend_12 { pt3dadd( -22.1039, -74.0108, 2.4946, 0.59 ) }
    dend_12 { pt3dadd( -22.8861, -74.3829, 2.30113, 0.59 ) }
    dend_12 { pt3dadd( -23.7557, -74.7999, 2.05582, 0.59 ) }
    dend_12 { pt3dadd( -25.5608, -75.6533, 1.47641, 0.22 ) }
    dend_12 { pt3dadd( -27.1517, -76.431, 0.896358, 0.22 ) }
    dend_12 { pt3dadd( -28.6919, -77.1824, 0.391537, 0.22 ) }
    dend_12 { pt3dadd( -30.0463, -77.8028, 0.00520718, 0.22 ) }
    dend_12 { pt3dadd( -31.2754, -78.3632, -0.306067, 0.88 ) }
    dend_12 { pt3dadd( -32.1408, -78.7685, -0.508857, 1.18 ) }
    dend_12 { pt3dadd( -33.111, -79.2365, -0.643982, 1.18 ) }
    dend_12 { pt3dadd( -35.8013, -80.6656, -0.764102, 0.22 ) }
    dend_12 { pt3dadd( -38.2862, -82.1495, -0.630851, 0.22 ) }
    dend_12 { pt3dadd( -39.022, -82.6594, -0.517479, 0.59 ) }
    dend_12 { pt3dadd( -39.7551, -83.2402, -0.344839, 0.59 ) }
    dend_12 { pt3dadd( -41.597, -84.8612, 0.149207, 0.37 ) }
    dend_12 { pt3dadd( -42.2114, -85.4571, 0.3121, 0.88 ) }
    dend_12 { pt3dadd( -42.9751, -86.3294, 0.460913, 1.03 ) }
    dend_12 { pt3dadd( -43.4036, -86.8302, 0.521112, 1.03 ) }
    dend_12 { pt3dadd( -44.5264, -87.9926, 0.537206, 0.29 ) }
    dend_12 { pt3dadd( -45.3877, -88.7659, 0.444952, 0.44 ) }
    dend_12 { pt3dadd( -46.1083, -89.3729, 0.273675, 0.66 ) }
    dend_12 { pt3dadd( -47.4562, -90.3918, -0.0636421, 0.29 ) }
    dend_12 { pt3dadd( -48.2388, -90.9138, -0.271406, 0.52 ) }
    dend_12 { pt3dadd( -48.7198, -91.2045, -0.407169, 0.59 ) }
    dend_12 { pt3dadd( -49.3192, -91.5309, -0.596438, 0.59 ) }
    dend_12 { pt3dadd( -57.924, -101.031, -2.08976, 0.59 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_23, dend_22, dend_15, dend_8, dend_5, dend_0, dend_17, dend_16, dend_10, dend_9, dend_7, dend_6, dend_4, dend_1, dend_21, dend_18, dend_14, dend_11, dend_3, dend_2, dend_20, dend_19, dend_13, dend_12]}
    ModelViewParmSubset_2 = new SectionList()
    dend_23 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_23, dend_22, dend_15, dend_8, dend_5, dend_0, dend_17, dend_16, dend_10, dend_9, dend_7, dend_6, dend_4, dend_1, dend_21, dend_18, dend_14, dend_11, dend_3, dend_2, dend_20, dend_19, dend_13, dend_12]}
    ModelViewParmSubset_3 = new SectionList()
    soma_0 ModelViewParmSubset_3.append()
    dend_23 ModelViewParmSubset_3.append()
    dend_22 ModelViewParmSubset_3.append()
    dend_15 ModelViewParmSubset_3.append()
    dend_8 ModelViewParmSubset_3.append()
    dend_5 ModelViewParmSubset_3.append()
    dend_0 ModelViewParmSubset_3.append()
    dend_17 ModelViewParmSubset_3.append()
    dend_16 ModelViewParmSubset_3.append()
    dend_10 ModelViewParmSubset_3.append()
    dend_9 ModelViewParmSubset_3.append()
    dend_7 ModelViewParmSubset_3.append()
    dend_6 ModelViewParmSubset_3.append()
    dend_4 ModelViewParmSubset_3.append()
    dend_1 ModelViewParmSubset_3.append()
    dend_21 ModelViewParmSubset_3.append()
    dend_18 ModelViewParmSubset_3.append()
    dend_14 ModelViewParmSubset_3.append()
    dend_11 ModelViewParmSubset_3.append()
    dend_3 ModelViewParmSubset_3.append()
    dend_2 ModelViewParmSubset_3.append()
    dend_20 ModelViewParmSubset_3.append()
    dend_19 ModelViewParmSubset_3.append()
    dend_13 ModelViewParmSubset_3.append()
    dend_12 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_4 = new SectionList()
    axon_0 ModelViewParmSubset_4.append()
    axon_1 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_23 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_22 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_5 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_16 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_9 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_7 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_4 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_21 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_14 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_3 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_2 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_13 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_12 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_15 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_0 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_8 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_1 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_17 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_10 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_18 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_11 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_19 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_6 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_20 OneSecGrp_SectionRef_24.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_15, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_19, dend_19, dend_19, dend_19, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_15 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_11 all.append()
    dend_11 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_10()
}

proc subsets_10() {
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_11()
}

proc subsets_11() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_12()
}

proc subsets_12() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_13()
}

proc subsets_13() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_14()
}

proc subsets_14() {
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert KdShu2007
        gmax_KdShu2007 = 4.2499998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dNAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__dNAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dNAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__dNAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_23 nseg = 3
    dend_22 nseg = 3
    dend_5 nseg = 3
    dend_16 nseg = 3
    dend_9 nseg = 3
    dend_7 nseg = 7
    dend_4 nseg = 3
    dend_21 nseg = 9
    dend_14 nseg = 7
    dend_3 nseg = 3
    dend_2 nseg = 5
    dend_13 nseg = 7
    dend_12 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate dNAC222_L4_LBC_f6a71a338d_0_0


