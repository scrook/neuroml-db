// Cell: dNAC222_L23_SBC_0c85d8e325_0_0
/*
{
  "id" : "dNAC222_L23_SBC_0c85d8e325_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-2.6237, -8.22758, 0.070813, 2.13548", "-2.39007, -7.49194, 0.0634915, 2.46199", "-2.15644, -6.75631, 0.05617, 3.24204", "-1.92281, -6.02068, 0.0488485, 4.12456", "-1.68917, -5.28505, 0.041527, 5.0352", "-1.45554, -4.54941, 0.0342055, 5.94585", "-1.22191, -3.81378, 0.026884, 6.72163", "-0.988273, -3.07815, 0.0195625, 6.80003", "-0.75464, -2.34252, 0.012241, 6.86698", "-0.521007, -1.60688, 0.00491951, 6.89693", "-0.287374, -0.871249, -0.00240198, 6.78633", "-0.0537407, -0.135617, -0.00972348, 6.68152", "0.179892, 0.600016, -0.017045, 7.03689", "0.413525, 1.33565, -0.0243665, 7.65538", "0.647159, 2.07128, -0.031688, 8.30636", "0.880792, 2.80691, -0.0390095, 9.12144", "1.11442, 3.54255, -0.0463309, 8.95229", "1.34806, 4.27818, -0.0536524, 8.48257", "1.58169, 5.01381, -0.0609739, 7.77052", "1.81532, 5.74945, -0.0682954, 6.51313", "2.04896, 6.48508, -0.0756169, 3.51755" ]
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "-0.13389, 3.6624, -9.166, 0.55", "0.179002, 4.78094, -9.18728, 0.55", "0.689896, 7.0447, -9.23161, 0.28", "0.817053, 7.85507, -9.36861, 0.55", "1.06951, 9.9703, -9.86052, 0.28", "1.22247, 11.3678, -10.2615, 0.83", "1.52545, 14.1936, -11.1654, 0.28", "1.64722, 16.073, -11.8588, 0.83", "1.71385, 19.6502, -13.33, 0.28", "1.69433, 20.3129, -13.6188, 0.55", "1.52941, 22.0481, -14.4014, 0.28", "1.45516, 23.1594, -14.9261, 0.55", "1.30112, 26.5393, -16.5473, 0.28", "1.29712, 27.0932, -16.782, 0.83", "1.42521, 29.5376, -17.6426, 0.28", "1.57894, 30.9534, -18.1631, 0.55", "2.15288, 34.3389, -19.4176, 0.28", "2.23956, 34.6701, -19.5556, 0.55", "3.123, 36.9328, -20.6053, 0.28", "3.45163, 37.6049, -20.9631, 0.55", "4.68097, 39.6003, -22.1215, 0.28", "5.35423, 40.5694, -22.7541, 0.55", "6.83431, 42.6464, -24.1644, 0.28", "7.39405, 43.4418, -24.8011, 0.55", "8.96622, 45.6003, -26.7123, 0.28", "9.68067, 46.5905, -27.6249, 0.55", "10.6844, 48.0303, -28.9831, 0.55", "11.4876, 49.2981, -30.1868, 0.83", "13.4304, 52.8274, -33.4349, 0.28", "14.0862, 54.1827, -34.6284, 0.55", "14.5613, 55.2518, -35.5263, 0.28", "14.9775, 56.1496, -36.3271, 0.55", "15.7675, 57.6761, -37.7867, 0.28", "16.0749, 58.1794, -38.324, 0.55", "17.3976, 59.9961, -40.3557, 0.28", "17.7793, 60.4508, -40.9527, 0.55", "19.3296, 61.9638, -43.1824, 0.28", "20.2054, 62.8062, -44.4676, 0.83", "21.7533, 64.3246, -46.8254, 0.28", "22.2233, 64.7625, -47.5174, 0.83", "23.5636, 66.0187, -49.4368, 0.28", "24.2506, 66.6089, -50.2364, 0.55", "26.6024, 68.4935, -52.3356, 0.28", "27.2617, 69.0456, -52.8326, 0.55", "29.2499, 70.8187, -54.1825, 0.28", "30.1107, 71.5937, -54.7258, 0.83", "33.8098, 74.8073, -56.7595, 0.28", "35.074, 75.8494, -57.3774, 0.55", "38.0873, 78.0191, -58.5223, 0.28", "39.0087, 78.7428, -58.8679, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999998332546847,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "3.72611, 4.1559, 8.114, 0.55", "4.4944, 5.09999, 8.14582, 0.55", "5.1865, 6.07614, 8.18872, 0.83", "6.1362, 7.49207, 8.253, 0.55", "8.55346, 11.2931, 8.41795, 0.55", "9.82534, 13.3851, 8.50294, 1.11", "11.2196, 15.7045, 8.59303, 0.55", "12.3916, 17.7849, 8.672, 0.55", "13.5054, 19.8944, 8.75018, 0.28", "14.673, 22.3552, 8.83778, 0.83", "15.8957, 25.3226, 8.93725, 0.28", "16.185, 26.0223, 8.95544, 0.83", "17.1029, 28.3246, 8.98932, 0.28", "17.3558, 28.9642, 9.00554, 0.55", "17.9299, 30.5919, 9.06705, 0.28", "18.0939, 31.0434, 9.08861, 0.55", "19.0768, 33.274, 9.25332, 0.28", "19.4279, 33.9463, 9.31754, 0.55", "20.4363, 35.4892, 9.52767, 0.28", "21.6633, 37.2134, 9.76942, 0.28", "22.8314, 38.7685, 9.98503, 0.55", "24.3016, 40.7446, 10.1978, 0.28", "24.8703, 41.5172, 10.2742, 0.55", "27.1534, 44.6093, 10.8479, 0.28", "28.4935, 46.404, 11.284, 0.55", "29.7215, 48.1194, 11.766, 0.55", "30.9871, 50.0741, 12.3415, 0.28", "32.0336, 51.8217, 12.8322, 0.55", "34.716, 56.5987, 14.1861, 0.28", "35.2561, 57.6638, 14.4742, 0.55", "36.6906, 60.7302, 15.3333, 0.28", "37.3475, 62.2891, 15.6994, 0.55", "38.3673, 65.2013, 16.2329, 0.28", "38.804, 66.9514, 16.4101, 0.55", "39.164, 69.4053, 16.4672, 0.28", "39.2818, 70.6658, 16.4932, 0.55", "39.4348, 73.6861, 16.5532, 0.28", "39.5536, 76.2427, 16.7755, 0.83", "39.7468, 80.1771, 17.3401, 0.28", "39.8763, 82.1813, 17.6969, 0.55", "40.1494, 85.641, 18.4502, 0.28", "40.2841, 87.2928, 18.8467, 0.55", "40.6441, 91.5653, 20.0312, 0.28", "40.7574, 92.567, 20.2925, 0.55", "41.1039, 95.2066, 20.9438, 0.28", "41.3384, 96.7544, 21.3184, 0.55", "42.0124, 100.754, 22.2315, 0.28", "42.2808, 102.154, 22.4857, 0.55", "42.9018, 105.007, 22.813, 0.28", "43.6189, 107.752, 23.105, 0.28", "43.7189, 108.083, 23.1397, 0.83", "44.2905, 109.831, 23.3021, 0.28", "44.9058, 111.417, 23.4375, 0.55", "45.9019, 113.979, 23.6931, 0.28", "46.8697, 116.206, 23.973, 0.55", "51.9535, 127.324, 24.626, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999998332546847,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "2.55611, 5.2689, 8.114, 0.55", "4.13103, 7.15433, 8.87638, 0.55", "5.90532, 9.1923, 9.88513, 1.11", "7.27777, 10.9277, 10.7155, 0.55", "8.95996, 13.23, 11.6644, 0.55", "10.5913, 15.4627, 12.5846, 0.55", "12.0025, 17.3941, 13.3807, 0.83", "13.2752, 19.0118, 14.1754, 0.55", "14.7789, 20.7693, 15.1837, 0.28", "15.8545, 22.1935, 16.0152, 0.55", "22.3304, 32.4302, 20.6721, 0.55", "27.4592, 43.4835, 25.3257, 0.55", "31.5683, 55.5279, 28.5409, 0.55", "36.1663, 67.8286, 29.0334, 0.55", "41.7561, 79.6229, 28.0068, 0.55", "48.8188, 90.0326, 24.817, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999998332546847,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-2.57389, 6.0354, 1.184, 0.83", "-2.6724, 8.24108, 2.27982, 0.83", "-2.66708, 10.6944, 3.27657, 0.83", "-2.5705, 13.1736, 4.10209, 1.66", "-2.29256, 17.6464, 5.39173, 0.83", "-2.23389, 19.728, 5.91985, 0.83", "-2.19423, 22.1881, 6.48652, 1.66", "-2.07409, 25.4691, 7.18668, 0.83", "-1.94293, 28.5313, 7.71947, 0.83", "-1.85771, 30.5961, 8.01758, 0.83", "-1.75761, 35.133, 8.26778, 0.83", "-1.78037, 37.2212, 8.40261, 0.83" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999998332546847
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-2.93389, -9.5991, -0.806, 1.66", "-2.58088, -13.1693, -1.35266, 1.66", "-2.21427, -17.1818, -2.06051, 1.66", "-1.88085, -20.831, -2.70427, 0.83", "-1.37129, -26.4081, -3.68813, 1.11", "-0.972255, -30.7754, -4.45857, 1.11", "-0.74047, -33.3123, -4.9061, 1.11", "-0.408209, -35.7638, -5.41223, 1.11" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999998332546847
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "2.04896, 6.48508, -0.0756169, 0.55", "6.58939, 20.7814, -0.0756169, 0.55", "11.1298, 35.0777, -0.0756169, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "-1.78037, 37.2212, 8.40261, 0.55", "-1.72839, 41.5044, 7.28898, 0.55", "-1.53094, 44.1341, 6.49006, 0.55", "-1.20352, 46.7507, 5.67528, 0.83", "-0.946219, 48.4737, 5.14878, 0.28", "-0.787136, 49.4319, 4.88584, 0.28", "-0.642639, 50.2866, 4.67303, 0.55", "-0.185426, 52.5998, 4.12912, 0.55", "0.00394139, 53.9009, 3.89314, 0.55", "0.0909944, 54.8757, 3.79758, 0.83", "0.178444, 57.8793, 3.55886, 0.55", "0.0903754, 59.1074, 3.4869, 0.83", "-0.119026, 60.3597, 3.44121, 0.28", "-0.413119, 61.5834, 3.44393, 0.55", "-0.978214, 63.6187, 3.41121, 0.55", "-1.71911, 65.9586, 3.36679, 0.55", "-2.29338, 67.4996, 3.20913, 0.28", "-2.59928, 68.3213, 3.05145, 0.28", "-3.02497, 69.4618, 2.75275, 0.55", "-3.54075, 70.7298, 2.28291, 0.28", "-3.99754, 71.8981, 1.76805, 1.11", "-5.41957, 75.3042, 0.198969, 0.28", "-5.89731, 76.4744, -0.298136, 0.83", "-6.71756, 78.4913, -1.07236, 0.83", "-7.63528, 80.717, -1.81213, 0.28", "-8.32161, 82.3932, -2.26633, 0.28", "-9.61539, 85.7298, -2.97275, 0.83", "-10.1695, 87.309, -3.16614, 0.28", "-10.7148, 88.9296, -3.30079, 0.55", "-11.671, 91.9977, -3.51509, 0.55", "-12.1275, 93.5749, -3.59466, 1.11", "-12.6724, 95.5325, -3.72257, 0.55", "-13.1243, 97.511, -3.82821, 0.55", "-13.6262, 99.7792, -3.95692, 0.55", "-14.2324, 102.628, -4.1344, 0.55", "-14.4281, 103.755, -4.20047, 0.55", "-14.628, 105.006, -4.27642, 0.55", "-15.1802, 108.583, -4.49621, 0.55", "-15.5083, 110.698, -4.62168, 0.83", "-15.8093, 113.138, -4.73969, 0.28", "-16.0923, 115.472, -4.83651, 0.55", "-16.2963, 117.116, -4.91803, 0.55", "-16.4983, 118.852, -5.04578, 0.28", "-16.6069, 119.863, -5.14719, 0.55", "-16.8637, 122.358, -5.33718, 0.55", "-17.0061, 123.802, -5.41876, 0.28", "-17.101, 124.536, -5.46575, 0.83", "-17.355, 126.686, -5.58768, 0.28", "-17.4388, 127.425, -5.63646, 0.55", "-17.6125, 128.776, -5.73495, 0.28", "-17.7574, 129.882, -5.81454, 0.55", "-18.0187, 131.991, -5.92176, 0.55", "-18.5686, 135.653, -6.06127, 0.55", "-18.944, 137.926, -6.15364, 0.28", "-19.0744, 138.795, -6.19656, 0.83", "-19.2906, 140.34, -6.27572, 0.83", "-19.5968, 142.666, -6.39706, 0.55", "-19.8162, 145.198, -6.48636, 0.55", "-20.0337, 147.788, -6.40795, 0.55", "-20.1492, 149.776, -6.30787, 0.55", "-20.2214, 152.542, -6.14728, 0.55", "-20.2417, 155.7, -5.94127, 0.55", "-20.1264, 159.8, -5.62934, 0.55", "-19.9619, 163.22, -5.32288, 0.55", "-19.7928, 166.624, -4.9868, 0.55", "-19.6868, 168.66, -4.80113, 0.55", "-19.5427, 170.382, -4.66898, 0.83", "-19.3816, 171.952, -4.57797, 0.55", "-19.1607, 174.219, -4.46883, 0.55", "-18.8922, 176.437, -4.36733, 0.55", "-18.7379, 177.76, -4.23735, 0.83", "-18.4849, 179.885, -4.04287, 0.28", "-18.1533, 182.575, -3.72994, 0.55", "-17.7932, 185.73, -3.28961, 0.55", "-17.5582, 187.813, -2.93963, 0.55", "-17.433, 189.02, -2.71851, 0.28", "-17.294, 190.602, -2.40665, 0.55", "-17.0761, 193.694, -1.73627, 0.55", "-16.8799, 196.608, -1.10159, 0.55", "-16.7901, 198.127, -0.817542, 0.55" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "-1.78037, 37.2212, 8.40261, 0.55", "-1.88011, 41.2045, 8.31317, 0.55", "-2.00281, 46.1051, 8.20313, 0.55", "-2.07113, 48.8339, 8.14186, 0.55", "-2.13158, 51.2481, 8.08765, 0.55", "-2.21576, 54.6102, 8.01216, 0.55", "-2.29148, 57.6343, 7.94426, 0.55" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-0.408209, -35.7638, -5.41223, 0.55", "-0.0469647, -37.2853, -4.6003, 0.55", "0.690414, -40.1043, -3.58381, 0.55", "1.70581, -43.886, -1.50149, 0.55", "2.13543, -45.5842, -0.508516, 0.55", "2.44189, -46.995, 0.367419, 0.55", "3.03061, -49.5697, 1.97981, 0.55", "3.51706, -51.5519, 3.23333, 0.55", "4.90923, -55.9571, 6.12376, 0.55", "5.54176, -57.6003, 7.10703, 0.55", "7.16168, -61.0747, 9.21951, 0.28", "7.98693, -62.4454, 10.1344, 0.28", "9.04623, -63.6371, 11.0399, 0.55", "10.1603, -64.4254, 11.6454, 0.28", "11.0995, -64.738, 11.8716, 0.55", "14.2481, -64.9791, 12.5837, 0.55", "15.6438, -64.7856, 12.6838, 0.55", "16.5244, -64.623, 12.6661, 0.55", "18.0228, -64.309, 12.5378, 0.55", "19.696, -64.0307, 12.3247, 0.55", "21.7756, -63.72, 11.9636, 0.55", "26.8593, -63.0399, 10.9813, 0.55", "29.1269, -62.7347, 10.5572, 0.28", "29.998, -62.5914, 10.4044, 0.55", "33.3043, -62.0477, 9.6805, 0.55", "34.1801, -61.8556, 9.46499, 0.55", "36.0954, -61.297, 9.01909, 0.28", "37.2626, -60.8366, 8.86408, 0.28", "39.0639, -60.0217, 8.65942, 0.55", "42.1066, -58.6016, 8.20851, 0.28", "43.5489, -57.9418, 7.96085, 0.28", "44.6171, -57.5302, 7.77076, 0.55", "47.5645, -56.5832, 7.11098, 0.28", "48.978, -56.1654, 6.78413, 0.83", "51.5724, -55.4495, 6.23341, 0.28", "52.5426, -55.1952, 6.07342, 0.28", "53.5842, -54.987, 5.85218, 0.83", "55.7846, -54.6525, 5.25083, 0.28", "57.2677, -54.6117, 4.69765, 0.83" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-0.408209, -35.7638, -5.41223, 0.83", "-0.129683, -36.3368, -5.80723, 0.83", "0.860063, -38.3726, -7.21088, 0.83", "2.24292, -41.2171, -9.17204, 0.83", "4.24157, -45.3282, -12.0065, 0.83", "5.77462, -48.4815, -14.1806, 0.83" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "11.1298, 35.0777, -0.0756169, 0.28", "15.6702, 49.374, -0.0756169, 0.28", "20.2107, 63.6703, -0.0756169, 0.28" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "-16.7901, 198.127, -0.817542, 0.55", "-15.2663, 198.912, -0.87497, 0.55", "-13.8611, 199.635, -0.927922, 0.28", "-12.142, 200.52, -0.992713, 0.55", "-1.88332, 204.576, -0.128616, 0.55" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "-16.7901, 198.127, -0.817542, 0.55", "-16.3837, 200.65, 0.321129, 0.55", "-15.7787, 204.395, 1.93822, 0.55", "-15.3392, 207.297, 3.16774, 0.55", "-14.8803, 210.688, 4.46326, 0.55", "-14.5048, 213.56, 5.5498, 0.55", "-14.2483, 216.107, 6.46818, 0.28", "-14.1092, 217.719, 6.958, 0.28", "-14.0464, 218.563, 7.15236, 0.55", "-13.7483, 222.536, 7.91374, 0.55", "-13.519, 227.427, 8.84, 0.28", "-13.445, 230.099, 9.33614, 0.28", "-13.4159, 232.556, 9.75044, 0.55", "-13.1964, 237.798, 10.5934, 0.28", "-13.0749, 240.123, 10.9305, 0.55", "-9.81179, 251.406, 13.8795, 0.55" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "-2.29148, 57.6343, 7.94426, 0.55", "-1.45843, 58.5689, 7.93345, 0.55", "-0.417149, 59.7372, 7.91995, 0.55", "0.617943, 60.8985, 7.90652, 0.55", "1.09048, 61.4287, 7.90039, 0.55", "2.36708, 62.8609, 7.88383, 0.83", "6.9745, 69.3298, 7.00333, 0.83", "11.7198, 75.3585, 4.88472, 0.83" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "-2.29148, 57.6343, 7.94426, 0.55", "-3.40505, 60.0582, 8.17351, 0.55", "-4.78016, 63.0439, 8.31913, 0.55", "-5.87086, 65.2019, 8.39053, 0.55", "-6.98408, 67.2365, 8.52409, 0.55", "-7.54732, 68.2482, 8.61051, 0.83", "-8.85464, 70.5426, 8.89322, 0.55", "-10.023, 72.4764, 9.14302, 0.55", "-10.7214, 73.6579, 9.40717, 0.83", "-11.7952, 75.4252, 9.87702, 0.28", "-12.5354, 76.5622, 10.2079, 0.55", "-13.7001, 78.4294, 10.7816, 0.55", "-14.3712, 79.5856, 11.2458, 0.55", "-15.1741, 81.3647, 11.8939, 0.28", "-15.7701, 82.9706, 12.3415, 0.55", "-16.322, 84.5498, 12.718, 0.55", "-16.8605, 86.1547, 13.0926, 0.28", "-17.6673, 89.0021, 13.6681, 0.55", "-18.2089, 91.2435, 14.1151, 0.28", "-18.6781, 93.1772, 14.4958, 0.55" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "5.77462, -48.4815, -14.1806, 0.55", "7.2913, -49.6331, -12.9706, 0.55", "8.78219, -50.7582, -11.4471, 0.55", "10.7677, -52.3718, -9.28595, 0.55", "12.0364, -53.4422, -7.92371, 0.28", "13.4258, -54.6372, -6.18466, 0.55", "16.8926, -57.784, -1.56313, 0.55", "17.8924, -58.8034, -0.0272344, 0.55", "18.7089, -59.6077, 1.29441, 0.28", "19.1486, -60.0414, 2.03729, 0.55", "21.4269, -61.6753, 5.26655, 0.28", "22.3628, -62.2656, 6.60159, 0.28", "23.0178, -62.5914, 7.42654, 0.55", "24.0885, -63.1721, 8.88042, 0.55", "25.9709, -64.1793, 11.4085, 0.55", "27.6861, -65.1602, 13.5702, 0.55", "30.6711, -66.9111, 16.9689, 0.55", "32.946, -68.2218, 19.5664, 0.28", "34.2697, -68.9863, 21.071, 0.28", "35.4413, -69.694, 22.3788, 0.83", "37.0123, -70.6407, 24.1852, 0.28", "37.743, -71.0503, 25.0211, 0.55", "39.3552, -71.729, 26.5379, 0.28", "40.1153, -71.9809, 27.2506, 0.28", "40.7688, -72.1424, 27.9167, 0.55", "43.4396, -72.6849, 30.9623, 0.55", "44.7709, -72.883, 32.679, 0.28", "45.5497, -73.0409, 33.7551, 0.55", "46.4923, -73.3347, 35.1011, 0.55", "51.424, -77.1804, 43.8426, 0.55" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "5.77462, -48.4815, -14.1806, 0.83", "4.04323, -50.5995, -15.0071, 0.83", "3.63419, -51.0999, -15.2024, 0.83" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "-18.6781, 93.1772, 14.4958, 0.55", "-19.6076, 96.2501, 18.4265, 0.55", "-22.6885, 103.356, 27.3534, 0.55" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "-18.6781, 93.1772, 14.4958, 0.28", "-18.5232, 95.1711, 14.1011, 0.28", "-18.4627, 97.0267, 13.8548, 0.55", "-18.3744, 99.7362, 13.4952, 0.28", "-18.3173, 101.489, 13.2625, 0.28", "-18.2954, 102.161, 13.1734, 0.55", "-18.2342, 104.038, 12.9242, 0.28", "-18.2627, 104.804, 12.8557, 0.83", "-18.0474, 112.739, 13.1731, 0.83" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "3.63419, -51.0999, -15.2024, 0.55", "3.80279, -52.3703, -15.0237, 0.55", "4.10101, -54.9255, -14.725, 0.55", "4.25853, -56.787, -14.552, 0.28", "4.3861, -60.1147, -14.3545, 0.55", "4.33635, -62.5852, -14.2975, 0.55", "4.19372, -65.4603, -14.2869, 0.55", "3.82253, -69.2546, -14.3617, 0.55", "3.60152, -70.7026, -14.395, 0.55", "2.81478, -75.0258, -14.3698, 0.55", "2.17711, -77.8235, -14.3115, 0.55", "1.21455, -81.5038, -14.1653, 0.55", "0.581519, -83.6584, -14.0393, 0.28", "-0.13062, -86.0635, -13.8212, 0.83", "-1.04005, -89.2915, -13.4598, 0.55", "-1.53175, -90.9369, -13.2044, 0.28", "-1.94695, -92.3082, -12.9637, 0.55", "-2.98714, -95.5327, -12.4439, 0.28", "-3.28707, -96.5195, -12.3158, 0.55", "-4.01793, -99.0056, -12.1209, 0.55", "-4.76923, -101.584, -12.1507, 0.28", "-5.05646, -102.742, -12.2135, 0.55", "-5.44668, -104.757, -12.3825, 0.28", "-5.60492, -106.194, -12.5706, 0.28", "-5.73713, -107.941, -12.8254, 0.55", "-5.88232, -111.249, -13.3433, 0.28", "-5.92454, -114.703, -13.8961, 0.28", "-5.90184, -116.451, -14.1709, 0.83", "-5.84997, -118.375, -14.4575, 0.28", "-5.83295, -119.957, -14.6794, 0.55", "-5.87535, -121.828, -14.8952, 0.28", "-5.93069, -122.76, -15.0111, 0.55", "-6.23819, -126.047, -15.7368, 0.28", "-6.36266, -127.168, -16.0361, 0.55", "-6.57787, -128.927, -16.6831, 0.28", "-6.71257, -130.126, -17.2291, 0.55", "-7.05647, -132.569, -18.5052, 0.55", "-7.41581, -134.82, -19.7424, 0.55", "-7.81742, -136.811, -20.8406, 0.55", "-8.32175, -139.618, -22.3696, 0.28", "-8.38053, -140.185, -22.6854, 0.55", "-8.47269, -141.244, -23.2831, 0.28", "-8.50155, -141.597, -23.4647, 0.55", "-8.5118, -142.569, -23.9904, 0.28", "-8.46864, -143.614, -24.5295, 0.55", "-8.21825, -146.653, -26.1115, 0.28", "-8.13104, -147.452, -26.5457, 0.55", "-7.86549, -150.096, -27.8952, 0.55", "-7.63973, -152.99, -29.3988, 0.28", "-7.59345, -153.757, -29.7913, 0.55", "-7.81619, -156.308, -30.5863, 0.28", "-8.0386, -157.464, -30.7039, 0.55", "-8.63403, -159.933, -30.7097, 0.28", "-9.09827, -161.491, -30.5083, 0.55", "-9.54102, -162.842, -30.2132, 0.55", "-11.9149, -170.224, -28.1503, 0.28", "-12.4704, -171.965, -27.5157, 0.28", "-12.6926, -172.79, -27.2341, 0.55", "-13.1814, -175.239, -26.4602, 0.28", "-13.2655, -175.782, -26.2953, 0.55", "-13.5363, -178.423, -25.6301, 0.28", "-13.4819, -180.091, -25.4835, 0.55", "-13.3388, -184.284, -25.4167, 0.28", "-13.2583, -185.576, -25.5071, 0.55", "-13.1362, -186.828, -25.7363, 0.28", "-13.0454, -187.645, -25.9395, 0.55", "-12.7565, -189.972, -26.7111, 0.28", "-12.6552, -190.819, -27.0252, 0.55", "-12.4545, -193.132, -27.7888, 0.55", "-12.2779, -194.815, -28.3927, 0.28", "-12.1762, -195.448, -28.6183, 0.55" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "3.63419, -51.0999, -15.2024, 0.55", "5.0333, -53.8976, -17.7315, 0.55", "7.01623, -57.8627, -21.316, 0.55" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "7.01623, -57.8627, -21.316, 0.55", "9.96174, -57.6705, -19.3508, 0.55", "11.8916, -57.4416, -17.9807, 0.28", "12.6695, -57.3604, -17.4612, 0.55", "14.7727, -57.0899, -16.0302, 0.55", "16.3078, -56.9491, -14.9754, 0.28", "17.4301, -56.8684, -14.2862, 0.28", "19.4182, -56.7726, -13.252, 0.55", "21.9212, -56.6931, -12.103, 0.28", "24.3785, -56.6753, -11.1879, 0.28", "26.5158, -56.6519, -10.5143, 0.28", "29.8767, -56.5981, -9.70752, 0.55", "32.5243, -56.5364, -9.22637, 0.28", "35.7009, -56.4369, -8.82789, 0.28", "38.3473, -56.3043, -8.59483, 0.55", "41.0242, -56.173, -8.53847, 0.55", "44.7017, -55.9287, -8.59871, 0.28", "45.4912, -55.9112, -8.61823, 0.55", "47.4965, -56.0272, -8.73018, 0.28", "48.4613, -56.1588, -8.7686, 0.28", "50.766, -56.5849, -8.78798, 0.55", "52.903, -57.0735, -8.69476, 0.28", "54.8186, -57.5008, -8.42339, 0.83", "57.4266, -58.1377, -7.82383, 0.55", "60.5695, -58.8567, -6.82379, 0.28", "61.7188, -59.0746, -6.39674, 0.55", "63.8666, -59.4442, -5.16813, 0.28", "64.7621, -59.5694, -4.5086, 0.83", "67.2847, -59.7636, -2.31445, 0.55", "68.6727, -59.7913, -0.883659, 0.55", "69.8144, -59.7808, 0.410321, 0.83", "73.0822, -59.6043, 4.35348, 0.28", "73.7169, -59.5728, 5.10026, 0.28", "75.1628, -59.4426, 6.84786, 0.83", "77.1002, -59.0705, 9.25684, 0.28", "77.7133, -58.9505, 10.0098, 0.55", "78.7532, -58.7356, 11.143, 0.55", "82.2458, -58.0204, 13.6815, 0.55" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "7.01623, -57.8627, -21.316, 0.55", "8.44619, -61.1638, -24.9052, 0.55" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "8.44619, -61.1638, -24.9052, 0.55", "8.5544, -61.5403, -26.1859, 0.55", "8.5885, -61.6485, -26.7127, 0.55", "8.38379, -62.2448, -29.8789, 0.28", "7.78891, -62.8435, -32.7505, 0.55", "7.38729, -63.1504, -33.9375, 0.28", "6.81386, -63.5384, -35.3544, 0.28", "5.90339, -64.0317, -37.12, 0.83", "4.54542, -64.4743, -39.7143, 0.28", "3.77172, -64.5836, -41.0212, 0.55", "3.06897, -64.6554, -42.1869, 0.55", "2.04926, -64.6306, -44.3767, 0.28", "1.44517, -64.528, -45.8962, 0.83", "0.072333, -63.8903, -49.5517, 0.28", "-0.185552, -63.6953, -50.3499, 0.28", "-0.615934, -63.3145, -51.5636, 0.83", "-1.81023, -62.2791, -54.3363, 0.28", "-2.25139, -61.9452, -55.144, 1.11", "-3.35946, -61.1466, -57.3263, 0.55", "-3.88833, -60.825, -58.2907, 0.55", "-4.5351, -60.3963, -59.7122, 0.55", "-5.20532, -59.9383, -61.439, 0.28", "-5.39217, -59.8307, -61.9304, 0.83", "-6.89064, -58.9279, -66.4597, 0.28", "-7.40981, -58.5916, -67.9591, 0.28", "-8.26897, -57.9838, -70.2168, 0.83", "-9.30813, -57.2018, -72.7455, 0.28", "-10.0987, -56.6366, -74.3885, 0.28", "-10.8649, -56.1265, -75.6473, 0.83", "-12.726, -54.9679, -77.9807, 0.28", "-13.2313, -54.6288, -78.6003, 0.83", "-14.7635, -53.6312, -80.3198, 0.28", "-15.4658, -53.1126, -81.131, 0.83", "-16.3512, -52.3031, -82.3644, 0.28", "-16.8762, -51.6751, -83.2523, 0.55", "-17.681, -50.3902, -85.1353, 0.28", "-17.8957, -49.9493, -85.731, 0.83", "-18.3013, -48.9451, -86.9996, 0.28", "-18.8953, -47.2745, -89.0201, 0.83", "-19.2861, -45.9031, -90.7275, 0.28", "-19.4475, -45.3904, -91.3421, 0.55", "-19.7303, -44.3342, -92.6337, 0.28", "-19.8265, -43.9554, -93.1001, 0.83", "-20.1609, -42.8855, -94.4021, 0.28", "-20.7601, -41.0202, -96.548, 0.28", "-21.1877, -39.5992, -98.0303, 1.11", "-21.8044, -37.4524, -100.017, 0.28", "-21.9968, -36.7033, -100.631, 0.55", "-22.2962, -35.2757, -101.636, 0.28", "-22.4345, -34.2834, -102.262, 0.55", "-22.6389, -32.7398, -103.105, 0.28", "-22.6545, -32.4957, -103.244, 0.55", "-22.781, -31.2288, -103.862, 0.28", "-22.781, -31.2288, -103.862, 0.55", "-22.6903, -29.1294, -105.289, 0.28", "-22.6937, -28.8894, -105.458, 0.83" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "8.44619, -61.1638, -24.9052, 0.83", "8.64677, -64.2087, -23.8279, 0.83", "8.8992, -68.0406, -22.472, 0.55" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "8.8992, -68.0406, -22.472, 0.55", "10.1536, -70.1571, -23.3573, 0.55", "11.0771, -71.0732, -24.1916, 0.55", "12.8641, -72.8242, -25.9353, 0.55", "14.5138, -74.4888, -27.4507, 0.55", "15.7113, -75.6972, -28.5507, 0.83", "16.9967, -76.9942, -29.7314, 0.55", "21.924, -81.3169, -34.2648, 0.55", "22.8653, -82.065, -35.0499, 0.55", "24.2267, -83.1289, -36.123, 0.55" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "8.8992, -68.0406, -22.472, 0.55", "7.17139, -72.0361, -23.6893, 0.55", "6.04448, -74.7529, -24.576, 0.55", "4.49775, -78.9686, -25.9321, 0.55", "3.53162, -81.7306, -26.8565, 0.55", "1.46723, -87.9692, -28.9455, 0.55", "0.859634, -89.8922, -29.5757, 0.28", "-0.226933, -93.7838, -30.8351, 0.55", "-0.990723, -96.9496, -31.9185, 0.28", "-1.48163, -99.4761, -32.8283, 0.55", "-2.08359, -103.73, -34.3842, 0.55", "-2.14979, -104.503, -34.6923, 0.55", "-2.34505, -106.981, -35.7894, 0.55", "-2.84869, -110.814, -37.3993, 0.55", "-3.41493, -113.55, -38.5426, 0.55", "-4.13665, -116.324, -39.5865, 0.28", "-5.14538, -119.24, -40.6464, 0.55", "-6.26507, -122.035, -41.6622, 0.55", "-8.90156, -127.83, -43.7662, 0.55", "-9.41206, -128.846, -44.1222, 0.55", "-11.8776, -133.691, -45.8025, 0.55", "-14.3055, -138.565, -47.3963, 0.55", "-15.3449, -140.839, -48.0895, 0.83", "-16.4348, -143.559, -48.9844, 0.55", "-17.1372, -145.82, -49.897, 0.55", "-17.8651, -148.291, -50.9148, 0.55", "-18.4164, -150.363, -51.7585, 0.55", "-18.9515, -152.838, -52.6796, 0.83", "-19.5023, -155.394, -53.5935, 0.55", "-20.2061, -158.606, -54.7614, 0.28", "-20.6192, -160.276, -55.4241, 0.55", "-21.263, -162.799, -56.3717, 0.55", "-21.6454, -164.179, -56.8918, 0.55", "-22.2198, -166.425, -57.7402, 0.55", "-22.7629, -168.548, -58.5366, 0.55", "-23.3436, -171.056, -59.5209, 0.55", "-23.7707, -173.227, -60.4793, 0.55", "-24.1724, -175.505, -61.5537, 0.55", "-24.6831, -179.102, -63.1658, 0.83", "-24.8779, -180.994, -63.9569, 0.83", "-25.1426, -183.88, -65.1626, 0.55", "-25.3698, -186.33, -66.1711, 0.83", "-25.5184, -188.495, -67.1855, 0.55", "-25.6694, -191.416, -68.5607, 0.28", "-25.727, -192.171, -68.944, 0.55", "-25.8089, -193.227, -69.4975, 0.55", "-26.0996, -195.545, -70.7992, 0.55", "-26.7992, -200.152, -73.6344, 0.55", "-27.3727, -202.383, -74.9855, 0.83", "-27.9444, -204.113, -75.9035, 0.55", "-28.7233, -206.183, -76.8298, 0.55", "-30.032, -209.313, -77.9574, 0.55", "-30.9555, -211.085, -78.4162, 0.83", "-33.4237, -215.179, -79.2709, 0.83", "-36.4692, -219.295, -80.093, 0.28", "-37.8327, -220.765, -80.3269, 1.11", "-39.3447, -222.038, -80.5749, 0.28", "-42.0392, -223.895, -80.9833, 0.55", "-44.8124, -225.522, -81.341, 0.55", "-50.5852, -228.112, -81.9456, 0.83", "-55.2146, -229.631, -82.35, 0.55", "-57.694, -230.258, -82.5765, 0.55", "-60.249, -230.701, -82.8745, 0.55", "-64.6402, -231.258, -83.4221, 0.83", "-69.1274, -231.852, -83.8701, 0.55", "-71.3881, -232.188, -84.2024, 0.55", "-75.5868, -232.843, -84.9315, 0.55", "-79.8734, -233.621, -85.783, 0.55", "-83.7762, -234.147, -86.6448, 0.55", "-87.3037, -234.502, -87.5828, 0.55", "-90.0174, -234.832, -88.4167, 0.28", "-93.5765, -235.336, -89.5182, 0.55", "-96.5998, -235.741, -90.7172, 0.55", "-101.554, -236.361, -92.9856, 0.55", "-103.177, -236.477, -93.8564, 0.55", "-106.305, -236.636, -95.692, 0.55", "-108.262, -236.78, -96.9418, 0.55", "-113.46, -237.15, -100.379, 0.55", "-116.714, -237.262, -102.548, 0.55", "-118.854, -237.307, -103.943, 0.55", "-120.867, -237.266, -105.102, 0.55", "-123.526, -237.096, -106.456, 0.55", "-128.579, -236.636, -108.571, 0.55", "-130.636, -236.493, -109.328, 0.55", "-134.157, -236.103, -110.233, 0.55", "-136.618, -235.895, -110.638, 0.55", "-138.227, -235.784, -110.856, 0.55", "-143.655, -235.571, -111.786, 0.55", "-146.754, -235.562, -112.728, 0.55", "-155.076, -235.64, -115.345, 0.55", "-158.011, -235.543, -116.328, 0.55", "-160.566, -235.292, -117.19, 0.55", "-163.926, -234.821, -118.435, 0.55", "-168.172, -234.153, -120.824, 0.28", "-176.359, -243.15, -126.79, 0.28" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 17
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "24.2267, -83.1289, -36.123, 0.55", "24.2266, -81.9928, -37.5908, 0.55", "23.6437, -80.6032, -39.5903, 0.28", "23.5563, -80.309, -40.0386, 0.55", "23.3908, -79.7846, -40.8468, 0.55", "23.1448, -78.753, -42.2958, 0.28", "23.0599, -78.2077, -43.0939, 0.28", "22.9347, -77.0223, -45.0491, 0.55", "22.8007, -75.5402, -47.5434, 0.28", "22.7832, -75.153, -48.2175, 0.83", "22.7707, -73.4736, -51.0867, 0.55", "22.8843, -71.6238, -54.1537, 0.83", "23.0283, -69.8351, -56.9749, 0.28", "23.0283, -69.8351, -56.9749, 0.55", "23.0576, -67.9919, -59.4092, 0.28", "23.0594, -67.5839, -59.8923, 0.83", "23.0826, -65.6318, -61.8198, 0.55", "23.0346, -63.7506, -63.2908, 0.55", "22.9888, -62.3747, -64.338, 0.55", "22.951, -60.2179, -66.0335, 0.83", "22.9285, -59.3875, -66.643, 0.83", "22.8928, -56.952, -68.5039, 0.55", "22.8601, -55.5127, -69.6409, 0.55", "22.9183, -53.1971, -72.0514, 1.11", "22.9691, -51.3096, -74.4458, 0.55", "22.9656, -50.2044, -75.991, 0.83", "22.9078, -48.3075, -78.9109, 0.55", "22.8622, -47.3633, -80.4164, 0.83", "22.7348, -44.3304, -85.3685, 0.28", "22.6586, -43.5315, -86.6401, 0.55", "22.554, -42.5188, -88.2486, 0.55", "22.5309, -41.0027, -90.5076, 1.11", "22.5351, -39.1651, -92.8635, 0.55", "22.5665, -38.3111, -93.7709, 0.55", "22.69, -36.9124, -95.0278, 0.55", "22.9671, -34.823, -96.85, 0.83", "23.6455, -31.1495, -100.167, 0.28", "23.8376, -30.1734, -101.059, 0.83", "24.4276, -27.5665, -103.404, 0.28", "24.8677, -25.8364, -104.945, 0.55", "25.1471, -24.7364, -105.948, 0.55", "25.688, -22.2035, -108.094, 0.83", "25.903, -20.6207, -109.269, 0.55", "26.1421, -18.8977, -110.486, 0.55", "26.2332, -18.1166, -110.975, 0.55", "26.4138, -16.7261, -111.836, 0.83", "26.6619, -15.0316, -112.938, 0.83", "26.9701, -12.9854, -114.355, 0.55", "27.3719, -10.4801, -116.253, 0.83", "27.5055, -9.41585, -117.065, 0.83", "27.9572, -5.95836, -119.782, 0.55", "28.044, -5.35258, -120.278, 0.83", "28.2321, -3.7924, -121.652, 0.28", "28.3735, -2.45158, -122.845, 0.55", "28.4161, -0.627436, -124.308, 0.28", "28.4674, 0.809604, -125.533, 0.83", "28.4607, 1.51715, -126.08, 0.28", "28.498, 2.65552, -126.971, 0.55", "28.6382, 5.12455, -129.016, 0.28", "28.7077, 5.94464, -129.759, 0.28", "29.0797, 9.3615, -133.096, 0.83", "29.2798, 10.7636, -134.442, 0.28", "29.4758, 11.8999, -135.528, 0.28", "29.6841, 12.9255, -136.466, 0.55", "29.7708, 13.5381, -136.975, 0.28", "29.831, 14.2961, -137.549, 0.55", "29.9003, 16.4044, -138.765, 0.28", "29.9235, 17.645, -139.414, 0.55", "29.8635, 19.5547, -140.219, 0.28", "29.6486, 21.3963, -140.874, 0.55", "29.5436, 21.9148, -141.052, 0.55", "29.2679, 22.97, -141.404, 0.83", "28.8659, 24.3518, -142.048, 0.28", "28.677, 25.1304, -142.525, 0.55", "28.2212, 26.7553, -143.552, 0.28", "28.1519, 27.1547, -143.847, 0.55", "27.7752, 29.2949, -145.478, 0.28", "27.3855, 31.4228, -147.156, 0.83", "27.0774, 33.4487, -148.864, 0.55", "26.917, 35.0071, -150.197, 0.55", "26.9143, 38.0586, -152.981, 0.55" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "24.2267, -83.1289, -36.123, 0.55", "25.8181, -86.0624, -35.9287, 0.55", "26.821, -87.5756, -35.7845, 0.55", "27.8325, -89.0083, -35.5977, 0.83", "29.0777, -90.7719, -35.3677, 0.55", "30.0373, -92.1311, -35.1905, 0.55", "31.1498, -93.7067, -34.985, 0.55", "32.3104, -95.4612, -34.7722, 0.55", "33.4541, -96.927, -34.4058, 1.11" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "26.9143, 38.0586, -152.981, 0.28", "27.3811, 40.5252, -153.97, 0.28", "27.8608, 42.3349, -154.676, 0.83", "28.3396, 44.1499, -155.215, 0.28", "28.6412, 45.3547, -155.54, 0.55", "29.4853, 48.5971, -156.451, 0.28", "30.0196, 50.4805, -156.883, 0.83", "30.9616, 53.2057, -157.384, 0.28", "31.8024, 55.5499, -157.788, 0.83", "33.113, 59.351, -158.347, 0.28", "33.8373, 61.5433, -158.606, 0.83", "35.1553, 65.8771, -158.936, 0.28", "35.3859, 66.5412, -159.001, 0.83" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "26.9143, 38.0586, -152.981, 0.55", "22.1174, 37.5622, -154.73, 0.55", "20.2341, 37.394, -155.515, 0.28", "18.8948, 37.2837, -156.112, 0.55", "17.2066, 37.1719, -156.88, 0.28", "15.8401, 37.0824, -157.55, 0.55", "14.7249, 37.0083, -158.1, 0.28", "13.6685, 36.9729, -158.715, 0.28", "13.4222, 36.9723, -158.82, 0.55", "11.8015, 37.0082, -159.565, 0.28", "10.9612, 36.9948, -159.908, 0.83", "8.98232, 36.9446, -160.722, 0.28", "7.28558, 36.9007, -161.391, 0.83", "5.46657, 36.9324, -162.057, 0.28", "2.33913, 37.0204, -163.158, 0.83" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "33.4541, -96.927, -34.4058, 0.28", "34.4707, -99.3271, -33.9817, 0.28", "34.8245, -100.256, -33.8221, 0.55", "35.7642, -102.037, -33.4007, 0.28", "36.6675, -103.425, -33.1285, 0.28", "37.3985, -104.44, -32.8692, 0.55", "38.6536, -105.945, -32.5189, 0.28", "39.5757, -106.98, -32.2871, 0.55", "41.459, -109.024, -31.9533, 0.55", "43.4965, -111.092, -31.572, 0.28", "44.9925, -112.621, -31.26, 0.83", "47.2728, -114.962, -30.7243, 0.28", "47.9194, -115.687, -30.5182, 0.55", "48.6138, -116.644, -30.2574, 0.55", "49.516, -118.384, -29.8695, 0.55", "50.2578, -120.155, -29.413, 0.28", "50.5102, -120.879, -29.2177, 0.55", "50.9263, -122.368, -28.711, 1.11", "51.4613, -124.16, -28.1008, 0.55", "52.0578, -126.157, -27.4406, 0.55", "52.5127, -127.582, -27.0776, 0.55", "53.2767, -129.166, -26.8401, 0.55", "54.1714, -130.62, -26.7309, 0.55", "55.8774, -132.848, -26.671, 0.55", "56.5741, -133.61, -26.6535, 0.55", "58.7854, -135.669, -26.6654, 1.11", "63.3629, -139.36, -26.9896, 0.28", "63.793, -139.675, -27.0337, 0.55", "64.9657, -140.519, -27.1857, 0.28", "66.1369, -141.381, -27.3462, 0.83", "69.0323, -143.826, -27.6644, 0.28", "69.9073, -144.757, -27.6408, 0.55", "70.6546, -145.879, -27.4161, 0.28", "72.1281, -148.391, -26.7786, 0.55", "73.256, -150.62, -26.1368, 0.55", "74.109, -152.376, -25.5521, 0.28", "74.9097, -154.23, -24.7667, 1.11", "75.6868, -155.93, -24.0291, 0.55", "76.836, -157.944, -23.1149, 0.55", "77.2876, -158.657, -22.7912, 0.83", "78.3702, -160.363, -22.2154, 0.55", "80.1082, -162.859, -21.6311, 0.83", "81.1855, -164.319, -21.4896, 0.55", "82.4232, -166.043, -21.4713, 0.55", "83.9077, -168.034, -21.5825, 0.83", "85.9529, -170.843, -21.8079, 0.28", "87.2202, -172.6, -21.99, 0.55", "88.8064, -174.835, -22.2531, 0.28", "90.2889, -176.975, -22.4572, 0.83", "92.4545, -180.034, -22.5754, 0.55", "93.8741, -181.733, -22.4644, 0.55", "94.4762, -182.426, -22.3166, 0.55", "95.3499, -183.299, -21.9835, 0.83", "97.8442, -185.158, -20.727, 0.28", "99.5354, -186.089, -19.7563, 0.83", "101.551, -186.963, -18.3946, 0.55", "102.36, -187.282, -17.8568, 0.83", "104.377, -188.043, -16.4311, 0.83", "105.365, -188.388, -15.6976, 0.28", "106.307, -188.715, -14.8626, 0.83", "108.031, -189.395, -13.2842, 0.28", "108.795, -189.718, -12.6047, 0.28", "109.257, -189.947, -12.2022, 0.83", "110.388, -190.72, -11.2757, 0.28", "110.879, -191.149, -10.8825, 0.55", "111.625, -191.986, -10.2702, 0.28", "112.841, -193.356, -9.21742, 0.83", "113.665, -194.172, -8.53356, 0.28", "114.248, -194.614, -8.13373, 0.28", "115.407, -195.259, -7.60355, 0.55", "117.012, -195.959, -7.01517, 0.28", "119.405, -196.863, -6.34706, 0.83", "121.769, -197.681, -5.72304, 0.28", "125.411, -198.772, -4.91725, 0.83", "130.017, -199.966, -3.92753, 0.28", "131.879, -200.343, -3.54276, 0.55", "134.99, -200.875, -2.94911, 0.28", "136.472, -201.132, -2.65083, 0.83", "139.531, -201.553, -1.85012, 0.28", "140.424, -201.672, -1.48326, 0.28", "142.41, -202.089, -0.0383007, 0.55", "143.022, -202.38, 0.672011, 0.83", "143.576, -202.964, 1.89335, 0.83", "143.901, -203.809, 3.23415, 0.28", "144.036, -205.159, 5.06962, 0.55", "144.027, -206.92, 7.18035, 0.83", "143.9, -208.397, 8.79228, 0.28", "143.802, -209.33, 9.80589, 0.55", "143.724, -210.281, 10.7723, 0.28", "143.727, -210.783, 11.2554, 0.83", "143.885, -211.609, 12.1199, 0.28", "144.07, -211.989, 12.7021, 0.83", "144.645, -212.623, 14.0835, 0.28", "145.143, -213.024, 15.2162, 0.83", "145.774, -213.326, 16.6968, 0.28", "146.299, -213.552, 18.1398, 0.28", "146.932, -213.926, 20.1934, 0.83", "147.173, -214.109, 21.17, 0.28", "147.417, -214.359, 22.3115, 0.28", "147.842, -214.827, 24.6899, 0.55", "148.086, -215.138, 26.1245, 0.55", "148.4, -215.634, 27.743, 0.55", "148.589, -216.027, 28.6883, 0.55", "148.845, -216.804, 30.2272, 0.55", "149.122, -217.771, 32.0038, 0.28", "149.272, -218.396, 33.0293, 0.55", "149.644, -219.735, 35.2076, 0.55", "150.001, -221.265, 37.6406, 0.28", "150.065, -221.688, 38.216, 0.83" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "33.4541, -96.927, -34.4058, 0.55", "36.4799, -96.9278, -33.4985, 0.55", "40.1989, -96.9802, -32.2364, 0.83", "42.8092, -96.9728, -31.2213, 0.55", "44.0468, -96.9618, -30.7119, 0.55", "45.097, -96.928, -30.2801, 0.83", "48.1651, -96.7681, -29.0617, 0.28", "50.5604, -96.5069, -28.1822, 0.83", "52.3933, -96.1543, -27.4827, 0.28", "52.7745, -96.0681, -27.3704, 0.55", "54.8574, -95.711, -27.061, 0.28", "56.0656, -95.5271, -26.9946, 0.55", "58.2768, -95.2308, -27.0051, 0.28", "60.0189, -95.0055, -27.0874, 0.55", "64.6006, -94.6231, -27.3337, 0.55", "68.1228, -94.3762, -27.3829, 0.28", "68.3746, -94.3594, -27.3715, 0.55", "69.953, -94.2736, -27.1663, 0.55", "71.3148, -94.2214, -26.8237, 0.28", "72.468, -94.1303, -26.353, 0.28", "74.103, -93.8462, -25.1844, 0.55", "75.8727, -93.3746, -23.6517, 0.28", "76.8516, -93.1301, -22.7644, 0.55", "78.1956, -92.7886, -21.4846, 0.28", "78.5922, -92.6883, -21.095, 0.83", "79.5645, -92.3896, -20.0733, 0.55", "80.2343, -92.1733, -19.2988, 0.83", "81.1378, -91.7665, -18.15, 0.55", "82.179, -91.1138, -16.7993, 0.28", "82.8687, -90.574, -15.8677, 0.83", "83.5611, -89.9981, -15.0659, 0.28", "84.3027, -89.3023, -14.2728, 0.55", "85.6265, -87.9706, -12.9924, 0.28", "86.2924, -87.2558, -12.3899, 0.28", "86.7475, -86.7646, -11.9863, 0.55", "88.6119, -84.8387, -10.4153, 0.28", "89.6944, -83.8885, -9.65104, 0.83", "91.144, -82.7298, -8.67879, 0.28", "91.7649, -82.3125, -8.34235, 0.83", "93.4758, -81.2949, -7.4848, 0.28", "94.5268, -80.7406, -6.97229, 0.83", "97.6859, -79.2272, -5.62769, 0.28", "98.8604, -78.6876, -5.20677, 0.83", "102.364, -77.1785, -4.20444, 0.28", "104.484, -76.3379, -3.69388, 0.28", "105.155, -76.0849, -3.543, 0.55", "108.34, -74.7214, -2.70887, 0.28", "109.197, -74.2796, -2.44144, 0.55", "111.905, -72.6918, -1.43166, 0.28", "113.594, -71.5678, -0.614764, 0.83", "114.945, -70.5454, 0.190712, 0.28", "117.14, -68.5595, 1.89296, 0.55", "118.506, -67.116, 3.30216, 0.28", "119.654, -65.6427, 4.7737, 0.55", "120.099, -64.8821, 5.51861, 0.55", "121.192, -62.9682, 7.38715, 0.55", "121.968, -61.7951, 8.54394, 0.28", "122.906, -60.7884, 9.56865, 0.55", "124.705, -58.9817, 11.2789, 0.55", "125.352, -58.3654, 11.7733, 0.55", "127.975, -56.0981, 13.4493, 0.28", "129.319, -55.0653, 14.1749, 0.83", "132.056, -53.1776, 15.5652, 0.28", "134.358, -51.5736, 16.7123, 0.28", "135.72, -50.6768, 17.4199, 0.83", "137.13, -49.7823, 18.2101, 0.28", "138.449, -48.9716, 19.033, 0.55", "140.485, -47.802, 20.3864, 0.28", "142.255, -46.9307, 21.5565, 0.28", "144.917, -45.8712, 23.2246, 0.55", "148.147, -44.743, 25.3149, 0.28", "149.401, -44.3594, 26.1011, 0.28", "151.031, -44.0128, 27.0634, 0.55", "152.735, -43.702, 27.9803, 0.28", "153.4, -43.6027, 28.2955, 0.28", "156.432, -43.1651, 29.5947, 0.28", "159.003, -42.7778, 30.687, 0.55", "162.252, -42.2776, 32.061, 0.28", "164.854, -41.8932, 33.2114, 0.55", "165.908, -41.7375, 33.7154, 0.55", "167.271, -41.5425, 34.4046, 0.28", "167.75, -41.4689, 34.6825, 0.55", "169.033, -41.2191, 35.6732, 0.28", "169.387, -41.1154, 36.0966, 0.55", "170.323, -40.8948, 37.6091, 0.28", "170.56, -40.7876, 38.1211, 0.55", "171.038, -40.4513, 39.3073, 0.28", "171.232, -40.283, 39.8034, 0.55", "171.991, -39.6128, 41.7403, 0.28", "172.089, -39.5374, 41.976, 0.55", "172.764, -39.14, 43.5454, 0.55", "174.34, -38.7766, 46.62, 0.55", "175.231, -38.8205, 47.9566, 0.55", "176.244, -38.9368, 49.3894, 0.55", "176.706, -39.024, 49.9697, 0.55", "178.015, -39.3783, 51.4374, 0.55", "180.225, -40.3315, 53.3952, 0.55", "182.086, -41.5683, 54.5999, 0.55" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_30", "dend_29", "dend_28", "dend_19", "dend_0", "dend_25", "dend_20", "dend_18", "dend_1", "dend_27", "dend_26", "dend_24", "dend_21", "dend_17", "dend_2", "dend_23", "dend_22", "dend_16", "dend_3", "dend_15", "dend_4", "dend_14", "dend_5", "dend_7", "dend_6", "dend_11", "dend_8", "dend_13", "dend_12", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_30", "dend_29", "dend_28", "dend_19", "dend_0", "dend_25", "dend_20", "dend_18", "dend_1", "dend_27", "dend_26", "dend_24", "dend_21", "dend_17", "dend_2", "dend_23", "dend_22", "dend_16", "dend_3", "dend_15", "dend_4", "dend_14", "dend_5", "dend_7", "dend_6", "dend_11", "dend_8", "dend_13", "dend_12", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_27", "dend_27", "dend_27", "dend_27", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_2", "dend_2", "dend_23", "dend_23", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_3", "dend_3", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_4", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_5", "dend_5", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.2499998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dNAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dNAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate dNAC222_L23_SBC_0c85d8e325_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_30, id: dend_30, parent: soma_0
create dend_30
public dend_30
// Section: dend_29, id: dend_29, parent: soma_0
create dend_29
public dend_29
// Section: dend_28, id: dend_28, parent: soma_0
create dend_28
public dend_28
// Section: dend_19, id: dend_19, parent: soma_0
create dend_19
public dend_19
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_25, id: dend_25, parent: dend_19
create dend_25
public dend_25
// Section: dend_20, id: dend_20, parent: dend_19
create dend_20
public dend_20
// Section: dend_18, id: dend_18, parent: dend_0
create dend_18
public dend_18
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_27, id: dend_27, parent: dend_25
create dend_27
public dend_27
// Section: dend_26, id: dend_26, parent: dend_25
create dend_26
public dend_26
// Section: dend_24, id: dend_24, parent: dend_20
create dend_24
public dend_24
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_17, id: dend_17, parent: dend_1
create dend_17
public dend_17
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_23, id: dend_23, parent: dend_21
create dend_23
public dend_23
// Section: dend_22, id: dend_22, parent: dend_21
create dend_22
public dend_22
// Section: dend_16, id: dend_16, parent: dend_2
create dend_16
public dend_16
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_15, id: dend_15, parent: dend_3
create dend_15
public dend_15
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_14, id: dend_14, parent: dend_4
create dend_14
public dend_14
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_11, id: dend_11, parent: dend_7
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_13, id: dend_13, parent: dend_11
create dend_13
public dend_13
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_30, dend_29, dend_28, dend_19, dend_0, dend_25, dend_20, dend_18, dend_1, dend_27, dend_26, dend_24, dend_21, dend_17, dend_2, dend_23, dend_22, dend_16, dend_3, dend_15, dend_4, dend_14, dend_5, dend_7, dend_6, dend_11, dend_8, dend_13, dend_12, dend_10, dend_9]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_30, dend_29, dend_28, dend_19, dend_0, dend_25, dend_20, dend_18, dend_1, dend_27, dend_26, dend_24, dend_21, dend_17, dend_2, dend_23, dend_22, dend_16, dend_3, dend_15, dend_4, dend_14, dend_5, dend_7, dend_6, dend_11, dend_8, dend_13, dend_12, dend_10, dend_9]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_31
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_2, dend_2, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_3, dend_3, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_4, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_5, dend_5, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dNAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dNAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_30(0), soma_0(0.49999998332546847)
    connect dend_29(0), soma_0(0.49999998332546847)
    connect dend_28(0), soma_0(0.49999998332546847)
    connect dend_19(0), soma_0(0.49999998332546847)
    connect dend_0(0), soma_0(0.49999998332546847)
    connect axon_0(0), soma_0(1.0)
    connect dend_25(0), dend_19(1.0)
    connect dend_20(0), dend_19(1.0)
    connect dend_18(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_27(0), dend_25(1.0)
    connect dend_26(0), dend_25(1.0)
    connect dend_24(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_17(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_23(0), dend_21(1.0)
    connect dend_22(0), dend_21(1.0)
    connect dend_16(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_15(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_14(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_11(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_13(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -2.6237, -8.22758, 0.070813, 2.13548 ) }
    soma_0 { pt3dadd( -2.39007, -7.49194, 0.0634915, 2.46199 ) }
    soma_0 { pt3dadd( -2.15644, -6.75631, 0.05617, 3.24204 ) }
    soma_0 { pt3dadd( -1.92281, -6.02068, 0.0488485, 4.12456 ) }
    soma_0 { pt3dadd( -1.68917, -5.28505, 0.041527, 5.0352 ) }
    soma_0 { pt3dadd( -1.45554, -4.54941, 0.0342055, 5.94585 ) }
    soma_0 { pt3dadd( -1.22191, -3.81378, 0.026884, 6.72163 ) }
    soma_0 { pt3dadd( -0.988273, -3.07815, 0.0195625, 6.80003 ) }
    soma_0 { pt3dadd( -0.75464, -2.34252, 0.012241, 6.86698 ) }
    soma_0 { pt3dadd( -0.521007, -1.60688, 0.00491951, 6.89693 ) }
    soma_0 { pt3dadd( -0.287374, -0.871249, -0.00240198, 6.78633 ) }
    soma_0 { pt3dadd( -0.0537407, -0.135617, -0.00972348, 6.68152 ) }
    soma_0 { pt3dadd( 0.179892, 0.600016, -0.017045, 7.03689 ) }
    soma_0 { pt3dadd( 0.413525, 1.33565, -0.0243665, 7.65538 ) }
    soma_0 { pt3dadd( 0.647159, 2.07128, -0.031688, 8.30636 ) }
    soma_0 { pt3dadd( 0.880792, 2.80691, -0.0390095, 9.12144 ) }
    soma_0 { pt3dadd( 1.11442, 3.54255, -0.0463309, 8.95229 ) }
    soma_0 { pt3dadd( 1.34806, 4.27818, -0.0536524, 8.48257 ) }
    soma_0 { pt3dadd( 1.58169, 5.01381, -0.0609739, 7.77052 ) }
    soma_0 { pt3dadd( 1.81532, 5.74945, -0.0682954, 6.51313 ) }
    soma_0 { pt3dadd( 2.04896, 6.48508, -0.0756169, 3.51755 ) }
    // Section: dend_30, id: dend_30, parent: soma_0 (entry count 21/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( -0.13389, 3.6624, -9.166, 0.55 ) }
    dend_30 { pt3dadd( 0.179002, 4.78094, -9.18728, 0.55 ) }
    dend_30 { pt3dadd( 0.689896, 7.0447, -9.23161, 0.28 ) }
    dend_30 { pt3dadd( 0.817053, 7.85507, -9.36861, 0.55 ) }
    dend_30 { pt3dadd( 1.06951, 9.9703, -9.86052, 0.28 ) }
    dend_30 { pt3dadd( 1.22247, 11.3678, -10.2615, 0.83 ) }
    dend_30 { pt3dadd( 1.52545, 14.1936, -11.1654, 0.28 ) }
    dend_30 { pt3dadd( 1.64722, 16.073, -11.8588, 0.83 ) }
    dend_30 { pt3dadd( 1.71385, 19.6502, -13.33, 0.28 ) }
    dend_30 { pt3dadd( 1.69433, 20.3129, -13.6188, 0.55 ) }
    dend_30 { pt3dadd( 1.52941, 22.0481, -14.4014, 0.28 ) }
    dend_30 { pt3dadd( 1.45516, 23.1594, -14.9261, 0.55 ) }
    dend_30 { pt3dadd( 1.30112, 26.5393, -16.5473, 0.28 ) }
    dend_30 { pt3dadd( 1.29712, 27.0932, -16.782, 0.83 ) }
    dend_30 { pt3dadd( 1.42521, 29.5376, -17.6426, 0.28 ) }
    dend_30 { pt3dadd( 1.57894, 30.9534, -18.1631, 0.55 ) }
    dend_30 { pt3dadd( 2.15288, 34.3389, -19.4176, 0.28 ) }
    dend_30 { pt3dadd( 2.23956, 34.6701, -19.5556, 0.55 ) }
    dend_30 { pt3dadd( 3.123, 36.9328, -20.6053, 0.28 ) }
    dend_30 { pt3dadd( 3.45163, 37.6049, -20.9631, 0.55 ) }
    dend_30 { pt3dadd( 4.68097, 39.6003, -22.1215, 0.28 ) }
    dend_30 { pt3dadd( 5.35423, 40.5694, -22.7541, 0.55 ) }
    dend_30 { pt3dadd( 6.83431, 42.6464, -24.1644, 0.28 ) }
    dend_30 { pt3dadd( 7.39405, 43.4418, -24.8011, 0.55 ) }
    dend_30 { pt3dadd( 8.96622, 45.6003, -26.7123, 0.28 ) }
    dend_30 { pt3dadd( 9.68067, 46.5905, -27.6249, 0.55 ) }
    dend_30 { pt3dadd( 10.6844, 48.0303, -28.9831, 0.55 ) }
    dend_30 { pt3dadd( 11.4876, 49.2981, -30.1868, 0.83 ) }
    dend_30 { pt3dadd( 13.4304, 52.8274, -33.4349, 0.28 ) }
    dend_30 { pt3dadd( 14.0862, 54.1827, -34.6284, 0.55 ) }
    dend_30 { pt3dadd( 14.5613, 55.2518, -35.5263, 0.28 ) }
    dend_30 { pt3dadd( 14.9775, 56.1496, -36.3271, 0.55 ) }
    dend_30 { pt3dadd( 15.7675, 57.6761, -37.7867, 0.28 ) }
    dend_30 { pt3dadd( 16.0749, 58.1794, -38.324, 0.55 ) }
    dend_30 { pt3dadd( 17.3976, 59.9961, -40.3557, 0.28 ) }
    dend_30 { pt3dadd( 17.7793, 60.4508, -40.9527, 0.55 ) }
    dend_30 { pt3dadd( 19.3296, 61.9638, -43.1824, 0.28 ) }
    dend_30 { pt3dadd( 20.2054, 62.8062, -44.4676, 0.83 ) }
    dend_30 { pt3dadd( 21.7533, 64.3246, -46.8254, 0.28 ) }
    dend_30 { pt3dadd( 22.2233, 64.7625, -47.5174, 0.83 ) }
    dend_30 { pt3dadd( 23.5636, 66.0187, -49.4368, 0.28 ) }
    dend_30 { pt3dadd( 24.2506, 66.6089, -50.2364, 0.55 ) }
    dend_30 { pt3dadd( 26.6024, 68.4935, -52.3356, 0.28 ) }
    dend_30 { pt3dadd( 27.2617, 69.0456, -52.8326, 0.55 ) }
    dend_30 { pt3dadd( 29.2499, 70.8187, -54.1825, 0.28 ) }
    dend_30 { pt3dadd( 30.1107, 71.5937, -54.7258, 0.83 ) }
    dend_30 { pt3dadd( 33.8098, 74.8073, -56.7595, 0.28 ) }
    dend_30 { pt3dadd( 35.074, 75.8494, -57.3774, 0.55 ) }
    dend_30 { pt3dadd( 38.0873, 78.0191, -58.5223, 0.28 ) }
    dend_30 { pt3dadd( 39.0087, 78.7428, -58.8679, 0.55 ) }
    // Section: dend_29, id: dend_29, parent: soma_0 (entry count 71/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 3.72611, 4.1559, 8.114, 0.55 ) }
    dend_29 { pt3dadd( 4.4944, 5.09999, 8.14582, 0.55 ) }
    dend_29 { pt3dadd( 5.1865, 6.07614, 8.18872, 0.83 ) }
    dend_29 { pt3dadd( 6.1362, 7.49207, 8.253, 0.55 ) }
    dend_29 { pt3dadd( 8.55346, 11.2931, 8.41795, 0.55 ) }
    dend_29 { pt3dadd( 9.82534, 13.3851, 8.50294, 1.11 ) }
    dend_29 { pt3dadd( 11.2196, 15.7045, 8.59303, 0.55 ) }
    dend_29 { pt3dadd( 12.3916, 17.7849, 8.672, 0.55 ) }
    dend_29 { pt3dadd( 13.5054, 19.8944, 8.75018, 0.28 ) }
    dend_29 { pt3dadd( 14.673, 22.3552, 8.83778, 0.83 ) }
    dend_29 { pt3dadd( 15.8957, 25.3226, 8.93725, 0.28 ) }
    dend_29 { pt3dadd( 16.185, 26.0223, 8.95544, 0.83 ) }
    dend_29 { pt3dadd( 17.1029, 28.3246, 8.98932, 0.28 ) }
    dend_29 { pt3dadd( 17.3558, 28.9642, 9.00554, 0.55 ) }
    dend_29 { pt3dadd( 17.9299, 30.5919, 9.06705, 0.28 ) }
    dend_29 { pt3dadd( 18.0939, 31.0434, 9.08861, 0.55 ) }
    dend_29 { pt3dadd( 19.0768, 33.274, 9.25332, 0.28 ) }
    dend_29 { pt3dadd( 19.4279, 33.9463, 9.31754, 0.55 ) }
    dend_29 { pt3dadd( 20.4363, 35.4892, 9.52767, 0.28 ) }
    dend_29 { pt3dadd( 21.6633, 37.2134, 9.76942, 0.28 ) }
    dend_29 { pt3dadd( 22.8314, 38.7685, 9.98503, 0.55 ) }
    dend_29 { pt3dadd( 24.3016, 40.7446, 10.1978, 0.28 ) }
    dend_29 { pt3dadd( 24.8703, 41.5172, 10.2742, 0.55 ) }
    dend_29 { pt3dadd( 27.1534, 44.6093, 10.8479, 0.28 ) }
    dend_29 { pt3dadd( 28.4935, 46.404, 11.284, 0.55 ) }
    dend_29 { pt3dadd( 29.7215, 48.1194, 11.766, 0.55 ) }
    dend_29 { pt3dadd( 30.9871, 50.0741, 12.3415, 0.28 ) }
    dend_29 { pt3dadd( 32.0336, 51.8217, 12.8322, 0.55 ) }
    dend_29 { pt3dadd( 34.716, 56.5987, 14.1861, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_29 { pt3dadd( 35.2561, 57.6638, 14.4742, 0.55 ) }
    dend_29 { pt3dadd( 36.6906, 60.7302, 15.3333, 0.28 ) }
    dend_29 { pt3dadd( 37.3475, 62.2891, 15.6994, 0.55 ) }
    dend_29 { pt3dadd( 38.3673, 65.2013, 16.2329, 0.28 ) }
    dend_29 { pt3dadd( 38.804, 66.9514, 16.4101, 0.55 ) }
    dend_29 { pt3dadd( 39.164, 69.4053, 16.4672, 0.28 ) }
    dend_29 { pt3dadd( 39.2818, 70.6658, 16.4932, 0.55 ) }
    dend_29 { pt3dadd( 39.4348, 73.6861, 16.5532, 0.28 ) }
    dend_29 { pt3dadd( 39.5536, 76.2427, 16.7755, 0.83 ) }
    dend_29 { pt3dadd( 39.7468, 80.1771, 17.3401, 0.28 ) }
    dend_29 { pt3dadd( 39.8763, 82.1813, 17.6969, 0.55 ) }
    dend_29 { pt3dadd( 40.1494, 85.641, 18.4502, 0.28 ) }
    dend_29 { pt3dadd( 40.2841, 87.2928, 18.8467, 0.55 ) }
    dend_29 { pt3dadd( 40.6441, 91.5653, 20.0312, 0.28 ) }
    dend_29 { pt3dadd( 40.7574, 92.567, 20.2925, 0.55 ) }
    dend_29 { pt3dadd( 41.1039, 95.2066, 20.9438, 0.28 ) }
    dend_29 { pt3dadd( 41.3384, 96.7544, 21.3184, 0.55 ) }
    dend_29 { pt3dadd( 42.0124, 100.754, 22.2315, 0.28 ) }
    dend_29 { pt3dadd( 42.2808, 102.154, 22.4857, 0.55 ) }
    dend_29 { pt3dadd( 42.9018, 105.007, 22.813, 0.28 ) }
    dend_29 { pt3dadd( 43.6189, 107.752, 23.105, 0.28 ) }
    dend_29 { pt3dadd( 43.7189, 108.083, 23.1397, 0.83 ) }
    dend_29 { pt3dadd( 44.2905, 109.831, 23.3021, 0.28 ) }
    dend_29 { pt3dadd( 44.9058, 111.417, 23.4375, 0.55 ) }
    dend_29 { pt3dadd( 45.9019, 113.979, 23.6931, 0.28 ) }
    dend_29 { pt3dadd( 46.8697, 116.206, 23.973, 0.55 ) }
    dend_29 { pt3dadd( 51.9535, 127.324, 24.626, 0.55 ) }
    // Section: dend_28, id: dend_28, parent: soma_0 (entry count 27/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 2.55611, 5.2689, 8.114, 0.55 ) }
    dend_28 { pt3dadd( 4.13103, 7.15433, 8.87638, 0.55 ) }
    dend_28 { pt3dadd( 5.90532, 9.1923, 9.88513, 1.11 ) }
    dend_28 { pt3dadd( 7.27777, 10.9277, 10.7155, 0.55 ) }
    dend_28 { pt3dadd( 8.95996, 13.23, 11.6644, 0.55 ) }
    dend_28 { pt3dadd( 10.5913, 15.4627, 12.5846, 0.55 ) }
    dend_28 { pt3dadd( 12.0025, 17.3941, 13.3807, 0.83 ) }
    dend_28 { pt3dadd( 13.2752, 19.0118, 14.1754, 0.55 ) }
    dend_28 { pt3dadd( 14.7789, 20.7693, 15.1837, 0.28 ) }
    dend_28 { pt3dadd( 15.8545, 22.1935, 16.0152, 0.55 ) }
    dend_28 { pt3dadd( 22.3304, 32.4302, 20.6721, 0.55 ) }
    dend_28 { pt3dadd( 27.4592, 43.4835, 25.3257, 0.55 ) }
    dend_28 { pt3dadd( 31.5683, 55.5279, 28.5409, 0.55 ) }
    dend_28 { pt3dadd( 36.1663, 67.8286, 29.0334, 0.55 ) }
    dend_28 { pt3dadd( 41.7561, 79.6229, 28.0068, 0.55 ) }
    dend_28 { pt3dadd( 48.8188, 90.0326, 24.817, 0.55 ) }
    // Section: dend_19, id: dend_19, parent: soma_0 (entry count 43/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -2.57389, 6.0354, 1.184, 0.83 ) }
    dend_19 { pt3dadd( -2.6724, 8.24108, 2.27982, 0.83 ) }
    dend_19 { pt3dadd( -2.66708, 10.6944, 3.27657, 0.83 ) }
    dend_19 { pt3dadd( -2.5705, 13.1736, 4.10209, 1.66 ) }
    dend_19 { pt3dadd( -2.29256, 17.6464, 5.39173, 0.83 ) }
    dend_19 { pt3dadd( -2.23389, 19.728, 5.91985, 0.83 ) }
    dend_19 { pt3dadd( -2.19423, 22.1881, 6.48652, 1.66 ) }
    dend_19 { pt3dadd( -2.07409, 25.4691, 7.18668, 0.83 ) }
    dend_19 { pt3dadd( -1.94293, 28.5313, 7.71947, 0.83 ) }
    dend_19 { pt3dadd( -1.85771, 30.5961, 8.01758, 0.83 ) }
    dend_19 { pt3dadd( -1.75761, 35.133, 8.26778, 0.83 ) }
    dend_19 { pt3dadd( -1.78037, 37.2212, 8.40261, 0.83 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 55/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -2.93389, -9.5991, -0.806, 1.66 ) }
    dend_0 { pt3dadd( -2.58088, -13.1693, -1.35266, 1.66 ) }
    dend_0 { pt3dadd( -2.21427, -17.1818, -2.06051, 1.66 ) }
    dend_0 { pt3dadd( -1.88085, -20.831, -2.70427, 0.83 ) }
    dend_0 { pt3dadd( -1.37129, -26.4081, -3.68813, 1.11 ) }
    dend_0 { pt3dadd( -0.972255, -30.7754, -4.45857, 1.11 ) }
    dend_0 { pt3dadd( -0.74047, -33.3123, -4.9061, 1.11 ) }
    dend_0 { pt3dadd( -0.408209, -35.7638, -5.41223, 1.11 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 63/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 2.04896, 6.48508, -0.0756169, 0.55 ) }
    axon_0 { pt3dadd( 6.58939, 20.7814, -0.0756169, 0.55 ) }
    axon_0 { pt3dadd( 11.1298, 35.0777, -0.0756169, 0.55 ) }
    // Section: dend_25, id: dend_25, parent: dend_19 (entry count 66/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( -1.78037, 37.2212, 8.40261, 0.55 ) }
    dend_25 { pt3dadd( -1.72839, 41.5044, 7.28898, 0.55 ) }
    dend_25 { pt3dadd( -1.53094, 44.1341, 6.49006, 0.55 ) }
    dend_25 { pt3dadd( -1.20352, 46.7507, 5.67528, 0.83 ) }
    dend_25 { pt3dadd( -0.946219, 48.4737, 5.14878, 0.28 ) }
    dend_25 { pt3dadd( -0.787136, 49.4319, 4.88584, 0.28 ) }
    dend_25 { pt3dadd( -0.642639, 50.2866, 4.67303, 0.55 ) }
    dend_25 { pt3dadd( -0.185426, 52.5998, 4.12912, 0.55 ) }
    dend_25 { pt3dadd( 0.00394139, 53.9009, 3.89314, 0.55 ) }
    dend_25 { pt3dadd( 0.0909944, 54.8757, 3.79758, 0.83 ) }
    dend_25 { pt3dadd( 0.178444, 57.8793, 3.55886, 0.55 ) }
    dend_25 { pt3dadd( 0.0903754, 59.1074, 3.4869, 0.83 ) }
    dend_25 { pt3dadd( -0.119026, 60.3597, 3.44121, 0.28 ) }
    dend_25 { pt3dadd( -0.413119, 61.5834, 3.44393, 0.55 ) }
    dend_25 { pt3dadd( -0.978214, 63.6187, 3.41121, 0.55 ) }
    dend_25 { pt3dadd( -1.71911, 65.9586, 3.36679, 0.55 ) }
    dend_25 { pt3dadd( -2.29338, 67.4996, 3.20913, 0.28 ) }
    dend_25 { pt3dadd( -2.59928, 68.3213, 3.05145, 0.28 ) }
    dend_25 { pt3dadd( -3.02497, 69.4618, 2.75275, 0.55 ) }
    dend_25 { pt3dadd( -3.54075, 70.7298, 2.28291, 0.28 ) }
    dend_25 { pt3dadd( -3.99754, 71.8981, 1.76805, 1.11 ) }
    dend_25 { pt3dadd( -5.41957, 75.3042, 0.198969, 0.28 ) }
    dend_25 { pt3dadd( -5.89731, 76.4744, -0.298136, 0.83 ) }
    dend_25 { pt3dadd( -6.71756, 78.4913, -1.07236, 0.83 ) }
    dend_25 { pt3dadd( -7.63528, 80.717, -1.81213, 0.28 ) }
    dend_25 { pt3dadd( -8.32161, 82.3932, -2.26633, 0.28 ) }
    dend_25 { pt3dadd( -9.61539, 85.7298, -2.97275, 0.83 ) }
    dend_25 { pt3dadd( -10.1695, 87.309, -3.16614, 0.28 ) }
    dend_25 { pt3dadd( -10.7148, 88.9296, -3.30079, 0.55 ) }
    dend_25 { pt3dadd( -11.671, 91.9977, -3.51509, 0.55 ) }
    dend_25 { pt3dadd( -12.1275, 93.5749, -3.59466, 1.11 ) }
    dend_25 { pt3dadd( -12.6724, 95.5325, -3.72257, 0.55 ) }
    dend_25 { pt3dadd( -13.1243, 97.511, -3.82821, 0.55 ) }
    dend_25 { pt3dadd( -13.6262, 99.7792, -3.95692, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_25 { pt3dadd( -14.2324, 102.628, -4.1344, 0.55 ) }
    dend_25 { pt3dadd( -14.4281, 103.755, -4.20047, 0.55 ) }
    dend_25 { pt3dadd( -14.628, 105.006, -4.27642, 0.55 ) }
    dend_25 { pt3dadd( -15.1802, 108.583, -4.49621, 0.55 ) }
    dend_25 { pt3dadd( -15.5083, 110.698, -4.62168, 0.83 ) }
    dend_25 { pt3dadd( -15.8093, 113.138, -4.73969, 0.28 ) }
    dend_25 { pt3dadd( -16.0923, 115.472, -4.83651, 0.55 ) }
    dend_25 { pt3dadd( -16.2963, 117.116, -4.91803, 0.55 ) }
    dend_25 { pt3dadd( -16.4983, 118.852, -5.04578, 0.28 ) }
    dend_25 { pt3dadd( -16.6069, 119.863, -5.14719, 0.55 ) }
    dend_25 { pt3dadd( -16.8637, 122.358, -5.33718, 0.55 ) }
    dend_25 { pt3dadd( -17.0061, 123.802, -5.41876, 0.28 ) }
    dend_25 { pt3dadd( -17.101, 124.536, -5.46575, 0.83 ) }
    dend_25 { pt3dadd( -17.355, 126.686, -5.58768, 0.28 ) }
    dend_25 { pt3dadd( -17.4388, 127.425, -5.63646, 0.55 ) }
    dend_25 { pt3dadd( -17.6125, 128.776, -5.73495, 0.28 ) }
    dend_25 { pt3dadd( -17.7574, 129.882, -5.81454, 0.55 ) }
    dend_25 { pt3dadd( -18.0187, 131.991, -5.92176, 0.55 ) }
    dend_25 { pt3dadd( -18.5686, 135.653, -6.06127, 0.55 ) }
    dend_25 { pt3dadd( -18.944, 137.926, -6.15364, 0.28 ) }
    dend_25 { pt3dadd( -19.0744, 138.795, -6.19656, 0.83 ) }
    dend_25 { pt3dadd( -19.2906, 140.34, -6.27572, 0.83 ) }
    dend_25 { pt3dadd( -19.5968, 142.666, -6.39706, 0.55 ) }
    dend_25 { pt3dadd( -19.8162, 145.198, -6.48636, 0.55 ) }
    dend_25 { pt3dadd( -20.0337, 147.788, -6.40795, 0.55 ) }
    dend_25 { pt3dadd( -20.1492, 149.776, -6.30787, 0.55 ) }
    dend_25 { pt3dadd( -20.2214, 152.542, -6.14728, 0.55 ) }
    dend_25 { pt3dadd( -20.2417, 155.7, -5.94127, 0.55 ) }
    dend_25 { pt3dadd( -20.1264, 159.8, -5.62934, 0.55 ) }
    dend_25 { pt3dadd( -19.9619, 163.22, -5.32288, 0.55 ) }
    dend_25 { pt3dadd( -19.7928, 166.624, -4.9868, 0.55 ) }
    dend_25 { pt3dadd( -19.6868, 168.66, -4.80113, 0.55 ) }
    dend_25 { pt3dadd( -19.5427, 170.382, -4.66898, 0.83 ) }
    dend_25 { pt3dadd( -19.3816, 171.952, -4.57797, 0.55 ) }
    dend_25 { pt3dadd( -19.1607, 174.219, -4.46883, 0.55 ) }
    dend_25 { pt3dadd( -18.8922, 176.437, -4.36733, 0.55 ) }
    dend_25 { pt3dadd( -18.7379, 177.76, -4.23735, 0.83 ) }
    dend_25 { pt3dadd( -18.4849, 179.885, -4.04287, 0.28 ) }
    dend_25 { pt3dadd( -18.1533, 182.575, -3.72994, 0.55 ) }
    dend_25 { pt3dadd( -17.7932, 185.73, -3.28961, 0.55 ) }
    dend_25 { pt3dadd( -17.5582, 187.813, -2.93963, 0.55 ) }
    dend_25 { pt3dadd( -17.433, 189.02, -2.71851, 0.28 ) }
    dend_25 { pt3dadd( -17.294, 190.602, -2.40665, 0.55 ) }
    dend_25 { pt3dadd( -17.0761, 193.694, -1.73627, 0.55 ) }
    dend_25 { pt3dadd( -16.8799, 196.608, -1.10159, 0.55 ) }
    dend_25 { pt3dadd( -16.7901, 198.127, -0.817542, 0.55 ) }
    // Section: dend_20, id: dend_20, parent: dend_19 (entry count 46/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( -1.78037, 37.2212, 8.40261, 0.55 ) }
    dend_20 { pt3dadd( -1.88011, 41.2045, 8.31317, 0.55 ) }
    dend_20 { pt3dadd( -2.00281, 46.1051, 8.20313, 0.55 ) }
    dend_20 { pt3dadd( -2.07113, 48.8339, 8.14186, 0.55 ) }
    dend_20 { pt3dadd( -2.13158, 51.2481, 8.08765, 0.55 ) }
    dend_20 { pt3dadd( -2.21576, 54.6102, 8.01216, 0.55 ) }
    dend_20 { pt3dadd( -2.29148, 57.6343, 7.94426, 0.55 ) }
    // Section: dend_18, id: dend_18, parent: dend_0 (entry count 53/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -0.408209, -35.7638, -5.41223, 0.55 ) }
    dend_18 { pt3dadd( -0.0469647, -37.2853, -4.6003, 0.55 ) }
    dend_18 { pt3dadd( 0.690414, -40.1043, -3.58381, 0.55 ) }
    dend_18 { pt3dadd( 1.70581, -43.886, -1.50149, 0.55 ) }
    dend_18 { pt3dadd( 2.13543, -45.5842, -0.508516, 0.55 ) }
    dend_18 { pt3dadd( 2.44189, -46.995, 0.367419, 0.55 ) }
    dend_18 { pt3dadd( 3.03061, -49.5697, 1.97981, 0.55 ) }
    dend_18 { pt3dadd( 3.51706, -51.5519, 3.23333, 0.55 ) }
    dend_18 { pt3dadd( 4.90923, -55.9571, 6.12376, 0.55 ) }
    dend_18 { pt3dadd( 5.54176, -57.6003, 7.10703, 0.55 ) }
    dend_18 { pt3dadd( 7.16168, -61.0747, 9.21951, 0.28 ) }
    dend_18 { pt3dadd( 7.98693, -62.4454, 10.1344, 0.28 ) }
    dend_18 { pt3dadd( 9.04623, -63.6371, 11.0399, 0.55 ) }
    dend_18 { pt3dadd( 10.1603, -64.4254, 11.6454, 0.28 ) }
    dend_18 { pt3dadd( 11.0995, -64.738, 11.8716, 0.55 ) }
    dend_18 { pt3dadd( 14.2481, -64.9791, 12.5837, 0.55 ) }
    dend_18 { pt3dadd( 15.6438, -64.7856, 12.6838, 0.55 ) }
    dend_18 { pt3dadd( 16.5244, -64.623, 12.6661, 0.55 ) }
    dend_18 { pt3dadd( 18.0228, -64.309, 12.5378, 0.55 ) }
    dend_18 { pt3dadd( 19.696, -64.0307, 12.3247, 0.55 ) }
    dend_18 { pt3dadd( 21.7756, -63.72, 11.9636, 0.55 ) }
    dend_18 { pt3dadd( 26.8593, -63.0399, 10.9813, 0.55 ) }
    dend_18 { pt3dadd( 29.1269, -62.7347, 10.5572, 0.28 ) }
    dend_18 { pt3dadd( 29.998, -62.5914, 10.4044, 0.55 ) }
    dend_18 { pt3dadd( 33.3043, -62.0477, 9.6805, 0.55 ) }
    dend_18 { pt3dadd( 34.1801, -61.8556, 9.46499, 0.55 ) }
    dend_18 { pt3dadd( 36.0954, -61.297, 9.01909, 0.28 ) }
    dend_18 { pt3dadd( 37.2626, -60.8366, 8.86408, 0.28 ) }
    dend_18 { pt3dadd( 39.0639, -60.0217, 8.65942, 0.55 ) }
    dend_18 { pt3dadd( 42.1066, -58.6016, 8.20851, 0.28 ) }
    dend_18 { pt3dadd( 43.5489, -57.9418, 7.96085, 0.28 ) }
    dend_18 { pt3dadd( 44.6171, -57.5302, 7.77076, 0.55 ) }
    dend_18 { pt3dadd( 47.5645, -56.5832, 7.11098, 0.28 ) }
    dend_18 { pt3dadd( 48.978, -56.1654, 6.78413, 0.83 ) }
    dend_18 { pt3dadd( 51.5724, -55.4495, 6.23341, 0.28 ) }
    dend_18 { pt3dadd( 52.5426, -55.1952, 6.07342, 0.28 ) }
    dend_18 { pt3dadd( 53.5842, -54.987, 5.85218, 0.83 ) }
    dend_18 { pt3dadd( 55.7846, -54.6525, 5.25083, 0.28 ) }
    dend_18 { pt3dadd( 57.2677, -54.6117, 4.69765, 0.83 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 92/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -0.408209, -35.7638, -5.41223, 0.83 ) }
    dend_1 { pt3dadd( -0.129683, -36.3368, -5.80723, 0.83 ) }
    dend_1 { pt3dadd( 0.860063, -38.3726, -7.21088, 0.83 ) }
    dend_1 { pt3dadd( 2.24292, -41.2171, -9.17204, 0.83 ) }
    dend_1 { pt3dadd( 4.24157, -45.3282, -12.0065, 0.83 ) }
    dend_1 { pt3dadd( 5.77462, -48.4815, -14.1806, 0.83 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 98/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 11.1298, 35.0777, -0.0756169, 0.28 ) }
    axon_1 { pt3dadd( 15.6702, 49.374, -0.0756169, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    axon_1 { pt3dadd( 20.2107, 63.6703, -0.0756169, 0.28 ) }
    // Section: dend_27, id: dend_27, parent: dend_25 (entry count 1/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( -16.7901, 198.127, -0.817542, 0.55 ) }
    dend_27 { pt3dadd( -15.2663, 198.912, -0.87497, 0.55 ) }
    dend_27 { pt3dadd( -13.8611, 199.635, -0.927922, 0.28 ) }
    dend_27 { pt3dadd( -12.142, 200.52, -0.992713, 0.55 ) }
    dend_27 { pt3dadd( -1.88332, 204.576, -0.128616, 0.55 ) }
    // Section: dend_26, id: dend_26, parent: dend_25 (entry count 6/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( -16.7901, 198.127, -0.817542, 0.55 ) }
    dend_26 { pt3dadd( -16.3837, 200.65, 0.321129, 0.55 ) }
    dend_26 { pt3dadd( -15.7787, 204.395, 1.93822, 0.55 ) }
    dend_26 { pt3dadd( -15.3392, 207.297, 3.16774, 0.55 ) }
    dend_26 { pt3dadd( -14.8803, 210.688, 4.46326, 0.55 ) }
    dend_26 { pt3dadd( -14.5048, 213.56, 5.5498, 0.55 ) }
    dend_26 { pt3dadd( -14.2483, 216.107, 6.46818, 0.28 ) }
    dend_26 { pt3dadd( -14.1092, 217.719, 6.958, 0.28 ) }
    dend_26 { pt3dadd( -14.0464, 218.563, 7.15236, 0.55 ) }
    dend_26 { pt3dadd( -13.7483, 222.536, 7.91374, 0.55 ) }
    dend_26 { pt3dadd( -13.519, 227.427, 8.84, 0.28 ) }
    dend_26 { pt3dadd( -13.445, 230.099, 9.33614, 0.28 ) }
    dend_26 { pt3dadd( -13.4159, 232.556, 9.75044, 0.55 ) }
    dend_26 { pt3dadd( -13.1964, 237.798, 10.5934, 0.28 ) }
    dend_26 { pt3dadd( -13.0749, 240.123, 10.9305, 0.55 ) }
    dend_26 { pt3dadd( -9.81179, 251.406, 13.8795, 0.55 ) }
    // Section: dend_24, id: dend_24, parent: dend_20 (entry count 22/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( -2.29148, 57.6343, 7.94426, 0.55 ) }
    dend_24 { pt3dadd( -1.45843, 58.5689, 7.93345, 0.55 ) }
    dend_24 { pt3dadd( -0.417149, 59.7372, 7.91995, 0.55 ) }
    dend_24 { pt3dadd( 0.617943, 60.8985, 7.90652, 0.55 ) }
    dend_24 { pt3dadd( 1.09048, 61.4287, 7.90039, 0.55 ) }
    dend_24 { pt3dadd( 2.36708, 62.8609, 7.88383, 0.83 ) }
    dend_24 { pt3dadd( 6.9745, 69.3298, 7.00333, 0.83 ) }
    dend_24 { pt3dadd( 11.7198, 75.3585, 4.88472, 0.83 ) }
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 30/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( -2.29148, 57.6343, 7.94426, 0.55 ) }
    dend_21 { pt3dadd( -3.40505, 60.0582, 8.17351, 0.55 ) }
    dend_21 { pt3dadd( -4.78016, 63.0439, 8.31913, 0.55 ) }
    dend_21 { pt3dadd( -5.87086, 65.2019, 8.39053, 0.55 ) }
    dend_21 { pt3dadd( -6.98408, 67.2365, 8.52409, 0.55 ) }
    dend_21 { pt3dadd( -7.54732, 68.2482, 8.61051, 0.83 ) }
    dend_21 { pt3dadd( -8.85464, 70.5426, 8.89322, 0.55 ) }
    dend_21 { pt3dadd( -10.023, 72.4764, 9.14302, 0.55 ) }
    dend_21 { pt3dadd( -10.7214, 73.6579, 9.40717, 0.83 ) }
    dend_21 { pt3dadd( -11.7952, 75.4252, 9.87702, 0.28 ) }
    dend_21 { pt3dadd( -12.5354, 76.5622, 10.2079, 0.55 ) }
    dend_21 { pt3dadd( -13.7001, 78.4294, 10.7816, 0.55 ) }
    dend_21 { pt3dadd( -14.3712, 79.5856, 11.2458, 0.55 ) }
    dend_21 { pt3dadd( -15.1741, 81.3647, 11.8939, 0.28 ) }
    dend_21 { pt3dadd( -15.7701, 82.9706, 12.3415, 0.55 ) }
    dend_21 { pt3dadd( -16.322, 84.5498, 12.718, 0.55 ) }
    dend_21 { pt3dadd( -16.8605, 86.1547, 13.0926, 0.28 ) }
    dend_21 { pt3dadd( -17.6673, 89.0021, 13.6681, 0.55 ) }
    dend_21 { pt3dadd( -18.2089, 91.2435, 14.1151, 0.28 ) }
    dend_21 { pt3dadd( -18.6781, 93.1772, 14.4958, 0.55 ) }
    // Section: dend_17, id: dend_17, parent: dend_1 (entry count 50/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 5.77462, -48.4815, -14.1806, 0.55 ) }
    dend_17 { pt3dadd( 7.2913, -49.6331, -12.9706, 0.55 ) }
    dend_17 { pt3dadd( 8.78219, -50.7582, -11.4471, 0.55 ) }
    dend_17 { pt3dadd( 10.7677, -52.3718, -9.28595, 0.55 ) }
    dend_17 { pt3dadd( 12.0364, -53.4422, -7.92371, 0.28 ) }
    dend_17 { pt3dadd( 13.4258, -54.6372, -6.18466, 0.55 ) }
    dend_17 { pt3dadd( 16.8926, -57.784, -1.56313, 0.55 ) }
    dend_17 { pt3dadd( 17.8924, -58.8034, -0.0272344, 0.55 ) }
    dend_17 { pt3dadd( 18.7089, -59.6077, 1.29441, 0.28 ) }
    dend_17 { pt3dadd( 19.1486, -60.0414, 2.03729, 0.55 ) }
    dend_17 { pt3dadd( 21.4269, -61.6753, 5.26655, 0.28 ) }
    dend_17 { pt3dadd( 22.3628, -62.2656, 6.60159, 0.28 ) }
    dend_17 { pt3dadd( 23.0178, -62.5914, 7.42654, 0.55 ) }
    dend_17 { pt3dadd( 24.0885, -63.1721, 8.88042, 0.55 ) }
    dend_17 { pt3dadd( 25.9709, -64.1793, 11.4085, 0.55 ) }
    dend_17 { pt3dadd( 27.6861, -65.1602, 13.5702, 0.55 ) }
    dend_17 { pt3dadd( 30.6711, -66.9111, 16.9689, 0.55 ) }
    dend_17 { pt3dadd( 32.946, -68.2218, 19.5664, 0.28 ) }
    dend_17 { pt3dadd( 34.2697, -68.9863, 21.071, 0.28 ) }
    dend_17 { pt3dadd( 35.4413, -69.694, 22.3788, 0.83 ) }
    dend_17 { pt3dadd( 37.0123, -70.6407, 24.1852, 0.28 ) }
    dend_17 { pt3dadd( 37.743, -71.0503, 25.0211, 0.55 ) }
    dend_17 { pt3dadd( 39.3552, -71.729, 26.5379, 0.28 ) }
    dend_17 { pt3dadd( 40.1153, -71.9809, 27.2506, 0.28 ) }
    dend_17 { pt3dadd( 40.7688, -72.1424, 27.9167, 0.55 ) }
    dend_17 { pt3dadd( 43.4396, -72.6849, 30.9623, 0.55 ) }
    dend_17 { pt3dadd( 44.7709, -72.883, 32.679, 0.28 ) }
    dend_17 { pt3dadd( 45.5497, -73.0409, 33.7551, 0.55 ) }
    dend_17 { pt3dadd( 46.4923, -73.3347, 35.1011, 0.55 ) }
    dend_17 { pt3dadd( 51.424, -77.1804, 43.8426, 0.55 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 80/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 5.77462, -48.4815, -14.1806, 0.83 ) }
    dend_2 { pt3dadd( 4.04323, -50.5995, -15.0071, 0.83 ) }
    dend_2 { pt3dadd( 3.63419, -51.0999, -15.2024, 0.83 ) }
    // Section: dend_23, id: dend_23, parent: dend_21 (entry count 83/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( -18.6781, 93.1772, 14.4958, 0.55 ) }
    dend_23 { pt3dadd( -19.6076, 96.2501, 18.4265, 0.55 ) }
    dend_23 { pt3dadd( -22.6885, 103.356, 27.3534, 0.55 ) }
    // Section: dend_22, id: dend_22, parent: dend_21 (entry count 86/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( -18.6781, 93.1772, 14.4958, 0.28 ) }
    dend_22 { pt3dadd( -18.5232, 95.1711, 14.1011, 0.28 ) }
    dend_22 { pt3dadd( -18.4627, 97.0267, 13.8548, 0.55 ) }
    dend_22 { pt3dadd( -18.3744, 99.7362, 13.4952, 0.28 ) }
    dend_22 { pt3dadd( -18.3173, 101.489, 13.2625, 0.28 ) }
    dend_22 { pt3dadd( -18.2954, 102.161, 13.1734, 0.55 ) }
    dend_22 { pt3dadd( -18.2342, 104.038, 12.9242, 0.28 ) }
    dend_22 { pt3dadd( -18.2627, 104.804, 12.8557, 0.83 ) }
    dend_22 { pt3dadd( -18.0474, 112.739, 13.1731, 0.83 ) }
    // Section: dend_16, id: dend_16, parent: dend_2 (entry count 95/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 3.63419, -51.0999, -15.2024, 0.55 ) }
    dend_16 { pt3dadd( 3.80279, -52.3703, -15.0237, 0.55 ) }
    dend_16 { pt3dadd( 4.10101, -54.9255, -14.725, 0.55 ) }
    dend_16 { pt3dadd( 4.25853, -56.787, -14.552, 0.28 ) }
    dend_16 { pt3dadd( 4.3861, -60.1147, -14.3545, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_16 { pt3dadd( 4.33635, -62.5852, -14.2975, 0.55 ) }
    dend_16 { pt3dadd( 4.19372, -65.4603, -14.2869, 0.55 ) }
    dend_16 { pt3dadd( 3.82253, -69.2546, -14.3617, 0.55 ) }
    dend_16 { pt3dadd( 3.60152, -70.7026, -14.395, 0.55 ) }
    dend_16 { pt3dadd( 2.81478, -75.0258, -14.3698, 0.55 ) }
    dend_16 { pt3dadd( 2.17711, -77.8235, -14.3115, 0.55 ) }
    dend_16 { pt3dadd( 1.21455, -81.5038, -14.1653, 0.55 ) }
    dend_16 { pt3dadd( 0.581519, -83.6584, -14.0393, 0.28 ) }
    dend_16 { pt3dadd( -0.13062, -86.0635, -13.8212, 0.83 ) }
    dend_16 { pt3dadd( -1.04005, -89.2915, -13.4598, 0.55 ) }
    dend_16 { pt3dadd( -1.53175, -90.9369, -13.2044, 0.28 ) }
    dend_16 { pt3dadd( -1.94695, -92.3082, -12.9637, 0.55 ) }
    dend_16 { pt3dadd( -2.98714, -95.5327, -12.4439, 0.28 ) }
    dend_16 { pt3dadd( -3.28707, -96.5195, -12.3158, 0.55 ) }
    dend_16 { pt3dadd( -4.01793, -99.0056, -12.1209, 0.55 ) }
    dend_16 { pt3dadd( -4.76923, -101.584, -12.1507, 0.28 ) }
    dend_16 { pt3dadd( -5.05646, -102.742, -12.2135, 0.55 ) }
    dend_16 { pt3dadd( -5.44668, -104.757, -12.3825, 0.28 ) }
    dend_16 { pt3dadd( -5.60492, -106.194, -12.5706, 0.28 ) }
    dend_16 { pt3dadd( -5.73713, -107.941, -12.8254, 0.55 ) }
    dend_16 { pt3dadd( -5.88232, -111.249, -13.3433, 0.28 ) }
    dend_16 { pt3dadd( -5.92454, -114.703, -13.8961, 0.28 ) }
    dend_16 { pt3dadd( -5.90184, -116.451, -14.1709, 0.83 ) }
    dend_16 { pt3dadd( -5.84997, -118.375, -14.4575, 0.28 ) }
    dend_16 { pt3dadd( -5.83295, -119.957, -14.6794, 0.55 ) }
    dend_16 { pt3dadd( -5.87535, -121.828, -14.8952, 0.28 ) }
    dend_16 { pt3dadd( -5.93069, -122.76, -15.0111, 0.55 ) }
    dend_16 { pt3dadd( -6.23819, -126.047, -15.7368, 0.28 ) }
    dend_16 { pt3dadd( -6.36266, -127.168, -16.0361, 0.55 ) }
    dend_16 { pt3dadd( -6.57787, -128.927, -16.6831, 0.28 ) }
    dend_16 { pt3dadd( -6.71257, -130.126, -17.2291, 0.55 ) }
    dend_16 { pt3dadd( -7.05647, -132.569, -18.5052, 0.55 ) }
    dend_16 { pt3dadd( -7.41581, -134.82, -19.7424, 0.55 ) }
    dend_16 { pt3dadd( -7.81742, -136.811, -20.8406, 0.55 ) }
    dend_16 { pt3dadd( -8.32175, -139.618, -22.3696, 0.28 ) }
    dend_16 { pt3dadd( -8.38053, -140.185, -22.6854, 0.55 ) }
    dend_16 { pt3dadd( -8.47269, -141.244, -23.2831, 0.28 ) }
    dend_16 { pt3dadd( -8.50155, -141.597, -23.4647, 0.55 ) }
    dend_16 { pt3dadd( -8.5118, -142.569, -23.9904, 0.28 ) }
    dend_16 { pt3dadd( -8.46864, -143.614, -24.5295, 0.55 ) }
    dend_16 { pt3dadd( -8.21825, -146.653, -26.1115, 0.28 ) }
    dend_16 { pt3dadd( -8.13104, -147.452, -26.5457, 0.55 ) }
    dend_16 { pt3dadd( -7.86549, -150.096, -27.8952, 0.55 ) }
    dend_16 { pt3dadd( -7.63973, -152.99, -29.3988, 0.28 ) }
    dend_16 { pt3dadd( -7.59345, -153.757, -29.7913, 0.55 ) }
    dend_16 { pt3dadd( -7.81619, -156.308, -30.5863, 0.28 ) }
    dend_16 { pt3dadd( -8.0386, -157.464, -30.7039, 0.55 ) }
    dend_16 { pt3dadd( -8.63403, -159.933, -30.7097, 0.28 ) }
    dend_16 { pt3dadd( -9.09827, -161.491, -30.5083, 0.55 ) }
    dend_16 { pt3dadd( -9.54102, -162.842, -30.2132, 0.55 ) }
    dend_16 { pt3dadd( -11.9149, -170.224, -28.1503, 0.28 ) }
    dend_16 { pt3dadd( -12.4704, -171.965, -27.5157, 0.28 ) }
    dend_16 { pt3dadd( -12.6926, -172.79, -27.2341, 0.55 ) }
    dend_16 { pt3dadd( -13.1814, -175.239, -26.4602, 0.28 ) }
    dend_16 { pt3dadd( -13.2655, -175.782, -26.2953, 0.55 ) }
    dend_16 { pt3dadd( -13.5363, -178.423, -25.6301, 0.28 ) }
    dend_16 { pt3dadd( -13.4819, -180.091, -25.4835, 0.55 ) }
    dend_16 { pt3dadd( -13.3388, -184.284, -25.4167, 0.28 ) }
    dend_16 { pt3dadd( -13.2583, -185.576, -25.5071, 0.55 ) }
    dend_16 { pt3dadd( -13.1362, -186.828, -25.7363, 0.28 ) }
    dend_16 { pt3dadd( -13.0454, -187.645, -25.9395, 0.55 ) }
    dend_16 { pt3dadd( -12.7565, -189.972, -26.7111, 0.28 ) }
    dend_16 { pt3dadd( -12.6552, -190.819, -27.0252, 0.55 ) }
    dend_16 { pt3dadd( -12.4545, -193.132, -27.7888, 0.55 ) }
    dend_16 { pt3dadd( -12.2779, -194.815, -28.3927, 0.28 ) }
    dend_16 { pt3dadd( -12.1762, -195.448, -28.6183, 0.55 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 66/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 3.63419, -51.0999, -15.2024, 0.55 ) }
    dend_3 { pt3dadd( 5.0333, -53.8976, -17.7315, 0.55 ) }
    dend_3 { pt3dadd( 7.01623, -57.8627, -21.316, 0.55 ) }
    // Section: dend_15, id: dend_15, parent: dend_3 (entry count 69/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 7.01623, -57.8627, -21.316, 0.55 ) }
    dend_15 { pt3dadd( 9.96174, -57.6705, -19.3508, 0.55 ) }
    dend_15 { pt3dadd( 11.8916, -57.4416, -17.9807, 0.28 ) }
    dend_15 { pt3dadd( 12.6695, -57.3604, -17.4612, 0.55 ) }
    dend_15 { pt3dadd( 14.7727, -57.0899, -16.0302, 0.55 ) }
    dend_15 { pt3dadd( 16.3078, -56.9491, -14.9754, 0.28 ) }
    dend_15 { pt3dadd( 17.4301, -56.8684, -14.2862, 0.28 ) }
    dend_15 { pt3dadd( 19.4182, -56.7726, -13.252, 0.55 ) }
    dend_15 { pt3dadd( 21.9212, -56.6931, -12.103, 0.28 ) }
    dend_15 { pt3dadd( 24.3785, -56.6753, -11.1879, 0.28 ) }
    dend_15 { pt3dadd( 26.5158, -56.6519, -10.5143, 0.28 ) }
    dend_15 { pt3dadd( 29.8767, -56.5981, -9.70752, 0.55 ) }
    dend_15 { pt3dadd( 32.5243, -56.5364, -9.22637, 0.28 ) }
    dend_15 { pt3dadd( 35.7009, -56.4369, -8.82789, 0.28 ) }
    dend_15 { pt3dadd( 38.3473, -56.3043, -8.59483, 0.55 ) }
    dend_15 { pt3dadd( 41.0242, -56.173, -8.53847, 0.55 ) }
    dend_15 { pt3dadd( 44.7017, -55.9287, -8.59871, 0.28 ) }
    dend_15 { pt3dadd( 45.4912, -55.9112, -8.61823, 0.55 ) }
    dend_15 { pt3dadd( 47.4965, -56.0272, -8.73018, 0.28 ) }
    dend_15 { pt3dadd( 48.4613, -56.1588, -8.7686, 0.28 ) }
    dend_15 { pt3dadd( 50.766, -56.5849, -8.78798, 0.55 ) }
    dend_15 { pt3dadd( 52.903, -57.0735, -8.69476, 0.28 ) }
    dend_15 { pt3dadd( 54.8186, -57.5008, -8.42339, 0.83 ) }
    dend_15 { pt3dadd( 57.4266, -58.1377, -7.82383, 0.55 ) }
    dend_15 { pt3dadd( 60.5695, -58.8567, -6.82379, 0.28 ) }
    dend_15 { pt3dadd( 61.7188, -59.0746, -6.39674, 0.55 ) }
    dend_15 { pt3dadd( 63.8666, -59.4442, -5.16813, 0.28 ) }
    dend_15 { pt3dadd( 64.7621, -59.5694, -4.5086, 0.83 ) }
    dend_15 { pt3dadd( 67.2847, -59.7636, -2.31445, 0.55 ) }
    dend_15 { pt3dadd( 68.6727, -59.7913, -0.883659, 0.55 ) }
    dend_15 { pt3dadd( 69.8144, -59.7808, 0.410321, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_15 { pt3dadd( 73.0822, -59.6043, 4.35348, 0.28 ) }
    dend_15 { pt3dadd( 73.7169, -59.5728, 5.10026, 0.28 ) }
    dend_15 { pt3dadd( 75.1628, -59.4426, 6.84786, 0.83 ) }
    dend_15 { pt3dadd( 77.1002, -59.0705, 9.25684, 0.28 ) }
    dend_15 { pt3dadd( 77.7133, -58.9505, 10.0098, 0.55 ) }
    dend_15 { pt3dadd( 78.7532, -58.7356, 11.143, 0.55 ) }
    dend_15 { pt3dadd( 82.2458, -58.0204, 13.6815, 0.55 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 7/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 7.01623, -57.8627, -21.316, 0.55 ) }
    dend_4 { pt3dadd( 8.44619, -61.1638, -24.9052, 0.55 ) }
    // Section: dend_14, id: dend_14, parent: dend_4 (entry count 9/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 8.44619, -61.1638, -24.9052, 0.55 ) }
    dend_14 { pt3dadd( 8.5544, -61.5403, -26.1859, 0.55 ) }
    dend_14 { pt3dadd( 8.5885, -61.6485, -26.7127, 0.55 ) }
    dend_14 { pt3dadd( 8.38379, -62.2448, -29.8789, 0.28 ) }
    dend_14 { pt3dadd( 7.78891, -62.8435, -32.7505, 0.55 ) }
    dend_14 { pt3dadd( 7.38729, -63.1504, -33.9375, 0.28 ) }
    dend_14 { pt3dadd( 6.81386, -63.5384, -35.3544, 0.28 ) }
    dend_14 { pt3dadd( 5.90339, -64.0317, -37.12, 0.83 ) }
    dend_14 { pt3dadd( 4.54542, -64.4743, -39.7143, 0.28 ) }
    dend_14 { pt3dadd( 3.77172, -64.5836, -41.0212, 0.55 ) }
    dend_14 { pt3dadd( 3.06897, -64.6554, -42.1869, 0.55 ) }
    dend_14 { pt3dadd( 2.04926, -64.6306, -44.3767, 0.28 ) }
    dend_14 { pt3dadd( 1.44517, -64.528, -45.8962, 0.83 ) }
    dend_14 { pt3dadd( 0.072333, -63.8903, -49.5517, 0.28 ) }
    dend_14 { pt3dadd( -0.185552, -63.6953, -50.3499, 0.28 ) }
    dend_14 { pt3dadd( -0.615934, -63.3145, -51.5636, 0.83 ) }
    dend_14 { pt3dadd( -1.81023, -62.2791, -54.3363, 0.28 ) }
    dend_14 { pt3dadd( -2.25139, -61.9452, -55.144, 1.11 ) }
    dend_14 { pt3dadd( -3.35946, -61.1466, -57.3263, 0.55 ) }
    dend_14 { pt3dadd( -3.88833, -60.825, -58.2907, 0.55 ) }
    dend_14 { pt3dadd( -4.5351, -60.3963, -59.7122, 0.55 ) }
    dend_14 { pt3dadd( -5.20532, -59.9383, -61.439, 0.28 ) }
    dend_14 { pt3dadd( -5.39217, -59.8307, -61.9304, 0.83 ) }
    dend_14 { pt3dadd( -6.89064, -58.9279, -66.4597, 0.28 ) }
    dend_14 { pt3dadd( -7.40981, -58.5916, -67.9591, 0.28 ) }
    dend_14 { pt3dadd( -8.26897, -57.9838, -70.2168, 0.83 ) }
    dend_14 { pt3dadd( -9.30813, -57.2018, -72.7455, 0.28 ) }
    dend_14 { pt3dadd( -10.0987, -56.6366, -74.3885, 0.28 ) }
    dend_14 { pt3dadd( -10.8649, -56.1265, -75.6473, 0.83 ) }
    dend_14 { pt3dadd( -12.726, -54.9679, -77.9807, 0.28 ) }
    dend_14 { pt3dadd( -13.2313, -54.6288, -78.6003, 0.83 ) }
    dend_14 { pt3dadd( -14.7635, -53.6312, -80.3198, 0.28 ) }
    dend_14 { pt3dadd( -15.4658, -53.1126, -81.131, 0.83 ) }
    dend_14 { pt3dadd( -16.3512, -52.3031, -82.3644, 0.28 ) }
    dend_14 { pt3dadd( -16.8762, -51.6751, -83.2523, 0.55 ) }
    dend_14 { pt3dadd( -17.681, -50.3902, -85.1353, 0.28 ) }
    dend_14 { pt3dadd( -17.8957, -49.9493, -85.731, 0.83 ) }
    dend_14 { pt3dadd( -18.3013, -48.9451, -86.9996, 0.28 ) }
    dend_14 { pt3dadd( -18.8953, -47.2745, -89.0201, 0.83 ) }
    dend_14 { pt3dadd( -19.2861, -45.9031, -90.7275, 0.28 ) }
    dend_14 { pt3dadd( -19.4475, -45.3904, -91.3421, 0.55 ) }
    dend_14 { pt3dadd( -19.7303, -44.3342, -92.6337, 0.28 ) }
    dend_14 { pt3dadd( -19.8265, -43.9554, -93.1001, 0.83 ) }
    dend_14 { pt3dadd( -20.1609, -42.8855, -94.4021, 0.28 ) }
    dend_14 { pt3dadd( -20.7601, -41.0202, -96.548, 0.28 ) }
    dend_14 { pt3dadd( -21.1877, -39.5992, -98.0303, 1.11 ) }
    dend_14 { pt3dadd( -21.8044, -37.4524, -100.017, 0.28 ) }
    dend_14 { pt3dadd( -21.9968, -36.7033, -100.631, 0.55 ) }
    dend_14 { pt3dadd( -22.2962, -35.2757, -101.636, 0.28 ) }
    dend_14 { pt3dadd( -22.4345, -34.2834, -102.262, 0.55 ) }
    dend_14 { pt3dadd( -22.6389, -32.7398, -103.105, 0.28 ) }
    dend_14 { pt3dadd( -22.6545, -32.4957, -103.244, 0.55 ) }
    dend_14 { pt3dadd( -22.781, -31.2288, -103.862, 0.28 ) }
    dend_14 { pt3dadd( -22.781, -31.2288, -103.862, 0.55 ) }
    dend_14 { pt3dadd( -22.6903, -29.1294, -105.289, 0.28 ) }
    dend_14 { pt3dadd( -22.6937, -28.8894, -105.458, 0.83 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 65/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 8.44619, -61.1638, -24.9052, 0.83 ) }
    dend_5 { pt3dadd( 8.64677, -64.2087, -23.8279, 0.83 ) }
    dend_5 { pt3dadd( 8.8992, -68.0406, -22.472, 0.55 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 68/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 8.8992, -68.0406, -22.472, 0.55 ) }
    dend_7 { pt3dadd( 10.1536, -70.1571, -23.3573, 0.55 ) }
    dend_7 { pt3dadd( 11.0771, -71.0732, -24.1916, 0.55 ) }
    dend_7 { pt3dadd( 12.8641, -72.8242, -25.9353, 0.55 ) }
    dend_7 { pt3dadd( 14.5138, -74.4888, -27.4507, 0.55 ) }
    dend_7 { pt3dadd( 15.7113, -75.6972, -28.5507, 0.83 ) }
    dend_7 { pt3dadd( 16.9967, -76.9942, -29.7314, 0.55 ) }
    dend_7 { pt3dadd( 21.924, -81.3169, -34.2648, 0.55 ) }
    dend_7 { pt3dadd( 22.8653, -82.065, -35.0499, 0.55 ) }
    dend_7 { pt3dadd( 24.2267, -83.1289, -36.123, 0.55 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 78/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 8.8992, -68.0406, -22.472, 0.55 ) }
    dend_6 { pt3dadd( 7.17139, -72.0361, -23.6893, 0.55 ) }
    dend_6 { pt3dadd( 6.04448, -74.7529, -24.576, 0.55 ) }
    dend_6 { pt3dadd( 4.49775, -78.9686, -25.9321, 0.55 ) }
    dend_6 { pt3dadd( 3.53162, -81.7306, -26.8565, 0.55 ) }
    dend_6 { pt3dadd( 1.46723, -87.9692, -28.9455, 0.55 ) }
    dend_6 { pt3dadd( 0.859634, -89.8922, -29.5757, 0.28 ) }
    dend_6 { pt3dadd( -0.226933, -93.7838, -30.8351, 0.55 ) }
    dend_6 { pt3dadd( -0.990723, -96.9496, -31.9185, 0.28 ) }
    dend_6 { pt3dadd( -1.48163, -99.4761, -32.8283, 0.55 ) }
    dend_6 { pt3dadd( -2.08359, -103.73, -34.3842, 0.55 ) }
    dend_6 { pt3dadd( -2.14979, -104.503, -34.6923, 0.55 ) }
    dend_6 { pt3dadd( -2.34505, -106.981, -35.7894, 0.55 ) }
    dend_6 { pt3dadd( -2.84869, -110.814, -37.3993, 0.55 ) }
    dend_6 { pt3dadd( -3.41493, -113.55, -38.5426, 0.55 ) }
    dend_6 { pt3dadd( -4.13665, -116.324, -39.5865, 0.28 ) }
    dend_6 { pt3dadd( -5.14538, -119.24, -40.6464, 0.55 ) }
    dend_6 { pt3dadd( -6.26507, -122.035, -41.6622, 0.55 ) }
    dend_6 { pt3dadd( -8.90156, -127.83, -43.7662, 0.55 ) }
    dend_6 { pt3dadd( -9.41206, -128.846, -44.1222, 0.55 ) }
    dend_6 { pt3dadd( -11.8776, -133.691, -45.8025, 0.55 ) }
    dend_6 { pt3dadd( -14.3055, -138.565, -47.3963, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_6 { pt3dadd( -15.3449, -140.839, -48.0895, 0.83 ) }
    dend_6 { pt3dadd( -16.4348, -143.559, -48.9844, 0.55 ) }
    dend_6 { pt3dadd( -17.1372, -145.82, -49.897, 0.55 ) }
    dend_6 { pt3dadd( -17.8651, -148.291, -50.9148, 0.55 ) }
    dend_6 { pt3dadd( -18.4164, -150.363, -51.7585, 0.55 ) }
    dend_6 { pt3dadd( -18.9515, -152.838, -52.6796, 0.83 ) }
    dend_6 { pt3dadd( -19.5023, -155.394, -53.5935, 0.55 ) }
    dend_6 { pt3dadd( -20.2061, -158.606, -54.7614, 0.28 ) }
    dend_6 { pt3dadd( -20.6192, -160.276, -55.4241, 0.55 ) }
    dend_6 { pt3dadd( -21.263, -162.799, -56.3717, 0.55 ) }
    dend_6 { pt3dadd( -21.6454, -164.179, -56.8918, 0.55 ) }
    dend_6 { pt3dadd( -22.2198, -166.425, -57.7402, 0.55 ) }
    dend_6 { pt3dadd( -22.7629, -168.548, -58.5366, 0.55 ) }
    dend_6 { pt3dadd( -23.3436, -171.056, -59.5209, 0.55 ) }
    dend_6 { pt3dadd( -23.7707, -173.227, -60.4793, 0.55 ) }
    dend_6 { pt3dadd( -24.1724, -175.505, -61.5537, 0.55 ) }
    dend_6 { pt3dadd( -24.6831, -179.102, -63.1658, 0.83 ) }
    dend_6 { pt3dadd( -24.8779, -180.994, -63.9569, 0.83 ) }
    dend_6 { pt3dadd( -25.1426, -183.88, -65.1626, 0.55 ) }
    dend_6 { pt3dadd( -25.3698, -186.33, -66.1711, 0.83 ) }
    dend_6 { pt3dadd( -25.5184, -188.495, -67.1855, 0.55 ) }
    dend_6 { pt3dadd( -25.6694, -191.416, -68.5607, 0.28 ) }
    dend_6 { pt3dadd( -25.727, -192.171, -68.944, 0.55 ) }
    dend_6 { pt3dadd( -25.8089, -193.227, -69.4975, 0.55 ) }
    dend_6 { pt3dadd( -26.0996, -195.545, -70.7992, 0.55 ) }
    dend_6 { pt3dadd( -26.7992, -200.152, -73.6344, 0.55 ) }
    dend_6 { pt3dadd( -27.3727, -202.383, -74.9855, 0.83 ) }
    dend_6 { pt3dadd( -27.9444, -204.113, -75.9035, 0.55 ) }
    dend_6 { pt3dadd( -28.7233, -206.183, -76.8298, 0.55 ) }
    dend_6 { pt3dadd( -30.032, -209.313, -77.9574, 0.55 ) }
    dend_6 { pt3dadd( -30.9555, -211.085, -78.4162, 0.83 ) }
    dend_6 { pt3dadd( -33.4237, -215.179, -79.2709, 0.83 ) }
    dend_6 { pt3dadd( -36.4692, -219.295, -80.093, 0.28 ) }
    dend_6 { pt3dadd( -37.8327, -220.765, -80.3269, 1.11 ) }
    dend_6 { pt3dadd( -39.3447, -222.038, -80.5749, 0.28 ) }
    dend_6 { pt3dadd( -42.0392, -223.895, -80.9833, 0.55 ) }
    dend_6 { pt3dadd( -44.8124, -225.522, -81.341, 0.55 ) }
    dend_6 { pt3dadd( -50.5852, -228.112, -81.9456, 0.83 ) }
    dend_6 { pt3dadd( -55.2146, -229.631, -82.35, 0.55 ) }
    dend_6 { pt3dadd( -57.694, -230.258, -82.5765, 0.55 ) }
    dend_6 { pt3dadd( -60.249, -230.701, -82.8745, 0.55 ) }
    dend_6 { pt3dadd( -64.6402, -231.258, -83.4221, 0.83 ) }
    dend_6 { pt3dadd( -69.1274, -231.852, -83.8701, 0.55 ) }
    dend_6 { pt3dadd( -71.3881, -232.188, -84.2024, 0.55 ) }
    dend_6 { pt3dadd( -75.5868, -232.843, -84.9315, 0.55 ) }
    dend_6 { pt3dadd( -79.8734, -233.621, -85.783, 0.55 ) }
    dend_6 { pt3dadd( -83.7762, -234.147, -86.6448, 0.55 ) }
    dend_6 { pt3dadd( -87.3037, -234.502, -87.5828, 0.55 ) }
    dend_6 { pt3dadd( -90.0174, -234.832, -88.4167, 0.28 ) }
    dend_6 { pt3dadd( -93.5765, -235.336, -89.5182, 0.55 ) }
    dend_6 { pt3dadd( -96.5998, -235.741, -90.7172, 0.55 ) }
    dend_6 { pt3dadd( -101.554, -236.361, -92.9856, 0.55 ) }
    dend_6 { pt3dadd( -103.177, -236.477, -93.8564, 0.55 ) }
    dend_6 { pt3dadd( -106.305, -236.636, -95.692, 0.55 ) }
    dend_6 { pt3dadd( -108.262, -236.78, -96.9418, 0.55 ) }
    dend_6 { pt3dadd( -113.46, -237.15, -100.379, 0.55 ) }
    dend_6 { pt3dadd( -116.714, -237.262, -102.548, 0.55 ) }
    dend_6 { pt3dadd( -118.854, -237.307, -103.943, 0.55 ) }
    dend_6 { pt3dadd( -120.867, -237.266, -105.102, 0.55 ) }
    dend_6 { pt3dadd( -123.526, -237.096, -106.456, 0.55 ) }
    dend_6 { pt3dadd( -128.579, -236.636, -108.571, 0.55 ) }
    dend_6 { pt3dadd( -130.636, -236.493, -109.328, 0.55 ) }
    dend_6 { pt3dadd( -134.157, -236.103, -110.233, 0.55 ) }
    dend_6 { pt3dadd( -136.618, -235.895, -110.638, 0.55 ) }
    dend_6 { pt3dadd( -138.227, -235.784, -110.856, 0.55 ) }
    dend_6 { pt3dadd( -143.655, -235.571, -111.786, 0.55 ) }
    dend_6 { pt3dadd( -146.754, -235.562, -112.728, 0.55 ) }
    dend_6 { pt3dadd( -155.076, -235.64, -115.345, 0.55 ) }
    dend_6 { pt3dadd( -158.011, -235.543, -116.328, 0.55 ) }
    dend_6 { pt3dadd( -160.566, -235.292, -117.19, 0.55 ) }
    dend_6 { pt3dadd( -163.926, -234.821, -118.435, 0.55 ) }
    dend_6 { pt3dadd( -168.172, -234.153, -120.824, 0.28 ) }
    dend_6 { pt3dadd( -176.359, -243.15, -126.79, 0.28 ) }
    // Section: dend_11, id: dend_11, parent: dend_7 (entry count 73/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 24.2267, -83.1289, -36.123, 0.55 ) }
    dend_11 { pt3dadd( 24.2266, -81.9928, -37.5908, 0.55 ) }
    dend_11 { pt3dadd( 23.6437, -80.6032, -39.5903, 0.28 ) }
    dend_11 { pt3dadd( 23.5563, -80.309, -40.0386, 0.55 ) }
    dend_11 { pt3dadd( 23.3908, -79.7846, -40.8468, 0.55 ) }
    dend_11 { pt3dadd( 23.1448, -78.753, -42.2958, 0.28 ) }
    dend_11 { pt3dadd( 23.0599, -78.2077, -43.0939, 0.28 ) }
    dend_11 { pt3dadd( 22.9347, -77.0223, -45.0491, 0.55 ) }
    dend_11 { pt3dadd( 22.8007, -75.5402, -47.5434, 0.28 ) }
    dend_11 { pt3dadd( 22.7832, -75.153, -48.2175, 0.83 ) }
    dend_11 { pt3dadd( 22.7707, -73.4736, -51.0867, 0.55 ) }
    dend_11 { pt3dadd( 22.8843, -71.6238, -54.1537, 0.83 ) }
    dend_11 { pt3dadd( 23.0283, -69.8351, -56.9749, 0.28 ) }
    dend_11 { pt3dadd( 23.0283, -69.8351, -56.9749, 0.55 ) }
    dend_11 { pt3dadd( 23.0576, -67.9919, -59.4092, 0.28 ) }
    dend_11 { pt3dadd( 23.0594, -67.5839, -59.8923, 0.83 ) }
    dend_11 { pt3dadd( 23.0826, -65.6318, -61.8198, 0.55 ) }
    dend_11 { pt3dadd( 23.0346, -63.7506, -63.2908, 0.55 ) }
    dend_11 { pt3dadd( 22.9888, -62.3747, -64.338, 0.55 ) }
    dend_11 { pt3dadd( 22.951, -60.2179, -66.0335, 0.83 ) }
    dend_11 { pt3dadd( 22.9285, -59.3875, -66.643, 0.83 ) }
    dend_11 { pt3dadd( 22.8928, -56.952, -68.5039, 0.55 ) }
    dend_11 { pt3dadd( 22.8601, -55.5127, -69.6409, 0.55 ) }
    dend_11 { pt3dadd( 22.9183, -53.1971, -72.0514, 1.11 ) }
    dend_11 { pt3dadd( 22.9691, -51.3096, -74.4458, 0.55 ) }
    dend_11 { pt3dadd( 22.9656, -50.2044, -75.991, 0.83 ) }
    dend_11 { pt3dadd( 22.9078, -48.3075, -78.9109, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_11 { pt3dadd( 22.8622, -47.3633, -80.4164, 0.83 ) }
    dend_11 { pt3dadd( 22.7348, -44.3304, -85.3685, 0.28 ) }
    dend_11 { pt3dadd( 22.6586, -43.5315, -86.6401, 0.55 ) }
    dend_11 { pt3dadd( 22.554, -42.5188, -88.2486, 0.55 ) }
    dend_11 { pt3dadd( 22.5309, -41.0027, -90.5076, 1.11 ) }
    dend_11 { pt3dadd( 22.5351, -39.1651, -92.8635, 0.55 ) }
    dend_11 { pt3dadd( 22.5665, -38.3111, -93.7709, 0.55 ) }
    dend_11 { pt3dadd( 22.69, -36.9124, -95.0278, 0.55 ) }
    dend_11 { pt3dadd( 22.9671, -34.823, -96.85, 0.83 ) }
    dend_11 { pt3dadd( 23.6455, -31.1495, -100.167, 0.28 ) }
    dend_11 { pt3dadd( 23.8376, -30.1734, -101.059, 0.83 ) }
    dend_11 { pt3dadd( 24.4276, -27.5665, -103.404, 0.28 ) }
    dend_11 { pt3dadd( 24.8677, -25.8364, -104.945, 0.55 ) }
    dend_11 { pt3dadd( 25.1471, -24.7364, -105.948, 0.55 ) }
    dend_11 { pt3dadd( 25.688, -22.2035, -108.094, 0.83 ) }
    dend_11 { pt3dadd( 25.903, -20.6207, -109.269, 0.55 ) }
    dend_11 { pt3dadd( 26.1421, -18.8977, -110.486, 0.55 ) }
    dend_11 { pt3dadd( 26.2332, -18.1166, -110.975, 0.55 ) }
    dend_11 { pt3dadd( 26.4138, -16.7261, -111.836, 0.83 ) }
    dend_11 { pt3dadd( 26.6619, -15.0316, -112.938, 0.83 ) }
    dend_11 { pt3dadd( 26.9701, -12.9854, -114.355, 0.55 ) }
    dend_11 { pt3dadd( 27.3719, -10.4801, -116.253, 0.83 ) }
    dend_11 { pt3dadd( 27.5055, -9.41585, -117.065, 0.83 ) }
    dend_11 { pt3dadd( 27.9572, -5.95836, -119.782, 0.55 ) }
    dend_11 { pt3dadd( 28.044, -5.35258, -120.278, 0.83 ) }
    dend_11 { pt3dadd( 28.2321, -3.7924, -121.652, 0.28 ) }
    dend_11 { pt3dadd( 28.3735, -2.45158, -122.845, 0.55 ) }
    dend_11 { pt3dadd( 28.4161, -0.627436, -124.308, 0.28 ) }
    dend_11 { pt3dadd( 28.4674, 0.809604, -125.533, 0.83 ) }
    dend_11 { pt3dadd( 28.4607, 1.51715, -126.08, 0.28 ) }
    dend_11 { pt3dadd( 28.498, 2.65552, -126.971, 0.55 ) }
    dend_11 { pt3dadd( 28.6382, 5.12455, -129.016, 0.28 ) }
    dend_11 { pt3dadd( 28.7077, 5.94464, -129.759, 0.28 ) }
    dend_11 { pt3dadd( 29.0797, 9.3615, -133.096, 0.83 ) }
    dend_11 { pt3dadd( 29.2798, 10.7636, -134.442, 0.28 ) }
    dend_11 { pt3dadd( 29.4758, 11.8999, -135.528, 0.28 ) }
    dend_11 { pt3dadd( 29.6841, 12.9255, -136.466, 0.55 ) }
    dend_11 { pt3dadd( 29.7708, 13.5381, -136.975, 0.28 ) }
    dend_11 { pt3dadd( 29.831, 14.2961, -137.549, 0.55 ) }
    dend_11 { pt3dadd( 29.9003, 16.4044, -138.765, 0.28 ) }
    dend_11 { pt3dadd( 29.9235, 17.645, -139.414, 0.55 ) }
    dend_11 { pt3dadd( 29.8635, 19.5547, -140.219, 0.28 ) }
    dend_11 { pt3dadd( 29.6486, 21.3963, -140.874, 0.55 ) }
    dend_11 { pt3dadd( 29.5436, 21.9148, -141.052, 0.55 ) }
    dend_11 { pt3dadd( 29.2679, 22.97, -141.404, 0.83 ) }
    dend_11 { pt3dadd( 28.8659, 24.3518, -142.048, 0.28 ) }
    dend_11 { pt3dadd( 28.677, 25.1304, -142.525, 0.55 ) }
    dend_11 { pt3dadd( 28.2212, 26.7553, -143.552, 0.28 ) }
    dend_11 { pt3dadd( 28.1519, 27.1547, -143.847, 0.55 ) }
    dend_11 { pt3dadd( 27.7752, 29.2949, -145.478, 0.28 ) }
    dend_11 { pt3dadd( 27.3855, 31.4228, -147.156, 0.83 ) }
    dend_11 { pt3dadd( 27.0774, 33.4487, -148.864, 0.55 ) }
    dend_11 { pt3dadd( 26.917, 35.0071, -150.197, 0.55 ) }
    dend_11 { pt3dadd( 26.9143, 38.0586, -152.981, 0.55 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 54/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 24.2267, -83.1289, -36.123, 0.55 ) }
    dend_8 { pt3dadd( 25.8181, -86.0624, -35.9287, 0.55 ) }
    dend_8 { pt3dadd( 26.821, -87.5756, -35.7845, 0.55 ) }
    dend_8 { pt3dadd( 27.8325, -89.0083, -35.5977, 0.83 ) }
    dend_8 { pt3dadd( 29.0777, -90.7719, -35.3677, 0.55 ) }
    dend_8 { pt3dadd( 30.0373, -92.1311, -35.1905, 0.55 ) }
    dend_8 { pt3dadd( 31.1498, -93.7067, -34.985, 0.55 ) }
    dend_8 { pt3dadd( 32.3104, -95.4612, -34.7722, 0.55 ) }
    dend_8 { pt3dadd( 33.4541, -96.927, -34.4058, 1.11 ) }
    // Section: dend_13, id: dend_13, parent: dend_11 (entry count 63/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 26.9143, 38.0586, -152.981, 0.28 ) }
    dend_13 { pt3dadd( 27.3811, 40.5252, -153.97, 0.28 ) }
    dend_13 { pt3dadd( 27.8608, 42.3349, -154.676, 0.83 ) }
    dend_13 { pt3dadd( 28.3396, 44.1499, -155.215, 0.28 ) }
    dend_13 { pt3dadd( 28.6412, 45.3547, -155.54, 0.55 ) }
    dend_13 { pt3dadd( 29.4853, 48.5971, -156.451, 0.28 ) }
    dend_13 { pt3dadd( 30.0196, 50.4805, -156.883, 0.83 ) }
    dend_13 { pt3dadd( 30.9616, 53.2057, -157.384, 0.28 ) }
    dend_13 { pt3dadd( 31.8024, 55.5499, -157.788, 0.83 ) }
    dend_13 { pt3dadd( 33.113, 59.351, -158.347, 0.28 ) }
    dend_13 { pt3dadd( 33.8373, 61.5433, -158.606, 0.83 ) }
    dend_13 { pt3dadd( 35.1553, 65.8771, -158.936, 0.28 ) }
    dend_13 { pt3dadd( 35.3859, 66.5412, -159.001, 0.83 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 76/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 26.9143, 38.0586, -152.981, 0.55 ) }
    dend_12 { pt3dadd( 22.1174, 37.5622, -154.73, 0.55 ) }
    dend_12 { pt3dadd( 20.2341, 37.394, -155.515, 0.28 ) }
    dend_12 { pt3dadd( 18.8948, 37.2837, -156.112, 0.55 ) }
    dend_12 { pt3dadd( 17.2066, 37.1719, -156.88, 0.28 ) }
    dend_12 { pt3dadd( 15.8401, 37.0824, -157.55, 0.55 ) }
    dend_12 { pt3dadd( 14.7249, 37.0083, -158.1, 0.28 ) }
    dend_12 { pt3dadd( 13.6685, 36.9729, -158.715, 0.28 ) }
    dend_12 { pt3dadd( 13.4222, 36.9723, -158.82, 0.55 ) }
    dend_12 { pt3dadd( 11.8015, 37.0082, -159.565, 0.28 ) }
    dend_12 { pt3dadd( 10.9612, 36.9948, -159.908, 0.83 ) }
    dend_12 { pt3dadd( 8.98232, 36.9446, -160.722, 0.28 ) }
    dend_12 { pt3dadd( 7.28558, 36.9007, -161.391, 0.83 ) }
    dend_12 { pt3dadd( 5.46657, 36.9324, -162.057, 0.28 ) }
    dend_12 { pt3dadd( 2.33913, 37.0204, -163.158, 0.83 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 91/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 33.4541, -96.927, -34.4058, 0.28 ) }
    dend_10 { pt3dadd( 34.4707, -99.3271, -33.9817, 0.28 ) }
    dend_10 { pt3dadd( 34.8245, -100.256, -33.8221, 0.55 ) }
    dend_10 { pt3dadd( 35.7642, -102.037, -33.4007, 0.28 ) }
    dend_10 { pt3dadd( 36.6675, -103.425, -33.1285, 0.28 ) }
    dend_10 { pt3dadd( 37.3985, -104.44, -32.8692, 0.55 ) }
    dend_10 { pt3dadd( 38.6536, -105.945, -32.5189, 0.28 ) }
    dend_10 { pt3dadd( 39.5757, -106.98, -32.2871, 0.55 ) }
    dend_10 { pt3dadd( 41.459, -109.024, -31.9533, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_10 { pt3dadd( 43.4965, -111.092, -31.572, 0.28 ) }
    dend_10 { pt3dadd( 44.9925, -112.621, -31.26, 0.83 ) }
    dend_10 { pt3dadd( 47.2728, -114.962, -30.7243, 0.28 ) }
    dend_10 { pt3dadd( 47.9194, -115.687, -30.5182, 0.55 ) }
    dend_10 { pt3dadd( 48.6138, -116.644, -30.2574, 0.55 ) }
    dend_10 { pt3dadd( 49.516, -118.384, -29.8695, 0.55 ) }
    dend_10 { pt3dadd( 50.2578, -120.155, -29.413, 0.28 ) }
    dend_10 { pt3dadd( 50.5102, -120.879, -29.2177, 0.55 ) }
    dend_10 { pt3dadd( 50.9263, -122.368, -28.711, 1.11 ) }
    dend_10 { pt3dadd( 51.4613, -124.16, -28.1008, 0.55 ) }
    dend_10 { pt3dadd( 52.0578, -126.157, -27.4406, 0.55 ) }
    dend_10 { pt3dadd( 52.5127, -127.582, -27.0776, 0.55 ) }
    dend_10 { pt3dadd( 53.2767, -129.166, -26.8401, 0.55 ) }
    dend_10 { pt3dadd( 54.1714, -130.62, -26.7309, 0.55 ) }
    dend_10 { pt3dadd( 55.8774, -132.848, -26.671, 0.55 ) }
    dend_10 { pt3dadd( 56.5741, -133.61, -26.6535, 0.55 ) }
    dend_10 { pt3dadd( 58.7854, -135.669, -26.6654, 1.11 ) }
    dend_10 { pt3dadd( 63.3629, -139.36, -26.9896, 0.28 ) }
    dend_10 { pt3dadd( 63.793, -139.675, -27.0337, 0.55 ) }
    dend_10 { pt3dadd( 64.9657, -140.519, -27.1857, 0.28 ) }
    dend_10 { pt3dadd( 66.1369, -141.381, -27.3462, 0.83 ) }
    dend_10 { pt3dadd( 69.0323, -143.826, -27.6644, 0.28 ) }
    dend_10 { pt3dadd( 69.9073, -144.757, -27.6408, 0.55 ) }
    dend_10 { pt3dadd( 70.6546, -145.879, -27.4161, 0.28 ) }
    dend_10 { pt3dadd( 72.1281, -148.391, -26.7786, 0.55 ) }
    dend_10 { pt3dadd( 73.256, -150.62, -26.1368, 0.55 ) }
    dend_10 { pt3dadd( 74.109, -152.376, -25.5521, 0.28 ) }
    dend_10 { pt3dadd( 74.9097, -154.23, -24.7667, 1.11 ) }
    dend_10 { pt3dadd( 75.6868, -155.93, -24.0291, 0.55 ) }
    dend_10 { pt3dadd( 76.836, -157.944, -23.1149, 0.55 ) }
    dend_10 { pt3dadd( 77.2876, -158.657, -22.7912, 0.83 ) }
    dend_10 { pt3dadd( 78.3702, -160.363, -22.2154, 0.55 ) }
    dend_10 { pt3dadd( 80.1082, -162.859, -21.6311, 0.83 ) }
    dend_10 { pt3dadd( 81.1855, -164.319, -21.4896, 0.55 ) }
    dend_10 { pt3dadd( 82.4232, -166.043, -21.4713, 0.55 ) }
    dend_10 { pt3dadd( 83.9077, -168.034, -21.5825, 0.83 ) }
    dend_10 { pt3dadd( 85.9529, -170.843, -21.8079, 0.28 ) }
    dend_10 { pt3dadd( 87.2202, -172.6, -21.99, 0.55 ) }
    dend_10 { pt3dadd( 88.8064, -174.835, -22.2531, 0.28 ) }
    dend_10 { pt3dadd( 90.2889, -176.975, -22.4572, 0.83 ) }
    dend_10 { pt3dadd( 92.4545, -180.034, -22.5754, 0.55 ) }
    dend_10 { pt3dadd( 93.8741, -181.733, -22.4644, 0.55 ) }
    dend_10 { pt3dadd( 94.4762, -182.426, -22.3166, 0.55 ) }
    dend_10 { pt3dadd( 95.3499, -183.299, -21.9835, 0.83 ) }
    dend_10 { pt3dadd( 97.8442, -185.158, -20.727, 0.28 ) }
    dend_10 { pt3dadd( 99.5354, -186.089, -19.7563, 0.83 ) }
    dend_10 { pt3dadd( 101.551, -186.963, -18.3946, 0.55 ) }
    dend_10 { pt3dadd( 102.36, -187.282, -17.8568, 0.83 ) }
    dend_10 { pt3dadd( 104.377, -188.043, -16.4311, 0.83 ) }
    dend_10 { pt3dadd( 105.365, -188.388, -15.6976, 0.28 ) }
    dend_10 { pt3dadd( 106.307, -188.715, -14.8626, 0.83 ) }
    dend_10 { pt3dadd( 108.031, -189.395, -13.2842, 0.28 ) }
    dend_10 { pt3dadd( 108.795, -189.718, -12.6047, 0.28 ) }
    dend_10 { pt3dadd( 109.257, -189.947, -12.2022, 0.83 ) }
    dend_10 { pt3dadd( 110.388, -190.72, -11.2757, 0.28 ) }
    dend_10 { pt3dadd( 110.879, -191.149, -10.8825, 0.55 ) }
    dend_10 { pt3dadd( 111.625, -191.986, -10.2702, 0.28 ) }
    dend_10 { pt3dadd( 112.841, -193.356, -9.21742, 0.83 ) }
    dend_10 { pt3dadd( 113.665, -194.172, -8.53356, 0.28 ) }
    dend_10 { pt3dadd( 114.248, -194.614, -8.13373, 0.28 ) }
    dend_10 { pt3dadd( 115.407, -195.259, -7.60355, 0.55 ) }
    dend_10 { pt3dadd( 117.012, -195.959, -7.01517, 0.28 ) }
    dend_10 { pt3dadd( 119.405, -196.863, -6.34706, 0.83 ) }
    dend_10 { pt3dadd( 121.769, -197.681, -5.72304, 0.28 ) }
    dend_10 { pt3dadd( 125.411, -198.772, -4.91725, 0.83 ) }
    dend_10 { pt3dadd( 130.017, -199.966, -3.92753, 0.28 ) }
    dend_10 { pt3dadd( 131.879, -200.343, -3.54276, 0.55 ) }
    dend_10 { pt3dadd( 134.99, -200.875, -2.94911, 0.28 ) }
    dend_10 { pt3dadd( 136.472, -201.132, -2.65083, 0.83 ) }
    dend_10 { pt3dadd( 139.531, -201.553, -1.85012, 0.28 ) }
    dend_10 { pt3dadd( 140.424, -201.672, -1.48326, 0.28 ) }
    dend_10 { pt3dadd( 142.41, -202.089, -0.0383007, 0.55 ) }
    dend_10 { pt3dadd( 143.022, -202.38, 0.672011, 0.83 ) }
    dend_10 { pt3dadd( 143.576, -202.964, 1.89335, 0.83 ) }
    dend_10 { pt3dadd( 143.901, -203.809, 3.23415, 0.28 ) }
    dend_10 { pt3dadd( 144.036, -205.159, 5.06962, 0.55 ) }
    dend_10 { pt3dadd( 144.027, -206.92, 7.18035, 0.83 ) }
    dend_10 { pt3dadd( 143.9, -208.397, 8.79228, 0.28 ) }
    dend_10 { pt3dadd( 143.802, -209.33, 9.80589, 0.55 ) }
    dend_10 { pt3dadd( 143.724, -210.281, 10.7723, 0.28 ) }
    dend_10 { pt3dadd( 143.727, -210.783, 11.2554, 0.83 ) }
    dend_10 { pt3dadd( 143.885, -211.609, 12.1199, 0.28 ) }
    dend_10 { pt3dadd( 144.07, -211.989, 12.7021, 0.83 ) }
    dend_10 { pt3dadd( 144.645, -212.623, 14.0835, 0.28 ) }
    dend_10 { pt3dadd( 145.143, -213.024, 15.2162, 0.83 ) }
    dend_10 { pt3dadd( 145.774, -213.326, 16.6968, 0.28 ) }
    dend_10 { pt3dadd( 146.299, -213.552, 18.1398, 0.28 ) }
    dend_10 { pt3dadd( 146.932, -213.926, 20.1934, 0.83 ) }
    dend_10 { pt3dadd( 147.173, -214.109, 21.17, 0.28 ) }
    dend_10 { pt3dadd( 147.417, -214.359, 22.3115, 0.28 ) }
    dend_10 { pt3dadd( 147.842, -214.827, 24.6899, 0.55 ) }
    dend_10 { pt3dadd( 148.086, -215.138, 26.1245, 0.55 ) }
    dend_10 { pt3dadd( 148.4, -215.634, 27.743, 0.55 ) }
    dend_10 { pt3dadd( 148.589, -216.027, 28.6883, 0.55 ) }
    dend_10 { pt3dadd( 148.845, -216.804, 30.2272, 0.55 ) }
    dend_10 { pt3dadd( 149.122, -217.771, 32.0038, 0.28 ) }
    dend_10 { pt3dadd( 149.272, -218.396, 33.0293, 0.55 ) }
    dend_10 { pt3dadd( 149.644, -219.735, 35.2076, 0.55 ) }
    dend_10 { pt3dadd( 150.001, -221.265, 37.6406, 0.28 ) }
    dend_10 { pt3dadd( 150.065, -221.688, 38.216, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 0/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 33.4541, -96.927, -34.4058, 0.55 ) }
    dend_9 { pt3dadd( 36.4799, -96.9278, -33.4985, 0.55 ) }
    dend_9 { pt3dadd( 40.1989, -96.9802, -32.2364, 0.83 ) }
    dend_9 { pt3dadd( 42.8092, -96.9728, -31.2213, 0.55 ) }
    dend_9 { pt3dadd( 44.0468, -96.9618, -30.7119, 0.55 ) }
    dend_9 { pt3dadd( 45.097, -96.928, -30.2801, 0.83 ) }
    dend_9 { pt3dadd( 48.1651, -96.7681, -29.0617, 0.28 ) }
    dend_9 { pt3dadd( 50.5604, -96.5069, -28.1822, 0.83 ) }
    dend_9 { pt3dadd( 52.3933, -96.1543, -27.4827, 0.28 ) }
    dend_9 { pt3dadd( 52.7745, -96.0681, -27.3704, 0.55 ) }
    dend_9 { pt3dadd( 54.8574, -95.711, -27.061, 0.28 ) }
    dend_9 { pt3dadd( 56.0656, -95.5271, -26.9946, 0.55 ) }
    dend_9 { pt3dadd( 58.2768, -95.2308, -27.0051, 0.28 ) }
    dend_9 { pt3dadd( 60.0189, -95.0055, -27.0874, 0.55 ) }
    dend_9 { pt3dadd( 64.6006, -94.6231, -27.3337, 0.55 ) }
    dend_9 { pt3dadd( 68.1228, -94.3762, -27.3829, 0.28 ) }
    dend_9 { pt3dadd( 68.3746, -94.3594, -27.3715, 0.55 ) }
    dend_9 { pt3dadd( 69.953, -94.2736, -27.1663, 0.55 ) }
    dend_9 { pt3dadd( 71.3148, -94.2214, -26.8237, 0.28 ) }
    dend_9 { pt3dadd( 72.468, -94.1303, -26.353, 0.28 ) }
    dend_9 { pt3dadd( 74.103, -93.8462, -25.1844, 0.55 ) }
    dend_9 { pt3dadd( 75.8727, -93.3746, -23.6517, 0.28 ) }
    dend_9 { pt3dadd( 76.8516, -93.1301, -22.7644, 0.55 ) }
    dend_9 { pt3dadd( 78.1956, -92.7886, -21.4846, 0.28 ) }
    dend_9 { pt3dadd( 78.5922, -92.6883, -21.095, 0.83 ) }
    dend_9 { pt3dadd( 79.5645, -92.3896, -20.0733, 0.55 ) }
    dend_9 { pt3dadd( 80.2343, -92.1733, -19.2988, 0.83 ) }
    dend_9 { pt3dadd( 81.1378, -91.7665, -18.15, 0.55 ) }
    dend_9 { pt3dadd( 82.179, -91.1138, -16.7993, 0.28 ) }
    dend_9 { pt3dadd( 82.8687, -90.574, -15.8677, 0.83 ) }
    dend_9 { pt3dadd( 83.5611, -89.9981, -15.0659, 0.28 ) }
    dend_9 { pt3dadd( 84.3027, -89.3023, -14.2728, 0.55 ) }
    dend_9 { pt3dadd( 85.6265, -87.9706, -12.9924, 0.28 ) }
    dend_9 { pt3dadd( 86.2924, -87.2558, -12.3899, 0.28 ) }
    dend_9 { pt3dadd( 86.7475, -86.7646, -11.9863, 0.55 ) }
    dend_9 { pt3dadd( 88.6119, -84.8387, -10.4153, 0.28 ) }
    dend_9 { pt3dadd( 89.6944, -83.8885, -9.65104, 0.83 ) }
    dend_9 { pt3dadd( 91.144, -82.7298, -8.67879, 0.28 ) }
    dend_9 { pt3dadd( 91.7649, -82.3125, -8.34235, 0.83 ) }
    dend_9 { pt3dadd( 93.4758, -81.2949, -7.4848, 0.28 ) }
    dend_9 { pt3dadd( 94.5268, -80.7406, -6.97229, 0.83 ) }
    dend_9 { pt3dadd( 97.6859, -79.2272, -5.62769, 0.28 ) }
    dend_9 { pt3dadd( 98.8604, -78.6876, -5.20677, 0.83 ) }
    dend_9 { pt3dadd( 102.364, -77.1785, -4.20444, 0.28 ) }
    dend_9 { pt3dadd( 104.484, -76.3379, -3.69388, 0.28 ) }
    dend_9 { pt3dadd( 105.155, -76.0849, -3.543, 0.55 ) }
    dend_9 { pt3dadd( 108.34, -74.7214, -2.70887, 0.28 ) }
    dend_9 { pt3dadd( 109.197, -74.2796, -2.44144, 0.55 ) }
    dend_9 { pt3dadd( 111.905, -72.6918, -1.43166, 0.28 ) }
    dend_9 { pt3dadd( 113.594, -71.5678, -0.614764, 0.83 ) }
    dend_9 { pt3dadd( 114.945, -70.5454, 0.190712, 0.28 ) }
    dend_9 { pt3dadd( 117.14, -68.5595, 1.89296, 0.55 ) }
    dend_9 { pt3dadd( 118.506, -67.116, 3.30216, 0.28 ) }
    dend_9 { pt3dadd( 119.654, -65.6427, 4.7737, 0.55 ) }
    dend_9 { pt3dadd( 120.099, -64.8821, 5.51861, 0.55 ) }
    dend_9 { pt3dadd( 121.192, -62.9682, 7.38715, 0.55 ) }
    dend_9 { pt3dadd( 121.968, -61.7951, 8.54394, 0.28 ) }
    dend_9 { pt3dadd( 122.906, -60.7884, 9.56865, 0.55 ) }
    dend_9 { pt3dadd( 124.705, -58.9817, 11.2789, 0.55 ) }
    dend_9 { pt3dadd( 125.352, -58.3654, 11.7733, 0.55 ) }
    dend_9 { pt3dadd( 127.975, -56.0981, 13.4493, 0.28 ) }
    dend_9 { pt3dadd( 129.319, -55.0653, 14.1749, 0.83 ) }
    dend_9 { pt3dadd( 132.056, -53.1776, 15.5652, 0.28 ) }
    dend_9 { pt3dadd( 134.358, -51.5736, 16.7123, 0.28 ) }
    dend_9 { pt3dadd( 135.72, -50.6768, 17.4199, 0.83 ) }
    dend_9 { pt3dadd( 137.13, -49.7823, 18.2101, 0.28 ) }
    dend_9 { pt3dadd( 138.449, -48.9716, 19.033, 0.55 ) }
    dend_9 { pt3dadd( 140.485, -47.802, 20.3864, 0.28 ) }
    dend_9 { pt3dadd( 142.255, -46.9307, 21.5565, 0.28 ) }
    dend_9 { pt3dadd( 144.917, -45.8712, 23.2246, 0.55 ) }
    dend_9 { pt3dadd( 148.147, -44.743, 25.3149, 0.28 ) }
    dend_9 { pt3dadd( 149.401, -44.3594, 26.1011, 0.28 ) }
    dend_9 { pt3dadd( 151.031, -44.0128, 27.0634, 0.55 ) }
    dend_9 { pt3dadd( 152.735, -43.702, 27.9803, 0.28 ) }
    dend_9 { pt3dadd( 153.4, -43.6027, 28.2955, 0.28 ) }
    dend_9 { pt3dadd( 156.432, -43.1651, 29.5947, 0.28 ) }
    dend_9 { pt3dadd( 159.003, -42.7778, 30.687, 0.55 ) }
    dend_9 { pt3dadd( 162.252, -42.2776, 32.061, 0.28 ) }
    dend_9 { pt3dadd( 164.854, -41.8932, 33.2114, 0.55 ) }
    dend_9 { pt3dadd( 165.908, -41.7375, 33.7154, 0.55 ) }
    dend_9 { pt3dadd( 167.271, -41.5425, 34.4046, 0.28 ) }
    dend_9 { pt3dadd( 167.75, -41.4689, 34.6825, 0.55 ) }
    dend_9 { pt3dadd( 169.033, -41.2191, 35.6732, 0.28 ) }
    dend_9 { pt3dadd( 169.387, -41.1154, 36.0966, 0.55 ) }
    dend_9 { pt3dadd( 170.323, -40.8948, 37.6091, 0.28 ) }
    dend_9 { pt3dadd( 170.56, -40.7876, 38.1211, 0.55 ) }
    dend_9 { pt3dadd( 171.038, -40.4513, 39.3073, 0.28 ) }
    dend_9 { pt3dadd( 171.232, -40.283, 39.8034, 0.55 ) }
    dend_9 { pt3dadd( 171.991, -39.6128, 41.7403, 0.28 ) }
    dend_9 { pt3dadd( 172.089, -39.5374, 41.976, 0.55 ) }
    dend_9 { pt3dadd( 172.764, -39.14, 43.5454, 0.55 ) }
    dend_9 { pt3dadd( 174.34, -38.7766, 46.62, 0.55 ) }
    dend_9 { pt3dadd( 175.231, -38.8205, 47.9566, 0.55 ) }
    dend_9 { pt3dadd( 176.244, -38.9368, 49.3894, 0.55 ) }
    dend_9 { pt3dadd( 176.706, -39.024, 49.9697, 0.55 ) }
    dend_9 { pt3dadd( 178.015, -39.3783, 51.4374, 0.55 ) }
    dend_9 { pt3dadd( 180.225, -40.3315, 53.3952, 0.55 ) }
    dend_9 { pt3dadd( 182.086, -41.5683, 54.5999, 0.55 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_30, dend_29, dend_28, dend_19, dend_0, dend_25, dend_20, dend_18, dend_1, dend_27, dend_26, dend_24, dend_21, dend_17, dend_2, dend_23, dend_22, dend_16, dend_3, dend_15, dend_4, dend_14, dend_5, dend_7, dend_6, dend_11, dend_8, dend_13, dend_12, dend_10, dend_9]}
    ModelViewParmSubset_2 = new SectionList()
    dend_30 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_30, dend_29, dend_28, dend_19, dend_0, dend_25, dend_20, dend_18, dend_1, dend_27, dend_26, dend_24, dend_21, dend_17, dend_2, dend_23, dend_22, dend_16, dend_3, dend_15, dend_4, dend_14, dend_5, dend_7, dend_6, dend_11, dend_8, dend_13, dend_12, dend_10, dend_9]}
    ModelViewParmSubset_3 = new SectionList()
    soma_0 ModelViewParmSubset_3.append()
    dend_30 ModelViewParmSubset_3.append()
    dend_29 ModelViewParmSubset_3.append()
    dend_28 ModelViewParmSubset_3.append()
    dend_19 ModelViewParmSubset_3.append()
    dend_0 ModelViewParmSubset_3.append()
    dend_25 ModelViewParmSubset_3.append()
    dend_20 ModelViewParmSubset_3.append()
    dend_18 ModelViewParmSubset_3.append()
    dend_1 ModelViewParmSubset_3.append()
    dend_27 ModelViewParmSubset_3.append()
    dend_26 ModelViewParmSubset_3.append()
    dend_24 ModelViewParmSubset_3.append()
    dend_21 ModelViewParmSubset_3.append()
    dend_17 ModelViewParmSubset_3.append()
    dend_2 ModelViewParmSubset_3.append()
    dend_23 ModelViewParmSubset_3.append()
    dend_22 ModelViewParmSubset_3.append()
    dend_16 ModelViewParmSubset_3.append()
    dend_3 ModelViewParmSubset_3.append()
    dend_15 ModelViewParmSubset_3.append()
    dend_4 ModelViewParmSubset_3.append()
    dend_14 ModelViewParmSubset_3.append()
    dend_5 ModelViewParmSubset_3.append()
    dend_7 ModelViewParmSubset_3.append()
    dend_6 ModelViewParmSubset_3.append()
    dend_11 ModelViewParmSubset_3.append()
    dend_8 ModelViewParmSubset_3.append()
    dend_13 ModelViewParmSubset_3.append()
    dend_12 ModelViewParmSubset_3.append()
    dend_10 ModelViewParmSubset_3.append()
    dend_9 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_4 = new SectionList()
    axon_0 ModelViewParmSubset_4.append()
    axon_1 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_30 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_29 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_28 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_25 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_18 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_26 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_21 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_17 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_16 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_15 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_14 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_6 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_11 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_10 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_9 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_0 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_19 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_1 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_2 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_20 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_3 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_4 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_5 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_24 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_7 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_23 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_8 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_22 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_27 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_12 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_13 OneSecGrp_SectionRef_31.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_2, dend_2, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_3, dend_3, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_4, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_5, dend_5, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_23 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_23 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_4 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert KdShu2007
        gmax_KdShu2007 = 4.2499998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dNAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__dNAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dNAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__dNAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_30 nseg = 5
    dend_29 nseg = 7
    dend_28 nseg = 5
    dend_25 nseg = 9
    dend_18 nseg = 5
    dend_26 nseg = 3
    dend_21 nseg = 3
    dend_17 nseg = 5
    dend_16 nseg = 7
    dend_15 nseg = 5
    dend_14 nseg = 5
    dend_6 nseg = 17
    dend_11 nseg = 9
    dend_10 nseg = 11
    dend_9 nseg = 9
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate dNAC222_L23_SBC_0c85d8e325_0_0


