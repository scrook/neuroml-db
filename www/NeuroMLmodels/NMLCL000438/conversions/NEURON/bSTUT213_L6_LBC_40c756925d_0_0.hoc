// Cell: bSTUT213_L6_LBC_40c756925d_0_0
/*
{
  "id" : "bSTUT213_L6_LBC_40c756925d_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-1.58794, -11.7196, 0.0, 2.80064", "-1.43666, -10.6109, 0.0, 4.56392", "-1.28539, -9.50222, 0.0, 6.24281", "-1.13412, -8.39354, 0.0, 7.62114", "-0.982843, -7.28486, 0.0, 8.91633", "-0.83157, -6.17618, 0.0, 10.2819", "-0.680297, -5.06751, 0.0, 11.6257", "-0.529024, -3.95883, 0.0, 12.7797", "-0.377751, -2.85015, 0.0, 13.5779", "-0.226478, -1.74148, 0.0, 14.0593", "-0.0752052, -0.632799, 0.0, 14.5256", "0.0760678, 0.475878, 0.0, 15.0335", "0.227341, 1.58456, 0.0, 15.6506", "0.378614, 2.69323, 0.0, 15.9776", "0.529887, 3.80191, 0.0, 15.9263", "0.68116, 4.91059, 0.0, 15.679", "0.832433, 6.01926, 0.0, 14.959", "0.983706, 7.12794, 0.0, 13.4415", "1.13498, 8.23662, 0.0, 11.0445", "1.28625, 9.3453, 0.0, 9.12656", "1.43752, 10.454, 0.0, 6.46763" ]
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "2.61877, -1.32764, -16.47, 0.91", "2.82215, -1.55679, -16.6924, 0.91", "3.90874, -3.53065, -18.4332, 0.91", "4.31023, -4.77431, -19.5732, 0.91", "4.43376, -5.44659, -20.3262, 0.91", "4.48299, -6.19437, -21.609, 0.91", "4.40014, -6.44089, -22.8749, 0.91", "4.14777, -5.97552, -24.4621, 0.91", "3.98564, -5.03768, -25.758, 0.91", "3.98481, -3.68694, -27.1652, 0.91", "4.239, -1.807, -29.0014, 0.91", "4.61893, -0.250732, -30.5639, 0.91", "5.12344, 1.39633, -32.3001, 0.91", "5.69708, 3.00136, -34.1243, 0.91", "6.23306, 4.45463, -36.0237, 0.91", "6.66984, 5.85303, -38.1815, 0.91", "6.91954, 6.80974, -39.8934, 0.91", "7.08998, 7.6152, -41.4627, 0.91", "7.2787, 8.55286, -43.596, 0.91", "7.54511, 9.56903, -46.2233, 1.36", "7.90354, 10.3621, -48.321, 1.36", "8.4981, 11.1306, -50.4465, 0.91", "9.3132, 11.753, -52.4108, 1.14", "10.3563, 12.1793, -54.3375, 0.68", "11.6627, 12.4074, -56.4151, 0.68", "13.0405, 12.4363, -58.4375, 2.27", "14.6927, 12.2948, -60.77, 0.45", "16.5158, 12.03, -63.3681, 1.59", "17.9201, 11.8074, -65.3776, 0.45", "19.2874, 11.6315, -67.3052, 0.45", "19.8782, 11.5579, -68.1107, 2.5", "21.6282, 11.3804, -70.4504, 0.23", "23.7099, 11.2909, -72.9979, 0.23", "25.6135, 11.2984, -75.1183, 0.23", "27.1856, 11.3668, -76.7199, 2.27", "29.6172, 11.5158, -79.0284, 0.23", "31.9305, 11.6799, -81.1029, 0.23", "33.2982, 11.7915, -82.2531, 0.91", "35.328, 11.9397, -83.8323, 0.23", "37.1252, 12.0939, -85.1263, 0.91", "38.9424, 12.2827, -86.4048, 0.23", "40.4945, 12.4794, -87.5124, 0.23", "41.2517, 12.5914, -88.106, 0.91", "43.0379, 12.9524, -89.7786, 0.23", "44.1605, 13.2567, -90.9428, 1.82", "45.736, 13.7829, -92.7649, 0.45", "47.2455, 14.3436, -94.5686, 0.68", "48.8619, 14.9174, -96.5193, 0.23", "50.6752, 15.5039, -98.6664, 1.59", "53.3613, 16.2851, -101.754, 0.23", "54.5068, 16.5392, -103.036, 0.23", "55.6197, 16.7072, -104.186, 0.91", "57.0291, 16.8373, -105.592, 0.23", "57.9555, 16.8683, -106.479, 0.91", "59.6806, 16.8995, -108.131, 0.23", "61.6224, 16.9505, -110.057, 0.91", "64.4188, 17.1235, -112.944, 0.45", "66.5136, 17.3627, -115.26, 0.45", "68.6671, 17.7687, -117.773, 0.45", "70.0873, 18.1218, -119.512, 0.68", "71.5358, 18.5645, -121.316, 0.23", "73.2667, 19.1804, -123.45, 1.14", "74.9784, 19.8798, -125.51, 0.45", "77.0428, 20.8238, -127.862, 0.45", "78.9684, 21.7381, -129.933, 0.91", "80.7781, 22.5022, -131.709, 0.45", "81.6369, 22.8036, -132.48, 1.59", "82.8771, 23.1372, -133.493, 1.36", "84.1519, 23.3728, -134.439, 0.68", "86.0747, 23.6806, -135.859, 0.68", "87.9342, 23.9842, -137.322, 1.36", "89.9953, 24.3669, -139.091, 1.36", "91.7886, 24.7878, -140.836, 0.68", "93.6284, 25.4027, -142.928, 0.68", "94.9573, 26.0981, -144.714, 0.45", "95.7297, 26.7459, -145.957, 0.45", "96.0887, 27.2077, -146.652, 0.91", "96.76, 28.6509, -148.489, 0.45", "97.1176, 30.0472, -150.156, 0.45", "97.3135, 31.7346, -152.056, 0.45", "97.387, 32.7824, -153.168, 0.45", "97.4311, 33.6732, -154.058, 0.91", "97.488, 35.5542, -155.842, 0.45", "97.5206, 37.2637, -157.367, 0.91", "97.6399, 39.1612, -159.055, 0.45", "97.8539, 41.2045, -160.945, 0.45", "98.1871, 42.9457, -162.675, 0.91", "98.6945, 44.604, -164.455, 0.45", "98.9217, 45.1362, -165.066, 0.91", "99.8124, 46.8485, -167.211, 0.45", "100.712, 48.2196, -169.246, 0.45", "101.671, 49.5159, -171.509, 0.45", "102.265, 50.2965, -173.04, 0.91", "102.994, 51.2109, -174.964, 0.23", "103.766, 52.1596, -177.028, 0.68", "104.745, 53.3107, -179.796, 0.45", "105.634, 54.2639, -182.315, 0.45", "106.322, 54.9865, -184.319, 0.91", "107.178, 55.7323, -186.748, 0.45", "108.185, 56.5354, -189.543, 0.45", "109.561, 57.5308, -193.206, 0.45", "110.828, 58.3766, -196.421, 0.45", "112.281, 59.1802, -199.793, 0.45", "113.826, 59.9099, -203.257, 0.45" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "3.75878, 8.68659, 6.75, 0.68", "4.89704, 9.55437, 7.38157, 0.68", "6.06416, 10.5831, 8.18254, 0.68", "7.51259, 12.0044, 9.36009, 0.91", "8.8237, 13.3826, 10.6248, 0.91", "9.91591, 14.6136, 11.951, 0.68", "10.7282, 15.5779, 13.24, 0.68", "10.9854, 16.0971, 14.2744, 0.68", "10.9582, 16.3962, 15.1569, 0.68", "10.7275, 16.735, 16.4717, 0.68", "10.2789, 17.3039, 18.4975, 0.68", "10.0942, 17.6862, 19.5108, 0.68", "9.87992, 18.6618, 21.5175, 0.68", "9.80976, 19.4263, 22.7598, 0.68", "9.79428, 20.4095, 24.1638, 0.68", "9.8322, 21.5552, 25.5694, 0.45", "9.89621, 22.6834, 26.7749, 0.45", "9.91334, 23.9142, 28.0233, 0.45", "9.81448, 25.6612, 29.9036, 0.45", "9.80821, 31.3046, 38.8342, 0.45", "10.2225, 38.8357, 46.31, 0.45", "9.94038, 45.6649, 54.4052, 0.45", "7.63152, 52.0743, 62.495, 0.45", "6.63714, 59.0533, 70.4065, 0.45", "6.05252, 66.1368, 78.2721, 0.45", "4.65703, 72.0779, 86.8989, 0.45", "2.07451, 78.3739, 94.9902, 0.45", "-0.335115, 83.3131, 103.987, 0.45", "-3.92192, 90.2572, 111.129, 0.45", "-8.06103, 98.2777, 116.724, 0.45", "-10.933, 105.594, 123.836, 0.45", "-15.6109, 111.591, 131.162, 0.45", "-19.4794, 117.524, 138.995, 0.45", "-23.2727, 121.876, 147.802, 0.45", "-26.5525, 125.107, 157.257, 0.45", "-30.3956, 127.302, 166.788, 0.45", "-36.0922, 130.155, 175.148, 0.45", "-42.5607, 132.623, 183.054, 0.45", "-49.426, 135.667, 190.409, 0.45", "-55.1842, 139.735, 198.222, 0.45" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "8.97878, 4.26886, -0.65, 2.27", "8.97878, 4.26886, -0.65, 2.27", "11.0627, 5.02976, -0.65, 1.82", "12.3538, 5.50118, -0.65, 1.82" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "-2.83121, -8.9844, -6.2, 1.14", "-2.83121, -8.9844, -6.2, 1.14", "-3.60574, -11.7642, -6.61206, 1.14", "-4.37407, -14.5217, -7.02082, 1.14", "-4.93708, -16.5423, -7.32035, 1.36", "-5.4919, -18.5335, -7.61553, 1.36", "-6.32107, -21.5094, -8.05666, 1.59", "-7.19123, -24.445, -8.51672, 1.59" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "-2.55121, -11.5367, 3.96, 2.5", "-2.55121, -11.5367, 3.96, 2.5", "-2.83533, -13.2486, 4.09535, 1.82", "-3.30824, -16.098, 4.32064, 1.82", "-3.69141, -18.4068, 4.50319, 1.82", "-4.11027, -20.9306, 4.70273, 1.82", "-4.49809, -23.2673, 4.88749, 2.05" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-6.77122, 4.3201, 8.7, 1.59", "-6.77122, 4.3201, 8.7, 1.59", "-7.95306, 5.71116, 8.83673, 1.36", "-9.33907, 7.15005, 9.00278, 1.36", "-10.7108, 8.3197, 9.19686, 1.36", "-13.2548, 10.148, 9.62416, 1.59", "-16.0948, 11.8695, 10.1741, 1.59", "-18.481, 13.0411, 10.7366, 1.36", "-20.751, 13.8642, 11.3968, 1.36", "-23.6416, 14.4394, 12.4298, 1.36", "-25.4124, 14.4884, 13.1888, 1.14", "-27.1651, 14.2739, 14.1114, 1.14", "-28.4194, 14.0746, 14.886, 1.14", "-29.328, 14.0736, 15.5285, 1.14", "-30.4018, 14.2047, 16.4217, 1.14", "-31.1125, 14.4959, 17.0797, 1.14", "-32.5482, 15.547, 18.4313, 1.14", "-34.4876, 17.6367, 20.1752, 1.14", "-36.2932, 20.0034, 21.6158, 1.14" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "1.32876, 10.4598, 0.58, 4.32", "1.32876, 10.4598, 0.58, 4.32", "1.85888, 12.2918, 1.07562, 2.5", "2.59167, 14.8241, 1.76073, 2.05", "3.1119, 16.6218, 2.2471, 2.5" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "1.43752, 10.454, 0.0, 1.15811", "3.46539, 25.3163, 0.0, 1.15811", "5.49327, 40.1786, 0.0, 1.15811" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "12.3538, 5.50118, -0.65, 1.82", "12.8689, 5.64186, -0.532936, 1.82", "16.0404, 6.5082, 0.187935, 1.59", "18.6454, 7.2198, 0.780046, 1.36", "20.6022, 7.75432, 1.22481, 1.59" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "12.3538, 5.50118, -0.65, 0.91", "13.2783, 5.72364, -1.93828, 0.91", "14.6763, 5.87168, -3.72457, 0.91", "15.772, 5.85716, -5.10526, 0.91", "16.7708, 5.81631, -6.32546, 0.91", "18.3529, 5.84291, -8.08473, 0.68", "20.3769, 6.02571, -10.0963, 0.68", "21.5428, 6.18189, -11.0935, 0.68", "23.2071, 6.42859, -12.2408, 0.68", "24.8542, 6.71747, -13.21, 0.68", "27.4015, 7.25729, -14.5707, 0.91", "29.5916, 7.78798, -15.6953, 0.68", "30.7622, 8.11989, -16.29, 0.68", "33.1742, 8.83392, -17.5398, 0.68", "35.1644, 9.36878, -18.5897, 0.68", "37.0267, 9.73629, -19.5856, 0.68", "38.5248, 9.95473, -20.4141, 0.68", "40.5166, 10.2133, -21.492, 0.68", "42.4207, 10.5005, -22.4653, 0.68", "44.6368, 10.8882, -23.5307, 0.45", "46.1351, 11.1202, -24.2475, 0.45", "47.0434, 11.2657, -24.692, 0.45", "48.5499, 11.5067, -25.4692, 0.45", "50.7791, 11.8826, -26.7254, 1.14", "52.8891, 12.2821, -28.0385, 0.45", "55.0354, 12.7652, -29.5356, 0.45", "56.4467, 13.1109, -30.6099, 0.45", "58.4275, 13.5792, -32.1569, 0.68", "60.2813, 14.0532, -33.6274, 0.45", "62.2726, 14.6402, -35.1495, 1.36", "64.2416, 15.2965, -36.5549, 0.45", "66.9015, 16.2774, -38.3083, 0.45", "68.4449, 16.8722, -39.2494, 0.68", "70.2612, 17.6306, -40.3027, 0.23", "72.4791, 18.5804, -41.5381, 0.23", "73.8223, 19.1511, -42.2506, 1.82", "75.6287, 19.89, -43.1552, 0.45", "76.8995, 20.3916, -43.7945, 0.45", "78.4412, 20.9442, -44.6142, 0.45", "80.0821, 21.4815, -45.5068, 0.45", "82.2195, 22.1355, -46.656, 0.45", "83.5889, 22.551, -47.3691, 0.68", "85.7398, 23.1657, -48.4566, 0.45", "88.2698, 23.8732, -49.671, 1.36", "90.187, 24.3978, -50.5153, 0.45", "92.1428, 24.979, -51.3282, 0.45", "94.4199, 25.7127, -52.2449, 0.23", "95.9547, 26.2385, -52.8548, 0.68", "98.4596, 27.1606, -53.7809, 0.23", "99.6158, 27.6231, -54.201, 1.36", "102.843, 28.9879, -55.3813, 0.23", "103.602, 29.3536, -55.6527, 0.68", "104.853, 30.0204, -56.0609, 0.23", "105.705, 30.5281, -56.3225, 0.68", "107.202, 31.4993, -56.7933, 0.23", "108.377, 32.2955, -57.1916, 1.14", "111.159, 34.0694, -58.1844, 0.23", "111.856, 34.4663, -58.4651, 1.14", "113.789, 35.5004, -59.3424, 0.23", "116.484, 36.7889, -60.6317, 0.23", "117.834, 37.3675, -61.3106, 0.68", "121.009, 38.6146, -62.9743, 0.23", "123.995, 39.6165, -64.5966, 0.23", "125.178, 39.9599, -65.2366, 1.14", "127.8, 40.5704, -66.6347, 0.45", "128.907, 40.7911, -67.2256, 0.45", "129.64, 40.9356, -67.6243, 0.68", "131.168, 41.2583, -68.5179, 0.23", "133.668, 41.8547, -70.1402, 0.23", "133.996, 41.945, -70.3991, 0.68", "135.611, 42.5078, -72.0322, 0.23", "136.633, 42.9131, -73.2722, 0.68", "137.655, 43.3519, -74.6762, 0.23", "139.027, 44.0447, -76.7775, 0.23", "140.334, 44.719, -78.9559, 0.68", "141.173, 45.1466, -80.382, 0.68", "142.178, 45.6355, -82.0715, 0.68", "143.738, 46.3713, -84.5387, 0.23", "145.038, 46.9541, -86.3902, 0.45", "146.649, 47.6259, -88.4212, 0.23", "147.799, 48.0632, -89.7065, 0.91", "149.507, 48.698, -91.5086, 0.23", "150.246, 48.9844, -92.2664, 0.45", "151.919, 49.6651, -94.0212, 0.23", "152.257, 49.8172, -94.3925, 1.14", "153.744, 50.6509, -96.1997, 0.23", "154.853, 51.3899, -97.8753, 0.23", "155.702, 52.0302, -99.3408, 1.59", "156.953, 53.0371, -101.71, 0.23", "158.285, 54.1475, -104.35, 0.23", "159.286, 55.0556, -106.442, 1.36", "161.29, 57.1122, -110.894, 0.23", "162.405, 58.2868, -113.435, 0.23", "163.12, 59.0525, -115.114, 0.23", "163.395, 59.3544, -115.785, 0.68", "164.642, 60.6458, -118.706, 0.23", "165.63, 61.6353, -120.874, 0.23" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "-7.19123, -24.445, -8.51672, 0.68", "-7.29466, -24.2902, -9.70852, 0.68", "-7.35297, -24.2628, -10.6285, 0.68", "-7.37974, -24.3144, -11.5775, 0.91", "-7.34602, -24.4387, -12.4662, 0.91", "-7.2483, -24.6473, -13.3224, 0.68", "-7.10086, -24.934, -14.1669, 0.45", "-6.92817, -25.3219, -14.8545, 0.45", "-6.79955, -25.7333, -15.4398, 0.68", "-6.68903, -26.2372, -16.0874, 0.68", "-6.60498, -26.7619, -16.7256, 0.68", "-6.55027, -27.2186, -17.3126, 0.68", "-6.55563, -27.7442, -18.0248, 0.68", "-6.63616, -28.3591, -18.8962, 0.68", "-6.73011, -28.8197, -19.5179, 0.68", "-6.86366, -29.4533, -20.2866, 0.68", "-6.96441, -30.0957, -21.0139, 0.68", "-7.01711, -30.837, -21.8173, 0.91", "-6.99112, -31.5991, -22.6236, 0.68", "-6.95157, -32.2001, -23.2502, 0.68", "-6.90161, -33.1186, -24.2171, 0.68", "-6.8684, -33.8869, -25.0683, 0.68", "-6.83926, -34.5159, -25.7851, 0.68", "-6.76857, -35.6298, -27.123, 0.45", "-6.74053, -36.1829, -27.8236, 0.45", "-6.7188, -36.8187, -28.6793, 0.45", "-6.71426, -37.2291, -29.2611, 0.45", "-6.7166, -37.6476, -29.8895, 2.05", "-6.71434, -38.3164, -30.9078, 0.45", "-6.72325, -38.9608, -31.91, 0.45", "-6.72474, -39.4118, -32.6185, 0.91", "-6.74134, -40.048, -33.6162, 0.45", "-6.77925, -40.6648, -34.5603, 0.45", "-6.8401, -41.3244, -35.5484, 1.82", "-6.92678, -42.1163, -36.6925, 0.45", "-6.96885, -42.5333, -37.2779, 0.45", "-6.97758, -42.6291, -37.4089, 0.68", "-7.0455, -43.4292, -38.4696, 0.45", "-7.10614, -44.1063, -39.3906, 0.45", "-7.14716, -44.7499, -40.3271, 0.68", "-7.16157, -45.4289, -41.3526, 0.45", "-7.16618, -45.966, -42.1974, 0.45", "-7.15711, -46.4308, -42.9614, 2.05", "-7.14699, -47.1235, -44.131, 0.45", "-7.15556, -47.781, -45.2482, 0.45", "-7.19086, -48.3693, -46.2221, 0.45", "-7.26659, -49.0381, -47.2621, 0.45", "-7.3244, -49.4779, -47.9154, 0.45", "-7.37623, -49.8386, -48.4248, 1.14", "-7.49212, -50.5254, -49.3032, 0.45", "-7.65838, -51.2586, -50.1692, 0.45", "-7.77727, -51.7542, -50.7268, 0.91", "-7.89898, -52.2524, -51.2737, 0.45", "-8.02788, -52.7605, -51.8239, 0.45", "-8.11035, -53.1281, -52.2448, 0.91", "-8.25335, -53.8075, -53.0338, 0.45", "-8.36554, -54.422, -53.7565, 0.45", "-8.43814, -54.9102, -54.3336, 0.45", "-8.48508, -55.2742, -54.7663, 0.91", "-8.5692, -56.185, -55.8645, 0.45", "-8.58612, -56.7158, -56.5172, 0.45", "-8.58671, -57.2581, -57.1773, 0.45", "-8.58842, -57.756, -57.7753, 0.45", "-8.58855, -58.4205, -58.5945, 0.45", "-8.59348, -58.8735, -59.1662, 0.45", "-8.63436, -59.554, -59.9835, 0.45", "-8.68028, -59.9618, -60.4745, 0.45", "-8.75827, -60.6308, -61.2567, 0.45", "-8.80599, -61.0538, -61.7371, 0.45", "-8.86935, -61.6979, -62.4742, 0.45", "-8.91156, -62.2835, -63.202, 1.36", "-8.94577, -62.9064, -64.0928, 1.36", "-8.94183, -63.4414, -65.0108, 0.68", "-8.92278, -63.8337, -65.8477, 0.68", "-8.90046, -64.1287, -66.7217, 0.68", "-8.87974, -64.3236, -67.8024, 0.68", "-8.86138, -64.3751, -68.9287, 0.45", "-8.86034, -64.3206, -69.9549, 0.45", "-8.8812, -64.2161, -70.8163, 0.45", "-8.93763, -64.0211, -72.0108, 0.45", "-9.04263, -63.7695, -73.432, 0.45", "-9.13482, -63.5822, -74.5344, 0.45", "-9.19588, -63.475, -75.2848, 0.45", "-9.24459, -63.4021, -76.187, 0.45", "-9.26901, -63.4063, -77.031, 0.45", "-9.25782, -63.5276, -78.006, 0.45", "-9.18425, -63.8452, -79.3396, 0.45", "-9.12765, -64.0555, -79.9975, 0.23", "-8.99009, -64.4772, -81.1867, 0.23", "-8.889, -64.7718, -82.0062, 0.91", "-8.77112, -65.1888, -83.4285, 0.45", "-8.76089, -65.3186, -84.1562, 0.45", "-8.82234, -65.3686, -85.5618, 0.45", "-8.86725, -65.287, -86.2957, 0.45", "-8.92331, -65.0639, -87.3243, 0.45", "-8.95552, -64.4853, -89.3339, 0.23", "-8.89737, -64.0354, -90.7936, 0.23", "-8.6809, -63.6033, -92.287, 0.91", "-8.27791, -63.2994, -93.6961, 0.23", "-7.72117, -63.1848, -94.9588, 0.23", "-7.14866, -63.2168, -95.9076, 0.68", "-6.12443, -63.4762, -97.2406, 0.45", "-5.03571, -63.8457, -98.5105, 0.45", "-3.69415, -64.4127, -99.9446, 0.45", "-2.492, -65.0189, -101.147, 0.45", "-2.00355, -65.285, -101.605, 0.45", "-1.22906, -65.7425, -102.305, 0.45" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "-7.19123, -24.445, -8.51672, 0.91", "-7.40254, -25.0701, -9.31457, 0.91", "-7.60545, -26.1465, -10.4013, 0.68", "-7.71643, -27.0957, -11.1142, 0.68", "-7.77257, -28.0401, -11.6312, 0.68", "-7.73573, -29.2955, -12.0724, 0.68", "-7.55452, -31.0096, -12.3278, 0.68", "-7.41568, -32.3812, -12.3348, 0.68", "-7.34248, -33.9233, -12.2599, 0.68", "-7.35816, -34.8256, -12.2328, 1.14", "-7.4703, -36.505, -12.2628, 1.14", "-7.82661, -39.0627, -12.4935, 0.68", "-8.27956, -41.0263, -12.8262, 0.91", "-9.01974, -43.3237, -13.4859, 0.91", "-9.8618, -45.5248, -14.3154, 0.91", "-10.479, -46.8985, -14.9312, 0.91", "-11.1916, -48.3025, -15.6792, 1.14", "-12.2231, -50.1945, -16.872, 1.36", "-13.3712, -52.2837, -18.2622, 1.36", "-14.0887, -53.5133, -19.1359, 1.36", "-15.3857, -55.5728, -20.6442, 1.36", "-16.6829, -57.5589, -22.0594, 1.36", "-17.4423, -58.7577, -22.8599, 1.14", "-18.1224, -59.927, -23.5825, 0.68", "-18.5968, -60.831, -24.0486, 0.68", "-18.9313, -61.4682, -24.3201, 0.68", "-19.6433, -62.7697, -24.6816, 0.68", "-20.5694, -64.3022, -24.952, 0.68", "-21.5377, -65.8183, -25.1972, 0.68", "-21.9333, -66.4627, -25.3232, 0.68", "-22.8889, -68.0226, -25.6715, 0.68", "-24.1977, -70.0012, -26.1829, 0.91", "-25.4219, -71.7119, -26.7148, 0.91", "-26.1703, -72.7303, -27.0947, 0.68", "-27.0926, -74.0586, -27.6647, 0.68", "-27.9199, -75.4631, -28.2966, 0.68", "-28.6459, -77.0093, -29.0527, 1.14", "-28.9517, -77.7765, -29.4763, 0.45", "-29.2874, -78.7228, -29.9754, 0.45", "-29.6134, -79.7044, -30.4604, 0.45", "-30.0221, -80.9234, -31.0225, 0.91", "-30.3718, -82.0926, -31.5391, 0.45", "-30.8131, -83.6179, -32.1596, 0.45", "-31.4946, -85.8499, -32.9382, 0.68", "-32.0396, -87.6864, -33.4669, 0.45", "-32.3078, -88.643, -33.7, 1.59", "-32.6584, -90.022, -33.9939, 1.59", "-33.2314, -92.521, -34.4353, 0.23", "-33.608, -94.3337, -34.7267, 1.36", "-34.3951, -98.2519, -35.3222, 0.23", "-34.7559, -100.071, -35.5732, 1.36", "-35.0509, -101.577, -35.7825, 0.23", "-35.3504, -103.037, -35.9968, 1.36", "-35.7665, -104.857, -36.3279, 0.23", "-36.0129, -105.734, -36.5337, 0.68", "-36.7516, -107.811, -37.1241, 0.23", "-37.2755, -109.062, -37.5235, 0.23", "-38.0666, -110.695, -38.0702, 0.91", "-38.7862, -112.026, -38.5405, 0.23", "-39.5228, -113.317, -39.0023, 0.68", "-40.7709, -115.474, -39.7577, 0.23", "-41.3409, -116.461, -40.0967, 0.23", "-41.8719, -117.426, -40.4198, 1.59", "-42.6783, -119.003, -40.9589, 0.23", "-43.9605, -121.654, -41.9293, 0.23", "-44.3642, -122.522, -42.2717, 1.82", "-44.9549, -123.781, -42.8056, 1.82", "-46.0799, -126.13, -43.8448, 0.23", "-46.7225, -127.427, -44.4341, 0.23", "-47.4166, -128.714, -45.022, 0.23", "-48.2337, -130.051, -45.6286, 0.68", "-49.2146, -131.462, -46.2968, 0.23", "-50.0725, -132.54, -46.8104, 0.23", "-50.5591, -133.082, -47.0611, 0.68", "-52.0, -134.527, -47.772, 0.23", "-53.1564, -135.581, -48.3607, 1.36", "-54.7066, -136.89, -49.1627, 0.23", "-55.0529, -137.165, -49.345, 0.23", "-56.0639, -137.938, -49.8909, 0.91", "-57.6852, -139.121, -50.83, 0.23", "-58.8219, -139.897, -51.555, 0.91" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-4.49809, -23.2673, 4.88749, 1.36", "-3.38438, -25.882, 3.99517, 1.36", "-2.28333, -28.8189, 2.99865, 1.14", "-1.39929, -31.1769, 2.19855, 1.14", "-0.672762, -33.1148, 1.54099, 1.14", "0.359242, -35.8675, 0.606963, 1.14", "1.39342, -38.6261, -0.329037, 1.36", "2.3608, -40.9848, -1.03047, 1.59" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-4.49809, -23.2673, 4.88749, 0.68", "-4.06684, -23.9249, 5.06809, 0.68", "-3.58093, -24.7401, 5.30612, 0.68", "-3.12757, -25.6537, 5.63982, 0.68", "-2.75117, -26.4909, 6.01616, 0.68", "-2.43834, -27.2005, 6.4004, 0.91", "-2.1713, -27.8706, 6.83042, 0.91", "-2.00241, -28.3555, 7.21008, 0.91", "-1.89007, -29.0731, 8.01802, 0.91", "-1.92732, -29.4881, 8.65054, 0.68", "-1.99238, -29.8057, 9.17169, 0.68", "-2.11828, -30.3407, 9.96063, 0.68", "-2.22585, -30.8925, 10.6294, 0.68", "-2.30427, -31.4946, 11.1926, 0.68", "-2.37259, -32.1551, 11.6761, 0.68", "-2.50648, -33.2122, 12.3393, 0.68", "-2.6296, -34.0832, 12.8214, 0.68", "-2.68526, -34.5512, 13.0409, 0.68", "-2.73592, -35.0591, 13.2341, 0.68", "-2.77522, -35.7802, 13.4686, 0.68", "-2.84941, -36.5949, 13.7359, 0.68" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-36.2932, 20.0034, 21.6158, 0.68", "-35.5278, 20.9532, 23.1944, 0.68", "-35.0019, 21.874, 24.5593, 0.68", "-34.7896, 22.3038, 25.1062, 0.68", "-34.2584, 23.3538, 26.3645, 0.45", "-33.8768, 24.1081, 27.2682, 0.45", "-33.5836, 24.6877, 27.9628, 0.45", "-33.0357, 25.65, 28.974, 0.45", "-32.5582, 26.3138, 29.7438, 0.45", "-32.0507, 27.2413, 30.7971, 0.45", "-27.7143, 31.3557, 36.6633, 0.45", "-23.0172, 33.3692, 43.2326, 0.45", "-18.945, 37.4943, 49.2787, 0.45", "-13.6006, 41.7418, 54.1316, 0.45", "-9.24874, 46.4152, 59.5744, 0.45", "-4.78681, 51.2316, 64.8051, 0.45", "0.454681, 54.8175, 70.2404, 0.45", "4.78293, 59.5032, 75.6921, 0.45", "10.0697, 64.7244, 79.613, 0.45", "15.072, 69.6316, 84.2359, 0.45", "20.1805, 73.7573, 89.4319, 0.45", "26.0324, 78.0648, 93.5951, 0.45", "32.7295, 80.4762, 97.9137, 0.45", "39.4787, 81.7268, 102.587, 0.45", "46.5446, 82.8603, 106.792, 0.45", "53.5922, 82.8694, 111.149, 0.45", "60.8493, 81.9113, 115.013, 0.45", "67.6898, 80.8821, 119.558, 0.45", "75.0609, 79.7269, 123.14, 0.45" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-36.2932, 20.0034, 21.6158, 0.68", "-38.3352, 20.3196, 21.9583, 0.68", "-40.0575, 20.6314, 22.2091, 0.68", "-41.709, 20.9141, 22.4494, 0.68", "-43.2976, 21.1683, 22.6507, 0.68", "-44.4371, 21.3506, 22.7951, 0.68", "-46.576, 21.6927, 23.0661, 0.68", "-48.0243, 21.9184, 23.1776, 0.68", "-49.5046, 22.1725, 23.2469, 0.68", "-51.2853, 22.5467, 23.3166, 0.68" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "3.1119, 16.6218, 2.2471, 1.59", "2.30607, 19.3513, 0.95862, 1.59", "1.3291, 22.2568, -0.587162, 1.59", "0.515938, 24.675, -1.87376, 1.59", "-0.137704, 26.6189, -2.90797, 1.59", "-0.809902, 28.618, -3.97153, 1.59", "-1.34907, 30.2215, -4.82462, 1.59", "-1.37806, 30.2791, -4.86817, 1.59" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "3.1119, 16.6218, 2.2471, 1.14", "3.91188, 17.8516, 2.09333, 1.14", "5.00666, 19.7371, 1.86149, 1.14", "5.78914, 20.9923, 1.69742, 1.14", "7.10004, 22.9059, 1.42824, 0.91", "8.12291, 24.3167, 1.2263, 0.91", "9.07052, 25.5974, 1.04687, 0.91", "10.2475, 27.3077, 0.781385, 0.91", "11.7602, 29.6768, 0.393593, 0.91", "12.7051, 31.1596, 0.158973, 0.91", "13.2952, 32.0615, 0.0188499, 0.68", "14.037, 33.2252, -0.182099, 0.68", "15.0932, 34.9928, -0.578177, 0.91", "15.9532, 36.4848, -0.976556, 0.91", "16.803, 38.0635, -1.38926, 0.91", "17.5235, 39.336, -1.68414, 0.91", "18.1977, 40.371, -1.86185, 0.68", "19.2579, 41.7062, -1.91117, 0.68", "20.0088, 42.5044, -1.76712, 0.68", "21.0104, 43.5461, -1.41429, 0.68", "21.9408, 44.6113, -0.965557, 0.68", "22.7359, 45.6623, -0.562899, 0.68", "23.7551, 47.1397, -0.119884, 0.68", "24.9659, 49.0235, 0.219366, 0.68", "25.7931, 50.4127, 0.253686, 0.68", "26.7273, 52.0861, 0.0294067, 0.68", "27.7702, 54.01, -0.503336, 0.68", "28.5286, 55.4166, -1.06672, 0.68", "29.2568, 56.7661, -1.76061, 0.91", "29.8889, 57.9567, -2.48863, 0.68", "30.4202, 59.005, -3.19679, 0.68", "30.9757, 60.1665, -4.04306, 0.68", "31.7235, 61.8676, -5.25931, 0.68", "32.2713, 63.3748, -6.24802, 0.68", "32.659, 64.5406, -6.92513, 0.68", "33.1038, 65.8937, -7.61126, 0.68", "33.4769, 66.9745, -8.11721, 0.68", "33.8854, 68.1108, -8.63436, 1.14", "34.4924, 69.6993, -9.341, 0.68", "35.2326, 71.4815, -10.0289, 0.68", "35.8329, 72.7885, -10.4744, 0.68", "36.3897, 73.9138, -10.8299, 0.68", "36.7482, 74.615, -11.0653, 1.36", "36.9635, 75.0299, -11.2363, 2.05", "37.9042, 76.8816, -12.0682, 0.45", "38.6318, 78.4693, -12.8515, 0.45", "38.9402, 79.2195, -13.2394, 0.91", "39.4605, 80.5575, -13.9127, 0.68", "39.979, 81.9308, -14.6043, 0.68", "40.3151, 82.7872, -15.054, 0.45", "40.7403, 83.8137, -15.613, 0.45", "41.265, 85.0916, -16.2954, 0.45", "41.7172, 86.1597, -16.8389, 0.91", "42.5737, 88.0579, -17.7051, 0.23", "43.2212, 89.3758, -18.2605, 0.23", "43.6379, 90.1611, -18.6051, 1.59" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "5.49327, 40.1786, 0.0, 0.68", "7.52114, 55.0409, 0.0, 0.68", "9.54902, 69.9032, 0.0, 0.68" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "20.6022, 7.75432, 1.22481, 0.68", "21.4872, 7.88787, 1.85464, 0.68", "22.3888, 8.18706, 2.48767, 0.68", "22.9667, 8.52623, 2.914, 0.68", "23.5809, 8.98832, 3.39496, 0.68", "24.3057, 9.56919, 3.97935, 0.68", "24.953, 10.0836, 4.51671, 0.68", "25.877, 10.7869, 5.29907, 0.68", "26.9364, 11.5707, 6.21492, 0.68", "27.6746, 12.0727, 6.81437, 0.68", "28.3826, 12.4906, 7.32834, 0.68", "29.2462, 12.9012, 7.87726, 0.68", "30.2145, 13.2664, 8.43488, 0.68", "31.2335, 13.5981, 8.98222, 0.68", "32.669, 14.0564, 9.70012, 0.68", "33.7793, 14.4413, 10.2242, 0.68", "35.0207, 14.8957, 10.7806, 0.68", "35.6853, 15.1343, 11.065, 0.68", "36.519, 15.4243, 11.4243, 0.68", "37.1616, 15.6328, 11.7253, 0.68", "37.679, 15.7835, 12.0078, 0.68", "38.6151, 15.9954, 12.5196, 0.68", "39.4941, 16.1333, 12.9049, 0.68", "40.8743, 16.3686, 13.3659, 0.68", "41.8469, 16.5612, 13.6351, 0.68", "43.1462, 16.8978, 13.9667, 0.68", "44.1334, 17.2602, 14.225, 0.68", "45.5549, 17.9058, 14.6107, 0.68", "47.3025, 18.7544, 15.0744, 0.68", "48.4552, 19.3056, 15.358, 0.68", "49.5175, 19.7944, 15.618, 0.45", "50.8815, 20.4257, 16.0082, 0.45", "52.0718, 21.0013, 16.4543, 0.68", "52.7882, 21.3342, 16.7953, 0.68", "54.032, 21.7869, 17.4288, 0.45", "54.9281, 22.0783, 17.8783, 0.45", "55.9325, 22.4354, 18.396, 0.45", "57.0769, 22.9112, 19.0301, 0.45", "57.8917, 23.3412, 19.5214, 0.45", "58.9347, 24.0439, 20.2282, 0.45", "60.3886, 25.353, 21.3224, 0.45", "61.2736, 26.4937, 22.1037, 0.45", "61.8502, 27.5388, 22.7146, 0.23", "62.3189, 28.6997, 23.3046, 0.23", "62.6406, 29.8388, 23.8264, 0.45", "63.0883, 32.0844, 24.7703, 0.45", "63.3856, 34.3038, 25.6768, 0.23", "63.5236, 35.5452, 26.1727, 0.23", "63.5931, 36.6587, 26.5911, 0.23", "63.615, 37.5991, 26.9286, 0.23", "63.7015, 39.0933, 27.4485, 0.23", "69.9757, 43.299, 30.0782, 0.23", "76.5894, 47.0003, 32.592, 0.23", "82.4574, 51.7705, 35.2451, 0.23", "88.8564, 56.2553, 36.971, 0.23", "95.1447, 61.1951, 37.4528, 0.23", "100.914, 66.6339, 38.7227, 0.23", "106.191, 72.7044, 38.9554, 0.23", "111.516, 78.5318, 40.5043, 0.23", "116.472, 84.3962, 42.9214, 0.23", "121.183, 90.1776, 45.9495, 0.23" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "20.6022, 7.75432, 1.22481, 0.68", "21.4505, 6.80059, 0.679985, 0.68", "22.6282, 5.51163, 0.157345, 0.68", "23.5381, 4.56615, -0.188404, 0.68", "24.601, 3.45327, -0.61943, 0.68", "25.0657, 2.99236, -0.804721, 0.45", "25.8037, 2.29425, -1.10196, 0.45", "26.8757, 1.27029, -1.52054, 0.45", "27.9391, 0.270445, -1.94131, 0.68", "29.2553, -1.01649, -2.5445, 0.68", "30.6394, -2.39432, -3.26142, 0.68", "32.5565, -4.29069, -4.30497, 0.68", "33.9222, -5.65324, -5.08153, 0.68", "34.7297, -6.50294, -5.51719, 0.45", "35.7258, -7.52651, -5.94507, 0.45", "36.125, -7.93647, -6.06801, 0.45", "37.063, -8.90173, -6.23212, 0.45", "38.0473, -9.88526, -6.26451, 0.68", "39.3399, -11.2205, -6.31508, 0.68", "40.6587, -12.6727, -6.53705, 0.45", "41.4241, -13.5438, -6.80014, 0.45", "42.2791, -14.5302, -7.28847, 0.68", "42.959, -15.264, -7.85625, 0.68", "44.3534, -16.7853, -9.30405, 0.23", "45.614, -18.1669, -10.9182, 0.23", "46.504, -19.1259, -12.254, 0.23", "47.4479, -20.0592, -13.7753, 0.23", "48.9442, -21.4304, -16.3476, 0.23", "53.5293, -27.6879, -21.7216, 0.23", "57.2796, -34.0203, -27.6535, 0.23", "61.5788, -40.1065, -33.4494, 0.23", "66.7426, -45.5169, -39.1675, 0.23", "72.9432, -50.1143, -44.4995, 0.23", "79.3883, -55.403, -48.8064, 0.23", "85.1419, -61.808, -52.6026, 0.23", "91.5841, -68.1637, -55.0838, 0.23", "97.0323, -75.5585, -57.1223, 0.23", "101.39, -83.8244, -58.3315, 0.23" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "2.3608, -40.9848, -1.03047, 1.36", "0.452038, -41.9928, -1.10629, 1.36", "-1.46398, -43.0402, -1.24804, 1.14", "-3.10967, -43.9433, -1.42976, 1.14", "-5.40781, -45.2708, -1.78271, 0.91", "-6.3181, -45.8482, -1.97214, 0.91", "-7.51081, -46.6965, -2.29592, 0.91", "-8.78878, -47.7548, -2.81494, 0.91", "-9.80601, -48.9291, -3.46138, 0.91", "-10.5646, -50.0362, -4.08974, 0.91", "-11.3517, -51.3693, -4.82011, 0.91", "-12.1318, -52.7046, -5.49085, 0.91", "-12.9554, -54.0392, -6.10739, 0.91", "-14.2322, -56.0085, -6.92438, 0.91", "-15.8472, -58.2667, -7.75627, 0.91", "-17.0857, -59.7929, -8.25588, 1.14", "-19.1549, -62.0307, -8.8673, 1.36", "-20.8677, -63.692, -9.24586, 1.14", "-22.7707, -65.3904, -9.56942, 1.14", "-24.7155, -67.0007, -9.82136, 1.36", "-25.7914, -67.8668, -9.95424, 1.14", "-27.5487, -69.2626, -10.1739, 0.91", "-28.728, -70.2176, -10.2902, 0.91", "-29.9909, -71.3558, -10.3595, 0.91", "-31.0125, -72.476, -10.3614, 0.91", "-31.9848, -73.8672, -10.3013, 0.68", "-33.2007, -76.0195, -10.2059, 0.91", "-33.9123, -77.4984, -10.14, 1.14", "-34.7611, -79.4599, -9.99205, 1.14", "-35.5843, -81.6071, -9.74343, 0.68", "-36.1892, -83.3399, -9.51669, 0.68", "-36.8697, -85.4133, -9.20716, 1.14", "-37.2929, -86.6879, -9.01001, 0.68", "-37.9452, -88.5723, -8.75077, 0.68", "-38.8281, -91.0097, -8.4679, 0.68", "-39.9465, -93.9922, -8.18942, 0.68", "-40.6339, -95.8846, -8.07142, 1.36", "-41.3591, -97.9192, -7.9986, 1.36", "-42.221, -100.304, -8.01981, 1.14", "-42.9171, -102.035, -8.10366, 0.91", "-43.6439, -103.661, -8.23871, 0.91", "-44.575, -105.59, -8.46193, 0.91", "-45.2071, -106.814, -8.6481, 1.59", "-46.4262, -109.078, -9.0303, 0.91", "-47.8392, -111.635, -9.44333, 1.14", "-48.8443, -113.462, -9.69899, 1.14", "-50.1199, -115.841, -9.96346, 1.82", "-51.7086, -118.89, -10.1989, 1.36", "-52.9994, -121.473, -10.3625, 1.36", "-53.7808, -123.152, -10.4588, 1.82", "-54.4625, -124.864, -10.5208, 0.91", "-55.0624, -126.587, -10.4858, 0.45", "-55.5181, -128.269, -10.3416, 0.45", "-55.7045, -129.372, -10.1851, 0.45", "-55.8914, -131.111, -9.94975, 0.68", "-56.0077, -132.608, -9.80198, 0.45", "-56.1032, -133.999, -9.73155, 0.45", "-56.182, -134.842, -9.73688, 0.45", "-56.5205, -137.321, -9.80538, 0.45", "-56.8374, -138.961, -9.80146, 0.23", "-57.0025, -139.592, -9.76586, 0.23", "-57.4124, -140.952, -9.61381, 0.23", "-57.7092, -141.943, -9.43563, 0.45", "-58.1363, -143.411, -9.01022, 0.23", "-58.3326, -144.193, -8.68336, 0.68", "-58.7128, -145.886, -7.794, 0.23", "-58.9139, -146.936, -7.17516, 0.23", "-58.9982, -147.457, -6.84367, 0.45", "-59.1889, -148.931, -5.87019, 0.23", "-59.2917, -149.748, -5.36331, 0.45", "-59.5991, -151.499, -4.444, 0.23", "-59.9081, -152.795, -3.88974, 0.23", "-60.2074, -153.922, -3.44329, 0.45", "-60.577, -155.163, -2.98059, 0.23", "-61.1916, -156.986, -2.37588, 0.91", "-62.167, -159.66, -1.63596, 0.23", "-62.809, -161.363, -1.31297, 0.91" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "2.3608, -40.9848, -1.03047, 1.36", "2.73775, -41.3077, -0.616025, 1.36", "3.50452, -41.8553, 0.127717, 0.68", "4.17832, -42.33, 0.712955, 0.68", "5.08263, -42.9483, 1.37257, 0.68", "5.78201, -43.4386, 1.77967, 0.68", "6.43217, -43.8938, 2.09054, 0.45", "7.0251, -44.2374, 2.29531, 0.45", "7.62637, -44.5217, 2.39544, 0.68", "8.38617, -44.8886, 2.44317, 0.68", "9.2652, -45.3385, 2.47164, 0.68", "10.0057, -45.761, 2.51791, 0.68", "11.0623, -46.3705, 2.64146, 0.68", "12.152, -47.0228, 2.85887, 0.68", "13.3861, -47.8244, 3.21082, 0.68", "14.1641, -48.4024, 3.48285, 0.68", "14.8236, -48.9639, 3.73344, 0.68", "15.51, -49.6515, 3.96738, 0.68", "16.2942, -50.5963, 4.22552, 0.68", "16.8011, -51.2971, 4.41905, 0.68", "17.5213, -52.3844, 4.72214, 0.68", "18.1467, -53.4125, 5.01656, 0.68", "18.7364, -54.3994, 5.29625, 0.68", "19.2932, -55.291, 5.57761, 0.68", "19.8815, -56.0717, 5.86531, 0.68", "20.6476, -56.9657, 6.1992, 0.68", "21.1757, -57.5251, 6.42411, 0.68", "22.6127, -58.807, 6.9988, 0.23", "23.2176, -59.2668, 7.22692, 0.23", "24.3176, -59.994, 7.60378, 0.23", "25.5544, -60.753, 7.96047, 0.23", "26.6892, -61.394, 8.25609, 0.23", "27.7036, -61.9346, 8.50898, 0.23", "28.7351, -62.4233, 8.79392, 0.23", "30.002, -63.0321, 9.16236, 0.23", "34.3841, -67.9277, 10.5251, 0.23", "38.5069, -72.95, 12.2179, 0.23", "42.4712, -78.2273, 13.5, 0.23", "45.4767, -83.8641, 15.6416, 0.23", "48.5198, -89.7745, 16.8007, 0.23", "52.0113, -95.498, 17.4969, 0.23", "55.3869, -101.123, 19.0304, 0.23", "58.0923, -107.266, 19.8074, 0.23", "61.5338, -113.037, 19.257, 0.23", "64.8462, -118.908, 19.0156, 0.23", "67.8621, -124.91, 18.3559, 0.23", "70.2298, -130.965, 16.539, 0.23", "71.9909, -137.269, 14.8499, 0.23", "75.0753, -143.041, 13.2416, 0.23", "78.6158, -148.697, 12.321, 0.23", "83.6038, -153.144, 11.9255, 0.23" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-2.84941, -36.5949, 13.7359, 0.23", "-3.06009, -36.8399, 14.6714, 0.23", "-3.4081, -37.406, 16.1454, 0.23", "-3.62365, -38.0801, 17.3541, 0.23", "-3.70282, -38.8188, 18.1826, 0.23", "-3.71761, -39.3291, 18.6258, 0.23", "-3.75662, -40.0085, 19.114, 0.23", "-3.76274, -40.5226, 19.4254, 0.23", "-3.75244, -41.7459, 19.9722, 0.23", "-3.69716, -43.5291, 20.594, 0.23", "-3.66404, -44.3845, 20.854, 0.23", "-3.59319, -46.223, 21.3785, 0.23", "-4.31513, -52.293, 27.8406, 0.23", "-5.5759, -56.4919, 35.5217, 0.23", "-5.53501, -60.6048, 43.3469, 0.23", "-6.39136, -63.9218, 51.4808, 0.23", "-7.81191, -68.4542, 58.951, 0.23", "-9.44646, -73.7584, 65.8743, 0.23", "-12.1342, -79.5209, 72.0869, 0.23", "-13.0545, -84.5121, 79.3532, 0.23", "-13.3066, -90.3119, 86.0801, 0.23", "-13.6002, -97.2666, 91.6666, 0.23" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-2.84941, -36.5949, 13.7359, 0.23", "-2.54753, -38.1866, 14.7434, 0.23", "-2.53488, -39.1261, 15.3405, 0.23", "-2.54016, -40.0301, 15.9694, 0.68", "-2.4911, -40.9708, 16.6247, 0.68", "-2.44673, -41.9918, 17.3236, 0.45", "-2.44842, -43.1049, 18.054, 0.45", "-2.49871, -44.3219, 18.8261, 0.45", "-2.57224, -45.517, 19.4747, 0.45", "-2.66795, -47.1091, 20.1293, 0.45", "-2.64698, -47.9221, 20.3126, 0.45", "-2.42695, -49.1388, 20.3267, 0.45", "-2.16414, -50.0812, 20.1109, 0.45", "-1.61819, -51.7179, 19.5231, 0.45", "-1.05079, -53.2849, 18.7464, 0.23", "-0.433535, -54.7384, 17.83, 0.23", "-0.0873848, -55.3882, 17.3625, 0.23", "0.710988, -56.6028, 16.3581, 0.23", "3.04341, -67.5656, 17.5367, 0.23", "5.42252, -78.0853, 20.7308, 0.23", "9.3191, -88.595, 21.6254, 0.23", "14.5493, -98.5143, 21.8355, 0.23", "17.5635, -109.304, 20.6839, 0.23", "23.3968, -118.863, 20.4959, 0.23", "29.223, -128.385, 21.3706, 0.23", "35.2822, -137.7, 20.0507, 0.23", "43.5977, -145.04, 19.2745, 0.23", "52.1561, -152.124, 19.2584, 0.23", "60.2073, -159.793, 18.7962, 0.23", "68.1826, -167.317, 16.9152, 0.23", "76.5983, -174.579, 16.9849, 0.23", "86.0433, -180.355, 16.6645, 0.23" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-51.2853, 22.5467, 23.3166, 0.68", "-51.7925, 22.9771, 24.0705, 0.68", "-52.3915, 23.5304, 24.9028, 0.45", "-53.0273, 24.0753, 25.6671, 0.45", "-53.5509, 24.5037, 26.2096, 0.45", "-54.3908, 25.1909, 27.08, 0.45", "-55.1065, 25.7765, 27.8216, 0.45", "-55.5069, 26.1577, 28.237, 0.45", "-56.1156, 26.7784, 28.8289, 0.45", "-56.6982, 27.3214, 29.2818, 0.45", "-60.2262, 30.4225, 34.7785, 0.45", "-64.4007, 32.734, 40.1813, 0.45", "-68.4155, 34.7937, 45.7985, 0.45", "-71.7177, 37.1399, 51.7713, 0.45", "-74.8123, 38.4142, 58.1441, 0.45", "-78.5786, 38.5183, 64.2542, 0.45", "-83.231, 37.9251, 69.678, 0.45", "-87.9898, 37.3084, 75.0056, 0.45", "-92.499, 35.9889, 80.4201, 0.45", "-96.9501, 36.1663, 86.0465, 0.45" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-51.2853, 22.5467, 23.3166, 0.68", "-51.9075, 23.4154, 22.6326, 0.68", "-52.7517, 24.7294, 21.654, 0.68", "-53.562, 26.0167, 20.8166, 0.68", "-53.9827, 26.648, 20.4226, 0.68", "-54.6724, 27.626, 19.8648, 0.68", "-55.4199, 28.6764, 19.372, 0.68", "-56.3949, 30.0636, 18.869, 0.68", "-57.7129, 31.8996, 18.3031, 0.68", "-58.927, 33.5526, 17.835, 0.68", "-60.4013, 35.4553, 17.305, 0.68", "-62.4078, 37.8756, 16.6277, 0.68", "-63.6491, 39.225, 16.1982, 0.68", "-64.3454, 39.8736, 15.9215, 0.68", "-65.0036, 40.4209, 15.6357, 0.68", "-66.0119, 41.1776, 15.1973, 0.68", "-66.8744, 41.7084, 14.8415, 0.68", "-68.0553, 42.3421, 14.3567, 0.68", "-69.6511, 43.1997, 13.707, 0.68", "-71.7551, 44.4447, 12.837, 0.68", "-72.8952, 45.2099, 12.3326, 0.68", "-74.8865, 46.7582, 11.3165, 0.68", "-75.7395, 47.5252, 10.7818, 0.68", "-76.6394, 48.4965, 10.0786, 0.68", "-77.2946, 49.2831, 9.47103, 0.68", "-78.0042, 50.1221, 8.73447, 0.68", "-78.8876, 51.1368, 7.81037, 0.91", "-79.7006, 52.0644, 7.01125, 0.91", "-81.4454, 53.8969, 5.62578, 0.91", "-82.7505, 55.1043, 4.77401, 0.91", "-83.9824, 56.0722, 4.08889, 0.68", "-85.3522, 56.9985, 3.44867, 0.68", "-86.8627, 57.9473, 2.84931, 0.68", "-87.5935, 58.4117, 2.61098, 0.68", "-89.0518, 59.4037, 2.23613, 0.91", "-90.6956, 60.6834, 1.94174, 0.68", "-92.2261, 61.9899, 1.78153, 0.68", "-93.8305, 63.3971, 1.7391, 1.14", "-95.4127, 64.9062, 1.8266, 0.68", "-96.4165, 65.9849, 1.96625, 0.68", "-97.5449, 67.351, 2.23199, 1.14", "-98.2437, 68.2634, 2.41714, 0.91", "-99.076, 69.3507, 2.57339, 0.68", "-100.654, 71.2575, 2.64625, 0.68", "-101.395, 72.0964, 2.55866, 0.45", "-102.273, 73.1059, 2.3338, 0.45", "-103.501, 74.5546, 1.84662, 1.36", "-104.577, 75.7954, 1.2712, 0.68", "-105.762, 77.1905, 0.522176, 0.91", "-106.477, 78.048, 0.0450292, 0.68", "-107.203, 78.9446, -0.403587, 0.68", "-108.116, 80.1516, -0.92783, 0.91", "-108.96, 81.3211, -1.37008, 0.68", "-110.608, 83.7414, -2.16499, 0.68", "-111.375, 84.9251, -2.51297, 0.68", "-112.869, 87.3143, -3.10522, 0.68", "-113.321, 88.0788, -3.25224, 0.68", "-114.199, 89.7099, -3.46947, 1.59", "-114.99, 91.3885, -3.57432, 0.45", "-115.689, 93.0366, -3.5704, 0.91", "-116.151, 94.3271, -3.47271, 0.45", "-116.541, 95.704, -3.24795, 0.45", "-116.739, 96.4, -3.09878, 0.45", "-117.259, 98.3052, -2.62244, 0.91", "-117.625, 99.4809, -2.33572, 0.45", "-118.303, 101.271, -1.96247, 0.45", "-119.12, 103.034, -1.71728, 1.36", "-119.787, 104.356, -1.60338, 0.45", "-120.52, 105.765, -1.52465, 0.45", "-121.321, 107.189, -1.47725, 0.45", "-122.324, 108.883, -1.39469, 0.91", "-123.417, 110.571, -1.22628, 0.45", "-123.866, 111.251, -1.10235, 0.45", "-124.623, 112.453, -0.78989, 0.45", "-125.421, 113.818, -0.352163, 1.14", "-126.314, 115.534, 0.302018, 0.68", "-127.089, 117.074, 0.959316, 0.68", "-128.011, 118.768, 1.74727, 0.68", "-128.537, 119.615, 2.14454, 0.91", "-129.7, 121.373, 2.96475, 0.91", "-130.393, 122.395, 3.3962, 0.45", "-131.227, 123.59, 3.78632, 0.45", "-132.09, 124.811, 4.04975, 0.91", "-132.777, 125.748, 4.11962, 0.45", "-133.995, 127.391, 4.02848, 0.45", "-134.915, 128.643, 3.78617, 1.36", "-135.755, 129.82, 3.45273, 0.68", "-136.698, 131.195, 2.97393, 0.68", "-137.726, 132.83, 2.32114, 0.68", "-138.58, 134.244, 1.64682, 0.45", "-139.929, 136.448, 0.362473, 0.45", "-140.782, 137.796, -0.534318, 1.14", "-141.534, 139.005, -1.40629, 0.45", "-142.18, 140.182, -2.2967, 0.45", "-142.638, 141.307, -3.17175, 0.45", "-142.828, 142.223, -3.93408, 0.45", "-142.859, 143.113, -4.71664, 0.45", "-142.852, 144.082, -5.5458, 0.45", "-142.843, 145.24, -6.43932, 1.36", "-142.862, 146.837, -7.54005, 1.14", "-142.825, 148.077, -8.25693, 0.45", "-142.73, 149.391, -8.93279, 0.45", "-142.592, 150.715, -9.58246, 0.23", "-142.402, 152.383, -10.3613, 0.23", "-142.36, 152.752, -10.5212, 0.23", "-142.185, 154.041, -10.9812, 1.36", "-141.863, 155.596, -11.4056, 0.45", "-141.618, 156.395, -11.5834, 0.45", "-141.219, 157.445, -11.796, 0.91", "-140.67, 158.799, -12.0713, 0.23", "-140.181, 160.026, -12.337, 0.23", "-139.646, 161.372, -12.6322, 0.68", "-139.04, 162.917, -12.9306, 0.45", "-138.422, 164.6, -13.2667, 1.14", "-138.115, 165.582, -13.481, 0.23", "-137.807, 166.995, -13.7999, 0.23", "-137.68, 168.042, -14.0384, 0.68", "-137.668, 170.209, -14.5088, 0.23", "-137.77, 171.379, -14.7312, 0.23", "-138.062, 172.974, -15.0004, 1.14", "-138.731, 175.426, -15.3672, 0.23", "-139.012, 176.193, -15.4683, 0.91", "-139.832, 177.954, -15.7042, 0.23", "-140.326, 178.82, -15.8117, 0.91", "-141.68, 180.924, -16.0486, 0.23", "-142.51, 182.127, -16.1999, 1.14", "-143.373, 183.312, -16.3802, 0.45", "-144.262, 184.473, -16.6047, 0.45", "-144.868, 185.219, -16.7884, 0.91", "-146.352, 186.994, -17.2931, 0.45", "-147.344, 188.176, -17.6764, 0.45", "-148.026, 189.033, -17.9983, 1.14", "-149.219, 190.579, -18.6272, 0.23", "-150.352, 192.095, -19.3053, 0.23", "-150.91, 192.821, -19.6972, 0.91", "-151.698, 193.767, -20.3608, 0.91", "-152.484, 194.58, -21.067, 0.23", "-152.951, 194.99, -21.5935, 0.91", "-153.648, 195.482, -22.5852, 0.23", "-154.218, 195.793, -23.5368, 0.23", "-154.852, 196.088, -24.7065, 0.23", "-155.426, 196.306, -25.8087, 0.91", "-156.602, 196.732, -28.0714, 0.23", "-157.061, 196.925, -28.941, 0.68", "-157.806, 197.327, -30.3716, 0.23", "-158.555, 197.85, -31.8323, 0.23", "-159.139, 198.303, -32.9842, 0.23", "-159.601, 198.704, -33.9266, 1.59", "-160.493, 199.555, -35.5462, 0.23", "-161.116, 200.183, -36.6651, 0.23", "-161.497, 200.581, -37.3185, 1.59" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-1.37806, 30.2791, -4.86817, 1.82", "-1.75726, 31.5812, -5.34425, 1.82", "-2.44991, 33.9597, -6.21387, 1.36", "-2.86727, 35.3928, -6.73786, 1.36", "-3.40894, 37.2528, -7.41792, 1.36" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-1.37806, 30.2791, -4.86817, 1.14", "-1.75513, 31.5768, -6.39818, 1.14", "-2.22482, 33.1559, -8.10965, 1.14", "-2.54025, 34.3045, -9.36602, 1.14", "-2.86295, 35.9248, -11.2341, 0.91", "-2.9988, 37.3524, -12.9474, 0.91", "-3.0126, 38.6864, -14.6148, 0.68", "-2.89643, 39.7732, -15.9377, 0.68", "-2.74393, 40.4053, -16.7475, 0.68", "-2.22433, 41.64, -18.5617, 0.68", "-1.76476, 42.4026, -19.8857, 0.68", "-1.32331, 43.0328, -20.9604, 0.68", "-0.590113, 44.1733, -22.6625, 0.68", "-0.0400734, 45.2555, -24.078, 0.68", "0.295472, 46.182, -25.1863, 0.68", "0.517538, 47.1876, -26.3123, 0.68", "0.752993, 49.0764, -28.3655, 0.68", "0.896345, 50.4682, -29.8186, 0.68", "0.972439, 51.878, -31.2743, 0.68", "0.970189, 53.1727, -32.5988, 0.91", "0.887265, 54.5625, -34.0418, 0.91", "0.737376, 55.9423, -35.5825, 0.68", "0.425221, 57.5189, -37.4887, 0.91", "0.139151, 58.8722, -39.0519, 0.68", "-0.110823, 60.1071, -40.3961, 0.68", "-0.392052, 61.638, -41.9593, 0.68", "-0.659174, 63.2694, -43.5237, 0.68", "-0.904149, 64.8249, -44.9061, 0.68", "-1.21209, 66.9035, -46.5872, 0.68", "-1.43224, 68.9708, -48.1196, 0.68", "-1.63016, 71.618, -49.979, 0.45", "-1.69696, 73.7967, -51.4457, 0.45", "-1.68041, 74.6329, -51.9976, 0.68", "-1.51198, 76.8392, -53.4627, 0.45", "-1.40734, 77.9336, -54.2101, 0.45", "-1.25665, 79.207, -55.0548, 1.82", "-0.92408, 81.4778, -56.607, 0.45", "-0.723575, 82.8907, -57.6292, 0.45", "-0.625155, 83.6928, -58.2255, 0.68", "-0.418706, 85.8386, -59.8686, 0.45", "-0.334892, 87.2466, -60.959, 1.82", "-0.324498, 88.9436, -62.3543, 0.45", "-0.390747, 90.8222, -64.0101, 0.45", "-0.41834, 91.3434, -64.5193, 0.45", "-0.485346, 92.7747, -66.0739, 0.45", "-0.495726, 94.0136, -67.5094, 1.59", "-0.392974, 95.8245, -69.7294, 0.45", "-0.23608, 97.2386, -71.5121, 0.45", "0.041051, 98.6679, -73.3576, 0.45", "0.349787, 99.8532, -74.8965, 1.59", "0.782013, 101.219, -76.6386, 0.45", "1.2328, 102.396, -78.1333, 0.45", "1.77073, 103.636, -79.6644, 0.45", "2.21037, 104.602, -80.8466, 0.45", "2.68691, 105.673, -82.1148, 0.45", "3.05188, 106.511, -83.0934, 0.91", "3.77859, 108.298, -85.0139, 0.45", "4.32431, 109.79, -86.4489, 0.45", "4.73345, 110.957, -87.5371, 0.45", "5.21688, 112.796, -89.1699, 0.45", "5.34878, 113.525, -89.8223, 0.91", "5.56054, 115.837, -91.9939, 0.45", "5.50617, 117.578, -93.724, 0.45", "5.3337, 118.59, -94.8249, 1.36", "4.76607, 120.456, -97.0982, 0.45", "4.13117, 121.94, -99.1216, 0.68", "3.50963, 123.122, -100.95, 0.45", "2.90172, 124.128, -102.733, 1.36", "2.10838, 125.443, -105.202, 0.45", "1.48394, 126.658, -107.502, 0.45", "0.964256, 128.061, -110.174, 0.23", "0.667969, 129.55, -112.849, 0.68", "0.639021, 130.837, -115.069, 0.68", "0.912396, 132.385, -117.535, 1.14", "1.43547, 133.813, -119.545, 0.45", "2.33156, 135.684, -121.788, 0.68", "3.34228, 137.493, -123.649, 0.45", "4.13047, 138.837, -124.827, 0.91", "4.99758, 140.373, -126.021, 0.45", "5.71557, 141.762, -126.988, 0.91", "6.63028, 144.048, -128.527, 0.45", "7.22703, 146.199, -130.041, 0.45", "7.31404, 146.755, -130.485, 0.68", "7.45252, 148.77, -132.243, 0.45", "7.45565, 149.522, -132.983, 0.91", "7.41903, 151.509, -135.115, 0.45", "7.36154, 153.135, -136.89, 0.91", "7.21775, 154.741, -138.725, 0.23", "7.18553, 155.21, -139.278, 0.45", "7.15904, 156.945, -141.38, 0.45", "7.35269, 158.851, -143.949, 0.45", "7.50714, 159.493, -144.909, 1.14", "8.00966, 160.791, -147.075, 0.45", "8.59463, 162.002, -149.314, 0.45", "9.12447, 162.973, -151.293, 0.91", "10.4356, 165.021, -155.863, 0.45", "11.3002, 166.226, -158.638, 0.45", "12.1967, 167.361, -161.18, 0.91", "13.1343, 168.518, -163.579, 0.91", "14.3493, 170.085, -166.59, 0.45", "14.8794, 170.815, -167.828, 0.45", "15.416, 171.673, -168.99, 1.14", "16.5526, 173.683, -171.326, 0.68", "17.6517, 175.787, -173.422, 0.45", "18.5377, 177.574, -175.011, 0.45", "18.7596, 178.081, -175.441, 0.45", "19.2835, 179.435, -176.584, 0.91", "19.7837, 180.808, -177.791, 0.45", "20.2394, 182.307, -179.139, 0.91", "20.7801, 184.31, -181.019, 0.23", "21.0072, 185.323, -182.047, 0.23", "21.19, 186.464, -183.329, 0.23", "21.2806, 187.367, -184.403, 0.23", "21.2744, 188.759, -186.015, 0.23", "21.2028, 189.77, -187.161, 0.23", "20.9655, 191.41, -188.892, 0.23", "20.7461, 192.964, -190.481, 0.23", "20.5997, 194.224, -191.786, 0.23", "20.5708, 195.185, -192.753, 0.68", "20.7325, 197.285, -194.816, 0.23", "21.0415, 199.124, -196.625, 0.23", "21.4289, 200.688, -198.233, 0.45", "21.855, 202.154, -199.815, 0.91", "22.4998, 204.487, -202.483, 0.23", "22.9021, 205.878, -204.436, 0.23", "23.1917, 206.867, -205.895, 0.23", "23.6554, 208.348, -208.186, 0.23", "23.8086, 208.952, -209.139, 0.45", "24.1649, 210.645, -212.017, 0.23", "24.6376, 213.77, -218.385, 0.23" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 15
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "-161.497, 200.581, -37.3185, 0.23", "-160.235, 201.121, -38.1019, 0.23", "-158.918, 201.685, -38.9192, 0.68", "-157.334, 202.363, -39.9028, 0.23", "-155.737, 203.046, -40.894, 0.23", "-154.53, 203.562, -41.6432, 0.23" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-161.497, 200.581, -37.3185, 0.45", "-162.344, 202.16, -38.7628, 0.45", "-163.36, 203.908, -40.3788, 0.45", "-164.232, 205.308, -41.722, 0.91", "-165.457, 207.174, -43.4967, 0.23", "-165.975, 207.943, -44.18, 0.68", "-167.069, 209.569, -45.5899, 0.23", "-167.83, 210.621, -46.5448, 0.23", "-168.689, 211.769, -47.6898, 0.23", "-169.216, 212.434, -48.4667, 1.14", "-170.712, 214.301, -50.7489, 0.23", "-171.234, 214.959, -51.6013, 0.91", "-172.615, 216.701, -53.9938, 0.23", "-174.187, 218.732, -56.9277, 0.23", "-175.39, 220.292, -59.3978, 0.23" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-3.40894, 37.2528, -7.41792, 0.91", "-3.6833, 38.7346, -6.95792, 0.91", "-4.13214, 41.1149, -6.22513, 0.91", "-4.75064, 45.6167, -4.86382, 0.91", "-4.91981, 47.487, -4.29612, 0.91", "-5.03044, 50.1139, -3.46155, 0.91", "-5.04005, 52.66, -2.61836, 0.91", "-5.02935, 54.236, -2.09511, 0.91", "-5.07174, 56.9744, -1.06564, 0.91", "-5.20571, 58.7777, -0.191489, 0.91", "-5.43216, 60.2636, 0.556794, 0.91", "-5.73289, 61.7394, 1.20586, 0.68", "-6.06285, 63.163, 1.75423, 0.91", "-6.79863, 66.5085, 2.94058, 0.91", "-7.5839, 70.4514, 4.27341, 0.91", "-8.0565, 74.2073, 5.44682, 0.91", "-8.31303, 78.9587, 6.77833, 0.91", "-8.26426, 81.9006, 7.44586, 0.91", "-8.03667, 84.9718, 7.91148, 0.91", "-7.8443, 86.6902, 8.05217, 1.14", "-7.41285, 90.7191, 8.19844, 0.91", "-7.26999, 92.8514, 8.18966, 0.91", "-7.21221, 96.1317, 7.964, 0.91", "-7.25127, 100.996, 7.27221, 0.91", "-7.37621, 104.896, 6.4905, 0.91", "-7.5591, 107.95, 5.76934, 0.91", "-7.73419, 109.863, 5.29606, 0.68", "-7.93667, 111.974, 4.87564, 0.68", "-8.17193, 114.958, 4.54374, 0.91", "-8.26221, 117.072, 4.48631, 0.91", "-8.33716, 120.371, 4.50996, 1.36", "-8.38636, 122.553, 4.51876, 0.91", "-8.51584, 125.835, 4.49513, 0.91", "-8.62512, 128.528, 4.35621, 0.91", "-8.78692, 132.477, 3.92877, 0.91", "-8.85977, 135.889, 3.35339, 1.14", "-8.84829, 139.239, 2.572, 1.14", "-8.8103, 140.941, 2.08032, 0.91", "-8.6187, 146.198, 0.349143, 1.14", "-8.51306, 148.653, -0.469594, 1.14", "-8.34818, 152.132, -1.52341, 0.91", "-8.22947, 154.118, -1.98434, 0.68", "-8.0631, 156.043, -2.2691, 0.68", "-7.83043, 158.574, -2.42001, 0.91", "-7.51025, 162.481, -2.26028, 1.14", "-7.25176, 165.624, -1.90947, 1.14", "-7.05471, 168.329, -1.44811, 0.45", "-6.96363, 170.561, -0.95007, 0.45", "-6.97005, 173.162, -0.289503, 0.68", "-7.0504, 175.325, 0.278656, 0.45", "-7.12235, 176.398, 0.530033, 0.45", "-7.30292, 178.502, 0.826594, 0.91", "-7.52785, 180.405, 0.869897, 0.23", "-7.7347, 181.826, 0.746867, 0.68", "-7.96415, 183.598, 0.458862, 0.23", "-8.29692, 186.384, -0.143303, 0.45", "-8.52345, 188.478, -0.683091, 0.23", "-8.64699, 189.781, -1.09625, 0.23", "-8.83974, 191.893, -1.8223, 0.23", "-8.95618, 193.247, -2.29693, 0.68", "-9.1562, 195.735, -3.1566, 0.23", "-9.37326, 199.235, -4.45732, 0.23", "-9.43749, 201.443, -5.32192, 0.23", "-11.399, 213.484, -6.80054, 0.23", "-11.2555, 225.666, -8.49867, 0.23", "-12.1554, 237.925, -8.91494, 0.23", "-10.826, 250.127, -8.15356, 0.23", "-11.2996, 262.357, -9.38278, 0.23", "-13.1518, 274.502, -9.03213, 0.23" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-3.40894, 37.2528, -7.41792, 0.68", "-3.79992, 39.7256, -7.81647, 0.68", "-4.29617, 42.1872, -8.19137, 0.68", "-4.97424, 44.931, -8.57139, 0.68", "-5.82075, 47.957, -8.9009, 0.68", "-6.75523, 51.0545, -9.06053, 0.68", "-7.88214, 54.5397, -9.04851, 0.68", "-8.53414, 56.3799, -8.89809, 0.68", "-9.33541, 58.3676, -8.58354, 0.91", "-10.1356, 59.9827, -8.21176, 0.45", "-11.4443, 62.289, -7.52716, 0.45", "-12.5427, 64.103, -6.93326, 0.45", "-13.3233, 65.4534, -6.53884, 0.45", "-13.7092, 66.1527, -6.404, 0.45", "-14.5967, 67.8159, -6.29768, 0.91", "-15.6889, 69.869, -6.3431, 0.45", "-16.96, 72.2674, -6.63141, 0.45", "-17.8943, 74.0771, -6.95311, 0.45", "-18.6995, 75.6939, -7.28831, 0.45", "-19.5136, 77.3961, -7.67885, 0.45" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_30", "dend_29", "dend_24", "dend_21", "dend_14", "dend_7", "dend_0", "dend_26", "dend_25", "dend_23", "dend_22", "dend_18", "dend_15", "dend_13", "dend_8", "dend_2", "dend_1", "dend_28", "dend_27", "dend_20", "dend_19", "dend_17", "dend_16", "dend_12", "dend_9", "dend_4", "dend_3", "dend_11", "dend_10", "dend_6", "dend_5" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_30", "dend_29", "dend_24", "dend_21", "dend_14", "dend_7", "dend_0", "dend_26", "dend_25", "dend_23", "dend_22", "dend_18", "dend_15", "dend_13", "dend_8", "dend_2", "dend_1", "dend_28", "dend_27", "dend_20", "dend_19", "dend_17", "dend_16", "dend_12", "dend_9", "dend_4", "dend_3", "dend_11", "dend_10", "dend_6", "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_24", "dend_24", "dend_24", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_26", "dend_26", "dend_26", "dend_26", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_4", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.13603E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.13603E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.999855",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.042115",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0012239999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.001693",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.386953",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "8.0E-6",
    "erev" : "-63.854015"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.5399997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.039862998",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "1.04239E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "5.2299997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.0054459996",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.503893",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "1.0E-4",
    "erev" : "-67.1289"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.78E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.15074699",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009017",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "4.0E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.0032419998",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "1.74E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bSTUT_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bSTUT_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bSTUT213_L6_LBC_40c756925d_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_30, id: dend_30, parent: soma_0
create dend_30
public dend_30
// Section: dend_29, id: dend_29, parent: soma_0
create dend_29
public dend_29
// Section: dend_24, id: dend_24, parent: soma_0
create dend_24
public dend_24
// Section: dend_21, id: dend_21, parent: soma_0
create dend_21
public dend_21
// Section: dend_14, id: dend_14, parent: soma_0
create dend_14
public dend_14
// Section: dend_7, id: dend_7, parent: soma_0
create dend_7
public dend_7
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_26, id: dend_26, parent: dend_24
create dend_26
public dend_26
// Section: dend_25, id: dend_25, parent: dend_24
create dend_25
public dend_25
// Section: dend_23, id: dend_23, parent: dend_21
create dend_23
public dend_23
// Section: dend_22, id: dend_22, parent: dend_21
create dend_22
public dend_22
// Section: dend_18, id: dend_18, parent: dend_14
create dend_18
public dend_18
// Section: dend_15, id: dend_15, parent: dend_14
create dend_15
public dend_15
// Section: dend_13, id: dend_13, parent: dend_7
create dend_13
public dend_13
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_28, id: dend_28, parent: dend_26
create dend_28
public dend_28
// Section: dend_27, id: dend_27, parent: dend_26
create dend_27
public dend_27
// Section: dend_20, id: dend_20, parent: dend_18
create dend_20
public dend_20
// Section: dend_19, id: dend_19, parent: dend_18
create dend_19
public dend_19
// Section: dend_17, id: dend_17, parent: dend_15
create dend_17
public dend_17
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_12, id: dend_12, parent: dend_8
create dend_12
public dend_12
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9
// Section: dend_4, id: dend_4, parent: dend_2
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_11, id: dend_11, parent: dend_9
create dend_11
public dend_11
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10
// Section: dend_6, id: dend_6, parent: dend_4
create dend_6
public dend_6
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_30, dend_29, dend_24, dend_21, dend_14, dend_7, dend_0, dend_26, dend_25, dend_23, dend_22, dend_18, dend_15, dend_13, dend_8, dend_2, dend_1, dend_28, dend_27, dend_20, dend_19, dend_17, dend_16, dend_12, dend_9, dend_4, dend_3, dend_11, dend_10, dend_6, dend_5]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_30, dend_29, dend_24, dend_21, dend_14, dend_7, dend_0, dend_26, dend_25, dend_23, dend_22, dend_18, dend_15, dend_13, dend_8, dend_2, dend_1, dend_28, dend_27, dend_20, dend_19, dend_17, dend_16, dend_12, dend_9, dend_4, dend_3, dend_11, dend_10, dend_6, dend_5]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_32
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_26, dend_26, dend_26, dend_26, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_11, dend_11, dend_11, dend_11, dend_11, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bSTUT_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bSTUT_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_30(0), soma_0(0.45000003020513674)
    connect dend_29(0), soma_0(0.45000003020513674)
    connect dend_24(0), soma_0(0.45000003020513674)
    connect dend_21(0), soma_0(0.45000003020513674)
    connect dend_14(0), soma_0(0.45000003020513674)
    connect dend_7(0), soma_0(0.45000003020513674)
    connect dend_0(0), soma_0(0.45000003020513674)
    connect axon_0(0), soma_0(1.0)
    connect dend_26(0), dend_24(1.0)
    connect dend_25(0), dend_24(1.0)
    connect dend_23(0), dend_21(1.0)
    connect dend_22(0), dend_21(1.0)
    connect dend_18(0), dend_14(1.0)
    connect dend_15(0), dend_14(1.0)
    connect dend_13(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_28(0), dend_26(1.0)
    connect dend_27(0), dend_26(1.0)
    connect dend_20(0), dend_18(1.0)
    connect dend_19(0), dend_18(1.0)
    connect dend_17(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_12(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)
    connect dend_4(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_11(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)
    connect dend_6(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -1.58794, -11.7196, 0.0, 2.80064 ) }
    soma_0 { pt3dadd( -1.43666, -10.6109, 0.0, 4.56392 ) }
    soma_0 { pt3dadd( -1.28539, -9.50222, 0.0, 6.24281 ) }
    soma_0 { pt3dadd( -1.13412, -8.39354, 0.0, 7.62114 ) }
    soma_0 { pt3dadd( -0.982843, -7.28486, 0.0, 8.91633 ) }
    soma_0 { pt3dadd( -0.83157, -6.17618, 0.0, 10.2819 ) }
    soma_0 { pt3dadd( -0.680297, -5.06751, 0.0, 11.6257 ) }
    soma_0 { pt3dadd( -0.529024, -3.95883, 0.0, 12.7797 ) }
    soma_0 { pt3dadd( -0.377751, -2.85015, 0.0, 13.5779 ) }
    soma_0 { pt3dadd( -0.226478, -1.74148, 0.0, 14.0593 ) }
    soma_0 { pt3dadd( -0.0752052, -0.632799, 0.0, 14.5256 ) }
    soma_0 { pt3dadd( 0.0760678, 0.475878, 0.0, 15.0335 ) }
    soma_0 { pt3dadd( 0.227341, 1.58456, 0.0, 15.6506 ) }
    soma_0 { pt3dadd( 0.378614, 2.69323, 0.0, 15.9776 ) }
    soma_0 { pt3dadd( 0.529887, 3.80191, 0.0, 15.9263 ) }
    soma_0 { pt3dadd( 0.68116, 4.91059, 0.0, 15.679 ) }
    soma_0 { pt3dadd( 0.832433, 6.01926, 0.0, 14.959 ) }
    soma_0 { pt3dadd( 0.983706, 7.12794, 0.0, 13.4415 ) }
    soma_0 { pt3dadd( 1.13498, 8.23662, 0.0, 11.0445 ) }
    soma_0 { pt3dadd( 1.28625, 9.3453, 0.0, 9.12656 ) }
    soma_0 { pt3dadd( 1.43752, 10.454, 0.0, 6.46763 ) }
    // Section: dend_30, id: dend_30, parent: soma_0 (entry count 21/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( 2.61877, -1.32764, -16.47, 0.91 ) }
    dend_30 { pt3dadd( 2.82215, -1.55679, -16.6924, 0.91 ) }
    dend_30 { pt3dadd( 3.90874, -3.53065, -18.4332, 0.91 ) }
    dend_30 { pt3dadd( 4.31023, -4.77431, -19.5732, 0.91 ) }
    dend_30 { pt3dadd( 4.43376, -5.44659, -20.3262, 0.91 ) }
    dend_30 { pt3dadd( 4.48299, -6.19437, -21.609, 0.91 ) }
    dend_30 { pt3dadd( 4.40014, -6.44089, -22.8749, 0.91 ) }
    dend_30 { pt3dadd( 4.14777, -5.97552, -24.4621, 0.91 ) }
    dend_30 { pt3dadd( 3.98564, -5.03768, -25.758, 0.91 ) }
    dend_30 { pt3dadd( 3.98481, -3.68694, -27.1652, 0.91 ) }
    dend_30 { pt3dadd( 4.239, -1.807, -29.0014, 0.91 ) }
    dend_30 { pt3dadd( 4.61893, -0.250732, -30.5639, 0.91 ) }
    dend_30 { pt3dadd( 5.12344, 1.39633, -32.3001, 0.91 ) }
    dend_30 { pt3dadd( 5.69708, 3.00136, -34.1243, 0.91 ) }
    dend_30 { pt3dadd( 6.23306, 4.45463, -36.0237, 0.91 ) }
    dend_30 { pt3dadd( 6.66984, 5.85303, -38.1815, 0.91 ) }
    dend_30 { pt3dadd( 6.91954, 6.80974, -39.8934, 0.91 ) }
    dend_30 { pt3dadd( 7.08998, 7.6152, -41.4627, 0.91 ) }
    dend_30 { pt3dadd( 7.2787, 8.55286, -43.596, 0.91 ) }
    dend_30 { pt3dadd( 7.54511, 9.56903, -46.2233, 1.36 ) }
    dend_30 { pt3dadd( 7.90354, 10.3621, -48.321, 1.36 ) }
    dend_30 { pt3dadd( 8.4981, 11.1306, -50.4465, 0.91 ) }
    dend_30 { pt3dadd( 9.3132, 11.753, -52.4108, 1.14 ) }
    dend_30 { pt3dadd( 10.3563, 12.1793, -54.3375, 0.68 ) }
    dend_30 { pt3dadd( 11.6627, 12.4074, -56.4151, 0.68 ) }
    dend_30 { pt3dadd( 13.0405, 12.4363, -58.4375, 2.27 ) }
    dend_30 { pt3dadd( 14.6927, 12.2948, -60.77, 0.45 ) }
    dend_30 { pt3dadd( 16.5158, 12.03, -63.3681, 1.59 ) }
    dend_30 { pt3dadd( 17.9201, 11.8074, -65.3776, 0.45 ) }
    dend_30 { pt3dadd( 19.2874, 11.6315, -67.3052, 0.45 ) }
    dend_30 { pt3dadd( 19.8782, 11.5579, -68.1107, 2.5 ) }
    dend_30 { pt3dadd( 21.6282, 11.3804, -70.4504, 0.23 ) }
    dend_30 { pt3dadd( 23.7099, 11.2909, -72.9979, 0.23 ) }
    dend_30 { pt3dadd( 25.6135, 11.2984, -75.1183, 0.23 ) }
    dend_30 { pt3dadd( 27.1856, 11.3668, -76.7199, 2.27 ) }
    dend_30 { pt3dadd( 29.6172, 11.5158, -79.0284, 0.23 ) }
    dend_30 { pt3dadd( 31.9305, 11.6799, -81.1029, 0.23 ) }
    dend_30 { pt3dadd( 33.2982, 11.7915, -82.2531, 0.91 ) }
    dend_30 { pt3dadd( 35.328, 11.9397, -83.8323, 0.23 ) }
    dend_30 { pt3dadd( 37.1252, 12.0939, -85.1263, 0.91 ) }
    dend_30 { pt3dadd( 38.9424, 12.2827, -86.4048, 0.23 ) }
    dend_30 { pt3dadd( 40.4945, 12.4794, -87.5124, 0.23 ) }
    dend_30 { pt3dadd( 41.2517, 12.5914, -88.106, 0.91 ) }
    dend_30 { pt3dadd( 43.0379, 12.9524, -89.7786, 0.23 ) }
    dend_30 { pt3dadd( 44.1605, 13.2567, -90.9428, 1.82 ) }
    dend_30 { pt3dadd( 45.736, 13.7829, -92.7649, 0.45 ) }
    dend_30 { pt3dadd( 47.2455, 14.3436, -94.5686, 0.68 ) }
    dend_30 { pt3dadd( 48.8619, 14.9174, -96.5193, 0.23 ) }
    dend_30 { pt3dadd( 50.6752, 15.5039, -98.6664, 1.59 ) }
    dend_30 { pt3dadd( 53.3613, 16.2851, -101.754, 0.23 ) }
    dend_30 { pt3dadd( 54.5068, 16.5392, -103.036, 0.23 ) }
    dend_30 { pt3dadd( 55.6197, 16.7072, -104.186, 0.91 ) }
    dend_30 { pt3dadd( 57.0291, 16.8373, -105.592, 0.23 ) }
    dend_30 { pt3dadd( 57.9555, 16.8683, -106.479, 0.91 ) }
    dend_30 { pt3dadd( 59.6806, 16.8995, -108.131, 0.23 ) }
    dend_30 { pt3dadd( 61.6224, 16.9505, -110.057, 0.91 ) }
    dend_30 { pt3dadd( 64.4188, 17.1235, -112.944, 0.45 ) }
    dend_30 { pt3dadd( 66.5136, 17.3627, -115.26, 0.45 ) }
    dend_30 { pt3dadd( 68.6671, 17.7687, -117.773, 0.45 ) }
    dend_30 { pt3dadd( 70.0873, 18.1218, -119.512, 0.68 ) }
    dend_30 { pt3dadd( 71.5358, 18.5645, -121.316, 0.23 ) }
    dend_30 { pt3dadd( 73.2667, 19.1804, -123.45, 1.14 ) }
    dend_30 { pt3dadd( 74.9784, 19.8798, -125.51, 0.45 ) }
    dend_30 { pt3dadd( 77.0428, 20.8238, -127.862, 0.45 ) }
    dend_30 { pt3dadd( 78.9684, 21.7381, -129.933, 0.91 ) }
    dend_30 { pt3dadd( 80.7781, 22.5022, -131.709, 0.45 ) }
    dend_30 { pt3dadd( 81.6369, 22.8036, -132.48, 1.59 ) }
    dend_30 { pt3dadd( 82.8771, 23.1372, -133.493, 1.36 ) }
    dend_30 { pt3dadd( 84.1519, 23.3728, -134.439, 0.68 ) }
    dend_30 { pt3dadd( 86.0747, 23.6806, -135.859, 0.68 ) }
    dend_30 { pt3dadd( 87.9342, 23.9842, -137.322, 1.36 ) }
    dend_30 { pt3dadd( 89.9953, 24.3669, -139.091, 1.36 ) }
    dend_30 { pt3dadd( 91.7886, 24.7878, -140.836, 0.68 ) }
    dend_30 { pt3dadd( 93.6284, 25.4027, -142.928, 0.68 ) }
    dend_30 { pt3dadd( 94.9573, 26.0981, -144.714, 0.45 ) }
    dend_30 { pt3dadd( 95.7297, 26.7459, -145.957, 0.45 ) }
    dend_30 { pt3dadd( 96.0887, 27.2077, -146.652, 0.91 ) }
    dend_30 { pt3dadd( 96.76, 28.6509, -148.489, 0.45 ) }
    dend_30 { pt3dadd( 97.1176, 30.0472, -150.156, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_30 { pt3dadd( 97.3135, 31.7346, -152.056, 0.45 ) }
    dend_30 { pt3dadd( 97.387, 32.7824, -153.168, 0.45 ) }
    dend_30 { pt3dadd( 97.4311, 33.6732, -154.058, 0.91 ) }
    dend_30 { pt3dadd( 97.488, 35.5542, -155.842, 0.45 ) }
    dend_30 { pt3dadd( 97.5206, 37.2637, -157.367, 0.91 ) }
    dend_30 { pt3dadd( 97.6399, 39.1612, -159.055, 0.45 ) }
    dend_30 { pt3dadd( 97.8539, 41.2045, -160.945, 0.45 ) }
    dend_30 { pt3dadd( 98.1871, 42.9457, -162.675, 0.91 ) }
    dend_30 { pt3dadd( 98.6945, 44.604, -164.455, 0.45 ) }
    dend_30 { pt3dadd( 98.9217, 45.1362, -165.066, 0.91 ) }
    dend_30 { pt3dadd( 99.8124, 46.8485, -167.211, 0.45 ) }
    dend_30 { pt3dadd( 100.712, 48.2196, -169.246, 0.45 ) }
    dend_30 { pt3dadd( 101.671, 49.5159, -171.509, 0.45 ) }
    dend_30 { pt3dadd( 102.265, 50.2965, -173.04, 0.91 ) }
    dend_30 { pt3dadd( 102.994, 51.2109, -174.964, 0.23 ) }
    dend_30 { pt3dadd( 103.766, 52.1596, -177.028, 0.68 ) }
    dend_30 { pt3dadd( 104.745, 53.3107, -179.796, 0.45 ) }
    dend_30 { pt3dadd( 105.634, 54.2639, -182.315, 0.45 ) }
    dend_30 { pt3dadd( 106.322, 54.9865, -184.319, 0.91 ) }
    dend_30 { pt3dadd( 107.178, 55.7323, -186.748, 0.45 ) }
    dend_30 { pt3dadd( 108.185, 56.5354, -189.543, 0.45 ) }
    dend_30 { pt3dadd( 109.561, 57.5308, -193.206, 0.45 ) }
    dend_30 { pt3dadd( 110.828, 58.3766, -196.421, 0.45 ) }
    dend_30 { pt3dadd( 112.281, 59.1802, -199.793, 0.45 ) }
    dend_30 { pt3dadd( 113.826, 59.9099, -203.257, 0.45 ) }
    // Section: dend_29, id: dend_29, parent: soma_0 (entry count 25/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 3.75878, 8.68659, 6.75, 0.68 ) }
    dend_29 { pt3dadd( 4.89704, 9.55437, 7.38157, 0.68 ) }
    dend_29 { pt3dadd( 6.06416, 10.5831, 8.18254, 0.68 ) }
    dend_29 { pt3dadd( 7.51259, 12.0044, 9.36009, 0.91 ) }
    dend_29 { pt3dadd( 8.8237, 13.3826, 10.6248, 0.91 ) }
    dend_29 { pt3dadd( 9.91591, 14.6136, 11.951, 0.68 ) }
    dend_29 { pt3dadd( 10.7282, 15.5779, 13.24, 0.68 ) }
    dend_29 { pt3dadd( 10.9854, 16.0971, 14.2744, 0.68 ) }
    dend_29 { pt3dadd( 10.9582, 16.3962, 15.1569, 0.68 ) }
    dend_29 { pt3dadd( 10.7275, 16.735, 16.4717, 0.68 ) }
    dend_29 { pt3dadd( 10.2789, 17.3039, 18.4975, 0.68 ) }
    dend_29 { pt3dadd( 10.0942, 17.6862, 19.5108, 0.68 ) }
    dend_29 { pt3dadd( 9.87992, 18.6618, 21.5175, 0.68 ) }
    dend_29 { pt3dadd( 9.80976, 19.4263, 22.7598, 0.68 ) }
    dend_29 { pt3dadd( 9.79428, 20.4095, 24.1638, 0.68 ) }
    dend_29 { pt3dadd( 9.8322, 21.5552, 25.5694, 0.45 ) }
    dend_29 { pt3dadd( 9.89621, 22.6834, 26.7749, 0.45 ) }
    dend_29 { pt3dadd( 9.91334, 23.9142, 28.0233, 0.45 ) }
    dend_29 { pt3dadd( 9.81448, 25.6612, 29.9036, 0.45 ) }
    dend_29 { pt3dadd( 9.80821, 31.3046, 38.8342, 0.45 ) }
    dend_29 { pt3dadd( 10.2225, 38.8357, 46.31, 0.45 ) }
    dend_29 { pt3dadd( 9.94038, 45.6649, 54.4052, 0.45 ) }
    dend_29 { pt3dadd( 7.63152, 52.0743, 62.495, 0.45 ) }
    dend_29 { pt3dadd( 6.63714, 59.0533, 70.4065, 0.45 ) }
    dend_29 { pt3dadd( 6.05252, 66.1368, 78.2721, 0.45 ) }
    dend_29 { pt3dadd( 4.65703, 72.0779, 86.8989, 0.45 ) }
    dend_29 { pt3dadd( 2.07451, 78.3739, 94.9902, 0.45 ) }
    dend_29 { pt3dadd( -0.335115, 83.3131, 103.987, 0.45 ) }
    dend_29 { pt3dadd( -3.92192, 90.2572, 111.129, 0.45 ) }
    dend_29 { pt3dadd( -8.06103, 98.2777, 116.724, 0.45 ) }
    dend_29 { pt3dadd( -10.933, 105.594, 123.836, 0.45 ) }
    dend_29 { pt3dadd( -15.6109, 111.591, 131.162, 0.45 ) }
    dend_29 { pt3dadd( -19.4794, 117.524, 138.995, 0.45 ) }
    dend_29 { pt3dadd( -23.2727, 121.876, 147.802, 0.45 ) }
    dend_29 { pt3dadd( -26.5525, 125.107, 157.257, 0.45 ) }
    dend_29 { pt3dadd( -30.3956, 127.302, 166.788, 0.45 ) }
    dend_29 { pt3dadd( -36.0922, 130.155, 175.148, 0.45 ) }
    dend_29 { pt3dadd( -42.5607, 132.623, 183.054, 0.45 ) }
    dend_29 { pt3dadd( -49.426, 135.667, 190.409, 0.45 ) }
    dend_29 { pt3dadd( -55.1842, 139.735, 198.222, 0.45 ) }
    // Section: dend_24, id: dend_24, parent: soma_0 (entry count 65/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 8.97878, 4.26886, -0.65, 2.27 ) }
    dend_24 { pt3dadd( 8.97878, 4.26886, -0.65, 2.27 ) }
    dend_24 { pt3dadd( 11.0627, 5.02976, -0.65, 1.82 ) }
    dend_24 { pt3dadd( 12.3538, 5.50118, -0.65, 1.82 ) }
    // Section: dend_21, id: dend_21, parent: soma_0 (entry count 69/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( -2.83121, -8.9844, -6.2, 1.14 ) }
    dend_21 { pt3dadd( -2.83121, -8.9844, -6.2, 1.14 ) }
    dend_21 { pt3dadd( -3.60574, -11.7642, -6.61206, 1.14 ) }
    dend_21 { pt3dadd( -4.37407, -14.5217, -7.02082, 1.14 ) }
    dend_21 { pt3dadd( -4.93708, -16.5423, -7.32035, 1.36 ) }
    dend_21 { pt3dadd( -5.4919, -18.5335, -7.61553, 1.36 ) }
    dend_21 { pt3dadd( -6.32107, -21.5094, -8.05666, 1.59 ) }
    dend_21 { pt3dadd( -7.19123, -24.445, -8.51672, 1.59 ) }
    // Section: dend_14, id: dend_14, parent: soma_0 (entry count 77/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( -2.55121, -11.5367, 3.96, 2.5 ) }
    dend_14 { pt3dadd( -2.55121, -11.5367, 3.96, 2.5 ) }
    dend_14 { pt3dadd( -2.83533, -13.2486, 4.09535, 1.82 ) }
    dend_14 { pt3dadd( -3.30824, -16.098, 4.32064, 1.82 ) }
    dend_14 { pt3dadd( -3.69141, -18.4068, 4.50319, 1.82 ) }
    dend_14 { pt3dadd( -4.11027, -20.9306, 4.70273, 1.82 ) }
    dend_14 { pt3dadd( -4.49809, -23.2673, 4.88749, 2.05 ) }
    // Section: dend_7, id: dend_7, parent: soma_0 (entry count 84/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -6.77122, 4.3201, 8.7, 1.59 ) }
    dend_7 { pt3dadd( -6.77122, 4.3201, 8.7, 1.59 ) }
    dend_7 { pt3dadd( -7.95306, 5.71116, 8.83673, 1.36 ) }
    dend_7 { pt3dadd( -9.33907, 7.15005, 9.00278, 1.36 ) }
    dend_7 { pt3dadd( -10.7108, 8.3197, 9.19686, 1.36 ) }
    dend_7 { pt3dadd( -13.2548, 10.148, 9.62416, 1.59 ) }
    dend_7 { pt3dadd( -16.0948, 11.8695, 10.1741, 1.59 ) }
    dend_7 { pt3dadd( -18.481, 13.0411, 10.7366, 1.36 ) }
    dend_7 { pt3dadd( -20.751, 13.8642, 11.3968, 1.36 ) }
    dend_7 { pt3dadd( -23.6416, 14.4394, 12.4298, 1.36 ) }
    dend_7 { pt3dadd( -25.4124, 14.4884, 13.1888, 1.14 ) }
    dend_7 { pt3dadd( -27.1651, 14.2739, 14.1114, 1.14 ) }
    dend_7 { pt3dadd( -28.4194, 14.0746, 14.886, 1.14 ) }
    dend_7 { pt3dadd( -29.328, 14.0736, 15.5285, 1.14 ) }
    dend_7 { pt3dadd( -30.4018, 14.2047, 16.4217, 1.14 ) }
    dend_7 { pt3dadd( -31.1125, 14.4959, 17.0797, 1.14 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_7 { pt3dadd( -32.5482, 15.547, 18.4313, 1.14 ) }
    dend_7 { pt3dadd( -34.4876, 17.6367, 20.1752, 1.14 ) }
    dend_7 { pt3dadd( -36.2932, 20.0034, 21.6158, 1.14 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 3/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 1.32876, 10.4598, 0.58, 4.32 ) }
    dend_0 { pt3dadd( 1.32876, 10.4598, 0.58, 4.32 ) }
    dend_0 { pt3dadd( 1.85888, 12.2918, 1.07562, 2.5 ) }
    dend_0 { pt3dadd( 2.59167, 14.8241, 1.76073, 2.05 ) }
    dend_0 { pt3dadd( 3.1119, 16.6218, 2.2471, 2.5 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 8/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 1.43752, 10.454, 0.0, 1.15811 ) }
    axon_0 { pt3dadd( 3.46539, 25.3163, 0.0, 1.15811 ) }
    axon_0 { pt3dadd( 5.49327, 40.1786, 0.0, 1.15811 ) }
    // Section: dend_26, id: dend_26, parent: dend_24 (entry count 11/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 12.3538, 5.50118, -0.65, 1.82 ) }
    dend_26 { pt3dadd( 12.8689, 5.64186, -0.532936, 1.82 ) }
    dend_26 { pt3dadd( 16.0404, 6.5082, 0.187935, 1.59 ) }
    dend_26 { pt3dadd( 18.6454, 7.2198, 0.780046, 1.36 ) }
    dend_26 { pt3dadd( 20.6022, 7.75432, 1.22481, 1.59 ) }
    // Section: dend_25, id: dend_25, parent: dend_24 (entry count 16/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 12.3538, 5.50118, -0.65, 0.91 ) }
    dend_25 { pt3dadd( 13.2783, 5.72364, -1.93828, 0.91 ) }
    dend_25 { pt3dadd( 14.6763, 5.87168, -3.72457, 0.91 ) }
    dend_25 { pt3dadd( 15.772, 5.85716, -5.10526, 0.91 ) }
    dend_25 { pt3dadd( 16.7708, 5.81631, -6.32546, 0.91 ) }
    dend_25 { pt3dadd( 18.3529, 5.84291, -8.08473, 0.68 ) }
    dend_25 { pt3dadd( 20.3769, 6.02571, -10.0963, 0.68 ) }
    dend_25 { pt3dadd( 21.5428, 6.18189, -11.0935, 0.68 ) }
    dend_25 { pt3dadd( 23.2071, 6.42859, -12.2408, 0.68 ) }
    dend_25 { pt3dadd( 24.8542, 6.71747, -13.21, 0.68 ) }
    dend_25 { pt3dadd( 27.4015, 7.25729, -14.5707, 0.91 ) }
    dend_25 { pt3dadd( 29.5916, 7.78798, -15.6953, 0.68 ) }
    dend_25 { pt3dadd( 30.7622, 8.11989, -16.29, 0.68 ) }
    dend_25 { pt3dadd( 33.1742, 8.83392, -17.5398, 0.68 ) }
    dend_25 { pt3dadd( 35.1644, 9.36878, -18.5897, 0.68 ) }
    dend_25 { pt3dadd( 37.0267, 9.73629, -19.5856, 0.68 ) }
    dend_25 { pt3dadd( 38.5248, 9.95473, -20.4141, 0.68 ) }
    dend_25 { pt3dadd( 40.5166, 10.2133, -21.492, 0.68 ) }
    dend_25 { pt3dadd( 42.4207, 10.5005, -22.4653, 0.68 ) }
    dend_25 { pt3dadd( 44.6368, 10.8882, -23.5307, 0.45 ) }
    dend_25 { pt3dadd( 46.1351, 11.1202, -24.2475, 0.45 ) }
    dend_25 { pt3dadd( 47.0434, 11.2657, -24.692, 0.45 ) }
    dend_25 { pt3dadd( 48.5499, 11.5067, -25.4692, 0.45 ) }
    dend_25 { pt3dadd( 50.7791, 11.8826, -26.7254, 1.14 ) }
    dend_25 { pt3dadd( 52.8891, 12.2821, -28.0385, 0.45 ) }
    dend_25 { pt3dadd( 55.0354, 12.7652, -29.5356, 0.45 ) }
    dend_25 { pt3dadd( 56.4467, 13.1109, -30.6099, 0.45 ) }
    dend_25 { pt3dadd( 58.4275, 13.5792, -32.1569, 0.68 ) }
    dend_25 { pt3dadd( 60.2813, 14.0532, -33.6274, 0.45 ) }
    dend_25 { pt3dadd( 62.2726, 14.6402, -35.1495, 1.36 ) }
    dend_25 { pt3dadd( 64.2416, 15.2965, -36.5549, 0.45 ) }
    dend_25 { pt3dadd( 66.9015, 16.2774, -38.3083, 0.45 ) }
    dend_25 { pt3dadd( 68.4449, 16.8722, -39.2494, 0.68 ) }
    dend_25 { pt3dadd( 70.2612, 17.6306, -40.3027, 0.23 ) }
    dend_25 { pt3dadd( 72.4791, 18.5804, -41.5381, 0.23 ) }
    dend_25 { pt3dadd( 73.8223, 19.1511, -42.2506, 1.82 ) }
    dend_25 { pt3dadd( 75.6287, 19.89, -43.1552, 0.45 ) }
    dend_25 { pt3dadd( 76.8995, 20.3916, -43.7945, 0.45 ) }
    dend_25 { pt3dadd( 78.4412, 20.9442, -44.6142, 0.45 ) }
    dend_25 { pt3dadd( 80.0821, 21.4815, -45.5068, 0.45 ) }
    dend_25 { pt3dadd( 82.2195, 22.1355, -46.656, 0.45 ) }
    dend_25 { pt3dadd( 83.5889, 22.551, -47.3691, 0.68 ) }
    dend_25 { pt3dadd( 85.7398, 23.1657, -48.4566, 0.45 ) }
    dend_25 { pt3dadd( 88.2698, 23.8732, -49.671, 1.36 ) }
    dend_25 { pt3dadd( 90.187, 24.3978, -50.5153, 0.45 ) }
    dend_25 { pt3dadd( 92.1428, 24.979, -51.3282, 0.45 ) }
    dend_25 { pt3dadd( 94.4199, 25.7127, -52.2449, 0.23 ) }
    dend_25 { pt3dadd( 95.9547, 26.2385, -52.8548, 0.68 ) }
    dend_25 { pt3dadd( 98.4596, 27.1606, -53.7809, 0.23 ) }
    dend_25 { pt3dadd( 99.6158, 27.6231, -54.201, 1.36 ) }
    dend_25 { pt3dadd( 102.843, 28.9879, -55.3813, 0.23 ) }
    dend_25 { pt3dadd( 103.602, 29.3536, -55.6527, 0.68 ) }
    dend_25 { pt3dadd( 104.853, 30.0204, -56.0609, 0.23 ) }
    dend_25 { pt3dadd( 105.705, 30.5281, -56.3225, 0.68 ) }
    dend_25 { pt3dadd( 107.202, 31.4993, -56.7933, 0.23 ) }
    dend_25 { pt3dadd( 108.377, 32.2955, -57.1916, 1.14 ) }
    dend_25 { pt3dadd( 111.159, 34.0694, -58.1844, 0.23 ) }
    dend_25 { pt3dadd( 111.856, 34.4663, -58.4651, 1.14 ) }
    dend_25 { pt3dadd( 113.789, 35.5004, -59.3424, 0.23 ) }
    dend_25 { pt3dadd( 116.484, 36.7889, -60.6317, 0.23 ) }
    dend_25 { pt3dadd( 117.834, 37.3675, -61.3106, 0.68 ) }
    dend_25 { pt3dadd( 121.009, 38.6146, -62.9743, 0.23 ) }
    dend_25 { pt3dadd( 123.995, 39.6165, -64.5966, 0.23 ) }
    dend_25 { pt3dadd( 125.178, 39.9599, -65.2366, 1.14 ) }
    dend_25 { pt3dadd( 127.8, 40.5704, -66.6347, 0.45 ) }
    dend_25 { pt3dadd( 128.907, 40.7911, -67.2256, 0.45 ) }
    dend_25 { pt3dadd( 129.64, 40.9356, -67.6243, 0.68 ) }
    dend_25 { pt3dadd( 131.168, 41.2583, -68.5179, 0.23 ) }
    dend_25 { pt3dadd( 133.668, 41.8547, -70.1402, 0.23 ) }
    dend_25 { pt3dadd( 133.996, 41.945, -70.3991, 0.68 ) }
    dend_25 { pt3dadd( 135.611, 42.5078, -72.0322, 0.23 ) }
    dend_25 { pt3dadd( 136.633, 42.9131, -73.2722, 0.68 ) }
    dend_25 { pt3dadd( 137.655, 43.3519, -74.6762, 0.23 ) }
    dend_25 { pt3dadd( 139.027, 44.0447, -76.7775, 0.23 ) }
    dend_25 { pt3dadd( 140.334, 44.719, -78.9559, 0.68 ) }
    dend_25 { pt3dadd( 141.173, 45.1466, -80.382, 0.68 ) }
    dend_25 { pt3dadd( 142.178, 45.6355, -82.0715, 0.68 ) }
    dend_25 { pt3dadd( 143.738, 46.3713, -84.5387, 0.23 ) }
    dend_25 { pt3dadd( 145.038, 46.9541, -86.3902, 0.45 ) }
    dend_25 { pt3dadd( 146.649, 47.6259, -88.4212, 0.23 ) }
    dend_25 { pt3dadd( 147.799, 48.0632, -89.7065, 0.91 ) }
    dend_25 { pt3dadd( 149.507, 48.698, -91.5086, 0.23 ) }
    dend_25 { pt3dadd( 150.246, 48.9844, -92.2664, 0.45 ) }
    dend_25 { pt3dadd( 151.919, 49.6651, -94.0212, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_25 { pt3dadd( 152.257, 49.8172, -94.3925, 1.14 ) }
    dend_25 { pt3dadd( 153.744, 50.6509, -96.1997, 0.23 ) }
    dend_25 { pt3dadd( 154.853, 51.3899, -97.8753, 0.23 ) }
    dend_25 { pt3dadd( 155.702, 52.0302, -99.3408, 1.59 ) }
    dend_25 { pt3dadd( 156.953, 53.0371, -101.71, 0.23 ) }
    dend_25 { pt3dadd( 158.285, 54.1475, -104.35, 0.23 ) }
    dend_25 { pt3dadd( 159.286, 55.0556, -106.442, 1.36 ) }
    dend_25 { pt3dadd( 161.29, 57.1122, -110.894, 0.23 ) }
    dend_25 { pt3dadd( 162.405, 58.2868, -113.435, 0.23 ) }
    dend_25 { pt3dadd( 163.12, 59.0525, -115.114, 0.23 ) }
    dend_25 { pt3dadd( 163.395, 59.3544, -115.785, 0.68 ) }
    dend_25 { pt3dadd( 164.642, 60.6458, -118.706, 0.23 ) }
    dend_25 { pt3dadd( 165.63, 61.6353, -120.874, 0.23 ) }
    // Section: dend_23, id: dend_23, parent: dend_21 (entry count 13/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( -7.19123, -24.445, -8.51672, 0.68 ) }
    dend_23 { pt3dadd( -7.29466, -24.2902, -9.70852, 0.68 ) }
    dend_23 { pt3dadd( -7.35297, -24.2628, -10.6285, 0.68 ) }
    dend_23 { pt3dadd( -7.37974, -24.3144, -11.5775, 0.91 ) }
    dend_23 { pt3dadd( -7.34602, -24.4387, -12.4662, 0.91 ) }
    dend_23 { pt3dadd( -7.2483, -24.6473, -13.3224, 0.68 ) }
    dend_23 { pt3dadd( -7.10086, -24.934, -14.1669, 0.45 ) }
    dend_23 { pt3dadd( -6.92817, -25.3219, -14.8545, 0.45 ) }
    dend_23 { pt3dadd( -6.79955, -25.7333, -15.4398, 0.68 ) }
    dend_23 { pt3dadd( -6.68903, -26.2372, -16.0874, 0.68 ) }
    dend_23 { pt3dadd( -6.60498, -26.7619, -16.7256, 0.68 ) }
    dend_23 { pt3dadd( -6.55027, -27.2186, -17.3126, 0.68 ) }
    dend_23 { pt3dadd( -6.55563, -27.7442, -18.0248, 0.68 ) }
    dend_23 { pt3dadd( -6.63616, -28.3591, -18.8962, 0.68 ) }
    dend_23 { pt3dadd( -6.73011, -28.8197, -19.5179, 0.68 ) }
    dend_23 { pt3dadd( -6.86366, -29.4533, -20.2866, 0.68 ) }
    dend_23 { pt3dadd( -6.96441, -30.0957, -21.0139, 0.68 ) }
    dend_23 { pt3dadd( -7.01711, -30.837, -21.8173, 0.91 ) }
    dend_23 { pt3dadd( -6.99112, -31.5991, -22.6236, 0.68 ) }
    dend_23 { pt3dadd( -6.95157, -32.2001, -23.2502, 0.68 ) }
    dend_23 { pt3dadd( -6.90161, -33.1186, -24.2171, 0.68 ) }
    dend_23 { pt3dadd( -6.8684, -33.8869, -25.0683, 0.68 ) }
    dend_23 { pt3dadd( -6.83926, -34.5159, -25.7851, 0.68 ) }
    dend_23 { pt3dadd( -6.76857, -35.6298, -27.123, 0.45 ) }
    dend_23 { pt3dadd( -6.74053, -36.1829, -27.8236, 0.45 ) }
    dend_23 { pt3dadd( -6.7188, -36.8187, -28.6793, 0.45 ) }
    dend_23 { pt3dadd( -6.71426, -37.2291, -29.2611, 0.45 ) }
    dend_23 { pt3dadd( -6.7166, -37.6476, -29.8895, 2.05 ) }
    dend_23 { pt3dadd( -6.71434, -38.3164, -30.9078, 0.45 ) }
    dend_23 { pt3dadd( -6.72325, -38.9608, -31.91, 0.45 ) }
    dend_23 { pt3dadd( -6.72474, -39.4118, -32.6185, 0.91 ) }
    dend_23 { pt3dadd( -6.74134, -40.048, -33.6162, 0.45 ) }
    dend_23 { pt3dadd( -6.77925, -40.6648, -34.5603, 0.45 ) }
    dend_23 { pt3dadd( -6.8401, -41.3244, -35.5484, 1.82 ) }
    dend_23 { pt3dadd( -6.92678, -42.1163, -36.6925, 0.45 ) }
    dend_23 { pt3dadd( -6.96885, -42.5333, -37.2779, 0.45 ) }
    dend_23 { pt3dadd( -6.97758, -42.6291, -37.4089, 0.68 ) }
    dend_23 { pt3dadd( -7.0455, -43.4292, -38.4696, 0.45 ) }
    dend_23 { pt3dadd( -7.10614, -44.1063, -39.3906, 0.45 ) }
    dend_23 { pt3dadd( -7.14716, -44.7499, -40.3271, 0.68 ) }
    dend_23 { pt3dadd( -7.16157, -45.4289, -41.3526, 0.45 ) }
    dend_23 { pt3dadd( -7.16618, -45.966, -42.1974, 0.45 ) }
    dend_23 { pt3dadd( -7.15711, -46.4308, -42.9614, 2.05 ) }
    dend_23 { pt3dadd( -7.14699, -47.1235, -44.131, 0.45 ) }
    dend_23 { pt3dadd( -7.15556, -47.781, -45.2482, 0.45 ) }
    dend_23 { pt3dadd( -7.19086, -48.3693, -46.2221, 0.45 ) }
    dend_23 { pt3dadd( -7.26659, -49.0381, -47.2621, 0.45 ) }
    dend_23 { pt3dadd( -7.3244, -49.4779, -47.9154, 0.45 ) }
    dend_23 { pt3dadd( -7.37623, -49.8386, -48.4248, 1.14 ) }
    dend_23 { pt3dadd( -7.49212, -50.5254, -49.3032, 0.45 ) }
    dend_23 { pt3dadd( -7.65838, -51.2586, -50.1692, 0.45 ) }
    dend_23 { pt3dadd( -7.77727, -51.7542, -50.7268, 0.91 ) }
    dend_23 { pt3dadd( -7.89898, -52.2524, -51.2737, 0.45 ) }
    dend_23 { pt3dadd( -8.02788, -52.7605, -51.8239, 0.45 ) }
    dend_23 { pt3dadd( -8.11035, -53.1281, -52.2448, 0.91 ) }
    dend_23 { pt3dadd( -8.25335, -53.8075, -53.0338, 0.45 ) }
    dend_23 { pt3dadd( -8.36554, -54.422, -53.7565, 0.45 ) }
    dend_23 { pt3dadd( -8.43814, -54.9102, -54.3336, 0.45 ) }
    dend_23 { pt3dadd( -8.48508, -55.2742, -54.7663, 0.91 ) }
    dend_23 { pt3dadd( -8.5692, -56.185, -55.8645, 0.45 ) }
    dend_23 { pt3dadd( -8.58612, -56.7158, -56.5172, 0.45 ) }
    dend_23 { pt3dadd( -8.58671, -57.2581, -57.1773, 0.45 ) }
    dend_23 { pt3dadd( -8.58842, -57.756, -57.7753, 0.45 ) }
    dend_23 { pt3dadd( -8.58855, -58.4205, -58.5945, 0.45 ) }
    dend_23 { pt3dadd( -8.59348, -58.8735, -59.1662, 0.45 ) }
    dend_23 { pt3dadd( -8.63436, -59.554, -59.9835, 0.45 ) }
    dend_23 { pt3dadd( -8.68028, -59.9618, -60.4745, 0.45 ) }
    dend_23 { pt3dadd( -8.75827, -60.6308, -61.2567, 0.45 ) }
    dend_23 { pt3dadd( -8.80599, -61.0538, -61.7371, 0.45 ) }
    dend_23 { pt3dadd( -8.86935, -61.6979, -62.4742, 0.45 ) }
    dend_23 { pt3dadd( -8.91156, -62.2835, -63.202, 1.36 ) }
    dend_23 { pt3dadd( -8.94577, -62.9064, -64.0928, 1.36 ) }
    dend_23 { pt3dadd( -8.94183, -63.4414, -65.0108, 0.68 ) }
    dend_23 { pt3dadd( -8.92278, -63.8337, -65.8477, 0.68 ) }
    dend_23 { pt3dadd( -8.90046, -64.1287, -66.7217, 0.68 ) }
    dend_23 { pt3dadd( -8.87974, -64.3236, -67.8024, 0.68 ) }
    dend_23 { pt3dadd( -8.86138, -64.3751, -68.9287, 0.45 ) }
    dend_23 { pt3dadd( -8.86034, -64.3206, -69.9549, 0.45 ) }
    dend_23 { pt3dadd( -8.8812, -64.2161, -70.8163, 0.45 ) }
    dend_23 { pt3dadd( -8.93763, -64.0211, -72.0108, 0.45 ) }
    dend_23 { pt3dadd( -9.04263, -63.7695, -73.432, 0.45 ) }
    dend_23 { pt3dadd( -9.13482, -63.5822, -74.5344, 0.45 ) }
    dend_23 { pt3dadd( -9.19588, -63.475, -75.2848, 0.45 ) }
    dend_23 { pt3dadd( -9.24459, -63.4021, -76.187, 0.45 ) }
    dend_23 { pt3dadd( -9.26901, -63.4063, -77.031, 0.45 ) }
    dend_23 { pt3dadd( -9.25782, -63.5276, -78.006, 0.45 ) }
    dend_23 { pt3dadd( -9.18425, -63.8452, -79.3396, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_23 { pt3dadd( -9.12765, -64.0555, -79.9975, 0.23 ) }
    dend_23 { pt3dadd( -8.99009, -64.4772, -81.1867, 0.23 ) }
    dend_23 { pt3dadd( -8.889, -64.7718, -82.0062, 0.91 ) }
    dend_23 { pt3dadd( -8.77112, -65.1888, -83.4285, 0.45 ) }
    dend_23 { pt3dadd( -8.76089, -65.3186, -84.1562, 0.45 ) }
    dend_23 { pt3dadd( -8.82234, -65.3686, -85.5618, 0.45 ) }
    dend_23 { pt3dadd( -8.86725, -65.287, -86.2957, 0.45 ) }
    dend_23 { pt3dadd( -8.92331, -65.0639, -87.3243, 0.45 ) }
    dend_23 { pt3dadd( -8.95552, -64.4853, -89.3339, 0.23 ) }
    dend_23 { pt3dadd( -8.89737, -64.0354, -90.7936, 0.23 ) }
    dend_23 { pt3dadd( -8.6809, -63.6033, -92.287, 0.91 ) }
    dend_23 { pt3dadd( -8.27791, -63.2994, -93.6961, 0.23 ) }
    dend_23 { pt3dadd( -7.72117, -63.1848, -94.9588, 0.23 ) }
    dend_23 { pt3dadd( -7.14866, -63.2168, -95.9076, 0.68 ) }
    dend_23 { pt3dadd( -6.12443, -63.4762, -97.2406, 0.45 ) }
    dend_23 { pt3dadd( -5.03571, -63.8457, -98.5105, 0.45 ) }
    dend_23 { pt3dadd( -3.69415, -64.4127, -99.9446, 0.45 ) }
    dend_23 { pt3dadd( -2.492, -65.0189, -101.147, 0.45 ) }
    dend_23 { pt3dadd( -2.00355, -65.285, -101.605, 0.45 ) }
    dend_23 { pt3dadd( -1.22906, -65.7425, -102.305, 0.45 ) }
    // Section: dend_22, id: dend_22, parent: dend_21 (entry count 20/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( -7.19123, -24.445, -8.51672, 0.91 ) }
    dend_22 { pt3dadd( -7.40254, -25.0701, -9.31457, 0.91 ) }
    dend_22 { pt3dadd( -7.60545, -26.1465, -10.4013, 0.68 ) }
    dend_22 { pt3dadd( -7.71643, -27.0957, -11.1142, 0.68 ) }
    dend_22 { pt3dadd( -7.77257, -28.0401, -11.6312, 0.68 ) }
    dend_22 { pt3dadd( -7.73573, -29.2955, -12.0724, 0.68 ) }
    dend_22 { pt3dadd( -7.55452, -31.0096, -12.3278, 0.68 ) }
    dend_22 { pt3dadd( -7.41568, -32.3812, -12.3348, 0.68 ) }
    dend_22 { pt3dadd( -7.34248, -33.9233, -12.2599, 0.68 ) }
    dend_22 { pt3dadd( -7.35816, -34.8256, -12.2328, 1.14 ) }
    dend_22 { pt3dadd( -7.4703, -36.505, -12.2628, 1.14 ) }
    dend_22 { pt3dadd( -7.82661, -39.0627, -12.4935, 0.68 ) }
    dend_22 { pt3dadd( -8.27956, -41.0263, -12.8262, 0.91 ) }
    dend_22 { pt3dadd( -9.01974, -43.3237, -13.4859, 0.91 ) }
    dend_22 { pt3dadd( -9.8618, -45.5248, -14.3154, 0.91 ) }
    dend_22 { pt3dadd( -10.479, -46.8985, -14.9312, 0.91 ) }
    dend_22 { pt3dadd( -11.1916, -48.3025, -15.6792, 1.14 ) }
    dend_22 { pt3dadd( -12.2231, -50.1945, -16.872, 1.36 ) }
    dend_22 { pt3dadd( -13.3712, -52.2837, -18.2622, 1.36 ) }
    dend_22 { pt3dadd( -14.0887, -53.5133, -19.1359, 1.36 ) }
    dend_22 { pt3dadd( -15.3857, -55.5728, -20.6442, 1.36 ) }
    dend_22 { pt3dadd( -16.6829, -57.5589, -22.0594, 1.36 ) }
    dend_22 { pt3dadd( -17.4423, -58.7577, -22.8599, 1.14 ) }
    dend_22 { pt3dadd( -18.1224, -59.927, -23.5825, 0.68 ) }
    dend_22 { pt3dadd( -18.5968, -60.831, -24.0486, 0.68 ) }
    dend_22 { pt3dadd( -18.9313, -61.4682, -24.3201, 0.68 ) }
    dend_22 { pt3dadd( -19.6433, -62.7697, -24.6816, 0.68 ) }
    dend_22 { pt3dadd( -20.5694, -64.3022, -24.952, 0.68 ) }
    dend_22 { pt3dadd( -21.5377, -65.8183, -25.1972, 0.68 ) }
    dend_22 { pt3dadd( -21.9333, -66.4627, -25.3232, 0.68 ) }
    dend_22 { pt3dadd( -22.8889, -68.0226, -25.6715, 0.68 ) }
    dend_22 { pt3dadd( -24.1977, -70.0012, -26.1829, 0.91 ) }
    dend_22 { pt3dadd( -25.4219, -71.7119, -26.7148, 0.91 ) }
    dend_22 { pt3dadd( -26.1703, -72.7303, -27.0947, 0.68 ) }
    dend_22 { pt3dadd( -27.0926, -74.0586, -27.6647, 0.68 ) }
    dend_22 { pt3dadd( -27.9199, -75.4631, -28.2966, 0.68 ) }
    dend_22 { pt3dadd( -28.6459, -77.0093, -29.0527, 1.14 ) }
    dend_22 { pt3dadd( -28.9517, -77.7765, -29.4763, 0.45 ) }
    dend_22 { pt3dadd( -29.2874, -78.7228, -29.9754, 0.45 ) }
    dend_22 { pt3dadd( -29.6134, -79.7044, -30.4604, 0.45 ) }
    dend_22 { pt3dadd( -30.0221, -80.9234, -31.0225, 0.91 ) }
    dend_22 { pt3dadd( -30.3718, -82.0926, -31.5391, 0.45 ) }
    dend_22 { pt3dadd( -30.8131, -83.6179, -32.1596, 0.45 ) }
    dend_22 { pt3dadd( -31.4946, -85.8499, -32.9382, 0.68 ) }
    dend_22 { pt3dadd( -32.0396, -87.6864, -33.4669, 0.45 ) }
    dend_22 { pt3dadd( -32.3078, -88.643, -33.7, 1.59 ) }
    dend_22 { pt3dadd( -32.6584, -90.022, -33.9939, 1.59 ) }
    dend_22 { pt3dadd( -33.2314, -92.521, -34.4353, 0.23 ) }
    dend_22 { pt3dadd( -33.608, -94.3337, -34.7267, 1.36 ) }
    dend_22 { pt3dadd( -34.3951, -98.2519, -35.3222, 0.23 ) }
    dend_22 { pt3dadd( -34.7559, -100.071, -35.5732, 1.36 ) }
    dend_22 { pt3dadd( -35.0509, -101.577, -35.7825, 0.23 ) }
    dend_22 { pt3dadd( -35.3504, -103.037, -35.9968, 1.36 ) }
    dend_22 { pt3dadd( -35.7665, -104.857, -36.3279, 0.23 ) }
    dend_22 { pt3dadd( -36.0129, -105.734, -36.5337, 0.68 ) }
    dend_22 { pt3dadd( -36.7516, -107.811, -37.1241, 0.23 ) }
    dend_22 { pt3dadd( -37.2755, -109.062, -37.5235, 0.23 ) }
    dend_22 { pt3dadd( -38.0666, -110.695, -38.0702, 0.91 ) }
    dend_22 { pt3dadd( -38.7862, -112.026, -38.5405, 0.23 ) }
    dend_22 { pt3dadd( -39.5228, -113.317, -39.0023, 0.68 ) }
    dend_22 { pt3dadd( -40.7709, -115.474, -39.7577, 0.23 ) }
    dend_22 { pt3dadd( -41.3409, -116.461, -40.0967, 0.23 ) }
    dend_22 { pt3dadd( -41.8719, -117.426, -40.4198, 1.59 ) }
    dend_22 { pt3dadd( -42.6783, -119.003, -40.9589, 0.23 ) }
    dend_22 { pt3dadd( -43.9605, -121.654, -41.9293, 0.23 ) }
    dend_22 { pt3dadd( -44.3642, -122.522, -42.2717, 1.82 ) }
    dend_22 { pt3dadd( -44.9549, -123.781, -42.8056, 1.82 ) }
    dend_22 { pt3dadd( -46.0799, -126.13, -43.8448, 0.23 ) }
    dend_22 { pt3dadd( -46.7225, -127.427, -44.4341, 0.23 ) }
    dend_22 { pt3dadd( -47.4166, -128.714, -45.022, 0.23 ) }
    dend_22 { pt3dadd( -48.2337, -130.051, -45.6286, 0.68 ) }
    dend_22 { pt3dadd( -49.2146, -131.462, -46.2968, 0.23 ) }
    dend_22 { pt3dadd( -50.0725, -132.54, -46.8104, 0.23 ) }
    dend_22 { pt3dadd( -50.5591, -133.082, -47.0611, 0.68 ) }
    dend_22 { pt3dadd( -52.0, -134.527, -47.772, 0.23 ) }
    dend_22 { pt3dadd( -53.1564, -135.581, -48.3607, 1.36 ) }
    dend_22 { pt3dadd( -54.7066, -136.89, -49.1627, 0.23 ) }
    dend_22 { pt3dadd( -55.0529, -137.165, -49.345, 0.23 ) }
    dend_22 { pt3dadd( -56.0639, -137.938, -49.8909, 0.91 ) }
    dend_22 { pt3dadd( -57.6852, -139.121, -50.83, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_22 { pt3dadd( -58.8219, -139.897, -51.555, 0.91 ) }
    // Section: dend_18, id: dend_18, parent: dend_14 (entry count 1/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -4.49809, -23.2673, 4.88749, 1.36 ) }
    dend_18 { pt3dadd( -3.38438, -25.882, 3.99517, 1.36 ) }
    dend_18 { pt3dadd( -2.28333, -28.8189, 2.99865, 1.14 ) }
    dend_18 { pt3dadd( -1.39929, -31.1769, 2.19855, 1.14 ) }
    dend_18 { pt3dadd( -0.672762, -33.1148, 1.54099, 1.14 ) }
    dend_18 { pt3dadd( 0.359242, -35.8675, 0.606963, 1.14 ) }
    dend_18 { pt3dadd( 1.39342, -38.6261, -0.329037, 1.36 ) }
    dend_18 { pt3dadd( 2.3608, -40.9848, -1.03047, 1.59 ) }
    // Section: dend_15, id: dend_15, parent: dend_14 (entry count 9/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -4.49809, -23.2673, 4.88749, 0.68 ) }
    dend_15 { pt3dadd( -4.06684, -23.9249, 5.06809, 0.68 ) }
    dend_15 { pt3dadd( -3.58093, -24.7401, 5.30612, 0.68 ) }
    dend_15 { pt3dadd( -3.12757, -25.6537, 5.63982, 0.68 ) }
    dend_15 { pt3dadd( -2.75117, -26.4909, 6.01616, 0.68 ) }
    dend_15 { pt3dadd( -2.43834, -27.2005, 6.4004, 0.91 ) }
    dend_15 { pt3dadd( -2.1713, -27.8706, 6.83042, 0.91 ) }
    dend_15 { pt3dadd( -2.00241, -28.3555, 7.21008, 0.91 ) }
    dend_15 { pt3dadd( -1.89007, -29.0731, 8.01802, 0.91 ) }
    dend_15 { pt3dadd( -1.92732, -29.4881, 8.65054, 0.68 ) }
    dend_15 { pt3dadd( -1.99238, -29.8057, 9.17169, 0.68 ) }
    dend_15 { pt3dadd( -2.11828, -30.3407, 9.96063, 0.68 ) }
    dend_15 { pt3dadd( -2.22585, -30.8925, 10.6294, 0.68 ) }
    dend_15 { pt3dadd( -2.30427, -31.4946, 11.1926, 0.68 ) }
    dend_15 { pt3dadd( -2.37259, -32.1551, 11.6761, 0.68 ) }
    dend_15 { pt3dadd( -2.50648, -33.2122, 12.3393, 0.68 ) }
    dend_15 { pt3dadd( -2.6296, -34.0832, 12.8214, 0.68 ) }
    dend_15 { pt3dadd( -2.68526, -34.5512, 13.0409, 0.68 ) }
    dend_15 { pt3dadd( -2.73592, -35.0591, 13.2341, 0.68 ) }
    dend_15 { pt3dadd( -2.77522, -35.7802, 13.4686, 0.68 ) }
    dend_15 { pt3dadd( -2.84941, -36.5949, 13.7359, 0.68 ) }
    // Section: dend_13, id: dend_13, parent: dend_7 (entry count 30/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -36.2932, 20.0034, 21.6158, 0.68 ) }
    dend_13 { pt3dadd( -35.5278, 20.9532, 23.1944, 0.68 ) }
    dend_13 { pt3dadd( -35.0019, 21.874, 24.5593, 0.68 ) }
    dend_13 { pt3dadd( -34.7896, 22.3038, 25.1062, 0.68 ) }
    dend_13 { pt3dadd( -34.2584, 23.3538, 26.3645, 0.45 ) }
    dend_13 { pt3dadd( -33.8768, 24.1081, 27.2682, 0.45 ) }
    dend_13 { pt3dadd( -33.5836, 24.6877, 27.9628, 0.45 ) }
    dend_13 { pt3dadd( -33.0357, 25.65, 28.974, 0.45 ) }
    dend_13 { pt3dadd( -32.5582, 26.3138, 29.7438, 0.45 ) }
    dend_13 { pt3dadd( -32.0507, 27.2413, 30.7971, 0.45 ) }
    dend_13 { pt3dadd( -27.7143, 31.3557, 36.6633, 0.45 ) }
    dend_13 { pt3dadd( -23.0172, 33.3692, 43.2326, 0.45 ) }
    dend_13 { pt3dadd( -18.945, 37.4943, 49.2787, 0.45 ) }
    dend_13 { pt3dadd( -13.6006, 41.7418, 54.1316, 0.45 ) }
    dend_13 { pt3dadd( -9.24874, 46.4152, 59.5744, 0.45 ) }
    dend_13 { pt3dadd( -4.78681, 51.2316, 64.8051, 0.45 ) }
    dend_13 { pt3dadd( 0.454681, 54.8175, 70.2404, 0.45 ) }
    dend_13 { pt3dadd( 4.78293, 59.5032, 75.6921, 0.45 ) }
    dend_13 { pt3dadd( 10.0697, 64.7244, 79.613, 0.45 ) }
    dend_13 { pt3dadd( 15.072, 69.6316, 84.2359, 0.45 ) }
    dend_13 { pt3dadd( 20.1805, 73.7573, 89.4319, 0.45 ) }
    dend_13 { pt3dadd( 26.0324, 78.0648, 93.5951, 0.45 ) }
    dend_13 { pt3dadd( 32.7295, 80.4762, 97.9137, 0.45 ) }
    dend_13 { pt3dadd( 39.4787, 81.7268, 102.587, 0.45 ) }
    dend_13 { pt3dadd( 46.5446, 82.8603, 106.792, 0.45 ) }
    dend_13 { pt3dadd( 53.5922, 82.8694, 111.149, 0.45 ) }
    dend_13 { pt3dadd( 60.8493, 81.9113, 115.013, 0.45 ) }
    dend_13 { pt3dadd( 67.6898, 80.8821, 119.558, 0.45 ) }
    dend_13 { pt3dadd( 75.0609, 79.7269, 123.14, 0.45 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 59/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -36.2932, 20.0034, 21.6158, 0.68 ) }
    dend_8 { pt3dadd( -38.3352, 20.3196, 21.9583, 0.68 ) }
    dend_8 { pt3dadd( -40.0575, 20.6314, 22.2091, 0.68 ) }
    dend_8 { pt3dadd( -41.709, 20.9141, 22.4494, 0.68 ) }
    dend_8 { pt3dadd( -43.2976, 21.1683, 22.6507, 0.68 ) }
    dend_8 { pt3dadd( -44.4371, 21.3506, 22.7951, 0.68 ) }
    dend_8 { pt3dadd( -46.576, 21.6927, 23.0661, 0.68 ) }
    dend_8 { pt3dadd( -48.0243, 21.9184, 23.1776, 0.68 ) }
    dend_8 { pt3dadd( -49.5046, 22.1725, 23.2469, 0.68 ) }
    dend_8 { pt3dadd( -51.2853, 22.5467, 23.3166, 0.68 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 69/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 3.1119, 16.6218, 2.2471, 1.59 ) }
    dend_2 { pt3dadd( 2.30607, 19.3513, 0.95862, 1.59 ) }
    dend_2 { pt3dadd( 1.3291, 22.2568, -0.587162, 1.59 ) }
    dend_2 { pt3dadd( 0.515938, 24.675, -1.87376, 1.59 ) }
    dend_2 { pt3dadd( -0.137704, 26.6189, -2.90797, 1.59 ) }
    dend_2 { pt3dadd( -0.809902, 28.618, -3.97153, 1.59 ) }
    dend_2 { pt3dadd( -1.34907, 30.2215, -4.82462, 1.59 ) }
    dend_2 { pt3dadd( -1.37806, 30.2791, -4.86817, 1.59 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 77/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 3.1119, 16.6218, 2.2471, 1.14 ) }
    dend_1 { pt3dadd( 3.91188, 17.8516, 2.09333, 1.14 ) }
    dend_1 { pt3dadd( 5.00666, 19.7371, 1.86149, 1.14 ) }
    dend_1 { pt3dadd( 5.78914, 20.9923, 1.69742, 1.14 ) }
    dend_1 { pt3dadd( 7.10004, 22.9059, 1.42824, 0.91 ) }
    dend_1 { pt3dadd( 8.12291, 24.3167, 1.2263, 0.91 ) }
    dend_1 { pt3dadd( 9.07052, 25.5974, 1.04687, 0.91 ) }
    dend_1 { pt3dadd( 10.2475, 27.3077, 0.781385, 0.91 ) }
    dend_1 { pt3dadd( 11.7602, 29.6768, 0.393593, 0.91 ) }
    dend_1 { pt3dadd( 12.7051, 31.1596, 0.158973, 0.91 ) }
    dend_1 { pt3dadd( 13.2952, 32.0615, 0.0188499, 0.68 ) }
    dend_1 { pt3dadd( 14.037, 33.2252, -0.182099, 0.68 ) }
    dend_1 { pt3dadd( 15.0932, 34.9928, -0.578177, 0.91 ) }
    dend_1 { pt3dadd( 15.9532, 36.4848, -0.976556, 0.91 ) }
    dend_1 { pt3dadd( 16.803, 38.0635, -1.38926, 0.91 ) }
    dend_1 { pt3dadd( 17.5235, 39.336, -1.68414, 0.91 ) }
    dend_1 { pt3dadd( 18.1977, 40.371, -1.86185, 0.68 ) }
    dend_1 { pt3dadd( 19.2579, 41.7062, -1.91117, 0.68 ) }
    dend_1 { pt3dadd( 20.0088, 42.5044, -1.76712, 0.68 ) }
    dend_1 { pt3dadd( 21.0104, 43.5461, -1.41429, 0.68 ) }
    dend_1 { pt3dadd( 21.9408, 44.6113, -0.965557, 0.68 ) }
    dend_1 { pt3dadd( 22.7359, 45.6623, -0.562899, 0.68 ) }
    dend_1 { pt3dadd( 23.7551, 47.1397, -0.119884, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_1 { pt3dadd( 24.9659, 49.0235, 0.219366, 0.68 ) }
    dend_1 { pt3dadd( 25.7931, 50.4127, 0.253686, 0.68 ) }
    dend_1 { pt3dadd( 26.7273, 52.0861, 0.0294067, 0.68 ) }
    dend_1 { pt3dadd( 27.7702, 54.01, -0.503336, 0.68 ) }
    dend_1 { pt3dadd( 28.5286, 55.4166, -1.06672, 0.68 ) }
    dend_1 { pt3dadd( 29.2568, 56.7661, -1.76061, 0.91 ) }
    dend_1 { pt3dadd( 29.8889, 57.9567, -2.48863, 0.68 ) }
    dend_1 { pt3dadd( 30.4202, 59.005, -3.19679, 0.68 ) }
    dend_1 { pt3dadd( 30.9757, 60.1665, -4.04306, 0.68 ) }
    dend_1 { pt3dadd( 31.7235, 61.8676, -5.25931, 0.68 ) }
    dend_1 { pt3dadd( 32.2713, 63.3748, -6.24802, 0.68 ) }
    dend_1 { pt3dadd( 32.659, 64.5406, -6.92513, 0.68 ) }
    dend_1 { pt3dadd( 33.1038, 65.8937, -7.61126, 0.68 ) }
    dend_1 { pt3dadd( 33.4769, 66.9745, -8.11721, 0.68 ) }
    dend_1 { pt3dadd( 33.8854, 68.1108, -8.63436, 1.14 ) }
    dend_1 { pt3dadd( 34.4924, 69.6993, -9.341, 0.68 ) }
    dend_1 { pt3dadd( 35.2326, 71.4815, -10.0289, 0.68 ) }
    dend_1 { pt3dadd( 35.8329, 72.7885, -10.4744, 0.68 ) }
    dend_1 { pt3dadd( 36.3897, 73.9138, -10.8299, 0.68 ) }
    dend_1 { pt3dadd( 36.7482, 74.615, -11.0653, 1.36 ) }
    dend_1 { pt3dadd( 36.9635, 75.0299, -11.2363, 2.05 ) }
    dend_1 { pt3dadd( 37.9042, 76.8816, -12.0682, 0.45 ) }
    dend_1 { pt3dadd( 38.6318, 78.4693, -12.8515, 0.45 ) }
    dend_1 { pt3dadd( 38.9402, 79.2195, -13.2394, 0.91 ) }
    dend_1 { pt3dadd( 39.4605, 80.5575, -13.9127, 0.68 ) }
    dend_1 { pt3dadd( 39.979, 81.9308, -14.6043, 0.68 ) }
    dend_1 { pt3dadd( 40.3151, 82.7872, -15.054, 0.45 ) }
    dend_1 { pt3dadd( 40.7403, 83.8137, -15.613, 0.45 ) }
    dend_1 { pt3dadd( 41.265, 85.0916, -16.2954, 0.45 ) }
    dend_1 { pt3dadd( 41.7172, 86.1597, -16.8389, 0.91 ) }
    dend_1 { pt3dadd( 42.5737, 88.0579, -17.7051, 0.23 ) }
    dend_1 { pt3dadd( 43.2212, 89.3758, -18.2605, 0.23 ) }
    dend_1 { pt3dadd( 43.6379, 90.1611, -18.6051, 1.59 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 33/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 5.49327, 40.1786, 0.0, 0.68 ) }
    axon_1 { pt3dadd( 7.52114, 55.0409, 0.0, 0.68 ) }
    axon_1 { pt3dadd( 9.54902, 69.9032, 0.0, 0.68 ) }
    // Section: dend_28, id: dend_28, parent: dend_26 (entry count 36/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 20.6022, 7.75432, 1.22481, 0.68 ) }
    dend_28 { pt3dadd( 21.4872, 7.88787, 1.85464, 0.68 ) }
    dend_28 { pt3dadd( 22.3888, 8.18706, 2.48767, 0.68 ) }
    dend_28 { pt3dadd( 22.9667, 8.52623, 2.914, 0.68 ) }
    dend_28 { pt3dadd( 23.5809, 8.98832, 3.39496, 0.68 ) }
    dend_28 { pt3dadd( 24.3057, 9.56919, 3.97935, 0.68 ) }
    dend_28 { pt3dadd( 24.953, 10.0836, 4.51671, 0.68 ) }
    dend_28 { pt3dadd( 25.877, 10.7869, 5.29907, 0.68 ) }
    dend_28 { pt3dadd( 26.9364, 11.5707, 6.21492, 0.68 ) }
    dend_28 { pt3dadd( 27.6746, 12.0727, 6.81437, 0.68 ) }
    dend_28 { pt3dadd( 28.3826, 12.4906, 7.32834, 0.68 ) }
    dend_28 { pt3dadd( 29.2462, 12.9012, 7.87726, 0.68 ) }
    dend_28 { pt3dadd( 30.2145, 13.2664, 8.43488, 0.68 ) }
    dend_28 { pt3dadd( 31.2335, 13.5981, 8.98222, 0.68 ) }
    dend_28 { pt3dadd( 32.669, 14.0564, 9.70012, 0.68 ) }
    dend_28 { pt3dadd( 33.7793, 14.4413, 10.2242, 0.68 ) }
    dend_28 { pt3dadd( 35.0207, 14.8957, 10.7806, 0.68 ) }
    dend_28 { pt3dadd( 35.6853, 15.1343, 11.065, 0.68 ) }
    dend_28 { pt3dadd( 36.519, 15.4243, 11.4243, 0.68 ) }
    dend_28 { pt3dadd( 37.1616, 15.6328, 11.7253, 0.68 ) }
    dend_28 { pt3dadd( 37.679, 15.7835, 12.0078, 0.68 ) }
    dend_28 { pt3dadd( 38.6151, 15.9954, 12.5196, 0.68 ) }
    dend_28 { pt3dadd( 39.4941, 16.1333, 12.9049, 0.68 ) }
    dend_28 { pt3dadd( 40.8743, 16.3686, 13.3659, 0.68 ) }
    dend_28 { pt3dadd( 41.8469, 16.5612, 13.6351, 0.68 ) }
    dend_28 { pt3dadd( 43.1462, 16.8978, 13.9667, 0.68 ) }
    dend_28 { pt3dadd( 44.1334, 17.2602, 14.225, 0.68 ) }
    dend_28 { pt3dadd( 45.5549, 17.9058, 14.6107, 0.68 ) }
    dend_28 { pt3dadd( 47.3025, 18.7544, 15.0744, 0.68 ) }
    dend_28 { pt3dadd( 48.4552, 19.3056, 15.358, 0.68 ) }
    dend_28 { pt3dadd( 49.5175, 19.7944, 15.618, 0.45 ) }
    dend_28 { pt3dadd( 50.8815, 20.4257, 16.0082, 0.45 ) }
    dend_28 { pt3dadd( 52.0718, 21.0013, 16.4543, 0.68 ) }
    dend_28 { pt3dadd( 52.7882, 21.3342, 16.7953, 0.68 ) }
    dend_28 { pt3dadd( 54.032, 21.7869, 17.4288, 0.45 ) }
    dend_28 { pt3dadd( 54.9281, 22.0783, 17.8783, 0.45 ) }
    dend_28 { pt3dadd( 55.9325, 22.4354, 18.396, 0.45 ) }
    dend_28 { pt3dadd( 57.0769, 22.9112, 19.0301, 0.45 ) }
    dend_28 { pt3dadd( 57.8917, 23.3412, 19.5214, 0.45 ) }
    dend_28 { pt3dadd( 58.9347, 24.0439, 20.2282, 0.45 ) }
    dend_28 { pt3dadd( 60.3886, 25.353, 21.3224, 0.45 ) }
    dend_28 { pt3dadd( 61.2736, 26.4937, 22.1037, 0.45 ) }
    dend_28 { pt3dadd( 61.8502, 27.5388, 22.7146, 0.23 ) }
    dend_28 { pt3dadd( 62.3189, 28.6997, 23.3046, 0.23 ) }
    dend_28 { pt3dadd( 62.6406, 29.8388, 23.8264, 0.45 ) }
    dend_28 { pt3dadd( 63.0883, 32.0844, 24.7703, 0.45 ) }
    dend_28 { pt3dadd( 63.3856, 34.3038, 25.6768, 0.23 ) }
    dend_28 { pt3dadd( 63.5236, 35.5452, 26.1727, 0.23 ) }
    dend_28 { pt3dadd( 63.5931, 36.6587, 26.5911, 0.23 ) }
    dend_28 { pt3dadd( 63.615, 37.5991, 26.9286, 0.23 ) }
    dend_28 { pt3dadd( 63.7015, 39.0933, 27.4485, 0.23 ) }
    dend_28 { pt3dadd( 69.9757, 43.299, 30.0782, 0.23 ) }
    dend_28 { pt3dadd( 76.5894, 47.0003, 32.592, 0.23 ) }
    dend_28 { pt3dadd( 82.4574, 51.7705, 35.2451, 0.23 ) }
    dend_28 { pt3dadd( 88.8564, 56.2553, 36.971, 0.23 ) }
    dend_28 { pt3dadd( 95.1447, 61.1951, 37.4528, 0.23 ) }
    dend_28 { pt3dadd( 100.914, 66.6339, 38.7227, 0.23 ) }
    dend_28 { pt3dadd( 106.191, 72.7044, 38.9554, 0.23 ) }
    dend_28 { pt3dadd( 111.516, 78.5318, 40.5043, 0.23 ) }
    dend_28 { pt3dadd( 116.472, 84.3962, 42.9214, 0.23 ) }
    dend_28 { pt3dadd( 121.183, 90.1776, 45.9495, 0.23 ) }
    // Section: dend_27, id: dend_27, parent: dend_26 (entry count 97/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( 20.6022, 7.75432, 1.22481, 0.68 ) }
    dend_27 { pt3dadd( 21.4505, 6.80059, 0.679985, 0.68 ) }
    dend_27 { pt3dadd( 22.6282, 5.51163, 0.157345, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_27 { pt3dadd( 23.5381, 4.56615, -0.188404, 0.68 ) }
    dend_27 { pt3dadd( 24.601, 3.45327, -0.61943, 0.68 ) }
    dend_27 { pt3dadd( 25.0657, 2.99236, -0.804721, 0.45 ) }
    dend_27 { pt3dadd( 25.8037, 2.29425, -1.10196, 0.45 ) }
    dend_27 { pt3dadd( 26.8757, 1.27029, -1.52054, 0.45 ) }
    dend_27 { pt3dadd( 27.9391, 0.270445, -1.94131, 0.68 ) }
    dend_27 { pt3dadd( 29.2553, -1.01649, -2.5445, 0.68 ) }
    dend_27 { pt3dadd( 30.6394, -2.39432, -3.26142, 0.68 ) }
    dend_27 { pt3dadd( 32.5565, -4.29069, -4.30497, 0.68 ) }
    dend_27 { pt3dadd( 33.9222, -5.65324, -5.08153, 0.68 ) }
    dend_27 { pt3dadd( 34.7297, -6.50294, -5.51719, 0.45 ) }
    dend_27 { pt3dadd( 35.7258, -7.52651, -5.94507, 0.45 ) }
    dend_27 { pt3dadd( 36.125, -7.93647, -6.06801, 0.45 ) }
    dend_27 { pt3dadd( 37.063, -8.90173, -6.23212, 0.45 ) }
    dend_27 { pt3dadd( 38.0473, -9.88526, -6.26451, 0.68 ) }
    dend_27 { pt3dadd( 39.3399, -11.2205, -6.31508, 0.68 ) }
    dend_27 { pt3dadd( 40.6587, -12.6727, -6.53705, 0.45 ) }
    dend_27 { pt3dadd( 41.4241, -13.5438, -6.80014, 0.45 ) }
    dend_27 { pt3dadd( 42.2791, -14.5302, -7.28847, 0.68 ) }
    dend_27 { pt3dadd( 42.959, -15.264, -7.85625, 0.68 ) }
    dend_27 { pt3dadd( 44.3534, -16.7853, -9.30405, 0.23 ) }
    dend_27 { pt3dadd( 45.614, -18.1669, -10.9182, 0.23 ) }
    dend_27 { pt3dadd( 46.504, -19.1259, -12.254, 0.23 ) }
    dend_27 { pt3dadd( 47.4479, -20.0592, -13.7753, 0.23 ) }
    dend_27 { pt3dadd( 48.9442, -21.4304, -16.3476, 0.23 ) }
    dend_27 { pt3dadd( 53.5293, -27.6879, -21.7216, 0.23 ) }
    dend_27 { pt3dadd( 57.2796, -34.0203, -27.6535, 0.23 ) }
    dend_27 { pt3dadd( 61.5788, -40.1065, -33.4494, 0.23 ) }
    dend_27 { pt3dadd( 66.7426, -45.5169, -39.1675, 0.23 ) }
    dend_27 { pt3dadd( 72.9432, -50.1143, -44.4995, 0.23 ) }
    dend_27 { pt3dadd( 79.3883, -55.403, -48.8064, 0.23 ) }
    dend_27 { pt3dadd( 85.1419, -61.808, -52.6026, 0.23 ) }
    dend_27 { pt3dadd( 91.5841, -68.1637, -55.0838, 0.23 ) }
    dend_27 { pt3dadd( 97.0323, -75.5585, -57.1223, 0.23 ) }
    dend_27 { pt3dadd( 101.39, -83.8244, -58.3315, 0.23 ) }
    // Section: dend_20, id: dend_20, parent: dend_18 (entry count 35/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 2.3608, -40.9848, -1.03047, 1.36 ) }
    dend_20 { pt3dadd( 0.452038, -41.9928, -1.10629, 1.36 ) }
    dend_20 { pt3dadd( -1.46398, -43.0402, -1.24804, 1.14 ) }
    dend_20 { pt3dadd( -3.10967, -43.9433, -1.42976, 1.14 ) }
    dend_20 { pt3dadd( -5.40781, -45.2708, -1.78271, 0.91 ) }
    dend_20 { pt3dadd( -6.3181, -45.8482, -1.97214, 0.91 ) }
    dend_20 { pt3dadd( -7.51081, -46.6965, -2.29592, 0.91 ) }
    dend_20 { pt3dadd( -8.78878, -47.7548, -2.81494, 0.91 ) }
    dend_20 { pt3dadd( -9.80601, -48.9291, -3.46138, 0.91 ) }
    dend_20 { pt3dadd( -10.5646, -50.0362, -4.08974, 0.91 ) }
    dend_20 { pt3dadd( -11.3517, -51.3693, -4.82011, 0.91 ) }
    dend_20 { pt3dadd( -12.1318, -52.7046, -5.49085, 0.91 ) }
    dend_20 { pt3dadd( -12.9554, -54.0392, -6.10739, 0.91 ) }
    dend_20 { pt3dadd( -14.2322, -56.0085, -6.92438, 0.91 ) }
    dend_20 { pt3dadd( -15.8472, -58.2667, -7.75627, 0.91 ) }
    dend_20 { pt3dadd( -17.0857, -59.7929, -8.25588, 1.14 ) }
    dend_20 { pt3dadd( -19.1549, -62.0307, -8.8673, 1.36 ) }
    dend_20 { pt3dadd( -20.8677, -63.692, -9.24586, 1.14 ) }
    dend_20 { pt3dadd( -22.7707, -65.3904, -9.56942, 1.14 ) }
    dend_20 { pt3dadd( -24.7155, -67.0007, -9.82136, 1.36 ) }
    dend_20 { pt3dadd( -25.7914, -67.8668, -9.95424, 1.14 ) }
    dend_20 { pt3dadd( -27.5487, -69.2626, -10.1739, 0.91 ) }
    dend_20 { pt3dadd( -28.728, -70.2176, -10.2902, 0.91 ) }
    dend_20 { pt3dadd( -29.9909, -71.3558, -10.3595, 0.91 ) }
    dend_20 { pt3dadd( -31.0125, -72.476, -10.3614, 0.91 ) }
    dend_20 { pt3dadd( -31.9848, -73.8672, -10.3013, 0.68 ) }
    dend_20 { pt3dadd( -33.2007, -76.0195, -10.2059, 0.91 ) }
    dend_20 { pt3dadd( -33.9123, -77.4984, -10.14, 1.14 ) }
    dend_20 { pt3dadd( -34.7611, -79.4599, -9.99205, 1.14 ) }
    dend_20 { pt3dadd( -35.5843, -81.6071, -9.74343, 0.68 ) }
    dend_20 { pt3dadd( -36.1892, -83.3399, -9.51669, 0.68 ) }
    dend_20 { pt3dadd( -36.8697, -85.4133, -9.20716, 1.14 ) }
    dend_20 { pt3dadd( -37.2929, -86.6879, -9.01001, 0.68 ) }
    dend_20 { pt3dadd( -37.9452, -88.5723, -8.75077, 0.68 ) }
    dend_20 { pt3dadd( -38.8281, -91.0097, -8.4679, 0.68 ) }
    dend_20 { pt3dadd( -39.9465, -93.9922, -8.18942, 0.68 ) }
    dend_20 { pt3dadd( -40.6339, -95.8846, -8.07142, 1.36 ) }
    dend_20 { pt3dadd( -41.3591, -97.9192, -7.9986, 1.36 ) }
    dend_20 { pt3dadd( -42.221, -100.304, -8.01981, 1.14 ) }
    dend_20 { pt3dadd( -42.9171, -102.035, -8.10366, 0.91 ) }
    dend_20 { pt3dadd( -43.6439, -103.661, -8.23871, 0.91 ) }
    dend_20 { pt3dadd( -44.575, -105.59, -8.46193, 0.91 ) }
    dend_20 { pt3dadd( -45.2071, -106.814, -8.6481, 1.59 ) }
    dend_20 { pt3dadd( -46.4262, -109.078, -9.0303, 0.91 ) }
    dend_20 { pt3dadd( -47.8392, -111.635, -9.44333, 1.14 ) }
    dend_20 { pt3dadd( -48.8443, -113.462, -9.69899, 1.14 ) }
    dend_20 { pt3dadd( -50.1199, -115.841, -9.96346, 1.82 ) }
    dend_20 { pt3dadd( -51.7086, -118.89, -10.1989, 1.36 ) }
    dend_20 { pt3dadd( -52.9994, -121.473, -10.3625, 1.36 ) }
    dend_20 { pt3dadd( -53.7808, -123.152, -10.4588, 1.82 ) }
    dend_20 { pt3dadd( -54.4625, -124.864, -10.5208, 0.91 ) }
    dend_20 { pt3dadd( -55.0624, -126.587, -10.4858, 0.45 ) }
    dend_20 { pt3dadd( -55.5181, -128.269, -10.3416, 0.45 ) }
    dend_20 { pt3dadd( -55.7045, -129.372, -10.1851, 0.45 ) }
    dend_20 { pt3dadd( -55.8914, -131.111, -9.94975, 0.68 ) }
    dend_20 { pt3dadd( -56.0077, -132.608, -9.80198, 0.45 ) }
    dend_20 { pt3dadd( -56.1032, -133.999, -9.73155, 0.45 ) }
    dend_20 { pt3dadd( -56.182, -134.842, -9.73688, 0.45 ) }
    dend_20 { pt3dadd( -56.5205, -137.321, -9.80538, 0.45 ) }
    dend_20 { pt3dadd( -56.8374, -138.961, -9.80146, 0.23 ) }
    dend_20 { pt3dadd( -57.0025, -139.592, -9.76586, 0.23 ) }
    dend_20 { pt3dadd( -57.4124, -140.952, -9.61381, 0.23 ) }
    dend_20 { pt3dadd( -57.7092, -141.943, -9.43563, 0.45 ) }
    dend_20 { pt3dadd( -58.1363, -143.411, -9.01022, 0.23 ) }
    dend_20 { pt3dadd( -58.3326, -144.193, -8.68336, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_20 { pt3dadd( -58.7128, -145.886, -7.794, 0.23 ) }
    dend_20 { pt3dadd( -58.9139, -146.936, -7.17516, 0.23 ) }
    dend_20 { pt3dadd( -58.9982, -147.457, -6.84367, 0.45 ) }
    dend_20 { pt3dadd( -59.1889, -148.931, -5.87019, 0.23 ) }
    dend_20 { pt3dadd( -59.2917, -149.748, -5.36331, 0.45 ) }
    dend_20 { pt3dadd( -59.5991, -151.499, -4.444, 0.23 ) }
    dend_20 { pt3dadd( -59.9081, -152.795, -3.88974, 0.23 ) }
    dend_20 { pt3dadd( -60.2074, -153.922, -3.44329, 0.45 ) }
    dend_20 { pt3dadd( -60.577, -155.163, -2.98059, 0.23 ) }
    dend_20 { pt3dadd( -61.1916, -156.986, -2.37588, 0.91 ) }
    dend_20 { pt3dadd( -62.167, -159.66, -1.63596, 0.23 ) }
    dend_20 { pt3dadd( -62.809, -161.363, -1.31297, 0.91 ) }
    // Section: dend_19, id: dend_19, parent: dend_18 (entry count 12/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 2.3608, -40.9848, -1.03047, 1.36 ) }
    dend_19 { pt3dadd( 2.73775, -41.3077, -0.616025, 1.36 ) }
    dend_19 { pt3dadd( 3.50452, -41.8553, 0.127717, 0.68 ) }
    dend_19 { pt3dadd( 4.17832, -42.33, 0.712955, 0.68 ) }
    dend_19 { pt3dadd( 5.08263, -42.9483, 1.37257, 0.68 ) }
    dend_19 { pt3dadd( 5.78201, -43.4386, 1.77967, 0.68 ) }
    dend_19 { pt3dadd( 6.43217, -43.8938, 2.09054, 0.45 ) }
    dend_19 { pt3dadd( 7.0251, -44.2374, 2.29531, 0.45 ) }
    dend_19 { pt3dadd( 7.62637, -44.5217, 2.39544, 0.68 ) }
    dend_19 { pt3dadd( 8.38617, -44.8886, 2.44317, 0.68 ) }
    dend_19 { pt3dadd( 9.2652, -45.3385, 2.47164, 0.68 ) }
    dend_19 { pt3dadd( 10.0057, -45.761, 2.51791, 0.68 ) }
    dend_19 { pt3dadd( 11.0623, -46.3705, 2.64146, 0.68 ) }
    dend_19 { pt3dadd( 12.152, -47.0228, 2.85887, 0.68 ) }
    dend_19 { pt3dadd( 13.3861, -47.8244, 3.21082, 0.68 ) }
    dend_19 { pt3dadd( 14.1641, -48.4024, 3.48285, 0.68 ) }
    dend_19 { pt3dadd( 14.8236, -48.9639, 3.73344, 0.68 ) }
    dend_19 { pt3dadd( 15.51, -49.6515, 3.96738, 0.68 ) }
    dend_19 { pt3dadd( 16.2942, -50.5963, 4.22552, 0.68 ) }
    dend_19 { pt3dadd( 16.8011, -51.2971, 4.41905, 0.68 ) }
    dend_19 { pt3dadd( 17.5213, -52.3844, 4.72214, 0.68 ) }
    dend_19 { pt3dadd( 18.1467, -53.4125, 5.01656, 0.68 ) }
    dend_19 { pt3dadd( 18.7364, -54.3994, 5.29625, 0.68 ) }
    dend_19 { pt3dadd( 19.2932, -55.291, 5.57761, 0.68 ) }
    dend_19 { pt3dadd( 19.8815, -56.0717, 5.86531, 0.68 ) }
    dend_19 { pt3dadd( 20.6476, -56.9657, 6.1992, 0.68 ) }
    dend_19 { pt3dadd( 21.1757, -57.5251, 6.42411, 0.68 ) }
    dend_19 { pt3dadd( 22.6127, -58.807, 6.9988, 0.23 ) }
    dend_19 { pt3dadd( 23.2176, -59.2668, 7.22692, 0.23 ) }
    dend_19 { pt3dadd( 24.3176, -59.994, 7.60378, 0.23 ) }
    dend_19 { pt3dadd( 25.5544, -60.753, 7.96047, 0.23 ) }
    dend_19 { pt3dadd( 26.6892, -61.394, 8.25609, 0.23 ) }
    dend_19 { pt3dadd( 27.7036, -61.9346, 8.50898, 0.23 ) }
    dend_19 { pt3dadd( 28.7351, -62.4233, 8.79392, 0.23 ) }
    dend_19 { pt3dadd( 30.002, -63.0321, 9.16236, 0.23 ) }
    dend_19 { pt3dadd( 34.3841, -67.9277, 10.5251, 0.23 ) }
    dend_19 { pt3dadd( 38.5069, -72.95, 12.2179, 0.23 ) }
    dend_19 { pt3dadd( 42.4712, -78.2273, 13.5, 0.23 ) }
    dend_19 { pt3dadd( 45.4767, -83.8641, 15.6416, 0.23 ) }
    dend_19 { pt3dadd( 48.5198, -89.7745, 16.8007, 0.23 ) }
    dend_19 { pt3dadd( 52.0113, -95.498, 17.4969, 0.23 ) }
    dend_19 { pt3dadd( 55.3869, -101.123, 19.0304, 0.23 ) }
    dend_19 { pt3dadd( 58.0923, -107.266, 19.8074, 0.23 ) }
    dend_19 { pt3dadd( 61.5338, -113.037, 19.257, 0.23 ) }
    dend_19 { pt3dadd( 64.8462, -118.908, 19.0156, 0.23 ) }
    dend_19 { pt3dadd( 67.8621, -124.91, 18.3559, 0.23 ) }
    dend_19 { pt3dadd( 70.2298, -130.965, 16.539, 0.23 ) }
    dend_19 { pt3dadd( 71.9909, -137.269, 14.8499, 0.23 ) }
    dend_19 { pt3dadd( 75.0753, -143.041, 13.2416, 0.23 ) }
    dend_19 { pt3dadd( 78.6158, -148.697, 12.321, 0.23 ) }
    dend_19 { pt3dadd( 83.6038, -153.144, 11.9255, 0.23 ) }
    // Section: dend_17, id: dend_17, parent: dend_15 (entry count 63/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -2.84941, -36.5949, 13.7359, 0.23 ) }
    dend_17 { pt3dadd( -3.06009, -36.8399, 14.6714, 0.23 ) }
    dend_17 { pt3dadd( -3.4081, -37.406, 16.1454, 0.23 ) }
    dend_17 { pt3dadd( -3.62365, -38.0801, 17.3541, 0.23 ) }
    dend_17 { pt3dadd( -3.70282, -38.8188, 18.1826, 0.23 ) }
    dend_17 { pt3dadd( -3.71761, -39.3291, 18.6258, 0.23 ) }
    dend_17 { pt3dadd( -3.75662, -40.0085, 19.114, 0.23 ) }
    dend_17 { pt3dadd( -3.76274, -40.5226, 19.4254, 0.23 ) }
    dend_17 { pt3dadd( -3.75244, -41.7459, 19.9722, 0.23 ) }
    dend_17 { pt3dadd( -3.69716, -43.5291, 20.594, 0.23 ) }
    dend_17 { pt3dadd( -3.66404, -44.3845, 20.854, 0.23 ) }
    dend_17 { pt3dadd( -3.59319, -46.223, 21.3785, 0.23 ) }
    dend_17 { pt3dadd( -4.31513, -52.293, 27.8406, 0.23 ) }
    dend_17 { pt3dadd( -5.5759, -56.4919, 35.5217, 0.23 ) }
    dend_17 { pt3dadd( -5.53501, -60.6048, 43.3469, 0.23 ) }
    dend_17 { pt3dadd( -6.39136, -63.9218, 51.4808, 0.23 ) }
    dend_17 { pt3dadd( -7.81191, -68.4542, 58.951, 0.23 ) }
    dend_17 { pt3dadd( -9.44646, -73.7584, 65.8743, 0.23 ) }
    dend_17 { pt3dadd( -12.1342, -79.5209, 72.0869, 0.23 ) }
    dend_17 { pt3dadd( -13.0545, -84.5121, 79.3532, 0.23 ) }
    dend_17 { pt3dadd( -13.3066, -90.3119, 86.0801, 0.23 ) }
    dend_17 { pt3dadd( -13.6002, -97.2666, 91.6666, 0.23 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 85/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -2.84941, -36.5949, 13.7359, 0.23 ) }
    dend_16 { pt3dadd( -2.54753, -38.1866, 14.7434, 0.23 ) }
    dend_16 { pt3dadd( -2.53488, -39.1261, 15.3405, 0.23 ) }
    dend_16 { pt3dadd( -2.54016, -40.0301, 15.9694, 0.68 ) }
    dend_16 { pt3dadd( -2.4911, -40.9708, 16.6247, 0.68 ) }
    dend_16 { pt3dadd( -2.44673, -41.9918, 17.3236, 0.45 ) }
    dend_16 { pt3dadd( -2.44842, -43.1049, 18.054, 0.45 ) }
    dend_16 { pt3dadd( -2.49871, -44.3219, 18.8261, 0.45 ) }
    dend_16 { pt3dadd( -2.57224, -45.517, 19.4747, 0.45 ) }
    dend_16 { pt3dadd( -2.66795, -47.1091, 20.1293, 0.45 ) }
    dend_16 { pt3dadd( -2.64698, -47.9221, 20.3126, 0.45 ) }
    dend_16 { pt3dadd( -2.42695, -49.1388, 20.3267, 0.45 ) }
    dend_16 { pt3dadd( -2.16414, -50.0812, 20.1109, 0.45 ) }
    dend_16 { pt3dadd( -1.61819, -51.7179, 19.5231, 0.45 ) }
    dend_16 { pt3dadd( -1.05079, -53.2849, 18.7464, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_16 { pt3dadd( -0.433535, -54.7384, 17.83, 0.23 ) }
    dend_16 { pt3dadd( -0.0873848, -55.3882, 17.3625, 0.23 ) }
    dend_16 { pt3dadd( 0.710988, -56.6028, 16.3581, 0.23 ) }
    dend_16 { pt3dadd( 3.04341, -67.5656, 17.5367, 0.23 ) }
    dend_16 { pt3dadd( 5.42252, -78.0853, 20.7308, 0.23 ) }
    dend_16 { pt3dadd( 9.3191, -88.595, 21.6254, 0.23 ) }
    dend_16 { pt3dadd( 14.5493, -98.5143, 21.8355, 0.23 ) }
    dend_16 { pt3dadd( 17.5635, -109.304, 20.6839, 0.23 ) }
    dend_16 { pt3dadd( 23.3968, -118.863, 20.4959, 0.23 ) }
    dend_16 { pt3dadd( 29.223, -128.385, 21.3706, 0.23 ) }
    dend_16 { pt3dadd( 35.2822, -137.7, 20.0507, 0.23 ) }
    dend_16 { pt3dadd( 43.5977, -145.04, 19.2745, 0.23 ) }
    dend_16 { pt3dadd( 52.1561, -152.124, 19.2584, 0.23 ) }
    dend_16 { pt3dadd( 60.2073, -159.793, 18.7962, 0.23 ) }
    dend_16 { pt3dadd( 68.1826, -167.317, 16.9152, 0.23 ) }
    dend_16 { pt3dadd( 76.5983, -174.579, 16.9849, 0.23 ) }
    dend_16 { pt3dadd( 86.0433, -180.355, 16.6645, 0.23 ) }
    // Section: dend_12, id: dend_12, parent: dend_8 (entry count 17/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -51.2853, 22.5467, 23.3166, 0.68 ) }
    dend_12 { pt3dadd( -51.7925, 22.9771, 24.0705, 0.68 ) }
    dend_12 { pt3dadd( -52.3915, 23.5304, 24.9028, 0.45 ) }
    dend_12 { pt3dadd( -53.0273, 24.0753, 25.6671, 0.45 ) }
    dend_12 { pt3dadd( -53.5509, 24.5037, 26.2096, 0.45 ) }
    dend_12 { pt3dadd( -54.3908, 25.1909, 27.08, 0.45 ) }
    dend_12 { pt3dadd( -55.1065, 25.7765, 27.8216, 0.45 ) }
    dend_12 { pt3dadd( -55.5069, 26.1577, 28.237, 0.45 ) }
    dend_12 { pt3dadd( -56.1156, 26.7784, 28.8289, 0.45 ) }
    dend_12 { pt3dadd( -56.6982, 27.3214, 29.2818, 0.45 ) }
    dend_12 { pt3dadd( -60.2262, 30.4225, 34.7785, 0.45 ) }
    dend_12 { pt3dadd( -64.4007, 32.734, 40.1813, 0.45 ) }
    dend_12 { pt3dadd( -68.4155, 34.7937, 45.7985, 0.45 ) }
    dend_12 { pt3dadd( -71.7177, 37.1399, 51.7713, 0.45 ) }
    dend_12 { pt3dadd( -74.8123, 38.4142, 58.1441, 0.45 ) }
    dend_12 { pt3dadd( -78.5786, 38.5183, 64.2542, 0.45 ) }
    dend_12 { pt3dadd( -83.231, 37.9251, 69.678, 0.45 ) }
    dend_12 { pt3dadd( -87.9898, 37.3084, 75.0056, 0.45 ) }
    dend_12 { pt3dadd( -92.499, 35.9889, 80.4201, 0.45 ) }
    dend_12 { pt3dadd( -96.9501, 36.1663, 86.0465, 0.45 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 37/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -51.2853, 22.5467, 23.3166, 0.68 ) }
    dend_9 { pt3dadd( -51.9075, 23.4154, 22.6326, 0.68 ) }
    dend_9 { pt3dadd( -52.7517, 24.7294, 21.654, 0.68 ) }
    dend_9 { pt3dadd( -53.562, 26.0167, 20.8166, 0.68 ) }
    dend_9 { pt3dadd( -53.9827, 26.648, 20.4226, 0.68 ) }
    dend_9 { pt3dadd( -54.6724, 27.626, 19.8648, 0.68 ) }
    dend_9 { pt3dadd( -55.4199, 28.6764, 19.372, 0.68 ) }
    dend_9 { pt3dadd( -56.3949, 30.0636, 18.869, 0.68 ) }
    dend_9 { pt3dadd( -57.7129, 31.8996, 18.3031, 0.68 ) }
    dend_9 { pt3dadd( -58.927, 33.5526, 17.835, 0.68 ) }
    dend_9 { pt3dadd( -60.4013, 35.4553, 17.305, 0.68 ) }
    dend_9 { pt3dadd( -62.4078, 37.8756, 16.6277, 0.68 ) }
    dend_9 { pt3dadd( -63.6491, 39.225, 16.1982, 0.68 ) }
    dend_9 { pt3dadd( -64.3454, 39.8736, 15.9215, 0.68 ) }
    dend_9 { pt3dadd( -65.0036, 40.4209, 15.6357, 0.68 ) }
    dend_9 { pt3dadd( -66.0119, 41.1776, 15.1973, 0.68 ) }
    dend_9 { pt3dadd( -66.8744, 41.7084, 14.8415, 0.68 ) }
    dend_9 { pt3dadd( -68.0553, 42.3421, 14.3567, 0.68 ) }
    dend_9 { pt3dadd( -69.6511, 43.1997, 13.707, 0.68 ) }
    dend_9 { pt3dadd( -71.7551, 44.4447, 12.837, 0.68 ) }
    dend_9 { pt3dadd( -72.8952, 45.2099, 12.3326, 0.68 ) }
    dend_9 { pt3dadd( -74.8865, 46.7582, 11.3165, 0.68 ) }
    dend_9 { pt3dadd( -75.7395, 47.5252, 10.7818, 0.68 ) }
    dend_9 { pt3dadd( -76.6394, 48.4965, 10.0786, 0.68 ) }
    dend_9 { pt3dadd( -77.2946, 49.2831, 9.47103, 0.68 ) }
    dend_9 { pt3dadd( -78.0042, 50.1221, 8.73447, 0.68 ) }
    dend_9 { pt3dadd( -78.8876, 51.1368, 7.81037, 0.91 ) }
    dend_9 { pt3dadd( -79.7006, 52.0644, 7.01125, 0.91 ) }
    dend_9 { pt3dadd( -81.4454, 53.8969, 5.62578, 0.91 ) }
    dend_9 { pt3dadd( -82.7505, 55.1043, 4.77401, 0.91 ) }
    dend_9 { pt3dadd( -83.9824, 56.0722, 4.08889, 0.68 ) }
    dend_9 { pt3dadd( -85.3522, 56.9985, 3.44867, 0.68 ) }
    dend_9 { pt3dadd( -86.8627, 57.9473, 2.84931, 0.68 ) }
    dend_9 { pt3dadd( -87.5935, 58.4117, 2.61098, 0.68 ) }
    dend_9 { pt3dadd( -89.0518, 59.4037, 2.23613, 0.91 ) }
    dend_9 { pt3dadd( -90.6956, 60.6834, 1.94174, 0.68 ) }
    dend_9 { pt3dadd( -92.2261, 61.9899, 1.78153, 0.68 ) }
    dend_9 { pt3dadd( -93.8305, 63.3971, 1.7391, 1.14 ) }
    dend_9 { pt3dadd( -95.4127, 64.9062, 1.8266, 0.68 ) }
    dend_9 { pt3dadd( -96.4165, 65.9849, 1.96625, 0.68 ) }
    dend_9 { pt3dadd( -97.5449, 67.351, 2.23199, 1.14 ) }
    dend_9 { pt3dadd( -98.2437, 68.2634, 2.41714, 0.91 ) }
    dend_9 { pt3dadd( -99.076, 69.3507, 2.57339, 0.68 ) }
    dend_9 { pt3dadd( -100.654, 71.2575, 2.64625, 0.68 ) }
    dend_9 { pt3dadd( -101.395, 72.0964, 2.55866, 0.45 ) }
    dend_9 { pt3dadd( -102.273, 73.1059, 2.3338, 0.45 ) }
    dend_9 { pt3dadd( -103.501, 74.5546, 1.84662, 1.36 ) }
    dend_9 { pt3dadd( -104.577, 75.7954, 1.2712, 0.68 ) }
    dend_9 { pt3dadd( -105.762, 77.1905, 0.522176, 0.91 ) }
    dend_9 { pt3dadd( -106.477, 78.048, 0.0450292, 0.68 ) }
    dend_9 { pt3dadd( -107.203, 78.9446, -0.403587, 0.68 ) }
    dend_9 { pt3dadd( -108.116, 80.1516, -0.92783, 0.91 ) }
    dend_9 { pt3dadd( -108.96, 81.3211, -1.37008, 0.68 ) }
    dend_9 { pt3dadd( -110.608, 83.7414, -2.16499, 0.68 ) }
    dend_9 { pt3dadd( -111.375, 84.9251, -2.51297, 0.68 ) }
    dend_9 { pt3dadd( -112.869, 87.3143, -3.10522, 0.68 ) }
    dend_9 { pt3dadd( -113.321, 88.0788, -3.25224, 0.68 ) }
    dend_9 { pt3dadd( -114.199, 89.7099, -3.46947, 1.59 ) }
    dend_9 { pt3dadd( -114.99, 91.3885, -3.57432, 0.45 ) }
    dend_9 { pt3dadd( -115.689, 93.0366, -3.5704, 0.91 ) }
    dend_9 { pt3dadd( -116.151, 94.3271, -3.47271, 0.45 ) }
    dend_9 { pt3dadd( -116.541, 95.704, -3.24795, 0.45 ) }
    dend_9 { pt3dadd( -116.739, 96.4, -3.09878, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_9()
}

proc basic_shape_9() {
    dend_9 { pt3dadd( -117.259, 98.3052, -2.62244, 0.91 ) }
    dend_9 { pt3dadd( -117.625, 99.4809, -2.33572, 0.45 ) }
    dend_9 { pt3dadd( -118.303, 101.271, -1.96247, 0.45 ) }
    dend_9 { pt3dadd( -119.12, 103.034, -1.71728, 1.36 ) }
    dend_9 { pt3dadd( -119.787, 104.356, -1.60338, 0.45 ) }
    dend_9 { pt3dadd( -120.52, 105.765, -1.52465, 0.45 ) }
    dend_9 { pt3dadd( -121.321, 107.189, -1.47725, 0.45 ) }
    dend_9 { pt3dadd( -122.324, 108.883, -1.39469, 0.91 ) }
    dend_9 { pt3dadd( -123.417, 110.571, -1.22628, 0.45 ) }
    dend_9 { pt3dadd( -123.866, 111.251, -1.10235, 0.45 ) }
    dend_9 { pt3dadd( -124.623, 112.453, -0.78989, 0.45 ) }
    dend_9 { pt3dadd( -125.421, 113.818, -0.352163, 1.14 ) }
    dend_9 { pt3dadd( -126.314, 115.534, 0.302018, 0.68 ) }
    dend_9 { pt3dadd( -127.089, 117.074, 0.959316, 0.68 ) }
    dend_9 { pt3dadd( -128.011, 118.768, 1.74727, 0.68 ) }
    dend_9 { pt3dadd( -128.537, 119.615, 2.14454, 0.91 ) }
    dend_9 { pt3dadd( -129.7, 121.373, 2.96475, 0.91 ) }
    dend_9 { pt3dadd( -130.393, 122.395, 3.3962, 0.45 ) }
    dend_9 { pt3dadd( -131.227, 123.59, 3.78632, 0.45 ) }
    dend_9 { pt3dadd( -132.09, 124.811, 4.04975, 0.91 ) }
    dend_9 { pt3dadd( -132.777, 125.748, 4.11962, 0.45 ) }
    dend_9 { pt3dadd( -133.995, 127.391, 4.02848, 0.45 ) }
    dend_9 { pt3dadd( -134.915, 128.643, 3.78617, 1.36 ) }
    dend_9 { pt3dadd( -135.755, 129.82, 3.45273, 0.68 ) }
    dend_9 { pt3dadd( -136.698, 131.195, 2.97393, 0.68 ) }
    dend_9 { pt3dadd( -137.726, 132.83, 2.32114, 0.68 ) }
    dend_9 { pt3dadd( -138.58, 134.244, 1.64682, 0.45 ) }
    dend_9 { pt3dadd( -139.929, 136.448, 0.362473, 0.45 ) }
    dend_9 { pt3dadd( -140.782, 137.796, -0.534318, 1.14 ) }
    dend_9 { pt3dadd( -141.534, 139.005, -1.40629, 0.45 ) }
    dend_9 { pt3dadd( -142.18, 140.182, -2.2967, 0.45 ) }
    dend_9 { pt3dadd( -142.638, 141.307, -3.17175, 0.45 ) }
    dend_9 { pt3dadd( -142.828, 142.223, -3.93408, 0.45 ) }
    dend_9 { pt3dadd( -142.859, 143.113, -4.71664, 0.45 ) }
    dend_9 { pt3dadd( -142.852, 144.082, -5.5458, 0.45 ) }
    dend_9 { pt3dadd( -142.843, 145.24, -6.43932, 1.36 ) }
    dend_9 { pt3dadd( -142.862, 146.837, -7.54005, 1.14 ) }
    dend_9 { pt3dadd( -142.825, 148.077, -8.25693, 0.45 ) }
    dend_9 { pt3dadd( -142.73, 149.391, -8.93279, 0.45 ) }
    dend_9 { pt3dadd( -142.592, 150.715, -9.58246, 0.23 ) }
    dend_9 { pt3dadd( -142.402, 152.383, -10.3613, 0.23 ) }
    dend_9 { pt3dadd( -142.36, 152.752, -10.5212, 0.23 ) }
    dend_9 { pt3dadd( -142.185, 154.041, -10.9812, 1.36 ) }
    dend_9 { pt3dadd( -141.863, 155.596, -11.4056, 0.45 ) }
    dend_9 { pt3dadd( -141.618, 156.395, -11.5834, 0.45 ) }
    dend_9 { pt3dadd( -141.219, 157.445, -11.796, 0.91 ) }
    dend_9 { pt3dadd( -140.67, 158.799, -12.0713, 0.23 ) }
    dend_9 { pt3dadd( -140.181, 160.026, -12.337, 0.23 ) }
    dend_9 { pt3dadd( -139.646, 161.372, -12.6322, 0.68 ) }
    dend_9 { pt3dadd( -139.04, 162.917, -12.9306, 0.45 ) }
    dend_9 { pt3dadd( -138.422, 164.6, -13.2667, 1.14 ) }
    dend_9 { pt3dadd( -138.115, 165.582, -13.481, 0.23 ) }
    dend_9 { pt3dadd( -137.807, 166.995, -13.7999, 0.23 ) }
    dend_9 { pt3dadd( -137.68, 168.042, -14.0384, 0.68 ) }
    dend_9 { pt3dadd( -137.668, 170.209, -14.5088, 0.23 ) }
    dend_9 { pt3dadd( -137.77, 171.379, -14.7312, 0.23 ) }
    dend_9 { pt3dadd( -138.062, 172.974, -15.0004, 1.14 ) }
    dend_9 { pt3dadd( -138.731, 175.426, -15.3672, 0.23 ) }
    dend_9 { pt3dadd( -139.012, 176.193, -15.4683, 0.91 ) }
    dend_9 { pt3dadd( -139.832, 177.954, -15.7042, 0.23 ) }
    dend_9 { pt3dadd( -140.326, 178.82, -15.8117, 0.91 ) }
    dend_9 { pt3dadd( -141.68, 180.924, -16.0486, 0.23 ) }
    dend_9 { pt3dadd( -142.51, 182.127, -16.1999, 1.14 ) }
    dend_9 { pt3dadd( -143.373, 183.312, -16.3802, 0.45 ) }
    dend_9 { pt3dadd( -144.262, 184.473, -16.6047, 0.45 ) }
    dend_9 { pt3dadd( -144.868, 185.219, -16.7884, 0.91 ) }
    dend_9 { pt3dadd( -146.352, 186.994, -17.2931, 0.45 ) }
    dend_9 { pt3dadd( -147.344, 188.176, -17.6764, 0.45 ) }
    dend_9 { pt3dadd( -148.026, 189.033, -17.9983, 1.14 ) }
    dend_9 { pt3dadd( -149.219, 190.579, -18.6272, 0.23 ) }
    dend_9 { pt3dadd( -150.352, 192.095, -19.3053, 0.23 ) }
    dend_9 { pt3dadd( -150.91, 192.821, -19.6972, 0.91 ) }
    dend_9 { pt3dadd( -151.698, 193.767, -20.3608, 0.91 ) }
    dend_9 { pt3dadd( -152.484, 194.58, -21.067, 0.23 ) }
    dend_9 { pt3dadd( -152.951, 194.99, -21.5935, 0.91 ) }
    dend_9 { pt3dadd( -153.648, 195.482, -22.5852, 0.23 ) }
    dend_9 { pt3dadd( -154.218, 195.793, -23.5368, 0.23 ) }
    dend_9 { pt3dadd( -154.852, 196.088, -24.7065, 0.23 ) }
    dend_9 { pt3dadd( -155.426, 196.306, -25.8087, 0.91 ) }
    dend_9 { pt3dadd( -156.602, 196.732, -28.0714, 0.23 ) }
    dend_9 { pt3dadd( -157.061, 196.925, -28.941, 0.68 ) }
    dend_9 { pt3dadd( -157.806, 197.327, -30.3716, 0.23 ) }
    dend_9 { pt3dadd( -158.555, 197.85, -31.8323, 0.23 ) }
    dend_9 { pt3dadd( -159.139, 198.303, -32.9842, 0.23 ) }
    dend_9 { pt3dadd( -159.601, 198.704, -33.9266, 1.59 ) }
    dend_9 { pt3dadd( -160.493, 199.555, -35.5462, 0.23 ) }
    dend_9 { pt3dadd( -161.116, 200.183, -36.6651, 0.23 ) }
    dend_9 { pt3dadd( -161.497, 200.581, -37.3185, 1.59 ) }
    // Section: dend_4, id: dend_4, parent: dend_2 (entry count 88/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -1.37806, 30.2791, -4.86817, 1.82 ) }
    dend_4 { pt3dadd( -1.75726, 31.5812, -5.34425, 1.82 ) }
    dend_4 { pt3dadd( -2.44991, 33.9597, -6.21387, 1.36 ) }
    dend_4 { pt3dadd( -2.86727, 35.3928, -6.73786, 1.36 ) }
    dend_4 { pt3dadd( -3.40894, 37.2528, -7.41792, 1.36 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 93/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -1.37806, 30.2791, -4.86817, 1.14 ) }
    dend_3 { pt3dadd( -1.75513, 31.5768, -6.39818, 1.14 ) }
    dend_3 { pt3dadd( -2.22482, 33.1559, -8.10965, 1.14 ) }
    dend_3 { pt3dadd( -2.54025, 34.3045, -9.36602, 1.14 ) }
    dend_3 { pt3dadd( -2.86295, 35.9248, -11.2341, 0.91 ) }
    dend_3 { pt3dadd( -2.9988, 37.3524, -12.9474, 0.91 ) }
    dend_3 { pt3dadd( -3.0126, 38.6864, -14.6148, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_10()
}

proc basic_shape_10() {
    dend_3 { pt3dadd( -2.89643, 39.7732, -15.9377, 0.68 ) }
    dend_3 { pt3dadd( -2.74393, 40.4053, -16.7475, 0.68 ) }
    dend_3 { pt3dadd( -2.22433, 41.64, -18.5617, 0.68 ) }
    dend_3 { pt3dadd( -1.76476, 42.4026, -19.8857, 0.68 ) }
    dend_3 { pt3dadd( -1.32331, 43.0328, -20.9604, 0.68 ) }
    dend_3 { pt3dadd( -0.590113, 44.1733, -22.6625, 0.68 ) }
    dend_3 { pt3dadd( -0.0400734, 45.2555, -24.078, 0.68 ) }
    dend_3 { pt3dadd( 0.295472, 46.182, -25.1863, 0.68 ) }
    dend_3 { pt3dadd( 0.517538, 47.1876, -26.3123, 0.68 ) }
    dend_3 { pt3dadd( 0.752993, 49.0764, -28.3655, 0.68 ) }
    dend_3 { pt3dadd( 0.896345, 50.4682, -29.8186, 0.68 ) }
    dend_3 { pt3dadd( 0.972439, 51.878, -31.2743, 0.68 ) }
    dend_3 { pt3dadd( 0.970189, 53.1727, -32.5988, 0.91 ) }
    dend_3 { pt3dadd( 0.887265, 54.5625, -34.0418, 0.91 ) }
    dend_3 { pt3dadd( 0.737376, 55.9423, -35.5825, 0.68 ) }
    dend_3 { pt3dadd( 0.425221, 57.5189, -37.4887, 0.91 ) }
    dend_3 { pt3dadd( 0.139151, 58.8722, -39.0519, 0.68 ) }
    dend_3 { pt3dadd( -0.110823, 60.1071, -40.3961, 0.68 ) }
    dend_3 { pt3dadd( -0.392052, 61.638, -41.9593, 0.68 ) }
    dend_3 { pt3dadd( -0.659174, 63.2694, -43.5237, 0.68 ) }
    dend_3 { pt3dadd( -0.904149, 64.8249, -44.9061, 0.68 ) }
    dend_3 { pt3dadd( -1.21209, 66.9035, -46.5872, 0.68 ) }
    dend_3 { pt3dadd( -1.43224, 68.9708, -48.1196, 0.68 ) }
    dend_3 { pt3dadd( -1.63016, 71.618, -49.979, 0.45 ) }
    dend_3 { pt3dadd( -1.69696, 73.7967, -51.4457, 0.45 ) }
    dend_3 { pt3dadd( -1.68041, 74.6329, -51.9976, 0.68 ) }
    dend_3 { pt3dadd( -1.51198, 76.8392, -53.4627, 0.45 ) }
    dend_3 { pt3dadd( -1.40734, 77.9336, -54.2101, 0.45 ) }
    dend_3 { pt3dadd( -1.25665, 79.207, -55.0548, 1.82 ) }
    dend_3 { pt3dadd( -0.92408, 81.4778, -56.607, 0.45 ) }
    dend_3 { pt3dadd( -0.723575, 82.8907, -57.6292, 0.45 ) }
    dend_3 { pt3dadd( -0.625155, 83.6928, -58.2255, 0.68 ) }
    dend_3 { pt3dadd( -0.418706, 85.8386, -59.8686, 0.45 ) }
    dend_3 { pt3dadd( -0.334892, 87.2466, -60.959, 1.82 ) }
    dend_3 { pt3dadd( -0.324498, 88.9436, -62.3543, 0.45 ) }
    dend_3 { pt3dadd( -0.390747, 90.8222, -64.0101, 0.45 ) }
    dend_3 { pt3dadd( -0.41834, 91.3434, -64.5193, 0.45 ) }
    dend_3 { pt3dadd( -0.485346, 92.7747, -66.0739, 0.45 ) }
    dend_3 { pt3dadd( -0.495726, 94.0136, -67.5094, 1.59 ) }
    dend_3 { pt3dadd( -0.392974, 95.8245, -69.7294, 0.45 ) }
    dend_3 { pt3dadd( -0.23608, 97.2386, -71.5121, 0.45 ) }
    dend_3 { pt3dadd( 0.041051, 98.6679, -73.3576, 0.45 ) }
    dend_3 { pt3dadd( 0.349787, 99.8532, -74.8965, 1.59 ) }
    dend_3 { pt3dadd( 0.782013, 101.219, -76.6386, 0.45 ) }
    dend_3 { pt3dadd( 1.2328, 102.396, -78.1333, 0.45 ) }
    dend_3 { pt3dadd( 1.77073, 103.636, -79.6644, 0.45 ) }
    dend_3 { pt3dadd( 2.21037, 104.602, -80.8466, 0.45 ) }
    dend_3 { pt3dadd( 2.68691, 105.673, -82.1148, 0.45 ) }
    dend_3 { pt3dadd( 3.05188, 106.511, -83.0934, 0.91 ) }
    dend_3 { pt3dadd( 3.77859, 108.298, -85.0139, 0.45 ) }
    dend_3 { pt3dadd( 4.32431, 109.79, -86.4489, 0.45 ) }
    dend_3 { pt3dadd( 4.73345, 110.957, -87.5371, 0.45 ) }
    dend_3 { pt3dadd( 5.21688, 112.796, -89.1699, 0.45 ) }
    dend_3 { pt3dadd( 5.34878, 113.525, -89.8223, 0.91 ) }
    dend_3 { pt3dadd( 5.56054, 115.837, -91.9939, 0.45 ) }
    dend_3 { pt3dadd( 5.50617, 117.578, -93.724, 0.45 ) }
    dend_3 { pt3dadd( 5.3337, 118.59, -94.8249, 1.36 ) }
    dend_3 { pt3dadd( 4.76607, 120.456, -97.0982, 0.45 ) }
    dend_3 { pt3dadd( 4.13117, 121.94, -99.1216, 0.68 ) }
    dend_3 { pt3dadd( 3.50963, 123.122, -100.95, 0.45 ) }
    dend_3 { pt3dadd( 2.90172, 124.128, -102.733, 1.36 ) }
    dend_3 { pt3dadd( 2.10838, 125.443, -105.202, 0.45 ) }
    dend_3 { pt3dadd( 1.48394, 126.658, -107.502, 0.45 ) }
    dend_3 { pt3dadd( 0.964256, 128.061, -110.174, 0.23 ) }
    dend_3 { pt3dadd( 0.667969, 129.55, -112.849, 0.68 ) }
    dend_3 { pt3dadd( 0.639021, 130.837, -115.069, 0.68 ) }
    dend_3 { pt3dadd( 0.912396, 132.385, -117.535, 1.14 ) }
    dend_3 { pt3dadd( 1.43547, 133.813, -119.545, 0.45 ) }
    dend_3 { pt3dadd( 2.33156, 135.684, -121.788, 0.68 ) }
    dend_3 { pt3dadd( 3.34228, 137.493, -123.649, 0.45 ) }
    dend_3 { pt3dadd( 4.13047, 138.837, -124.827, 0.91 ) }
    dend_3 { pt3dadd( 4.99758, 140.373, -126.021, 0.45 ) }
    dend_3 { pt3dadd( 5.71557, 141.762, -126.988, 0.91 ) }
    dend_3 { pt3dadd( 6.63028, 144.048, -128.527, 0.45 ) }
    dend_3 { pt3dadd( 7.22703, 146.199, -130.041, 0.45 ) }
    dend_3 { pt3dadd( 7.31404, 146.755, -130.485, 0.68 ) }
    dend_3 { pt3dadd( 7.45252, 148.77, -132.243, 0.45 ) }
    dend_3 { pt3dadd( 7.45565, 149.522, -132.983, 0.91 ) }
    dend_3 { pt3dadd( 7.41903, 151.509, -135.115, 0.45 ) }
    dend_3 { pt3dadd( 7.36154, 153.135, -136.89, 0.91 ) }
    dend_3 { pt3dadd( 7.21775, 154.741, -138.725, 0.23 ) }
    dend_3 { pt3dadd( 7.18553, 155.21, -139.278, 0.45 ) }
    dend_3 { pt3dadd( 7.15904, 156.945, -141.38, 0.45 ) }
    dend_3 { pt3dadd( 7.35269, 158.851, -143.949, 0.45 ) }
    dend_3 { pt3dadd( 7.50714, 159.493, -144.909, 1.14 ) }
    dend_3 { pt3dadd( 8.00966, 160.791, -147.075, 0.45 ) }
    dend_3 { pt3dadd( 8.59463, 162.002, -149.314, 0.45 ) }
    dend_3 { pt3dadd( 9.12447, 162.973, -151.293, 0.91 ) }
    dend_3 { pt3dadd( 10.4356, 165.021, -155.863, 0.45 ) }
    dend_3 { pt3dadd( 11.3002, 166.226, -158.638, 0.45 ) }
    dend_3 { pt3dadd( 12.1967, 167.361, -161.18, 0.91 ) }
    dend_3 { pt3dadd( 13.1343, 168.518, -163.579, 0.91 ) }
    dend_3 { pt3dadd( 14.3493, 170.085, -166.59, 0.45 ) }
    dend_3 { pt3dadd( 14.8794, 170.815, -167.828, 0.45 ) }
    dend_3 { pt3dadd( 15.416, 171.673, -168.99, 1.14 ) }
    dend_3 { pt3dadd( 16.5526, 173.683, -171.326, 0.68 ) }
    dend_3 { pt3dadd( 17.6517, 175.787, -173.422, 0.45 ) }
    dend_3 { pt3dadd( 18.5377, 177.574, -175.011, 0.45 ) }
    dend_3 { pt3dadd( 18.7596, 178.081, -175.441, 0.45 ) }
    dend_3 { pt3dadd( 19.2835, 179.435, -176.584, 0.91 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_11()
}

proc basic_shape_11() {
    dend_3 { pt3dadd( 19.7837, 180.808, -177.791, 0.45 ) }
    dend_3 { pt3dadd( 20.2394, 182.307, -179.139, 0.91 ) }
    dend_3 { pt3dadd( 20.7801, 184.31, -181.019, 0.23 ) }
    dend_3 { pt3dadd( 21.0072, 185.323, -182.047, 0.23 ) }
    dend_3 { pt3dadd( 21.19, 186.464, -183.329, 0.23 ) }
    dend_3 { pt3dadd( 21.2806, 187.367, -184.403, 0.23 ) }
    dend_3 { pt3dadd( 21.2744, 188.759, -186.015, 0.23 ) }
    dend_3 { pt3dadd( 21.2028, 189.77, -187.161, 0.23 ) }
    dend_3 { pt3dadd( 20.9655, 191.41, -188.892, 0.23 ) }
    dend_3 { pt3dadd( 20.7461, 192.964, -190.481, 0.23 ) }
    dend_3 { pt3dadd( 20.5997, 194.224, -191.786, 0.23 ) }
    dend_3 { pt3dadd( 20.5708, 195.185, -192.753, 0.68 ) }
    dend_3 { pt3dadd( 20.7325, 197.285, -194.816, 0.23 ) }
    dend_3 { pt3dadd( 21.0415, 199.124, -196.625, 0.23 ) }
    dend_3 { pt3dadd( 21.4289, 200.688, -198.233, 0.45 ) }
    dend_3 { pt3dadd( 21.855, 202.154, -199.815, 0.91 ) }
    dend_3 { pt3dadd( 22.4998, 204.487, -202.483, 0.23 ) }
    dend_3 { pt3dadd( 22.9021, 205.878, -204.436, 0.23 ) }
    dend_3 { pt3dadd( 23.1917, 206.867, -205.895, 0.23 ) }
    dend_3 { pt3dadd( 23.6554, 208.348, -208.186, 0.23 ) }
    dend_3 { pt3dadd( 23.8086, 208.952, -209.139, 0.45 ) }
    dend_3 { pt3dadd( 24.1649, 210.645, -212.017, 0.23 ) }
    dend_3 { pt3dadd( 24.6376, 213.77, -218.385, 0.23 ) }
    // Section: dend_11, id: dend_11, parent: dend_9 (entry count 23/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( -161.497, 200.581, -37.3185, 0.23 ) }
    dend_11 { pt3dadd( -160.235, 201.121, -38.1019, 0.23 ) }
    dend_11 { pt3dadd( -158.918, 201.685, -38.9192, 0.68 ) }
    dend_11 { pt3dadd( -157.334, 202.363, -39.9028, 0.23 ) }
    dend_11 { pt3dadd( -155.737, 203.046, -40.894, 0.23 ) }
    dend_11 { pt3dadd( -154.53, 203.562, -41.6432, 0.23 ) }
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 29/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -161.497, 200.581, -37.3185, 0.45 ) }
    dend_10 { pt3dadd( -162.344, 202.16, -38.7628, 0.45 ) }
    dend_10 { pt3dadd( -163.36, 203.908, -40.3788, 0.45 ) }
    dend_10 { pt3dadd( -164.232, 205.308, -41.722, 0.91 ) }
    dend_10 { pt3dadd( -165.457, 207.174, -43.4967, 0.23 ) }
    dend_10 { pt3dadd( -165.975, 207.943, -44.18, 0.68 ) }
    dend_10 { pt3dadd( -167.069, 209.569, -45.5899, 0.23 ) }
    dend_10 { pt3dadd( -167.83, 210.621, -46.5448, 0.23 ) }
    dend_10 { pt3dadd( -168.689, 211.769, -47.6898, 0.23 ) }
    dend_10 { pt3dadd( -169.216, 212.434, -48.4667, 1.14 ) }
    dend_10 { pt3dadd( -170.712, 214.301, -50.7489, 0.23 ) }
    dend_10 { pt3dadd( -171.234, 214.959, -51.6013, 0.91 ) }
    dend_10 { pt3dadd( -172.615, 216.701, -53.9938, 0.23 ) }
    dend_10 { pt3dadd( -174.187, 218.732, -56.9277, 0.23 ) }
    dend_10 { pt3dadd( -175.39, 220.292, -59.3978, 0.23 ) }
    // Section: dend_6, id: dend_6, parent: dend_4 (entry count 44/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -3.40894, 37.2528, -7.41792, 0.91 ) }
    dend_6 { pt3dadd( -3.6833, 38.7346, -6.95792, 0.91 ) }
    dend_6 { pt3dadd( -4.13214, 41.1149, -6.22513, 0.91 ) }
    dend_6 { pt3dadd( -4.75064, 45.6167, -4.86382, 0.91 ) }
    dend_6 { pt3dadd( -4.91981, 47.487, -4.29612, 0.91 ) }
    dend_6 { pt3dadd( -5.03044, 50.1139, -3.46155, 0.91 ) }
    dend_6 { pt3dadd( -5.04005, 52.66, -2.61836, 0.91 ) }
    dend_6 { pt3dadd( -5.02935, 54.236, -2.09511, 0.91 ) }
    dend_6 { pt3dadd( -5.07174, 56.9744, -1.06564, 0.91 ) }
    dend_6 { pt3dadd( -5.20571, 58.7777, -0.191489, 0.91 ) }
    dend_6 { pt3dadd( -5.43216, 60.2636, 0.556794, 0.91 ) }
    dend_6 { pt3dadd( -5.73289, 61.7394, 1.20586, 0.68 ) }
    dend_6 { pt3dadd( -6.06285, 63.163, 1.75423, 0.91 ) }
    dend_6 { pt3dadd( -6.79863, 66.5085, 2.94058, 0.91 ) }
    dend_6 { pt3dadd( -7.5839, 70.4514, 4.27341, 0.91 ) }
    dend_6 { pt3dadd( -8.0565, 74.2073, 5.44682, 0.91 ) }
    dend_6 { pt3dadd( -8.31303, 78.9587, 6.77833, 0.91 ) }
    dend_6 { pt3dadd( -8.26426, 81.9006, 7.44586, 0.91 ) }
    dend_6 { pt3dadd( -8.03667, 84.9718, 7.91148, 0.91 ) }
    dend_6 { pt3dadd( -7.8443, 86.6902, 8.05217, 1.14 ) }
    dend_6 { pt3dadd( -7.41285, 90.7191, 8.19844, 0.91 ) }
    dend_6 { pt3dadd( -7.26999, 92.8514, 8.18966, 0.91 ) }
    dend_6 { pt3dadd( -7.21221, 96.1317, 7.964, 0.91 ) }
    dend_6 { pt3dadd( -7.25127, 100.996, 7.27221, 0.91 ) }
    dend_6 { pt3dadd( -7.37621, 104.896, 6.4905, 0.91 ) }
    dend_6 { pt3dadd( -7.5591, 107.95, 5.76934, 0.91 ) }
    dend_6 { pt3dadd( -7.73419, 109.863, 5.29606, 0.68 ) }
    dend_6 { pt3dadd( -7.93667, 111.974, 4.87564, 0.68 ) }
    dend_6 { pt3dadd( -8.17193, 114.958, 4.54374, 0.91 ) }
    dend_6 { pt3dadd( -8.26221, 117.072, 4.48631, 0.91 ) }
    dend_6 { pt3dadd( -8.33716, 120.371, 4.50996, 1.36 ) }
    dend_6 { pt3dadd( -8.38636, 122.553, 4.51876, 0.91 ) }
    dend_6 { pt3dadd( -8.51584, 125.835, 4.49513, 0.91 ) }
    dend_6 { pt3dadd( -8.62512, 128.528, 4.35621, 0.91 ) }
    dend_6 { pt3dadd( -8.78692, 132.477, 3.92877, 0.91 ) }
    dend_6 { pt3dadd( -8.85977, 135.889, 3.35339, 1.14 ) }
    dend_6 { pt3dadd( -8.84829, 139.239, 2.572, 1.14 ) }
    dend_6 { pt3dadd( -8.8103, 140.941, 2.08032, 0.91 ) }
    dend_6 { pt3dadd( -8.6187, 146.198, 0.349143, 1.14 ) }
    dend_6 { pt3dadd( -8.51306, 148.653, -0.469594, 1.14 ) }
    dend_6 { pt3dadd( -8.34818, 152.132, -1.52341, 0.91 ) }
    dend_6 { pt3dadd( -8.22947, 154.118, -1.98434, 0.68 ) }
    dend_6 { pt3dadd( -8.0631, 156.043, -2.2691, 0.68 ) }
    dend_6 { pt3dadd( -7.83043, 158.574, -2.42001, 0.91 ) }
    dend_6 { pt3dadd( -7.51025, 162.481, -2.26028, 1.14 ) }
    dend_6 { pt3dadd( -7.25176, 165.624, -1.90947, 1.14 ) }
    dend_6 { pt3dadd( -7.05471, 168.329, -1.44811, 0.45 ) }
    dend_6 { pt3dadd( -6.96363, 170.561, -0.95007, 0.45 ) }
    dend_6 { pt3dadd( -6.97005, 173.162, -0.289503, 0.68 ) }
    dend_6 { pt3dadd( -7.0504, 175.325, 0.278656, 0.45 ) }
    dend_6 { pt3dadd( -7.12235, 176.398, 0.530033, 0.45 ) }
    dend_6 { pt3dadd( -7.30292, 178.502, 0.826594, 0.91 ) }
    dend_6 { pt3dadd( -7.52785, 180.405, 0.869897, 0.23 ) }
    dend_6 { pt3dadd( -7.7347, 181.826, 0.746867, 0.68 ) }
    dend_6 { pt3dadd( -7.96415, 183.598, 0.458862, 0.23 ) }
    dend_6 { pt3dadd( -8.29692, 186.384, -0.143303, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_12()
}

proc basic_shape_12() {
    dend_6 { pt3dadd( -8.52345, 188.478, -0.683091, 0.23 ) }
    dend_6 { pt3dadd( -8.64699, 189.781, -1.09625, 0.23 ) }
    dend_6 { pt3dadd( -8.83974, 191.893, -1.8223, 0.23 ) }
    dend_6 { pt3dadd( -8.95618, 193.247, -2.29693, 0.68 ) }
    dend_6 { pt3dadd( -9.1562, 195.735, -3.1566, 0.23 ) }
    dend_6 { pt3dadd( -9.37326, 199.235, -4.45732, 0.23 ) }
    dend_6 { pt3dadd( -9.43749, 201.443, -5.32192, 0.23 ) }
    dend_6 { pt3dadd( -11.399, 213.484, -6.80054, 0.23 ) }
    dend_6 { pt3dadd( -11.2555, 225.666, -8.49867, 0.23 ) }
    dend_6 { pt3dadd( -12.1554, 237.925, -8.91494, 0.23 ) }
    dend_6 { pt3dadd( -10.826, 250.127, -8.15356, 0.23 ) }
    dend_6 { pt3dadd( -11.2996, 262.357, -9.38278, 0.23 ) }
    dend_6 { pt3dadd( -13.1518, 274.502, -9.03213, 0.23 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 13/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -3.40894, 37.2528, -7.41792, 0.68 ) }
    dend_5 { pt3dadd( -3.79992, 39.7256, -7.81647, 0.68 ) }
    dend_5 { pt3dadd( -4.29617, 42.1872, -8.19137, 0.68 ) }
    dend_5 { pt3dadd( -4.97424, 44.931, -8.57139, 0.68 ) }
    dend_5 { pt3dadd( -5.82075, 47.957, -8.9009, 0.68 ) }
    dend_5 { pt3dadd( -6.75523, 51.0545, -9.06053, 0.68 ) }
    dend_5 { pt3dadd( -7.88214, 54.5397, -9.04851, 0.68 ) }
    dend_5 { pt3dadd( -8.53414, 56.3799, -8.89809, 0.68 ) }
    dend_5 { pt3dadd( -9.33541, 58.3676, -8.58354, 0.91 ) }
    dend_5 { pt3dadd( -10.1356, 59.9827, -8.21176, 0.45 ) }
    dend_5 { pt3dadd( -11.4443, 62.289, -7.52716, 0.45 ) }
    dend_5 { pt3dadd( -12.5427, 64.103, -6.93326, 0.45 ) }
    dend_5 { pt3dadd( -13.3233, 65.4534, -6.53884, 0.45 ) }
    dend_5 { pt3dadd( -13.7092, 66.1527, -6.404, 0.45 ) }
    dend_5 { pt3dadd( -14.5967, 67.8159, -6.29768, 0.91 ) }
    dend_5 { pt3dadd( -15.6889, 69.869, -6.3431, 0.45 ) }
    dend_5 { pt3dadd( -16.96, 72.2674, -6.63141, 0.45 ) }
    dend_5 { pt3dadd( -17.8943, 74.0771, -6.95311, 0.45 ) }
    dend_5 { pt3dadd( -18.6995, 75.6939, -7.28831, 0.45 ) }
    dend_5 { pt3dadd( -19.5136, 77.3961, -7.67885, 0.45 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_30, dend_29, dend_24, dend_21, dend_14, dend_7, dend_0, dend_26, dend_25, dend_23, dend_22, dend_18, dend_15, dend_13, dend_8, dend_2, dend_1, dend_28, dend_27, dend_20, dend_19, dend_17, dend_16, dend_12, dend_9, dend_4, dend_3, dend_11, dend_10, dend_6, dend_5]}
    ModelViewParmSubset_2 = new SectionList()
    dend_30 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_30, dend_29, dend_24, dend_21, dend_14, dend_7, dend_0, dend_26, dend_25, dend_23, dend_22, dend_18, dend_15, dend_13, dend_8, dend_2, dend_1, dend_28, dend_27, dend_20, dend_19, dend_17, dend_16, dend_12, dend_9, dend_4, dend_3, dend_11, dend_10, dend_6, dend_5]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_30 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_29 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_25 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_23 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_22 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_13 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_1 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_28 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_27 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_20 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_19 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_17 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_16 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_12 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_9 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_3 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_6 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_5 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_24 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_0 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_14 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_26 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_21 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_2 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_15 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_4 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_18 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_7 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_8 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_11 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_10 OneSecGrp_SectionRef_32.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_26, dend_26, dend_26, dend_26, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_11, dend_11, dend_11, dend_11, dend_11, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_21 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_10()
}

proc subsets_10() {
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_11()
}

proc subsets_11() {
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_12()
}

proc subsets_12() {
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_13()
}

proc subsets_13() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 4.13603E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 4.13603E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.999855  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.042115  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0012239999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.001693  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.386953  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 8.0E-6  // units: S cm-2
        e_pas_nml2 = -63.854015  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.5399997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.039862998  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 1.04239E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 5.2299997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.0054459996  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.503893  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-4  // units: S cm-2
        e_pas_nml2 = -67.1289  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 4.78E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.15074699  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009017  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 4.0E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.0032419998  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 1.74E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bSTUT_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bSTUT_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bSTUT_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bSTUT_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_30 nseg = 13
    dend_29 nseg = 13
    dend_25 nseg = 11
    dend_23 nseg = 5
    dend_22 nseg = 7
    dend_13 nseg = 9
    dend_1 nseg = 5
    dend_28 nseg = 7
    dend_27 nseg = 7
    dend_20 nseg = 7
    dend_19 nseg = 7
    dend_17 nseg = 5
    dend_16 nseg = 9
    dend_12 nseg = 5
    dend_9 nseg = 13
    dend_3 nseg = 15
    dend_6 nseg = 13
    dend_5 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bSTUT213_L6_LBC_40c756925d_0_0


