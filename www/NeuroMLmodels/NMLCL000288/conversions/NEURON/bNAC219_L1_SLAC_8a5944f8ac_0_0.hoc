// Cell: bNAC219_L1_SLAC_8a5944f8ac_0_0
/*
{
  "id" : "bNAC219_L1_SLAC_8a5944f8ac_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-5.08922, 1.28627, 0.0, 2.42054", "-4.51889, 1.15822, 0.0, 4.18378", "-3.94856, 1.03016, 0.0, 5.5029", "-3.37823, 0.902109, 0.0, 6.33773", "-2.8079, 0.774056, 0.0, 7.18195", "-2.23757, 0.646003, 0.0, 7.81416", "-1.66724, 0.51795, 0.0, 8.41051", "-1.09691, 0.389898, 0.0, 8.80044", "-0.526577, 0.261845, 0.0, 9.08666", "0.0437534, 0.133792, 0.0, 9.32431", "0.614084, 0.00573877, 0.0, 9.48777", "1.18441, -0.122314, 0.0, 9.3685", "1.75474, -0.250367, 0.0, 9.22465", "2.32507, -0.37842, 0.0, 9.06336", "2.89541, -0.506473, 0.0, 8.79916", "3.46574, -0.634526, 0.0, 8.40876", "4.03607, -0.762579, 0.0, 8.00283", "4.6064, -0.890632, 0.0, 7.23974", "5.17673, -1.01868, 0.0, 5.67467", "5.74706, -1.14674, 0.0, 3.94277", "6.31739, -1.27479, 0.0, 2.27811" ]
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "4.08705, -1.26195, 3.48, 0.68", "5.98005, -1.41281, 6.60652, 0.68", "8.07443, -1.68008, 10.1909, 0.23", "10.7492, -2.16984, 14.5886, 0.23", "12.5507, -2.5362, 17.44, 0.23", "14.7836, -2.9901, 20.8096, 0.23", "16.1472, -3.24642, 22.7554, 0.23", "19.6346, -3.91031, 27.2643, 0.23", "22.1346, -4.27369, 30.1615, 0.45", "23.7483, -4.39484, 31.7811, 0.23", "25.3174, -4.44399, 33.1813, 0.23", "26.8425, -4.41054, 34.3239, 0.23", "28.929, -4.25264, 35.6742, 0.23", "32.1353, -3.91535, 37.3876, 0.23", "33.9025, -3.66563, 38.2571, 0.68", "37.8921, -3.0801, 40.2419, 0.23", "41.1486, -2.58082, 41.8442, 0.23", "44.0077, -2.16624, 43.2439, 0.45", "46.8985, -1.75457, 44.6906, 0.23", "50.9472, -1.10786, 46.7832, 0.45", "54.1926, -0.497213, 48.6484, 0.23", "56.0182, -0.174572, 49.7798, 0.68", "59.0971, 0.395024, 51.8526, 0.23", "62.1781, 0.966886, 54.0427, 0.23", "64.0267, 1.29326, 55.4235, 0.45", "68.0594, 1.83911, 58.6626, 0.23", "72.0944, 2.3245, 61.889, 0.23" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999993958706773,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "5.05705, 1.9053, -5.52, 2.27", "6.55974, 4.24307, -6.80136, 2.27", "8.04385, 6.55194, -8.06688, 1.14", "8.18918, 6.77804, -8.19081, 1.14" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999993958706773
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-3.38295, 1.36205, 4.12, 0.91", "-4.47686, 1.76706, 4.55425, 0.91", "-6.25402, 2.42505, 5.25973, 0.45", "-7.5109, 2.89041, 5.75868, 0.45", "-8.6229, 3.30212, 6.20011, 0.45", "-10.042, 3.82753, 6.76344, 0.68" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999993958706773
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "6.31739, -1.27479, 0.0, 0.91", "20.953, -4.56084, 0.0, 0.91", "35.5887, -7.8469, 0.0, 0.91" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "8.18918, 6.77804, -8.19081, 1.14", "9.55331, 9.1396, -8.59711, 1.14", "11.6253, 12.7266, -9.21423, 1.14" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "8.18918, 6.77804, -8.19081, 0.23", "8.19445, 8.19473, -6.37613, 0.23", "8.37959, 10.8053, -3.50329, 0.68", "8.54578, 12.6397, -1.77755, 0.68", "8.8125, 15.7188, 0.799704, 0.23", "9.19445, 19.7743, 3.85956, 0.23", "9.49304, 22.5606, 5.77361, 0.23", "9.93617, 25.3058, 7.40074, 0.23", "10.7326, 29.2209, 9.13489, 0.23", "11.1769, 31.2047, 9.6703, 0.45", "11.7428, 33.4592, 9.93431, 0.23", "12.1714, 35.0843, 9.9313, 0.23", "12.7121, 36.8698, 9.90417, 0.23", "13.7242, 39.3479, 9.86032, 0.23", "15.8862, 43.3518, 9.25873, 0.23", "16.9242, 44.8447, 8.86144, 0.23", "17.639, 45.6836, 8.55468, 0.23", "19.9299, 48.1914, 7.57932, 0.23", "23.0564, 51.2775, 6.21726, 0.23", "27.9392, 55.1632, 3.78967, 0.23", "30.2539, 56.5869, 2.41825, 0.23", "32.0521, 57.5185, 1.18212, 0.23", "36.216, 68.8971, 6.09899, 0.23", "41.7798, 80.1858, 9.63548, 0.23" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-10.042, 3.82753, 6.76344, 0.23", "-11.2969, 5.33152, 6.02029, 0.23", "-12.7964, 6.98659, 5.04922, 0.23", "-13.7208, 7.79259, 4.31301, 0.23", "-15.0687, 8.70061, 3.16484, 0.23", "-16.7312, 9.56522, 1.68932, 0.23", "-18.087, 10.1344, 0.469412, 0.23", "-20.5728, 10.8473, -1.66772, 0.45", "-23.8608, 11.4889, -4.36477, 0.23", "-25.6186, 11.7523, -5.76394, 0.68", "-28.5976, 12.1873, -8.13207, 0.23", "-31.8827, 12.8068, -10.7194, 0.23", "-33.9119, 13.3772, -12.3529, 0.23", "-35.0794, 13.8811, -13.3717, 0.23", "-36.1431, 14.5616, -14.3633, 0.23", "-38.1036, 16.1089, -16.527, 0.23", "-39.9806, 17.8371, -18.8138, 0.23", "-42.069, 20.0693, -21.7121, 0.23", "-43.6455, 21.936, -24.1953, 0.23", "-44.8764, 23.4322, -26.2733, 0.23", "-47.0902, 25.9225, -30.1088, 0.23", "-54.9832, 28.3692, -35.5799, 0.23" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-10.042, 3.82753, 6.76344, 0.23", "-11.7554, 3.48699, 8.13306, 0.23", "-13.3716, 3.16577, 9.42498, 0.45" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "35.5887, -7.8469, 0.0, 0.12", "50.2243, -11.133, 0.0, 0.12", "64.8599, -14.419, 0.0, 0.12" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "11.6253, 12.7266, -9.21423, 0.45", "12.7093, 13.9066, -8.65527, 0.45", "15.2044, 16.9203, -7.51895, 0.68", "16.0398, 18.0007, -7.19184, 0.23", "17.2368, 19.6053, -6.77895, 0.45", "19.0417, 21.9792, -6.21015, 0.45", "20.1319, 23.3504, -5.93651, 0.68", "21.7257, 25.3093, -5.71946, 0.23", "23.3872, 27.2208, -5.72243, 0.23", "24.4409, 28.3102, -5.78136, 0.23", "26.217, 29.956, -6.02311, 0.23", "27.7538, 31.2692, -6.33629, 0.23", "29.3073, 32.4915, -6.68034, 0.23", "30.7768, 33.6077, -7.01776, 0.23", "31.8513, 34.4629, -7.27258, 0.45", "33.4796, 35.9169, -7.65527, 0.23", "34.8357, 37.3752, -7.96403, 0.23", "35.4944, 38.2614, -8.06842, 0.23", "36.6994, 40.2319, -8.22967, 0.23", "37.3652, 41.3666, -8.38905, 0.23", "38.0497, 42.4193, -8.62534, 0.23", "38.7388, 43.3303, -8.90198, 0.23", "40.3388, 45.0873, -9.80671, 0.45", "41.6242, 46.2997, -10.6892, 0.45", "43.8558, 47.9955, -12.3387, 0.23", "45.4115, 49.0218, -13.523, 0.23", "46.0791, 49.3969, -14.0469, 0.45", "48.5536, 50.5296, -16.0395, 0.23", "49.9407, 51.0021, -17.2118, 0.23", "50.7608, 51.2446, -17.9189, 0.45", "57.9626, 56.1419, -18.987, 0.45" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "11.6253, 12.7266, -9.21423, 0.68", "11.3109, 14.0651, -9.63442, 0.68", "10.7539, 16.4362, -10.3788, 0.45" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-13.3716, 3.16577, 9.42498, 0.45", "-14.5499, 3.96541, 9.92783, 0.45", "-16.2565, 5.12364, 10.6562, 0.45", "-18.5345, 6.66965, 11.6284, 0.45", "-19.5162, 7.33586, 12.0473, 0.45" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-13.3716, 3.16577, 9.42498, 0.23", "-15.5274, 2.42521, 9.68369, 0.23", "-16.7455, 2.03337, 9.95483, 0.23", "-18.8805, 1.5656, 10.5753, 0.23", "-19.8072, 1.38668, 10.9364, 0.45", "-22.2289, 1.00008, 12.0301, 0.23", "-23.8348, 0.7571, 12.7676, 0.68", "-26.2638, 0.429098, 13.9792, 0.23", "-29.8899, -0.0983145, 15.8375, 0.23", "-32.9929, -0.607373, 17.3983, 0.23", "-35.7208, -1.1084, 18.651, 0.23", "-37.4814, -1.48661, 19.3503, 0.23", "-39.1558, -1.89861, 19.8889, 0.23", "-40.4092, -2.23676, 20.1742, 0.23", "-42.7276, -2.92761, 20.5524, 0.23", "-44.729, -3.52975, 20.8349, 0.23", "-46.4018, -4.03804, 21.1115, 0.23", "-49.2145, -4.88063, 21.6943, 0.23", "-51.3712, -5.54803, 22.1792, 0.23", "-54.1357, -6.47511, 22.9084, 0.23", "-56.9865, -7.5188, 23.9835, 0.23", "-59.3342, -8.5014, 25.1593, 0.23", "-61.3608, -9.5663, 26.543, 0.23", "-62.4039, -10.339, 27.5409, 0.23", "-63.5818, -11.7714, 29.3088, 0.23", "-64.9208, -14.8082, 32.9823, 0.23", "-65.1695, -16.3057, 34.681, 0.68", "-65.0169, -19.1025, 37.6032, 0.23", "-64.606, -21.1768, 39.4833, 0.23", "-63.461, -24.9507, 42.3069, 0.45", "-62.213, -28.1886, 44.0873, 0.23", "-61.0582, -30.8624, 45.0414, 0.23", "-59.7651, -33.6828, 45.7221, 0.68", "-58.342, -36.6416, 46.0632, 0.23", "-57.2427, -38.9622, 46.0946, 0.23", "-56.0323, -41.6578, 45.9115, 0.45", "-55.198, -43.5838, 45.8144, 0.23", "-54.4729, -45.3716, 45.8634, 0.68", "-53.7364, -47.2952, 46.0457, 0.23", "-53.2385, -48.5244, 46.2665, 1.14", "-52.3962, -50.4726, 46.668, 0.23", "-50.665, -54.3314, 47.5763, 0.23", "-50.3455, -55.0283, 47.7584, 0.68", "-49.3092, -57.2132, 48.3482, 0.23", "-48.5272, -58.7683, 48.8047, 0.68", "-47.0786, -61.5486, 49.563, 0.23" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "10.7539, 16.4362, -10.3788, 0.23", "9.8739, 20.1056, -9.27286, 0.23", "9.05547, 23.3237, -8.40573, 0.23", "8.6422, 24.7693, -8.13645, 0.23", "7.61054, 27.8229, -7.81349, 0.45", "6.73043, 29.9106, -7.73137, 0.45", "4.82034, 33.7349, -7.75016, 0.23", "3.29802, 36.1161, -8.04914, 0.68", "1.10407, 38.8265, -8.64701, 0.23", "-0.837496, 40.8527, -9.24278, 0.68", "-3.17242, 42.9714, -9.98842, 0.23", "-4.3128, 43.8897, -10.3243, 0.23", "-5.6477, 44.8685, -10.5882, 0.68", "-7.14188, 46.0576, -10.626, 0.23", "-8.4519, 47.3917, -10.248, 0.23", "-9.67674, 49.0596, -9.37911, 0.23", "-10.8736, 51.0806, -8.03691, 0.23", "-11.9571, 53.1387, -6.55316, 0.23", "-12.6721, 54.5547, -5.38751, 0.23", "-14.1517, 57.3291, -2.75506, 0.23", "-15.8162, 60.1764, 0.148594, 0.23", "-16.6986, 61.4871, 1.58105, 0.23", "-17.6462, 62.6977, 2.96095, 0.68", "-20.1761, 65.5685, 6.32894, 0.23", "-22.7936, 68.3085, 9.6124, 0.23", "-25.3366, 70.707, 12.5004, 0.23", "-28.0637, 73.0742, 15.3052, 0.68", "-29.8971, 74.5756, 17.1094, 0.23", "-30.9563, 75.3758, 18.1336, 0.23" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "10.7539, 16.4362, -10.3788, 0.45", "11.911, 19.803, -11.7348, 0.45", "13.0364, 23.2668, -13.1869, 0.45", "14.0326, 26.7221, -14.6368, 0.45", "14.7127, 29.0811, -15.6266, 0.45", "15.6459, 32.3179, -16.9848, 0.45", "16.2026, 34.2488, -17.7951, 0.45", "16.7677, 36.4512, -18.7961, 0.45", "17.2989, 38.9655, -19.869, 0.45" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-19.5162, 7.33586, 12.0473, 0.23", "-21.2606, 7.65915, 14.0262, 0.23", "-22.8517, 7.95402, 15.8311, 0.23", "-24.7162, 8.29956, 17.9461, 0.45", "-25.9827, 8.53428, 19.3828, 0.23", "-26.3326, 8.59911, 19.7796, 0.23" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-19.5162, 7.33586, 12.0473, 0.23", "-19.9078, 9.46319, 11.2271, 0.23", "-20.1465, 10.7595, 10.7272, 0.68" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "17.2989, 38.9655, -19.869, 0.23", "18.1035, 39.6451, -20.8154, 0.23", "19.8989, 40.8821, -22.8937, 0.23", "20.4659, 41.2437, -23.539, 0.23", "21.0736, 41.6312, -24.2305, 0.23", "22.6762, 42.6531, -26.0543, 0.45", "24.168, 43.6043, -27.7519, 0.23", "25.4601, 44.2895, -29.1846, 0.45", "26.8925, 44.8528, -30.6395, 0.23", "31.5432, 48.2527, -36.9405, 0.23", "35.9373, 53.5404, -42.0769, 0.23" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "17.2989, 38.9655, -19.869, 0.23", "15.335, 41.0852, -20.4671, 0.23", "13.4795, 43.0272, -21.1014, 0.45", "12.5658, 43.9924, -21.423, 0.23", "11.4728, 45.2505, -21.8362, 0.23", "10.3202, 46.6549, -22.3032, 0.68", "8.90873, 48.3119, -22.8904, 0.23", "8.33159, 48.9696, -23.1609, 0.23", "7.62091, 49.7266, -23.5701, 0.23", "6.21074, 51.0622, -24.392, 0.23", "5.11855, 51.91, -25.0609, 0.23", "3.86223, 52.7081, -25.8545, 0.23", "2.35337, 53.5257, -26.835, 0.23", "0.780316, 54.3614, -27.892, 0.23", "-1.33625, 55.3363, -29.3365, 0.45", "-3.00798, 55.9801, -30.4769, 0.23", "-3.72003, 56.2529, -30.9794, 0.23", "-4.2456, 56.494, -31.3743, 0.23", "-5.79054, 57.1858, -32.5777, 0.91", "-12.5183, 63.4418, -35.312, 0.91", "-18.5887, 70.2485, -38.3233, 0.91" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-26.3326, 8.59911, 19.7796, 0.23", "-26.1519, 8.35814, 22.066, 0.23", "-26.0042, 8.16101, 23.9364, 0.23", "-25.6805, 7.72919, 28.0336, 0.23", "-25.4329, 7.39876, 31.1687, 0.23", "-25.0648, 6.90763, 35.8287, 0.23" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-26.3326, 8.59911, 19.7796, 0.23", "-29.4652, 9.2972, 20.9757, 0.23", "-32.6187, 10.0265, 22.0502, 0.23", "-36.8238, 11.0869, 23.4219, 0.23", "-38.7532, 11.6918, 24.0515, 0.23", "-40.9154, 12.501, 24.778, 0.23", "-43.1791, 13.52, 25.62, 0.23", "-45.4176, 14.6809, 26.464, 0.23", "-46.9007, 15.5541, 26.9819, 0.23", "-49.589, 17.4272, 27.9642, 0.23", "-51.2445, 18.7326, 28.6414, 0.23", "-53.6362, 21.0322, 29.8624, 0.23" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-20.1465, 10.7595, 10.7272, 0.23", "-20.5464, 13.9242, 10.7921, 0.23", "-20.82, 16.8499, 10.8438, 0.23", "-21.0149, 19.6737, 10.8652, 0.23", "-21.128, 23.619, 11.0308, 0.68", "-21.1211, 27.527, 11.3108, 0.23", "-21.0878, 30.2346, 11.6057, 0.45", "-20.8677, 33.1, 12.4447, 0.23", "-20.4945, 34.378, 13.2571, 0.23", "-19.5035, 36.4843, 15.112, 0.23", "-18.894, 37.2953, 16.2019, 0.23", "-17.8137, 38.2964, 18.2633, 0.23", "-15.0806, 40.2758, 23.97, 0.23", "-13.0992, 41.3569, 28.2376, 0.23" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-20.1465, 10.7595, 10.7272, 0.45", "-20.9947, 12.5142, 10.1105, 0.45", "-21.8979, 14.7846, 9.39333, 0.45", "-22.9639, 17.9472, 8.41804, 0.23", "-23.4233, 19.5464, 7.91567, 0.45", "-23.8749, 21.4982, 7.34536, 0.23", "-24.3275, 24.0281, 6.70136, 0.23", "-24.5704, 26.5602, 6.11217, 0.23", "-24.6701, 28.4712, 5.72952, 0.23", "-24.774, 31.7863, 5.20293, 0.45", "-24.836, 34.3754, 4.83173, 0.23", "-24.9329, 37.3627, 4.61606, 0.23", "-25.0226, 38.3319, 4.59646, 0.23", "-25.3392, 40.1509, 4.72546, 0.23", "-25.7375, 41.6687, 4.92919, 0.23", "-26.8661, 44.8036, 5.7116, 0.23", "-29.1639, 49.559, 7.18344, 0.23", "-30.686, 52.0508, 8.14886, 0.45", "-32.9854, 55.3009, 9.6642, 0.23", "-34.713, 57.6039, 10.8409, 0.91", "-38.1977, 61.8841, 13.2775, 0.23", "-40.4886, 64.311, 14.8285, 0.23", "-42.7074, 66.2739, 16.2619, 0.23", "-44.2674, 67.5178, 17.3742, 0.23" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_20", "dend_11", "dend_0", "dend_13", "dend_12", "dend_10", "dend_1", "dend_19", "dend_14", "dend_3", "dend_2", "dend_18", "dend_15", "dend_7", "dend_4", "dend_17", "dend_16", "dend_9", "dend_8", "dend_6", "dend_5" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_20", "dend_11", "dend_0", "dend_13", "dend_12", "dend_10", "dend_1", "dend_19", "dend_14", "dend_3", "dend_2", "dend_18", "dend_15", "dend_7", "dend_4", "dend_17", "dend_16", "dend_9", "dend_8", "dend_6", "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_11", "dend_11", "dend_11", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_13", "dend_13", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_1", "dend_1", "axon_1", "axon_1", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_14", "dend_14", "dend_3", "dend_3", "dend_3", "dend_3", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_4", "dend_4", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.999855",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.042115",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0012239999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.001693",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.386953",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "8.0E-6",
    "erev" : "-63.854015"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.5399997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.039862998",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "5.2299997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.0054459996",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.503893",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "1.0E-4",
    "erev" : "-67.1289"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.78E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.15074699",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009017",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "4.0E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.0032419998",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "1.74E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bNAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bNAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bNAC219_L1_SLAC_8a5944f8ac_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_20, id: dend_20, parent: soma_0
create dend_20
public dend_20
// Section: dend_11, id: dend_11, parent: soma_0
create dend_11
public dend_11
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_13, id: dend_13, parent: dend_11
create dend_13
public dend_13
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12
// Section: dend_10, id: dend_10, parent: dend_0
create dend_10
public dend_10
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_19, id: dend_19, parent: dend_13
create dend_19
public dend_19
// Section: dend_14, id: dend_14, parent: dend_13
create dend_14
public dend_14
// Section: dend_3, id: dend_3, parent: dend_1
create dend_3
public dend_3
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_18, id: dend_18, parent: dend_14
create dend_18
public dend_18
// Section: dend_15, id: dend_15, parent: dend_14
create dend_15
public dend_15
// Section: dend_7, id: dend_7, parent: dend_3
create dend_7
public dend_7
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_17, id: dend_17, parent: dend_15
create dend_17
public dend_17
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_9, id: dend_9, parent: dend_7
create dend_9
public dend_9
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_6, id: dend_6, parent: dend_4
create dend_6
public dend_6
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_20, dend_11, dend_0, dend_13, dend_12, dend_10, dend_1, dend_19, dend_14, dend_3, dend_2, dend_18, dend_15, dend_7, dend_4, dend_17, dend_16, dend_9, dend_8, dend_6, dend_5]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_20, dend_11, dend_0, dend_13, dend_12, dend_10, dend_1, dend_19, dend_14, dend_3, dend_2, dend_18, dend_15, dend_7, dend_4, dend_17, dend_16, dend_9, dend_8, dend_6, dend_5]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_19
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_11, dend_11, dend_11, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_1, dend_1, axon_1, axon_1, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_14, dend_14, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_7, dend_7, dend_7, dend_7, dend_7, dend_4, dend_4, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bNAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bNAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_20(0), soma_0(0.49999993958706773)
    connect dend_11(0), soma_0(0.49999993958706773)
    connect dend_0(0), soma_0(0.49999993958706773)
    connect axon_0(0), soma_0(1.0)
    connect dend_13(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)
    connect dend_10(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_19(0), dend_13(1.0)
    connect dend_14(0), dend_13(1.0)
    connect dend_3(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_18(0), dend_14(1.0)
    connect dend_15(0), dend_14(1.0)
    connect dend_7(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_17(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_9(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_6(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -5.08922, 1.28627, 0.0, 2.42054 ) }
    soma_0 { pt3dadd( -4.51889, 1.15822, 0.0, 4.18378 ) }
    soma_0 { pt3dadd( -3.94856, 1.03016, 0.0, 5.5029 ) }
    soma_0 { pt3dadd( -3.37823, 0.902109, 0.0, 6.33773 ) }
    soma_0 { pt3dadd( -2.8079, 0.774056, 0.0, 7.18195 ) }
    soma_0 { pt3dadd( -2.23757, 0.646003, 0.0, 7.81416 ) }
    soma_0 { pt3dadd( -1.66724, 0.51795, 0.0, 8.41051 ) }
    soma_0 { pt3dadd( -1.09691, 0.389898, 0.0, 8.80044 ) }
    soma_0 { pt3dadd( -0.526577, 0.261845, 0.0, 9.08666 ) }
    soma_0 { pt3dadd( 0.0437534, 0.133792, 0.0, 9.32431 ) }
    soma_0 { pt3dadd( 0.614084, 0.00573877, 0.0, 9.48777 ) }
    soma_0 { pt3dadd( 1.18441, -0.122314, 0.0, 9.3685 ) }
    soma_0 { pt3dadd( 1.75474, -0.250367, 0.0, 9.22465 ) }
    soma_0 { pt3dadd( 2.32507, -0.37842, 0.0, 9.06336 ) }
    soma_0 { pt3dadd( 2.89541, -0.506473, 0.0, 8.79916 ) }
    soma_0 { pt3dadd( 3.46574, -0.634526, 0.0, 8.40876 ) }
    soma_0 { pt3dadd( 4.03607, -0.762579, 0.0, 8.00283 ) }
    soma_0 { pt3dadd( 4.6064, -0.890632, 0.0, 7.23974 ) }
    soma_0 { pt3dadd( 5.17673, -1.01868, 0.0, 5.67467 ) }
    soma_0 { pt3dadd( 5.74706, -1.14674, 0.0, 3.94277 ) }
    soma_0 { pt3dadd( 6.31739, -1.27479, 0.0, 2.27811 ) }
    // Section: dend_20, id: dend_20, parent: soma_0 (entry count 21/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 4.08705, -1.26195, 3.48, 0.68 ) }
    dend_20 { pt3dadd( 5.98005, -1.41281, 6.60652, 0.68 ) }
    dend_20 { pt3dadd( 8.07443, -1.68008, 10.1909, 0.23 ) }
    dend_20 { pt3dadd( 10.7492, -2.16984, 14.5886, 0.23 ) }
    dend_20 { pt3dadd( 12.5507, -2.5362, 17.44, 0.23 ) }
    dend_20 { pt3dadd( 14.7836, -2.9901, 20.8096, 0.23 ) }
    dend_20 { pt3dadd( 16.1472, -3.24642, 22.7554, 0.23 ) }
    dend_20 { pt3dadd( 19.6346, -3.91031, 27.2643, 0.23 ) }
    dend_20 { pt3dadd( 22.1346, -4.27369, 30.1615, 0.45 ) }
    dend_20 { pt3dadd( 23.7483, -4.39484, 31.7811, 0.23 ) }
    dend_20 { pt3dadd( 25.3174, -4.44399, 33.1813, 0.23 ) }
    dend_20 { pt3dadd( 26.8425, -4.41054, 34.3239, 0.23 ) }
    dend_20 { pt3dadd( 28.929, -4.25264, 35.6742, 0.23 ) }
    dend_20 { pt3dadd( 32.1353, -3.91535, 37.3876, 0.23 ) }
    dend_20 { pt3dadd( 33.9025, -3.66563, 38.2571, 0.68 ) }
    dend_20 { pt3dadd( 37.8921, -3.0801, 40.2419, 0.23 ) }
    dend_20 { pt3dadd( 41.1486, -2.58082, 41.8442, 0.23 ) }
    dend_20 { pt3dadd( 44.0077, -2.16624, 43.2439, 0.45 ) }
    dend_20 { pt3dadd( 46.8985, -1.75457, 44.6906, 0.23 ) }
    dend_20 { pt3dadd( 50.9472, -1.10786, 46.7832, 0.45 ) }
    dend_20 { pt3dadd( 54.1926, -0.497213, 48.6484, 0.23 ) }
    dend_20 { pt3dadd( 56.0182, -0.174572, 49.7798, 0.68 ) }
    dend_20 { pt3dadd( 59.0971, 0.395024, 51.8526, 0.23 ) }
    dend_20 { pt3dadd( 62.1781, 0.966886, 54.0427, 0.23 ) }
    dend_20 { pt3dadd( 64.0267, 1.29326, 55.4235, 0.45 ) }
    dend_20 { pt3dadd( 68.0594, 1.83911, 58.6626, 0.23 ) }
    dend_20 { pt3dadd( 72.0944, 2.3245, 61.889, 0.23 ) }
    // Section: dend_11, id: dend_11, parent: soma_0 (entry count 48/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 5.05705, 1.9053, -5.52, 2.27 ) }
    dend_11 { pt3dadd( 6.55974, 4.24307, -6.80136, 2.27 ) }
    dend_11 { pt3dadd( 8.04385, 6.55194, -8.06688, 1.14 ) }
    dend_11 { pt3dadd( 8.18918, 6.77804, -8.19081, 1.14 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 52/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -3.38295, 1.36205, 4.12, 0.91 ) }
    dend_0 { pt3dadd( -4.47686, 1.76706, 4.55425, 0.91 ) }
    dend_0 { pt3dadd( -6.25402, 2.42505, 5.25973, 0.45 ) }
    dend_0 { pt3dadd( -7.5109, 2.89041, 5.75868, 0.45 ) }
    dend_0 { pt3dadd( -8.6229, 3.30212, 6.20011, 0.45 ) }
    dend_0 { pt3dadd( -10.042, 3.82753, 6.76344, 0.68 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 58/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 6.31739, -1.27479, 0.0, 0.91 ) }
    axon_0 { pt3dadd( 20.953, -4.56084, 0.0, 0.91 ) }
    axon_0 { pt3dadd( 35.5887, -7.8469, 0.0, 0.91 ) }
    // Section: dend_13, id: dend_13, parent: dend_11 (entry count 61/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 8.18918, 6.77804, -8.19081, 1.14 ) }
    dend_13 { pt3dadd( 9.55331, 9.1396, -8.59711, 1.14 ) }
    dend_13 { pt3dadd( 11.6253, 12.7266, -9.21423, 1.14 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 64/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 8.18918, 6.77804, -8.19081, 0.23 ) }
    dend_12 { pt3dadd( 8.19445, 8.19473, -6.37613, 0.23 ) }
    dend_12 { pt3dadd( 8.37959, 10.8053, -3.50329, 0.68 ) }
    dend_12 { pt3dadd( 8.54578, 12.6397, -1.77755, 0.68 ) }
    dend_12 { pt3dadd( 8.8125, 15.7188, 0.799704, 0.23 ) }
    dend_12 { pt3dadd( 9.19445, 19.7743, 3.85956, 0.23 ) }
    dend_12 { pt3dadd( 9.49304, 22.5606, 5.77361, 0.23 ) }
    dend_12 { pt3dadd( 9.93617, 25.3058, 7.40074, 0.23 ) }
    dend_12 { pt3dadd( 10.7326, 29.2209, 9.13489, 0.23 ) }
    dend_12 { pt3dadd( 11.1769, 31.2047, 9.6703, 0.45 ) }
    dend_12 { pt3dadd( 11.7428, 33.4592, 9.93431, 0.23 ) }
    dend_12 { pt3dadd( 12.1714, 35.0843, 9.9313, 0.23 ) }
    dend_12 { pt3dadd( 12.7121, 36.8698, 9.90417, 0.23 ) }
    dend_12 { pt3dadd( 13.7242, 39.3479, 9.86032, 0.23 ) }
    dend_12 { pt3dadd( 15.8862, 43.3518, 9.25873, 0.23 ) }
    dend_12 { pt3dadd( 16.9242, 44.8447, 8.86144, 0.23 ) }
    dend_12 { pt3dadd( 17.639, 45.6836, 8.55468, 0.23 ) }
    dend_12 { pt3dadd( 19.9299, 48.1914, 7.57932, 0.23 ) }
    dend_12 { pt3dadd( 23.0564, 51.2775, 6.21726, 0.23 ) }
    dend_12 { pt3dadd( 27.9392, 55.1632, 3.78967, 0.23 ) }
    dend_12 { pt3dadd( 30.2539, 56.5869, 2.41825, 0.23 ) }
    dend_12 { pt3dadd( 32.0521, 57.5185, 1.18212, 0.23 ) }
    dend_12 { pt3dadd( 36.216, 68.8971, 6.09899, 0.23 ) }
    dend_12 { pt3dadd( 41.7798, 80.1858, 9.63548, 0.23 ) }
    // Section: dend_10, id: dend_10, parent: dend_0 (entry count 88/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -10.042, 3.82753, 6.76344, 0.23 ) }
    dend_10 { pt3dadd( -11.2969, 5.33152, 6.02029, 0.23 ) }
    dend_10 { pt3dadd( -12.7964, 6.98659, 5.04922, 0.23 ) }
    dend_10 { pt3dadd( -13.7208, 7.79259, 4.31301, 0.23 ) }
    dend_10 { pt3dadd( -15.0687, 8.70061, 3.16484, 0.23 ) }
    dend_10 { pt3dadd( -16.7312, 9.56522, 1.68932, 0.23 ) }
    dend_10 { pt3dadd( -18.087, 10.1344, 0.469412, 0.23 ) }
    dend_10 { pt3dadd( -20.5728, 10.8473, -1.66772, 0.45 ) }
    dend_10 { pt3dadd( -23.8608, 11.4889, -4.36477, 0.23 ) }
    dend_10 { pt3dadd( -25.6186, 11.7523, -5.76394, 0.68 ) }
    dend_10 { pt3dadd( -28.5976, 12.1873, -8.13207, 0.23 ) }
    dend_10 { pt3dadd( -31.8827, 12.8068, -10.7194, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_10 { pt3dadd( -33.9119, 13.3772, -12.3529, 0.23 ) }
    dend_10 { pt3dadd( -35.0794, 13.8811, -13.3717, 0.23 ) }
    dend_10 { pt3dadd( -36.1431, 14.5616, -14.3633, 0.23 ) }
    dend_10 { pt3dadd( -38.1036, 16.1089, -16.527, 0.23 ) }
    dend_10 { pt3dadd( -39.9806, 17.8371, -18.8138, 0.23 ) }
    dend_10 { pt3dadd( -42.069, 20.0693, -21.7121, 0.23 ) }
    dend_10 { pt3dadd( -43.6455, 21.936, -24.1953, 0.23 ) }
    dend_10 { pt3dadd( -44.8764, 23.4322, -26.2733, 0.23 ) }
    dend_10 { pt3dadd( -47.0902, 25.9225, -30.1088, 0.23 ) }
    dend_10 { pt3dadd( -54.9832, 28.3692, -35.5799, 0.23 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 10/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -10.042, 3.82753, 6.76344, 0.23 ) }
    dend_1 { pt3dadd( -11.7554, 3.48699, 8.13306, 0.23 ) }
    dend_1 { pt3dadd( -13.3716, 3.16577, 9.42498, 0.45 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 13/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 35.5887, -7.8469, 0.0, 0.12 ) }
    axon_1 { pt3dadd( 50.2243, -11.133, 0.0, 0.12 ) }
    axon_1 { pt3dadd( 64.8599, -14.419, 0.0, 0.12 ) }
    // Section: dend_19, id: dend_19, parent: dend_13 (entry count 16/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 11.6253, 12.7266, -9.21423, 0.45 ) }
    dend_19 { pt3dadd( 12.7093, 13.9066, -8.65527, 0.45 ) }
    dend_19 { pt3dadd( 15.2044, 16.9203, -7.51895, 0.68 ) }
    dend_19 { pt3dadd( 16.0398, 18.0007, -7.19184, 0.23 ) }
    dend_19 { pt3dadd( 17.2368, 19.6053, -6.77895, 0.45 ) }
    dend_19 { pt3dadd( 19.0417, 21.9792, -6.21015, 0.45 ) }
    dend_19 { pt3dadd( 20.1319, 23.3504, -5.93651, 0.68 ) }
    dend_19 { pt3dadd( 21.7257, 25.3093, -5.71946, 0.23 ) }
    dend_19 { pt3dadd( 23.3872, 27.2208, -5.72243, 0.23 ) }
    dend_19 { pt3dadd( 24.4409, 28.3102, -5.78136, 0.23 ) }
    dend_19 { pt3dadd( 26.217, 29.956, -6.02311, 0.23 ) }
    dend_19 { pt3dadd( 27.7538, 31.2692, -6.33629, 0.23 ) }
    dend_19 { pt3dadd( 29.3073, 32.4915, -6.68034, 0.23 ) }
    dend_19 { pt3dadd( 30.7768, 33.6077, -7.01776, 0.23 ) }
    dend_19 { pt3dadd( 31.8513, 34.4629, -7.27258, 0.45 ) }
    dend_19 { pt3dadd( 33.4796, 35.9169, -7.65527, 0.23 ) }
    dend_19 { pt3dadd( 34.8357, 37.3752, -7.96403, 0.23 ) }
    dend_19 { pt3dadd( 35.4944, 38.2614, -8.06842, 0.23 ) }
    dend_19 { pt3dadd( 36.6994, 40.2319, -8.22967, 0.23 ) }
    dend_19 { pt3dadd( 37.3652, 41.3666, -8.38905, 0.23 ) }
    dend_19 { pt3dadd( 38.0497, 42.4193, -8.62534, 0.23 ) }
    dend_19 { pt3dadd( 38.7388, 43.3303, -8.90198, 0.23 ) }
    dend_19 { pt3dadd( 40.3388, 45.0873, -9.80671, 0.45 ) }
    dend_19 { pt3dadd( 41.6242, 46.2997, -10.6892, 0.45 ) }
    dend_19 { pt3dadd( 43.8558, 47.9955, -12.3387, 0.23 ) }
    dend_19 { pt3dadd( 45.4115, 49.0218, -13.523, 0.23 ) }
    dend_19 { pt3dadd( 46.0791, 49.3969, -14.0469, 0.45 ) }
    dend_19 { pt3dadd( 48.5536, 50.5296, -16.0395, 0.23 ) }
    dend_19 { pt3dadd( 49.9407, 51.0021, -17.2118, 0.23 ) }
    dend_19 { pt3dadd( 50.7608, 51.2446, -17.9189, 0.45 ) }
    dend_19 { pt3dadd( 57.9626, 56.1419, -18.987, 0.45 ) }
    // Section: dend_14, id: dend_14, parent: dend_13 (entry count 47/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 11.6253, 12.7266, -9.21423, 0.68 ) }
    dend_14 { pt3dadd( 11.3109, 14.0651, -9.63442, 0.68 ) }
    dend_14 { pt3dadd( 10.7539, 16.4362, -10.3788, 0.45 ) }
    // Section: dend_3, id: dend_3, parent: dend_1 (entry count 50/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -13.3716, 3.16577, 9.42498, 0.45 ) }
    dend_3 { pt3dadd( -14.5499, 3.96541, 9.92783, 0.45 ) }
    dend_3 { pt3dadd( -16.2565, 5.12364, 10.6562, 0.45 ) }
    dend_3 { pt3dadd( -18.5345, 6.66965, 11.6284, 0.45 ) }
    dend_3 { pt3dadd( -19.5162, 7.33586, 12.0473, 0.45 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 55/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -13.3716, 3.16577, 9.42498, 0.23 ) }
    dend_2 { pt3dadd( -15.5274, 2.42521, 9.68369, 0.23 ) }
    dend_2 { pt3dadd( -16.7455, 2.03337, 9.95483, 0.23 ) }
    dend_2 { pt3dadd( -18.8805, 1.5656, 10.5753, 0.23 ) }
    dend_2 { pt3dadd( -19.8072, 1.38668, 10.9364, 0.45 ) }
    dend_2 { pt3dadd( -22.2289, 1.00008, 12.0301, 0.23 ) }
    dend_2 { pt3dadd( -23.8348, 0.7571, 12.7676, 0.68 ) }
    dend_2 { pt3dadd( -26.2638, 0.429098, 13.9792, 0.23 ) }
    dend_2 { pt3dadd( -29.8899, -0.0983145, 15.8375, 0.23 ) }
    dend_2 { pt3dadd( -32.9929, -0.607373, 17.3983, 0.23 ) }
    dend_2 { pt3dadd( -35.7208, -1.1084, 18.651, 0.23 ) }
    dend_2 { pt3dadd( -37.4814, -1.48661, 19.3503, 0.23 ) }
    dend_2 { pt3dadd( -39.1558, -1.89861, 19.8889, 0.23 ) }
    dend_2 { pt3dadd( -40.4092, -2.23676, 20.1742, 0.23 ) }
    dend_2 { pt3dadd( -42.7276, -2.92761, 20.5524, 0.23 ) }
    dend_2 { pt3dadd( -44.729, -3.52975, 20.8349, 0.23 ) }
    dend_2 { pt3dadd( -46.4018, -4.03804, 21.1115, 0.23 ) }
    dend_2 { pt3dadd( -49.2145, -4.88063, 21.6943, 0.23 ) }
    dend_2 { pt3dadd( -51.3712, -5.54803, 22.1792, 0.23 ) }
    dend_2 { pt3dadd( -54.1357, -6.47511, 22.9084, 0.23 ) }
    dend_2 { pt3dadd( -56.9865, -7.5188, 23.9835, 0.23 ) }
    dend_2 { pt3dadd( -59.3342, -8.5014, 25.1593, 0.23 ) }
    dend_2 { pt3dadd( -61.3608, -9.5663, 26.543, 0.23 ) }
    dend_2 { pt3dadd( -62.4039, -10.339, 27.5409, 0.23 ) }
    dend_2 { pt3dadd( -63.5818, -11.7714, 29.3088, 0.23 ) }
    dend_2 { pt3dadd( -64.9208, -14.8082, 32.9823, 0.23 ) }
    dend_2 { pt3dadd( -65.1695, -16.3057, 34.681, 0.68 ) }
    dend_2 { pt3dadd( -65.0169, -19.1025, 37.6032, 0.23 ) }
    dend_2 { pt3dadd( -64.606, -21.1768, 39.4833, 0.23 ) }
    dend_2 { pt3dadd( -63.461, -24.9507, 42.3069, 0.45 ) }
    dend_2 { pt3dadd( -62.213, -28.1886, 44.0873, 0.23 ) }
    dend_2 { pt3dadd( -61.0582, -30.8624, 45.0414, 0.23 ) }
    dend_2 { pt3dadd( -59.7651, -33.6828, 45.7221, 0.68 ) }
    dend_2 { pt3dadd( -58.342, -36.6416, 46.0632, 0.23 ) }
    dend_2 { pt3dadd( -57.2427, -38.9622, 46.0946, 0.23 ) }
    dend_2 { pt3dadd( -56.0323, -41.6578, 45.9115, 0.45 ) }
    dend_2 { pt3dadd( -55.198, -43.5838, 45.8144, 0.23 ) }
    dend_2 { pt3dadd( -54.4729, -45.3716, 45.8634, 0.68 ) }
    dend_2 { pt3dadd( -53.7364, -47.2952, 46.0457, 0.23 ) }
    dend_2 { pt3dadd( -53.2385, -48.5244, 46.2665, 1.14 ) }
    dend_2 { pt3dadd( -52.3962, -50.4726, 46.668, 0.23 ) }
    dend_2 { pt3dadd( -50.665, -54.3314, 47.5763, 0.23 ) }
    dend_2 { pt3dadd( -50.3455, -55.0283, 47.7584, 0.68 ) }
    dend_2 { pt3dadd( -49.3092, -57.2132, 48.3482, 0.23 ) }
    dend_2 { pt3dadd( -48.5272, -58.7683, 48.8047, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_2 { pt3dadd( -47.0786, -61.5486, 49.563, 0.23 ) }
    // Section: dend_18, id: dend_18, parent: dend_14 (entry count 1/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 10.7539, 16.4362, -10.3788, 0.23 ) }
    dend_18 { pt3dadd( 9.8739, 20.1056, -9.27286, 0.23 ) }
    dend_18 { pt3dadd( 9.05547, 23.3237, -8.40573, 0.23 ) }
    dend_18 { pt3dadd( 8.6422, 24.7693, -8.13645, 0.23 ) }
    dend_18 { pt3dadd( 7.61054, 27.8229, -7.81349, 0.45 ) }
    dend_18 { pt3dadd( 6.73043, 29.9106, -7.73137, 0.45 ) }
    dend_18 { pt3dadd( 4.82034, 33.7349, -7.75016, 0.23 ) }
    dend_18 { pt3dadd( 3.29802, 36.1161, -8.04914, 0.68 ) }
    dend_18 { pt3dadd( 1.10407, 38.8265, -8.64701, 0.23 ) }
    dend_18 { pt3dadd( -0.837496, 40.8527, -9.24278, 0.68 ) }
    dend_18 { pt3dadd( -3.17242, 42.9714, -9.98842, 0.23 ) }
    dend_18 { pt3dadd( -4.3128, 43.8897, -10.3243, 0.23 ) }
    dend_18 { pt3dadd( -5.6477, 44.8685, -10.5882, 0.68 ) }
    dend_18 { pt3dadd( -7.14188, 46.0576, -10.626, 0.23 ) }
    dend_18 { pt3dadd( -8.4519, 47.3917, -10.248, 0.23 ) }
    dend_18 { pt3dadd( -9.67674, 49.0596, -9.37911, 0.23 ) }
    dend_18 { pt3dadd( -10.8736, 51.0806, -8.03691, 0.23 ) }
    dend_18 { pt3dadd( -11.9571, 53.1387, -6.55316, 0.23 ) }
    dend_18 { pt3dadd( -12.6721, 54.5547, -5.38751, 0.23 ) }
    dend_18 { pt3dadd( -14.1517, 57.3291, -2.75506, 0.23 ) }
    dend_18 { pt3dadd( -15.8162, 60.1764, 0.148594, 0.23 ) }
    dend_18 { pt3dadd( -16.6986, 61.4871, 1.58105, 0.23 ) }
    dend_18 { pt3dadd( -17.6462, 62.6977, 2.96095, 0.68 ) }
    dend_18 { pt3dadd( -20.1761, 65.5685, 6.32894, 0.23 ) }
    dend_18 { pt3dadd( -22.7936, 68.3085, 9.6124, 0.23 ) }
    dend_18 { pt3dadd( -25.3366, 70.707, 12.5004, 0.23 ) }
    dend_18 { pt3dadd( -28.0637, 73.0742, 15.3052, 0.68 ) }
    dend_18 { pt3dadd( -29.8971, 74.5756, 17.1094, 0.23 ) }
    dend_18 { pt3dadd( -30.9563, 75.3758, 18.1336, 0.23 ) }
    // Section: dend_15, id: dend_15, parent: dend_14 (entry count 30/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 10.7539, 16.4362, -10.3788, 0.45 ) }
    dend_15 { pt3dadd( 11.911, 19.803, -11.7348, 0.45 ) }
    dend_15 { pt3dadd( 13.0364, 23.2668, -13.1869, 0.45 ) }
    dend_15 { pt3dadd( 14.0326, 26.7221, -14.6368, 0.45 ) }
    dend_15 { pt3dadd( 14.7127, 29.0811, -15.6266, 0.45 ) }
    dend_15 { pt3dadd( 15.6459, 32.3179, -16.9848, 0.45 ) }
    dend_15 { pt3dadd( 16.2026, 34.2488, -17.7951, 0.45 ) }
    dend_15 { pt3dadd( 16.7677, 36.4512, -18.7961, 0.45 ) }
    dend_15 { pt3dadd( 17.2989, 38.9655, -19.869, 0.45 ) }
    // Section: dend_7, id: dend_7, parent: dend_3 (entry count 39/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -19.5162, 7.33586, 12.0473, 0.23 ) }
    dend_7 { pt3dadd( -21.2606, 7.65915, 14.0262, 0.23 ) }
    dend_7 { pt3dadd( -22.8517, 7.95402, 15.8311, 0.23 ) }
    dend_7 { pt3dadd( -24.7162, 8.29956, 17.9461, 0.45 ) }
    dend_7 { pt3dadd( -25.9827, 8.53428, 19.3828, 0.23 ) }
    dend_7 { pt3dadd( -26.3326, 8.59911, 19.7796, 0.23 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 45/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -19.5162, 7.33586, 12.0473, 0.23 ) }
    dend_4 { pt3dadd( -19.9078, 9.46319, 11.2271, 0.23 ) }
    dend_4 { pt3dadd( -20.1465, 10.7595, 10.7272, 0.68 ) }
    // Section: dend_17, id: dend_17, parent: dend_15 (entry count 48/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 17.2989, 38.9655, -19.869, 0.23 ) }
    dend_17 { pt3dadd( 18.1035, 39.6451, -20.8154, 0.23 ) }
    dend_17 { pt3dadd( 19.8989, 40.8821, -22.8937, 0.23 ) }
    dend_17 { pt3dadd( 20.4659, 41.2437, -23.539, 0.23 ) }
    dend_17 { pt3dadd( 21.0736, 41.6312, -24.2305, 0.23 ) }
    dend_17 { pt3dadd( 22.6762, 42.6531, -26.0543, 0.45 ) }
    dend_17 { pt3dadd( 24.168, 43.6043, -27.7519, 0.23 ) }
    dend_17 { pt3dadd( 25.4601, 44.2895, -29.1846, 0.45 ) }
    dend_17 { pt3dadd( 26.8925, 44.8528, -30.6395, 0.23 ) }
    dend_17 { pt3dadd( 31.5432, 48.2527, -36.9405, 0.23 ) }
    dend_17 { pt3dadd( 35.9373, 53.5404, -42.0769, 0.23 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 59/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 17.2989, 38.9655, -19.869, 0.23 ) }
    dend_16 { pt3dadd( 15.335, 41.0852, -20.4671, 0.23 ) }
    dend_16 { pt3dadd( 13.4795, 43.0272, -21.1014, 0.45 ) }
    dend_16 { pt3dadd( 12.5658, 43.9924, -21.423, 0.23 ) }
    dend_16 { pt3dadd( 11.4728, 45.2505, -21.8362, 0.23 ) }
    dend_16 { pt3dadd( 10.3202, 46.6549, -22.3032, 0.68 ) }
    dend_16 { pt3dadd( 8.90873, 48.3119, -22.8904, 0.23 ) }
    dend_16 { pt3dadd( 8.33159, 48.9696, -23.1609, 0.23 ) }
    dend_16 { pt3dadd( 7.62091, 49.7266, -23.5701, 0.23 ) }
    dend_16 { pt3dadd( 6.21074, 51.0622, -24.392, 0.23 ) }
    dend_16 { pt3dadd( 5.11855, 51.91, -25.0609, 0.23 ) }
    dend_16 { pt3dadd( 3.86223, 52.7081, -25.8545, 0.23 ) }
    dend_16 { pt3dadd( 2.35337, 53.5257, -26.835, 0.23 ) }
    dend_16 { pt3dadd( 0.780316, 54.3614, -27.892, 0.23 ) }
    dend_16 { pt3dadd( -1.33625, 55.3363, -29.3365, 0.45 ) }
    dend_16 { pt3dadd( -3.00798, 55.9801, -30.4769, 0.23 ) }
    dend_16 { pt3dadd( -3.72003, 56.2529, -30.9794, 0.23 ) }
    dend_16 { pt3dadd( -4.2456, 56.494, -31.3743, 0.23 ) }
    dend_16 { pt3dadd( -5.79054, 57.1858, -32.5777, 0.91 ) }
    dend_16 { pt3dadd( -12.5183, 63.4418, -35.312, 0.91 ) }
    dend_16 { pt3dadd( -18.5887, 70.2485, -38.3233, 0.91 ) }
    // Section: dend_9, id: dend_9, parent: dend_7 (entry count 80/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -26.3326, 8.59911, 19.7796, 0.23 ) }
    dend_9 { pt3dadd( -26.1519, 8.35814, 22.066, 0.23 ) }
    dend_9 { pt3dadd( -26.0042, 8.16101, 23.9364, 0.23 ) }
    dend_9 { pt3dadd( -25.6805, 7.72919, 28.0336, 0.23 ) }
    dend_9 { pt3dadd( -25.4329, 7.39876, 31.1687, 0.23 ) }
    dend_9 { pt3dadd( -25.0648, 6.90763, 35.8287, 0.23 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 86/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -26.3326, 8.59911, 19.7796, 0.23 ) }
    dend_8 { pt3dadd( -29.4652, 9.2972, 20.9757, 0.23 ) }
    dend_8 { pt3dadd( -32.6187, 10.0265, 22.0502, 0.23 ) }
    dend_8 { pt3dadd( -36.8238, 11.0869, 23.4219, 0.23 ) }
    dend_8 { pt3dadd( -38.7532, 11.6918, 24.0515, 0.23 ) }
    dend_8 { pt3dadd( -40.9154, 12.501, 24.778, 0.23 ) }
    dend_8 { pt3dadd( -43.1791, 13.52, 25.62, 0.23 ) }
    dend_8 { pt3dadd( -45.4176, 14.6809, 26.464, 0.23 ) }
    dend_8 { pt3dadd( -46.9007, 15.5541, 26.9819, 0.23 ) }
    dend_8 { pt3dadd( -49.589, 17.4272, 27.9642, 0.23 ) }
    dend_8 { pt3dadd( -51.2445, 18.7326, 28.6414, 0.23 ) }
    dend_8 { pt3dadd( -53.6362, 21.0322, 29.8624, 0.23 ) }
    // Section: dend_6, id: dend_6, parent: dend_4 (entry count 98/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -20.1465, 10.7595, 10.7272, 0.23 ) }
    dend_6 { pt3dadd( -20.5464, 13.9242, 10.7921, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_6 { pt3dadd( -20.82, 16.8499, 10.8438, 0.23 ) }
    dend_6 { pt3dadd( -21.0149, 19.6737, 10.8652, 0.23 ) }
    dend_6 { pt3dadd( -21.128, 23.619, 11.0308, 0.68 ) }
    dend_6 { pt3dadd( -21.1211, 27.527, 11.3108, 0.23 ) }
    dend_6 { pt3dadd( -21.0878, 30.2346, 11.6057, 0.45 ) }
    dend_6 { pt3dadd( -20.8677, 33.1, 12.4447, 0.23 ) }
    dend_6 { pt3dadd( -20.4945, 34.378, 13.2571, 0.23 ) }
    dend_6 { pt3dadd( -19.5035, 36.4843, 15.112, 0.23 ) }
    dend_6 { pt3dadd( -18.894, 37.2953, 16.2019, 0.23 ) }
    dend_6 { pt3dadd( -17.8137, 38.2964, 18.2633, 0.23 ) }
    dend_6 { pt3dadd( -15.0806, 40.2758, 23.97, 0.23 ) }
    dend_6 { pt3dadd( -13.0992, 41.3569, 28.2376, 0.23 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 12/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -20.1465, 10.7595, 10.7272, 0.45 ) }
    dend_5 { pt3dadd( -20.9947, 12.5142, 10.1105, 0.45 ) }
    dend_5 { pt3dadd( -21.8979, 14.7846, 9.39333, 0.45 ) }
    dend_5 { pt3dadd( -22.9639, 17.9472, 8.41804, 0.23 ) }
    dend_5 { pt3dadd( -23.4233, 19.5464, 7.91567, 0.45 ) }
    dend_5 { pt3dadd( -23.8749, 21.4982, 7.34536, 0.23 ) }
    dend_5 { pt3dadd( -24.3275, 24.0281, 6.70136, 0.23 ) }
    dend_5 { pt3dadd( -24.5704, 26.5602, 6.11217, 0.23 ) }
    dend_5 { pt3dadd( -24.6701, 28.4712, 5.72952, 0.23 ) }
    dend_5 { pt3dadd( -24.774, 31.7863, 5.20293, 0.45 ) }
    dend_5 { pt3dadd( -24.836, 34.3754, 4.83173, 0.23 ) }
    dend_5 { pt3dadd( -24.9329, 37.3627, 4.61606, 0.23 ) }
    dend_5 { pt3dadd( -25.0226, 38.3319, 4.59646, 0.23 ) }
    dend_5 { pt3dadd( -25.3392, 40.1509, 4.72546, 0.23 ) }
    dend_5 { pt3dadd( -25.7375, 41.6687, 4.92919, 0.23 ) }
    dend_5 { pt3dadd( -26.8661, 44.8036, 5.7116, 0.23 ) }
    dend_5 { pt3dadd( -29.1639, 49.559, 7.18344, 0.23 ) }
    dend_5 { pt3dadd( -30.686, 52.0508, 8.14886, 0.45 ) }
    dend_5 { pt3dadd( -32.9854, 55.3009, 9.6642, 0.23 ) }
    dend_5 { pt3dadd( -34.713, 57.6039, 10.8409, 0.91 ) }
    dend_5 { pt3dadd( -38.1977, 61.8841, 13.2775, 0.23 ) }
    dend_5 { pt3dadd( -40.4886, 64.311, 14.8285, 0.23 ) }
    dend_5 { pt3dadd( -42.7074, 66.2739, 16.2619, 0.23 ) }
    dend_5 { pt3dadd( -44.2674, 67.5178, 17.3742, 0.23 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_20, dend_11, dend_0, dend_13, dend_12, dend_10, dend_1, dend_19, dend_14, dend_3, dend_2, dend_18, dend_15, dend_7, dend_4, dend_17, dend_16, dend_9, dend_8, dend_6, dend_5]}
    ModelViewParmSubset_2 = new SectionList()
    dend_20 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_20, dend_11, dend_0, dend_13, dend_12, dend_10, dend_1, dend_19, dend_14, dend_3, dend_2, dend_18, dend_15, dend_7, dend_4, dend_17, dend_16, dend_9, dend_8, dend_6, dend_5]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_20 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_12 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_10 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_19 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_2 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_18 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_16 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_6 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_5 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_11 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_0 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_1 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_13 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_14 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_3 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_4 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_7 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_15 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_9 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_8 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_17 OneSecGrp_SectionRef_19.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_11, dend_11, dend_11, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_1, dend_1, axon_1, axon_1, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_14, dend_14, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_7, dend_7, dend_7, dend_7, dend_7, dend_4, dend_4, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.999855  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.042115  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0012239999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.001693  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.386953  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 8.0E-6  // units: S cm-2
        e_pas_nml2 = -63.854015  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.5399997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.039862998  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 5.2299997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.0054459996  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.503893  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-4  // units: S cm-2
        e_pas_nml2 = -67.1289  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 4.78E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.15074699  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009017  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 4.0E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.0032419998  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 1.74E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bNAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bNAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bNAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bNAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_20 nseg = 5
    dend_12 nseg = 5
    dend_10 nseg = 3
    dend_19 nseg = 3
    dend_2 nseg = 5
    dend_18 nseg = 5
    dend_16 nseg = 3
    dend_6 nseg = 3
    dend_5 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bNAC219_L1_SLAC_8a5944f8ac_0_0


