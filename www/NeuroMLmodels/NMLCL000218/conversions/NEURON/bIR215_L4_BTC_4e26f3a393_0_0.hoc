// Cell: bIR215_L4_BTC_4e26f3a393_0_0
/*
{
  "id" : "bIR215_L4_BTC_4e26f3a393_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-1.49721, 11.7986, 0.0301706, 2.4623", "-1.37308, 10.661, 0.0290426, 4.20373", "-1.24895, 9.52332, 0.0279145, 5.59272", "-1.12482, 8.38566, 0.0267864, 6.71614", "-1.00068, 7.248, 0.0256584, 7.74544", "-0.87655, 6.11034, 0.0245303, 8.57739", "-0.752417, 4.97268, 0.0234023, 9.13171", "-0.628284, 3.83502, 0.0222742, 9.51195", "-0.504152, 2.69736, 0.0211462, 9.92921", "-0.380019, 1.5597, 0.0200181, 10.275", "-0.255886, 0.422041, 0.01889, 10.4231", "-0.131754, -0.715618, 0.017762, 10.4046", "-0.00762106, -1.85328, 0.0166339, 10.4069", "0.116512, -2.99094, 0.0155059, 10.1383", "0.240644, -4.1286, 0.0143778, 9.53645", "0.364777, -5.26626, 0.0132498, 8.49552", "0.48891, -6.40392, 0.0121217, 7.50349", "0.613042, -7.54158, 0.0109937, 6.64245", "0.737175, -8.67924, 0.0098656, 6.01482", "0.861308, -9.8169, 0.00873754, 4.86867", "0.98544, -10.9546, 0.00760949, 2.96361" ]
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-1.78536, 11.5335, 1.5043, 2.36", "-1.78536, 11.5335, 1.5043, 2.36", "-1.92164, 12.3389, 1.7108, 2.06", "-2.08146, 13.1828, 1.9539, 2.06", "-2.0996, 13.2622, 1.97776, 2.06", "-2.33058, 14.1866, 2.25655, 2.21", "-2.68811, 15.4758, 2.71035, 2.21", "-2.96721, 16.3245, 3.04355, 2.21", "-2.98367, 16.3682, 3.06376, 2.21", "-3.31837, 17.1956, 3.47646, 2.21", "-3.47328, 17.5627, 3.66688, 2.36", "-3.951, 18.6242, 4.26017, 2.43", "-4.25684, 19.2632, 4.60737, 2.65", "-4.72656, 20.2616, 5.17294, 2.65" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999821452163534
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "0.094648, -10.2765, 0.0043065, 4.86", "0.094648, -10.2765, 0.0043065, 4.86", "-0.187913, -11.1853, -0.023961, 4.57", "-0.50116, -12.1755, -0.0613088, 4.2", "-1.06045, -13.9525, -0.133354, 2.87", "-1.5102, -15.4621, -0.210971, 2.58", "-2.00082, -17.1785, -0.308079, 2.5", "-2.34326, -18.4642, -0.369301, 2.58", "-2.35428, -18.5106, -0.371136, 2.58", "-2.46833, -19.1326, -0.388739, 2.73", "-2.63749, -20.6079, -0.408713, 2.73", "-2.67354, -21.5876, -0.382404, 2.36", "-2.65059, -22.8017, -0.303818, 2.65", "-2.59269, -23.8698, -0.212712, 2.87", "-2.51816, -24.9062, -0.119516, 3.09", "-2.42093, -25.8671, -0.0297663, 3.09", "-2.25389, -27.1314, 0.0935891, 3.32", "-2.16091, -27.7536, 0.150407, 3.02", "-1.96159, -29.0337, 0.245776, 2.43", "-1.72616, -30.5301, 0.356257, 2.36", "-1.58102, -31.5087, 0.419479, 2.36", "-1.49939, -31.9992, 0.440845, 2.36" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999821452163534
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "0.98544, -10.9546, 0.00760949, 0.673788", "2.61247, -25.8661, 0.00760949, 0.673788", "4.23949, -40.7776, 0.00760949, 0.673788" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-4.72656, 20.2616, 5.17294, 1.4", "-5.54253, 22.176, 5.37765, 1.4", "-6.20667, 23.8391, 5.54088, 1.18", "-6.64158, 25.0264, 5.64336, 1.18", "-7.07781, 26.2822, 5.74287, 1.18", "-7.47142, 27.4875, 5.82646, 1.62", "-7.71076, 28.2582, 5.89661, 1.99", "-7.73403, 28.3562, 5.90666, 1.99", "-7.96046, 29.5811, 6.02335, 2.06", "-7.98487, 29.769, 6.0423, 2.06", "-8.09078, 31.1923, 6.18469, 1.62", "-8.16129, 33.067, 6.41775, 1.4", "-8.16349, 33.2029, 6.43627, 1.4", "-8.15628, 34.7162, 6.64998, 1.47", "-8.11996, 36.0484, 6.84372, 1.77", "-8.07129, 37.2113, 7.00193, 1.92", "-7.97158, 38.8422, 7.19795, 1.11", "-7.95119, 39.2204, 7.23187, 1.11", "-7.94296, 39.9539, 7.2946, 1.11", "-7.95437, 40.2207, 7.31623, 1.11", "-8.10985, 41.8786, 7.43724, 0.96", "-8.26395, 42.9592, 7.46659, 0.96", "-8.46164, 44.021, 7.44645, 1.55", "-8.66349, 44.9886, 7.40137, 2.36", "-8.84032, 45.8745, 7.34731, 2.5", "-8.97319, 46.5714, 7.2976, 2.8", "-9.23898, 48.0522, 7.18003, 2.43", "-9.43871, 49.3015, 7.07621, 1.99", "-9.68279, 51.5122, 6.96681, 1.4", "-9.73309, 52.6596, 6.95351, 1.4", "-9.72769, 52.9425, 6.96595, 1.4", "-9.61012, 54.2957, 7.09487, 1.62", "-9.59775, 54.383, 7.10964, 1.62", "-9.26035, 56.3463, 7.54228, 1.03", "-8.98947, 57.843, 7.97238, 1.03", "-8.77989, 59.1519, 8.39616, 1.47", "-8.54266, 60.7676, 8.94639, 1.69", "-8.30664, 62.6856, 9.61267, 1.69", "-8.20363, 64.0433, 10.0621, 2.14", "-8.1803, 65.5275, 10.5119, 2.8", "-8.23077, 66.8845, 10.9023, 3.24", "-8.30345, 67.765, 11.1202, 3.39", "-8.47942, 69.0849, 11.3947, 2.21", "-8.75388, 70.7396, 11.6647, 1.33", "-9.05438, 72.2374, 11.8482, 1.18", "-9.0899, 72.3969, 11.8575, 1.18", "-9.43649, 73.9215, 11.8925, 1.47", "-9.64049, 74.7908, 11.9099, 1.62" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-4.72656, 20.2616, 5.17294, 1.03", "-3.16933, 21.3493, 5.20332, 1.03", "-3.00426, 21.4588, 5.20608, 1.03", "-1.72251, 22.2835, 5.22422, 1.03", "9.59137E-4, 23.3732, 5.24647, 1.4", "0.076218, 23.4198, 5.24975, 1.4", "2.15077, 24.7134, 5.37356, 1.4", "2.22946, 24.762, 5.3792, 1.4", "3.40632, 25.5397, 5.47924, 1.55", "3.48794, 25.5975, 5.4876, 1.55", "5.14716, 26.9507, 5.68425, 0.96", "5.97587, 27.708, 5.78939, 0.96", "6.64569, 28.4495, 5.88533, 1.18", "7.36121, 29.337, 5.98273, 1.4", "7.46965, 29.4919, 5.99088, 1.4", "8.07231, 30.4048, 5.98621, 1.4", "8.13693, 30.5055, 5.97959, 1.4", "8.8429, 31.5519, 5.89593, 1.69", "9.3657, 32.2739, 5.83334, 1.92", "10.103, 33.257, 5.76377, 1.4", "11.0573, 34.5442, 5.69633, 1.11", "11.9454, 35.7352, 5.64914, 1.11", "12.0185, 35.8369, 5.64681, 1.11", "12.8169, 36.9806, 5.63962, 1.11", "13.4579, 37.9758, 5.65798, 1.03", "14.1309, 39.1305, 5.7159, 1.03", "14.1851, 39.2433, 5.72133, 1.03", "14.8041, 40.7704, 5.78791, 1.03", "14.8325, 40.8543, 5.79082, 1.03", "15.1111, 41.9824, 5.81512, 0.81", "15.1292, 42.1128, 5.81526, 0.81", "15.1689, 43.1025, 5.81603, 0.59", "15.1622, 43.2913, 5.81613, 0.59", "15.0684, 44.2546, 5.83769, 0.59", "15.0387, 44.6075, 5.85033, 0.59", "14.9879, 45.4489, 5.88738, 0.74", "14.9839, 45.5803, 5.89373, 0.74", "15.0253, 47.0632, 5.96905, 0.74", "15.1297, 48.1852, 6.02367, 1.25", "15.2881, 49.0583, 6.06317, 1.69", "15.5924, 50.2929, 6.11057, 1.4", "15.6176, 50.3777, 6.11321, 1.4", "15.9312, 51.4084, 6.13665, 2.06", "16.2935, 52.5546, 6.15454, 2.21", "16.675, 53.7692, 6.16275, 1.77", "17.094, 55.1444, 6.17424, 1.11", "17.3967, 56.2181, 6.18433, 1.11", "17.6596, 57.2607, 6.19462, 1.4", "17.9621, 58.6768, 6.2096, 0.59", "17.9769, 58.7642, 6.21057, 0.59", "18.1157, 60.0695, 6.25619, 0.44", "18.153, 61.077, 6.31572, 1.11", "18.1458, 61.8327, 6.3752, 1.33", "18.141, 62.0065, 6.38597, 1.33", "18.1039, 62.5364, 6.40615, 1.33", "18.0065, 63.7648, 6.41218, 0.52", "17.8441, 65.3678, 6.37449, 0.52", "17.8339, 65.4674, 6.36936, 0.52", "17.7308, 66.4752, 6.25862, 0.96", "17.63, 67.6831, 6.02821, 1.55", "17.5657, 68.6497, 5.72485, 1.77", "17.5411, 69.1337, 5.51437, 1.99", "17.5383, 69.1996, 5.48309, 1.99", "17.4977, 70.4224, 4.9186, 1.99", "17.4673, 71.49, 4.43221, 1.4", "17.4429, 73.3254, 3.58757, 0.44", "17.4343, 74.4354, 3.08515, 0.96", "17.443, 75.287, 2.72355, 1.4", "17.4633, 76.204, 2.37435, 1.77", "17.4672, 76.2776, 2.35215, 1.77", "17.5223, 76.9795, 2.21521, 1.99", "17.5458, 77.176, 2.20052, 1.99", "17.6324, 77.8183, 2.18447, 1.99", "17.6536, 77.9941, 2.18055, 1.99", "17.7324, 78.8322, 2.13885, 1.69", "17.7915, 79.8709, 2.07351, 1.11", "17.8157, 80.9181, 2.00058, 0.44", "17.8042, 82.1872, 1.91004, 0.37", "17.7353, 83.3562, 1.81959, 1.03", "17.6633, 84.3087, 1.77638, 1.03", "17.5796, 85.472, 1.7552, 0.44", "17.5363, 86.1761, 1.75734, 0.88", "17.5137, 86.8206, 1.77011, 1.18", "17.5103, 87.6943, 1.79931, 1.18", "17.6102, 89.6567, 1.87651, 0.37", "17.7181, 90.72, 1.92634, 0.37", "17.9546, 92.2603, 1.97986, 1.33", "18.1514, 93.346, 2.01043, 2.36", "18.2762, 93.9437, 2.01918, 2.95", "18.4451, 94.6085, 2.00882, 3.24", "18.4725, 94.7194, 1.9968, 3.24", "18.5458, 95.039, 1.9546, 3.24" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-1.49939, -31.9992, 0.440845, 2.06", "-1.48636, -33.2618, 0.55002, 2.06", "-1.42479, -35.4936, 0.520247, 2.06", "-1.35315, -37.0457, 0.396476, 2.06", "-1.23153, -38.6413, 0.213917, 2.06", "-1.01244, -40.6628, -0.083899, 2.14", "-0.830277, -42.0538, -0.305701, 2.14", "-0.493241, -44.1388, -0.745795, 2.43", "-0.29867, -45.2891, -1.03282, 2.8", "-0.0285492, -46.8514, -1.40563, 2.36", "0.348106, -48.9727, -1.89643, 2.36", "0.650774, -50.5972, -2.24226, 2.36", "0.993678, -52.5439, -2.63537, 2.36", "1.28987, -54.5669, -3.00776, 2.14", "1.49584, -56.3957, -3.37517, 2.14", "1.62122, -58.1931, -3.77343, 2.28", "1.63738, -58.8524, -3.92747, 2.28", "1.5927, -60.5073, -4.34476, 1.69", "1.42607, -62.2965, -4.74212, 1.18", "1.21913, -63.3514, -4.91333, 1.18", "0.94169, -64.074, -4.90699, 1.18", "0.466818, -64.8201, -4.70004, 1.18", "-0.174593, -65.5347, -4.32419, 0.96", "-1.36396, -66.5357, -3.57354, 1.11", "-2.64198, -67.4338, -2.85362, 1.69", "-4.01687, -68.3539, -2.20865, 1.55", "-4.84203, -68.8885, -1.96461, 1.92", "-5.62461, -69.4128, -1.86699, 2.21", "-6.66619, -70.1924, -1.9535, 2.06", "-7.96148, -71.2606, -2.30258, 1.99", "-8.94752, -72.1632, -2.68159, 1.77", "-10.0622, -73.2866, -3.11792, 1.92", "-11.0517, -74.3865, -3.4462, 1.84", "-12.0204, -75.5667, -3.60934, 1.69", "-12.6505, -76.4373, -3.57601, 1.11", "-13.3531, -77.6126, -3.38618, 0.96", "-14.0633, -79.0622, -3.04235, 1.25", "-14.414, -79.9478, -2.82401, 0.81", "-15.013, -81.9146, -2.54899, 0.74", "-15.2647, -83.0174, -2.53753, 0.37", "-15.5028, -84.7535, -2.77137, 1.47", "-15.5395, -85.5884, -3.00415, 2.14", "-15.4996, -87.1677, -3.68824, 2.5", "-15.3181, -89.1644, -4.83671, 1.03", "-15.1808, -90.1941, -5.55063, 0.88", "-15.0339, -90.9829, -6.12343, 0.44", "-14.7049, -92.3176, -7.13108, 0.44", "-14.2463, -93.8543, -8.29115, 1.18", "-13.6833, -95.6001, -9.5239, 1.62", "-13.6473, -95.7121, -9.59694, 1.62", "-13.2725, -96.9147, -10.308, 1.62", "-12.7887, -98.7606, -11.2623, 1.47", "-12.5419, -99.9774, -11.766, 1.99", "-12.4287, -100.969, -12.0799, 1.99", "-12.4012, -101.873, -12.3059, 1.99", "-12.4708, -103.604, -12.7016, 0.59", "-12.6427, -104.855, -12.9562, 0.52", "-12.8621, -105.775, -13.0636, 0.52", "-13.5538, -107.903, -13.2261, 2.8", "-13.8652, -108.759, -13.2737, 3.17", "-14.2059, -109.604, -13.2421, 3.46", "-14.5344, -110.405, -13.0754, 3.46", "-15.3141, -112.351, -12.537, 1.69", "-15.7575, -113.527, -12.1014, 1.11", "-16.0077, -114.246, -11.7293, 1.25", "-16.6446, -116.177, -10.5785, 1.99", "-17.2142, -118.1, -9.24242, 1.47" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-1.49939, -31.9992, 0.440845, 0.96", "-0.944982, -32.7167, -0.773527, 0.96", "-0.464617, -33.2854, -1.76436, 0.81", "0.310555, -34.0609, -3.1492, 0.59", "0.528106, -34.2418, -3.49014, 0.88", "0.74925, -34.3952, -3.79754, 1.11", "0.786509, -34.4164, -3.84478, 1.11", "1.31882, -34.5774, -4.44386, 1.25", "1.76181, -34.6643, -5.01524, 0.88", "2.23522, -34.7355, -5.70645, 0.52", "2.45129, -34.7865, -6.15981, 0.81", "2.71335, -34.8944, -6.91043, 0.96", "3.02557, -35.131, -8.2108, 0.52", "3.12324, -35.5808, -10.0759, 0.52", "3.1165, -35.5976, -10.1269, 0.52", "2.72446, -36.1599, -11.3452, 0.96", "2.55998, -36.3759, -11.6997, 1.11", "2.34123, -36.6512, -12.0464, 1.11", "1.68845, -37.5569, -12.8926, 0.66", "1.42451, -38.0097, -13.2498, 0.37", "1.15125, -38.6881, -13.8113, 0.37", "1.06185, -39.1673, -14.2414, 0.59", "1.06064, -39.2074, -14.281, 0.59", "1.17221, -39.8466, -14.9833, 1.03", "1.35678, -40.4068, -15.6572, 1.69", "1.57633, -41.027, -16.4297, 2.21", "1.76074, -41.5808, -17.1114, 2.8", "1.82449, -41.8297, -17.4077, 2.8", "2.04655, -43.0449, -18.7632, 1.33", "2.13839, -43.909, -19.6298, 0.52", "2.15427, -44.3603, -20.0226, 0.66", "2.1541, -44.7168, -20.2823, 0.66", "2.15988, -45.245, -20.6153, 0.29", "2.17114, -45.7122, -20.875, 0.37", "2.21433, -46.2478, -21.061, 0.37", "2.23704, -46.312, -21.0871, 0.37", "2.54987, -46.7895, -21.4225, 0.66", "2.85039, -47.1802, -21.7651, 0.96", "2.8759, -47.2105, -21.7938, 0.96", "3.16485, -47.5564, -22.1271, 0.96", "3.72628, -48.2704, -22.8537, 0.52", "4.21435, -48.9308, -23.5096, 0.37", "4.78427, -49.7408, -24.3188, 1.77", "5.00433, -50.0704, -24.6389, 2.36", "5.24242, -50.4388, -24.9922, 2.58", "5.95824, -51.6074, -26.0885, 0.74", "6.18827, -52.0192, -26.4217, 0.74" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "4.23949, -40.7776, 0.00760949, 0.15", "5.86652, -55.6891, 0.00760949, 0.15", "7.49354, -70.6006, 0.00760949, 0.15" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-9.64049, 74.7908, 11.9099, 0.81", "-10.0432, 75.6464, 11.6891, 0.81", "-10.5417, 76.792, 11.4001, 0.74", "-10.9642, 77.8096, 11.1578, 0.74", "-10.9938, 77.8861, 11.1374, 0.74", "-11.5238, 79.312, 10.747, 0.74", "-11.7701, 79.9929, 10.5411, 1.33", "-11.9946, 80.6807, 10.307, 1.92", "-12.2226, 81.4277, 10.0288, 1.33", "-12.5587, 82.4554, 9.6259, 1.11", "-12.8206, 83.1916, 9.32211, 1.47", "-13.1964, 84.1294, 8.92357, 1.18", "-13.2186, 84.1819, 8.90074, 1.18", "-13.5666, 85.002, 8.54773, 0.66", "-13.87, 85.7827, 8.22423, 0.66", "-14.235, 86.8242, 7.83824, 1.47", "-14.45, 87.5312, 7.62955, 1.99", "-14.6991, 88.4539, 7.42089, 1.99", "-15.0892, 90.0981, 7.12869, 0.66", "-15.279, 91.0674, 7.00675, 0.52", "-15.3889, 91.7537, 6.95825, 0.59", "-15.6232, 93.1161, 6.96709, 0.74", "-15.6399, 93.2037, 6.9714, 0.74", "-15.8376, 94.0044, 7.03643, 1.33", "-16.0277, 94.6415, 7.10404, 1.62", "-16.3572, 95.5575, 7.181, 1.18", "-16.7801, 96.6097, 7.18643, 0.66", "-17.1251, 97.419, 7.13871, 0.66", "-17.7841, 98.8748, 7.00862, 2.28", "-18.1504, 99.6106, 6.91741, 2.73", "-18.4766, 100.234, 6.82135, 2.95", "-19.3268, 101.828, 6.53068, 1.03", "-19.3616, 101.893, 6.51727, 1.03", "-19.7106, 102.537, 6.38901, 0.81", "-20.1215, 103.285, 6.25043, 0.44", "-20.5444, 104.068, 6.12532, 0.44", "-21.0382, 104.993, 6.00231, 0.44", "-21.5283, 105.879, 5.90404, 1.11", "-21.8927, 106.533, 5.83, 1.69", "-22.3773, 107.416, 5.73124, 2.21", "-22.6679, 107.945, 5.67128, 2.5", "-23.4062, 109.224, 5.51363, 1.25", "-24.0738, 110.351, 5.36718, 0.44", "-24.6186, 111.26, 5.24434, 0.44", "-25.0516, 111.971, 5.1462, 1.03", "-25.5225, 112.762, 5.04021, 1.33", "-25.6391, 112.962, 5.0142, 1.33", "-25.9052, 113.436, 4.95548, 1.47", "-26.385, 114.281, 4.84925, 0.88", "-26.8096, 114.992, 4.75365, 0.59", "-27.2598, 115.697, 4.65007, 0.44", "-27.3142, 115.776, 4.63726, 0.44", "-28.0032, 116.675, 4.47076, 0.44", "-28.3799, 117.092, 4.3764, 0.66", "-28.5494, 117.259, 4.33304, 0.66", "-29.0697, 117.759, 4.19938, 0.66", "-29.5818, 118.305, 4.08479, 0.66", "-30.0472, 118.913, 4.00004, 0.37", "-30.3491, 119.442, 3.95176, 0.37", "-30.7479, 120.35, 3.88916, 0.66", "-30.9528, 121.037, 3.84644, 0.96", "-31.1268, 122.035, 3.79541, 0.29", "-31.2055, 122.809, 3.76343, 0.44", "-31.2515, 123.627, 3.73307, 0.96", "-31.2573, 123.76, 3.72762, 0.96", "-31.3258, 124.981, 3.65846, 1.77", "-31.4436, 126.159, 3.56981, 2.95", "-31.4734, 126.747, 3.40809, 3.54", "-31.4738, 126.817, 3.38161, 3.54", "-31.4451, 127.576, 3.05373, 3.76", "-31.4403, 127.641, 3.02266, 3.76", "-31.3382, 128.562, 2.54098, 3.46", "-30.8787, 131.726, 0.833127, 0.81", "-30.8673, 131.801, 0.795903, 0.81", "-30.785, 132.446, 0.51651, 0.81", "-30.779, 132.517, 0.494331, 0.81", "-30.7481, 133.396, 0.365234, 1.11", "-30.7537, 134.047, 0.373353, 1.25", "-30.8335, 135.248, 0.580624, 0.37", "-30.9015, 136.216, 0.757647, 0.29", "-31.0028, 137.671, 0.973288, 0.29", "-31.1116, 139.265, 1.16432, 0.29", "-31.1178, 139.349, 1.17165, 0.29", "-31.2076, 140.407, 1.24756, 0.29", "-31.2165, 140.53, 1.25263, 0.29", "-31.2555, 141.805, 1.20641, 0.44", "-31.2553, 141.915, 1.1754, 0.44", "-31.3007, 142.44, 0.893736, 0.44", "-34.8829, 151.911, -0.644165, 0.44", "-38.7264, 161.301, -2.04278, 0.44", "-42.0187, 170.779, -4.09564, 0.44", "-43.2774, 180.483, -7.1193, 0.44", "-44.3363, 189.554, -11.7555, 0.44", "-43.4312, 197.968, -17.525, 0.44", "-42.4573, 205.1, -24.8106, 0.44", "-40.0131, 213.632, -29.9233, 0.44", "-37.4903, 222.45, -34.4806, 0.44", "-34.1712, 230.428, -39.9788, 0.44", "-29.8686, 239.051, -43.4475, 0.44" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-9.64049, 74.7908, 11.9099, 0.29", "-9.20336, 76.6777, 11.5916, 0.29", "-9.06234, 77.4439, 11.506, 0.44", "-8.97559, 78.1901, 11.4583, 0.44", "-8.91401, 79.2878, 11.4298, 0.29", "-8.91355, 79.3512, 11.4297, 0.29", "-8.93938, 80.3029, 11.4412, 0.29", "-8.95631, 80.4564, 11.4595, 0.29", "-9.07237, 81.246, 11.5029, 0.29", "-9.17853, 81.9033, 11.4971, 0.96", "-9.2673, 82.484, 11.4392, 1.33", "-9.31087, 82.8325, 11.3883, 1.33", "-9.4246, 84.3341, 11.1007, 0.52", "-9.45323, 85.5088, 10.8367, 0.29", "-9.44771, 85.6347, 10.8043, 0.29", "-9.36566, 86.5831, 10.5478, 0.81", "-9.35819, 86.6504, 10.5299, 0.81", "-9.28612, 87.3079, 10.372, 1.03", "-9.24231, 87.874, 10.265, 0.74", "-9.17675, 88.7729, 10.1509, 0.29", "-9.14747, 89.3506, 10.1008, 0.44", "-9.14711, 89.7975, 10.0891, 0.44", "-9.16876, 90.3903, 10.0816, 0.29", "-9.2442, 90.942, 10.0838, 0.74", "-9.7307, 100.933, 10.5677, 0.74" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "18.5458, 95.039, 1.9546, 0.37", "18.9389, 97.1987, 1.0936, 0.37", "19.1219, 97.929, 0.702159, 0.37", "19.2786, 98.5085, 0.373318, 0.96", "19.3012, 98.5783, 0.336062, 0.96", "19.6628, 99.6358, -0.211698, 0.96", "20.3054, 101.603, -1.18137, 0.37", "20.6493, 102.847, -1.79698, 0.59", "20.9155, 103.882, -2.3554, 0.37", "21.2315, 105.286, -3.13201, 0.37", "21.2521, 105.402, -3.19513, 0.37", "21.3369, 106.217, -3.67527, 0.29", "21.3909, 107.793, -4.61215, 1.47", "21.376, 109.08, -5.38487, 1.92", "21.3593, 109.559, -5.68364, 2.21", "21.343, 110.042, -6.0046, 2.21", "21.3415, 112.649, -7.74336, 0.37", "21.3848, 114.027, -8.65419, 0.96", "21.4206, 114.732, -9.1011, 1.62", "21.4681, 115.493, -9.57713, 1.84", "21.6186, 117.53, -10.8681, 0.29", "21.7199, 118.752, -11.6292, 1.03", "21.7566, 119.211, -11.879, 1.4", "21.7728, 119.485, -12.0334, 1.4" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "18.5458, 95.039, 1.9546, 0.37", "19.7917, 96.9447, 2.28714, 0.37", "20.4211, 97.9553, 2.33658, 0.37", "20.9825, 98.9472, 2.26427, 0.81", "21.0144, 99.0027, 2.25593, 0.81", "21.3192, 99.5278, 2.15871, 0.81", "21.8146, 100.415, 1.93063, 0.37", "22.2677, 101.242, 1.52677, 0.29", "22.6477, 101.943, 1.13449, 0.59", "23.006, 102.616, 0.726078, 0.22", "23.0261, 102.658, 0.70115, 0.22", "23.3641, 103.556, 0.212259, 1.18", "23.4613, 103.9, 0.0700126, 1.69", "23.5765, 104.541, -0.0903588, 1.99", "23.6108, 104.926, -0.113716, 1.99", "23.5589, 105.792, -0.0108575, 0.44", "23.4835, 106.354, 0.164042, 0.29", "23.1112, 107.747, 1.08718, 0.29", "23.0915, 107.791, 1.12589, 0.29", "27.4123, 115.532, 1.20351, 0.29", "31.3052, 123.393, 2.48547, 0.29", "35.4551, 131.053, 4.12643, 0.29", "39.2771, 138.568, 6.86973, 0.29", "44.2904, 145.234, 9.8741, 0.29", "49.1316, 151.152, 14.3611, 0.29", "54.3311, 156.997, 18.532, 0.29" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-17.2142, -118.1, -9.24242, 0.52", "-17.3745, -119.847, -8.60035, 0.52", "-17.3721, -120.532, -8.41718, 0.81", "-17.3274, -121.136, -8.33664, 1.03", "-17.3203, -121.211, -8.33539, 1.03", "-17.2774, -121.88, -8.36935, 1.03", "-17.2637, -122.622, -8.43482, 0.52", "-17.2795, -123.277, -8.56878, 0.52", "-17.3855, -124.061, -8.718, 0.52", "-17.5456, -124.705, -8.82976, 0.66", "-17.7844, -125.372, -8.8863, 0.66", "-18.0208, -125.865, -8.89106, 0.88", "-18.6676, -126.977, -8.74304, 1.03", "-19.1359, -127.682, -8.54857, 1.55", "-19.3462, -127.991, -8.43105, 1.92", "-20.0813, -129.073, -7.94754, 1.92", "-20.5676, -129.822, -7.58881, 1.33", "-21.3622, -131.099, -6.971, 0.59", "-21.9196, -132.031, -6.5331, 0.59", "-22.4491, -132.968, -6.16533, 0.59", "-22.4744, -133.015, -6.151, 0.59", "-22.8177, -133.703, -6.03502, 1.33", "-23.175, -134.537, -6.02475, 0.74", "-23.4145, -135.255, -6.12698, 0.74", "-23.74, -136.454, -6.35414, 0.74", "-23.7625, -136.543, -6.37207, 0.74", "-23.9806, -137.405, -6.52572, 1.18", "-24.3341, -138.731, -6.73094, 0.81", "-24.7251, -140.137, -6.86424, 0.74", "-25.1953, -141.716, -6.91794, 0.59", "-25.2153, -141.78, -6.91417, 0.59", "-25.5657, -142.824, -6.8013, 1.92", "-25.888, -143.779, -6.62311, 2.21", "-26.2565, -144.913, -6.34292, 2.21", "-26.6136, -146.091, -6.01514, 0.74", "-26.9471, -147.475, -5.60207, 0.74", "-27.1041, -148.525, -5.2872, 0.66", "-27.1085, -149.764, -4.93012, 0.44", "-26.9667, -150.58, -4.70932, 1.03", "-26.9277, -150.678, -4.68944, 1.03", "-26.6325, -151.162, -4.6398, 1.03", "-26.1575, -151.834, -4.64487, 1.03", "-25.7154, -152.492, -4.68042, 1.4", "-25.5045, -152.906, -4.7222, 1.4", "-25.183, -153.936, -4.80057, 0.81", "-25.0128, -155.034, -4.80734, 0.81", "-25.0116, -155.818, -4.76935, 1.03", "-25.1016, -156.527, -4.70501, 1.11", "-25.2863, -157.367, -4.59461, 1.18", "-25.5818, -158.4, -4.43283, 0.37", "-26.0077, -159.655, -4.27272, 0.37", "-26.2576, -160.45, -4.24602, 1.55", "-26.4049, -161.1, -4.30032, 1.84", "-26.4796, -161.681, -4.40832, 2.14", "-26.4886, -162.122, -4.54055, 2.14", "-26.3074, -163.33, -5.09065, 1.69", "-25.8034, -164.682, -5.88629, 0.52", "-25.5245, -165.167, -6.20526, 0.88", "-25.4884, -165.213, -6.23878, 0.88", "-25.3378, -165.364, -6.36517, 0.88", "-24.4922, -166.083, -6.99089, 0.52", "-23.7073, -166.711, -7.54752, 1.03", "-23.663, -166.75, -7.5804, 1.03", "-22.9745, -167.446, -8.1336, 1.33", "-22.2825, -168.255, -8.71507, 1.25", "-22.0361, -168.606, -8.93819, 1.03", "-21.3775, -169.922, -9.59209, 0.59", "-21.0568, -170.817, -9.94108, 0.59", "-20.8891, -171.461, -10.1331, 1.18", "-20.8448, -171.729, -10.1864, 1.84", "-20.7921, -172.317, -10.2597, 1.84", "-20.7537, -173.622, -10.3752, 0.74", "-20.7095, -174.551, -10.559, 1.03", "-20.6294, -175.259, -10.8046, 1.11", "-20.5642, -175.624, -10.9748, 1.33", "-20.386, -176.332, -11.4278, 0.81", "-20.2292, -176.789, -11.8064, 0.44", "-19.3675, -178.937, -14.0548, 0.44", "-19.2088, -179.322, -14.5261, 0.44", "-19.1841, -179.402, -14.6506, 0.44", "-19.1095, -180.048, -15.7791, 0.44", "-19.114, -180.075, -15.8272, 0.44", "-19.2576, -180.428, -16.4002, 0.74", "-19.5016, -180.795, -16.9082, 1.11", "-20.0676, -181.93, -18.5422, 0.44", "-20.2014, -182.35, -19.1537, 0.44", "-20.3457, -183.246, -20.3869, 1.84", "-20.3551, -183.627, -20.9005, 2.5", "-20.3482, -183.733, -21.0398, 2.5", "-20.1902, -185.289, -22.9012, 0.59", "-20.1449, -185.836, -23.5115, 0.59", "-20.1146, -186.312, -24.1183, 0.59", "-20.1133, -186.352, -24.172, 0.59", "-20.1314, -187.202, -25.2601, 1.77", "-20.1852, -187.736, -25.894, 2.06", "-20.4226, -188.811, -27.0443, 1.99", "-20.7886, -190.242, -28.5437, 0.81", "-20.7995, -190.287, -28.5925, 0.81", "-20.9034, -190.801, -29.1277, 0.66", "-20.9882, -191.512, -29.8288, 0.52", "-21.0396, -192.036, -30.3265, 1.84", "-21.1024, -192.726, -30.8922, 2.28", "-21.2064, -194.422, -32.2201, 0.66", "-21.1826, -195.01, -32.6846, 0.66", "-21.0431, -196.013, -33.4664, 1.77", "-21.0287, -196.074, -33.51, 1.77", "-20.8401, -196.686, -33.9097, 2.21", "-20.5391, -197.552, -34.375, 2.21", "-20.1339, -198.716, -34.883, 0.74", "-19.9624, -199.274, -35.1115, 0.37", "-19.8375, -199.716, -35.2773, 0.29", "-19.6242, -200.472, -35.5502, 1.11", "-19.4694, -201.031, -35.7551, 1.4", "-19.2297, -201.965, -36.0655, 0.59", "-19.0604, -202.636, -36.2845, 0.29", "-18.8813, -203.365, -36.5259, 0.66", "-18.7757, -203.814, -36.6908, 0.88", "-18.577, -204.789, -37.0568, 0.29", "-18.4688, -205.403, -37.2843, 0.29", "-18.3994, -205.882, -37.4514, 0.96", "-18.3398, -206.392, -37.6231, 0.96", "-18.1833, -207.505, -38.0034, 0.29", "-18.062, -208.055, -38.2164, 0.29", "-17.8457, -208.616, -38.5126, 0.66", "-17.8222, -208.664, -38.567, 0.66", "-17.6776, -208.95, -38.9666, 0.66", "-17.3771, -209.6, -40.0505, 0.44", "-17.1725, -210.119, -40.9765, 1.77", "-16.9088, -210.88, -42.4018, 2.58", "-16.2333, -213.165, -46.7741, 0.44", "-16.1744, -213.412, -47.2372, 0.44", "-15.9752, -214.5, -49.3594, 0.88", "-15.9262, -215.018, -50.3998, 1.77", "-15.9262, -215.048, -50.4599, 1.77", "-15.9497, -215.241, -50.8126, 2.14", "-16.0255, -215.63, -51.2867, 2.43" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-17.2142, -118.1, -9.24242, 0.59", "-16.6612, -118.602, -8.4581, 0.59", "-15.9196, -119.102, -7.578, 0.52", "-15.4226, -119.352, -7.10945, 0.52", "-14.652, -119.571, -6.56474, 0.37", "-14.5021, -119.597, -6.47716, 0.37", "-13.8414, -119.671, -6.12832, 0.37", "-13.2595, -119.67, -5.8917, 0.37", "-12.4908, -119.584, -5.6515, 0.37", "-11.2814, -119.383, -5.33696, 0.22", "-10.9235, -119.324, -5.27261, 0.29", "-10.2387, -119.206, -5.16422, 0.37" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "6.18827, -52.0192, -26.4217, 0.37", "6.45137, -52.6514, -26.7188, 0.37", "6.81834, -53.5125, -27.0462, 0.29", "7.19002, -54.4099, -27.3417, 1.25", "7.36267, -54.829, -27.4675, 1.69", "7.38679, -54.888, -27.484, 1.69", "7.8535, -56.0459, -27.777, 0.29", "8.1972, -56.8895, -27.9421, 0.29", "8.57019, -57.8081, -28.1059, 1.77", "8.76795, -58.3046, -28.1777, 2.43", "8.90973, -58.667, -28.2301, 2.43", "9.47481, -60.1429, -28.4426, 0.22", "9.74214, -60.8844, -28.5477, 0.22" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "6.18827, -52.0192, -26.4217, 1.77", "5.31423, -53.4304, -30.1243, 1.77", "4.46964, -55.0201, -33.9841, 1.03", "3.18134, -57.8105, -40.1497, 2.14", "2.64818, -58.9994, -42.629, 0.52", "2.43182, -59.4899, -43.6194, 1.92", "2.30024, -59.7931, -44.2118, 2.36", "1.30451, -62.5281, -48.9368, 0.29", "1.04372, -63.2298, -50.0407, 0.29", "0.422409, -64.8391, -52.2105, 0.29", "0.403616, -64.8788, -52.2653, 0.29", "0.256814, -65.156, -52.6545, 1.69", "0.0648102, -65.5237, -53.1649, 1.69", "-1.12587, -68.067, -56.7804, 0.22", "-1.27657, -68.4317, -57.3321, 0.22", "-1.28724, -68.4689, -57.3907, 0.22", "-1.38302, -68.9141, -58.1068, 1.03", "-1.60088, -70.6079, -60.8286, 0.29", "-1.6382, -72.3348, -63.5022, 1.99", "-1.60993, -72.6259, -63.9299, 2.14", "-1.34745, -74.6508, -66.9631, 0.37", "-1.29188, -74.9875, -67.4735, 0.37", "-1.18692, -75.4407, -68.146, 0.88", "-1.00694, -75.9627, -68.8478, 1.03", "-0.478518, -77.3179, -70.4427, 0.29", "-0.455039, -77.381, -70.5118, 0.29", "0.072792, -79.002, -72.1769, 0.29", "0.272441, -79.7819, -73.0149, 1.99", "0.329481, -80.0371, -73.2918, 1.99", "0.717926, -81.9565, -75.3138, 0.29", "0.79296, -82.4391, -75.7844, 0.59", "1.05048, -84.3227, -77.5474, 0.44", "1.18025, -85.4385, -78.5585, 0.29", "1.22607, -85.9018, -78.9786, 1.11", "1.27276, -86.287, -79.3238, 1.33", "1.64843, -88.9465, -81.8818, 0.22", "1.72788, -89.422, -82.3925, 0.52", "2.00076, -90.7698, -84.0068, 0.29", "2.08684, -91.1361, -84.4848, 0.88", "2.166, -91.5824, -85.1825, 0.88", "2.41745, -93.2873, -88.1231, 0.29", "2.60061, -94.5859, -90.5397, 0.29", "2.71373, -95.6597, -92.5909, 1.77", "2.73548, -95.9378, -93.1368, 1.77", "2.84014, -98.1557, -97.5059, 0.52", "2.8418, -98.5655, -98.2832, 0.44", "2.84659, -98.9508, -98.9675, 0.74", "2.84831, -98.9869, -99.0276, 0.74", "2.98531, -100.26, -100.998, 0.29", "2.99591, -100.308, -101.067, 0.29", "3.38217, -101.103, -101.987, 1.18", "3.54763, -101.394, -102.315, 1.18", "4.32024, -102.637, -103.633, 0.22", "4.35141, -102.683, -103.676, 0.22", "5.11145, -103.658, -104.545, 0.81", "6.0366, -104.719, -105.54, 0.22", "6.44031, -105.122, -105.936, 0.81", "6.49052, -105.166, -105.989, 0.81", "6.739, -105.334, -106.292, 0.81", "7.68801, -105.856, -107.967, 0.22", "7.91981, -105.96, -108.456, 0.44", "7.95321, -105.973, -108.533, 0.44", "8.95065, -106.366, -110.847, 1.33", "9.84784, -106.738, -112.912, 1.33", "11.6037, -107.474, -116.976, 0.29", "11.6464, -107.494, -117.076, 0.29", "11.9301, -107.639, -117.752, 0.29", "12.3252, -107.853, -118.602, 1.03", "12.4502, -107.923, -118.834, 1.03", "12.4951, -107.947, -118.902, 1.03", "14.1727, -108.789, -120.987, 0.22", "14.224, -108.812, -121.051, 0.22", "15.4571, -109.27, -122.648, 0.29", "16.8717, -109.544, -124.635, 0.22", "17.1643, -109.566, -125.074, 0.66", "17.2106, -109.564, -125.145, 0.66", "17.4911, -109.515, -125.592, 0.66", "18.3102, -109.318, -126.975, 0.15", "19.8371, -108.732, -129.851, 0.96", "20.6754, -108.34, -131.492, 1.4", "20.9891, -108.186, -132.142, 1.4", "21.1389, -108.11, -132.464, 1.4" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-29.8686, 239.051, -43.4475, 0.44", "-31.6253, 249.443, -46.9266, 0.44" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-29.8686, 239.051, -43.4475, 0.44", "-31.1967, 250.937, -47.5191, 0.44" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "21.7728, 119.485, -12.0334, 0.29", "22.8955, 122.411, -12.1924, 0.29", "23.4, 123.725, -12.2639, 0.29", "23.8225, 124.827, -12.3237, 1.03", "23.8558, 124.913, -12.3285, 1.03", "24.0994, 125.548, -12.363, 1.4" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "21.7728, 119.485, -12.0334, 0.88", "21.8241, 120.318, -12.2067, 0.88", "21.9355, 120.95, -12.3563, 0.29", "22.1624, 121.67, -12.603, 0.29", "22.3353, 122.109, -12.7637, 0.44", "22.8213, 123.237, -13.1784, 1.25", "23.0269, 123.69, -13.3417, 1.99", "23.3776, 124.329, -13.5794, 2.21", "24.2279, 125.712, -14.1056, 0.22", "24.5859, 126.288, -14.3497, 0.22", "24.7669, 126.574, -14.4705, 0.96", "24.959, 126.895, -14.6036, 1.77", "25.1654, 127.297, -14.7693, 2.21", "25.3366, 127.708, -14.9536, 2.21", "25.8729, 129.279, -15.6764, 0.22", "26.0782, 129.943, -16.0005, 0.22", "26.3112, 130.719, -16.3737, 1.18", "26.3952, 131.016, -16.5133, 1.33", "26.6187, 131.902, -16.8946, 0.81", "26.7877, 132.592, -17.1586, 0.22", "26.9007, 133.038, -17.2876, 0.29", "27.1033, 133.82, -17.4928, 0.22", "27.1372, 133.92, -17.5208, 0.22", "27.4582, 134.678, -17.7815, 0.22", "27.8368, 135.462, -18.076, 1.33", "28.0136, 135.808, -18.2541, 1.69", "28.1037, 136.0, -18.3641, 1.69", "28.6097, 137.087, -19.0198, 0.29", "28.9162, 137.701, -19.3822, 1.47", "29.037, 137.923, -19.5105, 1.47", "29.4163, 138.583, -19.8861, 0.66", "29.9169, 139.433, -20.3399, 0.29", "30.1573, 139.857, -20.5463, 0.29", "30.4518, 140.399, -20.7593, 0.88", "30.627, 140.71, -20.8866, 1.25", "31.0831, 141.511, -21.2429, 0.29", "31.3486, 141.994, -21.4641, 0.22", "31.5496, 142.428, -21.7024, 0.66", "31.6684, 142.797, -21.9111, 0.81", "31.7982, 143.485, -22.2734, 0.22", "31.8517, 143.913, -22.476, 0.22", "31.8769, 144.317, -22.6737, 0.74", "31.8874, 144.941, -23.0606, 1.4", "31.8805, 145.82, -23.6626, 0.29", "31.8608, 146.426, -24.1511, 0.81", "31.8531, 146.618, -24.3399, 0.96", "31.809, 147.469, -25.4583, 0.29", "31.75, 148.119, -26.4424, 0.29", "31.7167, 148.356, -26.8229, 1.33", "31.604, 148.892, -27.7548, 2.28", "31.4407, 149.522, -28.9197, 2.28", "31.0629, 150.639, -31.2002, 0.81", "31.0041, 150.773, -31.4898, 0.88", "30.8581, 151.038, -32.0884, 0.29", "30.6203, 151.383, -32.9119, 0.37", "30.5145, 151.519, -33.2208, 0.37", "30.0675, 152.114, -34.3884, 0.37", "29.8961, 152.386, -34.8399, 0.37", "29.5494, 153.127, -35.9196, 1.55", "29.4296, 153.491, -36.3727, 1.92", "29.2308, 154.674, -37.4779, 0.44", "29.2059, 155.237, -37.8735, 0.29", "29.2377, 155.878, -38.1958, 0.88", "29.2866, 156.222, -38.3392, 0.96", "29.3693, 156.592, -38.4555, 0.96", "29.7147, 157.805, -38.7651, 0.37", "30.0488, 158.815, -38.9652, 0.29", "30.2724, 159.406, -39.184, 0.29", "30.6191, 160.282, -39.6149, 1.33", "30.7769, 160.668, -39.8592, 2.14", "30.8943, 160.956, -40.0757, 2.36", "30.979, 161.168, -40.2805, 2.36", "31.7028, 163.004, -42.377, 0.29", "31.8543, 163.411, -42.896, 0.88", "31.9927, 163.881, -43.5069, 1.4", "32.0517, 164.15, -43.8536, 1.55", "32.2017, 165.082, -45.0026, 0.37", "32.2393, 165.423, -45.3814, 0.37", "32.2695, 166.177, -46.0924, 1.18", "32.2938, 166.697, -46.5898, 1.47", "32.3283, 167.827, -47.583, 0.29", "32.3261, 168.138, -47.8261, 0.44", "32.3044, 168.615, -48.1347, 0.29", "32.2259, 169.686, -48.7657, 1.77", "32.1792, 170.278, -49.0634, 2.06", "32.1398, 170.841, -49.2934, 1.92", "32.0294, 172.085, -49.6263, 0.22", "31.9789, 172.673, -49.7388, 0.22", "31.9734, 172.736, -49.7434, 0.22", "31.9509, 173.23, -49.6834, 0.22", "31.9429, 174.015, -49.5141, 0.96", "31.9579, 174.256, -49.4501, 1.33", "31.9852, 174.502, -49.3783, 1.33", "32.0726, 175.219, -49.1792, 0.44", "32.2636, 176.547, -48.8493, 0.22", "32.2738, 176.608, -48.8354, 0.22", "32.4663, 177.591, -48.5661, 0.22", "32.5756, 178.119, -48.3935, 1.03", "32.648, 178.436, -48.2785, 1.62", "32.7786, 178.936, -48.0767, 1.62", "32.8109, 179.06, -48.0265, 1.62", "33.2539, 180.717, -47.3428, 0.22", "33.3519, 181.097, -47.1798, 0.66", "33.4521, 181.53, -47.0005, 0.66", "33.5108, 181.888, -46.8755, 0.59", "33.5697, 182.546, -46.7046, 0.22", "33.5796, 182.842, -46.659, 0.66", "33.5589, 183.171, -46.6498, 0.88", "33.5035, 183.724, -46.639, 0.44", "33.3773, 184.619, -46.6309, 0.22", "33.2763, 185.264, -46.6297, 0.81", "33.2082, 185.689, -46.6286, 1.18", "33.0165, 186.899, -46.6256, 0.22", "33.0092, 186.954, -46.6311, 0.22", "32.8962, 187.881, -46.7986, 0.22", "32.8475, 188.46, -46.9372, 1.03", "32.8322, 188.834, -47.0402, 1.33", "32.8337, 189.208, -47.1555, 1.33", "32.9973, 191.281, -47.8377, 0.22", "33.0027, 191.333, -47.8559, 0.22", "33.1764, 192.493, -48.3048, 0.22", "33.2486, 192.892, -48.4677, 0.59", "33.2598, 192.943, -48.488, 0.59", "33.4517, 193.64, -48.7289, 0.74" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-16.0255, -215.63, -51.2867, 0.37", "-14.3865, -217.181, -51.1119, 0.37", "-13.3536, -218.193, -51.0049, 0.29", "-12.0984, -219.488, -50.8697, 0.29", "-11.219, -220.46, -50.7701, 0.88", "-10.9318, -220.801, -50.7507, 1.11", "-10.8702, -220.879, -50.7484, 1.11", "-10.5797, -221.35, -50.7638, 1.11", "-10.0467, -222.438, -50.9167, 0.29", "-9.72836, -223.241, -51.098, 0.29", "-9.39625, -224.193, -51.3387, 0.74", "-9.25813, -224.59, -51.4618, 0.88", "-9.03689, -225.227, -51.6788, 0.59", "-8.56394, -226.592, -52.1741, 0.29", "-8.50431, -226.745, -52.2339, 0.29", "-8.14305, -227.569, -52.523, 0.29", "-7.70905, -228.481, -52.7824, 1.11", "-7.42318, -229.003, -52.9741, 1.4", "-7.11848, -229.529, -53.1657, 1.4", "-6.11146, -231.17, -53.7184, 0.22", "-5.52758, -232.112, -54.0538, 0.22", "-5.11768, -232.765, -54.3071, 0.81", "-3.90918, -234.636, -55.0314, 0.81" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-16.0255, -215.63, -51.2867, 0.96", "-14.5111, -216.857, -55.1732, 0.96", "-12.2861, -218.764, -60.5169, 0.96", "-11.1744, -219.748, -63.091, 0.66", "-10.442, -220.436, -64.7215, 1.4", "-10.2441, -220.629, -65.1426, 1.4", "-8.56487, -222.306, -68.5873, 0.44", "-7.98184, -222.869, -69.5321, 0.37", "-7.93444, -222.922, -69.5953, 0.37", "-6.60432, -224.442, -71.2414, 0.29", "-5.94175, -225.148, -71.9565, 1.47", "-5.79581, -225.297, -72.1076, 1.77", "-5.29827, -225.756, -72.5885, 1.99", "-4.33617, -226.562, -73.5471, 1.99", "-2.592, -227.957, -75.2501, 0.44", "-1.62205, -228.658, -76.2179, 0.81", "-0.328947, -229.47, -77.6183, 0.52", "1.55948, -230.629, -79.7099, 0.44", "2.54848, -231.213, -80.8348, 1.11", "3.00772, -231.474, -81.3667, 1.11", "5.53117, -232.786, -84.3238, 1.4", "8.37889, -234.122, -87.7949, 1.55" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_9", "dend_0", "dend_15", "dend_10", "dend_4", "dend_1", "dend_17", "dend_16", "dend_12", "dend_11", "dend_6", "dend_5", "dend_3", "dend_2", "dend_19", "dend_18", "dend_14", "dend_13", "dend_8", "dend_7" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_9", "dend_0", "dend_15", "dend_10", "dend_4", "dend_1", "dend_17", "dend_16", "dend_12", "dend_11", "dend_6", "dend_5", "dend_3", "dend_2", "dend_19", "dend_18", "dend_14", "dend_13", "dend_8", "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_19", "dend_18", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "2.90744E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "2.90744E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.418459",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.026008999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.025854",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.19695699",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "2.0E-6",
    "erev" : "-60.2509"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.9899996E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.008343",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "6.58298E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.026899999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.502333",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.653374",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "5.6999997E-5",
    "erev" : "-76.49812"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "7.84E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.30005398",
    "erev" : "50.0"
  }, {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.002256",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.38E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.005574",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "7.92E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bIR_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bIR_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bIR215_L4_BTC_4e26f3a393_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_9, id: dend_9, parent: soma_0
create dend_9
public dend_9
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_15, id: dend_15, parent: dend_9
create dend_15
public dend_15
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10
// Section: dend_4, id: dend_4, parent: dend_0
create dend_4
public dend_4
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_17, id: dend_17, parent: dend_15
create dend_17
public dend_17
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_12, id: dend_12, parent: dend_10
create dend_12
public dend_12
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_6, id: dend_6, parent: dend_4
create dend_6
public dend_6
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5
// Section: dend_3, id: dend_3, parent: dend_1
create dend_3
public dend_3
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_14, id: dend_14, parent: dend_12
create dend_14
public dend_14
// Section: dend_13, id: dend_13, parent: dend_12
create dend_13
public dend_13
// Section: dend_8, id: dend_8, parent: dend_6
create dend_8
public dend_8
// Section: dend_7, id: dend_7, parent: dend_6
create dend_7
public dend_7

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_22
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_19, dend_18, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bIR_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bIR_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_9(0), soma_0(0.49999821452163534)
    connect dend_0(0), soma_0(0.49999821452163534)
    connect axon_0(0), soma_0(1.0)
    connect dend_15(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)
    connect dend_4(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_17(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_12(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_6(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)
    connect dend_3(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_14(0), dend_12(1.0)
    connect dend_13(0), dend_12(1.0)
    connect dend_8(0), dend_6(1.0)
    connect dend_7(0), dend_6(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -1.49721, 11.7986, 0.0301706, 2.4623 ) }
    soma_0 { pt3dadd( -1.37308, 10.661, 0.0290426, 4.20373 ) }
    soma_0 { pt3dadd( -1.24895, 9.52332, 0.0279145, 5.59272 ) }
    soma_0 { pt3dadd( -1.12482, 8.38566, 0.0267864, 6.71614 ) }
    soma_0 { pt3dadd( -1.00068, 7.248, 0.0256584, 7.74544 ) }
    soma_0 { pt3dadd( -0.87655, 6.11034, 0.0245303, 8.57739 ) }
    soma_0 { pt3dadd( -0.752417, 4.97268, 0.0234023, 9.13171 ) }
    soma_0 { pt3dadd( -0.628284, 3.83502, 0.0222742, 9.51195 ) }
    soma_0 { pt3dadd( -0.504152, 2.69736, 0.0211462, 9.92921 ) }
    soma_0 { pt3dadd( -0.380019, 1.5597, 0.0200181, 10.275 ) }
    soma_0 { pt3dadd( -0.255886, 0.422041, 0.01889, 10.4231 ) }
    soma_0 { pt3dadd( -0.131754, -0.715618, 0.017762, 10.4046 ) }
    soma_0 { pt3dadd( -0.00762106, -1.85328, 0.0166339, 10.4069 ) }
    soma_0 { pt3dadd( 0.116512, -2.99094, 0.0155059, 10.1383 ) }
    soma_0 { pt3dadd( 0.240644, -4.1286, 0.0143778, 9.53645 ) }
    soma_0 { pt3dadd( 0.364777, -5.26626, 0.0132498, 8.49552 ) }
    soma_0 { pt3dadd( 0.48891, -6.40392, 0.0121217, 7.50349 ) }
    soma_0 { pt3dadd( 0.613042, -7.54158, 0.0109937, 6.64245 ) }
    soma_0 { pt3dadd( 0.737175, -8.67924, 0.0098656, 6.01482 ) }
    soma_0 { pt3dadd( 0.861308, -9.8169, 0.00873754, 4.86867 ) }
    soma_0 { pt3dadd( 0.98544, -10.9546, 0.00760949, 2.96361 ) }
    // Section: dend_9, id: dend_9, parent: soma_0 (entry count 21/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -1.78536, 11.5335, 1.5043, 2.36 ) }
    dend_9 { pt3dadd( -1.78536, 11.5335, 1.5043, 2.36 ) }
    dend_9 { pt3dadd( -1.92164, 12.3389, 1.7108, 2.06 ) }
    dend_9 { pt3dadd( -2.08146, 13.1828, 1.9539, 2.06 ) }
    dend_9 { pt3dadd( -2.0996, 13.2622, 1.97776, 2.06 ) }
    dend_9 { pt3dadd( -2.33058, 14.1866, 2.25655, 2.21 ) }
    dend_9 { pt3dadd( -2.68811, 15.4758, 2.71035, 2.21 ) }
    dend_9 { pt3dadd( -2.96721, 16.3245, 3.04355, 2.21 ) }
    dend_9 { pt3dadd( -2.98367, 16.3682, 3.06376, 2.21 ) }
    dend_9 { pt3dadd( -3.31837, 17.1956, 3.47646, 2.21 ) }
    dend_9 { pt3dadd( -3.47328, 17.5627, 3.66688, 2.36 ) }
    dend_9 { pt3dadd( -3.951, 18.6242, 4.26017, 2.43 ) }
    dend_9 { pt3dadd( -4.25684, 19.2632, 4.60737, 2.65 ) }
    dend_9 { pt3dadd( -4.72656, 20.2616, 5.17294, 2.65 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 35/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 0.094648, -10.2765, 0.0043065, 4.86 ) }
    dend_0 { pt3dadd( 0.094648, -10.2765, 0.0043065, 4.86 ) }
    dend_0 { pt3dadd( -0.187913, -11.1853, -0.023961, 4.57 ) }
    dend_0 { pt3dadd( -0.50116, -12.1755, -0.0613088, 4.2 ) }
    dend_0 { pt3dadd( -1.06045, -13.9525, -0.133354, 2.87 ) }
    dend_0 { pt3dadd( -1.5102, -15.4621, -0.210971, 2.58 ) }
    dend_0 { pt3dadd( -2.00082, -17.1785, -0.308079, 2.5 ) }
    dend_0 { pt3dadd( -2.34326, -18.4642, -0.369301, 2.58 ) }
    dend_0 { pt3dadd( -2.35428, -18.5106, -0.371136, 2.58 ) }
    dend_0 { pt3dadd( -2.46833, -19.1326, -0.388739, 2.73 ) }
    dend_0 { pt3dadd( -2.63749, -20.6079, -0.408713, 2.73 ) }
    dend_0 { pt3dadd( -2.67354, -21.5876, -0.382404, 2.36 ) }
    dend_0 { pt3dadd( -2.65059, -22.8017, -0.303818, 2.65 ) }
    dend_0 { pt3dadd( -2.59269, -23.8698, -0.212712, 2.87 ) }
    dend_0 { pt3dadd( -2.51816, -24.9062, -0.119516, 3.09 ) }
    dend_0 { pt3dadd( -2.42093, -25.8671, -0.0297663, 3.09 ) }
    dend_0 { pt3dadd( -2.25389, -27.1314, 0.0935891, 3.32 ) }
    dend_0 { pt3dadd( -2.16091, -27.7536, 0.150407, 3.02 ) }
    dend_0 { pt3dadd( -1.96159, -29.0337, 0.245776, 2.43 ) }
    dend_0 { pt3dadd( -1.72616, -30.5301, 0.356257, 2.36 ) }
    dend_0 { pt3dadd( -1.58102, -31.5087, 0.419479, 2.36 ) }
    dend_0 { pt3dadd( -1.49939, -31.9992, 0.440845, 2.36 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 57/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 0.98544, -10.9546, 0.00760949, 0.673788 ) }
    axon_0 { pt3dadd( 2.61247, -25.8661, 0.00760949, 0.673788 ) }
    axon_0 { pt3dadd( 4.23949, -40.7776, 0.00760949, 0.673788 ) }
    // Section: dend_15, id: dend_15, parent: dend_9 (entry count 60/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -4.72656, 20.2616, 5.17294, 1.4 ) }
    dend_15 { pt3dadd( -5.54253, 22.176, 5.37765, 1.4 ) }
    dend_15 { pt3dadd( -6.20667, 23.8391, 5.54088, 1.18 ) }
    dend_15 { pt3dadd( -6.64158, 25.0264, 5.64336, 1.18 ) }
    dend_15 { pt3dadd( -7.07781, 26.2822, 5.74287, 1.18 ) }
    dend_15 { pt3dadd( -7.47142, 27.4875, 5.82646, 1.62 ) }
    dend_15 { pt3dadd( -7.71076, 28.2582, 5.89661, 1.99 ) }
    dend_15 { pt3dadd( -7.73403, 28.3562, 5.90666, 1.99 ) }
    dend_15 { pt3dadd( -7.96046, 29.5811, 6.02335, 2.06 ) }
    dend_15 { pt3dadd( -7.98487, 29.769, 6.0423, 2.06 ) }
    dend_15 { pt3dadd( -8.09078, 31.1923, 6.18469, 1.62 ) }
    dend_15 { pt3dadd( -8.16129, 33.067, 6.41775, 1.4 ) }
    dend_15 { pt3dadd( -8.16349, 33.2029, 6.43627, 1.4 ) }
    dend_15 { pt3dadd( -8.15628, 34.7162, 6.64998, 1.47 ) }
    dend_15 { pt3dadd( -8.11996, 36.0484, 6.84372, 1.77 ) }
    dend_15 { pt3dadd( -8.07129, 37.2113, 7.00193, 1.92 ) }
    dend_15 { pt3dadd( -7.97158, 38.8422, 7.19795, 1.11 ) }
    dend_15 { pt3dadd( -7.95119, 39.2204, 7.23187, 1.11 ) }
    dend_15 { pt3dadd( -7.94296, 39.9539, 7.2946, 1.11 ) }
    dend_15 { pt3dadd( -7.95437, 40.2207, 7.31623, 1.11 ) }
    dend_15 { pt3dadd( -8.10985, 41.8786, 7.43724, 0.96 ) }
    dend_15 { pt3dadd( -8.26395, 42.9592, 7.46659, 0.96 ) }
    dend_15 { pt3dadd( -8.46164, 44.021, 7.44645, 1.55 ) }
    dend_15 { pt3dadd( -8.66349, 44.9886, 7.40137, 2.36 ) }
    dend_15 { pt3dadd( -8.84032, 45.8745, 7.34731, 2.5 ) }
    dend_15 { pt3dadd( -8.97319, 46.5714, 7.2976, 2.8 ) }
    dend_15 { pt3dadd( -9.23898, 48.0522, 7.18003, 2.43 ) }
    dend_15 { pt3dadd( -9.43871, 49.3015, 7.07621, 1.99 ) }
    dend_15 { pt3dadd( -9.68279, 51.5122, 6.96681, 1.4 ) }
    dend_15 { pt3dadd( -9.73309, 52.6596, 6.95351, 1.4 ) }
    dend_15 { pt3dadd( -9.72769, 52.9425, 6.96595, 1.4 ) }
    dend_15 { pt3dadd( -9.61012, 54.2957, 7.09487, 1.62 ) }
    dend_15 { pt3dadd( -9.59775, 54.383, 7.10964, 1.62 ) }
    dend_15 { pt3dadd( -9.26035, 56.3463, 7.54228, 1.03 ) }
    dend_15 { pt3dadd( -8.98947, 57.843, 7.97238, 1.03 ) }
    dend_15 { pt3dadd( -8.77989, 59.1519, 8.39616, 1.47 ) }
    dend_15 { pt3dadd( -8.54266, 60.7676, 8.94639, 1.69 ) }
    dend_15 { pt3dadd( -8.30664, 62.6856, 9.61267, 1.69 ) }
    dend_15 { pt3dadd( -8.20363, 64.0433, 10.0621, 2.14 ) }
    dend_15 { pt3dadd( -8.1803, 65.5275, 10.5119, 2.8 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_15 { pt3dadd( -8.23077, 66.8845, 10.9023, 3.24 ) }
    dend_15 { pt3dadd( -8.30345, 67.765, 11.1202, 3.39 ) }
    dend_15 { pt3dadd( -8.47942, 69.0849, 11.3947, 2.21 ) }
    dend_15 { pt3dadd( -8.75388, 70.7396, 11.6647, 1.33 ) }
    dend_15 { pt3dadd( -9.05438, 72.2374, 11.8482, 1.18 ) }
    dend_15 { pt3dadd( -9.0899, 72.3969, 11.8575, 1.18 ) }
    dend_15 { pt3dadd( -9.43649, 73.9215, 11.8925, 1.47 ) }
    dend_15 { pt3dadd( -9.64049, 74.7908, 11.9099, 1.62 ) }
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 8/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -4.72656, 20.2616, 5.17294, 1.03 ) }
    dend_10 { pt3dadd( -3.16933, 21.3493, 5.20332, 1.03 ) }
    dend_10 { pt3dadd( -3.00426, 21.4588, 5.20608, 1.03 ) }
    dend_10 { pt3dadd( -1.72251, 22.2835, 5.22422, 1.03 ) }
    dend_10 { pt3dadd( 9.59137E-4, 23.3732, 5.24647, 1.4 ) }
    dend_10 { pt3dadd( 0.076218, 23.4198, 5.24975, 1.4 ) }
    dend_10 { pt3dadd( 2.15077, 24.7134, 5.37356, 1.4 ) }
    dend_10 { pt3dadd( 2.22946, 24.762, 5.3792, 1.4 ) }
    dend_10 { pt3dadd( 3.40632, 25.5397, 5.47924, 1.55 ) }
    dend_10 { pt3dadd( 3.48794, 25.5975, 5.4876, 1.55 ) }
    dend_10 { pt3dadd( 5.14716, 26.9507, 5.68425, 0.96 ) }
    dend_10 { pt3dadd( 5.97587, 27.708, 5.78939, 0.96 ) }
    dend_10 { pt3dadd( 6.64569, 28.4495, 5.88533, 1.18 ) }
    dend_10 { pt3dadd( 7.36121, 29.337, 5.98273, 1.4 ) }
    dend_10 { pt3dadd( 7.46965, 29.4919, 5.99088, 1.4 ) }
    dend_10 { pt3dadd( 8.07231, 30.4048, 5.98621, 1.4 ) }
    dend_10 { pt3dadd( 8.13693, 30.5055, 5.97959, 1.4 ) }
    dend_10 { pt3dadd( 8.8429, 31.5519, 5.89593, 1.69 ) }
    dend_10 { pt3dadd( 9.3657, 32.2739, 5.83334, 1.92 ) }
    dend_10 { pt3dadd( 10.103, 33.257, 5.76377, 1.4 ) }
    dend_10 { pt3dadd( 11.0573, 34.5442, 5.69633, 1.11 ) }
    dend_10 { pt3dadd( 11.9454, 35.7352, 5.64914, 1.11 ) }
    dend_10 { pt3dadd( 12.0185, 35.8369, 5.64681, 1.11 ) }
    dend_10 { pt3dadd( 12.8169, 36.9806, 5.63962, 1.11 ) }
    dend_10 { pt3dadd( 13.4579, 37.9758, 5.65798, 1.03 ) }
    dend_10 { pt3dadd( 14.1309, 39.1305, 5.7159, 1.03 ) }
    dend_10 { pt3dadd( 14.1851, 39.2433, 5.72133, 1.03 ) }
    dend_10 { pt3dadd( 14.8041, 40.7704, 5.78791, 1.03 ) }
    dend_10 { pt3dadd( 14.8325, 40.8543, 5.79082, 1.03 ) }
    dend_10 { pt3dadd( 15.1111, 41.9824, 5.81512, 0.81 ) }
    dend_10 { pt3dadd( 15.1292, 42.1128, 5.81526, 0.81 ) }
    dend_10 { pt3dadd( 15.1689, 43.1025, 5.81603, 0.59 ) }
    dend_10 { pt3dadd( 15.1622, 43.2913, 5.81613, 0.59 ) }
    dend_10 { pt3dadd( 15.0684, 44.2546, 5.83769, 0.59 ) }
    dend_10 { pt3dadd( 15.0387, 44.6075, 5.85033, 0.59 ) }
    dend_10 { pt3dadd( 14.9879, 45.4489, 5.88738, 0.74 ) }
    dend_10 { pt3dadd( 14.9839, 45.5803, 5.89373, 0.74 ) }
    dend_10 { pt3dadd( 15.0253, 47.0632, 5.96905, 0.74 ) }
    dend_10 { pt3dadd( 15.1297, 48.1852, 6.02367, 1.25 ) }
    dend_10 { pt3dadd( 15.2881, 49.0583, 6.06317, 1.69 ) }
    dend_10 { pt3dadd( 15.5924, 50.2929, 6.11057, 1.4 ) }
    dend_10 { pt3dadd( 15.6176, 50.3777, 6.11321, 1.4 ) }
    dend_10 { pt3dadd( 15.9312, 51.4084, 6.13665, 2.06 ) }
    dend_10 { pt3dadd( 16.2935, 52.5546, 6.15454, 2.21 ) }
    dend_10 { pt3dadd( 16.675, 53.7692, 6.16275, 1.77 ) }
    dend_10 { pt3dadd( 17.094, 55.1444, 6.17424, 1.11 ) }
    dend_10 { pt3dadd( 17.3967, 56.2181, 6.18433, 1.11 ) }
    dend_10 { pt3dadd( 17.6596, 57.2607, 6.19462, 1.4 ) }
    dend_10 { pt3dadd( 17.9621, 58.6768, 6.2096, 0.59 ) }
    dend_10 { pt3dadd( 17.9769, 58.7642, 6.21057, 0.59 ) }
    dend_10 { pt3dadd( 18.1157, 60.0695, 6.25619, 0.44 ) }
    dend_10 { pt3dadd( 18.153, 61.077, 6.31572, 1.11 ) }
    dend_10 { pt3dadd( 18.1458, 61.8327, 6.3752, 1.33 ) }
    dend_10 { pt3dadd( 18.141, 62.0065, 6.38597, 1.33 ) }
    dend_10 { pt3dadd( 18.1039, 62.5364, 6.40615, 1.33 ) }
    dend_10 { pt3dadd( 18.0065, 63.7648, 6.41218, 0.52 ) }
    dend_10 { pt3dadd( 17.8441, 65.3678, 6.37449, 0.52 ) }
    dend_10 { pt3dadd( 17.8339, 65.4674, 6.36936, 0.52 ) }
    dend_10 { pt3dadd( 17.7308, 66.4752, 6.25862, 0.96 ) }
    dend_10 { pt3dadd( 17.63, 67.6831, 6.02821, 1.55 ) }
    dend_10 { pt3dadd( 17.5657, 68.6497, 5.72485, 1.77 ) }
    dend_10 { pt3dadd( 17.5411, 69.1337, 5.51437, 1.99 ) }
    dend_10 { pt3dadd( 17.5383, 69.1996, 5.48309, 1.99 ) }
    dend_10 { pt3dadd( 17.4977, 70.4224, 4.9186, 1.99 ) }
    dend_10 { pt3dadd( 17.4673, 71.49, 4.43221, 1.4 ) }
    dend_10 { pt3dadd( 17.4429, 73.3254, 3.58757, 0.44 ) }
    dend_10 { pt3dadd( 17.4343, 74.4354, 3.08515, 0.96 ) }
    dend_10 { pt3dadd( 17.443, 75.287, 2.72355, 1.4 ) }
    dend_10 { pt3dadd( 17.4633, 76.204, 2.37435, 1.77 ) }
    dend_10 { pt3dadd( 17.4672, 76.2776, 2.35215, 1.77 ) }
    dend_10 { pt3dadd( 17.5223, 76.9795, 2.21521, 1.99 ) }
    dend_10 { pt3dadd( 17.5458, 77.176, 2.20052, 1.99 ) }
    dend_10 { pt3dadd( 17.6324, 77.8183, 2.18447, 1.99 ) }
    dend_10 { pt3dadd( 17.6536, 77.9941, 2.18055, 1.99 ) }
    dend_10 { pt3dadd( 17.7324, 78.8322, 2.13885, 1.69 ) }
    dend_10 { pt3dadd( 17.7915, 79.8709, 2.07351, 1.11 ) }
    dend_10 { pt3dadd( 17.8157, 80.9181, 2.00058, 0.44 ) }
    dend_10 { pt3dadd( 17.8042, 82.1872, 1.91004, 0.37 ) }
    dend_10 { pt3dadd( 17.7353, 83.3562, 1.81959, 1.03 ) }
    dend_10 { pt3dadd( 17.6633, 84.3087, 1.77638, 1.03 ) }
    dend_10 { pt3dadd( 17.5796, 85.472, 1.7552, 0.44 ) }
    dend_10 { pt3dadd( 17.5363, 86.1761, 1.75734, 0.88 ) }
    dend_10 { pt3dadd( 17.5137, 86.8206, 1.77011, 1.18 ) }
    dend_10 { pt3dadd( 17.5103, 87.6943, 1.79931, 1.18 ) }
    dend_10 { pt3dadd( 17.6102, 89.6567, 1.87651, 0.37 ) }
    dend_10 { pt3dadd( 17.7181, 90.72, 1.92634, 0.37 ) }
    dend_10 { pt3dadd( 17.9546, 92.2603, 1.97986, 1.33 ) }
    dend_10 { pt3dadd( 18.1514, 93.346, 2.01043, 2.36 ) }
    dend_10 { pt3dadd( 18.2762, 93.9437, 2.01918, 2.95 ) }
    dend_10 { pt3dadd( 18.4451, 94.6085, 2.00882, 3.24 ) }
    dend_10 { pt3dadd( 18.4725, 94.7194, 1.9968, 3.24 ) }
    dend_10 { pt3dadd( 18.5458, 95.039, 1.9546, 3.24 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    // Section: dend_4, id: dend_4, parent: dend_0 (entry count 0/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -1.49939, -31.9992, 0.440845, 2.06 ) }
    dend_4 { pt3dadd( -1.48636, -33.2618, 0.55002, 2.06 ) }
    dend_4 { pt3dadd( -1.42479, -35.4936, 0.520247, 2.06 ) }
    dend_4 { pt3dadd( -1.35315, -37.0457, 0.396476, 2.06 ) }
    dend_4 { pt3dadd( -1.23153, -38.6413, 0.213917, 2.06 ) }
    dend_4 { pt3dadd( -1.01244, -40.6628, -0.083899, 2.14 ) }
    dend_4 { pt3dadd( -0.830277, -42.0538, -0.305701, 2.14 ) }
    dend_4 { pt3dadd( -0.493241, -44.1388, -0.745795, 2.43 ) }
    dend_4 { pt3dadd( -0.29867, -45.2891, -1.03282, 2.8 ) }
    dend_4 { pt3dadd( -0.0285492, -46.8514, -1.40563, 2.36 ) }
    dend_4 { pt3dadd( 0.348106, -48.9727, -1.89643, 2.36 ) }
    dend_4 { pt3dadd( 0.650774, -50.5972, -2.24226, 2.36 ) }
    dend_4 { pt3dadd( 0.993678, -52.5439, -2.63537, 2.36 ) }
    dend_4 { pt3dadd( 1.28987, -54.5669, -3.00776, 2.14 ) }
    dend_4 { pt3dadd( 1.49584, -56.3957, -3.37517, 2.14 ) }
    dend_4 { pt3dadd( 1.62122, -58.1931, -3.77343, 2.28 ) }
    dend_4 { pt3dadd( 1.63738, -58.8524, -3.92747, 2.28 ) }
    dend_4 { pt3dadd( 1.5927, -60.5073, -4.34476, 1.69 ) }
    dend_4 { pt3dadd( 1.42607, -62.2965, -4.74212, 1.18 ) }
    dend_4 { pt3dadd( 1.21913, -63.3514, -4.91333, 1.18 ) }
    dend_4 { pt3dadd( 0.94169, -64.074, -4.90699, 1.18 ) }
    dend_4 { pt3dadd( 0.466818, -64.8201, -4.70004, 1.18 ) }
    dend_4 { pt3dadd( -0.174593, -65.5347, -4.32419, 0.96 ) }
    dend_4 { pt3dadd( -1.36396, -66.5357, -3.57354, 1.11 ) }
    dend_4 { pt3dadd( -2.64198, -67.4338, -2.85362, 1.69 ) }
    dend_4 { pt3dadd( -4.01687, -68.3539, -2.20865, 1.55 ) }
    dend_4 { pt3dadd( -4.84203, -68.8885, -1.96461, 1.92 ) }
    dend_4 { pt3dadd( -5.62461, -69.4128, -1.86699, 2.21 ) }
    dend_4 { pt3dadd( -6.66619, -70.1924, -1.9535, 2.06 ) }
    dend_4 { pt3dadd( -7.96148, -71.2606, -2.30258, 1.99 ) }
    dend_4 { pt3dadd( -8.94752, -72.1632, -2.68159, 1.77 ) }
    dend_4 { pt3dadd( -10.0622, -73.2866, -3.11792, 1.92 ) }
    dend_4 { pt3dadd( -11.0517, -74.3865, -3.4462, 1.84 ) }
    dend_4 { pt3dadd( -12.0204, -75.5667, -3.60934, 1.69 ) }
    dend_4 { pt3dadd( -12.6505, -76.4373, -3.57601, 1.11 ) }
    dend_4 { pt3dadd( -13.3531, -77.6126, -3.38618, 0.96 ) }
    dend_4 { pt3dadd( -14.0633, -79.0622, -3.04235, 1.25 ) }
    dend_4 { pt3dadd( -14.414, -79.9478, -2.82401, 0.81 ) }
    dend_4 { pt3dadd( -15.013, -81.9146, -2.54899, 0.74 ) }
    dend_4 { pt3dadd( -15.2647, -83.0174, -2.53753, 0.37 ) }
    dend_4 { pt3dadd( -15.5028, -84.7535, -2.77137, 1.47 ) }
    dend_4 { pt3dadd( -15.5395, -85.5884, -3.00415, 2.14 ) }
    dend_4 { pt3dadd( -15.4996, -87.1677, -3.68824, 2.5 ) }
    dend_4 { pt3dadd( -15.3181, -89.1644, -4.83671, 1.03 ) }
    dend_4 { pt3dadd( -15.1808, -90.1941, -5.55063, 0.88 ) }
    dend_4 { pt3dadd( -15.0339, -90.9829, -6.12343, 0.44 ) }
    dend_4 { pt3dadd( -14.7049, -92.3176, -7.13108, 0.44 ) }
    dend_4 { pt3dadd( -14.2463, -93.8543, -8.29115, 1.18 ) }
    dend_4 { pt3dadd( -13.6833, -95.6001, -9.5239, 1.62 ) }
    dend_4 { pt3dadd( -13.6473, -95.7121, -9.59694, 1.62 ) }
    dend_4 { pt3dadd( -13.2725, -96.9147, -10.308, 1.62 ) }
    dend_4 { pt3dadd( -12.7887, -98.7606, -11.2623, 1.47 ) }
    dend_4 { pt3dadd( -12.5419, -99.9774, -11.766, 1.99 ) }
    dend_4 { pt3dadd( -12.4287, -100.969, -12.0799, 1.99 ) }
    dend_4 { pt3dadd( -12.4012, -101.873, -12.3059, 1.99 ) }
    dend_4 { pt3dadd( -12.4708, -103.604, -12.7016, 0.59 ) }
    dend_4 { pt3dadd( -12.6427, -104.855, -12.9562, 0.52 ) }
    dend_4 { pt3dadd( -12.8621, -105.775, -13.0636, 0.52 ) }
    dend_4 { pt3dadd( -13.5538, -107.903, -13.2261, 2.8 ) }
    dend_4 { pt3dadd( -13.8652, -108.759, -13.2737, 3.17 ) }
    dend_4 { pt3dadd( -14.2059, -109.604, -13.2421, 3.46 ) }
    dend_4 { pt3dadd( -14.5344, -110.405, -13.0754, 3.46 ) }
    dend_4 { pt3dadd( -15.3141, -112.351, -12.537, 1.69 ) }
    dend_4 { pt3dadd( -15.7575, -113.527, -12.1014, 1.11 ) }
    dend_4 { pt3dadd( -16.0077, -114.246, -11.7293, 1.25 ) }
    dend_4 { pt3dadd( -16.6446, -116.177, -10.5785, 1.99 ) }
    dend_4 { pt3dadd( -17.2142, -118.1, -9.24242, 1.47 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 67/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -1.49939, -31.9992, 0.440845, 0.96 ) }
    dend_1 { pt3dadd( -0.944982, -32.7167, -0.773527, 0.96 ) }
    dend_1 { pt3dadd( -0.464617, -33.2854, -1.76436, 0.81 ) }
    dend_1 { pt3dadd( 0.310555, -34.0609, -3.1492, 0.59 ) }
    dend_1 { pt3dadd( 0.528106, -34.2418, -3.49014, 0.88 ) }
    dend_1 { pt3dadd( 0.74925, -34.3952, -3.79754, 1.11 ) }
    dend_1 { pt3dadd( 0.786509, -34.4164, -3.84478, 1.11 ) }
    dend_1 { pt3dadd( 1.31882, -34.5774, -4.44386, 1.25 ) }
    dend_1 { pt3dadd( 1.76181, -34.6643, -5.01524, 0.88 ) }
    dend_1 { pt3dadd( 2.23522, -34.7355, -5.70645, 0.52 ) }
    dend_1 { pt3dadd( 2.45129, -34.7865, -6.15981, 0.81 ) }
    dend_1 { pt3dadd( 2.71335, -34.8944, -6.91043, 0.96 ) }
    dend_1 { pt3dadd( 3.02557, -35.131, -8.2108, 0.52 ) }
    dend_1 { pt3dadd( 3.12324, -35.5808, -10.0759, 0.52 ) }
    dend_1 { pt3dadd( 3.1165, -35.5976, -10.1269, 0.52 ) }
    dend_1 { pt3dadd( 2.72446, -36.1599, -11.3452, 0.96 ) }
    dend_1 { pt3dadd( 2.55998, -36.3759, -11.6997, 1.11 ) }
    dend_1 { pt3dadd( 2.34123, -36.6512, -12.0464, 1.11 ) }
    dend_1 { pt3dadd( 1.68845, -37.5569, -12.8926, 0.66 ) }
    dend_1 { pt3dadd( 1.42451, -38.0097, -13.2498, 0.37 ) }
    dend_1 { pt3dadd( 1.15125, -38.6881, -13.8113, 0.37 ) }
    dend_1 { pt3dadd( 1.06185, -39.1673, -14.2414, 0.59 ) }
    dend_1 { pt3dadd( 1.06064, -39.2074, -14.281, 0.59 ) }
    dend_1 { pt3dadd( 1.17221, -39.8466, -14.9833, 1.03 ) }
    dend_1 { pt3dadd( 1.35678, -40.4068, -15.6572, 1.69 ) }
    dend_1 { pt3dadd( 1.57633, -41.027, -16.4297, 2.21 ) }
    dend_1 { pt3dadd( 1.76074, -41.5808, -17.1114, 2.8 ) }
    dend_1 { pt3dadd( 1.82449, -41.8297, -17.4077, 2.8 ) }
    dend_1 { pt3dadd( 2.04655, -43.0449, -18.7632, 1.33 ) }
    dend_1 { pt3dadd( 2.13839, -43.909, -19.6298, 0.52 ) }
    dend_1 { pt3dadd( 2.15427, -44.3603, -20.0226, 0.66 ) }
    dend_1 { pt3dadd( 2.1541, -44.7168, -20.2823, 0.66 ) }
    dend_1 { pt3dadd( 2.15988, -45.245, -20.6153, 0.29 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_1 { pt3dadd( 2.17114, -45.7122, -20.875, 0.37 ) }
    dend_1 { pt3dadd( 2.21433, -46.2478, -21.061, 0.37 ) }
    dend_1 { pt3dadd( 2.23704, -46.312, -21.0871, 0.37 ) }
    dend_1 { pt3dadd( 2.54987, -46.7895, -21.4225, 0.66 ) }
    dend_1 { pt3dadd( 2.85039, -47.1802, -21.7651, 0.96 ) }
    dend_1 { pt3dadd( 2.8759, -47.2105, -21.7938, 0.96 ) }
    dend_1 { pt3dadd( 3.16485, -47.5564, -22.1271, 0.96 ) }
    dend_1 { pt3dadd( 3.72628, -48.2704, -22.8537, 0.52 ) }
    dend_1 { pt3dadd( 4.21435, -48.9308, -23.5096, 0.37 ) }
    dend_1 { pt3dadd( 4.78427, -49.7408, -24.3188, 1.77 ) }
    dend_1 { pt3dadd( 5.00433, -50.0704, -24.6389, 2.36 ) }
    dend_1 { pt3dadd( 5.24242, -50.4388, -24.9922, 2.58 ) }
    dend_1 { pt3dadd( 5.95824, -51.6074, -26.0885, 0.74 ) }
    dend_1 { pt3dadd( 6.18827, -52.0192, -26.4217, 0.74 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 14/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 4.23949, -40.7776, 0.00760949, 0.15 ) }
    axon_1 { pt3dadd( 5.86652, -55.6891, 0.00760949, 0.15 ) }
    axon_1 { pt3dadd( 7.49354, -70.6006, 0.00760949, 0.15 ) }
    // Section: dend_17, id: dend_17, parent: dend_15 (entry count 17/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -9.64049, 74.7908, 11.9099, 0.81 ) }
    dend_17 { pt3dadd( -10.0432, 75.6464, 11.6891, 0.81 ) }
    dend_17 { pt3dadd( -10.5417, 76.792, 11.4001, 0.74 ) }
    dend_17 { pt3dadd( -10.9642, 77.8096, 11.1578, 0.74 ) }
    dend_17 { pt3dadd( -10.9938, 77.8861, 11.1374, 0.74 ) }
    dend_17 { pt3dadd( -11.5238, 79.312, 10.747, 0.74 ) }
    dend_17 { pt3dadd( -11.7701, 79.9929, 10.5411, 1.33 ) }
    dend_17 { pt3dadd( -11.9946, 80.6807, 10.307, 1.92 ) }
    dend_17 { pt3dadd( -12.2226, 81.4277, 10.0288, 1.33 ) }
    dend_17 { pt3dadd( -12.5587, 82.4554, 9.6259, 1.11 ) }
    dend_17 { pt3dadd( -12.8206, 83.1916, 9.32211, 1.47 ) }
    dend_17 { pt3dadd( -13.1964, 84.1294, 8.92357, 1.18 ) }
    dend_17 { pt3dadd( -13.2186, 84.1819, 8.90074, 1.18 ) }
    dend_17 { pt3dadd( -13.5666, 85.002, 8.54773, 0.66 ) }
    dend_17 { pt3dadd( -13.87, 85.7827, 8.22423, 0.66 ) }
    dend_17 { pt3dadd( -14.235, 86.8242, 7.83824, 1.47 ) }
    dend_17 { pt3dadd( -14.45, 87.5312, 7.62955, 1.99 ) }
    dend_17 { pt3dadd( -14.6991, 88.4539, 7.42089, 1.99 ) }
    dend_17 { pt3dadd( -15.0892, 90.0981, 7.12869, 0.66 ) }
    dend_17 { pt3dadd( -15.279, 91.0674, 7.00675, 0.52 ) }
    dend_17 { pt3dadd( -15.3889, 91.7537, 6.95825, 0.59 ) }
    dend_17 { pt3dadd( -15.6232, 93.1161, 6.96709, 0.74 ) }
    dend_17 { pt3dadd( -15.6399, 93.2037, 6.9714, 0.74 ) }
    dend_17 { pt3dadd( -15.8376, 94.0044, 7.03643, 1.33 ) }
    dend_17 { pt3dadd( -16.0277, 94.6415, 7.10404, 1.62 ) }
    dend_17 { pt3dadd( -16.3572, 95.5575, 7.181, 1.18 ) }
    dend_17 { pt3dadd( -16.7801, 96.6097, 7.18643, 0.66 ) }
    dend_17 { pt3dadd( -17.1251, 97.419, 7.13871, 0.66 ) }
    dend_17 { pt3dadd( -17.7841, 98.8748, 7.00862, 2.28 ) }
    dend_17 { pt3dadd( -18.1504, 99.6106, 6.91741, 2.73 ) }
    dend_17 { pt3dadd( -18.4766, 100.234, 6.82135, 2.95 ) }
    dend_17 { pt3dadd( -19.3268, 101.828, 6.53068, 1.03 ) }
    dend_17 { pt3dadd( -19.3616, 101.893, 6.51727, 1.03 ) }
    dend_17 { pt3dadd( -19.7106, 102.537, 6.38901, 0.81 ) }
    dend_17 { pt3dadd( -20.1215, 103.285, 6.25043, 0.44 ) }
    dend_17 { pt3dadd( -20.5444, 104.068, 6.12532, 0.44 ) }
    dend_17 { pt3dadd( -21.0382, 104.993, 6.00231, 0.44 ) }
    dend_17 { pt3dadd( -21.5283, 105.879, 5.90404, 1.11 ) }
    dend_17 { pt3dadd( -21.8927, 106.533, 5.83, 1.69 ) }
    dend_17 { pt3dadd( -22.3773, 107.416, 5.73124, 2.21 ) }
    dend_17 { pt3dadd( -22.6679, 107.945, 5.67128, 2.5 ) }
    dend_17 { pt3dadd( -23.4062, 109.224, 5.51363, 1.25 ) }
    dend_17 { pt3dadd( -24.0738, 110.351, 5.36718, 0.44 ) }
    dend_17 { pt3dadd( -24.6186, 111.26, 5.24434, 0.44 ) }
    dend_17 { pt3dadd( -25.0516, 111.971, 5.1462, 1.03 ) }
    dend_17 { pt3dadd( -25.5225, 112.762, 5.04021, 1.33 ) }
    dend_17 { pt3dadd( -25.6391, 112.962, 5.0142, 1.33 ) }
    dend_17 { pt3dadd( -25.9052, 113.436, 4.95548, 1.47 ) }
    dend_17 { pt3dadd( -26.385, 114.281, 4.84925, 0.88 ) }
    dend_17 { pt3dadd( -26.8096, 114.992, 4.75365, 0.59 ) }
    dend_17 { pt3dadd( -27.2598, 115.697, 4.65007, 0.44 ) }
    dend_17 { pt3dadd( -27.3142, 115.776, 4.63726, 0.44 ) }
    dend_17 { pt3dadd( -28.0032, 116.675, 4.47076, 0.44 ) }
    dend_17 { pt3dadd( -28.3799, 117.092, 4.3764, 0.66 ) }
    dend_17 { pt3dadd( -28.5494, 117.259, 4.33304, 0.66 ) }
    dend_17 { pt3dadd( -29.0697, 117.759, 4.19938, 0.66 ) }
    dend_17 { pt3dadd( -29.5818, 118.305, 4.08479, 0.66 ) }
    dend_17 { pt3dadd( -30.0472, 118.913, 4.00004, 0.37 ) }
    dend_17 { pt3dadd( -30.3491, 119.442, 3.95176, 0.37 ) }
    dend_17 { pt3dadd( -30.7479, 120.35, 3.88916, 0.66 ) }
    dend_17 { pt3dadd( -30.9528, 121.037, 3.84644, 0.96 ) }
    dend_17 { pt3dadd( -31.1268, 122.035, 3.79541, 0.29 ) }
    dend_17 { pt3dadd( -31.2055, 122.809, 3.76343, 0.44 ) }
    dend_17 { pt3dadd( -31.2515, 123.627, 3.73307, 0.96 ) }
    dend_17 { pt3dadd( -31.2573, 123.76, 3.72762, 0.96 ) }
    dend_17 { pt3dadd( -31.3258, 124.981, 3.65846, 1.77 ) }
    dend_17 { pt3dadd( -31.4436, 126.159, 3.56981, 2.95 ) }
    dend_17 { pt3dadd( -31.4734, 126.747, 3.40809, 3.54 ) }
    dend_17 { pt3dadd( -31.4738, 126.817, 3.38161, 3.54 ) }
    dend_17 { pt3dadd( -31.4451, 127.576, 3.05373, 3.76 ) }
    dend_17 { pt3dadd( -31.4403, 127.641, 3.02266, 3.76 ) }
    dend_17 { pt3dadd( -31.3382, 128.562, 2.54098, 3.46 ) }
    dend_17 { pt3dadd( -30.8787, 131.726, 0.833127, 0.81 ) }
    dend_17 { pt3dadd( -30.8673, 131.801, 0.795903, 0.81 ) }
    dend_17 { pt3dadd( -30.785, 132.446, 0.51651, 0.81 ) }
    dend_17 { pt3dadd( -30.779, 132.517, 0.494331, 0.81 ) }
    dend_17 { pt3dadd( -30.7481, 133.396, 0.365234, 1.11 ) }
    dend_17 { pt3dadd( -30.7537, 134.047, 0.373353, 1.25 ) }
    dend_17 { pt3dadd( -30.8335, 135.248, 0.580624, 0.37 ) }
    dend_17 { pt3dadd( -30.9015, 136.216, 0.757647, 0.29 ) }
    dend_17 { pt3dadd( -31.0028, 137.671, 0.973288, 0.29 ) }
    dend_17 { pt3dadd( -31.1116, 139.265, 1.16432, 0.29 ) }
    dend_17 { pt3dadd( -31.1178, 139.349, 1.17165, 0.29 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_17 { pt3dadd( -31.2076, 140.407, 1.24756, 0.29 ) }
    dend_17 { pt3dadd( -31.2165, 140.53, 1.25263, 0.29 ) }
    dend_17 { pt3dadd( -31.2555, 141.805, 1.20641, 0.44 ) }
    dend_17 { pt3dadd( -31.2553, 141.915, 1.1754, 0.44 ) }
    dend_17 { pt3dadd( -31.3007, 142.44, 0.893736, 0.44 ) }
    dend_17 { pt3dadd( -34.8829, 151.911, -0.644165, 0.44 ) }
    dend_17 { pt3dadd( -38.7264, 161.301, -2.04278, 0.44 ) }
    dend_17 { pt3dadd( -42.0187, 170.779, -4.09564, 0.44 ) }
    dend_17 { pt3dadd( -43.2774, 180.483, -7.1193, 0.44 ) }
    dend_17 { pt3dadd( -44.3363, 189.554, -11.7555, 0.44 ) }
    dend_17 { pt3dadd( -43.4312, 197.968, -17.525, 0.44 ) }
    dend_17 { pt3dadd( -42.4573, 205.1, -24.8106, 0.44 ) }
    dend_17 { pt3dadd( -40.0131, 213.632, -29.9233, 0.44 ) }
    dend_17 { pt3dadd( -37.4903, 222.45, -34.4806, 0.44 ) }
    dend_17 { pt3dadd( -34.1712, 230.428, -39.9788, 0.44 ) }
    dend_17 { pt3dadd( -29.8686, 239.051, -43.4475, 0.44 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 16/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -9.64049, 74.7908, 11.9099, 0.29 ) }
    dend_16 { pt3dadd( -9.20336, 76.6777, 11.5916, 0.29 ) }
    dend_16 { pt3dadd( -9.06234, 77.4439, 11.506, 0.44 ) }
    dend_16 { pt3dadd( -8.97559, 78.1901, 11.4583, 0.44 ) }
    dend_16 { pt3dadd( -8.91401, 79.2878, 11.4298, 0.29 ) }
    dend_16 { pt3dadd( -8.91355, 79.3512, 11.4297, 0.29 ) }
    dend_16 { pt3dadd( -8.93938, 80.3029, 11.4412, 0.29 ) }
    dend_16 { pt3dadd( -8.95631, 80.4564, 11.4595, 0.29 ) }
    dend_16 { pt3dadd( -9.07237, 81.246, 11.5029, 0.29 ) }
    dend_16 { pt3dadd( -9.17853, 81.9033, 11.4971, 0.96 ) }
    dend_16 { pt3dadd( -9.2673, 82.484, 11.4392, 1.33 ) }
    dend_16 { pt3dadd( -9.31087, 82.8325, 11.3883, 1.33 ) }
    dend_16 { pt3dadd( -9.4246, 84.3341, 11.1007, 0.52 ) }
    dend_16 { pt3dadd( -9.45323, 85.5088, 10.8367, 0.29 ) }
    dend_16 { pt3dadd( -9.44771, 85.6347, 10.8043, 0.29 ) }
    dend_16 { pt3dadd( -9.36566, 86.5831, 10.5478, 0.81 ) }
    dend_16 { pt3dadd( -9.35819, 86.6504, 10.5299, 0.81 ) }
    dend_16 { pt3dadd( -9.28612, 87.3079, 10.372, 1.03 ) }
    dend_16 { pt3dadd( -9.24231, 87.874, 10.265, 0.74 ) }
    dend_16 { pt3dadd( -9.17675, 88.7729, 10.1509, 0.29 ) }
    dend_16 { pt3dadd( -9.14747, 89.3506, 10.1008, 0.44 ) }
    dend_16 { pt3dadd( -9.14711, 89.7975, 10.0891, 0.44 ) }
    dend_16 { pt3dadd( -9.16876, 90.3903, 10.0816, 0.29 ) }
    dend_16 { pt3dadd( -9.2442, 90.942, 10.0838, 0.74 ) }
    dend_16 { pt3dadd( -9.7307, 100.933, 10.5677, 0.74 ) }
    // Section: dend_12, id: dend_12, parent: dend_10 (entry count 41/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 18.5458, 95.039, 1.9546, 0.37 ) }
    dend_12 { pt3dadd( 18.9389, 97.1987, 1.0936, 0.37 ) }
    dend_12 { pt3dadd( 19.1219, 97.929, 0.702159, 0.37 ) }
    dend_12 { pt3dadd( 19.2786, 98.5085, 0.373318, 0.96 ) }
    dend_12 { pt3dadd( 19.3012, 98.5783, 0.336062, 0.96 ) }
    dend_12 { pt3dadd( 19.6628, 99.6358, -0.211698, 0.96 ) }
    dend_12 { pt3dadd( 20.3054, 101.603, -1.18137, 0.37 ) }
    dend_12 { pt3dadd( 20.6493, 102.847, -1.79698, 0.59 ) }
    dend_12 { pt3dadd( 20.9155, 103.882, -2.3554, 0.37 ) }
    dend_12 { pt3dadd( 21.2315, 105.286, -3.13201, 0.37 ) }
    dend_12 { pt3dadd( 21.2521, 105.402, -3.19513, 0.37 ) }
    dend_12 { pt3dadd( 21.3369, 106.217, -3.67527, 0.29 ) }
    dend_12 { pt3dadd( 21.3909, 107.793, -4.61215, 1.47 ) }
    dend_12 { pt3dadd( 21.376, 109.08, -5.38487, 1.92 ) }
    dend_12 { pt3dadd( 21.3593, 109.559, -5.68364, 2.21 ) }
    dend_12 { pt3dadd( 21.343, 110.042, -6.0046, 2.21 ) }
    dend_12 { pt3dadd( 21.3415, 112.649, -7.74336, 0.37 ) }
    dend_12 { pt3dadd( 21.3848, 114.027, -8.65419, 0.96 ) }
    dend_12 { pt3dadd( 21.4206, 114.732, -9.1011, 1.62 ) }
    dend_12 { pt3dadd( 21.4681, 115.493, -9.57713, 1.84 ) }
    dend_12 { pt3dadd( 21.6186, 117.53, -10.8681, 0.29 ) }
    dend_12 { pt3dadd( 21.7199, 118.752, -11.6292, 1.03 ) }
    dend_12 { pt3dadd( 21.7566, 119.211, -11.879, 1.4 ) }
    dend_12 { pt3dadd( 21.7728, 119.485, -12.0334, 1.4 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 65/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 18.5458, 95.039, 1.9546, 0.37 ) }
    dend_11 { pt3dadd( 19.7917, 96.9447, 2.28714, 0.37 ) }
    dend_11 { pt3dadd( 20.4211, 97.9553, 2.33658, 0.37 ) }
    dend_11 { pt3dadd( 20.9825, 98.9472, 2.26427, 0.81 ) }
    dend_11 { pt3dadd( 21.0144, 99.0027, 2.25593, 0.81 ) }
    dend_11 { pt3dadd( 21.3192, 99.5278, 2.15871, 0.81 ) }
    dend_11 { pt3dadd( 21.8146, 100.415, 1.93063, 0.37 ) }
    dend_11 { pt3dadd( 22.2677, 101.242, 1.52677, 0.29 ) }
    dend_11 { pt3dadd( 22.6477, 101.943, 1.13449, 0.59 ) }
    dend_11 { pt3dadd( 23.006, 102.616, 0.726078, 0.22 ) }
    dend_11 { pt3dadd( 23.0261, 102.658, 0.70115, 0.22 ) }
    dend_11 { pt3dadd( 23.3641, 103.556, 0.212259, 1.18 ) }
    dend_11 { pt3dadd( 23.4613, 103.9, 0.0700126, 1.69 ) }
    dend_11 { pt3dadd( 23.5765, 104.541, -0.0903588, 1.99 ) }
    dend_11 { pt3dadd( 23.6108, 104.926, -0.113716, 1.99 ) }
    dend_11 { pt3dadd( 23.5589, 105.792, -0.0108575, 0.44 ) }
    dend_11 { pt3dadd( 23.4835, 106.354, 0.164042, 0.29 ) }
    dend_11 { pt3dadd( 23.1112, 107.747, 1.08718, 0.29 ) }
    dend_11 { pt3dadd( 23.0915, 107.791, 1.12589, 0.29 ) }
    dend_11 { pt3dadd( 27.4123, 115.532, 1.20351, 0.29 ) }
    dend_11 { pt3dadd( 31.3052, 123.393, 2.48547, 0.29 ) }
    dend_11 { pt3dadd( 35.4551, 131.053, 4.12643, 0.29 ) }
    dend_11 { pt3dadd( 39.2771, 138.568, 6.86973, 0.29 ) }
    dend_11 { pt3dadd( 44.2904, 145.234, 9.8741, 0.29 ) }
    dend_11 { pt3dadd( 49.1316, 151.152, 14.3611, 0.29 ) }
    dend_11 { pt3dadd( 54.3311, 156.997, 18.532, 0.29 ) }
    // Section: dend_6, id: dend_6, parent: dend_4 (entry count 91/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -17.2142, -118.1, -9.24242, 0.52 ) }
    dend_6 { pt3dadd( -17.3745, -119.847, -8.60035, 0.52 ) }
    dend_6 { pt3dadd( -17.3721, -120.532, -8.41718, 0.81 ) }
    dend_6 { pt3dadd( -17.3274, -121.136, -8.33664, 1.03 ) }
    dend_6 { pt3dadd( -17.3203, -121.211, -8.33539, 1.03 ) }
    dend_6 { pt3dadd( -17.2774, -121.88, -8.36935, 1.03 ) }
    dend_6 { pt3dadd( -17.2637, -122.622, -8.43482, 0.52 ) }
    dend_6 { pt3dadd( -17.2795, -123.277, -8.56878, 0.52 ) }
    dend_6 { pt3dadd( -17.3855, -124.061, -8.718, 0.52 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_6 { pt3dadd( -17.5456, -124.705, -8.82976, 0.66 ) }
    dend_6 { pt3dadd( -17.7844, -125.372, -8.8863, 0.66 ) }
    dend_6 { pt3dadd( -18.0208, -125.865, -8.89106, 0.88 ) }
    dend_6 { pt3dadd( -18.6676, -126.977, -8.74304, 1.03 ) }
    dend_6 { pt3dadd( -19.1359, -127.682, -8.54857, 1.55 ) }
    dend_6 { pt3dadd( -19.3462, -127.991, -8.43105, 1.92 ) }
    dend_6 { pt3dadd( -20.0813, -129.073, -7.94754, 1.92 ) }
    dend_6 { pt3dadd( -20.5676, -129.822, -7.58881, 1.33 ) }
    dend_6 { pt3dadd( -21.3622, -131.099, -6.971, 0.59 ) }
    dend_6 { pt3dadd( -21.9196, -132.031, -6.5331, 0.59 ) }
    dend_6 { pt3dadd( -22.4491, -132.968, -6.16533, 0.59 ) }
    dend_6 { pt3dadd( -22.4744, -133.015, -6.151, 0.59 ) }
    dend_6 { pt3dadd( -22.8177, -133.703, -6.03502, 1.33 ) }
    dend_6 { pt3dadd( -23.175, -134.537, -6.02475, 0.74 ) }
    dend_6 { pt3dadd( -23.4145, -135.255, -6.12698, 0.74 ) }
    dend_6 { pt3dadd( -23.74, -136.454, -6.35414, 0.74 ) }
    dend_6 { pt3dadd( -23.7625, -136.543, -6.37207, 0.74 ) }
    dend_6 { pt3dadd( -23.9806, -137.405, -6.52572, 1.18 ) }
    dend_6 { pt3dadd( -24.3341, -138.731, -6.73094, 0.81 ) }
    dend_6 { pt3dadd( -24.7251, -140.137, -6.86424, 0.74 ) }
    dend_6 { pt3dadd( -25.1953, -141.716, -6.91794, 0.59 ) }
    dend_6 { pt3dadd( -25.2153, -141.78, -6.91417, 0.59 ) }
    dend_6 { pt3dadd( -25.5657, -142.824, -6.8013, 1.92 ) }
    dend_6 { pt3dadd( -25.888, -143.779, -6.62311, 2.21 ) }
    dend_6 { pt3dadd( -26.2565, -144.913, -6.34292, 2.21 ) }
    dend_6 { pt3dadd( -26.6136, -146.091, -6.01514, 0.74 ) }
    dend_6 { pt3dadd( -26.9471, -147.475, -5.60207, 0.74 ) }
    dend_6 { pt3dadd( -27.1041, -148.525, -5.2872, 0.66 ) }
    dend_6 { pt3dadd( -27.1085, -149.764, -4.93012, 0.44 ) }
    dend_6 { pt3dadd( -26.9667, -150.58, -4.70932, 1.03 ) }
    dend_6 { pt3dadd( -26.9277, -150.678, -4.68944, 1.03 ) }
    dend_6 { pt3dadd( -26.6325, -151.162, -4.6398, 1.03 ) }
    dend_6 { pt3dadd( -26.1575, -151.834, -4.64487, 1.03 ) }
    dend_6 { pt3dadd( -25.7154, -152.492, -4.68042, 1.4 ) }
    dend_6 { pt3dadd( -25.5045, -152.906, -4.7222, 1.4 ) }
    dend_6 { pt3dadd( -25.183, -153.936, -4.80057, 0.81 ) }
    dend_6 { pt3dadd( -25.0128, -155.034, -4.80734, 0.81 ) }
    dend_6 { pt3dadd( -25.0116, -155.818, -4.76935, 1.03 ) }
    dend_6 { pt3dadd( -25.1016, -156.527, -4.70501, 1.11 ) }
    dend_6 { pt3dadd( -25.2863, -157.367, -4.59461, 1.18 ) }
    dend_6 { pt3dadd( -25.5818, -158.4, -4.43283, 0.37 ) }
    dend_6 { pt3dadd( -26.0077, -159.655, -4.27272, 0.37 ) }
    dend_6 { pt3dadd( -26.2576, -160.45, -4.24602, 1.55 ) }
    dend_6 { pt3dadd( -26.4049, -161.1, -4.30032, 1.84 ) }
    dend_6 { pt3dadd( -26.4796, -161.681, -4.40832, 2.14 ) }
    dend_6 { pt3dadd( -26.4886, -162.122, -4.54055, 2.14 ) }
    dend_6 { pt3dadd( -26.3074, -163.33, -5.09065, 1.69 ) }
    dend_6 { pt3dadd( -25.8034, -164.682, -5.88629, 0.52 ) }
    dend_6 { pt3dadd( -25.5245, -165.167, -6.20526, 0.88 ) }
    dend_6 { pt3dadd( -25.4884, -165.213, -6.23878, 0.88 ) }
    dend_6 { pt3dadd( -25.3378, -165.364, -6.36517, 0.88 ) }
    dend_6 { pt3dadd( -24.4922, -166.083, -6.99089, 0.52 ) }
    dend_6 { pt3dadd( -23.7073, -166.711, -7.54752, 1.03 ) }
    dend_6 { pt3dadd( -23.663, -166.75, -7.5804, 1.03 ) }
    dend_6 { pt3dadd( -22.9745, -167.446, -8.1336, 1.33 ) }
    dend_6 { pt3dadd( -22.2825, -168.255, -8.71507, 1.25 ) }
    dend_6 { pt3dadd( -22.0361, -168.606, -8.93819, 1.03 ) }
    dend_6 { pt3dadd( -21.3775, -169.922, -9.59209, 0.59 ) }
    dend_6 { pt3dadd( -21.0568, -170.817, -9.94108, 0.59 ) }
    dend_6 { pt3dadd( -20.8891, -171.461, -10.1331, 1.18 ) }
    dend_6 { pt3dadd( -20.8448, -171.729, -10.1864, 1.84 ) }
    dend_6 { pt3dadd( -20.7921, -172.317, -10.2597, 1.84 ) }
    dend_6 { pt3dadd( -20.7537, -173.622, -10.3752, 0.74 ) }
    dend_6 { pt3dadd( -20.7095, -174.551, -10.559, 1.03 ) }
    dend_6 { pt3dadd( -20.6294, -175.259, -10.8046, 1.11 ) }
    dend_6 { pt3dadd( -20.5642, -175.624, -10.9748, 1.33 ) }
    dend_6 { pt3dadd( -20.386, -176.332, -11.4278, 0.81 ) }
    dend_6 { pt3dadd( -20.2292, -176.789, -11.8064, 0.44 ) }
    dend_6 { pt3dadd( -19.3675, -178.937, -14.0548, 0.44 ) }
    dend_6 { pt3dadd( -19.2088, -179.322, -14.5261, 0.44 ) }
    dend_6 { pt3dadd( -19.1841, -179.402, -14.6506, 0.44 ) }
    dend_6 { pt3dadd( -19.1095, -180.048, -15.7791, 0.44 ) }
    dend_6 { pt3dadd( -19.114, -180.075, -15.8272, 0.44 ) }
    dend_6 { pt3dadd( -19.2576, -180.428, -16.4002, 0.74 ) }
    dend_6 { pt3dadd( -19.5016, -180.795, -16.9082, 1.11 ) }
    dend_6 { pt3dadd( -20.0676, -181.93, -18.5422, 0.44 ) }
    dend_6 { pt3dadd( -20.2014, -182.35, -19.1537, 0.44 ) }
    dend_6 { pt3dadd( -20.3457, -183.246, -20.3869, 1.84 ) }
    dend_6 { pt3dadd( -20.3551, -183.627, -20.9005, 2.5 ) }
    dend_6 { pt3dadd( -20.3482, -183.733, -21.0398, 2.5 ) }
    dend_6 { pt3dadd( -20.1902, -185.289, -22.9012, 0.59 ) }
    dend_6 { pt3dadd( -20.1449, -185.836, -23.5115, 0.59 ) }
    dend_6 { pt3dadd( -20.1146, -186.312, -24.1183, 0.59 ) }
    dend_6 { pt3dadd( -20.1133, -186.352, -24.172, 0.59 ) }
    dend_6 { pt3dadd( -20.1314, -187.202, -25.2601, 1.77 ) }
    dend_6 { pt3dadd( -20.1852, -187.736, -25.894, 2.06 ) }
    dend_6 { pt3dadd( -20.4226, -188.811, -27.0443, 1.99 ) }
    dend_6 { pt3dadd( -20.7886, -190.242, -28.5437, 0.81 ) }
    dend_6 { pt3dadd( -20.7995, -190.287, -28.5925, 0.81 ) }
    dend_6 { pt3dadd( -20.9034, -190.801, -29.1277, 0.66 ) }
    dend_6 { pt3dadd( -20.9882, -191.512, -29.8288, 0.52 ) }
    dend_6 { pt3dadd( -21.0396, -192.036, -30.3265, 1.84 ) }
    dend_6 { pt3dadd( -21.1024, -192.726, -30.8922, 2.28 ) }
    dend_6 { pt3dadd( -21.2064, -194.422, -32.2201, 0.66 ) }
    dend_6 { pt3dadd( -21.1826, -195.01, -32.6846, 0.66 ) }
    dend_6 { pt3dadd( -21.0431, -196.013, -33.4664, 1.77 ) }
    dend_6 { pt3dadd( -21.0287, -196.074, -33.51, 1.77 ) }
    dend_6 { pt3dadd( -20.8401, -196.686, -33.9097, 2.21 ) }
    dend_6 { pt3dadd( -20.5391, -197.552, -34.375, 2.21 ) }
    dend_6 { pt3dadd( -20.1339, -198.716, -34.883, 0.74 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_6 { pt3dadd( -19.9624, -199.274, -35.1115, 0.37 ) }
    dend_6 { pt3dadd( -19.8375, -199.716, -35.2773, 0.29 ) }
    dend_6 { pt3dadd( -19.6242, -200.472, -35.5502, 1.11 ) }
    dend_6 { pt3dadd( -19.4694, -201.031, -35.7551, 1.4 ) }
    dend_6 { pt3dadd( -19.2297, -201.965, -36.0655, 0.59 ) }
    dend_6 { pt3dadd( -19.0604, -202.636, -36.2845, 0.29 ) }
    dend_6 { pt3dadd( -18.8813, -203.365, -36.5259, 0.66 ) }
    dend_6 { pt3dadd( -18.7757, -203.814, -36.6908, 0.88 ) }
    dend_6 { pt3dadd( -18.577, -204.789, -37.0568, 0.29 ) }
    dend_6 { pt3dadd( -18.4688, -205.403, -37.2843, 0.29 ) }
    dend_6 { pt3dadd( -18.3994, -205.882, -37.4514, 0.96 ) }
    dend_6 { pt3dadd( -18.3398, -206.392, -37.6231, 0.96 ) }
    dend_6 { pt3dadd( -18.1833, -207.505, -38.0034, 0.29 ) }
    dend_6 { pt3dadd( -18.062, -208.055, -38.2164, 0.29 ) }
    dend_6 { pt3dadd( -17.8457, -208.616, -38.5126, 0.66 ) }
    dend_6 { pt3dadd( -17.8222, -208.664, -38.567, 0.66 ) }
    dend_6 { pt3dadd( -17.6776, -208.95, -38.9666, 0.66 ) }
    dend_6 { pt3dadd( -17.3771, -209.6, -40.0505, 0.44 ) }
    dend_6 { pt3dadd( -17.1725, -210.119, -40.9765, 1.77 ) }
    dend_6 { pt3dadd( -16.9088, -210.88, -42.4018, 2.58 ) }
    dend_6 { pt3dadd( -16.2333, -213.165, -46.7741, 0.44 ) }
    dend_6 { pt3dadd( -16.1744, -213.412, -47.2372, 0.44 ) }
    dend_6 { pt3dadd( -15.9752, -214.5, -49.3594, 0.88 ) }
    dend_6 { pt3dadd( -15.9262, -215.018, -50.3998, 1.77 ) }
    dend_6 { pt3dadd( -15.9262, -215.048, -50.4599, 1.77 ) }
    dend_6 { pt3dadd( -15.9497, -215.241, -50.8126, 2.14 ) }
    dend_6 { pt3dadd( -16.0255, -215.63, -51.2867, 2.43 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 27/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -17.2142, -118.1, -9.24242, 0.59 ) }
    dend_5 { pt3dadd( -16.6612, -118.602, -8.4581, 0.59 ) }
    dend_5 { pt3dadd( -15.9196, -119.102, -7.578, 0.52 ) }
    dend_5 { pt3dadd( -15.4226, -119.352, -7.10945, 0.52 ) }
    dend_5 { pt3dadd( -14.652, -119.571, -6.56474, 0.37 ) }
    dend_5 { pt3dadd( -14.5021, -119.597, -6.47716, 0.37 ) }
    dend_5 { pt3dadd( -13.8414, -119.671, -6.12832, 0.37 ) }
    dend_5 { pt3dadd( -13.2595, -119.67, -5.8917, 0.37 ) }
    dend_5 { pt3dadd( -12.4908, -119.584, -5.6515, 0.37 ) }
    dend_5 { pt3dadd( -11.2814, -119.383, -5.33696, 0.22 ) }
    dend_5 { pt3dadd( -10.9235, -119.324, -5.27261, 0.29 ) }
    dend_5 { pt3dadd( -10.2387, -119.206, -5.16422, 0.37 ) }
    // Section: dend_3, id: dend_3, parent: dend_1 (entry count 39/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 6.18827, -52.0192, -26.4217, 0.37 ) }
    dend_3 { pt3dadd( 6.45137, -52.6514, -26.7188, 0.37 ) }
    dend_3 { pt3dadd( 6.81834, -53.5125, -27.0462, 0.29 ) }
    dend_3 { pt3dadd( 7.19002, -54.4099, -27.3417, 1.25 ) }
    dend_3 { pt3dadd( 7.36267, -54.829, -27.4675, 1.69 ) }
    dend_3 { pt3dadd( 7.38679, -54.888, -27.484, 1.69 ) }
    dend_3 { pt3dadd( 7.8535, -56.0459, -27.777, 0.29 ) }
    dend_3 { pt3dadd( 8.1972, -56.8895, -27.9421, 0.29 ) }
    dend_3 { pt3dadd( 8.57019, -57.8081, -28.1059, 1.77 ) }
    dend_3 { pt3dadd( 8.76795, -58.3046, -28.1777, 2.43 ) }
    dend_3 { pt3dadd( 8.90973, -58.667, -28.2301, 2.43 ) }
    dend_3 { pt3dadd( 9.47481, -60.1429, -28.4426, 0.22 ) }
    dend_3 { pt3dadd( 9.74214, -60.8844, -28.5477, 0.22 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 52/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 6.18827, -52.0192, -26.4217, 1.77 ) }
    dend_2 { pt3dadd( 5.31423, -53.4304, -30.1243, 1.77 ) }
    dend_2 { pt3dadd( 4.46964, -55.0201, -33.9841, 1.03 ) }
    dend_2 { pt3dadd( 3.18134, -57.8105, -40.1497, 2.14 ) }
    dend_2 { pt3dadd( 2.64818, -58.9994, -42.629, 0.52 ) }
    dend_2 { pt3dadd( 2.43182, -59.4899, -43.6194, 1.92 ) }
    dend_2 { pt3dadd( 2.30024, -59.7931, -44.2118, 2.36 ) }
    dend_2 { pt3dadd( 1.30451, -62.5281, -48.9368, 0.29 ) }
    dend_2 { pt3dadd( 1.04372, -63.2298, -50.0407, 0.29 ) }
    dend_2 { pt3dadd( 0.422409, -64.8391, -52.2105, 0.29 ) }
    dend_2 { pt3dadd( 0.403616, -64.8788, -52.2653, 0.29 ) }
    dend_2 { pt3dadd( 0.256814, -65.156, -52.6545, 1.69 ) }
    dend_2 { pt3dadd( 0.0648102, -65.5237, -53.1649, 1.69 ) }
    dend_2 { pt3dadd( -1.12587, -68.067, -56.7804, 0.22 ) }
    dend_2 { pt3dadd( -1.27657, -68.4317, -57.3321, 0.22 ) }
    dend_2 { pt3dadd( -1.28724, -68.4689, -57.3907, 0.22 ) }
    dend_2 { pt3dadd( -1.38302, -68.9141, -58.1068, 1.03 ) }
    dend_2 { pt3dadd( -1.60088, -70.6079, -60.8286, 0.29 ) }
    dend_2 { pt3dadd( -1.6382, -72.3348, -63.5022, 1.99 ) }
    dend_2 { pt3dadd( -1.60993, -72.6259, -63.9299, 2.14 ) }
    dend_2 { pt3dadd( -1.34745, -74.6508, -66.9631, 0.37 ) }
    dend_2 { pt3dadd( -1.29188, -74.9875, -67.4735, 0.37 ) }
    dend_2 { pt3dadd( -1.18692, -75.4407, -68.146, 0.88 ) }
    dend_2 { pt3dadd( -1.00694, -75.9627, -68.8478, 1.03 ) }
    dend_2 { pt3dadd( -0.478518, -77.3179, -70.4427, 0.29 ) }
    dend_2 { pt3dadd( -0.455039, -77.381, -70.5118, 0.29 ) }
    dend_2 { pt3dadd( 0.072792, -79.002, -72.1769, 0.29 ) }
    dend_2 { pt3dadd( 0.272441, -79.7819, -73.0149, 1.99 ) }
    dend_2 { pt3dadd( 0.329481, -80.0371, -73.2918, 1.99 ) }
    dend_2 { pt3dadd( 0.717926, -81.9565, -75.3138, 0.29 ) }
    dend_2 { pt3dadd( 0.79296, -82.4391, -75.7844, 0.59 ) }
    dend_2 { pt3dadd( 1.05048, -84.3227, -77.5474, 0.44 ) }
    dend_2 { pt3dadd( 1.18025, -85.4385, -78.5585, 0.29 ) }
    dend_2 { pt3dadd( 1.22607, -85.9018, -78.9786, 1.11 ) }
    dend_2 { pt3dadd( 1.27276, -86.287, -79.3238, 1.33 ) }
    dend_2 { pt3dadd( 1.64843, -88.9465, -81.8818, 0.22 ) }
    dend_2 { pt3dadd( 1.72788, -89.422, -82.3925, 0.52 ) }
    dend_2 { pt3dadd( 2.00076, -90.7698, -84.0068, 0.29 ) }
    dend_2 { pt3dadd( 2.08684, -91.1361, -84.4848, 0.88 ) }
    dend_2 { pt3dadd( 2.166, -91.5824, -85.1825, 0.88 ) }
    dend_2 { pt3dadd( 2.41745, -93.2873, -88.1231, 0.29 ) }
    dend_2 { pt3dadd( 2.60061, -94.5859, -90.5397, 0.29 ) }
    dend_2 { pt3dadd( 2.71373, -95.6597, -92.5909, 1.77 ) }
    dend_2 { pt3dadd( 2.73548, -95.9378, -93.1368, 1.77 ) }
    dend_2 { pt3dadd( 2.84014, -98.1557, -97.5059, 0.52 ) }
    dend_2 { pt3dadd( 2.8418, -98.5655, -98.2832, 0.44 ) }
    dend_2 { pt3dadd( 2.84659, -98.9508, -98.9675, 0.74 ) }
    dend_2 { pt3dadd( 2.84831, -98.9869, -99.0276, 0.74 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_2 { pt3dadd( 2.98531, -100.26, -100.998, 0.29 ) }
    dend_2 { pt3dadd( 2.99591, -100.308, -101.067, 0.29 ) }
    dend_2 { pt3dadd( 3.38217, -101.103, -101.987, 1.18 ) }
    dend_2 { pt3dadd( 3.54763, -101.394, -102.315, 1.18 ) }
    dend_2 { pt3dadd( 4.32024, -102.637, -103.633, 0.22 ) }
    dend_2 { pt3dadd( 4.35141, -102.683, -103.676, 0.22 ) }
    dend_2 { pt3dadd( 5.11145, -103.658, -104.545, 0.81 ) }
    dend_2 { pt3dadd( 6.0366, -104.719, -105.54, 0.22 ) }
    dend_2 { pt3dadd( 6.44031, -105.122, -105.936, 0.81 ) }
    dend_2 { pt3dadd( 6.49052, -105.166, -105.989, 0.81 ) }
    dend_2 { pt3dadd( 6.739, -105.334, -106.292, 0.81 ) }
    dend_2 { pt3dadd( 7.68801, -105.856, -107.967, 0.22 ) }
    dend_2 { pt3dadd( 7.91981, -105.96, -108.456, 0.44 ) }
    dend_2 { pt3dadd( 7.95321, -105.973, -108.533, 0.44 ) }
    dend_2 { pt3dadd( 8.95065, -106.366, -110.847, 1.33 ) }
    dend_2 { pt3dadd( 9.84784, -106.738, -112.912, 1.33 ) }
    dend_2 { pt3dadd( 11.6037, -107.474, -116.976, 0.29 ) }
    dend_2 { pt3dadd( 11.6464, -107.494, -117.076, 0.29 ) }
    dend_2 { pt3dadd( 11.9301, -107.639, -117.752, 0.29 ) }
    dend_2 { pt3dadd( 12.3252, -107.853, -118.602, 1.03 ) }
    dend_2 { pt3dadd( 12.4502, -107.923, -118.834, 1.03 ) }
    dend_2 { pt3dadd( 12.4951, -107.947, -118.902, 1.03 ) }
    dend_2 { pt3dadd( 14.1727, -108.789, -120.987, 0.22 ) }
    dend_2 { pt3dadd( 14.224, -108.812, -121.051, 0.22 ) }
    dend_2 { pt3dadd( 15.4571, -109.27, -122.648, 0.29 ) }
    dend_2 { pt3dadd( 16.8717, -109.544, -124.635, 0.22 ) }
    dend_2 { pt3dadd( 17.1643, -109.566, -125.074, 0.66 ) }
    dend_2 { pt3dadd( 17.2106, -109.564, -125.145, 0.66 ) }
    dend_2 { pt3dadd( 17.4911, -109.515, -125.592, 0.66 ) }
    dend_2 { pt3dadd( 18.3102, -109.318, -126.975, 0.15 ) }
    dend_2 { pt3dadd( 19.8371, -108.732, -129.851, 0.96 ) }
    dend_2 { pt3dadd( 20.6754, -108.34, -131.492, 1.4 ) }
    dend_2 { pt3dadd( 20.9891, -108.186, -132.142, 1.4 ) }
    dend_2 { pt3dadd( 21.1389, -108.11, -132.464, 1.4 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 34/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -29.8686, 239.051, -43.4475, 0.44 ) }
    dend_19 { pt3dadd( -31.6253, 249.443, -46.9266, 0.44 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 36/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -29.8686, 239.051, -43.4475, 0.44 ) }
    dend_18 { pt3dadd( -31.1967, 250.937, -47.5191, 0.44 ) }
    // Section: dend_14, id: dend_14, parent: dend_12 (entry count 38/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 21.7728, 119.485, -12.0334, 0.29 ) }
    dend_14 { pt3dadd( 22.8955, 122.411, -12.1924, 0.29 ) }
    dend_14 { pt3dadd( 23.4, 123.725, -12.2639, 0.29 ) }
    dend_14 { pt3dadd( 23.8225, 124.827, -12.3237, 1.03 ) }
    dend_14 { pt3dadd( 23.8558, 124.913, -12.3285, 1.03 ) }
    dend_14 { pt3dadd( 24.0994, 125.548, -12.363, 1.4 ) }
    // Section: dend_13, id: dend_13, parent: dend_12 (entry count 44/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 21.7728, 119.485, -12.0334, 0.88 ) }
    dend_13 { pt3dadd( 21.8241, 120.318, -12.2067, 0.88 ) }
    dend_13 { pt3dadd( 21.9355, 120.95, -12.3563, 0.29 ) }
    dend_13 { pt3dadd( 22.1624, 121.67, -12.603, 0.29 ) }
    dend_13 { pt3dadd( 22.3353, 122.109, -12.7637, 0.44 ) }
    dend_13 { pt3dadd( 22.8213, 123.237, -13.1784, 1.25 ) }
    dend_13 { pt3dadd( 23.0269, 123.69, -13.3417, 1.99 ) }
    dend_13 { pt3dadd( 23.3776, 124.329, -13.5794, 2.21 ) }
    dend_13 { pt3dadd( 24.2279, 125.712, -14.1056, 0.22 ) }
    dend_13 { pt3dadd( 24.5859, 126.288, -14.3497, 0.22 ) }
    dend_13 { pt3dadd( 24.7669, 126.574, -14.4705, 0.96 ) }
    dend_13 { pt3dadd( 24.959, 126.895, -14.6036, 1.77 ) }
    dend_13 { pt3dadd( 25.1654, 127.297, -14.7693, 2.21 ) }
    dend_13 { pt3dadd( 25.3366, 127.708, -14.9536, 2.21 ) }
    dend_13 { pt3dadd( 25.8729, 129.279, -15.6764, 0.22 ) }
    dend_13 { pt3dadd( 26.0782, 129.943, -16.0005, 0.22 ) }
    dend_13 { pt3dadd( 26.3112, 130.719, -16.3737, 1.18 ) }
    dend_13 { pt3dadd( 26.3952, 131.016, -16.5133, 1.33 ) }
    dend_13 { pt3dadd( 26.6187, 131.902, -16.8946, 0.81 ) }
    dend_13 { pt3dadd( 26.7877, 132.592, -17.1586, 0.22 ) }
    dend_13 { pt3dadd( 26.9007, 133.038, -17.2876, 0.29 ) }
    dend_13 { pt3dadd( 27.1033, 133.82, -17.4928, 0.22 ) }
    dend_13 { pt3dadd( 27.1372, 133.92, -17.5208, 0.22 ) }
    dend_13 { pt3dadd( 27.4582, 134.678, -17.7815, 0.22 ) }
    dend_13 { pt3dadd( 27.8368, 135.462, -18.076, 1.33 ) }
    dend_13 { pt3dadd( 28.0136, 135.808, -18.2541, 1.69 ) }
    dend_13 { pt3dadd( 28.1037, 136.0, -18.3641, 1.69 ) }
    dend_13 { pt3dadd( 28.6097, 137.087, -19.0198, 0.29 ) }
    dend_13 { pt3dadd( 28.9162, 137.701, -19.3822, 1.47 ) }
    dend_13 { pt3dadd( 29.037, 137.923, -19.5105, 1.47 ) }
    dend_13 { pt3dadd( 29.4163, 138.583, -19.8861, 0.66 ) }
    dend_13 { pt3dadd( 29.9169, 139.433, -20.3399, 0.29 ) }
    dend_13 { pt3dadd( 30.1573, 139.857, -20.5463, 0.29 ) }
    dend_13 { pt3dadd( 30.4518, 140.399, -20.7593, 0.88 ) }
    dend_13 { pt3dadd( 30.627, 140.71, -20.8866, 1.25 ) }
    dend_13 { pt3dadd( 31.0831, 141.511, -21.2429, 0.29 ) }
    dend_13 { pt3dadd( 31.3486, 141.994, -21.4641, 0.22 ) }
    dend_13 { pt3dadd( 31.5496, 142.428, -21.7024, 0.66 ) }
    dend_13 { pt3dadd( 31.6684, 142.797, -21.9111, 0.81 ) }
    dend_13 { pt3dadd( 31.7982, 143.485, -22.2734, 0.22 ) }
    dend_13 { pt3dadd( 31.8517, 143.913, -22.476, 0.22 ) }
    dend_13 { pt3dadd( 31.8769, 144.317, -22.6737, 0.74 ) }
    dend_13 { pt3dadd( 31.8874, 144.941, -23.0606, 1.4 ) }
    dend_13 { pt3dadd( 31.8805, 145.82, -23.6626, 0.29 ) }
    dend_13 { pt3dadd( 31.8608, 146.426, -24.1511, 0.81 ) }
    dend_13 { pt3dadd( 31.8531, 146.618, -24.3399, 0.96 ) }
    dend_13 { pt3dadd( 31.809, 147.469, -25.4583, 0.29 ) }
    dend_13 { pt3dadd( 31.75, 148.119, -26.4424, 0.29 ) }
    dend_13 { pt3dadd( 31.7167, 148.356, -26.8229, 1.33 ) }
    dend_13 { pt3dadd( 31.604, 148.892, -27.7548, 2.28 ) }
    dend_13 { pt3dadd( 31.4407, 149.522, -28.9197, 2.28 ) }
    dend_13 { pt3dadd( 31.0629, 150.639, -31.2002, 0.81 ) }
    dend_13 { pt3dadd( 31.0041, 150.773, -31.4898, 0.88 ) }
    dend_13 { pt3dadd( 30.8581, 151.038, -32.0884, 0.29 ) }
    dend_13 { pt3dadd( 30.6203, 151.383, -32.9119, 0.37 ) }
    dend_13 { pt3dadd( 30.5145, 151.519, -33.2208, 0.37 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_13 { pt3dadd( 30.0675, 152.114, -34.3884, 0.37 ) }
    dend_13 { pt3dadd( 29.8961, 152.386, -34.8399, 0.37 ) }
    dend_13 { pt3dadd( 29.5494, 153.127, -35.9196, 1.55 ) }
    dend_13 { pt3dadd( 29.4296, 153.491, -36.3727, 1.92 ) }
    dend_13 { pt3dadd( 29.2308, 154.674, -37.4779, 0.44 ) }
    dend_13 { pt3dadd( 29.2059, 155.237, -37.8735, 0.29 ) }
    dend_13 { pt3dadd( 29.2377, 155.878, -38.1958, 0.88 ) }
    dend_13 { pt3dadd( 29.2866, 156.222, -38.3392, 0.96 ) }
    dend_13 { pt3dadd( 29.3693, 156.592, -38.4555, 0.96 ) }
    dend_13 { pt3dadd( 29.7147, 157.805, -38.7651, 0.37 ) }
    dend_13 { pt3dadd( 30.0488, 158.815, -38.9652, 0.29 ) }
    dend_13 { pt3dadd( 30.2724, 159.406, -39.184, 0.29 ) }
    dend_13 { pt3dadd( 30.6191, 160.282, -39.6149, 1.33 ) }
    dend_13 { pt3dadd( 30.7769, 160.668, -39.8592, 2.14 ) }
    dend_13 { pt3dadd( 30.8943, 160.956, -40.0757, 2.36 ) }
    dend_13 { pt3dadd( 30.979, 161.168, -40.2805, 2.36 ) }
    dend_13 { pt3dadd( 31.7028, 163.004, -42.377, 0.29 ) }
    dend_13 { pt3dadd( 31.8543, 163.411, -42.896, 0.88 ) }
    dend_13 { pt3dadd( 31.9927, 163.881, -43.5069, 1.4 ) }
    dend_13 { pt3dadd( 32.0517, 164.15, -43.8536, 1.55 ) }
    dend_13 { pt3dadd( 32.2017, 165.082, -45.0026, 0.37 ) }
    dend_13 { pt3dadd( 32.2393, 165.423, -45.3814, 0.37 ) }
    dend_13 { pt3dadd( 32.2695, 166.177, -46.0924, 1.18 ) }
    dend_13 { pt3dadd( 32.2938, 166.697, -46.5898, 1.47 ) }
    dend_13 { pt3dadd( 32.3283, 167.827, -47.583, 0.29 ) }
    dend_13 { pt3dadd( 32.3261, 168.138, -47.8261, 0.44 ) }
    dend_13 { pt3dadd( 32.3044, 168.615, -48.1347, 0.29 ) }
    dend_13 { pt3dadd( 32.2259, 169.686, -48.7657, 1.77 ) }
    dend_13 { pt3dadd( 32.1792, 170.278, -49.0634, 2.06 ) }
    dend_13 { pt3dadd( 32.1398, 170.841, -49.2934, 1.92 ) }
    dend_13 { pt3dadd( 32.0294, 172.085, -49.6263, 0.22 ) }
    dend_13 { pt3dadd( 31.9789, 172.673, -49.7388, 0.22 ) }
    dend_13 { pt3dadd( 31.9734, 172.736, -49.7434, 0.22 ) }
    dend_13 { pt3dadd( 31.9509, 173.23, -49.6834, 0.22 ) }
    dend_13 { pt3dadd( 31.9429, 174.015, -49.5141, 0.96 ) }
    dend_13 { pt3dadd( 31.9579, 174.256, -49.4501, 1.33 ) }
    dend_13 { pt3dadd( 31.9852, 174.502, -49.3783, 1.33 ) }
    dend_13 { pt3dadd( 32.0726, 175.219, -49.1792, 0.44 ) }
    dend_13 { pt3dadd( 32.2636, 176.547, -48.8493, 0.22 ) }
    dend_13 { pt3dadd( 32.2738, 176.608, -48.8354, 0.22 ) }
    dend_13 { pt3dadd( 32.4663, 177.591, -48.5661, 0.22 ) }
    dend_13 { pt3dadd( 32.5756, 178.119, -48.3935, 1.03 ) }
    dend_13 { pt3dadd( 32.648, 178.436, -48.2785, 1.62 ) }
    dend_13 { pt3dadd( 32.7786, 178.936, -48.0767, 1.62 ) }
    dend_13 { pt3dadd( 32.8109, 179.06, -48.0265, 1.62 ) }
    dend_13 { pt3dadd( 33.2539, 180.717, -47.3428, 0.22 ) }
    dend_13 { pt3dadd( 33.3519, 181.097, -47.1798, 0.66 ) }
    dend_13 { pt3dadd( 33.4521, 181.53, -47.0005, 0.66 ) }
    dend_13 { pt3dadd( 33.5108, 181.888, -46.8755, 0.59 ) }
    dend_13 { pt3dadd( 33.5697, 182.546, -46.7046, 0.22 ) }
    dend_13 { pt3dadd( 33.5796, 182.842, -46.659, 0.66 ) }
    dend_13 { pt3dadd( 33.5589, 183.171, -46.6498, 0.88 ) }
    dend_13 { pt3dadd( 33.5035, 183.724, -46.639, 0.44 ) }
    dend_13 { pt3dadd( 33.3773, 184.619, -46.6309, 0.22 ) }
    dend_13 { pt3dadd( 33.2763, 185.264, -46.6297, 0.81 ) }
    dend_13 { pt3dadd( 33.2082, 185.689, -46.6286, 1.18 ) }
    dend_13 { pt3dadd( 33.0165, 186.899, -46.6256, 0.22 ) }
    dend_13 { pt3dadd( 33.0092, 186.954, -46.6311, 0.22 ) }
    dend_13 { pt3dadd( 32.8962, 187.881, -46.7986, 0.22 ) }
    dend_13 { pt3dadd( 32.8475, 188.46, -46.9372, 1.03 ) }
    dend_13 { pt3dadd( 32.8322, 188.834, -47.0402, 1.33 ) }
    dend_13 { pt3dadd( 32.8337, 189.208, -47.1555, 1.33 ) }
    dend_13 { pt3dadd( 32.9973, 191.281, -47.8377, 0.22 ) }
    dend_13 { pt3dadd( 33.0027, 191.333, -47.8559, 0.22 ) }
    dend_13 { pt3dadd( 33.1764, 192.493, -48.3048, 0.22 ) }
    dend_13 { pt3dadd( 33.2486, 192.892, -48.4677, 0.59 ) }
    dend_13 { pt3dadd( 33.2598, 192.943, -48.488, 0.59 ) }
    dend_13 { pt3dadd( 33.4517, 193.64, -48.7289, 0.74 ) }
    // Section: dend_8, id: dend_8, parent: dend_6 (entry count 68/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -16.0255, -215.63, -51.2867, 0.37 ) }
    dend_8 { pt3dadd( -14.3865, -217.181, -51.1119, 0.37 ) }
    dend_8 { pt3dadd( -13.3536, -218.193, -51.0049, 0.29 ) }
    dend_8 { pt3dadd( -12.0984, -219.488, -50.8697, 0.29 ) }
    dend_8 { pt3dadd( -11.219, -220.46, -50.7701, 0.88 ) }
    dend_8 { pt3dadd( -10.9318, -220.801, -50.7507, 1.11 ) }
    dend_8 { pt3dadd( -10.8702, -220.879, -50.7484, 1.11 ) }
    dend_8 { pt3dadd( -10.5797, -221.35, -50.7638, 1.11 ) }
    dend_8 { pt3dadd( -10.0467, -222.438, -50.9167, 0.29 ) }
    dend_8 { pt3dadd( -9.72836, -223.241, -51.098, 0.29 ) }
    dend_8 { pt3dadd( -9.39625, -224.193, -51.3387, 0.74 ) }
    dend_8 { pt3dadd( -9.25813, -224.59, -51.4618, 0.88 ) }
    dend_8 { pt3dadd( -9.03689, -225.227, -51.6788, 0.59 ) }
    dend_8 { pt3dadd( -8.56394, -226.592, -52.1741, 0.29 ) }
    dend_8 { pt3dadd( -8.50431, -226.745, -52.2339, 0.29 ) }
    dend_8 { pt3dadd( -8.14305, -227.569, -52.523, 0.29 ) }
    dend_8 { pt3dadd( -7.70905, -228.481, -52.7824, 1.11 ) }
    dend_8 { pt3dadd( -7.42318, -229.003, -52.9741, 1.4 ) }
    dend_8 { pt3dadd( -7.11848, -229.529, -53.1657, 1.4 ) }
    dend_8 { pt3dadd( -6.11146, -231.17, -53.7184, 0.22 ) }
    dend_8 { pt3dadd( -5.52758, -232.112, -54.0538, 0.22 ) }
    dend_8 { pt3dadd( -5.11768, -232.765, -54.3071, 0.81 ) }
    dend_8 { pt3dadd( -3.90918, -234.636, -55.0314, 0.81 ) }
    // Section: dend_7, id: dend_7, parent: dend_6 (entry count 91/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -16.0255, -215.63, -51.2867, 0.96 ) }
    dend_7 { pt3dadd( -14.5111, -216.857, -55.1732, 0.96 ) }
    dend_7 { pt3dadd( -12.2861, -218.764, -60.5169, 0.96 ) }
    dend_7 { pt3dadd( -11.1744, -219.748, -63.091, 0.66 ) }
    dend_7 { pt3dadd( -10.442, -220.436, -64.7215, 1.4 ) }
    dend_7 { pt3dadd( -10.2441, -220.629, -65.1426, 1.4 ) }
    dend_7 { pt3dadd( -8.56487, -222.306, -68.5873, 0.44 ) }
    dend_7 { pt3dadd( -7.98184, -222.869, -69.5321, 0.37 ) }
    dend_7 { pt3dadd( -7.93444, -222.922, -69.5953, 0.37 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_7 { pt3dadd( -6.60432, -224.442, -71.2414, 0.29 ) }
    dend_7 { pt3dadd( -5.94175, -225.148, -71.9565, 1.47 ) }
    dend_7 { pt3dadd( -5.79581, -225.297, -72.1076, 1.77 ) }
    dend_7 { pt3dadd( -5.29827, -225.756, -72.5885, 1.99 ) }
    dend_7 { pt3dadd( -4.33617, -226.562, -73.5471, 1.99 ) }
    dend_7 { pt3dadd( -2.592, -227.957, -75.2501, 0.44 ) }
    dend_7 { pt3dadd( -1.62205, -228.658, -76.2179, 0.81 ) }
    dend_7 { pt3dadd( -0.328947, -229.47, -77.6183, 0.52 ) }
    dend_7 { pt3dadd( 1.55948, -230.629, -79.7099, 0.44 ) }
    dend_7 { pt3dadd( 2.54848, -231.213, -80.8348, 1.11 ) }
    dend_7 { pt3dadd( 3.00772, -231.474, -81.3667, 1.11 ) }
    dend_7 { pt3dadd( 5.53117, -232.786, -84.3238, 1.4 ) }
    dend_7 { pt3dadd( 8.37889, -234.122, -87.7949, 1.55 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
    ModelViewParmSubset_2 = new SectionList()
    dend_9 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_15 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_10 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_4 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_17 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_11 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_6 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_2 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_13 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_7 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_9 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_0 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_1 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_3 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_16 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_12 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_14 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_5 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_19 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_18 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_8 OneSecGrp_SectionRef_22.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_19, dend_18, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_17 all.append()
    dend_17 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 2.90744E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 2.90744E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.418459  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.026008999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 9.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.025854  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.19695699  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-6  // units: S cm-2
        e_pas_nml2 = -60.2509  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.9899996E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.008343  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 6.58298E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.026899999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.502333  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.653374  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 5.6999997E-5  // units: S cm-2
        e_pas_nml2 = -76.49812  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 7.84E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.30005398  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec basal {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.002256  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 1.38E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.005574  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 7.92E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bIR_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bIR_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bIR_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bIR_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_15 nseg = 3
    dend_10 nseg = 5
    dend_4 nseg = 5
    dend_17 nseg = 9
    dend_11 nseg = 3
    dend_6 nseg = 7
    dend_2 nseg = 7
    dend_13 nseg = 5
    dend_7 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bIR215_L4_BTC_4e26f3a393_0_0


