// Cell: bNAC219_L4_BP_b88746aff4_0_0
/*
{
  "id" : "bNAC219_L4_BP_b88746aff4_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-3.08452, 6.27464, 0.312461, 1.46623", "-2.79927, 5.64032, 0.287115, 2.64844", "-2.51401, 5.00599, 0.26177, 4.10361", "-2.22875, 4.37167, 0.236425, 4.91598", "-1.94349, 3.73735, 0.21108, 5.72835", "-1.65823, 3.10303, 0.185734, 6.53421", "-1.37297, 2.46871, 0.160389, 7.31212", "-1.08771, 1.83438, 0.135044, 8.08989", "-0.802456, 1.20006, 0.109699, 8.85679", "-0.517198, 0.56574, 0.0843534, 8.93483", "-0.23194, -0.0685822, 0.0590082, 8.92633", "0.0533189, -0.702904, 0.033663, 8.91784", "0.338577, -1.33723, 0.00831775, 8.90934", "0.623836, -1.97155, -0.0170275, 8.90084", "0.909094, -2.60587, -0.0423727, 8.82493", "1.19435, -3.24019, -0.067718, 7.82232", "1.47961, -3.87451, -0.0930632, 6.5965", "1.76487, -4.50884, -0.118408, 5.37067", "2.05013, -5.14316, -0.143754, 4.14485", "2.33539, -5.77748, -0.169099, 2.91903", "2.62064, -6.4118, -0.194444, 1.76337" ]
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "1.61629, -5.71525, -1.26548, 1.33", "2.30765, -8.6447, -1.81981, 1.33", "3.4539, -13.5016, -2.73888, 0.66", "4.34136, -17.262, -3.45045, 0.66", "5.28703, -21.2691, -4.20869, 1.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500001318721313
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "2.62064, -6.4118, -0.194444, 0.33", "8.77276, -20.0921, -0.194444, 0.33", "14.9249, -33.7725, -0.194444, 0.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "5.28703, -21.2691, -4.20869, 0.66", "4.66206, -29.3987, -2.88551, 0.66", "3.71792, -41.4741, -0.908636, 0.66", "2.52772, -56.2218, 1.6135, 0.66", "1.65159, -67.6076, 3.58752, 0.66", "1.1529, -74.2143, 4.73025, 0.66", "0.98096, -76.4062, 5.10306, 0.66", "0.75139, -79.3813, 5.63232, 0.66", "0.485398, -82.1623, 6.13289, 0.66", "0.193902, -85.3672, 6.65393, 0.66", "0.105179, -87.0852, 6.7313, 0.66", "0.0266276, -89.215, 6.63283, 0.66", "0.0408856, -92.4041, 6.13439, 0.66", "0.0928146, -96.5813, 5.27591, 0.66", "0.154824, -98.4022, 4.89694, 0.66", "0.534724, -106.95, 3.06038, 0.66", "0.681672, -108.968, 2.60878, 0.66", "1.29294, -115.2, 1.09605, 0.66", "1.58597, -117.831, 0.444291, 0.66", "2.18847, -122.673, -0.666917, 0.66", "2.48508, -125.461, -1.12394, 0.66", "2.69893, -128.191, -1.30086, 0.66", "2.8797, -130.833, -1.38061, 0.66", "2.95775, -133.375, -1.47959, 0.66", "3.03081, -136.056, -1.69795, 0.66", "3.01936, -140.186, -2.13613, 0.66", "3.00288, -142.707, -2.28097, 0.66", "2.92867, -145.763, -2.42679, 0.66", "2.82075, -149.899, -2.64756, 0.66", "2.76347, -152.53, -2.91437, 0.66", "2.75399, -156.06, -3.41797, 0.66", "2.85639, -159.389, -3.89058, 0.66" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "5.28703, -21.2691, -4.20869, 0.66", "9.31074, -24.5582, -4.17499, 0.66", "18.561, -32.1196, -4.0975, 0.33", "39.7351, -49.4278, -3.92012, 0.33", "40.534, -50.0809, -3.91342, 0.66", "49.0787, -57.0656, -3.84184, 0.33" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "14.9249, -33.7725, -0.194444, 0.33", "21.077, -47.4528, -0.194444, 0.33", "27.2291, -61.1331, -0.194444, 0.33" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "2.85639, -159.389, -3.89058, 0.66", "5.00124, -162.18, -2.86491, 0.66", "6.14029, -163.779, -2.06123, 0.66", "7.78423, -166.287, -0.131501, 0.66", "8.78578, -167.801, 1.25002, 0.66", "10.6429, -170.605, 4.09809, 0.66", "12.0775, -172.657, 6.28481, 0.66", "13.4212, -174.549, 8.57915, 0.66", "16.3705, -178.255, 13.5111, 0.66", "18.079, -180.212, 16.3096, 0.66", "20.0609, -182.481, 19.6311, 0.33", "20.8821, -183.372, 20.9089, 0.33", "21.187, -183.657, 21.3312, 0.66", "23.1122, -185.182, 23.6933, 0.33", "23.5837, -185.468, 24.042, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "2.85639, -159.389, -3.89058, 0.66", "2.90384, -161.882, -3.24256, 0.66", "2.95666, -165.104, -2.39041, 0.66", "3.17528, -171.548, -0.756279, 0.66", "3.25077, -174.352, -0.0804614, 0.66", "3.3896, -177.771, 0.778917, 0.66", "3.52041, -181.236, 1.54852, 0.66", "3.6025, -183.18, 1.91986, 0.66", "3.64809, -185.859, 2.30741, 0.66", "3.72947, -190.998, 2.85455, 0.66", "3.79986, -193.91, 3.03366, 0.66", "3.86348, -197.321, 3.18386, 0.66", "3.87763, -200.194, 3.11815, 0.66", "3.84767, -201.747, 3.05792, 0.66", "3.67181, -206.96, 2.76092, 0.66", "3.58439, -209.651, 2.52301, 0.66", "3.40451, -213.377, 2.14946, 0.66", "3.31231, -216.372, 1.98279, 0.66", "3.27447, -217.7, 1.8942, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "3.27447, -217.7, 1.8942, 0.66", "3.54506, -221.02, 1.96905, 0.66", "3.72322, -226.429, 2.64245, 0.66", "3.82996, -232.205, 3.54218, 0.66", "3.80188, -235.993, 4.15915, 0.66", "3.7297, -241.219, 4.89651, 0.66", "3.45755, -250.439, 5.91354, 0.66", "3.10428, -256.732, 6.49695, 0.66", "2.78641, -261.047, 6.94418, 0.66", "2.49314, -265.557, 7.29593, 0.66", "2.20864, -270.615, 7.63554, 0.66", "2.05384, -274.076, 7.83051, 0.66", "1.96639, -278.826, 7.96778, 0.66", "1.98262, -283.198, 8.06776, 0.66", "2.03926, -293.493, 8.54154, 0.66", "2.13599, -297.593, 8.79919, 0.66", "2.27291, -307.876, 9.36879, 0.66", "2.28706, -312.012, 9.45338, 0.66", "2.23989, -315.985, 9.38894, 0.66", "2.16458, -319.549, 9.18378, 0.66", "1.96016, -325.377, 8.77431, 0.66", "1.71306, -330.356, 8.37004, 0.66", "1.17767, -339.906, 7.25482, 0.66", "1.01723, -344.735, 6.70266, 0.66", "0.91686, -348.497, 6.29385, 0.66", "0.83358, -353.563, 5.77859, 0.66", "0.55123, -372.622, 3.7972, 0.66", "0.5461, -379.622, 2.94868, 0.66", "0.615243, -397.987, 0.467268, 0.66", "0.667266, -404.924, -0.559186, 0.66", "0.75165, -411.753, -1.51743, 0.66", "0.85277, -416.507, -2.15188, 0.66", "1.06911, -423.016, -3.0552, 0.66", "1.16668, -430.25, -4.03485, 0.66", "1.20482, -438.116, -5.39549, 0.66", "1.1962, -442.51, -6.14734, 0.66", "1.19436, -445.579, -6.57947, 0.66", "1.14658, -457.52, -7.5838, 0.66", "1.12797, -461.244, -7.88622, 0.66", "1.02729, -467.333, -8.65409, 0.66", "0.94111, -473.417, -9.51922, 0.66", "0.95718, -478.137, -10.1444, 0.66", "1.10412, -489.729, -11.2011, 0.66", "1.43997, -503.07, -12.0666, 0.66", "1.73117, -512.152, -12.6995, 0.66", "1.86677, -516.711, -13.1048, 0.66", "2.40452, -533.373, -14.9106, 0.66", "2.6044, -544.031, -16.4814, 0.66", "2.66505, -547.141, -17.0048, 0.66", "2.78783, -552.176, -17.9713, 0.66", "2.96978, -559.543, -19.6152, 0.66", "2.97974, -562.714, -20.4458, 0.66", "2.8675, -571.174, -23.0378, 0.66", "2.72363, -588.804, -28.7329, 0.66", "2.70949, -597.922, -31.3715, 0.66", "2.74763, -601.337, -32.2325, 0.33", "2.80844, -603.626, -32.7204, 1.33", "3.12062, -609.084, -33.5418, 0.66", "3.7787, -615.712, -34.1158, 0.66", "4.3607, -620.432, -34.3711, 0.66", "5.02118, -625.225, -34.4772, 0.66", "5.65957, -629.149, -34.5825, 0.66", "8.34922, -645.306, -34.5883, 0.66", "8.71337, -647.588, -34.5305, 0.33", "9.16982, -650.845, -34.4557, 1.33", "9.60801, -654.071, -34.4541, 0.66", "9.91807, -656.605, -34.4633, 0.33", "10.6937, -663.597, -34.452, 0.66", "10.8065, -667.219, -34.09, 0.66", "10.8384, -672.013, -33.3818, 0.33" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 23
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "3.27447, -217.7, 1.8942, 0.66", "0.0531696, -225.688, 0.449577, 0.66", "-2.58183, -232.468, -0.845796, 0.66", "-4.4784, -237.592, -1.44173, 0.33", "-7.14515, -244.823, -1.98904, 0.33", "-7.5954, -246.008, -2.01861, 0.66", "-9.00679, -249.865, -2.00213, 0.33", "-10.0099, -252.692, -1.8116, 0.66", "-12.1284, -259.392, -1.49874, 0.33", "-12.4503, -260.455, -1.41367, 0.66", "-14.6349, -267.649, -0.861204, 0.33", "-15.6267, -271.396, -0.405198, 0.33", "-16.5492, -275.486, 0.2323, 0.66", "-17.5642, -280.398, 1.15193, 0.33", "-18.0172, -283.053, 1.62119, 0.33", "-18.1941, -284.552, 1.98113, 0.66", "-18.6292, -290.941, 4.5038, 0.33", "-18.7109, -291.881, 4.99518, 0.66", "-18.8726, -294.268, 6.48038, 0.33", "-18.9828, -295.495, 7.26323, 0.33", "-19.1124, -296.785, 7.95428, 0.66", "-19.7077, -301.576, 10.0013, 0.33", "-20.1901, -304.467, 10.7385, 0.33", "-20.3421, -305.555, 10.9478, 0.66", "-20.544, -307.66, 11.1864, 0.33", "-20.6466, -308.771, 11.2353, 0.66", "-20.769, -310.176, 11.2126, 0.33", "-20.8839, -311.624, 11.0824, 0.66", "-21.0955, -313.747, 10.923, 0.33", "-21.1915, -314.522, 10.8777, 0.66", "-22.1232, -320.941, 10.6295, 0.33", "-22.1922, -321.35, 10.6136, 0.66", "-22.4921, -322.823, 10.5553, 0.33", "-22.6705, -323.589, 10.5239, 0.66", "-23.1335, -325.692, 10.6596, 0.33", "-23.3289, -326.662, 10.7921, 0.66", "-23.6292, -328.404, 11.124, 0.33", "-23.8253, -329.639, 11.3797, 0.66", "-24.0149, -331.059, 11.718, 0.33", "-24.8295, -337.686, 13.5274, 0.33", "-25.0463, -339.629, 14.1583, 0.66" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "10.8384, -672.013, -33.3818, 0.66", "11.3665, -676.315, -34.5908, 0.66", "11.6801, -678.585, -34.6833, 1.33", "11.9285, -680.547, -34.593, 0.66", "12.1858, -683.008, -34.5449, 0.66", "12.7368, -688.328, -34.1879, 0.33", "13.4629, -694.777, -33.5946, 0.66", "14.4066, -703.145, -32.3057, 0.66", "14.9465, -707.325, -31.5104, 0.66", "15.6442, -711.98, -30.7365, 0.33", "16.5745, -717.918, -29.9845, 0.33", "16.812, -719.588, -29.8912, 0.66", "17.065, -720.954, -30.0724, 0.33", "17.2718, -722.122, -30.4166, 0.66", "18.519, -728.911, -32.7461, 0.33", "19.0745, -731.748, -33.7225, 0.66", "19.5669, -734.427, -34.7478, 0.33", "20.8042, -742.059, -37.3124, 0.33", "21.5493, -746.545, -38.6255, 0.66", "22.9119, -754.696, -40.6773, 0.33", "23.5232, -758.555, -41.4393, 0.66", "24.1356, -762.371, -42.0972, 1.33", "25.5305, -771.111, -43.2418, 0.33", "26.1605, -775.457, -43.5292, 0.33", "26.4002, -777.17, -43.5988, 0.66", "26.9178, -781.494, -43.6125, 0.33", "27.5339, -787.301, -43.5297, 0.33", "27.7731, -789.427, -43.4322, 1.33", "28.4271, -795.533, -43.1545, 0.33", "28.5617, -797.646, -43.0338, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "10.8384, -672.013, -33.3818, 0.66", "10.0103, -673.388, -35.2559, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "28.5617, -797.646, -43.0338, 0.66", "25.8505, -797.081, -43.4112, 0.66" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "28.5617, -797.646, -43.0338, 0.66", "28.7838, -799.23, -43.2928, 0.66", "29.773, -806.282, -44.4459, 0.33", "30.0877, -808.525, -44.8127, 1.33" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "30.0877, -808.525, -44.8127, 0.33", "34.8563, -820.523, -37.7853, 0.33", "35.3229, -821.684, -37.1859, 1.33", "36.6885, -824.923, -35.6838, 0.33", "36.9908, -825.591, -35.4533, 0.66", "38.5277, -828.758, -34.6578, 0.33", "38.9942, -829.72, -34.4163, 0.66", "39.4289, -830.568, -34.5996, 0.33", "40.0477, -831.626, -34.8729, 0.66", "42.4096, -834.929, -36.0048, 0.33", "43.3644, -836.123, -36.4939, 1.33" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "30.0877, -808.525, -44.8127, 0.33", "28.7553, -817.784, -43.002, 0.33", "28.0286, -822.834, -42.0144, 0.33", "27.9144, -823.628, -41.8592, 0.66", "27.1644, -828.84, -40.84, 0.33", "27.0645, -829.534, -40.7041, 0.66" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_11", "dend_8", "dend_8", "dend_8", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.999855",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.042115",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0012239999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.001693",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.386953",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "8.0E-6",
    "erev" : "-63.854015"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.5399997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.039862998",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "5.2299997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.0054459996",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.503893",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "1.0E-4",
    "erev" : "-67.1289"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.78E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.15074699",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009017",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "4.0E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.0032419998",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "1.74E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bNAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bNAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bNAC219_L4_BP_b88746aff4_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_12, id: dend_12, parent: dend_2
create dend_12
public dend_12
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_5, id: dend_5, parent: dend_3
create dend_5
public dend_5
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_11, id: dend_11, parent: dend_7
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_15
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bNAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bNAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_0(0), soma_0(0.4500001318721313)
    connect axon_0(0), soma_0(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_12(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_5(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_11(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -3.08452, 6.27464, 0.312461, 1.46623 ) }
    soma_0 { pt3dadd( -2.79927, 5.64032, 0.287115, 2.64844 ) }
    soma_0 { pt3dadd( -2.51401, 5.00599, 0.26177, 4.10361 ) }
    soma_0 { pt3dadd( -2.22875, 4.37167, 0.236425, 4.91598 ) }
    soma_0 { pt3dadd( -1.94349, 3.73735, 0.21108, 5.72835 ) }
    soma_0 { pt3dadd( -1.65823, 3.10303, 0.185734, 6.53421 ) }
    soma_0 { pt3dadd( -1.37297, 2.46871, 0.160389, 7.31212 ) }
    soma_0 { pt3dadd( -1.08771, 1.83438, 0.135044, 8.08989 ) }
    soma_0 { pt3dadd( -0.802456, 1.20006, 0.109699, 8.85679 ) }
    soma_0 { pt3dadd( -0.517198, 0.56574, 0.0843534, 8.93483 ) }
    soma_0 { pt3dadd( -0.23194, -0.0685822, 0.0590082, 8.92633 ) }
    soma_0 { pt3dadd( 0.0533189, -0.702904, 0.033663, 8.91784 ) }
    soma_0 { pt3dadd( 0.338577, -1.33723, 0.00831775, 8.90934 ) }
    soma_0 { pt3dadd( 0.623836, -1.97155, -0.0170275, 8.90084 ) }
    soma_0 { pt3dadd( 0.909094, -2.60587, -0.0423727, 8.82493 ) }
    soma_0 { pt3dadd( 1.19435, -3.24019, -0.067718, 7.82232 ) }
    soma_0 { pt3dadd( 1.47961, -3.87451, -0.0930632, 6.5965 ) }
    soma_0 { pt3dadd( 1.76487, -4.50884, -0.118408, 5.37067 ) }
    soma_0 { pt3dadd( 2.05013, -5.14316, -0.143754, 4.14485 ) }
    soma_0 { pt3dadd( 2.33539, -5.77748, -0.169099, 2.91903 ) }
    soma_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 1.76337 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 21/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 1.61629, -5.71525, -1.26548, 1.33 ) }
    dend_0 { pt3dadd( 2.30765, -8.6447, -1.81981, 1.33 ) }
    dend_0 { pt3dadd( 3.4539, -13.5016, -2.73888, 0.66 ) }
    dend_0 { pt3dadd( 4.34136, -17.262, -3.45045, 0.66 ) }
    dend_0 { pt3dadd( 5.28703, -21.2691, -4.20869, 1.33 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 26/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 8.77276, -20.0921, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 29/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 5.28703, -21.2691, -4.20869, 0.66 ) }
    dend_2 { pt3dadd( 4.66206, -29.3987, -2.88551, 0.66 ) }
    dend_2 { pt3dadd( 3.71792, -41.4741, -0.908636, 0.66 ) }
    dend_2 { pt3dadd( 2.52772, -56.2218, 1.6135, 0.66 ) }
    dend_2 { pt3dadd( 1.65159, -67.6076, 3.58752, 0.66 ) }
    dend_2 { pt3dadd( 1.1529, -74.2143, 4.73025, 0.66 ) }
    dend_2 { pt3dadd( 0.98096, -76.4062, 5.10306, 0.66 ) }
    dend_2 { pt3dadd( 0.75139, -79.3813, 5.63232, 0.66 ) }
    dend_2 { pt3dadd( 0.485398, -82.1623, 6.13289, 0.66 ) }
    dend_2 { pt3dadd( 0.193902, -85.3672, 6.65393, 0.66 ) }
    dend_2 { pt3dadd( 0.105179, -87.0852, 6.7313, 0.66 ) }
    dend_2 { pt3dadd( 0.0266276, -89.215, 6.63283, 0.66 ) }
    dend_2 { pt3dadd( 0.0408856, -92.4041, 6.13439, 0.66 ) }
    dend_2 { pt3dadd( 0.0928146, -96.5813, 5.27591, 0.66 ) }
    dend_2 { pt3dadd( 0.154824, -98.4022, 4.89694, 0.66 ) }
    dend_2 { pt3dadd( 0.534724, -106.95, 3.06038, 0.66 ) }
    dend_2 { pt3dadd( 0.681672, -108.968, 2.60878, 0.66 ) }
    dend_2 { pt3dadd( 1.29294, -115.2, 1.09605, 0.66 ) }
    dend_2 { pt3dadd( 1.58597, -117.831, 0.444291, 0.66 ) }
    dend_2 { pt3dadd( 2.18847, -122.673, -0.666917, 0.66 ) }
    dend_2 { pt3dadd( 2.48508, -125.461, -1.12394, 0.66 ) }
    dend_2 { pt3dadd( 2.69893, -128.191, -1.30086, 0.66 ) }
    dend_2 { pt3dadd( 2.8797, -130.833, -1.38061, 0.66 ) }
    dend_2 { pt3dadd( 2.95775, -133.375, -1.47959, 0.66 ) }
    dend_2 { pt3dadd( 3.03081, -136.056, -1.69795, 0.66 ) }
    dend_2 { pt3dadd( 3.01936, -140.186, -2.13613, 0.66 ) }
    dend_2 { pt3dadd( 3.00288, -142.707, -2.28097, 0.66 ) }
    dend_2 { pt3dadd( 2.92867, -145.763, -2.42679, 0.66 ) }
    dend_2 { pt3dadd( 2.82075, -149.899, -2.64756, 0.66 ) }
    dend_2 { pt3dadd( 2.76347, -152.53, -2.91437, 0.66 ) }
    dend_2 { pt3dadd( 2.75399, -156.06, -3.41797, 0.66 ) }
    dend_2 { pt3dadd( 2.85639, -159.389, -3.89058, 0.66 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 61/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 5.28703, -21.2691, -4.20869, 0.66 ) }
    dend_1 { pt3dadd( 9.31074, -24.5582, -4.17499, 0.66 ) }
    dend_1 { pt3dadd( 18.561, -32.1196, -4.0975, 0.33 ) }
    dend_1 { pt3dadd( 39.7351, -49.4278, -3.92012, 0.33 ) }
    dend_1 { pt3dadd( 40.534, -50.0809, -3.91342, 0.66 ) }
    dend_1 { pt3dadd( 49.0787, -57.0656, -3.84184, 0.33 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 67/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 21.077, -47.4528, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 27.2291, -61.1331, -0.194444, 0.33 ) }
    // Section: dend_12, id: dend_12, parent: dend_2 (entry count 70/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 2.85639, -159.389, -3.89058, 0.66 ) }
    dend_12 { pt3dadd( 5.00124, -162.18, -2.86491, 0.66 ) }
    dend_12 { pt3dadd( 6.14029, -163.779, -2.06123, 0.66 ) }
    dend_12 { pt3dadd( 7.78423, -166.287, -0.131501, 0.66 ) }
    dend_12 { pt3dadd( 8.78578, -167.801, 1.25002, 0.66 ) }
    dend_12 { pt3dadd( 10.6429, -170.605, 4.09809, 0.66 ) }
    dend_12 { pt3dadd( 12.0775, -172.657, 6.28481, 0.66 ) }
    dend_12 { pt3dadd( 13.4212, -174.549, 8.57915, 0.66 ) }
    dend_12 { pt3dadd( 16.3705, -178.255, 13.5111, 0.66 ) }
    dend_12 { pt3dadd( 18.079, -180.212, 16.3096, 0.66 ) }
    dend_12 { pt3dadd( 20.0609, -182.481, 19.6311, 0.33 ) }
    dend_12 { pt3dadd( 20.8821, -183.372, 20.9089, 0.33 ) }
    dend_12 { pt3dadd( 21.187, -183.657, 21.3312, 0.66 ) }
    dend_12 { pt3dadd( 23.1122, -185.182, 23.6933, 0.33 ) }
    dend_12 { pt3dadd( 23.5837, -185.468, 24.042, 0.66 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 85/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 2.85639, -159.389, -3.89058, 0.66 ) }
    dend_3 { pt3dadd( 2.90384, -161.882, -3.24256, 0.66 ) }
    dend_3 { pt3dadd( 2.95666, -165.104, -2.39041, 0.66 ) }
    dend_3 { pt3dadd( 3.17528, -171.548, -0.756279, 0.66 ) }
    dend_3 { pt3dadd( 3.25077, -174.352, -0.0804614, 0.66 ) }
    dend_3 { pt3dadd( 3.3896, -177.771, 0.778917, 0.66 ) }
    dend_3 { pt3dadd( 3.52041, -181.236, 1.54852, 0.66 ) }
    dend_3 { pt3dadd( 3.6025, -183.18, 1.91986, 0.66 ) }
    dend_3 { pt3dadd( 3.64809, -185.859, 2.30741, 0.66 ) }
    dend_3 { pt3dadd( 3.72947, -190.998, 2.85455, 0.66 ) }
    dend_3 { pt3dadd( 3.79986, -193.91, 3.03366, 0.66 ) }
    dend_3 { pt3dadd( 3.86348, -197.321, 3.18386, 0.66 ) }
    dend_3 { pt3dadd( 3.87763, -200.194, 3.11815, 0.66 ) }
    dend_3 { pt3dadd( 3.84767, -201.747, 3.05792, 0.66 ) }
    dend_3 { pt3dadd( 3.67181, -206.96, 2.76092, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_3 { pt3dadd( 3.58439, -209.651, 2.52301, 0.66 ) }
    dend_3 { pt3dadd( 3.40451, -213.377, 2.14946, 0.66 ) }
    dend_3 { pt3dadd( 3.31231, -216.372, 1.98279, 0.66 ) }
    dend_3 { pt3dadd( 3.27447, -217.7, 1.8942, 0.66 ) }
    // Section: dend_5, id: dend_5, parent: dend_3 (entry count 4/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 3.27447, -217.7, 1.8942, 0.66 ) }
    dend_5 { pt3dadd( 3.54506, -221.02, 1.96905, 0.66 ) }
    dend_5 { pt3dadd( 3.72322, -226.429, 2.64245, 0.66 ) }
    dend_5 { pt3dadd( 3.82996, -232.205, 3.54218, 0.66 ) }
    dend_5 { pt3dadd( 3.80188, -235.993, 4.15915, 0.66 ) }
    dend_5 { pt3dadd( 3.7297, -241.219, 4.89651, 0.66 ) }
    dend_5 { pt3dadd( 3.45755, -250.439, 5.91354, 0.66 ) }
    dend_5 { pt3dadd( 3.10428, -256.732, 6.49695, 0.66 ) }
    dend_5 { pt3dadd( 2.78641, -261.047, 6.94418, 0.66 ) }
    dend_5 { pt3dadd( 2.49314, -265.557, 7.29593, 0.66 ) }
    dend_5 { pt3dadd( 2.20864, -270.615, 7.63554, 0.66 ) }
    dend_5 { pt3dadd( 2.05384, -274.076, 7.83051, 0.66 ) }
    dend_5 { pt3dadd( 1.96639, -278.826, 7.96778, 0.66 ) }
    dend_5 { pt3dadd( 1.98262, -283.198, 8.06776, 0.66 ) }
    dend_5 { pt3dadd( 2.03926, -293.493, 8.54154, 0.66 ) }
    dend_5 { pt3dadd( 2.13599, -297.593, 8.79919, 0.66 ) }
    dend_5 { pt3dadd( 2.27291, -307.876, 9.36879, 0.66 ) }
    dend_5 { pt3dadd( 2.28706, -312.012, 9.45338, 0.66 ) }
    dend_5 { pt3dadd( 2.23989, -315.985, 9.38894, 0.66 ) }
    dend_5 { pt3dadd( 2.16458, -319.549, 9.18378, 0.66 ) }
    dend_5 { pt3dadd( 1.96016, -325.377, 8.77431, 0.66 ) }
    dend_5 { pt3dadd( 1.71306, -330.356, 8.37004, 0.66 ) }
    dend_5 { pt3dadd( 1.17767, -339.906, 7.25482, 0.66 ) }
    dend_5 { pt3dadd( 1.01723, -344.735, 6.70266, 0.66 ) }
    dend_5 { pt3dadd( 0.91686, -348.497, 6.29385, 0.66 ) }
    dend_5 { pt3dadd( 0.83358, -353.563, 5.77859, 0.66 ) }
    dend_5 { pt3dadd( 0.55123, -372.622, 3.7972, 0.66 ) }
    dend_5 { pt3dadd( 0.5461, -379.622, 2.94868, 0.66 ) }
    dend_5 { pt3dadd( 0.615243, -397.987, 0.467268, 0.66 ) }
    dend_5 { pt3dadd( 0.667266, -404.924, -0.559186, 0.66 ) }
    dend_5 { pt3dadd( 0.75165, -411.753, -1.51743, 0.66 ) }
    dend_5 { pt3dadd( 0.85277, -416.507, -2.15188, 0.66 ) }
    dend_5 { pt3dadd( 1.06911, -423.016, -3.0552, 0.66 ) }
    dend_5 { pt3dadd( 1.16668, -430.25, -4.03485, 0.66 ) }
    dend_5 { pt3dadd( 1.20482, -438.116, -5.39549, 0.66 ) }
    dend_5 { pt3dadd( 1.1962, -442.51, -6.14734, 0.66 ) }
    dend_5 { pt3dadd( 1.19436, -445.579, -6.57947, 0.66 ) }
    dend_5 { pt3dadd( 1.14658, -457.52, -7.5838, 0.66 ) }
    dend_5 { pt3dadd( 1.12797, -461.244, -7.88622, 0.66 ) }
    dend_5 { pt3dadd( 1.02729, -467.333, -8.65409, 0.66 ) }
    dend_5 { pt3dadd( 0.94111, -473.417, -9.51922, 0.66 ) }
    dend_5 { pt3dadd( 0.95718, -478.137, -10.1444, 0.66 ) }
    dend_5 { pt3dadd( 1.10412, -489.729, -11.2011, 0.66 ) }
    dend_5 { pt3dadd( 1.43997, -503.07, -12.0666, 0.66 ) }
    dend_5 { pt3dadd( 1.73117, -512.152, -12.6995, 0.66 ) }
    dend_5 { pt3dadd( 1.86677, -516.711, -13.1048, 0.66 ) }
    dend_5 { pt3dadd( 2.40452, -533.373, -14.9106, 0.66 ) }
    dend_5 { pt3dadd( 2.6044, -544.031, -16.4814, 0.66 ) }
    dend_5 { pt3dadd( 2.66505, -547.141, -17.0048, 0.66 ) }
    dend_5 { pt3dadd( 2.78783, -552.176, -17.9713, 0.66 ) }
    dend_5 { pt3dadd( 2.96978, -559.543, -19.6152, 0.66 ) }
    dend_5 { pt3dadd( 2.97974, -562.714, -20.4458, 0.66 ) }
    dend_5 { pt3dadd( 2.8675, -571.174, -23.0378, 0.66 ) }
    dend_5 { pt3dadd( 2.72363, -588.804, -28.7329, 0.66 ) }
    dend_5 { pt3dadd( 2.70949, -597.922, -31.3715, 0.66 ) }
    dend_5 { pt3dadd( 2.74763, -601.337, -32.2325, 0.33 ) }
    dend_5 { pt3dadd( 2.80844, -603.626, -32.7204, 1.33 ) }
    dend_5 { pt3dadd( 3.12062, -609.084, -33.5418, 0.66 ) }
    dend_5 { pt3dadd( 3.7787, -615.712, -34.1158, 0.66 ) }
    dend_5 { pt3dadd( 4.3607, -620.432, -34.3711, 0.66 ) }
    dend_5 { pt3dadd( 5.02118, -625.225, -34.4772, 0.66 ) }
    dend_5 { pt3dadd( 5.65957, -629.149, -34.5825, 0.66 ) }
    dend_5 { pt3dadd( 8.34922, -645.306, -34.5883, 0.66 ) }
    dend_5 { pt3dadd( 8.71337, -647.588, -34.5305, 0.33 ) }
    dend_5 { pt3dadd( 9.16982, -650.845, -34.4557, 1.33 ) }
    dend_5 { pt3dadd( 9.60801, -654.071, -34.4541, 0.66 ) }
    dend_5 { pt3dadd( 9.91807, -656.605, -34.4633, 0.33 ) }
    dend_5 { pt3dadd( 10.6937, -663.597, -34.452, 0.66 ) }
    dend_5 { pt3dadd( 10.8065, -667.219, -34.09, 0.66 ) }
    dend_5 { pt3dadd( 10.8384, -672.013, -33.3818, 0.33 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 74/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 3.27447, -217.7, 1.8942, 0.66 ) }
    dend_4 { pt3dadd( 0.0531696, -225.688, 0.449577, 0.66 ) }
    dend_4 { pt3dadd( -2.58183, -232.468, -0.845796, 0.66 ) }
    dend_4 { pt3dadd( -4.4784, -237.592, -1.44173, 0.33 ) }
    dend_4 { pt3dadd( -7.14515, -244.823, -1.98904, 0.33 ) }
    dend_4 { pt3dadd( -7.5954, -246.008, -2.01861, 0.66 ) }
    dend_4 { pt3dadd( -9.00679, -249.865, -2.00213, 0.33 ) }
    dend_4 { pt3dadd( -10.0099, -252.692, -1.8116, 0.66 ) }
    dend_4 { pt3dadd( -12.1284, -259.392, -1.49874, 0.33 ) }
    dend_4 { pt3dadd( -12.4503, -260.455, -1.41367, 0.66 ) }
    dend_4 { pt3dadd( -14.6349, -267.649, -0.861204, 0.33 ) }
    dend_4 { pt3dadd( -15.6267, -271.396, -0.405198, 0.33 ) }
    dend_4 { pt3dadd( -16.5492, -275.486, 0.2323, 0.66 ) }
    dend_4 { pt3dadd( -17.5642, -280.398, 1.15193, 0.33 ) }
    dend_4 { pt3dadd( -18.0172, -283.053, 1.62119, 0.33 ) }
    dend_4 { pt3dadd( -18.1941, -284.552, 1.98113, 0.66 ) }
    dend_4 { pt3dadd( -18.6292, -290.941, 4.5038, 0.33 ) }
    dend_4 { pt3dadd( -18.7109, -291.881, 4.99518, 0.66 ) }
    dend_4 { pt3dadd( -18.8726, -294.268, 6.48038, 0.33 ) }
    dend_4 { pt3dadd( -18.9828, -295.495, 7.26323, 0.33 ) }
    dend_4 { pt3dadd( -19.1124, -296.785, 7.95428, 0.66 ) }
    dend_4 { pt3dadd( -19.7077, -301.576, 10.0013, 0.33 ) }
    dend_4 { pt3dadd( -20.1901, -304.467, 10.7385, 0.33 ) }
    dend_4 { pt3dadd( -20.3421, -305.555, 10.9478, 0.66 ) }
    dend_4 { pt3dadd( -20.544, -307.66, 11.1864, 0.33 ) }
    dend_4 { pt3dadd( -20.6466, -308.771, 11.2353, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_4 { pt3dadd( -20.769, -310.176, 11.2126, 0.33 ) }
    dend_4 { pt3dadd( -20.8839, -311.624, 11.0824, 0.66 ) }
    dend_4 { pt3dadd( -21.0955, -313.747, 10.923, 0.33 ) }
    dend_4 { pt3dadd( -21.1915, -314.522, 10.8777, 0.66 ) }
    dend_4 { pt3dadd( -22.1232, -320.941, 10.6295, 0.33 ) }
    dend_4 { pt3dadd( -22.1922, -321.35, 10.6136, 0.66 ) }
    dend_4 { pt3dadd( -22.4921, -322.823, 10.5553, 0.33 ) }
    dend_4 { pt3dadd( -22.6705, -323.589, 10.5239, 0.66 ) }
    dend_4 { pt3dadd( -23.1335, -325.692, 10.6596, 0.33 ) }
    dend_4 { pt3dadd( -23.3289, -326.662, 10.7921, 0.66 ) }
    dend_4 { pt3dadd( -23.6292, -328.404, 11.124, 0.33 ) }
    dend_4 { pt3dadd( -23.8253, -329.639, 11.3797, 0.66 ) }
    dend_4 { pt3dadd( -24.0149, -331.059, 11.718, 0.33 ) }
    dend_4 { pt3dadd( -24.8295, -337.686, 13.5274, 0.33 ) }
    dend_4 { pt3dadd( -25.0463, -339.629, 14.1583, 0.66 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 15/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 10.8384, -672.013, -33.3818, 0.66 ) }
    dend_7 { pt3dadd( 11.3665, -676.315, -34.5908, 0.66 ) }
    dend_7 { pt3dadd( 11.6801, -678.585, -34.6833, 1.33 ) }
    dend_7 { pt3dadd( 11.9285, -680.547, -34.593, 0.66 ) }
    dend_7 { pt3dadd( 12.1858, -683.008, -34.5449, 0.66 ) }
    dend_7 { pt3dadd( 12.7368, -688.328, -34.1879, 0.33 ) }
    dend_7 { pt3dadd( 13.4629, -694.777, -33.5946, 0.66 ) }
    dend_7 { pt3dadd( 14.4066, -703.145, -32.3057, 0.66 ) }
    dend_7 { pt3dadd( 14.9465, -707.325, -31.5104, 0.66 ) }
    dend_7 { pt3dadd( 15.6442, -711.98, -30.7365, 0.33 ) }
    dend_7 { pt3dadd( 16.5745, -717.918, -29.9845, 0.33 ) }
    dend_7 { pt3dadd( 16.812, -719.588, -29.8912, 0.66 ) }
    dend_7 { pt3dadd( 17.065, -720.954, -30.0724, 0.33 ) }
    dend_7 { pt3dadd( 17.2718, -722.122, -30.4166, 0.66 ) }
    dend_7 { pt3dadd( 18.519, -728.911, -32.7461, 0.33 ) }
    dend_7 { pt3dadd( 19.0745, -731.748, -33.7225, 0.66 ) }
    dend_7 { pt3dadd( 19.5669, -734.427, -34.7478, 0.33 ) }
    dend_7 { pt3dadd( 20.8042, -742.059, -37.3124, 0.33 ) }
    dend_7 { pt3dadd( 21.5493, -746.545, -38.6255, 0.66 ) }
    dend_7 { pt3dadd( 22.9119, -754.696, -40.6773, 0.33 ) }
    dend_7 { pt3dadd( 23.5232, -758.555, -41.4393, 0.66 ) }
    dend_7 { pt3dadd( 24.1356, -762.371, -42.0972, 1.33 ) }
    dend_7 { pt3dadd( 25.5305, -771.111, -43.2418, 0.33 ) }
    dend_7 { pt3dadd( 26.1605, -775.457, -43.5292, 0.33 ) }
    dend_7 { pt3dadd( 26.4002, -777.17, -43.5988, 0.66 ) }
    dend_7 { pt3dadd( 26.9178, -781.494, -43.6125, 0.33 ) }
    dend_7 { pt3dadd( 27.5339, -787.301, -43.5297, 0.33 ) }
    dend_7 { pt3dadd( 27.7731, -789.427, -43.4322, 1.33 ) }
    dend_7 { pt3dadd( 28.4271, -795.533, -43.1545, 0.33 ) }
    dend_7 { pt3dadd( 28.5617, -797.646, -43.0338, 0.66 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 45/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 10.8384, -672.013, -33.3818, 0.66 ) }
    dend_6 { pt3dadd( 10.0103, -673.388, -35.2559, 0.66 ) }
    // Section: dend_11, id: dend_11, parent: dend_7 (entry count 47/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 28.5617, -797.646, -43.0338, 0.66 ) }
    dend_11 { pt3dadd( 25.8505, -797.081, -43.4112, 0.66 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 49/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 28.5617, -797.646, -43.0338, 0.66 ) }
    dend_8 { pt3dadd( 28.7838, -799.23, -43.2928, 0.66 ) }
    dend_8 { pt3dadd( 29.773, -806.282, -44.4459, 0.33 ) }
    dend_8 { pt3dadd( 30.0877, -808.525, -44.8127, 1.33 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 53/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 30.0877, -808.525, -44.8127, 0.33 ) }
    dend_10 { pt3dadd( 34.8563, -820.523, -37.7853, 0.33 ) }
    dend_10 { pt3dadd( 35.3229, -821.684, -37.1859, 1.33 ) }
    dend_10 { pt3dadd( 36.6885, -824.923, -35.6838, 0.33 ) }
    dend_10 { pt3dadd( 36.9908, -825.591, -35.4533, 0.66 ) }
    dend_10 { pt3dadd( 38.5277, -828.758, -34.6578, 0.33 ) }
    dend_10 { pt3dadd( 38.9942, -829.72, -34.4163, 0.66 ) }
    dend_10 { pt3dadd( 39.4289, -830.568, -34.5996, 0.33 ) }
    dend_10 { pt3dadd( 40.0477, -831.626, -34.8729, 0.66 ) }
    dend_10 { pt3dadd( 42.4096, -834.929, -36.0048, 0.33 ) }
    dend_10 { pt3dadd( 43.3644, -836.123, -36.4939, 1.33 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 64/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 30.0877, -808.525, -44.8127, 0.33 ) }
    dend_9 { pt3dadd( 28.7553, -817.784, -43.002, 0.33 ) }
    dend_9 { pt3dadd( 28.0286, -822.834, -42.0144, 0.33 ) }
    dend_9 { pt3dadd( 27.9144, -823.628, -41.8592, 0.66 ) }
    dend_9 { pt3dadd( 27.1644, -828.84, -40.84, 0.33 ) }
    dend_9 { pt3dadd( 27.0645, -829.534, -40.7041, 0.66 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_2 = new SectionList()
    dend_0 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_2 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_1 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_12 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_3 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_5 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_4 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_7 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_0 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_6 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_11 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_8 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_9 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_10 OneSecGrp_SectionRef_15.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_8 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.999855  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.042115  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0012239999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.001693  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.386953  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 8.0E-6  // units: S cm-2
        e_pas_nml2 = -63.854015  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.5399997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.039862998  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 5.2299997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.0054459996  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.503893  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-4  // units: S cm-2
        e_pas_nml2 = -67.1289  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 4.78E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.15074699  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009017  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 4.0E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.0032419998  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 1.74E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bNAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bNAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bNAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bNAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_2 nseg = 7
    dend_1 nseg = 3
    dend_12 nseg = 3
    dend_3 nseg = 3
    dend_5 nseg = 23
    dend_4 nseg = 7
    dend_7 nseg = 7
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bNAC219_L4_BP_b88746aff4_0_0


