// Cell: cACint209_L4_BTC_6909c18187_0_0
/*
{
  "id" : "cACint209_L4_BTC_6909c18187_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-1.10901, 8.17427, -3.38986, 2.59058", "-1.02513, 7.19062, -3.06257, 4.73751", "-0.941247, 6.20697, -2.73528, 6.32924", "-0.857366, 5.22332, -2.408, 7.36132", "-0.773484, 4.23967, -2.08071, 9.22299", "-0.689602, 3.25602, -1.75342, 10.2547", "-0.605721, 2.27237, -1.42613, 10.8399", "-0.521839, 1.28871, -1.09885, 11.0364", "-0.437957, 0.305064, -0.771561, 11.233", "-0.354076, -0.678586, -0.444273, 11.4012", "-0.270194, -1.66224, -0.116986, 10.7587", "-0.186312, -2.64589, 0.210301, 10.0838", "-0.102431, -3.62954, 0.537588, 9.4089", "-0.018549, -4.61319, 0.864875, 8.86981", "0.0653327, -5.59684, 1.19216, 8.72262", "0.149214, -6.58049, 1.51945, 8.42438", "0.233096, -7.56414, 1.84674, 7.90042", "0.316978, -8.54779, 2.17402, 7.02226", "0.400859, -9.53144, 2.50131, 6.10711", "0.484741, -10.5151, 2.8286, 5.19196", "0.568623, -11.4987, 3.15589, 3.05014" ]
  }, {
    "name" : "dend_40",
    "id" : "dend_40",
    "points3d" : [ "-4.40148, -1.86723, -9.60359, 0.67", "-7.45137, -2.1166, -12.7482, 0.67", "-10.5597, -2.20489, -15.6665, 0.67", "-10.5597, -2.20489, -15.6665, 0.67", "-12.1913, -2.20833, -16.7693, 1.33", "-19.0159, -1.84914, -21.5952, 0.33", "-20.0541, -1.83516, -22.5072, 0.33", "-22.1527, -1.84329, -24.7911, 1.33", "-24.2648, -1.99423, -27.4628, 0.33", "-24.959, -2.09589, -28.3905, 1.33", "-29.5819, -3.15944, -35.2023, 0.67", "-34.9905, -4.88993, -43.814, 0.33", "-37.2396, -5.69014, -47.6755, 0.67", "-40.4241, -6.95731, -53.3865, 0.33", "-41.0729, -7.23433, -54.5752, 0.67", "-44.0296, -8.56433, -59.7887, 0.33", "-45.3897, -9.19229, -62.0013, 1.33", "-48.1134, -10.2208, -65.8893, 0.33", "-49.5888, -10.7182, -67.9364, 1.33", "-54.4911, -12.3022, -74.442, 0.33", "-55.0159, -12.4678, -75.1106, 0.67", "-57.7214, -13.3274, -78.2523, 0.33", "-58.2605, -13.5092, -78.9205, 1.33", "-62.4496, -15.173, -84.5998, 0.33", "-63.693, -15.7092, -86.4139, 0.67", "-64.7548, -16.1275, -87.9939, 0.33", "-65.5823, -16.4136, -89.2488, 1.33", "-69.2556, -17.4132, -94.7944, 0.33", "-69.6452, -17.5066, -95.3854, 0.33", "-71.0304, -17.8313, -97.5554, 1.33", "-74.2735, -18.6909, -103.039, 0.33", "-74.8039, -18.8972, -104.055, 1.33", "-77.8063, -20.4119, -110.138, 0.33", "-78.165, -20.637, -110.882, 0.67", "-80.947, -22.7124, -117.003, 0.33", "-81.566, -23.2736, -118.482, 1.33", "-84.031, -25.9251, -125.115, 0.33", "-84.2741, -26.2061, -125.794, 1.33", "-85.6567, -27.8911, -129.899, 0.33", "-86.1843, -28.4641, -131.392, 0.67", "-88.5365, -30.9099, -137.921, 0.33", "-90.3616, -32.6081, -142.781, 0.67", "-91.1073, -33.1874, -144.659, 0.33", "-92.5174, -34.2604, -148.317, 0.67", "-94.676, -35.9532, -154.203, 0.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500008757444842,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_37",
    "id" : "dend_37",
    "points3d" : [ "-2.84148, 4.50627, -11.1036, 0.67", "-3.13507, 5.27388, -12.2462, 0.67", "-3.72083, 7.19216, -14.4068, 0.67", "-4.70076, 9.92129, -17.475, 0.67", "-5.45999, 12.0357, -19.8522, 0.67", "-5.78237, 12.9336, -20.8616, 0.67", "-6.19672, 14.0875, -22.159, 0.67", "-7.16737, 17.6042, -25.9384, 0.67", "-7.86597, 20.9625, -29.1985, 1.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500008757444842
  }, {
    "name" : "dend_32",
    "id" : "dend_32",
    "points3d" : [ "-2.21148, 5.86077, -10.3036, 0.67", "-0.969696, 8.04667, -11.6976, 0.67", "-0.576647, 8.7639, -12.1413, 0.67", "0.0866905, 9.97436, -12.8902, 1.33", "2.5048, 14.3869, -15.6202, 0.67", "3.64765, 16.4724, -16.9104, 0.67", "4.25844, 17.5869, -17.6, 0.67", "4.99234, 19.0346, -18.6312, 1.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500008757444842
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "4.30852, 6.07077, 7.4864, 2.0", "4.79321, 6.4559, 7.74839, 2.0" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500008757444842
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-0.571479, -12.2727, 6.4864, 4.0", "-0.628534, -14.5268, 6.4864, 4.0" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500008757444842
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "0.568623, -11.4987, 3.15589, 0.469313", "1.84314, -26.4445, 3.15589, 0.469313", "3.11765, -41.3902, 3.15589, 0.469313" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_39",
    "id" : "dend_39",
    "points3d" : [ "-7.86597, 20.9625, -29.1985, 0.33", "-8.06617, 22.9211, -35.8588, 0.33", "-8.0768, 23.1098, -36.413, 1.33", "-8.09588, 24.3978, -39.9009, 0.33", "-8.10078, 24.637, -40.4465, 1.33", "-8.13044, 26.024, -43.2672, 0.33", "-8.13837, 26.1995, -43.5886, 0.67", "-8.26958, 27.6015, -45.5496, 0.33", "-8.30075, 27.8221, -45.843, 1.33", "-8.49293, 29.1426, -47.4688, 0.33", "-8.68821, 30.5212, -49.1551, 1.33", "-8.96457, 32.4481, -51.4407, 0.33", "-9.19939, 34.0507, -53.386, 1.33", "-9.48048, 35.9487, -55.6884, 0.33", "-9.52211, 36.2848, -56.0874, 1.33", "-9.61417, 37.4379, -57.4399, 0.33", "-9.64736, 37.9738, -58.0264, 0.67", "-9.74325, 40.8235, -61.2733, 0.33", "-9.74431, 41.2159, -61.7108, 1.33", "-9.73074, 42.2454, -62.9104, 0.33", "-9.73049, 42.4789, -63.1965, 1.33", "-9.79307, 44.9522, -66.6372, 0.33", "-9.86451, 46.3557, -68.7307, 1.33", "-9.93189, 47.3258, -70.2619, 0.33", "-10.0309, 48.1232, -71.6515, 0.67", "-10.2645, 49.4976, -74.1735, 0.33", "-10.6745, 51.5665, -77.7334, 0.67", "-11.0222, 53.1826, -80.3366, 0.33", "-11.2933, 54.0091, -81.5827, 0.67", "-12.906, 57.7138, -86.9884, 0.33", "-13.0142, 57.9125, -87.2635, 0.67", "-14.1119, 59.5924, -89.4126, 0.33", "-14.3651, 59.9398, -89.8393, 0.67", "-16.2371, 62.3309, -93.0651, 0.33", "-16.5719, 62.8327, -93.777, 0.67", "-17.4931, 64.4373, -96.2355, 0.33", "-17.5999, 64.7385, -96.7432, 0.67", "-17.7242, 66.5955, -100.479, 0.33", "-17.4748, 67.8161, -102.751, 0.67", "-16.563, 69.6803, -105.968, 0.33", "-16.4907, 69.8034, -106.177, 0.67", "-15.2323, 71.6039, -108.977, 0.33", "-13.7607, 73.5237, -111.84, 1.33", "-11.3018, 76.4255, -115.298, 0.33", "-11.1648, 76.5859, -115.454, 0.67" ],
    "parent" : "dend_37",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_38",
    "id" : "dend_38",
    "points3d" : [ "-7.86597, 20.9625, -29.1985, 0.33", "-10.49, 20.3036, -32.0037, 0.33", "-11.5504, 20.1506, -32.907, 1.33", "-15.3621, 19.7757, -35.7725, 0.33", "-16.2714, 19.7352, -36.4776, 0.67", "-18.8893, 19.7258, -38.5153, 0.33", "-21.4595, 19.8077, -40.5457, 1.33", "-26.1254, 20.2949, -43.9163, 0.33", "-26.9856, 20.4518, -44.5669, 1.33", "-30.1947, 21.3148, -46.9176, 0.33", "-30.7692, 21.5122, -47.3836, 0.67", "-33.0118, 22.4487, -49.3312, 0.33", "-33.8164, 22.8138, -50.0306, 0.67", "-36.3071, 24.0319, -52.0351, 0.33", "-37.1386, 24.4557, -52.6949, 1.33", "-40.3191, 26.1149, -55.089, 0.33", "-41.4907, 26.7701, -56.0041, 1.33", "-46.5633, 29.8413, -60.0051, 0.33", "-47.6586, 30.5376, -60.9122, 1.33", "-50.2309, 32.2522, -63.0521, 0.33", "-50.4875, 32.447, -63.2807, 0.67", "-52.9166, 34.5132, -65.5156, 0.33", "-53.386, 34.9473, -65.9639, 0.67", "-55.1972, 36.7985, -67.6772, 0.33", "-55.6964, 37.2917, -68.1072, 2.0", "-61.3534, 42.6611, -72.6795, 0.33", "-61.7502, 43.0151, -72.9864, 0.67", "-63.3976, 44.4121, -74.1625, 0.33", "-63.822, 44.7546, -74.4489, 0.67", "-65.0314, 45.6965, -75.3238, 0.33", "-66.2996, 46.6761, -76.2505, 0.67", "-69.7726, 49.2916, -78.7387, 0.33", "-70.7251, 50.0374, -79.4234, 0.67", "-74.4036, 53.0566, -82.1124, 0.33", "-77.4419, 55.7322, -84.4508, 1.33", "-79.2265, 57.415, -85.8602, 0.33", "-79.5636, 57.7526, -86.1412, 0.67", "-80.6156, 58.7921, -87.1237, 0.33", "-80.6661, 58.84, -87.1688, 0.67", "-83.375, 60.7744, -89.2204, 0.33", "-84.0547, 61.1245, -89.6331, 1.33", "-86.7784, 62.1874, -91.7548, 0.33", "-88.1998, 62.6779, -92.8774, 0.33", "-91.2916, 63.5145, -95.3167, 0.67", "-95.6241, 64.4529, -98.592, 0.33", "-96.2985, 64.5232, -99.0488, 0.67", "-100.609, 64.8565, -102.103, 0.33" ],
    "parent" : "dend_37",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_36",
    "id" : "dend_36",
    "points3d" : [ "4.99234, 19.0346, -18.6312, 0.33", "8.61798, 21.2863, -20.2598, 0.33", "10.3509, 22.4191, -21.0056, 0.67", "12.7174, 24.02, -22.0055, 0.33", "13.0337, 24.2412, -22.1844, 0.67", "15.2047, 25.8239, -23.4807, 0.33", "17.1721, 27.1549, -24.5082, 1.33", "20.9256, 29.5729, -26.0847, 0.33", "21.2608, 29.7868, -26.2398, 0.67", "28.1542, 34.28, -29.4163, 0.33", "29.8783, 35.4304, -30.1877, 2.0", "36.1871, 39.7155, -32.9207, 0.33", "39.2357, 41.8332, -34.2432, 2.0", "48.3074, 48.3859, -38.2765, 0.33", "50.1875, 49.7975, -39.1802, 1.33", "53.0563, 52.0498, -40.6401, 0.33", "53.8716, 52.6972, -41.1631, 0.67", "57.4168, 55.6386, -44.0369, 0.33", "58.755, 56.6401, -45.3312, 0.67", "62.4427, 58.9713, -49.2065, 0.33", "63.425, 59.4735, -50.2435, 1.33", "67.1432, 60.9978, -54.0576, 0.33", "68.1693, 61.3104, -55.0682, 1.33", "72.904, 62.274, -59.4069, 0.33", "73.2045, 62.3121, -59.6571, 0.67", "76.726, 62.5649, -62.3009, 0.33", "78.5263, 62.6322, -63.5341, 1.33", "82.6824, 62.6504, -65.9683, 0.33", "83.6585, 62.6357, -66.576, 0.67", "87.9419, 62.5466, -69.2314, 0.33", "89.8519, 62.5158, -70.603, 1.33", "93.1055, 62.4985, -73.1937, 0.33", "94.5396, 62.544, -74.4529, 1.33", "101.061, 62.9402, -80.4547, 0.33", "101.909, 62.994, -81.2298, 1.33", "106.613, 63.3032, -85.5464, 0.33", "107.702, 63.3596, -86.5066, 0.67", "113.143, 63.569, -91.466, 0.33", "114.079, 63.5671, -92.313, 1.33", "119.563, 63.1999, -96.8325, 0.33", "120.455, 63.1, -97.5229, 0.67", "122.124, 62.8459, -98.6816, 0.33", "125.487, 62.233, -100.743, 0.67", "127.814, 61.7842, -101.897, 0.33", "128.524, 61.6696, -102.248, 0.67", "132.399, 61.148, -103.904, 0.33", "132.771, 61.1255, -104.078, 0.67", "137.582, 61.1263, -106.437, 0.33", "138.742, 61.165, -106.976, 0.67", "140.471, 61.3077, -107.905, 0.33", "143.486, 61.5086, -109.7, 0.67", "150.448, 61.9289, -114.279, 0.33", "151.604, 61.9799, -115.129, 0.67", "154.154, 62.1104, -117.177, 0.33", "155.926, 62.1787, -118.7, 1.33", "159.598, 62.2482, -121.938, 0.33", "160.022, 62.253, -122.336, 0.67", "165.09, 62.0686, -126.805, 0.33", "165.929, 61.9898, -127.586, 1.33", "168.966, 61.5911, -130.634, 0.33", "169.503, 61.4514, -131.211, 0.67", "171.718, 60.5675, -133.836, 0.33", "172.67, 59.926, -134.78, 0.67", "175.328, 57.3377, -136.784, 0.33", "175.328, 57.3377, -136.784, 1.33", "178.478, 53.2108, -138.014, 0.33", "179.149, 52.3252, -138.206, 1.33", "183.797, 46.2299, -139.019, 0.33", "184.05, 45.9172, -139.05, 0.67", "186.679, 43.1462, -139.232, 0.33", "187.108, 42.7551, -139.26, 0.67", "190.497, 40.4084, -139.455, 0.33", "192.921, 39.0865, -139.729, 0.33", "193.65, 38.8083, -139.931, 0.67", "199.224, 37.159, -141.836, 0.33", "199.618, 37.1271, -141.97, 0.67", "204.026, 37.3889, -143.46, 0.33", "205.077, 37.6613, -143.807, 0.67", "211.333, 40.2063, -145.835, 0.33", "212.418, 40.7452, -146.192, 1.33", "219.608, 45.4481, -148.598, 0.33", "220.639, 46.1953, -148.923, 1.33", "223.577, 48.7299, -149.707, 0.33", "223.935, 49.055, -149.756, 0.67" ],
    "parent" : "dend_32",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 15
  }, {
    "name" : "dend_33",
    "id" : "dend_33",
    "points3d" : [ "4.99234, 19.0346, -18.6312, 0.33", "6.96361, 23.509, -25.8322, 0.33", "7.29331, 24.2681, -26.9787, 0.67", "8.31944, 27.4924, -31.6936, 0.33", "8.77816, 29.3289, -34.247, 0.33", "8.84562, 29.9745, -35.1124, 0.67", "8.89174, 32.2795, -38.0363, 0.33", "8.76454, 33.3516, -39.1328, 0.67", "8.25733, 35.6502, -41.5064, 0.33", "8.03549, 36.3528, -42.2444, 1.33", "6.72494, 39.8582, -46.0927, 0.33", "6.43258, 40.6891, -47.1041, 1.33", "5.33571, 44.1686, -51.5865, 0.33", "4.79299, 46.1915, -54.2525, 2.0", "4.11334, 49.4217, -58.6293, 0.33", "4.03023, 49.8544, -59.2447, 0.67", "3.4452, 54.2774, -65.8653, 0.33", "3.2929, 55.5165, -67.8758, 2.0" ],
    "parent" : "dend_32",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "4.79321, 6.4559, 7.74839, 0.67", "6.38687, 8.06948, 7.62662, 0.67", "7.16892, 8.86129, 7.56685, 0.33", "8.94621, 10.6608, 7.43104, 1.33", "12.552, 14.3116, 7.15549, 0.67", "16.2585, 18.0644, 6.87223, 0.67", "17.403, 19.2231, 6.78478, 1.33" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "4.79321, 6.4559, 7.74839, 0.67", "4.97726, 7.97381, 8.52524, 0.67", "5.14921, 9.3919, 9.25099, 0.67", "5.31573, 10.7652, 9.95383, 0.67", "5.65626, 13.5736, 11.3911, 0.67", "5.82428, 14.9593, 12.1003, 1.33" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-0.628534, -14.5268, 6.4864, 3.33", "0.853976, -17.5046, 6.15409, 3.33" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-0.628534, -14.5268, 6.4864, 1.33", "-3.62646, -20.6322, 6.42326, 1.33", "-5.38061, -24.2046, 6.38631, 1.33", "-5.84024, -25.1406, 6.37664, 1.33" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "3.11765, -41.3902, 3.15589, 0.67", "4.39217, -56.336, 3.15589, 0.67", "5.66668, -71.2817, 3.15589, 0.67" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_35",
    "id" : "dend_35",
    "points3d" : [ "3.2929, 55.5165, -67.8758, 0.33", "4.35425, 58.1976, -68.5429, 0.33", "4.73404, 58.8888, -68.8449, 0.67", "6.36304, 61.5673, -70.1612, 0.33", "6.83942, 62.1969, -70.4623, 0.67", "9.16782, 65.0772, -71.8181, 0.33", "9.39231, 65.3366, -71.9359, 0.67", "13.506, 69.7605, -74.1333, 0.33", "14.0469, 70.27, -74.4962, 1.33", "17.7019, 73.3595, -77.2001, 0.33", "17.9361, 73.5494, -77.3939, 0.67", "19.6211, 74.8873, -78.8503, 0.33", "20.544, 75.6532, -79.7036, 0.67", "25.8742, 80.4142, -85.1253, 0.33", "26.5276, 81.021, -85.8777, 0.67", "29.769, 84.1987, -90.2573, 0.33", "30.5269, 84.8971, -91.3058, 1.33", "31.3025, 85.5781, -92.4587, 0.33", "31.6806, 85.8658, -93.0693, 0.67", "34.5011, 87.7346, -97.6594, 0.33", "35.8155, 88.4399, -99.8145, 0.67", "39.2464, 90.0221, -105.421, 0.33", "40.6959, 90.5822, -107.764, 1.33", "45.1942, 92.0817, -114.98, 0.33", "46.8011, 92.5473, -117.51, 1.33", "51.7634, 93.7365, -124.972, 0.33", "52.3893, 93.8635, -125.924, 0.67", "53.775, 94.1067, -128.277, 0.33", "54.6436, 94.1931, -129.984, 0.67", "56.2151, 94.2321, -133.265, 0.33", "56.6418, 94.219, -134.278, 0.67", "58.4367, 93.9379, -139.625, 0.33", "59.5758, 93.7063, -143.388, 0.67", "61.0375, 93.4563, -149.02, 0.33", "62.3943, 93.0024, -155.338, 0.67" ],
    "parent" : "dend_33",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_34",
    "id" : "dend_34",
    "points3d" : [ "3.2929, 55.5165, -67.8758, 0.33", "1.52573, 57.2048, -69.8568, 0.33", "1.0419, 57.6912, -70.4443, 0.67", "-0.651417, 59.5255, -73.0544, 0.33", "-1.1187, 60.1473, -73.9388, 0.67", "-2.64925, 62.3547, -77.0645, 0.33", "-3.01074, 62.9191, -77.8436, 0.67", "-4.05146, 64.7252, -80.4314, 0.33", "-5.24068, 67.1519, -83.7423, 1.33", "-6.218, 69.5498, -86.7924, 0.33", "-6.27716, 69.7124, -87.0075, 1.33", "-7.02011, 71.939, -89.8425, 0.33", "-7.14308, 72.336, -90.3291, 1.33", "-7.418, 73.2972, -91.5131, 0.33", "-7.46397, 73.4988, -91.7301, 0.67", "-8.40939, 78.3405, -96.7526, 0.33", "-8.5512, 79.1785, -97.6251, 0.67", "-8.74108, 80.4456, -98.9488, 0.33", "-9.23106, 83.5692, -102.136, 1.33", "-9.93305, 87.9172, -106.526, 0.33", "-9.99013, 88.3682, -106.981, 0.67", "-10.2586, 91.8838, -110.406, 0.33", "-10.2586, 91.8838, -110.406, 0.67", "-10.4882, 95.3975, -114.123, 0.33", "-10.5686, 96.4151, -115.148, 1.33", "-10.8611, 99.4107, -118.255, 0.33", "-10.9087, 99.8746, -118.697, 0.67", "-11.271, 103.399, -121.643, 0.33", "-11.3524, 104.045, -122.139, 0.67", "-11.8296, 107.124, -124.262, 0.33", "-11.9601, 107.816, -124.692, 1.33", "-12.3563, 109.506, -125.596, 0.33", "-12.5043, 110.076, -125.892, 0.67", "-13.4946, 113.591, -127.518, 0.33", "-13.9188, 115.158, -128.251, 1.33" ],
    "parent" : "dend_33",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_31",
    "id" : "dend_31",
    "points3d" : [ "17.403, 19.2231, 6.78478, 0.67", "24.4225, 19.9206, 6.66437, 0.67", "27.106, 20.3449, 6.41874, 0.67", "30.3629, 21.1053, 6.01698, 0.67", "33.3128, 21.9467, 5.62711, 0.67", "34.6716, 22.3717, 5.44459, 0.67", "37.3328, 23.227, 5.1008, 0.67", "41.7772, 25.0266, 4.72434, 0.67", "44.5575, 26.3059, 4.491, 0.67", "46.6137, 27.409, 4.39677, 0.33", "47.1295, 27.6959, 4.40501, 0.67", "48.3101, 28.3504, 4.47371, 0.33", "51.4763, 30.0693, 4.87229, 0.67", "52.7833, 30.8441, 5.10259, 0.33", "53.5208, 31.2648, 5.1816, 0.67", "55.0253, 32.1179, 5.18925, 0.33", "55.0253, 32.1179, 5.18925, 0.67", "57.3651, 33.377, 4.85582, 0.33", "60.2818, 34.8606, 4.48036, 1.33", "65.0783, 37.2061, 4.02971, 0.33", "67.0218, 38.0261, 3.8904, 0.67", "71.0134, 39.5008, 3.68837, 0.33", "73.5476, 40.2511, 3.56372, 1.33", "77.8412, 41.152, 3.41131, 0.33", "78.2182, 41.1871, 3.40756, 0.67", "83.479, 41.0619, 3.26614, 0.33", "84.5322, 40.9451, 3.25852, 1.33", "87.6237, 40.3292, 3.19374, 0.33", "88.6927, 40.0792, 3.17331, 0.67", "91.8465, 39.3121, 2.96603, 0.33", "92.4307, 39.1874, 2.92733, 0.67", "94.8076, 38.8041, 2.81175, 0.33", "95.9847, 38.6897, 2.77029, 0.67", "97.8756, 38.6578, 2.75169, 0.33", "99.2158, 38.7156, 2.77358, 1.33", "102.686, 39.0318, 2.92172, 0.33", "103.881, 39.1272, 3.0047, 2.0", "106.814, 39.3573, 3.26993, 0.33", "108.137, 39.4026, 3.44017, 0.67", "111.768, 39.3613, 4.0551, 0.33", "113.095, 39.243, 4.34933, 0.67", "115.399, 38.8987, 4.99061, 0.33", "115.973, 38.7749, 5.15067, 1.33", "119.289, 37.8131, 6.07961, 0.33", "120.376, 37.4265, 6.38315, 1.33", "123.434, 36.1915, 7.2188, 0.33", "124.638, 35.6991, 7.55093, 1.33", "128.521, 34.1574, 8.61835, 0.33", "129.919, 33.693, 8.95899, 1.33", "134.313, 32.5828, 9.90738, 0.33", "135.375, 32.3918, 10.112, 0.67", "136.969, 32.212, 10.3858, 0.33", "137.708, 32.1573, 10.5035, 0.67", "144.051, 31.934, 11.041, 0.33", "145.39, 31.9159, 11.08, 1.33", "148.347, 31.8946, 10.9315, 0.33", "149.685, 31.833, 10.7738, 0.67", "152.585, 31.5741, 10.2736, 0.33", "156.399, 31.0093, 9.46537, 1.33", "158.7, 30.5345, 8.91076, 0.33", "160.529, 30.1359, 8.47532, 1.33", "164.297, 29.4647, 7.68752, 0.33", "164.821, 29.3974, 7.60523, 0.67", "166.748, 29.257, 7.4591, 1.33", "169.749, 29.2491, 7.66534, 0.33", "170.585, 29.2921, 7.79036, 0.67", "174.416, 29.7145, 8.80315, 0.33", "175.315, 29.8685, 9.10767, 0.67", "177.043, 30.2378, 9.72752, 0.33", "179.229, 30.8684, 10.6394, 1.33", "181.545, 31.6697, 11.7411, 0.33", "182.973, 32.2933, 12.5905, 1.33", "185.184, 33.6403, 14.2615, 0.33", "185.87, 34.2676, 14.9033, 1.33", "187.204, 35.9803, 16.3546, 0.33", "187.429, 36.3776, 16.6556, 0.67", "188.393, 38.6742, 18.2744, 0.33", "188.588, 39.3139, 18.7226, 1.33", "189.356, 43.3813, 21.6983, 0.33", "189.511, 44.2817, 22.3672, 0.67", "189.839, 46.425, 23.9278, 0.33", "189.916, 46.9182, 24.293, 0.67", "190.273, 49.1094, 25.8989, 0.33", "190.401, 50.4164, 26.9462, 0.67" ],
    "parent" : "dend_29",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "17.403, 19.2231, 6.78478, 0.33", "18.5372, 20.9023, 7.80501, 0.33", "20.725, 23.5393, 9.45028, 0.67", "23.1168, 26.4768, 11.302, 0.67", "24.1538, 27.7636, 12.0894, 0.67", "26.8087, 30.9682, 14.0217, 0.67", "29.3929, 34.0535, 15.7734, 0.67", "32.9441, 37.9341, 17.9283, 0.67", "34.6521, 39.7046, 18.8985, 0.67", "36.5584, 41.7928, 20.0714, 0.67", "37.6758, 43.0052, 20.8182, 0.67", "39.9211, 45.4647, 22.2188, 0.67", "42.5498, 48.3396, 23.6048, 0.67", "44.6555, 50.7745, 24.7235, 0.67", "47.6396, 54.3112, 26.2705, 0.67", "48.912, 55.9973, 27.031, 0.67", "51.3973, 59.3589, 28.6771, 0.67", "52.3152, 60.5555, 29.28, 0.67", "54.9235, 63.6194, 30.917, 0.67", "56.1527, 64.8108, 31.6878, 0.67", "58.9756, 66.9236, 33.4815, 0.67", "61.9852, 68.852, 35.43, 0.67", "64.6913, 70.4159, 37.3854, 0.67", "68.0048, 72.0403, 39.7071, 0.67", "70.9338, 73.0449, 41.5329, 0.67", "72.7395, 73.4906, 42.5681, 0.33", "75.0031, 73.8088, 43.7196, 0.67" ],
    "parent" : "dend_29",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "5.82428, 14.9593, 12.1003, 0.67", "6.47501, 18.7273, 13.2197, 0.67", "7.16058, 22.3534, 14.6337, 0.67", "7.65433, 24.1396, 15.4248, 0.67", "8.08725, 25.5613, 16.0462, 0.67", "9.04805, 28.4727, 17.3835, 0.67", "10.1296, 31.5614, 18.8139, 0.67", "11.2092, 34.6545, 20.3108, 0.67", "12.2683, 37.5114, 21.6062, 0.67", "13.6372, 41.2336, 23.337, 0.67", "14.2054, 42.9232, 24.1871, 0.33", "14.5303, 43.8464, 24.6917, 0.67", "14.9281, 44.9689, 25.2399, 0.33", "15.7098, 47.2582, 26.2513, 0.67", "16.1712, 48.5776, 26.8264, 1.33", "17.1576, 51.1528, 27.9203, 0.67", "19.149, 56.1608, 29.8893, 0.67", "20.7233, 60.0654, 31.3433, 0.67", "22.031, 63.2153, 32.3964, 0.67", "22.6585, 64.6842, 32.8016, 0.67", "23.2263, 66.0262, 33.1008, 0.67", "23.6854, 67.176, 33.2945, 1.33", "24.3739, 69.1947, 33.5607, 0.33", "25.0737, 71.2954, 33.8258, 1.33", "25.4213, 72.8248, 33.9473, 0.33", "25.7412, 74.8015, 34.0989, 1.33", "26.1271, 78.3312, 34.3393, 0.67", "26.2509, 79.9169, 34.463, 0.33", "26.2967, 80.7004, 34.5255, 0.33", "26.5047, 85.5029, 34.9223, 0.67", "26.5527, 86.9484, 35.0328, 0.33", "26.6232, 89.0494, 35.262, 0.67", "26.7394, 91.002, 35.5096, 0.67", "26.9265, 92.7132, 35.7916, 0.67", "27.1293, 93.7878, 36.0201, 0.67", "27.4781, 94.684, 36.3125, 0.67", "28.6891, 97.1571, 37.2912, 0.33", "29.188, 97.9784, 37.696, 0.33", "29.765, 98.8764, 38.1799, 0.67" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "5.82428, 14.9593, 12.1003, 0.67", "5.1493, 17.8428, 13.372, 0.67", "4.49291, 21.1408, 15.4358, 0.67", "3.91493, 24.3737, 17.8664, 0.67", "3.62634, 26.3682, 19.451, 0.67", "3.56157, 29.1697, 21.5944, 0.67", "3.75058, 32.0651, 23.8932, 0.67", "4.18785, 36.3985, 27.5146, 0.67", "4.4367, 38.935, 29.7832, 0.67", "4.71754, 41.153, 31.7821, 0.67", "5.37029, 45.3661, 35.3863, 0.67", "5.8203, 48.4115, 37.9623, 0.67", "6.02608, 50.8646, 39.9466, 0.67", "6.07685, 52.8057, 41.3048, 0.67", "6.07199, 58.6994, 44.9136, 0.67", "5.9472, 63.3483, 47.3295, 0.67", "5.64775, 66.9899, 49.1496, 0.67", "5.47077, 69.6625, 50.3182, 0.67", "5.42972, 75.0158, 52.5281, 0.33", "5.4293, 76.4389, 53.0362, 0.67", "5.35222, 79.8357, 53.2245, 0.67" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "0.853976, -17.5046, 6.15409, 1.33", "1.21172, -21.3611, 8.58949, 1.33", "1.62329, -25.7979, 11.3913, 1.33", "2.10883, -31.0321, 14.6967, 1.33" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "0.853976, -17.5046, 6.15409, 0.67", "1.39501, -19.5004, 4.11913, 0.67", "2.51788, -22.6825, 1.229, 0.67", "3.71222, -25.6882, -1.53145, 0.67", "6.0958, -31.6869, -7.04058, 0.67", "7.25835, -34.6126, -9.72754, 0.67", "8.26634, -37.1494, -12.0573, 0.67", "9.79798, -41.4605, -16.0451, 0.67", "10.7125, -43.7431, -18.1142, 1.33" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-5.84024, -25.1406, 6.37664, 0.67", "-6.91257, -31.0336, 7.31782, 0.67", "-7.23839, -32.8241, 7.6038, 0.67", "-7.90472, -36.4859, 8.18863, 1.33", "-8.96365, -42.3052, 9.11806, 0.67", "-9.19263, -43.5635, 9.31903, 0.67", "-9.6523, -46.0896, 9.72248, 1.33" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-5.84024, -25.1406, 6.37664, 0.67", "-6.90254, -25.4859, 7.43422, 0.67", "-8.95595, -25.9941, 9.50805, 0.67", "-10.2128, -26.2322, 10.7495, 0.67", "-15.6729, -27.1176, 15.9352, 0.67", "-18.4213, -27.6061, 18.4131, 0.67", "-20.631, -28.0061, 20.3634, 0.67", "-22.9555, -28.2579, 22.4305, 0.33", "-24.9414, -28.3431, 24.1904, 0.67", "-25.8605, -28.37, 24.9721, 0.33", "-27.6232, -28.3646, 26.1567, 0.67", "-29.7256, -28.4912, 27.7188, 0.67", "-32.4796, -28.565, 29.6174, 0.67" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "2.10883, -31.0321, 14.6967, 1.33", "1.50902, -34.6237, 14.3272, 1.33" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "2.10883, -31.0321, 14.6967, 0.67", "0.892204, -30.5403, 18.029, 0.67", "-1.77901, -29.0357, 22.8182, 0.67", "-3.25643, -28.2967, 24.8865, 0.67", "-6.41078, -27.085, 28.4068, 0.67", "-6.873, -26.8774, 28.8778, 0.67", "-8.46024, -26.0637, 30.3451, 0.67", "-11.4997, -24.1738, 32.6515, 0.67", "-12.7171, -23.2349, 33.5093, 0.67", "-15.5141, -20.8363, 35.6381, 0.67", "-17.5853, -18.9045, 37.0993, 0.67", "-18.6705, -17.5628, 38.1263, 0.67", "-20.449, -14.9183, 40.1436, 0.67", "-21.3155, -13.2214, 41.4151, 0.67", "-21.878, -11.8397, 42.3985, 0.67", "-22.3915, -10.0352, 43.5946, 0.67", "-23.5839, -5.59284, 47.0272, 0.67" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "10.7125, -43.7431, -18.1142, 0.33", "10.2386, -47.801, -21.7921, 0.33", "10.1099, -48.9025, -22.7905, 1.33", "9.39492, -55.0248, -28.3395, 0.33" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "10.7125, -43.7431, -18.1142, 0.33", "15.0292, -45.0736, -22.585, 0.33", "15.3247, -45.146, -22.8789, 0.67", "17.1701, -45.4816, -24.6153, 0.33", "18.7516, -45.6781, -25.9968, 1.33", "23.9144, -46.1337, -30.4807, 0.67", "28.8064, -46.3652, -34.528, 0.33", "30.2235, -46.3415, -35.632, 0.33", "31.6384, -46.2756, -36.7536, 0.67", "33.8286, -46.1402, -38.5218, 0.33", "36.7183, -46.0951, -40.7645, 1.33", "39.0297, -46.1599, -42.4494, 0.33", "41.3674, -46.4166, -44.0929, 1.33", "45.3779, -47.088, -46.9004, 0.33", "46.1204, -47.2497, -47.4703, 0.67", "53.1638, -49.095, -53.1216, 0.33", "54.7191, -49.5717, -54.4292, 2.0", "60.7789, -51.7327, -59.8518, 0.33", "61.444, -51.9998, -60.4888, 1.33", "66.2455, -54.1578, -65.6816, 0.33", "66.845, -54.4347, -66.3734, 0.67", "69.2809, -55.7224, -69.6222, 0.33", "70.1698, -56.2644, -70.9685, 1.33", "73.0864, -58.6743, -76.6366, 0.33", "74.3863, -59.7709, -79.1871, 1.33" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-9.6523, -46.0896, 9.72248, 0.67", "-9.45816, -48.3378, 9.99893, 0.67", "-9.53269, -50.113, 10.2199, 0.67", "-9.63607, -51.2693, 10.3597, 0.67", "-10.1099, -55.1621, 10.8002, 0.67", "-11.2313, -62.1469, 11.6368, 0.67", "-12.2884, -67.0923, 12.2605, 0.67", "-13.6163, -72.3011, 12.9566, 0.67", "-15.4211, -78.7885, 13.899, 0.67", "-16.1109, -80.9294, 14.2179, 0.67", "-17.2013, -83.4318, 14.6148, 0.67", "-19.8609, -88.2091, 15.485, 0.67", "-21.1038, -90.17, 15.877, 0.67", "-23.2877, -93.4183, 16.5771, 0.67", "-24.1416, -94.6112, 16.8632, 0.67", "-28.3866, -100.812, 18.376, 0.67", "-31.0894, -104.906, 19.3664, 0.67", "-33.1908, -108.229, 20.1693, 0.67", "-35.6134, -112.108, 21.1012, 0.67", "-37.4629, -115.177, 21.8517, 0.67", "-38.3811, -116.899, 22.3736, 0.67", "-39.3709, -119.126, 23.1679, 0.67", "-40.3406, -121.323, 24.0805, 0.67", "-41.035, -122.723, 24.7381, 0.67", "-42.4336, -125.054, 25.9308, 0.67", "-44.9033, -128.292, 27.9489, 0.67", "-46.1033, -129.685, 28.9191, 0.67", "-47.5064, -131.155, 30.0564, 0.67", "-49.1288, -132.601, 31.3226, 0.67", "-50.7807, -133.956, 32.5501, 0.33", "-53.2503, -135.601, 34.0579, 0.33" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-9.6523, -46.0896, 9.72248, 0.67", "-13.6375, -47.7871, 6.95556, 0.67", "-18.5062, -49.9195, 3.22247, 0.67", "-23.5398, -52.093, -0.713872, 0.67", "-33.7405, -56.3221, -8.21504, 0.67", "-38.6342, -58.2302, -11.634, 0.67", "-41.4358, -59.2994, -13.476, 0.67", "-44.9787, -60.6942, -15.8493, 0.33", "-47.3661, -61.5972, -17.5016, 1.33", "-50.9531, -62.9219, -19.743, 0.33", "-54.6167, -64.3359, -21.624, 0.67", "-58.2631, -65.8053, -23.3417, 0.33", "-62.7789, -67.8056, -25.7347, 0.67", "-66.0501, -69.3294, -27.5507, 0.33", "-68.5098, -70.6062, -29.1001, 0.67", "-75.0065, -74.3408, -33.6772, 0.33", "-78.0879, -76.3491, -36.1639, 1.33", "-83.1146, -79.6669, -40.0171, 0.33", "-83.6158, -79.994, -40.4, 0.67", "-86.1358, -81.6265, -42.4235, 0.33", "-86.8832, -82.0935, -43.1236, 0.67", "-93.8712, -86.1639, -49.922, 0.33", "-97.565, -88.178, -54.0265, 2.0", "-103.617, -91.1903, -61.0115, 0.33", "-105.801, -92.1977, -63.5432, 1.33", "-111.706, -94.6379, -70.3541, 0.33", "-112.027, -94.7544, -70.6974, 0.67", "-115.06, -95.6597, -73.7518, 0.33", "-115.774, -95.8551, -74.4178, 0.67", "-120.75, -97.0952, -77.968, 0.33", "-122.902, -97.6527, -79.2388, 1.33", "-126.521, -98.6083, -80.951, 0.33", "-132.485, -100.427, -83.5782, 1.33", "-137.858, -102.279, -85.7393, 0.33", "-139.246, -102.86, -86.2912, 0.67", "-142.928, -104.637, -87.7384, 0.33", "-143.773, -105.127, -88.0236, 0.67", "-149.541, -108.956, -89.6492, 0.33", "-151.221, -110.202, -90.1105, 0.67", "-155.375, -113.488, -91.4356, 0.33", "-156.596, -114.436, -91.8487, 0.67", "-164.336, -120.306, -94.5234, 0.33", "-164.721, -120.596, -94.6795, 0.67", "-169.497, -124.057, -96.8377, 0.33", "-171.073, -125.197, -97.5786, 1.33", "-174.957, -128.035, -99.4807, 0.33", "-177.356, -129.867, -100.64, 1.33", "-184.246, -135.293, -103.896, 0.33", "-185.584, -136.388, -104.451, 1.33", "-188.525, -138.852, -105.435, 0.33", "-189.291, -139.465, -105.661, 0.67", "-193.198, -142.485, -106.674, 0.33", "-194.087, -143.171, -106.865, 0.67", "-197.466, -145.858, -107.412, 0.33", "-199.279, -147.641, -107.833, 1.33", "-206.259, -155.795, -109.936, 0.33", "-206.91, -156.72, -110.183, 0.67", "-209.881, -162.223, -111.671, 0.33", "-210.694, -164.305, -112.23, 0.67", "-212.714, -173.626, -114.74, 0.33", "-212.714, -174.14, -114.896, 1.33", "-212.19, -176.552, -115.706, 0.33", "-212.01, -177.219, -115.92, 0.67", "-211.36, -179.238, -116.552, 0.33", "-211.159, -179.902, -116.755, 0.67", "-209.459, -186.169, -118.409, 0.33", "-209.067, -187.611, -118.801, 1.33", "-206.92, -195.628, -121.066, 0.33", "-206.807, -196.103, -121.198, 0.67" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 15
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "1.50902, -34.6237, 14.3272, 0.67", "2.20908, -40.8157, 14.0956, 0.67", "2.2999, -42.5099, 14.0229, 0.67", "2.29714, -45.4287, 13.752, 0.67", "2.2931, -49.7093, 13.3548, 0.67", "2.28884, -54.2166, 12.9365, 0.67", "2.28614, -57.0741, 12.6713, 0.67", "1.79041, -63.3275, 12.2218, 0.67", "0.969201, -73.0097, 11.4053, 0.33" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "1.50902, -34.6237, 14.3272, 0.67", "2.63329, -36.0758, 15.8771, 0.67" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "9.39492, -55.0248, -28.3395, 0.33", "11.1139, -56.9639, -29.4196, 0.33", "11.67, -57.4804, -29.9161, 0.67", "12.9229, -58.623, -31.0346, 0.33", "13.3617, -58.997, -31.4505, 0.67", "14.8099, -60.1713, -32.8132, 0.33", "18.7073, -63.0514, -36.5375, 1.33", "22.4976, -65.4645, -40.4607, 0.33", "23.3701, -65.9499, -41.3647, 1.33", "26.2533, -67.3753, -44.3578, 0.33", "26.8682, -67.6137, -45.0294, 0.67", "29.9777, -68.4756, -48.7151, 0.33", "31.5555, -68.7614, -50.5968, 2.0", "32.9285, -68.885, -52.3592, 0.33", "33.407, -68.9239, -53.065, 0.67", "37.0036, -69.2532, -58.8575, 0.33", "39.1627, -69.5977, -62.5386, 1.33", "40.1845, -69.8199, -64.3771, 0.33", "40.7372, -69.9848, -65.4021, 2.0", "45.5779, -71.8152, -74.7859, 0.33", "45.9851, -72.012, -75.6418, 2.0", "47.4939, -72.9239, -78.9099, 0.33", "48.1918, -73.4582, -80.524, 0.67", "49.4333, -74.5988, -83.6346, 0.33", "49.8658, -75.0034, -84.584, 1.33", "55.0286, -79.9357, -94.1076, 0.33", "56.4251, -81.1347, -96.2293, 0.67", "58.2791, -82.5609, -98.4963, 0.33", "58.5717, -82.7701, -98.7701, 0.67", "63.5136, -85.9456, -102.246, 0.33", "64.7508, -86.6699, -102.88, 0.67", "67.8469, -88.3807, -103.788, 0.33", "68.4513, -88.721, -103.937, 0.67", "73.4489, -91.4577, -105.128, 0.33", "74.2641, -91.9822, -105.169, 1.33", "76.7165, -93.8408, -104.715, 0.33", "77.0407, -94.1151, -104.541, 0.67", "81.1099, -97.8555, -101.349, 0.33", "82.7111, -99.3678, -99.8171, 0.67", "87.4491, -104.015, -94.0753, 0.33", "87.8087, -104.39, -93.5785, 0.67", "91.3749, -108.394, -87.6257, 0.33", "91.5043, -108.545, -87.3774, 0.67" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "9.39492, -55.0248, -28.3395, 0.33", "9.51652, -58.5986, -27.9084, 0.33", "9.61421, -59.8786, -27.7712, 0.67", "10.0316, -64.0784, -27.3428, 0.33", "10.1985, -65.5142, -27.2046, 0.67", "10.3857, -67.2191, -27.0595, 0.33", "10.5791, -69.2406, -26.9197, 1.33", "10.9104, -72.553, -26.7354, 0.33", "10.9555, -73.013, -26.7199, 0.67", "11.1206, -74.7299, -26.7112, 0.33", "11.3035, -76.6829, -26.6992, 1.33", "11.7147, -80.5956, -26.8989, 0.33", "11.8443, -81.6043, -27.0027, 0.67", "12.1868, -83.8887, -27.3268, 0.33", "12.433, -85.0013, -27.5654, 0.67", "13.1034, -87.4079, -28.2125, 0.33", "14.2157, -90.4576, -29.1254, 0.67", "15.6957, -93.8118, -30.3042, 0.33", "16.303, -95.0287, -30.7386, 1.33", "18.9209, -99.746, -32.4483, 0.33", "19.0855, -100.025, -32.542, 0.67", "20.3317, -102.0, -33.1247, 0.33", "21.3643, -103.578, -33.4279, 2.0", "22.9339, -105.761, -33.8433, 0.33", "23.1138, -106.018, -33.8767, 0.67", "24.2178, -107.717, -34.0449, 0.33", "24.4327, -108.103, -34.1144, 0.67", "25.4716, -110.313, -34.6198, 0.33", "25.9403, -111.469, -34.8887, 0.67", "26.8487, -114.294, -35.4843, 0.33", "27.4464, -116.448, -35.8321, 1.33", "28.6051, -121.308, -36.4577, 0.33", "28.7494, -121.943, -36.5022, 0.67", "29.339, -124.631, -36.5371, 0.33", "29.9911, -127.527, -36.3654, 1.33", "30.7253, -130.639, -35.9649, 0.33", "30.8806, -131.238, -35.8434, 0.67", "31.6854, -134.019, -35.1411, 0.33", "31.9147, -134.687, -34.9875, 0.67", "32.6079, -136.384, -34.6553, 0.33", "32.7939, -136.796, -34.5945, 0.67", "34.2473, -140.014, -34.1297, 0.33", "34.8406, -141.285, -33.9493, 1.33", "35.8745, -143.53, -33.6534, 0.33", "36.9769, -146.129, -33.3415, 0.67", "37.8545, -148.231, -33.1001, 0.33", "38.0336, -148.652, -33.0488, 0.67", "38.7604, -150.367, -32.8374, 0.33", "38.9952, -150.937, -32.7716, 0.67", "40.5609, -154.89, -32.3129, 0.33", "40.9196, -155.835, -32.202, 0.67", "42.6523, -160.487, -31.6419, 0.33", "43.0993, -161.714, -31.4923, 2.0" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "74.3863, -59.7709, -79.1871, 0.33", "76.3206, -59.5485, -80.5124, 0.33", "76.8639, -59.4751, -80.8878, 0.67", "81.5212, -58.7897, -84.1245, 0.33", "82.5746, -58.6736, -84.678, 1.33", "87.2402, -58.3134, -86.7554, 0.33", "88.0885, -58.2903, -87.0517, 0.67", "94.4943, -58.3947, -88.7176, 0.33", "95.3712, -58.4809, -88.9033, 1.33", "102.587, -59.9621, -89.7938, 0.33", "103.569, -60.3193, -89.9214, 1.33", "107.224, -62.3479, -90.3316, 0.33", "107.834, -62.7902, -90.435, 1.33", "111.898, -66.7736, -91.462, 0.33", "112.805, -67.7343, -91.9262, 0.67", "115.256, -70.4538, -93.9523, 0.33", "115.546, -70.7294, -94.2009, 0.67", "117.032, -71.9396, -95.4222, 0.33", "117.279, -72.0935, -95.5917, 0.67", "121.471, -74.0776, -97.8157, 0.33", "122.759, -74.6061, -98.4867, 0.67", "123.837, -75.0044, -98.9264, 0.33", "127.53, -76.3217, -100.396, 1.33", "133.437, -78.3404, -102.6, 0.33", "134.105, -78.5743, -102.849, 0.67", "138.298, -80.1031, -104.366, 0.33", "142.115, -81.7184, -106.003, 0.67" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "74.3863, -59.7709, -79.1871, 0.33", "75.422, -62.2042, -82.5491, 0.33", "75.6449, -62.6616, -83.206, 0.67", "77.6735, -66.2594, -88.5295, 0.33", "77.8924, -66.6413, -89.1271, 0.67", "79.5911, -69.6627, -94.0596, 0.33", "79.7545, -70.0156, -94.6881, 0.67", "80.8725, -72.8213, -100.219, 0.33", "81.0926, -73.517, -101.554, 1.33", "81.9283, -76.5513, -107.4, 0.33", "82.1608, -77.5961, -109.465, 0.67", "82.7744, -81.7994, -118.265, 0.33", "82.8296, -82.6365, -120.073, 1.33", "82.5768, -84.5399, -124.214, 0.33" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "2.63329, -36.0758, 15.8771, 0.67", "2.257, -38.5798, 19.0372, 0.67", "2.00699, -41.7228, 22.8029, 0.67", "2.17017, -43.7944, 25.3773, 0.67", "2.34311, -45.6169, 27.7221, 0.67", "2.43963, -46.4225, 28.743, 0.67", "2.51601, -47.484, 29.9776, 0.33", "2.60825, -48.9838, 31.6133, 0.67", "2.7055, -51.1068, 34.0255, 0.33", "3.01952, -53.4968, 36.3144, 0.67", "3.13346, -54.5096, 37.1742, 0.33", "3.2398, -57.0927, 39.5252, 0.67", "2.92964, -60.0213, 42.2094, 0.33" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "2.63329, -36.0758, 15.8771, 0.67", "2.41247, -36.5144, 21.5255, 0.67", "2.25699, -36.8232, 25.5027, 0.67", "2.02666, -37.2807, 31.3944, 0.67", "1.85752, -37.6166, 35.7209, 0.67" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "43.0993, -161.714, -31.4923, 0.33", "44.8731, -165.593, -30.9386, 0.33", "45.001, -165.873, -30.8813, 0.67", "47.0886, -170.511, -29.8011, 0.33", "47.4831, -171.354, -29.6082, 0.67", "48.7238, -173.946, -29.0246, 0.33", "48.8619, -174.229, -28.9643, 0.67", "50.1764, -176.896, -28.4852, 0.33", "50.5938, -177.795, -28.3992, 1.33", "52.3437, -181.636, -28.2992, 0.33", "52.5136, -182.039, -28.3112, 0.67", "53.5196, -184.53, -28.5982, 0.33", "54.0069, -185.826, -28.8319, 0.67", "55.7301, -190.707, -30.0628, 0.33", "56.0195, -191.622, -30.2997, 0.67", "56.5227, -193.485, -30.7858, 0.33", "56.9381, -195.129, -31.2079, 0.67", "57.3634, -196.936, -31.6654, 0.33", "57.6602, -198.211, -31.9577, 0.67", "58.3173, -200.989, -32.3972, 0.33", "58.6112, -202.349, -32.6061, 1.33", "59.221, -205.096, -32.9983, 0.33", "59.221, -205.096, -32.9983, 0.67" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "43.0993, -161.714, -31.4923, 0.67", "43.0184, -164.069, -32.4821, 0.67", "42.8744, -165.643, -33.2472, 0.33", "42.8221, -166.235, -33.5097, 0.67", "42.5103, -170.146, -35.161, 0.33", "42.4957, -170.441, -35.2981, 0.67", "42.3559, -175.265, -37.6324, 0.33", "42.4737, -178.077, -39.1321, 1.33", "42.7843, -181.274, -40.9359, 0.33", "42.8509, -181.665, -41.15, 0.67", "43.7124, -185.325, -43.0454, 0.33", "43.8313, -185.699, -43.2607, 0.67", "45.8497, -190.602, -46.3063, 0.33", "46.4685, -192.01, -47.1108, 1.33", "47.7693, -194.857, -48.7268, 0.33", "48.1603, -195.703, -49.1492, 1.33", "50.1432, -199.962, -50.9546, 0.33", "50.5529, -200.817, -51.3239, 0.67", "51.8912, -203.517, -52.4763, 0.33", "52.1979, -204.118, -52.7437, 1.33", "55.4338, -210.306, -55.5559, 0.33", "55.9435, -211.257, -55.9696, 0.67", "58.4105, -215.779, -57.6748, 0.33", "58.5584, -216.042, -57.7861, 0.67" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "1.85752, -37.6166, 35.7209, 0.67", "3.49783, -37.2669, 37.801, 0.67", "4.67746, -36.654, 39.3843, 0.67", "6.02471, -35.7789, 41.3137, 0.67", "8.13255, -34.181, 44.6697, 0.67", "9.12961, -33.3632, 46.5047, 0.67", "9.63368, -32.9142, 47.5157, 0.67", "11.9792, -30.4836, 52.5486, 0.67", "12.4549, -29.9295, 53.6074, 1.33", "13.5409, -28.6281, 56.0343, 0.67", "14.8494, -27.224, 58.9827, 0.67", "15.5513, -26.5523, 60.5063, 1.33", "16.5798, -25.8221, 62.5325, 0.33", "17.6106, -25.3052, 64.4112, 0.67", "18.4906, -24.9281, 65.8277, 0.33", "19.4134, -24.6118, 67.0666, 0.67", "20.1545, -24.395, 67.916, 0.33", "20.9477, -24.2339, 68.8923, 0.67", "23.0975, -23.8193, 72.2474, 0.67" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "1.85752, -37.6166, 35.7209, 0.67", "-1.03131, -40.4966, 39.9327, 0.67", "-3.56161, -43.0192, 43.6218, 0.67", "-5.77805, -45.229, 46.8533, 0.67", "-8.08387, -47.5278, 50.2151, 0.33" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_40", "dend_37", "dend_32", "dend_25", "dend_0", "dend_39", "dend_38", "dend_36", "dend_33", "dend_29", "dend_26", "dend_6", "dend_1", "dend_35", "dend_34", "dend_31", "dend_30", "dend_28", "dend_27", "dend_16", "dend_7", "dend_3", "dend_2", "dend_18", "dend_17", "dend_11", "dend_8", "dend_5", "dend_4", "dend_24", "dend_19", "dend_15", "dend_12", "dend_10", "dend_9", "dend_23", "dend_20", "dend_14", "dend_13", "dend_22", "dend_21" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_40", "dend_37", "dend_32", "dend_25", "dend_0", "dend_39", "dend_38", "dend_36", "dend_33", "dend_29", "dend_26", "dend_6", "dend_1", "dend_35", "dend_34", "dend_31", "dend_30", "dend_28", "dend_27", "dend_16", "dend_7", "dend_3", "dend_2", "dend_18", "dend_17", "dend_11", "dend_8", "dend_5", "dend_4", "dend_24", "dend_19", "dend_15", "dend_12", "dend_10", "dend_9", "dend_23", "dend_20", "dend_14", "dend_13", "dend_22", "dend_21" ]
  }, {
    "name" : "ModelViewParmSubset_5",
    "groups" : [ ],
    "sections" : [ "dend_40", "dend_37", "dend_32", "dend_25", "dend_0", "axon_0", "dend_39", "dend_38", "dend_36", "dend_33", "dend_29", "dend_26", "dend_6", "dend_1", "axon_1", "dend_35", "dend_34", "dend_31", "dend_30", "dend_28", "dend_27", "dend_16", "dend_7", "dend_3", "dend_2", "dend_18", "dend_17", "dend_11", "dend_8", "dend_5", "dend_4", "dend_24", "dend_19", "dend_15", "dend_12", "dend_10", "dend_9", "dend_23", "dend_20", "dend_14", "dend_13", "dend_22", "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_40" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_39" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_38" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_36" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_33" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_35" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_34" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_31" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_35",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_36",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_37",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_38",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_41",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_42",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_43",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_32" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_37" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_40",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_39",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_44",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30", "dend_31", "dend_32", "dend_33", "dend_34", "dend_35", "dend_36", "dend_37", "dend_38", "dend_39", "dend_40" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_40", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_25", "dend_0", "axon_0", "axon_0", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_39", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_6", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_16", "dend_16", "dend_16", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_18", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_11", "dend_11", "dend_11", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_19", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_20", "dend_20", "dend_20", "dend_20", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_21", "dend_21", "dend_21", "dend_21" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.993125",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.005611",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.068459995",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.517764",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "6.3E-5",
    "erev" : "-64.6017"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "3.45E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.077616",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.002099",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "1.13999995E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.26087198",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "2.0E-5",
    "erev" : "-69.78141"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.395881",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009986",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "5.0100003E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.009728",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "2.7999999E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cACint209_L4_BTC_6909c18187_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_40, id: dend_40, parent: soma_0
create dend_40
public dend_40
// Section: dend_37, id: dend_37, parent: soma_0
create dend_37
public dend_37
// Section: dend_32, id: dend_32, parent: soma_0
create dend_32
public dend_32
// Section: dend_25, id: dend_25, parent: soma_0
create dend_25
public dend_25
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_39, id: dend_39, parent: dend_37
create dend_39
public dend_39
// Section: dend_38, id: dend_38, parent: dend_37
create dend_38
public dend_38
// Section: dend_36, id: dend_36, parent: dend_32
create dend_36
public dend_36
// Section: dend_33, id: dend_33, parent: dend_32
create dend_33
public dend_33
// Section: dend_29, id: dend_29, parent: dend_25
create dend_29
public dend_29
// Section: dend_26, id: dend_26, parent: dend_25
create dend_26
public dend_26
// Section: dend_6, id: dend_6, parent: dend_0
create dend_6
public dend_6
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_35, id: dend_35, parent: dend_33
create dend_35
public dend_35
// Section: dend_34, id: dend_34, parent: dend_33
create dend_34
public dend_34
// Section: dend_31, id: dend_31, parent: dend_29
create dend_31
public dend_31
// Section: dend_30, id: dend_30, parent: dend_29
create dend_30
public dend_30
// Section: dend_28, id: dend_28, parent: dend_26
create dend_28
public dend_28
// Section: dend_27, id: dend_27, parent: dend_26
create dend_27
public dend_27
// Section: dend_16, id: dend_16, parent: dend_6
create dend_16
public dend_16
// Section: dend_7, id: dend_7, parent: dend_6
create dend_7
public dend_7
// Section: dend_3, id: dend_3, parent: dend_1
create dend_3
public dend_3
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_18, id: dend_18, parent: dend_16
create dend_18
public dend_18
// Section: dend_17, id: dend_17, parent: dend_16
create dend_17
public dend_17
// Section: dend_11, id: dend_11, parent: dend_7
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_5, id: dend_5, parent: dend_3
create dend_5
public dend_5
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_24, id: dend_24, parent: dend_18
create dend_24
public dend_24
// Section: dend_19, id: dend_19, parent: dend_18
create dend_19
public dend_19
// Section: dend_15, id: dend_15, parent: dend_11
create dend_15
public dend_15
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9
// Section: dend_23, id: dend_23, parent: dend_19
create dend_23
public dend_23
// Section: dend_20, id: dend_20, parent: dend_19
create dend_20
public dend_20
// Section: dend_14, id: dend_14, parent: dend_12
create dend_14
public dend_14
// Section: dend_13, id: dend_13, parent: dend_12
create dend_13
public dend_13
// Section: dend_22, id: dend_22, parent: dend_20
create dend_22
public dend_22
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_40, dend_37, dend_32, dend_25, dend_0, dend_39, dend_38, dend_36, dend_33, dend_29, dend_26, dend_6, dend_1, dend_35, dend_34, dend_31, dend_30, dend_28, dend_27, dend_16, dend_7, dend_3, dend_2, dend_18, dend_17, dend_11, dend_8, dend_5, dend_4, dend_24, dend_19, dend_15, dend_12, dend_10, dend_9, dend_23, dend_20, dend_14, dend_13, dend_22, dend_21]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_40, dend_37, dend_32, dend_25, dend_0, dend_39, dend_38, dend_36, dend_33, dend_29, dend_26, dend_6, dend_1, dend_35, dend_34, dend_31, dend_30, dend_28, dend_27, dend_16, dend_7, dend_3, dend_2, dend_18, dend_17, dend_11, dend_8, dend_5, dend_4, dend_24, dend_19, dend_15, dend_12, dend_10, dend_9, dend_23, dend_20, dend_14, dend_13, dend_22, dend_21]}
objref ModelViewParmSubset_4
// Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_40, dend_37, dend_32, dend_25, dend_0, axon_0, dend_39, dend_38, dend_36, dend_33, dend_29, dend_26, dend_6, dend_1, axon_1, dend_35, dend_34, dend_31, dend_30, dend_28, dend_27, dend_16, dend_7, dend_3, dend_2, dend_18, dend_17, dend_11, dend_8, dend_5, dend_4, dend_24, dend_19, dend_15, dend_12, dend_10, dend_9, dend_23, dend_20, dend_14, dend_13, dend_22, dend_21]}
objref ModelViewParmSubset_5
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_40]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_39]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_38]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_36]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_33]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_35]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_34]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_31]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_35
// Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_36
// Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_37
// Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_38
// Group: {name=OneSecGrp_SectionRef_41, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_41
// Group: {name=OneSecGrp_SectionRef_42, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_42
// Group: {name=OneSecGrp_SectionRef_43, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_43
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_32]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_37]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_40
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_39
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_44, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_44
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36, dend_37, dend_38, dend_39, dend_40], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_25, dend_0, axon_0, axon_0, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_26, dend_26, dend_26, dend_26, dend_26, dend_6, dend_1, dend_1, dend_1, axon_1, axon_1, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_16, dend_16, dend_16, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_18, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_19, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_20, dend_20, dend_20, dend_20, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_40(0), soma_0(0.4500008757444842)
    connect dend_37(0), soma_0(0.4500008757444842)
    connect dend_32(0), soma_0(0.4500008757444842)
    connect dend_25(0), soma_0(0.4500008757444842)
    connect dend_0(0), soma_0(0.4500008757444842)
    connect axon_0(0), soma_0(1.0)
    connect dend_39(0), dend_37(1.0)
    connect dend_38(0), dend_37(1.0)
    connect dend_36(0), dend_32(1.0)
    connect dend_33(0), dend_32(1.0)
    connect dend_29(0), dend_25(1.0)
    connect dend_26(0), dend_25(1.0)
    connect dend_6(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_35(0), dend_33(1.0)
    connect dend_34(0), dend_33(1.0)
    connect dend_31(0), dend_29(1.0)
    connect dend_30(0), dend_29(1.0)
    connect dend_28(0), dend_26(1.0)
    connect dend_27(0), dend_26(1.0)
    connect dend_16(0), dend_6(1.0)
    connect dend_7(0), dend_6(1.0)
    connect dend_3(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_18(0), dend_16(1.0)
    connect dend_17(0), dend_16(1.0)
    connect dend_11(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_5(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_24(0), dend_18(1.0)
    connect dend_19(0), dend_18(1.0)
    connect dend_15(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)
    connect dend_23(0), dend_19(1.0)
    connect dend_20(0), dend_19(1.0)
    connect dend_14(0), dend_12(1.0)
    connect dend_13(0), dend_12(1.0)
    connect dend_22(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -1.10901, 8.17427, -3.38986, 2.59058 ) }
    soma_0 { pt3dadd( -1.02513, 7.19062, -3.06257, 4.73751 ) }
    soma_0 { pt3dadd( -0.941247, 6.20697, -2.73528, 6.32924 ) }
    soma_0 { pt3dadd( -0.857366, 5.22332, -2.408, 7.36132 ) }
    soma_0 { pt3dadd( -0.773484, 4.23967, -2.08071, 9.22299 ) }
    soma_0 { pt3dadd( -0.689602, 3.25602, -1.75342, 10.2547 ) }
    soma_0 { pt3dadd( -0.605721, 2.27237, -1.42613, 10.8399 ) }
    soma_0 { pt3dadd( -0.521839, 1.28871, -1.09885, 11.0364 ) }
    soma_0 { pt3dadd( -0.437957, 0.305064, -0.771561, 11.233 ) }
    soma_0 { pt3dadd( -0.354076, -0.678586, -0.444273, 11.4012 ) }
    soma_0 { pt3dadd( -0.270194, -1.66224, -0.116986, 10.7587 ) }
    soma_0 { pt3dadd( -0.186312, -2.64589, 0.210301, 10.0838 ) }
    soma_0 { pt3dadd( -0.102431, -3.62954, 0.537588, 9.4089 ) }
    soma_0 { pt3dadd( -0.018549, -4.61319, 0.864875, 8.86981 ) }
    soma_0 { pt3dadd( 0.0653327, -5.59684, 1.19216, 8.72262 ) }
    soma_0 { pt3dadd( 0.149214, -6.58049, 1.51945, 8.42438 ) }
    soma_0 { pt3dadd( 0.233096, -7.56414, 1.84674, 7.90042 ) }
    soma_0 { pt3dadd( 0.316978, -8.54779, 2.17402, 7.02226 ) }
    soma_0 { pt3dadd( 0.400859, -9.53144, 2.50131, 6.10711 ) }
    soma_0 { pt3dadd( 0.484741, -10.5151, 2.8286, 5.19196 ) }
    soma_0 { pt3dadd( 0.568623, -11.4987, 3.15589, 3.05014 ) }
    // Section: dend_40, id: dend_40, parent: soma_0 (entry count 21/100)
    dend_40 { pt3dclear() }
    dend_40 { pt3dadd( -4.40148, -1.86723, -9.60359, 0.67 ) }
    dend_40 { pt3dadd( -7.45137, -2.1166, -12.7482, 0.67 ) }
    dend_40 { pt3dadd( -10.5597, -2.20489, -15.6665, 0.67 ) }
    dend_40 { pt3dadd( -10.5597, -2.20489, -15.6665, 0.67 ) }
    dend_40 { pt3dadd( -12.1913, -2.20833, -16.7693, 1.33 ) }
    dend_40 { pt3dadd( -19.0159, -1.84914, -21.5952, 0.33 ) }
    dend_40 { pt3dadd( -20.0541, -1.83516, -22.5072, 0.33 ) }
    dend_40 { pt3dadd( -22.1527, -1.84329, -24.7911, 1.33 ) }
    dend_40 { pt3dadd( -24.2648, -1.99423, -27.4628, 0.33 ) }
    dend_40 { pt3dadd( -24.959, -2.09589, -28.3905, 1.33 ) }
    dend_40 { pt3dadd( -29.5819, -3.15944, -35.2023, 0.67 ) }
    dend_40 { pt3dadd( -34.9905, -4.88993, -43.814, 0.33 ) }
    dend_40 { pt3dadd( -37.2396, -5.69014, -47.6755, 0.67 ) }
    dend_40 { pt3dadd( -40.4241, -6.95731, -53.3865, 0.33 ) }
    dend_40 { pt3dadd( -41.0729, -7.23433, -54.5752, 0.67 ) }
    dend_40 { pt3dadd( -44.0296, -8.56433, -59.7887, 0.33 ) }
    dend_40 { pt3dadd( -45.3897, -9.19229, -62.0013, 1.33 ) }
    dend_40 { pt3dadd( -48.1134, -10.2208, -65.8893, 0.33 ) }
    dend_40 { pt3dadd( -49.5888, -10.7182, -67.9364, 1.33 ) }
    dend_40 { pt3dadd( -54.4911, -12.3022, -74.442, 0.33 ) }
    dend_40 { pt3dadd( -55.0159, -12.4678, -75.1106, 0.67 ) }
    dend_40 { pt3dadd( -57.7214, -13.3274, -78.2523, 0.33 ) }
    dend_40 { pt3dadd( -58.2605, -13.5092, -78.9205, 1.33 ) }
    dend_40 { pt3dadd( -62.4496, -15.173, -84.5998, 0.33 ) }
    dend_40 { pt3dadd( -63.693, -15.7092, -86.4139, 0.67 ) }
    dend_40 { pt3dadd( -64.7548, -16.1275, -87.9939, 0.33 ) }
    dend_40 { pt3dadd( -65.5823, -16.4136, -89.2488, 1.33 ) }
    dend_40 { pt3dadd( -69.2556, -17.4132, -94.7944, 0.33 ) }
    dend_40 { pt3dadd( -69.6452, -17.5066, -95.3854, 0.33 ) }
    dend_40 { pt3dadd( -71.0304, -17.8313, -97.5554, 1.33 ) }
    dend_40 { pt3dadd( -74.2735, -18.6909, -103.039, 0.33 ) }
    dend_40 { pt3dadd( -74.8039, -18.8972, -104.055, 1.33 ) }
    dend_40 { pt3dadd( -77.8063, -20.4119, -110.138, 0.33 ) }
    dend_40 { pt3dadd( -78.165, -20.637, -110.882, 0.67 ) }
    dend_40 { pt3dadd( -80.947, -22.7124, -117.003, 0.33 ) }
    dend_40 { pt3dadd( -81.566, -23.2736, -118.482, 1.33 ) }
    dend_40 { pt3dadd( -84.031, -25.9251, -125.115, 0.33 ) }
    dend_40 { pt3dadd( -84.2741, -26.2061, -125.794, 1.33 ) }
    dend_40 { pt3dadd( -85.6567, -27.8911, -129.899, 0.33 ) }
    dend_40 { pt3dadd( -86.1843, -28.4641, -131.392, 0.67 ) }
    dend_40 { pt3dadd( -88.5365, -30.9099, -137.921, 0.33 ) }
    dend_40 { pt3dadd( -90.3616, -32.6081, -142.781, 0.67 ) }
    dend_40 { pt3dadd( -91.1073, -33.1874, -144.659, 0.33 ) }
    dend_40 { pt3dadd( -92.5174, -34.2604, -148.317, 0.67 ) }
    dend_40 { pt3dadd( -94.676, -35.9532, -154.203, 0.33 ) }
    // Section: dend_37, id: dend_37, parent: soma_0 (entry count 66/100)
    dend_37 { pt3dclear() }
    dend_37 { pt3dadd( -2.84148, 4.50627, -11.1036, 0.67 ) }
    dend_37 { pt3dadd( -3.13507, 5.27388, -12.2462, 0.67 ) }
    dend_37 { pt3dadd( -3.72083, 7.19216, -14.4068, 0.67 ) }
    dend_37 { pt3dadd( -4.70076, 9.92129, -17.475, 0.67 ) }
    dend_37 { pt3dadd( -5.45999, 12.0357, -19.8522, 0.67 ) }
    dend_37 { pt3dadd( -5.78237, 12.9336, -20.8616, 0.67 ) }
    dend_37 { pt3dadd( -6.19672, 14.0875, -22.159, 0.67 ) }
    dend_37 { pt3dadd( -7.16737, 17.6042, -25.9384, 0.67 ) }
    dend_37 { pt3dadd( -7.86597, 20.9625, -29.1985, 1.33 ) }
    // Section: dend_32, id: dend_32, parent: soma_0 (entry count 75/100)
    dend_32 { pt3dclear() }
    dend_32 { pt3dadd( -2.21148, 5.86077, -10.3036, 0.67 ) }
    dend_32 { pt3dadd( -0.969696, 8.04667, -11.6976, 0.67 ) }
    dend_32 { pt3dadd( -0.576647, 8.7639, -12.1413, 0.67 ) }
    dend_32 { pt3dadd( 0.0866905, 9.97436, -12.8902, 1.33 ) }
    dend_32 { pt3dadd( 2.5048, 14.3869, -15.6202, 0.67 ) }
    dend_32 { pt3dadd( 3.64765, 16.4724, -16.9104, 0.67 ) }
    dend_32 { pt3dadd( 4.25844, 17.5869, -17.6, 0.67 ) }
    dend_32 { pt3dadd( 4.99234, 19.0346, -18.6312, 1.33 ) }
    // Section: dend_25, id: dend_25, parent: soma_0 (entry count 83/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 4.30852, 6.07077, 7.4864, 2.0 ) }
    dend_25 { pt3dadd( 4.79321, 6.4559, 7.74839, 2.0 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 85/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -0.571479, -12.2727, 6.4864, 4.0 ) }
    dend_0 { pt3dadd( -0.628534, -14.5268, 6.4864, 4.0 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 87/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 0.568623, -11.4987, 3.15589, 0.469313 ) }
    axon_0 { pt3dadd( 1.84314, -26.4445, 3.15589, 0.469313 ) }
    axon_0 { pt3dadd( 3.11765, -41.3902, 3.15589, 0.469313 ) }
    // Section: dend_39, id: dend_39, parent: dend_37 (entry count 90/100)
    dend_39 { pt3dclear() }
    dend_39 { pt3dadd( -7.86597, 20.9625, -29.1985, 0.33 ) }
    dend_39 { pt3dadd( -8.06617, 22.9211, -35.8588, 0.33 ) }
    dend_39 { pt3dadd( -8.0768, 23.1098, -36.413, 1.33 ) }
    dend_39 { pt3dadd( -8.09588, 24.3978, -39.9009, 0.33 ) }
    dend_39 { pt3dadd( -8.10078, 24.637, -40.4465, 1.33 ) }
    dend_39 { pt3dadd( -8.13044, 26.024, -43.2672, 0.33 ) }
    dend_39 { pt3dadd( -8.13837, 26.1995, -43.5886, 0.67 ) }
    dend_39 { pt3dadd( -8.26958, 27.6015, -45.5496, 0.33 ) }
    dend_39 { pt3dadd( -8.30075, 27.8221, -45.843, 1.33 ) }
    dend_39 { pt3dadd( -8.49293, 29.1426, -47.4688, 0.33 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_39 { pt3dadd( -8.68821, 30.5212, -49.1551, 1.33 ) }
    dend_39 { pt3dadd( -8.96457, 32.4481, -51.4407, 0.33 ) }
    dend_39 { pt3dadd( -9.19939, 34.0507, -53.386, 1.33 ) }
    dend_39 { pt3dadd( -9.48048, 35.9487, -55.6884, 0.33 ) }
    dend_39 { pt3dadd( -9.52211, 36.2848, -56.0874, 1.33 ) }
    dend_39 { pt3dadd( -9.61417, 37.4379, -57.4399, 0.33 ) }
    dend_39 { pt3dadd( -9.64736, 37.9738, -58.0264, 0.67 ) }
    dend_39 { pt3dadd( -9.74325, 40.8235, -61.2733, 0.33 ) }
    dend_39 { pt3dadd( -9.74431, 41.2159, -61.7108, 1.33 ) }
    dend_39 { pt3dadd( -9.73074, 42.2454, -62.9104, 0.33 ) }
    dend_39 { pt3dadd( -9.73049, 42.4789, -63.1965, 1.33 ) }
    dend_39 { pt3dadd( -9.79307, 44.9522, -66.6372, 0.33 ) }
    dend_39 { pt3dadd( -9.86451, 46.3557, -68.7307, 1.33 ) }
    dend_39 { pt3dadd( -9.93189, 47.3258, -70.2619, 0.33 ) }
    dend_39 { pt3dadd( -10.0309, 48.1232, -71.6515, 0.67 ) }
    dend_39 { pt3dadd( -10.2645, 49.4976, -74.1735, 0.33 ) }
    dend_39 { pt3dadd( -10.6745, 51.5665, -77.7334, 0.67 ) }
    dend_39 { pt3dadd( -11.0222, 53.1826, -80.3366, 0.33 ) }
    dend_39 { pt3dadd( -11.2933, 54.0091, -81.5827, 0.67 ) }
    dend_39 { pt3dadd( -12.906, 57.7138, -86.9884, 0.33 ) }
    dend_39 { pt3dadd( -13.0142, 57.9125, -87.2635, 0.67 ) }
    dend_39 { pt3dadd( -14.1119, 59.5924, -89.4126, 0.33 ) }
    dend_39 { pt3dadd( -14.3651, 59.9398, -89.8393, 0.67 ) }
    dend_39 { pt3dadd( -16.2371, 62.3309, -93.0651, 0.33 ) }
    dend_39 { pt3dadd( -16.5719, 62.8327, -93.777, 0.67 ) }
    dend_39 { pt3dadd( -17.4931, 64.4373, -96.2355, 0.33 ) }
    dend_39 { pt3dadd( -17.5999, 64.7385, -96.7432, 0.67 ) }
    dend_39 { pt3dadd( -17.7242, 66.5955, -100.479, 0.33 ) }
    dend_39 { pt3dadd( -17.4748, 67.8161, -102.751, 0.67 ) }
    dend_39 { pt3dadd( -16.563, 69.6803, -105.968, 0.33 ) }
    dend_39 { pt3dadd( -16.4907, 69.8034, -106.177, 0.67 ) }
    dend_39 { pt3dadd( -15.2323, 71.6039, -108.977, 0.33 ) }
    dend_39 { pt3dadd( -13.7607, 73.5237, -111.84, 1.33 ) }
    dend_39 { pt3dadd( -11.3018, 76.4255, -115.298, 0.33 ) }
    dend_39 { pt3dadd( -11.1648, 76.5859, -115.454, 0.67 ) }
    // Section: dend_38, id: dend_38, parent: dend_37 (entry count 35/100)
    dend_38 { pt3dclear() }
    dend_38 { pt3dadd( -7.86597, 20.9625, -29.1985, 0.33 ) }
    dend_38 { pt3dadd( -10.49, 20.3036, -32.0037, 0.33 ) }
    dend_38 { pt3dadd( -11.5504, 20.1506, -32.907, 1.33 ) }
    dend_38 { pt3dadd( -15.3621, 19.7757, -35.7725, 0.33 ) }
    dend_38 { pt3dadd( -16.2714, 19.7352, -36.4776, 0.67 ) }
    dend_38 { pt3dadd( -18.8893, 19.7258, -38.5153, 0.33 ) }
    dend_38 { pt3dadd( -21.4595, 19.8077, -40.5457, 1.33 ) }
    dend_38 { pt3dadd( -26.1254, 20.2949, -43.9163, 0.33 ) }
    dend_38 { pt3dadd( -26.9856, 20.4518, -44.5669, 1.33 ) }
    dend_38 { pt3dadd( -30.1947, 21.3148, -46.9176, 0.33 ) }
    dend_38 { pt3dadd( -30.7692, 21.5122, -47.3836, 0.67 ) }
    dend_38 { pt3dadd( -33.0118, 22.4487, -49.3312, 0.33 ) }
    dend_38 { pt3dadd( -33.8164, 22.8138, -50.0306, 0.67 ) }
    dend_38 { pt3dadd( -36.3071, 24.0319, -52.0351, 0.33 ) }
    dend_38 { pt3dadd( -37.1386, 24.4557, -52.6949, 1.33 ) }
    dend_38 { pt3dadd( -40.3191, 26.1149, -55.089, 0.33 ) }
    dend_38 { pt3dadd( -41.4907, 26.7701, -56.0041, 1.33 ) }
    dend_38 { pt3dadd( -46.5633, 29.8413, -60.0051, 0.33 ) }
    dend_38 { pt3dadd( -47.6586, 30.5376, -60.9122, 1.33 ) }
    dend_38 { pt3dadd( -50.2309, 32.2522, -63.0521, 0.33 ) }
    dend_38 { pt3dadd( -50.4875, 32.447, -63.2807, 0.67 ) }
    dend_38 { pt3dadd( -52.9166, 34.5132, -65.5156, 0.33 ) }
    dend_38 { pt3dadd( -53.386, 34.9473, -65.9639, 0.67 ) }
    dend_38 { pt3dadd( -55.1972, 36.7985, -67.6772, 0.33 ) }
    dend_38 { pt3dadd( -55.6964, 37.2917, -68.1072, 2.0 ) }
    dend_38 { pt3dadd( -61.3534, 42.6611, -72.6795, 0.33 ) }
    dend_38 { pt3dadd( -61.7502, 43.0151, -72.9864, 0.67 ) }
    dend_38 { pt3dadd( -63.3976, 44.4121, -74.1625, 0.33 ) }
    dend_38 { pt3dadd( -63.822, 44.7546, -74.4489, 0.67 ) }
    dend_38 { pt3dadd( -65.0314, 45.6965, -75.3238, 0.33 ) }
    dend_38 { pt3dadd( -66.2996, 46.6761, -76.2505, 0.67 ) }
    dend_38 { pt3dadd( -69.7726, 49.2916, -78.7387, 0.33 ) }
    dend_38 { pt3dadd( -70.7251, 50.0374, -79.4234, 0.67 ) }
    dend_38 { pt3dadd( -74.4036, 53.0566, -82.1124, 0.33 ) }
    dend_38 { pt3dadd( -77.4419, 55.7322, -84.4508, 1.33 ) }
    dend_38 { pt3dadd( -79.2265, 57.415, -85.8602, 0.33 ) }
    dend_38 { pt3dadd( -79.5636, 57.7526, -86.1412, 0.67 ) }
    dend_38 { pt3dadd( -80.6156, 58.7921, -87.1237, 0.33 ) }
    dend_38 { pt3dadd( -80.6661, 58.84, -87.1688, 0.67 ) }
    dend_38 { pt3dadd( -83.375, 60.7744, -89.2204, 0.33 ) }
    dend_38 { pt3dadd( -84.0547, 61.1245, -89.6331, 1.33 ) }
    dend_38 { pt3dadd( -86.7784, 62.1874, -91.7548, 0.33 ) }
    dend_38 { pt3dadd( -88.1998, 62.6779, -92.8774, 0.33 ) }
    dend_38 { pt3dadd( -91.2916, 63.5145, -95.3167, 0.67 ) }
    dend_38 { pt3dadd( -95.6241, 64.4529, -98.592, 0.33 ) }
    dend_38 { pt3dadd( -96.2985, 64.5232, -99.0488, 0.67 ) }
    dend_38 { pt3dadd( -100.609, 64.8565, -102.103, 0.33 ) }
    // Section: dend_36, id: dend_36, parent: dend_32 (entry count 82/100)
    dend_36 { pt3dclear() }
    dend_36 { pt3dadd( 4.99234, 19.0346, -18.6312, 0.33 ) }
    dend_36 { pt3dadd( 8.61798, 21.2863, -20.2598, 0.33 ) }
    dend_36 { pt3dadd( 10.3509, 22.4191, -21.0056, 0.67 ) }
    dend_36 { pt3dadd( 12.7174, 24.02, -22.0055, 0.33 ) }
    dend_36 { pt3dadd( 13.0337, 24.2412, -22.1844, 0.67 ) }
    dend_36 { pt3dadd( 15.2047, 25.8239, -23.4807, 0.33 ) }
    dend_36 { pt3dadd( 17.1721, 27.1549, -24.5082, 1.33 ) }
    dend_36 { pt3dadd( 20.9256, 29.5729, -26.0847, 0.33 ) }
    dend_36 { pt3dadd( 21.2608, 29.7868, -26.2398, 0.67 ) }
    dend_36 { pt3dadd( 28.1542, 34.28, -29.4163, 0.33 ) }
    dend_36 { pt3dadd( 29.8783, 35.4304, -30.1877, 2.0 ) }
    dend_36 { pt3dadd( 36.1871, 39.7155, -32.9207, 0.33 ) }
    dend_36 { pt3dadd( 39.2357, 41.8332, -34.2432, 2.0 ) }
    dend_36 { pt3dadd( 48.3074, 48.3859, -38.2765, 0.33 ) }
    dend_36 { pt3dadd( 50.1875, 49.7975, -39.1802, 1.33 ) }
    dend_36 { pt3dadd( 53.0563, 52.0498, -40.6401, 0.33 ) }
    dend_36 { pt3dadd( 53.8716, 52.6972, -41.1631, 0.67 ) }
    dend_36 { pt3dadd( 57.4168, 55.6386, -44.0369, 0.33 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_36 { pt3dadd( 58.755, 56.6401, -45.3312, 0.67 ) }
    dend_36 { pt3dadd( 62.4427, 58.9713, -49.2065, 0.33 ) }
    dend_36 { pt3dadd( 63.425, 59.4735, -50.2435, 1.33 ) }
    dend_36 { pt3dadd( 67.1432, 60.9978, -54.0576, 0.33 ) }
    dend_36 { pt3dadd( 68.1693, 61.3104, -55.0682, 1.33 ) }
    dend_36 { pt3dadd( 72.904, 62.274, -59.4069, 0.33 ) }
    dend_36 { pt3dadd( 73.2045, 62.3121, -59.6571, 0.67 ) }
    dend_36 { pt3dadd( 76.726, 62.5649, -62.3009, 0.33 ) }
    dend_36 { pt3dadd( 78.5263, 62.6322, -63.5341, 1.33 ) }
    dend_36 { pt3dadd( 82.6824, 62.6504, -65.9683, 0.33 ) }
    dend_36 { pt3dadd( 83.6585, 62.6357, -66.576, 0.67 ) }
    dend_36 { pt3dadd( 87.9419, 62.5466, -69.2314, 0.33 ) }
    dend_36 { pt3dadd( 89.8519, 62.5158, -70.603, 1.33 ) }
    dend_36 { pt3dadd( 93.1055, 62.4985, -73.1937, 0.33 ) }
    dend_36 { pt3dadd( 94.5396, 62.544, -74.4529, 1.33 ) }
    dend_36 { pt3dadd( 101.061, 62.9402, -80.4547, 0.33 ) }
    dend_36 { pt3dadd( 101.909, 62.994, -81.2298, 1.33 ) }
    dend_36 { pt3dadd( 106.613, 63.3032, -85.5464, 0.33 ) }
    dend_36 { pt3dadd( 107.702, 63.3596, -86.5066, 0.67 ) }
    dend_36 { pt3dadd( 113.143, 63.569, -91.466, 0.33 ) }
    dend_36 { pt3dadd( 114.079, 63.5671, -92.313, 1.33 ) }
    dend_36 { pt3dadd( 119.563, 63.1999, -96.8325, 0.33 ) }
    dend_36 { pt3dadd( 120.455, 63.1, -97.5229, 0.67 ) }
    dend_36 { pt3dadd( 122.124, 62.8459, -98.6816, 0.33 ) }
    dend_36 { pt3dadd( 125.487, 62.233, -100.743, 0.67 ) }
    dend_36 { pt3dadd( 127.814, 61.7842, -101.897, 0.33 ) }
    dend_36 { pt3dadd( 128.524, 61.6696, -102.248, 0.67 ) }
    dend_36 { pt3dadd( 132.399, 61.148, -103.904, 0.33 ) }
    dend_36 { pt3dadd( 132.771, 61.1255, -104.078, 0.67 ) }
    dend_36 { pt3dadd( 137.582, 61.1263, -106.437, 0.33 ) }
    dend_36 { pt3dadd( 138.742, 61.165, -106.976, 0.67 ) }
    dend_36 { pt3dadd( 140.471, 61.3077, -107.905, 0.33 ) }
    dend_36 { pt3dadd( 143.486, 61.5086, -109.7, 0.67 ) }
    dend_36 { pt3dadd( 150.448, 61.9289, -114.279, 0.33 ) }
    dend_36 { pt3dadd( 151.604, 61.9799, -115.129, 0.67 ) }
    dend_36 { pt3dadd( 154.154, 62.1104, -117.177, 0.33 ) }
    dend_36 { pt3dadd( 155.926, 62.1787, -118.7, 1.33 ) }
    dend_36 { pt3dadd( 159.598, 62.2482, -121.938, 0.33 ) }
    dend_36 { pt3dadd( 160.022, 62.253, -122.336, 0.67 ) }
    dend_36 { pt3dadd( 165.09, 62.0686, -126.805, 0.33 ) }
    dend_36 { pt3dadd( 165.929, 61.9898, -127.586, 1.33 ) }
    dend_36 { pt3dadd( 168.966, 61.5911, -130.634, 0.33 ) }
    dend_36 { pt3dadd( 169.503, 61.4514, -131.211, 0.67 ) }
    dend_36 { pt3dadd( 171.718, 60.5675, -133.836, 0.33 ) }
    dend_36 { pt3dadd( 172.67, 59.926, -134.78, 0.67 ) }
    dend_36 { pt3dadd( 175.328, 57.3377, -136.784, 0.33 ) }
    dend_36 { pt3dadd( 175.328, 57.3377, -136.784, 1.33 ) }
    dend_36 { pt3dadd( 178.478, 53.2108, -138.014, 0.33 ) }
    dend_36 { pt3dadd( 179.149, 52.3252, -138.206, 1.33 ) }
    dend_36 { pt3dadd( 183.797, 46.2299, -139.019, 0.33 ) }
    dend_36 { pt3dadd( 184.05, 45.9172, -139.05, 0.67 ) }
    dend_36 { pt3dadd( 186.679, 43.1462, -139.232, 0.33 ) }
    dend_36 { pt3dadd( 187.108, 42.7551, -139.26, 0.67 ) }
    dend_36 { pt3dadd( 190.497, 40.4084, -139.455, 0.33 ) }
    dend_36 { pt3dadd( 192.921, 39.0865, -139.729, 0.33 ) }
    dend_36 { pt3dadd( 193.65, 38.8083, -139.931, 0.67 ) }
    dend_36 { pt3dadd( 199.224, 37.159, -141.836, 0.33 ) }
    dend_36 { pt3dadd( 199.618, 37.1271, -141.97, 0.67 ) }
    dend_36 { pt3dadd( 204.026, 37.3889, -143.46, 0.33 ) }
    dend_36 { pt3dadd( 205.077, 37.6613, -143.807, 0.67 ) }
    dend_36 { pt3dadd( 211.333, 40.2063, -145.835, 0.33 ) }
    dend_36 { pt3dadd( 212.418, 40.7452, -146.192, 1.33 ) }
    dend_36 { pt3dadd( 219.608, 45.4481, -148.598, 0.33 ) }
    dend_36 { pt3dadd( 220.639, 46.1953, -148.923, 1.33 ) }
    dend_36 { pt3dadd( 223.577, 48.7299, -149.707, 0.33 ) }
    dend_36 { pt3dadd( 223.935, 49.055, -149.756, 0.67 ) }
    // Section: dend_33, id: dend_33, parent: dend_32 (entry count 66/100)
    dend_33 { pt3dclear() }
    dend_33 { pt3dadd( 4.99234, 19.0346, -18.6312, 0.33 ) }
    dend_33 { pt3dadd( 6.96361, 23.509, -25.8322, 0.33 ) }
    dend_33 { pt3dadd( 7.29331, 24.2681, -26.9787, 0.67 ) }
    dend_33 { pt3dadd( 8.31944, 27.4924, -31.6936, 0.33 ) }
    dend_33 { pt3dadd( 8.77816, 29.3289, -34.247, 0.33 ) }
    dend_33 { pt3dadd( 8.84562, 29.9745, -35.1124, 0.67 ) }
    dend_33 { pt3dadd( 8.89174, 32.2795, -38.0363, 0.33 ) }
    dend_33 { pt3dadd( 8.76454, 33.3516, -39.1328, 0.67 ) }
    dend_33 { pt3dadd( 8.25733, 35.6502, -41.5064, 0.33 ) }
    dend_33 { pt3dadd( 8.03549, 36.3528, -42.2444, 1.33 ) }
    dend_33 { pt3dadd( 6.72494, 39.8582, -46.0927, 0.33 ) }
    dend_33 { pt3dadd( 6.43258, 40.6891, -47.1041, 1.33 ) }
    dend_33 { pt3dadd( 5.33571, 44.1686, -51.5865, 0.33 ) }
    dend_33 { pt3dadd( 4.79299, 46.1915, -54.2525, 2.0 ) }
    dend_33 { pt3dadd( 4.11334, 49.4217, -58.6293, 0.33 ) }
    dend_33 { pt3dadd( 4.03023, 49.8544, -59.2447, 0.67 ) }
    dend_33 { pt3dadd( 3.4452, 54.2774, -65.8653, 0.33 ) }
    dend_33 { pt3dadd( 3.2929, 55.5165, -67.8758, 2.0 ) }
    // Section: dend_29, id: dend_29, parent: dend_25 (entry count 84/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 4.79321, 6.4559, 7.74839, 0.67 ) }
    dend_29 { pt3dadd( 6.38687, 8.06948, 7.62662, 0.67 ) }
    dend_29 { pt3dadd( 7.16892, 8.86129, 7.56685, 0.33 ) }
    dend_29 { pt3dadd( 8.94621, 10.6608, 7.43104, 1.33 ) }
    dend_29 { pt3dadd( 12.552, 14.3116, 7.15549, 0.67 ) }
    dend_29 { pt3dadd( 16.2585, 18.0644, 6.87223, 0.67 ) }
    dend_29 { pt3dadd( 17.403, 19.2231, 6.78478, 1.33 ) }
    // Section: dend_26, id: dend_26, parent: dend_25 (entry count 91/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 4.79321, 6.4559, 7.74839, 0.67 ) }
    dend_26 { pt3dadd( 4.97726, 7.97381, 8.52524, 0.67 ) }
    dend_26 { pt3dadd( 5.14921, 9.3919, 9.25099, 0.67 ) }
    dend_26 { pt3dadd( 5.31573, 10.7652, 9.95383, 0.67 ) }
    dend_26 { pt3dadd( 5.65626, 13.5736, 11.3911, 0.67 ) }
    dend_26 { pt3dadd( 5.82428, 14.9593, 12.1003, 1.33 ) }
    // Section: dend_6, id: dend_6, parent: dend_0 (entry count 97/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -0.628534, -14.5268, 6.4864, 3.33 ) }
    dend_6 { pt3dadd( 0.853976, -17.5046, 6.15409, 3.33 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 99/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -0.628534, -14.5268, 6.4864, 1.33 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_1 { pt3dadd( -3.62646, -20.6322, 6.42326, 1.33 ) }
    dend_1 { pt3dadd( -5.38061, -24.2046, 6.38631, 1.33 ) }
    dend_1 { pt3dadd( -5.84024, -25.1406, 6.37664, 1.33 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 3/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 3.11765, -41.3902, 3.15589, 0.67 ) }
    axon_1 { pt3dadd( 4.39217, -56.336, 3.15589, 0.67 ) }
    axon_1 { pt3dadd( 5.66668, -71.2817, 3.15589, 0.67 ) }
    // Section: dend_35, id: dend_35, parent: dend_33 (entry count 6/100)
    dend_35 { pt3dclear() }
    dend_35 { pt3dadd( 3.2929, 55.5165, -67.8758, 0.33 ) }
    dend_35 { pt3dadd( 4.35425, 58.1976, -68.5429, 0.33 ) }
    dend_35 { pt3dadd( 4.73404, 58.8888, -68.8449, 0.67 ) }
    dend_35 { pt3dadd( 6.36304, 61.5673, -70.1612, 0.33 ) }
    dend_35 { pt3dadd( 6.83942, 62.1969, -70.4623, 0.67 ) }
    dend_35 { pt3dadd( 9.16782, 65.0772, -71.8181, 0.33 ) }
    dend_35 { pt3dadd( 9.39231, 65.3366, -71.9359, 0.67 ) }
    dend_35 { pt3dadd( 13.506, 69.7605, -74.1333, 0.33 ) }
    dend_35 { pt3dadd( 14.0469, 70.27, -74.4962, 1.33 ) }
    dend_35 { pt3dadd( 17.7019, 73.3595, -77.2001, 0.33 ) }
    dend_35 { pt3dadd( 17.9361, 73.5494, -77.3939, 0.67 ) }
    dend_35 { pt3dadd( 19.6211, 74.8873, -78.8503, 0.33 ) }
    dend_35 { pt3dadd( 20.544, 75.6532, -79.7036, 0.67 ) }
    dend_35 { pt3dadd( 25.8742, 80.4142, -85.1253, 0.33 ) }
    dend_35 { pt3dadd( 26.5276, 81.021, -85.8777, 0.67 ) }
    dend_35 { pt3dadd( 29.769, 84.1987, -90.2573, 0.33 ) }
    dend_35 { pt3dadd( 30.5269, 84.8971, -91.3058, 1.33 ) }
    dend_35 { pt3dadd( 31.3025, 85.5781, -92.4587, 0.33 ) }
    dend_35 { pt3dadd( 31.6806, 85.8658, -93.0693, 0.67 ) }
    dend_35 { pt3dadd( 34.5011, 87.7346, -97.6594, 0.33 ) }
    dend_35 { pt3dadd( 35.8155, 88.4399, -99.8145, 0.67 ) }
    dend_35 { pt3dadd( 39.2464, 90.0221, -105.421, 0.33 ) }
    dend_35 { pt3dadd( 40.6959, 90.5822, -107.764, 1.33 ) }
    dend_35 { pt3dadd( 45.1942, 92.0817, -114.98, 0.33 ) }
    dend_35 { pt3dadd( 46.8011, 92.5473, -117.51, 1.33 ) }
    dend_35 { pt3dadd( 51.7634, 93.7365, -124.972, 0.33 ) }
    dend_35 { pt3dadd( 52.3893, 93.8635, -125.924, 0.67 ) }
    dend_35 { pt3dadd( 53.775, 94.1067, -128.277, 0.33 ) }
    dend_35 { pt3dadd( 54.6436, 94.1931, -129.984, 0.67 ) }
    dend_35 { pt3dadd( 56.2151, 94.2321, -133.265, 0.33 ) }
    dend_35 { pt3dadd( 56.6418, 94.219, -134.278, 0.67 ) }
    dend_35 { pt3dadd( 58.4367, 93.9379, -139.625, 0.33 ) }
    dend_35 { pt3dadd( 59.5758, 93.7063, -143.388, 0.67 ) }
    dend_35 { pt3dadd( 61.0375, 93.4563, -149.02, 0.33 ) }
    dend_35 { pt3dadd( 62.3943, 93.0024, -155.338, 0.67 ) }
    // Section: dend_34, id: dend_34, parent: dend_33 (entry count 41/100)
    dend_34 { pt3dclear() }
    dend_34 { pt3dadd( 3.2929, 55.5165, -67.8758, 0.33 ) }
    dend_34 { pt3dadd( 1.52573, 57.2048, -69.8568, 0.33 ) }
    dend_34 { pt3dadd( 1.0419, 57.6912, -70.4443, 0.67 ) }
    dend_34 { pt3dadd( -0.651417, 59.5255, -73.0544, 0.33 ) }
    dend_34 { pt3dadd( -1.1187, 60.1473, -73.9388, 0.67 ) }
    dend_34 { pt3dadd( -2.64925, 62.3547, -77.0645, 0.33 ) }
    dend_34 { pt3dadd( -3.01074, 62.9191, -77.8436, 0.67 ) }
    dend_34 { pt3dadd( -4.05146, 64.7252, -80.4314, 0.33 ) }
    dend_34 { pt3dadd( -5.24068, 67.1519, -83.7423, 1.33 ) }
    dend_34 { pt3dadd( -6.218, 69.5498, -86.7924, 0.33 ) }
    dend_34 { pt3dadd( -6.27716, 69.7124, -87.0075, 1.33 ) }
    dend_34 { pt3dadd( -7.02011, 71.939, -89.8425, 0.33 ) }
    dend_34 { pt3dadd( -7.14308, 72.336, -90.3291, 1.33 ) }
    dend_34 { pt3dadd( -7.418, 73.2972, -91.5131, 0.33 ) }
    dend_34 { pt3dadd( -7.46397, 73.4988, -91.7301, 0.67 ) }
    dend_34 { pt3dadd( -8.40939, 78.3405, -96.7526, 0.33 ) }
    dend_34 { pt3dadd( -8.5512, 79.1785, -97.6251, 0.67 ) }
    dend_34 { pt3dadd( -8.74108, 80.4456, -98.9488, 0.33 ) }
    dend_34 { pt3dadd( -9.23106, 83.5692, -102.136, 1.33 ) }
    dend_34 { pt3dadd( -9.93305, 87.9172, -106.526, 0.33 ) }
    dend_34 { pt3dadd( -9.99013, 88.3682, -106.981, 0.67 ) }
    dend_34 { pt3dadd( -10.2586, 91.8838, -110.406, 0.33 ) }
    dend_34 { pt3dadd( -10.2586, 91.8838, -110.406, 0.67 ) }
    dend_34 { pt3dadd( -10.4882, 95.3975, -114.123, 0.33 ) }
    dend_34 { pt3dadd( -10.5686, 96.4151, -115.148, 1.33 ) }
    dend_34 { pt3dadd( -10.8611, 99.4107, -118.255, 0.33 ) }
    dend_34 { pt3dadd( -10.9087, 99.8746, -118.697, 0.67 ) }
    dend_34 { pt3dadd( -11.271, 103.399, -121.643, 0.33 ) }
    dend_34 { pt3dadd( -11.3524, 104.045, -122.139, 0.67 ) }
    dend_34 { pt3dadd( -11.8296, 107.124, -124.262, 0.33 ) }
    dend_34 { pt3dadd( -11.9601, 107.816, -124.692, 1.33 ) }
    dend_34 { pt3dadd( -12.3563, 109.506, -125.596, 0.33 ) }
    dend_34 { pt3dadd( -12.5043, 110.076, -125.892, 0.67 ) }
    dend_34 { pt3dadd( -13.4946, 113.591, -127.518, 0.33 ) }
    dend_34 { pt3dadd( -13.9188, 115.158, -128.251, 1.33 ) }
    // Section: dend_31, id: dend_31, parent: dend_29 (entry count 76/100)
    dend_31 { pt3dclear() }
    dend_31 { pt3dadd( 17.403, 19.2231, 6.78478, 0.67 ) }
    dend_31 { pt3dadd( 24.4225, 19.9206, 6.66437, 0.67 ) }
    dend_31 { pt3dadd( 27.106, 20.3449, 6.41874, 0.67 ) }
    dend_31 { pt3dadd( 30.3629, 21.1053, 6.01698, 0.67 ) }
    dend_31 { pt3dadd( 33.3128, 21.9467, 5.62711, 0.67 ) }
    dend_31 { pt3dadd( 34.6716, 22.3717, 5.44459, 0.67 ) }
    dend_31 { pt3dadd( 37.3328, 23.227, 5.1008, 0.67 ) }
    dend_31 { pt3dadd( 41.7772, 25.0266, 4.72434, 0.67 ) }
    dend_31 { pt3dadd( 44.5575, 26.3059, 4.491, 0.67 ) }
    dend_31 { pt3dadd( 46.6137, 27.409, 4.39677, 0.33 ) }
    dend_31 { pt3dadd( 47.1295, 27.6959, 4.40501, 0.67 ) }
    dend_31 { pt3dadd( 48.3101, 28.3504, 4.47371, 0.33 ) }
    dend_31 { pt3dadd( 51.4763, 30.0693, 4.87229, 0.67 ) }
    dend_31 { pt3dadd( 52.7833, 30.8441, 5.10259, 0.33 ) }
    dend_31 { pt3dadd( 53.5208, 31.2648, 5.1816, 0.67 ) }
    dend_31 { pt3dadd( 55.0253, 32.1179, 5.18925, 0.33 ) }
    dend_31 { pt3dadd( 55.0253, 32.1179, 5.18925, 0.67 ) }
    dend_31 { pt3dadd( 57.3651, 33.377, 4.85582, 0.33 ) }
    dend_31 { pt3dadd( 60.2818, 34.8606, 4.48036, 1.33 ) }
    dend_31 { pt3dadd( 65.0783, 37.2061, 4.02971, 0.33 ) }
    dend_31 { pt3dadd( 67.0218, 38.0261, 3.8904, 0.67 ) }
    dend_31 { pt3dadd( 71.0134, 39.5008, 3.68837, 0.33 ) }
    dend_31 { pt3dadd( 73.5476, 40.2511, 3.56372, 1.33 ) }
    dend_31 { pt3dadd( 77.8412, 41.152, 3.41131, 0.33 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_31 { pt3dadd( 78.2182, 41.1871, 3.40756, 0.67 ) }
    dend_31 { pt3dadd( 83.479, 41.0619, 3.26614, 0.33 ) }
    dend_31 { pt3dadd( 84.5322, 40.9451, 3.25852, 1.33 ) }
    dend_31 { pt3dadd( 87.6237, 40.3292, 3.19374, 0.33 ) }
    dend_31 { pt3dadd( 88.6927, 40.0792, 3.17331, 0.67 ) }
    dend_31 { pt3dadd( 91.8465, 39.3121, 2.96603, 0.33 ) }
    dend_31 { pt3dadd( 92.4307, 39.1874, 2.92733, 0.67 ) }
    dend_31 { pt3dadd( 94.8076, 38.8041, 2.81175, 0.33 ) }
    dend_31 { pt3dadd( 95.9847, 38.6897, 2.77029, 0.67 ) }
    dend_31 { pt3dadd( 97.8756, 38.6578, 2.75169, 0.33 ) }
    dend_31 { pt3dadd( 99.2158, 38.7156, 2.77358, 1.33 ) }
    dend_31 { pt3dadd( 102.686, 39.0318, 2.92172, 0.33 ) }
    dend_31 { pt3dadd( 103.881, 39.1272, 3.0047, 2.0 ) }
    dend_31 { pt3dadd( 106.814, 39.3573, 3.26993, 0.33 ) }
    dend_31 { pt3dadd( 108.137, 39.4026, 3.44017, 0.67 ) }
    dend_31 { pt3dadd( 111.768, 39.3613, 4.0551, 0.33 ) }
    dend_31 { pt3dadd( 113.095, 39.243, 4.34933, 0.67 ) }
    dend_31 { pt3dadd( 115.399, 38.8987, 4.99061, 0.33 ) }
    dend_31 { pt3dadd( 115.973, 38.7749, 5.15067, 1.33 ) }
    dend_31 { pt3dadd( 119.289, 37.8131, 6.07961, 0.33 ) }
    dend_31 { pt3dadd( 120.376, 37.4265, 6.38315, 1.33 ) }
    dend_31 { pt3dadd( 123.434, 36.1915, 7.2188, 0.33 ) }
    dend_31 { pt3dadd( 124.638, 35.6991, 7.55093, 1.33 ) }
    dend_31 { pt3dadd( 128.521, 34.1574, 8.61835, 0.33 ) }
    dend_31 { pt3dadd( 129.919, 33.693, 8.95899, 1.33 ) }
    dend_31 { pt3dadd( 134.313, 32.5828, 9.90738, 0.33 ) }
    dend_31 { pt3dadd( 135.375, 32.3918, 10.112, 0.67 ) }
    dend_31 { pt3dadd( 136.969, 32.212, 10.3858, 0.33 ) }
    dend_31 { pt3dadd( 137.708, 32.1573, 10.5035, 0.67 ) }
    dend_31 { pt3dadd( 144.051, 31.934, 11.041, 0.33 ) }
    dend_31 { pt3dadd( 145.39, 31.9159, 11.08, 1.33 ) }
    dend_31 { pt3dadd( 148.347, 31.8946, 10.9315, 0.33 ) }
    dend_31 { pt3dadd( 149.685, 31.833, 10.7738, 0.67 ) }
    dend_31 { pt3dadd( 152.585, 31.5741, 10.2736, 0.33 ) }
    dend_31 { pt3dadd( 156.399, 31.0093, 9.46537, 1.33 ) }
    dend_31 { pt3dadd( 158.7, 30.5345, 8.91076, 0.33 ) }
    dend_31 { pt3dadd( 160.529, 30.1359, 8.47532, 1.33 ) }
    dend_31 { pt3dadd( 164.297, 29.4647, 7.68752, 0.33 ) }
    dend_31 { pt3dadd( 164.821, 29.3974, 7.60523, 0.67 ) }
    dend_31 { pt3dadd( 166.748, 29.257, 7.4591, 1.33 ) }
    dend_31 { pt3dadd( 169.749, 29.2491, 7.66534, 0.33 ) }
    dend_31 { pt3dadd( 170.585, 29.2921, 7.79036, 0.67 ) }
    dend_31 { pt3dadd( 174.416, 29.7145, 8.80315, 0.33 ) }
    dend_31 { pt3dadd( 175.315, 29.8685, 9.10767, 0.67 ) }
    dend_31 { pt3dadd( 177.043, 30.2378, 9.72752, 0.33 ) }
    dend_31 { pt3dadd( 179.229, 30.8684, 10.6394, 1.33 ) }
    dend_31 { pt3dadd( 181.545, 31.6697, 11.7411, 0.33 ) }
    dend_31 { pt3dadd( 182.973, 32.2933, 12.5905, 1.33 ) }
    dend_31 { pt3dadd( 185.184, 33.6403, 14.2615, 0.33 ) }
    dend_31 { pt3dadd( 185.87, 34.2676, 14.9033, 1.33 ) }
    dend_31 { pt3dadd( 187.204, 35.9803, 16.3546, 0.33 ) }
    dend_31 { pt3dadd( 187.429, 36.3776, 16.6556, 0.67 ) }
    dend_31 { pt3dadd( 188.393, 38.6742, 18.2744, 0.33 ) }
    dend_31 { pt3dadd( 188.588, 39.3139, 18.7226, 1.33 ) }
    dend_31 { pt3dadd( 189.356, 43.3813, 21.6983, 0.33 ) }
    dend_31 { pt3dadd( 189.511, 44.2817, 22.3672, 0.67 ) }
    dend_31 { pt3dadd( 189.839, 46.425, 23.9278, 0.33 ) }
    dend_31 { pt3dadd( 189.916, 46.9182, 24.293, 0.67 ) }
    dend_31 { pt3dadd( 190.273, 49.1094, 25.8989, 0.33 ) }
    dend_31 { pt3dadd( 190.401, 50.4164, 26.9462, 0.67 ) }
    // Section: dend_30, id: dend_30, parent: dend_29 (entry count 60/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( 17.403, 19.2231, 6.78478, 0.33 ) }
    dend_30 { pt3dadd( 18.5372, 20.9023, 7.80501, 0.33 ) }
    dend_30 { pt3dadd( 20.725, 23.5393, 9.45028, 0.67 ) }
    dend_30 { pt3dadd( 23.1168, 26.4768, 11.302, 0.67 ) }
    dend_30 { pt3dadd( 24.1538, 27.7636, 12.0894, 0.67 ) }
    dend_30 { pt3dadd( 26.8087, 30.9682, 14.0217, 0.67 ) }
    dend_30 { pt3dadd( 29.3929, 34.0535, 15.7734, 0.67 ) }
    dend_30 { pt3dadd( 32.9441, 37.9341, 17.9283, 0.67 ) }
    dend_30 { pt3dadd( 34.6521, 39.7046, 18.8985, 0.67 ) }
    dend_30 { pt3dadd( 36.5584, 41.7928, 20.0714, 0.67 ) }
    dend_30 { pt3dadd( 37.6758, 43.0052, 20.8182, 0.67 ) }
    dend_30 { pt3dadd( 39.9211, 45.4647, 22.2188, 0.67 ) }
    dend_30 { pt3dadd( 42.5498, 48.3396, 23.6048, 0.67 ) }
    dend_30 { pt3dadd( 44.6555, 50.7745, 24.7235, 0.67 ) }
    dend_30 { pt3dadd( 47.6396, 54.3112, 26.2705, 0.67 ) }
    dend_30 { pt3dadd( 48.912, 55.9973, 27.031, 0.67 ) }
    dend_30 { pt3dadd( 51.3973, 59.3589, 28.6771, 0.67 ) }
    dend_30 { pt3dadd( 52.3152, 60.5555, 29.28, 0.67 ) }
    dend_30 { pt3dadd( 54.9235, 63.6194, 30.917, 0.67 ) }
    dend_30 { pt3dadd( 56.1527, 64.8108, 31.6878, 0.67 ) }
    dend_30 { pt3dadd( 58.9756, 66.9236, 33.4815, 0.67 ) }
    dend_30 { pt3dadd( 61.9852, 68.852, 35.43, 0.67 ) }
    dend_30 { pt3dadd( 64.6913, 70.4159, 37.3854, 0.67 ) }
    dend_30 { pt3dadd( 68.0048, 72.0403, 39.7071, 0.67 ) }
    dend_30 { pt3dadd( 70.9338, 73.0449, 41.5329, 0.67 ) }
    dend_30 { pt3dadd( 72.7395, 73.4906, 42.5681, 0.33 ) }
    dend_30 { pt3dadd( 75.0031, 73.8088, 43.7196, 0.67 ) }
    // Section: dend_28, id: dend_28, parent: dend_26 (entry count 87/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 5.82428, 14.9593, 12.1003, 0.67 ) }
    dend_28 { pt3dadd( 6.47501, 18.7273, 13.2197, 0.67 ) }
    dend_28 { pt3dadd( 7.16058, 22.3534, 14.6337, 0.67 ) }
    dend_28 { pt3dadd( 7.65433, 24.1396, 15.4248, 0.67 ) }
    dend_28 { pt3dadd( 8.08725, 25.5613, 16.0462, 0.67 ) }
    dend_28 { pt3dadd( 9.04805, 28.4727, 17.3835, 0.67 ) }
    dend_28 { pt3dadd( 10.1296, 31.5614, 18.8139, 0.67 ) }
    dend_28 { pt3dadd( 11.2092, 34.6545, 20.3108, 0.67 ) }
    dend_28 { pt3dadd( 12.2683, 37.5114, 21.6062, 0.67 ) }
    dend_28 { pt3dadd( 13.6372, 41.2336, 23.337, 0.67 ) }
    dend_28 { pt3dadd( 14.2054, 42.9232, 24.1871, 0.33 ) }
    dend_28 { pt3dadd( 14.5303, 43.8464, 24.6917, 0.67 ) }
    dend_28 { pt3dadd( 14.9281, 44.9689, 25.2399, 0.33 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_28 { pt3dadd( 15.7098, 47.2582, 26.2513, 0.67 ) }
    dend_28 { pt3dadd( 16.1712, 48.5776, 26.8264, 1.33 ) }
    dend_28 { pt3dadd( 17.1576, 51.1528, 27.9203, 0.67 ) }
    dend_28 { pt3dadd( 19.149, 56.1608, 29.8893, 0.67 ) }
    dend_28 { pt3dadd( 20.7233, 60.0654, 31.3433, 0.67 ) }
    dend_28 { pt3dadd( 22.031, 63.2153, 32.3964, 0.67 ) }
    dend_28 { pt3dadd( 22.6585, 64.6842, 32.8016, 0.67 ) }
    dend_28 { pt3dadd( 23.2263, 66.0262, 33.1008, 0.67 ) }
    dend_28 { pt3dadd( 23.6854, 67.176, 33.2945, 1.33 ) }
    dend_28 { pt3dadd( 24.3739, 69.1947, 33.5607, 0.33 ) }
    dend_28 { pt3dadd( 25.0737, 71.2954, 33.8258, 1.33 ) }
    dend_28 { pt3dadd( 25.4213, 72.8248, 33.9473, 0.33 ) }
    dend_28 { pt3dadd( 25.7412, 74.8015, 34.0989, 1.33 ) }
    dend_28 { pt3dadd( 26.1271, 78.3312, 34.3393, 0.67 ) }
    dend_28 { pt3dadd( 26.2509, 79.9169, 34.463, 0.33 ) }
    dend_28 { pt3dadd( 26.2967, 80.7004, 34.5255, 0.33 ) }
    dend_28 { pt3dadd( 26.5047, 85.5029, 34.9223, 0.67 ) }
    dend_28 { pt3dadd( 26.5527, 86.9484, 35.0328, 0.33 ) }
    dend_28 { pt3dadd( 26.6232, 89.0494, 35.262, 0.67 ) }
    dend_28 { pt3dadd( 26.7394, 91.002, 35.5096, 0.67 ) }
    dend_28 { pt3dadd( 26.9265, 92.7132, 35.7916, 0.67 ) }
    dend_28 { pt3dadd( 27.1293, 93.7878, 36.0201, 0.67 ) }
    dend_28 { pt3dadd( 27.4781, 94.684, 36.3125, 0.67 ) }
    dend_28 { pt3dadd( 28.6891, 97.1571, 37.2912, 0.33 ) }
    dend_28 { pt3dadd( 29.188, 97.9784, 37.696, 0.33 ) }
    dend_28 { pt3dadd( 29.765, 98.8764, 38.1799, 0.67 ) }
    // Section: dend_27, id: dend_27, parent: dend_26 (entry count 26/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( 5.82428, 14.9593, 12.1003, 0.67 ) }
    dend_27 { pt3dadd( 5.1493, 17.8428, 13.372, 0.67 ) }
    dend_27 { pt3dadd( 4.49291, 21.1408, 15.4358, 0.67 ) }
    dend_27 { pt3dadd( 3.91493, 24.3737, 17.8664, 0.67 ) }
    dend_27 { pt3dadd( 3.62634, 26.3682, 19.451, 0.67 ) }
    dend_27 { pt3dadd( 3.56157, 29.1697, 21.5944, 0.67 ) }
    dend_27 { pt3dadd( 3.75058, 32.0651, 23.8932, 0.67 ) }
    dend_27 { pt3dadd( 4.18785, 36.3985, 27.5146, 0.67 ) }
    dend_27 { pt3dadd( 4.4367, 38.935, 29.7832, 0.67 ) }
    dend_27 { pt3dadd( 4.71754, 41.153, 31.7821, 0.67 ) }
    dend_27 { pt3dadd( 5.37029, 45.3661, 35.3863, 0.67 ) }
    dend_27 { pt3dadd( 5.8203, 48.4115, 37.9623, 0.67 ) }
    dend_27 { pt3dadd( 6.02608, 50.8646, 39.9466, 0.67 ) }
    dend_27 { pt3dadd( 6.07685, 52.8057, 41.3048, 0.67 ) }
    dend_27 { pt3dadd( 6.07199, 58.6994, 44.9136, 0.67 ) }
    dend_27 { pt3dadd( 5.9472, 63.3483, 47.3295, 0.67 ) }
    dend_27 { pt3dadd( 5.64775, 66.9899, 49.1496, 0.67 ) }
    dend_27 { pt3dadd( 5.47077, 69.6625, 50.3182, 0.67 ) }
    dend_27 { pt3dadd( 5.42972, 75.0158, 52.5281, 0.33 ) }
    dend_27 { pt3dadd( 5.4293, 76.4389, 53.0362, 0.67 ) }
    dend_27 { pt3dadd( 5.35222, 79.8357, 53.2245, 0.67 ) }
    // Section: dend_16, id: dend_16, parent: dend_6 (entry count 47/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 0.853976, -17.5046, 6.15409, 1.33 ) }
    dend_16 { pt3dadd( 1.21172, -21.3611, 8.58949, 1.33 ) }
    dend_16 { pt3dadd( 1.62329, -25.7979, 11.3913, 1.33 ) }
    dend_16 { pt3dadd( 2.10883, -31.0321, 14.6967, 1.33 ) }
    // Section: dend_7, id: dend_7, parent: dend_6 (entry count 51/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 0.853976, -17.5046, 6.15409, 0.67 ) }
    dend_7 { pt3dadd( 1.39501, -19.5004, 4.11913, 0.67 ) }
    dend_7 { pt3dadd( 2.51788, -22.6825, 1.229, 0.67 ) }
    dend_7 { pt3dadd( 3.71222, -25.6882, -1.53145, 0.67 ) }
    dend_7 { pt3dadd( 6.0958, -31.6869, -7.04058, 0.67 ) }
    dend_7 { pt3dadd( 7.25835, -34.6126, -9.72754, 0.67 ) }
    dend_7 { pt3dadd( 8.26634, -37.1494, -12.0573, 0.67 ) }
    dend_7 { pt3dadd( 9.79798, -41.4605, -16.0451, 0.67 ) }
    dend_7 { pt3dadd( 10.7125, -43.7431, -18.1142, 1.33 ) }
    // Section: dend_3, id: dend_3, parent: dend_1 (entry count 60/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -5.84024, -25.1406, 6.37664, 0.67 ) }
    dend_3 { pt3dadd( -6.91257, -31.0336, 7.31782, 0.67 ) }
    dend_3 { pt3dadd( -7.23839, -32.8241, 7.6038, 0.67 ) }
    dend_3 { pt3dadd( -7.90472, -36.4859, 8.18863, 1.33 ) }
    dend_3 { pt3dadd( -8.96365, -42.3052, 9.11806, 0.67 ) }
    dend_3 { pt3dadd( -9.19263, -43.5635, 9.31903, 0.67 ) }
    dend_3 { pt3dadd( -9.6523, -46.0896, 9.72248, 1.33 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 67/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -5.84024, -25.1406, 6.37664, 0.67 ) }
    dend_2 { pt3dadd( -6.90254, -25.4859, 7.43422, 0.67 ) }
    dend_2 { pt3dadd( -8.95595, -25.9941, 9.50805, 0.67 ) }
    dend_2 { pt3dadd( -10.2128, -26.2322, 10.7495, 0.67 ) }
    dend_2 { pt3dadd( -15.6729, -27.1176, 15.9352, 0.67 ) }
    dend_2 { pt3dadd( -18.4213, -27.6061, 18.4131, 0.67 ) }
    dend_2 { pt3dadd( -20.631, -28.0061, 20.3634, 0.67 ) }
    dend_2 { pt3dadd( -22.9555, -28.2579, 22.4305, 0.33 ) }
    dend_2 { pt3dadd( -24.9414, -28.3431, 24.1904, 0.67 ) }
    dend_2 { pt3dadd( -25.8605, -28.37, 24.9721, 0.33 ) }
    dend_2 { pt3dadd( -27.6232, -28.3646, 26.1567, 0.67 ) }
    dend_2 { pt3dadd( -29.7256, -28.4912, 27.7188, 0.67 ) }
    dend_2 { pt3dadd( -32.4796, -28.565, 29.6174, 0.67 ) }
    // Section: dend_18, id: dend_18, parent: dend_16 (entry count 80/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 2.10883, -31.0321, 14.6967, 1.33 ) }
    dend_18 { pt3dadd( 1.50902, -34.6237, 14.3272, 1.33 ) }
    // Section: dend_17, id: dend_17, parent: dend_16 (entry count 82/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 2.10883, -31.0321, 14.6967, 0.67 ) }
    dend_17 { pt3dadd( 0.892204, -30.5403, 18.029, 0.67 ) }
    dend_17 { pt3dadd( -1.77901, -29.0357, 22.8182, 0.67 ) }
    dend_17 { pt3dadd( -3.25643, -28.2967, 24.8865, 0.67 ) }
    dend_17 { pt3dadd( -6.41078, -27.085, 28.4068, 0.67 ) }
    dend_17 { pt3dadd( -6.873, -26.8774, 28.8778, 0.67 ) }
    dend_17 { pt3dadd( -8.46024, -26.0637, 30.3451, 0.67 ) }
    dend_17 { pt3dadd( -11.4997, -24.1738, 32.6515, 0.67 ) }
    dend_17 { pt3dadd( -12.7171, -23.2349, 33.5093, 0.67 ) }
    dend_17 { pt3dadd( -15.5141, -20.8363, 35.6381, 0.67 ) }
    dend_17 { pt3dadd( -17.5853, -18.9045, 37.0993, 0.67 ) }
    dend_17 { pt3dadd( -18.6705, -17.5628, 38.1263, 0.67 ) }
    dend_17 { pt3dadd( -20.449, -14.9183, 40.1436, 0.67 ) }
    dend_17 { pt3dadd( -21.3155, -13.2214, 41.4151, 0.67 ) }
    dend_17 { pt3dadd( -21.878, -11.8397, 42.3985, 0.67 ) }
    dend_17 { pt3dadd( -22.3915, -10.0352, 43.5946, 0.67 ) }
    dend_17 { pt3dadd( -23.5839, -5.59284, 47.0272, 0.67 ) }
    // Section: dend_11, id: dend_11, parent: dend_7 (entry count 99/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 10.7125, -43.7431, -18.1142, 0.33 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_11 { pt3dadd( 10.2386, -47.801, -21.7921, 0.33 ) }
    dend_11 { pt3dadd( 10.1099, -48.9025, -22.7905, 1.33 ) }
    dend_11 { pt3dadd( 9.39492, -55.0248, -28.3395, 0.33 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 3/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 10.7125, -43.7431, -18.1142, 0.33 ) }
    dend_8 { pt3dadd( 15.0292, -45.0736, -22.585, 0.33 ) }
    dend_8 { pt3dadd( 15.3247, -45.146, -22.8789, 0.67 ) }
    dend_8 { pt3dadd( 17.1701, -45.4816, -24.6153, 0.33 ) }
    dend_8 { pt3dadd( 18.7516, -45.6781, -25.9968, 1.33 ) }
    dend_8 { pt3dadd( 23.9144, -46.1337, -30.4807, 0.67 ) }
    dend_8 { pt3dadd( 28.8064, -46.3652, -34.528, 0.33 ) }
    dend_8 { pt3dadd( 30.2235, -46.3415, -35.632, 0.33 ) }
    dend_8 { pt3dadd( 31.6384, -46.2756, -36.7536, 0.67 ) }
    dend_8 { pt3dadd( 33.8286, -46.1402, -38.5218, 0.33 ) }
    dend_8 { pt3dadd( 36.7183, -46.0951, -40.7645, 1.33 ) }
    dend_8 { pt3dadd( 39.0297, -46.1599, -42.4494, 0.33 ) }
    dend_8 { pt3dadd( 41.3674, -46.4166, -44.0929, 1.33 ) }
    dend_8 { pt3dadd( 45.3779, -47.088, -46.9004, 0.33 ) }
    dend_8 { pt3dadd( 46.1204, -47.2497, -47.4703, 0.67 ) }
    dend_8 { pt3dadd( 53.1638, -49.095, -53.1216, 0.33 ) }
    dend_8 { pt3dadd( 54.7191, -49.5717, -54.4292, 2.0 ) }
    dend_8 { pt3dadd( 60.7789, -51.7327, -59.8518, 0.33 ) }
    dend_8 { pt3dadd( 61.444, -51.9998, -60.4888, 1.33 ) }
    dend_8 { pt3dadd( 66.2455, -54.1578, -65.6816, 0.33 ) }
    dend_8 { pt3dadd( 66.845, -54.4347, -66.3734, 0.67 ) }
    dend_8 { pt3dadd( 69.2809, -55.7224, -69.6222, 0.33 ) }
    dend_8 { pt3dadd( 70.1698, -56.2644, -70.9685, 1.33 ) }
    dend_8 { pt3dadd( 73.0864, -58.6743, -76.6366, 0.33 ) }
    dend_8 { pt3dadd( 74.3863, -59.7709, -79.1871, 1.33 ) }
    // Section: dend_5, id: dend_5, parent: dend_3 (entry count 28/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -9.6523, -46.0896, 9.72248, 0.67 ) }
    dend_5 { pt3dadd( -9.45816, -48.3378, 9.99893, 0.67 ) }
    dend_5 { pt3dadd( -9.53269, -50.113, 10.2199, 0.67 ) }
    dend_5 { pt3dadd( -9.63607, -51.2693, 10.3597, 0.67 ) }
    dend_5 { pt3dadd( -10.1099, -55.1621, 10.8002, 0.67 ) }
    dend_5 { pt3dadd( -11.2313, -62.1469, 11.6368, 0.67 ) }
    dend_5 { pt3dadd( -12.2884, -67.0923, 12.2605, 0.67 ) }
    dend_5 { pt3dadd( -13.6163, -72.3011, 12.9566, 0.67 ) }
    dend_5 { pt3dadd( -15.4211, -78.7885, 13.899, 0.67 ) }
    dend_5 { pt3dadd( -16.1109, -80.9294, 14.2179, 0.67 ) }
    dend_5 { pt3dadd( -17.2013, -83.4318, 14.6148, 0.67 ) }
    dend_5 { pt3dadd( -19.8609, -88.2091, 15.485, 0.67 ) }
    dend_5 { pt3dadd( -21.1038, -90.17, 15.877, 0.67 ) }
    dend_5 { pt3dadd( -23.2877, -93.4183, 16.5771, 0.67 ) }
    dend_5 { pt3dadd( -24.1416, -94.6112, 16.8632, 0.67 ) }
    dend_5 { pt3dadd( -28.3866, -100.812, 18.376, 0.67 ) }
    dend_5 { pt3dadd( -31.0894, -104.906, 19.3664, 0.67 ) }
    dend_5 { pt3dadd( -33.1908, -108.229, 20.1693, 0.67 ) }
    dend_5 { pt3dadd( -35.6134, -112.108, 21.1012, 0.67 ) }
    dend_5 { pt3dadd( -37.4629, -115.177, 21.8517, 0.67 ) }
    dend_5 { pt3dadd( -38.3811, -116.899, 22.3736, 0.67 ) }
    dend_5 { pt3dadd( -39.3709, -119.126, 23.1679, 0.67 ) }
    dend_5 { pt3dadd( -40.3406, -121.323, 24.0805, 0.67 ) }
    dend_5 { pt3dadd( -41.035, -122.723, 24.7381, 0.67 ) }
    dend_5 { pt3dadd( -42.4336, -125.054, 25.9308, 0.67 ) }
    dend_5 { pt3dadd( -44.9033, -128.292, 27.9489, 0.67 ) }
    dend_5 { pt3dadd( -46.1033, -129.685, 28.9191, 0.67 ) }
    dend_5 { pt3dadd( -47.5064, -131.155, 30.0564, 0.67 ) }
    dend_5 { pt3dadd( -49.1288, -132.601, 31.3226, 0.67 ) }
    dend_5 { pt3dadd( -50.7807, -133.956, 32.5501, 0.33 ) }
    dend_5 { pt3dadd( -53.2503, -135.601, 34.0579, 0.33 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 59/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -9.6523, -46.0896, 9.72248, 0.67 ) }
    dend_4 { pt3dadd( -13.6375, -47.7871, 6.95556, 0.67 ) }
    dend_4 { pt3dadd( -18.5062, -49.9195, 3.22247, 0.67 ) }
    dend_4 { pt3dadd( -23.5398, -52.093, -0.713872, 0.67 ) }
    dend_4 { pt3dadd( -33.7405, -56.3221, -8.21504, 0.67 ) }
    dend_4 { pt3dadd( -38.6342, -58.2302, -11.634, 0.67 ) }
    dend_4 { pt3dadd( -41.4358, -59.2994, -13.476, 0.67 ) }
    dend_4 { pt3dadd( -44.9787, -60.6942, -15.8493, 0.33 ) }
    dend_4 { pt3dadd( -47.3661, -61.5972, -17.5016, 1.33 ) }
    dend_4 { pt3dadd( -50.9531, -62.9219, -19.743, 0.33 ) }
    dend_4 { pt3dadd( -54.6167, -64.3359, -21.624, 0.67 ) }
    dend_4 { pt3dadd( -58.2631, -65.8053, -23.3417, 0.33 ) }
    dend_4 { pt3dadd( -62.7789, -67.8056, -25.7347, 0.67 ) }
    dend_4 { pt3dadd( -66.0501, -69.3294, -27.5507, 0.33 ) }
    dend_4 { pt3dadd( -68.5098, -70.6062, -29.1001, 0.67 ) }
    dend_4 { pt3dadd( -75.0065, -74.3408, -33.6772, 0.33 ) }
    dend_4 { pt3dadd( -78.0879, -76.3491, -36.1639, 1.33 ) }
    dend_4 { pt3dadd( -83.1146, -79.6669, -40.0171, 0.33 ) }
    dend_4 { pt3dadd( -83.6158, -79.994, -40.4, 0.67 ) }
    dend_4 { pt3dadd( -86.1358, -81.6265, -42.4235, 0.33 ) }
    dend_4 { pt3dadd( -86.8832, -82.0935, -43.1236, 0.67 ) }
    dend_4 { pt3dadd( -93.8712, -86.1639, -49.922, 0.33 ) }
    dend_4 { pt3dadd( -97.565, -88.178, -54.0265, 2.0 ) }
    dend_4 { pt3dadd( -103.617, -91.1903, -61.0115, 0.33 ) }
    dend_4 { pt3dadd( -105.801, -92.1977, -63.5432, 1.33 ) }
    dend_4 { pt3dadd( -111.706, -94.6379, -70.3541, 0.33 ) }
    dend_4 { pt3dadd( -112.027, -94.7544, -70.6974, 0.67 ) }
    dend_4 { pt3dadd( -115.06, -95.6597, -73.7518, 0.33 ) }
    dend_4 { pt3dadd( -115.774, -95.8551, -74.4178, 0.67 ) }
    dend_4 { pt3dadd( -120.75, -97.0952, -77.968, 0.33 ) }
    dend_4 { pt3dadd( -122.902, -97.6527, -79.2388, 1.33 ) }
    dend_4 { pt3dadd( -126.521, -98.6083, -80.951, 0.33 ) }
    dend_4 { pt3dadd( -132.485, -100.427, -83.5782, 1.33 ) }
    dend_4 { pt3dadd( -137.858, -102.279, -85.7393, 0.33 ) }
    dend_4 { pt3dadd( -139.246, -102.86, -86.2912, 0.67 ) }
    dend_4 { pt3dadd( -142.928, -104.637, -87.7384, 0.33 ) }
    dend_4 { pt3dadd( -143.773, -105.127, -88.0236, 0.67 ) }
    dend_4 { pt3dadd( -149.541, -108.956, -89.6492, 0.33 ) }
    dend_4 { pt3dadd( -151.221, -110.202, -90.1105, 0.67 ) }
    dend_4 { pt3dadd( -155.375, -113.488, -91.4356, 0.33 ) }
    dend_4 { pt3dadd( -156.596, -114.436, -91.8487, 0.67 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_4 { pt3dadd( -164.336, -120.306, -94.5234, 0.33 ) }
    dend_4 { pt3dadd( -164.721, -120.596, -94.6795, 0.67 ) }
    dend_4 { pt3dadd( -169.497, -124.057, -96.8377, 0.33 ) }
    dend_4 { pt3dadd( -171.073, -125.197, -97.5786, 1.33 ) }
    dend_4 { pt3dadd( -174.957, -128.035, -99.4807, 0.33 ) }
    dend_4 { pt3dadd( -177.356, -129.867, -100.64, 1.33 ) }
    dend_4 { pt3dadd( -184.246, -135.293, -103.896, 0.33 ) }
    dend_4 { pt3dadd( -185.584, -136.388, -104.451, 1.33 ) }
    dend_4 { pt3dadd( -188.525, -138.852, -105.435, 0.33 ) }
    dend_4 { pt3dadd( -189.291, -139.465, -105.661, 0.67 ) }
    dend_4 { pt3dadd( -193.198, -142.485, -106.674, 0.33 ) }
    dend_4 { pt3dadd( -194.087, -143.171, -106.865, 0.67 ) }
    dend_4 { pt3dadd( -197.466, -145.858, -107.412, 0.33 ) }
    dend_4 { pt3dadd( -199.279, -147.641, -107.833, 1.33 ) }
    dend_4 { pt3dadd( -206.259, -155.795, -109.936, 0.33 ) }
    dend_4 { pt3dadd( -206.91, -156.72, -110.183, 0.67 ) }
    dend_4 { pt3dadd( -209.881, -162.223, -111.671, 0.33 ) }
    dend_4 { pt3dadd( -210.694, -164.305, -112.23, 0.67 ) }
    dend_4 { pt3dadd( -212.714, -173.626, -114.74, 0.33 ) }
    dend_4 { pt3dadd( -212.714, -174.14, -114.896, 1.33 ) }
    dend_4 { pt3dadd( -212.19, -176.552, -115.706, 0.33 ) }
    dend_4 { pt3dadd( -212.01, -177.219, -115.92, 0.67 ) }
    dend_4 { pt3dadd( -211.36, -179.238, -116.552, 0.33 ) }
    dend_4 { pt3dadd( -211.159, -179.902, -116.755, 0.67 ) }
    dend_4 { pt3dadd( -209.459, -186.169, -118.409, 0.33 ) }
    dend_4 { pt3dadd( -209.067, -187.611, -118.801, 1.33 ) }
    dend_4 { pt3dadd( -206.92, -195.628, -121.066, 0.33 ) }
    dend_4 { pt3dadd( -206.807, -196.103, -121.198, 0.67 ) }
    // Section: dend_24, id: dend_24, parent: dend_18 (entry count 28/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 1.50902, -34.6237, 14.3272, 0.67 ) }
    dend_24 { pt3dadd( 2.20908, -40.8157, 14.0956, 0.67 ) }
    dend_24 { pt3dadd( 2.2999, -42.5099, 14.0229, 0.67 ) }
    dend_24 { pt3dadd( 2.29714, -45.4287, 13.752, 0.67 ) }
    dend_24 { pt3dadd( 2.2931, -49.7093, 13.3548, 0.67 ) }
    dend_24 { pt3dadd( 2.28884, -54.2166, 12.9365, 0.67 ) }
    dend_24 { pt3dadd( 2.28614, -57.0741, 12.6713, 0.67 ) }
    dend_24 { pt3dadd( 1.79041, -63.3275, 12.2218, 0.67 ) }
    dend_24 { pt3dadd( 0.969201, -73.0097, 11.4053, 0.33 ) }
    // Section: dend_19, id: dend_19, parent: dend_18 (entry count 37/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 1.50902, -34.6237, 14.3272, 0.67 ) }
    dend_19 { pt3dadd( 2.63329, -36.0758, 15.8771, 0.67 ) }
    // Section: dend_15, id: dend_15, parent: dend_11 (entry count 39/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 9.39492, -55.0248, -28.3395, 0.33 ) }
    dend_15 { pt3dadd( 11.1139, -56.9639, -29.4196, 0.33 ) }
    dend_15 { pt3dadd( 11.67, -57.4804, -29.9161, 0.67 ) }
    dend_15 { pt3dadd( 12.9229, -58.623, -31.0346, 0.33 ) }
    dend_15 { pt3dadd( 13.3617, -58.997, -31.4505, 0.67 ) }
    dend_15 { pt3dadd( 14.8099, -60.1713, -32.8132, 0.33 ) }
    dend_15 { pt3dadd( 18.7073, -63.0514, -36.5375, 1.33 ) }
    dend_15 { pt3dadd( 22.4976, -65.4645, -40.4607, 0.33 ) }
    dend_15 { pt3dadd( 23.3701, -65.9499, -41.3647, 1.33 ) }
    dend_15 { pt3dadd( 26.2533, -67.3753, -44.3578, 0.33 ) }
    dend_15 { pt3dadd( 26.8682, -67.6137, -45.0294, 0.67 ) }
    dend_15 { pt3dadd( 29.9777, -68.4756, -48.7151, 0.33 ) }
    dend_15 { pt3dadd( 31.5555, -68.7614, -50.5968, 2.0 ) }
    dend_15 { pt3dadd( 32.9285, -68.885, -52.3592, 0.33 ) }
    dend_15 { pt3dadd( 33.407, -68.9239, -53.065, 0.67 ) }
    dend_15 { pt3dadd( 37.0036, -69.2532, -58.8575, 0.33 ) }
    dend_15 { pt3dadd( 39.1627, -69.5977, -62.5386, 1.33 ) }
    dend_15 { pt3dadd( 40.1845, -69.8199, -64.3771, 0.33 ) }
    dend_15 { pt3dadd( 40.7372, -69.9848, -65.4021, 2.0 ) }
    dend_15 { pt3dadd( 45.5779, -71.8152, -74.7859, 0.33 ) }
    dend_15 { pt3dadd( 45.9851, -72.012, -75.6418, 2.0 ) }
    dend_15 { pt3dadd( 47.4939, -72.9239, -78.9099, 0.33 ) }
    dend_15 { pt3dadd( 48.1918, -73.4582, -80.524, 0.67 ) }
    dend_15 { pt3dadd( 49.4333, -74.5988, -83.6346, 0.33 ) }
    dend_15 { pt3dadd( 49.8658, -75.0034, -84.584, 1.33 ) }
    dend_15 { pt3dadd( 55.0286, -79.9357, -94.1076, 0.33 ) }
    dend_15 { pt3dadd( 56.4251, -81.1347, -96.2293, 0.67 ) }
    dend_15 { pt3dadd( 58.2791, -82.5609, -98.4963, 0.33 ) }
    dend_15 { pt3dadd( 58.5717, -82.7701, -98.7701, 0.67 ) }
    dend_15 { pt3dadd( 63.5136, -85.9456, -102.246, 0.33 ) }
    dend_15 { pt3dadd( 64.7508, -86.6699, -102.88, 0.67 ) }
    dend_15 { pt3dadd( 67.8469, -88.3807, -103.788, 0.33 ) }
    dend_15 { pt3dadd( 68.4513, -88.721, -103.937, 0.67 ) }
    dend_15 { pt3dadd( 73.4489, -91.4577, -105.128, 0.33 ) }
    dend_15 { pt3dadd( 74.2641, -91.9822, -105.169, 1.33 ) }
    dend_15 { pt3dadd( 76.7165, -93.8408, -104.715, 0.33 ) }
    dend_15 { pt3dadd( 77.0407, -94.1151, -104.541, 0.67 ) }
    dend_15 { pt3dadd( 81.1099, -97.8555, -101.349, 0.33 ) }
    dend_15 { pt3dadd( 82.7111, -99.3678, -99.8171, 0.67 ) }
    dend_15 { pt3dadd( 87.4491, -104.015, -94.0753, 0.33 ) }
    dend_15 { pt3dadd( 87.8087, -104.39, -93.5785, 0.67 ) }
    dend_15 { pt3dadd( 91.3749, -108.394, -87.6257, 0.33 ) }
    dend_15 { pt3dadd( 91.5043, -108.545, -87.3774, 0.67 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 82/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 9.39492, -55.0248, -28.3395, 0.33 ) }
    dend_12 { pt3dadd( 9.51652, -58.5986, -27.9084, 0.33 ) }
    dend_12 { pt3dadd( 9.61421, -59.8786, -27.7712, 0.67 ) }
    dend_12 { pt3dadd( 10.0316, -64.0784, -27.3428, 0.33 ) }
    dend_12 { pt3dadd( 10.1985, -65.5142, -27.2046, 0.67 ) }
    dend_12 { pt3dadd( 10.3857, -67.2191, -27.0595, 0.33 ) }
    dend_12 { pt3dadd( 10.5791, -69.2406, -26.9197, 1.33 ) }
    dend_12 { pt3dadd( 10.9104, -72.553, -26.7354, 0.33 ) }
    dend_12 { pt3dadd( 10.9555, -73.013, -26.7199, 0.67 ) }
    dend_12 { pt3dadd( 11.1206, -74.7299, -26.7112, 0.33 ) }
    dend_12 { pt3dadd( 11.3035, -76.6829, -26.6992, 1.33 ) }
    dend_12 { pt3dadd( 11.7147, -80.5956, -26.8989, 0.33 ) }
    dend_12 { pt3dadd( 11.8443, -81.6043, -27.0027, 0.67 ) }
    dend_12 { pt3dadd( 12.1868, -83.8887, -27.3268, 0.33 ) }
    dend_12 { pt3dadd( 12.433, -85.0013, -27.5654, 0.67 ) }
    dend_12 { pt3dadd( 13.1034, -87.4079, -28.2125, 0.33 ) }
    dend_12 { pt3dadd( 14.2157, -90.4576, -29.1254, 0.67 ) }
    dend_12 { pt3dadd( 15.6957, -93.8118, -30.3042, 0.33 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_12 { pt3dadd( 16.303, -95.0287, -30.7386, 1.33 ) }
    dend_12 { pt3dadd( 18.9209, -99.746, -32.4483, 0.33 ) }
    dend_12 { pt3dadd( 19.0855, -100.025, -32.542, 0.67 ) }
    dend_12 { pt3dadd( 20.3317, -102.0, -33.1247, 0.33 ) }
    dend_12 { pt3dadd( 21.3643, -103.578, -33.4279, 2.0 ) }
    dend_12 { pt3dadd( 22.9339, -105.761, -33.8433, 0.33 ) }
    dend_12 { pt3dadd( 23.1138, -106.018, -33.8767, 0.67 ) }
    dend_12 { pt3dadd( 24.2178, -107.717, -34.0449, 0.33 ) }
    dend_12 { pt3dadd( 24.4327, -108.103, -34.1144, 0.67 ) }
    dend_12 { pt3dadd( 25.4716, -110.313, -34.6198, 0.33 ) }
    dend_12 { pt3dadd( 25.9403, -111.469, -34.8887, 0.67 ) }
    dend_12 { pt3dadd( 26.8487, -114.294, -35.4843, 0.33 ) }
    dend_12 { pt3dadd( 27.4464, -116.448, -35.8321, 1.33 ) }
    dend_12 { pt3dadd( 28.6051, -121.308, -36.4577, 0.33 ) }
    dend_12 { pt3dadd( 28.7494, -121.943, -36.5022, 0.67 ) }
    dend_12 { pt3dadd( 29.339, -124.631, -36.5371, 0.33 ) }
    dend_12 { pt3dadd( 29.9911, -127.527, -36.3654, 1.33 ) }
    dend_12 { pt3dadd( 30.7253, -130.639, -35.9649, 0.33 ) }
    dend_12 { pt3dadd( 30.8806, -131.238, -35.8434, 0.67 ) }
    dend_12 { pt3dadd( 31.6854, -134.019, -35.1411, 0.33 ) }
    dend_12 { pt3dadd( 31.9147, -134.687, -34.9875, 0.67 ) }
    dend_12 { pt3dadd( 32.6079, -136.384, -34.6553, 0.33 ) }
    dend_12 { pt3dadd( 32.7939, -136.796, -34.5945, 0.67 ) }
    dend_12 { pt3dadd( 34.2473, -140.014, -34.1297, 0.33 ) }
    dend_12 { pt3dadd( 34.8406, -141.285, -33.9493, 1.33 ) }
    dend_12 { pt3dadd( 35.8745, -143.53, -33.6534, 0.33 ) }
    dend_12 { pt3dadd( 36.9769, -146.129, -33.3415, 0.67 ) }
    dend_12 { pt3dadd( 37.8545, -148.231, -33.1001, 0.33 ) }
    dend_12 { pt3dadd( 38.0336, -148.652, -33.0488, 0.67 ) }
    dend_12 { pt3dadd( 38.7604, -150.367, -32.8374, 0.33 ) }
    dend_12 { pt3dadd( 38.9952, -150.937, -32.7716, 0.67 ) }
    dend_12 { pt3dadd( 40.5609, -154.89, -32.3129, 0.33 ) }
    dend_12 { pt3dadd( 40.9196, -155.835, -32.202, 0.67 ) }
    dend_12 { pt3dadd( 42.6523, -160.487, -31.6419, 0.33 ) }
    dend_12 { pt3dadd( 43.0993, -161.714, -31.4923, 2.0 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 35/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 74.3863, -59.7709, -79.1871, 0.33 ) }
    dend_10 { pt3dadd( 76.3206, -59.5485, -80.5124, 0.33 ) }
    dend_10 { pt3dadd( 76.8639, -59.4751, -80.8878, 0.67 ) }
    dend_10 { pt3dadd( 81.5212, -58.7897, -84.1245, 0.33 ) }
    dend_10 { pt3dadd( 82.5746, -58.6736, -84.678, 1.33 ) }
    dend_10 { pt3dadd( 87.2402, -58.3134, -86.7554, 0.33 ) }
    dend_10 { pt3dadd( 88.0885, -58.2903, -87.0517, 0.67 ) }
    dend_10 { pt3dadd( 94.4943, -58.3947, -88.7176, 0.33 ) }
    dend_10 { pt3dadd( 95.3712, -58.4809, -88.9033, 1.33 ) }
    dend_10 { pt3dadd( 102.587, -59.9621, -89.7938, 0.33 ) }
    dend_10 { pt3dadd( 103.569, -60.3193, -89.9214, 1.33 ) }
    dend_10 { pt3dadd( 107.224, -62.3479, -90.3316, 0.33 ) }
    dend_10 { pt3dadd( 107.834, -62.7902, -90.435, 1.33 ) }
    dend_10 { pt3dadd( 111.898, -66.7736, -91.462, 0.33 ) }
    dend_10 { pt3dadd( 112.805, -67.7343, -91.9262, 0.67 ) }
    dend_10 { pt3dadd( 115.256, -70.4538, -93.9523, 0.33 ) }
    dend_10 { pt3dadd( 115.546, -70.7294, -94.2009, 0.67 ) }
    dend_10 { pt3dadd( 117.032, -71.9396, -95.4222, 0.33 ) }
    dend_10 { pt3dadd( 117.279, -72.0935, -95.5917, 0.67 ) }
    dend_10 { pt3dadd( 121.471, -74.0776, -97.8157, 0.33 ) }
    dend_10 { pt3dadd( 122.759, -74.6061, -98.4867, 0.67 ) }
    dend_10 { pt3dadd( 123.837, -75.0044, -98.9264, 0.33 ) }
    dend_10 { pt3dadd( 127.53, -76.3217, -100.396, 1.33 ) }
    dend_10 { pt3dadd( 133.437, -78.3404, -102.6, 0.33 ) }
    dend_10 { pt3dadd( 134.105, -78.5743, -102.849, 0.67 ) }
    dend_10 { pt3dadd( 138.298, -80.1031, -104.366, 0.33 ) }
    dend_10 { pt3dadd( 142.115, -81.7184, -106.003, 0.67 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 62/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 74.3863, -59.7709, -79.1871, 0.33 ) }
    dend_9 { pt3dadd( 75.422, -62.2042, -82.5491, 0.33 ) }
    dend_9 { pt3dadd( 75.6449, -62.6616, -83.206, 0.67 ) }
    dend_9 { pt3dadd( 77.6735, -66.2594, -88.5295, 0.33 ) }
    dend_9 { pt3dadd( 77.8924, -66.6413, -89.1271, 0.67 ) }
    dend_9 { pt3dadd( 79.5911, -69.6627, -94.0596, 0.33 ) }
    dend_9 { pt3dadd( 79.7545, -70.0156, -94.6881, 0.67 ) }
    dend_9 { pt3dadd( 80.8725, -72.8213, -100.219, 0.33 ) }
    dend_9 { pt3dadd( 81.0926, -73.517, -101.554, 1.33 ) }
    dend_9 { pt3dadd( 81.9283, -76.5513, -107.4, 0.33 ) }
    dend_9 { pt3dadd( 82.1608, -77.5961, -109.465, 0.67 ) }
    dend_9 { pt3dadd( 82.7744, -81.7994, -118.265, 0.33 ) }
    dend_9 { pt3dadd( 82.8296, -82.6365, -120.073, 1.33 ) }
    dend_9 { pt3dadd( 82.5768, -84.5399, -124.214, 0.33 ) }
    // Section: dend_23, id: dend_23, parent: dend_19 (entry count 76/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( 2.63329, -36.0758, 15.8771, 0.67 ) }
    dend_23 { pt3dadd( 2.257, -38.5798, 19.0372, 0.67 ) }
    dend_23 { pt3dadd( 2.00699, -41.7228, 22.8029, 0.67 ) }
    dend_23 { pt3dadd( 2.17017, -43.7944, 25.3773, 0.67 ) }
    dend_23 { pt3dadd( 2.34311, -45.6169, 27.7221, 0.67 ) }
    dend_23 { pt3dadd( 2.43963, -46.4225, 28.743, 0.67 ) }
    dend_23 { pt3dadd( 2.51601, -47.484, 29.9776, 0.33 ) }
    dend_23 { pt3dadd( 2.60825, -48.9838, 31.6133, 0.67 ) }
    dend_23 { pt3dadd( 2.7055, -51.1068, 34.0255, 0.33 ) }
    dend_23 { pt3dadd( 3.01952, -53.4968, 36.3144, 0.67 ) }
    dend_23 { pt3dadd( 3.13346, -54.5096, 37.1742, 0.33 ) }
    dend_23 { pt3dadd( 3.2398, -57.0927, 39.5252, 0.67 ) }
    dend_23 { pt3dadd( 2.92964, -60.0213, 42.2094, 0.33 ) }
    // Section: dend_20, id: dend_20, parent: dend_19 (entry count 89/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 2.63329, -36.0758, 15.8771, 0.67 ) }
    dend_20 { pt3dadd( 2.41247, -36.5144, 21.5255, 0.67 ) }
    dend_20 { pt3dadd( 2.25699, -36.8232, 25.5027, 0.67 ) }
    dend_20 { pt3dadd( 2.02666, -37.2807, 31.3944, 0.67 ) }
    dend_20 { pt3dadd( 1.85752, -37.6166, 35.7209, 0.67 ) }
    // Section: dend_14, id: dend_14, parent: dend_12 (entry count 94/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 43.0993, -161.714, -31.4923, 0.33 ) }
    dend_14 { pt3dadd( 44.8731, -165.593, -30.9386, 0.33 ) }
    dend_14 { pt3dadd( 45.001, -165.873, -30.8813, 0.67 ) }
    dend_14 { pt3dadd( 47.0886, -170.511, -29.8011, 0.33 ) }
    dend_14 { pt3dadd( 47.4831, -171.354, -29.6082, 0.67 ) }
    dend_14 { pt3dadd( 48.7238, -173.946, -29.0246, 0.33 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_14 { pt3dadd( 48.8619, -174.229, -28.9643, 0.67 ) }
    dend_14 { pt3dadd( 50.1764, -176.896, -28.4852, 0.33 ) }
    dend_14 { pt3dadd( 50.5938, -177.795, -28.3992, 1.33 ) }
    dend_14 { pt3dadd( 52.3437, -181.636, -28.2992, 0.33 ) }
    dend_14 { pt3dadd( 52.5136, -182.039, -28.3112, 0.67 ) }
    dend_14 { pt3dadd( 53.5196, -184.53, -28.5982, 0.33 ) }
    dend_14 { pt3dadd( 54.0069, -185.826, -28.8319, 0.67 ) }
    dend_14 { pt3dadd( 55.7301, -190.707, -30.0628, 0.33 ) }
    dend_14 { pt3dadd( 56.0195, -191.622, -30.2997, 0.67 ) }
    dend_14 { pt3dadd( 56.5227, -193.485, -30.7858, 0.33 ) }
    dend_14 { pt3dadd( 56.9381, -195.129, -31.2079, 0.67 ) }
    dend_14 { pt3dadd( 57.3634, -196.936, -31.6654, 0.33 ) }
    dend_14 { pt3dadd( 57.6602, -198.211, -31.9577, 0.67 ) }
    dend_14 { pt3dadd( 58.3173, -200.989, -32.3972, 0.33 ) }
    dend_14 { pt3dadd( 58.6112, -202.349, -32.6061, 1.33 ) }
    dend_14 { pt3dadd( 59.221, -205.096, -32.9983, 0.33 ) }
    dend_14 { pt3dadd( 59.221, -205.096, -32.9983, 0.67 ) }
    // Section: dend_13, id: dend_13, parent: dend_12 (entry count 17/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 43.0993, -161.714, -31.4923, 0.67 ) }
    dend_13 { pt3dadd( 43.0184, -164.069, -32.4821, 0.67 ) }
    dend_13 { pt3dadd( 42.8744, -165.643, -33.2472, 0.33 ) }
    dend_13 { pt3dadd( 42.8221, -166.235, -33.5097, 0.67 ) }
    dend_13 { pt3dadd( 42.5103, -170.146, -35.161, 0.33 ) }
    dend_13 { pt3dadd( 42.4957, -170.441, -35.2981, 0.67 ) }
    dend_13 { pt3dadd( 42.3559, -175.265, -37.6324, 0.33 ) }
    dend_13 { pt3dadd( 42.4737, -178.077, -39.1321, 1.33 ) }
    dend_13 { pt3dadd( 42.7843, -181.274, -40.9359, 0.33 ) }
    dend_13 { pt3dadd( 42.8509, -181.665, -41.15, 0.67 ) }
    dend_13 { pt3dadd( 43.7124, -185.325, -43.0454, 0.33 ) }
    dend_13 { pt3dadd( 43.8313, -185.699, -43.2607, 0.67 ) }
    dend_13 { pt3dadd( 45.8497, -190.602, -46.3063, 0.33 ) }
    dend_13 { pt3dadd( 46.4685, -192.01, -47.1108, 1.33 ) }
    dend_13 { pt3dadd( 47.7693, -194.857, -48.7268, 0.33 ) }
    dend_13 { pt3dadd( 48.1603, -195.703, -49.1492, 1.33 ) }
    dend_13 { pt3dadd( 50.1432, -199.962, -50.9546, 0.33 ) }
    dend_13 { pt3dadd( 50.5529, -200.817, -51.3239, 0.67 ) }
    dend_13 { pt3dadd( 51.8912, -203.517, -52.4763, 0.33 ) }
    dend_13 { pt3dadd( 52.1979, -204.118, -52.7437, 1.33 ) }
    dend_13 { pt3dadd( 55.4338, -210.306, -55.5559, 0.33 ) }
    dend_13 { pt3dadd( 55.9435, -211.257, -55.9696, 0.67 ) }
    dend_13 { pt3dadd( 58.4105, -215.779, -57.6748, 0.33 ) }
    dend_13 { pt3dadd( 58.5584, -216.042, -57.7861, 0.67 ) }
    // Section: dend_22, id: dend_22, parent: dend_20 (entry count 41/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( 1.85752, -37.6166, 35.7209, 0.67 ) }
    dend_22 { pt3dadd( 3.49783, -37.2669, 37.801, 0.67 ) }
    dend_22 { pt3dadd( 4.67746, -36.654, 39.3843, 0.67 ) }
    dend_22 { pt3dadd( 6.02471, -35.7789, 41.3137, 0.67 ) }
    dend_22 { pt3dadd( 8.13255, -34.181, 44.6697, 0.67 ) }
    dend_22 { pt3dadd( 9.12961, -33.3632, 46.5047, 0.67 ) }
    dend_22 { pt3dadd( 9.63368, -32.9142, 47.5157, 0.67 ) }
    dend_22 { pt3dadd( 11.9792, -30.4836, 52.5486, 0.67 ) }
    dend_22 { pt3dadd( 12.4549, -29.9295, 53.6074, 1.33 ) }
    dend_22 { pt3dadd( 13.5409, -28.6281, 56.0343, 0.67 ) }
    dend_22 { pt3dadd( 14.8494, -27.224, 58.9827, 0.67 ) }
    dend_22 { pt3dadd( 15.5513, -26.5523, 60.5063, 1.33 ) }
    dend_22 { pt3dadd( 16.5798, -25.8221, 62.5325, 0.33 ) }
    dend_22 { pt3dadd( 17.6106, -25.3052, 64.4112, 0.67 ) }
    dend_22 { pt3dadd( 18.4906, -24.9281, 65.8277, 0.33 ) }
    dend_22 { pt3dadd( 19.4134, -24.6118, 67.0666, 0.67 ) }
    dend_22 { pt3dadd( 20.1545, -24.395, 67.916, 0.33 ) }
    dend_22 { pt3dadd( 20.9477, -24.2339, 68.8923, 0.67 ) }
    dend_22 { pt3dadd( 23.0975, -23.8193, 72.2474, 0.67 ) }
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 60/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 1.85752, -37.6166, 35.7209, 0.67 ) }
    dend_21 { pt3dadd( -1.03131, -40.4966, 39.9327, 0.67 ) }
    dend_21 { pt3dadd( -3.56161, -43.0192, 43.6218, 0.67 ) }
    dend_21 { pt3dadd( -5.77805, -45.229, 46.8533, 0.67 ) }
    dend_21 { pt3dadd( -8.08387, -47.5278, 50.2151, 0.33 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_40, dend_37, dend_32, dend_25, dend_0, dend_39, dend_38, dend_36, dend_33, dend_29, dend_26, dend_6, dend_1, dend_35, dend_34, dend_31, dend_30, dend_28, dend_27, dend_16, dend_7, dend_3, dend_2, dend_18, dend_17, dend_11, dend_8, dend_5, dend_4, dend_24, dend_19, dend_15, dend_12, dend_10, dend_9, dend_23, dend_20, dend_14, dend_13, dend_22, dend_21]}
    ModelViewParmSubset_2 = new SectionList()
    dend_40 ModelViewParmSubset_2.append()
    dend_37 ModelViewParmSubset_2.append()
    dend_32 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_39 ModelViewParmSubset_2.append()
    dend_38 ModelViewParmSubset_2.append()
    dend_36 ModelViewParmSubset_2.append()
    dend_33 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_35 ModelViewParmSubset_2.append()
    dend_34 ModelViewParmSubset_2.append()
    dend_31 ModelViewParmSubset_2.append()
    dend_30 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_40, dend_37, dend_32, dend_25, dend_0, dend_39, dend_38, dend_36, dend_33, dend_29, dend_26, dend_6, dend_1, dend_35, dend_34, dend_31, dend_30, dend_28, dend_27, dend_16, dend_7, dend_3, dend_2, dend_18, dend_17, dend_11, dend_8, dend_5, dend_4, dend_24, dend_19, dend_15, dend_12, dend_10, dend_9, dend_23, dend_20, dend_14, dend_13, dend_22, dend_21]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_40 ModelViewParmSubset_4.append()
    dend_37 ModelViewParmSubset_4.append()
    dend_32 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_39 ModelViewParmSubset_4.append()
    dend_38 ModelViewParmSubset_4.append()
    dend_36 ModelViewParmSubset_4.append()
    dend_33 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_35 ModelViewParmSubset_4.append()
    dend_34 ModelViewParmSubset_4.append()
    dend_31 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()

    // Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_40, dend_37, dend_32, dend_25, dend_0, axon_0, dend_39, dend_38, dend_36, dend_33, dend_29, dend_26, dend_6, dend_1, axon_1, dend_35, dend_34, dend_31, dend_30, dend_28, dend_27, dend_16, dend_7, dend_3, dend_2, dend_18, dend_17, dend_11, dend_8, dend_5, dend_4, dend_24, dend_19, dend_15, dend_12, dend_10, dend_9, dend_23, dend_20, dend_14, dend_13, dend_22, dend_21]}
    ModelViewParmSubset_5 = new SectionList()
    dend_40 ModelViewParmSubset_5.append()
    dend_37 ModelViewParmSubset_5.append()
    dend_32 ModelViewParmSubset_5.append()
    dend_25 ModelViewParmSubset_5.append()
    dend_0 ModelViewParmSubset_5.append()
    axon_0 ModelViewParmSubset_5.append()
    dend_39 ModelViewParmSubset_5.append()
    dend_38 ModelViewParmSubset_5.append()
    dend_36 ModelViewParmSubset_5.append()
    dend_33 ModelViewParmSubset_5.append()
    dend_29 ModelViewParmSubset_5.append()
    dend_26 ModelViewParmSubset_5.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_6 ModelViewParmSubset_5.append()
    dend_1 ModelViewParmSubset_5.append()
    axon_1 ModelViewParmSubset_5.append()
    dend_35 ModelViewParmSubset_5.append()
    dend_34 ModelViewParmSubset_5.append()
    dend_31 ModelViewParmSubset_5.append()
    dend_30 ModelViewParmSubset_5.append()
    dend_28 ModelViewParmSubset_5.append()
    dend_27 ModelViewParmSubset_5.append()
    dend_16 ModelViewParmSubset_5.append()
    dend_7 ModelViewParmSubset_5.append()
    dend_3 ModelViewParmSubset_5.append()
    dend_2 ModelViewParmSubset_5.append()
    dend_18 ModelViewParmSubset_5.append()
    dend_17 ModelViewParmSubset_5.append()
    dend_11 ModelViewParmSubset_5.append()
    dend_8 ModelViewParmSubset_5.append()
    dend_5 ModelViewParmSubset_5.append()
    dend_4 ModelViewParmSubset_5.append()
    dend_24 ModelViewParmSubset_5.append()
    dend_19 ModelViewParmSubset_5.append()
    dend_15 ModelViewParmSubset_5.append()
    dend_12 ModelViewParmSubset_5.append()
    dend_10 ModelViewParmSubset_5.append()
    dend_9 ModelViewParmSubset_5.append()
    dend_23 ModelViewParmSubset_5.append()
    dend_20 ModelViewParmSubset_5.append()
    dend_14 ModelViewParmSubset_5.append()
    dend_13 ModelViewParmSubset_5.append()
    dend_22 ModelViewParmSubset_5.append()
    dend_21 ModelViewParmSubset_5.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_40]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_40 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_39]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_39 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_38]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_38 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_36]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_36 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_33]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_33 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_35]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_35 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_34]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_34 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_31]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_31 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_30 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_28 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_27 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_17 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_8 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_5 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_4 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_35 = new SectionList()
    dend_15 OneSecGrp_SectionRef_35.append()

    // Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_36 = new SectionList()
    dend_12 OneSecGrp_SectionRef_36.append()

    // Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_37 = new SectionList()
    dend_10 OneSecGrp_SectionRef_37.append()

    // Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_38 = new SectionList()
    dend_9 OneSecGrp_SectionRef_38.append()

    // Group: {name=OneSecGrp_SectionRef_41, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_41 = new SectionList()
    dend_14 OneSecGrp_SectionRef_41.append()

    // Group: {name=OneSecGrp_SectionRef_42, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_42 = new SectionList()
    dend_13 OneSecGrp_SectionRef_42.append()

    // Group: {name=OneSecGrp_SectionRef_43, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_43 = new SectionList()
    dend_22 OneSecGrp_SectionRef_43.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_25 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_0 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_6 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_26 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_1 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_32]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_32 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_29 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_16 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_37]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_37 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_18 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_19 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_3 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_7 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_40 = new SectionList()
    dend_20 OneSecGrp_SectionRef_40.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_2 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_11 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_39 = new SectionList()
    dend_23 OneSecGrp_SectionRef_39.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_24 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_44, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_44 = new SectionList()
    dend_21 OneSecGrp_SectionRef_44.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36, dend_37, dend_38, dend_39, dend_40], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()
    dend_31 basal.append()
    dend_32 basal.append()
    dend_33 basal.append()
    dend_34 basal.append()
    dend_35 basal.append()
    dend_36 basal.append()
    dend_37 basal.append()
    dend_38 basal.append()
    dend_39 basal.append()
    dend_40 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_40, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_25, dend_0, axon_0, axon_0, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_39, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_26, dend_26, dend_26, dend_26, dend_26, dend_6, dend_1, dend_1, dend_1, axon_1, axon_1, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_16, dend_16, dend_16, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_18, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_19, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_20, dend_20, dend_20, dend_20, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_40 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_25 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_39 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_26 all.append()
    dend_6 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_18 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_19 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_10()
}

proc subsets_10() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.993125  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.0  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.005611  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.068459995  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.517764  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 6.3E-5  // units: S cm-2
        e_pas_nml2 = -64.6017  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 3.45E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.077616  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.002099  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 1.13999995E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.26087198  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-5  // units: S cm-2
        e_pas_nml2 = -69.78141  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 3.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.395881  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009986  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 5.0100003E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009728  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 2.7999999E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cACint_237_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cACint_237_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_40 nseg = 9
    dend_39 nseg = 5
    dend_38 nseg = 7
    dend_36 nseg = 15
    dend_33 nseg = 3
    dend_35 nseg = 7
    dend_34 nseg = 5
    dend_31 nseg = 9
    dend_30 nseg = 5
    dend_28 nseg = 5
    dend_27 nseg = 3
    dend_17 nseg = 3
    dend_8 nseg = 5
    dend_5 nseg = 5
    dend_4 nseg = 15
    dend_15 nseg = 7
    dend_12 nseg = 5
    dend_10 nseg = 3
    dend_9 nseg = 3
    dend_14 nseg = 3
    dend_13 nseg = 3
    dend_22 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cACint209_L4_BTC_6909c18187_0_0


