// Cell: cNAC187_L1_NGCDA_c1b837d894_0_0
/*
{
  "id" : "cNAC187_L1_NGCDA_c1b837d894_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-2.48569, -6.90544, 0.0, 3.00414", "-2.31617, -6.1725, 0.0, 5.1666", "-2.14664, -5.43956, 0.0, 7.66052", "-1.97711, -4.70663, 0.0, 9.30052", "-1.80758, -3.97369, 0.0, 10.5298", "-1.63805, -3.24075, 0.0, 11.6445", "-1.46852, -2.50781, 0.0, 12.1344", "-1.29899, -1.77488, 0.0, 12.5209", "-1.12946, -1.04194, 0.0, 12.8728", "-0.959926, -0.309003, 0.0, 13.2248", "-0.790396, 0.423934, 0.0, 13.2522", "-0.620866, 1.15687, 0.0, 13.1027", "-0.451336, 1.88981, 0.0, 12.9579", "-0.281807, 2.62275, 0.0, 12.8305", "-0.112277, 3.35568, 0.0, 12.5604", "0.0572532, 4.08862, 0.0, 12.1963", "0.226783, 4.82156, 0.0, 11.554", "0.396313, 5.55449, 0.0, 10.4434", "0.565843, 6.28743, 0.0, 9.14943", "0.735373, 7.02037, 0.0, 6.97128", "0.904903, 7.75331, 0.0, 3.71762" ]
  }, {
    "name" : "dend_34",
    "id" : "dend_34",
    "points3d" : [ "-3.94808, 0.523407, 6.09, 1.15", "-5.85713, 0.577374, 7.83752, 1.15", "-8.39358, 0.703501, 10.2376, 1.15", "-10.1731, 0.907046, 12.088, 1.15", "-11.3604, 1.15421, 13.5281, 1.15", "-12.8509, 1.46451, 15.336, 0.92", "-14.0924, 1.72294, 16.8418, 0.92", "-14.9195, 1.96263, 18.0308, 0.92", "-15.9489, 2.31195, 19.5841, 0.92", "-16.9192, 2.90191, 21.4682, 1.15" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999989780389625
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "-1.43808, -6.28659, -9.43, 2.29", "-1.43808, -6.28659, -9.43, 2.29", "-1.78528, -6.86956, -11.0341, 2.29", "-2.1106, -7.41578, -12.537, 2.29" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999989780389625
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "5.35192, 4.18341, -9.58, 1.15", "5.35192, 4.18341, -9.58, 1.15", "6.47511, 5.46369, -10.4199, 1.15", "7.36922, 6.44214, -11.2164, 1.15", "8.04042, 7.1559, -11.9418, 1.38", "8.76162, 7.89211, -12.8612, 1.38", "9.45832, 8.61953, -13.9284, 1.15", "10.2678, 9.45006, -15.2248, 1.15", "11.2428, 10.4175, -16.9162, 1.15", "12.1601, 11.2948, -18.67, 1.15", "13.074, 12.191, -20.7052, 0.92", "14.1073, 13.2537, -23.4078, 0.92" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999989780389625
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "2.86192, 6.18341, -1.91, 4.59", "2.86192, 6.18341, -1.91, 4.59", "3.19557, 7.24924, -2.48874, 4.36", "3.65046, 8.70237, -3.27779, 3.21", "3.94657, 9.64828, -3.79142, 2.52", "4.3175, 10.8332, -4.43482, 1.61", "4.59538, 11.7208, -4.91682, 1.61", "5.01443, 13.0257, -5.62107, 1.61" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999989780389625
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-3.99808, 6.85341, 1.25, 3.21", "-3.99808, 6.85341, 1.25, 3.21", "-4.31501, 7.99819, 1.45153, 2.06", "-5.06525, 10.7081, 1.92858, 1.61", "-5.53821, 12.4164, 2.22932, 1.61", "-6.22651, 14.9026, 2.667, 1.61" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999989780389625
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "0.904903, 7.75331, 0.0, 0.988319", "4.28518, 22.3675, 0.0, 0.988319", "7.66546, 36.9816, 0.0, 0.988319" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_36",
    "id" : "dend_36",
    "points3d" : [ "-16.9192, 2.90191, 21.4682, 0.92", "-15.9672, 2.72104, 22.1416, 0.92", "-14.8037, 2.35332, 22.9286, 0.69", "-13.5617, 1.76785, 23.778, 0.69", "-12.5676, 1.2992, 24.4579, 0.92", "-11.2394, 0.673069, 25.3664, 0.69", "-10.0886, 0.130568, 26.1534, 0.69", "-8.72295, -0.603995, 27.1577, 0.69", "-7.66211, -1.22556, 27.8457, 1.15" ],
    "parent" : "dend_34",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_35",
    "id" : "dend_35",
    "points3d" : [ "-16.9192, 2.90191, 21.4682, 0.92", "-16.4808, 3.66209, 23.0593, 0.92", "-15.9161, 4.64126, 25.1087, 0.69", "-15.305, 5.70097, 27.3267, 0.69", "-14.7619, 6.6428, 29.298, 0.69", "-14.4495, 7.18443, 30.4316, 0.69" ],
    "parent" : "dend_34",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "-2.1106, -7.41578, -12.537, 1.38", "-0.84478, -8.0351, -13.358, 1.38", "0.521073, -8.70336, -14.2439, 1.38", "1.71077, -9.28543, -15.0155, 1.38", "2.91056, -9.87245, -15.7936, 1.38", "4.30787, -10.5561, -16.6999, 1.38" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "-2.1106, -7.41578, -12.537, 0.92", "-2.68347, -7.04381, -13.2903, 0.92", "-3.38564, -6.19286, -14.4121, 0.69", "-3.64493, -5.87864, -14.8264, 0.69", "-4.09661, -5.33126, -15.548, 0.92", "-4.51416, -4.82524, -16.2152, 1.15", "-5.04137, -4.18633, -17.0575, 1.15", "-5.35085, -3.50663, -17.8328, 0.92" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "14.1073, 13.2537, -23.4078, 0.92", "14.3906, 12.0436, -25.1484, 0.92", "14.8523, 10.6089, -27.0757, 0.92", "15.3253, 9.28681, -28.83, 0.92", "15.7293, 8.10337, -30.3762, 0.92", "16.0369, 7.19813, -31.6556, 0.92", "16.3695, 6.27858, -33.1689, 0.92", "16.6288, 5.60912, -34.5263, 0.92", "17.0584, 5.09243, -36.3202, 0.92", "17.2788, 5.03965, -37.028, 0.92", "17.9568, 5.15417, -38.7718, 0.92", "18.7186, 5.47131, -40.688, 0.92", "19.5784, 6.04618, -42.9521, 0.92", "20.1433, 6.50566, -44.5104, 0.92", "21.0766, 7.23153, -46.503, 0.92", "22.6852, 8.22983, -49.3133, 0.92" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "14.1073, 13.2537, -23.4078, 0.69", "13.9037, 12.5696, -23.7575, 0.69", "13.4112, 11.1394, -24.3616, 0.46", "12.8233, 9.85861, -24.9877, 0.46", "12.3214, 8.97843, -25.5443, 0.46", "11.7873, 8.15985, -26.2057, 0.46", "11.1038, 7.1427, -27.1911, 0.46", "10.3818, 6.17361, -28.3867, 0.46", "9.34381, 4.83008, -30.4102, 0.46", "8.70374, 3.94104, -31.9988, 0.46", "8.12367, 3.03549, -33.9788, 0.46", "7.79982, 2.33662, -35.9113, 0.46", "7.73835, 1.74108, -37.9796, 0.46", "7.88545, 1.31747, -39.7504, 0.46", "8.18965, 1.03145, -41.1499, 0.46", "8.58574, 0.784616, -42.4746, 0.46", "9.2668, 0.400021, -44.5692, 0.46", "9.96742, -0.0433841, -46.6917, 0.46", "10.482, -0.405645, -48.2917, 0.46", "11.1571, -0.931227, -50.6636, 0.46", "11.6221, -1.3201, -52.6021, 0.46", "12.205, -1.73796, -55.3176, 0.46", "12.7415, -1.99758, -58.1745, 0.46", "13.0106, -1.99771, -59.8702, 0.46", "13.3655, -1.87566, -62.2808, 0.46", "13.8354, -1.48593, -65.4897, 0.46", "14.1394, -1.06461, -67.4949, 0.46", "14.3102, -0.705722, -68.5628, 0.46", "14.4801, -0.0743461, -69.9109, 0.46" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "5.01443, 13.0257, -5.62107, 1.83", "5.17769, 14.4977, -7.2273, 1.83", "5.28576, 15.4722, -8.29063, 1.61", "5.51828, 17.5687, -10.5782, 1.61" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "5.01443, 13.0257, -5.62107, 0.92", "5.92403, 14.4299, -5.51872, 0.92", "6.61141, 16.2314, -5.71782, 0.92", "6.85001, 17.3788, -5.90632, 0.69", "7.03759, 18.768, -6.04159, 0.69", "7.22615, 20.6224, -6.1714, 0.69", "7.45725, 22.6933, -6.26257, 0.69", "7.54307, 24.1995, -6.36686, 0.69", "7.54746, 25.9313, -6.53444, 0.92", "7.50535, 27.7417, -6.67961, 1.15", "7.47619, 28.8428, -6.70729, 0.69", "7.43673, 29.9271, -6.59364, 0.46", "7.51627, 31.7619, -6.17847, 0.46" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-6.22651, 14.9026, 2.667, 1.83", "-6.32354, 15.1086, 2.41243, 1.83", "-7.21422, 16.4011, 0.750463, 1.83", "-8.07268, 17.4346, -0.711943, 1.61", "-8.76542, 18.1798, -1.78816, 1.15", "-9.54791, 19.0215, -3.00382, 1.15", "-10.2972, 19.8274, -4.16789, 1.15", "-11.236, 20.7113, -5.49996, 1.15", "-12.0945, 21.3479, -6.50754, 1.38", "-13.4806, 22.2209, -7.91582, 1.15" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-6.22651, 14.9026, 2.667, 0.92", "-6.06413, 16.4493, 3.05737, 0.92", "-6.06021, 17.5059, 3.2802, 0.92", "-6.07609, 18.906, 3.55307, 0.92", "-6.05682, 19.9199, 3.74615, 0.92", "-5.97779, 20.7425, 3.88421, 0.92", "-5.63776, 22.716, 4.12625, 0.92", "-5.43431, 23.3711, 4.16296, 0.92", "-5.20633, 24.0063, 4.12565, 0.92", "-4.93, 24.7944, 3.97145, 0.92", "-4.52522, 26.1413, 3.52788, 0.92", "-4.29516, 26.9735, 3.08814, 0.92", "-4.1621, 27.4583, 2.7782, 0.92", "-4.07252, 28.3214, 2.18912, 0.92", "-4.11138, 29.2046, 1.57412, 0.69", "-4.19811, 30.2352, 0.864156, 0.69", "-4.27781, 31.2124, 0.146535, 0.69", "-4.25263, 32.0698, -0.634924, 0.69", "-4.14963, 32.8731, -1.45015, 0.69", "-3.97572, 33.3394, -1.98507, 0.69", "-3.56585, 33.9579, -2.75277, 0.46", "-2.78248, 34.6454, -3.7905, 0.46", "-1.94698, 34.9132, -4.8162, 0.46" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "7.66546, 36.9816, 0.0, 0.480339", "11.0457, 51.5958, 0.0, 0.480339", "14.426, 66.21, 0.0, 0.480339" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_38",
    "id" : "dend_38",
    "points3d" : [ "-7.66211, -1.22556, 27.8457, 0.69", "-6.19865, -1.42172, 28.655, 0.69", "-4.17282, -1.56799, 29.5127, 0.69", "-2.76664, -1.66951, 30.1081, 0.69", "-1.25052, -1.77898, 30.75, 0.69", "0.0736692, -1.87459, 31.3106, 0.69", "1.75184, -1.99575, 32.0211, 0.69", "3.913, -2.11532, 32.8092, 0.69" ],
    "parent" : "dend_36",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_37",
    "id" : "dend_37",
    "points3d" : [ "-7.66211, -1.22556, 27.8457, 0.69", "-7.19949, -1.98225, 28.5852, 0.69", "-6.89101, -2.41875, 29.017, 0.69", "-6.50626, -2.87078, 29.4608, 0.69", "-6.01275, -3.40361, 29.9854, 0.69", "-5.58876, -3.88808, 30.4585, 0.69", "-5.23977, -4.3227, 30.8603, 0.69", "-4.90109, -4.7423, 31.2374, 0.69", "-4.55817, -5.22924, 31.6703, 0.69", "-4.18589, -5.85309, 32.2257, 0.69", "-3.88101, -6.43336, 32.7659, 0.69", "-3.63644, -7.01159, 33.3408, 0.69", "-3.4865, -7.55917, 33.9433, 0.69", "-3.35996, -8.30756, 34.8591, 0.69", "-3.32354, -8.73334, 35.4084, 0.69", "-3.31137, -9.18148, 36.0367, 0.69", "-3.31299, -9.52212, 36.5815, 0.46", "-3.36197, -9.9319, 37.3694, 0.46", "-3.47597, -10.3315, 38.2578, 0.46" ],
    "parent" : "dend_36",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_31",
    "id" : "dend_31",
    "points3d" : [ "4.30787, -10.5561, -16.6999, 0.92", "4.48372, -12.1458, -16.7091, 0.92", "4.60579, -13.6461, -16.6568, 0.92", "4.64318, -14.7871, -16.5996, 0.92", "4.66746, -15.9206, -16.5419, 0.92", "4.65115, -17.2977, -16.4598, 0.92", "4.60631, -17.8393, -16.4292, 0.92", "4.41206, -18.8569, -16.3752, 0.92", "3.90197, -20.8177, -16.2856, 0.92", "3.41606, -22.3439, -16.2361, 0.92", "2.93266, -23.7879, -16.2802, 0.92", "2.31561, -25.478, -16.3772, 1.15", "1.47965, -27.6278, -16.5352, 0.92", "1.14452, -28.457, -16.6238, 0.92", "0.663524, -29.5117, -16.765, 1.15", "-0.164009, -31.167, -17.0533, 0.92" ],
    "parent" : "dend_27",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "4.30787, -10.5561, -16.6999, 0.69", "5.78202, -11.2081, -17.0148, 0.69", "7.21493, -11.8775, -17.4592, 0.69", "8.51913, -12.557, -17.9814, 0.46", "9.87338, -13.3489, -18.6429, 0.46", "11.1709, -14.2036, -19.3457, 0.46", "12.5353, -15.2027, -20.2026, 0.46", "13.3163, -15.9128, -20.9462, 0.46", "13.8254, -16.5105, -21.6516, 0.46", "14.2215, -17.097, -22.3669, 0.46", "14.5167, -17.6938, -23.0233, 0.46", "14.8547, -18.5314, -23.9008, 0.46", "15.2703, -19.8025, -25.1512, 0.46", "15.5078, -20.6275, -26.0081, 0.46", "15.7852, -21.5025, -26.9248, 0.46", "16.0119, -22.1901, -27.6594, 0.46" ],
    "parent" : "dend_27",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "-5.35085, -3.50663, -17.8328, 0.69", "-5.91734, -3.19779, -20.6981, 0.69", "-6.28625, -2.92799, -22.4914, 0.69", "-6.57976, -2.71524, -23.6828, 0.69", "-6.98827, -2.5073, -25.0456, 0.69", "-7.34798, -2.37243, -26.1015, 0.69", "-7.71812, -2.26117, -27.1222, 0.69", "-8.53106, -2.15204, -28.8262, 0.69", "-9.11258, -2.10996, -29.8704, 0.69", "-10.0824, -2.12834, -31.4291, 0.69", "-11.0105, -2.2562, -32.7294, 0.69", "-11.8291, -2.43224, -33.7635, 0.69", "-13.0373, -2.77776, -35.1486, 0.46", "-14.7411, -3.34454, -36.7898, 0.46", "-16.1303, -3.8114, -37.9459, 0.46", "-17.3751, -4.19643, -38.8463, 0.46", "-19.0936, -4.6565, -40.0141, 0.46", "-20.9209, -5.1424, -41.193, 0.46", "-23.6218, -5.83828, -42.8914, 0.23", "-24.7809, -6.08588, -43.5221, 0.46", "-26.5965, -6.3767, -44.47, 0.46", "-28.7272, -6.59825, -45.581, 0.46" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "-5.35085, -3.50663, -17.8328, 0.69", "-5.2108, -2.37828, -18.2065, 0.69", "-5.19103, -1.48655, -18.5637, 0.69", "-5.17713, -0.689081, -18.9096, 0.69", "-5.15622, 0.510611, -19.4301, 0.69", "-5.12867, 2.0915, -20.1159, 0.69", "-5.11426, 2.91781, -20.4744, 0.46", "-5.16315, 4.45806, -21.2171, 0.46", "-5.20412, 5.01048, -21.502, 0.46" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "22.6852, 8.22983, -49.3133, 0.69", "23.0582, 9.24884, -49.4959, 0.69", "23.2978, 9.90381, -49.6133, 0.69", "23.6461, 10.8554, -49.7838, 0.69" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "22.6852, 8.22983, -49.3133, 0.69", "21.7997, 6.51175, -50.3747, 0.69", "20.5711, 3.91621, -51.3076, 0.69", "19.8916, 2.20492, -51.8831, 0.69", "19.3217, 0.516514, -52.431, 0.69", "18.5854, -1.96163, -53.3174, 0.46", "17.6815, -5.72112, -55.055, 0.46", "17.4952, -6.88092, -55.5695, 0.23", "17.4437, -8.92696, -56.5218, 0.23", "17.4801, -9.68443, -56.9039, 0.23", "17.8014, -11.9314, -58.3593, 0.23", "18.4016, -14.5236, -60.5748, 0.23", "18.785, -15.8796, -61.9861, 0.23", "19.1032, -17.1815, -63.3461, 0.23" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "5.51828, 17.5687, -10.5782, 0.92", "6.45573, 18.8002, -10.5194, 0.92", "7.61402, 20.2389, -10.2434, 0.92", "8.48617, 21.3852, -9.91918, 0.92", "9.12396, 22.2387, -9.65241, 0.92", "10.1193, 23.6309, -9.22131, 1.15", "11.0963, 25.01, -8.78578, 0.92", "11.7129, 25.7918, -8.46892, 1.15", "12.7074, 26.9356, -7.96439, 0.92", "13.4547, 27.7516, -7.71015, 0.92", "14.2268, 28.6663, -7.58972, 0.92", "14.5995, 29.126, -7.6365, 0.92", "15.8011, 30.5006, -8.08418, 0.92", "16.7446, 31.4495, -8.65802, 0.92", "18.0295, 32.463, -9.82034, 0.92", "18.7862, 32.9659, -10.6027, 1.15", "19.8443, 33.5936, -11.7497, 0.92", "20.6574, 34.1327, -12.7187, 1.15", "21.6132, 34.9006, -13.996, 1.15", "23.1029, 36.2224, -16.0122, 0.69", "23.8844, 36.9174, -17.0452, 0.46", "24.2897, 37.2657, -17.5864, 0.46", "23.3222, 38.8676, -16.9851, 0.46", "22.1737, 40.3903, -16.3264, 0.23", "21.0253, 41.8353, -15.6384, 0.23", "20.5257, 42.3837, -15.3211, 0.23", "19.1823, 43.5851, -14.5253, 0.23", "18.3906, 44.1756, -14.0518, 0.23", "17.0844, 44.9113, -13.1681, 0.23" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "5.51828, 17.5687, -10.5782, 1.15", "6.00162, 18.8617, -11.5962, 1.15", "6.55761, 20.3918, -12.5092, 1.15", "7.17274, 22.1238, -13.2251, 1.15", "7.85542, 24.0386, -13.9367, 0.92", "8.16991, 24.8746, -14.2884, 1.15", "8.7927, 26.4644, -15.1552, 1.15", "9.20649, 27.4092, -15.8826, 1.15", "9.65668, 28.567, -17.0074, 1.15", "10.1296, 29.8851, -18.5259, 1.15", "10.469, 30.8408, -19.9817, 1.15", "10.8712, 31.9539, -22.2817, 1.15", "11.2043, 32.8578, -24.8144, 1.15", "11.31, 33.1424, -25.9851, 1.15" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-13.4806, 22.2209, -7.91582, 0.92", "-14.8708, 23.2299, -6.85456, 0.92", "-16.7693, 24.1866, -5.72214, 0.92", "-18.594, 24.7125, -4.84798, 0.92", "-20.3735, 24.898, -4.19004, 0.92", "-22.1599, 24.7127, -3.64108, 0.92", "-23.9114, 24.2054, -3.12349, 0.92", "-25.3609, 23.3369, -2.90899, 1.15", "-26.3694, 22.548, -2.8634, 1.15", "-27.1767, 21.8579, -2.87745, 0.92", "-28.6834, 20.5117, -2.93458, 0.92", "-29.9745, 19.423, -2.97637, 0.92", "-31.0734, 18.6137, -3.01873, 0.92", "-33.0275, 17.3866, -3.18312, 1.15", "-34.4856, 16.5965, -3.37539, 1.15", "-35.9925, 15.9269, -3.64936, 0.92", "-38.1249, 15.21, -4.15425, 0.92", "-40.3433, 14.7234, -4.74689, 0.92", "-41.865, 14.5882, -5.16846, 0.92", "-43.1401, 14.7014, -5.61395, 1.15", "-44.4756, 15.1666, -6.25421, 1.15", "-44.9095, 15.521, -6.5624, 1.15", "-45.7424, 16.7132, -7.46191, 0.92", "-46.3768, 18.0881, -8.37187, 0.69", "-46.8113, 19.2626, -9.10041, 0.69", "-47.2284, 20.6514, -9.96257, 0.69", "-47.5845, 21.9811, -10.8168, 0.46", "-47.8145, 23.0016, -11.5222, 0.46", "-48.0465, 24.3532, -12.5956, 0.46" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-13.4806, 22.2209, -7.91582, 0.92", "-13.5133, 23.2175, -8.75759, 0.92", "-13.5026, 24.1514, -9.52522, 0.92", "-13.5319, 24.8551, -10.1468, 0.92", "-13.5918, 25.5794, -10.8303, 0.92", "-13.6808, 26.2149, -11.525, 0.92", "-13.7638, 26.6663, -12.0936, 0.92", "-13.9741, 27.6113, -13.387, 0.92", "-14.166, 28.0402, -14.0333, 0.92", "-14.3046, 28.219, -14.352, 1.15", "-14.8337, 28.7405, -15.3419, 1.15", "-15.3002, 29.1741, -16.1429, 1.15", "-15.8177, 29.685, -17.0457, 1.15", "-16.4757, 30.503, -18.1992, 0.92", "-16.8933, 31.1969, -18.9732, 0.92", "-17.2544, 31.8386, -19.58, 0.92", "-17.6887, 32.5653, -20.1781, 0.69", "-18.1045, 33.1907, -20.6826, 0.69", "-18.6759, 33.9614, -21.363, 0.69", "-19.2236, 34.6878, -22.0608, 0.69", "-19.9925, 35.6818, -22.856, 0.69", "-20.7379, 36.5943, -23.4711, 0.92", "-21.5945, 37.5958, -23.9884, 1.15", "-22.4631, 38.5806, -24.3418, 1.15", "-23.3593, 39.5726, -24.4701, 0.92", "-24.8147, 41.3936, -24.0801, 0.69", "-25.4171, 42.241, -23.4771, 0.69", "-25.7755, 42.761, -22.7582, 0.69", "-26.0115, 43.0884, -22.1275, 0.69", "-26.3567, 43.5185, -20.9956, 0.69", "-26.5526, 43.6768, -20.3343, 0.69", "-26.9495, 43.7403, -19.2984, 0.69", "-27.308, 43.641, -18.358, 0.69" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_33",
    "id" : "dend_33",
    "points3d" : [ "-0.164009, -31.167, -17.0533, 0.69", "0.652574, -33.6018, -13.2805, 0.69", "1.14401, -35.3664, -10.9099, 0.69", "1.51134, -36.8695, -9.26105, 0.69", "1.86775, -38.3726, -7.89896, 0.69", "2.20524, -39.6449, -6.78814, 0.69", "2.357, -40.2198, -6.27518, 0.69", "2.62428, -41.1522, -5.55819, 0.69", "3.16577, -42.8019, -4.40504, 0.46", "4.0631, -44.8708, -3.04657, 0.69", "5.56753, -47.4838, -1.34918, 0.69", "6.59717, -49.0068, -0.421266, 0.69", "7.31053, -50.0027, 0.184273, 0.69", "8.40506, -51.4028, 1.08557, 0.69", "9.92756, -53.2794, 2.36198, 0.46", "10.7975, -54.3702, 3.22071, 0.46", "11.8912, -55.7632, 4.22238, 0.46", "13.0459, -57.2584, 5.32976, 0.46", "14.2095, -58.952, 6.8067, 0.46", "15.3393, -60.8193, 8.90672, 0.46", "16.434, -62.9373, 11.9226, 0.46" ],
    "parent" : "dend_31",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_32",
    "id" : "dend_32",
    "points3d" : [ "-0.164009, -31.167, -17.0533, 0.69", "-0.372621, -31.8141, -18.2048, 0.69", "-0.607311, -32.5953, -19.3772, 0.69", "-0.759093, -33.3781, -20.4047, 0.69", "-0.814526, -33.9697, -21.1305, 0.69", "-0.817184, -34.5355, -21.7575, 0.69", "-0.817695, -35.5142, -22.7361, 0.69", "-0.779329, -36.4208, -23.4752, 0.69", "-0.72075, -37.2635, -23.9886, 0.69", "-0.676012, -37.8142, -24.2904, 0.69", "-0.541909, -38.6049, -24.6876, 0.69", "-0.270593, -39.7592, -25.3283, 0.69", "-0.123662, -40.3481, -25.6866, 0.69", "0.0800166, -41.5504, -26.4684, 0.69", "0.140219, -42.537, -27.1719, 0.69", "0.116555, -43.7268, -28.0667, 0.92", "0.037255, -44.8998, -28.9885, 0.92", "-0.0125283, -45.3519, -29.3451, 0.69", "-0.231698, -46.315, -30.0919, 0.69", "-0.674917, -47.345, -30.8347, 0.69", "-0.949402, -47.7927, -31.1389, 0.69", "-1.23594, -48.1614, -31.4027, 0.69", "-1.77742, -48.7681, -31.786, 0.69", "-2.08416, -49.0866, -32.0196, 0.69", "-2.84993, -49.9101, -32.7489, 1.15", "-3.59738, -50.7802, -33.5291, 0.92", "-4.27214, -51.6103, -34.1808, 0.92", "-5.06734, -52.576, -34.8401, 0.92", "-6.31648, -54.124, -35.6871, 0.92", "-7.36657, -55.4593, -36.2485, 0.69", "-8.39921, -56.7419, -36.6275, 0.69", "-9.85518, -58.5603, -36.9445, 0.23", "-10.6911, -59.5764, -37.0446, 0.46", "-11.8326, -60.9493, -37.0628, 0.23", "-12.8592, -62.1355, -36.9793, 0.46", "-14.3106, -63.7238, -36.7926, 0.23", "-15.6478, -65.1343, -36.6437, 0.23", "-16.8798, -66.4736, -36.4888, 0.23", "-17.9566, -67.6844, -36.333, 0.23" ],
    "parent" : "dend_31",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "16.0119, -22.1901, -27.6594, 0.23", "14.8415, -23.6226, -27.0851, 0.23", "13.9023, -24.7721, -26.6244, 0.23", "13.2178, -25.61, -26.2885, 0.23", "12.1811, -26.8788, -25.7799, 0.23", "11.0124, -28.3092, -25.2065, 0.23" ],
    "parent" : "dend_28",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "16.0119, -22.1901, -27.6594, 0.46", "17.1535, -22.6128, -28.5023, 0.46", "18.1016, -22.9639, -29.2023, 0.46", "18.6615, -23.1713, -29.6157, 0.46", "19.8951, -23.6281, -30.5266, 0.69", "21.3165, -24.1544, -31.5761, 0.46" ],
    "parent" : "dend_28",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "23.6461, 10.8554, -49.7838, 0.46", "24.6711, 11.3352, -49.4291, 0.46", "26.0651, 12.1045, -49.0319, 0.46", "27.5286, 13.092, -48.7054, 0.46", "28.5821, 13.913, -48.5998, 0.46", "30.1241, 15.1397, -48.5361, 0.46", "32.2975, 16.825, -48.5175, 0.69", "33.227, 17.5578, -48.5939, 0.46", "34.9439, 18.9338, -48.9532, 0.69", "36.8192, 20.3188, -49.6155, 0.46", "37.628, 20.8042, -49.9448, 0.46", "38.321, 21.0598, -50.2391, 0.46", "39.4123, 21.2687, -50.7364, 0.46", "41.059, 21.4541, -51.4772, 0.69", "42.3564, 21.5416, -52.0846, 0.69", "44.2714, 21.7077, -53.0793, 0.46", "46.007, 21.94, -54.1542, 0.46", "47.4719, 22.1681, -55.1449, 0.46", "48.4053, 22.3537, -55.7939, 0.46", "49.5665, 22.58, -56.6664, 0.46", "50.9043, 22.8977, -57.7221, 0.46", "51.629, 23.1438, -58.4046, 0.46", "52.3303, 23.5006, -59.0775, 0.46", "53.3461, 24.0004, -59.9478, 0.46", "54.2665, 24.4861, -60.6473, 0.46", "55.1601, 24.9558, -61.2555, 0.46", "56.4653, 25.6125, -62.0722, 0.46", "57.4118, 26.1053, -62.6844, 0.46", "58.411, 26.654, -63.3998, 0.46", "59.6802, 27.2628, -64.3288, 0.46", "60.8001, 27.829, -65.1658, 0.46", "61.8702, 28.3962, -66.0353, 0.46", "62.7185, 28.8592, -66.7474, 0.46", "63.9177, 29.5586, -67.8125, 0.46", "64.989, 30.2466, -68.7888, 0.46", "66.3477, 31.0824, -69.8738, 0.46", "67.4999, 31.8229, -70.6659, 0.46", "68.4545, 32.4612, -71.2977, 0.46", "69.7316, 33.3183, -72.0992, 0.46", "70.4133, 33.7612, -72.4814, 0.46", "72.783, 35.3261, -73.8886, 0.46", "73.9022, 36.0173, -74.7079, 0.46", "75.024, 36.77, -75.8554, 0.46", "75.6742, 37.2483, -76.7462, 0.46", "76.028, 37.5271, -77.3392, 0.46", "76.7984, 38.0834, -78.7156, 0.46", "78.0689, 38.9277, -81.0352, 0.46", "78.9914, 39.3508, -82.4622, 0.46", "79.5139, 39.5231, -83.1094, 0.46", "80.2736, 39.7286, -83.9539, 0.46", "80.937, 39.877, -84.6632, 0.46", "81.646, 39.9575, -85.3597, 0.46", "82.6228, 39.8808, -86.3287, 0.46", "84.3093, 39.4342, -87.9095, 0.46", "85.7249, 38.7475, -89.271, 0.46", "86.7817, 37.9913, -90.2359, 0.69", "87.8451, 37.0037, -91.1352, 0.69", "88.9809, 35.7268, -92.034, 0.69", "90.4941, 33.9066, -93.0733, 0.46", "91.4381, 32.773, -93.5799, 0.46", "92.6213, 31.5659, -94.0275, 0.46", "93.5778, 30.6628, -94.3106, 0.46", "94.635, 29.7987, -94.5812, 0.23", "96.2492, 28.8453, -95.071, 0.23", "97.6299, 28.3259, -95.7182, 0.23", "99.1919, 28.0489, -96.4642, 0.23" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "23.6461, 10.8554, -49.7838, 0.46", "23.7467, 11.5804, -50.4988, 0.46", "23.8462, 12.1867, -51.0908, 0.46", "24.0877, 13.304, -52.1888, 0.46", "24.4511, 14.7206, -53.5853, 0.46", "24.7385, 15.82, -54.7603, 0.46", "24.9733, 16.8729, -55.9302, 0.46", "25.1455, 17.6358, -56.9342, 0.46", "25.2413, 18.0847, -57.5952, 0.46", "25.3722, 18.8032, -58.7336, 0.23", "25.4961, 19.5203, -59.9121, 0.23", "25.5219, 20.1516, -60.9742, 0.23", "25.4775, 21.4766, -63.366, 0.23", "25.4258, 21.9301, -64.3237, 0.23" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "11.31, 33.1424, -25.9851, 1.15", "10.4398, 33.7315, -28.7499, 1.15", "10.1867, 34.0409, -30.0472, 0.92", "9.93818, 34.6124, -32.3547, 0.92", "9.8312, 35.0726, -34.1686, 1.15", "9.77742, 35.7042, -36.5894, 0.92", "9.77925, 36.3829, -38.9914, 1.15", "9.86978, 37.1356, -41.3683, 1.15", "10.0102, 37.664, -42.7805, 1.15", "10.3021, 38.6396, -44.9985, 1.15", "10.5682, 39.4856, -46.7617, 1.15", "10.7191, 40.1004, -47.9068, 1.15", "10.9382, 41.2256, -49.8376, 0.92", "11.1507, 42.3803, -51.7534, 0.92", "11.3875, 43.3126, -53.2211, 0.92", "11.6954, 44.1961, -54.5167, 0.92", "11.9321, 44.8002, -55.3887, 0.92", "12.3711, 45.8387, -57.0359, 0.92", "12.6346, 46.4023, -58.0708, 0.92", "12.9441, 47.2057, -60.0942, 0.92", "12.9926, 47.4142, -60.7969, 0.92", "12.8708, 47.7449, -62.3269, 0.92", "12.4345, 48.1017, -63.9729, 0.92", "11.9908, 48.3777, -65.1334, 0.92", "11.4819, 48.7421, -66.5262, 0.92", "11.2188, 48.9589, -67.3491, 0.92", "11.0479, 49.3011, -68.4105, 0.92", "11.1774, 50.155, -70.303, 0.92", "11.5068, 50.9119, -71.52, 0.92", "11.9666, 51.9967, -73.1109, 0.92", "12.1861, 52.5069, -73.8673, 0.92", "12.3328, 53.0809, -74.6496, 0.92", "12.3164, 53.561, -75.265, 0.92", "12.1248, 54.0146, -75.8861, 0.69", "11.012, 55.3293, -77.9258, 0.69", "10.3749, 55.7975, -78.8249, 0.69", "8.9043, 56.4541, -80.6603, 0.69", "7.90875, 56.6205, -81.7552, 0.69", "7.19072, 56.5727, -82.4935, 0.69", "5.97306, 56.288, -83.7154, 0.69", "4.88482, 55.8448, -84.6077, 0.69", "3.93155, 55.3099, -85.1778, 0.69", "2.62883, 54.4417, -85.7127, 0.69", "1.78338, 53.8475, -85.9701, 0.69", "0.76035, 53.1063, -86.2246, 0.69", "-1.04071, 51.7381, -86.5922, 0.69", "-2.80978, 50.3137, -87.031, 0.69", "-4.23436, 49.1631, -87.435, 0.69", "-5.3592, 48.2321, -87.8181, 0.69", "-6.49782, 47.2889, -88.2461, 0.69", "-7.75497, 46.3055, -88.8412, 0.69", "-9.00982, 45.4273, -89.6617, 0.69", "-10.3417, 44.6679, -90.6416, 0.69", "-11.3836, 44.1684, -91.456, 0.69", "-12.3409, 43.8019, -92.233, 0.69", "-14.1204, 43.2415, -93.7426, 0.69", "-15.5324, 42.829, -95.1147, 0.69", "-16.28, 42.5713, -95.8706, 0.69", "-17.6875, 41.9394, -97.4212, 0.69", "-18.6243, 41.4271, -98.5757, 0.69", "-19.1, 41.0887, -99.2975, 0.92", "-19.9174, 40.3705, -100.701, 0.92", "-21.1131, 39.2648, -102.859, 0.92", "-22.1242, 38.3036, -104.764, 0.69", "-23.0256, 37.4833, -106.461, 0.69", "-24.3303, 36.4442, -108.849, 0.69", "-25.1505, 35.8931, -110.276, 0.69", "-26.0213, 35.5324, -111.531, 0.69", "-27.0239, 35.3984, -112.73, 0.69", "-27.7447, 35.4772, -113.33, 0.69", "-28.6801, 35.6518, -113.919, 0.69", "-30.0553, 35.8959, -114.641, 0.69", "-32.1422, 36.1549, -115.686, 0.46", "-33.4098, 36.2014, -116.321, 0.46", "-35.4396, 36.1565, -117.395, 0.46", "-36.4826, 36.088, -118.024, 0.46", "-37.3075, 36.0275, -118.559, 0.46", "-38.7342, 35.9288, -119.615, 0.46", "-40.5979, 35.647, -121.205, 0.46", "-41.5906, 35.3684, -122.192, 0.46", "-42.4492, 35.0509, -123.211, 0.46", "-43.2603, 34.7836, -124.247, 0.46", "-44.4811, 34.444, -125.602, 0.46", "-45.5726, 34.0831, -126.752, 0.46", "-46.9119, 33.551, -127.948, 0.46", "-48.0963, 33.0018, -128.723, 0.46", "-49.5479, 32.2339, -129.357, 0.46", "-52.6238, 30.7167, -130.278, 0.46", "-54.1599, 30.0203, -130.656, 0.46", "-54.9903, 29.6528, -130.883, 0.46", "-56.394, 29.0858, -131.316, 0.46", "-58.4518, 28.1833, -132.159, 0.46", "-59.7285, 27.633, -132.904, 0.46", "-61.7045, 26.9183, -134.426, 0.46", "-62.901, 26.6233, -135.417, 0.46", "-64.4622, 26.3688, -136.844, 0.46", "-66.1499, 26.236, -138.594, 0.46", "-66.9792, 26.2568, -139.641, 0.46", "-67.8915, 26.3682, -140.991, 0.46", "-69.0805, 26.7524, -143.023, 0.46", "-69.7625, 27.1102, -144.563, 0.46", "-70.093, 27.4261, -145.792, 0.46", "-70.73, 28.3125, -148.795, 0.46", "-71.1616, 29.0964, -151.428, 0.46", "-71.2899, 29.5348, -152.89, 0.46", "-71.275, 30.2131, -155.151, 0.46", "-71.0775, 31.0015, -157.856, 0.46" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "11.31, 33.1424, -25.9851, 1.38", "11.5514, 33.5403, -27.4592, 1.38", "12.0455, 34.3549, -30.4769, 1.38", "12.3789, 34.9046, -32.5136, 1.15" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "12.3789, 34.9046, -32.5136, 0.46", "13.4439, 36.2937, -33.351, 0.46", "14.5486, 37.7483, -34.2807, 0.46", "14.7205, 38.0103, -34.4542, 0.46", "15.3741, 39.1336, -35.1925, 0.46", "15.8871, 40.054, -35.7861, 0.46", "16.4425, 41.0366, -36.4755, 0.46", "16.8695, 41.836, -37.0839, 0.46", "17.5245, 42.9187, -38.0192, 0.46", "17.7963, 43.266, -38.3489, 0.69", "18.6032, 44.1534, -39.1266, 0.69", "19.6367, 45.1388, -39.9118, 0.69", "20.5127, 45.8744, -40.3664, 0.46", "21.7938, 46.7854, -40.6952, 0.46", "23.0899, 47.6616, -40.7055, 0.46", "24.7861, 48.7701, -40.5388, 0.46", "25.4926, 49.2452, -40.3225, 0.69", "26.1524, 49.7276, -39.9581, 0.69", "27.0235, 50.4386, -39.2463, 0.23", "27.7484, 51.2237, -38.3582, 0.23" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "12.3789, 34.9046, -32.5136, 0.69", "13.2476, 34.7177, -32.6137, 0.69", "14.5943, 34.461, -32.8221, 0.69", "15.4801, 34.3191, -32.9808, 0.69", "16.6373, 34.1712, -33.1963, 0.69", "17.1031, 34.1303, -33.3192, 1.15", "17.443, 34.1184, -33.4478, 0.92", "18.411, 34.2516, -34.0732, 0.92", "18.6929, 34.3408, -34.3121, 0.92", "18.9264, 34.4306, -34.5607, 0.92", "19.747, 34.8098, -35.5078, 0.92", "20.4889, 35.2078, -36.4393, 0.69", "20.853, 35.4802, -36.936, 0.69", "21.3494, 36.0253, -37.6862, 0.69", "21.7203, 36.4879, -38.2348, 0.69", "22.055, 36.901, -38.7032, 0.69", "22.4731, 37.3464, -39.2262, 0.69", "23.0257, 37.8211, -39.8216, 0.69", "23.6831, 38.2759, -40.4607, 0.69", "24.493, 38.693, -41.1997, 0.92", "25.3254, 38.9446, -41.8712, 0.69", "26.1956, 39.0544, -42.4962, 0.69", "27.2116, 39.0563, -43.0911, 0.92", "28.2973, 38.9158, -43.6124, 0.69", "29.7607, 38.6005, -44.209, 0.92", "30.8698, 38.2687, -44.6158, 0.92", "31.3895, 38.0819, -44.7816, 0.92", "32.4422, 37.6406, -45.074, 0.69", "33.9607, 36.9208, -45.4264, 0.69", "35.0755, 36.3679, -45.6609, 0.69", "36.2964, 35.7617, -45.8554, 0.69", "37.5457, 35.1603, -46.0218, 0.92", "38.5009, 34.7227, -46.1429, 0.69", "39.6068, 34.2058, -46.2793, 0.92", "40.8953, 33.6243, -46.3843, 0.46", "41.5637, 33.3298, -46.4212, 0.46", "42.3236, 33.0393, -46.4843, 0.46", "42.8734, 32.8615, -46.5988, 0.46", "43.6893, 32.6607, -46.8639, 0.46", "44.512, 32.5069, -47.2362, 0.46", "44.9882, 32.4423, -47.4718, 0.46", "45.5915, 32.4057, -47.8609, 0.69", "46.5098, 32.4387, -48.5797, 0.69", "46.9838, 32.4925, -48.9744, 0.46", "47.6369, 32.6193, -49.5284, 0.46", "48.4624, 32.7703, -50.248, 0.46", "49.4708, 32.8813, -51.0438, 0.46", "50.0675, 32.9189, -51.4736, 0.46", "50.4629, 32.9393, -51.7431, 0.69", "51.2467, 33.0029, -52.2504, 0.46", "51.8969, 33.0799, -52.6616, 0.46", "52.6628, 33.2154, -53.1298, 0.46", "53.6157, 33.3954, -53.6312, 0.46", "54.2567, 33.5017, -53.9292, 0.46", "55.0367, 33.6566, -54.3072, 0.46" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "55.0367, 33.6566, -54.3072, 0.46", "57.1583, 33.8169, -54.8104, 0.46", "58.8311, 33.9612, -55.2855, 0.46", "60.0964, 34.0289, -55.7001, 0.46", "61.0729, 34.0229, -56.0741, 0.46", "62.6381, 33.9503, -56.6827, 0.46", "64.315, 33.7932, -57.3522, 0.46", "65.1056, 33.6184, -57.7061, 0.46", "66.8056, 33.1286, -58.4009, 0.46", "68.3835, 32.6913, -58.8864, 0.46", "69.3721, 32.4056, -59.1658, 0.23", "70.2435, 32.1554, -59.3319, 0.23", "72.097, 31.5441, -59.5082, 0.23", "73.8888, 30.8803, -59.5813, 0.23", "75.5854, 30.369, -59.3334, 0.23" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "55.0367, 33.6566, -54.3072, 0.46", "57.5019, 33.9305, -56.4496, 0.46", "59.5922, 34.2604, -58.2359, 0.46", "61.0586, 34.4385, -59.3479, 0.46", "62.6532, 34.583, -60.4419, 0.46", "64.3878, 34.6953, -61.6128, 0.46", "65.7396, 34.7935, -62.5814, 0.46", "67.4649, 34.9204, -63.7736, 0.46", "69.7597, 35.0867, -65.3739, 0.46", "71.9736, 35.254, -66.9525, 0.46", "74.0809, 35.4074, -68.5139, 0.46", "75.5777, 35.5929, -69.6967, 0.46", "78.4114, 35.9605, -72.007, 0.46" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_34", "dend_23", "dend_16", "dend_5", "dend_0", "dend_36", "dend_35", "dend_27", "dend_24", "dend_18", "dend_17", "dend_7", "dend_6", "dend_2", "dend_1", "dend_38", "dend_37", "dend_31", "dend_28", "dend_26", "dend_25", "dend_20", "dend_19", "dend_15", "dend_8", "dend_4", "dend_3", "dend_33", "dend_32", "dend_30", "dend_29", "dend_22", "dend_21", "dend_14", "dend_9", "dend_13", "dend_10", "dend_12", "dend_11" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_34", "dend_23", "dend_16", "dend_5", "dend_0", "dend_36", "dend_35", "dend_27", "dend_24", "dend_18", "dend_17", "dend_7", "dend_6", "dend_2", "dend_1", "dend_38", "dend_37", "dend_31", "dend_28", "dend_26", "dend_25", "dend_20", "dend_19", "dend_15", "dend_8", "dend_4", "dend_3", "dend_33", "dend_32", "dend_30", "dend_29", "dend_22", "dend_21", "dend_14", "dend_9", "dend_13", "dend_10", "dend_12", "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_33" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_32" ]
  }, {
    "name" : "OneSecGrp_SectionRef_35",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_37",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_40",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_34" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_35" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_36" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_31" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_38" ]
  }, {
    "name" : "OneSecGrp_SectionRef_38",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_37" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_36",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_39",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_41",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_42",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30", "dend_31", "dend_32", "dend_33", "dend_34", "dend_35", "dend_36", "dend_37", "dend_38" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_23", "dend_23", "dend_23", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_7", "dend_7", "dend_7", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_38", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_37", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_20", "dend_20", "dend_20", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_9", "dend_9", "dend_9", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cNAC_149_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cNAC_149_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cNAC187_L1_NGCDA_c1b837d894_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_34, id: dend_34, parent: soma_0
create dend_34
public dend_34
// Section: dend_23, id: dend_23, parent: soma_0
create dend_23
public dend_23
// Section: dend_16, id: dend_16, parent: soma_0
create dend_16
public dend_16
// Section: dend_5, id: dend_5, parent: soma_0
create dend_5
public dend_5
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_36, id: dend_36, parent: dend_34
create dend_36
public dend_36
// Section: dend_35, id: dend_35, parent: dend_34
create dend_35
public dend_35
// Section: dend_27, id: dend_27, parent: dend_23
create dend_27
public dend_27
// Section: dend_24, id: dend_24, parent: dend_23
create dend_24
public dend_24
// Section: dend_18, id: dend_18, parent: dend_16
create dend_18
public dend_18
// Section: dend_17, id: dend_17, parent: dend_16
create dend_17
public dend_17
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_38, id: dend_38, parent: dend_36
create dend_38
public dend_38
// Section: dend_37, id: dend_37, parent: dend_36
create dend_37
public dend_37
// Section: dend_31, id: dend_31, parent: dend_27
create dend_31
public dend_31
// Section: dend_28, id: dend_28, parent: dend_27
create dend_28
public dend_28
// Section: dend_26, id: dend_26, parent: dend_24
create dend_26
public dend_26
// Section: dend_25, id: dend_25, parent: dend_24
create dend_25
public dend_25
// Section: dend_20, id: dend_20, parent: dend_18
create dend_20
public dend_20
// Section: dend_19, id: dend_19, parent: dend_18
create dend_19
public dend_19
// Section: dend_15, id: dend_15, parent: dend_7
create dend_15
public dend_15
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_4, id: dend_4, parent: dend_2
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_33, id: dend_33, parent: dend_31
create dend_33
public dend_33
// Section: dend_32, id: dend_32, parent: dend_31
create dend_32
public dend_32
// Section: dend_30, id: dend_30, parent: dend_28
create dend_30
public dend_30
// Section: dend_29, id: dend_29, parent: dend_28
create dend_29
public dend_29
// Section: dend_22, id: dend_22, parent: dend_20
create dend_22
public dend_22
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_14, id: dend_14, parent: dend_8
create dend_14
public dend_14
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9
// Section: dend_13, id: dend_13, parent: dend_9
create dend_13
public dend_13
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10
// Section: dend_12, id: dend_12, parent: dend_10
create dend_12
public dend_12
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_34, dend_23, dend_16, dend_5, dend_0, dend_36, dend_35, dend_27, dend_24, dend_18, dend_17, dend_7, dend_6, dend_2, dend_1, dend_38, dend_37, dend_31, dend_28, dend_26, dend_25, dend_20, dend_19, dend_15, dend_8, dend_4, dend_3, dend_33, dend_32, dend_30, dend_29, dend_22, dend_21, dend_14, dend_9, dend_13, dend_10, dend_12, dend_11]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_34, dend_23, dend_16, dend_5, dend_0, dend_36, dend_35, dend_27, dend_24, dend_18, dend_17, dend_7, dend_6, dend_2, dend_1, dend_38, dend_37, dend_31, dend_28, dend_26, dend_25, dend_20, dend_19, dend_15, dend_8, dend_4, dend_3, dend_33, dend_32, dend_30, dend_29, dend_22, dend_21, dend_14, dend_9, dend_13, dend_10, dend_12, dend_11]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_33]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_32]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_35
// Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_37
// Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_40
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_34]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_35]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_36]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_31]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_38]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_38
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_37]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_36
// Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_39
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_41, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_41
// Group: {name=OneSecGrp_SectionRef_42, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_42
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36, dend_37, dend_38], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_23, dend_23, dend_23, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_35, dend_35, dend_35, dend_35, dend_35, dend_27, dend_27, dend_27, dend_27, dend_27, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_9, dend_9, dend_9, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cNAC_149_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cNAC_149_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_34(0), soma_0(0.49999989780389625)
    connect dend_23(0), soma_0(0.49999989780389625)
    connect dend_16(0), soma_0(0.49999989780389625)
    connect dend_5(0), soma_0(0.49999989780389625)
    connect dend_0(0), soma_0(0.49999989780389625)
    connect axon_0(0), soma_0(1.0)
    connect dend_36(0), dend_34(1.0)
    connect dend_35(0), dend_34(1.0)
    connect dend_27(0), dend_23(1.0)
    connect dend_24(0), dend_23(1.0)
    connect dend_18(0), dend_16(1.0)
    connect dend_17(0), dend_16(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_38(0), dend_36(1.0)
    connect dend_37(0), dend_36(1.0)
    connect dend_31(0), dend_27(1.0)
    connect dend_28(0), dend_27(1.0)
    connect dend_26(0), dend_24(1.0)
    connect dend_25(0), dend_24(1.0)
    connect dend_20(0), dend_18(1.0)
    connect dend_19(0), dend_18(1.0)
    connect dend_15(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_4(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_33(0), dend_31(1.0)
    connect dend_32(0), dend_31(1.0)
    connect dend_30(0), dend_28(1.0)
    connect dend_29(0), dend_28(1.0)
    connect dend_22(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_14(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)
    connect dend_13(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)
    connect dend_12(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -2.48569, -6.90544, 0.0, 3.00414 ) }
    soma_0 { pt3dadd( -2.31617, -6.1725, 0.0, 5.1666 ) }
    soma_0 { pt3dadd( -2.14664, -5.43956, 0.0, 7.66052 ) }
    soma_0 { pt3dadd( -1.97711, -4.70663, 0.0, 9.30052 ) }
    soma_0 { pt3dadd( -1.80758, -3.97369, 0.0, 10.5298 ) }
    soma_0 { pt3dadd( -1.63805, -3.24075, 0.0, 11.6445 ) }
    soma_0 { pt3dadd( -1.46852, -2.50781, 0.0, 12.1344 ) }
    soma_0 { pt3dadd( -1.29899, -1.77488, 0.0, 12.5209 ) }
    soma_0 { pt3dadd( -1.12946, -1.04194, 0.0, 12.8728 ) }
    soma_0 { pt3dadd( -0.959926, -0.309003, 0.0, 13.2248 ) }
    soma_0 { pt3dadd( -0.790396, 0.423934, 0.0, 13.2522 ) }
    soma_0 { pt3dadd( -0.620866, 1.15687, 0.0, 13.1027 ) }
    soma_0 { pt3dadd( -0.451336, 1.88981, 0.0, 12.9579 ) }
    soma_0 { pt3dadd( -0.281807, 2.62275, 0.0, 12.8305 ) }
    soma_0 { pt3dadd( -0.112277, 3.35568, 0.0, 12.5604 ) }
    soma_0 { pt3dadd( 0.0572532, 4.08862, 0.0, 12.1963 ) }
    soma_0 { pt3dadd( 0.226783, 4.82156, 0.0, 11.554 ) }
    soma_0 { pt3dadd( 0.396313, 5.55449, 0.0, 10.4434 ) }
    soma_0 { pt3dadd( 0.565843, 6.28743, 0.0, 9.14943 ) }
    soma_0 { pt3dadd( 0.735373, 7.02037, 0.0, 6.97128 ) }
    soma_0 { pt3dadd( 0.904903, 7.75331, 0.0, 3.71762 ) }
    // Section: dend_34, id: dend_34, parent: soma_0 (entry count 21/100)
    dend_34 { pt3dclear() }
    dend_34 { pt3dadd( -3.94808, 0.523407, 6.09, 1.15 ) }
    dend_34 { pt3dadd( -5.85713, 0.577374, 7.83752, 1.15 ) }
    dend_34 { pt3dadd( -8.39358, 0.703501, 10.2376, 1.15 ) }
    dend_34 { pt3dadd( -10.1731, 0.907046, 12.088, 1.15 ) }
    dend_34 { pt3dadd( -11.3604, 1.15421, 13.5281, 1.15 ) }
    dend_34 { pt3dadd( -12.8509, 1.46451, 15.336, 0.92 ) }
    dend_34 { pt3dadd( -14.0924, 1.72294, 16.8418, 0.92 ) }
    dend_34 { pt3dadd( -14.9195, 1.96263, 18.0308, 0.92 ) }
    dend_34 { pt3dadd( -15.9489, 2.31195, 19.5841, 0.92 ) }
    dend_34 { pt3dadd( -16.9192, 2.90191, 21.4682, 1.15 ) }
    // Section: dend_23, id: dend_23, parent: soma_0 (entry count 31/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( -1.43808, -6.28659, -9.43, 2.29 ) }
    dend_23 { pt3dadd( -1.43808, -6.28659, -9.43, 2.29 ) }
    dend_23 { pt3dadd( -1.78528, -6.86956, -11.0341, 2.29 ) }
    dend_23 { pt3dadd( -2.1106, -7.41578, -12.537, 2.29 ) }
    // Section: dend_16, id: dend_16, parent: soma_0 (entry count 35/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 5.35192, 4.18341, -9.58, 1.15 ) }
    dend_16 { pt3dadd( 5.35192, 4.18341, -9.58, 1.15 ) }
    dend_16 { pt3dadd( 6.47511, 5.46369, -10.4199, 1.15 ) }
    dend_16 { pt3dadd( 7.36922, 6.44214, -11.2164, 1.15 ) }
    dend_16 { pt3dadd( 8.04042, 7.1559, -11.9418, 1.38 ) }
    dend_16 { pt3dadd( 8.76162, 7.89211, -12.8612, 1.38 ) }
    dend_16 { pt3dadd( 9.45832, 8.61953, -13.9284, 1.15 ) }
    dend_16 { pt3dadd( 10.2678, 9.45006, -15.2248, 1.15 ) }
    dend_16 { pt3dadd( 11.2428, 10.4175, -16.9162, 1.15 ) }
    dend_16 { pt3dadd( 12.1601, 11.2948, -18.67, 1.15 ) }
    dend_16 { pt3dadd( 13.074, 12.191, -20.7052, 0.92 ) }
    dend_16 { pt3dadd( 14.1073, 13.2537, -23.4078, 0.92 ) }
    // Section: dend_5, id: dend_5, parent: soma_0 (entry count 47/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 2.86192, 6.18341, -1.91, 4.59 ) }
    dend_5 { pt3dadd( 2.86192, 6.18341, -1.91, 4.59 ) }
    dend_5 { pt3dadd( 3.19557, 7.24924, -2.48874, 4.36 ) }
    dend_5 { pt3dadd( 3.65046, 8.70237, -3.27779, 3.21 ) }
    dend_5 { pt3dadd( 3.94657, 9.64828, -3.79142, 2.52 ) }
    dend_5 { pt3dadd( 4.3175, 10.8332, -4.43482, 1.61 ) }
    dend_5 { pt3dadd( 4.59538, 11.7208, -4.91682, 1.61 ) }
    dend_5 { pt3dadd( 5.01443, 13.0257, -5.62107, 1.61 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 55/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -3.99808, 6.85341, 1.25, 3.21 ) }
    dend_0 { pt3dadd( -3.99808, 6.85341, 1.25, 3.21 ) }
    dend_0 { pt3dadd( -4.31501, 7.99819, 1.45153, 2.06 ) }
    dend_0 { pt3dadd( -5.06525, 10.7081, 1.92858, 1.61 ) }
    dend_0 { pt3dadd( -5.53821, 12.4164, 2.22932, 1.61 ) }
    dend_0 { pt3dadd( -6.22651, 14.9026, 2.667, 1.61 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 61/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 0.904903, 7.75331, 0.0, 0.988319 ) }
    axon_0 { pt3dadd( 4.28518, 22.3675, 0.0, 0.988319 ) }
    axon_0 { pt3dadd( 7.66546, 36.9816, 0.0, 0.988319 ) }
    // Section: dend_36, id: dend_36, parent: dend_34 (entry count 64/100)
    dend_36 { pt3dclear() }
    dend_36 { pt3dadd( -16.9192, 2.90191, 21.4682, 0.92 ) }
    dend_36 { pt3dadd( -15.9672, 2.72104, 22.1416, 0.92 ) }
    dend_36 { pt3dadd( -14.8037, 2.35332, 22.9286, 0.69 ) }
    dend_36 { pt3dadd( -13.5617, 1.76785, 23.778, 0.69 ) }
    dend_36 { pt3dadd( -12.5676, 1.2992, 24.4579, 0.92 ) }
    dend_36 { pt3dadd( -11.2394, 0.673069, 25.3664, 0.69 ) }
    dend_36 { pt3dadd( -10.0886, 0.130568, 26.1534, 0.69 ) }
    dend_36 { pt3dadd( -8.72295, -0.603995, 27.1577, 0.69 ) }
    dend_36 { pt3dadd( -7.66211, -1.22556, 27.8457, 1.15 ) }
    // Section: dend_35, id: dend_35, parent: dend_34 (entry count 73/100)
    dend_35 { pt3dclear() }
    dend_35 { pt3dadd( -16.9192, 2.90191, 21.4682, 0.92 ) }
    dend_35 { pt3dadd( -16.4808, 3.66209, 23.0593, 0.92 ) }
    dend_35 { pt3dadd( -15.9161, 4.64126, 25.1087, 0.69 ) }
    dend_35 { pt3dadd( -15.305, 5.70097, 27.3267, 0.69 ) }
    dend_35 { pt3dadd( -14.7619, 6.6428, 29.298, 0.69 ) }
    dend_35 { pt3dadd( -14.4495, 7.18443, 30.4316, 0.69 ) }
    // Section: dend_27, id: dend_27, parent: dend_23 (entry count 79/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( -2.1106, -7.41578, -12.537, 1.38 ) }
    dend_27 { pt3dadd( -0.84478, -8.0351, -13.358, 1.38 ) }
    dend_27 { pt3dadd( 0.521073, -8.70336, -14.2439, 1.38 ) }
    dend_27 { pt3dadd( 1.71077, -9.28543, -15.0155, 1.38 ) }
    dend_27 { pt3dadd( 2.91056, -9.87245, -15.7936, 1.38 ) }
    dend_27 { pt3dadd( 4.30787, -10.5561, -16.6999, 1.38 ) }
    // Section: dend_24, id: dend_24, parent: dend_23 (entry count 85/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( -2.1106, -7.41578, -12.537, 0.92 ) }
    dend_24 { pt3dadd( -2.68347, -7.04381, -13.2903, 0.92 ) }
    dend_24 { pt3dadd( -3.38564, -6.19286, -14.4121, 0.69 ) }
    dend_24 { pt3dadd( -3.64493, -5.87864, -14.8264, 0.69 ) }
    dend_24 { pt3dadd( -4.09661, -5.33126, -15.548, 0.92 ) }
    dend_24 { pt3dadd( -4.51416, -4.82524, -16.2152, 1.15 ) }
    dend_24 { pt3dadd( -5.04137, -4.18633, -17.0575, 1.15 ) }
    dend_24 { pt3dadd( -5.35085, -3.50663, -17.8328, 0.92 ) }
    // Section: dend_18, id: dend_18, parent: dend_16 (entry count 93/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 14.1073, 13.2537, -23.4078, 0.92 ) }
    dend_18 { pt3dadd( 14.3906, 12.0436, -25.1484, 0.92 ) }
    dend_18 { pt3dadd( 14.8523, 10.6089, -27.0757, 0.92 ) }
    dend_18 { pt3dadd( 15.3253, 9.28681, -28.83, 0.92 ) }
    dend_18 { pt3dadd( 15.7293, 8.10337, -30.3762, 0.92 ) }
    dend_18 { pt3dadd( 16.0369, 7.19813, -31.6556, 0.92 ) }
    dend_18 { pt3dadd( 16.3695, 6.27858, -33.1689, 0.92 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_18 { pt3dadd( 16.6288, 5.60912, -34.5263, 0.92 ) }
    dend_18 { pt3dadd( 17.0584, 5.09243, -36.3202, 0.92 ) }
    dend_18 { pt3dadd( 17.2788, 5.03965, -37.028, 0.92 ) }
    dend_18 { pt3dadd( 17.9568, 5.15417, -38.7718, 0.92 ) }
    dend_18 { pt3dadd( 18.7186, 5.47131, -40.688, 0.92 ) }
    dend_18 { pt3dadd( 19.5784, 6.04618, -42.9521, 0.92 ) }
    dend_18 { pt3dadd( 20.1433, 6.50566, -44.5104, 0.92 ) }
    dend_18 { pt3dadd( 21.0766, 7.23153, -46.503, 0.92 ) }
    dend_18 { pt3dadd( 22.6852, 8.22983, -49.3133, 0.92 ) }
    // Section: dend_17, id: dend_17, parent: dend_16 (entry count 9/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 14.1073, 13.2537, -23.4078, 0.69 ) }
    dend_17 { pt3dadd( 13.9037, 12.5696, -23.7575, 0.69 ) }
    dend_17 { pt3dadd( 13.4112, 11.1394, -24.3616, 0.46 ) }
    dend_17 { pt3dadd( 12.8233, 9.85861, -24.9877, 0.46 ) }
    dend_17 { pt3dadd( 12.3214, 8.97843, -25.5443, 0.46 ) }
    dend_17 { pt3dadd( 11.7873, 8.15985, -26.2057, 0.46 ) }
    dend_17 { pt3dadd( 11.1038, 7.1427, -27.1911, 0.46 ) }
    dend_17 { pt3dadd( 10.3818, 6.17361, -28.3867, 0.46 ) }
    dend_17 { pt3dadd( 9.34381, 4.83008, -30.4102, 0.46 ) }
    dend_17 { pt3dadd( 8.70374, 3.94104, -31.9988, 0.46 ) }
    dend_17 { pt3dadd( 8.12367, 3.03549, -33.9788, 0.46 ) }
    dend_17 { pt3dadd( 7.79982, 2.33662, -35.9113, 0.46 ) }
    dend_17 { pt3dadd( 7.73835, 1.74108, -37.9796, 0.46 ) }
    dend_17 { pt3dadd( 7.88545, 1.31747, -39.7504, 0.46 ) }
    dend_17 { pt3dadd( 8.18965, 1.03145, -41.1499, 0.46 ) }
    dend_17 { pt3dadd( 8.58574, 0.784616, -42.4746, 0.46 ) }
    dend_17 { pt3dadd( 9.2668, 0.400021, -44.5692, 0.46 ) }
    dend_17 { pt3dadd( 9.96742, -0.0433841, -46.6917, 0.46 ) }
    dend_17 { pt3dadd( 10.482, -0.405645, -48.2917, 0.46 ) }
    dend_17 { pt3dadd( 11.1571, -0.931227, -50.6636, 0.46 ) }
    dend_17 { pt3dadd( 11.6221, -1.3201, -52.6021, 0.46 ) }
    dend_17 { pt3dadd( 12.205, -1.73796, -55.3176, 0.46 ) }
    dend_17 { pt3dadd( 12.7415, -1.99758, -58.1745, 0.46 ) }
    dend_17 { pt3dadd( 13.0106, -1.99771, -59.8702, 0.46 ) }
    dend_17 { pt3dadd( 13.3655, -1.87566, -62.2808, 0.46 ) }
    dend_17 { pt3dadd( 13.8354, -1.48593, -65.4897, 0.46 ) }
    dend_17 { pt3dadd( 14.1394, -1.06461, -67.4949, 0.46 ) }
    dend_17 { pt3dadd( 14.3102, -0.705722, -68.5628, 0.46 ) }
    dend_17 { pt3dadd( 14.4801, -0.0743461, -69.9109, 0.46 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 38/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 5.01443, 13.0257, -5.62107, 1.83 ) }
    dend_7 { pt3dadd( 5.17769, 14.4977, -7.2273, 1.83 ) }
    dend_7 { pt3dadd( 5.28576, 15.4722, -8.29063, 1.61 ) }
    dend_7 { pt3dadd( 5.51828, 17.5687, -10.5782, 1.61 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 42/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 5.01443, 13.0257, -5.62107, 0.92 ) }
    dend_6 { pt3dadd( 5.92403, 14.4299, -5.51872, 0.92 ) }
    dend_6 { pt3dadd( 6.61141, 16.2314, -5.71782, 0.92 ) }
    dend_6 { pt3dadd( 6.85001, 17.3788, -5.90632, 0.69 ) }
    dend_6 { pt3dadd( 7.03759, 18.768, -6.04159, 0.69 ) }
    dend_6 { pt3dadd( 7.22615, 20.6224, -6.1714, 0.69 ) }
    dend_6 { pt3dadd( 7.45725, 22.6933, -6.26257, 0.69 ) }
    dend_6 { pt3dadd( 7.54307, 24.1995, -6.36686, 0.69 ) }
    dend_6 { pt3dadd( 7.54746, 25.9313, -6.53444, 0.92 ) }
    dend_6 { pt3dadd( 7.50535, 27.7417, -6.67961, 1.15 ) }
    dend_6 { pt3dadd( 7.47619, 28.8428, -6.70729, 0.69 ) }
    dend_6 { pt3dadd( 7.43673, 29.9271, -6.59364, 0.46 ) }
    dend_6 { pt3dadd( 7.51627, 31.7619, -6.17847, 0.46 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 55/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -6.22651, 14.9026, 2.667, 1.83 ) }
    dend_2 { pt3dadd( -6.32354, 15.1086, 2.41243, 1.83 ) }
    dend_2 { pt3dadd( -7.21422, 16.4011, 0.750463, 1.83 ) }
    dend_2 { pt3dadd( -8.07268, 17.4346, -0.711943, 1.61 ) }
    dend_2 { pt3dadd( -8.76542, 18.1798, -1.78816, 1.15 ) }
    dend_2 { pt3dadd( -9.54791, 19.0215, -3.00382, 1.15 ) }
    dend_2 { pt3dadd( -10.2972, 19.8274, -4.16789, 1.15 ) }
    dend_2 { pt3dadd( -11.236, 20.7113, -5.49996, 1.15 ) }
    dend_2 { pt3dadd( -12.0945, 21.3479, -6.50754, 1.38 ) }
    dend_2 { pt3dadd( -13.4806, 22.2209, -7.91582, 1.15 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 65/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -6.22651, 14.9026, 2.667, 0.92 ) }
    dend_1 { pt3dadd( -6.06413, 16.4493, 3.05737, 0.92 ) }
    dend_1 { pt3dadd( -6.06021, 17.5059, 3.2802, 0.92 ) }
    dend_1 { pt3dadd( -6.07609, 18.906, 3.55307, 0.92 ) }
    dend_1 { pt3dadd( -6.05682, 19.9199, 3.74615, 0.92 ) }
    dend_1 { pt3dadd( -5.97779, 20.7425, 3.88421, 0.92 ) }
    dend_1 { pt3dadd( -5.63776, 22.716, 4.12625, 0.92 ) }
    dend_1 { pt3dadd( -5.43431, 23.3711, 4.16296, 0.92 ) }
    dend_1 { pt3dadd( -5.20633, 24.0063, 4.12565, 0.92 ) }
    dend_1 { pt3dadd( -4.93, 24.7944, 3.97145, 0.92 ) }
    dend_1 { pt3dadd( -4.52522, 26.1413, 3.52788, 0.92 ) }
    dend_1 { pt3dadd( -4.29516, 26.9735, 3.08814, 0.92 ) }
    dend_1 { pt3dadd( -4.1621, 27.4583, 2.7782, 0.92 ) }
    dend_1 { pt3dadd( -4.07252, 28.3214, 2.18912, 0.92 ) }
    dend_1 { pt3dadd( -4.11138, 29.2046, 1.57412, 0.69 ) }
    dend_1 { pt3dadd( -4.19811, 30.2352, 0.864156, 0.69 ) }
    dend_1 { pt3dadd( -4.27781, 31.2124, 0.146535, 0.69 ) }
    dend_1 { pt3dadd( -4.25263, 32.0698, -0.634924, 0.69 ) }
    dend_1 { pt3dadd( -4.14963, 32.8731, -1.45015, 0.69 ) }
    dend_1 { pt3dadd( -3.97572, 33.3394, -1.98507, 0.69 ) }
    dend_1 { pt3dadd( -3.56585, 33.9579, -2.75277, 0.46 ) }
    dend_1 { pt3dadd( -2.78248, 34.6454, -3.7905, 0.46 ) }
    dend_1 { pt3dadd( -1.94698, 34.9132, -4.8162, 0.46 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 88/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 7.66546, 36.9816, 0.0, 0.480339 ) }
    axon_1 { pt3dadd( 11.0457, 51.5958, 0.0, 0.480339 ) }
    axon_1 { pt3dadd( 14.426, 66.21, 0.0, 0.480339 ) }
    // Section: dend_38, id: dend_38, parent: dend_36 (entry count 91/100)
    dend_38 { pt3dclear() }
    dend_38 { pt3dadd( -7.66211, -1.22556, 27.8457, 0.69 ) }
    dend_38 { pt3dadd( -6.19865, -1.42172, 28.655, 0.69 ) }
    dend_38 { pt3dadd( -4.17282, -1.56799, 29.5127, 0.69 ) }
    dend_38 { pt3dadd( -2.76664, -1.66951, 30.1081, 0.69 ) }
    dend_38 { pt3dadd( -1.25052, -1.77898, 30.75, 0.69 ) }
    dend_38 { pt3dadd( 0.0736692, -1.87459, 31.3106, 0.69 ) }
    dend_38 { pt3dadd( 1.75184, -1.99575, 32.0211, 0.69 ) }
    dend_38 { pt3dadd( 3.913, -2.11532, 32.8092, 0.69 ) }
    // Section: dend_37, id: dend_37, parent: dend_36 (entry count 99/100)
    dend_37 { pt3dclear() }
    dend_37 { pt3dadd( -7.66211, -1.22556, 27.8457, 0.69 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_37 { pt3dadd( -7.19949, -1.98225, 28.5852, 0.69 ) }
    dend_37 { pt3dadd( -6.89101, -2.41875, 29.017, 0.69 ) }
    dend_37 { pt3dadd( -6.50626, -2.87078, 29.4608, 0.69 ) }
    dend_37 { pt3dadd( -6.01275, -3.40361, 29.9854, 0.69 ) }
    dend_37 { pt3dadd( -5.58876, -3.88808, 30.4585, 0.69 ) }
    dend_37 { pt3dadd( -5.23977, -4.3227, 30.8603, 0.69 ) }
    dend_37 { pt3dadd( -4.90109, -4.7423, 31.2374, 0.69 ) }
    dend_37 { pt3dadd( -4.55817, -5.22924, 31.6703, 0.69 ) }
    dend_37 { pt3dadd( -4.18589, -5.85309, 32.2257, 0.69 ) }
    dend_37 { pt3dadd( -3.88101, -6.43336, 32.7659, 0.69 ) }
    dend_37 { pt3dadd( -3.63644, -7.01159, 33.3408, 0.69 ) }
    dend_37 { pt3dadd( -3.4865, -7.55917, 33.9433, 0.69 ) }
    dend_37 { pt3dadd( -3.35996, -8.30756, 34.8591, 0.69 ) }
    dend_37 { pt3dadd( -3.32354, -8.73334, 35.4084, 0.69 ) }
    dend_37 { pt3dadd( -3.31137, -9.18148, 36.0367, 0.69 ) }
    dend_37 { pt3dadd( -3.31299, -9.52212, 36.5815, 0.46 ) }
    dend_37 { pt3dadd( -3.36197, -9.9319, 37.3694, 0.46 ) }
    dend_37 { pt3dadd( -3.47597, -10.3315, 38.2578, 0.46 ) }
    // Section: dend_31, id: dend_31, parent: dend_27 (entry count 18/100)
    dend_31 { pt3dclear() }
    dend_31 { pt3dadd( 4.30787, -10.5561, -16.6999, 0.92 ) }
    dend_31 { pt3dadd( 4.48372, -12.1458, -16.7091, 0.92 ) }
    dend_31 { pt3dadd( 4.60579, -13.6461, -16.6568, 0.92 ) }
    dend_31 { pt3dadd( 4.64318, -14.7871, -16.5996, 0.92 ) }
    dend_31 { pt3dadd( 4.66746, -15.9206, -16.5419, 0.92 ) }
    dend_31 { pt3dadd( 4.65115, -17.2977, -16.4598, 0.92 ) }
    dend_31 { pt3dadd( 4.60631, -17.8393, -16.4292, 0.92 ) }
    dend_31 { pt3dadd( 4.41206, -18.8569, -16.3752, 0.92 ) }
    dend_31 { pt3dadd( 3.90197, -20.8177, -16.2856, 0.92 ) }
    dend_31 { pt3dadd( 3.41606, -22.3439, -16.2361, 0.92 ) }
    dend_31 { pt3dadd( 2.93266, -23.7879, -16.2802, 0.92 ) }
    dend_31 { pt3dadd( 2.31561, -25.478, -16.3772, 1.15 ) }
    dend_31 { pt3dadd( 1.47965, -27.6278, -16.5352, 0.92 ) }
    dend_31 { pt3dadd( 1.14452, -28.457, -16.6238, 0.92 ) }
    dend_31 { pt3dadd( 0.663524, -29.5117, -16.765, 1.15 ) }
    dend_31 { pt3dadd( -0.164009, -31.167, -17.0533, 0.92 ) }
    // Section: dend_28, id: dend_28, parent: dend_27 (entry count 34/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 4.30787, -10.5561, -16.6999, 0.69 ) }
    dend_28 { pt3dadd( 5.78202, -11.2081, -17.0148, 0.69 ) }
    dend_28 { pt3dadd( 7.21493, -11.8775, -17.4592, 0.69 ) }
    dend_28 { pt3dadd( 8.51913, -12.557, -17.9814, 0.46 ) }
    dend_28 { pt3dadd( 9.87338, -13.3489, -18.6429, 0.46 ) }
    dend_28 { pt3dadd( 11.1709, -14.2036, -19.3457, 0.46 ) }
    dend_28 { pt3dadd( 12.5353, -15.2027, -20.2026, 0.46 ) }
    dend_28 { pt3dadd( 13.3163, -15.9128, -20.9462, 0.46 ) }
    dend_28 { pt3dadd( 13.8254, -16.5105, -21.6516, 0.46 ) }
    dend_28 { pt3dadd( 14.2215, -17.097, -22.3669, 0.46 ) }
    dend_28 { pt3dadd( 14.5167, -17.6938, -23.0233, 0.46 ) }
    dend_28 { pt3dadd( 14.8547, -18.5314, -23.9008, 0.46 ) }
    dend_28 { pt3dadd( 15.2703, -19.8025, -25.1512, 0.46 ) }
    dend_28 { pt3dadd( 15.5078, -20.6275, -26.0081, 0.46 ) }
    dend_28 { pt3dadd( 15.7852, -21.5025, -26.9248, 0.46 ) }
    dend_28 { pt3dadd( 16.0119, -22.1901, -27.6594, 0.46 ) }
    // Section: dend_26, id: dend_26, parent: dend_24 (entry count 50/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( -5.35085, -3.50663, -17.8328, 0.69 ) }
    dend_26 { pt3dadd( -5.91734, -3.19779, -20.6981, 0.69 ) }
    dend_26 { pt3dadd( -6.28625, -2.92799, -22.4914, 0.69 ) }
    dend_26 { pt3dadd( -6.57976, -2.71524, -23.6828, 0.69 ) }
    dend_26 { pt3dadd( -6.98827, -2.5073, -25.0456, 0.69 ) }
    dend_26 { pt3dadd( -7.34798, -2.37243, -26.1015, 0.69 ) }
    dend_26 { pt3dadd( -7.71812, -2.26117, -27.1222, 0.69 ) }
    dend_26 { pt3dadd( -8.53106, -2.15204, -28.8262, 0.69 ) }
    dend_26 { pt3dadd( -9.11258, -2.10996, -29.8704, 0.69 ) }
    dend_26 { pt3dadd( -10.0824, -2.12834, -31.4291, 0.69 ) }
    dend_26 { pt3dadd( -11.0105, -2.2562, -32.7294, 0.69 ) }
    dend_26 { pt3dadd( -11.8291, -2.43224, -33.7635, 0.69 ) }
    dend_26 { pt3dadd( -13.0373, -2.77776, -35.1486, 0.46 ) }
    dend_26 { pt3dadd( -14.7411, -3.34454, -36.7898, 0.46 ) }
    dend_26 { pt3dadd( -16.1303, -3.8114, -37.9459, 0.46 ) }
    dend_26 { pt3dadd( -17.3751, -4.19643, -38.8463, 0.46 ) }
    dend_26 { pt3dadd( -19.0936, -4.6565, -40.0141, 0.46 ) }
    dend_26 { pt3dadd( -20.9209, -5.1424, -41.193, 0.46 ) }
    dend_26 { pt3dadd( -23.6218, -5.83828, -42.8914, 0.23 ) }
    dend_26 { pt3dadd( -24.7809, -6.08588, -43.5221, 0.46 ) }
    dend_26 { pt3dadd( -26.5965, -6.3767, -44.47, 0.46 ) }
    dend_26 { pt3dadd( -28.7272, -6.59825, -45.581, 0.46 ) }
    // Section: dend_25, id: dend_25, parent: dend_24 (entry count 72/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( -5.35085, -3.50663, -17.8328, 0.69 ) }
    dend_25 { pt3dadd( -5.2108, -2.37828, -18.2065, 0.69 ) }
    dend_25 { pt3dadd( -5.19103, -1.48655, -18.5637, 0.69 ) }
    dend_25 { pt3dadd( -5.17713, -0.689081, -18.9096, 0.69 ) }
    dend_25 { pt3dadd( -5.15622, 0.510611, -19.4301, 0.69 ) }
    dend_25 { pt3dadd( -5.12867, 2.0915, -20.1159, 0.69 ) }
    dend_25 { pt3dadd( -5.11426, 2.91781, -20.4744, 0.46 ) }
    dend_25 { pt3dadd( -5.16315, 4.45806, -21.2171, 0.46 ) }
    dend_25 { pt3dadd( -5.20412, 5.01048, -21.502, 0.46 ) }
    // Section: dend_20, id: dend_20, parent: dend_18 (entry count 81/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 22.6852, 8.22983, -49.3133, 0.69 ) }
    dend_20 { pt3dadd( 23.0582, 9.24884, -49.4959, 0.69 ) }
    dend_20 { pt3dadd( 23.2978, 9.90381, -49.6133, 0.69 ) }
    dend_20 { pt3dadd( 23.6461, 10.8554, -49.7838, 0.69 ) }
    // Section: dend_19, id: dend_19, parent: dend_18 (entry count 85/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 22.6852, 8.22983, -49.3133, 0.69 ) }
    dend_19 { pt3dadd( 21.7997, 6.51175, -50.3747, 0.69 ) }
    dend_19 { pt3dadd( 20.5711, 3.91621, -51.3076, 0.69 ) }
    dend_19 { pt3dadd( 19.8916, 2.20492, -51.8831, 0.69 ) }
    dend_19 { pt3dadd( 19.3217, 0.516514, -52.431, 0.69 ) }
    dend_19 { pt3dadd( 18.5854, -1.96163, -53.3174, 0.46 ) }
    dend_19 { pt3dadd( 17.6815, -5.72112, -55.055, 0.46 ) }
    dend_19 { pt3dadd( 17.4952, -6.88092, -55.5695, 0.23 ) }
    dend_19 { pt3dadd( 17.4437, -8.92696, -56.5218, 0.23 ) }
    dend_19 { pt3dadd( 17.4801, -9.68443, -56.9039, 0.23 ) }
    dend_19 { pt3dadd( 17.8014, -11.9314, -58.3593, 0.23 ) }
    dend_19 { pt3dadd( 18.4016, -14.5236, -60.5748, 0.23 ) }
    dend_19 { pt3dadd( 18.785, -15.8796, -61.9861, 0.23 ) }
    dend_19 { pt3dadd( 19.1032, -17.1815, -63.3461, 0.23 ) }
    // Section: dend_15, id: dend_15, parent: dend_7 (entry count 99/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 5.51828, 17.5687, -10.5782, 0.92 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_15 { pt3dadd( 6.45573, 18.8002, -10.5194, 0.92 ) }
    dend_15 { pt3dadd( 7.61402, 20.2389, -10.2434, 0.92 ) }
    dend_15 { pt3dadd( 8.48617, 21.3852, -9.91918, 0.92 ) }
    dend_15 { pt3dadd( 9.12396, 22.2387, -9.65241, 0.92 ) }
    dend_15 { pt3dadd( 10.1193, 23.6309, -9.22131, 1.15 ) }
    dend_15 { pt3dadd( 11.0963, 25.01, -8.78578, 0.92 ) }
    dend_15 { pt3dadd( 11.7129, 25.7918, -8.46892, 1.15 ) }
    dend_15 { pt3dadd( 12.7074, 26.9356, -7.96439, 0.92 ) }
    dend_15 { pt3dadd( 13.4547, 27.7516, -7.71015, 0.92 ) }
    dend_15 { pt3dadd( 14.2268, 28.6663, -7.58972, 0.92 ) }
    dend_15 { pt3dadd( 14.5995, 29.126, -7.6365, 0.92 ) }
    dend_15 { pt3dadd( 15.8011, 30.5006, -8.08418, 0.92 ) }
    dend_15 { pt3dadd( 16.7446, 31.4495, -8.65802, 0.92 ) }
    dend_15 { pt3dadd( 18.0295, 32.463, -9.82034, 0.92 ) }
    dend_15 { pt3dadd( 18.7862, 32.9659, -10.6027, 1.15 ) }
    dend_15 { pt3dadd( 19.8443, 33.5936, -11.7497, 0.92 ) }
    dend_15 { pt3dadd( 20.6574, 34.1327, -12.7187, 1.15 ) }
    dend_15 { pt3dadd( 21.6132, 34.9006, -13.996, 1.15 ) }
    dend_15 { pt3dadd( 23.1029, 36.2224, -16.0122, 0.69 ) }
    dend_15 { pt3dadd( 23.8844, 36.9174, -17.0452, 0.46 ) }
    dend_15 { pt3dadd( 24.2897, 37.2657, -17.5864, 0.46 ) }
    dend_15 { pt3dadd( 23.3222, 38.8676, -16.9851, 0.46 ) }
    dend_15 { pt3dadd( 22.1737, 40.3903, -16.3264, 0.23 ) }
    dend_15 { pt3dadd( 21.0253, 41.8353, -15.6384, 0.23 ) }
    dend_15 { pt3dadd( 20.5257, 42.3837, -15.3211, 0.23 ) }
    dend_15 { pt3dadd( 19.1823, 43.5851, -14.5253, 0.23 ) }
    dend_15 { pt3dadd( 18.3906, 44.1756, -14.0518, 0.23 ) }
    dend_15 { pt3dadd( 17.0844, 44.9113, -13.1681, 0.23 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 28/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 5.51828, 17.5687, -10.5782, 1.15 ) }
    dend_8 { pt3dadd( 6.00162, 18.8617, -11.5962, 1.15 ) }
    dend_8 { pt3dadd( 6.55761, 20.3918, -12.5092, 1.15 ) }
    dend_8 { pt3dadd( 7.17274, 22.1238, -13.2251, 1.15 ) }
    dend_8 { pt3dadd( 7.85542, 24.0386, -13.9367, 0.92 ) }
    dend_8 { pt3dadd( 8.16991, 24.8746, -14.2884, 1.15 ) }
    dend_8 { pt3dadd( 8.7927, 26.4644, -15.1552, 1.15 ) }
    dend_8 { pt3dadd( 9.20649, 27.4092, -15.8826, 1.15 ) }
    dend_8 { pt3dadd( 9.65668, 28.567, -17.0074, 1.15 ) }
    dend_8 { pt3dadd( 10.1296, 29.8851, -18.5259, 1.15 ) }
    dend_8 { pt3dadd( 10.469, 30.8408, -19.9817, 1.15 ) }
    dend_8 { pt3dadd( 10.8712, 31.9539, -22.2817, 1.15 ) }
    dend_8 { pt3dadd( 11.2043, 32.8578, -24.8144, 1.15 ) }
    dend_8 { pt3dadd( 11.31, 33.1424, -25.9851, 1.15 ) }
    // Section: dend_4, id: dend_4, parent: dend_2 (entry count 42/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -13.4806, 22.2209, -7.91582, 0.92 ) }
    dend_4 { pt3dadd( -14.8708, 23.2299, -6.85456, 0.92 ) }
    dend_4 { pt3dadd( -16.7693, 24.1866, -5.72214, 0.92 ) }
    dend_4 { pt3dadd( -18.594, 24.7125, -4.84798, 0.92 ) }
    dend_4 { pt3dadd( -20.3735, 24.898, -4.19004, 0.92 ) }
    dend_4 { pt3dadd( -22.1599, 24.7127, -3.64108, 0.92 ) }
    dend_4 { pt3dadd( -23.9114, 24.2054, -3.12349, 0.92 ) }
    dend_4 { pt3dadd( -25.3609, 23.3369, -2.90899, 1.15 ) }
    dend_4 { pt3dadd( -26.3694, 22.548, -2.8634, 1.15 ) }
    dend_4 { pt3dadd( -27.1767, 21.8579, -2.87745, 0.92 ) }
    dend_4 { pt3dadd( -28.6834, 20.5117, -2.93458, 0.92 ) }
    dend_4 { pt3dadd( -29.9745, 19.423, -2.97637, 0.92 ) }
    dend_4 { pt3dadd( -31.0734, 18.6137, -3.01873, 0.92 ) }
    dend_4 { pt3dadd( -33.0275, 17.3866, -3.18312, 1.15 ) }
    dend_4 { pt3dadd( -34.4856, 16.5965, -3.37539, 1.15 ) }
    dend_4 { pt3dadd( -35.9925, 15.9269, -3.64936, 0.92 ) }
    dend_4 { pt3dadd( -38.1249, 15.21, -4.15425, 0.92 ) }
    dend_4 { pt3dadd( -40.3433, 14.7234, -4.74689, 0.92 ) }
    dend_4 { pt3dadd( -41.865, 14.5882, -5.16846, 0.92 ) }
    dend_4 { pt3dadd( -43.1401, 14.7014, -5.61395, 1.15 ) }
    dend_4 { pt3dadd( -44.4756, 15.1666, -6.25421, 1.15 ) }
    dend_4 { pt3dadd( -44.9095, 15.521, -6.5624, 1.15 ) }
    dend_4 { pt3dadd( -45.7424, 16.7132, -7.46191, 0.92 ) }
    dend_4 { pt3dadd( -46.3768, 18.0881, -8.37187, 0.69 ) }
    dend_4 { pt3dadd( -46.8113, 19.2626, -9.10041, 0.69 ) }
    dend_4 { pt3dadd( -47.2284, 20.6514, -9.96257, 0.69 ) }
    dend_4 { pt3dadd( -47.5845, 21.9811, -10.8168, 0.46 ) }
    dend_4 { pt3dadd( -47.8145, 23.0016, -11.5222, 0.46 ) }
    dend_4 { pt3dadd( -48.0465, 24.3532, -12.5956, 0.46 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 71/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -13.4806, 22.2209, -7.91582, 0.92 ) }
    dend_3 { pt3dadd( -13.5133, 23.2175, -8.75759, 0.92 ) }
    dend_3 { pt3dadd( -13.5026, 24.1514, -9.52522, 0.92 ) }
    dend_3 { pt3dadd( -13.5319, 24.8551, -10.1468, 0.92 ) }
    dend_3 { pt3dadd( -13.5918, 25.5794, -10.8303, 0.92 ) }
    dend_3 { pt3dadd( -13.6808, 26.2149, -11.525, 0.92 ) }
    dend_3 { pt3dadd( -13.7638, 26.6663, -12.0936, 0.92 ) }
    dend_3 { pt3dadd( -13.9741, 27.6113, -13.387, 0.92 ) }
    dend_3 { pt3dadd( -14.166, 28.0402, -14.0333, 0.92 ) }
    dend_3 { pt3dadd( -14.3046, 28.219, -14.352, 1.15 ) }
    dend_3 { pt3dadd( -14.8337, 28.7405, -15.3419, 1.15 ) }
    dend_3 { pt3dadd( -15.3002, 29.1741, -16.1429, 1.15 ) }
    dend_3 { pt3dadd( -15.8177, 29.685, -17.0457, 1.15 ) }
    dend_3 { pt3dadd( -16.4757, 30.503, -18.1992, 0.92 ) }
    dend_3 { pt3dadd( -16.8933, 31.1969, -18.9732, 0.92 ) }
    dend_3 { pt3dadd( -17.2544, 31.8386, -19.58, 0.92 ) }
    dend_3 { pt3dadd( -17.6887, 32.5653, -20.1781, 0.69 ) }
    dend_3 { pt3dadd( -18.1045, 33.1907, -20.6826, 0.69 ) }
    dend_3 { pt3dadd( -18.6759, 33.9614, -21.363, 0.69 ) }
    dend_3 { pt3dadd( -19.2236, 34.6878, -22.0608, 0.69 ) }
    dend_3 { pt3dadd( -19.9925, 35.6818, -22.856, 0.69 ) }
    dend_3 { pt3dadd( -20.7379, 36.5943, -23.4711, 0.92 ) }
    dend_3 { pt3dadd( -21.5945, 37.5958, -23.9884, 1.15 ) }
    dend_3 { pt3dadd( -22.4631, 38.5806, -24.3418, 1.15 ) }
    dend_3 { pt3dadd( -23.3593, 39.5726, -24.4701, 0.92 ) }
    dend_3 { pt3dadd( -24.8147, 41.3936, -24.0801, 0.69 ) }
    dend_3 { pt3dadd( -25.4171, 42.241, -23.4771, 0.69 ) }
    dend_3 { pt3dadd( -25.7755, 42.761, -22.7582, 0.69 ) }
    dend_3 { pt3dadd( -26.0115, 43.0884, -22.1275, 0.69 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_3 { pt3dadd( -26.3567, 43.5185, -20.9956, 0.69 ) }
    dend_3 { pt3dadd( -26.5526, 43.6768, -20.3343, 0.69 ) }
    dend_3 { pt3dadd( -26.9495, 43.7403, -19.2984, 0.69 ) }
    dend_3 { pt3dadd( -27.308, 43.641, -18.358, 0.69 ) }
    // Section: dend_33, id: dend_33, parent: dend_31 (entry count 4/100)
    dend_33 { pt3dclear() }
    dend_33 { pt3dadd( -0.164009, -31.167, -17.0533, 0.69 ) }
    dend_33 { pt3dadd( 0.652574, -33.6018, -13.2805, 0.69 ) }
    dend_33 { pt3dadd( 1.14401, -35.3664, -10.9099, 0.69 ) }
    dend_33 { pt3dadd( 1.51134, -36.8695, -9.26105, 0.69 ) }
    dend_33 { pt3dadd( 1.86775, -38.3726, -7.89896, 0.69 ) }
    dend_33 { pt3dadd( 2.20524, -39.6449, -6.78814, 0.69 ) }
    dend_33 { pt3dadd( 2.357, -40.2198, -6.27518, 0.69 ) }
    dend_33 { pt3dadd( 2.62428, -41.1522, -5.55819, 0.69 ) }
    dend_33 { pt3dadd( 3.16577, -42.8019, -4.40504, 0.46 ) }
    dend_33 { pt3dadd( 4.0631, -44.8708, -3.04657, 0.69 ) }
    dend_33 { pt3dadd( 5.56753, -47.4838, -1.34918, 0.69 ) }
    dend_33 { pt3dadd( 6.59717, -49.0068, -0.421266, 0.69 ) }
    dend_33 { pt3dadd( 7.31053, -50.0027, 0.184273, 0.69 ) }
    dend_33 { pt3dadd( 8.40506, -51.4028, 1.08557, 0.69 ) }
    dend_33 { pt3dadd( 9.92756, -53.2794, 2.36198, 0.46 ) }
    dend_33 { pt3dadd( 10.7975, -54.3702, 3.22071, 0.46 ) }
    dend_33 { pt3dadd( 11.8912, -55.7632, 4.22238, 0.46 ) }
    dend_33 { pt3dadd( 13.0459, -57.2584, 5.32976, 0.46 ) }
    dend_33 { pt3dadd( 14.2095, -58.952, 6.8067, 0.46 ) }
    dend_33 { pt3dadd( 15.3393, -60.8193, 8.90672, 0.46 ) }
    dend_33 { pt3dadd( 16.434, -62.9373, 11.9226, 0.46 ) }
    // Section: dend_32, id: dend_32, parent: dend_31 (entry count 25/100)
    dend_32 { pt3dclear() }
    dend_32 { pt3dadd( -0.164009, -31.167, -17.0533, 0.69 ) }
    dend_32 { pt3dadd( -0.372621, -31.8141, -18.2048, 0.69 ) }
    dend_32 { pt3dadd( -0.607311, -32.5953, -19.3772, 0.69 ) }
    dend_32 { pt3dadd( -0.759093, -33.3781, -20.4047, 0.69 ) }
    dend_32 { pt3dadd( -0.814526, -33.9697, -21.1305, 0.69 ) }
    dend_32 { pt3dadd( -0.817184, -34.5355, -21.7575, 0.69 ) }
    dend_32 { pt3dadd( -0.817695, -35.5142, -22.7361, 0.69 ) }
    dend_32 { pt3dadd( -0.779329, -36.4208, -23.4752, 0.69 ) }
    dend_32 { pt3dadd( -0.72075, -37.2635, -23.9886, 0.69 ) }
    dend_32 { pt3dadd( -0.676012, -37.8142, -24.2904, 0.69 ) }
    dend_32 { pt3dadd( -0.541909, -38.6049, -24.6876, 0.69 ) }
    dend_32 { pt3dadd( -0.270593, -39.7592, -25.3283, 0.69 ) }
    dend_32 { pt3dadd( -0.123662, -40.3481, -25.6866, 0.69 ) }
    dend_32 { pt3dadd( 0.0800166, -41.5504, -26.4684, 0.69 ) }
    dend_32 { pt3dadd( 0.140219, -42.537, -27.1719, 0.69 ) }
    dend_32 { pt3dadd( 0.116555, -43.7268, -28.0667, 0.92 ) }
    dend_32 { pt3dadd( 0.037255, -44.8998, -28.9885, 0.92 ) }
    dend_32 { pt3dadd( -0.0125283, -45.3519, -29.3451, 0.69 ) }
    dend_32 { pt3dadd( -0.231698, -46.315, -30.0919, 0.69 ) }
    dend_32 { pt3dadd( -0.674917, -47.345, -30.8347, 0.69 ) }
    dend_32 { pt3dadd( -0.949402, -47.7927, -31.1389, 0.69 ) }
    dend_32 { pt3dadd( -1.23594, -48.1614, -31.4027, 0.69 ) }
    dend_32 { pt3dadd( -1.77742, -48.7681, -31.786, 0.69 ) }
    dend_32 { pt3dadd( -2.08416, -49.0866, -32.0196, 0.69 ) }
    dend_32 { pt3dadd( -2.84993, -49.9101, -32.7489, 1.15 ) }
    dend_32 { pt3dadd( -3.59738, -50.7802, -33.5291, 0.92 ) }
    dend_32 { pt3dadd( -4.27214, -51.6103, -34.1808, 0.92 ) }
    dend_32 { pt3dadd( -5.06734, -52.576, -34.8401, 0.92 ) }
    dend_32 { pt3dadd( -6.31648, -54.124, -35.6871, 0.92 ) }
    dend_32 { pt3dadd( -7.36657, -55.4593, -36.2485, 0.69 ) }
    dend_32 { pt3dadd( -8.39921, -56.7419, -36.6275, 0.69 ) }
    dend_32 { pt3dadd( -9.85518, -58.5603, -36.9445, 0.23 ) }
    dend_32 { pt3dadd( -10.6911, -59.5764, -37.0446, 0.46 ) }
    dend_32 { pt3dadd( -11.8326, -60.9493, -37.0628, 0.23 ) }
    dend_32 { pt3dadd( -12.8592, -62.1355, -36.9793, 0.46 ) }
    dend_32 { pt3dadd( -14.3106, -63.7238, -36.7926, 0.23 ) }
    dend_32 { pt3dadd( -15.6478, -65.1343, -36.6437, 0.23 ) }
    dend_32 { pt3dadd( -16.8798, -66.4736, -36.4888, 0.23 ) }
    dend_32 { pt3dadd( -17.9566, -67.6844, -36.333, 0.23 ) }
    // Section: dend_30, id: dend_30, parent: dend_28 (entry count 64/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( 16.0119, -22.1901, -27.6594, 0.23 ) }
    dend_30 { pt3dadd( 14.8415, -23.6226, -27.0851, 0.23 ) }
    dend_30 { pt3dadd( 13.9023, -24.7721, -26.6244, 0.23 ) }
    dend_30 { pt3dadd( 13.2178, -25.61, -26.2885, 0.23 ) }
    dend_30 { pt3dadd( 12.1811, -26.8788, -25.7799, 0.23 ) }
    dend_30 { pt3dadd( 11.0124, -28.3092, -25.2065, 0.23 ) }
    // Section: dend_29, id: dend_29, parent: dend_28 (entry count 70/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 16.0119, -22.1901, -27.6594, 0.46 ) }
    dend_29 { pt3dadd( 17.1535, -22.6128, -28.5023, 0.46 ) }
    dend_29 { pt3dadd( 18.1016, -22.9639, -29.2023, 0.46 ) }
    dend_29 { pt3dadd( 18.6615, -23.1713, -29.6157, 0.46 ) }
    dend_29 { pt3dadd( 19.8951, -23.6281, -30.5266, 0.69 ) }
    dend_29 { pt3dadd( 21.3165, -24.1544, -31.5761, 0.46 ) }
    // Section: dend_22, id: dend_22, parent: dend_20 (entry count 76/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( 23.6461, 10.8554, -49.7838, 0.46 ) }
    dend_22 { pt3dadd( 24.6711, 11.3352, -49.4291, 0.46 ) }
    dend_22 { pt3dadd( 26.0651, 12.1045, -49.0319, 0.46 ) }
    dend_22 { pt3dadd( 27.5286, 13.092, -48.7054, 0.46 ) }
    dend_22 { pt3dadd( 28.5821, 13.913, -48.5998, 0.46 ) }
    dend_22 { pt3dadd( 30.1241, 15.1397, -48.5361, 0.46 ) }
    dend_22 { pt3dadd( 32.2975, 16.825, -48.5175, 0.69 ) }
    dend_22 { pt3dadd( 33.227, 17.5578, -48.5939, 0.46 ) }
    dend_22 { pt3dadd( 34.9439, 18.9338, -48.9532, 0.69 ) }
    dend_22 { pt3dadd( 36.8192, 20.3188, -49.6155, 0.46 ) }
    dend_22 { pt3dadd( 37.628, 20.8042, -49.9448, 0.46 ) }
    dend_22 { pt3dadd( 38.321, 21.0598, -50.2391, 0.46 ) }
    dend_22 { pt3dadd( 39.4123, 21.2687, -50.7364, 0.46 ) }
    dend_22 { pt3dadd( 41.059, 21.4541, -51.4772, 0.69 ) }
    dend_22 { pt3dadd( 42.3564, 21.5416, -52.0846, 0.69 ) }
    dend_22 { pt3dadd( 44.2714, 21.7077, -53.0793, 0.46 ) }
    dend_22 { pt3dadd( 46.007, 21.94, -54.1542, 0.46 ) }
    dend_22 { pt3dadd( 47.4719, 22.1681, -55.1449, 0.46 ) }
    dend_22 { pt3dadd( 48.4053, 22.3537, -55.7939, 0.46 ) }
    dend_22 { pt3dadd( 49.5665, 22.58, -56.6664, 0.46 ) }
    dend_22 { pt3dadd( 50.9043, 22.8977, -57.7221, 0.46 ) }
    dend_22 { pt3dadd( 51.629, 23.1438, -58.4046, 0.46 ) }
    dend_22 { pt3dadd( 52.3303, 23.5006, -59.0775, 0.46 ) }
    dend_22 { pt3dadd( 53.3461, 24.0004, -59.9478, 0.46 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_22 { pt3dadd( 54.2665, 24.4861, -60.6473, 0.46 ) }
    dend_22 { pt3dadd( 55.1601, 24.9558, -61.2555, 0.46 ) }
    dend_22 { pt3dadd( 56.4653, 25.6125, -62.0722, 0.46 ) }
    dend_22 { pt3dadd( 57.4118, 26.1053, -62.6844, 0.46 ) }
    dend_22 { pt3dadd( 58.411, 26.654, -63.3998, 0.46 ) }
    dend_22 { pt3dadd( 59.6802, 27.2628, -64.3288, 0.46 ) }
    dend_22 { pt3dadd( 60.8001, 27.829, -65.1658, 0.46 ) }
    dend_22 { pt3dadd( 61.8702, 28.3962, -66.0353, 0.46 ) }
    dend_22 { pt3dadd( 62.7185, 28.8592, -66.7474, 0.46 ) }
    dend_22 { pt3dadd( 63.9177, 29.5586, -67.8125, 0.46 ) }
    dend_22 { pt3dadd( 64.989, 30.2466, -68.7888, 0.46 ) }
    dend_22 { pt3dadd( 66.3477, 31.0824, -69.8738, 0.46 ) }
    dend_22 { pt3dadd( 67.4999, 31.8229, -70.6659, 0.46 ) }
    dend_22 { pt3dadd( 68.4545, 32.4612, -71.2977, 0.46 ) }
    dend_22 { pt3dadd( 69.7316, 33.3183, -72.0992, 0.46 ) }
    dend_22 { pt3dadd( 70.4133, 33.7612, -72.4814, 0.46 ) }
    dend_22 { pt3dadd( 72.783, 35.3261, -73.8886, 0.46 ) }
    dend_22 { pt3dadd( 73.9022, 36.0173, -74.7079, 0.46 ) }
    dend_22 { pt3dadd( 75.024, 36.77, -75.8554, 0.46 ) }
    dend_22 { pt3dadd( 75.6742, 37.2483, -76.7462, 0.46 ) }
    dend_22 { pt3dadd( 76.028, 37.5271, -77.3392, 0.46 ) }
    dend_22 { pt3dadd( 76.7984, 38.0834, -78.7156, 0.46 ) }
    dend_22 { pt3dadd( 78.0689, 38.9277, -81.0352, 0.46 ) }
    dend_22 { pt3dadd( 78.9914, 39.3508, -82.4622, 0.46 ) }
    dend_22 { pt3dadd( 79.5139, 39.5231, -83.1094, 0.46 ) }
    dend_22 { pt3dadd( 80.2736, 39.7286, -83.9539, 0.46 ) }
    dend_22 { pt3dadd( 80.937, 39.877, -84.6632, 0.46 ) }
    dend_22 { pt3dadd( 81.646, 39.9575, -85.3597, 0.46 ) }
    dend_22 { pt3dadd( 82.6228, 39.8808, -86.3287, 0.46 ) }
    dend_22 { pt3dadd( 84.3093, 39.4342, -87.9095, 0.46 ) }
    dend_22 { pt3dadd( 85.7249, 38.7475, -89.271, 0.46 ) }
    dend_22 { pt3dadd( 86.7817, 37.9913, -90.2359, 0.69 ) }
    dend_22 { pt3dadd( 87.8451, 37.0037, -91.1352, 0.69 ) }
    dend_22 { pt3dadd( 88.9809, 35.7268, -92.034, 0.69 ) }
    dend_22 { pt3dadd( 90.4941, 33.9066, -93.0733, 0.46 ) }
    dend_22 { pt3dadd( 91.4381, 32.773, -93.5799, 0.46 ) }
    dend_22 { pt3dadd( 92.6213, 31.5659, -94.0275, 0.46 ) }
    dend_22 { pt3dadd( 93.5778, 30.6628, -94.3106, 0.46 ) }
    dend_22 { pt3dadd( 94.635, 29.7987, -94.5812, 0.23 ) }
    dend_22 { pt3dadd( 96.2492, 28.8453, -95.071, 0.23 ) }
    dend_22 { pt3dadd( 97.6299, 28.3259, -95.7182, 0.23 ) }
    dend_22 { pt3dadd( 99.1919, 28.0489, -96.4642, 0.23 ) }
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 42/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 23.6461, 10.8554, -49.7838, 0.46 ) }
    dend_21 { pt3dadd( 23.7467, 11.5804, -50.4988, 0.46 ) }
    dend_21 { pt3dadd( 23.8462, 12.1867, -51.0908, 0.46 ) }
    dend_21 { pt3dadd( 24.0877, 13.304, -52.1888, 0.46 ) }
    dend_21 { pt3dadd( 24.4511, 14.7206, -53.5853, 0.46 ) }
    dend_21 { pt3dadd( 24.7385, 15.82, -54.7603, 0.46 ) }
    dend_21 { pt3dadd( 24.9733, 16.8729, -55.9302, 0.46 ) }
    dend_21 { pt3dadd( 25.1455, 17.6358, -56.9342, 0.46 ) }
    dend_21 { pt3dadd( 25.2413, 18.0847, -57.5952, 0.46 ) }
    dend_21 { pt3dadd( 25.3722, 18.8032, -58.7336, 0.23 ) }
    dend_21 { pt3dadd( 25.4961, 19.5203, -59.9121, 0.23 ) }
    dend_21 { pt3dadd( 25.5219, 20.1516, -60.9742, 0.23 ) }
    dend_21 { pt3dadd( 25.4775, 21.4766, -63.366, 0.23 ) }
    dend_21 { pt3dadd( 25.4258, 21.9301, -64.3237, 0.23 ) }
    // Section: dend_14, id: dend_14, parent: dend_8 (entry count 56/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 11.31, 33.1424, -25.9851, 1.15 ) }
    dend_14 { pt3dadd( 10.4398, 33.7315, -28.7499, 1.15 ) }
    dend_14 { pt3dadd( 10.1867, 34.0409, -30.0472, 0.92 ) }
    dend_14 { pt3dadd( 9.93818, 34.6124, -32.3547, 0.92 ) }
    dend_14 { pt3dadd( 9.8312, 35.0726, -34.1686, 1.15 ) }
    dend_14 { pt3dadd( 9.77742, 35.7042, -36.5894, 0.92 ) }
    dend_14 { pt3dadd( 9.77925, 36.3829, -38.9914, 1.15 ) }
    dend_14 { pt3dadd( 9.86978, 37.1356, -41.3683, 1.15 ) }
    dend_14 { pt3dadd( 10.0102, 37.664, -42.7805, 1.15 ) }
    dend_14 { pt3dadd( 10.3021, 38.6396, -44.9985, 1.15 ) }
    dend_14 { pt3dadd( 10.5682, 39.4856, -46.7617, 1.15 ) }
    dend_14 { pt3dadd( 10.7191, 40.1004, -47.9068, 1.15 ) }
    dend_14 { pt3dadd( 10.9382, 41.2256, -49.8376, 0.92 ) }
    dend_14 { pt3dadd( 11.1507, 42.3803, -51.7534, 0.92 ) }
    dend_14 { pt3dadd( 11.3875, 43.3126, -53.2211, 0.92 ) }
    dend_14 { pt3dadd( 11.6954, 44.1961, -54.5167, 0.92 ) }
    dend_14 { pt3dadd( 11.9321, 44.8002, -55.3887, 0.92 ) }
    dend_14 { pt3dadd( 12.3711, 45.8387, -57.0359, 0.92 ) }
    dend_14 { pt3dadd( 12.6346, 46.4023, -58.0708, 0.92 ) }
    dend_14 { pt3dadd( 12.9441, 47.2057, -60.0942, 0.92 ) }
    dend_14 { pt3dadd( 12.9926, 47.4142, -60.7969, 0.92 ) }
    dend_14 { pt3dadd( 12.8708, 47.7449, -62.3269, 0.92 ) }
    dend_14 { pt3dadd( 12.4345, 48.1017, -63.9729, 0.92 ) }
    dend_14 { pt3dadd( 11.9908, 48.3777, -65.1334, 0.92 ) }
    dend_14 { pt3dadd( 11.4819, 48.7421, -66.5262, 0.92 ) }
    dend_14 { pt3dadd( 11.2188, 48.9589, -67.3491, 0.92 ) }
    dend_14 { pt3dadd( 11.0479, 49.3011, -68.4105, 0.92 ) }
    dend_14 { pt3dadd( 11.1774, 50.155, -70.303, 0.92 ) }
    dend_14 { pt3dadd( 11.5068, 50.9119, -71.52, 0.92 ) }
    dend_14 { pt3dadd( 11.9666, 51.9967, -73.1109, 0.92 ) }
    dend_14 { pt3dadd( 12.1861, 52.5069, -73.8673, 0.92 ) }
    dend_14 { pt3dadd( 12.3328, 53.0809, -74.6496, 0.92 ) }
    dend_14 { pt3dadd( 12.3164, 53.561, -75.265, 0.92 ) }
    dend_14 { pt3dadd( 12.1248, 54.0146, -75.8861, 0.69 ) }
    dend_14 { pt3dadd( 11.012, 55.3293, -77.9258, 0.69 ) }
    dend_14 { pt3dadd( 10.3749, 55.7975, -78.8249, 0.69 ) }
    dend_14 { pt3dadd( 8.9043, 56.4541, -80.6603, 0.69 ) }
    dend_14 { pt3dadd( 7.90875, 56.6205, -81.7552, 0.69 ) }
    dend_14 { pt3dadd( 7.19072, 56.5727, -82.4935, 0.69 ) }
    dend_14 { pt3dadd( 5.97306, 56.288, -83.7154, 0.69 ) }
    dend_14 { pt3dadd( 4.88482, 55.8448, -84.6077, 0.69 ) }
    dend_14 { pt3dadd( 3.93155, 55.3099, -85.1778, 0.69 ) }
    dend_14 { pt3dadd( 2.62883, 54.4417, -85.7127, 0.69 ) }
    dend_14 { pt3dadd( 1.78338, 53.8475, -85.9701, 0.69 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_14 { pt3dadd( 0.76035, 53.1063, -86.2246, 0.69 ) }
    dend_14 { pt3dadd( -1.04071, 51.7381, -86.5922, 0.69 ) }
    dend_14 { pt3dadd( -2.80978, 50.3137, -87.031, 0.69 ) }
    dend_14 { pt3dadd( -4.23436, 49.1631, -87.435, 0.69 ) }
    dend_14 { pt3dadd( -5.3592, 48.2321, -87.8181, 0.69 ) }
    dend_14 { pt3dadd( -6.49782, 47.2889, -88.2461, 0.69 ) }
    dend_14 { pt3dadd( -7.75497, 46.3055, -88.8412, 0.69 ) }
    dend_14 { pt3dadd( -9.00982, 45.4273, -89.6617, 0.69 ) }
    dend_14 { pt3dadd( -10.3417, 44.6679, -90.6416, 0.69 ) }
    dend_14 { pt3dadd( -11.3836, 44.1684, -91.456, 0.69 ) }
    dend_14 { pt3dadd( -12.3409, 43.8019, -92.233, 0.69 ) }
    dend_14 { pt3dadd( -14.1204, 43.2415, -93.7426, 0.69 ) }
    dend_14 { pt3dadd( -15.5324, 42.829, -95.1147, 0.69 ) }
    dend_14 { pt3dadd( -16.28, 42.5713, -95.8706, 0.69 ) }
    dend_14 { pt3dadd( -17.6875, 41.9394, -97.4212, 0.69 ) }
    dend_14 { pt3dadd( -18.6243, 41.4271, -98.5757, 0.69 ) }
    dend_14 { pt3dadd( -19.1, 41.0887, -99.2975, 0.92 ) }
    dend_14 { pt3dadd( -19.9174, 40.3705, -100.701, 0.92 ) }
    dend_14 { pt3dadd( -21.1131, 39.2648, -102.859, 0.92 ) }
    dend_14 { pt3dadd( -22.1242, 38.3036, -104.764, 0.69 ) }
    dend_14 { pt3dadd( -23.0256, 37.4833, -106.461, 0.69 ) }
    dend_14 { pt3dadd( -24.3303, 36.4442, -108.849, 0.69 ) }
    dend_14 { pt3dadd( -25.1505, 35.8931, -110.276, 0.69 ) }
    dend_14 { pt3dadd( -26.0213, 35.5324, -111.531, 0.69 ) }
    dend_14 { pt3dadd( -27.0239, 35.3984, -112.73, 0.69 ) }
    dend_14 { pt3dadd( -27.7447, 35.4772, -113.33, 0.69 ) }
    dend_14 { pt3dadd( -28.6801, 35.6518, -113.919, 0.69 ) }
    dend_14 { pt3dadd( -30.0553, 35.8959, -114.641, 0.69 ) }
    dend_14 { pt3dadd( -32.1422, 36.1549, -115.686, 0.46 ) }
    dend_14 { pt3dadd( -33.4098, 36.2014, -116.321, 0.46 ) }
    dend_14 { pt3dadd( -35.4396, 36.1565, -117.395, 0.46 ) }
    dend_14 { pt3dadd( -36.4826, 36.088, -118.024, 0.46 ) }
    dend_14 { pt3dadd( -37.3075, 36.0275, -118.559, 0.46 ) }
    dend_14 { pt3dadd( -38.7342, 35.9288, -119.615, 0.46 ) }
    dend_14 { pt3dadd( -40.5979, 35.647, -121.205, 0.46 ) }
    dend_14 { pt3dadd( -41.5906, 35.3684, -122.192, 0.46 ) }
    dend_14 { pt3dadd( -42.4492, 35.0509, -123.211, 0.46 ) }
    dend_14 { pt3dadd( -43.2603, 34.7836, -124.247, 0.46 ) }
    dend_14 { pt3dadd( -44.4811, 34.444, -125.602, 0.46 ) }
    dend_14 { pt3dadd( -45.5726, 34.0831, -126.752, 0.46 ) }
    dend_14 { pt3dadd( -46.9119, 33.551, -127.948, 0.46 ) }
    dend_14 { pt3dadd( -48.0963, 33.0018, -128.723, 0.46 ) }
    dend_14 { pt3dadd( -49.5479, 32.2339, -129.357, 0.46 ) }
    dend_14 { pt3dadd( -52.6238, 30.7167, -130.278, 0.46 ) }
    dend_14 { pt3dadd( -54.1599, 30.0203, -130.656, 0.46 ) }
    dend_14 { pt3dadd( -54.9903, 29.6528, -130.883, 0.46 ) }
    dend_14 { pt3dadd( -56.394, 29.0858, -131.316, 0.46 ) }
    dend_14 { pt3dadd( -58.4518, 28.1833, -132.159, 0.46 ) }
    dend_14 { pt3dadd( -59.7285, 27.633, -132.904, 0.46 ) }
    dend_14 { pt3dadd( -61.7045, 26.9183, -134.426, 0.46 ) }
    dend_14 { pt3dadd( -62.901, 26.6233, -135.417, 0.46 ) }
    dend_14 { pt3dadd( -64.4622, 26.3688, -136.844, 0.46 ) }
    dend_14 { pt3dadd( -66.1499, 26.236, -138.594, 0.46 ) }
    dend_14 { pt3dadd( -66.9792, 26.2568, -139.641, 0.46 ) }
    dend_14 { pt3dadd( -67.8915, 26.3682, -140.991, 0.46 ) }
    dend_14 { pt3dadd( -69.0805, 26.7524, -143.023, 0.46 ) }
    dend_14 { pt3dadd( -69.7625, 27.1102, -144.563, 0.46 ) }
    dend_14 { pt3dadd( -70.093, 27.4261, -145.792, 0.46 ) }
    dend_14 { pt3dadd( -70.73, 28.3125, -148.795, 0.46 ) }
    dend_14 { pt3dadd( -71.1616, 29.0964, -151.428, 0.46 ) }
    dend_14 { pt3dadd( -71.2899, 29.5348, -152.89, 0.46 ) }
    dend_14 { pt3dadd( -71.275, 30.2131, -155.151, 0.46 ) }
    dend_14 { pt3dadd( -71.0775, 31.0015, -157.856, 0.46 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 63/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 11.31, 33.1424, -25.9851, 1.38 ) }
    dend_9 { pt3dadd( 11.5514, 33.5403, -27.4592, 1.38 ) }
    dend_9 { pt3dadd( 12.0455, 34.3549, -30.4769, 1.38 ) }
    dend_9 { pt3dadd( 12.3789, 34.9046, -32.5136, 1.15 ) }
    // Section: dend_13, id: dend_13, parent: dend_9 (entry count 67/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 12.3789, 34.9046, -32.5136, 0.46 ) }
    dend_13 { pt3dadd( 13.4439, 36.2937, -33.351, 0.46 ) }
    dend_13 { pt3dadd( 14.5486, 37.7483, -34.2807, 0.46 ) }
    dend_13 { pt3dadd( 14.7205, 38.0103, -34.4542, 0.46 ) }
    dend_13 { pt3dadd( 15.3741, 39.1336, -35.1925, 0.46 ) }
    dend_13 { pt3dadd( 15.8871, 40.054, -35.7861, 0.46 ) }
    dend_13 { pt3dadd( 16.4425, 41.0366, -36.4755, 0.46 ) }
    dend_13 { pt3dadd( 16.8695, 41.836, -37.0839, 0.46 ) }
    dend_13 { pt3dadd( 17.5245, 42.9187, -38.0192, 0.46 ) }
    dend_13 { pt3dadd( 17.7963, 43.266, -38.3489, 0.69 ) }
    dend_13 { pt3dadd( 18.6032, 44.1534, -39.1266, 0.69 ) }
    dend_13 { pt3dadd( 19.6367, 45.1388, -39.9118, 0.69 ) }
    dend_13 { pt3dadd( 20.5127, 45.8744, -40.3664, 0.46 ) }
    dend_13 { pt3dadd( 21.7938, 46.7854, -40.6952, 0.46 ) }
    dend_13 { pt3dadd( 23.0899, 47.6616, -40.7055, 0.46 ) }
    dend_13 { pt3dadd( 24.7861, 48.7701, -40.5388, 0.46 ) }
    dend_13 { pt3dadd( 25.4926, 49.2452, -40.3225, 0.69 ) }
    dend_13 { pt3dadd( 26.1524, 49.7276, -39.9581, 0.69 ) }
    dend_13 { pt3dadd( 27.0235, 50.4386, -39.2463, 0.23 ) }
    dend_13 { pt3dadd( 27.7484, 51.2237, -38.3582, 0.23 ) }
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 87/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 12.3789, 34.9046, -32.5136, 0.69 ) }
    dend_10 { pt3dadd( 13.2476, 34.7177, -32.6137, 0.69 ) }
    dend_10 { pt3dadd( 14.5943, 34.461, -32.8221, 0.69 ) }
    dend_10 { pt3dadd( 15.4801, 34.3191, -32.9808, 0.69 ) }
    dend_10 { pt3dadd( 16.6373, 34.1712, -33.1963, 0.69 ) }
    dend_10 { pt3dadd( 17.1031, 34.1303, -33.3192, 1.15 ) }
    dend_10 { pt3dadd( 17.443, 34.1184, -33.4478, 0.92 ) }
    dend_10 { pt3dadd( 18.411, 34.2516, -34.0732, 0.92 ) }
    dend_10 { pt3dadd( 18.6929, 34.3408, -34.3121, 0.92 ) }
    dend_10 { pt3dadd( 18.9264, 34.4306, -34.5607, 0.92 ) }
    dend_10 { pt3dadd( 19.747, 34.8098, -35.5078, 0.92 ) }
    dend_10 { pt3dadd( 20.4889, 35.2078, -36.4393, 0.69 ) }
    dend_10 { pt3dadd( 20.853, 35.4802, -36.936, 0.69 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_10 { pt3dadd( 21.3494, 36.0253, -37.6862, 0.69 ) }
    dend_10 { pt3dadd( 21.7203, 36.4879, -38.2348, 0.69 ) }
    dend_10 { pt3dadd( 22.055, 36.901, -38.7032, 0.69 ) }
    dend_10 { pt3dadd( 22.4731, 37.3464, -39.2262, 0.69 ) }
    dend_10 { pt3dadd( 23.0257, 37.8211, -39.8216, 0.69 ) }
    dend_10 { pt3dadd( 23.6831, 38.2759, -40.4607, 0.69 ) }
    dend_10 { pt3dadd( 24.493, 38.693, -41.1997, 0.92 ) }
    dend_10 { pt3dadd( 25.3254, 38.9446, -41.8712, 0.69 ) }
    dend_10 { pt3dadd( 26.1956, 39.0544, -42.4962, 0.69 ) }
    dend_10 { pt3dadd( 27.2116, 39.0563, -43.0911, 0.92 ) }
    dend_10 { pt3dadd( 28.2973, 38.9158, -43.6124, 0.69 ) }
    dend_10 { pt3dadd( 29.7607, 38.6005, -44.209, 0.92 ) }
    dend_10 { pt3dadd( 30.8698, 38.2687, -44.6158, 0.92 ) }
    dend_10 { pt3dadd( 31.3895, 38.0819, -44.7816, 0.92 ) }
    dend_10 { pt3dadd( 32.4422, 37.6406, -45.074, 0.69 ) }
    dend_10 { pt3dadd( 33.9607, 36.9208, -45.4264, 0.69 ) }
    dend_10 { pt3dadd( 35.0755, 36.3679, -45.6609, 0.69 ) }
    dend_10 { pt3dadd( 36.2964, 35.7617, -45.8554, 0.69 ) }
    dend_10 { pt3dadd( 37.5457, 35.1603, -46.0218, 0.92 ) }
    dend_10 { pt3dadd( 38.5009, 34.7227, -46.1429, 0.69 ) }
    dend_10 { pt3dadd( 39.6068, 34.2058, -46.2793, 0.92 ) }
    dend_10 { pt3dadd( 40.8953, 33.6243, -46.3843, 0.46 ) }
    dend_10 { pt3dadd( 41.5637, 33.3298, -46.4212, 0.46 ) }
    dend_10 { pt3dadd( 42.3236, 33.0393, -46.4843, 0.46 ) }
    dend_10 { pt3dadd( 42.8734, 32.8615, -46.5988, 0.46 ) }
    dend_10 { pt3dadd( 43.6893, 32.6607, -46.8639, 0.46 ) }
    dend_10 { pt3dadd( 44.512, 32.5069, -47.2362, 0.46 ) }
    dend_10 { pt3dadd( 44.9882, 32.4423, -47.4718, 0.46 ) }
    dend_10 { pt3dadd( 45.5915, 32.4057, -47.8609, 0.69 ) }
    dend_10 { pt3dadd( 46.5098, 32.4387, -48.5797, 0.69 ) }
    dend_10 { pt3dadd( 46.9838, 32.4925, -48.9744, 0.46 ) }
    dend_10 { pt3dadd( 47.6369, 32.6193, -49.5284, 0.46 ) }
    dend_10 { pt3dadd( 48.4624, 32.7703, -50.248, 0.46 ) }
    dend_10 { pt3dadd( 49.4708, 32.8813, -51.0438, 0.46 ) }
    dend_10 { pt3dadd( 50.0675, 32.9189, -51.4736, 0.46 ) }
    dend_10 { pt3dadd( 50.4629, 32.9393, -51.7431, 0.69 ) }
    dend_10 { pt3dadd( 51.2467, 33.0029, -52.2504, 0.46 ) }
    dend_10 { pt3dadd( 51.8969, 33.0799, -52.6616, 0.46 ) }
    dend_10 { pt3dadd( 52.6628, 33.2154, -53.1298, 0.46 ) }
    dend_10 { pt3dadd( 53.6157, 33.3954, -53.6312, 0.46 ) }
    dend_10 { pt3dadd( 54.2567, 33.5017, -53.9292, 0.46 ) }
    dend_10 { pt3dadd( 55.0367, 33.6566, -54.3072, 0.46 ) }
    // Section: dend_12, id: dend_12, parent: dend_10 (entry count 42/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 55.0367, 33.6566, -54.3072, 0.46 ) }
    dend_12 { pt3dadd( 57.1583, 33.8169, -54.8104, 0.46 ) }
    dend_12 { pt3dadd( 58.8311, 33.9612, -55.2855, 0.46 ) }
    dend_12 { pt3dadd( 60.0964, 34.0289, -55.7001, 0.46 ) }
    dend_12 { pt3dadd( 61.0729, 34.0229, -56.0741, 0.46 ) }
    dend_12 { pt3dadd( 62.6381, 33.9503, -56.6827, 0.46 ) }
    dend_12 { pt3dadd( 64.315, 33.7932, -57.3522, 0.46 ) }
    dend_12 { pt3dadd( 65.1056, 33.6184, -57.7061, 0.46 ) }
    dend_12 { pt3dadd( 66.8056, 33.1286, -58.4009, 0.46 ) }
    dend_12 { pt3dadd( 68.3835, 32.6913, -58.8864, 0.46 ) }
    dend_12 { pt3dadd( 69.3721, 32.4056, -59.1658, 0.23 ) }
    dend_12 { pt3dadd( 70.2435, 32.1554, -59.3319, 0.23 ) }
    dend_12 { pt3dadd( 72.097, 31.5441, -59.5082, 0.23 ) }
    dend_12 { pt3dadd( 73.8888, 30.8803, -59.5813, 0.23 ) }
    dend_12 { pt3dadd( 75.5854, 30.369, -59.3334, 0.23 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 57/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 55.0367, 33.6566, -54.3072, 0.46 ) }
    dend_11 { pt3dadd( 57.5019, 33.9305, -56.4496, 0.46 ) }
    dend_11 { pt3dadd( 59.5922, 34.2604, -58.2359, 0.46 ) }
    dend_11 { pt3dadd( 61.0586, 34.4385, -59.3479, 0.46 ) }
    dend_11 { pt3dadd( 62.6532, 34.583, -60.4419, 0.46 ) }
    dend_11 { pt3dadd( 64.3878, 34.6953, -61.6128, 0.46 ) }
    dend_11 { pt3dadd( 65.7396, 34.7935, -62.5814, 0.46 ) }
    dend_11 { pt3dadd( 67.4649, 34.9204, -63.7736, 0.46 ) }
    dend_11 { pt3dadd( 69.7597, 35.0867, -65.3739, 0.46 ) }
    dend_11 { pt3dadd( 71.9736, 35.254, -66.9525, 0.46 ) }
    dend_11 { pt3dadd( 74.0809, 35.4074, -68.5139, 0.46 ) }
    dend_11 { pt3dadd( 75.5777, 35.5929, -69.6967, 0.46 ) }
    dend_11 { pt3dadd( 78.4114, 35.9605, -72.007, 0.46 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_34, dend_23, dend_16, dend_5, dend_0, dend_36, dend_35, dend_27, dend_24, dend_18, dend_17, dend_7, dend_6, dend_2, dend_1, dend_38, dend_37, dend_31, dend_28, dend_26, dend_25, dend_20, dend_19, dend_15, dend_8, dend_4, dend_3, dend_33, dend_32, dend_30, dend_29, dend_22, dend_21, dend_14, dend_9, dend_13, dend_10, dend_12, dend_11]}
    ModelViewParmSubset_2 = new SectionList()
    dend_34 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_36 ModelViewParmSubset_2.append()
    dend_35 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_38 ModelViewParmSubset_2.append()
    dend_37 ModelViewParmSubset_2.append()
    dend_31 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_33 ModelViewParmSubset_2.append()
    dend_32 ModelViewParmSubset_2.append()
    dend_30 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_34, dend_23, dend_16, dend_5, dend_0, dend_36, dend_35, dend_27, dend_24, dend_18, dend_17, dend_7, dend_6, dend_2, dend_1, dend_38, dend_37, dend_31, dend_28, dend_26, dend_25, dend_20, dend_19, dend_15, dend_8, dend_4, dend_3, dend_33, dend_32, dend_30, dend_29, dend_22, dend_21, dend_14, dend_9, dend_13, dend_10, dend_12, dend_11]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_34 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_36 ModelViewParmSubset_4.append()
    dend_35 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_38 ModelViewParmSubset_4.append()
    dend_37 ModelViewParmSubset_4.append()
    dend_31 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_33 ModelViewParmSubset_4.append()
    dend_32 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_17 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_15 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_4 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_33]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_33 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_32]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_32 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_35 = new SectionList()
    dend_22 OneSecGrp_SectionRef_35.append()

    // Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_37 = new SectionList()
    dend_14 OneSecGrp_SectionRef_37.append()

    // Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_40 = new SectionList()
    dend_10 OneSecGrp_SectionRef_40.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_23 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_5 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_0 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_24 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_27 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_7 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_16 OneSecGrp_SectionRef_4.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_25 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_34]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_34 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_2 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_6 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_35]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_35 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_36]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_36 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_28 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_31]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_31 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_1 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_8 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_29 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_30 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_38]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_38 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_38 = new SectionList()
    dend_9 OneSecGrp_SectionRef_38.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_37]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_37 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_18 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_26 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_20 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_3 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_36 = new SectionList()
    dend_21 OneSecGrp_SectionRef_36.append()

    // Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_39 = new SectionList()
    dend_13 OneSecGrp_SectionRef_39.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_19 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_41, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_41 = new SectionList()
    dend_12 OneSecGrp_SectionRef_41.append()

    // Group: {name=OneSecGrp_SectionRef_42, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_42 = new SectionList()
    dend_11 OneSecGrp_SectionRef_42.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36, dend_37, dend_38], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()
    dend_31 basal.append()
    dend_32 basal.append()
    dend_33 basal.append()
    dend_34 basal.append()
    dend_35 basal.append()
    dend_36 basal.append()
    dend_37 basal.append()
    dend_38 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_23, dend_23, dend_23, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_35, dend_35, dend_35, dend_35, dend_35, dend_27, dend_27, dend_27, dend_27, dend_27, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_38, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_37, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_9, dend_9, dend_9, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_38 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_30 all.append()
    dend_30 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cNAC_149_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cNAC_149_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cNAC_149_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cNAC_149_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_17 nseg = 3
    dend_15 nseg = 3
    dend_4 nseg = 3
    dend_33 nseg = 3
    dend_32 nseg = 3
    dend_22 nseg = 5
    dend_14 nseg = 9
    dend_10 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cNAC187_L1_NGCDA_c1b837d894_0_0


