// Cell: bAC217_L4_BTC_9f1127ad33_0_0
/*
{
  "id" : "bAC217_L4_BTC_9f1127ad33_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-1.49721, 11.7986, 0.0301706, 2.4623", "-1.37308, 10.661, 0.0290426, 4.20373", "-1.24895, 9.52332, 0.0279145, 5.59272", "-1.12482, 8.38566, 0.0267864, 6.71614", "-1.00068, 7.248, 0.0256584, 7.74544", "-0.87655, 6.11034, 0.0245303, 8.57739", "-0.752417, 4.97268, 0.0234023, 9.13171", "-0.628284, 3.83502, 0.0222742, 9.51195", "-0.504152, 2.69736, 0.0211462, 9.92921", "-0.380019, 1.5597, 0.0200181, 10.275", "-0.255886, 0.422041, 0.01889, 10.4231", "-0.131754, -0.715618, 0.017762, 10.4046", "-0.00762106, -1.85328, 0.0166339, 10.4069", "0.116512, -2.99094, 0.0155059, 10.1383", "0.240644, -4.1286, 0.0143778, 9.53645", "0.364777, -5.26626, 0.0132498, 8.49552", "0.48891, -6.40392, 0.0121217, 7.50349", "0.613042, -7.54158, 0.0109937, 6.64245", "0.737175, -8.67924, 0.0098656, 6.01482", "0.861308, -9.8169, 0.00873754, 4.86867", "0.98544, -10.9546, 0.00760949, 2.96361" ]
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-1.78536, 10.9696, 1.5043, 2.36", "-1.78536, 10.9696, 1.5043, 2.36", "-1.94605, 11.8717, 1.74777, 2.06", "-2.13449, 12.8169, 2.03441, 2.06", "-2.15588, 12.9059, 2.06254, 2.06", "-2.42822, 13.9413, 2.39126, 2.21", "-2.84977, 15.3855, 2.92632, 2.21", "-3.17885, 16.336, 3.31919, 2.21", "-3.19826, 16.3851, 3.34302, 2.21", "-3.5929, 17.3118, 3.82963, 2.21", "-3.77555, 17.723, 4.05415, 2.36", "-4.33882, 18.912, 4.75368, 2.43", "-4.69943, 19.6277, 5.16306, 2.65", "-5.25326, 20.7461, 5.82991, 2.65" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999821452163534
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "0.094648, -9.74991, 0.0043065, 4.86", "0.094648, -9.74991, 0.0043065, 4.86", "-0.224377, -10.7247, -0.0276088, 4.57", "-0.578047, -11.7868, -0.0697762, 4.2", "-1.20951, -13.6928, -0.151119, 2.87", "-1.7173, -15.312, -0.238751, 2.58", "-2.27123, -17.153, -0.348391, 2.5", "-2.65786, -18.5321, -0.417514, 2.58", "-2.67031, -18.5818, -0.419586, 2.58", "-2.79908, -19.2489, -0.43946, 2.73", "-2.99007, -20.8314, -0.462012, 2.73", "-3.03076, -21.8822, -0.432308, 2.36", "-3.00486, -23.1844, -0.34358, 2.65", "-2.93948, -24.3301, -0.240718, 2.87", "-2.85533, -25.4417, -0.135495, 3.09", "-2.74555, -26.4724, -0.0341633, 3.09", "-2.55696, -27.8285, 0.10511, 3.32", "-2.45198, -28.4958, 0.169261, 3.02", "-2.22695, -29.8688, 0.276937, 2.43", "-1.96113, -31.4739, 0.401676, 2.36", "-1.79727, -32.5235, 0.473056, 2.36", "-1.7051, -33.0496, 0.497179, 2.36" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999821452163534
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "0.98544, -10.9546, 0.00760949, 0.674348", "2.61247, -25.8661, 0.00760949, 0.674348", "4.23949, -40.7776, 0.00760949, 0.674348" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-5.25326, 20.7461, 5.82991, 1.4", "-5.9315, 22.1078, 6.05942, 1.4", "-6.49013, 23.292, 6.23969, 1.18", "-6.86233, 24.1386, 6.35071, 1.18", "-7.23996, 25.0346, 6.45714, 1.18", "-7.58594, 25.8952, 6.5458, 1.62", "-7.79496, 26.4469, 6.61263, 1.99", "-7.81601, 26.5174, 6.62066, 1.99", "-8.03286, 27.4016, 6.70235, 2.06", "-8.05827, 27.5378, 6.71375, 2.06", "-8.1922, 28.5728, 6.78474, 1.62", "-8.30911, 29.9417, 6.89935, 1.4", "-8.31512, 30.0411, 6.90833, 1.4", "-8.3572, 31.1503, 7.00803, 1.47", "-8.37095, 32.1285, 7.09445, 1.77", "-8.37233, 32.9826, 7.15863, 1.92", "-8.35558, 34.1805, 7.22364, 1.11", "-8.35581, 34.4576, 7.23064, 1.11", "-8.38009, 34.9933, 7.24771, 1.11", "-8.39985, 35.1875, 7.2557, 1.11", "-8.58786, 36.3894, 7.31096, 0.96", "-8.75858, 37.1678, 7.31989, 0.96", "-8.9696, 37.928, 7.30077, 1.55", "-9.18287, 38.6184, 7.26748, 2.36", "-9.37452, 39.2501, 7.22603, 2.5", "-9.52196, 39.7471, 7.18693, 2.8", "-9.82511, 40.8032, 7.09191, 2.43", "-10.0635, 41.695, 7.00379, 1.99", "-10.3906, 43.2821, 6.88294, 1.4", "-10.4957, 44.1115, 6.83845, 1.4", "-10.5056, 44.3177, 6.83589, 1.4", "-10.4719, 45.3116, 6.85831, 1.62", "-10.465, 45.3762, 6.86368, 1.62", "-10.2477, 46.8384, 7.04806, 1.03", "-10.0536, 47.9588, 7.26066, 1.03", "-9.89559, 48.9399, 7.48706, 1.47", "-9.71156, 50.1512, 7.79063, 1.69", "-9.5246, 51.5879, 8.16916, 1.69", "-9.4439, 52.6006, 8.43239, 2.14", "-9.42954, 53.7016, 8.70577, 2.8", "-9.47354, 54.7038, 8.95347, 3.24", "-9.53818, 55.3504, 9.09522, 3.39", "-9.69434, 56.314, 9.28129, 2.21", "-9.94356, 57.5156, 9.46944, 1.33", "-10.2189, 58.5978, 9.60401, 1.18", "-10.2527, 58.7124, 9.6114, 1.18", "-10.5907, 59.8043, 9.64302, 1.47", "-10.7887, 60.4264, 9.66032, 1.62" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-5.25326, 20.7461, 5.82991, 1.03", "-4.14537, 21.4833, 5.84542, 1.03", "-4.02793, 21.5575, 5.84674, 1.03", "-3.11599, 22.1164, 5.85467, 1.03", "-1.88976, 22.8551, 5.86383, 1.4", "-1.83621, 22.8867, 5.86587, 1.4", "-0.359854, 23.7636, 5.946, 1.4", "-0.303848, 23.7966, 5.94971, 1.4", "0.533726, 24.3238, 6.01636, 1.55", "0.591815, 24.3629, 6.02198, 1.55", "1.77265, 25.2799, 6.15532, 0.96", "2.36237, 25.7929, 6.22679, 0.96", "2.83895, 26.2952, 6.29225, 1.18", "3.34794, 26.8962, 6.35847, 1.4", "3.42504, 27.0011, 6.36379, 1.4", "3.8533, 27.6191, 6.3577, 1.4", "3.8992, 27.6873, 6.3527, 1.4", "4.40064, 28.3957, 6.28991, 1.69", "4.77201, 28.8845, 6.24301, 1.92", "5.29588, 29.55, 6.1902, 1.4", "5.97398, 30.4215, 6.13794, 1.11", "6.60504, 31.2279, 6.1004, 1.11", "6.65704, 31.2967, 6.09841, 1.11", "7.22445, 32.0711, 6.08969, 1.11", "7.68, 32.7448, 6.09981, 1.03", "8.15836, 33.5265, 6.13786, 1.03", "8.19689, 33.6029, 6.14145, 1.03", "8.63642, 34.6364, 6.18555, 1.03", "8.65656, 34.6932, 6.18746, 1.03", "8.85406, 35.4565, 6.20293, 0.81", "8.86676, 35.5447, 6.20286, 0.81", "8.89415, 36.2142, 6.20249, 0.59", "8.88927, 36.3419, 6.20243, 0.59", "8.82166, 36.9934, 6.21733, 0.59", "8.80025, 37.2321, 6.22615, 0.59", "8.76347, 37.8013, 6.25204, 0.74", "8.76051, 37.8902, 6.25646, 0.74", "8.78889, 38.8933, 6.30877, 0.74", "8.86238, 39.6524, 6.34642, 1.25", "8.97455, 40.2431, 6.37331, 1.69", "9.19024, 41.0785, 6.40505, 1.4", "9.20815, 41.136, 6.40678, 1.4", "9.43052, 41.8334, 6.42159, 2.06", "9.68754, 42.6091, 6.43219, 2.21", "9.95811, 43.431, 6.43579, 1.77", "10.2553, 44.3616, 6.44146, 1.11", "10.4698, 45.0882, 6.44677, 1.11", "10.6561, 45.7936, 6.45238, 1.4", "10.8703, 46.7518, 6.4609, 0.59", "10.8807, 46.8109, 6.46147, 0.59", "10.9786, 47.694, 6.49244, 0.44", "11.0044, 48.3756, 6.5339, 1.11", "10.9988, 48.8867, 6.57568, 1.33", "10.9953, 49.0043, 6.58322, 1.33", "10.9684, 49.3627, 6.59729, 1.33", "10.898, 50.1935, 6.60094, 0.52", "10.7808, 51.2777, 6.57338, 0.52", "10.7734, 51.3451, 6.56968, 0.52", "10.6987, 52.0266, 6.49038, 0.96", "10.6251, 52.8434, 6.3257, 1.55", "10.5774, 53.4969, 6.10915, 1.77", "10.5588, 53.824, 5.95899, 1.99", "10.5566, 53.8686, 5.93668, 1.99", "10.5247, 54.6953, 5.53391, 1.99", "10.5004, 55.417, 5.18685, 1.4", "10.4786, 56.6578, 4.58408, 0.44", "10.4698, 57.4082, 4.22549, 0.96", "10.474, 57.984, 3.96733, 1.4", "10.4864, 58.604, 3.71789, 1.77", "10.4891, 58.6538, 3.70202, 1.77", "10.5272, 59.1285, 3.60377, 1.99", "10.5437, 59.2614, 3.59307, 1.99", "10.6048, 59.6959, 3.58084, 1.99", "10.6196, 59.8149, 3.57784, 1.99", "10.6749, 60.3818, 3.54722, 1.69", "10.7158, 61.0844, 3.49967, 1.11", "10.7319, 61.7927, 3.44683, 0.44", "10.7222, 62.6511, 3.38139, 0.37", "10.6718, 63.4417, 3.31629, 1.03", "10.6195, 64.0859, 3.28501, 1.03", "10.5588, 64.8726, 3.26928, 0.44", "10.5274, 65.3489, 3.2704, 0.88", "10.5107, 65.7848, 3.27905, 1.18", "10.5076, 66.3758, 3.29916, 1.18", "10.5772, 67.7034, 3.35223, 0.37", "10.6533, 68.4227, 3.3865, 0.37", "10.8205, 69.4649, 3.42258, 1.33", "10.9597, 70.1995, 3.44282, 2.36", "11.0481, 70.6039, 3.44815, 2.95", "11.1677, 71.0537, 3.43967, 3.24", "11.1871, 71.1287, 3.43094, 3.24", "11.2388, 71.3449, 3.40039, 3.24" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-1.7051, -33.0496, 0.497179, 2.06", "-1.69161, -34.0036, 0.581149, 2.06", "-1.64553, -35.6896, 0.551196, 2.06", "-1.59446, -36.862, 0.447415, 2.06", "-1.50594, -38.0671, 0.294982, 2.06", "-1.34465, -39.5937, 0.0465723, 2.14", "-1.20936, -40.6443, -0.138943, 2.14", "-0.95979, -42.2188, -0.504912, 2.43", "-0.81691, -43.0873, -0.742269, 2.8", "-0.61756, -44.267, -1.05135, 2.36", "-0.338451, -45.8689, -1.45915, 2.36", "-0.112281, -47.0957, -1.74812, 2.36", "0.143827, -48.5658, -2.07675, 2.36", "0.363546, -50.0935, -2.3873, 2.14", "0.511941, -51.4746, -2.69015, 2.14", "0.595182, -52.8317, -3.01442, 2.28", "0.601721, -53.3295, -3.13856, 2.28", "0.549283, -54.5788, -3.4713, 1.69", "0.40062, -55.9296, -3.78385, 1.18", "0.229002, -56.7261, -3.91395, 1.18", "0.00831734, -57.2717, -3.89978, 1.18", "-0.361667, -57.8354, -3.71888, 1.18", "-0.857562, -58.3755, -3.39749, 0.96", "-1.77483, -59.1323, -2.75832, 1.11", "-2.7636, -59.8112, -2.14004, 1.69", "-3.83214, -60.5065, -1.57768, 1.55", "-4.47881, -60.9103, -1.35378, 1.92", "-5.09715, -61.306, -1.24775, 2.21", "-5.92834, -61.8941, -1.2787, 2.06", "-6.97114, -62.6994, -1.50919, 1.99", "-7.7693, -63.3798, -1.77478, 1.77", "-8.67196, -64.2269, -2.08146, 1.92", "-9.47111, -65.0565, -2.30698, 1.84", "-10.2476, -65.9471, -2.40225, 1.69", "-10.7475, -66.6044, -2.35365, 1.11", "-11.2994, -67.4921, -2.17854, 0.96", "-11.8517, -68.5874, -1.88133, 1.25", "-12.1227, -69.2566, -1.6963, 0.81", "-12.5896, -70.7424, -1.45884, 0.74", "-12.79, -71.5754, -1.44225, 0.37", "-12.9892, -72.8863, -1.62214, 1.47", "-13.0278, -73.5166, -1.80716, 2.14", "-13.023, -74.7083, -2.35486, 2.5", "-12.9235, -76.2147, -3.27749, 1.03", "-12.8421, -76.9913, -3.85156, 0.88", "-12.7475, -77.5862, -4.31348, 0.44", "-12.5251, -78.5928, -5.12862, 0.44", "-12.2056, -79.7518, -6.07007, 1.18", "-11.8061, -81.0687, -7.07353, 1.62", "-11.7804, -81.1532, -7.1331, 1.62", "-11.5103, -82.0607, -7.71417, 1.62", "-11.1633, -83.4536, -8.49371, 1.47", "-10.9872, -84.3721, -8.90524, 1.99", "-10.9097, -85.1209, -9.16062, 1.99", "-10.8971, -85.8033, -9.34274, 1.99", "-10.9686, -87.1103, -9.65751, 0.59", "-11.1157, -88.0551, -9.85556, 0.52", "-11.2947, -88.7497, -9.93428, 0.52", "-11.8519, -90.3561, -10.0411, 2.8", "-12.1016, -91.0025, -10.0687, 3.17", "-12.3717, -91.6411, -10.0323, 3.46", "-12.627, -92.246, -9.88901, 3.46", "-13.2275, -93.7166, -9.43556, 1.69", "-13.5643, -94.6051, -9.07499, 1.11", "-13.7496, -95.1494, -8.77126, 1.25", "-14.2137, -96.6095, -7.83669, 1.99", "-14.6173, -98.0643, -6.75743, 1.47" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-1.7051, -33.0496, 0.497179, 0.96", "-0.608443, -33.9692, -0.885246, 0.96", "0.322482, -34.6983, -2.00463, 0.81", "1.75751, -35.6927, -3.53683, 0.59", "2.14526, -35.9247, -3.90581, 0.88", "2.52712, -36.1215, -4.23078, 1.11", "2.59003, -36.1488, -4.27972, 1.11", "3.46497, -36.3581, -4.88317, 1.25", "4.21598, -36.474, -5.47999, 0.88", "5.04386, -36.5715, -6.22208, 0.52", "5.46503, -36.6412, -6.73841, 0.81", "6.03889, -36.7865, -7.623, 0.96", "6.8501, -37.1015, -9.19928, 0.52", "7.56187, -37.6939, -11.5685, 0.52", "7.5692, -37.7158, -11.6362, 0.52", "7.44595, -38.443, -13.3231, 0.96", "7.34505, -38.7209, -13.8291, 1.11", "7.17165, -39.0736, -14.3411, 1.11", "6.5951, -40.2298, -15.625, 0.66", "6.36671, -40.8067, -16.1623, 0.37", "6.19045, -41.6712, -16.9629, 0.37", "6.21013, -42.2818, -17.539, 0.59", "6.22099, -42.3329, -17.5899, 0.59", "6.58548, -43.1483, -18.4519, 1.03", "7.03523, -43.8635, -19.2554, 1.69", "7.56105, -44.6555, -20.1743, 2.21", "8.01304, -45.3627, -20.988, 2.8", "8.18835, -45.6804, -21.3468, 2.8", "8.90046, -47.231, -23.0085, 1.33", "9.29104, -48.3324, -24.0854, 0.52", "9.43487, -48.907, -24.5808, 0.66", "9.51617, -49.3602, -24.9108, 0.66", "9.62818, -50.031, -25.3311, 0.29", "9.72425, -50.6238, -25.6561, 0.37", "9.83834, -51.3018, -25.8748, 0.37", "9.87583, -51.3831, -25.9004, 0.37", "10.3847, -51.9889, -26.2282, 0.66", "10.88, -52.4852, -26.5702, 0.96", "10.922, -52.5238, -26.5988, 0.96", "11.3994, -52.9637, -26.9332, 0.96", "12.352, -53.8722, -27.6841, 0.52", "13.1876, -54.7124, -28.3677, 0.37", "14.177, -55.7431, -29.2211, 1.77", "14.5615, -56.1625, -29.5604, 2.36", "14.9796, -56.6311, -29.9362, 2.58", "16.2474, -58.1176, -31.1092, 0.74", "16.6488, -58.6408, -31.4609, 0.74" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "4.23949, -40.7776, 0.00760949, 0.15", "5.86652, -55.6891, 0.00760949, 0.15", "7.49354, -70.6006, 0.00760949, 0.15" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-10.7887, 60.4264, 9.66032, 0.81", "-11.2103, 60.9959, 9.60155, 0.81", "-11.7451, 61.7612, 9.51387, 0.74", "-12.2017, 62.4434, 9.4391, 0.74", "-12.2352, 62.4946, 9.43126, 0.74", "-12.8492, 63.4499, 9.2713, 0.74", "-13.1441, 63.9049, 9.17942, 1.33", "-13.4339, 64.3638, 9.06076, 1.92", "-13.7456, 64.8612, 8.91031, 1.33", "-14.1963, 65.5424, 8.69712, 1.11", "-14.5384, 66.028, 8.541, 1.47", "-15.0066, 66.6431, 8.34818, 1.18", "-15.0338, 66.6774, 8.33744, 1.18", "-15.4579, 67.2138, 8.17218, 0.66", "-15.8385, 67.7271, 8.01418, 0.66", "-16.3046, 68.4179, 7.82133, 1.47", "-16.5814, 68.8931, 7.71594, 1.99", "-16.9006, 69.5204, 7.61134, 1.99", "-17.4071, 70.6478, 7.46147, 0.66", "-17.662, 71.3189, 7.3941, 0.52", "-17.8136, 71.7986, 7.36411, 0.59", "-18.0914, 72.7585, 7.38151, 0.74", "-18.1092, 72.8204, 7.38573, 0.74", "-18.294, 73.386, 7.45658, 1.33", "-18.4582, 73.8354, 7.53456, 1.62", "-18.7391, 74.4765, 7.65152, 1.18", "-19.1188, 75.2037, 7.74399, 0.66", "-19.4411, 75.7576, 7.78626, 0.66", "-20.0613, 76.7481, 7.84487, 2.28", "-20.4056, 77.2447, 7.86812, 2.73", "-20.7142, 77.6631, 7.88025, 2.95", "-21.5287, 78.7276, 7.88598, 1.03", "-21.5625, 78.7706, 7.88523, 1.03", "-21.8988, 79.1998, 7.88193, 0.81", "-22.2899, 79.6985, 7.88708, 0.44", "-22.688, 80.2232, 7.90363, 0.44", "-23.1462, 80.8448, 7.93819, 0.44", "-23.5903, 81.4404, 7.9903, 1.11", "-23.9206, 81.8805, 8.0286, 1.69", "-24.3609, 82.4745, 8.07869, 2.21", "-24.6252, 82.8305, 8.10822, 2.5", "-25.2925, 83.6876, 8.18287, 1.25", "-25.8945, 84.4415, 8.2491, 0.44", "-26.386, 85.0491, 8.30139, 0.44", "-26.7758, 85.5237, 8.34316, 1.03", "-27.2009, 86.052, 8.38828, 1.33", "-27.3065, 86.1864, 8.39936, 1.33", "-27.5488, 86.5041, 8.42437, 1.47", "-27.9849, 87.0707, 8.46962, 0.88", "-28.3682, 87.5463, 8.51032, 0.59", "-28.7708, 88.0149, 8.55438, 0.44", "-28.819, 88.067, 8.55983, 0.44", "-29.4219, 88.6554, 8.63054, 0.44", "-29.7459, 88.9232, 8.67056, 0.66", "-29.8901, 89.0289, 8.68895, 0.66", "-30.332, 89.3451, 8.7456, 0.66", "-30.7662, 89.6956, 8.81032, 0.66", "-31.1644, 90.0955, 8.87695, 0.37", "-31.4326, 90.4517, 8.91821, 0.37", "-31.8052, 91.072, 8.96334, 0.66", "-32.0196, 91.5471, 8.96866, 0.96", "-32.2433, 92.2451, 8.94301, 0.29", "-32.3762, 92.7906, 8.9097, 0.44", "-32.4901, 93.3697, 8.86455, 0.96", "-32.5077, 93.4638, 8.8563, 0.96", "-32.6854, 94.3258, 8.77263, 1.77", "-32.8991, 95.1531, 8.69402, 2.95", "-33.0241, 95.558, 8.56517, 3.54", "-33.0391, 95.6055, 8.54387, 3.54", "-33.1933, 96.1223, 8.27419, 3.76", "-33.2059, 96.1666, 8.24825, 3.76", "-33.3743, 96.7909, 7.84162, 3.46", "-33.8961, 98.9369, 6.37263, 0.81", "-33.9071, 98.9881, 6.33988, 0.81", "-33.9989, 99.4307, 6.09099, 0.81", "-34.0084, 99.4799, 6.07048, 0.81", "-34.1075, 100.099, 5.92966, 1.11", "-34.1666, 100.565, 5.90546, 1.25", "-34.2607, 101.435, 6.01482, 0.37", "-34.3358, 102.136, 6.111, 0.29", "-34.4645, 103.187, 6.22083, 0.29", "-34.6187, 104.335, 6.30965, 0.29", "-34.628, 104.395, 6.31261, 0.29", "-34.7587, 105.151, 6.3427, 0.29", "-34.774, 105.239, 6.34318, 0.29", "-34.9291, 106.143, 6.26275, 0.44", "-34.9488, 106.219, 6.23621, 0.44", "-35.1175, 106.568, 6.03384, 0.44", "-38.8964, 112.996, 5.71085, 0.44", "-42.8007, 119.363, 5.57304, 0.44", "-46.5495, 125.771, 4.80294, 0.44", "-49.2488, 132.38, 2.68821, 0.44", "-52.2777, 138.415, -0.560654, 0.44", "-54.2783, 144.003, -5.19896, 0.44", "-56.6089, 148.556, -10.8308, 0.44", "-57.36, 154.371, -15.5361, 0.44", "-57.9034, 160.442, -19.9029, 0.44", "-58.1347, 165.881, -25.1332, 0.44", "-57.0972, 172.005, -29.3371, 0.44" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-10.7887, 60.4264, 9.66032, 0.29", "-10.2663, 62.5701, 9.31316, 0.29", "-10.1023, 63.4402, 9.21992, 0.44", "-10.0065, 64.2869, 9.16606, 0.44", "-9.94855, 65.5313, 9.12894, 0.29", "-9.94904, 65.603, 9.12825, 0.29", "-9.99683, 66.6806, 9.13041, 0.29", "-10.0215, 66.8542, 9.14894, 0.29", "-10.1772, 67.7465, 9.18049, 0.29", "-10.3135, 68.4885, 9.15605, 0.96", "-10.4222, 69.1436, 9.07222, 1.33", "-10.4742, 69.5369, 9.00393, 1.33", "-10.6026, 71.2319, 8.63634, 0.52", "-10.6272, 72.5589, 8.30908, 0.29", "-10.6192, 72.7014, 8.27007, 0.29", "-10.5094, 73.7746, 7.96583, 0.81", "-10.4997, 73.8509, 7.94479, 0.81", "-10.4078, 74.5955, 7.75923, 1.03", "-10.3535, 75.2366, 7.63184, 0.74", "-10.2781, 76.2549, 7.49539, 0.29", "-10.2475, 76.9093, 7.4338, 0.44", "-10.2532, 77.4154, 7.41592, 0.44", "-10.288, 78.0863, 7.39921, 0.29", "-10.3869, 78.7095, 7.38852, 0.74", "-11.184, 90.0203, 7.81869, 0.74" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "11.2388, 71.3449, 3.40039, 0.37", "11.4517, 72.4281, 2.94317, 0.37", "11.5509, 72.7941, 2.73585, 0.37", "11.6357, 73.0846, 2.56178, 0.96", "11.6479, 73.1195, 2.54208, 0.96", "11.8424, 73.6497, 2.25259, 0.96", "12.188, 74.6356, 1.73994, 0.37", "12.3735, 75.2594, 1.41407, 0.59", "12.5176, 75.7781, 1.11836, 0.37", "12.6894, 76.4816, 0.706844, 0.37", "12.7007, 76.5399, 0.673361, 0.37", "12.7484, 76.9485, 0.418331, 0.29", "12.7827, 77.7381, -0.0800028, 1.47", "12.7795, 78.3828, -0.491374, 1.92", "12.7725, 78.6226, -0.650462, 2.21", "12.7658, 78.8648, -0.821289, 2.21", "12.7757, 80.1704, -1.74614, 0.37", "12.8042, 80.8605, -2.23035, 0.96", "12.8258, 81.2137, -2.4679, 1.62", "12.8538, 81.595, -2.72089, 1.84", "12.9413, 82.6158, -3.4068, 0.29", "12.9995, 83.2278, -3.81114, 1.03", "13.0204, 83.458, -3.94397, 1.4", "13.0299, 83.595, -4.02604, 1.4" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "11.2388, 71.3449, 3.40039, 0.37", "12.6994, 73.8694, 4.33834, 0.37", "13.5054, 75.1954, 4.65877, 0.37", "14.293, 76.4847, 4.78991, 0.81", "14.3401, 76.5564, 4.79211, 0.81", "14.7994, 77.2331, 4.79167, 0.81", "15.5865, 78.3691, 4.69988, 0.37", "16.416, 79.4107, 4.36898, 0.29", "17.1419, 80.2879, 4.02347, 0.59", "17.8483, 81.1264, 3.64823, 0.22", "17.8892, 81.1795, 3.62417, 0.22", "18.624, 82.3036, 3.11552, 1.18", "18.8396, 82.7391, 2.95915, 1.69", "19.1, 83.5611, 2.76246, 1.99", "19.1717, 84.0617, 2.71654, 1.99", "19.0834, 85.2034, 2.73619, 0.44", "18.9133, 85.9537, 2.86165, 0.29", "17.9845, 87.8648, 3.68388, 0.29", "17.9398, 87.9265, 3.7174, 0.29", "23.6511, 98.0525, 5.51339, 0.29", "28.1557, 108.455, 8.57225, 0.29", "32.7758, 118.631, 12.2449, 0.29", "36.3615, 128.725, 17.1328, 0.29", "41.2689, 137.74, 23.0944, 0.29", "45.1018, 145.924, 30.8923, 0.29", "49.5599, 153.983, 38.5004, 0.29" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-14.6173, -98.0643, -6.75743, 0.52", "-14.7791, -99.7054, -6.11403, 0.52", "-14.7782, -100.349, -5.93009, 0.81", "-14.7356, -100.917, -5.84836, 1.03", "-14.7289, -100.988, -5.84689, 1.03", "-14.689, -101.618, -5.87838, 1.03", "-14.6785, -102.317, -5.94068, 0.52", "-14.6972, -102.934, -6.07101, 0.52", "-14.806, -103.672, -6.21549, 0.52", "-14.9676, -104.279, -6.32307, 0.66", "-15.207, -104.906, -6.37542, 0.66", "-15.4431, -105.369, -6.37708, 0.88", "-16.0873, -106.413, -6.2229, 1.03", "-16.5529, -107.073, -6.02511, 1.55", "-16.7617, -107.363, -5.90641, 1.92", "-17.4916, -108.375, -5.4194, 1.92", "-17.9742, -109.076, -5.05857, 1.33", "-18.763, -110.272, -4.43745, 0.59", "-19.3163, -111.145, -3.99713, 0.59", "-19.8425, -112.023, -3.62645, 0.59", "-19.8676, -112.067, -3.61194, 0.59", "-20.2097, -112.712, -3.49268, 1.33", "-20.5667, -113.496, -3.47757, 0.74", "-20.8072, -114.171, -3.57502, 0.74", "-21.1355, -115.3, -3.79405, 0.74", "-21.1582, -115.383, -3.81139, 0.74", "-21.3782, -116.195, -3.95938, 1.18", "-21.7345, -117.442, -4.15608, 0.81", "-22.1279, -118.765, -4.28102, 0.74", "-22.5999, -120.25, -4.32603, 0.59", "-22.62, -120.31, -4.32195, 0.59", "-22.9704, -121.291, -4.20447, 1.92", "-23.2922, -122.187, -4.02271, 2.21", "-23.66, -123.252, -3.73899, 2.21", "-24.0164, -124.358, -3.40801, 0.74", "-24.3497, -125.657, -2.99191, 0.74", "-24.5074, -126.643, -2.67527, 0.66", "-24.5144, -127.808, -2.31696, 0.44", "-24.3755, -128.576, -2.09601, 1.03", "-24.3372, -128.668, -2.07617, 1.03", "-24.0462, -129.125, -2.02685, 1.03", "-23.5779, -129.76, -2.03206, 1.03", "-23.1424, -130.381, -2.06735, 1.4", "-22.9351, -130.773, -2.10842, 1.4", "-22.6207, -131.744, -2.18415, 0.81", "-22.4561, -132.778, -2.18785, 0.81", "-22.4576, -133.516, -2.14742, 1.03", "-22.5489, -134.183, -2.08063, 1.11", "-22.7345, -134.973, -1.96722, 1.18", "-23.0302, -135.943, -1.8016, 0.37", "-23.4559, -137.122, -1.63612, 0.37", "-23.7063, -137.869, -1.60546, 1.55", "-23.855, -138.481, -1.65615, 1.84", "-23.9317, -139.027, -1.76069, 2.14", "-23.943, -139.443, -1.89009, 2.14", "-23.7708, -140.585, -2.4319, 1.69", "-23.2807, -141.864, -3.21826, 0.52", "-23.0078, -142.323, -3.53414, 0.88", "-22.9724, -142.366, -3.56739, 0.88", "-22.8244, -142.51, -3.69292, 0.88", "-21.9924, -143.194, -4.31502, 0.52", "-21.22, -143.792, -4.86866, 1.03", "-21.1764, -143.828, -4.90134, 1.03", "-20.4997, -144.49, -5.45081, 1.33", "-19.8201, -145.257, -6.0279, 1.25", "-19.5784, -145.589, -6.2491, 1.03", "-18.9341, -146.835, -6.89598, 0.59", "-18.6215, -147.68, -7.24036, 0.59", "-18.4587, -148.289, -7.4293, 1.18", "-18.4161, -148.542, -7.48144, 1.84", "-18.3664, -149.096, -7.55228, 1.84", "-18.3337, -150.325, -7.66225, 0.74", "-18.2943, -151.201, -7.84133, 1.03", "-18.2188, -151.869, -8.08257, 1.11", "-18.1565, -152.214, -8.25031, 1.33", "-17.985, -152.883, -8.69761, 0.81", "-17.8333, -153.316, -9.07208, 0.44", "-16.9995, -155.353, -11.2972, 0.44", "-16.8462, -155.719, -11.7636, 0.44", "-16.8228, -155.795, -11.8869, 0.44", "-16.7573, -156.409, -13.0032, 0.44", "-16.7622, -156.434, -13.0509, 0.44", "-16.9089, -156.769, -13.6166, 0.74", "-17.1549, -157.116, -14.1174, 1.11", "-17.7288, -158.19, -15.7294, 0.44", "-17.8663, -158.588, -16.3332, 0.44", "-18.0193, -159.437, -17.5513, 1.84", "-18.0329, -159.798, -18.0589, 2.5", "-18.0271, -159.899, -18.1965, 2.5", "-17.8865, -161.374, -20.0364, 0.59", "-17.8469, -161.892, -20.6396, 0.59", "-17.8219, -162.343, -21.2393, 0.59", "-17.8211, -162.382, -21.2924, 0.59", "-17.848, -163.186, -22.3676, 1.77", "-17.9069, -163.692, -22.9935, 2.06", "-18.1523, -164.709, -24.1283, 1.99", "-18.5284, -166.062, -25.607, 0.81", "-18.5396, -166.104, -25.6552, 0.81", "-18.6474, -166.591, -26.1832, 0.66", "-18.7379, -167.263, -26.8749, 0.52", "-18.7934, -167.759, -27.366, 1.84", "-18.8613, -168.411, -27.9237, 2.28", "-18.9779, -170.014, -29.233, 0.66", "-18.9589, -170.57, -29.6914, 0.66", "-18.8287, -171.519, -30.4633, 1.77", "-18.8148, -171.576, -30.5063, 1.77", "-18.6324, -172.155, -30.9012, 2.21", "-18.3398, -172.974, -31.3609, 2.21", "-17.9453, -174.074, -31.8624, 0.74", "-17.7786, -174.601, -32.0877, 0.37", "-17.6574, -175.019, -32.2512, 0.29", "-17.4502, -175.733, -32.5201, 1.11", "-17.2999, -176.261, -32.722, 1.4", "-17.0676, -177.143, -33.0275, 0.59", "-16.9034, -177.777, -33.2431, 0.29", "-16.73, -178.465, -33.4806, 0.66", "-16.6278, -178.889, -33.6429, 0.88", "-16.4364, -179.81, -34.0033, 0.29", "-16.3327, -180.389, -34.2272, 0.29", "-16.2666, -180.842, -34.3914, 0.96", "-16.2104, -181.323, -34.5601, 0.96", "-16.0614, -182.373, -34.9338, 0.29", "-15.9444, -182.892, -35.1435, 0.29", "-15.7337, -183.423, -35.4363, 0.66", "-15.7109, -183.469, -35.4902, 0.66", "-15.5708, -183.741, -35.8859, 0.66", "-15.2814, -184.359, -36.9593, 0.44", "-15.0855, -184.854, -37.8763, 1.77", "-14.8348, -185.578, -39.2873, 2.58", "-14.1977, -187.754, -43.6157, 0.44", "-14.1427, -187.989, -44.0742, 0.44", "-13.961, -189.024, -46.1743, 0.88", "-13.9199, -189.518, -47.2037, 1.77", "-13.9204, -189.547, -47.2632, 1.77", "-13.9463, -189.73, -47.6119, 2.14", "-14.0254, -190.098, -48.0799, 2.43" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-14.6173, -98.0643, -6.75743, 0.59", "-13.2738, -98.8937, -5.88837, 0.59", "-11.5765, -99.7179, -4.98003, 0.52", "-10.5125, -100.126, -4.55553, 0.52", "-8.97289, -100.477, -4.17071, 0.37", "-8.68465, -100.519, -4.12351, 0.37", "-7.4367, -100.631, -3.97089, 0.37", "-6.38043, -100.619, -3.94254, 0.37", "-5.02955, -100.465, -4.01259, 0.37", "-2.94265, -100.112, -4.21757, 0.22", "-2.3422, -100.005, -4.32336, 0.29", "-1.20194, -99.7964, -4.54879, 0.37" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "16.6488, -58.6408, -31.4609, 0.37", "16.9913, -59.3382, -31.673, 0.37", "17.4299, -60.2894, -31.8792, 0.29", "17.8545, -61.2799, -32.0527, 1.25", "18.046, -61.7423, -32.1217, 1.69", "18.0723, -61.8074, -32.1303, 1.69", "18.5653, -63.0844, -32.2706, 0.29", "18.9054, -64.0154, -32.3219, 0.29", "19.2668, -65.0292, -32.3621, 1.77", "19.4504, -65.5767, -32.3686, 2.43", "19.5818, -65.9761, -32.3746, 2.43", "20.104, -67.6013, -32.4039, 0.22", "20.3487, -68.416, -32.4246, 0.22" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "16.6488, -58.6408, -31.4609, 1.77", "16.564, -59.7218, -34.297, 1.77", "16.5268, -60.9317, -37.242, 1.03", "16.5167, -63.0421, -41.9335, 2.14", "16.5026, -63.9389, -43.8211, 0.52", "16.4948, -64.3084, -44.5753, 1.92", "16.4887, -64.5364, -45.0267, 2.36", "16.4853, -66.5802, -48.6135, 0.29", "16.4649, -67.1032, -49.4545, 0.29", "16.3485, -68.2984, -51.1195, 0.29", "16.3433, -68.328, -51.162, 0.29", "16.2961, -68.5351, -51.466, 1.69", "16.2347, -68.8098, -51.8643, 1.69", "15.9237, -70.7066, -54.6633, 0.22", "15.8987, -70.9786, -55.0863, 0.22", "15.9, -71.0062, -55.1304, 0.22", "15.9407, -71.3365, -55.6656, 1.03", "16.2033, -72.589, -57.6786, 0.29", "16.5928, -73.86, -59.6295, 1.99", "16.6806, -74.073, -59.9364, 2.14", "17.3485, -75.554, -62.1047, 0.37", "17.4693, -75.8, -62.468, 0.37", "17.6519, -76.1301, -62.942, 0.88", "17.8954, -76.5079, -63.4256, 1.03", "18.5398, -77.484, -64.5048, 0.29", "18.5682, -77.5294, -64.5514, 0.29", "19.2271, -78.6964, -65.6781, 0.29", "19.5093, -79.2597, -66.2553, 1.99", "19.596, -79.4444, -66.4473, 1.99", "20.2088, -80.833, -67.8527, 0.29", "20.3408, -81.1822, -68.1815, 0.59", "20.8189, -82.5451, -69.4152, 0.44", "21.0806, -83.3526, -70.1247, 0.29", "21.1833, -83.6881, -70.4207, 1.11", "21.2745, -83.9667, -70.6626, 1.33", "21.9685, -85.8917, -72.4533, 0.22", "22.1094, -86.2363, -72.8112, 0.52", "22.5679, -87.214, -73.9416, 0.29", "22.707, -87.48, -74.2761, 0.88", "22.8741, -87.8062, -74.7725, 0.88", "23.5149, -89.0575, -76.8792, 0.29", "24.0223, -90.0133, -78.6157, 0.29", "24.4212, -90.8053, -80.096, 1.77", "24.5211, -91.0107, -80.4914, 1.77", "25.269, -92.6518, -83.6655, 0.52", "25.3899, -92.955, -84.2323, 0.44", "25.4991, -93.2394, -84.7305, 0.74", "25.5097, -93.266, -84.7741, 0.74", "25.918, -94.199, -86.1876, 0.29", "25.9368, -94.2339, -86.2366, 0.29", "26.3688, -94.8045, -86.8475, 1.18", "26.5434, -95.0124, -87.0603, 1.18", "27.326, -95.8984, -87.902, 0.22", "27.3561, -95.9308, -87.9287, 0.22", "28.0598, -96.6192, -88.4449, 0.81", "28.905, -97.3667, -89.0288, 0.22", "29.2672, -97.6502, -89.2563, 0.81", "29.3128, -97.6805, -89.2879, 0.81", "29.5428, -97.7982, -89.4726, 0.81", "30.4944, -98.1693, -90.5641, 0.22", "30.7379, -98.2444, -90.8899, 0.44", "30.774, -98.2538, -90.9419, 0.44", "31.8513, -98.5403, -92.4998, 1.33", "32.8184, -98.8103, -93.8895, 1.33", "34.7143, -99.3461, -96.6245, 0.29", "34.7606, -99.3603, -96.6918, 0.29", "35.0703, -99.4654, -97.148, 0.29", "35.4884, -99.62, -97.7146, 1.03", "35.6154, -99.6698, -97.867, 1.03", "35.6589, -99.6869, -97.9104, 1.03", "37.2129, -100.272, -99.1943, 0.22", "37.2604, -100.289, -99.2337, 0.22", "38.4092, -100.606, -100.228, 0.29", "39.745, -100.791, -101.487, 0.22", "40.0247, -100.806, -101.768, 0.66", "40.0692, -100.804, -101.814, 0.66", "40.3398, -100.768, -102.104, 0.66", "41.1406, -100.624, -103.011, 0.15", "42.6725, -100.205, -104.923, 0.96", "43.5214, -99.9254, -106.021, 1.4", "43.844, -99.8164, -106.458, 1.4", "43.9996, -99.7624, -106.675, 1.4" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-57.0972, 172.005, -29.3371, 0.44", "-60.3626, 179.891, -32.1114, 0.44" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-57.0972, 172.005, -29.3371, 0.44", "-60.7023, 181.987, -32.992, 0.44" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "13.0299, 83.595, -4.02604, 0.29", "13.9331, 85.8453, -4.11984, 0.29", "14.3389, 86.8564, -4.162, 0.29", "14.6788, 87.7032, -4.1973, 1.03", "14.7056, 87.7701, -4.20009, 1.03", "14.9015, 88.2582, -4.22043, 1.4" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "13.0299, 83.595, -4.02604, 0.88", "13.1013, 84.4009, -4.21748, 0.88", "13.2316, 85.0129, -4.36923, 0.29", "13.4937, 85.7091, -4.60283, 0.29", "13.69, 86.134, -4.75004, 0.44", "14.2371, 87.2268, -5.12345, 1.25", "14.4668, 87.6654, -5.26839, 1.99", "14.8533, 88.285, -5.47039, 2.21", "15.784, 89.6275, -5.90471, 0.22", "16.1797, 90.1865, -6.11018, 0.22", "16.3794, 90.4635, -6.21127, 0.96", "16.5919, 90.7748, -6.32399, 1.77", "16.8234, 91.164, -6.46976, 2.21", "17.0221, 91.5613, -6.64032, 2.21", "17.6656, 93.0761, -7.32988, 0.22", "17.919, 93.715, -7.64363, 0.22", "18.2072, 94.4631, -8.00574, 1.18", "18.3118, 94.7486, -8.14191, 1.33", "18.5906, 95.6023, -8.51706, 0.81", "18.7971, 96.2685, -8.77667, 0.22", "18.9278, 96.6995, -8.90188, 0.29", "19.1578, 97.4572, -9.09933, 0.22", "19.1955, 97.5543, -9.12505, 0.22", "19.5546, 98.2884, -9.35873, 0.22", "19.9771, 99.0487, -9.61793, 1.33", "20.1812, 99.3823, -9.77931, 1.69", "20.2882, 99.5674, -9.88151, 1.69", "20.8952, 100.613, -10.4938, 0.29", "21.2576, 101.205, -10.8284, 1.47", "21.3983, 101.419, -10.9449, 1.47", "21.836, 102.055, -11.2822, 0.66", "22.4071, 102.876, -11.6845, 0.29", "22.6793, 103.287, -11.8666, 0.29", "23.006, 103.812, -12.0499, 0.88", "23.2006, 104.113, -12.1592, 1.25", "23.7114, 104.889, -12.4688, 0.29", "24.0107, 105.356, -12.6634, 0.22", "24.2483, 105.775, -12.8844, 0.66", "24.3984, 106.129, -13.0868, 0.81", "24.5815, 106.789, -13.4521, 0.22", "24.6641, 107.201, -13.6608, 0.22", "24.7176, 107.588, -13.8683, 0.74", "24.7847, 108.183, -14.2761, 1.4", "24.8666, 109.02, -14.9115, 0.29", "24.9199, 109.595, -15.4261, 0.81", "24.9409, 109.775, -15.6239, 0.96", "25.0697, 110.57, -16.7863, 0.29", "25.1636, 111.172, -17.8095, 0.29", "25.1895, 111.391, -18.2065, 1.33", "25.2219, 111.882, -19.1822, 2.28", "25.2401, 112.458, -20.4045, 2.28", "25.2181, 113.471, -22.8034, 0.81", "25.2044, 113.592, -23.1096, 0.88", "25.1516, 113.829, -23.746, 0.29", "25.0419, 114.137, -24.6269, 0.37", "24.9838, 114.259, -24.9603, 0.37", "24.7161, 114.795, -26.2304, 0.37", "24.6135, 115.044, -26.7226, 0.37", "24.4312, 115.727, -27.8918, 1.55", "24.3802, 116.066, -28.3799, 1.92", "24.3469, 117.18, -29.564, 0.44", "24.3804, 117.716, -29.9844, 0.29", "24.4582, 118.33, -30.3238, 0.88", "24.5275, 118.661, -30.4709, 0.96", "24.6261, 119.019, -30.5859, 0.96", "25.013, 120.195, -30.8784, 0.37", "25.3728, 121.176, -31.0561, 0.29", "25.6282, 121.748, -31.2583, 0.29", "26.0397, 122.593, -31.6633, 1.33", "26.2351, 122.963, -31.8958, 2.14", "26.386, 123.238, -32.104, 2.36", "26.5027, 123.44, -32.3035, 2.36", "27.5569, 125.175, -34.3585, 0.29", "27.7904, 125.559, -34.8703, 0.88", "28.0249, 126.0, -35.479, 1.4", "28.1383, 126.252, -35.8277, 1.55", "28.4674, 127.127, -36.9919, 0.37", "28.5636, 127.447, -37.3786, 0.37", "28.702, 128.16, -38.1144, 1.18", "28.8023, 128.652, -38.6285, 1.47", "28.9871, 129.722, -39.6598, 0.29", "29.0212, 130.017, -39.9151, 0.44", "29.0446, 130.471, -40.2445, 0.29", "29.0569, 131.493, -40.9265, 1.77", "29.052, 132.059, -41.2524, 2.06", "29.0437, 132.599, -41.5078, 1.92", "28.9733, 133.797, -41.8989, 0.22", "28.9344, 134.364, -42.0381, 0.22", "28.929, 134.425, -42.0456, 0.22", "28.8912, 134.907, -42.0033, 0.22", "28.8474, 135.675, -41.8565, 0.96", "28.8496, 135.912, -41.7966, 1.33", "28.8628, 136.154, -41.7268, 1.33", "28.9112, 136.858, -41.5326, 0.44", "29.0367, 138.162, -41.2074, 0.22", "29.044, 138.222, -41.1936, 0.22", "29.1844, 139.188, -40.919, 0.22", "29.2613, 139.708, -40.7424, 1.03", "29.3124, 140.021, -40.6237, 1.62", "29.4063, 140.515, -40.4134, 1.62", "29.4294, 140.638, -40.3612, 1.62", "29.7484, 142.276, -39.6471, 0.22", "29.8169, 142.652, -39.4777, 0.66", "29.8845, 143.08, -39.293, 0.66", "29.9197, 143.432, -39.1677, 0.59", "29.9445, 144.078, -39.0049, 0.22", "29.9439, 144.368, -38.966, 0.66", "29.9181, 144.688, -38.9697, 0.88", "29.8545, 145.225, -38.9841, 0.44", "29.7162, 146.092, -39.0229, 0.22", "29.6071, 146.718, -39.0572, 0.81", "29.5337, 147.131, -39.0798, 1.18", "29.3267, 148.304, -39.1435, 0.22", "29.3197, 148.357, -39.1519, 0.22", "29.223, 149.252, -39.3669, 0.22", "29.1903, 149.81, -39.5319, 1.03", "29.1878, 150.17, -39.6495, 1.33", "29.2041, 150.531, -39.7768, 1.33", "29.4589, 152.528, -40.5007, 0.22", "29.4668, 152.579, -40.5199, 0.22", "29.7034, 153.697, -40.9795, 0.22", "29.7988, 154.081, -41.1441, 0.59", "29.8128, 154.13, -41.1643, 0.59", "30.0388, 154.803, -41.3971, 0.74" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-14.0254, -190.098, -48.0799, 0.37", "-12.4789, -191.575, -47.7804, 0.37", "-11.5047, -192.538, -47.5943, 0.29", "-10.3227, -193.769, -47.3626, 0.29", "-9.49645, -194.691, -47.195, 0.88", "-9.22616, -195.014, -47.1528, 1.11", "-9.16817, -195.088, -47.1456, 1.11", "-8.89518, -195.532, -47.1358, 1.11", "-8.39071, -196.556, -47.2371, 0.29", "-8.08647, -197.31, -47.3837, 0.29", "-7.76806, -198.204, -47.5858, 0.74", "-7.63403, -198.576, -47.6922, 0.88", "-7.41802, -199.175, -47.8819, 0.59", "-6.95406, -200.458, -48.318, 0.29", "-6.89534, -200.602, -48.3705, 0.29", "-6.5423, -201.379, -48.6188, 0.29", "-6.12259, -202.238, -48.8323, 1.11", "-5.84291, -202.731, -48.9939, 1.4", "-5.54501, -203.229, -49.154, 1.4", "-4.56396, -204.783, -49.6058, 0.22", "-3.99385, -205.674, -49.8823, 0.22", "-3.5922, -206.294, -50.094, 0.81", "-2.40837, -208.068, -50.6964, 0.81" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-14.0254, -190.098, -48.0799, 0.96", "-12.4925, -191.215, -51.4856, 0.96", "-10.2604, -192.942, -56.1595, 0.96", "-9.15034, -193.83, -58.4084, 0.66", "-8.42303, -194.449, -59.8313, 1.4", "-8.22757, -194.622, -60.1983, 1.4", "-6.57625, -196.123, -63.196, 0.44", "-6.01511, -196.625, -64.0113, 0.37", "-5.97028, -196.672, -64.0654, 0.37", "-4.71946, -198.014, -65.4669, 0.29", "-4.10078, -198.638, -66.0709, 1.47", "-3.96472, -198.77, -66.1983, 1.77", "-3.50174, -199.177, -66.6023, 1.99", "-2.60371, -199.895, -67.4095, 1.99", "-0.976328, -201.14, -68.842, 0.44", "-0.0690512, -201.769, -69.6577, 0.81", "1.14805, -202.503, -70.8449, 0.52", "2.92823, -203.553, -72.6207, 0.44", "3.8624, -204.083, -73.5772, 1.11", "4.29682, -204.321, -74.03, 1.11", "6.68767, -205.523, -76.55, 1.4", "9.39483, -206.757, -79.5152, 1.55" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_9", "dend_0", "dend_15", "dend_10", "dend_4", "dend_1", "dend_17", "dend_16", "dend_12", "dend_11", "dend_6", "dend_5", "dend_3", "dend_2", "dend_19", "dend_18", "dend_14", "dend_13", "dend_8", "dend_7" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_9", "dend_0", "dend_15", "dend_10", "dend_4", "dend_1", "dend_17", "dend_16", "dend_12", "dend_11", "dend_6", "dend_5", "dend_3", "dend_2", "dend_19", "dend_18", "dend_14", "dend_13", "dend_8", "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_19", "dend_18", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.418459",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.026008999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.025854",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.19695699",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "2.0E-6",
    "erev" : "-60.2509"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.9899996E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.008343",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.026899999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.502333",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.653374",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "5.6999997E-5",
    "erev" : "-76.49812"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "7.84E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.30005398",
    "erev" : "50.0"
  }, {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.002256",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.38E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.005574",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "7.92E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bAC217_L4_BTC_9f1127ad33_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_9, id: dend_9, parent: soma_0
create dend_9
public dend_9
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_15, id: dend_15, parent: dend_9
create dend_15
public dend_15
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10
// Section: dend_4, id: dend_4, parent: dend_0
create dend_4
public dend_4
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_17, id: dend_17, parent: dend_15
create dend_17
public dend_17
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_12, id: dend_12, parent: dend_10
create dend_12
public dend_12
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_6, id: dend_6, parent: dend_4
create dend_6
public dend_6
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5
// Section: dend_3, id: dend_3, parent: dend_1
create dend_3
public dend_3
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_14, id: dend_14, parent: dend_12
create dend_14
public dend_14
// Section: dend_13, id: dend_13, parent: dend_12
create dend_13
public dend_13
// Section: dend_8, id: dend_8, parent: dend_6
create dend_8
public dend_8
// Section: dend_7, id: dend_7, parent: dend_6
create dend_7
public dend_7

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_22
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_19, dend_18, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_9(0), soma_0(0.49999821452163534)
    connect dend_0(0), soma_0(0.49999821452163534)
    connect axon_0(0), soma_0(1.0)
    connect dend_15(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)
    connect dend_4(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_17(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_12(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_6(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)
    connect dend_3(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_14(0), dend_12(1.0)
    connect dend_13(0), dend_12(1.0)
    connect dend_8(0), dend_6(1.0)
    connect dend_7(0), dend_6(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -1.49721, 11.7986, 0.0301706, 2.4623 ) }
    soma_0 { pt3dadd( -1.37308, 10.661, 0.0290426, 4.20373 ) }
    soma_0 { pt3dadd( -1.24895, 9.52332, 0.0279145, 5.59272 ) }
    soma_0 { pt3dadd( -1.12482, 8.38566, 0.0267864, 6.71614 ) }
    soma_0 { pt3dadd( -1.00068, 7.248, 0.0256584, 7.74544 ) }
    soma_0 { pt3dadd( -0.87655, 6.11034, 0.0245303, 8.57739 ) }
    soma_0 { pt3dadd( -0.752417, 4.97268, 0.0234023, 9.13171 ) }
    soma_0 { pt3dadd( -0.628284, 3.83502, 0.0222742, 9.51195 ) }
    soma_0 { pt3dadd( -0.504152, 2.69736, 0.0211462, 9.92921 ) }
    soma_0 { pt3dadd( -0.380019, 1.5597, 0.0200181, 10.275 ) }
    soma_0 { pt3dadd( -0.255886, 0.422041, 0.01889, 10.4231 ) }
    soma_0 { pt3dadd( -0.131754, -0.715618, 0.017762, 10.4046 ) }
    soma_0 { pt3dadd( -0.00762106, -1.85328, 0.0166339, 10.4069 ) }
    soma_0 { pt3dadd( 0.116512, -2.99094, 0.0155059, 10.1383 ) }
    soma_0 { pt3dadd( 0.240644, -4.1286, 0.0143778, 9.53645 ) }
    soma_0 { pt3dadd( 0.364777, -5.26626, 0.0132498, 8.49552 ) }
    soma_0 { pt3dadd( 0.48891, -6.40392, 0.0121217, 7.50349 ) }
    soma_0 { pt3dadd( 0.613042, -7.54158, 0.0109937, 6.64245 ) }
    soma_0 { pt3dadd( 0.737175, -8.67924, 0.0098656, 6.01482 ) }
    soma_0 { pt3dadd( 0.861308, -9.8169, 0.00873754, 4.86867 ) }
    soma_0 { pt3dadd( 0.98544, -10.9546, 0.00760949, 2.96361 ) }
    // Section: dend_9, id: dend_9, parent: soma_0 (entry count 21/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -1.78536, 10.9696, 1.5043, 2.36 ) }
    dend_9 { pt3dadd( -1.78536, 10.9696, 1.5043, 2.36 ) }
    dend_9 { pt3dadd( -1.94605, 11.8717, 1.74777, 2.06 ) }
    dend_9 { pt3dadd( -2.13449, 12.8169, 2.03441, 2.06 ) }
    dend_9 { pt3dadd( -2.15588, 12.9059, 2.06254, 2.06 ) }
    dend_9 { pt3dadd( -2.42822, 13.9413, 2.39126, 2.21 ) }
    dend_9 { pt3dadd( -2.84977, 15.3855, 2.92632, 2.21 ) }
    dend_9 { pt3dadd( -3.17885, 16.336, 3.31919, 2.21 ) }
    dend_9 { pt3dadd( -3.19826, 16.3851, 3.34302, 2.21 ) }
    dend_9 { pt3dadd( -3.5929, 17.3118, 3.82963, 2.21 ) }
    dend_9 { pt3dadd( -3.77555, 17.723, 4.05415, 2.36 ) }
    dend_9 { pt3dadd( -4.33882, 18.912, 4.75368, 2.43 ) }
    dend_9 { pt3dadd( -4.69943, 19.6277, 5.16306, 2.65 ) }
    dend_9 { pt3dadd( -5.25326, 20.7461, 5.82991, 2.65 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 35/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 0.094648, -9.74991, 0.0043065, 4.86 ) }
    dend_0 { pt3dadd( 0.094648, -9.74991, 0.0043065, 4.86 ) }
    dend_0 { pt3dadd( -0.224377, -10.7247, -0.0276088, 4.57 ) }
    dend_0 { pt3dadd( -0.578047, -11.7868, -0.0697762, 4.2 ) }
    dend_0 { pt3dadd( -1.20951, -13.6928, -0.151119, 2.87 ) }
    dend_0 { pt3dadd( -1.7173, -15.312, -0.238751, 2.58 ) }
    dend_0 { pt3dadd( -2.27123, -17.153, -0.348391, 2.5 ) }
    dend_0 { pt3dadd( -2.65786, -18.5321, -0.417514, 2.58 ) }
    dend_0 { pt3dadd( -2.67031, -18.5818, -0.419586, 2.58 ) }
    dend_0 { pt3dadd( -2.79908, -19.2489, -0.43946, 2.73 ) }
    dend_0 { pt3dadd( -2.99007, -20.8314, -0.462012, 2.73 ) }
    dend_0 { pt3dadd( -3.03076, -21.8822, -0.432308, 2.36 ) }
    dend_0 { pt3dadd( -3.00486, -23.1844, -0.34358, 2.65 ) }
    dend_0 { pt3dadd( -2.93948, -24.3301, -0.240718, 2.87 ) }
    dend_0 { pt3dadd( -2.85533, -25.4417, -0.135495, 3.09 ) }
    dend_0 { pt3dadd( -2.74555, -26.4724, -0.0341633, 3.09 ) }
    dend_0 { pt3dadd( -2.55696, -27.8285, 0.10511, 3.32 ) }
    dend_0 { pt3dadd( -2.45198, -28.4958, 0.169261, 3.02 ) }
    dend_0 { pt3dadd( -2.22695, -29.8688, 0.276937, 2.43 ) }
    dend_0 { pt3dadd( -1.96113, -31.4739, 0.401676, 2.36 ) }
    dend_0 { pt3dadd( -1.79727, -32.5235, 0.473056, 2.36 ) }
    dend_0 { pt3dadd( -1.7051, -33.0496, 0.497179, 2.36 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 57/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 0.98544, -10.9546, 0.00760949, 0.674348 ) }
    axon_0 { pt3dadd( 2.61247, -25.8661, 0.00760949, 0.674348 ) }
    axon_0 { pt3dadd( 4.23949, -40.7776, 0.00760949, 0.674348 ) }
    // Section: dend_15, id: dend_15, parent: dend_9 (entry count 60/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -5.25326, 20.7461, 5.82991, 1.4 ) }
    dend_15 { pt3dadd( -5.9315, 22.1078, 6.05942, 1.4 ) }
    dend_15 { pt3dadd( -6.49013, 23.292, 6.23969, 1.18 ) }
    dend_15 { pt3dadd( -6.86233, 24.1386, 6.35071, 1.18 ) }
    dend_15 { pt3dadd( -7.23996, 25.0346, 6.45714, 1.18 ) }
    dend_15 { pt3dadd( -7.58594, 25.8952, 6.5458, 1.62 ) }
    dend_15 { pt3dadd( -7.79496, 26.4469, 6.61263, 1.99 ) }
    dend_15 { pt3dadd( -7.81601, 26.5174, 6.62066, 1.99 ) }
    dend_15 { pt3dadd( -8.03286, 27.4016, 6.70235, 2.06 ) }
    dend_15 { pt3dadd( -8.05827, 27.5378, 6.71375, 2.06 ) }
    dend_15 { pt3dadd( -8.1922, 28.5728, 6.78474, 1.62 ) }
    dend_15 { pt3dadd( -8.30911, 29.9417, 6.89935, 1.4 ) }
    dend_15 { pt3dadd( -8.31512, 30.0411, 6.90833, 1.4 ) }
    dend_15 { pt3dadd( -8.3572, 31.1503, 7.00803, 1.47 ) }
    dend_15 { pt3dadd( -8.37095, 32.1285, 7.09445, 1.77 ) }
    dend_15 { pt3dadd( -8.37233, 32.9826, 7.15863, 1.92 ) }
    dend_15 { pt3dadd( -8.35558, 34.1805, 7.22364, 1.11 ) }
    dend_15 { pt3dadd( -8.35581, 34.4576, 7.23064, 1.11 ) }
    dend_15 { pt3dadd( -8.38009, 34.9933, 7.24771, 1.11 ) }
    dend_15 { pt3dadd( -8.39985, 35.1875, 7.2557, 1.11 ) }
    dend_15 { pt3dadd( -8.58786, 36.3894, 7.31096, 0.96 ) }
    dend_15 { pt3dadd( -8.75858, 37.1678, 7.31989, 0.96 ) }
    dend_15 { pt3dadd( -8.9696, 37.928, 7.30077, 1.55 ) }
    dend_15 { pt3dadd( -9.18287, 38.6184, 7.26748, 2.36 ) }
    dend_15 { pt3dadd( -9.37452, 39.2501, 7.22603, 2.5 ) }
    dend_15 { pt3dadd( -9.52196, 39.7471, 7.18693, 2.8 ) }
    dend_15 { pt3dadd( -9.82511, 40.8032, 7.09191, 2.43 ) }
    dend_15 { pt3dadd( -10.0635, 41.695, 7.00379, 1.99 ) }
    dend_15 { pt3dadd( -10.3906, 43.2821, 6.88294, 1.4 ) }
    dend_15 { pt3dadd( -10.4957, 44.1115, 6.83845, 1.4 ) }
    dend_15 { pt3dadd( -10.5056, 44.3177, 6.83589, 1.4 ) }
    dend_15 { pt3dadd( -10.4719, 45.3116, 6.85831, 1.62 ) }
    dend_15 { pt3dadd( -10.465, 45.3762, 6.86368, 1.62 ) }
    dend_15 { pt3dadd( -10.2477, 46.8384, 7.04806, 1.03 ) }
    dend_15 { pt3dadd( -10.0536, 47.9588, 7.26066, 1.03 ) }
    dend_15 { pt3dadd( -9.89559, 48.9399, 7.48706, 1.47 ) }
    dend_15 { pt3dadd( -9.71156, 50.1512, 7.79063, 1.69 ) }
    dend_15 { pt3dadd( -9.5246, 51.5879, 8.16916, 1.69 ) }
    dend_15 { pt3dadd( -9.4439, 52.6006, 8.43239, 2.14 ) }
    dend_15 { pt3dadd( -9.42954, 53.7016, 8.70577, 2.8 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_15 { pt3dadd( -9.47354, 54.7038, 8.95347, 3.24 ) }
    dend_15 { pt3dadd( -9.53818, 55.3504, 9.09522, 3.39 ) }
    dend_15 { pt3dadd( -9.69434, 56.314, 9.28129, 2.21 ) }
    dend_15 { pt3dadd( -9.94356, 57.5156, 9.46944, 1.33 ) }
    dend_15 { pt3dadd( -10.2189, 58.5978, 9.60401, 1.18 ) }
    dend_15 { pt3dadd( -10.2527, 58.7124, 9.6114, 1.18 ) }
    dend_15 { pt3dadd( -10.5907, 59.8043, 9.64302, 1.47 ) }
    dend_15 { pt3dadd( -10.7887, 60.4264, 9.66032, 1.62 ) }
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 8/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -5.25326, 20.7461, 5.82991, 1.03 ) }
    dend_10 { pt3dadd( -4.14537, 21.4833, 5.84542, 1.03 ) }
    dend_10 { pt3dadd( -4.02793, 21.5575, 5.84674, 1.03 ) }
    dend_10 { pt3dadd( -3.11599, 22.1164, 5.85467, 1.03 ) }
    dend_10 { pt3dadd( -1.88976, 22.8551, 5.86383, 1.4 ) }
    dend_10 { pt3dadd( -1.83621, 22.8867, 5.86587, 1.4 ) }
    dend_10 { pt3dadd( -0.359854, 23.7636, 5.946, 1.4 ) }
    dend_10 { pt3dadd( -0.303848, 23.7966, 5.94971, 1.4 ) }
    dend_10 { pt3dadd( 0.533726, 24.3238, 6.01636, 1.55 ) }
    dend_10 { pt3dadd( 0.591815, 24.3629, 6.02198, 1.55 ) }
    dend_10 { pt3dadd( 1.77265, 25.2799, 6.15532, 0.96 ) }
    dend_10 { pt3dadd( 2.36237, 25.7929, 6.22679, 0.96 ) }
    dend_10 { pt3dadd( 2.83895, 26.2952, 6.29225, 1.18 ) }
    dend_10 { pt3dadd( 3.34794, 26.8962, 6.35847, 1.4 ) }
    dend_10 { pt3dadd( 3.42504, 27.0011, 6.36379, 1.4 ) }
    dend_10 { pt3dadd( 3.8533, 27.6191, 6.3577, 1.4 ) }
    dend_10 { pt3dadd( 3.8992, 27.6873, 6.3527, 1.4 ) }
    dend_10 { pt3dadd( 4.40064, 28.3957, 6.28991, 1.69 ) }
    dend_10 { pt3dadd( 4.77201, 28.8845, 6.24301, 1.92 ) }
    dend_10 { pt3dadd( 5.29588, 29.55, 6.1902, 1.4 ) }
    dend_10 { pt3dadd( 5.97398, 30.4215, 6.13794, 1.11 ) }
    dend_10 { pt3dadd( 6.60504, 31.2279, 6.1004, 1.11 ) }
    dend_10 { pt3dadd( 6.65704, 31.2967, 6.09841, 1.11 ) }
    dend_10 { pt3dadd( 7.22445, 32.0711, 6.08969, 1.11 ) }
    dend_10 { pt3dadd( 7.68, 32.7448, 6.09981, 1.03 ) }
    dend_10 { pt3dadd( 8.15836, 33.5265, 6.13786, 1.03 ) }
    dend_10 { pt3dadd( 8.19689, 33.6029, 6.14145, 1.03 ) }
    dend_10 { pt3dadd( 8.63642, 34.6364, 6.18555, 1.03 ) }
    dend_10 { pt3dadd( 8.65656, 34.6932, 6.18746, 1.03 ) }
    dend_10 { pt3dadd( 8.85406, 35.4565, 6.20293, 0.81 ) }
    dend_10 { pt3dadd( 8.86676, 35.5447, 6.20286, 0.81 ) }
    dend_10 { pt3dadd( 8.89415, 36.2142, 6.20249, 0.59 ) }
    dend_10 { pt3dadd( 8.88927, 36.3419, 6.20243, 0.59 ) }
    dend_10 { pt3dadd( 8.82166, 36.9934, 6.21733, 0.59 ) }
    dend_10 { pt3dadd( 8.80025, 37.2321, 6.22615, 0.59 ) }
    dend_10 { pt3dadd( 8.76347, 37.8013, 6.25204, 0.74 ) }
    dend_10 { pt3dadd( 8.76051, 37.8902, 6.25646, 0.74 ) }
    dend_10 { pt3dadd( 8.78889, 38.8933, 6.30877, 0.74 ) }
    dend_10 { pt3dadd( 8.86238, 39.6524, 6.34642, 1.25 ) }
    dend_10 { pt3dadd( 8.97455, 40.2431, 6.37331, 1.69 ) }
    dend_10 { pt3dadd( 9.19024, 41.0785, 6.40505, 1.4 ) }
    dend_10 { pt3dadd( 9.20815, 41.136, 6.40678, 1.4 ) }
    dend_10 { pt3dadd( 9.43052, 41.8334, 6.42159, 2.06 ) }
    dend_10 { pt3dadd( 9.68754, 42.6091, 6.43219, 2.21 ) }
    dend_10 { pt3dadd( 9.95811, 43.431, 6.43579, 1.77 ) }
    dend_10 { pt3dadd( 10.2553, 44.3616, 6.44146, 1.11 ) }
    dend_10 { pt3dadd( 10.4698, 45.0882, 6.44677, 1.11 ) }
    dend_10 { pt3dadd( 10.6561, 45.7936, 6.45238, 1.4 ) }
    dend_10 { pt3dadd( 10.8703, 46.7518, 6.4609, 0.59 ) }
    dend_10 { pt3dadd( 10.8807, 46.8109, 6.46147, 0.59 ) }
    dend_10 { pt3dadd( 10.9786, 47.694, 6.49244, 0.44 ) }
    dend_10 { pt3dadd( 11.0044, 48.3756, 6.5339, 1.11 ) }
    dend_10 { pt3dadd( 10.9988, 48.8867, 6.57568, 1.33 ) }
    dend_10 { pt3dadd( 10.9953, 49.0043, 6.58322, 1.33 ) }
    dend_10 { pt3dadd( 10.9684, 49.3627, 6.59729, 1.33 ) }
    dend_10 { pt3dadd( 10.898, 50.1935, 6.60094, 0.52 ) }
    dend_10 { pt3dadd( 10.7808, 51.2777, 6.57338, 0.52 ) }
    dend_10 { pt3dadd( 10.7734, 51.3451, 6.56968, 0.52 ) }
    dend_10 { pt3dadd( 10.6987, 52.0266, 6.49038, 0.96 ) }
    dend_10 { pt3dadd( 10.6251, 52.8434, 6.3257, 1.55 ) }
    dend_10 { pt3dadd( 10.5774, 53.4969, 6.10915, 1.77 ) }
    dend_10 { pt3dadd( 10.5588, 53.824, 5.95899, 1.99 ) }
    dend_10 { pt3dadd( 10.5566, 53.8686, 5.93668, 1.99 ) }
    dend_10 { pt3dadd( 10.5247, 54.6953, 5.53391, 1.99 ) }
    dend_10 { pt3dadd( 10.5004, 55.417, 5.18685, 1.4 ) }
    dend_10 { pt3dadd( 10.4786, 56.6578, 4.58408, 0.44 ) }
    dend_10 { pt3dadd( 10.4698, 57.4082, 4.22549, 0.96 ) }
    dend_10 { pt3dadd( 10.474, 57.984, 3.96733, 1.4 ) }
    dend_10 { pt3dadd( 10.4864, 58.604, 3.71789, 1.77 ) }
    dend_10 { pt3dadd( 10.4891, 58.6538, 3.70202, 1.77 ) }
    dend_10 { pt3dadd( 10.5272, 59.1285, 3.60377, 1.99 ) }
    dend_10 { pt3dadd( 10.5437, 59.2614, 3.59307, 1.99 ) }
    dend_10 { pt3dadd( 10.6048, 59.6959, 3.58084, 1.99 ) }
    dend_10 { pt3dadd( 10.6196, 59.8149, 3.57784, 1.99 ) }
    dend_10 { pt3dadd( 10.6749, 60.3818, 3.54722, 1.69 ) }
    dend_10 { pt3dadd( 10.7158, 61.0844, 3.49967, 1.11 ) }
    dend_10 { pt3dadd( 10.7319, 61.7927, 3.44683, 0.44 ) }
    dend_10 { pt3dadd( 10.7222, 62.6511, 3.38139, 0.37 ) }
    dend_10 { pt3dadd( 10.6718, 63.4417, 3.31629, 1.03 ) }
    dend_10 { pt3dadd( 10.6195, 64.0859, 3.28501, 1.03 ) }
    dend_10 { pt3dadd( 10.5588, 64.8726, 3.26928, 0.44 ) }
    dend_10 { pt3dadd( 10.5274, 65.3489, 3.2704, 0.88 ) }
    dend_10 { pt3dadd( 10.5107, 65.7848, 3.27905, 1.18 ) }
    dend_10 { pt3dadd( 10.5076, 66.3758, 3.29916, 1.18 ) }
    dend_10 { pt3dadd( 10.5772, 67.7034, 3.35223, 0.37 ) }
    dend_10 { pt3dadd( 10.6533, 68.4227, 3.3865, 0.37 ) }
    dend_10 { pt3dadd( 10.8205, 69.4649, 3.42258, 1.33 ) }
    dend_10 { pt3dadd( 10.9597, 70.1995, 3.44282, 2.36 ) }
    dend_10 { pt3dadd( 11.0481, 70.6039, 3.44815, 2.95 ) }
    dend_10 { pt3dadd( 11.1677, 71.0537, 3.43967, 3.24 ) }
    dend_10 { pt3dadd( 11.1871, 71.1287, 3.43094, 3.24 ) }
    dend_10 { pt3dadd( 11.2388, 71.3449, 3.40039, 3.24 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    // Section: dend_4, id: dend_4, parent: dend_0 (entry count 0/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -1.7051, -33.0496, 0.497179, 2.06 ) }
    dend_4 { pt3dadd( -1.69161, -34.0036, 0.581149, 2.06 ) }
    dend_4 { pt3dadd( -1.64553, -35.6896, 0.551196, 2.06 ) }
    dend_4 { pt3dadd( -1.59446, -36.862, 0.447415, 2.06 ) }
    dend_4 { pt3dadd( -1.50594, -38.0671, 0.294982, 2.06 ) }
    dend_4 { pt3dadd( -1.34465, -39.5937, 0.0465723, 2.14 ) }
    dend_4 { pt3dadd( -1.20936, -40.6443, -0.138943, 2.14 ) }
    dend_4 { pt3dadd( -0.95979, -42.2188, -0.504912, 2.43 ) }
    dend_4 { pt3dadd( -0.81691, -43.0873, -0.742269, 2.8 ) }
    dend_4 { pt3dadd( -0.61756, -44.267, -1.05135, 2.36 ) }
    dend_4 { pt3dadd( -0.338451, -45.8689, -1.45915, 2.36 ) }
    dend_4 { pt3dadd( -0.112281, -47.0957, -1.74812, 2.36 ) }
    dend_4 { pt3dadd( 0.143827, -48.5658, -2.07675, 2.36 ) }
    dend_4 { pt3dadd( 0.363546, -50.0935, -2.3873, 2.14 ) }
    dend_4 { pt3dadd( 0.511941, -51.4746, -2.69015, 2.14 ) }
    dend_4 { pt3dadd( 0.595182, -52.8317, -3.01442, 2.28 ) }
    dend_4 { pt3dadd( 0.601721, -53.3295, -3.13856, 2.28 ) }
    dend_4 { pt3dadd( 0.549283, -54.5788, -3.4713, 1.69 ) }
    dend_4 { pt3dadd( 0.40062, -55.9296, -3.78385, 1.18 ) }
    dend_4 { pt3dadd( 0.229002, -56.7261, -3.91395, 1.18 ) }
    dend_4 { pt3dadd( 0.00831734, -57.2717, -3.89978, 1.18 ) }
    dend_4 { pt3dadd( -0.361667, -57.8354, -3.71888, 1.18 ) }
    dend_4 { pt3dadd( -0.857562, -58.3755, -3.39749, 0.96 ) }
    dend_4 { pt3dadd( -1.77483, -59.1323, -2.75832, 1.11 ) }
    dend_4 { pt3dadd( -2.7636, -59.8112, -2.14004, 1.69 ) }
    dend_4 { pt3dadd( -3.83214, -60.5065, -1.57768, 1.55 ) }
    dend_4 { pt3dadd( -4.47881, -60.9103, -1.35378, 1.92 ) }
    dend_4 { pt3dadd( -5.09715, -61.306, -1.24775, 2.21 ) }
    dend_4 { pt3dadd( -5.92834, -61.8941, -1.2787, 2.06 ) }
    dend_4 { pt3dadd( -6.97114, -62.6994, -1.50919, 1.99 ) }
    dend_4 { pt3dadd( -7.7693, -63.3798, -1.77478, 1.77 ) }
    dend_4 { pt3dadd( -8.67196, -64.2269, -2.08146, 1.92 ) }
    dend_4 { pt3dadd( -9.47111, -65.0565, -2.30698, 1.84 ) }
    dend_4 { pt3dadd( -10.2476, -65.9471, -2.40225, 1.69 ) }
    dend_4 { pt3dadd( -10.7475, -66.6044, -2.35365, 1.11 ) }
    dend_4 { pt3dadd( -11.2994, -67.4921, -2.17854, 0.96 ) }
    dend_4 { pt3dadd( -11.8517, -68.5874, -1.88133, 1.25 ) }
    dend_4 { pt3dadd( -12.1227, -69.2566, -1.6963, 0.81 ) }
    dend_4 { pt3dadd( -12.5896, -70.7424, -1.45884, 0.74 ) }
    dend_4 { pt3dadd( -12.79, -71.5754, -1.44225, 0.37 ) }
    dend_4 { pt3dadd( -12.9892, -72.8863, -1.62214, 1.47 ) }
    dend_4 { pt3dadd( -13.0278, -73.5166, -1.80716, 2.14 ) }
    dend_4 { pt3dadd( -13.023, -74.7083, -2.35486, 2.5 ) }
    dend_4 { pt3dadd( -12.9235, -76.2147, -3.27749, 1.03 ) }
    dend_4 { pt3dadd( -12.8421, -76.9913, -3.85156, 0.88 ) }
    dend_4 { pt3dadd( -12.7475, -77.5862, -4.31348, 0.44 ) }
    dend_4 { pt3dadd( -12.5251, -78.5928, -5.12862, 0.44 ) }
    dend_4 { pt3dadd( -12.2056, -79.7518, -6.07007, 1.18 ) }
    dend_4 { pt3dadd( -11.8061, -81.0687, -7.07353, 1.62 ) }
    dend_4 { pt3dadd( -11.7804, -81.1532, -7.1331, 1.62 ) }
    dend_4 { pt3dadd( -11.5103, -82.0607, -7.71417, 1.62 ) }
    dend_4 { pt3dadd( -11.1633, -83.4536, -8.49371, 1.47 ) }
    dend_4 { pt3dadd( -10.9872, -84.3721, -8.90524, 1.99 ) }
    dend_4 { pt3dadd( -10.9097, -85.1209, -9.16062, 1.99 ) }
    dend_4 { pt3dadd( -10.8971, -85.8033, -9.34274, 1.99 ) }
    dend_4 { pt3dadd( -10.9686, -87.1103, -9.65751, 0.59 ) }
    dend_4 { pt3dadd( -11.1157, -88.0551, -9.85556, 0.52 ) }
    dend_4 { pt3dadd( -11.2947, -88.7497, -9.93428, 0.52 ) }
    dend_4 { pt3dadd( -11.8519, -90.3561, -10.0411, 2.8 ) }
    dend_4 { pt3dadd( -12.1016, -91.0025, -10.0687, 3.17 ) }
    dend_4 { pt3dadd( -12.3717, -91.6411, -10.0323, 3.46 ) }
    dend_4 { pt3dadd( -12.627, -92.246, -9.88901, 3.46 ) }
    dend_4 { pt3dadd( -13.2275, -93.7166, -9.43556, 1.69 ) }
    dend_4 { pt3dadd( -13.5643, -94.6051, -9.07499, 1.11 ) }
    dend_4 { pt3dadd( -13.7496, -95.1494, -8.77126, 1.25 ) }
    dend_4 { pt3dadd( -14.2137, -96.6095, -7.83669, 1.99 ) }
    dend_4 { pt3dadd( -14.6173, -98.0643, -6.75743, 1.47 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 67/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -1.7051, -33.0496, 0.497179, 0.96 ) }
    dend_1 { pt3dadd( -0.608443, -33.9692, -0.885246, 0.96 ) }
    dend_1 { pt3dadd( 0.322482, -34.6983, -2.00463, 0.81 ) }
    dend_1 { pt3dadd( 1.75751, -35.6927, -3.53683, 0.59 ) }
    dend_1 { pt3dadd( 2.14526, -35.9247, -3.90581, 0.88 ) }
    dend_1 { pt3dadd( 2.52712, -36.1215, -4.23078, 1.11 ) }
    dend_1 { pt3dadd( 2.59003, -36.1488, -4.27972, 1.11 ) }
    dend_1 { pt3dadd( 3.46497, -36.3581, -4.88317, 1.25 ) }
    dend_1 { pt3dadd( 4.21598, -36.474, -5.47999, 0.88 ) }
    dend_1 { pt3dadd( 5.04386, -36.5715, -6.22208, 0.52 ) }
    dend_1 { pt3dadd( 5.46503, -36.6412, -6.73841, 0.81 ) }
    dend_1 { pt3dadd( 6.03889, -36.7865, -7.623, 0.96 ) }
    dend_1 { pt3dadd( 6.8501, -37.1015, -9.19928, 0.52 ) }
    dend_1 { pt3dadd( 7.56187, -37.6939, -11.5685, 0.52 ) }
    dend_1 { pt3dadd( 7.5692, -37.7158, -11.6362, 0.52 ) }
    dend_1 { pt3dadd( 7.44595, -38.443, -13.3231, 0.96 ) }
    dend_1 { pt3dadd( 7.34505, -38.7209, -13.8291, 1.11 ) }
    dend_1 { pt3dadd( 7.17165, -39.0736, -14.3411, 1.11 ) }
    dend_1 { pt3dadd( 6.5951, -40.2298, -15.625, 0.66 ) }
    dend_1 { pt3dadd( 6.36671, -40.8067, -16.1623, 0.37 ) }
    dend_1 { pt3dadd( 6.19045, -41.6712, -16.9629, 0.37 ) }
    dend_1 { pt3dadd( 6.21013, -42.2818, -17.539, 0.59 ) }
    dend_1 { pt3dadd( 6.22099, -42.3329, -17.5899, 0.59 ) }
    dend_1 { pt3dadd( 6.58548, -43.1483, -18.4519, 1.03 ) }
    dend_1 { pt3dadd( 7.03523, -43.8635, -19.2554, 1.69 ) }
    dend_1 { pt3dadd( 7.56105, -44.6555, -20.1743, 2.21 ) }
    dend_1 { pt3dadd( 8.01304, -45.3627, -20.988, 2.8 ) }
    dend_1 { pt3dadd( 8.18835, -45.6804, -21.3468, 2.8 ) }
    dend_1 { pt3dadd( 8.90046, -47.231, -23.0085, 1.33 ) }
    dend_1 { pt3dadd( 9.29104, -48.3324, -24.0854, 0.52 ) }
    dend_1 { pt3dadd( 9.43487, -48.907, -24.5808, 0.66 ) }
    dend_1 { pt3dadd( 9.51617, -49.3602, -24.9108, 0.66 ) }
    dend_1 { pt3dadd( 9.62818, -50.031, -25.3311, 0.29 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_1 { pt3dadd( 9.72425, -50.6238, -25.6561, 0.37 ) }
    dend_1 { pt3dadd( 9.83834, -51.3018, -25.8748, 0.37 ) }
    dend_1 { pt3dadd( 9.87583, -51.3831, -25.9004, 0.37 ) }
    dend_1 { pt3dadd( 10.3847, -51.9889, -26.2282, 0.66 ) }
    dend_1 { pt3dadd( 10.88, -52.4852, -26.5702, 0.96 ) }
    dend_1 { pt3dadd( 10.922, -52.5238, -26.5988, 0.96 ) }
    dend_1 { pt3dadd( 11.3994, -52.9637, -26.9332, 0.96 ) }
    dend_1 { pt3dadd( 12.352, -53.8722, -27.6841, 0.52 ) }
    dend_1 { pt3dadd( 13.1876, -54.7124, -28.3677, 0.37 ) }
    dend_1 { pt3dadd( 14.177, -55.7431, -29.2211, 1.77 ) }
    dend_1 { pt3dadd( 14.5615, -56.1625, -29.5604, 2.36 ) }
    dend_1 { pt3dadd( 14.9796, -56.6311, -29.9362, 2.58 ) }
    dend_1 { pt3dadd( 16.2474, -58.1176, -31.1092, 0.74 ) }
    dend_1 { pt3dadd( 16.6488, -58.6408, -31.4609, 0.74 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 14/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 4.23949, -40.7776, 0.00760949, 0.15 ) }
    axon_1 { pt3dadd( 5.86652, -55.6891, 0.00760949, 0.15 ) }
    axon_1 { pt3dadd( 7.49354, -70.6006, 0.00760949, 0.15 ) }
    // Section: dend_17, id: dend_17, parent: dend_15 (entry count 17/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -10.7887, 60.4264, 9.66032, 0.81 ) }
    dend_17 { pt3dadd( -11.2103, 60.9959, 9.60155, 0.81 ) }
    dend_17 { pt3dadd( -11.7451, 61.7612, 9.51387, 0.74 ) }
    dend_17 { pt3dadd( -12.2017, 62.4434, 9.4391, 0.74 ) }
    dend_17 { pt3dadd( -12.2352, 62.4946, 9.43126, 0.74 ) }
    dend_17 { pt3dadd( -12.8492, 63.4499, 9.2713, 0.74 ) }
    dend_17 { pt3dadd( -13.1441, 63.9049, 9.17942, 1.33 ) }
    dend_17 { pt3dadd( -13.4339, 64.3638, 9.06076, 1.92 ) }
    dend_17 { pt3dadd( -13.7456, 64.8612, 8.91031, 1.33 ) }
    dend_17 { pt3dadd( -14.1963, 65.5424, 8.69712, 1.11 ) }
    dend_17 { pt3dadd( -14.5384, 66.028, 8.541, 1.47 ) }
    dend_17 { pt3dadd( -15.0066, 66.6431, 8.34818, 1.18 ) }
    dend_17 { pt3dadd( -15.0338, 66.6774, 8.33744, 1.18 ) }
    dend_17 { pt3dadd( -15.4579, 67.2138, 8.17218, 0.66 ) }
    dend_17 { pt3dadd( -15.8385, 67.7271, 8.01418, 0.66 ) }
    dend_17 { pt3dadd( -16.3046, 68.4179, 7.82133, 1.47 ) }
    dend_17 { pt3dadd( -16.5814, 68.8931, 7.71594, 1.99 ) }
    dend_17 { pt3dadd( -16.9006, 69.5204, 7.61134, 1.99 ) }
    dend_17 { pt3dadd( -17.4071, 70.6478, 7.46147, 0.66 ) }
    dend_17 { pt3dadd( -17.662, 71.3189, 7.3941, 0.52 ) }
    dend_17 { pt3dadd( -17.8136, 71.7986, 7.36411, 0.59 ) }
    dend_17 { pt3dadd( -18.0914, 72.7585, 7.38151, 0.74 ) }
    dend_17 { pt3dadd( -18.1092, 72.8204, 7.38573, 0.74 ) }
    dend_17 { pt3dadd( -18.294, 73.386, 7.45658, 1.33 ) }
    dend_17 { pt3dadd( -18.4582, 73.8354, 7.53456, 1.62 ) }
    dend_17 { pt3dadd( -18.7391, 74.4765, 7.65152, 1.18 ) }
    dend_17 { pt3dadd( -19.1188, 75.2037, 7.74399, 0.66 ) }
    dend_17 { pt3dadd( -19.4411, 75.7576, 7.78626, 0.66 ) }
    dend_17 { pt3dadd( -20.0613, 76.7481, 7.84487, 2.28 ) }
    dend_17 { pt3dadd( -20.4056, 77.2447, 7.86812, 2.73 ) }
    dend_17 { pt3dadd( -20.7142, 77.6631, 7.88025, 2.95 ) }
    dend_17 { pt3dadd( -21.5287, 78.7276, 7.88598, 1.03 ) }
    dend_17 { pt3dadd( -21.5625, 78.7706, 7.88523, 1.03 ) }
    dend_17 { pt3dadd( -21.8988, 79.1998, 7.88193, 0.81 ) }
    dend_17 { pt3dadd( -22.2899, 79.6985, 7.88708, 0.44 ) }
    dend_17 { pt3dadd( -22.688, 80.2232, 7.90363, 0.44 ) }
    dend_17 { pt3dadd( -23.1462, 80.8448, 7.93819, 0.44 ) }
    dend_17 { pt3dadd( -23.5903, 81.4404, 7.9903, 1.11 ) }
    dend_17 { pt3dadd( -23.9206, 81.8805, 8.0286, 1.69 ) }
    dend_17 { pt3dadd( -24.3609, 82.4745, 8.07869, 2.21 ) }
    dend_17 { pt3dadd( -24.6252, 82.8305, 8.10822, 2.5 ) }
    dend_17 { pt3dadd( -25.2925, 83.6876, 8.18287, 1.25 ) }
    dend_17 { pt3dadd( -25.8945, 84.4415, 8.2491, 0.44 ) }
    dend_17 { pt3dadd( -26.386, 85.0491, 8.30139, 0.44 ) }
    dend_17 { pt3dadd( -26.7758, 85.5237, 8.34316, 1.03 ) }
    dend_17 { pt3dadd( -27.2009, 86.052, 8.38828, 1.33 ) }
    dend_17 { pt3dadd( -27.3065, 86.1864, 8.39936, 1.33 ) }
    dend_17 { pt3dadd( -27.5488, 86.5041, 8.42437, 1.47 ) }
    dend_17 { pt3dadd( -27.9849, 87.0707, 8.46962, 0.88 ) }
    dend_17 { pt3dadd( -28.3682, 87.5463, 8.51032, 0.59 ) }
    dend_17 { pt3dadd( -28.7708, 88.0149, 8.55438, 0.44 ) }
    dend_17 { pt3dadd( -28.819, 88.067, 8.55983, 0.44 ) }
    dend_17 { pt3dadd( -29.4219, 88.6554, 8.63054, 0.44 ) }
    dend_17 { pt3dadd( -29.7459, 88.9232, 8.67056, 0.66 ) }
    dend_17 { pt3dadd( -29.8901, 89.0289, 8.68895, 0.66 ) }
    dend_17 { pt3dadd( -30.332, 89.3451, 8.7456, 0.66 ) }
    dend_17 { pt3dadd( -30.7662, 89.6956, 8.81032, 0.66 ) }
    dend_17 { pt3dadd( -31.1644, 90.0955, 8.87695, 0.37 ) }
    dend_17 { pt3dadd( -31.4326, 90.4517, 8.91821, 0.37 ) }
    dend_17 { pt3dadd( -31.8052, 91.072, 8.96334, 0.66 ) }
    dend_17 { pt3dadd( -32.0196, 91.5471, 8.96866, 0.96 ) }
    dend_17 { pt3dadd( -32.2433, 92.2451, 8.94301, 0.29 ) }
    dend_17 { pt3dadd( -32.3762, 92.7906, 8.9097, 0.44 ) }
    dend_17 { pt3dadd( -32.4901, 93.3697, 8.86455, 0.96 ) }
    dend_17 { pt3dadd( -32.5077, 93.4638, 8.8563, 0.96 ) }
    dend_17 { pt3dadd( -32.6854, 94.3258, 8.77263, 1.77 ) }
    dend_17 { pt3dadd( -32.8991, 95.1531, 8.69402, 2.95 ) }
    dend_17 { pt3dadd( -33.0241, 95.558, 8.56517, 3.54 ) }
    dend_17 { pt3dadd( -33.0391, 95.6055, 8.54387, 3.54 ) }
    dend_17 { pt3dadd( -33.1933, 96.1223, 8.27419, 3.76 ) }
    dend_17 { pt3dadd( -33.2059, 96.1666, 8.24825, 3.76 ) }
    dend_17 { pt3dadd( -33.3743, 96.7909, 7.84162, 3.46 ) }
    dend_17 { pt3dadd( -33.8961, 98.9369, 6.37263, 0.81 ) }
    dend_17 { pt3dadd( -33.9071, 98.9881, 6.33988, 0.81 ) }
    dend_17 { pt3dadd( -33.9989, 99.4307, 6.09099, 0.81 ) }
    dend_17 { pt3dadd( -34.0084, 99.4799, 6.07048, 0.81 ) }
    dend_17 { pt3dadd( -34.1075, 100.099, 5.92966, 1.11 ) }
    dend_17 { pt3dadd( -34.1666, 100.565, 5.90546, 1.25 ) }
    dend_17 { pt3dadd( -34.2607, 101.435, 6.01482, 0.37 ) }
    dend_17 { pt3dadd( -34.3358, 102.136, 6.111, 0.29 ) }
    dend_17 { pt3dadd( -34.4645, 103.187, 6.22083, 0.29 ) }
    dend_17 { pt3dadd( -34.6187, 104.335, 6.30965, 0.29 ) }
    dend_17 { pt3dadd( -34.628, 104.395, 6.31261, 0.29 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_17 { pt3dadd( -34.7587, 105.151, 6.3427, 0.29 ) }
    dend_17 { pt3dadd( -34.774, 105.239, 6.34318, 0.29 ) }
    dend_17 { pt3dadd( -34.9291, 106.143, 6.26275, 0.44 ) }
    dend_17 { pt3dadd( -34.9488, 106.219, 6.23621, 0.44 ) }
    dend_17 { pt3dadd( -35.1175, 106.568, 6.03384, 0.44 ) }
    dend_17 { pt3dadd( -38.8964, 112.996, 5.71085, 0.44 ) }
    dend_17 { pt3dadd( -42.8007, 119.363, 5.57304, 0.44 ) }
    dend_17 { pt3dadd( -46.5495, 125.771, 4.80294, 0.44 ) }
    dend_17 { pt3dadd( -49.2488, 132.38, 2.68821, 0.44 ) }
    dend_17 { pt3dadd( -52.2777, 138.415, -0.560654, 0.44 ) }
    dend_17 { pt3dadd( -54.2783, 144.003, -5.19896, 0.44 ) }
    dend_17 { pt3dadd( -56.6089, 148.556, -10.8308, 0.44 ) }
    dend_17 { pt3dadd( -57.36, 154.371, -15.5361, 0.44 ) }
    dend_17 { pt3dadd( -57.9034, 160.442, -19.9029, 0.44 ) }
    dend_17 { pt3dadd( -58.1347, 165.881, -25.1332, 0.44 ) }
    dend_17 { pt3dadd( -57.0972, 172.005, -29.3371, 0.44 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 16/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -10.7887, 60.4264, 9.66032, 0.29 ) }
    dend_16 { pt3dadd( -10.2663, 62.5701, 9.31316, 0.29 ) }
    dend_16 { pt3dadd( -10.1023, 63.4402, 9.21992, 0.44 ) }
    dend_16 { pt3dadd( -10.0065, 64.2869, 9.16606, 0.44 ) }
    dend_16 { pt3dadd( -9.94855, 65.5313, 9.12894, 0.29 ) }
    dend_16 { pt3dadd( -9.94904, 65.603, 9.12825, 0.29 ) }
    dend_16 { pt3dadd( -9.99683, 66.6806, 9.13041, 0.29 ) }
    dend_16 { pt3dadd( -10.0215, 66.8542, 9.14894, 0.29 ) }
    dend_16 { pt3dadd( -10.1772, 67.7465, 9.18049, 0.29 ) }
    dend_16 { pt3dadd( -10.3135, 68.4885, 9.15605, 0.96 ) }
    dend_16 { pt3dadd( -10.4222, 69.1436, 9.07222, 1.33 ) }
    dend_16 { pt3dadd( -10.4742, 69.5369, 9.00393, 1.33 ) }
    dend_16 { pt3dadd( -10.6026, 71.2319, 8.63634, 0.52 ) }
    dend_16 { pt3dadd( -10.6272, 72.5589, 8.30908, 0.29 ) }
    dend_16 { pt3dadd( -10.6192, 72.7014, 8.27007, 0.29 ) }
    dend_16 { pt3dadd( -10.5094, 73.7746, 7.96583, 0.81 ) }
    dend_16 { pt3dadd( -10.4997, 73.8509, 7.94479, 0.81 ) }
    dend_16 { pt3dadd( -10.4078, 74.5955, 7.75923, 1.03 ) }
    dend_16 { pt3dadd( -10.3535, 75.2366, 7.63184, 0.74 ) }
    dend_16 { pt3dadd( -10.2781, 76.2549, 7.49539, 0.29 ) }
    dend_16 { pt3dadd( -10.2475, 76.9093, 7.4338, 0.44 ) }
    dend_16 { pt3dadd( -10.2532, 77.4154, 7.41592, 0.44 ) }
    dend_16 { pt3dadd( -10.288, 78.0863, 7.39921, 0.29 ) }
    dend_16 { pt3dadd( -10.3869, 78.7095, 7.38852, 0.74 ) }
    dend_16 { pt3dadd( -11.184, 90.0203, 7.81869, 0.74 ) }
    // Section: dend_12, id: dend_12, parent: dend_10 (entry count 41/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 11.2388, 71.3449, 3.40039, 0.37 ) }
    dend_12 { pt3dadd( 11.4517, 72.4281, 2.94317, 0.37 ) }
    dend_12 { pt3dadd( 11.5509, 72.7941, 2.73585, 0.37 ) }
    dend_12 { pt3dadd( 11.6357, 73.0846, 2.56178, 0.96 ) }
    dend_12 { pt3dadd( 11.6479, 73.1195, 2.54208, 0.96 ) }
    dend_12 { pt3dadd( 11.8424, 73.6497, 2.25259, 0.96 ) }
    dend_12 { pt3dadd( 12.188, 74.6356, 1.73994, 0.37 ) }
    dend_12 { pt3dadd( 12.3735, 75.2594, 1.41407, 0.59 ) }
    dend_12 { pt3dadd( 12.5176, 75.7781, 1.11836, 0.37 ) }
    dend_12 { pt3dadd( 12.6894, 76.4816, 0.706844, 0.37 ) }
    dend_12 { pt3dadd( 12.7007, 76.5399, 0.673361, 0.37 ) }
    dend_12 { pt3dadd( 12.7484, 76.9485, 0.418331, 0.29 ) }
    dend_12 { pt3dadd( 12.7827, 77.7381, -0.0800028, 1.47 ) }
    dend_12 { pt3dadd( 12.7795, 78.3828, -0.491374, 1.92 ) }
    dend_12 { pt3dadd( 12.7725, 78.6226, -0.650462, 2.21 ) }
    dend_12 { pt3dadd( 12.7658, 78.8648, -0.821289, 2.21 ) }
    dend_12 { pt3dadd( 12.7757, 80.1704, -1.74614, 0.37 ) }
    dend_12 { pt3dadd( 12.8042, 80.8605, -2.23035, 0.96 ) }
    dend_12 { pt3dadd( 12.8258, 81.2137, -2.4679, 1.62 ) }
    dend_12 { pt3dadd( 12.8538, 81.595, -2.72089, 1.84 ) }
    dend_12 { pt3dadd( 12.9413, 82.6158, -3.4068, 0.29 ) }
    dend_12 { pt3dadd( 12.9995, 83.2278, -3.81114, 1.03 ) }
    dend_12 { pt3dadd( 13.0204, 83.458, -3.94397, 1.4 ) }
    dend_12 { pt3dadd( 13.0299, 83.595, -4.02604, 1.4 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 65/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 11.2388, 71.3449, 3.40039, 0.37 ) }
    dend_11 { pt3dadd( 12.6994, 73.8694, 4.33834, 0.37 ) }
    dend_11 { pt3dadd( 13.5054, 75.1954, 4.65877, 0.37 ) }
    dend_11 { pt3dadd( 14.293, 76.4847, 4.78991, 0.81 ) }
    dend_11 { pt3dadd( 14.3401, 76.5564, 4.79211, 0.81 ) }
    dend_11 { pt3dadd( 14.7994, 77.2331, 4.79167, 0.81 ) }
    dend_11 { pt3dadd( 15.5865, 78.3691, 4.69988, 0.37 ) }
    dend_11 { pt3dadd( 16.416, 79.4107, 4.36898, 0.29 ) }
    dend_11 { pt3dadd( 17.1419, 80.2879, 4.02347, 0.59 ) }
    dend_11 { pt3dadd( 17.8483, 81.1264, 3.64823, 0.22 ) }
    dend_11 { pt3dadd( 17.8892, 81.1795, 3.62417, 0.22 ) }
    dend_11 { pt3dadd( 18.624, 82.3036, 3.11552, 1.18 ) }
    dend_11 { pt3dadd( 18.8396, 82.7391, 2.95915, 1.69 ) }
    dend_11 { pt3dadd( 19.1, 83.5611, 2.76246, 1.99 ) }
    dend_11 { pt3dadd( 19.1717, 84.0617, 2.71654, 1.99 ) }
    dend_11 { pt3dadd( 19.0834, 85.2034, 2.73619, 0.44 ) }
    dend_11 { pt3dadd( 18.9133, 85.9537, 2.86165, 0.29 ) }
    dend_11 { pt3dadd( 17.9845, 87.8648, 3.68388, 0.29 ) }
    dend_11 { pt3dadd( 17.9398, 87.9265, 3.7174, 0.29 ) }
    dend_11 { pt3dadd( 23.6511, 98.0525, 5.51339, 0.29 ) }
    dend_11 { pt3dadd( 28.1557, 108.455, 8.57225, 0.29 ) }
    dend_11 { pt3dadd( 32.7758, 118.631, 12.2449, 0.29 ) }
    dend_11 { pt3dadd( 36.3615, 128.725, 17.1328, 0.29 ) }
    dend_11 { pt3dadd( 41.2689, 137.74, 23.0944, 0.29 ) }
    dend_11 { pt3dadd( 45.1018, 145.924, 30.8923, 0.29 ) }
    dend_11 { pt3dadd( 49.5599, 153.983, 38.5004, 0.29 ) }
    // Section: dend_6, id: dend_6, parent: dend_4 (entry count 91/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -14.6173, -98.0643, -6.75743, 0.52 ) }
    dend_6 { pt3dadd( -14.7791, -99.7054, -6.11403, 0.52 ) }
    dend_6 { pt3dadd( -14.7782, -100.349, -5.93009, 0.81 ) }
    dend_6 { pt3dadd( -14.7356, -100.917, -5.84836, 1.03 ) }
    dend_6 { pt3dadd( -14.7289, -100.988, -5.84689, 1.03 ) }
    dend_6 { pt3dadd( -14.689, -101.618, -5.87838, 1.03 ) }
    dend_6 { pt3dadd( -14.6785, -102.317, -5.94068, 0.52 ) }
    dend_6 { pt3dadd( -14.6972, -102.934, -6.07101, 0.52 ) }
    dend_6 { pt3dadd( -14.806, -103.672, -6.21549, 0.52 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_6 { pt3dadd( -14.9676, -104.279, -6.32307, 0.66 ) }
    dend_6 { pt3dadd( -15.207, -104.906, -6.37542, 0.66 ) }
    dend_6 { pt3dadd( -15.4431, -105.369, -6.37708, 0.88 ) }
    dend_6 { pt3dadd( -16.0873, -106.413, -6.2229, 1.03 ) }
    dend_6 { pt3dadd( -16.5529, -107.073, -6.02511, 1.55 ) }
    dend_6 { pt3dadd( -16.7617, -107.363, -5.90641, 1.92 ) }
    dend_6 { pt3dadd( -17.4916, -108.375, -5.4194, 1.92 ) }
    dend_6 { pt3dadd( -17.9742, -109.076, -5.05857, 1.33 ) }
    dend_6 { pt3dadd( -18.763, -110.272, -4.43745, 0.59 ) }
    dend_6 { pt3dadd( -19.3163, -111.145, -3.99713, 0.59 ) }
    dend_6 { pt3dadd( -19.8425, -112.023, -3.62645, 0.59 ) }
    dend_6 { pt3dadd( -19.8676, -112.067, -3.61194, 0.59 ) }
    dend_6 { pt3dadd( -20.2097, -112.712, -3.49268, 1.33 ) }
    dend_6 { pt3dadd( -20.5667, -113.496, -3.47757, 0.74 ) }
    dend_6 { pt3dadd( -20.8072, -114.171, -3.57502, 0.74 ) }
    dend_6 { pt3dadd( -21.1355, -115.3, -3.79405, 0.74 ) }
    dend_6 { pt3dadd( -21.1582, -115.383, -3.81139, 0.74 ) }
    dend_6 { pt3dadd( -21.3782, -116.195, -3.95938, 1.18 ) }
    dend_6 { pt3dadd( -21.7345, -117.442, -4.15608, 0.81 ) }
    dend_6 { pt3dadd( -22.1279, -118.765, -4.28102, 0.74 ) }
    dend_6 { pt3dadd( -22.5999, -120.25, -4.32603, 0.59 ) }
    dend_6 { pt3dadd( -22.62, -120.31, -4.32195, 0.59 ) }
    dend_6 { pt3dadd( -22.9704, -121.291, -4.20447, 1.92 ) }
    dend_6 { pt3dadd( -23.2922, -122.187, -4.02271, 2.21 ) }
    dend_6 { pt3dadd( -23.66, -123.252, -3.73899, 2.21 ) }
    dend_6 { pt3dadd( -24.0164, -124.358, -3.40801, 0.74 ) }
    dend_6 { pt3dadd( -24.3497, -125.657, -2.99191, 0.74 ) }
    dend_6 { pt3dadd( -24.5074, -126.643, -2.67527, 0.66 ) }
    dend_6 { pt3dadd( -24.5144, -127.808, -2.31696, 0.44 ) }
    dend_6 { pt3dadd( -24.3755, -128.576, -2.09601, 1.03 ) }
    dend_6 { pt3dadd( -24.3372, -128.668, -2.07617, 1.03 ) }
    dend_6 { pt3dadd( -24.0462, -129.125, -2.02685, 1.03 ) }
    dend_6 { pt3dadd( -23.5779, -129.76, -2.03206, 1.03 ) }
    dend_6 { pt3dadd( -23.1424, -130.381, -2.06735, 1.4 ) }
    dend_6 { pt3dadd( -22.9351, -130.773, -2.10842, 1.4 ) }
    dend_6 { pt3dadd( -22.6207, -131.744, -2.18415, 0.81 ) }
    dend_6 { pt3dadd( -22.4561, -132.778, -2.18785, 0.81 ) }
    dend_6 { pt3dadd( -22.4576, -133.516, -2.14742, 1.03 ) }
    dend_6 { pt3dadd( -22.5489, -134.183, -2.08063, 1.11 ) }
    dend_6 { pt3dadd( -22.7345, -134.973, -1.96722, 1.18 ) }
    dend_6 { pt3dadd( -23.0302, -135.943, -1.8016, 0.37 ) }
    dend_6 { pt3dadd( -23.4559, -137.122, -1.63612, 0.37 ) }
    dend_6 { pt3dadd( -23.7063, -137.869, -1.60546, 1.55 ) }
    dend_6 { pt3dadd( -23.855, -138.481, -1.65615, 1.84 ) }
    dend_6 { pt3dadd( -23.9317, -139.027, -1.76069, 2.14 ) }
    dend_6 { pt3dadd( -23.943, -139.443, -1.89009, 2.14 ) }
    dend_6 { pt3dadd( -23.7708, -140.585, -2.4319, 1.69 ) }
    dend_6 { pt3dadd( -23.2807, -141.864, -3.21826, 0.52 ) }
    dend_6 { pt3dadd( -23.0078, -142.323, -3.53414, 0.88 ) }
    dend_6 { pt3dadd( -22.9724, -142.366, -3.56739, 0.88 ) }
    dend_6 { pt3dadd( -22.8244, -142.51, -3.69292, 0.88 ) }
    dend_6 { pt3dadd( -21.9924, -143.194, -4.31502, 0.52 ) }
    dend_6 { pt3dadd( -21.22, -143.792, -4.86866, 1.03 ) }
    dend_6 { pt3dadd( -21.1764, -143.828, -4.90134, 1.03 ) }
    dend_6 { pt3dadd( -20.4997, -144.49, -5.45081, 1.33 ) }
    dend_6 { pt3dadd( -19.8201, -145.257, -6.0279, 1.25 ) }
    dend_6 { pt3dadd( -19.5784, -145.589, -6.2491, 1.03 ) }
    dend_6 { pt3dadd( -18.9341, -146.835, -6.89598, 0.59 ) }
    dend_6 { pt3dadd( -18.6215, -147.68, -7.24036, 0.59 ) }
    dend_6 { pt3dadd( -18.4587, -148.289, -7.4293, 1.18 ) }
    dend_6 { pt3dadd( -18.4161, -148.542, -7.48144, 1.84 ) }
    dend_6 { pt3dadd( -18.3664, -149.096, -7.55228, 1.84 ) }
    dend_6 { pt3dadd( -18.3337, -150.325, -7.66225, 0.74 ) }
    dend_6 { pt3dadd( -18.2943, -151.201, -7.84133, 1.03 ) }
    dend_6 { pt3dadd( -18.2188, -151.869, -8.08257, 1.11 ) }
    dend_6 { pt3dadd( -18.1565, -152.214, -8.25031, 1.33 ) }
    dend_6 { pt3dadd( -17.985, -152.883, -8.69761, 0.81 ) }
    dend_6 { pt3dadd( -17.8333, -153.316, -9.07208, 0.44 ) }
    dend_6 { pt3dadd( -16.9995, -155.353, -11.2972, 0.44 ) }
    dend_6 { pt3dadd( -16.8462, -155.719, -11.7636, 0.44 ) }
    dend_6 { pt3dadd( -16.8228, -155.795, -11.8869, 0.44 ) }
    dend_6 { pt3dadd( -16.7573, -156.409, -13.0032, 0.44 ) }
    dend_6 { pt3dadd( -16.7622, -156.434, -13.0509, 0.44 ) }
    dend_6 { pt3dadd( -16.9089, -156.769, -13.6166, 0.74 ) }
    dend_6 { pt3dadd( -17.1549, -157.116, -14.1174, 1.11 ) }
    dend_6 { pt3dadd( -17.7288, -158.19, -15.7294, 0.44 ) }
    dend_6 { pt3dadd( -17.8663, -158.588, -16.3332, 0.44 ) }
    dend_6 { pt3dadd( -18.0193, -159.437, -17.5513, 1.84 ) }
    dend_6 { pt3dadd( -18.0329, -159.798, -18.0589, 2.5 ) }
    dend_6 { pt3dadd( -18.0271, -159.899, -18.1965, 2.5 ) }
    dend_6 { pt3dadd( -17.8865, -161.374, -20.0364, 0.59 ) }
    dend_6 { pt3dadd( -17.8469, -161.892, -20.6396, 0.59 ) }
    dend_6 { pt3dadd( -17.8219, -162.343, -21.2393, 0.59 ) }
    dend_6 { pt3dadd( -17.8211, -162.382, -21.2924, 0.59 ) }
    dend_6 { pt3dadd( -17.848, -163.186, -22.3676, 1.77 ) }
    dend_6 { pt3dadd( -17.9069, -163.692, -22.9935, 2.06 ) }
    dend_6 { pt3dadd( -18.1523, -164.709, -24.1283, 1.99 ) }
    dend_6 { pt3dadd( -18.5284, -166.062, -25.607, 0.81 ) }
    dend_6 { pt3dadd( -18.5396, -166.104, -25.6552, 0.81 ) }
    dend_6 { pt3dadd( -18.6474, -166.591, -26.1832, 0.66 ) }
    dend_6 { pt3dadd( -18.7379, -167.263, -26.8749, 0.52 ) }
    dend_6 { pt3dadd( -18.7934, -167.759, -27.366, 1.84 ) }
    dend_6 { pt3dadd( -18.8613, -168.411, -27.9237, 2.28 ) }
    dend_6 { pt3dadd( -18.9779, -170.014, -29.233, 0.66 ) }
    dend_6 { pt3dadd( -18.9589, -170.57, -29.6914, 0.66 ) }
    dend_6 { pt3dadd( -18.8287, -171.519, -30.4633, 1.77 ) }
    dend_6 { pt3dadd( -18.8148, -171.576, -30.5063, 1.77 ) }
    dend_6 { pt3dadd( -18.6324, -172.155, -30.9012, 2.21 ) }
    dend_6 { pt3dadd( -18.3398, -172.974, -31.3609, 2.21 ) }
    dend_6 { pt3dadd( -17.9453, -174.074, -31.8624, 0.74 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_6 { pt3dadd( -17.7786, -174.601, -32.0877, 0.37 ) }
    dend_6 { pt3dadd( -17.6574, -175.019, -32.2512, 0.29 ) }
    dend_6 { pt3dadd( -17.4502, -175.733, -32.5201, 1.11 ) }
    dend_6 { pt3dadd( -17.2999, -176.261, -32.722, 1.4 ) }
    dend_6 { pt3dadd( -17.0676, -177.143, -33.0275, 0.59 ) }
    dend_6 { pt3dadd( -16.9034, -177.777, -33.2431, 0.29 ) }
    dend_6 { pt3dadd( -16.73, -178.465, -33.4806, 0.66 ) }
    dend_6 { pt3dadd( -16.6278, -178.889, -33.6429, 0.88 ) }
    dend_6 { pt3dadd( -16.4364, -179.81, -34.0033, 0.29 ) }
    dend_6 { pt3dadd( -16.3327, -180.389, -34.2272, 0.29 ) }
    dend_6 { pt3dadd( -16.2666, -180.842, -34.3914, 0.96 ) }
    dend_6 { pt3dadd( -16.2104, -181.323, -34.5601, 0.96 ) }
    dend_6 { pt3dadd( -16.0614, -182.373, -34.9338, 0.29 ) }
    dend_6 { pt3dadd( -15.9444, -182.892, -35.1435, 0.29 ) }
    dend_6 { pt3dadd( -15.7337, -183.423, -35.4363, 0.66 ) }
    dend_6 { pt3dadd( -15.7109, -183.469, -35.4902, 0.66 ) }
    dend_6 { pt3dadd( -15.5708, -183.741, -35.8859, 0.66 ) }
    dend_6 { pt3dadd( -15.2814, -184.359, -36.9593, 0.44 ) }
    dend_6 { pt3dadd( -15.0855, -184.854, -37.8763, 1.77 ) }
    dend_6 { pt3dadd( -14.8348, -185.578, -39.2873, 2.58 ) }
    dend_6 { pt3dadd( -14.1977, -187.754, -43.6157, 0.44 ) }
    dend_6 { pt3dadd( -14.1427, -187.989, -44.0742, 0.44 ) }
    dend_6 { pt3dadd( -13.961, -189.024, -46.1743, 0.88 ) }
    dend_6 { pt3dadd( -13.9199, -189.518, -47.2037, 1.77 ) }
    dend_6 { pt3dadd( -13.9204, -189.547, -47.2632, 1.77 ) }
    dend_6 { pt3dadd( -13.9463, -189.73, -47.6119, 2.14 ) }
    dend_6 { pt3dadd( -14.0254, -190.098, -48.0799, 2.43 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 27/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -14.6173, -98.0643, -6.75743, 0.59 ) }
    dend_5 { pt3dadd( -13.2738, -98.8937, -5.88837, 0.59 ) }
    dend_5 { pt3dadd( -11.5765, -99.7179, -4.98003, 0.52 ) }
    dend_5 { pt3dadd( -10.5125, -100.126, -4.55553, 0.52 ) }
    dend_5 { pt3dadd( -8.97289, -100.477, -4.17071, 0.37 ) }
    dend_5 { pt3dadd( -8.68465, -100.519, -4.12351, 0.37 ) }
    dend_5 { pt3dadd( -7.4367, -100.631, -3.97089, 0.37 ) }
    dend_5 { pt3dadd( -6.38043, -100.619, -3.94254, 0.37 ) }
    dend_5 { pt3dadd( -5.02955, -100.465, -4.01259, 0.37 ) }
    dend_5 { pt3dadd( -2.94265, -100.112, -4.21757, 0.22 ) }
    dend_5 { pt3dadd( -2.3422, -100.005, -4.32336, 0.29 ) }
    dend_5 { pt3dadd( -1.20194, -99.7964, -4.54879, 0.37 ) }
    // Section: dend_3, id: dend_3, parent: dend_1 (entry count 39/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 16.6488, -58.6408, -31.4609, 0.37 ) }
    dend_3 { pt3dadd( 16.9913, -59.3382, -31.673, 0.37 ) }
    dend_3 { pt3dadd( 17.4299, -60.2894, -31.8792, 0.29 ) }
    dend_3 { pt3dadd( 17.8545, -61.2799, -32.0527, 1.25 ) }
    dend_3 { pt3dadd( 18.046, -61.7423, -32.1217, 1.69 ) }
    dend_3 { pt3dadd( 18.0723, -61.8074, -32.1303, 1.69 ) }
    dend_3 { pt3dadd( 18.5653, -63.0844, -32.2706, 0.29 ) }
    dend_3 { pt3dadd( 18.9054, -64.0154, -32.3219, 0.29 ) }
    dend_3 { pt3dadd( 19.2668, -65.0292, -32.3621, 1.77 ) }
    dend_3 { pt3dadd( 19.4504, -65.5767, -32.3686, 2.43 ) }
    dend_3 { pt3dadd( 19.5818, -65.9761, -32.3746, 2.43 ) }
    dend_3 { pt3dadd( 20.104, -67.6013, -32.4039, 0.22 ) }
    dend_3 { pt3dadd( 20.3487, -68.416, -32.4246, 0.22 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 52/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 16.6488, -58.6408, -31.4609, 1.77 ) }
    dend_2 { pt3dadd( 16.564, -59.7218, -34.297, 1.77 ) }
    dend_2 { pt3dadd( 16.5268, -60.9317, -37.242, 1.03 ) }
    dend_2 { pt3dadd( 16.5167, -63.0421, -41.9335, 2.14 ) }
    dend_2 { pt3dadd( 16.5026, -63.9389, -43.8211, 0.52 ) }
    dend_2 { pt3dadd( 16.4948, -64.3084, -44.5753, 1.92 ) }
    dend_2 { pt3dadd( 16.4887, -64.5364, -45.0267, 2.36 ) }
    dend_2 { pt3dadd( 16.4853, -66.5802, -48.6135, 0.29 ) }
    dend_2 { pt3dadd( 16.4649, -67.1032, -49.4545, 0.29 ) }
    dend_2 { pt3dadd( 16.3485, -68.2984, -51.1195, 0.29 ) }
    dend_2 { pt3dadd( 16.3433, -68.328, -51.162, 0.29 ) }
    dend_2 { pt3dadd( 16.2961, -68.5351, -51.466, 1.69 ) }
    dend_2 { pt3dadd( 16.2347, -68.8098, -51.8643, 1.69 ) }
    dend_2 { pt3dadd( 15.9237, -70.7066, -54.6633, 0.22 ) }
    dend_2 { pt3dadd( 15.8987, -70.9786, -55.0863, 0.22 ) }
    dend_2 { pt3dadd( 15.9, -71.0062, -55.1304, 0.22 ) }
    dend_2 { pt3dadd( 15.9407, -71.3365, -55.6656, 1.03 ) }
    dend_2 { pt3dadd( 16.2033, -72.589, -57.6786, 0.29 ) }
    dend_2 { pt3dadd( 16.5928, -73.86, -59.6295, 1.99 ) }
    dend_2 { pt3dadd( 16.6806, -74.073, -59.9364, 2.14 ) }
    dend_2 { pt3dadd( 17.3485, -75.554, -62.1047, 0.37 ) }
    dend_2 { pt3dadd( 17.4693, -75.8, -62.468, 0.37 ) }
    dend_2 { pt3dadd( 17.6519, -76.1301, -62.942, 0.88 ) }
    dend_2 { pt3dadd( 17.8954, -76.5079, -63.4256, 1.03 ) }
    dend_2 { pt3dadd( 18.5398, -77.484, -64.5048, 0.29 ) }
    dend_2 { pt3dadd( 18.5682, -77.5294, -64.5514, 0.29 ) }
    dend_2 { pt3dadd( 19.2271, -78.6964, -65.6781, 0.29 ) }
    dend_2 { pt3dadd( 19.5093, -79.2597, -66.2553, 1.99 ) }
    dend_2 { pt3dadd( 19.596, -79.4444, -66.4473, 1.99 ) }
    dend_2 { pt3dadd( 20.2088, -80.833, -67.8527, 0.29 ) }
    dend_2 { pt3dadd( 20.3408, -81.1822, -68.1815, 0.59 ) }
    dend_2 { pt3dadd( 20.8189, -82.5451, -69.4152, 0.44 ) }
    dend_2 { pt3dadd( 21.0806, -83.3526, -70.1247, 0.29 ) }
    dend_2 { pt3dadd( 21.1833, -83.6881, -70.4207, 1.11 ) }
    dend_2 { pt3dadd( 21.2745, -83.9667, -70.6626, 1.33 ) }
    dend_2 { pt3dadd( 21.9685, -85.8917, -72.4533, 0.22 ) }
    dend_2 { pt3dadd( 22.1094, -86.2363, -72.8112, 0.52 ) }
    dend_2 { pt3dadd( 22.5679, -87.214, -73.9416, 0.29 ) }
    dend_2 { pt3dadd( 22.707, -87.48, -74.2761, 0.88 ) }
    dend_2 { pt3dadd( 22.8741, -87.8062, -74.7725, 0.88 ) }
    dend_2 { pt3dadd( 23.5149, -89.0575, -76.8792, 0.29 ) }
    dend_2 { pt3dadd( 24.0223, -90.0133, -78.6157, 0.29 ) }
    dend_2 { pt3dadd( 24.4212, -90.8053, -80.096, 1.77 ) }
    dend_2 { pt3dadd( 24.5211, -91.0107, -80.4914, 1.77 ) }
    dend_2 { pt3dadd( 25.269, -92.6518, -83.6655, 0.52 ) }
    dend_2 { pt3dadd( 25.3899, -92.955, -84.2323, 0.44 ) }
    dend_2 { pt3dadd( 25.4991, -93.2394, -84.7305, 0.74 ) }
    dend_2 { pt3dadd( 25.5097, -93.266, -84.7741, 0.74 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_2 { pt3dadd( 25.918, -94.199, -86.1876, 0.29 ) }
    dend_2 { pt3dadd( 25.9368, -94.2339, -86.2366, 0.29 ) }
    dend_2 { pt3dadd( 26.3688, -94.8045, -86.8475, 1.18 ) }
    dend_2 { pt3dadd( 26.5434, -95.0124, -87.0603, 1.18 ) }
    dend_2 { pt3dadd( 27.326, -95.8984, -87.902, 0.22 ) }
    dend_2 { pt3dadd( 27.3561, -95.9308, -87.9287, 0.22 ) }
    dend_2 { pt3dadd( 28.0598, -96.6192, -88.4449, 0.81 ) }
    dend_2 { pt3dadd( 28.905, -97.3667, -89.0288, 0.22 ) }
    dend_2 { pt3dadd( 29.2672, -97.6502, -89.2563, 0.81 ) }
    dend_2 { pt3dadd( 29.3128, -97.6805, -89.2879, 0.81 ) }
    dend_2 { pt3dadd( 29.5428, -97.7982, -89.4726, 0.81 ) }
    dend_2 { pt3dadd( 30.4944, -98.1693, -90.5641, 0.22 ) }
    dend_2 { pt3dadd( 30.7379, -98.2444, -90.8899, 0.44 ) }
    dend_2 { pt3dadd( 30.774, -98.2538, -90.9419, 0.44 ) }
    dend_2 { pt3dadd( 31.8513, -98.5403, -92.4998, 1.33 ) }
    dend_2 { pt3dadd( 32.8184, -98.8103, -93.8895, 1.33 ) }
    dend_2 { pt3dadd( 34.7143, -99.3461, -96.6245, 0.29 ) }
    dend_2 { pt3dadd( 34.7606, -99.3603, -96.6918, 0.29 ) }
    dend_2 { pt3dadd( 35.0703, -99.4654, -97.148, 0.29 ) }
    dend_2 { pt3dadd( 35.4884, -99.62, -97.7146, 1.03 ) }
    dend_2 { pt3dadd( 35.6154, -99.6698, -97.867, 1.03 ) }
    dend_2 { pt3dadd( 35.6589, -99.6869, -97.9104, 1.03 ) }
    dend_2 { pt3dadd( 37.2129, -100.272, -99.1943, 0.22 ) }
    dend_2 { pt3dadd( 37.2604, -100.289, -99.2337, 0.22 ) }
    dend_2 { pt3dadd( 38.4092, -100.606, -100.228, 0.29 ) }
    dend_2 { pt3dadd( 39.745, -100.791, -101.487, 0.22 ) }
    dend_2 { pt3dadd( 40.0247, -100.806, -101.768, 0.66 ) }
    dend_2 { pt3dadd( 40.0692, -100.804, -101.814, 0.66 ) }
    dend_2 { pt3dadd( 40.3398, -100.768, -102.104, 0.66 ) }
    dend_2 { pt3dadd( 41.1406, -100.624, -103.011, 0.15 ) }
    dend_2 { pt3dadd( 42.6725, -100.205, -104.923, 0.96 ) }
    dend_2 { pt3dadd( 43.5214, -99.9254, -106.021, 1.4 ) }
    dend_2 { pt3dadd( 43.844, -99.8164, -106.458, 1.4 ) }
    dend_2 { pt3dadd( 43.9996, -99.7624, -106.675, 1.4 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 34/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -57.0972, 172.005, -29.3371, 0.44 ) }
    dend_19 { pt3dadd( -60.3626, 179.891, -32.1114, 0.44 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 36/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -57.0972, 172.005, -29.3371, 0.44 ) }
    dend_18 { pt3dadd( -60.7023, 181.987, -32.992, 0.44 ) }
    // Section: dend_14, id: dend_14, parent: dend_12 (entry count 38/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 13.0299, 83.595, -4.02604, 0.29 ) }
    dend_14 { pt3dadd( 13.9331, 85.8453, -4.11984, 0.29 ) }
    dend_14 { pt3dadd( 14.3389, 86.8564, -4.162, 0.29 ) }
    dend_14 { pt3dadd( 14.6788, 87.7032, -4.1973, 1.03 ) }
    dend_14 { pt3dadd( 14.7056, 87.7701, -4.20009, 1.03 ) }
    dend_14 { pt3dadd( 14.9015, 88.2582, -4.22043, 1.4 ) }
    // Section: dend_13, id: dend_13, parent: dend_12 (entry count 44/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 13.0299, 83.595, -4.02604, 0.88 ) }
    dend_13 { pt3dadd( 13.1013, 84.4009, -4.21748, 0.88 ) }
    dend_13 { pt3dadd( 13.2316, 85.0129, -4.36923, 0.29 ) }
    dend_13 { pt3dadd( 13.4937, 85.7091, -4.60283, 0.29 ) }
    dend_13 { pt3dadd( 13.69, 86.134, -4.75004, 0.44 ) }
    dend_13 { pt3dadd( 14.2371, 87.2268, -5.12345, 1.25 ) }
    dend_13 { pt3dadd( 14.4668, 87.6654, -5.26839, 1.99 ) }
    dend_13 { pt3dadd( 14.8533, 88.285, -5.47039, 2.21 ) }
    dend_13 { pt3dadd( 15.784, 89.6275, -5.90471, 0.22 ) }
    dend_13 { pt3dadd( 16.1797, 90.1865, -6.11018, 0.22 ) }
    dend_13 { pt3dadd( 16.3794, 90.4635, -6.21127, 0.96 ) }
    dend_13 { pt3dadd( 16.5919, 90.7748, -6.32399, 1.77 ) }
    dend_13 { pt3dadd( 16.8234, 91.164, -6.46976, 2.21 ) }
    dend_13 { pt3dadd( 17.0221, 91.5613, -6.64032, 2.21 ) }
    dend_13 { pt3dadd( 17.6656, 93.0761, -7.32988, 0.22 ) }
    dend_13 { pt3dadd( 17.919, 93.715, -7.64363, 0.22 ) }
    dend_13 { pt3dadd( 18.2072, 94.4631, -8.00574, 1.18 ) }
    dend_13 { pt3dadd( 18.3118, 94.7486, -8.14191, 1.33 ) }
    dend_13 { pt3dadd( 18.5906, 95.6023, -8.51706, 0.81 ) }
    dend_13 { pt3dadd( 18.7971, 96.2685, -8.77667, 0.22 ) }
    dend_13 { pt3dadd( 18.9278, 96.6995, -8.90188, 0.29 ) }
    dend_13 { pt3dadd( 19.1578, 97.4572, -9.09933, 0.22 ) }
    dend_13 { pt3dadd( 19.1955, 97.5543, -9.12505, 0.22 ) }
    dend_13 { pt3dadd( 19.5546, 98.2884, -9.35873, 0.22 ) }
    dend_13 { pt3dadd( 19.9771, 99.0487, -9.61793, 1.33 ) }
    dend_13 { pt3dadd( 20.1812, 99.3823, -9.77931, 1.69 ) }
    dend_13 { pt3dadd( 20.2882, 99.5674, -9.88151, 1.69 ) }
    dend_13 { pt3dadd( 20.8952, 100.613, -10.4938, 0.29 ) }
    dend_13 { pt3dadd( 21.2576, 101.205, -10.8284, 1.47 ) }
    dend_13 { pt3dadd( 21.3983, 101.419, -10.9449, 1.47 ) }
    dend_13 { pt3dadd( 21.836, 102.055, -11.2822, 0.66 ) }
    dend_13 { pt3dadd( 22.4071, 102.876, -11.6845, 0.29 ) }
    dend_13 { pt3dadd( 22.6793, 103.287, -11.8666, 0.29 ) }
    dend_13 { pt3dadd( 23.006, 103.812, -12.0499, 0.88 ) }
    dend_13 { pt3dadd( 23.2006, 104.113, -12.1592, 1.25 ) }
    dend_13 { pt3dadd( 23.7114, 104.889, -12.4688, 0.29 ) }
    dend_13 { pt3dadd( 24.0107, 105.356, -12.6634, 0.22 ) }
    dend_13 { pt3dadd( 24.2483, 105.775, -12.8844, 0.66 ) }
    dend_13 { pt3dadd( 24.3984, 106.129, -13.0868, 0.81 ) }
    dend_13 { pt3dadd( 24.5815, 106.789, -13.4521, 0.22 ) }
    dend_13 { pt3dadd( 24.6641, 107.201, -13.6608, 0.22 ) }
    dend_13 { pt3dadd( 24.7176, 107.588, -13.8683, 0.74 ) }
    dend_13 { pt3dadd( 24.7847, 108.183, -14.2761, 1.4 ) }
    dend_13 { pt3dadd( 24.8666, 109.02, -14.9115, 0.29 ) }
    dend_13 { pt3dadd( 24.9199, 109.595, -15.4261, 0.81 ) }
    dend_13 { pt3dadd( 24.9409, 109.775, -15.6239, 0.96 ) }
    dend_13 { pt3dadd( 25.0697, 110.57, -16.7863, 0.29 ) }
    dend_13 { pt3dadd( 25.1636, 111.172, -17.8095, 0.29 ) }
    dend_13 { pt3dadd( 25.1895, 111.391, -18.2065, 1.33 ) }
    dend_13 { pt3dadd( 25.2219, 111.882, -19.1822, 2.28 ) }
    dend_13 { pt3dadd( 25.2401, 112.458, -20.4045, 2.28 ) }
    dend_13 { pt3dadd( 25.2181, 113.471, -22.8034, 0.81 ) }
    dend_13 { pt3dadd( 25.2044, 113.592, -23.1096, 0.88 ) }
    dend_13 { pt3dadd( 25.1516, 113.829, -23.746, 0.29 ) }
    dend_13 { pt3dadd( 25.0419, 114.137, -24.6269, 0.37 ) }
    dend_13 { pt3dadd( 24.9838, 114.259, -24.9603, 0.37 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_13 { pt3dadd( 24.7161, 114.795, -26.2304, 0.37 ) }
    dend_13 { pt3dadd( 24.6135, 115.044, -26.7226, 0.37 ) }
    dend_13 { pt3dadd( 24.4312, 115.727, -27.8918, 1.55 ) }
    dend_13 { pt3dadd( 24.3802, 116.066, -28.3799, 1.92 ) }
    dend_13 { pt3dadd( 24.3469, 117.18, -29.564, 0.44 ) }
    dend_13 { pt3dadd( 24.3804, 117.716, -29.9844, 0.29 ) }
    dend_13 { pt3dadd( 24.4582, 118.33, -30.3238, 0.88 ) }
    dend_13 { pt3dadd( 24.5275, 118.661, -30.4709, 0.96 ) }
    dend_13 { pt3dadd( 24.6261, 119.019, -30.5859, 0.96 ) }
    dend_13 { pt3dadd( 25.013, 120.195, -30.8784, 0.37 ) }
    dend_13 { pt3dadd( 25.3728, 121.176, -31.0561, 0.29 ) }
    dend_13 { pt3dadd( 25.6282, 121.748, -31.2583, 0.29 ) }
    dend_13 { pt3dadd( 26.0397, 122.593, -31.6633, 1.33 ) }
    dend_13 { pt3dadd( 26.2351, 122.963, -31.8958, 2.14 ) }
    dend_13 { pt3dadd( 26.386, 123.238, -32.104, 2.36 ) }
    dend_13 { pt3dadd( 26.5027, 123.44, -32.3035, 2.36 ) }
    dend_13 { pt3dadd( 27.5569, 125.175, -34.3585, 0.29 ) }
    dend_13 { pt3dadd( 27.7904, 125.559, -34.8703, 0.88 ) }
    dend_13 { pt3dadd( 28.0249, 126.0, -35.479, 1.4 ) }
    dend_13 { pt3dadd( 28.1383, 126.252, -35.8277, 1.55 ) }
    dend_13 { pt3dadd( 28.4674, 127.127, -36.9919, 0.37 ) }
    dend_13 { pt3dadd( 28.5636, 127.447, -37.3786, 0.37 ) }
    dend_13 { pt3dadd( 28.702, 128.16, -38.1144, 1.18 ) }
    dend_13 { pt3dadd( 28.8023, 128.652, -38.6285, 1.47 ) }
    dend_13 { pt3dadd( 28.9871, 129.722, -39.6598, 0.29 ) }
    dend_13 { pt3dadd( 29.0212, 130.017, -39.9151, 0.44 ) }
    dend_13 { pt3dadd( 29.0446, 130.471, -40.2445, 0.29 ) }
    dend_13 { pt3dadd( 29.0569, 131.493, -40.9265, 1.77 ) }
    dend_13 { pt3dadd( 29.052, 132.059, -41.2524, 2.06 ) }
    dend_13 { pt3dadd( 29.0437, 132.599, -41.5078, 1.92 ) }
    dend_13 { pt3dadd( 28.9733, 133.797, -41.8989, 0.22 ) }
    dend_13 { pt3dadd( 28.9344, 134.364, -42.0381, 0.22 ) }
    dend_13 { pt3dadd( 28.929, 134.425, -42.0456, 0.22 ) }
    dend_13 { pt3dadd( 28.8912, 134.907, -42.0033, 0.22 ) }
    dend_13 { pt3dadd( 28.8474, 135.675, -41.8565, 0.96 ) }
    dend_13 { pt3dadd( 28.8496, 135.912, -41.7966, 1.33 ) }
    dend_13 { pt3dadd( 28.8628, 136.154, -41.7268, 1.33 ) }
    dend_13 { pt3dadd( 28.9112, 136.858, -41.5326, 0.44 ) }
    dend_13 { pt3dadd( 29.0367, 138.162, -41.2074, 0.22 ) }
    dend_13 { pt3dadd( 29.044, 138.222, -41.1936, 0.22 ) }
    dend_13 { pt3dadd( 29.1844, 139.188, -40.919, 0.22 ) }
    dend_13 { pt3dadd( 29.2613, 139.708, -40.7424, 1.03 ) }
    dend_13 { pt3dadd( 29.3124, 140.021, -40.6237, 1.62 ) }
    dend_13 { pt3dadd( 29.4063, 140.515, -40.4134, 1.62 ) }
    dend_13 { pt3dadd( 29.4294, 140.638, -40.3612, 1.62 ) }
    dend_13 { pt3dadd( 29.7484, 142.276, -39.6471, 0.22 ) }
    dend_13 { pt3dadd( 29.8169, 142.652, -39.4777, 0.66 ) }
    dend_13 { pt3dadd( 29.8845, 143.08, -39.293, 0.66 ) }
    dend_13 { pt3dadd( 29.9197, 143.432, -39.1677, 0.59 ) }
    dend_13 { pt3dadd( 29.9445, 144.078, -39.0049, 0.22 ) }
    dend_13 { pt3dadd( 29.9439, 144.368, -38.966, 0.66 ) }
    dend_13 { pt3dadd( 29.9181, 144.688, -38.9697, 0.88 ) }
    dend_13 { pt3dadd( 29.8545, 145.225, -38.9841, 0.44 ) }
    dend_13 { pt3dadd( 29.7162, 146.092, -39.0229, 0.22 ) }
    dend_13 { pt3dadd( 29.6071, 146.718, -39.0572, 0.81 ) }
    dend_13 { pt3dadd( 29.5337, 147.131, -39.0798, 1.18 ) }
    dend_13 { pt3dadd( 29.3267, 148.304, -39.1435, 0.22 ) }
    dend_13 { pt3dadd( 29.3197, 148.357, -39.1519, 0.22 ) }
    dend_13 { pt3dadd( 29.223, 149.252, -39.3669, 0.22 ) }
    dend_13 { pt3dadd( 29.1903, 149.81, -39.5319, 1.03 ) }
    dend_13 { pt3dadd( 29.1878, 150.17, -39.6495, 1.33 ) }
    dend_13 { pt3dadd( 29.2041, 150.531, -39.7768, 1.33 ) }
    dend_13 { pt3dadd( 29.4589, 152.528, -40.5007, 0.22 ) }
    dend_13 { pt3dadd( 29.4668, 152.579, -40.5199, 0.22 ) }
    dend_13 { pt3dadd( 29.7034, 153.697, -40.9795, 0.22 ) }
    dend_13 { pt3dadd( 29.7988, 154.081, -41.1441, 0.59 ) }
    dend_13 { pt3dadd( 29.8128, 154.13, -41.1643, 0.59 ) }
    dend_13 { pt3dadd( 30.0388, 154.803, -41.3971, 0.74 ) }
    // Section: dend_8, id: dend_8, parent: dend_6 (entry count 68/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -14.0254, -190.098, -48.0799, 0.37 ) }
    dend_8 { pt3dadd( -12.4789, -191.575, -47.7804, 0.37 ) }
    dend_8 { pt3dadd( -11.5047, -192.538, -47.5943, 0.29 ) }
    dend_8 { pt3dadd( -10.3227, -193.769, -47.3626, 0.29 ) }
    dend_8 { pt3dadd( -9.49645, -194.691, -47.195, 0.88 ) }
    dend_8 { pt3dadd( -9.22616, -195.014, -47.1528, 1.11 ) }
    dend_8 { pt3dadd( -9.16817, -195.088, -47.1456, 1.11 ) }
    dend_8 { pt3dadd( -8.89518, -195.532, -47.1358, 1.11 ) }
    dend_8 { pt3dadd( -8.39071, -196.556, -47.2371, 0.29 ) }
    dend_8 { pt3dadd( -8.08647, -197.31, -47.3837, 0.29 ) }
    dend_8 { pt3dadd( -7.76806, -198.204, -47.5858, 0.74 ) }
    dend_8 { pt3dadd( -7.63403, -198.576, -47.6922, 0.88 ) }
    dend_8 { pt3dadd( -7.41802, -199.175, -47.8819, 0.59 ) }
    dend_8 { pt3dadd( -6.95406, -200.458, -48.318, 0.29 ) }
    dend_8 { pt3dadd( -6.89534, -200.602, -48.3705, 0.29 ) }
    dend_8 { pt3dadd( -6.5423, -201.379, -48.6188, 0.29 ) }
    dend_8 { pt3dadd( -6.12259, -202.238, -48.8323, 1.11 ) }
    dend_8 { pt3dadd( -5.84291, -202.731, -48.9939, 1.4 ) }
    dend_8 { pt3dadd( -5.54501, -203.229, -49.154, 1.4 ) }
    dend_8 { pt3dadd( -4.56396, -204.783, -49.6058, 0.22 ) }
    dend_8 { pt3dadd( -3.99385, -205.674, -49.8823, 0.22 ) }
    dend_8 { pt3dadd( -3.5922, -206.294, -50.094, 0.81 ) }
    dend_8 { pt3dadd( -2.40837, -208.068, -50.6964, 0.81 ) }
    // Section: dend_7, id: dend_7, parent: dend_6 (entry count 91/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -14.0254, -190.098, -48.0799, 0.96 ) }
    dend_7 { pt3dadd( -12.4925, -191.215, -51.4856, 0.96 ) }
    dend_7 { pt3dadd( -10.2604, -192.942, -56.1595, 0.96 ) }
    dend_7 { pt3dadd( -9.15034, -193.83, -58.4084, 0.66 ) }
    dend_7 { pt3dadd( -8.42303, -194.449, -59.8313, 1.4 ) }
    dend_7 { pt3dadd( -8.22757, -194.622, -60.1983, 1.4 ) }
    dend_7 { pt3dadd( -6.57625, -196.123, -63.196, 0.44 ) }
    dend_7 { pt3dadd( -6.01511, -196.625, -64.0113, 0.37 ) }
    dend_7 { pt3dadd( -5.97028, -196.672, -64.0654, 0.37 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_7 { pt3dadd( -4.71946, -198.014, -65.4669, 0.29 ) }
    dend_7 { pt3dadd( -4.10078, -198.638, -66.0709, 1.47 ) }
    dend_7 { pt3dadd( -3.96472, -198.77, -66.1983, 1.77 ) }
    dend_7 { pt3dadd( -3.50174, -199.177, -66.6023, 1.99 ) }
    dend_7 { pt3dadd( -2.60371, -199.895, -67.4095, 1.99 ) }
    dend_7 { pt3dadd( -0.976328, -201.14, -68.842, 0.44 ) }
    dend_7 { pt3dadd( -0.0690512, -201.769, -69.6577, 0.81 ) }
    dend_7 { pt3dadd( 1.14805, -202.503, -70.8449, 0.52 ) }
    dend_7 { pt3dadd( 2.92823, -203.553, -72.6207, 0.44 ) }
    dend_7 { pt3dadd( 3.8624, -204.083, -73.5772, 1.11 ) }
    dend_7 { pt3dadd( 4.29682, -204.321, -74.03, 1.11 ) }
    dend_7 { pt3dadd( 6.68767, -205.523, -76.55, 1.4 ) }
    dend_7 { pt3dadd( 9.39483, -206.757, -79.5152, 1.55 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
    ModelViewParmSubset_2 = new SectionList()
    dend_9 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_15 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_10 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_4 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_1 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_17 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_11 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_6 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_2 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_13 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_7 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_9 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_0 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_16 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_3 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_12 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_14 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_5 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_19 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_18 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_8 OneSecGrp_SectionRef_22.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_19, dend_18, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_17 all.append()
    dend_17 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.418459  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.026008999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 9.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.025854  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.19695699  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-6  // units: S cm-2
        e_pas_nml2 = -60.2509  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.9899996E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.008343  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.026899999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.502333  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.653374  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 5.6999997E-5  // units: S cm-2
        e_pas_nml2 = -76.49812  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 7.84E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.30005398  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec basal {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.002256  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 1.38E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.005574  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 7.92E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_15 nseg = 3
    dend_10 nseg = 3
    dend_4 nseg = 3
    dend_1 nseg = 3
    dend_17 nseg = 7
    dend_11 nseg = 5
    dend_6 nseg = 5
    dend_2 nseg = 5
    dend_13 nseg = 5
    dend_7 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bAC217_L4_BTC_9f1127ad33_0_0


