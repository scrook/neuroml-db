// Cell: cIR216_L5_LBC_c5448109e7_0_0
/*
{
  "id" : "cIR216_L5_LBC_c5448109e7_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-4.47353, -9.82937, -0.0150783, 3.11345", "-4.06901, -8.79368, -0.0135938, 5.39642", "-3.66449, -7.75799, -0.0121094, 6.72082", "-3.25998, -6.72231, -0.0106249, 7.70122", "-2.85546, -5.68662, -0.00914047, 8.43968", "-2.45095, -4.65093, -0.00765602, 9.25919", "-2.04643, -3.61524, -0.00617157, 10.0787", "-1.64192, -2.57956, -0.00468712, 10.8982", "-1.2374, -1.54387, -0.00320267, 11.7151", "-0.832884, -0.508183, -0.00171822, 12.3073", "-0.428368, 0.527504, -2.33766E-4, 12.0741", "-0.023852, 1.56319, 0.00125068, 11.8342", "0.380664, 2.59888, 0.00273513, 11.5616", "0.78518, 3.63457, 0.00421958, 11.0624", "1.1897, 4.67025, 0.00570403, 10.5822", "1.59421, 5.70594, 0.00718848, 10.0942", "1.99873, 6.74163, 0.00867293, 9.27653", "2.40324, 7.77731, 0.0101574, 7.88308", "2.80776, 8.813, 0.0116418, 6.37032", "3.21227, 9.84869, 0.0131263, 4.97817", "3.61679, 10.8844, 0.0146107, 4.57234" ]
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "0.0120471, -8.12813, 1.51098, 1.08", "1.32524, -10.4927, 1.31159, 1.08", "2.35518, -12.3473, 1.1552, 1.08", "3.06408, -13.6237, 1.04756, 1.08" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "-4.41795, -8.88813, -0.0190242, 1.08", "-3.83355, -9.4798, -0.0272631, 1.08", "-0.219944, -12.7624, -0.0915691, 1.08", "1.30856, -14.2536, -0.118816, 1.08", "3.76528, -16.6718, -0.160231, 1.08", "7.98892, -21.0193, -0.228631, 1.08", "11.103, -24.3055, -0.27539, 1.08", "11.2698, -24.4998, -0.278, 1.08", "16.3507, -31.5127, -0.408279, 1.08", "17.8522, -33.9581, -0.504233, 1.08", "19.0728, -36.3761, -0.642325, 1.08", "20.3275, -40.2945, -0.911848, 1.08", "21.3486, -45.554, -1.29468, 1.08", "21.8379, -50.1762, -1.65629, 1.08", "21.7897, -51.9556, -1.80493, 1.08", "21.6878, -54.1967, -1.97208, 1.08", "21.4826, -59.7807, -2.34839, 1.08", "21.5438, -63.1293, -2.54007, 1.08", "21.8905, -66.0705, -2.80392, 1.08", "22.4884, -69.9391, -3.28794, 1.08", "23.4851, -75.1594, -4.04625, 1.08", "23.5899, -75.736, -4.14755, 1.08", "24.3651, -79.5244, -4.92504, 1.08", "25.6167, -84.3056, -5.95621, 1.08", "26.6242, -87.9985, -6.69883, 1.08", "28.4042, -93.7622, -7.94062, 1.08", "29.2573, -96.5881, -8.54712, 1.08", "29.6899, -98.1732, -8.86037, 1.08", "30.6491, -102.189, -9.61681, 1.08", "32.3287, -108.25, -10.5774, 1.08", "33.5391, -112.782, -11.3418, 0.81", "34.0108, -114.362, -11.6242, 0.81", "34.8682, -117.272, -12.2685, 0.81", "35.7353, -120.306, -12.9928, 0.81", "36.4354, -123.346, -13.719, 0.81", "37.5121, -128.377, -14.9059, 0.81", "39.5098, -137.593, -17.1305, 0.81", "40.6696, -141.87, -18.2351, 0.81", "41.9196, -145.916, -19.2478, 0.81", "43.3736, -150.216, -20.2305, 0.81", "43.4676, -150.458, -20.2876, 0.81", "45.642, -155.176, -21.4154, 0.81", "46.8922, -157.878, -21.9885, 0.81", "50.5393, -164.555, -23.1284, 0.81", "53.1356, -168.874, -23.8791, 0.81", "54.8622, -171.561, -24.3805, 0.81", "54.9971, -171.787, -24.421, 0.81", "56.4679, -174.685, -24.8646, 0.81", "59.5957, -181.624, -26.091, 0.81", "59.6126, -181.67, -26.099, 0.81", "60.0943, -184.158, -26.4505, 0.81", "60.3287, -185.918, -26.6313, 0.81", "60.8126, -190.119, -26.9999, 0.81", "60.9741, -191.318, -27.093, 0.81", "61.7868, -198.531, -27.6933, 0.81", "62.2695, -202.155, -28.1628, 0.81", "62.9169, -206.245, -28.8102, 0.81", "63.8601, -212.22, -30.213, 0.81", "64.4827, -215.825, -31.3073, 0.81", "65.1819, -219.733, -32.7781, 0.81", "66.0882, -224.636, -35.0083, 0.81", "66.0984, -224.687, -35.035, 0.81", "66.8478, -229.995, -38.1978, 0.81", "67.1198, -232.769, -40.1175, 0.81", "67.1803, -235.229, -41.8753, 0.27" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-6.04795, -7.85814, 1.45098, 1.08", "-6.14508, -10.03, 0.689807, 1.08", "-6.27945, -13.035, -0.363347, 1.35", "-6.49678, -17.895, -2.0666, 1.35", "-6.58092, -19.7767, -2.72604, 1.35", "-6.58786, -19.9318, -2.78041, 1.35" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-2.31794, 7.07186, 2.93098, 1.89", "-4.48985, 8.18468, 2.93098, 1.89", "-7.46916, 9.71118, 2.93098, 1.89" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-0.377952, 8.63187, 1.46098, 1.41", "-2.26591, 9.41536, 2.07111, 1.41", "-4.21034, 10.2223, 2.69949, 1.23", "-6.14836, 11.0266, 3.3258, 1.23" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "4.75205, 11.2519, -2.91902, 1.11", "4.84461, 13.0216, -3.01472, 1.11", "5.67825, 17.7608, -3.36803, 1.11", "7.00261, 22.3301, -3.72928, 1.11", "8.18342, 24.9169, -3.92009, 1.11", "10.6357, 29.4722, -4.47822, 1.11", "13.4782, 34.6754, -5.32626, 1.11", "15.1867, 37.4391, -5.85946, 1.11", "18.6672, 42.4203, -7.02929, 1.67", "23.932, 49.7704, -8.99501, 1.11", "26.1544, 52.8653, -9.84155, 1.11", "28.2221, 55.8487, -10.7037, 1.11", "30.3903, 59.2523, -11.6808, 1.11", "33.5459, 64.3368, -13.0093, 1.11", "36.3764, 68.9446, -14.3438, 1.11", "38.6307, 72.7317, -15.4433, 1.11", "41.3836, 77.1575, -16.6347, 1.11", "42.3972, 78.7762, -17.0655, 1.11", "46.2838, 85.0914, -18.812, 1.11", "48.9421, 89.417, -19.9606, 1.11", "49.6371, 90.5724, -20.2672, 1.11", "50.9669, 93.014, -20.8876, 1.11", "53.5939, 98.0309, -22.1901, 1.11", "56.5949, 103.929, -23.7298, 1.11", "58.5276, 108.006, -24.8141, 1.11", "60.6508, 112.174, -25.876, 1.11", "62.5866, 115.829, -26.8994, 1.11", "64.2625, 119.094, -27.9179, 1.06", "65.1898, 120.921, -28.6048, 0.53", "65.8964, 122.689, -29.3305, 0.35", "66.8276, 125.618, -30.7072, 0.35", "66.882, 125.837, -30.8208, 0.35", "67.5487, 130.158, -32.959, 0.35", "67.6896, 131.536, -33.6656, 0.35", "67.9099, 133.832, -34.9274, 0.35", "68.2375, 136.937, -36.6176, 0.35", "68.4931, 138.924, -37.7155, 0.35", "69.0021, 141.491, -39.183, 0.35", "69.8162, 144.288, -40.7968, 0.35", "70.2181, 145.616, -41.5194, 0.35", "70.7098, 147.236, -42.3766, 0.35", "71.3235, 149.524, -43.5161, 0.35", "71.7933, 151.428, -44.4276, 0.35", "72.1682, 152.844, -45.1182, 0.35", "72.3804, 153.812, -45.5116, 1.23", "72.4416, 154.122, -45.6575, 1.23", "72.7881, 156.028, -46.697, 0.18", "73.1283, 157.383, -47.5765, 0.18", "73.4917, 158.392, -48.2751, 0.18", "74.0421, 159.719, -49.2871, 1.23", "74.6392, 160.865, -50.1126, 0.18", "74.8686, 161.255, -50.3395, 0.18", "76.5409, 163.498, -51.3654, 0.18", "76.9807, 164.032, -51.5975, 0.88", "77.272, 164.351, -51.7329, 0.18", "78.9536, 166.071, -52.3821, 0.18", "80.5029, 167.687, -52.8159, 0.18", "82.8354, 170.067, -53.2824, 1.06", "83.084, 170.309, -53.3044, 1.06" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796,
    "numberInternalDivisions" : 9
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "3.61679, 10.8844, 0.0146107, 0.81", "9.07397, 24.8565, 0.0146107, 0.81", "14.5311, 38.8286, 0.0146107, 0.81" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "3.06408, -13.6237, 1.04756, 1.08", "8.10974, -13.3876, 0.44794, 1.08", "17.9013, -11.926, -0.198394, 1.08", "27.7841, -11.9035, -1.06835, 1.08", "37.4896, -12.6044, -3.00256, 1.08", "47.4079, -12.531, -3.2232, 1.08", "57.2039, -11.0676, -3.79334, 1.08", "66.7463, -8.35654, -3.65024, 1.08", "76.3428, -6.70614, -1.7505, 1.08", "85.3136, -3.45863, 0.971392, 1.08", "94.2579, 0.364057, 2.92385, 1.08", "103.259, 4.36885, 4.09564, 1.08", "112.012, 8.92122, 5.13515, 1.08", "121.587, 11.4425, 4.50559, 1.08", "130.641, 15.3802, 5.47957, 1.08", "139.249, 20.2904, 5.95368, 1.08", "147.384, 25.9553, 5.57225, 1.08", "156.417, 29.9953, 6.29496, 1.08", "165.831, 32.0919, 8.61793, 1.08", "175.619, 32.8852, 10.0304, 1.08", "185.033, 34.2168, 12.8662, 1.08", "194.872, 33.7319, 14.0402, 1.08" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "3.06408, -13.6237, 1.04756, 1.08", "5.35851, -18.3778, 0.945264, 1.08", "7.79864, -23.0829, 0.696074, 1.08", "10.8365, -28.0672, 0.239138, 1.08", "13.4909, -32.1025, -0.216873, 1.08", "17.4715, -38.1541, -0.900733, 0.81", "18.8859, -40.3044, -1.14372, 0.81", "21.1519, -43.5075, -1.59486, 0.81", "24.3182, -47.8081, -2.44978, 0.81", "24.3603, -47.8521, -2.46401, 0.81" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "67.1803, -235.229, -41.8753, 0.27", "74.919, -238.401, -43.0704, 0.27", "85.4049, -242.699, -44.6898, 0.27" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "67.1803, -235.229, -41.8753, 0.27", "67.373, -238.408, -44.8001, 0.27", "67.643, -242.783, -48.9647, 0.27", "67.8811, -247.016, -52.9457, 0.27", "68.067, -250.322, -56.054, 0.27", "68.3074, -254.597, -60.0739, 0.27", "68.7394, -262.279, -67.2973, 0.27", "68.7447, -262.448, -67.467, 0.27", "68.8298, -263.835, -68.8128, 0.27" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-6.58786, -19.9318, -2.78041, 1.08", "-8.01412, -21.7374, -2.49304, 1.08", "-9.92465, -24.1562, -2.1081, 1.08", "-11.9004, -26.6575, -1.71001, 1.08", "-14.8443, -30.3846, -1.11685, 1.08", "-16.3242, -32.258, -0.818696, 1.08", "-17.9814, -34.3561, -0.484792, 1.08" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "-6.58786, -19.9318, -2.78041, 0.27", "-8.19006, -23.8694, -3.15661, 0.27", "-8.64523, -27.1757, -3.65644, 0.54", "-8.65868, -27.9317, -3.74894, 1.08", "-8.65415, -28.1993, -3.7792, 1.08", "-8.64901, -32.2693, -4.25256, 1.08", "-8.67137, -34.1514, -4.46824, 1.08", "-8.66298, -40.3833, -5.18898, 1.08", "-8.6959, -46.1945, -5.98794, 1.08", "-8.69455, -46.4604, -6.03053, 1.08", "-8.49799, -51.3397, -6.96691, 1.08", "-8.24847, -53.9924, -7.59233, 1.08", "-8.1437, -55.9739, -8.0455, 1.08", "-8.16582, -57.8652, -8.44861, 1.08", "-8.00764, -60.4365, -9.04099, 1.08", "-7.70911, -63.4937, -9.69647, 1.08", "-7.5299, -65.6199, -10.0495, 1.08", "-7.2082, -72.6534, -11.0167, 1.08", "-7.21179, -74.0023, -11.2161, 1.08", "-7.20632, -79.8593, -12.2772, 1.08", "-7.21767, -80.4503, -12.3923, 1.08", "-7.36746, -86.9066, -13.7651, 1.08", "-7.41062, -90.8686, -14.695, 1.08", "-7.1712, -94.8987, -15.795, 1.08", "-7.1375, -101.011, -17.4584, 1.08", "-7.14272, -101.26, -17.5295, 1.08", "-7.15394, -102.315, -17.8448, 1.08", "-7.14983, -105.984, -19.001, 1.08", "-7.12162, -114.307, -21.5009, 1.08", "-7.24309, -120.8, -23.1337, 1.08", "-7.37584, -125.99, -24.2767, 1.08", "-7.42044, -129.856, -25.0283, 1.08", "-7.41914, -129.915, -25.0382, 1.08", "-7.19825, -134.712, -25.6847, 1.08", "-6.54165, -141.175, -26.3667, 1.08", "-5.79263, -146.415, -26.8168, 1.08", "-5.19959, -150.873, -27.078, 0.81", "-4.57932, -155.528, -27.3948, 0.81", "-4.16879, -158.866, -27.6636, 0.81", "-2.8654, -168.322, -28.8476, 0.81", "-2.05484, -173.622, -29.7328, 0.81", "-1.78913, -175.443, -30.0832, 0.81", "-1.03455, -180.867, -31.0765, 0.81", "-0.575264, -184.537, -31.6456, 0.81", "0.545104, -195.357, -32.899, 0.81", "0.654312, -198.414, -33.1715, 0.81", "0.656081, -198.683, -33.1924, 0.81", "0.453054, -204.628, -33.5564, 0.81", "0.0922672, -209.19, -33.6852, 0.81", "-0.667571, -214.304, -33.7128, 0.81", "-1.83595, -220.157, -33.517, 0.81", "-2.26242, -222.286, -33.4619, 0.81", "-3.13877, -227.033, -33.4106, 0.81", "-3.82435, -230.77, -33.4336, 0.81", "-4.82087, -235.839, -33.5074, 0.81", "-6.00796, -243.079, -33.6221, 0.81", "-6.84315, -248.67, -33.6596, 0.81", "-7.55123, -253.49, -33.7659, 0.81", "-8.48736, -259.791, -33.8999, 0.81", "-8.92067, -262.943, -33.9938, 0.81", "-9.34608, -266.523, -34.1706, 0.81", "-9.94375, -271.278, -34.5068, 0.81", "-10.134, -276.212, -34.9374, 0.81", "-10.0352, -278.044, -35.1239, 0.81", "-9.98695, -278.42, -35.1624, 1.08", "-9.93075, -278.796, -35.1876, 1.08", "-9.12109, -283.558, -35.5336, 0.54", "-7.71629, -290.559, -36.1546, 0.54", "-6.98585, -294.317, -36.5294, 0.54", "-6.28187, -298.207, -36.959, 0.54", "-5.90017, -300.767, -37.2088, 0.54", "-5.48262, -304.465, -37.4993, 0.54", "-5.31679, -306.866, -37.5878, 0.54", "-5.12184, -312.236, -37.5987, 0.54", "-5.08913, -314.791, -37.5496, 0.54", "-5.03118, -317.852, -37.4926, 0.54", "-5.13207, -319.938, -37.4213, 0.54", "-5.48152, -324.529, -37.2224, 0.54", "-5.48681, -324.598, -37.2189, 0.54", "-5.57608, -325.702, -37.1374, 0.54", "-5.78934, -329.458, -36.8916, 0.54", "-5.93931, -334.2, -36.6368, 0.54", "-6.20864, -340.902, -36.3277, 0.54", "-6.37363, -346.887, -36.1734, 0.54", "-6.44654, -350.208, -36.0858, 0.54", "-6.56801, -354.846, -36.099, 0.54", "-6.58593, -355.654, -36.126, 0.54", "-6.63175, -360.214, -36.4242, 0.54", "-6.98034, -365.621, -36.9544, 0.54", "-7.42489, -371.759, -37.7922, 0.54", "-7.83746, -376.331, -38.5364, 0.54", "-8.31976, -380.673, -39.2841, 0.54", "-8.40576, -381.463, -39.4314, 0.54", "-8.93432, -386.328, -40.555, 0.54" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 19
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-7.46916, 9.71118, 2.93098, 0.81", "-8.15555, 11.6786, 3.30389, 0.81", "-9.70418, 16.0241, 4.11308, 1.08", "-13.0376, 22.0394, 5.06711, 1.08", "-13.9051, 23.3697, 5.23971, 1.08", "-16.4101, 27.5001, 5.68165, 1.08", "-16.4458, 27.5602, 5.68691, 1.08", "-19.1121, 31.7003, 5.89309, 1.08", "-23.1087, 38.0323, 6.0429, 1.08", "-24.7345, 41.0335, 5.96911, 1.08", "-28.1092, 47.795, 5.55656, 1.08", "-31.2844, 54.47, 4.89198, 1.08", "-33.0885, 58.2424, 4.44494, 1.08", "-35.6342, 63.6446, 3.71027, 1.08", "-37.5748, 67.7882, 3.07321, 1.08", "-37.8062, 68.1632, 3.00267, 1.08", "-38.7147, 69.215, 2.75775, 1.08", "-43.6394, 74.0527, 1.63069, 1.08", "-47.577, 77.4186, 0.87001, 1.08", "-51.6101, 80.295, 0.189835, 1.08", "-55.2339, 82.7099, -0.317727, 1.08", "-57.4556, 84.1694, -0.638391, 1.08", "-59.4229, 85.7394, -0.918481, 1.08", "-62.6345, 88.7585, -1.3316, 1.08", "-65.2738, 91.7411, -1.59713, 1.08", "-65.4661, 91.9755, -1.61699, 1.08", "-68.9502, 96.7532, -1.96927, 1.08", "-73.7893, 104.145, -2.67461, 1.08", "-77.7907, 110.441, -3.33369, 1.08", "-81.3435, 116.337, -4.1043, 1.08", "-84.9705, 122.895, -4.96501, 1.08", "-88.79, 130.271, -5.89538, 1.08", "-92.165, 137.557, -6.86449, 1.08", "-94.8478, 143.466, -7.80062, 1.08", "-96.2337, 146.988, -8.36267, 1.08", "-98.7412, 153.26, -9.30553, 1.08", "-101.088, 159.901, -10.026, 1.08", "-103.398, 165.817, -10.4835, 0.81", "-105.319, 169.945, -10.5969, 0.81", "-107.822, 174.932, -10.61, 0.81", "-110.02, 178.577, -10.5276, 0.81", "-111.957, 181.34, -10.4869, 0.54", "-116.519, 187.201, -10.2374, 0.54", "-121.376, 192.868, -9.72827, 1.08", "-122.231, 193.842, -9.6102, 1.08", "-124.996, 196.843, -9.32014, 1.08", "-131.117, 203.782, -9.01645, 1.08" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-7.46916, 9.71118, 2.93098, 1.08", "-11.0954, 4.84374, -2.5074, 1.08", "-13.2837, 1.93123, -5.64854, 0.81", "-16.0202, -2.18872, -10.214, 1.08", "-17.488, -4.56126, -12.8406, 1.08", "-18.9833, -6.97833, -15.5165, 1.08", "-21.1497, -10.4802, -19.3933, 1.08", "-22.1877, -12.5199, -21.367, 1.08", "-23.755, -16.4717, -25.481, 0.54", "-23.9528, -16.9576, -26.0648, 0.54" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-6.14836, 11.0266, 3.3258, 0.53", "-7.26556, 11.0591, 3.45239, 0.53", "-9.77305, 11.1322, 3.73651, 0.53", "-10.1042, 11.1418, 3.77403, 0.53", "-11.6173, 11.1859, 3.94548, 0.53", "-13.4435, 11.2391, 4.1524, 0.53", "-15.758, 11.3066, 4.41466, 0.53", "-25.2212, 12.379, 4.17601, 0.53", "-34.2451, 15.1278, 5.50792, 0.53", "-43.0231, 18.5841, 6.83475, 0.53", "-50.6267, 23.5982, 9.62822, 0.53", "-58.8556, 27.8339, 11.8877, 0.53", "-66.8162, 31.7711, 15.3353, 0.53", "-75.1255, 34.2664, 19.2708, 0.53", "-83.6341, 36.8527, 22.6876, 0.53", "-92.5522, 38.5523, 25.5751, 0.53", "-101.859, 38.6703, 27.6094, 0.53", "-110.796, 40.312, 30.4694, 0.53", "-119.74, 42.1962, 33.1569, 0.53", "-128.731, 44.6537, 35.1254, 0.53", "-137.969, 45.2821, 37.3674, 0.53", "-147.375, 45.073, 38.8693, 0.53", "-156.629, 46.5009, 40.6246, 0.53", "-165.654, 48.967, 42.4198, 0.53", "-174.332, 52.2604, 44.5677, 0.53", "-182.738, 55.2493, 47.9091, 0.53", "-191.211, 57.2928, 51.7552, 0.53", "-198.64, 58.9921, 57.4711, 0.53", "-205.816, 58.7705, 63.7337, 0.53", "-212.565, 57.2613, 70.2856, 0.53" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-6.14836, 11.0266, 3.3258, 0.53", "-6.07719, 12.6697, 3.6301, 0.53", "-6.0656, 12.9372, 3.67963, 0.53", "-5.95714, 15.4408, 4.1433, 0.53", "-6.90915, 22.3459, 4.76023, 0.53", "-7.37086, 29.3261, 4.93566, 0.53", "-8.6753, 36.1517, 5.75736, 0.53", "-9.36964, 42.8313, 7.72421, 0.53", "-10.0833, 49.756, 8.43494, 0.53", "-10.5466, 56.73, 8.77473, 0.53", "-10.1885, 63.6245, 7.63245, 0.53", "-9.77075, 70.3652, 5.80083, 0.53", "-9.46483, 76.9531, 3.4612, 0.53", "-10.1514, 83.1047, 0.197377, 0.53", "-10.265, 89.4998, -2.64098, 0.53", "-11.2008, 96.0309, -4.97263, 0.53", "-12.572, 102.271, -7.82716, 0.53", "-13.4599, 108.34, -11.1944, 0.53", "-15.5925, 114.526, -13.6746, 0.53", "-19.1, 119.904, -16.458, 0.53", "-22.2119, 125.278, -19.6831, 0.53", "-24.7638, 130.442, -23.657, 0.53", "-26.1616, 135.725, -28.0267, 0.53", "-28.4747, 141.457, -31.3076, 0.53" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "83.084, 170.309, -53.3044, 0.18", "83.7407, 170.727, -53.2266, 0.18", "85.6901, 172.029, -52.9454, 0.18", "89.1538, 174.586, -52.4084, 0.53", "93.1892, 177.55, -51.9753, 0.53", "96.6214, 180.203, -51.7112, 0.35", "99.8947, 182.693, -51.6941, 0.35", "100.344, 183.045, -51.7221, 0.35", "102.967, 185.23, -52.1945, 0.35", "106.389, 188.043, -53.266, 0.35", "109.115, 189.789, -54.9132, 0.35", "112.246, 191.283, -57.3687, 0.35", "112.433, 191.361, -57.5465, 0.35", "114.367, 192.094, -59.8212, 0.18", "116.714, 192.809, -62.8368, 0.18", "121.043, 193.978, -68.9798, 0.18", "121.118, 193.993, -69.0904, 0.18", "123.115, 194.47, -72.018, 0.53", "126.497, 195.236, -77.0215, 0.53" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "83.084, 170.309, -53.3044, 0.18", "83.1354, 171.132, -53.4803, 0.18", "83.4278, 175.824, -54.4832, 0.18" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "14.5311, 38.8286, 0.0146107, 0.54", "19.9883, 52.8007, 0.0146107, 0.54", "25.4455, 66.7728, 0.0146107, 0.54" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "194.872, 33.7319, 14.0402, 0.18", "206.165, 37.6019, 10.5307, 0.18", "217.063, 43.2467, 8.47977, 0.18", "227.906, 49.3241, 9.03701, 0.18", "238.076, 55.9469, 11.7812, 0.18", "248.673, 60.9051, 16.0182, 0.18" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "194.872, 33.7319, 14.0402, 0.18", "206.243, 36.0724, 17.4599, 0.18", "217.137, 39.821, 21.163, 0.18", "227.02, 42.3645, 27.6686, 0.18", "236.764, 42.7622, 34.8349, 0.18", "246.181, 45.2968, 42.0012, 0.18", "256.848, 48.2107, 46.9191, 0.18", "266.353, 52.6493, 52.9533, 0.18" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-17.9814, -34.3561, -0.484792, 1.08", "-20.4709, -35.6759, 1.07802, 1.08", "-22.4581, -36.7777, 2.23316, 0.81", "-24.5763, -38.0373, 3.46927, 0.81", "-26.5646, -39.2196, 4.62955, 0.81", "-28.8822, -40.5978, 5.982, 0.81", "-31.7124, -42.2808, 7.63364, 0.81", "-32.8156, -42.971, 8.20196, 0.81", "-34.6326, -43.9855, 9.01912, 0.81", "-40.289, -48.9771, 12.267, 0.81", "-45.6743, -54.0182, 15.8788, 0.81", "-51.0224, -57.7192, 20.8947, 0.81", "-55.4676, -62.3883, 25.9839, 0.81", "-59.6069, -67.2789, 31.1227, 0.81", "-64.0766, -73.1599, 34.7137, 0.81", "-66.9825, -80.0147, 38.1816, 0.81", "-69.2739, -87.0305, 41.7855, 0.81", "-72.2527, -93.6888, 45.5606, 0.81", "-75.5522, -100.12, 49.4617, 0.81", "-78.881, -106.196, 53.8731, 0.81", "-83.7072, -110.767, 58.6973, 0.81", "-88.6384, -114.314, 64.2258, 0.81", "-93.8577, -118.739, 68.7677, 0.81", "-99.3148, -121.345, 74.3258, 0.81", "-105.352, -123.723, 79.3613, 0.81", "-111.422, -125.578, 84.5743, 0.81", "-116.947, -125.992, 90.6376, 0.81" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-17.9814, -34.3561, -0.484792, 0.81", "-20.6928, -39.2841, -1.11802, 0.81", "-23.1286, -43.6438, -1.56946, 1.08", "-24.4627, -45.7972, -1.74731, 1.08", "-26.2398, -48.8715, -2.17583, 1.08", "-27.1409, -50.5556, -2.43824, 1.08", "-29.9208, -55.6812, -3.19824, 1.08", "-30.0568, -55.9193, -3.22393, 1.08", "-31.9577, -59.0368, -3.69534, 0.81", "-34.9558, -64.2301, -4.58821, 0.54", "-36.7953, -67.9105, -5.25991, 1.08", "-39.5395, -74.4594, -6.41784, 1.08", "-40.6576, -77.9666, -7.0325, 1.08", "-41.2484, -80.8828, -7.54829, 0.81", "-41.4757, -83.816, -7.96114, 0.81", "-41.4138, -86.938, -8.20749, 1.08", "-40.7191, -92.3719, -8.64017, 1.08", "-39.9167, -96.136, -8.90546, 0.81", "-38.7411, -102.416, -9.22396, 0.54", "-38.2731, -105.931, -9.28229, 0.54", "-38.0203, -109.146, -9.31269, 0.54", "-37.9675, -112.819, -9.31022, 0.54", "-38.1199, -115.583, -9.27151, 1.08", "-38.9327, -120.98, -9.13409, 1.08", "-41.4923, -131.554, -8.85232, 1.08", "-41.5701, -131.818, -8.85119, 1.08", "-43.1266, -136.479, -8.82566, 1.08", "-44.9657, -141.25, -8.70157, 1.08", "-46.738, -145.592, -8.59864, 1.08", "-47.4911, -147.088, -8.56732, 0.81", "-47.6458, -147.316, -8.56295, 0.81", "-48.474, -148.746, -8.58221, 0.81", "-50.0081, -151.884, -8.78721, 0.81", "-51.846, -156.195, -9.19817, 0.81", "-54.1704, -161.867, -9.80435, 0.81", "-55.3898, -164.962, -10.182, 0.81", "-57.9718, -171.687, -11.0303, 0.81", "-59.1137, -174.844, -11.4608, 1.08", "-60.5093, -179.088, -12.0675, 1.08", "-61.4814, -182.228, -12.4499, 1.08", "-62.3004, -185.281, -12.6863, 0.27", "-63.6612, -189.746, -12.7843, 0.27", "-64.3194, -191.607, -12.6604, 0.27", "-65.3313, -194.491, -12.3248, 0.54", "-66.1746, -197.424, -11.9632, 0.54", "-67.2807, -201.944, -11.4416, 0.54", "-67.4224, -202.473, -11.3811, 0.54", "-68.1303, -205.779, -11.0434, 0.54", "-68.9795, -210.767, -10.8315, 0.54", "-69.7194, -216.277, -10.872, 0.54", "-70.6595, -223.154, -11.2971, 0.54", "-71.104, -226.445, -11.6123, 0.54", "-71.744, -231.052, -12.1525, 0.54", "-72.5533, -236.688, -12.9196, 0.54", "-73.4332, -242.225, -13.7589, 0.54", "-74.9441, -249.641, -15.0117, 0.54", "-75.1989, -250.861, -15.2295, 0.54", "-76.5054, -256.431, -16.183, 0.54", "-77.398, -259.822, -16.7227, 0.54", "-78.3765, -263.633, -17.2273, 0.54", "-79.5066, -268.667, -17.9181, 0.54", "-80.3658, -272.917, -18.4778, 0.54", "-81.3804, -277.886, -19.1312, 0.54", "-82.3794, -282.408, -19.8507, 0.54", "-82.3889, -282.458, -19.8594, 0.54", "-82.7542, -285.459, -20.4182, 0.54" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-131.117, 203.782, -9.01645, 0.81", "-133.102, 206.651, -8.55461, 0.81", "-134.88, 208.809, -8.07243, 0.81", "-136.874, 211.094, -7.42545, 0.81", "-139.334, 213.492, -6.47078, 0.81", "-141.626, 215.863, -5.36094, 0.81", "-141.661, 215.903, -5.34126, 0.81", "-144.077, 218.814, -3.80484, 0.81", "-146.222, 221.306, -2.27527, 0.81", "-148.526, 223.802, -0.462559, 0.81", "-151.66, 227.198, 2.26774, 0.81", "-154.131, 229.808, 4.46138, 0.81", "-158.797, 236.629, 8.74944, 0.81" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "-131.117, 203.782, -9.01645, 0.27", "-132.482, 206.417, -7.78852, 0.27", "-134.419, 210.157, -6.04577, 0.27", "-135.427, 212.104, -5.13834, 0.27" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-23.9528, -16.9576, -26.0648, 0.54", "-25.8746, -20.2023, -25.9415, 0.54", "-27.8307, -23.1516, -25.8473, 0.54", "-29.8414, -25.8835, -25.8502, 0.54", "-33.9056, -30.6944, -26.1286, 0.54", "-37.9729, -35.1661, -26.6898, 0.54", "-43.2841, -40.7931, -27.8189, 0.54", "-43.4784, -40.9908, -27.8723, 0.54", "-46.9238, -44.3593, -28.9269, 0.54", "-52.627, -49.7629, -30.7592, 0.54", "-56.6339, -53.1698, -32.0943, 0.54", "-60.3278, -56.4098, -33.6713, 0.54", "-62.8972, -58.8182, -35.0288, 0.54" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-23.9528, -16.9576, -26.0648, 0.54", "-27.5629, -18.3305, -30.8361, 0.54", "-30.4454, -19.2118, -34.1051, 0.81", "-32.5199, -19.8101, -36.165, 0.81", "-40.1884, -22.1013, -43.157, 0.81", "-44.6889, -23.3838, -46.8612, 0.81", "-48.7486, -24.6111, -50.0705, 0.81", "-54.6685, -26.2643, -54.3098, 0.81", "-58.4319, -27.3287, -56.7124, 0.81", "-62.8875, -28.6811, -59.356, 0.81", "-68.488, -30.4795, -62.391, 0.81", "-76.1068, -33.1614, -66.557, 0.81", "-76.1485, -33.1767, -66.5795, 0.81", "-83.5294, -35.9547, -70.6506, 0.81", "-83.7141, -36.023, -70.7581, 0.81", "-91.9925, -39.014, -75.5663, 0.81" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "266.353, 52.6493, 52.9533, 0.27", "272.933, 54.1749, 56.5417, 0.27", "279.462, 55.515, 60.2914, 0.27" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "266.353, 52.6493, 52.9533, 0.27", "276.99, 55.856, 58.6837, 0.27", "288.032, 56.8942, 64.4507, 0.27" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-82.7542, -285.459, -20.4182, 0.54", "-83.3657, -292.67, -21.3302, 0.54", "-84.0903, -300.582, -22.3634, 0.54", "-84.1204, -301.015, -22.4153, 0.54", "-84.8462, -309.271, -22.9946, 0.54", "-85.439, -314.55, -23.1767, 0.54", "-85.4805, -314.856, -23.1744, 0.54", "-87.2182, -324.86, -22.6054, 0.54", "-88.5583, -332.168, -21.9078, 0.54", "-90.0364, -339.889, -21.0329, 0.54", "-92.1511, -349.795, -19.3956, 0.54", "-93.8662, -356.506, -17.995, 0.54", "-95.8504, -363.212, -16.3652, 0.54", "-97.6879, -368.289, -14.8585, 0.54", "-100.429, -374.425, -12.7552, 0.54", "-103.717, -380.485, -10.4697, 0.54", "-105.977, -383.548, -9.06948, 0.54", "-108.017, -385.631, -8.03715, 0.54", "-109.636, -386.877, -7.3529, 0.54", "-112.989, -388.951, -6.18699, 0.54", "-116.531, -390.823, -5.16603, 0.54", "-119.814, -392.624, -4.37641, 0.54", "-122.51, -394.344, -3.65023, 0.54", "-126.012, -396.777, -2.60647, 0.54", "-127.905, -398.29, -2.08948, 0.54", "-129.705, -399.936, -1.66683, 0.54", "-133.636, -404.05, -0.610008, 0.54", "-137.036, -408.11, 0.500902, 0.54", "-140.242, -412.586, 1.86766, 0.54", "-142.894, -416.947, 3.22621, 0.54", "-145.526, -422.285, 4.85804, 0.54", "-147.412, -427.228, 6.37913, 0.54", "-148.582, -431.066, 7.55262, 0.54", "-149.586, -436.118, 9.29008, 0.54", "-149.649, -438.584, 10.2557, 0.54", "-148.819, -443.414, 12.8934, 0.54", "-148.619, -443.734, 13.098, 0.54" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-82.7542, -285.459, -20.4182, 0.54", "-83.7992, -289.926, -16.6885, 0.54", "-84.4211, -292.584, -14.4694, 0.54" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_23", "dend_20", "dend_13", "dend_6", "dend_3", "dend_0", "dend_25", "dend_24", "dend_22", "dend_21", "dend_15", "dend_14", "dend_10", "dend_7", "dend_5", "dend_4", "dend_2", "dend_1", "dend_29", "dend_26", "dend_19", "dend_16", "dend_12", "dend_11", "dend_9", "dend_8", "dend_28", "dend_27", "dend_18", "dend_17" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_23", "dend_20", "dend_13", "dend_6", "dend_3", "dend_0", "dend_25", "dend_24", "dend_22", "dend_21", "dend_15", "dend_14", "dend_10", "dend_7", "dend_5", "dend_4", "dend_2", "dend_1", "dend_29", "dend_26", "dend_19", "dend_16", "dend_12", "dend_11", "dend_9", "dend_8", "dend_28", "dend_27", "dend_18", "dend_17" ]
  }, {
    "name" : "ModelViewParmSubset_5",
    "groups" : [ ],
    "sections" : [ "dend_23", "dend_20", "dend_13", "dend_6", "dend_3", "dend_0", "axon_0", "dend_25", "dend_24", "dend_22", "dend_21", "dend_15", "dend_14", "dend_10", "dend_7", "dend_5", "dend_4", "dend_2", "dend_1", "axon_1", "dend_29", "dend_26", "dend_19", "dend_16", "dend_12", "dend_11", "dend_9", "dend_8", "dend_28", "dend_27", "dend_18", "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_23", "dend_23", "dend_23", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_6", "dend_6", "dend_3", "dend_3", "dend_3", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_22", "dend_22", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "axon_1", "axon_1", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_11", "dend_11", "dend_11", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_28", "dend_28", "dend_27", "dend_27", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_17", "dend_17" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "3.25478E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "3.25478E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.993125",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.005611",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.068459995",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.517764",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "6.3E-5",
    "erev" : "-64.6017"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "3.45E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.077616",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "7.43567E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.002099",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "1.13999995E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.26087198",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "2.0E-5",
    "erev" : "-69.78141"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.395881",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009986",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "5.0100003E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.009728",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "2.7999999E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cIR_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cIR_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cIR216_L5_LBC_c5448109e7_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_23, id: dend_23, parent: soma_0
create dend_23
public dend_23
// Section: dend_20, id: dend_20, parent: soma_0
create dend_20
public dend_20
// Section: dend_13, id: dend_13, parent: soma_0
create dend_13
public dend_13
// Section: dend_6, id: dend_6, parent: soma_0
create dend_6
public dend_6
// Section: dend_3, id: dend_3, parent: soma_0
create dend_3
public dend_3
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_25, id: dend_25, parent: dend_23
create dend_25
public dend_25
// Section: dend_24, id: dend_24, parent: dend_23
create dend_24
public dend_24
// Section: dend_22, id: dend_22, parent: dend_20
create dend_22
public dend_22
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_15, id: dend_15, parent: dend_13
create dend_15
public dend_15
// Section: dend_14, id: dend_14, parent: dend_13
create dend_14
public dend_14
// Section: dend_10, id: dend_10, parent: dend_6
create dend_10
public dend_10
// Section: dend_7, id: dend_7, parent: dend_6
create dend_7
public dend_7
// Section: dend_5, id: dend_5, parent: dend_3
create dend_5
public dend_5
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_29, id: dend_29, parent: dend_25
create dend_29
public dend_29
// Section: dend_26, id: dend_26, parent: dend_25
create dend_26
public dend_26
// Section: dend_19, id: dend_19, parent: dend_15
create dend_19
public dend_19
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_12, id: dend_12, parent: dend_10
create dend_12
public dend_12
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_9, id: dend_9, parent: dend_7
create dend_9
public dend_9
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_28, id: dend_28, parent: dend_26
create dend_28
public dend_28
// Section: dend_27, id: dend_27, parent: dend_26
create dend_27
public dend_27
// Section: dend_18, id: dend_18, parent: dend_16
create dend_18
public dend_18
// Section: dend_17, id: dend_17, parent: dend_16
create dend_17
public dend_17

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
objref ModelViewParmSubset_4
// Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, axon_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, axon_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
objref ModelViewParmSubset_5
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_31
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_23, dend_23, dend_23, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_13, dend_13, dend_13, dend_13, dend_13, dend_6, dend_6, dend_3, dend_3, dend_3, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, axon_1, axon_1, dend_29, dend_29, dend_29, dend_29, dend_29, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_28, dend_28, dend_27, dend_27, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cIR_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cIR_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_23(0), soma_0(0.49999957196365796)
    connect dend_20(0), soma_0(0.49999957196365796)
    connect dend_13(0), soma_0(0.49999957196365796)
    connect dend_6(0), soma_0(0.49999957196365796)
    connect dend_3(0), soma_0(0.49999957196365796)
    connect dend_0(0), soma_0(0.49999957196365796)
    connect axon_0(0), soma_0(1.0)
    connect dend_25(0), dend_23(1.0)
    connect dend_24(0), dend_23(1.0)
    connect dend_22(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_15(0), dend_13(1.0)
    connect dend_14(0), dend_13(1.0)
    connect dend_10(0), dend_6(1.0)
    connect dend_7(0), dend_6(1.0)
    connect dend_5(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_29(0), dend_25(1.0)
    connect dend_26(0), dend_25(1.0)
    connect dend_19(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_12(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_9(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_28(0), dend_26(1.0)
    connect dend_27(0), dend_26(1.0)
    connect dend_18(0), dend_16(1.0)
    connect dend_17(0), dend_16(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -4.47353, -9.82937, -0.0150783, 3.11345 ) }
    soma_0 { pt3dadd( -4.06901, -8.79368, -0.0135938, 5.39642 ) }
    soma_0 { pt3dadd( -3.66449, -7.75799, -0.0121094, 6.72082 ) }
    soma_0 { pt3dadd( -3.25998, -6.72231, -0.0106249, 7.70122 ) }
    soma_0 { pt3dadd( -2.85546, -5.68662, -0.00914047, 8.43968 ) }
    soma_0 { pt3dadd( -2.45095, -4.65093, -0.00765602, 9.25919 ) }
    soma_0 { pt3dadd( -2.04643, -3.61524, -0.00617157, 10.0787 ) }
    soma_0 { pt3dadd( -1.64192, -2.57956, -0.00468712, 10.8982 ) }
    soma_0 { pt3dadd( -1.2374, -1.54387, -0.00320267, 11.7151 ) }
    soma_0 { pt3dadd( -0.832884, -0.508183, -0.00171822, 12.3073 ) }
    soma_0 { pt3dadd( -0.428368, 0.527504, -2.33766E-4, 12.0741 ) }
    soma_0 { pt3dadd( -0.023852, 1.56319, 0.00125068, 11.8342 ) }
    soma_0 { pt3dadd( 0.380664, 2.59888, 0.00273513, 11.5616 ) }
    soma_0 { pt3dadd( 0.78518, 3.63457, 0.00421958, 11.0624 ) }
    soma_0 { pt3dadd( 1.1897, 4.67025, 0.00570403, 10.5822 ) }
    soma_0 { pt3dadd( 1.59421, 5.70594, 0.00718848, 10.0942 ) }
    soma_0 { pt3dadd( 1.99873, 6.74163, 0.00867293, 9.27653 ) }
    soma_0 { pt3dadd( 2.40324, 7.77731, 0.0101574, 7.88308 ) }
    soma_0 { pt3dadd( 2.80776, 8.813, 0.0116418, 6.37032 ) }
    soma_0 { pt3dadd( 3.21227, 9.84869, 0.0131263, 4.97817 ) }
    soma_0 { pt3dadd( 3.61679, 10.8844, 0.0146107, 4.57234 ) }
    // Section: dend_23, id: dend_23, parent: soma_0 (entry count 21/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( 0.0120471, -8.12813, 1.51098, 1.08 ) }
    dend_23 { pt3dadd( 1.32524, -10.4927, 1.31159, 1.08 ) }
    dend_23 { pt3dadd( 2.35518, -12.3473, 1.1552, 1.08 ) }
    dend_23 { pt3dadd( 3.06408, -13.6237, 1.04756, 1.08 ) }
    // Section: dend_20, id: dend_20, parent: soma_0 (entry count 25/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( -4.41795, -8.88813, -0.0190242, 1.08 ) }
    dend_20 { pt3dadd( -3.83355, -9.4798, -0.0272631, 1.08 ) }
    dend_20 { pt3dadd( -0.219944, -12.7624, -0.0915691, 1.08 ) }
    dend_20 { pt3dadd( 1.30856, -14.2536, -0.118816, 1.08 ) }
    dend_20 { pt3dadd( 3.76528, -16.6718, -0.160231, 1.08 ) }
    dend_20 { pt3dadd( 7.98892, -21.0193, -0.228631, 1.08 ) }
    dend_20 { pt3dadd( 11.103, -24.3055, -0.27539, 1.08 ) }
    dend_20 { pt3dadd( 11.2698, -24.4998, -0.278, 1.08 ) }
    dend_20 { pt3dadd( 16.3507, -31.5127, -0.408279, 1.08 ) }
    dend_20 { pt3dadd( 17.8522, -33.9581, -0.504233, 1.08 ) }
    dend_20 { pt3dadd( 19.0728, -36.3761, -0.642325, 1.08 ) }
    dend_20 { pt3dadd( 20.3275, -40.2945, -0.911848, 1.08 ) }
    dend_20 { pt3dadd( 21.3486, -45.554, -1.29468, 1.08 ) }
    dend_20 { pt3dadd( 21.8379, -50.1762, -1.65629, 1.08 ) }
    dend_20 { pt3dadd( 21.7897, -51.9556, -1.80493, 1.08 ) }
    dend_20 { pt3dadd( 21.6878, -54.1967, -1.97208, 1.08 ) }
    dend_20 { pt3dadd( 21.4826, -59.7807, -2.34839, 1.08 ) }
    dend_20 { pt3dadd( 21.5438, -63.1293, -2.54007, 1.08 ) }
    dend_20 { pt3dadd( 21.8905, -66.0705, -2.80392, 1.08 ) }
    dend_20 { pt3dadd( 22.4884, -69.9391, -3.28794, 1.08 ) }
    dend_20 { pt3dadd( 23.4851, -75.1594, -4.04625, 1.08 ) }
    dend_20 { pt3dadd( 23.5899, -75.736, -4.14755, 1.08 ) }
    dend_20 { pt3dadd( 24.3651, -79.5244, -4.92504, 1.08 ) }
    dend_20 { pt3dadd( 25.6167, -84.3056, -5.95621, 1.08 ) }
    dend_20 { pt3dadd( 26.6242, -87.9985, -6.69883, 1.08 ) }
    dend_20 { pt3dadd( 28.4042, -93.7622, -7.94062, 1.08 ) }
    dend_20 { pt3dadd( 29.2573, -96.5881, -8.54712, 1.08 ) }
    dend_20 { pt3dadd( 29.6899, -98.1732, -8.86037, 1.08 ) }
    dend_20 { pt3dadd( 30.6491, -102.189, -9.61681, 1.08 ) }
    dend_20 { pt3dadd( 32.3287, -108.25, -10.5774, 1.08 ) }
    dend_20 { pt3dadd( 33.5391, -112.782, -11.3418, 0.81 ) }
    dend_20 { pt3dadd( 34.0108, -114.362, -11.6242, 0.81 ) }
    dend_20 { pt3dadd( 34.8682, -117.272, -12.2685, 0.81 ) }
    dend_20 { pt3dadd( 35.7353, -120.306, -12.9928, 0.81 ) }
    dend_20 { pt3dadd( 36.4354, -123.346, -13.719, 0.81 ) }
    dend_20 { pt3dadd( 37.5121, -128.377, -14.9059, 0.81 ) }
    dend_20 { pt3dadd( 39.5098, -137.593, -17.1305, 0.81 ) }
    dend_20 { pt3dadd( 40.6696, -141.87, -18.2351, 0.81 ) }
    dend_20 { pt3dadd( 41.9196, -145.916, -19.2478, 0.81 ) }
    dend_20 { pt3dadd( 43.3736, -150.216, -20.2305, 0.81 ) }
    dend_20 { pt3dadd( 43.4676, -150.458, -20.2876, 0.81 ) }
    dend_20 { pt3dadd( 45.642, -155.176, -21.4154, 0.81 ) }
    dend_20 { pt3dadd( 46.8922, -157.878, -21.9885, 0.81 ) }
    dend_20 { pt3dadd( 50.5393, -164.555, -23.1284, 0.81 ) }
    dend_20 { pt3dadd( 53.1356, -168.874, -23.8791, 0.81 ) }
    dend_20 { pt3dadd( 54.8622, -171.561, -24.3805, 0.81 ) }
    dend_20 { pt3dadd( 54.9971, -171.787, -24.421, 0.81 ) }
    dend_20 { pt3dadd( 56.4679, -174.685, -24.8646, 0.81 ) }
    dend_20 { pt3dadd( 59.5957, -181.624, -26.091, 0.81 ) }
    dend_20 { pt3dadd( 59.6126, -181.67, -26.099, 0.81 ) }
    dend_20 { pt3dadd( 60.0943, -184.158, -26.4505, 0.81 ) }
    dend_20 { pt3dadd( 60.3287, -185.918, -26.6313, 0.81 ) }
    dend_20 { pt3dadd( 60.8126, -190.119, -26.9999, 0.81 ) }
    dend_20 { pt3dadd( 60.9741, -191.318, -27.093, 0.81 ) }
    dend_20 { pt3dadd( 61.7868, -198.531, -27.6933, 0.81 ) }
    dend_20 { pt3dadd( 62.2695, -202.155, -28.1628, 0.81 ) }
    dend_20 { pt3dadd( 62.9169, -206.245, -28.8102, 0.81 ) }
    dend_20 { pt3dadd( 63.8601, -212.22, -30.213, 0.81 ) }
    dend_20 { pt3dadd( 64.4827, -215.825, -31.3073, 0.81 ) }
    dend_20 { pt3dadd( 65.1819, -219.733, -32.7781, 0.81 ) }
    dend_20 { pt3dadd( 66.0882, -224.636, -35.0083, 0.81 ) }
    dend_20 { pt3dadd( 66.0984, -224.687, -35.035, 0.81 ) }
    dend_20 { pt3dadd( 66.8478, -229.995, -38.1978, 0.81 ) }
    dend_20 { pt3dadd( 67.1198, -232.769, -40.1175, 0.81 ) }
    dend_20 { pt3dadd( 67.1803, -235.229, -41.8753, 0.27 ) }
    // Section: dend_13, id: dend_13, parent: soma_0 (entry count 90/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -6.04795, -7.85814, 1.45098, 1.08 ) }
    dend_13 { pt3dadd( -6.14508, -10.03, 0.689807, 1.08 ) }
    dend_13 { pt3dadd( -6.27945, -13.035, -0.363347, 1.35 ) }
    dend_13 { pt3dadd( -6.49678, -17.895, -2.0666, 1.35 ) }
    dend_13 { pt3dadd( -6.58092, -19.7767, -2.72604, 1.35 ) }
    dend_13 { pt3dadd( -6.58786, -19.9318, -2.78041, 1.35 ) }
    // Section: dend_6, id: dend_6, parent: soma_0 (entry count 96/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -2.31794, 7.07186, 2.93098, 1.89 ) }
    dend_6 { pt3dadd( -4.48985, 8.18468, 2.93098, 1.89 ) }
    dend_6 { pt3dadd( -7.46916, 9.71118, 2.93098, 1.89 ) }
    // Section: dend_3, id: dend_3, parent: soma_0 (entry count 99/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -0.377952, 8.63187, 1.46098, 1.41 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_3 { pt3dadd( -2.26591, 9.41536, 2.07111, 1.41 ) }
    dend_3 { pt3dadd( -4.21034, 10.2223, 2.69949, 1.23 ) }
    dend_3 { pt3dadd( -6.14836, 11.0266, 3.3258, 1.23 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 3/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 4.75205, 11.2519, -2.91902, 1.11 ) }
    dend_0 { pt3dadd( 4.84461, 13.0216, -3.01472, 1.11 ) }
    dend_0 { pt3dadd( 5.67825, 17.7608, -3.36803, 1.11 ) }
    dend_0 { pt3dadd( 7.00261, 22.3301, -3.72928, 1.11 ) }
    dend_0 { pt3dadd( 8.18342, 24.9169, -3.92009, 1.11 ) }
    dend_0 { pt3dadd( 10.6357, 29.4722, -4.47822, 1.11 ) }
    dend_0 { pt3dadd( 13.4782, 34.6754, -5.32626, 1.11 ) }
    dend_0 { pt3dadd( 15.1867, 37.4391, -5.85946, 1.11 ) }
    dend_0 { pt3dadd( 18.6672, 42.4203, -7.02929, 1.67 ) }
    dend_0 { pt3dadd( 23.932, 49.7704, -8.99501, 1.11 ) }
    dend_0 { pt3dadd( 26.1544, 52.8653, -9.84155, 1.11 ) }
    dend_0 { pt3dadd( 28.2221, 55.8487, -10.7037, 1.11 ) }
    dend_0 { pt3dadd( 30.3903, 59.2523, -11.6808, 1.11 ) }
    dend_0 { pt3dadd( 33.5459, 64.3368, -13.0093, 1.11 ) }
    dend_0 { pt3dadd( 36.3764, 68.9446, -14.3438, 1.11 ) }
    dend_0 { pt3dadd( 38.6307, 72.7317, -15.4433, 1.11 ) }
    dend_0 { pt3dadd( 41.3836, 77.1575, -16.6347, 1.11 ) }
    dend_0 { pt3dadd( 42.3972, 78.7762, -17.0655, 1.11 ) }
    dend_0 { pt3dadd( 46.2838, 85.0914, -18.812, 1.11 ) }
    dend_0 { pt3dadd( 48.9421, 89.417, -19.9606, 1.11 ) }
    dend_0 { pt3dadd( 49.6371, 90.5724, -20.2672, 1.11 ) }
    dend_0 { pt3dadd( 50.9669, 93.014, -20.8876, 1.11 ) }
    dend_0 { pt3dadd( 53.5939, 98.0309, -22.1901, 1.11 ) }
    dend_0 { pt3dadd( 56.5949, 103.929, -23.7298, 1.11 ) }
    dend_0 { pt3dadd( 58.5276, 108.006, -24.8141, 1.11 ) }
    dend_0 { pt3dadd( 60.6508, 112.174, -25.876, 1.11 ) }
    dend_0 { pt3dadd( 62.5866, 115.829, -26.8994, 1.11 ) }
    dend_0 { pt3dadd( 64.2625, 119.094, -27.9179, 1.06 ) }
    dend_0 { pt3dadd( 65.1898, 120.921, -28.6048, 0.53 ) }
    dend_0 { pt3dadd( 65.8964, 122.689, -29.3305, 0.35 ) }
    dend_0 { pt3dadd( 66.8276, 125.618, -30.7072, 0.35 ) }
    dend_0 { pt3dadd( 66.882, 125.837, -30.8208, 0.35 ) }
    dend_0 { pt3dadd( 67.5487, 130.158, -32.959, 0.35 ) }
    dend_0 { pt3dadd( 67.6896, 131.536, -33.6656, 0.35 ) }
    dend_0 { pt3dadd( 67.9099, 133.832, -34.9274, 0.35 ) }
    dend_0 { pt3dadd( 68.2375, 136.937, -36.6176, 0.35 ) }
    dend_0 { pt3dadd( 68.4931, 138.924, -37.7155, 0.35 ) }
    dend_0 { pt3dadd( 69.0021, 141.491, -39.183, 0.35 ) }
    dend_0 { pt3dadd( 69.8162, 144.288, -40.7968, 0.35 ) }
    dend_0 { pt3dadd( 70.2181, 145.616, -41.5194, 0.35 ) }
    dend_0 { pt3dadd( 70.7098, 147.236, -42.3766, 0.35 ) }
    dend_0 { pt3dadd( 71.3235, 149.524, -43.5161, 0.35 ) }
    dend_0 { pt3dadd( 71.7933, 151.428, -44.4276, 0.35 ) }
    dend_0 { pt3dadd( 72.1682, 152.844, -45.1182, 0.35 ) }
    dend_0 { pt3dadd( 72.3804, 153.812, -45.5116, 1.23 ) }
    dend_0 { pt3dadd( 72.4416, 154.122, -45.6575, 1.23 ) }
    dend_0 { pt3dadd( 72.7881, 156.028, -46.697, 0.18 ) }
    dend_0 { pt3dadd( 73.1283, 157.383, -47.5765, 0.18 ) }
    dend_0 { pt3dadd( 73.4917, 158.392, -48.2751, 0.18 ) }
    dend_0 { pt3dadd( 74.0421, 159.719, -49.2871, 1.23 ) }
    dend_0 { pt3dadd( 74.6392, 160.865, -50.1126, 0.18 ) }
    dend_0 { pt3dadd( 74.8686, 161.255, -50.3395, 0.18 ) }
    dend_0 { pt3dadd( 76.5409, 163.498, -51.3654, 0.18 ) }
    dend_0 { pt3dadd( 76.9807, 164.032, -51.5975, 0.88 ) }
    dend_0 { pt3dadd( 77.272, 164.351, -51.7329, 0.18 ) }
    dend_0 { pt3dadd( 78.9536, 166.071, -52.3821, 0.18 ) }
    dend_0 { pt3dadd( 80.5029, 167.687, -52.8159, 0.18 ) }
    dend_0 { pt3dadd( 82.8354, 170.067, -53.2824, 1.06 ) }
    dend_0 { pt3dadd( 83.084, 170.309, -53.3044, 1.06 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 62/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 3.61679, 10.8844, 0.0146107, 0.81 ) }
    axon_0 { pt3dadd( 9.07397, 24.8565, 0.0146107, 0.81 ) }
    axon_0 { pt3dadd( 14.5311, 38.8286, 0.0146107, 0.81 ) }
    // Section: dend_25, id: dend_25, parent: dend_23 (entry count 65/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 3.06408, -13.6237, 1.04756, 1.08 ) }
    dend_25 { pt3dadd( 8.10974, -13.3876, 0.44794, 1.08 ) }
    dend_25 { pt3dadd( 17.9013, -11.926, -0.198394, 1.08 ) }
    dend_25 { pt3dadd( 27.7841, -11.9035, -1.06835, 1.08 ) }
    dend_25 { pt3dadd( 37.4896, -12.6044, -3.00256, 1.08 ) }
    dend_25 { pt3dadd( 47.4079, -12.531, -3.2232, 1.08 ) }
    dend_25 { pt3dadd( 57.2039, -11.0676, -3.79334, 1.08 ) }
    dend_25 { pt3dadd( 66.7463, -8.35654, -3.65024, 1.08 ) }
    dend_25 { pt3dadd( 76.3428, -6.70614, -1.7505, 1.08 ) }
    dend_25 { pt3dadd( 85.3136, -3.45863, 0.971392, 1.08 ) }
    dend_25 { pt3dadd( 94.2579, 0.364057, 2.92385, 1.08 ) }
    dend_25 { pt3dadd( 103.259, 4.36885, 4.09564, 1.08 ) }
    dend_25 { pt3dadd( 112.012, 8.92122, 5.13515, 1.08 ) }
    dend_25 { pt3dadd( 121.587, 11.4425, 4.50559, 1.08 ) }
    dend_25 { pt3dadd( 130.641, 15.3802, 5.47957, 1.08 ) }
    dend_25 { pt3dadd( 139.249, 20.2904, 5.95368, 1.08 ) }
    dend_25 { pt3dadd( 147.384, 25.9553, 5.57225, 1.08 ) }
    dend_25 { pt3dadd( 156.417, 29.9953, 6.29496, 1.08 ) }
    dend_25 { pt3dadd( 165.831, 32.0919, 8.61793, 1.08 ) }
    dend_25 { pt3dadd( 175.619, 32.8852, 10.0304, 1.08 ) }
    dend_25 { pt3dadd( 185.033, 34.2168, 12.8662, 1.08 ) }
    dend_25 { pt3dadd( 194.872, 33.7319, 14.0402, 1.08 ) }
    // Section: dend_24, id: dend_24, parent: dend_23 (entry count 87/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 3.06408, -13.6237, 1.04756, 1.08 ) }
    dend_24 { pt3dadd( 5.35851, -18.3778, 0.945264, 1.08 ) }
    dend_24 { pt3dadd( 7.79864, -23.0829, 0.696074, 1.08 ) }
    dend_24 { pt3dadd( 10.8365, -28.0672, 0.239138, 1.08 ) }
    dend_24 { pt3dadd( 13.4909, -32.1025, -0.216873, 1.08 ) }
    dend_24 { pt3dadd( 17.4715, -38.1541, -0.900733, 0.81 ) }
    dend_24 { pt3dadd( 18.8859, -40.3044, -1.14372, 0.81 ) }
    dend_24 { pt3dadd( 21.1519, -43.5075, -1.59486, 0.81 ) }
    dend_24 { pt3dadd( 24.3182, -47.8081, -2.44978, 0.81 ) }
    dend_24 { pt3dadd( 24.3603, -47.8521, -2.46401, 0.81 ) }
    // Section: dend_22, id: dend_22, parent: dend_20 (entry count 97/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( 67.1803, -235.229, -41.8753, 0.27 ) }
    dend_22 { pt3dadd( 74.919, -238.401, -43.0704, 0.27 ) }
    dend_22 { pt3dadd( 85.4049, -242.699, -44.6898, 0.27 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 0/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 67.1803, -235.229, -41.8753, 0.27 ) }
    dend_21 { pt3dadd( 67.373, -238.408, -44.8001, 0.27 ) }
    dend_21 { pt3dadd( 67.643, -242.783, -48.9647, 0.27 ) }
    dend_21 { pt3dadd( 67.8811, -247.016, -52.9457, 0.27 ) }
    dend_21 { pt3dadd( 68.067, -250.322, -56.054, 0.27 ) }
    dend_21 { pt3dadd( 68.3074, -254.597, -60.0739, 0.27 ) }
    dend_21 { pt3dadd( 68.7394, -262.279, -67.2973, 0.27 ) }
    dend_21 { pt3dadd( 68.7447, -262.448, -67.467, 0.27 ) }
    dend_21 { pt3dadd( 68.8298, -263.835, -68.8128, 0.27 ) }
    // Section: dend_15, id: dend_15, parent: dend_13 (entry count 9/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -6.58786, -19.9318, -2.78041, 1.08 ) }
    dend_15 { pt3dadd( -8.01412, -21.7374, -2.49304, 1.08 ) }
    dend_15 { pt3dadd( -9.92465, -24.1562, -2.1081, 1.08 ) }
    dend_15 { pt3dadd( -11.9004, -26.6575, -1.71001, 1.08 ) }
    dend_15 { pt3dadd( -14.8443, -30.3846, -1.11685, 1.08 ) }
    dend_15 { pt3dadd( -16.3242, -32.258, -0.818696, 1.08 ) }
    dend_15 { pt3dadd( -17.9814, -34.3561, -0.484792, 1.08 ) }
    // Section: dend_14, id: dend_14, parent: dend_13 (entry count 16/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( -6.58786, -19.9318, -2.78041, 0.27 ) }
    dend_14 { pt3dadd( -8.19006, -23.8694, -3.15661, 0.27 ) }
    dend_14 { pt3dadd( -8.64523, -27.1757, -3.65644, 0.54 ) }
    dend_14 { pt3dadd( -8.65868, -27.9317, -3.74894, 1.08 ) }
    dend_14 { pt3dadd( -8.65415, -28.1993, -3.7792, 1.08 ) }
    dend_14 { pt3dadd( -8.64901, -32.2693, -4.25256, 1.08 ) }
    dend_14 { pt3dadd( -8.67137, -34.1514, -4.46824, 1.08 ) }
    dend_14 { pt3dadd( -8.66298, -40.3833, -5.18898, 1.08 ) }
    dend_14 { pt3dadd( -8.6959, -46.1945, -5.98794, 1.08 ) }
    dend_14 { pt3dadd( -8.69455, -46.4604, -6.03053, 1.08 ) }
    dend_14 { pt3dadd( -8.49799, -51.3397, -6.96691, 1.08 ) }
    dend_14 { pt3dadd( -8.24847, -53.9924, -7.59233, 1.08 ) }
    dend_14 { pt3dadd( -8.1437, -55.9739, -8.0455, 1.08 ) }
    dend_14 { pt3dadd( -8.16582, -57.8652, -8.44861, 1.08 ) }
    dend_14 { pt3dadd( -8.00764, -60.4365, -9.04099, 1.08 ) }
    dend_14 { pt3dadd( -7.70911, -63.4937, -9.69647, 1.08 ) }
    dend_14 { pt3dadd( -7.5299, -65.6199, -10.0495, 1.08 ) }
    dend_14 { pt3dadd( -7.2082, -72.6534, -11.0167, 1.08 ) }
    dend_14 { pt3dadd( -7.21179, -74.0023, -11.2161, 1.08 ) }
    dend_14 { pt3dadd( -7.20632, -79.8593, -12.2772, 1.08 ) }
    dend_14 { pt3dadd( -7.21767, -80.4503, -12.3923, 1.08 ) }
    dend_14 { pt3dadd( -7.36746, -86.9066, -13.7651, 1.08 ) }
    dend_14 { pt3dadd( -7.41062, -90.8686, -14.695, 1.08 ) }
    dend_14 { pt3dadd( -7.1712, -94.8987, -15.795, 1.08 ) }
    dend_14 { pt3dadd( -7.1375, -101.011, -17.4584, 1.08 ) }
    dend_14 { pt3dadd( -7.14272, -101.26, -17.5295, 1.08 ) }
    dend_14 { pt3dadd( -7.15394, -102.315, -17.8448, 1.08 ) }
    dend_14 { pt3dadd( -7.14983, -105.984, -19.001, 1.08 ) }
    dend_14 { pt3dadd( -7.12162, -114.307, -21.5009, 1.08 ) }
    dend_14 { pt3dadd( -7.24309, -120.8, -23.1337, 1.08 ) }
    dend_14 { pt3dadd( -7.37584, -125.99, -24.2767, 1.08 ) }
    dend_14 { pt3dadd( -7.42044, -129.856, -25.0283, 1.08 ) }
    dend_14 { pt3dadd( -7.41914, -129.915, -25.0382, 1.08 ) }
    dend_14 { pt3dadd( -7.19825, -134.712, -25.6847, 1.08 ) }
    dend_14 { pt3dadd( -6.54165, -141.175, -26.3667, 1.08 ) }
    dend_14 { pt3dadd( -5.79263, -146.415, -26.8168, 1.08 ) }
    dend_14 { pt3dadd( -5.19959, -150.873, -27.078, 0.81 ) }
    dend_14 { pt3dadd( -4.57932, -155.528, -27.3948, 0.81 ) }
    dend_14 { pt3dadd( -4.16879, -158.866, -27.6636, 0.81 ) }
    dend_14 { pt3dadd( -2.8654, -168.322, -28.8476, 0.81 ) }
    dend_14 { pt3dadd( -2.05484, -173.622, -29.7328, 0.81 ) }
    dend_14 { pt3dadd( -1.78913, -175.443, -30.0832, 0.81 ) }
    dend_14 { pt3dadd( -1.03455, -180.867, -31.0765, 0.81 ) }
    dend_14 { pt3dadd( -0.575264, -184.537, -31.6456, 0.81 ) }
    dend_14 { pt3dadd( 0.545104, -195.357, -32.899, 0.81 ) }
    dend_14 { pt3dadd( 0.654312, -198.414, -33.1715, 0.81 ) }
    dend_14 { pt3dadd( 0.656081, -198.683, -33.1924, 0.81 ) }
    dend_14 { pt3dadd( 0.453054, -204.628, -33.5564, 0.81 ) }
    dend_14 { pt3dadd( 0.0922672, -209.19, -33.6852, 0.81 ) }
    dend_14 { pt3dadd( -0.667571, -214.304, -33.7128, 0.81 ) }
    dend_14 { pt3dadd( -1.83595, -220.157, -33.517, 0.81 ) }
    dend_14 { pt3dadd( -2.26242, -222.286, -33.4619, 0.81 ) }
    dend_14 { pt3dadd( -3.13877, -227.033, -33.4106, 0.81 ) }
    dend_14 { pt3dadd( -3.82435, -230.77, -33.4336, 0.81 ) }
    dend_14 { pt3dadd( -4.82087, -235.839, -33.5074, 0.81 ) }
    dend_14 { pt3dadd( -6.00796, -243.079, -33.6221, 0.81 ) }
    dend_14 { pt3dadd( -6.84315, -248.67, -33.6596, 0.81 ) }
    dend_14 { pt3dadd( -7.55123, -253.49, -33.7659, 0.81 ) }
    dend_14 { pt3dadd( -8.48736, -259.791, -33.8999, 0.81 ) }
    dend_14 { pt3dadd( -8.92067, -262.943, -33.9938, 0.81 ) }
    dend_14 { pt3dadd( -9.34608, -266.523, -34.1706, 0.81 ) }
    dend_14 { pt3dadd( -9.94375, -271.278, -34.5068, 0.81 ) }
    dend_14 { pt3dadd( -10.134, -276.212, -34.9374, 0.81 ) }
    dend_14 { pt3dadd( -10.0352, -278.044, -35.1239, 0.81 ) }
    dend_14 { pt3dadd( -9.98695, -278.42, -35.1624, 1.08 ) }
    dend_14 { pt3dadd( -9.93075, -278.796, -35.1876, 1.08 ) }
    dend_14 { pt3dadd( -9.12109, -283.558, -35.5336, 0.54 ) }
    dend_14 { pt3dadd( -7.71629, -290.559, -36.1546, 0.54 ) }
    dend_14 { pt3dadd( -6.98585, -294.317, -36.5294, 0.54 ) }
    dend_14 { pt3dadd( -6.28187, -298.207, -36.959, 0.54 ) }
    dend_14 { pt3dadd( -5.90017, -300.767, -37.2088, 0.54 ) }
    dend_14 { pt3dadd( -5.48262, -304.465, -37.4993, 0.54 ) }
    dend_14 { pt3dadd( -5.31679, -306.866, -37.5878, 0.54 ) }
    dend_14 { pt3dadd( -5.12184, -312.236, -37.5987, 0.54 ) }
    dend_14 { pt3dadd( -5.08913, -314.791, -37.5496, 0.54 ) }
    dend_14 { pt3dadd( -5.03118, -317.852, -37.4926, 0.54 ) }
    dend_14 { pt3dadd( -5.13207, -319.938, -37.4213, 0.54 ) }
    dend_14 { pt3dadd( -5.48152, -324.529, -37.2224, 0.54 ) }
    dend_14 { pt3dadd( -5.48681, -324.598, -37.2189, 0.54 ) }
    dend_14 { pt3dadd( -5.57608, -325.702, -37.1374, 0.54 ) }
    dend_14 { pt3dadd( -5.78934, -329.458, -36.8916, 0.54 ) }
    dend_14 { pt3dadd( -5.93931, -334.2, -36.6368, 0.54 ) }
    dend_14 { pt3dadd( -6.20864, -340.902, -36.3277, 0.54 ) }
    dend_14 { pt3dadd( -6.37363, -346.887, -36.1734, 0.54 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_14 { pt3dadd( -6.44654, -350.208, -36.0858, 0.54 ) }
    dend_14 { pt3dadd( -6.56801, -354.846, -36.099, 0.54 ) }
    dend_14 { pt3dadd( -6.58593, -355.654, -36.126, 0.54 ) }
    dend_14 { pt3dadd( -6.63175, -360.214, -36.4242, 0.54 ) }
    dend_14 { pt3dadd( -6.98034, -365.621, -36.9544, 0.54 ) }
    dend_14 { pt3dadd( -7.42489, -371.759, -37.7922, 0.54 ) }
    dend_14 { pt3dadd( -7.83746, -376.331, -38.5364, 0.54 ) }
    dend_14 { pt3dadd( -8.31976, -380.673, -39.2841, 0.54 ) }
    dend_14 { pt3dadd( -8.40576, -381.463, -39.4314, 0.54 ) }
    dend_14 { pt3dadd( -8.93432, -386.328, -40.555, 0.54 ) }
    // Section: dend_10, id: dend_10, parent: dend_6 (entry count 10/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -7.46916, 9.71118, 2.93098, 0.81 ) }
    dend_10 { pt3dadd( -8.15555, 11.6786, 3.30389, 0.81 ) }
    dend_10 { pt3dadd( -9.70418, 16.0241, 4.11308, 1.08 ) }
    dend_10 { pt3dadd( -13.0376, 22.0394, 5.06711, 1.08 ) }
    dend_10 { pt3dadd( -13.9051, 23.3697, 5.23971, 1.08 ) }
    dend_10 { pt3dadd( -16.4101, 27.5001, 5.68165, 1.08 ) }
    dend_10 { pt3dadd( -16.4458, 27.5602, 5.68691, 1.08 ) }
    dend_10 { pt3dadd( -19.1121, 31.7003, 5.89309, 1.08 ) }
    dend_10 { pt3dadd( -23.1087, 38.0323, 6.0429, 1.08 ) }
    dend_10 { pt3dadd( -24.7345, 41.0335, 5.96911, 1.08 ) }
    dend_10 { pt3dadd( -28.1092, 47.795, 5.55656, 1.08 ) }
    dend_10 { pt3dadd( -31.2844, 54.47, 4.89198, 1.08 ) }
    dend_10 { pt3dadd( -33.0885, 58.2424, 4.44494, 1.08 ) }
    dend_10 { pt3dadd( -35.6342, 63.6446, 3.71027, 1.08 ) }
    dend_10 { pt3dadd( -37.5748, 67.7882, 3.07321, 1.08 ) }
    dend_10 { pt3dadd( -37.8062, 68.1632, 3.00267, 1.08 ) }
    dend_10 { pt3dadd( -38.7147, 69.215, 2.75775, 1.08 ) }
    dend_10 { pt3dadd( -43.6394, 74.0527, 1.63069, 1.08 ) }
    dend_10 { pt3dadd( -47.577, 77.4186, 0.87001, 1.08 ) }
    dend_10 { pt3dadd( -51.6101, 80.295, 0.189835, 1.08 ) }
    dend_10 { pt3dadd( -55.2339, 82.7099, -0.317727, 1.08 ) }
    dend_10 { pt3dadd( -57.4556, 84.1694, -0.638391, 1.08 ) }
    dend_10 { pt3dadd( -59.4229, 85.7394, -0.918481, 1.08 ) }
    dend_10 { pt3dadd( -62.6345, 88.7585, -1.3316, 1.08 ) }
    dend_10 { pt3dadd( -65.2738, 91.7411, -1.59713, 1.08 ) }
    dend_10 { pt3dadd( -65.4661, 91.9755, -1.61699, 1.08 ) }
    dend_10 { pt3dadd( -68.9502, 96.7532, -1.96927, 1.08 ) }
    dend_10 { pt3dadd( -73.7893, 104.145, -2.67461, 1.08 ) }
    dend_10 { pt3dadd( -77.7907, 110.441, -3.33369, 1.08 ) }
    dend_10 { pt3dadd( -81.3435, 116.337, -4.1043, 1.08 ) }
    dend_10 { pt3dadd( -84.9705, 122.895, -4.96501, 1.08 ) }
    dend_10 { pt3dadd( -88.79, 130.271, -5.89538, 1.08 ) }
    dend_10 { pt3dadd( -92.165, 137.557, -6.86449, 1.08 ) }
    dend_10 { pt3dadd( -94.8478, 143.466, -7.80062, 1.08 ) }
    dend_10 { pt3dadd( -96.2337, 146.988, -8.36267, 1.08 ) }
    dend_10 { pt3dadd( -98.7412, 153.26, -9.30553, 1.08 ) }
    dend_10 { pt3dadd( -101.088, 159.901, -10.026, 1.08 ) }
    dend_10 { pt3dadd( -103.398, 165.817, -10.4835, 0.81 ) }
    dend_10 { pt3dadd( -105.319, 169.945, -10.5969, 0.81 ) }
    dend_10 { pt3dadd( -107.822, 174.932, -10.61, 0.81 ) }
    dend_10 { pt3dadd( -110.02, 178.577, -10.5276, 0.81 ) }
    dend_10 { pt3dadd( -111.957, 181.34, -10.4869, 0.54 ) }
    dend_10 { pt3dadd( -116.519, 187.201, -10.2374, 0.54 ) }
    dend_10 { pt3dadd( -121.376, 192.868, -9.72827, 1.08 ) }
    dend_10 { pt3dadd( -122.231, 193.842, -9.6102, 1.08 ) }
    dend_10 { pt3dadd( -124.996, 196.843, -9.32014, 1.08 ) }
    dend_10 { pt3dadd( -131.117, 203.782, -9.01645, 1.08 ) }
    // Section: dend_7, id: dend_7, parent: dend_6 (entry count 57/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -7.46916, 9.71118, 2.93098, 1.08 ) }
    dend_7 { pt3dadd( -11.0954, 4.84374, -2.5074, 1.08 ) }
    dend_7 { pt3dadd( -13.2837, 1.93123, -5.64854, 0.81 ) }
    dend_7 { pt3dadd( -16.0202, -2.18872, -10.214, 1.08 ) }
    dend_7 { pt3dadd( -17.488, -4.56126, -12.8406, 1.08 ) }
    dend_7 { pt3dadd( -18.9833, -6.97833, -15.5165, 1.08 ) }
    dend_7 { pt3dadd( -21.1497, -10.4802, -19.3933, 1.08 ) }
    dend_7 { pt3dadd( -22.1877, -12.5199, -21.367, 1.08 ) }
    dend_7 { pt3dadd( -23.755, -16.4717, -25.481, 0.54 ) }
    dend_7 { pt3dadd( -23.9528, -16.9576, -26.0648, 0.54 ) }
    // Section: dend_5, id: dend_5, parent: dend_3 (entry count 67/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -6.14836, 11.0266, 3.3258, 0.53 ) }
    dend_5 { pt3dadd( -7.26556, 11.0591, 3.45239, 0.53 ) }
    dend_5 { pt3dadd( -9.77305, 11.1322, 3.73651, 0.53 ) }
    dend_5 { pt3dadd( -10.1042, 11.1418, 3.77403, 0.53 ) }
    dend_5 { pt3dadd( -11.6173, 11.1859, 3.94548, 0.53 ) }
    dend_5 { pt3dadd( -13.4435, 11.2391, 4.1524, 0.53 ) }
    dend_5 { pt3dadd( -15.758, 11.3066, 4.41466, 0.53 ) }
    dend_5 { pt3dadd( -25.2212, 12.379, 4.17601, 0.53 ) }
    dend_5 { pt3dadd( -34.2451, 15.1278, 5.50792, 0.53 ) }
    dend_5 { pt3dadd( -43.0231, 18.5841, 6.83475, 0.53 ) }
    dend_5 { pt3dadd( -50.6267, 23.5982, 9.62822, 0.53 ) }
    dend_5 { pt3dadd( -58.8556, 27.8339, 11.8877, 0.53 ) }
    dend_5 { pt3dadd( -66.8162, 31.7711, 15.3353, 0.53 ) }
    dend_5 { pt3dadd( -75.1255, 34.2664, 19.2708, 0.53 ) }
    dend_5 { pt3dadd( -83.6341, 36.8527, 22.6876, 0.53 ) }
    dend_5 { pt3dadd( -92.5522, 38.5523, 25.5751, 0.53 ) }
    dend_5 { pt3dadd( -101.859, 38.6703, 27.6094, 0.53 ) }
    dend_5 { pt3dadd( -110.796, 40.312, 30.4694, 0.53 ) }
    dend_5 { pt3dadd( -119.74, 42.1962, 33.1569, 0.53 ) }
    dend_5 { pt3dadd( -128.731, 44.6537, 35.1254, 0.53 ) }
    dend_5 { pt3dadd( -137.969, 45.2821, 37.3674, 0.53 ) }
    dend_5 { pt3dadd( -147.375, 45.073, 38.8693, 0.53 ) }
    dend_5 { pt3dadd( -156.629, 46.5009, 40.6246, 0.53 ) }
    dend_5 { pt3dadd( -165.654, 48.967, 42.4198, 0.53 ) }
    dend_5 { pt3dadd( -174.332, 52.2604, 44.5677, 0.53 ) }
    dend_5 { pt3dadd( -182.738, 55.2493, 47.9091, 0.53 ) }
    dend_5 { pt3dadd( -191.211, 57.2928, 51.7552, 0.53 ) }
    dend_5 { pt3dadd( -198.64, 58.9921, 57.4711, 0.53 ) }
    dend_5 { pt3dadd( -205.816, 58.7705, 63.7337, 0.53 ) }
    dend_5 { pt3dadd( -212.565, 57.2613, 70.2856, 0.53 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 97/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -6.14836, 11.0266, 3.3258, 0.53 ) }
    dend_4 { pt3dadd( -6.07719, 12.6697, 3.6301, 0.53 ) }
    dend_4 { pt3dadd( -6.0656, 12.9372, 3.67963, 0.53 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_4 { pt3dadd( -5.95714, 15.4408, 4.1433, 0.53 ) }
    dend_4 { pt3dadd( -6.90915, 22.3459, 4.76023, 0.53 ) }
    dend_4 { pt3dadd( -7.37086, 29.3261, 4.93566, 0.53 ) }
    dend_4 { pt3dadd( -8.6753, 36.1517, 5.75736, 0.53 ) }
    dend_4 { pt3dadd( -9.36964, 42.8313, 7.72421, 0.53 ) }
    dend_4 { pt3dadd( -10.0833, 49.756, 8.43494, 0.53 ) }
    dend_4 { pt3dadd( -10.5466, 56.73, 8.77473, 0.53 ) }
    dend_4 { pt3dadd( -10.1885, 63.6245, 7.63245, 0.53 ) }
    dend_4 { pt3dadd( -9.77075, 70.3652, 5.80083, 0.53 ) }
    dend_4 { pt3dadd( -9.46483, 76.9531, 3.4612, 0.53 ) }
    dend_4 { pt3dadd( -10.1514, 83.1047, 0.197377, 0.53 ) }
    dend_4 { pt3dadd( -10.265, 89.4998, -2.64098, 0.53 ) }
    dend_4 { pt3dadd( -11.2008, 96.0309, -4.97263, 0.53 ) }
    dend_4 { pt3dadd( -12.572, 102.271, -7.82716, 0.53 ) }
    dend_4 { pt3dadd( -13.4599, 108.34, -11.1944, 0.53 ) }
    dend_4 { pt3dadd( -15.5925, 114.526, -13.6746, 0.53 ) }
    dend_4 { pt3dadd( -19.1, 119.904, -16.458, 0.53 ) }
    dend_4 { pt3dadd( -22.2119, 125.278, -19.6831, 0.53 ) }
    dend_4 { pt3dadd( -24.7638, 130.442, -23.657, 0.53 ) }
    dend_4 { pt3dadd( -26.1616, 135.725, -28.0267, 0.53 ) }
    dend_4 { pt3dadd( -28.4747, 141.457, -31.3076, 0.53 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 21/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 83.084, 170.309, -53.3044, 0.18 ) }
    dend_2 { pt3dadd( 83.7407, 170.727, -53.2266, 0.18 ) }
    dend_2 { pt3dadd( 85.6901, 172.029, -52.9454, 0.18 ) }
    dend_2 { pt3dadd( 89.1538, 174.586, -52.4084, 0.53 ) }
    dend_2 { pt3dadd( 93.1892, 177.55, -51.9753, 0.53 ) }
    dend_2 { pt3dadd( 96.6214, 180.203, -51.7112, 0.35 ) }
    dend_2 { pt3dadd( 99.8947, 182.693, -51.6941, 0.35 ) }
    dend_2 { pt3dadd( 100.344, 183.045, -51.7221, 0.35 ) }
    dend_2 { pt3dadd( 102.967, 185.23, -52.1945, 0.35 ) }
    dend_2 { pt3dadd( 106.389, 188.043, -53.266, 0.35 ) }
    dend_2 { pt3dadd( 109.115, 189.789, -54.9132, 0.35 ) }
    dend_2 { pt3dadd( 112.246, 191.283, -57.3687, 0.35 ) }
    dend_2 { pt3dadd( 112.433, 191.361, -57.5465, 0.35 ) }
    dend_2 { pt3dadd( 114.367, 192.094, -59.8212, 0.18 ) }
    dend_2 { pt3dadd( 116.714, 192.809, -62.8368, 0.18 ) }
    dend_2 { pt3dadd( 121.043, 193.978, -68.9798, 0.18 ) }
    dend_2 { pt3dadd( 121.118, 193.993, -69.0904, 0.18 ) }
    dend_2 { pt3dadd( 123.115, 194.47, -72.018, 0.53 ) }
    dend_2 { pt3dadd( 126.497, 195.236, -77.0215, 0.53 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 40/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 83.084, 170.309, -53.3044, 0.18 ) }
    dend_1 { pt3dadd( 83.1354, 171.132, -53.4803, 0.18 ) }
    dend_1 { pt3dadd( 83.4278, 175.824, -54.4832, 0.18 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 43/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 14.5311, 38.8286, 0.0146107, 0.54 ) }
    axon_1 { pt3dadd( 19.9883, 52.8007, 0.0146107, 0.54 ) }
    axon_1 { pt3dadd( 25.4455, 66.7728, 0.0146107, 0.54 ) }
    // Section: dend_29, id: dend_29, parent: dend_25 (entry count 46/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 194.872, 33.7319, 14.0402, 0.18 ) }
    dend_29 { pt3dadd( 206.165, 37.6019, 10.5307, 0.18 ) }
    dend_29 { pt3dadd( 217.063, 43.2467, 8.47977, 0.18 ) }
    dend_29 { pt3dadd( 227.906, 49.3241, 9.03701, 0.18 ) }
    dend_29 { pt3dadd( 238.076, 55.9469, 11.7812, 0.18 ) }
    dend_29 { pt3dadd( 248.673, 60.9051, 16.0182, 0.18 ) }
    // Section: dend_26, id: dend_26, parent: dend_25 (entry count 52/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 194.872, 33.7319, 14.0402, 0.18 ) }
    dend_26 { pt3dadd( 206.243, 36.0724, 17.4599, 0.18 ) }
    dend_26 { pt3dadd( 217.137, 39.821, 21.163, 0.18 ) }
    dend_26 { pt3dadd( 227.02, 42.3645, 27.6686, 0.18 ) }
    dend_26 { pt3dadd( 236.764, 42.7622, 34.8349, 0.18 ) }
    dend_26 { pt3dadd( 246.181, 45.2968, 42.0012, 0.18 ) }
    dend_26 { pt3dadd( 256.848, 48.2107, 46.9191, 0.18 ) }
    dend_26 { pt3dadd( 266.353, 52.6493, 52.9533, 0.18 ) }
    // Section: dend_19, id: dend_19, parent: dend_15 (entry count 60/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -17.9814, -34.3561, -0.484792, 1.08 ) }
    dend_19 { pt3dadd( -20.4709, -35.6759, 1.07802, 1.08 ) }
    dend_19 { pt3dadd( -22.4581, -36.7777, 2.23316, 0.81 ) }
    dend_19 { pt3dadd( -24.5763, -38.0373, 3.46927, 0.81 ) }
    dend_19 { pt3dadd( -26.5646, -39.2196, 4.62955, 0.81 ) }
    dend_19 { pt3dadd( -28.8822, -40.5978, 5.982, 0.81 ) }
    dend_19 { pt3dadd( -31.7124, -42.2808, 7.63364, 0.81 ) }
    dend_19 { pt3dadd( -32.8156, -42.971, 8.20196, 0.81 ) }
    dend_19 { pt3dadd( -34.6326, -43.9855, 9.01912, 0.81 ) }
    dend_19 { pt3dadd( -40.289, -48.9771, 12.267, 0.81 ) }
    dend_19 { pt3dadd( -45.6743, -54.0182, 15.8788, 0.81 ) }
    dend_19 { pt3dadd( -51.0224, -57.7192, 20.8947, 0.81 ) }
    dend_19 { pt3dadd( -55.4676, -62.3883, 25.9839, 0.81 ) }
    dend_19 { pt3dadd( -59.6069, -67.2789, 31.1227, 0.81 ) }
    dend_19 { pt3dadd( -64.0766, -73.1599, 34.7137, 0.81 ) }
    dend_19 { pt3dadd( -66.9825, -80.0147, 38.1816, 0.81 ) }
    dend_19 { pt3dadd( -69.2739, -87.0305, 41.7855, 0.81 ) }
    dend_19 { pt3dadd( -72.2527, -93.6888, 45.5606, 0.81 ) }
    dend_19 { pt3dadd( -75.5522, -100.12, 49.4617, 0.81 ) }
    dend_19 { pt3dadd( -78.881, -106.196, 53.8731, 0.81 ) }
    dend_19 { pt3dadd( -83.7072, -110.767, 58.6973, 0.81 ) }
    dend_19 { pt3dadd( -88.6384, -114.314, 64.2258, 0.81 ) }
    dend_19 { pt3dadd( -93.8577, -118.739, 68.7677, 0.81 ) }
    dend_19 { pt3dadd( -99.3148, -121.345, 74.3258, 0.81 ) }
    dend_19 { pt3dadd( -105.352, -123.723, 79.3613, 0.81 ) }
    dend_19 { pt3dadd( -111.422, -125.578, 84.5743, 0.81 ) }
    dend_19 { pt3dadd( -116.947, -125.992, 90.6376, 0.81 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 87/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -17.9814, -34.3561, -0.484792, 0.81 ) }
    dend_16 { pt3dadd( -20.6928, -39.2841, -1.11802, 0.81 ) }
    dend_16 { pt3dadd( -23.1286, -43.6438, -1.56946, 1.08 ) }
    dend_16 { pt3dadd( -24.4627, -45.7972, -1.74731, 1.08 ) }
    dend_16 { pt3dadd( -26.2398, -48.8715, -2.17583, 1.08 ) }
    dend_16 { pt3dadd( -27.1409, -50.5556, -2.43824, 1.08 ) }
    dend_16 { pt3dadd( -29.9208, -55.6812, -3.19824, 1.08 ) }
    dend_16 { pt3dadd( -30.0568, -55.9193, -3.22393, 1.08 ) }
    dend_16 { pt3dadd( -31.9577, -59.0368, -3.69534, 0.81 ) }
    dend_16 { pt3dadd( -34.9558, -64.2301, -4.58821, 0.54 ) }
    dend_16 { pt3dadd( -36.7953, -67.9105, -5.25991, 1.08 ) }
    dend_16 { pt3dadd( -39.5395, -74.4594, -6.41784, 1.08 ) }
    dend_16 { pt3dadd( -40.6576, -77.9666, -7.0325, 1.08 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_16 { pt3dadd( -41.2484, -80.8828, -7.54829, 0.81 ) }
    dend_16 { pt3dadd( -41.4757, -83.816, -7.96114, 0.81 ) }
    dend_16 { pt3dadd( -41.4138, -86.938, -8.20749, 1.08 ) }
    dend_16 { pt3dadd( -40.7191, -92.3719, -8.64017, 1.08 ) }
    dend_16 { pt3dadd( -39.9167, -96.136, -8.90546, 0.81 ) }
    dend_16 { pt3dadd( -38.7411, -102.416, -9.22396, 0.54 ) }
    dend_16 { pt3dadd( -38.2731, -105.931, -9.28229, 0.54 ) }
    dend_16 { pt3dadd( -38.0203, -109.146, -9.31269, 0.54 ) }
    dend_16 { pt3dadd( -37.9675, -112.819, -9.31022, 0.54 ) }
    dend_16 { pt3dadd( -38.1199, -115.583, -9.27151, 1.08 ) }
    dend_16 { pt3dadd( -38.9327, -120.98, -9.13409, 1.08 ) }
    dend_16 { pt3dadd( -41.4923, -131.554, -8.85232, 1.08 ) }
    dend_16 { pt3dadd( -41.5701, -131.818, -8.85119, 1.08 ) }
    dend_16 { pt3dadd( -43.1266, -136.479, -8.82566, 1.08 ) }
    dend_16 { pt3dadd( -44.9657, -141.25, -8.70157, 1.08 ) }
    dend_16 { pt3dadd( -46.738, -145.592, -8.59864, 1.08 ) }
    dend_16 { pt3dadd( -47.4911, -147.088, -8.56732, 0.81 ) }
    dend_16 { pt3dadd( -47.6458, -147.316, -8.56295, 0.81 ) }
    dend_16 { pt3dadd( -48.474, -148.746, -8.58221, 0.81 ) }
    dend_16 { pt3dadd( -50.0081, -151.884, -8.78721, 0.81 ) }
    dend_16 { pt3dadd( -51.846, -156.195, -9.19817, 0.81 ) }
    dend_16 { pt3dadd( -54.1704, -161.867, -9.80435, 0.81 ) }
    dend_16 { pt3dadd( -55.3898, -164.962, -10.182, 0.81 ) }
    dend_16 { pt3dadd( -57.9718, -171.687, -11.0303, 0.81 ) }
    dend_16 { pt3dadd( -59.1137, -174.844, -11.4608, 1.08 ) }
    dend_16 { pt3dadd( -60.5093, -179.088, -12.0675, 1.08 ) }
    dend_16 { pt3dadd( -61.4814, -182.228, -12.4499, 1.08 ) }
    dend_16 { pt3dadd( -62.3004, -185.281, -12.6863, 0.27 ) }
    dend_16 { pt3dadd( -63.6612, -189.746, -12.7843, 0.27 ) }
    dend_16 { pt3dadd( -64.3194, -191.607, -12.6604, 0.27 ) }
    dend_16 { pt3dadd( -65.3313, -194.491, -12.3248, 0.54 ) }
    dend_16 { pt3dadd( -66.1746, -197.424, -11.9632, 0.54 ) }
    dend_16 { pt3dadd( -67.2807, -201.944, -11.4416, 0.54 ) }
    dend_16 { pt3dadd( -67.4224, -202.473, -11.3811, 0.54 ) }
    dend_16 { pt3dadd( -68.1303, -205.779, -11.0434, 0.54 ) }
    dend_16 { pt3dadd( -68.9795, -210.767, -10.8315, 0.54 ) }
    dend_16 { pt3dadd( -69.7194, -216.277, -10.872, 0.54 ) }
    dend_16 { pt3dadd( -70.6595, -223.154, -11.2971, 0.54 ) }
    dend_16 { pt3dadd( -71.104, -226.445, -11.6123, 0.54 ) }
    dend_16 { pt3dadd( -71.744, -231.052, -12.1525, 0.54 ) }
    dend_16 { pt3dadd( -72.5533, -236.688, -12.9196, 0.54 ) }
    dend_16 { pt3dadd( -73.4332, -242.225, -13.7589, 0.54 ) }
    dend_16 { pt3dadd( -74.9441, -249.641, -15.0117, 0.54 ) }
    dend_16 { pt3dadd( -75.1989, -250.861, -15.2295, 0.54 ) }
    dend_16 { pt3dadd( -76.5054, -256.431, -16.183, 0.54 ) }
    dend_16 { pt3dadd( -77.398, -259.822, -16.7227, 0.54 ) }
    dend_16 { pt3dadd( -78.3765, -263.633, -17.2273, 0.54 ) }
    dend_16 { pt3dadd( -79.5066, -268.667, -17.9181, 0.54 ) }
    dend_16 { pt3dadd( -80.3658, -272.917, -18.4778, 0.54 ) }
    dend_16 { pt3dadd( -81.3804, -277.886, -19.1312, 0.54 ) }
    dend_16 { pt3dadd( -82.3794, -282.408, -19.8507, 0.54 ) }
    dend_16 { pt3dadd( -82.3889, -282.458, -19.8594, 0.54 ) }
    dend_16 { pt3dadd( -82.7542, -285.459, -20.4182, 0.54 ) }
    // Section: dend_12, id: dend_12, parent: dend_10 (entry count 53/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -131.117, 203.782, -9.01645, 0.81 ) }
    dend_12 { pt3dadd( -133.102, 206.651, -8.55461, 0.81 ) }
    dend_12 { pt3dadd( -134.88, 208.809, -8.07243, 0.81 ) }
    dend_12 { pt3dadd( -136.874, 211.094, -7.42545, 0.81 ) }
    dend_12 { pt3dadd( -139.334, 213.492, -6.47078, 0.81 ) }
    dend_12 { pt3dadd( -141.626, 215.863, -5.36094, 0.81 ) }
    dend_12 { pt3dadd( -141.661, 215.903, -5.34126, 0.81 ) }
    dend_12 { pt3dadd( -144.077, 218.814, -3.80484, 0.81 ) }
    dend_12 { pt3dadd( -146.222, 221.306, -2.27527, 0.81 ) }
    dend_12 { pt3dadd( -148.526, 223.802, -0.462559, 0.81 ) }
    dend_12 { pt3dadd( -151.66, 227.198, 2.26774, 0.81 ) }
    dend_12 { pt3dadd( -154.131, 229.808, 4.46138, 0.81 ) }
    dend_12 { pt3dadd( -158.797, 236.629, 8.74944, 0.81 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 66/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( -131.117, 203.782, -9.01645, 0.27 ) }
    dend_11 { pt3dadd( -132.482, 206.417, -7.78852, 0.27 ) }
    dend_11 { pt3dadd( -134.419, 210.157, -6.04577, 0.27 ) }
    dend_11 { pt3dadd( -135.427, 212.104, -5.13834, 0.27 ) }
    // Section: dend_9, id: dend_9, parent: dend_7 (entry count 70/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -23.9528, -16.9576, -26.0648, 0.54 ) }
    dend_9 { pt3dadd( -25.8746, -20.2023, -25.9415, 0.54 ) }
    dend_9 { pt3dadd( -27.8307, -23.1516, -25.8473, 0.54 ) }
    dend_9 { pt3dadd( -29.8414, -25.8835, -25.8502, 0.54 ) }
    dend_9 { pt3dadd( -33.9056, -30.6944, -26.1286, 0.54 ) }
    dend_9 { pt3dadd( -37.9729, -35.1661, -26.6898, 0.54 ) }
    dend_9 { pt3dadd( -43.2841, -40.7931, -27.8189, 0.54 ) }
    dend_9 { pt3dadd( -43.4784, -40.9908, -27.8723, 0.54 ) }
    dend_9 { pt3dadd( -46.9238, -44.3593, -28.9269, 0.54 ) }
    dend_9 { pt3dadd( -52.627, -49.7629, -30.7592, 0.54 ) }
    dend_9 { pt3dadd( -56.6339, -53.1698, -32.0943, 0.54 ) }
    dend_9 { pt3dadd( -60.3278, -56.4098, -33.6713, 0.54 ) }
    dend_9 { pt3dadd( -62.8972, -58.8182, -35.0288, 0.54 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 83/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -23.9528, -16.9576, -26.0648, 0.54 ) }
    dend_8 { pt3dadd( -27.5629, -18.3305, -30.8361, 0.54 ) }
    dend_8 { pt3dadd( -30.4454, -19.2118, -34.1051, 0.81 ) }
    dend_8 { pt3dadd( -32.5199, -19.8101, -36.165, 0.81 ) }
    dend_8 { pt3dadd( -40.1884, -22.1013, -43.157, 0.81 ) }
    dend_8 { pt3dadd( -44.6889, -23.3838, -46.8612, 0.81 ) }
    dend_8 { pt3dadd( -48.7486, -24.6111, -50.0705, 0.81 ) }
    dend_8 { pt3dadd( -54.6685, -26.2643, -54.3098, 0.81 ) }
    dend_8 { pt3dadd( -58.4319, -27.3287, -56.7124, 0.81 ) }
    dend_8 { pt3dadd( -62.8875, -28.6811, -59.356, 0.81 ) }
    dend_8 { pt3dadd( -68.488, -30.4795, -62.391, 0.81 ) }
    dend_8 { pt3dadd( -76.1068, -33.1614, -66.557, 0.81 ) }
    dend_8 { pt3dadd( -76.1485, -33.1767, -66.5795, 0.81 ) }
    dend_8 { pt3dadd( -83.5294, -35.9547, -70.6506, 0.81 ) }
    dend_8 { pt3dadd( -83.7141, -36.023, -70.7581, 0.81 ) }
    dend_8 { pt3dadd( -91.9925, -39.014, -75.5663, 0.81 ) }
    // Section: dend_28, id: dend_28, parent: dend_26 (entry count 99/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 266.353, 52.6493, 52.9533, 0.27 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_28 { pt3dadd( 272.933, 54.1749, 56.5417, 0.27 ) }
    dend_28 { pt3dadd( 279.462, 55.515, 60.2914, 0.27 ) }
    // Section: dend_27, id: dend_27, parent: dend_26 (entry count 2/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( 266.353, 52.6493, 52.9533, 0.27 ) }
    dend_27 { pt3dadd( 276.99, 55.856, 58.6837, 0.27 ) }
    dend_27 { pt3dadd( 288.032, 56.8942, 64.4507, 0.27 ) }
    // Section: dend_18, id: dend_18, parent: dend_16 (entry count 5/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -82.7542, -285.459, -20.4182, 0.54 ) }
    dend_18 { pt3dadd( -83.3657, -292.67, -21.3302, 0.54 ) }
    dend_18 { pt3dadd( -84.0903, -300.582, -22.3634, 0.54 ) }
    dend_18 { pt3dadd( -84.1204, -301.015, -22.4153, 0.54 ) }
    dend_18 { pt3dadd( -84.8462, -309.271, -22.9946, 0.54 ) }
    dend_18 { pt3dadd( -85.439, -314.55, -23.1767, 0.54 ) }
    dend_18 { pt3dadd( -85.4805, -314.856, -23.1744, 0.54 ) }
    dend_18 { pt3dadd( -87.2182, -324.86, -22.6054, 0.54 ) }
    dend_18 { pt3dadd( -88.5583, -332.168, -21.9078, 0.54 ) }
    dend_18 { pt3dadd( -90.0364, -339.889, -21.0329, 0.54 ) }
    dend_18 { pt3dadd( -92.1511, -349.795, -19.3956, 0.54 ) }
    dend_18 { pt3dadd( -93.8662, -356.506, -17.995, 0.54 ) }
    dend_18 { pt3dadd( -95.8504, -363.212, -16.3652, 0.54 ) }
    dend_18 { pt3dadd( -97.6879, -368.289, -14.8585, 0.54 ) }
    dend_18 { pt3dadd( -100.429, -374.425, -12.7552, 0.54 ) }
    dend_18 { pt3dadd( -103.717, -380.485, -10.4697, 0.54 ) }
    dend_18 { pt3dadd( -105.977, -383.548, -9.06948, 0.54 ) }
    dend_18 { pt3dadd( -108.017, -385.631, -8.03715, 0.54 ) }
    dend_18 { pt3dadd( -109.636, -386.877, -7.3529, 0.54 ) }
    dend_18 { pt3dadd( -112.989, -388.951, -6.18699, 0.54 ) }
    dend_18 { pt3dadd( -116.531, -390.823, -5.16603, 0.54 ) }
    dend_18 { pt3dadd( -119.814, -392.624, -4.37641, 0.54 ) }
    dend_18 { pt3dadd( -122.51, -394.344, -3.65023, 0.54 ) }
    dend_18 { pt3dadd( -126.012, -396.777, -2.60647, 0.54 ) }
    dend_18 { pt3dadd( -127.905, -398.29, -2.08948, 0.54 ) }
    dend_18 { pt3dadd( -129.705, -399.936, -1.66683, 0.54 ) }
    dend_18 { pt3dadd( -133.636, -404.05, -0.610008, 0.54 ) }
    dend_18 { pt3dadd( -137.036, -408.11, 0.500902, 0.54 ) }
    dend_18 { pt3dadd( -140.242, -412.586, 1.86766, 0.54 ) }
    dend_18 { pt3dadd( -142.894, -416.947, 3.22621, 0.54 ) }
    dend_18 { pt3dadd( -145.526, -422.285, 4.85804, 0.54 ) }
    dend_18 { pt3dadd( -147.412, -427.228, 6.37913, 0.54 ) }
    dend_18 { pt3dadd( -148.582, -431.066, 7.55262, 0.54 ) }
    dend_18 { pt3dadd( -149.586, -436.118, 9.29008, 0.54 ) }
    dend_18 { pt3dadd( -149.649, -438.584, 10.2557, 0.54 ) }
    dend_18 { pt3dadd( -148.819, -443.414, 12.8934, 0.54 ) }
    dend_18 { pt3dadd( -148.619, -443.734, 13.098, 0.54 ) }
    // Section: dend_17, id: dend_17, parent: dend_16 (entry count 42/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -82.7542, -285.459, -20.4182, 0.54 ) }
    dend_17 { pt3dadd( -83.7992, -289.926, -16.6885, 0.54 ) }
    dend_17 { pt3dadd( -84.4211, -292.584, -14.4694, 0.54 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
    ModelViewParmSubset_2 = new SectionList()
    dend_23 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()

    // Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, axon_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, axon_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
    ModelViewParmSubset_5 = new SectionList()
    dend_23 ModelViewParmSubset_5.append()
    dend_20 ModelViewParmSubset_5.append()
    dend_13 ModelViewParmSubset_5.append()
    dend_6 ModelViewParmSubset_5.append()
    dend_3 ModelViewParmSubset_5.append()
    dend_0 ModelViewParmSubset_5.append()
    axon_0 ModelViewParmSubset_5.append()
    dend_25 ModelViewParmSubset_5.append()
    dend_24 ModelViewParmSubset_5.append()
    dend_22 ModelViewParmSubset_5.append()
    dend_21 ModelViewParmSubset_5.append()
    dend_15 ModelViewParmSubset_5.append()
    dend_14 ModelViewParmSubset_5.append()
    dend_10 ModelViewParmSubset_5.append()
    dend_7 ModelViewParmSubset_5.append()
    dend_5 ModelViewParmSubset_5.append()
    dend_4 ModelViewParmSubset_5.append()
    dend_2 ModelViewParmSubset_5.append()
    dend_1 ModelViewParmSubset_5.append()
    axon_1 ModelViewParmSubset_5.append()
    dend_29 ModelViewParmSubset_5.append()
    dend_26 ModelViewParmSubset_5.append()
    dend_19 ModelViewParmSubset_5.append()
    dend_16 ModelViewParmSubset_5.append()
    dend_12 ModelViewParmSubset_5.append()
    dend_11 ModelViewParmSubset_5.append()
    dend_9 ModelViewParmSubset_5.append()
    dend_8 ModelViewParmSubset_5.append()
    dend_28 ModelViewParmSubset_5.append()
    dend_27 ModelViewParmSubset_5.append()
    dend_18 ModelViewParmSubset_5.append()
    dend_17 ModelViewParmSubset_5.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_20 OneSecGrp_SectionRef_3.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_0 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_25 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_24 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_14 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_10 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_7 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_5 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_4 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_2 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_29 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_26 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_19 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_16 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_12 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_9 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_8 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_18 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_6 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_23 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_3 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_13 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_15 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_1 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_11 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_22 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_21 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_17 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_28 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_27 OneSecGrp_SectionRef_31.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_23, dend_23, dend_23, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_13, dend_13, dend_13, dend_13, dend_13, dend_6, dend_6, dend_3, dend_3, dend_3, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, axon_1, axon_1, dend_29, dend_29, dend_29, dend_29, dend_29, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_28, dend_28, dend_27, dend_27, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_19 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_12 all.append()
    dend_12 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_17 all.append()
    dend_17 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 3.25478E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 3.25478E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.993125  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.0  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.005611  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.068459995  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.517764  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 6.3E-5  // units: S cm-2
        e_pas_nml2 = -64.6017  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 3.45E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.077616  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 7.43567E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.002099  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 1.13999995E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.26087198  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-5  // units: S cm-2
        e_pas_nml2 = -69.78141  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 3.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.395881  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009986  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 5.0100003E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009728  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 2.7999999E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cIR_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cIR_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cIR_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cIR_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_20 nseg = 13
    dend_0 nseg = 9
    dend_25 nseg = 11
    dend_24 nseg = 3
    dend_14 nseg = 19
    dend_10 nseg = 11
    dend_7 nseg = 3
    dend_5 nseg = 11
    dend_4 nseg = 7
    dend_2 nseg = 3
    dend_29 nseg = 3
    dend_26 nseg = 5
    dend_19 nseg = 9
    dend_16 nseg = 13
    dend_12 nseg = 3
    dend_9 nseg = 3
    dend_8 nseg = 5
    dend_18 nseg = 9
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cIR216_L5_LBC_c5448109e7_0_0


