// Cell: cNAC187_L4_BP_2a2ec4bfaa_0_0
/*
{
  "id" : "cNAC187_L4_BP_2a2ec4bfaa_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-3.08452, 6.27464, 0.312461, 1.46623", "-2.79927, 5.64032, 0.287115, 2.64844", "-2.51401, 5.00599, 0.26177, 4.10361", "-2.22875, 4.37167, 0.236425, 4.91598", "-1.94349, 3.73735, 0.21108, 5.72835", "-1.65823, 3.10303, 0.185734, 6.53421", "-1.37297, 2.46871, 0.160389, 7.31212", "-1.08771, 1.83438, 0.135044, 8.08989", "-0.802456, 1.20006, 0.109699, 8.85679", "-0.517198, 0.56574, 0.0843534, 8.93483", "-0.23194, -0.0685822, 0.0590082, 8.92633", "0.0533189, -0.702904, 0.033663, 8.91784", "0.338577, -1.33723, 0.00831775, 8.90934", "0.623836, -1.97155, -0.0170275, 8.90084", "0.909094, -2.60587, -0.0423727, 8.82493", "1.19435, -3.24019, -0.067718, 7.82232", "1.47961, -3.87451, -0.0930632, 6.5965", "1.76487, -4.50884, -0.118408, 5.37067", "2.05013, -5.14316, -0.143754, 4.14485", "2.33539, -5.77748, -0.169099, 2.91903", "2.62064, -6.4118, -0.194444, 1.76337" ]
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "1.61629, -5.87753, -1.26548, 1.33", "2.7496, -10.8028, -2.17417, 1.33", "4.62861, -18.9688, -3.68077, 0.66", "6.08339, -25.2911, -4.84722, 0.66", "7.63358, -32.0281, -6.09018, 1.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500001318721313
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "2.62064, -6.4118, -0.194444, 0.33", "8.77276, -20.0921, -0.194444, 0.33", "14.9249, -33.7725, -0.194444, 0.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "7.63358, -32.0281, -6.09018, 0.66", "8.01686, -44.8575, -3.07891, 0.66", "8.56703, -63.9136, 1.41763, 0.66", "9.2267, -87.1766, 7.08613, 0.66", "9.81107, -105.13, 11.4852, 0.66", "10.1636, -115.548, 14.0297, 0.66", "10.2682, -119.005, 14.8671, 0.66", "10.4254, -123.695, 16.0371, 0.66", "10.4975, -128.081, 17.1604, 0.66", "10.5806, -133.142, 18.3652, 0.66", "10.645, -135.874, 18.6803, 0.66", "10.6936, -139.282, 18.7665, 0.66", "10.8228, -144.418, 18.315, 0.66", "10.9589, -151.166, 17.4015, 0.66", "11.0754, -154.106, 16.98, 0.66", "11.7326, -167.906, 14.8788, 0.66", "11.9665, -171.163, 14.3323, 0.66", "12.8774, -181.221, 12.4028, 0.66", "13.3092, -185.466, 11.5543, 0.66", "14.2346, -193.266, 10.0992, 0.66", "14.7656, -197.737, 9.55614, 0.66", "15.2798, -202.09, 9.46183, 0.66", "15.775, -206.293, 9.51844, 0.66", "16.0985, -210.345, 9.57875, 0.66", "16.3799, -214.636, 9.47528, 0.66", "16.5859, -221.264, 9.21385, 0.66", "16.7468, -225.294, 9.24204, 0.66", "16.8726, -230.183, 9.34322, 0.66", "17.0222, -236.802, 9.44804, 0.66", "17.0833, -241.026, 9.3204, 0.66", "17.2077, -246.706, 8.90312, 0.66", "17.4933, -252.056, 8.46758, 0.66" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "7.63358, -32.0281, -6.09018, 0.66", "9.24319, -33.7324, -5.54184, 0.66", "12.9436, -37.6504, -4.28124, 0.33", "21.4139, -46.6189, -1.39569, 0.33", "21.7335, -46.9572, -1.28682, 0.66", "25.1516, -50.5764, -0.122365, 0.33" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "14.9249, -33.7725, -0.194444, 0.33", "21.077, -47.4528, -0.194444, 0.33", "27.2291, -61.1331, -0.194444, 0.33" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "17.4933, -252.056, 8.46758, 0.66", "19.2179, -254.304, 9.80233, 0.66", "20.0955, -255.589, 10.7305, 0.66", "21.2416, -257.587, 12.7149, 0.66", "21.9046, -258.784, 14.0931, 0.66", "23.0854, -260.99, 16.8849, 0.66", "23.9947, -262.596, 19.0251, 0.66", "24.8035, -264.065, 21.2314, 0.66", "26.5757, -266.909, 25.9672, 0.66", "27.6035, -268.395, 28.6533, 0.66", "28.783, -270.114, 31.8311, 0.33", "29.2861, -270.788, 33.0643, 0.33", "29.4795, -271.001, 33.4769, 0.66", "30.7397, -272.119, 35.8182, 0.33", "31.0831, -272.326, 36.1978, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "17.4933, -252.056, 8.46758, 0.66", "18.0169, -257.098, 10.0544, 0.66", "18.6797, -263.615, 12.1363, 0.66", "20.2172, -276.646, 16.1359, 0.66", "20.8398, -282.324, 17.8099, 0.66", "21.6996, -289.235, 19.9118, 0.66", "22.5306, -296.256, 21.8414, 0.66", "23.002, -300.202, 22.8013, 0.66", "23.491, -305.664, 23.8897, 0.66", "24.3768, -316.166, 25.5862, 0.66", "24.9007, -322.134, 26.2805, 0.66", "25.4645, -329.134, 26.9785, 0.66", "25.8211, -335.058, 27.19, 0.66", "25.9337, -338.27, 27.263, 0.66", "26.1413, -349.066, 27.3337, 0.66", "26.2381, -354.652, 27.2004, 0.66", "26.245, -362.396, 26.9396, 0.66", "26.3828, -368.598, 26.9864, 0.66", "26.4471, -371.351, 26.9772, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "26.4471, -371.351, 26.9772, 0.66", "26.8782, -374.536, 27.2817, 0.66", "27.2216, -379.723, 28.2303, 0.66", "27.4731, -385.261, 29.392, 0.66", "27.542, -388.898, 30.1579, 0.66", "27.6307, -393.923, 31.1029, 0.66", "27.7147, -402.811, 32.4784, 0.66", "27.6416, -408.893, 33.2801, 0.66", "27.512, -413.068, 33.8574, 0.66", "27.437, -417.432, 34.3625, 0.66", "27.4053, -422.326, 34.8877, 0.66", "27.4283, -425.673, 35.221, 0.66", "27.6026, -430.264, 35.5849, 0.66", "27.8575, -434.483, 35.9158, 0.66", "28.4239, -444.408, 36.9184, 0.66", "28.7029, -448.353, 37.3967, 0.66", "29.3219, -458.257, 38.5037, 0.66", "29.564, -462.249, 38.8074, 0.66", "29.7719, -466.094, 38.9522, 0.66", "29.9595, -469.551, 38.9396, 0.66", "30.2074, -475.214, 38.8338, 0.66", "30.3641, -480.059, 38.678, 0.66", "30.6808, -489.37, 38.0537, 0.66", "30.9398, -494.07, 37.772, 0.66", "31.1597, -497.729, 37.5773, 0.66", "31.4959, -502.65, 37.3586, 0.66", "32.7984, -521.167, 36.5026, 0.66", "33.3932, -527.966, 36.0977, 0.66", "35.084, -545.807, 34.8181, 0.66", "35.7655, -552.548, 34.2581, 0.66", "36.4558, -559.179, 33.7619, 0.66", "36.9683, -563.792, 33.4553, 0.66", "37.7489, -570.102, 33.0201, 0.66", "38.4801, -577.125, 32.5288, 0.66", "39.2757, -584.778, 31.7084, 0.66", "39.6909, -589.055, 31.2514, 0.66", "39.9648, -592.038, 31.0187, 0.66", "40.849, -603.621, 30.7277, 0.66", "41.119, -607.232, 30.6461, 0.66", "41.5543, -613.155, 30.2463, 0.66", "42.0234, -619.074, 29.7598, 0.66", "42.4537, -623.66, 29.4421, 0.66", "43.5072, -634.893, 29.125, 0.66", "44.798, -647.795, 29.1179, 0.66", "45.7436, -656.575, 29.0859, 0.66", "46.2273, -660.987, 28.9869, 0.66", "48.1029, -677.123, 28.3358, 0.66", "49.2589, -687.471, 27.5064, 0.66", "49.6122, -690.492, 27.205, 0.66", "50.2323, -695.388, 26.6126, 0.66", "51.1907, -702.56, 25.5348, 0.66", "51.5666, -705.657, 24.9433, 0.66", "52.5222, -713.944, 22.9902, 0.66", "54.659, -731.22, 18.6686, 0.66", "55.7541, -740.138, 16.7286, 0.66", "56.1771, -743.47, 16.1282, 0.33", "56.4739, -745.697, 15.8153, 1.33", "57.2624, -750.982, 15.419, 0.66", "58.3859, -757.363, 15.3861, 0.66", "59.2575, -761.893, 15.5278, 0.66", "60.1738, -766.482, 15.8271, 0.66", "61.0176, -770.232, 16.0757, 0.66", "64.4569, -785.653, 17.5061, 0.66", "64.9158, -787.83, 17.7587, 0.33", "65.514, -790.942, 18.0989, 1.33", "66.1093, -794.028, 18.3663, 0.66", "66.5477, -796.454, 18.5594, 0.33", "67.6762, -803.156, 19.1096, 0.66", "67.9192, -806.632, 19.6615, 0.66", "68.084, -811.234, 20.5783, 0.33" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 23
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "26.4471, -371.351, 26.9772, 0.66", "24.4755, -377.356, 26.3538, 0.66", "22.8713, -382.453, 25.7737, 0.66", "21.7329, -386.283, 25.6051, 0.33", "20.1384, -391.676, 25.5755, 0.33", "19.8688, -392.557, 25.6135, 0.66", "19.0316, -395.419, 25.8163, 0.33", "18.4434, -397.508, 26.091, 0.66", "17.2306, -402.454, 26.6384, 0.33", "17.0489, -403.236, 26.7501, 0.66", "15.8144, -408.533, 27.4896, 0.33", "15.278, -411.278, 27.9913, 0.33", "14.8087, -414.261, 28.6348, 0.66", "14.3136, -417.834, 29.5151, 0.33", "14.1133, -419.763, 29.9692, 0.33", "14.0579, -420.844, 30.2915, 0.66", "14.0655, -425.395, 32.36, 0.33", "14.0561, -426.06, 32.75, 0.66", "14.0691, -427.736, 33.908, 0.33", "14.0569, -428.598, 34.5175, 0.33", "14.032, -429.511, 35.065, 0.66", "13.8495, -432.928, 36.7317, 0.33", "13.6431, -435.017, 37.3866, 0.33", "13.5852, -435.805, 37.5841, 0.66", "13.5358, -437.334, 37.8463, 0.33", "13.5111, -438.143, 37.9299, 0.66", "13.4836, -439.171, 37.9756, 0.33", "13.4614, -440.234, 37.9466, 0.66", "13.3988, -441.793, 37.9273, 0.33", "13.3629, -442.362, 37.9298, 0.66", "12.9705, -447.078, 38.0432, 0.33", "12.9387, -447.379, 38.0506, 0.66", "12.7875, -448.465, 38.0774, 0.33", "12.6929, -449.03, 38.0911, 0.66", "12.4563, -450.573, 38.2854, 0.33", "12.3612, -451.28, 38.4242, 0.66", "12.228, -452.544, 38.7394, 0.33", "12.146, -453.439, 38.9769, 0.66", "12.0778, -454.464, 39.2807, 0.33", "11.8136, -459.236, 40.8608, 0.33", "11.7535, -460.629, 41.3948, 0.66" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "68.084, -811.234, 20.5783, 0.66", "69.1343, -815.602, 19.7727, 0.66", "69.5992, -817.881, 19.8812, 1.33", "69.9408, -819.846, 20.1341, 0.66", "70.3316, -822.316, 20.3764, 0.66", "71.1145, -827.647, 21.143, 0.33", "72.0833, -834.099, 22.2398, 0.66", "73.2247, -842.447, 24.1637, 0.66", "73.8267, -846.606, 25.2859, 0.66", "74.6151, -851.234, 26.4494, 0.33", "75.7127, -857.146, 27.7158, 0.33", "76.0248, -858.815, 27.9527, 0.66", "76.3947, -860.187, 27.9112, 0.33", "76.7446, -861.369, 27.6912, 0.66", "78.8957, -868.25, 26.1056, 0.33", "79.8283, -871.122, 25.4478, 0.66", "80.7014, -873.842, 24.7199, 0.33", "82.9488, -881.586, 22.953, 0.33", "84.2431, -886.129, 22.1057, 0.66", "86.5279, -894.368, 20.8903, 0.33", "87.5299, -898.262, 20.5092, 0.66", "88.5067, -902.109, 20.2262, 1.33", "90.6549, -910.903, 19.9256, 0.33", "91.5982, -915.269, 20.0335, 0.33", "91.9518, -916.988, 20.1163, 0.66", "92.7239, -921.329, 20.462, 0.33", "93.6617, -927.16, 21.006, 0.33", "94.0031, -929.291, 21.2731, 1.33", "94.9521, -935.413, 22.0303, 0.33", "95.1867, -937.538, 22.2956, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "68.084, -811.234, 20.5783, 0.66", "66.4803, -813.2, 18.9332, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "95.1867, -937.538, 22.2956, 0.66", "93.0223, -937.258, 22.0332, 0.66" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "95.1867, -937.538, 22.2956, 0.66", "95.4157, -938.581, 22.2068, 0.66", "96.4352, -943.227, 21.8112, 0.33", "96.7594, -944.704, 21.6853, 1.33" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "96.7594, -944.704, 21.6853, 0.33", "99.6799, -955.61, 29.8753, 0.33", "99.9901, -956.668, 30.5976, 1.33", "100.96, -959.619, 32.4791, 0.33", "101.201, -960.229, 32.8023, 0.66", "102.519, -963.123, 34.0994, 0.33", "102.919, -964.001, 34.4931, 0.66", "103.405, -964.787, 34.4943, 0.33", "104.092, -965.764, 34.4775, 0.66", "106.697, -968.791, 34.2977, 0.33", "107.751, -969.882, 34.1899, 1.33" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "96.7594, -944.704, 21.6853, 0.33", "96.5941, -960.261, 26.2261, 0.33", "96.5039, -968.745, 28.7026, 0.33", "96.4897, -970.078, 29.0918, 0.66", "96.3967, -978.835, 31.6478, 0.33", "96.3843, -980.002, 31.9886, 0.66" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_11", "dend_8", "dend_8", "dend_8", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cNAC_149_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cNAC_149_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cNAC187_L4_BP_2a2ec4bfaa_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_12, id: dend_12, parent: dend_2
create dend_12
public dend_12
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_5, id: dend_5, parent: dend_3
create dend_5
public dend_5
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_11, id: dend_11, parent: dend_7
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_16
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cNAC_149_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cNAC_149_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_0(0), soma_0(0.4500001318721313)
    connect axon_0(0), soma_0(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_12(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_5(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_11(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -3.08452, 6.27464, 0.312461, 1.46623 ) }
    soma_0 { pt3dadd( -2.79927, 5.64032, 0.287115, 2.64844 ) }
    soma_0 { pt3dadd( -2.51401, 5.00599, 0.26177, 4.10361 ) }
    soma_0 { pt3dadd( -2.22875, 4.37167, 0.236425, 4.91598 ) }
    soma_0 { pt3dadd( -1.94349, 3.73735, 0.21108, 5.72835 ) }
    soma_0 { pt3dadd( -1.65823, 3.10303, 0.185734, 6.53421 ) }
    soma_0 { pt3dadd( -1.37297, 2.46871, 0.160389, 7.31212 ) }
    soma_0 { pt3dadd( -1.08771, 1.83438, 0.135044, 8.08989 ) }
    soma_0 { pt3dadd( -0.802456, 1.20006, 0.109699, 8.85679 ) }
    soma_0 { pt3dadd( -0.517198, 0.56574, 0.0843534, 8.93483 ) }
    soma_0 { pt3dadd( -0.23194, -0.0685822, 0.0590082, 8.92633 ) }
    soma_0 { pt3dadd( 0.0533189, -0.702904, 0.033663, 8.91784 ) }
    soma_0 { pt3dadd( 0.338577, -1.33723, 0.00831775, 8.90934 ) }
    soma_0 { pt3dadd( 0.623836, -1.97155, -0.0170275, 8.90084 ) }
    soma_0 { pt3dadd( 0.909094, -2.60587, -0.0423727, 8.82493 ) }
    soma_0 { pt3dadd( 1.19435, -3.24019, -0.067718, 7.82232 ) }
    soma_0 { pt3dadd( 1.47961, -3.87451, -0.0930632, 6.5965 ) }
    soma_0 { pt3dadd( 1.76487, -4.50884, -0.118408, 5.37067 ) }
    soma_0 { pt3dadd( 2.05013, -5.14316, -0.143754, 4.14485 ) }
    soma_0 { pt3dadd( 2.33539, -5.77748, -0.169099, 2.91903 ) }
    soma_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 1.76337 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 21/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 1.61629, -5.87753, -1.26548, 1.33 ) }
    dend_0 { pt3dadd( 2.7496, -10.8028, -2.17417, 1.33 ) }
    dend_0 { pt3dadd( 4.62861, -18.9688, -3.68077, 0.66 ) }
    dend_0 { pt3dadd( 6.08339, -25.2911, -4.84722, 0.66 ) }
    dend_0 { pt3dadd( 7.63358, -32.0281, -6.09018, 1.33 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 26/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 8.77276, -20.0921, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 29/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 7.63358, -32.0281, -6.09018, 0.66 ) }
    dend_2 { pt3dadd( 8.01686, -44.8575, -3.07891, 0.66 ) }
    dend_2 { pt3dadd( 8.56703, -63.9136, 1.41763, 0.66 ) }
    dend_2 { pt3dadd( 9.2267, -87.1766, 7.08613, 0.66 ) }
    dend_2 { pt3dadd( 9.81107, -105.13, 11.4852, 0.66 ) }
    dend_2 { pt3dadd( 10.1636, -115.548, 14.0297, 0.66 ) }
    dend_2 { pt3dadd( 10.2682, -119.005, 14.8671, 0.66 ) }
    dend_2 { pt3dadd( 10.4254, -123.695, 16.0371, 0.66 ) }
    dend_2 { pt3dadd( 10.4975, -128.081, 17.1604, 0.66 ) }
    dend_2 { pt3dadd( 10.5806, -133.142, 18.3652, 0.66 ) }
    dend_2 { pt3dadd( 10.645, -135.874, 18.6803, 0.66 ) }
    dend_2 { pt3dadd( 10.6936, -139.282, 18.7665, 0.66 ) }
    dend_2 { pt3dadd( 10.8228, -144.418, 18.315, 0.66 ) }
    dend_2 { pt3dadd( 10.9589, -151.166, 17.4015, 0.66 ) }
    dend_2 { pt3dadd( 11.0754, -154.106, 16.98, 0.66 ) }
    dend_2 { pt3dadd( 11.7326, -167.906, 14.8788, 0.66 ) }
    dend_2 { pt3dadd( 11.9665, -171.163, 14.3323, 0.66 ) }
    dend_2 { pt3dadd( 12.8774, -181.221, 12.4028, 0.66 ) }
    dend_2 { pt3dadd( 13.3092, -185.466, 11.5543, 0.66 ) }
    dend_2 { pt3dadd( 14.2346, -193.266, 10.0992, 0.66 ) }
    dend_2 { pt3dadd( 14.7656, -197.737, 9.55614, 0.66 ) }
    dend_2 { pt3dadd( 15.2798, -202.09, 9.46183, 0.66 ) }
    dend_2 { pt3dadd( 15.775, -206.293, 9.51844, 0.66 ) }
    dend_2 { pt3dadd( 16.0985, -210.345, 9.57875, 0.66 ) }
    dend_2 { pt3dadd( 16.3799, -214.636, 9.47528, 0.66 ) }
    dend_2 { pt3dadd( 16.5859, -221.264, 9.21385, 0.66 ) }
    dend_2 { pt3dadd( 16.7468, -225.294, 9.24204, 0.66 ) }
    dend_2 { pt3dadd( 16.8726, -230.183, 9.34322, 0.66 ) }
    dend_2 { pt3dadd( 17.0222, -236.802, 9.44804, 0.66 ) }
    dend_2 { pt3dadd( 17.0833, -241.026, 9.3204, 0.66 ) }
    dend_2 { pt3dadd( 17.2077, -246.706, 8.90312, 0.66 ) }
    dend_2 { pt3dadd( 17.4933, -252.056, 8.46758, 0.66 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 61/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 7.63358, -32.0281, -6.09018, 0.66 ) }
    dend_1 { pt3dadd( 9.24319, -33.7324, -5.54184, 0.66 ) }
    dend_1 { pt3dadd( 12.9436, -37.6504, -4.28124, 0.33 ) }
    dend_1 { pt3dadd( 21.4139, -46.6189, -1.39569, 0.33 ) }
    dend_1 { pt3dadd( 21.7335, -46.9572, -1.28682, 0.66 ) }
    dend_1 { pt3dadd( 25.1516, -50.5764, -0.122365, 0.33 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 67/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 21.077, -47.4528, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 27.2291, -61.1331, -0.194444, 0.33 ) }
    // Section: dend_12, id: dend_12, parent: dend_2 (entry count 70/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 17.4933, -252.056, 8.46758, 0.66 ) }
    dend_12 { pt3dadd( 19.2179, -254.304, 9.80233, 0.66 ) }
    dend_12 { pt3dadd( 20.0955, -255.589, 10.7305, 0.66 ) }
    dend_12 { pt3dadd( 21.2416, -257.587, 12.7149, 0.66 ) }
    dend_12 { pt3dadd( 21.9046, -258.784, 14.0931, 0.66 ) }
    dend_12 { pt3dadd( 23.0854, -260.99, 16.8849, 0.66 ) }
    dend_12 { pt3dadd( 23.9947, -262.596, 19.0251, 0.66 ) }
    dend_12 { pt3dadd( 24.8035, -264.065, 21.2314, 0.66 ) }
    dend_12 { pt3dadd( 26.5757, -266.909, 25.9672, 0.66 ) }
    dend_12 { pt3dadd( 27.6035, -268.395, 28.6533, 0.66 ) }
    dend_12 { pt3dadd( 28.783, -270.114, 31.8311, 0.33 ) }
    dend_12 { pt3dadd( 29.2861, -270.788, 33.0643, 0.33 ) }
    dend_12 { pt3dadd( 29.4795, -271.001, 33.4769, 0.66 ) }
    dend_12 { pt3dadd( 30.7397, -272.119, 35.8182, 0.33 ) }
    dend_12 { pt3dadd( 31.0831, -272.326, 36.1978, 0.66 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 85/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 17.4933, -252.056, 8.46758, 0.66 ) }
    dend_3 { pt3dadd( 18.0169, -257.098, 10.0544, 0.66 ) }
    dend_3 { pt3dadd( 18.6797, -263.615, 12.1363, 0.66 ) }
    dend_3 { pt3dadd( 20.2172, -276.646, 16.1359, 0.66 ) }
    dend_3 { pt3dadd( 20.8398, -282.324, 17.8099, 0.66 ) }
    dend_3 { pt3dadd( 21.6996, -289.235, 19.9118, 0.66 ) }
    dend_3 { pt3dadd( 22.5306, -296.256, 21.8414, 0.66 ) }
    dend_3 { pt3dadd( 23.002, -300.202, 22.8013, 0.66 ) }
    dend_3 { pt3dadd( 23.491, -305.664, 23.8897, 0.66 ) }
    dend_3 { pt3dadd( 24.3768, -316.166, 25.5862, 0.66 ) }
    dend_3 { pt3dadd( 24.9007, -322.134, 26.2805, 0.66 ) }
    dend_3 { pt3dadd( 25.4645, -329.134, 26.9785, 0.66 ) }
    dend_3 { pt3dadd( 25.8211, -335.058, 27.19, 0.66 ) }
    dend_3 { pt3dadd( 25.9337, -338.27, 27.263, 0.66 ) }
    dend_3 { pt3dadd( 26.1413, -349.066, 27.3337, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_3 { pt3dadd( 26.2381, -354.652, 27.2004, 0.66 ) }
    dend_3 { pt3dadd( 26.245, -362.396, 26.9396, 0.66 ) }
    dend_3 { pt3dadd( 26.3828, -368.598, 26.9864, 0.66 ) }
    dend_3 { pt3dadd( 26.4471, -371.351, 26.9772, 0.66 ) }
    // Section: dend_5, id: dend_5, parent: dend_3 (entry count 4/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 26.4471, -371.351, 26.9772, 0.66 ) }
    dend_5 { pt3dadd( 26.8782, -374.536, 27.2817, 0.66 ) }
    dend_5 { pt3dadd( 27.2216, -379.723, 28.2303, 0.66 ) }
    dend_5 { pt3dadd( 27.4731, -385.261, 29.392, 0.66 ) }
    dend_5 { pt3dadd( 27.542, -388.898, 30.1579, 0.66 ) }
    dend_5 { pt3dadd( 27.6307, -393.923, 31.1029, 0.66 ) }
    dend_5 { pt3dadd( 27.7147, -402.811, 32.4784, 0.66 ) }
    dend_5 { pt3dadd( 27.6416, -408.893, 33.2801, 0.66 ) }
    dend_5 { pt3dadd( 27.512, -413.068, 33.8574, 0.66 ) }
    dend_5 { pt3dadd( 27.437, -417.432, 34.3625, 0.66 ) }
    dend_5 { pt3dadd( 27.4053, -422.326, 34.8877, 0.66 ) }
    dend_5 { pt3dadd( 27.4283, -425.673, 35.221, 0.66 ) }
    dend_5 { pt3dadd( 27.6026, -430.264, 35.5849, 0.66 ) }
    dend_5 { pt3dadd( 27.8575, -434.483, 35.9158, 0.66 ) }
    dend_5 { pt3dadd( 28.4239, -444.408, 36.9184, 0.66 ) }
    dend_5 { pt3dadd( 28.7029, -448.353, 37.3967, 0.66 ) }
    dend_5 { pt3dadd( 29.3219, -458.257, 38.5037, 0.66 ) }
    dend_5 { pt3dadd( 29.564, -462.249, 38.8074, 0.66 ) }
    dend_5 { pt3dadd( 29.7719, -466.094, 38.9522, 0.66 ) }
    dend_5 { pt3dadd( 29.9595, -469.551, 38.9396, 0.66 ) }
    dend_5 { pt3dadd( 30.2074, -475.214, 38.8338, 0.66 ) }
    dend_5 { pt3dadd( 30.3641, -480.059, 38.678, 0.66 ) }
    dend_5 { pt3dadd( 30.6808, -489.37, 38.0537, 0.66 ) }
    dend_5 { pt3dadd( 30.9398, -494.07, 37.772, 0.66 ) }
    dend_5 { pt3dadd( 31.1597, -497.729, 37.5773, 0.66 ) }
    dend_5 { pt3dadd( 31.4959, -502.65, 37.3586, 0.66 ) }
    dend_5 { pt3dadd( 32.7984, -521.167, 36.5026, 0.66 ) }
    dend_5 { pt3dadd( 33.3932, -527.966, 36.0977, 0.66 ) }
    dend_5 { pt3dadd( 35.084, -545.807, 34.8181, 0.66 ) }
    dend_5 { pt3dadd( 35.7655, -552.548, 34.2581, 0.66 ) }
    dend_5 { pt3dadd( 36.4558, -559.179, 33.7619, 0.66 ) }
    dend_5 { pt3dadd( 36.9683, -563.792, 33.4553, 0.66 ) }
    dend_5 { pt3dadd( 37.7489, -570.102, 33.0201, 0.66 ) }
    dend_5 { pt3dadd( 38.4801, -577.125, 32.5288, 0.66 ) }
    dend_5 { pt3dadd( 39.2757, -584.778, 31.7084, 0.66 ) }
    dend_5 { pt3dadd( 39.6909, -589.055, 31.2514, 0.66 ) }
    dend_5 { pt3dadd( 39.9648, -592.038, 31.0187, 0.66 ) }
    dend_5 { pt3dadd( 40.849, -603.621, 30.7277, 0.66 ) }
    dend_5 { pt3dadd( 41.119, -607.232, 30.6461, 0.66 ) }
    dend_5 { pt3dadd( 41.5543, -613.155, 30.2463, 0.66 ) }
    dend_5 { pt3dadd( 42.0234, -619.074, 29.7598, 0.66 ) }
    dend_5 { pt3dadd( 42.4537, -623.66, 29.4421, 0.66 ) }
    dend_5 { pt3dadd( 43.5072, -634.893, 29.125, 0.66 ) }
    dend_5 { pt3dadd( 44.798, -647.795, 29.1179, 0.66 ) }
    dend_5 { pt3dadd( 45.7436, -656.575, 29.0859, 0.66 ) }
    dend_5 { pt3dadd( 46.2273, -660.987, 28.9869, 0.66 ) }
    dend_5 { pt3dadd( 48.1029, -677.123, 28.3358, 0.66 ) }
    dend_5 { pt3dadd( 49.2589, -687.471, 27.5064, 0.66 ) }
    dend_5 { pt3dadd( 49.6122, -690.492, 27.205, 0.66 ) }
    dend_5 { pt3dadd( 50.2323, -695.388, 26.6126, 0.66 ) }
    dend_5 { pt3dadd( 51.1907, -702.56, 25.5348, 0.66 ) }
    dend_5 { pt3dadd( 51.5666, -705.657, 24.9433, 0.66 ) }
    dend_5 { pt3dadd( 52.5222, -713.944, 22.9902, 0.66 ) }
    dend_5 { pt3dadd( 54.659, -731.22, 18.6686, 0.66 ) }
    dend_5 { pt3dadd( 55.7541, -740.138, 16.7286, 0.66 ) }
    dend_5 { pt3dadd( 56.1771, -743.47, 16.1282, 0.33 ) }
    dend_5 { pt3dadd( 56.4739, -745.697, 15.8153, 1.33 ) }
    dend_5 { pt3dadd( 57.2624, -750.982, 15.419, 0.66 ) }
    dend_5 { pt3dadd( 58.3859, -757.363, 15.3861, 0.66 ) }
    dend_5 { pt3dadd( 59.2575, -761.893, 15.5278, 0.66 ) }
    dend_5 { pt3dadd( 60.1738, -766.482, 15.8271, 0.66 ) }
    dend_5 { pt3dadd( 61.0176, -770.232, 16.0757, 0.66 ) }
    dend_5 { pt3dadd( 64.4569, -785.653, 17.5061, 0.66 ) }
    dend_5 { pt3dadd( 64.9158, -787.83, 17.7587, 0.33 ) }
    dend_5 { pt3dadd( 65.514, -790.942, 18.0989, 1.33 ) }
    dend_5 { pt3dadd( 66.1093, -794.028, 18.3663, 0.66 ) }
    dend_5 { pt3dadd( 66.5477, -796.454, 18.5594, 0.33 ) }
    dend_5 { pt3dadd( 67.6762, -803.156, 19.1096, 0.66 ) }
    dend_5 { pt3dadd( 67.9192, -806.632, 19.6615, 0.66 ) }
    dend_5 { pt3dadd( 68.084, -811.234, 20.5783, 0.33 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 74/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 26.4471, -371.351, 26.9772, 0.66 ) }
    dend_4 { pt3dadd( 24.4755, -377.356, 26.3538, 0.66 ) }
    dend_4 { pt3dadd( 22.8713, -382.453, 25.7737, 0.66 ) }
    dend_4 { pt3dadd( 21.7329, -386.283, 25.6051, 0.33 ) }
    dend_4 { pt3dadd( 20.1384, -391.676, 25.5755, 0.33 ) }
    dend_4 { pt3dadd( 19.8688, -392.557, 25.6135, 0.66 ) }
    dend_4 { pt3dadd( 19.0316, -395.419, 25.8163, 0.33 ) }
    dend_4 { pt3dadd( 18.4434, -397.508, 26.091, 0.66 ) }
    dend_4 { pt3dadd( 17.2306, -402.454, 26.6384, 0.33 ) }
    dend_4 { pt3dadd( 17.0489, -403.236, 26.7501, 0.66 ) }
    dend_4 { pt3dadd( 15.8144, -408.533, 27.4896, 0.33 ) }
    dend_4 { pt3dadd( 15.278, -411.278, 27.9913, 0.33 ) }
    dend_4 { pt3dadd( 14.8087, -414.261, 28.6348, 0.66 ) }
    dend_4 { pt3dadd( 14.3136, -417.834, 29.5151, 0.33 ) }
    dend_4 { pt3dadd( 14.1133, -419.763, 29.9692, 0.33 ) }
    dend_4 { pt3dadd( 14.0579, -420.844, 30.2915, 0.66 ) }
    dend_4 { pt3dadd( 14.0655, -425.395, 32.36, 0.33 ) }
    dend_4 { pt3dadd( 14.0561, -426.06, 32.75, 0.66 ) }
    dend_4 { pt3dadd( 14.0691, -427.736, 33.908, 0.33 ) }
    dend_4 { pt3dadd( 14.0569, -428.598, 34.5175, 0.33 ) }
    dend_4 { pt3dadd( 14.032, -429.511, 35.065, 0.66 ) }
    dend_4 { pt3dadd( 13.8495, -432.928, 36.7317, 0.33 ) }
    dend_4 { pt3dadd( 13.6431, -435.017, 37.3866, 0.33 ) }
    dend_4 { pt3dadd( 13.5852, -435.805, 37.5841, 0.66 ) }
    dend_4 { pt3dadd( 13.5358, -437.334, 37.8463, 0.33 ) }
    dend_4 { pt3dadd( 13.5111, -438.143, 37.9299, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_4 { pt3dadd( 13.4836, -439.171, 37.9756, 0.33 ) }
    dend_4 { pt3dadd( 13.4614, -440.234, 37.9466, 0.66 ) }
    dend_4 { pt3dadd( 13.3988, -441.793, 37.9273, 0.33 ) }
    dend_4 { pt3dadd( 13.3629, -442.362, 37.9298, 0.66 ) }
    dend_4 { pt3dadd( 12.9705, -447.078, 38.0432, 0.33 ) }
    dend_4 { pt3dadd( 12.9387, -447.379, 38.0506, 0.66 ) }
    dend_4 { pt3dadd( 12.7875, -448.465, 38.0774, 0.33 ) }
    dend_4 { pt3dadd( 12.6929, -449.03, 38.0911, 0.66 ) }
    dend_4 { pt3dadd( 12.4563, -450.573, 38.2854, 0.33 ) }
    dend_4 { pt3dadd( 12.3612, -451.28, 38.4242, 0.66 ) }
    dend_4 { pt3dadd( 12.228, -452.544, 38.7394, 0.33 ) }
    dend_4 { pt3dadd( 12.146, -453.439, 38.9769, 0.66 ) }
    dend_4 { pt3dadd( 12.0778, -454.464, 39.2807, 0.33 ) }
    dend_4 { pt3dadd( 11.8136, -459.236, 40.8608, 0.33 ) }
    dend_4 { pt3dadd( 11.7535, -460.629, 41.3948, 0.66 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 15/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 68.084, -811.234, 20.5783, 0.66 ) }
    dend_7 { pt3dadd( 69.1343, -815.602, 19.7727, 0.66 ) }
    dend_7 { pt3dadd( 69.5992, -817.881, 19.8812, 1.33 ) }
    dend_7 { pt3dadd( 69.9408, -819.846, 20.1341, 0.66 ) }
    dend_7 { pt3dadd( 70.3316, -822.316, 20.3764, 0.66 ) }
    dend_7 { pt3dadd( 71.1145, -827.647, 21.143, 0.33 ) }
    dend_7 { pt3dadd( 72.0833, -834.099, 22.2398, 0.66 ) }
    dend_7 { pt3dadd( 73.2247, -842.447, 24.1637, 0.66 ) }
    dend_7 { pt3dadd( 73.8267, -846.606, 25.2859, 0.66 ) }
    dend_7 { pt3dadd( 74.6151, -851.234, 26.4494, 0.33 ) }
    dend_7 { pt3dadd( 75.7127, -857.146, 27.7158, 0.33 ) }
    dend_7 { pt3dadd( 76.0248, -858.815, 27.9527, 0.66 ) }
    dend_7 { pt3dadd( 76.3947, -860.187, 27.9112, 0.33 ) }
    dend_7 { pt3dadd( 76.7446, -861.369, 27.6912, 0.66 ) }
    dend_7 { pt3dadd( 78.8957, -868.25, 26.1056, 0.33 ) }
    dend_7 { pt3dadd( 79.8283, -871.122, 25.4478, 0.66 ) }
    dend_7 { pt3dadd( 80.7014, -873.842, 24.7199, 0.33 ) }
    dend_7 { pt3dadd( 82.9488, -881.586, 22.953, 0.33 ) }
    dend_7 { pt3dadd( 84.2431, -886.129, 22.1057, 0.66 ) }
    dend_7 { pt3dadd( 86.5279, -894.368, 20.8903, 0.33 ) }
    dend_7 { pt3dadd( 87.5299, -898.262, 20.5092, 0.66 ) }
    dend_7 { pt3dadd( 88.5067, -902.109, 20.2262, 1.33 ) }
    dend_7 { pt3dadd( 90.6549, -910.903, 19.9256, 0.33 ) }
    dend_7 { pt3dadd( 91.5982, -915.269, 20.0335, 0.33 ) }
    dend_7 { pt3dadd( 91.9518, -916.988, 20.1163, 0.66 ) }
    dend_7 { pt3dadd( 92.7239, -921.329, 20.462, 0.33 ) }
    dend_7 { pt3dadd( 93.6617, -927.16, 21.006, 0.33 ) }
    dend_7 { pt3dadd( 94.0031, -929.291, 21.2731, 1.33 ) }
    dend_7 { pt3dadd( 94.9521, -935.413, 22.0303, 0.33 ) }
    dend_7 { pt3dadd( 95.1867, -937.538, 22.2956, 0.66 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 45/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 68.084, -811.234, 20.5783, 0.66 ) }
    dend_6 { pt3dadd( 66.4803, -813.2, 18.9332, 0.66 ) }
    // Section: dend_11, id: dend_11, parent: dend_7 (entry count 47/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 95.1867, -937.538, 22.2956, 0.66 ) }
    dend_11 { pt3dadd( 93.0223, -937.258, 22.0332, 0.66 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 49/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 95.1867, -937.538, 22.2956, 0.66 ) }
    dend_8 { pt3dadd( 95.4157, -938.581, 22.2068, 0.66 ) }
    dend_8 { pt3dadd( 96.4352, -943.227, 21.8112, 0.33 ) }
    dend_8 { pt3dadd( 96.7594, -944.704, 21.6853, 1.33 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 53/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 96.7594, -944.704, 21.6853, 0.33 ) }
    dend_10 { pt3dadd( 99.6799, -955.61, 29.8753, 0.33 ) }
    dend_10 { pt3dadd( 99.9901, -956.668, 30.5976, 1.33 ) }
    dend_10 { pt3dadd( 100.96, -959.619, 32.4791, 0.33 ) }
    dend_10 { pt3dadd( 101.201, -960.229, 32.8023, 0.66 ) }
    dend_10 { pt3dadd( 102.519, -963.123, 34.0994, 0.33 ) }
    dend_10 { pt3dadd( 102.919, -964.001, 34.4931, 0.66 ) }
    dend_10 { pt3dadd( 103.405, -964.787, 34.4943, 0.33 ) }
    dend_10 { pt3dadd( 104.092, -965.764, 34.4775, 0.66 ) }
    dend_10 { pt3dadd( 106.697, -968.791, 34.2977, 0.33 ) }
    dend_10 { pt3dadd( 107.751, -969.882, 34.1899, 1.33 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 64/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 96.7594, -944.704, 21.6853, 0.33 ) }
    dend_9 { pt3dadd( 96.5941, -960.261, 26.2261, 0.33 ) }
    dend_9 { pt3dadd( 96.5039, -968.745, 28.7026, 0.33 ) }
    dend_9 { pt3dadd( 96.4897, -970.078, 29.0918, 0.66 ) }
    dend_9 { pt3dadd( 96.3967, -978.835, 31.6478, 0.33 ) }
    dend_9 { pt3dadd( 96.3843, -980.002, 31.9886, 0.66 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_2 = new SectionList()
    dend_0 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_2 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_3 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_5 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_4 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_7 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_0 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_1 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_12 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_6 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_11 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_8 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_10 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_9 OneSecGrp_SectionRef_16.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_8 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cNAC_149_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cNAC_149_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cNAC_149_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cNAC_149_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_2 nseg = 11
    dend_3 nseg = 7
    dend_5 nseg = 23
    dend_4 nseg = 5
    dend_7 nseg = 7
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cNAC187_L4_BP_2a2ec4bfaa_0_0


