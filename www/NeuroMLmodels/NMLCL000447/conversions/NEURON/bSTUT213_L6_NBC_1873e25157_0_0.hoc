// Cell: bSTUT213_L6_NBC_1873e25157_0_0
/*
{
  "id" : "bSTUT213_L6_NBC_1873e25157_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-7.79996, 1.63899, 0.0, 2.31456", "-7.07575, 1.4414, 0.0, 3.87478", "-6.35154, 1.2438, 0.0, 5.48504", "-5.62733, 1.04621, 0.0, 6.75924", "-4.90312, 0.848615, 0.0, 7.77214", "-4.17891, 0.65102, 0.0, 8.39732", "-3.4547, 0.453425, 0.0, 9.01032", "-2.73049, 0.255831, 0.0, 9.61582", "-2.00628, 0.0582363, 0.0, 9.97495", "-1.28207, -0.139358, 0.0, 10.1182", "-0.557856, -0.336953, 0.0, 10.2615", "0.166353, -0.534547, 0.0, 10.4039", "0.890563, -0.732142, 0.0, 10.3605", "1.61477, -0.929737, 0.0, 10.3021", "2.33898, -1.12733, 0.0, 10.2398", "3.06319, -1.32493, 0.0, 10.0638", "3.7874, -1.52252, 0.0, 9.71016", "4.51161, -1.72011, 0.0, 8.98989", "5.23582, -1.91771, 0.0, 7.92103", "5.96003, -2.1153, 0.0, 6.49304", "6.68424, -2.3129, 0.0, 3.64119" ]
  }, {
    "name" : "dend_34",
    "id" : "dend_34",
    "points3d" : [ "2.72858, -5.60222, 7.36, 1.36", "2.72858, -5.60222, 7.36, 1.36", "3.06806, -7.58247, 7.10526, 1.14", "3.52761, -10.2632, 6.76043, 0.91", "4.12329, -13.7378, 6.31346, 0.91", "4.48319, -15.8372, 6.0434, 0.91", "5.03707, -19.0681, 5.62779, 0.91" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_31",
    "id" : "dend_31",
    "points3d" : [ "-1.14142, -3.24473, -3.98, 0.68", "-1.14142, -3.24473, -3.98, 0.68", "-2.28243, -4.24537, -5.93604, 0.68", "-3.35835, -5.0589, -7.79151, 0.68", "-4.14842, -5.63745, -9.13185, 0.68", "-5.06328, -6.28101, -10.6794, 0.68", "-6.10892, -6.93826, -12.361, 0.68", "-7.15703, -7.55048, -14.0574, 0.68", "-8.10946, -8.02454, -15.6177, 0.68", "-9.14506, -8.47422, -17.2688, 0.68", "-10.3189, -8.95188, -19.0565, 0.68", "-11.6942, -9.46654, -21.0375, 0.68" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "4.57856, -4.08522, 2.8, 0.68", "4.57856, -4.08522, 2.8, 0.68", "6.40438, -6.7102, 3.29091, 0.68", "7.41571, -8.23348, 3.60215, 0.68", "9.23242, -10.9781, 4.20442, 0.68", "10.7953, -13.2378, 4.6891, 0.68", "12.458, -15.5871, 5.152, 0.68", "13.702, -17.2817, 5.46227, 0.68", "15.5984, -19.7579, 5.9165, 0.45", "17.3792, -22.1141, 6.36822, 0.68", "20.0141, -25.5954, 7.1626, 0.68", "21.9315, -28.0652, 7.82273, 0.68", "23.2804, -29.8112, 8.37296, 0.68", "24.4886, -31.344, 8.92635, 0.68", "25.7143, -32.9182, 9.53942, 0.68", "27.2693, -34.9588, 10.3923, 0.68", "28.6299, -36.7089, 11.2413, 0.68", "30.2197, -38.6721, 12.3329, 0.45", "31.3528, -40.0389, 13.1398, 0.45", "33.3435, -42.372, 14.493, 0.45", "35.0243, -44.2177, 15.5775, 0.45", "36.2875, -45.552, 16.401, 0.45", "37.4141, -46.6912, 17.181, 0.45", "38.8484, -48.1332, 18.3331, 0.45", "40.3645, -49.8, 19.7953, 0.45", "41.437, -51.0336, 21.0234, 0.45", "42.2158, -52.0661, 22.0283, 0.45", "43.0625, -53.2737, 23.1015, 0.45", "44.0057, -54.6939, 24.2855, 0.45", "45.2002, -56.5944, 25.8395, 0.45", "46.0795, -58.1109, 27.0637, 0.45", "46.9162, -59.6141, 28.3002, 0.23", "47.8389, -61.2096, 29.5841, 0.23", "48.9131, -62.9588, 30.9613, 0.23", "49.6145, -64.0696, 31.8073, 0.23", "50.3303, -65.2654, 32.7587, 0.23", "51.4979, -67.4394, 34.4778, 0.23" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "6.16864, 1.51128, -0.84, 2.27", "6.16864, 1.51128, -0.84, 2.27", "7.52604, 2.25701, -1.67366, 1.82", "9.36188, 3.26558, -2.80116, 1.36", "10.7503, 4.02836, -3.65388, 1.36" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "3.79865, -4.68997, 5.46, 0.91", "3.79865, -4.68997, 5.46, 0.91", "4.64364, -5.65515, 5.95558, 0.91", "5.61114, -6.70334, 6.54895, 0.68", "6.59337, -7.66784, 7.19265, 0.68", "7.34196, -8.35552, 7.72336, 0.91", "8.15322, -9.02158, 8.34804, 0.91", "8.98654, -9.52305, 9.01268, 0.68", "10.0233, -9.89424, 9.86257, 0.68", "10.8683, -10.1037, 10.5841, 0.68", "11.332, -10.2106, 10.9865, 0.68", "12.2845, -10.4265, 11.8055, 0.68", "13.7482, -10.7696, 12.9643, 0.45", "14.8042, -11.0373, 13.7192, 0.45", "15.9147, -11.3458, 14.3994, 0.45", "17.0188, -11.7069, 15.0242, 0.45", "18.2481, -12.1668, 15.6653, 0.45", "19.1821, -12.5823, 16.1145, 0.45", "20.4878, -13.2342, 16.7222, 0.68", "22.019, -13.9892, 17.3583, 0.68" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "0.288636, -4.61823, 6.82, 0.91", "0.288636, -4.61823, 6.82, 0.91", "-0.790518, -6.25846, 7.68586, 0.91", "-1.89262, -7.8036, 8.56345, 0.91", "-2.87369, -9.17905, 9.34467, 0.91", "-3.7083, -10.3492, 10.0093, 0.91", "-4.59312, -11.5897, 10.7138, 0.91", "-5.39281, -12.6702, 11.384, 0.91", "-6.16816, -13.6179, 12.1154, 0.91" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-6.31134, 0.681023, 6.86, 0.91", "-6.31134, 0.681023, 6.86, 0.91", "-7.09966, 0.681023, 7.16292, 0.91", "-8.84308, 0.681023, 7.83283, 0.91" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-6.99139, 1.57278, -3.54, 0.91", "-6.99139, 1.57278, -3.54, 0.91", "-8.16827, 1.75006, -3.85281, 0.91", "-9.60188, 1.8874, -4.25526, 0.91", "-11.613, 2.0404, -4.89114, 0.91", "-12.6512, 2.10303, -5.25491, 0.91", "-14.2393, 2.16748, -5.8486, 0.91", "-15.7263, 2.17688, -6.44477, 0.91", "-17.1725, 2.14971, -7.04256, 0.91", "-18.8339, 2.08189, -7.74989, 0.68", "-20.816, 1.95619, -8.61395, 0.91", "-22.2862, 1.8577, -9.26976, 0.91", "-23.9275, 1.77342, -10.0375, 0.91", "-26.366, 1.68186, -11.1566, 0.91" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-4.04144, 4.21728, 5.18, 0.91", "-4.04144, 4.21728, 5.18, 0.91", "-4.67912, 6.651, 6.82552, 0.91", "-4.93369, 8.60473, 8.14221, 0.68", "-4.93577, 10.3811, 9.3314, 0.68", "-4.82733, 11.6709, 10.2061, 0.68", "-4.5759, 13.3898, 11.3795, 0.68", "-4.19593, 14.9183, 12.48, 0.68", "-3.50407, 16.9564, 14.0824, 0.68", "-2.82298, 18.9126, 15.6452, 0.68", "-2.33885, 20.2641, 16.7876, 0.68", "-1.93353, 21.467, 17.8975, 0.68", "-1.5221, 22.7721, 19.201, 0.68", "-1.19666, 23.9973, 20.5412, 0.45", "-0.895068, 25.4729, 22.4058, 0.45", "-0.815157, 26.7975, 24.2602, 0.45", "-0.835895, 27.8708, 25.8538, 0.45", "-0.873768, 28.7613, 27.1995, 0.68", "-0.892983, 29.6789, 28.5433, 0.45", "-0.882482, 30.7219, 29.9894, 0.45", "-0.965116, 31.5165, 31.0275, 0.45", "-1.31766, 32.7591, 32.4489, 0.45", "-1.71048, 33.8422, 33.6678, 0.45", "-2.10637, 35.1324, 35.1321, 0.45", "-2.31935, 36.2671, 36.3603, 0.45", "-2.55396, 37.7528, 37.8707, 0.45", "-2.80629, 38.9077, 39.0522, 0.45", "-3.18677, 39.9343, 40.1338, 0.45", "-3.87359, 41.3779, 41.654, 0.45", "-4.40665, 42.4289, 42.7591, 0.45", "-4.88083, 43.5201, 43.9295, 0.45", "-5.11691, 44.3041, 44.7922, 0.45", "-5.49312, 45.9954, 46.615, 0.45", "-5.72067, 47.3224, 47.9732, 0.45", "-5.81755, 48.1532, 48.8879, 0.45", "-5.65149, 49.2279, 50.185, 0.45", "-5.20943, 50.3192, 51.5975, 0.45", "-4.5558, 51.4575, 53.1708, 0.45", "-3.89255, 52.4443, 54.5375, 0.45", "-2.97325, 53.6378, 56.2558, 0.45", "-1.52042, 55.5061, 58.9938, 0.23", "-0.989264, 56.1455, 59.9805, 0.23", "-0.206653, 57.0469, 61.3756, 0.23", "0.670446, 57.9922, 62.7983, 0.23", "1.62963, 58.9761, 64.2054, 0.23", "2.58907, 59.9242, 65.516, 0.23", "3.89438, 61.2664, 67.3518, 0.23", "5.41782, 62.7183, 69.3535, 0.23", "6.91841, 64.0139, 71.1957, 0.23", "8.34587, 65.1452, 72.9184, 0.23", "9.4758, 66.1077, 74.2737, 0.23" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894,
    "numberInternalDivisions" : 5
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "6.68424, -2.3129, 0.0, 0.68", "21.1553, -6.2612, 0.0, 0.68", "35.6263, -10.2095, 0.0, 0.68" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_36",
    "id" : "dend_36",
    "points3d" : [ "5.03707, -19.0681, 5.62779, 0.68", "6.26722, -20.1019, 5.72042, 0.68", "8.42183, -21.9466, 5.78297, 0.68", "10.5064, -23.7845, 5.80728, 0.68", "12.4007, -25.4751, 5.83214, 0.68", "14.7465, -27.7038, 5.86171, 0.68", "16.8274, -29.8542, 5.88019, 0.68", "18.6562, -31.9385, 5.85131, 0.68", "19.7415, -33.2791, 5.79733, 0.68", "21.7048, -35.848, 5.6497, 0.68", "23.5017, -38.2827, 5.48782, 0.68", "24.9696, -40.4247, 5.3415, 0.68", "26.4815, -42.804, 5.23352, 0.45", "27.7489, -44.9609, 5.12111, 0.45", "28.961, -47.1388, 4.89432, 0.45", "30.017, -49.0409, 4.56258, 0.45", "31.5286, -51.5469, 3.91599, 0.45", "32.749, -53.5129, 3.2676, 0.45", "33.972, -55.488, 2.47487, 0.68", "35.2424, -57.4299, 1.58492, 0.68", "36.7167, -59.5481, 0.530575, 0.68", "38.276, -61.5641, -0.539492, 0.45", "39.9438, -63.4686, -1.58083, 0.45", "41.1022, -64.7544, -2.23507, 0.45", "43.1405, -66.9394, -3.16139, 0.45", "44.0948, -67.9382, -3.48519, 0.45", "45.4289, -69.273, -3.82774, 0.45", "47.1236, -70.836, -4.1794, 0.45", "49.4682, -72.7381, -4.64958, 0.45", "51.6649, -74.3307, -5.14225, 0.45", "53.9234, -75.8711, -5.78461, 0.45", "55.3907, -76.7555, -6.26055, 0.45", "57.1257, -77.677, -6.8683, 0.45", "59.4386, -78.8232, -7.73929, 0.45", "62.0181, -80.0746, -8.80754, 0.45", "64.6003, -81.4289, -9.94421, 0.45", "66.3261, -82.3438, -10.7625, 0.45", "68.0374, -83.2803, -11.5892, 0.45", "69.0517, -83.8618, -12.0797, 0.45", "70.5358, -84.7506, -12.7611, 0.45", "72.3564, -85.9343, -13.5898, 0.45", "74.2496, -87.183, -14.4746, 0.23", "76.0508, -88.4457, -15.349, 0.23", "77.5673, -89.5236, -16.1287, 0.23", "79.2613, -90.8081, -17.1179, 0.23", "81.2261, -92.4913, -18.3722, 0.23", "83.3042, -94.5335, -19.7512, 0.23", "83.7358, -94.9884, -20.0202, 0.23", "84.7116, -96.0667, -20.5896, 0.23", "86.4502, -98.113, -21.5707, 0.23", "87.865, -99.8972, -22.368, 0.23", "89.9595, -102.6, -23.5017, 0.23", "91.7152, -104.997, -24.4733, 0.23", "93.1982, -107.132, -25.3755, 0.23", "94.8933, -109.78, -26.4988, 0.23", "96.2149, -111.882, -27.3965, 0.23", "96.7924, -112.873, -27.8276, 0.23", "97.4508, -114.197, -28.3679, 0.23", "98.4391, -116.311, -29.131, 0.23", "99.1696, -117.827, -29.6164, 0.23", "100.376, -120.278, -30.2584, 0.23", "101.663, -122.783, -30.7609, 0.23", "103.067, -125.412, -31.1306, 0.23", "104.276, -127.573, -31.3275, 0.23", "104.924, -128.652, -31.3831, 0.23", "106.243, -130.686, -31.4471, 0.23", "107.956, -133.327, -31.5171, 0.23", "109.535, -135.572, -31.5727, 0.23", "110.784, -137.192, -31.6252, 0.23", "111.788, -138.471, -31.6804, 0.23", "112.864, -139.858, -31.7628, 0.23", "113.996, -141.369, -31.9088, 0.23", "116.5, -145.078, -32.4397, 0.23", "118.256, -148.059, -32.93, 0.23", "119.343, -150.173, -33.3413, 0.23", "120.262, -152.179, -33.7805, 0.23", "121.359, -154.82, -34.4169, 0.23", "122.557, -157.869, -35.1714, 0.23", "124.554, -163.611, -36.6406, 0.23", "125.435, -166.387, -37.3649, 0.23", "126.168, -168.7, -37.9937, 0.23", "126.704, -170.305, -38.4393, 0.23", "136.076, -179.027, -39.7935, 0.23" ],
    "parent" : "dend_34",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_35",
    "id" : "dend_35",
    "points3d" : [ "5.03707, -19.0681, 5.62779, 0.45", "5.314, -20.3493, 3.92345, 0.45", "5.70779, -21.521, 2.27658, 0.45", "5.89635, -22.0973, 1.45858, 0.45", "6.26153, -23.2413, -0.0758437, 0.45", "6.62694, -24.1644, -1.30376, 0.45", "7.04424, -25.0424, -2.44912, 0.45", "7.56308, -25.8574, -3.47983, 0.45", "8.19537, -26.6476, -4.42419, 0.45", "8.97693, -27.5025, -5.35447, 0.45", "10.3163, -28.901, -6.68719, 0.45", "11.339, -30.0052, -7.63004, 0.45", "12.3046, -31.1737, -8.57265, 0.45", "13.2197, -32.2097, -9.45293, 0.45", "14.403, -33.4571, -10.6128, 0.45", "15.0318, -34.1206, -11.3332, 0.45", "15.8191, -35.0339, -12.3726, 0.45", "16.7845, -36.1298, -13.8487, 0.23", "17.9927, -37.4732, -15.9159, 0.23", "18.9308, -38.4592, -17.5573, 0.23", "20.041, -39.5584, -19.5528, 0.23", "20.6646, -40.1511, -20.677, 0.23", "21.933, -41.4286, -23.0937, 0.23", "22.8729, -42.4529, -24.9813, 0.23", "23.7545, -43.5857, -26.8886, 0.23", "24.7303, -44.8718, -29.0184, 0.23", "25.3314, -45.6806, -30.3188, 0.23", "26.3049, -47.0456, -32.5331, 0.23", "26.7365, -47.7857, -33.6031, 0.23", "27.2065, -48.7128, -34.9471, 0.23", "30.4274, -55.4745, -41.0294, 0.23" ],
    "parent" : "dend_34",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_33",
    "id" : "dend_33",
    "points3d" : [ "-11.6942, -9.46654, -21.0375, 0.45", "-12.767, -9.75917, -22.1562, 0.45", "-13.6951, -9.97426, -23.1376, 0.45", "-14.4775, -10.1607, -23.983, 0.45", "-15.285, -10.3441, -24.7883, 0.45", "-16.2427, -10.5798, -25.7335, 0.45", "-17.0823, -10.7751, -26.5711, 0.45", "-18.0666, -10.994, -27.6419, 0.45", "-19.0117, -11.1862, -28.7228, 0.45", "-20.3429, -11.4755, -30.2615, 0.45", "-21.095, -11.6558, -31.1499, 0.45", "-22.0706, -11.9373, -32.3505, 0.45", "-22.8191, -12.1943, -33.3577, 0.45", "-23.4067, -12.4132, -34.2189, 0.45", "-24.026, -12.6562, -35.2071, 0.45", "-24.5682, -12.9086, -36.2123, 0.45", "-25.1233, -13.1834, -37.2364, 0.45", "-25.7405, -13.5919, -38.3874, 0.45", "-31.4704, -14.6822, -45.6084, 0.45", "-36.2827, -14.5309, -53.5376, 0.45", "-40.11, -14.1086, -61.9779, 0.45" ],
    "parent" : "dend_31",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_32",
    "id" : "dend_32",
    "points3d" : [ "-11.6942, -9.46654, -21.0375, 0.45", "-11.6047, -10.5437, -21.8115, 0.45", "-11.5612, -11.4149, -22.4729, 0.45", "-11.5614, -12.8626, -23.5639, 0.45", "-11.5365, -14.0731, -24.5173, 0.45", "-11.4996, -14.8614, -25.1923, 0.45", "-11.4144, -15.752, -25.9894, 0.45", "-11.2254, -16.7909, -27.0298, 0.45", "-11.1288, -17.2329, -27.4839, 0.45", "-10.9511, -18.283, -28.4738, 0.45", "-10.8729, -19.3033, -29.3269, 0.45", "-10.8871, -20.5089, -30.2032, 0.45", "-10.9749, -21.4568, -30.7323, 0.45", "-11.036, -22.2327, -31.1316, 0.45", "-11.0779, -23.7887, -31.9904, 0.45", "-11.0822, -25.2121, -32.7752, 0.45", "-10.9784, -26.6307, -33.5788, 0.45", "-10.701, -27.9723, -34.4883, 0.45", "-10.0966, -29.6683, -35.968, 0.45", "-9.40363, -31.015, -37.4037, 0.23", "-9.10574, -31.4657, -37.9758, 0.23", "-8.52205, -32.2079, -39.1146, 0.23", "-7.79552, -33.109, -40.5379, 0.23", "-6.91903, -34.2013, -42.319, 0.23", "-6.58355, -34.7065, -43.0831, 0.23", "-5.99549, -35.7807, -44.6484, 0.23", "-5.62175, -36.5528, -45.774, 0.23", "-5.022, -37.8193, -47.7264, 0.23", "-4.25741, -43.8256, -54.1504, 0.23" ],
    "parent" : "dend_31",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "10.7503, 4.02836, -3.65388, 1.36", "10.7973, 4.0403, -3.66708, 1.36", "11.6453, 4.25579, -3.90545, 1.82" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "10.7503, 4.02836, -3.65388, 0.45", "10.059, 4.38705, -4.28157, 0.45", "9.33223, 4.74576, -4.85326, 0.45", "8.36087, 5.2547, -5.59861, 0.45", "7.61556, 5.71211, -6.17886, 0.45", "6.9357, 6.15573, -6.72304, 0.45", "6.23087, 6.65918, -7.3429, 0.45", "5.60829, 7.1577, -8.01442, 0.45", "5.26068, 7.53683, -8.52694, 0.45", "4.8901, 8.11254, -9.33866, 0.45", "4.53278, 8.84444, -10.4346, 0.45", "4.22245, 9.6529, -11.7367, 0.45", "3.8695, 10.6607, -13.4934, 0.45", "3.58133, 11.5129, -15.1026, 0.45", "3.28875, 12.2408, -16.6066, 0.45", "2.91778, 13.0115, -18.3285, 0.45", "2.49987, 13.7582, -20.0004, 0.45", "2.16661, 14.2146, -21.0297, 0.45", "1.84076, 14.5447, -21.7559, 0.45", "1.14352, 15.1244, -22.9995, 0.45", "0.495526, 15.6277, -23.9971, 0.45", "-0.08886, 16.0611, -24.8203, 0.45", "-0.695953, 16.495, -25.6764, 0.45", "-1.41304, 17.0191, -26.6756, 0.45", "-1.86107, 17.3569, -27.311, 0.45", "-2.6992, 18.0388, -28.6444, 0.23", "-3.3258, 18.6189, -29.7346, 0.23", "-4.43229, 19.7913, -31.8666, 0.23", "-4.97348, 20.3953, -32.9601, 0.23", "-5.58451, 21.1204, -34.2656, 0.23", "-6.46151, 22.2046, -36.1661, 0.23", "-7.09646, 23.0182, -37.527, 0.23", "-7.87033, 24.1235, -39.2318, 0.23", "-8.4917, 25.1692, -40.6906, 0.23", "-11.6284, 29.7286, -46.6479, 0.23" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "22.019, -13.9892, 17.3583, 0.45", "22.4269, -14.2351, 17.9288, 0.45", "23.1548, -14.5246, 18.7667, 0.45", "24.0034, -14.7909, 19.6215, 0.45", "24.4482, -14.9447, 20.0572, 0.45", "25.0413, -15.1477, 20.6537, 0.45", "25.7926, -15.3863, 21.4404, 0.45", "26.7486, -15.6268, 22.4452, 0.45", "27.3196, -15.754, 23.0397, 0.45", "27.9573, -15.8648, 23.7071, 0.45", "28.5617, -15.9374, 24.3401, 0.45", "29.2107, -15.9996, 24.9986, 0.45", "29.927, -16.0956, 25.7365, 0.45", "30.7097, -16.2124, 26.4948, 0.45", "31.4351, -16.2898, 27.1046, 0.45", "32.2566, -16.3741, 27.7118, 0.45", "33.1634, -16.5207, 28.3133, 0.45", "34.1914, -16.7435, 28.9011, 0.45", "35.4207, -17.0014, 29.4504, 0.45", "36.6167, -17.1902, 29.8957, 0.23", "37.7238, -17.3655, 30.2754, 0.23", "38.8151, -17.5523, 30.6119, 0.23", "40.3202, -17.784, 31.0272, 0.23", "42.7747, -18.0977, 31.6329, 0.23", "44.7481, -18.335, 32.0789, 0.23" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "22.019, -13.9892, 17.3583, 0.45", "24.1183, -14.9076, 17.728, 0.45", "25.1643, -15.2655, 17.9731, 0.45", "27.3078, -15.9744, 18.467, 0.23", "28.999, -16.4766, 18.8494, 0.23", "30.529, -16.8316, 19.1997, 0.68", "32.5262, -17.2395, 19.6647, 0.45", "34.8707, -17.565, 20.2492, 0.45", "37.6452, -17.7925, 20.9832, 0.45", "39.4012, -17.8626, 21.4646, 0.45", "41.6198, -17.8769, 22.1125, 0.45", "44.2642, -17.8639, 22.8956, 0.45", "46.5307, -17.8092, 23.5568, 0.45", "47.8699, -17.7635, 23.9615, 0.45", "49.1496, -17.6509, 24.4116, 0.45", "50.4745, -17.5798, 24.9132, 0.45" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-6.16816, -13.6179, 12.1154, 0.45", "-6.2739, -13.37, 12.9177, 0.45", "-6.55069, -13.15, 14.5009, 0.45", "-6.7856, -13.2162, 15.6027, 0.45", "-7.06901, -13.5035, 16.6895, 0.45", "-7.20598, -13.6499, 17.1354, 0.45", "-7.40934, -13.8956, 17.8679, 0.45", "-7.69851, -14.4233, 19.1231, 0.45", "-7.90652, -14.9016, 20.0347, 0.45", "-8.12887, -15.5933, 21.1575, 0.45", "-8.15721, -15.8944, 21.6388, 0.45", "-8.12399, -16.4563, 22.5459, 0.45", "-8.03759, -17.1018, 23.6319, 0.45", "-7.92137, -17.9145, 24.987, 0.45", "-7.76919, -18.6133, 26.0947, 0.45", "-7.50154, -19.4033, 27.4154, 0.45", "-7.20424, -20.1112, 28.6136, 0.45", "-6.88777, -20.7396, 29.7025, 0.45", "-6.53328, -21.3368, 30.8233, 0.45", "-6.168, -21.8857, 32.0495, 0.45", "-5.84548, -22.4629, 33.4889, 0.45", "-5.69099, -22.8395, 34.3428, 0.45", "-5.59743, -23.1826, 35.0991, 0.45", "-5.62873, -23.6898, 36.1768, 0.45", "-5.92167, -24.296, 37.3655, 0.45", "-6.23648, -24.7675, 38.1297, 0.45", "-6.78015, -25.534, 39.1667, 0.45", "-7.65661, -26.5264, 40.541, 0.45", "-8.45236, -27.3164, 41.6553, 0.45", "-9.00763, -27.9089, 42.433, 0.45", "-9.65468, -28.6493, 43.3809, 0.45", "-10.1857, -29.2459, 44.1602, 0.45", "-11.1223, -30.228, 45.4333, 0.45", "-11.6659, -30.9023, 46.2092, 0.45", "-12.4523, -32.1673, 47.4743, 0.45", "-13.1244, -33.3433, 48.6142, 0.45", "-13.3875, -33.8283, 49.108, 0.45", "-13.7944, -34.7997, 50.1275, 0.45", "-14.0211, -35.9084, 51.2502, 0.45", "-13.9706, -37.0527, 52.4741, 0.45", "-13.7611, -37.7547, 53.2746, 0.45", "-13.2908, -38.4966, 54.0232, 0.45", "-12.5493, -39.1768, 54.6562, 0.45", "-10.9894, -40.1457, 55.4778, 0.45", "-9.26053, -40.9129, 56.098, 0.45", "-7.34833, -41.5174, 56.5692, 0.23", "-4.70845, -42.3147, 57.0936, 0.23", "-1.58296, -43.2328, 57.5618, 0.23", "0.64017, -43.797, 57.7869, 0.23", "2.11993, -44.037, 57.8482, 0.23", "3.92781, -44.194, 57.8187, 0.23" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-6.16816, -13.6179, 12.1154, 0.68", "-7.08564, -14.1229, 12.5058, 0.68", "-8.89033, -15.0892, 13.2322, 0.45", "-10.4846, -15.9975, 13.8457, 0.45", "-11.8578, -16.8227, 14.3783, 0.68", "-13.0945, -17.6315, 14.8724, 0.68", "-13.7633, -18.0897, 15.1422, 0.68", "-15.0314, -19.0004, 15.6383, 0.45", "-16.8187, -20.3407, 16.2942, 0.45", "-17.8512, -21.1608, 16.6386, 0.45", "-19.0815, -22.1687, 17.0046, 0.45", "-20.3079, -23.1694, 17.3311, 0.45", "-21.3487, -24.0482, 17.5987, 0.45", "-22.5658, -25.1045, 17.917, 0.68", "-23.6318, -26.0181, 18.1678, 0.68", "-25.4907, -27.5944, 18.6001, 0.68", "-27.2185, -29.0647, 19.0396, 0.45", "-28.8279, -30.5077, 19.4942, 0.45", "-29.9935, -31.5929, 19.8546, 0.45", "-30.9932, -32.544, 20.176, 0.45", "-32.4986, -33.9628, 20.6661, 0.45", "-33.6638, -35.0518, 21.0266, 0.45", "-35.1279, -36.3725, 21.4598, 0.45", "-35.7622, -36.9284, 21.6424, 0.45", "-36.9071, -37.9551, 21.9611, 0.45", "-37.8235, -38.768, 22.1998, 0.45", "-38.8726, -39.6521, 22.4171, 0.45", "-39.851, -40.424, 22.5858, 0.45", "-41.2257, -41.4044, 22.7795, 0.45", "-42.4961, -42.2718, 22.9232, 0.45", "-43.8617, -43.1749, 23.0408, 0.45", "-44.8203, -43.7676, 23.0952, 0.45", "-46.2924, -44.6828, 23.1636, 0.45", "-48.0536, -45.8099, 23.247, 0.45", "-49.5077, -46.748, 23.3629, 0.45", "-50.6464, -47.5088, 23.5098, 0.45", "-52.1281, -48.5844, 23.7824, 0.45", "-53.9945, -50.0121, 24.2393, 0.45", "-55.4957, -51.2469, 24.7104, 0.45", "-56.8797, -52.4864, 25.2387, 0.45", "-58.6127, -54.116, 26.0105, 0.45", "-60.0023, -55.413, 26.7033, 0.45", "-60.8808, -56.236, 27.1789, 0.45", "-62.4879, -57.6876, 28.066, 0.45", "-63.7798, -58.7897, 28.7552, 0.45", "-64.8678, -59.7039, 29.3135, 0.45", "-67.009, -61.5221, 30.365, 0.45", "-68.0819, -62.4514, 30.8476, 0.45", "-68.7086, -62.994, 31.1072, 0.45", "-69.8061, -64.0015, 31.5217, 0.45", "-70.8126, -65.0503, 31.8476, 0.45", "-71.8102, -66.2214, 32.0721, 0.45", "-72.7794, -67.4644, 32.199, 0.45", "-73.7806, -68.7615, 32.2698, 0.45", "-75.1267, -70.6178, 32.2863, 0.45", "-76.461, -72.5896, 32.2204, 0.45", "-79.2207, -76.6968, 31.9449, 0.45", "-80.3174, -78.3423, 31.8138, 0.45", "-81.5076, -80.1622, 31.6783, 0.45", "-83.0733, -82.6209, 31.5301, 0.45", "-84.7343, -85.1808, 31.4421, 0.45", "-86.1045, -87.2886, 31.4598, 0.45", "-87.1249, -88.8716, 31.5684, 0.45", "-88.3493, -90.6365, 31.8201, 0.45", "-90.0832, -93.0264, 32.2737, 0.45", "-90.6496, -93.7365, 32.4572, 0.45", "-92.0313, -95.3622, 32.9779, 0.45", "-93.2674, -96.7799, 33.4745, 0.45", "-95.0317, -98.7114, 34.1271, 0.45" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-8.84308, 0.681023, 7.83283, 0.45", "-8.39306, 0.609151, 8.78251, 0.45", "-7.98526, 0.66094, 9.85278, 0.45", "-7.83262, 0.807521, 10.3142, 0.45", "-7.46224, 1.3173, 11.1812, 0.45", "-7.11863, 1.86812, 11.9173, 0.45", "-6.82272, 2.40903, 12.6021, 0.45", "-6.48657, 3.13457, 13.4326, 0.45", "-6.19415, 3.94808, 14.3616, 0.45", "-5.85815, 5.08124, 15.6266, 0.45", "-5.71305, 5.56074, 16.1397, 0.45", "-5.56284, 5.95916, 16.57, 0.45", "-5.31079, 6.51886, 17.1949, 0.45", "-5.16917, 6.82137, 17.634, 0.45", "-5.05767, 7.23586, 18.4535, 0.45", "-5.06797, 7.72176, 19.424, 0.45", "-5.07091, 8.22279, 20.3465, 0.45", "-5.08329, 8.56399, 20.9472, 0.45", "-5.11538, 9.38808, 22.2278, 0.45", "-5.1354, 10.4853, 23.7586, 0.45", "-5.15047, 11.3142, 24.8124, 0.45", "-5.09684, 12.3221, 25.9157, 0.45", "-5.00215, 13.4807, 27.149, 0.45", "-4.83653, 14.706, 28.3942, 0.23", "-4.59704, 15.9676, 29.5104, 0.23", "-4.32887, 17.0203, 30.3324, 0.23", "-3.75688, 19.0249, 31.8377, 0.23" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-8.84308, 0.681023, 7.83283, 0.68", "-9.36989, 0.319893, 8.11968, 0.68", "-10.2807, -0.250332, 8.64814, 0.45", "-10.9667, -0.639057, 9.03764, 0.45", "-11.8992, -1.09823, 9.57957, 0.45", "-12.5849, -1.41398, 10.0138, 0.45", "-13.4658, -1.84365, 10.6535, 0.45", "-13.8878, -2.04255, 11.0097, 0.45", "-14.5749, -2.35919, 11.6901, 0.45", "-15.1279, -2.6392, 12.3112, 0.45", "-15.5651, -2.91488, 12.8929, 0.45", "-16.1723, -3.34318, 13.8316, 0.45", "-16.3878, -3.50529, 14.2255, 0.68", "-16.7736, -3.83485, 15.0663, 0.68", "-17.1819, -4.18633, 16.0803, 0.68", "-17.6861, -4.56729, 17.2712, 0.45", "-18.1658, -4.80088, 18.2897, 0.45", "-18.7245, -4.95494, 19.3954, 0.45", "-19.1121, -5.0205, 20.2448, 0.45", "-19.336, -5.03274, 20.7976, 0.45", "-19.6339, -4.99822, 21.614, 0.45", "-19.9744, -4.90212, 22.5188, 0.45", "-20.1947, -4.81515, 23.0714, 0.45", "-20.5256, -4.66297, 24.0155, 0.45", "-20.803, -4.56257, 24.7944, 0.45", "-20.9465, -4.54413, 25.1791, 0.45", "-21.2622, -4.55703, 26.0062, 0.45", "-21.6744, -4.63097, 26.8759, 0.45", "-22.2247, -4.72823, 27.7805, 0.45", "-22.9855, -4.83745, 28.7628, 0.45", "-23.7632, -4.93767, 29.5932, 0.45", "-24.2826, -5.01665, 30.0824, 0.45", "-24.9619, -5.15561, 30.6397, 0.45", "-25.5231, -5.28668, 31.0679, 0.45", "-26.4245, -5.4919, 31.7365, 0.45", "-27.4426, -5.7122, 32.4816, 0.23", "-28.0002, -5.84283, 32.8813, 0.23", "-29.2547, -6.13375, 33.7273, 0.23", "-30.1369, -6.30916, 34.3234, 0.23", "-30.9671, -6.4891, 34.8869, 0.23", "-31.7177, -6.67534, 35.392, 0.23", "-32.7395, -6.91477, 36.0774, 0.23", "-33.8454, -7.10764, 36.7659, 0.23", "-35.0108, -7.17595, 37.4222, 0.23" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-26.366, 1.68186, -11.1566, 0.68", "-26.7878, 1.83767, -11.6287, 0.68", "-27.1958, 2.03998, -12.0612, 0.68", "-27.7063, 2.28713, -12.5722, 0.68", "-28.5923, 2.62459, -13.3278, 0.68", "-29.6008, 2.98101, -14.1105, 0.68", "-30.7681, 3.41817, -14.9013, 0.68", "-31.686, 3.77893, -15.4527, 0.68", "-32.7214, 4.20797, -16.0034, 0.68", "-34.1046, 4.78626, -16.6914, 0.68", "-35.0782, 5.1788, -17.1388, 0.68", "-36.9272, 5.84251, -17.9432, 0.45", "-38.3118, 6.33554, -18.5922, 0.45", "-39.3389, 6.7092, -19.1383, 0.45", "-40.5073, 7.15694, -19.8533, 0.45", "-41.4603, 7.52855, -20.5384, 0.45", "-42.1484, 7.75957, -21.1004, 0.45", "-43.4697, 8.12455, -22.3199, 0.45", "-44.5652, 8.39383, -23.3614, 0.45", "-45.6439, 8.62389, -24.3255, 0.45", "-46.3214, 8.76839, -24.9362, 0.45", "-47.2452, 8.95757, -25.789, 0.45", "-47.7658, 9.03962, -26.2422, 0.45", "-48.459, 9.09445, -26.7305, 0.45", "-50.2563, 9.18726, -27.7937, 0.45" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-26.366, 1.68186, -11.1566, 0.68", "-28.3317, 0.354942, -11.418, 0.68", "-30.4635, -1.11123, -11.8017, 0.68", "-31.9849, -2.18039, -12.1173, 0.45", "-33.6297, -3.33377, -12.4804, 0.45", "-35.1168, -4.37245, -12.8133, 0.45", "-36.6504, -5.42469, -13.1582, 0.45", "-38.4968, -6.69521, -13.6004, 0.45", "-39.7723, -7.5982, -13.9198, 0.45", "-41.0803, -8.53762, -14.2574, 0.45", "-43.1351, -10.0727, -14.7821, 0.45", "-44.6063, -11.2051, -15.1678, 0.45", "-46.0579, -12.342, -15.5769, 0.45", "-47.8937, -13.7852, -16.1271, 0.45", "-49.5184, -15.0668, -16.662, 0.45", "-50.4378, -15.8039, -16.9902, 0.45", "-51.6625, -16.7914, -17.4599, 0.45", "-52.4209, -17.3846, -17.7556, 0.45", "-53.9532, -18.5355, -18.3731, 0.45", "-55.381, -19.6283, -18.9714, 0.45", "-57.052, -20.864, -19.6564, 0.45", "-58.3389, -21.705, -20.1253, 0.45", "-59.9335, -22.6209, -20.6267, 0.45", "-61.5532, -23.493, -21.1128, 0.45", "-62.6114, -24.036, -21.4265, 0.45", "-64.1967, -24.8112, -21.8916, 0.45", "-66.4286, -25.8476, -22.5162, 0.45", "-68.0817, -26.6162, -22.9581, 0.45", "-69.3976, -27.2771, -23.3008, 0.45", "-71.0931, -28.2102, -23.7384, 0.45", "-71.9502, -28.7242, -23.9583, 0.45", "-73.562, -29.8279, -24.4387, 0.45", "-75.5947, -31.3635, -25.1903, 0.45", "-77.2471, -32.6427, -25.8922, 0.45", "-79.1987, -34.1283, -26.7843, 0.45", "-81.8198, -36.1019, -28.0801, 0.23", "-83.939, -37.6455, -29.1244, 0.23", "-86.4093, -39.3456, -30.3316, 0.23", "-88.4329, -40.676, -31.2907, 0.23", "-90.662, -42.0277, -32.3146, 0.23", "-93.2065, -43.4488, -33.4347, 0.23", "-96.6166, -45.2408, -34.8632, 0.23", "-98.9954, -46.3728, -35.7635, 0.23", "-101.435, -47.4345, -36.6013, 0.23", "-103.379, -48.2403, -37.2537, 0.23", "-105.774, -49.1752, -38.0844, 0.23", "-107.404, -49.7519, -38.6908, 0.23", "-108.868, -50.2057, -39.3163, 0.23", "-109.992, -50.4984, -39.8322, 0.23", "-111.5, -50.8382, -40.5932, 0.23", "-112.597, -51.1024, -41.1781, 0.23", "-113.926, -51.4231, -41.9148, 0.23", "-115.248, -51.7462, -42.632, 0.23", "-116.022, -51.9747, -43.0508, 0.23", "-117.519, -52.4923, -43.845, 0.23", "-118.921, -53.0342, -44.5299, 0.23", "-121.204, -54.0842, -45.6152, 0.23", "-122.491, -54.7456, -46.2182, 0.23", "-124.217, -55.7203, -47.0092, 0.23", "-125.49, -56.4794, -47.5913, 0.23", "-126.82, -57.2709, -48.187, 0.23", "-128.316, -58.1164, -48.8315, 0.23", "-130.669, -59.4229, -49.8234, 0.23", "-132.164, -60.2107, -50.4387, 0.23", "-133.58, -60.9055, -50.9683, 0.23", "-134.901, -61.533, -51.4372, 0.23", "-138.271, -63.0674, -52.6101, 0.23", "-139.58, -63.6484, -53.0403, 0.23", "-141.797, -64.6503, -53.7817, 0.23", "-142.947, -65.1637, -54.1766, 0.23", "-143.664, -65.4947, -54.423, 0.23", "-145.336, -66.3503, -55.0107, 0.23", "-146.649, -67.0981, -55.4958, 0.23", "-147.929, -67.8532, -55.9739, 0.23", "-148.748, -68.3538, -56.2946, 0.23", "-150.359, -69.3779, -56.9567, 0.23", "-151.613, -70.2192, -57.4486, 0.23", "-152.669, -70.9397, -57.8244, 0.23", "-153.495, -71.4886, -58.1009, 0.23", "-155.734, -72.99, -58.8048, 0.23", "-156.86, -73.7622, -59.1458, 0.23", "-158.934, -75.1972, -59.7367, 0.23", "-161.036, -76.6655, -60.2895, 0.23", "-162.568, -77.7036, -60.639, 0.23", "-163.711, -78.4686, -60.8775, 0.23", "-165.844, -79.8702, -61.205, 0.23", "-168.194, -81.347, -61.4481, 0.23", "-170.059, -82.4716, -61.534, 0.23", "-172.247, -83.7654, -61.5255, 0.23", "-175.02, -85.3897, -61.37, 0.23", "-177.654, -86.9248, -61.1042, 0.23", "-179.062, -87.7797, -60.9299, 0.23", "-181.159, -89.1523, -60.6431, 0.23", "-182.553, -90.1325, -60.4646, 0.23", "-184.601, -91.6721, -60.2395, 0.23", "-186.803, -93.3958, -60.0516, 0.23", "-190.608, -96.446, -60.0178, 0.23", "-192.957, -98.3615, -60.1482, 0.23", "-195.422, -100.413, -60.4669, 0.23", "-197.13, -101.836, -60.8014, 0.23", "-199.287, -103.59, -61.3602, 0.23", "-201.669, -105.493, -62.1287, 0.23", "-202.803, -106.359, -62.5693, 0.23", "-204.802, -107.924, -63.5043, 0.23", "-205.972, -108.902, -64.1599, 0.23", "-206.842, -109.71, -64.7223, 0.23", "-207.992, -110.947, -65.5411, 0.23", "-208.729, -111.859, -66.0771, 0.23", "-210.258, -113.842, -67.2017, 0.23", "-211.63, -115.735, -68.2501, 0.23", "-212.467, -117.021, -68.9356, 0.23", "-214.312, -120.18, -70.6041, 0.23", "-215.349, -122.12, -71.6208, 0.23", "-216.204, -123.807, -72.5151, 0.23", "-217.134, -125.726, -73.5572, 0.23", "-218.105, -127.914, -74.762, 0.23", "-218.9, -129.722, -75.8092, 0.23", "-219.583, -131.266, -76.7458, 0.23", "-220.533, -133.23, -77.9929, 0.23", "-221.411, -134.843, -79.0912, 0.23", "-221.945, -135.665, -79.6954, 0.23", "-223.368, -137.463, -81.098, 0.23", "-225.118, -139.438, -82.6548, 0.23", "-226.186, -140.573, -83.5143, 0.23", "-228.093, -142.522, -84.8433, 0.23", "-229.612, -144.093, -85.8056, 0.23", "-230.654, -145.277, -86.4592, 0.23", "-231.769, -146.733, -87.1847, 0.23", "-232.988, -148.605, -88.0544, 0.23", "-235.222, -152.549, -89.7471, 0.23", "-236.299, -154.668, -90.6078, 0.23", "-237.186, -156.671, -91.4004, 0.23", "-237.958, -158.851, -92.2386, 0.23", "-238.583, -161.146, -93.1247, 0.23", "-238.973, -163.3, -93.9663, 0.23", "-239.118, -165.143, -94.6758, 0.23", "-239.23, -167.27, -95.4781, 0.23", "-239.336, -170.64, -96.7083, 0.23", "-239.32, -172.342, -97.2933, 0.23", "-239.211, -174.211, -97.8794, 0.23", "-239.07, -175.184, -98.1804, 0.23" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 15
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "35.6263, -10.2095, 0.0, 0.45", "50.0974, -14.1578, 0.0, 0.45", "64.5684, -18.1061, 0.0, 0.45" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "11.6453, 4.25579, -3.90545, 0.68", "12.15, 7.12363, -5.33064, 0.68", "12.4091, 8.59602, -6.06234, 0.68", "12.6865, 10.1724, -6.84576, 0.68" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "11.6453, 4.25579, -3.90545, 0.68", "12.4691, 3.87226, -3.98987, 0.68", "13.5326, 3.41388, -4.11464, 0.68", "14.8337, 2.91994, -4.26566, 0.68", "16.0434, 2.45739, -4.39761, 0.68", "17.2731, 1.96977, -4.50854, 0.68", "18.5633, 1.4248, -4.60956, 0.68", "20.0764, 0.78063, -4.73301, 0.68", "21.4272, 0.192757, -4.84738, 0.68", "22.9513, -0.469536, -4.97878, 0.68", "24.3972, -1.07881, -5.0687, 0.68", "25.3745, -1.48028, -5.0775, 0.68" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-50.2563, 9.18726, -27.7937, 0.45", "-51.171, 9.57626, -28.1044, 0.45", "-51.9463, 9.90643, -28.368, 0.45", "-52.8361, 10.3021, -28.6831, 0.45", "-54.2405, 10.9711, -29.2078, 0.45", "-55.5747, 11.617, -29.7012, 0.45", "-56.541, 12.0771, -30.048, 0.45", "-57.5989, 12.5794, -30.4333, 0.45", "-58.3526, 12.9634, -30.6935, 0.45", "-59.4969, 13.5747, -31.0811, 0.45", "-60.556, 14.1297, -31.4244, 0.45", "-61.261, 14.4674, -31.6269, 0.45", "-62.4276, 14.9529, -31.9132, 0.45", "-63.7344, 15.4828, -32.2228, 0.45", "-64.8915, 15.9295, -32.4516, 0.45", "-65.8668, 16.2924, -32.6453, 0.45", "-66.797, 16.6335, -32.8303, 0.45", "-68.6512, 17.3149, -33.1706, 0.45", "-70.3361, 17.9327, -33.4949, 0.45", "-71.523, 18.3719, -33.7654, 0.45", "-72.6756, 18.8058, -34.0762, 0.45", "-74.9282, 19.6221, -34.6592, 0.45", "-76.8949, 20.2905, -35.1641, 0.23", "-78.7988, 20.8934, -35.6451, 0.23", "-80.3744, 21.32, -36.0218, 0.23", "-81.424, 21.5803, -36.2888, 0.23", "-83.5941, 22.1051, -36.8125, 0.23", "-85.22, 22.45, -37.216, 0.23", "-86.6646, 22.6983, -37.5483, 0.23", "-88.0737, 22.937, -37.8249, 0.23", "-89.9944, 23.2946, -38.1671, 0.23", "-91.3536, 23.575, -38.4469, 0.23", "-92.6308, 23.8379, -38.8034, 0.23", "-94.3438, 24.1295, -39.3323, 0.23", "-95.0837, 24.2349, -39.5709, 0.23", "-96.2416, 24.3505, -39.9717, 0.23", "-97.832, 24.4449, -40.563, 0.23", "-99.7788, 24.5208, -41.4262, 0.23", "-101.633, 24.6237, -42.4336, 0.23", "-103.34, 24.715, -43.5265, 0.23", "-104.99, 24.7744, -44.6175, 0.23", "-106.173, 24.8118, -45.4428, 0.23", "-108.829, 24.9119, -47.3872, 0.23", "-111.086, 25.0564, -49.1802, 0.23", "-112.752, 25.212, -50.6584, 0.23", "-120.827, 27.3487, -53.4288, 0.23" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-50.2563, 9.18726, -27.7937, 0.23", "-51.5508, 8.62102, -27.8368, 0.23", "-52.9489, 8.03282, -27.8913, 0.23", "-54.7028, 7.32646, -28.0077, 0.23", "-56.2084, 6.71844, -28.1291, 0.23", "-57.2423, 6.29678, -28.2308, 0.23", "-58.5679, 5.7483, -28.3882, 0.23", "-60.0368, 5.15311, -28.6078, 0.23", "-61.1589, 4.68634, -28.845, 0.23", "-62.1838, 4.28504, -29.1234, 0.23", "-63.1723, 3.93419, -29.4294, 0.23", "-64.1831, 3.57597, -29.7678, 0.23", "-65.3294, 3.1653, -30.1543, 0.23", "-66.509, 2.7402, -30.5369, 0.23", "-67.6015, 2.35282, -30.8693, 0.23", "-69.2272, 1.85272, -31.2876, 0.23", "-70.7516, 1.45163, -31.6364, 0.23", "-72.8631, 1.05093, -32.0645, 0.23", "-74.0065, 0.92247, -32.2683, 0.23", "-75.0664, 0.829067, -32.4269, 0.23", "-76.7505, 0.728112, -32.6695, 0.23", "-77.7409, 0.767364, -32.7966, 0.23", "-79.2828, 1.11608, -32.9615, 0.23", "-80.3661, 1.65676, -33.092, 0.23", "-88.9815, 1.42986, -33.7792, 0.23", "-97.3482, 1.34902, -35.9389, 0.23", "-105.351, 2.14925, -39.0909, 0.23", "-113.966, 2.27046, -39.7794, 0.23", "-122.468, 3.64116, -40.4684, 0.23" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-239.07, -175.184, -98.1804, 0.23", "-239.128, -177.558, -99.2065, 0.23", "-239.167, -179.111, -99.8775, 0.23", "-239.224, -181.431, -100.88, 0.23", "-239.295, -184.356, -102.145, 0.23", "-238.13, -192.769, -106.83, 0.23" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-239.07, -175.184, -98.1804, 0.23", "-238.086, -178.067, -98.8912, 0.23", "-237.138, -180.807, -99.6128, 0.23", "-236.647, -182.291, -100.016, 0.23", "-235.945, -184.335, -100.576, 0.23", "-235.343, -186.032, -101.072, 0.23", "-234.359, -188.99, -102.027, 0.23", "-233.862, -190.62, -102.63, 0.23", "-233.304, -192.606, -103.484, 0.23", "-232.682, -195.454, -104.908, 0.23", "-232.395, -196.902, -105.692, 0.23", "-231.979, -199.527, -107.224, 0.23", "-231.846, -200.635, -107.936, 0.23", "-231.77, -202.065, -108.944, 0.23", "-231.851, -204.236, -110.727, 0.23", "-228.12, -214.22, -113.571, 0.23" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "12.6865, 10.1724, -6.84576, 0.45", "13.5085, 11.9631, -7.74967, 0.45", "14.3167, 13.7238, -8.63847, 0.45", "15.2668, 15.7935, -9.6832, 0.45", "15.9192, 17.2147, -10.4006, 0.45", "16.8195, 19.1759, -11.3906, 0.45" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "12.6865, 10.1724, -6.84576, 0.45", "11.7094, 11.0606, -6.88862, 0.45", "10.3013, 12.2681, -6.86017, 0.45", "9.10259, 13.2719, -6.80901, 0.45", "7.60953, 14.5897, -6.74075, 0.45", "6.64697, 15.4935, -6.67269, 0.45", "5.71523, 16.4267, -6.57351, 0.45", "5.12453, 17.0351, -6.4609, 0.45", "4.36265, 17.8548, -6.28123, 0.45", "3.37443, 19.0028, -6.02817, 0.45", "2.50158, 20.0861, -5.77008, 0.45", "1.49883, 21.4795, -5.44156, 0.45", "1.01652, 22.2078, -5.31829, 0.45", "0.366306, 23.2961, -5.22601, 0.45", "-0.203529, 24.409, -5.21427, 0.45", "-0.660827, 25.4956, -5.31832, 0.45", "-1.09995, 26.8266, -5.61212, 0.45", "-1.66709, 29.0127, -6.29815, 0.45", "-2.186, 31.4505, -7.23489, 0.45", "-2.54875, 33.3891, -8.11955, 0.45", "-2.85754, 35.2975, -9.13355, 0.45", "-3.09184, 37.1807, -10.2196, 0.45", "-3.22245, 38.9535, -11.284, 0.45", "-3.27083, 40.7553, -12.3833, 0.45", "-3.23907, 42.8658, -13.6876, 0.45", "-3.11506, 45.4349, -15.2701, 0.45", "-2.96256, 47.7729, -16.672, 0.45", "-2.66546, 50.7268, -18.424, 0.45", "-2.33451, 53.2969, -19.9483, 0.45", "-1.96773, 55.8739, -21.4727, 0.45", "-1.71678, 57.4948, -22.437, 0.45", "-1.3721, 59.7732, -23.8355, 0.45", "-1.11835, 61.8277, -25.15, 0.45", "-0.950448, 63.7983, -26.4632, 0.45", "-0.893149, 65.0795, -27.351, 0.45", "-0.874089, 66.6649, -28.4695, 0.45", "-0.880129, 68.4399, -29.7507, 0.45", "-0.910063, 71.0881, -31.7048, 0.45", "-0.949866, 73.2893, -33.3642, 0.45", "-0.957985, 74.8375, -34.5478, 0.45", "-0.955533, 76.8541, -36.0596, 0.45", "-0.9261, 79.0948, -37.7029, 0.23", "-0.886713, 80.8636, -38.995, 0.23", "-0.807762, 82.369, -40.111, 0.23", "-0.749935, 83.3239, -40.8342, 0.23", "-0.591836, 85.6507, -42.6148, 0.23", "-0.507825, 87.6753, -44.1932, 0.23", "-0.50618, 89.7365, -45.7745, 0.23", "-0.623562, 91.6273, -47.2053, 0.23", "-0.820769, 92.9775, -48.222, 0.23", "-1.04803, 94.1965, -49.1298, 0.23", "-1.25412, 95.1203, -49.7902, 0.23", "-1.67293, 96.6372, -50.8029, 0.23", "-1.97093, 97.558, -51.3701, 0.23", "-2.94566, 100.02, -52.8176, 0.23", "-3.73986, 101.761, -53.8403, 0.23", "-4.63561, 103.352, -54.7771, 0.23", "-5.92973, 105.274, -55.9063, 0.23", "-7.19262, 106.864, -56.8353, 0.23", "-9.43939, 109.305, -58.242, 0.23", "-10.5765, 110.365, -58.8424, 0.23", "-12.7948, 112.196, -59.8821, 0.23", "-14.5362, 113.608, -60.6702, 0.23", "-15.8835, 114.72, -61.2943, 0.45", "-18.1781, 116.668, -62.4538, 0.23", "-19.2112, 117.571, -63.0285, 0.23", "-20.7865, 119.01, -64.0085, 0.23", "-23.1585, 121.267, -65.7144, 0.23", "-24.3485, 122.394, -66.6156, 0.23", "-25.5434, 123.41, -67.4798, 0.23", "-27.2568, 124.683, -68.6141, 0.23", "-28.4913, 125.497, -69.396, 0.23", "-29.6958, 126.178, -70.1006, 0.23", "-32.4399, 127.412, -71.5264, 0.23", "-34.8782, 128.379, -72.6972, 0.23", "-36.3695, 128.925, -73.389, 0.23", "-37.6478, 129.363, -74.0172, 0.23", "-39.335, 129.966, -74.9684, 0.23", "-39.9592, 130.208, -75.4161, 0.23", "-40.3891, 130.423, -75.834, 0.23", "-41.0754, 130.966, -76.6852, 0.23", "-42.0308, 131.987, -77.9792, 0.23", "-43.019, 133.345, -79.4186, 0.23", "-43.8694, 134.81, -80.7788, 0.23", "-44.9339, 136.891, -82.5391, 0.23", "-45.9416, 138.941, -84.137, 0.23", "-47.0273, 141.211, -85.828, 0.23", "-47.9503, 143.275, -87.2619, 0.23", "-48.9595, 145.849, -88.9399, 0.23", "-49.4564, 147.342, -89.8427, 0.23", "-50.0455, 149.644, -91.2081, 0.23", "-55.0355, 157.874, -94.5941, 0.23" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "25.3745, -1.48028, -5.0775, 0.45", "25.6701, -2.31637, -6.06424, 0.45", "26.0703, -3.24585, -7.06567, 0.45", "26.5531, -4.02817, -7.94874, 0.45", "26.9965, -4.60903, -8.63406, 0.45", "27.2173, -4.85286, -8.94352, 0.45", "27.6145, -5.29754, -9.52412, 0.45", "28.2169, -5.8779, -10.3679, 0.45", "29.0392, -6.58866, -11.5897, 0.45", "29.6135, -7.04207, -12.5925, 0.45", "30.2346, -7.4739, -13.7973, 0.45", "30.7864, -7.83615, -14.9265, 0.45", "31.5071, -8.28788, -16.3944, 0.45", "32.3096, -8.79662, -18.01, 0.45", "33.6658, -9.67339, -20.6036, 0.23", "34.4345, -10.1498, -21.9179, 0.23", "35.6273, -10.828, -23.6789, 0.23", "36.9522, -11.4799, -25.3156, 0.23", "37.3439, -11.6652, -25.7279, 0.23", "38.5986, -12.2525, -26.9324, 0.23", "40.2404, -13.0616, -28.4375, 0.23", "42.11, -13.975, -30.129, 0.23", "43.0946, -14.4359, -31.0264, 0.23", "44.9109, -15.247, -32.7207, 0.23", "46.4869, -15.9406, -34.2387, 0.23", "48.0387, -16.6493, -35.7834, 0.23", "51.5744, -20.9584, -41.7626, 0.23" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "25.3745, -1.48028, -5.0775, 0.45", "26.7103, -2.25922, -5.15122, 0.45", "27.309, -2.63511, -5.17838, 0.45", "28.4438, -3.34558, -5.22642, 0.68", "29.6089, -4.06938, -5.27839, 0.45", "30.7781, -4.81043, -5.36635, 0.45", "31.7865, -5.43183, -5.46613, 0.45", "32.8527, -6.0893, -5.60581, 0.45", "33.9017, -6.72237, -5.74202, 0.45", "34.6007, -7.14451, -5.82816, 0.45", "35.6517, -7.80015, -5.98242, 0.45", "37.3396, -8.81268, -6.27915, 0.45" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "16.8195, 19.1759, -11.3906, 0.45", "16.9235, 20.5264, -11.8461, 0.45", "17.1772, 23.1113, -12.6043, 0.45", "17.4694, 25.1038, -13.0965, 0.45", "17.8441, 27.3784, -13.5941, 0.45", "18.281, 29.6258, -14.0628, 0.45", "18.6379, 31.3478, -14.4018, 0.45", "19.1935, 33.6682, -14.7807, 0.45", "19.8032, 36.1601, -15.1132, 0.45", "20.3003, 38.419, -15.3616, 0.45", "20.7186, 40.8231, -15.5376, 0.45", "21.0471, 43.7588, -15.5979, 0.45", "21.1281, 45.3196, -15.5489, 0.45", "21.0781, 47.707, -15.3184, 0.45", "20.8498, 49.6827, -14.959, 0.45", "20.5235, 51.3016, -14.483, 0.45", "20.0669, 52.9402, -13.8278, 0.45", "19.6463, 54.2643, -13.1727, 0.45", "19.1769, 55.6936, -12.3442, 0.45", "18.7153, 57.1372, -11.3704, 0.45", "18.408, 58.1302, -10.6739, 0.45", "18.0329, 59.1686, -9.91991, 0.45", "17.7067, 60.0218, -9.32585, 0.45", "17.2972, 61.0739, -8.62647, 0.45", "16.7909, 62.3847, -7.78243, 0.45", "16.2439, 63.7831, -6.893, 0.45", "15.7707, 64.8921, -6.22028, 0.45", "15.2291, 66.1145, -5.49393, 0.45", "14.672, 67.4531, -4.72747, 0.45", "14.1942, 68.7235, -4.03829, 0.45", "13.781, 70.0039, -3.34437, 0.45", "13.4772, 71.0701, -2.71673, 0.45", "12.9539, 72.941, -1.56418, 0.23", "12.5636, 74.2786, -0.699527, 0.23", "12.0154, 76.1524, 0.488947, 0.23", "11.5746, 77.7412, 1.44524, 0.23", "11.0811, 79.5444, 2.50778, 0.23", "10.7933, 80.5614, 3.09877, 0.23", "10.4404, 81.6426, 3.68277, 0.23", "10.0044, 82.9163, 4.30672, 0.23", "9.59684, 84.1484, 4.82713, 0.23", "9.26653, 85.2746, 5.21157, 0.23", "9.01938, 86.3133, 5.48966, 0.23", "8.78038, 87.7285, 5.86902, 0.23", "8.69387, 88.7194, 6.14884, 0.23", "8.67816, 90.5298, 6.63884, 0.23", "8.80547, 92.0724, 7.02828, 0.23", "9.06195, 93.5548, 7.39575, 0.23", "9.6208, 95.8221, 8.00533, 0.23", "10.2317, 97.9761, 8.60837, 0.23", "10.7704, 99.6557, 9.08509, 0.23", "11.3659, 101.272, 9.56318, 0.23", "12.0353, 102.912, 10.0694, 0.23", "12.8199, 104.543, 10.5673, 0.23" ],
    "parent" : "dend_27",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "16.8195, 19.1759, -11.3906, 0.45", "18.1243, 18.991, -10.9637, 0.45", "20.184, 18.6392, -10.2974, 0.45", "21.8518, 18.3711, -9.75304, 0.45", "23.6088, 18.1277, -9.19623, 0.45", "25.2159, 17.9689, -8.74787, 0.45", "26.4112, 17.8696, -8.44358, 0.45", "28.2037, 17.7388, -8.06388, 0.45", "29.8282, 17.6483, -7.77611, 0.45", "31.522, 17.5845, -7.54522, 0.45", "33.8366, 17.4911, -7.28939, 0.45", "35.1926, 17.421, -7.16534, 0.45", "36.2469, 17.3377, -7.08634, 0.45", "36.8612, 17.2836, -7.04326, 0.45", "38.3938, 17.1066, -6.92641, 0.45", "40.3798, 16.8425, -6.72444, 0.45", "42.6977, 16.4955, -6.42493, 0.45", "45.5786, 16.0604, -6.02801, 0.45", "47.4436, 15.7469, -5.75009, 0.45", "49.5394, 15.3645, -5.40756, 0.45", "51.3325, 15.0164, -5.07737, 0.45", "52.1257, 14.8593, -4.91683, 0.45", "53.599, 14.5281, -4.60533, 0.45", "55.1513, 14.1756, -4.24516, 0.45", "56.811, 13.8101, -3.83609, 0.45", "58.0412, 13.5646, -3.53195, 0.45", "59.6872, 13.275, -3.13228, 0.45", "61.9311, 12.9599, -2.59022, 0.23", "63.6267, 12.7843, -2.20265, 0.23", "65.7222, 12.5739, -1.7383, 0.23", "66.7611, 12.4653, -1.51668, 0.23", "68.5381, 12.2459, -1.2136, 0.23", "70.0329, 12.0263, -1.02937, 0.23", "71.86, 11.7178, -0.923598, 0.23", "73.7542, 11.3492, -1.0078, 0.23", "75.0402, 11.058, -1.19025, 0.23", "77.2406, 10.5447, -1.66474, 0.45", "78.825, 10.1724, -2.13282, 0.45", "80.1999, 9.84893, -2.59893, 0.45", "82.5404, 9.2614, -3.42643, 0.23", "83.9352, 8.92754, -3.92618, 0.23", "85.4566, 8.55633, -4.43238, 0.23", "86.8988, 8.2233, -4.8189, 0.23", "88.7407, 7.79841, -5.20425, 0.23", "91.117, 7.2567, -5.54805, 0.23", "92.1147, 7.01362, -5.63906, 0.23", "93.3154, 6.68873, -5.73166, 0.23", "95.5509, 6.03215, -5.91474, 0.23", "97.9432, 5.32849, -6.12683, 0.23", "100.617, 4.5477, -6.41108, 0.23", "103.195, 3.80743, -6.78455, 0.23", "105.913, 2.96234, -7.32641, 0.23", "106.912, 2.63838, -7.54425, 0.23", "108.634, 2.06354, -7.97191, 0.23", "110.694, 1.36727, -8.56501, 0.23", "113.68, 0.361303, -9.56166, 0.23", "116.869, -0.647438, -10.7685, 0.23", "125.124, -4.38223, -11.8457, 0.23", "133.929, -6.6756, -12.1741, 0.23" ],
    "parent" : "dend_27",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "37.3396, -8.81268, -6.27915, 0.45", "39.2576, -8.40147, -6.25708, 0.45", "41.0198, -8.00002, -6.304, 0.45", "44.0607, -7.2678, -6.4341, 0.23", "45.1019, -7.03293, -6.4861, 0.23", "46.4466, -6.73206, -6.55035, 0.23", "48.0412, -6.41765, -6.6281, 0.23", "49.4329, -6.16819, -6.69808, 0.23", "50.854, -5.93869, -6.76143, 0.23", "52.5985, -5.6801, -6.82078, 0.23", "54.6461, -5.37494, -6.85192, 0.23", "57.734, -4.89407, -6.84356, 0.23", "60.0844, -4.53296, -6.7786, 0.23", "62.4292, -4.20126, -6.64254, 0.23", "63.9815, -3.98144, -6.52774, 0.23", "66.5848, -3.58102, -6.26709, 0.23", "67.9388, -3.3826, -6.10006, 0.23", "69.5045, -3.16575, -5.87038, 0.23", "72.0137, -2.93792, -5.489, 0.23", "72.944, -2.87814, -5.35001, 0.23", "74.1326, -2.8306, -5.18549, 0.23", "76.6276, -2.86502, -4.87564, 0.23", "77.7057, -2.91069, -4.74864, 0.23", "79.7842, -3.01664, -4.5323, 0.23", "81.9396, -3.16011, -4.33743, 0.23", "83.0981, -3.27475, -4.24393, 0.23", "85.114, -3.48899, -4.07421, 0.23", "86.1313, -3.60091, -3.97049, 0.23", "87.738, -3.77881, -3.7953, 0.23", "89.283, -3.93905, -3.62597, 0.23", "90.5598, -4.03989, -3.5334, 0.23", "92.4159, -4.09908, -3.44968, 0.23", "94.9959, -4.11383, -3.40671, 0.23", "96.3735, -4.11732, -3.41025, 0.23", "98.5608, -4.10557, -3.44083, 0.23", "101.611, -4.04713, -3.51641, 0.23", "102.794, -4.00893, -3.56538, 0.23", "105.417, -3.91943, -3.73214, 0.23", "107.734, -3.79308, -3.90651, 0.23", "110.096, -3.67533, -4.07996, 0.23", "118.314, -1.6038, -5.09586, 0.23" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "37.3396, -8.81268, -6.27915, 0.45", "38.4558, -9.83696, -6.35849, 0.45", "39.6285, -10.8336, -6.46692, 0.45", "41.2369, -12.1703, -6.63718, 0.45", "43.5562, -14.0502, -6.97858, 0.45", "45.0845, -15.3411, -7.27125, 0.23", "46.3718, -16.4548, -7.5491, 0.23", "47.3836, -17.332, -7.78786, 0.45", "48.2158, -18.1084, -7.9819, 0.45", "49.1514, -19.0354, -8.17443, 0.45", "50.8658, -20.8586, -8.45478, 0.45", "52.3845, -22.5111, -8.64229, 0.45", "53.8144, -24.0406, -8.78568, 0.45", "54.7047, -25.0193, -8.8599, 0.45", "56.9659, -27.5346, -9.00605, 0.45", "59.031, -29.8812, -9.09049, 0.45", "60.5058, -31.6, -9.13383, 0.45", "61.4804, -32.819, -9.16362, 0.45", "62.8108, -34.5982, -9.22389, 0.23", "64.3963, -36.9295, -9.31614, 0.23", "64.8995, -37.7928, -9.34565, 0.23", "65.5886, -39.1779, -9.38157, 0.23", "66.3025, -40.8389, -9.39855, 0.23", "66.7093, -41.9622, -9.39673, 0.23", "67.0719, -43.1063, -9.40984, 0.23", "67.3742, -44.2014, -9.4545, 0.23", "67.7499, -45.5825, -9.54442, 0.23", "68.0936, -46.9042, -9.66463, 0.23", "68.2922, -47.7519, -9.73382, 0.23", "68.4885, -48.7181, -9.77917, 0.23", "68.7083, -50.0569, -9.78173, 0.23", "68.8913, -51.3154, -9.76791, 0.23", "69.1011, -52.6944, -9.72932, 0.23", "69.2492, -53.5743, -9.68503, 0.23", "69.6212, -55.6727, -9.53766, 0.23", "69.9521, -58.0561, -9.31102, 0.23", "74.6298, -64.417, -9.70368, 0.23", "79.2934, -70.7957, -9.93927, 0.23", "84.4429, -76.7316, -10.6632, 0.23" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_34", "dend_31", "dend_30", "dend_17", "dend_14", "dend_11", "dend_8", "dend_1", "dend_0", "dend_36", "dend_35", "dend_33", "dend_32", "dend_19", "dend_18", "dend_16", "dend_15", "dend_13", "dend_12", "dend_10", "dend_9", "dend_5", "dend_2", "dend_25", "dend_20", "dend_7", "dend_6", "dend_4", "dend_3", "dend_27", "dend_26", "dend_24", "dend_21", "dend_29", "dend_28", "dend_23", "dend_22" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_34", "dend_31", "dend_30", "dend_17", "dend_14", "dend_11", "dend_8", "dend_1", "dend_0", "dend_36", "dend_35", "dend_33", "dend_32", "dend_19", "dend_18", "dend_16", "dend_15", "dend_13", "dend_12", "dend_10", "dend_9", "dend_5", "dend_2", "dend_25", "dend_20", "dend_7", "dend_6", "dend_4", "dend_3", "dend_27", "dend_26", "dend_24", "dend_21", "dend_29", "dend_28", "dend_23", "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_36" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_35" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_33" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_32" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_35",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_37",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_38",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_39",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_40",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_34" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_31" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_36",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30", "dend_31", "dend_32", "dend_33", "dend_34", "dend_35", "dend_36" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_17", "dend_17", "dend_17", "dend_17", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_8", "dend_8", "dend_8", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_19", "dend_19", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "axon_1", "axon_1", "dend_25", "dend_25", "dend_25", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.13603E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.13603E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.999855",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.042115",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0012239999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.001693",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.386953",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "8.0E-6",
    "erev" : "-63.854015"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.5399997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.039862998",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "1.04239E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "5.2299997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.0054459996",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.503893",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "1.0E-4",
    "erev" : "-67.1289"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.78E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.15074699",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009017",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "4.0E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.0032419998",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "1.74E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bSTUT_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bSTUT_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bSTUT213_L6_NBC_1873e25157_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_34, id: dend_34, parent: soma_0
create dend_34
public dend_34
// Section: dend_31, id: dend_31, parent: soma_0
create dend_31
public dend_31
// Section: dend_30, id: dend_30, parent: soma_0
create dend_30
public dend_30
// Section: dend_17, id: dend_17, parent: soma_0
create dend_17
public dend_17
// Section: dend_14, id: dend_14, parent: soma_0
create dend_14
public dend_14
// Section: dend_11, id: dend_11, parent: soma_0
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: soma_0
create dend_8
public dend_8
// Section: dend_1, id: dend_1, parent: soma_0
create dend_1
public dend_1
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_36, id: dend_36, parent: dend_34
create dend_36
public dend_36
// Section: dend_35, id: dend_35, parent: dend_34
create dend_35
public dend_35
// Section: dend_33, id: dend_33, parent: dend_31
create dend_33
public dend_33
// Section: dend_32, id: dend_32, parent: dend_31
create dend_32
public dend_32
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_16, id: dend_16, parent: dend_14
create dend_16
public dend_16
// Section: dend_15, id: dend_15, parent: dend_14
create dend_15
public dend_15
// Section: dend_13, id: dend_13, parent: dend_11
create dend_13
public dend_13
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9
// Section: dend_5, id: dend_5, parent: dend_1
create dend_5
public dend_5
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_25, id: dend_25, parent: dend_19
create dend_25
public dend_25
// Section: dend_20, id: dend_20, parent: dend_19
create dend_20
public dend_20
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_4, id: dend_4, parent: dend_2
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_27, id: dend_27, parent: dend_25
create dend_27
public dend_27
// Section: dend_26, id: dend_26, parent: dend_25
create dend_26
public dend_26
// Section: dend_24, id: dend_24, parent: dend_20
create dend_24
public dend_24
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_29, id: dend_29, parent: dend_27
create dend_29
public dend_29
// Section: dend_28, id: dend_28, parent: dend_27
create dend_28
public dend_28
// Section: dend_23, id: dend_23, parent: dend_21
create dend_23
public dend_23
// Section: dend_22, id: dend_22, parent: dend_21
create dend_22
public dend_22

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_34, dend_31, dend_30, dend_17, dend_14, dend_11, dend_8, dend_1, dend_0, dend_36, dend_35, dend_33, dend_32, dend_19, dend_18, dend_16, dend_15, dend_13, dend_12, dend_10, dend_9, dend_5, dend_2, dend_25, dend_20, dend_7, dend_6, dend_4, dend_3, dend_27, dend_26, dend_24, dend_21, dend_29, dend_28, dend_23, dend_22]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_34, dend_31, dend_30, dend_17, dend_14, dend_11, dend_8, dend_1, dend_0, dend_36, dend_35, dend_33, dend_32, dend_19, dend_18, dend_16, dend_15, dend_13, dend_12, dend_10, dend_9, dend_5, dend_2, dend_25, dend_20, dend_7, dend_6, dend_4, dend_3, dend_27, dend_26, dend_24, dend_21, dend_29, dend_28, dend_23, dend_22]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_36]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_35]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_33]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_32]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_35
// Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_37
// Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_38
// Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_39
// Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_40
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_34]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_31]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_36
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_31
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_17, dend_17, dend_17, dend_17, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, axon_1, axon_1, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_27, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bSTUT_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bSTUT_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_34(0), soma_0(0.44999995616860894)
    connect dend_31(0), soma_0(0.44999995616860894)
    connect dend_30(0), soma_0(0.44999995616860894)
    connect dend_17(0), soma_0(0.44999995616860894)
    connect dend_14(0), soma_0(0.44999995616860894)
    connect dend_11(0), soma_0(0.44999995616860894)
    connect dend_8(0), soma_0(0.44999995616860894)
    connect dend_1(0), soma_0(0.44999995616860894)
    connect dend_0(0), soma_0(0.44999995616860894)
    connect axon_0(0), soma_0(1.0)
    connect dend_36(0), dend_34(1.0)
    connect dend_35(0), dend_34(1.0)
    connect dend_33(0), dend_31(1.0)
    connect dend_32(0), dend_31(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_16(0), dend_14(1.0)
    connect dend_15(0), dend_14(1.0)
    connect dend_13(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)
    connect dend_5(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_25(0), dend_19(1.0)
    connect dend_20(0), dend_19(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_4(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_27(0), dend_25(1.0)
    connect dend_26(0), dend_25(1.0)
    connect dend_24(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_29(0), dend_27(1.0)
    connect dend_28(0), dend_27(1.0)
    connect dend_23(0), dend_21(1.0)
    connect dend_22(0), dend_21(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -7.79996, 1.63899, 0.0, 2.31456 ) }
    soma_0 { pt3dadd( -7.07575, 1.4414, 0.0, 3.87478 ) }
    soma_0 { pt3dadd( -6.35154, 1.2438, 0.0, 5.48504 ) }
    soma_0 { pt3dadd( -5.62733, 1.04621, 0.0, 6.75924 ) }
    soma_0 { pt3dadd( -4.90312, 0.848615, 0.0, 7.77214 ) }
    soma_0 { pt3dadd( -4.17891, 0.65102, 0.0, 8.39732 ) }
    soma_0 { pt3dadd( -3.4547, 0.453425, 0.0, 9.01032 ) }
    soma_0 { pt3dadd( -2.73049, 0.255831, 0.0, 9.61582 ) }
    soma_0 { pt3dadd( -2.00628, 0.0582363, 0.0, 9.97495 ) }
    soma_0 { pt3dadd( -1.28207, -0.139358, 0.0, 10.1182 ) }
    soma_0 { pt3dadd( -0.557856, -0.336953, 0.0, 10.2615 ) }
    soma_0 { pt3dadd( 0.166353, -0.534547, 0.0, 10.4039 ) }
    soma_0 { pt3dadd( 0.890563, -0.732142, 0.0, 10.3605 ) }
    soma_0 { pt3dadd( 1.61477, -0.929737, 0.0, 10.3021 ) }
    soma_0 { pt3dadd( 2.33898, -1.12733, 0.0, 10.2398 ) }
    soma_0 { pt3dadd( 3.06319, -1.32493, 0.0, 10.0638 ) }
    soma_0 { pt3dadd( 3.7874, -1.52252, 0.0, 9.71016 ) }
    soma_0 { pt3dadd( 4.51161, -1.72011, 0.0, 8.98989 ) }
    soma_0 { pt3dadd( 5.23582, -1.91771, 0.0, 7.92103 ) }
    soma_0 { pt3dadd( 5.96003, -2.1153, 0.0, 6.49304 ) }
    soma_0 { pt3dadd( 6.68424, -2.3129, 0.0, 3.64119 ) }
    // Section: dend_34, id: dend_34, parent: soma_0 (entry count 21/100)
    dend_34 { pt3dclear() }
    dend_34 { pt3dadd( 2.72858, -5.60222, 7.36, 1.36 ) }
    dend_34 { pt3dadd( 2.72858, -5.60222, 7.36, 1.36 ) }
    dend_34 { pt3dadd( 3.06806, -7.58247, 7.10526, 1.14 ) }
    dend_34 { pt3dadd( 3.52761, -10.2632, 6.76043, 0.91 ) }
    dend_34 { pt3dadd( 4.12329, -13.7378, 6.31346, 0.91 ) }
    dend_34 { pt3dadd( 4.48319, -15.8372, 6.0434, 0.91 ) }
    dend_34 { pt3dadd( 5.03707, -19.0681, 5.62779, 0.91 ) }
    // Section: dend_31, id: dend_31, parent: soma_0 (entry count 28/100)
    dend_31 { pt3dclear() }
    dend_31 { pt3dadd( -1.14142, -3.24473, -3.98, 0.68 ) }
    dend_31 { pt3dadd( -1.14142, -3.24473, -3.98, 0.68 ) }
    dend_31 { pt3dadd( -2.28243, -4.24537, -5.93604, 0.68 ) }
    dend_31 { pt3dadd( -3.35835, -5.0589, -7.79151, 0.68 ) }
    dend_31 { pt3dadd( -4.14842, -5.63745, -9.13185, 0.68 ) }
    dend_31 { pt3dadd( -5.06328, -6.28101, -10.6794, 0.68 ) }
    dend_31 { pt3dadd( -6.10892, -6.93826, -12.361, 0.68 ) }
    dend_31 { pt3dadd( -7.15703, -7.55048, -14.0574, 0.68 ) }
    dend_31 { pt3dadd( -8.10946, -8.02454, -15.6177, 0.68 ) }
    dend_31 { pt3dadd( -9.14506, -8.47422, -17.2688, 0.68 ) }
    dend_31 { pt3dadd( -10.3189, -8.95188, -19.0565, 0.68 ) }
    dend_31 { pt3dadd( -11.6942, -9.46654, -21.0375, 0.68 ) }
    // Section: dend_30, id: dend_30, parent: soma_0 (entry count 40/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( 4.57856, -4.08522, 2.8, 0.68 ) }
    dend_30 { pt3dadd( 4.57856, -4.08522, 2.8, 0.68 ) }
    dend_30 { pt3dadd( 6.40438, -6.7102, 3.29091, 0.68 ) }
    dend_30 { pt3dadd( 7.41571, -8.23348, 3.60215, 0.68 ) }
    dend_30 { pt3dadd( 9.23242, -10.9781, 4.20442, 0.68 ) }
    dend_30 { pt3dadd( 10.7953, -13.2378, 4.6891, 0.68 ) }
    dend_30 { pt3dadd( 12.458, -15.5871, 5.152, 0.68 ) }
    dend_30 { pt3dadd( 13.702, -17.2817, 5.46227, 0.68 ) }
    dend_30 { pt3dadd( 15.5984, -19.7579, 5.9165, 0.45 ) }
    dend_30 { pt3dadd( 17.3792, -22.1141, 6.36822, 0.68 ) }
    dend_30 { pt3dadd( 20.0141, -25.5954, 7.1626, 0.68 ) }
    dend_30 { pt3dadd( 21.9315, -28.0652, 7.82273, 0.68 ) }
    dend_30 { pt3dadd( 23.2804, -29.8112, 8.37296, 0.68 ) }
    dend_30 { pt3dadd( 24.4886, -31.344, 8.92635, 0.68 ) }
    dend_30 { pt3dadd( 25.7143, -32.9182, 9.53942, 0.68 ) }
    dend_30 { pt3dadd( 27.2693, -34.9588, 10.3923, 0.68 ) }
    dend_30 { pt3dadd( 28.6299, -36.7089, 11.2413, 0.68 ) }
    dend_30 { pt3dadd( 30.2197, -38.6721, 12.3329, 0.45 ) }
    dend_30 { pt3dadd( 31.3528, -40.0389, 13.1398, 0.45 ) }
    dend_30 { pt3dadd( 33.3435, -42.372, 14.493, 0.45 ) }
    dend_30 { pt3dadd( 35.0243, -44.2177, 15.5775, 0.45 ) }
    dend_30 { pt3dadd( 36.2875, -45.552, 16.401, 0.45 ) }
    dend_30 { pt3dadd( 37.4141, -46.6912, 17.181, 0.45 ) }
    dend_30 { pt3dadd( 38.8484, -48.1332, 18.3331, 0.45 ) }
    dend_30 { pt3dadd( 40.3645, -49.8, 19.7953, 0.45 ) }
    dend_30 { pt3dadd( 41.437, -51.0336, 21.0234, 0.45 ) }
    dend_30 { pt3dadd( 42.2158, -52.0661, 22.0283, 0.45 ) }
    dend_30 { pt3dadd( 43.0625, -53.2737, 23.1015, 0.45 ) }
    dend_30 { pt3dadd( 44.0057, -54.6939, 24.2855, 0.45 ) }
    dend_30 { pt3dadd( 45.2002, -56.5944, 25.8395, 0.45 ) }
    dend_30 { pt3dadd( 46.0795, -58.1109, 27.0637, 0.45 ) }
    dend_30 { pt3dadd( 46.9162, -59.6141, 28.3002, 0.23 ) }
    dend_30 { pt3dadd( 47.8389, -61.2096, 29.5841, 0.23 ) }
    dend_30 { pt3dadd( 48.9131, -62.9588, 30.9613, 0.23 ) }
    dend_30 { pt3dadd( 49.6145, -64.0696, 31.8073, 0.23 ) }
    dend_30 { pt3dadd( 50.3303, -65.2654, 32.7587, 0.23 ) }
    dend_30 { pt3dadd( 51.4979, -67.4394, 34.4778, 0.23 ) }
    // Section: dend_17, id: dend_17, parent: soma_0 (entry count 77/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 6.16864, 1.51128, -0.84, 2.27 ) }
    dend_17 { pt3dadd( 6.16864, 1.51128, -0.84, 2.27 ) }
    dend_17 { pt3dadd( 7.52604, 2.25701, -1.67366, 1.82 ) }
    dend_17 { pt3dadd( 9.36188, 3.26558, -2.80116, 1.36 ) }
    dend_17 { pt3dadd( 10.7503, 4.02836, -3.65388, 1.36 ) }
    // Section: dend_14, id: dend_14, parent: soma_0 (entry count 82/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 3.79865, -4.68997, 5.46, 0.91 ) }
    dend_14 { pt3dadd( 3.79865, -4.68997, 5.46, 0.91 ) }
    dend_14 { pt3dadd( 4.64364, -5.65515, 5.95558, 0.91 ) }
    dend_14 { pt3dadd( 5.61114, -6.70334, 6.54895, 0.68 ) }
    dend_14 { pt3dadd( 6.59337, -7.66784, 7.19265, 0.68 ) }
    dend_14 { pt3dadd( 7.34196, -8.35552, 7.72336, 0.91 ) }
    dend_14 { pt3dadd( 8.15322, -9.02158, 8.34804, 0.91 ) }
    dend_14 { pt3dadd( 8.98654, -9.52305, 9.01268, 0.68 ) }
    dend_14 { pt3dadd( 10.0233, -9.89424, 9.86257, 0.68 ) }
    dend_14 { pt3dadd( 10.8683, -10.1037, 10.5841, 0.68 ) }
    dend_14 { pt3dadd( 11.332, -10.2106, 10.9865, 0.68 ) }
    dend_14 { pt3dadd( 12.2845, -10.4265, 11.8055, 0.68 ) }
    dend_14 { pt3dadd( 13.7482, -10.7696, 12.9643, 0.45 ) }
    dend_14 { pt3dadd( 14.8042, -11.0373, 13.7192, 0.45 ) }
    dend_14 { pt3dadd( 15.9147, -11.3458, 14.3994, 0.45 ) }
    dend_14 { pt3dadd( 17.0188, -11.7069, 15.0242, 0.45 ) }
    dend_14 { pt3dadd( 18.2481, -12.1668, 15.6653, 0.45 ) }
    dend_14 { pt3dadd( 19.1821, -12.5823, 16.1145, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_14 { pt3dadd( 20.4878, -13.2342, 16.7222, 0.68 ) }
    dend_14 { pt3dadd( 22.019, -13.9892, 17.3583, 0.68 ) }
    // Section: dend_11, id: dend_11, parent: soma_0 (entry count 2/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 0.288636, -4.61823, 6.82, 0.91 ) }
    dend_11 { pt3dadd( 0.288636, -4.61823, 6.82, 0.91 ) }
    dend_11 { pt3dadd( -0.790518, -6.25846, 7.68586, 0.91 ) }
    dend_11 { pt3dadd( -1.89262, -7.8036, 8.56345, 0.91 ) }
    dend_11 { pt3dadd( -2.87369, -9.17905, 9.34467, 0.91 ) }
    dend_11 { pt3dadd( -3.7083, -10.3492, 10.0093, 0.91 ) }
    dend_11 { pt3dadd( -4.59312, -11.5897, 10.7138, 0.91 ) }
    dend_11 { pt3dadd( -5.39281, -12.6702, 11.384, 0.91 ) }
    dend_11 { pt3dadd( -6.16816, -13.6179, 12.1154, 0.91 ) }
    // Section: dend_8, id: dend_8, parent: soma_0 (entry count 11/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -6.31134, 0.681023, 6.86, 0.91 ) }
    dend_8 { pt3dadd( -6.31134, 0.681023, 6.86, 0.91 ) }
    dend_8 { pt3dadd( -7.09966, 0.681023, 7.16292, 0.91 ) }
    dend_8 { pt3dadd( -8.84308, 0.681023, 7.83283, 0.91 ) }
    // Section: dend_1, id: dend_1, parent: soma_0 (entry count 15/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -6.99139, 1.57278, -3.54, 0.91 ) }
    dend_1 { pt3dadd( -6.99139, 1.57278, -3.54, 0.91 ) }
    dend_1 { pt3dadd( -8.16827, 1.75006, -3.85281, 0.91 ) }
    dend_1 { pt3dadd( -9.60188, 1.8874, -4.25526, 0.91 ) }
    dend_1 { pt3dadd( -11.613, 2.0404, -4.89114, 0.91 ) }
    dend_1 { pt3dadd( -12.6512, 2.10303, -5.25491, 0.91 ) }
    dend_1 { pt3dadd( -14.2393, 2.16748, -5.8486, 0.91 ) }
    dend_1 { pt3dadd( -15.7263, 2.17688, -6.44477, 0.91 ) }
    dend_1 { pt3dadd( -17.1725, 2.14971, -7.04256, 0.91 ) }
    dend_1 { pt3dadd( -18.8339, 2.08189, -7.74989, 0.68 ) }
    dend_1 { pt3dadd( -20.816, 1.95619, -8.61395, 0.91 ) }
    dend_1 { pt3dadd( -22.2862, 1.8577, -9.26976, 0.91 ) }
    dend_1 { pt3dadd( -23.9275, 1.77342, -10.0375, 0.91 ) }
    dend_1 { pt3dadd( -26.366, 1.68186, -11.1566, 0.91 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 29/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -4.04144, 4.21728, 5.18, 0.91 ) }
    dend_0 { pt3dadd( -4.04144, 4.21728, 5.18, 0.91 ) }
    dend_0 { pt3dadd( -4.67912, 6.651, 6.82552, 0.91 ) }
    dend_0 { pt3dadd( -4.93369, 8.60473, 8.14221, 0.68 ) }
    dend_0 { pt3dadd( -4.93577, 10.3811, 9.3314, 0.68 ) }
    dend_0 { pt3dadd( -4.82733, 11.6709, 10.2061, 0.68 ) }
    dend_0 { pt3dadd( -4.5759, 13.3898, 11.3795, 0.68 ) }
    dend_0 { pt3dadd( -4.19593, 14.9183, 12.48, 0.68 ) }
    dend_0 { pt3dadd( -3.50407, 16.9564, 14.0824, 0.68 ) }
    dend_0 { pt3dadd( -2.82298, 18.9126, 15.6452, 0.68 ) }
    dend_0 { pt3dadd( -2.33885, 20.2641, 16.7876, 0.68 ) }
    dend_0 { pt3dadd( -1.93353, 21.467, 17.8975, 0.68 ) }
    dend_0 { pt3dadd( -1.5221, 22.7721, 19.201, 0.68 ) }
    dend_0 { pt3dadd( -1.19666, 23.9973, 20.5412, 0.45 ) }
    dend_0 { pt3dadd( -0.895068, 25.4729, 22.4058, 0.45 ) }
    dend_0 { pt3dadd( -0.815157, 26.7975, 24.2602, 0.45 ) }
    dend_0 { pt3dadd( -0.835895, 27.8708, 25.8538, 0.45 ) }
    dend_0 { pt3dadd( -0.873768, 28.7613, 27.1995, 0.68 ) }
    dend_0 { pt3dadd( -0.892983, 29.6789, 28.5433, 0.45 ) }
    dend_0 { pt3dadd( -0.882482, 30.7219, 29.9894, 0.45 ) }
    dend_0 { pt3dadd( -0.965116, 31.5165, 31.0275, 0.45 ) }
    dend_0 { pt3dadd( -1.31766, 32.7591, 32.4489, 0.45 ) }
    dend_0 { pt3dadd( -1.71048, 33.8422, 33.6678, 0.45 ) }
    dend_0 { pt3dadd( -2.10637, 35.1324, 35.1321, 0.45 ) }
    dend_0 { pt3dadd( -2.31935, 36.2671, 36.3603, 0.45 ) }
    dend_0 { pt3dadd( -2.55396, 37.7528, 37.8707, 0.45 ) }
    dend_0 { pt3dadd( -2.80629, 38.9077, 39.0522, 0.45 ) }
    dend_0 { pt3dadd( -3.18677, 39.9343, 40.1338, 0.45 ) }
    dend_0 { pt3dadd( -3.87359, 41.3779, 41.654, 0.45 ) }
    dend_0 { pt3dadd( -4.40665, 42.4289, 42.7591, 0.45 ) }
    dend_0 { pt3dadd( -4.88083, 43.5201, 43.9295, 0.45 ) }
    dend_0 { pt3dadd( -5.11691, 44.3041, 44.7922, 0.45 ) }
    dend_0 { pt3dadd( -5.49312, 45.9954, 46.615, 0.45 ) }
    dend_0 { pt3dadd( -5.72067, 47.3224, 47.9732, 0.45 ) }
    dend_0 { pt3dadd( -5.81755, 48.1532, 48.8879, 0.45 ) }
    dend_0 { pt3dadd( -5.65149, 49.2279, 50.185, 0.45 ) }
    dend_0 { pt3dadd( -5.20943, 50.3192, 51.5975, 0.45 ) }
    dend_0 { pt3dadd( -4.5558, 51.4575, 53.1708, 0.45 ) }
    dend_0 { pt3dadd( -3.89255, 52.4443, 54.5375, 0.45 ) }
    dend_0 { pt3dadd( -2.97325, 53.6378, 56.2558, 0.45 ) }
    dend_0 { pt3dadd( -1.52042, 55.5061, 58.9938, 0.23 ) }
    dend_0 { pt3dadd( -0.989264, 56.1455, 59.9805, 0.23 ) }
    dend_0 { pt3dadd( -0.206653, 57.0469, 61.3756, 0.23 ) }
    dend_0 { pt3dadd( 0.670446, 57.9922, 62.7983, 0.23 ) }
    dend_0 { pt3dadd( 1.62963, 58.9761, 64.2054, 0.23 ) }
    dend_0 { pt3dadd( 2.58907, 59.9242, 65.516, 0.23 ) }
    dend_0 { pt3dadd( 3.89438, 61.2664, 67.3518, 0.23 ) }
    dend_0 { pt3dadd( 5.41782, 62.7183, 69.3535, 0.23 ) }
    dend_0 { pt3dadd( 6.91841, 64.0139, 71.1957, 0.23 ) }
    dend_0 { pt3dadd( 8.34587, 65.1452, 72.9184, 0.23 ) }
    dend_0 { pt3dadd( 9.4758, 66.1077, 74.2737, 0.23 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 80/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 6.68424, -2.3129, 0.0, 0.68 ) }
    axon_0 { pt3dadd( 21.1553, -6.2612, 0.0, 0.68 ) }
    axon_0 { pt3dadd( 35.6263, -10.2095, 0.0, 0.68 ) }
    // Section: dend_36, id: dend_36, parent: dend_34 (entry count 83/100)
    dend_36 { pt3dclear() }
    dend_36 { pt3dadd( 5.03707, -19.0681, 5.62779, 0.68 ) }
    dend_36 { pt3dadd( 6.26722, -20.1019, 5.72042, 0.68 ) }
    dend_36 { pt3dadd( 8.42183, -21.9466, 5.78297, 0.68 ) }
    dend_36 { pt3dadd( 10.5064, -23.7845, 5.80728, 0.68 ) }
    dend_36 { pt3dadd( 12.4007, -25.4751, 5.83214, 0.68 ) }
    dend_36 { pt3dadd( 14.7465, -27.7038, 5.86171, 0.68 ) }
    dend_36 { pt3dadd( 16.8274, -29.8542, 5.88019, 0.68 ) }
    dend_36 { pt3dadd( 18.6562, -31.9385, 5.85131, 0.68 ) }
    dend_36 { pt3dadd( 19.7415, -33.2791, 5.79733, 0.68 ) }
    dend_36 { pt3dadd( 21.7048, -35.848, 5.6497, 0.68 ) }
    dend_36 { pt3dadd( 23.5017, -38.2827, 5.48782, 0.68 ) }
    dend_36 { pt3dadd( 24.9696, -40.4247, 5.3415, 0.68 ) }
    dend_36 { pt3dadd( 26.4815, -42.804, 5.23352, 0.45 ) }
    dend_36 { pt3dadd( 27.7489, -44.9609, 5.12111, 0.45 ) }
    dend_36 { pt3dadd( 28.961, -47.1388, 4.89432, 0.45 ) }
    dend_36 { pt3dadd( 30.017, -49.0409, 4.56258, 0.45 ) }
    dend_36 { pt3dadd( 31.5286, -51.5469, 3.91599, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_36 { pt3dadd( 32.749, -53.5129, 3.2676, 0.45 ) }
    dend_36 { pt3dadd( 33.972, -55.488, 2.47487, 0.68 ) }
    dend_36 { pt3dadd( 35.2424, -57.4299, 1.58492, 0.68 ) }
    dend_36 { pt3dadd( 36.7167, -59.5481, 0.530575, 0.68 ) }
    dend_36 { pt3dadd( 38.276, -61.5641, -0.539492, 0.45 ) }
    dend_36 { pt3dadd( 39.9438, -63.4686, -1.58083, 0.45 ) }
    dend_36 { pt3dadd( 41.1022, -64.7544, -2.23507, 0.45 ) }
    dend_36 { pt3dadd( 43.1405, -66.9394, -3.16139, 0.45 ) }
    dend_36 { pt3dadd( 44.0948, -67.9382, -3.48519, 0.45 ) }
    dend_36 { pt3dadd( 45.4289, -69.273, -3.82774, 0.45 ) }
    dend_36 { pt3dadd( 47.1236, -70.836, -4.1794, 0.45 ) }
    dend_36 { pt3dadd( 49.4682, -72.7381, -4.64958, 0.45 ) }
    dend_36 { pt3dadd( 51.6649, -74.3307, -5.14225, 0.45 ) }
    dend_36 { pt3dadd( 53.9234, -75.8711, -5.78461, 0.45 ) }
    dend_36 { pt3dadd( 55.3907, -76.7555, -6.26055, 0.45 ) }
    dend_36 { pt3dadd( 57.1257, -77.677, -6.8683, 0.45 ) }
    dend_36 { pt3dadd( 59.4386, -78.8232, -7.73929, 0.45 ) }
    dend_36 { pt3dadd( 62.0181, -80.0746, -8.80754, 0.45 ) }
    dend_36 { pt3dadd( 64.6003, -81.4289, -9.94421, 0.45 ) }
    dend_36 { pt3dadd( 66.3261, -82.3438, -10.7625, 0.45 ) }
    dend_36 { pt3dadd( 68.0374, -83.2803, -11.5892, 0.45 ) }
    dend_36 { pt3dadd( 69.0517, -83.8618, -12.0797, 0.45 ) }
    dend_36 { pt3dadd( 70.5358, -84.7506, -12.7611, 0.45 ) }
    dend_36 { pt3dadd( 72.3564, -85.9343, -13.5898, 0.45 ) }
    dend_36 { pt3dadd( 74.2496, -87.183, -14.4746, 0.23 ) }
    dend_36 { pt3dadd( 76.0508, -88.4457, -15.349, 0.23 ) }
    dend_36 { pt3dadd( 77.5673, -89.5236, -16.1287, 0.23 ) }
    dend_36 { pt3dadd( 79.2613, -90.8081, -17.1179, 0.23 ) }
    dend_36 { pt3dadd( 81.2261, -92.4913, -18.3722, 0.23 ) }
    dend_36 { pt3dadd( 83.3042, -94.5335, -19.7512, 0.23 ) }
    dend_36 { pt3dadd( 83.7358, -94.9884, -20.0202, 0.23 ) }
    dend_36 { pt3dadd( 84.7116, -96.0667, -20.5896, 0.23 ) }
    dend_36 { pt3dadd( 86.4502, -98.113, -21.5707, 0.23 ) }
    dend_36 { pt3dadd( 87.865, -99.8972, -22.368, 0.23 ) }
    dend_36 { pt3dadd( 89.9595, -102.6, -23.5017, 0.23 ) }
    dend_36 { pt3dadd( 91.7152, -104.997, -24.4733, 0.23 ) }
    dend_36 { pt3dadd( 93.1982, -107.132, -25.3755, 0.23 ) }
    dend_36 { pt3dadd( 94.8933, -109.78, -26.4988, 0.23 ) }
    dend_36 { pt3dadd( 96.2149, -111.882, -27.3965, 0.23 ) }
    dend_36 { pt3dadd( 96.7924, -112.873, -27.8276, 0.23 ) }
    dend_36 { pt3dadd( 97.4508, -114.197, -28.3679, 0.23 ) }
    dend_36 { pt3dadd( 98.4391, -116.311, -29.131, 0.23 ) }
    dend_36 { pt3dadd( 99.1696, -117.827, -29.6164, 0.23 ) }
    dend_36 { pt3dadd( 100.376, -120.278, -30.2584, 0.23 ) }
    dend_36 { pt3dadd( 101.663, -122.783, -30.7609, 0.23 ) }
    dend_36 { pt3dadd( 103.067, -125.412, -31.1306, 0.23 ) }
    dend_36 { pt3dadd( 104.276, -127.573, -31.3275, 0.23 ) }
    dend_36 { pt3dadd( 104.924, -128.652, -31.3831, 0.23 ) }
    dend_36 { pt3dadd( 106.243, -130.686, -31.4471, 0.23 ) }
    dend_36 { pt3dadd( 107.956, -133.327, -31.5171, 0.23 ) }
    dend_36 { pt3dadd( 109.535, -135.572, -31.5727, 0.23 ) }
    dend_36 { pt3dadd( 110.784, -137.192, -31.6252, 0.23 ) }
    dend_36 { pt3dadd( 111.788, -138.471, -31.6804, 0.23 ) }
    dend_36 { pt3dadd( 112.864, -139.858, -31.7628, 0.23 ) }
    dend_36 { pt3dadd( 113.996, -141.369, -31.9088, 0.23 ) }
    dend_36 { pt3dadd( 116.5, -145.078, -32.4397, 0.23 ) }
    dend_36 { pt3dadd( 118.256, -148.059, -32.93, 0.23 ) }
    dend_36 { pt3dadd( 119.343, -150.173, -33.3413, 0.23 ) }
    dend_36 { pt3dadd( 120.262, -152.179, -33.7805, 0.23 ) }
    dend_36 { pt3dadd( 121.359, -154.82, -34.4169, 0.23 ) }
    dend_36 { pt3dadd( 122.557, -157.869, -35.1714, 0.23 ) }
    dend_36 { pt3dadd( 124.554, -163.611, -36.6406, 0.23 ) }
    dend_36 { pt3dadd( 125.435, -166.387, -37.3649, 0.23 ) }
    dend_36 { pt3dadd( 126.168, -168.7, -37.9937, 0.23 ) }
    dend_36 { pt3dadd( 126.704, -170.305, -38.4393, 0.23 ) }
    dend_36 { pt3dadd( 136.076, -179.027, -39.7935, 0.23 ) }
    // Section: dend_35, id: dend_35, parent: dend_34 (entry count 66/100)
    dend_35 { pt3dclear() }
    dend_35 { pt3dadd( 5.03707, -19.0681, 5.62779, 0.45 ) }
    dend_35 { pt3dadd( 5.314, -20.3493, 3.92345, 0.45 ) }
    dend_35 { pt3dadd( 5.70779, -21.521, 2.27658, 0.45 ) }
    dend_35 { pt3dadd( 5.89635, -22.0973, 1.45858, 0.45 ) }
    dend_35 { pt3dadd( 6.26153, -23.2413, -0.0758437, 0.45 ) }
    dend_35 { pt3dadd( 6.62694, -24.1644, -1.30376, 0.45 ) }
    dend_35 { pt3dadd( 7.04424, -25.0424, -2.44912, 0.45 ) }
    dend_35 { pt3dadd( 7.56308, -25.8574, -3.47983, 0.45 ) }
    dend_35 { pt3dadd( 8.19537, -26.6476, -4.42419, 0.45 ) }
    dend_35 { pt3dadd( 8.97693, -27.5025, -5.35447, 0.45 ) }
    dend_35 { pt3dadd( 10.3163, -28.901, -6.68719, 0.45 ) }
    dend_35 { pt3dadd( 11.339, -30.0052, -7.63004, 0.45 ) }
    dend_35 { pt3dadd( 12.3046, -31.1737, -8.57265, 0.45 ) }
    dend_35 { pt3dadd( 13.2197, -32.2097, -9.45293, 0.45 ) }
    dend_35 { pt3dadd( 14.403, -33.4571, -10.6128, 0.45 ) }
    dend_35 { pt3dadd( 15.0318, -34.1206, -11.3332, 0.45 ) }
    dend_35 { pt3dadd( 15.8191, -35.0339, -12.3726, 0.45 ) }
    dend_35 { pt3dadd( 16.7845, -36.1298, -13.8487, 0.23 ) }
    dend_35 { pt3dadd( 17.9927, -37.4732, -15.9159, 0.23 ) }
    dend_35 { pt3dadd( 18.9308, -38.4592, -17.5573, 0.23 ) }
    dend_35 { pt3dadd( 20.041, -39.5584, -19.5528, 0.23 ) }
    dend_35 { pt3dadd( 20.6646, -40.1511, -20.677, 0.23 ) }
    dend_35 { pt3dadd( 21.933, -41.4286, -23.0937, 0.23 ) }
    dend_35 { pt3dadd( 22.8729, -42.4529, -24.9813, 0.23 ) }
    dend_35 { pt3dadd( 23.7545, -43.5857, -26.8886, 0.23 ) }
    dend_35 { pt3dadd( 24.7303, -44.8718, -29.0184, 0.23 ) }
    dend_35 { pt3dadd( 25.3314, -45.6806, -30.3188, 0.23 ) }
    dend_35 { pt3dadd( 26.3049, -47.0456, -32.5331, 0.23 ) }
    dend_35 { pt3dadd( 26.7365, -47.7857, -33.6031, 0.23 ) }
    dend_35 { pt3dadd( 27.2065, -48.7128, -34.9471, 0.23 ) }
    dend_35 { pt3dadd( 30.4274, -55.4745, -41.0294, 0.23 ) }
    // Section: dend_33, id: dend_33, parent: dend_31 (entry count 97/100)
    dend_33 { pt3dclear() }
    dend_33 { pt3dadd( -11.6942, -9.46654, -21.0375, 0.45 ) }
    dend_33 { pt3dadd( -12.767, -9.75917, -22.1562, 0.45 ) }
    dend_33 { pt3dadd( -13.6951, -9.97426, -23.1376, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_33 { pt3dadd( -14.4775, -10.1607, -23.983, 0.45 ) }
    dend_33 { pt3dadd( -15.285, -10.3441, -24.7883, 0.45 ) }
    dend_33 { pt3dadd( -16.2427, -10.5798, -25.7335, 0.45 ) }
    dend_33 { pt3dadd( -17.0823, -10.7751, -26.5711, 0.45 ) }
    dend_33 { pt3dadd( -18.0666, -10.994, -27.6419, 0.45 ) }
    dend_33 { pt3dadd( -19.0117, -11.1862, -28.7228, 0.45 ) }
    dend_33 { pt3dadd( -20.3429, -11.4755, -30.2615, 0.45 ) }
    dend_33 { pt3dadd( -21.095, -11.6558, -31.1499, 0.45 ) }
    dend_33 { pt3dadd( -22.0706, -11.9373, -32.3505, 0.45 ) }
    dend_33 { pt3dadd( -22.8191, -12.1943, -33.3577, 0.45 ) }
    dend_33 { pt3dadd( -23.4067, -12.4132, -34.2189, 0.45 ) }
    dend_33 { pt3dadd( -24.026, -12.6562, -35.2071, 0.45 ) }
    dend_33 { pt3dadd( -24.5682, -12.9086, -36.2123, 0.45 ) }
    dend_33 { pt3dadd( -25.1233, -13.1834, -37.2364, 0.45 ) }
    dend_33 { pt3dadd( -25.7405, -13.5919, -38.3874, 0.45 ) }
    dend_33 { pt3dadd( -31.4704, -14.6822, -45.6084, 0.45 ) }
    dend_33 { pt3dadd( -36.2827, -14.5309, -53.5376, 0.45 ) }
    dend_33 { pt3dadd( -40.11, -14.1086, -61.9779, 0.45 ) }
    // Section: dend_32, id: dend_32, parent: dend_31 (entry count 18/100)
    dend_32 { pt3dclear() }
    dend_32 { pt3dadd( -11.6942, -9.46654, -21.0375, 0.45 ) }
    dend_32 { pt3dadd( -11.6047, -10.5437, -21.8115, 0.45 ) }
    dend_32 { pt3dadd( -11.5612, -11.4149, -22.4729, 0.45 ) }
    dend_32 { pt3dadd( -11.5614, -12.8626, -23.5639, 0.45 ) }
    dend_32 { pt3dadd( -11.5365, -14.0731, -24.5173, 0.45 ) }
    dend_32 { pt3dadd( -11.4996, -14.8614, -25.1923, 0.45 ) }
    dend_32 { pt3dadd( -11.4144, -15.752, -25.9894, 0.45 ) }
    dend_32 { pt3dadd( -11.2254, -16.7909, -27.0298, 0.45 ) }
    dend_32 { pt3dadd( -11.1288, -17.2329, -27.4839, 0.45 ) }
    dend_32 { pt3dadd( -10.9511, -18.283, -28.4738, 0.45 ) }
    dend_32 { pt3dadd( -10.8729, -19.3033, -29.3269, 0.45 ) }
    dend_32 { pt3dadd( -10.8871, -20.5089, -30.2032, 0.45 ) }
    dend_32 { pt3dadd( -10.9749, -21.4568, -30.7323, 0.45 ) }
    dend_32 { pt3dadd( -11.036, -22.2327, -31.1316, 0.45 ) }
    dend_32 { pt3dadd( -11.0779, -23.7887, -31.9904, 0.45 ) }
    dend_32 { pt3dadd( -11.0822, -25.2121, -32.7752, 0.45 ) }
    dend_32 { pt3dadd( -10.9784, -26.6307, -33.5788, 0.45 ) }
    dend_32 { pt3dadd( -10.701, -27.9723, -34.4883, 0.45 ) }
    dend_32 { pt3dadd( -10.0966, -29.6683, -35.968, 0.45 ) }
    dend_32 { pt3dadd( -9.40363, -31.015, -37.4037, 0.23 ) }
    dend_32 { pt3dadd( -9.10574, -31.4657, -37.9758, 0.23 ) }
    dend_32 { pt3dadd( -8.52205, -32.2079, -39.1146, 0.23 ) }
    dend_32 { pt3dadd( -7.79552, -33.109, -40.5379, 0.23 ) }
    dend_32 { pt3dadd( -6.91903, -34.2013, -42.319, 0.23 ) }
    dend_32 { pt3dadd( -6.58355, -34.7065, -43.0831, 0.23 ) }
    dend_32 { pt3dadd( -5.99549, -35.7807, -44.6484, 0.23 ) }
    dend_32 { pt3dadd( -5.62175, -36.5528, -45.774, 0.23 ) }
    dend_32 { pt3dadd( -5.022, -37.8193, -47.7264, 0.23 ) }
    dend_32 { pt3dadd( -4.25741, -43.8256, -54.1504, 0.23 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 47/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 10.7503, 4.02836, -3.65388, 1.36 ) }
    dend_19 { pt3dadd( 10.7973, 4.0403, -3.66708, 1.36 ) }
    dend_19 { pt3dadd( 11.6453, 4.25579, -3.90545, 1.82 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 50/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 10.7503, 4.02836, -3.65388, 0.45 ) }
    dend_18 { pt3dadd( 10.059, 4.38705, -4.28157, 0.45 ) }
    dend_18 { pt3dadd( 9.33223, 4.74576, -4.85326, 0.45 ) }
    dend_18 { pt3dadd( 8.36087, 5.2547, -5.59861, 0.45 ) }
    dend_18 { pt3dadd( 7.61556, 5.71211, -6.17886, 0.45 ) }
    dend_18 { pt3dadd( 6.9357, 6.15573, -6.72304, 0.45 ) }
    dend_18 { pt3dadd( 6.23087, 6.65918, -7.3429, 0.45 ) }
    dend_18 { pt3dadd( 5.60829, 7.1577, -8.01442, 0.45 ) }
    dend_18 { pt3dadd( 5.26068, 7.53683, -8.52694, 0.45 ) }
    dend_18 { pt3dadd( 4.8901, 8.11254, -9.33866, 0.45 ) }
    dend_18 { pt3dadd( 4.53278, 8.84444, -10.4346, 0.45 ) }
    dend_18 { pt3dadd( 4.22245, 9.6529, -11.7367, 0.45 ) }
    dend_18 { pt3dadd( 3.8695, 10.6607, -13.4934, 0.45 ) }
    dend_18 { pt3dadd( 3.58133, 11.5129, -15.1026, 0.45 ) }
    dend_18 { pt3dadd( 3.28875, 12.2408, -16.6066, 0.45 ) }
    dend_18 { pt3dadd( 2.91778, 13.0115, -18.3285, 0.45 ) }
    dend_18 { pt3dadd( 2.49987, 13.7582, -20.0004, 0.45 ) }
    dend_18 { pt3dadd( 2.16661, 14.2146, -21.0297, 0.45 ) }
    dend_18 { pt3dadd( 1.84076, 14.5447, -21.7559, 0.45 ) }
    dend_18 { pt3dadd( 1.14352, 15.1244, -22.9995, 0.45 ) }
    dend_18 { pt3dadd( 0.495526, 15.6277, -23.9971, 0.45 ) }
    dend_18 { pt3dadd( -0.08886, 16.0611, -24.8203, 0.45 ) }
    dend_18 { pt3dadd( -0.695953, 16.495, -25.6764, 0.45 ) }
    dend_18 { pt3dadd( -1.41304, 17.0191, -26.6756, 0.45 ) }
    dend_18 { pt3dadd( -1.86107, 17.3569, -27.311, 0.45 ) }
    dend_18 { pt3dadd( -2.6992, 18.0388, -28.6444, 0.23 ) }
    dend_18 { pt3dadd( -3.3258, 18.6189, -29.7346, 0.23 ) }
    dend_18 { pt3dadd( -4.43229, 19.7913, -31.8666, 0.23 ) }
    dend_18 { pt3dadd( -4.97348, 20.3953, -32.9601, 0.23 ) }
    dend_18 { pt3dadd( -5.58451, 21.1204, -34.2656, 0.23 ) }
    dend_18 { pt3dadd( -6.46151, 22.2046, -36.1661, 0.23 ) }
    dend_18 { pt3dadd( -7.09646, 23.0182, -37.527, 0.23 ) }
    dend_18 { pt3dadd( -7.87033, 24.1235, -39.2318, 0.23 ) }
    dend_18 { pt3dadd( -8.4917, 25.1692, -40.6906, 0.23 ) }
    dend_18 { pt3dadd( -11.6284, 29.7286, -46.6479, 0.23 ) }
    // Section: dend_16, id: dend_16, parent: dend_14 (entry count 85/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 22.019, -13.9892, 17.3583, 0.45 ) }
    dend_16 { pt3dadd( 22.4269, -14.2351, 17.9288, 0.45 ) }
    dend_16 { pt3dadd( 23.1548, -14.5246, 18.7667, 0.45 ) }
    dend_16 { pt3dadd( 24.0034, -14.7909, 19.6215, 0.45 ) }
    dend_16 { pt3dadd( 24.4482, -14.9447, 20.0572, 0.45 ) }
    dend_16 { pt3dadd( 25.0413, -15.1477, 20.6537, 0.45 ) }
    dend_16 { pt3dadd( 25.7926, -15.3863, 21.4404, 0.45 ) }
    dend_16 { pt3dadd( 26.7486, -15.6268, 22.4452, 0.45 ) }
    dend_16 { pt3dadd( 27.3196, -15.754, 23.0397, 0.45 ) }
    dend_16 { pt3dadd( 27.9573, -15.8648, 23.7071, 0.45 ) }
    dend_16 { pt3dadd( 28.5617, -15.9374, 24.3401, 0.45 ) }
    dend_16 { pt3dadd( 29.2107, -15.9996, 24.9986, 0.45 ) }
    dend_16 { pt3dadd( 29.927, -16.0956, 25.7365, 0.45 ) }
    dend_16 { pt3dadd( 30.7097, -16.2124, 26.4948, 0.45 ) }
    dend_16 { pt3dadd( 31.4351, -16.2898, 27.1046, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_16 { pt3dadd( 32.2566, -16.3741, 27.7118, 0.45 ) }
    dend_16 { pt3dadd( 33.1634, -16.5207, 28.3133, 0.45 ) }
    dend_16 { pt3dadd( 34.1914, -16.7435, 28.9011, 0.45 ) }
    dend_16 { pt3dadd( 35.4207, -17.0014, 29.4504, 0.45 ) }
    dend_16 { pt3dadd( 36.6167, -17.1902, 29.8957, 0.23 ) }
    dend_16 { pt3dadd( 37.7238, -17.3655, 30.2754, 0.23 ) }
    dend_16 { pt3dadd( 38.8151, -17.5523, 30.6119, 0.23 ) }
    dend_16 { pt3dadd( 40.3202, -17.784, 31.0272, 0.23 ) }
    dend_16 { pt3dadd( 42.7747, -18.0977, 31.6329, 0.23 ) }
    dend_16 { pt3dadd( 44.7481, -18.335, 32.0789, 0.23 ) }
    // Section: dend_15, id: dend_15, parent: dend_14 (entry count 10/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 22.019, -13.9892, 17.3583, 0.45 ) }
    dend_15 { pt3dadd( 24.1183, -14.9076, 17.728, 0.45 ) }
    dend_15 { pt3dadd( 25.1643, -15.2655, 17.9731, 0.45 ) }
    dend_15 { pt3dadd( 27.3078, -15.9744, 18.467, 0.23 ) }
    dend_15 { pt3dadd( 28.999, -16.4766, 18.8494, 0.23 ) }
    dend_15 { pt3dadd( 30.529, -16.8316, 19.1997, 0.68 ) }
    dend_15 { pt3dadd( 32.5262, -17.2395, 19.6647, 0.45 ) }
    dend_15 { pt3dadd( 34.8707, -17.565, 20.2492, 0.45 ) }
    dend_15 { pt3dadd( 37.6452, -17.7925, 20.9832, 0.45 ) }
    dend_15 { pt3dadd( 39.4012, -17.8626, 21.4646, 0.45 ) }
    dend_15 { pt3dadd( 41.6198, -17.8769, 22.1125, 0.45 ) }
    dend_15 { pt3dadd( 44.2642, -17.8639, 22.8956, 0.45 ) }
    dend_15 { pt3dadd( 46.5307, -17.8092, 23.5568, 0.45 ) }
    dend_15 { pt3dadd( 47.8699, -17.7635, 23.9615, 0.45 ) }
    dend_15 { pt3dadd( 49.1496, -17.6509, 24.4116, 0.45 ) }
    dend_15 { pt3dadd( 50.4745, -17.5798, 24.9132, 0.45 ) }
    // Section: dend_13, id: dend_13, parent: dend_11 (entry count 26/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -6.16816, -13.6179, 12.1154, 0.45 ) }
    dend_13 { pt3dadd( -6.2739, -13.37, 12.9177, 0.45 ) }
    dend_13 { pt3dadd( -6.55069, -13.15, 14.5009, 0.45 ) }
    dend_13 { pt3dadd( -6.7856, -13.2162, 15.6027, 0.45 ) }
    dend_13 { pt3dadd( -7.06901, -13.5035, 16.6895, 0.45 ) }
    dend_13 { pt3dadd( -7.20598, -13.6499, 17.1354, 0.45 ) }
    dend_13 { pt3dadd( -7.40934, -13.8956, 17.8679, 0.45 ) }
    dend_13 { pt3dadd( -7.69851, -14.4233, 19.1231, 0.45 ) }
    dend_13 { pt3dadd( -7.90652, -14.9016, 20.0347, 0.45 ) }
    dend_13 { pt3dadd( -8.12887, -15.5933, 21.1575, 0.45 ) }
    dend_13 { pt3dadd( -8.15721, -15.8944, 21.6388, 0.45 ) }
    dend_13 { pt3dadd( -8.12399, -16.4563, 22.5459, 0.45 ) }
    dend_13 { pt3dadd( -8.03759, -17.1018, 23.6319, 0.45 ) }
    dend_13 { pt3dadd( -7.92137, -17.9145, 24.987, 0.45 ) }
    dend_13 { pt3dadd( -7.76919, -18.6133, 26.0947, 0.45 ) }
    dend_13 { pt3dadd( -7.50154, -19.4033, 27.4154, 0.45 ) }
    dend_13 { pt3dadd( -7.20424, -20.1112, 28.6136, 0.45 ) }
    dend_13 { pt3dadd( -6.88777, -20.7396, 29.7025, 0.45 ) }
    dend_13 { pt3dadd( -6.53328, -21.3368, 30.8233, 0.45 ) }
    dend_13 { pt3dadd( -6.168, -21.8857, 32.0495, 0.45 ) }
    dend_13 { pt3dadd( -5.84548, -22.4629, 33.4889, 0.45 ) }
    dend_13 { pt3dadd( -5.69099, -22.8395, 34.3428, 0.45 ) }
    dend_13 { pt3dadd( -5.59743, -23.1826, 35.0991, 0.45 ) }
    dend_13 { pt3dadd( -5.62873, -23.6898, 36.1768, 0.45 ) }
    dend_13 { pt3dadd( -5.92167, -24.296, 37.3655, 0.45 ) }
    dend_13 { pt3dadd( -6.23648, -24.7675, 38.1297, 0.45 ) }
    dend_13 { pt3dadd( -6.78015, -25.534, 39.1667, 0.45 ) }
    dend_13 { pt3dadd( -7.65661, -26.5264, 40.541, 0.45 ) }
    dend_13 { pt3dadd( -8.45236, -27.3164, 41.6553, 0.45 ) }
    dend_13 { pt3dadd( -9.00763, -27.9089, 42.433, 0.45 ) }
    dend_13 { pt3dadd( -9.65468, -28.6493, 43.3809, 0.45 ) }
    dend_13 { pt3dadd( -10.1857, -29.2459, 44.1602, 0.45 ) }
    dend_13 { pt3dadd( -11.1223, -30.228, 45.4333, 0.45 ) }
    dend_13 { pt3dadd( -11.6659, -30.9023, 46.2092, 0.45 ) }
    dend_13 { pt3dadd( -12.4523, -32.1673, 47.4743, 0.45 ) }
    dend_13 { pt3dadd( -13.1244, -33.3433, 48.6142, 0.45 ) }
    dend_13 { pt3dadd( -13.3875, -33.8283, 49.108, 0.45 ) }
    dend_13 { pt3dadd( -13.7944, -34.7997, 50.1275, 0.45 ) }
    dend_13 { pt3dadd( -14.0211, -35.9084, 51.2502, 0.45 ) }
    dend_13 { pt3dadd( -13.9706, -37.0527, 52.4741, 0.45 ) }
    dend_13 { pt3dadd( -13.7611, -37.7547, 53.2746, 0.45 ) }
    dend_13 { pt3dadd( -13.2908, -38.4966, 54.0232, 0.45 ) }
    dend_13 { pt3dadd( -12.5493, -39.1768, 54.6562, 0.45 ) }
    dend_13 { pt3dadd( -10.9894, -40.1457, 55.4778, 0.45 ) }
    dend_13 { pt3dadd( -9.26053, -40.9129, 56.098, 0.45 ) }
    dend_13 { pt3dadd( -7.34833, -41.5174, 56.5692, 0.23 ) }
    dend_13 { pt3dadd( -4.70845, -42.3147, 57.0936, 0.23 ) }
    dend_13 { pt3dadd( -1.58296, -43.2328, 57.5618, 0.23 ) }
    dend_13 { pt3dadd( 0.64017, -43.797, 57.7869, 0.23 ) }
    dend_13 { pt3dadd( 2.11993, -44.037, 57.8482, 0.23 ) }
    dend_13 { pt3dadd( 3.92781, -44.194, 57.8187, 0.23 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 77/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -6.16816, -13.6179, 12.1154, 0.68 ) }
    dend_12 { pt3dadd( -7.08564, -14.1229, 12.5058, 0.68 ) }
    dend_12 { pt3dadd( -8.89033, -15.0892, 13.2322, 0.45 ) }
    dend_12 { pt3dadd( -10.4846, -15.9975, 13.8457, 0.45 ) }
    dend_12 { pt3dadd( -11.8578, -16.8227, 14.3783, 0.68 ) }
    dend_12 { pt3dadd( -13.0945, -17.6315, 14.8724, 0.68 ) }
    dend_12 { pt3dadd( -13.7633, -18.0897, 15.1422, 0.68 ) }
    dend_12 { pt3dadd( -15.0314, -19.0004, 15.6383, 0.45 ) }
    dend_12 { pt3dadd( -16.8187, -20.3407, 16.2942, 0.45 ) }
    dend_12 { pt3dadd( -17.8512, -21.1608, 16.6386, 0.45 ) }
    dend_12 { pt3dadd( -19.0815, -22.1687, 17.0046, 0.45 ) }
    dend_12 { pt3dadd( -20.3079, -23.1694, 17.3311, 0.45 ) }
    dend_12 { pt3dadd( -21.3487, -24.0482, 17.5987, 0.45 ) }
    dend_12 { pt3dadd( -22.5658, -25.1045, 17.917, 0.68 ) }
    dend_12 { pt3dadd( -23.6318, -26.0181, 18.1678, 0.68 ) }
    dend_12 { pt3dadd( -25.4907, -27.5944, 18.6001, 0.68 ) }
    dend_12 { pt3dadd( -27.2185, -29.0647, 19.0396, 0.45 ) }
    dend_12 { pt3dadd( -28.8279, -30.5077, 19.4942, 0.45 ) }
    dend_12 { pt3dadd( -29.9935, -31.5929, 19.8546, 0.45 ) }
    dend_12 { pt3dadd( -30.9932, -32.544, 20.176, 0.45 ) }
    dend_12 { pt3dadd( -32.4986, -33.9628, 20.6661, 0.45 ) }
    dend_12 { pt3dadd( -33.6638, -35.0518, 21.0266, 0.45 ) }
    dend_12 { pt3dadd( -35.1279, -36.3725, 21.4598, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_12 { pt3dadd( -35.7622, -36.9284, 21.6424, 0.45 ) }
    dend_12 { pt3dadd( -36.9071, -37.9551, 21.9611, 0.45 ) }
    dend_12 { pt3dadd( -37.8235, -38.768, 22.1998, 0.45 ) }
    dend_12 { pt3dadd( -38.8726, -39.6521, 22.4171, 0.45 ) }
    dend_12 { pt3dadd( -39.851, -40.424, 22.5858, 0.45 ) }
    dend_12 { pt3dadd( -41.2257, -41.4044, 22.7795, 0.45 ) }
    dend_12 { pt3dadd( -42.4961, -42.2718, 22.9232, 0.45 ) }
    dend_12 { pt3dadd( -43.8617, -43.1749, 23.0408, 0.45 ) }
    dend_12 { pt3dadd( -44.8203, -43.7676, 23.0952, 0.45 ) }
    dend_12 { pt3dadd( -46.2924, -44.6828, 23.1636, 0.45 ) }
    dend_12 { pt3dadd( -48.0536, -45.8099, 23.247, 0.45 ) }
    dend_12 { pt3dadd( -49.5077, -46.748, 23.3629, 0.45 ) }
    dend_12 { pt3dadd( -50.6464, -47.5088, 23.5098, 0.45 ) }
    dend_12 { pt3dadd( -52.1281, -48.5844, 23.7824, 0.45 ) }
    dend_12 { pt3dadd( -53.9945, -50.0121, 24.2393, 0.45 ) }
    dend_12 { pt3dadd( -55.4957, -51.2469, 24.7104, 0.45 ) }
    dend_12 { pt3dadd( -56.8797, -52.4864, 25.2387, 0.45 ) }
    dend_12 { pt3dadd( -58.6127, -54.116, 26.0105, 0.45 ) }
    dend_12 { pt3dadd( -60.0023, -55.413, 26.7033, 0.45 ) }
    dend_12 { pt3dadd( -60.8808, -56.236, 27.1789, 0.45 ) }
    dend_12 { pt3dadd( -62.4879, -57.6876, 28.066, 0.45 ) }
    dend_12 { pt3dadd( -63.7798, -58.7897, 28.7552, 0.45 ) }
    dend_12 { pt3dadd( -64.8678, -59.7039, 29.3135, 0.45 ) }
    dend_12 { pt3dadd( -67.009, -61.5221, 30.365, 0.45 ) }
    dend_12 { pt3dadd( -68.0819, -62.4514, 30.8476, 0.45 ) }
    dend_12 { pt3dadd( -68.7086, -62.994, 31.1072, 0.45 ) }
    dend_12 { pt3dadd( -69.8061, -64.0015, 31.5217, 0.45 ) }
    dend_12 { pt3dadd( -70.8126, -65.0503, 31.8476, 0.45 ) }
    dend_12 { pt3dadd( -71.8102, -66.2214, 32.0721, 0.45 ) }
    dend_12 { pt3dadd( -72.7794, -67.4644, 32.199, 0.45 ) }
    dend_12 { pt3dadd( -73.7806, -68.7615, 32.2698, 0.45 ) }
    dend_12 { pt3dadd( -75.1267, -70.6178, 32.2863, 0.45 ) }
    dend_12 { pt3dadd( -76.461, -72.5896, 32.2204, 0.45 ) }
    dend_12 { pt3dadd( -79.2207, -76.6968, 31.9449, 0.45 ) }
    dend_12 { pt3dadd( -80.3174, -78.3423, 31.8138, 0.45 ) }
    dend_12 { pt3dadd( -81.5076, -80.1622, 31.6783, 0.45 ) }
    dend_12 { pt3dadd( -83.0733, -82.6209, 31.5301, 0.45 ) }
    dend_12 { pt3dadd( -84.7343, -85.1808, 31.4421, 0.45 ) }
    dend_12 { pt3dadd( -86.1045, -87.2886, 31.4598, 0.45 ) }
    dend_12 { pt3dadd( -87.1249, -88.8716, 31.5684, 0.45 ) }
    dend_12 { pt3dadd( -88.3493, -90.6365, 31.8201, 0.45 ) }
    dend_12 { pt3dadd( -90.0832, -93.0264, 32.2737, 0.45 ) }
    dend_12 { pt3dadd( -90.6496, -93.7365, 32.4572, 0.45 ) }
    dend_12 { pt3dadd( -92.0313, -95.3622, 32.9779, 0.45 ) }
    dend_12 { pt3dadd( -93.2674, -96.7799, 33.4745, 0.45 ) }
    dend_12 { pt3dadd( -95.0317, -98.7114, 34.1271, 0.45 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 46/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -8.84308, 0.681023, 7.83283, 0.45 ) }
    dend_10 { pt3dadd( -8.39306, 0.609151, 8.78251, 0.45 ) }
    dend_10 { pt3dadd( -7.98526, 0.66094, 9.85278, 0.45 ) }
    dend_10 { pt3dadd( -7.83262, 0.807521, 10.3142, 0.45 ) }
    dend_10 { pt3dadd( -7.46224, 1.3173, 11.1812, 0.45 ) }
    dend_10 { pt3dadd( -7.11863, 1.86812, 11.9173, 0.45 ) }
    dend_10 { pt3dadd( -6.82272, 2.40903, 12.6021, 0.45 ) }
    dend_10 { pt3dadd( -6.48657, 3.13457, 13.4326, 0.45 ) }
    dend_10 { pt3dadd( -6.19415, 3.94808, 14.3616, 0.45 ) }
    dend_10 { pt3dadd( -5.85815, 5.08124, 15.6266, 0.45 ) }
    dend_10 { pt3dadd( -5.71305, 5.56074, 16.1397, 0.45 ) }
    dend_10 { pt3dadd( -5.56284, 5.95916, 16.57, 0.45 ) }
    dend_10 { pt3dadd( -5.31079, 6.51886, 17.1949, 0.45 ) }
    dend_10 { pt3dadd( -5.16917, 6.82137, 17.634, 0.45 ) }
    dend_10 { pt3dadd( -5.05767, 7.23586, 18.4535, 0.45 ) }
    dend_10 { pt3dadd( -5.06797, 7.72176, 19.424, 0.45 ) }
    dend_10 { pt3dadd( -5.07091, 8.22279, 20.3465, 0.45 ) }
    dend_10 { pt3dadd( -5.08329, 8.56399, 20.9472, 0.45 ) }
    dend_10 { pt3dadd( -5.11538, 9.38808, 22.2278, 0.45 ) }
    dend_10 { pt3dadd( -5.1354, 10.4853, 23.7586, 0.45 ) }
    dend_10 { pt3dadd( -5.15047, 11.3142, 24.8124, 0.45 ) }
    dend_10 { pt3dadd( -5.09684, 12.3221, 25.9157, 0.45 ) }
    dend_10 { pt3dadd( -5.00215, 13.4807, 27.149, 0.45 ) }
    dend_10 { pt3dadd( -4.83653, 14.706, 28.3942, 0.23 ) }
    dend_10 { pt3dadd( -4.59704, 15.9676, 29.5104, 0.23 ) }
    dend_10 { pt3dadd( -4.32887, 17.0203, 30.3324, 0.23 ) }
    dend_10 { pt3dadd( -3.75688, 19.0249, 31.8377, 0.23 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 73/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -8.84308, 0.681023, 7.83283, 0.68 ) }
    dend_9 { pt3dadd( -9.36989, 0.319893, 8.11968, 0.68 ) }
    dend_9 { pt3dadd( -10.2807, -0.250332, 8.64814, 0.45 ) }
    dend_9 { pt3dadd( -10.9667, -0.639057, 9.03764, 0.45 ) }
    dend_9 { pt3dadd( -11.8992, -1.09823, 9.57957, 0.45 ) }
    dend_9 { pt3dadd( -12.5849, -1.41398, 10.0138, 0.45 ) }
    dend_9 { pt3dadd( -13.4658, -1.84365, 10.6535, 0.45 ) }
    dend_9 { pt3dadd( -13.8878, -2.04255, 11.0097, 0.45 ) }
    dend_9 { pt3dadd( -14.5749, -2.35919, 11.6901, 0.45 ) }
    dend_9 { pt3dadd( -15.1279, -2.6392, 12.3112, 0.45 ) }
    dend_9 { pt3dadd( -15.5651, -2.91488, 12.8929, 0.45 ) }
    dend_9 { pt3dadd( -16.1723, -3.34318, 13.8316, 0.45 ) }
    dend_9 { pt3dadd( -16.3878, -3.50529, 14.2255, 0.68 ) }
    dend_9 { pt3dadd( -16.7736, -3.83485, 15.0663, 0.68 ) }
    dend_9 { pt3dadd( -17.1819, -4.18633, 16.0803, 0.68 ) }
    dend_9 { pt3dadd( -17.6861, -4.56729, 17.2712, 0.45 ) }
    dend_9 { pt3dadd( -18.1658, -4.80088, 18.2897, 0.45 ) }
    dend_9 { pt3dadd( -18.7245, -4.95494, 19.3954, 0.45 ) }
    dend_9 { pt3dadd( -19.1121, -5.0205, 20.2448, 0.45 ) }
    dend_9 { pt3dadd( -19.336, -5.03274, 20.7976, 0.45 ) }
    dend_9 { pt3dadd( -19.6339, -4.99822, 21.614, 0.45 ) }
    dend_9 { pt3dadd( -19.9744, -4.90212, 22.5188, 0.45 ) }
    dend_9 { pt3dadd( -20.1947, -4.81515, 23.0714, 0.45 ) }
    dend_9 { pt3dadd( -20.5256, -4.66297, 24.0155, 0.45 ) }
    dend_9 { pt3dadd( -20.803, -4.56257, 24.7944, 0.45 ) }
    dend_9 { pt3dadd( -20.9465, -4.54413, 25.1791, 0.45 ) }
    dend_9 { pt3dadd( -21.2622, -4.55703, 26.0062, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_9 { pt3dadd( -21.6744, -4.63097, 26.8759, 0.45 ) }
    dend_9 { pt3dadd( -22.2247, -4.72823, 27.7805, 0.45 ) }
    dend_9 { pt3dadd( -22.9855, -4.83745, 28.7628, 0.45 ) }
    dend_9 { pt3dadd( -23.7632, -4.93767, 29.5932, 0.45 ) }
    dend_9 { pt3dadd( -24.2826, -5.01665, 30.0824, 0.45 ) }
    dend_9 { pt3dadd( -24.9619, -5.15561, 30.6397, 0.45 ) }
    dend_9 { pt3dadd( -25.5231, -5.28668, 31.0679, 0.45 ) }
    dend_9 { pt3dadd( -26.4245, -5.4919, 31.7365, 0.45 ) }
    dend_9 { pt3dadd( -27.4426, -5.7122, 32.4816, 0.23 ) }
    dend_9 { pt3dadd( -28.0002, -5.84283, 32.8813, 0.23 ) }
    dend_9 { pt3dadd( -29.2547, -6.13375, 33.7273, 0.23 ) }
    dend_9 { pt3dadd( -30.1369, -6.30916, 34.3234, 0.23 ) }
    dend_9 { pt3dadd( -30.9671, -6.4891, 34.8869, 0.23 ) }
    dend_9 { pt3dadd( -31.7177, -6.67534, 35.392, 0.23 ) }
    dend_9 { pt3dadd( -32.7395, -6.91477, 36.0774, 0.23 ) }
    dend_9 { pt3dadd( -33.8454, -7.10764, 36.7659, 0.23 ) }
    dend_9 { pt3dadd( -35.0108, -7.17595, 37.4222, 0.23 ) }
    // Section: dend_5, id: dend_5, parent: dend_1 (entry count 17/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -26.366, 1.68186, -11.1566, 0.68 ) }
    dend_5 { pt3dadd( -26.7878, 1.83767, -11.6287, 0.68 ) }
    dend_5 { pt3dadd( -27.1958, 2.03998, -12.0612, 0.68 ) }
    dend_5 { pt3dadd( -27.7063, 2.28713, -12.5722, 0.68 ) }
    dend_5 { pt3dadd( -28.5923, 2.62459, -13.3278, 0.68 ) }
    dend_5 { pt3dadd( -29.6008, 2.98101, -14.1105, 0.68 ) }
    dend_5 { pt3dadd( -30.7681, 3.41817, -14.9013, 0.68 ) }
    dend_5 { pt3dadd( -31.686, 3.77893, -15.4527, 0.68 ) }
    dend_5 { pt3dadd( -32.7214, 4.20797, -16.0034, 0.68 ) }
    dend_5 { pt3dadd( -34.1046, 4.78626, -16.6914, 0.68 ) }
    dend_5 { pt3dadd( -35.0782, 5.1788, -17.1388, 0.68 ) }
    dend_5 { pt3dadd( -36.9272, 5.84251, -17.9432, 0.45 ) }
    dend_5 { pt3dadd( -38.3118, 6.33554, -18.5922, 0.45 ) }
    dend_5 { pt3dadd( -39.3389, 6.7092, -19.1383, 0.45 ) }
    dend_5 { pt3dadd( -40.5073, 7.15694, -19.8533, 0.45 ) }
    dend_5 { pt3dadd( -41.4603, 7.52855, -20.5384, 0.45 ) }
    dend_5 { pt3dadd( -42.1484, 7.75957, -21.1004, 0.45 ) }
    dend_5 { pt3dadd( -43.4697, 8.12455, -22.3199, 0.45 ) }
    dend_5 { pt3dadd( -44.5652, 8.39383, -23.3614, 0.45 ) }
    dend_5 { pt3dadd( -45.6439, 8.62389, -24.3255, 0.45 ) }
    dend_5 { pt3dadd( -46.3214, 8.76839, -24.9362, 0.45 ) }
    dend_5 { pt3dadd( -47.2452, 8.95757, -25.789, 0.45 ) }
    dend_5 { pt3dadd( -47.7658, 9.03962, -26.2422, 0.45 ) }
    dend_5 { pt3dadd( -48.459, 9.09445, -26.7305, 0.45 ) }
    dend_5 { pt3dadd( -50.2563, 9.18726, -27.7937, 0.45 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 42/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -26.366, 1.68186, -11.1566, 0.68 ) }
    dend_2 { pt3dadd( -28.3317, 0.354942, -11.418, 0.68 ) }
    dend_2 { pt3dadd( -30.4635, -1.11123, -11.8017, 0.68 ) }
    dend_2 { pt3dadd( -31.9849, -2.18039, -12.1173, 0.45 ) }
    dend_2 { pt3dadd( -33.6297, -3.33377, -12.4804, 0.45 ) }
    dend_2 { pt3dadd( -35.1168, -4.37245, -12.8133, 0.45 ) }
    dend_2 { pt3dadd( -36.6504, -5.42469, -13.1582, 0.45 ) }
    dend_2 { pt3dadd( -38.4968, -6.69521, -13.6004, 0.45 ) }
    dend_2 { pt3dadd( -39.7723, -7.5982, -13.9198, 0.45 ) }
    dend_2 { pt3dadd( -41.0803, -8.53762, -14.2574, 0.45 ) }
    dend_2 { pt3dadd( -43.1351, -10.0727, -14.7821, 0.45 ) }
    dend_2 { pt3dadd( -44.6063, -11.2051, -15.1678, 0.45 ) }
    dend_2 { pt3dadd( -46.0579, -12.342, -15.5769, 0.45 ) }
    dend_2 { pt3dadd( -47.8937, -13.7852, -16.1271, 0.45 ) }
    dend_2 { pt3dadd( -49.5184, -15.0668, -16.662, 0.45 ) }
    dend_2 { pt3dadd( -50.4378, -15.8039, -16.9902, 0.45 ) }
    dend_2 { pt3dadd( -51.6625, -16.7914, -17.4599, 0.45 ) }
    dend_2 { pt3dadd( -52.4209, -17.3846, -17.7556, 0.45 ) }
    dend_2 { pt3dadd( -53.9532, -18.5355, -18.3731, 0.45 ) }
    dend_2 { pt3dadd( -55.381, -19.6283, -18.9714, 0.45 ) }
    dend_2 { pt3dadd( -57.052, -20.864, -19.6564, 0.45 ) }
    dend_2 { pt3dadd( -58.3389, -21.705, -20.1253, 0.45 ) }
    dend_2 { pt3dadd( -59.9335, -22.6209, -20.6267, 0.45 ) }
    dend_2 { pt3dadd( -61.5532, -23.493, -21.1128, 0.45 ) }
    dend_2 { pt3dadd( -62.6114, -24.036, -21.4265, 0.45 ) }
    dend_2 { pt3dadd( -64.1967, -24.8112, -21.8916, 0.45 ) }
    dend_2 { pt3dadd( -66.4286, -25.8476, -22.5162, 0.45 ) }
    dend_2 { pt3dadd( -68.0817, -26.6162, -22.9581, 0.45 ) }
    dend_2 { pt3dadd( -69.3976, -27.2771, -23.3008, 0.45 ) }
    dend_2 { pt3dadd( -71.0931, -28.2102, -23.7384, 0.45 ) }
    dend_2 { pt3dadd( -71.9502, -28.7242, -23.9583, 0.45 ) }
    dend_2 { pt3dadd( -73.562, -29.8279, -24.4387, 0.45 ) }
    dend_2 { pt3dadd( -75.5947, -31.3635, -25.1903, 0.45 ) }
    dend_2 { pt3dadd( -77.2471, -32.6427, -25.8922, 0.45 ) }
    dend_2 { pt3dadd( -79.1987, -34.1283, -26.7843, 0.45 ) }
    dend_2 { pt3dadd( -81.8198, -36.1019, -28.0801, 0.23 ) }
    dend_2 { pt3dadd( -83.939, -37.6455, -29.1244, 0.23 ) }
    dend_2 { pt3dadd( -86.4093, -39.3456, -30.3316, 0.23 ) }
    dend_2 { pt3dadd( -88.4329, -40.676, -31.2907, 0.23 ) }
    dend_2 { pt3dadd( -90.662, -42.0277, -32.3146, 0.23 ) }
    dend_2 { pt3dadd( -93.2065, -43.4488, -33.4347, 0.23 ) }
    dend_2 { pt3dadd( -96.6166, -45.2408, -34.8632, 0.23 ) }
    dend_2 { pt3dadd( -98.9954, -46.3728, -35.7635, 0.23 ) }
    dend_2 { pt3dadd( -101.435, -47.4345, -36.6013, 0.23 ) }
    dend_2 { pt3dadd( -103.379, -48.2403, -37.2537, 0.23 ) }
    dend_2 { pt3dadd( -105.774, -49.1752, -38.0844, 0.23 ) }
    dend_2 { pt3dadd( -107.404, -49.7519, -38.6908, 0.23 ) }
    dend_2 { pt3dadd( -108.868, -50.2057, -39.3163, 0.23 ) }
    dend_2 { pt3dadd( -109.992, -50.4984, -39.8322, 0.23 ) }
    dend_2 { pt3dadd( -111.5, -50.8382, -40.5932, 0.23 ) }
    dend_2 { pt3dadd( -112.597, -51.1024, -41.1781, 0.23 ) }
    dend_2 { pt3dadd( -113.926, -51.4231, -41.9148, 0.23 ) }
    dend_2 { pt3dadd( -115.248, -51.7462, -42.632, 0.23 ) }
    dend_2 { pt3dadd( -116.022, -51.9747, -43.0508, 0.23 ) }
    dend_2 { pt3dadd( -117.519, -52.4923, -43.845, 0.23 ) }
    dend_2 { pt3dadd( -118.921, -53.0342, -44.5299, 0.23 ) }
    dend_2 { pt3dadd( -121.204, -54.0842, -45.6152, 0.23 ) }
    dend_2 { pt3dadd( -122.491, -54.7456, -46.2182, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_2 { pt3dadd( -124.217, -55.7203, -47.0092, 0.23 ) }
    dend_2 { pt3dadd( -125.49, -56.4794, -47.5913, 0.23 ) }
    dend_2 { pt3dadd( -126.82, -57.2709, -48.187, 0.23 ) }
    dend_2 { pt3dadd( -128.316, -58.1164, -48.8315, 0.23 ) }
    dend_2 { pt3dadd( -130.669, -59.4229, -49.8234, 0.23 ) }
    dend_2 { pt3dadd( -132.164, -60.2107, -50.4387, 0.23 ) }
    dend_2 { pt3dadd( -133.58, -60.9055, -50.9683, 0.23 ) }
    dend_2 { pt3dadd( -134.901, -61.533, -51.4372, 0.23 ) }
    dend_2 { pt3dadd( -138.271, -63.0674, -52.6101, 0.23 ) }
    dend_2 { pt3dadd( -139.58, -63.6484, -53.0403, 0.23 ) }
    dend_2 { pt3dadd( -141.797, -64.6503, -53.7817, 0.23 ) }
    dend_2 { pt3dadd( -142.947, -65.1637, -54.1766, 0.23 ) }
    dend_2 { pt3dadd( -143.664, -65.4947, -54.423, 0.23 ) }
    dend_2 { pt3dadd( -145.336, -66.3503, -55.0107, 0.23 ) }
    dend_2 { pt3dadd( -146.649, -67.0981, -55.4958, 0.23 ) }
    dend_2 { pt3dadd( -147.929, -67.8532, -55.9739, 0.23 ) }
    dend_2 { pt3dadd( -148.748, -68.3538, -56.2946, 0.23 ) }
    dend_2 { pt3dadd( -150.359, -69.3779, -56.9567, 0.23 ) }
    dend_2 { pt3dadd( -151.613, -70.2192, -57.4486, 0.23 ) }
    dend_2 { pt3dadd( -152.669, -70.9397, -57.8244, 0.23 ) }
    dend_2 { pt3dadd( -153.495, -71.4886, -58.1009, 0.23 ) }
    dend_2 { pt3dadd( -155.734, -72.99, -58.8048, 0.23 ) }
    dend_2 { pt3dadd( -156.86, -73.7622, -59.1458, 0.23 ) }
    dend_2 { pt3dadd( -158.934, -75.1972, -59.7367, 0.23 ) }
    dend_2 { pt3dadd( -161.036, -76.6655, -60.2895, 0.23 ) }
    dend_2 { pt3dadd( -162.568, -77.7036, -60.639, 0.23 ) }
    dend_2 { pt3dadd( -163.711, -78.4686, -60.8775, 0.23 ) }
    dend_2 { pt3dadd( -165.844, -79.8702, -61.205, 0.23 ) }
    dend_2 { pt3dadd( -168.194, -81.347, -61.4481, 0.23 ) }
    dend_2 { pt3dadd( -170.059, -82.4716, -61.534, 0.23 ) }
    dend_2 { pt3dadd( -172.247, -83.7654, -61.5255, 0.23 ) }
    dend_2 { pt3dadd( -175.02, -85.3897, -61.37, 0.23 ) }
    dend_2 { pt3dadd( -177.654, -86.9248, -61.1042, 0.23 ) }
    dend_2 { pt3dadd( -179.062, -87.7797, -60.9299, 0.23 ) }
    dend_2 { pt3dadd( -181.159, -89.1523, -60.6431, 0.23 ) }
    dend_2 { pt3dadd( -182.553, -90.1325, -60.4646, 0.23 ) }
    dend_2 { pt3dadd( -184.601, -91.6721, -60.2395, 0.23 ) }
    dend_2 { pt3dadd( -186.803, -93.3958, -60.0516, 0.23 ) }
    dend_2 { pt3dadd( -190.608, -96.446, -60.0178, 0.23 ) }
    dend_2 { pt3dadd( -192.957, -98.3615, -60.1482, 0.23 ) }
    dend_2 { pt3dadd( -195.422, -100.413, -60.4669, 0.23 ) }
    dend_2 { pt3dadd( -197.13, -101.836, -60.8014, 0.23 ) }
    dend_2 { pt3dadd( -199.287, -103.59, -61.3602, 0.23 ) }
    dend_2 { pt3dadd( -201.669, -105.493, -62.1287, 0.23 ) }
    dend_2 { pt3dadd( -202.803, -106.359, -62.5693, 0.23 ) }
    dend_2 { pt3dadd( -204.802, -107.924, -63.5043, 0.23 ) }
    dend_2 { pt3dadd( -205.972, -108.902, -64.1599, 0.23 ) }
    dend_2 { pt3dadd( -206.842, -109.71, -64.7223, 0.23 ) }
    dend_2 { pt3dadd( -207.992, -110.947, -65.5411, 0.23 ) }
    dend_2 { pt3dadd( -208.729, -111.859, -66.0771, 0.23 ) }
    dend_2 { pt3dadd( -210.258, -113.842, -67.2017, 0.23 ) }
    dend_2 { pt3dadd( -211.63, -115.735, -68.2501, 0.23 ) }
    dend_2 { pt3dadd( -212.467, -117.021, -68.9356, 0.23 ) }
    dend_2 { pt3dadd( -214.312, -120.18, -70.6041, 0.23 ) }
    dend_2 { pt3dadd( -215.349, -122.12, -71.6208, 0.23 ) }
    dend_2 { pt3dadd( -216.204, -123.807, -72.5151, 0.23 ) }
    dend_2 { pt3dadd( -217.134, -125.726, -73.5572, 0.23 ) }
    dend_2 { pt3dadd( -218.105, -127.914, -74.762, 0.23 ) }
    dend_2 { pt3dadd( -218.9, -129.722, -75.8092, 0.23 ) }
    dend_2 { pt3dadd( -219.583, -131.266, -76.7458, 0.23 ) }
    dend_2 { pt3dadd( -220.533, -133.23, -77.9929, 0.23 ) }
    dend_2 { pt3dadd( -221.411, -134.843, -79.0912, 0.23 ) }
    dend_2 { pt3dadd( -221.945, -135.665, -79.6954, 0.23 ) }
    dend_2 { pt3dadd( -223.368, -137.463, -81.098, 0.23 ) }
    dend_2 { pt3dadd( -225.118, -139.438, -82.6548, 0.23 ) }
    dend_2 { pt3dadd( -226.186, -140.573, -83.5143, 0.23 ) }
    dend_2 { pt3dadd( -228.093, -142.522, -84.8433, 0.23 ) }
    dend_2 { pt3dadd( -229.612, -144.093, -85.8056, 0.23 ) }
    dend_2 { pt3dadd( -230.654, -145.277, -86.4592, 0.23 ) }
    dend_2 { pt3dadd( -231.769, -146.733, -87.1847, 0.23 ) }
    dend_2 { pt3dadd( -232.988, -148.605, -88.0544, 0.23 ) }
    dend_2 { pt3dadd( -235.222, -152.549, -89.7471, 0.23 ) }
    dend_2 { pt3dadd( -236.299, -154.668, -90.6078, 0.23 ) }
    dend_2 { pt3dadd( -237.186, -156.671, -91.4004, 0.23 ) }
    dend_2 { pt3dadd( -237.958, -158.851, -92.2386, 0.23 ) }
    dend_2 { pt3dadd( -238.583, -161.146, -93.1247, 0.23 ) }
    dend_2 { pt3dadd( -238.973, -163.3, -93.9663, 0.23 ) }
    dend_2 { pt3dadd( -239.118, -165.143, -94.6758, 0.23 ) }
    dend_2 { pt3dadd( -239.23, -167.27, -95.4781, 0.23 ) }
    dend_2 { pt3dadd( -239.336, -170.64, -96.7083, 0.23 ) }
    dend_2 { pt3dadd( -239.32, -172.342, -97.2933, 0.23 ) }
    dend_2 { pt3dadd( -239.211, -174.211, -97.8794, 0.23 ) }
    dend_2 { pt3dadd( -239.07, -175.184, -98.1804, 0.23 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 83/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 35.6263, -10.2095, 0.0, 0.45 ) }
    axon_1 { pt3dadd( 50.0974, -14.1578, 0.0, 0.45 ) }
    axon_1 { pt3dadd( 64.5684, -18.1061, 0.0, 0.45 ) }
    // Section: dend_25, id: dend_25, parent: dend_19 (entry count 86/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 11.6453, 4.25579, -3.90545, 0.68 ) }
    dend_25 { pt3dadd( 12.15, 7.12363, -5.33064, 0.68 ) }
    dend_25 { pt3dadd( 12.4091, 8.59602, -6.06234, 0.68 ) }
    dend_25 { pt3dadd( 12.6865, 10.1724, -6.84576, 0.68 ) }
    // Section: dend_20, id: dend_20, parent: dend_19 (entry count 90/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 11.6453, 4.25579, -3.90545, 0.68 ) }
    dend_20 { pt3dadd( 12.4691, 3.87226, -3.98987, 0.68 ) }
    dend_20 { pt3dadd( 13.5326, 3.41388, -4.11464, 0.68 ) }
    dend_20 { pt3dadd( 14.8337, 2.91994, -4.26566, 0.68 ) }
    dend_20 { pt3dadd( 16.0434, 2.45739, -4.39761, 0.68 ) }
    dend_20 { pt3dadd( 17.2731, 1.96977, -4.50854, 0.68 ) }
    dend_20 { pt3dadd( 18.5633, 1.4248, -4.60956, 0.68 ) }
    dend_20 { pt3dadd( 20.0764, 0.78063, -4.73301, 0.68 ) }
    dend_20 { pt3dadd( 21.4272, 0.192757, -4.84738, 0.68 ) }
    dend_20 { pt3dadd( 22.9513, -0.469536, -4.97878, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_20 { pt3dadd( 24.3972, -1.07881, -5.0687, 0.68 ) }
    dend_20 { pt3dadd( 25.3745, -1.48028, -5.0775, 0.68 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 2/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -50.2563, 9.18726, -27.7937, 0.45 ) }
    dend_7 { pt3dadd( -51.171, 9.57626, -28.1044, 0.45 ) }
    dend_7 { pt3dadd( -51.9463, 9.90643, -28.368, 0.45 ) }
    dend_7 { pt3dadd( -52.8361, 10.3021, -28.6831, 0.45 ) }
    dend_7 { pt3dadd( -54.2405, 10.9711, -29.2078, 0.45 ) }
    dend_7 { pt3dadd( -55.5747, 11.617, -29.7012, 0.45 ) }
    dend_7 { pt3dadd( -56.541, 12.0771, -30.048, 0.45 ) }
    dend_7 { pt3dadd( -57.5989, 12.5794, -30.4333, 0.45 ) }
    dend_7 { pt3dadd( -58.3526, 12.9634, -30.6935, 0.45 ) }
    dend_7 { pt3dadd( -59.4969, 13.5747, -31.0811, 0.45 ) }
    dend_7 { pt3dadd( -60.556, 14.1297, -31.4244, 0.45 ) }
    dend_7 { pt3dadd( -61.261, 14.4674, -31.6269, 0.45 ) }
    dend_7 { pt3dadd( -62.4276, 14.9529, -31.9132, 0.45 ) }
    dend_7 { pt3dadd( -63.7344, 15.4828, -32.2228, 0.45 ) }
    dend_7 { pt3dadd( -64.8915, 15.9295, -32.4516, 0.45 ) }
    dend_7 { pt3dadd( -65.8668, 16.2924, -32.6453, 0.45 ) }
    dend_7 { pt3dadd( -66.797, 16.6335, -32.8303, 0.45 ) }
    dend_7 { pt3dadd( -68.6512, 17.3149, -33.1706, 0.45 ) }
    dend_7 { pt3dadd( -70.3361, 17.9327, -33.4949, 0.45 ) }
    dend_7 { pt3dadd( -71.523, 18.3719, -33.7654, 0.45 ) }
    dend_7 { pt3dadd( -72.6756, 18.8058, -34.0762, 0.45 ) }
    dend_7 { pt3dadd( -74.9282, 19.6221, -34.6592, 0.45 ) }
    dend_7 { pt3dadd( -76.8949, 20.2905, -35.1641, 0.23 ) }
    dend_7 { pt3dadd( -78.7988, 20.8934, -35.6451, 0.23 ) }
    dend_7 { pt3dadd( -80.3744, 21.32, -36.0218, 0.23 ) }
    dend_7 { pt3dadd( -81.424, 21.5803, -36.2888, 0.23 ) }
    dend_7 { pt3dadd( -83.5941, 22.1051, -36.8125, 0.23 ) }
    dend_7 { pt3dadd( -85.22, 22.45, -37.216, 0.23 ) }
    dend_7 { pt3dadd( -86.6646, 22.6983, -37.5483, 0.23 ) }
    dend_7 { pt3dadd( -88.0737, 22.937, -37.8249, 0.23 ) }
    dend_7 { pt3dadd( -89.9944, 23.2946, -38.1671, 0.23 ) }
    dend_7 { pt3dadd( -91.3536, 23.575, -38.4469, 0.23 ) }
    dend_7 { pt3dadd( -92.6308, 23.8379, -38.8034, 0.23 ) }
    dend_7 { pt3dadd( -94.3438, 24.1295, -39.3323, 0.23 ) }
    dend_7 { pt3dadd( -95.0837, 24.2349, -39.5709, 0.23 ) }
    dend_7 { pt3dadd( -96.2416, 24.3505, -39.9717, 0.23 ) }
    dend_7 { pt3dadd( -97.832, 24.4449, -40.563, 0.23 ) }
    dend_7 { pt3dadd( -99.7788, 24.5208, -41.4262, 0.23 ) }
    dend_7 { pt3dadd( -101.633, 24.6237, -42.4336, 0.23 ) }
    dend_7 { pt3dadd( -103.34, 24.715, -43.5265, 0.23 ) }
    dend_7 { pt3dadd( -104.99, 24.7744, -44.6175, 0.23 ) }
    dend_7 { pt3dadd( -106.173, 24.8118, -45.4428, 0.23 ) }
    dend_7 { pt3dadd( -108.829, 24.9119, -47.3872, 0.23 ) }
    dend_7 { pt3dadd( -111.086, 25.0564, -49.1802, 0.23 ) }
    dend_7 { pt3dadd( -112.752, 25.212, -50.6584, 0.23 ) }
    dend_7 { pt3dadd( -120.827, 27.3487, -53.4288, 0.23 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 48/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -50.2563, 9.18726, -27.7937, 0.23 ) }
    dend_6 { pt3dadd( -51.5508, 8.62102, -27.8368, 0.23 ) }
    dend_6 { pt3dadd( -52.9489, 8.03282, -27.8913, 0.23 ) }
    dend_6 { pt3dadd( -54.7028, 7.32646, -28.0077, 0.23 ) }
    dend_6 { pt3dadd( -56.2084, 6.71844, -28.1291, 0.23 ) }
    dend_6 { pt3dadd( -57.2423, 6.29678, -28.2308, 0.23 ) }
    dend_6 { pt3dadd( -58.5679, 5.7483, -28.3882, 0.23 ) }
    dend_6 { pt3dadd( -60.0368, 5.15311, -28.6078, 0.23 ) }
    dend_6 { pt3dadd( -61.1589, 4.68634, -28.845, 0.23 ) }
    dend_6 { pt3dadd( -62.1838, 4.28504, -29.1234, 0.23 ) }
    dend_6 { pt3dadd( -63.1723, 3.93419, -29.4294, 0.23 ) }
    dend_6 { pt3dadd( -64.1831, 3.57597, -29.7678, 0.23 ) }
    dend_6 { pt3dadd( -65.3294, 3.1653, -30.1543, 0.23 ) }
    dend_6 { pt3dadd( -66.509, 2.7402, -30.5369, 0.23 ) }
    dend_6 { pt3dadd( -67.6015, 2.35282, -30.8693, 0.23 ) }
    dend_6 { pt3dadd( -69.2272, 1.85272, -31.2876, 0.23 ) }
    dend_6 { pt3dadd( -70.7516, 1.45163, -31.6364, 0.23 ) }
    dend_6 { pt3dadd( -72.8631, 1.05093, -32.0645, 0.23 ) }
    dend_6 { pt3dadd( -74.0065, 0.92247, -32.2683, 0.23 ) }
    dend_6 { pt3dadd( -75.0664, 0.829067, -32.4269, 0.23 ) }
    dend_6 { pt3dadd( -76.7505, 0.728112, -32.6695, 0.23 ) }
    dend_6 { pt3dadd( -77.7409, 0.767364, -32.7966, 0.23 ) }
    dend_6 { pt3dadd( -79.2828, 1.11608, -32.9615, 0.23 ) }
    dend_6 { pt3dadd( -80.3661, 1.65676, -33.092, 0.23 ) }
    dend_6 { pt3dadd( -88.9815, 1.42986, -33.7792, 0.23 ) }
    dend_6 { pt3dadd( -97.3482, 1.34902, -35.9389, 0.23 ) }
    dend_6 { pt3dadd( -105.351, 2.14925, -39.0909, 0.23 ) }
    dend_6 { pt3dadd( -113.966, 2.27046, -39.7794, 0.23 ) }
    dend_6 { pt3dadd( -122.468, 3.64116, -40.4684, 0.23 ) }
    // Section: dend_4, id: dend_4, parent: dend_2 (entry count 77/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -239.07, -175.184, -98.1804, 0.23 ) }
    dend_4 { pt3dadd( -239.128, -177.558, -99.2065, 0.23 ) }
    dend_4 { pt3dadd( -239.167, -179.111, -99.8775, 0.23 ) }
    dend_4 { pt3dadd( -239.224, -181.431, -100.88, 0.23 ) }
    dend_4 { pt3dadd( -239.295, -184.356, -102.145, 0.23 ) }
    dend_4 { pt3dadd( -238.13, -192.769, -106.83, 0.23 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 83/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -239.07, -175.184, -98.1804, 0.23 ) }
    dend_3 { pt3dadd( -238.086, -178.067, -98.8912, 0.23 ) }
    dend_3 { pt3dadd( -237.138, -180.807, -99.6128, 0.23 ) }
    dend_3 { pt3dadd( -236.647, -182.291, -100.016, 0.23 ) }
    dend_3 { pt3dadd( -235.945, -184.335, -100.576, 0.23 ) }
    dend_3 { pt3dadd( -235.343, -186.032, -101.072, 0.23 ) }
    dend_3 { pt3dadd( -234.359, -188.99, -102.027, 0.23 ) }
    dend_3 { pt3dadd( -233.862, -190.62, -102.63, 0.23 ) }
    dend_3 { pt3dadd( -233.304, -192.606, -103.484, 0.23 ) }
    dend_3 { pt3dadd( -232.682, -195.454, -104.908, 0.23 ) }
    dend_3 { pt3dadd( -232.395, -196.902, -105.692, 0.23 ) }
    dend_3 { pt3dadd( -231.979, -199.527, -107.224, 0.23 ) }
    dend_3 { pt3dadd( -231.846, -200.635, -107.936, 0.23 ) }
    dend_3 { pt3dadd( -231.77, -202.065, -108.944, 0.23 ) }
    dend_3 { pt3dadd( -231.851, -204.236, -110.727, 0.23 ) }
    dend_3 { pt3dadd( -228.12, -214.22, -113.571, 0.23 ) }
    // Section: dend_27, id: dend_27, parent: dend_25 (entry count 99/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( 12.6865, 10.1724, -6.84576, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_27 { pt3dadd( 13.5085, 11.9631, -7.74967, 0.45 ) }
    dend_27 { pt3dadd( 14.3167, 13.7238, -8.63847, 0.45 ) }
    dend_27 { pt3dadd( 15.2668, 15.7935, -9.6832, 0.45 ) }
    dend_27 { pt3dadd( 15.9192, 17.2147, -10.4006, 0.45 ) }
    dend_27 { pt3dadd( 16.8195, 19.1759, -11.3906, 0.45 ) }
    // Section: dend_26, id: dend_26, parent: dend_25 (entry count 5/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 12.6865, 10.1724, -6.84576, 0.45 ) }
    dend_26 { pt3dadd( 11.7094, 11.0606, -6.88862, 0.45 ) }
    dend_26 { pt3dadd( 10.3013, 12.2681, -6.86017, 0.45 ) }
    dend_26 { pt3dadd( 9.10259, 13.2719, -6.80901, 0.45 ) }
    dend_26 { pt3dadd( 7.60953, 14.5897, -6.74075, 0.45 ) }
    dend_26 { pt3dadd( 6.64697, 15.4935, -6.67269, 0.45 ) }
    dend_26 { pt3dadd( 5.71523, 16.4267, -6.57351, 0.45 ) }
    dend_26 { pt3dadd( 5.12453, 17.0351, -6.4609, 0.45 ) }
    dend_26 { pt3dadd( 4.36265, 17.8548, -6.28123, 0.45 ) }
    dend_26 { pt3dadd( 3.37443, 19.0028, -6.02817, 0.45 ) }
    dend_26 { pt3dadd( 2.50158, 20.0861, -5.77008, 0.45 ) }
    dend_26 { pt3dadd( 1.49883, 21.4795, -5.44156, 0.45 ) }
    dend_26 { pt3dadd( 1.01652, 22.2078, -5.31829, 0.45 ) }
    dend_26 { pt3dadd( 0.366306, 23.2961, -5.22601, 0.45 ) }
    dend_26 { pt3dadd( -0.203529, 24.409, -5.21427, 0.45 ) }
    dend_26 { pt3dadd( -0.660827, 25.4956, -5.31832, 0.45 ) }
    dend_26 { pt3dadd( -1.09995, 26.8266, -5.61212, 0.45 ) }
    dend_26 { pt3dadd( -1.66709, 29.0127, -6.29815, 0.45 ) }
    dend_26 { pt3dadd( -2.186, 31.4505, -7.23489, 0.45 ) }
    dend_26 { pt3dadd( -2.54875, 33.3891, -8.11955, 0.45 ) }
    dend_26 { pt3dadd( -2.85754, 35.2975, -9.13355, 0.45 ) }
    dend_26 { pt3dadd( -3.09184, 37.1807, -10.2196, 0.45 ) }
    dend_26 { pt3dadd( -3.22245, 38.9535, -11.284, 0.45 ) }
    dend_26 { pt3dadd( -3.27083, 40.7553, -12.3833, 0.45 ) }
    dend_26 { pt3dadd( -3.23907, 42.8658, -13.6876, 0.45 ) }
    dend_26 { pt3dadd( -3.11506, 45.4349, -15.2701, 0.45 ) }
    dend_26 { pt3dadd( -2.96256, 47.7729, -16.672, 0.45 ) }
    dend_26 { pt3dadd( -2.66546, 50.7268, -18.424, 0.45 ) }
    dend_26 { pt3dadd( -2.33451, 53.2969, -19.9483, 0.45 ) }
    dend_26 { pt3dadd( -1.96773, 55.8739, -21.4727, 0.45 ) }
    dend_26 { pt3dadd( -1.71678, 57.4948, -22.437, 0.45 ) }
    dend_26 { pt3dadd( -1.3721, 59.7732, -23.8355, 0.45 ) }
    dend_26 { pt3dadd( -1.11835, 61.8277, -25.15, 0.45 ) }
    dend_26 { pt3dadd( -0.950448, 63.7983, -26.4632, 0.45 ) }
    dend_26 { pt3dadd( -0.893149, 65.0795, -27.351, 0.45 ) }
    dend_26 { pt3dadd( -0.874089, 66.6649, -28.4695, 0.45 ) }
    dend_26 { pt3dadd( -0.880129, 68.4399, -29.7507, 0.45 ) }
    dend_26 { pt3dadd( -0.910063, 71.0881, -31.7048, 0.45 ) }
    dend_26 { pt3dadd( -0.949866, 73.2893, -33.3642, 0.45 ) }
    dend_26 { pt3dadd( -0.957985, 74.8375, -34.5478, 0.45 ) }
    dend_26 { pt3dadd( -0.955533, 76.8541, -36.0596, 0.45 ) }
    dend_26 { pt3dadd( -0.9261, 79.0948, -37.7029, 0.23 ) }
    dend_26 { pt3dadd( -0.886713, 80.8636, -38.995, 0.23 ) }
    dend_26 { pt3dadd( -0.807762, 82.369, -40.111, 0.23 ) }
    dend_26 { pt3dadd( -0.749935, 83.3239, -40.8342, 0.23 ) }
    dend_26 { pt3dadd( -0.591836, 85.6507, -42.6148, 0.23 ) }
    dend_26 { pt3dadd( -0.507825, 87.6753, -44.1932, 0.23 ) }
    dend_26 { pt3dadd( -0.50618, 89.7365, -45.7745, 0.23 ) }
    dend_26 { pt3dadd( -0.623562, 91.6273, -47.2053, 0.23 ) }
    dend_26 { pt3dadd( -0.820769, 92.9775, -48.222, 0.23 ) }
    dend_26 { pt3dadd( -1.04803, 94.1965, -49.1298, 0.23 ) }
    dend_26 { pt3dadd( -1.25412, 95.1203, -49.7902, 0.23 ) }
    dend_26 { pt3dadd( -1.67293, 96.6372, -50.8029, 0.23 ) }
    dend_26 { pt3dadd( -1.97093, 97.558, -51.3701, 0.23 ) }
    dend_26 { pt3dadd( -2.94566, 100.02, -52.8176, 0.23 ) }
    dend_26 { pt3dadd( -3.73986, 101.761, -53.8403, 0.23 ) }
    dend_26 { pt3dadd( -4.63561, 103.352, -54.7771, 0.23 ) }
    dend_26 { pt3dadd( -5.92973, 105.274, -55.9063, 0.23 ) }
    dend_26 { pt3dadd( -7.19262, 106.864, -56.8353, 0.23 ) }
    dend_26 { pt3dadd( -9.43939, 109.305, -58.242, 0.23 ) }
    dend_26 { pt3dadd( -10.5765, 110.365, -58.8424, 0.23 ) }
    dend_26 { pt3dadd( -12.7948, 112.196, -59.8821, 0.23 ) }
    dend_26 { pt3dadd( -14.5362, 113.608, -60.6702, 0.23 ) }
    dend_26 { pt3dadd( -15.8835, 114.72, -61.2943, 0.45 ) }
    dend_26 { pt3dadd( -18.1781, 116.668, -62.4538, 0.23 ) }
    dend_26 { pt3dadd( -19.2112, 117.571, -63.0285, 0.23 ) }
    dend_26 { pt3dadd( -20.7865, 119.01, -64.0085, 0.23 ) }
    dend_26 { pt3dadd( -23.1585, 121.267, -65.7144, 0.23 ) }
    dend_26 { pt3dadd( -24.3485, 122.394, -66.6156, 0.23 ) }
    dend_26 { pt3dadd( -25.5434, 123.41, -67.4798, 0.23 ) }
    dend_26 { pt3dadd( -27.2568, 124.683, -68.6141, 0.23 ) }
    dend_26 { pt3dadd( -28.4913, 125.497, -69.396, 0.23 ) }
    dend_26 { pt3dadd( -29.6958, 126.178, -70.1006, 0.23 ) }
    dend_26 { pt3dadd( -32.4399, 127.412, -71.5264, 0.23 ) }
    dend_26 { pt3dadd( -34.8782, 128.379, -72.6972, 0.23 ) }
    dend_26 { pt3dadd( -36.3695, 128.925, -73.389, 0.23 ) }
    dend_26 { pt3dadd( -37.6478, 129.363, -74.0172, 0.23 ) }
    dend_26 { pt3dadd( -39.335, 129.966, -74.9684, 0.23 ) }
    dend_26 { pt3dadd( -39.9592, 130.208, -75.4161, 0.23 ) }
    dend_26 { pt3dadd( -40.3891, 130.423, -75.834, 0.23 ) }
    dend_26 { pt3dadd( -41.0754, 130.966, -76.6852, 0.23 ) }
    dend_26 { pt3dadd( -42.0308, 131.987, -77.9792, 0.23 ) }
    dend_26 { pt3dadd( -43.019, 133.345, -79.4186, 0.23 ) }
    dend_26 { pt3dadd( -43.8694, 134.81, -80.7788, 0.23 ) }
    dend_26 { pt3dadd( -44.9339, 136.891, -82.5391, 0.23 ) }
    dend_26 { pt3dadd( -45.9416, 138.941, -84.137, 0.23 ) }
    dend_26 { pt3dadd( -47.0273, 141.211, -85.828, 0.23 ) }
    dend_26 { pt3dadd( -47.9503, 143.275, -87.2619, 0.23 ) }
    dend_26 { pt3dadd( -48.9595, 145.849, -88.9399, 0.23 ) }
    dend_26 { pt3dadd( -49.4564, 147.342, -89.8427, 0.23 ) }
    dend_26 { pt3dadd( -50.0455, 149.644, -91.2081, 0.23 ) }
    dend_26 { pt3dadd( -55.0355, 157.874, -94.5941, 0.23 ) }
    // Section: dend_24, id: dend_24, parent: dend_20 (entry count 97/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 25.3745, -1.48028, -5.0775, 0.45 ) }
    dend_24 { pt3dadd( 25.6701, -2.31637, -6.06424, 0.45 ) }
    dend_24 { pt3dadd( 26.0703, -3.24585, -7.06567, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_9()
}

proc basic_shape_9() {
    dend_24 { pt3dadd( 26.5531, -4.02817, -7.94874, 0.45 ) }
    dend_24 { pt3dadd( 26.9965, -4.60903, -8.63406, 0.45 ) }
    dend_24 { pt3dadd( 27.2173, -4.85286, -8.94352, 0.45 ) }
    dend_24 { pt3dadd( 27.6145, -5.29754, -9.52412, 0.45 ) }
    dend_24 { pt3dadd( 28.2169, -5.8779, -10.3679, 0.45 ) }
    dend_24 { pt3dadd( 29.0392, -6.58866, -11.5897, 0.45 ) }
    dend_24 { pt3dadd( 29.6135, -7.04207, -12.5925, 0.45 ) }
    dend_24 { pt3dadd( 30.2346, -7.4739, -13.7973, 0.45 ) }
    dend_24 { pt3dadd( 30.7864, -7.83615, -14.9265, 0.45 ) }
    dend_24 { pt3dadd( 31.5071, -8.28788, -16.3944, 0.45 ) }
    dend_24 { pt3dadd( 32.3096, -8.79662, -18.01, 0.45 ) }
    dend_24 { pt3dadd( 33.6658, -9.67339, -20.6036, 0.23 ) }
    dend_24 { pt3dadd( 34.4345, -10.1498, -21.9179, 0.23 ) }
    dend_24 { pt3dadd( 35.6273, -10.828, -23.6789, 0.23 ) }
    dend_24 { pt3dadd( 36.9522, -11.4799, -25.3156, 0.23 ) }
    dend_24 { pt3dadd( 37.3439, -11.6652, -25.7279, 0.23 ) }
    dend_24 { pt3dadd( 38.5986, -12.2525, -26.9324, 0.23 ) }
    dend_24 { pt3dadd( 40.2404, -13.0616, -28.4375, 0.23 ) }
    dend_24 { pt3dadd( 42.11, -13.975, -30.129, 0.23 ) }
    dend_24 { pt3dadd( 43.0946, -14.4359, -31.0264, 0.23 ) }
    dend_24 { pt3dadd( 44.9109, -15.247, -32.7207, 0.23 ) }
    dend_24 { pt3dadd( 46.4869, -15.9406, -34.2387, 0.23 ) }
    dend_24 { pt3dadd( 48.0387, -16.6493, -35.7834, 0.23 ) }
    dend_24 { pt3dadd( 51.5744, -20.9584, -41.7626, 0.23 ) }
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 24/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 25.3745, -1.48028, -5.0775, 0.45 ) }
    dend_21 { pt3dadd( 26.7103, -2.25922, -5.15122, 0.45 ) }
    dend_21 { pt3dadd( 27.309, -2.63511, -5.17838, 0.45 ) }
    dend_21 { pt3dadd( 28.4438, -3.34558, -5.22642, 0.68 ) }
    dend_21 { pt3dadd( 29.6089, -4.06938, -5.27839, 0.45 ) }
    dend_21 { pt3dadd( 30.7781, -4.81043, -5.36635, 0.45 ) }
    dend_21 { pt3dadd( 31.7865, -5.43183, -5.46613, 0.45 ) }
    dend_21 { pt3dadd( 32.8527, -6.0893, -5.60581, 0.45 ) }
    dend_21 { pt3dadd( 33.9017, -6.72237, -5.74202, 0.45 ) }
    dend_21 { pt3dadd( 34.6007, -7.14451, -5.82816, 0.45 ) }
    dend_21 { pt3dadd( 35.6517, -7.80015, -5.98242, 0.45 ) }
    dend_21 { pt3dadd( 37.3396, -8.81268, -6.27915, 0.45 ) }
    // Section: dend_29, id: dend_29, parent: dend_27 (entry count 36/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 16.8195, 19.1759, -11.3906, 0.45 ) }
    dend_29 { pt3dadd( 16.9235, 20.5264, -11.8461, 0.45 ) }
    dend_29 { pt3dadd( 17.1772, 23.1113, -12.6043, 0.45 ) }
    dend_29 { pt3dadd( 17.4694, 25.1038, -13.0965, 0.45 ) }
    dend_29 { pt3dadd( 17.8441, 27.3784, -13.5941, 0.45 ) }
    dend_29 { pt3dadd( 18.281, 29.6258, -14.0628, 0.45 ) }
    dend_29 { pt3dadd( 18.6379, 31.3478, -14.4018, 0.45 ) }
    dend_29 { pt3dadd( 19.1935, 33.6682, -14.7807, 0.45 ) }
    dend_29 { pt3dadd( 19.8032, 36.1601, -15.1132, 0.45 ) }
    dend_29 { pt3dadd( 20.3003, 38.419, -15.3616, 0.45 ) }
    dend_29 { pt3dadd( 20.7186, 40.8231, -15.5376, 0.45 ) }
    dend_29 { pt3dadd( 21.0471, 43.7588, -15.5979, 0.45 ) }
    dend_29 { pt3dadd( 21.1281, 45.3196, -15.5489, 0.45 ) }
    dend_29 { pt3dadd( 21.0781, 47.707, -15.3184, 0.45 ) }
    dend_29 { pt3dadd( 20.8498, 49.6827, -14.959, 0.45 ) }
    dend_29 { pt3dadd( 20.5235, 51.3016, -14.483, 0.45 ) }
    dend_29 { pt3dadd( 20.0669, 52.9402, -13.8278, 0.45 ) }
    dend_29 { pt3dadd( 19.6463, 54.2643, -13.1727, 0.45 ) }
    dend_29 { pt3dadd( 19.1769, 55.6936, -12.3442, 0.45 ) }
    dend_29 { pt3dadd( 18.7153, 57.1372, -11.3704, 0.45 ) }
    dend_29 { pt3dadd( 18.408, 58.1302, -10.6739, 0.45 ) }
    dend_29 { pt3dadd( 18.0329, 59.1686, -9.91991, 0.45 ) }
    dend_29 { pt3dadd( 17.7067, 60.0218, -9.32585, 0.45 ) }
    dend_29 { pt3dadd( 17.2972, 61.0739, -8.62647, 0.45 ) }
    dend_29 { pt3dadd( 16.7909, 62.3847, -7.78243, 0.45 ) }
    dend_29 { pt3dadd( 16.2439, 63.7831, -6.893, 0.45 ) }
    dend_29 { pt3dadd( 15.7707, 64.8921, -6.22028, 0.45 ) }
    dend_29 { pt3dadd( 15.2291, 66.1145, -5.49393, 0.45 ) }
    dend_29 { pt3dadd( 14.672, 67.4531, -4.72747, 0.45 ) }
    dend_29 { pt3dadd( 14.1942, 68.7235, -4.03829, 0.45 ) }
    dend_29 { pt3dadd( 13.781, 70.0039, -3.34437, 0.45 ) }
    dend_29 { pt3dadd( 13.4772, 71.0701, -2.71673, 0.45 ) }
    dend_29 { pt3dadd( 12.9539, 72.941, -1.56418, 0.23 ) }
    dend_29 { pt3dadd( 12.5636, 74.2786, -0.699527, 0.23 ) }
    dend_29 { pt3dadd( 12.0154, 76.1524, 0.488947, 0.23 ) }
    dend_29 { pt3dadd( 11.5746, 77.7412, 1.44524, 0.23 ) }
    dend_29 { pt3dadd( 11.0811, 79.5444, 2.50778, 0.23 ) }
    dend_29 { pt3dadd( 10.7933, 80.5614, 3.09877, 0.23 ) }
    dend_29 { pt3dadd( 10.4404, 81.6426, 3.68277, 0.23 ) }
    dend_29 { pt3dadd( 10.0044, 82.9163, 4.30672, 0.23 ) }
    dend_29 { pt3dadd( 9.59684, 84.1484, 4.82713, 0.23 ) }
    dend_29 { pt3dadd( 9.26653, 85.2746, 5.21157, 0.23 ) }
    dend_29 { pt3dadd( 9.01938, 86.3133, 5.48966, 0.23 ) }
    dend_29 { pt3dadd( 8.78038, 87.7285, 5.86902, 0.23 ) }
    dend_29 { pt3dadd( 8.69387, 88.7194, 6.14884, 0.23 ) }
    dend_29 { pt3dadd( 8.67816, 90.5298, 6.63884, 0.23 ) }
    dend_29 { pt3dadd( 8.80547, 92.0724, 7.02828, 0.23 ) }
    dend_29 { pt3dadd( 9.06195, 93.5548, 7.39575, 0.23 ) }
    dend_29 { pt3dadd( 9.6208, 95.8221, 8.00533, 0.23 ) }
    dend_29 { pt3dadd( 10.2317, 97.9761, 8.60837, 0.23 ) }
    dend_29 { pt3dadd( 10.7704, 99.6557, 9.08509, 0.23 ) }
    dend_29 { pt3dadd( 11.3659, 101.272, 9.56318, 0.23 ) }
    dend_29 { pt3dadd( 12.0353, 102.912, 10.0694, 0.23 ) }
    dend_29 { pt3dadd( 12.8199, 104.543, 10.5673, 0.23 ) }
    // Section: dend_28, id: dend_28, parent: dend_27 (entry count 90/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 16.8195, 19.1759, -11.3906, 0.45 ) }
    dend_28 { pt3dadd( 18.1243, 18.991, -10.9637, 0.45 ) }
    dend_28 { pt3dadd( 20.184, 18.6392, -10.2974, 0.45 ) }
    dend_28 { pt3dadd( 21.8518, 18.3711, -9.75304, 0.45 ) }
    dend_28 { pt3dadd( 23.6088, 18.1277, -9.19623, 0.45 ) }
    dend_28 { pt3dadd( 25.2159, 17.9689, -8.74787, 0.45 ) }
    dend_28 { pt3dadd( 26.4112, 17.8696, -8.44358, 0.45 ) }
    dend_28 { pt3dadd( 28.2037, 17.7388, -8.06388, 0.45 ) }
    dend_28 { pt3dadd( 29.8282, 17.6483, -7.77611, 0.45 ) }
    dend_28 { pt3dadd( 31.522, 17.5845, -7.54522, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_10()
}

proc basic_shape_10() {
    dend_28 { pt3dadd( 33.8366, 17.4911, -7.28939, 0.45 ) }
    dend_28 { pt3dadd( 35.1926, 17.421, -7.16534, 0.45 ) }
    dend_28 { pt3dadd( 36.2469, 17.3377, -7.08634, 0.45 ) }
    dend_28 { pt3dadd( 36.8612, 17.2836, -7.04326, 0.45 ) }
    dend_28 { pt3dadd( 38.3938, 17.1066, -6.92641, 0.45 ) }
    dend_28 { pt3dadd( 40.3798, 16.8425, -6.72444, 0.45 ) }
    dend_28 { pt3dadd( 42.6977, 16.4955, -6.42493, 0.45 ) }
    dend_28 { pt3dadd( 45.5786, 16.0604, -6.02801, 0.45 ) }
    dend_28 { pt3dadd( 47.4436, 15.7469, -5.75009, 0.45 ) }
    dend_28 { pt3dadd( 49.5394, 15.3645, -5.40756, 0.45 ) }
    dend_28 { pt3dadd( 51.3325, 15.0164, -5.07737, 0.45 ) }
    dend_28 { pt3dadd( 52.1257, 14.8593, -4.91683, 0.45 ) }
    dend_28 { pt3dadd( 53.599, 14.5281, -4.60533, 0.45 ) }
    dend_28 { pt3dadd( 55.1513, 14.1756, -4.24516, 0.45 ) }
    dend_28 { pt3dadd( 56.811, 13.8101, -3.83609, 0.45 ) }
    dend_28 { pt3dadd( 58.0412, 13.5646, -3.53195, 0.45 ) }
    dend_28 { pt3dadd( 59.6872, 13.275, -3.13228, 0.45 ) }
    dend_28 { pt3dadd( 61.9311, 12.9599, -2.59022, 0.23 ) }
    dend_28 { pt3dadd( 63.6267, 12.7843, -2.20265, 0.23 ) }
    dend_28 { pt3dadd( 65.7222, 12.5739, -1.7383, 0.23 ) }
    dend_28 { pt3dadd( 66.7611, 12.4653, -1.51668, 0.23 ) }
    dend_28 { pt3dadd( 68.5381, 12.2459, -1.2136, 0.23 ) }
    dend_28 { pt3dadd( 70.0329, 12.0263, -1.02937, 0.23 ) }
    dend_28 { pt3dadd( 71.86, 11.7178, -0.923598, 0.23 ) }
    dend_28 { pt3dadd( 73.7542, 11.3492, -1.0078, 0.23 ) }
    dend_28 { pt3dadd( 75.0402, 11.058, -1.19025, 0.23 ) }
    dend_28 { pt3dadd( 77.2406, 10.5447, -1.66474, 0.45 ) }
    dend_28 { pt3dadd( 78.825, 10.1724, -2.13282, 0.45 ) }
    dend_28 { pt3dadd( 80.1999, 9.84893, -2.59893, 0.45 ) }
    dend_28 { pt3dadd( 82.5404, 9.2614, -3.42643, 0.23 ) }
    dend_28 { pt3dadd( 83.9352, 8.92754, -3.92618, 0.23 ) }
    dend_28 { pt3dadd( 85.4566, 8.55633, -4.43238, 0.23 ) }
    dend_28 { pt3dadd( 86.8988, 8.2233, -4.8189, 0.23 ) }
    dend_28 { pt3dadd( 88.7407, 7.79841, -5.20425, 0.23 ) }
    dend_28 { pt3dadd( 91.117, 7.2567, -5.54805, 0.23 ) }
    dend_28 { pt3dadd( 92.1147, 7.01362, -5.63906, 0.23 ) }
    dend_28 { pt3dadd( 93.3154, 6.68873, -5.73166, 0.23 ) }
    dend_28 { pt3dadd( 95.5509, 6.03215, -5.91474, 0.23 ) }
    dend_28 { pt3dadd( 97.9432, 5.32849, -6.12683, 0.23 ) }
    dend_28 { pt3dadd( 100.617, 4.5477, -6.41108, 0.23 ) }
    dend_28 { pt3dadd( 103.195, 3.80743, -6.78455, 0.23 ) }
    dend_28 { pt3dadd( 105.913, 2.96234, -7.32641, 0.23 ) }
    dend_28 { pt3dadd( 106.912, 2.63838, -7.54425, 0.23 ) }
    dend_28 { pt3dadd( 108.634, 2.06354, -7.97191, 0.23 ) }
    dend_28 { pt3dadd( 110.694, 1.36727, -8.56501, 0.23 ) }
    dend_28 { pt3dadd( 113.68, 0.361303, -9.56166, 0.23 ) }
    dend_28 { pt3dadd( 116.869, -0.647438, -10.7685, 0.23 ) }
    dend_28 { pt3dadd( 125.124, -4.38223, -11.8457, 0.23 ) }
    dend_28 { pt3dadd( 133.929, -6.6756, -12.1741, 0.23 ) }
    // Section: dend_23, id: dend_23, parent: dend_21 (entry count 49/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( 37.3396, -8.81268, -6.27915, 0.45 ) }
    dend_23 { pt3dadd( 39.2576, -8.40147, -6.25708, 0.45 ) }
    dend_23 { pt3dadd( 41.0198, -8.00002, -6.304, 0.45 ) }
    dend_23 { pt3dadd( 44.0607, -7.2678, -6.4341, 0.23 ) }
    dend_23 { pt3dadd( 45.1019, -7.03293, -6.4861, 0.23 ) }
    dend_23 { pt3dadd( 46.4466, -6.73206, -6.55035, 0.23 ) }
    dend_23 { pt3dadd( 48.0412, -6.41765, -6.6281, 0.23 ) }
    dend_23 { pt3dadd( 49.4329, -6.16819, -6.69808, 0.23 ) }
    dend_23 { pt3dadd( 50.854, -5.93869, -6.76143, 0.23 ) }
    dend_23 { pt3dadd( 52.5985, -5.6801, -6.82078, 0.23 ) }
    dend_23 { pt3dadd( 54.6461, -5.37494, -6.85192, 0.23 ) }
    dend_23 { pt3dadd( 57.734, -4.89407, -6.84356, 0.23 ) }
    dend_23 { pt3dadd( 60.0844, -4.53296, -6.7786, 0.23 ) }
    dend_23 { pt3dadd( 62.4292, -4.20126, -6.64254, 0.23 ) }
    dend_23 { pt3dadd( 63.9815, -3.98144, -6.52774, 0.23 ) }
    dend_23 { pt3dadd( 66.5848, -3.58102, -6.26709, 0.23 ) }
    dend_23 { pt3dadd( 67.9388, -3.3826, -6.10006, 0.23 ) }
    dend_23 { pt3dadd( 69.5045, -3.16575, -5.87038, 0.23 ) }
    dend_23 { pt3dadd( 72.0137, -2.93792, -5.489, 0.23 ) }
    dend_23 { pt3dadd( 72.944, -2.87814, -5.35001, 0.23 ) }
    dend_23 { pt3dadd( 74.1326, -2.8306, -5.18549, 0.23 ) }
    dend_23 { pt3dadd( 76.6276, -2.86502, -4.87564, 0.23 ) }
    dend_23 { pt3dadd( 77.7057, -2.91069, -4.74864, 0.23 ) }
    dend_23 { pt3dadd( 79.7842, -3.01664, -4.5323, 0.23 ) }
    dend_23 { pt3dadd( 81.9396, -3.16011, -4.33743, 0.23 ) }
    dend_23 { pt3dadd( 83.0981, -3.27475, -4.24393, 0.23 ) }
    dend_23 { pt3dadd( 85.114, -3.48899, -4.07421, 0.23 ) }
    dend_23 { pt3dadd( 86.1313, -3.60091, -3.97049, 0.23 ) }
    dend_23 { pt3dadd( 87.738, -3.77881, -3.7953, 0.23 ) }
    dend_23 { pt3dadd( 89.283, -3.93905, -3.62597, 0.23 ) }
    dend_23 { pt3dadd( 90.5598, -4.03989, -3.5334, 0.23 ) }
    dend_23 { pt3dadd( 92.4159, -4.09908, -3.44968, 0.23 ) }
    dend_23 { pt3dadd( 94.9959, -4.11383, -3.40671, 0.23 ) }
    dend_23 { pt3dadd( 96.3735, -4.11732, -3.41025, 0.23 ) }
    dend_23 { pt3dadd( 98.5608, -4.10557, -3.44083, 0.23 ) }
    dend_23 { pt3dadd( 101.611, -4.04713, -3.51641, 0.23 ) }
    dend_23 { pt3dadd( 102.794, -4.00893, -3.56538, 0.23 ) }
    dend_23 { pt3dadd( 105.417, -3.91943, -3.73214, 0.23 ) }
    dend_23 { pt3dadd( 107.734, -3.79308, -3.90651, 0.23 ) }
    dend_23 { pt3dadd( 110.096, -3.67533, -4.07996, 0.23 ) }
    dend_23 { pt3dadd( 118.314, -1.6038, -5.09586, 0.23 ) }
    // Section: dend_22, id: dend_22, parent: dend_21 (entry count 90/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( 37.3396, -8.81268, -6.27915, 0.45 ) }
    dend_22 { pt3dadd( 38.4558, -9.83696, -6.35849, 0.45 ) }
    dend_22 { pt3dadd( 39.6285, -10.8336, -6.46692, 0.45 ) }
    dend_22 { pt3dadd( 41.2369, -12.1703, -6.63718, 0.45 ) }
    dend_22 { pt3dadd( 43.5562, -14.0502, -6.97858, 0.45 ) }
    dend_22 { pt3dadd( 45.0845, -15.3411, -7.27125, 0.23 ) }
    dend_22 { pt3dadd( 46.3718, -16.4548, -7.5491, 0.23 ) }
    dend_22 { pt3dadd( 47.3836, -17.332, -7.78786, 0.45 ) }
    dend_22 { pt3dadd( 48.2158, -18.1084, -7.9819, 0.45 ) }
    dend_22 { pt3dadd( 49.1514, -19.0354, -8.17443, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_11()
}

proc basic_shape_11() {
    dend_22 { pt3dadd( 50.8658, -20.8586, -8.45478, 0.45 ) }
    dend_22 { pt3dadd( 52.3845, -22.5111, -8.64229, 0.45 ) }
    dend_22 { pt3dadd( 53.8144, -24.0406, -8.78568, 0.45 ) }
    dend_22 { pt3dadd( 54.7047, -25.0193, -8.8599, 0.45 ) }
    dend_22 { pt3dadd( 56.9659, -27.5346, -9.00605, 0.45 ) }
    dend_22 { pt3dadd( 59.031, -29.8812, -9.09049, 0.45 ) }
    dend_22 { pt3dadd( 60.5058, -31.6, -9.13383, 0.45 ) }
    dend_22 { pt3dadd( 61.4804, -32.819, -9.16362, 0.45 ) }
    dend_22 { pt3dadd( 62.8108, -34.5982, -9.22389, 0.23 ) }
    dend_22 { pt3dadd( 64.3963, -36.9295, -9.31614, 0.23 ) }
    dend_22 { pt3dadd( 64.8995, -37.7928, -9.34565, 0.23 ) }
    dend_22 { pt3dadd( 65.5886, -39.1779, -9.38157, 0.23 ) }
    dend_22 { pt3dadd( 66.3025, -40.8389, -9.39855, 0.23 ) }
    dend_22 { pt3dadd( 66.7093, -41.9622, -9.39673, 0.23 ) }
    dend_22 { pt3dadd( 67.0719, -43.1063, -9.40984, 0.23 ) }
    dend_22 { pt3dadd( 67.3742, -44.2014, -9.4545, 0.23 ) }
    dend_22 { pt3dadd( 67.7499, -45.5825, -9.54442, 0.23 ) }
    dend_22 { pt3dadd( 68.0936, -46.9042, -9.66463, 0.23 ) }
    dend_22 { pt3dadd( 68.2922, -47.7519, -9.73382, 0.23 ) }
    dend_22 { pt3dadd( 68.4885, -48.7181, -9.77917, 0.23 ) }
    dend_22 { pt3dadd( 68.7083, -50.0569, -9.78173, 0.23 ) }
    dend_22 { pt3dadd( 68.8913, -51.3154, -9.76791, 0.23 ) }
    dend_22 { pt3dadd( 69.1011, -52.6944, -9.72932, 0.23 ) }
    dend_22 { pt3dadd( 69.2492, -53.5743, -9.68503, 0.23 ) }
    dend_22 { pt3dadd( 69.6212, -55.6727, -9.53766, 0.23 ) }
    dend_22 { pt3dadd( 69.9521, -58.0561, -9.31102, 0.23 ) }
    dend_22 { pt3dadd( 74.6298, -64.417, -9.70368, 0.23 ) }
    dend_22 { pt3dadd( 79.2934, -70.7957, -9.93927, 0.23 ) }
    dend_22 { pt3dadd( 84.4429, -76.7316, -10.6632, 0.23 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_34, dend_31, dend_30, dend_17, dend_14, dend_11, dend_8, dend_1, dend_0, dend_36, dend_35, dend_33, dend_32, dend_19, dend_18, dend_16, dend_15, dend_13, dend_12, dend_10, dend_9, dend_5, dend_2, dend_25, dend_20, dend_7, dend_6, dend_4, dend_3, dend_27, dend_26, dend_24, dend_21, dend_29, dend_28, dend_23, dend_22]}
    ModelViewParmSubset_2 = new SectionList()
    dend_34 ModelViewParmSubset_2.append()
    dend_31 ModelViewParmSubset_2.append()
    dend_30 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_36 ModelViewParmSubset_2.append()
    dend_35 ModelViewParmSubset_2.append()
    dend_33 ModelViewParmSubset_2.append()
    dend_32 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_34, dend_31, dend_30, dend_17, dend_14, dend_11, dend_8, dend_1, dend_0, dend_36, dend_35, dend_33, dend_32, dend_19, dend_18, dend_16, dend_15, dend_13, dend_12, dend_10, dend_9, dend_5, dend_2, dend_25, dend_20, dend_7, dend_6, dend_4, dend_3, dend_27, dend_26, dend_24, dend_21, dend_29, dend_28, dend_23, dend_22]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_34 ModelViewParmSubset_4.append()
    dend_31 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_36 ModelViewParmSubset_4.append()
    dend_35 ModelViewParmSubset_4.append()
    dend_33 ModelViewParmSubset_4.append()
    dend_32 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_30 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_0 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_36]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_36 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_35]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_35 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_33]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_33 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_32]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_32 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_18 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_13 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_12 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_9 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_2 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_7 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_6 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_3 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_26 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_35 = new SectionList()
    dend_24 OneSecGrp_SectionRef_35.append()

    // Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_37 = new SectionList()
    dend_29 OneSecGrp_SectionRef_37.append()

    // Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_38 = new SectionList()
    dend_28 OneSecGrp_SectionRef_38.append()

    // Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_39 = new SectionList()
    dend_23 OneSecGrp_SectionRef_39.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_40 = new SectionList()
    dend_22 OneSecGrp_SectionRef_40.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_8 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_17 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_19 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_11 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_25 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_34]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_34 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_1 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_31]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_31 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_20 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_14 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_27 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_10 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_36 = new SectionList()
    dend_21 OneSecGrp_SectionRef_36.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_5 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_16 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_15 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_4 OneSecGrp_SectionRef_31.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()
    dend_31 basal.append()
    dend_32 basal.append()
    dend_33 basal.append()
    dend_34 basal.append()
    dend_35 basal.append()
    dend_36 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_17, dend_17, dend_17, dend_17, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, axon_1, axon_1, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_27, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_10()
}

proc subsets_10() {
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_11()
}

proc subsets_11() {
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_12()
}

proc subsets_12() {
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 4.13603E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 4.13603E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.999855  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.042115  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0012239999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.001693  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.386953  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 8.0E-6  // units: S cm-2
        e_pas_nml2 = -63.854015  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.5399997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.039862998  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 1.04239E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 5.2299997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.0054459996  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.503893  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-4  // units: S cm-2
        e_pas_nml2 = -67.1289  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 4.78E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.15074699  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009017  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 4.0E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.0032419998  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 1.74E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bSTUT_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bSTUT_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bSTUT_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bSTUT_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_30 nseg = 5
    dend_0 nseg = 5
    dend_36 nseg = 11
    dend_35 nseg = 3
    dend_33 nseg = 3
    dend_32 nseg = 3
    dend_18 nseg = 3
    dend_13 nseg = 3
    dend_12 nseg = 7
    dend_9 nseg = 3
    dend_2 nseg = 15
    dend_7 nseg = 3
    dend_6 nseg = 3
    dend_3 nseg = 3
    dend_26 nseg = 11
    dend_24 nseg = 3
    dend_29 nseg = 5
    dend_28 nseg = 7
    dend_23 nseg = 5
    dend_22 nseg = 5
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bSTUT213_L6_NBC_1873e25157_0_0


