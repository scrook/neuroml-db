// Cell: cNAC187_L6_LBC_9ab2498c23_0_0
/*
{
  "id" : "cNAC187_L6_LBC_9ab2498c23_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-1.58794, -11.7196, 0.0, 2.80064", "-1.43666, -10.6109, 0.0, 4.56392", "-1.28539, -9.50222, 0.0, 6.24281", "-1.13412, -8.39354, 0.0, 7.62114", "-0.982843, -7.28486, 0.0, 8.91633", "-0.83157, -6.17618, 0.0, 10.2819", "-0.680297, -5.06751, 0.0, 11.6257", "-0.529024, -3.95883, 0.0, 12.7797", "-0.377751, -2.85015, 0.0, 13.5779", "-0.226478, -1.74148, 0.0, 14.0593", "-0.0752052, -0.632799, 0.0, 14.5256", "0.0760678, 0.475878, 0.0, 15.0335", "0.227341, 1.58456, 0.0, 15.6506", "0.378614, 2.69323, 0.0, 15.9776", "0.529887, 3.80191, 0.0, 15.9263", "0.68116, 4.91059, 0.0, 15.679", "0.832433, 6.01926, 0.0, 14.959", "0.983706, 7.12794, 0.0, 13.4415", "1.13498, 8.23662, 0.0, 11.0445", "1.28625, 9.3453, 0.0, 9.12656", "1.43752, 10.454, 0.0, 6.46763" ]
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "2.61877, -1.30077, -16.47, 0.91", "2.85161, -1.51414, -16.705, 0.91", "4.16455, -3.425, -18.5364, 0.91", "4.69556, -4.66108, -19.7319, 0.91", "4.88329, -5.34104, -20.5206, 0.91", "4.99457, -6.11148, -21.8648, 0.91", "4.91749, -6.38455, -23.1926, 0.91", "4.58752, -5.95256, -24.8606, 0.91", "4.30766, -5.02512, -26.2266, 0.91", "4.15319, -3.65895, -27.7145, 0.91", "4.20638, -1.72775, -29.6603, 0.91", "4.42693, -0.110468, -31.3179, 0.91", "4.76629, 1.61186, -33.1604, 0.91", "5.18102, 3.29817, -35.0959, 0.91", "5.57083, 4.82454, -37.1091, 0.91", "5.85943, 6.2813, -39.3921, 0.91", "6.00269, 7.2702, -41.2011, 0.91", "6.08019, 8.09708, -42.8581, 0.91", "6.15655, 9.0557, -45.1091, 0.91", "6.30009, 10.0985, -47.8809, 1.36", "6.56872, 10.9288, -50.0957, 1.36", "7.08612, 11.7602, -52.3428, 0.91", "7.85057, 12.4686, -54.4225, 1.14", "8.87342, 13.0025, -56.4644, 0.68", "10.1894, 13.3622, -58.6671, 0.68", "11.6008, 13.5269, -60.8116, 2.27", "13.3121, 13.5453, -63.2845, 0.45", "15.2112, 13.4544, -66.0381, 1.59", "16.6759, 13.3653, -68.1676, 0.45", "18.0981, 13.3205, -70.2108, 0.45", "18.7128, 13.3039, -71.0649, 2.5", "20.5298, 13.2965, -73.5465, 0.23", "22.6819, 13.414, -76.2515, 0.23", "24.6434, 13.6149, -78.5058, 0.23", "26.2588, 13.8457, -80.2107, 2.27", "28.7552, 14.2484, -82.6708, 0.23", "31.1293, 14.6555, -84.8833, 0.23", "32.5324, 14.9118, -86.1113, 0.91", "34.6181, 15.2756, -87.7994, 0.23", "36.4637, 15.622, -89.1846, 0.91", "38.3269, 16.0063, -90.5541, 0.23", "39.9146, 16.3707, -91.7403, 0.23", "40.6869, 16.5643, -92.3752, 0.91", "42.4955, 17.1171, -94.1596, 0.23", "43.623, 17.5427, -95.4003, 1.82", "45.1931, 18.2393, -97.34, 0.45", "46.6909, 18.964, -99.2598, 0.68", "48.2973, 19.7127, -101.336, 0.23", "50.1057, 20.4945, -103.62, 1.59", "52.7945, 21.564, -106.908, 0.23", "53.9496, 21.9397, -108.272, 0.23", "55.0809, 22.2251, -109.496, 0.91", "56.5225, 22.5025, -110.994, 0.23", "57.4761, 22.6295, -111.939, 0.91", "59.2546, 22.839, -113.698, 0.23", "61.2538, 23.0904, -115.749, 0.91", "64.1218, 23.5529, -118.823, 0.45", "66.2571, 24.01, -121.287, 0.45", "68.4345, 24.6421, -123.959, 0.45", "69.8609, 25.1453, -125.808, 0.68", "71.3069, 25.7427, -127.727, 0.23", "73.0265, 26.5454, -129.997, 1.14", "74.7184, 27.4319, -132.19, 0.45", "76.7505, 28.6051, -134.696, 0.45", "78.6439, 29.735, -136.904, 0.91", "80.4352, 30.7013, -138.801, 0.45", "81.2923, 31.0981, -139.624, 1.59", "82.5414, 31.5681, -140.708, 1.36", "83.8375, 31.9425, -141.721, 0.68", "85.7973, 32.4589, -143.242, 0.68", "87.6907, 32.9634, -144.806, 1.36", "89.7832, 33.5684, -146.695, 1.36", "91.5922, 34.1826, -148.556, 0.68", "93.4262, 34.997, -150.784, 0.68", "94.722, 35.8392, -152.684, 0.45", "95.4481, 36.5756, -154.005, 0.45", "95.7679, 37.0808, -154.743, 0.91", "96.3008, 38.6127, -156.692, 0.45", "96.513, 40.0631, -158.459, 0.45", "96.5239, 41.7905, -160.47, 0.45", "96.4813, 42.8584, -161.646, 0.45", "96.4266, 43.7647, -162.587, 0.91", "96.2741, 45.6753, -164.476, 0.45", "96.117, 47.4106, -166.09, 0.91", "96.0293, 49.3461, -167.879, 0.45", "96.0233, 51.4391, -169.882, 0.45", "96.1744, 53.2384, -171.716, 0.91", "96.5151, 54.9721, -173.604, 0.45", "96.6911, 55.5354, -174.254, 0.91", "97.4223, 57.3637, -176.531, 0.45", "98.1985, 58.8457, -178.691, 0.45", "99.0412, 60.2556, -181.091, 0.45", "99.5647, 61.105, -182.714, 0.91", "100.21, 62.1023, -184.751, 0.23", "100.895, 63.1382, -186.937, 0.68", "101.768, 64.3974, -189.867, 0.45", "102.569, 65.4467, -192.534, 0.45", "103.19, 66.2428, -194.654, 0.91", "103.979, 67.0773, -197.223, 0.45", "104.916, 67.9839, -200.18, 0.45", "106.207, 69.12, -204.054, 0.45", "107.406, 70.0953, -207.456, 0.45", "108.801, 71.0468, -211.026, 0.45", "110.299, 71.9324, -214.692, 0.45" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "3.75878, 8.46922, 6.75, 0.68", "4.55984, 9.08774, 7.16859, 0.68", "5.3829, 9.81573, 7.70827, 0.68", "6.40699, 10.8164, 8.50984, 0.91", "7.33869, 11.7828, 9.37716, 0.91", "8.12251, 12.6414, 10.2933, 0.68", "8.7152, 13.3096, 11.1891, 0.68", "8.91979, 13.6605, 11.918, 0.68", "8.92459, 13.8544, 12.5465, 0.68", "8.80063, 14.065, 13.488, 0.68", "8.54273, 14.4194, 14.9426, 0.68", "8.43893, 14.665, 15.6704, 0.68", "8.33393, 15.3058, 17.1097, 0.68", "8.30843, 15.8147, 18.001, 0.68", "8.32121, 16.4736, 19.008, 0.68", "8.36708, 17.2458, 20.0169, 0.45", "8.42449, 18.0091, 20.8833, 0.45", "8.4475, 18.8415, 21.7833, 0.45", "8.39732, 20.0184, 23.1417, 0.45", "8.56097, 23.791, 29.5339, 0.45", "8.91399, 28.8939, 34.915, 0.45", "8.81874, 33.4875, 40.7468, 0.45", "7.30634, 37.7407, 46.6411, 0.45", "6.69793, 42.4219, 52.3714, 0.45", "6.37375, 47.1861, 58.0563, 0.45", "5.53835, 51.1326, 64.289, 0.45", "3.8363, 55.3008, 70.1923, 0.45", "2.32801, 58.5266, 76.7069, 0.45", "-0.135425, 63.1282, 81.9867, 0.45", "-3.07571, 68.4777, 86.2126, 0.45", "-5.04689, 73.3546, 91.4519, 0.45", "-8.24583, 77.2738, 96.8857, 0.45", "-10.8537, 81.1627, 102.647, 0.45", "-13.3278, 83.9508, 109.068, 0.45", "-15.3842, 85.9715, 115.91, 0.45", "-17.8055, 87.2633, 122.808, 0.45", "-21.5953, 88.9774, 128.958, 0.45", "-25.9351, 90.4115, 134.808, 0.45", "-30.5912, 92.2402, 140.294, 0.45", "-34.4791, 94.7969, 146.08, 0.45" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "8.97878, 4.15923, -0.65, 2.27", "8.97878, 4.15923, -0.65, 2.27", "11.5098, 5.06083, -0.65, 1.82", "13.0779, 5.61941, -0.65, 1.82" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "-2.83121, -8.77077, -6.2, 1.14", "-2.83121, -8.77077, -6.2, 1.14", "-3.50317, -11.1236, -6.55749, 1.14", "-4.16976, -13.4576, -6.91213, 1.14", "-4.65821, -15.1679, -7.17199, 1.36", "-5.13955, -16.8533, -7.42807, 1.36", "-5.85892, -19.3721, -7.81079, 1.59", "-6.61385, -21.8569, -8.20993, 1.59" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "-2.55121, -11.2608, 3.96, 2.5", "-2.55121, -11.2608, 3.96, 2.5", "-2.85263, -13.0327, 4.10359, 1.82", "-3.35432, -15.9818, 4.3426, 1.82", "-3.76082, -18.3714, 4.53626, 1.82", "-4.20518, -20.9835, 4.74795, 1.82", "-4.61661, -23.4021, 4.94395, 2.05" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-6.77122, 4.20923, 8.7, 1.59", "-6.77122, 4.20923, 8.7, 1.59", "-7.63124, 5.19681, 8.7995, 1.36", "-8.63984, 6.21834, 8.92033, 1.36", "-9.63802, 7.04873, 9.06156, 1.36", "-11.4893, 8.34677, 9.37251, 1.59", "-13.5559, 9.5689, 9.77271, 1.59", "-15.2924, 10.4007, 10.182, 1.36", "-16.9442, 10.985, 10.6625, 1.36", "-19.0478, 11.3934, 11.4142, 1.36", "-20.3363, 11.4282, 11.9665, 1.14", "-21.6117, 11.2759, 12.6379, 1.14", "-22.5246, 11.1344, 13.2016, 1.14", "-23.1857, 11.1337, 13.6691, 1.14", "-23.9671, 11.2268, 14.319, 1.14", "-24.4843, 11.4335, 14.7979, 1.14", "-25.529, 12.1797, 15.7815, 1.14", "-26.9403, 13.6633, 17.0505, 1.14", "-28.2542, 15.3436, 18.0988, 1.14" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "1.32876, 10.1992, 0.58, 4.32", "1.32876, 10.1992, 0.58, 4.32", "1.75619, 11.6402, 0.97961, 2.5", "2.34702, 13.6322, 1.53199, 2.05", "2.76646, 15.0463, 1.92414, 2.5" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000003020513674
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "1.43752, 10.454, 0.0, 1.17019", "3.46539, 25.3163, 0.0, 1.17019", "5.49327, 40.1786, 0.0, 1.17019" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "13.0779, 5.61941, -0.65, 1.82", "13.4374, 5.73282, -0.558546, 1.82", "15.6513, 6.43113, 0.00461634, 1.59", "17.4698, 7.00471, 0.467189, 1.36", "18.8358, 7.43556, 0.81465, 1.59" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "13.0779, 5.61941, -0.65, 0.91", "14.2303, 5.57417, -1.97036, 0.91", "15.9545, 5.34655, -3.74931, 0.91", "17.3034, 5.03637, -5.09128, 0.91", "18.5286, 4.73367, -6.26711, 0.91", "20.45, 4.3895, -7.96757, 0.68", "22.8816, 4.15958, -9.92529, 0.68", "24.2642, 4.1175, -10.8939, 0.68", "26.2069, 4.14591, -11.9891, 0.68", "28.1108, 4.25907, -12.9073, 0.68", "31.0401, 4.56302, -14.2033, 0.91", "33.5537, 4.90428, -15.2857, 0.68", "34.8965, 5.13851, -15.8691, 0.68", "37.6662, 5.64694, -17.1046, 0.68", "39.9536, 6.0055, -18.1306, 0.68", "42.0952, 6.19914, -19.0726, 0.68", "43.821, 6.26807, -19.8407, 0.68", "46.1126, 6.33195, -20.829, 0.68", "48.297, 6.44787, -21.723, 0.68", "50.8319, 6.65415, -22.7048, 0.45", "52.5453, 6.763, -23.3575, 0.45", "53.5851, 6.83169, -23.7651, 0.45", "55.3142, 6.9362, -24.4832, 0.45", "57.8849, 7.08635, -25.6633, 1.14", "60.332, 7.2455, -26.9227, 0.45", "62.8396, 7.45027, -28.3938, 0.45", "64.4987, 7.59342, -29.4634, 0.45", "66.8316, 7.7676, -31.002, 0.68", "69.0174, 7.96277, -32.4748, 0.45", "71.3592, 8.2668, -34.0148, 1.36", "73.6637, 8.66956, -35.4503, 0.45", "76.7608, 9.34562, -37.2581, 0.45", "78.5492, 9.78232, -38.2324, 0.68", "80.648, 10.3695, -39.3356, 0.23", "83.2052, 11.1232, -40.6345, 0.23", "84.7498, 11.5831, -41.3821, 1.82", "86.821, 12.1841, -42.3237, 0.45", "88.2784, 12.5873, -42.9848, 0.45", "90.0513, 13.0078, -43.8201, 0.45", "91.9405, 13.3978, -44.718, 0.45", "94.3996, 13.8609, -45.8623, 0.45", "95.9725, 14.1593, -46.5699, 0.68", "98.4394, 14.5959, -47.6377, 0.45", "101.334, 15.1082, -48.8211, 1.36", "103.518, 15.5019, -49.6343, 0.45", "105.742, 15.9628, -50.4237, 0.45", "108.327, 16.5657, -51.3252, 0.23", "110.069, 17.0065, -51.9319, 0.68", "112.904, 17.8088, -52.864, 0.23", "114.212, 18.2192, -53.2955, 1.36", "117.863, 19.4401, -54.5258, 0.23", "118.722, 19.7754, -54.8195, 0.68", "120.132, 20.4038, -55.2776, 0.23", "121.09, 20.8915, -55.5852, 0.68", "122.776, 21.8284, -56.1568, 0.23", "124.103, 22.5925, -56.6441, 1.14", "127.249, 24.2741, -57.8239, 0.23", "128.041, 24.6384, -58.1418, 1.14", "130.247, 25.5565, -59.1124, 0.23", "133.331, 26.6614, -60.4986, 0.23", "134.879, 27.1374, -61.2116, 0.68", "138.527, 28.123, -62.9324, 0.23", "141.966, 28.8581, -64.5703, 0.23", "143.327, 29.0942, -65.2033, 1.14", "146.342, 29.4649, -66.548, 0.45", "147.615, 29.5826, -67.1073, 0.45", "148.458, 29.6571, -67.4853, 0.68", "150.224, 29.8204, -68.3445, 0.23", "153.132, 30.122, -69.9372, 0.23", "153.518, 30.1636, -70.198, 0.68", "155.462, 30.4088, -71.8914, 0.23", "156.717, 30.5675, -73.1942, 0.68", "157.989, 30.7234, -74.6793, 0.23", "159.721, 30.991, -76.9282, 0.23", "161.391, 31.22, -79.2617, 0.68", "162.466, 31.3553, -80.7876, 0.68", "163.752, 31.4972, -82.59, 0.68", "165.731, 31.7293, -85.2171, 0.23", "167.356, 31.9382, -87.1819, 0.45", "169.341, 32.2052, -89.3246, 0.23", "170.739, 32.3897, -90.6693, 0.91", "172.804, 32.673, -92.5494, 0.23", "173.694, 32.8128, -93.3425, 0.45", "175.717, 33.1542, -95.1873, 0.23", "176.126, 33.2344, -95.5814, 1.14", "177.951, 33.7193, -97.5397, 0.23", "179.35, 34.1277, -99.3766, 0.23", "180.441, 34.4761, -100.995, 1.59", "182.072, 35.007, -103.618, 0.23", "183.822, 35.5852, -106.545, 0.23", "185.149, 36.0717, -108.877, 1.36", "187.838, 37.2336, -113.884, 0.23", "189.34, 37.897, -116.745, 0.23", "190.31, 38.324, -118.637, 0.23", "190.685, 38.4902, -119.392, 0.68", "192.376, 39.1906, -122.671, 0.23", "193.697, 39.7441, -125.105, 0.23" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "-6.61385, -21.8569, -8.20993, 0.68", "-6.91783, -21.6436, -9.58389, 0.68", "-7.12202, -21.5838, -10.6518, 0.68", "-7.28903, -21.6123, -11.7618, 0.91", "-7.37229, -21.7232, -12.8132, 0.91", "-7.37109, -21.9288, -13.8395, 0.68", "-7.30552, -22.2221, -14.8628, 0.45", "-7.18172, -22.6359, -15.7107, 0.45", "-7.09318, -23.0826, -16.4335, 0.68", "-7.02964, -23.6345, -17.2308, 0.68", "-6.9945, -24.2122, -18.0143, 0.68", "-6.99012, -24.715, -18.7306, 0.68", "-7.07037, -25.2959, -19.5879, 0.68", "-7.25673, -25.9783, -20.6251, 0.68", "-7.43114, -26.4923, -21.3608, 0.68", "-7.66346, -27.2026, -22.2709, 0.68", "-7.85085, -27.9226, -23.1375, 0.68", "-7.98748, -28.7514, -24.1048, 0.91", "-8.03128, -29.5996, -25.0878, 0.68", "-8.04215, -30.2679, -25.8547, 0.68", "-8.0724, -31.2895, -27.0363, 0.68", "-8.11394, -32.1431, -28.0731, 0.68", "-8.14858, -32.841, -28.9456, 0.68", "-8.1976, -34.0737, -30.5736, 0.45", "-8.23549, -34.685, -31.4234, 0.45", "-8.29871, -35.3864, -32.4578, 0.45", "-8.35491, -35.8388, -33.1585, 0.45", "-8.42551, -36.2992, -33.9133, 2.05", "-8.53336, -37.0342, -35.1368, 0.45", "-8.65335, -37.7422, -36.3389, 0.45", "-8.73279, -38.2372, -37.189, 0.91", "-8.86157, -38.9364, -38.3842, 0.45", "-9.00857, -39.6162, -39.5127, 0.45", "-9.18639, -40.3449, -40.6913, 1.82", "-9.40965, -41.2221, -42.0551, 0.45", "-9.52056, -41.6843, -42.7538, 0.45", "-9.54443, -41.7906, -42.9104, 0.68", "-9.73309, -42.6791, -44.1795, 0.45", "-9.89985, -43.4303, -45.2803, 0.45", "-10.0478, -44.1414, -46.4007, 0.68", "-10.1757, -44.8887, -47.6307, 0.45", "-10.2738, -45.4784, -48.6441, 0.45", "-10.3482, -45.9868, -49.5614, 2.05", "-10.4676, -46.7438, -50.9643, 0.45", "-10.6032, -47.4628, -52.3017, 0.45", "-10.7531, -48.1087, -53.4641, 0.45", "-10.9554, -48.8471, -54.7019, 0.45", "-11.0933, -49.3341, -55.4789, 0.45", "-11.2078, -49.7348, -56.0845, 1.14", "-11.4324, -50.5016, -57.128, 0.45", "-11.7115, -51.3249, -58.1519, 0.45", "-11.9037, -51.8827, -58.8105, 0.91", "-12.0976, -52.444, -59.4565, 0.45", "-12.2997, -53.017, -60.1056, 0.45", "-12.4367, -53.4303, -60.6034, 0.91", "-12.6804, -54.1931, -61.5381, 0.45", "-12.8821, -54.8818, -62.3964, 0.45", "-13.0234, -55.4279, -63.0843, 0.45", "-13.1208, -55.8346, -63.601, 0.91", "-13.3275, -56.85, -64.9167, 0.45", "-13.4123, -57.4396, -65.703, 0.45", "-13.4784, -58.0415, -66.5008, 0.45", "-13.5393, -58.5942, -67.2237, 0.45", "-13.6211, -59.3311, -68.2134, 0.45", "-13.6845, -59.8333, -68.903, 0.45", "-13.8128, -60.591, -69.8855, 0.45", "-13.9149, -61.0461, -70.4725, 0.45", "-14.0822, -61.7936, -71.4081, 0.45", "-14.184, -62.2667, -71.9832, 0.45", "-14.329, -62.9863, -72.8669, 0.45", "-14.4512, -63.6378, -73.74, 1.36", "-14.5857, -64.3262, -74.8068, 1.36", "-14.6846, -64.9106, -75.907, 0.68", "-14.7622, -65.3325, -76.9079, 0.68", "-14.8468, -65.641, -77.9482, 0.68", "-14.9693, -65.8274, -79.2259, 0.68", "-15.1094, -65.8473, -80.5499, 0.45", "-15.2612, -65.7496, -81.7495, 0.45", "-15.4175, -65.601, -82.7507, 0.45", "-15.6691, -65.3388, -84.1327, 0.45", "-16.014, -65.0064, -85.7707, 0.45", "-16.2936, -64.7582, -87.0401, 0.45", "-16.4808, -64.6124, -87.9054, 0.45", "-16.6738, -64.5004, -88.9517, 0.45", "-16.8254, -64.4777, -89.9369, 0.45", "-16.9478, -64.5835, -91.0859, 0.45", "-17.0384, -64.8997, -92.673, 0.45", "-17.0562, -65.1162, -93.4613, 0.23", "-17.0449, -65.5537, -94.8931, 0.23", "-17.0294, -65.8594, -95.8809, 0.91", "-17.0754, -66.2845, -97.5827, 0.45", "-17.1624, -66.4086, -98.4424, 0.45", "-17.4367, -66.4215, -100.082, 0.45", "-17.6011, -66.305, -100.931, 0.45", "-17.8298, -66.0161, -102.118, 0.45", "-18.1941, -65.2833, -104.441, 0.23", "-18.365, -64.7126, -106.138, 0.23", "-18.3546, -64.1526, -107.899, 0.91", "-18.1063, -63.7331, -109.593, 0.23", "-17.6459, -63.5282, -111.147, 0.23", "-17.1127, -63.5019, -112.341, 0.68", "-16.0941, -63.7001, -114.061, 0.45", "-14.9845, -64.0236, -115.722, 0.45", "-13.5918, -64.5554, -117.62, 0.45", "-12.3261, -65.1475, -119.229, 0.45", "-11.8062, -65.4121, -119.847, 0.45", "-10.976, -65.8732, -120.798, 0.45" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "-6.61385, -21.8569, -8.20993, 0.91", "-6.85684, -22.4064, -8.94139, 0.91", "-7.103, -23.3545, -9.95089, 0.68", "-7.23676, -24.1941, -10.6214, 0.68", "-7.30362, -25.0325, -11.1165, 0.68", "-7.26919, -26.1492, -11.5582, 0.68", "-7.07242, -27.6779, -11.8537, 0.68", "-6.90379, -28.9064, -11.9084, 0.68", "-6.78325, -30.2922, -11.8868, 0.68", "-6.76786, -31.1047, -11.8846, 1.14", "-6.82223, -32.6178, -11.9474, 1.14", "-7.09114, -34.924, -12.1974, 0.68", "-7.47555, -36.6967, -12.5169, 0.91", "-8.14138, -38.7713, -13.1215, 0.91", "-8.91814, -40.7585, -13.8708, 0.91", "-9.49541, -41.9995, -14.4208, 0.91", "-10.1706, -43.2676, -15.0849, 1.14", "-11.1617, -44.9745, -16.1436, 1.36", "-12.2706, -46.8578, -17.3791, 1.36", "-12.9664, -47.9662, -18.1536, 1.36", "-14.2231, -49.8249, -19.4841, 1.36", "-15.4741, -51.6199, -20.7271, 1.36", "-16.203, -52.7038, -21.43, 1.14", "-16.8534, -53.7606, -22.0674, 0.68", "-17.3011, -54.578, -22.4794, 0.68", "-17.612, -55.1556, -22.7175, 0.68", "-18.2568, -56.3411, -23.0241, 0.68", "-19.0834, -57.7438, -23.235, 0.68", "-19.9472, -59.1338, -23.419, 0.68", "-20.3015, -59.7236, -23.5185, 0.68", "-21.1609, -61.15, -23.7992, 0.68", "-22.3459, -62.9608, -24.2112, 0.91", "-23.463, -64.5274, -24.6419, 0.91", "-24.1514, -65.4592, -24.9547, 0.68", "-25.0064, -66.6708, -25.4358, 0.68", "-25.7769, -67.9461, -25.9837, 0.68", "-26.4609, -69.3424, -26.6579, 1.14", "-26.7544, -70.0322, -27.0416, 0.45", "-27.0763, -70.8822, -27.4967, 0.45", "-27.387, -71.7639, -27.9407, 0.45", "-27.773, -72.86, -28.4549, 0.91", "-28.1025, -73.9105, -28.9309, 0.45", "-28.5141, -75.2817, -29.5041, 0.45", "-29.1382, -77.2925, -30.221, 0.68", "-29.6277, -78.9492, -30.7095, 0.45", "-29.8647, -79.8127, -30.9263, 1.59", "-30.1696, -81.0573, -31.2034, 1.59", "-30.6572, -83.3129, -31.6269, 0.23", "-30.9726, -84.9483, -31.9111, 1.36", "-31.6267, -88.4834, -32.4959, 0.23", "-31.9239, -90.1256, -32.7444, 1.36", "-32.1668, -91.4841, -32.9518, 0.23", "-32.4155, -92.8015, -33.1622, 1.36", "-32.7703, -94.4443, -33.4796, 0.23", "-32.9874, -95.2354, -33.6711, 0.68", "-33.6526, -97.114, -34.2063, 0.23", "-34.1296, -98.2462, -34.5622, 0.23", "-34.8528, -99.7286, -35.0409, 0.91", "-35.513, -100.938, -35.4475, 0.23", "-36.1892, -102.113, -35.8439, 0.68", "-37.3338, -104.076, -36.4897, 0.23", "-37.856, -104.974, -36.7792, 0.23", "-38.3417, -105.852, -37.0568, 1.59", "-39.0799, -107.284, -37.5259, 0.23", "-40.259, -109.687, -38.3794, 0.23", "-40.6324, -110.473, -38.683, 1.82", "-41.1819, -111.612, -39.1569, 1.82", "-42.2319, -113.736, -40.0788, 0.23", "-42.8325, -114.91, -40.6003, 0.23", "-43.4806, -116.077, -41.1159, 0.23", "-44.2418, -117.291, -41.6397, 0.68", "-45.1564, -118.577, -42.2081, 0.23", "-45.9549, -119.563, -42.636, 0.23", "-46.4065, -120.061, -42.8397, 0.68", "-47.746, -121.391, -43.4094, 0.23", "-48.8257, -122.364, -43.8806, 1.36", "-50.2774, -123.574, -44.5212, 0.23", "-50.6024, -123.828, -44.6666, 0.23", "-51.5537, -124.543, -45.1032, 0.91", "-53.0862, -125.639, -45.8604, 0.23", "-54.1679, -126.358, -46.451, 0.91" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-4.61661, -23.4021, 4.94395, 1.36", "-3.83919, -25.296, 4.22421, 1.36", "-3.0769, -27.4226, 3.42567, 1.14", "-2.46486, -29.1301, 2.78451, 1.14", "-1.96186, -30.5334, 2.25759, 1.14", "-1.24737, -32.5267, 1.50912, 1.14", "-0.531378, -34.5242, 0.759069, 1.36", "0.146145, -36.2332, 0.187949, 1.59" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-4.61661, -23.4021, 4.94395, 0.68", "-3.60319, -24.941, 5.26687, 0.68", "-2.45845, -26.8467, 5.70982, 0.68", "-1.3766, -28.9798, 6.38099, 0.68", "-0.463281, -30.9353, 7.16914, 0.68", "0.308858, -32.5943, 7.99155, 0.91", "0.98438, -34.1619, 8.93129, 0.91", "1.42929, -35.2972, 9.77676, 0.91", "1.81223, -36.9785, 11.6322, 0.91", "1.8257, -37.9511, 13.1128, 0.68", "1.75738, -38.6948, 14.3401, 0.68", "1.58687, -39.9437, 16.2018, 0.68", "1.43538, -41.2282, 17.7776, 0.68", "1.32936, -42.626, 19.0984, 0.68", "1.22875, -44.1559, 20.2288, 0.68", "0.98877, -46.5994, 21.7832, 0.68", "0.748607, -48.6101, 22.9154, 0.68", "0.63656, -49.6895, 23.4288, 0.68", "0.529171, -50.86, 23.8786, 0.68", "0.445585, -52.5221, 24.4174, 0.68", "0.2817, -54.3987, 25.0376, 0.68" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-28.2542, 15.3436, 18.0988, 0.68", "-27.5175, 16.9096, 19.055, 0.68", "-27.036, 18.3273, 19.8823, 0.68", "-26.8572, 18.9496, 20.1936, 0.68", "-26.4209, 20.4437, 20.8797, 0.45", "-26.1075, 21.5168, 21.3725, 0.45", "-25.8667, 22.3416, 21.7513, 0.45", "-25.431, 23.6697, 22.2352, 0.45", "-25.0238, 24.6307, 22.6113, 0.45", "-24.611, 25.9359, 23.1549, 0.45", "-20.5978, 32.5486, 26.16, 0.45", "-15.5862, 37.6207, 30.405, 0.45", "-11.7997, 44.2608, 33.6352, 0.45", "-7.01805, 50.8026, 35.425, 0.45", "-3.20138, 57.7584, 37.8567, 0.45", "0.64991, 64.7832, 40.0207, 0.45", "5.5963, 70.9333, 42.5843, 0.45", "9.38862, 77.899, 45.0258, 0.45", "13.7161, 84.9513, 45.6584, 0.45", "17.9641, 91.9316, 47.1055, 0.45", "22.6061, 98.4485, 49.3064, 0.45", "27.748, 104.882, 50.322, 0.45", "34.2116, 109.844, 51.892, 0.45", "41.0808, 113.915, 54.151, 0.45", "48.2088, 117.768, 55.9431, 0.45", "55.6333, 120.674, 58.2433, 0.45", "63.4296, 122.578, 60.3543, 0.45", "70.9542, 124.594, 63.2142, 0.45", "78.8654, 126.24, 65.1028, 0.45" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-28.2542, 15.3436, 18.0988, 0.68", "-30.343, 15.4159, 18.7517, 0.68", "-32.1197, 15.5077, 19.252, 0.68", "-33.82, 15.5802, 19.7361, 0.68", "-35.4557, 15.6232, 20.1776, 0.68", "-36.6291, 15.6541, 20.4943, 0.68", "-38.8315, 15.7121, 21.0887, 0.68", "-40.3316, 15.7224, 21.422, 0.68", "-41.8762, 15.7408, 21.7119, 0.68", "-43.7511, 15.8242, 22.0275, 0.68" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "2.76646, 15.0463, 1.92414, 1.59", "1.9155, 17.6098, 0.753213, 1.59", "0.886764, 20.3394, -0.654412, 1.59", "0.0305175, 22.6113, -1.82602, 1.59", "-0.657761, 24.4375, -2.76779, 1.59", "-1.36558, 26.3156, -3.7363, 1.59", "-1.93332, 27.822, -4.51315, 1.59", "-1.96358, 27.8762, -4.55295, 1.59" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "2.76646, 15.0463, 1.92414, 1.14", "3.63595, 16.1929, 1.97767, 1.14", "4.84461, 17.9561, 2.01955, 1.14", "5.70261, 19.1272, 2.05621, 1.14", "7.12721, 20.9069, 2.13357, 0.91", "8.23138, 22.2167, 2.20612, 0.91", "9.25026, 23.4052, 2.28195, 0.91", "10.5368, 24.9938, 2.32963, 0.91", "12.2154, 27.1971, 2.33778, 0.91", "13.2616, 28.5767, 2.34983, 0.91", "13.9115, 29.4156, 2.36469, 0.68", "14.7383, 30.4971, 2.3585, 0.68", "15.9582, 32.1357, 2.24085, 0.91", "16.9795, 33.5152, 2.0712, 0.91", "18.0011, 34.9779, 1.87994, 0.91", "18.8452, 36.1582, 1.77285, 0.91", "19.5938, 37.1197, 1.77312, 0.68", "20.6782, 38.3663, 2.00484, 0.68", "21.3787, 39.1202, 2.34435, 0.68", "22.2589, 40.1154, 2.94857, 0.68", "23.0423, 41.143, 3.61731, 0.68", "23.7135, 42.1583, 4.19881, 0.68", "24.6055, 43.5802, 4.86857, 0.68", "25.7343, 45.3796, 5.48238, 0.68", "26.5765, 46.6931, 5.71163, 0.68", "27.6203, 48.258, 5.71904, 0.68", "28.8819, 50.0379, 5.46056, 0.68", "29.8577, 51.3265, 5.10786, 0.68", "30.845, 52.5515, 4.62647, 0.91", "31.7445, 53.624, 4.09013, 0.68", "32.5351, 54.5643, 3.54681, 0.68", "33.4003, 55.6028, 2.87625, 0.68", "34.5983, 57.1279, 1.89386, 0.68", "35.5232, 58.4898, 1.06828, 0.68", "36.1761, 59.551, 0.499575, 0.68", "36.8962, 60.7904, -0.0690781, 0.68", "37.4741, 61.7828, -0.478088, 0.68", "38.092, 62.8266, -0.888869, 1.14", "38.984, 64.2857, -1.43593, 0.68", "40.0055, 65.9284, -1.93205, 0.68", "40.789, 67.1353, -2.22175, 0.68", "41.4916, 68.1751, -2.43156, 0.68", "41.9447, 68.8215, -2.57149, 1.36", "42.2263, 69.2016, -2.68288, 2.05", "43.4868, 70.8934, -3.25056, 0.45", "44.5167, 72.3417, -3.82908, 0.45", "44.9761, 73.026, -4.13085, 0.91", "45.7617, 74.2489, -4.66153, 0.68", "46.5535, 75.5046, -5.21191, 0.68", "47.0653, 76.2859, -5.56806, 0.45", "47.7064, 77.2201, -6.00617, 0.45", "48.4955, 78.3842, -6.54054, 0.45", "49.159, 79.3587, -6.95755, 0.91", "50.3546, 81.0958, -7.58803, 0.23", "51.2191, 82.3035, -7.96522, 0.23", "51.7675, 83.021, -8.19238, 1.59" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "5.49327, 40.1786, 0.0, 0.68", "7.52114, 55.0409, 0.0, 0.68", "9.54902, 69.9032, 0.0, 0.68" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "18.8358, 7.43556, 0.81465, 0.68", "20.0305, 7.89196, 1.81154, 0.68", "21.2526, 8.58099, 2.75146, 0.68", "22.0352, 9.2361, 3.32581, 0.68", "22.8639, 10.0848, 3.93621, 0.68", "23.8398, 11.1426, 4.66657, 0.68", "24.7086, 12.0872, 5.34249, 0.68", "25.9454, 13.3983, 6.34111, 0.68", "27.3596, 14.8774, 7.52159, 0.68", "28.351, 15.8315, 8.30636, 0.68", "29.3112, 16.6341, 8.99722, 0.68", "30.4942, 17.4445, 9.76779, 0.68", "31.829, 18.1982, 10.5866, 0.68", "33.2396, 18.9024, 11.4128, 0.68", "35.236, 19.8615, 12.5047, 0.68", "36.7861, 20.6334, 13.293, 0.68", "38.5251, 21.5187, 14.1233, 0.68", "39.4583, 21.9808, 14.5505, 0.68", "40.6282, 22.5485, 15.0934, 0.68", "41.5256, 22.9745, 15.5521, 0.68", "42.2406, 23.3093, 15.9849, 0.68", "43.5331, 23.8304, 16.7927, 0.68", "44.7621, 24.1974, 17.4399, 0.68", "46.7178, 24.7441, 18.244, 0.68", "48.1062, 25.1449, 18.7214, 0.68", "49.9677, 25.78, 19.2884, 0.68", "51.3829, 26.4137, 19.6868, 0.68", "53.4209, 27.5041, 20.2318, 0.68", "55.9293, 28.9171, 20.8657, 0.68", "57.5874, 29.8284, 21.2554, 0.68", "59.1154, 30.6411, 21.6202, 0.45", "61.0676, 31.7117, 22.1671, 0.45", "62.7532, 32.7214, 22.7847, 0.68", "63.7546, 33.3385, 23.2645, 0.68", "65.4833, 34.2515, 24.2052, 0.45", "66.7294, 34.858, 24.8867, 0.45", "68.1243, 35.5858, 25.6583, 0.45", "69.707, 36.5283, 26.5735, 0.45", "70.8289, 37.342, 27.2463, 0.45", "72.254, 38.6262, 28.1586, 0.45", "74.2282, 40.9182, 29.4569, 0.45", "75.4165, 42.8376, 30.2771, 0.45", "76.1788, 44.5485, 30.8386, 0.23", "76.7881, 46.4097, 31.3064, 0.23", "77.1928, 48.2097, 31.6604, 0.45", "77.7306, 51.7201, 32.2051, 0.45", "78.0531, 55.1753, 32.6805, 0.23", "78.1936, 57.1027, 32.9257, 0.23", "78.2446, 58.8197, 33.0986, 0.23", "78.2363, 60.2626, 33.2158, 0.23", "78.302, 62.5503, 33.3876, 0.23", "87.1607, 69.6143, 36.5821, 0.23", "96.5297, 75.9397, 39.8675, 0.23", "104.797, 83.7883, 42.8044, 0.23", "114.005, 90.8932, 44.6291, 0.23", "123.277, 98.1449, 44.4914, 0.23", "131.656, 106.384, 45.1875, 0.23", "139.506, 115.086, 44.0794, 0.23", "147.19, 123.963, 44.9426, 0.23", "154.178, 133.22, 46.9594, 0.23", "160.698, 142.591, 49.8331, 0.23" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "18.8358, 7.43556, 0.81465, 0.68", "19.3035, 6.92728, 1.25576, 0.68", "19.9142, 6.34381, 1.92524, 0.68", "20.381, 5.93746, 2.43718, 0.68", "20.9304, 5.44714, 3.03059, 0.68", "21.1729, 5.24296, 3.27905, 0.45", "21.5623, 4.92876, 3.65682, 0.45", "22.1244, 4.47523, 4.21435, 0.45", "22.6848, 4.02811, 4.75822, 0.68", "23.3879, 3.41909, 5.42858, 0.68", "24.1396, 2.73136, 6.11899, 0.68", "25.1914, 1.75905, 7.05375, 0.68", "25.9454, 1.04682, 7.71466, 0.68", "26.382, 0.621824, 8.13343, 0.45", "26.9033, 0.157595, 8.67297, 0.45", "27.1035, -0.00546376, 8.90436, 0.45", "27.5508, -0.33045, 9.48818, 0.45", "27.998, -0.595553, 10.1311, 0.68", "28.5818, -0.962271, 10.9932, 0.68", "29.1985, -1.44728, 11.8613, 0.45", "29.5777, -1.80168, 12.3361, 0.45", "30.0352, -2.29383, 12.8116, 0.68", "30.4374, -2.75265, 13.1095, 0.68", "31.312, -3.8329, 13.6392, 0.23", "32.1577, -4.95563, 14.025, 0.23", "32.7922, -5.83526, 14.228, 0.23", "33.4937, -6.7891, 14.3711, 0.23", "34.647, -8.34026, 14.4968, 0.23", "37.4946, -12.6072, 16.6328, 0.23", "39.9682, -17.2336, 18.4646, 0.23", "42.7517, -21.6657, 20.3316, 0.23", "46.0806, -25.7586, 22.0765, 0.23", "50.0102, -29.3056, 23.7658, 0.23", "53.8128, -32.5827, 26.1487, 0.23", "57.0107, -36.0562, 29.079, 0.23", "60.36, -38.8341, 32.5349, 0.23", "62.9562, -41.8398, 36.4211, 0.23", "64.6938, -44.8423, 40.762, 0.23" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "0.146145, -36.2332, 0.187949, 1.36", "-2.1682, -37.4028, 0.113167, 1.36", "-4.49267, -38.6181, -0.0414937, 1.14", "-6.4901, -39.6654, -0.246727, 1.14", "-9.28155, -41.205, -0.653749, 0.91", "-10.3885, -41.875, -0.875415, 0.91", "-11.8409, -42.8603, -1.25809, 0.91", "-13.4012, -44.09, -1.87743, 0.91", "-14.65, -45.4573, -2.65565, 0.91", "-15.5857, -46.7478, -3.41509, 0.91", "-16.5597, -48.3031, -4.29974, 0.91", "-17.5244, -49.8616, -5.11259, 0.91", "-18.5407, -51.4194, -5.85938, 0.91", "-20.1132, -53.7185, -6.84853, 0.91", "-22.0971, -56.3548, -7.85393, 0.91", "-23.6142, -58.1358, -8.45572, 1.14", "-26.1426, -60.7463, -9.18821, 1.36", "-28.2316, -62.6836, -9.6385, 1.14", "-30.5497, -64.6635, -10.0201, 1.14", "-32.9164, -66.5401, -10.3136, 1.36", "-34.2252, -67.5492, -10.4679, 1.14", "-36.3629, -69.1751, -10.7228, 0.91", "-37.7972, -70.2881, -10.8566, 0.91", "-39.3335, -71.6165, -10.9344, 0.91", "-40.5776, -72.9265, -10.9344, 0.91", "-41.7641, -74.5565, -10.8632, 0.68", "-43.2518, -77.0807, -10.7546, 0.91", "-44.1246, -78.8163, -10.6812, 1.14", "-45.1666, -81.1194, -10.5125, 1.14", "-46.1782, -83.6426, -10.2246, 0.68", "-46.9224, -85.6796, -9.96174, 0.68", "-47.7603, -88.1176, -9.60169, 1.14", "-48.281, -89.6163, -9.372, 0.68", "-49.0836, -91.8317, -9.07092, 0.68", "-50.1697, -94.6962, -8.74416, 0.68", "-51.5456, -98.2003, -8.42541, 0.68", "-52.3926, -100.423, -8.2943, 1.36", "-53.2874, -102.813, -8.21875, 1.36", "-54.352, -105.613, -8.25859, 1.14", "-55.2109, -107.643, -8.36904, 0.91", "-56.1064, -109.55, -8.53965, 0.91", "-57.2529, -111.811, -8.81705, 0.91", "-58.0308, -113.244, -9.04618, 1.59", "-59.5304, -115.895, -9.51493, 0.91", "-61.2674, -118.889, -10.0213, 1.14", "-62.5026, -121.029, -10.3356, 1.14", "-64.0698, -123.816, -10.6628, 1.82", "-66.0213, -127.389, -10.9579, 1.36", "-67.6075, -130.417, -11.1655, 1.36", "-68.5689, -132.386, -11.2891, 1.82", "-69.4099, -134.395, -11.3732, 0.91", "-70.1508, -136.418, -11.3416, 0.45", "-70.7157, -138.395, -11.18, 0.45", "-70.9496, -139.694, -11.0009, 0.45", "-71.1897, -141.742, -10.7338, 0.68", "-71.3432, -143.505, -10.5707, 0.45", "-71.4716, -145.142, -10.5, 0.45", "-71.5754, -146.134, -10.5148, 0.45", "-72.0103, -149.049, -10.6204, 0.45", "-72.4094, -150.976, -10.6296, 0.23", "-72.6146, -151.718, -10.5913, 0.23", "-73.1209, -153.317, -10.4172, 0.23", "-73.4865, -154.483, -10.209, 0.45", "-74.0106, -156.211, -9.70608, 0.23", "-74.2507, -157.134, -9.31768, 0.68", "-74.7138, -159.133, -8.25821, 0.23", "-74.9582, -160.373, -7.52047, 0.23", "-75.0604, -160.989, -7.12519, 0.45", "-75.2914, -162.732, -5.96453, 0.23", "-75.4164, -163.698, -5.36069, 0.45", "-75.7919, -165.765, -4.26681, 0.23", "-76.1699, -167.294, -3.60819, 0.23", "-76.5361, -168.623, -3.07789, 0.45", "-76.988, -170.085, -2.52821, 0.23", "-77.7393, -172.232, -1.81019, 0.91", "-78.9329, -175.379, -0.933325, 0.23", "-79.7201, -177.381, -0.55343, 0.91" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "0.146145, -36.2332, 0.187949, 1.36", "0.204118, -36.6989, 0.947384, 1.36", "0.40787, -37.4948, 2.38859, 0.68", "0.645126, -38.1832, 3.58028, 0.68", "1.07083, -39.0777, 5.04227, 0.68", "1.48757, -39.7826, 6.05905, 0.68", "1.93245, -40.435, 6.93001, 0.45", "2.40607, -40.9303, 7.64141, 0.45", "2.9786, -41.3424, 8.24788, 0.68", "3.76902, -41.8708, 8.92725, 0.68", "4.70591, -42.5158, 9.6825, 0.68", "5.47566, -43.1189, 10.341, 0.68", "6.52493, -43.9902, 11.3435, 0.68", "7.53027, -44.9238, 12.4752, 0.68", "8.57807, -46.0697, 13.8698, 0.68", "9.19507, -46.8922, 14.8004, 0.68", "9.70029, -47.6871, 15.6076, 0.68", "10.2476, -48.6534, 16.4129, 0.68", "10.8786, -49.973, 17.3148, 0.68", "11.2627, -50.9488, 17.9225, 0.68", "11.7833, -52.4605, 18.812, 0.68", "12.2079, -53.888, 19.6146, 0.68", "12.6062, -55.2577, 20.3727, 0.68", "12.968, -56.497, 21.1095, 0.68", "13.3606, -57.5875, 21.8859, 0.68", "13.9079, -58.8398, 22.8583, 0.68", "14.2904, -59.6259, 23.5257, 0.68", "15.3659, -61.438, 25.313, 0.23", "15.8314, -62.0921, 26.0543, 0.23", "16.7115, -63.1329, 27.3662, 0.23", "17.7587, -64.2212, 28.7704, 0.23", "18.7472, -65.1437, 30.027, 0.23", "19.641, -65.9242, 31.1393, 0.23", "20.5269, -66.6359, 32.3041, 0.23", "21.5992, -67.5223, 33.7546, 0.23", "25.1982, -74.3729, 38.7261, 0.23", "28.2295, -81.3958, 43.8337, 0.23", "31.4329, -88.745, 48.3422, 0.23", "32.8461, -96.5716, 52.9623, 0.23", "35.133, -104.739, 56.5202, 0.23", "38.3092, -112.656, 59.9599, 0.23", "40.6468, -120.462, 64.2266, 0.23", "42.8845, -128.92, 67.0657, 0.23", "47.0655, -136.858, 69.09, 0.23", "50.8406, -144.938, 71.3391, 0.23", "54.6437, -153.172, 72.8697, 0.23", "58.7176, -161.413, 72.5747, 0.23", "62.0126, -169.973, 71.892, 0.23", "66.7008, -177.867, 72.4499, 0.23", "71.307, -185.643, 74.1571, 0.23", "77.0736, -191.852, 77.7335, 0.23" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "0.2817, -54.3987, 25.0376, 0.23", "-0.103503, -54.7976, 26.4779, 0.23", "-0.725949, -55.7012, 28.7441, 0.23", "-1.11638, -56.7585, 30.605, 0.23", "-1.26246, -57.9011, 31.8821, 0.23", "-1.29154, -58.6864, 32.5661, 0.23", "-1.35279, -59.731, 33.3163, 0.23", "-1.35832, -60.5194, 33.7951, 0.23", "-1.31828, -62.3911, 34.6336, 0.23", "-1.18406, -65.1143, 35.5855, 0.23", "-1.10652, -66.4197, 35.9829, 0.23", "-0.937855, -69.2249, 36.7835, 0.23", "-2.22369, -78.6117, 46.7339, 0.23", "-4.53945, -85.1956, 58.5688, 0.23", "-4.84115, -91.5878, 70.7271, 0.23", "-6.60682, -96.8166, 83.3096, 0.23", "-9.13831, -103.913, 94.7994, 0.23", "-11.9218, -112.185, 105.41, 0.23", "-16.2702, -121.195, 114.828, 0.23", "-17.9822, -128.962, 126.032, 0.23", "-18.5696, -137.919, 136.434, 0.23", "-19.0756, -148.618, 145.04, 0.23" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "0.2817, -54.3987, 25.0376, 0.23", "0.632324, -55.9879, 26.0153, 0.23", "0.672547, -56.9226, 26.6069, 0.23", "0.697572, -57.8223, 27.2323, 0.68", "0.778678, -58.7597, 27.8799, 0.68", "0.856869, -59.7767, 28.5711, 0.45", "0.889355, -60.8841, 29.2963, 0.45", "0.874133, -62.0935, 30.0661, 0.45", "0.82694, -63.2794, 30.7132, 0.45", "0.751225, -64.8564, 31.3639, 0.45", "0.772108, -65.6613, 31.5389, 0.45", "0.97483, -66.8663, 31.5246, 0.45", "1.20866, -67.7985, 31.2781, 0.45", "1.68966, -69.4168, 30.6288, 0.45", "2.17984, -70.9644, 29.788, 0.23", "2.71211, -72.3992, 28.804, 0.23", "3.01667, -73.0413, 28.3007, 0.23", "3.72918, -74.243, 27.2174, 0.23", "5.98431, -85.1205, 28.1237, 0.23", "8.4391, -95.5873, 31.0642, 0.23", "12.2584, -106.046, 31.5756, 0.23", "17.3829, -115.94, 31.3062, 0.23", "20.1604, -126.631, 29.8148, 0.23", "25.8703, -136.176, 29.1041, 0.23", "31.6502, -145.699, 29.466, 0.23", "37.5104, -154.995, 27.5997, 0.23", "45.7175, -162.393, 26.1391, 0.23", "54.2285, -169.555, 25.43, 0.23", "62.1864, -177.277, 24.3018, 0.23", "69.9678, -184.837, 21.7494, 0.23", "78.3381, -192.171, 21.1354, 0.23", "87.743, -198.057, 20.0689, 0.23" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-43.7511, 15.8242, 22.0275, 0.68", "-44.1463, 16.3231, 22.5263, 0.68", "-44.632, 16.9201, 23.0596, 0.45", "-45.1524, 17.4791, 23.5569, 0.45", "-45.5872, 17.8922, 23.9127, 0.45", "-46.2847, 18.5548, 24.4834, 0.45", "-46.8791, 19.1195, 24.9698, 0.45", "-47.2251, 19.4716, 25.224, 0.45", "-47.7668, 20.0193, 25.5689, 0.45", "-48.2872, 20.465, 25.8371, 0.45", "-51.0301, 24.1052, 29.4463, 0.45", "-54.0761, 27.0742, 33.4096, 0.45", "-56.909, 29.983, 37.5707, 0.45", "-59.227, 33.3368, 41.7155, 0.45", "-61.0637, 36.1593, 46.4549, 0.45", "-63.1481, 37.9856, 51.5657, 0.45", "-65.8183, 38.9349, 56.6421, 0.45", "-68.5759, 39.8139, 61.6843, 0.45", "-70.9548, 40.295, 66.9673, 0.45", "-73.6409, 41.8726, 71.8762, 0.45" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-43.7511, 15.8242, 22.0275, 0.68", "-44.5785, 16.284, 21.3041, 0.68", "-45.7343, 17.0103, 20.2423, 0.68", "-46.8358, 17.7592, 19.3071, 0.68", "-47.3952, 18.1279, 18.8675, 0.68", "-48.2899, 18.7086, 18.2401, 0.68", "-49.2435, 19.3619, 17.6623, 0.68", "-50.4729, 20.2693, 17.0285, 0.68", "-52.1126, 21.4948, 16.2836, 0.68", "-53.6088, 22.6062, 15.6548, 0.68", "-55.4001, 23.8764, 14.9526, 0.68", "-57.7994, 25.4718, 14.0803, 0.68", "-59.256, 26.3279, 13.5699, 0.68", "-60.0563, 26.7042, 13.2798, 0.68", "-60.8031, 26.996, 13.0013, 0.68", "-61.931, 27.3723, 12.5954, 0.68", "-62.8706, 27.5991, 12.2955, 0.68", "-64.1384, 27.8299, 11.9113, 0.68", "-65.8513, 28.1445, 11.3966, 0.68", "-68.1337, 28.6541, 10.6764, 0.68", "-69.3925, 28.9989, 10.2332, 0.68", "-71.6498, 29.7452, 9.28346, 0.68", "-72.6497, 30.1258, 8.76104, 0.68", "-73.7542, 30.6272, 8.04383, 0.68", "-74.5861, 31.0332, 7.41582, 0.68", "-75.4945, 31.4392, 6.66902, 0.68", "-76.6205, 31.9167, 5.74075, 0.91", "-77.649, 32.3656, 4.9338, 0.91", "-79.7832, 33.2875, 3.5367, 0.91", "-81.3242, 33.8894, 2.69861, 0.91", "-82.7298, 34.3435, 2.05813, 0.68", "-84.2478, 34.7539, 1.49332, 0.68", "-85.894, 35.1746, 0.984388, 0.68", "-86.685, 35.3977, 0.782762, 0.68", "-88.2633, 35.9282, 0.45318, 0.91", "-90.0576, 36.7031, 0.15367, 0.68", "-91.7365, 37.5567, -0.053674, 0.68", "-93.4878, 38.5203, -0.169057, 1.14", "-95.2222, 39.6128, -0.199231, 0.68", "-96.3357, 40.435, -0.175025, 0.68", "-97.6037, 41.5234, -0.0909441, 1.14", "-98.3993, 42.2607, -0.0378311, 0.91", "-99.3553, 43.1207, -0.0319445, 0.68", "-101.165, 44.5534, -0.179637, 0.68", "-102.02, 45.142, -0.342705, 0.45", "-103.051, 45.8179, -0.647783, 0.45", "-104.522, 46.7451, -1.23786, 1.36", "-105.825, 47.49, -1.87985, 0.68", "-107.279, 48.3017, -2.69692, 0.91", "-108.164, 48.7977, -3.21645, 0.68", "-109.062, 49.3341, -3.71876, 0.68", "-110.202, 50.0889, -4.33566, 0.91", "-111.261, 50.8453, -4.88218, 0.68", "-113.347, 52.4602, -5.92378, 0.68", "-114.326, 53.2677, -6.40394, 0.68", "-116.238, 54.9373, -7.28473, 0.68", "-116.822, 55.4877, -7.53334, 0.68", "-117.973, 56.7029, -7.99357, 1.59", "-119.041, 58.0046, -8.38179, 0.45", "-120.004, 59.3252, -8.68174, 0.91", "-120.668, 60.3992, -8.84756, 0.45", "-121.267, 61.5955, -8.93586, 0.45", "-121.566, 62.2103, -8.94858, 0.45", "-122.356, 63.9163, -8.92688, 0.91", "-122.885, 64.9601, -8.9118, 0.45", "-123.81, 66.5138, -8.92373, 0.45", "-124.873, 67.985, -9.01716, 1.36", "-125.729, 69.0606, -9.14004, 0.45", "-126.667, 70.1915, -9.30504, 0.45", "-127.674, 71.3152, -9.48932, 0.45", "-128.915, 72.653, -9.67648, 0.91", "-130.227, 73.9961, -9.76907, 0.45", "-130.756, 74.5527, -9.75507, 0.45", "-131.645, 75.5682, -9.65358, 0.45", "-132.588, 76.7548, -9.47553, 1.14", "-133.66, 78.293, -9.17897, 0.68", "-134.588, 79.6972, -8.85504, 0.68", "-135.665, 81.2513, -8.42859, 0.68", "-136.263, 82.0188, -8.20042, 0.91", "-137.569, 83.6011, -7.71841, 0.91", "-138.349, 84.5051, -7.47556, 0.45", "-139.298, 85.5255, -7.28912, 0.45", "-140.294, 86.5272, -7.217, 0.91", "-141.099, 87.2541, -7.27501, 0.45", "-142.548, 88.4652, -7.56487, 0.45", "-143.668, 89.3399, -7.9413, 1.36", "-144.711, 90.134, -8.39322, 0.68", "-145.906, 91.0425, -9.008, 0.68", "-147.251, 92.1131, -9.83034, 0.68", "-148.397, 93.0125, -10.6454, 0.45", "-150.229, 94.344, -12.1206, 0.45", "-151.388, 95.1218, -13.1169, 1.14", "-152.426, 95.8019, -14.0729, 0.45", "-153.362, 96.4642, -15.056, 0.45", "-154.113, 97.1149, -16.0461, 0.45", "-154.564, 97.6583, -16.9297, 0.45", "-154.867, 98.1965, -17.8529, 0.45", "-155.156, 98.7943, -18.8448, 0.45", "-155.488, 99.5383, -19.9441, 1.36", "-155.96, 100.597, -21.3372, 1.14", "-156.26, 101.466, -22.3051, 0.45", "-156.517, 102.421, -23.2665, 0.45", "-156.733, 103.398, -24.2151, 0.23", "-156.985, 104.643, -25.3775, 0.23", "-157.04, 104.921, -25.6236, 0.23", "-157.192, 105.928, -26.4005, 1.36", "-157.255, 107.197, -27.2415, 0.45", "-157.211, 107.873, -27.6521, 0.45", "-157.078, 108.778, -28.1869, 0.91", "-156.876, 109.95, -28.8835, 0.23", "-156.702, 111.006, -29.5278, 0.23", "-156.514, 112.164, -30.2379, 0.68", "-156.3, 113.504, -31.0153, 0.45", "-156.107, 114.953, -31.8642, 1.14", "-156.046, 115.786, -32.3662, 0.23", "-156.081, 116.96, -33.0739, 0.23", "-156.2, 117.815, -33.5818, 0.68", "-156.675, 119.552, -34.5671, 0.23", "-157.026, 120.485, -35.0519, 0.23", "-157.641, 121.741, -35.6545, 1.14", "-158.781, 123.653, -36.4993, 0.23", "-159.202, 124.245, -36.7386, 0.91", "-160.329, 125.575, -37.2596, 0.23", "-160.965, 126.218, -37.492, 0.91", "-162.649, 127.765, -38.0072, 0.23", "-163.664, 128.637, -38.3059, 1.14", "-164.711, 129.479, -38.6196, 0.45", "-165.782, 130.285, -38.962, 0.45", "-166.506, 130.785, -39.2107, 0.91", "-168.278, 131.951, -39.8552, 0.45", "-169.467, 132.714, -40.326, 0.45", "-170.302, 133.259, -40.713, 1.14", "-171.778, 134.235, -41.461, 0.23", "-173.199, 135.179, -42.2557, 0.23", "-173.903, 135.61, -42.6936, 0.91", "-174.895, 136.118, -43.3891, 0.91", "-175.864, 136.498, -44.0883, 0.23", "-176.44, 136.631, -44.5799, 0.91", "-177.301, 136.665, -45.4657, 0.23", "-178.005, 136.573, -46.2917, 0.23", "-178.793, 136.395, -47.2963, 0.23", "-179.502, 136.179, -48.2313, 0.91", "-180.951, 135.717, -50.1457, 0.23", "-181.52, 135.564, -50.8878, 0.68", "-182.463, 135.386, -52.1325, 0.23", "-183.438, 135.305, -53.4351, 0.23", "-184.208, 135.276, -54.4738, 0.23", "-184.83, 135.28, -55.3344, 1.59", "-186.02, 135.415, -56.8381, 0.23", "-186.857, 135.541, -57.886, 0.23", "-187.367, 135.639, -58.503, 1.59" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-1.96358, 27.8762, -4.55295, 1.82", "-2.53915, 29.5826, -5.11695, 1.82", "-3.59048, 32.6996, -6.14717, 1.36", "-4.22398, 34.5778, -6.76793, 1.36", "-5.04614, 37.0154, -7.57357, 1.36" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-1.96358, 27.8762, -4.55295, 1.14", "-2.60966, 28.9418, -5.68414, 1.14", "-3.36849, 30.2382, -6.93811, 1.14", "-3.9023, 31.1808, -7.86566, 1.14", "-4.58075, 32.5088, -9.27978, 0.91", "-5.07622, 33.6767, -10.615, 0.91", "-5.46488, 34.7664, -11.9428, 0.68", "-5.67141, 35.6519, -13.0268, 0.68", "-5.73346, 36.1657, -13.7097, 0.68", "-5.7335, 37.1665, -15.2824, 0.68", "-5.67165, 37.7832, -16.4491, 0.68", "-5.56673, 38.2916, -17.4127, 0.68", "-5.37108, 39.212, -18.9468, 0.68", "-5.25382, 40.0872, -20.2085, 0.68", "-5.23659, 40.8381, -21.1737, 0.68", "-5.31283, 41.6553, -22.1259, 0.68", "-5.5861, 43.193, -23.8216, 0.68", "-5.79719, 44.3264, -25.0161, 0.68", "-6.06224, 45.4754, -26.1966, 0.68", "-6.36022, 46.5319, -27.2536, 0.91", "-6.74937, 47.6672, -28.3859, 0.91", "-7.2155, 48.7959, -29.5801, 0.68", "-7.89535, 50.0883, -31.0271, 0.91", "-8.47591, 51.1978, -32.2066, 0.68", "-8.97715, 52.2097, -33.22, 0.68", "-9.55096, 53.4634, -34.4008, 0.68", "-10.1122, 54.7984, -35.586, 0.68", "-10.6134, 56.0708, -36.6313, 0.68", "-11.2278, 57.7703, -37.9002, 0.68", "-11.7369, 59.4586, -39.0714, 0.68", "-12.2971, 61.6188, -40.5093, 0.45", "-12.6663, 63.3949, -41.665, 0.45", "-12.7717, 64.0759, -42.1098, 0.68", "-12.9524, 65.8706, -43.3206, 0.45", "-13.0302, 66.7605, -43.9426, 0.45", "-13.0917, 67.7955, -44.6536, 1.82", "-13.1613, 69.6402, -45.9731, 0.45", "-13.2233, 70.7883, -46.8376, 0.45", "-13.2746, 71.4403, -47.3375, 0.68", "-13.4686, 73.1859, -48.6993, 0.45", "-13.6401, 74.3321, -49.5902, 1.82", "-13.9384, 75.7153, -50.7071, 0.45", "-14.3573, 77.2483, -52.0135, 0.45", "-14.4928, 77.6739, -52.4135, 0.45", "-14.8953, 78.8431, -53.6386, 0.45", "-15.2273, 79.8547, -54.7822, 1.59", "-15.6475, 81.3318, -56.5791, 0.45", "-15.9264, 82.4842, -58.0398, 0.45", "-16.1241, 83.6471, -59.5794, 0.45", "-16.2272, 84.6104, -60.8818, 1.59", "-16.2775, 85.7188, -62.3761, 0.45", "-16.2569, 86.6729, -63.6773, 0.45", "-16.1744, 87.6769, -65.0284, 0.45", "-16.0912, 88.4588, -66.0775, 0.45", "-15.9975, 89.3249, -67.204, 0.45", "-15.9272, 90.0032, -68.0728, 0.91", "-15.7785, 91.4498, -69.7801, 0.45", "-15.6627, 92.6581, -71.0567, 0.45", "-15.5781, 93.6031, -72.0236, 0.45", "-15.5537, 95.0949, -73.4433, 0.45", "-15.5929, 95.6871, -73.9959, 0.91", "-15.9066, 97.5698, -75.7806, 0.45", "-16.3361, 98.9903, -77.1491, 0.45", "-16.7208, 99.8192, -77.9867, 1.36", "-17.6877, 101.352, -79.6656, 0.45", "-18.6545, 102.575, -81.1288, 0.68", "-19.5688, 103.551, -82.439, 0.45", "-20.4643, 104.385, -83.7167, 1.36", "-21.6671, 105.474, -85.4977, 0.45", "-22.696, 106.48, -87.1832, 0.45", "-23.7276, 107.637, -89.1912, 0.23", "-24.5803, 108.861, -91.2553, 0.68", "-25.1143, 109.915, -93.0207, 0.68", "-25.4616, 111.176, -95.0541, 1.14", "-25.5028, 112.334, -96.7844, 0.45", "-25.2948, 113.848, -98.7893, 0.68", "-24.9051, 115.307, -100.517, 0.45", "-24.5368, 116.39, -101.647, 0.91", "-24.1062, 117.629, -102.808, 0.45", "-23.7427, 118.748, -103.753, 0.91", "-23.3446, 120.596, -105.201, 0.45", "-23.1965, 122.339, -106.554, 0.45", "-23.2243, 122.791, -106.929, 0.68", "-23.5022, 124.431, -108.366, 0.45", "-23.6646, 125.044, -108.957, 0.91", "-24.1722, 126.667, -110.651, 0.45", "-24.6168, 127.995, -112.055, 0.91", "-25.1448, 129.309, -113.485, 0.23", "-25.2955, 129.692, -113.919, 0.45", "-25.7918, 131.109, -115.591, 0.45", "-26.2215, 132.663, -117.687, 0.45", "-26.3178, 133.185, -118.491, 1.14", "-26.4146, 134.239, -120.34, 0.45", "-26.4646, 135.221, -122.267, 0.45", "-26.5002, 136.008, -123.973, 0.91", "-26.5157, 137.666, -127.934, 0.45", "-26.4713, 138.64, -130.356, 0.45", "-26.3466, 139.557, -132.599, 0.91", "-26.1546, 140.49, -134.739, 0.91", "-25.8812, 141.753, -137.433, 0.45", "-25.743, 142.341, -138.547, 0.45", "-25.5794, 143.034, -139.604, 1.14", "-25.1997, 144.656, -141.741, 0.68", "-24.7909, 146.355, -143.677, 0.45", "-24.4359, 147.798, -145.159, 0.45", "-24.3536, 148.208, -145.555, 0.45", "-24.1875, 149.303, -146.593, 0.91", "-24.0555, 150.414, -147.677, 0.45", "-23.9906, 151.629, -148.863, 0.91", "-23.977, 153.255, -150.493, 0.23", "-24.0257, 154.077, -151.369, 0.23", "-24.1683, 155.005, -152.436, 0.23", "-24.3388, 155.741, -153.315, 0.23", "-24.707, 156.878, -154.6, 0.23", "-25.0224, 157.704, -155.499, 0.23", "-25.5993, 159.046, -156.823, 0.23", "-26.1299, 160.318, -158.04, 0.23", "-26.5386, 161.348, -159.047, 0.23", "-26.7776, 162.133, -159.812, 0.68", "-27.1086, 163.843, -161.498, 0.23", "-27.2656, 165.339, -163.017, 0.23", "-27.3162, 166.608, -164.393, 0.45", "-27.3315, 167.798, -165.758, 0.91", "-27.4184, 169.692, -168.043, 0.23", "-27.5427, 170.822, -169.698, 0.23", "-27.6451, 171.626, -170.932, 0.23", "-27.7999, 172.829, -172.872, 0.23", "-27.896, 173.321, -173.669, 0.45", "-28.2737, 174.7, -176.052, 0.23", "-29.3708, 177.253, -181.246, 0.23" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "-187.367, 135.639, -58.503, 0.23", "-186.427, 135.742, -60.0864, 0.23", "-185.446, 135.849, -61.7383, 0.68", "-184.265, 135.978, -63.7263, 0.23", "-183.076, 136.108, -65.7296, 0.23", "-182.177, 136.207, -67.2437, 0.23" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-187.367, 135.639, -58.503, 0.45", "-188.272, 135.867, -59.2502, 0.45", "-189.314, 136.12, -60.0632, 0.45", "-190.186, 136.309, -60.7159, 0.91", "-191.373, 136.572, -61.5648, 0.23", "-191.857, 136.696, -61.8946, 0.68", "-192.871, 136.969, -62.581, 0.23", "-193.562, 137.135, -63.0257, 0.23", "-194.352, 137.286, -63.5394, 0.23", "-194.85, 137.339, -63.8687, 1.14", "-196.279, 137.459, -64.8231, 0.23", "-196.792, 137.485, -65.1769, 0.91", "-198.181, 137.513, -66.1618, 0.23", "-199.817, 137.498, -67.3692, 0.23", "-201.122, 137.419, -68.3724, 0.23" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-5.04614, 37.0154, -7.57357, 0.91", "-5.36347, 38.0202, -7.26115, 0.91", "-5.87798, 39.634, -6.76472, 0.91", "-6.68707, 42.6952, -5.81007, 0.91", "-6.96235, 43.9701, -5.39941, 0.91", "-7.26579, 45.7641, -4.77851, 0.91", "-7.49673, 47.5056, -4.13885, 0.91", "-7.62827, 48.584, -3.7396, 0.91", "-7.91635, 50.4524, -2.97071, 0.91", "-8.20774, 51.6735, -2.3427, 0.91", "-8.53267, 52.6748, -1.8223, 0.91", "-8.89489, 53.6691, -1.38192, 0.68", "-9.26107, 54.6291, -1.01702, 0.91", "-10.0795, 56.8892, -0.225222, 0.91", "-10.9777, 59.5578, 0.674103, 0.91", "-11.6278, 62.1123, 1.50305, 0.91", "-12.1908, 65.3603, 2.49388, 0.91", "-12.3725, 67.3831, 3.02762, 0.91", "-12.4063, 69.5077, 3.44881, 0.91", "-12.3629, 70.702, 3.61021, 1.14", "-12.249, 73.5068, 3.85777, 0.91", "-12.236, 74.9905, 3.91647, 0.91", "-12.2988, 77.2732, 3.83564, 0.91", "-12.4284, 80.6639, 3.44889, 0.91", "-12.5654, 83.3851, 2.96706, 0.91", "-12.7165, 85.5166, 2.50158, 0.91", "-12.8502, 86.8496, 2.18631, 0.68", "-13.0187, 88.3183, 1.90813, 0.68", "-13.2585, 90.3876, 1.70514, 0.91", "-13.4003, 91.8517, 1.6962, 0.91", "-13.5917, 94.1356, 1.77065, 1.36", "-13.7171, 95.6471, 1.8152, 0.91", "-13.9391, 97.9181, 1.84852, 0.91", "-14.1065, 99.7852, 1.79209, 0.91", "-14.3213, 102.53, 1.55309, 0.91", "-14.4311, 104.908, 1.21243, 1.14", "-14.4504, 107.254, 0.738893, 1.14", "-14.4244, 108.448, 0.436864, 0.91", "-14.2622, 112.149, -0.633596, 1.14", "-14.1738, 113.877, -1.13836, 1.14", "-14.0529, 116.325, -1.77728, 0.91", "-13.9868, 117.72, -2.04039, 0.68", "-13.9098, 119.068, -2.17512, 0.68", "-13.8305, 120.835, -2.19441, 0.91", "-13.791, 123.551, -1.9559, 1.14", "-13.7899, 125.729, -1.60888, 1.14", "-13.8294, 127.599, -1.20263, 0.45", "-13.9284, 129.136, -0.795817, 0.45", "-14.1335, 130.921, -0.281912, 0.68", "-14.359, 132.402, 0.147845, 0.45", "-14.4889, 133.137, 0.335221, 0.45", "-14.7434, 134.581, 0.560026, 0.91", "-14.9845, 135.89, 0.597675, 0.23", "-15.1698, 136.872, 0.511895, 0.68", "-15.3618, 138.1, 0.315135, 0.23", "-15.6231, 140.037, -0.0943935, 0.45", "-15.7908, 141.496, -0.459606, 0.23", "-15.872, 142.406, -0.738281, 0.23", "-15.9905, 143.884, -1.22819, 0.23", "-16.0602, 144.832, -1.54766, 0.68", "-16.1802, 146.574, -2.12398, 0.23", "-16.2914, 149.029, -2.98925, 0.23", "-16.3047, 150.582, -3.55542, 0.23", "-17.9578, 158.902, -4.61634, 0.23", "-18.119, 167.4, -5.52647, 0.23", "-19.1919, 175.879, -5.6902, 0.23", "-18.8759, 184.366, -4.71512, 0.23", "-19.5355, 192.863, -5.38547, 0.23", "-21.3758, 201.208, -5.15288, 0.23" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-5.04614, 37.0154, -7.57357, 0.68", "-5.57768, 39.9616, -8.00398, 0.68", "-6.23736, 42.8922, -8.40503, 0.68", "-7.12493, 46.1558, -8.80495, 0.68", "-8.22363, 49.7517, -9.13593, 0.68", "-9.42998, 53.428, -9.25733, 0.68", "-10.878, 57.5595, -9.15942, 0.68", "-11.7112, 59.7373, -8.93141, 0.68", "-12.7284, 62.0851, -8.49877, 0.91", "-13.7361, 63.9881, -8.00432, 0.45", "-15.3769, 66.6994, -7.10944, 0.45", "-16.7512, 68.8299, -6.33742, 0.45", "-17.7294, 70.4174, -5.82119, 0.45", "-18.2141, 71.241, -5.63874, 0.45", "-19.3314, 73.2047, -5.46678, 0.91", "-20.7079, 75.6317, -5.47025, 0.45", "-22.3117, 78.4715, -5.76158, 0.45", "-23.4923, 80.6165, -6.10874, 0.45", "-24.5115, 82.5345, -6.47747, 0.45", "-25.5437, 84.5549, -6.91185, 0.45" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_30", "dend_29", "dend_24", "dend_21", "dend_14", "dend_7", "dend_0", "dend_26", "dend_25", "dend_23", "dend_22", "dend_18", "dend_15", "dend_13", "dend_8", "dend_2", "dend_1", "dend_28", "dend_27", "dend_20", "dend_19", "dend_17", "dend_16", "dend_12", "dend_9", "dend_4", "dend_3", "dend_11", "dend_10", "dend_6", "dend_5" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_30", "dend_29", "dend_24", "dend_21", "dend_14", "dend_7", "dend_0", "dend_26", "dend_25", "dend_23", "dend_22", "dend_18", "dend_15", "dend_13", "dend_8", "dend_2", "dend_1", "dend_28", "dend_27", "dend_20", "dend_19", "dend_17", "dend_16", "dend_12", "dend_9", "dend_4", "dend_3", "dend_11", "dend_10", "dend_6", "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_24", "dend_24", "dend_24", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_26", "dend_26", "dend_26", "dend_26", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_4", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cNAC_149_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cNAC_149_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cNAC187_L6_LBC_9ab2498c23_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_30, id: dend_30, parent: soma_0
create dend_30
public dend_30
// Section: dend_29, id: dend_29, parent: soma_0
create dend_29
public dend_29
// Section: dend_24, id: dend_24, parent: soma_0
create dend_24
public dend_24
// Section: dend_21, id: dend_21, parent: soma_0
create dend_21
public dend_21
// Section: dend_14, id: dend_14, parent: soma_0
create dend_14
public dend_14
// Section: dend_7, id: dend_7, parent: soma_0
create dend_7
public dend_7
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_26, id: dend_26, parent: dend_24
create dend_26
public dend_26
// Section: dend_25, id: dend_25, parent: dend_24
create dend_25
public dend_25
// Section: dend_23, id: dend_23, parent: dend_21
create dend_23
public dend_23
// Section: dend_22, id: dend_22, parent: dend_21
create dend_22
public dend_22
// Section: dend_18, id: dend_18, parent: dend_14
create dend_18
public dend_18
// Section: dend_15, id: dend_15, parent: dend_14
create dend_15
public dend_15
// Section: dend_13, id: dend_13, parent: dend_7
create dend_13
public dend_13
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_28, id: dend_28, parent: dend_26
create dend_28
public dend_28
// Section: dend_27, id: dend_27, parent: dend_26
create dend_27
public dend_27
// Section: dend_20, id: dend_20, parent: dend_18
create dend_20
public dend_20
// Section: dend_19, id: dend_19, parent: dend_18
create dend_19
public dend_19
// Section: dend_17, id: dend_17, parent: dend_15
create dend_17
public dend_17
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_12, id: dend_12, parent: dend_8
create dend_12
public dend_12
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9
// Section: dend_4, id: dend_4, parent: dend_2
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_11, id: dend_11, parent: dend_9
create dend_11
public dend_11
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10
// Section: dend_6, id: dend_6, parent: dend_4
create dend_6
public dend_6
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_30, dend_29, dend_24, dend_21, dend_14, dend_7, dend_0, dend_26, dend_25, dend_23, dend_22, dend_18, dend_15, dend_13, dend_8, dend_2, dend_1, dend_28, dend_27, dend_20, dend_19, dend_17, dend_16, dend_12, dend_9, dend_4, dend_3, dend_11, dend_10, dend_6, dend_5]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_30, dend_29, dend_24, dend_21, dend_14, dend_7, dend_0, dend_26, dend_25, dend_23, dend_22, dend_18, dend_15, dend_13, dend_8, dend_2, dend_1, dend_28, dend_27, dend_20, dend_19, dend_17, dend_16, dend_12, dend_9, dend_4, dend_3, dend_11, dend_10, dend_6, dend_5]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_32
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_26, dend_26, dend_26, dend_26, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_11, dend_11, dend_11, dend_11, dend_11, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cNAC_149_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cNAC_149_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_30(0), soma_0(0.45000003020513674)
    connect dend_29(0), soma_0(0.45000003020513674)
    connect dend_24(0), soma_0(0.45000003020513674)
    connect dend_21(0), soma_0(0.45000003020513674)
    connect dend_14(0), soma_0(0.45000003020513674)
    connect dend_7(0), soma_0(0.45000003020513674)
    connect dend_0(0), soma_0(0.45000003020513674)
    connect axon_0(0), soma_0(1.0)
    connect dend_26(0), dend_24(1.0)
    connect dend_25(0), dend_24(1.0)
    connect dend_23(0), dend_21(1.0)
    connect dend_22(0), dend_21(1.0)
    connect dend_18(0), dend_14(1.0)
    connect dend_15(0), dend_14(1.0)
    connect dend_13(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_28(0), dend_26(1.0)
    connect dend_27(0), dend_26(1.0)
    connect dend_20(0), dend_18(1.0)
    connect dend_19(0), dend_18(1.0)
    connect dend_17(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_12(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)
    connect dend_4(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_11(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)
    connect dend_6(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -1.58794, -11.7196, 0.0, 2.80064 ) }
    soma_0 { pt3dadd( -1.43666, -10.6109, 0.0, 4.56392 ) }
    soma_0 { pt3dadd( -1.28539, -9.50222, 0.0, 6.24281 ) }
    soma_0 { pt3dadd( -1.13412, -8.39354, 0.0, 7.62114 ) }
    soma_0 { pt3dadd( -0.982843, -7.28486, 0.0, 8.91633 ) }
    soma_0 { pt3dadd( -0.83157, -6.17618, 0.0, 10.2819 ) }
    soma_0 { pt3dadd( -0.680297, -5.06751, 0.0, 11.6257 ) }
    soma_0 { pt3dadd( -0.529024, -3.95883, 0.0, 12.7797 ) }
    soma_0 { pt3dadd( -0.377751, -2.85015, 0.0, 13.5779 ) }
    soma_0 { pt3dadd( -0.226478, -1.74148, 0.0, 14.0593 ) }
    soma_0 { pt3dadd( -0.0752052, -0.632799, 0.0, 14.5256 ) }
    soma_0 { pt3dadd( 0.0760678, 0.475878, 0.0, 15.0335 ) }
    soma_0 { pt3dadd( 0.227341, 1.58456, 0.0, 15.6506 ) }
    soma_0 { pt3dadd( 0.378614, 2.69323, 0.0, 15.9776 ) }
    soma_0 { pt3dadd( 0.529887, 3.80191, 0.0, 15.9263 ) }
    soma_0 { pt3dadd( 0.68116, 4.91059, 0.0, 15.679 ) }
    soma_0 { pt3dadd( 0.832433, 6.01926, 0.0, 14.959 ) }
    soma_0 { pt3dadd( 0.983706, 7.12794, 0.0, 13.4415 ) }
    soma_0 { pt3dadd( 1.13498, 8.23662, 0.0, 11.0445 ) }
    soma_0 { pt3dadd( 1.28625, 9.3453, 0.0, 9.12656 ) }
    soma_0 { pt3dadd( 1.43752, 10.454, 0.0, 6.46763 ) }
    // Section: dend_30, id: dend_30, parent: soma_0 (entry count 21/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( 2.61877, -1.30077, -16.47, 0.91 ) }
    dend_30 { pt3dadd( 2.85161, -1.51414, -16.705, 0.91 ) }
    dend_30 { pt3dadd( 4.16455, -3.425, -18.5364, 0.91 ) }
    dend_30 { pt3dadd( 4.69556, -4.66108, -19.7319, 0.91 ) }
    dend_30 { pt3dadd( 4.88329, -5.34104, -20.5206, 0.91 ) }
    dend_30 { pt3dadd( 4.99457, -6.11148, -21.8648, 0.91 ) }
    dend_30 { pt3dadd( 4.91749, -6.38455, -23.1926, 0.91 ) }
    dend_30 { pt3dadd( 4.58752, -5.95256, -24.8606, 0.91 ) }
    dend_30 { pt3dadd( 4.30766, -5.02512, -26.2266, 0.91 ) }
    dend_30 { pt3dadd( 4.15319, -3.65895, -27.7145, 0.91 ) }
    dend_30 { pt3dadd( 4.20638, -1.72775, -29.6603, 0.91 ) }
    dend_30 { pt3dadd( 4.42693, -0.110468, -31.3179, 0.91 ) }
    dend_30 { pt3dadd( 4.76629, 1.61186, -33.1604, 0.91 ) }
    dend_30 { pt3dadd( 5.18102, 3.29817, -35.0959, 0.91 ) }
    dend_30 { pt3dadd( 5.57083, 4.82454, -37.1091, 0.91 ) }
    dend_30 { pt3dadd( 5.85943, 6.2813, -39.3921, 0.91 ) }
    dend_30 { pt3dadd( 6.00269, 7.2702, -41.2011, 0.91 ) }
    dend_30 { pt3dadd( 6.08019, 8.09708, -42.8581, 0.91 ) }
    dend_30 { pt3dadd( 6.15655, 9.0557, -45.1091, 0.91 ) }
    dend_30 { pt3dadd( 6.30009, 10.0985, -47.8809, 1.36 ) }
    dend_30 { pt3dadd( 6.56872, 10.9288, -50.0957, 1.36 ) }
    dend_30 { pt3dadd( 7.08612, 11.7602, -52.3428, 0.91 ) }
    dend_30 { pt3dadd( 7.85057, 12.4686, -54.4225, 1.14 ) }
    dend_30 { pt3dadd( 8.87342, 13.0025, -56.4644, 0.68 ) }
    dend_30 { pt3dadd( 10.1894, 13.3622, -58.6671, 0.68 ) }
    dend_30 { pt3dadd( 11.6008, 13.5269, -60.8116, 2.27 ) }
    dend_30 { pt3dadd( 13.3121, 13.5453, -63.2845, 0.45 ) }
    dend_30 { pt3dadd( 15.2112, 13.4544, -66.0381, 1.59 ) }
    dend_30 { pt3dadd( 16.6759, 13.3653, -68.1676, 0.45 ) }
    dend_30 { pt3dadd( 18.0981, 13.3205, -70.2108, 0.45 ) }
    dend_30 { pt3dadd( 18.7128, 13.3039, -71.0649, 2.5 ) }
    dend_30 { pt3dadd( 20.5298, 13.2965, -73.5465, 0.23 ) }
    dend_30 { pt3dadd( 22.6819, 13.414, -76.2515, 0.23 ) }
    dend_30 { pt3dadd( 24.6434, 13.6149, -78.5058, 0.23 ) }
    dend_30 { pt3dadd( 26.2588, 13.8457, -80.2107, 2.27 ) }
    dend_30 { pt3dadd( 28.7552, 14.2484, -82.6708, 0.23 ) }
    dend_30 { pt3dadd( 31.1293, 14.6555, -84.8833, 0.23 ) }
    dend_30 { pt3dadd( 32.5324, 14.9118, -86.1113, 0.91 ) }
    dend_30 { pt3dadd( 34.6181, 15.2756, -87.7994, 0.23 ) }
    dend_30 { pt3dadd( 36.4637, 15.622, -89.1846, 0.91 ) }
    dend_30 { pt3dadd( 38.3269, 16.0063, -90.5541, 0.23 ) }
    dend_30 { pt3dadd( 39.9146, 16.3707, -91.7403, 0.23 ) }
    dend_30 { pt3dadd( 40.6869, 16.5643, -92.3752, 0.91 ) }
    dend_30 { pt3dadd( 42.4955, 17.1171, -94.1596, 0.23 ) }
    dend_30 { pt3dadd( 43.623, 17.5427, -95.4003, 1.82 ) }
    dend_30 { pt3dadd( 45.1931, 18.2393, -97.34, 0.45 ) }
    dend_30 { pt3dadd( 46.6909, 18.964, -99.2598, 0.68 ) }
    dend_30 { pt3dadd( 48.2973, 19.7127, -101.336, 0.23 ) }
    dend_30 { pt3dadd( 50.1057, 20.4945, -103.62, 1.59 ) }
    dend_30 { pt3dadd( 52.7945, 21.564, -106.908, 0.23 ) }
    dend_30 { pt3dadd( 53.9496, 21.9397, -108.272, 0.23 ) }
    dend_30 { pt3dadd( 55.0809, 22.2251, -109.496, 0.91 ) }
    dend_30 { pt3dadd( 56.5225, 22.5025, -110.994, 0.23 ) }
    dend_30 { pt3dadd( 57.4761, 22.6295, -111.939, 0.91 ) }
    dend_30 { pt3dadd( 59.2546, 22.839, -113.698, 0.23 ) }
    dend_30 { pt3dadd( 61.2538, 23.0904, -115.749, 0.91 ) }
    dend_30 { pt3dadd( 64.1218, 23.5529, -118.823, 0.45 ) }
    dend_30 { pt3dadd( 66.2571, 24.01, -121.287, 0.45 ) }
    dend_30 { pt3dadd( 68.4345, 24.6421, -123.959, 0.45 ) }
    dend_30 { pt3dadd( 69.8609, 25.1453, -125.808, 0.68 ) }
    dend_30 { pt3dadd( 71.3069, 25.7427, -127.727, 0.23 ) }
    dend_30 { pt3dadd( 73.0265, 26.5454, -129.997, 1.14 ) }
    dend_30 { pt3dadd( 74.7184, 27.4319, -132.19, 0.45 ) }
    dend_30 { pt3dadd( 76.7505, 28.6051, -134.696, 0.45 ) }
    dend_30 { pt3dadd( 78.6439, 29.735, -136.904, 0.91 ) }
    dend_30 { pt3dadd( 80.4352, 30.7013, -138.801, 0.45 ) }
    dend_30 { pt3dadd( 81.2923, 31.0981, -139.624, 1.59 ) }
    dend_30 { pt3dadd( 82.5414, 31.5681, -140.708, 1.36 ) }
    dend_30 { pt3dadd( 83.8375, 31.9425, -141.721, 0.68 ) }
    dend_30 { pt3dadd( 85.7973, 32.4589, -143.242, 0.68 ) }
    dend_30 { pt3dadd( 87.6907, 32.9634, -144.806, 1.36 ) }
    dend_30 { pt3dadd( 89.7832, 33.5684, -146.695, 1.36 ) }
    dend_30 { pt3dadd( 91.5922, 34.1826, -148.556, 0.68 ) }
    dend_30 { pt3dadd( 93.4262, 34.997, -150.784, 0.68 ) }
    dend_30 { pt3dadd( 94.722, 35.8392, -152.684, 0.45 ) }
    dend_30 { pt3dadd( 95.4481, 36.5756, -154.005, 0.45 ) }
    dend_30 { pt3dadd( 95.7679, 37.0808, -154.743, 0.91 ) }
    dend_30 { pt3dadd( 96.3008, 38.6127, -156.692, 0.45 ) }
    dend_30 { pt3dadd( 96.513, 40.0631, -158.459, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_30 { pt3dadd( 96.5239, 41.7905, -160.47, 0.45 ) }
    dend_30 { pt3dadd( 96.4813, 42.8584, -161.646, 0.45 ) }
    dend_30 { pt3dadd( 96.4266, 43.7647, -162.587, 0.91 ) }
    dend_30 { pt3dadd( 96.2741, 45.6753, -164.476, 0.45 ) }
    dend_30 { pt3dadd( 96.117, 47.4106, -166.09, 0.91 ) }
    dend_30 { pt3dadd( 96.0293, 49.3461, -167.879, 0.45 ) }
    dend_30 { pt3dadd( 96.0233, 51.4391, -169.882, 0.45 ) }
    dend_30 { pt3dadd( 96.1744, 53.2384, -171.716, 0.91 ) }
    dend_30 { pt3dadd( 96.5151, 54.9721, -173.604, 0.45 ) }
    dend_30 { pt3dadd( 96.6911, 55.5354, -174.254, 0.91 ) }
    dend_30 { pt3dadd( 97.4223, 57.3637, -176.531, 0.45 ) }
    dend_30 { pt3dadd( 98.1985, 58.8457, -178.691, 0.45 ) }
    dend_30 { pt3dadd( 99.0412, 60.2556, -181.091, 0.45 ) }
    dend_30 { pt3dadd( 99.5647, 61.105, -182.714, 0.91 ) }
    dend_30 { pt3dadd( 100.21, 62.1023, -184.751, 0.23 ) }
    dend_30 { pt3dadd( 100.895, 63.1382, -186.937, 0.68 ) }
    dend_30 { pt3dadd( 101.768, 64.3974, -189.867, 0.45 ) }
    dend_30 { pt3dadd( 102.569, 65.4467, -192.534, 0.45 ) }
    dend_30 { pt3dadd( 103.19, 66.2428, -194.654, 0.91 ) }
    dend_30 { pt3dadd( 103.979, 67.0773, -197.223, 0.45 ) }
    dend_30 { pt3dadd( 104.916, 67.9839, -200.18, 0.45 ) }
    dend_30 { pt3dadd( 106.207, 69.12, -204.054, 0.45 ) }
    dend_30 { pt3dadd( 107.406, 70.0953, -207.456, 0.45 ) }
    dend_30 { pt3dadd( 108.801, 71.0468, -211.026, 0.45 ) }
    dend_30 { pt3dadd( 110.299, 71.9324, -214.692, 0.45 ) }
    // Section: dend_29, id: dend_29, parent: soma_0 (entry count 25/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 3.75878, 8.46922, 6.75, 0.68 ) }
    dend_29 { pt3dadd( 4.55984, 9.08774, 7.16859, 0.68 ) }
    dend_29 { pt3dadd( 5.3829, 9.81573, 7.70827, 0.68 ) }
    dend_29 { pt3dadd( 6.40699, 10.8164, 8.50984, 0.91 ) }
    dend_29 { pt3dadd( 7.33869, 11.7828, 9.37716, 0.91 ) }
    dend_29 { pt3dadd( 8.12251, 12.6414, 10.2933, 0.68 ) }
    dend_29 { pt3dadd( 8.7152, 13.3096, 11.1891, 0.68 ) }
    dend_29 { pt3dadd( 8.91979, 13.6605, 11.918, 0.68 ) }
    dend_29 { pt3dadd( 8.92459, 13.8544, 12.5465, 0.68 ) }
    dend_29 { pt3dadd( 8.80063, 14.065, 13.488, 0.68 ) }
    dend_29 { pt3dadd( 8.54273, 14.4194, 14.9426, 0.68 ) }
    dend_29 { pt3dadd( 8.43893, 14.665, 15.6704, 0.68 ) }
    dend_29 { pt3dadd( 8.33393, 15.3058, 17.1097, 0.68 ) }
    dend_29 { pt3dadd( 8.30843, 15.8147, 18.001, 0.68 ) }
    dend_29 { pt3dadd( 8.32121, 16.4736, 19.008, 0.68 ) }
    dend_29 { pt3dadd( 8.36708, 17.2458, 20.0169, 0.45 ) }
    dend_29 { pt3dadd( 8.42449, 18.0091, 20.8833, 0.45 ) }
    dend_29 { pt3dadd( 8.4475, 18.8415, 21.7833, 0.45 ) }
    dend_29 { pt3dadd( 8.39732, 20.0184, 23.1417, 0.45 ) }
    dend_29 { pt3dadd( 8.56097, 23.791, 29.5339, 0.45 ) }
    dend_29 { pt3dadd( 8.91399, 28.8939, 34.915, 0.45 ) }
    dend_29 { pt3dadd( 8.81874, 33.4875, 40.7468, 0.45 ) }
    dend_29 { pt3dadd( 7.30634, 37.7407, 46.6411, 0.45 ) }
    dend_29 { pt3dadd( 6.69793, 42.4219, 52.3714, 0.45 ) }
    dend_29 { pt3dadd( 6.37375, 47.1861, 58.0563, 0.45 ) }
    dend_29 { pt3dadd( 5.53835, 51.1326, 64.289, 0.45 ) }
    dend_29 { pt3dadd( 3.8363, 55.3008, 70.1923, 0.45 ) }
    dend_29 { pt3dadd( 2.32801, 58.5266, 76.7069, 0.45 ) }
    dend_29 { pt3dadd( -0.135425, 63.1282, 81.9867, 0.45 ) }
    dend_29 { pt3dadd( -3.07571, 68.4777, 86.2126, 0.45 ) }
    dend_29 { pt3dadd( -5.04689, 73.3546, 91.4519, 0.45 ) }
    dend_29 { pt3dadd( -8.24583, 77.2738, 96.8857, 0.45 ) }
    dend_29 { pt3dadd( -10.8537, 81.1627, 102.647, 0.45 ) }
    dend_29 { pt3dadd( -13.3278, 83.9508, 109.068, 0.45 ) }
    dend_29 { pt3dadd( -15.3842, 85.9715, 115.91, 0.45 ) }
    dend_29 { pt3dadd( -17.8055, 87.2633, 122.808, 0.45 ) }
    dend_29 { pt3dadd( -21.5953, 88.9774, 128.958, 0.45 ) }
    dend_29 { pt3dadd( -25.9351, 90.4115, 134.808, 0.45 ) }
    dend_29 { pt3dadd( -30.5912, 92.2402, 140.294, 0.45 ) }
    dend_29 { pt3dadd( -34.4791, 94.7969, 146.08, 0.45 ) }
    // Section: dend_24, id: dend_24, parent: soma_0 (entry count 65/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 8.97878, 4.15923, -0.65, 2.27 ) }
    dend_24 { pt3dadd( 8.97878, 4.15923, -0.65, 2.27 ) }
    dend_24 { pt3dadd( 11.5098, 5.06083, -0.65, 1.82 ) }
    dend_24 { pt3dadd( 13.0779, 5.61941, -0.65, 1.82 ) }
    // Section: dend_21, id: dend_21, parent: soma_0 (entry count 69/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( -2.83121, -8.77077, -6.2, 1.14 ) }
    dend_21 { pt3dadd( -2.83121, -8.77077, -6.2, 1.14 ) }
    dend_21 { pt3dadd( -3.50317, -11.1236, -6.55749, 1.14 ) }
    dend_21 { pt3dadd( -4.16976, -13.4576, -6.91213, 1.14 ) }
    dend_21 { pt3dadd( -4.65821, -15.1679, -7.17199, 1.36 ) }
    dend_21 { pt3dadd( -5.13955, -16.8533, -7.42807, 1.36 ) }
    dend_21 { pt3dadd( -5.85892, -19.3721, -7.81079, 1.59 ) }
    dend_21 { pt3dadd( -6.61385, -21.8569, -8.20993, 1.59 ) }
    // Section: dend_14, id: dend_14, parent: soma_0 (entry count 77/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( -2.55121, -11.2608, 3.96, 2.5 ) }
    dend_14 { pt3dadd( -2.55121, -11.2608, 3.96, 2.5 ) }
    dend_14 { pt3dadd( -2.85263, -13.0327, 4.10359, 1.82 ) }
    dend_14 { pt3dadd( -3.35432, -15.9818, 4.3426, 1.82 ) }
    dend_14 { pt3dadd( -3.76082, -18.3714, 4.53626, 1.82 ) }
    dend_14 { pt3dadd( -4.20518, -20.9835, 4.74795, 1.82 ) }
    dend_14 { pt3dadd( -4.61661, -23.4021, 4.94395, 2.05 ) }
    // Section: dend_7, id: dend_7, parent: soma_0 (entry count 84/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -6.77122, 4.20923, 8.7, 1.59 ) }
    dend_7 { pt3dadd( -6.77122, 4.20923, 8.7, 1.59 ) }
    dend_7 { pt3dadd( -7.63124, 5.19681, 8.7995, 1.36 ) }
    dend_7 { pt3dadd( -8.63984, 6.21834, 8.92033, 1.36 ) }
    dend_7 { pt3dadd( -9.63802, 7.04873, 9.06156, 1.36 ) }
    dend_7 { pt3dadd( -11.4893, 8.34677, 9.37251, 1.59 ) }
    dend_7 { pt3dadd( -13.5559, 9.5689, 9.77271, 1.59 ) }
    dend_7 { pt3dadd( -15.2924, 10.4007, 10.182, 1.36 ) }
    dend_7 { pt3dadd( -16.9442, 10.985, 10.6625, 1.36 ) }
    dend_7 { pt3dadd( -19.0478, 11.3934, 11.4142, 1.36 ) }
    dend_7 { pt3dadd( -20.3363, 11.4282, 11.9665, 1.14 ) }
    dend_7 { pt3dadd( -21.6117, 11.2759, 12.6379, 1.14 ) }
    dend_7 { pt3dadd( -22.5246, 11.1344, 13.2016, 1.14 ) }
    dend_7 { pt3dadd( -23.1857, 11.1337, 13.6691, 1.14 ) }
    dend_7 { pt3dadd( -23.9671, 11.2268, 14.319, 1.14 ) }
    dend_7 { pt3dadd( -24.4843, 11.4335, 14.7979, 1.14 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_7 { pt3dadd( -25.529, 12.1797, 15.7815, 1.14 ) }
    dend_7 { pt3dadd( -26.9403, 13.6633, 17.0505, 1.14 ) }
    dend_7 { pt3dadd( -28.2542, 15.3436, 18.0988, 1.14 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 3/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 1.32876, 10.1992, 0.58, 4.32 ) }
    dend_0 { pt3dadd( 1.32876, 10.1992, 0.58, 4.32 ) }
    dend_0 { pt3dadd( 1.75619, 11.6402, 0.97961, 2.5 ) }
    dend_0 { pt3dadd( 2.34702, 13.6322, 1.53199, 2.05 ) }
    dend_0 { pt3dadd( 2.76646, 15.0463, 1.92414, 2.5 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 8/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 1.43752, 10.454, 0.0, 1.17019 ) }
    axon_0 { pt3dadd( 3.46539, 25.3163, 0.0, 1.17019 ) }
    axon_0 { pt3dadd( 5.49327, 40.1786, 0.0, 1.17019 ) }
    // Section: dend_26, id: dend_26, parent: dend_24 (entry count 11/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 13.0779, 5.61941, -0.65, 1.82 ) }
    dend_26 { pt3dadd( 13.4374, 5.73282, -0.558546, 1.82 ) }
    dend_26 { pt3dadd( 15.6513, 6.43113, 0.00461634, 1.59 ) }
    dend_26 { pt3dadd( 17.4698, 7.00471, 0.467189, 1.36 ) }
    dend_26 { pt3dadd( 18.8358, 7.43556, 0.81465, 1.59 ) }
    // Section: dend_25, id: dend_25, parent: dend_24 (entry count 16/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 13.0779, 5.61941, -0.65, 0.91 ) }
    dend_25 { pt3dadd( 14.2303, 5.57417, -1.97036, 0.91 ) }
    dend_25 { pt3dadd( 15.9545, 5.34655, -3.74931, 0.91 ) }
    dend_25 { pt3dadd( 17.3034, 5.03637, -5.09128, 0.91 ) }
    dend_25 { pt3dadd( 18.5286, 4.73367, -6.26711, 0.91 ) }
    dend_25 { pt3dadd( 20.45, 4.3895, -7.96757, 0.68 ) }
    dend_25 { pt3dadd( 22.8816, 4.15958, -9.92529, 0.68 ) }
    dend_25 { pt3dadd( 24.2642, 4.1175, -10.8939, 0.68 ) }
    dend_25 { pt3dadd( 26.2069, 4.14591, -11.9891, 0.68 ) }
    dend_25 { pt3dadd( 28.1108, 4.25907, -12.9073, 0.68 ) }
    dend_25 { pt3dadd( 31.0401, 4.56302, -14.2033, 0.91 ) }
    dend_25 { pt3dadd( 33.5537, 4.90428, -15.2857, 0.68 ) }
    dend_25 { pt3dadd( 34.8965, 5.13851, -15.8691, 0.68 ) }
    dend_25 { pt3dadd( 37.6662, 5.64694, -17.1046, 0.68 ) }
    dend_25 { pt3dadd( 39.9536, 6.0055, -18.1306, 0.68 ) }
    dend_25 { pt3dadd( 42.0952, 6.19914, -19.0726, 0.68 ) }
    dend_25 { pt3dadd( 43.821, 6.26807, -19.8407, 0.68 ) }
    dend_25 { pt3dadd( 46.1126, 6.33195, -20.829, 0.68 ) }
    dend_25 { pt3dadd( 48.297, 6.44787, -21.723, 0.68 ) }
    dend_25 { pt3dadd( 50.8319, 6.65415, -22.7048, 0.45 ) }
    dend_25 { pt3dadd( 52.5453, 6.763, -23.3575, 0.45 ) }
    dend_25 { pt3dadd( 53.5851, 6.83169, -23.7651, 0.45 ) }
    dend_25 { pt3dadd( 55.3142, 6.9362, -24.4832, 0.45 ) }
    dend_25 { pt3dadd( 57.8849, 7.08635, -25.6633, 1.14 ) }
    dend_25 { pt3dadd( 60.332, 7.2455, -26.9227, 0.45 ) }
    dend_25 { pt3dadd( 62.8396, 7.45027, -28.3938, 0.45 ) }
    dend_25 { pt3dadd( 64.4987, 7.59342, -29.4634, 0.45 ) }
    dend_25 { pt3dadd( 66.8316, 7.7676, -31.002, 0.68 ) }
    dend_25 { pt3dadd( 69.0174, 7.96277, -32.4748, 0.45 ) }
    dend_25 { pt3dadd( 71.3592, 8.2668, -34.0148, 1.36 ) }
    dend_25 { pt3dadd( 73.6637, 8.66956, -35.4503, 0.45 ) }
    dend_25 { pt3dadd( 76.7608, 9.34562, -37.2581, 0.45 ) }
    dend_25 { pt3dadd( 78.5492, 9.78232, -38.2324, 0.68 ) }
    dend_25 { pt3dadd( 80.648, 10.3695, -39.3356, 0.23 ) }
    dend_25 { pt3dadd( 83.2052, 11.1232, -40.6345, 0.23 ) }
    dend_25 { pt3dadd( 84.7498, 11.5831, -41.3821, 1.82 ) }
    dend_25 { pt3dadd( 86.821, 12.1841, -42.3237, 0.45 ) }
    dend_25 { pt3dadd( 88.2784, 12.5873, -42.9848, 0.45 ) }
    dend_25 { pt3dadd( 90.0513, 13.0078, -43.8201, 0.45 ) }
    dend_25 { pt3dadd( 91.9405, 13.3978, -44.718, 0.45 ) }
    dend_25 { pt3dadd( 94.3996, 13.8609, -45.8623, 0.45 ) }
    dend_25 { pt3dadd( 95.9725, 14.1593, -46.5699, 0.68 ) }
    dend_25 { pt3dadd( 98.4394, 14.5959, -47.6377, 0.45 ) }
    dend_25 { pt3dadd( 101.334, 15.1082, -48.8211, 1.36 ) }
    dend_25 { pt3dadd( 103.518, 15.5019, -49.6343, 0.45 ) }
    dend_25 { pt3dadd( 105.742, 15.9628, -50.4237, 0.45 ) }
    dend_25 { pt3dadd( 108.327, 16.5657, -51.3252, 0.23 ) }
    dend_25 { pt3dadd( 110.069, 17.0065, -51.9319, 0.68 ) }
    dend_25 { pt3dadd( 112.904, 17.8088, -52.864, 0.23 ) }
    dend_25 { pt3dadd( 114.212, 18.2192, -53.2955, 1.36 ) }
    dend_25 { pt3dadd( 117.863, 19.4401, -54.5258, 0.23 ) }
    dend_25 { pt3dadd( 118.722, 19.7754, -54.8195, 0.68 ) }
    dend_25 { pt3dadd( 120.132, 20.4038, -55.2776, 0.23 ) }
    dend_25 { pt3dadd( 121.09, 20.8915, -55.5852, 0.68 ) }
    dend_25 { pt3dadd( 122.776, 21.8284, -56.1568, 0.23 ) }
    dend_25 { pt3dadd( 124.103, 22.5925, -56.6441, 1.14 ) }
    dend_25 { pt3dadd( 127.249, 24.2741, -57.8239, 0.23 ) }
    dend_25 { pt3dadd( 128.041, 24.6384, -58.1418, 1.14 ) }
    dend_25 { pt3dadd( 130.247, 25.5565, -59.1124, 0.23 ) }
    dend_25 { pt3dadd( 133.331, 26.6614, -60.4986, 0.23 ) }
    dend_25 { pt3dadd( 134.879, 27.1374, -61.2116, 0.68 ) }
    dend_25 { pt3dadd( 138.527, 28.123, -62.9324, 0.23 ) }
    dend_25 { pt3dadd( 141.966, 28.8581, -64.5703, 0.23 ) }
    dend_25 { pt3dadd( 143.327, 29.0942, -65.2033, 1.14 ) }
    dend_25 { pt3dadd( 146.342, 29.4649, -66.548, 0.45 ) }
    dend_25 { pt3dadd( 147.615, 29.5826, -67.1073, 0.45 ) }
    dend_25 { pt3dadd( 148.458, 29.6571, -67.4853, 0.68 ) }
    dend_25 { pt3dadd( 150.224, 29.8204, -68.3445, 0.23 ) }
    dend_25 { pt3dadd( 153.132, 30.122, -69.9372, 0.23 ) }
    dend_25 { pt3dadd( 153.518, 30.1636, -70.198, 0.68 ) }
    dend_25 { pt3dadd( 155.462, 30.4088, -71.8914, 0.23 ) }
    dend_25 { pt3dadd( 156.717, 30.5675, -73.1942, 0.68 ) }
    dend_25 { pt3dadd( 157.989, 30.7234, -74.6793, 0.23 ) }
    dend_25 { pt3dadd( 159.721, 30.991, -76.9282, 0.23 ) }
    dend_25 { pt3dadd( 161.391, 31.22, -79.2617, 0.68 ) }
    dend_25 { pt3dadd( 162.466, 31.3553, -80.7876, 0.68 ) }
    dend_25 { pt3dadd( 163.752, 31.4972, -82.59, 0.68 ) }
    dend_25 { pt3dadd( 165.731, 31.7293, -85.2171, 0.23 ) }
    dend_25 { pt3dadd( 167.356, 31.9382, -87.1819, 0.45 ) }
    dend_25 { pt3dadd( 169.341, 32.2052, -89.3246, 0.23 ) }
    dend_25 { pt3dadd( 170.739, 32.3897, -90.6693, 0.91 ) }
    dend_25 { pt3dadd( 172.804, 32.673, -92.5494, 0.23 ) }
    dend_25 { pt3dadd( 173.694, 32.8128, -93.3425, 0.45 ) }
    dend_25 { pt3dadd( 175.717, 33.1542, -95.1873, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_25 { pt3dadd( 176.126, 33.2344, -95.5814, 1.14 ) }
    dend_25 { pt3dadd( 177.951, 33.7193, -97.5397, 0.23 ) }
    dend_25 { pt3dadd( 179.35, 34.1277, -99.3766, 0.23 ) }
    dend_25 { pt3dadd( 180.441, 34.4761, -100.995, 1.59 ) }
    dend_25 { pt3dadd( 182.072, 35.007, -103.618, 0.23 ) }
    dend_25 { pt3dadd( 183.822, 35.5852, -106.545, 0.23 ) }
    dend_25 { pt3dadd( 185.149, 36.0717, -108.877, 1.36 ) }
    dend_25 { pt3dadd( 187.838, 37.2336, -113.884, 0.23 ) }
    dend_25 { pt3dadd( 189.34, 37.897, -116.745, 0.23 ) }
    dend_25 { pt3dadd( 190.31, 38.324, -118.637, 0.23 ) }
    dend_25 { pt3dadd( 190.685, 38.4902, -119.392, 0.68 ) }
    dend_25 { pt3dadd( 192.376, 39.1906, -122.671, 0.23 ) }
    dend_25 { pt3dadd( 193.697, 39.7441, -125.105, 0.23 ) }
    // Section: dend_23, id: dend_23, parent: dend_21 (entry count 13/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( -6.61385, -21.8569, -8.20993, 0.68 ) }
    dend_23 { pt3dadd( -6.91783, -21.6436, -9.58389, 0.68 ) }
    dend_23 { pt3dadd( -7.12202, -21.5838, -10.6518, 0.68 ) }
    dend_23 { pt3dadd( -7.28903, -21.6123, -11.7618, 0.91 ) }
    dend_23 { pt3dadd( -7.37229, -21.7232, -12.8132, 0.91 ) }
    dend_23 { pt3dadd( -7.37109, -21.9288, -13.8395, 0.68 ) }
    dend_23 { pt3dadd( -7.30552, -22.2221, -14.8628, 0.45 ) }
    dend_23 { pt3dadd( -7.18172, -22.6359, -15.7107, 0.45 ) }
    dend_23 { pt3dadd( -7.09318, -23.0826, -16.4335, 0.68 ) }
    dend_23 { pt3dadd( -7.02964, -23.6345, -17.2308, 0.68 ) }
    dend_23 { pt3dadd( -6.9945, -24.2122, -18.0143, 0.68 ) }
    dend_23 { pt3dadd( -6.99012, -24.715, -18.7306, 0.68 ) }
    dend_23 { pt3dadd( -7.07037, -25.2959, -19.5879, 0.68 ) }
    dend_23 { pt3dadd( -7.25673, -25.9783, -20.6251, 0.68 ) }
    dend_23 { pt3dadd( -7.43114, -26.4923, -21.3608, 0.68 ) }
    dend_23 { pt3dadd( -7.66346, -27.2026, -22.2709, 0.68 ) }
    dend_23 { pt3dadd( -7.85085, -27.9226, -23.1375, 0.68 ) }
    dend_23 { pt3dadd( -7.98748, -28.7514, -24.1048, 0.91 ) }
    dend_23 { pt3dadd( -8.03128, -29.5996, -25.0878, 0.68 ) }
    dend_23 { pt3dadd( -8.04215, -30.2679, -25.8547, 0.68 ) }
    dend_23 { pt3dadd( -8.0724, -31.2895, -27.0363, 0.68 ) }
    dend_23 { pt3dadd( -8.11394, -32.1431, -28.0731, 0.68 ) }
    dend_23 { pt3dadd( -8.14858, -32.841, -28.9456, 0.68 ) }
    dend_23 { pt3dadd( -8.1976, -34.0737, -30.5736, 0.45 ) }
    dend_23 { pt3dadd( -8.23549, -34.685, -31.4234, 0.45 ) }
    dend_23 { pt3dadd( -8.29871, -35.3864, -32.4578, 0.45 ) }
    dend_23 { pt3dadd( -8.35491, -35.8388, -33.1585, 0.45 ) }
    dend_23 { pt3dadd( -8.42551, -36.2992, -33.9133, 2.05 ) }
    dend_23 { pt3dadd( -8.53336, -37.0342, -35.1368, 0.45 ) }
    dend_23 { pt3dadd( -8.65335, -37.7422, -36.3389, 0.45 ) }
    dend_23 { pt3dadd( -8.73279, -38.2372, -37.189, 0.91 ) }
    dend_23 { pt3dadd( -8.86157, -38.9364, -38.3842, 0.45 ) }
    dend_23 { pt3dadd( -9.00857, -39.6162, -39.5127, 0.45 ) }
    dend_23 { pt3dadd( -9.18639, -40.3449, -40.6913, 1.82 ) }
    dend_23 { pt3dadd( -9.40965, -41.2221, -42.0551, 0.45 ) }
    dend_23 { pt3dadd( -9.52056, -41.6843, -42.7538, 0.45 ) }
    dend_23 { pt3dadd( -9.54443, -41.7906, -42.9104, 0.68 ) }
    dend_23 { pt3dadd( -9.73309, -42.6791, -44.1795, 0.45 ) }
    dend_23 { pt3dadd( -9.89985, -43.4303, -45.2803, 0.45 ) }
    dend_23 { pt3dadd( -10.0478, -44.1414, -46.4007, 0.68 ) }
    dend_23 { pt3dadd( -10.1757, -44.8887, -47.6307, 0.45 ) }
    dend_23 { pt3dadd( -10.2738, -45.4784, -48.6441, 0.45 ) }
    dend_23 { pt3dadd( -10.3482, -45.9868, -49.5614, 2.05 ) }
    dend_23 { pt3dadd( -10.4676, -46.7438, -50.9643, 0.45 ) }
    dend_23 { pt3dadd( -10.6032, -47.4628, -52.3017, 0.45 ) }
    dend_23 { pt3dadd( -10.7531, -48.1087, -53.4641, 0.45 ) }
    dend_23 { pt3dadd( -10.9554, -48.8471, -54.7019, 0.45 ) }
    dend_23 { pt3dadd( -11.0933, -49.3341, -55.4789, 0.45 ) }
    dend_23 { pt3dadd( -11.2078, -49.7348, -56.0845, 1.14 ) }
    dend_23 { pt3dadd( -11.4324, -50.5016, -57.128, 0.45 ) }
    dend_23 { pt3dadd( -11.7115, -51.3249, -58.1519, 0.45 ) }
    dend_23 { pt3dadd( -11.9037, -51.8827, -58.8105, 0.91 ) }
    dend_23 { pt3dadd( -12.0976, -52.444, -59.4565, 0.45 ) }
    dend_23 { pt3dadd( -12.2997, -53.017, -60.1056, 0.45 ) }
    dend_23 { pt3dadd( -12.4367, -53.4303, -60.6034, 0.91 ) }
    dend_23 { pt3dadd( -12.6804, -54.1931, -61.5381, 0.45 ) }
    dend_23 { pt3dadd( -12.8821, -54.8818, -62.3964, 0.45 ) }
    dend_23 { pt3dadd( -13.0234, -55.4279, -63.0843, 0.45 ) }
    dend_23 { pt3dadd( -13.1208, -55.8346, -63.601, 0.91 ) }
    dend_23 { pt3dadd( -13.3275, -56.85, -64.9167, 0.45 ) }
    dend_23 { pt3dadd( -13.4123, -57.4396, -65.703, 0.45 ) }
    dend_23 { pt3dadd( -13.4784, -58.0415, -66.5008, 0.45 ) }
    dend_23 { pt3dadd( -13.5393, -58.5942, -67.2237, 0.45 ) }
    dend_23 { pt3dadd( -13.6211, -59.3311, -68.2134, 0.45 ) }
    dend_23 { pt3dadd( -13.6845, -59.8333, -68.903, 0.45 ) }
    dend_23 { pt3dadd( -13.8128, -60.591, -69.8855, 0.45 ) }
    dend_23 { pt3dadd( -13.9149, -61.0461, -70.4725, 0.45 ) }
    dend_23 { pt3dadd( -14.0822, -61.7936, -71.4081, 0.45 ) }
    dend_23 { pt3dadd( -14.184, -62.2667, -71.9832, 0.45 ) }
    dend_23 { pt3dadd( -14.329, -62.9863, -72.8669, 0.45 ) }
    dend_23 { pt3dadd( -14.4512, -63.6378, -73.74, 1.36 ) }
    dend_23 { pt3dadd( -14.5857, -64.3262, -74.8068, 1.36 ) }
    dend_23 { pt3dadd( -14.6846, -64.9106, -75.907, 0.68 ) }
    dend_23 { pt3dadd( -14.7622, -65.3325, -76.9079, 0.68 ) }
    dend_23 { pt3dadd( -14.8468, -65.641, -77.9482, 0.68 ) }
    dend_23 { pt3dadd( -14.9693, -65.8274, -79.2259, 0.68 ) }
    dend_23 { pt3dadd( -15.1094, -65.8473, -80.5499, 0.45 ) }
    dend_23 { pt3dadd( -15.2612, -65.7496, -81.7495, 0.45 ) }
    dend_23 { pt3dadd( -15.4175, -65.601, -82.7507, 0.45 ) }
    dend_23 { pt3dadd( -15.6691, -65.3388, -84.1327, 0.45 ) }
    dend_23 { pt3dadd( -16.014, -65.0064, -85.7707, 0.45 ) }
    dend_23 { pt3dadd( -16.2936, -64.7582, -87.0401, 0.45 ) }
    dend_23 { pt3dadd( -16.4808, -64.6124, -87.9054, 0.45 ) }
    dend_23 { pt3dadd( -16.6738, -64.5004, -88.9517, 0.45 ) }
    dend_23 { pt3dadd( -16.8254, -64.4777, -89.9369, 0.45 ) }
    dend_23 { pt3dadd( -16.9478, -64.5835, -91.0859, 0.45 ) }
    dend_23 { pt3dadd( -17.0384, -64.8997, -92.673, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_23 { pt3dadd( -17.0562, -65.1162, -93.4613, 0.23 ) }
    dend_23 { pt3dadd( -17.0449, -65.5537, -94.8931, 0.23 ) }
    dend_23 { pt3dadd( -17.0294, -65.8594, -95.8809, 0.91 ) }
    dend_23 { pt3dadd( -17.0754, -66.2845, -97.5827, 0.45 ) }
    dend_23 { pt3dadd( -17.1624, -66.4086, -98.4424, 0.45 ) }
    dend_23 { pt3dadd( -17.4367, -66.4215, -100.082, 0.45 ) }
    dend_23 { pt3dadd( -17.6011, -66.305, -100.931, 0.45 ) }
    dend_23 { pt3dadd( -17.8298, -66.0161, -102.118, 0.45 ) }
    dend_23 { pt3dadd( -18.1941, -65.2833, -104.441, 0.23 ) }
    dend_23 { pt3dadd( -18.365, -64.7126, -106.138, 0.23 ) }
    dend_23 { pt3dadd( -18.3546, -64.1526, -107.899, 0.91 ) }
    dend_23 { pt3dadd( -18.1063, -63.7331, -109.593, 0.23 ) }
    dend_23 { pt3dadd( -17.6459, -63.5282, -111.147, 0.23 ) }
    dend_23 { pt3dadd( -17.1127, -63.5019, -112.341, 0.68 ) }
    dend_23 { pt3dadd( -16.0941, -63.7001, -114.061, 0.45 ) }
    dend_23 { pt3dadd( -14.9845, -64.0236, -115.722, 0.45 ) }
    dend_23 { pt3dadd( -13.5918, -64.5554, -117.62, 0.45 ) }
    dend_23 { pt3dadd( -12.3261, -65.1475, -119.229, 0.45 ) }
    dend_23 { pt3dadd( -11.8062, -65.4121, -119.847, 0.45 ) }
    dend_23 { pt3dadd( -10.976, -65.8732, -120.798, 0.45 ) }
    // Section: dend_22, id: dend_22, parent: dend_21 (entry count 20/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( -6.61385, -21.8569, -8.20993, 0.91 ) }
    dend_22 { pt3dadd( -6.85684, -22.4064, -8.94139, 0.91 ) }
    dend_22 { pt3dadd( -7.103, -23.3545, -9.95089, 0.68 ) }
    dend_22 { pt3dadd( -7.23676, -24.1941, -10.6214, 0.68 ) }
    dend_22 { pt3dadd( -7.30362, -25.0325, -11.1165, 0.68 ) }
    dend_22 { pt3dadd( -7.26919, -26.1492, -11.5582, 0.68 ) }
    dend_22 { pt3dadd( -7.07242, -27.6779, -11.8537, 0.68 ) }
    dend_22 { pt3dadd( -6.90379, -28.9064, -11.9084, 0.68 ) }
    dend_22 { pt3dadd( -6.78325, -30.2922, -11.8868, 0.68 ) }
    dend_22 { pt3dadd( -6.76786, -31.1047, -11.8846, 1.14 ) }
    dend_22 { pt3dadd( -6.82223, -32.6178, -11.9474, 1.14 ) }
    dend_22 { pt3dadd( -7.09114, -34.924, -12.1974, 0.68 ) }
    dend_22 { pt3dadd( -7.47555, -36.6967, -12.5169, 0.91 ) }
    dend_22 { pt3dadd( -8.14138, -38.7713, -13.1215, 0.91 ) }
    dend_22 { pt3dadd( -8.91814, -40.7585, -13.8708, 0.91 ) }
    dend_22 { pt3dadd( -9.49541, -41.9995, -14.4208, 0.91 ) }
    dend_22 { pt3dadd( -10.1706, -43.2676, -15.0849, 1.14 ) }
    dend_22 { pt3dadd( -11.1617, -44.9745, -16.1436, 1.36 ) }
    dend_22 { pt3dadd( -12.2706, -46.8578, -17.3791, 1.36 ) }
    dend_22 { pt3dadd( -12.9664, -47.9662, -18.1536, 1.36 ) }
    dend_22 { pt3dadd( -14.2231, -49.8249, -19.4841, 1.36 ) }
    dend_22 { pt3dadd( -15.4741, -51.6199, -20.7271, 1.36 ) }
    dend_22 { pt3dadd( -16.203, -52.7038, -21.43, 1.14 ) }
    dend_22 { pt3dadd( -16.8534, -53.7606, -22.0674, 0.68 ) }
    dend_22 { pt3dadd( -17.3011, -54.578, -22.4794, 0.68 ) }
    dend_22 { pt3dadd( -17.612, -55.1556, -22.7175, 0.68 ) }
    dend_22 { pt3dadd( -18.2568, -56.3411, -23.0241, 0.68 ) }
    dend_22 { pt3dadd( -19.0834, -57.7438, -23.235, 0.68 ) }
    dend_22 { pt3dadd( -19.9472, -59.1338, -23.419, 0.68 ) }
    dend_22 { pt3dadd( -20.3015, -59.7236, -23.5185, 0.68 ) }
    dend_22 { pt3dadd( -21.1609, -61.15, -23.7992, 0.68 ) }
    dend_22 { pt3dadd( -22.3459, -62.9608, -24.2112, 0.91 ) }
    dend_22 { pt3dadd( -23.463, -64.5274, -24.6419, 0.91 ) }
    dend_22 { pt3dadd( -24.1514, -65.4592, -24.9547, 0.68 ) }
    dend_22 { pt3dadd( -25.0064, -66.6708, -25.4358, 0.68 ) }
    dend_22 { pt3dadd( -25.7769, -67.9461, -25.9837, 0.68 ) }
    dend_22 { pt3dadd( -26.4609, -69.3424, -26.6579, 1.14 ) }
    dend_22 { pt3dadd( -26.7544, -70.0322, -27.0416, 0.45 ) }
    dend_22 { pt3dadd( -27.0763, -70.8822, -27.4967, 0.45 ) }
    dend_22 { pt3dadd( -27.387, -71.7639, -27.9407, 0.45 ) }
    dend_22 { pt3dadd( -27.773, -72.86, -28.4549, 0.91 ) }
    dend_22 { pt3dadd( -28.1025, -73.9105, -28.9309, 0.45 ) }
    dend_22 { pt3dadd( -28.5141, -75.2817, -29.5041, 0.45 ) }
    dend_22 { pt3dadd( -29.1382, -77.2925, -30.221, 0.68 ) }
    dend_22 { pt3dadd( -29.6277, -78.9492, -30.7095, 0.45 ) }
    dend_22 { pt3dadd( -29.8647, -79.8127, -30.9263, 1.59 ) }
    dend_22 { pt3dadd( -30.1696, -81.0573, -31.2034, 1.59 ) }
    dend_22 { pt3dadd( -30.6572, -83.3129, -31.6269, 0.23 ) }
    dend_22 { pt3dadd( -30.9726, -84.9483, -31.9111, 1.36 ) }
    dend_22 { pt3dadd( -31.6267, -88.4834, -32.4959, 0.23 ) }
    dend_22 { pt3dadd( -31.9239, -90.1256, -32.7444, 1.36 ) }
    dend_22 { pt3dadd( -32.1668, -91.4841, -32.9518, 0.23 ) }
    dend_22 { pt3dadd( -32.4155, -92.8015, -33.1622, 1.36 ) }
    dend_22 { pt3dadd( -32.7703, -94.4443, -33.4796, 0.23 ) }
    dend_22 { pt3dadd( -32.9874, -95.2354, -33.6711, 0.68 ) }
    dend_22 { pt3dadd( -33.6526, -97.114, -34.2063, 0.23 ) }
    dend_22 { pt3dadd( -34.1296, -98.2462, -34.5622, 0.23 ) }
    dend_22 { pt3dadd( -34.8528, -99.7286, -35.0409, 0.91 ) }
    dend_22 { pt3dadd( -35.513, -100.938, -35.4475, 0.23 ) }
    dend_22 { pt3dadd( -36.1892, -102.113, -35.8439, 0.68 ) }
    dend_22 { pt3dadd( -37.3338, -104.076, -36.4897, 0.23 ) }
    dend_22 { pt3dadd( -37.856, -104.974, -36.7792, 0.23 ) }
    dend_22 { pt3dadd( -38.3417, -105.852, -37.0568, 1.59 ) }
    dend_22 { pt3dadd( -39.0799, -107.284, -37.5259, 0.23 ) }
    dend_22 { pt3dadd( -40.259, -109.687, -38.3794, 0.23 ) }
    dend_22 { pt3dadd( -40.6324, -110.473, -38.683, 1.82 ) }
    dend_22 { pt3dadd( -41.1819, -111.612, -39.1569, 1.82 ) }
    dend_22 { pt3dadd( -42.2319, -113.736, -40.0788, 0.23 ) }
    dend_22 { pt3dadd( -42.8325, -114.91, -40.6003, 0.23 ) }
    dend_22 { pt3dadd( -43.4806, -116.077, -41.1159, 0.23 ) }
    dend_22 { pt3dadd( -44.2418, -117.291, -41.6397, 0.68 ) }
    dend_22 { pt3dadd( -45.1564, -118.577, -42.2081, 0.23 ) }
    dend_22 { pt3dadd( -45.9549, -119.563, -42.636, 0.23 ) }
    dend_22 { pt3dadd( -46.4065, -120.061, -42.8397, 0.68 ) }
    dend_22 { pt3dadd( -47.746, -121.391, -43.4094, 0.23 ) }
    dend_22 { pt3dadd( -48.8257, -122.364, -43.8806, 1.36 ) }
    dend_22 { pt3dadd( -50.2774, -123.574, -44.5212, 0.23 ) }
    dend_22 { pt3dadd( -50.6024, -123.828, -44.6666, 0.23 ) }
    dend_22 { pt3dadd( -51.5537, -124.543, -45.1032, 0.91 ) }
    dend_22 { pt3dadd( -53.0862, -125.639, -45.8604, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_22 { pt3dadd( -54.1679, -126.358, -46.451, 0.91 ) }
    // Section: dend_18, id: dend_18, parent: dend_14 (entry count 1/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -4.61661, -23.4021, 4.94395, 1.36 ) }
    dend_18 { pt3dadd( -3.83919, -25.296, 4.22421, 1.36 ) }
    dend_18 { pt3dadd( -3.0769, -27.4226, 3.42567, 1.14 ) }
    dend_18 { pt3dadd( -2.46486, -29.1301, 2.78451, 1.14 ) }
    dend_18 { pt3dadd( -1.96186, -30.5334, 2.25759, 1.14 ) }
    dend_18 { pt3dadd( -1.24737, -32.5267, 1.50912, 1.14 ) }
    dend_18 { pt3dadd( -0.531378, -34.5242, 0.759069, 1.36 ) }
    dend_18 { pt3dadd( 0.146145, -36.2332, 0.187949, 1.59 ) }
    // Section: dend_15, id: dend_15, parent: dend_14 (entry count 9/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -4.61661, -23.4021, 4.94395, 0.68 ) }
    dend_15 { pt3dadd( -3.60319, -24.941, 5.26687, 0.68 ) }
    dend_15 { pt3dadd( -2.45845, -26.8467, 5.70982, 0.68 ) }
    dend_15 { pt3dadd( -1.3766, -28.9798, 6.38099, 0.68 ) }
    dend_15 { pt3dadd( -0.463281, -30.9353, 7.16914, 0.68 ) }
    dend_15 { pt3dadd( 0.308858, -32.5943, 7.99155, 0.91 ) }
    dend_15 { pt3dadd( 0.98438, -34.1619, 8.93129, 0.91 ) }
    dend_15 { pt3dadd( 1.42929, -35.2972, 9.77676, 0.91 ) }
    dend_15 { pt3dadd( 1.81223, -36.9785, 11.6322, 0.91 ) }
    dend_15 { pt3dadd( 1.8257, -37.9511, 13.1128, 0.68 ) }
    dend_15 { pt3dadd( 1.75738, -38.6948, 14.3401, 0.68 ) }
    dend_15 { pt3dadd( 1.58687, -39.9437, 16.2018, 0.68 ) }
    dend_15 { pt3dadd( 1.43538, -41.2282, 17.7776, 0.68 ) }
    dend_15 { pt3dadd( 1.32936, -42.626, 19.0984, 0.68 ) }
    dend_15 { pt3dadd( 1.22875, -44.1559, 20.2288, 0.68 ) }
    dend_15 { pt3dadd( 0.98877, -46.5994, 21.7832, 0.68 ) }
    dend_15 { pt3dadd( 0.748607, -48.6101, 22.9154, 0.68 ) }
    dend_15 { pt3dadd( 0.63656, -49.6895, 23.4288, 0.68 ) }
    dend_15 { pt3dadd( 0.529171, -50.86, 23.8786, 0.68 ) }
    dend_15 { pt3dadd( 0.445585, -52.5221, 24.4174, 0.68 ) }
    dend_15 { pt3dadd( 0.2817, -54.3987, 25.0376, 0.68 ) }
    // Section: dend_13, id: dend_13, parent: dend_7 (entry count 30/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -28.2542, 15.3436, 18.0988, 0.68 ) }
    dend_13 { pt3dadd( -27.5175, 16.9096, 19.055, 0.68 ) }
    dend_13 { pt3dadd( -27.036, 18.3273, 19.8823, 0.68 ) }
    dend_13 { pt3dadd( -26.8572, 18.9496, 20.1936, 0.68 ) }
    dend_13 { pt3dadd( -26.4209, 20.4437, 20.8797, 0.45 ) }
    dend_13 { pt3dadd( -26.1075, 21.5168, 21.3725, 0.45 ) }
    dend_13 { pt3dadd( -25.8667, 22.3416, 21.7513, 0.45 ) }
    dend_13 { pt3dadd( -25.431, 23.6697, 22.2352, 0.45 ) }
    dend_13 { pt3dadd( -25.0238, 24.6307, 22.6113, 0.45 ) }
    dend_13 { pt3dadd( -24.611, 25.9359, 23.1549, 0.45 ) }
    dend_13 { pt3dadd( -20.5978, 32.5486, 26.16, 0.45 ) }
    dend_13 { pt3dadd( -15.5862, 37.6207, 30.405, 0.45 ) }
    dend_13 { pt3dadd( -11.7997, 44.2608, 33.6352, 0.45 ) }
    dend_13 { pt3dadd( -7.01805, 50.8026, 35.425, 0.45 ) }
    dend_13 { pt3dadd( -3.20138, 57.7584, 37.8567, 0.45 ) }
    dend_13 { pt3dadd( 0.64991, 64.7832, 40.0207, 0.45 ) }
    dend_13 { pt3dadd( 5.5963, 70.9333, 42.5843, 0.45 ) }
    dend_13 { pt3dadd( 9.38862, 77.899, 45.0258, 0.45 ) }
    dend_13 { pt3dadd( 13.7161, 84.9513, 45.6584, 0.45 ) }
    dend_13 { pt3dadd( 17.9641, 91.9316, 47.1055, 0.45 ) }
    dend_13 { pt3dadd( 22.6061, 98.4485, 49.3064, 0.45 ) }
    dend_13 { pt3dadd( 27.748, 104.882, 50.322, 0.45 ) }
    dend_13 { pt3dadd( 34.2116, 109.844, 51.892, 0.45 ) }
    dend_13 { pt3dadd( 41.0808, 113.915, 54.151, 0.45 ) }
    dend_13 { pt3dadd( 48.2088, 117.768, 55.9431, 0.45 ) }
    dend_13 { pt3dadd( 55.6333, 120.674, 58.2433, 0.45 ) }
    dend_13 { pt3dadd( 63.4296, 122.578, 60.3543, 0.45 ) }
    dend_13 { pt3dadd( 70.9542, 124.594, 63.2142, 0.45 ) }
    dend_13 { pt3dadd( 78.8654, 126.24, 65.1028, 0.45 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 59/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -28.2542, 15.3436, 18.0988, 0.68 ) }
    dend_8 { pt3dadd( -30.343, 15.4159, 18.7517, 0.68 ) }
    dend_8 { pt3dadd( -32.1197, 15.5077, 19.252, 0.68 ) }
    dend_8 { pt3dadd( -33.82, 15.5802, 19.7361, 0.68 ) }
    dend_8 { pt3dadd( -35.4557, 15.6232, 20.1776, 0.68 ) }
    dend_8 { pt3dadd( -36.6291, 15.6541, 20.4943, 0.68 ) }
    dend_8 { pt3dadd( -38.8315, 15.7121, 21.0887, 0.68 ) }
    dend_8 { pt3dadd( -40.3316, 15.7224, 21.422, 0.68 ) }
    dend_8 { pt3dadd( -41.8762, 15.7408, 21.7119, 0.68 ) }
    dend_8 { pt3dadd( -43.7511, 15.8242, 22.0275, 0.68 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 69/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 2.76646, 15.0463, 1.92414, 1.59 ) }
    dend_2 { pt3dadd( 1.9155, 17.6098, 0.753213, 1.59 ) }
    dend_2 { pt3dadd( 0.886764, 20.3394, -0.654412, 1.59 ) }
    dend_2 { pt3dadd( 0.0305175, 22.6113, -1.82602, 1.59 ) }
    dend_2 { pt3dadd( -0.657761, 24.4375, -2.76779, 1.59 ) }
    dend_2 { pt3dadd( -1.36558, 26.3156, -3.7363, 1.59 ) }
    dend_2 { pt3dadd( -1.93332, 27.822, -4.51315, 1.59 ) }
    dend_2 { pt3dadd( -1.96358, 27.8762, -4.55295, 1.59 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 77/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 2.76646, 15.0463, 1.92414, 1.14 ) }
    dend_1 { pt3dadd( 3.63595, 16.1929, 1.97767, 1.14 ) }
    dend_1 { pt3dadd( 4.84461, 17.9561, 2.01955, 1.14 ) }
    dend_1 { pt3dadd( 5.70261, 19.1272, 2.05621, 1.14 ) }
    dend_1 { pt3dadd( 7.12721, 20.9069, 2.13357, 0.91 ) }
    dend_1 { pt3dadd( 8.23138, 22.2167, 2.20612, 0.91 ) }
    dend_1 { pt3dadd( 9.25026, 23.4052, 2.28195, 0.91 ) }
    dend_1 { pt3dadd( 10.5368, 24.9938, 2.32963, 0.91 ) }
    dend_1 { pt3dadd( 12.2154, 27.1971, 2.33778, 0.91 ) }
    dend_1 { pt3dadd( 13.2616, 28.5767, 2.34983, 0.91 ) }
    dend_1 { pt3dadd( 13.9115, 29.4156, 2.36469, 0.68 ) }
    dend_1 { pt3dadd( 14.7383, 30.4971, 2.3585, 0.68 ) }
    dend_1 { pt3dadd( 15.9582, 32.1357, 2.24085, 0.91 ) }
    dend_1 { pt3dadd( 16.9795, 33.5152, 2.0712, 0.91 ) }
    dend_1 { pt3dadd( 18.0011, 34.9779, 1.87994, 0.91 ) }
    dend_1 { pt3dadd( 18.8452, 36.1582, 1.77285, 0.91 ) }
    dend_1 { pt3dadd( 19.5938, 37.1197, 1.77312, 0.68 ) }
    dend_1 { pt3dadd( 20.6782, 38.3663, 2.00484, 0.68 ) }
    dend_1 { pt3dadd( 21.3787, 39.1202, 2.34435, 0.68 ) }
    dend_1 { pt3dadd( 22.2589, 40.1154, 2.94857, 0.68 ) }
    dend_1 { pt3dadd( 23.0423, 41.143, 3.61731, 0.68 ) }
    dend_1 { pt3dadd( 23.7135, 42.1583, 4.19881, 0.68 ) }
    dend_1 { pt3dadd( 24.6055, 43.5802, 4.86857, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_1 { pt3dadd( 25.7343, 45.3796, 5.48238, 0.68 ) }
    dend_1 { pt3dadd( 26.5765, 46.6931, 5.71163, 0.68 ) }
    dend_1 { pt3dadd( 27.6203, 48.258, 5.71904, 0.68 ) }
    dend_1 { pt3dadd( 28.8819, 50.0379, 5.46056, 0.68 ) }
    dend_1 { pt3dadd( 29.8577, 51.3265, 5.10786, 0.68 ) }
    dend_1 { pt3dadd( 30.845, 52.5515, 4.62647, 0.91 ) }
    dend_1 { pt3dadd( 31.7445, 53.624, 4.09013, 0.68 ) }
    dend_1 { pt3dadd( 32.5351, 54.5643, 3.54681, 0.68 ) }
    dend_1 { pt3dadd( 33.4003, 55.6028, 2.87625, 0.68 ) }
    dend_1 { pt3dadd( 34.5983, 57.1279, 1.89386, 0.68 ) }
    dend_1 { pt3dadd( 35.5232, 58.4898, 1.06828, 0.68 ) }
    dend_1 { pt3dadd( 36.1761, 59.551, 0.499575, 0.68 ) }
    dend_1 { pt3dadd( 36.8962, 60.7904, -0.0690781, 0.68 ) }
    dend_1 { pt3dadd( 37.4741, 61.7828, -0.478088, 0.68 ) }
    dend_1 { pt3dadd( 38.092, 62.8266, -0.888869, 1.14 ) }
    dend_1 { pt3dadd( 38.984, 64.2857, -1.43593, 0.68 ) }
    dend_1 { pt3dadd( 40.0055, 65.9284, -1.93205, 0.68 ) }
    dend_1 { pt3dadd( 40.789, 67.1353, -2.22175, 0.68 ) }
    dend_1 { pt3dadd( 41.4916, 68.1751, -2.43156, 0.68 ) }
    dend_1 { pt3dadd( 41.9447, 68.8215, -2.57149, 1.36 ) }
    dend_1 { pt3dadd( 42.2263, 69.2016, -2.68288, 2.05 ) }
    dend_1 { pt3dadd( 43.4868, 70.8934, -3.25056, 0.45 ) }
    dend_1 { pt3dadd( 44.5167, 72.3417, -3.82908, 0.45 ) }
    dend_1 { pt3dadd( 44.9761, 73.026, -4.13085, 0.91 ) }
    dend_1 { pt3dadd( 45.7617, 74.2489, -4.66153, 0.68 ) }
    dend_1 { pt3dadd( 46.5535, 75.5046, -5.21191, 0.68 ) }
    dend_1 { pt3dadd( 47.0653, 76.2859, -5.56806, 0.45 ) }
    dend_1 { pt3dadd( 47.7064, 77.2201, -6.00617, 0.45 ) }
    dend_1 { pt3dadd( 48.4955, 78.3842, -6.54054, 0.45 ) }
    dend_1 { pt3dadd( 49.159, 79.3587, -6.95755, 0.91 ) }
    dend_1 { pt3dadd( 50.3546, 81.0958, -7.58803, 0.23 ) }
    dend_1 { pt3dadd( 51.2191, 82.3035, -7.96522, 0.23 ) }
    dend_1 { pt3dadd( 51.7675, 83.021, -8.19238, 1.59 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 33/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 5.49327, 40.1786, 0.0, 0.68 ) }
    axon_1 { pt3dadd( 7.52114, 55.0409, 0.0, 0.68 ) }
    axon_1 { pt3dadd( 9.54902, 69.9032, 0.0, 0.68 ) }
    // Section: dend_28, id: dend_28, parent: dend_26 (entry count 36/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 18.8358, 7.43556, 0.81465, 0.68 ) }
    dend_28 { pt3dadd( 20.0305, 7.89196, 1.81154, 0.68 ) }
    dend_28 { pt3dadd( 21.2526, 8.58099, 2.75146, 0.68 ) }
    dend_28 { pt3dadd( 22.0352, 9.2361, 3.32581, 0.68 ) }
    dend_28 { pt3dadd( 22.8639, 10.0848, 3.93621, 0.68 ) }
    dend_28 { pt3dadd( 23.8398, 11.1426, 4.66657, 0.68 ) }
    dend_28 { pt3dadd( 24.7086, 12.0872, 5.34249, 0.68 ) }
    dend_28 { pt3dadd( 25.9454, 13.3983, 6.34111, 0.68 ) }
    dend_28 { pt3dadd( 27.3596, 14.8774, 7.52159, 0.68 ) }
    dend_28 { pt3dadd( 28.351, 15.8315, 8.30636, 0.68 ) }
    dend_28 { pt3dadd( 29.3112, 16.6341, 8.99722, 0.68 ) }
    dend_28 { pt3dadd( 30.4942, 17.4445, 9.76779, 0.68 ) }
    dend_28 { pt3dadd( 31.829, 18.1982, 10.5866, 0.68 ) }
    dend_28 { pt3dadd( 33.2396, 18.9024, 11.4128, 0.68 ) }
    dend_28 { pt3dadd( 35.236, 19.8615, 12.5047, 0.68 ) }
    dend_28 { pt3dadd( 36.7861, 20.6334, 13.293, 0.68 ) }
    dend_28 { pt3dadd( 38.5251, 21.5187, 14.1233, 0.68 ) }
    dend_28 { pt3dadd( 39.4583, 21.9808, 14.5505, 0.68 ) }
    dend_28 { pt3dadd( 40.6282, 22.5485, 15.0934, 0.68 ) }
    dend_28 { pt3dadd( 41.5256, 22.9745, 15.5521, 0.68 ) }
    dend_28 { pt3dadd( 42.2406, 23.3093, 15.9849, 0.68 ) }
    dend_28 { pt3dadd( 43.5331, 23.8304, 16.7927, 0.68 ) }
    dend_28 { pt3dadd( 44.7621, 24.1974, 17.4399, 0.68 ) }
    dend_28 { pt3dadd( 46.7178, 24.7441, 18.244, 0.68 ) }
    dend_28 { pt3dadd( 48.1062, 25.1449, 18.7214, 0.68 ) }
    dend_28 { pt3dadd( 49.9677, 25.78, 19.2884, 0.68 ) }
    dend_28 { pt3dadd( 51.3829, 26.4137, 19.6868, 0.68 ) }
    dend_28 { pt3dadd( 53.4209, 27.5041, 20.2318, 0.68 ) }
    dend_28 { pt3dadd( 55.9293, 28.9171, 20.8657, 0.68 ) }
    dend_28 { pt3dadd( 57.5874, 29.8284, 21.2554, 0.68 ) }
    dend_28 { pt3dadd( 59.1154, 30.6411, 21.6202, 0.45 ) }
    dend_28 { pt3dadd( 61.0676, 31.7117, 22.1671, 0.45 ) }
    dend_28 { pt3dadd( 62.7532, 32.7214, 22.7847, 0.68 ) }
    dend_28 { pt3dadd( 63.7546, 33.3385, 23.2645, 0.68 ) }
    dend_28 { pt3dadd( 65.4833, 34.2515, 24.2052, 0.45 ) }
    dend_28 { pt3dadd( 66.7294, 34.858, 24.8867, 0.45 ) }
    dend_28 { pt3dadd( 68.1243, 35.5858, 25.6583, 0.45 ) }
    dend_28 { pt3dadd( 69.707, 36.5283, 26.5735, 0.45 ) }
    dend_28 { pt3dadd( 70.8289, 37.342, 27.2463, 0.45 ) }
    dend_28 { pt3dadd( 72.254, 38.6262, 28.1586, 0.45 ) }
    dend_28 { pt3dadd( 74.2282, 40.9182, 29.4569, 0.45 ) }
    dend_28 { pt3dadd( 75.4165, 42.8376, 30.2771, 0.45 ) }
    dend_28 { pt3dadd( 76.1788, 44.5485, 30.8386, 0.23 ) }
    dend_28 { pt3dadd( 76.7881, 46.4097, 31.3064, 0.23 ) }
    dend_28 { pt3dadd( 77.1928, 48.2097, 31.6604, 0.45 ) }
    dend_28 { pt3dadd( 77.7306, 51.7201, 32.2051, 0.45 ) }
    dend_28 { pt3dadd( 78.0531, 55.1753, 32.6805, 0.23 ) }
    dend_28 { pt3dadd( 78.1936, 57.1027, 32.9257, 0.23 ) }
    dend_28 { pt3dadd( 78.2446, 58.8197, 33.0986, 0.23 ) }
    dend_28 { pt3dadd( 78.2363, 60.2626, 33.2158, 0.23 ) }
    dend_28 { pt3dadd( 78.302, 62.5503, 33.3876, 0.23 ) }
    dend_28 { pt3dadd( 87.1607, 69.6143, 36.5821, 0.23 ) }
    dend_28 { pt3dadd( 96.5297, 75.9397, 39.8675, 0.23 ) }
    dend_28 { pt3dadd( 104.797, 83.7883, 42.8044, 0.23 ) }
    dend_28 { pt3dadd( 114.005, 90.8932, 44.6291, 0.23 ) }
    dend_28 { pt3dadd( 123.277, 98.1449, 44.4914, 0.23 ) }
    dend_28 { pt3dadd( 131.656, 106.384, 45.1875, 0.23 ) }
    dend_28 { pt3dadd( 139.506, 115.086, 44.0794, 0.23 ) }
    dend_28 { pt3dadd( 147.19, 123.963, 44.9426, 0.23 ) }
    dend_28 { pt3dadd( 154.178, 133.22, 46.9594, 0.23 ) }
    dend_28 { pt3dadd( 160.698, 142.591, 49.8331, 0.23 ) }
    // Section: dend_27, id: dend_27, parent: dend_26 (entry count 97/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( 18.8358, 7.43556, 0.81465, 0.68 ) }
    dend_27 { pt3dadd( 19.3035, 6.92728, 1.25576, 0.68 ) }
    dend_27 { pt3dadd( 19.9142, 6.34381, 1.92524, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_27 { pt3dadd( 20.381, 5.93746, 2.43718, 0.68 ) }
    dend_27 { pt3dadd( 20.9304, 5.44714, 3.03059, 0.68 ) }
    dend_27 { pt3dadd( 21.1729, 5.24296, 3.27905, 0.45 ) }
    dend_27 { pt3dadd( 21.5623, 4.92876, 3.65682, 0.45 ) }
    dend_27 { pt3dadd( 22.1244, 4.47523, 4.21435, 0.45 ) }
    dend_27 { pt3dadd( 22.6848, 4.02811, 4.75822, 0.68 ) }
    dend_27 { pt3dadd( 23.3879, 3.41909, 5.42858, 0.68 ) }
    dend_27 { pt3dadd( 24.1396, 2.73136, 6.11899, 0.68 ) }
    dend_27 { pt3dadd( 25.1914, 1.75905, 7.05375, 0.68 ) }
    dend_27 { pt3dadd( 25.9454, 1.04682, 7.71466, 0.68 ) }
    dend_27 { pt3dadd( 26.382, 0.621824, 8.13343, 0.45 ) }
    dend_27 { pt3dadd( 26.9033, 0.157595, 8.67297, 0.45 ) }
    dend_27 { pt3dadd( 27.1035, -0.00546376, 8.90436, 0.45 ) }
    dend_27 { pt3dadd( 27.5508, -0.33045, 9.48818, 0.45 ) }
    dend_27 { pt3dadd( 27.998, -0.595553, 10.1311, 0.68 ) }
    dend_27 { pt3dadd( 28.5818, -0.962271, 10.9932, 0.68 ) }
    dend_27 { pt3dadd( 29.1985, -1.44728, 11.8613, 0.45 ) }
    dend_27 { pt3dadd( 29.5777, -1.80168, 12.3361, 0.45 ) }
    dend_27 { pt3dadd( 30.0352, -2.29383, 12.8116, 0.68 ) }
    dend_27 { pt3dadd( 30.4374, -2.75265, 13.1095, 0.68 ) }
    dend_27 { pt3dadd( 31.312, -3.8329, 13.6392, 0.23 ) }
    dend_27 { pt3dadd( 32.1577, -4.95563, 14.025, 0.23 ) }
    dend_27 { pt3dadd( 32.7922, -5.83526, 14.228, 0.23 ) }
    dend_27 { pt3dadd( 33.4937, -6.7891, 14.3711, 0.23 ) }
    dend_27 { pt3dadd( 34.647, -8.34026, 14.4968, 0.23 ) }
    dend_27 { pt3dadd( 37.4946, -12.6072, 16.6328, 0.23 ) }
    dend_27 { pt3dadd( 39.9682, -17.2336, 18.4646, 0.23 ) }
    dend_27 { pt3dadd( 42.7517, -21.6657, 20.3316, 0.23 ) }
    dend_27 { pt3dadd( 46.0806, -25.7586, 22.0765, 0.23 ) }
    dend_27 { pt3dadd( 50.0102, -29.3056, 23.7658, 0.23 ) }
    dend_27 { pt3dadd( 53.8128, -32.5827, 26.1487, 0.23 ) }
    dend_27 { pt3dadd( 57.0107, -36.0562, 29.079, 0.23 ) }
    dend_27 { pt3dadd( 60.36, -38.8341, 32.5349, 0.23 ) }
    dend_27 { pt3dadd( 62.9562, -41.8398, 36.4211, 0.23 ) }
    dend_27 { pt3dadd( 64.6938, -44.8423, 40.762, 0.23 ) }
    // Section: dend_20, id: dend_20, parent: dend_18 (entry count 35/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 0.146145, -36.2332, 0.187949, 1.36 ) }
    dend_20 { pt3dadd( -2.1682, -37.4028, 0.113167, 1.36 ) }
    dend_20 { pt3dadd( -4.49267, -38.6181, -0.0414937, 1.14 ) }
    dend_20 { pt3dadd( -6.4901, -39.6654, -0.246727, 1.14 ) }
    dend_20 { pt3dadd( -9.28155, -41.205, -0.653749, 0.91 ) }
    dend_20 { pt3dadd( -10.3885, -41.875, -0.875415, 0.91 ) }
    dend_20 { pt3dadd( -11.8409, -42.8603, -1.25809, 0.91 ) }
    dend_20 { pt3dadd( -13.4012, -44.09, -1.87743, 0.91 ) }
    dend_20 { pt3dadd( -14.65, -45.4573, -2.65565, 0.91 ) }
    dend_20 { pt3dadd( -15.5857, -46.7478, -3.41509, 0.91 ) }
    dend_20 { pt3dadd( -16.5597, -48.3031, -4.29974, 0.91 ) }
    dend_20 { pt3dadd( -17.5244, -49.8616, -5.11259, 0.91 ) }
    dend_20 { pt3dadd( -18.5407, -51.4194, -5.85938, 0.91 ) }
    dend_20 { pt3dadd( -20.1132, -53.7185, -6.84853, 0.91 ) }
    dend_20 { pt3dadd( -22.0971, -56.3548, -7.85393, 0.91 ) }
    dend_20 { pt3dadd( -23.6142, -58.1358, -8.45572, 1.14 ) }
    dend_20 { pt3dadd( -26.1426, -60.7463, -9.18821, 1.36 ) }
    dend_20 { pt3dadd( -28.2316, -62.6836, -9.6385, 1.14 ) }
    dend_20 { pt3dadd( -30.5497, -64.6635, -10.0201, 1.14 ) }
    dend_20 { pt3dadd( -32.9164, -66.5401, -10.3136, 1.36 ) }
    dend_20 { pt3dadd( -34.2252, -67.5492, -10.4679, 1.14 ) }
    dend_20 { pt3dadd( -36.3629, -69.1751, -10.7228, 0.91 ) }
    dend_20 { pt3dadd( -37.7972, -70.2881, -10.8566, 0.91 ) }
    dend_20 { pt3dadd( -39.3335, -71.6165, -10.9344, 0.91 ) }
    dend_20 { pt3dadd( -40.5776, -72.9265, -10.9344, 0.91 ) }
    dend_20 { pt3dadd( -41.7641, -74.5565, -10.8632, 0.68 ) }
    dend_20 { pt3dadd( -43.2518, -77.0807, -10.7546, 0.91 ) }
    dend_20 { pt3dadd( -44.1246, -78.8163, -10.6812, 1.14 ) }
    dend_20 { pt3dadd( -45.1666, -81.1194, -10.5125, 1.14 ) }
    dend_20 { pt3dadd( -46.1782, -83.6426, -10.2246, 0.68 ) }
    dend_20 { pt3dadd( -46.9224, -85.6796, -9.96174, 0.68 ) }
    dend_20 { pt3dadd( -47.7603, -88.1176, -9.60169, 1.14 ) }
    dend_20 { pt3dadd( -48.281, -89.6163, -9.372, 0.68 ) }
    dend_20 { pt3dadd( -49.0836, -91.8317, -9.07092, 0.68 ) }
    dend_20 { pt3dadd( -50.1697, -94.6962, -8.74416, 0.68 ) }
    dend_20 { pt3dadd( -51.5456, -98.2003, -8.42541, 0.68 ) }
    dend_20 { pt3dadd( -52.3926, -100.423, -8.2943, 1.36 ) }
    dend_20 { pt3dadd( -53.2874, -102.813, -8.21875, 1.36 ) }
    dend_20 { pt3dadd( -54.352, -105.613, -8.25859, 1.14 ) }
    dend_20 { pt3dadd( -55.2109, -107.643, -8.36904, 0.91 ) }
    dend_20 { pt3dadd( -56.1064, -109.55, -8.53965, 0.91 ) }
    dend_20 { pt3dadd( -57.2529, -111.811, -8.81705, 0.91 ) }
    dend_20 { pt3dadd( -58.0308, -113.244, -9.04618, 1.59 ) }
    dend_20 { pt3dadd( -59.5304, -115.895, -9.51493, 0.91 ) }
    dend_20 { pt3dadd( -61.2674, -118.889, -10.0213, 1.14 ) }
    dend_20 { pt3dadd( -62.5026, -121.029, -10.3356, 1.14 ) }
    dend_20 { pt3dadd( -64.0698, -123.816, -10.6628, 1.82 ) }
    dend_20 { pt3dadd( -66.0213, -127.389, -10.9579, 1.36 ) }
    dend_20 { pt3dadd( -67.6075, -130.417, -11.1655, 1.36 ) }
    dend_20 { pt3dadd( -68.5689, -132.386, -11.2891, 1.82 ) }
    dend_20 { pt3dadd( -69.4099, -134.395, -11.3732, 0.91 ) }
    dend_20 { pt3dadd( -70.1508, -136.418, -11.3416, 0.45 ) }
    dend_20 { pt3dadd( -70.7157, -138.395, -11.18, 0.45 ) }
    dend_20 { pt3dadd( -70.9496, -139.694, -11.0009, 0.45 ) }
    dend_20 { pt3dadd( -71.1897, -141.742, -10.7338, 0.68 ) }
    dend_20 { pt3dadd( -71.3432, -143.505, -10.5707, 0.45 ) }
    dend_20 { pt3dadd( -71.4716, -145.142, -10.5, 0.45 ) }
    dend_20 { pt3dadd( -71.5754, -146.134, -10.5148, 0.45 ) }
    dend_20 { pt3dadd( -72.0103, -149.049, -10.6204, 0.45 ) }
    dend_20 { pt3dadd( -72.4094, -150.976, -10.6296, 0.23 ) }
    dend_20 { pt3dadd( -72.6146, -151.718, -10.5913, 0.23 ) }
    dend_20 { pt3dadd( -73.1209, -153.317, -10.4172, 0.23 ) }
    dend_20 { pt3dadd( -73.4865, -154.483, -10.209, 0.45 ) }
    dend_20 { pt3dadd( -74.0106, -156.211, -9.70608, 0.23 ) }
    dend_20 { pt3dadd( -74.2507, -157.134, -9.31768, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_20 { pt3dadd( -74.7138, -159.133, -8.25821, 0.23 ) }
    dend_20 { pt3dadd( -74.9582, -160.373, -7.52047, 0.23 ) }
    dend_20 { pt3dadd( -75.0604, -160.989, -7.12519, 0.45 ) }
    dend_20 { pt3dadd( -75.2914, -162.732, -5.96453, 0.23 ) }
    dend_20 { pt3dadd( -75.4164, -163.698, -5.36069, 0.45 ) }
    dend_20 { pt3dadd( -75.7919, -165.765, -4.26681, 0.23 ) }
    dend_20 { pt3dadd( -76.1699, -167.294, -3.60819, 0.23 ) }
    dend_20 { pt3dadd( -76.5361, -168.623, -3.07789, 0.45 ) }
    dend_20 { pt3dadd( -76.988, -170.085, -2.52821, 0.23 ) }
    dend_20 { pt3dadd( -77.7393, -172.232, -1.81019, 0.91 ) }
    dend_20 { pt3dadd( -78.9329, -175.379, -0.933325, 0.23 ) }
    dend_20 { pt3dadd( -79.7201, -177.381, -0.55343, 0.91 ) }
    // Section: dend_19, id: dend_19, parent: dend_18 (entry count 12/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 0.146145, -36.2332, 0.187949, 1.36 ) }
    dend_19 { pt3dadd( 0.204118, -36.6989, 0.947384, 1.36 ) }
    dend_19 { pt3dadd( 0.40787, -37.4948, 2.38859, 0.68 ) }
    dend_19 { pt3dadd( 0.645126, -38.1832, 3.58028, 0.68 ) }
    dend_19 { pt3dadd( 1.07083, -39.0777, 5.04227, 0.68 ) }
    dend_19 { pt3dadd( 1.48757, -39.7826, 6.05905, 0.68 ) }
    dend_19 { pt3dadd( 1.93245, -40.435, 6.93001, 0.45 ) }
    dend_19 { pt3dadd( 2.40607, -40.9303, 7.64141, 0.45 ) }
    dend_19 { pt3dadd( 2.9786, -41.3424, 8.24788, 0.68 ) }
    dend_19 { pt3dadd( 3.76902, -41.8708, 8.92725, 0.68 ) }
    dend_19 { pt3dadd( 4.70591, -42.5158, 9.6825, 0.68 ) }
    dend_19 { pt3dadd( 5.47566, -43.1189, 10.341, 0.68 ) }
    dend_19 { pt3dadd( 6.52493, -43.9902, 11.3435, 0.68 ) }
    dend_19 { pt3dadd( 7.53027, -44.9238, 12.4752, 0.68 ) }
    dend_19 { pt3dadd( 8.57807, -46.0697, 13.8698, 0.68 ) }
    dend_19 { pt3dadd( 9.19507, -46.8922, 14.8004, 0.68 ) }
    dend_19 { pt3dadd( 9.70029, -47.6871, 15.6076, 0.68 ) }
    dend_19 { pt3dadd( 10.2476, -48.6534, 16.4129, 0.68 ) }
    dend_19 { pt3dadd( 10.8786, -49.973, 17.3148, 0.68 ) }
    dend_19 { pt3dadd( 11.2627, -50.9488, 17.9225, 0.68 ) }
    dend_19 { pt3dadd( 11.7833, -52.4605, 18.812, 0.68 ) }
    dend_19 { pt3dadd( 12.2079, -53.888, 19.6146, 0.68 ) }
    dend_19 { pt3dadd( 12.6062, -55.2577, 20.3727, 0.68 ) }
    dend_19 { pt3dadd( 12.968, -56.497, 21.1095, 0.68 ) }
    dend_19 { pt3dadd( 13.3606, -57.5875, 21.8859, 0.68 ) }
    dend_19 { pt3dadd( 13.9079, -58.8398, 22.8583, 0.68 ) }
    dend_19 { pt3dadd( 14.2904, -59.6259, 23.5257, 0.68 ) }
    dend_19 { pt3dadd( 15.3659, -61.438, 25.313, 0.23 ) }
    dend_19 { pt3dadd( 15.8314, -62.0921, 26.0543, 0.23 ) }
    dend_19 { pt3dadd( 16.7115, -63.1329, 27.3662, 0.23 ) }
    dend_19 { pt3dadd( 17.7587, -64.2212, 28.7704, 0.23 ) }
    dend_19 { pt3dadd( 18.7472, -65.1437, 30.027, 0.23 ) }
    dend_19 { pt3dadd( 19.641, -65.9242, 31.1393, 0.23 ) }
    dend_19 { pt3dadd( 20.5269, -66.6359, 32.3041, 0.23 ) }
    dend_19 { pt3dadd( 21.5992, -67.5223, 33.7546, 0.23 ) }
    dend_19 { pt3dadd( 25.1982, -74.3729, 38.7261, 0.23 ) }
    dend_19 { pt3dadd( 28.2295, -81.3958, 43.8337, 0.23 ) }
    dend_19 { pt3dadd( 31.4329, -88.745, 48.3422, 0.23 ) }
    dend_19 { pt3dadd( 32.8461, -96.5716, 52.9623, 0.23 ) }
    dend_19 { pt3dadd( 35.133, -104.739, 56.5202, 0.23 ) }
    dend_19 { pt3dadd( 38.3092, -112.656, 59.9599, 0.23 ) }
    dend_19 { pt3dadd( 40.6468, -120.462, 64.2266, 0.23 ) }
    dend_19 { pt3dadd( 42.8845, -128.92, 67.0657, 0.23 ) }
    dend_19 { pt3dadd( 47.0655, -136.858, 69.09, 0.23 ) }
    dend_19 { pt3dadd( 50.8406, -144.938, 71.3391, 0.23 ) }
    dend_19 { pt3dadd( 54.6437, -153.172, 72.8697, 0.23 ) }
    dend_19 { pt3dadd( 58.7176, -161.413, 72.5747, 0.23 ) }
    dend_19 { pt3dadd( 62.0126, -169.973, 71.892, 0.23 ) }
    dend_19 { pt3dadd( 66.7008, -177.867, 72.4499, 0.23 ) }
    dend_19 { pt3dadd( 71.307, -185.643, 74.1571, 0.23 ) }
    dend_19 { pt3dadd( 77.0736, -191.852, 77.7335, 0.23 ) }
    // Section: dend_17, id: dend_17, parent: dend_15 (entry count 63/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 0.2817, -54.3987, 25.0376, 0.23 ) }
    dend_17 { pt3dadd( -0.103503, -54.7976, 26.4779, 0.23 ) }
    dend_17 { pt3dadd( -0.725949, -55.7012, 28.7441, 0.23 ) }
    dend_17 { pt3dadd( -1.11638, -56.7585, 30.605, 0.23 ) }
    dend_17 { pt3dadd( -1.26246, -57.9011, 31.8821, 0.23 ) }
    dend_17 { pt3dadd( -1.29154, -58.6864, 32.5661, 0.23 ) }
    dend_17 { pt3dadd( -1.35279, -59.731, 33.3163, 0.23 ) }
    dend_17 { pt3dadd( -1.35832, -60.5194, 33.7951, 0.23 ) }
    dend_17 { pt3dadd( -1.31828, -62.3911, 34.6336, 0.23 ) }
    dend_17 { pt3dadd( -1.18406, -65.1143, 35.5855, 0.23 ) }
    dend_17 { pt3dadd( -1.10652, -66.4197, 35.9829, 0.23 ) }
    dend_17 { pt3dadd( -0.937855, -69.2249, 36.7835, 0.23 ) }
    dend_17 { pt3dadd( -2.22369, -78.6117, 46.7339, 0.23 ) }
    dend_17 { pt3dadd( -4.53945, -85.1956, 58.5688, 0.23 ) }
    dend_17 { pt3dadd( -4.84115, -91.5878, 70.7271, 0.23 ) }
    dend_17 { pt3dadd( -6.60682, -96.8166, 83.3096, 0.23 ) }
    dend_17 { pt3dadd( -9.13831, -103.913, 94.7994, 0.23 ) }
    dend_17 { pt3dadd( -11.9218, -112.185, 105.41, 0.23 ) }
    dend_17 { pt3dadd( -16.2702, -121.195, 114.828, 0.23 ) }
    dend_17 { pt3dadd( -17.9822, -128.962, 126.032, 0.23 ) }
    dend_17 { pt3dadd( -18.5696, -137.919, 136.434, 0.23 ) }
    dend_17 { pt3dadd( -19.0756, -148.618, 145.04, 0.23 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 85/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 0.2817, -54.3987, 25.0376, 0.23 ) }
    dend_16 { pt3dadd( 0.632324, -55.9879, 26.0153, 0.23 ) }
    dend_16 { pt3dadd( 0.672547, -56.9226, 26.6069, 0.23 ) }
    dend_16 { pt3dadd( 0.697572, -57.8223, 27.2323, 0.68 ) }
    dend_16 { pt3dadd( 0.778678, -58.7597, 27.8799, 0.68 ) }
    dend_16 { pt3dadd( 0.856869, -59.7767, 28.5711, 0.45 ) }
    dend_16 { pt3dadd( 0.889355, -60.8841, 29.2963, 0.45 ) }
    dend_16 { pt3dadd( 0.874133, -62.0935, 30.0661, 0.45 ) }
    dend_16 { pt3dadd( 0.82694, -63.2794, 30.7132, 0.45 ) }
    dend_16 { pt3dadd( 0.751225, -64.8564, 31.3639, 0.45 ) }
    dend_16 { pt3dadd( 0.772108, -65.6613, 31.5389, 0.45 ) }
    dend_16 { pt3dadd( 0.97483, -66.8663, 31.5246, 0.45 ) }
    dend_16 { pt3dadd( 1.20866, -67.7985, 31.2781, 0.45 ) }
    dend_16 { pt3dadd( 1.68966, -69.4168, 30.6288, 0.45 ) }
    dend_16 { pt3dadd( 2.17984, -70.9644, 29.788, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_16 { pt3dadd( 2.71211, -72.3992, 28.804, 0.23 ) }
    dend_16 { pt3dadd( 3.01667, -73.0413, 28.3007, 0.23 ) }
    dend_16 { pt3dadd( 3.72918, -74.243, 27.2174, 0.23 ) }
    dend_16 { pt3dadd( 5.98431, -85.1205, 28.1237, 0.23 ) }
    dend_16 { pt3dadd( 8.4391, -95.5873, 31.0642, 0.23 ) }
    dend_16 { pt3dadd( 12.2584, -106.046, 31.5756, 0.23 ) }
    dend_16 { pt3dadd( 17.3829, -115.94, 31.3062, 0.23 ) }
    dend_16 { pt3dadd( 20.1604, -126.631, 29.8148, 0.23 ) }
    dend_16 { pt3dadd( 25.8703, -136.176, 29.1041, 0.23 ) }
    dend_16 { pt3dadd( 31.6502, -145.699, 29.466, 0.23 ) }
    dend_16 { pt3dadd( 37.5104, -154.995, 27.5997, 0.23 ) }
    dend_16 { pt3dadd( 45.7175, -162.393, 26.1391, 0.23 ) }
    dend_16 { pt3dadd( 54.2285, -169.555, 25.43, 0.23 ) }
    dend_16 { pt3dadd( 62.1864, -177.277, 24.3018, 0.23 ) }
    dend_16 { pt3dadd( 69.9678, -184.837, 21.7494, 0.23 ) }
    dend_16 { pt3dadd( 78.3381, -192.171, 21.1354, 0.23 ) }
    dend_16 { pt3dadd( 87.743, -198.057, 20.0689, 0.23 ) }
    // Section: dend_12, id: dend_12, parent: dend_8 (entry count 17/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -43.7511, 15.8242, 22.0275, 0.68 ) }
    dend_12 { pt3dadd( -44.1463, 16.3231, 22.5263, 0.68 ) }
    dend_12 { pt3dadd( -44.632, 16.9201, 23.0596, 0.45 ) }
    dend_12 { pt3dadd( -45.1524, 17.4791, 23.5569, 0.45 ) }
    dend_12 { pt3dadd( -45.5872, 17.8922, 23.9127, 0.45 ) }
    dend_12 { pt3dadd( -46.2847, 18.5548, 24.4834, 0.45 ) }
    dend_12 { pt3dadd( -46.8791, 19.1195, 24.9698, 0.45 ) }
    dend_12 { pt3dadd( -47.2251, 19.4716, 25.224, 0.45 ) }
    dend_12 { pt3dadd( -47.7668, 20.0193, 25.5689, 0.45 ) }
    dend_12 { pt3dadd( -48.2872, 20.465, 25.8371, 0.45 ) }
    dend_12 { pt3dadd( -51.0301, 24.1052, 29.4463, 0.45 ) }
    dend_12 { pt3dadd( -54.0761, 27.0742, 33.4096, 0.45 ) }
    dend_12 { pt3dadd( -56.909, 29.983, 37.5707, 0.45 ) }
    dend_12 { pt3dadd( -59.227, 33.3368, 41.7155, 0.45 ) }
    dend_12 { pt3dadd( -61.0637, 36.1593, 46.4549, 0.45 ) }
    dend_12 { pt3dadd( -63.1481, 37.9856, 51.5657, 0.45 ) }
    dend_12 { pt3dadd( -65.8183, 38.9349, 56.6421, 0.45 ) }
    dend_12 { pt3dadd( -68.5759, 39.8139, 61.6843, 0.45 ) }
    dend_12 { pt3dadd( -70.9548, 40.295, 66.9673, 0.45 ) }
    dend_12 { pt3dadd( -73.6409, 41.8726, 71.8762, 0.45 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 37/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -43.7511, 15.8242, 22.0275, 0.68 ) }
    dend_9 { pt3dadd( -44.5785, 16.284, 21.3041, 0.68 ) }
    dend_9 { pt3dadd( -45.7343, 17.0103, 20.2423, 0.68 ) }
    dend_9 { pt3dadd( -46.8358, 17.7592, 19.3071, 0.68 ) }
    dend_9 { pt3dadd( -47.3952, 18.1279, 18.8675, 0.68 ) }
    dend_9 { pt3dadd( -48.2899, 18.7086, 18.2401, 0.68 ) }
    dend_9 { pt3dadd( -49.2435, 19.3619, 17.6623, 0.68 ) }
    dend_9 { pt3dadd( -50.4729, 20.2693, 17.0285, 0.68 ) }
    dend_9 { pt3dadd( -52.1126, 21.4948, 16.2836, 0.68 ) }
    dend_9 { pt3dadd( -53.6088, 22.6062, 15.6548, 0.68 ) }
    dend_9 { pt3dadd( -55.4001, 23.8764, 14.9526, 0.68 ) }
    dend_9 { pt3dadd( -57.7994, 25.4718, 14.0803, 0.68 ) }
    dend_9 { pt3dadd( -59.256, 26.3279, 13.5699, 0.68 ) }
    dend_9 { pt3dadd( -60.0563, 26.7042, 13.2798, 0.68 ) }
    dend_9 { pt3dadd( -60.8031, 26.996, 13.0013, 0.68 ) }
    dend_9 { pt3dadd( -61.931, 27.3723, 12.5954, 0.68 ) }
    dend_9 { pt3dadd( -62.8706, 27.5991, 12.2955, 0.68 ) }
    dend_9 { pt3dadd( -64.1384, 27.8299, 11.9113, 0.68 ) }
    dend_9 { pt3dadd( -65.8513, 28.1445, 11.3966, 0.68 ) }
    dend_9 { pt3dadd( -68.1337, 28.6541, 10.6764, 0.68 ) }
    dend_9 { pt3dadd( -69.3925, 28.9989, 10.2332, 0.68 ) }
    dend_9 { pt3dadd( -71.6498, 29.7452, 9.28346, 0.68 ) }
    dend_9 { pt3dadd( -72.6497, 30.1258, 8.76104, 0.68 ) }
    dend_9 { pt3dadd( -73.7542, 30.6272, 8.04383, 0.68 ) }
    dend_9 { pt3dadd( -74.5861, 31.0332, 7.41582, 0.68 ) }
    dend_9 { pt3dadd( -75.4945, 31.4392, 6.66902, 0.68 ) }
    dend_9 { pt3dadd( -76.6205, 31.9167, 5.74075, 0.91 ) }
    dend_9 { pt3dadd( -77.649, 32.3656, 4.9338, 0.91 ) }
    dend_9 { pt3dadd( -79.7832, 33.2875, 3.5367, 0.91 ) }
    dend_9 { pt3dadd( -81.3242, 33.8894, 2.69861, 0.91 ) }
    dend_9 { pt3dadd( -82.7298, 34.3435, 2.05813, 0.68 ) }
    dend_9 { pt3dadd( -84.2478, 34.7539, 1.49332, 0.68 ) }
    dend_9 { pt3dadd( -85.894, 35.1746, 0.984388, 0.68 ) }
    dend_9 { pt3dadd( -86.685, 35.3977, 0.782762, 0.68 ) }
    dend_9 { pt3dadd( -88.2633, 35.9282, 0.45318, 0.91 ) }
    dend_9 { pt3dadd( -90.0576, 36.7031, 0.15367, 0.68 ) }
    dend_9 { pt3dadd( -91.7365, 37.5567, -0.053674, 0.68 ) }
    dend_9 { pt3dadd( -93.4878, 38.5203, -0.169057, 1.14 ) }
    dend_9 { pt3dadd( -95.2222, 39.6128, -0.199231, 0.68 ) }
    dend_9 { pt3dadd( -96.3357, 40.435, -0.175025, 0.68 ) }
    dend_9 { pt3dadd( -97.6037, 41.5234, -0.0909441, 1.14 ) }
    dend_9 { pt3dadd( -98.3993, 42.2607, -0.0378311, 0.91 ) }
    dend_9 { pt3dadd( -99.3553, 43.1207, -0.0319445, 0.68 ) }
    dend_9 { pt3dadd( -101.165, 44.5534, -0.179637, 0.68 ) }
    dend_9 { pt3dadd( -102.02, 45.142, -0.342705, 0.45 ) }
    dend_9 { pt3dadd( -103.051, 45.8179, -0.647783, 0.45 ) }
    dend_9 { pt3dadd( -104.522, 46.7451, -1.23786, 1.36 ) }
    dend_9 { pt3dadd( -105.825, 47.49, -1.87985, 0.68 ) }
    dend_9 { pt3dadd( -107.279, 48.3017, -2.69692, 0.91 ) }
    dend_9 { pt3dadd( -108.164, 48.7977, -3.21645, 0.68 ) }
    dend_9 { pt3dadd( -109.062, 49.3341, -3.71876, 0.68 ) }
    dend_9 { pt3dadd( -110.202, 50.0889, -4.33566, 0.91 ) }
    dend_9 { pt3dadd( -111.261, 50.8453, -4.88218, 0.68 ) }
    dend_9 { pt3dadd( -113.347, 52.4602, -5.92378, 0.68 ) }
    dend_9 { pt3dadd( -114.326, 53.2677, -6.40394, 0.68 ) }
    dend_9 { pt3dadd( -116.238, 54.9373, -7.28473, 0.68 ) }
    dend_9 { pt3dadd( -116.822, 55.4877, -7.53334, 0.68 ) }
    dend_9 { pt3dadd( -117.973, 56.7029, -7.99357, 1.59 ) }
    dend_9 { pt3dadd( -119.041, 58.0046, -8.38179, 0.45 ) }
    dend_9 { pt3dadd( -120.004, 59.3252, -8.68174, 0.91 ) }
    dend_9 { pt3dadd( -120.668, 60.3992, -8.84756, 0.45 ) }
    dend_9 { pt3dadd( -121.267, 61.5955, -8.93586, 0.45 ) }
    dend_9 { pt3dadd( -121.566, 62.2103, -8.94858, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_9()
}

proc basic_shape_9() {
    dend_9 { pt3dadd( -122.356, 63.9163, -8.92688, 0.91 ) }
    dend_9 { pt3dadd( -122.885, 64.9601, -8.9118, 0.45 ) }
    dend_9 { pt3dadd( -123.81, 66.5138, -8.92373, 0.45 ) }
    dend_9 { pt3dadd( -124.873, 67.985, -9.01716, 1.36 ) }
    dend_9 { pt3dadd( -125.729, 69.0606, -9.14004, 0.45 ) }
    dend_9 { pt3dadd( -126.667, 70.1915, -9.30504, 0.45 ) }
    dend_9 { pt3dadd( -127.674, 71.3152, -9.48932, 0.45 ) }
    dend_9 { pt3dadd( -128.915, 72.653, -9.67648, 0.91 ) }
    dend_9 { pt3dadd( -130.227, 73.9961, -9.76907, 0.45 ) }
    dend_9 { pt3dadd( -130.756, 74.5527, -9.75507, 0.45 ) }
    dend_9 { pt3dadd( -131.645, 75.5682, -9.65358, 0.45 ) }
    dend_9 { pt3dadd( -132.588, 76.7548, -9.47553, 1.14 ) }
    dend_9 { pt3dadd( -133.66, 78.293, -9.17897, 0.68 ) }
    dend_9 { pt3dadd( -134.588, 79.6972, -8.85504, 0.68 ) }
    dend_9 { pt3dadd( -135.665, 81.2513, -8.42859, 0.68 ) }
    dend_9 { pt3dadd( -136.263, 82.0188, -8.20042, 0.91 ) }
    dend_9 { pt3dadd( -137.569, 83.6011, -7.71841, 0.91 ) }
    dend_9 { pt3dadd( -138.349, 84.5051, -7.47556, 0.45 ) }
    dend_9 { pt3dadd( -139.298, 85.5255, -7.28912, 0.45 ) }
    dend_9 { pt3dadd( -140.294, 86.5272, -7.217, 0.91 ) }
    dend_9 { pt3dadd( -141.099, 87.2541, -7.27501, 0.45 ) }
    dend_9 { pt3dadd( -142.548, 88.4652, -7.56487, 0.45 ) }
    dend_9 { pt3dadd( -143.668, 89.3399, -7.9413, 1.36 ) }
    dend_9 { pt3dadd( -144.711, 90.134, -8.39322, 0.68 ) }
    dend_9 { pt3dadd( -145.906, 91.0425, -9.008, 0.68 ) }
    dend_9 { pt3dadd( -147.251, 92.1131, -9.83034, 0.68 ) }
    dend_9 { pt3dadd( -148.397, 93.0125, -10.6454, 0.45 ) }
    dend_9 { pt3dadd( -150.229, 94.344, -12.1206, 0.45 ) }
    dend_9 { pt3dadd( -151.388, 95.1218, -13.1169, 1.14 ) }
    dend_9 { pt3dadd( -152.426, 95.8019, -14.0729, 0.45 ) }
    dend_9 { pt3dadd( -153.362, 96.4642, -15.056, 0.45 ) }
    dend_9 { pt3dadd( -154.113, 97.1149, -16.0461, 0.45 ) }
    dend_9 { pt3dadd( -154.564, 97.6583, -16.9297, 0.45 ) }
    dend_9 { pt3dadd( -154.867, 98.1965, -17.8529, 0.45 ) }
    dend_9 { pt3dadd( -155.156, 98.7943, -18.8448, 0.45 ) }
    dend_9 { pt3dadd( -155.488, 99.5383, -19.9441, 1.36 ) }
    dend_9 { pt3dadd( -155.96, 100.597, -21.3372, 1.14 ) }
    dend_9 { pt3dadd( -156.26, 101.466, -22.3051, 0.45 ) }
    dend_9 { pt3dadd( -156.517, 102.421, -23.2665, 0.45 ) }
    dend_9 { pt3dadd( -156.733, 103.398, -24.2151, 0.23 ) }
    dend_9 { pt3dadd( -156.985, 104.643, -25.3775, 0.23 ) }
    dend_9 { pt3dadd( -157.04, 104.921, -25.6236, 0.23 ) }
    dend_9 { pt3dadd( -157.192, 105.928, -26.4005, 1.36 ) }
    dend_9 { pt3dadd( -157.255, 107.197, -27.2415, 0.45 ) }
    dend_9 { pt3dadd( -157.211, 107.873, -27.6521, 0.45 ) }
    dend_9 { pt3dadd( -157.078, 108.778, -28.1869, 0.91 ) }
    dend_9 { pt3dadd( -156.876, 109.95, -28.8835, 0.23 ) }
    dend_9 { pt3dadd( -156.702, 111.006, -29.5278, 0.23 ) }
    dend_9 { pt3dadd( -156.514, 112.164, -30.2379, 0.68 ) }
    dend_9 { pt3dadd( -156.3, 113.504, -31.0153, 0.45 ) }
    dend_9 { pt3dadd( -156.107, 114.953, -31.8642, 1.14 ) }
    dend_9 { pt3dadd( -156.046, 115.786, -32.3662, 0.23 ) }
    dend_9 { pt3dadd( -156.081, 116.96, -33.0739, 0.23 ) }
    dend_9 { pt3dadd( -156.2, 117.815, -33.5818, 0.68 ) }
    dend_9 { pt3dadd( -156.675, 119.552, -34.5671, 0.23 ) }
    dend_9 { pt3dadd( -157.026, 120.485, -35.0519, 0.23 ) }
    dend_9 { pt3dadd( -157.641, 121.741, -35.6545, 1.14 ) }
    dend_9 { pt3dadd( -158.781, 123.653, -36.4993, 0.23 ) }
    dend_9 { pt3dadd( -159.202, 124.245, -36.7386, 0.91 ) }
    dend_9 { pt3dadd( -160.329, 125.575, -37.2596, 0.23 ) }
    dend_9 { pt3dadd( -160.965, 126.218, -37.492, 0.91 ) }
    dend_9 { pt3dadd( -162.649, 127.765, -38.0072, 0.23 ) }
    dend_9 { pt3dadd( -163.664, 128.637, -38.3059, 1.14 ) }
    dend_9 { pt3dadd( -164.711, 129.479, -38.6196, 0.45 ) }
    dend_9 { pt3dadd( -165.782, 130.285, -38.962, 0.45 ) }
    dend_9 { pt3dadd( -166.506, 130.785, -39.2107, 0.91 ) }
    dend_9 { pt3dadd( -168.278, 131.951, -39.8552, 0.45 ) }
    dend_9 { pt3dadd( -169.467, 132.714, -40.326, 0.45 ) }
    dend_9 { pt3dadd( -170.302, 133.259, -40.713, 1.14 ) }
    dend_9 { pt3dadd( -171.778, 134.235, -41.461, 0.23 ) }
    dend_9 { pt3dadd( -173.199, 135.179, -42.2557, 0.23 ) }
    dend_9 { pt3dadd( -173.903, 135.61, -42.6936, 0.91 ) }
    dend_9 { pt3dadd( -174.895, 136.118, -43.3891, 0.91 ) }
    dend_9 { pt3dadd( -175.864, 136.498, -44.0883, 0.23 ) }
    dend_9 { pt3dadd( -176.44, 136.631, -44.5799, 0.91 ) }
    dend_9 { pt3dadd( -177.301, 136.665, -45.4657, 0.23 ) }
    dend_9 { pt3dadd( -178.005, 136.573, -46.2917, 0.23 ) }
    dend_9 { pt3dadd( -178.793, 136.395, -47.2963, 0.23 ) }
    dend_9 { pt3dadd( -179.502, 136.179, -48.2313, 0.91 ) }
    dend_9 { pt3dadd( -180.951, 135.717, -50.1457, 0.23 ) }
    dend_9 { pt3dadd( -181.52, 135.564, -50.8878, 0.68 ) }
    dend_9 { pt3dadd( -182.463, 135.386, -52.1325, 0.23 ) }
    dend_9 { pt3dadd( -183.438, 135.305, -53.4351, 0.23 ) }
    dend_9 { pt3dadd( -184.208, 135.276, -54.4738, 0.23 ) }
    dend_9 { pt3dadd( -184.83, 135.28, -55.3344, 1.59 ) }
    dend_9 { pt3dadd( -186.02, 135.415, -56.8381, 0.23 ) }
    dend_9 { pt3dadd( -186.857, 135.541, -57.886, 0.23 ) }
    dend_9 { pt3dadd( -187.367, 135.639, -58.503, 1.59 ) }
    // Section: dend_4, id: dend_4, parent: dend_2 (entry count 88/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -1.96358, 27.8762, -4.55295, 1.82 ) }
    dend_4 { pt3dadd( -2.53915, 29.5826, -5.11695, 1.82 ) }
    dend_4 { pt3dadd( -3.59048, 32.6996, -6.14717, 1.36 ) }
    dend_4 { pt3dadd( -4.22398, 34.5778, -6.76793, 1.36 ) }
    dend_4 { pt3dadd( -5.04614, 37.0154, -7.57357, 1.36 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 93/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -1.96358, 27.8762, -4.55295, 1.14 ) }
    dend_3 { pt3dadd( -2.60966, 28.9418, -5.68414, 1.14 ) }
    dend_3 { pt3dadd( -3.36849, 30.2382, -6.93811, 1.14 ) }
    dend_3 { pt3dadd( -3.9023, 31.1808, -7.86566, 1.14 ) }
    dend_3 { pt3dadd( -4.58075, 32.5088, -9.27978, 0.91 ) }
    dend_3 { pt3dadd( -5.07622, 33.6767, -10.615, 0.91 ) }
    dend_3 { pt3dadd( -5.46488, 34.7664, -11.9428, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_10()
}

proc basic_shape_10() {
    dend_3 { pt3dadd( -5.67141, 35.6519, -13.0268, 0.68 ) }
    dend_3 { pt3dadd( -5.73346, 36.1657, -13.7097, 0.68 ) }
    dend_3 { pt3dadd( -5.7335, 37.1665, -15.2824, 0.68 ) }
    dend_3 { pt3dadd( -5.67165, 37.7832, -16.4491, 0.68 ) }
    dend_3 { pt3dadd( -5.56673, 38.2916, -17.4127, 0.68 ) }
    dend_3 { pt3dadd( -5.37108, 39.212, -18.9468, 0.68 ) }
    dend_3 { pt3dadd( -5.25382, 40.0872, -20.2085, 0.68 ) }
    dend_3 { pt3dadd( -5.23659, 40.8381, -21.1737, 0.68 ) }
    dend_3 { pt3dadd( -5.31283, 41.6553, -22.1259, 0.68 ) }
    dend_3 { pt3dadd( -5.5861, 43.193, -23.8216, 0.68 ) }
    dend_3 { pt3dadd( -5.79719, 44.3264, -25.0161, 0.68 ) }
    dend_3 { pt3dadd( -6.06224, 45.4754, -26.1966, 0.68 ) }
    dend_3 { pt3dadd( -6.36022, 46.5319, -27.2536, 0.91 ) }
    dend_3 { pt3dadd( -6.74937, 47.6672, -28.3859, 0.91 ) }
    dend_3 { pt3dadd( -7.2155, 48.7959, -29.5801, 0.68 ) }
    dend_3 { pt3dadd( -7.89535, 50.0883, -31.0271, 0.91 ) }
    dend_3 { pt3dadd( -8.47591, 51.1978, -32.2066, 0.68 ) }
    dend_3 { pt3dadd( -8.97715, 52.2097, -33.22, 0.68 ) }
    dend_3 { pt3dadd( -9.55096, 53.4634, -34.4008, 0.68 ) }
    dend_3 { pt3dadd( -10.1122, 54.7984, -35.586, 0.68 ) }
    dend_3 { pt3dadd( -10.6134, 56.0708, -36.6313, 0.68 ) }
    dend_3 { pt3dadd( -11.2278, 57.7703, -37.9002, 0.68 ) }
    dend_3 { pt3dadd( -11.7369, 59.4586, -39.0714, 0.68 ) }
    dend_3 { pt3dadd( -12.2971, 61.6188, -40.5093, 0.45 ) }
    dend_3 { pt3dadd( -12.6663, 63.3949, -41.665, 0.45 ) }
    dend_3 { pt3dadd( -12.7717, 64.0759, -42.1098, 0.68 ) }
    dend_3 { pt3dadd( -12.9524, 65.8706, -43.3206, 0.45 ) }
    dend_3 { pt3dadd( -13.0302, 66.7605, -43.9426, 0.45 ) }
    dend_3 { pt3dadd( -13.0917, 67.7955, -44.6536, 1.82 ) }
    dend_3 { pt3dadd( -13.1613, 69.6402, -45.9731, 0.45 ) }
    dend_3 { pt3dadd( -13.2233, 70.7883, -46.8376, 0.45 ) }
    dend_3 { pt3dadd( -13.2746, 71.4403, -47.3375, 0.68 ) }
    dend_3 { pt3dadd( -13.4686, 73.1859, -48.6993, 0.45 ) }
    dend_3 { pt3dadd( -13.6401, 74.3321, -49.5902, 1.82 ) }
    dend_3 { pt3dadd( -13.9384, 75.7153, -50.7071, 0.45 ) }
    dend_3 { pt3dadd( -14.3573, 77.2483, -52.0135, 0.45 ) }
    dend_3 { pt3dadd( -14.4928, 77.6739, -52.4135, 0.45 ) }
    dend_3 { pt3dadd( -14.8953, 78.8431, -53.6386, 0.45 ) }
    dend_3 { pt3dadd( -15.2273, 79.8547, -54.7822, 1.59 ) }
    dend_3 { pt3dadd( -15.6475, 81.3318, -56.5791, 0.45 ) }
    dend_3 { pt3dadd( -15.9264, 82.4842, -58.0398, 0.45 ) }
    dend_3 { pt3dadd( -16.1241, 83.6471, -59.5794, 0.45 ) }
    dend_3 { pt3dadd( -16.2272, 84.6104, -60.8818, 1.59 ) }
    dend_3 { pt3dadd( -16.2775, 85.7188, -62.3761, 0.45 ) }
    dend_3 { pt3dadd( -16.2569, 86.6729, -63.6773, 0.45 ) }
    dend_3 { pt3dadd( -16.1744, 87.6769, -65.0284, 0.45 ) }
    dend_3 { pt3dadd( -16.0912, 88.4588, -66.0775, 0.45 ) }
    dend_3 { pt3dadd( -15.9975, 89.3249, -67.204, 0.45 ) }
    dend_3 { pt3dadd( -15.9272, 90.0032, -68.0728, 0.91 ) }
    dend_3 { pt3dadd( -15.7785, 91.4498, -69.7801, 0.45 ) }
    dend_3 { pt3dadd( -15.6627, 92.6581, -71.0567, 0.45 ) }
    dend_3 { pt3dadd( -15.5781, 93.6031, -72.0236, 0.45 ) }
    dend_3 { pt3dadd( -15.5537, 95.0949, -73.4433, 0.45 ) }
    dend_3 { pt3dadd( -15.5929, 95.6871, -73.9959, 0.91 ) }
    dend_3 { pt3dadd( -15.9066, 97.5698, -75.7806, 0.45 ) }
    dend_3 { pt3dadd( -16.3361, 98.9903, -77.1491, 0.45 ) }
    dend_3 { pt3dadd( -16.7208, 99.8192, -77.9867, 1.36 ) }
    dend_3 { pt3dadd( -17.6877, 101.352, -79.6656, 0.45 ) }
    dend_3 { pt3dadd( -18.6545, 102.575, -81.1288, 0.68 ) }
    dend_3 { pt3dadd( -19.5688, 103.551, -82.439, 0.45 ) }
    dend_3 { pt3dadd( -20.4643, 104.385, -83.7167, 1.36 ) }
    dend_3 { pt3dadd( -21.6671, 105.474, -85.4977, 0.45 ) }
    dend_3 { pt3dadd( -22.696, 106.48, -87.1832, 0.45 ) }
    dend_3 { pt3dadd( -23.7276, 107.637, -89.1912, 0.23 ) }
    dend_3 { pt3dadd( -24.5803, 108.861, -91.2553, 0.68 ) }
    dend_3 { pt3dadd( -25.1143, 109.915, -93.0207, 0.68 ) }
    dend_3 { pt3dadd( -25.4616, 111.176, -95.0541, 1.14 ) }
    dend_3 { pt3dadd( -25.5028, 112.334, -96.7844, 0.45 ) }
    dend_3 { pt3dadd( -25.2948, 113.848, -98.7893, 0.68 ) }
    dend_3 { pt3dadd( -24.9051, 115.307, -100.517, 0.45 ) }
    dend_3 { pt3dadd( -24.5368, 116.39, -101.647, 0.91 ) }
    dend_3 { pt3dadd( -24.1062, 117.629, -102.808, 0.45 ) }
    dend_3 { pt3dadd( -23.7427, 118.748, -103.753, 0.91 ) }
    dend_3 { pt3dadd( -23.3446, 120.596, -105.201, 0.45 ) }
    dend_3 { pt3dadd( -23.1965, 122.339, -106.554, 0.45 ) }
    dend_3 { pt3dadd( -23.2243, 122.791, -106.929, 0.68 ) }
    dend_3 { pt3dadd( -23.5022, 124.431, -108.366, 0.45 ) }
    dend_3 { pt3dadd( -23.6646, 125.044, -108.957, 0.91 ) }
    dend_3 { pt3dadd( -24.1722, 126.667, -110.651, 0.45 ) }
    dend_3 { pt3dadd( -24.6168, 127.995, -112.055, 0.91 ) }
    dend_3 { pt3dadd( -25.1448, 129.309, -113.485, 0.23 ) }
    dend_3 { pt3dadd( -25.2955, 129.692, -113.919, 0.45 ) }
    dend_3 { pt3dadd( -25.7918, 131.109, -115.591, 0.45 ) }
    dend_3 { pt3dadd( -26.2215, 132.663, -117.687, 0.45 ) }
    dend_3 { pt3dadd( -26.3178, 133.185, -118.491, 1.14 ) }
    dend_3 { pt3dadd( -26.4146, 134.239, -120.34, 0.45 ) }
    dend_3 { pt3dadd( -26.4646, 135.221, -122.267, 0.45 ) }
    dend_3 { pt3dadd( -26.5002, 136.008, -123.973, 0.91 ) }
    dend_3 { pt3dadd( -26.5157, 137.666, -127.934, 0.45 ) }
    dend_3 { pt3dadd( -26.4713, 138.64, -130.356, 0.45 ) }
    dend_3 { pt3dadd( -26.3466, 139.557, -132.599, 0.91 ) }
    dend_3 { pt3dadd( -26.1546, 140.49, -134.739, 0.91 ) }
    dend_3 { pt3dadd( -25.8812, 141.753, -137.433, 0.45 ) }
    dend_3 { pt3dadd( -25.743, 142.341, -138.547, 0.45 ) }
    dend_3 { pt3dadd( -25.5794, 143.034, -139.604, 1.14 ) }
    dend_3 { pt3dadd( -25.1997, 144.656, -141.741, 0.68 ) }
    dend_3 { pt3dadd( -24.7909, 146.355, -143.677, 0.45 ) }
    dend_3 { pt3dadd( -24.4359, 147.798, -145.159, 0.45 ) }
    dend_3 { pt3dadd( -24.3536, 148.208, -145.555, 0.45 ) }
    dend_3 { pt3dadd( -24.1875, 149.303, -146.593, 0.91 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_11()
}

proc basic_shape_11() {
    dend_3 { pt3dadd( -24.0555, 150.414, -147.677, 0.45 ) }
    dend_3 { pt3dadd( -23.9906, 151.629, -148.863, 0.91 ) }
    dend_3 { pt3dadd( -23.977, 153.255, -150.493, 0.23 ) }
    dend_3 { pt3dadd( -24.0257, 154.077, -151.369, 0.23 ) }
    dend_3 { pt3dadd( -24.1683, 155.005, -152.436, 0.23 ) }
    dend_3 { pt3dadd( -24.3388, 155.741, -153.315, 0.23 ) }
    dend_3 { pt3dadd( -24.707, 156.878, -154.6, 0.23 ) }
    dend_3 { pt3dadd( -25.0224, 157.704, -155.499, 0.23 ) }
    dend_3 { pt3dadd( -25.5993, 159.046, -156.823, 0.23 ) }
    dend_3 { pt3dadd( -26.1299, 160.318, -158.04, 0.23 ) }
    dend_3 { pt3dadd( -26.5386, 161.348, -159.047, 0.23 ) }
    dend_3 { pt3dadd( -26.7776, 162.133, -159.812, 0.68 ) }
    dend_3 { pt3dadd( -27.1086, 163.843, -161.498, 0.23 ) }
    dend_3 { pt3dadd( -27.2656, 165.339, -163.017, 0.23 ) }
    dend_3 { pt3dadd( -27.3162, 166.608, -164.393, 0.45 ) }
    dend_3 { pt3dadd( -27.3315, 167.798, -165.758, 0.91 ) }
    dend_3 { pt3dadd( -27.4184, 169.692, -168.043, 0.23 ) }
    dend_3 { pt3dadd( -27.5427, 170.822, -169.698, 0.23 ) }
    dend_3 { pt3dadd( -27.6451, 171.626, -170.932, 0.23 ) }
    dend_3 { pt3dadd( -27.7999, 172.829, -172.872, 0.23 ) }
    dend_3 { pt3dadd( -27.896, 173.321, -173.669, 0.45 ) }
    dend_3 { pt3dadd( -28.2737, 174.7, -176.052, 0.23 ) }
    dend_3 { pt3dadd( -29.3708, 177.253, -181.246, 0.23 ) }
    // Section: dend_11, id: dend_11, parent: dend_9 (entry count 23/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( -187.367, 135.639, -58.503, 0.23 ) }
    dend_11 { pt3dadd( -186.427, 135.742, -60.0864, 0.23 ) }
    dend_11 { pt3dadd( -185.446, 135.849, -61.7383, 0.68 ) }
    dend_11 { pt3dadd( -184.265, 135.978, -63.7263, 0.23 ) }
    dend_11 { pt3dadd( -183.076, 136.108, -65.7296, 0.23 ) }
    dend_11 { pt3dadd( -182.177, 136.207, -67.2437, 0.23 ) }
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 29/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -187.367, 135.639, -58.503, 0.45 ) }
    dend_10 { pt3dadd( -188.272, 135.867, -59.2502, 0.45 ) }
    dend_10 { pt3dadd( -189.314, 136.12, -60.0632, 0.45 ) }
    dend_10 { pt3dadd( -190.186, 136.309, -60.7159, 0.91 ) }
    dend_10 { pt3dadd( -191.373, 136.572, -61.5648, 0.23 ) }
    dend_10 { pt3dadd( -191.857, 136.696, -61.8946, 0.68 ) }
    dend_10 { pt3dadd( -192.871, 136.969, -62.581, 0.23 ) }
    dend_10 { pt3dadd( -193.562, 137.135, -63.0257, 0.23 ) }
    dend_10 { pt3dadd( -194.352, 137.286, -63.5394, 0.23 ) }
    dend_10 { pt3dadd( -194.85, 137.339, -63.8687, 1.14 ) }
    dend_10 { pt3dadd( -196.279, 137.459, -64.8231, 0.23 ) }
    dend_10 { pt3dadd( -196.792, 137.485, -65.1769, 0.91 ) }
    dend_10 { pt3dadd( -198.181, 137.513, -66.1618, 0.23 ) }
    dend_10 { pt3dadd( -199.817, 137.498, -67.3692, 0.23 ) }
    dend_10 { pt3dadd( -201.122, 137.419, -68.3724, 0.23 ) }
    // Section: dend_6, id: dend_6, parent: dend_4 (entry count 44/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -5.04614, 37.0154, -7.57357, 0.91 ) }
    dend_6 { pt3dadd( -5.36347, 38.0202, -7.26115, 0.91 ) }
    dend_6 { pt3dadd( -5.87798, 39.634, -6.76472, 0.91 ) }
    dend_6 { pt3dadd( -6.68707, 42.6952, -5.81007, 0.91 ) }
    dend_6 { pt3dadd( -6.96235, 43.9701, -5.39941, 0.91 ) }
    dend_6 { pt3dadd( -7.26579, 45.7641, -4.77851, 0.91 ) }
    dend_6 { pt3dadd( -7.49673, 47.5056, -4.13885, 0.91 ) }
    dend_6 { pt3dadd( -7.62827, 48.584, -3.7396, 0.91 ) }
    dend_6 { pt3dadd( -7.91635, 50.4524, -2.97071, 0.91 ) }
    dend_6 { pt3dadd( -8.20774, 51.6735, -2.3427, 0.91 ) }
    dend_6 { pt3dadd( -8.53267, 52.6748, -1.8223, 0.91 ) }
    dend_6 { pt3dadd( -8.89489, 53.6691, -1.38192, 0.68 ) }
    dend_6 { pt3dadd( -9.26107, 54.6291, -1.01702, 0.91 ) }
    dend_6 { pt3dadd( -10.0795, 56.8892, -0.225222, 0.91 ) }
    dend_6 { pt3dadd( -10.9777, 59.5578, 0.674103, 0.91 ) }
    dend_6 { pt3dadd( -11.6278, 62.1123, 1.50305, 0.91 ) }
    dend_6 { pt3dadd( -12.1908, 65.3603, 2.49388, 0.91 ) }
    dend_6 { pt3dadd( -12.3725, 67.3831, 3.02762, 0.91 ) }
    dend_6 { pt3dadd( -12.4063, 69.5077, 3.44881, 0.91 ) }
    dend_6 { pt3dadd( -12.3629, 70.702, 3.61021, 1.14 ) }
    dend_6 { pt3dadd( -12.249, 73.5068, 3.85777, 0.91 ) }
    dend_6 { pt3dadd( -12.236, 74.9905, 3.91647, 0.91 ) }
    dend_6 { pt3dadd( -12.2988, 77.2732, 3.83564, 0.91 ) }
    dend_6 { pt3dadd( -12.4284, 80.6639, 3.44889, 0.91 ) }
    dend_6 { pt3dadd( -12.5654, 83.3851, 2.96706, 0.91 ) }
    dend_6 { pt3dadd( -12.7165, 85.5166, 2.50158, 0.91 ) }
    dend_6 { pt3dadd( -12.8502, 86.8496, 2.18631, 0.68 ) }
    dend_6 { pt3dadd( -13.0187, 88.3183, 1.90813, 0.68 ) }
    dend_6 { pt3dadd( -13.2585, 90.3876, 1.70514, 0.91 ) }
    dend_6 { pt3dadd( -13.4003, 91.8517, 1.6962, 0.91 ) }
    dend_6 { pt3dadd( -13.5917, 94.1356, 1.77065, 1.36 ) }
    dend_6 { pt3dadd( -13.7171, 95.6471, 1.8152, 0.91 ) }
    dend_6 { pt3dadd( -13.9391, 97.9181, 1.84852, 0.91 ) }
    dend_6 { pt3dadd( -14.1065, 99.7852, 1.79209, 0.91 ) }
    dend_6 { pt3dadd( -14.3213, 102.53, 1.55309, 0.91 ) }
    dend_6 { pt3dadd( -14.4311, 104.908, 1.21243, 1.14 ) }
    dend_6 { pt3dadd( -14.4504, 107.254, 0.738893, 1.14 ) }
    dend_6 { pt3dadd( -14.4244, 108.448, 0.436864, 0.91 ) }
    dend_6 { pt3dadd( -14.2622, 112.149, -0.633596, 1.14 ) }
    dend_6 { pt3dadd( -14.1738, 113.877, -1.13836, 1.14 ) }
    dend_6 { pt3dadd( -14.0529, 116.325, -1.77728, 0.91 ) }
    dend_6 { pt3dadd( -13.9868, 117.72, -2.04039, 0.68 ) }
    dend_6 { pt3dadd( -13.9098, 119.068, -2.17512, 0.68 ) }
    dend_6 { pt3dadd( -13.8305, 120.835, -2.19441, 0.91 ) }
    dend_6 { pt3dadd( -13.791, 123.551, -1.9559, 1.14 ) }
    dend_6 { pt3dadd( -13.7899, 125.729, -1.60888, 1.14 ) }
    dend_6 { pt3dadd( -13.8294, 127.599, -1.20263, 0.45 ) }
    dend_6 { pt3dadd( -13.9284, 129.136, -0.795817, 0.45 ) }
    dend_6 { pt3dadd( -14.1335, 130.921, -0.281912, 0.68 ) }
    dend_6 { pt3dadd( -14.359, 132.402, 0.147845, 0.45 ) }
    dend_6 { pt3dadd( -14.4889, 133.137, 0.335221, 0.45 ) }
    dend_6 { pt3dadd( -14.7434, 134.581, 0.560026, 0.91 ) }
    dend_6 { pt3dadd( -14.9845, 135.89, 0.597675, 0.23 ) }
    dend_6 { pt3dadd( -15.1698, 136.872, 0.511895, 0.68 ) }
    dend_6 { pt3dadd( -15.3618, 138.1, 0.315135, 0.23 ) }
    dend_6 { pt3dadd( -15.6231, 140.037, -0.0943935, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_12()
}

proc basic_shape_12() {
    dend_6 { pt3dadd( -15.7908, 141.496, -0.459606, 0.23 ) }
    dend_6 { pt3dadd( -15.872, 142.406, -0.738281, 0.23 ) }
    dend_6 { pt3dadd( -15.9905, 143.884, -1.22819, 0.23 ) }
    dend_6 { pt3dadd( -16.0602, 144.832, -1.54766, 0.68 ) }
    dend_6 { pt3dadd( -16.1802, 146.574, -2.12398, 0.23 ) }
    dend_6 { pt3dadd( -16.2914, 149.029, -2.98925, 0.23 ) }
    dend_6 { pt3dadd( -16.3047, 150.582, -3.55542, 0.23 ) }
    dend_6 { pt3dadd( -17.9578, 158.902, -4.61634, 0.23 ) }
    dend_6 { pt3dadd( -18.119, 167.4, -5.52647, 0.23 ) }
    dend_6 { pt3dadd( -19.1919, 175.879, -5.6902, 0.23 ) }
    dend_6 { pt3dadd( -18.8759, 184.366, -4.71512, 0.23 ) }
    dend_6 { pt3dadd( -19.5355, 192.863, -5.38547, 0.23 ) }
    dend_6 { pt3dadd( -21.3758, 201.208, -5.15288, 0.23 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 13/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -5.04614, 37.0154, -7.57357, 0.68 ) }
    dend_5 { pt3dadd( -5.57768, 39.9616, -8.00398, 0.68 ) }
    dend_5 { pt3dadd( -6.23736, 42.8922, -8.40503, 0.68 ) }
    dend_5 { pt3dadd( -7.12493, 46.1558, -8.80495, 0.68 ) }
    dend_5 { pt3dadd( -8.22363, 49.7517, -9.13593, 0.68 ) }
    dend_5 { pt3dadd( -9.42998, 53.428, -9.25733, 0.68 ) }
    dend_5 { pt3dadd( -10.878, 57.5595, -9.15942, 0.68 ) }
    dend_5 { pt3dadd( -11.7112, 59.7373, -8.93141, 0.68 ) }
    dend_5 { pt3dadd( -12.7284, 62.0851, -8.49877, 0.91 ) }
    dend_5 { pt3dadd( -13.7361, 63.9881, -8.00432, 0.45 ) }
    dend_5 { pt3dadd( -15.3769, 66.6994, -7.10944, 0.45 ) }
    dend_5 { pt3dadd( -16.7512, 68.8299, -6.33742, 0.45 ) }
    dend_5 { pt3dadd( -17.7294, 70.4174, -5.82119, 0.45 ) }
    dend_5 { pt3dadd( -18.2141, 71.241, -5.63874, 0.45 ) }
    dend_5 { pt3dadd( -19.3314, 73.2047, -5.46678, 0.91 ) }
    dend_5 { pt3dadd( -20.7079, 75.6317, -5.47025, 0.45 ) }
    dend_5 { pt3dadd( -22.3117, 78.4715, -5.76158, 0.45 ) }
    dend_5 { pt3dadd( -23.4923, 80.6165, -6.10874, 0.45 ) }
    dend_5 { pt3dadd( -24.5115, 82.5345, -6.47747, 0.45 ) }
    dend_5 { pt3dadd( -25.5437, 84.5549, -6.91185, 0.45 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_30, dend_29, dend_24, dend_21, dend_14, dend_7, dend_0, dend_26, dend_25, dend_23, dend_22, dend_18, dend_15, dend_13, dend_8, dend_2, dend_1, dend_28, dend_27, dend_20, dend_19, dend_17, dend_16, dend_12, dend_9, dend_4, dend_3, dend_11, dend_10, dend_6, dend_5]}
    ModelViewParmSubset_2 = new SectionList()
    dend_30 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_30, dend_29, dend_24, dend_21, dend_14, dend_7, dend_0, dend_26, dend_25, dend_23, dend_22, dend_18, dend_15, dend_13, dend_8, dend_2, dend_1, dend_28, dend_27, dend_20, dend_19, dend_17, dend_16, dend_12, dend_9, dend_4, dend_3, dend_11, dend_10, dend_6, dend_5]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_30 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_29 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_25 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_23 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_22 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_13 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_1 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_28 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_27 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_20 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_19 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_17 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_16 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_12 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_9 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_3 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_6 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_5 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_24 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_0 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_26 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_14 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_21 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_2 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_18 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_7 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_4 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_8 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_15 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_11 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_10 OneSecGrp_SectionRef_32.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_26, dend_26, dend_26, dend_26, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_11, dend_11, dend_11, dend_11, dend_11, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_21 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_10()
}

proc subsets_10() {
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_11()
}

proc subsets_11() {
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_12()
}

proc subsets_12() {
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_13()
}

proc subsets_13() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cNAC_149_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cNAC_149_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cNAC_149_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cNAC_149_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_30 nseg = 13
    dend_29 nseg = 9
    dend_25 nseg = 11
    dend_23 nseg = 7
    dend_22 nseg = 7
    dend_13 nseg = 9
    dend_1 nseg = 5
    dend_28 nseg = 11
    dend_27 nseg = 5
    dend_20 nseg = 9
    dend_19 nseg = 9
    dend_17 nseg = 7
    dend_16 nseg = 9
    dend_12 nseg = 3
    dend_9 nseg = 11
    dend_3 nseg = 11
    dend_6 nseg = 9
    dend_5 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cNAC187_L6_LBC_9ab2498c23_0_0


