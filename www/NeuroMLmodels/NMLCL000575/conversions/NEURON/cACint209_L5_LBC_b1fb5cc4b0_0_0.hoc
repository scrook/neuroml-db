// Cell: cACint209_L5_LBC_b1fb5cc4b0_0_0
/*
{
  "id" : "cACint209_L5_LBC_b1fb5cc4b0_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-4.47353, -9.82937, -0.0150783, 3.11345", "-4.06901, -8.79368, -0.0135938, 5.39642", "-3.66449, -7.75799, -0.0121094, 6.72082", "-3.25998, -6.72231, -0.0106249, 7.70122", "-2.85546, -5.68662, -0.00914047, 8.43968", "-2.45095, -4.65093, -0.00765602, 9.25919", "-2.04643, -3.61524, -0.00617157, 10.0787", "-1.64192, -2.57956, -0.00468712, 10.8982", "-1.2374, -1.54387, -0.00320267, 11.7151", "-0.832884, -0.508183, -0.00171822, 12.3073", "-0.428368, 0.527504, -2.33766E-4, 12.0741", "-0.023852, 1.56319, 0.00125068, 11.8342", "0.380664, 2.59888, 0.00273513, 11.5616", "0.78518, 3.63457, 0.00421958, 11.0624", "1.1897, 4.67025, 0.00570403, 10.5822", "1.59421, 5.70594, 0.00718848, 10.0942", "1.99873, 6.74163, 0.00867293, 9.27653", "2.40324, 7.77731, 0.0101574, 7.88308", "2.80776, 8.813, 0.0116418, 6.37032", "3.21227, 9.84869, 0.0131263, 4.97817", "3.61679, 10.8844, 0.0146107, 4.57234" ]
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "0.0120471, -7.68767, 1.51098, 1.08", "2.75697, -12.3831, 1.09419, 1.08", "4.90984, -16.0658, 0.767291, 1.08", "6.39163, -18.6005, 0.542295, 1.08" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "-4.41795, -8.40967, -0.0190242, 1.08", "-3.80457, -8.99961, -0.0276716, 1.08", "-0.0117929, -12.2727, -0.0951661, 1.08", "1.5925, -13.7596, -0.123764, 1.08", "4.17103, -16.1708, -0.167232, 1.08", "8.6041, -20.5057, -0.239024, 1.08", "11.8725, -23.7824, -0.288101, 1.08", "12.0476, -23.9761, -0.290841, 1.08", "17.3804, -30.9687, -0.427579, 1.08", "18.9564, -33.407, -0.528292, 1.08", "20.2376, -35.818, -0.67323, 1.08", "21.5545, -39.7251, -0.956118, 1.08", "22.6262, -44.9694, -1.35793, 1.08", "23.1397, -49.5782, -1.73747, 1.08", "23.0892, -51.3524, -1.89348, 1.08", "22.9822, -53.5871, -2.06892, 1.08", "22.7669, -59.1548, -2.46389, 1.08", "22.8311, -62.4937, -2.66507, 1.08", "23.1949, -65.4265, -2.942, 1.08", "23.8225, -69.2838, -3.45003, 1.08", "24.8687, -74.4891, -4.24593, 1.08", "24.9787, -75.0639, -4.35226, 1.08", "25.7922, -78.8414, -5.1683, 1.08", "27.1059, -83.6088, -6.2506, 1.08", "28.1634, -87.291, -7.03003, 1.08", "30.0316, -93.038, -8.3334, 1.08", "30.927, -95.8557, -8.96998, 1.08", "31.3811, -97.4362, -9.29875, 1.08", "32.3879, -101.44, -10.0927, 1.08", "34.1507, -107.484, -11.1009, 1.08", "35.4212, -112.003, -11.9032, 0.81", "35.9163, -113.578, -12.1996, 0.81", "36.8161, -116.48, -12.8759, 0.81", "37.7263, -119.505, -13.6361, 0.81", "38.461, -122.536, -14.3983, 0.81", "39.5911, -127.552, -15.644, 0.81", "41.6879, -136.742, -17.979, 0.81", "42.9052, -141.007, -19.1383, 0.81", "44.2172, -145.041, -20.2012, 0.81", "45.7433, -149.328, -21.2327, 0.81", "45.8419, -149.569, -21.2926, 0.81", "48.1241, -154.274, -22.4763, 0.81", "49.4363, -156.968, -23.0778, 0.81", "53.2643, -163.626, -24.2742, 0.81", "55.9893, -167.932, -25.0622, 0.81", "57.8015, -170.612, -25.5885, 0.81", "57.9431, -170.837, -25.631, 0.81", "59.4869, -173.726, -26.0966, 0.81", "62.7697, -180.645, -27.3837, 0.81", "62.7875, -180.691, -27.3922, 0.81", "63.293, -183.172, -27.7611, 0.81", "63.539, -184.927, -27.9508, 0.81", "64.0469, -189.116, -28.3377, 0.81", "64.2165, -190.312, -28.4355, 0.81", "65.0695, -197.504, -29.0655, 0.81", "65.576, -201.117, -29.5583, 0.81", "66.2556, -205.195, -30.2378, 0.81", "67.2456, -211.153, -31.7102, 0.81", "67.8991, -214.747, -32.8587, 0.81", "68.6329, -218.644, -34.4024, 0.81", "69.5842, -223.532, -36.7431, 0.81", "69.5947, -223.584, -36.7712, 0.81", "70.3815, -228.876, -40.0908, 0.81", "70.6669, -231.642, -42.1057, 0.81", "70.7303, -234.095, -43.9506, 0.27" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-6.04795, -7.43117, 1.45098, 1.08", "-6.24826, -11.6866, -0.11891, 1.08", "-6.52541, -17.5745, -2.291, 1.35", "-6.97364, -27.0969, -5.8039, 1.35", "-7.14717, -30.7836, -7.16399, 1.35", "-7.16148, -31.0876, -7.27612, 1.35" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-2.31794, 6.75233, 2.93098, 1.89", "-4.55194, 7.83973, 2.93098, 1.89", "-7.61643, 9.33136, 2.93098, 1.89" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-0.377952, 8.23434, 1.46098, 1.41", "-2.83065, 9.2013, 2.25362, 1.41", "-5.35671, 10.1972, 3.06996, 1.23", "-7.87446, 11.1898, 3.88362, 1.23" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "4.75205, 10.7233, -2.91902, 1.11", "4.84704, 12.4486, -3.01723, 1.11", "5.70253, 17.0689, -3.3798, 1.11", "7.06159, 21.5234, -3.75052, 1.11", "8.27335, 24.0454, -3.94633, 1.11", "10.7899, 28.4863, -4.51909, 1.11", "13.7069, 33.5589, -5.38935, 1.11", "15.4602, 36.2532, -5.93652, 1.11", "19.0319, 41.1094, -7.13701, 1.67", "24.4347, 48.275, -9.15426, 1.11", "26.7153, 51.2922, -10.023, 1.11", "28.8372, 54.2008, -10.9077, 1.11", "31.0623, 57.5189, -11.9104, 1.11", "34.3006, 62.4757, -13.2737, 1.11", "37.2052, 66.9678, -14.6432, 1.11", "39.5186, 70.6599, -15.7715, 1.11", "42.3437, 74.9746, -16.9942, 1.11", "43.3838, 76.5526, -17.4362, 1.11", "47.3723, 82.7093, -19.2285, 1.11", "50.1003, 86.9264, -20.4072, 1.11", "50.8135, 88.0528, -20.7219, 1.11", "52.1781, 90.4331, -21.3585, 1.11", "54.874, 95.3241, -22.6952, 1.11", "57.9537, 101.074, -24.2752, 1.11", "59.937, 105.048, -25.388, 1.11", "62.1159, 109.112, -26.4777, 1.11", "64.1024, 112.675, -27.5279, 1.11", "65.8222, 115.858, -28.573, 1.06", "66.7738, 117.64, -29.278, 0.53", "67.4989, 119.363, -30.0227, 0.35", "68.4545, 122.219, -31.4355, 0.35", "68.5105, 122.432, -31.5521, 0.35", "69.1945, 126.644, -33.7463, 0.35", "69.3391, 127.988, -34.4714, 0.35", "69.5652, 130.226, -35.7663, 0.35", "69.9015, 133.254, -37.5008, 0.35", "70.1637, 135.191, -38.6275, 0.35", "70.686, 137.693, -40.1334, 0.35", "71.5215, 140.42, -41.7895, 0.35", "71.9338, 141.714, -42.531, 0.35", "72.4384, 143.294, -43.4108, 0.35", "73.0682, 145.525, -44.5801, 0.35", "73.5503, 147.381, -45.5155, 0.35", "73.9351, 148.761, -46.2242, 0.35", "74.1529, 149.705, -46.6278, 1.23", "74.2157, 150.007, -46.7776, 1.23", "74.5713, 151.865, -47.8444, 0.18", "74.9203, 153.187, -48.7469, 0.18", "75.2933, 154.17, -49.4638, 0.18", "75.8581, 155.464, -50.5024, 1.23", "76.4707, 156.58, -51.3495, 0.18", "76.7063, 156.961, -51.5823, 0.18", "78.4224, 159.148, -52.6351, 0.18", "78.8736, 159.668, -52.8733, 0.88", "79.1728, 159.979, -53.0123, 0.18", "80.8983, 161.656, -53.6785, 0.18", "82.4882, 163.231, -54.1236, 0.18", "84.8819, 165.552, -54.6024, 1.06", "85.137, 165.788, -54.6249, 1.06" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796,
    "numberInternalDivisions" : 9
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "3.61679, 10.8844, 0.0146107, 0.81", "9.07397, 24.8565, 0.0146107, 0.81", "14.5311, 38.8286, 0.0146107, 0.81" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "6.39163, -18.6005, 0.542295, 1.08", "9.72371, -18.4556, -0.0583132, 1.08", "16.2105, -17.5361, -0.882358, 1.08", "22.7492, -17.5289, -1.85515, 1.08", "29.1274, -17.9855, -3.52683, 1.08", "35.7155, -17.9426, -4.06934, 1.08", "42.2083, -17.0216, -4.8429, 1.08", "48.5609, -15.3068, -5.13513, 1.08", "55.0195, -14.2538, -4.25861, 1.08", "61.0947, -12.1852, -2.81437, 1.08", "67.1217, -9.7566, -1.88225, 1.08", "73.155, -7.217, -1.47201, 1.08", "79.0186, -4.33143, -1.14125, 1.08", "85.3618, -2.741, -1.94814, 1.08", "91.4226, -0.24503, -1.67141, 1.08", "97.1665, 2.86399, -1.71175, 1.08", "102.563, 6.44623, -2.30414, 1.08", "108.599, 9.00565, -2.1939, 1.08", "114.953, 10.3435, -1.02978, 1.08", "121.52, 10.8511, -0.482792, 1.08", "127.894, 11.7074, 1.02433, 1.08", "134.486, 11.4046, 1.41383, 1.08" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "6.39163, -18.6005, 0.542295, 1.08", "8.61047, -23.0369, 0.354878, 1.08", "10.9572, -27.4328, 0.00877365, 1.08", "13.8659, -32.0974, -0.589889, 1.08", "16.4023, -35.8775, -1.17737, 1.08", "20.2062, -41.5462, -2.0584, 0.81", "21.5578, -43.5605, -2.37145, 0.81", "23.7176, -46.5644, -2.94012, 0.81", "26.7139, -50.6055, -3.9585, 0.81", "26.7535, -50.6471, -3.9752, 0.81" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "70.7303, -234.095, -43.9506, 0.27", "82.4959, -238.6, -46.1698, 0.27", "98.4383, -244.704, -49.1767, 0.27" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "70.7303, -234.095, -43.9506, 0.27", "70.2925, -237.27, -46.4939, 0.27", "69.6562, -241.653, -50.1249, 0.27", "69.0322, -245.891, -53.5866, 0.27", "68.5451, -249.199, -56.2893, 0.27", "67.9151, -253.478, -59.7848, 0.27", "66.783, -261.167, -66.0657, 0.27", "66.7511, -261.338, -66.2127, 0.27", "66.542, -262.73, -67.3874, 0.27" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-7.16148, -31.0876, -7.27612, 1.08", "-9.53906, -33.3768, -7.75475, 1.08", "-12.7239, -36.4434, -8.3959, 1.08", "-16.0175, -39.6146, -9.05895, 1.08", "-20.9251, -44.3398, -10.0469, 1.08", "-23.3919, -46.7151, -10.5435, 1.08", "-26.1545, -49.375, -11.0996, 1.08" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "-7.16148, -31.0876, -7.27612, 0.27", "-8.20285, -33.334, -7.63845, 0.27", "-8.52861, -35.2571, -7.86417, 0.54", "-8.55547, -35.6983, -7.88456, 1.08", "-8.56014, -35.8546, -7.88843, 1.08", "-8.66518, -38.2307, -7.96805, 1.08", "-8.72861, -39.3286, -8.00814, 1.08", "-8.88997, -42.9666, -8.12761, 1.08", "-9.03808, -46.365, -8.32018, 1.08", "-9.042, -46.521, -8.33186, 1.08", "-8.98367, -49.3962, -8.59946, 1.08", "-8.84641, -50.9704, -8.78217, 1.08", "-8.79361, -52.143, -8.92748, 1.08", "-8.81932, -53.2568, -9.07455, 1.08", "-8.73716, -54.7794, -9.26099, 1.08", "-8.58593, -56.5901, -9.43185, 1.08", "-8.51795, -57.8427, -9.49757, 1.08", "-8.48949, -61.9667, -9.65607, 1.08", "-8.51872, -62.7565, -9.70789, 1.08", "-8.59387, -66.1975, -10.0407, 1.08", "-8.60666, -66.5449, -10.0813, 1.08", "-8.73777, -70.345, -10.5968, 1.08", "-8.77248, -72.6834, -10.9532, 1.08", "-8.61375, -75.0793, -11.3456, 1.08", "-8.56323, -78.7028, -12.0059, 1.08", "-8.56431, -78.8507, -12.036, 1.08", "-8.55963, -79.477, -12.1697, 1.08", "-8.50658, -81.6609, -12.6598, 1.08", "-8.40024, -86.6077, -13.6973, 1.08", "-8.46417, -90.4448, -14.3543, 1.08", "-8.56864, -93.5014, -14.7939, 1.08", "-8.63555, -95.7743, -15.0529, 1.08", "-8.63576, -95.809, -15.0555, 1.08", "-8.6182, -98.6213, -15.1557, 1.08", "-8.42667, -102.41, -15.1082, 1.08", "-8.1678, -105.482, -14.9659, 1.08", "-7.99768, -108.087, -14.7841, 0.81", "-7.81048, -110.81, -14.6195, 0.81", "-7.6875, -112.764, -14.5323, 0.81", "-7.17261, -118.328, -14.4987, 0.81", "-6.79315, -121.461, -14.5903, 0.81", "-6.66068, -122.54, -14.651, 0.81", "-6.29761, -125.75, -14.8103, 0.81", "-6.1023, -127.914, -14.8697, 0.81", "-5.74689, -134.263, -14.8497, 0.81", "-5.78211, -136.046, -14.8401, 0.81", "-5.79032, -136.202, -14.8392, 0.81", "-6.13112, -139.648, -14.8113, 0.81", "-6.54095, -142.278, -14.7459, 0.81", "-7.22821, -145.208, -14.6791, 0.81", "-8.23253, -148.54, -14.5341, 0.81", "-8.59539, -149.753, -14.4909, 0.81", "-9.3472, -152.463, -14.4202, 0.81", "-9.92375, -154.601, -14.3999, 0.81", "-10.7352, -157.501, -14.4107, 0.81", "-11.7568, -161.65, -14.3826, 0.81", "-12.5092, -164.854, -14.3147, 0.81", "-13.136, -167.621, -14.2961, 0.81", "-13.9625, -171.238, -14.2712, 0.81", "-14.3503, -173.049, -14.2669, 0.81", "-14.7383, -175.112, -14.2884, 0.81", "-15.2518, -177.858, -14.3819, 0.81", "-15.5211, -180.725, -14.4369, 0.81", "-15.5183, -181.796, -14.4376, 0.81", "-15.5016, -182.016, -14.432, 1.08", "-15.4831, -182.236, -14.4173, 1.08", "-15.1865, -185.028, -14.2251, 0.54", "-14.6046, -189.146, -13.9628, 0.54", "-14.2974, -191.358, -13.8506, 0.54", "-14.0009, -193.648, -13.7691, 0.54", "-13.8593, -195.151, -13.7135, 0.54", "-13.7459, -197.314, -13.6204, 0.54", "-13.7531, -198.71, -13.5244, 0.54", "-13.9081, -201.816, -13.2387, 0.54", "-14.0274, -203.288, -13.0841, 0.54", "-14.1592, -205.053, -12.896, 0.54", "-14.3362, -206.25, -12.7782, 0.54", "-14.8074, -208.878, -12.5213, 0.54", "-14.8147, -208.917, -12.5171, 0.54", "-14.9378, -209.547, -12.4371, 0.54", "-15.2985, -211.694, -12.1642, 0.54", "-15.6741, -214.412, -11.827, 0.54", "-16.2276, -218.254, -11.3914, 0.54", "-16.6538, -221.694, -11.0566, 0.54", "-16.8799, -223.604, -10.8658, 0.54", "-17.1796, -226.277, -10.6811, 0.54", "-17.2249, -226.744, -10.6625, 0.54", "-17.4193, -229.392, -10.6292, 0.54", "-17.783, -232.532, -10.7519, 0.54", "-18.1761, -236.11, -11.0365, 0.54", "-18.4912, -238.778, -11.3342, 0.54", "-18.8342, -241.313, -11.6591, 0.54", "-18.8933, -241.774, -11.7244, 0.54", "-19.2128, -244.63, -12.2498, 0.54" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-7.61643, 9.33136, 2.93098, 0.81", "-8.23047, 10.8951, 3.1036, 0.81", "-9.61548, 14.3461, 3.47788, 1.08", "-12.5319, 19.0653, 4.03559, 1.08", "-13.2892, 20.1001, 4.14685, 1.08", "-15.499, 23.3071, 4.38837, 1.08", "-15.5307, 23.3537, 4.39083, 1.08", "-17.9064, 26.5338, 4.46337, 1.08", "-21.4964, 31.3793, 4.42793, 1.08", "-22.998, 33.6663, 4.25414, 1.08", "-26.1793, 38.7967, 3.62029, 1.08", "-29.2278, 43.8342, 2.76263, 1.08", "-30.9686, 46.672, 2.22129, 1.08", "-33.4437, 50.725, 1.36379, 1.08", "-35.3426, 53.825, 0.644537, 1.08", "-35.562, 54.1022, 0.577166, 1.08", "-36.3969, 54.8656, 0.388023, 1.08", "-40.849, 58.354, -0.373003, 1.08", "-44.3625, 60.7681, -0.808454, 1.08", "-47.9175, 62.8064, -1.10702, 1.08", "-51.0882, 64.5183, -1.27127, 1.08", "-53.0324, 65.5502, -1.37719, 1.08", "-54.768, 66.6815, -1.50045, 1.08", "-57.6191, 68.8905, -1.71935, 1.08", "-59.978, 71.1072, -1.89804, 1.08", "-60.1509, 71.282, -1.91348, 1.08", "-63.3093, 74.8654, -2.24945, 1.08", "-67.766, 80.4062, -2.98029, 1.08", "-71.4716, 85.1229, -3.66792, 1.08", "-74.8038, 89.5255, -4.46477, 1.08", "-78.2443, 94.433, -5.40176, 1.08", "-81.8955, 99.9655, -6.46311, 1.08", "-85.1827, 105.436, -7.61055, 1.08", "-87.8251, 109.856, -8.67107, 1.08", "-89.2258, 112.497, -9.33783, 1.08", "-91.7445, 117.205, -10.4721, 1.08", "-94.1195, 122.235, -11.4927, 1.08", "-96.3895, 126.732, -12.2199, 0.81", "-98.1974, 129.886, -12.5149, 0.81", "-100.515, 133.706, -12.7438, 0.81", "-102.498, 136.498, -12.7824, 0.81", "-104.226, 138.603, -12.7896, 0.54", "-108.241, 143.075, -12.6058, 0.54", "-112.452, 147.419, -12.1451, 1.08", "-113.187, 148.168, -12.0382, 1.08", "-115.573, 150.465, -11.7492, 1.08", "-120.916, 155.739, -11.4194, 1.08" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-7.61643, 9.33136, 2.93098, 1.08", "-11.2536, 4.75691, -2.8478, 1.08", "-13.451, 2.01623, -6.18982, 0.81", "-16.1881, -1.85772, -11.0367, 1.08", "-17.6532, -4.08895, -13.8234, 1.08", "-19.1458, -6.36206, -16.6625, 1.08", "-21.3084, -9.6553, -20.7757, 1.08", "-22.3427, -11.583, -22.8754, 1.08", "-23.8854, -15.3097, -27.2341, 0.54", "-24.079, -15.7655, -27.8502, 0.54" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-7.87446, 11.1898, 3.88362, 0.53", "-9.58196, 11.3616, 3.75239, 0.53", "-13.4143, 11.7472, 3.45783, 0.53", "-13.9205, 11.7982, 3.41893, 0.53", "-16.233, 12.0308, 3.24118, 0.53", "-19.0242, 12.3117, 3.02666, 0.53", "-22.5617, 12.6676, 2.75477, 0.53", "-36.5507, 15.5595, -0.11134, 0.53", "-50.2265, 20.4372, -0.12799, 0.53", "-63.4728, 26.2952, 0.0861425, 0.53", "-75.2845, 33.8916, 3.18263, 0.53", "-87.9323, 40.5797, 5.12212, 0.53", "-100.573, 46.5357, 8.82997, 0.53", "-114.009, 50.3648, 12.8194, 0.53", "-127.574, 54.4685, 16.0034, 0.53", "-141.664, 57.4782, 18.0751, 0.53", "-156.205, 58.4691, 18.3974, 0.53", "-170.32, 61.4048, 20.409, 0.53", "-184.37, 64.7277, 22.2204, 0.53", "-198.22, 69.04, 23.0877, 0.53", "-212.679, 70.7055, 23.8577, 0.53", "-227.23, 71.3616, 23.2854, 0.53", "-241.495, 74.284, 23.5177, 0.53", "-255.34, 78.6525, 24.1206, 0.53", "-268.705, 84.0782, 25.542, 0.53", "-282.059, 88.7615, 28.739, 0.53", "-295.751, 91.9861, 32.4419, 0.53", "-308.492, 94.1528, 39.1383, 0.53", "-321.186, 93.4102, 46.2668, 0.53", "-333.442, 90.7002, 53.6454, 0.53" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 17
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-7.87446, 11.1898, 3.88362, 0.53", "-7.74364, 13.1987, 4.48305, 0.53", "-7.72234, 13.5258, 4.58063, 0.53", "-7.523, 16.5868, 5.494, 0.53", "-8.52437, 25.1667, 6.99274, 0.53", "-8.8232, 33.8599, 7.98585, 0.53", "-10.3161, 42.3386, 9.69819, 0.53", "-11.1664, 50.4817, 12.9638, 0.53", "-11.8672, 59.0632, 14.6171, 0.53", "-12.1899, 67.7316, 15.8237, 0.53", "-11.2485, 76.4124, 15.1904, 0.53", "-10.1467, 84.9713, 13.6473, 0.53", "-9.13244, 93.3995, 11.4094, 0.53", "-9.31729, 101.436, 7.78992, 0.53", "-8.79616, 109.699, 4.82606, 0.53", "-9.41051, 118.123, 2.43616, 0.53", "-10.5403, 126.264, -0.724763, 0.53", "-10.9789, 134.22, -4.51397, 0.53", "-13.1562, 142.295, -7.28849, 0.53", "-17.1313, 149.47, -10.7261, 0.53", "-20.5315, 156.667, -14.6907, 0.53", "-23.1113, 163.649, -19.5867, 0.53", "-24.1238, 170.761, -24.8402, 0.53", "-26.4546, 178.365, -28.7353, 0.53" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "85.137, 165.788, -54.6249, 0.18", "85.7337, 166.155, -54.5441, 0.18", "87.5042, 167.3, -54.2587, 0.18", "90.6473, 169.546, -53.7198, 0.53", "94.3134, 172.148, -53.2682, 0.53", "97.4328, 174.475, -52.9807, 0.35", "100.413, 176.658, -52.9211, 0.35", "100.823, 176.966, -52.9409, 0.35", "103.22, 178.877, -53.3401, 0.35", "106.357, 181.334, -54.2773, 0.35", "108.876, 182.854, -55.7456, 0.35", "111.785, 184.153, -57.9428, 0.35", "111.959, 184.22, -58.1025, 0.35", "113.774, 184.851, -60.1517, 0.18", "115.981, 185.463, -62.8705, 0.18", "120.066, 186.457, -68.4155, 0.18", "120.137, 186.469, -68.5153, 0.18", "122.025, 186.873, -71.1584, 0.53", "125.222, 187.521, -75.6759, 0.53" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "85.137, 165.788, -54.6249, 0.18", "85.2007, 166.729, -54.8274, 0.18", "85.5638, 172.095, -55.9817, 0.18" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "14.5311, 38.8286, 0.0146107, 0.54", "19.9883, 52.8007, 0.0146107, 0.54", "25.4455, 66.7728, 0.0146107, 0.54" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "134.486, 11.4046, 1.41383, 0.18", "145.077, 13.702, -2.97531, 0.18", "155.344, 17.9037, -6.47049, 0.18", "165.625, 23.1404, -7.70282, 0.18", "175.329, 29.4105, -7.06942, 0.18", "185.461, 34.6193, -4.67745, 0.18" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "134.486, 11.4046, 1.41383, 0.18", "143.673, 13.1206, 3.59386, 0.18", "152.497, 15.8927, 6.04773, 0.18", "160.66, 17.6991, 10.7523, 0.18", "168.747, 17.8731, 15.9489, 0.18", "176.574, 19.659, 21.2005, 0.18", "185.279, 21.7772, 24.6137, 0.18", "193.119, 25.0221, 28.9976, 0.18" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-26.1545, -49.375, -11.0996, 1.08", "-29.9748, -50.4624, -10.6855, 1.08", "-32.9792, -51.4016, -10.4519, 0.81", "-36.1969, -52.5018, -10.1894, 0.81", "-39.2172, -53.5344, -9.94302, 0.81", "-42.7377, -54.7381, -9.6558, 0.81", "-47.037, -56.2081, -9.30504, 0.81", "-48.6752, -56.8331, -9.2481, 0.81", "-51.2886, -57.7377, -9.2973, 0.81", "-60.0887, -62.5928, -8.4962, 0.81", "-68.8023, -67.4721, -7.13296, 0.81", "-78.0711, -70.5626, -4.33125, 0.81", "-86.5266, -74.8544, -0.833729, 0.81", "-94.705, -79.4245, 2.91655, 0.81", "-102.519, -85.3709, 4.8671, 0.81", "-108.682, -92.6131, 7.67892, 0.81", "-114.266, -100.076, 11.0109, 0.81", "-120.653, -107.033, 14.1002, 0.81", "-127.432, -113.676, 17.121, 0.81", "-134.479, -119.821, 20.6528, 0.81", "-143.191, -124.006, 23.629, 0.81", "-152.267, -126.871, 27.221, 0.81", "-161.232, -130.897, 29.6452, 0.81", "-170.767, -132.608, 32.8747, 0.81", "-180.614, -134.085, 35.1717, 0.81", "-190.52, -134.918, 37.5944, 0.81", "-200.095, -133.974, 41.1283, 0.81" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-26.1545, -49.375, -11.0996, 0.81", "-29.0051, -54.0053, -12.5751, 0.81", "-31.6008, -58.0927, -13.7879, 1.08", "-33.0252, -60.0985, -14.389, 1.08", "-34.8748, -62.982, -15.372, 1.08", "-35.8084, -64.569, -15.912, 1.08", "-38.6993, -69.3937, -17.5311, 1.08", "-38.8435, -69.6169, -17.5993, 1.08", "-40.802, -72.5349, -18.6666, 0.81", "-43.8641, -77.4154, -20.49, 0.54", "-45.7444, -80.8995, -21.7199, 1.08", "-48.5912, -87.1395, -23.6868, 1.08", "-49.7773, -90.5094, -24.6116, 1.08", "-50.4339, -93.3392, -25.2664, 0.81", "-50.7758, -96.2091, -25.6933, 0.81", "-50.9126, -99.2778, -25.8538, 1.08", "-50.5811, -104.667, -25.931, 1.08", "-50.0525, -108.424, -25.8384, 0.81", "-49.3716, -114.672, -25.6206, 0.54", "-49.2161, -118.146, -25.4489, 0.54", "-49.2515, -121.31, -25.331, 0.54", "-49.5334, -124.902, -25.2429, 0.54", "-49.9442, -127.588, -25.2082, 1.08", "-51.2667, -132.787, -25.2611, 1.08", "-54.7986, -142.896, -25.6916, 1.08", "-54.8982, -143.148, -25.7129, 1.08", "-56.8354, -147.574, -26.1487, 1.08", "-59.0903, -152.08, -26.5858, 1.08", "-61.2345, -156.173, -27.0279, 1.08", "-62.1097, -157.573, -27.2342, 0.81", "-62.2817, -157.782, -27.28, 0.81", "-63.206, -159.114, -27.5629, 0.81", "-64.9037, -162.066, -28.2426, 0.81", "-66.9301, -166.152, -29.2072, 0.81", "-69.4828, -171.54, -30.5072, 0.81", "-70.812, -174.486, -31.2449, 0.81", "-73.6252, -180.893, -32.851, 0.81", "-74.8666, -183.909, -33.6118, 1.08", "-76.3908, -187.977, -34.6126, 1.08", "-77.483, -190.987, -35.2674, 1.08", "-78.4699, -193.916, -35.7284, 0.27", "-80.1571, -198.174, -36.219, 0.27", "-81.0054, -199.932, -36.2954, 0.27", "-82.3624, -202.649, -36.2716, 0.54", "-83.5696, -205.427, -36.1625, 0.54", "-85.2302, -209.725, -35.9612, 0.54", "-85.4362, -210.227, -35.9424, 0.54", "-86.5377, -213.38, -35.8023, 0.54", "-87.8844, -218.173, -35.8031, 0.54", "-89.0849, -223.5, -36.0011, 0.54", "-90.4691, -230.165, -36.6179, 0.54", "-91.0876, -233.362, -37.0196, 0.54", "-91.9362, -237.841, -37.6843, 0.54", "-92.9631, -243.325, -38.6099, 0.54", "-94.0239, -248.709, -39.6322, 0.54", "-95.7221, -255.901, -41.243, 0.54", "-96.0036, -257.084, -41.5215, 0.54", "-97.441, -262.473, -42.8037, 0.54", "-98.4243, -265.743, -43.5787, 0.54", "-99.541, -269.415, -44.3422, 0.54", "-100.85, -274.28, -45.3171, 0.54", "-101.872, -278.394, -46.0842, 0.54", "-103.077, -283.202, -46.9837, 0.54", "-104.203, -287.579, -47.9499, 0.54", "-104.214, -287.627, -47.9608, 0.54", "-104.645, -290.56, -48.5766, 0.54" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-120.916, 155.739, -11.4194, 0.81", "-123.432, 158.498, -11.0544, 0.81", "-125.664, 160.535, -10.7169, 0.81", "-128.18, 162.663, -10.2467, 0.81", "-131.284, 164.832, -9.56452, 0.81", "-134.249, 166.958, -8.67699, 0.81", "-134.295, 166.993, -8.66, 0.81", "-137.557, 169.602, -7.27714, 0.81", "-140.489, 171.797, -5.88923, 0.81", "-143.664, 173.941, -4.24663, 0.81", "-148.053, 176.819, -1.73375, 0.81", "-151.517, 179.011, 0.280592, 0.81", "-158.289, 185.078, 4.51926, 0.81" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "-120.916, 155.739, -11.4194, 0.27", "-123.484, 159.906, -9.45889, 0.27", "-127.128, 165.821, -6.67635, 0.27", "-129.026, 168.901, -5.22751, 0.27" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-24.079, -15.7655, -27.8502, 0.54", "-24.8248, -18.9622, -28.5166, 0.54", "-25.687, -21.9268, -29.1115, 0.54", "-26.6771, -24.7112, -29.7157, 0.54", "-28.9327, -29.7068, -30.9514, 0.54", "-31.3464, -34.3647, -32.3262, 0.54", "-34.6444, -40.1827, -34.3991, 0.54", "-34.77, -40.3861, -34.4828, 0.54", "-37.0581, -43.8581, -36.0191, 0.54", "-40.9118, -49.4471, -38.5834, 0.54", "-43.7359, -53.0517, -40.3047, 0.54", "-46.3897, -56.3705, -42.2232, 0.54", "-48.2517, -58.7398, -43.8323, 0.54" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-24.079, -15.7655, -27.8502, 0.54", "-27.5766, -16.7548, -32.1089, 0.54", "-30.3472, -17.427, -34.9905, 0.81", "-32.3187, -17.9163, -36.7961, 0.81", "-39.5381, -19.8701, -42.9228, 0.81", "-43.7461, -21.0129, -46.1503, 0.81", "-47.5205, -22.1206, -48.9538, 0.81", "-53.0014, -23.6733, -52.6252, 0.81", "-56.4568, -24.708, -54.6986, 0.81", "-60.5169, -26.0374, -56.9868, 0.81", "-65.5807, -27.8287, -59.6196, 0.81", "-72.4419, -30.4632, -63.2705, 0.81", "-72.4794, -30.4781, -63.2903, 0.81", "-79.1062, -33.1806, -66.8863, 0.81", "-79.2726, -33.2464, -66.9812, 0.81", "-86.7441, -36.1402, -71.2129, 0.81" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "193.119, 25.0221, 28.9976, 0.27", "199.511, 26.1088, 32.007, 0.27", "205.869, 27.0131, 35.1528, 0.27" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "193.119, 25.0221, 28.9976, 0.27", "200.274, 26.9169, 32.3424, 0.27", "207.698, 27.47, 35.6393, 0.27" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-104.645, -290.56, -48.5766, 0.54", "-105.923, -298.732, -49.0279, 0.54", "-107.349, -307.702, -49.5942, 0.54", "-107.422, -308.193, -49.6135, 0.54", "-109.265, -317.438, -49.7394, 0.54", "-110.702, -323.297, -49.7552, 0.54", "-110.802, -323.634, -49.7503, 0.54", "-114.774, -334.479, -49.4581, 0.54", "-117.954, -342.329, -49.0511, 0.54", "-121.475, -350.588, -48.5488, 0.54", "-126.582, -361.048, -47.6213, 0.54", "-130.516, -368.046, -46.959, 0.54", "-134.865, -374.964, -46.3076, 0.54", "-138.665, -380.114, -45.8382, 0.54", "-143.937, -386.235, -45.4332, 0.54", "-149.82, -392.188, -45.308, 0.54", "-153.514, -395.097, -45.5011, 0.54", "-156.537, -397.019, -45.9604, 0.54", "-158.75, -398.124, -46.4906, 0.54", "-163.04, -399.91, -47.8705, 0.54", "-167.349, -401.492, -49.5521, 0.54", "-171.235, -403.066, -51.2411, 0.54", "-174.534, -404.609, -52.5321, 0.54", "-178.935, -406.811, -54.0956, 0.54", "-181.318, -408.232, -54.9604, 0.54", "-183.571, -409.829, -55.8185, 0.54", "-188.699, -413.862, -57.5157, 0.54", "-193.383, -417.861, -58.7499, 0.54", "-198.176, -422.276, -59.5573, 0.54", "-202.444, -426.607, -59.9461, 0.54", "-207.1, -431.959, -59.9645, 0.54", "-210.927, -436.954, -59.5361, 0.54", "-213.632, -440.855, -58.9783, 0.54", "-216.861, -445.985, -57.6478, 0.54", "-218.147, -448.492, -56.5575, 0.54", "-220.39, -453.299, -53.0069, 0.54", "-220.433, -453.622, -52.6303, 0.54" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-104.645, -290.56, -48.5766, 0.54", "-109.261, -295.19, -44.9355, 0.54", "-112.008, -297.945, -42.7691, 0.54" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_23", "dend_20", "dend_13", "dend_6", "dend_3", "dend_0", "dend_25", "dend_24", "dend_22", "dend_21", "dend_15", "dend_14", "dend_10", "dend_7", "dend_5", "dend_4", "dend_2", "dend_1", "dend_29", "dend_26", "dend_19", "dend_16", "dend_12", "dend_11", "dend_9", "dend_8", "dend_28", "dend_27", "dend_18", "dend_17" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_23", "dend_20", "dend_13", "dend_6", "dend_3", "dend_0", "dend_25", "dend_24", "dend_22", "dend_21", "dend_15", "dend_14", "dend_10", "dend_7", "dend_5", "dend_4", "dend_2", "dend_1", "dend_29", "dend_26", "dend_19", "dend_16", "dend_12", "dend_11", "dend_9", "dend_8", "dend_28", "dend_27", "dend_18", "dend_17" ]
  }, {
    "name" : "ModelViewParmSubset_5",
    "groups" : [ ],
    "sections" : [ "dend_23", "dend_20", "dend_13", "dend_6", "dend_3", "dend_0", "axon_0", "dend_25", "dend_24", "dend_22", "dend_21", "dend_15", "dend_14", "dend_10", "dend_7", "dend_5", "dend_4", "dend_2", "dend_1", "axon_1", "dend_29", "dend_26", "dend_19", "dend_16", "dend_12", "dend_11", "dend_9", "dend_8", "dend_28", "dend_27", "dend_18", "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_23", "dend_23", "dend_23", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_6", "dend_6", "dend_3", "dend_3", "dend_3", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_22", "dend_22", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "axon_1", "axon_1", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_11", "dend_11", "dend_11", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_28", "dend_28", "dend_27", "dend_27", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_17", "dend_17" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.993125",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.005611",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.068459995",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.517764",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "6.3E-5",
    "erev" : "-64.6017"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "3.45E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.077616",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.002099",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "1.13999995E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.26087198",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "2.0E-5",
    "erev" : "-69.78141"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.395881",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009986",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "5.0100003E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.009728",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "2.7999999E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cACint209_L5_LBC_b1fb5cc4b0_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_23, id: dend_23, parent: soma_0
create dend_23
public dend_23
// Section: dend_20, id: dend_20, parent: soma_0
create dend_20
public dend_20
// Section: dend_13, id: dend_13, parent: soma_0
create dend_13
public dend_13
// Section: dend_6, id: dend_6, parent: soma_0
create dend_6
public dend_6
// Section: dend_3, id: dend_3, parent: soma_0
create dend_3
public dend_3
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_25, id: dend_25, parent: dend_23
create dend_25
public dend_25
// Section: dend_24, id: dend_24, parent: dend_23
create dend_24
public dend_24
// Section: dend_22, id: dend_22, parent: dend_20
create dend_22
public dend_22
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_15, id: dend_15, parent: dend_13
create dend_15
public dend_15
// Section: dend_14, id: dend_14, parent: dend_13
create dend_14
public dend_14
// Section: dend_10, id: dend_10, parent: dend_6
create dend_10
public dend_10
// Section: dend_7, id: dend_7, parent: dend_6
create dend_7
public dend_7
// Section: dend_5, id: dend_5, parent: dend_3
create dend_5
public dend_5
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_29, id: dend_29, parent: dend_25
create dend_29
public dend_29
// Section: dend_26, id: dend_26, parent: dend_25
create dend_26
public dend_26
// Section: dend_19, id: dend_19, parent: dend_15
create dend_19
public dend_19
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_12, id: dend_12, parent: dend_10
create dend_12
public dend_12
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_9, id: dend_9, parent: dend_7
create dend_9
public dend_9
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_28, id: dend_28, parent: dend_26
create dend_28
public dend_28
// Section: dend_27, id: dend_27, parent: dend_26
create dend_27
public dend_27
// Section: dend_18, id: dend_18, parent: dend_16
create dend_18
public dend_18
// Section: dend_17, id: dend_17, parent: dend_16
create dend_17
public dend_17

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
objref ModelViewParmSubset_4
// Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, axon_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, axon_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
objref ModelViewParmSubset_5
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_33
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_23, dend_23, dend_23, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_13, dend_13, dend_13, dend_13, dend_13, dend_6, dend_6, dend_3, dend_3, dend_3, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, axon_1, axon_1, dend_29, dend_29, dend_29, dend_29, dend_29, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_28, dend_28, dend_27, dend_27, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_23(0), soma_0(0.49999957196365796)
    connect dend_20(0), soma_0(0.49999957196365796)
    connect dend_13(0), soma_0(0.49999957196365796)
    connect dend_6(0), soma_0(0.49999957196365796)
    connect dend_3(0), soma_0(0.49999957196365796)
    connect dend_0(0), soma_0(0.49999957196365796)
    connect axon_0(0), soma_0(1.0)
    connect dend_25(0), dend_23(1.0)
    connect dend_24(0), dend_23(1.0)
    connect dend_22(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_15(0), dend_13(1.0)
    connect dend_14(0), dend_13(1.0)
    connect dend_10(0), dend_6(1.0)
    connect dend_7(0), dend_6(1.0)
    connect dend_5(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_29(0), dend_25(1.0)
    connect dend_26(0), dend_25(1.0)
    connect dend_19(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_12(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_9(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_28(0), dend_26(1.0)
    connect dend_27(0), dend_26(1.0)
    connect dend_18(0), dend_16(1.0)
    connect dend_17(0), dend_16(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -4.47353, -9.82937, -0.0150783, 3.11345 ) }
    soma_0 { pt3dadd( -4.06901, -8.79368, -0.0135938, 5.39642 ) }
    soma_0 { pt3dadd( -3.66449, -7.75799, -0.0121094, 6.72082 ) }
    soma_0 { pt3dadd( -3.25998, -6.72231, -0.0106249, 7.70122 ) }
    soma_0 { pt3dadd( -2.85546, -5.68662, -0.00914047, 8.43968 ) }
    soma_0 { pt3dadd( -2.45095, -4.65093, -0.00765602, 9.25919 ) }
    soma_0 { pt3dadd( -2.04643, -3.61524, -0.00617157, 10.0787 ) }
    soma_0 { pt3dadd( -1.64192, -2.57956, -0.00468712, 10.8982 ) }
    soma_0 { pt3dadd( -1.2374, -1.54387, -0.00320267, 11.7151 ) }
    soma_0 { pt3dadd( -0.832884, -0.508183, -0.00171822, 12.3073 ) }
    soma_0 { pt3dadd( -0.428368, 0.527504, -2.33766E-4, 12.0741 ) }
    soma_0 { pt3dadd( -0.023852, 1.56319, 0.00125068, 11.8342 ) }
    soma_0 { pt3dadd( 0.380664, 2.59888, 0.00273513, 11.5616 ) }
    soma_0 { pt3dadd( 0.78518, 3.63457, 0.00421958, 11.0624 ) }
    soma_0 { pt3dadd( 1.1897, 4.67025, 0.00570403, 10.5822 ) }
    soma_0 { pt3dadd( 1.59421, 5.70594, 0.00718848, 10.0942 ) }
    soma_0 { pt3dadd( 1.99873, 6.74163, 0.00867293, 9.27653 ) }
    soma_0 { pt3dadd( 2.40324, 7.77731, 0.0101574, 7.88308 ) }
    soma_0 { pt3dadd( 2.80776, 8.813, 0.0116418, 6.37032 ) }
    soma_0 { pt3dadd( 3.21227, 9.84869, 0.0131263, 4.97817 ) }
    soma_0 { pt3dadd( 3.61679, 10.8844, 0.0146107, 4.57234 ) }
    // Section: dend_23, id: dend_23, parent: soma_0 (entry count 21/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( 0.0120471, -7.68767, 1.51098, 1.08 ) }
    dend_23 { pt3dadd( 2.75697, -12.3831, 1.09419, 1.08 ) }
    dend_23 { pt3dadd( 4.90984, -16.0658, 0.767291, 1.08 ) }
    dend_23 { pt3dadd( 6.39163, -18.6005, 0.542295, 1.08 ) }
    // Section: dend_20, id: dend_20, parent: soma_0 (entry count 25/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( -4.41795, -8.40967, -0.0190242, 1.08 ) }
    dend_20 { pt3dadd( -3.80457, -8.99961, -0.0276716, 1.08 ) }
    dend_20 { pt3dadd( -0.0117929, -12.2727, -0.0951661, 1.08 ) }
    dend_20 { pt3dadd( 1.5925, -13.7596, -0.123764, 1.08 ) }
    dend_20 { pt3dadd( 4.17103, -16.1708, -0.167232, 1.08 ) }
    dend_20 { pt3dadd( 8.6041, -20.5057, -0.239024, 1.08 ) }
    dend_20 { pt3dadd( 11.8725, -23.7824, -0.288101, 1.08 ) }
    dend_20 { pt3dadd( 12.0476, -23.9761, -0.290841, 1.08 ) }
    dend_20 { pt3dadd( 17.3804, -30.9687, -0.427579, 1.08 ) }
    dend_20 { pt3dadd( 18.9564, -33.407, -0.528292, 1.08 ) }
    dend_20 { pt3dadd( 20.2376, -35.818, -0.67323, 1.08 ) }
    dend_20 { pt3dadd( 21.5545, -39.7251, -0.956118, 1.08 ) }
    dend_20 { pt3dadd( 22.6262, -44.9694, -1.35793, 1.08 ) }
    dend_20 { pt3dadd( 23.1397, -49.5782, -1.73747, 1.08 ) }
    dend_20 { pt3dadd( 23.0892, -51.3524, -1.89348, 1.08 ) }
    dend_20 { pt3dadd( 22.9822, -53.5871, -2.06892, 1.08 ) }
    dend_20 { pt3dadd( 22.7669, -59.1548, -2.46389, 1.08 ) }
    dend_20 { pt3dadd( 22.8311, -62.4937, -2.66507, 1.08 ) }
    dend_20 { pt3dadd( 23.1949, -65.4265, -2.942, 1.08 ) }
    dend_20 { pt3dadd( 23.8225, -69.2838, -3.45003, 1.08 ) }
    dend_20 { pt3dadd( 24.8687, -74.4891, -4.24593, 1.08 ) }
    dend_20 { pt3dadd( 24.9787, -75.0639, -4.35226, 1.08 ) }
    dend_20 { pt3dadd( 25.7922, -78.8414, -5.1683, 1.08 ) }
    dend_20 { pt3dadd( 27.1059, -83.6088, -6.2506, 1.08 ) }
    dend_20 { pt3dadd( 28.1634, -87.291, -7.03003, 1.08 ) }
    dend_20 { pt3dadd( 30.0316, -93.038, -8.3334, 1.08 ) }
    dend_20 { pt3dadd( 30.927, -95.8557, -8.96998, 1.08 ) }
    dend_20 { pt3dadd( 31.3811, -97.4362, -9.29875, 1.08 ) }
    dend_20 { pt3dadd( 32.3879, -101.44, -10.0927, 1.08 ) }
    dend_20 { pt3dadd( 34.1507, -107.484, -11.1009, 1.08 ) }
    dend_20 { pt3dadd( 35.4212, -112.003, -11.9032, 0.81 ) }
    dend_20 { pt3dadd( 35.9163, -113.578, -12.1996, 0.81 ) }
    dend_20 { pt3dadd( 36.8161, -116.48, -12.8759, 0.81 ) }
    dend_20 { pt3dadd( 37.7263, -119.505, -13.6361, 0.81 ) }
    dend_20 { pt3dadd( 38.461, -122.536, -14.3983, 0.81 ) }
    dend_20 { pt3dadd( 39.5911, -127.552, -15.644, 0.81 ) }
    dend_20 { pt3dadd( 41.6879, -136.742, -17.979, 0.81 ) }
    dend_20 { pt3dadd( 42.9052, -141.007, -19.1383, 0.81 ) }
    dend_20 { pt3dadd( 44.2172, -145.041, -20.2012, 0.81 ) }
    dend_20 { pt3dadd( 45.7433, -149.328, -21.2327, 0.81 ) }
    dend_20 { pt3dadd( 45.8419, -149.569, -21.2926, 0.81 ) }
    dend_20 { pt3dadd( 48.1241, -154.274, -22.4763, 0.81 ) }
    dend_20 { pt3dadd( 49.4363, -156.968, -23.0778, 0.81 ) }
    dend_20 { pt3dadd( 53.2643, -163.626, -24.2742, 0.81 ) }
    dend_20 { pt3dadd( 55.9893, -167.932, -25.0622, 0.81 ) }
    dend_20 { pt3dadd( 57.8015, -170.612, -25.5885, 0.81 ) }
    dend_20 { pt3dadd( 57.9431, -170.837, -25.631, 0.81 ) }
    dend_20 { pt3dadd( 59.4869, -173.726, -26.0966, 0.81 ) }
    dend_20 { pt3dadd( 62.7697, -180.645, -27.3837, 0.81 ) }
    dend_20 { pt3dadd( 62.7875, -180.691, -27.3922, 0.81 ) }
    dend_20 { pt3dadd( 63.293, -183.172, -27.7611, 0.81 ) }
    dend_20 { pt3dadd( 63.539, -184.927, -27.9508, 0.81 ) }
    dend_20 { pt3dadd( 64.0469, -189.116, -28.3377, 0.81 ) }
    dend_20 { pt3dadd( 64.2165, -190.312, -28.4355, 0.81 ) }
    dend_20 { pt3dadd( 65.0695, -197.504, -29.0655, 0.81 ) }
    dend_20 { pt3dadd( 65.576, -201.117, -29.5583, 0.81 ) }
    dend_20 { pt3dadd( 66.2556, -205.195, -30.2378, 0.81 ) }
    dend_20 { pt3dadd( 67.2456, -211.153, -31.7102, 0.81 ) }
    dend_20 { pt3dadd( 67.8991, -214.747, -32.8587, 0.81 ) }
    dend_20 { pt3dadd( 68.6329, -218.644, -34.4024, 0.81 ) }
    dend_20 { pt3dadd( 69.5842, -223.532, -36.7431, 0.81 ) }
    dend_20 { pt3dadd( 69.5947, -223.584, -36.7712, 0.81 ) }
    dend_20 { pt3dadd( 70.3815, -228.876, -40.0908, 0.81 ) }
    dend_20 { pt3dadd( 70.6669, -231.642, -42.1057, 0.81 ) }
    dend_20 { pt3dadd( 70.7303, -234.095, -43.9506, 0.27 ) }
    // Section: dend_13, id: dend_13, parent: soma_0 (entry count 90/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -6.04795, -7.43117, 1.45098, 1.08 ) }
    dend_13 { pt3dadd( -6.24826, -11.6866, -0.11891, 1.08 ) }
    dend_13 { pt3dadd( -6.52541, -17.5745, -2.291, 1.35 ) }
    dend_13 { pt3dadd( -6.97364, -27.0969, -5.8039, 1.35 ) }
    dend_13 { pt3dadd( -7.14717, -30.7836, -7.16399, 1.35 ) }
    dend_13 { pt3dadd( -7.16148, -31.0876, -7.27612, 1.35 ) }
    // Section: dend_6, id: dend_6, parent: soma_0 (entry count 96/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -2.31794, 6.75233, 2.93098, 1.89 ) }
    dend_6 { pt3dadd( -4.55194, 7.83973, 2.93098, 1.89 ) }
    dend_6 { pt3dadd( -7.61643, 9.33136, 2.93098, 1.89 ) }
    // Section: dend_3, id: dend_3, parent: soma_0 (entry count 99/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -0.377952, 8.23434, 1.46098, 1.41 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_3 { pt3dadd( -2.83065, 9.2013, 2.25362, 1.41 ) }
    dend_3 { pt3dadd( -5.35671, 10.1972, 3.06996, 1.23 ) }
    dend_3 { pt3dadd( -7.87446, 11.1898, 3.88362, 1.23 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 3/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 4.75205, 10.7233, -2.91902, 1.11 ) }
    dend_0 { pt3dadd( 4.84704, 12.4486, -3.01723, 1.11 ) }
    dend_0 { pt3dadd( 5.70253, 17.0689, -3.3798, 1.11 ) }
    dend_0 { pt3dadd( 7.06159, 21.5234, -3.75052, 1.11 ) }
    dend_0 { pt3dadd( 8.27335, 24.0454, -3.94633, 1.11 ) }
    dend_0 { pt3dadd( 10.7899, 28.4863, -4.51909, 1.11 ) }
    dend_0 { pt3dadd( 13.7069, 33.5589, -5.38935, 1.11 ) }
    dend_0 { pt3dadd( 15.4602, 36.2532, -5.93652, 1.11 ) }
    dend_0 { pt3dadd( 19.0319, 41.1094, -7.13701, 1.67 ) }
    dend_0 { pt3dadd( 24.4347, 48.275, -9.15426, 1.11 ) }
    dend_0 { pt3dadd( 26.7153, 51.2922, -10.023, 1.11 ) }
    dend_0 { pt3dadd( 28.8372, 54.2008, -10.9077, 1.11 ) }
    dend_0 { pt3dadd( 31.0623, 57.5189, -11.9104, 1.11 ) }
    dend_0 { pt3dadd( 34.3006, 62.4757, -13.2737, 1.11 ) }
    dend_0 { pt3dadd( 37.2052, 66.9678, -14.6432, 1.11 ) }
    dend_0 { pt3dadd( 39.5186, 70.6599, -15.7715, 1.11 ) }
    dend_0 { pt3dadd( 42.3437, 74.9746, -16.9942, 1.11 ) }
    dend_0 { pt3dadd( 43.3838, 76.5526, -17.4362, 1.11 ) }
    dend_0 { pt3dadd( 47.3723, 82.7093, -19.2285, 1.11 ) }
    dend_0 { pt3dadd( 50.1003, 86.9264, -20.4072, 1.11 ) }
    dend_0 { pt3dadd( 50.8135, 88.0528, -20.7219, 1.11 ) }
    dend_0 { pt3dadd( 52.1781, 90.4331, -21.3585, 1.11 ) }
    dend_0 { pt3dadd( 54.874, 95.3241, -22.6952, 1.11 ) }
    dend_0 { pt3dadd( 57.9537, 101.074, -24.2752, 1.11 ) }
    dend_0 { pt3dadd( 59.937, 105.048, -25.388, 1.11 ) }
    dend_0 { pt3dadd( 62.1159, 109.112, -26.4777, 1.11 ) }
    dend_0 { pt3dadd( 64.1024, 112.675, -27.5279, 1.11 ) }
    dend_0 { pt3dadd( 65.8222, 115.858, -28.573, 1.06 ) }
    dend_0 { pt3dadd( 66.7738, 117.64, -29.278, 0.53 ) }
    dend_0 { pt3dadd( 67.4989, 119.363, -30.0227, 0.35 ) }
    dend_0 { pt3dadd( 68.4545, 122.219, -31.4355, 0.35 ) }
    dend_0 { pt3dadd( 68.5105, 122.432, -31.5521, 0.35 ) }
    dend_0 { pt3dadd( 69.1945, 126.644, -33.7463, 0.35 ) }
    dend_0 { pt3dadd( 69.3391, 127.988, -34.4714, 0.35 ) }
    dend_0 { pt3dadd( 69.5652, 130.226, -35.7663, 0.35 ) }
    dend_0 { pt3dadd( 69.9015, 133.254, -37.5008, 0.35 ) }
    dend_0 { pt3dadd( 70.1637, 135.191, -38.6275, 0.35 ) }
    dend_0 { pt3dadd( 70.686, 137.693, -40.1334, 0.35 ) }
    dend_0 { pt3dadd( 71.5215, 140.42, -41.7895, 0.35 ) }
    dend_0 { pt3dadd( 71.9338, 141.714, -42.531, 0.35 ) }
    dend_0 { pt3dadd( 72.4384, 143.294, -43.4108, 0.35 ) }
    dend_0 { pt3dadd( 73.0682, 145.525, -44.5801, 0.35 ) }
    dend_0 { pt3dadd( 73.5503, 147.381, -45.5155, 0.35 ) }
    dend_0 { pt3dadd( 73.9351, 148.761, -46.2242, 0.35 ) }
    dend_0 { pt3dadd( 74.1529, 149.705, -46.6278, 1.23 ) }
    dend_0 { pt3dadd( 74.2157, 150.007, -46.7776, 1.23 ) }
    dend_0 { pt3dadd( 74.5713, 151.865, -47.8444, 0.18 ) }
    dend_0 { pt3dadd( 74.9203, 153.187, -48.7469, 0.18 ) }
    dend_0 { pt3dadd( 75.2933, 154.17, -49.4638, 0.18 ) }
    dend_0 { pt3dadd( 75.8581, 155.464, -50.5024, 1.23 ) }
    dend_0 { pt3dadd( 76.4707, 156.58, -51.3495, 0.18 ) }
    dend_0 { pt3dadd( 76.7063, 156.961, -51.5823, 0.18 ) }
    dend_0 { pt3dadd( 78.4224, 159.148, -52.6351, 0.18 ) }
    dend_0 { pt3dadd( 78.8736, 159.668, -52.8733, 0.88 ) }
    dend_0 { pt3dadd( 79.1728, 159.979, -53.0123, 0.18 ) }
    dend_0 { pt3dadd( 80.8983, 161.656, -53.6785, 0.18 ) }
    dend_0 { pt3dadd( 82.4882, 163.231, -54.1236, 0.18 ) }
    dend_0 { pt3dadd( 84.8819, 165.552, -54.6024, 1.06 ) }
    dend_0 { pt3dadd( 85.137, 165.788, -54.6249, 1.06 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 62/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 3.61679, 10.8844, 0.0146107, 0.81 ) }
    axon_0 { pt3dadd( 9.07397, 24.8565, 0.0146107, 0.81 ) }
    axon_0 { pt3dadd( 14.5311, 38.8286, 0.0146107, 0.81 ) }
    // Section: dend_25, id: dend_25, parent: dend_23 (entry count 65/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 6.39163, -18.6005, 0.542295, 1.08 ) }
    dend_25 { pt3dadd( 9.72371, -18.4556, -0.0583132, 1.08 ) }
    dend_25 { pt3dadd( 16.2105, -17.5361, -0.882358, 1.08 ) }
    dend_25 { pt3dadd( 22.7492, -17.5289, -1.85515, 1.08 ) }
    dend_25 { pt3dadd( 29.1274, -17.9855, -3.52683, 1.08 ) }
    dend_25 { pt3dadd( 35.7155, -17.9426, -4.06934, 1.08 ) }
    dend_25 { pt3dadd( 42.2083, -17.0216, -4.8429, 1.08 ) }
    dend_25 { pt3dadd( 48.5609, -15.3068, -5.13513, 1.08 ) }
    dend_25 { pt3dadd( 55.0195, -14.2538, -4.25861, 1.08 ) }
    dend_25 { pt3dadd( 61.0947, -12.1852, -2.81437, 1.08 ) }
    dend_25 { pt3dadd( 67.1217, -9.7566, -1.88225, 1.08 ) }
    dend_25 { pt3dadd( 73.155, -7.217, -1.47201, 1.08 ) }
    dend_25 { pt3dadd( 79.0186, -4.33143, -1.14125, 1.08 ) }
    dend_25 { pt3dadd( 85.3618, -2.741, -1.94814, 1.08 ) }
    dend_25 { pt3dadd( 91.4226, -0.24503, -1.67141, 1.08 ) }
    dend_25 { pt3dadd( 97.1665, 2.86399, -1.71175, 1.08 ) }
    dend_25 { pt3dadd( 102.563, 6.44623, -2.30414, 1.08 ) }
    dend_25 { pt3dadd( 108.599, 9.00565, -2.1939, 1.08 ) }
    dend_25 { pt3dadd( 114.953, 10.3435, -1.02978, 1.08 ) }
    dend_25 { pt3dadd( 121.52, 10.8511, -0.482792, 1.08 ) }
    dend_25 { pt3dadd( 127.894, 11.7074, 1.02433, 1.08 ) }
    dend_25 { pt3dadd( 134.486, 11.4046, 1.41383, 1.08 ) }
    // Section: dend_24, id: dend_24, parent: dend_23 (entry count 87/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 6.39163, -18.6005, 0.542295, 1.08 ) }
    dend_24 { pt3dadd( 8.61047, -23.0369, 0.354878, 1.08 ) }
    dend_24 { pt3dadd( 10.9572, -27.4328, 0.00877365, 1.08 ) }
    dend_24 { pt3dadd( 13.8659, -32.0974, -0.589889, 1.08 ) }
    dend_24 { pt3dadd( 16.4023, -35.8775, -1.17737, 1.08 ) }
    dend_24 { pt3dadd( 20.2062, -41.5462, -2.0584, 0.81 ) }
    dend_24 { pt3dadd( 21.5578, -43.5605, -2.37145, 0.81 ) }
    dend_24 { pt3dadd( 23.7176, -46.5644, -2.94012, 0.81 ) }
    dend_24 { pt3dadd( 26.7139, -50.6055, -3.9585, 0.81 ) }
    dend_24 { pt3dadd( 26.7535, -50.6471, -3.9752, 0.81 ) }
    // Section: dend_22, id: dend_22, parent: dend_20 (entry count 97/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( 70.7303, -234.095, -43.9506, 0.27 ) }
    dend_22 { pt3dadd( 82.4959, -238.6, -46.1698, 0.27 ) }
    dend_22 { pt3dadd( 98.4383, -244.704, -49.1767, 0.27 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 0/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 70.7303, -234.095, -43.9506, 0.27 ) }
    dend_21 { pt3dadd( 70.2925, -237.27, -46.4939, 0.27 ) }
    dend_21 { pt3dadd( 69.6562, -241.653, -50.1249, 0.27 ) }
    dend_21 { pt3dadd( 69.0322, -245.891, -53.5866, 0.27 ) }
    dend_21 { pt3dadd( 68.5451, -249.199, -56.2893, 0.27 ) }
    dend_21 { pt3dadd( 67.9151, -253.478, -59.7848, 0.27 ) }
    dend_21 { pt3dadd( 66.783, -261.167, -66.0657, 0.27 ) }
    dend_21 { pt3dadd( 66.7511, -261.338, -66.2127, 0.27 ) }
    dend_21 { pt3dadd( 66.542, -262.73, -67.3874, 0.27 ) }
    // Section: dend_15, id: dend_15, parent: dend_13 (entry count 9/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -7.16148, -31.0876, -7.27612, 1.08 ) }
    dend_15 { pt3dadd( -9.53906, -33.3768, -7.75475, 1.08 ) }
    dend_15 { pt3dadd( -12.7239, -36.4434, -8.3959, 1.08 ) }
    dend_15 { pt3dadd( -16.0175, -39.6146, -9.05895, 1.08 ) }
    dend_15 { pt3dadd( -20.9251, -44.3398, -10.0469, 1.08 ) }
    dend_15 { pt3dadd( -23.3919, -46.7151, -10.5435, 1.08 ) }
    dend_15 { pt3dadd( -26.1545, -49.375, -11.0996, 1.08 ) }
    // Section: dend_14, id: dend_14, parent: dend_13 (entry count 16/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( -7.16148, -31.0876, -7.27612, 0.27 ) }
    dend_14 { pt3dadd( -8.20285, -33.334, -7.63845, 0.27 ) }
    dend_14 { pt3dadd( -8.52861, -35.2571, -7.86417, 0.54 ) }
    dend_14 { pt3dadd( -8.55547, -35.6983, -7.88456, 1.08 ) }
    dend_14 { pt3dadd( -8.56014, -35.8546, -7.88843, 1.08 ) }
    dend_14 { pt3dadd( -8.66518, -38.2307, -7.96805, 1.08 ) }
    dend_14 { pt3dadd( -8.72861, -39.3286, -8.00814, 1.08 ) }
    dend_14 { pt3dadd( -8.88997, -42.9666, -8.12761, 1.08 ) }
    dend_14 { pt3dadd( -9.03808, -46.365, -8.32018, 1.08 ) }
    dend_14 { pt3dadd( -9.042, -46.521, -8.33186, 1.08 ) }
    dend_14 { pt3dadd( -8.98367, -49.3962, -8.59946, 1.08 ) }
    dend_14 { pt3dadd( -8.84641, -50.9704, -8.78217, 1.08 ) }
    dend_14 { pt3dadd( -8.79361, -52.143, -8.92748, 1.08 ) }
    dend_14 { pt3dadd( -8.81932, -53.2568, -9.07455, 1.08 ) }
    dend_14 { pt3dadd( -8.73716, -54.7794, -9.26099, 1.08 ) }
    dend_14 { pt3dadd( -8.58593, -56.5901, -9.43185, 1.08 ) }
    dend_14 { pt3dadd( -8.51795, -57.8427, -9.49757, 1.08 ) }
    dend_14 { pt3dadd( -8.48949, -61.9667, -9.65607, 1.08 ) }
    dend_14 { pt3dadd( -8.51872, -62.7565, -9.70789, 1.08 ) }
    dend_14 { pt3dadd( -8.59387, -66.1975, -10.0407, 1.08 ) }
    dend_14 { pt3dadd( -8.60666, -66.5449, -10.0813, 1.08 ) }
    dend_14 { pt3dadd( -8.73777, -70.345, -10.5968, 1.08 ) }
    dend_14 { pt3dadd( -8.77248, -72.6834, -10.9532, 1.08 ) }
    dend_14 { pt3dadd( -8.61375, -75.0793, -11.3456, 1.08 ) }
    dend_14 { pt3dadd( -8.56323, -78.7028, -12.0059, 1.08 ) }
    dend_14 { pt3dadd( -8.56431, -78.8507, -12.036, 1.08 ) }
    dend_14 { pt3dadd( -8.55963, -79.477, -12.1697, 1.08 ) }
    dend_14 { pt3dadd( -8.50658, -81.6609, -12.6598, 1.08 ) }
    dend_14 { pt3dadd( -8.40024, -86.6077, -13.6973, 1.08 ) }
    dend_14 { pt3dadd( -8.46417, -90.4448, -14.3543, 1.08 ) }
    dend_14 { pt3dadd( -8.56864, -93.5014, -14.7939, 1.08 ) }
    dend_14 { pt3dadd( -8.63555, -95.7743, -15.0529, 1.08 ) }
    dend_14 { pt3dadd( -8.63576, -95.809, -15.0555, 1.08 ) }
    dend_14 { pt3dadd( -8.6182, -98.6213, -15.1557, 1.08 ) }
    dend_14 { pt3dadd( -8.42667, -102.41, -15.1082, 1.08 ) }
    dend_14 { pt3dadd( -8.1678, -105.482, -14.9659, 1.08 ) }
    dend_14 { pt3dadd( -7.99768, -108.087, -14.7841, 0.81 ) }
    dend_14 { pt3dadd( -7.81048, -110.81, -14.6195, 0.81 ) }
    dend_14 { pt3dadd( -7.6875, -112.764, -14.5323, 0.81 ) }
    dend_14 { pt3dadd( -7.17261, -118.328, -14.4987, 0.81 ) }
    dend_14 { pt3dadd( -6.79315, -121.461, -14.5903, 0.81 ) }
    dend_14 { pt3dadd( -6.66068, -122.54, -14.651, 0.81 ) }
    dend_14 { pt3dadd( -6.29761, -125.75, -14.8103, 0.81 ) }
    dend_14 { pt3dadd( -6.1023, -127.914, -14.8697, 0.81 ) }
    dend_14 { pt3dadd( -5.74689, -134.263, -14.8497, 0.81 ) }
    dend_14 { pt3dadd( -5.78211, -136.046, -14.8401, 0.81 ) }
    dend_14 { pt3dadd( -5.79032, -136.202, -14.8392, 0.81 ) }
    dend_14 { pt3dadd( -6.13112, -139.648, -14.8113, 0.81 ) }
    dend_14 { pt3dadd( -6.54095, -142.278, -14.7459, 0.81 ) }
    dend_14 { pt3dadd( -7.22821, -145.208, -14.6791, 0.81 ) }
    dend_14 { pt3dadd( -8.23253, -148.54, -14.5341, 0.81 ) }
    dend_14 { pt3dadd( -8.59539, -149.753, -14.4909, 0.81 ) }
    dend_14 { pt3dadd( -9.3472, -152.463, -14.4202, 0.81 ) }
    dend_14 { pt3dadd( -9.92375, -154.601, -14.3999, 0.81 ) }
    dend_14 { pt3dadd( -10.7352, -157.501, -14.4107, 0.81 ) }
    dend_14 { pt3dadd( -11.7568, -161.65, -14.3826, 0.81 ) }
    dend_14 { pt3dadd( -12.5092, -164.854, -14.3147, 0.81 ) }
    dend_14 { pt3dadd( -13.136, -167.621, -14.2961, 0.81 ) }
    dend_14 { pt3dadd( -13.9625, -171.238, -14.2712, 0.81 ) }
    dend_14 { pt3dadd( -14.3503, -173.049, -14.2669, 0.81 ) }
    dend_14 { pt3dadd( -14.7383, -175.112, -14.2884, 0.81 ) }
    dend_14 { pt3dadd( -15.2518, -177.858, -14.3819, 0.81 ) }
    dend_14 { pt3dadd( -15.5211, -180.725, -14.4369, 0.81 ) }
    dend_14 { pt3dadd( -15.5183, -181.796, -14.4376, 0.81 ) }
    dend_14 { pt3dadd( -15.5016, -182.016, -14.432, 1.08 ) }
    dend_14 { pt3dadd( -15.4831, -182.236, -14.4173, 1.08 ) }
    dend_14 { pt3dadd( -15.1865, -185.028, -14.2251, 0.54 ) }
    dend_14 { pt3dadd( -14.6046, -189.146, -13.9628, 0.54 ) }
    dend_14 { pt3dadd( -14.2974, -191.358, -13.8506, 0.54 ) }
    dend_14 { pt3dadd( -14.0009, -193.648, -13.7691, 0.54 ) }
    dend_14 { pt3dadd( -13.8593, -195.151, -13.7135, 0.54 ) }
    dend_14 { pt3dadd( -13.7459, -197.314, -13.6204, 0.54 ) }
    dend_14 { pt3dadd( -13.7531, -198.71, -13.5244, 0.54 ) }
    dend_14 { pt3dadd( -13.9081, -201.816, -13.2387, 0.54 ) }
    dend_14 { pt3dadd( -14.0274, -203.288, -13.0841, 0.54 ) }
    dend_14 { pt3dadd( -14.1592, -205.053, -12.896, 0.54 ) }
    dend_14 { pt3dadd( -14.3362, -206.25, -12.7782, 0.54 ) }
    dend_14 { pt3dadd( -14.8074, -208.878, -12.5213, 0.54 ) }
    dend_14 { pt3dadd( -14.8147, -208.917, -12.5171, 0.54 ) }
    dend_14 { pt3dadd( -14.9378, -209.547, -12.4371, 0.54 ) }
    dend_14 { pt3dadd( -15.2985, -211.694, -12.1642, 0.54 ) }
    dend_14 { pt3dadd( -15.6741, -214.412, -11.827, 0.54 ) }
    dend_14 { pt3dadd( -16.2276, -218.254, -11.3914, 0.54 ) }
    dend_14 { pt3dadd( -16.6538, -221.694, -11.0566, 0.54 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_14 { pt3dadd( -16.8799, -223.604, -10.8658, 0.54 ) }
    dend_14 { pt3dadd( -17.1796, -226.277, -10.6811, 0.54 ) }
    dend_14 { pt3dadd( -17.2249, -226.744, -10.6625, 0.54 ) }
    dend_14 { pt3dadd( -17.4193, -229.392, -10.6292, 0.54 ) }
    dend_14 { pt3dadd( -17.783, -232.532, -10.7519, 0.54 ) }
    dend_14 { pt3dadd( -18.1761, -236.11, -11.0365, 0.54 ) }
    dend_14 { pt3dadd( -18.4912, -238.778, -11.3342, 0.54 ) }
    dend_14 { pt3dadd( -18.8342, -241.313, -11.6591, 0.54 ) }
    dend_14 { pt3dadd( -18.8933, -241.774, -11.7244, 0.54 ) }
    dend_14 { pt3dadd( -19.2128, -244.63, -12.2498, 0.54 ) }
    // Section: dend_10, id: dend_10, parent: dend_6 (entry count 10/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -7.61643, 9.33136, 2.93098, 0.81 ) }
    dend_10 { pt3dadd( -8.23047, 10.8951, 3.1036, 0.81 ) }
    dend_10 { pt3dadd( -9.61548, 14.3461, 3.47788, 1.08 ) }
    dend_10 { pt3dadd( -12.5319, 19.0653, 4.03559, 1.08 ) }
    dend_10 { pt3dadd( -13.2892, 20.1001, 4.14685, 1.08 ) }
    dend_10 { pt3dadd( -15.499, 23.3071, 4.38837, 1.08 ) }
    dend_10 { pt3dadd( -15.5307, 23.3537, 4.39083, 1.08 ) }
    dend_10 { pt3dadd( -17.9064, 26.5338, 4.46337, 1.08 ) }
    dend_10 { pt3dadd( -21.4964, 31.3793, 4.42793, 1.08 ) }
    dend_10 { pt3dadd( -22.998, 33.6663, 4.25414, 1.08 ) }
    dend_10 { pt3dadd( -26.1793, 38.7967, 3.62029, 1.08 ) }
    dend_10 { pt3dadd( -29.2278, 43.8342, 2.76263, 1.08 ) }
    dend_10 { pt3dadd( -30.9686, 46.672, 2.22129, 1.08 ) }
    dend_10 { pt3dadd( -33.4437, 50.725, 1.36379, 1.08 ) }
    dend_10 { pt3dadd( -35.3426, 53.825, 0.644537, 1.08 ) }
    dend_10 { pt3dadd( -35.562, 54.1022, 0.577166, 1.08 ) }
    dend_10 { pt3dadd( -36.3969, 54.8656, 0.388023, 1.08 ) }
    dend_10 { pt3dadd( -40.849, 58.354, -0.373003, 1.08 ) }
    dend_10 { pt3dadd( -44.3625, 60.7681, -0.808454, 1.08 ) }
    dend_10 { pt3dadd( -47.9175, 62.8064, -1.10702, 1.08 ) }
    dend_10 { pt3dadd( -51.0882, 64.5183, -1.27127, 1.08 ) }
    dend_10 { pt3dadd( -53.0324, 65.5502, -1.37719, 1.08 ) }
    dend_10 { pt3dadd( -54.768, 66.6815, -1.50045, 1.08 ) }
    dend_10 { pt3dadd( -57.6191, 68.8905, -1.71935, 1.08 ) }
    dend_10 { pt3dadd( -59.978, 71.1072, -1.89804, 1.08 ) }
    dend_10 { pt3dadd( -60.1509, 71.282, -1.91348, 1.08 ) }
    dend_10 { pt3dadd( -63.3093, 74.8654, -2.24945, 1.08 ) }
    dend_10 { pt3dadd( -67.766, 80.4062, -2.98029, 1.08 ) }
    dend_10 { pt3dadd( -71.4716, 85.1229, -3.66792, 1.08 ) }
    dend_10 { pt3dadd( -74.8038, 89.5255, -4.46477, 1.08 ) }
    dend_10 { pt3dadd( -78.2443, 94.433, -5.40176, 1.08 ) }
    dend_10 { pt3dadd( -81.8955, 99.9655, -6.46311, 1.08 ) }
    dend_10 { pt3dadd( -85.1827, 105.436, -7.61055, 1.08 ) }
    dend_10 { pt3dadd( -87.8251, 109.856, -8.67107, 1.08 ) }
    dend_10 { pt3dadd( -89.2258, 112.497, -9.33783, 1.08 ) }
    dend_10 { pt3dadd( -91.7445, 117.205, -10.4721, 1.08 ) }
    dend_10 { pt3dadd( -94.1195, 122.235, -11.4927, 1.08 ) }
    dend_10 { pt3dadd( -96.3895, 126.732, -12.2199, 0.81 ) }
    dend_10 { pt3dadd( -98.1974, 129.886, -12.5149, 0.81 ) }
    dend_10 { pt3dadd( -100.515, 133.706, -12.7438, 0.81 ) }
    dend_10 { pt3dadd( -102.498, 136.498, -12.7824, 0.81 ) }
    dend_10 { pt3dadd( -104.226, 138.603, -12.7896, 0.54 ) }
    dend_10 { pt3dadd( -108.241, 143.075, -12.6058, 0.54 ) }
    dend_10 { pt3dadd( -112.452, 147.419, -12.1451, 1.08 ) }
    dend_10 { pt3dadd( -113.187, 148.168, -12.0382, 1.08 ) }
    dend_10 { pt3dadd( -115.573, 150.465, -11.7492, 1.08 ) }
    dend_10 { pt3dadd( -120.916, 155.739, -11.4194, 1.08 ) }
    // Section: dend_7, id: dend_7, parent: dend_6 (entry count 57/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -7.61643, 9.33136, 2.93098, 1.08 ) }
    dend_7 { pt3dadd( -11.2536, 4.75691, -2.8478, 1.08 ) }
    dend_7 { pt3dadd( -13.451, 2.01623, -6.18982, 0.81 ) }
    dend_7 { pt3dadd( -16.1881, -1.85772, -11.0367, 1.08 ) }
    dend_7 { pt3dadd( -17.6532, -4.08895, -13.8234, 1.08 ) }
    dend_7 { pt3dadd( -19.1458, -6.36206, -16.6625, 1.08 ) }
    dend_7 { pt3dadd( -21.3084, -9.6553, -20.7757, 1.08 ) }
    dend_7 { pt3dadd( -22.3427, -11.583, -22.8754, 1.08 ) }
    dend_7 { pt3dadd( -23.8854, -15.3097, -27.2341, 0.54 ) }
    dend_7 { pt3dadd( -24.079, -15.7655, -27.8502, 0.54 ) }
    // Section: dend_5, id: dend_5, parent: dend_3 (entry count 67/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -7.87446, 11.1898, 3.88362, 0.53 ) }
    dend_5 { pt3dadd( -9.58196, 11.3616, 3.75239, 0.53 ) }
    dend_5 { pt3dadd( -13.4143, 11.7472, 3.45783, 0.53 ) }
    dend_5 { pt3dadd( -13.9205, 11.7982, 3.41893, 0.53 ) }
    dend_5 { pt3dadd( -16.233, 12.0308, 3.24118, 0.53 ) }
    dend_5 { pt3dadd( -19.0242, 12.3117, 3.02666, 0.53 ) }
    dend_5 { pt3dadd( -22.5617, 12.6676, 2.75477, 0.53 ) }
    dend_5 { pt3dadd( -36.5507, 15.5595, -0.11134, 0.53 ) }
    dend_5 { pt3dadd( -50.2265, 20.4372, -0.12799, 0.53 ) }
    dend_5 { pt3dadd( -63.4728, 26.2952, 0.0861425, 0.53 ) }
    dend_5 { pt3dadd( -75.2845, 33.8916, 3.18263, 0.53 ) }
    dend_5 { pt3dadd( -87.9323, 40.5797, 5.12212, 0.53 ) }
    dend_5 { pt3dadd( -100.573, 46.5357, 8.82997, 0.53 ) }
    dend_5 { pt3dadd( -114.009, 50.3648, 12.8194, 0.53 ) }
    dend_5 { pt3dadd( -127.574, 54.4685, 16.0034, 0.53 ) }
    dend_5 { pt3dadd( -141.664, 57.4782, 18.0751, 0.53 ) }
    dend_5 { pt3dadd( -156.205, 58.4691, 18.3974, 0.53 ) }
    dend_5 { pt3dadd( -170.32, 61.4048, 20.409, 0.53 ) }
    dend_5 { pt3dadd( -184.37, 64.7277, 22.2204, 0.53 ) }
    dend_5 { pt3dadd( -198.22, 69.04, 23.0877, 0.53 ) }
    dend_5 { pt3dadd( -212.679, 70.7055, 23.8577, 0.53 ) }
    dend_5 { pt3dadd( -227.23, 71.3616, 23.2854, 0.53 ) }
    dend_5 { pt3dadd( -241.495, 74.284, 23.5177, 0.53 ) }
    dend_5 { pt3dadd( -255.34, 78.6525, 24.1206, 0.53 ) }
    dend_5 { pt3dadd( -268.705, 84.0782, 25.542, 0.53 ) }
    dend_5 { pt3dadd( -282.059, 88.7615, 28.739, 0.53 ) }
    dend_5 { pt3dadd( -295.751, 91.9861, 32.4419, 0.53 ) }
    dend_5 { pt3dadd( -308.492, 94.1528, 39.1383, 0.53 ) }
    dend_5 { pt3dadd( -321.186, 93.4102, 46.2668, 0.53 ) }
    dend_5 { pt3dadd( -333.442, 90.7002, 53.6454, 0.53 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 97/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -7.87446, 11.1898, 3.88362, 0.53 ) }
    dend_4 { pt3dadd( -7.74364, 13.1987, 4.48305, 0.53 ) }
    dend_4 { pt3dadd( -7.72234, 13.5258, 4.58063, 0.53 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_4 { pt3dadd( -7.523, 16.5868, 5.494, 0.53 ) }
    dend_4 { pt3dadd( -8.52437, 25.1667, 6.99274, 0.53 ) }
    dend_4 { pt3dadd( -8.8232, 33.8599, 7.98585, 0.53 ) }
    dend_4 { pt3dadd( -10.3161, 42.3386, 9.69819, 0.53 ) }
    dend_4 { pt3dadd( -11.1664, 50.4817, 12.9638, 0.53 ) }
    dend_4 { pt3dadd( -11.8672, 59.0632, 14.6171, 0.53 ) }
    dend_4 { pt3dadd( -12.1899, 67.7316, 15.8237, 0.53 ) }
    dend_4 { pt3dadd( -11.2485, 76.4124, 15.1904, 0.53 ) }
    dend_4 { pt3dadd( -10.1467, 84.9713, 13.6473, 0.53 ) }
    dend_4 { pt3dadd( -9.13244, 93.3995, 11.4094, 0.53 ) }
    dend_4 { pt3dadd( -9.31729, 101.436, 7.78992, 0.53 ) }
    dend_4 { pt3dadd( -8.79616, 109.699, 4.82606, 0.53 ) }
    dend_4 { pt3dadd( -9.41051, 118.123, 2.43616, 0.53 ) }
    dend_4 { pt3dadd( -10.5403, 126.264, -0.724763, 0.53 ) }
    dend_4 { pt3dadd( -10.9789, 134.22, -4.51397, 0.53 ) }
    dend_4 { pt3dadd( -13.1562, 142.295, -7.28849, 0.53 ) }
    dend_4 { pt3dadd( -17.1313, 149.47, -10.7261, 0.53 ) }
    dend_4 { pt3dadd( -20.5315, 156.667, -14.6907, 0.53 ) }
    dend_4 { pt3dadd( -23.1113, 163.649, -19.5867, 0.53 ) }
    dend_4 { pt3dadd( -24.1238, 170.761, -24.8402, 0.53 ) }
    dend_4 { pt3dadd( -26.4546, 178.365, -28.7353, 0.53 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 21/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 85.137, 165.788, -54.6249, 0.18 ) }
    dend_2 { pt3dadd( 85.7337, 166.155, -54.5441, 0.18 ) }
    dend_2 { pt3dadd( 87.5042, 167.3, -54.2587, 0.18 ) }
    dend_2 { pt3dadd( 90.6473, 169.546, -53.7198, 0.53 ) }
    dend_2 { pt3dadd( 94.3134, 172.148, -53.2682, 0.53 ) }
    dend_2 { pt3dadd( 97.4328, 174.475, -52.9807, 0.35 ) }
    dend_2 { pt3dadd( 100.413, 176.658, -52.9211, 0.35 ) }
    dend_2 { pt3dadd( 100.823, 176.966, -52.9409, 0.35 ) }
    dend_2 { pt3dadd( 103.22, 178.877, -53.3401, 0.35 ) }
    dend_2 { pt3dadd( 106.357, 181.334, -54.2773, 0.35 ) }
    dend_2 { pt3dadd( 108.876, 182.854, -55.7456, 0.35 ) }
    dend_2 { pt3dadd( 111.785, 184.153, -57.9428, 0.35 ) }
    dend_2 { pt3dadd( 111.959, 184.22, -58.1025, 0.35 ) }
    dend_2 { pt3dadd( 113.774, 184.851, -60.1517, 0.18 ) }
    dend_2 { pt3dadd( 115.981, 185.463, -62.8705, 0.18 ) }
    dend_2 { pt3dadd( 120.066, 186.457, -68.4155, 0.18 ) }
    dend_2 { pt3dadd( 120.137, 186.469, -68.5153, 0.18 ) }
    dend_2 { pt3dadd( 122.025, 186.873, -71.1584, 0.53 ) }
    dend_2 { pt3dadd( 125.222, 187.521, -75.6759, 0.53 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 40/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 85.137, 165.788, -54.6249, 0.18 ) }
    dend_1 { pt3dadd( 85.2007, 166.729, -54.8274, 0.18 ) }
    dend_1 { pt3dadd( 85.5638, 172.095, -55.9817, 0.18 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 43/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 14.5311, 38.8286, 0.0146107, 0.54 ) }
    axon_1 { pt3dadd( 19.9883, 52.8007, 0.0146107, 0.54 ) }
    axon_1 { pt3dadd( 25.4455, 66.7728, 0.0146107, 0.54 ) }
    // Section: dend_29, id: dend_29, parent: dend_25 (entry count 46/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 134.486, 11.4046, 1.41383, 0.18 ) }
    dend_29 { pt3dadd( 145.077, 13.702, -2.97531, 0.18 ) }
    dend_29 { pt3dadd( 155.344, 17.9037, -6.47049, 0.18 ) }
    dend_29 { pt3dadd( 165.625, 23.1404, -7.70282, 0.18 ) }
    dend_29 { pt3dadd( 175.329, 29.4105, -7.06942, 0.18 ) }
    dend_29 { pt3dadd( 185.461, 34.6193, -4.67745, 0.18 ) }
    // Section: dend_26, id: dend_26, parent: dend_25 (entry count 52/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 134.486, 11.4046, 1.41383, 0.18 ) }
    dend_26 { pt3dadd( 143.673, 13.1206, 3.59386, 0.18 ) }
    dend_26 { pt3dadd( 152.497, 15.8927, 6.04773, 0.18 ) }
    dend_26 { pt3dadd( 160.66, 17.6991, 10.7523, 0.18 ) }
    dend_26 { pt3dadd( 168.747, 17.8731, 15.9489, 0.18 ) }
    dend_26 { pt3dadd( 176.574, 19.659, 21.2005, 0.18 ) }
    dend_26 { pt3dadd( 185.279, 21.7772, 24.6137, 0.18 ) }
    dend_26 { pt3dadd( 193.119, 25.0221, 28.9976, 0.18 ) }
    // Section: dend_19, id: dend_19, parent: dend_15 (entry count 60/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -26.1545, -49.375, -11.0996, 1.08 ) }
    dend_19 { pt3dadd( -29.9748, -50.4624, -10.6855, 1.08 ) }
    dend_19 { pt3dadd( -32.9792, -51.4016, -10.4519, 0.81 ) }
    dend_19 { pt3dadd( -36.1969, -52.5018, -10.1894, 0.81 ) }
    dend_19 { pt3dadd( -39.2172, -53.5344, -9.94302, 0.81 ) }
    dend_19 { pt3dadd( -42.7377, -54.7381, -9.6558, 0.81 ) }
    dend_19 { pt3dadd( -47.037, -56.2081, -9.30504, 0.81 ) }
    dend_19 { pt3dadd( -48.6752, -56.8331, -9.2481, 0.81 ) }
    dend_19 { pt3dadd( -51.2886, -57.7377, -9.2973, 0.81 ) }
    dend_19 { pt3dadd( -60.0887, -62.5928, -8.4962, 0.81 ) }
    dend_19 { pt3dadd( -68.8023, -67.4721, -7.13296, 0.81 ) }
    dend_19 { pt3dadd( -78.0711, -70.5626, -4.33125, 0.81 ) }
    dend_19 { pt3dadd( -86.5266, -74.8544, -0.833729, 0.81 ) }
    dend_19 { pt3dadd( -94.705, -79.4245, 2.91655, 0.81 ) }
    dend_19 { pt3dadd( -102.519, -85.3709, 4.8671, 0.81 ) }
    dend_19 { pt3dadd( -108.682, -92.6131, 7.67892, 0.81 ) }
    dend_19 { pt3dadd( -114.266, -100.076, 11.0109, 0.81 ) }
    dend_19 { pt3dadd( -120.653, -107.033, 14.1002, 0.81 ) }
    dend_19 { pt3dadd( -127.432, -113.676, 17.121, 0.81 ) }
    dend_19 { pt3dadd( -134.479, -119.821, 20.6528, 0.81 ) }
    dend_19 { pt3dadd( -143.191, -124.006, 23.629, 0.81 ) }
    dend_19 { pt3dadd( -152.267, -126.871, 27.221, 0.81 ) }
    dend_19 { pt3dadd( -161.232, -130.897, 29.6452, 0.81 ) }
    dend_19 { pt3dadd( -170.767, -132.608, 32.8747, 0.81 ) }
    dend_19 { pt3dadd( -180.614, -134.085, 35.1717, 0.81 ) }
    dend_19 { pt3dadd( -190.52, -134.918, 37.5944, 0.81 ) }
    dend_19 { pt3dadd( -200.095, -133.974, 41.1283, 0.81 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 87/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -26.1545, -49.375, -11.0996, 0.81 ) }
    dend_16 { pt3dadd( -29.0051, -54.0053, -12.5751, 0.81 ) }
    dend_16 { pt3dadd( -31.6008, -58.0927, -13.7879, 1.08 ) }
    dend_16 { pt3dadd( -33.0252, -60.0985, -14.389, 1.08 ) }
    dend_16 { pt3dadd( -34.8748, -62.982, -15.372, 1.08 ) }
    dend_16 { pt3dadd( -35.8084, -64.569, -15.912, 1.08 ) }
    dend_16 { pt3dadd( -38.6993, -69.3937, -17.5311, 1.08 ) }
    dend_16 { pt3dadd( -38.8435, -69.6169, -17.5993, 1.08 ) }
    dend_16 { pt3dadd( -40.802, -72.5349, -18.6666, 0.81 ) }
    dend_16 { pt3dadd( -43.8641, -77.4154, -20.49, 0.54 ) }
    dend_16 { pt3dadd( -45.7444, -80.8995, -21.7199, 1.08 ) }
    dend_16 { pt3dadd( -48.5912, -87.1395, -23.6868, 1.08 ) }
    dend_16 { pt3dadd( -49.7773, -90.5094, -24.6116, 1.08 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_16 { pt3dadd( -50.4339, -93.3392, -25.2664, 0.81 ) }
    dend_16 { pt3dadd( -50.7758, -96.2091, -25.6933, 0.81 ) }
    dend_16 { pt3dadd( -50.9126, -99.2778, -25.8538, 1.08 ) }
    dend_16 { pt3dadd( -50.5811, -104.667, -25.931, 1.08 ) }
    dend_16 { pt3dadd( -50.0525, -108.424, -25.8384, 0.81 ) }
    dend_16 { pt3dadd( -49.3716, -114.672, -25.6206, 0.54 ) }
    dend_16 { pt3dadd( -49.2161, -118.146, -25.4489, 0.54 ) }
    dend_16 { pt3dadd( -49.2515, -121.31, -25.331, 0.54 ) }
    dend_16 { pt3dadd( -49.5334, -124.902, -25.2429, 0.54 ) }
    dend_16 { pt3dadd( -49.9442, -127.588, -25.2082, 1.08 ) }
    dend_16 { pt3dadd( -51.2667, -132.787, -25.2611, 1.08 ) }
    dend_16 { pt3dadd( -54.7986, -142.896, -25.6916, 1.08 ) }
    dend_16 { pt3dadd( -54.8982, -143.148, -25.7129, 1.08 ) }
    dend_16 { pt3dadd( -56.8354, -147.574, -26.1487, 1.08 ) }
    dend_16 { pt3dadd( -59.0903, -152.08, -26.5858, 1.08 ) }
    dend_16 { pt3dadd( -61.2345, -156.173, -27.0279, 1.08 ) }
    dend_16 { pt3dadd( -62.1097, -157.573, -27.2342, 0.81 ) }
    dend_16 { pt3dadd( -62.2817, -157.782, -27.28, 0.81 ) }
    dend_16 { pt3dadd( -63.206, -159.114, -27.5629, 0.81 ) }
    dend_16 { pt3dadd( -64.9037, -162.066, -28.2426, 0.81 ) }
    dend_16 { pt3dadd( -66.9301, -166.152, -29.2072, 0.81 ) }
    dend_16 { pt3dadd( -69.4828, -171.54, -30.5072, 0.81 ) }
    dend_16 { pt3dadd( -70.812, -174.486, -31.2449, 0.81 ) }
    dend_16 { pt3dadd( -73.6252, -180.893, -32.851, 0.81 ) }
    dend_16 { pt3dadd( -74.8666, -183.909, -33.6118, 1.08 ) }
    dend_16 { pt3dadd( -76.3908, -187.977, -34.6126, 1.08 ) }
    dend_16 { pt3dadd( -77.483, -190.987, -35.2674, 1.08 ) }
    dend_16 { pt3dadd( -78.4699, -193.916, -35.7284, 0.27 ) }
    dend_16 { pt3dadd( -80.1571, -198.174, -36.219, 0.27 ) }
    dend_16 { pt3dadd( -81.0054, -199.932, -36.2954, 0.27 ) }
    dend_16 { pt3dadd( -82.3624, -202.649, -36.2716, 0.54 ) }
    dend_16 { pt3dadd( -83.5696, -205.427, -36.1625, 0.54 ) }
    dend_16 { pt3dadd( -85.2302, -209.725, -35.9612, 0.54 ) }
    dend_16 { pt3dadd( -85.4362, -210.227, -35.9424, 0.54 ) }
    dend_16 { pt3dadd( -86.5377, -213.38, -35.8023, 0.54 ) }
    dend_16 { pt3dadd( -87.8844, -218.173, -35.8031, 0.54 ) }
    dend_16 { pt3dadd( -89.0849, -223.5, -36.0011, 0.54 ) }
    dend_16 { pt3dadd( -90.4691, -230.165, -36.6179, 0.54 ) }
    dend_16 { pt3dadd( -91.0876, -233.362, -37.0196, 0.54 ) }
    dend_16 { pt3dadd( -91.9362, -237.841, -37.6843, 0.54 ) }
    dend_16 { pt3dadd( -92.9631, -243.325, -38.6099, 0.54 ) }
    dend_16 { pt3dadd( -94.0239, -248.709, -39.6322, 0.54 ) }
    dend_16 { pt3dadd( -95.7221, -255.901, -41.243, 0.54 ) }
    dend_16 { pt3dadd( -96.0036, -257.084, -41.5215, 0.54 ) }
    dend_16 { pt3dadd( -97.441, -262.473, -42.8037, 0.54 ) }
    dend_16 { pt3dadd( -98.4243, -265.743, -43.5787, 0.54 ) }
    dend_16 { pt3dadd( -99.541, -269.415, -44.3422, 0.54 ) }
    dend_16 { pt3dadd( -100.85, -274.28, -45.3171, 0.54 ) }
    dend_16 { pt3dadd( -101.872, -278.394, -46.0842, 0.54 ) }
    dend_16 { pt3dadd( -103.077, -283.202, -46.9837, 0.54 ) }
    dend_16 { pt3dadd( -104.203, -287.579, -47.9499, 0.54 ) }
    dend_16 { pt3dadd( -104.214, -287.627, -47.9608, 0.54 ) }
    dend_16 { pt3dadd( -104.645, -290.56, -48.5766, 0.54 ) }
    // Section: dend_12, id: dend_12, parent: dend_10 (entry count 53/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -120.916, 155.739, -11.4194, 0.81 ) }
    dend_12 { pt3dadd( -123.432, 158.498, -11.0544, 0.81 ) }
    dend_12 { pt3dadd( -125.664, 160.535, -10.7169, 0.81 ) }
    dend_12 { pt3dadd( -128.18, 162.663, -10.2467, 0.81 ) }
    dend_12 { pt3dadd( -131.284, 164.832, -9.56452, 0.81 ) }
    dend_12 { pt3dadd( -134.249, 166.958, -8.67699, 0.81 ) }
    dend_12 { pt3dadd( -134.295, 166.993, -8.66, 0.81 ) }
    dend_12 { pt3dadd( -137.557, 169.602, -7.27714, 0.81 ) }
    dend_12 { pt3dadd( -140.489, 171.797, -5.88923, 0.81 ) }
    dend_12 { pt3dadd( -143.664, 173.941, -4.24663, 0.81 ) }
    dend_12 { pt3dadd( -148.053, 176.819, -1.73375, 0.81 ) }
    dend_12 { pt3dadd( -151.517, 179.011, 0.280592, 0.81 ) }
    dend_12 { pt3dadd( -158.289, 185.078, 4.51926, 0.81 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 66/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( -120.916, 155.739, -11.4194, 0.27 ) }
    dend_11 { pt3dadd( -123.484, 159.906, -9.45889, 0.27 ) }
    dend_11 { pt3dadd( -127.128, 165.821, -6.67635, 0.27 ) }
    dend_11 { pt3dadd( -129.026, 168.901, -5.22751, 0.27 ) }
    // Section: dend_9, id: dend_9, parent: dend_7 (entry count 70/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -24.079, -15.7655, -27.8502, 0.54 ) }
    dend_9 { pt3dadd( -24.8248, -18.9622, -28.5166, 0.54 ) }
    dend_9 { pt3dadd( -25.687, -21.9268, -29.1115, 0.54 ) }
    dend_9 { pt3dadd( -26.6771, -24.7112, -29.7157, 0.54 ) }
    dend_9 { pt3dadd( -28.9327, -29.7068, -30.9514, 0.54 ) }
    dend_9 { pt3dadd( -31.3464, -34.3647, -32.3262, 0.54 ) }
    dend_9 { pt3dadd( -34.6444, -40.1827, -34.3991, 0.54 ) }
    dend_9 { pt3dadd( -34.77, -40.3861, -34.4828, 0.54 ) }
    dend_9 { pt3dadd( -37.0581, -43.8581, -36.0191, 0.54 ) }
    dend_9 { pt3dadd( -40.9118, -49.4471, -38.5834, 0.54 ) }
    dend_9 { pt3dadd( -43.7359, -53.0517, -40.3047, 0.54 ) }
    dend_9 { pt3dadd( -46.3897, -56.3705, -42.2232, 0.54 ) }
    dend_9 { pt3dadd( -48.2517, -58.7398, -43.8323, 0.54 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 83/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -24.079, -15.7655, -27.8502, 0.54 ) }
    dend_8 { pt3dadd( -27.5766, -16.7548, -32.1089, 0.54 ) }
    dend_8 { pt3dadd( -30.3472, -17.427, -34.9905, 0.81 ) }
    dend_8 { pt3dadd( -32.3187, -17.9163, -36.7961, 0.81 ) }
    dend_8 { pt3dadd( -39.5381, -19.8701, -42.9228, 0.81 ) }
    dend_8 { pt3dadd( -43.7461, -21.0129, -46.1503, 0.81 ) }
    dend_8 { pt3dadd( -47.5205, -22.1206, -48.9538, 0.81 ) }
    dend_8 { pt3dadd( -53.0014, -23.6733, -52.6252, 0.81 ) }
    dend_8 { pt3dadd( -56.4568, -24.708, -54.6986, 0.81 ) }
    dend_8 { pt3dadd( -60.5169, -26.0374, -56.9868, 0.81 ) }
    dend_8 { pt3dadd( -65.5807, -27.8287, -59.6196, 0.81 ) }
    dend_8 { pt3dadd( -72.4419, -30.4632, -63.2705, 0.81 ) }
    dend_8 { pt3dadd( -72.4794, -30.4781, -63.2903, 0.81 ) }
    dend_8 { pt3dadd( -79.1062, -33.1806, -66.8863, 0.81 ) }
    dend_8 { pt3dadd( -79.2726, -33.2464, -66.9812, 0.81 ) }
    dend_8 { pt3dadd( -86.7441, -36.1402, -71.2129, 0.81 ) }
    // Section: dend_28, id: dend_28, parent: dend_26 (entry count 99/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 193.119, 25.0221, 28.9976, 0.27 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_28 { pt3dadd( 199.511, 26.1088, 32.007, 0.27 ) }
    dend_28 { pt3dadd( 205.869, 27.0131, 35.1528, 0.27 ) }
    // Section: dend_27, id: dend_27, parent: dend_26 (entry count 2/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( 193.119, 25.0221, 28.9976, 0.27 ) }
    dend_27 { pt3dadd( 200.274, 26.9169, 32.3424, 0.27 ) }
    dend_27 { pt3dadd( 207.698, 27.47, 35.6393, 0.27 ) }
    // Section: dend_18, id: dend_18, parent: dend_16 (entry count 5/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -104.645, -290.56, -48.5766, 0.54 ) }
    dend_18 { pt3dadd( -105.923, -298.732, -49.0279, 0.54 ) }
    dend_18 { pt3dadd( -107.349, -307.702, -49.5942, 0.54 ) }
    dend_18 { pt3dadd( -107.422, -308.193, -49.6135, 0.54 ) }
    dend_18 { pt3dadd( -109.265, -317.438, -49.7394, 0.54 ) }
    dend_18 { pt3dadd( -110.702, -323.297, -49.7552, 0.54 ) }
    dend_18 { pt3dadd( -110.802, -323.634, -49.7503, 0.54 ) }
    dend_18 { pt3dadd( -114.774, -334.479, -49.4581, 0.54 ) }
    dend_18 { pt3dadd( -117.954, -342.329, -49.0511, 0.54 ) }
    dend_18 { pt3dadd( -121.475, -350.588, -48.5488, 0.54 ) }
    dend_18 { pt3dadd( -126.582, -361.048, -47.6213, 0.54 ) }
    dend_18 { pt3dadd( -130.516, -368.046, -46.959, 0.54 ) }
    dend_18 { pt3dadd( -134.865, -374.964, -46.3076, 0.54 ) }
    dend_18 { pt3dadd( -138.665, -380.114, -45.8382, 0.54 ) }
    dend_18 { pt3dadd( -143.937, -386.235, -45.4332, 0.54 ) }
    dend_18 { pt3dadd( -149.82, -392.188, -45.308, 0.54 ) }
    dend_18 { pt3dadd( -153.514, -395.097, -45.5011, 0.54 ) }
    dend_18 { pt3dadd( -156.537, -397.019, -45.9604, 0.54 ) }
    dend_18 { pt3dadd( -158.75, -398.124, -46.4906, 0.54 ) }
    dend_18 { pt3dadd( -163.04, -399.91, -47.8705, 0.54 ) }
    dend_18 { pt3dadd( -167.349, -401.492, -49.5521, 0.54 ) }
    dend_18 { pt3dadd( -171.235, -403.066, -51.2411, 0.54 ) }
    dend_18 { pt3dadd( -174.534, -404.609, -52.5321, 0.54 ) }
    dend_18 { pt3dadd( -178.935, -406.811, -54.0956, 0.54 ) }
    dend_18 { pt3dadd( -181.318, -408.232, -54.9604, 0.54 ) }
    dend_18 { pt3dadd( -183.571, -409.829, -55.8185, 0.54 ) }
    dend_18 { pt3dadd( -188.699, -413.862, -57.5157, 0.54 ) }
    dend_18 { pt3dadd( -193.383, -417.861, -58.7499, 0.54 ) }
    dend_18 { pt3dadd( -198.176, -422.276, -59.5573, 0.54 ) }
    dend_18 { pt3dadd( -202.444, -426.607, -59.9461, 0.54 ) }
    dend_18 { pt3dadd( -207.1, -431.959, -59.9645, 0.54 ) }
    dend_18 { pt3dadd( -210.927, -436.954, -59.5361, 0.54 ) }
    dend_18 { pt3dadd( -213.632, -440.855, -58.9783, 0.54 ) }
    dend_18 { pt3dadd( -216.861, -445.985, -57.6478, 0.54 ) }
    dend_18 { pt3dadd( -218.147, -448.492, -56.5575, 0.54 ) }
    dend_18 { pt3dadd( -220.39, -453.299, -53.0069, 0.54 ) }
    dend_18 { pt3dadd( -220.433, -453.622, -52.6303, 0.54 ) }
    // Section: dend_17, id: dend_17, parent: dend_16 (entry count 42/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -104.645, -290.56, -48.5766, 0.54 ) }
    dend_17 { pt3dadd( -109.261, -295.19, -44.9355, 0.54 ) }
    dend_17 { pt3dadd( -112.008, -297.945, -42.7691, 0.54 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
    ModelViewParmSubset_2 = new SectionList()
    dend_23 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()

    // Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, axon_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, axon_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
    ModelViewParmSubset_5 = new SectionList()
    dend_23 ModelViewParmSubset_5.append()
    dend_20 ModelViewParmSubset_5.append()
    dend_13 ModelViewParmSubset_5.append()
    dend_6 ModelViewParmSubset_5.append()
    dend_3 ModelViewParmSubset_5.append()
    dend_0 ModelViewParmSubset_5.append()
    axon_0 ModelViewParmSubset_5.append()
    dend_25 ModelViewParmSubset_5.append()
    dend_24 ModelViewParmSubset_5.append()
    dend_22 ModelViewParmSubset_5.append()
    dend_21 ModelViewParmSubset_5.append()
    dend_15 ModelViewParmSubset_5.append()
    dend_14 ModelViewParmSubset_5.append()
    dend_10 ModelViewParmSubset_5.append()
    dend_7 ModelViewParmSubset_5.append()
    dend_5 ModelViewParmSubset_5.append()
    dend_4 ModelViewParmSubset_5.append()
    dend_2 ModelViewParmSubset_5.append()
    dend_1 ModelViewParmSubset_5.append()
    axon_1 ModelViewParmSubset_5.append()
    dend_29 ModelViewParmSubset_5.append()
    dend_26 ModelViewParmSubset_5.append()
    dend_19 ModelViewParmSubset_5.append()
    dend_16 ModelViewParmSubset_5.append()
    dend_12 ModelViewParmSubset_5.append()
    dend_11 ModelViewParmSubset_5.append()
    dend_9 ModelViewParmSubset_5.append()
    dend_8 ModelViewParmSubset_5.append()
    dend_28 ModelViewParmSubset_5.append()
    dend_27 ModelViewParmSubset_5.append()
    dend_18 ModelViewParmSubset_5.append()
    dend_17 ModelViewParmSubset_5.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_20 OneSecGrp_SectionRef_3.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_0 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_25 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_14 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_10 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_7 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_5 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_4 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_2 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_29 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_26 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_19 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_16 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_12 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_9 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_8 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_18 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_6 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_3 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_23 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_13 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_24 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_15 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_1 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_11 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_28 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_27 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_22 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_21 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_17 OneSecGrp_SectionRef_33.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_23, dend_23, dend_23, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_13, dend_13, dend_13, dend_13, dend_13, dend_6, dend_6, dend_3, dend_3, dend_3, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, axon_1, axon_1, dend_29, dend_29, dend_29, dend_29, dend_29, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_28, dend_28, dend_27, dend_27, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_19 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_12 all.append()
    dend_12 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_17 all.append()
    dend_17 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.993125  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.0  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.005611  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.068459995  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.517764  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 6.3E-5  // units: S cm-2
        e_pas_nml2 = -64.6017  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 3.45E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.077616  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.002099  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 1.13999995E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.26087198  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-5  // units: S cm-2
        e_pas_nml2 = -69.78141  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 3.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.395881  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009986  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 5.0100003E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009728  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 2.7999999E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cACint_237_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cACint_237_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_20 nseg = 13
    dend_0 nseg = 9
    dend_25 nseg = 7
    dend_14 nseg = 11
    dend_10 nseg = 9
    dend_7 nseg = 3
    dend_5 nseg = 17
    dend_4 nseg = 9
    dend_2 nseg = 3
    dend_29 nseg = 3
    dend_26 nseg = 3
    dend_19 nseg = 11
    dend_16 nseg = 13
    dend_12 nseg = 3
    dend_9 nseg = 3
    dend_8 nseg = 3
    dend_18 nseg = 11
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cACint209_L5_LBC_b1fb5cc4b0_0_0


