// Cell: cNAC187_L1_SLAC_16735ed026_0_0
/*
{
  "id" : "cNAC187_L1_SLAC_16735ed026_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-7.7891, -4.57272, 0.0191985, 1.93688", "-6.98801, -4.07011, 0.0163976, 3.30389", "-6.18691, -3.56751, 0.0135968, 4.71568", "-5.38581, -3.0649, 0.010796, 5.9877", "-4.58471, -2.56229, 0.00799515, 7.27615", "-3.78362, -2.05968, 0.00519432, 8.62437", "-2.98252, -1.55708, 0.00239349, 9.93247", "-2.18142, -1.05447, -4.07344E-4, 10.8253", "-1.38032, -0.551862, -0.00320818, 11.6633", "-0.579227, -0.0492547, -0.00600901, 12.3985", "0.22187, 0.453353, -0.00880984, 13.2111", "1.02297, 0.95596, -0.0116107, 14.0859", "1.82406, 1.45857, -0.0144115, 14.3863", "2.62516, 1.96117, -0.0172123, 14.0239", "3.42626, 2.46378, -0.0200132, 13.5761", "4.22736, 2.96639, -0.022814, 13.0256", "5.02845, 3.469, -0.0256148, 12.1349", "5.82955, 3.9716, -0.0284157, 11.234", "6.63065, 4.47421, -0.0312165, 9.58323", "7.43175, 4.97682, -0.0340173, 7.03184", "8.23284, 5.47943, -0.0368182, 4.00358" ]
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "1.28989, -5.27301, 0.919682, 2.64", "1.66986, -5.90395, 4.51442, 2.64", "2.30307, -7.01004, 9.76468, 2.64", "3.02958, -8.31809, 15.1757, 2.28", "4.0943, -10.2351, 23.1058, 1.92", "4.60985, -11.1634, 26.9456, 1.68", "4.96261, -11.7985, 29.5729, 1.68", "5.14569, -12.1208, 30.8108, 1.2", "5.45207, -12.6037, 32.2414, 1.2" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4999999438016871
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-6.61011, -3.63502, -2.27032, 2.4", "-8.65096, -5.21552, -1.71036, 2.4", "-9.461, -5.84283, -1.4881, 2.4", "-11.7666, -7.62836, -0.855496, 2.4", "-15.1379, -10.2392, 0.0694996, 2.16", "-16.3394, -11.1697, 0.399179, 2.16" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4999999438016871
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "3.72989, -3.53, -3.21032, 3.25", "4.55608, -4.54782, -3.35824, 3.25", "5.39286, -5.57867, -3.50805, 3.25", "9.42448, -10.5453, -4.22985, 2.76", "11.712, -13.3634, -4.63941, 2.64", "14.8772, -17.2627, -5.20609, 2.52" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4999999438016871
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "3.98989, 7.72599, 0.259682, 2.4", "3.86094, 8.84701, 2.80065, 2.4", "3.67611, 10.9516, 7.38847, 2.16", "3.52896, 12.6273, 11.0412, 1.68", "3.39615, 14.1397, 14.338, 1.44", "3.35621, 14.5945, 15.3294, 1.44", "3.1882, 16.5077, 19.5, 1.44", "3.12401, 17.048, 20.7219, 1.44" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4999999438016871
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "8.23284, 5.47943, -0.0368182, 0.873113", "20.9391, 13.4513, -0.0368182, 0.873113", "33.6454, 21.4232, -0.0368182, 0.873113" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "5.45207, -12.6037, 32.2414, 1.2", "4.94936, -12.4395, 32.3306, 1.2", "3.66218, -11.9476, 32.5248, 1.2", "2.8726, -11.6102, 32.622, 1.2", "1.31526, -10.8833, 32.7911, 1.2", "0.69088, -10.5597, 32.8921, 1.2", "-0.0224983, -10.1764, 33.0241, 1.2", "-0.886796, -9.7078, 33.1863, 1.2", "-2.05419, -9.11851, 33.4407, 1.2", "-3.06665, -8.70834, 33.6761, 1.08", "-4.44155, -8.38993, 34.0537, 1.32", "-5.33356, -8.36386, 34.3298, 1.32", "-6.84206, -8.93445, 34.959, 1.08", "-7.82301, -9.86038, 35.4788, 1.44", "-8.24583, -10.4656, 35.7403, 1.44", "-8.72187, -11.3414, 36.0789, 1.44", "-9.12479, -12.2122, 36.3728, 1.44", "-9.68458, -13.6484, 36.8652, 1.32", "-9.95243, -14.4407, 37.1509, 1.32", "-10.2856, -15.2539, 37.4603, 1.32", "-11.1238, -17.0265, 38.2324, 1.32" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "5.45207, -12.6037, 32.2414, 1.32", "5.94096, -12.0811, 36.2086, 1.32", "6.05005, -11.9515, 37.0199, 1.32", "6.54814, -11.4955, 39.8575, 1.32", "7.24782, -10.9937, 42.8773, 1.32", "7.60955, -10.7766, 44.1316, 1.32", "7.98463, -10.5888, 45.1866, 1.32", "9.10498, -10.0573, 47.6301, 0.96", "10.1657, -9.74454, 49.0902, 1.44", "11.3542, -9.67613, 49.8902, 1.44", "12.5568, -9.72248, 50.3985, 1.44", "14.9141, -9.75831, 51.4902, 1.44", "17.178, -9.72128, 52.7244, 1.08", "18.023, -9.66695, 53.2617, 1.08", "20.483, -9.41903, 55.5358, 1.08", "21.0076, -9.36026, 56.1917, 1.08", "22.9876, -9.14963, 59.2657, 1.44", "23.8578, -9.08347, 60.9478, 1.44", "24.1455, -9.06643, 61.6689, 1.44", "25.0113, -9.09589, 64.498, 1.44", "25.2644, -9.22154, 65.7746, 1.44", "25.246, -9.39212, 66.5967, 1.44", "24.7384, -9.95102, 68.1094, 1.44", "23.9465, -10.6765, 69.7926, 1.44", "23.1963, -11.3694, 71.3051, 1.08", "22.6881, -11.8507, 72.234, 1.08", "21.7241, -13.0863, 74.3753, 1.08", "21.248, -14.0733, 75.9691, 1.08", "21.0923, -15.0183, 77.38, 1.32", "21.2013, -16.1725, 79.0332, 1.32", "21.3476, -16.7482, 79.7889, 1.32", "22.0203, -18.9063, 82.3831, 1.2", "22.6474, -20.8634, 84.4767, 1.2", "23.1702, -22.4757, 86.1709, 0.96", "23.4958, -23.588, 87.2998, 0.96", "23.9617, -25.0323, 88.7269, 1.32", "24.5334, -26.1878, 89.9548, 1.32", "25.3923, -27.542, 91.3743, 1.32", "26.6774, -29.2951, 93.2287, 1.32", "26.9404, -29.6324, 93.6294, 1.32", "27.4358, -30.1414, 94.4007, 1.32", "28.9041, -30.8582, 96.4461, 1.08" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "-16.3394, -11.1697, 0.399179, 1.68", "-17.5917, -13.2018, -3.10275, 1.68", "-18.0092, -13.7975, -4.05357, 1.68", "-19.032, -15.2394, -6.13663, 1.68", "-19.4488, -15.8963, -6.9902, 1.2", "-19.7067, -16.3496, -7.53788, 1.2", "-20.2806, -17.4642, -8.8316, 1.2", "-20.5721, -18.1457, -9.4516, 1.2", "-20.7556, -18.7121, -9.93937, 1.2", "-20.9968, -19.9378, -10.8638, 1.2", "-21.0351, -20.3631, -11.2064, 1.2", "-20.9971, -20.7444, -11.5155, 1.2", "-20.6919, -21.7598, -12.3817, 1.2", "-20.5467, -22.1391, -12.7112, 1.2", "-20.3523, -22.6115, -13.091, 1.2", "-20.1789, -23.0523, -13.3907, 1.2", "-19.8126, -24.2424, -13.9166, 1.56", "-19.5056, -25.7128, -14.2336, 1.56", "-19.4041, -26.6396, -14.2773, 1.56", "-19.4255, -28.123, -14.1233, 1.08", "-19.5302, -28.8997, -14.0577, 1.08", "-20.1359, -31.7387, -13.8246, 1.56", "-20.443, -32.9076, -13.7207, 1.56", "-20.6907, -33.8107, -13.6467, 1.56", "-21.1342, -35.4576, -13.5944, 1.08", "-21.8471, -38.9067, -13.2869, 1.44", "-21.9129, -39.9646, -13.1267, 1.44", "-21.8143, -40.8288, -12.9607, 1.44", "-21.6037, -41.518, -12.7258, 0.72", "-21.4653, -41.8375, -12.5901, 0.72", "-19.848, -44.9926, -10.9635, 1.44", "-19.2379, -46.1338, -10.2691, 1.44", "-19.0217, -46.5787, -10.0185, 1.44", "-18.1153, -48.7843, -8.93406, 1.2", "-17.8715, -49.5139, -8.63769, 1.2", "-17.5844, -50.6413, -8.3189, 1.2", "-17.3829, -51.8075, -8.15914, 0.84", "-17.1824, -53.3699, -7.99888, 1.32", "-17.0185, -54.6759, -7.92423, 1.32", "-16.9005, -55.4759, -7.92379, 1.32", "-16.4321, -57.4164, -7.99417, 0.6", "-16.1783, -58.1552, -8.04867, 0.6", "-15.8498, -58.9376, -8.11287, 0.6", "-15.1746, -60.4279, -8.23717, 1.32", "-14.4487, -61.982, -8.35894, 1.32", "-13.8597, -63.2968, -8.45021, 1.32", "-13.2397, -64.8408, -8.51107, 1.8", "-12.8687, -65.9615, -8.52475, 1.8", "-12.474, -67.6275, -8.50334, 1.08", "-12.2656, -69.0408, -8.44964, 1.08", "-12.1745, -70.2328, -8.40043, 1.08", "-12.0842, -72.4324, -8.30589, 0.72", "-12.0361, -73.76, -8.24696, 0.72", "-11.963, -75.058, -8.18736, 1.44", "-11.8157, -76.3675, -8.08493, 1.44", "-11.588, -77.6758, -8.07435, 1.44", "-11.3094, -78.5699, -8.13599, 0.96", "-11.0171, -79.2096, -8.22501, 0.96", "-10.4516, -80.2219, -8.40122, 0.6", "-9.2644, -82.1289, -8.77873, 1.68", "-7.44373, -84.8736, -9.3535, 1.68", "-6.04499, -86.9162, -9.79192, 0.84", "-5.27864, -88.0687, -10.0289, 0.84", "-5.00073, -88.4961, -10.1132, 1.2", "-4.5923, -89.1576, -10.2309, 1.2", "-3.72863, -90.7062, -10.4414, 0.72", "-3.42273, -91.2988, -10.4357, 0.72", "-2.92512, -92.3028, -10.4244, 1.2", "-2.79612, -92.5277, -10.4218, 1.2", "-2.05669, -93.582, -10.3539, 0.6", "-1.36825, -94.4477, -10.2617, 0.6", "-0.465782, -95.5391, -10.1097, 1.44", "0.31599, -96.4856, -9.96268, 0.96", "1.43384, -97.9291, -9.72829, 0.96", "2.47634, -99.4318, -9.48444, 0.96", "2.61262, -99.6513, -9.46958, 0.96", "3.33629, -100.927, -9.48434, 0.72", "3.76013, -101.743, -9.54817, 0.72", "4.49402, -103.262, -9.73971, 1.44", "4.94004, -104.2, -9.89151, 1.44", "6.35106, -107.029, -10.4306, 0.84", "7.07529, -108.309, -10.6548, 0.84", "7.5611, -109.096, -10.8004, 0.84", "8.44226, -110.408, -11.0475, 1.44", "9.56088, -111.906, -11.322, 0.72", "10.0783, -112.563, -11.4105, 0.72", "11.2784, -114.117, -11.3812, 1.92" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-16.3394, -11.1697, 0.399179, 1.44", "-18.9633, -9.80112, 2.69199, 1.44", "-21.0123, -8.8847, 4.21515, 1.44", "-22.2829, -8.31643, 5.15967, 1.44", "-23.5835, -7.73473, 6.12649, 1.44", "-26.0581, -6.62795, 7.96605, 1.32", "-26.9017, -6.25064, 8.59317, 1.32", "-29.0905, -5.17823, 9.79904, 1.8" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "14.8772, -17.2627, -5.20609, 1.8", "16.4322, -18.5972, -6.89772, 1.8", "18.5469, -20.0449, -9.12813, 1.8", "19.5234, -20.5762, -10.2345, 1.44", "21.2944, -21.2942, -12.2071, 1.92", "21.9032, -21.4826, -12.8986, 1.92", "23.3389, -21.8508, -14.4872, 1.32", "25.4157, -22.1531, -16.6912, 1.8", "28.4833, -22.3369, -19.5978, 1.8", "30.0409, -22.355, -20.9337, 1.44", "32.2745, -22.3872, -22.5678, 1.44", "33.4538, -22.4051, -23.4002, 1.44", "34.1423, -22.4117, -23.826, 1.44", "36.376, -22.5382, -24.7549, 1.92", "37.7078, -22.7217, -24.9288, 1.92", "39.9927, -23.3416, -24.928, 2.16" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "14.8772, -17.2627, -5.20609, 1.08", "16.1173, -18.8203, -3.29169, 1.08", "16.8094, -19.7806, -2.28599, 1.32", "18.7321, -23.0302, 1.01875, 1.08", "19.1534, -23.8975, 1.87003, 1.56", "19.843, -25.7223, 3.54476, 0.84", "20.1636, -26.7212, 4.40024, 0.84", "20.5576, -28.2568, 5.53677, 1.2", "20.9777, -31.1592, 7.36962, 1.44", "21.0237, -32.0561, 7.72568, 1.44", "21.0725, -33.418, 8.28459, 1.44", "21.1479, -34.4664, 8.67545, 1.08", "21.3889, -36.1198, 9.26777, 1.68", "21.8689, -38.2718, 9.98386, 1.32", "22.4176, -40.1611, 10.4988, 1.08", "23.0882, -42.1187, 11.0396, 1.68", "23.8501, -44.3672, 11.5311, 1.32", "24.3079, -45.9847, 11.8458, 1.08", "24.4811, -46.7258, 11.9904, 1.08", "24.9165, -48.8009, 12.3465, 1.08", "25.1972, -50.0833, 12.5254, 1.08", "25.8796, -52.9557, 12.7294, 1.44", "26.4499, -55.1914, 12.8147, 0.96", "26.9469, -57.0922, 12.8663, 0.6", "27.2798, -58.3857, 12.8815, 1.08", "28.0356, -61.2523, 12.8243, 1.08", "28.502, -62.7772, 12.8047, 1.32", "29.2053, -64.3347, 12.8017, 1.8" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "3.12401, 17.048, 20.7219, 1.32", "3.2867, 16.7259, 21.1392, 1.32", "3.55521, 16.009, 22.6207, 1.32", "3.86964, 15.7211, 24.2659, 1.32", "4.09167, 15.7321, 24.9947, 1.32", "4.54318, 15.8743, 26.1333, 1.32", "5.12266, 16.0424, 27.2963, 1.32", "5.6871, 16.2603, 28.2576, 1.32", "6.67123, 16.6931, 29.6649, 1.32", "8.32854, 17.5059, 31.742, 1.08", "10.0714, 18.3828, 33.6194, 0.96", "11.0376, 18.8754, 34.5813, 0.96", "11.6854, 19.2053, 35.173, 0.96", "13.365, 20.1361, 36.7675, 1.32", "14.7211, 20.9654, 38.1955, 1.08", "15.8593, 21.7175, 39.3968, 0.84", "17.3777, 22.7026, 40.9796, 0.84", "18.0762, 23.1392, 41.6749, 0.84", "20.4829, 24.501, 43.794, 1.44", "23.2567, 25.9227, 45.8271, 1.2", "24.6537, 26.547, 46.6673, 1.2", "25.9516, 27.0998, 47.3313, 1.2", "28.4425, 28.185, 48.3782, 1.08", "30.4388, 29.1553, 49.1441, 1.08", "32.2641, 30.1259, 49.7372, 1.08", "36.6338, 32.6243, 51.2615, 1.08", "37.7407, 33.2998, 51.7271, 1.08", "38.5514, 33.8435, 52.1237, 1.08", "40.6101, 35.3332, 53.2434, 1.08", "41.3224, 35.9019, 53.6678, 1.44", "43.2528, 37.5245, 54.8372, 1.08", "44.1433, 38.2233, 55.3411, 1.08", "44.8054, 38.6522, 55.6719, 1.08", "45.8927, 39.262, 56.0405, 0.96", "47.0423, 39.8636, 56.232, 1.32", "48.193, 40.5077, 56.295, 1.32", "50.658, 42.051, 56.3343, 0.96", "51.4424, 42.5769, 56.3838, 0.96", "53.4361, 43.8965, 56.5454, 0.96", "54.2838, 44.4779, 56.6413, 1.32", "55.1079, 45.0704, 56.7295, 1.32", "56.6178, 46.4611, 56.8394, 1.2", "57.2967, 47.343, 56.7762, 1.32" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "3.12401, 17.048, 20.7219, 0.84", "1.79139, 17.748, 20.8275, 0.84", "1.24087, 18.0878, 20.911, 0.84", "-0.235521, 19.1779, 21.1862, 1.32", "-1.38419, 20.2585, 21.3935, 0.72", "-2.5008, 21.5628, 21.5951, 1.44", "-3.90997, 23.6006, 21.8491, 0.96", "-4.26527, 24.4513, 21.9421, 0.96", "-4.50361, 25.5444, 22.0822, 0.84", "-4.62613, 27.458, 22.325, 1.2", "-4.59845, 28.4055, 22.4119, 0.72", "-4.52002, 29.4611, 22.4702, 1.32", "-4.44594, 31.6526, 22.4855, 0.84", "-4.47922, 32.3131, 22.4977, 0.84", "-4.71827, 33.9284, 22.547, 0.84", "-4.87554, 34.624, 22.5759, 1.2", "-5.0697, 35.4826, 22.5979, 1.2", "-5.41743, 37.3481, 22.6112, 1.56", "-5.52222, 38.4351, 22.6823, 1.56", "-5.42592, 40.2766, 22.9561, 0.96", "-5.33833, 40.6536, 23.0444, 0.96", "-4.66689, 42.5914, 23.5938, 1.2", "-4.24233, 43.5561, 23.9084, 1.2", "-2.99324, 46.1724, 24.8324, 0.84", "-2.55843, 47.2377, 25.2681, 0.84", "-2.29619, 48.1207, 25.6561, 0.84", "-2.15294, 49.0735, 26.0511, 0.72", "-2.1615, 49.6909, 26.2717, 0.72", "-2.37635, 51.4165, 26.7603, 1.32", "-2.77829, 53.3535, 27.128, 1.32", "-2.98654, 54.2361, 27.2842, 0.96", "-3.21586, 55.2132, 27.4446, 0.96", "-3.52712, 56.6156, 27.6456, 1.44", "-3.64381, 57.0828, 27.7004, 1.44", "-4.01244, 58.1063, 27.7428, 0.84", "-4.63015, 59.1338, 27.732, 0.84", "-5.37896, 60.0369, 27.7321, 1.56", "-6.09949, 60.7501, 27.6652, 1.56", "-6.78156, 61.3762, 27.5864, 1.2", "-8.34835, 62.8247, 27.3789, 1.56", "-9.77458, 64.1504, 27.1688, 0.72", "-10.3106, 64.6802, 27.084, 0.72", "-11.9415, 66.4974, 26.8099, 0.72", "-12.6485, 67.4591, 26.6879, 0.72", "-13.2704, 68.5325, 26.5839, 1.2", "-13.6084, 69.247, 26.5365, 1.2", "-14.2301, 70.6499, 26.4428, 0.48", "-14.6549, 71.6257, 26.4196, 0.48", "-15.0755, 72.5852, 26.5102, 0.96", "-15.5507, 73.6502, 26.6362, 0.96", "-15.8519, 74.3508, 26.7704, 0.36", "-16.2397, 75.2118, 26.9842, 0.36", "-16.976, 76.6765, 27.4152, 0.96", "-17.891, 78.2154, 27.7671, 0.48", "-18.7514, 79.4653, 27.9541, 1.08", "-19.5378, 80.5573, 28.0746, 1.32", "-20.0226, 81.2486, 28.123, 1.32", "-20.8254, 82.4399, 28.146, 1.32", "-22.348, 84.7167, 28.0547, 0.36", "-22.7845, 85.4717, 27.9348, 0.36", "-23.8515, 87.5799, 27.5262, 1.2", "-24.1318, 88.2622, 27.3864, 1.2", "-24.4998, 89.366, 27.1954, 0.72", "-24.8606, 90.6184, 27.0371, 0.72", "-25.3455, 92.2149, 26.9312, 0.48", "-25.7385, 93.2617, 26.7813, 0.48", "-26.1873, 94.1922, 26.5569, 1.2", "-26.4643, 94.6666, 26.477, 1.2", "-27.0711, 95.5959, 26.4142, 0.6", "-27.5545, 96.2891, 26.378, 0.6", "-28.0027, 96.9859, 26.3668, 0.6", "-28.3764, 97.6363, 26.2932, 0.6", "-29.287, 99.2025, 26.0138, 0.6", "-29.9035, 100.314, 25.7755, 1.32", "-30.8822, 102.208, 25.1434, 0.84", "-31.4814, 103.317, 24.6833, 0.84", "-32.3458, 104.847, 23.845, 0.84", "-32.8715, 105.83, 23.2507, 1.44", "-33.272, 106.597, 22.7582, 1.44", "-34.2998, 108.538, 21.5577, 0.84", "-34.8994, 109.577, 20.8533, 0.84", "-35.8975, 111.148, 19.7073, 0.72", "-36.6986, 112.483, 18.7083, 1.32", "-37.2398, 113.426, 17.9915, 0.48", "-37.7596, 114.329, 17.3314, 0.48", "-39.4406, 117.067, 15.5029, 1.08", "-39.8802, 117.732, 15.015, 1.08", "-40.7698, 118.913, 14.1064, 0.48", "-41.2246, 119.486, 13.6319, 0.48", "-41.8424, 120.299, 12.9682, 1.08", "-42.4381, 121.169, 12.3438, 1.08", "-43.6306, 123.086, 11.2351, 0.48", "-43.983, 123.671, 10.8968, 0.48", "-44.4035, 124.361, 10.4694, 1.08", "-45.2404, 125.766, 9.54537, 0.48", "-45.6167, 126.413, 9.02524, 0.48", "-45.8263, 126.783, 8.71114, 1.08", "-46.0651, 127.162, 8.41148, 1.08", "-47.0782, 128.593, 7.25171, 0.72", "-47.515, 129.158, 6.80444, 0.72", "-49.2116, 131.311, 5.24761, 1.08", "-49.7109, 131.968, 4.78023, 1.08", "-50.5616, 133.176, 4.11918, 0.48", "-50.8358, 133.58, 3.92738, 0.48", "-51.2319, 134.246, 3.74026, 0.96", "-51.5262, 134.825, 3.65749, 0.96", "-52.1888, 136.476, 3.97192, 0.96", "-52.9139, 139.213, 4.46145, 0.6", "-55.6327, 149.099, 2.47047, 0.6", "-60.3093, 158.23, 0.888555, 0.6" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "33.6454, 21.4232, -0.0368182, 0.6", "46.3516, 29.3951, -0.0368182, 0.6", "59.0579, 37.367, -0.0368182, 0.6" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_31",
    "id" : "dend_31",
    "points3d" : [ "-11.1238, -17.0265, 38.2324, 0.84", "-12.2256, -17.6688, 39.047, 0.84", "-13.296, -18.3695, 39.9558, 0.84", "-13.8305, -18.7246, 40.4122, 0.84", "-14.7625, -19.324, 41.1968, 0.84", "-15.9831, -20.0621, 42.2361, 1.2", "-19.1502, -21.6781, 45.1627, 0.72", "-19.9179, -22.0087, 45.9647, 1.08", "-20.9876, -22.3655, 47.2253, 0.72", "-22.5383, -22.7134, 49.1713, 0.72", "-23.4343, -22.7962, 50.3171, 0.72", "-25.4187, -22.6579, 52.7989, 1.56", "-25.9159, -22.5507, 53.3711, 1.56", "-27.2653, -22.1838, 54.9395, 1.2", "-27.9093, -21.9771, 55.7002, 1.2", "-28.5136, -21.7722, 56.3916, 1.2", "-29.5494, -21.4828, 57.4704, 1.2", "-30.2046, -21.3546, 58.098, 1.2", "-30.9283, -21.2361, 58.8375, 1.2", "-31.9693, -21.1368, 59.9892, 1.2", "-32.3865, -21.1232, 60.5057, 1.2", "-33.1185, -21.1624, 61.4995, 1.2", "-34.6925, -21.2619, 63.768, 0.96", "-35.485, -21.3088, 64.8477, 0.96", "-36.5953, -21.366, 66.1531, 0.6", "-37.1871, -21.3786, 66.6753, 1.08", "-38.9148, -21.4087, 67.961, 0.72", "-40.3939, -21.5024, 69.0464, 0.72", "-44.0589, -21.9443, 71.6227, 1.08", "-45.2341, -22.1333, 72.4606, 1.08", "-47.7753, -22.8052, 74.5389, 0.96", "-48.9708, -23.2859, 75.6807, 1.44", "-50.7668, -24.2425, 77.6918, 0.96", "-51.5237, -24.6982, 78.6373, 0.96", "-51.8776, -24.9114, 79.1346, 0.96", "-52.7671, -25.3436, 80.2831, 0.96", "-53.3864, -25.4297, 80.8722, 0.96", "-54.5206, -25.2668, 81.6935, 0.96", "-55.4781, -25.0789, 82.2899, 0.96", "-56.0941, -24.9969, 82.7204, 0.96", "-58.0109, -24.9708, 84.328, 1.68", "-59.1522, -25.1356, 85.4823, 1.2", "-60.4789, -25.6531, 87.1084, 1.2", "-61.3042, -26.1016, 88.2231, 0.72", "-62.6578, -27.0718, 90.2905, 1.2", "-63.7624, -28.1352, 92.2371, 0.96", "-64.2354, -28.8615, 93.3272, 0.96", "-64.7049, -29.8806, 94.6627, 0.96", "-69.9728, -32.0695, 102.903, 0.96", "-75.3631, -34.1791, 111.083, 0.96", "-79.2721, -34.6024, 120.278, 0.96", "-81.097, -34.1065, 130.099, 0.96", "-82.4458, -33.5418, 139.993, 0.96" ],
    "parent" : "dend_29",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "-11.1238, -17.0265, 38.2324, 1.32", "-12.1388, -17.8, 38.768, 1.08", "-13.2374, -18.7713, 39.6766, 1.08", "-14.4517, -19.9459, 40.7651, 1.44", "-15.1302, -20.6794, 41.3955, 1.2", "-16.255, -22.0378, 42.4955, 1.2", "-17.7779, -23.9846, 43.9954, 1.2", "-18.8519, -25.2821, 45.104, 0.96", "-19.4525, -25.9648, 45.7368, 0.96", "-19.9935, -26.558, 46.3758, 0.96", "-20.507, -27.1302, 47.035, 0.96", "-21.0533, -27.7136, 47.7253, 0.96", "-22.162, -28.5999, 48.9915, 1.2", "-22.9592, -29.028, 49.8471, 1.2", "-24.3616, -29.5316, 51.2725, 1.2", "-25.7505, -29.8593, 52.5399, 1.2", "-25.9626, -29.8959, 52.7221, 1.2", "-27.2279, -30.0927, 53.7351, 0.96", "-28.1259, -30.2488, 54.4078, 0.96", "-29.4249, -30.4862, 55.3149, 1.32", "-30.7157, -30.7959, 56.1076, 1.32", "-31.4101, -31.0399, 56.5032, 1.32", "-32.5299, -31.66, 57.1801, 1.32", "-33.1415, -32.1777, 57.5673, 1.32", "-33.7627, -32.8975, 57.971, 1.32", "-34.7231, -34.3098, 58.5676, 1.08", "-35.1917, -35.0887, 58.8363, 1.08", "-35.9021, -36.1761, 59.1472, 1.08", "-36.357, -36.7555, 59.285, 1.08", "-37.1133, -37.5306, 59.4729, 1.08", "-37.9178, -38.254, 59.6933, 1.08", "-38.4645, -38.7333, 59.8729, 1.08", "-39.807, -39.9795, 60.3648, 1.08", "-41.3315, -41.5186, 60.9771, 1.56", "-42.3326, -42.6784, 61.3509, 1.08", "-43.128, -43.7203, 61.591, 1.08", "-44.2464, -45.3085, 61.8156, 1.44", "-44.7457, -46.0349, 61.8571, 1.44", "-45.035, -46.4843, 61.8518, 1.44", "-46.2138, -48.2349, 61.7298, 1.08", "-47.3393, -49.7172, 61.5466, 1.08", "-48.4342, -50.9784, 61.37, 1.44", "-49.1639, -51.7359, 61.2813, 0.96", "-49.8879, -52.4908, 61.2206, 1.44", "-51.2856, -54.0133, 61.171, 0.96", "-51.9564, -54.8151, 61.2066, 0.96", "-52.5129, -55.5846, 61.2414, 0.96", "-52.8141, -56.0249, 61.26, 0.96", "-53.4596, -56.8842, 61.2974, 0.96", "-53.9062, -57.3561, 61.323, 0.96", "-54.6667, -58.0531, 61.3886, 1.44", "-55.69, -58.9727, 61.506, 1.44", "-56.681, -59.8713, 61.6376, 0.84", "-57.5657, -60.7098, 61.7644, 0.84", "-58.7267, -61.879, 61.9703, 1.32", "-60.0849, -63.395, 62.2434, 0.96", "-60.7405, -64.1954, 62.382, 0.96", "-61.1585, -64.7513, 62.4793, 0.96", "-61.9048, -65.7769, 62.6697, 1.44", "-62.5223, -66.6179, 62.7438, 0.96", "-63.116, -67.3644, 62.7343, 0.96", "-64.1966, -68.5389, 62.5944, 0.96", "-64.5905, -68.921, 62.4962, 0.96", "-65.7268, -69.9492, 62.1438, 1.32", "-67.6718, -71.5912, 61.4701, 0.96", "-68.3288, -72.1079, 61.2336, 0.96", "-68.7599, -72.4348, 61.0858, 0.96", "-71.3718, -74.3018, 60.2516, 0.96", "-72.081, -74.7753, 60.054, 0.96", "-73.0556, -75.381, 59.8328, 0.96", "-74.2091, -76.0283, 59.6873, 0.96", "-75.4083, -76.6952, 59.5666, 0.96", "-76.423, -77.2974, 59.5044, 0.96", "-77.2207, -77.8239, 59.5581, 0.96", "-77.6632, -78.1392, 59.6108, 0.96", "-78.6116, -78.8471, 59.7809, 1.2", "-79.317, -79.3711, 59.9473, 1.2", "-80.2412, -80.011, 60.2022, 1.2", "-81.8567, -81.0596, 60.6806, 1.08", "-82.8644, -81.6114, 60.9469, 1.08", "-83.3141, -81.8176, 61.0466, 1.08", "-84.1723, -82.1384, 61.197, 0.84", "-84.7872, -82.3473, 61.2762, 0.84", "-85.4112, -82.5745, 61.3335, 0.84", "-87.4813, -83.4812, 61.4304, 1.68", "-88.3988, -83.9893, 61.477, 1.08", "-89.3971, -84.6649, 61.5275, 1.08", "-90.194, -85.2912, 61.5728, 1.08", "-91.0353, -85.9716, 61.6254, 1.08", "-91.4256, -86.312, 61.6519, 1.08", "-91.7872, -86.6985, 61.6765, 1.08", "-92.2877, -87.3575, 61.7058, 1.08", "-92.6621, -87.9151, 61.723, 1.08", "-93.6422, -89.5175, 61.752, 1.08", "-94.2047, -90.4876, 61.7051, 1.08", "-95.5316, -92.7364, 61.3258, 1.8", "-96.3529, -94.19, 60.9604, 1.2", "-96.5639, -94.5983, 60.8326, 1.2", "-96.9738, -95.4829, 60.4554, 0.96", "-97.6023, -96.8999, 59.7243, 1.32", "-98.5402, -98.6636, 58.3831, 0.72", "-99.0072, -99.4524, 57.6524, 0.72", "-99.1584, -99.7015, 57.4121, 0.72", "-100.248, -101.449, 55.7793, 0.72", "-101.045, -102.705, 54.6767, 1.32", "-102.645, -105.305, 52.5772, 1.68", "-103.203, -106.242, 51.8319, 1.68", "-103.628, -106.977, 51.2397, 1.2", "-104.107, -107.885, 50.5463, 1.2", "-104.468, -108.602, 50.0519, 1.2", "-105.313, -110.39, 48.9322, 0.84", "-106.034, -111.971, 48.154, 0.84", "-106.578, -113.022, 47.5931, 0.84", "-107.427, -114.6, 46.7611, 1.32", "-108.053, -115.722, 46.1226, 0.72", "-108.687, -116.749, 45.4985, 0.72", "-109.472, -117.927, 44.8096, 1.44", "-110.782, -119.696, 43.6992, 0.96", "-111.433, -120.466, 43.1226, 0.96", "-112.986, -122.13, 41.694, 0.96", "-113.979, -123.124, 40.6785, 0.72", "-114.828, -123.831, 39.8354, 0.72", "-115.792, -124.462, 38.8471, 1.44", "-117.31, -125.224, 37.2783, 0.96", "-118.061, -125.486, 36.477, 0.96", "-119.357, -125.845, 35.114, 0.96", "-120.659, -126.111, 33.6985, 1.44", "-122.78, -126.386, 31.2874, 0.72", "-123.877, -126.459, 30.0094, 0.72", "-125.77, -126.411, 27.7277, 1.32", "-132.866, -133.662, 26.33, 1.32", "-140.17, -140.131, 23.3822, 1.32" ],
    "parent" : "dend_29",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "28.9041, -30.8582, 96.4461, 0.6", "28.748, -29.0478, 96.9247, 0.6", "28.4532, -27.087, 97.3543, 0.6", "28.1097, -25.4968, 97.6361, 0.6", "27.8085, -24.3616, 97.8123, 0.6", "27.4982, -23.2947, 97.949, 0.6", "27.3033, -22.6168, 98.0474, 1.2", "26.9051, -21.6391, 98.1774, 0.72", "26.277, -20.4559, 98.3648, 0.72", "26.0624, -20.1018, 98.4608, 0.72", "25.1526, -18.7818, 99.0233, 1.2", "24.4903, -17.9133, 99.498, 1.2", "23.6021, -16.8188, 100.184, 0.84", "23.2868, -16.4594, 100.45, 0.84", "21.9026, -15.0287, 101.714, 0.84", "21.5156, -14.663, 102.076, 0.84", "20.9077, -14.2233, 102.627, 0.84", "17.7312, -4.90109, 105.956, 0.84", "13.8518, 4.21778, 109.043, 0.84", "9.82268, 12.5821, 113.549, 0.84", "7.52932, 21.2181, 118.755, 0.84", "5.16242, 29.6208, 124.264, 0.84", "1.6186, 38.658, 127.92, 0.84", "-3.31057, 45.8124, 133.331, 0.84", "-7.66716, 53.4718, 138.604, 0.84", "-12.4379, 61.0895, 143.564, 0.84", "-15.5577, 68.4696, 149.957, 0.84", "-17.5011, 75.1113, 157.454, 0.84", "-19.5637, 81.5846, 165.053, 0.84", "-19.8701, 89.1853, 171.945, 0.84", "-19.5487, 97.7568, 177.712, 0.84", "-21.3075, 106.99, 182.138, 0.84", "-23.5047, 115.805, 187.106, 0.84", "-26.5915, 124.666, 191.495, 0.84", "-29.4527, 133.677, 195.756, 0.84" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "28.9041, -30.8582, 96.4461, 0.84", "30.0831, -30.6136, 97.1271, 0.84", "31.3314, -30.474, 98.0677, 0.84", "32.2968, -30.4377, 98.9493, 1.2", "34.2347, -30.4255, 100.796, 1.2", "35.7842, -30.4735, 102.183, 0.96", "36.7635, -30.5431, 103.016, 0.96", "37.9695, -30.7331, 104.094, 0.96", "39.4747, -31.1145, 105.451, 0.72", "41.024, -31.6808, 106.812, 1.2", "42.3357, -32.3545, 107.782, 0.72", "42.9581, -32.6947, 108.2, 0.72", "43.3678, -32.9165, 108.434, 0.72", "44.624, -33.7122, 109.008, 1.08", "45.5968, -34.5166, 109.349, 1.08", "46.2364, -35.2769, 109.577, 1.08", "53.3013, -35.4788, 116.651, 1.08", "61.0874, -35.0644, 122.914, 1.08", "67.5424, -34.8761, 130.549, 1.08", "72.8646, -35.7071, 138.978, 1.08", "78.5118, -34.622, 147.166, 1.08", "84.269, -33.9644, 155.319, 1.08", "89.3478, -32.114, 163.751, 1.08", "93.7481, -31.5332, 172.714, 1.08" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "11.2784, -114.117, -11.3812, 0.84", "11.3146, -115.292, -11.2382, 0.84", "11.498, -117.129, -11.1853, 1.32", "11.731, -118.756, -10.9978, 0.72", "11.8809, -119.803, -10.8305, 0.72", "11.9504, -120.45, -10.7183, 1.32", "12.164, -122.757, -10.307, 0.84", "12.2534, -123.594, -10.1555, 0.84", "12.5691, -126.054, -9.75591, 1.32", "12.6989, -126.806, -9.61513, 1.32", "12.9801, -128.225, -9.27982, 0.6", "13.1796, -129.135, -9.03409, 0.6", "13.4367, -130.178, -8.72119, 1.2", "13.7671, -131.288, -8.46968, 1.2", "14.8026, -134.166, -8.05009, 0.72", "15.1075, -134.892, -7.95975, 0.72", "15.5236, -135.746, -7.84488, 0.72", "15.9331, -136.578, -7.73862, 0.72", "16.717, -138.251, -7.51604, 1.56", "16.9994, -138.886, -7.4363, 1.56", "17.6999, -140.44, -7.53033, 0.96", "18.5315, -142.277, -7.82203, 1.44", "19.1136, -143.593, -8.02525, 1.44", "19.9282, -145.497, -8.35503, 0.84", "20.2442, -146.243, -8.49683, 0.84", "22.3509, -150.981, -9.67699, 1.2", "22.6322, -151.593, -9.87934, 1.2", "23.8344, -154.111, -10.6472, 0.6", "24.5252, -155.401, -10.9665, 0.6", "25.8009, -157.668, -11.1591, 1.56", "27.1674, -160.252, -10.9528, 0.72", "27.7807, -161.625, -10.6233, 1.2", "28.9092, -164.729, -9.51668, 0.6", "29.2294, -166.077, -8.82627, 1.08", "29.272, -168.908, -6.49109, 1.08", "28.9855, -169.714, -5.50371, 1.56", "28.3235, -170.655, -4.0491, 1.56", "26.3559, -172.312, -1.03871, 0.84", "25.5591, -172.714, -0.21054, 0.84", "24.1239, -173.189, 1.00018, 1.32", "22.1048, -173.582, 2.44046, 0.96", "21.7645, -173.632, 2.66613, 0.96", "19.8818, -173.807, 3.79854, 1.44", "18.5694, -173.915, 4.39498, 0.36", "17.9262, -173.947, 4.66021, 1.44", "15.6082, -173.988, 5.53931, 0.6", "14.1274, -173.967, 6.06855, 0.6", "12.5927, -173.914, 6.74837, 1.68", "10.5959, -173.785, 7.7874, 0.84", "9.88038, -173.722, 8.1836, 0.84", "9.55808, -173.698, 8.34386, 0.36", "8.431, -173.632, 8.90076, 0.36", "5.69481, -173.622, 10.0731, 0.6", "4.73763, -173.658, 10.4705, 0.6", "4.31709, -173.686, 10.6629, 0.6", "2.49281, -173.932, 11.4904, 0.6", "-0.6885, -174.557, 12.8218, 1.44", "-3.39509, -175.346, 13.6795, 1.68", "-4.2322, -184.577, 18.3713, 1.68" ],
    "parent" : "dend_22",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "11.2784, -114.117, -11.3812, 0.84", "12.9411, -114.571, -11.0782, 0.84", "14.314, -114.97, -10.8547, 0.84", "15.1445, -115.198, -10.7286, 0.84", "18.4087, -116.126, -10.2793, 1.32", "19.3507, -116.394, -10.1667, 0.6", "20.6198, -116.732, -10.0349, 0.6", "22.0167, -117.058, -9.91887, 1.2", "23.9398, -117.444, -9.79946, 0.6", "25.7102, -117.718, -9.72551, 0.6", "28.7283, -118.072, -9.6676, 1.08", "30.2982, -118.189, -9.63441, 1.56", "32.5102, -118.281, -9.5871, 0.48", "35.6222, -118.265, -9.52509, 0.48", "36.4791, -118.208, -9.51116, 0.48", "37.1439, -118.131, -9.50756, 1.2", "39.0493, -117.837, -9.51886, 0.72", "40.8518, -117.523, -9.5, 0.72", "42.1504, -117.277, -9.46624, 0.72", "43.8352, -116.928, -9.33116, 1.2", "46.0163, -116.478, -9.07575, 0.48", "47.6878, -116.123, -8.83315, 1.2", "50.3262, -115.556, -8.37437, 1.2", "51.4655, -115.31, -8.14541, 1.2", "53.5297, -114.897, -7.65432, 0.6", "54.9292, -114.641, -7.27624, 0.6", "55.5522, -114.511, -7.08665, 0.6", "56.3667, -114.365, -6.83656, 1.2", "57.8502, -114.153, -6.40794, 1.2", "59.127, -113.993, -6.05888, 0.48", "60.1553, -113.897, -5.80872, 0.48", "60.5108, -113.877, -5.71682, 1.08", "62.2976, -113.888, -5.25952, 0.36", "63.7721, -113.954, -4.83499, 0.96", "64.5341, -114.011, -4.61768, 0.96", "65.1756, -114.072, -4.44394, 0.96", "66.3202, -114.188, -4.14255, 0.96", "67.5444, -114.337, -3.84324, 0.96", "69.3954, -114.638, -3.45872, 0.6", "71.165, -114.987, -3.13157, 0.6", "71.5272, -115.067, -3.07624, 1.32", "72.6703, -115.367, -2.93559, 1.32", "73.0645, -115.483, -2.89857, 0.48", "74.441, -115.976, -2.8287, 0.48", "74.7958, -116.146, -2.82942, 1.08", "77.1685, -117.422, -2.84009, 0.96", "78.1189, -117.978, -2.84843, 0.48", "78.4728, -118.191, -2.85191, 0.48", "80.2887, -119.298, -2.87031, 1.44", "82.4365, -120.632, -2.89243, 0.72", "83.6245, -121.395, -2.90439, 0.72", "84.3425, -121.87, -2.95101, 1.2", "85.7081, -122.739, -3.09664, 1.2", "87.1502, -123.598, -3.30158, 0.6", "88.2612, -124.213, -3.54745, 0.6", "89.2314, -124.694, -3.82007, 1.08", "91.2829, -125.61, -4.47206, 0.48", "92.2711, -125.995, -4.81061, 0.48", "93.4488, -126.39, -5.26504, 1.08", "94.9488, -126.784, -5.86221, 0.6", "96.1411, -127.032, -6.32471, 0.6", "97.1174, -127.203, -6.7166, 0.6", "97.3836, -127.246, -6.81395, 1.08", "98.6736, -127.442, -7.29626, 0.48", "99.662, -127.588, -7.653, 0.48", "99.937, -127.618, -7.74226, 0.48", "102.143, -127.812, -8.49904, 0.96", "103.396, -127.879, -8.92317, 0.36", "104.407, -127.896, -9.24016, 0.36", "104.918, -127.895, -9.40148, 0.96", "105.516, -127.863, -9.5993, 0.36", "106.346, -127.76, -9.86461, 0.36", "106.622, -127.709, -9.94124, 0.36", "107.376, -127.55, -10.1961, 0.84", "109.422, -127.165, -11.0006, 0.24", "109.892, -127.089, -11.2032, 0.24", "110.555, -127.012, -11.5132, 0.84" ],
    "parent" : "dend_22",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-29.0905, -5.17823, 9.79904, 1.68", "-30.369, -6.10163, 10.3007, 1.68", "-31.5016, -6.91959, 10.745, 1.68", "-33.6067, -8.44002, 11.5708, 1.68", "-35.1845, -9.57958, 12.1898, 1.68", "-36.8106, -10.754, 12.8277, 2.04" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-29.0905, -5.17823, 9.79904, 1.08", "-30.8638, -4.62906, 10.0329, 1.08", "-32.4311, -4.05832, 10.23, 1.08", "-33.6231, -3.5478, 10.3741, 1.08", "-34.3234, -3.19451, 10.4524, 1.08", "-35.0011, -2.78116, 10.558, 0.72", "-35.7189, -2.29299, 10.6839, 1.2", "-36.4266, -1.75759, 10.8376, 1.2", "-36.8322, -1.41614, 10.9196, 1.2", "-38.0951, -0.269765, 11.1255, 1.2", "-39.191, 0.793765, 11.2509, 1.2", "-39.9971, 1.58849, 11.2991, 0.6", "-40.8474, 2.39343, 11.3108, 0.6", "-41.6015, 3.06048, 11.2941, 0.6", "-42.2431, 3.60348, 11.2563, 0.6", "-43.2828, 4.49404, 11.187, 0.6", "-44.6257, 5.66933, 11.0929, 0.72", "-45.2987, 6.31571, 10.9882, 0.72", "-46.3245, 7.38912, 10.7736, 1.2", "-46.8644, 7.99188, 10.5885, 1.2", "-48.1671, 9.51031, 10.044, 0.96", "-49.0361, 10.5459, 9.63849, 0.96", "-50.9157, 12.7755, 8.62839, 0.96", "-52.5158, 14.5885, 7.72561, 1.44", "-54.3831, 16.6341, 6.6363, 0.84", "-55.0563, 17.3366, 6.24645, 0.84", "-55.4933, 17.7641, 6.00548, 0.84", "-56.529, 18.7306, 5.50529, 1.2", "-57.517, 19.6165, 5.15796, 1.2", "-58.2611, 20.3096, 4.92259, 0.48", "-58.8281, 20.9163, 4.7917, 0.48", "-59.8615, 22.1551, 4.53659, 1.08", "-61.0088, 23.6368, 4.2796, 0.6", "-61.393, 24.1608, 4.2061, 0.6", "-62.1484, 25.1968, 4.08055, 1.92", "-63.1667, 26.5882, 3.95402, 0.84", "-63.8024, 27.4491, 3.91174, 0.84", "-64.3897, 28.2144, 3.91801, 0.84", "-64.96, 28.9693, 3.97168, 1.2", "-65.4139, 29.6511, 3.92248, 1.2", "-66.1422, 30.8767, 3.68542, 1.56", "-66.6944, 31.8052, 3.42384, 1.56", "-67.4347, 33.05, 3.00645, 1.56", "-67.8152, 33.6552, 2.68636, 1.56", "-69.3506, 36.0055, 1.30921, 1.08", "-70.0256, 36.9665, 0.730105, 0.6", "-70.8815, 38.1337, 0.0253226, 0.6", "-71.2886, 38.6981, -0.346345, 0.6", "-73.2739, 41.3945, -2.14831, 1.32", "-74.673, 43.1424, -3.25436, 0.96", "-75.501, 44.1237, -3.78086, 1.44", "-75.9949, 44.7277, -4.04606, 1.44", "-77.6043, 46.7815, -4.68461, 0.48", "-78.2609, 47.5697, -4.89191, 0.48", "-79.2788, 48.6708, -5.07942, 1.08", "-80.2683, 49.6417, -5.30553, 1.08", "-81.8869, 51.134, -5.64151, 0.48", "-82.8515, 51.9797, -5.79427, 0.48", "-84.9812, 53.7814, -6.11645, 1.32", "-85.468, 54.1902, -6.23287, 1.32", "-86.5034, 55.0922, -6.54566, 1.32", "-87.457, 55.9252, -6.78432, 0.72", "-88.0271, 56.4264, -6.9028, 0.72", "-89.5846, 57.8946, -7.03545, 1.44", "-90.337, 58.7336, -6.9884, 1.44", "-91.7434, 60.4859, -6.83233, 1.44", "-93.1384, 62.5083, -6.59676, 1.08", "-93.5878, 63.2746, -6.49365, 1.08", "-94.119, 64.3141, -6.26087, 0.6", "-94.9044, 65.9727, -5.75494, 1.2", "-95.3547, 66.9859, -5.45292, 1.2", "-96.0025, 68.5044, -5.03033, 1.2", "-96.4679, 69.6411, -4.79799, 1.2", "-97.3625, 71.9398, -4.37188, 0.48", "-97.8519, 73.2689, -4.06948, 0.48", "-98.3444, 74.7976, -3.68447, 1.08", "-98.4722, 75.3053, -3.55496, 0.48", "-98.7442, 76.6073, -3.2371, 1.08", "-99.0587, 78.1211, -2.91697, 1.08", "-99.6664, 80.7967, -2.50675, 1.56", "-99.8475, 81.5958, -2.37218, 0.48", "-100.033, 82.3157, -2.24551, 0.48", "-100.281, 83.3403, -2.02549, 1.56", "-100.636, 84.8907, -1.65051, 0.36", "-100.958, 86.2925, -1.33621, 0.36", "-101.125, 86.9751, -1.21721, 0.96", "-101.576, 88.7622, -0.90091, 1.56", "-102.073, 90.8556, -0.53565, 0.72", "-102.269, 91.7603, -0.434108, 0.72", "-102.408, 92.5029, -0.400653, 0.72", "-102.692, 94.0049, -0.419808, 1.68", "-103.117, 95.9033, -0.552287, 0.72", "-103.349, 96.697, -0.694023, 0.72", "-104.018, 98.551, -1.18392, 1.8", "-104.593, 100.081, -1.68511, 0.72", "-104.751, 100.563, -1.86386, 0.72", "-104.868, 100.998, -2.03545, 0.72", "-105.378, 103.229, -2.92888, 1.32", "-105.627, 104.272, -3.31177, 1.32", "-106.074, 105.893, -3.81281, 0.24", "-106.444, 106.975, -4.2758, 0.24", "-106.852, 108.107, -4.80868, 1.68", "-107.057, 108.671, -5.08268, 1.68", "-107.516, 109.768, -5.62906, 0.48", "-107.834, 110.376, -5.98465, 0.48", "-109.333, 112.952, -7.52736, 1.68", "-110.219, 114.377, -8.31699, 0.6", "-110.539, 114.885, -8.57617, 0.6", "-111.692, 116.688, -9.357, 1.68", "-113.181, 119.024, -10.1861, 0.48", "-113.714, 119.837, -10.3797, 0.48", "-114.953, 121.536, -10.4879, 0.48", "-115.5, 122.222, -10.4259, 0.48", "-116.667, 123.512, -10.0975, 1.44", "-116.96, 123.782, -9.97685, 1.44", "-117.835, 124.5, -9.58396, 0.84", "-119.073, 125.444, -9.09527, 1.68", "-121.127, 126.958, -8.57331, 0.6", "-122.347, 127.788, -8.35702, 0.6", "-124.076, 128.925, -7.96683, 0.6", "-124.879, 129.452, -7.76848, 0.6", "-125.7, 129.991, -7.56563, 0.6", "-127.657, 131.375, -7.1174, 1.32", "-129.295, 132.654, -6.81105, 1.32", "-131.667, 134.919, -6.23763, 0.36", "-132.087, 135.394, -6.11251, 0.36", "-133.043, 136.618, -5.80657, 1.56", "-133.752, 137.688, -5.55696, 0.72", "-134.298, 138.736, -5.31416, 1.2", "-134.602, 139.506, -5.29521, 0.12", "-135.067, 140.794, -5.42963, 1.2", "-135.536, 142.115, -5.59679, 0.6", "-135.695, 142.605, -5.67775, 0.6", "-136.078, 143.7, -5.9225, 1.08", "-137.065, 146.46, -6.77186, 1.08" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "39.9927, -23.3416, -24.928, 1.2", "41.0722, -23.2924, -26.4726, 1.2", "43.8308, -23.0755, -29.9966, 0.96", "44.9514, -22.8808, -31.0824, 0.96", "45.5663, -22.6929, -31.4783, 0.84", "46.9112, -22.1948, -32.0972, 0.84", "48.2068, -21.6605, -32.5412, 1.2", "51.2754, -20.185, -32.6963, 1.44", "52.9315, -19.4004, -32.5518, 0.96", "54.6453, -18.6071, -32.4481, 1.2", "55.3734, -18.2894, -32.4798, 1.2", "56.4266, -17.8703, -32.7091, 0.96", "57.1306, -17.6365, -32.9606, 0.96", "58.9105, -17.1048, -33.8421, 0.96", "59.2735, -17.0063, -34.0316, 0.96", "60.3641, -16.734, -34.5754, 0.96", "62.0172, -16.3506, -35.4145, 1.44", "63.1268, -16.115, -35.9837, 1.44", "64.0476, -15.9189, -36.4455, 1.44", "65.7056, -15.5466, -37.1785, 1.32", "66.5956, -15.3559, -37.5379, 1.32", "68.042, -15.0759, -38.0515, 1.2", "69.494, -14.8563, -38.5333, 0.84", "70.2261, -14.7704, -38.7361, 0.84", "71.9292, -14.6031, -39.2777, 1.44", "72.9714, -14.4988, -39.6107, 1.44", "73.9065, -14.3912, -39.9077, 1.08", "75.6809, -14.1574, -40.4768, 0.84", "77.665, -13.9025, -41.1255, 0.84", "81.8933, -13.4792, -42.5911, 1.08", "83.1956, -13.4226, -43.0924, 1.44", "84.1958, -13.4404, -43.4541, 1.44", "85.3305, -13.527, -43.9769, 0.96", "86.018, -13.6078, -44.3393, 0.96", "86.6987, -13.7066, -44.6666, 0.72", "88.5018, -14.167, -45.2483, 1.2", "90.4043, -14.7868, -45.7656, 1.44", "94.3396, -16.2487, -46.6406, 0.84", "95.2009, -16.5803, -46.8168, 0.84", "98.1149, -17.6165, -47.365, 1.2", "100.189, -18.2358, -47.5436, 1.56", "101.656, -18.5924, -47.5196, 1.56", "102.557, -18.7527, -47.43, 1.56", "104.957, -19.0081, -46.8955, 1.56", "106.494, -19.1042, -46.6598, 0.96", "109.772, -19.226, -46.4102, 0.96", "110.924, -19.1984, -46.3427, 0.96", "112.265, -19.1089, -46.2865, 0.96", "114.108, -18.9244, -46.2342, 1.44", "117.196, -18.5556, -46.1882, 0.72", "118.589, -18.3713, -46.2291, 0.48", "120.159, -18.1284, -46.3762, 1.44", "121.135, -17.923, -46.4364, 1.44", "122.245, -17.5798, -46.4567, 0.6", "123.079, -17.2064, -46.3845, 0.6", "124.538, -16.3617, -46.0377, 1.2", "125.166, -15.9866, -45.8751, 1.2", "126.149, -15.4823, -45.5843, 0.72", "126.807, -15.1884, -45.3916, 0.72", "128.374, -14.5276, -44.9609, 0.72", "129.578, -14.0201, -44.6686, 1.44", "130.597, -13.6416, -44.4726, 1.44", "131.774, -13.2572, -44.4019, 0.36", "133.673, -12.6498, -44.4759, 0.72", "134.344, -12.4208, -44.6261, 0.72", "135.235, -12.1126, -44.9532, 0.24", "135.989, -11.8281, -45.2859, 0.96", "138.961, -10.5454, -46.7755, 1.56", "140.045, -9.99453, -47.4693, 1.56", "142.161, -8.88446, -48.9825, 1.08", "143.15, -8.33861, -49.7434, 1.08", "143.915, -7.85555, -50.3654, 1.56", "144.496, -7.40863, -50.8712, 1.56", "146.339, -5.78901, -52.7958, 1.32", "147.168, -5.03311, -53.7305, 0.96", "148.788, -3.50572, -55.5542, 1.56", "149.51, -2.87372, -56.4081, 0.72", "150.501, -2.11899, -57.6238, 1.44", "153.118, -0.276256, -60.9542, 0.84", "153.719, 0.112065, -61.7111, 0.72", "154.192, 0.395479, -62.3238, 0.72", "156.107, 1.41704, -64.6911, 0.72", "157.486, 2.06344, -66.2947, 1.44", "159.595, 3.0082, -68.6205, 0.96", "160.285, 3.31595, -69.3264, 0.96", "162.111, 4.0815, -71.1837, 0.96", "163.084, 4.49085, -72.2158, 0.72", "163.458, 4.67307, -72.6196, 0.72", "164.524, 5.30291, -73.9391, 1.2", "164.846, 5.54963, -74.4521, 1.2", "165.516, 6.29436, -75.8371, 1.2", "166.39, 7.51308, -77.8959, 1.2", "166.811, 8.11171, -78.9311, 0.72", "167.62, 9.16461, -80.7981, 1.2", "168.12, 9.74682, -81.8203, 1.2", "168.562, 10.2322, -82.6029, 0.6", "169.537, 11.2849, -84.0264, 0.6", "170.097, 11.7789, -84.6236, 1.2", "170.805, 12.3274, -85.2524, 1.2", "171.344, 12.7272, -85.6683, 1.2", "172.264, 13.3918, -86.3473, 0.6", "173.252, 14.1451, -87.0767, 1.08", "174.121, 14.9791, -87.7749, 0.48", "174.627, 15.4782, -88.2049, 0.48", "175.684, 16.5223, -89.2392, 1.32", "176.737, 17.4876, -90.341, 0.72", "177.297, 17.9198, -90.9331, 0.72", "179.045, 19.0249, -92.8791, 1.2", "180.45, 19.8696, -94.5222, 1.2", "181.754, 20.5712, -96.2832, 0.6", "182.157, 20.7481, -96.886, 0.6", "183.638, 21.2669, -99.2512, 1.56", "185.223, 21.6287, -101.902, 1.56", "185.751, 21.6854, -102.82, 1.56", "187.953, 21.7308, -106.844, 1.2", "189.093, 21.674, -108.998, 0.84", "189.297, 21.646, -109.422, 0.84", "190.598, 21.3727, -112.263, 1.32", "191.845, 21.0493, -114.99, 0.96", "192.786, 20.7458, -117.052, 1.8", "193.914, 20.3595, -119.487, 1.8", "195.711, 19.7464, -123.59, 1.32" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "39.9927, -23.3416, -24.928, 1.2", "40.2892, -27.5027, -26.4119, 1.2", "40.7263, -29.7561, -27.1808, 1.08", "41.2956, -31.3661, -27.4677, 1.08", "41.6841, -32.0313, -27.6267, 1.08", "42.9197, -33.7495, -28.075, 1.08", "43.5223, -34.4783, -28.065, 1.08", "44.3967, -35.2722, -27.8385, 1.08", "46.6373, -36.8406, -27.2207, 1.32", "49.7398, -38.565, -26.2162, 1.32", "50.6724, -39.0135, -25.8722, 1.32", "55.5013, -41.2357, -23.8694, 1.2", "56.5813, -41.7279, -23.4044, 1.2", "58.2428, -42.5082, -22.6963, 1.2", "60.0524, -43.4066, -21.9477, 1.2", "61.3776, -44.1441, -21.3544, 1.2", "62.5125, -44.9153, -20.9177, 1.2", "63.582, -45.8708, -20.6474, 1.2", "64.9359, -47.4824, -20.2412, 1.2", "65.2498, -47.9561, -20.1166, 1.2", "66.3035, -49.6994, -19.583, 1.2", "67.4215, -51.5158, -18.9749, 1.2", "68.3986, -52.9523, -18.5678, 1.2", "68.9004, -53.6911, -18.3571, 1.08", "70.6149, -56.0489, -17.5937, 1.56", "71.8121, -57.53, -17.0711, 0.96", "72.4536, -58.1872, -16.8082, 0.96", "74.8762, -60.3486, -16.1626, 1.68" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "29.2053, -64.3347, 12.8017, 0.96", "29.5182, -65.8865, 12.1909, 0.96", "29.7822, -67.554, 11.6188, 0.96", "30.1386, -69.7068, 10.9607, 0.96", "30.4121, -71.6456, 10.5064, 1.32", "30.6243, -73.7167, 10.1537, 0.84", "30.7355, -74.7515, 10.0254, 0.84", "30.7867, -75.34, 9.99676, 0.84", "30.8624, -76.3812, 10.0234, 0.96", "30.9426, -77.8943, 10.0017, 0.6", "31.0218, -79.2632, 9.81777, 0.6", "31.151, -80.6555, 9.57244, 1.2", "31.228, -81.4944, 9.4206, 1.2", "31.3377, -83.3643, 9.01642, 0.72", "31.4491, -85.9664, 8.3929, 1.2", "31.4995, -87.3799, 8.02638, 1.2", "31.4572, -89.6112, 7.19445, 1.44", "31.3311, -90.9492, 6.68002, 1.44", "31.0917, -92.7174, 6.0125, 0.84", "30.9364, -93.6701, 5.59942, 0.84", "30.7963, -94.4494, 5.21984, 1.44", "30.0144, -98.8582, 2.86051, 1.44", "29.6674, -101.342, 1.46325, 0.96", "29.5934, -102.248, 0.954528, 0.96", "29.6051, -105.797, -0.887844, 1.44", "29.7097, -106.979, -1.45611, 1.44", "29.9783, -108.261, -1.98728, 0.96", "30.4575, -109.808, -2.48103, 0.96", "31.3116, -112.142, -3.27648, 0.84", "31.9388, -113.762, -3.73773, 1.32", "32.3768, -114.786, -3.94374, 1.32", "33.3529, -116.912, -4.36718, 0.84", "33.8136, -117.864, -4.54848, 0.84", "34.2412, -118.662, -4.66532, 0.84", "34.7158, -119.438, -4.72936, 0.84", "35.931, -121.359, -4.86675, 0.72", "36.9297, -122.866, -4.94709, 0.72", "37.3557, -123.5, -4.96643, 0.72", "38.6405, -125.447, -5.013, 1.08", "39.5557, -126.903, -5.03551, 1.44", "40.234, -128.078, -4.98689, 1.44", "40.6983, -129.0, -4.89356, 1.44", "41.2307, -130.211, -4.70162, 0.96", "41.5662, -131.088, -4.52543, 0.84", "42.0132, -132.404, -4.20795, 1.32", "42.6971, -134.277, -3.66285, 1.2", "43.1692, -135.379, -3.4023, 1.2", "43.7687, -136.511, -3.12508, 1.08", "44.4566, -137.594, -2.86555, 1.08", "45.0396, -138.454, -2.67832, 1.08", "45.9252, -139.811, -2.44338, 1.32", "47.3724, -142.217, -2.19825, 1.32", "48.6255, -144.534, -2.00641, 0.84", "49.1534, -145.57, -1.87393, 0.84", "49.4586, -146.199, -1.76252, 0.84", "49.9256, -147.338, -1.52243, 1.2", "50.3438, -148.553, -1.25021, 0.72", "50.7364, -149.697, -0.954209, 1.32", "51.4293, -151.886, -0.587719, 0.96", "51.9102, -153.419, -0.382544, 0.96", "52.137, -154.183, -0.301172, 0.72", "52.6052, -155.894, -0.174307, 0.72", "52.8757, -157.193, -0.15243, 0.72", "53.1191, -159.139, -0.23824, 1.2", "53.2154, -160.852, -0.402236, 1.2", "53.2373, -161.909, -0.421103, 1.2", "53.2695, -162.575, -0.380563, 1.2", "53.4136, -164.44, -0.122055, 0.48", "53.5193, -165.597, 0.103191, 0.96", "53.7673, -167.402, 0.581325, 0.96", "54.206, -169.887, 1.305, 1.32", "54.5313, -171.394, 1.74948, 0.84", "54.9472, -173.059, 2.27932, 0.84", "55.5208, -175.332, 3.03313, 1.32", "56.1239, -177.637, 3.75884, 1.56", "56.4798, -178.862, 4.10717, 0.96", "56.8757, -180.128, 4.42064, 0.96", "57.4325, -181.924, 4.88354, 1.44", "57.8583, -183.119, 5.23784, 0.84", "58.3239, -184.204, 5.58646, 0.84", "58.8315, -185.384, 6.04022, 0.84", "59.4645, -186.997, 6.74027, 0.96", "59.8502, -188.041, 7.1958, 0.96", "60.2338, -189.072, 7.63914, 0.72", "60.5357, -189.837, 7.96692, 0.72", "61.3051, -191.85, 8.77959, 1.08", "61.828, -193.131, 9.42087, 0.48", "62.3221, -194.138, 9.9671, 1.08", "63.1502, -195.644, 10.8101, 0.48", "63.5732, -196.384, 11.2137, 0.48", "64.1633, -197.413, 11.7615, 1.44", "66.0592, -200.849, 13.4413, 0.6", "67.031, -202.784, 14.367, 0.6", "67.6297, -204.181, 14.9965, 0.6", "67.8823, -205.042, 15.3237, 0.6", "68.0553, -206.15, 15.6595, 0.6", "68.0423, -207.465, 15.9085, 0.6", "67.8478, -208.707, 16.0012, 1.56", "67.6376, -209.627, 16.0883, 1.56", "67.2225, -211.544, 16.3364, 0.96", "67.0377, -212.574, 16.4872, 0.72", "66.908, -213.512, 16.6499, 1.32", "66.706, -215.744, 17.0277, 0.72", "66.6479, -217.389, 17.3148, 0.72", "66.6528, -219.647, 17.7475, 1.2", "66.6876, -220.684, 17.9559, 1.2", "66.7131, -222.327, 18.2469, 0.6", "66.7045, -224.289, 18.5307, 0.6", "66.634, -225.663, 18.6575, 1.32", "66.4631, -227.402, 18.7608, 0.72", "66.3425, -228.326, 18.7675, 0.72", "66.1099, -229.809, 18.7466, 0.72", "65.9874, -230.724, 18.616, 0.72", "65.9063, -231.761, 18.3812, 1.2", "65.927, -232.625, 18.044, 0.6", "66.0516, -233.813, 17.4801, 0.6", "66.2266, -235.182, 16.8075, 1.08", "66.6869, -238.175, 15.4849, 1.08", "66.891, -239.46, 14.9563, 1.08", "67.276, -241.705, 14.1881, 1.56", "67.6081, -243.424, 13.4836, 1.08", "67.805, -244.408, 12.9801, 0.72", "68.155, -246.095, 12.0486, 0.72", "68.3497, -247.24, 11.4342, 1.44", "68.5965, -248.778, 10.5649, 0.72", "69.3386, -253.463, 7.81327, 1.2", "69.7967, -255.818, 6.50548, 0.72", "70.0276, -256.976, 5.85927, 0.72", "70.3832, -258.998, 4.6481, 0.72", "70.5355, -259.916, 4.10064, 0.72", "70.8702, -262.217, 2.81545, 1.08", "71.2236, -265.177, 1.79878, 0.6", "71.53, -268.05, 0.95146, 0.6", "71.7295, -270.66, 0.0873062, 1.32", "73.8871, -280.722, -1.78603, 1.32" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "29.2053, -64.3347, 12.8017, 1.2", "27.9133, -65.1481, 13.5188, 1.2", "27.0132, -65.7687, 13.9805, 1.2", "24.9535, -67.3585, 14.9337, 0.84", "23.8457, -68.3072, 15.4016, 0.84", "23.1646, -68.9262, 15.6588, 1.08", "22.3662, -69.6828, 15.9961, 0.6", "21.8811, -70.1374, 16.2003, 0.6", "21.0448, -70.8839, 16.5096, 1.2", "20.2638, -71.4968, 16.8159, 1.2", "19.6493, -71.9434, 17.1679, 1.2", "18.2331, -72.9592, 18.2082, 0.72", "16.985, -73.8197, 19.2312, 1.32", "16.4508, -74.1561, 19.6839, 1.32", "14.541, -75.3924, 21.5302, 0.84", "13.4311, -76.2062, 22.7115, 1.44", "12.4597, -77.0568, 23.818, 0.84", "12.0511, -77.4662, 24.2779, 0.84", "10.9863, -78.6479, 25.4832, 0.84", "9.49028, -80.3255, 26.9903, 1.32", "8.23629, -81.7399, 28.0584, 0.84", "7.5295, -82.5001, 28.578, 1.44", "6.65154, -83.4548, 29.1496, 0.72", "5.9995, -84.2119, 29.5381, 0.72", "5.08217, -85.4038, 29.974, 1.32", "4.16957, -86.5705, 30.3007, 1.08", "3.54886, -87.3173, 30.509, 1.08", "2.90098, -88.0309, 30.721, 1.56", "2.35625, -88.5693, 30.88, 1.08", "1.01137, -89.8027, 31.2229, 1.44", "-0.538163, -91.13, 31.5574, 0.72", "-1.8411, -92.2351, 31.8174, 0.72", "-3.05484, -93.2862, 32.0708, 1.2", "-4.62233, -94.7169, 32.4108, 0.6", "-5.06864, -95.1928, 32.507, 0.6", "-5.43513, -95.7304, 32.5817, 0.6", "-6.1017, -97.4316, 32.708, 1.44", "-6.35068, -98.9289, 32.805, 0.6", "-6.40194, -99.7365, 32.8224, 0.6", "-6.49144, -101.7, 32.807, 0.96", "-6.68001, -103.135, 32.7611, 0.96", "-6.86846, -104.159, 32.7747, 0.6", "-7.193, -105.606, 32.8455, 0.6", "-7.70949, -107.737, 33.0538, 0.96", "-8.04448, -108.763, 33.291, 0.96", "-8.82709, -110.45, 33.9336, 0.6", "-10.091, -112.614, 34.9976, 1.2", "-10.6693, -113.505, 35.5089, 1.2", "-11.0298, -114.118, 36.0177, 1.2", "-11.7799, -115.899, 37.8586, 0.48", "-11.9057, -116.543, 38.6868, 0.48", "-12.001, -117.341, 39.8419, 1.08", "-12.0631, -117.699, 40.3849, 1.08", "-12.5775, -119.876, 43.7651, 0.72", "-12.7313, -120.388, 44.4986, 0.72", "-13.661, -122.603, 47.3251, 1.08", "-14.2761, -123.514, 48.3952, 0.72", "-14.9506, -124.139, 49.0352, 0.72", "-16.3473, -125.054, 49.7259, 1.2", "-17.7978, -125.765, 50.0505, 0.84", "-18.9301, -126.212, 50.1886, 1.32", "-20.5539, -126.748, 50.2205, 0.6", "-21.4624, -127.011, 50.2719, 0.6", "-22.9806, -127.407, 50.4038, 1.32", "-24.1073, -127.697, 50.5336, 0.72", "-25.1011, -127.988, 50.6659, 0.72", "-25.8375, -128.257, 50.7742, 1.32", "-27.5726, -129.1, 51.0481, 0.6", "-28.5263, -129.667, 51.202, 0.6", "-29.5584, -130.437, 51.3616, 0.6", "-30.4235, -131.208, 51.4713, 0.6", "-31.2558, -132.069, 51.5316, 1.2", "-31.805, -132.684, 51.5316, 0.72", "-32.1439, -133.097, 51.5024, 0.72", "-32.6589, -133.775, 51.5253, 1.32", "-33.0335, -134.307, 51.5924, 0.6", "-33.8053, -135.592, 51.8902, 1.08", "-34.2687, -136.479, 52.126, 0.36", "-34.5071, -136.972, 52.2654, 0.36", "-35.3662, -138.917, 52.7939, 0.36", "-35.6699, -139.679, 53.0263, 0.72", "-36.2667, -141.139, 53.4892, 1.08", "-36.8058, -142.373, 53.8865, 1.08", "-37.131, -143.061, 54.0983, 1.08", "-37.9231, -144.59, 54.5583, 1.08", "-38.6873, -146.083, 54.9564, 0.72", "-39.3761, -147.579, 55.3825, 0.72", "-39.6528, -148.301, 55.5145, 0.72", "-39.8572, -148.927, 55.5808, 0.72", "-40.3926, -150.831, 55.5936, 1.08", "-40.7172, -152.138, 55.5879, 1.08", "-41.309, -154.802, 55.5246, 0.6", "-41.9807, -158.308, 55.484, 0.6", "-42.1606, -159.223, 55.482, 1.2", "-42.5728, -161.26, 55.5814, 0.84", "-43.1198, -163.976, 55.8268, 0.48", "-43.2605, -164.668, 55.894, 1.2", "-43.5037, -165.945, 56.0721, 0.72", "-43.8273, -167.718, 56.4264, 0.72", "-44.2256, -170.094, 56.6883, 0.72", "-44.4979, -171.932, 56.8292, 0.72", "-44.7954, -174.37, 56.8225, 1.32", "-44.9879, -176.238, 56.7834, 0.72", "-45.0611, -177.196, 56.7269, 0.72", "-45.2337, -180.244, 56.2781, 1.08", "-52.6613, -187.103, 57.745, 1.08" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "57.2967, 47.343, 56.7762, 0.96", "58.2378, 47.4746, 57.2177, 0.96", "59.7109, 47.6806, 57.9087, 0.84", "62.0076, 48.0016, 58.9861, 0.84", "63.0503, 48.1474, 59.4752, 0.84" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "57.2967, 47.343, 56.7762, 0.84", "58.4063, 48.0134, 56.8115, 0.84", "59.6986, 48.709, 56.8663, 1.2", "60.7536, 49.332, 56.918, 0.6", "61.3195, 49.6928, 56.9507, 0.6", "61.9732, 50.1515, 56.9916, 0.6", "62.8267, 50.8566, 57.0471, 0.96", "63.1645, 51.1836, 57.0781, 0.96", "63.7646, 52.1284, 57.2054, 0.72", "64.3469, 53.363, 57.3755, 0.72", "64.6424, 54.0055, 57.4281, 1.2", "65.2376, 55.191, 57.4594, 0.6", "65.8862, 56.2966, 57.4312, 1.08", "66.9495, 57.881, 57.2876, 0.84", "67.8014, 58.9835, 57.121, 0.84", "68.9388, 60.3158, 56.8431, 1.32", "69.8245, 61.2222, 56.6112, 0.72", "70.6441, 61.9689, 56.3908, 1.2", "71.5353, 62.7166, 55.9771, 0.6", "72.5441, 63.4442, 55.4006, 0.6", "73.529, 63.9974, 54.6808, 1.08", "74.1849, 64.2497, 54.1275, 0.48", "75.1187, 64.4699, 53.2834, 0.48", "77.9237, 64.6512, 50.6333, 1.2", "78.9046, 64.5253, 49.4976, 0.72", "81.1216, 63.8866, 46.5287, 0.48", "82.361, 63.3689, 44.7203, 0.12", "82.7459, 63.1699, 44.1334, 0.6", "83.3847, 62.7588, 43.1204, 1.2", "85.9077, 60.7873, 39.1047, 0.48", "86.1469, 60.5648, 38.619, 0.48", "86.3361, 60.3067, 38.0353, 0.24", "92.7201, 64.9094, 31.7085, 0.24", "96.932, 70.5818, 24.4231, 0.24", "100.507, 76.2593, 16.8084, 0.24", "105.297, 83.021, 10.8433, 0.24", "110.841, 87.7405, 3.83884, 0.24", "116.113, 90.4961, -4.24328, 0.24", "121.183, 94.5461, -11.9512, 0.24", "125.689, 98.2911, -20.135, 0.24", "128.595, 102.93, -28.6229, 0.24" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "-36.8106, -10.754, 12.8277, 1.08", "-38.4398, -12.839, 12.6196, 1.08", "-39.1912, -13.8997, 12.67, 1.08", "-39.7161, -14.6186, 12.7012, 1.08", "-41.0672, -16.3959, 12.7727, 1.08", "-42.003, -17.564, 12.8166, 1.08", "-44.1821, -20.1774, 12.9106, 1.08", "-44.9566, -21.0459, 13.0094, 1.08", "-46.5841, -22.8334, 13.3085, 1.08", "-47.324, -23.6688, 13.52, 0.84", "-48.0677, -24.5314, 13.8076, 0.84", "-48.3285, -24.8413, 13.9143, 1.08", "-49.0026, -25.6863, 14.1761, 0.48", "-50.3455, -27.4161, 14.8415, 1.44", "-51.5342, -29.0952, 15.6058, 0.72", "-51.9672, -29.7407, 15.866, 0.72", "-52.2913, -30.2448, 16.1138, 0.72", "-52.6943, -30.8359, 16.4273, 0.72", "-53.3157, -31.5769, 16.937, 1.08", "-53.8799, -32.102, 17.3479, 1.08", "-54.7312, -32.8344, 17.9701, 1.56", "-57.2058, -35.0097, 19.9773, 0.96", "-58.1628, -35.9242, 20.8615, 1.56", "-59.6488, -37.4958, 22.3678, 0.84", "-60.4996, -38.5331, 23.3285, 0.84", "-60.9188, -39.1425, 23.8401, 0.84", "-61.6351, -40.426, 24.7487, 1.44", "-62.179, -41.7073, 25.346, 0.84", "-62.4609, -42.6518, 25.7414, 0.84", "-62.529, -43.0185, 25.8747, 0.84", "-62.7216, -44.4897, 26.4037, 1.68", "-62.953, -47.1696, 27.3234, 1.08", "-62.93, -48.7642, 27.9524, 1.68", "-62.649, -50.1802, 28.7354, 1.2", "-62.1388, -51.1485, 29.5282, 0.72", "-61.8034, -51.5397, 30.0994, 0.72", "-61.1946, -52.0727, 31.1858, 1.32", "-59.6222, -53.1845, 33.986, 1.32", "-58.5503, -53.8955, 35.9667, 1.32", "-57.5962, -54.5242, 37.8216, 1.8", "-55.1601, -56.1402, 42.8031, 0.96", "-54.8827, -56.3229, 43.3553, 0.96", "-54.609, -56.5322, 43.9022, 0.48", "-54.2832, -56.8763, 44.6101, 1.2", "-54.0946, -57.1295, 45.0382, 1.2", "-53.7716, -57.542, 45.6437, 1.2", "-52.6065, -58.5516, 46.8918, 0.72", "-52.0317, -58.9991, 47.4714, 0.72", "-49.2343, -61.1733, 50.1431, 0.72", "-48.8513, -61.4772, 50.4383, 0.72", "-47.829, -62.3909, 51.0454, 0.72", "-46.9627, -63.2537, 51.5604, 0.72", "-46.4901, -63.7885, 51.8178, 0.72", "-45.5895, -64.9091, 52.3137, 0.48", "-44.2138, -66.8824, 52.9728, 1.68", "-43.6886, -67.8427, 53.3989, 1.68", "-42.2149, -71.0688, 55.2502, 1.2", "-41.7941, -71.9687, 55.9043, 1.2", "-41.1798, -73.0968, 56.9062, 0.96", "-40.677, -73.8162, 57.695, 0.96", "-39.719, -74.8988, 59.1881, 1.32", "-38.5567, -75.9007, 60.6852, 1.32", "-37.4746, -76.6962, 61.8069, 0.72", "-36.8555, -77.1012, 62.414, 0.72", "-35.7694, -77.79, 63.382, 1.2", "-33.7109, -79.1175, 65.1941, 1.2", "-33.0871, -79.6411, 65.7723, 1.2", "-32.5825, -80.3239, 66.3719, 0.48", "-32.1901, -81.2376, 67.0939, 0.72", "-31.9341, -82.1872, 67.8417, 1.2", "-31.8938, -82.4096, 68.0231, 1.2", "-31.7723, -83.9297, 69.5413, 0.6", "-31.691, -85.1799, 71.1819, 0.36", "-31.6028, -86.0168, 72.422, 1.32", "-31.5136, -86.6725, 73.4414, 1.32", "-31.3378, -87.7524, 75.193, 1.32", "-30.9587, -89.924, 78.6982, 0.48", "-30.5272, -92.0788, 82.2209, 0.6", "-30.3944, -92.654, 83.163, 0.6", "-30.3162, -93.0836, 83.8657, 0.24", "-30.2989, -93.4313, 84.4014, 0.24", "-30.5184, -94.1587, 85.4408, 0.24", "-30.6144, -94.2637, 85.5615, 0.96", "-31.5666, -94.9323, 86.3374, 0.6", "-32.9198, -95.7781, 87.4497, 0.12", "-33.6454, -96.1906, 88.0445, 0.72", "-35.7872, -97.3483, 89.849, 0.24", "-37.0474, -98.0163, 90.9566, 0.24", "-37.9449, -98.5119, 91.7585, 0.84", "-39.1654, -99.2471, 92.8725, 0.48", "-39.7655, -99.5755, 93.3558, 0.84", "-38.6608, -107.54, 99.7774, 0.84", "-38.6369, -115.56, 106.232, 0.84", "-39.5297, -123.905, 112.235, 0.84", "-39.788, -131.341, 119.291, 0.84" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "-36.8106, -10.754, 12.8277, 1.32", "-38.2768, -10.1698, 14.7266, 1.32", "-39.616, -9.41152, 16.5095, 1.32", "-41.1799, -8.32318, 18.6774, 0.96", "-41.6321, -8.01778, 19.2924, 0.96", "-42.8101, -7.29253, 20.9397, 1.56", "-44.2216, -6.5734, 22.9289, 0.72", "-44.6581, -6.37682, 23.6283, 0.72", "-45.6716, -6.15173, 25.1654, 1.32", "-46.4638, -6.15812, 26.2753, 1.32", "-47.4827, -6.3918, 27.6141, 1.32", "-48.5286, -6.82305, 28.8187, 1.32", "-50.2537, -7.73464, 30.6348, 1.68", "-51.937, -8.72098, 32.2676, 1.08", "-52.8001, -9.23017, 32.9817, 1.08", "-53.2788, -9.47906, 33.3234, 1.08", "-54.372, -9.93344, 33.91, 1.08", "-56.322, -10.5421, 34.673, 1.08", "-57.7636, -10.8831, 35.1778, 1.08", "-59.2049, -11.0791, 35.7975, 1.08", "-59.9058, -11.0997, 36.2072, 1.08", "-61.5151, -10.9858, 37.5284, 1.32", "-62.3435, -10.8313, 38.5776, 1.32", "-63.8252, -10.3533, 41.5418, 1.32", "-64.398, -10.1287, 43.4534, 1.68", "-64.7083, -10.0642, 45.3143, 1.68", "-64.9558, -10.2019, 47.7678, 1.68", "-65.1008, -10.4851, 50.4174, 1.44", "-65.1836, -10.6647, 51.6688, 1.44", "-65.3343, -10.8793, 52.9301, 1.44", "-65.8062, -11.2004, 54.6807, 1.44", "-66.5071, -11.3718, 56.0794, 1.44", "-68.2123, -11.2565, 58.1646, 1.44", "-69.743, -10.9585, 59.6908, 1.44", "-70.5297, -10.7417, 60.4042, 1.44", "-71.5879, -10.3581, 61.3476, 1.08", "-72.1907, -10.1406, 61.8484, 1.08", "-73.9116, -9.73369, 63.3164, 1.56", "-75.0165, -9.7571, 64.2558, 1.56", "-75.8208, -9.91967, 64.9496, 1.56", "-77.003, -10.2827, 65.9299, 2.04", "-78.3419, -10.7504, 67.2143, 1.08", "-80.0314, -11.2938, 68.9215, 1.08", "-81.2342, -11.5792, 70.1779, 1.08", "-82.1392, -11.6935, 71.1431, 1.08", "-84.2693, -11.707, 73.4015, 1.56", "-88.1932, -11.2777, 77.6497, 1.08", "-88.8135, -11.1054, 78.3177, 1.08", "-90.0159, -10.6174, 79.5366, 1.56", "-90.687, -10.2676, 80.2535, 1.56", "-91.3269, -9.87001, 81.0258, 1.56", "-93.3447, -8.43688, 83.6836, 0.96", "-94.1152, -7.78071, 84.5923, 0.96", "-94.5479, -7.39198, 85.1121, 0.96", "-95.7722, -6.30337, 86.6136, 1.44", "-96.674, -5.63119, 87.7394, 1.44", "-97.7069, -5.08789, 88.9789, 0.72", "-98.2855, -4.8891, 89.5845, 0.72", "-99.2999, -4.68335, 90.5586, 0.72", "-100.75, -4.47369, 91.8439, 1.2", "-102.384, -4.29212, 93.1577, 1.44", "-103.611, -4.13484, 94.0656, 1.44", "-104.486, -4.0, 94.6896, 0.72", "-105.513, -3.79317, 95.4118, 0.72", "-107.222, -3.3288, 96.5691, 1.2", "-108.032, -3.05155, 97.0379, 1.2", "-109.184, -2.71648, 97.5664, 1.2", "-109.999, -2.65217, 97.8284, 1.2", "-110.839, -2.69061, 98.0451, 1.2", "-111.388, -2.74784, 98.1589, 1.2", "-112.019, -2.83753, 98.2538, 1.44", "-114.358, -3.13231, 98.5673, 0.96", "-117.003, -3.38396, 99.0457, 0.96", "-118.886, -3.5046, 99.3323, 0.72", "-119.418, -3.52102, 99.3956, 1.32", "-120.803, -3.54056, 99.522, 0.84", "-122.307, -3.5477, 99.6371, 0.84", "-124.361, -3.56103, 99.7236, 1.08", "-126.974, -3.5118, 99.788, 1.08", "-129.188, -3.50994, 99.7625, 0.6", "-129.756, -3.50878, 99.7441, 0.6", "-137.684, -1.86143, 105.633, 0.6" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "74.8762, -60.3486, -16.1626, 0.84", "74.9743, -61.7449, -15.9837, 0.84", "75.0825, -62.5744, -15.8866, 0.72", "75.2895, -63.6297, -15.7663, 1.44", "75.7272, -65.3831, -15.5752, 0.84", "76.1704, -66.807, -15.4304, 0.84", "76.7897, -68.3842, -15.3009, 1.32", "77.2316, -69.2796, -15.2371, 1.32", "77.6938, -70.129, -15.2572, 0.72", "78.1129, -70.8529, -15.3344, 0.72", "78.7792, -71.9639, -15.5322, 1.32", "80.3066, -74.5177, -16.0759, 0.72", "80.6808, -75.2126, -16.2389, 0.72", "81.8733, -77.667, -16.8316, 0.72", "82.4635, -79.0468, -17.1559, 1.44", "82.8632, -80.0704, -17.405, 0.96", "83.1082, -80.7931, -17.5747, 0.96", "83.4225, -81.9153, -17.8167, 1.44", "83.6112, -82.6774, -17.9471, 0.96", "83.9412, -84.2413, -18.1124, 1.68", "84.2529, -86.2886, -18.3854, 1.08", "84.468, -87.8379, -18.6566, 0.6", "84.5568, -88.5661, -18.8344, 0.6", "84.6764, -89.7046, -19.1292, 0.6", "84.6972, -89.9568, -19.1953, 0.6", "84.8305, -92.0459, -19.7454, 1.2", "84.9213, -93.4602, -20.0729, 0.48", "85.0775, -95.0017, -20.4106, 0.6", "85.3152, -96.6698, -20.7431, 1.2", "85.4135, -97.3268, -20.8559, 1.2", "85.5957, -98.7436, -21.0294, 0.72", "85.7412, -100.202, -21.1152, 1.44", "85.7658, -101.165, -21.0814, 1.44", "85.7604, -101.763, -21.0264, 0.84", "85.7447, -102.655, -20.9432, 0.84", "85.741, -104.069, -20.7707, 1.44", "85.7463, -104.784, -20.6664, 1.44", "85.7399, -107.023, -20.2887, 0.72", "85.7192, -108.067, -20.1237, 0.72", "85.656, -109.297, -19.9242, 0.72", "85.4946, -111.025, -19.6492, 0.72", "85.3379, -112.061, -19.5027, 0.72", "84.9889, -113.603, -19.3298, 0.72", "84.5544, -115.033, -19.2342, 0.72", "84.0901, -116.312, -19.1945, 1.44", "83.6588, -117.436, -19.1937, 1.44", "83.2007, -118.738, -19.2263, 0.72", "82.8089, -120.179, -19.3338, 0.72", "82.5307, -121.604, -19.504, 0.72", "82.27, -123.382, -19.7471, 1.2", "82.1601, -124.606, -19.9911, 1.2", "82.1368, -125.949, -20.2989, 0.36", "82.2447, -127.29, -20.7999, 0.72", "82.3129, -127.774, -21.0684, 1.08", "82.4273, -128.536, -21.5852, 1.08", "82.7124, -130.154, -22.8877, 0.6", "82.9165, -131.16, -23.8281, 1.2", "83.5462, -133.808, -26.5847, 1.92", "83.9839, -135.391, -28.4771, 0.96", "84.1224, -135.886, -29.1394, 0.96", "84.3885, -137.04, -30.8361, 0.96", "84.4811, -137.539, -31.628, 0.96", "84.5573, -137.965, -32.3145, 0.96", "84.9156, -139.291, -34.404, 0.96", "85.2662, -140.079, -35.6633, 0.96", "85.9824, -141.318, -37.6158, 1.32", "86.822, -142.698, -39.7021, 0.6", "87.3229, -143.502, -40.865, 0.6", "88.0254, -144.498, -42.2595, 0.96", "88.3923, -144.926, -42.8137, 0.96", "89.6782, -146.111, -44.388, 1.32", "91.1907, -147.217, -45.9478, 1.08" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "74.8762, -60.3486, -16.1626, 1.08", "79.2244, -64.2476, 8.5377, 1.08", "79.5706, -64.5488, 10.1917, 1.08", "80.3212, -65.1451, 13.1648, 1.32", "80.6256, -65.3664, 14.1991, 1.32", "81.4875, -65.9458, 16.7831, 1.32", "82.6642, -66.693, 19.9875, 0.84", "83.1969, -66.976, 20.4319, 0.84", "84.9433, -67.825, 21.682, 1.2", "85.8877, -68.2684, 22.2375, 1.2", "86.6298, -68.6419, 22.6129, 0.72", "86.9698, -68.8499, 22.7318, 0.72", "88.5103, -70.0753, 23.1152, 1.2", "89.2059, -70.8108, 23.291, 1.2", "89.8012, -71.6648, 23.4359, 1.2", "90.7602, -73.36, 23.7015, 1.56", "91.4964, -74.7852, 23.9205, 1.2", "92.4677, -76.5848, 24.1915, 1.2", "93.2873, -78.008, 24.3958, 0.84", "94.1188, -79.3227, 24.59, 0.84", "94.5791, -79.9712, 24.6862, 0.84", "95.2386, -80.8183, 24.9014, 0.84", "96.5515, -82.2426, 25.4883, 1.32", "97.1365, -82.8242, 25.7854, 1.32", "97.6246, -83.2998, 26.0627, 1.32", "98.0031, -83.6719, 26.2836, 1.32", "100.234, -86.0819, 27.4356, 0.72", "101.568, -87.7668, 28.0548, 1.2", "102.149, -88.6241, 28.2949, 1.2", "102.835, -89.7732, 28.4717, 0.96", "103.483, -91.0217, 28.5066, 1.44", "104.523, -93.185, 28.375, 0.84", "105.057, -94.3514, 28.1496, 0.84", "105.448, -95.1581, 27.972, 0.84", "106.291, -96.7969, 27.7452, 0.84", "106.789, -97.7187, 27.7089, 0.84", "107.768, -99.3256, 27.9429, 0.84", "108.468, -100.325, 28.287, 0.84", "109.223, -101.372, 28.7079, 0.84", "110.186, -102.635, 29.2581, 1.2", "110.683, -103.231, 29.5345, 1.2", "112.092, -104.924, 30.2463, 1.56", "113.007, -106.13, 30.6506, 1.2", "113.983, -107.504, 31.0633, 0.72", "115.176, -109.2, 31.5128, 0.72", "115.976, -110.238, 31.7275, 0.72", "116.564, -110.974, 31.7951, 0.72", "117.739, -112.453, 31.7389, 1.2", "118.349, -113.22, 31.6215, 1.2", "118.774, -113.725, 31.5107, 1.2", "119.993, -115.247, 31.1992, 0.84", "121.479, -117.161, 30.8773, 1.2", "121.799, -117.557, 30.8058, 1.2", "123.168, -119.167, 30.5076, 1.2", "125.388, -121.72, 30.1978, 1.32", "126.833, -123.382, 30.1036, 0.84", "128.05, -124.822, 30.1285, 0.84", "129.317, -126.298, 30.2849, 0.84", "130.051, -127.156, 30.3988, 0.84", "131.589, -128.987, 30.7328, 0.72", "132.102, -129.651, 30.8551, 0.72", "132.513, -130.152, 30.9259, 0.72", "132.751, -130.434, 30.9672, 0.72", "133.599, -131.443, 31.105, 1.2", "134.128, -132.102, 31.1261, 1.2", "134.502, -132.55, 31.0988, 0.72", "135.639, -133.845, 31.0329, 1.32", "136.732, -135.015, 30.9897, 1.32", "137.244, -135.548, 30.9789, 0.72", "138.28, -136.604, 30.9415, 0.72", "139.216, -137.509, 30.8847, 0.72", "140.113, -138.301, 30.7912, 1.2", "140.974, -139.006, 30.6705, 0.72", "141.985, -139.787, 30.5074, 1.08", "143.449, -140.86, 30.2562, 0.6", "144.5, -141.622, 30.0364, 0.96", "145.556, -142.459, 29.7719, 0.96", "146.389, -143.171, 29.5444, 0.96", "147.516, -144.227, 29.1774, 1.44", "147.97, -144.663, 29.0246, 1.44", "149.217, -145.879, 28.6364, 0.72", "149.82, -146.495, 28.5049, 0.72", "150.69, -147.365, 28.2948, 1.2", "152.349, -148.857, 27.8612, 0.72", "153.714, -149.952, 27.5016, 1.32", "154.879, -150.882, 27.1663, 1.32", "156.526, -152.172, 26.685, 0.6", "158.699, -153.945, 25.9782, 0.6", "159.496, -154.772, 25.5873, 0.6", "159.795, -155.186, 25.3767, 0.6", "160.693, -156.801, 24.3751, 1.2", "161.054, -157.576, 24.0124, 1.2", "161.362, -158.322, 23.7712, 1.2", "162.084, -160.293, 23.6057, 0.84", "162.278, -160.863, 23.598, 0.84", "162.723, -162.079, 23.6616, 0.48", "164.041, -165.206, 24.2024, 1.32", "164.352, -165.922, 24.333, 1.32", "164.79, -166.804, 24.5021, 0.6", "164.992, -167.161, 24.5731, 0.6", "165.207, -167.513, 24.6229, 0.6", "166.33, -169.249, 24.7527, 1.2", "167.743, -171.295, 24.6486, 1.56", "168.636, -172.554, 24.5653, 1.56", "169.461, -173.703, 24.4764, 0.84", "169.959, -174.38, 24.416, 0.6", "170.927, -175.657, 24.2895, 0.6", "171.695, -176.611, 24.3131, 0.72", "172.106, -177.107, 24.4167, 0.72", "173.088, -178.285, 24.7845, 1.32", "173.787, -179.112, 25.1124, 0.84", "174.897, -180.49, 25.7136, 1.44", "177.087, -183.238, 27.0253, 0.6", "177.758, -184.086, 27.4461, 0.6", "178.216, -184.665, 27.7174, 0.6", "178.665, -185.264, 27.9427, 0.6", "179.689, -186.774, 28.3061, 0.84", "179.932, -187.185, 28.4086, 0.96", "180.525, -188.239, 28.6329, 0.48", "181.354, -189.616, 28.8878, 1.08", "182.26, -191.0, 29.1235, 0.72", "183.023, -192.072, 29.3009, 0.72", "185.835, -195.556, 29.8399, 1.32", "186.131, -195.927, 29.8904, 1.32", "188.042, -198.269, 29.9903, 1.08", "188.505, -198.758, 29.9582, 1.08", "188.899, -199.09, 29.8907, 0.84", "190.597, -200.245, 29.4039, 1.44", "191.507, -200.735, 29.0336, 1.44", "193.592, -201.689, 28.3294, 1.08", "194.658, -202.102, 28.0661, 1.08", "195.617, -202.443, 27.8399, 1.08", "196.475, -202.723, 27.6987, 1.08", "197.992, -203.108, 27.5627, 0.72", "199.079, -203.327, 27.5689, 0.72", "199.764, -203.429, 27.6504, 0.72", "201.356, -203.671, 27.7301, 1.32", "203.347, -203.974, 27.7423, 0.84", "205.148, -204.292, 27.6929, 1.44", "207.336, -204.753, 27.5826, 0.84", "208.873, -205.125, 27.4603, 1.44", "213.098, -206.238, 27.0845, 0.84", "213.885, -206.459, 27.0011, 0.84", "216.026, -207.122, 26.7228, 1.56", "218.586, -208.049, 26.4102, 0.72", "219.425, -208.396, 26.337, 1.32", "220.817, -209.032, 26.3198, 0.96", "221.535, -209.365, 26.4127, 0.96", "222.017, -209.597, 26.4805, 0.96", "223.512, -210.35, 26.7035, 1.44", "224.892, -211.056, 26.9016, 0.72", "226.101, -211.68, 27.0434, 0.72", "227.464, -212.453, 27.1576, 1.32", "228.079, -212.845, 27.213, 1.32", "229.134, -213.598, 27.3229, 0.72", "229.757, -214.084, 27.3928, 0.72", "230.91, -215.011, 27.5121, 1.2", "232.04, -215.898, 27.6437, 1.2", "233.056, -216.671, 27.7664, 0.48", "234.139, -217.478, 27.8583, 0.48", "235.301, -218.361, 27.9648, 1.08", "236.428, -219.215, 28.0654, 0.6", "237.605, -220.054, 28.1597, 0.6", "238.676, -220.746, 28.2207, 1.32", "239.997, -221.55, 28.2349, 0.72", "241.492, -222.434, 28.1949, 0.72", "248.558, -229.215, 31.0897, 0.72" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 15
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "63.0503, 48.1474, 59.4752, 0.48", "63.0084, 46.7636, 59.6475, 0.48", "62.9851, 45.9926, 59.7436, 0.48", "62.9374, 44.4155, 59.94, 0.96", "62.1575, 33.9483, 60.0649, 0.96", "60.6012, 23.6329, 61.0964, 0.96" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "63.0503, 48.1474, 59.4752, 0.84", "63.5834, 48.3522, 60.2058, 0.84", "64.193, 48.6491, 61.0428, 0.84", "65.9034, 49.6089, 63.1457, 1.08", "67.3837, 50.5613, 64.7544, 1.08", "68.3291, 51.2599, 65.6463, 0.84", "69.2026, 51.9918, 66.3609, 0.72", "70.0068, 52.7455, 66.8761, 0.72", "72.2019, 55.2476, 67.2489, 1.2", "72.6327, 55.843, 67.1014, 0.72", "73.1243, 56.5422, 66.8902, 1.2", "73.5419, 57.1029, 66.7761, 1.2", "73.9746, 57.6027, 66.8072, 0.72", "74.9737, 58.6423, 67.286, 0.72", "76.5545, 60.1913, 68.3114, 1.2", "77.6355, 61.2225, 69.0731, 0.72", "78.57, 62.1012, 69.788, 0.72", "79.1239, 62.6345, 70.2459, 1.08", "80.0374, 63.5948, 71.0814, 0.72", "80.8975, 64.6214, 71.9433, 1.08", "87.7395, 69.602, 77.4828, 1.08", "94.6834, 74.1481, 83.2305, 1.08", "101.116, 77.2529, 90.2926, 1.08", "106.125, 80.3846, 98.4181, 1.08", "112.345, 84.0549, 105.424, 1.08" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_25", "dend_16", "dend_7", "dend_0", "dend_29", "dend_26", "dend_22", "dend_17", "dend_11", "dend_8", "dend_2", "dend_1", "dend_31", "dend_30", "dend_28", "dend_27", "dend_24", "dend_23", "dend_19", "dend_18", "dend_15", "dend_12", "dend_10", "dend_9", "dend_4", "dend_3", "dend_21", "dend_20", "dend_14", "dend_13", "dend_6", "dend_5" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_25", "dend_16", "dend_7", "dend_0", "dend_29", "dend_26", "dend_22", "dend_17", "dend_11", "dend_8", "dend_2", "dend_1", "dend_31", "dend_30", "dend_28", "dend_27", "dend_24", "dend_23", "dend_19", "dend_18", "dend_15", "dend_12", "dend_10", "dend_9", "dend_4", "dend_3", "dend_21", "dend_20", "dend_14", "dend_13", "dend_6", "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_31" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_35",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30", "dend_31" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_4", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cNAC_149_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cNAC_149_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cNAC187_L1_SLAC_16735ed026_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_25, id: dend_25, parent: soma_0
create dend_25
public dend_25
// Section: dend_16, id: dend_16, parent: soma_0
create dend_16
public dend_16
// Section: dend_7, id: dend_7, parent: soma_0
create dend_7
public dend_7
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_29, id: dend_29, parent: dend_25
create dend_29
public dend_29
// Section: dend_26, id: dend_26, parent: dend_25
create dend_26
public dend_26
// Section: dend_22, id: dend_22, parent: dend_16
create dend_22
public dend_22
// Section: dend_17, id: dend_17, parent: dend_16
create dend_17
public dend_17
// Section: dend_11, id: dend_11, parent: dend_7
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_31, id: dend_31, parent: dend_29
create dend_31
public dend_31
// Section: dend_30, id: dend_30, parent: dend_29
create dend_30
public dend_30
// Section: dend_28, id: dend_28, parent: dend_26
create dend_28
public dend_28
// Section: dend_27, id: dend_27, parent: dend_26
create dend_27
public dend_27
// Section: dend_24, id: dend_24, parent: dend_22
create dend_24
public dend_24
// Section: dend_23, id: dend_23, parent: dend_22
create dend_23
public dend_23
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_15, id: dend_15, parent: dend_11
create dend_15
public dend_15
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9
// Section: dend_4, id: dend_4, parent: dend_2
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_21, id: dend_21, parent: dend_19
create dend_21
public dend_21
// Section: dend_20, id: dend_20, parent: dend_19
create dend_20
public dend_20
// Section: dend_14, id: dend_14, parent: dend_12
create dend_14
public dend_14
// Section: dend_13, id: dend_13, parent: dend_12
create dend_13
public dend_13
// Section: dend_6, id: dend_6, parent: dend_4
create dend_6
public dend_6
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_25, dend_16, dend_7, dend_0, dend_29, dend_26, dend_22, dend_17, dend_11, dend_8, dend_2, dend_1, dend_31, dend_30, dend_28, dend_27, dend_24, dend_23, dend_19, dend_18, dend_15, dend_12, dend_10, dend_9, dend_4, dend_3, dend_21, dend_20, dend_14, dend_13, dend_6, dend_5]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_25, dend_16, dend_7, dend_0, dend_29, dend_26, dend_22, dend_17, dend_11, dend_8, dend_2, dend_1, dend_31, dend_30, dend_28, dend_27, dend_24, dend_23, dend_19, dend_18, dend_15, dend_12, dend_10, dend_9, dend_4, dend_3, dend_21, dend_20, dend_14, dend_13, dend_6, dend_5]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_31]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_35
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_34
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_16, dend_16, dend_16, dend_16, dend_16, dend_7, dend_7, dend_7, dend_7, dend_7, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_19, dend_19, dend_19, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cNAC_149_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cNAC_149_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_25(0), soma_0(0.4999999438016871)
    connect dend_16(0), soma_0(0.4999999438016871)
    connect dend_7(0), soma_0(0.4999999438016871)
    connect dend_0(0), soma_0(0.4999999438016871)
    connect axon_0(0), soma_0(1.0)
    connect dend_29(0), dend_25(1.0)
    connect dend_26(0), dend_25(1.0)
    connect dend_22(0), dend_16(1.0)
    connect dend_17(0), dend_16(1.0)
    connect dend_11(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_31(0), dend_29(1.0)
    connect dend_30(0), dend_29(1.0)
    connect dend_28(0), dend_26(1.0)
    connect dend_27(0), dend_26(1.0)
    connect dend_24(0), dend_22(1.0)
    connect dend_23(0), dend_22(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_15(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)
    connect dend_4(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_21(0), dend_19(1.0)
    connect dend_20(0), dend_19(1.0)
    connect dend_14(0), dend_12(1.0)
    connect dend_13(0), dend_12(1.0)
    connect dend_6(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -7.7891, -4.57272, 0.0191985, 1.93688 ) }
    soma_0 { pt3dadd( -6.98801, -4.07011, 0.0163976, 3.30389 ) }
    soma_0 { pt3dadd( -6.18691, -3.56751, 0.0135968, 4.71568 ) }
    soma_0 { pt3dadd( -5.38581, -3.0649, 0.010796, 5.9877 ) }
    soma_0 { pt3dadd( -4.58471, -2.56229, 0.00799515, 7.27615 ) }
    soma_0 { pt3dadd( -3.78362, -2.05968, 0.00519432, 8.62437 ) }
    soma_0 { pt3dadd( -2.98252, -1.55708, 0.00239349, 9.93247 ) }
    soma_0 { pt3dadd( -2.18142, -1.05447, -4.07344E-4, 10.8253 ) }
    soma_0 { pt3dadd( -1.38032, -0.551862, -0.00320818, 11.6633 ) }
    soma_0 { pt3dadd( -0.579227, -0.0492547, -0.00600901, 12.3985 ) }
    soma_0 { pt3dadd( 0.22187, 0.453353, -0.00880984, 13.2111 ) }
    soma_0 { pt3dadd( 1.02297, 0.95596, -0.0116107, 14.0859 ) }
    soma_0 { pt3dadd( 1.82406, 1.45857, -0.0144115, 14.3863 ) }
    soma_0 { pt3dadd( 2.62516, 1.96117, -0.0172123, 14.0239 ) }
    soma_0 { pt3dadd( 3.42626, 2.46378, -0.0200132, 13.5761 ) }
    soma_0 { pt3dadd( 4.22736, 2.96639, -0.022814, 13.0256 ) }
    soma_0 { pt3dadd( 5.02845, 3.469, -0.0256148, 12.1349 ) }
    soma_0 { pt3dadd( 5.82955, 3.9716, -0.0284157, 11.234 ) }
    soma_0 { pt3dadd( 6.63065, 4.47421, -0.0312165, 9.58323 ) }
    soma_0 { pt3dadd( 7.43175, 4.97682, -0.0340173, 7.03184 ) }
    soma_0 { pt3dadd( 8.23284, 5.47943, -0.0368182, 4.00358 ) }
    // Section: dend_25, id: dend_25, parent: soma_0 (entry count 21/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 1.28989, -5.27301, 0.919682, 2.64 ) }
    dend_25 { pt3dadd( 1.66986, -5.90395, 4.51442, 2.64 ) }
    dend_25 { pt3dadd( 2.30307, -7.01004, 9.76468, 2.64 ) }
    dend_25 { pt3dadd( 3.02958, -8.31809, 15.1757, 2.28 ) }
    dend_25 { pt3dadd( 4.0943, -10.2351, 23.1058, 1.92 ) }
    dend_25 { pt3dadd( 4.60985, -11.1634, 26.9456, 1.68 ) }
    dend_25 { pt3dadd( 4.96261, -11.7985, 29.5729, 1.68 ) }
    dend_25 { pt3dadd( 5.14569, -12.1208, 30.8108, 1.2 ) }
    dend_25 { pt3dadd( 5.45207, -12.6037, 32.2414, 1.2 ) }
    // Section: dend_16, id: dend_16, parent: soma_0 (entry count 30/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -6.61011, -3.63502, -2.27032, 2.4 ) }
    dend_16 { pt3dadd( -8.65096, -5.21552, -1.71036, 2.4 ) }
    dend_16 { pt3dadd( -9.461, -5.84283, -1.4881, 2.4 ) }
    dend_16 { pt3dadd( -11.7666, -7.62836, -0.855496, 2.4 ) }
    dend_16 { pt3dadd( -15.1379, -10.2392, 0.0694996, 2.16 ) }
    dend_16 { pt3dadd( -16.3394, -11.1697, 0.399179, 2.16 ) }
    // Section: dend_7, id: dend_7, parent: soma_0 (entry count 36/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 3.72989, -3.53, -3.21032, 3.25 ) }
    dend_7 { pt3dadd( 4.55608, -4.54782, -3.35824, 3.25 ) }
    dend_7 { pt3dadd( 5.39286, -5.57867, -3.50805, 3.25 ) }
    dend_7 { pt3dadd( 9.42448, -10.5453, -4.22985, 2.76 ) }
    dend_7 { pt3dadd( 11.712, -13.3634, -4.63941, 2.64 ) }
    dend_7 { pt3dadd( 14.8772, -17.2627, -5.20609, 2.52 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 42/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 3.98989, 7.72599, 0.259682, 2.4 ) }
    dend_0 { pt3dadd( 3.86094, 8.84701, 2.80065, 2.4 ) }
    dend_0 { pt3dadd( 3.67611, 10.9516, 7.38847, 2.16 ) }
    dend_0 { pt3dadd( 3.52896, 12.6273, 11.0412, 1.68 ) }
    dend_0 { pt3dadd( 3.39615, 14.1397, 14.338, 1.44 ) }
    dend_0 { pt3dadd( 3.35621, 14.5945, 15.3294, 1.44 ) }
    dend_0 { pt3dadd( 3.1882, 16.5077, 19.5, 1.44 ) }
    dend_0 { pt3dadd( 3.12401, 17.048, 20.7219, 1.44 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 50/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 8.23284, 5.47943, -0.0368182, 0.873113 ) }
    axon_0 { pt3dadd( 20.9391, 13.4513, -0.0368182, 0.873113 ) }
    axon_0 { pt3dadd( 33.6454, 21.4232, -0.0368182, 0.873113 ) }
    // Section: dend_29, id: dend_29, parent: dend_25 (entry count 53/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 5.45207, -12.6037, 32.2414, 1.2 ) }
    dend_29 { pt3dadd( 4.94936, -12.4395, 32.3306, 1.2 ) }
    dend_29 { pt3dadd( 3.66218, -11.9476, 32.5248, 1.2 ) }
    dend_29 { pt3dadd( 2.8726, -11.6102, 32.622, 1.2 ) }
    dend_29 { pt3dadd( 1.31526, -10.8833, 32.7911, 1.2 ) }
    dend_29 { pt3dadd( 0.69088, -10.5597, 32.8921, 1.2 ) }
    dend_29 { pt3dadd( -0.0224983, -10.1764, 33.0241, 1.2 ) }
    dend_29 { pt3dadd( -0.886796, -9.7078, 33.1863, 1.2 ) }
    dend_29 { pt3dadd( -2.05419, -9.11851, 33.4407, 1.2 ) }
    dend_29 { pt3dadd( -3.06665, -8.70834, 33.6761, 1.08 ) }
    dend_29 { pt3dadd( -4.44155, -8.38993, 34.0537, 1.32 ) }
    dend_29 { pt3dadd( -5.33356, -8.36386, 34.3298, 1.32 ) }
    dend_29 { pt3dadd( -6.84206, -8.93445, 34.959, 1.08 ) }
    dend_29 { pt3dadd( -7.82301, -9.86038, 35.4788, 1.44 ) }
    dend_29 { pt3dadd( -8.24583, -10.4656, 35.7403, 1.44 ) }
    dend_29 { pt3dadd( -8.72187, -11.3414, 36.0789, 1.44 ) }
    dend_29 { pt3dadd( -9.12479, -12.2122, 36.3728, 1.44 ) }
    dend_29 { pt3dadd( -9.68458, -13.6484, 36.8652, 1.32 ) }
    dend_29 { pt3dadd( -9.95243, -14.4407, 37.1509, 1.32 ) }
    dend_29 { pt3dadd( -10.2856, -15.2539, 37.4603, 1.32 ) }
    dend_29 { pt3dadd( -11.1238, -17.0265, 38.2324, 1.32 ) }
    // Section: dend_26, id: dend_26, parent: dend_25 (entry count 74/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 5.45207, -12.6037, 32.2414, 1.32 ) }
    dend_26 { pt3dadd( 5.94096, -12.0811, 36.2086, 1.32 ) }
    dend_26 { pt3dadd( 6.05005, -11.9515, 37.0199, 1.32 ) }
    dend_26 { pt3dadd( 6.54814, -11.4955, 39.8575, 1.32 ) }
    dend_26 { pt3dadd( 7.24782, -10.9937, 42.8773, 1.32 ) }
    dend_26 { pt3dadd( 7.60955, -10.7766, 44.1316, 1.32 ) }
    dend_26 { pt3dadd( 7.98463, -10.5888, 45.1866, 1.32 ) }
    dend_26 { pt3dadd( 9.10498, -10.0573, 47.6301, 0.96 ) }
    dend_26 { pt3dadd( 10.1657, -9.74454, 49.0902, 1.44 ) }
    dend_26 { pt3dadd( 11.3542, -9.67613, 49.8902, 1.44 ) }
    dend_26 { pt3dadd( 12.5568, -9.72248, 50.3985, 1.44 ) }
    dend_26 { pt3dadd( 14.9141, -9.75831, 51.4902, 1.44 ) }
    dend_26 { pt3dadd( 17.178, -9.72128, 52.7244, 1.08 ) }
    dend_26 { pt3dadd( 18.023, -9.66695, 53.2617, 1.08 ) }
    dend_26 { pt3dadd( 20.483, -9.41903, 55.5358, 1.08 ) }
    dend_26 { pt3dadd( 21.0076, -9.36026, 56.1917, 1.08 ) }
    dend_26 { pt3dadd( 22.9876, -9.14963, 59.2657, 1.44 ) }
    dend_26 { pt3dadd( 23.8578, -9.08347, 60.9478, 1.44 ) }
    dend_26 { pt3dadd( 24.1455, -9.06643, 61.6689, 1.44 ) }
    dend_26 { pt3dadd( 25.0113, -9.09589, 64.498, 1.44 ) }
    dend_26 { pt3dadd( 25.2644, -9.22154, 65.7746, 1.44 ) }
    dend_26 { pt3dadd( 25.246, -9.39212, 66.5967, 1.44 ) }
    dend_26 { pt3dadd( 24.7384, -9.95102, 68.1094, 1.44 ) }
    dend_26 { pt3dadd( 23.9465, -10.6765, 69.7926, 1.44 ) }
    dend_26 { pt3dadd( 23.1963, -11.3694, 71.3051, 1.08 ) }
    dend_26 { pt3dadd( 22.6881, -11.8507, 72.234, 1.08 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_26 { pt3dadd( 21.7241, -13.0863, 74.3753, 1.08 ) }
    dend_26 { pt3dadd( 21.248, -14.0733, 75.9691, 1.08 ) }
    dend_26 { pt3dadd( 21.0923, -15.0183, 77.38, 1.32 ) }
    dend_26 { pt3dadd( 21.2013, -16.1725, 79.0332, 1.32 ) }
    dend_26 { pt3dadd( 21.3476, -16.7482, 79.7889, 1.32 ) }
    dend_26 { pt3dadd( 22.0203, -18.9063, 82.3831, 1.2 ) }
    dend_26 { pt3dadd( 22.6474, -20.8634, 84.4767, 1.2 ) }
    dend_26 { pt3dadd( 23.1702, -22.4757, 86.1709, 0.96 ) }
    dend_26 { pt3dadd( 23.4958, -23.588, 87.2998, 0.96 ) }
    dend_26 { pt3dadd( 23.9617, -25.0323, 88.7269, 1.32 ) }
    dend_26 { pt3dadd( 24.5334, -26.1878, 89.9548, 1.32 ) }
    dend_26 { pt3dadd( 25.3923, -27.542, 91.3743, 1.32 ) }
    dend_26 { pt3dadd( 26.6774, -29.2951, 93.2287, 1.32 ) }
    dend_26 { pt3dadd( 26.9404, -29.6324, 93.6294, 1.32 ) }
    dend_26 { pt3dadd( 27.4358, -30.1414, 94.4007, 1.32 ) }
    dend_26 { pt3dadd( 28.9041, -30.8582, 96.4461, 1.08 ) }
    // Section: dend_22, id: dend_22, parent: dend_16 (entry count 16/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( -16.3394, -11.1697, 0.399179, 1.68 ) }
    dend_22 { pt3dadd( -17.5917, -13.2018, -3.10275, 1.68 ) }
    dend_22 { pt3dadd( -18.0092, -13.7975, -4.05357, 1.68 ) }
    dend_22 { pt3dadd( -19.032, -15.2394, -6.13663, 1.68 ) }
    dend_22 { pt3dadd( -19.4488, -15.8963, -6.9902, 1.2 ) }
    dend_22 { pt3dadd( -19.7067, -16.3496, -7.53788, 1.2 ) }
    dend_22 { pt3dadd( -20.2806, -17.4642, -8.8316, 1.2 ) }
    dend_22 { pt3dadd( -20.5721, -18.1457, -9.4516, 1.2 ) }
    dend_22 { pt3dadd( -20.7556, -18.7121, -9.93937, 1.2 ) }
    dend_22 { pt3dadd( -20.9968, -19.9378, -10.8638, 1.2 ) }
    dend_22 { pt3dadd( -21.0351, -20.3631, -11.2064, 1.2 ) }
    dend_22 { pt3dadd( -20.9971, -20.7444, -11.5155, 1.2 ) }
    dend_22 { pt3dadd( -20.6919, -21.7598, -12.3817, 1.2 ) }
    dend_22 { pt3dadd( -20.5467, -22.1391, -12.7112, 1.2 ) }
    dend_22 { pt3dadd( -20.3523, -22.6115, -13.091, 1.2 ) }
    dend_22 { pt3dadd( -20.1789, -23.0523, -13.3907, 1.2 ) }
    dend_22 { pt3dadd( -19.8126, -24.2424, -13.9166, 1.56 ) }
    dend_22 { pt3dadd( -19.5056, -25.7128, -14.2336, 1.56 ) }
    dend_22 { pt3dadd( -19.4041, -26.6396, -14.2773, 1.56 ) }
    dend_22 { pt3dadd( -19.4255, -28.123, -14.1233, 1.08 ) }
    dend_22 { pt3dadd( -19.5302, -28.8997, -14.0577, 1.08 ) }
    dend_22 { pt3dadd( -20.1359, -31.7387, -13.8246, 1.56 ) }
    dend_22 { pt3dadd( -20.443, -32.9076, -13.7207, 1.56 ) }
    dend_22 { pt3dadd( -20.6907, -33.8107, -13.6467, 1.56 ) }
    dend_22 { pt3dadd( -21.1342, -35.4576, -13.5944, 1.08 ) }
    dend_22 { pt3dadd( -21.8471, -38.9067, -13.2869, 1.44 ) }
    dend_22 { pt3dadd( -21.9129, -39.9646, -13.1267, 1.44 ) }
    dend_22 { pt3dadd( -21.8143, -40.8288, -12.9607, 1.44 ) }
    dend_22 { pt3dadd( -21.6037, -41.518, -12.7258, 0.72 ) }
    dend_22 { pt3dadd( -21.4653, -41.8375, -12.5901, 0.72 ) }
    dend_22 { pt3dadd( -19.848, -44.9926, -10.9635, 1.44 ) }
    dend_22 { pt3dadd( -19.2379, -46.1338, -10.2691, 1.44 ) }
    dend_22 { pt3dadd( -19.0217, -46.5787, -10.0185, 1.44 ) }
    dend_22 { pt3dadd( -18.1153, -48.7843, -8.93406, 1.2 ) }
    dend_22 { pt3dadd( -17.8715, -49.5139, -8.63769, 1.2 ) }
    dend_22 { pt3dadd( -17.5844, -50.6413, -8.3189, 1.2 ) }
    dend_22 { pt3dadd( -17.3829, -51.8075, -8.15914, 0.84 ) }
    dend_22 { pt3dadd( -17.1824, -53.3699, -7.99888, 1.32 ) }
    dend_22 { pt3dadd( -17.0185, -54.6759, -7.92423, 1.32 ) }
    dend_22 { pt3dadd( -16.9005, -55.4759, -7.92379, 1.32 ) }
    dend_22 { pt3dadd( -16.4321, -57.4164, -7.99417, 0.6 ) }
    dend_22 { pt3dadd( -16.1783, -58.1552, -8.04867, 0.6 ) }
    dend_22 { pt3dadd( -15.8498, -58.9376, -8.11287, 0.6 ) }
    dend_22 { pt3dadd( -15.1746, -60.4279, -8.23717, 1.32 ) }
    dend_22 { pt3dadd( -14.4487, -61.982, -8.35894, 1.32 ) }
    dend_22 { pt3dadd( -13.8597, -63.2968, -8.45021, 1.32 ) }
    dend_22 { pt3dadd( -13.2397, -64.8408, -8.51107, 1.8 ) }
    dend_22 { pt3dadd( -12.8687, -65.9615, -8.52475, 1.8 ) }
    dend_22 { pt3dadd( -12.474, -67.6275, -8.50334, 1.08 ) }
    dend_22 { pt3dadd( -12.2656, -69.0408, -8.44964, 1.08 ) }
    dend_22 { pt3dadd( -12.1745, -70.2328, -8.40043, 1.08 ) }
    dend_22 { pt3dadd( -12.0842, -72.4324, -8.30589, 0.72 ) }
    dend_22 { pt3dadd( -12.0361, -73.76, -8.24696, 0.72 ) }
    dend_22 { pt3dadd( -11.963, -75.058, -8.18736, 1.44 ) }
    dend_22 { pt3dadd( -11.8157, -76.3675, -8.08493, 1.44 ) }
    dend_22 { pt3dadd( -11.588, -77.6758, -8.07435, 1.44 ) }
    dend_22 { pt3dadd( -11.3094, -78.5699, -8.13599, 0.96 ) }
    dend_22 { pt3dadd( -11.0171, -79.2096, -8.22501, 0.96 ) }
    dend_22 { pt3dadd( -10.4516, -80.2219, -8.40122, 0.6 ) }
    dend_22 { pt3dadd( -9.2644, -82.1289, -8.77873, 1.68 ) }
    dend_22 { pt3dadd( -7.44373, -84.8736, -9.3535, 1.68 ) }
    dend_22 { pt3dadd( -6.04499, -86.9162, -9.79192, 0.84 ) }
    dend_22 { pt3dadd( -5.27864, -88.0687, -10.0289, 0.84 ) }
    dend_22 { pt3dadd( -5.00073, -88.4961, -10.1132, 1.2 ) }
    dend_22 { pt3dadd( -4.5923, -89.1576, -10.2309, 1.2 ) }
    dend_22 { pt3dadd( -3.72863, -90.7062, -10.4414, 0.72 ) }
    dend_22 { pt3dadd( -3.42273, -91.2988, -10.4357, 0.72 ) }
    dend_22 { pt3dadd( -2.92512, -92.3028, -10.4244, 1.2 ) }
    dend_22 { pt3dadd( -2.79612, -92.5277, -10.4218, 1.2 ) }
    dend_22 { pt3dadd( -2.05669, -93.582, -10.3539, 0.6 ) }
    dend_22 { pt3dadd( -1.36825, -94.4477, -10.2617, 0.6 ) }
    dend_22 { pt3dadd( -0.465782, -95.5391, -10.1097, 1.44 ) }
    dend_22 { pt3dadd( 0.31599, -96.4856, -9.96268, 0.96 ) }
    dend_22 { pt3dadd( 1.43384, -97.9291, -9.72829, 0.96 ) }
    dend_22 { pt3dadd( 2.47634, -99.4318, -9.48444, 0.96 ) }
    dend_22 { pt3dadd( 2.61262, -99.6513, -9.46958, 0.96 ) }
    dend_22 { pt3dadd( 3.33629, -100.927, -9.48434, 0.72 ) }
    dend_22 { pt3dadd( 3.76013, -101.743, -9.54817, 0.72 ) }
    dend_22 { pt3dadd( 4.49402, -103.262, -9.73971, 1.44 ) }
    dend_22 { pt3dadd( 4.94004, -104.2, -9.89151, 1.44 ) }
    dend_22 { pt3dadd( 6.35106, -107.029, -10.4306, 0.84 ) }
    dend_22 { pt3dadd( 7.07529, -108.309, -10.6548, 0.84 ) }
    dend_22 { pt3dadd( 7.5611, -109.096, -10.8004, 0.84 ) }
    dend_22 { pt3dadd( 8.44226, -110.408, -11.0475, 1.44 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_22 { pt3dadd( 9.56088, -111.906, -11.322, 0.72 ) }
    dend_22 { pt3dadd( 10.0783, -112.563, -11.4105, 0.72 ) }
    dend_22 { pt3dadd( 11.2784, -114.117, -11.3812, 1.92 ) }
    // Section: dend_17, id: dend_17, parent: dend_16 (entry count 3/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -16.3394, -11.1697, 0.399179, 1.44 ) }
    dend_17 { pt3dadd( -18.9633, -9.80112, 2.69199, 1.44 ) }
    dend_17 { pt3dadd( -21.0123, -8.8847, 4.21515, 1.44 ) }
    dend_17 { pt3dadd( -22.2829, -8.31643, 5.15967, 1.44 ) }
    dend_17 { pt3dadd( -23.5835, -7.73473, 6.12649, 1.44 ) }
    dend_17 { pt3dadd( -26.0581, -6.62795, 7.96605, 1.32 ) }
    dend_17 { pt3dadd( -26.9017, -6.25064, 8.59317, 1.32 ) }
    dend_17 { pt3dadd( -29.0905, -5.17823, 9.79904, 1.8 ) }
    // Section: dend_11, id: dend_11, parent: dend_7 (entry count 11/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 14.8772, -17.2627, -5.20609, 1.8 ) }
    dend_11 { pt3dadd( 16.4322, -18.5972, -6.89772, 1.8 ) }
    dend_11 { pt3dadd( 18.5469, -20.0449, -9.12813, 1.8 ) }
    dend_11 { pt3dadd( 19.5234, -20.5762, -10.2345, 1.44 ) }
    dend_11 { pt3dadd( 21.2944, -21.2942, -12.2071, 1.92 ) }
    dend_11 { pt3dadd( 21.9032, -21.4826, -12.8986, 1.92 ) }
    dend_11 { pt3dadd( 23.3389, -21.8508, -14.4872, 1.32 ) }
    dend_11 { pt3dadd( 25.4157, -22.1531, -16.6912, 1.8 ) }
    dend_11 { pt3dadd( 28.4833, -22.3369, -19.5978, 1.8 ) }
    dend_11 { pt3dadd( 30.0409, -22.355, -20.9337, 1.44 ) }
    dend_11 { pt3dadd( 32.2745, -22.3872, -22.5678, 1.44 ) }
    dend_11 { pt3dadd( 33.4538, -22.4051, -23.4002, 1.44 ) }
    dend_11 { pt3dadd( 34.1423, -22.4117, -23.826, 1.44 ) }
    dend_11 { pt3dadd( 36.376, -22.5382, -24.7549, 1.92 ) }
    dend_11 { pt3dadd( 37.7078, -22.7217, -24.9288, 1.92 ) }
    dend_11 { pt3dadd( 39.9927, -23.3416, -24.928, 2.16 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 27/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 14.8772, -17.2627, -5.20609, 1.08 ) }
    dend_8 { pt3dadd( 16.1173, -18.8203, -3.29169, 1.08 ) }
    dend_8 { pt3dadd( 16.8094, -19.7806, -2.28599, 1.32 ) }
    dend_8 { pt3dadd( 18.7321, -23.0302, 1.01875, 1.08 ) }
    dend_8 { pt3dadd( 19.1534, -23.8975, 1.87003, 1.56 ) }
    dend_8 { pt3dadd( 19.843, -25.7223, 3.54476, 0.84 ) }
    dend_8 { pt3dadd( 20.1636, -26.7212, 4.40024, 0.84 ) }
    dend_8 { pt3dadd( 20.5576, -28.2568, 5.53677, 1.2 ) }
    dend_8 { pt3dadd( 20.9777, -31.1592, 7.36962, 1.44 ) }
    dend_8 { pt3dadd( 21.0237, -32.0561, 7.72568, 1.44 ) }
    dend_8 { pt3dadd( 21.0725, -33.418, 8.28459, 1.44 ) }
    dend_8 { pt3dadd( 21.1479, -34.4664, 8.67545, 1.08 ) }
    dend_8 { pt3dadd( 21.3889, -36.1198, 9.26777, 1.68 ) }
    dend_8 { pt3dadd( 21.8689, -38.2718, 9.98386, 1.32 ) }
    dend_8 { pt3dadd( 22.4176, -40.1611, 10.4988, 1.08 ) }
    dend_8 { pt3dadd( 23.0882, -42.1187, 11.0396, 1.68 ) }
    dend_8 { pt3dadd( 23.8501, -44.3672, 11.5311, 1.32 ) }
    dend_8 { pt3dadd( 24.3079, -45.9847, 11.8458, 1.08 ) }
    dend_8 { pt3dadd( 24.4811, -46.7258, 11.9904, 1.08 ) }
    dend_8 { pt3dadd( 24.9165, -48.8009, 12.3465, 1.08 ) }
    dend_8 { pt3dadd( 25.1972, -50.0833, 12.5254, 1.08 ) }
    dend_8 { pt3dadd( 25.8796, -52.9557, 12.7294, 1.44 ) }
    dend_8 { pt3dadd( 26.4499, -55.1914, 12.8147, 0.96 ) }
    dend_8 { pt3dadd( 26.9469, -57.0922, 12.8663, 0.6 ) }
    dend_8 { pt3dadd( 27.2798, -58.3857, 12.8815, 1.08 ) }
    dend_8 { pt3dadd( 28.0356, -61.2523, 12.8243, 1.08 ) }
    dend_8 { pt3dadd( 28.502, -62.7772, 12.8047, 1.32 ) }
    dend_8 { pt3dadd( 29.2053, -64.3347, 12.8017, 1.8 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 55/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 3.12401, 17.048, 20.7219, 1.32 ) }
    dend_2 { pt3dadd( 3.2867, 16.7259, 21.1392, 1.32 ) }
    dend_2 { pt3dadd( 3.55521, 16.009, 22.6207, 1.32 ) }
    dend_2 { pt3dadd( 3.86964, 15.7211, 24.2659, 1.32 ) }
    dend_2 { pt3dadd( 4.09167, 15.7321, 24.9947, 1.32 ) }
    dend_2 { pt3dadd( 4.54318, 15.8743, 26.1333, 1.32 ) }
    dend_2 { pt3dadd( 5.12266, 16.0424, 27.2963, 1.32 ) }
    dend_2 { pt3dadd( 5.6871, 16.2603, 28.2576, 1.32 ) }
    dend_2 { pt3dadd( 6.67123, 16.6931, 29.6649, 1.32 ) }
    dend_2 { pt3dadd( 8.32854, 17.5059, 31.742, 1.08 ) }
    dend_2 { pt3dadd( 10.0714, 18.3828, 33.6194, 0.96 ) }
    dend_2 { pt3dadd( 11.0376, 18.8754, 34.5813, 0.96 ) }
    dend_2 { pt3dadd( 11.6854, 19.2053, 35.173, 0.96 ) }
    dend_2 { pt3dadd( 13.365, 20.1361, 36.7675, 1.32 ) }
    dend_2 { pt3dadd( 14.7211, 20.9654, 38.1955, 1.08 ) }
    dend_2 { pt3dadd( 15.8593, 21.7175, 39.3968, 0.84 ) }
    dend_2 { pt3dadd( 17.3777, 22.7026, 40.9796, 0.84 ) }
    dend_2 { pt3dadd( 18.0762, 23.1392, 41.6749, 0.84 ) }
    dend_2 { pt3dadd( 20.4829, 24.501, 43.794, 1.44 ) }
    dend_2 { pt3dadd( 23.2567, 25.9227, 45.8271, 1.2 ) }
    dend_2 { pt3dadd( 24.6537, 26.547, 46.6673, 1.2 ) }
    dend_2 { pt3dadd( 25.9516, 27.0998, 47.3313, 1.2 ) }
    dend_2 { pt3dadd( 28.4425, 28.185, 48.3782, 1.08 ) }
    dend_2 { pt3dadd( 30.4388, 29.1553, 49.1441, 1.08 ) }
    dend_2 { pt3dadd( 32.2641, 30.1259, 49.7372, 1.08 ) }
    dend_2 { pt3dadd( 36.6338, 32.6243, 51.2615, 1.08 ) }
    dend_2 { pt3dadd( 37.7407, 33.2998, 51.7271, 1.08 ) }
    dend_2 { pt3dadd( 38.5514, 33.8435, 52.1237, 1.08 ) }
    dend_2 { pt3dadd( 40.6101, 35.3332, 53.2434, 1.08 ) }
    dend_2 { pt3dadd( 41.3224, 35.9019, 53.6678, 1.44 ) }
    dend_2 { pt3dadd( 43.2528, 37.5245, 54.8372, 1.08 ) }
    dend_2 { pt3dadd( 44.1433, 38.2233, 55.3411, 1.08 ) }
    dend_2 { pt3dadd( 44.8054, 38.6522, 55.6719, 1.08 ) }
    dend_2 { pt3dadd( 45.8927, 39.262, 56.0405, 0.96 ) }
    dend_2 { pt3dadd( 47.0423, 39.8636, 56.232, 1.32 ) }
    dend_2 { pt3dadd( 48.193, 40.5077, 56.295, 1.32 ) }
    dend_2 { pt3dadd( 50.658, 42.051, 56.3343, 0.96 ) }
    dend_2 { pt3dadd( 51.4424, 42.5769, 56.3838, 0.96 ) }
    dend_2 { pt3dadd( 53.4361, 43.8965, 56.5454, 0.96 ) }
    dend_2 { pt3dadd( 54.2838, 44.4779, 56.6413, 1.32 ) }
    dend_2 { pt3dadd( 55.1079, 45.0704, 56.7295, 1.32 ) }
    dend_2 { pt3dadd( 56.6178, 46.4611, 56.8394, 1.2 ) }
    dend_2 { pt3dadd( 57.2967, 47.343, 56.7762, 1.32 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 98/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 3.12401, 17.048, 20.7219, 0.84 ) }
    dend_1 { pt3dadd( 1.79139, 17.748, 20.8275, 0.84 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_1 { pt3dadd( 1.24087, 18.0878, 20.911, 0.84 ) }
    dend_1 { pt3dadd( -0.235521, 19.1779, 21.1862, 1.32 ) }
    dend_1 { pt3dadd( -1.38419, 20.2585, 21.3935, 0.72 ) }
    dend_1 { pt3dadd( -2.5008, 21.5628, 21.5951, 1.44 ) }
    dend_1 { pt3dadd( -3.90997, 23.6006, 21.8491, 0.96 ) }
    dend_1 { pt3dadd( -4.26527, 24.4513, 21.9421, 0.96 ) }
    dend_1 { pt3dadd( -4.50361, 25.5444, 22.0822, 0.84 ) }
    dend_1 { pt3dadd( -4.62613, 27.458, 22.325, 1.2 ) }
    dend_1 { pt3dadd( -4.59845, 28.4055, 22.4119, 0.72 ) }
    dend_1 { pt3dadd( -4.52002, 29.4611, 22.4702, 1.32 ) }
    dend_1 { pt3dadd( -4.44594, 31.6526, 22.4855, 0.84 ) }
    dend_1 { pt3dadd( -4.47922, 32.3131, 22.4977, 0.84 ) }
    dend_1 { pt3dadd( -4.71827, 33.9284, 22.547, 0.84 ) }
    dend_1 { pt3dadd( -4.87554, 34.624, 22.5759, 1.2 ) }
    dend_1 { pt3dadd( -5.0697, 35.4826, 22.5979, 1.2 ) }
    dend_1 { pt3dadd( -5.41743, 37.3481, 22.6112, 1.56 ) }
    dend_1 { pt3dadd( -5.52222, 38.4351, 22.6823, 1.56 ) }
    dend_1 { pt3dadd( -5.42592, 40.2766, 22.9561, 0.96 ) }
    dend_1 { pt3dadd( -5.33833, 40.6536, 23.0444, 0.96 ) }
    dend_1 { pt3dadd( -4.66689, 42.5914, 23.5938, 1.2 ) }
    dend_1 { pt3dadd( -4.24233, 43.5561, 23.9084, 1.2 ) }
    dend_1 { pt3dadd( -2.99324, 46.1724, 24.8324, 0.84 ) }
    dend_1 { pt3dadd( -2.55843, 47.2377, 25.2681, 0.84 ) }
    dend_1 { pt3dadd( -2.29619, 48.1207, 25.6561, 0.84 ) }
    dend_1 { pt3dadd( -2.15294, 49.0735, 26.0511, 0.72 ) }
    dend_1 { pt3dadd( -2.1615, 49.6909, 26.2717, 0.72 ) }
    dend_1 { pt3dadd( -2.37635, 51.4165, 26.7603, 1.32 ) }
    dend_1 { pt3dadd( -2.77829, 53.3535, 27.128, 1.32 ) }
    dend_1 { pt3dadd( -2.98654, 54.2361, 27.2842, 0.96 ) }
    dend_1 { pt3dadd( -3.21586, 55.2132, 27.4446, 0.96 ) }
    dend_1 { pt3dadd( -3.52712, 56.6156, 27.6456, 1.44 ) }
    dend_1 { pt3dadd( -3.64381, 57.0828, 27.7004, 1.44 ) }
    dend_1 { pt3dadd( -4.01244, 58.1063, 27.7428, 0.84 ) }
    dend_1 { pt3dadd( -4.63015, 59.1338, 27.732, 0.84 ) }
    dend_1 { pt3dadd( -5.37896, 60.0369, 27.7321, 1.56 ) }
    dend_1 { pt3dadd( -6.09949, 60.7501, 27.6652, 1.56 ) }
    dend_1 { pt3dadd( -6.78156, 61.3762, 27.5864, 1.2 ) }
    dend_1 { pt3dadd( -8.34835, 62.8247, 27.3789, 1.56 ) }
    dend_1 { pt3dadd( -9.77458, 64.1504, 27.1688, 0.72 ) }
    dend_1 { pt3dadd( -10.3106, 64.6802, 27.084, 0.72 ) }
    dend_1 { pt3dadd( -11.9415, 66.4974, 26.8099, 0.72 ) }
    dend_1 { pt3dadd( -12.6485, 67.4591, 26.6879, 0.72 ) }
    dend_1 { pt3dadd( -13.2704, 68.5325, 26.5839, 1.2 ) }
    dend_1 { pt3dadd( -13.6084, 69.247, 26.5365, 1.2 ) }
    dend_1 { pt3dadd( -14.2301, 70.6499, 26.4428, 0.48 ) }
    dend_1 { pt3dadd( -14.6549, 71.6257, 26.4196, 0.48 ) }
    dend_1 { pt3dadd( -15.0755, 72.5852, 26.5102, 0.96 ) }
    dend_1 { pt3dadd( -15.5507, 73.6502, 26.6362, 0.96 ) }
    dend_1 { pt3dadd( -15.8519, 74.3508, 26.7704, 0.36 ) }
    dend_1 { pt3dadd( -16.2397, 75.2118, 26.9842, 0.36 ) }
    dend_1 { pt3dadd( -16.976, 76.6765, 27.4152, 0.96 ) }
    dend_1 { pt3dadd( -17.891, 78.2154, 27.7671, 0.48 ) }
    dend_1 { pt3dadd( -18.7514, 79.4653, 27.9541, 1.08 ) }
    dend_1 { pt3dadd( -19.5378, 80.5573, 28.0746, 1.32 ) }
    dend_1 { pt3dadd( -20.0226, 81.2486, 28.123, 1.32 ) }
    dend_1 { pt3dadd( -20.8254, 82.4399, 28.146, 1.32 ) }
    dend_1 { pt3dadd( -22.348, 84.7167, 28.0547, 0.36 ) }
    dend_1 { pt3dadd( -22.7845, 85.4717, 27.9348, 0.36 ) }
    dend_1 { pt3dadd( -23.8515, 87.5799, 27.5262, 1.2 ) }
    dend_1 { pt3dadd( -24.1318, 88.2622, 27.3864, 1.2 ) }
    dend_1 { pt3dadd( -24.4998, 89.366, 27.1954, 0.72 ) }
    dend_1 { pt3dadd( -24.8606, 90.6184, 27.0371, 0.72 ) }
    dend_1 { pt3dadd( -25.3455, 92.2149, 26.9312, 0.48 ) }
    dend_1 { pt3dadd( -25.7385, 93.2617, 26.7813, 0.48 ) }
    dend_1 { pt3dadd( -26.1873, 94.1922, 26.5569, 1.2 ) }
    dend_1 { pt3dadd( -26.4643, 94.6666, 26.477, 1.2 ) }
    dend_1 { pt3dadd( -27.0711, 95.5959, 26.4142, 0.6 ) }
    dend_1 { pt3dadd( -27.5545, 96.2891, 26.378, 0.6 ) }
    dend_1 { pt3dadd( -28.0027, 96.9859, 26.3668, 0.6 ) }
    dend_1 { pt3dadd( -28.3764, 97.6363, 26.2932, 0.6 ) }
    dend_1 { pt3dadd( -29.287, 99.2025, 26.0138, 0.6 ) }
    dend_1 { pt3dadd( -29.9035, 100.314, 25.7755, 1.32 ) }
    dend_1 { pt3dadd( -30.8822, 102.208, 25.1434, 0.84 ) }
    dend_1 { pt3dadd( -31.4814, 103.317, 24.6833, 0.84 ) }
    dend_1 { pt3dadd( -32.3458, 104.847, 23.845, 0.84 ) }
    dend_1 { pt3dadd( -32.8715, 105.83, 23.2507, 1.44 ) }
    dend_1 { pt3dadd( -33.272, 106.597, 22.7582, 1.44 ) }
    dend_1 { pt3dadd( -34.2998, 108.538, 21.5577, 0.84 ) }
    dend_1 { pt3dadd( -34.8994, 109.577, 20.8533, 0.84 ) }
    dend_1 { pt3dadd( -35.8975, 111.148, 19.7073, 0.72 ) }
    dend_1 { pt3dadd( -36.6986, 112.483, 18.7083, 1.32 ) }
    dend_1 { pt3dadd( -37.2398, 113.426, 17.9915, 0.48 ) }
    dend_1 { pt3dadd( -37.7596, 114.329, 17.3314, 0.48 ) }
    dend_1 { pt3dadd( -39.4406, 117.067, 15.5029, 1.08 ) }
    dend_1 { pt3dadd( -39.8802, 117.732, 15.015, 1.08 ) }
    dend_1 { pt3dadd( -40.7698, 118.913, 14.1064, 0.48 ) }
    dend_1 { pt3dadd( -41.2246, 119.486, 13.6319, 0.48 ) }
    dend_1 { pt3dadd( -41.8424, 120.299, 12.9682, 1.08 ) }
    dend_1 { pt3dadd( -42.4381, 121.169, 12.3438, 1.08 ) }
    dend_1 { pt3dadd( -43.6306, 123.086, 11.2351, 0.48 ) }
    dend_1 { pt3dadd( -43.983, 123.671, 10.8968, 0.48 ) }
    dend_1 { pt3dadd( -44.4035, 124.361, 10.4694, 1.08 ) }
    dend_1 { pt3dadd( -45.2404, 125.766, 9.54537, 0.48 ) }
    dend_1 { pt3dadd( -45.6167, 126.413, 9.02524, 0.48 ) }
    dend_1 { pt3dadd( -45.8263, 126.783, 8.71114, 1.08 ) }
    dend_1 { pt3dadd( -46.0651, 127.162, 8.41148, 1.08 ) }
    dend_1 { pt3dadd( -47.0782, 128.593, 7.25171, 0.72 ) }
    dend_1 { pt3dadd( -47.515, 129.158, 6.80444, 0.72 ) }
    dend_1 { pt3dadd( -49.2116, 131.311, 5.24761, 1.08 ) }
    dend_1 { pt3dadd( -49.7109, 131.968, 4.78023, 1.08 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_1 { pt3dadd( -50.5616, 133.176, 4.11918, 0.48 ) }
    dend_1 { pt3dadd( -50.8358, 133.58, 3.92738, 0.48 ) }
    dend_1 { pt3dadd( -51.2319, 134.246, 3.74026, 0.96 ) }
    dend_1 { pt3dadd( -51.5262, 134.825, 3.65749, 0.96 ) }
    dend_1 { pt3dadd( -52.1888, 136.476, 3.97192, 0.96 ) }
    dend_1 { pt3dadd( -52.9139, 139.213, 4.46145, 0.6 ) }
    dend_1 { pt3dadd( -55.6327, 149.099, 2.47047, 0.6 ) }
    dend_1 { pt3dadd( -60.3093, 158.23, 0.888555, 0.6 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 8/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 33.6454, 21.4232, -0.0368182, 0.6 ) }
    axon_1 { pt3dadd( 46.3516, 29.3951, -0.0368182, 0.6 ) }
    axon_1 { pt3dadd( 59.0579, 37.367, -0.0368182, 0.6 ) }
    // Section: dend_31, id: dend_31, parent: dend_29 (entry count 11/100)
    dend_31 { pt3dclear() }
    dend_31 { pt3dadd( -11.1238, -17.0265, 38.2324, 0.84 ) }
    dend_31 { pt3dadd( -12.2256, -17.6688, 39.047, 0.84 ) }
    dend_31 { pt3dadd( -13.296, -18.3695, 39.9558, 0.84 ) }
    dend_31 { pt3dadd( -13.8305, -18.7246, 40.4122, 0.84 ) }
    dend_31 { pt3dadd( -14.7625, -19.324, 41.1968, 0.84 ) }
    dend_31 { pt3dadd( -15.9831, -20.0621, 42.2361, 1.2 ) }
    dend_31 { pt3dadd( -19.1502, -21.6781, 45.1627, 0.72 ) }
    dend_31 { pt3dadd( -19.9179, -22.0087, 45.9647, 1.08 ) }
    dend_31 { pt3dadd( -20.9876, -22.3655, 47.2253, 0.72 ) }
    dend_31 { pt3dadd( -22.5383, -22.7134, 49.1713, 0.72 ) }
    dend_31 { pt3dadd( -23.4343, -22.7962, 50.3171, 0.72 ) }
    dend_31 { pt3dadd( -25.4187, -22.6579, 52.7989, 1.56 ) }
    dend_31 { pt3dadd( -25.9159, -22.5507, 53.3711, 1.56 ) }
    dend_31 { pt3dadd( -27.2653, -22.1838, 54.9395, 1.2 ) }
    dend_31 { pt3dadd( -27.9093, -21.9771, 55.7002, 1.2 ) }
    dend_31 { pt3dadd( -28.5136, -21.7722, 56.3916, 1.2 ) }
    dend_31 { pt3dadd( -29.5494, -21.4828, 57.4704, 1.2 ) }
    dend_31 { pt3dadd( -30.2046, -21.3546, 58.098, 1.2 ) }
    dend_31 { pt3dadd( -30.9283, -21.2361, 58.8375, 1.2 ) }
    dend_31 { pt3dadd( -31.9693, -21.1368, 59.9892, 1.2 ) }
    dend_31 { pt3dadd( -32.3865, -21.1232, 60.5057, 1.2 ) }
    dend_31 { pt3dadd( -33.1185, -21.1624, 61.4995, 1.2 ) }
    dend_31 { pt3dadd( -34.6925, -21.2619, 63.768, 0.96 ) }
    dend_31 { pt3dadd( -35.485, -21.3088, 64.8477, 0.96 ) }
    dend_31 { pt3dadd( -36.5953, -21.366, 66.1531, 0.6 ) }
    dend_31 { pt3dadd( -37.1871, -21.3786, 66.6753, 1.08 ) }
    dend_31 { pt3dadd( -38.9148, -21.4087, 67.961, 0.72 ) }
    dend_31 { pt3dadd( -40.3939, -21.5024, 69.0464, 0.72 ) }
    dend_31 { pt3dadd( -44.0589, -21.9443, 71.6227, 1.08 ) }
    dend_31 { pt3dadd( -45.2341, -22.1333, 72.4606, 1.08 ) }
    dend_31 { pt3dadd( -47.7753, -22.8052, 74.5389, 0.96 ) }
    dend_31 { pt3dadd( -48.9708, -23.2859, 75.6807, 1.44 ) }
    dend_31 { pt3dadd( -50.7668, -24.2425, 77.6918, 0.96 ) }
    dend_31 { pt3dadd( -51.5237, -24.6982, 78.6373, 0.96 ) }
    dend_31 { pt3dadd( -51.8776, -24.9114, 79.1346, 0.96 ) }
    dend_31 { pt3dadd( -52.7671, -25.3436, 80.2831, 0.96 ) }
    dend_31 { pt3dadd( -53.3864, -25.4297, 80.8722, 0.96 ) }
    dend_31 { pt3dadd( -54.5206, -25.2668, 81.6935, 0.96 ) }
    dend_31 { pt3dadd( -55.4781, -25.0789, 82.2899, 0.96 ) }
    dend_31 { pt3dadd( -56.0941, -24.9969, 82.7204, 0.96 ) }
    dend_31 { pt3dadd( -58.0109, -24.9708, 84.328, 1.68 ) }
    dend_31 { pt3dadd( -59.1522, -25.1356, 85.4823, 1.2 ) }
    dend_31 { pt3dadd( -60.4789, -25.6531, 87.1084, 1.2 ) }
    dend_31 { pt3dadd( -61.3042, -26.1016, 88.2231, 0.72 ) }
    dend_31 { pt3dadd( -62.6578, -27.0718, 90.2905, 1.2 ) }
    dend_31 { pt3dadd( -63.7624, -28.1352, 92.2371, 0.96 ) }
    dend_31 { pt3dadd( -64.2354, -28.8615, 93.3272, 0.96 ) }
    dend_31 { pt3dadd( -64.7049, -29.8806, 94.6627, 0.96 ) }
    dend_31 { pt3dadd( -69.9728, -32.0695, 102.903, 0.96 ) }
    dend_31 { pt3dadd( -75.3631, -34.1791, 111.083, 0.96 ) }
    dend_31 { pt3dadd( -79.2721, -34.6024, 120.278, 0.96 ) }
    dend_31 { pt3dadd( -81.097, -34.1065, 130.099, 0.96 ) }
    dend_31 { pt3dadd( -82.4458, -33.5418, 139.993, 0.96 ) }
    // Section: dend_30, id: dend_30, parent: dend_29 (entry count 64/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( -11.1238, -17.0265, 38.2324, 1.32 ) }
    dend_30 { pt3dadd( -12.1388, -17.8, 38.768, 1.08 ) }
    dend_30 { pt3dadd( -13.2374, -18.7713, 39.6766, 1.08 ) }
    dend_30 { pt3dadd( -14.4517, -19.9459, 40.7651, 1.44 ) }
    dend_30 { pt3dadd( -15.1302, -20.6794, 41.3955, 1.2 ) }
    dend_30 { pt3dadd( -16.255, -22.0378, 42.4955, 1.2 ) }
    dend_30 { pt3dadd( -17.7779, -23.9846, 43.9954, 1.2 ) }
    dend_30 { pt3dadd( -18.8519, -25.2821, 45.104, 0.96 ) }
    dend_30 { pt3dadd( -19.4525, -25.9648, 45.7368, 0.96 ) }
    dend_30 { pt3dadd( -19.9935, -26.558, 46.3758, 0.96 ) }
    dend_30 { pt3dadd( -20.507, -27.1302, 47.035, 0.96 ) }
    dend_30 { pt3dadd( -21.0533, -27.7136, 47.7253, 0.96 ) }
    dend_30 { pt3dadd( -22.162, -28.5999, 48.9915, 1.2 ) }
    dend_30 { pt3dadd( -22.9592, -29.028, 49.8471, 1.2 ) }
    dend_30 { pt3dadd( -24.3616, -29.5316, 51.2725, 1.2 ) }
    dend_30 { pt3dadd( -25.7505, -29.8593, 52.5399, 1.2 ) }
    dend_30 { pt3dadd( -25.9626, -29.8959, 52.7221, 1.2 ) }
    dend_30 { pt3dadd( -27.2279, -30.0927, 53.7351, 0.96 ) }
    dend_30 { pt3dadd( -28.1259, -30.2488, 54.4078, 0.96 ) }
    dend_30 { pt3dadd( -29.4249, -30.4862, 55.3149, 1.32 ) }
    dend_30 { pt3dadd( -30.7157, -30.7959, 56.1076, 1.32 ) }
    dend_30 { pt3dadd( -31.4101, -31.0399, 56.5032, 1.32 ) }
    dend_30 { pt3dadd( -32.5299, -31.66, 57.1801, 1.32 ) }
    dend_30 { pt3dadd( -33.1415, -32.1777, 57.5673, 1.32 ) }
    dend_30 { pt3dadd( -33.7627, -32.8975, 57.971, 1.32 ) }
    dend_30 { pt3dadd( -34.7231, -34.3098, 58.5676, 1.08 ) }
    dend_30 { pt3dadd( -35.1917, -35.0887, 58.8363, 1.08 ) }
    dend_30 { pt3dadd( -35.9021, -36.1761, 59.1472, 1.08 ) }
    dend_30 { pt3dadd( -36.357, -36.7555, 59.285, 1.08 ) }
    dend_30 { pt3dadd( -37.1133, -37.5306, 59.4729, 1.08 ) }
    dend_30 { pt3dadd( -37.9178, -38.254, 59.6933, 1.08 ) }
    dend_30 { pt3dadd( -38.4645, -38.7333, 59.8729, 1.08 ) }
    dend_30 { pt3dadd( -39.807, -39.9795, 60.3648, 1.08 ) }
    dend_30 { pt3dadd( -41.3315, -41.5186, 60.9771, 1.56 ) }
    dend_30 { pt3dadd( -42.3326, -42.6784, 61.3509, 1.08 ) }
    dend_30 { pt3dadd( -43.128, -43.7203, 61.591, 1.08 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_30 { pt3dadd( -44.2464, -45.3085, 61.8156, 1.44 ) }
    dend_30 { pt3dadd( -44.7457, -46.0349, 61.8571, 1.44 ) }
    dend_30 { pt3dadd( -45.035, -46.4843, 61.8518, 1.44 ) }
    dend_30 { pt3dadd( -46.2138, -48.2349, 61.7298, 1.08 ) }
    dend_30 { pt3dadd( -47.3393, -49.7172, 61.5466, 1.08 ) }
    dend_30 { pt3dadd( -48.4342, -50.9784, 61.37, 1.44 ) }
    dend_30 { pt3dadd( -49.1639, -51.7359, 61.2813, 0.96 ) }
    dend_30 { pt3dadd( -49.8879, -52.4908, 61.2206, 1.44 ) }
    dend_30 { pt3dadd( -51.2856, -54.0133, 61.171, 0.96 ) }
    dend_30 { pt3dadd( -51.9564, -54.8151, 61.2066, 0.96 ) }
    dend_30 { pt3dadd( -52.5129, -55.5846, 61.2414, 0.96 ) }
    dend_30 { pt3dadd( -52.8141, -56.0249, 61.26, 0.96 ) }
    dend_30 { pt3dadd( -53.4596, -56.8842, 61.2974, 0.96 ) }
    dend_30 { pt3dadd( -53.9062, -57.3561, 61.323, 0.96 ) }
    dend_30 { pt3dadd( -54.6667, -58.0531, 61.3886, 1.44 ) }
    dend_30 { pt3dadd( -55.69, -58.9727, 61.506, 1.44 ) }
    dend_30 { pt3dadd( -56.681, -59.8713, 61.6376, 0.84 ) }
    dend_30 { pt3dadd( -57.5657, -60.7098, 61.7644, 0.84 ) }
    dend_30 { pt3dadd( -58.7267, -61.879, 61.9703, 1.32 ) }
    dend_30 { pt3dadd( -60.0849, -63.395, 62.2434, 0.96 ) }
    dend_30 { pt3dadd( -60.7405, -64.1954, 62.382, 0.96 ) }
    dend_30 { pt3dadd( -61.1585, -64.7513, 62.4793, 0.96 ) }
    dend_30 { pt3dadd( -61.9048, -65.7769, 62.6697, 1.44 ) }
    dend_30 { pt3dadd( -62.5223, -66.6179, 62.7438, 0.96 ) }
    dend_30 { pt3dadd( -63.116, -67.3644, 62.7343, 0.96 ) }
    dend_30 { pt3dadd( -64.1966, -68.5389, 62.5944, 0.96 ) }
    dend_30 { pt3dadd( -64.5905, -68.921, 62.4962, 0.96 ) }
    dend_30 { pt3dadd( -65.7268, -69.9492, 62.1438, 1.32 ) }
    dend_30 { pt3dadd( -67.6718, -71.5912, 61.4701, 0.96 ) }
    dend_30 { pt3dadd( -68.3288, -72.1079, 61.2336, 0.96 ) }
    dend_30 { pt3dadd( -68.7599, -72.4348, 61.0858, 0.96 ) }
    dend_30 { pt3dadd( -71.3718, -74.3018, 60.2516, 0.96 ) }
    dend_30 { pt3dadd( -72.081, -74.7753, 60.054, 0.96 ) }
    dend_30 { pt3dadd( -73.0556, -75.381, 59.8328, 0.96 ) }
    dend_30 { pt3dadd( -74.2091, -76.0283, 59.6873, 0.96 ) }
    dend_30 { pt3dadd( -75.4083, -76.6952, 59.5666, 0.96 ) }
    dend_30 { pt3dadd( -76.423, -77.2974, 59.5044, 0.96 ) }
    dend_30 { pt3dadd( -77.2207, -77.8239, 59.5581, 0.96 ) }
    dend_30 { pt3dadd( -77.6632, -78.1392, 59.6108, 0.96 ) }
    dend_30 { pt3dadd( -78.6116, -78.8471, 59.7809, 1.2 ) }
    dend_30 { pt3dadd( -79.317, -79.3711, 59.9473, 1.2 ) }
    dend_30 { pt3dadd( -80.2412, -80.011, 60.2022, 1.2 ) }
    dend_30 { pt3dadd( -81.8567, -81.0596, 60.6806, 1.08 ) }
    dend_30 { pt3dadd( -82.8644, -81.6114, 60.9469, 1.08 ) }
    dend_30 { pt3dadd( -83.3141, -81.8176, 61.0466, 1.08 ) }
    dend_30 { pt3dadd( -84.1723, -82.1384, 61.197, 0.84 ) }
    dend_30 { pt3dadd( -84.7872, -82.3473, 61.2762, 0.84 ) }
    dend_30 { pt3dadd( -85.4112, -82.5745, 61.3335, 0.84 ) }
    dend_30 { pt3dadd( -87.4813, -83.4812, 61.4304, 1.68 ) }
    dend_30 { pt3dadd( -88.3988, -83.9893, 61.477, 1.08 ) }
    dend_30 { pt3dadd( -89.3971, -84.6649, 61.5275, 1.08 ) }
    dend_30 { pt3dadd( -90.194, -85.2912, 61.5728, 1.08 ) }
    dend_30 { pt3dadd( -91.0353, -85.9716, 61.6254, 1.08 ) }
    dend_30 { pt3dadd( -91.4256, -86.312, 61.6519, 1.08 ) }
    dend_30 { pt3dadd( -91.7872, -86.6985, 61.6765, 1.08 ) }
    dend_30 { pt3dadd( -92.2877, -87.3575, 61.7058, 1.08 ) }
    dend_30 { pt3dadd( -92.6621, -87.9151, 61.723, 1.08 ) }
    dend_30 { pt3dadd( -93.6422, -89.5175, 61.752, 1.08 ) }
    dend_30 { pt3dadd( -94.2047, -90.4876, 61.7051, 1.08 ) }
    dend_30 { pt3dadd( -95.5316, -92.7364, 61.3258, 1.8 ) }
    dend_30 { pt3dadd( -96.3529, -94.19, 60.9604, 1.2 ) }
    dend_30 { pt3dadd( -96.5639, -94.5983, 60.8326, 1.2 ) }
    dend_30 { pt3dadd( -96.9738, -95.4829, 60.4554, 0.96 ) }
    dend_30 { pt3dadd( -97.6023, -96.8999, 59.7243, 1.32 ) }
    dend_30 { pt3dadd( -98.5402, -98.6636, 58.3831, 0.72 ) }
    dend_30 { pt3dadd( -99.0072, -99.4524, 57.6524, 0.72 ) }
    dend_30 { pt3dadd( -99.1584, -99.7015, 57.4121, 0.72 ) }
    dend_30 { pt3dadd( -100.248, -101.449, 55.7793, 0.72 ) }
    dend_30 { pt3dadd( -101.045, -102.705, 54.6767, 1.32 ) }
    dend_30 { pt3dadd( -102.645, -105.305, 52.5772, 1.68 ) }
    dend_30 { pt3dadd( -103.203, -106.242, 51.8319, 1.68 ) }
    dend_30 { pt3dadd( -103.628, -106.977, 51.2397, 1.2 ) }
    dend_30 { pt3dadd( -104.107, -107.885, 50.5463, 1.2 ) }
    dend_30 { pt3dadd( -104.468, -108.602, 50.0519, 1.2 ) }
    dend_30 { pt3dadd( -105.313, -110.39, 48.9322, 0.84 ) }
    dend_30 { pt3dadd( -106.034, -111.971, 48.154, 0.84 ) }
    dend_30 { pt3dadd( -106.578, -113.022, 47.5931, 0.84 ) }
    dend_30 { pt3dadd( -107.427, -114.6, 46.7611, 1.32 ) }
    dend_30 { pt3dadd( -108.053, -115.722, 46.1226, 0.72 ) }
    dend_30 { pt3dadd( -108.687, -116.749, 45.4985, 0.72 ) }
    dend_30 { pt3dadd( -109.472, -117.927, 44.8096, 1.44 ) }
    dend_30 { pt3dadd( -110.782, -119.696, 43.6992, 0.96 ) }
    dend_30 { pt3dadd( -111.433, -120.466, 43.1226, 0.96 ) }
    dend_30 { pt3dadd( -112.986, -122.13, 41.694, 0.96 ) }
    dend_30 { pt3dadd( -113.979, -123.124, 40.6785, 0.72 ) }
    dend_30 { pt3dadd( -114.828, -123.831, 39.8354, 0.72 ) }
    dend_30 { pt3dadd( -115.792, -124.462, 38.8471, 1.44 ) }
    dend_30 { pt3dadd( -117.31, -125.224, 37.2783, 0.96 ) }
    dend_30 { pt3dadd( -118.061, -125.486, 36.477, 0.96 ) }
    dend_30 { pt3dadd( -119.357, -125.845, 35.114, 0.96 ) }
    dend_30 { pt3dadd( -120.659, -126.111, 33.6985, 1.44 ) }
    dend_30 { pt3dadd( -122.78, -126.386, 31.2874, 0.72 ) }
    dend_30 { pt3dadd( -123.877, -126.459, 30.0094, 0.72 ) }
    dend_30 { pt3dadd( -125.77, -126.411, 27.7277, 1.32 ) }
    dend_30 { pt3dadd( -132.866, -133.662, 26.33, 1.32 ) }
    dend_30 { pt3dadd( -140.17, -140.131, 23.3822, 1.32 ) }
    // Section: dend_28, id: dend_28, parent: dend_26 (entry count 96/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 28.9041, -30.8582, 96.4461, 0.6 ) }
    dend_28 { pt3dadd( 28.748, -29.0478, 96.9247, 0.6 ) }
    dend_28 { pt3dadd( 28.4532, -27.087, 97.3543, 0.6 ) }
    dend_28 { pt3dadd( 28.1097, -25.4968, 97.6361, 0.6 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_28 { pt3dadd( 27.8085, -24.3616, 97.8123, 0.6 ) }
    dend_28 { pt3dadd( 27.4982, -23.2947, 97.949, 0.6 ) }
    dend_28 { pt3dadd( 27.3033, -22.6168, 98.0474, 1.2 ) }
    dend_28 { pt3dadd( 26.9051, -21.6391, 98.1774, 0.72 ) }
    dend_28 { pt3dadd( 26.277, -20.4559, 98.3648, 0.72 ) }
    dend_28 { pt3dadd( 26.0624, -20.1018, 98.4608, 0.72 ) }
    dend_28 { pt3dadd( 25.1526, -18.7818, 99.0233, 1.2 ) }
    dend_28 { pt3dadd( 24.4903, -17.9133, 99.498, 1.2 ) }
    dend_28 { pt3dadd( 23.6021, -16.8188, 100.184, 0.84 ) }
    dend_28 { pt3dadd( 23.2868, -16.4594, 100.45, 0.84 ) }
    dend_28 { pt3dadd( 21.9026, -15.0287, 101.714, 0.84 ) }
    dend_28 { pt3dadd( 21.5156, -14.663, 102.076, 0.84 ) }
    dend_28 { pt3dadd( 20.9077, -14.2233, 102.627, 0.84 ) }
    dend_28 { pt3dadd( 17.7312, -4.90109, 105.956, 0.84 ) }
    dend_28 { pt3dadd( 13.8518, 4.21778, 109.043, 0.84 ) }
    dend_28 { pt3dadd( 9.82268, 12.5821, 113.549, 0.84 ) }
    dend_28 { pt3dadd( 7.52932, 21.2181, 118.755, 0.84 ) }
    dend_28 { pt3dadd( 5.16242, 29.6208, 124.264, 0.84 ) }
    dend_28 { pt3dadd( 1.6186, 38.658, 127.92, 0.84 ) }
    dend_28 { pt3dadd( -3.31057, 45.8124, 133.331, 0.84 ) }
    dend_28 { pt3dadd( -7.66716, 53.4718, 138.604, 0.84 ) }
    dend_28 { pt3dadd( -12.4379, 61.0895, 143.564, 0.84 ) }
    dend_28 { pt3dadd( -15.5577, 68.4696, 149.957, 0.84 ) }
    dend_28 { pt3dadd( -17.5011, 75.1113, 157.454, 0.84 ) }
    dend_28 { pt3dadd( -19.5637, 81.5846, 165.053, 0.84 ) }
    dend_28 { pt3dadd( -19.8701, 89.1853, 171.945, 0.84 ) }
    dend_28 { pt3dadd( -19.5487, 97.7568, 177.712, 0.84 ) }
    dend_28 { pt3dadd( -21.3075, 106.99, 182.138, 0.84 ) }
    dend_28 { pt3dadd( -23.5047, 115.805, 187.106, 0.84 ) }
    dend_28 { pt3dadd( -26.5915, 124.666, 191.495, 0.84 ) }
    dend_28 { pt3dadd( -29.4527, 133.677, 195.756, 0.84 ) }
    // Section: dend_27, id: dend_27, parent: dend_26 (entry count 31/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( 28.9041, -30.8582, 96.4461, 0.84 ) }
    dend_27 { pt3dadd( 30.0831, -30.6136, 97.1271, 0.84 ) }
    dend_27 { pt3dadd( 31.3314, -30.474, 98.0677, 0.84 ) }
    dend_27 { pt3dadd( 32.2968, -30.4377, 98.9493, 1.2 ) }
    dend_27 { pt3dadd( 34.2347, -30.4255, 100.796, 1.2 ) }
    dend_27 { pt3dadd( 35.7842, -30.4735, 102.183, 0.96 ) }
    dend_27 { pt3dadd( 36.7635, -30.5431, 103.016, 0.96 ) }
    dend_27 { pt3dadd( 37.9695, -30.7331, 104.094, 0.96 ) }
    dend_27 { pt3dadd( 39.4747, -31.1145, 105.451, 0.72 ) }
    dend_27 { pt3dadd( 41.024, -31.6808, 106.812, 1.2 ) }
    dend_27 { pt3dadd( 42.3357, -32.3545, 107.782, 0.72 ) }
    dend_27 { pt3dadd( 42.9581, -32.6947, 108.2, 0.72 ) }
    dend_27 { pt3dadd( 43.3678, -32.9165, 108.434, 0.72 ) }
    dend_27 { pt3dadd( 44.624, -33.7122, 109.008, 1.08 ) }
    dend_27 { pt3dadd( 45.5968, -34.5166, 109.349, 1.08 ) }
    dend_27 { pt3dadd( 46.2364, -35.2769, 109.577, 1.08 ) }
    dend_27 { pt3dadd( 53.3013, -35.4788, 116.651, 1.08 ) }
    dend_27 { pt3dadd( 61.0874, -35.0644, 122.914, 1.08 ) }
    dend_27 { pt3dadd( 67.5424, -34.8761, 130.549, 1.08 ) }
    dend_27 { pt3dadd( 72.8646, -35.7071, 138.978, 1.08 ) }
    dend_27 { pt3dadd( 78.5118, -34.622, 147.166, 1.08 ) }
    dend_27 { pt3dadd( 84.269, -33.9644, 155.319, 1.08 ) }
    dend_27 { pt3dadd( 89.3478, -32.114, 163.751, 1.08 ) }
    dend_27 { pt3dadd( 93.7481, -31.5332, 172.714, 1.08 ) }
    // Section: dend_24, id: dend_24, parent: dend_22 (entry count 55/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 11.2784, -114.117, -11.3812, 0.84 ) }
    dend_24 { pt3dadd( 11.3146, -115.292, -11.2382, 0.84 ) }
    dend_24 { pt3dadd( 11.498, -117.129, -11.1853, 1.32 ) }
    dend_24 { pt3dadd( 11.731, -118.756, -10.9978, 0.72 ) }
    dend_24 { pt3dadd( 11.8809, -119.803, -10.8305, 0.72 ) }
    dend_24 { pt3dadd( 11.9504, -120.45, -10.7183, 1.32 ) }
    dend_24 { pt3dadd( 12.164, -122.757, -10.307, 0.84 ) }
    dend_24 { pt3dadd( 12.2534, -123.594, -10.1555, 0.84 ) }
    dend_24 { pt3dadd( 12.5691, -126.054, -9.75591, 1.32 ) }
    dend_24 { pt3dadd( 12.6989, -126.806, -9.61513, 1.32 ) }
    dend_24 { pt3dadd( 12.9801, -128.225, -9.27982, 0.6 ) }
    dend_24 { pt3dadd( 13.1796, -129.135, -9.03409, 0.6 ) }
    dend_24 { pt3dadd( 13.4367, -130.178, -8.72119, 1.2 ) }
    dend_24 { pt3dadd( 13.7671, -131.288, -8.46968, 1.2 ) }
    dend_24 { pt3dadd( 14.8026, -134.166, -8.05009, 0.72 ) }
    dend_24 { pt3dadd( 15.1075, -134.892, -7.95975, 0.72 ) }
    dend_24 { pt3dadd( 15.5236, -135.746, -7.84488, 0.72 ) }
    dend_24 { pt3dadd( 15.9331, -136.578, -7.73862, 0.72 ) }
    dend_24 { pt3dadd( 16.717, -138.251, -7.51604, 1.56 ) }
    dend_24 { pt3dadd( 16.9994, -138.886, -7.4363, 1.56 ) }
    dend_24 { pt3dadd( 17.6999, -140.44, -7.53033, 0.96 ) }
    dend_24 { pt3dadd( 18.5315, -142.277, -7.82203, 1.44 ) }
    dend_24 { pt3dadd( 19.1136, -143.593, -8.02525, 1.44 ) }
    dend_24 { pt3dadd( 19.9282, -145.497, -8.35503, 0.84 ) }
    dend_24 { pt3dadd( 20.2442, -146.243, -8.49683, 0.84 ) }
    dend_24 { pt3dadd( 22.3509, -150.981, -9.67699, 1.2 ) }
    dend_24 { pt3dadd( 22.6322, -151.593, -9.87934, 1.2 ) }
    dend_24 { pt3dadd( 23.8344, -154.111, -10.6472, 0.6 ) }
    dend_24 { pt3dadd( 24.5252, -155.401, -10.9665, 0.6 ) }
    dend_24 { pt3dadd( 25.8009, -157.668, -11.1591, 1.56 ) }
    dend_24 { pt3dadd( 27.1674, -160.252, -10.9528, 0.72 ) }
    dend_24 { pt3dadd( 27.7807, -161.625, -10.6233, 1.2 ) }
    dend_24 { pt3dadd( 28.9092, -164.729, -9.51668, 0.6 ) }
    dend_24 { pt3dadd( 29.2294, -166.077, -8.82627, 1.08 ) }
    dend_24 { pt3dadd( 29.272, -168.908, -6.49109, 1.08 ) }
    dend_24 { pt3dadd( 28.9855, -169.714, -5.50371, 1.56 ) }
    dend_24 { pt3dadd( 28.3235, -170.655, -4.0491, 1.56 ) }
    dend_24 { pt3dadd( 26.3559, -172.312, -1.03871, 0.84 ) }
    dend_24 { pt3dadd( 25.5591, -172.714, -0.21054, 0.84 ) }
    dend_24 { pt3dadd( 24.1239, -173.189, 1.00018, 1.32 ) }
    dend_24 { pt3dadd( 22.1048, -173.582, 2.44046, 0.96 ) }
    dend_24 { pt3dadd( 21.7645, -173.632, 2.66613, 0.96 ) }
    dend_24 { pt3dadd( 19.8818, -173.807, 3.79854, 1.44 ) }
    dend_24 { pt3dadd( 18.5694, -173.915, 4.39498, 0.36 ) }
    dend_24 { pt3dadd( 17.9262, -173.947, 4.66021, 1.44 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_24 { pt3dadd( 15.6082, -173.988, 5.53931, 0.6 ) }
    dend_24 { pt3dadd( 14.1274, -173.967, 6.06855, 0.6 ) }
    dend_24 { pt3dadd( 12.5927, -173.914, 6.74837, 1.68 ) }
    dend_24 { pt3dadd( 10.5959, -173.785, 7.7874, 0.84 ) }
    dend_24 { pt3dadd( 9.88038, -173.722, 8.1836, 0.84 ) }
    dend_24 { pt3dadd( 9.55808, -173.698, 8.34386, 0.36 ) }
    dend_24 { pt3dadd( 8.431, -173.632, 8.90076, 0.36 ) }
    dend_24 { pt3dadd( 5.69481, -173.622, 10.0731, 0.6 ) }
    dend_24 { pt3dadd( 4.73763, -173.658, 10.4705, 0.6 ) }
    dend_24 { pt3dadd( 4.31709, -173.686, 10.6629, 0.6 ) }
    dend_24 { pt3dadd( 2.49281, -173.932, 11.4904, 0.6 ) }
    dend_24 { pt3dadd( -0.6885, -174.557, 12.8218, 1.44 ) }
    dend_24 { pt3dadd( -3.39509, -175.346, 13.6795, 1.68 ) }
    dend_24 { pt3dadd( -4.2322, -184.577, 18.3713, 1.68 ) }
    // Section: dend_23, id: dend_23, parent: dend_22 (entry count 14/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( 11.2784, -114.117, -11.3812, 0.84 ) }
    dend_23 { pt3dadd( 12.9411, -114.571, -11.0782, 0.84 ) }
    dend_23 { pt3dadd( 14.314, -114.97, -10.8547, 0.84 ) }
    dend_23 { pt3dadd( 15.1445, -115.198, -10.7286, 0.84 ) }
    dend_23 { pt3dadd( 18.4087, -116.126, -10.2793, 1.32 ) }
    dend_23 { pt3dadd( 19.3507, -116.394, -10.1667, 0.6 ) }
    dend_23 { pt3dadd( 20.6198, -116.732, -10.0349, 0.6 ) }
    dend_23 { pt3dadd( 22.0167, -117.058, -9.91887, 1.2 ) }
    dend_23 { pt3dadd( 23.9398, -117.444, -9.79946, 0.6 ) }
    dend_23 { pt3dadd( 25.7102, -117.718, -9.72551, 0.6 ) }
    dend_23 { pt3dadd( 28.7283, -118.072, -9.6676, 1.08 ) }
    dend_23 { pt3dadd( 30.2982, -118.189, -9.63441, 1.56 ) }
    dend_23 { pt3dadd( 32.5102, -118.281, -9.5871, 0.48 ) }
    dend_23 { pt3dadd( 35.6222, -118.265, -9.52509, 0.48 ) }
    dend_23 { pt3dadd( 36.4791, -118.208, -9.51116, 0.48 ) }
    dend_23 { pt3dadd( 37.1439, -118.131, -9.50756, 1.2 ) }
    dend_23 { pt3dadd( 39.0493, -117.837, -9.51886, 0.72 ) }
    dend_23 { pt3dadd( 40.8518, -117.523, -9.5, 0.72 ) }
    dend_23 { pt3dadd( 42.1504, -117.277, -9.46624, 0.72 ) }
    dend_23 { pt3dadd( 43.8352, -116.928, -9.33116, 1.2 ) }
    dend_23 { pt3dadd( 46.0163, -116.478, -9.07575, 0.48 ) }
    dend_23 { pt3dadd( 47.6878, -116.123, -8.83315, 1.2 ) }
    dend_23 { pt3dadd( 50.3262, -115.556, -8.37437, 1.2 ) }
    dend_23 { pt3dadd( 51.4655, -115.31, -8.14541, 1.2 ) }
    dend_23 { pt3dadd( 53.5297, -114.897, -7.65432, 0.6 ) }
    dend_23 { pt3dadd( 54.9292, -114.641, -7.27624, 0.6 ) }
    dend_23 { pt3dadd( 55.5522, -114.511, -7.08665, 0.6 ) }
    dend_23 { pt3dadd( 56.3667, -114.365, -6.83656, 1.2 ) }
    dend_23 { pt3dadd( 57.8502, -114.153, -6.40794, 1.2 ) }
    dend_23 { pt3dadd( 59.127, -113.993, -6.05888, 0.48 ) }
    dend_23 { pt3dadd( 60.1553, -113.897, -5.80872, 0.48 ) }
    dend_23 { pt3dadd( 60.5108, -113.877, -5.71682, 1.08 ) }
    dend_23 { pt3dadd( 62.2976, -113.888, -5.25952, 0.36 ) }
    dend_23 { pt3dadd( 63.7721, -113.954, -4.83499, 0.96 ) }
    dend_23 { pt3dadd( 64.5341, -114.011, -4.61768, 0.96 ) }
    dend_23 { pt3dadd( 65.1756, -114.072, -4.44394, 0.96 ) }
    dend_23 { pt3dadd( 66.3202, -114.188, -4.14255, 0.96 ) }
    dend_23 { pt3dadd( 67.5444, -114.337, -3.84324, 0.96 ) }
    dend_23 { pt3dadd( 69.3954, -114.638, -3.45872, 0.6 ) }
    dend_23 { pt3dadd( 71.165, -114.987, -3.13157, 0.6 ) }
    dend_23 { pt3dadd( 71.5272, -115.067, -3.07624, 1.32 ) }
    dend_23 { pt3dadd( 72.6703, -115.367, -2.93559, 1.32 ) }
    dend_23 { pt3dadd( 73.0645, -115.483, -2.89857, 0.48 ) }
    dend_23 { pt3dadd( 74.441, -115.976, -2.8287, 0.48 ) }
    dend_23 { pt3dadd( 74.7958, -116.146, -2.82942, 1.08 ) }
    dend_23 { pt3dadd( 77.1685, -117.422, -2.84009, 0.96 ) }
    dend_23 { pt3dadd( 78.1189, -117.978, -2.84843, 0.48 ) }
    dend_23 { pt3dadd( 78.4728, -118.191, -2.85191, 0.48 ) }
    dend_23 { pt3dadd( 80.2887, -119.298, -2.87031, 1.44 ) }
    dend_23 { pt3dadd( 82.4365, -120.632, -2.89243, 0.72 ) }
    dend_23 { pt3dadd( 83.6245, -121.395, -2.90439, 0.72 ) }
    dend_23 { pt3dadd( 84.3425, -121.87, -2.95101, 1.2 ) }
    dend_23 { pt3dadd( 85.7081, -122.739, -3.09664, 1.2 ) }
    dend_23 { pt3dadd( 87.1502, -123.598, -3.30158, 0.6 ) }
    dend_23 { pt3dadd( 88.2612, -124.213, -3.54745, 0.6 ) }
    dend_23 { pt3dadd( 89.2314, -124.694, -3.82007, 1.08 ) }
    dend_23 { pt3dadd( 91.2829, -125.61, -4.47206, 0.48 ) }
    dend_23 { pt3dadd( 92.2711, -125.995, -4.81061, 0.48 ) }
    dend_23 { pt3dadd( 93.4488, -126.39, -5.26504, 1.08 ) }
    dend_23 { pt3dadd( 94.9488, -126.784, -5.86221, 0.6 ) }
    dend_23 { pt3dadd( 96.1411, -127.032, -6.32471, 0.6 ) }
    dend_23 { pt3dadd( 97.1174, -127.203, -6.7166, 0.6 ) }
    dend_23 { pt3dadd( 97.3836, -127.246, -6.81395, 1.08 ) }
    dend_23 { pt3dadd( 98.6736, -127.442, -7.29626, 0.48 ) }
    dend_23 { pt3dadd( 99.662, -127.588, -7.653, 0.48 ) }
    dend_23 { pt3dadd( 99.937, -127.618, -7.74226, 0.48 ) }
    dend_23 { pt3dadd( 102.143, -127.812, -8.49904, 0.96 ) }
    dend_23 { pt3dadd( 103.396, -127.879, -8.92317, 0.36 ) }
    dend_23 { pt3dadd( 104.407, -127.896, -9.24016, 0.36 ) }
    dend_23 { pt3dadd( 104.918, -127.895, -9.40148, 0.96 ) }
    dend_23 { pt3dadd( 105.516, -127.863, -9.5993, 0.36 ) }
    dend_23 { pt3dadd( 106.346, -127.76, -9.86461, 0.36 ) }
    dend_23 { pt3dadd( 106.622, -127.709, -9.94124, 0.36 ) }
    dend_23 { pt3dadd( 107.376, -127.55, -10.1961, 0.84 ) }
    dend_23 { pt3dadd( 109.422, -127.165, -11.0006, 0.24 ) }
    dend_23 { pt3dadd( 109.892, -127.089, -11.2032, 0.24 ) }
    dend_23 { pt3dadd( 110.555, -127.012, -11.5132, 0.84 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 91/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -29.0905, -5.17823, 9.79904, 1.68 ) }
    dend_19 { pt3dadd( -30.369, -6.10163, 10.3007, 1.68 ) }
    dend_19 { pt3dadd( -31.5016, -6.91959, 10.745, 1.68 ) }
    dend_19 { pt3dadd( -33.6067, -8.44002, 11.5708, 1.68 ) }
    dend_19 { pt3dadd( -35.1845, -9.57958, 12.1898, 1.68 ) }
    dend_19 { pt3dadd( -36.8106, -10.754, 12.8277, 2.04 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 97/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -29.0905, -5.17823, 9.79904, 1.08 ) }
    dend_18 { pt3dadd( -30.8638, -4.62906, 10.0329, 1.08 ) }
    dend_18 { pt3dadd( -32.4311, -4.05832, 10.23, 1.08 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_18 { pt3dadd( -33.6231, -3.5478, 10.3741, 1.08 ) }
    dend_18 { pt3dadd( -34.3234, -3.19451, 10.4524, 1.08 ) }
    dend_18 { pt3dadd( -35.0011, -2.78116, 10.558, 0.72 ) }
    dend_18 { pt3dadd( -35.7189, -2.29299, 10.6839, 1.2 ) }
    dend_18 { pt3dadd( -36.4266, -1.75759, 10.8376, 1.2 ) }
    dend_18 { pt3dadd( -36.8322, -1.41614, 10.9196, 1.2 ) }
    dend_18 { pt3dadd( -38.0951, -0.269765, 11.1255, 1.2 ) }
    dend_18 { pt3dadd( -39.191, 0.793765, 11.2509, 1.2 ) }
    dend_18 { pt3dadd( -39.9971, 1.58849, 11.2991, 0.6 ) }
    dend_18 { pt3dadd( -40.8474, 2.39343, 11.3108, 0.6 ) }
    dend_18 { pt3dadd( -41.6015, 3.06048, 11.2941, 0.6 ) }
    dend_18 { pt3dadd( -42.2431, 3.60348, 11.2563, 0.6 ) }
    dend_18 { pt3dadd( -43.2828, 4.49404, 11.187, 0.6 ) }
    dend_18 { pt3dadd( -44.6257, 5.66933, 11.0929, 0.72 ) }
    dend_18 { pt3dadd( -45.2987, 6.31571, 10.9882, 0.72 ) }
    dend_18 { pt3dadd( -46.3245, 7.38912, 10.7736, 1.2 ) }
    dend_18 { pt3dadd( -46.8644, 7.99188, 10.5885, 1.2 ) }
    dend_18 { pt3dadd( -48.1671, 9.51031, 10.044, 0.96 ) }
    dend_18 { pt3dadd( -49.0361, 10.5459, 9.63849, 0.96 ) }
    dend_18 { pt3dadd( -50.9157, 12.7755, 8.62839, 0.96 ) }
    dend_18 { pt3dadd( -52.5158, 14.5885, 7.72561, 1.44 ) }
    dend_18 { pt3dadd( -54.3831, 16.6341, 6.6363, 0.84 ) }
    dend_18 { pt3dadd( -55.0563, 17.3366, 6.24645, 0.84 ) }
    dend_18 { pt3dadd( -55.4933, 17.7641, 6.00548, 0.84 ) }
    dend_18 { pt3dadd( -56.529, 18.7306, 5.50529, 1.2 ) }
    dend_18 { pt3dadd( -57.517, 19.6165, 5.15796, 1.2 ) }
    dend_18 { pt3dadd( -58.2611, 20.3096, 4.92259, 0.48 ) }
    dend_18 { pt3dadd( -58.8281, 20.9163, 4.7917, 0.48 ) }
    dend_18 { pt3dadd( -59.8615, 22.1551, 4.53659, 1.08 ) }
    dend_18 { pt3dadd( -61.0088, 23.6368, 4.2796, 0.6 ) }
    dend_18 { pt3dadd( -61.393, 24.1608, 4.2061, 0.6 ) }
    dend_18 { pt3dadd( -62.1484, 25.1968, 4.08055, 1.92 ) }
    dend_18 { pt3dadd( -63.1667, 26.5882, 3.95402, 0.84 ) }
    dend_18 { pt3dadd( -63.8024, 27.4491, 3.91174, 0.84 ) }
    dend_18 { pt3dadd( -64.3897, 28.2144, 3.91801, 0.84 ) }
    dend_18 { pt3dadd( -64.96, 28.9693, 3.97168, 1.2 ) }
    dend_18 { pt3dadd( -65.4139, 29.6511, 3.92248, 1.2 ) }
    dend_18 { pt3dadd( -66.1422, 30.8767, 3.68542, 1.56 ) }
    dend_18 { pt3dadd( -66.6944, 31.8052, 3.42384, 1.56 ) }
    dend_18 { pt3dadd( -67.4347, 33.05, 3.00645, 1.56 ) }
    dend_18 { pt3dadd( -67.8152, 33.6552, 2.68636, 1.56 ) }
    dend_18 { pt3dadd( -69.3506, 36.0055, 1.30921, 1.08 ) }
    dend_18 { pt3dadd( -70.0256, 36.9665, 0.730105, 0.6 ) }
    dend_18 { pt3dadd( -70.8815, 38.1337, 0.0253226, 0.6 ) }
    dend_18 { pt3dadd( -71.2886, 38.6981, -0.346345, 0.6 ) }
    dend_18 { pt3dadd( -73.2739, 41.3945, -2.14831, 1.32 ) }
    dend_18 { pt3dadd( -74.673, 43.1424, -3.25436, 0.96 ) }
    dend_18 { pt3dadd( -75.501, 44.1237, -3.78086, 1.44 ) }
    dend_18 { pt3dadd( -75.9949, 44.7277, -4.04606, 1.44 ) }
    dend_18 { pt3dadd( -77.6043, 46.7815, -4.68461, 0.48 ) }
    dend_18 { pt3dadd( -78.2609, 47.5697, -4.89191, 0.48 ) }
    dend_18 { pt3dadd( -79.2788, 48.6708, -5.07942, 1.08 ) }
    dend_18 { pt3dadd( -80.2683, 49.6417, -5.30553, 1.08 ) }
    dend_18 { pt3dadd( -81.8869, 51.134, -5.64151, 0.48 ) }
    dend_18 { pt3dadd( -82.8515, 51.9797, -5.79427, 0.48 ) }
    dend_18 { pt3dadd( -84.9812, 53.7814, -6.11645, 1.32 ) }
    dend_18 { pt3dadd( -85.468, 54.1902, -6.23287, 1.32 ) }
    dend_18 { pt3dadd( -86.5034, 55.0922, -6.54566, 1.32 ) }
    dend_18 { pt3dadd( -87.457, 55.9252, -6.78432, 0.72 ) }
    dend_18 { pt3dadd( -88.0271, 56.4264, -6.9028, 0.72 ) }
    dend_18 { pt3dadd( -89.5846, 57.8946, -7.03545, 1.44 ) }
    dend_18 { pt3dadd( -90.337, 58.7336, -6.9884, 1.44 ) }
    dend_18 { pt3dadd( -91.7434, 60.4859, -6.83233, 1.44 ) }
    dend_18 { pt3dadd( -93.1384, 62.5083, -6.59676, 1.08 ) }
    dend_18 { pt3dadd( -93.5878, 63.2746, -6.49365, 1.08 ) }
    dend_18 { pt3dadd( -94.119, 64.3141, -6.26087, 0.6 ) }
    dend_18 { pt3dadd( -94.9044, 65.9727, -5.75494, 1.2 ) }
    dend_18 { pt3dadd( -95.3547, 66.9859, -5.45292, 1.2 ) }
    dend_18 { pt3dadd( -96.0025, 68.5044, -5.03033, 1.2 ) }
    dend_18 { pt3dadd( -96.4679, 69.6411, -4.79799, 1.2 ) }
    dend_18 { pt3dadd( -97.3625, 71.9398, -4.37188, 0.48 ) }
    dend_18 { pt3dadd( -97.8519, 73.2689, -4.06948, 0.48 ) }
    dend_18 { pt3dadd( -98.3444, 74.7976, -3.68447, 1.08 ) }
    dend_18 { pt3dadd( -98.4722, 75.3053, -3.55496, 0.48 ) }
    dend_18 { pt3dadd( -98.7442, 76.6073, -3.2371, 1.08 ) }
    dend_18 { pt3dadd( -99.0587, 78.1211, -2.91697, 1.08 ) }
    dend_18 { pt3dadd( -99.6664, 80.7967, -2.50675, 1.56 ) }
    dend_18 { pt3dadd( -99.8475, 81.5958, -2.37218, 0.48 ) }
    dend_18 { pt3dadd( -100.033, 82.3157, -2.24551, 0.48 ) }
    dend_18 { pt3dadd( -100.281, 83.3403, -2.02549, 1.56 ) }
    dend_18 { pt3dadd( -100.636, 84.8907, -1.65051, 0.36 ) }
    dend_18 { pt3dadd( -100.958, 86.2925, -1.33621, 0.36 ) }
    dend_18 { pt3dadd( -101.125, 86.9751, -1.21721, 0.96 ) }
    dend_18 { pt3dadd( -101.576, 88.7622, -0.90091, 1.56 ) }
    dend_18 { pt3dadd( -102.073, 90.8556, -0.53565, 0.72 ) }
    dend_18 { pt3dadd( -102.269, 91.7603, -0.434108, 0.72 ) }
    dend_18 { pt3dadd( -102.408, 92.5029, -0.400653, 0.72 ) }
    dend_18 { pt3dadd( -102.692, 94.0049, -0.419808, 1.68 ) }
    dend_18 { pt3dadd( -103.117, 95.9033, -0.552287, 0.72 ) }
    dend_18 { pt3dadd( -103.349, 96.697, -0.694023, 0.72 ) }
    dend_18 { pt3dadd( -104.018, 98.551, -1.18392, 1.8 ) }
    dend_18 { pt3dadd( -104.593, 100.081, -1.68511, 0.72 ) }
    dend_18 { pt3dadd( -104.751, 100.563, -1.86386, 0.72 ) }
    dend_18 { pt3dadd( -104.868, 100.998, -2.03545, 0.72 ) }
    dend_18 { pt3dadd( -105.378, 103.229, -2.92888, 1.32 ) }
    dend_18 { pt3dadd( -105.627, 104.272, -3.31177, 1.32 ) }
    dend_18 { pt3dadd( -106.074, 105.893, -3.81281, 0.24 ) }
    dend_18 { pt3dadd( -106.444, 106.975, -4.2758, 0.24 ) }
    dend_18 { pt3dadd( -106.852, 108.107, -4.80868, 1.68 ) }
    dend_18 { pt3dadd( -107.057, 108.671, -5.08268, 1.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_18 { pt3dadd( -107.516, 109.768, -5.62906, 0.48 ) }
    dend_18 { pt3dadd( -107.834, 110.376, -5.98465, 0.48 ) }
    dend_18 { pt3dadd( -109.333, 112.952, -7.52736, 1.68 ) }
    dend_18 { pt3dadd( -110.219, 114.377, -8.31699, 0.6 ) }
    dend_18 { pt3dadd( -110.539, 114.885, -8.57617, 0.6 ) }
    dend_18 { pt3dadd( -111.692, 116.688, -9.357, 1.68 ) }
    dend_18 { pt3dadd( -113.181, 119.024, -10.1861, 0.48 ) }
    dend_18 { pt3dadd( -113.714, 119.837, -10.3797, 0.48 ) }
    dend_18 { pt3dadd( -114.953, 121.536, -10.4879, 0.48 ) }
    dend_18 { pt3dadd( -115.5, 122.222, -10.4259, 0.48 ) }
    dend_18 { pt3dadd( -116.667, 123.512, -10.0975, 1.44 ) }
    dend_18 { pt3dadd( -116.96, 123.782, -9.97685, 1.44 ) }
    dend_18 { pt3dadd( -117.835, 124.5, -9.58396, 0.84 ) }
    dend_18 { pt3dadd( -119.073, 125.444, -9.09527, 1.68 ) }
    dend_18 { pt3dadd( -121.127, 126.958, -8.57331, 0.6 ) }
    dend_18 { pt3dadd( -122.347, 127.788, -8.35702, 0.6 ) }
    dend_18 { pt3dadd( -124.076, 128.925, -7.96683, 0.6 ) }
    dend_18 { pt3dadd( -124.879, 129.452, -7.76848, 0.6 ) }
    dend_18 { pt3dadd( -125.7, 129.991, -7.56563, 0.6 ) }
    dend_18 { pt3dadd( -127.657, 131.375, -7.1174, 1.32 ) }
    dend_18 { pt3dadd( -129.295, 132.654, -6.81105, 1.32 ) }
    dend_18 { pt3dadd( -131.667, 134.919, -6.23763, 0.36 ) }
    dend_18 { pt3dadd( -132.087, 135.394, -6.11251, 0.36 ) }
    dend_18 { pt3dadd( -133.043, 136.618, -5.80657, 1.56 ) }
    dend_18 { pt3dadd( -133.752, 137.688, -5.55696, 0.72 ) }
    dend_18 { pt3dadd( -134.298, 138.736, -5.31416, 1.2 ) }
    dend_18 { pt3dadd( -134.602, 139.506, -5.29521, 0.12 ) }
    dend_18 { pt3dadd( -135.067, 140.794, -5.42963, 1.2 ) }
    dend_18 { pt3dadd( -135.536, 142.115, -5.59679, 0.6 ) }
    dend_18 { pt3dadd( -135.695, 142.605, -5.67775, 0.6 ) }
    dend_18 { pt3dadd( -136.078, 143.7, -5.9225, 1.08 ) }
    dend_18 { pt3dadd( -137.065, 146.46, -6.77186, 1.08 ) }
    // Section: dend_15, id: dend_15, parent: dend_11 (entry count 32/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 39.9927, -23.3416, -24.928, 1.2 ) }
    dend_15 { pt3dadd( 41.0722, -23.2924, -26.4726, 1.2 ) }
    dend_15 { pt3dadd( 43.8308, -23.0755, -29.9966, 0.96 ) }
    dend_15 { pt3dadd( 44.9514, -22.8808, -31.0824, 0.96 ) }
    dend_15 { pt3dadd( 45.5663, -22.6929, -31.4783, 0.84 ) }
    dend_15 { pt3dadd( 46.9112, -22.1948, -32.0972, 0.84 ) }
    dend_15 { pt3dadd( 48.2068, -21.6605, -32.5412, 1.2 ) }
    dend_15 { pt3dadd( 51.2754, -20.185, -32.6963, 1.44 ) }
    dend_15 { pt3dadd( 52.9315, -19.4004, -32.5518, 0.96 ) }
    dend_15 { pt3dadd( 54.6453, -18.6071, -32.4481, 1.2 ) }
    dend_15 { pt3dadd( 55.3734, -18.2894, -32.4798, 1.2 ) }
    dend_15 { pt3dadd( 56.4266, -17.8703, -32.7091, 0.96 ) }
    dend_15 { pt3dadd( 57.1306, -17.6365, -32.9606, 0.96 ) }
    dend_15 { pt3dadd( 58.9105, -17.1048, -33.8421, 0.96 ) }
    dend_15 { pt3dadd( 59.2735, -17.0063, -34.0316, 0.96 ) }
    dend_15 { pt3dadd( 60.3641, -16.734, -34.5754, 0.96 ) }
    dend_15 { pt3dadd( 62.0172, -16.3506, -35.4145, 1.44 ) }
    dend_15 { pt3dadd( 63.1268, -16.115, -35.9837, 1.44 ) }
    dend_15 { pt3dadd( 64.0476, -15.9189, -36.4455, 1.44 ) }
    dend_15 { pt3dadd( 65.7056, -15.5466, -37.1785, 1.32 ) }
    dend_15 { pt3dadd( 66.5956, -15.3559, -37.5379, 1.32 ) }
    dend_15 { pt3dadd( 68.042, -15.0759, -38.0515, 1.2 ) }
    dend_15 { pt3dadd( 69.494, -14.8563, -38.5333, 0.84 ) }
    dend_15 { pt3dadd( 70.2261, -14.7704, -38.7361, 0.84 ) }
    dend_15 { pt3dadd( 71.9292, -14.6031, -39.2777, 1.44 ) }
    dend_15 { pt3dadd( 72.9714, -14.4988, -39.6107, 1.44 ) }
    dend_15 { pt3dadd( 73.9065, -14.3912, -39.9077, 1.08 ) }
    dend_15 { pt3dadd( 75.6809, -14.1574, -40.4768, 0.84 ) }
    dend_15 { pt3dadd( 77.665, -13.9025, -41.1255, 0.84 ) }
    dend_15 { pt3dadd( 81.8933, -13.4792, -42.5911, 1.08 ) }
    dend_15 { pt3dadd( 83.1956, -13.4226, -43.0924, 1.44 ) }
    dend_15 { pt3dadd( 84.1958, -13.4404, -43.4541, 1.44 ) }
    dend_15 { pt3dadd( 85.3305, -13.527, -43.9769, 0.96 ) }
    dend_15 { pt3dadd( 86.018, -13.6078, -44.3393, 0.96 ) }
    dend_15 { pt3dadd( 86.6987, -13.7066, -44.6666, 0.72 ) }
    dend_15 { pt3dadd( 88.5018, -14.167, -45.2483, 1.2 ) }
    dend_15 { pt3dadd( 90.4043, -14.7868, -45.7656, 1.44 ) }
    dend_15 { pt3dadd( 94.3396, -16.2487, -46.6406, 0.84 ) }
    dend_15 { pt3dadd( 95.2009, -16.5803, -46.8168, 0.84 ) }
    dend_15 { pt3dadd( 98.1149, -17.6165, -47.365, 1.2 ) }
    dend_15 { pt3dadd( 100.189, -18.2358, -47.5436, 1.56 ) }
    dend_15 { pt3dadd( 101.656, -18.5924, -47.5196, 1.56 ) }
    dend_15 { pt3dadd( 102.557, -18.7527, -47.43, 1.56 ) }
    dend_15 { pt3dadd( 104.957, -19.0081, -46.8955, 1.56 ) }
    dend_15 { pt3dadd( 106.494, -19.1042, -46.6598, 0.96 ) }
    dend_15 { pt3dadd( 109.772, -19.226, -46.4102, 0.96 ) }
    dend_15 { pt3dadd( 110.924, -19.1984, -46.3427, 0.96 ) }
    dend_15 { pt3dadd( 112.265, -19.1089, -46.2865, 0.96 ) }
    dend_15 { pt3dadd( 114.108, -18.9244, -46.2342, 1.44 ) }
    dend_15 { pt3dadd( 117.196, -18.5556, -46.1882, 0.72 ) }
    dend_15 { pt3dadd( 118.589, -18.3713, -46.2291, 0.48 ) }
    dend_15 { pt3dadd( 120.159, -18.1284, -46.3762, 1.44 ) }
    dend_15 { pt3dadd( 121.135, -17.923, -46.4364, 1.44 ) }
    dend_15 { pt3dadd( 122.245, -17.5798, -46.4567, 0.6 ) }
    dend_15 { pt3dadd( 123.079, -17.2064, -46.3845, 0.6 ) }
    dend_15 { pt3dadd( 124.538, -16.3617, -46.0377, 1.2 ) }
    dend_15 { pt3dadd( 125.166, -15.9866, -45.8751, 1.2 ) }
    dend_15 { pt3dadd( 126.149, -15.4823, -45.5843, 0.72 ) }
    dend_15 { pt3dadd( 126.807, -15.1884, -45.3916, 0.72 ) }
    dend_15 { pt3dadd( 128.374, -14.5276, -44.9609, 0.72 ) }
    dend_15 { pt3dadd( 129.578, -14.0201, -44.6686, 1.44 ) }
    dend_15 { pt3dadd( 130.597, -13.6416, -44.4726, 1.44 ) }
    dend_15 { pt3dadd( 131.774, -13.2572, -44.4019, 0.36 ) }
    dend_15 { pt3dadd( 133.673, -12.6498, -44.4759, 0.72 ) }
    dend_15 { pt3dadd( 134.344, -12.4208, -44.6261, 0.72 ) }
    dend_15 { pt3dadd( 135.235, -12.1126, -44.9532, 0.24 ) }
    dend_15 { pt3dadd( 135.989, -11.8281, -45.2859, 0.96 ) }
    dend_15 { pt3dadd( 138.961, -10.5454, -46.7755, 1.56 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_9()
}

proc basic_shape_9() {
    dend_15 { pt3dadd( 140.045, -9.99453, -47.4693, 1.56 ) }
    dend_15 { pt3dadd( 142.161, -8.88446, -48.9825, 1.08 ) }
    dend_15 { pt3dadd( 143.15, -8.33861, -49.7434, 1.08 ) }
    dend_15 { pt3dadd( 143.915, -7.85555, -50.3654, 1.56 ) }
    dend_15 { pt3dadd( 144.496, -7.40863, -50.8712, 1.56 ) }
    dend_15 { pt3dadd( 146.339, -5.78901, -52.7958, 1.32 ) }
    dend_15 { pt3dadd( 147.168, -5.03311, -53.7305, 0.96 ) }
    dend_15 { pt3dadd( 148.788, -3.50572, -55.5542, 1.56 ) }
    dend_15 { pt3dadd( 149.51, -2.87372, -56.4081, 0.72 ) }
    dend_15 { pt3dadd( 150.501, -2.11899, -57.6238, 1.44 ) }
    dend_15 { pt3dadd( 153.118, -0.276256, -60.9542, 0.84 ) }
    dend_15 { pt3dadd( 153.719, 0.112065, -61.7111, 0.72 ) }
    dend_15 { pt3dadd( 154.192, 0.395479, -62.3238, 0.72 ) }
    dend_15 { pt3dadd( 156.107, 1.41704, -64.6911, 0.72 ) }
    dend_15 { pt3dadd( 157.486, 2.06344, -66.2947, 1.44 ) }
    dend_15 { pt3dadd( 159.595, 3.0082, -68.6205, 0.96 ) }
    dend_15 { pt3dadd( 160.285, 3.31595, -69.3264, 0.96 ) }
    dend_15 { pt3dadd( 162.111, 4.0815, -71.1837, 0.96 ) }
    dend_15 { pt3dadd( 163.084, 4.49085, -72.2158, 0.72 ) }
    dend_15 { pt3dadd( 163.458, 4.67307, -72.6196, 0.72 ) }
    dend_15 { pt3dadd( 164.524, 5.30291, -73.9391, 1.2 ) }
    dend_15 { pt3dadd( 164.846, 5.54963, -74.4521, 1.2 ) }
    dend_15 { pt3dadd( 165.516, 6.29436, -75.8371, 1.2 ) }
    dend_15 { pt3dadd( 166.39, 7.51308, -77.8959, 1.2 ) }
    dend_15 { pt3dadd( 166.811, 8.11171, -78.9311, 0.72 ) }
    dend_15 { pt3dadd( 167.62, 9.16461, -80.7981, 1.2 ) }
    dend_15 { pt3dadd( 168.12, 9.74682, -81.8203, 1.2 ) }
    dend_15 { pt3dadd( 168.562, 10.2322, -82.6029, 0.6 ) }
    dend_15 { pt3dadd( 169.537, 11.2849, -84.0264, 0.6 ) }
    dend_15 { pt3dadd( 170.097, 11.7789, -84.6236, 1.2 ) }
    dend_15 { pt3dadd( 170.805, 12.3274, -85.2524, 1.2 ) }
    dend_15 { pt3dadd( 171.344, 12.7272, -85.6683, 1.2 ) }
    dend_15 { pt3dadd( 172.264, 13.3918, -86.3473, 0.6 ) }
    dend_15 { pt3dadd( 173.252, 14.1451, -87.0767, 1.08 ) }
    dend_15 { pt3dadd( 174.121, 14.9791, -87.7749, 0.48 ) }
    dend_15 { pt3dadd( 174.627, 15.4782, -88.2049, 0.48 ) }
    dend_15 { pt3dadd( 175.684, 16.5223, -89.2392, 1.32 ) }
    dend_15 { pt3dadd( 176.737, 17.4876, -90.341, 0.72 ) }
    dend_15 { pt3dadd( 177.297, 17.9198, -90.9331, 0.72 ) }
    dend_15 { pt3dadd( 179.045, 19.0249, -92.8791, 1.2 ) }
    dend_15 { pt3dadd( 180.45, 19.8696, -94.5222, 1.2 ) }
    dend_15 { pt3dadd( 181.754, 20.5712, -96.2832, 0.6 ) }
    dend_15 { pt3dadd( 182.157, 20.7481, -96.886, 0.6 ) }
    dend_15 { pt3dadd( 183.638, 21.2669, -99.2512, 1.56 ) }
    dend_15 { pt3dadd( 185.223, 21.6287, -101.902, 1.56 ) }
    dend_15 { pt3dadd( 185.751, 21.6854, -102.82, 1.56 ) }
    dend_15 { pt3dadd( 187.953, 21.7308, -106.844, 1.2 ) }
    dend_15 { pt3dadd( 189.093, 21.674, -108.998, 0.84 ) }
    dend_15 { pt3dadd( 189.297, 21.646, -109.422, 0.84 ) }
    dend_15 { pt3dadd( 190.598, 21.3727, -112.263, 1.32 ) }
    dend_15 { pt3dadd( 191.845, 21.0493, -114.99, 0.96 ) }
    dend_15 { pt3dadd( 192.786, 20.7458, -117.052, 1.8 ) }
    dend_15 { pt3dadd( 193.914, 20.3595, -119.487, 1.8 ) }
    dend_15 { pt3dadd( 195.711, 19.7464, -123.59, 1.32 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 54/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 39.9927, -23.3416, -24.928, 1.2 ) }
    dend_12 { pt3dadd( 40.2892, -27.5027, -26.4119, 1.2 ) }
    dend_12 { pt3dadd( 40.7263, -29.7561, -27.1808, 1.08 ) }
    dend_12 { pt3dadd( 41.2956, -31.3661, -27.4677, 1.08 ) }
    dend_12 { pt3dadd( 41.6841, -32.0313, -27.6267, 1.08 ) }
    dend_12 { pt3dadd( 42.9197, -33.7495, -28.075, 1.08 ) }
    dend_12 { pt3dadd( 43.5223, -34.4783, -28.065, 1.08 ) }
    dend_12 { pt3dadd( 44.3967, -35.2722, -27.8385, 1.08 ) }
    dend_12 { pt3dadd( 46.6373, -36.8406, -27.2207, 1.32 ) }
    dend_12 { pt3dadd( 49.7398, -38.565, -26.2162, 1.32 ) }
    dend_12 { pt3dadd( 50.6724, -39.0135, -25.8722, 1.32 ) }
    dend_12 { pt3dadd( 55.5013, -41.2357, -23.8694, 1.2 ) }
    dend_12 { pt3dadd( 56.5813, -41.7279, -23.4044, 1.2 ) }
    dend_12 { pt3dadd( 58.2428, -42.5082, -22.6963, 1.2 ) }
    dend_12 { pt3dadd( 60.0524, -43.4066, -21.9477, 1.2 ) }
    dend_12 { pt3dadd( 61.3776, -44.1441, -21.3544, 1.2 ) }
    dend_12 { pt3dadd( 62.5125, -44.9153, -20.9177, 1.2 ) }
    dend_12 { pt3dadd( 63.582, -45.8708, -20.6474, 1.2 ) }
    dend_12 { pt3dadd( 64.9359, -47.4824, -20.2412, 1.2 ) }
    dend_12 { pt3dadd( 65.2498, -47.9561, -20.1166, 1.2 ) }
    dend_12 { pt3dadd( 66.3035, -49.6994, -19.583, 1.2 ) }
    dend_12 { pt3dadd( 67.4215, -51.5158, -18.9749, 1.2 ) }
    dend_12 { pt3dadd( 68.3986, -52.9523, -18.5678, 1.2 ) }
    dend_12 { pt3dadd( 68.9004, -53.6911, -18.3571, 1.08 ) }
    dend_12 { pt3dadd( 70.6149, -56.0489, -17.5937, 1.56 ) }
    dend_12 { pt3dadd( 71.8121, -57.53, -17.0711, 0.96 ) }
    dend_12 { pt3dadd( 72.4536, -58.1872, -16.8082, 0.96 ) }
    dend_12 { pt3dadd( 74.8762, -60.3486, -16.1626, 1.68 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 82/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 29.2053, -64.3347, 12.8017, 0.96 ) }
    dend_10 { pt3dadd( 29.5182, -65.8865, 12.1909, 0.96 ) }
    dend_10 { pt3dadd( 29.7822, -67.554, 11.6188, 0.96 ) }
    dend_10 { pt3dadd( 30.1386, -69.7068, 10.9607, 0.96 ) }
    dend_10 { pt3dadd( 30.4121, -71.6456, 10.5064, 1.32 ) }
    dend_10 { pt3dadd( 30.6243, -73.7167, 10.1537, 0.84 ) }
    dend_10 { pt3dadd( 30.7355, -74.7515, 10.0254, 0.84 ) }
    dend_10 { pt3dadd( 30.7867, -75.34, 9.99676, 0.84 ) }
    dend_10 { pt3dadd( 30.8624, -76.3812, 10.0234, 0.96 ) }
    dend_10 { pt3dadd( 30.9426, -77.8943, 10.0017, 0.6 ) }
    dend_10 { pt3dadd( 31.0218, -79.2632, 9.81777, 0.6 ) }
    dend_10 { pt3dadd( 31.151, -80.6555, 9.57244, 1.2 ) }
    dend_10 { pt3dadd( 31.228, -81.4944, 9.4206, 1.2 ) }
    dend_10 { pt3dadd( 31.3377, -83.3643, 9.01642, 0.72 ) }
    dend_10 { pt3dadd( 31.4491, -85.9664, 8.3929, 1.2 ) }
    dend_10 { pt3dadd( 31.4995, -87.3799, 8.02638, 1.2 ) }
    dend_10 { pt3dadd( 31.4572, -89.6112, 7.19445, 1.44 ) }
    dend_10 { pt3dadd( 31.3311, -90.9492, 6.68002, 1.44 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_10()
}

proc basic_shape_10() {
    dend_10 { pt3dadd( 31.0917, -92.7174, 6.0125, 0.84 ) }
    dend_10 { pt3dadd( 30.9364, -93.6701, 5.59942, 0.84 ) }
    dend_10 { pt3dadd( 30.7963, -94.4494, 5.21984, 1.44 ) }
    dend_10 { pt3dadd( 30.0144, -98.8582, 2.86051, 1.44 ) }
    dend_10 { pt3dadd( 29.6674, -101.342, 1.46325, 0.96 ) }
    dend_10 { pt3dadd( 29.5934, -102.248, 0.954528, 0.96 ) }
    dend_10 { pt3dadd( 29.6051, -105.797, -0.887844, 1.44 ) }
    dend_10 { pt3dadd( 29.7097, -106.979, -1.45611, 1.44 ) }
    dend_10 { pt3dadd( 29.9783, -108.261, -1.98728, 0.96 ) }
    dend_10 { pt3dadd( 30.4575, -109.808, -2.48103, 0.96 ) }
    dend_10 { pt3dadd( 31.3116, -112.142, -3.27648, 0.84 ) }
    dend_10 { pt3dadd( 31.9388, -113.762, -3.73773, 1.32 ) }
    dend_10 { pt3dadd( 32.3768, -114.786, -3.94374, 1.32 ) }
    dend_10 { pt3dadd( 33.3529, -116.912, -4.36718, 0.84 ) }
    dend_10 { pt3dadd( 33.8136, -117.864, -4.54848, 0.84 ) }
    dend_10 { pt3dadd( 34.2412, -118.662, -4.66532, 0.84 ) }
    dend_10 { pt3dadd( 34.7158, -119.438, -4.72936, 0.84 ) }
    dend_10 { pt3dadd( 35.931, -121.359, -4.86675, 0.72 ) }
    dend_10 { pt3dadd( 36.9297, -122.866, -4.94709, 0.72 ) }
    dend_10 { pt3dadd( 37.3557, -123.5, -4.96643, 0.72 ) }
    dend_10 { pt3dadd( 38.6405, -125.447, -5.013, 1.08 ) }
    dend_10 { pt3dadd( 39.5557, -126.903, -5.03551, 1.44 ) }
    dend_10 { pt3dadd( 40.234, -128.078, -4.98689, 1.44 ) }
    dend_10 { pt3dadd( 40.6983, -129.0, -4.89356, 1.44 ) }
    dend_10 { pt3dadd( 41.2307, -130.211, -4.70162, 0.96 ) }
    dend_10 { pt3dadd( 41.5662, -131.088, -4.52543, 0.84 ) }
    dend_10 { pt3dadd( 42.0132, -132.404, -4.20795, 1.32 ) }
    dend_10 { pt3dadd( 42.6971, -134.277, -3.66285, 1.2 ) }
    dend_10 { pt3dadd( 43.1692, -135.379, -3.4023, 1.2 ) }
    dend_10 { pt3dadd( 43.7687, -136.511, -3.12508, 1.08 ) }
    dend_10 { pt3dadd( 44.4566, -137.594, -2.86555, 1.08 ) }
    dend_10 { pt3dadd( 45.0396, -138.454, -2.67832, 1.08 ) }
    dend_10 { pt3dadd( 45.9252, -139.811, -2.44338, 1.32 ) }
    dend_10 { pt3dadd( 47.3724, -142.217, -2.19825, 1.32 ) }
    dend_10 { pt3dadd( 48.6255, -144.534, -2.00641, 0.84 ) }
    dend_10 { pt3dadd( 49.1534, -145.57, -1.87393, 0.84 ) }
    dend_10 { pt3dadd( 49.4586, -146.199, -1.76252, 0.84 ) }
    dend_10 { pt3dadd( 49.9256, -147.338, -1.52243, 1.2 ) }
    dend_10 { pt3dadd( 50.3438, -148.553, -1.25021, 0.72 ) }
    dend_10 { pt3dadd( 50.7364, -149.697, -0.954209, 1.32 ) }
    dend_10 { pt3dadd( 51.4293, -151.886, -0.587719, 0.96 ) }
    dend_10 { pt3dadd( 51.9102, -153.419, -0.382544, 0.96 ) }
    dend_10 { pt3dadd( 52.137, -154.183, -0.301172, 0.72 ) }
    dend_10 { pt3dadd( 52.6052, -155.894, -0.174307, 0.72 ) }
    dend_10 { pt3dadd( 52.8757, -157.193, -0.15243, 0.72 ) }
    dend_10 { pt3dadd( 53.1191, -159.139, -0.23824, 1.2 ) }
    dend_10 { pt3dadd( 53.2154, -160.852, -0.402236, 1.2 ) }
    dend_10 { pt3dadd( 53.2373, -161.909, -0.421103, 1.2 ) }
    dend_10 { pt3dadd( 53.2695, -162.575, -0.380563, 1.2 ) }
    dend_10 { pt3dadd( 53.4136, -164.44, -0.122055, 0.48 ) }
    dend_10 { pt3dadd( 53.5193, -165.597, 0.103191, 0.96 ) }
    dend_10 { pt3dadd( 53.7673, -167.402, 0.581325, 0.96 ) }
    dend_10 { pt3dadd( 54.206, -169.887, 1.305, 1.32 ) }
    dend_10 { pt3dadd( 54.5313, -171.394, 1.74948, 0.84 ) }
    dend_10 { pt3dadd( 54.9472, -173.059, 2.27932, 0.84 ) }
    dend_10 { pt3dadd( 55.5208, -175.332, 3.03313, 1.32 ) }
    dend_10 { pt3dadd( 56.1239, -177.637, 3.75884, 1.56 ) }
    dend_10 { pt3dadd( 56.4798, -178.862, 4.10717, 0.96 ) }
    dend_10 { pt3dadd( 56.8757, -180.128, 4.42064, 0.96 ) }
    dend_10 { pt3dadd( 57.4325, -181.924, 4.88354, 1.44 ) }
    dend_10 { pt3dadd( 57.8583, -183.119, 5.23784, 0.84 ) }
    dend_10 { pt3dadd( 58.3239, -184.204, 5.58646, 0.84 ) }
    dend_10 { pt3dadd( 58.8315, -185.384, 6.04022, 0.84 ) }
    dend_10 { pt3dadd( 59.4645, -186.997, 6.74027, 0.96 ) }
    dend_10 { pt3dadd( 59.8502, -188.041, 7.1958, 0.96 ) }
    dend_10 { pt3dadd( 60.2338, -189.072, 7.63914, 0.72 ) }
    dend_10 { pt3dadd( 60.5357, -189.837, 7.96692, 0.72 ) }
    dend_10 { pt3dadd( 61.3051, -191.85, 8.77959, 1.08 ) }
    dend_10 { pt3dadd( 61.828, -193.131, 9.42087, 0.48 ) }
    dend_10 { pt3dadd( 62.3221, -194.138, 9.9671, 1.08 ) }
    dend_10 { pt3dadd( 63.1502, -195.644, 10.8101, 0.48 ) }
    dend_10 { pt3dadd( 63.5732, -196.384, 11.2137, 0.48 ) }
    dend_10 { pt3dadd( 64.1633, -197.413, 11.7615, 1.44 ) }
    dend_10 { pt3dadd( 66.0592, -200.849, 13.4413, 0.6 ) }
    dend_10 { pt3dadd( 67.031, -202.784, 14.367, 0.6 ) }
    dend_10 { pt3dadd( 67.6297, -204.181, 14.9965, 0.6 ) }
    dend_10 { pt3dadd( 67.8823, -205.042, 15.3237, 0.6 ) }
    dend_10 { pt3dadd( 68.0553, -206.15, 15.6595, 0.6 ) }
    dend_10 { pt3dadd( 68.0423, -207.465, 15.9085, 0.6 ) }
    dend_10 { pt3dadd( 67.8478, -208.707, 16.0012, 1.56 ) }
    dend_10 { pt3dadd( 67.6376, -209.627, 16.0883, 1.56 ) }
    dend_10 { pt3dadd( 67.2225, -211.544, 16.3364, 0.96 ) }
    dend_10 { pt3dadd( 67.0377, -212.574, 16.4872, 0.72 ) }
    dend_10 { pt3dadd( 66.908, -213.512, 16.6499, 1.32 ) }
    dend_10 { pt3dadd( 66.706, -215.744, 17.0277, 0.72 ) }
    dend_10 { pt3dadd( 66.6479, -217.389, 17.3148, 0.72 ) }
    dend_10 { pt3dadd( 66.6528, -219.647, 17.7475, 1.2 ) }
    dend_10 { pt3dadd( 66.6876, -220.684, 17.9559, 1.2 ) }
    dend_10 { pt3dadd( 66.7131, -222.327, 18.2469, 0.6 ) }
    dend_10 { pt3dadd( 66.7045, -224.289, 18.5307, 0.6 ) }
    dend_10 { pt3dadd( 66.634, -225.663, 18.6575, 1.32 ) }
    dend_10 { pt3dadd( 66.4631, -227.402, 18.7608, 0.72 ) }
    dend_10 { pt3dadd( 66.3425, -228.326, 18.7675, 0.72 ) }
    dend_10 { pt3dadd( 66.1099, -229.809, 18.7466, 0.72 ) }
    dend_10 { pt3dadd( 65.9874, -230.724, 18.616, 0.72 ) }
    dend_10 { pt3dadd( 65.9063, -231.761, 18.3812, 1.2 ) }
    dend_10 { pt3dadd( 65.927, -232.625, 18.044, 0.6 ) }
    dend_10 { pt3dadd( 66.0516, -233.813, 17.4801, 0.6 ) }
    dend_10 { pt3dadd( 66.2266, -235.182, 16.8075, 1.08 ) }
    dend_10 { pt3dadd( 66.6869, -238.175, 15.4849, 1.08 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_11()
}

proc basic_shape_11() {
    dend_10 { pt3dadd( 66.891, -239.46, 14.9563, 1.08 ) }
    dend_10 { pt3dadd( 67.276, -241.705, 14.1881, 1.56 ) }
    dend_10 { pt3dadd( 67.6081, -243.424, 13.4836, 1.08 ) }
    dend_10 { pt3dadd( 67.805, -244.408, 12.9801, 0.72 ) }
    dend_10 { pt3dadd( 68.155, -246.095, 12.0486, 0.72 ) }
    dend_10 { pt3dadd( 68.3497, -247.24, 11.4342, 1.44 ) }
    dend_10 { pt3dadd( 68.5965, -248.778, 10.5649, 0.72 ) }
    dend_10 { pt3dadd( 69.3386, -253.463, 7.81327, 1.2 ) }
    dend_10 { pt3dadd( 69.7967, -255.818, 6.50548, 0.72 ) }
    dend_10 { pt3dadd( 70.0276, -256.976, 5.85927, 0.72 ) }
    dend_10 { pt3dadd( 70.3832, -258.998, 4.6481, 0.72 ) }
    dend_10 { pt3dadd( 70.5355, -259.916, 4.10064, 0.72 ) }
    dend_10 { pt3dadd( 70.8702, -262.217, 2.81545, 1.08 ) }
    dend_10 { pt3dadd( 71.2236, -265.177, 1.79878, 0.6 ) }
    dend_10 { pt3dadd( 71.53, -268.05, 0.95146, 0.6 ) }
    dend_10 { pt3dadd( 71.7295, -270.66, 0.0873062, 1.32 ) }
    dend_10 { pt3dadd( 73.8871, -280.722, -1.78603, 1.32 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 17/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 29.2053, -64.3347, 12.8017, 1.2 ) }
    dend_9 { pt3dadd( 27.9133, -65.1481, 13.5188, 1.2 ) }
    dend_9 { pt3dadd( 27.0132, -65.7687, 13.9805, 1.2 ) }
    dend_9 { pt3dadd( 24.9535, -67.3585, 14.9337, 0.84 ) }
    dend_9 { pt3dadd( 23.8457, -68.3072, 15.4016, 0.84 ) }
    dend_9 { pt3dadd( 23.1646, -68.9262, 15.6588, 1.08 ) }
    dend_9 { pt3dadd( 22.3662, -69.6828, 15.9961, 0.6 ) }
    dend_9 { pt3dadd( 21.8811, -70.1374, 16.2003, 0.6 ) }
    dend_9 { pt3dadd( 21.0448, -70.8839, 16.5096, 1.2 ) }
    dend_9 { pt3dadd( 20.2638, -71.4968, 16.8159, 1.2 ) }
    dend_9 { pt3dadd( 19.6493, -71.9434, 17.1679, 1.2 ) }
    dend_9 { pt3dadd( 18.2331, -72.9592, 18.2082, 0.72 ) }
    dend_9 { pt3dadd( 16.985, -73.8197, 19.2312, 1.32 ) }
    dend_9 { pt3dadd( 16.4508, -74.1561, 19.6839, 1.32 ) }
    dend_9 { pt3dadd( 14.541, -75.3924, 21.5302, 0.84 ) }
    dend_9 { pt3dadd( 13.4311, -76.2062, 22.7115, 1.44 ) }
    dend_9 { pt3dadd( 12.4597, -77.0568, 23.818, 0.84 ) }
    dend_9 { pt3dadd( 12.0511, -77.4662, 24.2779, 0.84 ) }
    dend_9 { pt3dadd( 10.9863, -78.6479, 25.4832, 0.84 ) }
    dend_9 { pt3dadd( 9.49028, -80.3255, 26.9903, 1.32 ) }
    dend_9 { pt3dadd( 8.23629, -81.7399, 28.0584, 0.84 ) }
    dend_9 { pt3dadd( 7.5295, -82.5001, 28.578, 1.44 ) }
    dend_9 { pt3dadd( 6.65154, -83.4548, 29.1496, 0.72 ) }
    dend_9 { pt3dadd( 5.9995, -84.2119, 29.5381, 0.72 ) }
    dend_9 { pt3dadd( 5.08217, -85.4038, 29.974, 1.32 ) }
    dend_9 { pt3dadd( 4.16957, -86.5705, 30.3007, 1.08 ) }
    dend_9 { pt3dadd( 3.54886, -87.3173, 30.509, 1.08 ) }
    dend_9 { pt3dadd( 2.90098, -88.0309, 30.721, 1.56 ) }
    dend_9 { pt3dadd( 2.35625, -88.5693, 30.88, 1.08 ) }
    dend_9 { pt3dadd( 1.01137, -89.8027, 31.2229, 1.44 ) }
    dend_9 { pt3dadd( -0.538163, -91.13, 31.5574, 0.72 ) }
    dend_9 { pt3dadd( -1.8411, -92.2351, 31.8174, 0.72 ) }
    dend_9 { pt3dadd( -3.05484, -93.2862, 32.0708, 1.2 ) }
    dend_9 { pt3dadd( -4.62233, -94.7169, 32.4108, 0.6 ) }
    dend_9 { pt3dadd( -5.06864, -95.1928, 32.507, 0.6 ) }
    dend_9 { pt3dadd( -5.43513, -95.7304, 32.5817, 0.6 ) }
    dend_9 { pt3dadd( -6.1017, -97.4316, 32.708, 1.44 ) }
    dend_9 { pt3dadd( -6.35068, -98.9289, 32.805, 0.6 ) }
    dend_9 { pt3dadd( -6.40194, -99.7365, 32.8224, 0.6 ) }
    dend_9 { pt3dadd( -6.49144, -101.7, 32.807, 0.96 ) }
    dend_9 { pt3dadd( -6.68001, -103.135, 32.7611, 0.96 ) }
    dend_9 { pt3dadd( -6.86846, -104.159, 32.7747, 0.6 ) }
    dend_9 { pt3dadd( -7.193, -105.606, 32.8455, 0.6 ) }
    dend_9 { pt3dadd( -7.70949, -107.737, 33.0538, 0.96 ) }
    dend_9 { pt3dadd( -8.04448, -108.763, 33.291, 0.96 ) }
    dend_9 { pt3dadd( -8.82709, -110.45, 33.9336, 0.6 ) }
    dend_9 { pt3dadd( -10.091, -112.614, 34.9976, 1.2 ) }
    dend_9 { pt3dadd( -10.6693, -113.505, 35.5089, 1.2 ) }
    dend_9 { pt3dadd( -11.0298, -114.118, 36.0177, 1.2 ) }
    dend_9 { pt3dadd( -11.7799, -115.899, 37.8586, 0.48 ) }
    dend_9 { pt3dadd( -11.9057, -116.543, 38.6868, 0.48 ) }
    dend_9 { pt3dadd( -12.001, -117.341, 39.8419, 1.08 ) }
    dend_9 { pt3dadd( -12.0631, -117.699, 40.3849, 1.08 ) }
    dend_9 { pt3dadd( -12.5775, -119.876, 43.7651, 0.72 ) }
    dend_9 { pt3dadd( -12.7313, -120.388, 44.4986, 0.72 ) }
    dend_9 { pt3dadd( -13.661, -122.603, 47.3251, 1.08 ) }
    dend_9 { pt3dadd( -14.2761, -123.514, 48.3952, 0.72 ) }
    dend_9 { pt3dadd( -14.9506, -124.139, 49.0352, 0.72 ) }
    dend_9 { pt3dadd( -16.3473, -125.054, 49.7259, 1.2 ) }
    dend_9 { pt3dadd( -17.7978, -125.765, 50.0505, 0.84 ) }
    dend_9 { pt3dadd( -18.9301, -126.212, 50.1886, 1.32 ) }
    dend_9 { pt3dadd( -20.5539, -126.748, 50.2205, 0.6 ) }
    dend_9 { pt3dadd( -21.4624, -127.011, 50.2719, 0.6 ) }
    dend_9 { pt3dadd( -22.9806, -127.407, 50.4038, 1.32 ) }
    dend_9 { pt3dadd( -24.1073, -127.697, 50.5336, 0.72 ) }
    dend_9 { pt3dadd( -25.1011, -127.988, 50.6659, 0.72 ) }
    dend_9 { pt3dadd( -25.8375, -128.257, 50.7742, 1.32 ) }
    dend_9 { pt3dadd( -27.5726, -129.1, 51.0481, 0.6 ) }
    dend_9 { pt3dadd( -28.5263, -129.667, 51.202, 0.6 ) }
    dend_9 { pt3dadd( -29.5584, -130.437, 51.3616, 0.6 ) }
    dend_9 { pt3dadd( -30.4235, -131.208, 51.4713, 0.6 ) }
    dend_9 { pt3dadd( -31.2558, -132.069, 51.5316, 1.2 ) }
    dend_9 { pt3dadd( -31.805, -132.684, 51.5316, 0.72 ) }
    dend_9 { pt3dadd( -32.1439, -133.097, 51.5024, 0.72 ) }
    dend_9 { pt3dadd( -32.6589, -133.775, 51.5253, 1.32 ) }
    dend_9 { pt3dadd( -33.0335, -134.307, 51.5924, 0.6 ) }
    dend_9 { pt3dadd( -33.8053, -135.592, 51.8902, 1.08 ) }
    dend_9 { pt3dadd( -34.2687, -136.479, 52.126, 0.36 ) }
    dend_9 { pt3dadd( -34.5071, -136.972, 52.2654, 0.36 ) }
    dend_9 { pt3dadd( -35.3662, -138.917, 52.7939, 0.36 ) }
    dend_9 { pt3dadd( -35.6699, -139.679, 53.0263, 0.72 ) }
    dend_9 { pt3dadd( -36.2667, -141.139, 53.4892, 1.08 ) }
    dend_9 { pt3dadd( -36.8058, -142.373, 53.8865, 1.08 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_12()
}

proc basic_shape_12() {
    dend_9 { pt3dadd( -37.131, -143.061, 54.0983, 1.08 ) }
    dend_9 { pt3dadd( -37.9231, -144.59, 54.5583, 1.08 ) }
    dend_9 { pt3dadd( -38.6873, -146.083, 54.9564, 0.72 ) }
    dend_9 { pt3dadd( -39.3761, -147.579, 55.3825, 0.72 ) }
    dend_9 { pt3dadd( -39.6528, -148.301, 55.5145, 0.72 ) }
    dend_9 { pt3dadd( -39.8572, -148.927, 55.5808, 0.72 ) }
    dend_9 { pt3dadd( -40.3926, -150.831, 55.5936, 1.08 ) }
    dend_9 { pt3dadd( -40.7172, -152.138, 55.5879, 1.08 ) }
    dend_9 { pt3dadd( -41.309, -154.802, 55.5246, 0.6 ) }
    dend_9 { pt3dadd( -41.9807, -158.308, 55.484, 0.6 ) }
    dend_9 { pt3dadd( -42.1606, -159.223, 55.482, 1.2 ) }
    dend_9 { pt3dadd( -42.5728, -161.26, 55.5814, 0.84 ) }
    dend_9 { pt3dadd( -43.1198, -163.976, 55.8268, 0.48 ) }
    dend_9 { pt3dadd( -43.2605, -164.668, 55.894, 1.2 ) }
    dend_9 { pt3dadd( -43.5037, -165.945, 56.0721, 0.72 ) }
    dend_9 { pt3dadd( -43.8273, -167.718, 56.4264, 0.72 ) }
    dend_9 { pt3dadd( -44.2256, -170.094, 56.6883, 0.72 ) }
    dend_9 { pt3dadd( -44.4979, -171.932, 56.8292, 0.72 ) }
    dend_9 { pt3dadd( -44.7954, -174.37, 56.8225, 1.32 ) }
    dend_9 { pt3dadd( -44.9879, -176.238, 56.7834, 0.72 ) }
    dend_9 { pt3dadd( -45.0611, -177.196, 56.7269, 0.72 ) }
    dend_9 { pt3dadd( -45.2337, -180.244, 56.2781, 1.08 ) }
    dend_9 { pt3dadd( -52.6613, -187.103, 57.745, 1.08 ) }
    // Section: dend_4, id: dend_4, parent: dend_2 (entry count 23/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 57.2967, 47.343, 56.7762, 0.96 ) }
    dend_4 { pt3dadd( 58.2378, 47.4746, 57.2177, 0.96 ) }
    dend_4 { pt3dadd( 59.7109, 47.6806, 57.9087, 0.84 ) }
    dend_4 { pt3dadd( 62.0076, 48.0016, 58.9861, 0.84 ) }
    dend_4 { pt3dadd( 63.0503, 48.1474, 59.4752, 0.84 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 28/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 57.2967, 47.343, 56.7762, 0.84 ) }
    dend_3 { pt3dadd( 58.4063, 48.0134, 56.8115, 0.84 ) }
    dend_3 { pt3dadd( 59.6986, 48.709, 56.8663, 1.2 ) }
    dend_3 { pt3dadd( 60.7536, 49.332, 56.918, 0.6 ) }
    dend_3 { pt3dadd( 61.3195, 49.6928, 56.9507, 0.6 ) }
    dend_3 { pt3dadd( 61.9732, 50.1515, 56.9916, 0.6 ) }
    dend_3 { pt3dadd( 62.8267, 50.8566, 57.0471, 0.96 ) }
    dend_3 { pt3dadd( 63.1645, 51.1836, 57.0781, 0.96 ) }
    dend_3 { pt3dadd( 63.7646, 52.1284, 57.2054, 0.72 ) }
    dend_3 { pt3dadd( 64.3469, 53.363, 57.3755, 0.72 ) }
    dend_3 { pt3dadd( 64.6424, 54.0055, 57.4281, 1.2 ) }
    dend_3 { pt3dadd( 65.2376, 55.191, 57.4594, 0.6 ) }
    dend_3 { pt3dadd( 65.8862, 56.2966, 57.4312, 1.08 ) }
    dend_3 { pt3dadd( 66.9495, 57.881, 57.2876, 0.84 ) }
    dend_3 { pt3dadd( 67.8014, 58.9835, 57.121, 0.84 ) }
    dend_3 { pt3dadd( 68.9388, 60.3158, 56.8431, 1.32 ) }
    dend_3 { pt3dadd( 69.8245, 61.2222, 56.6112, 0.72 ) }
    dend_3 { pt3dadd( 70.6441, 61.9689, 56.3908, 1.2 ) }
    dend_3 { pt3dadd( 71.5353, 62.7166, 55.9771, 0.6 ) }
    dend_3 { pt3dadd( 72.5441, 63.4442, 55.4006, 0.6 ) }
    dend_3 { pt3dadd( 73.529, 63.9974, 54.6808, 1.08 ) }
    dend_3 { pt3dadd( 74.1849, 64.2497, 54.1275, 0.48 ) }
    dend_3 { pt3dadd( 75.1187, 64.4699, 53.2834, 0.48 ) }
    dend_3 { pt3dadd( 77.9237, 64.6512, 50.6333, 1.2 ) }
    dend_3 { pt3dadd( 78.9046, 64.5253, 49.4976, 0.72 ) }
    dend_3 { pt3dadd( 81.1216, 63.8866, 46.5287, 0.48 ) }
    dend_3 { pt3dadd( 82.361, 63.3689, 44.7203, 0.12 ) }
    dend_3 { pt3dadd( 82.7459, 63.1699, 44.1334, 0.6 ) }
    dend_3 { pt3dadd( 83.3847, 62.7588, 43.1204, 1.2 ) }
    dend_3 { pt3dadd( 85.9077, 60.7873, 39.1047, 0.48 ) }
    dend_3 { pt3dadd( 86.1469, 60.5648, 38.619, 0.48 ) }
    dend_3 { pt3dadd( 86.3361, 60.3067, 38.0353, 0.24 ) }
    dend_3 { pt3dadd( 92.7201, 64.9094, 31.7085, 0.24 ) }
    dend_3 { pt3dadd( 96.932, 70.5818, 24.4231, 0.24 ) }
    dend_3 { pt3dadd( 100.507, 76.2593, 16.8084, 0.24 ) }
    dend_3 { pt3dadd( 105.297, 83.021, 10.8433, 0.24 ) }
    dend_3 { pt3dadd( 110.841, 87.7405, 3.83884, 0.24 ) }
    dend_3 { pt3dadd( 116.113, 90.4961, -4.24328, 0.24 ) }
    dend_3 { pt3dadd( 121.183, 94.5461, -11.9512, 0.24 ) }
    dend_3 { pt3dadd( 125.689, 98.2911, -20.135, 0.24 ) }
    dend_3 { pt3dadd( 128.595, 102.93, -28.6229, 0.24 ) }
    // Section: dend_21, id: dend_21, parent: dend_19 (entry count 69/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( -36.8106, -10.754, 12.8277, 1.08 ) }
    dend_21 { pt3dadd( -38.4398, -12.839, 12.6196, 1.08 ) }
    dend_21 { pt3dadd( -39.1912, -13.8997, 12.67, 1.08 ) }
    dend_21 { pt3dadd( -39.7161, -14.6186, 12.7012, 1.08 ) }
    dend_21 { pt3dadd( -41.0672, -16.3959, 12.7727, 1.08 ) }
    dend_21 { pt3dadd( -42.003, -17.564, 12.8166, 1.08 ) }
    dend_21 { pt3dadd( -44.1821, -20.1774, 12.9106, 1.08 ) }
    dend_21 { pt3dadd( -44.9566, -21.0459, 13.0094, 1.08 ) }
    dend_21 { pt3dadd( -46.5841, -22.8334, 13.3085, 1.08 ) }
    dend_21 { pt3dadd( -47.324, -23.6688, 13.52, 0.84 ) }
    dend_21 { pt3dadd( -48.0677, -24.5314, 13.8076, 0.84 ) }
    dend_21 { pt3dadd( -48.3285, -24.8413, 13.9143, 1.08 ) }
    dend_21 { pt3dadd( -49.0026, -25.6863, 14.1761, 0.48 ) }
    dend_21 { pt3dadd( -50.3455, -27.4161, 14.8415, 1.44 ) }
    dend_21 { pt3dadd( -51.5342, -29.0952, 15.6058, 0.72 ) }
    dend_21 { pt3dadd( -51.9672, -29.7407, 15.866, 0.72 ) }
    dend_21 { pt3dadd( -52.2913, -30.2448, 16.1138, 0.72 ) }
    dend_21 { pt3dadd( -52.6943, -30.8359, 16.4273, 0.72 ) }
    dend_21 { pt3dadd( -53.3157, -31.5769, 16.937, 1.08 ) }
    dend_21 { pt3dadd( -53.8799, -32.102, 17.3479, 1.08 ) }
    dend_21 { pt3dadd( -54.7312, -32.8344, 17.9701, 1.56 ) }
    dend_21 { pt3dadd( -57.2058, -35.0097, 19.9773, 0.96 ) }
    dend_21 { pt3dadd( -58.1628, -35.9242, 20.8615, 1.56 ) }
    dend_21 { pt3dadd( -59.6488, -37.4958, 22.3678, 0.84 ) }
    dend_21 { pt3dadd( -60.4996, -38.5331, 23.3285, 0.84 ) }
    dend_21 { pt3dadd( -60.9188, -39.1425, 23.8401, 0.84 ) }
    dend_21 { pt3dadd( -61.6351, -40.426, 24.7487, 1.44 ) }
    dend_21 { pt3dadd( -62.179, -41.7073, 25.346, 0.84 ) }
    dend_21 { pt3dadd( -62.4609, -42.6518, 25.7414, 0.84 ) }
    dend_21 { pt3dadd( -62.529, -43.0185, 25.8747, 0.84 ) }
    dend_21 { pt3dadd( -62.7216, -44.4897, 26.4037, 1.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_13()
}

proc basic_shape_13() {
    dend_21 { pt3dadd( -62.953, -47.1696, 27.3234, 1.08 ) }
    dend_21 { pt3dadd( -62.93, -48.7642, 27.9524, 1.68 ) }
    dend_21 { pt3dadd( -62.649, -50.1802, 28.7354, 1.2 ) }
    dend_21 { pt3dadd( -62.1388, -51.1485, 29.5282, 0.72 ) }
    dend_21 { pt3dadd( -61.8034, -51.5397, 30.0994, 0.72 ) }
    dend_21 { pt3dadd( -61.1946, -52.0727, 31.1858, 1.32 ) }
    dend_21 { pt3dadd( -59.6222, -53.1845, 33.986, 1.32 ) }
    dend_21 { pt3dadd( -58.5503, -53.8955, 35.9667, 1.32 ) }
    dend_21 { pt3dadd( -57.5962, -54.5242, 37.8216, 1.8 ) }
    dend_21 { pt3dadd( -55.1601, -56.1402, 42.8031, 0.96 ) }
    dend_21 { pt3dadd( -54.8827, -56.3229, 43.3553, 0.96 ) }
    dend_21 { pt3dadd( -54.609, -56.5322, 43.9022, 0.48 ) }
    dend_21 { pt3dadd( -54.2832, -56.8763, 44.6101, 1.2 ) }
    dend_21 { pt3dadd( -54.0946, -57.1295, 45.0382, 1.2 ) }
    dend_21 { pt3dadd( -53.7716, -57.542, 45.6437, 1.2 ) }
    dend_21 { pt3dadd( -52.6065, -58.5516, 46.8918, 0.72 ) }
    dend_21 { pt3dadd( -52.0317, -58.9991, 47.4714, 0.72 ) }
    dend_21 { pt3dadd( -49.2343, -61.1733, 50.1431, 0.72 ) }
    dend_21 { pt3dadd( -48.8513, -61.4772, 50.4383, 0.72 ) }
    dend_21 { pt3dadd( -47.829, -62.3909, 51.0454, 0.72 ) }
    dend_21 { pt3dadd( -46.9627, -63.2537, 51.5604, 0.72 ) }
    dend_21 { pt3dadd( -46.4901, -63.7885, 51.8178, 0.72 ) }
    dend_21 { pt3dadd( -45.5895, -64.9091, 52.3137, 0.48 ) }
    dend_21 { pt3dadd( -44.2138, -66.8824, 52.9728, 1.68 ) }
    dend_21 { pt3dadd( -43.6886, -67.8427, 53.3989, 1.68 ) }
    dend_21 { pt3dadd( -42.2149, -71.0688, 55.2502, 1.2 ) }
    dend_21 { pt3dadd( -41.7941, -71.9687, 55.9043, 1.2 ) }
    dend_21 { pt3dadd( -41.1798, -73.0968, 56.9062, 0.96 ) }
    dend_21 { pt3dadd( -40.677, -73.8162, 57.695, 0.96 ) }
    dend_21 { pt3dadd( -39.719, -74.8988, 59.1881, 1.32 ) }
    dend_21 { pt3dadd( -38.5567, -75.9007, 60.6852, 1.32 ) }
    dend_21 { pt3dadd( -37.4746, -76.6962, 61.8069, 0.72 ) }
    dend_21 { pt3dadd( -36.8555, -77.1012, 62.414, 0.72 ) }
    dend_21 { pt3dadd( -35.7694, -77.79, 63.382, 1.2 ) }
    dend_21 { pt3dadd( -33.7109, -79.1175, 65.1941, 1.2 ) }
    dend_21 { pt3dadd( -33.0871, -79.6411, 65.7723, 1.2 ) }
    dend_21 { pt3dadd( -32.5825, -80.3239, 66.3719, 0.48 ) }
    dend_21 { pt3dadd( -32.1901, -81.2376, 67.0939, 0.72 ) }
    dend_21 { pt3dadd( -31.9341, -82.1872, 67.8417, 1.2 ) }
    dend_21 { pt3dadd( -31.8938, -82.4096, 68.0231, 1.2 ) }
    dend_21 { pt3dadd( -31.7723, -83.9297, 69.5413, 0.6 ) }
    dend_21 { pt3dadd( -31.691, -85.1799, 71.1819, 0.36 ) }
    dend_21 { pt3dadd( -31.6028, -86.0168, 72.422, 1.32 ) }
    dend_21 { pt3dadd( -31.5136, -86.6725, 73.4414, 1.32 ) }
    dend_21 { pt3dadd( -31.3378, -87.7524, 75.193, 1.32 ) }
    dend_21 { pt3dadd( -30.9587, -89.924, 78.6982, 0.48 ) }
    dend_21 { pt3dadd( -30.5272, -92.0788, 82.2209, 0.6 ) }
    dend_21 { pt3dadd( -30.3944, -92.654, 83.163, 0.6 ) }
    dend_21 { pt3dadd( -30.3162, -93.0836, 83.8657, 0.24 ) }
    dend_21 { pt3dadd( -30.2989, -93.4313, 84.4014, 0.24 ) }
    dend_21 { pt3dadd( -30.5184, -94.1587, 85.4408, 0.24 ) }
    dend_21 { pt3dadd( -30.6144, -94.2637, 85.5615, 0.96 ) }
    dend_21 { pt3dadd( -31.5666, -94.9323, 86.3374, 0.6 ) }
    dend_21 { pt3dadd( -32.9198, -95.7781, 87.4497, 0.12 ) }
    dend_21 { pt3dadd( -33.6454, -96.1906, 88.0445, 0.72 ) }
    dend_21 { pt3dadd( -35.7872, -97.3483, 89.849, 0.24 ) }
    dend_21 { pt3dadd( -37.0474, -98.0163, 90.9566, 0.24 ) }
    dend_21 { pt3dadd( -37.9449, -98.5119, 91.7585, 0.84 ) }
    dend_21 { pt3dadd( -39.1654, -99.2471, 92.8725, 0.48 ) }
    dend_21 { pt3dadd( -39.7655, -99.5755, 93.3558, 0.84 ) }
    dend_21 { pt3dadd( -38.6608, -107.54, 99.7774, 0.84 ) }
    dend_21 { pt3dadd( -38.6369, -115.56, 106.232, 0.84 ) }
    dend_21 { pt3dadd( -39.5297, -123.905, 112.235, 0.84 ) }
    dend_21 { pt3dadd( -39.788, -131.341, 119.291, 0.84 ) }
    // Section: dend_20, id: dend_20, parent: dend_19 (entry count 64/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( -36.8106, -10.754, 12.8277, 1.32 ) }
    dend_20 { pt3dadd( -38.2768, -10.1698, 14.7266, 1.32 ) }
    dend_20 { pt3dadd( -39.616, -9.41152, 16.5095, 1.32 ) }
    dend_20 { pt3dadd( -41.1799, -8.32318, 18.6774, 0.96 ) }
    dend_20 { pt3dadd( -41.6321, -8.01778, 19.2924, 0.96 ) }
    dend_20 { pt3dadd( -42.8101, -7.29253, 20.9397, 1.56 ) }
    dend_20 { pt3dadd( -44.2216, -6.5734, 22.9289, 0.72 ) }
    dend_20 { pt3dadd( -44.6581, -6.37682, 23.6283, 0.72 ) }
    dend_20 { pt3dadd( -45.6716, -6.15173, 25.1654, 1.32 ) }
    dend_20 { pt3dadd( -46.4638, -6.15812, 26.2753, 1.32 ) }
    dend_20 { pt3dadd( -47.4827, -6.3918, 27.6141, 1.32 ) }
    dend_20 { pt3dadd( -48.5286, -6.82305, 28.8187, 1.32 ) }
    dend_20 { pt3dadd( -50.2537, -7.73464, 30.6348, 1.68 ) }
    dend_20 { pt3dadd( -51.937, -8.72098, 32.2676, 1.08 ) }
    dend_20 { pt3dadd( -52.8001, -9.23017, 32.9817, 1.08 ) }
    dend_20 { pt3dadd( -53.2788, -9.47906, 33.3234, 1.08 ) }
    dend_20 { pt3dadd( -54.372, -9.93344, 33.91, 1.08 ) }
    dend_20 { pt3dadd( -56.322, -10.5421, 34.673, 1.08 ) }
    dend_20 { pt3dadd( -57.7636, -10.8831, 35.1778, 1.08 ) }
    dend_20 { pt3dadd( -59.2049, -11.0791, 35.7975, 1.08 ) }
    dend_20 { pt3dadd( -59.9058, -11.0997, 36.2072, 1.08 ) }
    dend_20 { pt3dadd( -61.5151, -10.9858, 37.5284, 1.32 ) }
    dend_20 { pt3dadd( -62.3435, -10.8313, 38.5776, 1.32 ) }
    dend_20 { pt3dadd( -63.8252, -10.3533, 41.5418, 1.32 ) }
    dend_20 { pt3dadd( -64.398, -10.1287, 43.4534, 1.68 ) }
    dend_20 { pt3dadd( -64.7083, -10.0642, 45.3143, 1.68 ) }
    dend_20 { pt3dadd( -64.9558, -10.2019, 47.7678, 1.68 ) }
    dend_20 { pt3dadd( -65.1008, -10.4851, 50.4174, 1.44 ) }
    dend_20 { pt3dadd( -65.1836, -10.6647, 51.6688, 1.44 ) }
    dend_20 { pt3dadd( -65.3343, -10.8793, 52.9301, 1.44 ) }
    dend_20 { pt3dadd( -65.8062, -11.2004, 54.6807, 1.44 ) }
    dend_20 { pt3dadd( -66.5071, -11.3718, 56.0794, 1.44 ) }
    dend_20 { pt3dadd( -68.2123, -11.2565, 58.1646, 1.44 ) }
    dend_20 { pt3dadd( -69.743, -10.9585, 59.6908, 1.44 ) }
    dend_20 { pt3dadd( -70.5297, -10.7417, 60.4042, 1.44 ) }
    dend_20 { pt3dadd( -71.5879, -10.3581, 61.3476, 1.08 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_14()
}

proc basic_shape_14() {
    dend_20 { pt3dadd( -72.1907, -10.1406, 61.8484, 1.08 ) }
    dend_20 { pt3dadd( -73.9116, -9.73369, 63.3164, 1.56 ) }
    dend_20 { pt3dadd( -75.0165, -9.7571, 64.2558, 1.56 ) }
    dend_20 { pt3dadd( -75.8208, -9.91967, 64.9496, 1.56 ) }
    dend_20 { pt3dadd( -77.003, -10.2827, 65.9299, 2.04 ) }
    dend_20 { pt3dadd( -78.3419, -10.7504, 67.2143, 1.08 ) }
    dend_20 { pt3dadd( -80.0314, -11.2938, 68.9215, 1.08 ) }
    dend_20 { pt3dadd( -81.2342, -11.5792, 70.1779, 1.08 ) }
    dend_20 { pt3dadd( -82.1392, -11.6935, 71.1431, 1.08 ) }
    dend_20 { pt3dadd( -84.2693, -11.707, 73.4015, 1.56 ) }
    dend_20 { pt3dadd( -88.1932, -11.2777, 77.6497, 1.08 ) }
    dend_20 { pt3dadd( -88.8135, -11.1054, 78.3177, 1.08 ) }
    dend_20 { pt3dadd( -90.0159, -10.6174, 79.5366, 1.56 ) }
    dend_20 { pt3dadd( -90.687, -10.2676, 80.2535, 1.56 ) }
    dend_20 { pt3dadd( -91.3269, -9.87001, 81.0258, 1.56 ) }
    dend_20 { pt3dadd( -93.3447, -8.43688, 83.6836, 0.96 ) }
    dend_20 { pt3dadd( -94.1152, -7.78071, 84.5923, 0.96 ) }
    dend_20 { pt3dadd( -94.5479, -7.39198, 85.1121, 0.96 ) }
    dend_20 { pt3dadd( -95.7722, -6.30337, 86.6136, 1.44 ) }
    dend_20 { pt3dadd( -96.674, -5.63119, 87.7394, 1.44 ) }
    dend_20 { pt3dadd( -97.7069, -5.08789, 88.9789, 0.72 ) }
    dend_20 { pt3dadd( -98.2855, -4.8891, 89.5845, 0.72 ) }
    dend_20 { pt3dadd( -99.2999, -4.68335, 90.5586, 0.72 ) }
    dend_20 { pt3dadd( -100.75, -4.47369, 91.8439, 1.2 ) }
    dend_20 { pt3dadd( -102.384, -4.29212, 93.1577, 1.44 ) }
    dend_20 { pt3dadd( -103.611, -4.13484, 94.0656, 1.44 ) }
    dend_20 { pt3dadd( -104.486, -4.0, 94.6896, 0.72 ) }
    dend_20 { pt3dadd( -105.513, -3.79317, 95.4118, 0.72 ) }
    dend_20 { pt3dadd( -107.222, -3.3288, 96.5691, 1.2 ) }
    dend_20 { pt3dadd( -108.032, -3.05155, 97.0379, 1.2 ) }
    dend_20 { pt3dadd( -109.184, -2.71648, 97.5664, 1.2 ) }
    dend_20 { pt3dadd( -109.999, -2.65217, 97.8284, 1.2 ) }
    dend_20 { pt3dadd( -110.839, -2.69061, 98.0451, 1.2 ) }
    dend_20 { pt3dadd( -111.388, -2.74784, 98.1589, 1.2 ) }
    dend_20 { pt3dadd( -112.019, -2.83753, 98.2538, 1.44 ) }
    dend_20 { pt3dadd( -114.358, -3.13231, 98.5673, 0.96 ) }
    dend_20 { pt3dadd( -117.003, -3.38396, 99.0457, 0.96 ) }
    dend_20 { pt3dadd( -118.886, -3.5046, 99.3323, 0.72 ) }
    dend_20 { pt3dadd( -119.418, -3.52102, 99.3956, 1.32 ) }
    dend_20 { pt3dadd( -120.803, -3.54056, 99.522, 0.84 ) }
    dend_20 { pt3dadd( -122.307, -3.5477, 99.6371, 0.84 ) }
    dend_20 { pt3dadd( -124.361, -3.56103, 99.7236, 1.08 ) }
    dend_20 { pt3dadd( -126.974, -3.5118, 99.788, 1.08 ) }
    dend_20 { pt3dadd( -129.188, -3.50994, 99.7625, 0.6 ) }
    dend_20 { pt3dadd( -129.756, -3.50878, 99.7441, 0.6 ) }
    dend_20 { pt3dadd( -137.684, -1.86143, 105.633, 0.6 ) }
    // Section: dend_14, id: dend_14, parent: dend_12 (entry count 46/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 74.8762, -60.3486, -16.1626, 0.84 ) }
    dend_14 { pt3dadd( 74.9743, -61.7449, -15.9837, 0.84 ) }
    dend_14 { pt3dadd( 75.0825, -62.5744, -15.8866, 0.72 ) }
    dend_14 { pt3dadd( 75.2895, -63.6297, -15.7663, 1.44 ) }
    dend_14 { pt3dadd( 75.7272, -65.3831, -15.5752, 0.84 ) }
    dend_14 { pt3dadd( 76.1704, -66.807, -15.4304, 0.84 ) }
    dend_14 { pt3dadd( 76.7897, -68.3842, -15.3009, 1.32 ) }
    dend_14 { pt3dadd( 77.2316, -69.2796, -15.2371, 1.32 ) }
    dend_14 { pt3dadd( 77.6938, -70.129, -15.2572, 0.72 ) }
    dend_14 { pt3dadd( 78.1129, -70.8529, -15.3344, 0.72 ) }
    dend_14 { pt3dadd( 78.7792, -71.9639, -15.5322, 1.32 ) }
    dend_14 { pt3dadd( 80.3066, -74.5177, -16.0759, 0.72 ) }
    dend_14 { pt3dadd( 80.6808, -75.2126, -16.2389, 0.72 ) }
    dend_14 { pt3dadd( 81.8733, -77.667, -16.8316, 0.72 ) }
    dend_14 { pt3dadd( 82.4635, -79.0468, -17.1559, 1.44 ) }
    dend_14 { pt3dadd( 82.8632, -80.0704, -17.405, 0.96 ) }
    dend_14 { pt3dadd( 83.1082, -80.7931, -17.5747, 0.96 ) }
    dend_14 { pt3dadd( 83.4225, -81.9153, -17.8167, 1.44 ) }
    dend_14 { pt3dadd( 83.6112, -82.6774, -17.9471, 0.96 ) }
    dend_14 { pt3dadd( 83.9412, -84.2413, -18.1124, 1.68 ) }
    dend_14 { pt3dadd( 84.2529, -86.2886, -18.3854, 1.08 ) }
    dend_14 { pt3dadd( 84.468, -87.8379, -18.6566, 0.6 ) }
    dend_14 { pt3dadd( 84.5568, -88.5661, -18.8344, 0.6 ) }
    dend_14 { pt3dadd( 84.6764, -89.7046, -19.1292, 0.6 ) }
    dend_14 { pt3dadd( 84.6972, -89.9568, -19.1953, 0.6 ) }
    dend_14 { pt3dadd( 84.8305, -92.0459, -19.7454, 1.2 ) }
    dend_14 { pt3dadd( 84.9213, -93.4602, -20.0729, 0.48 ) }
    dend_14 { pt3dadd( 85.0775, -95.0017, -20.4106, 0.6 ) }
    dend_14 { pt3dadd( 85.3152, -96.6698, -20.7431, 1.2 ) }
    dend_14 { pt3dadd( 85.4135, -97.3268, -20.8559, 1.2 ) }
    dend_14 { pt3dadd( 85.5957, -98.7436, -21.0294, 0.72 ) }
    dend_14 { pt3dadd( 85.7412, -100.202, -21.1152, 1.44 ) }
    dend_14 { pt3dadd( 85.7658, -101.165, -21.0814, 1.44 ) }
    dend_14 { pt3dadd( 85.7604, -101.763, -21.0264, 0.84 ) }
    dend_14 { pt3dadd( 85.7447, -102.655, -20.9432, 0.84 ) }
    dend_14 { pt3dadd( 85.741, -104.069, -20.7707, 1.44 ) }
    dend_14 { pt3dadd( 85.7463, -104.784, -20.6664, 1.44 ) }
    dend_14 { pt3dadd( 85.7399, -107.023, -20.2887, 0.72 ) }
    dend_14 { pt3dadd( 85.7192, -108.067, -20.1237, 0.72 ) }
    dend_14 { pt3dadd( 85.656, -109.297, -19.9242, 0.72 ) }
    dend_14 { pt3dadd( 85.4946, -111.025, -19.6492, 0.72 ) }
    dend_14 { pt3dadd( 85.3379, -112.061, -19.5027, 0.72 ) }
    dend_14 { pt3dadd( 84.9889, -113.603, -19.3298, 0.72 ) }
    dend_14 { pt3dadd( 84.5544, -115.033, -19.2342, 0.72 ) }
    dend_14 { pt3dadd( 84.0901, -116.312, -19.1945, 1.44 ) }
    dend_14 { pt3dadd( 83.6588, -117.436, -19.1937, 1.44 ) }
    dend_14 { pt3dadd( 83.2007, -118.738, -19.2263, 0.72 ) }
    dend_14 { pt3dadd( 82.8089, -120.179, -19.3338, 0.72 ) }
    dend_14 { pt3dadd( 82.5307, -121.604, -19.504, 0.72 ) }
    dend_14 { pt3dadd( 82.27, -123.382, -19.7471, 1.2 ) }
    dend_14 { pt3dadd( 82.1601, -124.606, -19.9911, 1.2 ) }
    dend_14 { pt3dadd( 82.1368, -125.949, -20.2989, 0.36 ) }
    dend_14 { pt3dadd( 82.2447, -127.29, -20.7999, 0.72 ) }
    dend_14 { pt3dadd( 82.3129, -127.774, -21.0684, 1.08 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_15()
}

proc basic_shape_15() {
    dend_14 { pt3dadd( 82.4273, -128.536, -21.5852, 1.08 ) }
    dend_14 { pt3dadd( 82.7124, -130.154, -22.8877, 0.6 ) }
    dend_14 { pt3dadd( 82.9165, -131.16, -23.8281, 1.2 ) }
    dend_14 { pt3dadd( 83.5462, -133.808, -26.5847, 1.92 ) }
    dend_14 { pt3dadd( 83.9839, -135.391, -28.4771, 0.96 ) }
    dend_14 { pt3dadd( 84.1224, -135.886, -29.1394, 0.96 ) }
    dend_14 { pt3dadd( 84.3885, -137.04, -30.8361, 0.96 ) }
    dend_14 { pt3dadd( 84.4811, -137.539, -31.628, 0.96 ) }
    dend_14 { pt3dadd( 84.5573, -137.965, -32.3145, 0.96 ) }
    dend_14 { pt3dadd( 84.9156, -139.291, -34.404, 0.96 ) }
    dend_14 { pt3dadd( 85.2662, -140.079, -35.6633, 0.96 ) }
    dend_14 { pt3dadd( 85.9824, -141.318, -37.6158, 1.32 ) }
    dend_14 { pt3dadd( 86.822, -142.698, -39.7021, 0.6 ) }
    dend_14 { pt3dadd( 87.3229, -143.502, -40.865, 0.6 ) }
    dend_14 { pt3dadd( 88.0254, -144.498, -42.2595, 0.96 ) }
    dend_14 { pt3dadd( 88.3923, -144.926, -42.8137, 0.96 ) }
    dend_14 { pt3dadd( 89.6782, -146.111, -44.388, 1.32 ) }
    dend_14 { pt3dadd( 91.1907, -147.217, -45.9478, 1.08 ) }
    // Section: dend_13, id: dend_13, parent: dend_12 (entry count 18/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 74.8762, -60.3486, -16.1626, 1.08 ) }
    dend_13 { pt3dadd( 79.2244, -64.2476, 8.5377, 1.08 ) }
    dend_13 { pt3dadd( 79.5706, -64.5488, 10.1917, 1.08 ) }
    dend_13 { pt3dadd( 80.3212, -65.1451, 13.1648, 1.32 ) }
    dend_13 { pt3dadd( 80.6256, -65.3664, 14.1991, 1.32 ) }
    dend_13 { pt3dadd( 81.4875, -65.9458, 16.7831, 1.32 ) }
    dend_13 { pt3dadd( 82.6642, -66.693, 19.9875, 0.84 ) }
    dend_13 { pt3dadd( 83.1969, -66.976, 20.4319, 0.84 ) }
    dend_13 { pt3dadd( 84.9433, -67.825, 21.682, 1.2 ) }
    dend_13 { pt3dadd( 85.8877, -68.2684, 22.2375, 1.2 ) }
    dend_13 { pt3dadd( 86.6298, -68.6419, 22.6129, 0.72 ) }
    dend_13 { pt3dadd( 86.9698, -68.8499, 22.7318, 0.72 ) }
    dend_13 { pt3dadd( 88.5103, -70.0753, 23.1152, 1.2 ) }
    dend_13 { pt3dadd( 89.2059, -70.8108, 23.291, 1.2 ) }
    dend_13 { pt3dadd( 89.8012, -71.6648, 23.4359, 1.2 ) }
    dend_13 { pt3dadd( 90.7602, -73.36, 23.7015, 1.56 ) }
    dend_13 { pt3dadd( 91.4964, -74.7852, 23.9205, 1.2 ) }
    dend_13 { pt3dadd( 92.4677, -76.5848, 24.1915, 1.2 ) }
    dend_13 { pt3dadd( 93.2873, -78.008, 24.3958, 0.84 ) }
    dend_13 { pt3dadd( 94.1188, -79.3227, 24.59, 0.84 ) }
    dend_13 { pt3dadd( 94.5791, -79.9712, 24.6862, 0.84 ) }
    dend_13 { pt3dadd( 95.2386, -80.8183, 24.9014, 0.84 ) }
    dend_13 { pt3dadd( 96.5515, -82.2426, 25.4883, 1.32 ) }
    dend_13 { pt3dadd( 97.1365, -82.8242, 25.7854, 1.32 ) }
    dend_13 { pt3dadd( 97.6246, -83.2998, 26.0627, 1.32 ) }
    dend_13 { pt3dadd( 98.0031, -83.6719, 26.2836, 1.32 ) }
    dend_13 { pt3dadd( 100.234, -86.0819, 27.4356, 0.72 ) }
    dend_13 { pt3dadd( 101.568, -87.7668, 28.0548, 1.2 ) }
    dend_13 { pt3dadd( 102.149, -88.6241, 28.2949, 1.2 ) }
    dend_13 { pt3dadd( 102.835, -89.7732, 28.4717, 0.96 ) }
    dend_13 { pt3dadd( 103.483, -91.0217, 28.5066, 1.44 ) }
    dend_13 { pt3dadd( 104.523, -93.185, 28.375, 0.84 ) }
    dend_13 { pt3dadd( 105.057, -94.3514, 28.1496, 0.84 ) }
    dend_13 { pt3dadd( 105.448, -95.1581, 27.972, 0.84 ) }
    dend_13 { pt3dadd( 106.291, -96.7969, 27.7452, 0.84 ) }
    dend_13 { pt3dadd( 106.789, -97.7187, 27.7089, 0.84 ) }
    dend_13 { pt3dadd( 107.768, -99.3256, 27.9429, 0.84 ) }
    dend_13 { pt3dadd( 108.468, -100.325, 28.287, 0.84 ) }
    dend_13 { pt3dadd( 109.223, -101.372, 28.7079, 0.84 ) }
    dend_13 { pt3dadd( 110.186, -102.635, 29.2581, 1.2 ) }
    dend_13 { pt3dadd( 110.683, -103.231, 29.5345, 1.2 ) }
    dend_13 { pt3dadd( 112.092, -104.924, 30.2463, 1.56 ) }
    dend_13 { pt3dadd( 113.007, -106.13, 30.6506, 1.2 ) }
    dend_13 { pt3dadd( 113.983, -107.504, 31.0633, 0.72 ) }
    dend_13 { pt3dadd( 115.176, -109.2, 31.5128, 0.72 ) }
    dend_13 { pt3dadd( 115.976, -110.238, 31.7275, 0.72 ) }
    dend_13 { pt3dadd( 116.564, -110.974, 31.7951, 0.72 ) }
    dend_13 { pt3dadd( 117.739, -112.453, 31.7389, 1.2 ) }
    dend_13 { pt3dadd( 118.349, -113.22, 31.6215, 1.2 ) }
    dend_13 { pt3dadd( 118.774, -113.725, 31.5107, 1.2 ) }
    dend_13 { pt3dadd( 119.993, -115.247, 31.1992, 0.84 ) }
    dend_13 { pt3dadd( 121.479, -117.161, 30.8773, 1.2 ) }
    dend_13 { pt3dadd( 121.799, -117.557, 30.8058, 1.2 ) }
    dend_13 { pt3dadd( 123.168, -119.167, 30.5076, 1.2 ) }
    dend_13 { pt3dadd( 125.388, -121.72, 30.1978, 1.32 ) }
    dend_13 { pt3dadd( 126.833, -123.382, 30.1036, 0.84 ) }
    dend_13 { pt3dadd( 128.05, -124.822, 30.1285, 0.84 ) }
    dend_13 { pt3dadd( 129.317, -126.298, 30.2849, 0.84 ) }
    dend_13 { pt3dadd( 130.051, -127.156, 30.3988, 0.84 ) }
    dend_13 { pt3dadd( 131.589, -128.987, 30.7328, 0.72 ) }
    dend_13 { pt3dadd( 132.102, -129.651, 30.8551, 0.72 ) }
    dend_13 { pt3dadd( 132.513, -130.152, 30.9259, 0.72 ) }
    dend_13 { pt3dadd( 132.751, -130.434, 30.9672, 0.72 ) }
    dend_13 { pt3dadd( 133.599, -131.443, 31.105, 1.2 ) }
    dend_13 { pt3dadd( 134.128, -132.102, 31.1261, 1.2 ) }
    dend_13 { pt3dadd( 134.502, -132.55, 31.0988, 0.72 ) }
    dend_13 { pt3dadd( 135.639, -133.845, 31.0329, 1.32 ) }
    dend_13 { pt3dadd( 136.732, -135.015, 30.9897, 1.32 ) }
    dend_13 { pt3dadd( 137.244, -135.548, 30.9789, 0.72 ) }
    dend_13 { pt3dadd( 138.28, -136.604, 30.9415, 0.72 ) }
    dend_13 { pt3dadd( 139.216, -137.509, 30.8847, 0.72 ) }
    dend_13 { pt3dadd( 140.113, -138.301, 30.7912, 1.2 ) }
    dend_13 { pt3dadd( 140.974, -139.006, 30.6705, 0.72 ) }
    dend_13 { pt3dadd( 141.985, -139.787, 30.5074, 1.08 ) }
    dend_13 { pt3dadd( 143.449, -140.86, 30.2562, 0.6 ) }
    dend_13 { pt3dadd( 144.5, -141.622, 30.0364, 0.96 ) }
    dend_13 { pt3dadd( 145.556, -142.459, 29.7719, 0.96 ) }
    dend_13 { pt3dadd( 146.389, -143.171, 29.5444, 0.96 ) }
    dend_13 { pt3dadd( 147.516, -144.227, 29.1774, 1.44 ) }
    dend_13 { pt3dadd( 147.97, -144.663, 29.0246, 1.44 ) }
    dend_13 { pt3dadd( 149.217, -145.879, 28.6364, 0.72 ) }
    dend_13 { pt3dadd( 149.82, -146.495, 28.5049, 0.72 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_16()
}

proc basic_shape_16() {
    dend_13 { pt3dadd( 150.69, -147.365, 28.2948, 1.2 ) }
    dend_13 { pt3dadd( 152.349, -148.857, 27.8612, 0.72 ) }
    dend_13 { pt3dadd( 153.714, -149.952, 27.5016, 1.32 ) }
    dend_13 { pt3dadd( 154.879, -150.882, 27.1663, 1.32 ) }
    dend_13 { pt3dadd( 156.526, -152.172, 26.685, 0.6 ) }
    dend_13 { pt3dadd( 158.699, -153.945, 25.9782, 0.6 ) }
    dend_13 { pt3dadd( 159.496, -154.772, 25.5873, 0.6 ) }
    dend_13 { pt3dadd( 159.795, -155.186, 25.3767, 0.6 ) }
    dend_13 { pt3dadd( 160.693, -156.801, 24.3751, 1.2 ) }
    dend_13 { pt3dadd( 161.054, -157.576, 24.0124, 1.2 ) }
    dend_13 { pt3dadd( 161.362, -158.322, 23.7712, 1.2 ) }
    dend_13 { pt3dadd( 162.084, -160.293, 23.6057, 0.84 ) }
    dend_13 { pt3dadd( 162.278, -160.863, 23.598, 0.84 ) }
    dend_13 { pt3dadd( 162.723, -162.079, 23.6616, 0.48 ) }
    dend_13 { pt3dadd( 164.041, -165.206, 24.2024, 1.32 ) }
    dend_13 { pt3dadd( 164.352, -165.922, 24.333, 1.32 ) }
    dend_13 { pt3dadd( 164.79, -166.804, 24.5021, 0.6 ) }
    dend_13 { pt3dadd( 164.992, -167.161, 24.5731, 0.6 ) }
    dend_13 { pt3dadd( 165.207, -167.513, 24.6229, 0.6 ) }
    dend_13 { pt3dadd( 166.33, -169.249, 24.7527, 1.2 ) }
    dend_13 { pt3dadd( 167.743, -171.295, 24.6486, 1.56 ) }
    dend_13 { pt3dadd( 168.636, -172.554, 24.5653, 1.56 ) }
    dend_13 { pt3dadd( 169.461, -173.703, 24.4764, 0.84 ) }
    dend_13 { pt3dadd( 169.959, -174.38, 24.416, 0.6 ) }
    dend_13 { pt3dadd( 170.927, -175.657, 24.2895, 0.6 ) }
    dend_13 { pt3dadd( 171.695, -176.611, 24.3131, 0.72 ) }
    dend_13 { pt3dadd( 172.106, -177.107, 24.4167, 0.72 ) }
    dend_13 { pt3dadd( 173.088, -178.285, 24.7845, 1.32 ) }
    dend_13 { pt3dadd( 173.787, -179.112, 25.1124, 0.84 ) }
    dend_13 { pt3dadd( 174.897, -180.49, 25.7136, 1.44 ) }
    dend_13 { pt3dadd( 177.087, -183.238, 27.0253, 0.6 ) }
    dend_13 { pt3dadd( 177.758, -184.086, 27.4461, 0.6 ) }
    dend_13 { pt3dadd( 178.216, -184.665, 27.7174, 0.6 ) }
    dend_13 { pt3dadd( 178.665, -185.264, 27.9427, 0.6 ) }
    dend_13 { pt3dadd( 179.689, -186.774, 28.3061, 0.84 ) }
    dend_13 { pt3dadd( 179.932, -187.185, 28.4086, 0.96 ) }
    dend_13 { pt3dadd( 180.525, -188.239, 28.6329, 0.48 ) }
    dend_13 { pt3dadd( 181.354, -189.616, 28.8878, 1.08 ) }
    dend_13 { pt3dadd( 182.26, -191.0, 29.1235, 0.72 ) }
    dend_13 { pt3dadd( 183.023, -192.072, 29.3009, 0.72 ) }
    dend_13 { pt3dadd( 185.835, -195.556, 29.8399, 1.32 ) }
    dend_13 { pt3dadd( 186.131, -195.927, 29.8904, 1.32 ) }
    dend_13 { pt3dadd( 188.042, -198.269, 29.9903, 1.08 ) }
    dend_13 { pt3dadd( 188.505, -198.758, 29.9582, 1.08 ) }
    dend_13 { pt3dadd( 188.899, -199.09, 29.8907, 0.84 ) }
    dend_13 { pt3dadd( 190.597, -200.245, 29.4039, 1.44 ) }
    dend_13 { pt3dadd( 191.507, -200.735, 29.0336, 1.44 ) }
    dend_13 { pt3dadd( 193.592, -201.689, 28.3294, 1.08 ) }
    dend_13 { pt3dadd( 194.658, -202.102, 28.0661, 1.08 ) }
    dend_13 { pt3dadd( 195.617, -202.443, 27.8399, 1.08 ) }
    dend_13 { pt3dadd( 196.475, -202.723, 27.6987, 1.08 ) }
    dend_13 { pt3dadd( 197.992, -203.108, 27.5627, 0.72 ) }
    dend_13 { pt3dadd( 199.079, -203.327, 27.5689, 0.72 ) }
    dend_13 { pt3dadd( 199.764, -203.429, 27.6504, 0.72 ) }
    dend_13 { pt3dadd( 201.356, -203.671, 27.7301, 1.32 ) }
    dend_13 { pt3dadd( 203.347, -203.974, 27.7423, 0.84 ) }
    dend_13 { pt3dadd( 205.148, -204.292, 27.6929, 1.44 ) }
    dend_13 { pt3dadd( 207.336, -204.753, 27.5826, 0.84 ) }
    dend_13 { pt3dadd( 208.873, -205.125, 27.4603, 1.44 ) }
    dend_13 { pt3dadd( 213.098, -206.238, 27.0845, 0.84 ) }
    dend_13 { pt3dadd( 213.885, -206.459, 27.0011, 0.84 ) }
    dend_13 { pt3dadd( 216.026, -207.122, 26.7228, 1.56 ) }
    dend_13 { pt3dadd( 218.586, -208.049, 26.4102, 0.72 ) }
    dend_13 { pt3dadd( 219.425, -208.396, 26.337, 1.32 ) }
    dend_13 { pt3dadd( 220.817, -209.032, 26.3198, 0.96 ) }
    dend_13 { pt3dadd( 221.535, -209.365, 26.4127, 0.96 ) }
    dend_13 { pt3dadd( 222.017, -209.597, 26.4805, 0.96 ) }
    dend_13 { pt3dadd( 223.512, -210.35, 26.7035, 1.44 ) }
    dend_13 { pt3dadd( 224.892, -211.056, 26.9016, 0.72 ) }
    dend_13 { pt3dadd( 226.101, -211.68, 27.0434, 0.72 ) }
    dend_13 { pt3dadd( 227.464, -212.453, 27.1576, 1.32 ) }
    dend_13 { pt3dadd( 228.079, -212.845, 27.213, 1.32 ) }
    dend_13 { pt3dadd( 229.134, -213.598, 27.3229, 0.72 ) }
    dend_13 { pt3dadd( 229.757, -214.084, 27.3928, 0.72 ) }
    dend_13 { pt3dadd( 230.91, -215.011, 27.5121, 1.2 ) }
    dend_13 { pt3dadd( 232.04, -215.898, 27.6437, 1.2 ) }
    dend_13 { pt3dadd( 233.056, -216.671, 27.7664, 0.48 ) }
    dend_13 { pt3dadd( 234.139, -217.478, 27.8583, 0.48 ) }
    dend_13 { pt3dadd( 235.301, -218.361, 27.9648, 1.08 ) }
    dend_13 { pt3dadd( 236.428, -219.215, 28.0654, 0.6 ) }
    dend_13 { pt3dadd( 237.605, -220.054, 28.1597, 0.6 ) }
    dend_13 { pt3dadd( 238.676, -220.746, 28.2207, 1.32 ) }
    dend_13 { pt3dadd( 239.997, -221.55, 28.2349, 0.72 ) }
    dend_13 { pt3dadd( 241.492, -222.434, 28.1949, 0.72 ) }
    dend_13 { pt3dadd( 248.558, -229.215, 31.0897, 0.72 ) }
    // Section: dend_6, id: dend_6, parent: dend_4 (entry count 85/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 63.0503, 48.1474, 59.4752, 0.48 ) }
    dend_6 { pt3dadd( 63.0084, 46.7636, 59.6475, 0.48 ) }
    dend_6 { pt3dadd( 62.9851, 45.9926, 59.7436, 0.48 ) }
    dend_6 { pt3dadd( 62.9374, 44.4155, 59.94, 0.96 ) }
    dend_6 { pt3dadd( 62.1575, 33.9483, 60.0649, 0.96 ) }
    dend_6 { pt3dadd( 60.6012, 23.6329, 61.0964, 0.96 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 91/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 63.0503, 48.1474, 59.4752, 0.84 ) }
    dend_5 { pt3dadd( 63.5834, 48.3522, 60.2058, 0.84 ) }
    dend_5 { pt3dadd( 64.193, 48.6491, 61.0428, 0.84 ) }
    dend_5 { pt3dadd( 65.9034, 49.6089, 63.1457, 1.08 ) }
    dend_5 { pt3dadd( 67.3837, 50.5613, 64.7544, 1.08 ) }
    dend_5 { pt3dadd( 68.3291, 51.2599, 65.6463, 0.84 ) }
    dend_5 { pt3dadd( 69.2026, 51.9918, 66.3609, 0.72 ) }
    dend_5 { pt3dadd( 70.0068, 52.7455, 66.8761, 0.72 ) }
    dend_5 { pt3dadd( 72.2019, 55.2476, 67.2489, 1.2 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_17()
}

proc basic_shape_17() {
    dend_5 { pt3dadd( 72.6327, 55.843, 67.1014, 0.72 ) }
    dend_5 { pt3dadd( 73.1243, 56.5422, 66.8902, 1.2 ) }
    dend_5 { pt3dadd( 73.5419, 57.1029, 66.7761, 1.2 ) }
    dend_5 { pt3dadd( 73.9746, 57.6027, 66.8072, 0.72 ) }
    dend_5 { pt3dadd( 74.9737, 58.6423, 67.286, 0.72 ) }
    dend_5 { pt3dadd( 76.5545, 60.1913, 68.3114, 1.2 ) }
    dend_5 { pt3dadd( 77.6355, 61.2225, 69.0731, 0.72 ) }
    dend_5 { pt3dadd( 78.57, 62.1012, 69.788, 0.72 ) }
    dend_5 { pt3dadd( 79.1239, 62.6345, 70.2459, 1.08 ) }
    dend_5 { pt3dadd( 80.0374, 63.5948, 71.0814, 0.72 ) }
    dend_5 { pt3dadd( 80.8975, 64.6214, 71.9433, 1.08 ) }
    dend_5 { pt3dadd( 87.7395, 69.602, 77.4828, 1.08 ) }
    dend_5 { pt3dadd( 94.6834, 74.1481, 83.2305, 1.08 ) }
    dend_5 { pt3dadd( 101.116, 77.2529, 90.2926, 1.08 ) }
    dend_5 { pt3dadd( 106.125, 80.3846, 98.4181, 1.08 ) }
    dend_5 { pt3dadd( 112.345, 84.0549, 105.424, 1.08 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_25, dend_16, dend_7, dend_0, dend_29, dend_26, dend_22, dend_17, dend_11, dend_8, dend_2, dend_1, dend_31, dend_30, dend_28, dend_27, dend_24, dend_23, dend_19, dend_18, dend_15, dend_12, dend_10, dend_9, dend_4, dend_3, dend_21, dend_20, dend_14, dend_13, dend_6, dend_5]}
    ModelViewParmSubset_2 = new SectionList()
    dend_25 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_31 ModelViewParmSubset_2.append()
    dend_30 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_25, dend_16, dend_7, dend_0, dend_29, dend_26, dend_22, dend_17, dend_11, dend_8, dend_2, dend_1, dend_31, dend_30, dend_28, dend_27, dend_24, dend_23, dend_19, dend_18, dend_15, dend_12, dend_10, dend_9, dend_4, dend_3, dend_21, dend_20, dend_14, dend_13, dend_6, dend_5]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_31 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_26 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_22 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_8 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_2 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_1 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_31]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_31 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_30 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_28 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_27 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_24 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_23 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_18 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_15 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_12 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_10 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_9 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_3 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_21 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_20 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_14 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_13 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_35 = new SectionList()
    dend_5 OneSecGrp_SectionRef_35.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_16 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_7 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_0 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_17 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_25 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_19 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_11 OneSecGrp_SectionRef_11.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_29 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_4 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_6 OneSecGrp_SectionRef_34.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()
    dend_31 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_16, dend_16, dend_16, dend_16, dend_16, dend_7, dend_7, dend_7, dend_7, dend_7, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_19, dend_19, dend_19, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_10()
}

proc subsets_10() {
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_11()
}

proc subsets_11() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_12()
}

proc subsets_12() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_13()
}

proc subsets_13() {
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_14()
}

proc subsets_14() {
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_15()
}

proc subsets_15() {
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_16()
}

proc subsets_16() {
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_17()
}

proc subsets_17() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_18()
}

proc subsets_18() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cNAC_149_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cNAC_149_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cNAC_149_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cNAC_149_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_26 nseg = 5
    dend_22 nseg = 7
    dend_8 nseg = 3
    dend_2 nseg = 3
    dend_1 nseg = 9
    dend_31 nseg = 7
    dend_30 nseg = 11
    dend_28 nseg = 11
    dend_27 nseg = 5
    dend_24 nseg = 5
    dend_23 nseg = 5
    dend_18 nseg = 9
    dend_15 nseg = 11
    dend_12 nseg = 3
    dend_10 nseg = 11
    dend_9 nseg = 9
    dend_3 nseg = 7
    dend_21 nseg = 9
    dend_20 nseg = 7
    dend_14 nseg = 5
    dend_13 nseg = 15
    dend_5 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cNAC187_L1_SLAC_16735ed026_0_0


