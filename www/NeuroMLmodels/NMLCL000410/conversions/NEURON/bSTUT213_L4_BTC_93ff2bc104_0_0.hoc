// Cell: bSTUT213_L4_BTC_93ff2bc104_0_0
/*
{
  "id" : "bSTUT213_L4_BTC_93ff2bc104_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-1.49721, 11.7986, 0.0301706, 2.4623", "-1.37308, 10.661, 0.0290426, 4.20373", "-1.24895, 9.52332, 0.0279145, 5.59272", "-1.12482, 8.38566, 0.0267864, 6.71614", "-1.00068, 7.248, 0.0256584, 7.74544", "-0.87655, 6.11034, 0.0245303, 8.57739", "-0.752417, 4.97268, 0.0234023, 9.13171", "-0.628284, 3.83502, 0.0222742, 9.51195", "-0.504152, 2.69736, 0.0211462, 9.92921", "-0.380019, 1.5597, 0.0200181, 10.275", "-0.255886, 0.422041, 0.01889, 10.4231", "-0.131754, -0.715618, 0.017762, 10.4046", "-0.00762106, -1.85328, 0.0166339, 10.4069", "0.116512, -2.99094, 0.0155059, 10.1383", "0.240644, -4.1286, 0.0143778, 9.53645", "0.364777, -5.26626, 0.0132498, 8.49552", "0.48891, -6.40392, 0.0121217, 7.50349", "0.613042, -7.54158, 0.0109937, 6.64245", "0.737175, -8.67924, 0.0098656, 6.01482", "0.861308, -9.8169, 0.00873754, 4.86867", "0.98544, -10.9546, 0.00760949, 2.96361" ]
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-1.78536, 12.0975, 1.5043, 2.36", "-1.78536, 12.0975, 1.5043, 2.36", "-1.91354, 12.8929, 1.69852, 2.06", "-2.06386, 13.7262, 1.92716, 2.06", "-2.08092, 13.8047, 1.9496, 2.06", "-2.29816, 14.7175, 2.21182, 2.21", "-2.63443, 15.9908, 2.63863, 2.21", "-2.89694, 16.8289, 2.95203, 2.21", "-2.91242, 16.8721, 2.97103, 2.21", "-3.22722, 17.6892, 3.35919, 2.21", "-3.37291, 18.0517, 3.5383, 2.36", "-3.82223, 19.0999, 4.09631, 2.43", "-4.10989, 19.731, 4.42286, 2.65", "-4.55168, 20.717, 4.9548, 2.65" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999821452163534
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "0.094648, -10.803, 0.0043065, 4.86", "0.094648, -10.803, 0.0043065, 4.86", "-0.198983, -11.7947, -0.0250684, 4.57", "-0.524503, -12.8751, -0.0638795, 4.2", "-1.10571, -14.8141, -0.138747, 2.87", "-1.57308, -16.4613, -0.219405, 2.58", "-2.08291, -18.3341, -0.320318, 2.5", "-2.43877, -19.737, -0.383938, 2.58", "-2.45023, -19.7876, -0.385846, 2.58", "-2.56875, -20.4662, -0.404138, 2.73", "-2.74453, -22.076, -0.424895, 2.73", "-2.78199, -23.1451, -0.397555, 2.36", "-2.75815, -24.4698, -0.31589, 2.65", "-2.69798, -25.6352, -0.221214, 2.87", "-2.62052, -26.7661, -0.124368, 3.09", "-2.51948, -27.8146, -0.0311012, 3.09", "-2.3459, -29.1941, 0.097087, 3.32", "-2.24928, -29.873, 0.156131, 3.02", "-2.04215, -31.2697, 0.255236, 2.43", "-1.79749, -32.9025, 0.370046, 2.36", "-1.64667, -33.9704, 0.435745, 2.36", "-1.56184, -34.5056, 0.457948, 2.36" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999821452163534
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "0.98544, -10.9546, 0.00760949, 0.673295", "2.61247, -25.8661, 0.00760949, 0.673295", "4.23949, -40.7776, 0.00760949, 0.673295" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-4.55168, 20.717, 4.9548, 1.4", "-5.17158, 22.0935, 5.16638, 1.4", "-5.68233, 23.2905, 5.33255, 1.18", "-6.02278, 24.146, 5.43487, 1.18", "-6.3683, 25.0516, 5.53297, 1.18", "-6.68497, 25.9213, 5.6147, 1.62", "-6.87626, 26.4787, 5.67614, 1.99", "-6.89554, 26.5498, 5.68349, 1.99", "-7.09443, 27.4426, 5.75801, 2.06", "-7.11777, 27.58, 5.76836, 2.06", "-7.24129, 28.6245, 5.83237, 1.62", "-7.34952, 30.0053, 5.93556, 1.4", "-7.35512, 30.1055, 5.94364, 1.4", "-7.39471, 31.2241, 6.03317, 1.47", "-7.40832, 32.2104, 6.1106, 1.77", "-7.41058, 33.0716, 6.16785, 1.92", "-7.39684, 34.2793, 6.2252, 1.11", "-7.39747, 34.5588, 6.23116, 1.11", "-7.42041, 35.0992, 6.24605, 1.11", "-7.43871, 35.2951, 6.25316, 1.11", "-7.61196, 36.5082, 6.30288, 0.96", "-7.76904, 37.2942, 6.31087, 0.96", "-7.96305, 38.0623, 6.29354, 1.55", "-8.15908, 38.7601, 6.2634, 2.36", "-8.33534, 39.3986, 6.22576, 2.5", "-8.47101, 39.9008, 6.19021, 2.8", "-8.7501, 40.9682, 6.1037, 2.43", "-8.96975, 41.8694, 6.02334, 1.99", "-9.27175, 43.4726, 5.91257, 1.4", "-9.36937, 44.31, 5.87132, 1.4", "-9.37871, 44.518, 5.86872, 1.4", "-9.34947, 45.5201, 5.88741, 1.62", "-9.34324, 45.5852, 5.89217, 1.62", "-9.14605, 47.0578, 6.05682, 1.03", "-8.9694, 48.1858, 6.24791, 1.03", "-8.8253, 49.1734, 6.45204, 1.47", "-8.65735, 50.3928, 6.7261, 1.69", "-8.48661, 51.839, 7.0682, 1.69", "-8.41291, 52.8589, 7.30638, 2.14", "-8.39985, 53.9681, 7.5541, 2.8", "-8.44007, 54.9781, 7.7789, 3.24", "-8.49923, 55.63, 7.90768, 3.39", "-8.64218, 56.602, 8.07698, 2.21", "-8.87045, 57.8147, 8.24838, 1.33", "-9.1227, 58.9072, 8.37124, 1.18", "-9.15369, 59.0229, 8.37801, 1.18", "-9.46386, 60.1261, 8.40726, 1.47", "-9.64547, 60.7547, 8.42331, 1.62" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-4.55168, 20.717, 4.9548, 1.03", "-3.377, 21.5787, 4.97742, 1.03", "-3.25248, 21.6655, 4.97947, 1.03", "-2.28561, 22.3188, 4.99291, 1.03", "-0.985542, 23.1821, 5.00936, 1.4", "-0.928771, 23.2191, 5.01182, 1.4", "0.636154, 24.2438, 5.10482, 1.4", "0.695516, 24.2824, 5.10906, 1.4", "1.58328, 24.8985, 5.1843, 1.55", "1.64485, 24.9443, 5.19059, 1.55", "2.89647, 26.0163, 5.33861, 0.96", "3.5216, 26.6162, 5.41776, 0.96", "4.02688, 27.2036, 5.48999, 1.18", "4.56662, 27.9066, 5.56331, 1.4", "4.64841, 28.0294, 5.56943, 1.4", "5.103, 28.7525, 5.56578, 1.4", "5.15174, 28.8323, 5.56078, 1.4", "5.68424, 29.6612, 5.49751, 1.69", "6.07857, 30.2331, 5.45018, 1.92", "6.63473, 31.0119, 5.39754, 1.4", "7.35457, 32.0315, 5.34646, 1.11", "8.0244, 32.975, 5.31068, 1.11", "8.0796, 33.0555, 5.3089, 1.11", "8.68182, 33.9615, 5.3033, 1.11", "9.16532, 34.7499, 5.31701, 1.03", "9.67298, 35.6645, 5.36055, 1.03", "9.71388, 35.7539, 5.36463, 1.03", "10.1807, 36.9635, 5.4147, 1.03", "10.2021, 37.03, 5.41689, 1.03", "10.4123, 37.9235, 5.43514, 0.81", "10.4259, 38.0268, 5.43524, 0.81", "10.4558, 38.8107, 5.43578, 0.59", "10.4508, 38.9603, 5.43585, 0.59", "10.38, 39.7233, 5.45209, 0.59", "10.3576, 40.0028, 5.46162, 0.59", "10.3192, 40.6693, 5.48956, 0.74", "10.3162, 40.7734, 5.49434, 0.74", "10.3474, 41.948, 5.5511, 0.74", "10.4261, 42.8367, 5.59225, 1.25", "10.5456, 43.5282, 5.62199, 1.69", "10.775, 44.5062, 5.65765, 1.4", "10.7941, 44.5734, 5.65964, 1.4", "11.0305, 45.3898, 5.67723, 2.06", "11.3038, 46.2977, 5.69063, 2.21", "11.5916, 47.2598, 5.69672, 1.77", "11.9076, 48.3491, 5.70527, 1.11", "12.1359, 49.1996, 5.71279, 1.11", "12.3341, 50.0255, 5.72048, 1.4", "12.5623, 51.1471, 5.73168, 0.59", "12.5735, 51.2163, 5.7324, 0.59", "12.6782, 52.2502, 5.76675, 0.44", "12.7062, 53.0483, 5.81162, 1.11", "12.7008, 53.6469, 5.85646, 1.33", "12.6972, 53.7845, 5.86458, 1.33", "12.6692, 54.2042, 5.87979, 1.33", "12.5956, 55.1772, 5.88432, 0.52", "12.473, 56.4469, 5.85587, 0.52", "12.4653, 56.5258, 5.85199, 0.52", "12.3875, 57.3241, 5.76844, 0.96", "12.3114, 58.2808, 5.59461, 1.55", "12.2628, 59.0463, 5.36574, 1.77", "12.2442, 59.4297, 5.20695, 1.99", "12.2421, 59.4819, 5.18336, 1.99", "12.2112, 60.4504, 4.75749, 1.99", "12.1882, 61.296, 4.39054, 1.4", "12.1696, 62.7497, 3.75333, 0.44", "12.163, 63.6289, 3.37428, 0.96", "12.1694, 64.3034, 3.10148, 1.4", "12.1846, 65.0297, 2.83802, 1.77", "12.1876, 65.088, 2.82128, 1.77", "12.2291, 65.6439, 2.71794, 1.99", "12.2468, 65.7996, 2.70685, 1.99", "12.3122, 66.3083, 2.6947, 1.99", "12.3281, 66.4476, 2.69174, 1.99", "12.3875, 67.1115, 2.66024, 1.69", "12.4321, 67.9342, 2.6109, 1.11", "12.4503, 68.7636, 2.55585, 0.44", "12.4415, 69.7688, 2.48751, 0.37", "12.3894, 70.6948, 2.41925, 1.03", "12.3351, 71.4492, 2.38664, 1.03", "12.2719, 72.3706, 2.37063, 0.44", "12.2392, 72.9284, 2.37224, 0.88", "12.2221, 73.4388, 2.38185, 1.18", "12.2195, 74.1308, 2.40385, 1.18", "12.2948, 75.6853, 2.46201, 0.37", "12.3762, 76.5275, 2.49954, 0.37", "12.5546, 77.7476, 2.53983, 1.33", "12.7029, 78.6076, 2.56281, 2.36", "12.7971, 79.081, 2.56937, 2.95", "12.9245, 79.6076, 2.5615, 3.24", "12.9451, 79.6954, 2.55243, 3.24", "13.0004, 79.9485, 2.52057, 3.24" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-1.56184, -34.5056, 0.457948, 2.06", "-1.52592, -36.0663, 0.565803, 2.06", "-1.47037, -38.8227, 0.490641, 2.06", "-1.42275, -40.7384, 0.312801, 2.06", "-1.33151, -42.7072, 0.0549358, 2.06", "-1.15662, -45.2008, -0.363727, 2.14", "-1.00405, -46.9166, -0.678644, 2.14", "-0.726907, -49.4871, -1.28978, 2.43", "-0.574459, -50.9047, -1.67994, 2.8", "-0.356652, -52.8303, -2.19162, 2.36", "-0.0458979, -55.4452, -2.87094, 2.36", "0.215535, -57.448, -3.3599, 2.36", "0.511015, -59.8483, -3.91664, 2.36", "0.757228, -62.3429, -4.4394, 2.14", "0.901357, -64.5978, -4.93291, 2.14", "0.945452, -66.8133, -5.44267, 2.28", "0.925371, -67.6258, -5.6318, 2.28", "0.76952, -69.6649, -6.12182, 1.69", "0.477275, -71.8699, -6.56177, 1.18", "0.194509, -73.1707, -6.72291, 1.18", "-0.126517, -74.0628, -6.6589, 1.18", "-0.628038, -74.9862, -6.31753, 1.18", "-1.28169, -75.8725, -5.74194, 0.96", "-2.47991, -77.1162, -4.6089, 1.11", "-3.78715, -78.2324, -3.48921, 1.69", "-5.22376, -79.3746, -2.4334, 1.55", "-6.11952, -80.0367, -1.96441, 1.92", "-7.00059, -80.6845, -1.67407, 2.21", "-8.22446, -81.6451, -1.53808, 2.06", "-9.80358, -82.9587, -1.64848, 1.99", "-11.0327, -84.0677, -1.86412, 1.77", "-12.4244, -85.4488, -2.11821, 1.92", "-13.6462, -86.8022, -2.27691, 1.84", "-14.8056, -88.2566, -2.2511, 1.69", "-15.5274, -89.3316, -2.07482, 1.11", "-16.297, -90.7846, -1.70469, 0.96", "-17.0403, -92.5783, -1.15852, 1.25", "-17.3965, -93.6742, -0.834866, 0.81", "-18.0297, -96.1059, -0.400266, 0.74", "-18.3212, -97.4679, -0.34091, 0.37", "-18.6572, -99.6092, -0.574964, 1.47", "-18.7574, -100.637, -0.844493, 2.14", "-18.8782, -102.58, -1.66102, 2.5", "-18.9466, -105.033, -3.051, 1.03", "-18.96, -106.296, -3.91833, 0.88", "-18.9284, -107.264, -4.6224, 0.44", "-18.7911, -108.901, -5.87693, 0.44", "-18.5411, -110.786, -7.34003, 1.18", "-18.1885, -112.929, -8.9139, 1.62", "-18.1647, -113.066, -9.00786, 1.62", "-17.9044, -114.544, -9.9298, 1.62", "-17.5781, -116.813, -11.1653, 1.47", "-17.4166, -118.31, -11.8183, 1.99", "-17.3636, -119.532, -12.2184, 1.99", "-17.3885, -120.646, -12.496, 1.99", "-17.5683, -122.779, -12.9561, 0.59", "-17.831, -124.322, -13.224, 0.52", "-18.1127, -125.456, -13.3071, 0.52", "-18.9562, -128.081, -13.3569, 2.8", "-19.3295, -129.138, -13.3486, 3.17", "-19.718, -130.182, -13.2421, 3.46", "-20.0604, -131.173, -12.9821, 3.46", "-20.8399, -133.582, -12.2013, 1.69", "-21.2531, -135.038, -11.6088, 1.11", "-21.4567, -135.931, -11.1295, 1.25", "-21.9275, -138.329, -9.67624, 1.99", "-22.2772, -140.719, -8.02504, 1.47" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-1.56184, -34.5056, 0.457948, 0.96", "-0.331006, -35.5911, -0.958107, 0.96", "0.711346, -36.4521, -2.10265, 0.81", "2.30911, -37.6269, -3.66143, 0.59", "2.73876, -37.9012, -4.03476, 0.88", "3.1601, -38.134, -4.3616, 1.11", "3.22931, -38.1663, -4.41056, 1.11", "4.18859, -38.4155, -5.00951, 1.25", "5.01603, -38.5543, -5.60753, 0.88", "5.93237, -38.6717, -6.35631, 0.52", "6.40525, -38.7551, -6.88485, 0.81", "7.05823, -38.928, -7.79753, 0.96", "7.99684, -39.3013, -9.43412, 0.52", "8.86749, -40.0007, -11.9187, 0.52", "8.87852, -40.0265, -11.9903, 0.52", "8.82742, -40.8818, -13.7898, 0.96", "8.74392, -41.2084, -14.3327, 1.11", "8.58337, -41.6229, -14.8853, 1.11", "8.02919, -42.9815, -16.278, 0.66", "7.81069, -43.6597, -16.8601, 0.37", "7.65958, -44.6763, -17.7196, 0.37", "7.7067, -45.3948, -18.3308, 0.59", "7.72057, -45.455, -18.3844, 0.59", "8.14769, -46.4157, -19.2828, 1.03", "8.66295, -47.2587, -20.1148, 1.69", "9.2645, -48.1923, -21.0658, 2.21", "9.78266, -49.026, -21.9086, 2.8", "9.98562, -49.4004, -22.2814, 2.8", "10.8191, -51.2273, -24.0128, 1.33", "11.2836, -52.5246, -25.1382, 0.52", "11.4589, -53.2011, -25.6576, 0.66", "11.56, -53.7347, -26.0043, 0.66", "11.6975, -54.5244, -26.4453, 0.29", "11.8137, -55.2223, -26.7858, 0.37", "11.9436, -56.0204, -27.0123, 0.37", "11.9845, -56.1162, -27.0377, 0.37", "12.5398, -56.8307, -27.3609, 0.66", "13.0817, -57.4164, -27.7001, 0.96", "13.1276, -57.4618, -27.7285, 0.96", "13.6503, -57.9811, -28.0605, 0.96", "14.6971, -59.0532, -28.812, 0.52", "15.6165, -60.0446, -29.4976, 0.37", "16.7071, -61.2607, -30.3562, 1.77", "17.1312, -61.7554, -30.6979, 2.36", "17.5928, -62.3082, -31.0769, 2.58", "18.9937, -64.0614, -32.2614, 0.74", "19.4361, -64.6784, -32.6155, 0.74" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "4.23949, -40.7776, 0.00760949, 0.15", "5.86652, -55.6891, 0.00760949, 0.15", "7.49354, -70.6006, 0.00760949, 0.15" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-9.64547, 60.7547, 8.42331, 0.81", "-10.1, 61.4021, 8.40592, 0.81", "-10.6792, 62.2724, 8.36932, 0.74", "-11.1744, 63.0483, 8.33749, 0.74", "-11.2111, 63.1065, 8.33271, 0.74", "-11.8858, 64.1924, 8.22795, 0.74", "-12.2118, 64.7093, 8.16224, 1.33", "-12.5363, 65.2303, 8.06824, 1.92", "-12.8884, 65.7946, 7.94358, 1.33", "-13.396, 66.5671, 7.7687, 1.11", "-13.7799, 67.1176, 7.64257, 1.47", "-14.3013, 67.8147, 7.49254, 1.18", "-14.3315, 67.8536, 7.48433, 1.18", "-14.802, 68.4613, 7.35858, 0.66", "-15.2264, 69.0431, 7.23502, 0.66", "-15.7474, 69.827, 7.08288, 1.47", "-16.0571, 70.3669, 7.0004, 1.99", "-16.4137, 71.0807, 6.92081, 1.99", "-16.9805, 72.3647, 6.80794, 0.66", "-17.2671, 73.1297, 6.75697, 0.52", "-17.438, 73.6771, 6.73511, 0.59", "-17.7435, 74.774, 6.76752, 0.74", "-17.7626, 74.8449, 6.77279, 0.74", "-17.9562, 75.492, 6.85699, 1.33", "-18.1248, 76.0065, 6.94851, 1.62", "-18.4127, 76.7401, 7.0912, 1.18", "-18.8075, 77.571, 7.21992, 0.66", "-19.1459, 78.2031, 7.29344, 0.66", "-19.7985, 79.3329, 7.41332, 2.28", "-20.1608, 79.899, 7.4716, 2.73", "-20.4861, 80.3757, 7.51551, 2.95", "-21.3473, 81.5876, 7.60533, 1.03", "-21.3831, 81.6365, 7.60807, 1.03", "-21.7393, 82.125, 7.63958, 0.81", "-22.1521, 82.6928, 7.68546, 0.44", "-22.5713, 83.2904, 7.74339, 0.44", "-23.052, 83.9989, 7.82558, 0.44", "-23.5154, 84.6779, 7.92455, 1.11", "-23.86, 85.1796, 7.99774, 1.69", "-24.3197, 85.8568, 8.09417, 2.21", "-24.5956, 86.2627, 8.1515, 2.5", "-25.2914, 87.2396, 8.29734, 1.25", "-25.9189, 88.0988, 8.42823, 0.44", "-26.4312, 88.7911, 8.53344, 0.44", "-26.8372, 89.3319, 8.61735, 1.03", "-27.2805, 89.934, 8.70819, 1.33", "-27.3906, 90.0871, 8.73054, 1.33", "-27.6437, 90.4493, 8.78119, 1.47", "-28.0991, 91.0951, 8.87272, 0.88", "-28.4986, 91.637, 8.95463, 0.59", "-28.9174, 92.1709, 9.04277, 0.44", "-28.9675, 92.2302, 9.0536, 0.44", "-29.5914, 92.8999, 9.19311, 0.44", "-29.9253, 93.2045, 9.27132, 0.66", "-30.0735, 93.3246, 9.30703, 0.66", "-30.5276, 93.6838, 9.41697, 0.66", "-30.9733, 94.0826, 9.53335, 0.66", "-31.383, 94.5382, 9.64573, 0.37", "-31.6615, 94.9445, 9.71564, 0.37", "-32.0527, 95.6523, 9.79726, 0.66", "-32.2834, 96.1945, 9.82022, 0.96", "-32.533, 96.9914, 9.80732, 0.29", "-32.6866, 97.6142, 9.77798, 0.44", "-32.8231, 98.2755, 9.73314, 0.96", "-32.8445, 98.383, 9.72479, 0.96", "-33.0582, 99.3669, 9.64222, 1.77", "-33.3076, 100.311, 9.57049, 2.95", "-33.4627, 100.772, 9.44521, 3.54", "-33.4821, 100.826, 9.42421, 3.54", "-33.6887, 101.412, 9.15545, 3.76", "-33.7062, 101.462, 9.12942, 3.76", "-33.9483, 102.168, 8.71926, 3.46", "-34.7312, 104.596, 7.22846, 0.81", "-34.7481, 104.654, 7.19507, 0.81", "-34.8861, 105.156, 6.94107, 0.81", "-34.8997, 105.212, 6.9201, 0.81", "-35.0347, 105.917, 6.77398, 1.11", "-35.1094, 106.449, 6.74603, 1.25", "-35.2116, 107.446, 6.85049, 0.37", "-35.2921, 108.25, 6.94284, 0.29", "-35.4338, 109.454, 7.04812, 0.29", "-35.6069, 110.768, 7.13294, 0.29", "-35.6174, 110.837, 7.13581, 0.29", "-35.7652, 111.703, 7.16637, 0.29", "-35.783, 111.803, 7.16685, 0.29", "-35.974, 112.835, 7.08358, 0.44", "-35.9996, 112.922, 7.05712, 0.44", "-36.2083, 113.317, 6.86347, 0.44", "-40.2848, 120.639, 6.88563, 0.44", "-44.4641, 127.893, 7.1164, 0.44", "-48.5693, 135.186, 6.67543, 0.44", "-51.7804, 142.693, 4.70705, 0.44", "-55.4694, 149.524, 1.63059, 0.44", "-58.2772, 155.827, -3.00119, 0.44", "-61.5336, 160.925, -8.58564, 0.44", "-63.0709, 167.498, -13.4589, 0.44", "-64.3552, 174.371, -18.0182, 0.44", "-65.4199, 180.509, -23.492, 0.44", "-65.0581, 187.458, -28.0968, 0.44" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-9.64547, 60.7547, 8.42331, 0.29", "-9.05681, 62.6854, 8.46095, 0.29", "-8.86943, 63.4699, 8.49759, 0.44", "-8.7473, 64.2354, 8.54145, 0.44", "-8.64409, 65.3637, 8.61217, 0.29", "-8.64151, 65.4289, 8.61616, 0.29", "-8.63753, 66.4105, 8.67303, 0.29", "-8.65552, 66.5688, 8.69076, 0.29", "-8.75001, 67.3873, 8.72442, 0.29", "-8.81789, 68.071, 8.71169, 0.96", "-8.84936, 68.6766, 8.65669, 1.33", "-8.85247, 69.0403, 8.61413, 1.33", "-8.77016, 70.6051, 8.40464, 0.52", "-8.63544, 71.8273, 8.23421, 0.29", "-8.61165, 71.9581, 8.21627, 0.29", "-8.39154, 72.9403, 8.08862, 0.81", "-8.37462, 73.01, 8.08059, 0.81", "-8.2179, 73.6893, 8.01637, 1.03", "-8.11207, 74.2742, 7.97799, 0.74", "-7.97297, 75.2008, 7.96381, 0.29", "-7.90534, 75.7961, 7.96902, 0.44", "-7.88481, 76.257, 7.98655, 0.44", "-7.88046, 76.8692, 8.00667, 0.29", "-7.92875, 77.4419, 8.00829, 0.74", "-8.24007, 87.7437, 8.82366, 0.74" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "13.0004, 79.9485, 2.52057, 0.37", "13.321, 81.6611, 1.87002, 0.37", "13.4699, 82.2398, 1.57543, 0.37", "13.5971, 82.6989, 1.32816, 0.96", "13.6152, 82.7542, 1.30026, 0.96", "13.9033, 83.5922, 0.890522, 0.96", "14.4153, 85.1508, 0.164855, 0.37", "14.6918, 86.1368, -0.297444, 0.59", "14.908, 86.9567, -0.717542, 0.37", "15.1676, 88.069, -1.303, 0.37", "15.1849, 88.1612, -1.35072, 0.37", "15.2617, 88.8071, -1.71522, 0.29", "15.3273, 90.0556, -2.42922, 1.47", "15.3365, 91.075, -3.01954, 1.92", "15.3318, 91.4544, -3.24798, 2.21", "15.3278, 91.8373, -3.49322, 2.21", "15.3724, 93.9017, -4.81952, 0.37", "15.4291, 94.9928, -5.51323, 0.96", "15.4679, 95.5513, -5.85337, 1.62", "15.5164, 96.1541, -6.21548, 1.84", "15.6643, 97.7681, -7.19686, 0.29", "15.761, 98.7357, -7.77521, 1.03", "15.7954, 99.0998, -7.96522, 1.4", "15.8117, 99.3163, -8.0827, 1.4" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "13.0004, 79.9485, 2.52057, 0.37", "14.0576, 81.8058, 3.04421, 0.37", "14.6213, 82.7849, 3.2013, 0.37", "15.1541, 83.7407, 3.23416, 0.81", "15.1854, 83.794, 3.23229, 0.81", "15.4886, 84.2973, 3.19907, 0.81", "15.999, 85.144, 3.0814, 0.37", "16.5138, 85.9258, 2.79934, 0.29", "16.9588, 86.5857, 2.5148, 0.59", "17.388, 87.2175, 2.21177, 0.22", "17.4126, 87.2575, 2.19277, 0.22", "17.8468, 88.1035, 1.804, 1.18", "17.9734, 88.4302, 1.68722, 1.69", "18.1248, 89.0439, 1.54662, 1.99", "18.1669, 89.4158, 1.51859, 1.99", "18.1085, 90.2601, 1.56215, 0.44", "18.007, 90.8123, 1.6765, 0.29", "17.4704, 92.206, 2.35012, 0.29", "17.4441, 92.2508, 2.37795, 0.29", "21.3905, 99.7393, 3.19069, 0.29", "24.663, 107.401, 4.96549, 0.29", "28.0737, 114.884, 7.13092, 0.29", "30.9204, 122.276, 10.203, 0.29", "34.7519, 128.854, 13.8338, 0.29", "38.0562, 134.776, 18.7722, 0.29", "41.7559, 140.611, 23.5201, 0.29" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-22.2772, -140.719, -8.02504, 0.52", "-22.2656, -142.68, -7.35877, 0.52", "-22.2132, -143.447, -7.18588, 0.81", "-22.1457, -144.121, -7.12818, 1.03", "-22.1382, -144.206, -7.13041, 1.03", "-22.1043, -144.95, -7.19091, 1.03", "-22.1092, -145.776, -7.27711, 0.52", "-22.1631, -146.503, -7.42357, 0.52", "-22.314, -147.374, -7.56333, 0.52", "-22.5097, -148.091, -7.64685, 0.66", "-22.7708, -148.834, -7.65247, 0.66", "-23.015, -149.385, -7.60211, 0.88", "-23.6382, -150.631, -7.29436, 1.03", "-24.0651, -151.422, -6.98001, 1.55", "-24.2484, -151.771, -6.80778, 1.92", "-24.8693, -152.99, -6.13114, 1.92", "-25.2691, -153.834, -5.64439, 1.33", "-25.914, -155.274, -4.81769, 0.59", "-26.3651, -156.325, -4.23392, 0.59", "-26.8071, -157.379, -3.72981, 0.59", "-26.8291, -157.432, -3.7091, 0.59", "-27.1496, -158.202, -3.50942, 1.33", "-27.5138, -159.134, -3.41724, 0.74", "-27.7884, -159.933, -3.47055, 0.74", "-28.1862, -161.267, -3.63801, 0.74", "-28.2143, -161.365, -3.65199, 0.74", "-28.4813, -162.325, -3.76691, 1.18", "-28.9019, -163.799, -3.90674, 0.81", "-29.3411, -165.366, -3.96418, 0.74", "-29.8396, -167.128, -3.92167, 0.59", "-29.8591, -167.199, -3.9136, 0.59", "-30.1882, -168.366, -3.7225, 1.92", "-30.4701, -169.436, -3.47043, 2.21", "-30.7715, -170.708, -3.10472, 2.21", "-31.0481, -172.029, -2.6943, 0.74", "-31.2771, -173.582, -2.20726, 0.74", "-31.3519, -174.759, -1.86282, 0.66", "-31.259, -176.148, -1.52125, 0.44", "-31.0533, -177.061, -1.35111, 1.03", "-31.008, -177.171, -1.34354, 1.03", "-30.6922, -177.71, -1.38438, 1.03", "-30.2074, -178.456, -1.53493, 1.03", "-29.7648, -179.186, -1.70732, 1.4", "-29.5607, -179.647, -1.81707, 1.4", "-29.2539, -180.791, -2.00763, 0.81", "-29.0825, -182.014, -2.08436, 0.81", "-29.0717, -182.888, -2.06195, 1.03", "-29.1468, -183.68, -1.98577, 1.11", "-29.3065, -184.62, -1.83886, 1.18", "-29.5657, -185.776, -1.6126, 0.37", "-29.9592, -187.18, -1.35657, 0.37", "-30.2088, -188.068, -1.27647, 1.55", "-30.3756, -188.793, -1.30477, 1.84", "-30.4826, -189.437, -1.40676, 2.14", "-30.529, -189.927, -1.54889, 2.14", "-30.4968, -191.261, -2.18775, 1.69", "-30.2019, -192.75, -3.17053, 0.52", "-30.0048, -193.282, -3.58466, 0.88", "-29.9772, -193.332, -3.62992, 0.88", "-29.8579, -193.498, -3.80427, 0.88", "-29.1652, -194.282, -4.6944, 0.52", "-28.5155, -194.967, -5.49506, 1.03", "-28.4792, -195.009, -5.5418, 1.03", "-27.9274, -195.77, -6.31368, 1.33", "-27.3799, -196.657, -7.11782, 1.25", "-27.1894, -197.042, -7.42193, 1.03", "-26.6969, -198.492, -8.3015, 0.59", "-26.4657, -199.481, -8.7664, 0.59", "-26.3476, -200.195, -9.02298, 1.18", "-26.3173, -200.492, -9.09542, 1.84", "-26.2842, -201.146, -9.19729, 1.84", "-26.2782, -202.598, -9.35321, 0.74", "-26.2848, -203.629, -9.57301, 1.03", "-26.2714, -204.413, -9.86146, 1.11", "-26.252, -204.816, -10.0615, 1.33", "-26.1955, -205.595, -10.5896, 0.81", "-26.1402, -206.096, -11.0305, 0.44", "-25.8816, -208.439, -13.6175, 0.44", "-25.8498, -208.858, -14.1523, 0.44", "-25.8591, -208.944, -14.2884, 0.44", "-26.0956, -209.641, -15.4789, 0.44", "-26.1137, -209.67, -15.5275, 0.44", "-26.4198, -210.053, -16.0822, 0.74", "-26.811, -210.453, -16.5429, 1.11", "-27.8447, -211.687, -18.0841, 0.44", "-28.1515, -212.143, -18.6825, 0.44", "-28.6418, -213.117, -19.9248, 1.84", "-28.794, -213.531, -20.4564, 2.5", "-28.8256, -213.646, -20.6032, 2.5", "-29.1806, -215.342, -22.5867, 0.59", "-29.3037, -215.939, -23.236, 0.59", "-29.4411, -216.457, -23.876, 0.59", "-29.4547, -216.501, -23.9323, 0.59", "-29.7753, -217.425, -25.0599, 1.77", "-30.0066, -218.008, -25.7056, 2.06", "-30.5695, -219.184, -26.841, 1.99", "-31.3612, -220.75, -28.3058, 0.81", "-31.3859, -220.799, -28.3538, 0.81", "-31.6411, -221.361, -28.8841, 0.66", "-31.9229, -222.14, -29.5938, 0.52", "-32.1139, -222.714, -30.1004, 1.84", "-32.3356, -223.472, -30.677, 2.28", "-32.8117, -225.336, -32.0441, 0.66", "-32.9165, -225.981, -32.5389, 0.66", "-32.991, -227.083, -33.3994, 1.77", "-32.9883, -227.149, -33.4493, 1.77", "-32.9064, -227.822, -33.9237, 2.21", "-32.7276, -228.777, -34.5019, 2.21", "-32.4541, -230.061, -35.1586, 0.74", "-32.3421, -230.678, -35.4517, 0.37", "-32.2605, -231.167, -35.6654, 0.29", "-32.1183, -232.003, -36.0196, 1.11", "-32.0168, -232.621, -36.2841, 1.4", "-31.8582, -233.654, -36.6878, 0.59", "-31.7459, -234.397, -36.973, 0.29", "-31.63, -235.203, -37.2849, 0.66", "-31.5678, -235.7, -37.4923, 0.88", "-31.4665, -236.779, -37.9427, 0.29", "-31.4192, -237.458, -38.2185, 0.29", "-31.3949, -237.988, -38.4188, 0.96", "-31.3819, -238.552, -38.6218, 0.96", "-31.3279, -239.784, -39.0778, 0.29", "-31.2632, -240.392, -39.341, 0.29", "-31.1241, -241.011, -39.7161, 0.66", "-31.1151, -241.063, -39.7793, 0.66", "-31.0778, -241.373, -40.2348, 0.66", "-31.0706, -242.074, -41.4422, 0.44", "-31.1177, -242.633, -42.4585, 1.77", "-31.2427, -243.45, -44.0077, 2.58", "-31.7632, -245.905, -48.7226, 0.44", "-31.8313, -246.169, -49.2188, 0.44", "-32.2158, -247.337, -51.4711, 0.88", "-32.4541, -247.894, -52.5616, 1.77", "-32.4708, -247.926, -52.6238, 1.77", "-32.5926, -248.133, -52.9827, 2.14", "-32.802, -248.557, -53.4556, 2.43" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-22.2772, -140.719, -8.02504, 0.59", "-21.1698, -141.685, -6.64991, 0.59", "-19.7036, -142.65, -5.12442, 0.52", "-18.7357, -143.135, -4.32626, 0.52", "-17.255, -143.564, -3.42568, 0.37", "-16.9692, -143.616, -3.28454, 0.37", "-15.7132, -143.767, -2.73156, 0.37", "-14.6148, -143.773, -2.37547, 0.37", "-13.1719, -143.62, -2.03959, 0.37", "-10.9085, -143.253, -1.62879, 0.22", "-10.2426, -143.144, -1.55989, 0.29", "-8.97032, -142.93, -1.45514, 0.37" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "19.4361, -64.6784, -32.6155, 0.37", "19.6602, -65.1486, -32.746, 0.37", "19.9508, -65.7892, -32.8717, 0.29", "20.2349, -66.4565, -32.9762, 1.25", "20.3638, -66.768, -33.0173, 1.69", "20.3815, -66.8118, -33.0224, 1.69", "20.7169, -67.6721, -33.1039, 0.29", "20.9509, -68.299, -33.1312, 0.29", "21.2008, -68.9815, -33.1511, 1.77", "21.3291, -69.3503, -33.1521, 2.43", "21.4211, -69.6193, -33.1535, 2.43", "21.7875, -70.7145, -33.1616, 0.22", "21.9605, -71.2641, -33.1689, 0.22" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "19.4361, -64.6784, -32.6155, 1.77", "19.5192, -65.8287, -35.4339, 1.77", "19.6547, -67.1204, -38.3576, 1.03", "19.9169, -69.38, -43.0128, 2.14", "20.0119, -70.341, -44.8868, 0.52", "20.0475, -70.7371, -45.6357, 1.92", "20.0674, -70.9817, -46.0841, 2.36", "20.2665, -73.1807, -49.6451, 0.29", "20.2931, -73.7438, -50.4814, 0.29", "20.2687, -75.0313, -52.1429, 0.29", "20.2658, -75.0631, -52.1855, 0.29", "20.2358, -75.2853, -52.4904, 1.69", "20.1969, -75.58, -52.8901, 1.69", "20.043, -77.618, -55.6902, 0.22", "20.0417, -77.9105, -56.1118, 0.22", "20.0454, -77.9403, -56.1556, 0.22", "20.1156, -78.2973, -56.6844, 1.03", "20.4879, -79.6545, -58.6664, 0.29", "20.9815, -81.0363, -60.5789, 1.99", "21.0853, -81.2687, -60.8781, 2.14", "21.8658, -82.886, -62.9888, 0.37", "22.0054, -83.1548, -63.3419, 0.37", "22.2122, -83.5164, -63.801, 0.88", "22.4793, -83.9318, -64.2659, 1.03", "23.1735, -85.0074, -65.2976, 0.29", "23.2041, -85.0575, -65.3421, 0.29", "23.9132, -86.342, -66.4208, 0.29", "24.2221, -86.9608, -66.9768, 1.99", "24.3178, -87.1634, -67.1623, 1.99", "24.9962, -88.6863, -68.5209, 0.29", "25.1433, -89.069, -68.8395, 0.59", "25.6777, -90.5619, -70.0368, 0.44", "25.9716, -91.446, -70.7262, 0.29", "26.0878, -91.8132, -71.0143, 1.11", "26.1899, -92.1183, -71.2491, 1.33", "26.9663, -94.2269, -72.9866, 0.22", "27.1241, -94.6044, -73.3336, 0.52", "27.6376, -95.6759, -74.4278, 0.29", "27.7932, -95.9675, -74.7514, 0.88", "27.9862, -96.3241, -75.2337, 0.88", "28.7388, -97.6897, -77.2841, 0.29", "29.3397, -98.7319, -78.9752, 0.29", "29.819, -99.5944, -80.4188, 1.77", "29.9405, -99.8184, -80.8048, 1.77", "30.8624, -101.601, -83.9068, 0.52", "31.0143, -101.931, -84.4617, 0.44", "31.1506, -102.24, -84.9493, 0.74", "31.1635, -102.269, -84.992, 0.74", "31.646, -103.287, -86.3695, 0.29", "31.6672, -103.325, -86.417, 0.29", "32.1266, -103.955, -86.9967, 1.18", "32.3103, -104.186, -87.1973, 1.18", "33.1274, -105.169, -87.9845, 0.22", "33.1585, -105.205, -88.0091, 0.22", "33.8792, -105.974, -88.4782, 0.81", "34.7436, -106.81, -89.0055, 0.22", "35.1131, -107.128, -89.2088, 0.81", "35.1599, -107.163, -89.2374, 0.81", "35.3979, -107.296, -89.4059, 0.81", "36.405, -107.717, -90.427, 0.22", "36.666, -107.803, -90.7343, 0.44", "36.7049, -107.814, -90.7836, 0.44", "37.8675, -108.141, -92.2579, 1.33", "38.9103, -108.449, -93.5727, 1.33", "40.9555, -109.059, -96.161, 0.29", "41.0054, -109.075, -96.2247, 0.29", "41.3398, -109.194, -96.657, 0.29", "41.788, -109.369, -97.1917, 1.03", "41.9229, -109.426, -97.3346, 1.03", "41.9685, -109.445, -97.3748, 1.03", "43.5816, -110.117, -98.5489, 0.22", "43.6309, -110.136, -98.5848, 0.22", "44.8279, -110.505, -99.4966, 0.29", "46.2286, -110.732, -100.658, 0.22", "46.5233, -110.753, -100.918, 0.66", "46.5703, -110.751, -100.961, 0.66", "46.8573, -110.716, -101.231, 0.66", "47.7101, -110.572, -102.076, 0.15", "49.3547, -110.135, -103.869, 0.96", "50.269, -109.84, -104.9, 1.4", "50.6178, -109.725, -105.311, 1.4", "50.7865, -109.668, -105.515, 1.4" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-65.0581, 187.458, -28.0968, 0.44", "-69.0236, 196.364, -30.6476, 0.44" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-65.0581, 187.458, -28.0968, 0.44", "-67.5592, 194.8, -30.3639, 0.44" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "15.8117, 99.3163, -8.0827, 0.29", "16.389, 100.953, -8.34458, 0.29", "16.6484, 101.688, -8.46226, 0.29", "16.8657, 102.304, -8.56081, 1.03", "16.8828, 102.353, -8.56859, 1.03", "17.008, 102.708, -8.62539, 1.4" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "15.8117, 99.3163, -8.0827, 0.88", "15.8349, 100.156, -8.21683, 0.88", "15.9122, 100.793, -8.35703, 0.29", "16.0674, 101.52, -8.61598, 0.29", "16.19, 101.963, -8.79364, 0.44", "16.542, 103.102, -9.26467, 1.25", "16.6938, 103.558, -9.45408, 1.99", "16.9603, 104.202, -9.74641, 2.21", "17.6158, 105.593, -10.4176, 0.22", "17.8848, 106.175, -10.7208, 0.22", "18.0214, 106.463, -10.872, 0.96", "18.1655, 106.786, -11.036, 1.77", "18.3155, 107.192, -11.2302, 2.21", "18.4283, 107.609, -11.4298, 2.21", "18.7477, 109.205, -12.1736, 0.22", "18.8578, 109.88, -12.4983, 0.22", "18.982, 110.67, -12.8704, 1.18", "19.0258, 110.972, -13.0084, 1.33", "19.1428, 111.872, -13.38, 0.81", "19.2393, 112.571, -13.6381, 0.22", "19.3178, 113.02, -13.7688, 0.29", "19.4658, 113.808, -13.9801, 0.22", "19.4914, 113.909, -14.0111, 0.22", "19.7285, 114.672, -14.3098, 0.22", "20.008, 115.464, -14.6552, 1.33", "20.1255, 115.815, -14.854, 1.69", "20.1801, 116.011, -14.9719, 1.69", "20.4754, 117.12, -15.6679, 0.29", "20.6632, 117.746, -16.0601, 1.47", "20.741, 117.972, -16.2025, 1.47", "20.9921, 118.643, -16.6269, 0.66", "21.3355, 119.506, -17.1501, 0.29", "21.5045, 119.935, -17.3903, 0.29", "21.7245, 120.482, -17.6476, 0.88", "21.8547, 120.795, -17.8017, 1.25", "22.186, 121.605, -18.2258, 0.29", "22.3751, 122.093, -18.4843, 0.22", "22.4994, 122.536, -18.7407, 0.66", "22.556, 122.912, -18.9482, 0.81", "22.5873, 123.615, -19.2831, 0.22", "22.5892, 124.053, -19.4625, 0.22", "22.5661, 124.465, -19.6299, 0.74", "22.48, 125.107, -19.9534, 1.4", "22.3219, 126.016, -20.4537, 0.29", "22.1771, 126.647, -20.8601, 0.81", "22.1195, 126.848, -21.0192, 0.96", "21.7699, 127.757, -21.9743, 0.29", "21.4403, 128.458, -22.813, 0.29", "21.303, 128.715, -23.1349, 1.33", "20.937, 129.3, -23.9154, 2.28", "20.4578, 129.992, -24.886, 2.28", "19.463, 131.233, -26.7737, 0.81", "19.3267, 131.382, -27.0105, 0.88", "19.0224, 131.68, -27.4929, 0.29", "18.5698, 132.072, -28.1462, 0.37", "18.3853, 132.226, -28.3859, 0.37", "17.6483, 132.888, -29.2738, 0.37", "17.366, 133.186, -29.6157, 0.37", "16.7514, 133.988, -30.4485, 1.55", "16.5185, 134.377, -30.8035, 1.92", "16.0452, 135.619, -31.6846, 0.44", "15.9224, 136.202, -32.0077, 0.29", "15.8758, 136.858, -32.2787, 0.88", "15.8885, 137.208, -32.4072, 0.96", "15.9409, 137.581, -32.5205, 0.96", "16.2012, 138.802, -32.85, 0.37", "16.4774, 139.814, -33.0868, 0.29", "16.6334, 140.411, -33.3253, 0.29", "16.846, 141.301, -33.7797, 1.33", "16.9277, 141.696, -34.0304, 2.14", "16.9779, 141.992, -34.2483, 2.36", "16.9994, 142.214, -34.449, 2.36", "17.0793, 144.141, -36.4752, 0.29", "17.0726, 144.572, -36.9704, 0.88", "17.0282, 145.07, -37.5416, 1.4", "16.9854, 145.356, -37.8597, 1.55", "16.8042, 146.343, -38.8981, 0.37", "16.7349, 146.702, -39.2353, 0.37", "16.5726, 147.491, -39.8507, 1.18", "16.4618, 148.035, -40.2826, 1.47", "16.2309, 149.214, -41.1364, 0.29", "16.1659, 149.537, -41.3406, 0.44", "16.0695, 150.03, -41.5903, 0.29", "15.8449, 151.133, -42.0861, 1.77", "15.7333, 151.74, -42.3131, 2.06", "15.6478, 152.314, -42.4827, 1.92", "15.4914, 153.575, -42.6926, 0.22", "15.4325, 154.168, -42.7519, 0.22", "15.4284, 154.231, -42.7515, 0.22", "15.444, 154.722, -42.6683, 0.22", "15.5163, 155.496, -42.4779, 0.96", "15.5579, 155.734, -42.4139, 1.33", "15.6131, 155.975, -42.3464, 1.33", "15.778, 156.678, -42.1614, 0.44", "16.0979, 157.983, -41.8627, 0.22", "16.1134, 158.043, -41.8505, 0.22", "16.4038, 159.006, -41.6225, 0.22", "16.5737, 159.522, -41.4765, 1.03", "16.6853, 159.831, -41.3807, 1.62", "16.8822, 160.317, -41.2163, 1.62", "16.931, 160.438, -41.1755, 1.62", "17.5973, 162.048, -40.6202, 0.22", "17.7488, 162.416, -40.4862, 0.66", "17.9091, 162.837, -40.3357, 0.66", "18.0128, 163.186, -40.225, 0.59", "18.1413, 163.833, -40.0594, 0.22", "18.1747, 164.127, -40.0079, 0.66", "18.1706, 164.455, -39.9785, 0.88", "18.1436, 165.007, -39.9268, 0.44", "18.0641, 165.901, -39.8405, 0.22", "17.9964, 166.547, -39.7794, 0.81", "17.9506, 166.973, -39.7384, 1.18", "17.8218, 168.183, -39.6223, 0.22", "17.8155, 168.239, -39.6226, 0.22", "17.6957, 169.174, -39.697, 0.22", "17.6303, 169.761, -39.7807, 1.03", "17.5984, 170.139, -39.8519, 1.33", "17.578, 170.519, -39.9394, 1.33", "17.5917, 172.619, -40.5099, 0.22", "17.5929, 172.672, -40.5257, 0.22", "17.6542, 173.851, -40.9305, 0.22", "17.684, 174.256, -41.0812, 0.59", "17.6896, 174.307, -41.1006, 0.59", "17.8142, 175.011, -41.3447, 0.74" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-32.802, -248.557, -53.4556, 0.37", "-31.6085, -249.699, -54.2271, 0.37", "-30.8558, -250.446, -54.7175, 0.29", "-29.935, -251.408, -55.3145, 0.29", "-29.2838, -252.135, -55.734, 0.88", "-29.0761, -252.392, -55.8809, 1.11", "-29.0322, -252.451, -55.9138, 1.11", "-28.8316, -252.814, -56.0925, 1.11", "-28.5106, -253.661, -56.5131, 0.29", "-28.3531, -254.291, -56.8307, 0.29", "-28.207, -255.042, -57.2018, 0.74", "-28.1571, -255.354, -57.3705, 0.88", "-28.0868, -255.856, -57.6533, 0.59", "-27.9512, -256.93, -58.2778, 0.29", "-27.9339, -257.05, -58.3536, 0.29", "-27.8001, -257.692, -58.7603, 0.29", "-27.6018, -258.401, -59.1888, 1.11", "-27.4856, -258.802, -59.4789, 1.4", "-27.3575, -259.206, -59.7781, 1.4", "-26.9008, -260.461, -60.7104, 0.22", "-26.6438, -261.18, -61.2594, 0.22", "-26.4724, -261.679, -61.6556, 0.81", "-25.9593, -263.103, -62.8059, 0.81" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-32.802, -248.557, -53.4556, 0.96", "-34.1062, -249.231, -56.0168, 0.96", "-35.8238, -250.295, -59.6314, 0.96", "-36.6298, -250.849, -61.3988, 0.66", "-37.1241, -251.242, -62.5388, 1.4", "-37.2469, -251.354, -62.8391, 1.4", "-38.2197, -252.327, -65.3354, 0.44", "-38.4275, -252.653, -66.0923, 0.37", "-38.4369, -252.684, -66.1488, 0.37", "-38.6289, -253.595, -67.6776, 0.29", "-38.6732, -254.014, -68.3895, 1.47", "-38.68, -254.102, -68.5429, 1.77", "-38.6889, -254.366, -69.0471, 1.99", "-38.7264, -254.821, -70.0271, 1.99", "-38.7806, -255.599, -71.7826, 0.44", "-38.8266, -255.98, -72.7611, 0.81", "-38.9538, -256.4, -74.1021, 0.52", "-39.1657, -256.994, -76.0779, 0.44", "-39.2937, -257.289, -77.1233, 1.11", "-39.3587, -257.419, -77.612, 1.11", "-39.7427, -258.046, -80.3008, 1.4", "-40.2557, -258.652, -83.38, 1.55" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_9", "dend_0", "dend_15", "dend_10", "dend_4", "dend_1", "dend_17", "dend_16", "dend_12", "dend_11", "dend_6", "dend_5", "dend_3", "dend_2", "dend_19", "dend_18", "dend_14", "dend_13", "dend_8", "dend_7" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_9", "dend_0", "dend_15", "dend_10", "dend_4", "dend_1", "dend_17", "dend_16", "dend_12", "dend_11", "dend_6", "dend_5", "dend_3", "dend_2", "dend_19", "dend_18", "dend_14", "dend_13", "dend_8", "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_19", "dend_18", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.13603E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.13603E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.999855",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.042115",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0012239999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.001693",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.386953",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "8.0E-6",
    "erev" : "-63.854015"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.5399997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.039862998",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "1.04239E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "5.2299997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.0054459996",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.503893",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "1.0E-4",
    "erev" : "-67.1289"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.78E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.15074699",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009017",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "4.0E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.0032419998",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "1.74E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bSTUT_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bSTUT_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bSTUT213_L4_BTC_93ff2bc104_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_9, id: dend_9, parent: soma_0
create dend_9
public dend_9
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_15, id: dend_15, parent: dend_9
create dend_15
public dend_15
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10
// Section: dend_4, id: dend_4, parent: dend_0
create dend_4
public dend_4
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_17, id: dend_17, parent: dend_15
create dend_17
public dend_17
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_12, id: dend_12, parent: dend_10
create dend_12
public dend_12
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_6, id: dend_6, parent: dend_4
create dend_6
public dend_6
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5
// Section: dend_3, id: dend_3, parent: dend_1
create dend_3
public dend_3
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_14, id: dend_14, parent: dend_12
create dend_14
public dend_14
// Section: dend_13, id: dend_13, parent: dend_12
create dend_13
public dend_13
// Section: dend_8, id: dend_8, parent: dend_6
create dend_8
public dend_8
// Section: dend_7, id: dend_7, parent: dend_6
create dend_7
public dend_7

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_23
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_19, dend_18, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bSTUT_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bSTUT_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_9(0), soma_0(0.49999821452163534)
    connect dend_0(0), soma_0(0.49999821452163534)
    connect axon_0(0), soma_0(1.0)
    connect dend_15(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)
    connect dend_4(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_17(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_12(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_6(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)
    connect dend_3(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_14(0), dend_12(1.0)
    connect dend_13(0), dend_12(1.0)
    connect dend_8(0), dend_6(1.0)
    connect dend_7(0), dend_6(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -1.49721, 11.7986, 0.0301706, 2.4623 ) }
    soma_0 { pt3dadd( -1.37308, 10.661, 0.0290426, 4.20373 ) }
    soma_0 { pt3dadd( -1.24895, 9.52332, 0.0279145, 5.59272 ) }
    soma_0 { pt3dadd( -1.12482, 8.38566, 0.0267864, 6.71614 ) }
    soma_0 { pt3dadd( -1.00068, 7.248, 0.0256584, 7.74544 ) }
    soma_0 { pt3dadd( -0.87655, 6.11034, 0.0245303, 8.57739 ) }
    soma_0 { pt3dadd( -0.752417, 4.97268, 0.0234023, 9.13171 ) }
    soma_0 { pt3dadd( -0.628284, 3.83502, 0.0222742, 9.51195 ) }
    soma_0 { pt3dadd( -0.504152, 2.69736, 0.0211462, 9.92921 ) }
    soma_0 { pt3dadd( -0.380019, 1.5597, 0.0200181, 10.275 ) }
    soma_0 { pt3dadd( -0.255886, 0.422041, 0.01889, 10.4231 ) }
    soma_0 { pt3dadd( -0.131754, -0.715618, 0.017762, 10.4046 ) }
    soma_0 { pt3dadd( -0.00762106, -1.85328, 0.0166339, 10.4069 ) }
    soma_0 { pt3dadd( 0.116512, -2.99094, 0.0155059, 10.1383 ) }
    soma_0 { pt3dadd( 0.240644, -4.1286, 0.0143778, 9.53645 ) }
    soma_0 { pt3dadd( 0.364777, -5.26626, 0.0132498, 8.49552 ) }
    soma_0 { pt3dadd( 0.48891, -6.40392, 0.0121217, 7.50349 ) }
    soma_0 { pt3dadd( 0.613042, -7.54158, 0.0109937, 6.64245 ) }
    soma_0 { pt3dadd( 0.737175, -8.67924, 0.0098656, 6.01482 ) }
    soma_0 { pt3dadd( 0.861308, -9.8169, 0.00873754, 4.86867 ) }
    soma_0 { pt3dadd( 0.98544, -10.9546, 0.00760949, 2.96361 ) }
    // Section: dend_9, id: dend_9, parent: soma_0 (entry count 21/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -1.78536, 12.0975, 1.5043, 2.36 ) }
    dend_9 { pt3dadd( -1.78536, 12.0975, 1.5043, 2.36 ) }
    dend_9 { pt3dadd( -1.91354, 12.8929, 1.69852, 2.06 ) }
    dend_9 { pt3dadd( -2.06386, 13.7262, 1.92716, 2.06 ) }
    dend_9 { pt3dadd( -2.08092, 13.8047, 1.9496, 2.06 ) }
    dend_9 { pt3dadd( -2.29816, 14.7175, 2.21182, 2.21 ) }
    dend_9 { pt3dadd( -2.63443, 15.9908, 2.63863, 2.21 ) }
    dend_9 { pt3dadd( -2.89694, 16.8289, 2.95203, 2.21 ) }
    dend_9 { pt3dadd( -2.91242, 16.8721, 2.97103, 2.21 ) }
    dend_9 { pt3dadd( -3.22722, 17.6892, 3.35919, 2.21 ) }
    dend_9 { pt3dadd( -3.37291, 18.0517, 3.5383, 2.36 ) }
    dend_9 { pt3dadd( -3.82223, 19.0999, 4.09631, 2.43 ) }
    dend_9 { pt3dadd( -4.10989, 19.731, 4.42286, 2.65 ) }
    dend_9 { pt3dadd( -4.55168, 20.717, 4.9548, 2.65 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 35/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 0.094648, -10.803, 0.0043065, 4.86 ) }
    dend_0 { pt3dadd( 0.094648, -10.803, 0.0043065, 4.86 ) }
    dend_0 { pt3dadd( -0.198983, -11.7947, -0.0250684, 4.57 ) }
    dend_0 { pt3dadd( -0.524503, -12.8751, -0.0638795, 4.2 ) }
    dend_0 { pt3dadd( -1.10571, -14.8141, -0.138747, 2.87 ) }
    dend_0 { pt3dadd( -1.57308, -16.4613, -0.219405, 2.58 ) }
    dend_0 { pt3dadd( -2.08291, -18.3341, -0.320318, 2.5 ) }
    dend_0 { pt3dadd( -2.43877, -19.737, -0.383938, 2.58 ) }
    dend_0 { pt3dadd( -2.45023, -19.7876, -0.385846, 2.58 ) }
    dend_0 { pt3dadd( -2.56875, -20.4662, -0.404138, 2.73 ) }
    dend_0 { pt3dadd( -2.74453, -22.076, -0.424895, 2.73 ) }
    dend_0 { pt3dadd( -2.78199, -23.1451, -0.397555, 2.36 ) }
    dend_0 { pt3dadd( -2.75815, -24.4698, -0.31589, 2.65 ) }
    dend_0 { pt3dadd( -2.69798, -25.6352, -0.221214, 2.87 ) }
    dend_0 { pt3dadd( -2.62052, -26.7661, -0.124368, 3.09 ) }
    dend_0 { pt3dadd( -2.51948, -27.8146, -0.0311012, 3.09 ) }
    dend_0 { pt3dadd( -2.3459, -29.1941, 0.097087, 3.32 ) }
    dend_0 { pt3dadd( -2.24928, -29.873, 0.156131, 3.02 ) }
    dend_0 { pt3dadd( -2.04215, -31.2697, 0.255236, 2.43 ) }
    dend_0 { pt3dadd( -1.79749, -32.9025, 0.370046, 2.36 ) }
    dend_0 { pt3dadd( -1.64667, -33.9704, 0.435745, 2.36 ) }
    dend_0 { pt3dadd( -1.56184, -34.5056, 0.457948, 2.36 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 57/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 0.98544, -10.9546, 0.00760949, 0.673295 ) }
    axon_0 { pt3dadd( 2.61247, -25.8661, 0.00760949, 0.673295 ) }
    axon_0 { pt3dadd( 4.23949, -40.7776, 0.00760949, 0.673295 ) }
    // Section: dend_15, id: dend_15, parent: dend_9 (entry count 60/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -4.55168, 20.717, 4.9548, 1.4 ) }
    dend_15 { pt3dadd( -5.17158, 22.0935, 5.16638, 1.4 ) }
    dend_15 { pt3dadd( -5.68233, 23.2905, 5.33255, 1.18 ) }
    dend_15 { pt3dadd( -6.02278, 24.146, 5.43487, 1.18 ) }
    dend_15 { pt3dadd( -6.3683, 25.0516, 5.53297, 1.18 ) }
    dend_15 { pt3dadd( -6.68497, 25.9213, 5.6147, 1.62 ) }
    dend_15 { pt3dadd( -6.87626, 26.4787, 5.67614, 1.99 ) }
    dend_15 { pt3dadd( -6.89554, 26.5498, 5.68349, 1.99 ) }
    dend_15 { pt3dadd( -7.09443, 27.4426, 5.75801, 2.06 ) }
    dend_15 { pt3dadd( -7.11777, 27.58, 5.76836, 2.06 ) }
    dend_15 { pt3dadd( -7.24129, 28.6245, 5.83237, 1.62 ) }
    dend_15 { pt3dadd( -7.34952, 30.0053, 5.93556, 1.4 ) }
    dend_15 { pt3dadd( -7.35512, 30.1055, 5.94364, 1.4 ) }
    dend_15 { pt3dadd( -7.39471, 31.2241, 6.03317, 1.47 ) }
    dend_15 { pt3dadd( -7.40832, 32.2104, 6.1106, 1.77 ) }
    dend_15 { pt3dadd( -7.41058, 33.0716, 6.16785, 1.92 ) }
    dend_15 { pt3dadd( -7.39684, 34.2793, 6.2252, 1.11 ) }
    dend_15 { pt3dadd( -7.39747, 34.5588, 6.23116, 1.11 ) }
    dend_15 { pt3dadd( -7.42041, 35.0992, 6.24605, 1.11 ) }
    dend_15 { pt3dadd( -7.43871, 35.2951, 6.25316, 1.11 ) }
    dend_15 { pt3dadd( -7.61196, 36.5082, 6.30288, 0.96 ) }
    dend_15 { pt3dadd( -7.76904, 37.2942, 6.31087, 0.96 ) }
    dend_15 { pt3dadd( -7.96305, 38.0623, 6.29354, 1.55 ) }
    dend_15 { pt3dadd( -8.15908, 38.7601, 6.2634, 2.36 ) }
    dend_15 { pt3dadd( -8.33534, 39.3986, 6.22576, 2.5 ) }
    dend_15 { pt3dadd( -8.47101, 39.9008, 6.19021, 2.8 ) }
    dend_15 { pt3dadd( -8.7501, 40.9682, 6.1037, 2.43 ) }
    dend_15 { pt3dadd( -8.96975, 41.8694, 6.02334, 1.99 ) }
    dend_15 { pt3dadd( -9.27175, 43.4726, 5.91257, 1.4 ) }
    dend_15 { pt3dadd( -9.36937, 44.31, 5.87132, 1.4 ) }
    dend_15 { pt3dadd( -9.37871, 44.518, 5.86872, 1.4 ) }
    dend_15 { pt3dadd( -9.34947, 45.5201, 5.88741, 1.62 ) }
    dend_15 { pt3dadd( -9.34324, 45.5852, 5.89217, 1.62 ) }
    dend_15 { pt3dadd( -9.14605, 47.0578, 6.05682, 1.03 ) }
    dend_15 { pt3dadd( -8.9694, 48.1858, 6.24791, 1.03 ) }
    dend_15 { pt3dadd( -8.8253, 49.1734, 6.45204, 1.47 ) }
    dend_15 { pt3dadd( -8.65735, 50.3928, 6.7261, 1.69 ) }
    dend_15 { pt3dadd( -8.48661, 51.839, 7.0682, 1.69 ) }
    dend_15 { pt3dadd( -8.41291, 52.8589, 7.30638, 2.14 ) }
    dend_15 { pt3dadd( -8.39985, 53.9681, 7.5541, 2.8 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_15 { pt3dadd( -8.44007, 54.9781, 7.7789, 3.24 ) }
    dend_15 { pt3dadd( -8.49923, 55.63, 7.90768, 3.39 ) }
    dend_15 { pt3dadd( -8.64218, 56.602, 8.07698, 2.21 ) }
    dend_15 { pt3dadd( -8.87045, 57.8147, 8.24838, 1.33 ) }
    dend_15 { pt3dadd( -9.1227, 58.9072, 8.37124, 1.18 ) }
    dend_15 { pt3dadd( -9.15369, 59.0229, 8.37801, 1.18 ) }
    dend_15 { pt3dadd( -9.46386, 60.1261, 8.40726, 1.47 ) }
    dend_15 { pt3dadd( -9.64547, 60.7547, 8.42331, 1.62 ) }
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 8/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -4.55168, 20.717, 4.9548, 1.03 ) }
    dend_10 { pt3dadd( -3.377, 21.5787, 4.97742, 1.03 ) }
    dend_10 { pt3dadd( -3.25248, 21.6655, 4.97947, 1.03 ) }
    dend_10 { pt3dadd( -2.28561, 22.3188, 4.99291, 1.03 ) }
    dend_10 { pt3dadd( -0.985542, 23.1821, 5.00936, 1.4 ) }
    dend_10 { pt3dadd( -0.928771, 23.2191, 5.01182, 1.4 ) }
    dend_10 { pt3dadd( 0.636154, 24.2438, 5.10482, 1.4 ) }
    dend_10 { pt3dadd( 0.695516, 24.2824, 5.10906, 1.4 ) }
    dend_10 { pt3dadd( 1.58328, 24.8985, 5.1843, 1.55 ) }
    dend_10 { pt3dadd( 1.64485, 24.9443, 5.19059, 1.55 ) }
    dend_10 { pt3dadd( 2.89647, 26.0163, 5.33861, 0.96 ) }
    dend_10 { pt3dadd( 3.5216, 26.6162, 5.41776, 0.96 ) }
    dend_10 { pt3dadd( 4.02688, 27.2036, 5.48999, 1.18 ) }
    dend_10 { pt3dadd( 4.56662, 27.9066, 5.56331, 1.4 ) }
    dend_10 { pt3dadd( 4.64841, 28.0294, 5.56943, 1.4 ) }
    dend_10 { pt3dadd( 5.103, 28.7525, 5.56578, 1.4 ) }
    dend_10 { pt3dadd( 5.15174, 28.8323, 5.56078, 1.4 ) }
    dend_10 { pt3dadd( 5.68424, 29.6612, 5.49751, 1.69 ) }
    dend_10 { pt3dadd( 6.07857, 30.2331, 5.45018, 1.92 ) }
    dend_10 { pt3dadd( 6.63473, 31.0119, 5.39754, 1.4 ) }
    dend_10 { pt3dadd( 7.35457, 32.0315, 5.34646, 1.11 ) }
    dend_10 { pt3dadd( 8.0244, 32.975, 5.31068, 1.11 ) }
    dend_10 { pt3dadd( 8.0796, 33.0555, 5.3089, 1.11 ) }
    dend_10 { pt3dadd( 8.68182, 33.9615, 5.3033, 1.11 ) }
    dend_10 { pt3dadd( 9.16532, 34.7499, 5.31701, 1.03 ) }
    dend_10 { pt3dadd( 9.67298, 35.6645, 5.36055, 1.03 ) }
    dend_10 { pt3dadd( 9.71388, 35.7539, 5.36463, 1.03 ) }
    dend_10 { pt3dadd( 10.1807, 36.9635, 5.4147, 1.03 ) }
    dend_10 { pt3dadd( 10.2021, 37.03, 5.41689, 1.03 ) }
    dend_10 { pt3dadd( 10.4123, 37.9235, 5.43514, 0.81 ) }
    dend_10 { pt3dadd( 10.4259, 38.0268, 5.43524, 0.81 ) }
    dend_10 { pt3dadd( 10.4558, 38.8107, 5.43578, 0.59 ) }
    dend_10 { pt3dadd( 10.4508, 38.9603, 5.43585, 0.59 ) }
    dend_10 { pt3dadd( 10.38, 39.7233, 5.45209, 0.59 ) }
    dend_10 { pt3dadd( 10.3576, 40.0028, 5.46162, 0.59 ) }
    dend_10 { pt3dadd( 10.3192, 40.6693, 5.48956, 0.74 ) }
    dend_10 { pt3dadd( 10.3162, 40.7734, 5.49434, 0.74 ) }
    dend_10 { pt3dadd( 10.3474, 41.948, 5.5511, 0.74 ) }
    dend_10 { pt3dadd( 10.4261, 42.8367, 5.59225, 1.25 ) }
    dend_10 { pt3dadd( 10.5456, 43.5282, 5.62199, 1.69 ) }
    dend_10 { pt3dadd( 10.775, 44.5062, 5.65765, 1.4 ) }
    dend_10 { pt3dadd( 10.7941, 44.5734, 5.65964, 1.4 ) }
    dend_10 { pt3dadd( 11.0305, 45.3898, 5.67723, 2.06 ) }
    dend_10 { pt3dadd( 11.3038, 46.2977, 5.69063, 2.21 ) }
    dend_10 { pt3dadd( 11.5916, 47.2598, 5.69672, 1.77 ) }
    dend_10 { pt3dadd( 11.9076, 48.3491, 5.70527, 1.11 ) }
    dend_10 { pt3dadd( 12.1359, 49.1996, 5.71279, 1.11 ) }
    dend_10 { pt3dadd( 12.3341, 50.0255, 5.72048, 1.4 ) }
    dend_10 { pt3dadd( 12.5623, 51.1471, 5.73168, 0.59 ) }
    dend_10 { pt3dadd( 12.5735, 51.2163, 5.7324, 0.59 ) }
    dend_10 { pt3dadd( 12.6782, 52.2502, 5.76675, 0.44 ) }
    dend_10 { pt3dadd( 12.7062, 53.0483, 5.81162, 1.11 ) }
    dend_10 { pt3dadd( 12.7008, 53.6469, 5.85646, 1.33 ) }
    dend_10 { pt3dadd( 12.6972, 53.7845, 5.86458, 1.33 ) }
    dend_10 { pt3dadd( 12.6692, 54.2042, 5.87979, 1.33 ) }
    dend_10 { pt3dadd( 12.5956, 55.1772, 5.88432, 0.52 ) }
    dend_10 { pt3dadd( 12.473, 56.4469, 5.85587, 0.52 ) }
    dend_10 { pt3dadd( 12.4653, 56.5258, 5.85199, 0.52 ) }
    dend_10 { pt3dadd( 12.3875, 57.3241, 5.76844, 0.96 ) }
    dend_10 { pt3dadd( 12.3114, 58.2808, 5.59461, 1.55 ) }
    dend_10 { pt3dadd( 12.2628, 59.0463, 5.36574, 1.77 ) }
    dend_10 { pt3dadd( 12.2442, 59.4297, 5.20695, 1.99 ) }
    dend_10 { pt3dadd( 12.2421, 59.4819, 5.18336, 1.99 ) }
    dend_10 { pt3dadd( 12.2112, 60.4504, 4.75749, 1.99 ) }
    dend_10 { pt3dadd( 12.1882, 61.296, 4.39054, 1.4 ) }
    dend_10 { pt3dadd( 12.1696, 62.7497, 3.75333, 0.44 ) }
    dend_10 { pt3dadd( 12.163, 63.6289, 3.37428, 0.96 ) }
    dend_10 { pt3dadd( 12.1694, 64.3034, 3.10148, 1.4 ) }
    dend_10 { pt3dadd( 12.1846, 65.0297, 2.83802, 1.77 ) }
    dend_10 { pt3dadd( 12.1876, 65.088, 2.82128, 1.77 ) }
    dend_10 { pt3dadd( 12.2291, 65.6439, 2.71794, 1.99 ) }
    dend_10 { pt3dadd( 12.2468, 65.7996, 2.70685, 1.99 ) }
    dend_10 { pt3dadd( 12.3122, 66.3083, 2.6947, 1.99 ) }
    dend_10 { pt3dadd( 12.3281, 66.4476, 2.69174, 1.99 ) }
    dend_10 { pt3dadd( 12.3875, 67.1115, 2.66024, 1.69 ) }
    dend_10 { pt3dadd( 12.4321, 67.9342, 2.6109, 1.11 ) }
    dend_10 { pt3dadd( 12.4503, 68.7636, 2.55585, 0.44 ) }
    dend_10 { pt3dadd( 12.4415, 69.7688, 2.48751, 0.37 ) }
    dend_10 { pt3dadd( 12.3894, 70.6948, 2.41925, 1.03 ) }
    dend_10 { pt3dadd( 12.3351, 71.4492, 2.38664, 1.03 ) }
    dend_10 { pt3dadd( 12.2719, 72.3706, 2.37063, 0.44 ) }
    dend_10 { pt3dadd( 12.2392, 72.9284, 2.37224, 0.88 ) }
    dend_10 { pt3dadd( 12.2221, 73.4388, 2.38185, 1.18 ) }
    dend_10 { pt3dadd( 12.2195, 74.1308, 2.40385, 1.18 ) }
    dend_10 { pt3dadd( 12.2948, 75.6853, 2.46201, 0.37 ) }
    dend_10 { pt3dadd( 12.3762, 76.5275, 2.49954, 0.37 ) }
    dend_10 { pt3dadd( 12.5546, 77.7476, 2.53983, 1.33 ) }
    dend_10 { pt3dadd( 12.7029, 78.6076, 2.56281, 2.36 ) }
    dend_10 { pt3dadd( 12.7971, 79.081, 2.56937, 2.95 ) }
    dend_10 { pt3dadd( 12.9245, 79.6076, 2.5615, 3.24 ) }
    dend_10 { pt3dadd( 12.9451, 79.6954, 2.55243, 3.24 ) }
    dend_10 { pt3dadd( 13.0004, 79.9485, 2.52057, 3.24 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    // Section: dend_4, id: dend_4, parent: dend_0 (entry count 0/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -1.56184, -34.5056, 0.457948, 2.06 ) }
    dend_4 { pt3dadd( -1.52592, -36.0663, 0.565803, 2.06 ) }
    dend_4 { pt3dadd( -1.47037, -38.8227, 0.490641, 2.06 ) }
    dend_4 { pt3dadd( -1.42275, -40.7384, 0.312801, 2.06 ) }
    dend_4 { pt3dadd( -1.33151, -42.7072, 0.0549358, 2.06 ) }
    dend_4 { pt3dadd( -1.15662, -45.2008, -0.363727, 2.14 ) }
    dend_4 { pt3dadd( -1.00405, -46.9166, -0.678644, 2.14 ) }
    dend_4 { pt3dadd( -0.726907, -49.4871, -1.28978, 2.43 ) }
    dend_4 { pt3dadd( -0.574459, -50.9047, -1.67994, 2.8 ) }
    dend_4 { pt3dadd( -0.356652, -52.8303, -2.19162, 2.36 ) }
    dend_4 { pt3dadd( -0.0458979, -55.4452, -2.87094, 2.36 ) }
    dend_4 { pt3dadd( 0.215535, -57.448, -3.3599, 2.36 ) }
    dend_4 { pt3dadd( 0.511015, -59.8483, -3.91664, 2.36 ) }
    dend_4 { pt3dadd( 0.757228, -62.3429, -4.4394, 2.14 ) }
    dend_4 { pt3dadd( 0.901357, -64.5978, -4.93291, 2.14 ) }
    dend_4 { pt3dadd( 0.945452, -66.8133, -5.44267, 2.28 ) }
    dend_4 { pt3dadd( 0.925371, -67.6258, -5.6318, 2.28 ) }
    dend_4 { pt3dadd( 0.76952, -69.6649, -6.12182, 1.69 ) }
    dend_4 { pt3dadd( 0.477275, -71.8699, -6.56177, 1.18 ) }
    dend_4 { pt3dadd( 0.194509, -73.1707, -6.72291, 1.18 ) }
    dend_4 { pt3dadd( -0.126517, -74.0628, -6.6589, 1.18 ) }
    dend_4 { pt3dadd( -0.628038, -74.9862, -6.31753, 1.18 ) }
    dend_4 { pt3dadd( -1.28169, -75.8725, -5.74194, 0.96 ) }
    dend_4 { pt3dadd( -2.47991, -77.1162, -4.6089, 1.11 ) }
    dend_4 { pt3dadd( -3.78715, -78.2324, -3.48921, 1.69 ) }
    dend_4 { pt3dadd( -5.22376, -79.3746, -2.4334, 1.55 ) }
    dend_4 { pt3dadd( -6.11952, -80.0367, -1.96441, 1.92 ) }
    dend_4 { pt3dadd( -7.00059, -80.6845, -1.67407, 2.21 ) }
    dend_4 { pt3dadd( -8.22446, -81.6451, -1.53808, 2.06 ) }
    dend_4 { pt3dadd( -9.80358, -82.9587, -1.64848, 1.99 ) }
    dend_4 { pt3dadd( -11.0327, -84.0677, -1.86412, 1.77 ) }
    dend_4 { pt3dadd( -12.4244, -85.4488, -2.11821, 1.92 ) }
    dend_4 { pt3dadd( -13.6462, -86.8022, -2.27691, 1.84 ) }
    dend_4 { pt3dadd( -14.8056, -88.2566, -2.2511, 1.69 ) }
    dend_4 { pt3dadd( -15.5274, -89.3316, -2.07482, 1.11 ) }
    dend_4 { pt3dadd( -16.297, -90.7846, -1.70469, 0.96 ) }
    dend_4 { pt3dadd( -17.0403, -92.5783, -1.15852, 1.25 ) }
    dend_4 { pt3dadd( -17.3965, -93.6742, -0.834866, 0.81 ) }
    dend_4 { pt3dadd( -18.0297, -96.1059, -0.400266, 0.74 ) }
    dend_4 { pt3dadd( -18.3212, -97.4679, -0.34091, 0.37 ) }
    dend_4 { pt3dadd( -18.6572, -99.6092, -0.574964, 1.47 ) }
    dend_4 { pt3dadd( -18.7574, -100.637, -0.844493, 2.14 ) }
    dend_4 { pt3dadd( -18.8782, -102.58, -1.66102, 2.5 ) }
    dend_4 { pt3dadd( -18.9466, -105.033, -3.051, 1.03 ) }
    dend_4 { pt3dadd( -18.96, -106.296, -3.91833, 0.88 ) }
    dend_4 { pt3dadd( -18.9284, -107.264, -4.6224, 0.44 ) }
    dend_4 { pt3dadd( -18.7911, -108.901, -5.87693, 0.44 ) }
    dend_4 { pt3dadd( -18.5411, -110.786, -7.34003, 1.18 ) }
    dend_4 { pt3dadd( -18.1885, -112.929, -8.9139, 1.62 ) }
    dend_4 { pt3dadd( -18.1647, -113.066, -9.00786, 1.62 ) }
    dend_4 { pt3dadd( -17.9044, -114.544, -9.9298, 1.62 ) }
    dend_4 { pt3dadd( -17.5781, -116.813, -11.1653, 1.47 ) }
    dend_4 { pt3dadd( -17.4166, -118.31, -11.8183, 1.99 ) }
    dend_4 { pt3dadd( -17.3636, -119.532, -12.2184, 1.99 ) }
    dend_4 { pt3dadd( -17.3885, -120.646, -12.496, 1.99 ) }
    dend_4 { pt3dadd( -17.5683, -122.779, -12.9561, 0.59 ) }
    dend_4 { pt3dadd( -17.831, -124.322, -13.224, 0.52 ) }
    dend_4 { pt3dadd( -18.1127, -125.456, -13.3071, 0.52 ) }
    dend_4 { pt3dadd( -18.9562, -128.081, -13.3569, 2.8 ) }
    dend_4 { pt3dadd( -19.3295, -129.138, -13.3486, 3.17 ) }
    dend_4 { pt3dadd( -19.718, -130.182, -13.2421, 3.46 ) }
    dend_4 { pt3dadd( -20.0604, -131.173, -12.9821, 3.46 ) }
    dend_4 { pt3dadd( -20.8399, -133.582, -12.2013, 1.69 ) }
    dend_4 { pt3dadd( -21.2531, -135.038, -11.6088, 1.11 ) }
    dend_4 { pt3dadd( -21.4567, -135.931, -11.1295, 1.25 ) }
    dend_4 { pt3dadd( -21.9275, -138.329, -9.67624, 1.99 ) }
    dend_4 { pt3dadd( -22.2772, -140.719, -8.02504, 1.47 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 67/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -1.56184, -34.5056, 0.457948, 0.96 ) }
    dend_1 { pt3dadd( -0.331006, -35.5911, -0.958107, 0.96 ) }
    dend_1 { pt3dadd( 0.711346, -36.4521, -2.10265, 0.81 ) }
    dend_1 { pt3dadd( 2.30911, -37.6269, -3.66143, 0.59 ) }
    dend_1 { pt3dadd( 2.73876, -37.9012, -4.03476, 0.88 ) }
    dend_1 { pt3dadd( 3.1601, -38.134, -4.3616, 1.11 ) }
    dend_1 { pt3dadd( 3.22931, -38.1663, -4.41056, 1.11 ) }
    dend_1 { pt3dadd( 4.18859, -38.4155, -5.00951, 1.25 ) }
    dend_1 { pt3dadd( 5.01603, -38.5543, -5.60753, 0.88 ) }
    dend_1 { pt3dadd( 5.93237, -38.6717, -6.35631, 0.52 ) }
    dend_1 { pt3dadd( 6.40525, -38.7551, -6.88485, 0.81 ) }
    dend_1 { pt3dadd( 7.05823, -38.928, -7.79753, 0.96 ) }
    dend_1 { pt3dadd( 7.99684, -39.3013, -9.43412, 0.52 ) }
    dend_1 { pt3dadd( 8.86749, -40.0007, -11.9187, 0.52 ) }
    dend_1 { pt3dadd( 8.87852, -40.0265, -11.9903, 0.52 ) }
    dend_1 { pt3dadd( 8.82742, -40.8818, -13.7898, 0.96 ) }
    dend_1 { pt3dadd( 8.74392, -41.2084, -14.3327, 1.11 ) }
    dend_1 { pt3dadd( 8.58337, -41.6229, -14.8853, 1.11 ) }
    dend_1 { pt3dadd( 8.02919, -42.9815, -16.278, 0.66 ) }
    dend_1 { pt3dadd( 7.81069, -43.6597, -16.8601, 0.37 ) }
    dend_1 { pt3dadd( 7.65958, -44.6763, -17.7196, 0.37 ) }
    dend_1 { pt3dadd( 7.7067, -45.3948, -18.3308, 0.59 ) }
    dend_1 { pt3dadd( 7.72057, -45.455, -18.3844, 0.59 ) }
    dend_1 { pt3dadd( 8.14769, -46.4157, -19.2828, 1.03 ) }
    dend_1 { pt3dadd( 8.66295, -47.2587, -20.1148, 1.69 ) }
    dend_1 { pt3dadd( 9.2645, -48.1923, -21.0658, 2.21 ) }
    dend_1 { pt3dadd( 9.78266, -49.026, -21.9086, 2.8 ) }
    dend_1 { pt3dadd( 9.98562, -49.4004, -22.2814, 2.8 ) }
    dend_1 { pt3dadd( 10.8191, -51.2273, -24.0128, 1.33 ) }
    dend_1 { pt3dadd( 11.2836, -52.5246, -25.1382, 0.52 ) }
    dend_1 { pt3dadd( 11.4589, -53.2011, -25.6576, 0.66 ) }
    dend_1 { pt3dadd( 11.56, -53.7347, -26.0043, 0.66 ) }
    dend_1 { pt3dadd( 11.6975, -54.5244, -26.4453, 0.29 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_1 { pt3dadd( 11.8137, -55.2223, -26.7858, 0.37 ) }
    dend_1 { pt3dadd( 11.9436, -56.0204, -27.0123, 0.37 ) }
    dend_1 { pt3dadd( 11.9845, -56.1162, -27.0377, 0.37 ) }
    dend_1 { pt3dadd( 12.5398, -56.8307, -27.3609, 0.66 ) }
    dend_1 { pt3dadd( 13.0817, -57.4164, -27.7001, 0.96 ) }
    dend_1 { pt3dadd( 13.1276, -57.4618, -27.7285, 0.96 ) }
    dend_1 { pt3dadd( 13.6503, -57.9811, -28.0605, 0.96 ) }
    dend_1 { pt3dadd( 14.6971, -59.0532, -28.812, 0.52 ) }
    dend_1 { pt3dadd( 15.6165, -60.0446, -29.4976, 0.37 ) }
    dend_1 { pt3dadd( 16.7071, -61.2607, -30.3562, 1.77 ) }
    dend_1 { pt3dadd( 17.1312, -61.7554, -30.6979, 2.36 ) }
    dend_1 { pt3dadd( 17.5928, -62.3082, -31.0769, 2.58 ) }
    dend_1 { pt3dadd( 18.9937, -64.0614, -32.2614, 0.74 ) }
    dend_1 { pt3dadd( 19.4361, -64.6784, -32.6155, 0.74 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 14/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 4.23949, -40.7776, 0.00760949, 0.15 ) }
    axon_1 { pt3dadd( 5.86652, -55.6891, 0.00760949, 0.15 ) }
    axon_1 { pt3dadd( 7.49354, -70.6006, 0.00760949, 0.15 ) }
    // Section: dend_17, id: dend_17, parent: dend_15 (entry count 17/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -9.64547, 60.7547, 8.42331, 0.81 ) }
    dend_17 { pt3dadd( -10.1, 61.4021, 8.40592, 0.81 ) }
    dend_17 { pt3dadd( -10.6792, 62.2724, 8.36932, 0.74 ) }
    dend_17 { pt3dadd( -11.1744, 63.0483, 8.33749, 0.74 ) }
    dend_17 { pt3dadd( -11.2111, 63.1065, 8.33271, 0.74 ) }
    dend_17 { pt3dadd( -11.8858, 64.1924, 8.22795, 0.74 ) }
    dend_17 { pt3dadd( -12.2118, 64.7093, 8.16224, 1.33 ) }
    dend_17 { pt3dadd( -12.5363, 65.2303, 8.06824, 1.92 ) }
    dend_17 { pt3dadd( -12.8884, 65.7946, 7.94358, 1.33 ) }
    dend_17 { pt3dadd( -13.396, 66.5671, 7.7687, 1.11 ) }
    dend_17 { pt3dadd( -13.7799, 67.1176, 7.64257, 1.47 ) }
    dend_17 { pt3dadd( -14.3013, 67.8147, 7.49254, 1.18 ) }
    dend_17 { pt3dadd( -14.3315, 67.8536, 7.48433, 1.18 ) }
    dend_17 { pt3dadd( -14.802, 68.4613, 7.35858, 0.66 ) }
    dend_17 { pt3dadd( -15.2264, 69.0431, 7.23502, 0.66 ) }
    dend_17 { pt3dadd( -15.7474, 69.827, 7.08288, 1.47 ) }
    dend_17 { pt3dadd( -16.0571, 70.3669, 7.0004, 1.99 ) }
    dend_17 { pt3dadd( -16.4137, 71.0807, 6.92081, 1.99 ) }
    dend_17 { pt3dadd( -16.9805, 72.3647, 6.80794, 0.66 ) }
    dend_17 { pt3dadd( -17.2671, 73.1297, 6.75697, 0.52 ) }
    dend_17 { pt3dadd( -17.438, 73.6771, 6.73511, 0.59 ) }
    dend_17 { pt3dadd( -17.7435, 74.774, 6.76752, 0.74 ) }
    dend_17 { pt3dadd( -17.7626, 74.8449, 6.77279, 0.74 ) }
    dend_17 { pt3dadd( -17.9562, 75.492, 6.85699, 1.33 ) }
    dend_17 { pt3dadd( -18.1248, 76.0065, 6.94851, 1.62 ) }
    dend_17 { pt3dadd( -18.4127, 76.7401, 7.0912, 1.18 ) }
    dend_17 { pt3dadd( -18.8075, 77.571, 7.21992, 0.66 ) }
    dend_17 { pt3dadd( -19.1459, 78.2031, 7.29344, 0.66 ) }
    dend_17 { pt3dadd( -19.7985, 79.3329, 7.41332, 2.28 ) }
    dend_17 { pt3dadd( -20.1608, 79.899, 7.4716, 2.73 ) }
    dend_17 { pt3dadd( -20.4861, 80.3757, 7.51551, 2.95 ) }
    dend_17 { pt3dadd( -21.3473, 81.5876, 7.60533, 1.03 ) }
    dend_17 { pt3dadd( -21.3831, 81.6365, 7.60807, 1.03 ) }
    dend_17 { pt3dadd( -21.7393, 82.125, 7.63958, 0.81 ) }
    dend_17 { pt3dadd( -22.1521, 82.6928, 7.68546, 0.44 ) }
    dend_17 { pt3dadd( -22.5713, 83.2904, 7.74339, 0.44 ) }
    dend_17 { pt3dadd( -23.052, 83.9989, 7.82558, 0.44 ) }
    dend_17 { pt3dadd( -23.5154, 84.6779, 7.92455, 1.11 ) }
    dend_17 { pt3dadd( -23.86, 85.1796, 7.99774, 1.69 ) }
    dend_17 { pt3dadd( -24.3197, 85.8568, 8.09417, 2.21 ) }
    dend_17 { pt3dadd( -24.5956, 86.2627, 8.1515, 2.5 ) }
    dend_17 { pt3dadd( -25.2914, 87.2396, 8.29734, 1.25 ) }
    dend_17 { pt3dadd( -25.9189, 88.0988, 8.42823, 0.44 ) }
    dend_17 { pt3dadd( -26.4312, 88.7911, 8.53344, 0.44 ) }
    dend_17 { pt3dadd( -26.8372, 89.3319, 8.61735, 1.03 ) }
    dend_17 { pt3dadd( -27.2805, 89.934, 8.70819, 1.33 ) }
    dend_17 { pt3dadd( -27.3906, 90.0871, 8.73054, 1.33 ) }
    dend_17 { pt3dadd( -27.6437, 90.4493, 8.78119, 1.47 ) }
    dend_17 { pt3dadd( -28.0991, 91.0951, 8.87272, 0.88 ) }
    dend_17 { pt3dadd( -28.4986, 91.637, 8.95463, 0.59 ) }
    dend_17 { pt3dadd( -28.9174, 92.1709, 9.04277, 0.44 ) }
    dend_17 { pt3dadd( -28.9675, 92.2302, 9.0536, 0.44 ) }
    dend_17 { pt3dadd( -29.5914, 92.8999, 9.19311, 0.44 ) }
    dend_17 { pt3dadd( -29.9253, 93.2045, 9.27132, 0.66 ) }
    dend_17 { pt3dadd( -30.0735, 93.3246, 9.30703, 0.66 ) }
    dend_17 { pt3dadd( -30.5276, 93.6838, 9.41697, 0.66 ) }
    dend_17 { pt3dadd( -30.9733, 94.0826, 9.53335, 0.66 ) }
    dend_17 { pt3dadd( -31.383, 94.5382, 9.64573, 0.37 ) }
    dend_17 { pt3dadd( -31.6615, 94.9445, 9.71564, 0.37 ) }
    dend_17 { pt3dadd( -32.0527, 95.6523, 9.79726, 0.66 ) }
    dend_17 { pt3dadd( -32.2834, 96.1945, 9.82022, 0.96 ) }
    dend_17 { pt3dadd( -32.533, 96.9914, 9.80732, 0.29 ) }
    dend_17 { pt3dadd( -32.6866, 97.6142, 9.77798, 0.44 ) }
    dend_17 { pt3dadd( -32.8231, 98.2755, 9.73314, 0.96 ) }
    dend_17 { pt3dadd( -32.8445, 98.383, 9.72479, 0.96 ) }
    dend_17 { pt3dadd( -33.0582, 99.3669, 9.64222, 1.77 ) }
    dend_17 { pt3dadd( -33.3076, 100.311, 9.57049, 2.95 ) }
    dend_17 { pt3dadd( -33.4627, 100.772, 9.44521, 3.54 ) }
    dend_17 { pt3dadd( -33.4821, 100.826, 9.42421, 3.54 ) }
    dend_17 { pt3dadd( -33.6887, 101.412, 9.15545, 3.76 ) }
    dend_17 { pt3dadd( -33.7062, 101.462, 9.12942, 3.76 ) }
    dend_17 { pt3dadd( -33.9483, 102.168, 8.71926, 3.46 ) }
    dend_17 { pt3dadd( -34.7312, 104.596, 7.22846, 0.81 ) }
    dend_17 { pt3dadd( -34.7481, 104.654, 7.19507, 0.81 ) }
    dend_17 { pt3dadd( -34.8861, 105.156, 6.94107, 0.81 ) }
    dend_17 { pt3dadd( -34.8997, 105.212, 6.9201, 0.81 ) }
    dend_17 { pt3dadd( -35.0347, 105.917, 6.77398, 1.11 ) }
    dend_17 { pt3dadd( -35.1094, 106.449, 6.74603, 1.25 ) }
    dend_17 { pt3dadd( -35.2116, 107.446, 6.85049, 0.37 ) }
    dend_17 { pt3dadd( -35.2921, 108.25, 6.94284, 0.29 ) }
    dend_17 { pt3dadd( -35.4338, 109.454, 7.04812, 0.29 ) }
    dend_17 { pt3dadd( -35.6069, 110.768, 7.13294, 0.29 ) }
    dend_17 { pt3dadd( -35.6174, 110.837, 7.13581, 0.29 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_17 { pt3dadd( -35.7652, 111.703, 7.16637, 0.29 ) }
    dend_17 { pt3dadd( -35.783, 111.803, 7.16685, 0.29 ) }
    dend_17 { pt3dadd( -35.974, 112.835, 7.08358, 0.44 ) }
    dend_17 { pt3dadd( -35.9996, 112.922, 7.05712, 0.44 ) }
    dend_17 { pt3dadd( -36.2083, 113.317, 6.86347, 0.44 ) }
    dend_17 { pt3dadd( -40.2848, 120.639, 6.88563, 0.44 ) }
    dend_17 { pt3dadd( -44.4641, 127.893, 7.1164, 0.44 ) }
    dend_17 { pt3dadd( -48.5693, 135.186, 6.67543, 0.44 ) }
    dend_17 { pt3dadd( -51.7804, 142.693, 4.70705, 0.44 ) }
    dend_17 { pt3dadd( -55.4694, 149.524, 1.63059, 0.44 ) }
    dend_17 { pt3dadd( -58.2772, 155.827, -3.00119, 0.44 ) }
    dend_17 { pt3dadd( -61.5336, 160.925, -8.58564, 0.44 ) }
    dend_17 { pt3dadd( -63.0709, 167.498, -13.4589, 0.44 ) }
    dend_17 { pt3dadd( -64.3552, 174.371, -18.0182, 0.44 ) }
    dend_17 { pt3dadd( -65.4199, 180.509, -23.492, 0.44 ) }
    dend_17 { pt3dadd( -65.0581, 187.458, -28.0968, 0.44 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 16/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -9.64547, 60.7547, 8.42331, 0.29 ) }
    dend_16 { pt3dadd( -9.05681, 62.6854, 8.46095, 0.29 ) }
    dend_16 { pt3dadd( -8.86943, 63.4699, 8.49759, 0.44 ) }
    dend_16 { pt3dadd( -8.7473, 64.2354, 8.54145, 0.44 ) }
    dend_16 { pt3dadd( -8.64409, 65.3637, 8.61217, 0.29 ) }
    dend_16 { pt3dadd( -8.64151, 65.4289, 8.61616, 0.29 ) }
    dend_16 { pt3dadd( -8.63753, 66.4105, 8.67303, 0.29 ) }
    dend_16 { pt3dadd( -8.65552, 66.5688, 8.69076, 0.29 ) }
    dend_16 { pt3dadd( -8.75001, 67.3873, 8.72442, 0.29 ) }
    dend_16 { pt3dadd( -8.81789, 68.071, 8.71169, 0.96 ) }
    dend_16 { pt3dadd( -8.84936, 68.6766, 8.65669, 1.33 ) }
    dend_16 { pt3dadd( -8.85247, 69.0403, 8.61413, 1.33 ) }
    dend_16 { pt3dadd( -8.77016, 70.6051, 8.40464, 0.52 ) }
    dend_16 { pt3dadd( -8.63544, 71.8273, 8.23421, 0.29 ) }
    dend_16 { pt3dadd( -8.61165, 71.9581, 8.21627, 0.29 ) }
    dend_16 { pt3dadd( -8.39154, 72.9403, 8.08862, 0.81 ) }
    dend_16 { pt3dadd( -8.37462, 73.01, 8.08059, 0.81 ) }
    dend_16 { pt3dadd( -8.2179, 73.6893, 8.01637, 1.03 ) }
    dend_16 { pt3dadd( -8.11207, 74.2742, 7.97799, 0.74 ) }
    dend_16 { pt3dadd( -7.97297, 75.2008, 7.96381, 0.29 ) }
    dend_16 { pt3dadd( -7.90534, 75.7961, 7.96902, 0.44 ) }
    dend_16 { pt3dadd( -7.88481, 76.257, 7.98655, 0.44 ) }
    dend_16 { pt3dadd( -7.88046, 76.8692, 8.00667, 0.29 ) }
    dend_16 { pt3dadd( -7.92875, 77.4419, 8.00829, 0.74 ) }
    dend_16 { pt3dadd( -8.24007, 87.7437, 8.82366, 0.74 ) }
    // Section: dend_12, id: dend_12, parent: dend_10 (entry count 41/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 13.0004, 79.9485, 2.52057, 0.37 ) }
    dend_12 { pt3dadd( 13.321, 81.6611, 1.87002, 0.37 ) }
    dend_12 { pt3dadd( 13.4699, 82.2398, 1.57543, 0.37 ) }
    dend_12 { pt3dadd( 13.5971, 82.6989, 1.32816, 0.96 ) }
    dend_12 { pt3dadd( 13.6152, 82.7542, 1.30026, 0.96 ) }
    dend_12 { pt3dadd( 13.9033, 83.5922, 0.890522, 0.96 ) }
    dend_12 { pt3dadd( 14.4153, 85.1508, 0.164855, 0.37 ) }
    dend_12 { pt3dadd( 14.6918, 86.1368, -0.297444, 0.59 ) }
    dend_12 { pt3dadd( 14.908, 86.9567, -0.717542, 0.37 ) }
    dend_12 { pt3dadd( 15.1676, 88.069, -1.303, 0.37 ) }
    dend_12 { pt3dadd( 15.1849, 88.1612, -1.35072, 0.37 ) }
    dend_12 { pt3dadd( 15.2617, 88.8071, -1.71522, 0.29 ) }
    dend_12 { pt3dadd( 15.3273, 90.0556, -2.42922, 1.47 ) }
    dend_12 { pt3dadd( 15.3365, 91.075, -3.01954, 1.92 ) }
    dend_12 { pt3dadd( 15.3318, 91.4544, -3.24798, 2.21 ) }
    dend_12 { pt3dadd( 15.3278, 91.8373, -3.49322, 2.21 ) }
    dend_12 { pt3dadd( 15.3724, 93.9017, -4.81952, 0.37 ) }
    dend_12 { pt3dadd( 15.4291, 94.9928, -5.51323, 0.96 ) }
    dend_12 { pt3dadd( 15.4679, 95.5513, -5.85337, 1.62 ) }
    dend_12 { pt3dadd( 15.5164, 96.1541, -6.21548, 1.84 ) }
    dend_12 { pt3dadd( 15.6643, 97.7681, -7.19686, 0.29 ) }
    dend_12 { pt3dadd( 15.761, 98.7357, -7.77521, 1.03 ) }
    dend_12 { pt3dadd( 15.7954, 99.0998, -7.96522, 1.4 ) }
    dend_12 { pt3dadd( 15.8117, 99.3163, -8.0827, 1.4 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 65/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 13.0004, 79.9485, 2.52057, 0.37 ) }
    dend_11 { pt3dadd( 14.0576, 81.8058, 3.04421, 0.37 ) }
    dend_11 { pt3dadd( 14.6213, 82.7849, 3.2013, 0.37 ) }
    dend_11 { pt3dadd( 15.1541, 83.7407, 3.23416, 0.81 ) }
    dend_11 { pt3dadd( 15.1854, 83.794, 3.23229, 0.81 ) }
    dend_11 { pt3dadd( 15.4886, 84.2973, 3.19907, 0.81 ) }
    dend_11 { pt3dadd( 15.999, 85.144, 3.0814, 0.37 ) }
    dend_11 { pt3dadd( 16.5138, 85.9258, 2.79934, 0.29 ) }
    dend_11 { pt3dadd( 16.9588, 86.5857, 2.5148, 0.59 ) }
    dend_11 { pt3dadd( 17.388, 87.2175, 2.21177, 0.22 ) }
    dend_11 { pt3dadd( 17.4126, 87.2575, 2.19277, 0.22 ) }
    dend_11 { pt3dadd( 17.8468, 88.1035, 1.804, 1.18 ) }
    dend_11 { pt3dadd( 17.9734, 88.4302, 1.68722, 1.69 ) }
    dend_11 { pt3dadd( 18.1248, 89.0439, 1.54662, 1.99 ) }
    dend_11 { pt3dadd( 18.1669, 89.4158, 1.51859, 1.99 ) }
    dend_11 { pt3dadd( 18.1085, 90.2601, 1.56215, 0.44 ) }
    dend_11 { pt3dadd( 18.007, 90.8123, 1.6765, 0.29 ) }
    dend_11 { pt3dadd( 17.4704, 92.206, 2.35012, 0.29 ) }
    dend_11 { pt3dadd( 17.4441, 92.2508, 2.37795, 0.29 ) }
    dend_11 { pt3dadd( 21.3905, 99.7393, 3.19069, 0.29 ) }
    dend_11 { pt3dadd( 24.663, 107.401, 4.96549, 0.29 ) }
    dend_11 { pt3dadd( 28.0737, 114.884, 7.13092, 0.29 ) }
    dend_11 { pt3dadd( 30.9204, 122.276, 10.203, 0.29 ) }
    dend_11 { pt3dadd( 34.7519, 128.854, 13.8338, 0.29 ) }
    dend_11 { pt3dadd( 38.0562, 134.776, 18.7722, 0.29 ) }
    dend_11 { pt3dadd( 41.7559, 140.611, 23.5201, 0.29 ) }
    // Section: dend_6, id: dend_6, parent: dend_4 (entry count 91/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -22.2772, -140.719, -8.02504, 0.52 ) }
    dend_6 { pt3dadd( -22.2656, -142.68, -7.35877, 0.52 ) }
    dend_6 { pt3dadd( -22.2132, -143.447, -7.18588, 0.81 ) }
    dend_6 { pt3dadd( -22.1457, -144.121, -7.12818, 1.03 ) }
    dend_6 { pt3dadd( -22.1382, -144.206, -7.13041, 1.03 ) }
    dend_6 { pt3dadd( -22.1043, -144.95, -7.19091, 1.03 ) }
    dend_6 { pt3dadd( -22.1092, -145.776, -7.27711, 0.52 ) }
    dend_6 { pt3dadd( -22.1631, -146.503, -7.42357, 0.52 ) }
    dend_6 { pt3dadd( -22.314, -147.374, -7.56333, 0.52 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_6 { pt3dadd( -22.5097, -148.091, -7.64685, 0.66 ) }
    dend_6 { pt3dadd( -22.7708, -148.834, -7.65247, 0.66 ) }
    dend_6 { pt3dadd( -23.015, -149.385, -7.60211, 0.88 ) }
    dend_6 { pt3dadd( -23.6382, -150.631, -7.29436, 1.03 ) }
    dend_6 { pt3dadd( -24.0651, -151.422, -6.98001, 1.55 ) }
    dend_6 { pt3dadd( -24.2484, -151.771, -6.80778, 1.92 ) }
    dend_6 { pt3dadd( -24.8693, -152.99, -6.13114, 1.92 ) }
    dend_6 { pt3dadd( -25.2691, -153.834, -5.64439, 1.33 ) }
    dend_6 { pt3dadd( -25.914, -155.274, -4.81769, 0.59 ) }
    dend_6 { pt3dadd( -26.3651, -156.325, -4.23392, 0.59 ) }
    dend_6 { pt3dadd( -26.8071, -157.379, -3.72981, 0.59 ) }
    dend_6 { pt3dadd( -26.8291, -157.432, -3.7091, 0.59 ) }
    dend_6 { pt3dadd( -27.1496, -158.202, -3.50942, 1.33 ) }
    dend_6 { pt3dadd( -27.5138, -159.134, -3.41724, 0.74 ) }
    dend_6 { pt3dadd( -27.7884, -159.933, -3.47055, 0.74 ) }
    dend_6 { pt3dadd( -28.1862, -161.267, -3.63801, 0.74 ) }
    dend_6 { pt3dadd( -28.2143, -161.365, -3.65199, 0.74 ) }
    dend_6 { pt3dadd( -28.4813, -162.325, -3.76691, 1.18 ) }
    dend_6 { pt3dadd( -28.9019, -163.799, -3.90674, 0.81 ) }
    dend_6 { pt3dadd( -29.3411, -165.366, -3.96418, 0.74 ) }
    dend_6 { pt3dadd( -29.8396, -167.128, -3.92167, 0.59 ) }
    dend_6 { pt3dadd( -29.8591, -167.199, -3.9136, 0.59 ) }
    dend_6 { pt3dadd( -30.1882, -168.366, -3.7225, 1.92 ) }
    dend_6 { pt3dadd( -30.4701, -169.436, -3.47043, 2.21 ) }
    dend_6 { pt3dadd( -30.7715, -170.708, -3.10472, 2.21 ) }
    dend_6 { pt3dadd( -31.0481, -172.029, -2.6943, 0.74 ) }
    dend_6 { pt3dadd( -31.2771, -173.582, -2.20726, 0.74 ) }
    dend_6 { pt3dadd( -31.3519, -174.759, -1.86282, 0.66 ) }
    dend_6 { pt3dadd( -31.259, -176.148, -1.52125, 0.44 ) }
    dend_6 { pt3dadd( -31.0533, -177.061, -1.35111, 1.03 ) }
    dend_6 { pt3dadd( -31.008, -177.171, -1.34354, 1.03 ) }
    dend_6 { pt3dadd( -30.6922, -177.71, -1.38438, 1.03 ) }
    dend_6 { pt3dadd( -30.2074, -178.456, -1.53493, 1.03 ) }
    dend_6 { pt3dadd( -29.7648, -179.186, -1.70732, 1.4 ) }
    dend_6 { pt3dadd( -29.5607, -179.647, -1.81707, 1.4 ) }
    dend_6 { pt3dadd( -29.2539, -180.791, -2.00763, 0.81 ) }
    dend_6 { pt3dadd( -29.0825, -182.014, -2.08436, 0.81 ) }
    dend_6 { pt3dadd( -29.0717, -182.888, -2.06195, 1.03 ) }
    dend_6 { pt3dadd( -29.1468, -183.68, -1.98577, 1.11 ) }
    dend_6 { pt3dadd( -29.3065, -184.62, -1.83886, 1.18 ) }
    dend_6 { pt3dadd( -29.5657, -185.776, -1.6126, 0.37 ) }
    dend_6 { pt3dadd( -29.9592, -187.18, -1.35657, 0.37 ) }
    dend_6 { pt3dadd( -30.2088, -188.068, -1.27647, 1.55 ) }
    dend_6 { pt3dadd( -30.3756, -188.793, -1.30477, 1.84 ) }
    dend_6 { pt3dadd( -30.4826, -189.437, -1.40676, 2.14 ) }
    dend_6 { pt3dadd( -30.529, -189.927, -1.54889, 2.14 ) }
    dend_6 { pt3dadd( -30.4968, -191.261, -2.18775, 1.69 ) }
    dend_6 { pt3dadd( -30.2019, -192.75, -3.17053, 0.52 ) }
    dend_6 { pt3dadd( -30.0048, -193.282, -3.58466, 0.88 ) }
    dend_6 { pt3dadd( -29.9772, -193.332, -3.62992, 0.88 ) }
    dend_6 { pt3dadd( -29.8579, -193.498, -3.80427, 0.88 ) }
    dend_6 { pt3dadd( -29.1652, -194.282, -4.6944, 0.52 ) }
    dend_6 { pt3dadd( -28.5155, -194.967, -5.49506, 1.03 ) }
    dend_6 { pt3dadd( -28.4792, -195.009, -5.5418, 1.03 ) }
    dend_6 { pt3dadd( -27.9274, -195.77, -6.31368, 1.33 ) }
    dend_6 { pt3dadd( -27.3799, -196.657, -7.11782, 1.25 ) }
    dend_6 { pt3dadd( -27.1894, -197.042, -7.42193, 1.03 ) }
    dend_6 { pt3dadd( -26.6969, -198.492, -8.3015, 0.59 ) }
    dend_6 { pt3dadd( -26.4657, -199.481, -8.7664, 0.59 ) }
    dend_6 { pt3dadd( -26.3476, -200.195, -9.02298, 1.18 ) }
    dend_6 { pt3dadd( -26.3173, -200.492, -9.09542, 1.84 ) }
    dend_6 { pt3dadd( -26.2842, -201.146, -9.19729, 1.84 ) }
    dend_6 { pt3dadd( -26.2782, -202.598, -9.35321, 0.74 ) }
    dend_6 { pt3dadd( -26.2848, -203.629, -9.57301, 1.03 ) }
    dend_6 { pt3dadd( -26.2714, -204.413, -9.86146, 1.11 ) }
    dend_6 { pt3dadd( -26.252, -204.816, -10.0615, 1.33 ) }
    dend_6 { pt3dadd( -26.1955, -205.595, -10.5896, 0.81 ) }
    dend_6 { pt3dadd( -26.1402, -206.096, -11.0305, 0.44 ) }
    dend_6 { pt3dadd( -25.8816, -208.439, -13.6175, 0.44 ) }
    dend_6 { pt3dadd( -25.8498, -208.858, -14.1523, 0.44 ) }
    dend_6 { pt3dadd( -25.8591, -208.944, -14.2884, 0.44 ) }
    dend_6 { pt3dadd( -26.0956, -209.641, -15.4789, 0.44 ) }
    dend_6 { pt3dadd( -26.1137, -209.67, -15.5275, 0.44 ) }
    dend_6 { pt3dadd( -26.4198, -210.053, -16.0822, 0.74 ) }
    dend_6 { pt3dadd( -26.811, -210.453, -16.5429, 1.11 ) }
    dend_6 { pt3dadd( -27.8447, -211.687, -18.0841, 0.44 ) }
    dend_6 { pt3dadd( -28.1515, -212.143, -18.6825, 0.44 ) }
    dend_6 { pt3dadd( -28.6418, -213.117, -19.9248, 1.84 ) }
    dend_6 { pt3dadd( -28.794, -213.531, -20.4564, 2.5 ) }
    dend_6 { pt3dadd( -28.8256, -213.646, -20.6032, 2.5 ) }
    dend_6 { pt3dadd( -29.1806, -215.342, -22.5867, 0.59 ) }
    dend_6 { pt3dadd( -29.3037, -215.939, -23.236, 0.59 ) }
    dend_6 { pt3dadd( -29.4411, -216.457, -23.876, 0.59 ) }
    dend_6 { pt3dadd( -29.4547, -216.501, -23.9323, 0.59 ) }
    dend_6 { pt3dadd( -29.7753, -217.425, -25.0599, 1.77 ) }
    dend_6 { pt3dadd( -30.0066, -218.008, -25.7056, 2.06 ) }
    dend_6 { pt3dadd( -30.5695, -219.184, -26.841, 1.99 ) }
    dend_6 { pt3dadd( -31.3612, -220.75, -28.3058, 0.81 ) }
    dend_6 { pt3dadd( -31.3859, -220.799, -28.3538, 0.81 ) }
    dend_6 { pt3dadd( -31.6411, -221.361, -28.8841, 0.66 ) }
    dend_6 { pt3dadd( -31.9229, -222.14, -29.5938, 0.52 ) }
    dend_6 { pt3dadd( -32.1139, -222.714, -30.1004, 1.84 ) }
    dend_6 { pt3dadd( -32.3356, -223.472, -30.677, 2.28 ) }
    dend_6 { pt3dadd( -32.8117, -225.336, -32.0441, 0.66 ) }
    dend_6 { pt3dadd( -32.9165, -225.981, -32.5389, 0.66 ) }
    dend_6 { pt3dadd( -32.991, -227.083, -33.3994, 1.77 ) }
    dend_6 { pt3dadd( -32.9883, -227.149, -33.4493, 1.77 ) }
    dend_6 { pt3dadd( -32.9064, -227.822, -33.9237, 2.21 ) }
    dend_6 { pt3dadd( -32.7276, -228.777, -34.5019, 2.21 ) }
    dend_6 { pt3dadd( -32.4541, -230.061, -35.1586, 0.74 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_6 { pt3dadd( -32.3421, -230.678, -35.4517, 0.37 ) }
    dend_6 { pt3dadd( -32.2605, -231.167, -35.6654, 0.29 ) }
    dend_6 { pt3dadd( -32.1183, -232.003, -36.0196, 1.11 ) }
    dend_6 { pt3dadd( -32.0168, -232.621, -36.2841, 1.4 ) }
    dend_6 { pt3dadd( -31.8582, -233.654, -36.6878, 0.59 ) }
    dend_6 { pt3dadd( -31.7459, -234.397, -36.973, 0.29 ) }
    dend_6 { pt3dadd( -31.63, -235.203, -37.2849, 0.66 ) }
    dend_6 { pt3dadd( -31.5678, -235.7, -37.4923, 0.88 ) }
    dend_6 { pt3dadd( -31.4665, -236.779, -37.9427, 0.29 ) }
    dend_6 { pt3dadd( -31.4192, -237.458, -38.2185, 0.29 ) }
    dend_6 { pt3dadd( -31.3949, -237.988, -38.4188, 0.96 ) }
    dend_6 { pt3dadd( -31.3819, -238.552, -38.6218, 0.96 ) }
    dend_6 { pt3dadd( -31.3279, -239.784, -39.0778, 0.29 ) }
    dend_6 { pt3dadd( -31.2632, -240.392, -39.341, 0.29 ) }
    dend_6 { pt3dadd( -31.1241, -241.011, -39.7161, 0.66 ) }
    dend_6 { pt3dadd( -31.1151, -241.063, -39.7793, 0.66 ) }
    dend_6 { pt3dadd( -31.0778, -241.373, -40.2348, 0.66 ) }
    dend_6 { pt3dadd( -31.0706, -242.074, -41.4422, 0.44 ) }
    dend_6 { pt3dadd( -31.1177, -242.633, -42.4585, 1.77 ) }
    dend_6 { pt3dadd( -31.2427, -243.45, -44.0077, 2.58 ) }
    dend_6 { pt3dadd( -31.7632, -245.905, -48.7226, 0.44 ) }
    dend_6 { pt3dadd( -31.8313, -246.169, -49.2188, 0.44 ) }
    dend_6 { pt3dadd( -32.2158, -247.337, -51.4711, 0.88 ) }
    dend_6 { pt3dadd( -32.4541, -247.894, -52.5616, 1.77 ) }
    dend_6 { pt3dadd( -32.4708, -247.926, -52.6238, 1.77 ) }
    dend_6 { pt3dadd( -32.5926, -248.133, -52.9827, 2.14 ) }
    dend_6 { pt3dadd( -32.802, -248.557, -53.4556, 2.43 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 27/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -22.2772, -140.719, -8.02504, 0.59 ) }
    dend_5 { pt3dadd( -21.1698, -141.685, -6.64991, 0.59 ) }
    dend_5 { pt3dadd( -19.7036, -142.65, -5.12442, 0.52 ) }
    dend_5 { pt3dadd( -18.7357, -143.135, -4.32626, 0.52 ) }
    dend_5 { pt3dadd( -17.255, -143.564, -3.42568, 0.37 ) }
    dend_5 { pt3dadd( -16.9692, -143.616, -3.28454, 0.37 ) }
    dend_5 { pt3dadd( -15.7132, -143.767, -2.73156, 0.37 ) }
    dend_5 { pt3dadd( -14.6148, -143.773, -2.37547, 0.37 ) }
    dend_5 { pt3dadd( -13.1719, -143.62, -2.03959, 0.37 ) }
    dend_5 { pt3dadd( -10.9085, -143.253, -1.62879, 0.22 ) }
    dend_5 { pt3dadd( -10.2426, -143.144, -1.55989, 0.29 ) }
    dend_5 { pt3dadd( -8.97032, -142.93, -1.45514, 0.37 ) }
    // Section: dend_3, id: dend_3, parent: dend_1 (entry count 39/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 19.4361, -64.6784, -32.6155, 0.37 ) }
    dend_3 { pt3dadd( 19.6602, -65.1486, -32.746, 0.37 ) }
    dend_3 { pt3dadd( 19.9508, -65.7892, -32.8717, 0.29 ) }
    dend_3 { pt3dadd( 20.2349, -66.4565, -32.9762, 1.25 ) }
    dend_3 { pt3dadd( 20.3638, -66.768, -33.0173, 1.69 ) }
    dend_3 { pt3dadd( 20.3815, -66.8118, -33.0224, 1.69 ) }
    dend_3 { pt3dadd( 20.7169, -67.6721, -33.1039, 0.29 ) }
    dend_3 { pt3dadd( 20.9509, -68.299, -33.1312, 0.29 ) }
    dend_3 { pt3dadd( 21.2008, -68.9815, -33.1511, 1.77 ) }
    dend_3 { pt3dadd( 21.3291, -69.3503, -33.1521, 2.43 ) }
    dend_3 { pt3dadd( 21.4211, -69.6193, -33.1535, 2.43 ) }
    dend_3 { pt3dadd( 21.7875, -70.7145, -33.1616, 0.22 ) }
    dend_3 { pt3dadd( 21.9605, -71.2641, -33.1689, 0.22 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 52/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 19.4361, -64.6784, -32.6155, 1.77 ) }
    dend_2 { pt3dadd( 19.5192, -65.8287, -35.4339, 1.77 ) }
    dend_2 { pt3dadd( 19.6547, -67.1204, -38.3576, 1.03 ) }
    dend_2 { pt3dadd( 19.9169, -69.38, -43.0128, 2.14 ) }
    dend_2 { pt3dadd( 20.0119, -70.341, -44.8868, 0.52 ) }
    dend_2 { pt3dadd( 20.0475, -70.7371, -45.6357, 1.92 ) }
    dend_2 { pt3dadd( 20.0674, -70.9817, -46.0841, 2.36 ) }
    dend_2 { pt3dadd( 20.2665, -73.1807, -49.6451, 0.29 ) }
    dend_2 { pt3dadd( 20.2931, -73.7438, -50.4814, 0.29 ) }
    dend_2 { pt3dadd( 20.2687, -75.0313, -52.1429, 0.29 ) }
    dend_2 { pt3dadd( 20.2658, -75.0631, -52.1855, 0.29 ) }
    dend_2 { pt3dadd( 20.2358, -75.2853, -52.4904, 1.69 ) }
    dend_2 { pt3dadd( 20.1969, -75.58, -52.8901, 1.69 ) }
    dend_2 { pt3dadd( 20.043, -77.618, -55.6902, 0.22 ) }
    dend_2 { pt3dadd( 20.0417, -77.9105, -56.1118, 0.22 ) }
    dend_2 { pt3dadd( 20.0454, -77.9403, -56.1556, 0.22 ) }
    dend_2 { pt3dadd( 20.1156, -78.2973, -56.6844, 1.03 ) }
    dend_2 { pt3dadd( 20.4879, -79.6545, -58.6664, 0.29 ) }
    dend_2 { pt3dadd( 20.9815, -81.0363, -60.5789, 1.99 ) }
    dend_2 { pt3dadd( 21.0853, -81.2687, -60.8781, 2.14 ) }
    dend_2 { pt3dadd( 21.8658, -82.886, -62.9888, 0.37 ) }
    dend_2 { pt3dadd( 22.0054, -83.1548, -63.3419, 0.37 ) }
    dend_2 { pt3dadd( 22.2122, -83.5164, -63.801, 0.88 ) }
    dend_2 { pt3dadd( 22.4793, -83.9318, -64.2659, 1.03 ) }
    dend_2 { pt3dadd( 23.1735, -85.0074, -65.2976, 0.29 ) }
    dend_2 { pt3dadd( 23.2041, -85.0575, -65.3421, 0.29 ) }
    dend_2 { pt3dadd( 23.9132, -86.342, -66.4208, 0.29 ) }
    dend_2 { pt3dadd( 24.2221, -86.9608, -66.9768, 1.99 ) }
    dend_2 { pt3dadd( 24.3178, -87.1634, -67.1623, 1.99 ) }
    dend_2 { pt3dadd( 24.9962, -88.6863, -68.5209, 0.29 ) }
    dend_2 { pt3dadd( 25.1433, -89.069, -68.8395, 0.59 ) }
    dend_2 { pt3dadd( 25.6777, -90.5619, -70.0368, 0.44 ) }
    dend_2 { pt3dadd( 25.9716, -91.446, -70.7262, 0.29 ) }
    dend_2 { pt3dadd( 26.0878, -91.8132, -71.0143, 1.11 ) }
    dend_2 { pt3dadd( 26.1899, -92.1183, -71.2491, 1.33 ) }
    dend_2 { pt3dadd( 26.9663, -94.2269, -72.9866, 0.22 ) }
    dend_2 { pt3dadd( 27.1241, -94.6044, -73.3336, 0.52 ) }
    dend_2 { pt3dadd( 27.6376, -95.6759, -74.4278, 0.29 ) }
    dend_2 { pt3dadd( 27.7932, -95.9675, -74.7514, 0.88 ) }
    dend_2 { pt3dadd( 27.9862, -96.3241, -75.2337, 0.88 ) }
    dend_2 { pt3dadd( 28.7388, -97.6897, -77.2841, 0.29 ) }
    dend_2 { pt3dadd( 29.3397, -98.7319, -78.9752, 0.29 ) }
    dend_2 { pt3dadd( 29.819, -99.5944, -80.4188, 1.77 ) }
    dend_2 { pt3dadd( 29.9405, -99.8184, -80.8048, 1.77 ) }
    dend_2 { pt3dadd( 30.8624, -101.601, -83.9068, 0.52 ) }
    dend_2 { pt3dadd( 31.0143, -101.931, -84.4617, 0.44 ) }
    dend_2 { pt3dadd( 31.1506, -102.24, -84.9493, 0.74 ) }
    dend_2 { pt3dadd( 31.1635, -102.269, -84.992, 0.74 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_2 { pt3dadd( 31.646, -103.287, -86.3695, 0.29 ) }
    dend_2 { pt3dadd( 31.6672, -103.325, -86.417, 0.29 ) }
    dend_2 { pt3dadd( 32.1266, -103.955, -86.9967, 1.18 ) }
    dend_2 { pt3dadd( 32.3103, -104.186, -87.1973, 1.18 ) }
    dend_2 { pt3dadd( 33.1274, -105.169, -87.9845, 0.22 ) }
    dend_2 { pt3dadd( 33.1585, -105.205, -88.0091, 0.22 ) }
    dend_2 { pt3dadd( 33.8792, -105.974, -88.4782, 0.81 ) }
    dend_2 { pt3dadd( 34.7436, -106.81, -89.0055, 0.22 ) }
    dend_2 { pt3dadd( 35.1131, -107.128, -89.2088, 0.81 ) }
    dend_2 { pt3dadd( 35.1599, -107.163, -89.2374, 0.81 ) }
    dend_2 { pt3dadd( 35.3979, -107.296, -89.4059, 0.81 ) }
    dend_2 { pt3dadd( 36.405, -107.717, -90.427, 0.22 ) }
    dend_2 { pt3dadd( 36.666, -107.803, -90.7343, 0.44 ) }
    dend_2 { pt3dadd( 36.7049, -107.814, -90.7836, 0.44 ) }
    dend_2 { pt3dadd( 37.8675, -108.141, -92.2579, 1.33 ) }
    dend_2 { pt3dadd( 38.9103, -108.449, -93.5727, 1.33 ) }
    dend_2 { pt3dadd( 40.9555, -109.059, -96.161, 0.29 ) }
    dend_2 { pt3dadd( 41.0054, -109.075, -96.2247, 0.29 ) }
    dend_2 { pt3dadd( 41.3398, -109.194, -96.657, 0.29 ) }
    dend_2 { pt3dadd( 41.788, -109.369, -97.1917, 1.03 ) }
    dend_2 { pt3dadd( 41.9229, -109.426, -97.3346, 1.03 ) }
    dend_2 { pt3dadd( 41.9685, -109.445, -97.3748, 1.03 ) }
    dend_2 { pt3dadd( 43.5816, -110.117, -98.5489, 0.22 ) }
    dend_2 { pt3dadd( 43.6309, -110.136, -98.5848, 0.22 ) }
    dend_2 { pt3dadd( 44.8279, -110.505, -99.4966, 0.29 ) }
    dend_2 { pt3dadd( 46.2286, -110.732, -100.658, 0.22 ) }
    dend_2 { pt3dadd( 46.5233, -110.753, -100.918, 0.66 ) }
    dend_2 { pt3dadd( 46.5703, -110.751, -100.961, 0.66 ) }
    dend_2 { pt3dadd( 46.8573, -110.716, -101.231, 0.66 ) }
    dend_2 { pt3dadd( 47.7101, -110.572, -102.076, 0.15 ) }
    dend_2 { pt3dadd( 49.3547, -110.135, -103.869, 0.96 ) }
    dend_2 { pt3dadd( 50.269, -109.84, -104.9, 1.4 ) }
    dend_2 { pt3dadd( 50.6178, -109.725, -105.311, 1.4 ) }
    dend_2 { pt3dadd( 50.7865, -109.668, -105.515, 1.4 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 34/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -65.0581, 187.458, -28.0968, 0.44 ) }
    dend_19 { pt3dadd( -69.0236, 196.364, -30.6476, 0.44 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 36/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -65.0581, 187.458, -28.0968, 0.44 ) }
    dend_18 { pt3dadd( -67.5592, 194.8, -30.3639, 0.44 ) }
    // Section: dend_14, id: dend_14, parent: dend_12 (entry count 38/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 15.8117, 99.3163, -8.0827, 0.29 ) }
    dend_14 { pt3dadd( 16.389, 100.953, -8.34458, 0.29 ) }
    dend_14 { pt3dadd( 16.6484, 101.688, -8.46226, 0.29 ) }
    dend_14 { pt3dadd( 16.8657, 102.304, -8.56081, 1.03 ) }
    dend_14 { pt3dadd( 16.8828, 102.353, -8.56859, 1.03 ) }
    dend_14 { pt3dadd( 17.008, 102.708, -8.62539, 1.4 ) }
    // Section: dend_13, id: dend_13, parent: dend_12 (entry count 44/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 15.8117, 99.3163, -8.0827, 0.88 ) }
    dend_13 { pt3dadd( 15.8349, 100.156, -8.21683, 0.88 ) }
    dend_13 { pt3dadd( 15.9122, 100.793, -8.35703, 0.29 ) }
    dend_13 { pt3dadd( 16.0674, 101.52, -8.61598, 0.29 ) }
    dend_13 { pt3dadd( 16.19, 101.963, -8.79364, 0.44 ) }
    dend_13 { pt3dadd( 16.542, 103.102, -9.26467, 1.25 ) }
    dend_13 { pt3dadd( 16.6938, 103.558, -9.45408, 1.99 ) }
    dend_13 { pt3dadd( 16.9603, 104.202, -9.74641, 2.21 ) }
    dend_13 { pt3dadd( 17.6158, 105.593, -10.4176, 0.22 ) }
    dend_13 { pt3dadd( 17.8848, 106.175, -10.7208, 0.22 ) }
    dend_13 { pt3dadd( 18.0214, 106.463, -10.872, 0.96 ) }
    dend_13 { pt3dadd( 18.1655, 106.786, -11.036, 1.77 ) }
    dend_13 { pt3dadd( 18.3155, 107.192, -11.2302, 2.21 ) }
    dend_13 { pt3dadd( 18.4283, 107.609, -11.4298, 2.21 ) }
    dend_13 { pt3dadd( 18.7477, 109.205, -12.1736, 0.22 ) }
    dend_13 { pt3dadd( 18.8578, 109.88, -12.4983, 0.22 ) }
    dend_13 { pt3dadd( 18.982, 110.67, -12.8704, 1.18 ) }
    dend_13 { pt3dadd( 19.0258, 110.972, -13.0084, 1.33 ) }
    dend_13 { pt3dadd( 19.1428, 111.872, -13.38, 0.81 ) }
    dend_13 { pt3dadd( 19.2393, 112.571, -13.6381, 0.22 ) }
    dend_13 { pt3dadd( 19.3178, 113.02, -13.7688, 0.29 ) }
    dend_13 { pt3dadd( 19.4658, 113.808, -13.9801, 0.22 ) }
    dend_13 { pt3dadd( 19.4914, 113.909, -14.0111, 0.22 ) }
    dend_13 { pt3dadd( 19.7285, 114.672, -14.3098, 0.22 ) }
    dend_13 { pt3dadd( 20.008, 115.464, -14.6552, 1.33 ) }
    dend_13 { pt3dadd( 20.1255, 115.815, -14.854, 1.69 ) }
    dend_13 { pt3dadd( 20.1801, 116.011, -14.9719, 1.69 ) }
    dend_13 { pt3dadd( 20.4754, 117.12, -15.6679, 0.29 ) }
    dend_13 { pt3dadd( 20.6632, 117.746, -16.0601, 1.47 ) }
    dend_13 { pt3dadd( 20.741, 117.972, -16.2025, 1.47 ) }
    dend_13 { pt3dadd( 20.9921, 118.643, -16.6269, 0.66 ) }
    dend_13 { pt3dadd( 21.3355, 119.506, -17.1501, 0.29 ) }
    dend_13 { pt3dadd( 21.5045, 119.935, -17.3903, 0.29 ) }
    dend_13 { pt3dadd( 21.7245, 120.482, -17.6476, 0.88 ) }
    dend_13 { pt3dadd( 21.8547, 120.795, -17.8017, 1.25 ) }
    dend_13 { pt3dadd( 22.186, 121.605, -18.2258, 0.29 ) }
    dend_13 { pt3dadd( 22.3751, 122.093, -18.4843, 0.22 ) }
    dend_13 { pt3dadd( 22.4994, 122.536, -18.7407, 0.66 ) }
    dend_13 { pt3dadd( 22.556, 122.912, -18.9482, 0.81 ) }
    dend_13 { pt3dadd( 22.5873, 123.615, -19.2831, 0.22 ) }
    dend_13 { pt3dadd( 22.5892, 124.053, -19.4625, 0.22 ) }
    dend_13 { pt3dadd( 22.5661, 124.465, -19.6299, 0.74 ) }
    dend_13 { pt3dadd( 22.48, 125.107, -19.9534, 1.4 ) }
    dend_13 { pt3dadd( 22.3219, 126.016, -20.4537, 0.29 ) }
    dend_13 { pt3dadd( 22.1771, 126.647, -20.8601, 0.81 ) }
    dend_13 { pt3dadd( 22.1195, 126.848, -21.0192, 0.96 ) }
    dend_13 { pt3dadd( 21.7699, 127.757, -21.9743, 0.29 ) }
    dend_13 { pt3dadd( 21.4403, 128.458, -22.813, 0.29 ) }
    dend_13 { pt3dadd( 21.303, 128.715, -23.1349, 1.33 ) }
    dend_13 { pt3dadd( 20.937, 129.3, -23.9154, 2.28 ) }
    dend_13 { pt3dadd( 20.4578, 129.992, -24.886, 2.28 ) }
    dend_13 { pt3dadd( 19.463, 131.233, -26.7737, 0.81 ) }
    dend_13 { pt3dadd( 19.3267, 131.382, -27.0105, 0.88 ) }
    dend_13 { pt3dadd( 19.0224, 131.68, -27.4929, 0.29 ) }
    dend_13 { pt3dadd( 18.5698, 132.072, -28.1462, 0.37 ) }
    dend_13 { pt3dadd( 18.3853, 132.226, -28.3859, 0.37 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_13 { pt3dadd( 17.6483, 132.888, -29.2738, 0.37 ) }
    dend_13 { pt3dadd( 17.366, 133.186, -29.6157, 0.37 ) }
    dend_13 { pt3dadd( 16.7514, 133.988, -30.4485, 1.55 ) }
    dend_13 { pt3dadd( 16.5185, 134.377, -30.8035, 1.92 ) }
    dend_13 { pt3dadd( 16.0452, 135.619, -31.6846, 0.44 ) }
    dend_13 { pt3dadd( 15.9224, 136.202, -32.0077, 0.29 ) }
    dend_13 { pt3dadd( 15.8758, 136.858, -32.2787, 0.88 ) }
    dend_13 { pt3dadd( 15.8885, 137.208, -32.4072, 0.96 ) }
    dend_13 { pt3dadd( 15.9409, 137.581, -32.5205, 0.96 ) }
    dend_13 { pt3dadd( 16.2012, 138.802, -32.85, 0.37 ) }
    dend_13 { pt3dadd( 16.4774, 139.814, -33.0868, 0.29 ) }
    dend_13 { pt3dadd( 16.6334, 140.411, -33.3253, 0.29 ) }
    dend_13 { pt3dadd( 16.846, 141.301, -33.7797, 1.33 ) }
    dend_13 { pt3dadd( 16.9277, 141.696, -34.0304, 2.14 ) }
    dend_13 { pt3dadd( 16.9779, 141.992, -34.2483, 2.36 ) }
    dend_13 { pt3dadd( 16.9994, 142.214, -34.449, 2.36 ) }
    dend_13 { pt3dadd( 17.0793, 144.141, -36.4752, 0.29 ) }
    dend_13 { pt3dadd( 17.0726, 144.572, -36.9704, 0.88 ) }
    dend_13 { pt3dadd( 17.0282, 145.07, -37.5416, 1.4 ) }
    dend_13 { pt3dadd( 16.9854, 145.356, -37.8597, 1.55 ) }
    dend_13 { pt3dadd( 16.8042, 146.343, -38.8981, 0.37 ) }
    dend_13 { pt3dadd( 16.7349, 146.702, -39.2353, 0.37 ) }
    dend_13 { pt3dadd( 16.5726, 147.491, -39.8507, 1.18 ) }
    dend_13 { pt3dadd( 16.4618, 148.035, -40.2826, 1.47 ) }
    dend_13 { pt3dadd( 16.2309, 149.214, -41.1364, 0.29 ) }
    dend_13 { pt3dadd( 16.1659, 149.537, -41.3406, 0.44 ) }
    dend_13 { pt3dadd( 16.0695, 150.03, -41.5903, 0.29 ) }
    dend_13 { pt3dadd( 15.8449, 151.133, -42.0861, 1.77 ) }
    dend_13 { pt3dadd( 15.7333, 151.74, -42.3131, 2.06 ) }
    dend_13 { pt3dadd( 15.6478, 152.314, -42.4827, 1.92 ) }
    dend_13 { pt3dadd( 15.4914, 153.575, -42.6926, 0.22 ) }
    dend_13 { pt3dadd( 15.4325, 154.168, -42.7519, 0.22 ) }
    dend_13 { pt3dadd( 15.4284, 154.231, -42.7515, 0.22 ) }
    dend_13 { pt3dadd( 15.444, 154.722, -42.6683, 0.22 ) }
    dend_13 { pt3dadd( 15.5163, 155.496, -42.4779, 0.96 ) }
    dend_13 { pt3dadd( 15.5579, 155.734, -42.4139, 1.33 ) }
    dend_13 { pt3dadd( 15.6131, 155.975, -42.3464, 1.33 ) }
    dend_13 { pt3dadd( 15.778, 156.678, -42.1614, 0.44 ) }
    dend_13 { pt3dadd( 16.0979, 157.983, -41.8627, 0.22 ) }
    dend_13 { pt3dadd( 16.1134, 158.043, -41.8505, 0.22 ) }
    dend_13 { pt3dadd( 16.4038, 159.006, -41.6225, 0.22 ) }
    dend_13 { pt3dadd( 16.5737, 159.522, -41.4765, 1.03 ) }
    dend_13 { pt3dadd( 16.6853, 159.831, -41.3807, 1.62 ) }
    dend_13 { pt3dadd( 16.8822, 160.317, -41.2163, 1.62 ) }
    dend_13 { pt3dadd( 16.931, 160.438, -41.1755, 1.62 ) }
    dend_13 { pt3dadd( 17.5973, 162.048, -40.6202, 0.22 ) }
    dend_13 { pt3dadd( 17.7488, 162.416, -40.4862, 0.66 ) }
    dend_13 { pt3dadd( 17.9091, 162.837, -40.3357, 0.66 ) }
    dend_13 { pt3dadd( 18.0128, 163.186, -40.225, 0.59 ) }
    dend_13 { pt3dadd( 18.1413, 163.833, -40.0594, 0.22 ) }
    dend_13 { pt3dadd( 18.1747, 164.127, -40.0079, 0.66 ) }
    dend_13 { pt3dadd( 18.1706, 164.455, -39.9785, 0.88 ) }
    dend_13 { pt3dadd( 18.1436, 165.007, -39.9268, 0.44 ) }
    dend_13 { pt3dadd( 18.0641, 165.901, -39.8405, 0.22 ) }
    dend_13 { pt3dadd( 17.9964, 166.547, -39.7794, 0.81 ) }
    dend_13 { pt3dadd( 17.9506, 166.973, -39.7384, 1.18 ) }
    dend_13 { pt3dadd( 17.8218, 168.183, -39.6223, 0.22 ) }
    dend_13 { pt3dadd( 17.8155, 168.239, -39.6226, 0.22 ) }
    dend_13 { pt3dadd( 17.6957, 169.174, -39.697, 0.22 ) }
    dend_13 { pt3dadd( 17.6303, 169.761, -39.7807, 1.03 ) }
    dend_13 { pt3dadd( 17.5984, 170.139, -39.8519, 1.33 ) }
    dend_13 { pt3dadd( 17.578, 170.519, -39.9394, 1.33 ) }
    dend_13 { pt3dadd( 17.5917, 172.619, -40.5099, 0.22 ) }
    dend_13 { pt3dadd( 17.5929, 172.672, -40.5257, 0.22 ) }
    dend_13 { pt3dadd( 17.6542, 173.851, -40.9305, 0.22 ) }
    dend_13 { pt3dadd( 17.684, 174.256, -41.0812, 0.59 ) }
    dend_13 { pt3dadd( 17.6896, 174.307, -41.1006, 0.59 ) }
    dend_13 { pt3dadd( 17.8142, 175.011, -41.3447, 0.74 ) }
    // Section: dend_8, id: dend_8, parent: dend_6 (entry count 68/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -32.802, -248.557, -53.4556, 0.37 ) }
    dend_8 { pt3dadd( -31.6085, -249.699, -54.2271, 0.37 ) }
    dend_8 { pt3dadd( -30.8558, -250.446, -54.7175, 0.29 ) }
    dend_8 { pt3dadd( -29.935, -251.408, -55.3145, 0.29 ) }
    dend_8 { pt3dadd( -29.2838, -252.135, -55.734, 0.88 ) }
    dend_8 { pt3dadd( -29.0761, -252.392, -55.8809, 1.11 ) }
    dend_8 { pt3dadd( -29.0322, -252.451, -55.9138, 1.11 ) }
    dend_8 { pt3dadd( -28.8316, -252.814, -56.0925, 1.11 ) }
    dend_8 { pt3dadd( -28.5106, -253.661, -56.5131, 0.29 ) }
    dend_8 { pt3dadd( -28.3531, -254.291, -56.8307, 0.29 ) }
    dend_8 { pt3dadd( -28.207, -255.042, -57.2018, 0.74 ) }
    dend_8 { pt3dadd( -28.1571, -255.354, -57.3705, 0.88 ) }
    dend_8 { pt3dadd( -28.0868, -255.856, -57.6533, 0.59 ) }
    dend_8 { pt3dadd( -27.9512, -256.93, -58.2778, 0.29 ) }
    dend_8 { pt3dadd( -27.9339, -257.05, -58.3536, 0.29 ) }
    dend_8 { pt3dadd( -27.8001, -257.692, -58.7603, 0.29 ) }
    dend_8 { pt3dadd( -27.6018, -258.401, -59.1888, 1.11 ) }
    dend_8 { pt3dadd( -27.4856, -258.802, -59.4789, 1.4 ) }
    dend_8 { pt3dadd( -27.3575, -259.206, -59.7781, 1.4 ) }
    dend_8 { pt3dadd( -26.9008, -260.461, -60.7104, 0.22 ) }
    dend_8 { pt3dadd( -26.6438, -261.18, -61.2594, 0.22 ) }
    dend_8 { pt3dadd( -26.4724, -261.679, -61.6556, 0.81 ) }
    dend_8 { pt3dadd( -25.9593, -263.103, -62.8059, 0.81 ) }
    // Section: dend_7, id: dend_7, parent: dend_6 (entry count 91/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -32.802, -248.557, -53.4556, 0.96 ) }
    dend_7 { pt3dadd( -34.1062, -249.231, -56.0168, 0.96 ) }
    dend_7 { pt3dadd( -35.8238, -250.295, -59.6314, 0.96 ) }
    dend_7 { pt3dadd( -36.6298, -250.849, -61.3988, 0.66 ) }
    dend_7 { pt3dadd( -37.1241, -251.242, -62.5388, 1.4 ) }
    dend_7 { pt3dadd( -37.2469, -251.354, -62.8391, 1.4 ) }
    dend_7 { pt3dadd( -38.2197, -252.327, -65.3354, 0.44 ) }
    dend_7 { pt3dadd( -38.4275, -252.653, -66.0923, 0.37 ) }
    dend_7 { pt3dadd( -38.4369, -252.684, -66.1488, 0.37 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_7 { pt3dadd( -38.6289, -253.595, -67.6776, 0.29 ) }
    dend_7 { pt3dadd( -38.6732, -254.014, -68.3895, 1.47 ) }
    dend_7 { pt3dadd( -38.68, -254.102, -68.5429, 1.77 ) }
    dend_7 { pt3dadd( -38.6889, -254.366, -69.0471, 1.99 ) }
    dend_7 { pt3dadd( -38.7264, -254.821, -70.0271, 1.99 ) }
    dend_7 { pt3dadd( -38.7806, -255.599, -71.7826, 0.44 ) }
    dend_7 { pt3dadd( -38.8266, -255.98, -72.7611, 0.81 ) }
    dend_7 { pt3dadd( -38.9538, -256.4, -74.1021, 0.52 ) }
    dend_7 { pt3dadd( -39.1657, -256.994, -76.0779, 0.44 ) }
    dend_7 { pt3dadd( -39.2937, -257.289, -77.1233, 1.11 ) }
    dend_7 { pt3dadd( -39.3587, -257.419, -77.612, 1.11 ) }
    dend_7 { pt3dadd( -39.7427, -258.046, -80.3008, 1.4 ) }
    dend_7 { pt3dadd( -40.2557, -258.652, -83.38, 1.55 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
    ModelViewParmSubset_2 = new SectionList()
    dend_9 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_15 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_10 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_4 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_1 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_17 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_11 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_6 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_2 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_13 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_9 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_0 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_16 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_3 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_12 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_14 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_5 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_18 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_19 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_8 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_7 OneSecGrp_SectionRef_23.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_19, dend_18, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_17 all.append()
    dend_17 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 4.13603E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 4.13603E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.999855  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.042115  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0012239999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.001693  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.386953  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 8.0E-6  // units: S cm-2
        e_pas_nml2 = -63.854015  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.5399997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.039862998  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 1.04239E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 5.2299997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.0054459996  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.503893  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-4  // units: S cm-2
        e_pas_nml2 = -67.1289  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 4.78E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.15074699  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009017  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 4.0E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.0032419998  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 1.74E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bSTUT_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bSTUT_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bSTUT_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bSTUT_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_15 nseg = 3
    dend_10 nseg = 3
    dend_4 nseg = 7
    dend_1 nseg = 3
    dend_17 nseg = 7
    dend_11 nseg = 3
    dend_6 nseg = 7
    dend_2 nseg = 5
    dend_13 nseg = 5
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bSTUT213_L4_BTC_93ff2bc104_0_0


