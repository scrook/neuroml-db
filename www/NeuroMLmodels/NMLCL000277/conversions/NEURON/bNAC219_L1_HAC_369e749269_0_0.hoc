// Cell: bNAC219_L1_HAC_369e749269_0_0
/*
{
  "id" : "bNAC219_L1_HAC_369e749269_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-1.9645, -8.04857, 0.0, 3.41075", "-1.68907, -7.30451, 0.0, 5.92741", "-1.41364, -6.56044, 0.0, 8.58656", "-1.1382, -5.81638, 0.0, 10.2633", "-0.862771, -5.07231, 0.0, 11.1675", "-0.587338, -4.32825, 0.0, 12.0271", "-0.311906, -3.58419, 0.0, 12.7278", "-0.0364728, -2.84012, 0.0, 13.1471", "0.23896, -2.09606, 0.0, 13.5232", "0.514393, -1.352, 0.0, 13.8993", "0.789825, -0.607933, 0.0, 14.1179", "1.06526, 0.136131, 0.0, 14.0716", "1.34069, 0.880195, 0.0, 13.7957", "1.61612, 1.62426, 0.0, 13.4402", "1.89156, 2.36832, 0.0, 12.8328", "2.16699, 3.11239, 0.0, 12.1037", "2.44242, 3.85645, 0.0, 11.3245", "2.71785, 4.60051, 0.0, 10.1381", "2.99329, 5.34458, 0.0, 8.73923", "3.26872, 6.08864, 0.0, 7.30374", "3.54415, 6.8327, 0.0, 4.09911" ]
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "-1.44244, -5.48771, -16.12, 1.38", "-1.82044, -5.17564, -16.8583, 1.38", "-2.63306, -4.25467, -18.3686, 1.38", "-3.43216, -3.057, -19.801, 1.38", "-3.99149, -1.88422, -20.6869, 1.38", "-4.37591, -0.885325, -21.2054, 1.38", "-4.78776, 0.209477, -21.6508, 1.38", "-5.28468, 1.58118, -22.0494, 1.38", "-5.74428, 2.96667, -22.2687, 1.15", "-6.37155, 5.01641, -22.3818, 1.15", "-6.76071, 6.41211, -22.3827, 0.92", "-7.04946, 7.52058, -22.3818, 0.92", "-7.54612, 9.26363, -22.3783, 1.15" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999992228880115
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "-4.94244, -0.00770696, 8.47, 1.83", "-5.72445, 1.34061, 9.14875, 1.83", "-6.46148, 2.9843, 9.0318, 1.38", "-7.16707, 4.66047, 8.5676, 1.38", "-7.67253, 5.97501, 8.08323, 1.38", "-8.49345, 8.07387, 7.27537, 1.38", "-9.30868, 9.92245, 6.65328, 1.15", "-10.1273, 11.7015, 5.95543, 0.92", "-10.5239, 12.4931, 5.59943, 0.92", "-11.2552, 13.8103, 5.06096, 0.92", "-12.0286, 14.7037, 5.0372, 0.92", "-13.5543, 15.6899, 5.63293, 0.92", "-14.6604, 16.2325, 6.11979, 1.15", "-15.3074, 16.4898, 6.39702, 1.83", "-16.97, 17.06, 6.94509, 2.06", "-18.4079, 17.5378, 7.28951, 1.15", "-21.3412, 18.5998, 7.53302, 0.92", "-22.0371, 18.8594, 7.50218, 0.92", "-23.419, 19.3907, 7.34819, 0.92", "-24.9434, 19.9898, 7.09419, 0.92", "-26.2089, 20.4963, 6.77408, 0.69", "-28.3121, 21.3552, 6.17165, 0.69", "-29.1177, 21.6964, 6.01528, 0.46" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999992228880115
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "3.01756, 2.37229, 6.8, 1.38", "3.01756, 2.37229, 6.8, 1.38", "2.7626, 3.67929, 6.77616, 1.38", "2.51734, 4.93651, 6.75322, 1.38" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999992228880115
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "5.42756, 3.05229, -8.57, 1.15", "5.85473, 3.91092, -9.84956, 1.15", "6.06257, 4.47636, -10.7593, 0.92", "6.30784, 5.14324, -11.797, 0.92", "6.58948, 5.97354, -12.9018, 1.15", "6.91501, 6.82911, -13.8612, 1.38", "7.28353, 7.61267, -14.6378, 1.61", "7.80929, 8.6509, -15.4177, 1.83", "8.23305, 9.36588, -15.7637, 1.83", "9.18214, 10.6209, -15.9569, 1.15", "10.605, 12.2425, -15.6952, 1.15", "11.6897, 13.3391, -15.2931, 0.92", "12.9507, 14.5841, -14.7251, 0.92", "14.012, 15.5996, -14.2613, 1.15", "14.6373, 16.1889, -14.0189, 1.38", "15.76, 17.2113, -13.7246, 0.92", "16.5253, 17.9968, -13.7705, 0.92", "17.4278, 19.066, -14.1826, 0.92", "18.3725, 20.248, -15.0648, 0.92", "18.8108, 20.8083, -15.6474, 1.38", "19.4699, 21.6962, -16.8121, 1.38", "20.0277, 22.4814, -18.1157, 1.38" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999992228880115
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-6.03244, -3.11771, -0.52, 1.38", "-6.03244, -3.11771, -0.52, 1.38", "-7.83145, -3.11044, -0.521479, 1.38", "-9.81852, -3.10242, -0.523112, 1.38", "-11.6146, -3.09517, -0.524588, 1.61", "-12.3053, -3.09238, -0.525155, 1.61", "-14.1728, -3.08485, -0.52669, 1.38" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999992228880115
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "3.54415, 6.8327, 0.0, 0.71682", "8.75143, 20.8998, 0.0, 0.71682", "13.9587, 34.967, 0.0, 0.71682" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "-7.54612, 9.26363, -22.3783, 0.92", "-8.04585, 8.7225, -23.9848, 0.92", "-8.71632, 8.16781, -26.0022, 0.92", "-9.39984, 7.93408, -27.8686, 0.92", "-9.95571, 8.11011, -29.6022, 0.92", "-10.0875, 8.22386, -30.0519, 0.92", "-10.485, 8.63547, -31.3281, 0.92", "-10.7468, 8.98618, -32.1158, 0.92", "-11.6703, 10.2943, -34.5309, 0.92", "-12.8745, 11.8548, -37.1935, 0.92", "-13.9395, 12.9662, -39.3343, 1.15", "-14.381, 13.2523, -40.1473, 1.15", "-14.9627, 13.4207, -41.1446, 0.92", "-15.9889, 13.3635, -42.7955, 0.92", "-16.9753, 12.979, -44.2244, 1.15", "-18.2826, 12.2617, -45.7065, 0.92", "-19.8558, 11.2697, -47.201, 0.92", "-20.9578, 10.5708, -48.1759, 0.92", "-21.8262, 10.0732, -48.9041, 0.92", "-23.3701, 9.23606, -50.1079, 0.92", "-25.1777, 8.34804, -51.4822, 0.92", "-26.7123, 7.77343, -52.6062, 0.69", "-28.2042, 7.41737, -53.6816, 0.69", "-30.0779, 7.22415, -55.0606, 0.69", "-31.2953, 7.30962, -56.0307, 0.69", "-31.877, 7.47261, -56.5095, 0.69", "-32.7909, 7.85765, -57.3466, 0.69", "-33.4463, 8.1558, -57.9852, 0.69", "-34.2143, 8.4793, -58.7286, 0.69", "-35.1668, 8.80869, -59.6318, 0.69", "-36.63, 9.24519, -61.138, 0.46", "-38.0651, 9.61962, -62.777, 0.46", "-39.1052, 9.89465, -64.1007, 0.46", "-39.8554, 10.0962, -65.1465, 0.46", "-40.2109, 10.2119, -65.6331, 0.69", "-41.2156, 10.6411, -67.07, 0.69", "-41.9355, 11.0588, -68.1737, 0.69", "-42.9841, 11.7905, -69.6781, 0.46", "-43.7696, 12.3436, -70.7765, 0.46", "-44.8366, 13.0243, -72.3157, 0.69", "-45.9863, 13.6818, -74.0606, 0.69", "-47.0041, 14.127, -75.6544, 0.69", "-47.6516, 14.3341, -76.7296, 0.69", "-48.3673, 14.536, -78.0228, 0.69", "-49.1873, 14.7902, -79.6397, 0.69", "-49.6892, 14.9572, -80.7303, 0.69", "-50.4655, 15.2448, -82.4143, 0.69", "-51.3308, 15.6, -84.1918, 0.69", "-51.8823, 15.8236, -85.153, 0.69", "-53.1184, 16.2895, -86.8661, 0.69", "-54.209, 16.6187, -88.0136, 0.69", "-55.1848, 16.8332, -88.7939, 0.69", "-56.3879, 17.0305, -89.527, 0.69", "-58.478, 17.2916, -90.6101, 0.69", "-59.8921, 17.4657, -91.2558, 0.69", "-61.5389, 17.7057, -91.9887, 0.69", "-62.6618, 17.9007, -92.5784, 0.46", "-64.3947, 18.2432, -93.7366, 0.46", "-65.5784, 18.4549, -94.6956, 0.46", "-66.7573, 18.628, -95.8133, 0.46", "-68.9875, 18.859, -98.1352, 0.46", "-70.7486, 18.9784, -100.08, 0.46", "-72.4995, 19.0384, -101.952, 0.46", "-73.9222, 19.0202, -103.44, 0.69", "-75.7041, 18.9003, -105.285, 0.46", "-76.7667, 18.7934, -106.404, 0.46", "-77.4757, 18.7248, -107.151, 0.46", "-79.1592, 18.6619, -108.926, 0.69", "-81.0218, 18.6931, -110.868, 0.69", "-82.291, 18.7893, -112.12, 0.69", "-83.9123, 19.0068, -113.446, 0.69", "-85.364, 19.2732, -114.489, 0.69", "-86.9735, 19.6799, -115.551, 0.69", "-88.4807, 20.1143, -116.497, 0.69", "-90.8882, 20.7763, -117.876, 0.69", "-93.0056, 21.2382, -119.008, 0.46", "-95.6558, 21.5791, -120.529, 0.46", "-98.5144, 21.6931, -122.315, 0.46", "-100.371, 21.5492, -123.743, 0.46", "-101.938, 21.2838, -125.262, 0.46", "-103.356, 20.9041, -126.904, 0.23", "-105.004, 20.2897, -129.219, 0.23", "-105.657, 19.9699, -130.157, 0.23", "-107.318, 18.8974, -132.837, 0.23", "-108.211, 18.2668, -134.478, 0.23", "-108.872, 17.7752, -135.95, 0.23", "-109.853, 16.9352, -138.984, 0.23" ],
    "parent" : "dend_28",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "-7.54612, 9.26363, -22.3783, 0.92", "-7.81109, 10.6869, -23.0811, 0.92", "-7.95025, 11.9213, -23.7775, 0.92", "-8.14871, 13.8493, -24.9135, 0.92", "-8.36816, 15.4359, -25.9312, 0.92", "-8.71416, 16.96, -26.9925, 1.15", "-9.077, 18.0899, -27.8575, 0.92", "-9.50426, 19.2841, -28.867, 0.92", "-9.65061, 19.6051, -29.1763, 0.92", "-10.327, 20.6285, -30.3038, 0.92", "-11.3703, 21.669, -31.4836, 0.92", "-12.4395, 22.5351, -32.4652, 0.92", "-12.9384, 22.9077, -32.8712, 0.92", "-13.2554, 23.1502, -33.1062, 0.92", "-13.9612, 23.7246, -33.6661, 0.92", "-14.538, 24.2542, -34.2195, 0.92", "-15.6264, 25.3058, -35.3536, 0.92", "-16.057, 25.7104, -35.8137, 0.92", "-16.8703, 26.4594, -36.6846, 0.92", "-18.2733, 27.7878, -38.2447, 0.92", "-19.5298, 29.0163, -39.735, 0.92", "-20.3952, 29.8709, -40.8199, 0.69", "-21.0385, 30.4759, -41.6361, 0.69", "-21.5309, 30.9489, -42.3116, 0.69", "-22.2518, 31.7132, -43.356, 0.69", "-22.9337, 32.6501, -44.4044, 0.69", "-23.1871, 33.173, -44.8971, 0.69", "-23.4891, 34.2201, -45.8091, 0.69", "-23.7018, 35.2109, -46.5497, 0.69", "-23.9082, 36.105, -47.1637, 0.69", "-24.3057, 37.5005, -48.1046, 0.69", "-24.7717, 38.9245, -49.1458, 0.69", "-24.9866, 39.5141, -49.6278, 0.69", "-25.4552, 40.6941, -50.6655, 0.92", "-26.1182, 42.3615, -52.2453, 0.69", "-26.5891, 43.5107, -53.5041, 0.69", "-27.0608, 44.7135, -54.9563, 0.69", "-27.3113, 45.5358, -55.939, 0.69", "-27.3929, 45.9916, -56.4714, 0.69", "-27.4498, 46.9805, -57.6522, 0.92", "-27.3491, 48.148, -59.0669, 0.69", "-27.1092, 49.163, -60.3701, 0.69", "-26.4567, 50.457, -62.3154, 0.69", "-25.7239, 51.2188, -63.8195, 0.69", "-24.787, 51.7028, -65.1504, 0.69", "-23.4243, 52.0649, -66.5534, 0.69", "-21.7252, 52.2122, -67.7144, 0.69", "-19.2123, 52.1628, -68.8404, 0.92", "-17.6045, 52.0373, -69.4153, 0.92", "-14.9034, 51.7607, -70.1285, 0.69", "-13.3505, 51.591, -70.3994, 0.69", "-11.4689, 51.417, -70.561, 0.69", "-9.3092, 51.3387, -70.5465, 0.92" ],
    "parent" : "dend_28",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "2.51734, 4.93651, 6.75322, 0.92", "3.19322, 4.49425, 7.70847, 0.92", "4.01318, 3.73126, 9.11403, 0.92", "4.56692, 3.05504, 10.3189, 0.92", "5.16103, 2.1797, 11.7571, 0.92", "5.52403, 1.48514, 12.8448, 0.92", "5.83581, 0.552571, 14.2781, 0.92", "5.82744, -0.46371, 15.6754, 0.92", "5.52731, -1.40384, 16.8022, 0.92", "5.08798, -2.29565, 17.725, 0.92", "4.60358, -3.21512, 18.5511, 0.92", "3.91834, -4.56094, 19.5942, 0.92", "3.59456, -5.26363, 20.0396, 0.92", "3.23204, -6.2056, 20.6367, 0.92", "2.84803, -7.73007, 21.5873, 0.92", "2.73289, -9.05977, 22.454, 0.92", "2.78267, -9.83044, 22.9142, 0.92", "2.90324, -10.8686, 23.4489, 0.69", "3.07355, -12.0375, 24.0009, 0.69", "3.18425, -12.7211, 24.2765, 0.69", "3.42167, -14.409, 24.8084, 0.92", "3.48866, -15.1118, 25.0039, 0.69", "3.53304, -16.7537, 25.5404, 0.69", "3.49719, -17.9473, 25.9468, 0.69", "3.41521, -18.9629, 26.2874, 0.69", "3.26039, -20.1382, 26.7454, 0.69", "3.11437, -21.0644, 27.1718, 0.69", "2.94412, -22.6628, 28.0479, 0.69", "2.95841, -23.5571, 28.6429, 0.69", "3.09008, -24.7446, 29.5878, 0.69", "3.3021, -25.6355, 30.3369, 0.69", "3.56365, -26.3736, 30.9249, 0.69", "4.03959, -27.3987, 31.6394, 0.69", "4.70305, -28.7684, 32.4947, 0.69", "5.13134, -29.7591, 33.0595, 0.69", "5.59901, -30.8187, 33.6363, 0.69", "6.09094, -31.9221, 34.1744, 0.69", "6.609, -33.2257, 34.7191, 0.69", "7.01406, -34.6413, 35.1807, 0.69", "7.27572, -36.2304, 35.5278, 0.69" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "2.51734, 4.93651, 6.75322, 1.15", "2.86977, 6.72204, 6.50501, 1.15", "3.03966, 8.71177, 6.18908, 1.15", "3.14104, 10.7514, 5.84702, 1.15", "3.15116, 12.0364, 5.53274, 0.92", "3.07556, 13.4477, 5.07196, 0.92", "2.89284, 14.9434, 4.47638, 0.92", "2.43393, 16.7396, 3.51665, 0.92", "1.99105, 17.9832, 2.76249, 0.92", "1.20615, 19.7687, 1.537, 0.92", "0.509195, 21.198, 0.472684, 0.92", "-0.0279242, 22.2183, -0.444728, 0.92", "-0.813321, 23.441, -1.82088, 1.15" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "20.0277, 22.4814, -18.1157, 0.92", "21.3307, 23.1545, -19.5805, 0.92", "22.9055, 23.948, -21.4216, 0.92", "23.6056, 24.341, -22.2872, 1.15", "24.5055, 24.9767, -23.4594, 0.92", "25.536, 25.9095, -24.8446, 0.92", "26.2997, 26.7706, -25.9035, 0.92", "26.5052, 27.1859, -26.3132, 0.92", "26.7565, 28.0506, -27.0983, 0.92", "26.942, 29.2215, -28.1993, 0.69", "27.0376, 30.2677, -29.2772, 0.69", "27.0769, 31.1283, -30.3104, 1.15", "27.2063, 32.2903, -31.9578, 0.92", "27.4542, 33.1574, -33.5421, 0.92", "27.8122, 33.7724, -35.0253, 1.15", "28.3871, 34.3609, -36.8424, 1.15", "29.1014, 34.8727, -38.673, 1.15", "29.9526, 35.3312, -40.3649, 1.15", "31.0144, 35.8064, -41.9611, 0.92", "32.2279, 36.3764, -43.3967, 0.92", "33.2538, 36.8521, -44.378, 0.92", "33.9627, 37.1839, -44.945, 0.92", "35.1006, 37.6923, -45.7377, 0.92", "35.7961, 38.0169, -46.1936, 0.92", "36.7734, 38.4688, -46.8039, 0.92", "37.7924, 38.8801, -47.4662, 0.92", "39.2516, 39.3181, -48.4015, 1.15", "40.5992, 39.5261, -49.1679, 0.92", "41.648, 39.5711, -49.6263, 0.92", "43.2116, 39.4771, -50.0762, 0.92", "44.9971, 39.2575, -50.4555, 0.92", "46.7915, 39.0202, -50.7793, 0.92", "49.3013, 38.7187, -51.2346, 0.92", "51.0488, 38.5132, -51.7074, 1.15", "52.8361, 38.3265, -52.4002, 0.92", "54.3872, 38.2835, -53.2932, 0.92", "55.9865, 38.519, -54.9266, 0.92", "56.6931, 38.7838, -56.0616, 0.92", "57.753, 39.3427, -58.3647, 0.92", "58.124, 39.555, -59.4413, 0.92", "58.5358, 39.8665, -61.1037, 0.92", "58.9703, 40.2854, -63.4366, 0.92", "59.2107, 40.4967, -65.0245, 0.92", "59.5415, 40.6301, -67.3817, 0.92", "59.8701, 40.5235, -69.4162, 0.92", "60.0983, 40.3597, -70.5591, 0.92", "60.4613, 39.9981, -72.17, 0.92", "60.9197, 39.4547, -74.2474, 0.92", "61.4117, 38.9064, -76.3946, 0.92", "61.9804, 38.305, -78.7804, 0.92", "62.5745, 37.7645, -80.9542, 0.92", "63.1911, 37.1987, -83.0374, 0.92", "64.0234, 36.4034, -85.8173, 0.92", "64.9759, 35.6288, -89.0028, 0.92" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "20.0277, 22.4814, -18.1157, 0.92", "19.7912, 23.0609, -19.1042, 0.92", "19.4811, 24.0287, -20.9436, 0.92", "19.3771, 24.6129, -22.1283, 0.92", "19.3194, 25.2204, -23.3402, 1.38", "19.2344, 26.1003, -25.0547, 1.38", "19.1243, 27.352, -27.2601, 1.38", "19.0344, 28.1126, -28.4727, 1.38", "18.9142, 29.0514, -29.7054, 1.15", "18.8362, 29.9667, -30.8522, 0.92", "18.7543, 31.129, -32.2115, 0.92", "18.6198, 32.3853, -33.3493, 0.92", "18.342, 33.8453, -34.2647, 0.92", "18.0113, 34.9689, -34.7763, 1.15" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-14.1728, -3.08485, -0.52669, 1.15", "-15.7002, -1.98834, 0.13909, 1.15", "-16.4505, -1.54196, 0.457182, 1.15", "-17.8176, -0.839221, 1.00904, 1.15", "-18.9695, -0.335634, 1.39892, 0.92", "-20.2808, 0.237618, 1.84273, 0.92", "-20.9596, 0.534369, 2.07248, 0.92", "-22.0725, 0.944819, 2.48537, 1.15", "-22.5676, 1.07743, 2.65553, 1.15", "-24.2319, 1.251, 3.0504, 1.15" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-14.1728, -3.08485, -0.52669, 1.15", "-15.4464, -0.870098, -1.88674, 1.15", "-16.3316, 0.848436, -2.90682, 1.15", "-17.0498, 2.24288, -3.73452, 0.92", "-17.6225, 3.35487, -4.39457, 0.92", "-18.1559, 4.39045, -5.00926, 0.92", "-18.7072, 5.46086, -5.64463, 1.15", "-18.9479, 5.97866, -5.87018, 1.15" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "13.9587, 34.967, 0.0, 0.46", "19.166, 49.0341, 0.0, 0.46", "24.3733, 63.1012, 0.0, 0.46" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "-0.813321, 23.441, -1.82088, 0.46", "-0.625151, 24.5527, -2.12038, 0.46", "-0.423973, 25.7414, -2.44057, 0.69", "-0.17666, 27.2027, -2.8342, 0.69", "-0.022625, 28.1129, -3.07936, 0.92", "0.21337, 29.5073, -3.45497, 1.15" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "-0.813321, 23.441, -1.82088, 0.92", "-1.62989, 24.7915, -3.10228, 0.92", "-2.54058, 26.4881, -4.39047, 0.92", "-3.06335, 27.4883, -5.02265, 0.92", "-3.5734, 28.4642, -5.63943, 0.92", "-4.38999, 30.0266, -6.62691, 0.92", "-4.83199, 30.8723, -7.1614, 1.15", "-5.59345, 32.4136, -8.15065, 0.23", "-6.04703, 33.4116, -8.61177, 0.23" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "18.0113, 34.9689, -34.7763, 0.92", "17.1347, 35.731, -37.1382, 0.92", "16.3042, 36.4679, -39.2044, 0.92", "15.665, 37.052, -40.6552, 0.92", "15.0545, 37.6961, -42.1841, 0.92", "14.616, 38.2609, -43.4719, 0.92", "14.3671, 38.6417, -44.3283, 0.92", "14.2014, 39.119, -45.2033, 0.92", "14.2174, 39.9016, -46.539, 0.92", "14.5197, 40.8928, -48.1873, 0.92", "14.8523, 41.6825, -49.473, 0.92", "15.0239, 42.0608, -50.0946, 0.92", "15.5389, 43.0951, -51.9674, 0.92", "16.0509, 43.8615, -53.579, 0.92", "16.7527, 44.5588, -55.2941, 0.92", "17.423, 45.0019, -56.6871, 1.15", "18.4019, 45.4876, -58.4561, 0.92", "19.5465, 45.9626, -60.3263, 0.92", "20.9495, 46.4018, -62.314, 0.92", "22.4761, 46.856, -64.0792, 0.92", "23.9767, 47.2854, -65.5081, 0.92", "25.0875, 47.6217, -66.4038, 0.92", "26.4269, 48.0718, -67.3363, 0.92", "27.422, 48.444, -67.9616, 0.92", "28.7007, 48.9421, -68.7799, 0.92", "30.0887, 49.4197, -69.6481, 0.92", "31.5036, 49.7897, -70.3913, 0.92", "32.4631, 49.9207, -70.806, 0.92", "33.7774, 49.9813, -71.2347, 0.92", "35.3769, 49.9108, -71.5868, 0.92", "36.6049, 49.7724, -71.8028, 0.92", "38.2909, 49.59, -72.0295, 0.69", "39.7086, 49.4501, -72.1774, 0.69", "41.1974, 49.3376, -72.3019, 0.69", "43.4027, 49.2348, -72.4464, 0.92", "45.6353, 49.1516, -72.5302, 0.92", "47.7032, 48.9963, -72.6311, 0.69" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "18.0113, 34.9689, -34.7763, 0.92", "17.2121, 36.7833, -36.073, 0.92", "16.721, 37.7584, -36.6952, 0.92", "16.0865, 39.0504, -37.4482, 0.92", "15.6265, 40.2001, -37.9904, 0.92", "15.3974, 40.9524, -38.304, 0.92", "15.1604, 42.0009, -38.7232, 0.92", "15.0817, 43.1951, -39.1777, 0.92", "15.1528, 43.7637, -39.431, 0.92", "15.6501, 45.3992, -40.1815, 0.92", "16.2523, 46.8536, -40.9555, 0.92", "16.8603, 48.0952, -41.7917, 0.92", "17.7311, 49.6241, -42.9724, 0.69", "18.2701, 50.5646, -43.7202, 0.69", "18.623, 51.2019, -44.1986, 0.92", "19.3301, 52.5517, -45.132, 0.92", "19.9335, 53.7569, -45.8119, 0.92", "20.5185, 54.9668, -46.3767, 0.92", "21.4053, 56.8615, -47.0992, 0.92", "21.9822, 58.1386, -47.5899, 0.92", "22.3773, 59.0731, -47.999, 0.92", "22.9005, 60.3743, -48.6186, 0.92", "23.4479, 61.995, -49.631, 1.15", "23.6046, 63.0691, -50.7373, 1.15", "23.6056, 64.4435, -52.7571, 0.92", "23.4087, 65.3394, -54.4923, 0.92", "23.1213, 65.7482, -55.6724, 0.69", "22.39, 65.9776, -57.2005, 0.69", "21.5574, 65.9516, -58.3921, 0.69" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "-24.2319, 1.251, 3.0504, 1.15", "-25.07, 1.00958, 3.88088, 1.15", "-26.2908, 0.481527, 5.081, 1.15", "-27.4554, -0.188283, 6.13635, 0.92", "-28.232, -0.734233, 6.80242, 0.92", "-28.9342, -1.34382, 7.3919, 0.92", "-29.2773, -1.69231, 7.68275, 0.92", "-29.7798, -2.39917, 8.1344, 0.92", "-30.3003, -3.37851, 8.54106, 0.92", "-30.6578, -4.23114, 8.85832, 0.92", "-31.0394, -5.211, 9.21539, 0.92", "-31.3172, -5.86441, 9.45558, 0.92", "-31.9371, -7.10989, 9.86633, 0.92", "-32.6697, -8.4324, 10.2378, 0.69", "-33.7205, -10.1931, 10.6231, 0.69", "-34.2017, -10.8942, 10.7297, 0.69", "-34.9099, -11.749, 10.8131, 0.69", "-36.2828, -13.1394, 10.8584, 0.69", "-37.0073, -13.7917, 10.841, 0.92", "-37.8684, -14.5467, 10.8118, 0.92", "-39.2296, -15.7592, 10.7754, 0.92", "-40.1294, -16.6348, 10.8118, 0.69", "-41.2529, -17.9141, 10.9805, 0.69", "-42.2636, -19.2719, 11.2984, 0.69", "-42.9442, -20.2886, 11.5932, 0.69", "-43.4515, -21.2191, 11.9141, 0.69", "-44.0622, -22.714, 12.4911, 0.69", "-44.5095, -24.283, 13.1206, 0.69", "-44.7785, -25.4979, 13.6109, 0.69", "-44.986, -26.4305, 14.0124, 0.69", "-45.2389, -27.3943, 14.4177, 0.69", "-45.5889, -28.5695, 14.8791, 0.69", "-45.9065, -29.5422, 15.308, 0.69", "-46.4226, -30.7705, 15.9168, 0.46", "-46.9472, -31.8416, 16.552, 0.46", "-47.424, -32.6795, 17.1809, 0.46", "-47.9971, -33.438, 17.9532, 0.69", "-48.9942, -34.1906, 19.5883, 0.69", "-49.5774, -34.2018, 20.7719, 0.69", "-50.1508, -33.9289, 22.1461, 0.69", "-50.7167, -33.5097, 23.4457, 0.69", "-51.1914, -33.0084, 24.5203, 0.46", "-51.8983, -32.1721, 25.9018, 0.46", "-52.576, -31.493, 26.8644, 0.46", "-53.6381, -30.7012, 27.953, 0.92", "-55.0384, -29.9258, 29.0552, 0.69", "-56.5765, -29.2684, 30.1125, 0.69", "-57.6921, -28.9034, 30.8299, 0.69", "-59.4916, -28.4552, 31.9367, 0.69", "-61.5549, -28.0809, 33.2534, 0.69", "-62.9233, -27.9631, 34.166, 0.69", "-64.0063, -28.1177, 34.9638, 0.69", "-65.1806, -28.6845, 35.9557, 0.69", "-66.0764, -29.5506, 36.9032, 0.69", "-66.6081, -30.6853, 37.6976, 0.69", "-66.7899, -31.4804, 38.0504, 0.46", "-66.9908, -32.9981, 38.5034, 0.46", "-67.0913, -34.4259, 38.7597, 0.46", "-67.1201, -35.3081, 38.8553, 0.46", "-67.1235, -36.9255, 38.953, 0.46", "-67.0729, -37.8101, 39.0223, 0.46", "-66.9805, -38.4893, 39.0999, 0.46", "-66.6486, -40.277, 39.4012, 0.46", "-66.501, -41.0028, 39.5458, 0.46", "-66.2392, -42.2347, 39.8052, 0.69", "-65.826, -43.9864, 40.1635, 0.46", "-65.4444, -45.3762, 40.4767, 0.46", "-65.0821, -46.702, 40.8409, 0.46", "-64.6745, -48.2477, 41.4216, 0.23", "-64.4661, -49.113, 41.8485, 0.23", "-64.223, -50.0867, 42.4882, 0.46", "-63.8684, -51.3209, 43.5454, 0.46", "-63.4569, -52.5555, 44.857, 0.46", "-63.0712, -53.7295, 46.3095, 0.46", "-62.7478, -54.798, 47.8848, 0.46", "-62.55, -55.5247, 49.1105, 0.46", "-62.3139, -56.3769, 50.6857, 0.46", "-62.0849, -57.0499, 51.9896, 0.46", "-61.8001, -57.5779, 53.0708, 0.46", "-61.451, -58.0424, 54.0241, 0.46", "-60.9559, -58.5149, 54.8768, 0.46", "-60.2931, -59.0899, 55.8048, 0.46", "-59.602, -59.5465, 56.4367, 0.23", "-58.6396, -60.0662, 57.0541, 0.23", "-57.8779, -60.4622, 57.4481, 0.23", "-56.5654, -61.22, 58.0311, 0.46" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "-24.2319, 1.251, 3.0504, 0.92", "-25.7483, 3.23043, 2.90611, 0.92", "-26.6146, 4.4731, 2.93928, 0.92", "-27.1679, 5.25818, 2.93417, 0.92", "-28.4576, 7.03461, 2.79287, 0.92", "-29.7364, 8.80279, 2.54908, 1.15", "-30.8801, 10.4411, 2.21509, 1.15", "-31.8739, 11.9267, 1.86854, 0.92", "-32.8442, 13.4278, 1.43733, 0.92", "-33.6812, 14.7229, 0.987409, 0.92", "-34.5579, 16.0656, 0.383281, 0.92", "-35.6456, 17.6528, -0.589544, 1.38", "-36.6274, 19.0702, -1.64463, 0.92", "-37.1543, 19.8496, -2.25868, 0.92" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-18.9479, 5.97866, -5.87018, 0.92", "-20.4752, 5.34058, -7.35484, 0.92", "-21.6622, 4.67481, -8.48937, 0.92", "-22.6265, 4.05717, -9.4517, 0.92", "-23.5187, 3.45635, -10.3283, 0.92", "-24.3081, 2.92314, -11.0622, 0.92", "-25.2605, 2.32226, -11.8801, 0.92", "-26.1452, 1.75515, -12.5339, 0.92", "-27.0316, 1.28097, -13.0643, 0.69", "-27.6847, 1.05274, -13.3361, 0.69", "-28.7254, 0.801378, -13.6429, 0.69", "-30.005, 0.544979, -13.9132, 0.69", "-31.1655, 0.371175, -14.1168, 0.69", "-32.4324, 0.224691, -14.3104, 0.69", "-34.1967, 0.0174401, -14.5143, 0.92", "-36.4332, -0.260728, -14.7682, 0.92", "-38.1038, -0.509831, -14.9398, 0.92" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-18.9479, 5.97866, -5.87018, 0.92", "-19.0811, 7.03895, -6.51192, 0.92", "-19.0358, 8.61506, -7.71205, 0.92", "-18.8245, 9.92045, -8.77258, 0.92", "-18.6635, 10.7785, -9.44275, 0.92", "-18.515, 11.8822, -10.2741, 0.92", "-18.4187, 13.0202, -11.1211, 0.92", "-18.37, 14.2843, -12.0873, 1.15", "-18.3564, 15.8154, -13.3074, 1.15", "-18.3614, 17.1195, -14.3686, 0.92", "-18.451, 18.6265, -15.5613, 0.92", "-18.6136, 19.7328, -16.3913, 0.92", "-18.7568, 20.3342, -16.8041, 0.92", "-19.0484, 21.1885, -17.3784, 0.92", "-19.4694, 22.1507, -18.135, 1.15", "-19.7479, 22.8034, -18.7532, 1.15" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "0.21337, 29.5073, -3.45497, 1.15", "1.95329, 30.232, -4.35251, 1.15", "3.58667, 30.7631, -5.07549, 1.15", "5.27081, 31.2829, -5.64541, 0.92", "7.23357, 31.8473, -6.1038, 0.92", "9.21575, 32.3866, -6.49975, 1.15", "10.7683, 32.7479, -6.77732, 0.92", "12.9805, 33.1852, -7.09384, 0.92", "14.9666, 33.5867, -7.33045, 0.92", "16.9058, 34.0196, -7.54365, 0.92", "18.8875, 34.5032, -7.75369, 0.92", "21.9594, 35.2446, -8.07955, 0.92", "24.9199, 36.0116, -8.47053, 0.92", "27.011, 36.6096, -8.8261, 0.92", "27.9341, 36.8707, -9.04577, 0.92", "29.2551, 37.2901, -9.4047, 0.69" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "0.21337, 29.5073, -3.45497, 0.92", "0.028254, 30.996, -4.2464, 0.92", "-0.0998117, 32.026, -4.79392, 0.92", "-0.219049, 32.9848, -5.30369, 0.92", "-0.375442, 34.2426, -5.97232, 0.92", "-0.503401, 35.2716, -6.51938, 0.92" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-37.1543, 19.8496, -2.25868, 0.69", "-38.0668, 20.8571, -2.95712, 0.69", "-39.3724, 22.1763, -3.85691, 0.69", "-40.4818, 23.1031, -4.3284, 0.69", "-41.2321, 23.675, -4.54627, 0.69", "-41.8023, 24.1486, -4.6713, 0.69", "-42.3659, 24.6644, -4.78452, 0.69", "-42.7518, 25.0469, -4.86582, 0.69", "-44.3726, 26.8083, -5.29574, 0.92", "-45.2337, 27.9103, -5.65201, 0.92", "-46.2841, 29.4865, -6.25957, 0.92", "-47.661, 31.9288, -7.29972, 0.92", "-48.2778, 33.3442, -7.96847, 0.92", "-48.7775, 34.8402, -8.79326, 0.92", "-49.2463, 36.7678, -10.0388, 0.92", "-49.4929, 38.2283, -11.072, 0.92", "-49.5702, 39.0781, -11.7106, 0.92", "-49.5498, 40.5137, -12.8383, 0.92", "-49.4418, 41.6578, -13.8182, 0.92", "-49.297, 42.8192, -14.8373, 0.92", "-49.1004, 43.7653, -15.7643, 0.92", "-48.7434, 45.1461, -17.2606, 0.92", "-48.4254, 46.3452, -18.6096, 0.69", "-47.9908, 48.0304, -20.5063, 0.69" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-37.1543, 19.8496, -2.25868, 0.92", "-37.874, 18.8562, -4.12736, 0.92", "-38.4892, 18.1481, -5.51736, 0.92", "-39.1602, 17.559, -6.88141, 0.92", "-39.5303, 17.32, -7.51019, 0.92", "-40.3718, 16.8713, -8.7485, 0.92", "-41.5125, 16.3471, -10.1727, 0.92", "-42.6305, 16.1073, -11.1973, 0.69", "-43.6701, 16.0189, -11.8761, 0.69", "-44.6378, 15.9725, -12.3551, 0.69", "-45.6291, 15.9163, -12.7686, 0.69", "-46.6672, 15.7887, -13.1114, 0.92", "-48.0658, 15.4639, -13.5425, 0.92", "-49.652, 14.8611, -13.9044, 1.15", "-50.5863, 14.327, -14.0839, 0.92", "-51.362, 13.7526, -14.224, 0.92", "-52.6717, 12.6088, -14.4193, 0.92", "-53.7872, 11.489, -14.5592, 0.92", "-54.7288, 10.409, -14.7161, 0.92", "-55.331, 9.67341, -14.9333, 0.92", "-55.8551, 9.03658, -15.2823, 0.92", "-56.1516, 8.70253, -15.5859, 0.92", "-57.0846, 7.76036, -16.6463, 0.92", "-58.1992, 6.80814, -18.0186, 0.69", "-59.2431, 5.989, -19.3751, 0.69", "-60.4144, 5.07349, -21.0576, 0.69", "-61.1787, 4.40774, -22.3408, 0.69", "-62.0868, 3.53287, -24.14, 0.69", "-62.897, 2.64039, -26.2893, 0.69" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-38.1038, -0.509831, -14.9398, 0.92", "-39.5187, -0.561958, -15.7653, 0.92", "-40.7409, -0.540908, -16.4288, 0.69", "-42.252, -0.498152, -17.2353, 0.69", "-43.0266, -0.452032, -17.6004, 0.69", "-44.3795, -0.263248, -18.1262, 0.92", "-45.7534, -0.0110729, -18.647, 0.92", "-46.4361, 0.116376, -18.8961, 0.69", "-47.2895, 0.298307, -19.1837, 0.69", "-48.8746, 0.676748, -19.6859, 0.92", "-50.9925, 1.21422, -20.3744, 0.69", "-52.3244, 1.52858, -20.7835, 0.92", "-53.1532, 1.70103, -21.0457, 0.92", "-55.1419, 2.00806, -21.6375, 0.92", "-56.4957, 2.20245, -22.0406, 0.92", "-57.2116, 2.27485, -22.2692, 0.92", "-58.7461, 2.33343, -22.7558, 1.15", "-59.2791, 2.3517, -22.893, 1.15", "-60.9903, 2.44573, -23.2921, 1.15" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-38.1038, -0.509831, -14.9398, 0.69", "-38.3915, -1.7763, -12.932, 0.69", "-38.5025, -2.85738, -11.3418, 0.69", "-38.5213, -3.84686, -9.99564, 0.92", "-38.4951, -4.6894, -9.00009, 0.92", "-38.4882, -5.50423, -8.17322, 0.92", "-38.5323, -6.04748, -7.67499, 0.69", "-38.702, -7.05921, -6.96238, 0.69", "-38.8296, -7.50656, -6.67606, 0.69", "-39.2983, -8.59196, -6.04147, 0.92", "-39.8877, -9.71703, -5.35625, 0.46", "-40.6841, -11.0615, -4.45017, 0.46", "-41.3381, -12.1536, -3.68548, 0.46", "-41.8761, -13.03, -3.06122, 0.46", "-42.3958, -13.8985, -2.47116, 0.46", "-43.0038, -14.9292, -1.81496, 1.15", "-43.4788, -15.8152, -1.28895, 0.92", "-44.2432, -17.4694, -0.450625, 0.69", "-44.8504, -18.9179, 0.124232, 0.69", "-45.4296, -20.2882, 0.57559, 0.92", "-45.8917, -21.3983, 0.899416, 0.92", "-46.538, -22.9193, 1.25487, 0.92", "-47.0213, -24.0665, 1.45947, 0.92", "-47.6952, -25.7556, 1.70691, 0.69", "-48.1098, -26.9122, 1.8594, 0.69", "-48.6117, -28.4405, 2.08718, 0.69", "-49.0263, -29.7945, 2.25085, 0.69", "-49.6831, -31.7132, 2.35682, 0.46" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-19.7479, 22.8034, -18.7532, 0.69", "-20.0723, 22.9249, -19.9606, 0.69", "-20.4388, 23.1192, -21.2367, 0.69", "-21.2207, 23.6994, -23.923, 0.69", "-21.735, 24.1546, -25.5745, 0.92", "-22.1665, 24.6411, -27.0769, 0.92", "-22.4284, 25.0611, -28.1033, 0.69", "-22.785, 25.6362, -29.2641, 0.69", "-23.2272, 26.3545, -30.4772, 0.69", "-23.6254, 27.0155, -31.3796, 0.92", "-24.2503, 27.9473, -32.6224, 0.92", "-25.1603, 29.0829, -34.291, 0.69", "-25.8747, 29.7704, -35.5438, 0.69", "-26.8539, 30.5749, -37.2633, 0.92", "-27.5249, 31.0238, -38.4032, 0.92", "-28.6601, 31.5756, -40.1989, 0.92", "-29.5344, 31.8335, -41.5172, 0.92", "-30.5724, 31.9454, -43.0807, 0.92", "-31.7175, 31.9545, -44.8755, 0.69", "-32.8114, 31.9086, -46.601, 0.69", "-33.9351, 31.8871, -48.3678, 0.69", "-34.7802, 31.9431, -49.6811, 0.69", "-35.4758, 32.0951, -50.8111, 0.69", "-36.1041, 32.3905, -51.9441, 0.69", "-36.3586, 32.5935, -52.5414, 0.69", "-36.6217, 32.9492, -53.4493, 0.69", "-37.0301, 33.7233, -55.4387, 0.92", "-37.4195, 34.4818, -57.5724, 0.92", "-37.6837, 34.9693, -59.2033, 0.92", "-38.0157, 35.3512, -60.9369, 0.92", "-38.3663, 35.5406, -62.4072, 0.92", "-38.7297, 35.6362, -63.62, 0.92", "-39.2804, 35.716, -65.0641, 0.92", "-39.6737, 35.7851, -65.8259, 0.92", "-40.3605, 35.91, -66.9152, 0.92", "-41.4662, 36.1479, -68.3596, 0.92", "-43.1851, 36.5933, -70.2654, 0.69", "-44.1852, 36.8701, -71.1686, 0.69", "-46.1087, 37.3741, -72.5499, 0.69", "-47.5024, 37.7183, -73.3097, 0.69", "-48.5001, 37.9691, -73.671, 0.92", "-49.3751, 38.237, -73.7743, 1.15", "-51.1512, 38.9193, -73.6689, 0.92", "-52.5641, 39.6056, -73.5499, 0.92", "-53.7687, 40.3166, -73.42, 0.69", "-54.9283, 41.0582, -73.2759, 0.69", "-56.8665, 42.2964, -73.0978, 0.69", "-58.0877, 42.9958, -73.0906, 0.69", "-60.5805, 44.2646, -73.4086, 0.69", "-62.2325, 44.9941, -73.7838, 0.69", "-64.3967, 45.7729, -74.5237, 0.92", "-65.3959, 46.0547, -75.024, 0.92", "-67.7116, 46.5494, -76.5222, 0.92", "-69.5837, 46.8685, -77.8692, 0.92", "-70.8958, 47.0378, -78.9524, 0.92", "-72.8163, 47.211, -80.834, 0.92", "-74.3831, 47.3315, -82.6626, 0.92", "-75.3641, 47.4534, -83.9041, 0.92" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-19.7479, 22.8034, -18.7532, 0.92", "-19.7927, 23.4174, -19.2139, 0.92", "-19.9336, 24.0364, -19.7129, 0.92", "-20.096, 24.7668, -20.2536, 0.69", "-20.3285, 25.7664, -20.9603, 0.69", "-20.6866, 27.1528, -21.8858, 0.69", "-20.9333, 28.1195, -22.5343, 0.69", "-21.1884, 29.2433, -23.2792, 0.69", "-21.4628, 30.5206, -24.0853, 0.69", "-21.7709, 31.9562, -24.974, 0.69", "-22.0016, 33.0625, -25.6629, 0.69", "-22.2523, 34.3183, -26.4588, 0.69", "-22.5544, 35.8214, -27.4945, 0.46", "-22.8111, 37.0802, -28.4441, 0.46", "-23.043, 38.2168, -29.4846, 0.69", "-23.2704, 39.3601, -30.8556, 0.69", "-23.3532, 39.7687, -31.3991, 0.69", "-23.5516, 40.5816, -32.6151, 0.69", "-23.7789, 41.3588, -34.0263, 0.69", "-24.0133, 42.3519, -36.1762, 0.69", "-24.1516, 43.4119, -38.8516, 0.69" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-60.9903, 2.44573, -23.2921, 0.92", "-61.2362, 2.87882, -24.048, 0.92", "-61.8365, 3.99739, -26.4308, 1.15", "-62.1289, 4.77632, -28.0725, 0.92", "-62.3478, 5.86432, -30.217, 0.92", "-62.4365, 7.22994, -32.9007, 0.92", "-62.4082, 8.0872, -34.6676, 0.92", "-62.237, 9.03461, -37.0272, 0.92", "-62.0046, 9.61283, -38.7257, 1.15", "-61.5638, 10.2433, -40.5848, 0.92", "-60.9551, 10.8403, -42.2272, 0.92", "-60.4302, 11.288, -43.2495, 0.92", "-59.6533, 11.883, -44.4965, 0.92", "-59.3295, 12.1256, -44.9721, 0.92", "-58.4096, 12.8361, -46.5653, 0.92", "-57.8066, 13.4014, -47.6719, 0.69", "-57.2352, 14.0771, -48.6714, 0.69", "-56.7149, 14.896, -49.6433, 0.69", "-56.3273, 15.7395, -50.5018, 1.15", "-55.8715, 17.9797, -52.4657, 1.15", "-55.9397, 19.1005, -53.201, 0.92", "-56.3394, 20.4884, -53.7082, 0.92", "-57.1013, 22.1495, -54.0244, 0.92", "-57.7658, 23.3585, -54.1329, 1.15", "-58.8169, 25.0257, -54.1814, 0.92", "-59.5759, 26.2708, -54.2124, 0.92", "-60.3011, 27.5691, -54.4179, 1.15", "-61.3041, 29.8102, -55.1832, 0.69", "-61.5853, 30.5735, -55.5808, 0.69", "-61.9474, 31.6912, -56.3554, 0.69", "-62.5169, 33.3933, -57.8044, 0.69", "-63.0429, 34.7541, -59.182, 1.15", "-63.6749, 36.3507, -61.0164, 0.69", "-64.1701, 37.5977, -62.6482, 0.69", "-64.3784, 38.0914, -63.3772, 0.69", "-64.6786, 38.8312, -64.5477, 0.92", "-65.2649, 40.1468, -66.6208, 0.92", "-65.7954, 41.3413, -68.5016, 0.92", "-66.4209, 42.6641, -70.6725, 0.92", "-67.1263, 43.9815, -72.8556, 0.92", "-67.9241, 45.1758, -74.9736, 0.92", "-68.5155, 45.8295, -76.3358, 0.92", "-69.0865, 46.2329, -77.3957, 0.92", "-70.5665, 46.8013, -79.5955, 0.92", "-72.1395, 47.1171, -81.3602, 0.69", "-74.0028, 47.2794, -83.0946, 0.69", "-76.4682, 47.3057, -85.1011, 0.69", "-77.9632, 47.2216, -86.2008, 0.69", "-80.835, 46.9713, -88.0779, 0.69", "-84.1177, 46.4735, -89.9902, 0.69", "-86.5153, 46.0484, -91.3012, 0.69", "-87.9157, 45.7709, -91.9224, 0.69", "-89.8409, 45.3719, -92.5555, 0.46", "-90.7579, 45.17, -92.8037, 0.46", "-92.8352, 44.5482, -93.228, 0.46" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-60.9903, 2.44573, -23.2921, 0.92", "-61.5005, 2.47317, -24.1534, 0.92", "-62.6782, 2.4688, -25.9739, 0.92", "-63.8812, 2.50848, -27.8388, 0.92", "-64.2129, 2.53809, -28.3412, 0.92", "-64.9687, 2.62049, -29.4528, 0.92", "-65.9787, 2.7132, -30.7535, 0.69", "-66.9297, 2.76604, -31.7821, 0.69", "-68.0363, 2.81372, -32.8068, 0.69", "-68.922, 2.88522, -33.5379, 0.69", "-69.9699, 3.00033, -34.3436, 0.69", "-71.7184, 3.14594, -35.588, 0.69", "-72.8739, 3.12791, -36.2697, 0.46", "-73.4974, 3.04706, -36.575, 0.46", "-75.3162, 2.58477, -37.3067, 0.69", "-75.8646, 2.38544, -37.4942, 0.46", "-77.2739, 1.75206, -37.9567, 0.46", "-78.7338, 0.992589, -38.4363, 0.46", "-79.7898, 0.383484, -38.7773, 0.69", "-80.7005, -0.214671, -39.1308, 0.69", "-81.4462, -0.758155, -39.4467, 0.69", "-82.9252, -1.8728, -40.1857, 0.69", "-83.5729, -2.37231, -40.5743, 0.69", "-84.5516, -3.1861, -41.2552, 0.69", "-85.7138, -4.19781, -42.1413, 0.69", "-86.472, -4.85422, -42.7238, 0.92", "-87.8044, -5.969, -43.7453, 0.69", "-88.785, -6.69697, -44.4238, 0.69", "-89.6416, -7.23576, -45.0114, 0.69", "-91.1407, -7.96755, -45.9244, 0.92", "-91.9637, -8.27742, -46.3462, 0.92", "-93.5828, -8.81212, -47.1102, 0.69", "-95.0448, -9.24446, -47.7005, 0.69", "-96.8553, -9.75808, -48.3411, 0.69", "-98.5113, -10.2382, -48.9801, 0.69", "-99.8977, -10.6996, -49.6041, 0.69", "-101.84, -11.4804, -50.6576, 0.69", "-103.01, -12.0181, -51.3811, 0.69", "-104.273, -12.6544, -52.2495, 0.69", "-106.024, -13.5519, -53.4987, 0.69", "-107.676, -14.3669, -54.7922, 0.69", "-109.034, -14.9911, -55.9509, 0.46", "-109.831, -15.3219, -56.6944, 0.69", "-110.586, -15.6027, -57.4398, 0.69", "-111.264, -15.8392, -58.0998, 0.46", "-112.12, -16.081, -58.8216, 0.46", "-113.793, -16.427, -60.123, 0.23", "-115.629, -16.6742, -61.5751, 0.23", "-116.202, -16.7668, -62.1011, 0.23" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_28", "dend_27", "dend_20", "dend_15", "dend_0", "dend_30", "dend_29", "dend_26", "dend_21", "dend_19", "dend_16", "dend_10", "dend_1", "dend_23", "dend_22", "dend_18", "dend_17", "dend_14", "dend_11", "dend_5", "dend_2", "dend_25", "dend_24", "dend_13", "dend_12", "dend_7", "dend_6", "dend_4", "dend_3", "dend_9", "dend_8" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_28", "dend_27", "dend_20", "dend_15", "dend_0", "dend_30", "dend_29", "dend_26", "dend_21", "dend_19", "dend_16", "dend_10", "dend_1", "dend_23", "dend_22", "dend_18", "dend_17", "dend_14", "dend_11", "dend_5", "dend_2", "dend_25", "dend_24", "dend_13", "dend_12", "dend_7", "dend_6", "dend_4", "dend_3", "dend_9", "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_20", "dend_20", "dend_20", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.999855",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.042115",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0012239999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.001693",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.386953",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "8.0E-6",
    "erev" : "-63.854015"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.5399997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.039862998",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "5.2299997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.0054459996",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.503893",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "1.0E-4",
    "erev" : "-67.1289"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.78E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.15074699",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009017",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "4.0E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.0032419998",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "1.74E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bNAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bNAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bNAC219_L1_HAC_369e749269_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_28, id: dend_28, parent: soma_0
create dend_28
public dend_28
// Section: dend_27, id: dend_27, parent: soma_0
create dend_27
public dend_27
// Section: dend_20, id: dend_20, parent: soma_0
create dend_20
public dend_20
// Section: dend_15, id: dend_15, parent: soma_0
create dend_15
public dend_15
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_30, id: dend_30, parent: dend_28
create dend_30
public dend_30
// Section: dend_29, id: dend_29, parent: dend_28
create dend_29
public dend_29
// Section: dend_26, id: dend_26, parent: dend_20
create dend_26
public dend_26
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_19, id: dend_19, parent: dend_15
create dend_19
public dend_19
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_10, id: dend_10, parent: dend_0
create dend_10
public dend_10
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_23, id: dend_23, parent: dend_21
create dend_23
public dend_23
// Section: dend_22, id: dend_22, parent: dend_21
create dend_22
public dend_22
// Section: dend_18, id: dend_18, parent: dend_16
create dend_18
public dend_18
// Section: dend_17, id: dend_17, parent: dend_16
create dend_17
public dend_17
// Section: dend_14, id: dend_14, parent: dend_10
create dend_14
public dend_14
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_5, id: dend_5, parent: dend_1
create dend_5
public dend_5
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_25, id: dend_25, parent: dend_23
create dend_25
public dend_25
// Section: dend_24, id: dend_24, parent: dend_23
create dend_24
public dend_24
// Section: dend_13, id: dend_13, parent: dend_11
create dend_13
public dend_13
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_4, id: dend_4, parent: dend_2
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_9, id: dend_9, parent: dend_7
create dend_9
public dend_9
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_28, dend_27, dend_20, dend_15, dend_0, dend_30, dend_29, dend_26, dend_21, dend_19, dend_16, dend_10, dend_1, dend_23, dend_22, dend_18, dend_17, dend_14, dend_11, dend_5, dend_2, dend_25, dend_24, dend_13, dend_12, dend_7, dend_6, dend_4, dend_3, dend_9, dend_8]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_28, dend_27, dend_20, dend_15, dend_0, dend_30, dend_29, dend_26, dend_21, dend_19, dend_16, dend_10, dend_1, dend_23, dend_22, dend_18, dend_17, dend_14, dend_11, dend_5, dend_2, dend_25, dend_24, dend_13, dend_12, dend_7, dend_6, dend_4, dend_3, dend_9, dend_8]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_30
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_20, dend_20, dend_20, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_24, dend_24, dend_24, dend_24, dend_24, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bNAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bNAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_28(0), soma_0(0.44999992228880115)
    connect dend_27(0), soma_0(0.44999992228880115)
    connect dend_20(0), soma_0(0.44999992228880115)
    connect dend_15(0), soma_0(0.44999992228880115)
    connect dend_0(0), soma_0(0.44999992228880115)
    connect axon_0(0), soma_0(1.0)
    connect dend_30(0), dend_28(1.0)
    connect dend_29(0), dend_28(1.0)
    connect dend_26(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_19(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_10(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_23(0), dend_21(1.0)
    connect dend_22(0), dend_21(1.0)
    connect dend_18(0), dend_16(1.0)
    connect dend_17(0), dend_16(1.0)
    connect dend_14(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_5(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_25(0), dend_23(1.0)
    connect dend_24(0), dend_23(1.0)
    connect dend_13(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_4(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_9(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -1.9645, -8.04857, 0.0, 3.41075 ) }
    soma_0 { pt3dadd( -1.68907, -7.30451, 0.0, 5.92741 ) }
    soma_0 { pt3dadd( -1.41364, -6.56044, 0.0, 8.58656 ) }
    soma_0 { pt3dadd( -1.1382, -5.81638, 0.0, 10.2633 ) }
    soma_0 { pt3dadd( -0.862771, -5.07231, 0.0, 11.1675 ) }
    soma_0 { pt3dadd( -0.587338, -4.32825, 0.0, 12.0271 ) }
    soma_0 { pt3dadd( -0.311906, -3.58419, 0.0, 12.7278 ) }
    soma_0 { pt3dadd( -0.0364728, -2.84012, 0.0, 13.1471 ) }
    soma_0 { pt3dadd( 0.23896, -2.09606, 0.0, 13.5232 ) }
    soma_0 { pt3dadd( 0.514393, -1.352, 0.0, 13.8993 ) }
    soma_0 { pt3dadd( 0.789825, -0.607933, 0.0, 14.1179 ) }
    soma_0 { pt3dadd( 1.06526, 0.136131, 0.0, 14.0716 ) }
    soma_0 { pt3dadd( 1.34069, 0.880195, 0.0, 13.7957 ) }
    soma_0 { pt3dadd( 1.61612, 1.62426, 0.0, 13.4402 ) }
    soma_0 { pt3dadd( 1.89156, 2.36832, 0.0, 12.8328 ) }
    soma_0 { pt3dadd( 2.16699, 3.11239, 0.0, 12.1037 ) }
    soma_0 { pt3dadd( 2.44242, 3.85645, 0.0, 11.3245 ) }
    soma_0 { pt3dadd( 2.71785, 4.60051, 0.0, 10.1381 ) }
    soma_0 { pt3dadd( 2.99329, 5.34458, 0.0, 8.73923 ) }
    soma_0 { pt3dadd( 3.26872, 6.08864, 0.0, 7.30374 ) }
    soma_0 { pt3dadd( 3.54415, 6.8327, 0.0, 4.09911 ) }
    // Section: dend_28, id: dend_28, parent: soma_0 (entry count 21/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( -1.44244, -5.48771, -16.12, 1.38 ) }
    dend_28 { pt3dadd( -1.82044, -5.17564, -16.8583, 1.38 ) }
    dend_28 { pt3dadd( -2.63306, -4.25467, -18.3686, 1.38 ) }
    dend_28 { pt3dadd( -3.43216, -3.057, -19.801, 1.38 ) }
    dend_28 { pt3dadd( -3.99149, -1.88422, -20.6869, 1.38 ) }
    dend_28 { pt3dadd( -4.37591, -0.885325, -21.2054, 1.38 ) }
    dend_28 { pt3dadd( -4.78776, 0.209477, -21.6508, 1.38 ) }
    dend_28 { pt3dadd( -5.28468, 1.58118, -22.0494, 1.38 ) }
    dend_28 { pt3dadd( -5.74428, 2.96667, -22.2687, 1.15 ) }
    dend_28 { pt3dadd( -6.37155, 5.01641, -22.3818, 1.15 ) }
    dend_28 { pt3dadd( -6.76071, 6.41211, -22.3827, 0.92 ) }
    dend_28 { pt3dadd( -7.04946, 7.52058, -22.3818, 0.92 ) }
    dend_28 { pt3dadd( -7.54612, 9.26363, -22.3783, 1.15 ) }
    // Section: dend_27, id: dend_27, parent: soma_0 (entry count 34/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( -4.94244, -0.00770696, 8.47, 1.83 ) }
    dend_27 { pt3dadd( -5.72445, 1.34061, 9.14875, 1.83 ) }
    dend_27 { pt3dadd( -6.46148, 2.9843, 9.0318, 1.38 ) }
    dend_27 { pt3dadd( -7.16707, 4.66047, 8.5676, 1.38 ) }
    dend_27 { pt3dadd( -7.67253, 5.97501, 8.08323, 1.38 ) }
    dend_27 { pt3dadd( -8.49345, 8.07387, 7.27537, 1.38 ) }
    dend_27 { pt3dadd( -9.30868, 9.92245, 6.65328, 1.15 ) }
    dend_27 { pt3dadd( -10.1273, 11.7015, 5.95543, 0.92 ) }
    dend_27 { pt3dadd( -10.5239, 12.4931, 5.59943, 0.92 ) }
    dend_27 { pt3dadd( -11.2552, 13.8103, 5.06096, 0.92 ) }
    dend_27 { pt3dadd( -12.0286, 14.7037, 5.0372, 0.92 ) }
    dend_27 { pt3dadd( -13.5543, 15.6899, 5.63293, 0.92 ) }
    dend_27 { pt3dadd( -14.6604, 16.2325, 6.11979, 1.15 ) }
    dend_27 { pt3dadd( -15.3074, 16.4898, 6.39702, 1.83 ) }
    dend_27 { pt3dadd( -16.97, 17.06, 6.94509, 2.06 ) }
    dend_27 { pt3dadd( -18.4079, 17.5378, 7.28951, 1.15 ) }
    dend_27 { pt3dadd( -21.3412, 18.5998, 7.53302, 0.92 ) }
    dend_27 { pt3dadd( -22.0371, 18.8594, 7.50218, 0.92 ) }
    dend_27 { pt3dadd( -23.419, 19.3907, 7.34819, 0.92 ) }
    dend_27 { pt3dadd( -24.9434, 19.9898, 7.09419, 0.92 ) }
    dend_27 { pt3dadd( -26.2089, 20.4963, 6.77408, 0.69 ) }
    dend_27 { pt3dadd( -28.3121, 21.3552, 6.17165, 0.69 ) }
    dend_27 { pt3dadd( -29.1177, 21.6964, 6.01528, 0.46 ) }
    // Section: dend_20, id: dend_20, parent: soma_0 (entry count 57/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 3.01756, 2.37229, 6.8, 1.38 ) }
    dend_20 { pt3dadd( 3.01756, 2.37229, 6.8, 1.38 ) }
    dend_20 { pt3dadd( 2.7626, 3.67929, 6.77616, 1.38 ) }
    dend_20 { pt3dadd( 2.51734, 4.93651, 6.75322, 1.38 ) }
    // Section: dend_15, id: dend_15, parent: soma_0 (entry count 61/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 5.42756, 3.05229, -8.57, 1.15 ) }
    dend_15 { pt3dadd( 5.85473, 3.91092, -9.84956, 1.15 ) }
    dend_15 { pt3dadd( 6.06257, 4.47636, -10.7593, 0.92 ) }
    dend_15 { pt3dadd( 6.30784, 5.14324, -11.797, 0.92 ) }
    dend_15 { pt3dadd( 6.58948, 5.97354, -12.9018, 1.15 ) }
    dend_15 { pt3dadd( 6.91501, 6.82911, -13.8612, 1.38 ) }
    dend_15 { pt3dadd( 7.28353, 7.61267, -14.6378, 1.61 ) }
    dend_15 { pt3dadd( 7.80929, 8.6509, -15.4177, 1.83 ) }
    dend_15 { pt3dadd( 8.23305, 9.36588, -15.7637, 1.83 ) }
    dend_15 { pt3dadd( 9.18214, 10.6209, -15.9569, 1.15 ) }
    dend_15 { pt3dadd( 10.605, 12.2425, -15.6952, 1.15 ) }
    dend_15 { pt3dadd( 11.6897, 13.3391, -15.2931, 0.92 ) }
    dend_15 { pt3dadd( 12.9507, 14.5841, -14.7251, 0.92 ) }
    dend_15 { pt3dadd( 14.012, 15.5996, -14.2613, 1.15 ) }
    dend_15 { pt3dadd( 14.6373, 16.1889, -14.0189, 1.38 ) }
    dend_15 { pt3dadd( 15.76, 17.2113, -13.7246, 0.92 ) }
    dend_15 { pt3dadd( 16.5253, 17.9968, -13.7705, 0.92 ) }
    dend_15 { pt3dadd( 17.4278, 19.066, -14.1826, 0.92 ) }
    dend_15 { pt3dadd( 18.3725, 20.248, -15.0648, 0.92 ) }
    dend_15 { pt3dadd( 18.8108, 20.8083, -15.6474, 1.38 ) }
    dend_15 { pt3dadd( 19.4699, 21.6962, -16.8121, 1.38 ) }
    dend_15 { pt3dadd( 20.0277, 22.4814, -18.1157, 1.38 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 83/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -6.03244, -3.11771, -0.52, 1.38 ) }
    dend_0 { pt3dadd( -6.03244, -3.11771, -0.52, 1.38 ) }
    dend_0 { pt3dadd( -7.83145, -3.11044, -0.521479, 1.38 ) }
    dend_0 { pt3dadd( -9.81852, -3.10242, -0.523112, 1.38 ) }
    dend_0 { pt3dadd( -11.6146, -3.09517, -0.524588, 1.61 ) }
    dend_0 { pt3dadd( -12.3053, -3.09238, -0.525155, 1.61 ) }
    dend_0 { pt3dadd( -14.1728, -3.08485, -0.52669, 1.38 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 90/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 3.54415, 6.8327, 0.0, 0.71682 ) }
    axon_0 { pt3dadd( 8.75143, 20.8998, 0.0, 0.71682 ) }
    axon_0 { pt3dadd( 13.9587, 34.967, 0.0, 0.71682 ) }
    // Section: dend_30, id: dend_30, parent: dend_28 (entry count 93/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( -7.54612, 9.26363, -22.3783, 0.92 ) }
    dend_30 { pt3dadd( -8.04585, 8.7225, -23.9848, 0.92 ) }
    dend_30 { pt3dadd( -8.71632, 8.16781, -26.0022, 0.92 ) }
    dend_30 { pt3dadd( -9.39984, 7.93408, -27.8686, 0.92 ) }
    dend_30 { pt3dadd( -9.95571, 8.11011, -29.6022, 0.92 ) }
    dend_30 { pt3dadd( -10.0875, 8.22386, -30.0519, 0.92 ) }
    dend_30 { pt3dadd( -10.485, 8.63547, -31.3281, 0.92 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_30 { pt3dadd( -10.7468, 8.98618, -32.1158, 0.92 ) }
    dend_30 { pt3dadd( -11.6703, 10.2943, -34.5309, 0.92 ) }
    dend_30 { pt3dadd( -12.8745, 11.8548, -37.1935, 0.92 ) }
    dend_30 { pt3dadd( -13.9395, 12.9662, -39.3343, 1.15 ) }
    dend_30 { pt3dadd( -14.381, 13.2523, -40.1473, 1.15 ) }
    dend_30 { pt3dadd( -14.9627, 13.4207, -41.1446, 0.92 ) }
    dend_30 { pt3dadd( -15.9889, 13.3635, -42.7955, 0.92 ) }
    dend_30 { pt3dadd( -16.9753, 12.979, -44.2244, 1.15 ) }
    dend_30 { pt3dadd( -18.2826, 12.2617, -45.7065, 0.92 ) }
    dend_30 { pt3dadd( -19.8558, 11.2697, -47.201, 0.92 ) }
    dend_30 { pt3dadd( -20.9578, 10.5708, -48.1759, 0.92 ) }
    dend_30 { pt3dadd( -21.8262, 10.0732, -48.9041, 0.92 ) }
    dend_30 { pt3dadd( -23.3701, 9.23606, -50.1079, 0.92 ) }
    dend_30 { pt3dadd( -25.1777, 8.34804, -51.4822, 0.92 ) }
    dend_30 { pt3dadd( -26.7123, 7.77343, -52.6062, 0.69 ) }
    dend_30 { pt3dadd( -28.2042, 7.41737, -53.6816, 0.69 ) }
    dend_30 { pt3dadd( -30.0779, 7.22415, -55.0606, 0.69 ) }
    dend_30 { pt3dadd( -31.2953, 7.30962, -56.0307, 0.69 ) }
    dend_30 { pt3dadd( -31.877, 7.47261, -56.5095, 0.69 ) }
    dend_30 { pt3dadd( -32.7909, 7.85765, -57.3466, 0.69 ) }
    dend_30 { pt3dadd( -33.4463, 8.1558, -57.9852, 0.69 ) }
    dend_30 { pt3dadd( -34.2143, 8.4793, -58.7286, 0.69 ) }
    dend_30 { pt3dadd( -35.1668, 8.80869, -59.6318, 0.69 ) }
    dend_30 { pt3dadd( -36.63, 9.24519, -61.138, 0.46 ) }
    dend_30 { pt3dadd( -38.0651, 9.61962, -62.777, 0.46 ) }
    dend_30 { pt3dadd( -39.1052, 9.89465, -64.1007, 0.46 ) }
    dend_30 { pt3dadd( -39.8554, 10.0962, -65.1465, 0.46 ) }
    dend_30 { pt3dadd( -40.2109, 10.2119, -65.6331, 0.69 ) }
    dend_30 { pt3dadd( -41.2156, 10.6411, -67.07, 0.69 ) }
    dend_30 { pt3dadd( -41.9355, 11.0588, -68.1737, 0.69 ) }
    dend_30 { pt3dadd( -42.9841, 11.7905, -69.6781, 0.46 ) }
    dend_30 { pt3dadd( -43.7696, 12.3436, -70.7765, 0.46 ) }
    dend_30 { pt3dadd( -44.8366, 13.0243, -72.3157, 0.69 ) }
    dend_30 { pt3dadd( -45.9863, 13.6818, -74.0606, 0.69 ) }
    dend_30 { pt3dadd( -47.0041, 14.127, -75.6544, 0.69 ) }
    dend_30 { pt3dadd( -47.6516, 14.3341, -76.7296, 0.69 ) }
    dend_30 { pt3dadd( -48.3673, 14.536, -78.0228, 0.69 ) }
    dend_30 { pt3dadd( -49.1873, 14.7902, -79.6397, 0.69 ) }
    dend_30 { pt3dadd( -49.6892, 14.9572, -80.7303, 0.69 ) }
    dend_30 { pt3dadd( -50.4655, 15.2448, -82.4143, 0.69 ) }
    dend_30 { pt3dadd( -51.3308, 15.6, -84.1918, 0.69 ) }
    dend_30 { pt3dadd( -51.8823, 15.8236, -85.153, 0.69 ) }
    dend_30 { pt3dadd( -53.1184, 16.2895, -86.8661, 0.69 ) }
    dend_30 { pt3dadd( -54.209, 16.6187, -88.0136, 0.69 ) }
    dend_30 { pt3dadd( -55.1848, 16.8332, -88.7939, 0.69 ) }
    dend_30 { pt3dadd( -56.3879, 17.0305, -89.527, 0.69 ) }
    dend_30 { pt3dadd( -58.478, 17.2916, -90.6101, 0.69 ) }
    dend_30 { pt3dadd( -59.8921, 17.4657, -91.2558, 0.69 ) }
    dend_30 { pt3dadd( -61.5389, 17.7057, -91.9887, 0.69 ) }
    dend_30 { pt3dadd( -62.6618, 17.9007, -92.5784, 0.46 ) }
    dend_30 { pt3dadd( -64.3947, 18.2432, -93.7366, 0.46 ) }
    dend_30 { pt3dadd( -65.5784, 18.4549, -94.6956, 0.46 ) }
    dend_30 { pt3dadd( -66.7573, 18.628, -95.8133, 0.46 ) }
    dend_30 { pt3dadd( -68.9875, 18.859, -98.1352, 0.46 ) }
    dend_30 { pt3dadd( -70.7486, 18.9784, -100.08, 0.46 ) }
    dend_30 { pt3dadd( -72.4995, 19.0384, -101.952, 0.46 ) }
    dend_30 { pt3dadd( -73.9222, 19.0202, -103.44, 0.69 ) }
    dend_30 { pt3dadd( -75.7041, 18.9003, -105.285, 0.46 ) }
    dend_30 { pt3dadd( -76.7667, 18.7934, -106.404, 0.46 ) }
    dend_30 { pt3dadd( -77.4757, 18.7248, -107.151, 0.46 ) }
    dend_30 { pt3dadd( -79.1592, 18.6619, -108.926, 0.69 ) }
    dend_30 { pt3dadd( -81.0218, 18.6931, -110.868, 0.69 ) }
    dend_30 { pt3dadd( -82.291, 18.7893, -112.12, 0.69 ) }
    dend_30 { pt3dadd( -83.9123, 19.0068, -113.446, 0.69 ) }
    dend_30 { pt3dadd( -85.364, 19.2732, -114.489, 0.69 ) }
    dend_30 { pt3dadd( -86.9735, 19.6799, -115.551, 0.69 ) }
    dend_30 { pt3dadd( -88.4807, 20.1143, -116.497, 0.69 ) }
    dend_30 { pt3dadd( -90.8882, 20.7763, -117.876, 0.69 ) }
    dend_30 { pt3dadd( -93.0056, 21.2382, -119.008, 0.46 ) }
    dend_30 { pt3dadd( -95.6558, 21.5791, -120.529, 0.46 ) }
    dend_30 { pt3dadd( -98.5144, 21.6931, -122.315, 0.46 ) }
    dend_30 { pt3dadd( -100.371, 21.5492, -123.743, 0.46 ) }
    dend_30 { pt3dadd( -101.938, 21.2838, -125.262, 0.46 ) }
    dend_30 { pt3dadd( -103.356, 20.9041, -126.904, 0.23 ) }
    dend_30 { pt3dadd( -105.004, 20.2897, -129.219, 0.23 ) }
    dend_30 { pt3dadd( -105.657, 19.9699, -130.157, 0.23 ) }
    dend_30 { pt3dadd( -107.318, 18.8974, -132.837, 0.23 ) }
    dend_30 { pt3dadd( -108.211, 18.2668, -134.478, 0.23 ) }
    dend_30 { pt3dadd( -108.872, 17.7752, -135.95, 0.23 ) }
    dend_30 { pt3dadd( -109.853, 16.9352, -138.984, 0.23 ) }
    // Section: dend_29, id: dend_29, parent: dend_28 (entry count 80/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( -7.54612, 9.26363, -22.3783, 0.92 ) }
    dend_29 { pt3dadd( -7.81109, 10.6869, -23.0811, 0.92 ) }
    dend_29 { pt3dadd( -7.95025, 11.9213, -23.7775, 0.92 ) }
    dend_29 { pt3dadd( -8.14871, 13.8493, -24.9135, 0.92 ) }
    dend_29 { pt3dadd( -8.36816, 15.4359, -25.9312, 0.92 ) }
    dend_29 { pt3dadd( -8.71416, 16.96, -26.9925, 1.15 ) }
    dend_29 { pt3dadd( -9.077, 18.0899, -27.8575, 0.92 ) }
    dend_29 { pt3dadd( -9.50426, 19.2841, -28.867, 0.92 ) }
    dend_29 { pt3dadd( -9.65061, 19.6051, -29.1763, 0.92 ) }
    dend_29 { pt3dadd( -10.327, 20.6285, -30.3038, 0.92 ) }
    dend_29 { pt3dadd( -11.3703, 21.669, -31.4836, 0.92 ) }
    dend_29 { pt3dadd( -12.4395, 22.5351, -32.4652, 0.92 ) }
    dend_29 { pt3dadd( -12.9384, 22.9077, -32.8712, 0.92 ) }
    dend_29 { pt3dadd( -13.2554, 23.1502, -33.1062, 0.92 ) }
    dend_29 { pt3dadd( -13.9612, 23.7246, -33.6661, 0.92 ) }
    dend_29 { pt3dadd( -14.538, 24.2542, -34.2195, 0.92 ) }
    dend_29 { pt3dadd( -15.6264, 25.3058, -35.3536, 0.92 ) }
    dend_29 { pt3dadd( -16.057, 25.7104, -35.8137, 0.92 ) }
    dend_29 { pt3dadd( -16.8703, 26.4594, -36.6846, 0.92 ) }
    dend_29 { pt3dadd( -18.2733, 27.7878, -38.2447, 0.92 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_29 { pt3dadd( -19.5298, 29.0163, -39.735, 0.92 ) }
    dend_29 { pt3dadd( -20.3952, 29.8709, -40.8199, 0.69 ) }
    dend_29 { pt3dadd( -21.0385, 30.4759, -41.6361, 0.69 ) }
    dend_29 { pt3dadd( -21.5309, 30.9489, -42.3116, 0.69 ) }
    dend_29 { pt3dadd( -22.2518, 31.7132, -43.356, 0.69 ) }
    dend_29 { pt3dadd( -22.9337, 32.6501, -44.4044, 0.69 ) }
    dend_29 { pt3dadd( -23.1871, 33.173, -44.8971, 0.69 ) }
    dend_29 { pt3dadd( -23.4891, 34.2201, -45.8091, 0.69 ) }
    dend_29 { pt3dadd( -23.7018, 35.2109, -46.5497, 0.69 ) }
    dend_29 { pt3dadd( -23.9082, 36.105, -47.1637, 0.69 ) }
    dend_29 { pt3dadd( -24.3057, 37.5005, -48.1046, 0.69 ) }
    dend_29 { pt3dadd( -24.7717, 38.9245, -49.1458, 0.69 ) }
    dend_29 { pt3dadd( -24.9866, 39.5141, -49.6278, 0.69 ) }
    dend_29 { pt3dadd( -25.4552, 40.6941, -50.6655, 0.92 ) }
    dend_29 { pt3dadd( -26.1182, 42.3615, -52.2453, 0.69 ) }
    dend_29 { pt3dadd( -26.5891, 43.5107, -53.5041, 0.69 ) }
    dend_29 { pt3dadd( -27.0608, 44.7135, -54.9563, 0.69 ) }
    dend_29 { pt3dadd( -27.3113, 45.5358, -55.939, 0.69 ) }
    dend_29 { pt3dadd( -27.3929, 45.9916, -56.4714, 0.69 ) }
    dend_29 { pt3dadd( -27.4498, 46.9805, -57.6522, 0.92 ) }
    dend_29 { pt3dadd( -27.3491, 48.148, -59.0669, 0.69 ) }
    dend_29 { pt3dadd( -27.1092, 49.163, -60.3701, 0.69 ) }
    dend_29 { pt3dadd( -26.4567, 50.457, -62.3154, 0.69 ) }
    dend_29 { pt3dadd( -25.7239, 51.2188, -63.8195, 0.69 ) }
    dend_29 { pt3dadd( -24.787, 51.7028, -65.1504, 0.69 ) }
    dend_29 { pt3dadd( -23.4243, 52.0649, -66.5534, 0.69 ) }
    dend_29 { pt3dadd( -21.7252, 52.2122, -67.7144, 0.69 ) }
    dend_29 { pt3dadd( -19.2123, 52.1628, -68.8404, 0.92 ) }
    dend_29 { pt3dadd( -17.6045, 52.0373, -69.4153, 0.92 ) }
    dend_29 { pt3dadd( -14.9034, 51.7607, -70.1285, 0.69 ) }
    dend_29 { pt3dadd( -13.3505, 51.591, -70.3994, 0.69 ) }
    dend_29 { pt3dadd( -11.4689, 51.417, -70.561, 0.69 ) }
    dend_29 { pt3dadd( -9.3092, 51.3387, -70.5465, 0.92 ) }
    // Section: dend_26, id: dend_26, parent: dend_20 (entry count 33/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 2.51734, 4.93651, 6.75322, 0.92 ) }
    dend_26 { pt3dadd( 3.19322, 4.49425, 7.70847, 0.92 ) }
    dend_26 { pt3dadd( 4.01318, 3.73126, 9.11403, 0.92 ) }
    dend_26 { pt3dadd( 4.56692, 3.05504, 10.3189, 0.92 ) }
    dend_26 { pt3dadd( 5.16103, 2.1797, 11.7571, 0.92 ) }
    dend_26 { pt3dadd( 5.52403, 1.48514, 12.8448, 0.92 ) }
    dend_26 { pt3dadd( 5.83581, 0.552571, 14.2781, 0.92 ) }
    dend_26 { pt3dadd( 5.82744, -0.46371, 15.6754, 0.92 ) }
    dend_26 { pt3dadd( 5.52731, -1.40384, 16.8022, 0.92 ) }
    dend_26 { pt3dadd( 5.08798, -2.29565, 17.725, 0.92 ) }
    dend_26 { pt3dadd( 4.60358, -3.21512, 18.5511, 0.92 ) }
    dend_26 { pt3dadd( 3.91834, -4.56094, 19.5942, 0.92 ) }
    dend_26 { pt3dadd( 3.59456, -5.26363, 20.0396, 0.92 ) }
    dend_26 { pt3dadd( 3.23204, -6.2056, 20.6367, 0.92 ) }
    dend_26 { pt3dadd( 2.84803, -7.73007, 21.5873, 0.92 ) }
    dend_26 { pt3dadd( 2.73289, -9.05977, 22.454, 0.92 ) }
    dend_26 { pt3dadd( 2.78267, -9.83044, 22.9142, 0.92 ) }
    dend_26 { pt3dadd( 2.90324, -10.8686, 23.4489, 0.69 ) }
    dend_26 { pt3dadd( 3.07355, -12.0375, 24.0009, 0.69 ) }
    dend_26 { pt3dadd( 3.18425, -12.7211, 24.2765, 0.69 ) }
    dend_26 { pt3dadd( 3.42167, -14.409, 24.8084, 0.92 ) }
    dend_26 { pt3dadd( 3.48866, -15.1118, 25.0039, 0.69 ) }
    dend_26 { pt3dadd( 3.53304, -16.7537, 25.5404, 0.69 ) }
    dend_26 { pt3dadd( 3.49719, -17.9473, 25.9468, 0.69 ) }
    dend_26 { pt3dadd( 3.41521, -18.9629, 26.2874, 0.69 ) }
    dend_26 { pt3dadd( 3.26039, -20.1382, 26.7454, 0.69 ) }
    dend_26 { pt3dadd( 3.11437, -21.0644, 27.1718, 0.69 ) }
    dend_26 { pt3dadd( 2.94412, -22.6628, 28.0479, 0.69 ) }
    dend_26 { pt3dadd( 2.95841, -23.5571, 28.6429, 0.69 ) }
    dend_26 { pt3dadd( 3.09008, -24.7446, 29.5878, 0.69 ) }
    dend_26 { pt3dadd( 3.3021, -25.6355, 30.3369, 0.69 ) }
    dend_26 { pt3dadd( 3.56365, -26.3736, 30.9249, 0.69 ) }
    dend_26 { pt3dadd( 4.03959, -27.3987, 31.6394, 0.69 ) }
    dend_26 { pt3dadd( 4.70305, -28.7684, 32.4947, 0.69 ) }
    dend_26 { pt3dadd( 5.13134, -29.7591, 33.0595, 0.69 ) }
    dend_26 { pt3dadd( 5.59901, -30.8187, 33.6363, 0.69 ) }
    dend_26 { pt3dadd( 6.09094, -31.9221, 34.1744, 0.69 ) }
    dend_26 { pt3dadd( 6.609, -33.2257, 34.7191, 0.69 ) }
    dend_26 { pt3dadd( 7.01406, -34.6413, 35.1807, 0.69 ) }
    dend_26 { pt3dadd( 7.27572, -36.2304, 35.5278, 0.69 ) }
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 73/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 2.51734, 4.93651, 6.75322, 1.15 ) }
    dend_21 { pt3dadd( 2.86977, 6.72204, 6.50501, 1.15 ) }
    dend_21 { pt3dadd( 3.03966, 8.71177, 6.18908, 1.15 ) }
    dend_21 { pt3dadd( 3.14104, 10.7514, 5.84702, 1.15 ) }
    dend_21 { pt3dadd( 3.15116, 12.0364, 5.53274, 0.92 ) }
    dend_21 { pt3dadd( 3.07556, 13.4477, 5.07196, 0.92 ) }
    dend_21 { pt3dadd( 2.89284, 14.9434, 4.47638, 0.92 ) }
    dend_21 { pt3dadd( 2.43393, 16.7396, 3.51665, 0.92 ) }
    dend_21 { pt3dadd( 1.99105, 17.9832, 2.76249, 0.92 ) }
    dend_21 { pt3dadd( 1.20615, 19.7687, 1.537, 0.92 ) }
    dend_21 { pt3dadd( 0.509195, 21.198, 0.472684, 0.92 ) }
    dend_21 { pt3dadd( -0.0279242, 22.2183, -0.444728, 0.92 ) }
    dend_21 { pt3dadd( -0.813321, 23.441, -1.82088, 1.15 ) }
    // Section: dend_19, id: dend_19, parent: dend_15 (entry count 86/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 20.0277, 22.4814, -18.1157, 0.92 ) }
    dend_19 { pt3dadd( 21.3307, 23.1545, -19.5805, 0.92 ) }
    dend_19 { pt3dadd( 22.9055, 23.948, -21.4216, 0.92 ) }
    dend_19 { pt3dadd( 23.6056, 24.341, -22.2872, 1.15 ) }
    dend_19 { pt3dadd( 24.5055, 24.9767, -23.4594, 0.92 ) }
    dend_19 { pt3dadd( 25.536, 25.9095, -24.8446, 0.92 ) }
    dend_19 { pt3dadd( 26.2997, 26.7706, -25.9035, 0.92 ) }
    dend_19 { pt3dadd( 26.5052, 27.1859, -26.3132, 0.92 ) }
    dend_19 { pt3dadd( 26.7565, 28.0506, -27.0983, 0.92 ) }
    dend_19 { pt3dadd( 26.942, 29.2215, -28.1993, 0.69 ) }
    dend_19 { pt3dadd( 27.0376, 30.2677, -29.2772, 0.69 ) }
    dend_19 { pt3dadd( 27.0769, 31.1283, -30.3104, 1.15 ) }
    dend_19 { pt3dadd( 27.2063, 32.2903, -31.9578, 0.92 ) }
    dend_19 { pt3dadd( 27.4542, 33.1574, -33.5421, 0.92 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_19 { pt3dadd( 27.8122, 33.7724, -35.0253, 1.15 ) }
    dend_19 { pt3dadd( 28.3871, 34.3609, -36.8424, 1.15 ) }
    dend_19 { pt3dadd( 29.1014, 34.8727, -38.673, 1.15 ) }
    dend_19 { pt3dadd( 29.9526, 35.3312, -40.3649, 1.15 ) }
    dend_19 { pt3dadd( 31.0144, 35.8064, -41.9611, 0.92 ) }
    dend_19 { pt3dadd( 32.2279, 36.3764, -43.3967, 0.92 ) }
    dend_19 { pt3dadd( 33.2538, 36.8521, -44.378, 0.92 ) }
    dend_19 { pt3dadd( 33.9627, 37.1839, -44.945, 0.92 ) }
    dend_19 { pt3dadd( 35.1006, 37.6923, -45.7377, 0.92 ) }
    dend_19 { pt3dadd( 35.7961, 38.0169, -46.1936, 0.92 ) }
    dend_19 { pt3dadd( 36.7734, 38.4688, -46.8039, 0.92 ) }
    dend_19 { pt3dadd( 37.7924, 38.8801, -47.4662, 0.92 ) }
    dend_19 { pt3dadd( 39.2516, 39.3181, -48.4015, 1.15 ) }
    dend_19 { pt3dadd( 40.5992, 39.5261, -49.1679, 0.92 ) }
    dend_19 { pt3dadd( 41.648, 39.5711, -49.6263, 0.92 ) }
    dend_19 { pt3dadd( 43.2116, 39.4771, -50.0762, 0.92 ) }
    dend_19 { pt3dadd( 44.9971, 39.2575, -50.4555, 0.92 ) }
    dend_19 { pt3dadd( 46.7915, 39.0202, -50.7793, 0.92 ) }
    dend_19 { pt3dadd( 49.3013, 38.7187, -51.2346, 0.92 ) }
    dend_19 { pt3dadd( 51.0488, 38.5132, -51.7074, 1.15 ) }
    dend_19 { pt3dadd( 52.8361, 38.3265, -52.4002, 0.92 ) }
    dend_19 { pt3dadd( 54.3872, 38.2835, -53.2932, 0.92 ) }
    dend_19 { pt3dadd( 55.9865, 38.519, -54.9266, 0.92 ) }
    dend_19 { pt3dadd( 56.6931, 38.7838, -56.0616, 0.92 ) }
    dend_19 { pt3dadd( 57.753, 39.3427, -58.3647, 0.92 ) }
    dend_19 { pt3dadd( 58.124, 39.555, -59.4413, 0.92 ) }
    dend_19 { pt3dadd( 58.5358, 39.8665, -61.1037, 0.92 ) }
    dend_19 { pt3dadd( 58.9703, 40.2854, -63.4366, 0.92 ) }
    dend_19 { pt3dadd( 59.2107, 40.4967, -65.0245, 0.92 ) }
    dend_19 { pt3dadd( 59.5415, 40.6301, -67.3817, 0.92 ) }
    dend_19 { pt3dadd( 59.8701, 40.5235, -69.4162, 0.92 ) }
    dend_19 { pt3dadd( 60.0983, 40.3597, -70.5591, 0.92 ) }
    dend_19 { pt3dadd( 60.4613, 39.9981, -72.17, 0.92 ) }
    dend_19 { pt3dadd( 60.9197, 39.4547, -74.2474, 0.92 ) }
    dend_19 { pt3dadd( 61.4117, 38.9064, -76.3946, 0.92 ) }
    dend_19 { pt3dadd( 61.9804, 38.305, -78.7804, 0.92 ) }
    dend_19 { pt3dadd( 62.5745, 37.7645, -80.9542, 0.92 ) }
    dend_19 { pt3dadd( 63.1911, 37.1987, -83.0374, 0.92 ) }
    dend_19 { pt3dadd( 64.0234, 36.4034, -85.8173, 0.92 ) }
    dend_19 { pt3dadd( 64.9759, 35.6288, -89.0028, 0.92 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 40/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 20.0277, 22.4814, -18.1157, 0.92 ) }
    dend_16 { pt3dadd( 19.7912, 23.0609, -19.1042, 0.92 ) }
    dend_16 { pt3dadd( 19.4811, 24.0287, -20.9436, 0.92 ) }
    dend_16 { pt3dadd( 19.3771, 24.6129, -22.1283, 0.92 ) }
    dend_16 { pt3dadd( 19.3194, 25.2204, -23.3402, 1.38 ) }
    dend_16 { pt3dadd( 19.2344, 26.1003, -25.0547, 1.38 ) }
    dend_16 { pt3dadd( 19.1243, 27.352, -27.2601, 1.38 ) }
    dend_16 { pt3dadd( 19.0344, 28.1126, -28.4727, 1.38 ) }
    dend_16 { pt3dadd( 18.9142, 29.0514, -29.7054, 1.15 ) }
    dend_16 { pt3dadd( 18.8362, 29.9667, -30.8522, 0.92 ) }
    dend_16 { pt3dadd( 18.7543, 31.129, -32.2115, 0.92 ) }
    dend_16 { pt3dadd( 18.6198, 32.3853, -33.3493, 0.92 ) }
    dend_16 { pt3dadd( 18.342, 33.8453, -34.2647, 0.92 ) }
    dend_16 { pt3dadd( 18.0113, 34.9689, -34.7763, 1.15 ) }
    // Section: dend_10, id: dend_10, parent: dend_0 (entry count 54/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -14.1728, -3.08485, -0.52669, 1.15 ) }
    dend_10 { pt3dadd( -15.7002, -1.98834, 0.13909, 1.15 ) }
    dend_10 { pt3dadd( -16.4505, -1.54196, 0.457182, 1.15 ) }
    dend_10 { pt3dadd( -17.8176, -0.839221, 1.00904, 1.15 ) }
    dend_10 { pt3dadd( -18.9695, -0.335634, 1.39892, 0.92 ) }
    dend_10 { pt3dadd( -20.2808, 0.237618, 1.84273, 0.92 ) }
    dend_10 { pt3dadd( -20.9596, 0.534369, 2.07248, 0.92 ) }
    dend_10 { pt3dadd( -22.0725, 0.944819, 2.48537, 1.15 ) }
    dend_10 { pt3dadd( -22.5676, 1.07743, 2.65553, 1.15 ) }
    dend_10 { pt3dadd( -24.2319, 1.251, 3.0504, 1.15 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 64/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -14.1728, -3.08485, -0.52669, 1.15 ) }
    dend_1 { pt3dadd( -15.4464, -0.870098, -1.88674, 1.15 ) }
    dend_1 { pt3dadd( -16.3316, 0.848436, -2.90682, 1.15 ) }
    dend_1 { pt3dadd( -17.0498, 2.24288, -3.73452, 0.92 ) }
    dend_1 { pt3dadd( -17.6225, 3.35487, -4.39457, 0.92 ) }
    dend_1 { pt3dadd( -18.1559, 4.39045, -5.00926, 0.92 ) }
    dend_1 { pt3dadd( -18.7072, 5.46086, -5.64463, 1.15 ) }
    dend_1 { pt3dadd( -18.9479, 5.97866, -5.87018, 1.15 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 72/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 13.9587, 34.967, 0.0, 0.46 ) }
    axon_1 { pt3dadd( 19.166, 49.0341, 0.0, 0.46 ) }
    axon_1 { pt3dadd( 24.3733, 63.1012, 0.0, 0.46 ) }
    // Section: dend_23, id: dend_23, parent: dend_21 (entry count 75/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( -0.813321, 23.441, -1.82088, 0.46 ) }
    dend_23 { pt3dadd( -0.625151, 24.5527, -2.12038, 0.46 ) }
    dend_23 { pt3dadd( -0.423973, 25.7414, -2.44057, 0.69 ) }
    dend_23 { pt3dadd( -0.17666, 27.2027, -2.8342, 0.69 ) }
    dend_23 { pt3dadd( -0.022625, 28.1129, -3.07936, 0.92 ) }
    dend_23 { pt3dadd( 0.21337, 29.5073, -3.45497, 1.15 ) }
    // Section: dend_22, id: dend_22, parent: dend_21 (entry count 81/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( -0.813321, 23.441, -1.82088, 0.92 ) }
    dend_22 { pt3dadd( -1.62989, 24.7915, -3.10228, 0.92 ) }
    dend_22 { pt3dadd( -2.54058, 26.4881, -4.39047, 0.92 ) }
    dend_22 { pt3dadd( -3.06335, 27.4883, -5.02265, 0.92 ) }
    dend_22 { pt3dadd( -3.5734, 28.4642, -5.63943, 0.92 ) }
    dend_22 { pt3dadd( -4.38999, 30.0266, -6.62691, 0.92 ) }
    dend_22 { pt3dadd( -4.83199, 30.8723, -7.1614, 1.15 ) }
    dend_22 { pt3dadd( -5.59345, 32.4136, -8.15065, 0.23 ) }
    dend_22 { pt3dadd( -6.04703, 33.4116, -8.61177, 0.23 ) }
    // Section: dend_18, id: dend_18, parent: dend_16 (entry count 90/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 18.0113, 34.9689, -34.7763, 0.92 ) }
    dend_18 { pt3dadd( 17.1347, 35.731, -37.1382, 0.92 ) }
    dend_18 { pt3dadd( 16.3042, 36.4679, -39.2044, 0.92 ) }
    dend_18 { pt3dadd( 15.665, 37.052, -40.6552, 0.92 ) }
    dend_18 { pt3dadd( 15.0545, 37.6961, -42.1841, 0.92 ) }
    dend_18 { pt3dadd( 14.616, 38.2609, -43.4719, 0.92 ) }
    dend_18 { pt3dadd( 14.3671, 38.6417, -44.3283, 0.92 ) }
    dend_18 { pt3dadd( 14.2014, 39.119, -45.2033, 0.92 ) }
    dend_18 { pt3dadd( 14.2174, 39.9016, -46.539, 0.92 ) }
    dend_18 { pt3dadd( 14.5197, 40.8928, -48.1873, 0.92 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_18 { pt3dadd( 14.8523, 41.6825, -49.473, 0.92 ) }
    dend_18 { pt3dadd( 15.0239, 42.0608, -50.0946, 0.92 ) }
    dend_18 { pt3dadd( 15.5389, 43.0951, -51.9674, 0.92 ) }
    dend_18 { pt3dadd( 16.0509, 43.8615, -53.579, 0.92 ) }
    dend_18 { pt3dadd( 16.7527, 44.5588, -55.2941, 0.92 ) }
    dend_18 { pt3dadd( 17.423, 45.0019, -56.6871, 1.15 ) }
    dend_18 { pt3dadd( 18.4019, 45.4876, -58.4561, 0.92 ) }
    dend_18 { pt3dadd( 19.5465, 45.9626, -60.3263, 0.92 ) }
    dend_18 { pt3dadd( 20.9495, 46.4018, -62.314, 0.92 ) }
    dend_18 { pt3dadd( 22.4761, 46.856, -64.0792, 0.92 ) }
    dend_18 { pt3dadd( 23.9767, 47.2854, -65.5081, 0.92 ) }
    dend_18 { pt3dadd( 25.0875, 47.6217, -66.4038, 0.92 ) }
    dend_18 { pt3dadd( 26.4269, 48.0718, -67.3363, 0.92 ) }
    dend_18 { pt3dadd( 27.422, 48.444, -67.9616, 0.92 ) }
    dend_18 { pt3dadd( 28.7007, 48.9421, -68.7799, 0.92 ) }
    dend_18 { pt3dadd( 30.0887, 49.4197, -69.6481, 0.92 ) }
    dend_18 { pt3dadd( 31.5036, 49.7897, -70.3913, 0.92 ) }
    dend_18 { pt3dadd( 32.4631, 49.9207, -70.806, 0.92 ) }
    dend_18 { pt3dadd( 33.7774, 49.9813, -71.2347, 0.92 ) }
    dend_18 { pt3dadd( 35.3769, 49.9108, -71.5868, 0.92 ) }
    dend_18 { pt3dadd( 36.6049, 49.7724, -71.8028, 0.92 ) }
    dend_18 { pt3dadd( 38.2909, 49.59, -72.0295, 0.69 ) }
    dend_18 { pt3dadd( 39.7086, 49.4501, -72.1774, 0.69 ) }
    dend_18 { pt3dadd( 41.1974, 49.3376, -72.3019, 0.69 ) }
    dend_18 { pt3dadd( 43.4027, 49.2348, -72.4464, 0.92 ) }
    dend_18 { pt3dadd( 45.6353, 49.1516, -72.5302, 0.92 ) }
    dend_18 { pt3dadd( 47.7032, 48.9963, -72.6311, 0.69 ) }
    // Section: dend_17, id: dend_17, parent: dend_16 (entry count 27/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 18.0113, 34.9689, -34.7763, 0.92 ) }
    dend_17 { pt3dadd( 17.2121, 36.7833, -36.073, 0.92 ) }
    dend_17 { pt3dadd( 16.721, 37.7584, -36.6952, 0.92 ) }
    dend_17 { pt3dadd( 16.0865, 39.0504, -37.4482, 0.92 ) }
    dend_17 { pt3dadd( 15.6265, 40.2001, -37.9904, 0.92 ) }
    dend_17 { pt3dadd( 15.3974, 40.9524, -38.304, 0.92 ) }
    dend_17 { pt3dadd( 15.1604, 42.0009, -38.7232, 0.92 ) }
    dend_17 { pt3dadd( 15.0817, 43.1951, -39.1777, 0.92 ) }
    dend_17 { pt3dadd( 15.1528, 43.7637, -39.431, 0.92 ) }
    dend_17 { pt3dadd( 15.6501, 45.3992, -40.1815, 0.92 ) }
    dend_17 { pt3dadd( 16.2523, 46.8536, -40.9555, 0.92 ) }
    dend_17 { pt3dadd( 16.8603, 48.0952, -41.7917, 0.92 ) }
    dend_17 { pt3dadd( 17.7311, 49.6241, -42.9724, 0.69 ) }
    dend_17 { pt3dadd( 18.2701, 50.5646, -43.7202, 0.69 ) }
    dend_17 { pt3dadd( 18.623, 51.2019, -44.1986, 0.92 ) }
    dend_17 { pt3dadd( 19.3301, 52.5517, -45.132, 0.92 ) }
    dend_17 { pt3dadd( 19.9335, 53.7569, -45.8119, 0.92 ) }
    dend_17 { pt3dadd( 20.5185, 54.9668, -46.3767, 0.92 ) }
    dend_17 { pt3dadd( 21.4053, 56.8615, -47.0992, 0.92 ) }
    dend_17 { pt3dadd( 21.9822, 58.1386, -47.5899, 0.92 ) }
    dend_17 { pt3dadd( 22.3773, 59.0731, -47.999, 0.92 ) }
    dend_17 { pt3dadd( 22.9005, 60.3743, -48.6186, 0.92 ) }
    dend_17 { pt3dadd( 23.4479, 61.995, -49.631, 1.15 ) }
    dend_17 { pt3dadd( 23.6046, 63.0691, -50.7373, 1.15 ) }
    dend_17 { pt3dadd( 23.6056, 64.4435, -52.7571, 0.92 ) }
    dend_17 { pt3dadd( 23.4087, 65.3394, -54.4923, 0.92 ) }
    dend_17 { pt3dadd( 23.1213, 65.7482, -55.6724, 0.69 ) }
    dend_17 { pt3dadd( 22.39, 65.9776, -57.2005, 0.69 ) }
    dend_17 { pt3dadd( 21.5574, 65.9516, -58.3921, 0.69 ) }
    // Section: dend_14, id: dend_14, parent: dend_10 (entry count 56/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( -24.2319, 1.251, 3.0504, 1.15 ) }
    dend_14 { pt3dadd( -25.07, 1.00958, 3.88088, 1.15 ) }
    dend_14 { pt3dadd( -26.2908, 0.481527, 5.081, 1.15 ) }
    dend_14 { pt3dadd( -27.4554, -0.188283, 6.13635, 0.92 ) }
    dend_14 { pt3dadd( -28.232, -0.734233, 6.80242, 0.92 ) }
    dend_14 { pt3dadd( -28.9342, -1.34382, 7.3919, 0.92 ) }
    dend_14 { pt3dadd( -29.2773, -1.69231, 7.68275, 0.92 ) }
    dend_14 { pt3dadd( -29.7798, -2.39917, 8.1344, 0.92 ) }
    dend_14 { pt3dadd( -30.3003, -3.37851, 8.54106, 0.92 ) }
    dend_14 { pt3dadd( -30.6578, -4.23114, 8.85832, 0.92 ) }
    dend_14 { pt3dadd( -31.0394, -5.211, 9.21539, 0.92 ) }
    dend_14 { pt3dadd( -31.3172, -5.86441, 9.45558, 0.92 ) }
    dend_14 { pt3dadd( -31.9371, -7.10989, 9.86633, 0.92 ) }
    dend_14 { pt3dadd( -32.6697, -8.4324, 10.2378, 0.69 ) }
    dend_14 { pt3dadd( -33.7205, -10.1931, 10.6231, 0.69 ) }
    dend_14 { pt3dadd( -34.2017, -10.8942, 10.7297, 0.69 ) }
    dend_14 { pt3dadd( -34.9099, -11.749, 10.8131, 0.69 ) }
    dend_14 { pt3dadd( -36.2828, -13.1394, 10.8584, 0.69 ) }
    dend_14 { pt3dadd( -37.0073, -13.7917, 10.841, 0.92 ) }
    dend_14 { pt3dadd( -37.8684, -14.5467, 10.8118, 0.92 ) }
    dend_14 { pt3dadd( -39.2296, -15.7592, 10.7754, 0.92 ) }
    dend_14 { pt3dadd( -40.1294, -16.6348, 10.8118, 0.69 ) }
    dend_14 { pt3dadd( -41.2529, -17.9141, 10.9805, 0.69 ) }
    dend_14 { pt3dadd( -42.2636, -19.2719, 11.2984, 0.69 ) }
    dend_14 { pt3dadd( -42.9442, -20.2886, 11.5932, 0.69 ) }
    dend_14 { pt3dadd( -43.4515, -21.2191, 11.9141, 0.69 ) }
    dend_14 { pt3dadd( -44.0622, -22.714, 12.4911, 0.69 ) }
    dend_14 { pt3dadd( -44.5095, -24.283, 13.1206, 0.69 ) }
    dend_14 { pt3dadd( -44.7785, -25.4979, 13.6109, 0.69 ) }
    dend_14 { pt3dadd( -44.986, -26.4305, 14.0124, 0.69 ) }
    dend_14 { pt3dadd( -45.2389, -27.3943, 14.4177, 0.69 ) }
    dend_14 { pt3dadd( -45.5889, -28.5695, 14.8791, 0.69 ) }
    dend_14 { pt3dadd( -45.9065, -29.5422, 15.308, 0.69 ) }
    dend_14 { pt3dadd( -46.4226, -30.7705, 15.9168, 0.46 ) }
    dend_14 { pt3dadd( -46.9472, -31.8416, 16.552, 0.46 ) }
    dend_14 { pt3dadd( -47.424, -32.6795, 17.1809, 0.46 ) }
    dend_14 { pt3dadd( -47.9971, -33.438, 17.9532, 0.69 ) }
    dend_14 { pt3dadd( -48.9942, -34.1906, 19.5883, 0.69 ) }
    dend_14 { pt3dadd( -49.5774, -34.2018, 20.7719, 0.69 ) }
    dend_14 { pt3dadd( -50.1508, -33.9289, 22.1461, 0.69 ) }
    dend_14 { pt3dadd( -50.7167, -33.5097, 23.4457, 0.69 ) }
    dend_14 { pt3dadd( -51.1914, -33.0084, 24.5203, 0.46 ) }
    dend_14 { pt3dadd( -51.8983, -32.1721, 25.9018, 0.46 ) }
    dend_14 { pt3dadd( -52.576, -31.493, 26.8644, 0.46 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_14 { pt3dadd( -53.6381, -30.7012, 27.953, 0.92 ) }
    dend_14 { pt3dadd( -55.0384, -29.9258, 29.0552, 0.69 ) }
    dend_14 { pt3dadd( -56.5765, -29.2684, 30.1125, 0.69 ) }
    dend_14 { pt3dadd( -57.6921, -28.9034, 30.8299, 0.69 ) }
    dend_14 { pt3dadd( -59.4916, -28.4552, 31.9367, 0.69 ) }
    dend_14 { pt3dadd( -61.5549, -28.0809, 33.2534, 0.69 ) }
    dend_14 { pt3dadd( -62.9233, -27.9631, 34.166, 0.69 ) }
    dend_14 { pt3dadd( -64.0063, -28.1177, 34.9638, 0.69 ) }
    dend_14 { pt3dadd( -65.1806, -28.6845, 35.9557, 0.69 ) }
    dend_14 { pt3dadd( -66.0764, -29.5506, 36.9032, 0.69 ) }
    dend_14 { pt3dadd( -66.6081, -30.6853, 37.6976, 0.69 ) }
    dend_14 { pt3dadd( -66.7899, -31.4804, 38.0504, 0.46 ) }
    dend_14 { pt3dadd( -66.9908, -32.9981, 38.5034, 0.46 ) }
    dend_14 { pt3dadd( -67.0913, -34.4259, 38.7597, 0.46 ) }
    dend_14 { pt3dadd( -67.1201, -35.3081, 38.8553, 0.46 ) }
    dend_14 { pt3dadd( -67.1235, -36.9255, 38.953, 0.46 ) }
    dend_14 { pt3dadd( -67.0729, -37.8101, 39.0223, 0.46 ) }
    dend_14 { pt3dadd( -66.9805, -38.4893, 39.0999, 0.46 ) }
    dend_14 { pt3dadd( -66.6486, -40.277, 39.4012, 0.46 ) }
    dend_14 { pt3dadd( -66.501, -41.0028, 39.5458, 0.46 ) }
    dend_14 { pt3dadd( -66.2392, -42.2347, 39.8052, 0.69 ) }
    dend_14 { pt3dadd( -65.826, -43.9864, 40.1635, 0.46 ) }
    dend_14 { pt3dadd( -65.4444, -45.3762, 40.4767, 0.46 ) }
    dend_14 { pt3dadd( -65.0821, -46.702, 40.8409, 0.46 ) }
    dend_14 { pt3dadd( -64.6745, -48.2477, 41.4216, 0.23 ) }
    dend_14 { pt3dadd( -64.4661, -49.113, 41.8485, 0.23 ) }
    dend_14 { pt3dadd( -64.223, -50.0867, 42.4882, 0.46 ) }
    dend_14 { pt3dadd( -63.8684, -51.3209, 43.5454, 0.46 ) }
    dend_14 { pt3dadd( -63.4569, -52.5555, 44.857, 0.46 ) }
    dend_14 { pt3dadd( -63.0712, -53.7295, 46.3095, 0.46 ) }
    dend_14 { pt3dadd( -62.7478, -54.798, 47.8848, 0.46 ) }
    dend_14 { pt3dadd( -62.55, -55.5247, 49.1105, 0.46 ) }
    dend_14 { pt3dadd( -62.3139, -56.3769, 50.6857, 0.46 ) }
    dend_14 { pt3dadd( -62.0849, -57.0499, 51.9896, 0.46 ) }
    dend_14 { pt3dadd( -61.8001, -57.5779, 53.0708, 0.46 ) }
    dend_14 { pt3dadd( -61.451, -58.0424, 54.0241, 0.46 ) }
    dend_14 { pt3dadd( -60.9559, -58.5149, 54.8768, 0.46 ) }
    dend_14 { pt3dadd( -60.2931, -59.0899, 55.8048, 0.46 ) }
    dend_14 { pt3dadd( -59.602, -59.5465, 56.4367, 0.23 ) }
    dend_14 { pt3dadd( -58.6396, -60.0662, 57.0541, 0.23 ) }
    dend_14 { pt3dadd( -57.8779, -60.4622, 57.4481, 0.23 ) }
    dend_14 { pt3dadd( -56.5654, -61.22, 58.0311, 0.46 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 42/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( -24.2319, 1.251, 3.0504, 0.92 ) }
    dend_11 { pt3dadd( -25.7483, 3.23043, 2.90611, 0.92 ) }
    dend_11 { pt3dadd( -26.6146, 4.4731, 2.93928, 0.92 ) }
    dend_11 { pt3dadd( -27.1679, 5.25818, 2.93417, 0.92 ) }
    dend_11 { pt3dadd( -28.4576, 7.03461, 2.79287, 0.92 ) }
    dend_11 { pt3dadd( -29.7364, 8.80279, 2.54908, 1.15 ) }
    dend_11 { pt3dadd( -30.8801, 10.4411, 2.21509, 1.15 ) }
    dend_11 { pt3dadd( -31.8739, 11.9267, 1.86854, 0.92 ) }
    dend_11 { pt3dadd( -32.8442, 13.4278, 1.43733, 0.92 ) }
    dend_11 { pt3dadd( -33.6812, 14.7229, 0.987409, 0.92 ) }
    dend_11 { pt3dadd( -34.5579, 16.0656, 0.383281, 0.92 ) }
    dend_11 { pt3dadd( -35.6456, 17.6528, -0.589544, 1.38 ) }
    dend_11 { pt3dadd( -36.6274, 19.0702, -1.64463, 0.92 ) }
    dend_11 { pt3dadd( -37.1543, 19.8496, -2.25868, 0.92 ) }
    // Section: dend_5, id: dend_5, parent: dend_1 (entry count 56/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -18.9479, 5.97866, -5.87018, 0.92 ) }
    dend_5 { pt3dadd( -20.4752, 5.34058, -7.35484, 0.92 ) }
    dend_5 { pt3dadd( -21.6622, 4.67481, -8.48937, 0.92 ) }
    dend_5 { pt3dadd( -22.6265, 4.05717, -9.4517, 0.92 ) }
    dend_5 { pt3dadd( -23.5187, 3.45635, -10.3283, 0.92 ) }
    dend_5 { pt3dadd( -24.3081, 2.92314, -11.0622, 0.92 ) }
    dend_5 { pt3dadd( -25.2605, 2.32226, -11.8801, 0.92 ) }
    dend_5 { pt3dadd( -26.1452, 1.75515, -12.5339, 0.92 ) }
    dend_5 { pt3dadd( -27.0316, 1.28097, -13.0643, 0.69 ) }
    dend_5 { pt3dadd( -27.6847, 1.05274, -13.3361, 0.69 ) }
    dend_5 { pt3dadd( -28.7254, 0.801378, -13.6429, 0.69 ) }
    dend_5 { pt3dadd( -30.005, 0.544979, -13.9132, 0.69 ) }
    dend_5 { pt3dadd( -31.1655, 0.371175, -14.1168, 0.69 ) }
    dend_5 { pt3dadd( -32.4324, 0.224691, -14.3104, 0.69 ) }
    dend_5 { pt3dadd( -34.1967, 0.0174401, -14.5143, 0.92 ) }
    dend_5 { pt3dadd( -36.4332, -0.260728, -14.7682, 0.92 ) }
    dend_5 { pt3dadd( -38.1038, -0.509831, -14.9398, 0.92 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 73/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -18.9479, 5.97866, -5.87018, 0.92 ) }
    dend_2 { pt3dadd( -19.0811, 7.03895, -6.51192, 0.92 ) }
    dend_2 { pt3dadd( -19.0358, 8.61506, -7.71205, 0.92 ) }
    dend_2 { pt3dadd( -18.8245, 9.92045, -8.77258, 0.92 ) }
    dend_2 { pt3dadd( -18.6635, 10.7785, -9.44275, 0.92 ) }
    dend_2 { pt3dadd( -18.515, 11.8822, -10.2741, 0.92 ) }
    dend_2 { pt3dadd( -18.4187, 13.0202, -11.1211, 0.92 ) }
    dend_2 { pt3dadd( -18.37, 14.2843, -12.0873, 1.15 ) }
    dend_2 { pt3dadd( -18.3564, 15.8154, -13.3074, 1.15 ) }
    dend_2 { pt3dadd( -18.3614, 17.1195, -14.3686, 0.92 ) }
    dend_2 { pt3dadd( -18.451, 18.6265, -15.5613, 0.92 ) }
    dend_2 { pt3dadd( -18.6136, 19.7328, -16.3913, 0.92 ) }
    dend_2 { pt3dadd( -18.7568, 20.3342, -16.8041, 0.92 ) }
    dend_2 { pt3dadd( -19.0484, 21.1885, -17.3784, 0.92 ) }
    dend_2 { pt3dadd( -19.4694, 22.1507, -18.135, 1.15 ) }
    dend_2 { pt3dadd( -19.7479, 22.8034, -18.7532, 1.15 ) }
    // Section: dend_25, id: dend_25, parent: dend_23 (entry count 89/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 0.21337, 29.5073, -3.45497, 1.15 ) }
    dend_25 { pt3dadd( 1.95329, 30.232, -4.35251, 1.15 ) }
    dend_25 { pt3dadd( 3.58667, 30.7631, -5.07549, 1.15 ) }
    dend_25 { pt3dadd( 5.27081, 31.2829, -5.64541, 0.92 ) }
    dend_25 { pt3dadd( 7.23357, 31.8473, -6.1038, 0.92 ) }
    dend_25 { pt3dadd( 9.21575, 32.3866, -6.49975, 1.15 ) }
    dend_25 { pt3dadd( 10.7683, 32.7479, -6.77732, 0.92 ) }
    dend_25 { pt3dadd( 12.9805, 33.1852, -7.09384, 0.92 ) }
    dend_25 { pt3dadd( 14.9666, 33.5867, -7.33045, 0.92 ) }
    dend_25 { pt3dadd( 16.9058, 34.0196, -7.54365, 0.92 ) }
    dend_25 { pt3dadd( 18.8875, 34.5032, -7.75369, 0.92 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_25 { pt3dadd( 21.9594, 35.2446, -8.07955, 0.92 ) }
    dend_25 { pt3dadd( 24.9199, 36.0116, -8.47053, 0.92 ) }
    dend_25 { pt3dadd( 27.011, 36.6096, -8.8261, 0.92 ) }
    dend_25 { pt3dadd( 27.9341, 36.8707, -9.04577, 0.92 ) }
    dend_25 { pt3dadd( 29.2551, 37.2901, -9.4047, 0.69 ) }
    // Section: dend_24, id: dend_24, parent: dend_23 (entry count 5/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 0.21337, 29.5073, -3.45497, 0.92 ) }
    dend_24 { pt3dadd( 0.028254, 30.996, -4.2464, 0.92 ) }
    dend_24 { pt3dadd( -0.0998117, 32.026, -4.79392, 0.92 ) }
    dend_24 { pt3dadd( -0.219049, 32.9848, -5.30369, 0.92 ) }
    dend_24 { pt3dadd( -0.375442, 34.2426, -5.97232, 0.92 ) }
    dend_24 { pt3dadd( -0.503401, 35.2716, -6.51938, 0.92 ) }
    // Section: dend_13, id: dend_13, parent: dend_11 (entry count 11/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -37.1543, 19.8496, -2.25868, 0.69 ) }
    dend_13 { pt3dadd( -38.0668, 20.8571, -2.95712, 0.69 ) }
    dend_13 { pt3dadd( -39.3724, 22.1763, -3.85691, 0.69 ) }
    dend_13 { pt3dadd( -40.4818, 23.1031, -4.3284, 0.69 ) }
    dend_13 { pt3dadd( -41.2321, 23.675, -4.54627, 0.69 ) }
    dend_13 { pt3dadd( -41.8023, 24.1486, -4.6713, 0.69 ) }
    dend_13 { pt3dadd( -42.3659, 24.6644, -4.78452, 0.69 ) }
    dend_13 { pt3dadd( -42.7518, 25.0469, -4.86582, 0.69 ) }
    dend_13 { pt3dadd( -44.3726, 26.8083, -5.29574, 0.92 ) }
    dend_13 { pt3dadd( -45.2337, 27.9103, -5.65201, 0.92 ) }
    dend_13 { pt3dadd( -46.2841, 29.4865, -6.25957, 0.92 ) }
    dend_13 { pt3dadd( -47.661, 31.9288, -7.29972, 0.92 ) }
    dend_13 { pt3dadd( -48.2778, 33.3442, -7.96847, 0.92 ) }
    dend_13 { pt3dadd( -48.7775, 34.8402, -8.79326, 0.92 ) }
    dend_13 { pt3dadd( -49.2463, 36.7678, -10.0388, 0.92 ) }
    dend_13 { pt3dadd( -49.4929, 38.2283, -11.072, 0.92 ) }
    dend_13 { pt3dadd( -49.5702, 39.0781, -11.7106, 0.92 ) }
    dend_13 { pt3dadd( -49.5498, 40.5137, -12.8383, 0.92 ) }
    dend_13 { pt3dadd( -49.4418, 41.6578, -13.8182, 0.92 ) }
    dend_13 { pt3dadd( -49.297, 42.8192, -14.8373, 0.92 ) }
    dend_13 { pt3dadd( -49.1004, 43.7653, -15.7643, 0.92 ) }
    dend_13 { pt3dadd( -48.7434, 45.1461, -17.2606, 0.92 ) }
    dend_13 { pt3dadd( -48.4254, 46.3452, -18.6096, 0.69 ) }
    dend_13 { pt3dadd( -47.9908, 48.0304, -20.5063, 0.69 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 35/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -37.1543, 19.8496, -2.25868, 0.92 ) }
    dend_12 { pt3dadd( -37.874, 18.8562, -4.12736, 0.92 ) }
    dend_12 { pt3dadd( -38.4892, 18.1481, -5.51736, 0.92 ) }
    dend_12 { pt3dadd( -39.1602, 17.559, -6.88141, 0.92 ) }
    dend_12 { pt3dadd( -39.5303, 17.32, -7.51019, 0.92 ) }
    dend_12 { pt3dadd( -40.3718, 16.8713, -8.7485, 0.92 ) }
    dend_12 { pt3dadd( -41.5125, 16.3471, -10.1727, 0.92 ) }
    dend_12 { pt3dadd( -42.6305, 16.1073, -11.1973, 0.69 ) }
    dend_12 { pt3dadd( -43.6701, 16.0189, -11.8761, 0.69 ) }
    dend_12 { pt3dadd( -44.6378, 15.9725, -12.3551, 0.69 ) }
    dend_12 { pt3dadd( -45.6291, 15.9163, -12.7686, 0.69 ) }
    dend_12 { pt3dadd( -46.6672, 15.7887, -13.1114, 0.92 ) }
    dend_12 { pt3dadd( -48.0658, 15.4639, -13.5425, 0.92 ) }
    dend_12 { pt3dadd( -49.652, 14.8611, -13.9044, 1.15 ) }
    dend_12 { pt3dadd( -50.5863, 14.327, -14.0839, 0.92 ) }
    dend_12 { pt3dadd( -51.362, 13.7526, -14.224, 0.92 ) }
    dend_12 { pt3dadd( -52.6717, 12.6088, -14.4193, 0.92 ) }
    dend_12 { pt3dadd( -53.7872, 11.489, -14.5592, 0.92 ) }
    dend_12 { pt3dadd( -54.7288, 10.409, -14.7161, 0.92 ) }
    dend_12 { pt3dadd( -55.331, 9.67341, -14.9333, 0.92 ) }
    dend_12 { pt3dadd( -55.8551, 9.03658, -15.2823, 0.92 ) }
    dend_12 { pt3dadd( -56.1516, 8.70253, -15.5859, 0.92 ) }
    dend_12 { pt3dadd( -57.0846, 7.76036, -16.6463, 0.92 ) }
    dend_12 { pt3dadd( -58.1992, 6.80814, -18.0186, 0.69 ) }
    dend_12 { pt3dadd( -59.2431, 5.989, -19.3751, 0.69 ) }
    dend_12 { pt3dadd( -60.4144, 5.07349, -21.0576, 0.69 ) }
    dend_12 { pt3dadd( -61.1787, 4.40774, -22.3408, 0.69 ) }
    dend_12 { pt3dadd( -62.0868, 3.53287, -24.14, 0.69 ) }
    dend_12 { pt3dadd( -62.897, 2.64039, -26.2893, 0.69 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 64/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -38.1038, -0.509831, -14.9398, 0.92 ) }
    dend_7 { pt3dadd( -39.5187, -0.561958, -15.7653, 0.92 ) }
    dend_7 { pt3dadd( -40.7409, -0.540908, -16.4288, 0.69 ) }
    dend_7 { pt3dadd( -42.252, -0.498152, -17.2353, 0.69 ) }
    dend_7 { pt3dadd( -43.0266, -0.452032, -17.6004, 0.69 ) }
    dend_7 { pt3dadd( -44.3795, -0.263248, -18.1262, 0.92 ) }
    dend_7 { pt3dadd( -45.7534, -0.0110729, -18.647, 0.92 ) }
    dend_7 { pt3dadd( -46.4361, 0.116376, -18.8961, 0.69 ) }
    dend_7 { pt3dadd( -47.2895, 0.298307, -19.1837, 0.69 ) }
    dend_7 { pt3dadd( -48.8746, 0.676748, -19.6859, 0.92 ) }
    dend_7 { pt3dadd( -50.9925, 1.21422, -20.3744, 0.69 ) }
    dend_7 { pt3dadd( -52.3244, 1.52858, -20.7835, 0.92 ) }
    dend_7 { pt3dadd( -53.1532, 1.70103, -21.0457, 0.92 ) }
    dend_7 { pt3dadd( -55.1419, 2.00806, -21.6375, 0.92 ) }
    dend_7 { pt3dadd( -56.4957, 2.20245, -22.0406, 0.92 ) }
    dend_7 { pt3dadd( -57.2116, 2.27485, -22.2692, 0.92 ) }
    dend_7 { pt3dadd( -58.7461, 2.33343, -22.7558, 1.15 ) }
    dend_7 { pt3dadd( -59.2791, 2.3517, -22.893, 1.15 ) }
    dend_7 { pt3dadd( -60.9903, 2.44573, -23.2921, 1.15 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 83/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -38.1038, -0.509831, -14.9398, 0.69 ) }
    dend_6 { pt3dadd( -38.3915, -1.7763, -12.932, 0.69 ) }
    dend_6 { pt3dadd( -38.5025, -2.85738, -11.3418, 0.69 ) }
    dend_6 { pt3dadd( -38.5213, -3.84686, -9.99564, 0.92 ) }
    dend_6 { pt3dadd( -38.4951, -4.6894, -9.00009, 0.92 ) }
    dend_6 { pt3dadd( -38.4882, -5.50423, -8.17322, 0.92 ) }
    dend_6 { pt3dadd( -38.5323, -6.04748, -7.67499, 0.69 ) }
    dend_6 { pt3dadd( -38.702, -7.05921, -6.96238, 0.69 ) }
    dend_6 { pt3dadd( -38.8296, -7.50656, -6.67606, 0.69 ) }
    dend_6 { pt3dadd( -39.2983, -8.59196, -6.04147, 0.92 ) }
    dend_6 { pt3dadd( -39.8877, -9.71703, -5.35625, 0.46 ) }
    dend_6 { pt3dadd( -40.6841, -11.0615, -4.45017, 0.46 ) }
    dend_6 { pt3dadd( -41.3381, -12.1536, -3.68548, 0.46 ) }
    dend_6 { pt3dadd( -41.8761, -13.03, -3.06122, 0.46 ) }
    dend_6 { pt3dadd( -42.3958, -13.8985, -2.47116, 0.46 ) }
    dend_6 { pt3dadd( -43.0038, -14.9292, -1.81496, 1.15 ) }
    dend_6 { pt3dadd( -43.4788, -15.8152, -1.28895, 0.92 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_6 { pt3dadd( -44.2432, -17.4694, -0.450625, 0.69 ) }
    dend_6 { pt3dadd( -44.8504, -18.9179, 0.124232, 0.69 ) }
    dend_6 { pt3dadd( -45.4296, -20.2882, 0.57559, 0.92 ) }
    dend_6 { pt3dadd( -45.8917, -21.3983, 0.899416, 0.92 ) }
    dend_6 { pt3dadd( -46.538, -22.9193, 1.25487, 0.92 ) }
    dend_6 { pt3dadd( -47.0213, -24.0665, 1.45947, 0.92 ) }
    dend_6 { pt3dadd( -47.6952, -25.7556, 1.70691, 0.69 ) }
    dend_6 { pt3dadd( -48.1098, -26.9122, 1.8594, 0.69 ) }
    dend_6 { pt3dadd( -48.6117, -28.4405, 2.08718, 0.69 ) }
    dend_6 { pt3dadd( -49.0263, -29.7945, 2.25085, 0.69 ) }
    dend_6 { pt3dadd( -49.6831, -31.7132, 2.35682, 0.46 ) }
    // Section: dend_4, id: dend_4, parent: dend_2 (entry count 11/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -19.7479, 22.8034, -18.7532, 0.69 ) }
    dend_4 { pt3dadd( -20.0723, 22.9249, -19.9606, 0.69 ) }
    dend_4 { pt3dadd( -20.4388, 23.1192, -21.2367, 0.69 ) }
    dend_4 { pt3dadd( -21.2207, 23.6994, -23.923, 0.69 ) }
    dend_4 { pt3dadd( -21.735, 24.1546, -25.5745, 0.92 ) }
    dend_4 { pt3dadd( -22.1665, 24.6411, -27.0769, 0.92 ) }
    dend_4 { pt3dadd( -22.4284, 25.0611, -28.1033, 0.69 ) }
    dend_4 { pt3dadd( -22.785, 25.6362, -29.2641, 0.69 ) }
    dend_4 { pt3dadd( -23.2272, 26.3545, -30.4772, 0.69 ) }
    dend_4 { pt3dadd( -23.6254, 27.0155, -31.3796, 0.92 ) }
    dend_4 { pt3dadd( -24.2503, 27.9473, -32.6224, 0.92 ) }
    dend_4 { pt3dadd( -25.1603, 29.0829, -34.291, 0.69 ) }
    dend_4 { pt3dadd( -25.8747, 29.7704, -35.5438, 0.69 ) }
    dend_4 { pt3dadd( -26.8539, 30.5749, -37.2633, 0.92 ) }
    dend_4 { pt3dadd( -27.5249, 31.0238, -38.4032, 0.92 ) }
    dend_4 { pt3dadd( -28.6601, 31.5756, -40.1989, 0.92 ) }
    dend_4 { pt3dadd( -29.5344, 31.8335, -41.5172, 0.92 ) }
    dend_4 { pt3dadd( -30.5724, 31.9454, -43.0807, 0.92 ) }
    dend_4 { pt3dadd( -31.7175, 31.9545, -44.8755, 0.69 ) }
    dend_4 { pt3dadd( -32.8114, 31.9086, -46.601, 0.69 ) }
    dend_4 { pt3dadd( -33.9351, 31.8871, -48.3678, 0.69 ) }
    dend_4 { pt3dadd( -34.7802, 31.9431, -49.6811, 0.69 ) }
    dend_4 { pt3dadd( -35.4758, 32.0951, -50.8111, 0.69 ) }
    dend_4 { pt3dadd( -36.1041, 32.3905, -51.9441, 0.69 ) }
    dend_4 { pt3dadd( -36.3586, 32.5935, -52.5414, 0.69 ) }
    dend_4 { pt3dadd( -36.6217, 32.9492, -53.4493, 0.69 ) }
    dend_4 { pt3dadd( -37.0301, 33.7233, -55.4387, 0.92 ) }
    dend_4 { pt3dadd( -37.4195, 34.4818, -57.5724, 0.92 ) }
    dend_4 { pt3dadd( -37.6837, 34.9693, -59.2033, 0.92 ) }
    dend_4 { pt3dadd( -38.0157, 35.3512, -60.9369, 0.92 ) }
    dend_4 { pt3dadd( -38.3663, 35.5406, -62.4072, 0.92 ) }
    dend_4 { pt3dadd( -38.7297, 35.6362, -63.62, 0.92 ) }
    dend_4 { pt3dadd( -39.2804, 35.716, -65.0641, 0.92 ) }
    dend_4 { pt3dadd( -39.6737, 35.7851, -65.8259, 0.92 ) }
    dend_4 { pt3dadd( -40.3605, 35.91, -66.9152, 0.92 ) }
    dend_4 { pt3dadd( -41.4662, 36.1479, -68.3596, 0.92 ) }
    dend_4 { pt3dadd( -43.1851, 36.5933, -70.2654, 0.69 ) }
    dend_4 { pt3dadd( -44.1852, 36.8701, -71.1686, 0.69 ) }
    dend_4 { pt3dadd( -46.1087, 37.3741, -72.5499, 0.69 ) }
    dend_4 { pt3dadd( -47.5024, 37.7183, -73.3097, 0.69 ) }
    dend_4 { pt3dadd( -48.5001, 37.9691, -73.671, 0.92 ) }
    dend_4 { pt3dadd( -49.3751, 38.237, -73.7743, 1.15 ) }
    dend_4 { pt3dadd( -51.1512, 38.9193, -73.6689, 0.92 ) }
    dend_4 { pt3dadd( -52.5641, 39.6056, -73.5499, 0.92 ) }
    dend_4 { pt3dadd( -53.7687, 40.3166, -73.42, 0.69 ) }
    dend_4 { pt3dadd( -54.9283, 41.0582, -73.2759, 0.69 ) }
    dend_4 { pt3dadd( -56.8665, 42.2964, -73.0978, 0.69 ) }
    dend_4 { pt3dadd( -58.0877, 42.9958, -73.0906, 0.69 ) }
    dend_4 { pt3dadd( -60.5805, 44.2646, -73.4086, 0.69 ) }
    dend_4 { pt3dadd( -62.2325, 44.9941, -73.7838, 0.69 ) }
    dend_4 { pt3dadd( -64.3967, 45.7729, -74.5237, 0.92 ) }
    dend_4 { pt3dadd( -65.3959, 46.0547, -75.024, 0.92 ) }
    dend_4 { pt3dadd( -67.7116, 46.5494, -76.5222, 0.92 ) }
    dend_4 { pt3dadd( -69.5837, 46.8685, -77.8692, 0.92 ) }
    dend_4 { pt3dadd( -70.8958, 47.0378, -78.9524, 0.92 ) }
    dend_4 { pt3dadd( -72.8163, 47.211, -80.834, 0.92 ) }
    dend_4 { pt3dadd( -74.3831, 47.3315, -82.6626, 0.92 ) }
    dend_4 { pt3dadd( -75.3641, 47.4534, -83.9041, 0.92 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 69/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -19.7479, 22.8034, -18.7532, 0.92 ) }
    dend_3 { pt3dadd( -19.7927, 23.4174, -19.2139, 0.92 ) }
    dend_3 { pt3dadd( -19.9336, 24.0364, -19.7129, 0.92 ) }
    dend_3 { pt3dadd( -20.096, 24.7668, -20.2536, 0.69 ) }
    dend_3 { pt3dadd( -20.3285, 25.7664, -20.9603, 0.69 ) }
    dend_3 { pt3dadd( -20.6866, 27.1528, -21.8858, 0.69 ) }
    dend_3 { pt3dadd( -20.9333, 28.1195, -22.5343, 0.69 ) }
    dend_3 { pt3dadd( -21.1884, 29.2433, -23.2792, 0.69 ) }
    dend_3 { pt3dadd( -21.4628, 30.5206, -24.0853, 0.69 ) }
    dend_3 { pt3dadd( -21.7709, 31.9562, -24.974, 0.69 ) }
    dend_3 { pt3dadd( -22.0016, 33.0625, -25.6629, 0.69 ) }
    dend_3 { pt3dadd( -22.2523, 34.3183, -26.4588, 0.69 ) }
    dend_3 { pt3dadd( -22.5544, 35.8214, -27.4945, 0.46 ) }
    dend_3 { pt3dadd( -22.8111, 37.0802, -28.4441, 0.46 ) }
    dend_3 { pt3dadd( -23.043, 38.2168, -29.4846, 0.69 ) }
    dend_3 { pt3dadd( -23.2704, 39.3601, -30.8556, 0.69 ) }
    dend_3 { pt3dadd( -23.3532, 39.7687, -31.3991, 0.69 ) }
    dend_3 { pt3dadd( -23.5516, 40.5816, -32.6151, 0.69 ) }
    dend_3 { pt3dadd( -23.7789, 41.3588, -34.0263, 0.69 ) }
    dend_3 { pt3dadd( -24.0133, 42.3519, -36.1762, 0.69 ) }
    dend_3 { pt3dadd( -24.1516, 43.4119, -38.8516, 0.69 ) }
    // Section: dend_9, id: dend_9, parent: dend_7 (entry count 90/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -60.9903, 2.44573, -23.2921, 0.92 ) }
    dend_9 { pt3dadd( -61.2362, 2.87882, -24.048, 0.92 ) }
    dend_9 { pt3dadd( -61.8365, 3.99739, -26.4308, 1.15 ) }
    dend_9 { pt3dadd( -62.1289, 4.77632, -28.0725, 0.92 ) }
    dend_9 { pt3dadd( -62.3478, 5.86432, -30.217, 0.92 ) }
    dend_9 { pt3dadd( -62.4365, 7.22994, -32.9007, 0.92 ) }
    dend_9 { pt3dadd( -62.4082, 8.0872, -34.6676, 0.92 ) }
    dend_9 { pt3dadd( -62.237, 9.03461, -37.0272, 0.92 ) }
    dend_9 { pt3dadd( -62.0046, 9.61283, -38.7257, 1.15 ) }
    dend_9 { pt3dadd( -61.5638, 10.2433, -40.5848, 0.92 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_9 { pt3dadd( -60.9551, 10.8403, -42.2272, 0.92 ) }
    dend_9 { pt3dadd( -60.4302, 11.288, -43.2495, 0.92 ) }
    dend_9 { pt3dadd( -59.6533, 11.883, -44.4965, 0.92 ) }
    dend_9 { pt3dadd( -59.3295, 12.1256, -44.9721, 0.92 ) }
    dend_9 { pt3dadd( -58.4096, 12.8361, -46.5653, 0.92 ) }
    dend_9 { pt3dadd( -57.8066, 13.4014, -47.6719, 0.69 ) }
    dend_9 { pt3dadd( -57.2352, 14.0771, -48.6714, 0.69 ) }
    dend_9 { pt3dadd( -56.7149, 14.896, -49.6433, 0.69 ) }
    dend_9 { pt3dadd( -56.3273, 15.7395, -50.5018, 1.15 ) }
    dend_9 { pt3dadd( -55.8715, 17.9797, -52.4657, 1.15 ) }
    dend_9 { pt3dadd( -55.9397, 19.1005, -53.201, 0.92 ) }
    dend_9 { pt3dadd( -56.3394, 20.4884, -53.7082, 0.92 ) }
    dend_9 { pt3dadd( -57.1013, 22.1495, -54.0244, 0.92 ) }
    dend_9 { pt3dadd( -57.7658, 23.3585, -54.1329, 1.15 ) }
    dend_9 { pt3dadd( -58.8169, 25.0257, -54.1814, 0.92 ) }
    dend_9 { pt3dadd( -59.5759, 26.2708, -54.2124, 0.92 ) }
    dend_9 { pt3dadd( -60.3011, 27.5691, -54.4179, 1.15 ) }
    dend_9 { pt3dadd( -61.3041, 29.8102, -55.1832, 0.69 ) }
    dend_9 { pt3dadd( -61.5853, 30.5735, -55.5808, 0.69 ) }
    dend_9 { pt3dadd( -61.9474, 31.6912, -56.3554, 0.69 ) }
    dend_9 { pt3dadd( -62.5169, 33.3933, -57.8044, 0.69 ) }
    dend_9 { pt3dadd( -63.0429, 34.7541, -59.182, 1.15 ) }
    dend_9 { pt3dadd( -63.6749, 36.3507, -61.0164, 0.69 ) }
    dend_9 { pt3dadd( -64.1701, 37.5977, -62.6482, 0.69 ) }
    dend_9 { pt3dadd( -64.3784, 38.0914, -63.3772, 0.69 ) }
    dend_9 { pt3dadd( -64.6786, 38.8312, -64.5477, 0.92 ) }
    dend_9 { pt3dadd( -65.2649, 40.1468, -66.6208, 0.92 ) }
    dend_9 { pt3dadd( -65.7954, 41.3413, -68.5016, 0.92 ) }
    dend_9 { pt3dadd( -66.4209, 42.6641, -70.6725, 0.92 ) }
    dend_9 { pt3dadd( -67.1263, 43.9815, -72.8556, 0.92 ) }
    dend_9 { pt3dadd( -67.9241, 45.1758, -74.9736, 0.92 ) }
    dend_9 { pt3dadd( -68.5155, 45.8295, -76.3358, 0.92 ) }
    dend_9 { pt3dadd( -69.0865, 46.2329, -77.3957, 0.92 ) }
    dend_9 { pt3dadd( -70.5665, 46.8013, -79.5955, 0.92 ) }
    dend_9 { pt3dadd( -72.1395, 47.1171, -81.3602, 0.69 ) }
    dend_9 { pt3dadd( -74.0028, 47.2794, -83.0946, 0.69 ) }
    dend_9 { pt3dadd( -76.4682, 47.3057, -85.1011, 0.69 ) }
    dend_9 { pt3dadd( -77.9632, 47.2216, -86.2008, 0.69 ) }
    dend_9 { pt3dadd( -80.835, 46.9713, -88.0779, 0.69 ) }
    dend_9 { pt3dadd( -84.1177, 46.4735, -89.9902, 0.69 ) }
    dend_9 { pt3dadd( -86.5153, 46.0484, -91.3012, 0.69 ) }
    dend_9 { pt3dadd( -87.9157, 45.7709, -91.9224, 0.69 ) }
    dend_9 { pt3dadd( -89.8409, 45.3719, -92.5555, 0.46 ) }
    dend_9 { pt3dadd( -90.7579, 45.17, -92.8037, 0.46 ) }
    dend_9 { pt3dadd( -92.8352, 44.5482, -93.228, 0.46 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 45/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -60.9903, 2.44573, -23.2921, 0.92 ) }
    dend_8 { pt3dadd( -61.5005, 2.47317, -24.1534, 0.92 ) }
    dend_8 { pt3dadd( -62.6782, 2.4688, -25.9739, 0.92 ) }
    dend_8 { pt3dadd( -63.8812, 2.50848, -27.8388, 0.92 ) }
    dend_8 { pt3dadd( -64.2129, 2.53809, -28.3412, 0.92 ) }
    dend_8 { pt3dadd( -64.9687, 2.62049, -29.4528, 0.92 ) }
    dend_8 { pt3dadd( -65.9787, 2.7132, -30.7535, 0.69 ) }
    dend_8 { pt3dadd( -66.9297, 2.76604, -31.7821, 0.69 ) }
    dend_8 { pt3dadd( -68.0363, 2.81372, -32.8068, 0.69 ) }
    dend_8 { pt3dadd( -68.922, 2.88522, -33.5379, 0.69 ) }
    dend_8 { pt3dadd( -69.9699, 3.00033, -34.3436, 0.69 ) }
    dend_8 { pt3dadd( -71.7184, 3.14594, -35.588, 0.69 ) }
    dend_8 { pt3dadd( -72.8739, 3.12791, -36.2697, 0.46 ) }
    dend_8 { pt3dadd( -73.4974, 3.04706, -36.575, 0.46 ) }
    dend_8 { pt3dadd( -75.3162, 2.58477, -37.3067, 0.69 ) }
    dend_8 { pt3dadd( -75.8646, 2.38544, -37.4942, 0.46 ) }
    dend_8 { pt3dadd( -77.2739, 1.75206, -37.9567, 0.46 ) }
    dend_8 { pt3dadd( -78.7338, 0.992589, -38.4363, 0.46 ) }
    dend_8 { pt3dadd( -79.7898, 0.383484, -38.7773, 0.69 ) }
    dend_8 { pt3dadd( -80.7005, -0.214671, -39.1308, 0.69 ) }
    dend_8 { pt3dadd( -81.4462, -0.758155, -39.4467, 0.69 ) }
    dend_8 { pt3dadd( -82.9252, -1.8728, -40.1857, 0.69 ) }
    dend_8 { pt3dadd( -83.5729, -2.37231, -40.5743, 0.69 ) }
    dend_8 { pt3dadd( -84.5516, -3.1861, -41.2552, 0.69 ) }
    dend_8 { pt3dadd( -85.7138, -4.19781, -42.1413, 0.69 ) }
    dend_8 { pt3dadd( -86.472, -4.85422, -42.7238, 0.92 ) }
    dend_8 { pt3dadd( -87.8044, -5.969, -43.7453, 0.69 ) }
    dend_8 { pt3dadd( -88.785, -6.69697, -44.4238, 0.69 ) }
    dend_8 { pt3dadd( -89.6416, -7.23576, -45.0114, 0.69 ) }
    dend_8 { pt3dadd( -91.1407, -7.96755, -45.9244, 0.92 ) }
    dend_8 { pt3dadd( -91.9637, -8.27742, -46.3462, 0.92 ) }
    dend_8 { pt3dadd( -93.5828, -8.81212, -47.1102, 0.69 ) }
    dend_8 { pt3dadd( -95.0448, -9.24446, -47.7005, 0.69 ) }
    dend_8 { pt3dadd( -96.8553, -9.75808, -48.3411, 0.69 ) }
    dend_8 { pt3dadd( -98.5113, -10.2382, -48.9801, 0.69 ) }
    dend_8 { pt3dadd( -99.8977, -10.6996, -49.6041, 0.69 ) }
    dend_8 { pt3dadd( -101.84, -11.4804, -50.6576, 0.69 ) }
    dend_8 { pt3dadd( -103.01, -12.0181, -51.3811, 0.69 ) }
    dend_8 { pt3dadd( -104.273, -12.6544, -52.2495, 0.69 ) }
    dend_8 { pt3dadd( -106.024, -13.5519, -53.4987, 0.69 ) }
    dend_8 { pt3dadd( -107.676, -14.3669, -54.7922, 0.69 ) }
    dend_8 { pt3dadd( -109.034, -14.9911, -55.9509, 0.46 ) }
    dend_8 { pt3dadd( -109.831, -15.3219, -56.6944, 0.69 ) }
    dend_8 { pt3dadd( -110.586, -15.6027, -57.4398, 0.69 ) }
    dend_8 { pt3dadd( -111.264, -15.8392, -58.0998, 0.46 ) }
    dend_8 { pt3dadd( -112.12, -16.081, -58.8216, 0.46 ) }
    dend_8 { pt3dadd( -113.793, -16.427, -60.123, 0.23 ) }
    dend_8 { pt3dadd( -115.629, -16.6742, -61.5751, 0.23 ) }
    dend_8 { pt3dadd( -116.202, -16.7668, -62.1011, 0.23 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_28, dend_27, dend_20, dend_15, dend_0, dend_30, dend_29, dend_26, dend_21, dend_19, dend_16, dend_10, dend_1, dend_23, dend_22, dend_18, dend_17, dend_14, dend_11, dend_5, dend_2, dend_25, dend_24, dend_13, dend_12, dend_7, dend_6, dend_4, dend_3, dend_9, dend_8]}
    ModelViewParmSubset_2 = new SectionList()
    dend_28 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_30 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_28, dend_27, dend_20, dend_15, dend_0, dend_30, dend_29, dend_26, dend_21, dend_19, dend_16, dend_10, dend_1, dend_23, dend_22, dend_18, dend_17, dend_14, dend_11, dend_5, dend_2, dend_25, dend_24, dend_13, dend_12, dend_7, dend_6, dend_4, dend_3, dend_9, dend_8]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_30 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_29 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_26 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_19 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_18 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_17 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_14 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_12 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_4 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_9 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_8 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_20 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_0 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_28 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_1 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_10 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_21 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_15 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_23 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_27 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_24 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_22 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_2 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_5 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_11 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_16 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_25 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_7 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_3 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_13 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_6 OneSecGrp_SectionRef_30.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_20, dend_20, dend_20, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_24, dend_24, dend_24, dend_24, dend_24, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_22 all.append()
    dend_22 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_25 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.999855  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.042115  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0012239999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.001693  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.386953  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 8.0E-6  // units: S cm-2
        e_pas_nml2 = -63.854015  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.5399997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.039862998  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 5.2299997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.0054459996  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.503893  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-4  // units: S cm-2
        e_pas_nml2 = -67.1289  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 4.78E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.15074699  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009017  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 4.0E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.0032419998  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 1.74E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bNAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bNAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bNAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bNAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_30 nseg = 9
    dend_29 nseg = 5
    dend_26 nseg = 3
    dend_19 nseg = 5
    dend_18 nseg = 3
    dend_17 nseg = 3
    dend_14 nseg = 5
    dend_12 nseg = 3
    dend_4 nseg = 5
    dend_9 nseg = 5
    dend_8 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bNAC219_L1_HAC_369e749269_0_0


