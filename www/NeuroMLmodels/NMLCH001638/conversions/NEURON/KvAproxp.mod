TITLE Mod file for component: Component(id=KvAproxp type=ionChannelHH)

COMMENT

    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.3
         org.neuroml.model   v1.5.3
         jLEMS               v0.9.9.0

ENDCOMMENT

NEURON {
    SUFFIX KvAproxp
    USEION k READ ek WRITE ik VALENCE 1 ? Assuming valence = 1; TODO check this!!
    
    RANGE gion                           
    RANGE gmax                              : Will be changed when ion channel mechanism placed on cell!
    RANGE conductance                       : parameter
    
    RANGE g                                 : exposure
    
    RANGE fopen                             : exposure
    RANGE n_instances                       : parameter
    
    RANGE n_tau                             : exposure
    
    RANGE n_inf                             : exposure
    
    RANGE n_rateScale                       : exposure
    
    RANGE n_fcond                           : exposure
    RANGE n_timeCourse_TIME_SCALE           : parameter
    RANGE n_timeCourse_VOLT_SCALE           : parameter
    RANGE n_timeCourse_TEMP_SCALE           : parameter
    RANGE n_timeCourse_R                    : parameter
    RANGE n_timeCourse_F                    : parameter
    
    RANGE n_timeCourse_t                    : exposure
    RANGE n_steadyState_VOLT_SCALE          : parameter
    RANGE n_steadyState_TEMP_SCALE          : parameter
    RANGE n_steadyState_R                   : parameter
    RANGE n_steadyState_F                   : parameter
    
    RANGE n_steadyState_x                   : exposure
    RANGE n_q10Settings_q10Factor           : parameter
    RANGE n_q10Settings_experimentalTemp    : parameter
    RANGE n_q10Settings_TENDEGREES          : parameter
    
    RANGE n_q10Settings_q10                 : exposure
    RANGE l_instances                       : parameter
    
    RANGE l_tau                             : exposure
    
    RANGE l_inf                             : exposure
    
    RANGE l_rateScale                       : exposure
    
    RANGE l_fcond                           : exposure
    RANGE l_timeCourse_TIME_SCALE           : parameter
    RANGE l_timeCourse_VOLT_SCALE           : parameter
    
    RANGE l_timeCourse_t                    : exposure
    RANGE l_steadyState_VOLT_SCALE          : parameter
    RANGE l_steadyState_TEMP_SCALE          : parameter
    RANGE l_steadyState_R                   : parameter
    RANGE l_steadyState_F                   : parameter
    
    RANGE l_steadyState_x                   : exposure
    RANGE l_q10Settings_fixedQ10            : parameter
    
    RANGE l_q10Settings_q10                 : exposure
    RANGE n_timeCourse_V                    : derived variable
    RANGE n_timeCourse_T                    : derived variable
    RANGE n_timeCourse_zeta                 : derived variable
    RANGE n_timeCourse_alpha                : derived variable
    RANGE n_timeCourse_beta                 : derived variable
    RANGE n_timeCourse_tmp                  : derived variable
    RANGE n_steadyState_V                   : derived variable
    RANGE n_steadyState_T                   : derived variable
    RANGE n_steadyState_zeta                : derived variable
    RANGE n_steadyState_alpha               : derived variable
    RANGE n_tauUnscaled                     : derived variable
    RANGE l_timeCourse_V                    : derived variable
    RANGE l_timeCourse_tmp                  : derived variable
    RANGE l_steadyState_V                   : derived variable
    RANGE l_steadyState_T                   : derived variable
    RANGE l_steadyState_alpha               : derived variable
    RANGE l_tauUnscaled                     : derived variable
    RANGE conductanceScale                  : derived variable
    RANGE fopen0                            : derived variable
    
}

UNITS {
    
    (nA) = (nanoamp)
    (uA) = (microamp)
    (mA) = (milliamp)
    (A) = (amp)
    (mV) = (millivolt)
    (mS) = (millisiemens)
    (uS) = (microsiemens)
    (molar) = (1/liter)
    (kHz) = (kilohertz)
    (mM) = (millimolar)
    (um) = (micrometer)
    (umol) = (micromole)
    (S) = (siemens)
    
}

PARAMETER {
    
    gmax = 0  (S/cm2)                       : Will be changed when ion channel mechanism placed on cell!
    
    conductance = 1.0E-6 (uS)
    n_instances = 1 
    n_timeCourse_TIME_SCALE = 1 (ms)
    n_timeCourse_VOLT_SCALE = 1 (mV)
    n_timeCourse_TEMP_SCALE = 1 (K)
    n_timeCourse_R = 8.315 
    n_timeCourse_F = 96480 
    n_steadyState_VOLT_SCALE = 1 (mV)
    n_steadyState_TEMP_SCALE = 1 (K)
    n_steadyState_R = 8.315 
    n_steadyState_F = 96480 
    n_q10Settings_q10Factor = 5 
    n_q10Settings_experimentalTemp = 297.15 (K)
    n_q10Settings_TENDEGREES = 10 (K)
    l_instances = 1 
    l_timeCourse_TIME_SCALE = 1 (ms)
    l_timeCourse_VOLT_SCALE = 1 (mV)
    l_steadyState_VOLT_SCALE = 1 (mV)
    l_steadyState_TEMP_SCALE = 1 (K)
    l_steadyState_R = 8.315 
    l_steadyState_F = 96480 
    l_q10Settings_fixedQ10 = 1 
}

ASSIGNED {
    
    gion   (S/cm2)                          : Transient conductance density of the channel? Standard Assigned variables with ionChannel
    v (mV)
    celsius (degC)
    temperature (K)
    ek (mV)
    ik (mA/cm2)
    
    
    n_timeCourse_V                         : derived variable
    
    n_timeCourse_T                         : derived variable
    
    n_timeCourse_zeta                      : derived variable
    
    n_timeCourse_alpha                     : derived variable
    
    n_timeCourse_beta                      : derived variable
    
    n_timeCourse_tmp                       : derived variable
    
    n_timeCourse_t (ms)                    : conditional derived var...
    
    n_steadyState_V                        : derived variable
    
    n_steadyState_T                        : derived variable
    
    n_steadyState_zeta                     : derived variable
    
    n_steadyState_alpha                    : derived variable
    
    n_steadyState_x                        : derived variable
    
    n_q10Settings_q10                      : derived variable
    
    n_rateScale                            : derived variable
    
    n_fcond                                : derived variable
    
    n_inf                                  : derived variable
    
    n_tauUnscaled (ms)                     : derived variable
    
    n_tau (ms)                             : derived variable
    
    l_timeCourse_V                         : derived variable
    
    l_timeCourse_tmp                       : derived variable
    
    l_timeCourse_t (ms)                    : conditional derived var...
    
    l_steadyState_V                        : derived variable
    
    l_steadyState_T                        : derived variable
    
    l_steadyState_alpha                    : derived variable
    
    l_steadyState_x                        : derived variable
    
    l_q10Settings_q10                      : derived variable
    
    l_rateScale                            : derived variable
    
    l_fcond                                : derived variable
    
    l_inf                                  : derived variable
    
    l_tauUnscaled (ms)                     : derived variable
    
    l_tau (ms)                             : derived variable
    
    conductanceScale                       : derived variable
    
    fopen0                                 : derived variable
    
    fopen                                  : derived variable
    
    g (uS)                                 : derived variable
    rate_n_q (/ms)
    rate_l_q (/ms)
    
}

STATE {
    n_q  
    l_q  
    
}

INITIAL {
    temperature = celsius + 273.15
    
    rates()
    rates() ? To ensure correct initialisation.
    
    n_q = n_inf
    
    l_q = l_inf
    
}

BREAKPOINT {
    
    SOLVE states METHOD cnexp
    
    ? DerivedVariable is based on path: conductanceScaling[*]/factor, on: Component(id=KvAproxp type=ionChannelHH), from conductanceScaling; null
    ? Path not present in component, using factor: 1
    
    conductanceScale = 1 
    
    ? DerivedVariable is based on path: gates[*]/fcond, on: Component(id=KvAproxp type=ionChannelHH), from gates; Component(id=n type=gateHHtauInf)
    ? multiply applied to all instances of fcond in: <gates> ([Component(id=n type=gateHHtauInf), Component(id=l type=gateHHtauInf)]))
    fopen0 = n_fcond * l_fcond ? path based, prefix = 
    
    fopen = conductanceScale  *  fopen0 ? evaluable
    g = conductance  *  fopen ? evaluable
    gion = gmax * fopen 
    
    ik = gion * (v - ek)
    
}

DERIVATIVE states {
    rates()
    n_q' = rate_n_q 
    l_q' = rate_l_q 
    
}

PROCEDURE rates() {
    
    n_timeCourse_V = v /  n_timeCourse_VOLT_SCALE ? evaluable
    n_timeCourse_T = temperature /  n_timeCourse_TEMP_SCALE ? evaluable
    n_timeCourse_zeta = -1.5 - (1 / (1 + exp(( n_timeCourse_V +40)/5))) ? evaluable
    n_timeCourse_alpha = exp((1e-3* n_timeCourse_zeta *( n_timeCourse_V -11)* n_timeCourse_F ) / ( n_timeCourse_R *( n_timeCourse_T +0.01))) ? evaluable
    n_timeCourse_beta = exp((1e-3* n_timeCourse_zeta *0.55*( n_timeCourse_V -11)* n_timeCourse_F ) / ( n_timeCourse_R *( n_timeCourse_T +0.01))) ? evaluable
    n_timeCourse_tmp = n_timeCourse_beta  / (0.05*(1 +  n_timeCourse_alpha )) ? evaluable
    if (( n_timeCourse_tmp  /  n_rateScale ) < 0.1)  { 
        n_timeCourse_t = 0.1 *  n_rateScale  *  n_timeCourse_TIME_SCALE ? evaluable cdv
    } else  { 
        n_timeCourse_t = n_timeCourse_tmp  *  n_timeCourse_TIME_SCALE ? evaluable cdv
    }
    
    n_steadyState_V = v /  n_steadyState_VOLT_SCALE ? evaluable
    n_steadyState_T = temperature /  n_steadyState_TEMP_SCALE ? evaluable
    n_steadyState_zeta = -1.5 - (1 / (1 + exp(( n_steadyState_V +40)/5))) ? evaluable
    n_steadyState_alpha = exp((1e-3* n_steadyState_zeta *( n_steadyState_V -11)* n_steadyState_F ) / ( n_steadyState_R *( n_steadyState_T +0.01))) ? evaluable
    n_steadyState_x = 1 / (1 +  n_steadyState_alpha ) ? evaluable
    n_q10Settings_q10 = n_q10Settings_q10Factor ^((temperature -  n_q10Settings_experimentalTemp )/ n_q10Settings_TENDEGREES ) ? evaluable
    ? DerivedVariable is based on path: q10Settings[*]/q10, on: Component(id=n type=gateHHtauInf), from q10Settings; Component(id=null type=q10ExpTemp)
    ? multiply applied to all instances of q10 in: <q10Settings> ([Component(id=null type=q10ExpTemp)]))
    n_rateScale = n_q10Settings_q10 ? path based, prefix = n_
    
    n_fcond = n_q ^ n_instances ? evaluable
    ? DerivedVariable is based on path: steadyState/x, on: Component(id=n type=gateHHtauInf), from steadyState; Component(id=null type=Bezaire_KvAproxp_ssn)
    n_inf = n_steadyState_x ? path based, prefix = n_
    
    ? DerivedVariable is based on path: timeCourse/t, on: Component(id=n type=gateHHtauInf), from timeCourse; Component(id=null type=Bezaire_KvAproxp_taun)
    n_tauUnscaled = n_timeCourse_t ? path based, prefix = n_
    
    n_tau = n_tauUnscaled  /  n_rateScale ? evaluable
    l_timeCourse_V = v /  l_timeCourse_VOLT_SCALE ? evaluable
    l_timeCourse_tmp = 0.26*( l_timeCourse_V +50) ? evaluable
    if (( l_timeCourse_tmp  /  l_rateScale ) < (2 /  l_rateScale ))  { 
        l_timeCourse_t = 2 *  l_timeCourse_TIME_SCALE ? evaluable cdv
    } else  { 
        l_timeCourse_t = l_timeCourse_tmp  *  l_timeCourse_TIME_SCALE ? evaluable cdv
    }
    
    l_steadyState_V = v /  l_steadyState_VOLT_SCALE ? evaluable
    l_steadyState_T = temperature /  l_steadyState_TEMP_SCALE ? evaluable
    l_steadyState_alpha = exp((1e-3*3*( l_steadyState_V +56)* l_steadyState_F ) / ( l_steadyState_R *( l_steadyState_T +0.01))) ? evaluable
    l_steadyState_x = 1 / (1 +  l_steadyState_alpha ) ? evaluable
    l_q10Settings_q10 = l_q10Settings_fixedQ10 ? evaluable
    ? DerivedVariable is based on path: q10Settings[*]/q10, on: Component(id=l type=gateHHtauInf), from q10Settings; Component(id=null type=q10Fixed)
    ? multiply applied to all instances of q10 in: <q10Settings> ([Component(id=null type=q10Fixed)]))
    l_rateScale = l_q10Settings_q10 ? path based, prefix = l_
    
    l_fcond = l_q ^ l_instances ? evaluable
    ? DerivedVariable is based on path: steadyState/x, on: Component(id=l type=gateHHtauInf), from steadyState; Component(id=null type=Bezaire_KvAproxp_ssl)
    l_inf = l_steadyState_x ? path based, prefix = l_
    
    ? DerivedVariable is based on path: timeCourse/t, on: Component(id=l type=gateHHtauInf), from timeCourse; Component(id=null type=Bezaire_KvAproxp_taul)
    l_tauUnscaled = l_timeCourse_t ? path based, prefix = l_
    
    l_tau = l_tauUnscaled  /  l_rateScale ? evaluable
    
     
    rate_n_q = ( n_inf  -  n_q ) /  n_tau ? Note units of all quantities used here need to be consistent!
    
     
    
     
    
     
    
     
    rate_l_q = ( l_inf  -  l_q ) /  l_tau ? Note units of all quantities used here need to be consistent!
    
     
    
     
    
     
    
     
    
}

