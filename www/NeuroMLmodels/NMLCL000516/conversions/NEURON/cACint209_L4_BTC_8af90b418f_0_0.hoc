// Cell: cACint209_L4_BTC_8af90b418f_0_0
/*
{
  "id" : "cACint209_L4_BTC_8af90b418f_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-1.49721, 11.7986, 0.0301706, 2.4623", "-1.37308, 10.661, 0.0290426, 4.20373", "-1.24895, 9.52332, 0.0279145, 5.59272", "-1.12482, 8.38566, 0.0267864, 6.71614", "-1.00068, 7.248, 0.0256584, 7.74544", "-0.87655, 6.11034, 0.0245303, 8.57739", "-0.752417, 4.97268, 0.0234023, 9.13171", "-0.628284, 3.83502, 0.0222742, 9.51195", "-0.504152, 2.69736, 0.0211462, 9.92921", "-0.380019, 1.5597, 0.0200181, 10.275", "-0.255886, 0.422041, 0.01889, 10.4231", "-0.131754, -0.715618, 0.017762, 10.4046", "-0.00762106, -1.85328, 0.0166339, 10.4069", "0.116512, -2.99094, 0.0155059, 10.1383", "0.240644, -4.1286, 0.0143778, 9.53645", "0.364777, -5.26626, 0.0132498, 8.49552", "0.48891, -6.40392, 0.0121217, 7.50349", "0.613042, -7.54158, 0.0109937, 6.64245", "0.737175, -8.67924, 0.0098656, 6.01482", "0.861308, -9.8169, 0.00873754, 4.86867", "0.98544, -10.9546, 0.00760949, 2.96361" ]
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-1.78536, 10.9696, 1.5043, 2.36", "-1.78536, 10.9696, 1.5043, 2.36", "-1.94616, 11.8724, 1.74795, 2.06", "-2.13473, 12.8182, 2.03478, 2.06", "-2.15614, 12.9073, 2.06293, 2.06", "-2.42867, 13.9434, 2.39189, 2.21", "-2.85052, 15.3886, 2.92732, 2.21", "-3.17983, 16.3398, 3.32047, 2.21", "-3.19926, 16.3889, 3.34432, 2.21", "-3.59417, 17.3163, 3.83126, 2.21", "-3.77695, 17.7278, 4.05595, 2.36", "-4.34062, 18.9176, 4.75597, 2.43", "-4.70148, 19.6338, 5.16563, 2.65", "-5.25571, 20.753, 5.83295, 2.65" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999821452163534
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "0.094648, -9.74991, 0.0043065, 4.86", "0.094648, -9.74991, 0.0043065, 4.86", "-0.3182, -11.0114, -0.0369949, 4.57", "-0.775883, -12.3858, -0.0915634, 4.2", "-1.59306, -14.8524, -0.196828, 2.87", "-2.25019, -16.9478, -0.310233, 2.58", "-2.96702, -19.3303, -0.452117, 2.5", "-3.46736, -21.1149, -0.541568, 2.58", "-3.48346, -21.1792, -0.544251, 2.58", "-3.65011, -22.0425, -0.56997, 2.73", "-3.89727, -24.0903, -0.599154, 2.73", "-3.94993, -25.4502, -0.560713, 2.36", "-3.9164, -27.1354, -0.445892, 2.65", "-3.83181, -28.618, -0.312778, 2.87", "-3.72291, -30.0565, -0.17661, 3.09", "-3.58084, -31.3904, -0.045477, 3.09", "-3.33678, -33.1452, 0.134756, 3.32", "-3.20093, -34.0089, 0.217774, 3.02", "-2.90971, -35.7857, 0.357116, 2.43", "-2.56572, -37.8628, 0.51854, 2.36", "-2.35367, -39.2211, 0.610913, 2.36", "-2.23439, -39.902, 0.64213, 2.36" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999821452163534
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "0.98544, -10.9546, 0.00760949, 0.674355", "2.61247, -25.8661, 0.00760949, 0.674355", "4.23949, -40.7776, 0.00760949, 0.674355" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-5.25571, 20.753, 5.83295, 1.4", "-5.89145, 22.0421, 6.04766, 1.4", "-6.41473, 23.1631, 6.21634, 1.18", "-6.76305, 23.9644, 6.32023, 1.18", "-7.11622, 24.8124, 6.41985, 1.18", "-7.43955, 25.6268, 6.50283, 1.62", "-7.63483, 26.1488, 6.56554, 1.99", "-7.65443, 26.2155, 6.57311, 1.99", "-7.85563, 27.0516, 6.6504, 2.06", "-7.87906, 27.1804, 6.66124, 2.06", "-8.00115, 28.1586, 6.72923, 1.62", "-8.10586, 29.452, 6.83913, 1.4", "-8.11113, 29.546, 6.84775, 1.4", "-8.14629, 30.5938, 6.9436, 1.47", "-8.15522, 31.5177, 7.02687, 1.77", "-8.15291, 32.3245, 7.08899, 1.92", "-8.13185, 33.4558, 7.15262, 1.11", "-8.13081, 33.7176, 7.15971, 1.11", "-8.15132, 34.2237, 7.17662, 1.11", "-8.16911, 34.4072, 7.18438, 1.11", "-8.34139, 35.5433, 7.23745, 0.96", "-8.49904, 36.2794, 7.24613, 0.96", "-8.69464, 36.9986, 7.22801, 1.55", "-8.89261, 37.6518, 7.19637, 2.36", "-9.07038, 38.2496, 7.15706, 2.5", "-9.20704, 38.7198, 7.12002, 2.8", "-9.48777, 39.719, 7.03012, 2.43", "-9.70814, 40.5627, 6.94687, 1.99", "-10.0088, 42.0637, 6.83334, 1.4", "-10.1039, 42.8478, 6.79208, 1.4", "-10.1122, 43.0426, 6.78996, 1.4", "-10.0759, 43.9812, 6.81311, 1.62", "-10.0691, 44.0422, 6.81835, 1.62", "-9.85806, 45.4221, 6.99652, 1.03", "-9.67088, 46.4792, 7.20061, 1.03", "-9.51847, 47.4048, 7.41724, 1.47", "-9.34091, 48.5477, 7.70735, 1.69", "-9.16002, 49.9032, 8.06868, 1.69", "-9.08075, 50.8591, 8.31965, 2.14", "-9.06378, 51.8986, 8.57992, 2.8", "-9.10224, 52.8451, 8.81538, 3.24", "-9.16119, 53.4559, 8.94999, 3.39", "-9.30537, 54.3665, 9.12641, 2.21", "-9.53635, 55.5025, 9.30461, 1.33", "-9.7922, 56.5258, 9.43181, 1.18", "-9.82362, 56.6342, 9.43877, 1.18", "-10.138, 57.6672, 9.46832, 1.47", "-10.3221, 58.2558, 9.48446, 1.62" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-5.25571, 20.753, 5.83295, 1.03", "-3.44329, 22.0038, 5.73958, 1.03", "-3.25107, 22.1299, 5.72924, 1.03", "-1.7583, 23.0802, 5.6456, 1.03", "0.249173, 24.3365, 5.53095, 1.4", "0.337014, 24.3903, 5.52867, 1.4", "2.76057, 25.8842, 5.50521, 1.4", "2.85258, 25.9404, 5.50544, 1.4", "4.22859, 26.8377, 5.52641, 1.55", "4.32404, 26.9042, 5.52946, 1.55", "6.2626, 28.4578, 5.61977, 0.96", "7.22962, 29.3251, 5.67155, 0.96", "8.00933, 30.1713, 5.72393, 1.18", "8.83989, 31.182, 5.77214, 1.4", "8.96487, 31.3579, 5.7713, 1.4", "9.65495, 32.3925, 5.70683, 1.4", "9.72845, 32.5065, 5.69268, 1.4", "10.5318, 33.6913, 5.52555, 1.69", "11.1278, 34.5094, 5.402, 1.92", "11.9704, 35.6241, 5.25042, 1.4", "13.0622, 37.084, 5.08056, 1.11", "14.0795, 38.4352, 4.94096, 1.11", "14.1633, 38.5505, 4.93121, 1.11", "15.0788, 39.8477, 4.84584, 1.11", "15.8139, 40.9758, 4.80429, 1.03", "16.5861, 42.284, 4.80414, 1.03", "16.648, 42.4116, 4.80466, 1.03", "17.3494, 44.1359, 4.81171, 1.03", "17.3813, 44.2305, 4.8116, 1.03", "17.6876, 45.5001, 4.80004, 0.81", "17.7061, 45.6465, 4.79656, 0.81", "17.7324, 46.7558, 4.77659, 0.59", "17.7207, 46.9671, 4.77373, 0.59", "17.5918, 48.0445, 4.78808, 0.59", "17.5504, 48.4393, 4.79859, 0.59", "17.4758, 49.3814, 4.83039, 0.74", "17.4688, 49.5287, 4.83574, 0.74", "17.492, 51.1919, 4.8944, 0.74", "17.5954, 52.4517, 4.93086, 1.25", "17.7665, 53.4336, 4.95028, 1.69", "18.1024, 54.8235, 4.96216, 1.4", "18.1305, 54.9191, 4.96194, 1.4", "18.4798, 56.0803, 4.9487, 2.06", "18.8837, 57.3718, 4.92339, 2.21", "19.3082, 58.7401, 4.8841, 1.77", "19.7737, 60.2891, 4.84308, 1.11", "20.1083, 61.4981, 4.81411, 1.11", "20.3968, 62.6714, 4.78873, 1.4", "20.7246, 64.2638, 4.75925, 0.59", "20.7403, 64.362, 4.75775, 0.59", "20.8798, 65.8276, 4.77785, 0.44", "20.9069, 66.9581, 4.8269, 1.11", "20.887, 67.8054, 4.8836, 1.33", "20.8785, 68.0002, 4.89344, 1.33", "20.8252, 68.5933, 4.91011, 1.33", "20.6855, 69.9672, 4.9016, 0.52", "20.4585, 71.7583, 4.83935, 0.52", "20.444, 71.8697, 4.8322, 0.52", "20.2941, 72.994, 4.69067, 0.96", "20.1344, 74.34, 4.40448, 1.55", "20.0174, 75.415, 4.03426, 1.77", "19.9637, 75.9522, 3.77941, 1.99", "19.9569, 76.0253, 3.74159, 1.99", "19.8443, 77.3825, 3.05767, 1.99", "19.7525, 78.5676, 2.4678, 1.4", "19.6268, 80.6054, 1.44182, 0.44", "19.5586, 81.8382, 0.83078, 0.96", "19.5259, 82.7847, 0.389014, 1.4", "19.5064, 83.805, -0.0401934, 1.77", "19.5079, 83.887, -0.0679335, 1.77", "19.5486, 84.6715, -0.245815, 1.99", "19.5712, 84.8917, -0.268345, 1.99", "19.6588, 85.6125, -0.305048, 1.99", "19.6797, 85.8098, -0.314354, 1.99", "19.7522, 86.7492, -0.384284, 1.69", "19.7957, 87.9124, -0.484324, 1.11", "19.7974, 89.0842, -0.590993, 0.44", "19.7511, 90.5034, -0.719938, 0.37", "19.6395, 91.8095, -0.842932, 1.03", "19.532, 92.8738, -0.906144, 1.03", "19.4079, 94.1745, -0.94646, 0.44", "19.3425, 94.9623, -0.953769, 0.88", "19.3034, 95.6838, -0.948928, 1.18", "19.2833, 96.6629, -0.930285, 1.18", "19.3656, 98.8643, -0.882289, 0.37", "19.4741, 100.058, -0.850641, 0.37", "19.7243, 101.79, -0.832386, 1.33", "19.9354, 103.01, -0.830054, 2.36", "20.0706, 103.683, -0.839439, 2.95", "20.2549, 104.43, -0.875632, 3.24", "20.284, 104.555, -0.893723, 3.24", "20.3607, 104.913, -0.95438, 3.24" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-2.23439, -39.902, 0.64213, 2.06", "-2.21801, -41.0443, 0.74268, 2.06", "-2.16196, -43.0632, 0.706864, 2.06", "-2.09999, -44.4671, 0.582675, 2.06", "-1.99303, -45.9101, 0.400321, 2.06", "-1.79854, -47.7382, 0.103211, 2.14", "-1.63556, -48.9961, -0.118631, 2.14", "-1.33503, -50.8814, -0.556291, 2.43", "-1.16292, -51.9214, -0.840186, 2.8", "-0.922857, -53.334, -1.20983, 2.36", "-0.586834, -55.252, -1.69751, 2.36", "-0.314684, -56.7209, -2.04302, 2.36", "-0.00646796, -58.4812, -2.43594, 2.36", "0.258154, -60.3105, -2.8073, 2.14", "0.437279, -61.9642, -3.16963, 2.14", "0.538427, -63.5893, -3.55778, 2.28", "0.546809, -64.1853, -3.70643, 2.28", "0.485456, -65.6814, -4.10506, 1.69", "0.308873, -67.299, -4.47978, 1.18", "0.104073, -68.2528, -4.63604, 1.18", "-0.159972, -68.9063, -4.61965, 1.18", "-0.603219, -69.5815, -4.404, 1.18", "-1.19761, -70.2286, -4.02044, 0.96", "-2.2973, -71.1352, -3.25744, 1.11", "-3.48259, -71.9487, -2.51962, 1.69", "-4.76327, -72.7818, -1.84899, 1.55", "-5.53802, -73.2656, -1.58254, 1.92", "-6.27855, -73.7398, -1.45718, 2.21", "-7.27352, -74.4444, -1.4964, 2.06", "-8.52127, -75.4093, -1.77511, 1.99", "-9.47605, -76.2244, -2.09522, 1.77", "-10.5558, -77.2392, -2.46482, 1.92", "-11.5118, -78.233, -2.73696, 1.84", "-12.441, -79.2997, -2.85307, 1.69", "-13.0394, -80.0871, -2.79618, 1.11", "-13.7002, -81.1504, -2.58795, 0.96", "-14.3619, -82.4622, -2.2335, 1.25", "-14.6866, -83.2637, -2.01265, 0.81", "-15.2456, -85.0432, -1.72957, 0.74", "-15.4852, -86.0407, -1.71024, 0.37", "-15.7226, -87.6106, -1.92622, 1.47", "-15.7681, -88.3653, -2.14789, 2.14", "-15.7604, -89.7924, -2.80379, 2.5", "-15.6382, -91.5962, -3.90842, 1.03", "-15.5388, -92.526, -4.59568, 0.88", "-15.4242, -93.2384, -5.14859, 0.44", "-15.1553, -94.4437, -6.12416, 0.44", "-14.7697, -95.8313, -7.25075, 1.18", "-14.2881, -97.4081, -8.4514, 1.62", "-14.2571, -97.5092, -8.52267, 1.62", "-13.9318, -98.5958, -9.21782, 1.62", "-13.5136, -100.263, -10.1504, 1.47", "-13.3012, -101.363, -10.6428, 1.99", "-13.2075, -102.26, -10.9484, 1.99", "-13.1916, -103.077, -11.1665, 1.99", "-13.2758, -104.642, -11.5437, 0.59", "-13.4509, -105.773, -11.7812, 0.52", "-13.6648, -106.605, -11.876, 0.52", "-14.3309, -108.529, -12.0055, 2.8", "-14.6296, -109.303, -12.0392, 3.17", "-14.9529, -110.068, -11.9964, 3.46", "-15.2586, -110.792, -11.8253, 3.46", "-15.9782, -112.554, -11.284, 1.69", "-16.382, -113.618, -10.8531, 1.11", "-16.6044, -114.27, -10.4899, 1.25", "-17.1619, -116.018, -9.37204, 1.99", "-17.6473, -117.761, -8.08075, 1.47" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-2.23439, -39.902, 0.64213, 0.96", "-1.72341, -40.6879, -0.822393, 0.96", "-1.27388, -41.3112, -2.01999, 0.81", "-0.525359, -42.1624, -3.70398, 0.59", "-0.310068, -42.3613, -4.12116, 0.88", "-0.0869322, -42.5301, -4.4997, 1.11", "-0.0488248, -42.5535, -4.55818, 1.11", "0.504984, -42.7319, -5.30495, 1.25", "0.959248, -42.8278, -6.01026, 0.88", "1.43698, -42.9056, -6.85701, 0.52", "1.64109, -42.96, -7.40304, 0.81", "1.86809, -43.0749, -8.29775, 0.96", "2.09681, -43.3269, -9.834, 0.52", "2.01861, -43.8055, -12.0034, 0.52", "2.00552, -43.8234, -12.0619, 0.52", "1.42393, -44.426, -13.4357, 0.96", "1.19574, -44.6585, -13.8308, 1.11", "0.904821, -44.9557, -14.2119, 1.11", "0.0542571, -45.9372, -15.1321, 0.66", "-0.292279, -46.4293, -15.5223, 0.37", "-0.672823, -47.1681, -16.1495, 0.37", "-0.825143, -47.6909, -16.6414, 0.59", "-0.830999, -47.7347, -16.6873, 0.59", "-0.780107, -48.4338, -17.5152, 1.03", "-0.640968, -49.047, -18.3169, 1.69", "-0.47196, -49.7258, -19.2365, 2.21", "-0.333701, -50.332, -20.0472, 2.8", "-0.292675, -50.6041, -20.398, 2.8", "-0.186443, -51.9332, -21.9964, 1.33", "-0.177602, -52.8783, -23.0139, 0.52", "-0.204156, -53.3721, -23.473, 0.66", "-0.234794, -53.7624, -23.7759, 0.66", "-0.268079, -54.3415, -24.1654, 0.29", "-0.286956, -54.8541, -24.4704, 0.37", "-0.26247, -55.4432, -24.6937, 0.37", "-0.239651, -55.514, -24.7266, 0.37", "0.082467, -56.0411, -25.1491, 0.66", "0.390793, -56.4722, -25.578, 0.96", "0.417035, -56.5057, -25.614, 0.96", "0.713471, -56.8875, -26.0307, 0.96", "1.28107, -57.6745, -26.9319, 0.52", "1.77158, -58.4023, -27.7437, 0.37", "2.33954, -59.2946, -28.742, 1.77", "2.55786, -59.6576, -29.1365, 2.36", "2.79321, -60.0632, -29.5714, 2.58", "3.49666, -61.3498, -30.9189, 0.74", "3.72414, -61.8034, -31.33, 0.74" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "4.23949, -40.7776, 0.00760949, 0.15", "5.86652, -55.6891, 0.00760949, 0.15", "7.49354, -70.6006, 0.00760949, 0.15" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-10.3221, 58.2558, 9.48446, 0.81", "-10.8161, 58.9835, 9.35729, 0.81", "-11.4391, 59.9607, 9.18117, 0.74", "-11.97, 60.8308, 9.03186, 0.74", "-12.0086, 60.8962, 9.01803, 0.74", "-12.711, 62.1155, 8.74501, 0.74", "-13.0459, 62.6968, 8.59511, 1.33", "-13.3697, 63.2835, 8.41309, 1.92", "-13.7139, 63.9199, 8.18921, 1.33", "-14.2133, 64.7926, 7.86965, 1.11", "-14.5945, 65.4156, 7.63308, 1.47", "-15.1212, 66.2058, 7.33348, 1.18", "-15.152, 66.2499, 7.3166, 1.18", "-15.6314, 66.9394, 7.05614, 0.66", "-16.0591, 67.5984, 6.81146, 0.66", "-16.5809, 68.4832, 6.5147, 1.47", "-16.8904, 69.0893, 6.3519, 1.99", "-17.2479, 69.8871, 6.18776, 1.99", "-17.8138, 71.3173, 5.9516, 0.66", "-18.0968, 72.1663, 5.84615, 0.52", "-18.2645, 72.7717, 5.79856, 0.59", "-18.5819, 73.9799, 5.80356, 0.74", "-18.6028, 74.0578, 5.80774, 0.74", "-18.8265, 74.7686, 5.88199, 1.33", "-19.0294, 75.3335, 5.96483, 1.62", "-19.3778, 76.1408, 6.08193, 1.18", "-19.8415, 77.0598, 6.15441, 0.66", "-20.2306, 77.7617, 6.16903, 0.66", "-20.9778, 79.0189, 6.16652, 2.28", "-21.3927, 79.6506, 6.15188, 2.73", "-21.7638, 80.1837, 6.12709, 2.95", "-22.74, 81.5417, 6.02782, 1.03", "-22.7803, 81.5965, 6.02244, 1.03", "-23.1828, 82.1445, 5.9741, 0.81", "-23.6522, 82.7809, 5.929, 0.44", "-24.1316, 83.4498, 5.89765, 0.44", "-24.6855, 84.2413, 5.88134, 0.44", "-25.2259, 84.9993, 5.88832, 1.11", "-25.6277, 85.5594, 5.89286, 1.69", "-26.1631, 86.3153, 5.89796, 2.21", "-26.4843, 86.7685, 5.90035, 2.5", "-27.2967, 87.8602, 5.90507, 1.25", "-28.0301, 88.8211, 5.90732, 0.44", "-28.6287, 89.5957, 5.9067, 0.44", "-29.1037, 90.2009, 5.90634, 1.03", "-29.6214, 90.8744, 5.90576, 1.33", "-29.7499, 91.0457, 5.90555, 1.33", "-30.0443, 91.4503, 5.9049, 1.47", "-30.5744, 92.172, 5.90384, 0.88", "-31.0411, 92.7782, 5.90332, 0.59", "-31.5326, 93.3765, 5.90335, 0.44", "-31.5917, 93.443, 5.90343, 0.44", "-32.3319, 94.197, 5.90561, 0.44", "-32.7315, 94.5417, 5.90768, 0.66", "-32.9099, 94.6782, 5.90886, 0.66", "-33.4569, 95.087, 5.9126, 0.66", "-33.9946, 95.5383, 5.92882, 0.66", "-34.4868, 96.0497, 5.95526, 0.37", "-34.8149, 96.5029, 5.97149, 0.37", "-35.2647, 97.2895, 5.98309, 0.66", "-35.5164, 97.8902, 5.96812, 0.96", "-35.7674, 98.7707, 5.92061, 0.29", "-35.9092, 99.4576, 5.87436, 0.44", "-36.0246, 100.186, 5.81784, 0.96", "-36.0419, 100.305, 5.8077, 0.96", "-36.2208, 101.39, 5.70182, 1.77", "-36.4462, 102.433, 5.59477, 2.95", "-36.5659, 102.947, 5.42701, 3.54", "-36.5793, 103.008, 5.39962, 3.54", "-36.7072, 103.666, 5.05624, 3.76", "-36.7169, 103.723, 5.02343, 3.76", "-36.8351, 104.52, 4.51169, 3.46", "-37.1584, 107.261, 2.67439, 0.81", "-37.1648, 107.326, 2.63365, 0.81", "-37.2213, 107.889, 2.32438, 0.81", "-37.228, 107.951, 2.29899, 0.81", "-37.3069, 108.732, 2.12802, 1.11", "-37.3616, 109.316, 2.1032, 1.25", "-37.4706, 110.403, 2.25094, 0.37", "-37.5588, 111.279, 2.3801, 0.29", "-37.705, 112.593, 2.52841, 0.29", "-37.8761, 114.03, 2.64949, 0.29", "-37.8862, 114.105, 2.65354, 0.29", "-38.0301, 115.054, 2.69308, 0.29", "-38.0465, 115.163, 2.69389, 0.29", "-38.1966, 116.301, 2.59736, 0.44", "-38.214, 116.397, 2.56361, 0.44", "-38.3767, 116.845, 2.29544, 0.44", "-42.7988, 125.015, 1.45168, 0.44", "-47.4104, 133.108, 0.813212, 0.44", "-51.7179, 141.266, -0.579203, 0.44", "-54.4859, 149.675, -3.4463, 0.44", "-57.4812, 157.413, -7.79293, 0.44", "-58.9754, 164.595, -13.6948, 0.44", "-60.7359, 170.523, -20.9177, 0.44", "-60.6654, 177.948, -26.6778, 0.44", "-60.3892, 185.674, -31.9744, 0.44", "-59.5953, 192.626, -38.3062, 0.44", "-57.3898, 200.358, -43.1248, 0.44" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-10.3221, 58.2558, 9.48446, 0.29", "-9.8533, 59.8201, 9.35864, 0.29", "-9.704, 60.4552, 9.33552, 0.44", "-9.60966, 61.0741, 9.33109, 0.44", "-9.53632, 61.985, 9.34384, 0.29", "-9.53504, 62.0376, 9.34511, 0.29", "-9.54672, 62.8281, 9.3678, 0.29", "-9.56326, 62.9556, 9.3823, 0.29", "-9.66059, 63.6125, 9.40707, 0.29", "-9.73969, 64.1601, 9.39023, 0.96", "-9.79276, 64.6445, 9.33207, 1.33", "-9.81263, 64.9354, 9.28597, 1.33", "-9.81966, 66.1881, 9.04723, 0.52", "-9.76513, 67.1678, 8.842, 0.29", "-9.75108, 67.2728, 8.8186, 0.29", "-9.60826, 68.0625, 8.64138, 0.81", "-9.5968, 68.1186, 8.62946, 0.81", "-9.48976, 68.6657, 8.527, 1.03", "-9.41984, 69.1366, 8.45882, 0.74", "-9.32546, 69.8835, 8.39653, 0.29", "-9.28112, 70.3634, 8.37294, 0.44", "-9.27204, 70.7347, 8.37221, 0.44", "-9.28049, 71.2273, 8.37267, 0.29", "-9.33706, 71.6867, 8.36768, 0.74", "-9.72718, 79.9835, 8.86021, 0.74" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "20.3607, 104.913, -0.95438, 0.37", "20.6979, 106.46, -1.65044, 0.37", "20.8567, 106.981, -1.95905, 0.37", "20.9925, 107.394, -2.21709, 0.96", "21.0116, 107.444, -2.24614, 0.96", "21.3138, 108.199, -2.67231, 0.96", "21.85, 109.605, -3.42942, 0.37", "22.1415, 110.494, -3.91406, 0.59", "22.3719, 111.232, -4.35377, 0.37", "22.6512, 112.231, -4.9677, 0.37", "22.6701, 112.314, -5.01799, 0.37", "22.7589, 112.893, -5.40304, 0.29", "22.8472, 114.009, -6.16106, 1.47", "22.8749, 114.92, -6.78966, 1.92", "22.8774, 115.259, -7.03285, 2.21", "22.8815, 115.6, -7.29306, 2.21", "22.9707, 117.44, -8.6968, 0.37", "23.0508, 118.414, -9.42968, 0.96", "23.101, 118.913, -9.78923, 1.62", "23.1615, 119.451, -10.1718, 1.84", "23.3425, 120.894, -11.2075, 0.29", "23.4585, 121.759, -11.8178, 1.03", "23.4988, 122.085, -12.0197, 1.4", "23.5188, 122.279, -12.1445, 1.4" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "20.3607, 104.913, -0.95438, 0.37", "21.5703, 106.872, -0.455604, 0.37", "22.2075, 107.902, -0.329311, 0.37", "22.8015, 108.905, -0.342834, 0.81", "22.8362, 108.961, -0.347934, 0.81", "23.1715, 109.488, -0.414407, 0.81", "23.7319, 110.375, -0.597022, 0.37", "24.2878, 111.191, -0.967119, 0.29", "24.7659, 111.88, -1.33339, 0.59", "25.2252, 112.538, -1.71933, 0.22", "25.2513, 112.58, -1.74338, 0.22", "25.7066, 113.459, -2.23136, 1.18", "25.8375, 113.798, -2.37887, 1.69", "25.9898, 114.436, -2.56002, 1.99", "26.0291, 114.822, -2.60104, 1.99", "25.9489, 115.698, -2.56114, 0.44", "25.8297, 116.271, -2.43251, 0.29", "25.2331, 117.718, -1.64834, 0.29", "25.204, 117.765, -1.61545, 0.29", "29.6333, 125.629, -1.07036, 0.29", "33.3513, 133.678, 0.618382, 0.29", "37.2569, 141.551, 2.7482, 0.29", "40.5784, 149.336, 5.95519, 0.29", "45.0801, 156.306, 9.74987, 0.29", "49.0773, 162.608, 15.0878, 0.29", "53.5164, 168.826, 20.1827, 0.29" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-17.6473, -117.761, -8.08075, 0.52", "-17.9051, -120.116, -7.15453, 0.52", "-17.9113, -121.04, -6.88724, 0.81", "-17.854, -121.855, -6.76566, 1.03", "-17.8445, -121.958, -6.76298, 1.03", "-17.7871, -122.863, -6.80383, 1.03", "-17.7711, -123.868, -6.88965, 0.52", "-17.7944, -124.755, -7.07459, 0.52", "-17.9468, -125.816, -7.28247, 0.52", "-18.1762, -126.687, -7.43982, 0.66", "-18.5192, -127.588, -7.52046, 0.66", "-18.8591, -128.254, -7.52897, 0.88", "-19.7916, -129.751, -7.32526, 1.03", "-20.4684, -130.699, -7.05444, 1.55", "-20.773, -131.114, -6.88991, 1.92", "-21.8402, -132.565, -6.21129, 1.92", "-22.5473, -133.57, -5.70668, 1.33", "-23.7042, -135.284, -4.83663, 0.59", "-24.5159, -136.535, -4.21953, 0.59", "-25.2862, -137.794, -3.70146, 0.59", "-25.3229, -137.857, -3.6813, 0.59", "-25.8196, -138.783, -3.51899, 1.33", "-26.3342, -139.909, -3.50615, 0.74", "-26.6774, -140.879, -3.6514, 0.74", "-27.143, -142.501, -3.97224, 0.74", "-27.1752, -142.621, -3.99755, 0.74", "-27.4875, -143.788, -4.21403, 1.18", "-27.9944, -145.58, -4.50321, 0.81", "-28.5572, -147.481, -4.69027, 0.74", "-29.2362, -149.614, -4.76452, 0.59", "-29.2652, -149.7, -4.75909, 0.59", "-29.7743, -151.108, -4.59803, 1.92", "-30.2445, -152.395, -4.34406, 2.21", "-30.7846, -153.923, -3.94444, 2.21", "-31.31, -155.51, -3.47635, 0.74", "-31.8056, -157.374, -2.88427, 0.74", "-32.0448, -158.789, -2.43035, 0.66", "-32.0694, -160.461, -1.91041, 0.44", "-31.8791, -161.563, -1.58454, 1.03", "-31.8248, -161.696, -1.55425, 1.03", "-31.4093, -162.353, -1.47101, 1.03", "-30.7376, -163.266, -1.45901, 1.03", "-30.1118, -164.159, -1.49143, 1.4", "-29.8133, -164.722, -1.54127, 1.4", "-29.3607, -166.118, -1.6344, 0.81", "-29.1258, -167.605, -1.62903, 0.81", "-29.1306, -168.665, -1.56751, 1.03", "-29.2653, -169.622, -1.47165, 1.11", "-29.5371, -170.756, -1.31154, 1.18", "-29.9694, -172.149, -1.07948, 0.37", "-30.5887, -173.841, -0.851205, 0.37", "-30.9507, -174.915, -0.812447, 1.55", "-31.1635, -175.793, -0.887592, 1.84", "-31.2709, -176.579, -1.03788, 2.14", "-31.2832, -177.177, -1.22218, 2.14", "-31.0188, -178.82, -1.98896, 1.69", "-30.2893, -180.662, -3.09518, 0.52", "-29.8868, -181.324, -3.53712, 0.88", "-29.835, -181.387, -3.58343, 0.88", "-29.6181, -181.594, -3.75785, 0.88", "-28.4024, -182.58, -4.61891, 0.52", "-27.2744, -183.443, -5.38412, 1.03", "-27.2108, -183.496, -5.42936, 1.03", "-26.2205, -184.45, -6.19166, 1.33", "-25.2252, -185.557, -6.99302, 1.25", "-24.8708, -186.036, -7.30067, 1.03", "-23.9248, -187.829, -8.20127, 0.59", "-23.465, -189.046, -8.68093, 0.59", "-23.2255, -189.922, -8.94372, 1.18", "-23.1629, -190.285, -9.01591, 1.84", "-23.09, -191.082, -9.1133, 1.84", "-23.0413, -192.849, -9.2643, 0.74", "-22.9798, -194.108, -9.516, 1.03", "-22.864, -195.069, -9.8567, 1.11", "-22.7691, -195.565, -10.0938, 1.33", "-22.5081, -196.53, -10.7271, 0.81", "-22.2779, -197.154, -11.2575, 0.44", "-21.0053, -200.092, -14.4147, 0.44", "-20.7693, -200.62, -15.0776, 0.44", "-20.7314, -200.73, -15.2535, 0.44", "-20.5992, -201.618, -16.8518, 0.44", "-20.6046, -201.655, -16.9202, 0.44", "-20.7959, -202.138, -17.7364, 0.74", "-21.1322, -202.639, -18.4627, 1.11", "-21.9016, -204.189, -20.7934, 0.44", "-22.0785, -204.763, -21.6636, 0.44", "-22.2569, -205.988, -23.4146, 1.84", "-22.259, -206.509, -24.1424, 2.5", "-22.2461, -206.655, -24.3395, 2.5", "-21.9818, -208.783, -26.9704, 0.59", "-21.9046, -209.53, -27.8328, 0.59", "-21.8484, -210.182, -28.6912, 0.59", "-21.8454, -210.237, -28.7673, 0.59", "-21.8476, -211.399, -30.3088, 1.77", "-21.9109, -212.129, -31.2076, 2.06", "-22.2252, -213.595, -32.8414, 1.99", "-22.7157, -215.545, -34.9722, 0.81", "-22.7301, -215.606, -35.0417, 0.81", "-22.8672, -216.307, -35.8015, 0.66", "-22.9739, -217.276, -36.7952, 0.52", "-23.0373, -217.991, -37.5001, 1.84", "-23.1162, -218.931, -38.3005, 2.28", "-23.2403, -221.239, -40.1777, 0.66", "-23.1978, -222.04, -40.8328, 0.66", "-22.9852, -223.408, -41.9325, 1.77", "-22.9638, -223.49, -41.9935, 1.77", "-22.6889, -224.324, -42.5516, 2.21", "-22.2538, -225.504, -43.1978, 2.21", "-21.6713, -227.087, -43.8989, 0.74", "-21.4248, -227.846, -44.2143, 0.37", "-21.2457, -228.448, -44.4428, 0.29", "-20.9399, -229.475, -44.8183, 1.11", "-20.7178, -230.235, -45.1006, 1.4", "-20.3747, -231.504, -45.5271, 0.59", "-20.1324, -232.416, -45.8279, 0.29", "-19.876, -233.405, -46.1598, 0.66", "-19.7243, -234.015, -46.3873, 0.88", "-19.4383, -235.341, -46.8939, 0.29", "-19.2824, -236.175, -47.2091, 0.29", "-19.1824, -236.826, -47.4405, 0.96", "-19.0965, -237.517, -47.6785, 0.96", "-18.8711, -239.028, -48.2051, 0.29", "-18.6966, -239.776, -48.4998, 0.29", "-18.3845, -240.541, -48.9104, 0.66", "-18.3499, -240.606, -48.9868, 0.66", "-18.1352, -240.999, -49.549, 0.66", "-17.6827, -241.893, -51.0777, 0.44", "-17.37, -242.609, -52.3855, 1.77", "-16.9613, -243.656, -54.4001, 2.58", "-15.8976, -246.805, -60.5846, 0.44", "-15.8029, -247.144, -61.2399, 0.44", "-15.4696, -248.643, -64.2453, 0.88", "-15.3753, -249.357, -65.7202, 1.77", "-15.3739, -249.398, -65.8055, 1.77", "-15.3991, -249.663, -66.3064, 2.14", "-15.497, -250.193, -66.9798, 2.43" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-17.6473, -117.761, -8.08075, 0.59", "-16.7565, -118.399, -7.20001, 0.59", "-15.6007, -119.035, -6.23629, 0.52", "-14.8535, -119.352, -5.74495, 0.52", "-13.7357, -119.628, -5.2137, 0.37", "-13.5225, -119.661, -5.13369, 0.37", "-12.5909, -119.753, -4.82798, 0.37", "-11.7864, -119.749, -4.64825, 0.37", "-10.7403, -119.638, -4.50214, 0.37", "-9.10861, -119.379, -4.35247, 0.22", "-8.63209, -119.302, -4.34532, 0.29", "-7.72343, -119.149, -4.35066, 0.37" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "3.72414, -61.8034, -31.33, 0.37", "3.92082, -62.3318, -31.5975, 0.37", "4.19661, -63.0527, -31.8946, 0.29", "4.47493, -63.8043, -32.1646, 1.25", "4.60416, -64.1553, -32.28, 1.69", "4.6222, -64.2048, -32.2952, 1.69", "4.97062, -65.175, -32.5668, 0.29", "5.22791, -65.8827, -32.7226, 0.29", "5.50705, -66.6535, -32.8785, 1.77", "5.65469, -67.0701, -32.9481, 2.43", "5.76022, -67.3741, -32.999, 2.43", "6.17934, -68.6116, -33.2052, 0.22", "6.37553, -69.2326, -33.3072, 0.22" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "3.72414, -61.8034, -31.33, 1.77", "2.29149, -63.1773, -34.7345, 1.77", "0.866518, -64.7164, -38.2952, 1.03", "-1.34158, -67.4048, -43.994, 2.14", "-2.24139, -68.5484, -46.283, 0.52", "-2.60347, -69.0199, -47.1968, 1.92", "-2.82175, -69.3111, -47.743, 2.36", "-4.49875, -71.9247, -52.1093, 0.29", "-4.91511, -72.5948, -53.1245, 0.29", "-5.82883, -74.1302, -55.1011, 0.29", "-5.85491, -74.1682, -55.1505, 0.29", "-6.05316, -74.4346, -55.4987, 1.69", "-6.31251, -74.7879, -55.9557, 1.69", "-7.98948, -77.2252, -59.2218, 0.22", "-8.21654, -77.574, -59.7256, 0.22", "-8.23562, -77.6093, -59.7801, 0.22", "-8.43569, -78.0314, -60.4515, 1.03", "-9.05585, -79.6302, -63.0292, 0.29", "-9.49308, -81.2511, -65.5923, 1.99", "-9.5296, -81.5226, -66.0083, 2.14", "-9.73063, -83.4083, -68.9696, 0.37", "-9.75369, -83.7213, -69.4699, 0.37", "-9.75324, -84.1412, -70.1348, 0.88", "-9.68328, -84.6216, -70.841, 1.03", "-9.40313, -85.8644, -72.4668, 0.29", "-9.39026, -85.9223, -72.5372, 0.29", "-9.11263, -87.4119, -74.2307, 0.29", "-9.03763, -88.1315, -75.0714, 1.99", "-9.0215, -88.3673, -75.3475, 1.99", "-8.92851, -90.1425, -77.3595, 0.29", "-8.92024, -90.5896, -77.8251, 0.59", "-8.90886, -92.3359, -79.5654, 0.44", "-8.91812, -93.3712, -80.5603, 0.29", "-8.92976, -93.8014, -80.9724, 1.11", "-8.93048, -94.1587, -81.3124, 1.33", "-8.91485, -96.6242, -83.8375, 0.22", "-8.90966, -97.0648, -84.3427, 0.52", "-8.87833, -98.3127, -85.9421, 0.29", "-8.86529, -98.6516, -86.4168, 0.88", "-8.8943, -99.0664, -87.1012, 0.88", "-9.10215, -100.655, -89.9715, 0.29", "-9.29953, -101.867, -92.326, 0.29", "-9.50876, -102.871, -94.3169, 1.77", "-9.57278, -103.132, -94.8455, 1.77", "-10.1519, -105.213, -99.0624, 0.52", "-10.2706, -105.598, -99.8097, 0.44", "-10.371, -105.959, -100.469, 0.74", "-10.3785, -105.993, -100.527, 0.74", "-10.5428, -107.181, -102.444, 0.29", "-10.5429, -107.225, -102.512, 0.29", "-10.3027, -107.951, -103.465, 1.18", "-10.19, -108.215, -103.808, 1.18", "-9.63147, -109.341, -105.211, 0.22", "-9.60737, -109.382, -105.258, 0.22", "-8.99261, -110.257, -106.227, 0.81", "-8.23814, -111.204, -107.346, 0.22", "-7.90451, -111.563, -107.798, 0.81", "-7.86405, -111.601, -107.858, 0.81", "-7.67213, -111.747, -108.192, 0.81", "-7.03509, -112.199, -109.968, 0.22", "-6.89438, -112.288, -110.478, 0.44", "-6.87537, -112.299, -110.558, 0.44", "-6.30882, -112.634, -112.956, 1.33", "-5.79581, -112.951, -115.098, 1.33", "-4.7952, -113.58, -119.31, 0.29", "-4.77094, -113.597, -119.414, 0.29", "-4.61179, -113.723, -120.113, 0.29", "-4.37328, -113.909, -120.999, 1.03", "-4.29141, -113.97, -121.244, 1.03", "-4.25926, -113.991, -121.317, 1.03", "-2.98266, -114.708, -123.615, 0.22", "-2.94381, -114.727, -123.685, 0.22", "-2.02298, -115.106, -125.436, 0.29", "-1.00365, -115.308, -127.593, 0.22", "-0.799053, -115.319, -128.066, 0.66", "-0.767155, -115.315, -128.143, 0.66", "-0.57829, -115.26, -128.621, 0.66", "-0.0427322, -115.048, -130.093, 0.15", "0.894851, -114.455, -133.123, 0.96", "1.39598, -114.063, -134.847, 1.4", "1.57697, -113.911, -135.526, 1.4", "1.66134, -113.836, -135.861, 1.4" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-57.3898, 200.358, -43.1248, 0.44", "-59.9453, 208.504, -46.1755, 0.44" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-57.3898, 200.358, -43.1248, 0.44", "-59.5492, 209.803, -46.5756, 0.44" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "23.5188, 122.279, -12.1445, 0.29", "24.4388, 124.666, -12.6092, 0.29", "24.8522, 125.738, -12.818, 0.29", "25.1984, 126.636, -12.9929, 1.03", "25.2258, 126.707, -13.0067, 1.03", "25.4253, 127.224, -13.1075, 1.4" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "23.5188, 122.279, -12.1445, 0.88", "23.6164, 123.715, -12.5083, 0.88", "23.8246, 124.804, -12.81, 0.29", "24.2521, 126.042, -13.2824, 0.29", "24.5768, 126.797, -13.5857, 0.44", "25.4876, 128.738, -14.3643, 1.25", "25.872, 129.517, -14.6699, 1.99", "26.5258, 130.617, -15.1082, 2.21", "28.1086, 132.999, -16.0691, 0.22", "28.7775, 133.991, -16.5144, 0.22", "29.1155, 134.482, -16.7345, 0.96", "29.4743, 135.035, -16.978, 1.77", "29.8614, 135.725, -17.2848, 2.21", "30.1858, 136.431, -17.6296, 2.21", "31.2126, 139.12, -18.9929, 0.22", "31.6095, 140.255, -19.6053, 0.22", "32.0602, 141.583, -20.3114, 1.18", "32.2229, 142.09, -20.5763, 1.33", "32.6552, 143.607, -21.3052, 0.81", "32.9791, 144.791, -21.8131, 0.22", "33.1913, 145.557, -22.0653, 0.29", "33.5691, 146.905, -22.4684, 0.22", "33.6322, 147.078, -22.5224, 0.22", "34.2323, 148.382, -23.0134, 0.22", "34.9403, 149.732, -23.5617, 1.33", "35.2755, 150.324, -23.8904, 1.69", "35.448, 150.652, -24.0941, 1.69", "36.4207, 152.505, -25.3074, 0.29", "37.0069, 153.554, -25.9762, 1.47", "37.2369, 153.933, -26.2119, 1.47", "37.9567, 155.06, -26.9001, 0.66", "38.9026, 156.516, -27.7308, 0.29", "39.3555, 157.244, -28.1098, 0.29", "39.9058, 158.177, -28.5027, 0.88", "40.2334, 158.711, -28.7367, 1.25", "41.0892, 160.088, -29.391, 0.29", "41.5883, 160.915, -29.7981, 0.22", "41.9724, 161.658, -30.2398, 0.66", "42.2044, 162.286, -30.6317, 0.81", "42.467, 163.46, -31.3229, 0.22", "42.5784, 164.191, -31.7141, 0.22", "42.6379, 164.879, -32.0977, 0.74", "42.6863, 165.935, -32.8419, 1.4", "42.7209, 167.42, -33.9963, 0.29", "42.7249, 168.44, -34.9275, 0.81", "42.727, 168.759, -35.2849, 0.96", "42.7471, 170.162, -37.383, 0.29", "42.7293, 171.223, -39.2251, 0.29", "42.7036, 171.609, -39.9376, 1.33", "42.5846, 172.473, -41.6825, 2.28", "42.3954, 173.486, -43.8636, 2.28", "41.9208, 175.265, -48.1323, 0.81", "41.841, 175.476, -48.6749, 0.88", "41.6314, 175.893, -49.7982, 0.29", "41.2761, 176.432, -51.3462, 0.37", "41.1124, 176.646, -51.929, 0.37", "40.4063, 177.591, -54.1417, 0.37", "40.1352, 178.029, -54.9999, 0.37", "39.6007, 179.236, -57.0512, 1.55", "39.4225, 179.835, -57.9129, 1.92", "39.1533, 181.81, -60.0238, 0.44", "39.1392, 182.761, -60.7835, 0.29", "39.2195, 183.852, -61.4087, 0.88", "39.3178, 184.441, -61.6871, 0.96", "39.4745, 185.077, -61.9142, 0.96", "40.1165, 187.169, -62.5206, 0.37", "40.7301, 188.915, -62.9157, 0.29", "41.1507, 189.93, -63.3295, 0.29", "41.8131, 191.43, -64.1357, 1.33", "42.1198, 192.087, -64.5896, 2.14", "42.3514, 192.574, -64.9908, 2.36", "42.5234, 192.931, -65.3692, 2.36", "44.0286, 195.992, -69.2357, 0.29", "44.3517, 196.669, -70.1926, 0.88", "44.659, 197.446, -71.3225, 1.4", "44.7977, 197.892, -71.966, 1.55", "45.1737, 199.436, -74.1053, 0.37", "45.2755, 200.002, -74.814, 0.37", "45.3908, 201.264, -76.1555, 1.18", "45.4776, 202.134, -77.0932, 1.47", "45.6235, 204.03, -78.9726, 0.29", "45.6392, 204.553, -79.4361, 0.44", "45.6234, 205.361, -80.0314, 0.29", "45.5271, 207.175, -81.258, 1.77", "45.4626, 208.181, -81.8432, 2.06", "45.4048, 209.143, -82.3024, 1.92", "45.217, 211.277, -82.9997, 0.22", "45.1265, 212.288, -83.2472, 0.22", "45.116, 212.397, -83.2602, 0.22", "45.0606, 213.258, -83.1844, 0.22", "45.0158, 214.631, -82.9261, 0.96", "45.0326, 215.055, -82.8232, 1.33", "45.0709, 215.487, -82.7049, 1.33", "45.1982, 216.746, -82.3784, 0.44", "45.4912, 219.077, -81.8415, 0.22", "45.5073, 219.183, -81.819, 0.22", "45.8148, 220.91, -81.3705, 0.22", "45.988, 221.841, -81.0781, 1.03", "46.1031, 222.4, -80.881, 1.62", "46.3125, 223.284, -80.5314, 1.62", "46.3643, 223.503, -80.4446, 1.62", "47.0753, 226.434, -79.2575, 0.22", "47.2312, 227.106, -78.9743, 0.66", "47.3886, 227.872, -78.6646, 0.66", "47.4771, 228.501, -78.4533, 0.59", "47.5562, 229.656, -78.1774, 0.22", "47.5647, 230.174, -78.112, 0.66", "47.5206, 230.745, -78.1182, 0.88", "47.4092, 231.704, -78.1391, 0.44", "47.1633, 233.254, -78.1939, 0.22", "46.9682, 234.371, -78.243, 0.81", "46.8369, 235.108, -78.2748, 1.18", "46.4667, 237.204, -78.3654, 0.22", "46.4531, 237.298, -78.3797, 0.22", "46.2487, 238.893, -78.7554, 0.22", "46.1644, 239.889, -79.0499, 1.03", "46.141, 240.529, -79.2629, 1.33", "46.1493, 241.172, -79.4968, 1.33", "46.4834, 244.726, -80.8558, 0.22", "46.4943, 244.816, -80.8918, 0.22", "46.8381, 246.804, -81.7664, 0.22", "46.98, 247.487, -82.0813, 0.59", "47.0016, 247.573, -82.1205, 0.59", "47.3651, 248.77, -82.5845, 0.74" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-15.497, -250.193, -66.9798, 0.37", "-13.8723, -251.731, -66.6649, 0.37", "-12.8487, -252.733, -66.4695, 0.29", "-11.6065, -254.013, -66.2261, 0.29", "-10.7378, -254.974, -66.0499, 0.88", "-10.4535, -255.31, -66.0056, 1.11", "-10.3925, -255.387, -65.998, 1.11", "-10.1047, -255.85, -65.9876, 1.11", "-9.57145, -256.918, -66.0936, 0.29", "-9.24902, -257.705, -66.247, 0.29", "-8.91091, -258.638, -66.4585, 0.74", "-8.76858, -259.026, -66.5698, 0.88", "-8.53915, -259.651, -66.7683, 0.59", "-8.04635, -260.99, -67.2246, 0.29", "-7.98408, -261.141, -67.2795, 0.29", "-7.61031, -261.95, -67.5392, 0.29", "-7.16644, -262.847, -67.7625, 1.11", "-6.87104, -263.361, -67.9314, 1.4", "-6.55658, -263.88, -68.0987, 1.4", "-5.52154, -265.499, -68.5706, 0.22", "-4.9201, -266.428, -68.8596, 0.22", "-4.49639, -267.074, -69.0807, 0.81", "-3.24785, -268.922, -69.7099, 0.81" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-15.497, -250.193, -66.9798, 0.96", "-15.3726, -251.067, -70.5663, 0.96", "-15.0731, -252.435, -75.5463, 0.96", "-14.8927, -253.143, -77.9588, 0.66", "-14.7516, -253.642, -79.4975, 1.4", "-14.7071, -253.783, -79.8979, 1.4", "-14.2889, -255.007, -83.1937, 0.44", "-14.0698, -255.417, -84.137, 0.37", "-14.0475, -255.456, -84.2031, 0.37", "-13.3794, -256.581, -85.9557, 0.29", "-13.0186, -257.101, -86.7434, 1.47", "-12.9377, -257.21, -86.9117, 1.77", "-12.6549, -257.543, -87.4566, 1.99", "-12.1221, -258.121, -88.5308, 1.99", "-11.1504, -259.115, -90.4485, 0.44", "-10.6213, -259.608, -91.5294, 0.81", "-9.95721, -260.166, -93.0548, 0.52", "-9.00315, -260.959, -95.3188, 0.44", "-8.5139, -261.355, -96.5275, 1.11", "-8.29023, -261.532, -97.096, 1.11", "-7.08002, -262.4, -100.244, 1.4", "-5.76423, -263.263, -103.9, 1.55" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_9", "dend_0", "dend_15", "dend_10", "dend_4", "dend_1", "dend_17", "dend_16", "dend_12", "dend_11", "dend_6", "dend_5", "dend_3", "dend_2", "dend_19", "dend_18", "dend_14", "dend_13", "dend_8", "dend_7" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_9", "dend_0", "dend_15", "dend_10", "dend_4", "dend_1", "dend_17", "dend_16", "dend_12", "dend_11", "dend_6", "dend_5", "dend_3", "dend_2", "dend_19", "dend_18", "dend_14", "dend_13", "dend_8", "dend_7" ]
  }, {
    "name" : "ModelViewParmSubset_5",
    "groups" : [ ],
    "sections" : [ "dend_9", "dend_0", "axon_0", "dend_15", "dend_10", "dend_4", "dend_1", "axon_1", "dend_17", "dend_16", "dend_12", "dend_11", "dend_6", "dend_5", "dend_3", "dend_2", "dend_19", "dend_18", "dend_14", "dend_13", "dend_8", "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_19", "dend_18", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.993125",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.005611",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.068459995",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.517764",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "6.3E-5",
    "erev" : "-64.6017"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "3.45E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.077616",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.002099",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "1.13999995E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.26087198",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "2.0E-5",
    "erev" : "-69.78141"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.395881",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009986",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "5.0100003E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.009728",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "2.7999999E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cACint209_L4_BTC_8af90b418f_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_9, id: dend_9, parent: soma_0
create dend_9
public dend_9
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_15, id: dend_15, parent: dend_9
create dend_15
public dend_15
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10
// Section: dend_4, id: dend_4, parent: dend_0
create dend_4
public dend_4
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_17, id: dend_17, parent: dend_15
create dend_17
public dend_17
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_12, id: dend_12, parent: dend_10
create dend_12
public dend_12
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_6, id: dend_6, parent: dend_4
create dend_6
public dend_6
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5
// Section: dend_3, id: dend_3, parent: dend_1
create dend_3
public dend_3
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_14, id: dend_14, parent: dend_12
create dend_14
public dend_14
// Section: dend_13, id: dend_13, parent: dend_12
create dend_13
public dend_13
// Section: dend_8, id: dend_8, parent: dend_6
create dend_8
public dend_8
// Section: dend_7, id: dend_7, parent: dend_6
create dend_7
public dend_7

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
objref ModelViewParmSubset_4
// Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_9, dend_0, axon_0, dend_15, dend_10, dend_4, dend_1, axon_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
objref ModelViewParmSubset_5
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_22
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_19, dend_18, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_9(0), soma_0(0.49999821452163534)
    connect dend_0(0), soma_0(0.49999821452163534)
    connect axon_0(0), soma_0(1.0)
    connect dend_15(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)
    connect dend_4(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_17(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_12(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_6(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)
    connect dend_3(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_14(0), dend_12(1.0)
    connect dend_13(0), dend_12(1.0)
    connect dend_8(0), dend_6(1.0)
    connect dend_7(0), dend_6(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -1.49721, 11.7986, 0.0301706, 2.4623 ) }
    soma_0 { pt3dadd( -1.37308, 10.661, 0.0290426, 4.20373 ) }
    soma_0 { pt3dadd( -1.24895, 9.52332, 0.0279145, 5.59272 ) }
    soma_0 { pt3dadd( -1.12482, 8.38566, 0.0267864, 6.71614 ) }
    soma_0 { pt3dadd( -1.00068, 7.248, 0.0256584, 7.74544 ) }
    soma_0 { pt3dadd( -0.87655, 6.11034, 0.0245303, 8.57739 ) }
    soma_0 { pt3dadd( -0.752417, 4.97268, 0.0234023, 9.13171 ) }
    soma_0 { pt3dadd( -0.628284, 3.83502, 0.0222742, 9.51195 ) }
    soma_0 { pt3dadd( -0.504152, 2.69736, 0.0211462, 9.92921 ) }
    soma_0 { pt3dadd( -0.380019, 1.5597, 0.0200181, 10.275 ) }
    soma_0 { pt3dadd( -0.255886, 0.422041, 0.01889, 10.4231 ) }
    soma_0 { pt3dadd( -0.131754, -0.715618, 0.017762, 10.4046 ) }
    soma_0 { pt3dadd( -0.00762106, -1.85328, 0.0166339, 10.4069 ) }
    soma_0 { pt3dadd( 0.116512, -2.99094, 0.0155059, 10.1383 ) }
    soma_0 { pt3dadd( 0.240644, -4.1286, 0.0143778, 9.53645 ) }
    soma_0 { pt3dadd( 0.364777, -5.26626, 0.0132498, 8.49552 ) }
    soma_0 { pt3dadd( 0.48891, -6.40392, 0.0121217, 7.50349 ) }
    soma_0 { pt3dadd( 0.613042, -7.54158, 0.0109937, 6.64245 ) }
    soma_0 { pt3dadd( 0.737175, -8.67924, 0.0098656, 6.01482 ) }
    soma_0 { pt3dadd( 0.861308, -9.8169, 0.00873754, 4.86867 ) }
    soma_0 { pt3dadd( 0.98544, -10.9546, 0.00760949, 2.96361 ) }
    // Section: dend_9, id: dend_9, parent: soma_0 (entry count 21/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -1.78536, 10.9696, 1.5043, 2.36 ) }
    dend_9 { pt3dadd( -1.78536, 10.9696, 1.5043, 2.36 ) }
    dend_9 { pt3dadd( -1.94616, 11.8724, 1.74795, 2.06 ) }
    dend_9 { pt3dadd( -2.13473, 12.8182, 2.03478, 2.06 ) }
    dend_9 { pt3dadd( -2.15614, 12.9073, 2.06293, 2.06 ) }
    dend_9 { pt3dadd( -2.42867, 13.9434, 2.39189, 2.21 ) }
    dend_9 { pt3dadd( -2.85052, 15.3886, 2.92732, 2.21 ) }
    dend_9 { pt3dadd( -3.17983, 16.3398, 3.32047, 2.21 ) }
    dend_9 { pt3dadd( -3.19926, 16.3889, 3.34432, 2.21 ) }
    dend_9 { pt3dadd( -3.59417, 17.3163, 3.83126, 2.21 ) }
    dend_9 { pt3dadd( -3.77695, 17.7278, 4.05595, 2.36 ) }
    dend_9 { pt3dadd( -4.34062, 18.9176, 4.75597, 2.43 ) }
    dend_9 { pt3dadd( -4.70148, 19.6338, 5.16563, 2.65 ) }
    dend_9 { pt3dadd( -5.25571, 20.753, 5.83295, 2.65 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 35/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 0.094648, -9.74991, 0.0043065, 4.86 ) }
    dend_0 { pt3dadd( 0.094648, -9.74991, 0.0043065, 4.86 ) }
    dend_0 { pt3dadd( -0.3182, -11.0114, -0.0369949, 4.57 ) }
    dend_0 { pt3dadd( -0.775883, -12.3858, -0.0915634, 4.2 ) }
    dend_0 { pt3dadd( -1.59306, -14.8524, -0.196828, 2.87 ) }
    dend_0 { pt3dadd( -2.25019, -16.9478, -0.310233, 2.58 ) }
    dend_0 { pt3dadd( -2.96702, -19.3303, -0.452117, 2.5 ) }
    dend_0 { pt3dadd( -3.46736, -21.1149, -0.541568, 2.58 ) }
    dend_0 { pt3dadd( -3.48346, -21.1792, -0.544251, 2.58 ) }
    dend_0 { pt3dadd( -3.65011, -22.0425, -0.56997, 2.73 ) }
    dend_0 { pt3dadd( -3.89727, -24.0903, -0.599154, 2.73 ) }
    dend_0 { pt3dadd( -3.94993, -25.4502, -0.560713, 2.36 ) }
    dend_0 { pt3dadd( -3.9164, -27.1354, -0.445892, 2.65 ) }
    dend_0 { pt3dadd( -3.83181, -28.618, -0.312778, 2.87 ) }
    dend_0 { pt3dadd( -3.72291, -30.0565, -0.17661, 3.09 ) }
    dend_0 { pt3dadd( -3.58084, -31.3904, -0.045477, 3.09 ) }
    dend_0 { pt3dadd( -3.33678, -33.1452, 0.134756, 3.32 ) }
    dend_0 { pt3dadd( -3.20093, -34.0089, 0.217774, 3.02 ) }
    dend_0 { pt3dadd( -2.90971, -35.7857, 0.357116, 2.43 ) }
    dend_0 { pt3dadd( -2.56572, -37.8628, 0.51854, 2.36 ) }
    dend_0 { pt3dadd( -2.35367, -39.2211, 0.610913, 2.36 ) }
    dend_0 { pt3dadd( -2.23439, -39.902, 0.64213, 2.36 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 57/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 0.98544, -10.9546, 0.00760949, 0.674355 ) }
    axon_0 { pt3dadd( 2.61247, -25.8661, 0.00760949, 0.674355 ) }
    axon_0 { pt3dadd( 4.23949, -40.7776, 0.00760949, 0.674355 ) }
    // Section: dend_15, id: dend_15, parent: dend_9 (entry count 60/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -5.25571, 20.753, 5.83295, 1.4 ) }
    dend_15 { pt3dadd( -5.89145, 22.0421, 6.04766, 1.4 ) }
    dend_15 { pt3dadd( -6.41473, 23.1631, 6.21634, 1.18 ) }
    dend_15 { pt3dadd( -6.76305, 23.9644, 6.32023, 1.18 ) }
    dend_15 { pt3dadd( -7.11622, 24.8124, 6.41985, 1.18 ) }
    dend_15 { pt3dadd( -7.43955, 25.6268, 6.50283, 1.62 ) }
    dend_15 { pt3dadd( -7.63483, 26.1488, 6.56554, 1.99 ) }
    dend_15 { pt3dadd( -7.65443, 26.2155, 6.57311, 1.99 ) }
    dend_15 { pt3dadd( -7.85563, 27.0516, 6.6504, 2.06 ) }
    dend_15 { pt3dadd( -7.87906, 27.1804, 6.66124, 2.06 ) }
    dend_15 { pt3dadd( -8.00115, 28.1586, 6.72923, 1.62 ) }
    dend_15 { pt3dadd( -8.10586, 29.452, 6.83913, 1.4 ) }
    dend_15 { pt3dadd( -8.11113, 29.546, 6.84775, 1.4 ) }
    dend_15 { pt3dadd( -8.14629, 30.5938, 6.9436, 1.47 ) }
    dend_15 { pt3dadd( -8.15522, 31.5177, 7.02687, 1.77 ) }
    dend_15 { pt3dadd( -8.15291, 32.3245, 7.08899, 1.92 ) }
    dend_15 { pt3dadd( -8.13185, 33.4558, 7.15262, 1.11 ) }
    dend_15 { pt3dadd( -8.13081, 33.7176, 7.15971, 1.11 ) }
    dend_15 { pt3dadd( -8.15132, 34.2237, 7.17662, 1.11 ) }
    dend_15 { pt3dadd( -8.16911, 34.4072, 7.18438, 1.11 ) }
    dend_15 { pt3dadd( -8.34139, 35.5433, 7.23745, 0.96 ) }
    dend_15 { pt3dadd( -8.49904, 36.2794, 7.24613, 0.96 ) }
    dend_15 { pt3dadd( -8.69464, 36.9986, 7.22801, 1.55 ) }
    dend_15 { pt3dadd( -8.89261, 37.6518, 7.19637, 2.36 ) }
    dend_15 { pt3dadd( -9.07038, 38.2496, 7.15706, 2.5 ) }
    dend_15 { pt3dadd( -9.20704, 38.7198, 7.12002, 2.8 ) }
    dend_15 { pt3dadd( -9.48777, 39.719, 7.03012, 2.43 ) }
    dend_15 { pt3dadd( -9.70814, 40.5627, 6.94687, 1.99 ) }
    dend_15 { pt3dadd( -10.0088, 42.0637, 6.83334, 1.4 ) }
    dend_15 { pt3dadd( -10.1039, 42.8478, 6.79208, 1.4 ) }
    dend_15 { pt3dadd( -10.1122, 43.0426, 6.78996, 1.4 ) }
    dend_15 { pt3dadd( -10.0759, 43.9812, 6.81311, 1.62 ) }
    dend_15 { pt3dadd( -10.0691, 44.0422, 6.81835, 1.62 ) }
    dend_15 { pt3dadd( -9.85806, 45.4221, 6.99652, 1.03 ) }
    dend_15 { pt3dadd( -9.67088, 46.4792, 7.20061, 1.03 ) }
    dend_15 { pt3dadd( -9.51847, 47.4048, 7.41724, 1.47 ) }
    dend_15 { pt3dadd( -9.34091, 48.5477, 7.70735, 1.69 ) }
    dend_15 { pt3dadd( -9.16002, 49.9032, 8.06868, 1.69 ) }
    dend_15 { pt3dadd( -9.08075, 50.8591, 8.31965, 2.14 ) }
    dend_15 { pt3dadd( -9.06378, 51.8986, 8.57992, 2.8 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_15 { pt3dadd( -9.10224, 52.8451, 8.81538, 3.24 ) }
    dend_15 { pt3dadd( -9.16119, 53.4559, 8.94999, 3.39 ) }
    dend_15 { pt3dadd( -9.30537, 54.3665, 9.12641, 2.21 ) }
    dend_15 { pt3dadd( -9.53635, 55.5025, 9.30461, 1.33 ) }
    dend_15 { pt3dadd( -9.7922, 56.5258, 9.43181, 1.18 ) }
    dend_15 { pt3dadd( -9.82362, 56.6342, 9.43877, 1.18 ) }
    dend_15 { pt3dadd( -10.138, 57.6672, 9.46832, 1.47 ) }
    dend_15 { pt3dadd( -10.3221, 58.2558, 9.48446, 1.62 ) }
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 8/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -5.25571, 20.753, 5.83295, 1.03 ) }
    dend_10 { pt3dadd( -3.44329, 22.0038, 5.73958, 1.03 ) }
    dend_10 { pt3dadd( -3.25107, 22.1299, 5.72924, 1.03 ) }
    dend_10 { pt3dadd( -1.7583, 23.0802, 5.6456, 1.03 ) }
    dend_10 { pt3dadd( 0.249173, 24.3365, 5.53095, 1.4 ) }
    dend_10 { pt3dadd( 0.337014, 24.3903, 5.52867, 1.4 ) }
    dend_10 { pt3dadd( 2.76057, 25.8842, 5.50521, 1.4 ) }
    dend_10 { pt3dadd( 2.85258, 25.9404, 5.50544, 1.4 ) }
    dend_10 { pt3dadd( 4.22859, 26.8377, 5.52641, 1.55 ) }
    dend_10 { pt3dadd( 4.32404, 26.9042, 5.52946, 1.55 ) }
    dend_10 { pt3dadd( 6.2626, 28.4578, 5.61977, 0.96 ) }
    dend_10 { pt3dadd( 7.22962, 29.3251, 5.67155, 0.96 ) }
    dend_10 { pt3dadd( 8.00933, 30.1713, 5.72393, 1.18 ) }
    dend_10 { pt3dadd( 8.83989, 31.182, 5.77214, 1.4 ) }
    dend_10 { pt3dadd( 8.96487, 31.3579, 5.7713, 1.4 ) }
    dend_10 { pt3dadd( 9.65495, 32.3925, 5.70683, 1.4 ) }
    dend_10 { pt3dadd( 9.72845, 32.5065, 5.69268, 1.4 ) }
    dend_10 { pt3dadd( 10.5318, 33.6913, 5.52555, 1.69 ) }
    dend_10 { pt3dadd( 11.1278, 34.5094, 5.402, 1.92 ) }
    dend_10 { pt3dadd( 11.9704, 35.6241, 5.25042, 1.4 ) }
    dend_10 { pt3dadd( 13.0622, 37.084, 5.08056, 1.11 ) }
    dend_10 { pt3dadd( 14.0795, 38.4352, 4.94096, 1.11 ) }
    dend_10 { pt3dadd( 14.1633, 38.5505, 4.93121, 1.11 ) }
    dend_10 { pt3dadd( 15.0788, 39.8477, 4.84584, 1.11 ) }
    dend_10 { pt3dadd( 15.8139, 40.9758, 4.80429, 1.03 ) }
    dend_10 { pt3dadd( 16.5861, 42.284, 4.80414, 1.03 ) }
    dend_10 { pt3dadd( 16.648, 42.4116, 4.80466, 1.03 ) }
    dend_10 { pt3dadd( 17.3494, 44.1359, 4.81171, 1.03 ) }
    dend_10 { pt3dadd( 17.3813, 44.2305, 4.8116, 1.03 ) }
    dend_10 { pt3dadd( 17.6876, 45.5001, 4.80004, 0.81 ) }
    dend_10 { pt3dadd( 17.7061, 45.6465, 4.79656, 0.81 ) }
    dend_10 { pt3dadd( 17.7324, 46.7558, 4.77659, 0.59 ) }
    dend_10 { pt3dadd( 17.7207, 46.9671, 4.77373, 0.59 ) }
    dend_10 { pt3dadd( 17.5918, 48.0445, 4.78808, 0.59 ) }
    dend_10 { pt3dadd( 17.5504, 48.4393, 4.79859, 0.59 ) }
    dend_10 { pt3dadd( 17.4758, 49.3814, 4.83039, 0.74 ) }
    dend_10 { pt3dadd( 17.4688, 49.5287, 4.83574, 0.74 ) }
    dend_10 { pt3dadd( 17.492, 51.1919, 4.8944, 0.74 ) }
    dend_10 { pt3dadd( 17.5954, 52.4517, 4.93086, 1.25 ) }
    dend_10 { pt3dadd( 17.7665, 53.4336, 4.95028, 1.69 ) }
    dend_10 { pt3dadd( 18.1024, 54.8235, 4.96216, 1.4 ) }
    dend_10 { pt3dadd( 18.1305, 54.9191, 4.96194, 1.4 ) }
    dend_10 { pt3dadd( 18.4798, 56.0803, 4.9487, 2.06 ) }
    dend_10 { pt3dadd( 18.8837, 57.3718, 4.92339, 2.21 ) }
    dend_10 { pt3dadd( 19.3082, 58.7401, 4.8841, 1.77 ) }
    dend_10 { pt3dadd( 19.7737, 60.2891, 4.84308, 1.11 ) }
    dend_10 { pt3dadd( 20.1083, 61.4981, 4.81411, 1.11 ) }
    dend_10 { pt3dadd( 20.3968, 62.6714, 4.78873, 1.4 ) }
    dend_10 { pt3dadd( 20.7246, 64.2638, 4.75925, 0.59 ) }
    dend_10 { pt3dadd( 20.7403, 64.362, 4.75775, 0.59 ) }
    dend_10 { pt3dadd( 20.8798, 65.8276, 4.77785, 0.44 ) }
    dend_10 { pt3dadd( 20.9069, 66.9581, 4.8269, 1.11 ) }
    dend_10 { pt3dadd( 20.887, 67.8054, 4.8836, 1.33 ) }
    dend_10 { pt3dadd( 20.8785, 68.0002, 4.89344, 1.33 ) }
    dend_10 { pt3dadd( 20.8252, 68.5933, 4.91011, 1.33 ) }
    dend_10 { pt3dadd( 20.6855, 69.9672, 4.9016, 0.52 ) }
    dend_10 { pt3dadd( 20.4585, 71.7583, 4.83935, 0.52 ) }
    dend_10 { pt3dadd( 20.444, 71.8697, 4.8322, 0.52 ) }
    dend_10 { pt3dadd( 20.2941, 72.994, 4.69067, 0.96 ) }
    dend_10 { pt3dadd( 20.1344, 74.34, 4.40448, 1.55 ) }
    dend_10 { pt3dadd( 20.0174, 75.415, 4.03426, 1.77 ) }
    dend_10 { pt3dadd( 19.9637, 75.9522, 3.77941, 1.99 ) }
    dend_10 { pt3dadd( 19.9569, 76.0253, 3.74159, 1.99 ) }
    dend_10 { pt3dadd( 19.8443, 77.3825, 3.05767, 1.99 ) }
    dend_10 { pt3dadd( 19.7525, 78.5676, 2.4678, 1.4 ) }
    dend_10 { pt3dadd( 19.6268, 80.6054, 1.44182, 0.44 ) }
    dend_10 { pt3dadd( 19.5586, 81.8382, 0.83078, 0.96 ) }
    dend_10 { pt3dadd( 19.5259, 82.7847, 0.389014, 1.4 ) }
    dend_10 { pt3dadd( 19.5064, 83.805, -0.0401934, 1.77 ) }
    dend_10 { pt3dadd( 19.5079, 83.887, -0.0679335, 1.77 ) }
    dend_10 { pt3dadd( 19.5486, 84.6715, -0.245815, 1.99 ) }
    dend_10 { pt3dadd( 19.5712, 84.8917, -0.268345, 1.99 ) }
    dend_10 { pt3dadd( 19.6588, 85.6125, -0.305048, 1.99 ) }
    dend_10 { pt3dadd( 19.6797, 85.8098, -0.314354, 1.99 ) }
    dend_10 { pt3dadd( 19.7522, 86.7492, -0.384284, 1.69 ) }
    dend_10 { pt3dadd( 19.7957, 87.9124, -0.484324, 1.11 ) }
    dend_10 { pt3dadd( 19.7974, 89.0842, -0.590993, 0.44 ) }
    dend_10 { pt3dadd( 19.7511, 90.5034, -0.719938, 0.37 ) }
    dend_10 { pt3dadd( 19.6395, 91.8095, -0.842932, 1.03 ) }
    dend_10 { pt3dadd( 19.532, 92.8738, -0.906144, 1.03 ) }
    dend_10 { pt3dadd( 19.4079, 94.1745, -0.94646, 0.44 ) }
    dend_10 { pt3dadd( 19.3425, 94.9623, -0.953769, 0.88 ) }
    dend_10 { pt3dadd( 19.3034, 95.6838, -0.948928, 1.18 ) }
    dend_10 { pt3dadd( 19.2833, 96.6629, -0.930285, 1.18 ) }
    dend_10 { pt3dadd( 19.3656, 98.8643, -0.882289, 0.37 ) }
    dend_10 { pt3dadd( 19.4741, 100.058, -0.850641, 0.37 ) }
    dend_10 { pt3dadd( 19.7243, 101.79, -0.832386, 1.33 ) }
    dend_10 { pt3dadd( 19.9354, 103.01, -0.830054, 2.36 ) }
    dend_10 { pt3dadd( 20.0706, 103.683, -0.839439, 2.95 ) }
    dend_10 { pt3dadd( 20.2549, 104.43, -0.875632, 3.24 ) }
    dend_10 { pt3dadd( 20.284, 104.555, -0.893723, 3.24 ) }
    dend_10 { pt3dadd( 20.3607, 104.913, -0.95438, 3.24 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    // Section: dend_4, id: dend_4, parent: dend_0 (entry count 0/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -2.23439, -39.902, 0.64213, 2.06 ) }
    dend_4 { pt3dadd( -2.21801, -41.0443, 0.74268, 2.06 ) }
    dend_4 { pt3dadd( -2.16196, -43.0632, 0.706864, 2.06 ) }
    dend_4 { pt3dadd( -2.09999, -44.4671, 0.582675, 2.06 ) }
    dend_4 { pt3dadd( -1.99303, -45.9101, 0.400321, 2.06 ) }
    dend_4 { pt3dadd( -1.79854, -47.7382, 0.103211, 2.14 ) }
    dend_4 { pt3dadd( -1.63556, -48.9961, -0.118631, 2.14 ) }
    dend_4 { pt3dadd( -1.33503, -50.8814, -0.556291, 2.43 ) }
    dend_4 { pt3dadd( -1.16292, -51.9214, -0.840186, 2.8 ) }
    dend_4 { pt3dadd( -0.922857, -53.334, -1.20983, 2.36 ) }
    dend_4 { pt3dadd( -0.586834, -55.252, -1.69751, 2.36 ) }
    dend_4 { pt3dadd( -0.314684, -56.7209, -2.04302, 2.36 ) }
    dend_4 { pt3dadd( -0.00646796, -58.4812, -2.43594, 2.36 ) }
    dend_4 { pt3dadd( 0.258154, -60.3105, -2.8073, 2.14 ) }
    dend_4 { pt3dadd( 0.437279, -61.9642, -3.16963, 2.14 ) }
    dend_4 { pt3dadd( 0.538427, -63.5893, -3.55778, 2.28 ) }
    dend_4 { pt3dadd( 0.546809, -64.1853, -3.70643, 2.28 ) }
    dend_4 { pt3dadd( 0.485456, -65.6814, -4.10506, 1.69 ) }
    dend_4 { pt3dadd( 0.308873, -67.299, -4.47978, 1.18 ) }
    dend_4 { pt3dadd( 0.104073, -68.2528, -4.63604, 1.18 ) }
    dend_4 { pt3dadd( -0.159972, -68.9063, -4.61965, 1.18 ) }
    dend_4 { pt3dadd( -0.603219, -69.5815, -4.404, 1.18 ) }
    dend_4 { pt3dadd( -1.19761, -70.2286, -4.02044, 0.96 ) }
    dend_4 { pt3dadd( -2.2973, -71.1352, -3.25744, 1.11 ) }
    dend_4 { pt3dadd( -3.48259, -71.9487, -2.51962, 1.69 ) }
    dend_4 { pt3dadd( -4.76327, -72.7818, -1.84899, 1.55 ) }
    dend_4 { pt3dadd( -5.53802, -73.2656, -1.58254, 1.92 ) }
    dend_4 { pt3dadd( -6.27855, -73.7398, -1.45718, 2.21 ) }
    dend_4 { pt3dadd( -7.27352, -74.4444, -1.4964, 2.06 ) }
    dend_4 { pt3dadd( -8.52127, -75.4093, -1.77511, 1.99 ) }
    dend_4 { pt3dadd( -9.47605, -76.2244, -2.09522, 1.77 ) }
    dend_4 { pt3dadd( -10.5558, -77.2392, -2.46482, 1.92 ) }
    dend_4 { pt3dadd( -11.5118, -78.233, -2.73696, 1.84 ) }
    dend_4 { pt3dadd( -12.441, -79.2997, -2.85307, 1.69 ) }
    dend_4 { pt3dadd( -13.0394, -80.0871, -2.79618, 1.11 ) }
    dend_4 { pt3dadd( -13.7002, -81.1504, -2.58795, 0.96 ) }
    dend_4 { pt3dadd( -14.3619, -82.4622, -2.2335, 1.25 ) }
    dend_4 { pt3dadd( -14.6866, -83.2637, -2.01265, 0.81 ) }
    dend_4 { pt3dadd( -15.2456, -85.0432, -1.72957, 0.74 ) }
    dend_4 { pt3dadd( -15.4852, -86.0407, -1.71024, 0.37 ) }
    dend_4 { pt3dadd( -15.7226, -87.6106, -1.92622, 1.47 ) }
    dend_4 { pt3dadd( -15.7681, -88.3653, -2.14789, 2.14 ) }
    dend_4 { pt3dadd( -15.7604, -89.7924, -2.80379, 2.5 ) }
    dend_4 { pt3dadd( -15.6382, -91.5962, -3.90842, 1.03 ) }
    dend_4 { pt3dadd( -15.5388, -92.526, -4.59568, 0.88 ) }
    dend_4 { pt3dadd( -15.4242, -93.2384, -5.14859, 0.44 ) }
    dend_4 { pt3dadd( -15.1553, -94.4437, -6.12416, 0.44 ) }
    dend_4 { pt3dadd( -14.7697, -95.8313, -7.25075, 1.18 ) }
    dend_4 { pt3dadd( -14.2881, -97.4081, -8.4514, 1.62 ) }
    dend_4 { pt3dadd( -14.2571, -97.5092, -8.52267, 1.62 ) }
    dend_4 { pt3dadd( -13.9318, -98.5958, -9.21782, 1.62 ) }
    dend_4 { pt3dadd( -13.5136, -100.263, -10.1504, 1.47 ) }
    dend_4 { pt3dadd( -13.3012, -101.363, -10.6428, 1.99 ) }
    dend_4 { pt3dadd( -13.2075, -102.26, -10.9484, 1.99 ) }
    dend_4 { pt3dadd( -13.1916, -103.077, -11.1665, 1.99 ) }
    dend_4 { pt3dadd( -13.2758, -104.642, -11.5437, 0.59 ) }
    dend_4 { pt3dadd( -13.4509, -105.773, -11.7812, 0.52 ) }
    dend_4 { pt3dadd( -13.6648, -106.605, -11.876, 0.52 ) }
    dend_4 { pt3dadd( -14.3309, -108.529, -12.0055, 2.8 ) }
    dend_4 { pt3dadd( -14.6296, -109.303, -12.0392, 3.17 ) }
    dend_4 { pt3dadd( -14.9529, -110.068, -11.9964, 3.46 ) }
    dend_4 { pt3dadd( -15.2586, -110.792, -11.8253, 3.46 ) }
    dend_4 { pt3dadd( -15.9782, -112.554, -11.284, 1.69 ) }
    dend_4 { pt3dadd( -16.382, -113.618, -10.8531, 1.11 ) }
    dend_4 { pt3dadd( -16.6044, -114.27, -10.4899, 1.25 ) }
    dend_4 { pt3dadd( -17.1619, -116.018, -9.37204, 1.99 ) }
    dend_4 { pt3dadd( -17.6473, -117.761, -8.08075, 1.47 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 67/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -2.23439, -39.902, 0.64213, 0.96 ) }
    dend_1 { pt3dadd( -1.72341, -40.6879, -0.822393, 0.96 ) }
    dend_1 { pt3dadd( -1.27388, -41.3112, -2.01999, 0.81 ) }
    dend_1 { pt3dadd( -0.525359, -42.1624, -3.70398, 0.59 ) }
    dend_1 { pt3dadd( -0.310068, -42.3613, -4.12116, 0.88 ) }
    dend_1 { pt3dadd( -0.0869322, -42.5301, -4.4997, 1.11 ) }
    dend_1 { pt3dadd( -0.0488248, -42.5535, -4.55818, 1.11 ) }
    dend_1 { pt3dadd( 0.504984, -42.7319, -5.30495, 1.25 ) }
    dend_1 { pt3dadd( 0.959248, -42.8278, -6.01026, 0.88 ) }
    dend_1 { pt3dadd( 1.43698, -42.9056, -6.85701, 0.52 ) }
    dend_1 { pt3dadd( 1.64109, -42.96, -7.40304, 0.81 ) }
    dend_1 { pt3dadd( 1.86809, -43.0749, -8.29775, 0.96 ) }
    dend_1 { pt3dadd( 2.09681, -43.3269, -9.834, 0.52 ) }
    dend_1 { pt3dadd( 2.01861, -43.8055, -12.0034, 0.52 ) }
    dend_1 { pt3dadd( 2.00552, -43.8234, -12.0619, 0.52 ) }
    dend_1 { pt3dadd( 1.42393, -44.426, -13.4357, 0.96 ) }
    dend_1 { pt3dadd( 1.19574, -44.6585, -13.8308, 1.11 ) }
    dend_1 { pt3dadd( 0.904821, -44.9557, -14.2119, 1.11 ) }
    dend_1 { pt3dadd( 0.0542571, -45.9372, -15.1321, 0.66 ) }
    dend_1 { pt3dadd( -0.292279, -46.4293, -15.5223, 0.37 ) }
    dend_1 { pt3dadd( -0.672823, -47.1681, -16.1495, 0.37 ) }
    dend_1 { pt3dadd( -0.825143, -47.6909, -16.6414, 0.59 ) }
    dend_1 { pt3dadd( -0.830999, -47.7347, -16.6873, 0.59 ) }
    dend_1 { pt3dadd( -0.780107, -48.4338, -17.5152, 1.03 ) }
    dend_1 { pt3dadd( -0.640968, -49.047, -18.3169, 1.69 ) }
    dend_1 { pt3dadd( -0.47196, -49.7258, -19.2365, 2.21 ) }
    dend_1 { pt3dadd( -0.333701, -50.332, -20.0472, 2.8 ) }
    dend_1 { pt3dadd( -0.292675, -50.6041, -20.398, 2.8 ) }
    dend_1 { pt3dadd( -0.186443, -51.9332, -21.9964, 1.33 ) }
    dend_1 { pt3dadd( -0.177602, -52.8783, -23.0139, 0.52 ) }
    dend_1 { pt3dadd( -0.204156, -53.3721, -23.473, 0.66 ) }
    dend_1 { pt3dadd( -0.234794, -53.7624, -23.7759, 0.66 ) }
    dend_1 { pt3dadd( -0.268079, -54.3415, -24.1654, 0.29 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_1 { pt3dadd( -0.286956, -54.8541, -24.4704, 0.37 ) }
    dend_1 { pt3dadd( -0.26247, -55.4432, -24.6937, 0.37 ) }
    dend_1 { pt3dadd( -0.239651, -55.514, -24.7266, 0.37 ) }
    dend_1 { pt3dadd( 0.082467, -56.0411, -25.1491, 0.66 ) }
    dend_1 { pt3dadd( 0.390793, -56.4722, -25.578, 0.96 ) }
    dend_1 { pt3dadd( 0.417035, -56.5057, -25.614, 0.96 ) }
    dend_1 { pt3dadd( 0.713471, -56.8875, -26.0307, 0.96 ) }
    dend_1 { pt3dadd( 1.28107, -57.6745, -26.9319, 0.52 ) }
    dend_1 { pt3dadd( 1.77158, -58.4023, -27.7437, 0.37 ) }
    dend_1 { pt3dadd( 2.33954, -59.2946, -28.742, 1.77 ) }
    dend_1 { pt3dadd( 2.55786, -59.6576, -29.1365, 2.36 ) }
    dend_1 { pt3dadd( 2.79321, -60.0632, -29.5714, 2.58 ) }
    dend_1 { pt3dadd( 3.49666, -61.3498, -30.9189, 0.74 ) }
    dend_1 { pt3dadd( 3.72414, -61.8034, -31.33, 0.74 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 14/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 4.23949, -40.7776, 0.00760949, 0.15 ) }
    axon_1 { pt3dadd( 5.86652, -55.6891, 0.00760949, 0.15 ) }
    axon_1 { pt3dadd( 7.49354, -70.6006, 0.00760949, 0.15 ) }
    // Section: dend_17, id: dend_17, parent: dend_15 (entry count 17/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -10.3221, 58.2558, 9.48446, 0.81 ) }
    dend_17 { pt3dadd( -10.8161, 58.9835, 9.35729, 0.81 ) }
    dend_17 { pt3dadd( -11.4391, 59.9607, 9.18117, 0.74 ) }
    dend_17 { pt3dadd( -11.97, 60.8308, 9.03186, 0.74 ) }
    dend_17 { pt3dadd( -12.0086, 60.8962, 9.01803, 0.74 ) }
    dend_17 { pt3dadd( -12.711, 62.1155, 8.74501, 0.74 ) }
    dend_17 { pt3dadd( -13.0459, 62.6968, 8.59511, 1.33 ) }
    dend_17 { pt3dadd( -13.3697, 63.2835, 8.41309, 1.92 ) }
    dend_17 { pt3dadd( -13.7139, 63.9199, 8.18921, 1.33 ) }
    dend_17 { pt3dadd( -14.2133, 64.7926, 7.86965, 1.11 ) }
    dend_17 { pt3dadd( -14.5945, 65.4156, 7.63308, 1.47 ) }
    dend_17 { pt3dadd( -15.1212, 66.2058, 7.33348, 1.18 ) }
    dend_17 { pt3dadd( -15.152, 66.2499, 7.3166, 1.18 ) }
    dend_17 { pt3dadd( -15.6314, 66.9394, 7.05614, 0.66 ) }
    dend_17 { pt3dadd( -16.0591, 67.5984, 6.81146, 0.66 ) }
    dend_17 { pt3dadd( -16.5809, 68.4832, 6.5147, 1.47 ) }
    dend_17 { pt3dadd( -16.8904, 69.0893, 6.3519, 1.99 ) }
    dend_17 { pt3dadd( -17.2479, 69.8871, 6.18776, 1.99 ) }
    dend_17 { pt3dadd( -17.8138, 71.3173, 5.9516, 0.66 ) }
    dend_17 { pt3dadd( -18.0968, 72.1663, 5.84615, 0.52 ) }
    dend_17 { pt3dadd( -18.2645, 72.7717, 5.79856, 0.59 ) }
    dend_17 { pt3dadd( -18.5819, 73.9799, 5.80356, 0.74 ) }
    dend_17 { pt3dadd( -18.6028, 74.0578, 5.80774, 0.74 ) }
    dend_17 { pt3dadd( -18.8265, 74.7686, 5.88199, 1.33 ) }
    dend_17 { pt3dadd( -19.0294, 75.3335, 5.96483, 1.62 ) }
    dend_17 { pt3dadd( -19.3778, 76.1408, 6.08193, 1.18 ) }
    dend_17 { pt3dadd( -19.8415, 77.0598, 6.15441, 0.66 ) }
    dend_17 { pt3dadd( -20.2306, 77.7617, 6.16903, 0.66 ) }
    dend_17 { pt3dadd( -20.9778, 79.0189, 6.16652, 2.28 ) }
    dend_17 { pt3dadd( -21.3927, 79.6506, 6.15188, 2.73 ) }
    dend_17 { pt3dadd( -21.7638, 80.1837, 6.12709, 2.95 ) }
    dend_17 { pt3dadd( -22.74, 81.5417, 6.02782, 1.03 ) }
    dend_17 { pt3dadd( -22.7803, 81.5965, 6.02244, 1.03 ) }
    dend_17 { pt3dadd( -23.1828, 82.1445, 5.9741, 0.81 ) }
    dend_17 { pt3dadd( -23.6522, 82.7809, 5.929, 0.44 ) }
    dend_17 { pt3dadd( -24.1316, 83.4498, 5.89765, 0.44 ) }
    dend_17 { pt3dadd( -24.6855, 84.2413, 5.88134, 0.44 ) }
    dend_17 { pt3dadd( -25.2259, 84.9993, 5.88832, 1.11 ) }
    dend_17 { pt3dadd( -25.6277, 85.5594, 5.89286, 1.69 ) }
    dend_17 { pt3dadd( -26.1631, 86.3153, 5.89796, 2.21 ) }
    dend_17 { pt3dadd( -26.4843, 86.7685, 5.90035, 2.5 ) }
    dend_17 { pt3dadd( -27.2967, 87.8602, 5.90507, 1.25 ) }
    dend_17 { pt3dadd( -28.0301, 88.8211, 5.90732, 0.44 ) }
    dend_17 { pt3dadd( -28.6287, 89.5957, 5.9067, 0.44 ) }
    dend_17 { pt3dadd( -29.1037, 90.2009, 5.90634, 1.03 ) }
    dend_17 { pt3dadd( -29.6214, 90.8744, 5.90576, 1.33 ) }
    dend_17 { pt3dadd( -29.7499, 91.0457, 5.90555, 1.33 ) }
    dend_17 { pt3dadd( -30.0443, 91.4503, 5.9049, 1.47 ) }
    dend_17 { pt3dadd( -30.5744, 92.172, 5.90384, 0.88 ) }
    dend_17 { pt3dadd( -31.0411, 92.7782, 5.90332, 0.59 ) }
    dend_17 { pt3dadd( -31.5326, 93.3765, 5.90335, 0.44 ) }
    dend_17 { pt3dadd( -31.5917, 93.443, 5.90343, 0.44 ) }
    dend_17 { pt3dadd( -32.3319, 94.197, 5.90561, 0.44 ) }
    dend_17 { pt3dadd( -32.7315, 94.5417, 5.90768, 0.66 ) }
    dend_17 { pt3dadd( -32.9099, 94.6782, 5.90886, 0.66 ) }
    dend_17 { pt3dadd( -33.4569, 95.087, 5.9126, 0.66 ) }
    dend_17 { pt3dadd( -33.9946, 95.5383, 5.92882, 0.66 ) }
    dend_17 { pt3dadd( -34.4868, 96.0497, 5.95526, 0.37 ) }
    dend_17 { pt3dadd( -34.8149, 96.5029, 5.97149, 0.37 ) }
    dend_17 { pt3dadd( -35.2647, 97.2895, 5.98309, 0.66 ) }
    dend_17 { pt3dadd( -35.5164, 97.8902, 5.96812, 0.96 ) }
    dend_17 { pt3dadd( -35.7674, 98.7707, 5.92061, 0.29 ) }
    dend_17 { pt3dadd( -35.9092, 99.4576, 5.87436, 0.44 ) }
    dend_17 { pt3dadd( -36.0246, 100.186, 5.81784, 0.96 ) }
    dend_17 { pt3dadd( -36.0419, 100.305, 5.8077, 0.96 ) }
    dend_17 { pt3dadd( -36.2208, 101.39, 5.70182, 1.77 ) }
    dend_17 { pt3dadd( -36.4462, 102.433, 5.59477, 2.95 ) }
    dend_17 { pt3dadd( -36.5659, 102.947, 5.42701, 3.54 ) }
    dend_17 { pt3dadd( -36.5793, 103.008, 5.39962, 3.54 ) }
    dend_17 { pt3dadd( -36.7072, 103.666, 5.05624, 3.76 ) }
    dend_17 { pt3dadd( -36.7169, 103.723, 5.02343, 3.76 ) }
    dend_17 { pt3dadd( -36.8351, 104.52, 4.51169, 3.46 ) }
    dend_17 { pt3dadd( -37.1584, 107.261, 2.67439, 0.81 ) }
    dend_17 { pt3dadd( -37.1648, 107.326, 2.63365, 0.81 ) }
    dend_17 { pt3dadd( -37.2213, 107.889, 2.32438, 0.81 ) }
    dend_17 { pt3dadd( -37.228, 107.951, 2.29899, 0.81 ) }
    dend_17 { pt3dadd( -37.3069, 108.732, 2.12802, 1.11 ) }
    dend_17 { pt3dadd( -37.3616, 109.316, 2.1032, 1.25 ) }
    dend_17 { pt3dadd( -37.4706, 110.403, 2.25094, 0.37 ) }
    dend_17 { pt3dadd( -37.5588, 111.279, 2.3801, 0.29 ) }
    dend_17 { pt3dadd( -37.705, 112.593, 2.52841, 0.29 ) }
    dend_17 { pt3dadd( -37.8761, 114.03, 2.64949, 0.29 ) }
    dend_17 { pt3dadd( -37.8862, 114.105, 2.65354, 0.29 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_17 { pt3dadd( -38.0301, 115.054, 2.69308, 0.29 ) }
    dend_17 { pt3dadd( -38.0465, 115.163, 2.69389, 0.29 ) }
    dend_17 { pt3dadd( -38.1966, 116.301, 2.59736, 0.44 ) }
    dend_17 { pt3dadd( -38.214, 116.397, 2.56361, 0.44 ) }
    dend_17 { pt3dadd( -38.3767, 116.845, 2.29544, 0.44 ) }
    dend_17 { pt3dadd( -42.7988, 125.015, 1.45168, 0.44 ) }
    dend_17 { pt3dadd( -47.4104, 133.108, 0.813212, 0.44 ) }
    dend_17 { pt3dadd( -51.7179, 141.266, -0.579203, 0.44 ) }
    dend_17 { pt3dadd( -54.4859, 149.675, -3.4463, 0.44 ) }
    dend_17 { pt3dadd( -57.4812, 157.413, -7.79293, 0.44 ) }
    dend_17 { pt3dadd( -58.9754, 164.595, -13.6948, 0.44 ) }
    dend_17 { pt3dadd( -60.7359, 170.523, -20.9177, 0.44 ) }
    dend_17 { pt3dadd( -60.6654, 177.948, -26.6778, 0.44 ) }
    dend_17 { pt3dadd( -60.3892, 185.674, -31.9744, 0.44 ) }
    dend_17 { pt3dadd( -59.5953, 192.626, -38.3062, 0.44 ) }
    dend_17 { pt3dadd( -57.3898, 200.358, -43.1248, 0.44 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 16/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -10.3221, 58.2558, 9.48446, 0.29 ) }
    dend_16 { pt3dadd( -9.8533, 59.8201, 9.35864, 0.29 ) }
    dend_16 { pt3dadd( -9.704, 60.4552, 9.33552, 0.44 ) }
    dend_16 { pt3dadd( -9.60966, 61.0741, 9.33109, 0.44 ) }
    dend_16 { pt3dadd( -9.53632, 61.985, 9.34384, 0.29 ) }
    dend_16 { pt3dadd( -9.53504, 62.0376, 9.34511, 0.29 ) }
    dend_16 { pt3dadd( -9.54672, 62.8281, 9.3678, 0.29 ) }
    dend_16 { pt3dadd( -9.56326, 62.9556, 9.3823, 0.29 ) }
    dend_16 { pt3dadd( -9.66059, 63.6125, 9.40707, 0.29 ) }
    dend_16 { pt3dadd( -9.73969, 64.1601, 9.39023, 0.96 ) }
    dend_16 { pt3dadd( -9.79276, 64.6445, 9.33207, 1.33 ) }
    dend_16 { pt3dadd( -9.81263, 64.9354, 9.28597, 1.33 ) }
    dend_16 { pt3dadd( -9.81966, 66.1881, 9.04723, 0.52 ) }
    dend_16 { pt3dadd( -9.76513, 67.1678, 8.842, 0.29 ) }
    dend_16 { pt3dadd( -9.75108, 67.2728, 8.8186, 0.29 ) }
    dend_16 { pt3dadd( -9.60826, 68.0625, 8.64138, 0.81 ) }
    dend_16 { pt3dadd( -9.5968, 68.1186, 8.62946, 0.81 ) }
    dend_16 { pt3dadd( -9.48976, 68.6657, 8.527, 1.03 ) }
    dend_16 { pt3dadd( -9.41984, 69.1366, 8.45882, 0.74 ) }
    dend_16 { pt3dadd( -9.32546, 69.8835, 8.39653, 0.29 ) }
    dend_16 { pt3dadd( -9.28112, 70.3634, 8.37294, 0.44 ) }
    dend_16 { pt3dadd( -9.27204, 70.7347, 8.37221, 0.44 ) }
    dend_16 { pt3dadd( -9.28049, 71.2273, 8.37267, 0.29 ) }
    dend_16 { pt3dadd( -9.33706, 71.6867, 8.36768, 0.74 ) }
    dend_16 { pt3dadd( -9.72718, 79.9835, 8.86021, 0.74 ) }
    // Section: dend_12, id: dend_12, parent: dend_10 (entry count 41/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 20.3607, 104.913, -0.95438, 0.37 ) }
    dend_12 { pt3dadd( 20.6979, 106.46, -1.65044, 0.37 ) }
    dend_12 { pt3dadd( 20.8567, 106.981, -1.95905, 0.37 ) }
    dend_12 { pt3dadd( 20.9925, 107.394, -2.21709, 0.96 ) }
    dend_12 { pt3dadd( 21.0116, 107.444, -2.24614, 0.96 ) }
    dend_12 { pt3dadd( 21.3138, 108.199, -2.67231, 0.96 ) }
    dend_12 { pt3dadd( 21.85, 109.605, -3.42942, 0.37 ) }
    dend_12 { pt3dadd( 22.1415, 110.494, -3.91406, 0.59 ) }
    dend_12 { pt3dadd( 22.3719, 111.232, -4.35377, 0.37 ) }
    dend_12 { pt3dadd( 22.6512, 112.231, -4.9677, 0.37 ) }
    dend_12 { pt3dadd( 22.6701, 112.314, -5.01799, 0.37 ) }
    dend_12 { pt3dadd( 22.7589, 112.893, -5.40304, 0.29 ) }
    dend_12 { pt3dadd( 22.8472, 114.009, -6.16106, 1.47 ) }
    dend_12 { pt3dadd( 22.8749, 114.92, -6.78966, 1.92 ) }
    dend_12 { pt3dadd( 22.8774, 115.259, -7.03285, 2.21 ) }
    dend_12 { pt3dadd( 22.8815, 115.6, -7.29306, 2.21 ) }
    dend_12 { pt3dadd( 22.9707, 117.44, -8.6968, 0.37 ) }
    dend_12 { pt3dadd( 23.0508, 118.414, -9.42968, 0.96 ) }
    dend_12 { pt3dadd( 23.101, 118.913, -9.78923, 1.62 ) }
    dend_12 { pt3dadd( 23.1615, 119.451, -10.1718, 1.84 ) }
    dend_12 { pt3dadd( 23.3425, 120.894, -11.2075, 0.29 ) }
    dend_12 { pt3dadd( 23.4585, 121.759, -11.8178, 1.03 ) }
    dend_12 { pt3dadd( 23.4988, 122.085, -12.0197, 1.4 ) }
    dend_12 { pt3dadd( 23.5188, 122.279, -12.1445, 1.4 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 65/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 20.3607, 104.913, -0.95438, 0.37 ) }
    dend_11 { pt3dadd( 21.5703, 106.872, -0.455604, 0.37 ) }
    dend_11 { pt3dadd( 22.2075, 107.902, -0.329311, 0.37 ) }
    dend_11 { pt3dadd( 22.8015, 108.905, -0.342834, 0.81 ) }
    dend_11 { pt3dadd( 22.8362, 108.961, -0.347934, 0.81 ) }
    dend_11 { pt3dadd( 23.1715, 109.488, -0.414407, 0.81 ) }
    dend_11 { pt3dadd( 23.7319, 110.375, -0.597022, 0.37 ) }
    dend_11 { pt3dadd( 24.2878, 111.191, -0.967119, 0.29 ) }
    dend_11 { pt3dadd( 24.7659, 111.88, -1.33339, 0.59 ) }
    dend_11 { pt3dadd( 25.2252, 112.538, -1.71933, 0.22 ) }
    dend_11 { pt3dadd( 25.2513, 112.58, -1.74338, 0.22 ) }
    dend_11 { pt3dadd( 25.7066, 113.459, -2.23136, 1.18 ) }
    dend_11 { pt3dadd( 25.8375, 113.798, -2.37887, 1.69 ) }
    dend_11 { pt3dadd( 25.9898, 114.436, -2.56002, 1.99 ) }
    dend_11 { pt3dadd( 26.0291, 114.822, -2.60104, 1.99 ) }
    dend_11 { pt3dadd( 25.9489, 115.698, -2.56114, 0.44 ) }
    dend_11 { pt3dadd( 25.8297, 116.271, -2.43251, 0.29 ) }
    dend_11 { pt3dadd( 25.2331, 117.718, -1.64834, 0.29 ) }
    dend_11 { pt3dadd( 25.204, 117.765, -1.61545, 0.29 ) }
    dend_11 { pt3dadd( 29.6333, 125.629, -1.07036, 0.29 ) }
    dend_11 { pt3dadd( 33.3513, 133.678, 0.618382, 0.29 ) }
    dend_11 { pt3dadd( 37.2569, 141.551, 2.7482, 0.29 ) }
    dend_11 { pt3dadd( 40.5784, 149.336, 5.95519, 0.29 ) }
    dend_11 { pt3dadd( 45.0801, 156.306, 9.74987, 0.29 ) }
    dend_11 { pt3dadd( 49.0773, 162.608, 15.0878, 0.29 ) }
    dend_11 { pt3dadd( 53.5164, 168.826, 20.1827, 0.29 ) }
    // Section: dend_6, id: dend_6, parent: dend_4 (entry count 91/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -17.6473, -117.761, -8.08075, 0.52 ) }
    dend_6 { pt3dadd( -17.9051, -120.116, -7.15453, 0.52 ) }
    dend_6 { pt3dadd( -17.9113, -121.04, -6.88724, 0.81 ) }
    dend_6 { pt3dadd( -17.854, -121.855, -6.76566, 1.03 ) }
    dend_6 { pt3dadd( -17.8445, -121.958, -6.76298, 1.03 ) }
    dend_6 { pt3dadd( -17.7871, -122.863, -6.80383, 1.03 ) }
    dend_6 { pt3dadd( -17.7711, -123.868, -6.88965, 0.52 ) }
    dend_6 { pt3dadd( -17.7944, -124.755, -7.07459, 0.52 ) }
    dend_6 { pt3dadd( -17.9468, -125.816, -7.28247, 0.52 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_6 { pt3dadd( -18.1762, -126.687, -7.43982, 0.66 ) }
    dend_6 { pt3dadd( -18.5192, -127.588, -7.52046, 0.66 ) }
    dend_6 { pt3dadd( -18.8591, -128.254, -7.52897, 0.88 ) }
    dend_6 { pt3dadd( -19.7916, -129.751, -7.32526, 1.03 ) }
    dend_6 { pt3dadd( -20.4684, -130.699, -7.05444, 1.55 ) }
    dend_6 { pt3dadd( -20.773, -131.114, -6.88991, 1.92 ) }
    dend_6 { pt3dadd( -21.8402, -132.565, -6.21129, 1.92 ) }
    dend_6 { pt3dadd( -22.5473, -133.57, -5.70668, 1.33 ) }
    dend_6 { pt3dadd( -23.7042, -135.284, -4.83663, 0.59 ) }
    dend_6 { pt3dadd( -24.5159, -136.535, -4.21953, 0.59 ) }
    dend_6 { pt3dadd( -25.2862, -137.794, -3.70146, 0.59 ) }
    dend_6 { pt3dadd( -25.3229, -137.857, -3.6813, 0.59 ) }
    dend_6 { pt3dadd( -25.8196, -138.783, -3.51899, 1.33 ) }
    dend_6 { pt3dadd( -26.3342, -139.909, -3.50615, 0.74 ) }
    dend_6 { pt3dadd( -26.6774, -140.879, -3.6514, 0.74 ) }
    dend_6 { pt3dadd( -27.143, -142.501, -3.97224, 0.74 ) }
    dend_6 { pt3dadd( -27.1752, -142.621, -3.99755, 0.74 ) }
    dend_6 { pt3dadd( -27.4875, -143.788, -4.21403, 1.18 ) }
    dend_6 { pt3dadd( -27.9944, -145.58, -4.50321, 0.81 ) }
    dend_6 { pt3dadd( -28.5572, -147.481, -4.69027, 0.74 ) }
    dend_6 { pt3dadd( -29.2362, -149.614, -4.76452, 0.59 ) }
    dend_6 { pt3dadd( -29.2652, -149.7, -4.75909, 0.59 ) }
    dend_6 { pt3dadd( -29.7743, -151.108, -4.59803, 1.92 ) }
    dend_6 { pt3dadd( -30.2445, -152.395, -4.34406, 2.21 ) }
    dend_6 { pt3dadd( -30.7846, -153.923, -3.94444, 2.21 ) }
    dend_6 { pt3dadd( -31.31, -155.51, -3.47635, 0.74 ) }
    dend_6 { pt3dadd( -31.8056, -157.374, -2.88427, 0.74 ) }
    dend_6 { pt3dadd( -32.0448, -158.789, -2.43035, 0.66 ) }
    dend_6 { pt3dadd( -32.0694, -160.461, -1.91041, 0.44 ) }
    dend_6 { pt3dadd( -31.8791, -161.563, -1.58454, 1.03 ) }
    dend_6 { pt3dadd( -31.8248, -161.696, -1.55425, 1.03 ) }
    dend_6 { pt3dadd( -31.4093, -162.353, -1.47101, 1.03 ) }
    dend_6 { pt3dadd( -30.7376, -163.266, -1.45901, 1.03 ) }
    dend_6 { pt3dadd( -30.1118, -164.159, -1.49143, 1.4 ) }
    dend_6 { pt3dadd( -29.8133, -164.722, -1.54127, 1.4 ) }
    dend_6 { pt3dadd( -29.3607, -166.118, -1.6344, 0.81 ) }
    dend_6 { pt3dadd( -29.1258, -167.605, -1.62903, 0.81 ) }
    dend_6 { pt3dadd( -29.1306, -168.665, -1.56751, 1.03 ) }
    dend_6 { pt3dadd( -29.2653, -169.622, -1.47165, 1.11 ) }
    dend_6 { pt3dadd( -29.5371, -170.756, -1.31154, 1.18 ) }
    dend_6 { pt3dadd( -29.9694, -172.149, -1.07948, 0.37 ) }
    dend_6 { pt3dadd( -30.5887, -173.841, -0.851205, 0.37 ) }
    dend_6 { pt3dadd( -30.9507, -174.915, -0.812447, 1.55 ) }
    dend_6 { pt3dadd( -31.1635, -175.793, -0.887592, 1.84 ) }
    dend_6 { pt3dadd( -31.2709, -176.579, -1.03788, 2.14 ) }
    dend_6 { pt3dadd( -31.2832, -177.177, -1.22218, 2.14 ) }
    dend_6 { pt3dadd( -31.0188, -178.82, -1.98896, 1.69 ) }
    dend_6 { pt3dadd( -30.2893, -180.662, -3.09518, 0.52 ) }
    dend_6 { pt3dadd( -29.8868, -181.324, -3.53712, 0.88 ) }
    dend_6 { pt3dadd( -29.835, -181.387, -3.58343, 0.88 ) }
    dend_6 { pt3dadd( -29.6181, -181.594, -3.75785, 0.88 ) }
    dend_6 { pt3dadd( -28.4024, -182.58, -4.61891, 0.52 ) }
    dend_6 { pt3dadd( -27.2744, -183.443, -5.38412, 1.03 ) }
    dend_6 { pt3dadd( -27.2108, -183.496, -5.42936, 1.03 ) }
    dend_6 { pt3dadd( -26.2205, -184.45, -6.19166, 1.33 ) }
    dend_6 { pt3dadd( -25.2252, -185.557, -6.99302, 1.25 ) }
    dend_6 { pt3dadd( -24.8708, -186.036, -7.30067, 1.03 ) }
    dend_6 { pt3dadd( -23.9248, -187.829, -8.20127, 0.59 ) }
    dend_6 { pt3dadd( -23.465, -189.046, -8.68093, 0.59 ) }
    dend_6 { pt3dadd( -23.2255, -189.922, -8.94372, 1.18 ) }
    dend_6 { pt3dadd( -23.1629, -190.285, -9.01591, 1.84 ) }
    dend_6 { pt3dadd( -23.09, -191.082, -9.1133, 1.84 ) }
    dend_6 { pt3dadd( -23.0413, -192.849, -9.2643, 0.74 ) }
    dend_6 { pt3dadd( -22.9798, -194.108, -9.516, 1.03 ) }
    dend_6 { pt3dadd( -22.864, -195.069, -9.8567, 1.11 ) }
    dend_6 { pt3dadd( -22.7691, -195.565, -10.0938, 1.33 ) }
    dend_6 { pt3dadd( -22.5081, -196.53, -10.7271, 0.81 ) }
    dend_6 { pt3dadd( -22.2779, -197.154, -11.2575, 0.44 ) }
    dend_6 { pt3dadd( -21.0053, -200.092, -14.4147, 0.44 ) }
    dend_6 { pt3dadd( -20.7693, -200.62, -15.0776, 0.44 ) }
    dend_6 { pt3dadd( -20.7314, -200.73, -15.2535, 0.44 ) }
    dend_6 { pt3dadd( -20.5992, -201.618, -16.8518, 0.44 ) }
    dend_6 { pt3dadd( -20.6046, -201.655, -16.9202, 0.44 ) }
    dend_6 { pt3dadd( -20.7959, -202.138, -17.7364, 0.74 ) }
    dend_6 { pt3dadd( -21.1322, -202.639, -18.4627, 1.11 ) }
    dend_6 { pt3dadd( -21.9016, -204.189, -20.7934, 0.44 ) }
    dend_6 { pt3dadd( -22.0785, -204.763, -21.6636, 0.44 ) }
    dend_6 { pt3dadd( -22.2569, -205.988, -23.4146, 1.84 ) }
    dend_6 { pt3dadd( -22.259, -206.509, -24.1424, 2.5 ) }
    dend_6 { pt3dadd( -22.2461, -206.655, -24.3395, 2.5 ) }
    dend_6 { pt3dadd( -21.9818, -208.783, -26.9704, 0.59 ) }
    dend_6 { pt3dadd( -21.9046, -209.53, -27.8328, 0.59 ) }
    dend_6 { pt3dadd( -21.8484, -210.182, -28.6912, 0.59 ) }
    dend_6 { pt3dadd( -21.8454, -210.237, -28.7673, 0.59 ) }
    dend_6 { pt3dadd( -21.8476, -211.399, -30.3088, 1.77 ) }
    dend_6 { pt3dadd( -21.9109, -212.129, -31.2076, 2.06 ) }
    dend_6 { pt3dadd( -22.2252, -213.595, -32.8414, 1.99 ) }
    dend_6 { pt3dadd( -22.7157, -215.545, -34.9722, 0.81 ) }
    dend_6 { pt3dadd( -22.7301, -215.606, -35.0417, 0.81 ) }
    dend_6 { pt3dadd( -22.8672, -216.307, -35.8015, 0.66 ) }
    dend_6 { pt3dadd( -22.9739, -217.276, -36.7952, 0.52 ) }
    dend_6 { pt3dadd( -23.0373, -217.991, -37.5001, 1.84 ) }
    dend_6 { pt3dadd( -23.1162, -218.931, -38.3005, 2.28 ) }
    dend_6 { pt3dadd( -23.2403, -221.239, -40.1777, 0.66 ) }
    dend_6 { pt3dadd( -23.1978, -222.04, -40.8328, 0.66 ) }
    dend_6 { pt3dadd( -22.9852, -223.408, -41.9325, 1.77 ) }
    dend_6 { pt3dadd( -22.9638, -223.49, -41.9935, 1.77 ) }
    dend_6 { pt3dadd( -22.6889, -224.324, -42.5516, 2.21 ) }
    dend_6 { pt3dadd( -22.2538, -225.504, -43.1978, 2.21 ) }
    dend_6 { pt3dadd( -21.6713, -227.087, -43.8989, 0.74 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_6 { pt3dadd( -21.4248, -227.846, -44.2143, 0.37 ) }
    dend_6 { pt3dadd( -21.2457, -228.448, -44.4428, 0.29 ) }
    dend_6 { pt3dadd( -20.9399, -229.475, -44.8183, 1.11 ) }
    dend_6 { pt3dadd( -20.7178, -230.235, -45.1006, 1.4 ) }
    dend_6 { pt3dadd( -20.3747, -231.504, -45.5271, 0.59 ) }
    dend_6 { pt3dadd( -20.1324, -232.416, -45.8279, 0.29 ) }
    dend_6 { pt3dadd( -19.876, -233.405, -46.1598, 0.66 ) }
    dend_6 { pt3dadd( -19.7243, -234.015, -46.3873, 0.88 ) }
    dend_6 { pt3dadd( -19.4383, -235.341, -46.8939, 0.29 ) }
    dend_6 { pt3dadd( -19.2824, -236.175, -47.2091, 0.29 ) }
    dend_6 { pt3dadd( -19.1824, -236.826, -47.4405, 0.96 ) }
    dend_6 { pt3dadd( -19.0965, -237.517, -47.6785, 0.96 ) }
    dend_6 { pt3dadd( -18.8711, -239.028, -48.2051, 0.29 ) }
    dend_6 { pt3dadd( -18.6966, -239.776, -48.4998, 0.29 ) }
    dend_6 { pt3dadd( -18.3845, -240.541, -48.9104, 0.66 ) }
    dend_6 { pt3dadd( -18.3499, -240.606, -48.9868, 0.66 ) }
    dend_6 { pt3dadd( -18.1352, -240.999, -49.549, 0.66 ) }
    dend_6 { pt3dadd( -17.6827, -241.893, -51.0777, 0.44 ) }
    dend_6 { pt3dadd( -17.37, -242.609, -52.3855, 1.77 ) }
    dend_6 { pt3dadd( -16.9613, -243.656, -54.4001, 2.58 ) }
    dend_6 { pt3dadd( -15.8976, -246.805, -60.5846, 0.44 ) }
    dend_6 { pt3dadd( -15.8029, -247.144, -61.2399, 0.44 ) }
    dend_6 { pt3dadd( -15.4696, -248.643, -64.2453, 0.88 ) }
    dend_6 { pt3dadd( -15.3753, -249.357, -65.7202, 1.77 ) }
    dend_6 { pt3dadd( -15.3739, -249.398, -65.8055, 1.77 ) }
    dend_6 { pt3dadd( -15.3991, -249.663, -66.3064, 2.14 ) }
    dend_6 { pt3dadd( -15.497, -250.193, -66.9798, 2.43 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 27/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -17.6473, -117.761, -8.08075, 0.59 ) }
    dend_5 { pt3dadd( -16.7565, -118.399, -7.20001, 0.59 ) }
    dend_5 { pt3dadd( -15.6007, -119.035, -6.23629, 0.52 ) }
    dend_5 { pt3dadd( -14.8535, -119.352, -5.74495, 0.52 ) }
    dend_5 { pt3dadd( -13.7357, -119.628, -5.2137, 0.37 ) }
    dend_5 { pt3dadd( -13.5225, -119.661, -5.13369, 0.37 ) }
    dend_5 { pt3dadd( -12.5909, -119.753, -4.82798, 0.37 ) }
    dend_5 { pt3dadd( -11.7864, -119.749, -4.64825, 0.37 ) }
    dend_5 { pt3dadd( -10.7403, -119.638, -4.50214, 0.37 ) }
    dend_5 { pt3dadd( -9.10861, -119.379, -4.35247, 0.22 ) }
    dend_5 { pt3dadd( -8.63209, -119.302, -4.34532, 0.29 ) }
    dend_5 { pt3dadd( -7.72343, -119.149, -4.35066, 0.37 ) }
    // Section: dend_3, id: dend_3, parent: dend_1 (entry count 39/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 3.72414, -61.8034, -31.33, 0.37 ) }
    dend_3 { pt3dadd( 3.92082, -62.3318, -31.5975, 0.37 ) }
    dend_3 { pt3dadd( 4.19661, -63.0527, -31.8946, 0.29 ) }
    dend_3 { pt3dadd( 4.47493, -63.8043, -32.1646, 1.25 ) }
    dend_3 { pt3dadd( 4.60416, -64.1553, -32.28, 1.69 ) }
    dend_3 { pt3dadd( 4.6222, -64.2048, -32.2952, 1.69 ) }
    dend_3 { pt3dadd( 4.97062, -65.175, -32.5668, 0.29 ) }
    dend_3 { pt3dadd( 5.22791, -65.8827, -32.7226, 0.29 ) }
    dend_3 { pt3dadd( 5.50705, -66.6535, -32.8785, 1.77 ) }
    dend_3 { pt3dadd( 5.65469, -67.0701, -32.9481, 2.43 ) }
    dend_3 { pt3dadd( 5.76022, -67.3741, -32.999, 2.43 ) }
    dend_3 { pt3dadd( 6.17934, -68.6116, -33.2052, 0.22 ) }
    dend_3 { pt3dadd( 6.37553, -69.2326, -33.3072, 0.22 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 52/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 3.72414, -61.8034, -31.33, 1.77 ) }
    dend_2 { pt3dadd( 2.29149, -63.1773, -34.7345, 1.77 ) }
    dend_2 { pt3dadd( 0.866518, -64.7164, -38.2952, 1.03 ) }
    dend_2 { pt3dadd( -1.34158, -67.4048, -43.994, 2.14 ) }
    dend_2 { pt3dadd( -2.24139, -68.5484, -46.283, 0.52 ) }
    dend_2 { pt3dadd( -2.60347, -69.0199, -47.1968, 1.92 ) }
    dend_2 { pt3dadd( -2.82175, -69.3111, -47.743, 2.36 ) }
    dend_2 { pt3dadd( -4.49875, -71.9247, -52.1093, 0.29 ) }
    dend_2 { pt3dadd( -4.91511, -72.5948, -53.1245, 0.29 ) }
    dend_2 { pt3dadd( -5.82883, -74.1302, -55.1011, 0.29 ) }
    dend_2 { pt3dadd( -5.85491, -74.1682, -55.1505, 0.29 ) }
    dend_2 { pt3dadd( -6.05316, -74.4346, -55.4987, 1.69 ) }
    dend_2 { pt3dadd( -6.31251, -74.7879, -55.9557, 1.69 ) }
    dend_2 { pt3dadd( -7.98948, -77.2252, -59.2218, 0.22 ) }
    dend_2 { pt3dadd( -8.21654, -77.574, -59.7256, 0.22 ) }
    dend_2 { pt3dadd( -8.23562, -77.6093, -59.7801, 0.22 ) }
    dend_2 { pt3dadd( -8.43569, -78.0314, -60.4515, 1.03 ) }
    dend_2 { pt3dadd( -9.05585, -79.6302, -63.0292, 0.29 ) }
    dend_2 { pt3dadd( -9.49308, -81.2511, -65.5923, 1.99 ) }
    dend_2 { pt3dadd( -9.5296, -81.5226, -66.0083, 2.14 ) }
    dend_2 { pt3dadd( -9.73063, -83.4083, -68.9696, 0.37 ) }
    dend_2 { pt3dadd( -9.75369, -83.7213, -69.4699, 0.37 ) }
    dend_2 { pt3dadd( -9.75324, -84.1412, -70.1348, 0.88 ) }
    dend_2 { pt3dadd( -9.68328, -84.6216, -70.841, 1.03 ) }
    dend_2 { pt3dadd( -9.40313, -85.8644, -72.4668, 0.29 ) }
    dend_2 { pt3dadd( -9.39026, -85.9223, -72.5372, 0.29 ) }
    dend_2 { pt3dadd( -9.11263, -87.4119, -74.2307, 0.29 ) }
    dend_2 { pt3dadd( -9.03763, -88.1315, -75.0714, 1.99 ) }
    dend_2 { pt3dadd( -9.0215, -88.3673, -75.3475, 1.99 ) }
    dend_2 { pt3dadd( -8.92851, -90.1425, -77.3595, 0.29 ) }
    dend_2 { pt3dadd( -8.92024, -90.5896, -77.8251, 0.59 ) }
    dend_2 { pt3dadd( -8.90886, -92.3359, -79.5654, 0.44 ) }
    dend_2 { pt3dadd( -8.91812, -93.3712, -80.5603, 0.29 ) }
    dend_2 { pt3dadd( -8.92976, -93.8014, -80.9724, 1.11 ) }
    dend_2 { pt3dadd( -8.93048, -94.1587, -81.3124, 1.33 ) }
    dend_2 { pt3dadd( -8.91485, -96.6242, -83.8375, 0.22 ) }
    dend_2 { pt3dadd( -8.90966, -97.0648, -84.3427, 0.52 ) }
    dend_2 { pt3dadd( -8.87833, -98.3127, -85.9421, 0.29 ) }
    dend_2 { pt3dadd( -8.86529, -98.6516, -86.4168, 0.88 ) }
    dend_2 { pt3dadd( -8.8943, -99.0664, -87.1012, 0.88 ) }
    dend_2 { pt3dadd( -9.10215, -100.655, -89.9715, 0.29 ) }
    dend_2 { pt3dadd( -9.29953, -101.867, -92.326, 0.29 ) }
    dend_2 { pt3dadd( -9.50876, -102.871, -94.3169, 1.77 ) }
    dend_2 { pt3dadd( -9.57278, -103.132, -94.8455, 1.77 ) }
    dend_2 { pt3dadd( -10.1519, -105.213, -99.0624, 0.52 ) }
    dend_2 { pt3dadd( -10.2706, -105.598, -99.8097, 0.44 ) }
    dend_2 { pt3dadd( -10.371, -105.959, -100.469, 0.74 ) }
    dend_2 { pt3dadd( -10.3785, -105.993, -100.527, 0.74 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_2 { pt3dadd( -10.5428, -107.181, -102.444, 0.29 ) }
    dend_2 { pt3dadd( -10.5429, -107.225, -102.512, 0.29 ) }
    dend_2 { pt3dadd( -10.3027, -107.951, -103.465, 1.18 ) }
    dend_2 { pt3dadd( -10.19, -108.215, -103.808, 1.18 ) }
    dend_2 { pt3dadd( -9.63147, -109.341, -105.211, 0.22 ) }
    dend_2 { pt3dadd( -9.60737, -109.382, -105.258, 0.22 ) }
    dend_2 { pt3dadd( -8.99261, -110.257, -106.227, 0.81 ) }
    dend_2 { pt3dadd( -8.23814, -111.204, -107.346, 0.22 ) }
    dend_2 { pt3dadd( -7.90451, -111.563, -107.798, 0.81 ) }
    dend_2 { pt3dadd( -7.86405, -111.601, -107.858, 0.81 ) }
    dend_2 { pt3dadd( -7.67213, -111.747, -108.192, 0.81 ) }
    dend_2 { pt3dadd( -7.03509, -112.199, -109.968, 0.22 ) }
    dend_2 { pt3dadd( -6.89438, -112.288, -110.478, 0.44 ) }
    dend_2 { pt3dadd( -6.87537, -112.299, -110.558, 0.44 ) }
    dend_2 { pt3dadd( -6.30882, -112.634, -112.956, 1.33 ) }
    dend_2 { pt3dadd( -5.79581, -112.951, -115.098, 1.33 ) }
    dend_2 { pt3dadd( -4.7952, -113.58, -119.31, 0.29 ) }
    dend_2 { pt3dadd( -4.77094, -113.597, -119.414, 0.29 ) }
    dend_2 { pt3dadd( -4.61179, -113.723, -120.113, 0.29 ) }
    dend_2 { pt3dadd( -4.37328, -113.909, -120.999, 1.03 ) }
    dend_2 { pt3dadd( -4.29141, -113.97, -121.244, 1.03 ) }
    dend_2 { pt3dadd( -4.25926, -113.991, -121.317, 1.03 ) }
    dend_2 { pt3dadd( -2.98266, -114.708, -123.615, 0.22 ) }
    dend_2 { pt3dadd( -2.94381, -114.727, -123.685, 0.22 ) }
    dend_2 { pt3dadd( -2.02298, -115.106, -125.436, 0.29 ) }
    dend_2 { pt3dadd( -1.00365, -115.308, -127.593, 0.22 ) }
    dend_2 { pt3dadd( -0.799053, -115.319, -128.066, 0.66 ) }
    dend_2 { pt3dadd( -0.767155, -115.315, -128.143, 0.66 ) }
    dend_2 { pt3dadd( -0.57829, -115.26, -128.621, 0.66 ) }
    dend_2 { pt3dadd( -0.0427322, -115.048, -130.093, 0.15 ) }
    dend_2 { pt3dadd( 0.894851, -114.455, -133.123, 0.96 ) }
    dend_2 { pt3dadd( 1.39598, -114.063, -134.847, 1.4 ) }
    dend_2 { pt3dadd( 1.57697, -113.911, -135.526, 1.4 ) }
    dend_2 { pt3dadd( 1.66134, -113.836, -135.861, 1.4 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 34/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -57.3898, 200.358, -43.1248, 0.44 ) }
    dend_19 { pt3dadd( -59.9453, 208.504, -46.1755, 0.44 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 36/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -57.3898, 200.358, -43.1248, 0.44 ) }
    dend_18 { pt3dadd( -59.5492, 209.803, -46.5756, 0.44 ) }
    // Section: dend_14, id: dend_14, parent: dend_12 (entry count 38/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 23.5188, 122.279, -12.1445, 0.29 ) }
    dend_14 { pt3dadd( 24.4388, 124.666, -12.6092, 0.29 ) }
    dend_14 { pt3dadd( 24.8522, 125.738, -12.818, 0.29 ) }
    dend_14 { pt3dadd( 25.1984, 126.636, -12.9929, 1.03 ) }
    dend_14 { pt3dadd( 25.2258, 126.707, -13.0067, 1.03 ) }
    dend_14 { pt3dadd( 25.4253, 127.224, -13.1075, 1.4 ) }
    // Section: dend_13, id: dend_13, parent: dend_12 (entry count 44/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 23.5188, 122.279, -12.1445, 0.88 ) }
    dend_13 { pt3dadd( 23.6164, 123.715, -12.5083, 0.88 ) }
    dend_13 { pt3dadd( 23.8246, 124.804, -12.81, 0.29 ) }
    dend_13 { pt3dadd( 24.2521, 126.042, -13.2824, 0.29 ) }
    dend_13 { pt3dadd( 24.5768, 126.797, -13.5857, 0.44 ) }
    dend_13 { pt3dadd( 25.4876, 128.738, -14.3643, 1.25 ) }
    dend_13 { pt3dadd( 25.872, 129.517, -14.6699, 1.99 ) }
    dend_13 { pt3dadd( 26.5258, 130.617, -15.1082, 2.21 ) }
    dend_13 { pt3dadd( 28.1086, 132.999, -16.0691, 0.22 ) }
    dend_13 { pt3dadd( 28.7775, 133.991, -16.5144, 0.22 ) }
    dend_13 { pt3dadd( 29.1155, 134.482, -16.7345, 0.96 ) }
    dend_13 { pt3dadd( 29.4743, 135.035, -16.978, 1.77 ) }
    dend_13 { pt3dadd( 29.8614, 135.725, -17.2848, 2.21 ) }
    dend_13 { pt3dadd( 30.1858, 136.431, -17.6296, 2.21 ) }
    dend_13 { pt3dadd( 31.2126, 139.12, -18.9929, 0.22 ) }
    dend_13 { pt3dadd( 31.6095, 140.255, -19.6053, 0.22 ) }
    dend_13 { pt3dadd( 32.0602, 141.583, -20.3114, 1.18 ) }
    dend_13 { pt3dadd( 32.2229, 142.09, -20.5763, 1.33 ) }
    dend_13 { pt3dadd( 32.6552, 143.607, -21.3052, 0.81 ) }
    dend_13 { pt3dadd( 32.9791, 144.791, -21.8131, 0.22 ) }
    dend_13 { pt3dadd( 33.1913, 145.557, -22.0653, 0.29 ) }
    dend_13 { pt3dadd( 33.5691, 146.905, -22.4684, 0.22 ) }
    dend_13 { pt3dadd( 33.6322, 147.078, -22.5224, 0.22 ) }
    dend_13 { pt3dadd( 34.2323, 148.382, -23.0134, 0.22 ) }
    dend_13 { pt3dadd( 34.9403, 149.732, -23.5617, 1.33 ) }
    dend_13 { pt3dadd( 35.2755, 150.324, -23.8904, 1.69 ) }
    dend_13 { pt3dadd( 35.448, 150.652, -24.0941, 1.69 ) }
    dend_13 { pt3dadd( 36.4207, 152.505, -25.3074, 0.29 ) }
    dend_13 { pt3dadd( 37.0069, 153.554, -25.9762, 1.47 ) }
    dend_13 { pt3dadd( 37.2369, 153.933, -26.2119, 1.47 ) }
    dend_13 { pt3dadd( 37.9567, 155.06, -26.9001, 0.66 ) }
    dend_13 { pt3dadd( 38.9026, 156.516, -27.7308, 0.29 ) }
    dend_13 { pt3dadd( 39.3555, 157.244, -28.1098, 0.29 ) }
    dend_13 { pt3dadd( 39.9058, 158.177, -28.5027, 0.88 ) }
    dend_13 { pt3dadd( 40.2334, 158.711, -28.7367, 1.25 ) }
    dend_13 { pt3dadd( 41.0892, 160.088, -29.391, 0.29 ) }
    dend_13 { pt3dadd( 41.5883, 160.915, -29.7981, 0.22 ) }
    dend_13 { pt3dadd( 41.9724, 161.658, -30.2398, 0.66 ) }
    dend_13 { pt3dadd( 42.2044, 162.286, -30.6317, 0.81 ) }
    dend_13 { pt3dadd( 42.467, 163.46, -31.3229, 0.22 ) }
    dend_13 { pt3dadd( 42.5784, 164.191, -31.7141, 0.22 ) }
    dend_13 { pt3dadd( 42.6379, 164.879, -32.0977, 0.74 ) }
    dend_13 { pt3dadd( 42.6863, 165.935, -32.8419, 1.4 ) }
    dend_13 { pt3dadd( 42.7209, 167.42, -33.9963, 0.29 ) }
    dend_13 { pt3dadd( 42.7249, 168.44, -34.9275, 0.81 ) }
    dend_13 { pt3dadd( 42.727, 168.759, -35.2849, 0.96 ) }
    dend_13 { pt3dadd( 42.7471, 170.162, -37.383, 0.29 ) }
    dend_13 { pt3dadd( 42.7293, 171.223, -39.2251, 0.29 ) }
    dend_13 { pt3dadd( 42.7036, 171.609, -39.9376, 1.33 ) }
    dend_13 { pt3dadd( 42.5846, 172.473, -41.6825, 2.28 ) }
    dend_13 { pt3dadd( 42.3954, 173.486, -43.8636, 2.28 ) }
    dend_13 { pt3dadd( 41.9208, 175.265, -48.1323, 0.81 ) }
    dend_13 { pt3dadd( 41.841, 175.476, -48.6749, 0.88 ) }
    dend_13 { pt3dadd( 41.6314, 175.893, -49.7982, 0.29 ) }
    dend_13 { pt3dadd( 41.2761, 176.432, -51.3462, 0.37 ) }
    dend_13 { pt3dadd( 41.1124, 176.646, -51.929, 0.37 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_13 { pt3dadd( 40.4063, 177.591, -54.1417, 0.37 ) }
    dend_13 { pt3dadd( 40.1352, 178.029, -54.9999, 0.37 ) }
    dend_13 { pt3dadd( 39.6007, 179.236, -57.0512, 1.55 ) }
    dend_13 { pt3dadd( 39.4225, 179.835, -57.9129, 1.92 ) }
    dend_13 { pt3dadd( 39.1533, 181.81, -60.0238, 0.44 ) }
    dend_13 { pt3dadd( 39.1392, 182.761, -60.7835, 0.29 ) }
    dend_13 { pt3dadd( 39.2195, 183.852, -61.4087, 0.88 ) }
    dend_13 { pt3dadd( 39.3178, 184.441, -61.6871, 0.96 ) }
    dend_13 { pt3dadd( 39.4745, 185.077, -61.9142, 0.96 ) }
    dend_13 { pt3dadd( 40.1165, 187.169, -62.5206, 0.37 ) }
    dend_13 { pt3dadd( 40.7301, 188.915, -62.9157, 0.29 ) }
    dend_13 { pt3dadd( 41.1507, 189.93, -63.3295, 0.29 ) }
    dend_13 { pt3dadd( 41.8131, 191.43, -64.1357, 1.33 ) }
    dend_13 { pt3dadd( 42.1198, 192.087, -64.5896, 2.14 ) }
    dend_13 { pt3dadd( 42.3514, 192.574, -64.9908, 2.36 ) }
    dend_13 { pt3dadd( 42.5234, 192.931, -65.3692, 2.36 ) }
    dend_13 { pt3dadd( 44.0286, 195.992, -69.2357, 0.29 ) }
    dend_13 { pt3dadd( 44.3517, 196.669, -70.1926, 0.88 ) }
    dend_13 { pt3dadd( 44.659, 197.446, -71.3225, 1.4 ) }
    dend_13 { pt3dadd( 44.7977, 197.892, -71.966, 1.55 ) }
    dend_13 { pt3dadd( 45.1737, 199.436, -74.1053, 0.37 ) }
    dend_13 { pt3dadd( 45.2755, 200.002, -74.814, 0.37 ) }
    dend_13 { pt3dadd( 45.3908, 201.264, -76.1555, 1.18 ) }
    dend_13 { pt3dadd( 45.4776, 202.134, -77.0932, 1.47 ) }
    dend_13 { pt3dadd( 45.6235, 204.03, -78.9726, 0.29 ) }
    dend_13 { pt3dadd( 45.6392, 204.553, -79.4361, 0.44 ) }
    dend_13 { pt3dadd( 45.6234, 205.361, -80.0314, 0.29 ) }
    dend_13 { pt3dadd( 45.5271, 207.175, -81.258, 1.77 ) }
    dend_13 { pt3dadd( 45.4626, 208.181, -81.8432, 2.06 ) }
    dend_13 { pt3dadd( 45.4048, 209.143, -82.3024, 1.92 ) }
    dend_13 { pt3dadd( 45.217, 211.277, -82.9997, 0.22 ) }
    dend_13 { pt3dadd( 45.1265, 212.288, -83.2472, 0.22 ) }
    dend_13 { pt3dadd( 45.116, 212.397, -83.2602, 0.22 ) }
    dend_13 { pt3dadd( 45.0606, 213.258, -83.1844, 0.22 ) }
    dend_13 { pt3dadd( 45.0158, 214.631, -82.9261, 0.96 ) }
    dend_13 { pt3dadd( 45.0326, 215.055, -82.8232, 1.33 ) }
    dend_13 { pt3dadd( 45.0709, 215.487, -82.7049, 1.33 ) }
    dend_13 { pt3dadd( 45.1982, 216.746, -82.3784, 0.44 ) }
    dend_13 { pt3dadd( 45.4912, 219.077, -81.8415, 0.22 ) }
    dend_13 { pt3dadd( 45.5073, 219.183, -81.819, 0.22 ) }
    dend_13 { pt3dadd( 45.8148, 220.91, -81.3705, 0.22 ) }
    dend_13 { pt3dadd( 45.988, 221.841, -81.0781, 1.03 ) }
    dend_13 { pt3dadd( 46.1031, 222.4, -80.881, 1.62 ) }
    dend_13 { pt3dadd( 46.3125, 223.284, -80.5314, 1.62 ) }
    dend_13 { pt3dadd( 46.3643, 223.503, -80.4446, 1.62 ) }
    dend_13 { pt3dadd( 47.0753, 226.434, -79.2575, 0.22 ) }
    dend_13 { pt3dadd( 47.2312, 227.106, -78.9743, 0.66 ) }
    dend_13 { pt3dadd( 47.3886, 227.872, -78.6646, 0.66 ) }
    dend_13 { pt3dadd( 47.4771, 228.501, -78.4533, 0.59 ) }
    dend_13 { pt3dadd( 47.5562, 229.656, -78.1774, 0.22 ) }
    dend_13 { pt3dadd( 47.5647, 230.174, -78.112, 0.66 ) }
    dend_13 { pt3dadd( 47.5206, 230.745, -78.1182, 0.88 ) }
    dend_13 { pt3dadd( 47.4092, 231.704, -78.1391, 0.44 ) }
    dend_13 { pt3dadd( 47.1633, 233.254, -78.1939, 0.22 ) }
    dend_13 { pt3dadd( 46.9682, 234.371, -78.243, 0.81 ) }
    dend_13 { pt3dadd( 46.8369, 235.108, -78.2748, 1.18 ) }
    dend_13 { pt3dadd( 46.4667, 237.204, -78.3654, 0.22 ) }
    dend_13 { pt3dadd( 46.4531, 237.298, -78.3797, 0.22 ) }
    dend_13 { pt3dadd( 46.2487, 238.893, -78.7554, 0.22 ) }
    dend_13 { pt3dadd( 46.1644, 239.889, -79.0499, 1.03 ) }
    dend_13 { pt3dadd( 46.141, 240.529, -79.2629, 1.33 ) }
    dend_13 { pt3dadd( 46.1493, 241.172, -79.4968, 1.33 ) }
    dend_13 { pt3dadd( 46.4834, 244.726, -80.8558, 0.22 ) }
    dend_13 { pt3dadd( 46.4943, 244.816, -80.8918, 0.22 ) }
    dend_13 { pt3dadd( 46.8381, 246.804, -81.7664, 0.22 ) }
    dend_13 { pt3dadd( 46.98, 247.487, -82.0813, 0.59 ) }
    dend_13 { pt3dadd( 47.0016, 247.573, -82.1205, 0.59 ) }
    dend_13 { pt3dadd( 47.3651, 248.77, -82.5845, 0.74 ) }
    // Section: dend_8, id: dend_8, parent: dend_6 (entry count 68/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -15.497, -250.193, -66.9798, 0.37 ) }
    dend_8 { pt3dadd( -13.8723, -251.731, -66.6649, 0.37 ) }
    dend_8 { pt3dadd( -12.8487, -252.733, -66.4695, 0.29 ) }
    dend_8 { pt3dadd( -11.6065, -254.013, -66.2261, 0.29 ) }
    dend_8 { pt3dadd( -10.7378, -254.974, -66.0499, 0.88 ) }
    dend_8 { pt3dadd( -10.4535, -255.31, -66.0056, 1.11 ) }
    dend_8 { pt3dadd( -10.3925, -255.387, -65.998, 1.11 ) }
    dend_8 { pt3dadd( -10.1047, -255.85, -65.9876, 1.11 ) }
    dend_8 { pt3dadd( -9.57145, -256.918, -66.0936, 0.29 ) }
    dend_8 { pt3dadd( -9.24902, -257.705, -66.247, 0.29 ) }
    dend_8 { pt3dadd( -8.91091, -258.638, -66.4585, 0.74 ) }
    dend_8 { pt3dadd( -8.76858, -259.026, -66.5698, 0.88 ) }
    dend_8 { pt3dadd( -8.53915, -259.651, -66.7683, 0.59 ) }
    dend_8 { pt3dadd( -8.04635, -260.99, -67.2246, 0.29 ) }
    dend_8 { pt3dadd( -7.98408, -261.141, -67.2795, 0.29 ) }
    dend_8 { pt3dadd( -7.61031, -261.95, -67.5392, 0.29 ) }
    dend_8 { pt3dadd( -7.16644, -262.847, -67.7625, 1.11 ) }
    dend_8 { pt3dadd( -6.87104, -263.361, -67.9314, 1.4 ) }
    dend_8 { pt3dadd( -6.55658, -263.88, -68.0987, 1.4 ) }
    dend_8 { pt3dadd( -5.52154, -265.499, -68.5706, 0.22 ) }
    dend_8 { pt3dadd( -4.9201, -266.428, -68.8596, 0.22 ) }
    dend_8 { pt3dadd( -4.49639, -267.074, -69.0807, 0.81 ) }
    dend_8 { pt3dadd( -3.24785, -268.922, -69.7099, 0.81 ) }
    // Section: dend_7, id: dend_7, parent: dend_6 (entry count 91/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -15.497, -250.193, -66.9798, 0.96 ) }
    dend_7 { pt3dadd( -15.3726, -251.067, -70.5663, 0.96 ) }
    dend_7 { pt3dadd( -15.0731, -252.435, -75.5463, 0.96 ) }
    dend_7 { pt3dadd( -14.8927, -253.143, -77.9588, 0.66 ) }
    dend_7 { pt3dadd( -14.7516, -253.642, -79.4975, 1.4 ) }
    dend_7 { pt3dadd( -14.7071, -253.783, -79.8979, 1.4 ) }
    dend_7 { pt3dadd( -14.2889, -255.007, -83.1937, 0.44 ) }
    dend_7 { pt3dadd( -14.0698, -255.417, -84.137, 0.37 ) }
    dend_7 { pt3dadd( -14.0475, -255.456, -84.2031, 0.37 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_7 { pt3dadd( -13.3794, -256.581, -85.9557, 0.29 ) }
    dend_7 { pt3dadd( -13.0186, -257.101, -86.7434, 1.47 ) }
    dend_7 { pt3dadd( -12.9377, -257.21, -86.9117, 1.77 ) }
    dend_7 { pt3dadd( -12.6549, -257.543, -87.4566, 1.99 ) }
    dend_7 { pt3dadd( -12.1221, -258.121, -88.5308, 1.99 ) }
    dend_7 { pt3dadd( -11.1504, -259.115, -90.4485, 0.44 ) }
    dend_7 { pt3dadd( -10.6213, -259.608, -91.5294, 0.81 ) }
    dend_7 { pt3dadd( -9.95721, -260.166, -93.0548, 0.52 ) }
    dend_7 { pt3dadd( -9.00315, -260.959, -95.3188, 0.44 ) }
    dend_7 { pt3dadd( -8.5139, -261.355, -96.5275, 1.11 ) }
    dend_7 { pt3dadd( -8.29023, -261.532, -97.096, 1.11 ) }
    dend_7 { pt3dadd( -7.08002, -262.4, -100.244, 1.4 ) }
    dend_7 { pt3dadd( -5.76423, -263.263, -103.9, 1.55 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
    ModelViewParmSubset_2 = new SectionList()
    dend_9 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()

    // Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_9, dend_0, axon_0, dend_15, dend_10, dend_4, dend_1, axon_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
    ModelViewParmSubset_5 = new SectionList()
    dend_9 ModelViewParmSubset_5.append()
    dend_0 ModelViewParmSubset_5.append()
    axon_0 ModelViewParmSubset_5.append()
    dend_15 ModelViewParmSubset_5.append()
    dend_10 ModelViewParmSubset_5.append()
    dend_4 ModelViewParmSubset_5.append()
    dend_1 ModelViewParmSubset_5.append()
    axon_1 ModelViewParmSubset_5.append()
    dend_17 ModelViewParmSubset_5.append()
    dend_16 ModelViewParmSubset_5.append()
    dend_12 ModelViewParmSubset_5.append()
    dend_11 ModelViewParmSubset_5.append()
    dend_6 ModelViewParmSubset_5.append()
    dend_5 ModelViewParmSubset_5.append()
    dend_3 ModelViewParmSubset_5.append()
    dend_2 ModelViewParmSubset_5.append()
    dend_19 ModelViewParmSubset_5.append()
    dend_18 ModelViewParmSubset_5.append()
    dend_14 ModelViewParmSubset_5.append()
    dend_13 ModelViewParmSubset_5.append()
    dend_8 ModelViewParmSubset_5.append()
    dend_7 ModelViewParmSubset_5.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_10 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_4 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_1 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_17 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_11 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_6 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_2 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_13 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_7 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_9 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_0 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_15 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_16 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_3 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_12 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_5 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_14 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_19 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_18 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_8 OneSecGrp_SectionRef_22.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_19, dend_18, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_7 all.append()
    dend_7 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.993125  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.0  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.005611  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.068459995  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.517764  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 6.3E-5  // units: S cm-2
        e_pas_nml2 = -64.6017  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 3.45E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.077616  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.002099  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 1.13999995E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.26087198  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-5  // units: S cm-2
        e_pas_nml2 = -69.78141  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 3.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.395881  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009986  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 5.0100003E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009728  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 2.7999999E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cACint_237_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cACint_237_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_10 nseg = 5
    dend_4 nseg = 5
    dend_1 nseg = 3
    dend_17 nseg = 9
    dend_11 nseg = 3
    dend_6 nseg = 9
    dend_2 nseg = 7
    dend_13 nseg = 9
    dend_7 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cACint209_L4_BTC_8af90b418f_0_0


