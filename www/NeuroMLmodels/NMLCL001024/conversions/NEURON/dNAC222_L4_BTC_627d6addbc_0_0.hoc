// Cell: dNAC222_L4_BTC_627d6addbc_0_0
/*
{
  "id" : "dNAC222_L4_BTC_627d6addbc_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-1.49721, 11.7986, 0.0301706, 2.4623", "-1.37308, 10.661, 0.0290426, 4.20373", "-1.24895, 9.52332, 0.0279145, 5.59272", "-1.12482, 8.38566, 0.0267864, 6.71614", "-1.00068, 7.248, 0.0256584, 7.74544", "-0.87655, 6.11034, 0.0245303, 8.57739", "-0.752417, 4.97268, 0.0234023, 9.13171", "-0.628284, 3.83502, 0.0222742, 9.51195", "-0.504152, 2.69736, 0.0211462, 9.92921", "-0.380019, 1.5597, 0.0200181, 10.275", "-0.255886, 0.422041, 0.01889, 10.4231", "-0.131754, -0.715618, 0.017762, 10.4046", "-0.00762106, -1.85328, 0.0166339, 10.4069", "0.116512, -2.99094, 0.0155059, 10.1383", "0.240644, -4.1286, 0.0143778, 9.53645", "0.364777, -5.26626, 0.0132498, 8.49552", "0.48891, -6.40392, 0.0121217, 7.50349", "0.613042, -7.54158, 0.0109937, 6.64245", "0.737175, -8.67924, 0.0098656, 6.01482", "0.861308, -9.8169, 0.00873754, 4.86867", "0.98544, -10.9546, 0.00760949, 2.96361" ]
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-1.78536, 10.9696, 1.5043, 2.36", "-1.78536, 10.9696, 1.5043, 2.36", "-2.03267, 12.358, 1.87902, 2.06", "-2.32269, 13.8128, 2.32017, 2.06", "-2.35561, 13.9497, 2.36346, 2.06", "-2.77476, 15.5433, 2.86939, 2.21", "-3.42356, 17.7659, 3.69287, 2.21", "-3.93004, 19.2289, 4.29753, 2.21", "-3.9599, 19.3044, 4.3342, 2.21", "-4.56728, 20.7307, 5.08312, 2.21", "-4.84838, 21.3636, 5.42868, 2.36", "-5.7153, 23.1934, 6.5053, 2.43", "-6.27029, 24.295, 7.13535, 2.65", "-7.12268, 26.0163, 8.16168, 2.65" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999821452163534
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "0.094648, -9.74991, 0.0043065, 4.86", "0.094648, -9.74991, 0.0043065, 4.86", "-0.180568, -10.5909, -0.0232262, 4.57", "-0.485673, -11.5071, -0.0596032, 4.2", "-1.03042, -13.1514, -0.129776, 2.87", "-1.46849, -14.5482, -0.205375, 2.58", "-1.94635, -16.1364, -0.299959, 2.5", "-2.27989, -17.3261, -0.359589, 2.58", "-2.29062, -17.369, -0.361377, 2.58", "-2.40171, -17.9445, -0.378522, 2.73", "-2.56647, -19.3097, -0.397978, 2.73", "-2.60158, -20.2162, -0.372352, 2.36", "-2.57923, -21.3396, -0.295808, 2.65", "-2.52284, -22.3279, -0.207071, 2.87", "-2.45024, -23.2869, -0.116298, 3.09", "-2.35554, -24.176, -0.0288806, 3.09", "-2.19284, -25.3459, 0.0912683, 3.32", "-2.10228, -25.9216, 0.14661, 3.02", "-1.90814, -27.1061, 0.239499, 2.43", "-1.67883, -28.4907, 0.347109, 2.36", "-1.53747, -29.3963, 0.408687, 2.36", "-1.45796, -29.8501, 0.429497, 2.36" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999821452163534
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "0.98544, -10.9546, 0.00760949, 0.674351", "2.61247, -25.8661, 0.00760949, 0.674351", "4.23949, -40.7776, 0.00760949, 0.674351" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-7.12268, 26.0163, 8.16168, 1.4", "-7.999, 27.7462, 8.49319, 1.4", "-8.72353, 29.251, 8.75333, 1.18", "-9.20892, 30.3268, 8.91349, 1.18", "-9.70314, 31.4656, 9.06706, 1.18", "-10.1581, 32.5594, 9.19539, 1.62", "-10.4323, 33.2612, 9.28894, 1.99", "-10.4602, 33.351, 9.29959, 1.99", "-10.7521, 34.4781, 9.40375, 2.06", "-10.787, 34.6518, 9.41738, 2.06", "-10.9788, 35.9735, 9.49433, 1.62", "-11.1534, 37.7236, 9.61567, 1.4", "-11.1629, 37.8508, 9.62504, 1.4", "-11.2366, 39.2705, 9.72609, 1.47", "-11.2719, 40.523, 9.81063, 1.77", "-11.2906, 41.6167, 9.8689, 1.92", "-11.2958, 43.1502, 9.91664, 1.11", "-11.3031, 43.5046, 9.91791, 1.11", "-11.3472, 44.1892, 9.92758, 1.11", "-11.377, 44.4371, 9.93462, 1.11", "-11.6441, 45.9702, 9.99306, 0.96", "-11.8825, 46.961, 10.0023, 0.96", "-12.1749, 47.9267, 9.98081, 1.55", "-12.4697, 48.8027, 9.94349, 2.36", "-12.7363, 49.604, 9.89496, 2.5", "-12.9425, 50.2343, 9.84813, 2.8", "-13.3691, 51.5735, 9.73229, 2.43", "-13.7078, 52.7046, 9.62243, 1.99", "-14.1828, 54.7212, 9.46171, 1.4", "-14.3452, 55.7774, 9.39403, 1.4", "-14.3638, 56.0405, 9.38618, 1.4", "-14.3465, 57.3124, 9.38342, 1.62", "-14.3389, 57.3953, 9.38769, 1.62", "-14.0826, 59.2754, 9.55738, 1.03", "-13.8432, 60.719, 9.77512, 1.03", "-13.6441, 61.9838, 10.0184, 1.47", "-13.4097, 63.546, 10.3506, 1.69", "-13.1695, 65.3985, 10.7717, 1.69", "-13.0657, 66.703, 11.0698, 2.14", "-13.0476, 68.1188, 11.3858, 2.8", "-13.104, 69.4062, 11.6785, 3.24", "-13.1886, 70.2352, 11.8485, 3.39", "-13.3937, 71.4684, 12.0765, 2.21", "-13.7238, 73.0036, 12.3111, 1.33", "-14.0899, 74.3838, 12.4837, 1.18", "-14.1353, 74.5296, 12.4938, 1.18", "-14.5931, 75.9175, 12.5422, 1.47", "-14.8608, 76.7082, 12.5695, 1.62" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-7.12268, 26.0163, 8.16168, 1.03", "-5.85593, 26.8436, 8.22773, 1.03", "-5.72167, 26.9268, 8.23433, 1.03", "-4.67926, 27.5534, 8.28278, 1.03", "-3.27767, 28.3813, 8.3461, 1.4", "-3.21653, 28.4167, 8.35072, 1.4", "-1.53177, 29.3987, 8.50543, 1.4", "-1.46789, 29.4356, 8.51207, 1.4", "-0.512596, 30.0264, 8.62419, 1.55", "-0.446355, 30.0703, 8.63313, 1.55", "0.900678, 31.1004, 8.83754, 0.96", "1.57377, 31.6776, 8.94566, 0.96", "2.11831, 32.2436, 9.04257, 1.18", "2.70066, 32.9217, 9.14245, 1.4", "2.78918, 33.0403, 9.15234, 1.4", "3.28263, 33.7392, 9.16708, 1.4", "3.3357, 33.8163, 9.16372, 1.4", "3.91542, 34.6178, 9.11754, 1.69", "4.34442, 35.1706, 9.08257, 1.92", "4.94885, 35.923, 9.04821, 1.4", "5.73071, 36.9082, 9.02212, 1.11", "6.45786, 37.8196, 9.01042, 1.11", "6.51776, 37.8974, 9.01073, 1.11", "7.17112, 38.7727, 9.02912, 1.11", "7.69554, 39.5347, 9.06381, 1.03", "8.24592, 40.4189, 9.13209, 1.03", "8.29036, 40.5054, 9.1383, 1.03", "8.79886, 41.6766, 9.21423, 1.03", "8.82227, 41.7409, 9.21766, 1.03", "9.05389, 42.6074, 9.24947, 0.81", "9.06923, 42.7076, 9.25066, 0.81", "9.10705, 43.4691, 9.25719, 0.59", "9.10277, 43.6145, 9.25808, 0.59", "9.03181, 44.3564, 9.27823, 0.59", "9.0095, 44.6282, 9.28956, 0.59", "8.97236, 45.276, 9.32264, 0.74", "8.96972, 45.3771, 9.32835, 0.74", "9.01, 46.5179, 9.3978, 0.74", "9.09971, 47.3805, 9.4501, 1.25", "9.23215, 48.0513, 9.49016, 1.69", "9.48458, 48.9994, 9.5418, 1.4", "9.50545, 49.0646, 9.54495, 1.4", "9.76474, 49.8558, 9.57638, 2.06", "10.0643, 50.7357, 9.60501, 2.21", "10.3801, 51.6681, 9.62661, 1.77", "10.7271, 52.7239, 9.65252, 1.11", "10.9782, 53.5485, 9.6731, 1.11", "11.1968, 54.3493, 9.69277, 1.4", "11.4496, 55.4373, 9.71903, 0.59", "11.4621, 55.5044, 9.7206, 0.59", "11.581, 56.508, 9.76734, 0.44", "11.6156, 57.283, 9.8215, 1.11", "11.6128, 57.8643, 9.87332, 1.33", "11.6096, 57.9981, 9.88281, 1.33", "11.5821, 58.4061, 9.90097, 1.33", "11.5102, 59.3522, 9.9098, 0.52", "11.3887, 60.5872, 9.88362, 0.52", "11.3811, 60.664, 9.87973, 0.52", "11.306, 61.4409, 9.79275, 0.96", "11.2367, 62.3725, 9.6099, 1.55", "11.1971, 63.1184, 9.36759, 1.77", "11.1848, 63.4922, 9.199, 1.99", "11.1837, 63.5431, 9.17394, 1.99", "11.1708, 64.4875, 8.72198, 1.99", "11.1636, 65.312, 8.33273, 1.4", "11.174, 66.7292, 7.65735, 0.44", "11.185, 67.5863, 7.25584, 0.96", "11.2053, 68.2436, 6.96747, 1.4", "11.2351, 68.9511, 6.68974, 1.77", "11.2392, 69.0078, 6.67223, 1.77", "11.291, 69.5484, 6.56613, 1.99", "11.3115, 69.6996, 6.55577, 1.99", "11.3858, 70.1935, 6.54801, 1.99", "11.4039, 70.3288, 6.54621, 1.99", "11.4736, 70.9736, 6.51849, 1.69", "11.529, 71.773, 6.47217, 1.11", "11.5563, 72.5793, 6.41895, 0.44", "11.5563, 73.5567, 6.35176, 0.37", "11.5093, 74.4574, 6.28281, 1.03", "11.4574, 75.1912, 6.25096, 1.03", "11.3968, 76.0872, 6.23774, 0.44", "11.3658, 76.6294, 6.24203, 0.88", "11.3509, 77.1255, 6.2551, 1.18", "11.3524, 77.7979, 6.28308, 1.18", "11.4429, 79.3074, 6.35782, 0.37", "11.5352, 80.1249, 6.40603, 0.37", "11.7344, 81.3087, 6.46261, 1.33", "11.8993, 82.143, 6.49739, 2.36", "12.0036, 82.6022, 6.51037, 2.95", "12.1444, 83.1129, 6.50923, 3.24", "12.1676, 83.1981, 6.5007, 3.24", "12.2298, 83.4439, 6.46982, 3.24" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-1.45796, -29.8501, 0.429497, 2.06", "-1.43028, -31.1167, 0.531573, 2.06", "-1.37564, -33.3539, 0.47352, 2.06", "-1.32353, -34.909, 0.321101, 2.06", "-1.22845, -36.5071, 0.0992335, 2.06", "-1.05045, -38.5313, -0.261375, 2.14", "-0.897801, -39.9241, -0.53199, 2.14", "-0.618875, -42.011, -1.05988, 2.43", "-0.462838, -43.1619, -1.39862, 2.8", "-0.242159, -44.7252, -1.84183, 2.36", "0.0701845, -46.8481, -2.42907, 2.36", "0.32888, -48.4741, -2.84964, 2.36", "0.621526, -50.4227, -3.32833, 2.36", "0.868443, -52.4478, -3.77874, 2.14", "1.0224, -54.2784, -4.20845, 2.14", "1.08752, -56.077, -4.65763, 2.28", "1.07903, -56.7367, -4.82606, 2.28", "0.96401, -58.3921, -5.26764, 1.69", "0.724476, -60.1822, -5.67056, 1.18", "0.47956, -61.2381, -5.82544, 1.18", "0.189317, -61.9622, -5.78148, 1.18", "-0.275982, -62.7113, -5.4977, 1.18", "-0.888877, -63.4302, -5.01155, 0.96", "-2.01631, -64.4387, -4.05152, 1.11", "-3.24083, -65.3437, -3.10902, 1.69", "-4.57812, -66.2699, -2.2299, 1.55", "-5.40284, -66.807, -1.85147, 1.92", "-6.20578, -67.3326, -1.63239, 2.21", "-7.30818, -68.1123, -1.56737, 2.06", "-8.71675, -69.1787, -1.73935, 1.99", "-9.80678, -70.0792, -1.9892, 1.77", "-11.0405, -71.2005, -2.28068, 1.92", "-12.1267, -72.2993, -2.47859, 1.84", "-13.1658, -73.4799, -2.50796, 1.69", "-13.8203, -74.3523, -2.38233, 1.11", "-14.527, -75.5313, -2.08447, 0.96", "-15.2183, -76.9866, -1.62684, 1.25", "-15.5525, -77.8759, -1.35151, 0.81", "-16.1396, -79.8492, -0.986974, 0.74", "-16.403, -80.9546, -0.944625, 0.37", "-16.6916, -82.6928, -1.16538, 1.47", "-16.7679, -83.5277, -1.40919, 2.14", "-16.8358, -85.1052, -2.14177, 2.5", "-16.8289, -87.0974, -3.38427, 1.03", "-16.7984, -88.1237, -4.15879, 0.88", "-16.7357, -88.9099, -4.78561, 0.44", "-16.5514, -90.2397, -5.89881, 0.44", "-16.2559, -91.7709, -7.19278, 1.18", "-15.8632, -93.5113, -8.58042, 1.62", "-15.8372, -93.623, -8.66311, 1.62", "-15.5589, -94.8231, -9.47283, 1.62", "-15.2059, -96.666, -10.5583, 1.47", "-15.029, -97.8819, -11.1318, 1.99", "-14.9617, -98.8738, -11.4848, 1.99", "-14.9701, -99.7784, -11.732, 1.99", "-15.1079, -101.51, -12.1477, 0.59", "-15.3296, -102.762, -12.3967, 0.52", "-15.5774, -103.683, -12.482, 0.52", "-16.3294, -105.814, -12.561, 2.8", "-16.6637, -106.671, -12.5691, 3.17", "-17.0164, -107.519, -12.49, 3.46", "-17.3352, -108.322, -12.2712, 3.46", "-18.07, -110.277, -11.6037, 1.69", "-18.4681, -111.458, -11.0895, 1.11", "-18.6732, -112.183, -10.6678, 1.25", "-19.164, -114.127, -9.38306, 1.99", "-19.5558, -116.065, -7.91518, 1.47" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-1.45796, -29.8501, 0.429497, 0.96", "-0.372017, -30.8895, -1.2588, 0.96", "0.555917, -31.7137, -2.63043, 0.81", "2.0079, -32.8382, -4.52532, 0.59", "2.40529, -33.1008, -4.98617, 0.88", "2.80095, -33.3236, -5.39639, 1.11", "2.86666, -33.3545, -5.45874, 1.11", "3.78962, -33.5915, -6.2375, 1.25", "4.57357, -33.7219, -6.9947, 0.88", "5.42876, -33.8308, -7.9244, 0.52", "5.84866, -33.908, -8.55447, 0.81", "6.40091, -34.0693, -9.61804, 0.96", "7.14572, -34.4194, -11.4906, 0.52", "7.69073, -35.0789, -14.2509, 0.52", "7.69157, -35.1033, -14.3285, 0.52", "7.3658, -35.9174, -16.2274, 0.96", "7.19553, -36.2292, -16.7904, 1.11", "6.94229, -36.6257, -17.3527, 1.11", "6.14575, -37.9282, -18.7494, 0.66", "5.82656, -38.5791, -19.336, 0.37", "5.53646, -39.5549, -20.2278, 0.37", "5.49345, -40.2447, -20.8853, 0.59", "5.49998, -40.3024, -20.9444, 0.59", "5.81493, -41.2243, -21.964, 1.03", "6.23309, -42.0329, -22.9261, 1.69", "6.72441, -42.9283, -24.0274, 2.21", "7.14403, -43.728, -25.0012, 2.8", "7.3019, -44.0871, -25.428, 2.8", "7.91984, -45.8398, -27.3945, 1.33", "8.2397, -47.0852, -28.6617, 0.52", "8.34599, -47.7351, -29.2413, 0.66", "8.40008, -48.248, -29.6262, 0.66", "8.47811, -49.0076, -30.118, 0.29", "8.54882, -49.6792, -30.4997, 0.37", "8.65107, -50.4483, -30.7638, 0.37", "8.69032, -50.5407, -30.7974, 0.37", "9.22755, -51.2285, -31.2272, 0.66", "9.74831, -51.7919, -31.6709, 0.96", "9.79244, -51.8357, -31.7081, 0.96", "10.2941, -52.335, -32.1409, 0.96", "11.2856, -53.3655, -33.0994, 0.52", "12.1527, -54.3186, -33.9686, 0.37", "13.1743, -55.4874, -35.0477, 1.77", "13.5703, -55.9629, -35.4758, 2.36", "14.0002, -56.4943, -35.9492, 2.58", "15.2999, -58.1798, -37.423, 0.74", "15.7133, -58.7733, -37.8677, 0.74" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "4.23949, -40.7776, 0.00760949, 0.15", "5.86652, -55.6891, 0.00760949, 0.15", "7.49354, -70.6006, 0.00760949, 0.15" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-14.8608, 76.7082, 12.5695, 0.81", "-15.4399, 77.4748, 12.4883, 0.81", "-16.1751, 78.5054, 12.367, 0.74", "-16.8031, 79.4243, 12.2632, 0.74", "-16.8492, 79.4932, 12.2524, 0.74", "-17.6948, 80.7798, 12.0319, 0.74", "-18.1011, 81.3923, 11.9056, 1.33", "-18.5009, 82.0098, 11.7429, 1.92", "-18.9311, 82.679, 11.537, 1.33", "-19.5526, 83.5951, 11.2454, 1.11", "-20.024, 84.2478, 11.0323, 1.47", "-20.6683, 85.0743, 10.7693, 1.18", "-20.7057, 85.1205, 10.7547, 1.18", "-21.289, 85.841, 10.5295, 0.66", "-21.813, 86.5308, 10.3139, 0.66", "-22.4553, 87.4601, 10.05, 1.47", "-22.8375, 88.1001, 9.90494, 1.99", "-23.2789, 88.9458, 9.75978, 1.99", "-23.9806, 90.4671, 9.54981, 0.66", "-24.3349, 91.3733, 9.45393, 0.52", "-24.5464, 92.0217, 9.40966, 0.59", "-24.9343, 93.3203, 9.42578, 0.74", "-24.9591, 93.4042, 9.43102, 0.74", "-25.2155, 94.1697, 9.52292, 1.33", "-25.4425, 94.7781, 9.62556, 1.62", "-25.8297, 95.6456, 9.78025, 1.18", "-26.3521, 96.6282, 9.90192, 0.66", "-26.7951, 97.376, 9.95677, 0.66", "-27.6471, 98.7126, 10.0324, 2.28", "-28.1195, 99.3823, 10.0623, 2.73", "-28.5428, 99.9463, 10.0777, 2.95", "-29.6598, 101.381, 10.0829, 1.03", "-29.7061, 101.439, 10.0818, 1.03", "-30.1673, 102.017, 10.0764, 0.81", "-30.7034, 102.688, 10.0823, 0.44", "-31.2492, 103.395, 10.1035, 0.44", "-31.8774, 104.234, 10.1487, 0.44", "-32.4861, 105.037, 10.2178, 1.11", "-32.9387, 105.63, 10.2687, 1.69", "-33.5422, 106.431, 10.335, 2.21", "-33.9044, 106.911, 10.3741, 2.5", "-34.8185, 108.066, 10.4735, 1.25", "-35.643, 109.082, 10.5618, 0.44", "-36.3161, 109.901, 10.6316, 0.44", "-36.8497, 110.54, 10.6874, 1.03", "-37.4319, 111.252, 10.7476, 1.33", "-37.5766, 111.434, 10.7623, 1.33", "-37.9085, 111.862, 10.7955, 1.47", "-38.5061, 112.626, 10.8555, 0.88", "-39.0309, 113.266, 10.9098, 0.59", "-39.5819, 113.898, 10.969, 0.44", "-39.6478, 113.968, 10.9763, 0.44", "-40.4714, 114.76, 11.0726, 0.44", "-40.9135, 115.119, 11.1276, 0.66", "-41.1101, 115.261, 11.153, 0.66", "-41.7124, 115.685, 11.2313, 0.66", "-42.3045, 116.157, 11.3202, 0.66", "-42.8485, 116.695, 11.4106, 0.37", "-43.2159, 117.175, 11.4657, 0.37", "-43.7279, 118.013, 11.5243, 0.66", "-44.0242, 118.654, 11.5287, 0.96", "-44.3361, 119.598, 11.4887, 0.29", "-44.523, 120.336, 11.439, 0.44", "-44.6848, 121.119, 11.3726, 0.96", "-44.7098, 121.247, 11.3606, 0.96", "-44.9618, 122.412, 11.2396, 1.77", "-45.2623, 123.531, 11.1262, 2.95", "-45.438, 124.077, 10.9485, 3.54", "-45.4592, 124.141, 10.9192, 3.54", "-45.6774, 124.837, 10.5495, 3.76", "-45.6953, 124.897, 10.514, 3.76", "-45.9356, 125.737, 9.95756, 3.46", "-46.6851, 128.624, 7.94767, 0.81", "-46.7009, 128.693, 7.90283, 0.81", "-46.8335, 129.29, 7.56146, 0.81", "-46.8471, 129.356, 7.53321, 0.81", "-46.9903, 130.193, 7.3365, 1.11", "-47.0762, 130.823, 7.2992, 1.25", "-47.2129, 132.002, 7.43892, 0.37", "-47.3219, 132.954, 7.56241, 0.29", "-47.5074, 134.378, 7.70115, 0.29", "-47.729, 135.934, 7.81061, 0.29", "-47.7422, 136.016, 7.81407, 0.29", "-47.9281, 137.04, 7.84797, 0.29", "-47.9499, 137.159, 7.84782, 0.29", "-48.1717, 138.382, 7.7305, 0.44", "-48.1996, 138.485, 7.69387, 0.44", "-48.4348, 138.954, 7.41751, 0.44", "-53.6382, 147.623, 6.95134, 0.44", "-59.009, 156.209, 6.7384, 0.44", "-64.1766, 164.847, 5.66581, 0.44", "-67.9385, 173.753, 2.75562, 0.44", "-72.1535, 181.866, -1.68238, 0.44", "-74.9847, 189.369, -8.0113, 0.44", "-78.2623, 195.452, -15.6723, 0.44", "-79.4025, 203.276, -22.1089, 0.44", "-80.2602, 211.453, -28.0916, 0.44", "-80.697, 218.768, -35.2419, 0.44", "-79.4096, 227.037, -41.0224, 0.44" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-14.8608, 76.7082, 12.5695, 0.29", "-14.4785, 78.2161, 12.3523, 0.29", "-14.359, 78.8281, 12.2957, 0.44", "-14.289, 79.4235, 12.2639, 0.44", "-14.2461, 80.2987, 12.2432, 0.29", "-14.2463, 80.3492, 12.2429, 0.29", "-14.2793, 81.107, 12.2451, 0.29", "-14.2973, 81.229, 12.2575, 0.29", "-14.4073, 81.8565, 12.2755, 0.29", "-14.5015, 82.3785, 12.2546, 0.96", "-14.574, 82.8395, 12.1929, 1.33", "-14.6074, 83.1162, 12.1438, 1.33", "-14.6815, 84.3092, 11.8846, 0.52", "-14.6846, 85.2432, 11.6571, 0.29", "-14.6772, 85.3434, 11.6304, 0.29", "-14.5871, 86.0988, 11.4239, 0.81", "-14.5794, 86.1525, 11.4097, 0.81", "-14.5068, 86.6765, 11.285, 1.03", "-14.463, 87.1276, 11.1994, 0.74", "-14.4039, 87.8439, 11.1092, 0.29", "-14.3795, 88.3043, 11.0688, 0.44", "-14.3825, 88.6602, 11.0572, 0.44", "-14.4058, 89.1321, 11.0457, 0.29", "-14.4744, 89.5705, 11.0357, 0.74", "-15.0445, 97.524, 11.3328, 0.74" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "12.2298, 83.4439, 6.46982, 0.37", "12.5585, 84.8564, 5.89516, 0.37", "12.7095, 85.3336, 5.6344, 0.37", "12.838, 85.7121, 5.41554, 0.96", "12.856, 85.7576, 5.39099, 0.96", "13.14, 86.448, 5.03157, 0.96", "13.6451, 87.7321, 4.39533, 0.37", "13.9216, 88.5449, 3.98806, 0.59", "14.1404, 89.2209, 3.61635, 0.37", "14.407, 90.1383, 3.0966, 0.37", "14.4253, 90.2143, 3.0541, 0.37", "14.5137, 90.7477, 2.72706, 0.29", "14.6095, 91.7794, 2.08311, 1.47", "14.6474, 92.6221, 1.54892, 1.92", "14.6545, 92.9358, 1.34182, 2.21", "14.6629, 93.2525, 1.11947, 2.21", "14.7687, 94.9592, -0.080571, 0.37", "14.8545, 95.8609, -0.706916, 0.96", "14.9068, 96.3224, -1.01352, 1.62", "14.969, 96.8204, -1.33961, 1.84", "15.1525, 98.1537, -2.22282, 0.29", "15.2695, 98.953, -2.7429, 1.03", "15.3106, 99.2536, -2.9135, 1.4", "15.3315, 99.4326, -3.0192, 1.4" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "12.2298, 83.4439, 6.46982, 0.37", "12.946, 84.6034, 6.88545, 0.37", "13.3342, 85.2147, 7.02255, 0.37", "13.7071, 85.8114, 7.07207, 0.81", "13.7292, 85.8446, 7.07235, 0.81", "13.9438, 86.1586, 7.06461, 0.81", "14.3082, 86.6869, 7.00884, 0.37", "14.6837, 87.1743, 6.83952, 0.29", "15.0102, 87.5856, 6.66497, 0.59", "15.3265, 87.9794, 6.47683, 0.22", "15.3448, 88.0043, 6.46491, 0.22", "15.6702, 88.5325, 6.21759, 1.18", "15.7658, 88.7367, 6.14307, 1.69", "15.8815, 89.1211, 6.05322, 1.99", "15.9143, 89.3543, 6.03581, 1.99", "15.8767, 89.885, 6.06266, 0.44", "15.804, 90.2324, 6.13643, 0.29", "15.4066, 91.1115, 6.57484, 0.29", "15.3873, 91.1399, 6.59275, 0.29", "18.1228, 95.8167, 7.35356, 0.29", "20.3439, 100.608, 8.74593, 0.29", "22.6396, 105.285, 10.4159, 0.29", "24.4982, 109.91, 12.6847, 0.29", "27.0051, 114.017, 15.3907, 0.29", "29.0764, 117.716, 18.9754, 0.29", "31.4307, 121.358, 22.4484, 0.29" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-19.5558, -116.065, -7.91518, 0.52", "-19.6409, -117.404, -7.38726, 0.52", "-19.6271, -117.928, -7.24044, 0.81", "-19.5872, -118.391, -7.17934, 1.03", "-19.5818, -118.449, -7.17889, 1.03", "-19.5525, -118.962, -7.20958, 1.03", "-19.5495, -119.53, -7.26327, 0.52", "-19.5751, -120.032, -7.36965, 0.52", "-19.6749, -120.633, -7.48121, 0.52", "-19.8147, -121.126, -7.55845, 0.66", "-20.0133, -121.636, -7.58519, 0.66", "-20.2054, -122.013, -7.57052, 0.88", "-20.7173, -122.862, -7.40109, 1.03", "-21.0807, -123.4, -7.20831, 1.55", "-21.2415, -123.636, -7.09751, 1.92", "-21.7979, -124.461, -6.6518, 1.92", "-22.163, -125.033, -6.32573, 1.33", "-22.7575, -126.008, -5.76754, 0.59", "-23.1742, -126.719, -5.37237, 0.59", "-23.5741, -127.435, -5.03567, 0.59", "-23.5934, -127.471, -5.02219, 0.59", "-23.8626, -127.996, -4.90223, 1.33", "-24.1518, -128.634, -4.86605, 0.74", "-24.3548, -129.183, -4.92943, 0.74", "-24.6385, -130.101, -5.0864, 0.74", "-24.6583, -130.169, -5.09904, 0.74", "-24.8487, -130.829, -5.20539, 1.18", "-25.1537, -131.843, -5.34256, 0.81", "-25.4834, -132.919, -5.41907, 0.74", "-25.8711, -134.127, -5.42546, 0.59", "-25.8871, -134.176, -5.42088, 0.59", "-26.1636, -134.974, -5.30288, 1.92", "-26.4119, -135.705, -5.13465, 2.21", "-26.6902, -136.572, -4.88091, 2.21", "-26.9556, -137.473, -4.58985, 0.74", "-27.1963, -138.532, -4.23219, 0.74", "-27.3016, -139.336, -3.96718, 0.66", "-27.2819, -140.285, -3.68024, 0.44", "-27.1538, -140.911, -3.51416, 1.03", "-27.1213, -140.986, -3.50125, 1.03", "-26.8823, -141.359, -3.48457, 1.03", "-26.5039, -141.876, -3.52592, 1.03", "-26.1542, -142.381, -3.58917, 1.4", "-25.9897, -142.7, -3.63928, 1.4", "-25.7417, -143.491, -3.72748, 0.81", "-25.6097, -144.333, -3.74634, 0.81", "-25.6088, -144.934, -3.716, 1.03", "-25.6786, -145.477, -3.65736, 1.11", "-25.8215, -146.12, -3.55432, 1.18", "-26.05, -146.91, -3.40135, 0.37", "-26.3841, -147.87, -3.23954, 0.37", "-26.5857, -148.478, -3.19859, 1.55", "-26.7107, -148.976, -3.23069, 1.84", "-26.7813, -149.42, -3.3116, 2.14", "-26.8006, -149.758, -3.41709, 2.14", "-26.7028, -150.685, -3.87306, 1.69", "-26.3657, -151.724, -4.55147, 0.52", "-26.1685, -152.097, -4.82947, 0.88", "-26.1424, -152.133, -4.85921, 0.88", "-26.0319, -152.249, -4.97251, 0.88", "-25.4048, -152.804, -5.54121, 0.52", "-24.8207, -153.29, -6.04967, 1.03", "-24.7878, -153.319, -6.07954, 1.03", "-24.2811, -153.856, -6.57771, 1.33", "-23.7741, -154.48, -7.09886, 1.25", "-23.595, -154.749, -7.29734, 1.03", "-23.1226, -155.761, -7.87406, 0.59", "-22.8958, -156.449, -8.17946, 0.59", "-22.7786, -156.944, -8.34687, 1.18", "-22.7483, -157.149, -8.39318, 1.84", "-22.714, -157.6, -8.45623, 1.84", "-22.6972, -158.6, -8.55206, 0.74", "-22.6796, -159.312, -8.70319, 1.03", "-22.6372, -159.856, -8.90668, 1.11", "-22.5996, -160.136, -9.04849, 1.33", "-22.4947, -160.679, -9.42618, 0.81", "-22.4002, -161.031, -9.74253, 0.44", "-21.8928, -162.681, -11.6154, 0.44", "-21.8037, -162.978, -12.0062, 0.44", "-21.794, -163.039, -12.1081, 0.44", "-21.8249, -163.535, -13.02, 0.44", "-21.8325, -163.556, -13.0584, 0.44", "-21.994, -163.826, -13.5071, 0.74", "-22.2312, -164.107, -13.8959, 1.11", "-22.8179, -164.975, -15.1635, 0.44", "-22.9748, -165.296, -15.6441, 0.44", "-23.1908, -165.983, -16.6229, 1.84", "-23.24, -166.275, -17.0346, 2.5", "-23.2458, -166.356, -17.147, 2.5", "-23.2708, -167.551, -18.654, 0.59", "-23.2842, -167.97, -19.1476, 0.59", "-23.3093, -168.336, -19.6371, 0.59", "-23.3126, -168.366, -19.6804, 0.59", "-23.4156, -169.018, -20.5527, 1.77", "-23.5106, -169.428, -21.0574, 2.06", "-23.7954, -170.251, -21.9625, 1.99", "-24.2122, -171.347, -23.1377, 0.81", "-24.2249, -171.381, -23.1761, 0.81", "-24.3523, -171.775, -23.5977, 0.66", "-24.478, -172.319, -24.154, 0.52", "-24.5602, -172.721, -24.5496, 1.84", "-24.6576, -173.25, -24.9989, 2.28", "-24.8517, -174.55, -26.0571, 0.66", "-24.8712, -175.001, -26.432, 0.66", "-24.8243, -175.771, -27.0707, 1.77", "-24.8163, -175.818, -27.1067, 1.77", "-24.6986, -176.287, -27.4425, 2.21", "-24.4967, -176.953, -27.8398, 2.21", "-24.2156, -177.847, -28.2795, 0.74", "-24.0979, -178.275, -28.4764, 0.37", "-24.0123, -178.615, -28.6194, 0.29", "-23.8653, -179.196, -28.8552, 1.11", "-23.7592, -179.625, -29.032, 1.4", "-23.5947, -180.341, -29.3, 0.59", "-23.4784, -180.857, -29.4892, 0.29", "-23.3563, -181.416, -29.6971, 0.66", "-23.2861, -181.761, -29.8377, 0.88", "-23.159, -182.509, -30.1473, 0.29", "-23.0923, -182.98, -30.3385, 0.29", "-23.0515, -183.348, -30.4781, 0.96", "-23.0191, -183.739, -30.6207, 0.96", "-22.9274, -184.593, -30.9384, 0.29", "-22.8488, -185.015, -31.1189, 0.29", "-22.7005, -185.446, -31.3738, 0.66", "-22.6861, -185.483, -31.4193, 0.66", "-22.6024, -185.703, -31.7515, 0.66", "-22.4486, -186.203, -32.6453, 0.44", "-22.3588, -186.603, -33.4049, 1.77", "-22.2617, -187.187, -34.57, 2.58", "-22.0707, -188.944, -38.1335, 0.44", "-22.0607, -189.133, -38.5099, 0.44", "-22.0712, -189.969, -40.2295, 0.88", "-22.1153, -190.367, -41.0687, 1.77", "-22.1202, -190.39, -41.117, 1.77", "-22.1674, -190.538, -41.3983, 2.14", "-22.2669, -190.836, -41.773, 2.43" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-19.5558, -116.065, -7.91518, 0.59", "-18.4141, -116.824, -6.98073, 0.59", "-16.9519, -117.58, -5.97836, 0.52", "-16.0209, -117.957, -5.4849, 0.52", "-14.65, -118.288, -4.9858, 0.37", "-14.3908, -118.328, -4.91562, 0.37", "-13.2631, -118.441, -4.66044, 0.37", "-12.2981, -118.44, -4.53897, 0.37", "-11.0527, -118.314, -4.48379, 0.37", "-9.11858, -118.015, -4.48947, 0.22", "-8.55779, -117.925, -4.53407, 0.29", "-7.49054, -117.749, -4.64139, 0.37" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "15.7133, -58.7733, -37.8677, 0.37", "16.0299, -59.4531, -38.118, 0.37", "16.4453, -60.3804, -38.3747, 0.29", "16.8523, -61.3463, -38.5977, 1.25", "17.0375, -61.7973, -38.6891, 1.69", "17.063, -61.8608, -38.7008, 1.69", "17.5463, -63.1064, -38.8997, 0.29", "17.8868, -64.0145, -38.9924, 0.29", "18.2511, -65.0035, -39.0771, 1.77", "18.4386, -65.5377, -39.1064, 2.43", "18.5727, -65.9275, -39.1286, 2.43", "19.106, -67.5136, -39.2221, 0.22", "19.3559, -68.3091, -39.2725, 0.22" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "15.7133, -58.7733, -37.8677, 1.77", "15.3749, -59.4892, -39.627, 1.77", "15.0572, -60.287, -41.459, 1.03", "14.586, -61.6732, -44.3816, 2.14", "14.3912, -62.2614, -45.5561, 0.52", "14.3123, -62.5036, -46.0251, 1.92", "14.2643, -62.6529, -46.3056, 2.36", "13.9162, -63.9858, -48.5379, 0.29", "13.8233, -64.3266, -49.0589, 0.29", "13.5954, -65.1043, -50.0812, 0.29", "13.5881, -65.1236, -50.1069, 0.29", "13.53, -65.259, -50.2907, 1.69", "13.4543, -65.4386, -50.5318, 1.69", "12.9964, -66.6769, -52.2382, 0.22", "12.9407, -66.8543, -52.4986, 0.22", "12.9372, -66.8722, -52.5262, 0.22", "12.9117, -67.0863, -52.8636, 1.03", "12.8841, -67.8959, -54.1447, 0.29", "12.9432, -68.714, -55.4007, 1.99", "12.9693, -68.8504, -55.6011, 2.14", "13.1835, -69.7982, -57.0223, 0.37", "13.2249, -69.9554, -57.2614, 0.37", "13.2948, -70.166, -57.5761, 0.88", "13.4027, -70.4055, -57.9031, 1.03", "13.7097, -71.0225, -58.6431, 0.29", "13.7235, -71.0513, -58.6751, 0.29", "14.0386, -71.7896, -59.4453, 0.29", "14.1647, -72.1471, -59.834, 1.99", "14.202, -72.2645, -59.9626, 1.99", "14.4628, -73.1473, -60.9008, 0.29", "14.5172, -73.3695, -61.1189, 0.59", "14.712, -74.2371, -61.9351, 0.44", "14.8162, -74.7514, -62.4029, 0.29", "14.8556, -74.9652, -62.5974, 1.11", "14.8924, -75.1426, -62.757, 1.33", "15.1739, -76.3681, -63.9422, 0.22", "15.2306, -76.5875, -64.1795, 0.52", "15.4158, -77.2099, -64.9311, 0.29", "15.4722, -77.3791, -65.1542, 0.88", "15.5299, -77.5877, -65.4811, 0.88", "15.7287, -78.3896, -66.8623, 0.29", "15.8779, -79.003, -67.9988, 0.29", "15.9835, -79.5121, -68.9642, 1.77", "16.0075, -79.6443, -69.2214, 1.77", "16.1656, -80.7019, -71.2798, 0.52", "16.186, -80.8975, -71.6461, 0.44", "16.2064, -81.0807, -71.9681, 0.74", "16.2088, -81.0978, -71.9964, 0.74", "16.3308, -81.6956, -72.9202, 0.29", "16.3379, -81.7179, -72.9527, 0.29", "16.5542, -82.0772, -73.3787, 1.18", "16.6448, -82.2077, -73.5298, 1.18", "17.0622, -82.7624, -74.1368, 0.22", "17.0788, -82.7826, -74.1566, 0.22", "17.478, -83.2101, -74.5526, 0.81", "17.9596, -83.673, -75.0059, 0.22", "18.1677, -83.8477, -75.1861, 0.81", "18.1934, -83.8663, -75.2107, 0.81", "18.3198, -83.9381, -75.3507, 0.81", "18.8043, -84.1647, -76.1357, 0.22", "18.9228, -84.2105, -76.3658, 0.44", "18.9399, -84.2163, -76.4022, 0.44", "19.4503, -84.3911, -77.4933, 1.33", "19.9098, -84.5561, -78.4672, 1.33", "20.8095, -84.8837, -80.3832, 0.29", "20.8315, -84.8924, -80.4302, 0.29", "20.9778, -84.9572, -80.749, 0.29", "21.181, -85.0522, -81.1484, 1.03", "21.2449, -85.0827, -81.2573, 1.03", "21.2678, -85.0931, -81.2892, 1.03", "22.113, -85.4455, -82.2591, 0.22", "22.1387, -85.4551, -82.2889, 0.22", "22.7561, -85.6424, -83.0348, 0.29", "23.4586, -85.745, -83.9674, 0.22", "23.6032, -85.7509, -84.174, 0.66", "23.626, -85.7494, -84.2077, 0.66", "23.7629, -85.7236, -84.4192, 0.66", "24.1618, -85.6247, -85.0749, 0.15", "24.9024, -85.3456, -86.4421, 0.96", "25.3076, -85.1609, -87.2236, 1.4", "25.4593, -85.0891, -87.5331, 1.4", "25.5319, -85.054, -87.6862, 1.4" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-79.4096, 227.037, -41.0224, 0.44", "-83.7933, 237.447, -44.7815, 0.44" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-79.4096, 227.037, -41.0224, 0.44", "-82.2508, 235.524, -44.1528, 0.44" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "15.3315, 99.4326, -3.0192, 0.29", "16.2718, 101.668, -3.24753, 0.29", "16.6944, 102.673, -3.35012, 0.29", "17.0482, 103.514, -3.43604, 1.03", "17.0762, 103.58, -3.44283, 1.03", "17.2802, 104.065, -3.49235, 1.4" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "15.3315, 99.4326, -3.0192, 0.88", "15.4477, 100.649, -3.28481, 0.88", "15.6498, 101.571, -3.50233, 0.29", "16.0456, 102.619, -3.85062, 0.29", "16.3414, 103.258, -4.07314, 0.44", "17.166, 104.898, -4.6411, 1.25", "17.5125, 105.557, -4.86247, 1.99", "18.0955, 106.484, -5.17614, 2.21", "19.4989, 108.492, -5.85839, 0.22", "20.0934, 109.328, -6.18011, 0.22", "20.3936, 109.743, -6.33874, 0.96", "20.7129, 110.209, -6.5147, 1.77", "21.0607, 110.793, -6.73916, 2.21", "21.3574, 111.391, -6.99789, 2.21", "22.3139, 113.674, -8.03396, 0.22", "22.6884, 114.639, -8.50388, 0.22", "23.1147, 115.769, -9.04552, 1.18", "23.2694, 116.2, -9.24873, 1.33", "23.6836, 117.489, -9.80554, 0.81", "23.993, 118.494, -10.1893, 0.22", "24.1922, 119.143, -10.3732, 0.29", "24.5447, 120.283, -10.6625, 0.22", "24.6023, 120.429, -10.7009, 0.22", "25.145, 121.53, -11.056, 0.22", "25.7815, 122.671, -11.4536, 1.33", "26.0851, 123.172, -11.7012, 1.69", "26.2431, 123.451, -11.8571, 1.69", "27.1368, 125.028, -12.7904, 0.29", "27.6719, 125.919, -13.3021, 1.47", "27.8803, 126.241, -13.4812, 1.47", "28.5297, 127.197, -14.0017, 0.66", "29.3796, 128.43, -14.6243, 0.29", "29.7861, 129.046, -14.9059, 0.29", "30.2779, 129.833, -15.1899, 0.88", "30.5704, 130.284, -15.3596, 1.25", "31.336, 131.447, -15.8396, 0.29", "31.784, 132.147, -16.1404, 0.22", "32.1355, 132.778, -16.4772, 0.66", "32.3554, 133.314, -16.7813, 0.81", "32.6208, 134.315, -17.3222, 0.22", "32.7405, 134.939, -17.6281, 0.22", "32.8157, 135.527, -17.9308, 0.74", "32.9015, 136.434, -18.5281, 1.4", "32.9985, 137.713, -19.4602, 0.29", "33.0543, 138.594, -20.2176, 0.81", "33.0753, 138.872, -20.5101, 0.96", "33.1985, 140.105, -22.2388, 0.29", "33.2748, 141.044, -23.7622, 0.29", "33.2881, 141.387, -24.3529, 1.33", "33.2725, 142.16, -25.8038, 2.28", "33.2181, 143.069, -27.6209, 2.28", "33.0212, 144.68, -31.1866, 0.81", "32.9795, 144.872, -31.6411, 0.88", "32.8558, 145.254, -32.5842, 0.29", "32.6288, 145.751, -33.8875, 0.37", "32.5183, 145.948, -34.3792, 0.37", "32.0294, 146.808, -36.246, 0.37", "31.843, 147.202, -36.9681, 0.37", "31.4951, 148.277, -38.6854, 1.55", "31.3892, 148.805, -39.4026, 1.92", "31.2771, 150.525, -41.1395, 0.44", "31.3095, 151.344, -41.7551, 0.29", "31.4176, 152.277, -42.2501, 0.88", "31.5197, 152.779, -42.4653, 0.96", "31.6695, 153.317, -42.6337, 0.96", "32.2626, 155.085, -43.0641, 0.37", "32.8184, 156.557, -43.3268, 0.29", "33.203, 157.416, -43.6317, 0.29", "33.8138, 158.689, -44.2444, 1.33", "34.0996, 159.249, -44.5968, 2.14", "34.3177, 159.666, -44.9124, 2.36", "34.483, 159.974, -45.2146, 2.36", "35.952, 162.625, -48.3271, 0.29", "36.2729, 163.214, -49.1015, 0.88", "36.5891, 163.892, -50.0196, 1.4", "36.7387, 164.281, -50.5438, 1.55", "37.1651, 165.629, -52.2888, 0.37", "37.2879, 166.122, -52.8664, 0.37", "37.4578, 167.216, -53.9582, 1.18", "37.5816, 167.971, -54.7214, 1.47", "37.8081, 169.612, -56.2484, 0.29", "37.8475, 170.063, -56.6243, 0.44", "37.8699, 170.758, -57.1053, 0.29", "37.864, 172.318, -58.0953, 1.77", "37.8475, 173.181, -58.5647, 2.06", "37.8307, 174.003, -58.9291, 1.92", "37.7299, 175.82, -59.4694, 0.22", "37.6774, 176.679, -59.6557, 0.22", "37.6705, 176.771, -59.6644, 0.22", "37.632, 177.495, -59.5812, 0.22", "37.6014, 178.646, -59.3309, 0.96", "37.6168, 179.0, -59.2329, 1.33", "37.6497, 179.36, -59.1208, 1.33", "37.7597, 180.411, -58.8089, 0.44", "38.0142, 182.357, -58.2861, 0.22", "38.0282, 182.445, -58.2638, 0.22", "38.2908, 183.884, -57.83, 0.22", "38.4364, 184.658, -57.5532, 1.03", "38.5323, 185.123, -57.3683, 1.62", "38.7055, 185.856, -57.0432, 1.62", "38.7482, 186.037, -56.9625, 1.62", "39.3352, 188.466, -55.8601, 0.22", "39.4633, 189.023, -55.5983, 0.66", "39.5928, 189.658, -55.3117, 0.66", "39.6666, 190.181, -55.1144, 0.59", "39.7367, 191.146, -54.8498, 0.22", "39.7479, 191.581, -54.7813, 0.66", "39.7185, 192.062, -54.7738, 0.88", "39.6382, 192.872, -54.7718, 0.44", "39.4539, 194.182, -54.7889, 0.22", "39.3064, 195.127, -54.8099, 0.81", "39.2069, 195.751, -54.8235, 1.18", "38.9266, 197.523, -54.862, 0.22", "38.917, 197.603, -54.8722, 0.22", "38.7817, 198.958, -55.1564, 0.22", "38.7362, 199.805, -55.3823, 1.03", "38.7338, 200.35, -55.5463, 1.33", "38.759, 200.897, -55.7264, 1.33", "39.1437, 203.919, -56.7657, 0.22", "39.1556, 203.995, -56.7933, 0.22", "39.5077, 205.686, -57.4644, 0.22", "39.6492, 206.267, -57.7062, 0.59", "39.6702, 206.341, -57.736, 0.59", "40.0112, 207.355, -58.0809, 0.74" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-22.2669, -190.836, -41.773, 0.37", "-21.0262, -192.101, -41.4868, 0.37", "-20.2455, -192.925, -41.3085, 0.29", "-19.3, -193.976, -41.087, 0.29", "-18.6407, -194.763, -40.9272, 0.88", "-18.4253, -195.038, -40.8854, 1.11", "-18.3791, -195.1, -40.878, 1.11", "-18.1639, -195.476, -40.8626, 1.11", "-17.7689, -196.34, -40.9326, 0.29", "-17.5324, -196.975, -41.0455, 0.29", "-17.2865, -197.726, -41.2036, 0.74", "-17.1824, -198.04, -41.2878, 0.88", "-17.0143, -198.543, -41.4388, 0.59", "-16.6526, -199.623, -41.787, 0.29", "-16.6064, -199.744, -41.8289, 0.29", "-16.3279, -200.399, -42.0251, 0.29", "-15.9967, -201.125, -42.1908, 1.11", "-15.7737, -201.542, -42.3174, 1.4", "-15.5356, -201.964, -42.4424, 1.4", "-14.751, -203.282, -42.7919, 0.22", "-14.2945, -204.038, -43.0066, 0.22", "-13.9723, -204.563, -43.1719, 0.81", "-13.0218, -206.07, -43.6414, 0.81" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-22.2669, -190.836, -41.773, 0.96", "-21.6555, -191.759, -45.1647, 0.96", "-20.6963, -193.198, -49.853, 0.96", "-20.201, -193.942, -52.1183, 0.66", "-19.8636, -194.463, -53.5584, 1.4", "-19.7691, -194.61, -53.9319, 1.4", "-18.9464, -195.884, -56.9975, 0.44", "-18.6204, -196.313, -57.8589, 0.37", "-18.5916, -196.353, -57.9181, 0.37", "-17.7619, -197.516, -59.4744, 0.29", "-17.3324, -198.057, -60.1645, 1.47", "-17.2368, -198.17, -60.3113, 1.77", "-16.9063, -198.521, -60.7838, 1.99", "-16.273, -199.134, -61.7198, 1.99", "-15.1203, -200.194, -63.3881, 0.44", "-14.4838, -200.725, -64.3317, 0.81", "-13.6548, -201.337, -65.6778, 0.52", "-12.4521, -202.209, -67.6808, 0.44", "-11.8274, -202.647, -68.7534, 1.11", "-11.539, -202.843, -69.2591, 1.11", "-9.96165, -203.822, -72.0647, 1.4", "-8.20554, -204.814, -75.3376, 1.55" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_9", "dend_0", "dend_15", "dend_10", "dend_4", "dend_1", "dend_17", "dend_16", "dend_12", "dend_11", "dend_6", "dend_5", "dend_3", "dend_2", "dend_19", "dend_18", "dend_14", "dend_13", "dend_8", "dend_7" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_9", "dend_0", "dend_15", "dend_10", "dend_4", "dend_1", "dend_17", "dend_16", "dend_12", "dend_11", "dend_6", "dend_5", "dend_3", "dend_2", "dend_19", "dend_18", "dend_14", "dend_13", "dend_8", "dend_7" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_19", "dend_18", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.2499998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dNAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dNAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate dNAC222_L4_BTC_627d6addbc_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_9, id: dend_9, parent: soma_0
create dend_9
public dend_9
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_15, id: dend_15, parent: dend_9
create dend_15
public dend_15
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10
// Section: dend_4, id: dend_4, parent: dend_0
create dend_4
public dend_4
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_17, id: dend_17, parent: dend_15
create dend_17
public dend_17
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_12, id: dend_12, parent: dend_10
create dend_12
public dend_12
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_6, id: dend_6, parent: dend_4
create dend_6
public dend_6
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5
// Section: dend_3, id: dend_3, parent: dend_1
create dend_3
public dend_3
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_14, id: dend_14, parent: dend_12
create dend_14
public dend_14
// Section: dend_13, id: dend_13, parent: dend_12
create dend_13
public dend_13
// Section: dend_8, id: dend_8, parent: dend_6
create dend_8
public dend_8
// Section: dend_7, id: dend_7, parent: dend_6
create dend_7
public dend_7

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_18
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_19, dend_18, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dNAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dNAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_9(0), soma_0(0.49999821452163534)
    connect dend_0(0), soma_0(0.49999821452163534)
    connect axon_0(0), soma_0(1.0)
    connect dend_15(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)
    connect dend_4(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_17(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_12(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_6(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)
    connect dend_3(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_14(0), dend_12(1.0)
    connect dend_13(0), dend_12(1.0)
    connect dend_8(0), dend_6(1.0)
    connect dend_7(0), dend_6(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -1.49721, 11.7986, 0.0301706, 2.4623 ) }
    soma_0 { pt3dadd( -1.37308, 10.661, 0.0290426, 4.20373 ) }
    soma_0 { pt3dadd( -1.24895, 9.52332, 0.0279145, 5.59272 ) }
    soma_0 { pt3dadd( -1.12482, 8.38566, 0.0267864, 6.71614 ) }
    soma_0 { pt3dadd( -1.00068, 7.248, 0.0256584, 7.74544 ) }
    soma_0 { pt3dadd( -0.87655, 6.11034, 0.0245303, 8.57739 ) }
    soma_0 { pt3dadd( -0.752417, 4.97268, 0.0234023, 9.13171 ) }
    soma_0 { pt3dadd( -0.628284, 3.83502, 0.0222742, 9.51195 ) }
    soma_0 { pt3dadd( -0.504152, 2.69736, 0.0211462, 9.92921 ) }
    soma_0 { pt3dadd( -0.380019, 1.5597, 0.0200181, 10.275 ) }
    soma_0 { pt3dadd( -0.255886, 0.422041, 0.01889, 10.4231 ) }
    soma_0 { pt3dadd( -0.131754, -0.715618, 0.017762, 10.4046 ) }
    soma_0 { pt3dadd( -0.00762106, -1.85328, 0.0166339, 10.4069 ) }
    soma_0 { pt3dadd( 0.116512, -2.99094, 0.0155059, 10.1383 ) }
    soma_0 { pt3dadd( 0.240644, -4.1286, 0.0143778, 9.53645 ) }
    soma_0 { pt3dadd( 0.364777, -5.26626, 0.0132498, 8.49552 ) }
    soma_0 { pt3dadd( 0.48891, -6.40392, 0.0121217, 7.50349 ) }
    soma_0 { pt3dadd( 0.613042, -7.54158, 0.0109937, 6.64245 ) }
    soma_0 { pt3dadd( 0.737175, -8.67924, 0.0098656, 6.01482 ) }
    soma_0 { pt3dadd( 0.861308, -9.8169, 0.00873754, 4.86867 ) }
    soma_0 { pt3dadd( 0.98544, -10.9546, 0.00760949, 2.96361 ) }
    // Section: dend_9, id: dend_9, parent: soma_0 (entry count 21/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -1.78536, 10.9696, 1.5043, 2.36 ) }
    dend_9 { pt3dadd( -1.78536, 10.9696, 1.5043, 2.36 ) }
    dend_9 { pt3dadd( -2.03267, 12.358, 1.87902, 2.06 ) }
    dend_9 { pt3dadd( -2.32269, 13.8128, 2.32017, 2.06 ) }
    dend_9 { pt3dadd( -2.35561, 13.9497, 2.36346, 2.06 ) }
    dend_9 { pt3dadd( -2.77476, 15.5433, 2.86939, 2.21 ) }
    dend_9 { pt3dadd( -3.42356, 17.7659, 3.69287, 2.21 ) }
    dend_9 { pt3dadd( -3.93004, 19.2289, 4.29753, 2.21 ) }
    dend_9 { pt3dadd( -3.9599, 19.3044, 4.3342, 2.21 ) }
    dend_9 { pt3dadd( -4.56728, 20.7307, 5.08312, 2.21 ) }
    dend_9 { pt3dadd( -4.84838, 21.3636, 5.42868, 2.36 ) }
    dend_9 { pt3dadd( -5.7153, 23.1934, 6.5053, 2.43 ) }
    dend_9 { pt3dadd( -6.27029, 24.295, 7.13535, 2.65 ) }
    dend_9 { pt3dadd( -7.12268, 26.0163, 8.16168, 2.65 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 35/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 0.094648, -9.74991, 0.0043065, 4.86 ) }
    dend_0 { pt3dadd( 0.094648, -9.74991, 0.0043065, 4.86 ) }
    dend_0 { pt3dadd( -0.180568, -10.5909, -0.0232262, 4.57 ) }
    dend_0 { pt3dadd( -0.485673, -11.5071, -0.0596032, 4.2 ) }
    dend_0 { pt3dadd( -1.03042, -13.1514, -0.129776, 2.87 ) }
    dend_0 { pt3dadd( -1.46849, -14.5482, -0.205375, 2.58 ) }
    dend_0 { pt3dadd( -1.94635, -16.1364, -0.299959, 2.5 ) }
    dend_0 { pt3dadd( -2.27989, -17.3261, -0.359589, 2.58 ) }
    dend_0 { pt3dadd( -2.29062, -17.369, -0.361377, 2.58 ) }
    dend_0 { pt3dadd( -2.40171, -17.9445, -0.378522, 2.73 ) }
    dend_0 { pt3dadd( -2.56647, -19.3097, -0.397978, 2.73 ) }
    dend_0 { pt3dadd( -2.60158, -20.2162, -0.372352, 2.36 ) }
    dend_0 { pt3dadd( -2.57923, -21.3396, -0.295808, 2.65 ) }
    dend_0 { pt3dadd( -2.52284, -22.3279, -0.207071, 2.87 ) }
    dend_0 { pt3dadd( -2.45024, -23.2869, -0.116298, 3.09 ) }
    dend_0 { pt3dadd( -2.35554, -24.176, -0.0288806, 3.09 ) }
    dend_0 { pt3dadd( -2.19284, -25.3459, 0.0912683, 3.32 ) }
    dend_0 { pt3dadd( -2.10228, -25.9216, 0.14661, 3.02 ) }
    dend_0 { pt3dadd( -1.90814, -27.1061, 0.239499, 2.43 ) }
    dend_0 { pt3dadd( -1.67883, -28.4907, 0.347109, 2.36 ) }
    dend_0 { pt3dadd( -1.53747, -29.3963, 0.408687, 2.36 ) }
    dend_0 { pt3dadd( -1.45796, -29.8501, 0.429497, 2.36 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 57/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 0.98544, -10.9546, 0.00760949, 0.674351 ) }
    axon_0 { pt3dadd( 2.61247, -25.8661, 0.00760949, 0.674351 ) }
    axon_0 { pt3dadd( 4.23949, -40.7776, 0.00760949, 0.674351 ) }
    // Section: dend_15, id: dend_15, parent: dend_9 (entry count 60/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -7.12268, 26.0163, 8.16168, 1.4 ) }
    dend_15 { pt3dadd( -7.999, 27.7462, 8.49319, 1.4 ) }
    dend_15 { pt3dadd( -8.72353, 29.251, 8.75333, 1.18 ) }
    dend_15 { pt3dadd( -9.20892, 30.3268, 8.91349, 1.18 ) }
    dend_15 { pt3dadd( -9.70314, 31.4656, 9.06706, 1.18 ) }
    dend_15 { pt3dadd( -10.1581, 32.5594, 9.19539, 1.62 ) }
    dend_15 { pt3dadd( -10.4323, 33.2612, 9.28894, 1.99 ) }
    dend_15 { pt3dadd( -10.4602, 33.351, 9.29959, 1.99 ) }
    dend_15 { pt3dadd( -10.7521, 34.4781, 9.40375, 2.06 ) }
    dend_15 { pt3dadd( -10.787, 34.6518, 9.41738, 2.06 ) }
    dend_15 { pt3dadd( -10.9788, 35.9735, 9.49433, 1.62 ) }
    dend_15 { pt3dadd( -11.1534, 37.7236, 9.61567, 1.4 ) }
    dend_15 { pt3dadd( -11.1629, 37.8508, 9.62504, 1.4 ) }
    dend_15 { pt3dadd( -11.2366, 39.2705, 9.72609, 1.47 ) }
    dend_15 { pt3dadd( -11.2719, 40.523, 9.81063, 1.77 ) }
    dend_15 { pt3dadd( -11.2906, 41.6167, 9.8689, 1.92 ) }
    dend_15 { pt3dadd( -11.2958, 43.1502, 9.91664, 1.11 ) }
    dend_15 { pt3dadd( -11.3031, 43.5046, 9.91791, 1.11 ) }
    dend_15 { pt3dadd( -11.3472, 44.1892, 9.92758, 1.11 ) }
    dend_15 { pt3dadd( -11.377, 44.4371, 9.93462, 1.11 ) }
    dend_15 { pt3dadd( -11.6441, 45.9702, 9.99306, 0.96 ) }
    dend_15 { pt3dadd( -11.8825, 46.961, 10.0023, 0.96 ) }
    dend_15 { pt3dadd( -12.1749, 47.9267, 9.98081, 1.55 ) }
    dend_15 { pt3dadd( -12.4697, 48.8027, 9.94349, 2.36 ) }
    dend_15 { pt3dadd( -12.7363, 49.604, 9.89496, 2.5 ) }
    dend_15 { pt3dadd( -12.9425, 50.2343, 9.84813, 2.8 ) }
    dend_15 { pt3dadd( -13.3691, 51.5735, 9.73229, 2.43 ) }
    dend_15 { pt3dadd( -13.7078, 52.7046, 9.62243, 1.99 ) }
    dend_15 { pt3dadd( -14.1828, 54.7212, 9.46171, 1.4 ) }
    dend_15 { pt3dadd( -14.3452, 55.7774, 9.39403, 1.4 ) }
    dend_15 { pt3dadd( -14.3638, 56.0405, 9.38618, 1.4 ) }
    dend_15 { pt3dadd( -14.3465, 57.3124, 9.38342, 1.62 ) }
    dend_15 { pt3dadd( -14.3389, 57.3953, 9.38769, 1.62 ) }
    dend_15 { pt3dadd( -14.0826, 59.2754, 9.55738, 1.03 ) }
    dend_15 { pt3dadd( -13.8432, 60.719, 9.77512, 1.03 ) }
    dend_15 { pt3dadd( -13.6441, 61.9838, 10.0184, 1.47 ) }
    dend_15 { pt3dadd( -13.4097, 63.546, 10.3506, 1.69 ) }
    dend_15 { pt3dadd( -13.1695, 65.3985, 10.7717, 1.69 ) }
    dend_15 { pt3dadd( -13.0657, 66.703, 11.0698, 2.14 ) }
    dend_15 { pt3dadd( -13.0476, 68.1188, 11.3858, 2.8 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_15 { pt3dadd( -13.104, 69.4062, 11.6785, 3.24 ) }
    dend_15 { pt3dadd( -13.1886, 70.2352, 11.8485, 3.39 ) }
    dend_15 { pt3dadd( -13.3937, 71.4684, 12.0765, 2.21 ) }
    dend_15 { pt3dadd( -13.7238, 73.0036, 12.3111, 1.33 ) }
    dend_15 { pt3dadd( -14.0899, 74.3838, 12.4837, 1.18 ) }
    dend_15 { pt3dadd( -14.1353, 74.5296, 12.4938, 1.18 ) }
    dend_15 { pt3dadd( -14.5931, 75.9175, 12.5422, 1.47 ) }
    dend_15 { pt3dadd( -14.8608, 76.7082, 12.5695, 1.62 ) }
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 8/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -7.12268, 26.0163, 8.16168, 1.03 ) }
    dend_10 { pt3dadd( -5.85593, 26.8436, 8.22773, 1.03 ) }
    dend_10 { pt3dadd( -5.72167, 26.9268, 8.23433, 1.03 ) }
    dend_10 { pt3dadd( -4.67926, 27.5534, 8.28278, 1.03 ) }
    dend_10 { pt3dadd( -3.27767, 28.3813, 8.3461, 1.4 ) }
    dend_10 { pt3dadd( -3.21653, 28.4167, 8.35072, 1.4 ) }
    dend_10 { pt3dadd( -1.53177, 29.3987, 8.50543, 1.4 ) }
    dend_10 { pt3dadd( -1.46789, 29.4356, 8.51207, 1.4 ) }
    dend_10 { pt3dadd( -0.512596, 30.0264, 8.62419, 1.55 ) }
    dend_10 { pt3dadd( -0.446355, 30.0703, 8.63313, 1.55 ) }
    dend_10 { pt3dadd( 0.900678, 31.1004, 8.83754, 0.96 ) }
    dend_10 { pt3dadd( 1.57377, 31.6776, 8.94566, 0.96 ) }
    dend_10 { pt3dadd( 2.11831, 32.2436, 9.04257, 1.18 ) }
    dend_10 { pt3dadd( 2.70066, 32.9217, 9.14245, 1.4 ) }
    dend_10 { pt3dadd( 2.78918, 33.0403, 9.15234, 1.4 ) }
    dend_10 { pt3dadd( 3.28263, 33.7392, 9.16708, 1.4 ) }
    dend_10 { pt3dadd( 3.3357, 33.8163, 9.16372, 1.4 ) }
    dend_10 { pt3dadd( 3.91542, 34.6178, 9.11754, 1.69 ) }
    dend_10 { pt3dadd( 4.34442, 35.1706, 9.08257, 1.92 ) }
    dend_10 { pt3dadd( 4.94885, 35.923, 9.04821, 1.4 ) }
    dend_10 { pt3dadd( 5.73071, 36.9082, 9.02212, 1.11 ) }
    dend_10 { pt3dadd( 6.45786, 37.8196, 9.01042, 1.11 ) }
    dend_10 { pt3dadd( 6.51776, 37.8974, 9.01073, 1.11 ) }
    dend_10 { pt3dadd( 7.17112, 38.7727, 9.02912, 1.11 ) }
    dend_10 { pt3dadd( 7.69554, 39.5347, 9.06381, 1.03 ) }
    dend_10 { pt3dadd( 8.24592, 40.4189, 9.13209, 1.03 ) }
    dend_10 { pt3dadd( 8.29036, 40.5054, 9.1383, 1.03 ) }
    dend_10 { pt3dadd( 8.79886, 41.6766, 9.21423, 1.03 ) }
    dend_10 { pt3dadd( 8.82227, 41.7409, 9.21766, 1.03 ) }
    dend_10 { pt3dadd( 9.05389, 42.6074, 9.24947, 0.81 ) }
    dend_10 { pt3dadd( 9.06923, 42.7076, 9.25066, 0.81 ) }
    dend_10 { pt3dadd( 9.10705, 43.4691, 9.25719, 0.59 ) }
    dend_10 { pt3dadd( 9.10277, 43.6145, 9.25808, 0.59 ) }
    dend_10 { pt3dadd( 9.03181, 44.3564, 9.27823, 0.59 ) }
    dend_10 { pt3dadd( 9.0095, 44.6282, 9.28956, 0.59 ) }
    dend_10 { pt3dadd( 8.97236, 45.276, 9.32264, 0.74 ) }
    dend_10 { pt3dadd( 8.96972, 45.3771, 9.32835, 0.74 ) }
    dend_10 { pt3dadd( 9.01, 46.5179, 9.3978, 0.74 ) }
    dend_10 { pt3dadd( 9.09971, 47.3805, 9.4501, 1.25 ) }
    dend_10 { pt3dadd( 9.23215, 48.0513, 9.49016, 1.69 ) }
    dend_10 { pt3dadd( 9.48458, 48.9994, 9.5418, 1.4 ) }
    dend_10 { pt3dadd( 9.50545, 49.0646, 9.54495, 1.4 ) }
    dend_10 { pt3dadd( 9.76474, 49.8558, 9.57638, 2.06 ) }
    dend_10 { pt3dadd( 10.0643, 50.7357, 9.60501, 2.21 ) }
    dend_10 { pt3dadd( 10.3801, 51.6681, 9.62661, 1.77 ) }
    dend_10 { pt3dadd( 10.7271, 52.7239, 9.65252, 1.11 ) }
    dend_10 { pt3dadd( 10.9782, 53.5485, 9.6731, 1.11 ) }
    dend_10 { pt3dadd( 11.1968, 54.3493, 9.69277, 1.4 ) }
    dend_10 { pt3dadd( 11.4496, 55.4373, 9.71903, 0.59 ) }
    dend_10 { pt3dadd( 11.4621, 55.5044, 9.7206, 0.59 ) }
    dend_10 { pt3dadd( 11.581, 56.508, 9.76734, 0.44 ) }
    dend_10 { pt3dadd( 11.6156, 57.283, 9.8215, 1.11 ) }
    dend_10 { pt3dadd( 11.6128, 57.8643, 9.87332, 1.33 ) }
    dend_10 { pt3dadd( 11.6096, 57.9981, 9.88281, 1.33 ) }
    dend_10 { pt3dadd( 11.5821, 58.4061, 9.90097, 1.33 ) }
    dend_10 { pt3dadd( 11.5102, 59.3522, 9.9098, 0.52 ) }
    dend_10 { pt3dadd( 11.3887, 60.5872, 9.88362, 0.52 ) }
    dend_10 { pt3dadd( 11.3811, 60.664, 9.87973, 0.52 ) }
    dend_10 { pt3dadd( 11.306, 61.4409, 9.79275, 0.96 ) }
    dend_10 { pt3dadd( 11.2367, 62.3725, 9.6099, 1.55 ) }
    dend_10 { pt3dadd( 11.1971, 63.1184, 9.36759, 1.77 ) }
    dend_10 { pt3dadd( 11.1848, 63.4922, 9.199, 1.99 ) }
    dend_10 { pt3dadd( 11.1837, 63.5431, 9.17394, 1.99 ) }
    dend_10 { pt3dadd( 11.1708, 64.4875, 8.72198, 1.99 ) }
    dend_10 { pt3dadd( 11.1636, 65.312, 8.33273, 1.4 ) }
    dend_10 { pt3dadd( 11.174, 66.7292, 7.65735, 0.44 ) }
    dend_10 { pt3dadd( 11.185, 67.5863, 7.25584, 0.96 ) }
    dend_10 { pt3dadd( 11.2053, 68.2436, 6.96747, 1.4 ) }
    dend_10 { pt3dadd( 11.2351, 68.9511, 6.68974, 1.77 ) }
    dend_10 { pt3dadd( 11.2392, 69.0078, 6.67223, 1.77 ) }
    dend_10 { pt3dadd( 11.291, 69.5484, 6.56613, 1.99 ) }
    dend_10 { pt3dadd( 11.3115, 69.6996, 6.55577, 1.99 ) }
    dend_10 { pt3dadd( 11.3858, 70.1935, 6.54801, 1.99 ) }
    dend_10 { pt3dadd( 11.4039, 70.3288, 6.54621, 1.99 ) }
    dend_10 { pt3dadd( 11.4736, 70.9736, 6.51849, 1.69 ) }
    dend_10 { pt3dadd( 11.529, 71.773, 6.47217, 1.11 ) }
    dend_10 { pt3dadd( 11.5563, 72.5793, 6.41895, 0.44 ) }
    dend_10 { pt3dadd( 11.5563, 73.5567, 6.35176, 0.37 ) }
    dend_10 { pt3dadd( 11.5093, 74.4574, 6.28281, 1.03 ) }
    dend_10 { pt3dadd( 11.4574, 75.1912, 6.25096, 1.03 ) }
    dend_10 { pt3dadd( 11.3968, 76.0872, 6.23774, 0.44 ) }
    dend_10 { pt3dadd( 11.3658, 76.6294, 6.24203, 0.88 ) }
    dend_10 { pt3dadd( 11.3509, 77.1255, 6.2551, 1.18 ) }
    dend_10 { pt3dadd( 11.3524, 77.7979, 6.28308, 1.18 ) }
    dend_10 { pt3dadd( 11.4429, 79.3074, 6.35782, 0.37 ) }
    dend_10 { pt3dadd( 11.5352, 80.1249, 6.40603, 0.37 ) }
    dend_10 { pt3dadd( 11.7344, 81.3087, 6.46261, 1.33 ) }
    dend_10 { pt3dadd( 11.8993, 82.143, 6.49739, 2.36 ) }
    dend_10 { pt3dadd( 12.0036, 82.6022, 6.51037, 2.95 ) }
    dend_10 { pt3dadd( 12.1444, 83.1129, 6.50923, 3.24 ) }
    dend_10 { pt3dadd( 12.1676, 83.1981, 6.5007, 3.24 ) }
    dend_10 { pt3dadd( 12.2298, 83.4439, 6.46982, 3.24 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    // Section: dend_4, id: dend_4, parent: dend_0 (entry count 0/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -1.45796, -29.8501, 0.429497, 2.06 ) }
    dend_4 { pt3dadd( -1.43028, -31.1167, 0.531573, 2.06 ) }
    dend_4 { pt3dadd( -1.37564, -33.3539, 0.47352, 2.06 ) }
    dend_4 { pt3dadd( -1.32353, -34.909, 0.321101, 2.06 ) }
    dend_4 { pt3dadd( -1.22845, -36.5071, 0.0992335, 2.06 ) }
    dend_4 { pt3dadd( -1.05045, -38.5313, -0.261375, 2.14 ) }
    dend_4 { pt3dadd( -0.897801, -39.9241, -0.53199, 2.14 ) }
    dend_4 { pt3dadd( -0.618875, -42.011, -1.05988, 2.43 ) }
    dend_4 { pt3dadd( -0.462838, -43.1619, -1.39862, 2.8 ) }
    dend_4 { pt3dadd( -0.242159, -44.7252, -1.84183, 2.36 ) }
    dend_4 { pt3dadd( 0.0701845, -46.8481, -2.42907, 2.36 ) }
    dend_4 { pt3dadd( 0.32888, -48.4741, -2.84964, 2.36 ) }
    dend_4 { pt3dadd( 0.621526, -50.4227, -3.32833, 2.36 ) }
    dend_4 { pt3dadd( 0.868443, -52.4478, -3.77874, 2.14 ) }
    dend_4 { pt3dadd( 1.0224, -54.2784, -4.20845, 2.14 ) }
    dend_4 { pt3dadd( 1.08752, -56.077, -4.65763, 2.28 ) }
    dend_4 { pt3dadd( 1.07903, -56.7367, -4.82606, 2.28 ) }
    dend_4 { pt3dadd( 0.96401, -58.3921, -5.26764, 1.69 ) }
    dend_4 { pt3dadd( 0.724476, -60.1822, -5.67056, 1.18 ) }
    dend_4 { pt3dadd( 0.47956, -61.2381, -5.82544, 1.18 ) }
    dend_4 { pt3dadd( 0.189317, -61.9622, -5.78148, 1.18 ) }
    dend_4 { pt3dadd( -0.275982, -62.7113, -5.4977, 1.18 ) }
    dend_4 { pt3dadd( -0.888877, -63.4302, -5.01155, 0.96 ) }
    dend_4 { pt3dadd( -2.01631, -64.4387, -4.05152, 1.11 ) }
    dend_4 { pt3dadd( -3.24083, -65.3437, -3.10902, 1.69 ) }
    dend_4 { pt3dadd( -4.57812, -66.2699, -2.2299, 1.55 ) }
    dend_4 { pt3dadd( -5.40284, -66.807, -1.85147, 1.92 ) }
    dend_4 { pt3dadd( -6.20578, -67.3326, -1.63239, 2.21 ) }
    dend_4 { pt3dadd( -7.30818, -68.1123, -1.56737, 2.06 ) }
    dend_4 { pt3dadd( -8.71675, -69.1787, -1.73935, 1.99 ) }
    dend_4 { pt3dadd( -9.80678, -70.0792, -1.9892, 1.77 ) }
    dend_4 { pt3dadd( -11.0405, -71.2005, -2.28068, 1.92 ) }
    dend_4 { pt3dadd( -12.1267, -72.2993, -2.47859, 1.84 ) }
    dend_4 { pt3dadd( -13.1658, -73.4799, -2.50796, 1.69 ) }
    dend_4 { pt3dadd( -13.8203, -74.3523, -2.38233, 1.11 ) }
    dend_4 { pt3dadd( -14.527, -75.5313, -2.08447, 0.96 ) }
    dend_4 { pt3dadd( -15.2183, -76.9866, -1.62684, 1.25 ) }
    dend_4 { pt3dadd( -15.5525, -77.8759, -1.35151, 0.81 ) }
    dend_4 { pt3dadd( -16.1396, -79.8492, -0.986974, 0.74 ) }
    dend_4 { pt3dadd( -16.403, -80.9546, -0.944625, 0.37 ) }
    dend_4 { pt3dadd( -16.6916, -82.6928, -1.16538, 1.47 ) }
    dend_4 { pt3dadd( -16.7679, -83.5277, -1.40919, 2.14 ) }
    dend_4 { pt3dadd( -16.8358, -85.1052, -2.14177, 2.5 ) }
    dend_4 { pt3dadd( -16.8289, -87.0974, -3.38427, 1.03 ) }
    dend_4 { pt3dadd( -16.7984, -88.1237, -4.15879, 0.88 ) }
    dend_4 { pt3dadd( -16.7357, -88.9099, -4.78561, 0.44 ) }
    dend_4 { pt3dadd( -16.5514, -90.2397, -5.89881, 0.44 ) }
    dend_4 { pt3dadd( -16.2559, -91.7709, -7.19278, 1.18 ) }
    dend_4 { pt3dadd( -15.8632, -93.5113, -8.58042, 1.62 ) }
    dend_4 { pt3dadd( -15.8372, -93.623, -8.66311, 1.62 ) }
    dend_4 { pt3dadd( -15.5589, -94.8231, -9.47283, 1.62 ) }
    dend_4 { pt3dadd( -15.2059, -96.666, -10.5583, 1.47 ) }
    dend_4 { pt3dadd( -15.029, -97.8819, -11.1318, 1.99 ) }
    dend_4 { pt3dadd( -14.9617, -98.8738, -11.4848, 1.99 ) }
    dend_4 { pt3dadd( -14.9701, -99.7784, -11.732, 1.99 ) }
    dend_4 { pt3dadd( -15.1079, -101.51, -12.1477, 0.59 ) }
    dend_4 { pt3dadd( -15.3296, -102.762, -12.3967, 0.52 ) }
    dend_4 { pt3dadd( -15.5774, -103.683, -12.482, 0.52 ) }
    dend_4 { pt3dadd( -16.3294, -105.814, -12.561, 2.8 ) }
    dend_4 { pt3dadd( -16.6637, -106.671, -12.5691, 3.17 ) }
    dend_4 { pt3dadd( -17.0164, -107.519, -12.49, 3.46 ) }
    dend_4 { pt3dadd( -17.3352, -108.322, -12.2712, 3.46 ) }
    dend_4 { pt3dadd( -18.07, -110.277, -11.6037, 1.69 ) }
    dend_4 { pt3dadd( -18.4681, -111.458, -11.0895, 1.11 ) }
    dend_4 { pt3dadd( -18.6732, -112.183, -10.6678, 1.25 ) }
    dend_4 { pt3dadd( -19.164, -114.127, -9.38306, 1.99 ) }
    dend_4 { pt3dadd( -19.5558, -116.065, -7.91518, 1.47 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 67/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -1.45796, -29.8501, 0.429497, 0.96 ) }
    dend_1 { pt3dadd( -0.372017, -30.8895, -1.2588, 0.96 ) }
    dend_1 { pt3dadd( 0.555917, -31.7137, -2.63043, 0.81 ) }
    dend_1 { pt3dadd( 2.0079, -32.8382, -4.52532, 0.59 ) }
    dend_1 { pt3dadd( 2.40529, -33.1008, -4.98617, 0.88 ) }
    dend_1 { pt3dadd( 2.80095, -33.3236, -5.39639, 1.11 ) }
    dend_1 { pt3dadd( 2.86666, -33.3545, -5.45874, 1.11 ) }
    dend_1 { pt3dadd( 3.78962, -33.5915, -6.2375, 1.25 ) }
    dend_1 { pt3dadd( 4.57357, -33.7219, -6.9947, 0.88 ) }
    dend_1 { pt3dadd( 5.42876, -33.8308, -7.9244, 0.52 ) }
    dend_1 { pt3dadd( 5.84866, -33.908, -8.55447, 0.81 ) }
    dend_1 { pt3dadd( 6.40091, -34.0693, -9.61804, 0.96 ) }
    dend_1 { pt3dadd( 7.14572, -34.4194, -11.4906, 0.52 ) }
    dend_1 { pt3dadd( 7.69073, -35.0789, -14.2509, 0.52 ) }
    dend_1 { pt3dadd( 7.69157, -35.1033, -14.3285, 0.52 ) }
    dend_1 { pt3dadd( 7.3658, -35.9174, -16.2274, 0.96 ) }
    dend_1 { pt3dadd( 7.19553, -36.2292, -16.7904, 1.11 ) }
    dend_1 { pt3dadd( 6.94229, -36.6257, -17.3527, 1.11 ) }
    dend_1 { pt3dadd( 6.14575, -37.9282, -18.7494, 0.66 ) }
    dend_1 { pt3dadd( 5.82656, -38.5791, -19.336, 0.37 ) }
    dend_1 { pt3dadd( 5.53646, -39.5549, -20.2278, 0.37 ) }
    dend_1 { pt3dadd( 5.49345, -40.2447, -20.8853, 0.59 ) }
    dend_1 { pt3dadd( 5.49998, -40.3024, -20.9444, 0.59 ) }
    dend_1 { pt3dadd( 5.81493, -41.2243, -21.964, 1.03 ) }
    dend_1 { pt3dadd( 6.23309, -42.0329, -22.9261, 1.69 ) }
    dend_1 { pt3dadd( 6.72441, -42.9283, -24.0274, 2.21 ) }
    dend_1 { pt3dadd( 7.14403, -43.728, -25.0012, 2.8 ) }
    dend_1 { pt3dadd( 7.3019, -44.0871, -25.428, 2.8 ) }
    dend_1 { pt3dadd( 7.91984, -45.8398, -27.3945, 1.33 ) }
    dend_1 { pt3dadd( 8.2397, -47.0852, -28.6617, 0.52 ) }
    dend_1 { pt3dadd( 8.34599, -47.7351, -29.2413, 0.66 ) }
    dend_1 { pt3dadd( 8.40008, -48.248, -29.6262, 0.66 ) }
    dend_1 { pt3dadd( 8.47811, -49.0076, -30.118, 0.29 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_1 { pt3dadd( 8.54882, -49.6792, -30.4997, 0.37 ) }
    dend_1 { pt3dadd( 8.65107, -50.4483, -30.7638, 0.37 ) }
    dend_1 { pt3dadd( 8.69032, -50.5407, -30.7974, 0.37 ) }
    dend_1 { pt3dadd( 9.22755, -51.2285, -31.2272, 0.66 ) }
    dend_1 { pt3dadd( 9.74831, -51.7919, -31.6709, 0.96 ) }
    dend_1 { pt3dadd( 9.79244, -51.8357, -31.7081, 0.96 ) }
    dend_1 { pt3dadd( 10.2941, -52.335, -32.1409, 0.96 ) }
    dend_1 { pt3dadd( 11.2856, -53.3655, -33.0994, 0.52 ) }
    dend_1 { pt3dadd( 12.1527, -54.3186, -33.9686, 0.37 ) }
    dend_1 { pt3dadd( 13.1743, -55.4874, -35.0477, 1.77 ) }
    dend_1 { pt3dadd( 13.5703, -55.9629, -35.4758, 2.36 ) }
    dend_1 { pt3dadd( 14.0002, -56.4943, -35.9492, 2.58 ) }
    dend_1 { pt3dadd( 15.2999, -58.1798, -37.423, 0.74 ) }
    dend_1 { pt3dadd( 15.7133, -58.7733, -37.8677, 0.74 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 14/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 4.23949, -40.7776, 0.00760949, 0.15 ) }
    axon_1 { pt3dadd( 5.86652, -55.6891, 0.00760949, 0.15 ) }
    axon_1 { pt3dadd( 7.49354, -70.6006, 0.00760949, 0.15 ) }
    // Section: dend_17, id: dend_17, parent: dend_15 (entry count 17/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -14.8608, 76.7082, 12.5695, 0.81 ) }
    dend_17 { pt3dadd( -15.4399, 77.4748, 12.4883, 0.81 ) }
    dend_17 { pt3dadd( -16.1751, 78.5054, 12.367, 0.74 ) }
    dend_17 { pt3dadd( -16.8031, 79.4243, 12.2632, 0.74 ) }
    dend_17 { pt3dadd( -16.8492, 79.4932, 12.2524, 0.74 ) }
    dend_17 { pt3dadd( -17.6948, 80.7798, 12.0319, 0.74 ) }
    dend_17 { pt3dadd( -18.1011, 81.3923, 11.9056, 1.33 ) }
    dend_17 { pt3dadd( -18.5009, 82.0098, 11.7429, 1.92 ) }
    dend_17 { pt3dadd( -18.9311, 82.679, 11.537, 1.33 ) }
    dend_17 { pt3dadd( -19.5526, 83.5951, 11.2454, 1.11 ) }
    dend_17 { pt3dadd( -20.024, 84.2478, 11.0323, 1.47 ) }
    dend_17 { pt3dadd( -20.6683, 85.0743, 10.7693, 1.18 ) }
    dend_17 { pt3dadd( -20.7057, 85.1205, 10.7547, 1.18 ) }
    dend_17 { pt3dadd( -21.289, 85.841, 10.5295, 0.66 ) }
    dend_17 { pt3dadd( -21.813, 86.5308, 10.3139, 0.66 ) }
    dend_17 { pt3dadd( -22.4553, 87.4601, 10.05, 1.47 ) }
    dend_17 { pt3dadd( -22.8375, 88.1001, 9.90494, 1.99 ) }
    dend_17 { pt3dadd( -23.2789, 88.9458, 9.75978, 1.99 ) }
    dend_17 { pt3dadd( -23.9806, 90.4671, 9.54981, 0.66 ) }
    dend_17 { pt3dadd( -24.3349, 91.3733, 9.45393, 0.52 ) }
    dend_17 { pt3dadd( -24.5464, 92.0217, 9.40966, 0.59 ) }
    dend_17 { pt3dadd( -24.9343, 93.3203, 9.42578, 0.74 ) }
    dend_17 { pt3dadd( -24.9591, 93.4042, 9.43102, 0.74 ) }
    dend_17 { pt3dadd( -25.2155, 94.1697, 9.52292, 1.33 ) }
    dend_17 { pt3dadd( -25.4425, 94.7781, 9.62556, 1.62 ) }
    dend_17 { pt3dadd( -25.8297, 95.6456, 9.78025, 1.18 ) }
    dend_17 { pt3dadd( -26.3521, 96.6282, 9.90192, 0.66 ) }
    dend_17 { pt3dadd( -26.7951, 97.376, 9.95677, 0.66 ) }
    dend_17 { pt3dadd( -27.6471, 98.7126, 10.0324, 2.28 ) }
    dend_17 { pt3dadd( -28.1195, 99.3823, 10.0623, 2.73 ) }
    dend_17 { pt3dadd( -28.5428, 99.9463, 10.0777, 2.95 ) }
    dend_17 { pt3dadd( -29.6598, 101.381, 10.0829, 1.03 ) }
    dend_17 { pt3dadd( -29.7061, 101.439, 10.0818, 1.03 ) }
    dend_17 { pt3dadd( -30.1673, 102.017, 10.0764, 0.81 ) }
    dend_17 { pt3dadd( -30.7034, 102.688, 10.0823, 0.44 ) }
    dend_17 { pt3dadd( -31.2492, 103.395, 10.1035, 0.44 ) }
    dend_17 { pt3dadd( -31.8774, 104.234, 10.1487, 0.44 ) }
    dend_17 { pt3dadd( -32.4861, 105.037, 10.2178, 1.11 ) }
    dend_17 { pt3dadd( -32.9387, 105.63, 10.2687, 1.69 ) }
    dend_17 { pt3dadd( -33.5422, 106.431, 10.335, 2.21 ) }
    dend_17 { pt3dadd( -33.9044, 106.911, 10.3741, 2.5 ) }
    dend_17 { pt3dadd( -34.8185, 108.066, 10.4735, 1.25 ) }
    dend_17 { pt3dadd( -35.643, 109.082, 10.5618, 0.44 ) }
    dend_17 { pt3dadd( -36.3161, 109.901, 10.6316, 0.44 ) }
    dend_17 { pt3dadd( -36.8497, 110.54, 10.6874, 1.03 ) }
    dend_17 { pt3dadd( -37.4319, 111.252, 10.7476, 1.33 ) }
    dend_17 { pt3dadd( -37.5766, 111.434, 10.7623, 1.33 ) }
    dend_17 { pt3dadd( -37.9085, 111.862, 10.7955, 1.47 ) }
    dend_17 { pt3dadd( -38.5061, 112.626, 10.8555, 0.88 ) }
    dend_17 { pt3dadd( -39.0309, 113.266, 10.9098, 0.59 ) }
    dend_17 { pt3dadd( -39.5819, 113.898, 10.969, 0.44 ) }
    dend_17 { pt3dadd( -39.6478, 113.968, 10.9763, 0.44 ) }
    dend_17 { pt3dadd( -40.4714, 114.76, 11.0726, 0.44 ) }
    dend_17 { pt3dadd( -40.9135, 115.119, 11.1276, 0.66 ) }
    dend_17 { pt3dadd( -41.1101, 115.261, 11.153, 0.66 ) }
    dend_17 { pt3dadd( -41.7124, 115.685, 11.2313, 0.66 ) }
    dend_17 { pt3dadd( -42.3045, 116.157, 11.3202, 0.66 ) }
    dend_17 { pt3dadd( -42.8485, 116.695, 11.4106, 0.37 ) }
    dend_17 { pt3dadd( -43.2159, 117.175, 11.4657, 0.37 ) }
    dend_17 { pt3dadd( -43.7279, 118.013, 11.5243, 0.66 ) }
    dend_17 { pt3dadd( -44.0242, 118.654, 11.5287, 0.96 ) }
    dend_17 { pt3dadd( -44.3361, 119.598, 11.4887, 0.29 ) }
    dend_17 { pt3dadd( -44.523, 120.336, 11.439, 0.44 ) }
    dend_17 { pt3dadd( -44.6848, 121.119, 11.3726, 0.96 ) }
    dend_17 { pt3dadd( -44.7098, 121.247, 11.3606, 0.96 ) }
    dend_17 { pt3dadd( -44.9618, 122.412, 11.2396, 1.77 ) }
    dend_17 { pt3dadd( -45.2623, 123.531, 11.1262, 2.95 ) }
    dend_17 { pt3dadd( -45.438, 124.077, 10.9485, 3.54 ) }
    dend_17 { pt3dadd( -45.4592, 124.141, 10.9192, 3.54 ) }
    dend_17 { pt3dadd( -45.6774, 124.837, 10.5495, 3.76 ) }
    dend_17 { pt3dadd( -45.6953, 124.897, 10.514, 3.76 ) }
    dend_17 { pt3dadd( -45.9356, 125.737, 9.95756, 3.46 ) }
    dend_17 { pt3dadd( -46.6851, 128.624, 7.94767, 0.81 ) }
    dend_17 { pt3dadd( -46.7009, 128.693, 7.90283, 0.81 ) }
    dend_17 { pt3dadd( -46.8335, 129.29, 7.56146, 0.81 ) }
    dend_17 { pt3dadd( -46.8471, 129.356, 7.53321, 0.81 ) }
    dend_17 { pt3dadd( -46.9903, 130.193, 7.3365, 1.11 ) }
    dend_17 { pt3dadd( -47.0762, 130.823, 7.2992, 1.25 ) }
    dend_17 { pt3dadd( -47.2129, 132.002, 7.43892, 0.37 ) }
    dend_17 { pt3dadd( -47.3219, 132.954, 7.56241, 0.29 ) }
    dend_17 { pt3dadd( -47.5074, 134.378, 7.70115, 0.29 ) }
    dend_17 { pt3dadd( -47.729, 135.934, 7.81061, 0.29 ) }
    dend_17 { pt3dadd( -47.7422, 136.016, 7.81407, 0.29 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_17 { pt3dadd( -47.9281, 137.04, 7.84797, 0.29 ) }
    dend_17 { pt3dadd( -47.9499, 137.159, 7.84782, 0.29 ) }
    dend_17 { pt3dadd( -48.1717, 138.382, 7.7305, 0.44 ) }
    dend_17 { pt3dadd( -48.1996, 138.485, 7.69387, 0.44 ) }
    dend_17 { pt3dadd( -48.4348, 138.954, 7.41751, 0.44 ) }
    dend_17 { pt3dadd( -53.6382, 147.623, 6.95134, 0.44 ) }
    dend_17 { pt3dadd( -59.009, 156.209, 6.7384, 0.44 ) }
    dend_17 { pt3dadd( -64.1766, 164.847, 5.66581, 0.44 ) }
    dend_17 { pt3dadd( -67.9385, 173.753, 2.75562, 0.44 ) }
    dend_17 { pt3dadd( -72.1535, 181.866, -1.68238, 0.44 ) }
    dend_17 { pt3dadd( -74.9847, 189.369, -8.0113, 0.44 ) }
    dend_17 { pt3dadd( -78.2623, 195.452, -15.6723, 0.44 ) }
    dend_17 { pt3dadd( -79.4025, 203.276, -22.1089, 0.44 ) }
    dend_17 { pt3dadd( -80.2602, 211.453, -28.0916, 0.44 ) }
    dend_17 { pt3dadd( -80.697, 218.768, -35.2419, 0.44 ) }
    dend_17 { pt3dadd( -79.4096, 227.037, -41.0224, 0.44 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 16/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -14.8608, 76.7082, 12.5695, 0.29 ) }
    dend_16 { pt3dadd( -14.4785, 78.2161, 12.3523, 0.29 ) }
    dend_16 { pt3dadd( -14.359, 78.8281, 12.2957, 0.44 ) }
    dend_16 { pt3dadd( -14.289, 79.4235, 12.2639, 0.44 ) }
    dend_16 { pt3dadd( -14.2461, 80.2987, 12.2432, 0.29 ) }
    dend_16 { pt3dadd( -14.2463, 80.3492, 12.2429, 0.29 ) }
    dend_16 { pt3dadd( -14.2793, 81.107, 12.2451, 0.29 ) }
    dend_16 { pt3dadd( -14.2973, 81.229, 12.2575, 0.29 ) }
    dend_16 { pt3dadd( -14.4073, 81.8565, 12.2755, 0.29 ) }
    dend_16 { pt3dadd( -14.5015, 82.3785, 12.2546, 0.96 ) }
    dend_16 { pt3dadd( -14.574, 82.8395, 12.1929, 1.33 ) }
    dend_16 { pt3dadd( -14.6074, 83.1162, 12.1438, 1.33 ) }
    dend_16 { pt3dadd( -14.6815, 84.3092, 11.8846, 0.52 ) }
    dend_16 { pt3dadd( -14.6846, 85.2432, 11.6571, 0.29 ) }
    dend_16 { pt3dadd( -14.6772, 85.3434, 11.6304, 0.29 ) }
    dend_16 { pt3dadd( -14.5871, 86.0988, 11.4239, 0.81 ) }
    dend_16 { pt3dadd( -14.5794, 86.1525, 11.4097, 0.81 ) }
    dend_16 { pt3dadd( -14.5068, 86.6765, 11.285, 1.03 ) }
    dend_16 { pt3dadd( -14.463, 87.1276, 11.1994, 0.74 ) }
    dend_16 { pt3dadd( -14.4039, 87.8439, 11.1092, 0.29 ) }
    dend_16 { pt3dadd( -14.3795, 88.3043, 11.0688, 0.44 ) }
    dend_16 { pt3dadd( -14.3825, 88.6602, 11.0572, 0.44 ) }
    dend_16 { pt3dadd( -14.4058, 89.1321, 11.0457, 0.29 ) }
    dend_16 { pt3dadd( -14.4744, 89.5705, 11.0357, 0.74 ) }
    dend_16 { pt3dadd( -15.0445, 97.524, 11.3328, 0.74 ) }
    // Section: dend_12, id: dend_12, parent: dend_10 (entry count 41/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 12.2298, 83.4439, 6.46982, 0.37 ) }
    dend_12 { pt3dadd( 12.5585, 84.8564, 5.89516, 0.37 ) }
    dend_12 { pt3dadd( 12.7095, 85.3336, 5.6344, 0.37 ) }
    dend_12 { pt3dadd( 12.838, 85.7121, 5.41554, 0.96 ) }
    dend_12 { pt3dadd( 12.856, 85.7576, 5.39099, 0.96 ) }
    dend_12 { pt3dadd( 13.14, 86.448, 5.03157, 0.96 ) }
    dend_12 { pt3dadd( 13.6451, 87.7321, 4.39533, 0.37 ) }
    dend_12 { pt3dadd( 13.9216, 88.5449, 3.98806, 0.59 ) }
    dend_12 { pt3dadd( 14.1404, 89.2209, 3.61635, 0.37 ) }
    dend_12 { pt3dadd( 14.407, 90.1383, 3.0966, 0.37 ) }
    dend_12 { pt3dadd( 14.4253, 90.2143, 3.0541, 0.37 ) }
    dend_12 { pt3dadd( 14.5137, 90.7477, 2.72706, 0.29 ) }
    dend_12 { pt3dadd( 14.6095, 91.7794, 2.08311, 1.47 ) }
    dend_12 { pt3dadd( 14.6474, 92.6221, 1.54892, 1.92 ) }
    dend_12 { pt3dadd( 14.6545, 92.9358, 1.34182, 2.21 ) }
    dend_12 { pt3dadd( 14.6629, 93.2525, 1.11947, 2.21 ) }
    dend_12 { pt3dadd( 14.7687, 94.9592, -0.080571, 0.37 ) }
    dend_12 { pt3dadd( 14.8545, 95.8609, -0.706916, 0.96 ) }
    dend_12 { pt3dadd( 14.9068, 96.3224, -1.01352, 1.62 ) }
    dend_12 { pt3dadd( 14.969, 96.8204, -1.33961, 1.84 ) }
    dend_12 { pt3dadd( 15.1525, 98.1537, -2.22282, 0.29 ) }
    dend_12 { pt3dadd( 15.2695, 98.953, -2.7429, 1.03 ) }
    dend_12 { pt3dadd( 15.3106, 99.2536, -2.9135, 1.4 ) }
    dend_12 { pt3dadd( 15.3315, 99.4326, -3.0192, 1.4 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 65/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 12.2298, 83.4439, 6.46982, 0.37 ) }
    dend_11 { pt3dadd( 12.946, 84.6034, 6.88545, 0.37 ) }
    dend_11 { pt3dadd( 13.3342, 85.2147, 7.02255, 0.37 ) }
    dend_11 { pt3dadd( 13.7071, 85.8114, 7.07207, 0.81 ) }
    dend_11 { pt3dadd( 13.7292, 85.8446, 7.07235, 0.81 ) }
    dend_11 { pt3dadd( 13.9438, 86.1586, 7.06461, 0.81 ) }
    dend_11 { pt3dadd( 14.3082, 86.6869, 7.00884, 0.37 ) }
    dend_11 { pt3dadd( 14.6837, 87.1743, 6.83952, 0.29 ) }
    dend_11 { pt3dadd( 15.0102, 87.5856, 6.66497, 0.59 ) }
    dend_11 { pt3dadd( 15.3265, 87.9794, 6.47683, 0.22 ) }
    dend_11 { pt3dadd( 15.3448, 88.0043, 6.46491, 0.22 ) }
    dend_11 { pt3dadd( 15.6702, 88.5325, 6.21759, 1.18 ) }
    dend_11 { pt3dadd( 15.7658, 88.7367, 6.14307, 1.69 ) }
    dend_11 { pt3dadd( 15.8815, 89.1211, 6.05322, 1.99 ) }
    dend_11 { pt3dadd( 15.9143, 89.3543, 6.03581, 1.99 ) }
    dend_11 { pt3dadd( 15.8767, 89.885, 6.06266, 0.44 ) }
    dend_11 { pt3dadd( 15.804, 90.2324, 6.13643, 0.29 ) }
    dend_11 { pt3dadd( 15.4066, 91.1115, 6.57484, 0.29 ) }
    dend_11 { pt3dadd( 15.3873, 91.1399, 6.59275, 0.29 ) }
    dend_11 { pt3dadd( 18.1228, 95.8167, 7.35356, 0.29 ) }
    dend_11 { pt3dadd( 20.3439, 100.608, 8.74593, 0.29 ) }
    dend_11 { pt3dadd( 22.6396, 105.285, 10.4159, 0.29 ) }
    dend_11 { pt3dadd( 24.4982, 109.91, 12.6847, 0.29 ) }
    dend_11 { pt3dadd( 27.0051, 114.017, 15.3907, 0.29 ) }
    dend_11 { pt3dadd( 29.0764, 117.716, 18.9754, 0.29 ) }
    dend_11 { pt3dadd( 31.4307, 121.358, 22.4484, 0.29 ) }
    // Section: dend_6, id: dend_6, parent: dend_4 (entry count 91/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -19.5558, -116.065, -7.91518, 0.52 ) }
    dend_6 { pt3dadd( -19.6409, -117.404, -7.38726, 0.52 ) }
    dend_6 { pt3dadd( -19.6271, -117.928, -7.24044, 0.81 ) }
    dend_6 { pt3dadd( -19.5872, -118.391, -7.17934, 1.03 ) }
    dend_6 { pt3dadd( -19.5818, -118.449, -7.17889, 1.03 ) }
    dend_6 { pt3dadd( -19.5525, -118.962, -7.20958, 1.03 ) }
    dend_6 { pt3dadd( -19.5495, -119.53, -7.26327, 0.52 ) }
    dend_6 { pt3dadd( -19.5751, -120.032, -7.36965, 0.52 ) }
    dend_6 { pt3dadd( -19.6749, -120.633, -7.48121, 0.52 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_6 { pt3dadd( -19.8147, -121.126, -7.55845, 0.66 ) }
    dend_6 { pt3dadd( -20.0133, -121.636, -7.58519, 0.66 ) }
    dend_6 { pt3dadd( -20.2054, -122.013, -7.57052, 0.88 ) }
    dend_6 { pt3dadd( -20.7173, -122.862, -7.40109, 1.03 ) }
    dend_6 { pt3dadd( -21.0807, -123.4, -7.20831, 1.55 ) }
    dend_6 { pt3dadd( -21.2415, -123.636, -7.09751, 1.92 ) }
    dend_6 { pt3dadd( -21.7979, -124.461, -6.6518, 1.92 ) }
    dend_6 { pt3dadd( -22.163, -125.033, -6.32573, 1.33 ) }
    dend_6 { pt3dadd( -22.7575, -126.008, -5.76754, 0.59 ) }
    dend_6 { pt3dadd( -23.1742, -126.719, -5.37237, 0.59 ) }
    dend_6 { pt3dadd( -23.5741, -127.435, -5.03567, 0.59 ) }
    dend_6 { pt3dadd( -23.5934, -127.471, -5.02219, 0.59 ) }
    dend_6 { pt3dadd( -23.8626, -127.996, -4.90223, 1.33 ) }
    dend_6 { pt3dadd( -24.1518, -128.634, -4.86605, 0.74 ) }
    dend_6 { pt3dadd( -24.3548, -129.183, -4.92943, 0.74 ) }
    dend_6 { pt3dadd( -24.6385, -130.101, -5.0864, 0.74 ) }
    dend_6 { pt3dadd( -24.6583, -130.169, -5.09904, 0.74 ) }
    dend_6 { pt3dadd( -24.8487, -130.829, -5.20539, 1.18 ) }
    dend_6 { pt3dadd( -25.1537, -131.843, -5.34256, 0.81 ) }
    dend_6 { pt3dadd( -25.4834, -132.919, -5.41907, 0.74 ) }
    dend_6 { pt3dadd( -25.8711, -134.127, -5.42546, 0.59 ) }
    dend_6 { pt3dadd( -25.8871, -134.176, -5.42088, 0.59 ) }
    dend_6 { pt3dadd( -26.1636, -134.974, -5.30288, 1.92 ) }
    dend_6 { pt3dadd( -26.4119, -135.705, -5.13465, 2.21 ) }
    dend_6 { pt3dadd( -26.6902, -136.572, -4.88091, 2.21 ) }
    dend_6 { pt3dadd( -26.9556, -137.473, -4.58985, 0.74 ) }
    dend_6 { pt3dadd( -27.1963, -138.532, -4.23219, 0.74 ) }
    dend_6 { pt3dadd( -27.3016, -139.336, -3.96718, 0.66 ) }
    dend_6 { pt3dadd( -27.2819, -140.285, -3.68024, 0.44 ) }
    dend_6 { pt3dadd( -27.1538, -140.911, -3.51416, 1.03 ) }
    dend_6 { pt3dadd( -27.1213, -140.986, -3.50125, 1.03 ) }
    dend_6 { pt3dadd( -26.8823, -141.359, -3.48457, 1.03 ) }
    dend_6 { pt3dadd( -26.5039, -141.876, -3.52592, 1.03 ) }
    dend_6 { pt3dadd( -26.1542, -142.381, -3.58917, 1.4 ) }
    dend_6 { pt3dadd( -25.9897, -142.7, -3.63928, 1.4 ) }
    dend_6 { pt3dadd( -25.7417, -143.491, -3.72748, 0.81 ) }
    dend_6 { pt3dadd( -25.6097, -144.333, -3.74634, 0.81 ) }
    dend_6 { pt3dadd( -25.6088, -144.934, -3.716, 1.03 ) }
    dend_6 { pt3dadd( -25.6786, -145.477, -3.65736, 1.11 ) }
    dend_6 { pt3dadd( -25.8215, -146.12, -3.55432, 1.18 ) }
    dend_6 { pt3dadd( -26.05, -146.91, -3.40135, 0.37 ) }
    dend_6 { pt3dadd( -26.3841, -147.87, -3.23954, 0.37 ) }
    dend_6 { pt3dadd( -26.5857, -148.478, -3.19859, 1.55 ) }
    dend_6 { pt3dadd( -26.7107, -148.976, -3.23069, 1.84 ) }
    dend_6 { pt3dadd( -26.7813, -149.42, -3.3116, 2.14 ) }
    dend_6 { pt3dadd( -26.8006, -149.758, -3.41709, 2.14 ) }
    dend_6 { pt3dadd( -26.7028, -150.685, -3.87306, 1.69 ) }
    dend_6 { pt3dadd( -26.3657, -151.724, -4.55147, 0.52 ) }
    dend_6 { pt3dadd( -26.1685, -152.097, -4.82947, 0.88 ) }
    dend_6 { pt3dadd( -26.1424, -152.133, -4.85921, 0.88 ) }
    dend_6 { pt3dadd( -26.0319, -152.249, -4.97251, 0.88 ) }
    dend_6 { pt3dadd( -25.4048, -152.804, -5.54121, 0.52 ) }
    dend_6 { pt3dadd( -24.8207, -153.29, -6.04967, 1.03 ) }
    dend_6 { pt3dadd( -24.7878, -153.319, -6.07954, 1.03 ) }
    dend_6 { pt3dadd( -24.2811, -153.856, -6.57771, 1.33 ) }
    dend_6 { pt3dadd( -23.7741, -154.48, -7.09886, 1.25 ) }
    dend_6 { pt3dadd( -23.595, -154.749, -7.29734, 1.03 ) }
    dend_6 { pt3dadd( -23.1226, -155.761, -7.87406, 0.59 ) }
    dend_6 { pt3dadd( -22.8958, -156.449, -8.17946, 0.59 ) }
    dend_6 { pt3dadd( -22.7786, -156.944, -8.34687, 1.18 ) }
    dend_6 { pt3dadd( -22.7483, -157.149, -8.39318, 1.84 ) }
    dend_6 { pt3dadd( -22.714, -157.6, -8.45623, 1.84 ) }
    dend_6 { pt3dadd( -22.6972, -158.6, -8.55206, 0.74 ) }
    dend_6 { pt3dadd( -22.6796, -159.312, -8.70319, 1.03 ) }
    dend_6 { pt3dadd( -22.6372, -159.856, -8.90668, 1.11 ) }
    dend_6 { pt3dadd( -22.5996, -160.136, -9.04849, 1.33 ) }
    dend_6 { pt3dadd( -22.4947, -160.679, -9.42618, 0.81 ) }
    dend_6 { pt3dadd( -22.4002, -161.031, -9.74253, 0.44 ) }
    dend_6 { pt3dadd( -21.8928, -162.681, -11.6154, 0.44 ) }
    dend_6 { pt3dadd( -21.8037, -162.978, -12.0062, 0.44 ) }
    dend_6 { pt3dadd( -21.794, -163.039, -12.1081, 0.44 ) }
    dend_6 { pt3dadd( -21.8249, -163.535, -13.02, 0.44 ) }
    dend_6 { pt3dadd( -21.8325, -163.556, -13.0584, 0.44 ) }
    dend_6 { pt3dadd( -21.994, -163.826, -13.5071, 0.74 ) }
    dend_6 { pt3dadd( -22.2312, -164.107, -13.8959, 1.11 ) }
    dend_6 { pt3dadd( -22.8179, -164.975, -15.1635, 0.44 ) }
    dend_6 { pt3dadd( -22.9748, -165.296, -15.6441, 0.44 ) }
    dend_6 { pt3dadd( -23.1908, -165.983, -16.6229, 1.84 ) }
    dend_6 { pt3dadd( -23.24, -166.275, -17.0346, 2.5 ) }
    dend_6 { pt3dadd( -23.2458, -166.356, -17.147, 2.5 ) }
    dend_6 { pt3dadd( -23.2708, -167.551, -18.654, 0.59 ) }
    dend_6 { pt3dadd( -23.2842, -167.97, -19.1476, 0.59 ) }
    dend_6 { pt3dadd( -23.3093, -168.336, -19.6371, 0.59 ) }
    dend_6 { pt3dadd( -23.3126, -168.366, -19.6804, 0.59 ) }
    dend_6 { pt3dadd( -23.4156, -169.018, -20.5527, 1.77 ) }
    dend_6 { pt3dadd( -23.5106, -169.428, -21.0574, 2.06 ) }
    dend_6 { pt3dadd( -23.7954, -170.251, -21.9625, 1.99 ) }
    dend_6 { pt3dadd( -24.2122, -171.347, -23.1377, 0.81 ) }
    dend_6 { pt3dadd( -24.2249, -171.381, -23.1761, 0.81 ) }
    dend_6 { pt3dadd( -24.3523, -171.775, -23.5977, 0.66 ) }
    dend_6 { pt3dadd( -24.478, -172.319, -24.154, 0.52 ) }
    dend_6 { pt3dadd( -24.5602, -172.721, -24.5496, 1.84 ) }
    dend_6 { pt3dadd( -24.6576, -173.25, -24.9989, 2.28 ) }
    dend_6 { pt3dadd( -24.8517, -174.55, -26.0571, 0.66 ) }
    dend_6 { pt3dadd( -24.8712, -175.001, -26.432, 0.66 ) }
    dend_6 { pt3dadd( -24.8243, -175.771, -27.0707, 1.77 ) }
    dend_6 { pt3dadd( -24.8163, -175.818, -27.1067, 1.77 ) }
    dend_6 { pt3dadd( -24.6986, -176.287, -27.4425, 2.21 ) }
    dend_6 { pt3dadd( -24.4967, -176.953, -27.8398, 2.21 ) }
    dend_6 { pt3dadd( -24.2156, -177.847, -28.2795, 0.74 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_6 { pt3dadd( -24.0979, -178.275, -28.4764, 0.37 ) }
    dend_6 { pt3dadd( -24.0123, -178.615, -28.6194, 0.29 ) }
    dend_6 { pt3dadd( -23.8653, -179.196, -28.8552, 1.11 ) }
    dend_6 { pt3dadd( -23.7592, -179.625, -29.032, 1.4 ) }
    dend_6 { pt3dadd( -23.5947, -180.341, -29.3, 0.59 ) }
    dend_6 { pt3dadd( -23.4784, -180.857, -29.4892, 0.29 ) }
    dend_6 { pt3dadd( -23.3563, -181.416, -29.6971, 0.66 ) }
    dend_6 { pt3dadd( -23.2861, -181.761, -29.8377, 0.88 ) }
    dend_6 { pt3dadd( -23.159, -182.509, -30.1473, 0.29 ) }
    dend_6 { pt3dadd( -23.0923, -182.98, -30.3385, 0.29 ) }
    dend_6 { pt3dadd( -23.0515, -183.348, -30.4781, 0.96 ) }
    dend_6 { pt3dadd( -23.0191, -183.739, -30.6207, 0.96 ) }
    dend_6 { pt3dadd( -22.9274, -184.593, -30.9384, 0.29 ) }
    dend_6 { pt3dadd( -22.8488, -185.015, -31.1189, 0.29 ) }
    dend_6 { pt3dadd( -22.7005, -185.446, -31.3738, 0.66 ) }
    dend_6 { pt3dadd( -22.6861, -185.483, -31.4193, 0.66 ) }
    dend_6 { pt3dadd( -22.6024, -185.703, -31.7515, 0.66 ) }
    dend_6 { pt3dadd( -22.4486, -186.203, -32.6453, 0.44 ) }
    dend_6 { pt3dadd( -22.3588, -186.603, -33.4049, 1.77 ) }
    dend_6 { pt3dadd( -22.2617, -187.187, -34.57, 2.58 ) }
    dend_6 { pt3dadd( -22.0707, -188.944, -38.1335, 0.44 ) }
    dend_6 { pt3dadd( -22.0607, -189.133, -38.5099, 0.44 ) }
    dend_6 { pt3dadd( -22.0712, -189.969, -40.2295, 0.88 ) }
    dend_6 { pt3dadd( -22.1153, -190.367, -41.0687, 1.77 ) }
    dend_6 { pt3dadd( -22.1202, -190.39, -41.117, 1.77 ) }
    dend_6 { pt3dadd( -22.1674, -190.538, -41.3983, 2.14 ) }
    dend_6 { pt3dadd( -22.2669, -190.836, -41.773, 2.43 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 27/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -19.5558, -116.065, -7.91518, 0.59 ) }
    dend_5 { pt3dadd( -18.4141, -116.824, -6.98073, 0.59 ) }
    dend_5 { pt3dadd( -16.9519, -117.58, -5.97836, 0.52 ) }
    dend_5 { pt3dadd( -16.0209, -117.957, -5.4849, 0.52 ) }
    dend_5 { pt3dadd( -14.65, -118.288, -4.9858, 0.37 ) }
    dend_5 { pt3dadd( -14.3908, -118.328, -4.91562, 0.37 ) }
    dend_5 { pt3dadd( -13.2631, -118.441, -4.66044, 0.37 ) }
    dend_5 { pt3dadd( -12.2981, -118.44, -4.53897, 0.37 ) }
    dend_5 { pt3dadd( -11.0527, -118.314, -4.48379, 0.37 ) }
    dend_5 { pt3dadd( -9.11858, -118.015, -4.48947, 0.22 ) }
    dend_5 { pt3dadd( -8.55779, -117.925, -4.53407, 0.29 ) }
    dend_5 { pt3dadd( -7.49054, -117.749, -4.64139, 0.37 ) }
    // Section: dend_3, id: dend_3, parent: dend_1 (entry count 39/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 15.7133, -58.7733, -37.8677, 0.37 ) }
    dend_3 { pt3dadd( 16.0299, -59.4531, -38.118, 0.37 ) }
    dend_3 { pt3dadd( 16.4453, -60.3804, -38.3747, 0.29 ) }
    dend_3 { pt3dadd( 16.8523, -61.3463, -38.5977, 1.25 ) }
    dend_3 { pt3dadd( 17.0375, -61.7973, -38.6891, 1.69 ) }
    dend_3 { pt3dadd( 17.063, -61.8608, -38.7008, 1.69 ) }
    dend_3 { pt3dadd( 17.5463, -63.1064, -38.8997, 0.29 ) }
    dend_3 { pt3dadd( 17.8868, -64.0145, -38.9924, 0.29 ) }
    dend_3 { pt3dadd( 18.2511, -65.0035, -39.0771, 1.77 ) }
    dend_3 { pt3dadd( 18.4386, -65.5377, -39.1064, 2.43 ) }
    dend_3 { pt3dadd( 18.5727, -65.9275, -39.1286, 2.43 ) }
    dend_3 { pt3dadd( 19.106, -67.5136, -39.2221, 0.22 ) }
    dend_3 { pt3dadd( 19.3559, -68.3091, -39.2725, 0.22 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 52/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 15.7133, -58.7733, -37.8677, 1.77 ) }
    dend_2 { pt3dadd( 15.3749, -59.4892, -39.627, 1.77 ) }
    dend_2 { pt3dadd( 15.0572, -60.287, -41.459, 1.03 ) }
    dend_2 { pt3dadd( 14.586, -61.6732, -44.3816, 2.14 ) }
    dend_2 { pt3dadd( 14.3912, -62.2614, -45.5561, 0.52 ) }
    dend_2 { pt3dadd( 14.3123, -62.5036, -46.0251, 1.92 ) }
    dend_2 { pt3dadd( 14.2643, -62.6529, -46.3056, 2.36 ) }
    dend_2 { pt3dadd( 13.9162, -63.9858, -48.5379, 0.29 ) }
    dend_2 { pt3dadd( 13.8233, -64.3266, -49.0589, 0.29 ) }
    dend_2 { pt3dadd( 13.5954, -65.1043, -50.0812, 0.29 ) }
    dend_2 { pt3dadd( 13.5881, -65.1236, -50.1069, 0.29 ) }
    dend_2 { pt3dadd( 13.53, -65.259, -50.2907, 1.69 ) }
    dend_2 { pt3dadd( 13.4543, -65.4386, -50.5318, 1.69 ) }
    dend_2 { pt3dadd( 12.9964, -66.6769, -52.2382, 0.22 ) }
    dend_2 { pt3dadd( 12.9407, -66.8543, -52.4986, 0.22 ) }
    dend_2 { pt3dadd( 12.9372, -66.8722, -52.5262, 0.22 ) }
    dend_2 { pt3dadd( 12.9117, -67.0863, -52.8636, 1.03 ) }
    dend_2 { pt3dadd( 12.8841, -67.8959, -54.1447, 0.29 ) }
    dend_2 { pt3dadd( 12.9432, -68.714, -55.4007, 1.99 ) }
    dend_2 { pt3dadd( 12.9693, -68.8504, -55.6011, 2.14 ) }
    dend_2 { pt3dadd( 13.1835, -69.7982, -57.0223, 0.37 ) }
    dend_2 { pt3dadd( 13.2249, -69.9554, -57.2614, 0.37 ) }
    dend_2 { pt3dadd( 13.2948, -70.166, -57.5761, 0.88 ) }
    dend_2 { pt3dadd( 13.4027, -70.4055, -57.9031, 1.03 ) }
    dend_2 { pt3dadd( 13.7097, -71.0225, -58.6431, 0.29 ) }
    dend_2 { pt3dadd( 13.7235, -71.0513, -58.6751, 0.29 ) }
    dend_2 { pt3dadd( 14.0386, -71.7896, -59.4453, 0.29 ) }
    dend_2 { pt3dadd( 14.1647, -72.1471, -59.834, 1.99 ) }
    dend_2 { pt3dadd( 14.202, -72.2645, -59.9626, 1.99 ) }
    dend_2 { pt3dadd( 14.4628, -73.1473, -60.9008, 0.29 ) }
    dend_2 { pt3dadd( 14.5172, -73.3695, -61.1189, 0.59 ) }
    dend_2 { pt3dadd( 14.712, -74.2371, -61.9351, 0.44 ) }
    dend_2 { pt3dadd( 14.8162, -74.7514, -62.4029, 0.29 ) }
    dend_2 { pt3dadd( 14.8556, -74.9652, -62.5974, 1.11 ) }
    dend_2 { pt3dadd( 14.8924, -75.1426, -62.757, 1.33 ) }
    dend_2 { pt3dadd( 15.1739, -76.3681, -63.9422, 0.22 ) }
    dend_2 { pt3dadd( 15.2306, -76.5875, -64.1795, 0.52 ) }
    dend_2 { pt3dadd( 15.4158, -77.2099, -64.9311, 0.29 ) }
    dend_2 { pt3dadd( 15.4722, -77.3791, -65.1542, 0.88 ) }
    dend_2 { pt3dadd( 15.5299, -77.5877, -65.4811, 0.88 ) }
    dend_2 { pt3dadd( 15.7287, -78.3896, -66.8623, 0.29 ) }
    dend_2 { pt3dadd( 15.8779, -79.003, -67.9988, 0.29 ) }
    dend_2 { pt3dadd( 15.9835, -79.5121, -68.9642, 1.77 ) }
    dend_2 { pt3dadd( 16.0075, -79.6443, -69.2214, 1.77 ) }
    dend_2 { pt3dadd( 16.1656, -80.7019, -71.2798, 0.52 ) }
    dend_2 { pt3dadd( 16.186, -80.8975, -71.6461, 0.44 ) }
    dend_2 { pt3dadd( 16.2064, -81.0807, -71.9681, 0.74 ) }
    dend_2 { pt3dadd( 16.2088, -81.0978, -71.9964, 0.74 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_2 { pt3dadd( 16.3308, -81.6956, -72.9202, 0.29 ) }
    dend_2 { pt3dadd( 16.3379, -81.7179, -72.9527, 0.29 ) }
    dend_2 { pt3dadd( 16.5542, -82.0772, -73.3787, 1.18 ) }
    dend_2 { pt3dadd( 16.6448, -82.2077, -73.5298, 1.18 ) }
    dend_2 { pt3dadd( 17.0622, -82.7624, -74.1368, 0.22 ) }
    dend_2 { pt3dadd( 17.0788, -82.7826, -74.1566, 0.22 ) }
    dend_2 { pt3dadd( 17.478, -83.2101, -74.5526, 0.81 ) }
    dend_2 { pt3dadd( 17.9596, -83.673, -75.0059, 0.22 ) }
    dend_2 { pt3dadd( 18.1677, -83.8477, -75.1861, 0.81 ) }
    dend_2 { pt3dadd( 18.1934, -83.8663, -75.2107, 0.81 ) }
    dend_2 { pt3dadd( 18.3198, -83.9381, -75.3507, 0.81 ) }
    dend_2 { pt3dadd( 18.8043, -84.1647, -76.1357, 0.22 ) }
    dend_2 { pt3dadd( 18.9228, -84.2105, -76.3658, 0.44 ) }
    dend_2 { pt3dadd( 18.9399, -84.2163, -76.4022, 0.44 ) }
    dend_2 { pt3dadd( 19.4503, -84.3911, -77.4933, 1.33 ) }
    dend_2 { pt3dadd( 19.9098, -84.5561, -78.4672, 1.33 ) }
    dend_2 { pt3dadd( 20.8095, -84.8837, -80.3832, 0.29 ) }
    dend_2 { pt3dadd( 20.8315, -84.8924, -80.4302, 0.29 ) }
    dend_2 { pt3dadd( 20.9778, -84.9572, -80.749, 0.29 ) }
    dend_2 { pt3dadd( 21.181, -85.0522, -81.1484, 1.03 ) }
    dend_2 { pt3dadd( 21.2449, -85.0827, -81.2573, 1.03 ) }
    dend_2 { pt3dadd( 21.2678, -85.0931, -81.2892, 1.03 ) }
    dend_2 { pt3dadd( 22.113, -85.4455, -82.2591, 0.22 ) }
    dend_2 { pt3dadd( 22.1387, -85.4551, -82.2889, 0.22 ) }
    dend_2 { pt3dadd( 22.7561, -85.6424, -83.0348, 0.29 ) }
    dend_2 { pt3dadd( 23.4586, -85.745, -83.9674, 0.22 ) }
    dend_2 { pt3dadd( 23.6032, -85.7509, -84.174, 0.66 ) }
    dend_2 { pt3dadd( 23.626, -85.7494, -84.2077, 0.66 ) }
    dend_2 { pt3dadd( 23.7629, -85.7236, -84.4192, 0.66 ) }
    dend_2 { pt3dadd( 24.1618, -85.6247, -85.0749, 0.15 ) }
    dend_2 { pt3dadd( 24.9024, -85.3456, -86.4421, 0.96 ) }
    dend_2 { pt3dadd( 25.3076, -85.1609, -87.2236, 1.4 ) }
    dend_2 { pt3dadd( 25.4593, -85.0891, -87.5331, 1.4 ) }
    dend_2 { pt3dadd( 25.5319, -85.054, -87.6862, 1.4 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 34/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -79.4096, 227.037, -41.0224, 0.44 ) }
    dend_19 { pt3dadd( -83.7933, 237.447, -44.7815, 0.44 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 36/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -79.4096, 227.037, -41.0224, 0.44 ) }
    dend_18 { pt3dadd( -82.2508, 235.524, -44.1528, 0.44 ) }
    // Section: dend_14, id: dend_14, parent: dend_12 (entry count 38/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 15.3315, 99.4326, -3.0192, 0.29 ) }
    dend_14 { pt3dadd( 16.2718, 101.668, -3.24753, 0.29 ) }
    dend_14 { pt3dadd( 16.6944, 102.673, -3.35012, 0.29 ) }
    dend_14 { pt3dadd( 17.0482, 103.514, -3.43604, 1.03 ) }
    dend_14 { pt3dadd( 17.0762, 103.58, -3.44283, 1.03 ) }
    dend_14 { pt3dadd( 17.2802, 104.065, -3.49235, 1.4 ) }
    // Section: dend_13, id: dend_13, parent: dend_12 (entry count 44/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 15.3315, 99.4326, -3.0192, 0.88 ) }
    dend_13 { pt3dadd( 15.4477, 100.649, -3.28481, 0.88 ) }
    dend_13 { pt3dadd( 15.6498, 101.571, -3.50233, 0.29 ) }
    dend_13 { pt3dadd( 16.0456, 102.619, -3.85062, 0.29 ) }
    dend_13 { pt3dadd( 16.3414, 103.258, -4.07314, 0.44 ) }
    dend_13 { pt3dadd( 17.166, 104.898, -4.6411, 1.25 ) }
    dend_13 { pt3dadd( 17.5125, 105.557, -4.86247, 1.99 ) }
    dend_13 { pt3dadd( 18.0955, 106.484, -5.17614, 2.21 ) }
    dend_13 { pt3dadd( 19.4989, 108.492, -5.85839, 0.22 ) }
    dend_13 { pt3dadd( 20.0934, 109.328, -6.18011, 0.22 ) }
    dend_13 { pt3dadd( 20.3936, 109.743, -6.33874, 0.96 ) }
    dend_13 { pt3dadd( 20.7129, 110.209, -6.5147, 1.77 ) }
    dend_13 { pt3dadd( 21.0607, 110.793, -6.73916, 2.21 ) }
    dend_13 { pt3dadd( 21.3574, 111.391, -6.99789, 2.21 ) }
    dend_13 { pt3dadd( 22.3139, 113.674, -8.03396, 0.22 ) }
    dend_13 { pt3dadd( 22.6884, 114.639, -8.50388, 0.22 ) }
    dend_13 { pt3dadd( 23.1147, 115.769, -9.04552, 1.18 ) }
    dend_13 { pt3dadd( 23.2694, 116.2, -9.24873, 1.33 ) }
    dend_13 { pt3dadd( 23.6836, 117.489, -9.80554, 0.81 ) }
    dend_13 { pt3dadd( 23.993, 118.494, -10.1893, 0.22 ) }
    dend_13 { pt3dadd( 24.1922, 119.143, -10.3732, 0.29 ) }
    dend_13 { pt3dadd( 24.5447, 120.283, -10.6625, 0.22 ) }
    dend_13 { pt3dadd( 24.6023, 120.429, -10.7009, 0.22 ) }
    dend_13 { pt3dadd( 25.145, 121.53, -11.056, 0.22 ) }
    dend_13 { pt3dadd( 25.7815, 122.671, -11.4536, 1.33 ) }
    dend_13 { pt3dadd( 26.0851, 123.172, -11.7012, 1.69 ) }
    dend_13 { pt3dadd( 26.2431, 123.451, -11.8571, 1.69 ) }
    dend_13 { pt3dadd( 27.1368, 125.028, -12.7904, 0.29 ) }
    dend_13 { pt3dadd( 27.6719, 125.919, -13.3021, 1.47 ) }
    dend_13 { pt3dadd( 27.8803, 126.241, -13.4812, 1.47 ) }
    dend_13 { pt3dadd( 28.5297, 127.197, -14.0017, 0.66 ) }
    dend_13 { pt3dadd( 29.3796, 128.43, -14.6243, 0.29 ) }
    dend_13 { pt3dadd( 29.7861, 129.046, -14.9059, 0.29 ) }
    dend_13 { pt3dadd( 30.2779, 129.833, -15.1899, 0.88 ) }
    dend_13 { pt3dadd( 30.5704, 130.284, -15.3596, 1.25 ) }
    dend_13 { pt3dadd( 31.336, 131.447, -15.8396, 0.29 ) }
    dend_13 { pt3dadd( 31.784, 132.147, -16.1404, 0.22 ) }
    dend_13 { pt3dadd( 32.1355, 132.778, -16.4772, 0.66 ) }
    dend_13 { pt3dadd( 32.3554, 133.314, -16.7813, 0.81 ) }
    dend_13 { pt3dadd( 32.6208, 134.315, -17.3222, 0.22 ) }
    dend_13 { pt3dadd( 32.7405, 134.939, -17.6281, 0.22 ) }
    dend_13 { pt3dadd( 32.8157, 135.527, -17.9308, 0.74 ) }
    dend_13 { pt3dadd( 32.9015, 136.434, -18.5281, 1.4 ) }
    dend_13 { pt3dadd( 32.9985, 137.713, -19.4602, 0.29 ) }
    dend_13 { pt3dadd( 33.0543, 138.594, -20.2176, 0.81 ) }
    dend_13 { pt3dadd( 33.0753, 138.872, -20.5101, 0.96 ) }
    dend_13 { pt3dadd( 33.1985, 140.105, -22.2388, 0.29 ) }
    dend_13 { pt3dadd( 33.2748, 141.044, -23.7622, 0.29 ) }
    dend_13 { pt3dadd( 33.2881, 141.387, -24.3529, 1.33 ) }
    dend_13 { pt3dadd( 33.2725, 142.16, -25.8038, 2.28 ) }
    dend_13 { pt3dadd( 33.2181, 143.069, -27.6209, 2.28 ) }
    dend_13 { pt3dadd( 33.0212, 144.68, -31.1866, 0.81 ) }
    dend_13 { pt3dadd( 32.9795, 144.872, -31.6411, 0.88 ) }
    dend_13 { pt3dadd( 32.8558, 145.254, -32.5842, 0.29 ) }
    dend_13 { pt3dadd( 32.6288, 145.751, -33.8875, 0.37 ) }
    dend_13 { pt3dadd( 32.5183, 145.948, -34.3792, 0.37 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_13 { pt3dadd( 32.0294, 146.808, -36.246, 0.37 ) }
    dend_13 { pt3dadd( 31.843, 147.202, -36.9681, 0.37 ) }
    dend_13 { pt3dadd( 31.4951, 148.277, -38.6854, 1.55 ) }
    dend_13 { pt3dadd( 31.3892, 148.805, -39.4026, 1.92 ) }
    dend_13 { pt3dadd( 31.2771, 150.525, -41.1395, 0.44 ) }
    dend_13 { pt3dadd( 31.3095, 151.344, -41.7551, 0.29 ) }
    dend_13 { pt3dadd( 31.4176, 152.277, -42.2501, 0.88 ) }
    dend_13 { pt3dadd( 31.5197, 152.779, -42.4653, 0.96 ) }
    dend_13 { pt3dadd( 31.6695, 153.317, -42.6337, 0.96 ) }
    dend_13 { pt3dadd( 32.2626, 155.085, -43.0641, 0.37 ) }
    dend_13 { pt3dadd( 32.8184, 156.557, -43.3268, 0.29 ) }
    dend_13 { pt3dadd( 33.203, 157.416, -43.6317, 0.29 ) }
    dend_13 { pt3dadd( 33.8138, 158.689, -44.2444, 1.33 ) }
    dend_13 { pt3dadd( 34.0996, 159.249, -44.5968, 2.14 ) }
    dend_13 { pt3dadd( 34.3177, 159.666, -44.9124, 2.36 ) }
    dend_13 { pt3dadd( 34.483, 159.974, -45.2146, 2.36 ) }
    dend_13 { pt3dadd( 35.952, 162.625, -48.3271, 0.29 ) }
    dend_13 { pt3dadd( 36.2729, 163.214, -49.1015, 0.88 ) }
    dend_13 { pt3dadd( 36.5891, 163.892, -50.0196, 1.4 ) }
    dend_13 { pt3dadd( 36.7387, 164.281, -50.5438, 1.55 ) }
    dend_13 { pt3dadd( 37.1651, 165.629, -52.2888, 0.37 ) }
    dend_13 { pt3dadd( 37.2879, 166.122, -52.8664, 0.37 ) }
    dend_13 { pt3dadd( 37.4578, 167.216, -53.9582, 1.18 ) }
    dend_13 { pt3dadd( 37.5816, 167.971, -54.7214, 1.47 ) }
    dend_13 { pt3dadd( 37.8081, 169.612, -56.2484, 0.29 ) }
    dend_13 { pt3dadd( 37.8475, 170.063, -56.6243, 0.44 ) }
    dend_13 { pt3dadd( 37.8699, 170.758, -57.1053, 0.29 ) }
    dend_13 { pt3dadd( 37.864, 172.318, -58.0953, 1.77 ) }
    dend_13 { pt3dadd( 37.8475, 173.181, -58.5647, 2.06 ) }
    dend_13 { pt3dadd( 37.8307, 174.003, -58.9291, 1.92 ) }
    dend_13 { pt3dadd( 37.7299, 175.82, -59.4694, 0.22 ) }
    dend_13 { pt3dadd( 37.6774, 176.679, -59.6557, 0.22 ) }
    dend_13 { pt3dadd( 37.6705, 176.771, -59.6644, 0.22 ) }
    dend_13 { pt3dadd( 37.632, 177.495, -59.5812, 0.22 ) }
    dend_13 { pt3dadd( 37.6014, 178.646, -59.3309, 0.96 ) }
    dend_13 { pt3dadd( 37.6168, 179.0, -59.2329, 1.33 ) }
    dend_13 { pt3dadd( 37.6497, 179.36, -59.1208, 1.33 ) }
    dend_13 { pt3dadd( 37.7597, 180.411, -58.8089, 0.44 ) }
    dend_13 { pt3dadd( 38.0142, 182.357, -58.2861, 0.22 ) }
    dend_13 { pt3dadd( 38.0282, 182.445, -58.2638, 0.22 ) }
    dend_13 { pt3dadd( 38.2908, 183.884, -57.83, 0.22 ) }
    dend_13 { pt3dadd( 38.4364, 184.658, -57.5532, 1.03 ) }
    dend_13 { pt3dadd( 38.5323, 185.123, -57.3683, 1.62 ) }
    dend_13 { pt3dadd( 38.7055, 185.856, -57.0432, 1.62 ) }
    dend_13 { pt3dadd( 38.7482, 186.037, -56.9625, 1.62 ) }
    dend_13 { pt3dadd( 39.3352, 188.466, -55.8601, 0.22 ) }
    dend_13 { pt3dadd( 39.4633, 189.023, -55.5983, 0.66 ) }
    dend_13 { pt3dadd( 39.5928, 189.658, -55.3117, 0.66 ) }
    dend_13 { pt3dadd( 39.6666, 190.181, -55.1144, 0.59 ) }
    dend_13 { pt3dadd( 39.7367, 191.146, -54.8498, 0.22 ) }
    dend_13 { pt3dadd( 39.7479, 191.581, -54.7813, 0.66 ) }
    dend_13 { pt3dadd( 39.7185, 192.062, -54.7738, 0.88 ) }
    dend_13 { pt3dadd( 39.6382, 192.872, -54.7718, 0.44 ) }
    dend_13 { pt3dadd( 39.4539, 194.182, -54.7889, 0.22 ) }
    dend_13 { pt3dadd( 39.3064, 195.127, -54.8099, 0.81 ) }
    dend_13 { pt3dadd( 39.2069, 195.751, -54.8235, 1.18 ) }
    dend_13 { pt3dadd( 38.9266, 197.523, -54.862, 0.22 ) }
    dend_13 { pt3dadd( 38.917, 197.603, -54.8722, 0.22 ) }
    dend_13 { pt3dadd( 38.7817, 198.958, -55.1564, 0.22 ) }
    dend_13 { pt3dadd( 38.7362, 199.805, -55.3823, 1.03 ) }
    dend_13 { pt3dadd( 38.7338, 200.35, -55.5463, 1.33 ) }
    dend_13 { pt3dadd( 38.759, 200.897, -55.7264, 1.33 ) }
    dend_13 { pt3dadd( 39.1437, 203.919, -56.7657, 0.22 ) }
    dend_13 { pt3dadd( 39.1556, 203.995, -56.7933, 0.22 ) }
    dend_13 { pt3dadd( 39.5077, 205.686, -57.4644, 0.22 ) }
    dend_13 { pt3dadd( 39.6492, 206.267, -57.7062, 0.59 ) }
    dend_13 { pt3dadd( 39.6702, 206.341, -57.736, 0.59 ) }
    dend_13 { pt3dadd( 40.0112, 207.355, -58.0809, 0.74 ) }
    // Section: dend_8, id: dend_8, parent: dend_6 (entry count 68/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -22.2669, -190.836, -41.773, 0.37 ) }
    dend_8 { pt3dadd( -21.0262, -192.101, -41.4868, 0.37 ) }
    dend_8 { pt3dadd( -20.2455, -192.925, -41.3085, 0.29 ) }
    dend_8 { pt3dadd( -19.3, -193.976, -41.087, 0.29 ) }
    dend_8 { pt3dadd( -18.6407, -194.763, -40.9272, 0.88 ) }
    dend_8 { pt3dadd( -18.4253, -195.038, -40.8854, 1.11 ) }
    dend_8 { pt3dadd( -18.3791, -195.1, -40.878, 1.11 ) }
    dend_8 { pt3dadd( -18.1639, -195.476, -40.8626, 1.11 ) }
    dend_8 { pt3dadd( -17.7689, -196.34, -40.9326, 0.29 ) }
    dend_8 { pt3dadd( -17.5324, -196.975, -41.0455, 0.29 ) }
    dend_8 { pt3dadd( -17.2865, -197.726, -41.2036, 0.74 ) }
    dend_8 { pt3dadd( -17.1824, -198.04, -41.2878, 0.88 ) }
    dend_8 { pt3dadd( -17.0143, -198.543, -41.4388, 0.59 ) }
    dend_8 { pt3dadd( -16.6526, -199.623, -41.787, 0.29 ) }
    dend_8 { pt3dadd( -16.6064, -199.744, -41.8289, 0.29 ) }
    dend_8 { pt3dadd( -16.3279, -200.399, -42.0251, 0.29 ) }
    dend_8 { pt3dadd( -15.9967, -201.125, -42.1908, 1.11 ) }
    dend_8 { pt3dadd( -15.7737, -201.542, -42.3174, 1.4 ) }
    dend_8 { pt3dadd( -15.5356, -201.964, -42.4424, 1.4 ) }
    dend_8 { pt3dadd( -14.751, -203.282, -42.7919, 0.22 ) }
    dend_8 { pt3dadd( -14.2945, -204.038, -43.0066, 0.22 ) }
    dend_8 { pt3dadd( -13.9723, -204.563, -43.1719, 0.81 ) }
    dend_8 { pt3dadd( -13.0218, -206.07, -43.6414, 0.81 ) }
    // Section: dend_7, id: dend_7, parent: dend_6 (entry count 91/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -22.2669, -190.836, -41.773, 0.96 ) }
    dend_7 { pt3dadd( -21.6555, -191.759, -45.1647, 0.96 ) }
    dend_7 { pt3dadd( -20.6963, -193.198, -49.853, 0.96 ) }
    dend_7 { pt3dadd( -20.201, -193.942, -52.1183, 0.66 ) }
    dend_7 { pt3dadd( -19.8636, -194.463, -53.5584, 1.4 ) }
    dend_7 { pt3dadd( -19.7691, -194.61, -53.9319, 1.4 ) }
    dend_7 { pt3dadd( -18.9464, -195.884, -56.9975, 0.44 ) }
    dend_7 { pt3dadd( -18.6204, -196.313, -57.8589, 0.37 ) }
    dend_7 { pt3dadd( -18.5916, -196.353, -57.9181, 0.37 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_7 { pt3dadd( -17.7619, -197.516, -59.4744, 0.29 ) }
    dend_7 { pt3dadd( -17.3324, -198.057, -60.1645, 1.47 ) }
    dend_7 { pt3dadd( -17.2368, -198.17, -60.3113, 1.77 ) }
    dend_7 { pt3dadd( -16.9063, -198.521, -60.7838, 1.99 ) }
    dend_7 { pt3dadd( -16.273, -199.134, -61.7198, 1.99 ) }
    dend_7 { pt3dadd( -15.1203, -200.194, -63.3881, 0.44 ) }
    dend_7 { pt3dadd( -14.4838, -200.725, -64.3317, 0.81 ) }
    dend_7 { pt3dadd( -13.6548, -201.337, -65.6778, 0.52 ) }
    dend_7 { pt3dadd( -12.4521, -202.209, -67.6808, 0.44 ) }
    dend_7 { pt3dadd( -11.8274, -202.647, -68.7534, 1.11 ) }
    dend_7 { pt3dadd( -11.539, -202.843, -69.2591, 1.11 ) }
    dend_7 { pt3dadd( -9.96165, -203.822, -72.0647, 1.4 ) }
    dend_7 { pt3dadd( -8.20554, -204.814, -75.3376, 1.55 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
    ModelViewParmSubset_2 = new SectionList()
    dend_9 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
    ModelViewParmSubset_3 = new SectionList()
    soma_0 ModelViewParmSubset_3.append()
    dend_9 ModelViewParmSubset_3.append()
    dend_0 ModelViewParmSubset_3.append()
    dend_15 ModelViewParmSubset_3.append()
    dend_10 ModelViewParmSubset_3.append()
    dend_4 ModelViewParmSubset_3.append()
    dend_1 ModelViewParmSubset_3.append()
    dend_17 ModelViewParmSubset_3.append()
    dend_16 ModelViewParmSubset_3.append()
    dend_12 ModelViewParmSubset_3.append()
    dend_11 ModelViewParmSubset_3.append()
    dend_6 ModelViewParmSubset_3.append()
    dend_5 ModelViewParmSubset_3.append()
    dend_3 ModelViewParmSubset_3.append()
    dend_2 ModelViewParmSubset_3.append()
    dend_19 ModelViewParmSubset_3.append()
    dend_18 ModelViewParmSubset_3.append()
    dend_14 ModelViewParmSubset_3.append()
    dend_13 ModelViewParmSubset_3.append()
    dend_8 ModelViewParmSubset_3.append()
    dend_7 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_4 = new SectionList()
    axon_0 ModelViewParmSubset_4.append()
    axon_1 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_15 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_10 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_4 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_1 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_17 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_11 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_6 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_2 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_13 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_9 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_0 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_3 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_16 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_12 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_14 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_5 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_8 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_7 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_18 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_19 OneSecGrp_SectionRef_18.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_19, dend_18, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_17 all.append()
    dend_17 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert KdShu2007
        gmax_KdShu2007 = 4.2499998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dNAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__dNAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dNAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__dNAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_15 nseg = 3
    dend_10 nseg = 3
    dend_4 nseg = 5
    dend_1 nseg = 3
    dend_17 nseg = 9
    dend_11 nseg = 3
    dend_6 nseg = 5
    dend_2 nseg = 3
    dend_13 nseg = 7
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate dNAC222_L4_BTC_627d6addbc_0_0


