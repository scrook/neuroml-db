// Cell: dSTUT214_L6_NBC_242af4db7d_0_0
/*
{
  "id" : "dSTUT214_L6_NBC_242af4db7d_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-7.79996, 1.63899, 0.0, 2.31456", "-7.07575, 1.4414, 0.0, 3.87478", "-6.35154, 1.2438, 0.0, 5.48504", "-5.62733, 1.04621, 0.0, 6.75924", "-4.90312, 0.848615, 0.0, 7.77214", "-4.17891, 0.65102, 0.0, 8.39732", "-3.4547, 0.453425, 0.0, 9.01032", "-2.73049, 0.255831, 0.0, 9.61582", "-2.00628, 0.0582363, 0.0, 9.97495", "-1.28207, -0.139358, 0.0, 10.1182", "-0.557856, -0.336953, 0.0, 10.2615", "0.166353, -0.534547, 0.0, 10.4039", "0.890563, -0.732142, 0.0, 10.3605", "1.61477, -0.929737, 0.0, 10.3021", "2.33898, -1.12733, 0.0, 10.2398", "3.06319, -1.32493, 0.0, 10.0638", "3.7874, -1.52252, 0.0, 9.71016", "4.51161, -1.72011, 0.0, 8.98989", "5.23582, -1.91771, 0.0, 7.92103", "5.96003, -2.1153, 0.0, 6.49304", "6.68424, -2.3129, 0.0, 3.64119" ]
  }, {
    "name" : "dend_34",
    "id" : "dend_34",
    "points3d" : [ "2.72858, -5.1883, 7.36, 1.36", "2.72858, -5.1883, 7.36, 1.36", "2.96854, -6.4856, 7.17994, 1.14", "3.29337, -8.24174, 6.9362, 0.91", "3.71441, -10.5181, 6.62027, 0.91", "3.9688, -11.8934, 6.42938, 0.91", "4.3603, -14.01, 6.13561, 0.91" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_31",
    "id" : "dend_31",
    "points3d" : [ "-1.14142, -3.00331, -3.98, 0.68", "-1.14142, -3.00331, -3.98, 0.68", "-1.75743, -3.50401, -5.03603, 0.68", "-2.3383, -3.91108, -6.03776, 0.68", "-2.76484, -4.20058, -6.76139, 0.68", "-3.25876, -4.5226, -7.59687, 0.68", "-3.82328, -4.85148, -8.50476, 0.68", "-4.38913, -5.15782, -9.42058, 0.68", "-4.90333, -5.39502, -10.263, 0.68", "-5.46244, -5.62003, -11.1544, 0.68", "-6.09617, -5.85905, -12.1195, 0.68", "-6.83868, -6.11657, -13.1891, 0.68" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "4.57856, -3.78231, 2.8, 0.68", "4.57856, -3.78231, 2.8, 0.68", "5.61442, -5.06761, 3.02135, 0.68", "6.18869, -5.81572, 3.16217, 0.68", "7.21898, -7.16551, 3.43798, 0.68", "8.10376, -8.27482, 3.66153, 0.68", "9.04545, -9.42549, 3.87334, 0.68", "9.74949, -10.2535, 4.01507, 0.68", "10.8206, -11.4615, 4.22555, 0.45", "11.8264, -12.6123, 4.43542, 0.68", "13.31, -14.318, 4.81381, 0.68", "14.3851, -15.5311, 5.13588, 0.68", "15.1386, -16.3924, 5.40817, 0.68", "15.8106, -17.1509, 5.68587, 0.68", "16.491, -17.9322, 5.99453, 0.68", "17.3528, -18.9482, 6.42462, 0.68", "18.1023, -19.8239, 6.8576, 0.68", "18.9724, -20.8107, 7.42035, 0.45", "19.5907, -21.4991, 7.83831, 0.45", "20.6773, -22.6718, 8.54092, 0.45", "21.5935, -23.5977, 9.10812, 0.45", "22.2803, -24.2675, 9.54115, 0.45", "22.8899, -24.8416, 9.95397, 0.45", "23.6602, -25.575, 10.5652, 0.45", "24.4698, -26.4317, 11.3366, 0.45", "25.0372, -27.073, 11.9841, 0.45", "25.4489, -27.6117, 12.5092, 0.45", "25.8996, -28.2389, 13.0662, 0.45", "26.404, -28.9743, 13.6774, 0.45", "27.0436, -29.9588, 14.4764, 0.45", "27.5148, -30.7454, 15.1028, 0.45", "27.9623, -31.5269, 15.7348, 0.23", "28.457, -32.3543, 16.3915, 0.23", "29.034, -33.2588, 17.0976, 0.23", "29.4117, -33.8314, 17.5312, 0.23", "29.7958, -34.4506, 18.0185, 0.23", "30.4226, -35.5789, 18.8938, 0.23" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "6.16864, 1.4047, -0.84, 2.27", "6.16864, 1.4047, -0.84, 2.27", "7.53725, 2.10157, -1.68054, 1.82", "9.38823, 3.04406, -2.81734, 1.36", "10.7881, 3.75686, -3.6771, 1.36" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "3.79865, -4.3428, 5.46, 0.91", "3.79865, -4.3428, 5.46, 0.91", "4.91542, -5.52507, 6.11497, 0.91", "6.1941, -6.80903, 6.89919, 0.68", "7.49224, -7.99048, 7.74992, 0.68", "8.4816, -8.83283, 8.45133, 0.91", "9.55378, -9.64871, 9.27693, 0.91", "10.6551, -10.263, 10.1553, 0.68", "12.0253, -10.7177, 11.2786, 0.68", "13.1421, -10.9742, 12.2321, 0.68", "13.755, -11.1052, 12.7639, 0.68", "15.0138, -11.3696, 13.8463, 0.68", "16.9482, -11.7898, 15.378, 0.45", "18.3439, -12.1178, 16.3756, 0.45", "19.8117, -12.4957, 17.2745, 0.45", "21.2708, -12.938, 18.1003, 0.45", "22.8955, -13.5014, 18.9477, 0.45", "24.1299, -14.0104, 19.5413, 0.45", "25.8556, -14.8089, 20.3445, 0.68", "27.8793, -15.7337, 21.1852, 0.68" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "0.288636, -4.27631, 6.82, 0.91", "0.288636, -4.27631, 6.82, 0.91", "-1.15677, -6.31247, 7.97972, 0.91", "-2.63291, -8.23058, 9.15515, 0.91", "-3.94695, -9.93804, 10.2015, 0.91", "-5.0648, -11.3906, 11.0916, 0.91", "-6.24992, -12.9306, 12.0353, 0.91", "-7.32102, -14.2719, 12.9329, 0.91", "-8.3595, -15.4483, 13.9125, 0.91" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-6.31134, 0.63519, 6.86, 0.91", "-6.31134, 0.63519, 6.86, 0.91", "-6.96457, 0.63519, 7.11101, 0.91", "-8.40923, 0.63519, 7.66612, 0.91" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-6.99139, 1.4617, -3.54, 0.91", "-6.99139, 1.4617, -3.54, 0.91", "-7.97451, 1.59896, -3.80131, 0.91", "-9.17211, 1.70529, -4.13751, 0.91", "-10.8521, 1.82375, -4.6687, 0.91", "-11.7194, 1.87224, -4.97258, 0.91", "-13.0461, 1.92214, -5.46852, 0.91", "-14.2882, 1.92942, -5.96655, 0.91", "-15.4963, 1.90838, -6.46592, 0.91", "-16.8842, 1.85587, -7.0568, 0.68", "-18.54, 1.75855, -7.77861, 0.91", "-19.7682, 1.68229, -8.32645, 0.91", "-21.1393, 1.61704, -8.96781, 0.91", "-23.1763, 1.54615, -9.90269, 0.91" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-4.04144, 3.9127, 5.18, 0.91", "-4.04144, 3.9127, 5.18, 0.91", "-4.53347, 5.54459, 6.3931, 0.91", "-4.74118, 6.86123, 7.35146, 0.68", "-4.76326, 8.06428, 8.20598, 0.68", "-4.69867, 8.94052, 8.82933, 0.68", "-4.53435, 10.1109, 9.66059, 0.68", "-4.27168, 11.1555, 10.4339, 0.68", "-3.78032, 12.5525, 11.5547, 0.68", "-3.29517, 13.8937, 12.6477, 0.68", "-2.94723, 14.8204, 13.448, 0.68", "-2.65193, 15.6441, 14.2294, 0.68", "-2.34765, 16.5366, 15.151, 0.68", "-2.10096, 17.3725, 16.1041, 0.45", "-1.85825, 18.3759, 17.4392, 0.45", "-1.77115, 19.2709, 18.7786, 0.45", "-1.7587, 19.9935, 19.9345, 0.45", "-1.76236, 20.5924, 20.9116, 0.68", "-1.75365, 21.2103, 21.8863, 0.45", "-1.7239, 21.9137, 22.9332, 0.45", "-1.77018, 22.4477, 23.6888, 0.45", "-2.01449, 23.2777, 24.7336, 0.45", "-2.29067, 23.9991, 25.6338, 0.45", "-2.56661, 24.8602, 26.7116, 0.45", "-2.71351, 25.6213, 27.6096, 0.45", "-2.87807, 26.6193, 28.7119, 0.45", "-3.05663, 27.3932, 29.5775, 0.45", "-3.32771, 28.0771, 30.3774, 0.45", "-3.81952, 29.0349, 31.5088, 0.45", "-4.20172, 29.7314, 32.333, 0.45", "-4.53974, 30.4564, 33.2016, 0.45", "-4.70538, 30.9799, 33.8366, 0.45", "-4.96751, 32.1128, 35.1721, 0.45", "-5.12719, 33.0037, 36.1642, 0.45", "-5.19102, 33.5623, 36.8301, 0.45", "-5.05608, 34.292, 37.7605, 0.45", "-4.71548, 35.0394, 38.7619, 0.45", "-4.21537, 35.8236, 39.8701, 0.45", "-3.7113, 36.5059, 40.8281, 0.45", "-3.01333, 37.3337, 42.0288, 0.45", "-1.9085, 38.6299, 43.9431, 0.23", "-1.50339, 39.0741, 44.6328, 0.23", "-0.907453, 39.7012, 45.6065, 0.23", "-0.243267, 40.3604, 46.5955, 0.23", "0.478376, 41.0481, 47.5688, 0.23", "1.19732, 41.7119, 48.472, 0.23", "2.17562, 42.6503, 49.7388, 0.23", "3.31582, 43.6681, 51.1155, 0.23", "4.43866, 44.5798, 52.378, 0.23", "5.50969, 45.3783, 53.5581, 0.23", "6.35428, 46.056, 54.4856, 0.23" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999995616860894,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "6.68424, -2.3129, 0.0, 0.767491", "21.1553, -6.2612, 0.0, 0.767491", "35.6263, -10.2095, 0.0, 0.767491" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_36",
    "id" : "dend_36",
    "points3d" : [ "4.3603, -14.01, 6.13561, 0.68", "5.42853, -15.0968, 5.962, 0.68", "7.26463, -17.0379, 5.56849, 0.68", "9.02416, -18.9664, 5.15975, 0.68", "10.6218, -20.7372, 4.79315, 0.68", "12.586, -23.0525, 4.35282, 0.68", "14.308, -25.2637, 3.97398, 0.68", "15.787, -27.3861, 3.6202, 0.68", "16.6425, -28.742, 3.38714, 0.68", "18.1594, -31.3281, 2.93458, 0.68", "19.5306, -33.7725, 2.50457, 0.68", "20.6306, -35.9089, 2.15686, 0.68", "21.7591, -38.263, 1.85763, 0.45", "22.6815, -40.3848, 1.60412, 0.45", "23.5141, -42.5263, 1.2628, 0.45", "24.1968, -44.4054, 0.840578, 0.45", "25.1423, -46.9108, 0.0519748, 0.45", "25.8719, -48.8902, -0.709088, 0.45", "26.5575, -50.8879, -1.60483, 0.68", "27.2601, -52.8682, -2.60946, 0.68", "28.0826, -55.0455, -3.8103, 0.68", "28.99, -57.1421, -5.06285, 0.45", "30.019, -59.1498, -6.33368, 0.45", "30.7592, -60.5061, -7.15591, 0.45", "32.1405, -62.8073, -8.40097, 0.45", "32.8244, -63.8553, -8.88387, 0.45", "33.8213, -65.2574, -9.46276, 0.45", "35.1277, -66.9126, -10.1346, 0.45", "36.9672, -68.966, -11.0774, 0.45", "38.6938, -70.722, -12.0302, 0.45", "40.4361, -72.4487, -13.1474, 0.45", "41.5618, -73.4692, -13.9407, 0.45", "42.8914, -74.5665, -14.9344, 0.45", "44.6532, -75.959, -16.3249, 0.45", "46.5905, -77.4942, -17.9692, 0.45", "48.4981, -79.1274, -19.667, 0.45", "49.7536, -80.2318, -20.8553, 0.45", "50.9906, -81.3546, -22.0449, 0.45", "51.721, -82.0439, -22.7474, 0.45", "52.7971, -83.0844, -23.7374, 0.45", "54.1098, -84.445, -24.9349, 0.45", "55.4658, -85.8774, -26.1997, 0.23", "56.7379, -87.31, -27.4253, 0.23", "57.7937, -88.5325, -28.4963, 0.23", "58.9276, -89.979, -29.7942, 0.23", "60.189, -91.8389, -31.3785, 0.23", "61.4797, -94.0466, -33.0744, 0.23", "61.75, -94.5318, -33.4069, 0.23", "62.3683, -95.6711, -34.1172, 0.23", "63.4676, -97.8121, -35.3377, 0.23", "64.3501, -99.662, -36.3168, 0.23", "65.6649, -102.453, -37.716, 0.23", "66.7469, -104.913, -38.8944, 0.23", "67.6237, -107.096, -39.9539, 0.23", "68.5755, -109.785, -41.2281, 0.23", "69.3067, -111.918, -42.238, 0.23", "69.6066, -112.918, -42.7076, 0.23", "69.913, -114.237, -43.2674, 0.23", "70.375, -116.328, -44.0491, 0.23", "70.746, -117.827, -44.5583, 0.23", "71.4144, -120.243, -45.256, 0.23", "72.1961, -122.709, -45.8419, 0.23", "73.1159, -125.293, -46.3256, 0.23", "73.9563, -127.417, -46.6398, 0.23", "74.431, -128.48, -46.7702, 0.23", "75.4299, -130.494, -47.0078, 0.23", "76.7304, -133.108, -47.3038, 0.23", "77.9513, -135.346, -47.589, 0.23", "78.931, -136.975, -47.8398, 0.23", "79.7168, -138.265, -48.0561, 0.23", "80.5497, -139.664, -48.3078, 0.23", "81.4024, -141.186, -48.6224, 0.23", "83.1843, -144.899, -49.4723, 0.23", "84.3579, -147.855, -50.1371, 0.23", "85.0227, -149.935, -50.6199, 0.23", "85.533, -151.898, -51.0895, 0.23", "86.0817, -154.472, -51.728, 0.23", "86.6444, -157.436, -52.4626, 0.23", "87.4494, -162.987, -53.8131, 0.23", "87.7555, -165.662, -54.4533, 0.23", "88.0013, -167.891, -55.0102, 0.23", "88.1942, -169.442, -55.4134, 0.23", "95.5963, -178.627, -58.5683, 0.23" ],
    "parent" : "dend_34",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_35",
    "id" : "dend_35",
    "points3d" : [ "4.3603, -14.01, 6.13561, 0.45", "3.63113, -16.0149, 3.87685, 0.45", "3.11068, -17.8886, 1.61649, 0.45", "2.84333, -18.8101, 0.49634, 0.45", "2.3481, -20.6267, -1.59895, 0.45", "2.05157, -22.1061, -3.31215, 0.45", "1.87785, -23.5254, -4.94652, 0.45", "1.91542, -24.8667, -6.48677, 0.45", "2.15969, -26.1879, -7.971, 0.45", "2.60759, -27.6269, -9.50083, 0.45", "3.52589, -29.9709, -11.7735, 0.45", "4.26187, -31.8011, -13.3986, 0.45", "4.90932, -33.7066, -14.9817, 0.45", "5.54081, -35.414, -16.4774, 0.45", "6.3599, -37.4989, -18.4587, 0.45", "6.73903, -38.6201, -19.6553, 0.45", "7.12721, -40.1527, -21.3281, 0.45", "7.4985, -42.0238, -23.6623, 0.23", "7.84924, -44.3536, -26.893, 0.23", "8.1108, -46.0893, -29.4624, 0.23", "8.40199, -48.0579, -32.5891, 0.23", "8.56759, -49.1303, -34.3547, 0.23", "8.82333, -51.4253, -38.112, 0.23", "8.94902, -53.2431, -41.0157, 0.23", "8.9673, -55.1984, -43.8959, 0.23", "8.97247, -57.4087, -47.1036, 0.23", "8.97944, -58.7914, -49.0604, 0.23", "8.92413, -61.1187, -52.369, 0.23", "8.83161, -62.3444, -53.9326, 0.23", "8.61621, -63.8654, -55.8596, 0.23", "8.76116, -74.4675, -64.6637, 0.23" ],
    "parent" : "dend_34",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_33",
    "id" : "dend_33",
    "points3d" : [ "-6.83868, -6.11657, -13.1891, 0.45", "-8.21299, -6.5958, -14.4771, 0.45", "-9.41477, -6.96658, -15.6014, 0.45", "-10.4294, -7.28235, -16.5722, 0.45", "-11.4685, -7.60731, -17.4906, 0.45", "-12.6942, -8.01411, -18.5708, 0.45", "-13.7733, -8.357, -19.5269, 0.45", "-15.0552, -8.73602, -20.7542, 0.45", "-16.2992, -9.0732, -21.994, 0.45", "-18.0488, -9.56638, -23.7633, 0.45", "-19.0355, -9.86102, -24.7889, 0.45", "-20.3097, -10.2896, -26.1865, 0.45", "-21.2891, -10.652, -27.3709, 0.45", "-22.0641, -10.946, -28.3895, 0.45", "-22.8901, -11.2589, -29.5635, 0.45", "-23.624, -11.5578, -30.769, 0.45", "-24.3698, -11.8826, -31.9999, 0.45", "-25.1723, -12.3557, -33.4013, 0.45", "-32.8396, -14.228, -41.7192, 0.45", "-39.8686, -14.3747, -50.7951, 0.45", "-45.8759, -13.874, -60.564, 0.45" ],
    "parent" : "dend_31",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_32",
    "id" : "dend_32",
    "points3d" : [ "-6.83868, -6.11657, -13.1891, 0.45", "-6.68775, -6.89526, -13.9073, 0.45", "-6.59175, -7.52633, -14.516, 0.45", "-6.49134, -8.58252, -15.5171, 0.45", "-6.38927, -9.46122, -16.3898, 0.45", "-6.30903, -10.0287, -17.004, 0.45", "-6.18479, -10.6638, -17.7289, 0.45", "-5.97273, -11.3903, -18.6711, 0.45", "-5.86987, -11.6972, -19.0822, 0.45", "-5.66267, -12.4359, -19.9826, 0.45", "-5.53259, -13.1683, -20.7622, 0.45", "-5.45854, -14.0509, -21.5683, 0.45", "-5.45364, -14.7603, -22.0655, 0.45", "-5.43871, -15.3415, -22.4449, 0.45", "-5.34586, -16.4963, -23.2581, 0.45", "-5.23281, -17.5492, -24.0032, 0.45", "-5.03247, -18.5867, -24.7691, 0.45", "-4.70448, -19.5428, -25.627, 0.45", "-4.10107, -20.7098, -26.9988, 0.45", "-3.4625, -21.6024, -28.3158, 0.23", "-3.20005, -21.8901, -28.836, 0.23", "-2.70322, -22.345, -29.8609, 0.23", "-2.08779, -22.8933, -31.14, 0.23", "-1.34867, -23.5558, -32.7366, 0.23", "-1.06075, -23.8721, -33.4218, 0.23", "-0.548104, -24.5601, -34.823, 0.23", "-0.219968, -25.0594, -35.8279, 0.23", "0.300789, -25.8747, -37.5639, 0.23", "1.23131, -30.0876, -43.3331, 0.23" ],
    "parent" : "dend_31",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "10.7881, 3.75686, -3.6771, 1.36", "10.8817, 3.77768, -3.70601, 1.36", "12.571, 4.15375, -4.22798, 1.82" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "10.7881, 3.75686, -3.6771, 0.45", "9.74022, 4.13621, -4.73212, 0.45", "8.63456, 4.52318, -5.70286, 0.45", "7.15486, 5.08538, -6.97646, 0.45", "6.01746, 5.61051, -7.97763, 0.45", "4.97971, 6.12461, -8.91811, 0.45", "3.90506, 6.71048, -9.98584, 0.45", "2.96014, 7.2844, -11.1282, 0.45", "2.43582, 7.72582, -11.9939, 0.45", "1.884, 8.3973, -13.3524, 0.45", "1.36131, 9.24533, -15.1725, 0.45", "0.918797, 10.1707, -17.3194, 0.45", "0.426273, 11.3042, -20.199, 0.45", "0.031977, 12.2429, -22.8233, 0.45", "-0.369865, 13.022, -25.2658, 0.45", "-0.883142, 13.8232, -28.0534, 0.45", "-1.4705, 14.5963, -30.7624, 0.45", "-1.94921, 15.0645, -32.4333, 0.45", "-2.42724, 15.4025, -33.6177, 0.45", "-3.46123, 15.9961, -35.6548, 0.45", "-4.4289, 16.5229, -37.2994, 0.45", "-5.30474, 16.9812, -38.6618, 0.45", "-6.21395, 17.434, -40.0759, 0.45", "-7.28895, 17.9873, -41.7296, 0.45", "-7.9604, 18.3458, -42.7817, 0.45", "-9.21099, 19.0643, -44.9802, 0.23", "-10.1438, 19.6861, -46.7786, 0.23", "-11.786, 20.9613, -50.2966, 0.23", "-12.5878, 21.6202, -52.1002, 0.23", "-13.491, 22.4139, -54.2524, 0.23", "-14.7876, 23.6108, -57.3899, 0.23", "-15.7282, 24.5204, -59.6429, 0.23", "-16.8764, 25.7833, -62.4788, 0.23", "-17.7997, 27.0076, -64.9201, 0.23", "-22.5053, 32.3933, -74.9657, 0.23" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "27.8793, -15.7337, 21.1852, 0.45", "28.5004, -16.0254, 22.0124, 0.45", "29.6073, -16.374, 23.205, 0.45", "30.8934, -16.7041, 24.4081, 0.45", "31.5646, -16.8981, 25.023, 0.45", "32.4614, -17.1515, 25.8651, 0.45", "33.6027, -17.4429, 26.974, 0.45", "35.0623, -17.7287, 28.3805, 0.45", "35.9351, -17.8783, 29.2098, 0.45", "36.9138, -18.0032, 30.1364, 0.45", "37.845, -18.0779, 31.0101, 0.45", "38.8444, -18.1405, 31.9151, 0.45", "39.9456, -18.2444, 32.9343, 0.45", "41.1428, -18.3813, 33.9805, 0.45", "42.2466, -18.4811, 34.8109, 0.45", "43.4884, -18.6027, 35.6303, 0.45", "44.8465, -18.8192, 36.4436, 0.45", "46.3706, -19.1546, 37.2384, 0.45", "48.1786, -19.5682, 37.9656, 0.45", "49.9355, -19.9013, 38.5346, 0.23", "51.5586, -20.2153, 39.0145, 0.23", "53.1533, -20.5493, 39.435, 0.23", "55.3505, -20.983, 39.9405, 0.23", "58.9334, -21.6154, 40.6515, 0.23", "61.8117, -22.1102, 41.1616, 0.23" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "27.8793, -15.7337, 21.1852, 0.45", "29.2948, -16.7235, 21.4518, 0.45", "30.0311, -17.1393, 21.5965, 0.45", "31.5424, -17.9783, 21.8799, 0.23", "32.7436, -18.6063, 22.081, 0.23", "33.8491, -19.1114, 22.2357, 0.68", "35.3037, -19.734, 22.4262, 0.45", "37.047, -20.3596, 22.6299, 0.45", "39.1475, -20.991, 22.8523, 0.45", "40.4938, -21.3403, 22.9823, 0.45", "42.2166, -21.7254, 23.1514, 0.45", "44.2776, -22.1629, 23.3514, 0.45", "46.0499, -22.5132, 23.5026, 0.45", "47.1024, -22.7084, 23.5975, 0.45", "48.1342, -22.8361, 23.7112, 0.45", "49.2016, -22.9881, 23.8675, 0.45" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-8.3595, -15.4483, 13.9125, 0.45", "-8.9061, -15.1262, 14.7285, 0.45", "-9.97289, -14.8048, 16.3795, 0.45", "-10.6912, -14.832, 17.5668, 0.45", "-11.3851, -15.1163, 18.7732, 0.45", "-11.6833, -15.2717, 19.2675, 0.45", "-12.1478, -15.5237, 20.0889, 0.45", "-12.8442, -16.0456, 21.5449, 0.45", "-13.3172, -16.5252, 22.6267, 0.45", "-13.8294, -17.2117, 23.9971, 0.45", "-13.9739, -17.4839, 24.6108, 0.45", "-14.1527, -17.9565, 25.7986, 0.45", "-14.3243, -18.4744, 27.2317, 0.45", "-14.5268, -19.125, 29.0246, 0.45", "-14.6184, -19.6706, 30.5202, 0.45", "-14.6467, -20.2406, 32.3252, 0.45", "-14.6153, -20.7264, 33.981, 0.45", "-14.5407, -21.1334, 35.4995, 0.45", "-14.4483, -21.4879, 37.0611, 0.45", "-14.4056, -21.7734, 38.7352, 0.45", "-14.494, -22.0796, 40.6439, 0.45", "-14.5759, -22.3125, 41.7708, 0.45", "-14.6929, -22.5463, 42.7549, 0.45", "-15.0348, -22.9651, 44.1001, 0.45", "-15.681, -23.5804, 45.4981, 0.45", "-16.2092, -24.114, 46.3695, 0.45", "-17.0132, -25.0199, 47.5396, 0.45", "-18.2577, -26.2581, 49.0259, 0.45", "-19.365, -27.2805, 50.1953, 0.45", "-20.1246, -28.0378, 51.0218, 0.45", "-21.0117, -28.9685, 52.0447, 0.45", "-21.7439, -29.7204, 52.8831, 0.45", "-23.0136, -30.9843, 54.2286, 0.45", "-23.7332, -31.8245, 55.0775, 0.45", "-24.7432, -33.3308, 56.5401, 0.45", "-25.6015, -34.712, 57.8806, 0.45", "-25.9504, -35.273, 58.4657, 0.45", "-26.5304, -36.3447, 59.7178, 0.45", "-26.9131, -37.4775, 61.1894, 0.45", "-27.0238, -38.5245, 62.8897, 0.45", "-26.917, -39.089, 64.0565, 0.45", "-26.4881, -39.5978, 65.2719, 0.45", "-25.7304, -39.9464, 66.4419, 0.45", "-24.0622, -40.251, 68.2063, 0.45", "-22.1852, -40.2979, 69.7541, 0.45", "-20.094, -40.1163, 71.1604, 0.23", "-17.1637, -39.8417, 72.9486, 0.23", "-13.6362, -39.5081, 74.8848, 0.23", "-11.1085, -39.1894, 76.1168, 0.23", "-9.43095, -38.844, 76.8021, 0.23", "-7.37973, -38.2896, 77.4865, 0.23" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-8.3595, -15.4483, 13.9125, 0.68", "-9.1443, -15.9412, 14.168, 0.68", "-10.6851, -16.8914, 14.6325, 0.45", "-12.0364, -17.7763, 15.0227, 0.45", "-13.1964, -18.5724, 15.3656, 0.68", "-14.236, -19.3411, 15.6917, 0.68", "-14.7962, -19.7732, 15.872, 0.68", "-15.852, -20.627, 16.2034, 0.45", "-17.3278, -21.8784, 16.6376, 0.45", "-18.1707, -22.6401, 16.8622, 0.45", "-19.1655, -23.5747, 17.0938, 0.45", "-20.1523, -24.5055, 17.2915, 0.45", "-20.9853, -25.3197, 17.4533, 0.45", "-21.957, -26.2942, 17.6492, 0.68", "-22.8054, -27.1403, 17.7959, 0.68", "-24.2861, -28.6024, 18.0461, 0.68", "-25.6669, -29.9633, 18.3114, 0.45", "-26.9515, -31.2871, 18.603, 0.45", "-27.8819, -32.2759, 18.844, 0.45", "-28.6793, -33.1396, 19.0629, 0.45", "-29.8825, -34.4292, 19.3966, 0.45", "-30.8121, -35.421, 19.6382, 0.45", "-31.9826, -36.6304, 19.9209, 0.45", "-32.4908, -37.1417, 20.0378, 0.45", "-33.4039, -38.0837, 20.2412, 0.45", "-34.1335, -38.8317, 20.3893, 0.45", "-34.966, -39.654, 20.5071, 0.45", "-35.7434, -40.3809, 20.5838, 0.45", "-36.8408, -41.3216, 20.6463, 0.45", "-37.8543, -42.1621, 20.6709, 0.45", "-38.9418, -43.0444, 20.6633, 0.45", "-39.7057, -43.6324, 20.6308, 0.45", "-40.8761, -44.5403, 20.568, 0.45", "-42.2731, -45.6522, 20.4966, 0.45", "-43.4322, -46.5734, 20.4788, 0.45", "-44.3449, -47.3124, 20.5151, 0.45", "-45.5347, -48.3375, 20.6389, 0.45", "-47.0411, -49.6803, 20.8982, 0.45", "-48.2579, -50.8233, 21.2023, 0.45", "-49.3818, -51.9524, 21.5712, 0.45", "-50.7961, -53.4215, 22.134, 0.45", "-51.9414, -54.5873, 22.6481, 0.45", "-52.6704, -55.3245, 23.0058, 0.45", "-54.0121, -56.629, 23.6706, 0.45", "-55.0943, -57.6273, 24.1797, 0.45", "-56.0042, -58.4581, 24.5883, 0.45", "-57.7862, -60.1113, 25.3532, 0.45", "-58.671, -60.9569, 25.6997, 0.45", "-59.1848, -61.452, 25.8829, 0.45", "-60.0728, -62.3672, 26.1735, 0.45", "-60.8662, -63.3096, 26.4027, 0.45", "-61.6246, -64.3547, 26.5549, 0.45", "-62.3375, -65.4596, 26.6321, 0.45", "-63.0642, -66.6151, 26.661, 0.45", "-64.0182, -68.2631, 26.6406, 0.45", "-64.9381, -70.0069, 26.5594, 0.45", "-66.8183, -73.6451, 26.2737, 0.45", "-67.5612, -75.103, 26.1426, 0.45", "-68.3645, -76.7118, 26.0087, 0.45", "-69.4186, -78.8782, 25.8633, 0.45", "-70.5516, -81.1336, 25.765, 0.45", "-71.4992, -82.9856, 25.7614, 0.45", "-72.2167, -84.3698, 25.8418, 0.45", "-73.109, -85.9157, 26.0327, 0.45", "-74.3979, -88.0118, 26.3784, 0.45", "-74.8315, -88.638, 26.5165, 0.45", "-75.9107, -90.076, 26.9082, 0.45", "-76.8845, -91.3312, 27.2823, 0.45", "-78.2764, -93.0526, 27.7611, 0.45" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-8.40923, 0.63519, 7.66612, 0.45", "-7.81208, 0.214696, 9.02403, 0.45", "-7.25169, -0.060882, 10.5891, 0.45", "-7.01403, -0.00971097, 11.2961, 0.45", "-6.38991, 0.37853, 12.6856, 0.45", "-5.78942, 0.858135, 13.896, 0.45", "-5.25848, 1.34743, 15.0294, 0.45", "-4.63094, 2.03808, 16.4223, 0.45", "-4.04998, 2.83191, 17.9807, 0.45", "-3.34319, 3.96045, 20.1097, 0.45", "-3.03894, 4.44261, 20.9783, 0.45", "-2.74322, 4.83566, 21.7058, 0.45", "-2.26902, 5.37381, 22.7574, 0.45", "-2.00911, 5.63952, 23.4726, 0.45", "-1.78202, 5.9705, 24.7687, 0.45", "-1.72112, 6.38771, 26.3026, 0.45", "-1.64391, 6.83466, 27.7708, 0.45", "-1.60526, 7.14789, 28.7307, 0.45", "-1.508, 7.94516, 30.8022, 0.45", "-1.33823, 9.04287, 33.3078, 0.45", "-1.20562, 9.89633, 35.0516, 0.45", "-0.932419, 10.96, 36.9138, 0.45", "-0.568885, 12.1837, 39.0036, 0.45", "-0.0867821, 13.4773, 41.1282, 0.23", "0.51672, 14.8329, 43.0748, 0.23", "1.12415, 15.9747, 44.5403, 0.23", "2.37248, 18.1494, 47.2442, 0.23" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-8.40923, 0.63519, 7.66612, 0.68", "-9.38132, 0.274085, 7.91782, 0.68", "-11.0394, -0.298439, 8.42942, 0.45", "-12.2676, -0.674191, 8.82501, 0.45", "-13.905, -1.10418, 9.41875, 0.45", "-15.1024, -1.41071, 9.91864, 0.45", "-16.6612, -1.87554, 10.6648, 0.45", "-17.41, -2.11438, 11.0973, 0.45", "-18.6368, -2.54425, 11.9493, 0.45", "-19.6444, -2.95861, 12.7265, 0.45", "-20.4771, -3.39974, 13.4409, 0.45", "-21.6696, -4.13478, 14.5952, 0.45", "-22.1045, -4.43865, 15.0864, 0.68", "-22.9166, -5.0999, 16.1383, 0.68", "-23.7912, -5.86508, 17.4279, 0.68", "-24.8386, -6.71271, 18.9618, 0.45", "-25.7606, -7.29996, 20.3282, 0.45", "-26.7685, -7.79546, 21.8693, 0.45", "-27.4567, -8.12843, 23.0791, 0.45", "-27.8486, -8.31959, 23.8811, 0.45", "-28.3545, -8.5505, 25.0922, 0.45", "-28.9022, -8.72904, 26.4669, 0.45", "-29.2411, -8.79702, 27.323, 0.45", "-29.7519, -8.92903, 28.7842, 0.45", "-30.1921, -9.06757, 29.9762, 0.45", "-30.4339, -9.17221, 30.5482, 0.45", "-30.9896, -9.46005, 31.7496, 0.45", "-31.7201, -9.8026, 32.9858, 0.45", "-32.6663, -10.1302, 34.2696, 0.45", "-33.933, -10.4172, 35.674, 0.45", "-35.2034, -10.6095, 36.8671, 0.45", "-36.0505, -10.7204, 37.5635, 0.45", "-37.1666, -10.869, 38.3367, 0.45", "-38.093, -10.9962, 38.9203, 0.45", "-39.5764, -11.1842, 39.833, 0.45", "-41.2451, -11.3772, 40.8559, 0.23", "-42.163, -11.4912, 41.3987, 0.23", "-44.2208, -11.7173, 42.5451, 0.23", "-45.6539, -11.8403, 43.369, 0.23", "-47.0099, -11.976, 44.1399, 0.23", "-48.2469, -12.126, 44.8174, 0.23", "-49.9238, -12.3115, 45.7446, 0.23", "-51.7009, -12.4023, 46.7082, 0.23", "-53.5008, -12.2939, 47.6989, 0.23" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-23.1763, 1.54615, -9.90269, 0.68", "-23.7543, 1.61786, -10.5927, 0.68", "-24.3035, 1.75943, -11.2494, 0.68", "-24.99, 1.94146, -12.0288, 0.68", "-26.1902, 2.19963, -13.1701, 0.68", "-27.5572, 2.49119, -14.3555, 0.68", "-29.1296, 2.90496, -15.5853, 0.68", "-30.3594, 3.27933, -16.466, 0.68", "-31.7393, 3.75714, -17.3744, 0.68", "-33.5794, 4.42087, -18.527, 0.68", "-34.8751, 4.88541, -19.2835, 0.68", "-37.3476, 5.68686, -20.6266, 0.45", "-39.2021, 6.26342, -21.6924, 0.45", "-40.5797, 6.67459, -22.5719, 0.45", "-42.1478, 7.13193, -23.7057, 0.45", "-43.4308, 7.47158, -24.7681, 0.45", "-44.367, 7.6445, -25.6088, 0.45", "-46.1852, 7.82474, -27.3765, 0.45", "-47.6999, 7.92156, -28.8687, 0.45", "-49.1941, 7.99919, -30.2422, 0.45", "-50.1329, 8.04589, -31.1117, 0.45", "-51.4152, 8.09196, -32.3207, 0.45", "-52.1407, 8.09923, -32.9556, 0.45", "-53.1099, 8.08948, -33.6264, 0.45", "-55.6211, 8.08642, -35.0766, 0.45" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-23.1763, 1.54615, -9.90269, 0.68", "-24.563, 0.980777, -9.74959, 0.68", "-26.0732, 0.328951, -9.63641, 0.68", "-27.1548, -0.158512, -9.57489, 0.45", "-28.3246, -0.689448, -9.522, 0.45", "-29.3821, -1.16838, -9.47789, 0.45", "-30.4707, -1.65253, -9.43795, 0.45", "-31.7828, -2.24385, -9.40493, 0.45", "-32.6922, -2.66929, -9.38428, 0.45", "-33.6265, -3.11517, -9.36579, 0.45", "-35.1, -3.84611, -9.31916, 0.45", "-36.1586, -4.38977, -9.28363, 0.45", "-37.2062, -4.9436, -9.26081, 0.45", "-38.5328, -5.65471, -9.25009, 0.45", "-39.7089, -6.298, -9.26799, 0.45", "-40.3766, -6.67449, -9.29039, 0.45", "-41.2678, -7.18685, -9.33812, 0.45", "-41.818, -7.49553, -9.37495, 0.45", "-42.9256, -8.09831, -9.47282, 0.45", "-43.9605, -8.67647, -9.57266, 0.45", "-45.1669, -9.32621, -9.6909, 0.45", "-46.0827, -9.75312, -9.7739, 0.45", "-47.202, -10.1952, -9.85995, 0.45", "-48.3322, -10.6073, -9.94767, 0.45", "-49.0678, -10.8613, -10.0091, 0.45", "-50.1658, -11.22, -10.1076, 0.45", "-51.705, -11.6883, -10.2415, 0.45", "-52.8444, -12.0307, -10.3282, 0.45", "-53.756, -12.3274, -10.38, 0.45", "-54.9386, -12.7526, -10.4247, 0.45", "-55.5406, -12.9898, -10.4364, 0.45", "-56.6888, -13.5258, -10.4648, 0.45", "-58.1565, -14.314, -10.5524, 0.45", "-59.356, -14.9932, -10.6701, 0.45", "-60.7725, -15.797, -10.8525, 0.45", "-62.6763, -16.8883, -11.1607, 0.23", "-64.2102, -17.7419, -11.4204, 0.23", "-65.9879, -18.6813, -11.7411, 0.23", "-67.4368, -19.4101, -12.0012, 0.23", "-69.0203, -20.144, -12.2958, 0.23", "-70.8139, -20.9047, -12.6326, 0.23", "-73.2037, -21.8461, -13.0681, 0.23", "-74.8555, -22.4163, -13.3433, 0.23", "-76.5363, -22.9273, -13.5988, 0.23", "-77.8712, -23.3092, -13.8031, 0.23", "-79.5114, -23.755, -14.0847, 0.23", "-80.6226, -24.0364, -14.3151, 0.23", "-81.6173, -24.2741, -14.5854, 0.23", "-82.3772, -24.4352, -14.8275, 0.23", "-83.3933, -24.6395, -15.206, 0.23", "-84.1352, -24.8049, -15.4957, 0.23", "-85.0355, -25.0122, -15.8633, 0.23", "-85.9306, -25.2169, -16.2186, 0.23", "-86.4586, -25.3576, -16.4165, 0.23", "-87.4869, -25.6666, -16.7717, 0.23", "-88.4529, -25.9726, -17.0556, 0.23", "-90.0424, -26.5535, -17.4597, 0.23", "-90.9452, -26.9161, -17.6655, 0.23", "-92.1641, -27.4454, -17.9099, 0.23", "-93.0675, -27.8568, -18.0796, 0.23", "-94.0101, -28.2831, -18.25, 0.23", "-95.065, -28.7323, -18.4373, 0.23", "-96.7212, -29.421, -18.7246, 0.23", "-97.7687, -29.8323, -18.9085, 0.23", "-98.7537, -30.1814, -19.0636, 0.23", "-99.6701, -30.4899, -19.1983, 0.23", "-101.999, -31.236, -19.5441, 0.23", "-102.901, -31.5115, -19.667, 0.23", "-104.432, -31.991, -19.8784, 0.23", "-105.225, -32.2388, -19.9957, 0.23", "-105.721, -32.3992, -20.0663, 0.23", "-106.887, -32.8212, -20.2186, 0.23", "-107.81, -33.1992, -20.3338, 0.23", "-108.714, -33.5829, -20.443, 0.23", "-109.294, -33.8414, -20.5174, 0.23", "-110.44, -34.3784, -20.6727, 0.23", "-111.336, -34.8144, -20.769, 0.23", "-112.09, -35.1789, -20.8245, 0.23", "-112.678, -35.4519, -20.8611, 0.23", "-114.271, -36.1882, -20.9299, 0.23", "-115.074, -36.5646, -20.9527, 0.23", "-116.552, -37.2557, -20.9695, 0.23", "-118.05, -37.9524, -20.9559, 0.23", "-119.136, -38.4302, -20.9221, 0.23", "-119.944, -38.7764, -20.8859, 0.23", "-121.447, -39.3798, -20.755, 0.23", "-123.091, -39.9803, -20.5573, 0.23", "-124.388, -40.4055, -20.3483, 0.23", "-125.902, -40.8645, -20.0446, 0.23", "-127.815, -41.403, -19.5775, 0.23", "-129.626, -41.882, -19.0657, 0.23", "-130.596, -42.1488, -18.7648, 0.23", "-132.051, -42.5928, -18.2765, 0.23", "-133.025, -42.9273, -17.9427, 0.23", "-134.468, -43.481, -17.4504, 0.23", "-136.027, -44.1263, -16.9366, 0.23", "-138.74, -45.3495, -16.2041, 0.23", "-140.424, -46.1586, -15.8337, 0.23", "-142.201, -47.0737, -15.5427, 0.23", "-143.437, -47.7359, -15.4081, 0.23", "-144.998, -48.5818, -15.3295, 0.23", "-146.725, -49.5338, -15.3407, 0.23", "-147.545, -49.9837, -15.3999, 0.23", "-149.001, -50.8355, -15.5889, 0.23", "-149.864, -51.3933, -15.7488, 0.23", "-150.515, -51.8695, -15.8927, 0.23", "-151.397, -52.6075, -16.0868, 0.23", "-151.974, -53.1475, -16.1891, 0.23", "-153.182, -54.3194, -16.3869, 0.23", "-154.277, -55.4416, -16.5601, 0.23", "-154.961, -56.2072, -16.6615, 0.23", "-156.506, -58.1081, -16.8999, 0.23", "-157.393, -59.2833, -17.0411, 0.23", "-158.136, -60.3131, -17.1695, 0.23", "-158.955, -61.4948, -17.3301, 0.23", "-159.832, -62.8557, -17.5225, 0.23", "-160.554, -63.9933, -17.7122, 0.23", "-161.175, -64.9747, -17.8992, 0.23", "-162.019, -66.2281, -18.1705, 0.23", "-162.775, -67.2647, -18.4378, 0.23", "-163.218, -67.7942, -18.601, 0.23", "-164.349, -68.9451, -19.0076, 0.23", "-165.712, -70.1929, -19.4649, 0.23", "-166.532, -70.8953, -19.707, 0.23", "-167.983, -72.0574, -20.0366, 0.23", "-169.136, -72.97, -20.2375, 0.23", "-169.939, -73.6521, -20.3456, 0.23", "-170.816, -74.489, -20.4314, 0.23", "-171.807, -75.5731, -20.5029, 0.23", "-173.678, -77.8598, -20.5686, 0.23", "-174.603, -79.0891, -20.5745, 0.23", "-175.394, -80.2609, -20.5665, 0.23", "-176.131, -81.5503, -20.5424, 0.23", "-176.789, -82.9295, -20.5178, 0.23", "-177.282, -84.2468, -20.4995, 0.23", "-177.584, -85.3917, -20.4765, 0.23", "-177.897, -86.7148, -20.4398, 0.23", "-178.346, -88.8089, -20.3569, 0.23", "-178.528, -89.8653, -20.2931, 0.23", "-178.667, -91.0214, -20.1891, 0.23", "-178.686, -91.6316, -20.1318, 0.23" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "35.6263, -10.2095, 0.0, 0.23", "50.0974, -14.1578, 0.0, 0.23", "64.5684, -18.1061, 0.0, 0.23" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "12.571, 4.15375, -4.22798, 0.68", "13.75, 7.32082, -3.83092, 0.68", "14.3553, 8.94685, -3.62707, 0.68", "15.0034, 10.6877, -3.4088, 0.68" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "12.571, 4.15375, -4.22798, 0.68", "13.6048, 3.64141, -4.62703, 0.68", "14.9446, 3.03047, -5.14438, 0.68", "16.5951, 2.35903, -5.74347, 0.68", "18.1297, 1.72655, -6.29148, 0.68", "19.6885, 1.05148, -6.8279, 0.68", "21.3193, 0.296842, -7.38741, 0.68", "23.2308, -0.59138, -8.0522, 0.68", "24.9347, -1.39686, -8.65697, 0.68", "26.8572, -2.30331, -9.34179, 0.68", "28.6869, -3.15948, -9.93906, 0.68", "29.929, -3.75337, -10.273, 0.68" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-55.6211, 8.08642, -35.0766, 0.45", "-56.4593, 8.42133, -35.4406, 0.45", "-57.1696, 8.70553, -35.7495, 0.45", "-57.9841, 9.04336, -36.1186, 0.45", "-59.2671, 9.60868, -36.7344, 0.45", "-60.4855, 10.1556, -37.3167, 0.45", "-61.3682, 10.5473, -37.7273, 0.45", "-62.3346, 10.9738, -38.1817, 0.45", "-63.0216, 11.303, -38.4972, 0.45", "-64.0627, 11.8284, -38.9745, 0.45", "-65.0268, 12.3088, -39.4001, 0.45", "-65.6702, 12.6071, -39.6538, 0.45", "-66.7387, 13.0484, -40.0153, 0.45", "-67.9363, 13.5332, -40.4074, 0.45", "-68.9976, 13.9528, -40.709, 0.45", "-69.893, 14.2948, -40.9614, 0.45", "-70.7473, 14.6166, -41.2015, 0.45", "-72.4497, 15.2653, -41.6542, 0.45", "-73.9971, 15.8505, -42.0792, 0.45", "-75.0872, 16.2572, -42.4178, 0.45", "-76.1458, 16.6483, -42.7921, 0.45", "-78.2165, 17.3908, -43.4955, 0.45", "-80.0269, 18.0022, -44.0977, 0.23", "-81.7821, 18.5581, -44.6654, 0.23", "-83.2387, 18.9609, -45.1023, 0.23", "-84.2106, 19.2055, -45.4037, 0.23", "-86.2205, 19.7059, -45.9984, 0.23", "-87.7294, 20.0373, -46.4453, 0.23", "-89.0732, 20.2876, -46.8076, 0.23", "-90.3837, 20.539, -47.1168, 0.23", "-92.1678, 20.9163, -47.5123, 0.23", "-93.4291, 21.1988, -47.8316, 0.23", "-94.6152, 21.4438, -48.2175, 0.23", "-96.2102, 21.7099, -48.7703, 0.23", "-96.9005, 21.8052, -49.0146, 0.23", "-97.9839, 21.9064, -49.4129, 0.23", "-99.4762, 21.9819, -49.9857, 0.23", "-101.306, 22.0111, -50.8073, 0.23", "-103.05, 22.0261, -51.7654, 0.23", "-104.657, 22.0018, -52.7984, 0.23", "-106.212, 21.9464, -53.8234, 0.23", "-107.328, 21.8934, -54.5969, 0.23", "-109.833, 21.7684, -56.4202, 0.23", "-111.96, 21.6832, -58.1096, 0.23", "-113.528, 21.6293, -59.5075, 0.23", "-121.004, 23.4743, -62.5077, 0.23" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-55.6211, 8.08642, -35.0766, 0.23", "-57.3432, 7.05091, -35.4935, 0.23", "-59.2089, 5.9657, -35.9478, 0.23", "-61.5546, 4.66025, -36.5769, 0.23", "-63.5662, 3.54379, -37.1483, 0.23", "-64.9449, 2.77715, -37.5686, 0.23", "-66.7085, 1.79178, -38.1487, 0.23", "-68.6627, 0.729942, -38.8526, 0.23", "-70.1471, -0.0765803, -39.4942, 0.23", "-71.505, -0.761836, -40.1613, 0.23", "-72.822, -1.3638, -40.8472, 0.23", "-74.1668, -1.97103, -41.5851, 0.23", "-75.6905, -2.66473, -42.4274, 0.23", "-77.2589, -3.38636, -43.2731, 0.23", "-78.7149, -4.05285, -44.0227, 0.23", "-80.9084, -4.96641, -45.004, 0.23", "-82.9873, -5.7463, -45.8401, 0.23", "-85.9138, -6.63821, -46.8698, 0.23", "-87.5251, -7.01252, -47.3591, 0.23", "-89.0282, -7.33459, -47.7608, 0.23", "-91.4302, -7.78637, -48.3706, 0.23", "-92.8714, -7.92638, -48.6755, 0.23", "-95.197, -7.77407, -49.0115, 0.23", "-96.9115, -7.27198, -49.1751, 0.23", "-109.322, -9.36505, -51.4044, 0.23", "-121.299, -10.7705, -55.6751, 0.23", "-132.918, -10.6328, -61.0473, 0.23", "-145.423, -12.2653, -63.1682, 0.23", "-158.11, -12.2204, -64.8787, 0.23" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-178.686, -91.6316, -20.1318, 0.23", "-179.729, -94.9245, -18.8815, 0.23", "-180.41, -97.0779, -18.0639, 0.23", "-181.429, -100.295, -16.8422, 0.23", "-182.713, -104.353, -15.3015, 0.23", "-184.247, -117.422, -11.3304, 0.23" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-178.686, -91.6316, -20.1318, 0.23", "-178.503, -93.5925, -19.0998, 0.23", "-178.316, -95.4801, -18.1434, 0.23", "-178.231, -96.5063, -17.6364, 0.23", "-178.095, -97.9247, -16.9365, 0.23", "-177.966, -99.1196, -16.37, 0.23", "-177.785, -101.239, -15.4461, 0.23", "-177.715, -102.439, -14.9896, 0.23", "-177.657, -103.954, -14.5098, 0.23", "-177.695, -106.204, -13.9683, 0.23", "-177.733, -107.373, -13.7326, 0.23", "-177.871, -109.535, -13.3872, 0.23", "-177.957, -110.474, -13.2868, 0.23", "-178.134, -111.718, -13.225, 0.23", "-178.533, -113.708, -13.3113, 0.23", "-177.641, -120.726, -9.90299, 0.23" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "15.0034, 10.6877, -3.4088, 0.45", "15.9638, 12.2805, -3.49417, 0.45", "16.9081, 13.8467, -3.5781, 0.45", "18.018, 15.6876, -3.67676, 0.45", "18.7802, 16.9518, -3.74452, 0.45", "19.8321, 18.6963, -3.83801, 0.45" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "15.0034, 10.6877, -3.4088, 0.45", "14.3112, 11.4171, -2.67867, 0.45", "13.3053, 12.3648, -1.6025, 0.45", "12.4459, 13.1392, -0.680628, 0.45", "11.3932, 14.1455, 0.510266, 0.45", "10.7309, 14.8153, 1.3272, 0.45", "10.1084, 15.4817, 2.17633, 0.45", "9.72357, 15.8848, 2.76095, 0.45", "9.23996, 16.4066, 3.56056, 0.45", "8.63643, 17.1272, 4.66176, 0.45", "8.12481, 17.7883, 5.70013, 0.45", "7.57837, 18.6264, 7.00318, 0.45", "7.32633, 19.0893, 7.63823, 0.45", "7.00524, 19.8291, 8.50216, 0.45", "6.75639, 20.6251, 9.30123, 0.45", "6.5929, 21.4614, 9.97181, 0.45", "6.48697, 22.5737, 10.641, 0.45", "6.434, 24.5073, 11.5522, 0.45", "6.46163, 26.7556, 12.414, 0.45", "6.51448, 28.6234, 12.9843, 0.45", "6.59552, 30.5444, 13.4287, 0.45", "6.7316, 32.484, 13.7869, 0.45", "6.93901, 34.3251, 14.0707, 0.45", "7.22662, 36.197, 14.3253, 0.45", "7.64423, 38.3895, 14.5891, 0.45", "8.23285, 41.0449, 14.8927, 0.45", "8.80987, 43.4333, 15.1872, 0.45", "9.63857, 46.4266, 15.5472, 0.45", "10.4272, 49.0224, 15.8422, 0.45", "11.2511, 51.6185, 16.1322, 0.45", "11.7876, 53.2524, 16.3056, 0.45", "12.5293, 55.5765, 16.5197, 0.45", "13.1389, 57.7118, 16.6879, 0.45", "13.6472, 59.801, 16.8297, 0.45", "13.9254, 61.1864, 16.9099, 0.45", "14.219, 62.9191, 17.0076, 0.45", "14.5189, 64.8801, 17.1025, 0.45", "14.942, 67.8344, 17.2181, 0.45", "15.2758, 70.3134, 17.2922, 0.45", "15.5273, 72.0648, 17.3272, 0.45", "15.8704, 74.3261, 17.3915, 0.45", "16.2806, 76.813, 17.4831, 0.23", "16.6201, 78.7712, 17.555, 0.23", "16.9497, 80.4424, 17.5929, 0.23", "17.1642, 81.511, 17.6038, 0.23", "17.701, 84.1239, 17.6125, 0.23", "18.1148, 86.4218, 17.6122, 0.23", "18.4606, 88.7553, 17.6517, 0.23", "18.6691, 90.898, 17.7322, 0.23", "18.7125, 92.4384, 17.8217, 0.23", "18.707, 93.8287, 17.9223, 0.23", "18.6743, 94.8694, 18.0271, 0.23", "18.5535, 96.5438, 18.2722, 0.23", "18.4447, 97.5363, 18.4667, 0.23", "17.9953, 100.169, 19.0821, 0.23", "17.5794, 102.042, 19.5435, 0.23", "17.0406, 103.775, 20.0068, 0.23", "16.1919, 105.893, 20.6211, 0.23", "15.3109, 107.664, 21.1814, 0.23", "13.6728, 110.409, 22.1327, 0.23", "12.8119, 111.613, 22.594, 0.23", "11.0874, 113.726, 23.4529, 0.23", "9.73026, 115.35, 24.1326, 0.23", "8.68346, 116.628, 24.6592, 0.45", "6.90378, 118.901, 25.5171, 0.23", "6.10306, 119.973, 25.8796, 0.23", "4.88609, 121.713, 26.3923, 0.23", "3.05091, 124.535, 27.049, 0.23", "2.12367, 125.974, 27.3415, 0.23", "1.16793, 127.319, 27.5982, 0.23", "-0.237119, 129.061, 27.9364, 0.23", "-1.27176, 130.226, 28.1455, 0.23", "-2.30347, 131.251, 28.3263, 0.23", "-4.71387, 133.269, 28.6856, 0.23", "-6.87767, 134.917, 29.0001, 0.23", "-8.20983, 135.88, 29.1838, 0.23", "-9.36337, 136.707, 29.2979, 0.23", "-10.8932, 137.89, 29.3737, 0.23", "-11.4652, 138.399, 29.3423, 0.23", "-11.8591, 138.849, 29.2687, 0.23", "-12.4584, 139.812, 29.132, 0.23", "-13.2375, 141.396, 29.0163, 0.23", "-13.9785, 143.295, 28.9981, 0.23", "-14.5543, 145.2, 29.0664, 0.23", "-15.2194, 147.783, 29.2526, 0.23", "-15.8207, 150.24, 29.5265, 0.23", "-16.45, 152.907, 29.8788, 0.23", "-16.9502, 155.262, 30.2596, 0.23", "-17.4293, 158.114, 30.7799, 0.23", "-17.6167, 159.715, 31.1111, 0.23", "-17.7373, 162.145, 31.5969, 0.23", "-20.6934, 170.256, 35.1525, 0.23" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "29.929, -3.75337, -10.273, 0.45", "30.0641, -3.9948, -11.4871, 0.45", "30.2839, -4.31509, -12.7626, 0.45", "30.606, -4.58573, -13.8834, 0.45", "30.9249, -4.78451, -14.7483, 0.45", "31.0911, -4.86274, -15.133, 0.45", "31.3887, -4.99748, -15.8478, 0.45", "31.8547, -5.1459, -16.8611, 0.45", "32.5017, -5.25464, -18.2694, 0.45", "32.957, -5.23091, -19.3613, 0.45", "33.4559, -5.1066, -20.6195, 0.45", "33.901, -4.95346, -21.7781, 0.45", "34.4858, -4.7401, -23.2764, 0.45", "35.1366, -4.51542, -24.9311, 0.45", "36.2364, -4.20965, -27.6191, 0.23", "36.8658, -4.08995, -29.002, 0.23", "37.8571, -3.98145, -30.8866, 0.23", "38.9797, -3.92533, -32.667, 0.23", "39.3141, -3.93489, -33.1296, 0.23", "40.3883, -4.01266, -34.5104, 0.23", "41.7894, -4.17727, -36.2743, 0.23", "43.3865, -4.3686, -38.2605, 0.23", "44.2305, -4.45097, -39.3036, 0.23", "45.7925, -4.55545, -41.2443, 0.23", "47.1483, -4.61696, -42.9645, 0.23", "48.4785, -4.67505, -44.7114, 0.23", "51.0591, -5.78253, -51.9084, 0.23" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "29.929, -3.75337, -10.273, 0.45", "31.0393, -4.43846, -10.6091, 0.45", "31.5355, -4.76804, -10.7598, 0.45", "32.4764, -5.39186, -11.042, 0.68", "33.4426, -6.02728, -11.333, 0.45", "34.4082, -6.6693, -11.6585, 0.45", "35.2405, -7.20401, -11.9565, 0.45", "36.1178, -7.76271, -12.301, 0.45", "36.982, -8.30167, -12.6362, 0.45", "37.5583, -8.66198, -12.8557, 0.45", "38.4212, -9.21533, -13.2109, 0.45", "39.8062, -10.0618, -13.8158, 0.45" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "19.8321, 18.6963, -3.83801, 0.45", "20.0792, 20.2285, -4.10629, 0.45", "20.5766, 23.1451, -4.4737, 0.45", "21.0393, 25.3792, -4.62082, 0.45", "21.593, 27.9202, -4.70253, 0.45", "22.2082, 30.4265, -4.73531, 0.45", "22.6982, 32.3438, -4.73041, 0.45", "23.4175, 34.9154, -4.61115, 0.45", "24.18, 37.6671, -4.3949, 0.45", "24.7903, 40.1557, -4.15758, 0.45", "25.2843, 42.7948, -3.8421, 0.45", "25.6286, 46.001, -3.34306, 0.45", "25.678, 47.6967, -3.01733, 0.45", "25.5039, 50.2737, -2.40158, 0.45", "25.091, 52.388, -1.76393, 0.45", "24.5337, 54.0993, -1.08296, 0.45", "23.7682, 55.8113, -0.240174, 0.45", "23.0489, 57.179, 0.565428, 0.45", "22.2146, 58.6399, 1.56678, 0.45", "21.3407, 60.0972, 2.73667, 0.45", "20.7422, 61.0958, 3.57488, 0.45", "20.0467, 62.1378, 4.46254, 0.45", "19.4632, 62.9977, 5.15717, 0.45", "18.7464, 64.0626, 5.97393, 0.45", "17.867, 65.3928, 6.96202, 0.45", "16.9246, 66.8135, 8.00146, 0.45", "16.1432, 67.9453, 8.77588, 0.45", "15.2643, 69.1952, 9.60577, 0.45", "14.3523, 70.567, 10.4939, 0.45", "13.5575, 71.8729, 11.3105, 0.45", "12.8346, 73.1878, 12.1555, 0.45", "12.2618, 74.2754, 12.9287, 0.45", "11.2507, 76.1768, 14.3463, 0.23", "10.496, 77.5312, 15.4004, 0.23", "9.44468, 79.4315, 16.8507, 0.23", "8.59773, 81.049, 18.0305, 0.23", "7.6518, 82.8878, 19.346, 0.23", "7.11025, 83.926, 20.0755, 0.23", "6.49589, 85.0367, 20.7855, 0.23", "5.77031, 86.354, 21.543, 0.23", "5.11228, 87.6389, 22.1867, 0.23", "4.58926, 88.8246, 22.6862, 0.23", "4.19779, 89.9269, 23.0797, 0.23", "3.7755, 91.4269, 23.6489, 0.23", "3.5671, 92.4735, 24.0903, 0.23", "3.35546, 94.3857, 24.92, 0.23", "3.34464, 96.0158, 25.642, 0.23", "3.48917, 97.5805, 26.3727, 0.23", "3.884, 99.9639, 27.5992, 0.23", "4.34216, 102.224, 28.818, 0.23", "4.76832, 103.983, 29.7963, 0.23", "5.25967, 105.672, 30.785, 0.23", "5.82529, 107.382, 31.8338, 0.23", "6.52513, 109.081, 32.9101, 0.23" ],
    "parent" : "dend_27",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "19.8321, 18.6963, -3.83801, 0.45", "20.6174, 18.448, -3.54518, 0.45", "21.8557, 18.0239, -3.09943, 0.45", "22.8586, 17.689, -2.73226, 0.45", "23.9177, 17.361, -2.3477, 0.45", "24.893, 17.1076, -2.01987, 0.45", "25.6212, 16.9349, -1.78985, 0.45", "26.7192, 16.6998, -1.48731, 0.45", "27.7191, 16.5126, -1.2414, 0.45", "28.7679, 16.3469, -1.02048, 0.45", "30.2049, 16.1279, -0.755637, 0.45", "31.048, 15.9956, -0.619071, 0.45", "31.7038, 15.8799, -0.529075, 0.45", "32.0859, 15.81, -0.479489, 0.45", "33.037, 15.6101, -0.358575, 0.45", "34.2647, 15.3228, -0.178393, 0.45", "35.6917, 14.9542, 0.0625057, 0.45", "37.4634, 14.4896, 0.375961, 0.45", "38.6077, 14.1673, 0.585172, 0.45", "39.8905, 13.7828, 0.832428, 0.45", "40.9846, 13.4354, 1.06212, 0.45", "41.4674, 13.2774, 1.17179, 0.45", "42.362, 12.9596, 1.37571, 0.45", "43.3021, 12.6169, 1.60903, 0.45", "44.306, 12.2526, 1.87516, 0.45", "45.0509, 11.9965, 2.07802, 0.45", "46.0495, 11.6769, 2.35282, 0.45", "47.4138, 11.2862, 2.74158, 0.23", "48.4487, 11.0298, 3.03452, 0.23", "49.7287, 10.7192, 3.38906, 0.23", "50.3638, 10.5644, 3.55882, 0.23", "51.4543, 10.2946, 3.79689, 0.23", "52.3753, 10.0609, 3.94772, 0.23", "53.5081, 9.77443, 4.05239, 0.23", "54.6944, 9.4853, 4.03481, 0.23", "55.5073, 9.2888, 3.9395, 0.23", "56.9089, 8.9735, 3.67594, 0.45", "57.927, 8.7678, 3.40971, 0.45", "58.8147, 8.59993, 3.14261, 0.45", "60.3269, 8.29974, 2.66016, 0.23", "61.2291, 8.13112, 2.37191, 0.23", "62.2102, 7.93623, 2.07947, 0.23", "63.1344, 7.74512, 1.86204, 0.23", "64.307, 7.48174, 1.64949, 0.23", "65.8092, 7.11782, 1.46864, 0.23", "66.4357, 6.94665, 1.42165, 0.23", "67.1871, 6.71958, 1.36882, 0.23", "68.5853, 6.26989, 1.25381, 0.23", "70.0825, 5.79101, 1.12081, 0.23", "71.7591, 5.2675, 0.9449, 0.23", "73.3839, 4.78765, 0.718162, 0.23", "75.1043, 4.27254, 0.377253, 0.23", "75.738, 4.07909, 0.238136, 0.23", "76.8322, 3.74601, -0.0363643, 0.23", "78.1473, 3.35744, -0.415345, 0.23", "80.0637, 2.82075, -1.04623, 0.23", "82.1221, 2.30997, -1.7926, 0.23", "87.2666, -0.00882338, -2.71836, 0.23", "92.756, -1.68776, -2.87738, 0.23" ],
    "parent" : "dend_27",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "39.8062, -10.0618, -13.8158, 0.45", "41.9814, -9.81392, -13.9143, 0.45", "43.976, -9.5421, -14.0711, 0.45", "47.4174, -9.0185, -14.3843, 0.23", "48.5934, -8.85287, -14.5036, 0.23", "50.1124, -8.64232, -14.6552, 0.23", "51.9094, -8.43475, -14.8473, 0.23", "53.4749, -8.27799, -15.0236, 0.23", "55.0719, -8.14573, -15.2013, 0.23", "57.0317, -8.0122, -15.4056, 0.23", "59.3357, -7.86549, -15.6035, 0.23", "62.8173, -7.64025, -15.8373, 0.23", "65.4723, -7.49148, -15.9535, 0.23", "68.1246, -7.39335, -16.0002, 0.23", "69.8828, -7.33565, -16.0045, 0.23", "72.8406, -7.22762, -15.9304, 0.23", "74.381, -7.19084, -15.8606, 0.23", "76.1641, -7.17205, -15.7438, 0.23", "79.0114, -7.26619, -15.5726, 0.23", "80.0644, -7.32517, -15.518, 0.23", "81.4058, -7.42554, -15.4696, 0.23", "84.205, -7.7603, -15.4402, 0.23", "85.4109, -7.93382, -15.4427, 0.23", "87.7315, -8.27766, -15.4826, 0.23", "90.132, -8.65907, -15.5643, 0.23", "91.4175, -8.89835, -15.6297, 0.23", "93.6536, -9.33169, -15.7399, 0.23", "94.7833, -9.55968, -15.777, 0.23", "96.5684, -9.92434, -15.8237, 0.23", "98.2862, -10.2644, -15.8649, 0.23", "99.7044, -10.4993, -15.9418, 0.23", "101.771, -10.7376, -16.0862, 0.23", "104.642, -10.9788, -16.3485, 0.23", "106.173, -11.0951, -16.5159, 0.23", "108.604, -11.2549, -16.8042, 0.23", "111.994, -11.4255, -17.2307, 0.23", "113.309, -11.4701, -17.4135, 0.23", "116.219, -11.5465, -17.8798, 0.23", "118.792, -11.5584, -18.3088, 0.23", "121.414, -11.5827, -18.7442, 0.23", "130.663, -9.87325, -20.2809, 0.23" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "39.8062, -10.0618, -13.8158, 0.45", "41.3283, -11.5478, -14.5611, 0.45", "42.9391, -12.9891, -15.3417, 0.45", "45.1522, -14.9138, -16.4284, 0.45", "48.3453, -17.5722, -18.1091, 0.45", "50.4366, -19.3552, -19.3378, 0.23", "52.1918, -20.8746, -20.43, 0.23", "53.5698, -22.0599, -21.3184, 0.45", "54.6942, -23.1092, -22.0721, 0.45", "55.9509, -24.3751, -22.909, 0.45", "58.2376, -26.9012, -24.3993, 0.45", "60.2607, -29.2228, -25.6508, 0.45", "62.172, -31.3922, -26.7694, 0.45", "63.3586, -32.7864, -27.4571, 0.45", "66.3699, -36.3907, -29.1578, 0.45", "69.1149, -39.7756, -30.6649, 0.45", "71.0692, -42.2598, -31.7377, 0.45", "72.3469, -44.0112, -32.4882, 0.45", "74.0706, -46.5444, -33.5959, 0.23", "76.0884, -49.8325, -35.0463, 0.23", "76.7085, -51.04, -35.5662, 0.23", "77.524, -52.9661, -36.3692, 0.23", "78.3327, -55.2735, -37.2808, 0.23", "78.7648, -56.83, -37.8688, 0.23", "79.1255, -58.3992, -38.4825, 0.23", "79.4006, -59.8764, -39.1099, 0.23", "79.7371, -61.7198, -39.9483, 0.23", "80.0329, -63.4622, -40.7971, 0.23", "80.1898, -64.581, -41.3276, 0.23", "80.3251, -65.8704, -41.8808, 0.23", "80.437, -67.6829, -42.5549, 0.23", "80.5072, -69.3923, -43.1625, 0.23", "80.5997, -71.28, -43.7962, 0.23", "80.6816, -72.4976, -44.1743, 0.23", "80.908, -75.4277, -45.0191, 0.23", "81.0294, -78.7751, -45.8827, 0.23", "87.0614, -87.7203, -50.085, 0.23", "93.0786, -96.7751, -54.0705, 0.23", "99.8777, -105.04, -58.5994, 0.23" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_34", "dend_31", "dend_30", "dend_17", "dend_14", "dend_11", "dend_8", "dend_1", "dend_0", "dend_36", "dend_35", "dend_33", "dend_32", "dend_19", "dend_18", "dend_16", "dend_15", "dend_13", "dend_12", "dend_10", "dend_9", "dend_5", "dend_2", "dend_25", "dend_20", "dend_7", "dend_6", "dend_4", "dend_3", "dend_27", "dend_26", "dend_24", "dend_21", "dend_29", "dend_28", "dend_23", "dend_22" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_34", "dend_31", "dend_30", "dend_17", "dend_14", "dend_11", "dend_8", "dend_1", "dend_0", "dend_36", "dend_35", "dend_33", "dend_32", "dend_19", "dend_18", "dend_16", "dend_15", "dend_13", "dend_12", "dend_10", "dend_9", "dend_5", "dend_2", "dend_25", "dend_20", "dend_7", "dend_6", "dend_4", "dend_3", "dend_27", "dend_26", "dend_24", "dend_21", "dend_29", "dend_28", "dend_23", "dend_22" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_36" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_35" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_33" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_32" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_35",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_37",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_38",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_39",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_40",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_34" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_31" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_36",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30", "dend_31", "dend_32", "dend_33", "dend_34", "dend_35", "dend_36" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_17", "dend_17", "dend_17", "dend_17", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_8", "dend_8", "dend_8", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_19", "dend_19", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "axon_1", "axon_1", "dend_25", "dend_25", "dend_25", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "3.7868198E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "3.7868198E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.936579E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.2499998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dSTUT_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dSTUT_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate dSTUT214_L6_NBC_242af4db7d_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_34, id: dend_34, parent: soma_0
create dend_34
public dend_34
// Section: dend_31, id: dend_31, parent: soma_0
create dend_31
public dend_31
// Section: dend_30, id: dend_30, parent: soma_0
create dend_30
public dend_30
// Section: dend_17, id: dend_17, parent: soma_0
create dend_17
public dend_17
// Section: dend_14, id: dend_14, parent: soma_0
create dend_14
public dend_14
// Section: dend_11, id: dend_11, parent: soma_0
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: soma_0
create dend_8
public dend_8
// Section: dend_1, id: dend_1, parent: soma_0
create dend_1
public dend_1
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_36, id: dend_36, parent: dend_34
create dend_36
public dend_36
// Section: dend_35, id: dend_35, parent: dend_34
create dend_35
public dend_35
// Section: dend_33, id: dend_33, parent: dend_31
create dend_33
public dend_33
// Section: dend_32, id: dend_32, parent: dend_31
create dend_32
public dend_32
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_16, id: dend_16, parent: dend_14
create dend_16
public dend_16
// Section: dend_15, id: dend_15, parent: dend_14
create dend_15
public dend_15
// Section: dend_13, id: dend_13, parent: dend_11
create dend_13
public dend_13
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9
// Section: dend_5, id: dend_5, parent: dend_1
create dend_5
public dend_5
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_25, id: dend_25, parent: dend_19
create dend_25
public dend_25
// Section: dend_20, id: dend_20, parent: dend_19
create dend_20
public dend_20
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_4, id: dend_4, parent: dend_2
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_27, id: dend_27, parent: dend_25
create dend_27
public dend_27
// Section: dend_26, id: dend_26, parent: dend_25
create dend_26
public dend_26
// Section: dend_24, id: dend_24, parent: dend_20
create dend_24
public dend_24
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_29, id: dend_29, parent: dend_27
create dend_29
public dend_29
// Section: dend_28, id: dend_28, parent: dend_27
create dend_28
public dend_28
// Section: dend_23, id: dend_23, parent: dend_21
create dend_23
public dend_23
// Section: dend_22, id: dend_22, parent: dend_21
create dend_22
public dend_22

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_34, dend_31, dend_30, dend_17, dend_14, dend_11, dend_8, dend_1, dend_0, dend_36, dend_35, dend_33, dend_32, dend_19, dend_18, dend_16, dend_15, dend_13, dend_12, dend_10, dend_9, dend_5, dend_2, dend_25, dend_20, dend_7, dend_6, dend_4, dend_3, dend_27, dend_26, dend_24, dend_21, dend_29, dend_28, dend_23, dend_22]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_34, dend_31, dend_30, dend_17, dend_14, dend_11, dend_8, dend_1, dend_0, dend_36, dend_35, dend_33, dend_32, dend_19, dend_18, dend_16, dend_15, dend_13, dend_12, dend_10, dend_9, dend_5, dend_2, dend_25, dend_20, dend_7, dend_6, dend_4, dend_3, dend_27, dend_26, dend_24, dend_21, dend_29, dend_28, dend_23, dend_22]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_36]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_35]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_33]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_32]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_35
// Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_37
// Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_38
// Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_39
// Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_40
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_34]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_31]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_36
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_32
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_17, dend_17, dend_17, dend_17, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, axon_1, axon_1, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_27, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dSTUT_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dSTUT_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_34(0), soma_0(0.44999995616860894)
    connect dend_31(0), soma_0(0.44999995616860894)
    connect dend_30(0), soma_0(0.44999995616860894)
    connect dend_17(0), soma_0(0.44999995616860894)
    connect dend_14(0), soma_0(0.44999995616860894)
    connect dend_11(0), soma_0(0.44999995616860894)
    connect dend_8(0), soma_0(0.44999995616860894)
    connect dend_1(0), soma_0(0.44999995616860894)
    connect dend_0(0), soma_0(0.44999995616860894)
    connect axon_0(0), soma_0(1.0)
    connect dend_36(0), dend_34(1.0)
    connect dend_35(0), dend_34(1.0)
    connect dend_33(0), dend_31(1.0)
    connect dend_32(0), dend_31(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_16(0), dend_14(1.0)
    connect dend_15(0), dend_14(1.0)
    connect dend_13(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)
    connect dend_5(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_25(0), dend_19(1.0)
    connect dend_20(0), dend_19(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_4(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_27(0), dend_25(1.0)
    connect dend_26(0), dend_25(1.0)
    connect dend_24(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_29(0), dend_27(1.0)
    connect dend_28(0), dend_27(1.0)
    connect dend_23(0), dend_21(1.0)
    connect dend_22(0), dend_21(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -7.79996, 1.63899, 0.0, 2.31456 ) }
    soma_0 { pt3dadd( -7.07575, 1.4414, 0.0, 3.87478 ) }
    soma_0 { pt3dadd( -6.35154, 1.2438, 0.0, 5.48504 ) }
    soma_0 { pt3dadd( -5.62733, 1.04621, 0.0, 6.75924 ) }
    soma_0 { pt3dadd( -4.90312, 0.848615, 0.0, 7.77214 ) }
    soma_0 { pt3dadd( -4.17891, 0.65102, 0.0, 8.39732 ) }
    soma_0 { pt3dadd( -3.4547, 0.453425, 0.0, 9.01032 ) }
    soma_0 { pt3dadd( -2.73049, 0.255831, 0.0, 9.61582 ) }
    soma_0 { pt3dadd( -2.00628, 0.0582363, 0.0, 9.97495 ) }
    soma_0 { pt3dadd( -1.28207, -0.139358, 0.0, 10.1182 ) }
    soma_0 { pt3dadd( -0.557856, -0.336953, 0.0, 10.2615 ) }
    soma_0 { pt3dadd( 0.166353, -0.534547, 0.0, 10.4039 ) }
    soma_0 { pt3dadd( 0.890563, -0.732142, 0.0, 10.3605 ) }
    soma_0 { pt3dadd( 1.61477, -0.929737, 0.0, 10.3021 ) }
    soma_0 { pt3dadd( 2.33898, -1.12733, 0.0, 10.2398 ) }
    soma_0 { pt3dadd( 3.06319, -1.32493, 0.0, 10.0638 ) }
    soma_0 { pt3dadd( 3.7874, -1.52252, 0.0, 9.71016 ) }
    soma_0 { pt3dadd( 4.51161, -1.72011, 0.0, 8.98989 ) }
    soma_0 { pt3dadd( 5.23582, -1.91771, 0.0, 7.92103 ) }
    soma_0 { pt3dadd( 5.96003, -2.1153, 0.0, 6.49304 ) }
    soma_0 { pt3dadd( 6.68424, -2.3129, 0.0, 3.64119 ) }
    // Section: dend_34, id: dend_34, parent: soma_0 (entry count 21/100)
    dend_34 { pt3dclear() }
    dend_34 { pt3dadd( 2.72858, -5.1883, 7.36, 1.36 ) }
    dend_34 { pt3dadd( 2.72858, -5.1883, 7.36, 1.36 ) }
    dend_34 { pt3dadd( 2.96854, -6.4856, 7.17994, 1.14 ) }
    dend_34 { pt3dadd( 3.29337, -8.24174, 6.9362, 0.91 ) }
    dend_34 { pt3dadd( 3.71441, -10.5181, 6.62027, 0.91 ) }
    dend_34 { pt3dadd( 3.9688, -11.8934, 6.42938, 0.91 ) }
    dend_34 { pt3dadd( 4.3603, -14.01, 6.13561, 0.91 ) }
    // Section: dend_31, id: dend_31, parent: soma_0 (entry count 28/100)
    dend_31 { pt3dclear() }
    dend_31 { pt3dadd( -1.14142, -3.00331, -3.98, 0.68 ) }
    dend_31 { pt3dadd( -1.14142, -3.00331, -3.98, 0.68 ) }
    dend_31 { pt3dadd( -1.75743, -3.50401, -5.03603, 0.68 ) }
    dend_31 { pt3dadd( -2.3383, -3.91108, -6.03776, 0.68 ) }
    dend_31 { pt3dadd( -2.76484, -4.20058, -6.76139, 0.68 ) }
    dend_31 { pt3dadd( -3.25876, -4.5226, -7.59687, 0.68 ) }
    dend_31 { pt3dadd( -3.82328, -4.85148, -8.50476, 0.68 ) }
    dend_31 { pt3dadd( -4.38913, -5.15782, -9.42058, 0.68 ) }
    dend_31 { pt3dadd( -4.90333, -5.39502, -10.263, 0.68 ) }
    dend_31 { pt3dadd( -5.46244, -5.62003, -11.1544, 0.68 ) }
    dend_31 { pt3dadd( -6.09617, -5.85905, -12.1195, 0.68 ) }
    dend_31 { pt3dadd( -6.83868, -6.11657, -13.1891, 0.68 ) }
    // Section: dend_30, id: dend_30, parent: soma_0 (entry count 40/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( 4.57856, -3.78231, 2.8, 0.68 ) }
    dend_30 { pt3dadd( 4.57856, -3.78231, 2.8, 0.68 ) }
    dend_30 { pt3dadd( 5.61442, -5.06761, 3.02135, 0.68 ) }
    dend_30 { pt3dadd( 6.18869, -5.81572, 3.16217, 0.68 ) }
    dend_30 { pt3dadd( 7.21898, -7.16551, 3.43798, 0.68 ) }
    dend_30 { pt3dadd( 8.10376, -8.27482, 3.66153, 0.68 ) }
    dend_30 { pt3dadd( 9.04545, -9.42549, 3.87334, 0.68 ) }
    dend_30 { pt3dadd( 9.74949, -10.2535, 4.01507, 0.68 ) }
    dend_30 { pt3dadd( 10.8206, -11.4615, 4.22555, 0.45 ) }
    dend_30 { pt3dadd( 11.8264, -12.6123, 4.43542, 0.68 ) }
    dend_30 { pt3dadd( 13.31, -14.318, 4.81381, 0.68 ) }
    dend_30 { pt3dadd( 14.3851, -15.5311, 5.13588, 0.68 ) }
    dend_30 { pt3dadd( 15.1386, -16.3924, 5.40817, 0.68 ) }
    dend_30 { pt3dadd( 15.8106, -17.1509, 5.68587, 0.68 ) }
    dend_30 { pt3dadd( 16.491, -17.9322, 5.99453, 0.68 ) }
    dend_30 { pt3dadd( 17.3528, -18.9482, 6.42462, 0.68 ) }
    dend_30 { pt3dadd( 18.1023, -19.8239, 6.8576, 0.68 ) }
    dend_30 { pt3dadd( 18.9724, -20.8107, 7.42035, 0.45 ) }
    dend_30 { pt3dadd( 19.5907, -21.4991, 7.83831, 0.45 ) }
    dend_30 { pt3dadd( 20.6773, -22.6718, 8.54092, 0.45 ) }
    dend_30 { pt3dadd( 21.5935, -23.5977, 9.10812, 0.45 ) }
    dend_30 { pt3dadd( 22.2803, -24.2675, 9.54115, 0.45 ) }
    dend_30 { pt3dadd( 22.8899, -24.8416, 9.95397, 0.45 ) }
    dend_30 { pt3dadd( 23.6602, -25.575, 10.5652, 0.45 ) }
    dend_30 { pt3dadd( 24.4698, -26.4317, 11.3366, 0.45 ) }
    dend_30 { pt3dadd( 25.0372, -27.073, 11.9841, 0.45 ) }
    dend_30 { pt3dadd( 25.4489, -27.6117, 12.5092, 0.45 ) }
    dend_30 { pt3dadd( 25.8996, -28.2389, 13.0662, 0.45 ) }
    dend_30 { pt3dadd( 26.404, -28.9743, 13.6774, 0.45 ) }
    dend_30 { pt3dadd( 27.0436, -29.9588, 14.4764, 0.45 ) }
    dend_30 { pt3dadd( 27.5148, -30.7454, 15.1028, 0.45 ) }
    dend_30 { pt3dadd( 27.9623, -31.5269, 15.7348, 0.23 ) }
    dend_30 { pt3dadd( 28.457, -32.3543, 16.3915, 0.23 ) }
    dend_30 { pt3dadd( 29.034, -33.2588, 17.0976, 0.23 ) }
    dend_30 { pt3dadd( 29.4117, -33.8314, 17.5312, 0.23 ) }
    dend_30 { pt3dadd( 29.7958, -34.4506, 18.0185, 0.23 ) }
    dend_30 { pt3dadd( 30.4226, -35.5789, 18.8938, 0.23 ) }
    // Section: dend_17, id: dend_17, parent: soma_0 (entry count 77/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 6.16864, 1.4047, -0.84, 2.27 ) }
    dend_17 { pt3dadd( 6.16864, 1.4047, -0.84, 2.27 ) }
    dend_17 { pt3dadd( 7.53725, 2.10157, -1.68054, 1.82 ) }
    dend_17 { pt3dadd( 9.38823, 3.04406, -2.81734, 1.36 ) }
    dend_17 { pt3dadd( 10.7881, 3.75686, -3.6771, 1.36 ) }
    // Section: dend_14, id: dend_14, parent: soma_0 (entry count 82/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 3.79865, -4.3428, 5.46, 0.91 ) }
    dend_14 { pt3dadd( 3.79865, -4.3428, 5.46, 0.91 ) }
    dend_14 { pt3dadd( 4.91542, -5.52507, 6.11497, 0.91 ) }
    dend_14 { pt3dadd( 6.1941, -6.80903, 6.89919, 0.68 ) }
    dend_14 { pt3dadd( 7.49224, -7.99048, 7.74992, 0.68 ) }
    dend_14 { pt3dadd( 8.4816, -8.83283, 8.45133, 0.91 ) }
    dend_14 { pt3dadd( 9.55378, -9.64871, 9.27693, 0.91 ) }
    dend_14 { pt3dadd( 10.6551, -10.263, 10.1553, 0.68 ) }
    dend_14 { pt3dadd( 12.0253, -10.7177, 11.2786, 0.68 ) }
    dend_14 { pt3dadd( 13.1421, -10.9742, 12.2321, 0.68 ) }
    dend_14 { pt3dadd( 13.755, -11.1052, 12.7639, 0.68 ) }
    dend_14 { pt3dadd( 15.0138, -11.3696, 13.8463, 0.68 ) }
    dend_14 { pt3dadd( 16.9482, -11.7898, 15.378, 0.45 ) }
    dend_14 { pt3dadd( 18.3439, -12.1178, 16.3756, 0.45 ) }
    dend_14 { pt3dadd( 19.8117, -12.4957, 17.2745, 0.45 ) }
    dend_14 { pt3dadd( 21.2708, -12.938, 18.1003, 0.45 ) }
    dend_14 { pt3dadd( 22.8955, -13.5014, 18.9477, 0.45 ) }
    dend_14 { pt3dadd( 24.1299, -14.0104, 19.5413, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_14 { pt3dadd( 25.8556, -14.8089, 20.3445, 0.68 ) }
    dend_14 { pt3dadd( 27.8793, -15.7337, 21.1852, 0.68 ) }
    // Section: dend_11, id: dend_11, parent: soma_0 (entry count 2/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 0.288636, -4.27631, 6.82, 0.91 ) }
    dend_11 { pt3dadd( 0.288636, -4.27631, 6.82, 0.91 ) }
    dend_11 { pt3dadd( -1.15677, -6.31247, 7.97972, 0.91 ) }
    dend_11 { pt3dadd( -2.63291, -8.23058, 9.15515, 0.91 ) }
    dend_11 { pt3dadd( -3.94695, -9.93804, 10.2015, 0.91 ) }
    dend_11 { pt3dadd( -5.0648, -11.3906, 11.0916, 0.91 ) }
    dend_11 { pt3dadd( -6.24992, -12.9306, 12.0353, 0.91 ) }
    dend_11 { pt3dadd( -7.32102, -14.2719, 12.9329, 0.91 ) }
    dend_11 { pt3dadd( -8.3595, -15.4483, 13.9125, 0.91 ) }
    // Section: dend_8, id: dend_8, parent: soma_0 (entry count 11/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -6.31134, 0.63519, 6.86, 0.91 ) }
    dend_8 { pt3dadd( -6.31134, 0.63519, 6.86, 0.91 ) }
    dend_8 { pt3dadd( -6.96457, 0.63519, 7.11101, 0.91 ) }
    dend_8 { pt3dadd( -8.40923, 0.63519, 7.66612, 0.91 ) }
    // Section: dend_1, id: dend_1, parent: soma_0 (entry count 15/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -6.99139, 1.4617, -3.54, 0.91 ) }
    dend_1 { pt3dadd( -6.99139, 1.4617, -3.54, 0.91 ) }
    dend_1 { pt3dadd( -7.97451, 1.59896, -3.80131, 0.91 ) }
    dend_1 { pt3dadd( -9.17211, 1.70529, -4.13751, 0.91 ) }
    dend_1 { pt3dadd( -10.8521, 1.82375, -4.6687, 0.91 ) }
    dend_1 { pt3dadd( -11.7194, 1.87224, -4.97258, 0.91 ) }
    dend_1 { pt3dadd( -13.0461, 1.92214, -5.46852, 0.91 ) }
    dend_1 { pt3dadd( -14.2882, 1.92942, -5.96655, 0.91 ) }
    dend_1 { pt3dadd( -15.4963, 1.90838, -6.46592, 0.91 ) }
    dend_1 { pt3dadd( -16.8842, 1.85587, -7.0568, 0.68 ) }
    dend_1 { pt3dadd( -18.54, 1.75855, -7.77861, 0.91 ) }
    dend_1 { pt3dadd( -19.7682, 1.68229, -8.32645, 0.91 ) }
    dend_1 { pt3dadd( -21.1393, 1.61704, -8.96781, 0.91 ) }
    dend_1 { pt3dadd( -23.1763, 1.54615, -9.90269, 0.91 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 29/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -4.04144, 3.9127, 5.18, 0.91 ) }
    dend_0 { pt3dadd( -4.04144, 3.9127, 5.18, 0.91 ) }
    dend_0 { pt3dadd( -4.53347, 5.54459, 6.3931, 0.91 ) }
    dend_0 { pt3dadd( -4.74118, 6.86123, 7.35146, 0.68 ) }
    dend_0 { pt3dadd( -4.76326, 8.06428, 8.20598, 0.68 ) }
    dend_0 { pt3dadd( -4.69867, 8.94052, 8.82933, 0.68 ) }
    dend_0 { pt3dadd( -4.53435, 10.1109, 9.66059, 0.68 ) }
    dend_0 { pt3dadd( -4.27168, 11.1555, 10.4339, 0.68 ) }
    dend_0 { pt3dadd( -3.78032, 12.5525, 11.5547, 0.68 ) }
    dend_0 { pt3dadd( -3.29517, 13.8937, 12.6477, 0.68 ) }
    dend_0 { pt3dadd( -2.94723, 14.8204, 13.448, 0.68 ) }
    dend_0 { pt3dadd( -2.65193, 15.6441, 14.2294, 0.68 ) }
    dend_0 { pt3dadd( -2.34765, 16.5366, 15.151, 0.68 ) }
    dend_0 { pt3dadd( -2.10096, 17.3725, 16.1041, 0.45 ) }
    dend_0 { pt3dadd( -1.85825, 18.3759, 17.4392, 0.45 ) }
    dend_0 { pt3dadd( -1.77115, 19.2709, 18.7786, 0.45 ) }
    dend_0 { pt3dadd( -1.7587, 19.9935, 19.9345, 0.45 ) }
    dend_0 { pt3dadd( -1.76236, 20.5924, 20.9116, 0.68 ) }
    dend_0 { pt3dadd( -1.75365, 21.2103, 21.8863, 0.45 ) }
    dend_0 { pt3dadd( -1.7239, 21.9137, 22.9332, 0.45 ) }
    dend_0 { pt3dadd( -1.77018, 22.4477, 23.6888, 0.45 ) }
    dend_0 { pt3dadd( -2.01449, 23.2777, 24.7336, 0.45 ) }
    dend_0 { pt3dadd( -2.29067, 23.9991, 25.6338, 0.45 ) }
    dend_0 { pt3dadd( -2.56661, 24.8602, 26.7116, 0.45 ) }
    dend_0 { pt3dadd( -2.71351, 25.6213, 27.6096, 0.45 ) }
    dend_0 { pt3dadd( -2.87807, 26.6193, 28.7119, 0.45 ) }
    dend_0 { pt3dadd( -3.05663, 27.3932, 29.5775, 0.45 ) }
    dend_0 { pt3dadd( -3.32771, 28.0771, 30.3774, 0.45 ) }
    dend_0 { pt3dadd( -3.81952, 29.0349, 31.5088, 0.45 ) }
    dend_0 { pt3dadd( -4.20172, 29.7314, 32.333, 0.45 ) }
    dend_0 { pt3dadd( -4.53974, 30.4564, 33.2016, 0.45 ) }
    dend_0 { pt3dadd( -4.70538, 30.9799, 33.8366, 0.45 ) }
    dend_0 { pt3dadd( -4.96751, 32.1128, 35.1721, 0.45 ) }
    dend_0 { pt3dadd( -5.12719, 33.0037, 36.1642, 0.45 ) }
    dend_0 { pt3dadd( -5.19102, 33.5623, 36.8301, 0.45 ) }
    dend_0 { pt3dadd( -5.05608, 34.292, 37.7605, 0.45 ) }
    dend_0 { pt3dadd( -4.71548, 35.0394, 38.7619, 0.45 ) }
    dend_0 { pt3dadd( -4.21537, 35.8236, 39.8701, 0.45 ) }
    dend_0 { pt3dadd( -3.7113, 36.5059, 40.8281, 0.45 ) }
    dend_0 { pt3dadd( -3.01333, 37.3337, 42.0288, 0.45 ) }
    dend_0 { pt3dadd( -1.9085, 38.6299, 43.9431, 0.23 ) }
    dend_0 { pt3dadd( -1.50339, 39.0741, 44.6328, 0.23 ) }
    dend_0 { pt3dadd( -0.907453, 39.7012, 45.6065, 0.23 ) }
    dend_0 { pt3dadd( -0.243267, 40.3604, 46.5955, 0.23 ) }
    dend_0 { pt3dadd( 0.478376, 41.0481, 47.5688, 0.23 ) }
    dend_0 { pt3dadd( 1.19732, 41.7119, 48.472, 0.23 ) }
    dend_0 { pt3dadd( 2.17562, 42.6503, 49.7388, 0.23 ) }
    dend_0 { pt3dadd( 3.31582, 43.6681, 51.1155, 0.23 ) }
    dend_0 { pt3dadd( 4.43866, 44.5798, 52.378, 0.23 ) }
    dend_0 { pt3dadd( 5.50969, 45.3783, 53.5581, 0.23 ) }
    dend_0 { pt3dadd( 6.35428, 46.056, 54.4856, 0.23 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 80/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 6.68424, -2.3129, 0.0, 0.767491 ) }
    axon_0 { pt3dadd( 21.1553, -6.2612, 0.0, 0.767491 ) }
    axon_0 { pt3dadd( 35.6263, -10.2095, 0.0, 0.767491 ) }
    // Section: dend_36, id: dend_36, parent: dend_34 (entry count 83/100)
    dend_36 { pt3dclear() }
    dend_36 { pt3dadd( 4.3603, -14.01, 6.13561, 0.68 ) }
    dend_36 { pt3dadd( 5.42853, -15.0968, 5.962, 0.68 ) }
    dend_36 { pt3dadd( 7.26463, -17.0379, 5.56849, 0.68 ) }
    dend_36 { pt3dadd( 9.02416, -18.9664, 5.15975, 0.68 ) }
    dend_36 { pt3dadd( 10.6218, -20.7372, 4.79315, 0.68 ) }
    dend_36 { pt3dadd( 12.586, -23.0525, 4.35282, 0.68 ) }
    dend_36 { pt3dadd( 14.308, -25.2637, 3.97398, 0.68 ) }
    dend_36 { pt3dadd( 15.787, -27.3861, 3.6202, 0.68 ) }
    dend_36 { pt3dadd( 16.6425, -28.742, 3.38714, 0.68 ) }
    dend_36 { pt3dadd( 18.1594, -31.3281, 2.93458, 0.68 ) }
    dend_36 { pt3dadd( 19.5306, -33.7725, 2.50457, 0.68 ) }
    dend_36 { pt3dadd( 20.6306, -35.9089, 2.15686, 0.68 ) }
    dend_36 { pt3dadd( 21.7591, -38.263, 1.85763, 0.45 ) }
    dend_36 { pt3dadd( 22.6815, -40.3848, 1.60412, 0.45 ) }
    dend_36 { pt3dadd( 23.5141, -42.5263, 1.2628, 0.45 ) }
    dend_36 { pt3dadd( 24.1968, -44.4054, 0.840578, 0.45 ) }
    dend_36 { pt3dadd( 25.1423, -46.9108, 0.0519748, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_36 { pt3dadd( 25.8719, -48.8902, -0.709088, 0.45 ) }
    dend_36 { pt3dadd( 26.5575, -50.8879, -1.60483, 0.68 ) }
    dend_36 { pt3dadd( 27.2601, -52.8682, -2.60946, 0.68 ) }
    dend_36 { pt3dadd( 28.0826, -55.0455, -3.8103, 0.68 ) }
    dend_36 { pt3dadd( 28.99, -57.1421, -5.06285, 0.45 ) }
    dend_36 { pt3dadd( 30.019, -59.1498, -6.33368, 0.45 ) }
    dend_36 { pt3dadd( 30.7592, -60.5061, -7.15591, 0.45 ) }
    dend_36 { pt3dadd( 32.1405, -62.8073, -8.40097, 0.45 ) }
    dend_36 { pt3dadd( 32.8244, -63.8553, -8.88387, 0.45 ) }
    dend_36 { pt3dadd( 33.8213, -65.2574, -9.46276, 0.45 ) }
    dend_36 { pt3dadd( 35.1277, -66.9126, -10.1346, 0.45 ) }
    dend_36 { pt3dadd( 36.9672, -68.966, -11.0774, 0.45 ) }
    dend_36 { pt3dadd( 38.6938, -70.722, -12.0302, 0.45 ) }
    dend_36 { pt3dadd( 40.4361, -72.4487, -13.1474, 0.45 ) }
    dend_36 { pt3dadd( 41.5618, -73.4692, -13.9407, 0.45 ) }
    dend_36 { pt3dadd( 42.8914, -74.5665, -14.9344, 0.45 ) }
    dend_36 { pt3dadd( 44.6532, -75.959, -16.3249, 0.45 ) }
    dend_36 { pt3dadd( 46.5905, -77.4942, -17.9692, 0.45 ) }
    dend_36 { pt3dadd( 48.4981, -79.1274, -19.667, 0.45 ) }
    dend_36 { pt3dadd( 49.7536, -80.2318, -20.8553, 0.45 ) }
    dend_36 { pt3dadd( 50.9906, -81.3546, -22.0449, 0.45 ) }
    dend_36 { pt3dadd( 51.721, -82.0439, -22.7474, 0.45 ) }
    dend_36 { pt3dadd( 52.7971, -83.0844, -23.7374, 0.45 ) }
    dend_36 { pt3dadd( 54.1098, -84.445, -24.9349, 0.45 ) }
    dend_36 { pt3dadd( 55.4658, -85.8774, -26.1997, 0.23 ) }
    dend_36 { pt3dadd( 56.7379, -87.31, -27.4253, 0.23 ) }
    dend_36 { pt3dadd( 57.7937, -88.5325, -28.4963, 0.23 ) }
    dend_36 { pt3dadd( 58.9276, -89.979, -29.7942, 0.23 ) }
    dend_36 { pt3dadd( 60.189, -91.8389, -31.3785, 0.23 ) }
    dend_36 { pt3dadd( 61.4797, -94.0466, -33.0744, 0.23 ) }
    dend_36 { pt3dadd( 61.75, -94.5318, -33.4069, 0.23 ) }
    dend_36 { pt3dadd( 62.3683, -95.6711, -34.1172, 0.23 ) }
    dend_36 { pt3dadd( 63.4676, -97.8121, -35.3377, 0.23 ) }
    dend_36 { pt3dadd( 64.3501, -99.662, -36.3168, 0.23 ) }
    dend_36 { pt3dadd( 65.6649, -102.453, -37.716, 0.23 ) }
    dend_36 { pt3dadd( 66.7469, -104.913, -38.8944, 0.23 ) }
    dend_36 { pt3dadd( 67.6237, -107.096, -39.9539, 0.23 ) }
    dend_36 { pt3dadd( 68.5755, -109.785, -41.2281, 0.23 ) }
    dend_36 { pt3dadd( 69.3067, -111.918, -42.238, 0.23 ) }
    dend_36 { pt3dadd( 69.6066, -112.918, -42.7076, 0.23 ) }
    dend_36 { pt3dadd( 69.913, -114.237, -43.2674, 0.23 ) }
    dend_36 { pt3dadd( 70.375, -116.328, -44.0491, 0.23 ) }
    dend_36 { pt3dadd( 70.746, -117.827, -44.5583, 0.23 ) }
    dend_36 { pt3dadd( 71.4144, -120.243, -45.256, 0.23 ) }
    dend_36 { pt3dadd( 72.1961, -122.709, -45.8419, 0.23 ) }
    dend_36 { pt3dadd( 73.1159, -125.293, -46.3256, 0.23 ) }
    dend_36 { pt3dadd( 73.9563, -127.417, -46.6398, 0.23 ) }
    dend_36 { pt3dadd( 74.431, -128.48, -46.7702, 0.23 ) }
    dend_36 { pt3dadd( 75.4299, -130.494, -47.0078, 0.23 ) }
    dend_36 { pt3dadd( 76.7304, -133.108, -47.3038, 0.23 ) }
    dend_36 { pt3dadd( 77.9513, -135.346, -47.589, 0.23 ) }
    dend_36 { pt3dadd( 78.931, -136.975, -47.8398, 0.23 ) }
    dend_36 { pt3dadd( 79.7168, -138.265, -48.0561, 0.23 ) }
    dend_36 { pt3dadd( 80.5497, -139.664, -48.3078, 0.23 ) }
    dend_36 { pt3dadd( 81.4024, -141.186, -48.6224, 0.23 ) }
    dend_36 { pt3dadd( 83.1843, -144.899, -49.4723, 0.23 ) }
    dend_36 { pt3dadd( 84.3579, -147.855, -50.1371, 0.23 ) }
    dend_36 { pt3dadd( 85.0227, -149.935, -50.6199, 0.23 ) }
    dend_36 { pt3dadd( 85.533, -151.898, -51.0895, 0.23 ) }
    dend_36 { pt3dadd( 86.0817, -154.472, -51.728, 0.23 ) }
    dend_36 { pt3dadd( 86.6444, -157.436, -52.4626, 0.23 ) }
    dend_36 { pt3dadd( 87.4494, -162.987, -53.8131, 0.23 ) }
    dend_36 { pt3dadd( 87.7555, -165.662, -54.4533, 0.23 ) }
    dend_36 { pt3dadd( 88.0013, -167.891, -55.0102, 0.23 ) }
    dend_36 { pt3dadd( 88.1942, -169.442, -55.4134, 0.23 ) }
    dend_36 { pt3dadd( 95.5963, -178.627, -58.5683, 0.23 ) }
    // Section: dend_35, id: dend_35, parent: dend_34 (entry count 66/100)
    dend_35 { pt3dclear() }
    dend_35 { pt3dadd( 4.3603, -14.01, 6.13561, 0.45 ) }
    dend_35 { pt3dadd( 3.63113, -16.0149, 3.87685, 0.45 ) }
    dend_35 { pt3dadd( 3.11068, -17.8886, 1.61649, 0.45 ) }
    dend_35 { pt3dadd( 2.84333, -18.8101, 0.49634, 0.45 ) }
    dend_35 { pt3dadd( 2.3481, -20.6267, -1.59895, 0.45 ) }
    dend_35 { pt3dadd( 2.05157, -22.1061, -3.31215, 0.45 ) }
    dend_35 { pt3dadd( 1.87785, -23.5254, -4.94652, 0.45 ) }
    dend_35 { pt3dadd( 1.91542, -24.8667, -6.48677, 0.45 ) }
    dend_35 { pt3dadd( 2.15969, -26.1879, -7.971, 0.45 ) }
    dend_35 { pt3dadd( 2.60759, -27.6269, -9.50083, 0.45 ) }
    dend_35 { pt3dadd( 3.52589, -29.9709, -11.7735, 0.45 ) }
    dend_35 { pt3dadd( 4.26187, -31.8011, -13.3986, 0.45 ) }
    dend_35 { pt3dadd( 4.90932, -33.7066, -14.9817, 0.45 ) }
    dend_35 { pt3dadd( 5.54081, -35.414, -16.4774, 0.45 ) }
    dend_35 { pt3dadd( 6.3599, -37.4989, -18.4587, 0.45 ) }
    dend_35 { pt3dadd( 6.73903, -38.6201, -19.6553, 0.45 ) }
    dend_35 { pt3dadd( 7.12721, -40.1527, -21.3281, 0.45 ) }
    dend_35 { pt3dadd( 7.4985, -42.0238, -23.6623, 0.23 ) }
    dend_35 { pt3dadd( 7.84924, -44.3536, -26.893, 0.23 ) }
    dend_35 { pt3dadd( 8.1108, -46.0893, -29.4624, 0.23 ) }
    dend_35 { pt3dadd( 8.40199, -48.0579, -32.5891, 0.23 ) }
    dend_35 { pt3dadd( 8.56759, -49.1303, -34.3547, 0.23 ) }
    dend_35 { pt3dadd( 8.82333, -51.4253, -38.112, 0.23 ) }
    dend_35 { pt3dadd( 8.94902, -53.2431, -41.0157, 0.23 ) }
    dend_35 { pt3dadd( 8.9673, -55.1984, -43.8959, 0.23 ) }
    dend_35 { pt3dadd( 8.97247, -57.4087, -47.1036, 0.23 ) }
    dend_35 { pt3dadd( 8.97944, -58.7914, -49.0604, 0.23 ) }
    dend_35 { pt3dadd( 8.92413, -61.1187, -52.369, 0.23 ) }
    dend_35 { pt3dadd( 8.83161, -62.3444, -53.9326, 0.23 ) }
    dend_35 { pt3dadd( 8.61621, -63.8654, -55.8596, 0.23 ) }
    dend_35 { pt3dadd( 8.76116, -74.4675, -64.6637, 0.23 ) }
    // Section: dend_33, id: dend_33, parent: dend_31 (entry count 97/100)
    dend_33 { pt3dclear() }
    dend_33 { pt3dadd( -6.83868, -6.11657, -13.1891, 0.45 ) }
    dend_33 { pt3dadd( -8.21299, -6.5958, -14.4771, 0.45 ) }
    dend_33 { pt3dadd( -9.41477, -6.96658, -15.6014, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_33 { pt3dadd( -10.4294, -7.28235, -16.5722, 0.45 ) }
    dend_33 { pt3dadd( -11.4685, -7.60731, -17.4906, 0.45 ) }
    dend_33 { pt3dadd( -12.6942, -8.01411, -18.5708, 0.45 ) }
    dend_33 { pt3dadd( -13.7733, -8.357, -19.5269, 0.45 ) }
    dend_33 { pt3dadd( -15.0552, -8.73602, -20.7542, 0.45 ) }
    dend_33 { pt3dadd( -16.2992, -9.0732, -21.994, 0.45 ) }
    dend_33 { pt3dadd( -18.0488, -9.56638, -23.7633, 0.45 ) }
    dend_33 { pt3dadd( -19.0355, -9.86102, -24.7889, 0.45 ) }
    dend_33 { pt3dadd( -20.3097, -10.2896, -26.1865, 0.45 ) }
    dend_33 { pt3dadd( -21.2891, -10.652, -27.3709, 0.45 ) }
    dend_33 { pt3dadd( -22.0641, -10.946, -28.3895, 0.45 ) }
    dend_33 { pt3dadd( -22.8901, -11.2589, -29.5635, 0.45 ) }
    dend_33 { pt3dadd( -23.624, -11.5578, -30.769, 0.45 ) }
    dend_33 { pt3dadd( -24.3698, -11.8826, -31.9999, 0.45 ) }
    dend_33 { pt3dadd( -25.1723, -12.3557, -33.4013, 0.45 ) }
    dend_33 { pt3dadd( -32.8396, -14.228, -41.7192, 0.45 ) }
    dend_33 { pt3dadd( -39.8686, -14.3747, -50.7951, 0.45 ) }
    dend_33 { pt3dadd( -45.8759, -13.874, -60.564, 0.45 ) }
    // Section: dend_32, id: dend_32, parent: dend_31 (entry count 18/100)
    dend_32 { pt3dclear() }
    dend_32 { pt3dadd( -6.83868, -6.11657, -13.1891, 0.45 ) }
    dend_32 { pt3dadd( -6.68775, -6.89526, -13.9073, 0.45 ) }
    dend_32 { pt3dadd( -6.59175, -7.52633, -14.516, 0.45 ) }
    dend_32 { pt3dadd( -6.49134, -8.58252, -15.5171, 0.45 ) }
    dend_32 { pt3dadd( -6.38927, -9.46122, -16.3898, 0.45 ) }
    dend_32 { pt3dadd( -6.30903, -10.0287, -17.004, 0.45 ) }
    dend_32 { pt3dadd( -6.18479, -10.6638, -17.7289, 0.45 ) }
    dend_32 { pt3dadd( -5.97273, -11.3903, -18.6711, 0.45 ) }
    dend_32 { pt3dadd( -5.86987, -11.6972, -19.0822, 0.45 ) }
    dend_32 { pt3dadd( -5.66267, -12.4359, -19.9826, 0.45 ) }
    dend_32 { pt3dadd( -5.53259, -13.1683, -20.7622, 0.45 ) }
    dend_32 { pt3dadd( -5.45854, -14.0509, -21.5683, 0.45 ) }
    dend_32 { pt3dadd( -5.45364, -14.7603, -22.0655, 0.45 ) }
    dend_32 { pt3dadd( -5.43871, -15.3415, -22.4449, 0.45 ) }
    dend_32 { pt3dadd( -5.34586, -16.4963, -23.2581, 0.45 ) }
    dend_32 { pt3dadd( -5.23281, -17.5492, -24.0032, 0.45 ) }
    dend_32 { pt3dadd( -5.03247, -18.5867, -24.7691, 0.45 ) }
    dend_32 { pt3dadd( -4.70448, -19.5428, -25.627, 0.45 ) }
    dend_32 { pt3dadd( -4.10107, -20.7098, -26.9988, 0.45 ) }
    dend_32 { pt3dadd( -3.4625, -21.6024, -28.3158, 0.23 ) }
    dend_32 { pt3dadd( -3.20005, -21.8901, -28.836, 0.23 ) }
    dend_32 { pt3dadd( -2.70322, -22.345, -29.8609, 0.23 ) }
    dend_32 { pt3dadd( -2.08779, -22.8933, -31.14, 0.23 ) }
    dend_32 { pt3dadd( -1.34867, -23.5558, -32.7366, 0.23 ) }
    dend_32 { pt3dadd( -1.06075, -23.8721, -33.4218, 0.23 ) }
    dend_32 { pt3dadd( -0.548104, -24.5601, -34.823, 0.23 ) }
    dend_32 { pt3dadd( -0.219968, -25.0594, -35.8279, 0.23 ) }
    dend_32 { pt3dadd( 0.300789, -25.8747, -37.5639, 0.23 ) }
    dend_32 { pt3dadd( 1.23131, -30.0876, -43.3331, 0.23 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 47/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 10.7881, 3.75686, -3.6771, 1.36 ) }
    dend_19 { pt3dadd( 10.8817, 3.77768, -3.70601, 1.36 ) }
    dend_19 { pt3dadd( 12.571, 4.15375, -4.22798, 1.82 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 50/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 10.7881, 3.75686, -3.6771, 0.45 ) }
    dend_18 { pt3dadd( 9.74022, 4.13621, -4.73212, 0.45 ) }
    dend_18 { pt3dadd( 8.63456, 4.52318, -5.70286, 0.45 ) }
    dend_18 { pt3dadd( 7.15486, 5.08538, -6.97646, 0.45 ) }
    dend_18 { pt3dadd( 6.01746, 5.61051, -7.97763, 0.45 ) }
    dend_18 { pt3dadd( 4.97971, 6.12461, -8.91811, 0.45 ) }
    dend_18 { pt3dadd( 3.90506, 6.71048, -9.98584, 0.45 ) }
    dend_18 { pt3dadd( 2.96014, 7.2844, -11.1282, 0.45 ) }
    dend_18 { pt3dadd( 2.43582, 7.72582, -11.9939, 0.45 ) }
    dend_18 { pt3dadd( 1.884, 8.3973, -13.3524, 0.45 ) }
    dend_18 { pt3dadd( 1.36131, 9.24533, -15.1725, 0.45 ) }
    dend_18 { pt3dadd( 0.918797, 10.1707, -17.3194, 0.45 ) }
    dend_18 { pt3dadd( 0.426273, 11.3042, -20.199, 0.45 ) }
    dend_18 { pt3dadd( 0.031977, 12.2429, -22.8233, 0.45 ) }
    dend_18 { pt3dadd( -0.369865, 13.022, -25.2658, 0.45 ) }
    dend_18 { pt3dadd( -0.883142, 13.8232, -28.0534, 0.45 ) }
    dend_18 { pt3dadd( -1.4705, 14.5963, -30.7624, 0.45 ) }
    dend_18 { pt3dadd( -1.94921, 15.0645, -32.4333, 0.45 ) }
    dend_18 { pt3dadd( -2.42724, 15.4025, -33.6177, 0.45 ) }
    dend_18 { pt3dadd( -3.46123, 15.9961, -35.6548, 0.45 ) }
    dend_18 { pt3dadd( -4.4289, 16.5229, -37.2994, 0.45 ) }
    dend_18 { pt3dadd( -5.30474, 16.9812, -38.6618, 0.45 ) }
    dend_18 { pt3dadd( -6.21395, 17.434, -40.0759, 0.45 ) }
    dend_18 { pt3dadd( -7.28895, 17.9873, -41.7296, 0.45 ) }
    dend_18 { pt3dadd( -7.9604, 18.3458, -42.7817, 0.45 ) }
    dend_18 { pt3dadd( -9.21099, 19.0643, -44.9802, 0.23 ) }
    dend_18 { pt3dadd( -10.1438, 19.6861, -46.7786, 0.23 ) }
    dend_18 { pt3dadd( -11.786, 20.9613, -50.2966, 0.23 ) }
    dend_18 { pt3dadd( -12.5878, 21.6202, -52.1002, 0.23 ) }
    dend_18 { pt3dadd( -13.491, 22.4139, -54.2524, 0.23 ) }
    dend_18 { pt3dadd( -14.7876, 23.6108, -57.3899, 0.23 ) }
    dend_18 { pt3dadd( -15.7282, 24.5204, -59.6429, 0.23 ) }
    dend_18 { pt3dadd( -16.8764, 25.7833, -62.4788, 0.23 ) }
    dend_18 { pt3dadd( -17.7997, 27.0076, -64.9201, 0.23 ) }
    dend_18 { pt3dadd( -22.5053, 32.3933, -74.9657, 0.23 ) }
    // Section: dend_16, id: dend_16, parent: dend_14 (entry count 85/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 27.8793, -15.7337, 21.1852, 0.45 ) }
    dend_16 { pt3dadd( 28.5004, -16.0254, 22.0124, 0.45 ) }
    dend_16 { pt3dadd( 29.6073, -16.374, 23.205, 0.45 ) }
    dend_16 { pt3dadd( 30.8934, -16.7041, 24.4081, 0.45 ) }
    dend_16 { pt3dadd( 31.5646, -16.8981, 25.023, 0.45 ) }
    dend_16 { pt3dadd( 32.4614, -17.1515, 25.8651, 0.45 ) }
    dend_16 { pt3dadd( 33.6027, -17.4429, 26.974, 0.45 ) }
    dend_16 { pt3dadd( 35.0623, -17.7287, 28.3805, 0.45 ) }
    dend_16 { pt3dadd( 35.9351, -17.8783, 29.2098, 0.45 ) }
    dend_16 { pt3dadd( 36.9138, -18.0032, 30.1364, 0.45 ) }
    dend_16 { pt3dadd( 37.845, -18.0779, 31.0101, 0.45 ) }
    dend_16 { pt3dadd( 38.8444, -18.1405, 31.9151, 0.45 ) }
    dend_16 { pt3dadd( 39.9456, -18.2444, 32.9343, 0.45 ) }
    dend_16 { pt3dadd( 41.1428, -18.3813, 33.9805, 0.45 ) }
    dend_16 { pt3dadd( 42.2466, -18.4811, 34.8109, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_16 { pt3dadd( 43.4884, -18.6027, 35.6303, 0.45 ) }
    dend_16 { pt3dadd( 44.8465, -18.8192, 36.4436, 0.45 ) }
    dend_16 { pt3dadd( 46.3706, -19.1546, 37.2384, 0.45 ) }
    dend_16 { pt3dadd( 48.1786, -19.5682, 37.9656, 0.45 ) }
    dend_16 { pt3dadd( 49.9355, -19.9013, 38.5346, 0.23 ) }
    dend_16 { pt3dadd( 51.5586, -20.2153, 39.0145, 0.23 ) }
    dend_16 { pt3dadd( 53.1533, -20.5493, 39.435, 0.23 ) }
    dend_16 { pt3dadd( 55.3505, -20.983, 39.9405, 0.23 ) }
    dend_16 { pt3dadd( 58.9334, -21.6154, 40.6515, 0.23 ) }
    dend_16 { pt3dadd( 61.8117, -22.1102, 41.1616, 0.23 ) }
    // Section: dend_15, id: dend_15, parent: dend_14 (entry count 10/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 27.8793, -15.7337, 21.1852, 0.45 ) }
    dend_15 { pt3dadd( 29.2948, -16.7235, 21.4518, 0.45 ) }
    dend_15 { pt3dadd( 30.0311, -17.1393, 21.5965, 0.45 ) }
    dend_15 { pt3dadd( 31.5424, -17.9783, 21.8799, 0.23 ) }
    dend_15 { pt3dadd( 32.7436, -18.6063, 22.081, 0.23 ) }
    dend_15 { pt3dadd( 33.8491, -19.1114, 22.2357, 0.68 ) }
    dend_15 { pt3dadd( 35.3037, -19.734, 22.4262, 0.45 ) }
    dend_15 { pt3dadd( 37.047, -20.3596, 22.6299, 0.45 ) }
    dend_15 { pt3dadd( 39.1475, -20.991, 22.8523, 0.45 ) }
    dend_15 { pt3dadd( 40.4938, -21.3403, 22.9823, 0.45 ) }
    dend_15 { pt3dadd( 42.2166, -21.7254, 23.1514, 0.45 ) }
    dend_15 { pt3dadd( 44.2776, -22.1629, 23.3514, 0.45 ) }
    dend_15 { pt3dadd( 46.0499, -22.5132, 23.5026, 0.45 ) }
    dend_15 { pt3dadd( 47.1024, -22.7084, 23.5975, 0.45 ) }
    dend_15 { pt3dadd( 48.1342, -22.8361, 23.7112, 0.45 ) }
    dend_15 { pt3dadd( 49.2016, -22.9881, 23.8675, 0.45 ) }
    // Section: dend_13, id: dend_13, parent: dend_11 (entry count 26/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -8.3595, -15.4483, 13.9125, 0.45 ) }
    dend_13 { pt3dadd( -8.9061, -15.1262, 14.7285, 0.45 ) }
    dend_13 { pt3dadd( -9.97289, -14.8048, 16.3795, 0.45 ) }
    dend_13 { pt3dadd( -10.6912, -14.832, 17.5668, 0.45 ) }
    dend_13 { pt3dadd( -11.3851, -15.1163, 18.7732, 0.45 ) }
    dend_13 { pt3dadd( -11.6833, -15.2717, 19.2675, 0.45 ) }
    dend_13 { pt3dadd( -12.1478, -15.5237, 20.0889, 0.45 ) }
    dend_13 { pt3dadd( -12.8442, -16.0456, 21.5449, 0.45 ) }
    dend_13 { pt3dadd( -13.3172, -16.5252, 22.6267, 0.45 ) }
    dend_13 { pt3dadd( -13.8294, -17.2117, 23.9971, 0.45 ) }
    dend_13 { pt3dadd( -13.9739, -17.4839, 24.6108, 0.45 ) }
    dend_13 { pt3dadd( -14.1527, -17.9565, 25.7986, 0.45 ) }
    dend_13 { pt3dadd( -14.3243, -18.4744, 27.2317, 0.45 ) }
    dend_13 { pt3dadd( -14.5268, -19.125, 29.0246, 0.45 ) }
    dend_13 { pt3dadd( -14.6184, -19.6706, 30.5202, 0.45 ) }
    dend_13 { pt3dadd( -14.6467, -20.2406, 32.3252, 0.45 ) }
    dend_13 { pt3dadd( -14.6153, -20.7264, 33.981, 0.45 ) }
    dend_13 { pt3dadd( -14.5407, -21.1334, 35.4995, 0.45 ) }
    dend_13 { pt3dadd( -14.4483, -21.4879, 37.0611, 0.45 ) }
    dend_13 { pt3dadd( -14.4056, -21.7734, 38.7352, 0.45 ) }
    dend_13 { pt3dadd( -14.494, -22.0796, 40.6439, 0.45 ) }
    dend_13 { pt3dadd( -14.5759, -22.3125, 41.7708, 0.45 ) }
    dend_13 { pt3dadd( -14.6929, -22.5463, 42.7549, 0.45 ) }
    dend_13 { pt3dadd( -15.0348, -22.9651, 44.1001, 0.45 ) }
    dend_13 { pt3dadd( -15.681, -23.5804, 45.4981, 0.45 ) }
    dend_13 { pt3dadd( -16.2092, -24.114, 46.3695, 0.45 ) }
    dend_13 { pt3dadd( -17.0132, -25.0199, 47.5396, 0.45 ) }
    dend_13 { pt3dadd( -18.2577, -26.2581, 49.0259, 0.45 ) }
    dend_13 { pt3dadd( -19.365, -27.2805, 50.1953, 0.45 ) }
    dend_13 { pt3dadd( -20.1246, -28.0378, 51.0218, 0.45 ) }
    dend_13 { pt3dadd( -21.0117, -28.9685, 52.0447, 0.45 ) }
    dend_13 { pt3dadd( -21.7439, -29.7204, 52.8831, 0.45 ) }
    dend_13 { pt3dadd( -23.0136, -30.9843, 54.2286, 0.45 ) }
    dend_13 { pt3dadd( -23.7332, -31.8245, 55.0775, 0.45 ) }
    dend_13 { pt3dadd( -24.7432, -33.3308, 56.5401, 0.45 ) }
    dend_13 { pt3dadd( -25.6015, -34.712, 57.8806, 0.45 ) }
    dend_13 { pt3dadd( -25.9504, -35.273, 58.4657, 0.45 ) }
    dend_13 { pt3dadd( -26.5304, -36.3447, 59.7178, 0.45 ) }
    dend_13 { pt3dadd( -26.9131, -37.4775, 61.1894, 0.45 ) }
    dend_13 { pt3dadd( -27.0238, -38.5245, 62.8897, 0.45 ) }
    dend_13 { pt3dadd( -26.917, -39.089, 64.0565, 0.45 ) }
    dend_13 { pt3dadd( -26.4881, -39.5978, 65.2719, 0.45 ) }
    dend_13 { pt3dadd( -25.7304, -39.9464, 66.4419, 0.45 ) }
    dend_13 { pt3dadd( -24.0622, -40.251, 68.2063, 0.45 ) }
    dend_13 { pt3dadd( -22.1852, -40.2979, 69.7541, 0.45 ) }
    dend_13 { pt3dadd( -20.094, -40.1163, 71.1604, 0.23 ) }
    dend_13 { pt3dadd( -17.1637, -39.8417, 72.9486, 0.23 ) }
    dend_13 { pt3dadd( -13.6362, -39.5081, 74.8848, 0.23 ) }
    dend_13 { pt3dadd( -11.1085, -39.1894, 76.1168, 0.23 ) }
    dend_13 { pt3dadd( -9.43095, -38.844, 76.8021, 0.23 ) }
    dend_13 { pt3dadd( -7.37973, -38.2896, 77.4865, 0.23 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 77/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -8.3595, -15.4483, 13.9125, 0.68 ) }
    dend_12 { pt3dadd( -9.1443, -15.9412, 14.168, 0.68 ) }
    dend_12 { pt3dadd( -10.6851, -16.8914, 14.6325, 0.45 ) }
    dend_12 { pt3dadd( -12.0364, -17.7763, 15.0227, 0.45 ) }
    dend_12 { pt3dadd( -13.1964, -18.5724, 15.3656, 0.68 ) }
    dend_12 { pt3dadd( -14.236, -19.3411, 15.6917, 0.68 ) }
    dend_12 { pt3dadd( -14.7962, -19.7732, 15.872, 0.68 ) }
    dend_12 { pt3dadd( -15.852, -20.627, 16.2034, 0.45 ) }
    dend_12 { pt3dadd( -17.3278, -21.8784, 16.6376, 0.45 ) }
    dend_12 { pt3dadd( -18.1707, -22.6401, 16.8622, 0.45 ) }
    dend_12 { pt3dadd( -19.1655, -23.5747, 17.0938, 0.45 ) }
    dend_12 { pt3dadd( -20.1523, -24.5055, 17.2915, 0.45 ) }
    dend_12 { pt3dadd( -20.9853, -25.3197, 17.4533, 0.45 ) }
    dend_12 { pt3dadd( -21.957, -26.2942, 17.6492, 0.68 ) }
    dend_12 { pt3dadd( -22.8054, -27.1403, 17.7959, 0.68 ) }
    dend_12 { pt3dadd( -24.2861, -28.6024, 18.0461, 0.68 ) }
    dend_12 { pt3dadd( -25.6669, -29.9633, 18.3114, 0.45 ) }
    dend_12 { pt3dadd( -26.9515, -31.2871, 18.603, 0.45 ) }
    dend_12 { pt3dadd( -27.8819, -32.2759, 18.844, 0.45 ) }
    dend_12 { pt3dadd( -28.6793, -33.1396, 19.0629, 0.45 ) }
    dend_12 { pt3dadd( -29.8825, -34.4292, 19.3966, 0.45 ) }
    dend_12 { pt3dadd( -30.8121, -35.421, 19.6382, 0.45 ) }
    dend_12 { pt3dadd( -31.9826, -36.6304, 19.9209, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_12 { pt3dadd( -32.4908, -37.1417, 20.0378, 0.45 ) }
    dend_12 { pt3dadd( -33.4039, -38.0837, 20.2412, 0.45 ) }
    dend_12 { pt3dadd( -34.1335, -38.8317, 20.3893, 0.45 ) }
    dend_12 { pt3dadd( -34.966, -39.654, 20.5071, 0.45 ) }
    dend_12 { pt3dadd( -35.7434, -40.3809, 20.5838, 0.45 ) }
    dend_12 { pt3dadd( -36.8408, -41.3216, 20.6463, 0.45 ) }
    dend_12 { pt3dadd( -37.8543, -42.1621, 20.6709, 0.45 ) }
    dend_12 { pt3dadd( -38.9418, -43.0444, 20.6633, 0.45 ) }
    dend_12 { pt3dadd( -39.7057, -43.6324, 20.6308, 0.45 ) }
    dend_12 { pt3dadd( -40.8761, -44.5403, 20.568, 0.45 ) }
    dend_12 { pt3dadd( -42.2731, -45.6522, 20.4966, 0.45 ) }
    dend_12 { pt3dadd( -43.4322, -46.5734, 20.4788, 0.45 ) }
    dend_12 { pt3dadd( -44.3449, -47.3124, 20.5151, 0.45 ) }
    dend_12 { pt3dadd( -45.5347, -48.3375, 20.6389, 0.45 ) }
    dend_12 { pt3dadd( -47.0411, -49.6803, 20.8982, 0.45 ) }
    dend_12 { pt3dadd( -48.2579, -50.8233, 21.2023, 0.45 ) }
    dend_12 { pt3dadd( -49.3818, -51.9524, 21.5712, 0.45 ) }
    dend_12 { pt3dadd( -50.7961, -53.4215, 22.134, 0.45 ) }
    dend_12 { pt3dadd( -51.9414, -54.5873, 22.6481, 0.45 ) }
    dend_12 { pt3dadd( -52.6704, -55.3245, 23.0058, 0.45 ) }
    dend_12 { pt3dadd( -54.0121, -56.629, 23.6706, 0.45 ) }
    dend_12 { pt3dadd( -55.0943, -57.6273, 24.1797, 0.45 ) }
    dend_12 { pt3dadd( -56.0042, -58.4581, 24.5883, 0.45 ) }
    dend_12 { pt3dadd( -57.7862, -60.1113, 25.3532, 0.45 ) }
    dend_12 { pt3dadd( -58.671, -60.9569, 25.6997, 0.45 ) }
    dend_12 { pt3dadd( -59.1848, -61.452, 25.8829, 0.45 ) }
    dend_12 { pt3dadd( -60.0728, -62.3672, 26.1735, 0.45 ) }
    dend_12 { pt3dadd( -60.8662, -63.3096, 26.4027, 0.45 ) }
    dend_12 { pt3dadd( -61.6246, -64.3547, 26.5549, 0.45 ) }
    dend_12 { pt3dadd( -62.3375, -65.4596, 26.6321, 0.45 ) }
    dend_12 { pt3dadd( -63.0642, -66.6151, 26.661, 0.45 ) }
    dend_12 { pt3dadd( -64.0182, -68.2631, 26.6406, 0.45 ) }
    dend_12 { pt3dadd( -64.9381, -70.0069, 26.5594, 0.45 ) }
    dend_12 { pt3dadd( -66.8183, -73.6451, 26.2737, 0.45 ) }
    dend_12 { pt3dadd( -67.5612, -75.103, 26.1426, 0.45 ) }
    dend_12 { pt3dadd( -68.3645, -76.7118, 26.0087, 0.45 ) }
    dend_12 { pt3dadd( -69.4186, -78.8782, 25.8633, 0.45 ) }
    dend_12 { pt3dadd( -70.5516, -81.1336, 25.765, 0.45 ) }
    dend_12 { pt3dadd( -71.4992, -82.9856, 25.7614, 0.45 ) }
    dend_12 { pt3dadd( -72.2167, -84.3698, 25.8418, 0.45 ) }
    dend_12 { pt3dadd( -73.109, -85.9157, 26.0327, 0.45 ) }
    dend_12 { pt3dadd( -74.3979, -88.0118, 26.3784, 0.45 ) }
    dend_12 { pt3dadd( -74.8315, -88.638, 26.5165, 0.45 ) }
    dend_12 { pt3dadd( -75.9107, -90.076, 26.9082, 0.45 ) }
    dend_12 { pt3dadd( -76.8845, -91.3312, 27.2823, 0.45 ) }
    dend_12 { pt3dadd( -78.2764, -93.0526, 27.7611, 0.45 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 46/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -8.40923, 0.63519, 7.66612, 0.45 ) }
    dend_10 { pt3dadd( -7.81208, 0.214696, 9.02403, 0.45 ) }
    dend_10 { pt3dadd( -7.25169, -0.060882, 10.5891, 0.45 ) }
    dend_10 { pt3dadd( -7.01403, -0.00971097, 11.2961, 0.45 ) }
    dend_10 { pt3dadd( -6.38991, 0.37853, 12.6856, 0.45 ) }
    dend_10 { pt3dadd( -5.78942, 0.858135, 13.896, 0.45 ) }
    dend_10 { pt3dadd( -5.25848, 1.34743, 15.0294, 0.45 ) }
    dend_10 { pt3dadd( -4.63094, 2.03808, 16.4223, 0.45 ) }
    dend_10 { pt3dadd( -4.04998, 2.83191, 17.9807, 0.45 ) }
    dend_10 { pt3dadd( -3.34319, 3.96045, 20.1097, 0.45 ) }
    dend_10 { pt3dadd( -3.03894, 4.44261, 20.9783, 0.45 ) }
    dend_10 { pt3dadd( -2.74322, 4.83566, 21.7058, 0.45 ) }
    dend_10 { pt3dadd( -2.26902, 5.37381, 22.7574, 0.45 ) }
    dend_10 { pt3dadd( -2.00911, 5.63952, 23.4726, 0.45 ) }
    dend_10 { pt3dadd( -1.78202, 5.9705, 24.7687, 0.45 ) }
    dend_10 { pt3dadd( -1.72112, 6.38771, 26.3026, 0.45 ) }
    dend_10 { pt3dadd( -1.64391, 6.83466, 27.7708, 0.45 ) }
    dend_10 { pt3dadd( -1.60526, 7.14789, 28.7307, 0.45 ) }
    dend_10 { pt3dadd( -1.508, 7.94516, 30.8022, 0.45 ) }
    dend_10 { pt3dadd( -1.33823, 9.04287, 33.3078, 0.45 ) }
    dend_10 { pt3dadd( -1.20562, 9.89633, 35.0516, 0.45 ) }
    dend_10 { pt3dadd( -0.932419, 10.96, 36.9138, 0.45 ) }
    dend_10 { pt3dadd( -0.568885, 12.1837, 39.0036, 0.45 ) }
    dend_10 { pt3dadd( -0.0867821, 13.4773, 41.1282, 0.23 ) }
    dend_10 { pt3dadd( 0.51672, 14.8329, 43.0748, 0.23 ) }
    dend_10 { pt3dadd( 1.12415, 15.9747, 44.5403, 0.23 ) }
    dend_10 { pt3dadd( 2.37248, 18.1494, 47.2442, 0.23 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 73/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -8.40923, 0.63519, 7.66612, 0.68 ) }
    dend_9 { pt3dadd( -9.38132, 0.274085, 7.91782, 0.68 ) }
    dend_9 { pt3dadd( -11.0394, -0.298439, 8.42942, 0.45 ) }
    dend_9 { pt3dadd( -12.2676, -0.674191, 8.82501, 0.45 ) }
    dend_9 { pt3dadd( -13.905, -1.10418, 9.41875, 0.45 ) }
    dend_9 { pt3dadd( -15.1024, -1.41071, 9.91864, 0.45 ) }
    dend_9 { pt3dadd( -16.6612, -1.87554, 10.6648, 0.45 ) }
    dend_9 { pt3dadd( -17.41, -2.11438, 11.0973, 0.45 ) }
    dend_9 { pt3dadd( -18.6368, -2.54425, 11.9493, 0.45 ) }
    dend_9 { pt3dadd( -19.6444, -2.95861, 12.7265, 0.45 ) }
    dend_9 { pt3dadd( -20.4771, -3.39974, 13.4409, 0.45 ) }
    dend_9 { pt3dadd( -21.6696, -4.13478, 14.5952, 0.45 ) }
    dend_9 { pt3dadd( -22.1045, -4.43865, 15.0864, 0.68 ) }
    dend_9 { pt3dadd( -22.9166, -5.0999, 16.1383, 0.68 ) }
    dend_9 { pt3dadd( -23.7912, -5.86508, 17.4279, 0.68 ) }
    dend_9 { pt3dadd( -24.8386, -6.71271, 18.9618, 0.45 ) }
    dend_9 { pt3dadd( -25.7606, -7.29996, 20.3282, 0.45 ) }
    dend_9 { pt3dadd( -26.7685, -7.79546, 21.8693, 0.45 ) }
    dend_9 { pt3dadd( -27.4567, -8.12843, 23.0791, 0.45 ) }
    dend_9 { pt3dadd( -27.8486, -8.31959, 23.8811, 0.45 ) }
    dend_9 { pt3dadd( -28.3545, -8.5505, 25.0922, 0.45 ) }
    dend_9 { pt3dadd( -28.9022, -8.72904, 26.4669, 0.45 ) }
    dend_9 { pt3dadd( -29.2411, -8.79702, 27.323, 0.45 ) }
    dend_9 { pt3dadd( -29.7519, -8.92903, 28.7842, 0.45 ) }
    dend_9 { pt3dadd( -30.1921, -9.06757, 29.9762, 0.45 ) }
    dend_9 { pt3dadd( -30.4339, -9.17221, 30.5482, 0.45 ) }
    dend_9 { pt3dadd( -30.9896, -9.46005, 31.7496, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_9 { pt3dadd( -31.7201, -9.8026, 32.9858, 0.45 ) }
    dend_9 { pt3dadd( -32.6663, -10.1302, 34.2696, 0.45 ) }
    dend_9 { pt3dadd( -33.933, -10.4172, 35.674, 0.45 ) }
    dend_9 { pt3dadd( -35.2034, -10.6095, 36.8671, 0.45 ) }
    dend_9 { pt3dadd( -36.0505, -10.7204, 37.5635, 0.45 ) }
    dend_9 { pt3dadd( -37.1666, -10.869, 38.3367, 0.45 ) }
    dend_9 { pt3dadd( -38.093, -10.9962, 38.9203, 0.45 ) }
    dend_9 { pt3dadd( -39.5764, -11.1842, 39.833, 0.45 ) }
    dend_9 { pt3dadd( -41.2451, -11.3772, 40.8559, 0.23 ) }
    dend_9 { pt3dadd( -42.163, -11.4912, 41.3987, 0.23 ) }
    dend_9 { pt3dadd( -44.2208, -11.7173, 42.5451, 0.23 ) }
    dend_9 { pt3dadd( -45.6539, -11.8403, 43.369, 0.23 ) }
    dend_9 { pt3dadd( -47.0099, -11.976, 44.1399, 0.23 ) }
    dend_9 { pt3dadd( -48.2469, -12.126, 44.8174, 0.23 ) }
    dend_9 { pt3dadd( -49.9238, -12.3115, 45.7446, 0.23 ) }
    dend_9 { pt3dadd( -51.7009, -12.4023, 46.7082, 0.23 ) }
    dend_9 { pt3dadd( -53.5008, -12.2939, 47.6989, 0.23 ) }
    // Section: dend_5, id: dend_5, parent: dend_1 (entry count 17/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -23.1763, 1.54615, -9.90269, 0.68 ) }
    dend_5 { pt3dadd( -23.7543, 1.61786, -10.5927, 0.68 ) }
    dend_5 { pt3dadd( -24.3035, 1.75943, -11.2494, 0.68 ) }
    dend_5 { pt3dadd( -24.99, 1.94146, -12.0288, 0.68 ) }
    dend_5 { pt3dadd( -26.1902, 2.19963, -13.1701, 0.68 ) }
    dend_5 { pt3dadd( -27.5572, 2.49119, -14.3555, 0.68 ) }
    dend_5 { pt3dadd( -29.1296, 2.90496, -15.5853, 0.68 ) }
    dend_5 { pt3dadd( -30.3594, 3.27933, -16.466, 0.68 ) }
    dend_5 { pt3dadd( -31.7393, 3.75714, -17.3744, 0.68 ) }
    dend_5 { pt3dadd( -33.5794, 4.42087, -18.527, 0.68 ) }
    dend_5 { pt3dadd( -34.8751, 4.88541, -19.2835, 0.68 ) }
    dend_5 { pt3dadd( -37.3476, 5.68686, -20.6266, 0.45 ) }
    dend_5 { pt3dadd( -39.2021, 6.26342, -21.6924, 0.45 ) }
    dend_5 { pt3dadd( -40.5797, 6.67459, -22.5719, 0.45 ) }
    dend_5 { pt3dadd( -42.1478, 7.13193, -23.7057, 0.45 ) }
    dend_5 { pt3dadd( -43.4308, 7.47158, -24.7681, 0.45 ) }
    dend_5 { pt3dadd( -44.367, 7.6445, -25.6088, 0.45 ) }
    dend_5 { pt3dadd( -46.1852, 7.82474, -27.3765, 0.45 ) }
    dend_5 { pt3dadd( -47.6999, 7.92156, -28.8687, 0.45 ) }
    dend_5 { pt3dadd( -49.1941, 7.99919, -30.2422, 0.45 ) }
    dend_5 { pt3dadd( -50.1329, 8.04589, -31.1117, 0.45 ) }
    dend_5 { pt3dadd( -51.4152, 8.09196, -32.3207, 0.45 ) }
    dend_5 { pt3dadd( -52.1407, 8.09923, -32.9556, 0.45 ) }
    dend_5 { pt3dadd( -53.1099, 8.08948, -33.6264, 0.45 ) }
    dend_5 { pt3dadd( -55.6211, 8.08642, -35.0766, 0.45 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 42/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -23.1763, 1.54615, -9.90269, 0.68 ) }
    dend_2 { pt3dadd( -24.563, 0.980777, -9.74959, 0.68 ) }
    dend_2 { pt3dadd( -26.0732, 0.328951, -9.63641, 0.68 ) }
    dend_2 { pt3dadd( -27.1548, -0.158512, -9.57489, 0.45 ) }
    dend_2 { pt3dadd( -28.3246, -0.689448, -9.522, 0.45 ) }
    dend_2 { pt3dadd( -29.3821, -1.16838, -9.47789, 0.45 ) }
    dend_2 { pt3dadd( -30.4707, -1.65253, -9.43795, 0.45 ) }
    dend_2 { pt3dadd( -31.7828, -2.24385, -9.40493, 0.45 ) }
    dend_2 { pt3dadd( -32.6922, -2.66929, -9.38428, 0.45 ) }
    dend_2 { pt3dadd( -33.6265, -3.11517, -9.36579, 0.45 ) }
    dend_2 { pt3dadd( -35.1, -3.84611, -9.31916, 0.45 ) }
    dend_2 { pt3dadd( -36.1586, -4.38977, -9.28363, 0.45 ) }
    dend_2 { pt3dadd( -37.2062, -4.9436, -9.26081, 0.45 ) }
    dend_2 { pt3dadd( -38.5328, -5.65471, -9.25009, 0.45 ) }
    dend_2 { pt3dadd( -39.7089, -6.298, -9.26799, 0.45 ) }
    dend_2 { pt3dadd( -40.3766, -6.67449, -9.29039, 0.45 ) }
    dend_2 { pt3dadd( -41.2678, -7.18685, -9.33812, 0.45 ) }
    dend_2 { pt3dadd( -41.818, -7.49553, -9.37495, 0.45 ) }
    dend_2 { pt3dadd( -42.9256, -8.09831, -9.47282, 0.45 ) }
    dend_2 { pt3dadd( -43.9605, -8.67647, -9.57266, 0.45 ) }
    dend_2 { pt3dadd( -45.1669, -9.32621, -9.6909, 0.45 ) }
    dend_2 { pt3dadd( -46.0827, -9.75312, -9.7739, 0.45 ) }
    dend_2 { pt3dadd( -47.202, -10.1952, -9.85995, 0.45 ) }
    dend_2 { pt3dadd( -48.3322, -10.6073, -9.94767, 0.45 ) }
    dend_2 { pt3dadd( -49.0678, -10.8613, -10.0091, 0.45 ) }
    dend_2 { pt3dadd( -50.1658, -11.22, -10.1076, 0.45 ) }
    dend_2 { pt3dadd( -51.705, -11.6883, -10.2415, 0.45 ) }
    dend_2 { pt3dadd( -52.8444, -12.0307, -10.3282, 0.45 ) }
    dend_2 { pt3dadd( -53.756, -12.3274, -10.38, 0.45 ) }
    dend_2 { pt3dadd( -54.9386, -12.7526, -10.4247, 0.45 ) }
    dend_2 { pt3dadd( -55.5406, -12.9898, -10.4364, 0.45 ) }
    dend_2 { pt3dadd( -56.6888, -13.5258, -10.4648, 0.45 ) }
    dend_2 { pt3dadd( -58.1565, -14.314, -10.5524, 0.45 ) }
    dend_2 { pt3dadd( -59.356, -14.9932, -10.6701, 0.45 ) }
    dend_2 { pt3dadd( -60.7725, -15.797, -10.8525, 0.45 ) }
    dend_2 { pt3dadd( -62.6763, -16.8883, -11.1607, 0.23 ) }
    dend_2 { pt3dadd( -64.2102, -17.7419, -11.4204, 0.23 ) }
    dend_2 { pt3dadd( -65.9879, -18.6813, -11.7411, 0.23 ) }
    dend_2 { pt3dadd( -67.4368, -19.4101, -12.0012, 0.23 ) }
    dend_2 { pt3dadd( -69.0203, -20.144, -12.2958, 0.23 ) }
    dend_2 { pt3dadd( -70.8139, -20.9047, -12.6326, 0.23 ) }
    dend_2 { pt3dadd( -73.2037, -21.8461, -13.0681, 0.23 ) }
    dend_2 { pt3dadd( -74.8555, -22.4163, -13.3433, 0.23 ) }
    dend_2 { pt3dadd( -76.5363, -22.9273, -13.5988, 0.23 ) }
    dend_2 { pt3dadd( -77.8712, -23.3092, -13.8031, 0.23 ) }
    dend_2 { pt3dadd( -79.5114, -23.755, -14.0847, 0.23 ) }
    dend_2 { pt3dadd( -80.6226, -24.0364, -14.3151, 0.23 ) }
    dend_2 { pt3dadd( -81.6173, -24.2741, -14.5854, 0.23 ) }
    dend_2 { pt3dadd( -82.3772, -24.4352, -14.8275, 0.23 ) }
    dend_2 { pt3dadd( -83.3933, -24.6395, -15.206, 0.23 ) }
    dend_2 { pt3dadd( -84.1352, -24.8049, -15.4957, 0.23 ) }
    dend_2 { pt3dadd( -85.0355, -25.0122, -15.8633, 0.23 ) }
    dend_2 { pt3dadd( -85.9306, -25.2169, -16.2186, 0.23 ) }
    dend_2 { pt3dadd( -86.4586, -25.3576, -16.4165, 0.23 ) }
    dend_2 { pt3dadd( -87.4869, -25.6666, -16.7717, 0.23 ) }
    dend_2 { pt3dadd( -88.4529, -25.9726, -17.0556, 0.23 ) }
    dend_2 { pt3dadd( -90.0424, -26.5535, -17.4597, 0.23 ) }
    dend_2 { pt3dadd( -90.9452, -26.9161, -17.6655, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_2 { pt3dadd( -92.1641, -27.4454, -17.9099, 0.23 ) }
    dend_2 { pt3dadd( -93.0675, -27.8568, -18.0796, 0.23 ) }
    dend_2 { pt3dadd( -94.0101, -28.2831, -18.25, 0.23 ) }
    dend_2 { pt3dadd( -95.065, -28.7323, -18.4373, 0.23 ) }
    dend_2 { pt3dadd( -96.7212, -29.421, -18.7246, 0.23 ) }
    dend_2 { pt3dadd( -97.7687, -29.8323, -18.9085, 0.23 ) }
    dend_2 { pt3dadd( -98.7537, -30.1814, -19.0636, 0.23 ) }
    dend_2 { pt3dadd( -99.6701, -30.4899, -19.1983, 0.23 ) }
    dend_2 { pt3dadd( -101.999, -31.236, -19.5441, 0.23 ) }
    dend_2 { pt3dadd( -102.901, -31.5115, -19.667, 0.23 ) }
    dend_2 { pt3dadd( -104.432, -31.991, -19.8784, 0.23 ) }
    dend_2 { pt3dadd( -105.225, -32.2388, -19.9957, 0.23 ) }
    dend_2 { pt3dadd( -105.721, -32.3992, -20.0663, 0.23 ) }
    dend_2 { pt3dadd( -106.887, -32.8212, -20.2186, 0.23 ) }
    dend_2 { pt3dadd( -107.81, -33.1992, -20.3338, 0.23 ) }
    dend_2 { pt3dadd( -108.714, -33.5829, -20.443, 0.23 ) }
    dend_2 { pt3dadd( -109.294, -33.8414, -20.5174, 0.23 ) }
    dend_2 { pt3dadd( -110.44, -34.3784, -20.6727, 0.23 ) }
    dend_2 { pt3dadd( -111.336, -34.8144, -20.769, 0.23 ) }
    dend_2 { pt3dadd( -112.09, -35.1789, -20.8245, 0.23 ) }
    dend_2 { pt3dadd( -112.678, -35.4519, -20.8611, 0.23 ) }
    dend_2 { pt3dadd( -114.271, -36.1882, -20.9299, 0.23 ) }
    dend_2 { pt3dadd( -115.074, -36.5646, -20.9527, 0.23 ) }
    dend_2 { pt3dadd( -116.552, -37.2557, -20.9695, 0.23 ) }
    dend_2 { pt3dadd( -118.05, -37.9524, -20.9559, 0.23 ) }
    dend_2 { pt3dadd( -119.136, -38.4302, -20.9221, 0.23 ) }
    dend_2 { pt3dadd( -119.944, -38.7764, -20.8859, 0.23 ) }
    dend_2 { pt3dadd( -121.447, -39.3798, -20.755, 0.23 ) }
    dend_2 { pt3dadd( -123.091, -39.9803, -20.5573, 0.23 ) }
    dend_2 { pt3dadd( -124.388, -40.4055, -20.3483, 0.23 ) }
    dend_2 { pt3dadd( -125.902, -40.8645, -20.0446, 0.23 ) }
    dend_2 { pt3dadd( -127.815, -41.403, -19.5775, 0.23 ) }
    dend_2 { pt3dadd( -129.626, -41.882, -19.0657, 0.23 ) }
    dend_2 { pt3dadd( -130.596, -42.1488, -18.7648, 0.23 ) }
    dend_2 { pt3dadd( -132.051, -42.5928, -18.2765, 0.23 ) }
    dend_2 { pt3dadd( -133.025, -42.9273, -17.9427, 0.23 ) }
    dend_2 { pt3dadd( -134.468, -43.481, -17.4504, 0.23 ) }
    dend_2 { pt3dadd( -136.027, -44.1263, -16.9366, 0.23 ) }
    dend_2 { pt3dadd( -138.74, -45.3495, -16.2041, 0.23 ) }
    dend_2 { pt3dadd( -140.424, -46.1586, -15.8337, 0.23 ) }
    dend_2 { pt3dadd( -142.201, -47.0737, -15.5427, 0.23 ) }
    dend_2 { pt3dadd( -143.437, -47.7359, -15.4081, 0.23 ) }
    dend_2 { pt3dadd( -144.998, -48.5818, -15.3295, 0.23 ) }
    dend_2 { pt3dadd( -146.725, -49.5338, -15.3407, 0.23 ) }
    dend_2 { pt3dadd( -147.545, -49.9837, -15.3999, 0.23 ) }
    dend_2 { pt3dadd( -149.001, -50.8355, -15.5889, 0.23 ) }
    dend_2 { pt3dadd( -149.864, -51.3933, -15.7488, 0.23 ) }
    dend_2 { pt3dadd( -150.515, -51.8695, -15.8927, 0.23 ) }
    dend_2 { pt3dadd( -151.397, -52.6075, -16.0868, 0.23 ) }
    dend_2 { pt3dadd( -151.974, -53.1475, -16.1891, 0.23 ) }
    dend_2 { pt3dadd( -153.182, -54.3194, -16.3869, 0.23 ) }
    dend_2 { pt3dadd( -154.277, -55.4416, -16.5601, 0.23 ) }
    dend_2 { pt3dadd( -154.961, -56.2072, -16.6615, 0.23 ) }
    dend_2 { pt3dadd( -156.506, -58.1081, -16.8999, 0.23 ) }
    dend_2 { pt3dadd( -157.393, -59.2833, -17.0411, 0.23 ) }
    dend_2 { pt3dadd( -158.136, -60.3131, -17.1695, 0.23 ) }
    dend_2 { pt3dadd( -158.955, -61.4948, -17.3301, 0.23 ) }
    dend_2 { pt3dadd( -159.832, -62.8557, -17.5225, 0.23 ) }
    dend_2 { pt3dadd( -160.554, -63.9933, -17.7122, 0.23 ) }
    dend_2 { pt3dadd( -161.175, -64.9747, -17.8992, 0.23 ) }
    dend_2 { pt3dadd( -162.019, -66.2281, -18.1705, 0.23 ) }
    dend_2 { pt3dadd( -162.775, -67.2647, -18.4378, 0.23 ) }
    dend_2 { pt3dadd( -163.218, -67.7942, -18.601, 0.23 ) }
    dend_2 { pt3dadd( -164.349, -68.9451, -19.0076, 0.23 ) }
    dend_2 { pt3dadd( -165.712, -70.1929, -19.4649, 0.23 ) }
    dend_2 { pt3dadd( -166.532, -70.8953, -19.707, 0.23 ) }
    dend_2 { pt3dadd( -167.983, -72.0574, -20.0366, 0.23 ) }
    dend_2 { pt3dadd( -169.136, -72.97, -20.2375, 0.23 ) }
    dend_2 { pt3dadd( -169.939, -73.6521, -20.3456, 0.23 ) }
    dend_2 { pt3dadd( -170.816, -74.489, -20.4314, 0.23 ) }
    dend_2 { pt3dadd( -171.807, -75.5731, -20.5029, 0.23 ) }
    dend_2 { pt3dadd( -173.678, -77.8598, -20.5686, 0.23 ) }
    dend_2 { pt3dadd( -174.603, -79.0891, -20.5745, 0.23 ) }
    dend_2 { pt3dadd( -175.394, -80.2609, -20.5665, 0.23 ) }
    dend_2 { pt3dadd( -176.131, -81.5503, -20.5424, 0.23 ) }
    dend_2 { pt3dadd( -176.789, -82.9295, -20.5178, 0.23 ) }
    dend_2 { pt3dadd( -177.282, -84.2468, -20.4995, 0.23 ) }
    dend_2 { pt3dadd( -177.584, -85.3917, -20.4765, 0.23 ) }
    dend_2 { pt3dadd( -177.897, -86.7148, -20.4398, 0.23 ) }
    dend_2 { pt3dadd( -178.346, -88.8089, -20.3569, 0.23 ) }
    dend_2 { pt3dadd( -178.528, -89.8653, -20.2931, 0.23 ) }
    dend_2 { pt3dadd( -178.667, -91.0214, -20.1891, 0.23 ) }
    dend_2 { pt3dadd( -178.686, -91.6316, -20.1318, 0.23 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 83/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 35.6263, -10.2095, 0.0, 0.23 ) }
    axon_1 { pt3dadd( 50.0974, -14.1578, 0.0, 0.23 ) }
    axon_1 { pt3dadd( 64.5684, -18.1061, 0.0, 0.23 ) }
    // Section: dend_25, id: dend_25, parent: dend_19 (entry count 86/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 12.571, 4.15375, -4.22798, 0.68 ) }
    dend_25 { pt3dadd( 13.75, 7.32082, -3.83092, 0.68 ) }
    dend_25 { pt3dadd( 14.3553, 8.94685, -3.62707, 0.68 ) }
    dend_25 { pt3dadd( 15.0034, 10.6877, -3.4088, 0.68 ) }
    // Section: dend_20, id: dend_20, parent: dend_19 (entry count 90/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 12.571, 4.15375, -4.22798, 0.68 ) }
    dend_20 { pt3dadd( 13.6048, 3.64141, -4.62703, 0.68 ) }
    dend_20 { pt3dadd( 14.9446, 3.03047, -5.14438, 0.68 ) }
    dend_20 { pt3dadd( 16.5951, 2.35903, -5.74347, 0.68 ) }
    dend_20 { pt3dadd( 18.1297, 1.72655, -6.29148, 0.68 ) }
    dend_20 { pt3dadd( 19.6885, 1.05148, -6.8279, 0.68 ) }
    dend_20 { pt3dadd( 21.3193, 0.296842, -7.38741, 0.68 ) }
    dend_20 { pt3dadd( 23.2308, -0.59138, -8.0522, 0.68 ) }
    dend_20 { pt3dadd( 24.9347, -1.39686, -8.65697, 0.68 ) }
    dend_20 { pt3dadd( 26.8572, -2.30331, -9.34179, 0.68 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_20 { pt3dadd( 28.6869, -3.15948, -9.93906, 0.68 ) }
    dend_20 { pt3dadd( 29.929, -3.75337, -10.273, 0.68 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 2/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -55.6211, 8.08642, -35.0766, 0.45 ) }
    dend_7 { pt3dadd( -56.4593, 8.42133, -35.4406, 0.45 ) }
    dend_7 { pt3dadd( -57.1696, 8.70553, -35.7495, 0.45 ) }
    dend_7 { pt3dadd( -57.9841, 9.04336, -36.1186, 0.45 ) }
    dend_7 { pt3dadd( -59.2671, 9.60868, -36.7344, 0.45 ) }
    dend_7 { pt3dadd( -60.4855, 10.1556, -37.3167, 0.45 ) }
    dend_7 { pt3dadd( -61.3682, 10.5473, -37.7273, 0.45 ) }
    dend_7 { pt3dadd( -62.3346, 10.9738, -38.1817, 0.45 ) }
    dend_7 { pt3dadd( -63.0216, 11.303, -38.4972, 0.45 ) }
    dend_7 { pt3dadd( -64.0627, 11.8284, -38.9745, 0.45 ) }
    dend_7 { pt3dadd( -65.0268, 12.3088, -39.4001, 0.45 ) }
    dend_7 { pt3dadd( -65.6702, 12.6071, -39.6538, 0.45 ) }
    dend_7 { pt3dadd( -66.7387, 13.0484, -40.0153, 0.45 ) }
    dend_7 { pt3dadd( -67.9363, 13.5332, -40.4074, 0.45 ) }
    dend_7 { pt3dadd( -68.9976, 13.9528, -40.709, 0.45 ) }
    dend_7 { pt3dadd( -69.893, 14.2948, -40.9614, 0.45 ) }
    dend_7 { pt3dadd( -70.7473, 14.6166, -41.2015, 0.45 ) }
    dend_7 { pt3dadd( -72.4497, 15.2653, -41.6542, 0.45 ) }
    dend_7 { pt3dadd( -73.9971, 15.8505, -42.0792, 0.45 ) }
    dend_7 { pt3dadd( -75.0872, 16.2572, -42.4178, 0.45 ) }
    dend_7 { pt3dadd( -76.1458, 16.6483, -42.7921, 0.45 ) }
    dend_7 { pt3dadd( -78.2165, 17.3908, -43.4955, 0.45 ) }
    dend_7 { pt3dadd( -80.0269, 18.0022, -44.0977, 0.23 ) }
    dend_7 { pt3dadd( -81.7821, 18.5581, -44.6654, 0.23 ) }
    dend_7 { pt3dadd( -83.2387, 18.9609, -45.1023, 0.23 ) }
    dend_7 { pt3dadd( -84.2106, 19.2055, -45.4037, 0.23 ) }
    dend_7 { pt3dadd( -86.2205, 19.7059, -45.9984, 0.23 ) }
    dend_7 { pt3dadd( -87.7294, 20.0373, -46.4453, 0.23 ) }
    dend_7 { pt3dadd( -89.0732, 20.2876, -46.8076, 0.23 ) }
    dend_7 { pt3dadd( -90.3837, 20.539, -47.1168, 0.23 ) }
    dend_7 { pt3dadd( -92.1678, 20.9163, -47.5123, 0.23 ) }
    dend_7 { pt3dadd( -93.4291, 21.1988, -47.8316, 0.23 ) }
    dend_7 { pt3dadd( -94.6152, 21.4438, -48.2175, 0.23 ) }
    dend_7 { pt3dadd( -96.2102, 21.7099, -48.7703, 0.23 ) }
    dend_7 { pt3dadd( -96.9005, 21.8052, -49.0146, 0.23 ) }
    dend_7 { pt3dadd( -97.9839, 21.9064, -49.4129, 0.23 ) }
    dend_7 { pt3dadd( -99.4762, 21.9819, -49.9857, 0.23 ) }
    dend_7 { pt3dadd( -101.306, 22.0111, -50.8073, 0.23 ) }
    dend_7 { pt3dadd( -103.05, 22.0261, -51.7654, 0.23 ) }
    dend_7 { pt3dadd( -104.657, 22.0018, -52.7984, 0.23 ) }
    dend_7 { pt3dadd( -106.212, 21.9464, -53.8234, 0.23 ) }
    dend_7 { pt3dadd( -107.328, 21.8934, -54.5969, 0.23 ) }
    dend_7 { pt3dadd( -109.833, 21.7684, -56.4202, 0.23 ) }
    dend_7 { pt3dadd( -111.96, 21.6832, -58.1096, 0.23 ) }
    dend_7 { pt3dadd( -113.528, 21.6293, -59.5075, 0.23 ) }
    dend_7 { pt3dadd( -121.004, 23.4743, -62.5077, 0.23 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 48/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -55.6211, 8.08642, -35.0766, 0.23 ) }
    dend_6 { pt3dadd( -57.3432, 7.05091, -35.4935, 0.23 ) }
    dend_6 { pt3dadd( -59.2089, 5.9657, -35.9478, 0.23 ) }
    dend_6 { pt3dadd( -61.5546, 4.66025, -36.5769, 0.23 ) }
    dend_6 { pt3dadd( -63.5662, 3.54379, -37.1483, 0.23 ) }
    dend_6 { pt3dadd( -64.9449, 2.77715, -37.5686, 0.23 ) }
    dend_6 { pt3dadd( -66.7085, 1.79178, -38.1487, 0.23 ) }
    dend_6 { pt3dadd( -68.6627, 0.729942, -38.8526, 0.23 ) }
    dend_6 { pt3dadd( -70.1471, -0.0765803, -39.4942, 0.23 ) }
    dend_6 { pt3dadd( -71.505, -0.761836, -40.1613, 0.23 ) }
    dend_6 { pt3dadd( -72.822, -1.3638, -40.8472, 0.23 ) }
    dend_6 { pt3dadd( -74.1668, -1.97103, -41.5851, 0.23 ) }
    dend_6 { pt3dadd( -75.6905, -2.66473, -42.4274, 0.23 ) }
    dend_6 { pt3dadd( -77.2589, -3.38636, -43.2731, 0.23 ) }
    dend_6 { pt3dadd( -78.7149, -4.05285, -44.0227, 0.23 ) }
    dend_6 { pt3dadd( -80.9084, -4.96641, -45.004, 0.23 ) }
    dend_6 { pt3dadd( -82.9873, -5.7463, -45.8401, 0.23 ) }
    dend_6 { pt3dadd( -85.9138, -6.63821, -46.8698, 0.23 ) }
    dend_6 { pt3dadd( -87.5251, -7.01252, -47.3591, 0.23 ) }
    dend_6 { pt3dadd( -89.0282, -7.33459, -47.7608, 0.23 ) }
    dend_6 { pt3dadd( -91.4302, -7.78637, -48.3706, 0.23 ) }
    dend_6 { pt3dadd( -92.8714, -7.92638, -48.6755, 0.23 ) }
    dend_6 { pt3dadd( -95.197, -7.77407, -49.0115, 0.23 ) }
    dend_6 { pt3dadd( -96.9115, -7.27198, -49.1751, 0.23 ) }
    dend_6 { pt3dadd( -109.322, -9.36505, -51.4044, 0.23 ) }
    dend_6 { pt3dadd( -121.299, -10.7705, -55.6751, 0.23 ) }
    dend_6 { pt3dadd( -132.918, -10.6328, -61.0473, 0.23 ) }
    dend_6 { pt3dadd( -145.423, -12.2653, -63.1682, 0.23 ) }
    dend_6 { pt3dadd( -158.11, -12.2204, -64.8787, 0.23 ) }
    // Section: dend_4, id: dend_4, parent: dend_2 (entry count 77/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -178.686, -91.6316, -20.1318, 0.23 ) }
    dend_4 { pt3dadd( -179.729, -94.9245, -18.8815, 0.23 ) }
    dend_4 { pt3dadd( -180.41, -97.0779, -18.0639, 0.23 ) }
    dend_4 { pt3dadd( -181.429, -100.295, -16.8422, 0.23 ) }
    dend_4 { pt3dadd( -182.713, -104.353, -15.3015, 0.23 ) }
    dend_4 { pt3dadd( -184.247, -117.422, -11.3304, 0.23 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 83/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -178.686, -91.6316, -20.1318, 0.23 ) }
    dend_3 { pt3dadd( -178.503, -93.5925, -19.0998, 0.23 ) }
    dend_3 { pt3dadd( -178.316, -95.4801, -18.1434, 0.23 ) }
    dend_3 { pt3dadd( -178.231, -96.5063, -17.6364, 0.23 ) }
    dend_3 { pt3dadd( -178.095, -97.9247, -16.9365, 0.23 ) }
    dend_3 { pt3dadd( -177.966, -99.1196, -16.37, 0.23 ) }
    dend_3 { pt3dadd( -177.785, -101.239, -15.4461, 0.23 ) }
    dend_3 { pt3dadd( -177.715, -102.439, -14.9896, 0.23 ) }
    dend_3 { pt3dadd( -177.657, -103.954, -14.5098, 0.23 ) }
    dend_3 { pt3dadd( -177.695, -106.204, -13.9683, 0.23 ) }
    dend_3 { pt3dadd( -177.733, -107.373, -13.7326, 0.23 ) }
    dend_3 { pt3dadd( -177.871, -109.535, -13.3872, 0.23 ) }
    dend_3 { pt3dadd( -177.957, -110.474, -13.2868, 0.23 ) }
    dend_3 { pt3dadd( -178.134, -111.718, -13.225, 0.23 ) }
    dend_3 { pt3dadd( -178.533, -113.708, -13.3113, 0.23 ) }
    dend_3 { pt3dadd( -177.641, -120.726, -9.90299, 0.23 ) }
    // Section: dend_27, id: dend_27, parent: dend_25 (entry count 99/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( 15.0034, 10.6877, -3.4088, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_27 { pt3dadd( 15.9638, 12.2805, -3.49417, 0.45 ) }
    dend_27 { pt3dadd( 16.9081, 13.8467, -3.5781, 0.45 ) }
    dend_27 { pt3dadd( 18.018, 15.6876, -3.67676, 0.45 ) }
    dend_27 { pt3dadd( 18.7802, 16.9518, -3.74452, 0.45 ) }
    dend_27 { pt3dadd( 19.8321, 18.6963, -3.83801, 0.45 ) }
    // Section: dend_26, id: dend_26, parent: dend_25 (entry count 5/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 15.0034, 10.6877, -3.4088, 0.45 ) }
    dend_26 { pt3dadd( 14.3112, 11.4171, -2.67867, 0.45 ) }
    dend_26 { pt3dadd( 13.3053, 12.3648, -1.6025, 0.45 ) }
    dend_26 { pt3dadd( 12.4459, 13.1392, -0.680628, 0.45 ) }
    dend_26 { pt3dadd( 11.3932, 14.1455, 0.510266, 0.45 ) }
    dend_26 { pt3dadd( 10.7309, 14.8153, 1.3272, 0.45 ) }
    dend_26 { pt3dadd( 10.1084, 15.4817, 2.17633, 0.45 ) }
    dend_26 { pt3dadd( 9.72357, 15.8848, 2.76095, 0.45 ) }
    dend_26 { pt3dadd( 9.23996, 16.4066, 3.56056, 0.45 ) }
    dend_26 { pt3dadd( 8.63643, 17.1272, 4.66176, 0.45 ) }
    dend_26 { pt3dadd( 8.12481, 17.7883, 5.70013, 0.45 ) }
    dend_26 { pt3dadd( 7.57837, 18.6264, 7.00318, 0.45 ) }
    dend_26 { pt3dadd( 7.32633, 19.0893, 7.63823, 0.45 ) }
    dend_26 { pt3dadd( 7.00524, 19.8291, 8.50216, 0.45 ) }
    dend_26 { pt3dadd( 6.75639, 20.6251, 9.30123, 0.45 ) }
    dend_26 { pt3dadd( 6.5929, 21.4614, 9.97181, 0.45 ) }
    dend_26 { pt3dadd( 6.48697, 22.5737, 10.641, 0.45 ) }
    dend_26 { pt3dadd( 6.434, 24.5073, 11.5522, 0.45 ) }
    dend_26 { pt3dadd( 6.46163, 26.7556, 12.414, 0.45 ) }
    dend_26 { pt3dadd( 6.51448, 28.6234, 12.9843, 0.45 ) }
    dend_26 { pt3dadd( 6.59552, 30.5444, 13.4287, 0.45 ) }
    dend_26 { pt3dadd( 6.7316, 32.484, 13.7869, 0.45 ) }
    dend_26 { pt3dadd( 6.93901, 34.3251, 14.0707, 0.45 ) }
    dend_26 { pt3dadd( 7.22662, 36.197, 14.3253, 0.45 ) }
    dend_26 { pt3dadd( 7.64423, 38.3895, 14.5891, 0.45 ) }
    dend_26 { pt3dadd( 8.23285, 41.0449, 14.8927, 0.45 ) }
    dend_26 { pt3dadd( 8.80987, 43.4333, 15.1872, 0.45 ) }
    dend_26 { pt3dadd( 9.63857, 46.4266, 15.5472, 0.45 ) }
    dend_26 { pt3dadd( 10.4272, 49.0224, 15.8422, 0.45 ) }
    dend_26 { pt3dadd( 11.2511, 51.6185, 16.1322, 0.45 ) }
    dend_26 { pt3dadd( 11.7876, 53.2524, 16.3056, 0.45 ) }
    dend_26 { pt3dadd( 12.5293, 55.5765, 16.5197, 0.45 ) }
    dend_26 { pt3dadd( 13.1389, 57.7118, 16.6879, 0.45 ) }
    dend_26 { pt3dadd( 13.6472, 59.801, 16.8297, 0.45 ) }
    dend_26 { pt3dadd( 13.9254, 61.1864, 16.9099, 0.45 ) }
    dend_26 { pt3dadd( 14.219, 62.9191, 17.0076, 0.45 ) }
    dend_26 { pt3dadd( 14.5189, 64.8801, 17.1025, 0.45 ) }
    dend_26 { pt3dadd( 14.942, 67.8344, 17.2181, 0.45 ) }
    dend_26 { pt3dadd( 15.2758, 70.3134, 17.2922, 0.45 ) }
    dend_26 { pt3dadd( 15.5273, 72.0648, 17.3272, 0.45 ) }
    dend_26 { pt3dadd( 15.8704, 74.3261, 17.3915, 0.45 ) }
    dend_26 { pt3dadd( 16.2806, 76.813, 17.4831, 0.23 ) }
    dend_26 { pt3dadd( 16.6201, 78.7712, 17.555, 0.23 ) }
    dend_26 { pt3dadd( 16.9497, 80.4424, 17.5929, 0.23 ) }
    dend_26 { pt3dadd( 17.1642, 81.511, 17.6038, 0.23 ) }
    dend_26 { pt3dadd( 17.701, 84.1239, 17.6125, 0.23 ) }
    dend_26 { pt3dadd( 18.1148, 86.4218, 17.6122, 0.23 ) }
    dend_26 { pt3dadd( 18.4606, 88.7553, 17.6517, 0.23 ) }
    dend_26 { pt3dadd( 18.6691, 90.898, 17.7322, 0.23 ) }
    dend_26 { pt3dadd( 18.7125, 92.4384, 17.8217, 0.23 ) }
    dend_26 { pt3dadd( 18.707, 93.8287, 17.9223, 0.23 ) }
    dend_26 { pt3dadd( 18.6743, 94.8694, 18.0271, 0.23 ) }
    dend_26 { pt3dadd( 18.5535, 96.5438, 18.2722, 0.23 ) }
    dend_26 { pt3dadd( 18.4447, 97.5363, 18.4667, 0.23 ) }
    dend_26 { pt3dadd( 17.9953, 100.169, 19.0821, 0.23 ) }
    dend_26 { pt3dadd( 17.5794, 102.042, 19.5435, 0.23 ) }
    dend_26 { pt3dadd( 17.0406, 103.775, 20.0068, 0.23 ) }
    dend_26 { pt3dadd( 16.1919, 105.893, 20.6211, 0.23 ) }
    dend_26 { pt3dadd( 15.3109, 107.664, 21.1814, 0.23 ) }
    dend_26 { pt3dadd( 13.6728, 110.409, 22.1327, 0.23 ) }
    dend_26 { pt3dadd( 12.8119, 111.613, 22.594, 0.23 ) }
    dend_26 { pt3dadd( 11.0874, 113.726, 23.4529, 0.23 ) }
    dend_26 { pt3dadd( 9.73026, 115.35, 24.1326, 0.23 ) }
    dend_26 { pt3dadd( 8.68346, 116.628, 24.6592, 0.45 ) }
    dend_26 { pt3dadd( 6.90378, 118.901, 25.5171, 0.23 ) }
    dend_26 { pt3dadd( 6.10306, 119.973, 25.8796, 0.23 ) }
    dend_26 { pt3dadd( 4.88609, 121.713, 26.3923, 0.23 ) }
    dend_26 { pt3dadd( 3.05091, 124.535, 27.049, 0.23 ) }
    dend_26 { pt3dadd( 2.12367, 125.974, 27.3415, 0.23 ) }
    dend_26 { pt3dadd( 1.16793, 127.319, 27.5982, 0.23 ) }
    dend_26 { pt3dadd( -0.237119, 129.061, 27.9364, 0.23 ) }
    dend_26 { pt3dadd( -1.27176, 130.226, 28.1455, 0.23 ) }
    dend_26 { pt3dadd( -2.30347, 131.251, 28.3263, 0.23 ) }
    dend_26 { pt3dadd( -4.71387, 133.269, 28.6856, 0.23 ) }
    dend_26 { pt3dadd( -6.87767, 134.917, 29.0001, 0.23 ) }
    dend_26 { pt3dadd( -8.20983, 135.88, 29.1838, 0.23 ) }
    dend_26 { pt3dadd( -9.36337, 136.707, 29.2979, 0.23 ) }
    dend_26 { pt3dadd( -10.8932, 137.89, 29.3737, 0.23 ) }
    dend_26 { pt3dadd( -11.4652, 138.399, 29.3423, 0.23 ) }
    dend_26 { pt3dadd( -11.8591, 138.849, 29.2687, 0.23 ) }
    dend_26 { pt3dadd( -12.4584, 139.812, 29.132, 0.23 ) }
    dend_26 { pt3dadd( -13.2375, 141.396, 29.0163, 0.23 ) }
    dend_26 { pt3dadd( -13.9785, 143.295, 28.9981, 0.23 ) }
    dend_26 { pt3dadd( -14.5543, 145.2, 29.0664, 0.23 ) }
    dend_26 { pt3dadd( -15.2194, 147.783, 29.2526, 0.23 ) }
    dend_26 { pt3dadd( -15.8207, 150.24, 29.5265, 0.23 ) }
    dend_26 { pt3dadd( -16.45, 152.907, 29.8788, 0.23 ) }
    dend_26 { pt3dadd( -16.9502, 155.262, 30.2596, 0.23 ) }
    dend_26 { pt3dadd( -17.4293, 158.114, 30.7799, 0.23 ) }
    dend_26 { pt3dadd( -17.6167, 159.715, 31.1111, 0.23 ) }
    dend_26 { pt3dadd( -17.7373, 162.145, 31.5969, 0.23 ) }
    dend_26 { pt3dadd( -20.6934, 170.256, 35.1525, 0.23 ) }
    // Section: dend_24, id: dend_24, parent: dend_20 (entry count 97/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 29.929, -3.75337, -10.273, 0.45 ) }
    dend_24 { pt3dadd( 30.0641, -3.9948, -11.4871, 0.45 ) }
    dend_24 { pt3dadd( 30.2839, -4.31509, -12.7626, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_9()
}

proc basic_shape_9() {
    dend_24 { pt3dadd( 30.606, -4.58573, -13.8834, 0.45 ) }
    dend_24 { pt3dadd( 30.9249, -4.78451, -14.7483, 0.45 ) }
    dend_24 { pt3dadd( 31.0911, -4.86274, -15.133, 0.45 ) }
    dend_24 { pt3dadd( 31.3887, -4.99748, -15.8478, 0.45 ) }
    dend_24 { pt3dadd( 31.8547, -5.1459, -16.8611, 0.45 ) }
    dend_24 { pt3dadd( 32.5017, -5.25464, -18.2694, 0.45 ) }
    dend_24 { pt3dadd( 32.957, -5.23091, -19.3613, 0.45 ) }
    dend_24 { pt3dadd( 33.4559, -5.1066, -20.6195, 0.45 ) }
    dend_24 { pt3dadd( 33.901, -4.95346, -21.7781, 0.45 ) }
    dend_24 { pt3dadd( 34.4858, -4.7401, -23.2764, 0.45 ) }
    dend_24 { pt3dadd( 35.1366, -4.51542, -24.9311, 0.45 ) }
    dend_24 { pt3dadd( 36.2364, -4.20965, -27.6191, 0.23 ) }
    dend_24 { pt3dadd( 36.8658, -4.08995, -29.002, 0.23 ) }
    dend_24 { pt3dadd( 37.8571, -3.98145, -30.8866, 0.23 ) }
    dend_24 { pt3dadd( 38.9797, -3.92533, -32.667, 0.23 ) }
    dend_24 { pt3dadd( 39.3141, -3.93489, -33.1296, 0.23 ) }
    dend_24 { pt3dadd( 40.3883, -4.01266, -34.5104, 0.23 ) }
    dend_24 { pt3dadd( 41.7894, -4.17727, -36.2743, 0.23 ) }
    dend_24 { pt3dadd( 43.3865, -4.3686, -38.2605, 0.23 ) }
    dend_24 { pt3dadd( 44.2305, -4.45097, -39.3036, 0.23 ) }
    dend_24 { pt3dadd( 45.7925, -4.55545, -41.2443, 0.23 ) }
    dend_24 { pt3dadd( 47.1483, -4.61696, -42.9645, 0.23 ) }
    dend_24 { pt3dadd( 48.4785, -4.67505, -44.7114, 0.23 ) }
    dend_24 { pt3dadd( 51.0591, -5.78253, -51.9084, 0.23 ) }
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 24/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 29.929, -3.75337, -10.273, 0.45 ) }
    dend_21 { pt3dadd( 31.0393, -4.43846, -10.6091, 0.45 ) }
    dend_21 { pt3dadd( 31.5355, -4.76804, -10.7598, 0.45 ) }
    dend_21 { pt3dadd( 32.4764, -5.39186, -11.042, 0.68 ) }
    dend_21 { pt3dadd( 33.4426, -6.02728, -11.333, 0.45 ) }
    dend_21 { pt3dadd( 34.4082, -6.6693, -11.6585, 0.45 ) }
    dend_21 { pt3dadd( 35.2405, -7.20401, -11.9565, 0.45 ) }
    dend_21 { pt3dadd( 36.1178, -7.76271, -12.301, 0.45 ) }
    dend_21 { pt3dadd( 36.982, -8.30167, -12.6362, 0.45 ) }
    dend_21 { pt3dadd( 37.5583, -8.66198, -12.8557, 0.45 ) }
    dend_21 { pt3dadd( 38.4212, -9.21533, -13.2109, 0.45 ) }
    dend_21 { pt3dadd( 39.8062, -10.0618, -13.8158, 0.45 ) }
    // Section: dend_29, id: dend_29, parent: dend_27 (entry count 36/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 19.8321, 18.6963, -3.83801, 0.45 ) }
    dend_29 { pt3dadd( 20.0792, 20.2285, -4.10629, 0.45 ) }
    dend_29 { pt3dadd( 20.5766, 23.1451, -4.4737, 0.45 ) }
    dend_29 { pt3dadd( 21.0393, 25.3792, -4.62082, 0.45 ) }
    dend_29 { pt3dadd( 21.593, 27.9202, -4.70253, 0.45 ) }
    dend_29 { pt3dadd( 22.2082, 30.4265, -4.73531, 0.45 ) }
    dend_29 { pt3dadd( 22.6982, 32.3438, -4.73041, 0.45 ) }
    dend_29 { pt3dadd( 23.4175, 34.9154, -4.61115, 0.45 ) }
    dend_29 { pt3dadd( 24.18, 37.6671, -4.3949, 0.45 ) }
    dend_29 { pt3dadd( 24.7903, 40.1557, -4.15758, 0.45 ) }
    dend_29 { pt3dadd( 25.2843, 42.7948, -3.8421, 0.45 ) }
    dend_29 { pt3dadd( 25.6286, 46.001, -3.34306, 0.45 ) }
    dend_29 { pt3dadd( 25.678, 47.6967, -3.01733, 0.45 ) }
    dend_29 { pt3dadd( 25.5039, 50.2737, -2.40158, 0.45 ) }
    dend_29 { pt3dadd( 25.091, 52.388, -1.76393, 0.45 ) }
    dend_29 { pt3dadd( 24.5337, 54.0993, -1.08296, 0.45 ) }
    dend_29 { pt3dadd( 23.7682, 55.8113, -0.240174, 0.45 ) }
    dend_29 { pt3dadd( 23.0489, 57.179, 0.565428, 0.45 ) }
    dend_29 { pt3dadd( 22.2146, 58.6399, 1.56678, 0.45 ) }
    dend_29 { pt3dadd( 21.3407, 60.0972, 2.73667, 0.45 ) }
    dend_29 { pt3dadd( 20.7422, 61.0958, 3.57488, 0.45 ) }
    dend_29 { pt3dadd( 20.0467, 62.1378, 4.46254, 0.45 ) }
    dend_29 { pt3dadd( 19.4632, 62.9977, 5.15717, 0.45 ) }
    dend_29 { pt3dadd( 18.7464, 64.0626, 5.97393, 0.45 ) }
    dend_29 { pt3dadd( 17.867, 65.3928, 6.96202, 0.45 ) }
    dend_29 { pt3dadd( 16.9246, 66.8135, 8.00146, 0.45 ) }
    dend_29 { pt3dadd( 16.1432, 67.9453, 8.77588, 0.45 ) }
    dend_29 { pt3dadd( 15.2643, 69.1952, 9.60577, 0.45 ) }
    dend_29 { pt3dadd( 14.3523, 70.567, 10.4939, 0.45 ) }
    dend_29 { pt3dadd( 13.5575, 71.8729, 11.3105, 0.45 ) }
    dend_29 { pt3dadd( 12.8346, 73.1878, 12.1555, 0.45 ) }
    dend_29 { pt3dadd( 12.2618, 74.2754, 12.9287, 0.45 ) }
    dend_29 { pt3dadd( 11.2507, 76.1768, 14.3463, 0.23 ) }
    dend_29 { pt3dadd( 10.496, 77.5312, 15.4004, 0.23 ) }
    dend_29 { pt3dadd( 9.44468, 79.4315, 16.8507, 0.23 ) }
    dend_29 { pt3dadd( 8.59773, 81.049, 18.0305, 0.23 ) }
    dend_29 { pt3dadd( 7.6518, 82.8878, 19.346, 0.23 ) }
    dend_29 { pt3dadd( 7.11025, 83.926, 20.0755, 0.23 ) }
    dend_29 { pt3dadd( 6.49589, 85.0367, 20.7855, 0.23 ) }
    dend_29 { pt3dadd( 5.77031, 86.354, 21.543, 0.23 ) }
    dend_29 { pt3dadd( 5.11228, 87.6389, 22.1867, 0.23 ) }
    dend_29 { pt3dadd( 4.58926, 88.8246, 22.6862, 0.23 ) }
    dend_29 { pt3dadd( 4.19779, 89.9269, 23.0797, 0.23 ) }
    dend_29 { pt3dadd( 3.7755, 91.4269, 23.6489, 0.23 ) }
    dend_29 { pt3dadd( 3.5671, 92.4735, 24.0903, 0.23 ) }
    dend_29 { pt3dadd( 3.35546, 94.3857, 24.92, 0.23 ) }
    dend_29 { pt3dadd( 3.34464, 96.0158, 25.642, 0.23 ) }
    dend_29 { pt3dadd( 3.48917, 97.5805, 26.3727, 0.23 ) }
    dend_29 { pt3dadd( 3.884, 99.9639, 27.5992, 0.23 ) }
    dend_29 { pt3dadd( 4.34216, 102.224, 28.818, 0.23 ) }
    dend_29 { pt3dadd( 4.76832, 103.983, 29.7963, 0.23 ) }
    dend_29 { pt3dadd( 5.25967, 105.672, 30.785, 0.23 ) }
    dend_29 { pt3dadd( 5.82529, 107.382, 31.8338, 0.23 ) }
    dend_29 { pt3dadd( 6.52513, 109.081, 32.9101, 0.23 ) }
    // Section: dend_28, id: dend_28, parent: dend_27 (entry count 90/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 19.8321, 18.6963, -3.83801, 0.45 ) }
    dend_28 { pt3dadd( 20.6174, 18.448, -3.54518, 0.45 ) }
    dend_28 { pt3dadd( 21.8557, 18.0239, -3.09943, 0.45 ) }
    dend_28 { pt3dadd( 22.8586, 17.689, -2.73226, 0.45 ) }
    dend_28 { pt3dadd( 23.9177, 17.361, -2.3477, 0.45 ) }
    dend_28 { pt3dadd( 24.893, 17.1076, -2.01987, 0.45 ) }
    dend_28 { pt3dadd( 25.6212, 16.9349, -1.78985, 0.45 ) }
    dend_28 { pt3dadd( 26.7192, 16.6998, -1.48731, 0.45 ) }
    dend_28 { pt3dadd( 27.7191, 16.5126, -1.2414, 0.45 ) }
    dend_28 { pt3dadd( 28.7679, 16.3469, -1.02048, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_10()
}

proc basic_shape_10() {
    dend_28 { pt3dadd( 30.2049, 16.1279, -0.755637, 0.45 ) }
    dend_28 { pt3dadd( 31.048, 15.9956, -0.619071, 0.45 ) }
    dend_28 { pt3dadd( 31.7038, 15.8799, -0.529075, 0.45 ) }
    dend_28 { pt3dadd( 32.0859, 15.81, -0.479489, 0.45 ) }
    dend_28 { pt3dadd( 33.037, 15.6101, -0.358575, 0.45 ) }
    dend_28 { pt3dadd( 34.2647, 15.3228, -0.178393, 0.45 ) }
    dend_28 { pt3dadd( 35.6917, 14.9542, 0.0625057, 0.45 ) }
    dend_28 { pt3dadd( 37.4634, 14.4896, 0.375961, 0.45 ) }
    dend_28 { pt3dadd( 38.6077, 14.1673, 0.585172, 0.45 ) }
    dend_28 { pt3dadd( 39.8905, 13.7828, 0.832428, 0.45 ) }
    dend_28 { pt3dadd( 40.9846, 13.4354, 1.06212, 0.45 ) }
    dend_28 { pt3dadd( 41.4674, 13.2774, 1.17179, 0.45 ) }
    dend_28 { pt3dadd( 42.362, 12.9596, 1.37571, 0.45 ) }
    dend_28 { pt3dadd( 43.3021, 12.6169, 1.60903, 0.45 ) }
    dend_28 { pt3dadd( 44.306, 12.2526, 1.87516, 0.45 ) }
    dend_28 { pt3dadd( 45.0509, 11.9965, 2.07802, 0.45 ) }
    dend_28 { pt3dadd( 46.0495, 11.6769, 2.35282, 0.45 ) }
    dend_28 { pt3dadd( 47.4138, 11.2862, 2.74158, 0.23 ) }
    dend_28 { pt3dadd( 48.4487, 11.0298, 3.03452, 0.23 ) }
    dend_28 { pt3dadd( 49.7287, 10.7192, 3.38906, 0.23 ) }
    dend_28 { pt3dadd( 50.3638, 10.5644, 3.55882, 0.23 ) }
    dend_28 { pt3dadd( 51.4543, 10.2946, 3.79689, 0.23 ) }
    dend_28 { pt3dadd( 52.3753, 10.0609, 3.94772, 0.23 ) }
    dend_28 { pt3dadd( 53.5081, 9.77443, 4.05239, 0.23 ) }
    dend_28 { pt3dadd( 54.6944, 9.4853, 4.03481, 0.23 ) }
    dend_28 { pt3dadd( 55.5073, 9.2888, 3.9395, 0.23 ) }
    dend_28 { pt3dadd( 56.9089, 8.9735, 3.67594, 0.45 ) }
    dend_28 { pt3dadd( 57.927, 8.7678, 3.40971, 0.45 ) }
    dend_28 { pt3dadd( 58.8147, 8.59993, 3.14261, 0.45 ) }
    dend_28 { pt3dadd( 60.3269, 8.29974, 2.66016, 0.23 ) }
    dend_28 { pt3dadd( 61.2291, 8.13112, 2.37191, 0.23 ) }
    dend_28 { pt3dadd( 62.2102, 7.93623, 2.07947, 0.23 ) }
    dend_28 { pt3dadd( 63.1344, 7.74512, 1.86204, 0.23 ) }
    dend_28 { pt3dadd( 64.307, 7.48174, 1.64949, 0.23 ) }
    dend_28 { pt3dadd( 65.8092, 7.11782, 1.46864, 0.23 ) }
    dend_28 { pt3dadd( 66.4357, 6.94665, 1.42165, 0.23 ) }
    dend_28 { pt3dadd( 67.1871, 6.71958, 1.36882, 0.23 ) }
    dend_28 { pt3dadd( 68.5853, 6.26989, 1.25381, 0.23 ) }
    dend_28 { pt3dadd( 70.0825, 5.79101, 1.12081, 0.23 ) }
    dend_28 { pt3dadd( 71.7591, 5.2675, 0.9449, 0.23 ) }
    dend_28 { pt3dadd( 73.3839, 4.78765, 0.718162, 0.23 ) }
    dend_28 { pt3dadd( 75.1043, 4.27254, 0.377253, 0.23 ) }
    dend_28 { pt3dadd( 75.738, 4.07909, 0.238136, 0.23 ) }
    dend_28 { pt3dadd( 76.8322, 3.74601, -0.0363643, 0.23 ) }
    dend_28 { pt3dadd( 78.1473, 3.35744, -0.415345, 0.23 ) }
    dend_28 { pt3dadd( 80.0637, 2.82075, -1.04623, 0.23 ) }
    dend_28 { pt3dadd( 82.1221, 2.30997, -1.7926, 0.23 ) }
    dend_28 { pt3dadd( 87.2666, -0.00882338, -2.71836, 0.23 ) }
    dend_28 { pt3dadd( 92.756, -1.68776, -2.87738, 0.23 ) }
    // Section: dend_23, id: dend_23, parent: dend_21 (entry count 49/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( 39.8062, -10.0618, -13.8158, 0.45 ) }
    dend_23 { pt3dadd( 41.9814, -9.81392, -13.9143, 0.45 ) }
    dend_23 { pt3dadd( 43.976, -9.5421, -14.0711, 0.45 ) }
    dend_23 { pt3dadd( 47.4174, -9.0185, -14.3843, 0.23 ) }
    dend_23 { pt3dadd( 48.5934, -8.85287, -14.5036, 0.23 ) }
    dend_23 { pt3dadd( 50.1124, -8.64232, -14.6552, 0.23 ) }
    dend_23 { pt3dadd( 51.9094, -8.43475, -14.8473, 0.23 ) }
    dend_23 { pt3dadd( 53.4749, -8.27799, -15.0236, 0.23 ) }
    dend_23 { pt3dadd( 55.0719, -8.14573, -15.2013, 0.23 ) }
    dend_23 { pt3dadd( 57.0317, -8.0122, -15.4056, 0.23 ) }
    dend_23 { pt3dadd( 59.3357, -7.86549, -15.6035, 0.23 ) }
    dend_23 { pt3dadd( 62.8173, -7.64025, -15.8373, 0.23 ) }
    dend_23 { pt3dadd( 65.4723, -7.49148, -15.9535, 0.23 ) }
    dend_23 { pt3dadd( 68.1246, -7.39335, -16.0002, 0.23 ) }
    dend_23 { pt3dadd( 69.8828, -7.33565, -16.0045, 0.23 ) }
    dend_23 { pt3dadd( 72.8406, -7.22762, -15.9304, 0.23 ) }
    dend_23 { pt3dadd( 74.381, -7.19084, -15.8606, 0.23 ) }
    dend_23 { pt3dadd( 76.1641, -7.17205, -15.7438, 0.23 ) }
    dend_23 { pt3dadd( 79.0114, -7.26619, -15.5726, 0.23 ) }
    dend_23 { pt3dadd( 80.0644, -7.32517, -15.518, 0.23 ) }
    dend_23 { pt3dadd( 81.4058, -7.42554, -15.4696, 0.23 ) }
    dend_23 { pt3dadd( 84.205, -7.7603, -15.4402, 0.23 ) }
    dend_23 { pt3dadd( 85.4109, -7.93382, -15.4427, 0.23 ) }
    dend_23 { pt3dadd( 87.7315, -8.27766, -15.4826, 0.23 ) }
    dend_23 { pt3dadd( 90.132, -8.65907, -15.5643, 0.23 ) }
    dend_23 { pt3dadd( 91.4175, -8.89835, -15.6297, 0.23 ) }
    dend_23 { pt3dadd( 93.6536, -9.33169, -15.7399, 0.23 ) }
    dend_23 { pt3dadd( 94.7833, -9.55968, -15.777, 0.23 ) }
    dend_23 { pt3dadd( 96.5684, -9.92434, -15.8237, 0.23 ) }
    dend_23 { pt3dadd( 98.2862, -10.2644, -15.8649, 0.23 ) }
    dend_23 { pt3dadd( 99.7044, -10.4993, -15.9418, 0.23 ) }
    dend_23 { pt3dadd( 101.771, -10.7376, -16.0862, 0.23 ) }
    dend_23 { pt3dadd( 104.642, -10.9788, -16.3485, 0.23 ) }
    dend_23 { pt3dadd( 106.173, -11.0951, -16.5159, 0.23 ) }
    dend_23 { pt3dadd( 108.604, -11.2549, -16.8042, 0.23 ) }
    dend_23 { pt3dadd( 111.994, -11.4255, -17.2307, 0.23 ) }
    dend_23 { pt3dadd( 113.309, -11.4701, -17.4135, 0.23 ) }
    dend_23 { pt3dadd( 116.219, -11.5465, -17.8798, 0.23 ) }
    dend_23 { pt3dadd( 118.792, -11.5584, -18.3088, 0.23 ) }
    dend_23 { pt3dadd( 121.414, -11.5827, -18.7442, 0.23 ) }
    dend_23 { pt3dadd( 130.663, -9.87325, -20.2809, 0.23 ) }
    // Section: dend_22, id: dend_22, parent: dend_21 (entry count 90/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( 39.8062, -10.0618, -13.8158, 0.45 ) }
    dend_22 { pt3dadd( 41.3283, -11.5478, -14.5611, 0.45 ) }
    dend_22 { pt3dadd( 42.9391, -12.9891, -15.3417, 0.45 ) }
    dend_22 { pt3dadd( 45.1522, -14.9138, -16.4284, 0.45 ) }
    dend_22 { pt3dadd( 48.3453, -17.5722, -18.1091, 0.45 ) }
    dend_22 { pt3dadd( 50.4366, -19.3552, -19.3378, 0.23 ) }
    dend_22 { pt3dadd( 52.1918, -20.8746, -20.43, 0.23 ) }
    dend_22 { pt3dadd( 53.5698, -22.0599, -21.3184, 0.45 ) }
    dend_22 { pt3dadd( 54.6942, -23.1092, -22.0721, 0.45 ) }
    dend_22 { pt3dadd( 55.9509, -24.3751, -22.909, 0.45 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_11()
}

proc basic_shape_11() {
    dend_22 { pt3dadd( 58.2376, -26.9012, -24.3993, 0.45 ) }
    dend_22 { pt3dadd( 60.2607, -29.2228, -25.6508, 0.45 ) }
    dend_22 { pt3dadd( 62.172, -31.3922, -26.7694, 0.45 ) }
    dend_22 { pt3dadd( 63.3586, -32.7864, -27.4571, 0.45 ) }
    dend_22 { pt3dadd( 66.3699, -36.3907, -29.1578, 0.45 ) }
    dend_22 { pt3dadd( 69.1149, -39.7756, -30.6649, 0.45 ) }
    dend_22 { pt3dadd( 71.0692, -42.2598, -31.7377, 0.45 ) }
    dend_22 { pt3dadd( 72.3469, -44.0112, -32.4882, 0.45 ) }
    dend_22 { pt3dadd( 74.0706, -46.5444, -33.5959, 0.23 ) }
    dend_22 { pt3dadd( 76.0884, -49.8325, -35.0463, 0.23 ) }
    dend_22 { pt3dadd( 76.7085, -51.04, -35.5662, 0.23 ) }
    dend_22 { pt3dadd( 77.524, -52.9661, -36.3692, 0.23 ) }
    dend_22 { pt3dadd( 78.3327, -55.2735, -37.2808, 0.23 ) }
    dend_22 { pt3dadd( 78.7648, -56.83, -37.8688, 0.23 ) }
    dend_22 { pt3dadd( 79.1255, -58.3992, -38.4825, 0.23 ) }
    dend_22 { pt3dadd( 79.4006, -59.8764, -39.1099, 0.23 ) }
    dend_22 { pt3dadd( 79.7371, -61.7198, -39.9483, 0.23 ) }
    dend_22 { pt3dadd( 80.0329, -63.4622, -40.7971, 0.23 ) }
    dend_22 { pt3dadd( 80.1898, -64.581, -41.3276, 0.23 ) }
    dend_22 { pt3dadd( 80.3251, -65.8704, -41.8808, 0.23 ) }
    dend_22 { pt3dadd( 80.437, -67.6829, -42.5549, 0.23 ) }
    dend_22 { pt3dadd( 80.5072, -69.3923, -43.1625, 0.23 ) }
    dend_22 { pt3dadd( 80.5997, -71.28, -43.7962, 0.23 ) }
    dend_22 { pt3dadd( 80.6816, -72.4976, -44.1743, 0.23 ) }
    dend_22 { pt3dadd( 80.908, -75.4277, -45.0191, 0.23 ) }
    dend_22 { pt3dadd( 81.0294, -78.7751, -45.8827, 0.23 ) }
    dend_22 { pt3dadd( 87.0614, -87.7203, -50.085, 0.23 ) }
    dend_22 { pt3dadd( 93.0786, -96.7751, -54.0705, 0.23 ) }
    dend_22 { pt3dadd( 99.8777, -105.04, -58.5994, 0.23 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_34, dend_31, dend_30, dend_17, dend_14, dend_11, dend_8, dend_1, dend_0, dend_36, dend_35, dend_33, dend_32, dend_19, dend_18, dend_16, dend_15, dend_13, dend_12, dend_10, dend_9, dend_5, dend_2, dend_25, dend_20, dend_7, dend_6, dend_4, dend_3, dend_27, dend_26, dend_24, dend_21, dend_29, dend_28, dend_23, dend_22]}
    ModelViewParmSubset_2 = new SectionList()
    dend_34 ModelViewParmSubset_2.append()
    dend_31 ModelViewParmSubset_2.append()
    dend_30 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_36 ModelViewParmSubset_2.append()
    dend_35 ModelViewParmSubset_2.append()
    dend_33 ModelViewParmSubset_2.append()
    dend_32 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_34, dend_31, dend_30, dend_17, dend_14, dend_11, dend_8, dend_1, dend_0, dend_36, dend_35, dend_33, dend_32, dend_19, dend_18, dend_16, dend_15, dend_13, dend_12, dend_10, dend_9, dend_5, dend_2, dend_25, dend_20, dend_7, dend_6, dend_4, dend_3, dend_27, dend_26, dend_24, dend_21, dend_29, dend_28, dend_23, dend_22]}
    ModelViewParmSubset_3 = new SectionList()
    soma_0 ModelViewParmSubset_3.append()
    dend_34 ModelViewParmSubset_3.append()
    dend_31 ModelViewParmSubset_3.append()
    dend_30 ModelViewParmSubset_3.append()
    dend_17 ModelViewParmSubset_3.append()
    dend_14 ModelViewParmSubset_3.append()
    dend_11 ModelViewParmSubset_3.append()
    dend_8 ModelViewParmSubset_3.append()
    dend_1 ModelViewParmSubset_3.append()
    dend_0 ModelViewParmSubset_3.append()
    dend_36 ModelViewParmSubset_3.append()
    dend_35 ModelViewParmSubset_3.append()
    dend_33 ModelViewParmSubset_3.append()
    dend_32 ModelViewParmSubset_3.append()
    dend_19 ModelViewParmSubset_3.append()
    dend_18 ModelViewParmSubset_3.append()
    dend_16 ModelViewParmSubset_3.append()
    dend_15 ModelViewParmSubset_3.append()
    dend_13 ModelViewParmSubset_3.append()
    dend_12 ModelViewParmSubset_3.append()
    dend_10 ModelViewParmSubset_3.append()
    dend_9 ModelViewParmSubset_3.append()
    dend_5 ModelViewParmSubset_3.append()
    dend_2 ModelViewParmSubset_3.append()
    dend_25 ModelViewParmSubset_3.append()
    dend_20 ModelViewParmSubset_3.append()
    dend_7 ModelViewParmSubset_3.append()
    dend_6 ModelViewParmSubset_3.append()
    dend_4 ModelViewParmSubset_3.append()
    dend_3 ModelViewParmSubset_3.append()
    dend_27 ModelViewParmSubset_3.append()
    dend_26 ModelViewParmSubset_3.append()
    dend_24 ModelViewParmSubset_3.append()
    dend_21 ModelViewParmSubset_3.append()
    dend_29 ModelViewParmSubset_3.append()
    dend_28 ModelViewParmSubset_3.append()
    dend_23 ModelViewParmSubset_3.append()
    dend_22 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_4 = new SectionList()
    axon_0 ModelViewParmSubset_4.append()
    axon_1 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_30 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_0 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_36]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_36 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_35]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_35 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_33]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_33 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_32]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_32 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_18 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_16 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_13 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_12 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_10 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_9 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_5 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_2 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_7 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_6 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_26 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_35 = new SectionList()
    dend_24 OneSecGrp_SectionRef_35.append()

    // Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_37 = new SectionList()
    dend_29 OneSecGrp_SectionRef_37.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_38 = new SectionList()
    dend_28 OneSecGrp_SectionRef_38.append()

    // Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_39 = new SectionList()
    dend_23 OneSecGrp_SectionRef_39.append()

    // Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_40 = new SectionList()
    dend_22 OneSecGrp_SectionRef_40.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_8 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_17 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_19 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_34]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_34 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_31]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_31 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_25 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_11 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_1 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_27 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_20 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_14 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_36 = new SectionList()
    dend_21 OneSecGrp_SectionRef_36.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_15 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_4 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_3 OneSecGrp_SectionRef_32.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()
    dend_31 basal.append()
    dend_32 basal.append()
    dend_33 basal.append()
    dend_34 basal.append()
    dend_35 basal.append()
    dend_36 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_17, dend_17, dend_17, dend_17, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_8, dend_8, dend_8, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, axon_1, axon_1, dend_25, dend_25, dend_25, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_27, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_10()
}

proc subsets_10() {
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_11()
}

proc subsets_11() {
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_12()
}

proc subsets_12() {
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 3.7868198E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 3.7868198E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 8.936579E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert KdShu2007
        gmax_KdShu2007 = 4.2499998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dSTUT_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__dSTUT_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dSTUT_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__dSTUT_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_30 nseg = 3
    dend_0 nseg = 3
    dend_36 nseg = 11
    dend_35 nseg = 5
    dend_33 nseg = 3
    dend_32 nseg = 3
    dend_18 nseg = 5
    dend_16 nseg = 3
    dend_13 nseg = 5
    dend_12 nseg = 5
    dend_10 nseg = 3
    dend_9 nseg = 3
    dend_5 nseg = 3
    dend_2 nseg = 9
    dend_7 nseg = 3
    dend_6 nseg = 5
    dend_26 nseg = 9
    dend_24 nseg = 3
    dend_29 nseg = 5
    dend_28 nseg = 3
    dend_23 nseg = 5
    dend_22 nseg = 7
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate dSTUT214_L6_NBC_242af4db7d_0_0


