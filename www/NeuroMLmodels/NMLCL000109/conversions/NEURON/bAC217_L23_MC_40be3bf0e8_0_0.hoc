// Cell: bAC217_L23_MC_40be3bf0e8_0_0
/*
{
  "id" : "bAC217_L23_MC_40be3bf0e8_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "0.725337, -8.55593, -0.229478, 3.8774", "0.647393, -7.79641, -0.208964, 4.51671", "0.569448, -7.03689, -0.18845, 5.69414", "0.491504, -6.27738, -0.167936, 6.77437", "0.413559, -5.51786, -0.147422, 7.82093", "0.335615, -4.75834, -0.126908, 8.78768", "0.257671, -3.99883, -0.106394, 9.74949", "0.179726, -3.23931, -0.0858799, 10.6187", "0.101782, -2.47979, -0.0653659, 11.512", "0.0238371, -1.72028, -0.0448518, 12.9024", "-0.0541074, -0.96076, -0.0243378, 14.2989", "-0.132052, -0.201243, -0.00382374, 14.4715", "-0.209996, 0.558274, 0.0166903, 13.6944", "-0.287941, 1.31779, 0.0372043, 12.9254", "-0.365885, 2.07731, 0.0577184, 12.2751", "-0.44383, 2.83682, 0.0782324, 11.7006", "-0.521774, 3.59634, 0.0987465, 11.253", "-0.599719, 4.35586, 0.119261, 9.95291", "-0.677663, 5.11537, 0.139775, 8.58253", "-0.755608, 5.87489, 0.160289, 6.53956", "-0.833552, 6.63441, 0.180803, 3.68564" ]
  }, {
    "name" : "dend_34",
    "id" : "dend_34",
    "points3d" : [ "-3.25414, 3.52588, -14.7351, 0.55", "-4.49753, 4.59071, -15.0244, 0.55", "-6.92196, 6.73142, -15.6974, 0.55", "-8.669, 8.32219, -16.2037, 0.55", "-11.6789, 11.0787, -17.1173, 0.55", "-13.0441, 12.336, -17.5314, 0.55", "-14.7527, 13.925, -18.0228, 1.11", "-16.7288, 15.8754, -18.6169, 0.55", "-17.7346, 17.0073, -18.8909, 0.55", "-19.6363, 19.211, -19.3089, 0.55", "-20.4938, 20.2669, -19.4244, 0.83", "-21.7304, 22.0139, -19.4733, 0.55", "-23.9052, 25.4247, -19.3377, 0.83", "-25.6011, 28.2992, -19.1059, 0.55", "-26.017, 29.048, -19.0308, 0.55", "-27.3017, 31.5863, -18.6945, 0.83", "-28.5672, 34.3162, -18.3102, 0.83", "-30.1459, 38.0235, -17.779, 0.55", "-30.864, 39.8576, -17.5697, 0.55", "-31.5806, 41.8417, -17.4494, 0.55", "-32.4873, 44.4475, -17.444, 0.83", "-33.3078, 46.8032, -17.5772, 0.83", "-34.1877, 49.4216, -17.8701, 0.83", "-35.2132, 52.5998, -18.3746, 0.55", "-35.9684, 54.8729, -18.7908, 0.83", "-36.9085, 57.7941, -19.3767, 0.55", "-37.7964, 60.5184, -20.0248, 0.83", "-38.4423, 62.5829, -20.6306, 0.55", "-38.8677, 64.0369, -21.1018, 0.83", "-39.4597, 66.3814, -21.9191, 0.83", "-39.8927, 68.3827, -22.6799, 0.83", "-40.8449, 73.4123, -24.7277, 0.55", "-41.3957, 76.4529, -26.0712, 0.83", "-41.8049, 78.6531, -27.0332, 0.28", "-42.2703, 81.0233, -28.1065, 0.55", "-42.7323, 83.2479, -29.1308, 0.55", "-43.5342, 86.8808, -30.8136, 0.28", "-43.9897, 88.9761, -31.7026, 0.55", "-44.5632, 91.4294, -32.6463, 0.55", "-45.1818, 93.987, -33.6779, 0.28", "-45.3879, 94.7709, -33.9922, 0.55", "-45.7758, 96.2611, -34.6294, 0.28", "-46.5009, 98.9599, -35.8924, 0.55", "-46.9807, 100.624, -36.6529, 0.28", "-47.4491, 102.073, -37.3889, 0.55", "-47.7572, 102.934, -37.7549, 0.28", "-48.5082, 104.846, -38.4089, 0.83", "-49.6811, 107.619, -39.1209, 0.83", "-50.6806, 109.957, -39.5405, 0.28", "-51.7485, 112.667, -39.8085, 0.55", "-53.0617, 116.301, -39.9494, 0.28", "-53.8139, 118.625, -39.9347, 0.55", "-54.3124, 120.365, -39.8145, 0.83", "-54.6765, 121.824, -39.6505, 0.28", "-55.0216, 123.429, -39.4735, 0.55", "-55.2813, 124.815, -39.2589, 0.28", "-55.5488, 126.501, -39.0666, 0.55", "-55.7226, 127.758, -38.8973, 0.28", "-55.8019, 128.297, -38.8636, 0.55", "-56.0931, 129.728, -39.1055, 0.28", "-56.3619, 130.825, -39.5421, 0.55", "-56.6435, 131.892, -40.0933, 0.28", "-56.9325, 132.886, -40.7306, 0.55", "-57.7702, 135.674, -42.6486, 0.28", "-58.9477, 139.415, -45.3524, 0.28", "-59.5641, 141.279, -46.7418, 0.83", "-60.1901, 143.07, -48.0984, 0.83", "-60.8747, 144.918, -49.4745, 0.28", "-61.2582, 145.889, -50.1229, 0.83", "-61.642, 146.871, -50.6247, 0.28", "-62.1179, 148.065, -51.0618, 0.55", "-62.4804, 148.895, -51.3185, 0.28", "-62.9722, 149.972, -51.6215, 0.83", "-64.5212, 153.415, -52.5046, 0.28", "-64.8505, 154.146, -52.6794, 0.83", "-65.4523, 155.534, -52.9488, 0.83", "-66.1747, 157.289, -53.1923, 0.28", "-66.612, 158.42, -53.2154, 0.55", "-67.2723, 160.11, -53.117, 0.28", "-67.8073, 161.558, -52.8781, 0.55", "-68.9509, 164.746, -52.3902, 0.28", "-69.3659, 165.98, -52.2462, 0.55", "-70.2588, 168.7, -52.0102, 0.28", "-70.7365, 170.024, -51.9409, 0.83", "-71.551, 171.846, -51.9247, 0.28", "-72.5939, 173.93, -52.0532, 0.55", "-73.6702, 175.925, -52.3147, 0.28", "-74.1262, 176.774, -52.5119, 0.83", "-75.1092, 178.589, -53.0326, 0.83", "-76.9645, 182.102, -53.9357, 0.83", "-78.3471, 184.732, -54.5749, 0.28", "-79.3542, 186.765, -54.9562, 0.55", "-80.8165, 189.895, -55.5468, 0.28", "-81.5681, 191.625, -55.9305, 0.83", "-82.4099, 193.765, -56.4554, 0.28", "-82.6806, 194.488, -56.7116, 0.55", "-83.526, 196.581, -57.6062, 0.28", "-84.1338, 198.068, -58.3015, 0.55", "-84.9444, 200.113, -59.2576, 0.28", "-85.7079, 202.122, -60.1815, 0.83", "-87.0253, 205.832, -61.899, 0.28", "-87.6988, 207.724, -62.7786, 0.83", "-88.9197, 211.228, -64.39, 0.55", "-90.2016, 215.136, -65.9754, 0.55", "-90.9696, 217.686, -66.8838, 0.55", "-91.7578, 220.609, -67.7999, 0.83" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999980326364536,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "-0.47414, 4.51063, -15.8851, 2.22", "0.885859, 5.94388, -15.8851, 2.22" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999980326364536
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "5.46586, 0.990878, -3.4751, 0.83", "7.89519, 0.325168, -3.84693, 0.83", "11.6727, -0.90658, -4.5276, 0.83", "14.6911, -1.8782, -5.13944, 0.83", "17.244, -2.67072, -5.66176, 0.55", "19.353, -3.32098, -6.13557, 0.83", "22.6212, -4.25244, -6.93364, 0.55", "24.0816, -4.64874, -7.34346, 0.83", "26.4328, -5.06512, -8.02934, 0.55", "28.8246, -5.19522, -8.7467, 0.83", "32.9816, -5.05061, -9.92577, 0.83", "34.582, -4.84115, -10.4402, 0.55", "37.4017, -4.25134, -11.4851, 0.83", "42.0821, -3.0636, -13.4204, 0.55", "44.1861, -2.45039, -14.3751, 0.55", "46.3882, -1.77332, -15.3653, 0.55", "49.9948, -0.703969, -16.8665, 0.55", "51.972, -0.270948, -17.6091, 0.55", "53.676, -0.0184522, -18.2254, 0.28", "56.114, 0.12015, -19.0485, 0.55", "59.1708, -0.0372452, -19.8456, 0.28", "60.8453, -0.173212, -20.1764, 0.83", "62.4801, -0.34539, -20.4074, 0.83", "65.4925, -0.624509, -20.8719, 0.28", "67.6339, -0.802417, -21.29, 0.55", "71.0849, -0.970962, -22.2104, 0.55", "74.6606, -0.987753, -23.4033, 0.55", "76.3832, -0.957907, -24.0072, 0.55", "77.8092, -0.93088, -24.5262, 0.28", "79.7108, -0.872403, -25.1925, 0.83", "81.9512, -0.679669, -26.1108, 0.83", "83.9679, -0.403873, -27.0352, 0.55", "84.9495, -0.252258, -27.5176, 0.55", "86.82, 0.154844, -28.4159, 0.83", "88.5814, 0.627688, -29.2185, 0.83", "91.6148, 1.65303, -30.5952, 0.55", "93.4466, 2.30333, -31.39, 0.55", "94.4368, 2.6787, -31.8098, 0.55", "95.6201, 3.11778, -32.3562, 0.28", "96.85, 3.54353, -32.9293, 0.55", "98.9246, 4.16222, -34.0118, 0.55", "100.687, 4.56215, -34.9268, 0.55", "102.195, 4.83707, -35.7762, 0.55", "105.002, 5.16122, -37.3724, 0.28", "106.862, 5.35005, -38.4565, 0.83", "109.308, 5.61853, -39.9631, 0.55", "110.795, 5.75771, -40.8814, 0.55", "112.174, 5.88281, -41.7417, 0.28", "114.186, 6.05025, -42.9637, 0.83", "115.97, 6.17746, -44.033, 0.83", "118.653, 6.374, -45.706, 0.28", "119.7, 6.45351, -46.3664, 0.55", "121.287, 6.57826, -47.3722, 0.28", "123.275, 6.69305, -48.5391, 0.55", "126.475, 6.89325, -50.2332, 0.28", "127.382, 6.92621, -50.6594, 0.28", "128.946, 7.04303, -51.2668, 0.55", "131.052, 7.25703, -51.8924, 0.55", "133.22, 7.55131, -52.3826, 0.28", "134.745, 7.77902, -52.617, 0.55", "137.14, 8.20579, -52.8357, 0.28", "140.231, 8.8138, -53.1004, 0.28", "143.071, 9.53816, -53.3836, 0.55", "145.654, 10.355, -53.7037, 0.55", "147.468, 11.0089, -53.9545, 0.28", "148.377, 11.371, -54.0838, 0.28", "149.247, 11.7894, -54.2267, 0.55", "152.354, 13.4893, -54.918, 0.28", "153.629, 14.3025, -55.263, 0.55", "154.888, 15.2102, -55.6662, 0.28", "155.543, 15.7291, -55.9175, 0.55", "157.855, 17.6488, -56.9161, 0.28", "158.556, 18.2682, -57.2349, 0.28", "159.166, 18.7964, -57.554, 0.83", "162.271, 21.4203, -59.3275, 0.28", "162.724, 21.7869, -59.5916, 0.83", "165.045, 23.5166, -60.8895, 0.28", "166.287, 24.3889, -61.4145, 0.55", "168.374, 25.7684, -62.0882, 0.28", "170.202, 26.8726, -62.4893, 0.55", "173.255, 28.4916, -62.8319, 0.28", "174.585, 29.1396, -63.0189, 0.55", "178.776, 31.0331, -63.6542, 0.28", "182.157, 32.5488, -64.6329, 0.28", "183.314, 33.0604, -65.1105, 0.83", "184.461, 33.5136, -65.9466, 0.83", "187.846, 34.6531, -69.2084, 0.28", "188.428, 34.8151, -69.8462, 0.83", "192.132, 35.3649, -74.451, 0.28", "192.896, 35.4003, -75.421, 0.83", "196.091, 35.296, -79.4942, 0.28", "197.875, 35.0746, -81.6693, 0.28", "198.986, 34.7722, -82.8986, 0.83", "202.585, 33.3443, -86.5755, 0.28", "203.377, 32.9068, -87.3178, 0.55", "205.008, 31.8164, -88.8671, 0.28", "205.745, 31.2201, -89.5461, 0.55", "206.919, 30.1014, -90.8058, 0.28", "207.719, 29.2706, -91.7302, 0.28", "209.243, 27.5717, -93.3917, 0.28", "209.767, 26.9962, -93.9882, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999980326364536,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "5.40586, 2.37538, -0.565097, 1.11", "6.32255, 3.77653, 0.484323, 1.11", "8.3455, 6.86858, 2.80018, 0.83", "10.1099, 9.56536, 4.81996, 0.83", "11.2486, 11.3059, 6.12357, 0.83" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999980326364536
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-5.61414, 3.77938, -1.9851, 1.11", "-9.30053, 7.47042, -2.9746, 1.11", "-11.4695, 9.58766, -3.42473, 1.66", "-14.4671, 12.5954, -4.03876, 0.83", "-16.8896, 15.1543, -4.64611, 0.83", "-19.3132, 17.809, -5.42882, 0.83", "-21.143, 19.8489, -6.15668, 0.55", "-22.6107, 21.5456, -6.84181, 0.83", "-24.8354, 24.1862, -7.94689, 0.83", "-28.5595, 28.669, -9.82789, 1.11", "-31.0063, 31.6581, -11.2212, 0.83", "-33.1193, 34.3033, -12.695, 0.55", "-34.6482, 36.292, -13.9746, 1.11" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999980326364536,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-6.88414, -2.62637, -2.0051, 1.11", "-8.85008, -2.23261, -1.19044, 1.11", "-14.699, -1.0611, 1.23328, 1.38", "-18.0479, -0.390331, 2.62103, 0.83", "-22.7489, 0.551248, 4.56905, 1.38" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999980326364536
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "0.305861, -9.06137, -0.655097, 2.49", "0.671293, -15.1973, -0.236765, 2.49", "0.881814, -18.7322, 0.00423015, 2.49", "1.18258, -23.7824, 0.348535, 2.77" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.44999980326364536
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "-0.833552, 6.63441, 0.180803, 0.55", "-2.36487, 21.556, 0.180803, 0.55", "-3.89618, 36.4777, 0.180803, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_36",
    "id" : "dend_36",
    "points3d" : [ "-91.7578, 220.609, -67.7999, 0.28", "-93.0814, 222.947, -68.9363, 0.28", "-93.471, 223.636, -69.2708, 0.83" ],
    "parent" : "dend_34",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_35",
    "id" : "dend_35",
    "points3d" : [ "-91.7578, 220.609, -67.7999, 0.28", "-90.956, 221.458, -68.2583, 0.28", "-90.4797, 222.046, -68.6613, 0.83", "-88.6846, 224.385, -70.1308, 0.28", "-87.3462, 226.518, -71.3246, 0.28", "-86.5978, 227.935, -72.0024, 0.28", "-86.2573, 228.663, -72.3116, 0.83", "-84.6243, 232.748, -74.0794, 0.28", "-84.1167, 234.342, -74.6322, 0.83", "-82.9275, 239.365, -75.9571, 0.28", "-82.28, 242.451, -76.7683, 0.28", "-81.9043, 244.533, -77.281, 0.28", "-81.4121, 247.581, -77.9227, 0.83", "-80.7494, 252.548, -78.5703, 0.28", "-80.5712, 254.139, -78.8131, 0.83" ],
    "parent" : "dend_34",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_31",
    "id" : "dend_31",
    "points3d" : [ "0.885859, 5.94388, -15.8851, 1.11", "2.02177, 10.5646, -19.4973, 1.11", "2.76642, 13.5938, -21.8653, 1.11", "3.09464, 14.9289, -22.9091, 1.11", "3.75732, 17.6246, -25.0164, 0.83", "4.32967, 19.9529, -26.8365, 1.11", "5.14205, 23.2575, -29.4199, 0.83" ],
    "parent" : "dend_29",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "0.885859, 5.94388, -15.8851, 0.83", "0.760336, 4.65671, -16.4813, 0.83", "0.268503, 1.66714, -18.1534, 0.83", "-0.376885, -2.07949, -20.3586, 0.83", "-0.961211, -4.85162, -22.0712, 0.83", "-1.88386, -8.62193, -24.6266, 0.55", "-2.84209, -12.346, -27.2747, 0.55", "-4.10868, -16.1569, -30.336, 0.28", "-4.38275, -16.8466, -30.9839, 0.55", "-5.09415, -18.4903, -32.7331, 0.55", "-5.98997, -20.5275, -35.2543, 0.28", "-6.34452, -21.437, -36.4908, 0.83", "-7.21669, -23.7308, -39.6857, 0.28", "-7.77477, -25.3784, -41.894, 0.55", "-8.10053, -26.455, -43.2883, 0.28", "-8.48221, -28.1472, -45.26, 0.83", "-9.01426, -30.7915, -48.0072, 0.28", "-9.19784, -31.7665, -49.0281, 0.55", "-9.57385, -34.2986, -51.5152, 0.28", "-9.69749, -35.2164, -52.4741, 0.83", "-9.86871, -36.6491, -54.0214, 0.28", "-9.98004, -38.0404, -55.5182, 0.55", "-10.1157, -41.7072, -59.4273, 0.28", "-10.1025, -42.4403, -60.2902, 0.55", "-9.93034, -44.9436, -63.3874, 0.28", "-9.85937, -45.9006, -64.7248, 0.28", "-9.72348, -47.5019, -67.1045, 0.83", "-9.64479, -48.298, -68.3468, 0.55", "-9.34335, -51.7093, -73.755, 0.28", "-9.31951, -52.322, -74.7825, 0.55", "-9.33371, -54.6637, -78.7189, 0.28", "-9.36296, -55.0352, -79.3999, 0.55", "-9.70298, -57.1866, -83.4264, 0.28", "-9.7736, -57.6668, -84.2665, 0.55", "-9.88649, -58.5459, -85.6346, 0.28", "-9.92364, -59.2268, -86.5405, 0.55", "-9.86923, -62.1542, -89.9295, 0.28", "-9.78217, -63.5969, -91.4941, 0.83", "-9.23975, -68.4038, -96.1734, 0.28", "-9.07146, -69.5584, -97.2577, 0.55", "-8.62239, -72.0652, -99.5164, 0.28", "-8.35906, -73.3901, -100.648, 0.55", "-7.65616, -76.6641, -103.206, 0.28", "-7.46419, -77.5273, -103.844, 0.55", "-7.13351, -79.1313, -104.971, 0.55", "-6.75953, -81.379, -106.708, 0.28", "-6.63542, -82.3997, -107.374, 0.55", "-6.35679, -86.5935, -109.756, 0.28", "-6.38358, -88.9733, -111.006, 0.28", "-6.50046, -91.3224, -112.177, 0.83", "-7.07545, -99.2035, -115.81, 0.28", "-7.87295, -105.945, -118.757, 0.28", "-8.58671, -110.733, -120.763, 0.83", "-10.8717, -123.015, -126.05, 0.28", "-11.1987, -124.552, -126.752, 0.83", "-11.7836, -126.973, -127.88, 0.83", "-13.8347, -134.408, -131.491, 0.28", "-14.3757, -135.998, -132.379, 0.83", "-16.2951, -140.722, -134.895, 0.55", "-17.3895, -142.984, -136.164, 0.55", "-18.6714, -145.572, -137.74, 0.28", "-19.1374, -146.467, -138.306, 0.55", "-23.252, -154.057, -143.177, 0.28", "-23.7833, -155.025, -143.788, 0.83", "-27.2691, -161.469, -147.501, 0.28", "-28.1639, -163.148, -148.509, 0.55" ],
    "parent" : "dend_29",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "11.2486, 11.3059, 6.12357, 0.83", "13.7015, 11.7858, 6.36426, 0.83", "16.5132, 12.3358, 6.64014, 0.83", "18.9503, 12.8126, 6.87928, 0.83" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "11.2486, 11.3059, 6.12357, 0.83", "11.8522, 13.6687, 6.28121, 0.83", "12.4396, 15.898, 6.48096, 0.83", "12.9285, 17.7301, 6.74982, 0.83", "13.4865, 19.9084, 6.94591, 0.83", "14.057, 22.2807, 7.07812, 0.28", "14.6267, 24.752, 7.16907, 0.55", "15.225, 27.4078, 7.2241, 0.55", "15.9079, 30.7209, 7.23926, 0.55", "16.4781, 34.103, 7.13403, 0.55", "16.7599, 36.257, 6.99543, 0.55", "16.8602, 37.336, 6.91911, 0.55", "16.9916, 39.7574, 6.58017, 0.83", "17.0059, 40.3511, 6.48259, 0.83", "17.0057, 43.6015, 6.06562, 0.55", "16.949, 45.5152, 6.0475, 0.55", "16.7606, 48.2444, 6.31493, 0.55", "16.3762, 51.8683, 7.03177, 0.55", "16.0923, 53.928, 7.70456, 0.55", "15.5204, 57.6592, 9.21581, 0.55", "15.0255, 60.7072, 10.6491, 0.55", "14.331, 64.3595, 12.5722, 0.55", "13.5167, 68.1289, 14.8516, 0.55", "12.6274, 71.9677, 17.5684, 0.28", "12.1706, 73.8009, 18.9355, 0.55", "10.5299, 83.4022, 19.5146, 0.55", "9.63054, 93.0709, 18.5918, 0.55", "9.04966, 102.79, 18.0564, 0.55", "7.87743, 112.458, 17.5026, 0.55", "7.14742, 122.181, 17.4277, 0.55", "5.604, 131.661, 15.6704, 0.55", "5.77989, 141.189, 13.5571, 0.55", "7.3529, 150.421, 10.7524, 0.55", "8.21947, 159.954, 8.83979, 0.55", "8.12507, 169.629, 7.60404, 0.55", "7.1825, 179.016, 5.07251, 0.55", "4.84755, 188.423, 3.86358, 0.55", "1.34242, 197.359, 1.93545, 0.55", "-3.24552, 205.843, 0.136176, 0.55", "-8.47032, 213.752, -2.49054, 0.55", "-13.6838, 221.459, -5.70507, 0.55", "-18.5629, 229.817, -7.35269, 0.55", "-22.0995, 238.646, -9.69465, 0.55", "-27.2244, 246.985, -10.4681, 0.55" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "-34.6482, 36.292, -13.9746, 0.55", "-35.6166, 39.0109, -14.2939, 0.55", "-36.2793, 40.9361, -14.5301, 0.55", "-37.2005, 43.803, -14.8426, 0.55", "-38.1302, 46.635, -15.177, 0.55", "-38.9608, 49.1383, -15.4967, 0.55", "-40.3668, 53.3318, -16.163, 0.55", "-41.8959, 57.6097, -17.0403, 0.55", "-43.6094, 62.0404, -18.1951, 0.55", "-44.4704, 64.1044, -18.8054, 0.55", "-45.1991, 65.7815, -19.3364, 0.55", "-46.8659, 69.3911, -20.5443, 0.83", "-48.6894, 73.0872, -21.8587, 0.83", "-50.6288, 76.8104, -23.2408, 0.55", "-51.3362, 78.1505, -23.7461, 0.55", "-53.3009, 81.9799, -25.0788, 0.55", "-54.0609, 83.47, -25.5493, 0.55", "-55.5232, 86.3979, -26.3303, 0.55", "-56.6721, 88.8506, -26.892, 0.55", "-57.6934, 91.0906, -27.277, 0.28", "-58.1675, 92.1238, -27.4528, 0.28", "-58.6484, 93.1534, -27.6323, 0.55", "-59.7984, 95.639, -28.1003, 0.28", "-60.3313, 96.7699, -28.3284, 0.55", "-61.5573, 99.4994, -28.8799, 0.55", "-61.8653, 100.215, -29.1143, 0.55", "-62.668, 102.189, -29.94, 0.55", "-63.5434, 104.41, -31.0067, 0.28", "-63.8684, 105.254, -31.4485, 0.55", "-65.0719, 108.387, -33.1404, 0.55", "-66.7244, 112.609, -35.2982, 0.28", "-67.3119, 114.058, -36.0694, 0.28", "-67.8009, 115.169, -36.6987, 0.55", "-69.1266, 118.006, -38.3312, 0.28", "-69.7535, 119.239, -39.0964, 0.83", "-71.0624, 121.616, -40.6789, 0.83", "-72.9802, 124.923, -42.9891, 0.55", "-73.8643, 126.494, -44.246, 0.28", "-74.1968, 127.127, -44.7569, 0.55", "-75.307, 129.33, -46.6654, 0.28", "-75.8039, 130.445, -47.6009, 0.55", "-76.6528, 132.782, -49.4441, 0.28", "-77.0266, 134.018, -50.2851, 0.83", "-77.7102, 136.771, -52.0134, 0.28", "-78.2707, 139.413, -53.588, 0.55", "-79.0014, 143.352, -55.7776, 0.83", "-79.5423, 146.635, -57.4979, 0.28", "-79.6976, 147.662, -57.9827, 0.55", "-80.0622, 150.243, -59.0951, 0.28", "-80.2529, 151.795, -59.6818, 0.83", "-80.4345, 153.567, -60.0889, 0.83", "-80.6358, 155.735, -60.368, 0.28", "-80.8224, 157.714, -60.5153, 0.55", "-81.0836, 160.362, -60.658, 0.28", "-81.2991, 162.573, -60.7304, 0.83", "-81.7899, 167.298, -60.9924, 0.28", "-82.0279, 169.454, -61.171, 0.55", "-82.6168, 174.218, -61.7211, 0.28", "-82.883, 176.237, -62.0677, 0.83", "-83.245, 178.59, -62.6206, 0.83", "-84.2702, 184.347, -64.3207, 0.28", "-84.6309, 186.038, -64.9337, 0.55", "-85.1279, 188.071, -65.7836, 0.55", "-86.035, 191.225, -67.3139, 0.55", "-86.9308, 194.232, -68.8751, 0.28", "-87.2421, 195.256, -69.4326, 0.55", "-87.6425, 196.636, -70.2001, 0.28", "-88.1356, 198.397, -71.1308, 0.55", "-88.8025, 200.985, -72.4022, 0.28", "-89.3448, 203.375, -73.5614, 0.28", "-89.6912, 205.281, -74.4479, 0.55", "-90.1259, 208.484, -75.882, 0.28", "-90.2507, 209.981, -76.5092, 0.55", "-90.29, 210.737, -76.8043, 0.55", "-90.3658, 214.225, -78.2165, 0.28", "-90.4278, 217.068, -79.4321, 0.28", "-90.4308, 218.759, -80.1464, 0.83", "-90.3829, 220.002, -80.6671, 0.83", "-90.2553, 222.079, -81.616, 0.28", "-90.15, 223.86, -82.3806, 0.55" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-34.6482, 36.292, -13.9746, 0.55", "-36.6024, 38.0623, -13.109, 0.55", "-37.85, 39.3088, -12.1864, 0.28", "-38.6538, 40.1958, -11.4982, 0.55", "-39.8641, 41.5889, -10.4169, 0.55", "-41.6487, 43.7121, -8.7561, 0.55", "-42.6014, 44.934, -7.83941, 0.83", "-45.197, 48.8117, -5.02219, 0.28", "-45.8179, 49.8481, -4.31071, 0.28", "-46.2136, 50.6048, -3.83339, 0.55", "-47.0704, 52.5389, -2.76507, 0.28", "-47.6856, 54.2003, -2.08959, 0.28", "-48.1348, 55.5486, -1.73417, 0.55", "-48.7572, 57.5268, -1.47719, 0.55", "-49.2985, 59.2361, -1.34316, 0.28", "-49.6728, 60.3879, -1.30795, 0.55", "-50.1579, 61.7745, -1.34145, 0.28", "-50.5441, 62.8242, -1.37709, 0.55", "-51.385, 65.1941, -1.38337, 0.28", "-52.0594, 67.231, -1.34835, 0.55", "-52.8215, 69.6585, -1.21982, 0.28", "-53.2854, 71.1646, -1.12444, 0.55", "-54.0751, 73.7989, -0.921513, 0.55", "-55.1511, 77.4281, -0.646043, 0.28", "-55.683, 79.3195, -0.512858, 0.28", "-55.9844, 80.4793, -0.351343, 0.55" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-22.7489, 0.551248, 4.56905, 0.83", "-25.6865, 3.50367, 4.66857, 0.83", "-27.6723, 5.49943, 4.73584, 0.83" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "-22.7489, 0.551248, 4.56905, 0.83", "-24.0212, 0.00307888, 5.4325, 0.83", "-26.5004, -0.730815, 6.9126, 0.83", "-29.718, -1.45819, 8.79567, 0.55", "-31.6111, -1.90374, 10.0633, 0.83", "-33.312, -2.34223, 11.2858, 0.28", "-35.9228, -3.15287, 13.4323, 0.55", "-37.4624, -3.64035, 14.8566, 0.28", "-38.73, -4.13444, 16.321, 0.55", "-40.8408, -5.12559, 19.0754, 0.28", "-41.2253, -5.3506, 19.7136, 0.83", "-42.279, -6.45398, 22.198, 0.28", "-42.3883, -6.60384, 22.544, 0.55", "-43.0573, -7.38544, 24.4809, 0.28", "-43.1906, -7.51881, 24.8324, 0.55", "-43.8539, -7.80041, 25.9621, 0.28", "-44.3795, -7.90296, 26.6559, 0.55", "-46.6625, -7.93697, 28.8681, 0.28", "-47.6423, -7.88085, 29.7709, 0.55", "-55.0805, -8.8746, 36.3766, 0.55", "-61.6779, -8.53683, 43.8836, 0.55", "-68.2445, -9.05463, 51.4067, 0.55", "-74.8847, -8.20764, 58.8333, 0.55", "-81.6623, -6.8131, 66.0456, 0.55", "-87.593, -5.54053, 73.9906, 0.55", "-94.3199, -5.44729, 81.3893, 0.55", "-102.079, -5.92841, 87.6783, 0.55", "-108.419, -5.99303, 95.4116, 0.55", "-114.962, -6.72285, 102.936, 0.55", "-121.877, -8.58409, 109.903, 0.55", "-129.822, -9.72794, 115.862, 0.55", "-137.875, -12.3678, 121.135, 0.55", "-145.317, -15.7706, 126.831, 0.55", "-151.803, -19.8787, 133.169, 0.55", "-157.829, -24.8023, 139.349, 0.55", "-163.127, -30.775, 145.214, 0.55", "-167.322, -35.9998, 152.542, 0.55", "-173.005, -40.2605, 159.513, 0.55", "-179.603, -42.8599, 166.539, 0.55", "-186.714, -43.7512, 173.51, 0.55", "-193.513, -42.7904, 180.777, 0.55", "-201.004, -40.1916, 186.842, 0.55", "-208.534, -38.4902, 193.186, 0.55" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "1.18258, -23.7824, 0.348535, 0.83", "4.65968, -27.6162, -2.00972, 0.83", "6.28236, -29.3324, -2.96751, 0.83", "7.9544, -31.0316, -3.97572, 0.83", "9.75834, -32.8217, -5.02084, 0.83", "11.8642, -34.9115, -6.24085, 1.11", "13.897, -36.9289, -7.41858, 1.11", "15.9766, -38.9872, -8.39489, 0.83", "17.733, -40.6424, -9.25737, 0.83", "19.3965, -42.0945, -10.0901, 1.11" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "1.18258, -23.7824, 0.348535, 1.11", "0.0429143, -28.5354, 0.534756, 1.11", "-0.723949, -31.7336, 0.660061, 1.11", "-1.74088, -35.9747, 0.826227, 1.38" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "-3.89618, 36.4777, 0.180803, 0.55", "-5.42749, 51.3993, 0.180803, 0.55", "-6.95881, 66.3209, 0.180803, 0.55" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_33",
    "id" : "dend_33",
    "points3d" : [ "5.14205, 23.2575, -29.4199, 0.55", "7.2978, 26.0776, -30.807, 0.55", "8.27997, 27.3185, -31.4522, 1.11", "9.93983, 29.4285, -32.6446, 0.55", "12.4403, 32.4866, -34.4041, 0.55", "14.173, 34.5494, -35.5283, 0.83", "16.1272, 36.7056, -36.6743, 0.28", "16.7931, 37.3351, -37.0844, 0.55", "18.6929, 38.8738, -38.1185, 0.55", "20.2566, 39.8775, -38.8089, 0.55", "22.9853, 41.2403, -39.8228, 0.28", "24.9296, 42.0875, -40.4362, 0.55", "27.558, 43.1398, -41.0409, 0.28", "28.9098, 43.7002, -41.2728, 0.28", "31.7246, 44.8845, -41.6493, 0.55", "34.6062, 46.1208, -41.9878, 0.55", "36.4916, 46.922, -42.1683, 0.28", "39.1832, 48.1365, -42.3464, 0.55", "42.7793, 49.6468, -42.3965, 0.28", "45.1845, 50.5707, -42.3816, 0.55", "47.6066, 51.3803, -42.3126, 0.55", "48.9301, 51.7519, -42.2549, 0.55", "51.094, 52.2924, -42.2015, 0.55", "54.4749, 53.0309, -42.0772, 0.83", "55.8157, 53.331, -42.0029, 0.83", "58.0226, 53.9132, -41.8951, 0.55", "60.0214, 54.5765, -41.8719, 0.55", "62.4428, 55.5392, -41.9734, 0.55", "65.3059, 56.8772, -42.3129, 0.28", "66.8875, 57.7388, -42.7538, 0.55", "68.4787, 58.6344, -43.3858, 0.28", "69.9299, 59.4837, -44.1494, 0.55", "71.4289, 60.3402, -45.1301, 0.28", "73.4619, 61.4408, -46.6208, 0.55", "77.0714, 63.2286, -49.4065, 0.28", "78.5378, 63.8593, -50.5541, 0.83", "80.2266, 64.491, -51.8296, 0.28", "82.0123, 65.0506, -53.2689, 1.11", "83.753, 65.4707, -54.5696, 0.28", "84.8628, 65.615, -55.3866, 0.55", "86.615, 65.7505, -56.539, 0.28", "87.8223, 65.8191, -57.2683, 0.83", "92.4704, 65.9931, -59.7743, 0.28", "95.2979, 66.1539, -61.2099, 0.83", "98.9375, 66.5312, -63.0963, 0.28", "101.408, 66.8875, -64.2286, 0.28", "103.475, 67.24, -64.9889, 0.28", "105.316, 67.6858, -65.518, 0.83", "107.217, 68.2685, -65.9037, 0.83", "108.65, 68.7708, -66.2412, 0.83", "111.061, 69.6746, -66.8595, 0.28", "111.834, 69.9134, -67.1828, 0.28", "113.685, 70.4283, -68.1683, 0.83", "116.103, 71.0085, -69.8476, 0.28", "117.122, 71.192, -70.779, 0.55", "119.651, 71.5145, -73.3064, 0.28", "120.876, 71.6188, -74.6759, 0.83", "121.944, 71.6863, -75.8864, 0.28", "123.711, 71.7663, -77.9686, 0.55", "126.306, 72.014, -80.7406, 0.28", "127.915, 72.2146, -82.2873, 0.28", "129.628, 72.4734, -83.692, 1.11", "133.208, 73.1432, -86.2373, 0.28", "134.152, 73.3074, -86.7965, 0.55", "137.335, 73.8188, -88.111, 0.28", "138.118, 73.9436, -88.3216, 0.83", "139.48, 74.1612, -88.5987, 0.83", "141.258, 74.445, -89.0452, 0.83", "144.093, 74.9848, -89.886, 0.28", "145.929, 75.3021, -90.4904, 0.55", "147.088, 75.4668, -90.9922, 0.28", "147.637, 75.5427, -91.2611, 0.55", "153.44, 76.1953, -94.4909, 0.28", "155.153, 76.457, -95.681, 0.83" ],
    "parent" : "dend_31",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_32",
    "id" : "dend_32",
    "points3d" : [ "5.14205, 23.2575, -29.4199, 0.83", "5.3278, 24.5691, -30.4487, 0.83", "5.79246, 28.1121, -33.0097, 0.28", "5.91782, 29.2029, -33.8339, 0.83", "6.06932, 31.0822, -35.1797, 0.55", "6.16866, 33.0315, -36.5644, 0.83", "6.24674, 34.7341, -37.7723, 0.28", "6.29259, 35.6294, -38.3841, 0.55", "6.37626, 38.181, -40.1075, 0.28", "6.41489, 40.0424, -41.5212, 0.83", "6.39346, 42.6643, -43.6285, 0.28", "6.36184, 43.7072, -44.5386, 0.83", "6.33453, 44.896, -45.694, 0.83", "6.26826, 47.3941, -48.3754, 0.28", "6.2612, 48.5134, -49.7189, 0.55", "6.27188, 49.3539, -50.8579, 0.28", "6.27522, 50.1098, -51.95, 0.83", "6.23074, 51.5669, -54.0957, 0.28", "6.24428, 52.0702, -54.9408, 0.83", "6.39852, 53.4253, -57.3221, 0.28", "6.48284, 53.8464, -58.0742, 0.55", "6.54837, 54.0924, -58.5172, 0.28", "6.66071, 54.4715, -59.19, 0.83", "7.43954, 57.1349, -63.3351, 0.28", "7.56595, 57.5118, -63.8458, 0.83", "8.1821, 59.2632, -65.9348, 0.28", "8.35075, 59.7114, -66.4688, 0.55", "9.21812, 61.9416, -68.9461, 0.28", "9.88881, 63.7508, -70.8813, 1.11", "10.4644, 65.7181, -73.0578, 0.28", "10.8111, 67.1739, -74.8644, 0.55", "11.256, 69.6175, -78.2201, 0.28", "11.4011, 70.9636, -80.1913, 0.83", "11.3499, 72.0679, -82.2852, 0.83", "10.8068, 74.5152, -87.9863, 0.28", "10.5455, 75.2258, -89.8327, 1.11", "10.228, 75.8576, -91.6319, 0.28", "10.0454, 76.1171, -92.4469, 1.11", "7.99584, 78.2961, -100.642, 0.28", "7.47152, 78.7734, -102.677, 1.11" ],
    "parent" : "dend_31",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "18.9503, 12.8126, 6.87928, 0.55", "19.9186, 14.453, 6.85974, 0.55", "20.9573, 16.1013, 6.9902, 0.55", "22.5678, 18.5086, 7.46834, 1.11", "24.0959, 20.7931, 8.08052, 0.55", "25.4518, 22.8105, 8.68364, 0.55", "26.815, 24.8654, 9.38711, 0.55", "29.0853, 28.3171, 11.0581, 0.55", "31.2874, 31.7364, 13.0672, 0.55", "32.3148, 33.3502, 14.1595, 0.55", "33.6721, 35.5664, 15.8286, 0.55", "35.2882, 38.2665, 18.0264, 0.55", "37.2661, 41.7375, 21.0003, 0.55", "37.9822, 43.1734, 22.1725, 0.28", "38.1626, 43.565, 22.4979, 0.55", "38.5278, 44.3726, 23.1982, 0.28", "38.7011, 44.8024, 23.5923, 0.55", "39.2016, 46.117, 24.5387, 0.28", "39.6903, 47.4614, 24.8148, 0.55", "45.9162, 54.5135, 27.8019, 0.55", "52.1931, 61.8541, 29.7811, 0.55", "58.3577, 69.4714, 30.7617, 0.55", "62.5748, 78.3067, 31.0742, 0.55", "65.9351, 87.2989, 32.9847, 0.55", "70.5081, 95.5185, 35.8162, 0.55", "74.967, 103.415, 39.6264, 0.55" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "18.9503, 12.8126, 6.87928, 0.28", "18.7586, 12.4197, 8.61, 0.28", "18.4568, 11.8011, 11.3343, 0.83", "17.8296, 10.5155, 16.9962, 0.55", "17.6305, 10.1073, 18.7938, 0.55", "17.3319, 9.49526, 21.4895, 0.55", "15.3884, 8.55846, 31.2516, 0.55", "13.714, 8.63912, 41.1101, 0.55" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-27.6723, 5.49943, 4.73584, 0.55", "-34.9374, 6.18746, 6.87156, 0.55", "-38.0275, 6.36314, 7.80144, 0.55", "-42.1567, 6.63709, 9.02514, 0.55", "-45.5725, 6.97431, 10.0084, 0.55", "-49.4263, 7.47633, 11.1218, 0.55", "-53.4992, 8.16109, 12.3582, 0.55", "-55.5345, 8.59523, 13.1637, 0.55", "-57.6043, 9.24116, 14.1455, 0.55", "-60.2045, 10.3144, 15.4952, 0.55", "-61.7378, 11.0894, 16.4097, 0.55", "-63.639, 12.2315, 17.6712, 0.55", "-66.1369, 13.7519, 19.5872, 0.55", "-67.8574, 14.8319, 20.9819, 0.55", "-69.9158, 16.0037, 22.7274, 0.55", "-72.4947, 17.3078, 24.9245, 0.55", "-74.7964, 18.3248, 26.7489, 0.55", "-77.7824, 19.5684, 28.9604, 0.55", "-85.9794, 20.811, 34.5447, 0.55", "-93.6233, 22.7887, 40.6649, 0.55", "-101.711, 25.7975, 45.6718, 0.55", "-110.726, 27.4465, 49.6555, 0.55", "-119.285, 27.741, 54.8176, 0.55", "-127.741, 27.9717, 60.1497, 0.55", "-135.76, 28.9839, 66.0344, 0.55", "-144.488, 29.1629, 70.9112, 0.55", "-152.987, 28.0304, 76.051, 0.55", "-160.469, 25.6665, 82.2274, 0.55", "-166.548, 21.5055, 88.9227, 0.55" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-27.6723, 5.49943, 4.73584, 0.55", "-29.744, 6.72194, 3.90736, 0.55", "-31.6383, 7.87686, 3.18408, 0.55", "-35.1733, 9.91506, 1.94122, 0.55", "-41.0047, 13.3786, -0.0774207, 0.55", "-43.7944, 15.0787, -0.99417, 0.55", "-46.2215, 16.5838, -1.81382, 0.55", "-47.8563, 17.5642, -2.38551, 0.55", "-50.37, 19.0769, -3.32361, 0.55", "-53.5653, 21.0148, -4.5335, 0.55", "-56.6004, 22.8804, -5.50973, 0.55", "-58.7747, 24.1473, -6.20493, 0.55", "-60.1728, 24.9377, -6.66396, 0.55", "-64.0147, 27.0364, -7.86535, 0.55", "-65.7125, 27.9818, -8.355, 0.55", "-68.9659, 29.6804, -9.1368, 0.55", "-70.4344, 30.4865, -9.43335, 0.55", "-74.7716, 32.8589, -10.1496, 0.55", "-78.0104, 34.7224, -10.6192, 0.55", "-80.0158, 35.901, -10.7966, 0.55", "-82.8758, 37.6171, -11.0064, 0.55", "-86.2026, 39.6408, -11.1511, 0.55", "-88.3424, 41.0579, -11.2136, 0.55", "-91.1782, 43.095, -11.1771, 0.55", "-93.17, 44.5921, -11.1067, 0.55", "-94.4358, 45.5972, -11.0263, 0.83", "-96.8024, 47.6608, -10.8974, 0.55", "-98.064, 48.7967, -10.8387, 0.83", "-99.8523, 50.5232, -10.8004, 0.55", "-101.097, 51.7332, -10.8258, 0.55", "-103.599, 54.2275, -11.0208, 1.38", "-106.165, 56.7868, -11.1756, 0.55", "-107.224, 57.8076, -11.3271, 0.83", "-109.076, 59.5604, -11.6856, 0.55", "-110.215, 60.5679, -11.9994, 0.55", "-112.022, 62.1105, -12.6321, 0.28", "-113.919, 63.5749, -13.3736, 0.83", "-117.441, 65.9614, -14.7661, 0.55", "-118.725, 66.7549, -15.2806, 0.83", "-121.456, 68.2586, -16.4099, 0.83", "-123.875, 69.4867, -17.417, 0.55", "-126.223, 70.6024, -18.3666, 0.55", "-129.037, 71.8131, -19.444, 0.55", "-130.488, 72.3299, -19.8757, 1.11", "-133.304, 73.2118, -20.6842, 0.55", "-134.458, 73.5502, -20.9809, 0.55", "-135.854, 73.9316, -21.3167, 0.83", "-137.578, 74.4182, -21.7908, 0.83", "-140.582, 75.3267, -22.6405, 0.55", "-143.65, 76.2291, -23.6043, 0.55", "-145.346, 76.6894, -24.1944, 0.55", "-146.647, 76.9997, -24.7157, 0.83", "-149.508, 77.5914, -25.9354, 0.55", "-150.946, 77.9009, -26.6066, 0.55", "-152.703, 78.2754, -27.455, 0.55", "-154.612, 78.6202, -28.345, 0.83", "-155.925, 78.7983, -29.0538, 0.55", "-157.533, 78.9739, -29.9497, 0.83", "-161.159, 79.4769, -31.9441, 0.55", "-162.467, 79.777, -32.6053, 0.28", "-163.148, 80.0072, -32.9202, 0.55", "-166.552, 81.517, -34.4111, 0.28", "-168.391, 82.4659, -35.18, 0.55", "-170.005, 83.396, -35.7461, 0.28", "-172.921, 85.1736, -36.578, 0.55", "-174.465, 86.1511, -36.9928, 0.55", "-175.536, 86.8248, -37.2359, 0.28", "-176.5, 87.3929, -37.4382, 0.55", "-178.395, 88.3111, -37.9295, 0.28", "-181.822, 89.6228, -38.909, 0.83", "-184.064, 90.3423, -39.6192, 0.28", "-185.835, 90.889, -40.1557, 0.55", "-188.773, 91.7424, -41.0512, 0.28", "-190.757, 92.2893, -41.5381, 0.55", "-191.938, 92.5836, -41.7677, 0.55", "-194.787, 93.3088, -41.7213, 0.28", "-195.861, 93.6143, -41.5116, 0.28", "-197.38, 94.1205, -40.9018, 0.55", "-200.298, 95.1921, -39.1241, 0.28", "-201.501, 95.6718, -38.2027, 0.55", "-205.147, 97.0749, -34.9675, 0.28", "-205.724, 97.289, -34.4117, 0.55", "-207.064, 97.7932, -33.133, 0.28", "-207.445, 97.9418, -32.7565, 0.55", "-209.437, 98.7571, -31.0156, 0.28", "-209.846, 98.9308, -30.6819, 0.55", "-211.571, 99.5594, -30.0081, 0.28", "-211.808, 99.6554, -29.9161, 0.55" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "19.3965, -42.0945, -10.0901, 0.55", "23.3867, -43.2565, -11.8003, 0.55", "25.0227, -43.7912, -12.4854, 0.55", "28.5877, -45.1356, -13.8952, 0.28", "30.1002, -45.7886, -14.451, 0.55", "31.5697, -46.4369, -14.9515, 0.28", "32.1947, -46.7141, -15.1457, 0.55", "34.2986, -47.8415, -15.7522, 0.28", "35.8105, -48.6962, -16.0709, 0.28", "37.3256, -49.5775, -16.2111, 0.55", "38.3992, -50.1755, -16.3003, 0.55", "39.8738, -50.9732, -16.3887, 0.28", "41.4596, -51.7445, -16.4624, 0.55", "42.0245, -51.9844, -16.4828, 0.55", "44.0723, -52.821, -16.5737, 0.55", "44.8771, -53.1465, -16.629, 0.55", "47.7493, -54.2507, -16.87, 0.55", "48.7608, -54.6543, -17.0176, 0.55", "51.0921, -55.591, -17.4533, 0.55", "52.8258, -56.3306, -17.9413, 0.55", "54.0474, -56.8717, -18.377, 0.83", "55.8283, -57.6825, -19.1581, 0.83", "58.6213, -58.9253, -20.5463, 0.28", "59.7852, -59.4512, -21.1491, 0.83", "62.3047, -60.4831, -22.5805, 0.28", "63.2341, -60.854, -23.1315, 0.55", "64.4638, -61.3139, -23.8747, 0.28", "66.2915, -61.9119, -24.9915, 0.83", "66.7587, -62.0301, -25.2701, 0.83", "69.3208, -62.6108, -26.8022, 0.28", "71.0164, -62.9693, -27.7378, 0.83", "73.0065, -63.38, -28.892, 0.28", "73.7535, -63.5209, -29.3187, 1.11", "76.8129, -64.1518, -31.3554, 0.55", "77.6279, -64.3376, -31.899, 0.55", "78.7839, -64.6195, -32.6494, 0.83", "81.0174, -65.174, -34.0922, 0.28", "81.9294, -65.4431, -34.6747, 0.55", "85.1824, -66.4342, -36.7972, 0.28", "87.2252, -67.0264, -38.1201, 0.28", "87.677, -67.1501, -38.405, 1.11", "89.7917, -67.6497, -39.6706, 0.28", "90.5627, -67.7878, -40.0731, 0.55", "92.7109, -68.0317, -41.1088, 0.28", "93.2463, -68.0416, -41.3065, 1.11", "95.7001, -67.9434, -42.163, 0.28", "96.2854, -67.884, -42.3578, 0.28", "97.4007, -67.7038, -42.6748, 0.55", "99.4748, -67.2979, -43.2294, 0.28", "101.967, -66.7337, -43.8222, 0.28", "103.047, -66.4582, -44.075, 0.83", "105.686, -65.6521, -44.7194, 0.28", "107.632, -64.9849, -45.2053, 0.83", "109.507, -64.1557, -45.5664, 0.28", "110.68, -63.4528, -45.6923, 0.28", "111.798, -62.3855, -45.8088, 0.83", "112.744, -61.1014, -45.8162, 0.28", "112.921, -60.7511, -45.825, 0.83", "114.257, -57.1107, -46.045, 0.28", "114.483, -56.2866, -46.1201, 0.83", "115.489, -52.1279, -46.6937, 0.28", "115.887, -50.2672, -46.8276, 0.83", "116.801, -46.6103, -46.8921, 0.28", "116.995, -46.0074, -46.9566, 0.55", "117.797, -43.9489, -47.3005, 0.28", "118.675, -42.2169, -47.499, 0.55", "122.349, -36.4376, -47.8123, 0.28", "123.908, -34.3552, -47.8723, 0.83", "128.253, -29.0968, -47.7355, 0.28", "129.151, -28.1044, -47.7111, 0.55", "132.621, -24.785, -47.6121, 0.28", "133.529, -24.0586, -47.6117, 0.28", "134.617, -23.503, -47.7539, 0.83" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "19.3965, -42.0945, -10.0901, 0.55", "21.1919, -42.4798, -9.20959, 0.55", "23.5287, -43.0138, -8.14551, 0.55", "27.278, -43.9775, -6.55183, 0.55", "29.2203, -44.4804, -5.7701, 0.28", "32.3541, -45.3759, -4.60608, 0.28", "34.1885, -45.9534, -4.01734, 0.83", "36.2734, -46.6714, -3.42698, 0.28", "37.5289, -47.1883, -3.17372, 0.55", "38.229, -47.537, -3.11666, 0.28", "40.3594, -48.5775, -3.08115, 0.83", "42.9937, -49.7863, -3.1996, 0.55", "44.8543, -50.5168, -3.24173, 0.83", "47.0771, -51.3018, -3.24973, 0.55", "49.796, -52.2546, -3.2366, 0.55", "53.806, -53.608, -3.2217, 0.55", "55.4792, -54.134, -3.20651, 0.55", "58.7648, -55.2144, -3.15624, 0.55", "61.7163, -56.3006, -3.10245, 0.55", "64.4738, -57.4517, -3.04021, 0.83", "67.4605, -58.9839, -2.95866, 0.55", "69.4233, -60.1651, -2.91222, 0.55", "71.5607, -61.5211, -2.85527, 0.55", "73.5601, -62.8097, -2.848, 0.55", "75.0039, -63.6458, -2.83276, 0.55", "77.3997, -64.9901, -2.76096, 0.83", "79.6342, -66.2481, -2.65334, 0.83", "81.1468, -67.0435, -2.497, 0.55", "82.9019, -67.8314, -2.24936, 0.55", "85.7625, -69.0406, -1.21022, 0.55", "87.2658, -69.6339, -0.290111, 0.28", "87.9112, -69.8964, 0.238446, 0.55", "89.939, -70.8172, 2.22975, 0.28", "90.9252, -71.2937, 3.35689, 0.55", "95.0871, -73.4064, 8.99908, 0.55", "96.5088, -74.0588, 11.2812, 0.55", "97.4257, -74.4189, 12.8588, 0.55", "106.139, -77.9423, 16.1785, 0.55" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-1.74088, -35.9747, 0.826227, 0.83", "-1.39575, -39.9324, 1.50738, 0.83", "-1.20933, -42.0702, 1.87532, 0.83", "-0.950951, -45.0331, 2.38525, 1.11" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-1.74088, -35.9747, 0.826227, 0.83", "-2.73884, -39.5574, 0.832533, 0.83", "-3.5417, -42.4396, 0.837607, 0.55", "-4.63278, -46.3566, 0.844502, 0.83" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "13.714, 8.63912, 41.1101, 0.55", "10.7421, 8.95458, 50.6528, 0.55", "8.49237, 7.60741, 60.298, 0.55", "7.99121, 7.67462, 70.2852, 0.55", "8.3838, 9.03283, 80.1799, 0.55", "8.72428, 9.07543, 90.174, 0.55", "7.23905, 9.76936, 100.037, 0.55", "4.55967, 11.327, 109.538, 0.55", "1.05959, 11.1783, 118.904, 0.55", "-3.33147, 11.623, 127.877, 0.55", "-8.02789, 12.1862, 136.687, 0.55", "-12.1462, 12.979, 145.763, 0.55", "-16.798, 15.1112, 154.341, 0.55", "-21.3559, 17.2966, 162.955, 0.55", "-25.363, 19.5007, 171.834, 0.55", "-28.5491, 20.5136, 181.255, 0.55", "-31.792, 22.1543, 190.564, 0.55", "-35.4662, 22.5207, 199.857, 0.55", "-38.0635, 22.2537, 209.51, 0.55", "-38.9507, 22.6731, 219.461, 0.55", "-39.7828, 21.369, 229.336, 0.55" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "13.714, 8.63912, 41.1101, 0.55", "13.0793, 6.60963, 50.8704, 0.55", "11.4906, 4.7007, 60.5474, 0.55", "10.8666, 0.693668, 69.6424, 0.55", "8.67971, -2.28936, 78.9083, 0.55", "8.51435, -6.24505, 88.0469, 0.55", "6.369, -8.50978, 97.5338, 0.55", "3.4758, -10.7487, 106.826, 0.55", "0.160647, -12.696, 116.047, 0.55", "-2.32385, -16.0601, 125.098, 0.55", "-5.58829, -17.4606, 134.44, 0.55" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-0.950951, -45.0331, 2.38525, 0.83", "-0.340333, -46.475, 3.06051, 0.83", "0.771432, -48.569, 4.32975, 0.83", "2.04907, -50.5148, 5.79171, 0.83", "3.8937, -53.2387, 7.94032, 0.83", "5.23599, -55.2355, 9.48693, 0.83", "6.83159, -57.4312, 11.2224, 0.83", "8.26468, -59.169, 12.7119, 0.83", "10.1685, -61.0004, 14.4486, 0.83", "11.6509, -62.2852, 15.5523, 0.83", "12.8968, -63.418, 16.2904, 0.83", "14.5839, -65.0176, 17.0606, 0.83", "16.7522, -67.1704, 17.8026, 0.83", "18.6108, -69.1184, 18.3572, 0.83", "21.8618, -72.5263, 19.1659, 0.83", "23.5736, -74.2515, 19.5702, 0.55", "24.5457, -75.2727, 19.7961, 0.55", "25.8566, -76.8836, 20.0784, 0.55", "27.1593, -78.6324, 20.3297, 0.55", "32.1952, -86.9161, 21.8968, 0.55", "36.9983, -94.7874, 25.3253, 0.55", "41.1603, -103.094, 28.5048, 0.55", "45.5955, -111.149, 31.9786, 0.55", "50.1387, -118.084, 37.3419, 0.55", "54.1001, -124.584, 43.6561, 0.55", "58.3415, -131.643, 49.0958, 0.55", "63.5888, -138.971, 53.0922, 0.55", "68.2409, -145.598, 58.7633, 0.55", "73.9423, -151.196, 64.64, 0.55", "79.4854, -155.799, 71.4944, 0.55" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-0.950951, -45.0331, 2.38525, 0.83", "-0.710081, -46.6643, 2.2447, 0.83", "0.0216844, -51.5542, 1.59343, 0.83", "0.521143, -54.7314, 1.05301, 0.83", "1.03246, -58.2235, 0.354956, 0.83", "1.50945, -61.7242, -0.397378, 0.83", "1.77623, -63.8736, -0.866856, 0.83", "2.11932, -66.7783, -1.57477, 0.83", "2.32032, -69.5053, -2.26776, 0.83", "2.42487, -73.067, -3.20386, 0.83", "2.43232, -76.5763, -4.21136, 0.83", "2.3479, -80.8284, -5.48935, 0.83", "2.20779, -84.4289, -6.63162, 0.83", "1.85876, -90.8936, -8.70275, 0.83", "1.60553, -95.1565, -10.0693, 0.83", "1.38011, -99.4228, -11.4221, 0.83", "1.16989, -103.916, -12.7927, 0.83", "0.883649, -110.695, -14.7371, 0.83", "0.715176, -114.432, -15.7419, 0.83", "0.558727, -118.458, -16.8003, 0.83", "0.481127, -121.271, -17.555, 0.83", "0.4302, -123.725, -18.1862, 0.83", "0.438178, -126.082, -18.8308, 0.83", "0.495872, -129.563, -19.8037, 0.83", "0.572626, -133.143, -20.88, 0.83", "0.769011, -139.615, -22.8358, 0.83", "0.864389, -142.343, -23.647, 0.55", "0.947283, -143.871, -24.0713, 0.83", "1.31406, -148.692, -25.1923, 0.83", "1.57994, -151.664, -25.7066, 0.55", "1.80578, -154.736, -25.7486, 0.83", "1.86757, -156.361, -25.6259, 0.55", "1.92602, -159.264, -25.405, 0.83", "1.82584, -163.977, -25.0397, 0.83", "1.69148, -166.746, -24.901, 0.83", "1.02971, -175.378, -24.7597, 0.83", "0.485677, -180.93, -24.8403, 0.55", "0.200333, -183.476, -24.9876, 0.83", "-0.259141, -186.914, -25.4271, 0.83", "-0.783461, -190.243, -26.1374, 0.55", "-0.95585, -191.295, -26.4835, 1.11", "-1.14793, -192.621, -27.0812, 0.55", "-1.29772, -194.354, -27.6562, 0.83", "-1.35071, -196.175, -28.1752, 0.55", "-1.27926, -198.415, -28.752, 0.83", "-1.16194, -200.542, -29.2605, 0.55", "-1.03998, -202.298, -29.6932, 0.55", "-0.779976, -205.689, -30.5905, 0.83", "-0.595487, -208.027, -31.2034, 0.55", "-0.523059, -208.805, -31.4229, 0.83", "-0.336199, -210.376, -31.9165, 0.28", "-0.269458, -210.948, -32.1183, 0.55", "-0.116122, -212.314, -32.7354, 0.28", "0.0121725, -213.395, -33.2901, 0.55", "0.165385, -215.316, -34.2007, 0.28", "0.270211, -216.406, -34.7213, 0.28", "0.451115, -217.988, -35.461, 0.55", "0.748044, -220.159, -36.4731, 0.83", "0.984156, -221.71, -37.1688, 0.83", "1.40683, -224.108, -38.2693, 0.83" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-4.63278, -46.3566, 0.844502, 0.83", "-6.69324, -50.2907, 1.16962, 0.83", "-8.49114, -53.9015, 1.68203, 0.83", "-9.98714, -56.9533, 2.20663, 0.55", "-11.2774, -59.6744, 2.71212, 0.55", "-11.9711, -61.1489, 3.00606, 0.28", "-12.6566, -62.6257, 3.31236, 0.55", "-13.8531, -65.6572, 4.12707, 0.55", "-14.2503, -66.7597, 4.46494, 0.28", "-14.745, -68.1918, 5.06764, 0.55", "-15.0538, -69.0857, 5.53025, 0.28", "-15.2838, -69.7842, 5.8979, 0.83", "-15.9871, -72.2817, 7.16437, 0.55", "-16.3655, -73.733, 7.79545, 0.55", "-16.7545, -74.838, 8.31581, 0.83", "-17.164, -75.8227, 8.72415, 0.28", "-17.4761, -76.5372, 8.95833, 0.55", "-18.2217, -78.0651, 9.3016, 0.28", "-19.1354, -79.7847, 9.55621, 0.55", "-20.6235, -82.3281, 9.89646, 0.55", "-22.2078, -84.8277, 10.1459, 0.55", "-22.9766, -85.9819, 10.2312, 0.55", "-24.4828, -88.1962, 10.3338, 0.55", "-28.034, -97.298, 10.8272, 0.55" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-4.63278, -46.3566, 0.844502, 0.83", "-4.55101, -48.5577, 0.827403, 0.83", "-4.50886, -49.9298, 0.813426, 1.11", "-4.57641, -52.0908, 0.910725, 0.55", "-4.74456, -53.8621, 1.02177, 0.28", "-4.93356, -55.0488, 1.13401, 0.55", "-5.22345, -56.3929, 1.29818, 0.28", "-5.50031, -57.1456, 1.42761, 0.83", "-6.41331, -58.9001, 1.82261, 0.28", "-7.0091, -59.7757, 2.11225, 0.55", "-7.70772, -60.6657, 2.44561, 0.28", "-8.54952, -61.7199, 2.85469, 0.83", "-9.62702, -63.1045, 3.43924, 0.28", "-10.5642, -64.3547, 3.95637, 0.55", "-11.8253, -66.2043, 4.50701, 0.28", "-12.6821, -67.503, 4.81566, 0.55", "-13.4196, -68.7453, 4.94738, 0.28", "-14.3644, -70.5543, 4.93044, 0.55", "-14.9715, -72.01, 4.78325, 0.55", "-15.9108, -74.7761, 4.23875, 0.28", "-16.1106, -75.6865, 3.92779, 0.55", "-16.3471, -77.8056, 3.06732, 0.28", "-16.3455, -78.8, 2.64227, 0.55", "-16.251, -80.1593, 2.01994, 0.28", "-16.1019, -81.3028, 1.55345, 0.83", "-15.772, -83.3967, 0.959061, 0.28", "-15.6559, -83.9658, 0.796632, 0.28", "-15.2044, -86.0423, 0.282414, 0.55", "-18.5709, -95.1766, 1.22974, 0.55", "-22.2051, -104.25, 1.68266, 0.55", "-24.4906, -113.68, 2.79014, 0.55", "-28.2162, -122.692, 1.95958, 0.55", "-33.5395, -130.662, -0.239277, 0.55", "-39.2125, -138.689, -0.0440132, 0.55", "-45.5252, -146.223, 0.624929, 0.55", "-51.5369, -153.987, 1.29712, 0.55", "-58.5959, -160.848, 2.09757, 0.55", "-66.6818, -166.585, 2.0954, 0.55", "-74.9918, -171.75, 0.396799, 0.55" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "1.40683, -224.108, -38.2693, 0.83", "1.52765, -226.776, -39.189, 0.83", "1.94166, -230.97, -40.2711, 0.55", "2.08623, -232.483, -40.6558, 0.83", "2.21724, -233.909, -41.0518, 0.55", "2.32308, -235.1, -41.385, 0.83", "2.55699, -237.691, -42.1095, 0.83", "2.91136, -241.29, -43.1423, 0.83", "3.45139, -246.444, -44.4027, 0.28", "3.69893, -248.876, -44.9598, 0.83", "3.96154, -251.304, -45.5266, 0.55", "4.00727, -251.675, -45.6196, 0.83", "4.29854, -253.662, -46.1481, 0.55", "4.86261, -257.151, -47.0757, 0.83", "5.21336, -258.904, -47.4814, 0.55", "5.73689, -261.265, -47.9912, 0.83", "6.13057, -263.114, -48.4318, 0.55", "6.46317, -264.748, -48.8443, 0.83", "6.78336, -266.493, -49.3158, 1.11", "7.0081, -268.06, -49.7738, 0.83", "7.28479, -270.759, -50.5414, 0.55", "7.43405, -272.697, -51.0301, 0.83", "7.53033, -274.499, -51.4586, 1.11", "7.57798, -276.687, -52.0205, 0.83", "7.60435, -278.022, -52.3622, 0.83", "7.64632, -279.008, -52.5985, 1.11", "7.8999, -281.674, -53.1304, 0.83", "8.015, -282.504, -53.2745, 0.83", "8.61376, -286.198, -53.8627, 0.55", "9.05643, -288.45, -54.222, 0.55", "9.48976, -290.563, -54.5561, 0.83", "10.309, -294.566, -55.1453, 0.83", "10.6291, -296.269, -55.3877, 0.55", "10.8839, -297.686, -55.5712, 0.83", "11.1832, -299.456, -55.7568, 0.55", "11.404, -301.58, -56.0982, 0.83", "11.4935, -303.164, -56.4301, 0.83", "11.5387, -304.803, -56.9463, 0.55", "11.5587, -305.448, -57.1752, 0.83", "11.5945, -306.738, -57.666, 0.55", "11.6715, -309.915, -59.1087, 0.28", "11.711, -311.537, -59.938, 0.83", "11.7802, -315.836, -62.1396, 0.55", "11.7896, -317.27, -62.9113, 0.55", "11.734, -319.782, -64.2364, 0.55", "11.5222, -323.721, -66.1259, 0.55", "11.2411, -326.95, -67.4984, 0.28", "10.9069, -329.722, -68.5986, 0.83", "10.4359, -332.807, -69.7125, 0.55", "9.83746, -336.198, -70.8279, 0.55", "9.02188, -340.29, -72.0028, 0.83", "8.4381, -342.995, -72.6277, 0.55", "8.20166, -344.024, -72.8468, 0.83", "7.46005, -347.186, -73.5171, 0.28", "7.0086, -349.196, -73.882, 0.55", "6.68447, -350.914, -74.2476, 0.83", "6.48561, -352.025, -74.5076, 0.28", "6.4462, -352.283, -74.565, 0.55", "6.28383, -353.676, -74.8626, 0.28", "6.09922, -355.025, -75.0999, 0.83", "5.86192, -356.65, -75.2915, 0.28", "5.73994, -357.409, -75.3256, 0.55", "5.42983, -359.35, -75.3775, 0.28", "5.08688, -361.304, -75.4042, 0.28", "4.51354, -363.951, -75.4727, 0.55", "4.01702, -366.262, -75.5848, 0.28", "3.72195, -367.606, -75.6346, 0.83", "3.26909, -369.708, -75.7363, 0.28", "2.63601, -372.383, -75.9815, 0.83", "1.93987, -375.164, -76.3497, 0.83", "1.35037, -377.484, -76.7094, 0.83", "0.762685, -379.629, -77.0811, 0.28", "0.368002, -381.021, -77.2991, 0.55", "-0.516214, -383.992, -77.6332, 0.28", "-1.28242, -386.589, -77.8469, 0.83", "-2.02729, -389.043, -77.9421, 0.28", "-2.25857, -389.769, -77.9435, 0.55", "-2.84111, -391.591, -77.896, 0.55", "-3.64829, -394.133, -77.7403, 0.28", "-4.10116, -395.685, -77.6064, 0.55", "-5.31231, -399.915, -77.3567, 0.28", "-6.11639, -402.893, -77.3292, 0.83", "-6.50842, -404.424, -77.363, 0.28", "-6.70065, -405.284, -77.4327, 0.83", "-6.94784, -406.596, -77.6191, 0.83", "-7.34684, -408.936, -78.0998, 0.83", "-7.92687, -412.871, -79.1992, 0.28", "-8.06866, -413.92, -79.5295, 0.55", "-8.29745, -415.67, -80.0623, 0.28", "-8.44593, -416.707, -80.3666, 0.55", "-8.67253, -418.322, -80.8214, 0.28", "-8.71351, -418.686, -80.9179, 0.55", "-9.02545, -421.875, -81.6807, 0.28", "-9.05053, -422.442, -81.7898, 0.83", "-9.04833, -424.553, -82.0299, 0.28", "-8.9408, -426.504, -82.2339, 0.83", "-8.70594, -429.034, -82.4563, 0.28", "-8.51994, -430.478, -82.585, 0.83", "-7.99775, -433.719, -82.9165, 0.83", "-7.31889, -437.281, -83.2886, 0.28", "-6.6669, -440.522, -83.6197, 0.83", "-5.94385, -444.041, -83.996, 0.28", "-5.68639, -445.378, -84.1584, 0.83", "-4.97991, -449.704, -84.7669, 0.28", "-4.68984, -452.215, -85.1271, 0.83", "-4.47051, -455.959, -85.9196, 0.28", "-4.50364, -457.297, -86.2491, 0.83", "-4.7742, -459.95, -86.9463, 0.55", "-4.95776, -460.969, -87.2476, 0.55", "-5.68205, -463.825, -88.1878, 0.83", "-7.26713, -468.96, -90.1267, 0.55", "-7.86465, -470.786, -90.8737, 0.55", "-8.67375, -473.326, -91.8188, 1.11", "-9.65216, -476.38, -92.8185, 0.28", "-9.892, -477.124, -93.0426, 0.55", "-10.5962, -479.332, -93.6132, 0.28", "-10.9443, -480.475, -93.7965, 0.55", "-11.6678, -483.213, -94.0893, 0.28", "-12.2631, -485.814, -94.2459, 0.55", "-12.8538, -489.037, -94.1715, 0.28", "-13.1809, -490.936, -94.0894, 0.28", "-13.3814, -492.262, -93.9841, 0.55", "-13.913, -496.021, -93.7073, 0.28", "-13.9789, -496.867, -93.6597, 0.28", "-13.9292, -497.481, -93.5281, 0.83" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 15
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "1.40683, -224.108, -38.2693, 0.83", "2.03069, -222.6, -37.6802, 0.83", "2.42569, -221.913, -37.3328, 0.28", "2.56127, -221.716, -37.2087, 0.55", "3.31177, -220.661, -36.5161, 0.28", "5.08081, -218.174, -34.8836, 0.83", "5.90713, -217.012, -34.121, 0.28", "6.54133, -216.272, -33.5739, 0.55", "7.7861, -214.947, -32.4862, 0.28", "8.29147, -214.46, -32.0571, 0.83" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_34", "dend_29", "dend_28", "dend_21", "dend_18", "dend_13", "dend_0", "dend_36", "dend_35", "dend_31", "dend_30", "dend_23", "dend_22", "dend_20", "dend_19", "dend_15", "dend_14", "dend_10", "dend_1", "dend_33", "dend_32", "dend_27", "dend_24", "dend_17", "dend_16", "dend_12", "dend_11", "dend_5", "dend_2", "dend_26", "dend_25", "dend_9", "dend_6", "dend_4", "dend_3", "dend_8", "dend_7" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_34", "dend_29", "dend_28", "dend_21", "dend_18", "dend_13", "dend_0", "dend_36", "dend_35", "dend_31", "dend_30", "dend_23", "dend_22", "dend_20", "dend_19", "dend_15", "dend_14", "dend_10", "dend_1", "dend_33", "dend_32", "dend_27", "dend_24", "dend_17", "dend_16", "dend_12", "dend_11", "dend_5", "dend_2", "dend_26", "dend_25", "dend_9", "dend_6", "dend_4", "dend_3", "dend_8", "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_34" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_33" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_32" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_35",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_36",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_37",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_38",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_39",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_31" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_40",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_36" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_35" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30", "dend_31", "dend_32", "dend_33", "dend_34", "dend_35", "dend_36" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_29", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_21", "dend_21", "dend_21", "dend_21", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_13", "dend_13", "dend_13", "dend_13", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_36", "dend_36", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_23", "dend_23", "dend_23", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_15", "dend_15", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_5", "dend_5", "dend_5", "dend_2", "dend_2", "dend_2", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.418459",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.026008999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.025854",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.19695699",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "2.0E-6",
    "erev" : "-60.2509"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.9899996E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.008343",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.026899999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.502333",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.653374",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "5.6999997E-5",
    "erev" : "-76.49812"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "7.84E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.30005398",
    "erev" : "50.0"
  }, {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.002256",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.38E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.005574",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "7.92E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bAC217_L23_MC_40be3bf0e8_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_34, id: dend_34, parent: soma_0
create dend_34
public dend_34
// Section: dend_29, id: dend_29, parent: soma_0
create dend_29
public dend_29
// Section: dend_28, id: dend_28, parent: soma_0
create dend_28
public dend_28
// Section: dend_21, id: dend_21, parent: soma_0
create dend_21
public dend_21
// Section: dend_18, id: dend_18, parent: soma_0
create dend_18
public dend_18
// Section: dend_13, id: dend_13, parent: soma_0
create dend_13
public dend_13
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_36, id: dend_36, parent: dend_34
create dend_36
public dend_36
// Section: dend_35, id: dend_35, parent: dend_34
create dend_35
public dend_35
// Section: dend_31, id: dend_31, parent: dend_29
create dend_31
public dend_31
// Section: dend_30, id: dend_30, parent: dend_29
create dend_30
public dend_30
// Section: dend_23, id: dend_23, parent: dend_21
create dend_23
public dend_23
// Section: dend_22, id: dend_22, parent: dend_21
create dend_22
public dend_22
// Section: dend_20, id: dend_20, parent: dend_18
create dend_20
public dend_20
// Section: dend_19, id: dend_19, parent: dend_18
create dend_19
public dend_19
// Section: dend_15, id: dend_15, parent: dend_13
create dend_15
public dend_15
// Section: dend_14, id: dend_14, parent: dend_13
create dend_14
public dend_14
// Section: dend_10, id: dend_10, parent: dend_0
create dend_10
public dend_10
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_33, id: dend_33, parent: dend_31
create dend_33
public dend_33
// Section: dend_32, id: dend_32, parent: dend_31
create dend_32
public dend_32
// Section: dend_27, id: dend_27, parent: dend_23
create dend_27
public dend_27
// Section: dend_24, id: dend_24, parent: dend_23
create dend_24
public dend_24
// Section: dend_17, id: dend_17, parent: dend_15
create dend_17
public dend_17
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_12, id: dend_12, parent: dend_10
create dend_12
public dend_12
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_5, id: dend_5, parent: dend_1
create dend_5
public dend_5
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_26, id: dend_26, parent: dend_24
create dend_26
public dend_26
// Section: dend_25, id: dend_25, parent: dend_24
create dend_25
public dend_25
// Section: dend_9, id: dend_9, parent: dend_5
create dend_9
public dend_9
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_4, id: dend_4, parent: dend_2
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_8, id: dend_8, parent: dend_6
create dend_8
public dend_8
// Section: dend_7, id: dend_7, parent: dend_6
create dend_7
public dend_7

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_34, dend_29, dend_28, dend_21, dend_18, dend_13, dend_0, dend_36, dend_35, dend_31, dend_30, dend_23, dend_22, dend_20, dend_19, dend_15, dend_14, dend_10, dend_1, dend_33, dend_32, dend_27, dend_24, dend_17, dend_16, dend_12, dend_11, dend_5, dend_2, dend_26, dend_25, dend_9, dend_6, dend_4, dend_3, dend_8, dend_7]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_34, dend_29, dend_28, dend_21, dend_18, dend_13, dend_0, dend_36, dend_35, dend_31, dend_30, dend_23, dend_22, dend_20, dend_19, dend_15, dend_14, dend_10, dend_1, dend_33, dend_32, dend_27, dend_24, dend_17, dend_16, dend_12, dend_11, dend_5, dend_2, dend_26, dend_25, dend_9, dend_6, dend_4, dend_3, dend_8, dend_7]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_34]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_33]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_32]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_35
// Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_36
// Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_37
// Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_38
// Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_39
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_31]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_40
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_36]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_35]}
objref OneSecGrp_SectionRef_11
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_29, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_21, dend_21, dend_21, dend_21, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_13, dend_13, dend_13, dend_13, dend_0, dend_0, dend_0, axon_0, axon_0, dend_36, dend_36, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_15, dend_15, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_1, dend_1, dend_1, axon_1, axon_1, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_34(0), soma_0(0.44999980326364536)
    connect dend_29(0), soma_0(0.44999980326364536)
    connect dend_28(0), soma_0(0.44999980326364536)
    connect dend_21(0), soma_0(0.44999980326364536)
    connect dend_18(0), soma_0(0.44999980326364536)
    connect dend_13(0), soma_0(0.44999980326364536)
    connect dend_0(0), soma_0(0.44999980326364536)
    connect axon_0(0), soma_0(1.0)
    connect dend_36(0), dend_34(1.0)
    connect dend_35(0), dend_34(1.0)
    connect dend_31(0), dend_29(1.0)
    connect dend_30(0), dend_29(1.0)
    connect dend_23(0), dend_21(1.0)
    connect dend_22(0), dend_21(1.0)
    connect dend_20(0), dend_18(1.0)
    connect dend_19(0), dend_18(1.0)
    connect dend_15(0), dend_13(1.0)
    connect dend_14(0), dend_13(1.0)
    connect dend_10(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_33(0), dend_31(1.0)
    connect dend_32(0), dend_31(1.0)
    connect dend_27(0), dend_23(1.0)
    connect dend_24(0), dend_23(1.0)
    connect dend_17(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_12(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_5(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_26(0), dend_24(1.0)
    connect dend_25(0), dend_24(1.0)
    connect dend_9(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_4(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_8(0), dend_6(1.0)
    connect dend_7(0), dend_6(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( 0.725337, -8.55593, -0.229478, 3.8774 ) }
    soma_0 { pt3dadd( 0.647393, -7.79641, -0.208964, 4.51671 ) }
    soma_0 { pt3dadd( 0.569448, -7.03689, -0.18845, 5.69414 ) }
    soma_0 { pt3dadd( 0.491504, -6.27738, -0.167936, 6.77437 ) }
    soma_0 { pt3dadd( 0.413559, -5.51786, -0.147422, 7.82093 ) }
    soma_0 { pt3dadd( 0.335615, -4.75834, -0.126908, 8.78768 ) }
    soma_0 { pt3dadd( 0.257671, -3.99883, -0.106394, 9.74949 ) }
    soma_0 { pt3dadd( 0.179726, -3.23931, -0.0858799, 10.6187 ) }
    soma_0 { pt3dadd( 0.101782, -2.47979, -0.0653659, 11.512 ) }
    soma_0 { pt3dadd( 0.0238371, -1.72028, -0.0448518, 12.9024 ) }
    soma_0 { pt3dadd( -0.0541074, -0.96076, -0.0243378, 14.2989 ) }
    soma_0 { pt3dadd( -0.132052, -0.201243, -0.00382374, 14.4715 ) }
    soma_0 { pt3dadd( -0.209996, 0.558274, 0.0166903, 13.6944 ) }
    soma_0 { pt3dadd( -0.287941, 1.31779, 0.0372043, 12.9254 ) }
    soma_0 { pt3dadd( -0.365885, 2.07731, 0.0577184, 12.2751 ) }
    soma_0 { pt3dadd( -0.44383, 2.83682, 0.0782324, 11.7006 ) }
    soma_0 { pt3dadd( -0.521774, 3.59634, 0.0987465, 11.253 ) }
    soma_0 { pt3dadd( -0.599719, 4.35586, 0.119261, 9.95291 ) }
    soma_0 { pt3dadd( -0.677663, 5.11537, 0.139775, 8.58253 ) }
    soma_0 { pt3dadd( -0.755608, 5.87489, 0.160289, 6.53956 ) }
    soma_0 { pt3dadd( -0.833552, 6.63441, 0.180803, 3.68564 ) }
    // Section: dend_34, id: dend_34, parent: soma_0 (entry count 21/100)
    dend_34 { pt3dclear() }
    dend_34 { pt3dadd( -3.25414, 3.52588, -14.7351, 0.55 ) }
    dend_34 { pt3dadd( -4.49753, 4.59071, -15.0244, 0.55 ) }
    dend_34 { pt3dadd( -6.92196, 6.73142, -15.6974, 0.55 ) }
    dend_34 { pt3dadd( -8.669, 8.32219, -16.2037, 0.55 ) }
    dend_34 { pt3dadd( -11.6789, 11.0787, -17.1173, 0.55 ) }
    dend_34 { pt3dadd( -13.0441, 12.336, -17.5314, 0.55 ) }
    dend_34 { pt3dadd( -14.7527, 13.925, -18.0228, 1.11 ) }
    dend_34 { pt3dadd( -16.7288, 15.8754, -18.6169, 0.55 ) }
    dend_34 { pt3dadd( -17.7346, 17.0073, -18.8909, 0.55 ) }
    dend_34 { pt3dadd( -19.6363, 19.211, -19.3089, 0.55 ) }
    dend_34 { pt3dadd( -20.4938, 20.2669, -19.4244, 0.83 ) }
    dend_34 { pt3dadd( -21.7304, 22.0139, -19.4733, 0.55 ) }
    dend_34 { pt3dadd( -23.9052, 25.4247, -19.3377, 0.83 ) }
    dend_34 { pt3dadd( -25.6011, 28.2992, -19.1059, 0.55 ) }
    dend_34 { pt3dadd( -26.017, 29.048, -19.0308, 0.55 ) }
    dend_34 { pt3dadd( -27.3017, 31.5863, -18.6945, 0.83 ) }
    dend_34 { pt3dadd( -28.5672, 34.3162, -18.3102, 0.83 ) }
    dend_34 { pt3dadd( -30.1459, 38.0235, -17.779, 0.55 ) }
    dend_34 { pt3dadd( -30.864, 39.8576, -17.5697, 0.55 ) }
    dend_34 { pt3dadd( -31.5806, 41.8417, -17.4494, 0.55 ) }
    dend_34 { pt3dadd( -32.4873, 44.4475, -17.444, 0.83 ) }
    dend_34 { pt3dadd( -33.3078, 46.8032, -17.5772, 0.83 ) }
    dend_34 { pt3dadd( -34.1877, 49.4216, -17.8701, 0.83 ) }
    dend_34 { pt3dadd( -35.2132, 52.5998, -18.3746, 0.55 ) }
    dend_34 { pt3dadd( -35.9684, 54.8729, -18.7908, 0.83 ) }
    dend_34 { pt3dadd( -36.9085, 57.7941, -19.3767, 0.55 ) }
    dend_34 { pt3dadd( -37.7964, 60.5184, -20.0248, 0.83 ) }
    dend_34 { pt3dadd( -38.4423, 62.5829, -20.6306, 0.55 ) }
    dend_34 { pt3dadd( -38.8677, 64.0369, -21.1018, 0.83 ) }
    dend_34 { pt3dadd( -39.4597, 66.3814, -21.9191, 0.83 ) }
    dend_34 { pt3dadd( -39.8927, 68.3827, -22.6799, 0.83 ) }
    dend_34 { pt3dadd( -40.8449, 73.4123, -24.7277, 0.55 ) }
    dend_34 { pt3dadd( -41.3957, 76.4529, -26.0712, 0.83 ) }
    dend_34 { pt3dadd( -41.8049, 78.6531, -27.0332, 0.28 ) }
    dend_34 { pt3dadd( -42.2703, 81.0233, -28.1065, 0.55 ) }
    dend_34 { pt3dadd( -42.7323, 83.2479, -29.1308, 0.55 ) }
    dend_34 { pt3dadd( -43.5342, 86.8808, -30.8136, 0.28 ) }
    dend_34 { pt3dadd( -43.9897, 88.9761, -31.7026, 0.55 ) }
    dend_34 { pt3dadd( -44.5632, 91.4294, -32.6463, 0.55 ) }
    dend_34 { pt3dadd( -45.1818, 93.987, -33.6779, 0.28 ) }
    dend_34 { pt3dadd( -45.3879, 94.7709, -33.9922, 0.55 ) }
    dend_34 { pt3dadd( -45.7758, 96.2611, -34.6294, 0.28 ) }
    dend_34 { pt3dadd( -46.5009, 98.9599, -35.8924, 0.55 ) }
    dend_34 { pt3dadd( -46.9807, 100.624, -36.6529, 0.28 ) }
    dend_34 { pt3dadd( -47.4491, 102.073, -37.3889, 0.55 ) }
    dend_34 { pt3dadd( -47.7572, 102.934, -37.7549, 0.28 ) }
    dend_34 { pt3dadd( -48.5082, 104.846, -38.4089, 0.83 ) }
    dend_34 { pt3dadd( -49.6811, 107.619, -39.1209, 0.83 ) }
    dend_34 { pt3dadd( -50.6806, 109.957, -39.5405, 0.28 ) }
    dend_34 { pt3dadd( -51.7485, 112.667, -39.8085, 0.55 ) }
    dend_34 { pt3dadd( -53.0617, 116.301, -39.9494, 0.28 ) }
    dend_34 { pt3dadd( -53.8139, 118.625, -39.9347, 0.55 ) }
    dend_34 { pt3dadd( -54.3124, 120.365, -39.8145, 0.83 ) }
    dend_34 { pt3dadd( -54.6765, 121.824, -39.6505, 0.28 ) }
    dend_34 { pt3dadd( -55.0216, 123.429, -39.4735, 0.55 ) }
    dend_34 { pt3dadd( -55.2813, 124.815, -39.2589, 0.28 ) }
    dend_34 { pt3dadd( -55.5488, 126.501, -39.0666, 0.55 ) }
    dend_34 { pt3dadd( -55.7226, 127.758, -38.8973, 0.28 ) }
    dend_34 { pt3dadd( -55.8019, 128.297, -38.8636, 0.55 ) }
    dend_34 { pt3dadd( -56.0931, 129.728, -39.1055, 0.28 ) }
    dend_34 { pt3dadd( -56.3619, 130.825, -39.5421, 0.55 ) }
    dend_34 { pt3dadd( -56.6435, 131.892, -40.0933, 0.28 ) }
    dend_34 { pt3dadd( -56.9325, 132.886, -40.7306, 0.55 ) }
    dend_34 { pt3dadd( -57.7702, 135.674, -42.6486, 0.28 ) }
    dend_34 { pt3dadd( -58.9477, 139.415, -45.3524, 0.28 ) }
    dend_34 { pt3dadd( -59.5641, 141.279, -46.7418, 0.83 ) }
    dend_34 { pt3dadd( -60.1901, 143.07, -48.0984, 0.83 ) }
    dend_34 { pt3dadd( -60.8747, 144.918, -49.4745, 0.28 ) }
    dend_34 { pt3dadd( -61.2582, 145.889, -50.1229, 0.83 ) }
    dend_34 { pt3dadd( -61.642, 146.871, -50.6247, 0.28 ) }
    dend_34 { pt3dadd( -62.1179, 148.065, -51.0618, 0.55 ) }
    dend_34 { pt3dadd( -62.4804, 148.895, -51.3185, 0.28 ) }
    dend_34 { pt3dadd( -62.9722, 149.972, -51.6215, 0.83 ) }
    dend_34 { pt3dadd( -64.5212, 153.415, -52.5046, 0.28 ) }
    dend_34 { pt3dadd( -64.8505, 154.146, -52.6794, 0.83 ) }
    dend_34 { pt3dadd( -65.4523, 155.534, -52.9488, 0.83 ) }
    dend_34 { pt3dadd( -66.1747, 157.289, -53.1923, 0.28 ) }
    dend_34 { pt3dadd( -66.612, 158.42, -53.2154, 0.55 ) }
    dend_34 { pt3dadd( -67.2723, 160.11, -53.117, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_34 { pt3dadd( -67.8073, 161.558, -52.8781, 0.55 ) }
    dend_34 { pt3dadd( -68.9509, 164.746, -52.3902, 0.28 ) }
    dend_34 { pt3dadd( -69.3659, 165.98, -52.2462, 0.55 ) }
    dend_34 { pt3dadd( -70.2588, 168.7, -52.0102, 0.28 ) }
    dend_34 { pt3dadd( -70.7365, 170.024, -51.9409, 0.83 ) }
    dend_34 { pt3dadd( -71.551, 171.846, -51.9247, 0.28 ) }
    dend_34 { pt3dadd( -72.5939, 173.93, -52.0532, 0.55 ) }
    dend_34 { pt3dadd( -73.6702, 175.925, -52.3147, 0.28 ) }
    dend_34 { pt3dadd( -74.1262, 176.774, -52.5119, 0.83 ) }
    dend_34 { pt3dadd( -75.1092, 178.589, -53.0326, 0.83 ) }
    dend_34 { pt3dadd( -76.9645, 182.102, -53.9357, 0.83 ) }
    dend_34 { pt3dadd( -78.3471, 184.732, -54.5749, 0.28 ) }
    dend_34 { pt3dadd( -79.3542, 186.765, -54.9562, 0.55 ) }
    dend_34 { pt3dadd( -80.8165, 189.895, -55.5468, 0.28 ) }
    dend_34 { pt3dadd( -81.5681, 191.625, -55.9305, 0.83 ) }
    dend_34 { pt3dadd( -82.4099, 193.765, -56.4554, 0.28 ) }
    dend_34 { pt3dadd( -82.6806, 194.488, -56.7116, 0.55 ) }
    dend_34 { pt3dadd( -83.526, 196.581, -57.6062, 0.28 ) }
    dend_34 { pt3dadd( -84.1338, 198.068, -58.3015, 0.55 ) }
    dend_34 { pt3dadd( -84.9444, 200.113, -59.2576, 0.28 ) }
    dend_34 { pt3dadd( -85.7079, 202.122, -60.1815, 0.83 ) }
    dend_34 { pt3dadd( -87.0253, 205.832, -61.899, 0.28 ) }
    dend_34 { pt3dadd( -87.6988, 207.724, -62.7786, 0.83 ) }
    dend_34 { pt3dadd( -88.9197, 211.228, -64.39, 0.55 ) }
    dend_34 { pt3dadd( -90.2016, 215.136, -65.9754, 0.55 ) }
    dend_34 { pt3dadd( -90.9696, 217.686, -66.8838, 0.55 ) }
    dend_34 { pt3dadd( -91.7578, 220.609, -67.7999, 0.83 ) }
    // Section: dend_29, id: dend_29, parent: soma_0 (entry count 27/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( -0.47414, 4.51063, -15.8851, 2.22 ) }
    dend_29 { pt3dadd( 0.885859, 5.94388, -15.8851, 2.22 ) }
    // Section: dend_28, id: dend_28, parent: soma_0 (entry count 29/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 5.46586, 0.990878, -3.4751, 0.83 ) }
    dend_28 { pt3dadd( 7.89519, 0.325168, -3.84693, 0.83 ) }
    dend_28 { pt3dadd( 11.6727, -0.90658, -4.5276, 0.83 ) }
    dend_28 { pt3dadd( 14.6911, -1.8782, -5.13944, 0.83 ) }
    dend_28 { pt3dadd( 17.244, -2.67072, -5.66176, 0.55 ) }
    dend_28 { pt3dadd( 19.353, -3.32098, -6.13557, 0.83 ) }
    dend_28 { pt3dadd( 22.6212, -4.25244, -6.93364, 0.55 ) }
    dend_28 { pt3dadd( 24.0816, -4.64874, -7.34346, 0.83 ) }
    dend_28 { pt3dadd( 26.4328, -5.06512, -8.02934, 0.55 ) }
    dend_28 { pt3dadd( 28.8246, -5.19522, -8.7467, 0.83 ) }
    dend_28 { pt3dadd( 32.9816, -5.05061, -9.92577, 0.83 ) }
    dend_28 { pt3dadd( 34.582, -4.84115, -10.4402, 0.55 ) }
    dend_28 { pt3dadd( 37.4017, -4.25134, -11.4851, 0.83 ) }
    dend_28 { pt3dadd( 42.0821, -3.0636, -13.4204, 0.55 ) }
    dend_28 { pt3dadd( 44.1861, -2.45039, -14.3751, 0.55 ) }
    dend_28 { pt3dadd( 46.3882, -1.77332, -15.3653, 0.55 ) }
    dend_28 { pt3dadd( 49.9948, -0.703969, -16.8665, 0.55 ) }
    dend_28 { pt3dadd( 51.972, -0.270948, -17.6091, 0.55 ) }
    dend_28 { pt3dadd( 53.676, -0.0184522, -18.2254, 0.28 ) }
    dend_28 { pt3dadd( 56.114, 0.12015, -19.0485, 0.55 ) }
    dend_28 { pt3dadd( 59.1708, -0.0372452, -19.8456, 0.28 ) }
    dend_28 { pt3dadd( 60.8453, -0.173212, -20.1764, 0.83 ) }
    dend_28 { pt3dadd( 62.4801, -0.34539, -20.4074, 0.83 ) }
    dend_28 { pt3dadd( 65.4925, -0.624509, -20.8719, 0.28 ) }
    dend_28 { pt3dadd( 67.6339, -0.802417, -21.29, 0.55 ) }
    dend_28 { pt3dadd( 71.0849, -0.970962, -22.2104, 0.55 ) }
    dend_28 { pt3dadd( 74.6606, -0.987753, -23.4033, 0.55 ) }
    dend_28 { pt3dadd( 76.3832, -0.957907, -24.0072, 0.55 ) }
    dend_28 { pt3dadd( 77.8092, -0.93088, -24.5262, 0.28 ) }
    dend_28 { pt3dadd( 79.7108, -0.872403, -25.1925, 0.83 ) }
    dend_28 { pt3dadd( 81.9512, -0.679669, -26.1108, 0.83 ) }
    dend_28 { pt3dadd( 83.9679, -0.403873, -27.0352, 0.55 ) }
    dend_28 { pt3dadd( 84.9495, -0.252258, -27.5176, 0.55 ) }
    dend_28 { pt3dadd( 86.82, 0.154844, -28.4159, 0.83 ) }
    dend_28 { pt3dadd( 88.5814, 0.627688, -29.2185, 0.83 ) }
    dend_28 { pt3dadd( 91.6148, 1.65303, -30.5952, 0.55 ) }
    dend_28 { pt3dadd( 93.4466, 2.30333, -31.39, 0.55 ) }
    dend_28 { pt3dadd( 94.4368, 2.6787, -31.8098, 0.55 ) }
    dend_28 { pt3dadd( 95.6201, 3.11778, -32.3562, 0.28 ) }
    dend_28 { pt3dadd( 96.85, 3.54353, -32.9293, 0.55 ) }
    dend_28 { pt3dadd( 98.9246, 4.16222, -34.0118, 0.55 ) }
    dend_28 { pt3dadd( 100.687, 4.56215, -34.9268, 0.55 ) }
    dend_28 { pt3dadd( 102.195, 4.83707, -35.7762, 0.55 ) }
    dend_28 { pt3dadd( 105.002, 5.16122, -37.3724, 0.28 ) }
    dend_28 { pt3dadd( 106.862, 5.35005, -38.4565, 0.83 ) }
    dend_28 { pt3dadd( 109.308, 5.61853, -39.9631, 0.55 ) }
    dend_28 { pt3dadd( 110.795, 5.75771, -40.8814, 0.55 ) }
    dend_28 { pt3dadd( 112.174, 5.88281, -41.7417, 0.28 ) }
    dend_28 { pt3dadd( 114.186, 6.05025, -42.9637, 0.83 ) }
    dend_28 { pt3dadd( 115.97, 6.17746, -44.033, 0.83 ) }
    dend_28 { pt3dadd( 118.653, 6.374, -45.706, 0.28 ) }
    dend_28 { pt3dadd( 119.7, 6.45351, -46.3664, 0.55 ) }
    dend_28 { pt3dadd( 121.287, 6.57826, -47.3722, 0.28 ) }
    dend_28 { pt3dadd( 123.275, 6.69305, -48.5391, 0.55 ) }
    dend_28 { pt3dadd( 126.475, 6.89325, -50.2332, 0.28 ) }
    dend_28 { pt3dadd( 127.382, 6.92621, -50.6594, 0.28 ) }
    dend_28 { pt3dadd( 128.946, 7.04303, -51.2668, 0.55 ) }
    dend_28 { pt3dadd( 131.052, 7.25703, -51.8924, 0.55 ) }
    dend_28 { pt3dadd( 133.22, 7.55131, -52.3826, 0.28 ) }
    dend_28 { pt3dadd( 134.745, 7.77902, -52.617, 0.55 ) }
    dend_28 { pt3dadd( 137.14, 8.20579, -52.8357, 0.28 ) }
    dend_28 { pt3dadd( 140.231, 8.8138, -53.1004, 0.28 ) }
    dend_28 { pt3dadd( 143.071, 9.53816, -53.3836, 0.55 ) }
    dend_28 { pt3dadd( 145.654, 10.355, -53.7037, 0.55 ) }
    dend_28 { pt3dadd( 147.468, 11.0089, -53.9545, 0.28 ) }
    dend_28 { pt3dadd( 148.377, 11.371, -54.0838, 0.28 ) }
    dend_28 { pt3dadd( 149.247, 11.7894, -54.2267, 0.55 ) }
    dend_28 { pt3dadd( 152.354, 13.4893, -54.918, 0.28 ) }
    dend_28 { pt3dadd( 153.629, 14.3025, -55.263, 0.55 ) }
    dend_28 { pt3dadd( 154.888, 15.2102, -55.6662, 0.28 ) }
    dend_28 { pt3dadd( 155.543, 15.7291, -55.9175, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_28 { pt3dadd( 157.855, 17.6488, -56.9161, 0.28 ) }
    dend_28 { pt3dadd( 158.556, 18.2682, -57.2349, 0.28 ) }
    dend_28 { pt3dadd( 159.166, 18.7964, -57.554, 0.83 ) }
    dend_28 { pt3dadd( 162.271, 21.4203, -59.3275, 0.28 ) }
    dend_28 { pt3dadd( 162.724, 21.7869, -59.5916, 0.83 ) }
    dend_28 { pt3dadd( 165.045, 23.5166, -60.8895, 0.28 ) }
    dend_28 { pt3dadd( 166.287, 24.3889, -61.4145, 0.55 ) }
    dend_28 { pt3dadd( 168.374, 25.7684, -62.0882, 0.28 ) }
    dend_28 { pt3dadd( 170.202, 26.8726, -62.4893, 0.55 ) }
    dend_28 { pt3dadd( 173.255, 28.4916, -62.8319, 0.28 ) }
    dend_28 { pt3dadd( 174.585, 29.1396, -63.0189, 0.55 ) }
    dend_28 { pt3dadd( 178.776, 31.0331, -63.6542, 0.28 ) }
    dend_28 { pt3dadd( 182.157, 32.5488, -64.6329, 0.28 ) }
    dend_28 { pt3dadd( 183.314, 33.0604, -65.1105, 0.83 ) }
    dend_28 { pt3dadd( 184.461, 33.5136, -65.9466, 0.83 ) }
    dend_28 { pt3dadd( 187.846, 34.6531, -69.2084, 0.28 ) }
    dend_28 { pt3dadd( 188.428, 34.8151, -69.8462, 0.83 ) }
    dend_28 { pt3dadd( 192.132, 35.3649, -74.451, 0.28 ) }
    dend_28 { pt3dadd( 192.896, 35.4003, -75.421, 0.83 ) }
    dend_28 { pt3dadd( 196.091, 35.296, -79.4942, 0.28 ) }
    dend_28 { pt3dadd( 197.875, 35.0746, -81.6693, 0.28 ) }
    dend_28 { pt3dadd( 198.986, 34.7722, -82.8986, 0.83 ) }
    dend_28 { pt3dadd( 202.585, 33.3443, -86.5755, 0.28 ) }
    dend_28 { pt3dadd( 203.377, 32.9068, -87.3178, 0.55 ) }
    dend_28 { pt3dadd( 205.008, 31.8164, -88.8671, 0.28 ) }
    dend_28 { pt3dadd( 205.745, 31.2201, -89.5461, 0.55 ) }
    dend_28 { pt3dadd( 206.919, 30.1014, -90.8058, 0.28 ) }
    dend_28 { pt3dadd( 207.719, 29.2706, -91.7302, 0.28 ) }
    dend_28 { pt3dadd( 209.243, 27.5717, -93.3917, 0.28 ) }
    dend_28 { pt3dadd( 209.767, 26.9962, -93.9882, 0.55 ) }
    // Section: dend_21, id: dend_21, parent: soma_0 (entry count 30/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 5.40586, 2.37538, -0.565097, 1.11 ) }
    dend_21 { pt3dadd( 6.32255, 3.77653, 0.484323, 1.11 ) }
    dend_21 { pt3dadd( 8.3455, 6.86858, 2.80018, 0.83 ) }
    dend_21 { pt3dadd( 10.1099, 9.56536, 4.81996, 0.83 ) }
    dend_21 { pt3dadd( 11.2486, 11.3059, 6.12357, 0.83 ) }
    // Section: dend_18, id: dend_18, parent: soma_0 (entry count 35/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -5.61414, 3.77938, -1.9851, 1.11 ) }
    dend_18 { pt3dadd( -9.30053, 7.47042, -2.9746, 1.11 ) }
    dend_18 { pt3dadd( -11.4695, 9.58766, -3.42473, 1.66 ) }
    dend_18 { pt3dadd( -14.4671, 12.5954, -4.03876, 0.83 ) }
    dend_18 { pt3dadd( -16.8896, 15.1543, -4.64611, 0.83 ) }
    dend_18 { pt3dadd( -19.3132, 17.809, -5.42882, 0.83 ) }
    dend_18 { pt3dadd( -21.143, 19.8489, -6.15668, 0.55 ) }
    dend_18 { pt3dadd( -22.6107, 21.5456, -6.84181, 0.83 ) }
    dend_18 { pt3dadd( -24.8354, 24.1862, -7.94689, 0.83 ) }
    dend_18 { pt3dadd( -28.5595, 28.669, -9.82789, 1.11 ) }
    dend_18 { pt3dadd( -31.0063, 31.6581, -11.2212, 0.83 ) }
    dend_18 { pt3dadd( -33.1193, 34.3033, -12.695, 0.55 ) }
    dend_18 { pt3dadd( -34.6482, 36.292, -13.9746, 1.11 ) }
    // Section: dend_13, id: dend_13, parent: soma_0 (entry count 48/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -6.88414, -2.62637, -2.0051, 1.11 ) }
    dend_13 { pt3dadd( -8.85008, -2.23261, -1.19044, 1.11 ) }
    dend_13 { pt3dadd( -14.699, -1.0611, 1.23328, 1.38 ) }
    dend_13 { pt3dadd( -18.0479, -0.390331, 2.62103, 0.83 ) }
    dend_13 { pt3dadd( -22.7489, 0.551248, 4.56905, 1.38 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 53/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 0.305861, -9.06137, -0.655097, 2.49 ) }
    dend_0 { pt3dadd( 0.671293, -15.1973, -0.236765, 2.49 ) }
    dend_0 { pt3dadd( 0.881814, -18.7322, 0.00423015, 2.49 ) }
    dend_0 { pt3dadd( 1.18258, -23.7824, 0.348535, 2.77 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 57/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( -0.833552, 6.63441, 0.180803, 0.55 ) }
    axon_0 { pt3dadd( -2.36487, 21.556, 0.180803, 0.55 ) }
    axon_0 { pt3dadd( -3.89618, 36.4777, 0.180803, 0.55 ) }
    // Section: dend_36, id: dend_36, parent: dend_34 (entry count 60/100)
    dend_36 { pt3dclear() }
    dend_36 { pt3dadd( -91.7578, 220.609, -67.7999, 0.28 ) }
    dend_36 { pt3dadd( -93.0814, 222.947, -68.9363, 0.28 ) }
    dend_36 { pt3dadd( -93.471, 223.636, -69.2708, 0.83 ) }
    // Section: dend_35, id: dend_35, parent: dend_34 (entry count 63/100)
    dend_35 { pt3dclear() }
    dend_35 { pt3dadd( -91.7578, 220.609, -67.7999, 0.28 ) }
    dend_35 { pt3dadd( -90.956, 221.458, -68.2583, 0.28 ) }
    dend_35 { pt3dadd( -90.4797, 222.046, -68.6613, 0.83 ) }
    dend_35 { pt3dadd( -88.6846, 224.385, -70.1308, 0.28 ) }
    dend_35 { pt3dadd( -87.3462, 226.518, -71.3246, 0.28 ) }
    dend_35 { pt3dadd( -86.5978, 227.935, -72.0024, 0.28 ) }
    dend_35 { pt3dadd( -86.2573, 228.663, -72.3116, 0.83 ) }
    dend_35 { pt3dadd( -84.6243, 232.748, -74.0794, 0.28 ) }
    dend_35 { pt3dadd( -84.1167, 234.342, -74.6322, 0.83 ) }
    dend_35 { pt3dadd( -82.9275, 239.365, -75.9571, 0.28 ) }
    dend_35 { pt3dadd( -82.28, 242.451, -76.7683, 0.28 ) }
    dend_35 { pt3dadd( -81.9043, 244.533, -77.281, 0.28 ) }
    dend_35 { pt3dadd( -81.4121, 247.581, -77.9227, 0.83 ) }
    dend_35 { pt3dadd( -80.7494, 252.548, -78.5703, 0.28 ) }
    dend_35 { pt3dadd( -80.5712, 254.139, -78.8131, 0.83 ) }
    // Section: dend_31, id: dend_31, parent: dend_29 (entry count 78/100)
    dend_31 { pt3dclear() }
    dend_31 { pt3dadd( 0.885859, 5.94388, -15.8851, 1.11 ) }
    dend_31 { pt3dadd( 2.02177, 10.5646, -19.4973, 1.11 ) }
    dend_31 { pt3dadd( 2.76642, 13.5938, -21.8653, 1.11 ) }
    dend_31 { pt3dadd( 3.09464, 14.9289, -22.9091, 1.11 ) }
    dend_31 { pt3dadd( 3.75732, 17.6246, -25.0164, 0.83 ) }
    dend_31 { pt3dadd( 4.32967, 19.9529, -26.8365, 1.11 ) }
    dend_31 { pt3dadd( 5.14205, 23.2575, -29.4199, 0.83 ) }
    // Section: dend_30, id: dend_30, parent: dend_29 (entry count 85/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( 0.885859, 5.94388, -15.8851, 0.83 ) }
    dend_30 { pt3dadd( 0.760336, 4.65671, -16.4813, 0.83 ) }
    dend_30 { pt3dadd( 0.268503, 1.66714, -18.1534, 0.83 ) }
    dend_30 { pt3dadd( -0.376885, -2.07949, -20.3586, 0.83 ) }
    dend_30 { pt3dadd( -0.961211, -4.85162, -22.0712, 0.83 ) }
    dend_30 { pt3dadd( -1.88386, -8.62193, -24.6266, 0.55 ) }
    dend_30 { pt3dadd( -2.84209, -12.346, -27.2747, 0.55 ) }
    dend_30 { pt3dadd( -4.10868, -16.1569, -30.336, 0.28 ) }
    dend_30 { pt3dadd( -4.38275, -16.8466, -30.9839, 0.55 ) }
    dend_30 { pt3dadd( -5.09415, -18.4903, -32.7331, 0.55 ) }
    dend_30 { pt3dadd( -5.98997, -20.5275, -35.2543, 0.28 ) }
    dend_30 { pt3dadd( -6.34452, -21.437, -36.4908, 0.83 ) }
    dend_30 { pt3dadd( -7.21669, -23.7308, -39.6857, 0.28 ) }
    dend_30 { pt3dadd( -7.77477, -25.3784, -41.894, 0.55 ) }
    dend_30 { pt3dadd( -8.10053, -26.455, -43.2883, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_30 { pt3dadd( -8.48221, -28.1472, -45.26, 0.83 ) }
    dend_30 { pt3dadd( -9.01426, -30.7915, -48.0072, 0.28 ) }
    dend_30 { pt3dadd( -9.19784, -31.7665, -49.0281, 0.55 ) }
    dend_30 { pt3dadd( -9.57385, -34.2986, -51.5152, 0.28 ) }
    dend_30 { pt3dadd( -9.69749, -35.2164, -52.4741, 0.83 ) }
    dend_30 { pt3dadd( -9.86871, -36.6491, -54.0214, 0.28 ) }
    dend_30 { pt3dadd( -9.98004, -38.0404, -55.5182, 0.55 ) }
    dend_30 { pt3dadd( -10.1157, -41.7072, -59.4273, 0.28 ) }
    dend_30 { pt3dadd( -10.1025, -42.4403, -60.2902, 0.55 ) }
    dend_30 { pt3dadd( -9.93034, -44.9436, -63.3874, 0.28 ) }
    dend_30 { pt3dadd( -9.85937, -45.9006, -64.7248, 0.28 ) }
    dend_30 { pt3dadd( -9.72348, -47.5019, -67.1045, 0.83 ) }
    dend_30 { pt3dadd( -9.64479, -48.298, -68.3468, 0.55 ) }
    dend_30 { pt3dadd( -9.34335, -51.7093, -73.755, 0.28 ) }
    dend_30 { pt3dadd( -9.31951, -52.322, -74.7825, 0.55 ) }
    dend_30 { pt3dadd( -9.33371, -54.6637, -78.7189, 0.28 ) }
    dend_30 { pt3dadd( -9.36296, -55.0352, -79.3999, 0.55 ) }
    dend_30 { pt3dadd( -9.70298, -57.1866, -83.4264, 0.28 ) }
    dend_30 { pt3dadd( -9.7736, -57.6668, -84.2665, 0.55 ) }
    dend_30 { pt3dadd( -9.88649, -58.5459, -85.6346, 0.28 ) }
    dend_30 { pt3dadd( -9.92364, -59.2268, -86.5405, 0.55 ) }
    dend_30 { pt3dadd( -9.86923, -62.1542, -89.9295, 0.28 ) }
    dend_30 { pt3dadd( -9.78217, -63.5969, -91.4941, 0.83 ) }
    dend_30 { pt3dadd( -9.23975, -68.4038, -96.1734, 0.28 ) }
    dend_30 { pt3dadd( -9.07146, -69.5584, -97.2577, 0.55 ) }
    dend_30 { pt3dadd( -8.62239, -72.0652, -99.5164, 0.28 ) }
    dend_30 { pt3dadd( -8.35906, -73.3901, -100.648, 0.55 ) }
    dend_30 { pt3dadd( -7.65616, -76.6641, -103.206, 0.28 ) }
    dend_30 { pt3dadd( -7.46419, -77.5273, -103.844, 0.55 ) }
    dend_30 { pt3dadd( -7.13351, -79.1313, -104.971, 0.55 ) }
    dend_30 { pt3dadd( -6.75953, -81.379, -106.708, 0.28 ) }
    dend_30 { pt3dadd( -6.63542, -82.3997, -107.374, 0.55 ) }
    dend_30 { pt3dadd( -6.35679, -86.5935, -109.756, 0.28 ) }
    dend_30 { pt3dadd( -6.38358, -88.9733, -111.006, 0.28 ) }
    dend_30 { pt3dadd( -6.50046, -91.3224, -112.177, 0.83 ) }
    dend_30 { pt3dadd( -7.07545, -99.2035, -115.81, 0.28 ) }
    dend_30 { pt3dadd( -7.87295, -105.945, -118.757, 0.28 ) }
    dend_30 { pt3dadd( -8.58671, -110.733, -120.763, 0.83 ) }
    dend_30 { pt3dadd( -10.8717, -123.015, -126.05, 0.28 ) }
    dend_30 { pt3dadd( -11.1987, -124.552, -126.752, 0.83 ) }
    dend_30 { pt3dadd( -11.7836, -126.973, -127.88, 0.83 ) }
    dend_30 { pt3dadd( -13.8347, -134.408, -131.491, 0.28 ) }
    dend_30 { pt3dadd( -14.3757, -135.998, -132.379, 0.83 ) }
    dend_30 { pt3dadd( -16.2951, -140.722, -134.895, 0.55 ) }
    dend_30 { pt3dadd( -17.3895, -142.984, -136.164, 0.55 ) }
    dend_30 { pt3dadd( -18.6714, -145.572, -137.74, 0.28 ) }
    dend_30 { pt3dadd( -19.1374, -146.467, -138.306, 0.55 ) }
    dend_30 { pt3dadd( -23.252, -154.057, -143.177, 0.28 ) }
    dend_30 { pt3dadd( -23.7833, -155.025, -143.788, 0.83 ) }
    dend_30 { pt3dadd( -27.2691, -161.469, -147.501, 0.28 ) }
    dend_30 { pt3dadd( -28.1639, -163.148, -148.509, 0.55 ) }
    // Section: dend_23, id: dend_23, parent: dend_21 (entry count 51/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( 11.2486, 11.3059, 6.12357, 0.83 ) }
    dend_23 { pt3dadd( 13.7015, 11.7858, 6.36426, 0.83 ) }
    dend_23 { pt3dadd( 16.5132, 12.3358, 6.64014, 0.83 ) }
    dend_23 { pt3dadd( 18.9503, 12.8126, 6.87928, 0.83 ) }
    // Section: dend_22, id: dend_22, parent: dend_21 (entry count 55/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( 11.2486, 11.3059, 6.12357, 0.83 ) }
    dend_22 { pt3dadd( 11.8522, 13.6687, 6.28121, 0.83 ) }
    dend_22 { pt3dadd( 12.4396, 15.898, 6.48096, 0.83 ) }
    dend_22 { pt3dadd( 12.9285, 17.7301, 6.74982, 0.83 ) }
    dend_22 { pt3dadd( 13.4865, 19.9084, 6.94591, 0.83 ) }
    dend_22 { pt3dadd( 14.057, 22.2807, 7.07812, 0.28 ) }
    dend_22 { pt3dadd( 14.6267, 24.752, 7.16907, 0.55 ) }
    dend_22 { pt3dadd( 15.225, 27.4078, 7.2241, 0.55 ) }
    dend_22 { pt3dadd( 15.9079, 30.7209, 7.23926, 0.55 ) }
    dend_22 { pt3dadd( 16.4781, 34.103, 7.13403, 0.55 ) }
    dend_22 { pt3dadd( 16.7599, 36.257, 6.99543, 0.55 ) }
    dend_22 { pt3dadd( 16.8602, 37.336, 6.91911, 0.55 ) }
    dend_22 { pt3dadd( 16.9916, 39.7574, 6.58017, 0.83 ) }
    dend_22 { pt3dadd( 17.0059, 40.3511, 6.48259, 0.83 ) }
    dend_22 { pt3dadd( 17.0057, 43.6015, 6.06562, 0.55 ) }
    dend_22 { pt3dadd( 16.949, 45.5152, 6.0475, 0.55 ) }
    dend_22 { pt3dadd( 16.7606, 48.2444, 6.31493, 0.55 ) }
    dend_22 { pt3dadd( 16.3762, 51.8683, 7.03177, 0.55 ) }
    dend_22 { pt3dadd( 16.0923, 53.928, 7.70456, 0.55 ) }
    dend_22 { pt3dadd( 15.5204, 57.6592, 9.21581, 0.55 ) }
    dend_22 { pt3dadd( 15.0255, 60.7072, 10.6491, 0.55 ) }
    dend_22 { pt3dadd( 14.331, 64.3595, 12.5722, 0.55 ) }
    dend_22 { pt3dadd( 13.5167, 68.1289, 14.8516, 0.55 ) }
    dend_22 { pt3dadd( 12.6274, 71.9677, 17.5684, 0.28 ) }
    dend_22 { pt3dadd( 12.1706, 73.8009, 18.9355, 0.55 ) }
    dend_22 { pt3dadd( 10.5299, 83.4022, 19.5146, 0.55 ) }
    dend_22 { pt3dadd( 9.63054, 93.0709, 18.5918, 0.55 ) }
    dend_22 { pt3dadd( 9.04966, 102.79, 18.0564, 0.55 ) }
    dend_22 { pt3dadd( 7.87743, 112.458, 17.5026, 0.55 ) }
    dend_22 { pt3dadd( 7.14742, 122.181, 17.4277, 0.55 ) }
    dend_22 { pt3dadd( 5.604, 131.661, 15.6704, 0.55 ) }
    dend_22 { pt3dadd( 5.77989, 141.189, 13.5571, 0.55 ) }
    dend_22 { pt3dadd( 7.3529, 150.421, 10.7524, 0.55 ) }
    dend_22 { pt3dadd( 8.21947, 159.954, 8.83979, 0.55 ) }
    dend_22 { pt3dadd( 8.12507, 169.629, 7.60404, 0.55 ) }
    dend_22 { pt3dadd( 7.1825, 179.016, 5.07251, 0.55 ) }
    dend_22 { pt3dadd( 4.84755, 188.423, 3.86358, 0.55 ) }
    dend_22 { pt3dadd( 1.34242, 197.359, 1.93545, 0.55 ) }
    dend_22 { pt3dadd( -3.24552, 205.843, 0.136176, 0.55 ) }
    dend_22 { pt3dadd( -8.47032, 213.752, -2.49054, 0.55 ) }
    dend_22 { pt3dadd( -13.6838, 221.459, -5.70507, 0.55 ) }
    dend_22 { pt3dadd( -18.5629, 229.817, -7.35269, 0.55 ) }
    dend_22 { pt3dadd( -22.0995, 238.646, -9.69465, 0.55 ) }
    dend_22 { pt3dadd( -27.2244, 246.985, -10.4681, 0.55 ) }
    // Section: dend_20, id: dend_20, parent: dend_18 (entry count 99/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( -34.6482, 36.292, -13.9746, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_20 { pt3dadd( -35.6166, 39.0109, -14.2939, 0.55 ) }
    dend_20 { pt3dadd( -36.2793, 40.9361, -14.5301, 0.55 ) }
    dend_20 { pt3dadd( -37.2005, 43.803, -14.8426, 0.55 ) }
    dend_20 { pt3dadd( -38.1302, 46.635, -15.177, 0.55 ) }
    dend_20 { pt3dadd( -38.9608, 49.1383, -15.4967, 0.55 ) }
    dend_20 { pt3dadd( -40.3668, 53.3318, -16.163, 0.55 ) }
    dend_20 { pt3dadd( -41.8959, 57.6097, -17.0403, 0.55 ) }
    dend_20 { pt3dadd( -43.6094, 62.0404, -18.1951, 0.55 ) }
    dend_20 { pt3dadd( -44.4704, 64.1044, -18.8054, 0.55 ) }
    dend_20 { pt3dadd( -45.1991, 65.7815, -19.3364, 0.55 ) }
    dend_20 { pt3dadd( -46.8659, 69.3911, -20.5443, 0.83 ) }
    dend_20 { pt3dadd( -48.6894, 73.0872, -21.8587, 0.83 ) }
    dend_20 { pt3dadd( -50.6288, 76.8104, -23.2408, 0.55 ) }
    dend_20 { pt3dadd( -51.3362, 78.1505, -23.7461, 0.55 ) }
    dend_20 { pt3dadd( -53.3009, 81.9799, -25.0788, 0.55 ) }
    dend_20 { pt3dadd( -54.0609, 83.47, -25.5493, 0.55 ) }
    dend_20 { pt3dadd( -55.5232, 86.3979, -26.3303, 0.55 ) }
    dend_20 { pt3dadd( -56.6721, 88.8506, -26.892, 0.55 ) }
    dend_20 { pt3dadd( -57.6934, 91.0906, -27.277, 0.28 ) }
    dend_20 { pt3dadd( -58.1675, 92.1238, -27.4528, 0.28 ) }
    dend_20 { pt3dadd( -58.6484, 93.1534, -27.6323, 0.55 ) }
    dend_20 { pt3dadd( -59.7984, 95.639, -28.1003, 0.28 ) }
    dend_20 { pt3dadd( -60.3313, 96.7699, -28.3284, 0.55 ) }
    dend_20 { pt3dadd( -61.5573, 99.4994, -28.8799, 0.55 ) }
    dend_20 { pt3dadd( -61.8653, 100.215, -29.1143, 0.55 ) }
    dend_20 { pt3dadd( -62.668, 102.189, -29.94, 0.55 ) }
    dend_20 { pt3dadd( -63.5434, 104.41, -31.0067, 0.28 ) }
    dend_20 { pt3dadd( -63.8684, 105.254, -31.4485, 0.55 ) }
    dend_20 { pt3dadd( -65.0719, 108.387, -33.1404, 0.55 ) }
    dend_20 { pt3dadd( -66.7244, 112.609, -35.2982, 0.28 ) }
    dend_20 { pt3dadd( -67.3119, 114.058, -36.0694, 0.28 ) }
    dend_20 { pt3dadd( -67.8009, 115.169, -36.6987, 0.55 ) }
    dend_20 { pt3dadd( -69.1266, 118.006, -38.3312, 0.28 ) }
    dend_20 { pt3dadd( -69.7535, 119.239, -39.0964, 0.83 ) }
    dend_20 { pt3dadd( -71.0624, 121.616, -40.6789, 0.83 ) }
    dend_20 { pt3dadd( -72.9802, 124.923, -42.9891, 0.55 ) }
    dend_20 { pt3dadd( -73.8643, 126.494, -44.246, 0.28 ) }
    dend_20 { pt3dadd( -74.1968, 127.127, -44.7569, 0.55 ) }
    dend_20 { pt3dadd( -75.307, 129.33, -46.6654, 0.28 ) }
    dend_20 { pt3dadd( -75.8039, 130.445, -47.6009, 0.55 ) }
    dend_20 { pt3dadd( -76.6528, 132.782, -49.4441, 0.28 ) }
    dend_20 { pt3dadd( -77.0266, 134.018, -50.2851, 0.83 ) }
    dend_20 { pt3dadd( -77.7102, 136.771, -52.0134, 0.28 ) }
    dend_20 { pt3dadd( -78.2707, 139.413, -53.588, 0.55 ) }
    dend_20 { pt3dadd( -79.0014, 143.352, -55.7776, 0.83 ) }
    dend_20 { pt3dadd( -79.5423, 146.635, -57.4979, 0.28 ) }
    dend_20 { pt3dadd( -79.6976, 147.662, -57.9827, 0.55 ) }
    dend_20 { pt3dadd( -80.0622, 150.243, -59.0951, 0.28 ) }
    dend_20 { pt3dadd( -80.2529, 151.795, -59.6818, 0.83 ) }
    dend_20 { pt3dadd( -80.4345, 153.567, -60.0889, 0.83 ) }
    dend_20 { pt3dadd( -80.6358, 155.735, -60.368, 0.28 ) }
    dend_20 { pt3dadd( -80.8224, 157.714, -60.5153, 0.55 ) }
    dend_20 { pt3dadd( -81.0836, 160.362, -60.658, 0.28 ) }
    dend_20 { pt3dadd( -81.2991, 162.573, -60.7304, 0.83 ) }
    dend_20 { pt3dadd( -81.7899, 167.298, -60.9924, 0.28 ) }
    dend_20 { pt3dadd( -82.0279, 169.454, -61.171, 0.55 ) }
    dend_20 { pt3dadd( -82.6168, 174.218, -61.7211, 0.28 ) }
    dend_20 { pt3dadd( -82.883, 176.237, -62.0677, 0.83 ) }
    dend_20 { pt3dadd( -83.245, 178.59, -62.6206, 0.83 ) }
    dend_20 { pt3dadd( -84.2702, 184.347, -64.3207, 0.28 ) }
    dend_20 { pt3dadd( -84.6309, 186.038, -64.9337, 0.55 ) }
    dend_20 { pt3dadd( -85.1279, 188.071, -65.7836, 0.55 ) }
    dend_20 { pt3dadd( -86.035, 191.225, -67.3139, 0.55 ) }
    dend_20 { pt3dadd( -86.9308, 194.232, -68.8751, 0.28 ) }
    dend_20 { pt3dadd( -87.2421, 195.256, -69.4326, 0.55 ) }
    dend_20 { pt3dadd( -87.6425, 196.636, -70.2001, 0.28 ) }
    dend_20 { pt3dadd( -88.1356, 198.397, -71.1308, 0.55 ) }
    dend_20 { pt3dadd( -88.8025, 200.985, -72.4022, 0.28 ) }
    dend_20 { pt3dadd( -89.3448, 203.375, -73.5614, 0.28 ) }
    dend_20 { pt3dadd( -89.6912, 205.281, -74.4479, 0.55 ) }
    dend_20 { pt3dadd( -90.1259, 208.484, -75.882, 0.28 ) }
    dend_20 { pt3dadd( -90.2507, 209.981, -76.5092, 0.55 ) }
    dend_20 { pt3dadd( -90.29, 210.737, -76.8043, 0.55 ) }
    dend_20 { pt3dadd( -90.3658, 214.225, -78.2165, 0.28 ) }
    dend_20 { pt3dadd( -90.4278, 217.068, -79.4321, 0.28 ) }
    dend_20 { pt3dadd( -90.4308, 218.759, -80.1464, 0.83 ) }
    dend_20 { pt3dadd( -90.3829, 220.002, -80.6671, 0.83 ) }
    dend_20 { pt3dadd( -90.2553, 222.079, -81.616, 0.28 ) }
    dend_20 { pt3dadd( -90.15, 223.86, -82.3806, 0.55 ) }
    // Section: dend_19, id: dend_19, parent: dend_18 (entry count 79/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -34.6482, 36.292, -13.9746, 0.55 ) }
    dend_19 { pt3dadd( -36.6024, 38.0623, -13.109, 0.55 ) }
    dend_19 { pt3dadd( -37.85, 39.3088, -12.1864, 0.28 ) }
    dend_19 { pt3dadd( -38.6538, 40.1958, -11.4982, 0.55 ) }
    dend_19 { pt3dadd( -39.8641, 41.5889, -10.4169, 0.55 ) }
    dend_19 { pt3dadd( -41.6487, 43.7121, -8.7561, 0.55 ) }
    dend_19 { pt3dadd( -42.6014, 44.934, -7.83941, 0.83 ) }
    dend_19 { pt3dadd( -45.197, 48.8117, -5.02219, 0.28 ) }
    dend_19 { pt3dadd( -45.8179, 49.8481, -4.31071, 0.28 ) }
    dend_19 { pt3dadd( -46.2136, 50.6048, -3.83339, 0.55 ) }
    dend_19 { pt3dadd( -47.0704, 52.5389, -2.76507, 0.28 ) }
    dend_19 { pt3dadd( -47.6856, 54.2003, -2.08959, 0.28 ) }
    dend_19 { pt3dadd( -48.1348, 55.5486, -1.73417, 0.55 ) }
    dend_19 { pt3dadd( -48.7572, 57.5268, -1.47719, 0.55 ) }
    dend_19 { pt3dadd( -49.2985, 59.2361, -1.34316, 0.28 ) }
    dend_19 { pt3dadd( -49.6728, 60.3879, -1.30795, 0.55 ) }
    dend_19 { pt3dadd( -50.1579, 61.7745, -1.34145, 0.28 ) }
    dend_19 { pt3dadd( -50.5441, 62.8242, -1.37709, 0.55 ) }
    dend_19 { pt3dadd( -51.385, 65.1941, -1.38337, 0.28 ) }
    dend_19 { pt3dadd( -52.0594, 67.231, -1.34835, 0.55 ) }
    dend_19 { pt3dadd( -52.8215, 69.6585, -1.21982, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_19 { pt3dadd( -53.2854, 71.1646, -1.12444, 0.55 ) }
    dend_19 { pt3dadd( -54.0751, 73.7989, -0.921513, 0.55 ) }
    dend_19 { pt3dadd( -55.1511, 77.4281, -0.646043, 0.28 ) }
    dend_19 { pt3dadd( -55.683, 79.3195, -0.512858, 0.28 ) }
    dend_19 { pt3dadd( -55.9844, 80.4793, -0.351343, 0.55 ) }
    // Section: dend_15, id: dend_15, parent: dend_13 (entry count 5/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -22.7489, 0.551248, 4.56905, 0.83 ) }
    dend_15 { pt3dadd( -25.6865, 3.50367, 4.66857, 0.83 ) }
    dend_15 { pt3dadd( -27.6723, 5.49943, 4.73584, 0.83 ) }
    // Section: dend_14, id: dend_14, parent: dend_13 (entry count 8/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( -22.7489, 0.551248, 4.56905, 0.83 ) }
    dend_14 { pt3dadd( -24.0212, 0.00307888, 5.4325, 0.83 ) }
    dend_14 { pt3dadd( -26.5004, -0.730815, 6.9126, 0.83 ) }
    dend_14 { pt3dadd( -29.718, -1.45819, 8.79567, 0.55 ) }
    dend_14 { pt3dadd( -31.6111, -1.90374, 10.0633, 0.83 ) }
    dend_14 { pt3dadd( -33.312, -2.34223, 11.2858, 0.28 ) }
    dend_14 { pt3dadd( -35.9228, -3.15287, 13.4323, 0.55 ) }
    dend_14 { pt3dadd( -37.4624, -3.64035, 14.8566, 0.28 ) }
    dend_14 { pt3dadd( -38.73, -4.13444, 16.321, 0.55 ) }
    dend_14 { pt3dadd( -40.8408, -5.12559, 19.0754, 0.28 ) }
    dend_14 { pt3dadd( -41.2253, -5.3506, 19.7136, 0.83 ) }
    dend_14 { pt3dadd( -42.279, -6.45398, 22.198, 0.28 ) }
    dend_14 { pt3dadd( -42.3883, -6.60384, 22.544, 0.55 ) }
    dend_14 { pt3dadd( -43.0573, -7.38544, 24.4809, 0.28 ) }
    dend_14 { pt3dadd( -43.1906, -7.51881, 24.8324, 0.55 ) }
    dend_14 { pt3dadd( -43.8539, -7.80041, 25.9621, 0.28 ) }
    dend_14 { pt3dadd( -44.3795, -7.90296, 26.6559, 0.55 ) }
    dend_14 { pt3dadd( -46.6625, -7.93697, 28.8681, 0.28 ) }
    dend_14 { pt3dadd( -47.6423, -7.88085, 29.7709, 0.55 ) }
    dend_14 { pt3dadd( -55.0805, -8.8746, 36.3766, 0.55 ) }
    dend_14 { pt3dadd( -61.6779, -8.53683, 43.8836, 0.55 ) }
    dend_14 { pt3dadd( -68.2445, -9.05463, 51.4067, 0.55 ) }
    dend_14 { pt3dadd( -74.8847, -8.20764, 58.8333, 0.55 ) }
    dend_14 { pt3dadd( -81.6623, -6.8131, 66.0456, 0.55 ) }
    dend_14 { pt3dadd( -87.593, -5.54053, 73.9906, 0.55 ) }
    dend_14 { pt3dadd( -94.3199, -5.44729, 81.3893, 0.55 ) }
    dend_14 { pt3dadd( -102.079, -5.92841, 87.6783, 0.55 ) }
    dend_14 { pt3dadd( -108.419, -5.99303, 95.4116, 0.55 ) }
    dend_14 { pt3dadd( -114.962, -6.72285, 102.936, 0.55 ) }
    dend_14 { pt3dadd( -121.877, -8.58409, 109.903, 0.55 ) }
    dend_14 { pt3dadd( -129.822, -9.72794, 115.862, 0.55 ) }
    dend_14 { pt3dadd( -137.875, -12.3678, 121.135, 0.55 ) }
    dend_14 { pt3dadd( -145.317, -15.7706, 126.831, 0.55 ) }
    dend_14 { pt3dadd( -151.803, -19.8787, 133.169, 0.55 ) }
    dend_14 { pt3dadd( -157.829, -24.8023, 139.349, 0.55 ) }
    dend_14 { pt3dadd( -163.127, -30.775, 145.214, 0.55 ) }
    dend_14 { pt3dadd( -167.322, -35.9998, 152.542, 0.55 ) }
    dend_14 { pt3dadd( -173.005, -40.2605, 159.513, 0.55 ) }
    dend_14 { pt3dadd( -179.603, -42.8599, 166.539, 0.55 ) }
    dend_14 { pt3dadd( -186.714, -43.7512, 173.51, 0.55 ) }
    dend_14 { pt3dadd( -193.513, -42.7904, 180.777, 0.55 ) }
    dend_14 { pt3dadd( -201.004, -40.1916, 186.842, 0.55 ) }
    dend_14 { pt3dadd( -208.534, -38.4902, 193.186, 0.55 ) }
    // Section: dend_10, id: dend_10, parent: dend_0 (entry count 51/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 1.18258, -23.7824, 0.348535, 0.83 ) }
    dend_10 { pt3dadd( 4.65968, -27.6162, -2.00972, 0.83 ) }
    dend_10 { pt3dadd( 6.28236, -29.3324, -2.96751, 0.83 ) }
    dend_10 { pt3dadd( 7.9544, -31.0316, -3.97572, 0.83 ) }
    dend_10 { pt3dadd( 9.75834, -32.8217, -5.02084, 0.83 ) }
    dend_10 { pt3dadd( 11.8642, -34.9115, -6.24085, 1.11 ) }
    dend_10 { pt3dadd( 13.897, -36.9289, -7.41858, 1.11 ) }
    dend_10 { pt3dadd( 15.9766, -38.9872, -8.39489, 0.83 ) }
    dend_10 { pt3dadd( 17.733, -40.6424, -9.25737, 0.83 ) }
    dend_10 { pt3dadd( 19.3965, -42.0945, -10.0901, 1.11 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 61/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 1.18258, -23.7824, 0.348535, 1.11 ) }
    dend_1 { pt3dadd( 0.0429143, -28.5354, 0.534756, 1.11 ) }
    dend_1 { pt3dadd( -0.723949, -31.7336, 0.660061, 1.11 ) }
    dend_1 { pt3dadd( -1.74088, -35.9747, 0.826227, 1.38 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 65/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( -3.89618, 36.4777, 0.180803, 0.55 ) }
    axon_1 { pt3dadd( -5.42749, 51.3993, 0.180803, 0.55 ) }
    axon_1 { pt3dadd( -6.95881, 66.3209, 0.180803, 0.55 ) }
    // Section: dend_33, id: dend_33, parent: dend_31 (entry count 68/100)
    dend_33 { pt3dclear() }
    dend_33 { pt3dadd( 5.14205, 23.2575, -29.4199, 0.55 ) }
    dend_33 { pt3dadd( 7.2978, 26.0776, -30.807, 0.55 ) }
    dend_33 { pt3dadd( 8.27997, 27.3185, -31.4522, 1.11 ) }
    dend_33 { pt3dadd( 9.93983, 29.4285, -32.6446, 0.55 ) }
    dend_33 { pt3dadd( 12.4403, 32.4866, -34.4041, 0.55 ) }
    dend_33 { pt3dadd( 14.173, 34.5494, -35.5283, 0.83 ) }
    dend_33 { pt3dadd( 16.1272, 36.7056, -36.6743, 0.28 ) }
    dend_33 { pt3dadd( 16.7931, 37.3351, -37.0844, 0.55 ) }
    dend_33 { pt3dadd( 18.6929, 38.8738, -38.1185, 0.55 ) }
    dend_33 { pt3dadd( 20.2566, 39.8775, -38.8089, 0.55 ) }
    dend_33 { pt3dadd( 22.9853, 41.2403, -39.8228, 0.28 ) }
    dend_33 { pt3dadd( 24.9296, 42.0875, -40.4362, 0.55 ) }
    dend_33 { pt3dadd( 27.558, 43.1398, -41.0409, 0.28 ) }
    dend_33 { pt3dadd( 28.9098, 43.7002, -41.2728, 0.28 ) }
    dend_33 { pt3dadd( 31.7246, 44.8845, -41.6493, 0.55 ) }
    dend_33 { pt3dadd( 34.6062, 46.1208, -41.9878, 0.55 ) }
    dend_33 { pt3dadd( 36.4916, 46.922, -42.1683, 0.28 ) }
    dend_33 { pt3dadd( 39.1832, 48.1365, -42.3464, 0.55 ) }
    dend_33 { pt3dadd( 42.7793, 49.6468, -42.3965, 0.28 ) }
    dend_33 { pt3dadd( 45.1845, 50.5707, -42.3816, 0.55 ) }
    dend_33 { pt3dadd( 47.6066, 51.3803, -42.3126, 0.55 ) }
    dend_33 { pt3dadd( 48.9301, 51.7519, -42.2549, 0.55 ) }
    dend_33 { pt3dadd( 51.094, 52.2924, -42.2015, 0.55 ) }
    dend_33 { pt3dadd( 54.4749, 53.0309, -42.0772, 0.83 ) }
    dend_33 { pt3dadd( 55.8157, 53.331, -42.0029, 0.83 ) }
    dend_33 { pt3dadd( 58.0226, 53.9132, -41.8951, 0.55 ) }
    dend_33 { pt3dadd( 60.0214, 54.5765, -41.8719, 0.55 ) }
    dend_33 { pt3dadd( 62.4428, 55.5392, -41.9734, 0.55 ) }
    dend_33 { pt3dadd( 65.3059, 56.8772, -42.3129, 0.28 ) }
    dend_33 { pt3dadd( 66.8875, 57.7388, -42.7538, 0.55 ) }
    dend_33 { pt3dadd( 68.4787, 58.6344, -43.3858, 0.28 ) }
    dend_33 { pt3dadd( 69.9299, 59.4837, -44.1494, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_33 { pt3dadd( 71.4289, 60.3402, -45.1301, 0.28 ) }
    dend_33 { pt3dadd( 73.4619, 61.4408, -46.6208, 0.55 ) }
    dend_33 { pt3dadd( 77.0714, 63.2286, -49.4065, 0.28 ) }
    dend_33 { pt3dadd( 78.5378, 63.8593, -50.5541, 0.83 ) }
    dend_33 { pt3dadd( 80.2266, 64.491, -51.8296, 0.28 ) }
    dend_33 { pt3dadd( 82.0123, 65.0506, -53.2689, 1.11 ) }
    dend_33 { pt3dadd( 83.753, 65.4707, -54.5696, 0.28 ) }
    dend_33 { pt3dadd( 84.8628, 65.615, -55.3866, 0.55 ) }
    dend_33 { pt3dadd( 86.615, 65.7505, -56.539, 0.28 ) }
    dend_33 { pt3dadd( 87.8223, 65.8191, -57.2683, 0.83 ) }
    dend_33 { pt3dadd( 92.4704, 65.9931, -59.7743, 0.28 ) }
    dend_33 { pt3dadd( 95.2979, 66.1539, -61.2099, 0.83 ) }
    dend_33 { pt3dadd( 98.9375, 66.5312, -63.0963, 0.28 ) }
    dend_33 { pt3dadd( 101.408, 66.8875, -64.2286, 0.28 ) }
    dend_33 { pt3dadd( 103.475, 67.24, -64.9889, 0.28 ) }
    dend_33 { pt3dadd( 105.316, 67.6858, -65.518, 0.83 ) }
    dend_33 { pt3dadd( 107.217, 68.2685, -65.9037, 0.83 ) }
    dend_33 { pt3dadd( 108.65, 68.7708, -66.2412, 0.83 ) }
    dend_33 { pt3dadd( 111.061, 69.6746, -66.8595, 0.28 ) }
    dend_33 { pt3dadd( 111.834, 69.9134, -67.1828, 0.28 ) }
    dend_33 { pt3dadd( 113.685, 70.4283, -68.1683, 0.83 ) }
    dend_33 { pt3dadd( 116.103, 71.0085, -69.8476, 0.28 ) }
    dend_33 { pt3dadd( 117.122, 71.192, -70.779, 0.55 ) }
    dend_33 { pt3dadd( 119.651, 71.5145, -73.3064, 0.28 ) }
    dend_33 { pt3dadd( 120.876, 71.6188, -74.6759, 0.83 ) }
    dend_33 { pt3dadd( 121.944, 71.6863, -75.8864, 0.28 ) }
    dend_33 { pt3dadd( 123.711, 71.7663, -77.9686, 0.55 ) }
    dend_33 { pt3dadd( 126.306, 72.014, -80.7406, 0.28 ) }
    dend_33 { pt3dadd( 127.915, 72.2146, -82.2873, 0.28 ) }
    dend_33 { pt3dadd( 129.628, 72.4734, -83.692, 1.11 ) }
    dend_33 { pt3dadd( 133.208, 73.1432, -86.2373, 0.28 ) }
    dend_33 { pt3dadd( 134.152, 73.3074, -86.7965, 0.55 ) }
    dend_33 { pt3dadd( 137.335, 73.8188, -88.111, 0.28 ) }
    dend_33 { pt3dadd( 138.118, 73.9436, -88.3216, 0.83 ) }
    dend_33 { pt3dadd( 139.48, 74.1612, -88.5987, 0.83 ) }
    dend_33 { pt3dadd( 141.258, 74.445, -89.0452, 0.83 ) }
    dend_33 { pt3dadd( 144.093, 74.9848, -89.886, 0.28 ) }
    dend_33 { pt3dadd( 145.929, 75.3021, -90.4904, 0.55 ) }
    dend_33 { pt3dadd( 147.088, 75.4668, -90.9922, 0.28 ) }
    dend_33 { pt3dadd( 147.637, 75.5427, -91.2611, 0.55 ) }
    dend_33 { pt3dadd( 153.44, 76.1953, -94.4909, 0.28 ) }
    dend_33 { pt3dadd( 155.153, 76.457, -95.681, 0.83 ) }
    // Section: dend_32, id: dend_32, parent: dend_31 (entry count 42/100)
    dend_32 { pt3dclear() }
    dend_32 { pt3dadd( 5.14205, 23.2575, -29.4199, 0.83 ) }
    dend_32 { pt3dadd( 5.3278, 24.5691, -30.4487, 0.83 ) }
    dend_32 { pt3dadd( 5.79246, 28.1121, -33.0097, 0.28 ) }
    dend_32 { pt3dadd( 5.91782, 29.2029, -33.8339, 0.83 ) }
    dend_32 { pt3dadd( 6.06932, 31.0822, -35.1797, 0.55 ) }
    dend_32 { pt3dadd( 6.16866, 33.0315, -36.5644, 0.83 ) }
    dend_32 { pt3dadd( 6.24674, 34.7341, -37.7723, 0.28 ) }
    dend_32 { pt3dadd( 6.29259, 35.6294, -38.3841, 0.55 ) }
    dend_32 { pt3dadd( 6.37626, 38.181, -40.1075, 0.28 ) }
    dend_32 { pt3dadd( 6.41489, 40.0424, -41.5212, 0.83 ) }
    dend_32 { pt3dadd( 6.39346, 42.6643, -43.6285, 0.28 ) }
    dend_32 { pt3dadd( 6.36184, 43.7072, -44.5386, 0.83 ) }
    dend_32 { pt3dadd( 6.33453, 44.896, -45.694, 0.83 ) }
    dend_32 { pt3dadd( 6.26826, 47.3941, -48.3754, 0.28 ) }
    dend_32 { pt3dadd( 6.2612, 48.5134, -49.7189, 0.55 ) }
    dend_32 { pt3dadd( 6.27188, 49.3539, -50.8579, 0.28 ) }
    dend_32 { pt3dadd( 6.27522, 50.1098, -51.95, 0.83 ) }
    dend_32 { pt3dadd( 6.23074, 51.5669, -54.0957, 0.28 ) }
    dend_32 { pt3dadd( 6.24428, 52.0702, -54.9408, 0.83 ) }
    dend_32 { pt3dadd( 6.39852, 53.4253, -57.3221, 0.28 ) }
    dend_32 { pt3dadd( 6.48284, 53.8464, -58.0742, 0.55 ) }
    dend_32 { pt3dadd( 6.54837, 54.0924, -58.5172, 0.28 ) }
    dend_32 { pt3dadd( 6.66071, 54.4715, -59.19, 0.83 ) }
    dend_32 { pt3dadd( 7.43954, 57.1349, -63.3351, 0.28 ) }
    dend_32 { pt3dadd( 7.56595, 57.5118, -63.8458, 0.83 ) }
    dend_32 { pt3dadd( 8.1821, 59.2632, -65.9348, 0.28 ) }
    dend_32 { pt3dadd( 8.35075, 59.7114, -66.4688, 0.55 ) }
    dend_32 { pt3dadd( 9.21812, 61.9416, -68.9461, 0.28 ) }
    dend_32 { pt3dadd( 9.88881, 63.7508, -70.8813, 1.11 ) }
    dend_32 { pt3dadd( 10.4644, 65.7181, -73.0578, 0.28 ) }
    dend_32 { pt3dadd( 10.8111, 67.1739, -74.8644, 0.55 ) }
    dend_32 { pt3dadd( 11.256, 69.6175, -78.2201, 0.28 ) }
    dend_32 { pt3dadd( 11.4011, 70.9636, -80.1913, 0.83 ) }
    dend_32 { pt3dadd( 11.3499, 72.0679, -82.2852, 0.83 ) }
    dend_32 { pt3dadd( 10.8068, 74.5152, -87.9863, 0.28 ) }
    dend_32 { pt3dadd( 10.5455, 75.2258, -89.8327, 1.11 ) }
    dend_32 { pt3dadd( 10.228, 75.8576, -91.6319, 0.28 ) }
    dend_32 { pt3dadd( 10.0454, 76.1171, -92.4469, 1.11 ) }
    dend_32 { pt3dadd( 7.99584, 78.2961, -100.642, 0.28 ) }
    dend_32 { pt3dadd( 7.47152, 78.7734, -102.677, 1.11 ) }
    // Section: dend_27, id: dend_27, parent: dend_23 (entry count 82/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( 18.9503, 12.8126, 6.87928, 0.55 ) }
    dend_27 { pt3dadd( 19.9186, 14.453, 6.85974, 0.55 ) }
    dend_27 { pt3dadd( 20.9573, 16.1013, 6.9902, 0.55 ) }
    dend_27 { pt3dadd( 22.5678, 18.5086, 7.46834, 1.11 ) }
    dend_27 { pt3dadd( 24.0959, 20.7931, 8.08052, 0.55 ) }
    dend_27 { pt3dadd( 25.4518, 22.8105, 8.68364, 0.55 ) }
    dend_27 { pt3dadd( 26.815, 24.8654, 9.38711, 0.55 ) }
    dend_27 { pt3dadd( 29.0853, 28.3171, 11.0581, 0.55 ) }
    dend_27 { pt3dadd( 31.2874, 31.7364, 13.0672, 0.55 ) }
    dend_27 { pt3dadd( 32.3148, 33.3502, 14.1595, 0.55 ) }
    dend_27 { pt3dadd( 33.6721, 35.5664, 15.8286, 0.55 ) }
    dend_27 { pt3dadd( 35.2882, 38.2665, 18.0264, 0.55 ) }
    dend_27 { pt3dadd( 37.2661, 41.7375, 21.0003, 0.55 ) }
    dend_27 { pt3dadd( 37.9822, 43.1734, 22.1725, 0.28 ) }
    dend_27 { pt3dadd( 38.1626, 43.565, 22.4979, 0.55 ) }
    dend_27 { pt3dadd( 38.5278, 44.3726, 23.1982, 0.28 ) }
    dend_27 { pt3dadd( 38.7011, 44.8024, 23.5923, 0.55 ) }
    dend_27 { pt3dadd( 39.2016, 46.117, 24.5387, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_27 { pt3dadd( 39.6903, 47.4614, 24.8148, 0.55 ) }
    dend_27 { pt3dadd( 45.9162, 54.5135, 27.8019, 0.55 ) }
    dend_27 { pt3dadd( 52.1931, 61.8541, 29.7811, 0.55 ) }
    dend_27 { pt3dadd( 58.3577, 69.4714, 30.7617, 0.55 ) }
    dend_27 { pt3dadd( 62.5748, 78.3067, 31.0742, 0.55 ) }
    dend_27 { pt3dadd( 65.9351, 87.2989, 32.9847, 0.55 ) }
    dend_27 { pt3dadd( 70.5081, 95.5185, 35.8162, 0.55 ) }
    dend_27 { pt3dadd( 74.967, 103.415, 39.6264, 0.55 ) }
    // Section: dend_24, id: dend_24, parent: dend_23 (entry count 8/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 18.9503, 12.8126, 6.87928, 0.28 ) }
    dend_24 { pt3dadd( 18.7586, 12.4197, 8.61, 0.28 ) }
    dend_24 { pt3dadd( 18.4568, 11.8011, 11.3343, 0.83 ) }
    dend_24 { pt3dadd( 17.8296, 10.5155, 16.9962, 0.55 ) }
    dend_24 { pt3dadd( 17.6305, 10.1073, 18.7938, 0.55 ) }
    dend_24 { pt3dadd( 17.3319, 9.49526, 21.4895, 0.55 ) }
    dend_24 { pt3dadd( 15.3884, 8.55846, 31.2516, 0.55 ) }
    dend_24 { pt3dadd( 13.714, 8.63912, 41.1101, 0.55 ) }
    // Section: dend_17, id: dend_17, parent: dend_15 (entry count 16/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -27.6723, 5.49943, 4.73584, 0.55 ) }
    dend_17 { pt3dadd( -34.9374, 6.18746, 6.87156, 0.55 ) }
    dend_17 { pt3dadd( -38.0275, 6.36314, 7.80144, 0.55 ) }
    dend_17 { pt3dadd( -42.1567, 6.63709, 9.02514, 0.55 ) }
    dend_17 { pt3dadd( -45.5725, 6.97431, 10.0084, 0.55 ) }
    dend_17 { pt3dadd( -49.4263, 7.47633, 11.1218, 0.55 ) }
    dend_17 { pt3dadd( -53.4992, 8.16109, 12.3582, 0.55 ) }
    dend_17 { pt3dadd( -55.5345, 8.59523, 13.1637, 0.55 ) }
    dend_17 { pt3dadd( -57.6043, 9.24116, 14.1455, 0.55 ) }
    dend_17 { pt3dadd( -60.2045, 10.3144, 15.4952, 0.55 ) }
    dend_17 { pt3dadd( -61.7378, 11.0894, 16.4097, 0.55 ) }
    dend_17 { pt3dadd( -63.639, 12.2315, 17.6712, 0.55 ) }
    dend_17 { pt3dadd( -66.1369, 13.7519, 19.5872, 0.55 ) }
    dend_17 { pt3dadd( -67.8574, 14.8319, 20.9819, 0.55 ) }
    dend_17 { pt3dadd( -69.9158, 16.0037, 22.7274, 0.55 ) }
    dend_17 { pt3dadd( -72.4947, 17.3078, 24.9245, 0.55 ) }
    dend_17 { pt3dadd( -74.7964, 18.3248, 26.7489, 0.55 ) }
    dend_17 { pt3dadd( -77.7824, 19.5684, 28.9604, 0.55 ) }
    dend_17 { pt3dadd( -85.9794, 20.811, 34.5447, 0.55 ) }
    dend_17 { pt3dadd( -93.6233, 22.7887, 40.6649, 0.55 ) }
    dend_17 { pt3dadd( -101.711, 25.7975, 45.6718, 0.55 ) }
    dend_17 { pt3dadd( -110.726, 27.4465, 49.6555, 0.55 ) }
    dend_17 { pt3dadd( -119.285, 27.741, 54.8176, 0.55 ) }
    dend_17 { pt3dadd( -127.741, 27.9717, 60.1497, 0.55 ) }
    dend_17 { pt3dadd( -135.76, 28.9839, 66.0344, 0.55 ) }
    dend_17 { pt3dadd( -144.488, 29.1629, 70.9112, 0.55 ) }
    dend_17 { pt3dadd( -152.987, 28.0304, 76.051, 0.55 ) }
    dend_17 { pt3dadd( -160.469, 25.6665, 82.2274, 0.55 ) }
    dend_17 { pt3dadd( -166.548, 21.5055, 88.9227, 0.55 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 45/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -27.6723, 5.49943, 4.73584, 0.55 ) }
    dend_16 { pt3dadd( -29.744, 6.72194, 3.90736, 0.55 ) }
    dend_16 { pt3dadd( -31.6383, 7.87686, 3.18408, 0.55 ) }
    dend_16 { pt3dadd( -35.1733, 9.91506, 1.94122, 0.55 ) }
    dend_16 { pt3dadd( -41.0047, 13.3786, -0.0774207, 0.55 ) }
    dend_16 { pt3dadd( -43.7944, 15.0787, -0.99417, 0.55 ) }
    dend_16 { pt3dadd( -46.2215, 16.5838, -1.81382, 0.55 ) }
    dend_16 { pt3dadd( -47.8563, 17.5642, -2.38551, 0.55 ) }
    dend_16 { pt3dadd( -50.37, 19.0769, -3.32361, 0.55 ) }
    dend_16 { pt3dadd( -53.5653, 21.0148, -4.5335, 0.55 ) }
    dend_16 { pt3dadd( -56.6004, 22.8804, -5.50973, 0.55 ) }
    dend_16 { pt3dadd( -58.7747, 24.1473, -6.20493, 0.55 ) }
    dend_16 { pt3dadd( -60.1728, 24.9377, -6.66396, 0.55 ) }
    dend_16 { pt3dadd( -64.0147, 27.0364, -7.86535, 0.55 ) }
    dend_16 { pt3dadd( -65.7125, 27.9818, -8.355, 0.55 ) }
    dend_16 { pt3dadd( -68.9659, 29.6804, -9.1368, 0.55 ) }
    dend_16 { pt3dadd( -70.4344, 30.4865, -9.43335, 0.55 ) }
    dend_16 { pt3dadd( -74.7716, 32.8589, -10.1496, 0.55 ) }
    dend_16 { pt3dadd( -78.0104, 34.7224, -10.6192, 0.55 ) }
    dend_16 { pt3dadd( -80.0158, 35.901, -10.7966, 0.55 ) }
    dend_16 { pt3dadd( -82.8758, 37.6171, -11.0064, 0.55 ) }
    dend_16 { pt3dadd( -86.2026, 39.6408, -11.1511, 0.55 ) }
    dend_16 { pt3dadd( -88.3424, 41.0579, -11.2136, 0.55 ) }
    dend_16 { pt3dadd( -91.1782, 43.095, -11.1771, 0.55 ) }
    dend_16 { pt3dadd( -93.17, 44.5921, -11.1067, 0.55 ) }
    dend_16 { pt3dadd( -94.4358, 45.5972, -11.0263, 0.83 ) }
    dend_16 { pt3dadd( -96.8024, 47.6608, -10.8974, 0.55 ) }
    dend_16 { pt3dadd( -98.064, 48.7967, -10.8387, 0.83 ) }
    dend_16 { pt3dadd( -99.8523, 50.5232, -10.8004, 0.55 ) }
    dend_16 { pt3dadd( -101.097, 51.7332, -10.8258, 0.55 ) }
    dend_16 { pt3dadd( -103.599, 54.2275, -11.0208, 1.38 ) }
    dend_16 { pt3dadd( -106.165, 56.7868, -11.1756, 0.55 ) }
    dend_16 { pt3dadd( -107.224, 57.8076, -11.3271, 0.83 ) }
    dend_16 { pt3dadd( -109.076, 59.5604, -11.6856, 0.55 ) }
    dend_16 { pt3dadd( -110.215, 60.5679, -11.9994, 0.55 ) }
    dend_16 { pt3dadd( -112.022, 62.1105, -12.6321, 0.28 ) }
    dend_16 { pt3dadd( -113.919, 63.5749, -13.3736, 0.83 ) }
    dend_16 { pt3dadd( -117.441, 65.9614, -14.7661, 0.55 ) }
    dend_16 { pt3dadd( -118.725, 66.7549, -15.2806, 0.83 ) }
    dend_16 { pt3dadd( -121.456, 68.2586, -16.4099, 0.83 ) }
    dend_16 { pt3dadd( -123.875, 69.4867, -17.417, 0.55 ) }
    dend_16 { pt3dadd( -126.223, 70.6024, -18.3666, 0.55 ) }
    dend_16 { pt3dadd( -129.037, 71.8131, -19.444, 0.55 ) }
    dend_16 { pt3dadd( -130.488, 72.3299, -19.8757, 1.11 ) }
    dend_16 { pt3dadd( -133.304, 73.2118, -20.6842, 0.55 ) }
    dend_16 { pt3dadd( -134.458, 73.5502, -20.9809, 0.55 ) }
    dend_16 { pt3dadd( -135.854, 73.9316, -21.3167, 0.83 ) }
    dend_16 { pt3dadd( -137.578, 74.4182, -21.7908, 0.83 ) }
    dend_16 { pt3dadd( -140.582, 75.3267, -22.6405, 0.55 ) }
    dend_16 { pt3dadd( -143.65, 76.2291, -23.6043, 0.55 ) }
    dend_16 { pt3dadd( -145.346, 76.6894, -24.1944, 0.55 ) }
    dend_16 { pt3dadd( -146.647, 76.9997, -24.7157, 0.83 ) }
    dend_16 { pt3dadd( -149.508, 77.5914, -25.9354, 0.55 ) }
    dend_16 { pt3dadd( -150.946, 77.9009, -26.6066, 0.55 ) }
    dend_16 { pt3dadd( -152.703, 78.2754, -27.455, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_16 { pt3dadd( -154.612, 78.6202, -28.345, 0.83 ) }
    dend_16 { pt3dadd( -155.925, 78.7983, -29.0538, 0.55 ) }
    dend_16 { pt3dadd( -157.533, 78.9739, -29.9497, 0.83 ) }
    dend_16 { pt3dadd( -161.159, 79.4769, -31.9441, 0.55 ) }
    dend_16 { pt3dadd( -162.467, 79.777, -32.6053, 0.28 ) }
    dend_16 { pt3dadd( -163.148, 80.0072, -32.9202, 0.55 ) }
    dend_16 { pt3dadd( -166.552, 81.517, -34.4111, 0.28 ) }
    dend_16 { pt3dadd( -168.391, 82.4659, -35.18, 0.55 ) }
    dend_16 { pt3dadd( -170.005, 83.396, -35.7461, 0.28 ) }
    dend_16 { pt3dadd( -172.921, 85.1736, -36.578, 0.55 ) }
    dend_16 { pt3dadd( -174.465, 86.1511, -36.9928, 0.55 ) }
    dend_16 { pt3dadd( -175.536, 86.8248, -37.2359, 0.28 ) }
    dend_16 { pt3dadd( -176.5, 87.3929, -37.4382, 0.55 ) }
    dend_16 { pt3dadd( -178.395, 88.3111, -37.9295, 0.28 ) }
    dend_16 { pt3dadd( -181.822, 89.6228, -38.909, 0.83 ) }
    dend_16 { pt3dadd( -184.064, 90.3423, -39.6192, 0.28 ) }
    dend_16 { pt3dadd( -185.835, 90.889, -40.1557, 0.55 ) }
    dend_16 { pt3dadd( -188.773, 91.7424, -41.0512, 0.28 ) }
    dend_16 { pt3dadd( -190.757, 92.2893, -41.5381, 0.55 ) }
    dend_16 { pt3dadd( -191.938, 92.5836, -41.7677, 0.55 ) }
    dend_16 { pt3dadd( -194.787, 93.3088, -41.7213, 0.28 ) }
    dend_16 { pt3dadd( -195.861, 93.6143, -41.5116, 0.28 ) }
    dend_16 { pt3dadd( -197.38, 94.1205, -40.9018, 0.55 ) }
    dend_16 { pt3dadd( -200.298, 95.1921, -39.1241, 0.28 ) }
    dend_16 { pt3dadd( -201.501, 95.6718, -38.2027, 0.55 ) }
    dend_16 { pt3dadd( -205.147, 97.0749, -34.9675, 0.28 ) }
    dend_16 { pt3dadd( -205.724, 97.289, -34.4117, 0.55 ) }
    dend_16 { pt3dadd( -207.064, 97.7932, -33.133, 0.28 ) }
    dend_16 { pt3dadd( -207.445, 97.9418, -32.7565, 0.55 ) }
    dend_16 { pt3dadd( -209.437, 98.7571, -31.0156, 0.28 ) }
    dend_16 { pt3dadd( -209.846, 98.9308, -30.6819, 0.55 ) }
    dend_16 { pt3dadd( -211.571, 99.5594, -30.0081, 0.28 ) }
    dend_16 { pt3dadd( -211.808, 99.6554, -29.9161, 0.55 ) }
    // Section: dend_12, id: dend_12, parent: dend_10 (entry count 33/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 19.3965, -42.0945, -10.0901, 0.55 ) }
    dend_12 { pt3dadd( 23.3867, -43.2565, -11.8003, 0.55 ) }
    dend_12 { pt3dadd( 25.0227, -43.7912, -12.4854, 0.55 ) }
    dend_12 { pt3dadd( 28.5877, -45.1356, -13.8952, 0.28 ) }
    dend_12 { pt3dadd( 30.1002, -45.7886, -14.451, 0.55 ) }
    dend_12 { pt3dadd( 31.5697, -46.4369, -14.9515, 0.28 ) }
    dend_12 { pt3dadd( 32.1947, -46.7141, -15.1457, 0.55 ) }
    dend_12 { pt3dadd( 34.2986, -47.8415, -15.7522, 0.28 ) }
    dend_12 { pt3dadd( 35.8105, -48.6962, -16.0709, 0.28 ) }
    dend_12 { pt3dadd( 37.3256, -49.5775, -16.2111, 0.55 ) }
    dend_12 { pt3dadd( 38.3992, -50.1755, -16.3003, 0.55 ) }
    dend_12 { pt3dadd( 39.8738, -50.9732, -16.3887, 0.28 ) }
    dend_12 { pt3dadd( 41.4596, -51.7445, -16.4624, 0.55 ) }
    dend_12 { pt3dadd( 42.0245, -51.9844, -16.4828, 0.55 ) }
    dend_12 { pt3dadd( 44.0723, -52.821, -16.5737, 0.55 ) }
    dend_12 { pt3dadd( 44.8771, -53.1465, -16.629, 0.55 ) }
    dend_12 { pt3dadd( 47.7493, -54.2507, -16.87, 0.55 ) }
    dend_12 { pt3dadd( 48.7608, -54.6543, -17.0176, 0.55 ) }
    dend_12 { pt3dadd( 51.0921, -55.591, -17.4533, 0.55 ) }
    dend_12 { pt3dadd( 52.8258, -56.3306, -17.9413, 0.55 ) }
    dend_12 { pt3dadd( 54.0474, -56.8717, -18.377, 0.83 ) }
    dend_12 { pt3dadd( 55.8283, -57.6825, -19.1581, 0.83 ) }
    dend_12 { pt3dadd( 58.6213, -58.9253, -20.5463, 0.28 ) }
    dend_12 { pt3dadd( 59.7852, -59.4512, -21.1491, 0.83 ) }
    dend_12 { pt3dadd( 62.3047, -60.4831, -22.5805, 0.28 ) }
    dend_12 { pt3dadd( 63.2341, -60.854, -23.1315, 0.55 ) }
    dend_12 { pt3dadd( 64.4638, -61.3139, -23.8747, 0.28 ) }
    dend_12 { pt3dadd( 66.2915, -61.9119, -24.9915, 0.83 ) }
    dend_12 { pt3dadd( 66.7587, -62.0301, -25.2701, 0.83 ) }
    dend_12 { pt3dadd( 69.3208, -62.6108, -26.8022, 0.28 ) }
    dend_12 { pt3dadd( 71.0164, -62.9693, -27.7378, 0.83 ) }
    dend_12 { pt3dadd( 73.0065, -63.38, -28.892, 0.28 ) }
    dend_12 { pt3dadd( 73.7535, -63.5209, -29.3187, 1.11 ) }
    dend_12 { pt3dadd( 76.8129, -64.1518, -31.3554, 0.55 ) }
    dend_12 { pt3dadd( 77.6279, -64.3376, -31.899, 0.55 ) }
    dend_12 { pt3dadd( 78.7839, -64.6195, -32.6494, 0.83 ) }
    dend_12 { pt3dadd( 81.0174, -65.174, -34.0922, 0.28 ) }
    dend_12 { pt3dadd( 81.9294, -65.4431, -34.6747, 0.55 ) }
    dend_12 { pt3dadd( 85.1824, -66.4342, -36.7972, 0.28 ) }
    dend_12 { pt3dadd( 87.2252, -67.0264, -38.1201, 0.28 ) }
    dend_12 { pt3dadd( 87.677, -67.1501, -38.405, 1.11 ) }
    dend_12 { pt3dadd( 89.7917, -67.6497, -39.6706, 0.28 ) }
    dend_12 { pt3dadd( 90.5627, -67.7878, -40.0731, 0.55 ) }
    dend_12 { pt3dadd( 92.7109, -68.0317, -41.1088, 0.28 ) }
    dend_12 { pt3dadd( 93.2463, -68.0416, -41.3065, 1.11 ) }
    dend_12 { pt3dadd( 95.7001, -67.9434, -42.163, 0.28 ) }
    dend_12 { pt3dadd( 96.2854, -67.884, -42.3578, 0.28 ) }
    dend_12 { pt3dadd( 97.4007, -67.7038, -42.6748, 0.55 ) }
    dend_12 { pt3dadd( 99.4748, -67.2979, -43.2294, 0.28 ) }
    dend_12 { pt3dadd( 101.967, -66.7337, -43.8222, 0.28 ) }
    dend_12 { pt3dadd( 103.047, -66.4582, -44.075, 0.83 ) }
    dend_12 { pt3dadd( 105.686, -65.6521, -44.7194, 0.28 ) }
    dend_12 { pt3dadd( 107.632, -64.9849, -45.2053, 0.83 ) }
    dend_12 { pt3dadd( 109.507, -64.1557, -45.5664, 0.28 ) }
    dend_12 { pt3dadd( 110.68, -63.4528, -45.6923, 0.28 ) }
    dend_12 { pt3dadd( 111.798, -62.3855, -45.8088, 0.83 ) }
    dend_12 { pt3dadd( 112.744, -61.1014, -45.8162, 0.28 ) }
    dend_12 { pt3dadd( 112.921, -60.7511, -45.825, 0.83 ) }
    dend_12 { pt3dadd( 114.257, -57.1107, -46.045, 0.28 ) }
    dend_12 { pt3dadd( 114.483, -56.2866, -46.1201, 0.83 ) }
    dend_12 { pt3dadd( 115.489, -52.1279, -46.6937, 0.28 ) }
    dend_12 { pt3dadd( 115.887, -50.2672, -46.8276, 0.83 ) }
    dend_12 { pt3dadd( 116.801, -46.6103, -46.8921, 0.28 ) }
    dend_12 { pt3dadd( 116.995, -46.0074, -46.9566, 0.55 ) }
    dend_12 { pt3dadd( 117.797, -43.9489, -47.3005, 0.28 ) }
    dend_12 { pt3dadd( 118.675, -42.2169, -47.499, 0.55 ) }
    dend_12 { pt3dadd( 122.349, -36.4376, -47.8123, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_12 { pt3dadd( 123.908, -34.3552, -47.8723, 0.83 ) }
    dend_12 { pt3dadd( 128.253, -29.0968, -47.7355, 0.28 ) }
    dend_12 { pt3dadd( 129.151, -28.1044, -47.7111, 0.55 ) }
    dend_12 { pt3dadd( 132.621, -24.785, -47.6121, 0.28 ) }
    dend_12 { pt3dadd( 133.529, -24.0586, -47.6117, 0.28 ) }
    dend_12 { pt3dadd( 134.617, -23.503, -47.7539, 0.83 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 6/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 19.3965, -42.0945, -10.0901, 0.55 ) }
    dend_11 { pt3dadd( 21.1919, -42.4798, -9.20959, 0.55 ) }
    dend_11 { pt3dadd( 23.5287, -43.0138, -8.14551, 0.55 ) }
    dend_11 { pt3dadd( 27.278, -43.9775, -6.55183, 0.55 ) }
    dend_11 { pt3dadd( 29.2203, -44.4804, -5.7701, 0.28 ) }
    dend_11 { pt3dadd( 32.3541, -45.3759, -4.60608, 0.28 ) }
    dend_11 { pt3dadd( 34.1885, -45.9534, -4.01734, 0.83 ) }
    dend_11 { pt3dadd( 36.2734, -46.6714, -3.42698, 0.28 ) }
    dend_11 { pt3dadd( 37.5289, -47.1883, -3.17372, 0.55 ) }
    dend_11 { pt3dadd( 38.229, -47.537, -3.11666, 0.28 ) }
    dend_11 { pt3dadd( 40.3594, -48.5775, -3.08115, 0.83 ) }
    dend_11 { pt3dadd( 42.9937, -49.7863, -3.1996, 0.55 ) }
    dend_11 { pt3dadd( 44.8543, -50.5168, -3.24173, 0.83 ) }
    dend_11 { pt3dadd( 47.0771, -51.3018, -3.24973, 0.55 ) }
    dend_11 { pt3dadd( 49.796, -52.2546, -3.2366, 0.55 ) }
    dend_11 { pt3dadd( 53.806, -53.608, -3.2217, 0.55 ) }
    dend_11 { pt3dadd( 55.4792, -54.134, -3.20651, 0.55 ) }
    dend_11 { pt3dadd( 58.7648, -55.2144, -3.15624, 0.55 ) }
    dend_11 { pt3dadd( 61.7163, -56.3006, -3.10245, 0.55 ) }
    dend_11 { pt3dadd( 64.4738, -57.4517, -3.04021, 0.83 ) }
    dend_11 { pt3dadd( 67.4605, -58.9839, -2.95866, 0.55 ) }
    dend_11 { pt3dadd( 69.4233, -60.1651, -2.91222, 0.55 ) }
    dend_11 { pt3dadd( 71.5607, -61.5211, -2.85527, 0.55 ) }
    dend_11 { pt3dadd( 73.5601, -62.8097, -2.848, 0.55 ) }
    dend_11 { pt3dadd( 75.0039, -63.6458, -2.83276, 0.55 ) }
    dend_11 { pt3dadd( 77.3997, -64.9901, -2.76096, 0.83 ) }
    dend_11 { pt3dadd( 79.6342, -66.2481, -2.65334, 0.83 ) }
    dend_11 { pt3dadd( 81.1468, -67.0435, -2.497, 0.55 ) }
    dend_11 { pt3dadd( 82.9019, -67.8314, -2.24936, 0.55 ) }
    dend_11 { pt3dadd( 85.7625, -69.0406, -1.21022, 0.55 ) }
    dend_11 { pt3dadd( 87.2658, -69.6339, -0.290111, 0.28 ) }
    dend_11 { pt3dadd( 87.9112, -69.8964, 0.238446, 0.55 ) }
    dend_11 { pt3dadd( 89.939, -70.8172, 2.22975, 0.28 ) }
    dend_11 { pt3dadd( 90.9252, -71.2937, 3.35689, 0.55 ) }
    dend_11 { pt3dadd( 95.0871, -73.4064, 8.99908, 0.55 ) }
    dend_11 { pt3dadd( 96.5088, -74.0588, 11.2812, 0.55 ) }
    dend_11 { pt3dadd( 97.4257, -74.4189, 12.8588, 0.55 ) }
    dend_11 { pt3dadd( 106.139, -77.9423, 16.1785, 0.55 ) }
    // Section: dend_5, id: dend_5, parent: dend_1 (entry count 44/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -1.74088, -35.9747, 0.826227, 0.83 ) }
    dend_5 { pt3dadd( -1.39575, -39.9324, 1.50738, 0.83 ) }
    dend_5 { pt3dadd( -1.20933, -42.0702, 1.87532, 0.83 ) }
    dend_5 { pt3dadd( -0.950951, -45.0331, 2.38525, 1.11 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 48/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -1.74088, -35.9747, 0.826227, 0.83 ) }
    dend_2 { pt3dadd( -2.73884, -39.5574, 0.832533, 0.83 ) }
    dend_2 { pt3dadd( -3.5417, -42.4396, 0.837607, 0.55 ) }
    dend_2 { pt3dadd( -4.63278, -46.3566, 0.844502, 0.83 ) }
    // Section: dend_26, id: dend_26, parent: dend_24 (entry count 52/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 13.714, 8.63912, 41.1101, 0.55 ) }
    dend_26 { pt3dadd( 10.7421, 8.95458, 50.6528, 0.55 ) }
    dend_26 { pt3dadd( 8.49237, 7.60741, 60.298, 0.55 ) }
    dend_26 { pt3dadd( 7.99121, 7.67462, 70.2852, 0.55 ) }
    dend_26 { pt3dadd( 8.3838, 9.03283, 80.1799, 0.55 ) }
    dend_26 { pt3dadd( 8.72428, 9.07543, 90.174, 0.55 ) }
    dend_26 { pt3dadd( 7.23905, 9.76936, 100.037, 0.55 ) }
    dend_26 { pt3dadd( 4.55967, 11.327, 109.538, 0.55 ) }
    dend_26 { pt3dadd( 1.05959, 11.1783, 118.904, 0.55 ) }
    dend_26 { pt3dadd( -3.33147, 11.623, 127.877, 0.55 ) }
    dend_26 { pt3dadd( -8.02789, 12.1862, 136.687, 0.55 ) }
    dend_26 { pt3dadd( -12.1462, 12.979, 145.763, 0.55 ) }
    dend_26 { pt3dadd( -16.798, 15.1112, 154.341, 0.55 ) }
    dend_26 { pt3dadd( -21.3559, 17.2966, 162.955, 0.55 ) }
    dend_26 { pt3dadd( -25.363, 19.5007, 171.834, 0.55 ) }
    dend_26 { pt3dadd( -28.5491, 20.5136, 181.255, 0.55 ) }
    dend_26 { pt3dadd( -31.792, 22.1543, 190.564, 0.55 ) }
    dend_26 { pt3dadd( -35.4662, 22.5207, 199.857, 0.55 ) }
    dend_26 { pt3dadd( -38.0635, 22.2537, 209.51, 0.55 ) }
    dend_26 { pt3dadd( -38.9507, 22.6731, 219.461, 0.55 ) }
    dend_26 { pt3dadd( -39.7828, 21.369, 229.336, 0.55 ) }
    // Section: dend_25, id: dend_25, parent: dend_24 (entry count 73/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 13.714, 8.63912, 41.1101, 0.55 ) }
    dend_25 { pt3dadd( 13.0793, 6.60963, 50.8704, 0.55 ) }
    dend_25 { pt3dadd( 11.4906, 4.7007, 60.5474, 0.55 ) }
    dend_25 { pt3dadd( 10.8666, 0.693668, 69.6424, 0.55 ) }
    dend_25 { pt3dadd( 8.67971, -2.28936, 78.9083, 0.55 ) }
    dend_25 { pt3dadd( 8.51435, -6.24505, 88.0469, 0.55 ) }
    dend_25 { pt3dadd( 6.369, -8.50978, 97.5338, 0.55 ) }
    dend_25 { pt3dadd( 3.4758, -10.7487, 106.826, 0.55 ) }
    dend_25 { pt3dadd( 0.160647, -12.696, 116.047, 0.55 ) }
    dend_25 { pt3dadd( -2.32385, -16.0601, 125.098, 0.55 ) }
    dend_25 { pt3dadd( -5.58829, -17.4606, 134.44, 0.55 ) }
    // Section: dend_9, id: dend_9, parent: dend_5 (entry count 84/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -0.950951, -45.0331, 2.38525, 0.83 ) }
    dend_9 { pt3dadd( -0.340333, -46.475, 3.06051, 0.83 ) }
    dend_9 { pt3dadd( 0.771432, -48.569, 4.32975, 0.83 ) }
    dend_9 { pt3dadd( 2.04907, -50.5148, 5.79171, 0.83 ) }
    dend_9 { pt3dadd( 3.8937, -53.2387, 7.94032, 0.83 ) }
    dend_9 { pt3dadd( 5.23599, -55.2355, 9.48693, 0.83 ) }
    dend_9 { pt3dadd( 6.83159, -57.4312, 11.2224, 0.83 ) }
    dend_9 { pt3dadd( 8.26468, -59.169, 12.7119, 0.83 ) }
    dend_9 { pt3dadd( 10.1685, -61.0004, 14.4486, 0.83 ) }
    dend_9 { pt3dadd( 11.6509, -62.2852, 15.5523, 0.83 ) }
    dend_9 { pt3dadd( 12.8968, -63.418, 16.2904, 0.83 ) }
    dend_9 { pt3dadd( 14.5839, -65.0176, 17.0606, 0.83 ) }
    dend_9 { pt3dadd( 16.7522, -67.1704, 17.8026, 0.83 ) }
    dend_9 { pt3dadd( 18.6108, -69.1184, 18.3572, 0.83 ) }
    dend_9 { pt3dadd( 21.8618, -72.5263, 19.1659, 0.83 ) }
    dend_9 { pt3dadd( 23.5736, -74.2515, 19.5702, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_9()
}

proc basic_shape_9() {
    dend_9 { pt3dadd( 24.5457, -75.2727, 19.7961, 0.55 ) }
    dend_9 { pt3dadd( 25.8566, -76.8836, 20.0784, 0.55 ) }
    dend_9 { pt3dadd( 27.1593, -78.6324, 20.3297, 0.55 ) }
    dend_9 { pt3dadd( 32.1952, -86.9161, 21.8968, 0.55 ) }
    dend_9 { pt3dadd( 36.9983, -94.7874, 25.3253, 0.55 ) }
    dend_9 { pt3dadd( 41.1603, -103.094, 28.5048, 0.55 ) }
    dend_9 { pt3dadd( 45.5955, -111.149, 31.9786, 0.55 ) }
    dend_9 { pt3dadd( 50.1387, -118.084, 37.3419, 0.55 ) }
    dend_9 { pt3dadd( 54.1001, -124.584, 43.6561, 0.55 ) }
    dend_9 { pt3dadd( 58.3415, -131.643, 49.0958, 0.55 ) }
    dend_9 { pt3dadd( 63.5888, -138.971, 53.0922, 0.55 ) }
    dend_9 { pt3dadd( 68.2409, -145.598, 58.7633, 0.55 ) }
    dend_9 { pt3dadd( 73.9423, -151.196, 64.64, 0.55 ) }
    dend_9 { pt3dadd( 79.4854, -155.799, 71.4944, 0.55 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 14/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -0.950951, -45.0331, 2.38525, 0.83 ) }
    dend_6 { pt3dadd( -0.710081, -46.6643, 2.2447, 0.83 ) }
    dend_6 { pt3dadd( 0.0216844, -51.5542, 1.59343, 0.83 ) }
    dend_6 { pt3dadd( 0.521143, -54.7314, 1.05301, 0.83 ) }
    dend_6 { pt3dadd( 1.03246, -58.2235, 0.354956, 0.83 ) }
    dend_6 { pt3dadd( 1.50945, -61.7242, -0.397378, 0.83 ) }
    dend_6 { pt3dadd( 1.77623, -63.8736, -0.866856, 0.83 ) }
    dend_6 { pt3dadd( 2.11932, -66.7783, -1.57477, 0.83 ) }
    dend_6 { pt3dadd( 2.32032, -69.5053, -2.26776, 0.83 ) }
    dend_6 { pt3dadd( 2.42487, -73.067, -3.20386, 0.83 ) }
    dend_6 { pt3dadd( 2.43232, -76.5763, -4.21136, 0.83 ) }
    dend_6 { pt3dadd( 2.3479, -80.8284, -5.48935, 0.83 ) }
    dend_6 { pt3dadd( 2.20779, -84.4289, -6.63162, 0.83 ) }
    dend_6 { pt3dadd( 1.85876, -90.8936, -8.70275, 0.83 ) }
    dend_6 { pt3dadd( 1.60553, -95.1565, -10.0693, 0.83 ) }
    dend_6 { pt3dadd( 1.38011, -99.4228, -11.4221, 0.83 ) }
    dend_6 { pt3dadd( 1.16989, -103.916, -12.7927, 0.83 ) }
    dend_6 { pt3dadd( 0.883649, -110.695, -14.7371, 0.83 ) }
    dend_6 { pt3dadd( 0.715176, -114.432, -15.7419, 0.83 ) }
    dend_6 { pt3dadd( 0.558727, -118.458, -16.8003, 0.83 ) }
    dend_6 { pt3dadd( 0.481127, -121.271, -17.555, 0.83 ) }
    dend_6 { pt3dadd( 0.4302, -123.725, -18.1862, 0.83 ) }
    dend_6 { pt3dadd( 0.438178, -126.082, -18.8308, 0.83 ) }
    dend_6 { pt3dadd( 0.495872, -129.563, -19.8037, 0.83 ) }
    dend_6 { pt3dadd( 0.572626, -133.143, -20.88, 0.83 ) }
    dend_6 { pt3dadd( 0.769011, -139.615, -22.8358, 0.83 ) }
    dend_6 { pt3dadd( 0.864389, -142.343, -23.647, 0.55 ) }
    dend_6 { pt3dadd( 0.947283, -143.871, -24.0713, 0.83 ) }
    dend_6 { pt3dadd( 1.31406, -148.692, -25.1923, 0.83 ) }
    dend_6 { pt3dadd( 1.57994, -151.664, -25.7066, 0.55 ) }
    dend_6 { pt3dadd( 1.80578, -154.736, -25.7486, 0.83 ) }
    dend_6 { pt3dadd( 1.86757, -156.361, -25.6259, 0.55 ) }
    dend_6 { pt3dadd( 1.92602, -159.264, -25.405, 0.83 ) }
    dend_6 { pt3dadd( 1.82584, -163.977, -25.0397, 0.83 ) }
    dend_6 { pt3dadd( 1.69148, -166.746, -24.901, 0.83 ) }
    dend_6 { pt3dadd( 1.02971, -175.378, -24.7597, 0.83 ) }
    dend_6 { pt3dadd( 0.485677, -180.93, -24.8403, 0.55 ) }
    dend_6 { pt3dadd( 0.200333, -183.476, -24.9876, 0.83 ) }
    dend_6 { pt3dadd( -0.259141, -186.914, -25.4271, 0.83 ) }
    dend_6 { pt3dadd( -0.783461, -190.243, -26.1374, 0.55 ) }
    dend_6 { pt3dadd( -0.95585, -191.295, -26.4835, 1.11 ) }
    dend_6 { pt3dadd( -1.14793, -192.621, -27.0812, 0.55 ) }
    dend_6 { pt3dadd( -1.29772, -194.354, -27.6562, 0.83 ) }
    dend_6 { pt3dadd( -1.35071, -196.175, -28.1752, 0.55 ) }
    dend_6 { pt3dadd( -1.27926, -198.415, -28.752, 0.83 ) }
    dend_6 { pt3dadd( -1.16194, -200.542, -29.2605, 0.55 ) }
    dend_6 { pt3dadd( -1.03998, -202.298, -29.6932, 0.55 ) }
    dend_6 { pt3dadd( -0.779976, -205.689, -30.5905, 0.83 ) }
    dend_6 { pt3dadd( -0.595487, -208.027, -31.2034, 0.55 ) }
    dend_6 { pt3dadd( -0.523059, -208.805, -31.4229, 0.83 ) }
    dend_6 { pt3dadd( -0.336199, -210.376, -31.9165, 0.28 ) }
    dend_6 { pt3dadd( -0.269458, -210.948, -32.1183, 0.55 ) }
    dend_6 { pt3dadd( -0.116122, -212.314, -32.7354, 0.28 ) }
    dend_6 { pt3dadd( 0.0121725, -213.395, -33.2901, 0.55 ) }
    dend_6 { pt3dadd( 0.165385, -215.316, -34.2007, 0.28 ) }
    dend_6 { pt3dadd( 0.270211, -216.406, -34.7213, 0.28 ) }
    dend_6 { pt3dadd( 0.451115, -217.988, -35.461, 0.55 ) }
    dend_6 { pt3dadd( 0.748044, -220.159, -36.4731, 0.83 ) }
    dend_6 { pt3dadd( 0.984156, -221.71, -37.1688, 0.83 ) }
    dend_6 { pt3dadd( 1.40683, -224.108, -38.2693, 0.83 ) }
    // Section: dend_4, id: dend_4, parent: dend_2 (entry count 74/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -4.63278, -46.3566, 0.844502, 0.83 ) }
    dend_4 { pt3dadd( -6.69324, -50.2907, 1.16962, 0.83 ) }
    dend_4 { pt3dadd( -8.49114, -53.9015, 1.68203, 0.83 ) }
    dend_4 { pt3dadd( -9.98714, -56.9533, 2.20663, 0.55 ) }
    dend_4 { pt3dadd( -11.2774, -59.6744, 2.71212, 0.55 ) }
    dend_4 { pt3dadd( -11.9711, -61.1489, 3.00606, 0.28 ) }
    dend_4 { pt3dadd( -12.6566, -62.6257, 3.31236, 0.55 ) }
    dend_4 { pt3dadd( -13.8531, -65.6572, 4.12707, 0.55 ) }
    dend_4 { pt3dadd( -14.2503, -66.7597, 4.46494, 0.28 ) }
    dend_4 { pt3dadd( -14.745, -68.1918, 5.06764, 0.55 ) }
    dend_4 { pt3dadd( -15.0538, -69.0857, 5.53025, 0.28 ) }
    dend_4 { pt3dadd( -15.2838, -69.7842, 5.8979, 0.83 ) }
    dend_4 { pt3dadd( -15.9871, -72.2817, 7.16437, 0.55 ) }
    dend_4 { pt3dadd( -16.3655, -73.733, 7.79545, 0.55 ) }
    dend_4 { pt3dadd( -16.7545, -74.838, 8.31581, 0.83 ) }
    dend_4 { pt3dadd( -17.164, -75.8227, 8.72415, 0.28 ) }
    dend_4 { pt3dadd( -17.4761, -76.5372, 8.95833, 0.55 ) }
    dend_4 { pt3dadd( -18.2217, -78.0651, 9.3016, 0.28 ) }
    dend_4 { pt3dadd( -19.1354, -79.7847, 9.55621, 0.55 ) }
    dend_4 { pt3dadd( -20.6235, -82.3281, 9.89646, 0.55 ) }
    dend_4 { pt3dadd( -22.2078, -84.8277, 10.1459, 0.55 ) }
    dend_4 { pt3dadd( -22.9766, -85.9819, 10.2312, 0.55 ) }
    dend_4 { pt3dadd( -24.4828, -88.1962, 10.3338, 0.55 ) }
    dend_4 { pt3dadd( -28.034, -97.298, 10.8272, 0.55 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 98/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -4.63278, -46.3566, 0.844502, 0.83 ) }
    dend_3 { pt3dadd( -4.55101, -48.5577, 0.827403, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_10()
}

proc basic_shape_10() {
    dend_3 { pt3dadd( -4.50886, -49.9298, 0.813426, 1.11 ) }
    dend_3 { pt3dadd( -4.57641, -52.0908, 0.910725, 0.55 ) }
    dend_3 { pt3dadd( -4.74456, -53.8621, 1.02177, 0.28 ) }
    dend_3 { pt3dadd( -4.93356, -55.0488, 1.13401, 0.55 ) }
    dend_3 { pt3dadd( -5.22345, -56.3929, 1.29818, 0.28 ) }
    dend_3 { pt3dadd( -5.50031, -57.1456, 1.42761, 0.83 ) }
    dend_3 { pt3dadd( -6.41331, -58.9001, 1.82261, 0.28 ) }
    dend_3 { pt3dadd( -7.0091, -59.7757, 2.11225, 0.55 ) }
    dend_3 { pt3dadd( -7.70772, -60.6657, 2.44561, 0.28 ) }
    dend_3 { pt3dadd( -8.54952, -61.7199, 2.85469, 0.83 ) }
    dend_3 { pt3dadd( -9.62702, -63.1045, 3.43924, 0.28 ) }
    dend_3 { pt3dadd( -10.5642, -64.3547, 3.95637, 0.55 ) }
    dend_3 { pt3dadd( -11.8253, -66.2043, 4.50701, 0.28 ) }
    dend_3 { pt3dadd( -12.6821, -67.503, 4.81566, 0.55 ) }
    dend_3 { pt3dadd( -13.4196, -68.7453, 4.94738, 0.28 ) }
    dend_3 { pt3dadd( -14.3644, -70.5543, 4.93044, 0.55 ) }
    dend_3 { pt3dadd( -14.9715, -72.01, 4.78325, 0.55 ) }
    dend_3 { pt3dadd( -15.9108, -74.7761, 4.23875, 0.28 ) }
    dend_3 { pt3dadd( -16.1106, -75.6865, 3.92779, 0.55 ) }
    dend_3 { pt3dadd( -16.3471, -77.8056, 3.06732, 0.28 ) }
    dend_3 { pt3dadd( -16.3455, -78.8, 2.64227, 0.55 ) }
    dend_3 { pt3dadd( -16.251, -80.1593, 2.01994, 0.28 ) }
    dend_3 { pt3dadd( -16.1019, -81.3028, 1.55345, 0.83 ) }
    dend_3 { pt3dadd( -15.772, -83.3967, 0.959061, 0.28 ) }
    dend_3 { pt3dadd( -15.6559, -83.9658, 0.796632, 0.28 ) }
    dend_3 { pt3dadd( -15.2044, -86.0423, 0.282414, 0.55 ) }
    dend_3 { pt3dadd( -18.5709, -95.1766, 1.22974, 0.55 ) }
    dend_3 { pt3dadd( -22.2051, -104.25, 1.68266, 0.55 ) }
    dend_3 { pt3dadd( -24.4906, -113.68, 2.79014, 0.55 ) }
    dend_3 { pt3dadd( -28.2162, -122.692, 1.95958, 0.55 ) }
    dend_3 { pt3dadd( -33.5395, -130.662, -0.239277, 0.55 ) }
    dend_3 { pt3dadd( -39.2125, -138.689, -0.0440132, 0.55 ) }
    dend_3 { pt3dadd( -45.5252, -146.223, 0.624929, 0.55 ) }
    dend_3 { pt3dadd( -51.5369, -153.987, 1.29712, 0.55 ) }
    dend_3 { pt3dadd( -58.5959, -160.848, 2.09757, 0.55 ) }
    dend_3 { pt3dadd( -66.6818, -166.585, 2.0954, 0.55 ) }
    dend_3 { pt3dadd( -74.9918, -171.75, 0.396799, 0.55 ) }
    // Section: dend_8, id: dend_8, parent: dend_6 (entry count 37/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 1.40683, -224.108, -38.2693, 0.83 ) }
    dend_8 { pt3dadd( 1.52765, -226.776, -39.189, 0.83 ) }
    dend_8 { pt3dadd( 1.94166, -230.97, -40.2711, 0.55 ) }
    dend_8 { pt3dadd( 2.08623, -232.483, -40.6558, 0.83 ) }
    dend_8 { pt3dadd( 2.21724, -233.909, -41.0518, 0.55 ) }
    dend_8 { pt3dadd( 2.32308, -235.1, -41.385, 0.83 ) }
    dend_8 { pt3dadd( 2.55699, -237.691, -42.1095, 0.83 ) }
    dend_8 { pt3dadd( 2.91136, -241.29, -43.1423, 0.83 ) }
    dend_8 { pt3dadd( 3.45139, -246.444, -44.4027, 0.28 ) }
    dend_8 { pt3dadd( 3.69893, -248.876, -44.9598, 0.83 ) }
    dend_8 { pt3dadd( 3.96154, -251.304, -45.5266, 0.55 ) }
    dend_8 { pt3dadd( 4.00727, -251.675, -45.6196, 0.83 ) }
    dend_8 { pt3dadd( 4.29854, -253.662, -46.1481, 0.55 ) }
    dend_8 { pt3dadd( 4.86261, -257.151, -47.0757, 0.83 ) }
    dend_8 { pt3dadd( 5.21336, -258.904, -47.4814, 0.55 ) }
    dend_8 { pt3dadd( 5.73689, -261.265, -47.9912, 0.83 ) }
    dend_8 { pt3dadd( 6.13057, -263.114, -48.4318, 0.55 ) }
    dend_8 { pt3dadd( 6.46317, -264.748, -48.8443, 0.83 ) }
    dend_8 { pt3dadd( 6.78336, -266.493, -49.3158, 1.11 ) }
    dend_8 { pt3dadd( 7.0081, -268.06, -49.7738, 0.83 ) }
    dend_8 { pt3dadd( 7.28479, -270.759, -50.5414, 0.55 ) }
    dend_8 { pt3dadd( 7.43405, -272.697, -51.0301, 0.83 ) }
    dend_8 { pt3dadd( 7.53033, -274.499, -51.4586, 1.11 ) }
    dend_8 { pt3dadd( 7.57798, -276.687, -52.0205, 0.83 ) }
    dend_8 { pt3dadd( 7.60435, -278.022, -52.3622, 0.83 ) }
    dend_8 { pt3dadd( 7.64632, -279.008, -52.5985, 1.11 ) }
    dend_8 { pt3dadd( 7.8999, -281.674, -53.1304, 0.83 ) }
    dend_8 { pt3dadd( 8.015, -282.504, -53.2745, 0.83 ) }
    dend_8 { pt3dadd( 8.61376, -286.198, -53.8627, 0.55 ) }
    dend_8 { pt3dadd( 9.05643, -288.45, -54.222, 0.55 ) }
    dend_8 { pt3dadd( 9.48976, -290.563, -54.5561, 0.83 ) }
    dend_8 { pt3dadd( 10.309, -294.566, -55.1453, 0.83 ) }
    dend_8 { pt3dadd( 10.6291, -296.269, -55.3877, 0.55 ) }
    dend_8 { pt3dadd( 10.8839, -297.686, -55.5712, 0.83 ) }
    dend_8 { pt3dadd( 11.1832, -299.456, -55.7568, 0.55 ) }
    dend_8 { pt3dadd( 11.404, -301.58, -56.0982, 0.83 ) }
    dend_8 { pt3dadd( 11.4935, -303.164, -56.4301, 0.83 ) }
    dend_8 { pt3dadd( 11.5387, -304.803, -56.9463, 0.55 ) }
    dend_8 { pt3dadd( 11.5587, -305.448, -57.1752, 0.83 ) }
    dend_8 { pt3dadd( 11.5945, -306.738, -57.666, 0.55 ) }
    dend_8 { pt3dadd( 11.6715, -309.915, -59.1087, 0.28 ) }
    dend_8 { pt3dadd( 11.711, -311.537, -59.938, 0.83 ) }
    dend_8 { pt3dadd( 11.7802, -315.836, -62.1396, 0.55 ) }
    dend_8 { pt3dadd( 11.7896, -317.27, -62.9113, 0.55 ) }
    dend_8 { pt3dadd( 11.734, -319.782, -64.2364, 0.55 ) }
    dend_8 { pt3dadd( 11.5222, -323.721, -66.1259, 0.55 ) }
    dend_8 { pt3dadd( 11.2411, -326.95, -67.4984, 0.28 ) }
    dend_8 { pt3dadd( 10.9069, -329.722, -68.5986, 0.83 ) }
    dend_8 { pt3dadd( 10.4359, -332.807, -69.7125, 0.55 ) }
    dend_8 { pt3dadd( 9.83746, -336.198, -70.8279, 0.55 ) }
    dend_8 { pt3dadd( 9.02188, -340.29, -72.0028, 0.83 ) }
    dend_8 { pt3dadd( 8.4381, -342.995, -72.6277, 0.55 ) }
    dend_8 { pt3dadd( 8.20166, -344.024, -72.8468, 0.83 ) }
    dend_8 { pt3dadd( 7.46005, -347.186, -73.5171, 0.28 ) }
    dend_8 { pt3dadd( 7.0086, -349.196, -73.882, 0.55 ) }
    dend_8 { pt3dadd( 6.68447, -350.914, -74.2476, 0.83 ) }
    dend_8 { pt3dadd( 6.48561, -352.025, -74.5076, 0.28 ) }
    dend_8 { pt3dadd( 6.4462, -352.283, -74.565, 0.55 ) }
    dend_8 { pt3dadd( 6.28383, -353.676, -74.8626, 0.28 ) }
    dend_8 { pt3dadd( 6.09922, -355.025, -75.0999, 0.83 ) }
    dend_8 { pt3dadd( 5.86192, -356.65, -75.2915, 0.28 ) }
    dend_8 { pt3dadd( 5.73994, -357.409, -75.3256, 0.55 ) }
    dend_8 { pt3dadd( 5.42983, -359.35, -75.3775, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_11()
}

proc basic_shape_11() {
    dend_8 { pt3dadd( 5.08688, -361.304, -75.4042, 0.28 ) }
    dend_8 { pt3dadd( 4.51354, -363.951, -75.4727, 0.55 ) }
    dend_8 { pt3dadd( 4.01702, -366.262, -75.5848, 0.28 ) }
    dend_8 { pt3dadd( 3.72195, -367.606, -75.6346, 0.83 ) }
    dend_8 { pt3dadd( 3.26909, -369.708, -75.7363, 0.28 ) }
    dend_8 { pt3dadd( 2.63601, -372.383, -75.9815, 0.83 ) }
    dend_8 { pt3dadd( 1.93987, -375.164, -76.3497, 0.83 ) }
    dend_8 { pt3dadd( 1.35037, -377.484, -76.7094, 0.83 ) }
    dend_8 { pt3dadd( 0.762685, -379.629, -77.0811, 0.28 ) }
    dend_8 { pt3dadd( 0.368002, -381.021, -77.2991, 0.55 ) }
    dend_8 { pt3dadd( -0.516214, -383.992, -77.6332, 0.28 ) }
    dend_8 { pt3dadd( -1.28242, -386.589, -77.8469, 0.83 ) }
    dend_8 { pt3dadd( -2.02729, -389.043, -77.9421, 0.28 ) }
    dend_8 { pt3dadd( -2.25857, -389.769, -77.9435, 0.55 ) }
    dend_8 { pt3dadd( -2.84111, -391.591, -77.896, 0.55 ) }
    dend_8 { pt3dadd( -3.64829, -394.133, -77.7403, 0.28 ) }
    dend_8 { pt3dadd( -4.10116, -395.685, -77.6064, 0.55 ) }
    dend_8 { pt3dadd( -5.31231, -399.915, -77.3567, 0.28 ) }
    dend_8 { pt3dadd( -6.11639, -402.893, -77.3292, 0.83 ) }
    dend_8 { pt3dadd( -6.50842, -404.424, -77.363, 0.28 ) }
    dend_8 { pt3dadd( -6.70065, -405.284, -77.4327, 0.83 ) }
    dend_8 { pt3dadd( -6.94784, -406.596, -77.6191, 0.83 ) }
    dend_8 { pt3dadd( -7.34684, -408.936, -78.0998, 0.83 ) }
    dend_8 { pt3dadd( -7.92687, -412.871, -79.1992, 0.28 ) }
    dend_8 { pt3dadd( -8.06866, -413.92, -79.5295, 0.55 ) }
    dend_8 { pt3dadd( -8.29745, -415.67, -80.0623, 0.28 ) }
    dend_8 { pt3dadd( -8.44593, -416.707, -80.3666, 0.55 ) }
    dend_8 { pt3dadd( -8.67253, -418.322, -80.8214, 0.28 ) }
    dend_8 { pt3dadd( -8.71351, -418.686, -80.9179, 0.55 ) }
    dend_8 { pt3dadd( -9.02545, -421.875, -81.6807, 0.28 ) }
    dend_8 { pt3dadd( -9.05053, -422.442, -81.7898, 0.83 ) }
    dend_8 { pt3dadd( -9.04833, -424.553, -82.0299, 0.28 ) }
    dend_8 { pt3dadd( -8.9408, -426.504, -82.2339, 0.83 ) }
    dend_8 { pt3dadd( -8.70594, -429.034, -82.4563, 0.28 ) }
    dend_8 { pt3dadd( -8.51994, -430.478, -82.585, 0.83 ) }
    dend_8 { pt3dadd( -7.99775, -433.719, -82.9165, 0.83 ) }
    dend_8 { pt3dadd( -7.31889, -437.281, -83.2886, 0.28 ) }
    dend_8 { pt3dadd( -6.6669, -440.522, -83.6197, 0.83 ) }
    dend_8 { pt3dadd( -5.94385, -444.041, -83.996, 0.28 ) }
    dend_8 { pt3dadd( -5.68639, -445.378, -84.1584, 0.83 ) }
    dend_8 { pt3dadd( -4.97991, -449.704, -84.7669, 0.28 ) }
    dend_8 { pt3dadd( -4.68984, -452.215, -85.1271, 0.83 ) }
    dend_8 { pt3dadd( -4.47051, -455.959, -85.9196, 0.28 ) }
    dend_8 { pt3dadd( -4.50364, -457.297, -86.2491, 0.83 ) }
    dend_8 { pt3dadd( -4.7742, -459.95, -86.9463, 0.55 ) }
    dend_8 { pt3dadd( -4.95776, -460.969, -87.2476, 0.55 ) }
    dend_8 { pt3dadd( -5.68205, -463.825, -88.1878, 0.83 ) }
    dend_8 { pt3dadd( -7.26713, -468.96, -90.1267, 0.55 ) }
    dend_8 { pt3dadd( -7.86465, -470.786, -90.8737, 0.55 ) }
    dend_8 { pt3dadd( -8.67375, -473.326, -91.8188, 1.11 ) }
    dend_8 { pt3dadd( -9.65216, -476.38, -92.8185, 0.28 ) }
    dend_8 { pt3dadd( -9.892, -477.124, -93.0426, 0.55 ) }
    dend_8 { pt3dadd( -10.5962, -479.332, -93.6132, 0.28 ) }
    dend_8 { pt3dadd( -10.9443, -480.475, -93.7965, 0.55 ) }
    dend_8 { pt3dadd( -11.6678, -483.213, -94.0893, 0.28 ) }
    dend_8 { pt3dadd( -12.2631, -485.814, -94.2459, 0.55 ) }
    dend_8 { pt3dadd( -12.8538, -489.037, -94.1715, 0.28 ) }
    dend_8 { pt3dadd( -13.1809, -490.936, -94.0894, 0.28 ) }
    dend_8 { pt3dadd( -13.3814, -492.262, -93.9841, 0.55 ) }
    dend_8 { pt3dadd( -13.913, -496.021, -93.7073, 0.28 ) }
    dend_8 { pt3dadd( -13.9789, -496.867, -93.6597, 0.28 ) }
    dend_8 { pt3dadd( -13.9292, -497.481, -93.5281, 0.83 ) }
    // Section: dend_7, id: dend_7, parent: dend_6 (entry count 62/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 1.40683, -224.108, -38.2693, 0.83 ) }
    dend_7 { pt3dadd( 2.03069, -222.6, -37.6802, 0.83 ) }
    dend_7 { pt3dadd( 2.42569, -221.913, -37.3328, 0.28 ) }
    dend_7 { pt3dadd( 2.56127, -221.716, -37.2087, 0.55 ) }
    dend_7 { pt3dadd( 3.31177, -220.661, -36.5161, 0.28 ) }
    dend_7 { pt3dadd( 5.08081, -218.174, -34.8836, 0.83 ) }
    dend_7 { pt3dadd( 5.90713, -217.012, -34.121, 0.28 ) }
    dend_7 { pt3dadd( 6.54133, -216.272, -33.5739, 0.55 ) }
    dend_7 { pt3dadd( 7.7861, -214.947, -32.4862, 0.28 ) }
    dend_7 { pt3dadd( 8.29147, -214.46, -32.0571, 0.83 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_34, dend_29, dend_28, dend_21, dend_18, dend_13, dend_0, dend_36, dend_35, dend_31, dend_30, dend_23, dend_22, dend_20, dend_19, dend_15, dend_14, dend_10, dend_1, dend_33, dend_32, dend_27, dend_24, dend_17, dend_16, dend_12, dend_11, dend_5, dend_2, dend_26, dend_25, dend_9, dend_6, dend_4, dend_3, dend_8, dend_7]}
    ModelViewParmSubset_2 = new SectionList()
    dend_34 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_36 ModelViewParmSubset_2.append()
    dend_35 ModelViewParmSubset_2.append()
    dend_31 ModelViewParmSubset_2.append()
    dend_30 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_33 ModelViewParmSubset_2.append()
    dend_32 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_34, dend_29, dend_28, dend_21, dend_18, dend_13, dend_0, dend_36, dend_35, dend_31, dend_30, dend_23, dend_22, dend_20, dend_19, dend_15, dend_14, dend_10, dend_1, dend_33, dend_32, dend_27, dend_24, dend_17, dend_16, dend_12, dend_11, dend_5, dend_2, dend_26, dend_25, dend_9, dend_6, dend_4, dend_3, dend_8, dend_7]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_34 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_36 ModelViewParmSubset_4.append()
    dend_35 ModelViewParmSubset_4.append()
    dend_31 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_33 ModelViewParmSubset_4.append()
    dend_32 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_34]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_34 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_28 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_18 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_30 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_22 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_20 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_19 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_14 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_33]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_33 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_32]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_32 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_27 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_17 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_16 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_12 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_11 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_26 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_25 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_35 = new SectionList()
    dend_9 OneSecGrp_SectionRef_35.append()

    // Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_36 = new SectionList()
    dend_6 OneSecGrp_SectionRef_36.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_37 = new SectionList()
    dend_4 OneSecGrp_SectionRef_37.append()

    // Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_38 = new SectionList()
    dend_3 OneSecGrp_SectionRef_38.append()

    // Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_39 = new SectionList()
    dend_8 OneSecGrp_SectionRef_39.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_29 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_21 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_0 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_13 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_23 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_31]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_31 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_15 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_1 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_5 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_2 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_10 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_24 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_40 = new SectionList()
    dend_7 OneSecGrp_SectionRef_40.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_36]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_36 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_35]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_35 OneSecGrp_SectionRef_11.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()
    dend_31 basal.append()
    dend_32 basal.append()
    dend_33 basal.append()
    dend_34 basal.append()
    dend_35 basal.append()
    dend_36 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_29, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_21, dend_21, dend_21, dend_21, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_13, dend_13, dend_13, dend_13, dend_0, dend_0, dend_0, axon_0, axon_0, dend_36, dend_36, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_15, dend_15, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_1, dend_1, dend_1, axon_1, axon_1, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_29 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_22 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_1 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_25 all.append()
    dend_25 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_10()
}

proc subsets_10() {
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_11()
}

proc subsets_11() {
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_12()
}

proc subsets_12() {
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.418459  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.026008999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 9.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.025854  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.19695699  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-6  // units: S cm-2
        e_pas_nml2 = -60.2509  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.9899996E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.008343  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.026899999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.502333  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.653374  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 5.6999997E-5  // units: S cm-2
        e_pas_nml2 = -76.49812  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 7.84E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.30005398  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec basal {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.002256  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 1.38E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.005574  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 7.92E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_34 nseg = 13
    dend_28 nseg = 13
    dend_18 nseg = 3
    dend_30 nseg = 11
    dend_22 nseg = 13
    dend_20 nseg = 11
    dend_19 nseg = 3
    dend_14 nseg = 13
    dend_33 nseg = 9
    dend_32 nseg = 5
    dend_27 nseg = 5
    dend_17 nseg = 9
    dend_16 nseg = 11
    dend_12 nseg = 7
    dend_11 nseg = 5
    dend_26 nseg = 9
    dend_25 nseg = 5
    dend_9 nseg = 7
    dend_6 nseg = 9
    dend_4 nseg = 3
    dend_3 nseg = 7
    dend_8 nseg = 15
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bAC217_L23_MC_40be3bf0e8_0_0


