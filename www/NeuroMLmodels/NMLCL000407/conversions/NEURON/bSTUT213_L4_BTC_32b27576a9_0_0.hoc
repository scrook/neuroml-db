// Cell: bSTUT213_L4_BTC_32b27576a9_0_0
/*
{
  "id" : "bSTUT213_L4_BTC_32b27576a9_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-1.49721, 11.7986, 0.0301706, 2.4623", "-1.37308, 10.661, 0.0290426, 4.20373", "-1.24895, 9.52332, 0.0279145, 5.59272", "-1.12482, 8.38566, 0.0267864, 6.71614", "-1.00068, 7.248, 0.0256584, 7.74544", "-0.87655, 6.11034, 0.0245303, 8.57739", "-0.752417, 4.97268, 0.0234023, 9.13171", "-0.628284, 3.83502, 0.0222742, 9.51195", "-0.504152, 2.69736, 0.0211462, 9.92921", "-0.380019, 1.5597, 0.0200181, 10.275", "-0.255886, 0.422041, 0.01889, 10.4231", "-0.131754, -0.715618, 0.017762, 10.4046", "-0.00762106, -1.85328, 0.0166339, 10.4069", "0.116512, -2.99094, 0.0155059, 10.1383", "0.240644, -4.1286, 0.0143778, 9.53645", "0.364777, -5.26626, 0.0132498, 8.49552", "0.48891, -6.40392, 0.0121217, 7.50349", "0.613042, -7.54158, 0.0109937, 6.64245", "0.737175, -8.67924, 0.0098656, 6.01482", "0.861308, -9.8169, 0.00873754, 4.86867", "0.98544, -10.9546, 0.00760949, 2.96361" ]
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-1.78536, 10.9696, 1.5043, 2.36", "-1.78536, 10.9696, 1.5043, 2.36", "-1.92058, 11.7287, 1.70919, 2.06", "-2.07916, 12.5241, 1.95039, 2.06", "-2.09715, 12.599, 1.97407, 2.06", "-2.32633, 13.4703, 2.25069, 2.21", "-2.68108, 14.6856, 2.70095, 2.21", "-2.958, 15.4855, 3.03156, 2.21", "-2.97433, 15.5268, 3.05161, 2.21", "-3.30643, 16.3067, 3.46109, 2.21", "-3.46013, 16.6527, 3.65003, 2.36", "-3.93413, 17.6532, 4.2387, 2.43", "-4.23758, 18.2555, 4.58319, 2.65", "-4.70364, 19.1966, 5.14435, 2.65" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999821452163534
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "0.094648, -9.74991, 0.0043065, 4.86", "0.094648, -9.74991, 0.0043065, 4.86", "-0.250227, -10.8037, -0.0301948, 4.57", "-0.632554, -11.9518, -0.075779, 4.2", "-1.31519, -14.0123, -0.163712, 2.87", "-1.86412, -15.7627, -0.258446, 2.58", "-2.46293, -17.7529, -0.376969, 2.5", "-2.88089, -19.2437, -0.451693, 2.58", "-2.89434, -19.2974, -0.453933, 2.58", "-3.03355, -20.0186, -0.475418, 2.73", "-3.24002, -21.7293, -0.499797, 2.73", "-3.28401, -22.8653, -0.467685, 2.36", "-3.256, -24.273, -0.371769, 2.65", "-3.18533, -25.5114, -0.260571, 2.87", "-3.09436, -26.7131, -0.146823, 3.09", "-2.97569, -27.8274, -0.0372804, 3.09", "-2.77181, -29.2933, 0.113278, 3.32", "-2.65833, -30.0147, 0.182627, 3.02", "-2.41506, -31.499, 0.299027, 2.43", "-2.1277, -33.2341, 0.433874, 2.36", "-1.95056, -34.3688, 0.511038, 2.36", "-1.85093, -34.9376, 0.537115, 2.36" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999821452163534
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "0.98544, -10.9546, 0.00760949, 0.594239", "2.61247, -25.8661, 0.00760949, 0.594239", "4.23949, -40.7776, 0.00760949, 0.594239" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-4.70364, 19.1966, 5.14435, 1.4", "-5.5392, 20.8076, 5.47159, 1.4", "-6.23169, 22.2092, 5.72845, 1.18", "-6.69717, 23.2115, 5.88673, 1.18", "-7.17213, 24.2726, 6.03861, 1.18", "-7.61047, 25.2919, 6.16584, 1.62", "-7.8748, 25.9463, 6.25732, 1.99", "-7.90192, 26.0302, 6.26754, 1.99", "-8.18903, 27.0829, 6.36597, 2.06", "-8.22392, 27.2453, 6.37851, 2.06", "-8.42123, 28.4817, 6.44621, 1.62", "-8.60749, 30.1202, 6.55121, 1.4", "-8.61798, 30.2394, 6.55924, 1.4", "-8.70532, 31.5697, 6.64443, 1.47", "-8.75482, 32.7437, 6.71421, 1.77", "-8.78711, 33.7688, 6.76012, 1.92", "-8.81397, 35.2063, 6.79195, 1.11", "-8.82628, 35.5383, 6.79038, 1.11", "-8.87785, 36.1794, 6.79519, 1.11", "-8.90929, 36.4113, 6.80074, 1.11", "-9.18109, 37.8445, 6.85201, 0.96", "-9.41935, 38.7694, 6.86074, 0.96", "-9.70886, 39.6698, 6.84293, 1.55", "-9.99988, 40.4859, 6.81111, 2.36", "-10.2637, 41.2324, 6.76841, 2.5", "-10.4682, 41.8195, 6.7266, 2.8", "-10.8926, 43.067, 6.62202, 2.43", "-11.2312, 44.1209, 6.52165, 1.99", "-11.7131, 46.0021, 6.37101, 1.4", "-11.8838, 46.9888, 6.30446, 1.4", "-11.9057, 47.235, 6.29554, 1.4", "-11.9092, 48.4272, 6.28149, 1.62", "-11.9032, 48.5051, 6.2845, 1.62", "-11.6862, 50.2724, 6.4182, 1.03", "-11.4766, 51.6308, 6.60121, 1.03", "-11.301, 52.8214, 6.81109, 1.47", "-11.0938, 54.2919, 7.10049, 1.69", "-10.8824, 56.0354, 7.47046, 1.69", "-10.7947, 57.2622, 7.73474, 2.14", "-10.7884, 58.5922, 8.01802, 2.8", "-10.8506, 59.8004, 8.28321, 3.24", "-10.9366, 60.5776, 8.43836, 3.39", "-11.1396, 61.7322, 8.64876, 2.21", "-11.4641, 63.1681, 8.86727, 1.33", "-11.822, 64.4576, 9.03037, 1.18", "-11.8665, 64.5936, 9.04019, 1.18", "-12.3149, 65.8878, 9.09013, 1.47", "-12.5769, 66.625, 9.11855, 1.62" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-4.70364, 19.1966, 5.14435, 1.03", "-3.40668, 20.0712, 5.12728, 1.03", "-3.26917, 20.1593, 5.12512, 1.03", "-2.20139, 20.8229, 5.10568, 1.03", "-0.765553, 21.7001, 5.07785, 1.4", "-0.702793, 21.7376, 5.07857, 1.4", "1.02794, 22.7795, 5.12634, 1.4", "1.09362, 22.8187, 5.12894, 1.4", "2.07588, 23.4449, 5.18076, 1.55", "2.14401, 23.4914, 5.18552, 1.55", "3.52864, 24.5785, 5.30378, 0.96", "4.21987, 25.1863, 5.36824, 0.96", "4.77806, 25.7805, 5.42885, 1.18", "5.37362, 26.4911, 5.48885, 1.4", "5.4636, 26.615, 5.49231, 1.4", "5.96217, 27.3445, 5.46948, 1.4", "6.01547, 27.4249, 5.4619, 1.4", "6.59779, 28.2608, 5.36985, 1.69", "7.02933, 28.8377, 5.30142, 1.92", "7.6386, 29.6235, 5.22073, 1.4", "8.42763, 30.6525, 5.13514, 1.11", "9.16226, 31.6047, 5.06855, 1.11", "9.2228, 31.6859, 5.06434, 1.11", "9.88367, 32.6002, 5.03359, 1.11", "10.4143, 33.3955, 5.0287, 1.03", "10.9718, 34.318, 5.05533, 1.03", "11.0166, 34.4081, 5.05801, 1.03", "11.5268, 35.6264, 5.09131, 1.03", "11.5501, 35.6933, 5.09264, 1.03", "11.777, 36.5921, 5.10065, 0.81", "11.7913, 36.6959, 5.09968, 0.81", "11.8185, 37.483, 5.09439, 0.59", "11.8118, 37.6331, 5.09367, 0.59", "11.728, 38.3985, 5.10907, 0.59", "11.7014, 38.679, 5.11857, 0.59", "11.6547, 39.3479, 5.14653, 0.74", "11.6507, 39.4524, 5.15126, 0.74", "11.6781, 40.6321, 5.20581, 0.74", "11.7599, 41.5251, 5.24336, 1.25", "11.8882, 42.2205, 5.26823, 1.69", "12.1364, 43.2043, 5.29442, 1.4", "12.1571, 43.2719, 5.2956, 1.4", "12.4137, 44.0934, 5.30256, 2.06", "12.7103, 45.0071, 5.30313, 2.21", "13.0223, 45.9752, 5.2948, 1.77", "13.3649, 47.0712, 5.28751, 1.11", "13.6118, 47.9269, 5.28334, 1.11", "13.8257, 48.7575, 5.28044, 1.4", "14.0706, 49.8854, 5.27863, 0.59", "14.0825, 49.9549, 5.27865, 0.59", "14.1918, 50.9939, 5.30692, 0.44", "14.2183, 51.7955, 5.35076, 1.11", "14.2092, 52.3966, 5.39687, 1.33", "14.2044, 52.5349, 5.40512, 1.33", "14.1706, 52.956, 5.4202, 1.33", "14.0818, 53.9322, 5.42136, 0.52", "13.9353, 55.2055, 5.38559, 0.52", "13.9261, 55.2847, 5.38104, 0.52", "13.8311, 56.0847, 5.28575, 0.96", "13.7341, 57.0432, 5.08927, 1.55", "13.6672, 57.8097, 4.83211, 1.77", "13.6387, 58.1932, 4.65416, 1.99", "13.6352, 58.2454, 4.62773, 1.99", "13.5804, 59.2144, 4.15024, 1.99", "13.537, 60.0604, 3.73864, 1.4", "13.4855, 61.5149, 3.0233, 0.44", "13.4597, 62.3947, 2.59756, 0.96", "13.4532, 63.0699, 2.29053, 1.4", "13.4564, 63.7972, 1.99326, 1.77", "13.4587, 63.8557, 1.97423, 1.77", "13.4973, 64.4133, 1.8548, 1.99", "13.5155, 64.5696, 1.84096, 1.99", "13.5837, 65.0807, 1.82223, 1.99", "13.6002, 65.2207, 1.81756, 1.99", "13.6601, 65.8873, 1.77657, 1.69", "13.7017, 66.7132, 1.71525, 1.11", "13.7139, 67.5455, 1.64837, 0.44", "13.6944, 68.554, 1.56649, 0.37", "13.6276, 69.4826, 1.48654, 1.03", "13.5606, 70.2392, 1.44729, 1.03", "13.483, 71.1635, 1.42568, 0.44", "13.4426, 71.7231, 1.42495, 0.88", "13.4201, 72.2354, 1.43291, 1.18", "13.4126, 72.9303, 1.45301, 1.18", "13.4862, 74.4916, 1.50531, 0.37", "13.5712, 75.338, 1.53906, 0.37", "13.7611, 76.5644, 1.57044, 1.33", "13.9198, 77.429, 1.58586, 2.36", "14.0209, 77.9051, 1.58719, 2.95", "14.1579, 78.4346, 1.57115, 3.24", "14.1799, 78.5229, 1.55989, 3.24", "14.2383, 78.7772, 1.52123, 3.24" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-1.85093, -34.9376, 0.537115, 2.06", "-1.83362, -35.9723, 0.62553, 2.06", "-1.78648, -37.8007, 0.58757, 2.06", "-1.7366, -39.0719, 0.47048, 2.06", "-1.64821, -40.3785, 0.299012, 2.06", "-1.48533, -42.0338, 0.0197838, 2.14", "-1.34753, -43.1728, -0.189186, 2.14", "-1.094, -44.8797, -0.599646, 2.43", "-0.949999, -45.8212, -0.864731, 2.8", "-0.748125, -47.1001, -1.21058, 2.36", "-0.464382, -48.8366, -1.66768, 2.36", "-0.232637, -50.1665, -1.99298, 2.36", "0.0296522, -51.7603, -2.36303, 2.36", "0.253222, -53.4166, -2.71207, 2.14", "0.39996, -54.9138, -3.04944, 2.14", "0.47521, -56.385, -3.40721, 2.28", "0.47659, -56.9245, -3.54306, 2.28", "0.404551, -58.2786, -3.90404, 1.69", "0.229001, -59.7427, -4.23929, 1.18", "0.0368012, -60.606, -4.37469, 1.18", "-0.202237, -61.1976, -4.35114, 1.18", "-0.596022, -61.809, -4.14063, 1.18", "-1.12028, -62.3951, -3.77251, 0.96", "-2.0879, -63.2164, -3.04265, 1.11", "-3.13382, -63.9531, -2.33223, 1.69", "-4.26857, -64.7075, -1.67907, 1.55", "-4.96022, -65.1453, -1.40991, 1.92", "-5.62615, -65.5741, -1.26968, 2.21", "-6.5287, -66.2111, -1.26927, 2.06", "-7.66921, -67.0832, -1.4766, 1.99", "-8.54599, -67.8198, -1.73205, 1.77", "-9.5379, -68.7371, -2.02796, 1.92", "-10.4142, -69.6356, -2.24026, 1.84", "-11.2605, -70.6005, -2.31251, 1.69", "-11.8007, -71.3131, -2.24007, 1.11", "-12.3921, -72.2757, -2.02883, 0.96", "-12.9791, -73.4637, -1.68568, 1.25", "-13.2655, -74.1895, -1.47511, 0.81", "-13.7628, -75.801, -1.20116, 0.74", "-13.9799, -76.7042, -1.17645, 0.37", "-14.2046, -78.1253, -1.36572, 1.47", "-14.2548, -78.8084, -1.5659, 2.14", "-14.2739, -80.0997, -2.16213, 2.5", "-14.2066, -81.7313, -3.16931, 1.03", "-14.1433, -82.5724, -3.79648, 0.88", "-14.061, -83.2167, -4.30229, 0.44", "-13.8554, -84.3067, -5.19714, 0.44", "-13.55, -85.5619, -6.23329, 1.18", "-13.1608, -86.9882, -7.34038, 1.62", "-13.1355, -87.0797, -7.4062, 1.62", "-12.8682, -88.0628, -8.0492, 1.62", "-12.5265, -89.572, -8.91157, 1.47", "-12.3538, -90.5673, -9.36691, 1.99", "-12.2814, -91.379, -9.6485, 1.99", "-12.2761, -92.1186, -9.84783, 1.99", "-12.368, -93.5353, -10.1886, 0.59", "-12.5366, -94.5593, -10.399, 0.52", "-12.7346, -95.3122, -10.4782, 0.52", "-13.3443, -97.0537, -10.5738, 2.8", "-13.6168, -97.7544, -10.5945, 3.17", "-13.9085, -98.4468, -10.545, 3.46", "-14.1796, -99.1029, -10.3801, 3.46", "-14.8125, -100.698, -9.86644, 1.69", "-15.163, -101.662, -9.46332, 1.11", "-15.3514, -102.253, -9.12749, 1.25", "-15.8161, -103.838, -8.09818, 1.99", "-16.2091, -105.417, -6.91463, 1.47" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-1.85093, -34.9376, 0.537115, 0.96", "-0.679799, -36.0218, -1.19517, 0.96", "0.319235, -36.8816, -2.6015, 0.81", "1.87653, -38.0547, -4.54044, 0.59", "2.30137, -38.3286, -5.011, 0.88", "2.7232, -38.5609, -5.42891, 1.11", "2.79311, -38.5931, -5.4923, 1.11", "3.77277, -38.8403, -6.28195, 1.25", "4.60702, -38.9765, -7.05248, 0.88", "5.51946, -39.0904, -8.00111, 0.52", "5.97148, -39.1714, -8.64768, 0.81", "6.57146, -39.3403, -9.74268, 0.96", "7.39086, -39.707, -11.6757, 0.52", "8.02289, -40.3974, -14.5378, 0.52", "8.02557, -40.4229, -14.6185, 0.52", "7.73073, -41.2741, -16.6031, 0.96", "7.56662, -41.5999, -17.1931, 1.11", "7.31613, -42.0141, -17.7842, 1.11", "6.51972, -43.3739, -19.2558, 0.66", "6.20131, -44.0531, -19.8733, 0.37", "5.92054, -45.0714, -20.8077, 0.37", "5.89151, -45.7911, -21.4927, 0.59", "5.89972, -45.8513, -21.554, 0.59", "6.25215, -46.813, -22.6076, 1.03", "6.71067, -47.6565, -23.5991, 1.69", "7.2487, -48.5906, -24.7338, 2.21", "7.709, -49.4247, -25.7375, 2.8", "7.88363, -49.7993, -26.1779, 2.8", "8.57427, -51.6278, -28.2099, 1.33", "8.93781, -52.9269, -29.5209, 0.52", "9.06248, -53.6047, -30.1213, 0.66", "9.12816, -54.1396, -30.5203, 0.66", "9.22146, -54.9317, -31.0298, 0.29", "9.30452, -55.632, -31.4249, 0.37", "9.41781, -56.4337, -31.6966, 0.37", "9.45955, -56.5299, -31.7306, 0.37", "10.0297, -57.2467, -32.165, 0.66", "10.5829, -57.834, -32.6144, 0.96", "10.6298, -57.8795, -32.6521, 0.96", "11.1628, -58.3999, -33.0907, 0.96", "12.2188, -59.4741, -34.0649, 0.52", "13.1429, -60.4676, -34.949, 0.37", "14.2331, -61.6861, -36.0481, 1.77", "14.6559, -62.1817, -36.4842, 2.36", "15.1152, -62.7357, -36.9667, 2.58", "16.5046, -64.4927, -38.4697, 0.74", "16.946, -65.1114, -38.9226, 0.74" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "4.23949, -40.7776, 0.00760949, 0.249059", "5.86652, -55.6891, 0.00760949, 0.249059", "7.49354, -70.6006, 0.00760949, 0.249059" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-12.5769, 66.625, 9.11855, 0.81", "-13.2756, 67.4607, 9.13504, 0.81", "-14.17, 68.5854, 9.13338, 0.74", "-14.936, 69.5895, 9.13014, 0.74", "-14.9931, 69.6647, 9.12632, 0.74", "-16.0465, 71.0682, 9.03069, 0.74", "-16.5571, 71.735, 8.96254, 1.33", "-17.0695, 72.4058, 8.85244, 1.92", "-17.6286, 73.1312, 8.69969, 1.33", "-18.432, 74.1225, 8.48787, 1.11", "-19.0374, 74.8273, 8.33778, 1.47", "-19.8545, 75.7181, 8.16685, 1.18", "-19.9017, 75.7677, 8.1577, 1.18", "-20.6369, 76.5436, 8.0183, 0.66", "-21.3028, 77.2879, 7.87659, 0.66", "-22.1234, 78.2946, 7.69971, 1.47", "-22.6133, 78.9923, 7.60391, 1.99", "-23.1795, 79.9198, 7.51328, 1.99", "-24.084, 81.5945, 7.38447, 0.66", "-24.5455, 82.5965, 7.32461, 0.52", "-24.8237, 83.3164, 7.29855, 0.59", "-25.3163, 84.7654, 7.35332, 0.74", "-25.3468, 84.8592, 7.36144, 0.74", "-25.6482, 85.7167, 7.49131, 1.33", "-25.9063, 86.3988, 7.63275, 1.62", "-26.3422, 87.369, 7.8589, 1.18", "-26.9414, 88.4616, 8.07617, 0.66", "-27.4565, 89.2892, 8.21081, 0.66", "-28.4489, 90.7646, 8.44113, 2.28", "-28.9984, 91.5015, 8.55879, 2.73", "-29.4914, 92.1204, 8.65304, 2.95", "-30.7981, 93.6907, 8.86534, 1.03", "-30.8525, 93.754, 8.87275, 1.03", "-31.393, 94.3861, 8.95266, 0.81", "-32.0185, 95.1213, 9.059, 0.44", "-32.6529, 95.8968, 9.18298, 0.44", "-33.3794, 96.8178, 9.34761, 0.44", "-34.0768, 97.7014, 9.53545, 1.11", "-34.5953, 98.3541, 9.67464, 1.69", "-35.2876, 99.2354, 9.8583, 2.21", "-35.7031, 99.7636, 9.96775, 2.5", "-36.7489, 101.033, 10.2472, 1.25", "-37.691, 102.149, 10.4988, 0.44", "-38.4601, 103.048, 10.7022, 0.44", "-39.0692, 103.75, 10.8644, 1.03", "-39.7347, 104.531, 11.04, 1.33", "-39.9003, 104.73, 11.0832, 1.33", "-40.2813, 105.201, 11.181, 1.47", "-40.9665, 106.04, 11.3579, 0.88", "-41.5663, 106.744, 11.5162, 0.59", "-42.1934, 107.435, 11.6866, 0.44", "-42.2681, 107.512, 11.7076, 0.44", "-43.1955, 108.375, 11.9775, 0.44", "-43.689, 108.765, 12.1289, 0.66", "-43.9073, 108.918, 12.1981, 0.66", "-44.5755, 109.375, 12.411, 0.66", "-45.2324, 109.886, 12.631, 0.66", "-45.8394, 110.475, 12.8383, 0.37", "-46.2569, 111.004, 12.9666, 0.37", "-46.8519, 111.93, 13.118, 0.66", "-47.2117, 112.642, 13.1663, 0.96", "-47.615, 113.691, 13.1563, 0.29", "-47.872, 114.512, 13.1144, 0.44", "-48.1077, 115.385, 13.0462, 0.96", "-48.1449, 115.527, 13.0334, 0.96", "-48.5133, 116.825, 12.91, 1.77", "-48.9308, 118.068, 12.8087, 2.95", "-49.1959, 118.667, 12.6312, 3.54", "-49.2296, 118.736, 12.6013, 3.54", "-49.5953, 119.492, 12.2158, 3.76", "-49.6266, 119.557, 12.1783, 3.76", "-50.0687, 120.464, 11.5859, 3.46", "-51.5272, 123.582, 9.42365, 0.81", "-51.559, 123.656, 9.37502, 0.81", "-51.8181, 124.305, 9.00446, 0.81", "-51.8434, 124.378, 8.9737, 0.81", "-52.0924, 125.305, 8.75485, 1.11", "-52.2293, 126.01, 8.70706, 1.25", "-52.4091, 127.342, 8.8429, 0.37", "-52.5501, 128.417, 8.96411, 0.29", "-52.7968, 130.023, 9.10001, 0.29", "-53.0973, 131.774, 9.2066, 0.29", "-53.1154, 131.866, 9.21007, 0.29", "-53.3664, 133.015, 9.24774, 0.29", "-53.3967, 133.148, 9.2477, 0.29", "-53.734, 134.512, 9.11856, 0.44", "-53.7789, 134.625, 9.08042, 0.44", "-54.1291, 135.129, 8.81179, 0.44", "-60.4381, 144.661, 9.1732, 0.44", "-66.867, 154.106, 9.85782, 0.44", "-73.2795, 163.572, 9.543, 0.44", "-78.5936, 173.301, 6.8513, 0.44", "-84.73, 182.035, 2.61757, 0.44", "-89.7585, 190.037, -4.00851, 0.44", "-95.5223, 196.349, -11.9352, 0.44", "-98.7279, 204.78, -19.1007, 0.44", "-101.532, 213.645, -25.8488, 0.44", "-104.105, 221.494, -33.9488, 0.44", "-104.5, 230.565, -40.9938, 0.44" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-12.5769, 66.625, 9.11855, 0.29", "-12.2728, 68.0918, 8.83751, 0.29", "-12.1804, 68.687, 8.75763, 0.44", "-12.1327, 69.2655, 8.70731, 0.44", "-12.1175, 70.1148, 8.66494, 0.29", "-12.1192, 70.1637, 8.66363, 0.29", "-12.1715, 70.8978, 8.65381, 0.29", "-12.1909, 71.0161, 8.66522, 0.29", "-12.3123, 71.6223, 8.68152, 0.29", "-12.4197, 72.1257, 8.66078, 0.96", "-12.5088, 72.5694, 8.59965, 1.33", "-12.5538, 72.8358, 8.55023, 1.33", "-12.6856, 73.9849, 8.28391, 0.52", "-12.7384, 74.8853, 8.0458, 0.29", "-12.7369, 74.9821, 8.01722, 0.29", "-12.6927, 75.7121, 7.79306, 0.81", "-12.6882, 75.764, 7.77746, 0.81", "-12.6459, 76.2711, 7.63876, 1.03", "-12.6252, 76.7077, 7.5423, 0.74", "-12.5975, 77.4018, 7.43436, 0.29", "-12.5909, 77.8479, 7.3834, 0.44", "-12.6048, 78.1927, 7.36532, 0.44", "-12.6414, 78.6495, 7.34709, 0.29", "-12.7207, 79.0727, 7.33582, 0.74", "-13.4571, 86.7786, 7.521, 0.74" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "14.2383, 78.7772, 1.52123, 0.37", "14.4916, 80.3612, 0.838706, 0.37", "14.6118, 80.8969, 0.528554, 0.37", "14.7151, 81.3221, 0.26793, 0.96", "14.7306, 81.3733, 0.238194, 0.96", "14.9796, 82.1498, -0.200247, 0.96", "15.422, 83.5937, -0.97662, 0.37", "15.6534, 84.5067, -1.46684, 0.59", "15.8287, 85.2659, -1.9095, 0.37", "16.0309, 86.2955, -2.52281, 0.37", "16.0435, 86.3807, -2.57245, 0.37", "16.0837, 86.978, -2.94695, 0.29", "16.0764, 88.1317, -3.67306, 1.47", "16.0246, 89.0733, -4.26945, 1.92", "15.9963, 89.4236, -4.49956, 2.21", "15.9673, 89.7773, -4.74678, 2.21", "15.8774, 91.6848, -6.08972, 0.37", "15.8642, 92.6931, -6.79505, 0.96", "15.8686, 93.2094, -7.14177, 1.62", "15.8806, 93.7666, -7.51149, 1.84", "15.93, 95.2587, -8.51503, 0.29", "15.9687, 96.1534, -9.10722, 1.03", "15.9837, 96.4899, -9.30184, 1.4", "15.988, 96.69, -9.42176, 1.4" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "14.2383, 78.7772, 1.52123, 0.37", "15.3275, 80.7922, 2.30339, 0.37", "15.9408, 81.8475, 2.581, 0.37", "16.5513, 82.8704, 2.70911, 0.81", "16.5881, 82.9272, 2.71243, 0.81", "16.949, 83.4629, 2.72796, 0.81", "17.5731, 84.3606, 2.68331, 0.37", "18.2455, 85.1795, 2.45475, 0.29", "18.8374, 85.868, 2.21133, 0.59", "19.4159, 86.5253, 1.944, 0.22", "19.4495, 86.5669, 1.9266, 0.22", "20.0581, 87.4475, 1.55073, 1.18", "20.237, 87.7892, 1.43289, 1.69", "20.4531, 88.4355, 1.27894, 1.99", "20.5118, 88.8303, 1.23799, 1.99", "20.4396, 89.7321, 1.22701, 0.44", "20.2968, 90.3266, 1.30149, 0.29", "19.512, 91.8484, 1.85646, 0.29", "19.4747, 91.8976, 1.87897, 0.29", "23.8488, 99.9436, 3.45902, 0.29", "27.1942, 108.228, 5.95394, 0.29", "30.5931, 116.345, 8.94338, 0.29", "33.1022, 124.416, 12.8275, 0.29", "36.5875, 131.658, 17.6585, 0.29", "39.1143, 138.275, 23.8843, 0.29", "42.1453, 144.791, 30.0016, 0.29" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-16.2091, -105.417, -6.91463, 0.52", "-16.2752, -107.066, -6.28441, 0.52", "-16.2467, -107.712, -6.11351, 0.81", "-16.1911, -108.279, -6.04801, 1.03", "-16.1839, -108.35, -6.04866, 1.03", "-16.1459, -108.978, -6.09578, 1.03", "-16.1409, -109.674, -6.17056, 0.52", "-16.1742, -110.288, -6.3073, 0.52", "-16.2979, -111.023, -6.44795, 0.52", "-16.4696, -111.628, -6.54277, 0.66", "-16.7106, -112.254, -6.57287, 0.66", "-16.9422, -112.718, -6.55055, 0.88", "-17.5539, -113.766, -6.329, 1.03", "-17.9847, -114.431, -6.08192, 1.55", "-18.1739, -114.723, -5.94134, 1.92", "-18.8255, -115.746, -5.37868, 1.92", "-19.251, -116.455, -4.9688, 1.33", "-19.942, -117.663, -4.2687, 0.59", "-20.426, -118.545, -3.77361, 0.59", "-20.8925, -119.43, -3.3511, 0.59", "-20.9152, -119.475, -3.33412, 0.59", "-21.2345, -120.123, -3.18104, 1.33", "-21.5821, -120.907, -3.13125, 0.74", "-21.8301, -121.581, -3.20661, 0.74", "-22.1791, -122.706, -3.39801, 0.74", "-22.2036, -122.789, -3.4135, 0.74", "-22.4375, -123.598, -3.54387, 1.18", "-22.8108, -124.842, -3.71141, 0.81", "-23.2107, -126.163, -3.80429, 0.74", "-23.677, -127.647, -3.81028, 0.59", "-23.696, -127.707, -3.80457, 0.59", "-24.0224, -128.689, -3.65777, 1.92", "-24.3121, -129.589, -3.44987, 2.21", "-24.6329, -130.659, -3.1378, 2.21", "-24.9359, -131.77, -2.78124, 0.74", "-25.2037, -133.075, -2.34689, 0.74", "-25.3126, -134.065, -2.02924, 0.66", "-25.2661, -135.233, -1.69367, 0.44", "-25.0957, -136.002, -1.50685, 1.03", "-25.0546, -136.094, -1.49395, 1.03", "-24.7582, -136.549, -1.49206, 1.03", "-24.2931, -137.179, -1.57092, 1.03", "-23.8645, -137.795, -1.6749, 1.4", "-23.6634, -138.184, -1.74999, 1.4", "-23.3584, -139.149, -1.88354, 0.81", "-23.1916, -140.181, -1.9268, 0.81", "-23.1843, -140.917, -1.89905, 1.03", "-23.2627, -141.584, -1.83196, 1.11", "-23.4274, -142.375, -1.70817, 1.18", "-23.6933, -143.348, -1.52097, 0.37", "-24.0868, -144.53, -1.31994, 0.37", "-24.3269, -145.278, -1.26852, 1.55", "-24.478, -145.888, -1.30893, 1.84", "-24.5656, -146.432, -1.41117, 2.14", "-24.5923, -146.845, -1.54461, 2.14", "-24.49, -147.974, -2.12267, 1.69", "-24.1057, -149.234, -2.98765, 0.52", "-23.8763, -149.686, -3.34443, 0.88", "-23.8456, -149.729, -3.38279, 0.88", "-23.7155, -149.869, -3.52925, 0.88", "-22.9737, -150.535, -4.26779, 0.52", "-22.2818, -151.118, -4.92919, 1.03", "-22.243, -151.153, -4.96798, 1.03", "-21.6449, -151.8, -5.61345, 1.33", "-21.0472, -152.552, -6.28841, 1.25", "-20.8365, -152.879, -6.54524, 1.03", "-20.2812, -154.106, -7.29247, 0.59", "-20.0147, -154.943, -7.68929, 0.59", "-19.8764, -155.546, -7.90826, 1.18", "-19.8402, -155.797, -7.96979, 1.84", "-19.7982, -156.348, -8.05586, 1.84", "-19.7753, -157.573, -8.1897, 0.74", "-19.7566, -158.443, -8.3868, 1.03", "-19.7115, -159.106, -8.64674, 1.11", "-19.6709, -159.447, -8.82678, 1.33", "-19.5586, -160.106, -9.30338, 0.81", "-19.4572, -160.532, -9.70131, 0.44", "-18.9234, -162.522, -12.0477, 0.44", "-18.833, -162.879, -12.5357, 0.44", "-18.8261, -162.952, -12.662, 0.44", "-18.909, -163.547, -13.7849, 0.44", "-18.9202, -163.571, -13.8317, 0.44", "-19.1399, -163.897, -14.377, 0.74", "-19.4491, -164.237, -14.8448, 1.11", "-20.229, -165.287, -16.3795, 0.44", "-20.4444, -165.675, -16.9646, 0.44", "-20.7561, -166.503, -18.1626, 1.84", "-20.8362, -166.855, -18.6687, 2.5", "-20.8487, -166.953, -18.8073, 2.5", "-20.9509, -168.395, -20.6701, 0.59", "-20.9906, -168.901, -21.2805, 0.59", "-21.0448, -169.342, -21.8844, 0.59", "-21.0509, -169.38, -21.9376, 0.59", "-21.2188, -170.166, -23.0106, 1.77", "-21.359, -170.661, -23.63, 2.06", "-21.7501, -171.659, -24.736, 1.99", "-22.3152, -172.987, -26.1702, 0.81", "-22.3326, -173.029, -26.2171, 0.81", "-22.5081, -173.506, -26.7328, 0.66", "-22.6877, -174.166, -27.4158, 0.52", "-22.8066, -174.654, -27.9022, 1.84", "-22.946, -175.296, -28.4555, 2.28", "-23.2305, -176.875, -29.7613, 0.66", "-23.271, -177.422, -30.2264, 0.66", "-23.242, -178.356, -31.0231, 1.77", "-23.2338, -178.412, -31.0684, 1.77", "-23.1041, -178.982, -31.4932, 2.21", "-22.8731, -179.79, -32.0008, 2.21", "-22.5457, -180.877, -32.5682, 0.74", "-22.4089, -181.398, -32.8224, 0.37", "-22.3092, -181.812, -33.0073, 0.29", "-22.1375, -182.519, -33.313, 1.11", "-22.0137, -183.041, -33.5418, 1.4", "-21.8212, -183.914, -33.89, 0.59", "-21.6851, -184.542, -34.1359, 0.29", "-21.5426, -185.224, -34.4057, 0.66", "-21.4615, -185.643, -34.587, 0.88", "-21.3168, -186.555, -34.9846, 0.29", "-21.2418, -187.129, -35.2297, 0.29", "-21.1966, -187.578, -35.4086, 0.96", "-21.1616, -188.054, -35.591, 0.96", "-21.06, -189.095, -35.9983, 0.29", "-20.9703, -189.609, -36.2301, 0.29", "-20.799, -190.133, -36.5569, 0.66", "-20.7835, -190.177, -36.614, 0.66", "-20.6971, -190.442, -37.0287, 0.66", "-20.5527, -191.039, -38.1393, 0.44", "-20.4804, -191.517, -39.0806, 1.77", "-20.4193, -192.215, -40.5216, 2.58", "-20.3627, -194.313, -44.9234, 0.44", "-20.369, -194.539, -45.3879, 0.44", "-20.4676, -195.537, -47.5062, 0.88", "-20.5635, -196.013, -48.5379, 1.77", "-20.5718, -196.04, -48.5971, 1.77", "-20.6436, -196.218, -48.9414, 2.14", "-20.7833, -196.578, -49.3997, 2.43" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-16.2091, -105.417, -6.91463, 0.59", "-14.7162, -106.346, -5.92899, 0.59", "-12.8278, -107.27, -4.89693, 0.52", "-11.6426, -107.728, -4.41258, 0.52", "-9.92499, -108.125, -3.96949, 0.37", "-9.60315, -108.173, -3.91445, 0.37", "-8.20911, -108.303, -3.73433, 0.37", "-7.02805, -108.293, -3.69518, 0.37", "-5.51626, -108.126, -3.76469, 0.37", "-3.17964, -107.741, -3.98087, 0.22", "-2.50698, -107.625, -4.09544, 0.29", "-1.2294, -107.396, -4.34049, 0.37" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "16.946, -65.1114, -38.9226, 0.37", "17.2982, -65.9812, -39.1728, 0.37", "17.7302, -67.1686, -39.4199, 0.29", "18.1346, -68.4028, -39.6335, 1.25", "18.3133, -68.9789, -39.72, 1.69", "18.3374, -69.0599, -39.731, 1.69", "18.7797, -70.6484, -39.9161, 0.29", "19.0701, -71.807, -39.9936, 0.29", "19.3731, -73.0681, -40.0609, 1.77", "19.5202, -73.7485, -40.081, 2.43", "19.6248, -74.2444, -40.0977, 2.43", "20.0365, -76.2602, -40.1731, 0.22", "20.2237, -77.268, -40.221, 0.22" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "16.946, -65.1114, -38.9226, 1.77", "18.1485, -65.983, -41.798, 1.77", "19.4185, -66.9935, -44.7785, 1.03", "21.4363, -68.8046, -49.5442, 2.14", "22.2268, -69.5777, -51.4778, 0.52", "22.5378, -69.897, -52.2542, 1.92", "22.7209, -70.0946, -52.721, 2.36", "24.1536, -71.9135, -56.4626, 0.29", "24.4608, -72.3773, -57.3599, 0.29", "24.9605, -73.43, -59.2119, 0.29", "24.9715, -73.4551, -59.2601, 0.29", "25.043, -73.6272, -59.6086, 1.69", "25.1363, -73.8561, -60.0661, 1.69", "25.9052, -75.4726, -63.2113, 0.22", "26.0445, -75.7097, -63.6721, 0.22", "26.0626, -75.735, -63.7181, 0.22", "26.3057, -76.0462, -64.2616, 1.03", "27.3129, -77.2647, -66.2527, 0.29", "28.3919, -78.5496, -68.1278, 1.99", "28.5813, -78.7741, -68.4124, 2.14", "29.9677, -80.3523, -70.394, 0.37", "30.2083, -80.6176, -70.721, 0.37", "30.5417, -80.9818, -71.1372, 0.88", "30.9209, -81.4142, -71.5426, 1.03", "31.8203, -82.5481, -72.4273, 0.29", "31.8588, -82.6005, -72.466, 0.29", "32.7465, -83.9282, -73.4311, 0.29", "33.1621, -84.5546, -73.9454, 1.99", "33.2948, -84.7577, -74.1194, 1.99", "34.2372, -86.2741, -75.4128, 0.29", "34.4413, -86.6494, -75.727, 0.59", "35.1784, -88.1048, -76.9259, 0.44", "35.5844, -88.961, -77.6277, 0.29", "35.7485, -89.3146, -77.9234, 1.11", "35.8877, -89.6105, -78.1624, 1.33", "36.9716, -91.6692, -79.8905, 0.22", "37.2008, -92.041, -80.2255, 0.52", "37.9655, -93.1089, -81.2508, 0.29", "38.201, -93.4025, -81.5471, 0.88", "38.5343, -93.7558, -81.9906, 0.88", "39.9237, -95.0977, -83.8764, 0.29", "41.0708, -96.1205, -85.4235, 0.29", "42.0253, -96.9578, -86.7542, 1.77", "42.2761, -97.173, -87.1115, 1.77", "44.2441, -98.8738, -90.0052, 0.52", "44.5817, -99.1834, -90.5309, 0.44", "44.8764, -99.4745, -90.9954, 0.74", "44.9027, -99.502, -91.0359, 0.74", "45.7914, -100.488, -92.3338, 0.29", "45.8255, -100.527, -92.3772, 0.29", "46.3886, -101.21, -92.8481, 1.18", "46.6034, -101.466, -93.0024, 1.18", "47.5164, -102.572, -93.5805, 0.22", "47.5488, -102.613, -93.5971, 0.22", "48.2659, -103.515, -93.8727, 0.81", "49.1282, -104.521, -94.1524, 0.22", "49.495, -104.917, -94.243, 0.81", "49.5442, -104.961, -94.2559, 0.81", "49.8157, -105.147, -94.3354, 0.81", "51.15, -105.777, -94.936, 0.22", "51.5223, -105.916, -95.1273, 0.44", "51.58, -105.934, -95.1586, 0.44", "53.3033, -106.493, -96.1006, 1.33", "54.842, -107.007, -96.941, 1.33", "57.8629, -108.022, -98.6002, 0.29", "57.9367, -108.048, -98.6413, 0.29", "58.4307, -108.231, -98.925, 0.29", "59.067, -108.493, -99.2662, 1.03", "59.2487, -108.577, -99.3524, 1.03", "59.3061, -108.607, -99.374, 1.03", "61.2158, -109.649, -99.8961, 0.22", "61.2747, -109.679, -99.9119, 0.22", "62.7418, -110.33, -100.312, 0.29", "64.5527, -110.896, -100.828, 0.22", "64.9481, -110.989, -100.947, 0.66", "65.0128, -110.999, -100.966, 0.66", "65.4186, -111.037, -101.085, 0.66", "66.6552, -111.11, -101.473, 0.15", "69.1575, -111.093, -102.345, 0.96", "70.5774, -111.032, -102.851, 1.4", "71.1287, -111.005, -103.061, 1.4", "71.3983, -110.991, -103.168, 1.4" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-104.5, 230.565, -40.9938, 0.44", "-109.69, 239.321, -43.474, 0.44" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-104.5, 230.565, -40.9938, 0.44", "-107.865, 237.388, -43.2924, 0.44" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "15.988, 96.69, -9.42176, 0.29", "17.1316, 99.6226, -9.76346, 0.29", "17.6454, 100.941, -9.91701, 0.29", "18.0758, 102.044, -10.0455, 1.03", "18.1098, 102.131, -10.0557, 1.03", "18.3578, 102.767, -10.1298, 1.4" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "15.988, 96.69, -9.42176, 0.88", "15.995, 97.6504, -9.59592, 0.88", "16.0738, 98.3794, -9.77946, 0.29", "16.2434, 99.2131, -10.1169, 0.29", "16.3811, 99.722, -10.3491, 0.44", "16.7812, 101.03, -10.9656, 1.25", "16.9549, 101.554, -11.214, 1.99", "17.265, 102.294, -11.5987, 2.21", "18.0334, 103.895, -12.4837, 0.22", "18.3472, 104.564, -12.8819, 0.22", "18.5068, 104.896, -13.0807, 0.96", "18.6745, 105.268, -13.2961, 1.77", "18.8468, 105.735, -13.5502, 2.21", "18.9716, 106.214, -13.8095, 2.21", "19.3087, 108.044, -14.7706, 0.22", "19.4192, 108.818, -15.1886, 0.22", "19.543, 109.725, -15.6677, 1.18", "19.586, 110.071, -15.8453, 1.33", "19.6987, 111.102, -16.324, 0.81", "19.7949, 111.904, -16.6575, 0.22", "19.8792, 112.418, -16.8282, 0.29", "20.0409, 113.321, -17.1055, 0.22", "20.0698, 113.437, -17.1464, 0.22", "20.3401, 114.314, -17.5382, 0.22", "20.6612, 115.223, -17.9912, 1.33", "20.7933, 115.626, -18.2492, 1.69", "20.8528, 115.851, -18.4016, 1.69", "21.1709, 117.126, -19.299, 0.29", "21.3771, 117.846, -19.8059, 1.47", "21.4641, 118.105, -19.9903, 1.47", "21.7478, 118.877, -20.5409, 0.66", "22.1396, 119.869, -21.2216, 0.29", "22.3331, 120.363, -21.5349, 0.29", "22.5879, 120.992, -21.8727, 0.88", "22.7389, 121.353, -22.0748, 1.25", "23.1212, 122.284, -22.6297, 0.29", "23.3381, 122.845, -22.9673, 0.22", "23.4741, 123.353, -23.2988, 0.66", "23.5285, 123.785, -23.5651, 0.81", "23.5386, 124.591, -23.9922, 0.22", "23.524, 125.091, -24.2206, 0.22", "23.4791, 125.563, -24.4327, 0.74", "23.3427, 126.297, -24.8395, 1.4", "23.1021, 127.336, -25.4672, 0.29", "22.8879, 128.057, -25.9757, 0.81", "22.8038, 128.287, -26.1745, 0.96", "22.2994, 129.326, -27.3666, 0.29", "21.8299, 130.127, -28.412, 0.29", "21.6363, 130.42, -28.8125, 1.33", "21.1258, 131.088, -29.782, 2.28", "20.4613, 131.878, -30.9865, 2.28", "19.0918, 133.292, -33.3253, 0.81", "18.9055, 133.463, -33.6181, 0.88", "18.4927, 133.802, -34.2133, 0.29", "17.8828, 134.247, -35.0173, 0.37", "17.6355, 134.422, -35.3115, 0.37", "16.6503, 135.174, -36.3989, 0.37", "16.2721, 135.513, -36.8179, 0.37", "15.4413, 136.426, -37.8424, 1.55", "15.123, 136.87, -38.2807, 1.92", "14.4599, 138.287, -39.3748, 0.44", "14.2785, 138.953, -39.7792, 0.29", "14.1943, 139.703, -40.1218, 0.88", "14.1976, 140.104, -40.2861, 0.96", "14.2511, 140.532, -40.4333, 0.96", "14.5407, 141.931, -40.8672, 0.37", "14.8588, 143.092, -41.1838, 0.29", "15.0328, 143.777, -41.4952, 0.29", "15.2623, 144.8, -42.0829, 1.33", "15.3459, 145.253, -42.405, 2.14", "15.3931, 145.593, -42.6837, 2.36", "15.4064, 145.847, -42.9389, 2.36", "15.373, 148.06, -45.5078, 0.29", "15.3325, 148.555, -46.1342, 0.88", "15.2395, 149.126, -46.8549, 1.4", "15.1649, 149.453, -47.2555, 1.55", "14.8675, 150.584, -48.5612, 0.37", "14.7571, 150.995, -48.985, 0.37", "14.5078, 151.897, -49.757, 1.18", "14.3368, 152.52, -50.299, 1.47", "13.9821, 153.868, -51.3703, 0.29", "13.8842, 154.237, -51.6263, 0.44", "13.7413, 154.801, -51.9389, 0.29", "13.4132, 156.061, -52.5585, 1.77", "13.2501, 156.754, -52.8424, 2.06", "13.1232, 157.41, -53.0547, 1.92", "12.892, 158.85, -53.3175, 0.22", "12.8037, 159.528, -53.3921, 0.22", "12.7974, 159.599, -53.3918, 0.22", "12.8118, 160.16, -53.2898, 0.22", "12.8977, 161.045, -53.0566, 0.96", "12.9488, 161.316, -52.979, 1.33", "13.0172, 161.592, -52.8976, 1.33", "13.2209, 162.397, -52.6754, 0.44", "13.6144, 163.891, -52.3201, 0.22", "13.6335, 163.959, -52.3058, 0.22", "13.9928, 165.062, -52.0365, 0.22", "14.2046, 165.653, -51.863, 1.03", "14.3442, 166.007, -51.7489, 1.62", "14.5914, 166.564, -51.5533, 1.62", "14.6526, 166.702, -51.5047, 1.62", "15.4899, 168.547, -50.8438, 0.22", "15.6805, 168.97, -50.6838, 0.66", "15.8822, 169.452, -50.5037, 0.66", "16.0118, 169.852, -50.3706, 0.59", "16.1698, 170.592, -50.1709, 0.22", "16.2088, 170.927, -50.1089, 0.66", "16.1989, 171.302, -50.073, 0.88", "16.157, 171.932, -50.009, 0.44", "16.0442, 172.953, -49.9004, 0.22", "15.9495, 173.689, -49.8229, 0.81", "15.8857, 174.175, -49.7709, 1.18", "15.706, 175.557, -49.6237, 0.22", "15.6971, 175.62, -49.624, 0.22", "15.5247, 176.688, -49.7163, 0.22", "15.4271, 177.358, -49.8214, 1.03", "15.3765, 177.789, -49.9114, 1.33", "15.3393, 178.224, -50.0223, 1.33", "15.2895, 180.627, -50.7524, 0.22", "15.2893, 180.688, -50.7726, 0.22", "15.325, 182.037, -51.2917, 0.22", "15.3476, 182.501, -51.4851, 0.59", "15.3528, 182.56, -51.5101, 0.59", "15.4849, 183.367, -51.8274, 0.74" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-20.7833, -196.578, -49.3997, 0.37", "-19.2311, -198.007, -49.3762, 0.37", "-18.2535, -198.939, -49.3645, 0.29", "-17.066, -200.131, -49.346, 0.29", "-16.2343, -201.025, -49.3286, 0.88", "-15.964, -201.338, -49.3357, 1.11", "-15.9063, -201.409, -49.3391, 1.11", "-15.6372, -201.84, -49.3801, 1.11", "-15.1563, -202.832, -49.5753, 0.29", "-14.878, -203.562, -49.7782, 0.29", "-14.5933, -204.428, -50.0396, 0.74", "-14.4767, -204.788, -50.17, 0.88", "-14.2917, -205.367, -50.398, 0.59", "-13.8986, -206.606, -50.9151, 0.29", "-13.8487, -206.746, -50.9776, 0.29", "-13.5387, -207.495, -51.2865, 0.29", "-13.1582, -208.326, -51.5737, 1.11", "-12.9084, -208.802, -51.7821, 1.4", "-12.6408, -209.281, -51.992, 1.4", "-11.7486, -210.779, -52.6086, 0.22", "-11.2324, -211.637, -52.9802, 0.22", "-10.8713, -212.234, -53.258, 0.81", "-9.80441, -213.941, -54.0553, 0.81" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-20.7833, -196.578, -49.3997, 0.96", "-20.4639, -197.412, -52.7541, 0.96", "-19.9095, -198.72, -57.4033, 0.96", "-19.61, -199.399, -59.6532, 0.66", "-19.397, -199.877, -61.0863, 1.4", "-19.3348, -200.013, -61.4588, 1.4", "-18.7775, -201.189, -64.5211, 0.44", "-18.5278, -201.587, -65.3909, 0.37", "-18.5043, -201.625, -65.4514, 0.37", "-17.8138, -202.717, -67.0499, 0.29", "-17.4475, -203.224, -67.7643, 1.47", "-17.3655, -203.331, -67.9165, 1.77", "-17.0798, -203.658, -68.4085, 1.99", "-16.5357, -204.229, -69.3797, 1.99", "-15.5433, -205.213, -71.1121, 0.44", "-14.9981, -205.704, -72.0896, 0.81", "-14.2993, -206.263, -73.4748, 0.52", "-13.29, -207.058, -75.5326, 0.44", "-12.7686, -207.457, -76.6325, 1.11", "-12.5289, -207.634, -77.1505, 1.11", "-11.223, -208.515, -80.0195, 1.4", "-9.78328, -209.397, -83.3569, 1.55" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_9", "dend_0", "dend_15", "dend_10", "dend_4", "dend_1", "dend_17", "dend_16", "dend_12", "dend_11", "dend_6", "dend_5", "dend_3", "dend_2", "dend_19", "dend_18", "dend_14", "dend_13", "dend_8", "dend_7" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_9", "dend_0", "dend_15", "dend_10", "dend_4", "dend_1", "dend_17", "dend_16", "dend_12", "dend_11", "dend_6", "dend_5", "dend_3", "dend_2", "dend_19", "dend_18", "dend_14", "dend_13", "dend_8", "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_19", "dend_18", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.13603E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.001511",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.3E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.13603E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "2.29E-4",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-60.295918"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "2.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.999855",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.042115",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0012239999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.001693",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.386953",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "8.0E-6",
    "erev" : "-63.854015"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.5399997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.039862998",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "1.04239E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "5.2299997E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.0054459996",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.503893",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "1.0E-4",
    "erev" : "-67.1289"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.78E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.15074699",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009017",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "4.0E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.0032419998",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "1.74E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bSTUT_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bSTUT_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bSTUT213_L4_BTC_32b27576a9_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_9, id: dend_9, parent: soma_0
create dend_9
public dend_9
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_15, id: dend_15, parent: dend_9
create dend_15
public dend_15
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10
// Section: dend_4, id: dend_4, parent: dend_0
create dend_4
public dend_4
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_17, id: dend_17, parent: dend_15
create dend_17
public dend_17
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_12, id: dend_12, parent: dend_10
create dend_12
public dend_12
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_6, id: dend_6, parent: dend_4
create dend_6
public dend_6
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5
// Section: dend_3, id: dend_3, parent: dend_1
create dend_3
public dend_3
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_14, id: dend_14, parent: dend_12
create dend_14
public dend_14
// Section: dend_13, id: dend_13, parent: dend_12
create dend_13
public dend_13
// Section: dend_8, id: dend_8, parent: dend_6
create dend_8
public dend_8
// Section: dend_7, id: dend_7, parent: dend_6
create dend_7
public dend_7

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_18
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_19, dend_18, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bSTUT_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bSTUT_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_9(0), soma_0(0.49999821452163534)
    connect dend_0(0), soma_0(0.49999821452163534)
    connect axon_0(0), soma_0(1.0)
    connect dend_15(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)
    connect dend_4(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_17(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_12(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_6(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)
    connect dend_3(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_14(0), dend_12(1.0)
    connect dend_13(0), dend_12(1.0)
    connect dend_8(0), dend_6(1.0)
    connect dend_7(0), dend_6(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -1.49721, 11.7986, 0.0301706, 2.4623 ) }
    soma_0 { pt3dadd( -1.37308, 10.661, 0.0290426, 4.20373 ) }
    soma_0 { pt3dadd( -1.24895, 9.52332, 0.0279145, 5.59272 ) }
    soma_0 { pt3dadd( -1.12482, 8.38566, 0.0267864, 6.71614 ) }
    soma_0 { pt3dadd( -1.00068, 7.248, 0.0256584, 7.74544 ) }
    soma_0 { pt3dadd( -0.87655, 6.11034, 0.0245303, 8.57739 ) }
    soma_0 { pt3dadd( -0.752417, 4.97268, 0.0234023, 9.13171 ) }
    soma_0 { pt3dadd( -0.628284, 3.83502, 0.0222742, 9.51195 ) }
    soma_0 { pt3dadd( -0.504152, 2.69736, 0.0211462, 9.92921 ) }
    soma_0 { pt3dadd( -0.380019, 1.5597, 0.0200181, 10.275 ) }
    soma_0 { pt3dadd( -0.255886, 0.422041, 0.01889, 10.4231 ) }
    soma_0 { pt3dadd( -0.131754, -0.715618, 0.017762, 10.4046 ) }
    soma_0 { pt3dadd( -0.00762106, -1.85328, 0.0166339, 10.4069 ) }
    soma_0 { pt3dadd( 0.116512, -2.99094, 0.0155059, 10.1383 ) }
    soma_0 { pt3dadd( 0.240644, -4.1286, 0.0143778, 9.53645 ) }
    soma_0 { pt3dadd( 0.364777, -5.26626, 0.0132498, 8.49552 ) }
    soma_0 { pt3dadd( 0.48891, -6.40392, 0.0121217, 7.50349 ) }
    soma_0 { pt3dadd( 0.613042, -7.54158, 0.0109937, 6.64245 ) }
    soma_0 { pt3dadd( 0.737175, -8.67924, 0.0098656, 6.01482 ) }
    soma_0 { pt3dadd( 0.861308, -9.8169, 0.00873754, 4.86867 ) }
    soma_0 { pt3dadd( 0.98544, -10.9546, 0.00760949, 2.96361 ) }
    // Section: dend_9, id: dend_9, parent: soma_0 (entry count 21/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -1.78536, 10.9696, 1.5043, 2.36 ) }
    dend_9 { pt3dadd( -1.78536, 10.9696, 1.5043, 2.36 ) }
    dend_9 { pt3dadd( -1.92058, 11.7287, 1.70919, 2.06 ) }
    dend_9 { pt3dadd( -2.07916, 12.5241, 1.95039, 2.06 ) }
    dend_9 { pt3dadd( -2.09715, 12.599, 1.97407, 2.06 ) }
    dend_9 { pt3dadd( -2.32633, 13.4703, 2.25069, 2.21 ) }
    dend_9 { pt3dadd( -2.68108, 14.6856, 2.70095, 2.21 ) }
    dend_9 { pt3dadd( -2.958, 15.4855, 3.03156, 2.21 ) }
    dend_9 { pt3dadd( -2.97433, 15.5268, 3.05161, 2.21 ) }
    dend_9 { pt3dadd( -3.30643, 16.3067, 3.46109, 2.21 ) }
    dend_9 { pt3dadd( -3.46013, 16.6527, 3.65003, 2.36 ) }
    dend_9 { pt3dadd( -3.93413, 17.6532, 4.2387, 2.43 ) }
    dend_9 { pt3dadd( -4.23758, 18.2555, 4.58319, 2.65 ) }
    dend_9 { pt3dadd( -4.70364, 19.1966, 5.14435, 2.65 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 35/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 0.094648, -9.74991, 0.0043065, 4.86 ) }
    dend_0 { pt3dadd( 0.094648, -9.74991, 0.0043065, 4.86 ) }
    dend_0 { pt3dadd( -0.250227, -10.8037, -0.0301948, 4.57 ) }
    dend_0 { pt3dadd( -0.632554, -11.9518, -0.075779, 4.2 ) }
    dend_0 { pt3dadd( -1.31519, -14.0123, -0.163712, 2.87 ) }
    dend_0 { pt3dadd( -1.86412, -15.7627, -0.258446, 2.58 ) }
    dend_0 { pt3dadd( -2.46293, -17.7529, -0.376969, 2.5 ) }
    dend_0 { pt3dadd( -2.88089, -19.2437, -0.451693, 2.58 ) }
    dend_0 { pt3dadd( -2.89434, -19.2974, -0.453933, 2.58 ) }
    dend_0 { pt3dadd( -3.03355, -20.0186, -0.475418, 2.73 ) }
    dend_0 { pt3dadd( -3.24002, -21.7293, -0.499797, 2.73 ) }
    dend_0 { pt3dadd( -3.28401, -22.8653, -0.467685, 2.36 ) }
    dend_0 { pt3dadd( -3.256, -24.273, -0.371769, 2.65 ) }
    dend_0 { pt3dadd( -3.18533, -25.5114, -0.260571, 2.87 ) }
    dend_0 { pt3dadd( -3.09436, -26.7131, -0.146823, 3.09 ) }
    dend_0 { pt3dadd( -2.97569, -27.8274, -0.0372804, 3.09 ) }
    dend_0 { pt3dadd( -2.77181, -29.2933, 0.113278, 3.32 ) }
    dend_0 { pt3dadd( -2.65833, -30.0147, 0.182627, 3.02 ) }
    dend_0 { pt3dadd( -2.41506, -31.499, 0.299027, 2.43 ) }
    dend_0 { pt3dadd( -2.1277, -33.2341, 0.433874, 2.36 ) }
    dend_0 { pt3dadd( -1.95056, -34.3688, 0.511038, 2.36 ) }
    dend_0 { pt3dadd( -1.85093, -34.9376, 0.537115, 2.36 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 57/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 0.98544, -10.9546, 0.00760949, 0.594239 ) }
    axon_0 { pt3dadd( 2.61247, -25.8661, 0.00760949, 0.594239 ) }
    axon_0 { pt3dadd( 4.23949, -40.7776, 0.00760949, 0.594239 ) }
    // Section: dend_15, id: dend_15, parent: dend_9 (entry count 60/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -4.70364, 19.1966, 5.14435, 1.4 ) }
    dend_15 { pt3dadd( -5.5392, 20.8076, 5.47159, 1.4 ) }
    dend_15 { pt3dadd( -6.23169, 22.2092, 5.72845, 1.18 ) }
    dend_15 { pt3dadd( -6.69717, 23.2115, 5.88673, 1.18 ) }
    dend_15 { pt3dadd( -7.17213, 24.2726, 6.03861, 1.18 ) }
    dend_15 { pt3dadd( -7.61047, 25.2919, 6.16584, 1.62 ) }
    dend_15 { pt3dadd( -7.8748, 25.9463, 6.25732, 1.99 ) }
    dend_15 { pt3dadd( -7.90192, 26.0302, 6.26754, 1.99 ) }
    dend_15 { pt3dadd( -8.18903, 27.0829, 6.36597, 2.06 ) }
    dend_15 { pt3dadd( -8.22392, 27.2453, 6.37851, 2.06 ) }
    dend_15 { pt3dadd( -8.42123, 28.4817, 6.44621, 1.62 ) }
    dend_15 { pt3dadd( -8.60749, 30.1202, 6.55121, 1.4 ) }
    dend_15 { pt3dadd( -8.61798, 30.2394, 6.55924, 1.4 ) }
    dend_15 { pt3dadd( -8.70532, 31.5697, 6.64443, 1.47 ) }
    dend_15 { pt3dadd( -8.75482, 32.7437, 6.71421, 1.77 ) }
    dend_15 { pt3dadd( -8.78711, 33.7688, 6.76012, 1.92 ) }
    dend_15 { pt3dadd( -8.81397, 35.2063, 6.79195, 1.11 ) }
    dend_15 { pt3dadd( -8.82628, 35.5383, 6.79038, 1.11 ) }
    dend_15 { pt3dadd( -8.87785, 36.1794, 6.79519, 1.11 ) }
    dend_15 { pt3dadd( -8.90929, 36.4113, 6.80074, 1.11 ) }
    dend_15 { pt3dadd( -9.18109, 37.8445, 6.85201, 0.96 ) }
    dend_15 { pt3dadd( -9.41935, 38.7694, 6.86074, 0.96 ) }
    dend_15 { pt3dadd( -9.70886, 39.6698, 6.84293, 1.55 ) }
    dend_15 { pt3dadd( -9.99988, 40.4859, 6.81111, 2.36 ) }
    dend_15 { pt3dadd( -10.2637, 41.2324, 6.76841, 2.5 ) }
    dend_15 { pt3dadd( -10.4682, 41.8195, 6.7266, 2.8 ) }
    dend_15 { pt3dadd( -10.8926, 43.067, 6.62202, 2.43 ) }
    dend_15 { pt3dadd( -11.2312, 44.1209, 6.52165, 1.99 ) }
    dend_15 { pt3dadd( -11.7131, 46.0021, 6.37101, 1.4 ) }
    dend_15 { pt3dadd( -11.8838, 46.9888, 6.30446, 1.4 ) }
    dend_15 { pt3dadd( -11.9057, 47.235, 6.29554, 1.4 ) }
    dend_15 { pt3dadd( -11.9092, 48.4272, 6.28149, 1.62 ) }
    dend_15 { pt3dadd( -11.9032, 48.5051, 6.2845, 1.62 ) }
    dend_15 { pt3dadd( -11.6862, 50.2724, 6.4182, 1.03 ) }
    dend_15 { pt3dadd( -11.4766, 51.6308, 6.60121, 1.03 ) }
    dend_15 { pt3dadd( -11.301, 52.8214, 6.81109, 1.47 ) }
    dend_15 { pt3dadd( -11.0938, 54.2919, 7.10049, 1.69 ) }
    dend_15 { pt3dadd( -10.8824, 56.0354, 7.47046, 1.69 ) }
    dend_15 { pt3dadd( -10.7947, 57.2622, 7.73474, 2.14 ) }
    dend_15 { pt3dadd( -10.7884, 58.5922, 8.01802, 2.8 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_15 { pt3dadd( -10.8506, 59.8004, 8.28321, 3.24 ) }
    dend_15 { pt3dadd( -10.9366, 60.5776, 8.43836, 3.39 ) }
    dend_15 { pt3dadd( -11.1396, 61.7322, 8.64876, 2.21 ) }
    dend_15 { pt3dadd( -11.4641, 63.1681, 8.86727, 1.33 ) }
    dend_15 { pt3dadd( -11.822, 64.4576, 9.03037, 1.18 ) }
    dend_15 { pt3dadd( -11.8665, 64.5936, 9.04019, 1.18 ) }
    dend_15 { pt3dadd( -12.3149, 65.8878, 9.09013, 1.47 ) }
    dend_15 { pt3dadd( -12.5769, 66.625, 9.11855, 1.62 ) }
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 8/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -4.70364, 19.1966, 5.14435, 1.03 ) }
    dend_10 { pt3dadd( -3.40668, 20.0712, 5.12728, 1.03 ) }
    dend_10 { pt3dadd( -3.26917, 20.1593, 5.12512, 1.03 ) }
    dend_10 { pt3dadd( -2.20139, 20.8229, 5.10568, 1.03 ) }
    dend_10 { pt3dadd( -0.765553, 21.7001, 5.07785, 1.4 ) }
    dend_10 { pt3dadd( -0.702793, 21.7376, 5.07857, 1.4 ) }
    dend_10 { pt3dadd( 1.02794, 22.7795, 5.12634, 1.4 ) }
    dend_10 { pt3dadd( 1.09362, 22.8187, 5.12894, 1.4 ) }
    dend_10 { pt3dadd( 2.07588, 23.4449, 5.18076, 1.55 ) }
    dend_10 { pt3dadd( 2.14401, 23.4914, 5.18552, 1.55 ) }
    dend_10 { pt3dadd( 3.52864, 24.5785, 5.30378, 0.96 ) }
    dend_10 { pt3dadd( 4.21987, 25.1863, 5.36824, 0.96 ) }
    dend_10 { pt3dadd( 4.77806, 25.7805, 5.42885, 1.18 ) }
    dend_10 { pt3dadd( 5.37362, 26.4911, 5.48885, 1.4 ) }
    dend_10 { pt3dadd( 5.4636, 26.615, 5.49231, 1.4 ) }
    dend_10 { pt3dadd( 5.96217, 27.3445, 5.46948, 1.4 ) }
    dend_10 { pt3dadd( 6.01547, 27.4249, 5.4619, 1.4 ) }
    dend_10 { pt3dadd( 6.59779, 28.2608, 5.36985, 1.69 ) }
    dend_10 { pt3dadd( 7.02933, 28.8377, 5.30142, 1.92 ) }
    dend_10 { pt3dadd( 7.6386, 29.6235, 5.22073, 1.4 ) }
    dend_10 { pt3dadd( 8.42763, 30.6525, 5.13514, 1.11 ) }
    dend_10 { pt3dadd( 9.16226, 31.6047, 5.06855, 1.11 ) }
    dend_10 { pt3dadd( 9.2228, 31.6859, 5.06434, 1.11 ) }
    dend_10 { pt3dadd( 9.88367, 32.6002, 5.03359, 1.11 ) }
    dend_10 { pt3dadd( 10.4143, 33.3955, 5.0287, 1.03 ) }
    dend_10 { pt3dadd( 10.9718, 34.318, 5.05533, 1.03 ) }
    dend_10 { pt3dadd( 11.0166, 34.4081, 5.05801, 1.03 ) }
    dend_10 { pt3dadd( 11.5268, 35.6264, 5.09131, 1.03 ) }
    dend_10 { pt3dadd( 11.5501, 35.6933, 5.09264, 1.03 ) }
    dend_10 { pt3dadd( 11.777, 36.5921, 5.10065, 0.81 ) }
    dend_10 { pt3dadd( 11.7913, 36.6959, 5.09968, 0.81 ) }
    dend_10 { pt3dadd( 11.8185, 37.483, 5.09439, 0.59 ) }
    dend_10 { pt3dadd( 11.8118, 37.6331, 5.09367, 0.59 ) }
    dend_10 { pt3dadd( 11.728, 38.3985, 5.10907, 0.59 ) }
    dend_10 { pt3dadd( 11.7014, 38.679, 5.11857, 0.59 ) }
    dend_10 { pt3dadd( 11.6547, 39.3479, 5.14653, 0.74 ) }
    dend_10 { pt3dadd( 11.6507, 39.4524, 5.15126, 0.74 ) }
    dend_10 { pt3dadd( 11.6781, 40.6321, 5.20581, 0.74 ) }
    dend_10 { pt3dadd( 11.7599, 41.5251, 5.24336, 1.25 ) }
    dend_10 { pt3dadd( 11.8882, 42.2205, 5.26823, 1.69 ) }
    dend_10 { pt3dadd( 12.1364, 43.2043, 5.29442, 1.4 ) }
    dend_10 { pt3dadd( 12.1571, 43.2719, 5.2956, 1.4 ) }
    dend_10 { pt3dadd( 12.4137, 44.0934, 5.30256, 2.06 ) }
    dend_10 { pt3dadd( 12.7103, 45.0071, 5.30313, 2.21 ) }
    dend_10 { pt3dadd( 13.0223, 45.9752, 5.2948, 1.77 ) }
    dend_10 { pt3dadd( 13.3649, 47.0712, 5.28751, 1.11 ) }
    dend_10 { pt3dadd( 13.6118, 47.9269, 5.28334, 1.11 ) }
    dend_10 { pt3dadd( 13.8257, 48.7575, 5.28044, 1.4 ) }
    dend_10 { pt3dadd( 14.0706, 49.8854, 5.27863, 0.59 ) }
    dend_10 { pt3dadd( 14.0825, 49.9549, 5.27865, 0.59 ) }
    dend_10 { pt3dadd( 14.1918, 50.9939, 5.30692, 0.44 ) }
    dend_10 { pt3dadd( 14.2183, 51.7955, 5.35076, 1.11 ) }
    dend_10 { pt3dadd( 14.2092, 52.3966, 5.39687, 1.33 ) }
    dend_10 { pt3dadd( 14.2044, 52.5349, 5.40512, 1.33 ) }
    dend_10 { pt3dadd( 14.1706, 52.956, 5.4202, 1.33 ) }
    dend_10 { pt3dadd( 14.0818, 53.9322, 5.42136, 0.52 ) }
    dend_10 { pt3dadd( 13.9353, 55.2055, 5.38559, 0.52 ) }
    dend_10 { pt3dadd( 13.9261, 55.2847, 5.38104, 0.52 ) }
    dend_10 { pt3dadd( 13.8311, 56.0847, 5.28575, 0.96 ) }
    dend_10 { pt3dadd( 13.7341, 57.0432, 5.08927, 1.55 ) }
    dend_10 { pt3dadd( 13.6672, 57.8097, 4.83211, 1.77 ) }
    dend_10 { pt3dadd( 13.6387, 58.1932, 4.65416, 1.99 ) }
    dend_10 { pt3dadd( 13.6352, 58.2454, 4.62773, 1.99 ) }
    dend_10 { pt3dadd( 13.5804, 59.2144, 4.15024, 1.99 ) }
    dend_10 { pt3dadd( 13.537, 60.0604, 3.73864, 1.4 ) }
    dend_10 { pt3dadd( 13.4855, 61.5149, 3.0233, 0.44 ) }
    dend_10 { pt3dadd( 13.4597, 62.3947, 2.59756, 0.96 ) }
    dend_10 { pt3dadd( 13.4532, 63.0699, 2.29053, 1.4 ) }
    dend_10 { pt3dadd( 13.4564, 63.7972, 1.99326, 1.77 ) }
    dend_10 { pt3dadd( 13.4587, 63.8557, 1.97423, 1.77 ) }
    dend_10 { pt3dadd( 13.4973, 64.4133, 1.8548, 1.99 ) }
    dend_10 { pt3dadd( 13.5155, 64.5696, 1.84096, 1.99 ) }
    dend_10 { pt3dadd( 13.5837, 65.0807, 1.82223, 1.99 ) }
    dend_10 { pt3dadd( 13.6002, 65.2207, 1.81756, 1.99 ) }
    dend_10 { pt3dadd( 13.6601, 65.8873, 1.77657, 1.69 ) }
    dend_10 { pt3dadd( 13.7017, 66.7132, 1.71525, 1.11 ) }
    dend_10 { pt3dadd( 13.7139, 67.5455, 1.64837, 0.44 ) }
    dend_10 { pt3dadd( 13.6944, 68.554, 1.56649, 0.37 ) }
    dend_10 { pt3dadd( 13.6276, 69.4826, 1.48654, 1.03 ) }
    dend_10 { pt3dadd( 13.5606, 70.2392, 1.44729, 1.03 ) }
    dend_10 { pt3dadd( 13.483, 71.1635, 1.42568, 0.44 ) }
    dend_10 { pt3dadd( 13.4426, 71.7231, 1.42495, 0.88 ) }
    dend_10 { pt3dadd( 13.4201, 72.2354, 1.43291, 1.18 ) }
    dend_10 { pt3dadd( 13.4126, 72.9303, 1.45301, 1.18 ) }
    dend_10 { pt3dadd( 13.4862, 74.4916, 1.50531, 0.37 ) }
    dend_10 { pt3dadd( 13.5712, 75.338, 1.53906, 0.37 ) }
    dend_10 { pt3dadd( 13.7611, 76.5644, 1.57044, 1.33 ) }
    dend_10 { pt3dadd( 13.9198, 77.429, 1.58586, 2.36 ) }
    dend_10 { pt3dadd( 14.0209, 77.9051, 1.58719, 2.95 ) }
    dend_10 { pt3dadd( 14.1579, 78.4346, 1.57115, 3.24 ) }
    dend_10 { pt3dadd( 14.1799, 78.5229, 1.55989, 3.24 ) }
    dend_10 { pt3dadd( 14.2383, 78.7772, 1.52123, 3.24 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    // Section: dend_4, id: dend_4, parent: dend_0 (entry count 0/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -1.85093, -34.9376, 0.537115, 2.06 ) }
    dend_4 { pt3dadd( -1.83362, -35.9723, 0.62553, 2.06 ) }
    dend_4 { pt3dadd( -1.78648, -37.8007, 0.58757, 2.06 ) }
    dend_4 { pt3dadd( -1.7366, -39.0719, 0.47048, 2.06 ) }
    dend_4 { pt3dadd( -1.64821, -40.3785, 0.299012, 2.06 ) }
    dend_4 { pt3dadd( -1.48533, -42.0338, 0.0197838, 2.14 ) }
    dend_4 { pt3dadd( -1.34753, -43.1728, -0.189186, 2.14 ) }
    dend_4 { pt3dadd( -1.094, -44.8797, -0.599646, 2.43 ) }
    dend_4 { pt3dadd( -0.949999, -45.8212, -0.864731, 2.8 ) }
    dend_4 { pt3dadd( -0.748125, -47.1001, -1.21058, 2.36 ) }
    dend_4 { pt3dadd( -0.464382, -48.8366, -1.66768, 2.36 ) }
    dend_4 { pt3dadd( -0.232637, -50.1665, -1.99298, 2.36 ) }
    dend_4 { pt3dadd( 0.0296522, -51.7603, -2.36303, 2.36 ) }
    dend_4 { pt3dadd( 0.253222, -53.4166, -2.71207, 2.14 ) }
    dend_4 { pt3dadd( 0.39996, -54.9138, -3.04944, 2.14 ) }
    dend_4 { pt3dadd( 0.47521, -56.385, -3.40721, 2.28 ) }
    dend_4 { pt3dadd( 0.47659, -56.9245, -3.54306, 2.28 ) }
    dend_4 { pt3dadd( 0.404551, -58.2786, -3.90404, 1.69 ) }
    dend_4 { pt3dadd( 0.229001, -59.7427, -4.23929, 1.18 ) }
    dend_4 { pt3dadd( 0.0368012, -60.606, -4.37469, 1.18 ) }
    dend_4 { pt3dadd( -0.202237, -61.1976, -4.35114, 1.18 ) }
    dend_4 { pt3dadd( -0.596022, -61.809, -4.14063, 1.18 ) }
    dend_4 { pt3dadd( -1.12028, -62.3951, -3.77251, 0.96 ) }
    dend_4 { pt3dadd( -2.0879, -63.2164, -3.04265, 1.11 ) }
    dend_4 { pt3dadd( -3.13382, -63.9531, -2.33223, 1.69 ) }
    dend_4 { pt3dadd( -4.26857, -64.7075, -1.67907, 1.55 ) }
    dend_4 { pt3dadd( -4.96022, -65.1453, -1.40991, 1.92 ) }
    dend_4 { pt3dadd( -5.62615, -65.5741, -1.26968, 2.21 ) }
    dend_4 { pt3dadd( -6.5287, -66.2111, -1.26927, 2.06 ) }
    dend_4 { pt3dadd( -7.66921, -67.0832, -1.4766, 1.99 ) }
    dend_4 { pt3dadd( -8.54599, -67.8198, -1.73205, 1.77 ) }
    dend_4 { pt3dadd( -9.5379, -68.7371, -2.02796, 1.92 ) }
    dend_4 { pt3dadd( -10.4142, -69.6356, -2.24026, 1.84 ) }
    dend_4 { pt3dadd( -11.2605, -70.6005, -2.31251, 1.69 ) }
    dend_4 { pt3dadd( -11.8007, -71.3131, -2.24007, 1.11 ) }
    dend_4 { pt3dadd( -12.3921, -72.2757, -2.02883, 0.96 ) }
    dend_4 { pt3dadd( -12.9791, -73.4637, -1.68568, 1.25 ) }
    dend_4 { pt3dadd( -13.2655, -74.1895, -1.47511, 0.81 ) }
    dend_4 { pt3dadd( -13.7628, -75.801, -1.20116, 0.74 ) }
    dend_4 { pt3dadd( -13.9799, -76.7042, -1.17645, 0.37 ) }
    dend_4 { pt3dadd( -14.2046, -78.1253, -1.36572, 1.47 ) }
    dend_4 { pt3dadd( -14.2548, -78.8084, -1.5659, 2.14 ) }
    dend_4 { pt3dadd( -14.2739, -80.0997, -2.16213, 2.5 ) }
    dend_4 { pt3dadd( -14.2066, -81.7313, -3.16931, 1.03 ) }
    dend_4 { pt3dadd( -14.1433, -82.5724, -3.79648, 0.88 ) }
    dend_4 { pt3dadd( -14.061, -83.2167, -4.30229, 0.44 ) }
    dend_4 { pt3dadd( -13.8554, -84.3067, -5.19714, 0.44 ) }
    dend_4 { pt3dadd( -13.55, -85.5619, -6.23329, 1.18 ) }
    dend_4 { pt3dadd( -13.1608, -86.9882, -7.34038, 1.62 ) }
    dend_4 { pt3dadd( -13.1355, -87.0797, -7.4062, 1.62 ) }
    dend_4 { pt3dadd( -12.8682, -88.0628, -8.0492, 1.62 ) }
    dend_4 { pt3dadd( -12.5265, -89.572, -8.91157, 1.47 ) }
    dend_4 { pt3dadd( -12.3538, -90.5673, -9.36691, 1.99 ) }
    dend_4 { pt3dadd( -12.2814, -91.379, -9.6485, 1.99 ) }
    dend_4 { pt3dadd( -12.2761, -92.1186, -9.84783, 1.99 ) }
    dend_4 { pt3dadd( -12.368, -93.5353, -10.1886, 0.59 ) }
    dend_4 { pt3dadd( -12.5366, -94.5593, -10.399, 0.52 ) }
    dend_4 { pt3dadd( -12.7346, -95.3122, -10.4782, 0.52 ) }
    dend_4 { pt3dadd( -13.3443, -97.0537, -10.5738, 2.8 ) }
    dend_4 { pt3dadd( -13.6168, -97.7544, -10.5945, 3.17 ) }
    dend_4 { pt3dadd( -13.9085, -98.4468, -10.545, 3.46 ) }
    dend_4 { pt3dadd( -14.1796, -99.1029, -10.3801, 3.46 ) }
    dend_4 { pt3dadd( -14.8125, -100.698, -9.86644, 1.69 ) }
    dend_4 { pt3dadd( -15.163, -101.662, -9.46332, 1.11 ) }
    dend_4 { pt3dadd( -15.3514, -102.253, -9.12749, 1.25 ) }
    dend_4 { pt3dadd( -15.8161, -103.838, -8.09818, 1.99 ) }
    dend_4 { pt3dadd( -16.2091, -105.417, -6.91463, 1.47 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 67/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -1.85093, -34.9376, 0.537115, 0.96 ) }
    dend_1 { pt3dadd( -0.679799, -36.0218, -1.19517, 0.96 ) }
    dend_1 { pt3dadd( 0.319235, -36.8816, -2.6015, 0.81 ) }
    dend_1 { pt3dadd( 1.87653, -38.0547, -4.54044, 0.59 ) }
    dend_1 { pt3dadd( 2.30137, -38.3286, -5.011, 0.88 ) }
    dend_1 { pt3dadd( 2.7232, -38.5609, -5.42891, 1.11 ) }
    dend_1 { pt3dadd( 2.79311, -38.5931, -5.4923, 1.11 ) }
    dend_1 { pt3dadd( 3.77277, -38.8403, -6.28195, 1.25 ) }
    dend_1 { pt3dadd( 4.60702, -38.9765, -7.05248, 0.88 ) }
    dend_1 { pt3dadd( 5.51946, -39.0904, -8.00111, 0.52 ) }
    dend_1 { pt3dadd( 5.97148, -39.1714, -8.64768, 0.81 ) }
    dend_1 { pt3dadd( 6.57146, -39.3403, -9.74268, 0.96 ) }
    dend_1 { pt3dadd( 7.39086, -39.707, -11.6757, 0.52 ) }
    dend_1 { pt3dadd( 8.02289, -40.3974, -14.5378, 0.52 ) }
    dend_1 { pt3dadd( 8.02557, -40.4229, -14.6185, 0.52 ) }
    dend_1 { pt3dadd( 7.73073, -41.2741, -16.6031, 0.96 ) }
    dend_1 { pt3dadd( 7.56662, -41.5999, -17.1931, 1.11 ) }
    dend_1 { pt3dadd( 7.31613, -42.0141, -17.7842, 1.11 ) }
    dend_1 { pt3dadd( 6.51972, -43.3739, -19.2558, 0.66 ) }
    dend_1 { pt3dadd( 6.20131, -44.0531, -19.8733, 0.37 ) }
    dend_1 { pt3dadd( 5.92054, -45.0714, -20.8077, 0.37 ) }
    dend_1 { pt3dadd( 5.89151, -45.7911, -21.4927, 0.59 ) }
    dend_1 { pt3dadd( 5.89972, -45.8513, -21.554, 0.59 ) }
    dend_1 { pt3dadd( 6.25215, -46.813, -22.6076, 1.03 ) }
    dend_1 { pt3dadd( 6.71067, -47.6565, -23.5991, 1.69 ) }
    dend_1 { pt3dadd( 7.2487, -48.5906, -24.7338, 2.21 ) }
    dend_1 { pt3dadd( 7.709, -49.4247, -25.7375, 2.8 ) }
    dend_1 { pt3dadd( 7.88363, -49.7993, -26.1779, 2.8 ) }
    dend_1 { pt3dadd( 8.57427, -51.6278, -28.2099, 1.33 ) }
    dend_1 { pt3dadd( 8.93781, -52.9269, -29.5209, 0.52 ) }
    dend_1 { pt3dadd( 9.06248, -53.6047, -30.1213, 0.66 ) }
    dend_1 { pt3dadd( 9.12816, -54.1396, -30.5203, 0.66 ) }
    dend_1 { pt3dadd( 9.22146, -54.9317, -31.0298, 0.29 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_1 { pt3dadd( 9.30452, -55.632, -31.4249, 0.37 ) }
    dend_1 { pt3dadd( 9.41781, -56.4337, -31.6966, 0.37 ) }
    dend_1 { pt3dadd( 9.45955, -56.5299, -31.7306, 0.37 ) }
    dend_1 { pt3dadd( 10.0297, -57.2467, -32.165, 0.66 ) }
    dend_1 { pt3dadd( 10.5829, -57.834, -32.6144, 0.96 ) }
    dend_1 { pt3dadd( 10.6298, -57.8795, -32.6521, 0.96 ) }
    dend_1 { pt3dadd( 11.1628, -58.3999, -33.0907, 0.96 ) }
    dend_1 { pt3dadd( 12.2188, -59.4741, -34.0649, 0.52 ) }
    dend_1 { pt3dadd( 13.1429, -60.4676, -34.949, 0.37 ) }
    dend_1 { pt3dadd( 14.2331, -61.6861, -36.0481, 1.77 ) }
    dend_1 { pt3dadd( 14.6559, -62.1817, -36.4842, 2.36 ) }
    dend_1 { pt3dadd( 15.1152, -62.7357, -36.9667, 2.58 ) }
    dend_1 { pt3dadd( 16.5046, -64.4927, -38.4697, 0.74 ) }
    dend_1 { pt3dadd( 16.946, -65.1114, -38.9226, 0.74 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 14/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 4.23949, -40.7776, 0.00760949, 0.249059 ) }
    axon_1 { pt3dadd( 5.86652, -55.6891, 0.00760949, 0.249059 ) }
    axon_1 { pt3dadd( 7.49354, -70.6006, 0.00760949, 0.249059 ) }
    // Section: dend_17, id: dend_17, parent: dend_15 (entry count 17/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -12.5769, 66.625, 9.11855, 0.81 ) }
    dend_17 { pt3dadd( -13.2756, 67.4607, 9.13504, 0.81 ) }
    dend_17 { pt3dadd( -14.17, 68.5854, 9.13338, 0.74 ) }
    dend_17 { pt3dadd( -14.936, 69.5895, 9.13014, 0.74 ) }
    dend_17 { pt3dadd( -14.9931, 69.6647, 9.12632, 0.74 ) }
    dend_17 { pt3dadd( -16.0465, 71.0682, 9.03069, 0.74 ) }
    dend_17 { pt3dadd( -16.5571, 71.735, 8.96254, 1.33 ) }
    dend_17 { pt3dadd( -17.0695, 72.4058, 8.85244, 1.92 ) }
    dend_17 { pt3dadd( -17.6286, 73.1312, 8.69969, 1.33 ) }
    dend_17 { pt3dadd( -18.432, 74.1225, 8.48787, 1.11 ) }
    dend_17 { pt3dadd( -19.0374, 74.8273, 8.33778, 1.47 ) }
    dend_17 { pt3dadd( -19.8545, 75.7181, 8.16685, 1.18 ) }
    dend_17 { pt3dadd( -19.9017, 75.7677, 8.1577, 1.18 ) }
    dend_17 { pt3dadd( -20.6369, 76.5436, 8.0183, 0.66 ) }
    dend_17 { pt3dadd( -21.3028, 77.2879, 7.87659, 0.66 ) }
    dend_17 { pt3dadd( -22.1234, 78.2946, 7.69971, 1.47 ) }
    dend_17 { pt3dadd( -22.6133, 78.9923, 7.60391, 1.99 ) }
    dend_17 { pt3dadd( -23.1795, 79.9198, 7.51328, 1.99 ) }
    dend_17 { pt3dadd( -24.084, 81.5945, 7.38447, 0.66 ) }
    dend_17 { pt3dadd( -24.5455, 82.5965, 7.32461, 0.52 ) }
    dend_17 { pt3dadd( -24.8237, 83.3164, 7.29855, 0.59 ) }
    dend_17 { pt3dadd( -25.3163, 84.7654, 7.35332, 0.74 ) }
    dend_17 { pt3dadd( -25.3468, 84.8592, 7.36144, 0.74 ) }
    dend_17 { pt3dadd( -25.6482, 85.7167, 7.49131, 1.33 ) }
    dend_17 { pt3dadd( -25.9063, 86.3988, 7.63275, 1.62 ) }
    dend_17 { pt3dadd( -26.3422, 87.369, 7.8589, 1.18 ) }
    dend_17 { pt3dadd( -26.9414, 88.4616, 8.07617, 0.66 ) }
    dend_17 { pt3dadd( -27.4565, 89.2892, 8.21081, 0.66 ) }
    dend_17 { pt3dadd( -28.4489, 90.7646, 8.44113, 2.28 ) }
    dend_17 { pt3dadd( -28.9984, 91.5015, 8.55879, 2.73 ) }
    dend_17 { pt3dadd( -29.4914, 92.1204, 8.65304, 2.95 ) }
    dend_17 { pt3dadd( -30.7981, 93.6907, 8.86534, 1.03 ) }
    dend_17 { pt3dadd( -30.8525, 93.754, 8.87275, 1.03 ) }
    dend_17 { pt3dadd( -31.393, 94.3861, 8.95266, 0.81 ) }
    dend_17 { pt3dadd( -32.0185, 95.1213, 9.059, 0.44 ) }
    dend_17 { pt3dadd( -32.6529, 95.8968, 9.18298, 0.44 ) }
    dend_17 { pt3dadd( -33.3794, 96.8178, 9.34761, 0.44 ) }
    dend_17 { pt3dadd( -34.0768, 97.7014, 9.53545, 1.11 ) }
    dend_17 { pt3dadd( -34.5953, 98.3541, 9.67464, 1.69 ) }
    dend_17 { pt3dadd( -35.2876, 99.2354, 9.8583, 2.21 ) }
    dend_17 { pt3dadd( -35.7031, 99.7636, 9.96775, 2.5 ) }
    dend_17 { pt3dadd( -36.7489, 101.033, 10.2472, 1.25 ) }
    dend_17 { pt3dadd( -37.691, 102.149, 10.4988, 0.44 ) }
    dend_17 { pt3dadd( -38.4601, 103.048, 10.7022, 0.44 ) }
    dend_17 { pt3dadd( -39.0692, 103.75, 10.8644, 1.03 ) }
    dend_17 { pt3dadd( -39.7347, 104.531, 11.04, 1.33 ) }
    dend_17 { pt3dadd( -39.9003, 104.73, 11.0832, 1.33 ) }
    dend_17 { pt3dadd( -40.2813, 105.201, 11.181, 1.47 ) }
    dend_17 { pt3dadd( -40.9665, 106.04, 11.3579, 0.88 ) }
    dend_17 { pt3dadd( -41.5663, 106.744, 11.5162, 0.59 ) }
    dend_17 { pt3dadd( -42.1934, 107.435, 11.6866, 0.44 ) }
    dend_17 { pt3dadd( -42.2681, 107.512, 11.7076, 0.44 ) }
    dend_17 { pt3dadd( -43.1955, 108.375, 11.9775, 0.44 ) }
    dend_17 { pt3dadd( -43.689, 108.765, 12.1289, 0.66 ) }
    dend_17 { pt3dadd( -43.9073, 108.918, 12.1981, 0.66 ) }
    dend_17 { pt3dadd( -44.5755, 109.375, 12.411, 0.66 ) }
    dend_17 { pt3dadd( -45.2324, 109.886, 12.631, 0.66 ) }
    dend_17 { pt3dadd( -45.8394, 110.475, 12.8383, 0.37 ) }
    dend_17 { pt3dadd( -46.2569, 111.004, 12.9666, 0.37 ) }
    dend_17 { pt3dadd( -46.8519, 111.93, 13.118, 0.66 ) }
    dend_17 { pt3dadd( -47.2117, 112.642, 13.1663, 0.96 ) }
    dend_17 { pt3dadd( -47.615, 113.691, 13.1563, 0.29 ) }
    dend_17 { pt3dadd( -47.872, 114.512, 13.1144, 0.44 ) }
    dend_17 { pt3dadd( -48.1077, 115.385, 13.0462, 0.96 ) }
    dend_17 { pt3dadd( -48.1449, 115.527, 13.0334, 0.96 ) }
    dend_17 { pt3dadd( -48.5133, 116.825, 12.91, 1.77 ) }
    dend_17 { pt3dadd( -48.9308, 118.068, 12.8087, 2.95 ) }
    dend_17 { pt3dadd( -49.1959, 118.667, 12.6312, 3.54 ) }
    dend_17 { pt3dadd( -49.2296, 118.736, 12.6013, 3.54 ) }
    dend_17 { pt3dadd( -49.5953, 119.492, 12.2158, 3.76 ) }
    dend_17 { pt3dadd( -49.6266, 119.557, 12.1783, 3.76 ) }
    dend_17 { pt3dadd( -50.0687, 120.464, 11.5859, 3.46 ) }
    dend_17 { pt3dadd( -51.5272, 123.582, 9.42365, 0.81 ) }
    dend_17 { pt3dadd( -51.559, 123.656, 9.37502, 0.81 ) }
    dend_17 { pt3dadd( -51.8181, 124.305, 9.00446, 0.81 ) }
    dend_17 { pt3dadd( -51.8434, 124.378, 8.9737, 0.81 ) }
    dend_17 { pt3dadd( -52.0924, 125.305, 8.75485, 1.11 ) }
    dend_17 { pt3dadd( -52.2293, 126.01, 8.70706, 1.25 ) }
    dend_17 { pt3dadd( -52.4091, 127.342, 8.8429, 0.37 ) }
    dend_17 { pt3dadd( -52.5501, 128.417, 8.96411, 0.29 ) }
    dend_17 { pt3dadd( -52.7968, 130.023, 9.10001, 0.29 ) }
    dend_17 { pt3dadd( -53.0973, 131.774, 9.2066, 0.29 ) }
    dend_17 { pt3dadd( -53.1154, 131.866, 9.21007, 0.29 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_17 { pt3dadd( -53.3664, 133.015, 9.24774, 0.29 ) }
    dend_17 { pt3dadd( -53.3967, 133.148, 9.2477, 0.29 ) }
    dend_17 { pt3dadd( -53.734, 134.512, 9.11856, 0.44 ) }
    dend_17 { pt3dadd( -53.7789, 134.625, 9.08042, 0.44 ) }
    dend_17 { pt3dadd( -54.1291, 135.129, 8.81179, 0.44 ) }
    dend_17 { pt3dadd( -60.4381, 144.661, 9.1732, 0.44 ) }
    dend_17 { pt3dadd( -66.867, 154.106, 9.85782, 0.44 ) }
    dend_17 { pt3dadd( -73.2795, 163.572, 9.543, 0.44 ) }
    dend_17 { pt3dadd( -78.5936, 173.301, 6.8513, 0.44 ) }
    dend_17 { pt3dadd( -84.73, 182.035, 2.61757, 0.44 ) }
    dend_17 { pt3dadd( -89.7585, 190.037, -4.00851, 0.44 ) }
    dend_17 { pt3dadd( -95.5223, 196.349, -11.9352, 0.44 ) }
    dend_17 { pt3dadd( -98.7279, 204.78, -19.1007, 0.44 ) }
    dend_17 { pt3dadd( -101.532, 213.645, -25.8488, 0.44 ) }
    dend_17 { pt3dadd( -104.105, 221.494, -33.9488, 0.44 ) }
    dend_17 { pt3dadd( -104.5, 230.565, -40.9938, 0.44 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 16/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -12.5769, 66.625, 9.11855, 0.29 ) }
    dend_16 { pt3dadd( -12.2728, 68.0918, 8.83751, 0.29 ) }
    dend_16 { pt3dadd( -12.1804, 68.687, 8.75763, 0.44 ) }
    dend_16 { pt3dadd( -12.1327, 69.2655, 8.70731, 0.44 ) }
    dend_16 { pt3dadd( -12.1175, 70.1148, 8.66494, 0.29 ) }
    dend_16 { pt3dadd( -12.1192, 70.1637, 8.66363, 0.29 ) }
    dend_16 { pt3dadd( -12.1715, 70.8978, 8.65381, 0.29 ) }
    dend_16 { pt3dadd( -12.1909, 71.0161, 8.66522, 0.29 ) }
    dend_16 { pt3dadd( -12.3123, 71.6223, 8.68152, 0.29 ) }
    dend_16 { pt3dadd( -12.4197, 72.1257, 8.66078, 0.96 ) }
    dend_16 { pt3dadd( -12.5088, 72.5694, 8.59965, 1.33 ) }
    dend_16 { pt3dadd( -12.5538, 72.8358, 8.55023, 1.33 ) }
    dend_16 { pt3dadd( -12.6856, 73.9849, 8.28391, 0.52 ) }
    dend_16 { pt3dadd( -12.7384, 74.8853, 8.0458, 0.29 ) }
    dend_16 { pt3dadd( -12.7369, 74.9821, 8.01722, 0.29 ) }
    dend_16 { pt3dadd( -12.6927, 75.7121, 7.79306, 0.81 ) }
    dend_16 { pt3dadd( -12.6882, 75.764, 7.77746, 0.81 ) }
    dend_16 { pt3dadd( -12.6459, 76.2711, 7.63876, 1.03 ) }
    dend_16 { pt3dadd( -12.6252, 76.7077, 7.5423, 0.74 ) }
    dend_16 { pt3dadd( -12.5975, 77.4018, 7.43436, 0.29 ) }
    dend_16 { pt3dadd( -12.5909, 77.8479, 7.3834, 0.44 ) }
    dend_16 { pt3dadd( -12.6048, 78.1927, 7.36532, 0.44 ) }
    dend_16 { pt3dadd( -12.6414, 78.6495, 7.34709, 0.29 ) }
    dend_16 { pt3dadd( -12.7207, 79.0727, 7.33582, 0.74 ) }
    dend_16 { pt3dadd( -13.4571, 86.7786, 7.521, 0.74 ) }
    // Section: dend_12, id: dend_12, parent: dend_10 (entry count 41/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 14.2383, 78.7772, 1.52123, 0.37 ) }
    dend_12 { pt3dadd( 14.4916, 80.3612, 0.838706, 0.37 ) }
    dend_12 { pt3dadd( 14.6118, 80.8969, 0.528554, 0.37 ) }
    dend_12 { pt3dadd( 14.7151, 81.3221, 0.26793, 0.96 ) }
    dend_12 { pt3dadd( 14.7306, 81.3733, 0.238194, 0.96 ) }
    dend_12 { pt3dadd( 14.9796, 82.1498, -0.200247, 0.96 ) }
    dend_12 { pt3dadd( 15.422, 83.5937, -0.97662, 0.37 ) }
    dend_12 { pt3dadd( 15.6534, 84.5067, -1.46684, 0.59 ) }
    dend_12 { pt3dadd( 15.8287, 85.2659, -1.9095, 0.37 ) }
    dend_12 { pt3dadd( 16.0309, 86.2955, -2.52281, 0.37 ) }
    dend_12 { pt3dadd( 16.0435, 86.3807, -2.57245, 0.37 ) }
    dend_12 { pt3dadd( 16.0837, 86.978, -2.94695, 0.29 ) }
    dend_12 { pt3dadd( 16.0764, 88.1317, -3.67306, 1.47 ) }
    dend_12 { pt3dadd( 16.0246, 89.0733, -4.26945, 1.92 ) }
    dend_12 { pt3dadd( 15.9963, 89.4236, -4.49956, 2.21 ) }
    dend_12 { pt3dadd( 15.9673, 89.7773, -4.74678, 2.21 ) }
    dend_12 { pt3dadd( 15.8774, 91.6848, -6.08972, 0.37 ) }
    dend_12 { pt3dadd( 15.8642, 92.6931, -6.79505, 0.96 ) }
    dend_12 { pt3dadd( 15.8686, 93.2094, -7.14177, 1.62 ) }
    dend_12 { pt3dadd( 15.8806, 93.7666, -7.51149, 1.84 ) }
    dend_12 { pt3dadd( 15.93, 95.2587, -8.51503, 0.29 ) }
    dend_12 { pt3dadd( 15.9687, 96.1534, -9.10722, 1.03 ) }
    dend_12 { pt3dadd( 15.9837, 96.4899, -9.30184, 1.4 ) }
    dend_12 { pt3dadd( 15.988, 96.69, -9.42176, 1.4 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 65/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 14.2383, 78.7772, 1.52123, 0.37 ) }
    dend_11 { pt3dadd( 15.3275, 80.7922, 2.30339, 0.37 ) }
    dend_11 { pt3dadd( 15.9408, 81.8475, 2.581, 0.37 ) }
    dend_11 { pt3dadd( 16.5513, 82.8704, 2.70911, 0.81 ) }
    dend_11 { pt3dadd( 16.5881, 82.9272, 2.71243, 0.81 ) }
    dend_11 { pt3dadd( 16.949, 83.4629, 2.72796, 0.81 ) }
    dend_11 { pt3dadd( 17.5731, 84.3606, 2.68331, 0.37 ) }
    dend_11 { pt3dadd( 18.2455, 85.1795, 2.45475, 0.29 ) }
    dend_11 { pt3dadd( 18.8374, 85.868, 2.21133, 0.59 ) }
    dend_11 { pt3dadd( 19.4159, 86.5253, 1.944, 0.22 ) }
    dend_11 { pt3dadd( 19.4495, 86.5669, 1.9266, 0.22 ) }
    dend_11 { pt3dadd( 20.0581, 87.4475, 1.55073, 1.18 ) }
    dend_11 { pt3dadd( 20.237, 87.7892, 1.43289, 1.69 ) }
    dend_11 { pt3dadd( 20.4531, 88.4355, 1.27894, 1.99 ) }
    dend_11 { pt3dadd( 20.5118, 88.8303, 1.23799, 1.99 ) }
    dend_11 { pt3dadd( 20.4396, 89.7321, 1.22701, 0.44 ) }
    dend_11 { pt3dadd( 20.2968, 90.3266, 1.30149, 0.29 ) }
    dend_11 { pt3dadd( 19.512, 91.8484, 1.85646, 0.29 ) }
    dend_11 { pt3dadd( 19.4747, 91.8976, 1.87897, 0.29 ) }
    dend_11 { pt3dadd( 23.8488, 99.9436, 3.45902, 0.29 ) }
    dend_11 { pt3dadd( 27.1942, 108.228, 5.95394, 0.29 ) }
    dend_11 { pt3dadd( 30.5931, 116.345, 8.94338, 0.29 ) }
    dend_11 { pt3dadd( 33.1022, 124.416, 12.8275, 0.29 ) }
    dend_11 { pt3dadd( 36.5875, 131.658, 17.6585, 0.29 ) }
    dend_11 { pt3dadd( 39.1143, 138.275, 23.8843, 0.29 ) }
    dend_11 { pt3dadd( 42.1453, 144.791, 30.0016, 0.29 ) }
    // Section: dend_6, id: dend_6, parent: dend_4 (entry count 91/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -16.2091, -105.417, -6.91463, 0.52 ) }
    dend_6 { pt3dadd( -16.2752, -107.066, -6.28441, 0.52 ) }
    dend_6 { pt3dadd( -16.2467, -107.712, -6.11351, 0.81 ) }
    dend_6 { pt3dadd( -16.1911, -108.279, -6.04801, 1.03 ) }
    dend_6 { pt3dadd( -16.1839, -108.35, -6.04866, 1.03 ) }
    dend_6 { pt3dadd( -16.1459, -108.978, -6.09578, 1.03 ) }
    dend_6 { pt3dadd( -16.1409, -109.674, -6.17056, 0.52 ) }
    dend_6 { pt3dadd( -16.1742, -110.288, -6.3073, 0.52 ) }
    dend_6 { pt3dadd( -16.2979, -111.023, -6.44795, 0.52 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_6 { pt3dadd( -16.4696, -111.628, -6.54277, 0.66 ) }
    dend_6 { pt3dadd( -16.7106, -112.254, -6.57287, 0.66 ) }
    dend_6 { pt3dadd( -16.9422, -112.718, -6.55055, 0.88 ) }
    dend_6 { pt3dadd( -17.5539, -113.766, -6.329, 1.03 ) }
    dend_6 { pt3dadd( -17.9847, -114.431, -6.08192, 1.55 ) }
    dend_6 { pt3dadd( -18.1739, -114.723, -5.94134, 1.92 ) }
    dend_6 { pt3dadd( -18.8255, -115.746, -5.37868, 1.92 ) }
    dend_6 { pt3dadd( -19.251, -116.455, -4.9688, 1.33 ) }
    dend_6 { pt3dadd( -19.942, -117.663, -4.2687, 0.59 ) }
    dend_6 { pt3dadd( -20.426, -118.545, -3.77361, 0.59 ) }
    dend_6 { pt3dadd( -20.8925, -119.43, -3.3511, 0.59 ) }
    dend_6 { pt3dadd( -20.9152, -119.475, -3.33412, 0.59 ) }
    dend_6 { pt3dadd( -21.2345, -120.123, -3.18104, 1.33 ) }
    dend_6 { pt3dadd( -21.5821, -120.907, -3.13125, 0.74 ) }
    dend_6 { pt3dadd( -21.8301, -121.581, -3.20661, 0.74 ) }
    dend_6 { pt3dadd( -22.1791, -122.706, -3.39801, 0.74 ) }
    dend_6 { pt3dadd( -22.2036, -122.789, -3.4135, 0.74 ) }
    dend_6 { pt3dadd( -22.4375, -123.598, -3.54387, 1.18 ) }
    dend_6 { pt3dadd( -22.8108, -124.842, -3.71141, 0.81 ) }
    dend_6 { pt3dadd( -23.2107, -126.163, -3.80429, 0.74 ) }
    dend_6 { pt3dadd( -23.677, -127.647, -3.81028, 0.59 ) }
    dend_6 { pt3dadd( -23.696, -127.707, -3.80457, 0.59 ) }
    dend_6 { pt3dadd( -24.0224, -128.689, -3.65777, 1.92 ) }
    dend_6 { pt3dadd( -24.3121, -129.589, -3.44987, 2.21 ) }
    dend_6 { pt3dadd( -24.6329, -130.659, -3.1378, 2.21 ) }
    dend_6 { pt3dadd( -24.9359, -131.77, -2.78124, 0.74 ) }
    dend_6 { pt3dadd( -25.2037, -133.075, -2.34689, 0.74 ) }
    dend_6 { pt3dadd( -25.3126, -134.065, -2.02924, 0.66 ) }
    dend_6 { pt3dadd( -25.2661, -135.233, -1.69367, 0.44 ) }
    dend_6 { pt3dadd( -25.0957, -136.002, -1.50685, 1.03 ) }
    dend_6 { pt3dadd( -25.0546, -136.094, -1.49395, 1.03 ) }
    dend_6 { pt3dadd( -24.7582, -136.549, -1.49206, 1.03 ) }
    dend_6 { pt3dadd( -24.2931, -137.179, -1.57092, 1.03 ) }
    dend_6 { pt3dadd( -23.8645, -137.795, -1.6749, 1.4 ) }
    dend_6 { pt3dadd( -23.6634, -138.184, -1.74999, 1.4 ) }
    dend_6 { pt3dadd( -23.3584, -139.149, -1.88354, 0.81 ) }
    dend_6 { pt3dadd( -23.1916, -140.181, -1.9268, 0.81 ) }
    dend_6 { pt3dadd( -23.1843, -140.917, -1.89905, 1.03 ) }
    dend_6 { pt3dadd( -23.2627, -141.584, -1.83196, 1.11 ) }
    dend_6 { pt3dadd( -23.4274, -142.375, -1.70817, 1.18 ) }
    dend_6 { pt3dadd( -23.6933, -143.348, -1.52097, 0.37 ) }
    dend_6 { pt3dadd( -24.0868, -144.53, -1.31994, 0.37 ) }
    dend_6 { pt3dadd( -24.3269, -145.278, -1.26852, 1.55 ) }
    dend_6 { pt3dadd( -24.478, -145.888, -1.30893, 1.84 ) }
    dend_6 { pt3dadd( -24.5656, -146.432, -1.41117, 2.14 ) }
    dend_6 { pt3dadd( -24.5923, -146.845, -1.54461, 2.14 ) }
    dend_6 { pt3dadd( -24.49, -147.974, -2.12267, 1.69 ) }
    dend_6 { pt3dadd( -24.1057, -149.234, -2.98765, 0.52 ) }
    dend_6 { pt3dadd( -23.8763, -149.686, -3.34443, 0.88 ) }
    dend_6 { pt3dadd( -23.8456, -149.729, -3.38279, 0.88 ) }
    dend_6 { pt3dadd( -23.7155, -149.869, -3.52925, 0.88 ) }
    dend_6 { pt3dadd( -22.9737, -150.535, -4.26779, 0.52 ) }
    dend_6 { pt3dadd( -22.2818, -151.118, -4.92919, 1.03 ) }
    dend_6 { pt3dadd( -22.243, -151.153, -4.96798, 1.03 ) }
    dend_6 { pt3dadd( -21.6449, -151.8, -5.61345, 1.33 ) }
    dend_6 { pt3dadd( -21.0472, -152.552, -6.28841, 1.25 ) }
    dend_6 { pt3dadd( -20.8365, -152.879, -6.54524, 1.03 ) }
    dend_6 { pt3dadd( -20.2812, -154.106, -7.29247, 0.59 ) }
    dend_6 { pt3dadd( -20.0147, -154.943, -7.68929, 0.59 ) }
    dend_6 { pt3dadd( -19.8764, -155.546, -7.90826, 1.18 ) }
    dend_6 { pt3dadd( -19.8402, -155.797, -7.96979, 1.84 ) }
    dend_6 { pt3dadd( -19.7982, -156.348, -8.05586, 1.84 ) }
    dend_6 { pt3dadd( -19.7753, -157.573, -8.1897, 0.74 ) }
    dend_6 { pt3dadd( -19.7566, -158.443, -8.3868, 1.03 ) }
    dend_6 { pt3dadd( -19.7115, -159.106, -8.64674, 1.11 ) }
    dend_6 { pt3dadd( -19.6709, -159.447, -8.82678, 1.33 ) }
    dend_6 { pt3dadd( -19.5586, -160.106, -9.30338, 0.81 ) }
    dend_6 { pt3dadd( -19.4572, -160.532, -9.70131, 0.44 ) }
    dend_6 { pt3dadd( -18.9234, -162.522, -12.0477, 0.44 ) }
    dend_6 { pt3dadd( -18.833, -162.879, -12.5357, 0.44 ) }
    dend_6 { pt3dadd( -18.8261, -162.952, -12.662, 0.44 ) }
    dend_6 { pt3dadd( -18.909, -163.547, -13.7849, 0.44 ) }
    dend_6 { pt3dadd( -18.9202, -163.571, -13.8317, 0.44 ) }
    dend_6 { pt3dadd( -19.1399, -163.897, -14.377, 0.74 ) }
    dend_6 { pt3dadd( -19.4491, -164.237, -14.8448, 1.11 ) }
    dend_6 { pt3dadd( -20.229, -165.287, -16.3795, 0.44 ) }
    dend_6 { pt3dadd( -20.4444, -165.675, -16.9646, 0.44 ) }
    dend_6 { pt3dadd( -20.7561, -166.503, -18.1626, 1.84 ) }
    dend_6 { pt3dadd( -20.8362, -166.855, -18.6687, 2.5 ) }
    dend_6 { pt3dadd( -20.8487, -166.953, -18.8073, 2.5 ) }
    dend_6 { pt3dadd( -20.9509, -168.395, -20.6701, 0.59 ) }
    dend_6 { pt3dadd( -20.9906, -168.901, -21.2805, 0.59 ) }
    dend_6 { pt3dadd( -21.0448, -169.342, -21.8844, 0.59 ) }
    dend_6 { pt3dadd( -21.0509, -169.38, -21.9376, 0.59 ) }
    dend_6 { pt3dadd( -21.2188, -170.166, -23.0106, 1.77 ) }
    dend_6 { pt3dadd( -21.359, -170.661, -23.63, 2.06 ) }
    dend_6 { pt3dadd( -21.7501, -171.659, -24.736, 1.99 ) }
    dend_6 { pt3dadd( -22.3152, -172.987, -26.1702, 0.81 ) }
    dend_6 { pt3dadd( -22.3326, -173.029, -26.2171, 0.81 ) }
    dend_6 { pt3dadd( -22.5081, -173.506, -26.7328, 0.66 ) }
    dend_6 { pt3dadd( -22.6877, -174.166, -27.4158, 0.52 ) }
    dend_6 { pt3dadd( -22.8066, -174.654, -27.9022, 1.84 ) }
    dend_6 { pt3dadd( -22.946, -175.296, -28.4555, 2.28 ) }
    dend_6 { pt3dadd( -23.2305, -176.875, -29.7613, 0.66 ) }
    dend_6 { pt3dadd( -23.271, -177.422, -30.2264, 0.66 ) }
    dend_6 { pt3dadd( -23.242, -178.356, -31.0231, 1.77 ) }
    dend_6 { pt3dadd( -23.2338, -178.412, -31.0684, 1.77 ) }
    dend_6 { pt3dadd( -23.1041, -178.982, -31.4932, 2.21 ) }
    dend_6 { pt3dadd( -22.8731, -179.79, -32.0008, 2.21 ) }
    dend_6 { pt3dadd( -22.5457, -180.877, -32.5682, 0.74 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_6 { pt3dadd( -22.4089, -181.398, -32.8224, 0.37 ) }
    dend_6 { pt3dadd( -22.3092, -181.812, -33.0073, 0.29 ) }
    dend_6 { pt3dadd( -22.1375, -182.519, -33.313, 1.11 ) }
    dend_6 { pt3dadd( -22.0137, -183.041, -33.5418, 1.4 ) }
    dend_6 { pt3dadd( -21.8212, -183.914, -33.89, 0.59 ) }
    dend_6 { pt3dadd( -21.6851, -184.542, -34.1359, 0.29 ) }
    dend_6 { pt3dadd( -21.5426, -185.224, -34.4057, 0.66 ) }
    dend_6 { pt3dadd( -21.4615, -185.643, -34.587, 0.88 ) }
    dend_6 { pt3dadd( -21.3168, -186.555, -34.9846, 0.29 ) }
    dend_6 { pt3dadd( -21.2418, -187.129, -35.2297, 0.29 ) }
    dend_6 { pt3dadd( -21.1966, -187.578, -35.4086, 0.96 ) }
    dend_6 { pt3dadd( -21.1616, -188.054, -35.591, 0.96 ) }
    dend_6 { pt3dadd( -21.06, -189.095, -35.9983, 0.29 ) }
    dend_6 { pt3dadd( -20.9703, -189.609, -36.2301, 0.29 ) }
    dend_6 { pt3dadd( -20.799, -190.133, -36.5569, 0.66 ) }
    dend_6 { pt3dadd( -20.7835, -190.177, -36.614, 0.66 ) }
    dend_6 { pt3dadd( -20.6971, -190.442, -37.0287, 0.66 ) }
    dend_6 { pt3dadd( -20.5527, -191.039, -38.1393, 0.44 ) }
    dend_6 { pt3dadd( -20.4804, -191.517, -39.0806, 1.77 ) }
    dend_6 { pt3dadd( -20.4193, -192.215, -40.5216, 2.58 ) }
    dend_6 { pt3dadd( -20.3627, -194.313, -44.9234, 0.44 ) }
    dend_6 { pt3dadd( -20.369, -194.539, -45.3879, 0.44 ) }
    dend_6 { pt3dadd( -20.4676, -195.537, -47.5062, 0.88 ) }
    dend_6 { pt3dadd( -20.5635, -196.013, -48.5379, 1.77 ) }
    dend_6 { pt3dadd( -20.5718, -196.04, -48.5971, 1.77 ) }
    dend_6 { pt3dadd( -20.6436, -196.218, -48.9414, 2.14 ) }
    dend_6 { pt3dadd( -20.7833, -196.578, -49.3997, 2.43 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 27/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -16.2091, -105.417, -6.91463, 0.59 ) }
    dend_5 { pt3dadd( -14.7162, -106.346, -5.92899, 0.59 ) }
    dend_5 { pt3dadd( -12.8278, -107.27, -4.89693, 0.52 ) }
    dend_5 { pt3dadd( -11.6426, -107.728, -4.41258, 0.52 ) }
    dend_5 { pt3dadd( -9.92499, -108.125, -3.96949, 0.37 ) }
    dend_5 { pt3dadd( -9.60315, -108.173, -3.91445, 0.37 ) }
    dend_5 { pt3dadd( -8.20911, -108.303, -3.73433, 0.37 ) }
    dend_5 { pt3dadd( -7.02805, -108.293, -3.69518, 0.37 ) }
    dend_5 { pt3dadd( -5.51626, -108.126, -3.76469, 0.37 ) }
    dend_5 { pt3dadd( -3.17964, -107.741, -3.98087, 0.22 ) }
    dend_5 { pt3dadd( -2.50698, -107.625, -4.09544, 0.29 ) }
    dend_5 { pt3dadd( -1.2294, -107.396, -4.34049, 0.37 ) }
    // Section: dend_3, id: dend_3, parent: dend_1 (entry count 39/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 16.946, -65.1114, -38.9226, 0.37 ) }
    dend_3 { pt3dadd( 17.2982, -65.9812, -39.1728, 0.37 ) }
    dend_3 { pt3dadd( 17.7302, -67.1686, -39.4199, 0.29 ) }
    dend_3 { pt3dadd( 18.1346, -68.4028, -39.6335, 1.25 ) }
    dend_3 { pt3dadd( 18.3133, -68.9789, -39.72, 1.69 ) }
    dend_3 { pt3dadd( 18.3374, -69.0599, -39.731, 1.69 ) }
    dend_3 { pt3dadd( 18.7797, -70.6484, -39.9161, 0.29 ) }
    dend_3 { pt3dadd( 19.0701, -71.807, -39.9936, 0.29 ) }
    dend_3 { pt3dadd( 19.3731, -73.0681, -40.0609, 1.77 ) }
    dend_3 { pt3dadd( 19.5202, -73.7485, -40.081, 2.43 ) }
    dend_3 { pt3dadd( 19.6248, -74.2444, -40.0977, 2.43 ) }
    dend_3 { pt3dadd( 20.0365, -76.2602, -40.1731, 0.22 ) }
    dend_3 { pt3dadd( 20.2237, -77.268, -40.221, 0.22 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 52/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 16.946, -65.1114, -38.9226, 1.77 ) }
    dend_2 { pt3dadd( 18.1485, -65.983, -41.798, 1.77 ) }
    dend_2 { pt3dadd( 19.4185, -66.9935, -44.7785, 1.03 ) }
    dend_2 { pt3dadd( 21.4363, -68.8046, -49.5442, 2.14 ) }
    dend_2 { pt3dadd( 22.2268, -69.5777, -51.4778, 0.52 ) }
    dend_2 { pt3dadd( 22.5378, -69.897, -52.2542, 1.92 ) }
    dend_2 { pt3dadd( 22.7209, -70.0946, -52.721, 2.36 ) }
    dend_2 { pt3dadd( 24.1536, -71.9135, -56.4626, 0.29 ) }
    dend_2 { pt3dadd( 24.4608, -72.3773, -57.3599, 0.29 ) }
    dend_2 { pt3dadd( 24.9605, -73.43, -59.2119, 0.29 ) }
    dend_2 { pt3dadd( 24.9715, -73.4551, -59.2601, 0.29 ) }
    dend_2 { pt3dadd( 25.043, -73.6272, -59.6086, 1.69 ) }
    dend_2 { pt3dadd( 25.1363, -73.8561, -60.0661, 1.69 ) }
    dend_2 { pt3dadd( 25.9052, -75.4726, -63.2113, 0.22 ) }
    dend_2 { pt3dadd( 26.0445, -75.7097, -63.6721, 0.22 ) }
    dend_2 { pt3dadd( 26.0626, -75.735, -63.7181, 0.22 ) }
    dend_2 { pt3dadd( 26.3057, -76.0462, -64.2616, 1.03 ) }
    dend_2 { pt3dadd( 27.3129, -77.2647, -66.2527, 0.29 ) }
    dend_2 { pt3dadd( 28.3919, -78.5496, -68.1278, 1.99 ) }
    dend_2 { pt3dadd( 28.5813, -78.7741, -68.4124, 2.14 ) }
    dend_2 { pt3dadd( 29.9677, -80.3523, -70.394, 0.37 ) }
    dend_2 { pt3dadd( 30.2083, -80.6176, -70.721, 0.37 ) }
    dend_2 { pt3dadd( 30.5417, -80.9818, -71.1372, 0.88 ) }
    dend_2 { pt3dadd( 30.9209, -81.4142, -71.5426, 1.03 ) }
    dend_2 { pt3dadd( 31.8203, -82.5481, -72.4273, 0.29 ) }
    dend_2 { pt3dadd( 31.8588, -82.6005, -72.466, 0.29 ) }
    dend_2 { pt3dadd( 32.7465, -83.9282, -73.4311, 0.29 ) }
    dend_2 { pt3dadd( 33.1621, -84.5546, -73.9454, 1.99 ) }
    dend_2 { pt3dadd( 33.2948, -84.7577, -74.1194, 1.99 ) }
    dend_2 { pt3dadd( 34.2372, -86.2741, -75.4128, 0.29 ) }
    dend_2 { pt3dadd( 34.4413, -86.6494, -75.727, 0.59 ) }
    dend_2 { pt3dadd( 35.1784, -88.1048, -76.9259, 0.44 ) }
    dend_2 { pt3dadd( 35.5844, -88.961, -77.6277, 0.29 ) }
    dend_2 { pt3dadd( 35.7485, -89.3146, -77.9234, 1.11 ) }
    dend_2 { pt3dadd( 35.8877, -89.6105, -78.1624, 1.33 ) }
    dend_2 { pt3dadd( 36.9716, -91.6692, -79.8905, 0.22 ) }
    dend_2 { pt3dadd( 37.2008, -92.041, -80.2255, 0.52 ) }
    dend_2 { pt3dadd( 37.9655, -93.1089, -81.2508, 0.29 ) }
    dend_2 { pt3dadd( 38.201, -93.4025, -81.5471, 0.88 ) }
    dend_2 { pt3dadd( 38.5343, -93.7558, -81.9906, 0.88 ) }
    dend_2 { pt3dadd( 39.9237, -95.0977, -83.8764, 0.29 ) }
    dend_2 { pt3dadd( 41.0708, -96.1205, -85.4235, 0.29 ) }
    dend_2 { pt3dadd( 42.0253, -96.9578, -86.7542, 1.77 ) }
    dend_2 { pt3dadd( 42.2761, -97.173, -87.1115, 1.77 ) }
    dend_2 { pt3dadd( 44.2441, -98.8738, -90.0052, 0.52 ) }
    dend_2 { pt3dadd( 44.5817, -99.1834, -90.5309, 0.44 ) }
    dend_2 { pt3dadd( 44.8764, -99.4745, -90.9954, 0.74 ) }
    dend_2 { pt3dadd( 44.9027, -99.502, -91.0359, 0.74 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_2 { pt3dadd( 45.7914, -100.488, -92.3338, 0.29 ) }
    dend_2 { pt3dadd( 45.8255, -100.527, -92.3772, 0.29 ) }
    dend_2 { pt3dadd( 46.3886, -101.21, -92.8481, 1.18 ) }
    dend_2 { pt3dadd( 46.6034, -101.466, -93.0024, 1.18 ) }
    dend_2 { pt3dadd( 47.5164, -102.572, -93.5805, 0.22 ) }
    dend_2 { pt3dadd( 47.5488, -102.613, -93.5971, 0.22 ) }
    dend_2 { pt3dadd( 48.2659, -103.515, -93.8727, 0.81 ) }
    dend_2 { pt3dadd( 49.1282, -104.521, -94.1524, 0.22 ) }
    dend_2 { pt3dadd( 49.495, -104.917, -94.243, 0.81 ) }
    dend_2 { pt3dadd( 49.5442, -104.961, -94.2559, 0.81 ) }
    dend_2 { pt3dadd( 49.8157, -105.147, -94.3354, 0.81 ) }
    dend_2 { pt3dadd( 51.15, -105.777, -94.936, 0.22 ) }
    dend_2 { pt3dadd( 51.5223, -105.916, -95.1273, 0.44 ) }
    dend_2 { pt3dadd( 51.58, -105.934, -95.1586, 0.44 ) }
    dend_2 { pt3dadd( 53.3033, -106.493, -96.1006, 1.33 ) }
    dend_2 { pt3dadd( 54.842, -107.007, -96.941, 1.33 ) }
    dend_2 { pt3dadd( 57.8629, -108.022, -98.6002, 0.29 ) }
    dend_2 { pt3dadd( 57.9367, -108.048, -98.6413, 0.29 ) }
    dend_2 { pt3dadd( 58.4307, -108.231, -98.925, 0.29 ) }
    dend_2 { pt3dadd( 59.067, -108.493, -99.2662, 1.03 ) }
    dend_2 { pt3dadd( 59.2487, -108.577, -99.3524, 1.03 ) }
    dend_2 { pt3dadd( 59.3061, -108.607, -99.374, 1.03 ) }
    dend_2 { pt3dadd( 61.2158, -109.649, -99.8961, 0.22 ) }
    dend_2 { pt3dadd( 61.2747, -109.679, -99.9119, 0.22 ) }
    dend_2 { pt3dadd( 62.7418, -110.33, -100.312, 0.29 ) }
    dend_2 { pt3dadd( 64.5527, -110.896, -100.828, 0.22 ) }
    dend_2 { pt3dadd( 64.9481, -110.989, -100.947, 0.66 ) }
    dend_2 { pt3dadd( 65.0128, -110.999, -100.966, 0.66 ) }
    dend_2 { pt3dadd( 65.4186, -111.037, -101.085, 0.66 ) }
    dend_2 { pt3dadd( 66.6552, -111.11, -101.473, 0.15 ) }
    dend_2 { pt3dadd( 69.1575, -111.093, -102.345, 0.96 ) }
    dend_2 { pt3dadd( 70.5774, -111.032, -102.851, 1.4 ) }
    dend_2 { pt3dadd( 71.1287, -111.005, -103.061, 1.4 ) }
    dend_2 { pt3dadd( 71.3983, -110.991, -103.168, 1.4 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 34/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -104.5, 230.565, -40.9938, 0.44 ) }
    dend_19 { pt3dadd( -109.69, 239.321, -43.474, 0.44 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 36/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -104.5, 230.565, -40.9938, 0.44 ) }
    dend_18 { pt3dadd( -107.865, 237.388, -43.2924, 0.44 ) }
    // Section: dend_14, id: dend_14, parent: dend_12 (entry count 38/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 15.988, 96.69, -9.42176, 0.29 ) }
    dend_14 { pt3dadd( 17.1316, 99.6226, -9.76346, 0.29 ) }
    dend_14 { pt3dadd( 17.6454, 100.941, -9.91701, 0.29 ) }
    dend_14 { pt3dadd( 18.0758, 102.044, -10.0455, 1.03 ) }
    dend_14 { pt3dadd( 18.1098, 102.131, -10.0557, 1.03 ) }
    dend_14 { pt3dadd( 18.3578, 102.767, -10.1298, 1.4 ) }
    // Section: dend_13, id: dend_13, parent: dend_12 (entry count 44/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 15.988, 96.69, -9.42176, 0.88 ) }
    dend_13 { pt3dadd( 15.995, 97.6504, -9.59592, 0.88 ) }
    dend_13 { pt3dadd( 16.0738, 98.3794, -9.77946, 0.29 ) }
    dend_13 { pt3dadd( 16.2434, 99.2131, -10.1169, 0.29 ) }
    dend_13 { pt3dadd( 16.3811, 99.722, -10.3491, 0.44 ) }
    dend_13 { pt3dadd( 16.7812, 101.03, -10.9656, 1.25 ) }
    dend_13 { pt3dadd( 16.9549, 101.554, -11.214, 1.99 ) }
    dend_13 { pt3dadd( 17.265, 102.294, -11.5987, 2.21 ) }
    dend_13 { pt3dadd( 18.0334, 103.895, -12.4837, 0.22 ) }
    dend_13 { pt3dadd( 18.3472, 104.564, -12.8819, 0.22 ) }
    dend_13 { pt3dadd( 18.5068, 104.896, -13.0807, 0.96 ) }
    dend_13 { pt3dadd( 18.6745, 105.268, -13.2961, 1.77 ) }
    dend_13 { pt3dadd( 18.8468, 105.735, -13.5502, 2.21 ) }
    dend_13 { pt3dadd( 18.9716, 106.214, -13.8095, 2.21 ) }
    dend_13 { pt3dadd( 19.3087, 108.044, -14.7706, 0.22 ) }
    dend_13 { pt3dadd( 19.4192, 108.818, -15.1886, 0.22 ) }
    dend_13 { pt3dadd( 19.543, 109.725, -15.6677, 1.18 ) }
    dend_13 { pt3dadd( 19.586, 110.071, -15.8453, 1.33 ) }
    dend_13 { pt3dadd( 19.6987, 111.102, -16.324, 0.81 ) }
    dend_13 { pt3dadd( 19.7949, 111.904, -16.6575, 0.22 ) }
    dend_13 { pt3dadd( 19.8792, 112.418, -16.8282, 0.29 ) }
    dend_13 { pt3dadd( 20.0409, 113.321, -17.1055, 0.22 ) }
    dend_13 { pt3dadd( 20.0698, 113.437, -17.1464, 0.22 ) }
    dend_13 { pt3dadd( 20.3401, 114.314, -17.5382, 0.22 ) }
    dend_13 { pt3dadd( 20.6612, 115.223, -17.9912, 1.33 ) }
    dend_13 { pt3dadd( 20.7933, 115.626, -18.2492, 1.69 ) }
    dend_13 { pt3dadd( 20.8528, 115.851, -18.4016, 1.69 ) }
    dend_13 { pt3dadd( 21.1709, 117.126, -19.299, 0.29 ) }
    dend_13 { pt3dadd( 21.3771, 117.846, -19.8059, 1.47 ) }
    dend_13 { pt3dadd( 21.4641, 118.105, -19.9903, 1.47 ) }
    dend_13 { pt3dadd( 21.7478, 118.877, -20.5409, 0.66 ) }
    dend_13 { pt3dadd( 22.1396, 119.869, -21.2216, 0.29 ) }
    dend_13 { pt3dadd( 22.3331, 120.363, -21.5349, 0.29 ) }
    dend_13 { pt3dadd( 22.5879, 120.992, -21.8727, 0.88 ) }
    dend_13 { pt3dadd( 22.7389, 121.353, -22.0748, 1.25 ) }
    dend_13 { pt3dadd( 23.1212, 122.284, -22.6297, 0.29 ) }
    dend_13 { pt3dadd( 23.3381, 122.845, -22.9673, 0.22 ) }
    dend_13 { pt3dadd( 23.4741, 123.353, -23.2988, 0.66 ) }
    dend_13 { pt3dadd( 23.5285, 123.785, -23.5651, 0.81 ) }
    dend_13 { pt3dadd( 23.5386, 124.591, -23.9922, 0.22 ) }
    dend_13 { pt3dadd( 23.524, 125.091, -24.2206, 0.22 ) }
    dend_13 { pt3dadd( 23.4791, 125.563, -24.4327, 0.74 ) }
    dend_13 { pt3dadd( 23.3427, 126.297, -24.8395, 1.4 ) }
    dend_13 { pt3dadd( 23.1021, 127.336, -25.4672, 0.29 ) }
    dend_13 { pt3dadd( 22.8879, 128.057, -25.9757, 0.81 ) }
    dend_13 { pt3dadd( 22.8038, 128.287, -26.1745, 0.96 ) }
    dend_13 { pt3dadd( 22.2994, 129.326, -27.3666, 0.29 ) }
    dend_13 { pt3dadd( 21.8299, 130.127, -28.412, 0.29 ) }
    dend_13 { pt3dadd( 21.6363, 130.42, -28.8125, 1.33 ) }
    dend_13 { pt3dadd( 21.1258, 131.088, -29.782, 2.28 ) }
    dend_13 { pt3dadd( 20.4613, 131.878, -30.9865, 2.28 ) }
    dend_13 { pt3dadd( 19.0918, 133.292, -33.3253, 0.81 ) }
    dend_13 { pt3dadd( 18.9055, 133.463, -33.6181, 0.88 ) }
    dend_13 { pt3dadd( 18.4927, 133.802, -34.2133, 0.29 ) }
    dend_13 { pt3dadd( 17.8828, 134.247, -35.0173, 0.37 ) }
    dend_13 { pt3dadd( 17.6355, 134.422, -35.3115, 0.37 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_13 { pt3dadd( 16.6503, 135.174, -36.3989, 0.37 ) }
    dend_13 { pt3dadd( 16.2721, 135.513, -36.8179, 0.37 ) }
    dend_13 { pt3dadd( 15.4413, 136.426, -37.8424, 1.55 ) }
    dend_13 { pt3dadd( 15.123, 136.87, -38.2807, 1.92 ) }
    dend_13 { pt3dadd( 14.4599, 138.287, -39.3748, 0.44 ) }
    dend_13 { pt3dadd( 14.2785, 138.953, -39.7792, 0.29 ) }
    dend_13 { pt3dadd( 14.1943, 139.703, -40.1218, 0.88 ) }
    dend_13 { pt3dadd( 14.1976, 140.104, -40.2861, 0.96 ) }
    dend_13 { pt3dadd( 14.2511, 140.532, -40.4333, 0.96 ) }
    dend_13 { pt3dadd( 14.5407, 141.931, -40.8672, 0.37 ) }
    dend_13 { pt3dadd( 14.8588, 143.092, -41.1838, 0.29 ) }
    dend_13 { pt3dadd( 15.0328, 143.777, -41.4952, 0.29 ) }
    dend_13 { pt3dadd( 15.2623, 144.8, -42.0829, 1.33 ) }
    dend_13 { pt3dadd( 15.3459, 145.253, -42.405, 2.14 ) }
    dend_13 { pt3dadd( 15.3931, 145.593, -42.6837, 2.36 ) }
    dend_13 { pt3dadd( 15.4064, 145.847, -42.9389, 2.36 ) }
    dend_13 { pt3dadd( 15.373, 148.06, -45.5078, 0.29 ) }
    dend_13 { pt3dadd( 15.3325, 148.555, -46.1342, 0.88 ) }
    dend_13 { pt3dadd( 15.2395, 149.126, -46.8549, 1.4 ) }
    dend_13 { pt3dadd( 15.1649, 149.453, -47.2555, 1.55 ) }
    dend_13 { pt3dadd( 14.8675, 150.584, -48.5612, 0.37 ) }
    dend_13 { pt3dadd( 14.7571, 150.995, -48.985, 0.37 ) }
    dend_13 { pt3dadd( 14.5078, 151.897, -49.757, 1.18 ) }
    dend_13 { pt3dadd( 14.3368, 152.52, -50.299, 1.47 ) }
    dend_13 { pt3dadd( 13.9821, 153.868, -51.3703, 0.29 ) }
    dend_13 { pt3dadd( 13.8842, 154.237, -51.6263, 0.44 ) }
    dend_13 { pt3dadd( 13.7413, 154.801, -51.9389, 0.29 ) }
    dend_13 { pt3dadd( 13.4132, 156.061, -52.5585, 1.77 ) }
    dend_13 { pt3dadd( 13.2501, 156.754, -52.8424, 2.06 ) }
    dend_13 { pt3dadd( 13.1232, 157.41, -53.0547, 1.92 ) }
    dend_13 { pt3dadd( 12.892, 158.85, -53.3175, 0.22 ) }
    dend_13 { pt3dadd( 12.8037, 159.528, -53.3921, 0.22 ) }
    dend_13 { pt3dadd( 12.7974, 159.599, -53.3918, 0.22 ) }
    dend_13 { pt3dadd( 12.8118, 160.16, -53.2898, 0.22 ) }
    dend_13 { pt3dadd( 12.8977, 161.045, -53.0566, 0.96 ) }
    dend_13 { pt3dadd( 12.9488, 161.316, -52.979, 1.33 ) }
    dend_13 { pt3dadd( 13.0172, 161.592, -52.8976, 1.33 ) }
    dend_13 { pt3dadd( 13.2209, 162.397, -52.6754, 0.44 ) }
    dend_13 { pt3dadd( 13.6144, 163.891, -52.3201, 0.22 ) }
    dend_13 { pt3dadd( 13.6335, 163.959, -52.3058, 0.22 ) }
    dend_13 { pt3dadd( 13.9928, 165.062, -52.0365, 0.22 ) }
    dend_13 { pt3dadd( 14.2046, 165.653, -51.863, 1.03 ) }
    dend_13 { pt3dadd( 14.3442, 166.007, -51.7489, 1.62 ) }
    dend_13 { pt3dadd( 14.5914, 166.564, -51.5533, 1.62 ) }
    dend_13 { pt3dadd( 14.6526, 166.702, -51.5047, 1.62 ) }
    dend_13 { pt3dadd( 15.4899, 168.547, -50.8438, 0.22 ) }
    dend_13 { pt3dadd( 15.6805, 168.97, -50.6838, 0.66 ) }
    dend_13 { pt3dadd( 15.8822, 169.452, -50.5037, 0.66 ) }
    dend_13 { pt3dadd( 16.0118, 169.852, -50.3706, 0.59 ) }
    dend_13 { pt3dadd( 16.1698, 170.592, -50.1709, 0.22 ) }
    dend_13 { pt3dadd( 16.2088, 170.927, -50.1089, 0.66 ) }
    dend_13 { pt3dadd( 16.1989, 171.302, -50.073, 0.88 ) }
    dend_13 { pt3dadd( 16.157, 171.932, -50.009, 0.44 ) }
    dend_13 { pt3dadd( 16.0442, 172.953, -49.9004, 0.22 ) }
    dend_13 { pt3dadd( 15.9495, 173.689, -49.8229, 0.81 ) }
    dend_13 { pt3dadd( 15.8857, 174.175, -49.7709, 1.18 ) }
    dend_13 { pt3dadd( 15.706, 175.557, -49.6237, 0.22 ) }
    dend_13 { pt3dadd( 15.6971, 175.62, -49.624, 0.22 ) }
    dend_13 { pt3dadd( 15.5247, 176.688, -49.7163, 0.22 ) }
    dend_13 { pt3dadd( 15.4271, 177.358, -49.8214, 1.03 ) }
    dend_13 { pt3dadd( 15.3765, 177.789, -49.9114, 1.33 ) }
    dend_13 { pt3dadd( 15.3393, 178.224, -50.0223, 1.33 ) }
    dend_13 { pt3dadd( 15.2895, 180.627, -50.7524, 0.22 ) }
    dend_13 { pt3dadd( 15.2893, 180.688, -50.7726, 0.22 ) }
    dend_13 { pt3dadd( 15.325, 182.037, -51.2917, 0.22 ) }
    dend_13 { pt3dadd( 15.3476, 182.501, -51.4851, 0.59 ) }
    dend_13 { pt3dadd( 15.3528, 182.56, -51.5101, 0.59 ) }
    dend_13 { pt3dadd( 15.4849, 183.367, -51.8274, 0.74 ) }
    // Section: dend_8, id: dend_8, parent: dend_6 (entry count 68/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -20.7833, -196.578, -49.3997, 0.37 ) }
    dend_8 { pt3dadd( -19.2311, -198.007, -49.3762, 0.37 ) }
    dend_8 { pt3dadd( -18.2535, -198.939, -49.3645, 0.29 ) }
    dend_8 { pt3dadd( -17.066, -200.131, -49.346, 0.29 ) }
    dend_8 { pt3dadd( -16.2343, -201.025, -49.3286, 0.88 ) }
    dend_8 { pt3dadd( -15.964, -201.338, -49.3357, 1.11 ) }
    dend_8 { pt3dadd( -15.9063, -201.409, -49.3391, 1.11 ) }
    dend_8 { pt3dadd( -15.6372, -201.84, -49.3801, 1.11 ) }
    dend_8 { pt3dadd( -15.1563, -202.832, -49.5753, 0.29 ) }
    dend_8 { pt3dadd( -14.878, -203.562, -49.7782, 0.29 ) }
    dend_8 { pt3dadd( -14.5933, -204.428, -50.0396, 0.74 ) }
    dend_8 { pt3dadd( -14.4767, -204.788, -50.17, 0.88 ) }
    dend_8 { pt3dadd( -14.2917, -205.367, -50.398, 0.59 ) }
    dend_8 { pt3dadd( -13.8986, -206.606, -50.9151, 0.29 ) }
    dend_8 { pt3dadd( -13.8487, -206.746, -50.9776, 0.29 ) }
    dend_8 { pt3dadd( -13.5387, -207.495, -51.2865, 0.29 ) }
    dend_8 { pt3dadd( -13.1582, -208.326, -51.5737, 1.11 ) }
    dend_8 { pt3dadd( -12.9084, -208.802, -51.7821, 1.4 ) }
    dend_8 { pt3dadd( -12.6408, -209.281, -51.992, 1.4 ) }
    dend_8 { pt3dadd( -11.7486, -210.779, -52.6086, 0.22 ) }
    dend_8 { pt3dadd( -11.2324, -211.637, -52.9802, 0.22 ) }
    dend_8 { pt3dadd( -10.8713, -212.234, -53.258, 0.81 ) }
    dend_8 { pt3dadd( -9.80441, -213.941, -54.0553, 0.81 ) }
    // Section: dend_7, id: dend_7, parent: dend_6 (entry count 91/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -20.7833, -196.578, -49.3997, 0.96 ) }
    dend_7 { pt3dadd( -20.4639, -197.412, -52.7541, 0.96 ) }
    dend_7 { pt3dadd( -19.9095, -198.72, -57.4033, 0.96 ) }
    dend_7 { pt3dadd( -19.61, -199.399, -59.6532, 0.66 ) }
    dend_7 { pt3dadd( -19.397, -199.877, -61.0863, 1.4 ) }
    dend_7 { pt3dadd( -19.3348, -200.013, -61.4588, 1.4 ) }
    dend_7 { pt3dadd( -18.7775, -201.189, -64.5211, 0.44 ) }
    dend_7 { pt3dadd( -18.5278, -201.587, -65.3909, 0.37 ) }
    dend_7 { pt3dadd( -18.5043, -201.625, -65.4514, 0.37 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_7 { pt3dadd( -17.8138, -202.717, -67.0499, 0.29 ) }
    dend_7 { pt3dadd( -17.4475, -203.224, -67.7643, 1.47 ) }
    dend_7 { pt3dadd( -17.3655, -203.331, -67.9165, 1.77 ) }
    dend_7 { pt3dadd( -17.0798, -203.658, -68.4085, 1.99 ) }
    dend_7 { pt3dadd( -16.5357, -204.229, -69.3797, 1.99 ) }
    dend_7 { pt3dadd( -15.5433, -205.213, -71.1121, 0.44 ) }
    dend_7 { pt3dadd( -14.9981, -205.704, -72.0896, 0.81 ) }
    dend_7 { pt3dadd( -14.2993, -206.263, -73.4748, 0.52 ) }
    dend_7 { pt3dadd( -13.29, -207.058, -75.5326, 0.44 ) }
    dend_7 { pt3dadd( -12.7686, -207.457, -76.6325, 1.11 ) }
    dend_7 { pt3dadd( -12.5289, -207.634, -77.1505, 1.11 ) }
    dend_7 { pt3dadd( -11.223, -208.515, -80.0195, 1.4 ) }
    dend_7 { pt3dadd( -9.78328, -209.397, -83.3569, 1.55 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
    ModelViewParmSubset_2 = new SectionList()
    dend_9 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_15 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_10 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_4 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_1 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_17 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_11 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_6 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_2 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_13 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_9 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_0 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_16 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_3 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_12 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_14 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_5 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_8 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_7 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_18 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_19 OneSecGrp_SectionRef_18.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_19, dend_18, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_17 all.append()
    dend_17 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 4.13603E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.001511  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 8.3E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 4.13603E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 2.29E-4  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -60.295918  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 2.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.999855  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.042115  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0012239999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.001693  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.386953  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 8.0E-6  // units: S cm-2
        e_pas_nml2 = -63.854015  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.5399997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.039862998  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 1.04239E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 5.2299997E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.0054459996  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.503893  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-4  // units: S cm-2
        e_pas_nml2 = -67.1289  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 4.78E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.15074699  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009017  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 4.0E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.0032419998  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 1.74E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bSTUT_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bSTUT_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bSTUT_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bSTUT_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000049))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_15 nseg = 3
    dend_10 nseg = 3
    dend_4 nseg = 5
    dend_1 nseg = 3
    dend_17 nseg = 11
    dend_11 nseg = 5
    dend_6 nseg = 5
    dend_2 nseg = 5
    dend_13 nseg = 5
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bSTUT213_L4_BTC_32b27576a9_0_0


