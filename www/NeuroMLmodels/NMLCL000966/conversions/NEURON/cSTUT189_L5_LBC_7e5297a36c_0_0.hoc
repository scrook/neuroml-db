// Cell: cSTUT189_L5_LBC_7e5297a36c_0_0
/*
{
  "id" : "cSTUT189_L5_LBC_7e5297a36c_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "1.42539, -10.6376, 0.0, 4.61764", "1.16889, -9.52164, 0.0, 8.50261", "0.912393, -8.40563, 0.0, 10.6819", "0.655896, -7.28962, 0.0, 12.4606", "0.399399, -6.17362, 0.0, 14.126", "0.142902, -5.05761, 0.0, 15.1371", "-0.113594, -3.9416, 0.0, 15.8374", "-0.370091, -2.8256, 0.0, 16.1877", "-0.626588, -1.70959, 0.0, 16.953", "-0.883085, -0.593582, 0.0, 17.4193", "-1.13958, 0.522425, 0.0, 17.7718", "-1.39608, 1.63843, 0.0, 17.9686", "-1.65257, 2.75444, 0.0, 17.7521", "-1.90907, 3.87045, 0.0, 17.4043", "-2.16557, 4.98645, 0.0, 17.0101", "-2.42207, 6.10246, 0.0, 16.4966", "-2.67856, 7.21847, 0.0, 15.2605", "-2.93506, 8.33447, 0.0, 13.6816", "-3.19156, 9.45048, 0.0, 11.3092", "-3.44805, 10.5665, 0.0, 8.03973", "-3.70455, 11.6825, 0.0, 4.69987" ]
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-2.69573, 0.925848, -7.18, 1.17", "-2.84534, 1.36247, -7.90097, 1.17", "-2.96254, 1.91352, -8.76146, 1.17", "-3.05854, 3.1791, -10.7002, 1.02", "-3.06419, 3.80977, -11.689, 1.02", "-3.07752, 4.41254, -12.6442, 0.8", "-3.11072, 5.07714, -13.7114, 0.8", "-3.11397, 5.44922, -14.2885, 0.8", "-3.07181, 6.22118, -15.4604, 0.8", "-2.97269, 6.80404, -16.3248, 0.8", "-2.82634, 7.28515, -17.0941, 0.8", "-2.61299, 7.72893, -17.8295, 0.8", "-2.39678, 8.07304, -18.3824, 0.8", "-1.97879, 8.60939, -19.0965, 0.8", "-1.66651, 8.95153, -19.4549, 0.8", "-0.929311, 9.72787, -20.1133, 0.8", "-0.255108, 10.4283, -20.643, 0.58", "0.357467, 11.0793, -21.0867, 0.58", "0.852411, 11.6429, -21.4797, 0.36", "1.24267, 12.1721, -21.8998, 0.22", "1.47339, 12.5109, -22.2317, 0.22", "1.62063, 12.7418, -22.5537, 0.22", "1.70117, 12.8669, -22.827, 0.22", "1.88911, 13.1255, -23.6471, 0.22", "2.13267, 13.563, -25.1584, 0.22", "2.21431, 13.7741, -25.9893, 0.22", "2.24003, 13.8956, -26.5396, 0.22", "2.20813, 14.032, -27.3177, 0.22", "2.04465, 14.144, -28.2443, 0.22", "1.66902, 14.2098, -29.2743, 0.22", "0.984737, 14.1086, -30.406, 0.22", "0.682527, 14.0068, -30.8155, 0.22", "-0.0816393, 13.6482, -31.6496, 0.22", "-0.704389, 13.2747, -32.2258, 0.22", "-1.42359, 12.8077, -32.7727, 0.22", "-2.19304, 12.3094, -33.2649, 0.22", "-2.84441, 11.9168, -33.6491, 0.22", "-3.64861, 11.4667, -34.109, 0.22", "-5.69108, 10.3941, -35.1733, 0.22", "-6.26908, 10.1041, -35.4651, 0.22", "-6.81742, 9.84071, -35.7236, 0.22", "-7.74721, 9.4008, -36.1011, 0.22", "-8.61858, 9.00648, -36.4126, 0.22", "-9.63903, 8.58833, -36.736, 0.22", "-10.0975, 8.44267, -36.8109, 0.22", "-10.6123, 8.2851, -36.8938, 0.22" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999893613021856,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "1.98427, -10.1851, -4.03, 2.04", "2.11404, -11.8383, -3.11599, 2.19", "2.23711, -13.4062, -2.24914, 1.9", "2.35033, -14.8486, -1.4517, 1.9" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999893613021856
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-5.41573, -7.02815, -0.44, 0.51", "-6.36705, -6.81151, 0.696157, 0.51", "-7.77211, -6.28881, 2.21148, 0.51", "-8.91537, -5.78034, 3.3252, 0.51", "-10.741, -4.89025, 4.98245, 1.02", "-11.7301, -4.41752, 5.82759, 0.88", "-13.5332, -3.59757, 7.21564, 0.51", "-15.1381, -2.82683, 8.20928, 0.22", "-16.0519, -2.41723, 8.63097, 0.22", "-16.4785, -2.26315, 8.77892, 0.22", "-18.7849, -1.60093, 9.34256, 0.22", "-20.3069, -1.21516, 9.75464, 0.22", "-21.8292, -0.860354, 10.1597, 0.66", "-23.0245, -0.600185, 10.5216, 0.95", "-24.9018, -0.20941, 11.1181, 0.58", "-26.7378, 0.117493, 11.6975, 0.44", "-28.9627, 0.42424, 12.3751, 0.22", "-29.9295, 0.46807, 12.7001, 0.07", "-31.0191, 0.420874, 13.0393, 0.07", "-32.153, 0.290903, 13.348, 0.58", "-33.6583, -0.0244431, 13.7194, 1.09", "-35.0047, -0.408763, 14.0578, 0.73", "-36.916, -0.939761, 14.479, 0.22", "-37.7417, -1.1134, 14.7094, 0.22", "-38.333, -1.17005, 14.9005, 0.22", "-39.8161, -1.11209, 15.4227, 0.22", "-40.9759, -0.916136, 15.8475, 0.51", "-43.0967, -0.34611, 16.5967, 0.29", "-44.4254, 0.078323, 17.0094, 0.51", "-45.3348, 0.347408, 17.2544, 0.51", "-46.1256, 0.554685, 17.4038, 0.29", "-46.8479, 0.714738, 17.4716, 0.29", "-47.8939, 0.88553, 17.5132, 0.29", "-49.0413, 0.977172, 17.4177, 0.29", "-49.9323, 1.0, 17.3794, 0.58", "-51.0957, 1.00188, 17.4921, 0.73", "-52.019, 1.06018, 17.7099, 0.73", "-53.5099, 1.27154, 18.2281, 0.36", "-54.9808, 1.65008, 18.9261, 0.36", "-57.83, 2.75741, 20.5071, 0.36", "-59.3296, 3.50035, 21.4992, 0.66", "-60.8237, 4.36163, 22.6111, 0.15", "-61.6562, 4.88796, 23.2811, 0.15", "-63.4369, 6.03069, 24.7495, 0.58", "-64.3336, 6.53941, 25.478, 0.22", "-65.5382, 7.05607, 26.249, 0.22", "-65.8276, 7.11254, 26.4283, 0.22", "-66.7058, 7.09957, 27.0632, 0.22", "-67.5293, 6.85999, 27.7273, 0.22", "-68.4969, 5.99117, 28.5262, 0.22", "-69.1665, 5.17347, 29.065, 0.8", "-69.9403, 3.97034, 29.5893, 0.8", "-83.8164, 8.0872, 35.5109, 0.8" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999893613021856,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-5.02573, -8.38115, 0.0299997, 0.73", "-5.65727, -8.43544, 0.102274, 0.73", "-6.39409, -8.40714, 0.177376, 0.73", "-6.98829, -8.32451, 0.244226, 0.66", "-7.78481, -8.18077, 0.382427, 0.66", "-8.29871, -8.08303, 0.506647, 1.17", "-8.708, -8.00634, 0.624329, 1.31", "-9.49204, -7.83923, 0.8476, 0.8", "-10.2638, -7.66674, 1.07191, 0.8", "-11.0178, -7.514, 1.27927, 0.58", "-11.8455, -7.37518, 1.4886, 0.36", "-12.4376, -7.30782, 1.60573, 0.22", "-13.0319, -7.27446, 1.68118, 0.36", "-13.5888, -7.27889, 1.72417, 0.73", "-14.2408, -7.30247, 1.75515, 0.73", "-14.803, -7.31766, 1.76747, 0.36", "-15.2909, -7.32363, 1.78406, 0.58", "-16.0973, -7.32109, 1.86475, 0.8", "-16.912, -7.31988, 2.01828, 0.36", "-17.447, -7.33009, 2.15548, 0.88", "-17.7533, -7.34052, 2.24641, 1.39", "-18.0128, -7.354, 2.32195, 1.39", "-18.552, -7.38286, 2.46363, 0.36", "-18.9937, -7.40092, 2.54432, 0.22", "-19.5529, -7.41646, 2.58207, 0.44", "-20.3763, -7.43323, 2.5832, 0.66", "-20.7627, -7.44045, 2.5821, 0.66", "-21.4327, -7.44808, 2.59791, 0.88", "-22.1853, -7.43727, 2.60365, 0.51", "-22.8704, -7.39873, 2.63014, 0.51", "-23.2684, -7.35591, 2.66288, 0.51", "-23.9353, -7.25225, 2.74991, 0.36", "-24.474, -7.14512, 2.85852, 0.36", "-25.1756, -6.97984, 3.10548, 0.22", "-25.6745, -6.87821, 3.40573, 0.22", "-26.0091, -6.87044, 3.69709, 0.44", "-26.3181, -6.95732, 3.92653, 0.58", "-26.4611, -7.04856, 4.00107, 0.58", "-26.7815, -7.27739, 4.15163, 0.58", "-27.2036, -7.58307, 4.34081, 0.22", "-27.7071, -7.93078, 4.54161, 0.51", "-28.3032, -8.31185, 4.76116, 1.17", "-29.0928, -8.75066, 5.04336, 0.36", "-29.5747, -8.97329, 5.20842, 0.15", "-30.0375, -9.14856, 5.35767, 0.29", "-30.5654, -9.29487, 5.51771, 0.8", "-30.9335, -9.36464, 5.62731, 0.8", "-31.5815, -9.46193, 5.83845, 0.22", "-31.9864, -9.51998, 5.95204, 0.73", "-32.1638, -9.55463, 5.99703, 0.73", "-32.7495, -9.72392, 6.15245, 0.36", "-33.025, -9.84407, 6.24101, 0.29", "-33.3369, -10.0287, 6.38081, 0.15", "-33.7448, -10.3008, 6.60221, 0.15", "-34.0222, -10.4878, 6.78482, 0.15", "-34.2962, -10.6524, 6.98134, 0.15", "-34.7601, -10.9205, 7.34418, 1.02", "-35.1482, -11.1265, 7.62722, 1.31", "-35.5147, -11.3036, 7.87021, 0.66", "-35.8004, -11.445, 8.05024, 0.66", "-36.1861, -11.6704, 8.27636, 0.22", "-36.52, -11.9185, 8.45808, 0.07", "-37.0019, -12.4101, 8.72472, 0.51", "-37.2338, -12.7483, 8.88813, 0.51", "-37.5275, -13.3749, 9.16745, 0.22", "-37.6294, -13.6882, 9.29794, 0.22", "-37.7115, -14.048, 9.45057, 0.22", "-37.7878, -14.4389, 9.63077, 0.66", "-37.86, -14.9414, 9.90074, 0.66", "-37.9058, -15.3181, 10.1181, 0.44", "-37.9546, -15.5292, 10.2499, 0.07", "-38.2228, -15.5929, 10.4113, 0.07", "-38.6198, -15.647, 10.6298, 0.58", "-38.9544, -15.6789, 10.8002, 0.8", "-39.0922, -15.6966, 10.8668, 0.8", "-39.5542, -15.7849, 11.1018, 0.07", "-39.9925, -15.926, 11.3234, 0.36", "-40.3989, -16.1132, 11.5091, 0.22", "-40.6131, -16.2326, 11.5879, 0.22", "-40.9883, -16.4266, 11.6865, 0.8", "-41.2133, -16.5155, 11.7393, 0.95", "-41.7207, -16.6376, 11.8375, 0.36", "-42.1691, -16.6474, 11.9113, 0.58", "-42.6055, -16.6171, 11.9761, 0.58", "-43.0516, -16.5521, 12.0464, 0.36", "-43.5993, -16.4183, 12.1424, 0.15", "-43.9029, -16.3207, 12.2042, 0.15", "-44.248, -16.1588, 12.2944, 0.36", "-48.497, -17.7677, 13.9452, 0.36" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999893613021856,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "5.89427, 4.96435, 3.64, 1.17", "6.67591, 5.49852, 3.45093, 0.22", "7.4043, 5.93961, 3.26782, 1.17", "8.05254, 6.28795, 3.10499, 1.17", "8.9529, 6.71934, 2.88369, 1.17", "10.3961, 7.30336, 2.54263, 0.15", "10.6701, 7.40105, 2.48135, 0.15", "11.393, 7.59756, 2.41209, 0.15", "11.8285, 7.70036, 2.43517, 0.15", "12.2865, 7.81923, 2.54484, 0.73", "12.9703, 8.07414, 2.90933, 1.02", "13.434, 8.36772, 3.32596, 1.02", "14.7481, 9.68083, 4.76873, 0.66", "15.0948, 10.1224, 5.20236, 0.44", "15.5151, 10.7225, 5.73375, 0.22", "15.7491, 11.069, 6.01115, 0.22", "16.1719, 11.5787, 6.32766, 0.22", "16.7194, 12.0459, 6.48584, 0.22", "17.573, 12.5939, 6.49109, 0.95", "18.0242, 12.8435, 6.48283, 1.53", "18.5331, 13.114, 6.48979, 1.53", "20.1551, 14.024, 6.54937, 0.51", "20.8702, 14.4747, 6.58913, 0.51", "21.7233, 15.1266, 6.65399, 1.02", "22.6958, 16.0222, 6.75797, 0.36", "23.4589, 16.7801, 6.86555, 0.36", "24.3043, 17.6732, 7.00936, 0.95", "24.9503, 18.4143, 7.1435, 0.95", "25.6929, 19.287, 7.32773, 0.73", "26.6927, 20.4776, 7.58377, 0.29", "27.8213, 21.8769, 7.86358, 0.29", "28.3326, 22.5462, 8.01959, 0.29", "28.7402, 23.1249, 8.2102, 1.02", "29.3641, 24.1231, 8.61674, 1.09", "29.5399, 24.4566, 8.79075, 1.09", "30.0081, 25.5159, 9.51895, 0.51", "30.4161, 26.5092, 10.3927, 0.22", "30.7713, 27.2598, 11.156, 0.66", "31.1336, 27.8031, 11.8463, 0.66", "31.776, 28.4954, 12.895, 0.44", "32.5714, 29.1155, 14.0611, 0.15", "33.2716, 29.43, 14.9592, 0.15", "33.7721, 29.5418, 15.5, 0.95", "35.4821, 29.6301, 17.1397, 0.22", "36.1299, 29.5892, 17.693, 0.29", "36.5425, 29.5484, 17.9876, 0.29", "37.6626, 29.5165, 18.6769, 0.29", "37.9996, 29.5536, 18.8876, 0.29", "38.2815, 29.6135, 19.0755, 0.29", "38.6868, 30.0652, 19.3838, 0.58", "39.1878, 31.059, 19.8971, 0.44", "39.6423, 32.1809, 20.4114, 0.15", "39.8625, 32.9253, 20.7084, 0.73", "47.6506, 40.5174, 23.9631, 0.73" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999893613021856,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "3.96427, 7.0861, 1.49, 0.58", "3.96002, 7.52471, 1.84124, 0.44", "3.99422, 7.9769, 2.20662, 0.22", "4.06441, 8.23709, 2.41584, 0.22", "4.30059, 8.56466, 2.65798, 0.22", "4.43338, 8.67337, 2.73309, 0.22", "4.82161, 8.90759, 2.92415, 0.22", "5.06561, 9.003, 3.01569, 0.66", "5.58582, 9.13666, 3.16586, 1.09", "6.48851, 9.31101, 3.30989, 0.15", "7.03382, 9.40462, 3.36491, 0.15", "7.73289, 9.54127, 3.40778, 0.8", "8.08893, 9.63219, 3.41872, 1.09", "8.8323, 9.91446, 3.45442, 0.29", "9.71889, 10.4403, 3.45391, 0.8", "10.0213, 10.6838, 3.43602, 0.8", "10.4783, 11.1348, 3.38519, 0.44", "10.8792, 11.5848, 3.3255, 0.66", "11.4481, 12.2548, 3.25132, 1.24", "12.1393, 13.1077, 3.14615, 0.29", "12.6759, 13.7448, 3.07044, 0.58", "13.3643, 14.4717, 2.94715, 0.22", "13.8556, 14.9205, 2.87352, 0.8", "14.4792, 15.4361, 2.83177, 0.8", "15.0488, 15.8862, 2.86613, 0.29", "15.4526, 16.201, 2.95189, 0.29", "15.9154, 16.5797, 3.0944, 0.15", "16.6737, 17.201, 3.38625, 0.73", "17.5186, 17.9182, 3.75704, 0.07", "18.0979, 18.4758, 4.02545, 1.24", "18.2646, 18.6647, 4.10286, 1.24", "18.8242, 19.4348, 4.33812, 0.15", "18.9939, 19.7184, 4.39415, 0.15", "19.1601, 20.0414, 4.42024, 0.44", "19.603, 20.9573, 4.42135, 0.44", "20.009, 21.8007, 4.40427, 0.15", "20.2113, 22.216, 4.3981, 0.73", "20.4562, 22.7137, 4.39383, 1.31", "20.6823, 23.145, 4.39333, 1.02", "21.1927, 24.0175, 4.39108, 0.15", "21.5444, 24.5418, 4.38955, 0.36", "21.7641, 24.8357, 4.37071, 0.36", "22.0128, 25.1588, 4.33725, 0.51", "22.4479, 25.7287, 4.27928, 0.22", "22.7716, 26.1814, 4.23773, 0.36", "23.0118, 26.5587, 4.21451, 0.8", "23.3992, 27.2374, 4.21048, 0.8", "23.6938, 27.7809, 4.24009, 0.07", "23.9041, 28.1505, 4.28556, 0.07", "24.0814, 28.4434, 4.34144, 0.07", "24.2832, 28.7143, 4.4106, 0.07", "24.7138, 29.1851, 4.54872, 0.44", "25.0616, 29.4877, 4.61242, 0.44", "25.6396, 29.9306, 4.64075, 0.66", "26.1367, 30.3126, 4.62854, 1.24", "26.4628, 30.5881, 4.60528, 1.53", "26.5604, 30.6841, 4.59165, 1.53", "27.2743, 31.5534, 4.45606, 0.22", "27.5696, 31.997, 4.38969, 0.22", "27.8366, 32.4847, 4.32123, 0.36", "28.1376, 33.1337, 4.2184, 0.29", "28.3814, 33.7641, 4.14339, 0.29", "28.5938, 34.4613, 4.0862, 0.29", "28.7064, 35.0326, 4.06258, 0.88", "28.7439, 35.3927, 4.05366, 0.88", "28.7806, 36.3264, 4.03101, 0.07", "28.7771, 37.1298, 4.00378, 0.29", "28.7676, 37.7642, 3.98054, 0.29", "28.7818, 38.2406, 3.95373, 0.29", "28.8986, 39.048, 3.88632, 0.07", "28.9965, 39.3777, 3.82912, 0.07", "29.191, 39.8133, 3.71428, 0.29", "29.4916, 40.3864, 3.51904, 0.88", "29.8701, 41.0427, 3.29674, 0.51", "30.1811, 41.6124, 3.12402, 0.15", "30.488, 42.3042, 2.92563, 0.15", "30.6352, 42.7905, 2.80458, 0.15", "30.7781, 43.6305, 2.61583, 1.31", "30.8067, 44.1209, 2.53782, 1.61", "30.8034, 44.9835, 2.4497, 1.82", "30.7828, 46.0134, 2.36249, 0.29", "30.7828, 46.5027, 2.32288, 0.22", "30.8162, 47.1714, 2.24846, 0.29", "30.9287, 48.146, 2.11141, 0.07", "31.0033, 48.4775, 2.05157, 0.07", "31.3248, 49.3474, 1.8692, 0.07", "31.6755, 50.033, 1.77098, 0.22", "32.0531, 50.6337, 1.723, 1.31", "32.4965, 51.2252, 1.74706, 0.95", "33.2072, 52.0934, 1.84885, 0.15", "33.5955, 52.5663, 1.95244, 0.15", "34.3328, 53.4645, 2.23951, 0.8", "34.8246, 54.0511, 2.47186, 1.75", "35.8126, 55.2023, 2.97266, 0.15", "36.0416, 55.4629, 3.09261, 0.15", "36.4773, 55.9456, 3.30564, 0.15", "36.6977, 56.1843, 3.37895, 0.15", "36.9688, 56.4713, 3.42076, 0.15", "37.507, 57.0536, 3.45025, 0.44", "37.835, 57.4388, 3.43829, 0.66", "38.6084, 58.4114, 3.44711, 0.15", "39.1239, 59.0972, 3.47172, 0.8", "39.2614, 59.2917, 3.48801, 0.8", "39.6537, 59.8976, 3.55578, 0.15", "40.1169, 60.6759, 3.67346, 0.07", "40.6002, 61.5308, 3.83134, 1.68", "40.9854, 62.2185, 4.0009, 1.46", "41.5206, 63.102, 4.26253, 0.15", "41.7463, 63.4266, 4.36354, 0.51", "41.9099, 63.6325, 4.43397, 0.51", "42.2971, 64.0691, 4.58618, 0.15", "42.8088, 64.6289, 4.75649, 0.36", "43.0954, 64.9404, 4.85247, 0.36", "43.4349, 65.3226, 4.95977, 0.22", "43.7598, 65.7118, 5.0675, 0.22", "43.9744, 66.0011, 5.13868, 0.22", "44.1533, 66.2701, 5.19515, 0.22", "44.2876, 66.4881, 5.22764, 0.22", "44.377, 66.6346, 5.2493, 0.22", "44.5772, 66.9531, 5.30213, 0.22", "44.8418, 67.355, 5.36819, 0.22", "45.3404, 68.1023, 5.46957, 1.61", "45.5783, 68.4427, 5.50875, 1.61", "46.3264, 69.5118, 5.60719, 0.29", "46.7709, 70.1524, 5.68247, 0.07", "47.2023, 70.791, 5.7669, 0.66", "47.604, 71.4517, 5.86449, 0.66", "47.8547, 71.9344, 5.94432, 0.66", "48.2278, 72.8099, 6.1023, 0.07", "48.5565, 73.7711, 6.28146, 0.8", "48.6199, 73.998, 6.32491, 1.17", "48.8204, 74.8328, 6.49689, 0.07", "48.9477, 75.3949, 6.61652, 0.22", "49.1428, 76.2763, 6.78232, 0.07", "49.3018, 76.9825, 6.88697, 0.58", "49.3323, 77.1261, 6.90006, 0.58", "49.4884, 77.9888, 6.976, 0.22", "49.5708, 78.5914, 7.02168, 0.22", "49.5806, 79.018, 7.05151, 0.22", "49.4913, 79.7369, 7.11045, 0.07", "49.4051, 80.1349, 7.14626, 0.07", "49.1857, 80.8434, 7.21314, 0.66", "49.0528, 81.117, 7.24082, 0.95", "48.5621, 81.8906, 7.32692, 0.07", "48.3399, 82.1812, 7.36096, 0.29", "52.0311, 87.3679, 8.15873, 0.29" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999893613021856,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "0.774266, 9.4846, 1.41, 0.95", "0.41852, 10.6515, 1.63843, 0.95", "0.0657147, 11.8086, 1.86497, 0.95", "-0.472062, 13.5725, 2.21029, 1.17", "-0.748529, 14.4793, 2.38781, 1.39" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999893613021856
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-3.28573, 8.63385, -0.0300002, 0.8", "-3.69556, 9.06915, 0.10196, 0.88", "-4.70383, 10.2275, 0.464771, 0.88", "-5.37042, 11.0638, 0.72138, 0.88", "-6.21397, 12.2077, 1.03035, 0.88", "-6.79448, 13.0302, 1.20617, 0.44", "-7.29953, 13.7552, 1.32484, 0.44", "-7.70949, 14.378, 1.39393, 0.44", "-7.95809, 14.7699, 1.40949, 0.44", "-8.35658, 15.2859, 1.3436, 0.44", "-8.88153, 15.8208, 1.19668, 0.66", "-9.59837, 16.4006, 1.01898, 1.02", "-10.2094, 16.8147, 0.937497, 1.53", "-10.7348, 17.136, 0.948097, 1.53", "-12.38, 18.1076, 1.14805, 0.66", "-13.3451, 18.6738, 1.35912, 0.73", "-14.5398, 19.4032, 1.74306, 1.09", "-15.6662, 20.1698, 2.2445, 0.22", "-16.6998, 20.9766, 2.86423, 0.22", "-16.9295, 21.2106, 3.06021, 0.22", "-16.9896, 21.3201, 3.15315, 0.22", "-17.1276, 21.7398, 3.4451, 0.22", "-17.3649, 22.7681, 3.99628, 1.09", "-17.4358, 23.0653, 4.10963, 1.46", "-17.659, 23.6792, 4.29229, 1.46", "-18.2692, 25.0134, 4.73068, 0.07", "-18.6053, 25.634, 4.95138, 0.66", "-18.8633, 26.0506, 5.10132, 1.24", "-18.9913, 26.2381, 5.16738, 1.24", "-19.6753, 27.1997, 5.49758, 0.51", "-20.2796, 28.0251, 5.76379, 0.51", "-20.8648, 28.851, 5.98644, 0.58", "-21.6282, 30.027, 6.25681, 0.44", "-22.3816, 31.2303, 6.51621, 0.44", "-22.8672, 31.994, 6.66876, 0.88", "-23.3848, 32.7503, 6.80413, 0.88", "-24.3695, 34.0458, 7.02429, 0.36", "-24.9026, 34.711, 7.14049, 0.36", "-25.4421, 35.3635, 7.25939, 0.36", "-26.0675, 36.1255, 7.39989, 0.8", "-26.9436, 37.2455, 7.60106, 0.58", "-27.4355, 37.9848, 7.7136, 0.36", "-27.8977, 38.8912, 7.81595, 0.8", "-28.2731, 40.0086, 7.88674, 0.58", "-28.4022, 40.8966, 7.89283, 1.31", "-28.3891, 41.8288, 7.85027, 1.31", "-28.1797, 43.4254, 7.72754, 0.44", "-28.023, 44.3075, 7.64128, 0.36", "-27.8704, 45.0501, 7.56459, 0.66", "-27.5356, 46.4138, 7.41436, 0.29", "-27.1403, 47.7992, 7.21244, 0.51", "-26.6168, 49.4497, 6.91809, 0.15", "-26.442, 49.9535, 6.83399, 0.15", "-26.2719, 50.3867, 6.7683, 0.15", "-25.9526, 51.107, 6.67132, 0.58", "-25.2868, 52.3809, 6.54268, 0.22", "-24.879, 53.0627, 6.50081, 0.22", "-24.0742, 54.365, 6.50028, 0.8", "-23.5766, 55.2603, 6.56046, 0.15", "-23.2465, 55.975, 6.6048, 0.15", "-23.0778, 56.4959, 6.65184, 0.15", "-22.8445, 57.5744, 6.80379, 0.36", "-22.6435, 58.8024, 6.96105, 0.8", "-22.4945, 59.8806, 7.06478, 0.58", "-22.3339, 61.4408, 7.22725, 0.73", "-22.2259, 62.6938, 7.35468, 0.44", "-22.1464, 63.8268, 7.44964, 0.22", "-22.0945, 64.7261, 7.51948, 0.73", "-22.0123, 65.4423, 7.53723, 0.73", "-24.5241, 74.1059, 7.69707, 0.73" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999893613021856,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "-3.70455, 11.6825, 0.0, 0.846941", "-7.06447, 26.3014, 0.0, 0.846941", "-10.4244, 40.9202, 0.0, 0.846941" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "2.35033, -14.8486, -1.4517, 0.8", "3.59022, -14.9949, -1.10217, 0.8", "4.80396, -15.2564, -0.844893, 0.58", "5.42835, -15.4521, -0.766969, 0.58", "5.91844, -15.6281, -0.722244, 0.58", "6.7635, -15.9502, -0.656408, 0.51", "7.62486, -16.2828, -0.597861, 1.17", "8.48678, -16.6249, -0.582487, 1.17", "10.5154, -17.4362, -0.590845, 0.66", "11.4527, -17.8225, -0.591851, 0.66", "12.4216, -18.2173, -0.589508, 0.66", "13.1799, -18.5145, -0.584113, 0.66", "14.4859, -18.9747, -0.568383, 1.39", "15.6864, -19.3349, -0.547153, 1.53" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "2.35033, -14.8486, -1.4517, 1.02", "2.86312, -16.8679, -1.71717, 1.02", "3.38789, -18.5456, -1.79457, 0.88", "3.93228, -19.8967, -1.78611, 1.02", "4.49823, -21.057, -1.73863, 0.8", "5.31194, -22.3693, -1.60638, 0.51", "6.34506, -23.7511, -1.38893, 0.51", "7.15549, -24.4914, -1.14393, 0.51", "8.14963, -25.1956, -0.769604, 0.73", "8.74067, -25.5711, -0.500923, 0.73", "10.1578, -26.4429, 0.179679, 0.44", "10.7757, -26.7854, 0.480749, 0.44", "11.4589, -27.1596, 0.803379, 0.44", "12.385, -27.7512, 1.242, 0.44", "13.3662, -28.5723, 1.80835, 1.31", "13.9471, -29.2273, 2.20102, 1.68" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-0.748529, 14.4793, 2.38781, 0.44", "-0.098487, 15.2951, 3.39664, 0.44", "0.125124, 15.5362, 3.6211, 0.44", "1.32879, 16.6994, 4.45999, 0.66", "1.9826, 17.2927, 4.81892, 0.95", "3.17294, 18.3225, 5.35457, 0.51", "4.5109, 19.398, 5.91591, 0.51", "6.14667, 20.5989, 6.54642, 0.22", "7.44145, 21.5311, 7.01855, 0.88", "8.19456, 22.0907, 7.28766, 1.09", "9.05698, 22.7896, 7.63674, 0.73", "10.5733, 24.2248, 8.32894, 0.44", "11.8252, 25.7302, 9.10888, 0.22", "12.0215, 26.2428, 9.45468, 0.22", "11.8805, 27.213, 10.1339, 0.95", "11.5484, 27.8844, 10.5926, 0.95", "10.7595, 29.0259, 11.278, 0.22", "9.89952, 30.1627, 11.8061, 0.22", "9.31463, 31.0426, 12.1134, 0.22", "9.09884, 31.4954, 12.2379, 0.22", "8.86412, 32.2009, 12.379, 0.22", "8.5544, 33.5718, 12.592, 0.73", "8.36977, 35.0833, 12.7099, 1.02", "8.30985, 36.7544, 12.7161, 0.44", "8.33708, 37.757, 12.6599, 0.15", "8.39483, 38.6955, 12.5745, 0.15", "8.50428, 39.5809, 12.4681, 0.15", "8.75654, 40.8293, 12.3085, 0.58", "9.13283, 42.3134, 12.1292, 0.29", "9.51544, 43.8093, 12.0263, 0.58", "9.69997, 44.5184, 12.0146, 0.58", "10.1116, 46.0994, 12.1009, 0.22", "10.3451, 47.1438, 12.2413, 0.22", "10.6211, 48.6116, 12.5257, 0.22", "10.8725, 50.236, 12.8467, 0.8", "11.0348, 51.4143, 13.0556, 1.02", "11.2769, 53.2543, 13.288, 1.02", "11.5402, 55.4639, 13.4543, 0.07", "11.723, 57.021, 13.5567, 0.95", "11.9539, 58.7077, 13.7299, 0.44", "12.1316, 59.9155, 13.8942, 0.44", "12.2819, 61.2575, 14.181, 0.44", "12.3801, 62.5528, 14.5397, 0.15", "12.4533, 64.3442, 15.1348, 0.73", "12.497, 66.5186, 15.9585, 1.31", "12.5293, 67.5928, 16.4012, 1.82", "12.6246, 69.6693, 17.2539, 0.73", "12.7139, 70.8322, 17.6961, 0.51", "12.9443, 72.7117, 18.2364, 0.29", "13.1049, 73.5807, 18.3842, 0.29", "13.3763, 74.544, 18.454, 0.29", "13.7918, 75.4918, 18.4864, 0.73", "14.2084, 76.1775, 18.5135, 0.73", "15.1698, 77.4881, 18.5992, 0.22", "16.1935, 78.74, 18.7389, 0.66", "17.3671, 80.2016, 18.9582, 0.51", "18.4494, 81.7128, 19.2514, 0.36", "19.1077, 82.7977, 19.4895, 0.36", "19.4319, 83.5909, 19.6638, 0.8", "19.7243, 84.9478, 19.948, 0.58", "19.8096, 86.2988, 20.1972, 0.44", "19.7485, 88.1894, 20.5167, 0.44", "19.6108, 89.7724, 20.7336, 0.44", "19.3491, 92.334, 20.9876, 0.36", "19.2061, 93.7187, 21.0912, 0.22", "19.1392, 94.9481, 21.1395, 0.15", "19.1188, 95.6826, 21.1546, 0.15", "19.1538, 96.6878, 21.1528, 1.02", "19.2043, 97.1186, 21.1515, 1.02", "19.6931, 99.0406, 21.1414, 0.51", "20.2546, 100.897, 21.1301, 0.29", "20.8195, 112.852, 22.3272, 0.29" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-0.748529, 14.4793, 2.38781, 0.29", "-0.212558, 15.68, 1.74662, 0.29", "0.176844, 16.3853, 1.41847, 0.88", "0.550702, 16.9584, 1.17093, 1.02", "1.25315, 17.7213, 0.917089, 0.58", "1.67296, 18.0556, 0.859187, 0.22", "2.2508, 18.4591, 0.828617, 0.8", "2.86127, 18.8379, 0.883485, 1.31", "3.19078, 19.0267, 0.914788, 1.31", "4.71817, 19.8973, 1.04395, 0.29", "5.97819, 20.6431, 1.14967, 0.51", "6.43612, 20.9997, 1.18039, 0.51", "6.97534, 21.6847, 1.19246, 0.07", "7.30867, 22.622, 1.14939, 0.07", "7.42966, 23.5663, 1.07113, 0.66", "7.44817, 24.0083, 1.02621, 0.66", "7.51768, 25.4657, 0.927361, 0.29", "7.58762, 26.173, 0.931427, 0.07", "7.71036, 26.9562, 0.984104, 0.88", "7.85591, 27.5254, 1.05174, 0.88", "8.54136, 29.4606, 1.2312, 0.07", "8.98527, 30.5019, 1.3005, 1.46", "9.41625, 31.357, 1.3386, 1.97", "9.53311, 31.5695, 1.34894, 1.97", "10.4067, 33.0836, 1.47136, 0.29", "11.0391, 34.1431, 1.61746, 0.88", "11.615, 35.0978, 1.75914, 0.29", "11.9412, 35.6523, 1.84767, 0.29", "12.3844, 36.5076, 2.02915, 0.29", "12.7414, 37.3346, 2.27512, 0.29", "13.0317, 38.1939, 2.59946, 0.29", "13.2807, 39.2687, 3.02948, 1.31", "13.3929, 40.363, 3.44583, 1.53", "13.3916, 42.0144, 4.03501, 0.73", "13.3269, 42.8087, 4.28857, 0.36", "13.251, 43.368, 4.45238, 0.66", "13.0257, 44.6245, 4.82344, 0.29", "12.7364, 46.0828, 5.33541, 0.22", "12.5948, 46.8506, 5.60448, 0.22", "12.5491, 47.249, 5.7542, 0.22", "12.58, 47.6053, 5.92231, 0.22", "12.8076, 48.0636, 6.1586, 0.22", "13.446, 48.5852, 6.41109, 0.22", "14.3332, 49.1239, 6.67099, 0.58", "15.4467, 49.6955, 6.94671, 0.36", "16.4357, 50.1412, 7.16855, 0.36", "18.109, 50.8014, 7.48802, 1.46", "19.25, 51.1989, 7.63394, 2.12" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "-10.4244, 40.9202, 0.0, 0.15", "-13.7843, 55.5391, 0.0, 0.15", "-17.1442, 70.1579, 0.0, 0.15" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "15.6864, -19.3349, -0.547153, 0.51", "16.7917, -18.3129, 0.0953102, 0.51", "17.4337, -17.605, 0.580529, 0.51", "17.7925, -17.0891, 0.917168, 0.36", "17.962, -16.769, 1.10616, 0.36", "18.2062, -16.2128, 1.43569, 0.36", "18.4346, -15.6652, 1.76961, 0.36", "18.6257, -15.0493, 2.15727, 0.36", "18.8831, -14.3428, 2.62672, 0.58", "19.2202, -13.6856, 3.09854, 0.44", "19.7285, -13.1383, 3.55005, 0.36", "20.2498, -12.8054, 3.91022, 0.36", "20.764, -12.5955, 4.20627, 0.36", "21.9016, -12.2415, 4.82126, 0.8", "22.8004, -12.0013, 5.28289, 0.8", "24.3147, -11.6079, 6.00772, 0.58", "25.4266, -11.2919, 6.49319, 0.58", "26.3903, -10.9921, 6.88393, 0.88", "27.4389, -10.6428, 7.27921, 0.58", "28.2838, -10.3504, 7.5672, 0.8", "29.3855, -9.97254, 7.8935, 0.51", "30.4035, -9.65366, 8.1377, 0.51", "31.5083, -9.38191, 8.32642, 0.51", "32.324, -9.22901, 8.44341, 0.51", "33.1497, -9.10127, 8.5354, 0.51", "33.7555, -8.9993, 8.60532, 0.51", "34.5874, -8.8, 8.73576, 0.51", "35.1279, -8.48149, 8.87623, 0.29", "35.4405, -8.10789, 9.00379, 0.29", "35.9574, -7.25993, 9.25887, 0.36", "36.3456, -6.5397, 9.46024, 0.73", "36.7383, -5.77943, 9.66579, 0.73", "37.5241, -4.29555, 10.073, 0.22", "38.1283, -3.26488, 10.366, 0.22", "38.8479, -2.23668, 10.6744, 0.88", "39.5752, -1.43868, 10.9321, 0.29", "39.8743, -1.1998, 11.0144, 0.29", "40.4559, -0.884432, 11.1275, 0.15", "41.0521, -0.711697, 11.2245, 0.15", "41.7546, -0.569383, 11.3471, 0.15", "42.2666, -0.481069, 11.4753, 0.15", "42.7805, -0.360289, 11.6419, 0.15", "43.5014, -0.132502, 11.9255, 0.58", "44.6882, 0.337257, 12.4399, 0.15", "46.0286, 0.951098, 13.0459, 0.15", "46.8888, 1.38825, 13.4423, 0.15", "47.968, 1.95066, 13.9344, 0.15", "49.2867, 2.60785, 14.5308, 0.95", "49.7888, 2.84799, 14.7588, 0.95", "50.705, 3.29665, 15.176, 0.22", "51.4395, 3.68653, 15.4847, 0.73", "52.1699, 4.09261, 15.7353, 0.29", "53.1573, 4.63714, 16.0384, 0.29", "61.5557, 10.681, 18.1175, 0.29" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "15.6864, -19.3349, -0.547153, 0.66", "16.1953, -20.0096, -0.791512, 0.66", "17.1099, -21.1163, -1.13352, 0.22", "17.6209, -21.6815, -1.29531, 0.58", "18.3265, -22.3683, -1.47642, 0.07", "18.7968, -22.7108, -1.53218, 0.15", "19.0834, -22.7756, -1.47047, 0.15", "19.7639, -22.5809, -1.05375, 0.15", "19.9834, -22.4841, -0.881049, 0.15", "20.5708, -22.186, -0.346145, 0.15", "21.5728, -21.6889, 0.630846, 0.8", "22.745, -21.2444, 1.78867, 0.51", "23.3336, -21.1445, 2.37787, 0.51", "23.5623, -21.1664, 2.60468, 0.51", "23.9403, -21.3206, 2.97008, 0.51", "24.471, -21.7268, 3.43971, 0.22", "25.1402, -22.442, 3.95291, 0.44", "25.855, -23.2799, 4.41995, 0.07", "26.2093, -23.7025, 4.63221, 0.07", "26.7038, -24.2698, 4.90486, 0.36", "27.0304, -24.6325, 5.0731, 0.36", "27.4719, -25.1119, 5.31059, 0.36", "28.1088, -25.7855, 5.62209, 0.07", "33.5047, -28.188, 9.39333, 0.07" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "13.9471, -29.2273, 2.20102, 0.22", "14.6815, -29.8969, 1.39232, 0.22", "15.1302, -30.2445, 1.06032, 0.22", "15.5762, -30.5176, 0.877653, 0.22", "16.7964, -31.0917, 0.740454, 0.22", "18.1283, -31.5604, 0.898385, 0.51", "19.2647, -31.8577, 1.0224, 0.15", "21.0619, -32.1211, 1.17277, 0.44", "22.1436, -32.2037, 1.24976, 0.44", "23.0329, -32.2486, 1.26202, 0.15", "24.1543, -32.2796, 1.24764, 0.29", "25.7845, -32.3042, 1.10866, 0.22", "27.1177, -32.3288, 0.917754, 0.66", "28.19, -32.3593, 0.674755, 0.36", "29.5525, -32.4269, 0.330375, 0.88", "31.0275, -32.5405, 0.00613189, 0.22", "31.7685, -32.6192, -0.10092, 0.22", "33.1536, -32.7878, -0.0625347, 0.22", "33.8092, -32.8529, 0.0515992, 1.09", "34.3144, -32.8874, 0.218201, 1.24", "35.5011, -32.9413, 0.747742, 1.09", "36.1789, -32.9804, 1.1128, 0.51", "37.2064, -33.0599, 1.6778, 0.44", "37.9431, -33.1351, 2.0484, 0.44", "39.2651, -33.3027, 2.70835, 0.44", "40.3751, -33.4909, 3.26746, 0.29", "41.5349, -33.7462, 3.84573, 0.29", "42.506, -34.0169, 4.3385, 0.73", "43.6298, -34.3796, 4.88403, 0.51", "44.5094, -34.6717, 5.30544, 0.29", "45.5707, -34.9873, 5.79314, 0.29", "46.2023, -35.1404, 6.08026, 0.29", "47.2144, -35.2976, 6.50312, 0.29", "48.2585, -35.3725, 6.93854, 0.88", "49.3547, -35.3765, 7.38288, 0.44", "50.3861, -35.3336, 7.78649, 1.09", "51.0778, -35.2888, 8.04459, 1.31", "52.0366, -35.2653, 8.42056, 0.15", "52.4189, -35.2761, 8.57904, 0.15", "52.9447, -35.3226, 8.81348, 0.15", "53.5167, -35.3828, 9.06532, 0.15", "54.005, -35.4181, 9.31312, 0.15", "55.2569, -35.4002, 9.98249, 0.22", "55.7614, -35.3317, 10.2598, 0.22", "56.8824, -35.0312, 10.8732, 0.95", "57.772, -34.6759, 11.3254, 0.51", "58.6654, -34.2381, 11.7133, 0.22", "59.3664, -33.8453, 11.9958, 0.22", "59.8745, -33.549, 12.1752, 0.07", "60.3518, -33.2945, 12.3213, 0.22", "61.356, -32.7946, 12.618, 0.51", "62.9354, -32.0842, 13.0093, 0.36", "63.6125, -31.8018, 13.1299, 0.73", "64.5413, -31.4292, 13.2414, 0.73", "65.7168, -30.9747, 13.2785, 0.07", "66.077, -30.8327, 13.2478, 0.07", "66.7624, -30.5657, 13.0864, 0.07", "67.6369, -30.3756, 12.7797, 0.07", "68.2624, -30.3943, 12.4756, 0.07", "69.0435, -30.5161, 12.093, 0.07", "69.6717, -30.6658, 11.7901, 0.88", "70.2884, -30.8524, 11.5751, 0.88", "72.0198, -31.4774, 11.2497, 0.07", "74.4458, -32.4519, 11.1008, 0.66", "75.2741, -32.8054, 11.0799, 0.22", "76.0828, -33.1574, 11.0785, 0.07", "78.2644, -34.1177, 11.065, 0.07", "79.2206, -34.5325, 11.0503, 0.07", "79.6341, -34.7286, 11.0446, 0.07", "81.1283, -35.5796, 11.1181, 0.66", "81.6277, -35.8922, 11.0228, 0.66", "82.1776, -36.2241, 10.8373, 0.07", "82.6689, -36.5005, 10.6104, 0.07", "83.2595, -36.8217, 10.3637, 0.07", "83.9892, -37.2085, 10.1639, 0.22", "84.8133, -37.6407, 10.0553, 0.29", "85.5164, -37.9864, 9.94531, 0.29", "86.3334, -38.3597, 9.82715, 0.29", "87.1201, -38.6968, 9.70046, 0.29", "88.2255, -39.143, 9.50364, 0.51", "89.008, -39.4408, 9.35215, 0.44", "90.4318, -39.9828, 9.06861, 0.8", "91.7034, -40.4616, 8.82982, 0.29", "92.4133, -40.7207, 8.71477, 0.58", "92.8968, -40.8876, 8.64632, 0.29", "94.0073, -41.2537, 8.56256, 0.36", "94.648, -41.4678, 8.50719, 0.36", "95.3309, -41.6954, 8.42084, 0.58", "95.9234, -41.8875, 8.27919, 0.58", "96.7106, -42.158, 8.04701, 0.07", "97.4643, -42.424, 7.73428, 0.07", "99.3202, -43.0585, 6.76422, 0.29", "100.34, -43.3613, 6.16575, 0.07", "101.242, -43.6077, 5.59266, 0.95", "102.026, -43.8019, 5.04071, 0.44", "102.804, -44.0133, 4.41866, 0.07", "103.205, -44.1367, 4.09583, 0.07", "103.528, -44.2653, 3.84915, 0.07", "103.697, -44.3585, 3.69262, 0.07", "104.247, -44.7135, 3.15392, 0.07", "105.083, -45.2756, 2.37482, 0.07", "105.738, -45.7147, 1.84467, 0.44", "106.678, -46.3123, 1.19855, 1.61", "107.332, -46.6902, 0.815537, 1.61", "108.871, -47.4369, 0.113472, 0.07", "109.297, -47.6074, -0.0276583, 0.73", "109.848, -47.7777, -0.184765, 0.73", "110.772, -48.0088, -0.419089, 0.22", "111.621, -48.1883, -0.593092, 0.44", "113.033, -48.4881, -0.836383, 0.07", "113.376, -48.5663, -0.900222, 0.36", "115.162, -49.0039, -1.12862, 0.07", "116.14, -49.2625, -1.21162, 1.82", "116.802, -49.4555, -1.24651, 1.82", "118.752, -50.0863, -1.25746, 0.07", "119.66, -50.4148, -1.22777, 0.22", "121.355, -51.0845, -1.09737, 0.07", "122.056, -51.394, -0.990994, 0.22", "122.86, -51.7863, -0.87436, 0.22", "123.391, -52.0668, -0.803751, 0.07", "123.665, -52.2252, -0.786422, 0.07", "124.111, -52.478, -0.788558, 0.07", "124.672, -52.7906, -0.845292, 0.07", "125.236, -53.0841, -0.898139, 0.95", "125.696, -53.3098, -0.939929, 0.95", "126.796, -53.8844, -1.00553, 0.07", "127.965, -54.5194, -1.0423, 0.44", "128.686, -54.9014, -1.04642, 0.15", "129.334, -55.2283, -1.03124, 0.66", "129.767, -55.4318, -1.00459, 0.66", "131.085, -56.0247, -0.8586, 0.07", "131.536, -56.2373, -0.784355, 0.07", "131.959, -56.4512, -0.710125, 0.07", "132.371, -56.6953, -0.658428, 0.36", "132.937, -57.0549, -0.596356, 0.36", "133.688, -57.5615, -0.564357, 0.07", "134.562, -58.1863, -0.57476, 1.75", "135.024, -58.5428, -0.585959, 1.75", "136.874, -60.0294, -0.645857, 0.07", "137.449, -60.5004, -0.668087, 0.58", "138.459, -61.332, -0.709398, 0.58", "139.224, -61.9611, -0.735435, 0.07", "139.406, -62.114, -0.739017, 0.07", "139.694, -62.3655, -0.740975, 0.07", "139.938, -62.5807, -0.73496, 0.07", "140.502, -63.1047, -0.718399, 0.36", "141.39, -63.9861, -0.660681, 0.07", "141.806, -64.4576, -0.641281, 0.07", "142.245, -65.0136, -0.626988, 0.07", "142.62, -65.5298, -0.638651, 0.36", "142.987, -66.0685, -0.669389, 0.36", "143.392, -66.6956, -0.722888, 0.07", "144.0, -67.6251, -0.818152, 0.51", "144.273, -68.025, -0.863689, 0.51", "145.021, -69.0128, -0.975888, 0.07", "145.349, -69.3851, -1.02188, 0.07", "145.859, -69.8676, -1.10179, 0.07", "146.631, -70.4632, -1.21611, 1.39", "147.146, -70.7761, -1.28478, 1.39", "148.242, -71.3028, -1.40854, 0.22", "149.223, -71.6551, -1.49145, 0.07", "150.214, -71.9105, -1.56559, 0.36", "150.977, -72.037, -1.61351, 0.66", "151.582, -72.0941, -1.63834, 0.07", "152.277, -72.1286, -1.64378, 0.22", "152.747, -72.1437, -1.63011, 0.22", "153.515, -72.1584, -1.57096, 0.22", "154.167, -72.1657, -1.49762, 0.36", "155.07, -72.1743, -1.40001, 0.07", "155.79, -72.1861, -1.32905, 0.07", "156.616, -72.1967, -1.25272, 0.73", "156.896, -72.1888, -1.20835, 0.73", "157.821, -72.111, -1.01104, 0.07", "158.363, -72.0232, -0.862782, 0.07", "159.686, -71.6857, -0.436959, 0.58", "160.219, -71.5097, -0.246774, 0.58", "161.601, -70.948, 0.314096, 0.07", "162.302, -70.6371, 0.618971, 0.07", "163.1, -70.2686, 0.986581, 0.07", "163.741, -69.9785, 1.28548, 0.88", "164.071, -69.8178, 1.44657, 1.46", "165.191, -69.2666, 1.95404, 0.07", "165.651, -69.0574, 2.11401, 0.07", "166.168, -68.847, 2.29922, 0.07", "166.706, -68.6792, 2.48142, 0.66" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "13.9471, -29.2273, 2.20102, 1.39", "13.1421, -31.3401, 2.69072, 1.39", "12.6065, -32.8629, 2.98651, 1.17", "12.009, -34.7283, 3.29152, 0.73", "11.5126, -36.3883, 3.50021, 0.73", "11.1307, -37.769, 3.6272, 1.02", "10.6845, -39.4595, 3.72626, 0.58", "10.3119, -41.0572, 3.76803, 0.58", "10.0692, -42.4236, 3.76678, 0.58", "9.89404, -44.0352, 3.75726, 0.95", "9.83382, -45.4972, 3.81869, 0.95", "9.88753, -47.0549, 4.01488, 0.51", "10.04, -48.6225, 4.33966, 0.29", "10.2528, -50.1972, 4.78089, 1.02", "10.5263, -51.9507, 5.36979, 0.73", "10.9021, -54.2865, 6.26075, 0.51", "11.0563, -55.584, 6.78614, 0.36", "11.1462, -56.9036, 7.28788, 0.36", "11.0628, -58.1941, 7.60134, 0.36", "10.8743, -58.7811, 7.56274, 0.36", "10.4914, -59.5431, 7.23251, 0.36", "9.77833, -60.9464, 6.35205, 0.44", "9.06408, -62.4932, 5.35319, 0.44", "8.60212, -63.8457, 4.6168, 0.44", "8.39769, -64.968, 4.2036, 1.09", "8.30744, -66.3021, 3.94017, 0.8", "8.32133, -68.2148, 3.78771, 0.51", "8.36157, -69.3422, 3.79217, 0.51", "8.39431, -71.4859, 3.94511, 0.95", "8.35925, -73.8, 4.16842, 0.58", "8.29708, -74.8994, 4.26746, 0.36", "8.16497, -76.1233, 4.33333, 0.36", "7.84831, -78.1644, 4.35011, 0.36", "7.54452, -79.6906, 4.26408, 0.8", "7.22767, -80.9761, 4.13397, 0.51", "6.93232, -82.2626, 4.00597, 0.51", "6.69026, -83.7844, 3.9094, 0.36", "6.63299, -84.3687, 3.91909, 0.36", "6.60823, -84.9359, 3.97562, 0.36", "6.58205, -86.2242, 4.17719, 0.36", "6.47039, -88.6552, 4.62217, 1.02", "6.2869, -90.4867, 4.94747, 0.66", "6.10132, -91.7329, 5.0745, 0.66", "5.88911, -92.6113, 5.05551, 0.66", "5.66457, -93.2995, 4.94579, 0.66", "5.07297, -94.7514, 4.4985, 0.66", "4.49888, -95.9385, 4.0061, 0.66", "3.76213, -97.5103, 3.29959, 0.66", "3.24257, -98.7693, 2.76306, 0.66", "2.79654, -99.9147, 2.34032, 0.51", "2.23469, -101.421, 1.89875, 0.88", "1.88451, -102.415, 1.69321, 0.88", "1.27558, -104.227, 1.4889, 0.51", "0.730543, -105.912, 1.44368, 0.51", "0.445789, -107.024, 1.48588, 0.51", "0.280354, -107.927, 1.56978, 0.51", "0.186645, -109.291, 1.74508, 0.51", "0.270394, -110.678, 1.90737, 1.02", "0.442577, -111.63, 1.97418, 1.02", "1.19874, -114.338, 2.00437, 0.44", "1.67224, -115.68, 1.9655, 0.44", "2.58207, -117.922, 1.82805, 0.36", "3.39797, -119.822, 1.62777, 0.36", "3.99955, -121.226, 1.3809, 0.58", "4.49844, -122.505, 1.06467, 0.66", "4.77466, -123.393, 0.796486, 0.66", "4.95059, -124.478, 0.473158, 0.44", "4.9311, -125.679, 0.175509, 0.36", "4.7437, -126.939, -0.0367302, 0.36", "4.50809, -128.122, -0.173099, 0.36", "4.09035, -129.96, -0.321948, 0.58", "3.69184, -131.658, -0.400026, 0.44", "3.42921, -132.824, -0.417524, 0.44", "3.10852, -134.382, -0.407153, 1.02", "2.81005, -135.93, -0.387724, 0.36", "2.61946, -137.045, -0.41631, 0.36", "2.40744, -138.237, -0.521552, 0.36", "2.20389, -139.333, -0.640485, 0.36", "1.91421, -140.827, -0.83697, 0.22", "1.62241, -142.147, -1.02807, 0.51", "1.12397, -144.217, -1.37071, 0.15", "0.735798, -145.832, -1.68803, 0.36", "0.572409, -146.52, -1.83601, 0.8", "0.304933, -147.703, -2.08896, 0.51", "-1.81239, -158.268, -2.84839, 0.51" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "19.25, 51.1989, 7.63394, 0.29", "21.7802, 50.8937, 8.17343, 0.29", "22.6823, 50.832, 8.32554, 0.29", "23.6734, 50.8387, 8.42977, 0.29", "24.6236, 50.9122, 8.61282, 0.29", "25.1451, 50.9691, 8.71822, 0.07", "26.0535, 51.0794, 8.90003, 0.66", "27.0111, 51.2332, 9.07513, 1.24", "29.0943, 51.5954, 9.40259, 0.58", "31.7702, 52.022, 9.80838, 0.22", "34.03, 52.3506, 10.1623, 0.22", "34.638, 52.4362, 10.2534, 0.8", "35.942, 52.6046, 10.4842, 1.24", "38.3633, 52.8936, 10.9137, 0.22", "40.1464, 53.078, 11.2107, 0.22", "40.7885, 53.1337, 11.2853, 0.51", "42.4466, 53.2833, 11.5465, 0.66", "44.9926, 53.5251, 12.0262, 0.07", "57.082, 52.9757, 12.8409, 0.07" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "19.25, 51.1989, 7.63394, 0.66", "19.1438, 51.9761, 8.52762, 0.66", "19.1339, 52.7947, 9.27608, 0.15", "19.1579, 53.0585, 9.47325, 0.15", "19.2803, 53.8162, 9.94584, 0.29", "19.4852, 54.6687, 10.3391, 0.15", "19.7432, 55.5338, 10.6306, 0.95", "20.0071, 56.2885, 10.7502, 0.58", "20.2484, 56.9321, 10.7886, 0.22", "20.4538, 57.4939, 10.7964, 0.07", "20.8733, 58.7813, 10.7577, 1.17", "21.1638, 59.9276, 10.7002, 0.8", "21.3342, 60.8519, 10.6798, 0.51", "21.4427, 61.7255, 10.7013, 0.29", "21.506, 62.6032, 10.7592, 0.58", "21.5158, 63.921, 10.9094, 0.36", "21.4515, 65.1837, 11.1354, 0.15", "21.3816, 66.0925, 11.3412, 0.36", "21.3107, 67.1014, 11.6233, 0.36", "21.2778, 67.7608, 11.8467, 0.07", "21.2792, 68.5534, 12.1573, 0.15", "21.2932, 68.9765, 12.3535, 0.07", "21.3198, 69.3599, 12.5546, 0.07", "21.3625, 69.7461, 12.7431, 0.07", "21.5446, 70.6507, 13.1598, 1.31", "21.7233, 71.1564, 13.3958, 1.31", "23.6732, 78.0899, 16.2758, 1.31" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_17", "dend_10", "dend_9", "dend_8", "dend_7", "dend_6", "dend_1", "dend_0", "dend_14", "dend_11", "dend_5", "dend_2", "dend_16", "dend_15", "dend_13", "dend_12", "dend_4", "dend_3" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_17", "dend_10", "dend_9", "dend_8", "dend_7", "dend_6", "dend_1", "dend_0", "dend_14", "dend_11", "dend_5", "dend_2", "dend_16", "dend_15", "dend_13", "dend_12", "dend_4", "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_1", "dend_1", "dend_1", "dend_1", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "axon_1", "axon_1", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "5.67935E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "5.67935E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "3.6794998E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cSTUT_7_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cSTUT_7_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cSTUT189_L5_LBC_7e5297a36c_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_17, id: dend_17, parent: soma_0
create dend_17
public dend_17
// Section: dend_10, id: dend_10, parent: soma_0
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: soma_0
create dend_9
public dend_9
// Section: dend_8, id: dend_8, parent: soma_0
create dend_8
public dend_8
// Section: dend_7, id: dend_7, parent: soma_0
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: soma_0
create dend_6
public dend_6
// Section: dend_1, id: dend_1, parent: soma_0
create dend_1
public dend_1
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_14, id: dend_14, parent: dend_10
create dend_14
public dend_14
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_5, id: dend_5, parent: dend_1
create dend_5
public dend_5
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_16, id: dend_16, parent: dend_14
create dend_16
public dend_16
// Section: dend_15, id: dend_15, parent: dend_14
create dend_15
public dend_15
// Section: dend_13, id: dend_13, parent: dend_11
create dend_13
public dend_13
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12
// Section: dend_4, id: dend_4, parent: dend_2
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_17, dend_10, dend_9, dend_8, dend_7, dend_6, dend_1, dend_0, dend_14, dend_11, dend_5, dend_2, dend_16, dend_15, dend_13, dend_12, dend_4, dend_3]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_17, dend_10, dend_9, dend_8, dend_7, dend_6, dend_1, dend_0, dend_14, dend_11, dend_5, dend_2, dend_16, dend_15, dend_13, dend_12, dend_4, dend_3]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_20
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_1, dend_1, dend_1, dend_1, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, axon_1, axon_1, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cSTUT_7_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cSTUT_7_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_17(0), soma_0(0.49999893613021856)
    connect dend_10(0), soma_0(0.49999893613021856)
    connect dend_9(0), soma_0(0.49999893613021856)
    connect dend_8(0), soma_0(0.49999893613021856)
    connect dend_7(0), soma_0(0.49999893613021856)
    connect dend_6(0), soma_0(0.49999893613021856)
    connect dend_1(0), soma_0(0.49999893613021856)
    connect dend_0(0), soma_0(0.49999893613021856)
    connect axon_0(0), soma_0(1.0)
    connect dend_14(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_5(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_16(0), dend_14(1.0)
    connect dend_15(0), dend_14(1.0)
    connect dend_13(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)
    connect dend_4(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( 1.42539, -10.6376, 0.0, 4.61764 ) }
    soma_0 { pt3dadd( 1.16889, -9.52164, 0.0, 8.50261 ) }
    soma_0 { pt3dadd( 0.912393, -8.40563, 0.0, 10.6819 ) }
    soma_0 { pt3dadd( 0.655896, -7.28962, 0.0, 12.4606 ) }
    soma_0 { pt3dadd( 0.399399, -6.17362, 0.0, 14.126 ) }
    soma_0 { pt3dadd( 0.142902, -5.05761, 0.0, 15.1371 ) }
    soma_0 { pt3dadd( -0.113594, -3.9416, 0.0, 15.8374 ) }
    soma_0 { pt3dadd( -0.370091, -2.8256, 0.0, 16.1877 ) }
    soma_0 { pt3dadd( -0.626588, -1.70959, 0.0, 16.953 ) }
    soma_0 { pt3dadd( -0.883085, -0.593582, 0.0, 17.4193 ) }
    soma_0 { pt3dadd( -1.13958, 0.522425, 0.0, 17.7718 ) }
    soma_0 { pt3dadd( -1.39608, 1.63843, 0.0, 17.9686 ) }
    soma_0 { pt3dadd( -1.65257, 2.75444, 0.0, 17.7521 ) }
    soma_0 { pt3dadd( -1.90907, 3.87045, 0.0, 17.4043 ) }
    soma_0 { pt3dadd( -2.16557, 4.98645, 0.0, 17.0101 ) }
    soma_0 { pt3dadd( -2.42207, 6.10246, 0.0, 16.4966 ) }
    soma_0 { pt3dadd( -2.67856, 7.21847, 0.0, 15.2605 ) }
    soma_0 { pt3dadd( -2.93506, 8.33447, 0.0, 13.6816 ) }
    soma_0 { pt3dadd( -3.19156, 9.45048, 0.0, 11.3092 ) }
    soma_0 { pt3dadd( -3.44805, 10.5665, 0.0, 8.03973 ) }
    soma_0 { pt3dadd( -3.70455, 11.6825, 0.0, 4.69987 ) }
    // Section: dend_17, id: dend_17, parent: soma_0 (entry count 21/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -2.69573, 0.925848, -7.18, 1.17 ) }
    dend_17 { pt3dadd( -2.84534, 1.36247, -7.90097, 1.17 ) }
    dend_17 { pt3dadd( -2.96254, 1.91352, -8.76146, 1.17 ) }
    dend_17 { pt3dadd( -3.05854, 3.1791, -10.7002, 1.02 ) }
    dend_17 { pt3dadd( -3.06419, 3.80977, -11.689, 1.02 ) }
    dend_17 { pt3dadd( -3.07752, 4.41254, -12.6442, 0.8 ) }
    dend_17 { pt3dadd( -3.11072, 5.07714, -13.7114, 0.8 ) }
    dend_17 { pt3dadd( -3.11397, 5.44922, -14.2885, 0.8 ) }
    dend_17 { pt3dadd( -3.07181, 6.22118, -15.4604, 0.8 ) }
    dend_17 { pt3dadd( -2.97269, 6.80404, -16.3248, 0.8 ) }
    dend_17 { pt3dadd( -2.82634, 7.28515, -17.0941, 0.8 ) }
    dend_17 { pt3dadd( -2.61299, 7.72893, -17.8295, 0.8 ) }
    dend_17 { pt3dadd( -2.39678, 8.07304, -18.3824, 0.8 ) }
    dend_17 { pt3dadd( -1.97879, 8.60939, -19.0965, 0.8 ) }
    dend_17 { pt3dadd( -1.66651, 8.95153, -19.4549, 0.8 ) }
    dend_17 { pt3dadd( -0.929311, 9.72787, -20.1133, 0.8 ) }
    dend_17 { pt3dadd( -0.255108, 10.4283, -20.643, 0.58 ) }
    dend_17 { pt3dadd( 0.357467, 11.0793, -21.0867, 0.58 ) }
    dend_17 { pt3dadd( 0.852411, 11.6429, -21.4797, 0.36 ) }
    dend_17 { pt3dadd( 1.24267, 12.1721, -21.8998, 0.22 ) }
    dend_17 { pt3dadd( 1.47339, 12.5109, -22.2317, 0.22 ) }
    dend_17 { pt3dadd( 1.62063, 12.7418, -22.5537, 0.22 ) }
    dend_17 { pt3dadd( 1.70117, 12.8669, -22.827, 0.22 ) }
    dend_17 { pt3dadd( 1.88911, 13.1255, -23.6471, 0.22 ) }
    dend_17 { pt3dadd( 2.13267, 13.563, -25.1584, 0.22 ) }
    dend_17 { pt3dadd( 2.21431, 13.7741, -25.9893, 0.22 ) }
    dend_17 { pt3dadd( 2.24003, 13.8956, -26.5396, 0.22 ) }
    dend_17 { pt3dadd( 2.20813, 14.032, -27.3177, 0.22 ) }
    dend_17 { pt3dadd( 2.04465, 14.144, -28.2443, 0.22 ) }
    dend_17 { pt3dadd( 1.66902, 14.2098, -29.2743, 0.22 ) }
    dend_17 { pt3dadd( 0.984737, 14.1086, -30.406, 0.22 ) }
    dend_17 { pt3dadd( 0.682527, 14.0068, -30.8155, 0.22 ) }
    dend_17 { pt3dadd( -0.0816393, 13.6482, -31.6496, 0.22 ) }
    dend_17 { pt3dadd( -0.704389, 13.2747, -32.2258, 0.22 ) }
    dend_17 { pt3dadd( -1.42359, 12.8077, -32.7727, 0.22 ) }
    dend_17 { pt3dadd( -2.19304, 12.3094, -33.2649, 0.22 ) }
    dend_17 { pt3dadd( -2.84441, 11.9168, -33.6491, 0.22 ) }
    dend_17 { pt3dadd( -3.64861, 11.4667, -34.109, 0.22 ) }
    dend_17 { pt3dadd( -5.69108, 10.3941, -35.1733, 0.22 ) }
    dend_17 { pt3dadd( -6.26908, 10.1041, -35.4651, 0.22 ) }
    dend_17 { pt3dadd( -6.81742, 9.84071, -35.7236, 0.22 ) }
    dend_17 { pt3dadd( -7.74721, 9.4008, -36.1011, 0.22 ) }
    dend_17 { pt3dadd( -8.61858, 9.00648, -36.4126, 0.22 ) }
    dend_17 { pt3dadd( -9.63903, 8.58833, -36.736, 0.22 ) }
    dend_17 { pt3dadd( -10.0975, 8.44267, -36.8109, 0.22 ) }
    dend_17 { pt3dadd( -10.6123, 8.2851, -36.8938, 0.22 ) }
    // Section: dend_10, id: dend_10, parent: soma_0 (entry count 67/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 1.98427, -10.1851, -4.03, 2.04 ) }
    dend_10 { pt3dadd( 2.11404, -11.8383, -3.11599, 2.19 ) }
    dend_10 { pt3dadd( 2.23711, -13.4062, -2.24914, 1.9 ) }
    dend_10 { pt3dadd( 2.35033, -14.8486, -1.4517, 1.9 ) }
    // Section: dend_9, id: dend_9, parent: soma_0 (entry count 71/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -5.41573, -7.02815, -0.44, 0.51 ) }
    dend_9 { pt3dadd( -6.36705, -6.81151, 0.696157, 0.51 ) }
    dend_9 { pt3dadd( -7.77211, -6.28881, 2.21148, 0.51 ) }
    dend_9 { pt3dadd( -8.91537, -5.78034, 3.3252, 0.51 ) }
    dend_9 { pt3dadd( -10.741, -4.89025, 4.98245, 1.02 ) }
    dend_9 { pt3dadd( -11.7301, -4.41752, 5.82759, 0.88 ) }
    dend_9 { pt3dadd( -13.5332, -3.59757, 7.21564, 0.51 ) }
    dend_9 { pt3dadd( -15.1381, -2.82683, 8.20928, 0.22 ) }
    dend_9 { pt3dadd( -16.0519, -2.41723, 8.63097, 0.22 ) }
    dend_9 { pt3dadd( -16.4785, -2.26315, 8.77892, 0.22 ) }
    dend_9 { pt3dadd( -18.7849, -1.60093, 9.34256, 0.22 ) }
    dend_9 { pt3dadd( -20.3069, -1.21516, 9.75464, 0.22 ) }
    dend_9 { pt3dadd( -21.8292, -0.860354, 10.1597, 0.66 ) }
    dend_9 { pt3dadd( -23.0245, -0.600185, 10.5216, 0.95 ) }
    dend_9 { pt3dadd( -24.9018, -0.20941, 11.1181, 0.58 ) }
    dend_9 { pt3dadd( -26.7378, 0.117493, 11.6975, 0.44 ) }
    dend_9 { pt3dadd( -28.9627, 0.42424, 12.3751, 0.22 ) }
    dend_9 { pt3dadd( -29.9295, 0.46807, 12.7001, 0.07 ) }
    dend_9 { pt3dadd( -31.0191, 0.420874, 13.0393, 0.07 ) }
    dend_9 { pt3dadd( -32.153, 0.290903, 13.348, 0.58 ) }
    dend_9 { pt3dadd( -33.6583, -0.0244431, 13.7194, 1.09 ) }
    dend_9 { pt3dadd( -35.0047, -0.408763, 14.0578, 0.73 ) }
    dend_9 { pt3dadd( -36.916, -0.939761, 14.479, 0.22 ) }
    dend_9 { pt3dadd( -37.7417, -1.1134, 14.7094, 0.22 ) }
    dend_9 { pt3dadd( -38.333, -1.17005, 14.9005, 0.22 ) }
    dend_9 { pt3dadd( -39.8161, -1.11209, 15.4227, 0.22 ) }
    dend_9 { pt3dadd( -40.9759, -0.916136, 15.8475, 0.51 ) }
    dend_9 { pt3dadd( -43.0967, -0.34611, 16.5967, 0.29 ) }
    dend_9 { pt3dadd( -44.4254, 0.078323, 17.0094, 0.51 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_9 { pt3dadd( -45.3348, 0.347408, 17.2544, 0.51 ) }
    dend_9 { pt3dadd( -46.1256, 0.554685, 17.4038, 0.29 ) }
    dend_9 { pt3dadd( -46.8479, 0.714738, 17.4716, 0.29 ) }
    dend_9 { pt3dadd( -47.8939, 0.88553, 17.5132, 0.29 ) }
    dend_9 { pt3dadd( -49.0413, 0.977172, 17.4177, 0.29 ) }
    dend_9 { pt3dadd( -49.9323, 1.0, 17.3794, 0.58 ) }
    dend_9 { pt3dadd( -51.0957, 1.00188, 17.4921, 0.73 ) }
    dend_9 { pt3dadd( -52.019, 1.06018, 17.7099, 0.73 ) }
    dend_9 { pt3dadd( -53.5099, 1.27154, 18.2281, 0.36 ) }
    dend_9 { pt3dadd( -54.9808, 1.65008, 18.9261, 0.36 ) }
    dend_9 { pt3dadd( -57.83, 2.75741, 20.5071, 0.36 ) }
    dend_9 { pt3dadd( -59.3296, 3.50035, 21.4992, 0.66 ) }
    dend_9 { pt3dadd( -60.8237, 4.36163, 22.6111, 0.15 ) }
    dend_9 { pt3dadd( -61.6562, 4.88796, 23.2811, 0.15 ) }
    dend_9 { pt3dadd( -63.4369, 6.03069, 24.7495, 0.58 ) }
    dend_9 { pt3dadd( -64.3336, 6.53941, 25.478, 0.22 ) }
    dend_9 { pt3dadd( -65.5382, 7.05607, 26.249, 0.22 ) }
    dend_9 { pt3dadd( -65.8276, 7.11254, 26.4283, 0.22 ) }
    dend_9 { pt3dadd( -66.7058, 7.09957, 27.0632, 0.22 ) }
    dend_9 { pt3dadd( -67.5293, 6.85999, 27.7273, 0.22 ) }
    dend_9 { pt3dadd( -68.4969, 5.99117, 28.5262, 0.22 ) }
    dend_9 { pt3dadd( -69.1665, 5.17347, 29.065, 0.8 ) }
    dend_9 { pt3dadd( -69.9403, 3.97034, 29.5893, 0.8 ) }
    dend_9 { pt3dadd( -83.8164, 8.0872, 35.5109, 0.8 ) }
    // Section: dend_8, id: dend_8, parent: soma_0 (entry count 24/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -5.02573, -8.38115, 0.0299997, 0.73 ) }
    dend_8 { pt3dadd( -5.65727, -8.43544, 0.102274, 0.73 ) }
    dend_8 { pt3dadd( -6.39409, -8.40714, 0.177376, 0.73 ) }
    dend_8 { pt3dadd( -6.98829, -8.32451, 0.244226, 0.66 ) }
    dend_8 { pt3dadd( -7.78481, -8.18077, 0.382427, 0.66 ) }
    dend_8 { pt3dadd( -8.29871, -8.08303, 0.506647, 1.17 ) }
    dend_8 { pt3dadd( -8.708, -8.00634, 0.624329, 1.31 ) }
    dend_8 { pt3dadd( -9.49204, -7.83923, 0.8476, 0.8 ) }
    dend_8 { pt3dadd( -10.2638, -7.66674, 1.07191, 0.8 ) }
    dend_8 { pt3dadd( -11.0178, -7.514, 1.27927, 0.58 ) }
    dend_8 { pt3dadd( -11.8455, -7.37518, 1.4886, 0.36 ) }
    dend_8 { pt3dadd( -12.4376, -7.30782, 1.60573, 0.22 ) }
    dend_8 { pt3dadd( -13.0319, -7.27446, 1.68118, 0.36 ) }
    dend_8 { pt3dadd( -13.5888, -7.27889, 1.72417, 0.73 ) }
    dend_8 { pt3dadd( -14.2408, -7.30247, 1.75515, 0.73 ) }
    dend_8 { pt3dadd( -14.803, -7.31766, 1.76747, 0.36 ) }
    dend_8 { pt3dadd( -15.2909, -7.32363, 1.78406, 0.58 ) }
    dend_8 { pt3dadd( -16.0973, -7.32109, 1.86475, 0.8 ) }
    dend_8 { pt3dadd( -16.912, -7.31988, 2.01828, 0.36 ) }
    dend_8 { pt3dadd( -17.447, -7.33009, 2.15548, 0.88 ) }
    dend_8 { pt3dadd( -17.7533, -7.34052, 2.24641, 1.39 ) }
    dend_8 { pt3dadd( -18.0128, -7.354, 2.32195, 1.39 ) }
    dend_8 { pt3dadd( -18.552, -7.38286, 2.46363, 0.36 ) }
    dend_8 { pt3dadd( -18.9937, -7.40092, 2.54432, 0.22 ) }
    dend_8 { pt3dadd( -19.5529, -7.41646, 2.58207, 0.44 ) }
    dend_8 { pt3dadd( -20.3763, -7.43323, 2.5832, 0.66 ) }
    dend_8 { pt3dadd( -20.7627, -7.44045, 2.5821, 0.66 ) }
    dend_8 { pt3dadd( -21.4327, -7.44808, 2.59791, 0.88 ) }
    dend_8 { pt3dadd( -22.1853, -7.43727, 2.60365, 0.51 ) }
    dend_8 { pt3dadd( -22.8704, -7.39873, 2.63014, 0.51 ) }
    dend_8 { pt3dadd( -23.2684, -7.35591, 2.66288, 0.51 ) }
    dend_8 { pt3dadd( -23.9353, -7.25225, 2.74991, 0.36 ) }
    dend_8 { pt3dadd( -24.474, -7.14512, 2.85852, 0.36 ) }
    dend_8 { pt3dadd( -25.1756, -6.97984, 3.10548, 0.22 ) }
    dend_8 { pt3dadd( -25.6745, -6.87821, 3.40573, 0.22 ) }
    dend_8 { pt3dadd( -26.0091, -6.87044, 3.69709, 0.44 ) }
    dend_8 { pt3dadd( -26.3181, -6.95732, 3.92653, 0.58 ) }
    dend_8 { pt3dadd( -26.4611, -7.04856, 4.00107, 0.58 ) }
    dend_8 { pt3dadd( -26.7815, -7.27739, 4.15163, 0.58 ) }
    dend_8 { pt3dadd( -27.2036, -7.58307, 4.34081, 0.22 ) }
    dend_8 { pt3dadd( -27.7071, -7.93078, 4.54161, 0.51 ) }
    dend_8 { pt3dadd( -28.3032, -8.31185, 4.76116, 1.17 ) }
    dend_8 { pt3dadd( -29.0928, -8.75066, 5.04336, 0.36 ) }
    dend_8 { pt3dadd( -29.5747, -8.97329, 5.20842, 0.15 ) }
    dend_8 { pt3dadd( -30.0375, -9.14856, 5.35767, 0.29 ) }
    dend_8 { pt3dadd( -30.5654, -9.29487, 5.51771, 0.8 ) }
    dend_8 { pt3dadd( -30.9335, -9.36464, 5.62731, 0.8 ) }
    dend_8 { pt3dadd( -31.5815, -9.46193, 5.83845, 0.22 ) }
    dend_8 { pt3dadd( -31.9864, -9.51998, 5.95204, 0.73 ) }
    dend_8 { pt3dadd( -32.1638, -9.55463, 5.99703, 0.73 ) }
    dend_8 { pt3dadd( -32.7495, -9.72392, 6.15245, 0.36 ) }
    dend_8 { pt3dadd( -33.025, -9.84407, 6.24101, 0.29 ) }
    dend_8 { pt3dadd( -33.3369, -10.0287, 6.38081, 0.15 ) }
    dend_8 { pt3dadd( -33.7448, -10.3008, 6.60221, 0.15 ) }
    dend_8 { pt3dadd( -34.0222, -10.4878, 6.78482, 0.15 ) }
    dend_8 { pt3dadd( -34.2962, -10.6524, 6.98134, 0.15 ) }
    dend_8 { pt3dadd( -34.7601, -10.9205, 7.34418, 1.02 ) }
    dend_8 { pt3dadd( -35.1482, -11.1265, 7.62722, 1.31 ) }
    dend_8 { pt3dadd( -35.5147, -11.3036, 7.87021, 0.66 ) }
    dend_8 { pt3dadd( -35.8004, -11.445, 8.05024, 0.66 ) }
    dend_8 { pt3dadd( -36.1861, -11.6704, 8.27636, 0.22 ) }
    dend_8 { pt3dadd( -36.52, -11.9185, 8.45808, 0.07 ) }
    dend_8 { pt3dadd( -37.0019, -12.4101, 8.72472, 0.51 ) }
    dend_8 { pt3dadd( -37.2338, -12.7483, 8.88813, 0.51 ) }
    dend_8 { pt3dadd( -37.5275, -13.3749, 9.16745, 0.22 ) }
    dend_8 { pt3dadd( -37.6294, -13.6882, 9.29794, 0.22 ) }
    dend_8 { pt3dadd( -37.7115, -14.048, 9.45057, 0.22 ) }
    dend_8 { pt3dadd( -37.7878, -14.4389, 9.63077, 0.66 ) }
    dend_8 { pt3dadd( -37.86, -14.9414, 9.90074, 0.66 ) }
    dend_8 { pt3dadd( -37.9058, -15.3181, 10.1181, 0.44 ) }
    dend_8 { pt3dadd( -37.9546, -15.5292, 10.2499, 0.07 ) }
    dend_8 { pt3dadd( -38.2228, -15.5929, 10.4113, 0.07 ) }
    dend_8 { pt3dadd( -38.6198, -15.647, 10.6298, 0.58 ) }
    dend_8 { pt3dadd( -38.9544, -15.6789, 10.8002, 0.8 ) }
    dend_8 { pt3dadd( -39.0922, -15.6966, 10.8668, 0.8 ) }
    dend_8 { pt3dadd( -39.5542, -15.7849, 11.1018, 0.07 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_8 { pt3dadd( -39.9925, -15.926, 11.3234, 0.36 ) }
    dend_8 { pt3dadd( -40.3989, -16.1132, 11.5091, 0.22 ) }
    dend_8 { pt3dadd( -40.6131, -16.2326, 11.5879, 0.22 ) }
    dend_8 { pt3dadd( -40.9883, -16.4266, 11.6865, 0.8 ) }
    dend_8 { pt3dadd( -41.2133, -16.5155, 11.7393, 0.95 ) }
    dend_8 { pt3dadd( -41.7207, -16.6376, 11.8375, 0.36 ) }
    dend_8 { pt3dadd( -42.1691, -16.6474, 11.9113, 0.58 ) }
    dend_8 { pt3dadd( -42.6055, -16.6171, 11.9761, 0.58 ) }
    dend_8 { pt3dadd( -43.0516, -16.5521, 12.0464, 0.36 ) }
    dend_8 { pt3dadd( -43.5993, -16.4183, 12.1424, 0.15 ) }
    dend_8 { pt3dadd( -43.9029, -16.3207, 12.2042, 0.15 ) }
    dend_8 { pt3dadd( -44.248, -16.1588, 12.2944, 0.36 ) }
    dend_8 { pt3dadd( -48.497, -17.7677, 13.9452, 0.36 ) }
    // Section: dend_7, id: dend_7, parent: soma_0 (entry count 13/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 5.89427, 4.96435, 3.64, 1.17 ) }
    dend_7 { pt3dadd( 6.67591, 5.49852, 3.45093, 0.22 ) }
    dend_7 { pt3dadd( 7.4043, 5.93961, 3.26782, 1.17 ) }
    dend_7 { pt3dadd( 8.05254, 6.28795, 3.10499, 1.17 ) }
    dend_7 { pt3dadd( 8.9529, 6.71934, 2.88369, 1.17 ) }
    dend_7 { pt3dadd( 10.3961, 7.30336, 2.54263, 0.15 ) }
    dend_7 { pt3dadd( 10.6701, 7.40105, 2.48135, 0.15 ) }
    dend_7 { pt3dadd( 11.393, 7.59756, 2.41209, 0.15 ) }
    dend_7 { pt3dadd( 11.8285, 7.70036, 2.43517, 0.15 ) }
    dend_7 { pt3dadd( 12.2865, 7.81923, 2.54484, 0.73 ) }
    dend_7 { pt3dadd( 12.9703, 8.07414, 2.90933, 1.02 ) }
    dend_7 { pt3dadd( 13.434, 8.36772, 3.32596, 1.02 ) }
    dend_7 { pt3dadd( 14.7481, 9.68083, 4.76873, 0.66 ) }
    dend_7 { pt3dadd( 15.0948, 10.1224, 5.20236, 0.44 ) }
    dend_7 { pt3dadd( 15.5151, 10.7225, 5.73375, 0.22 ) }
    dend_7 { pt3dadd( 15.7491, 11.069, 6.01115, 0.22 ) }
    dend_7 { pt3dadd( 16.1719, 11.5787, 6.32766, 0.22 ) }
    dend_7 { pt3dadd( 16.7194, 12.0459, 6.48584, 0.22 ) }
    dend_7 { pt3dadd( 17.573, 12.5939, 6.49109, 0.95 ) }
    dend_7 { pt3dadd( 18.0242, 12.8435, 6.48283, 1.53 ) }
    dend_7 { pt3dadd( 18.5331, 13.114, 6.48979, 1.53 ) }
    dend_7 { pt3dadd( 20.1551, 14.024, 6.54937, 0.51 ) }
    dend_7 { pt3dadd( 20.8702, 14.4747, 6.58913, 0.51 ) }
    dend_7 { pt3dadd( 21.7233, 15.1266, 6.65399, 1.02 ) }
    dend_7 { pt3dadd( 22.6958, 16.0222, 6.75797, 0.36 ) }
    dend_7 { pt3dadd( 23.4589, 16.7801, 6.86555, 0.36 ) }
    dend_7 { pt3dadd( 24.3043, 17.6732, 7.00936, 0.95 ) }
    dend_7 { pt3dadd( 24.9503, 18.4143, 7.1435, 0.95 ) }
    dend_7 { pt3dadd( 25.6929, 19.287, 7.32773, 0.73 ) }
    dend_7 { pt3dadd( 26.6927, 20.4776, 7.58377, 0.29 ) }
    dend_7 { pt3dadd( 27.8213, 21.8769, 7.86358, 0.29 ) }
    dend_7 { pt3dadd( 28.3326, 22.5462, 8.01959, 0.29 ) }
    dend_7 { pt3dadd( 28.7402, 23.1249, 8.2102, 1.02 ) }
    dend_7 { pt3dadd( 29.3641, 24.1231, 8.61674, 1.09 ) }
    dend_7 { pt3dadd( 29.5399, 24.4566, 8.79075, 1.09 ) }
    dend_7 { pt3dadd( 30.0081, 25.5159, 9.51895, 0.51 ) }
    dend_7 { pt3dadd( 30.4161, 26.5092, 10.3927, 0.22 ) }
    dend_7 { pt3dadd( 30.7713, 27.2598, 11.156, 0.66 ) }
    dend_7 { pt3dadd( 31.1336, 27.8031, 11.8463, 0.66 ) }
    dend_7 { pt3dadd( 31.776, 28.4954, 12.895, 0.44 ) }
    dend_7 { pt3dadd( 32.5714, 29.1155, 14.0611, 0.15 ) }
    dend_7 { pt3dadd( 33.2716, 29.43, 14.9592, 0.15 ) }
    dend_7 { pt3dadd( 33.7721, 29.5418, 15.5, 0.95 ) }
    dend_7 { pt3dadd( 35.4821, 29.6301, 17.1397, 0.22 ) }
    dend_7 { pt3dadd( 36.1299, 29.5892, 17.693, 0.29 ) }
    dend_7 { pt3dadd( 36.5425, 29.5484, 17.9876, 0.29 ) }
    dend_7 { pt3dadd( 37.6626, 29.5165, 18.6769, 0.29 ) }
    dend_7 { pt3dadd( 37.9996, 29.5536, 18.8876, 0.29 ) }
    dend_7 { pt3dadd( 38.2815, 29.6135, 19.0755, 0.29 ) }
    dend_7 { pt3dadd( 38.6868, 30.0652, 19.3838, 0.58 ) }
    dend_7 { pt3dadd( 39.1878, 31.059, 19.8971, 0.44 ) }
    dend_7 { pt3dadd( 39.6423, 32.1809, 20.4114, 0.15 ) }
    dend_7 { pt3dadd( 39.8625, 32.9253, 20.7084, 0.73 ) }
    dend_7 { pt3dadd( 47.6506, 40.5174, 23.9631, 0.73 ) }
    // Section: dend_6, id: dend_6, parent: soma_0 (entry count 67/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 3.96427, 7.0861, 1.49, 0.58 ) }
    dend_6 { pt3dadd( 3.96002, 7.52471, 1.84124, 0.44 ) }
    dend_6 { pt3dadd( 3.99422, 7.9769, 2.20662, 0.22 ) }
    dend_6 { pt3dadd( 4.06441, 8.23709, 2.41584, 0.22 ) }
    dend_6 { pt3dadd( 4.30059, 8.56466, 2.65798, 0.22 ) }
    dend_6 { pt3dadd( 4.43338, 8.67337, 2.73309, 0.22 ) }
    dend_6 { pt3dadd( 4.82161, 8.90759, 2.92415, 0.22 ) }
    dend_6 { pt3dadd( 5.06561, 9.003, 3.01569, 0.66 ) }
    dend_6 { pt3dadd( 5.58582, 9.13666, 3.16586, 1.09 ) }
    dend_6 { pt3dadd( 6.48851, 9.31101, 3.30989, 0.15 ) }
    dend_6 { pt3dadd( 7.03382, 9.40462, 3.36491, 0.15 ) }
    dend_6 { pt3dadd( 7.73289, 9.54127, 3.40778, 0.8 ) }
    dend_6 { pt3dadd( 8.08893, 9.63219, 3.41872, 1.09 ) }
    dend_6 { pt3dadd( 8.8323, 9.91446, 3.45442, 0.29 ) }
    dend_6 { pt3dadd( 9.71889, 10.4403, 3.45391, 0.8 ) }
    dend_6 { pt3dadd( 10.0213, 10.6838, 3.43602, 0.8 ) }
    dend_6 { pt3dadd( 10.4783, 11.1348, 3.38519, 0.44 ) }
    dend_6 { pt3dadd( 10.8792, 11.5848, 3.3255, 0.66 ) }
    dend_6 { pt3dadd( 11.4481, 12.2548, 3.25132, 1.24 ) }
    dend_6 { pt3dadd( 12.1393, 13.1077, 3.14615, 0.29 ) }
    dend_6 { pt3dadd( 12.6759, 13.7448, 3.07044, 0.58 ) }
    dend_6 { pt3dadd( 13.3643, 14.4717, 2.94715, 0.22 ) }
    dend_6 { pt3dadd( 13.8556, 14.9205, 2.87352, 0.8 ) }
    dend_6 { pt3dadd( 14.4792, 15.4361, 2.83177, 0.8 ) }
    dend_6 { pt3dadd( 15.0488, 15.8862, 2.86613, 0.29 ) }
    dend_6 { pt3dadd( 15.4526, 16.201, 2.95189, 0.29 ) }
    dend_6 { pt3dadd( 15.9154, 16.5797, 3.0944, 0.15 ) }
    dend_6 { pt3dadd( 16.6737, 17.201, 3.38625, 0.73 ) }
    dend_6 { pt3dadd( 17.5186, 17.9182, 3.75704, 0.07 ) }
    dend_6 { pt3dadd( 18.0979, 18.4758, 4.02545, 1.24 ) }
    dend_6 { pt3dadd( 18.2646, 18.6647, 4.10286, 1.24 ) }
    dend_6 { pt3dadd( 18.8242, 19.4348, 4.33812, 0.15 ) }
    dend_6 { pt3dadd( 18.9939, 19.7184, 4.39415, 0.15 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_6 { pt3dadd( 19.1601, 20.0414, 4.42024, 0.44 ) }
    dend_6 { pt3dadd( 19.603, 20.9573, 4.42135, 0.44 ) }
    dend_6 { pt3dadd( 20.009, 21.8007, 4.40427, 0.15 ) }
    dend_6 { pt3dadd( 20.2113, 22.216, 4.3981, 0.73 ) }
    dend_6 { pt3dadd( 20.4562, 22.7137, 4.39383, 1.31 ) }
    dend_6 { pt3dadd( 20.6823, 23.145, 4.39333, 1.02 ) }
    dend_6 { pt3dadd( 21.1927, 24.0175, 4.39108, 0.15 ) }
    dend_6 { pt3dadd( 21.5444, 24.5418, 4.38955, 0.36 ) }
    dend_6 { pt3dadd( 21.7641, 24.8357, 4.37071, 0.36 ) }
    dend_6 { pt3dadd( 22.0128, 25.1588, 4.33725, 0.51 ) }
    dend_6 { pt3dadd( 22.4479, 25.7287, 4.27928, 0.22 ) }
    dend_6 { pt3dadd( 22.7716, 26.1814, 4.23773, 0.36 ) }
    dend_6 { pt3dadd( 23.0118, 26.5587, 4.21451, 0.8 ) }
    dend_6 { pt3dadd( 23.3992, 27.2374, 4.21048, 0.8 ) }
    dend_6 { pt3dadd( 23.6938, 27.7809, 4.24009, 0.07 ) }
    dend_6 { pt3dadd( 23.9041, 28.1505, 4.28556, 0.07 ) }
    dend_6 { pt3dadd( 24.0814, 28.4434, 4.34144, 0.07 ) }
    dend_6 { pt3dadd( 24.2832, 28.7143, 4.4106, 0.07 ) }
    dend_6 { pt3dadd( 24.7138, 29.1851, 4.54872, 0.44 ) }
    dend_6 { pt3dadd( 25.0616, 29.4877, 4.61242, 0.44 ) }
    dend_6 { pt3dadd( 25.6396, 29.9306, 4.64075, 0.66 ) }
    dend_6 { pt3dadd( 26.1367, 30.3126, 4.62854, 1.24 ) }
    dend_6 { pt3dadd( 26.4628, 30.5881, 4.60528, 1.53 ) }
    dend_6 { pt3dadd( 26.5604, 30.6841, 4.59165, 1.53 ) }
    dend_6 { pt3dadd( 27.2743, 31.5534, 4.45606, 0.22 ) }
    dend_6 { pt3dadd( 27.5696, 31.997, 4.38969, 0.22 ) }
    dend_6 { pt3dadd( 27.8366, 32.4847, 4.32123, 0.36 ) }
    dend_6 { pt3dadd( 28.1376, 33.1337, 4.2184, 0.29 ) }
    dend_6 { pt3dadd( 28.3814, 33.7641, 4.14339, 0.29 ) }
    dend_6 { pt3dadd( 28.5938, 34.4613, 4.0862, 0.29 ) }
    dend_6 { pt3dadd( 28.7064, 35.0326, 4.06258, 0.88 ) }
    dend_6 { pt3dadd( 28.7439, 35.3927, 4.05366, 0.88 ) }
    dend_6 { pt3dadd( 28.7806, 36.3264, 4.03101, 0.07 ) }
    dend_6 { pt3dadd( 28.7771, 37.1298, 4.00378, 0.29 ) }
    dend_6 { pt3dadd( 28.7676, 37.7642, 3.98054, 0.29 ) }
    dend_6 { pt3dadd( 28.7818, 38.2406, 3.95373, 0.29 ) }
    dend_6 { pt3dadd( 28.8986, 39.048, 3.88632, 0.07 ) }
    dend_6 { pt3dadd( 28.9965, 39.3777, 3.82912, 0.07 ) }
    dend_6 { pt3dadd( 29.191, 39.8133, 3.71428, 0.29 ) }
    dend_6 { pt3dadd( 29.4916, 40.3864, 3.51904, 0.88 ) }
    dend_6 { pt3dadd( 29.8701, 41.0427, 3.29674, 0.51 ) }
    dend_6 { pt3dadd( 30.1811, 41.6124, 3.12402, 0.15 ) }
    dend_6 { pt3dadd( 30.488, 42.3042, 2.92563, 0.15 ) }
    dend_6 { pt3dadd( 30.6352, 42.7905, 2.80458, 0.15 ) }
    dend_6 { pt3dadd( 30.7781, 43.6305, 2.61583, 1.31 ) }
    dend_6 { pt3dadd( 30.8067, 44.1209, 2.53782, 1.61 ) }
    dend_6 { pt3dadd( 30.8034, 44.9835, 2.4497, 1.82 ) }
    dend_6 { pt3dadd( 30.7828, 46.0134, 2.36249, 0.29 ) }
    dend_6 { pt3dadd( 30.7828, 46.5027, 2.32288, 0.22 ) }
    dend_6 { pt3dadd( 30.8162, 47.1714, 2.24846, 0.29 ) }
    dend_6 { pt3dadd( 30.9287, 48.146, 2.11141, 0.07 ) }
    dend_6 { pt3dadd( 31.0033, 48.4775, 2.05157, 0.07 ) }
    dend_6 { pt3dadd( 31.3248, 49.3474, 1.8692, 0.07 ) }
    dend_6 { pt3dadd( 31.6755, 50.033, 1.77098, 0.22 ) }
    dend_6 { pt3dadd( 32.0531, 50.6337, 1.723, 1.31 ) }
    dend_6 { pt3dadd( 32.4965, 51.2252, 1.74706, 0.95 ) }
    dend_6 { pt3dadd( 33.2072, 52.0934, 1.84885, 0.15 ) }
    dend_6 { pt3dadd( 33.5955, 52.5663, 1.95244, 0.15 ) }
    dend_6 { pt3dadd( 34.3328, 53.4645, 2.23951, 0.8 ) }
    dend_6 { pt3dadd( 34.8246, 54.0511, 2.47186, 1.75 ) }
    dend_6 { pt3dadd( 35.8126, 55.2023, 2.97266, 0.15 ) }
    dend_6 { pt3dadd( 36.0416, 55.4629, 3.09261, 0.15 ) }
    dend_6 { pt3dadd( 36.4773, 55.9456, 3.30564, 0.15 ) }
    dend_6 { pt3dadd( 36.6977, 56.1843, 3.37895, 0.15 ) }
    dend_6 { pt3dadd( 36.9688, 56.4713, 3.42076, 0.15 ) }
    dend_6 { pt3dadd( 37.507, 57.0536, 3.45025, 0.44 ) }
    dend_6 { pt3dadd( 37.835, 57.4388, 3.43829, 0.66 ) }
    dend_6 { pt3dadd( 38.6084, 58.4114, 3.44711, 0.15 ) }
    dend_6 { pt3dadd( 39.1239, 59.0972, 3.47172, 0.8 ) }
    dend_6 { pt3dadd( 39.2614, 59.2917, 3.48801, 0.8 ) }
    dend_6 { pt3dadd( 39.6537, 59.8976, 3.55578, 0.15 ) }
    dend_6 { pt3dadd( 40.1169, 60.6759, 3.67346, 0.07 ) }
    dend_6 { pt3dadd( 40.6002, 61.5308, 3.83134, 1.68 ) }
    dend_6 { pt3dadd( 40.9854, 62.2185, 4.0009, 1.46 ) }
    dend_6 { pt3dadd( 41.5206, 63.102, 4.26253, 0.15 ) }
    dend_6 { pt3dadd( 41.7463, 63.4266, 4.36354, 0.51 ) }
    dend_6 { pt3dadd( 41.9099, 63.6325, 4.43397, 0.51 ) }
    dend_6 { pt3dadd( 42.2971, 64.0691, 4.58618, 0.15 ) }
    dend_6 { pt3dadd( 42.8088, 64.6289, 4.75649, 0.36 ) }
    dend_6 { pt3dadd( 43.0954, 64.9404, 4.85247, 0.36 ) }
    dend_6 { pt3dadd( 43.4349, 65.3226, 4.95977, 0.22 ) }
    dend_6 { pt3dadd( 43.7598, 65.7118, 5.0675, 0.22 ) }
    dend_6 { pt3dadd( 43.9744, 66.0011, 5.13868, 0.22 ) }
    dend_6 { pt3dadd( 44.1533, 66.2701, 5.19515, 0.22 ) }
    dend_6 { pt3dadd( 44.2876, 66.4881, 5.22764, 0.22 ) }
    dend_6 { pt3dadd( 44.377, 66.6346, 5.2493, 0.22 ) }
    dend_6 { pt3dadd( 44.5772, 66.9531, 5.30213, 0.22 ) }
    dend_6 { pt3dadd( 44.8418, 67.355, 5.36819, 0.22 ) }
    dend_6 { pt3dadd( 45.3404, 68.1023, 5.46957, 1.61 ) }
    dend_6 { pt3dadd( 45.5783, 68.4427, 5.50875, 1.61 ) }
    dend_6 { pt3dadd( 46.3264, 69.5118, 5.60719, 0.29 ) }
    dend_6 { pt3dadd( 46.7709, 70.1524, 5.68247, 0.07 ) }
    dend_6 { pt3dadd( 47.2023, 70.791, 5.7669, 0.66 ) }
    dend_6 { pt3dadd( 47.604, 71.4517, 5.86449, 0.66 ) }
    dend_6 { pt3dadd( 47.8547, 71.9344, 5.94432, 0.66 ) }
    dend_6 { pt3dadd( 48.2278, 72.8099, 6.1023, 0.07 ) }
    dend_6 { pt3dadd( 48.5565, 73.7711, 6.28146, 0.8 ) }
    dend_6 { pt3dadd( 48.6199, 73.998, 6.32491, 1.17 ) }
    dend_6 { pt3dadd( 48.8204, 74.8328, 6.49689, 0.07 ) }
    dend_6 { pt3dadd( 48.9477, 75.3949, 6.61652, 0.22 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_6 { pt3dadd( 49.1428, 76.2763, 6.78232, 0.07 ) }
    dend_6 { pt3dadd( 49.3018, 76.9825, 6.88697, 0.58 ) }
    dend_6 { pt3dadd( 49.3323, 77.1261, 6.90006, 0.58 ) }
    dend_6 { pt3dadd( 49.4884, 77.9888, 6.976, 0.22 ) }
    dend_6 { pt3dadd( 49.5708, 78.5914, 7.02168, 0.22 ) }
    dend_6 { pt3dadd( 49.5806, 79.018, 7.05151, 0.22 ) }
    dend_6 { pt3dadd( 49.4913, 79.7369, 7.11045, 0.07 ) }
    dend_6 { pt3dadd( 49.4051, 80.1349, 7.14626, 0.07 ) }
    dend_6 { pt3dadd( 49.1857, 80.8434, 7.21314, 0.66 ) }
    dend_6 { pt3dadd( 49.0528, 81.117, 7.24082, 0.95 ) }
    dend_6 { pt3dadd( 48.5621, 81.8906, 7.32692, 0.07 ) }
    dend_6 { pt3dadd( 48.3399, 82.1812, 7.36096, 0.29 ) }
    dend_6 { pt3dadd( 52.0311, 87.3679, 8.15873, 0.29 ) }
    // Section: dend_1, id: dend_1, parent: soma_0 (entry count 13/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 0.774266, 9.4846, 1.41, 0.95 ) }
    dend_1 { pt3dadd( 0.41852, 10.6515, 1.63843, 0.95 ) }
    dend_1 { pt3dadd( 0.0657147, 11.8086, 1.86497, 0.95 ) }
    dend_1 { pt3dadd( -0.472062, 13.5725, 2.21029, 1.17 ) }
    dend_1 { pt3dadd( -0.748529, 14.4793, 2.38781, 1.39 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 18/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -3.28573, 8.63385, -0.0300002, 0.8 ) }
    dend_0 { pt3dadd( -3.69556, 9.06915, 0.10196, 0.88 ) }
    dend_0 { pt3dadd( -4.70383, 10.2275, 0.464771, 0.88 ) }
    dend_0 { pt3dadd( -5.37042, 11.0638, 0.72138, 0.88 ) }
    dend_0 { pt3dadd( -6.21397, 12.2077, 1.03035, 0.88 ) }
    dend_0 { pt3dadd( -6.79448, 13.0302, 1.20617, 0.44 ) }
    dend_0 { pt3dadd( -7.29953, 13.7552, 1.32484, 0.44 ) }
    dend_0 { pt3dadd( -7.70949, 14.378, 1.39393, 0.44 ) }
    dend_0 { pt3dadd( -7.95809, 14.7699, 1.40949, 0.44 ) }
    dend_0 { pt3dadd( -8.35658, 15.2859, 1.3436, 0.44 ) }
    dend_0 { pt3dadd( -8.88153, 15.8208, 1.19668, 0.66 ) }
    dend_0 { pt3dadd( -9.59837, 16.4006, 1.01898, 1.02 ) }
    dend_0 { pt3dadd( -10.2094, 16.8147, 0.937497, 1.53 ) }
    dend_0 { pt3dadd( -10.7348, 17.136, 0.948097, 1.53 ) }
    dend_0 { pt3dadd( -12.38, 18.1076, 1.14805, 0.66 ) }
    dend_0 { pt3dadd( -13.3451, 18.6738, 1.35912, 0.73 ) }
    dend_0 { pt3dadd( -14.5398, 19.4032, 1.74306, 1.09 ) }
    dend_0 { pt3dadd( -15.6662, 20.1698, 2.2445, 0.22 ) }
    dend_0 { pt3dadd( -16.6998, 20.9766, 2.86423, 0.22 ) }
    dend_0 { pt3dadd( -16.9295, 21.2106, 3.06021, 0.22 ) }
    dend_0 { pt3dadd( -16.9896, 21.3201, 3.15315, 0.22 ) }
    dend_0 { pt3dadd( -17.1276, 21.7398, 3.4451, 0.22 ) }
    dend_0 { pt3dadd( -17.3649, 22.7681, 3.99628, 1.09 ) }
    dend_0 { pt3dadd( -17.4358, 23.0653, 4.10963, 1.46 ) }
    dend_0 { pt3dadd( -17.659, 23.6792, 4.29229, 1.46 ) }
    dend_0 { pt3dadd( -18.2692, 25.0134, 4.73068, 0.07 ) }
    dend_0 { pt3dadd( -18.6053, 25.634, 4.95138, 0.66 ) }
    dend_0 { pt3dadd( -18.8633, 26.0506, 5.10132, 1.24 ) }
    dend_0 { pt3dadd( -18.9913, 26.2381, 5.16738, 1.24 ) }
    dend_0 { pt3dadd( -19.6753, 27.1997, 5.49758, 0.51 ) }
    dend_0 { pt3dadd( -20.2796, 28.0251, 5.76379, 0.51 ) }
    dend_0 { pt3dadd( -20.8648, 28.851, 5.98644, 0.58 ) }
    dend_0 { pt3dadd( -21.6282, 30.027, 6.25681, 0.44 ) }
    dend_0 { pt3dadd( -22.3816, 31.2303, 6.51621, 0.44 ) }
    dend_0 { pt3dadd( -22.8672, 31.994, 6.66876, 0.88 ) }
    dend_0 { pt3dadd( -23.3848, 32.7503, 6.80413, 0.88 ) }
    dend_0 { pt3dadd( -24.3695, 34.0458, 7.02429, 0.36 ) }
    dend_0 { pt3dadd( -24.9026, 34.711, 7.14049, 0.36 ) }
    dend_0 { pt3dadd( -25.4421, 35.3635, 7.25939, 0.36 ) }
    dend_0 { pt3dadd( -26.0675, 36.1255, 7.39989, 0.8 ) }
    dend_0 { pt3dadd( -26.9436, 37.2455, 7.60106, 0.58 ) }
    dend_0 { pt3dadd( -27.4355, 37.9848, 7.7136, 0.36 ) }
    dend_0 { pt3dadd( -27.8977, 38.8912, 7.81595, 0.8 ) }
    dend_0 { pt3dadd( -28.2731, 40.0086, 7.88674, 0.58 ) }
    dend_0 { pt3dadd( -28.4022, 40.8966, 7.89283, 1.31 ) }
    dend_0 { pt3dadd( -28.3891, 41.8288, 7.85027, 1.31 ) }
    dend_0 { pt3dadd( -28.1797, 43.4254, 7.72754, 0.44 ) }
    dend_0 { pt3dadd( -28.023, 44.3075, 7.64128, 0.36 ) }
    dend_0 { pt3dadd( -27.8704, 45.0501, 7.56459, 0.66 ) }
    dend_0 { pt3dadd( -27.5356, 46.4138, 7.41436, 0.29 ) }
    dend_0 { pt3dadd( -27.1403, 47.7992, 7.21244, 0.51 ) }
    dend_0 { pt3dadd( -26.6168, 49.4497, 6.91809, 0.15 ) }
    dend_0 { pt3dadd( -26.442, 49.9535, 6.83399, 0.15 ) }
    dend_0 { pt3dadd( -26.2719, 50.3867, 6.7683, 0.15 ) }
    dend_0 { pt3dadd( -25.9526, 51.107, 6.67132, 0.58 ) }
    dend_0 { pt3dadd( -25.2868, 52.3809, 6.54268, 0.22 ) }
    dend_0 { pt3dadd( -24.879, 53.0627, 6.50081, 0.22 ) }
    dend_0 { pt3dadd( -24.0742, 54.365, 6.50028, 0.8 ) }
    dend_0 { pt3dadd( -23.5766, 55.2603, 6.56046, 0.15 ) }
    dend_0 { pt3dadd( -23.2465, 55.975, 6.6048, 0.15 ) }
    dend_0 { pt3dadd( -23.0778, 56.4959, 6.65184, 0.15 ) }
    dend_0 { pt3dadd( -22.8445, 57.5744, 6.80379, 0.36 ) }
    dend_0 { pt3dadd( -22.6435, 58.8024, 6.96105, 0.8 ) }
    dend_0 { pt3dadd( -22.4945, 59.8806, 7.06478, 0.58 ) }
    dend_0 { pt3dadd( -22.3339, 61.4408, 7.22725, 0.73 ) }
    dend_0 { pt3dadd( -22.2259, 62.6938, 7.35468, 0.44 ) }
    dend_0 { pt3dadd( -22.1464, 63.8268, 7.44964, 0.22 ) }
    dend_0 { pt3dadd( -22.0945, 64.7261, 7.51948, 0.73 ) }
    dend_0 { pt3dadd( -22.0123, 65.4423, 7.53723, 0.73 ) }
    dend_0 { pt3dadd( -24.5241, 74.1059, 7.69707, 0.73 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 88/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( -3.70455, 11.6825, 0.0, 0.846941 ) }
    axon_0 { pt3dadd( -7.06447, 26.3014, 0.0, 0.846941 ) }
    axon_0 { pt3dadd( -10.4244, 40.9202, 0.0, 0.846941 ) }
    // Section: dend_14, id: dend_14, parent: dend_10 (entry count 91/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 2.35033, -14.8486, -1.4517, 0.8 ) }
    dend_14 { pt3dadd( 3.59022, -14.9949, -1.10217, 0.8 ) }
    dend_14 { pt3dadd( 4.80396, -15.2564, -0.844893, 0.58 ) }
    dend_14 { pt3dadd( 5.42835, -15.4521, -0.766969, 0.58 ) }
    dend_14 { pt3dadd( 5.91844, -15.6281, -0.722244, 0.58 ) }
    dend_14 { pt3dadd( 6.7635, -15.9502, -0.656408, 0.51 ) }
    dend_14 { pt3dadd( 7.62486, -16.2828, -0.597861, 1.17 ) }
    dend_14 { pt3dadd( 8.48678, -16.6249, -0.582487, 1.17 ) }
    dend_14 { pt3dadd( 10.5154, -17.4362, -0.590845, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_14 { pt3dadd( 11.4527, -17.8225, -0.591851, 0.66 ) }
    dend_14 { pt3dadd( 12.4216, -18.2173, -0.589508, 0.66 ) }
    dend_14 { pt3dadd( 13.1799, -18.5145, -0.584113, 0.66 ) }
    dend_14 { pt3dadd( 14.4859, -18.9747, -0.568383, 1.39 ) }
    dend_14 { pt3dadd( 15.6864, -19.3349, -0.547153, 1.53 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 5/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 2.35033, -14.8486, -1.4517, 1.02 ) }
    dend_11 { pt3dadd( 2.86312, -16.8679, -1.71717, 1.02 ) }
    dend_11 { pt3dadd( 3.38789, -18.5456, -1.79457, 0.88 ) }
    dend_11 { pt3dadd( 3.93228, -19.8967, -1.78611, 1.02 ) }
    dend_11 { pt3dadd( 4.49823, -21.057, -1.73863, 0.8 ) }
    dend_11 { pt3dadd( 5.31194, -22.3693, -1.60638, 0.51 ) }
    dend_11 { pt3dadd( 6.34506, -23.7511, -1.38893, 0.51 ) }
    dend_11 { pt3dadd( 7.15549, -24.4914, -1.14393, 0.51 ) }
    dend_11 { pt3dadd( 8.14963, -25.1956, -0.769604, 0.73 ) }
    dend_11 { pt3dadd( 8.74067, -25.5711, -0.500923, 0.73 ) }
    dend_11 { pt3dadd( 10.1578, -26.4429, 0.179679, 0.44 ) }
    dend_11 { pt3dadd( 10.7757, -26.7854, 0.480749, 0.44 ) }
    dend_11 { pt3dadd( 11.4589, -27.1596, 0.803379, 0.44 ) }
    dend_11 { pt3dadd( 12.385, -27.7512, 1.242, 0.44 ) }
    dend_11 { pt3dadd( 13.3662, -28.5723, 1.80835, 1.31 ) }
    dend_11 { pt3dadd( 13.9471, -29.2273, 2.20102, 1.68 ) }
    // Section: dend_5, id: dend_5, parent: dend_1 (entry count 21/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -0.748529, 14.4793, 2.38781, 0.44 ) }
    dend_5 { pt3dadd( -0.098487, 15.2951, 3.39664, 0.44 ) }
    dend_5 { pt3dadd( 0.125124, 15.5362, 3.6211, 0.44 ) }
    dend_5 { pt3dadd( 1.32879, 16.6994, 4.45999, 0.66 ) }
    dend_5 { pt3dadd( 1.9826, 17.2927, 4.81892, 0.95 ) }
    dend_5 { pt3dadd( 3.17294, 18.3225, 5.35457, 0.51 ) }
    dend_5 { pt3dadd( 4.5109, 19.398, 5.91591, 0.51 ) }
    dend_5 { pt3dadd( 6.14667, 20.5989, 6.54642, 0.22 ) }
    dend_5 { pt3dadd( 7.44145, 21.5311, 7.01855, 0.88 ) }
    dend_5 { pt3dadd( 8.19456, 22.0907, 7.28766, 1.09 ) }
    dend_5 { pt3dadd( 9.05698, 22.7896, 7.63674, 0.73 ) }
    dend_5 { pt3dadd( 10.5733, 24.2248, 8.32894, 0.44 ) }
    dend_5 { pt3dadd( 11.8252, 25.7302, 9.10888, 0.22 ) }
    dend_5 { pt3dadd( 12.0215, 26.2428, 9.45468, 0.22 ) }
    dend_5 { pt3dadd( 11.8805, 27.213, 10.1339, 0.95 ) }
    dend_5 { pt3dadd( 11.5484, 27.8844, 10.5926, 0.95 ) }
    dend_5 { pt3dadd( 10.7595, 29.0259, 11.278, 0.22 ) }
    dend_5 { pt3dadd( 9.89952, 30.1627, 11.8061, 0.22 ) }
    dend_5 { pt3dadd( 9.31463, 31.0426, 12.1134, 0.22 ) }
    dend_5 { pt3dadd( 9.09884, 31.4954, 12.2379, 0.22 ) }
    dend_5 { pt3dadd( 8.86412, 32.2009, 12.379, 0.22 ) }
    dend_5 { pt3dadd( 8.5544, 33.5718, 12.592, 0.73 ) }
    dend_5 { pt3dadd( 8.36977, 35.0833, 12.7099, 1.02 ) }
    dend_5 { pt3dadd( 8.30985, 36.7544, 12.7161, 0.44 ) }
    dend_5 { pt3dadd( 8.33708, 37.757, 12.6599, 0.15 ) }
    dend_5 { pt3dadd( 8.39483, 38.6955, 12.5745, 0.15 ) }
    dend_5 { pt3dadd( 8.50428, 39.5809, 12.4681, 0.15 ) }
    dend_5 { pt3dadd( 8.75654, 40.8293, 12.3085, 0.58 ) }
    dend_5 { pt3dadd( 9.13283, 42.3134, 12.1292, 0.29 ) }
    dend_5 { pt3dadd( 9.51544, 43.8093, 12.0263, 0.58 ) }
    dend_5 { pt3dadd( 9.69997, 44.5184, 12.0146, 0.58 ) }
    dend_5 { pt3dadd( 10.1116, 46.0994, 12.1009, 0.22 ) }
    dend_5 { pt3dadd( 10.3451, 47.1438, 12.2413, 0.22 ) }
    dend_5 { pt3dadd( 10.6211, 48.6116, 12.5257, 0.22 ) }
    dend_5 { pt3dadd( 10.8725, 50.236, 12.8467, 0.8 ) }
    dend_5 { pt3dadd( 11.0348, 51.4143, 13.0556, 1.02 ) }
    dend_5 { pt3dadd( 11.2769, 53.2543, 13.288, 1.02 ) }
    dend_5 { pt3dadd( 11.5402, 55.4639, 13.4543, 0.07 ) }
    dend_5 { pt3dadd( 11.723, 57.021, 13.5567, 0.95 ) }
    dend_5 { pt3dadd( 11.9539, 58.7077, 13.7299, 0.44 ) }
    dend_5 { pt3dadd( 12.1316, 59.9155, 13.8942, 0.44 ) }
    dend_5 { pt3dadd( 12.2819, 61.2575, 14.181, 0.44 ) }
    dend_5 { pt3dadd( 12.3801, 62.5528, 14.5397, 0.15 ) }
    dend_5 { pt3dadd( 12.4533, 64.3442, 15.1348, 0.73 ) }
    dend_5 { pt3dadd( 12.497, 66.5186, 15.9585, 1.31 ) }
    dend_5 { pt3dadd( 12.5293, 67.5928, 16.4012, 1.82 ) }
    dend_5 { pt3dadd( 12.6246, 69.6693, 17.2539, 0.73 ) }
    dend_5 { pt3dadd( 12.7139, 70.8322, 17.6961, 0.51 ) }
    dend_5 { pt3dadd( 12.9443, 72.7117, 18.2364, 0.29 ) }
    dend_5 { pt3dadd( 13.1049, 73.5807, 18.3842, 0.29 ) }
    dend_5 { pt3dadd( 13.3763, 74.544, 18.454, 0.29 ) }
    dend_5 { pt3dadd( 13.7918, 75.4918, 18.4864, 0.73 ) }
    dend_5 { pt3dadd( 14.2084, 76.1775, 18.5135, 0.73 ) }
    dend_5 { pt3dadd( 15.1698, 77.4881, 18.5992, 0.22 ) }
    dend_5 { pt3dadd( 16.1935, 78.74, 18.7389, 0.66 ) }
    dend_5 { pt3dadd( 17.3671, 80.2016, 18.9582, 0.51 ) }
    dend_5 { pt3dadd( 18.4494, 81.7128, 19.2514, 0.36 ) }
    dend_5 { pt3dadd( 19.1077, 82.7977, 19.4895, 0.36 ) }
    dend_5 { pt3dadd( 19.4319, 83.5909, 19.6638, 0.8 ) }
    dend_5 { pt3dadd( 19.7243, 84.9478, 19.948, 0.58 ) }
    dend_5 { pt3dadd( 19.8096, 86.2988, 20.1972, 0.44 ) }
    dend_5 { pt3dadd( 19.7485, 88.1894, 20.5167, 0.44 ) }
    dend_5 { pt3dadd( 19.6108, 89.7724, 20.7336, 0.44 ) }
    dend_5 { pt3dadd( 19.3491, 92.334, 20.9876, 0.36 ) }
    dend_5 { pt3dadd( 19.2061, 93.7187, 21.0912, 0.22 ) }
    dend_5 { pt3dadd( 19.1392, 94.9481, 21.1395, 0.15 ) }
    dend_5 { pt3dadd( 19.1188, 95.6826, 21.1546, 0.15 ) }
    dend_5 { pt3dadd( 19.1538, 96.6878, 21.1528, 1.02 ) }
    dend_5 { pt3dadd( 19.2043, 97.1186, 21.1515, 1.02 ) }
    dend_5 { pt3dadd( 19.6931, 99.0406, 21.1414, 0.51 ) }
    dend_5 { pt3dadd( 20.2546, 100.897, 21.1301, 0.29 ) }
    dend_5 { pt3dadd( 20.8195, 112.852, 22.3272, 0.29 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 93/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -0.748529, 14.4793, 2.38781, 0.29 ) }
    dend_2 { pt3dadd( -0.212558, 15.68, 1.74662, 0.29 ) }
    dend_2 { pt3dadd( 0.176844, 16.3853, 1.41847, 0.88 ) }
    dend_2 { pt3dadd( 0.550702, 16.9584, 1.17093, 1.02 ) }
    dend_2 { pt3dadd( 1.25315, 17.7213, 0.917089, 0.58 ) }
    dend_2 { pt3dadd( 1.67296, 18.0556, 0.859187, 0.22 ) }
    dend_2 { pt3dadd( 2.2508, 18.4591, 0.828617, 0.8 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_2 { pt3dadd( 2.86127, 18.8379, 0.883485, 1.31 ) }
    dend_2 { pt3dadd( 3.19078, 19.0267, 0.914788, 1.31 ) }
    dend_2 { pt3dadd( 4.71817, 19.8973, 1.04395, 0.29 ) }
    dend_2 { pt3dadd( 5.97819, 20.6431, 1.14967, 0.51 ) }
    dend_2 { pt3dadd( 6.43612, 20.9997, 1.18039, 0.51 ) }
    dend_2 { pt3dadd( 6.97534, 21.6847, 1.19246, 0.07 ) }
    dend_2 { pt3dadd( 7.30867, 22.622, 1.14939, 0.07 ) }
    dend_2 { pt3dadd( 7.42966, 23.5663, 1.07113, 0.66 ) }
    dend_2 { pt3dadd( 7.44817, 24.0083, 1.02621, 0.66 ) }
    dend_2 { pt3dadd( 7.51768, 25.4657, 0.927361, 0.29 ) }
    dend_2 { pt3dadd( 7.58762, 26.173, 0.931427, 0.07 ) }
    dend_2 { pt3dadd( 7.71036, 26.9562, 0.984104, 0.88 ) }
    dend_2 { pt3dadd( 7.85591, 27.5254, 1.05174, 0.88 ) }
    dend_2 { pt3dadd( 8.54136, 29.4606, 1.2312, 0.07 ) }
    dend_2 { pt3dadd( 8.98527, 30.5019, 1.3005, 1.46 ) }
    dend_2 { pt3dadd( 9.41625, 31.357, 1.3386, 1.97 ) }
    dend_2 { pt3dadd( 9.53311, 31.5695, 1.34894, 1.97 ) }
    dend_2 { pt3dadd( 10.4067, 33.0836, 1.47136, 0.29 ) }
    dend_2 { pt3dadd( 11.0391, 34.1431, 1.61746, 0.88 ) }
    dend_2 { pt3dadd( 11.615, 35.0978, 1.75914, 0.29 ) }
    dend_2 { pt3dadd( 11.9412, 35.6523, 1.84767, 0.29 ) }
    dend_2 { pt3dadd( 12.3844, 36.5076, 2.02915, 0.29 ) }
    dend_2 { pt3dadd( 12.7414, 37.3346, 2.27512, 0.29 ) }
    dend_2 { pt3dadd( 13.0317, 38.1939, 2.59946, 0.29 ) }
    dend_2 { pt3dadd( 13.2807, 39.2687, 3.02948, 1.31 ) }
    dend_2 { pt3dadd( 13.3929, 40.363, 3.44583, 1.53 ) }
    dend_2 { pt3dadd( 13.3916, 42.0144, 4.03501, 0.73 ) }
    dend_2 { pt3dadd( 13.3269, 42.8087, 4.28857, 0.36 ) }
    dend_2 { pt3dadd( 13.251, 43.368, 4.45238, 0.66 ) }
    dend_2 { pt3dadd( 13.0257, 44.6245, 4.82344, 0.29 ) }
    dend_2 { pt3dadd( 12.7364, 46.0828, 5.33541, 0.22 ) }
    dend_2 { pt3dadd( 12.5948, 46.8506, 5.60448, 0.22 ) }
    dend_2 { pt3dadd( 12.5491, 47.249, 5.7542, 0.22 ) }
    dend_2 { pt3dadd( 12.58, 47.6053, 5.92231, 0.22 ) }
    dend_2 { pt3dadd( 12.8076, 48.0636, 6.1586, 0.22 ) }
    dend_2 { pt3dadd( 13.446, 48.5852, 6.41109, 0.22 ) }
    dend_2 { pt3dadd( 14.3332, 49.1239, 6.67099, 0.58 ) }
    dend_2 { pt3dadd( 15.4467, 49.6955, 6.94671, 0.36 ) }
    dend_2 { pt3dadd( 16.4357, 50.1412, 7.16855, 0.36 ) }
    dend_2 { pt3dadd( 18.109, 50.8014, 7.48802, 1.46 ) }
    dend_2 { pt3dadd( 19.25, 51.1989, 7.63394, 2.12 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 41/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( -10.4244, 40.9202, 0.0, 0.15 ) }
    axon_1 { pt3dadd( -13.7843, 55.5391, 0.0, 0.15 ) }
    axon_1 { pt3dadd( -17.1442, 70.1579, 0.0, 0.15 ) }
    // Section: dend_16, id: dend_16, parent: dend_14 (entry count 44/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 15.6864, -19.3349, -0.547153, 0.51 ) }
    dend_16 { pt3dadd( 16.7917, -18.3129, 0.0953102, 0.51 ) }
    dend_16 { pt3dadd( 17.4337, -17.605, 0.580529, 0.51 ) }
    dend_16 { pt3dadd( 17.7925, -17.0891, 0.917168, 0.36 ) }
    dend_16 { pt3dadd( 17.962, -16.769, 1.10616, 0.36 ) }
    dend_16 { pt3dadd( 18.2062, -16.2128, 1.43569, 0.36 ) }
    dend_16 { pt3dadd( 18.4346, -15.6652, 1.76961, 0.36 ) }
    dend_16 { pt3dadd( 18.6257, -15.0493, 2.15727, 0.36 ) }
    dend_16 { pt3dadd( 18.8831, -14.3428, 2.62672, 0.58 ) }
    dend_16 { pt3dadd( 19.2202, -13.6856, 3.09854, 0.44 ) }
    dend_16 { pt3dadd( 19.7285, -13.1383, 3.55005, 0.36 ) }
    dend_16 { pt3dadd( 20.2498, -12.8054, 3.91022, 0.36 ) }
    dend_16 { pt3dadd( 20.764, -12.5955, 4.20627, 0.36 ) }
    dend_16 { pt3dadd( 21.9016, -12.2415, 4.82126, 0.8 ) }
    dend_16 { pt3dadd( 22.8004, -12.0013, 5.28289, 0.8 ) }
    dend_16 { pt3dadd( 24.3147, -11.6079, 6.00772, 0.58 ) }
    dend_16 { pt3dadd( 25.4266, -11.2919, 6.49319, 0.58 ) }
    dend_16 { pt3dadd( 26.3903, -10.9921, 6.88393, 0.88 ) }
    dend_16 { pt3dadd( 27.4389, -10.6428, 7.27921, 0.58 ) }
    dend_16 { pt3dadd( 28.2838, -10.3504, 7.5672, 0.8 ) }
    dend_16 { pt3dadd( 29.3855, -9.97254, 7.8935, 0.51 ) }
    dend_16 { pt3dadd( 30.4035, -9.65366, 8.1377, 0.51 ) }
    dend_16 { pt3dadd( 31.5083, -9.38191, 8.32642, 0.51 ) }
    dend_16 { pt3dadd( 32.324, -9.22901, 8.44341, 0.51 ) }
    dend_16 { pt3dadd( 33.1497, -9.10127, 8.5354, 0.51 ) }
    dend_16 { pt3dadd( 33.7555, -8.9993, 8.60532, 0.51 ) }
    dend_16 { pt3dadd( 34.5874, -8.8, 8.73576, 0.51 ) }
    dend_16 { pt3dadd( 35.1279, -8.48149, 8.87623, 0.29 ) }
    dend_16 { pt3dadd( 35.4405, -8.10789, 9.00379, 0.29 ) }
    dend_16 { pt3dadd( 35.9574, -7.25993, 9.25887, 0.36 ) }
    dend_16 { pt3dadd( 36.3456, -6.5397, 9.46024, 0.73 ) }
    dend_16 { pt3dadd( 36.7383, -5.77943, 9.66579, 0.73 ) }
    dend_16 { pt3dadd( 37.5241, -4.29555, 10.073, 0.22 ) }
    dend_16 { pt3dadd( 38.1283, -3.26488, 10.366, 0.22 ) }
    dend_16 { pt3dadd( 38.8479, -2.23668, 10.6744, 0.88 ) }
    dend_16 { pt3dadd( 39.5752, -1.43868, 10.9321, 0.29 ) }
    dend_16 { pt3dadd( 39.8743, -1.1998, 11.0144, 0.29 ) }
    dend_16 { pt3dadd( 40.4559, -0.884432, 11.1275, 0.15 ) }
    dend_16 { pt3dadd( 41.0521, -0.711697, 11.2245, 0.15 ) }
    dend_16 { pt3dadd( 41.7546, -0.569383, 11.3471, 0.15 ) }
    dend_16 { pt3dadd( 42.2666, -0.481069, 11.4753, 0.15 ) }
    dend_16 { pt3dadd( 42.7805, -0.360289, 11.6419, 0.15 ) }
    dend_16 { pt3dadd( 43.5014, -0.132502, 11.9255, 0.58 ) }
    dend_16 { pt3dadd( 44.6882, 0.337257, 12.4399, 0.15 ) }
    dend_16 { pt3dadd( 46.0286, 0.951098, 13.0459, 0.15 ) }
    dend_16 { pt3dadd( 46.8888, 1.38825, 13.4423, 0.15 ) }
    dend_16 { pt3dadd( 47.968, 1.95066, 13.9344, 0.15 ) }
    dend_16 { pt3dadd( 49.2867, 2.60785, 14.5308, 0.95 ) }
    dend_16 { pt3dadd( 49.7888, 2.84799, 14.7588, 0.95 ) }
    dend_16 { pt3dadd( 50.705, 3.29665, 15.176, 0.22 ) }
    dend_16 { pt3dadd( 51.4395, 3.68653, 15.4847, 0.73 ) }
    dend_16 { pt3dadd( 52.1699, 4.09261, 15.7353, 0.29 ) }
    dend_16 { pt3dadd( 53.1573, 4.63714, 16.0384, 0.29 ) }
    dend_16 { pt3dadd( 61.5557, 10.681, 18.1175, 0.29 ) }
    // Section: dend_15, id: dend_15, parent: dend_14 (entry count 98/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 15.6864, -19.3349, -0.547153, 0.66 ) }
    dend_15 { pt3dadd( 16.1953, -20.0096, -0.791512, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_15 { pt3dadd( 17.1099, -21.1163, -1.13352, 0.22 ) }
    dend_15 { pt3dadd( 17.6209, -21.6815, -1.29531, 0.58 ) }
    dend_15 { pt3dadd( 18.3265, -22.3683, -1.47642, 0.07 ) }
    dend_15 { pt3dadd( 18.7968, -22.7108, -1.53218, 0.15 ) }
    dend_15 { pt3dadd( 19.0834, -22.7756, -1.47047, 0.15 ) }
    dend_15 { pt3dadd( 19.7639, -22.5809, -1.05375, 0.15 ) }
    dend_15 { pt3dadd( 19.9834, -22.4841, -0.881049, 0.15 ) }
    dend_15 { pt3dadd( 20.5708, -22.186, -0.346145, 0.15 ) }
    dend_15 { pt3dadd( 21.5728, -21.6889, 0.630846, 0.8 ) }
    dend_15 { pt3dadd( 22.745, -21.2444, 1.78867, 0.51 ) }
    dend_15 { pt3dadd( 23.3336, -21.1445, 2.37787, 0.51 ) }
    dend_15 { pt3dadd( 23.5623, -21.1664, 2.60468, 0.51 ) }
    dend_15 { pt3dadd( 23.9403, -21.3206, 2.97008, 0.51 ) }
    dend_15 { pt3dadd( 24.471, -21.7268, 3.43971, 0.22 ) }
    dend_15 { pt3dadd( 25.1402, -22.442, 3.95291, 0.44 ) }
    dend_15 { pt3dadd( 25.855, -23.2799, 4.41995, 0.07 ) }
    dend_15 { pt3dadd( 26.2093, -23.7025, 4.63221, 0.07 ) }
    dend_15 { pt3dadd( 26.7038, -24.2698, 4.90486, 0.36 ) }
    dend_15 { pt3dadd( 27.0304, -24.6325, 5.0731, 0.36 ) }
    dend_15 { pt3dadd( 27.4719, -25.1119, 5.31059, 0.36 ) }
    dend_15 { pt3dadd( 28.1088, -25.7855, 5.62209, 0.07 ) }
    dend_15 { pt3dadd( 33.5047, -28.188, 9.39333, 0.07 ) }
    // Section: dend_13, id: dend_13, parent: dend_11 (entry count 22/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 13.9471, -29.2273, 2.20102, 0.22 ) }
    dend_13 { pt3dadd( 14.6815, -29.8969, 1.39232, 0.22 ) }
    dend_13 { pt3dadd( 15.1302, -30.2445, 1.06032, 0.22 ) }
    dend_13 { pt3dadd( 15.5762, -30.5176, 0.877653, 0.22 ) }
    dend_13 { pt3dadd( 16.7964, -31.0917, 0.740454, 0.22 ) }
    dend_13 { pt3dadd( 18.1283, -31.5604, 0.898385, 0.51 ) }
    dend_13 { pt3dadd( 19.2647, -31.8577, 1.0224, 0.15 ) }
    dend_13 { pt3dadd( 21.0619, -32.1211, 1.17277, 0.44 ) }
    dend_13 { pt3dadd( 22.1436, -32.2037, 1.24976, 0.44 ) }
    dend_13 { pt3dadd( 23.0329, -32.2486, 1.26202, 0.15 ) }
    dend_13 { pt3dadd( 24.1543, -32.2796, 1.24764, 0.29 ) }
    dend_13 { pt3dadd( 25.7845, -32.3042, 1.10866, 0.22 ) }
    dend_13 { pt3dadd( 27.1177, -32.3288, 0.917754, 0.66 ) }
    dend_13 { pt3dadd( 28.19, -32.3593, 0.674755, 0.36 ) }
    dend_13 { pt3dadd( 29.5525, -32.4269, 0.330375, 0.88 ) }
    dend_13 { pt3dadd( 31.0275, -32.5405, 0.00613189, 0.22 ) }
    dend_13 { pt3dadd( 31.7685, -32.6192, -0.10092, 0.22 ) }
    dend_13 { pt3dadd( 33.1536, -32.7878, -0.0625347, 0.22 ) }
    dend_13 { pt3dadd( 33.8092, -32.8529, 0.0515992, 1.09 ) }
    dend_13 { pt3dadd( 34.3144, -32.8874, 0.218201, 1.24 ) }
    dend_13 { pt3dadd( 35.5011, -32.9413, 0.747742, 1.09 ) }
    dend_13 { pt3dadd( 36.1789, -32.9804, 1.1128, 0.51 ) }
    dend_13 { pt3dadd( 37.2064, -33.0599, 1.6778, 0.44 ) }
    dend_13 { pt3dadd( 37.9431, -33.1351, 2.0484, 0.44 ) }
    dend_13 { pt3dadd( 39.2651, -33.3027, 2.70835, 0.44 ) }
    dend_13 { pt3dadd( 40.3751, -33.4909, 3.26746, 0.29 ) }
    dend_13 { pt3dadd( 41.5349, -33.7462, 3.84573, 0.29 ) }
    dend_13 { pt3dadd( 42.506, -34.0169, 4.3385, 0.73 ) }
    dend_13 { pt3dadd( 43.6298, -34.3796, 4.88403, 0.51 ) }
    dend_13 { pt3dadd( 44.5094, -34.6717, 5.30544, 0.29 ) }
    dend_13 { pt3dadd( 45.5707, -34.9873, 5.79314, 0.29 ) }
    dend_13 { pt3dadd( 46.2023, -35.1404, 6.08026, 0.29 ) }
    dend_13 { pt3dadd( 47.2144, -35.2976, 6.50312, 0.29 ) }
    dend_13 { pt3dadd( 48.2585, -35.3725, 6.93854, 0.88 ) }
    dend_13 { pt3dadd( 49.3547, -35.3765, 7.38288, 0.44 ) }
    dend_13 { pt3dadd( 50.3861, -35.3336, 7.78649, 1.09 ) }
    dend_13 { pt3dadd( 51.0778, -35.2888, 8.04459, 1.31 ) }
    dend_13 { pt3dadd( 52.0366, -35.2653, 8.42056, 0.15 ) }
    dend_13 { pt3dadd( 52.4189, -35.2761, 8.57904, 0.15 ) }
    dend_13 { pt3dadd( 52.9447, -35.3226, 8.81348, 0.15 ) }
    dend_13 { pt3dadd( 53.5167, -35.3828, 9.06532, 0.15 ) }
    dend_13 { pt3dadd( 54.005, -35.4181, 9.31312, 0.15 ) }
    dend_13 { pt3dadd( 55.2569, -35.4002, 9.98249, 0.22 ) }
    dend_13 { pt3dadd( 55.7614, -35.3317, 10.2598, 0.22 ) }
    dend_13 { pt3dadd( 56.8824, -35.0312, 10.8732, 0.95 ) }
    dend_13 { pt3dadd( 57.772, -34.6759, 11.3254, 0.51 ) }
    dend_13 { pt3dadd( 58.6654, -34.2381, 11.7133, 0.22 ) }
    dend_13 { pt3dadd( 59.3664, -33.8453, 11.9958, 0.22 ) }
    dend_13 { pt3dadd( 59.8745, -33.549, 12.1752, 0.07 ) }
    dend_13 { pt3dadd( 60.3518, -33.2945, 12.3213, 0.22 ) }
    dend_13 { pt3dadd( 61.356, -32.7946, 12.618, 0.51 ) }
    dend_13 { pt3dadd( 62.9354, -32.0842, 13.0093, 0.36 ) }
    dend_13 { pt3dadd( 63.6125, -31.8018, 13.1299, 0.73 ) }
    dend_13 { pt3dadd( 64.5413, -31.4292, 13.2414, 0.73 ) }
    dend_13 { pt3dadd( 65.7168, -30.9747, 13.2785, 0.07 ) }
    dend_13 { pt3dadd( 66.077, -30.8327, 13.2478, 0.07 ) }
    dend_13 { pt3dadd( 66.7624, -30.5657, 13.0864, 0.07 ) }
    dend_13 { pt3dadd( 67.6369, -30.3756, 12.7797, 0.07 ) }
    dend_13 { pt3dadd( 68.2624, -30.3943, 12.4756, 0.07 ) }
    dend_13 { pt3dadd( 69.0435, -30.5161, 12.093, 0.07 ) }
    dend_13 { pt3dadd( 69.6717, -30.6658, 11.7901, 0.88 ) }
    dend_13 { pt3dadd( 70.2884, -30.8524, 11.5751, 0.88 ) }
    dend_13 { pt3dadd( 72.0198, -31.4774, 11.2497, 0.07 ) }
    dend_13 { pt3dadd( 74.4458, -32.4519, 11.1008, 0.66 ) }
    dend_13 { pt3dadd( 75.2741, -32.8054, 11.0799, 0.22 ) }
    dend_13 { pt3dadd( 76.0828, -33.1574, 11.0785, 0.07 ) }
    dend_13 { pt3dadd( 78.2644, -34.1177, 11.065, 0.07 ) }
    dend_13 { pt3dadd( 79.2206, -34.5325, 11.0503, 0.07 ) }
    dend_13 { pt3dadd( 79.6341, -34.7286, 11.0446, 0.07 ) }
    dend_13 { pt3dadd( 81.1283, -35.5796, 11.1181, 0.66 ) }
    dend_13 { pt3dadd( 81.6277, -35.8922, 11.0228, 0.66 ) }
    dend_13 { pt3dadd( 82.1776, -36.2241, 10.8373, 0.07 ) }
    dend_13 { pt3dadd( 82.6689, -36.5005, 10.6104, 0.07 ) }
    dend_13 { pt3dadd( 83.2595, -36.8217, 10.3637, 0.07 ) }
    dend_13 { pt3dadd( 83.9892, -37.2085, 10.1639, 0.22 ) }
    dend_13 { pt3dadd( 84.8133, -37.6407, 10.0553, 0.29 ) }
    dend_13 { pt3dadd( 85.5164, -37.9864, 9.94531, 0.29 ) }
    dend_13 { pt3dadd( 86.3334, -38.3597, 9.82715, 0.29 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_13 { pt3dadd( 87.1201, -38.6968, 9.70046, 0.29 ) }
    dend_13 { pt3dadd( 88.2255, -39.143, 9.50364, 0.51 ) }
    dend_13 { pt3dadd( 89.008, -39.4408, 9.35215, 0.44 ) }
    dend_13 { pt3dadd( 90.4318, -39.9828, 9.06861, 0.8 ) }
    dend_13 { pt3dadd( 91.7034, -40.4616, 8.82982, 0.29 ) }
    dend_13 { pt3dadd( 92.4133, -40.7207, 8.71477, 0.58 ) }
    dend_13 { pt3dadd( 92.8968, -40.8876, 8.64632, 0.29 ) }
    dend_13 { pt3dadd( 94.0073, -41.2537, 8.56256, 0.36 ) }
    dend_13 { pt3dadd( 94.648, -41.4678, 8.50719, 0.36 ) }
    dend_13 { pt3dadd( 95.3309, -41.6954, 8.42084, 0.58 ) }
    dend_13 { pt3dadd( 95.9234, -41.8875, 8.27919, 0.58 ) }
    dend_13 { pt3dadd( 96.7106, -42.158, 8.04701, 0.07 ) }
    dend_13 { pt3dadd( 97.4643, -42.424, 7.73428, 0.07 ) }
    dend_13 { pt3dadd( 99.3202, -43.0585, 6.76422, 0.29 ) }
    dend_13 { pt3dadd( 100.34, -43.3613, 6.16575, 0.07 ) }
    dend_13 { pt3dadd( 101.242, -43.6077, 5.59266, 0.95 ) }
    dend_13 { pt3dadd( 102.026, -43.8019, 5.04071, 0.44 ) }
    dend_13 { pt3dadd( 102.804, -44.0133, 4.41866, 0.07 ) }
    dend_13 { pt3dadd( 103.205, -44.1367, 4.09583, 0.07 ) }
    dend_13 { pt3dadd( 103.528, -44.2653, 3.84915, 0.07 ) }
    dend_13 { pt3dadd( 103.697, -44.3585, 3.69262, 0.07 ) }
    dend_13 { pt3dadd( 104.247, -44.7135, 3.15392, 0.07 ) }
    dend_13 { pt3dadd( 105.083, -45.2756, 2.37482, 0.07 ) }
    dend_13 { pt3dadd( 105.738, -45.7147, 1.84467, 0.44 ) }
    dend_13 { pt3dadd( 106.678, -46.3123, 1.19855, 1.61 ) }
    dend_13 { pt3dadd( 107.332, -46.6902, 0.815537, 1.61 ) }
    dend_13 { pt3dadd( 108.871, -47.4369, 0.113472, 0.07 ) }
    dend_13 { pt3dadd( 109.297, -47.6074, -0.0276583, 0.73 ) }
    dend_13 { pt3dadd( 109.848, -47.7777, -0.184765, 0.73 ) }
    dend_13 { pt3dadd( 110.772, -48.0088, -0.419089, 0.22 ) }
    dend_13 { pt3dadd( 111.621, -48.1883, -0.593092, 0.44 ) }
    dend_13 { pt3dadd( 113.033, -48.4881, -0.836383, 0.07 ) }
    dend_13 { pt3dadd( 113.376, -48.5663, -0.900222, 0.36 ) }
    dend_13 { pt3dadd( 115.162, -49.0039, -1.12862, 0.07 ) }
    dend_13 { pt3dadd( 116.14, -49.2625, -1.21162, 1.82 ) }
    dend_13 { pt3dadd( 116.802, -49.4555, -1.24651, 1.82 ) }
    dend_13 { pt3dadd( 118.752, -50.0863, -1.25746, 0.07 ) }
    dend_13 { pt3dadd( 119.66, -50.4148, -1.22777, 0.22 ) }
    dend_13 { pt3dadd( 121.355, -51.0845, -1.09737, 0.07 ) }
    dend_13 { pt3dadd( 122.056, -51.394, -0.990994, 0.22 ) }
    dend_13 { pt3dadd( 122.86, -51.7863, -0.87436, 0.22 ) }
    dend_13 { pt3dadd( 123.391, -52.0668, -0.803751, 0.07 ) }
    dend_13 { pt3dadd( 123.665, -52.2252, -0.786422, 0.07 ) }
    dend_13 { pt3dadd( 124.111, -52.478, -0.788558, 0.07 ) }
    dend_13 { pt3dadd( 124.672, -52.7906, -0.845292, 0.07 ) }
    dend_13 { pt3dadd( 125.236, -53.0841, -0.898139, 0.95 ) }
    dend_13 { pt3dadd( 125.696, -53.3098, -0.939929, 0.95 ) }
    dend_13 { pt3dadd( 126.796, -53.8844, -1.00553, 0.07 ) }
    dend_13 { pt3dadd( 127.965, -54.5194, -1.0423, 0.44 ) }
    dend_13 { pt3dadd( 128.686, -54.9014, -1.04642, 0.15 ) }
    dend_13 { pt3dadd( 129.334, -55.2283, -1.03124, 0.66 ) }
    dend_13 { pt3dadd( 129.767, -55.4318, -1.00459, 0.66 ) }
    dend_13 { pt3dadd( 131.085, -56.0247, -0.8586, 0.07 ) }
    dend_13 { pt3dadd( 131.536, -56.2373, -0.784355, 0.07 ) }
    dend_13 { pt3dadd( 131.959, -56.4512, -0.710125, 0.07 ) }
    dend_13 { pt3dadd( 132.371, -56.6953, -0.658428, 0.36 ) }
    dend_13 { pt3dadd( 132.937, -57.0549, -0.596356, 0.36 ) }
    dend_13 { pt3dadd( 133.688, -57.5615, -0.564357, 0.07 ) }
    dend_13 { pt3dadd( 134.562, -58.1863, -0.57476, 1.75 ) }
    dend_13 { pt3dadd( 135.024, -58.5428, -0.585959, 1.75 ) }
    dend_13 { pt3dadd( 136.874, -60.0294, -0.645857, 0.07 ) }
    dend_13 { pt3dadd( 137.449, -60.5004, -0.668087, 0.58 ) }
    dend_13 { pt3dadd( 138.459, -61.332, -0.709398, 0.58 ) }
    dend_13 { pt3dadd( 139.224, -61.9611, -0.735435, 0.07 ) }
    dend_13 { pt3dadd( 139.406, -62.114, -0.739017, 0.07 ) }
    dend_13 { pt3dadd( 139.694, -62.3655, -0.740975, 0.07 ) }
    dend_13 { pt3dadd( 139.938, -62.5807, -0.73496, 0.07 ) }
    dend_13 { pt3dadd( 140.502, -63.1047, -0.718399, 0.36 ) }
    dend_13 { pt3dadd( 141.39, -63.9861, -0.660681, 0.07 ) }
    dend_13 { pt3dadd( 141.806, -64.4576, -0.641281, 0.07 ) }
    dend_13 { pt3dadd( 142.245, -65.0136, -0.626988, 0.07 ) }
    dend_13 { pt3dadd( 142.62, -65.5298, -0.638651, 0.36 ) }
    dend_13 { pt3dadd( 142.987, -66.0685, -0.669389, 0.36 ) }
    dend_13 { pt3dadd( 143.392, -66.6956, -0.722888, 0.07 ) }
    dend_13 { pt3dadd( 144.0, -67.6251, -0.818152, 0.51 ) }
    dend_13 { pt3dadd( 144.273, -68.025, -0.863689, 0.51 ) }
    dend_13 { pt3dadd( 145.021, -69.0128, -0.975888, 0.07 ) }
    dend_13 { pt3dadd( 145.349, -69.3851, -1.02188, 0.07 ) }
    dend_13 { pt3dadd( 145.859, -69.8676, -1.10179, 0.07 ) }
    dend_13 { pt3dadd( 146.631, -70.4632, -1.21611, 1.39 ) }
    dend_13 { pt3dadd( 147.146, -70.7761, -1.28478, 1.39 ) }
    dend_13 { pt3dadd( 148.242, -71.3028, -1.40854, 0.22 ) }
    dend_13 { pt3dadd( 149.223, -71.6551, -1.49145, 0.07 ) }
    dend_13 { pt3dadd( 150.214, -71.9105, -1.56559, 0.36 ) }
    dend_13 { pt3dadd( 150.977, -72.037, -1.61351, 0.66 ) }
    dend_13 { pt3dadd( 151.582, -72.0941, -1.63834, 0.07 ) }
    dend_13 { pt3dadd( 152.277, -72.1286, -1.64378, 0.22 ) }
    dend_13 { pt3dadd( 152.747, -72.1437, -1.63011, 0.22 ) }
    dend_13 { pt3dadd( 153.515, -72.1584, -1.57096, 0.22 ) }
    dend_13 { pt3dadd( 154.167, -72.1657, -1.49762, 0.36 ) }
    dend_13 { pt3dadd( 155.07, -72.1743, -1.40001, 0.07 ) }
    dend_13 { pt3dadd( 155.79, -72.1861, -1.32905, 0.07 ) }
    dend_13 { pt3dadd( 156.616, -72.1967, -1.25272, 0.73 ) }
    dend_13 { pt3dadd( 156.896, -72.1888, -1.20835, 0.73 ) }
    dend_13 { pt3dadd( 157.821, -72.111, -1.01104, 0.07 ) }
    dend_13 { pt3dadd( 158.363, -72.0232, -0.862782, 0.07 ) }
    dend_13 { pt3dadd( 159.686, -71.6857, -0.436959, 0.58 ) }
    dend_13 { pt3dadd( 160.219, -71.5097, -0.246774, 0.58 ) }
    dend_13 { pt3dadd( 161.601, -70.948, 0.314096, 0.07 ) }
    dend_13 { pt3dadd( 162.302, -70.6371, 0.618971, 0.07 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_13 { pt3dadd( 163.1, -70.2686, 0.986581, 0.07 ) }
    dend_13 { pt3dadd( 163.741, -69.9785, 1.28548, 0.88 ) }
    dend_13 { pt3dadd( 164.071, -69.8178, 1.44657, 1.46 ) }
    dend_13 { pt3dadd( 165.191, -69.2666, 1.95404, 0.07 ) }
    dend_13 { pt3dadd( 165.651, -69.0574, 2.11401, 0.07 ) }
    dend_13 { pt3dadd( 166.168, -68.847, 2.29922, 0.07 ) }
    dend_13 { pt3dadd( 166.706, -68.6792, 2.48142, 0.66 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 7/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 13.9471, -29.2273, 2.20102, 1.39 ) }
    dend_12 { pt3dadd( 13.1421, -31.3401, 2.69072, 1.39 ) }
    dend_12 { pt3dadd( 12.6065, -32.8629, 2.98651, 1.17 ) }
    dend_12 { pt3dadd( 12.009, -34.7283, 3.29152, 0.73 ) }
    dend_12 { pt3dadd( 11.5126, -36.3883, 3.50021, 0.73 ) }
    dend_12 { pt3dadd( 11.1307, -37.769, 3.6272, 1.02 ) }
    dend_12 { pt3dadd( 10.6845, -39.4595, 3.72626, 0.58 ) }
    dend_12 { pt3dadd( 10.3119, -41.0572, 3.76803, 0.58 ) }
    dend_12 { pt3dadd( 10.0692, -42.4236, 3.76678, 0.58 ) }
    dend_12 { pt3dadd( 9.89404, -44.0352, 3.75726, 0.95 ) }
    dend_12 { pt3dadd( 9.83382, -45.4972, 3.81869, 0.95 ) }
    dend_12 { pt3dadd( 9.88753, -47.0549, 4.01488, 0.51 ) }
    dend_12 { pt3dadd( 10.04, -48.6225, 4.33966, 0.29 ) }
    dend_12 { pt3dadd( 10.2528, -50.1972, 4.78089, 1.02 ) }
    dend_12 { pt3dadd( 10.5263, -51.9507, 5.36979, 0.73 ) }
    dend_12 { pt3dadd( 10.9021, -54.2865, 6.26075, 0.51 ) }
    dend_12 { pt3dadd( 11.0563, -55.584, 6.78614, 0.36 ) }
    dend_12 { pt3dadd( 11.1462, -56.9036, 7.28788, 0.36 ) }
    dend_12 { pt3dadd( 11.0628, -58.1941, 7.60134, 0.36 ) }
    dend_12 { pt3dadd( 10.8743, -58.7811, 7.56274, 0.36 ) }
    dend_12 { pt3dadd( 10.4914, -59.5431, 7.23251, 0.36 ) }
    dend_12 { pt3dadd( 9.77833, -60.9464, 6.35205, 0.44 ) }
    dend_12 { pt3dadd( 9.06408, -62.4932, 5.35319, 0.44 ) }
    dend_12 { pt3dadd( 8.60212, -63.8457, 4.6168, 0.44 ) }
    dend_12 { pt3dadd( 8.39769, -64.968, 4.2036, 1.09 ) }
    dend_12 { pt3dadd( 8.30744, -66.3021, 3.94017, 0.8 ) }
    dend_12 { pt3dadd( 8.32133, -68.2148, 3.78771, 0.51 ) }
    dend_12 { pt3dadd( 8.36157, -69.3422, 3.79217, 0.51 ) }
    dend_12 { pt3dadd( 8.39431, -71.4859, 3.94511, 0.95 ) }
    dend_12 { pt3dadd( 8.35925, -73.8, 4.16842, 0.58 ) }
    dend_12 { pt3dadd( 8.29708, -74.8994, 4.26746, 0.36 ) }
    dend_12 { pt3dadd( 8.16497, -76.1233, 4.33333, 0.36 ) }
    dend_12 { pt3dadd( 7.84831, -78.1644, 4.35011, 0.36 ) }
    dend_12 { pt3dadd( 7.54452, -79.6906, 4.26408, 0.8 ) }
    dend_12 { pt3dadd( 7.22767, -80.9761, 4.13397, 0.51 ) }
    dend_12 { pt3dadd( 6.93232, -82.2626, 4.00597, 0.51 ) }
    dend_12 { pt3dadd( 6.69026, -83.7844, 3.9094, 0.36 ) }
    dend_12 { pt3dadd( 6.63299, -84.3687, 3.91909, 0.36 ) }
    dend_12 { pt3dadd( 6.60823, -84.9359, 3.97562, 0.36 ) }
    dend_12 { pt3dadd( 6.58205, -86.2242, 4.17719, 0.36 ) }
    dend_12 { pt3dadd( 6.47039, -88.6552, 4.62217, 1.02 ) }
    dend_12 { pt3dadd( 6.2869, -90.4867, 4.94747, 0.66 ) }
    dend_12 { pt3dadd( 6.10132, -91.7329, 5.0745, 0.66 ) }
    dend_12 { pt3dadd( 5.88911, -92.6113, 5.05551, 0.66 ) }
    dend_12 { pt3dadd( 5.66457, -93.2995, 4.94579, 0.66 ) }
    dend_12 { pt3dadd( 5.07297, -94.7514, 4.4985, 0.66 ) }
    dend_12 { pt3dadd( 4.49888, -95.9385, 4.0061, 0.66 ) }
    dend_12 { pt3dadd( 3.76213, -97.5103, 3.29959, 0.66 ) }
    dend_12 { pt3dadd( 3.24257, -98.7693, 2.76306, 0.66 ) }
    dend_12 { pt3dadd( 2.79654, -99.9147, 2.34032, 0.51 ) }
    dend_12 { pt3dadd( 2.23469, -101.421, 1.89875, 0.88 ) }
    dend_12 { pt3dadd( 1.88451, -102.415, 1.69321, 0.88 ) }
    dend_12 { pt3dadd( 1.27558, -104.227, 1.4889, 0.51 ) }
    dend_12 { pt3dadd( 0.730543, -105.912, 1.44368, 0.51 ) }
    dend_12 { pt3dadd( 0.445789, -107.024, 1.48588, 0.51 ) }
    dend_12 { pt3dadd( 0.280354, -107.927, 1.56978, 0.51 ) }
    dend_12 { pt3dadd( 0.186645, -109.291, 1.74508, 0.51 ) }
    dend_12 { pt3dadd( 0.270394, -110.678, 1.90737, 1.02 ) }
    dend_12 { pt3dadd( 0.442577, -111.63, 1.97418, 1.02 ) }
    dend_12 { pt3dadd( 1.19874, -114.338, 2.00437, 0.44 ) }
    dend_12 { pt3dadd( 1.67224, -115.68, 1.9655, 0.44 ) }
    dend_12 { pt3dadd( 2.58207, -117.922, 1.82805, 0.36 ) }
    dend_12 { pt3dadd( 3.39797, -119.822, 1.62777, 0.36 ) }
    dend_12 { pt3dadd( 3.99955, -121.226, 1.3809, 0.58 ) }
    dend_12 { pt3dadd( 4.49844, -122.505, 1.06467, 0.66 ) }
    dend_12 { pt3dadd( 4.77466, -123.393, 0.796486, 0.66 ) }
    dend_12 { pt3dadd( 4.95059, -124.478, 0.473158, 0.44 ) }
    dend_12 { pt3dadd( 4.9311, -125.679, 0.175509, 0.36 ) }
    dend_12 { pt3dadd( 4.7437, -126.939, -0.0367302, 0.36 ) }
    dend_12 { pt3dadd( 4.50809, -128.122, -0.173099, 0.36 ) }
    dend_12 { pt3dadd( 4.09035, -129.96, -0.321948, 0.58 ) }
    dend_12 { pt3dadd( 3.69184, -131.658, -0.400026, 0.44 ) }
    dend_12 { pt3dadd( 3.42921, -132.824, -0.417524, 0.44 ) }
    dend_12 { pt3dadd( 3.10852, -134.382, -0.407153, 1.02 ) }
    dend_12 { pt3dadd( 2.81005, -135.93, -0.387724, 0.36 ) }
    dend_12 { pt3dadd( 2.61946, -137.045, -0.41631, 0.36 ) }
    dend_12 { pt3dadd( 2.40744, -138.237, -0.521552, 0.36 ) }
    dend_12 { pt3dadd( 2.20389, -139.333, -0.640485, 0.36 ) }
    dend_12 { pt3dadd( 1.91421, -140.827, -0.83697, 0.22 ) }
    dend_12 { pt3dadd( 1.62241, -142.147, -1.02807, 0.51 ) }
    dend_12 { pt3dadd( 1.12397, -144.217, -1.37071, 0.15 ) }
    dend_12 { pt3dadd( 0.735798, -145.832, -1.68803, 0.36 ) }
    dend_12 { pt3dadd( 0.572409, -146.52, -1.83601, 0.8 ) }
    dend_12 { pt3dadd( 0.304933, -147.703, -2.08896, 0.51 ) }
    dend_12 { pt3dadd( -1.81239, -158.268, -2.84839, 0.51 ) }
    // Section: dend_4, id: dend_4, parent: dend_2 (entry count 92/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 19.25, 51.1989, 7.63394, 0.29 ) }
    dend_4 { pt3dadd( 21.7802, 50.8937, 8.17343, 0.29 ) }
    dend_4 { pt3dadd( 22.6823, 50.832, 8.32554, 0.29 ) }
    dend_4 { pt3dadd( 23.6734, 50.8387, 8.42977, 0.29 ) }
    dend_4 { pt3dadd( 24.6236, 50.9122, 8.61282, 0.29 ) }
    dend_4 { pt3dadd( 25.1451, 50.9691, 8.71822, 0.07 ) }
    dend_4 { pt3dadd( 26.0535, 51.0794, 8.90003, 0.66 ) }
    dend_4 { pt3dadd( 27.0111, 51.2332, 9.07513, 1.24 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_9()
}

proc basic_shape_9() {
    dend_4 { pt3dadd( 29.0943, 51.5954, 9.40259, 0.58 ) }
    dend_4 { pt3dadd( 31.7702, 52.022, 9.80838, 0.22 ) }
    dend_4 { pt3dadd( 34.03, 52.3506, 10.1623, 0.22 ) }
    dend_4 { pt3dadd( 34.638, 52.4362, 10.2534, 0.8 ) }
    dend_4 { pt3dadd( 35.942, 52.6046, 10.4842, 1.24 ) }
    dend_4 { pt3dadd( 38.3633, 52.8936, 10.9137, 0.22 ) }
    dend_4 { pt3dadd( 40.1464, 53.078, 11.2107, 0.22 ) }
    dend_4 { pt3dadd( 40.7885, 53.1337, 11.2853, 0.51 ) }
    dend_4 { pt3dadd( 42.4466, 53.2833, 11.5465, 0.66 ) }
    dend_4 { pt3dadd( 44.9926, 53.5251, 12.0262, 0.07 ) }
    dend_4 { pt3dadd( 57.082, 52.9757, 12.8409, 0.07 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 11/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 19.25, 51.1989, 7.63394, 0.66 ) }
    dend_3 { pt3dadd( 19.1438, 51.9761, 8.52762, 0.66 ) }
    dend_3 { pt3dadd( 19.1339, 52.7947, 9.27608, 0.15 ) }
    dend_3 { pt3dadd( 19.1579, 53.0585, 9.47325, 0.15 ) }
    dend_3 { pt3dadd( 19.2803, 53.8162, 9.94584, 0.29 ) }
    dend_3 { pt3dadd( 19.4852, 54.6687, 10.3391, 0.15 ) }
    dend_3 { pt3dadd( 19.7432, 55.5338, 10.6306, 0.95 ) }
    dend_3 { pt3dadd( 20.0071, 56.2885, 10.7502, 0.58 ) }
    dend_3 { pt3dadd( 20.2484, 56.9321, 10.7886, 0.22 ) }
    dend_3 { pt3dadd( 20.4538, 57.4939, 10.7964, 0.07 ) }
    dend_3 { pt3dadd( 20.8733, 58.7813, 10.7577, 1.17 ) }
    dend_3 { pt3dadd( 21.1638, 59.9276, 10.7002, 0.8 ) }
    dend_3 { pt3dadd( 21.3342, 60.8519, 10.6798, 0.51 ) }
    dend_3 { pt3dadd( 21.4427, 61.7255, 10.7013, 0.29 ) }
    dend_3 { pt3dadd( 21.506, 62.6032, 10.7592, 0.58 ) }
    dend_3 { pt3dadd( 21.5158, 63.921, 10.9094, 0.36 ) }
    dend_3 { pt3dadd( 21.4515, 65.1837, 11.1354, 0.15 ) }
    dend_3 { pt3dadd( 21.3816, 66.0925, 11.3412, 0.36 ) }
    dend_3 { pt3dadd( 21.3107, 67.1014, 11.6233, 0.36 ) }
    dend_3 { pt3dadd( 21.2778, 67.7608, 11.8467, 0.07 ) }
    dend_3 { pt3dadd( 21.2792, 68.5534, 12.1573, 0.15 ) }
    dend_3 { pt3dadd( 21.2932, 68.9765, 12.3535, 0.07 ) }
    dend_3 { pt3dadd( 21.3198, 69.3599, 12.5546, 0.07 ) }
    dend_3 { pt3dadd( 21.3625, 69.7461, 12.7431, 0.07 ) }
    dend_3 { pt3dadd( 21.5446, 70.6507, 13.1598, 1.31 ) }
    dend_3 { pt3dadd( 21.7233, 71.1564, 13.3958, 1.31 ) }
    dend_3 { pt3dadd( 23.6732, 78.0899, 16.2758, 1.31 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_17, dend_10, dend_9, dend_8, dend_7, dend_6, dend_1, dend_0, dend_14, dend_11, dend_5, dend_2, dend_16, dend_15, dend_13, dend_12, dend_4, dend_3]}
    ModelViewParmSubset_2 = new SectionList()
    dend_17 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_17, dend_10, dend_9, dend_8, dend_7, dend_6, dend_1, dend_0, dend_14, dend_11, dend_5, dend_2, dend_16, dend_15, dend_13, dend_12, dend_4, dend_3]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_17 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_9 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_8 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_7 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_6 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_0 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_5 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_2 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_16 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_13 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_12 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_1 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_10 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_14 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_11 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_15 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_3 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_4 OneSecGrp_SectionRef_20.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_1, dend_1, dend_1, dend_1, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, axon_1, axon_1, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    soma_0 all.append()
    soma_0 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_9 all.append()
    dend_9 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 5.67935E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 5.67935E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 3.6794998E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cSTUT_7_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cSTUT_7_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cSTUT_7_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cSTUT_7_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_17 nseg = 3
    dend_9 nseg = 5
    dend_8 nseg = 3
    dend_7 nseg = 3
    dend_6 nseg = 5
    dend_0 nseg = 3
    dend_5 nseg = 5
    dend_2 nseg = 3
    dend_16 nseg = 3
    dend_13 nseg = 9
    dend_12 nseg = 7
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cSTUT189_L5_LBC_7e5297a36c_0_0


