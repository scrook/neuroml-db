TITLE Mod file for component: Component(id=pr2A type=pinskyRinzelCA3CellNmlDB)

COMMENT

    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.3
         org.neuroml.model   v1.5.3
         jLEMS               v0.9.9.0

ENDCOMMENT

NEURON {
    POINT_PROCESS pr2A
    RANGE iSoma                             : parameter
    RANGE iDend                             : parameter
    RANGE gLs                               : parameter
    RANGE gLd                               : parameter
    RANGE gNa                               : parameter
    RANGE gKdr                              : parameter
    RANGE gCa                               : parameter
    RANGE gKahp                             : parameter
    RANGE gKC                               : parameter
    RANGE gc                                : parameter
    RANGE eNa                               : parameter
    RANGE eCa                               : parameter
    RANGE eK                                : parameter
    RANGE eL                                : parameter
    RANGE pp                                : parameter
    RANGE cm                                : parameter
    RANGE alphac                            : parameter
    RANGE betac                             : parameter
    RANGE gNmda                             : parameter
    RANGE gAmpa                             : parameter
    RANGE qd0                               : parameter
    RANGE MSEC                              : parameter
    RANGE MVOLT                             : parameter
    RANGE UAMP_PER_CM2                      : parameter
    RANGE Smax                              : parameter
    RANGE Vsyn                              : parameter
    RANGE betaqd                            : parameter
    
    RANGE ICad                              : exposure
    
    RANGE copy_v                           : copy of v on section
    RANGE v                                 : derived variable
    RANGE alphams_Vs                        : derived variable
    RANGE betams_Vs                         : derived variable
    RANGE Minfs_Vs                          : derived variable
    RANGE alphans_Vs                        : derived variable
    RANGE betans_Vs                         : derived variable
    RANGE alphahs_Vs                        : derived variable
    RANGE betahs_Vs                         : derived variable
    RANGE alphasd_Vd                        : derived variable
    RANGE betasd_Vd                         : derived variable
    RANGE Iampa                             : derived variable
    
    RANGE alphaqd                          : conditional derived var
    
    RANGE chid                             : conditional derived var
    
    RANGE alphacd_Vd                       : conditional derived var
    
    RANGE betacd_Vd                        : conditional derived var
    
    RANGE Sisat                            : conditional derived var
    
    RANGE Inmda                            : conditional derived var
    
    RANGE Isyn                             : conditional derived var
    
}

UNITS {
    
    (nA) = (nanoamp)
    (uA) = (microamp)
    (mA) = (milliamp)
    (A) = (amp)
    (mV) = (millivolt)
    (mS) = (millisiemens)
    (uS) = (microsiemens)
    (molar) = (1/liter)
    (kHz) = (kilohertz)
    (mM) = (millimolar)
    (um) = (micrometer)
    (umol) = (micromole)
    (S) = (siemens)
    
}

PARAMETER {
    
    iSoma = 7.5000003E-6 (nA / um2)
    iDend = 0 (nA / um2)
    gLs = 1.0E-6 (uS / um2)
    gLd = 1.0E-6 (uS / um2)
    gNa = 2.9999999E-4 (uS / um2)
    gKdr = 1.4999999E-4 (uS / um2)
    gCa = 1.0E-4 (uS / um2)
    gKahp = 8.0E-6 (uS / um2)
    gKC = 1.4999999E-4 (uS / um2)
    gc = 2.1E-5 (uS / um2)
    eNa = 60 (mV)
    eCa = 80 (mV)
    eK = -75 (mV)
    eL = -60 (mV)
    pp = 0.5 
    cm = 3.0E-8 (microfarads / um2)
    alphac = 2 
    betac = 0.1 
    gNmda = 0 (uS / um2)
    gAmpa = 0 (uS / um2)
    qd0 = 0 
    MSEC = 1 (ms)
    MVOLT = 1 (mV)
    UAMP_PER_CM2 = 1.0000001E-5 (nA / um2)
    Smax = 125 
    Vsyn = 60 (mV)
    betaqd = 0.001 
}

ASSIGNED {
    
    v (mV)                                 : derived variable
    
    ICad (nA / um2)                        : derived variable
    
    alphams_Vs                             : derived variable
    
    betams_Vs                              : derived variable
    
    Minfs_Vs                               : derived variable
    
    alphans_Vs                             : derived variable
    
    betans_Vs                              : derived variable
    
    alphahs_Vs                             : derived variable
    
    betahs_Vs                              : derived variable
    
    alphasd_Vd                             : derived variable
    
    betasd_Vd                              : derived variable
    
    Iampa (nA / um2)                       : derived variable
    
    alphaqd                                : conditional derived var...
    
    chid                                   : conditional derived var...
    
    alphacd_Vd                             : conditional derived var...
    
    betacd_Vd                              : conditional derived var...
    
    Sisat                                  : conditional derived var...
    
    Inmda (nA / um2)                       : conditional derived var...
    
    Isyn (nA / um2)                        : conditional derived var...
    rate_Vs (mV/ms)
    rate_Vd (mV/ms)
    rate_Cad (/ms)
    rate_hs (/ms)
    rate_ns (/ms)
    rate_sd (/ms)
    rate_cd (/ms)
    rate_qd (/ms)
    rate_Si (/ms)
    rate_Wi (/ms)
    
}

STATE {
    Vs (mV) 
    Vd (mV) 
    Cad  
    hs  
    ns  
    sd  
    cd  
    qd  
    Si  
    Wi  
    
}

INITIAL {
    rates()
    rates() ? To ensure correct initialisation.
    
    Vs = eL
    
    Vd = eL
    
    qd = qd0
    
}

BREAKPOINT {
    
    SOLVE states METHOD cnexp
    
    
}

DERIVATIVE states {
    rates()
    Vs' = rate_Vs 
    Vd' = rate_Vd 
    Cad' = rate_Cad 
    hs' = rate_hs 
    ns' = rate_ns 
    sd' = rate_sd 
    cd' = rate_cd 
    qd' = rate_qd 
    Si' = rate_Si 
    Wi' = rate_Wi 
    
}

PROCEDURE rates() {
    
    v = Vs ? evaluable
    ICad = gCa  *  sd  *sd*(  Vd  -  eCa  ) ? evaluable
    alphams_Vs = 0.32*(-46.9-  Vs  /  MVOLT  )/(exp((-46.9-  Vs  /  MVOLT  )/4.0)-1.0) ? evaluable
    betams_Vs = 0.28*(  Vs  /  MVOLT  +19.9)/(exp((  Vs  /  MVOLT  +19.9)/5.0)-1.0) ? evaluable
    Minfs_Vs = alphams_Vs  /(  alphams_Vs  +  betams_Vs  ) ? evaluable
    alphans_Vs = 0.016*(-24.9-  Vs  /  MVOLT  )/(exp((-24.9-  Vs  /  MVOLT  )/5.0)-1.0) ? evaluable
    betans_Vs = 0.25*exp(-1.0-0.025*  Vs  /  MVOLT  ) ? evaluable
    alphahs_Vs = 0.128*exp((-43.0-  Vs  /  MVOLT  )/18.0) ? evaluable
    betahs_Vs = 4.0/(1.0+exp((-20.0-  Vs  /  MVOLT  )/5.0)) ? evaluable
    alphasd_Vd = 1.6/(1.0+exp(-0.072*(  Vd  /  MVOLT  -5.0))) ? evaluable
    betasd_Vd = 0.02*(  Vd  /  MVOLT  +8.9)/(exp((  Vd  /  MVOLT  +8.9)/5.0)-1.0) ? evaluable
    Iampa = gAmpa  *  Wi  *(  Vd  -  Vsyn  ) ? evaluable
    if (0.00002*  Cad   > 0.01)  { 
        alphaqd = 0.01 ? evaluable cdv
    } else  { 
        alphaqd = 0.00002*  Cad ? evaluable cdv
    }
    
    if (Cad  /250 > 1)  { 
        chid = 1 ? evaluable cdv
    } else  { 
        chid = Cad  /250 ? evaluable cdv
    }
    
    if (Vd  < -10*  MVOLT)  { 
        alphacd_Vd = exp((  Vd  /  MVOLT  +50.0)/11-(  Vd  /  MVOLT  +53.5)/27)/18.975 ? evaluable cdv
    } else  { 
        alphacd_Vd = 2.0*exp((-53.5-  Vd  /  MVOLT  )/27.0) ? evaluable cdv
    }
    
    if (Vd  < -10*  MVOLT)  { 
        betacd_Vd = (2.0*exp((-53.5-  Vd  /  MVOLT  )/27.0)-  alphacd_Vd  ) ? evaluable cdv
    } else  { 
        betacd_Vd = 0 ? evaluable cdv
    }
    
    if (Si  >  Smax)  { 
        Sisat = Smax ? evaluable cdv
    } else  { 
        Sisat = Si ? evaluable cdv
    }
    
    if (1 == 1)  { 
        Inmda = gNmda  *  Sisat  *(  Vd  -  Vsyn  )/(1.0+0.28*exp(-0.062*(  Vd  /  MVOLT  -60.0))) ? evaluable cdv
    }
    
    if (1 == 1)  { 
        Isyn = Iampa  +  Inmda ? evaluable cdv
    }
    
    rate_Vs = (-  gLs  *(  Vs  -  eL  )-  gNa  *(  Minfs_Vs  ^2)*  hs  *(  Vs  -  eNa  )-  gKdr  *  ns  *(  Vs  -  eK  )+(  gc  /  pp  )*(  Vd  -  Vs  )+  iSoma  /  pp  ) /  cm ? Note units of all quantities used here need to be consistent!
    rate_Vd = (  iDend  /(1.0-  pp  )-  Isyn  /(1.0-  pp  )-  gLd  *(  Vd  -  eL  )-  ICad  -  gKahp  *  qd  *(  Vd  -  eK  )-  gKC  *  cd  *  chid  *(  Vd  -  eK  )+(  gc  *(  Vs  -  Vd  ))/(1.0-  pp  )) /  cm ? Note units of all quantities used here need to be consistent!
    rate_Cad = (-0.13*  ICad  /  UAMP_PER_CM2  -0.075*  Cad  ) /  MSEC ? Note units of all quantities used here need to be consistent!
    rate_hs = (  alphahs_Vs  -(  alphahs_Vs  +  betahs_Vs  )*  hs  ) /  MSEC ? Note units of all quantities used here need to be consistent!
    rate_ns = (  alphans_Vs  -(  alphans_Vs  +  betans_Vs  )*  ns  ) /  MSEC ? Note units of all quantities used here need to be consistent!
    rate_sd = (  alphasd_Vd  -(  alphasd_Vd  +  betasd_Vd  )*  sd  ) /  MSEC ? Note units of all quantities used here need to be consistent!
    rate_cd = (  alphacd_Vd  -(  alphacd_Vd  +  betacd_Vd  )*  cd  ) /  MSEC ? Note units of all quantities used here need to be consistent!
    rate_qd = (  alphaqd  -(  alphaqd  +  betaqd  )*  qd  ) /  MSEC ? Note units of all quantities used here need to be consistent!
    rate_Si = -  Si  /150.0 ? Note units of all quantities used here need to be consistent!
    rate_Wi = -  Wi  /2.0 ? Note units of all quantities used here need to be consistent!
    
     
    
}

