// Cell: cACint209_L23_SBC_afc0be559d_0_0
/*
{
  "id" : "cACint209_L23_SBC_afc0be559d_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-1.47584, 12.2108, 1.78589, 2.80655", "-1.32075, 11.0496, 1.64424, 4.71895", "-1.16566, 9.88845, 1.5026, 5.5877", "-1.01057, 8.7273, 1.36095, 6.45645", "-0.855481, 7.56615, 1.21931, 7.3252", "-0.700391, 6.405, 1.07766, 8.15767", "-0.545302, 5.24385, 0.936013, 8.71842", "-0.390212, 4.0827, 0.794367, 8.99013", "-0.235122, 2.92155, 0.652721, 9.42685", "-0.0800328, 1.7604, 0.511075, 9.71492", "0.0750567, 0.599247, 0.369429, 10.003", "0.230146, -0.561904, 0.227783, 10.1254", "0.385236, -1.72306, 0.0861373, 10.013", "0.540325, -2.88421, -0.0555087, 9.5689", "0.695415, -4.04536, -0.197155, 8.88107", "0.850505, -5.20651, -0.338801, 8.15984", "1.00559, -6.36766, -0.480447, 7.38587", "1.16068, -7.52881, -0.622093, 6.32096", "1.31577, -8.68996, -0.763739, 4.95965", "1.47086, -9.85111, -0.905385, 3.01679", "1.62595, -11.0123, -1.04703, 1.85095" ]
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "1.95373, -10.6775, 4.78152, 2.0", "2.86706, -14.1896, 5.11146, 2.0", "4.6249, -20.9493, 5.74647, 2.0" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000022303607795
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "5.33373, -7.33843, -1.91848, 0.67", "7.64169, -8.65876, -0.868732, 0.67", "9.61593, -9.67188, 0.0907357, 0.67", "10.8078, -10.2309, 0.518319, 0.67", "13.9953, -11.5533, 1.36678, 1.33", "17.5258, -13.1058, 2.08662, 0.67", "18.7503, -13.5837, 2.33944, 1.33", "21.7027, -14.7162, 3.02894, 0.67", "25.5026, -16.0841, 3.58755, 1.33", "28.04, -16.92, 3.84175, 0.67", "31.4929, -17.9822, 4.06806, 0.67", "37.4065, -19.9361, 4.31216, 0.67", "41.7869, -21.3386, 4.53081, 0.67", "48.497, -23.3286, 4.81023, 0.67", "52.1643, -24.3969, 5.20702, 0.67", "53.7516, -24.8401, 5.36705, 0.67", "57.2552, -25.6821, 5.64712, 0.67", "60.949, -26.6172, 5.74593, 0.67", "64.1678, -27.2116, 5.88252, 0.67", "68.7359, -28.351, 6.89707, 0.67" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000022303607795,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-3.65627, 13.3045, 2.18152, 2.67", "-5.62863, 19.4527, 0.173176, 2.67", "-7.33907, 24.7844, -1.56848, 2.67", "-10.7558, 35.4348, -5.04758, 1.33", "-13.0431, 42.5647, -7.37662, 1.33", "-15.1254, 49.0556, -9.49694, 1.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.45000022303607795
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "1.62595, -11.0123, -1.04703, 0.699659", "3.61179, -25.8803, -1.04703, 0.699659", "5.59762, -40.7482, -1.04703, 0.699659" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "4.6249, -20.9493, 5.74647, 0.67", "3.9791, -28.9843, 1.36269, 0.67", "3.72397, -31.9981, -0.500946, 0.67", "3.27226, -36.8877, -3.97014, 0.67", "2.83303, -41.6422, -7.34343, 0.67", "2.34919, -46.8797, -11.0594, 0.67", "2.0933, -49.6496, -13.0247, 0.67", "2.05136, -53.3689, -15.3354, 0.67", "2.21638, -56.1405, -17.5741, 1.33" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "4.6249, -20.9493, 5.74647, 1.33", "5.13977, -26.111, 7.70863, 1.33", "5.42072, -30.8909, 9.12065, 1.33", "5.75237, -35.0534, 10.1358, 1.33", "6.33867, -41.6475, 11.5312, 1.33", "6.74043, -46.2818, 12.3942, 1.33", "7.1958, -50.8585, 13.0738, 1.33", "8.2679, -61.4499, 14.1531, 1.33", "8.75739, -66.6731, 14.46, 0.67", "9.06528, -69.8271, 14.5333, 0.67", "9.58078, -74.0118, 14.5649, 0.67", "10.3519, -78.6151, 14.5369, 0.67", "10.8322, -81.0445, 14.5649, 0.67", "11.7069, -85.2007, 14.8535, 0.67", "12.516, -90.2954, 15.4011, 0.67", "13.5778, -96.6901, 16.221, 0.67", "14.3099, -100.911, 16.8306, 0.67", "14.937, -105.82, 17.5658, 0.67", "15.359, -109.834, 18.0807, 0.67", "16.1441, -118.388, 18.9198, 0.67", "16.3258, -123.086, 19.1868, 0.67", "16.343, -124.654, 19.2392, 0.67", "16.3997, -131.54, 19.5172, 0.67", "16.4955, -134.362, 19.6006, 0.67", "16.731, -139.118, 19.6794, 0.67", "16.9781, -144.75, 19.6794, 0.67", "17.0632, -150.545, 19.6794, 0.67", "17.2283, -156.533, 19.6794, 0.67", "17.5558, -162.056, 19.7332, 0.67", "17.7746, -165.49, 19.7963, 0.67", "17.8481, -166.973, 19.8604, 0.67", "18.3202, -172.717, 20.2419, 0.67", "18.7093, -177.353, 20.7858, 0.67", "19.0149, -180.25, 21.2276, 0.67", "19.4133, -183.302, 21.7538, 0.67", "20.1924, -187.995, 22.6014, 0.67", "21.6186, -195.289, 23.9356, 0.67", "22.6569, -200.42, 24.9382, 0.67", "23.5888, -205.183, 25.8409, 0.67", "24.1487, -208.305, 26.3675, 0.67", "24.7024, -211.025, 26.8035, 0.67", "25.5664, -214.804, 27.3416, 0.67", "26.434, -219.252, 27.935, 0.67", "27.318, -223.988, 28.4694, 0.67", "28.1392, -228.208, 28.9503, 0.67", "29.8145, -237.49, 29.9547, 0.67", "30.475, -241.322, 30.3863, 0.67", "31.0414, -244.975, 30.784, 0.67", "31.2816, -247.039, 31.0749, 0.67", "31.5898, -252.18, 32.0007, 0.67", "31.8013, -255.422, 32.6734, 0.67", "31.8682, -259.285, 33.5948, 0.67", "31.871, -262.74, 34.4682, 0.67", "31.9673, -269.867, 36.3897, 0.67", "31.936, -272.572, 37.1663, 0.67", "31.6654, -277.195, 38.5822, 0.67", "31.518, -281.519, 39.9436, 0.67", "31.4208, -286.606, 41.4449, 0.67" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "68.7359, -28.351, 6.89707, 0.67", "70.1661, -27.298, 5.18711, 0.67", "72.0476, -25.6357, 2.23059, 0.67", "73.5721, -24.2854, -0.287063, 0.67", "74.0315, -23.8971, -1.0292, 0.67", "75.303, -22.9077, -3.01104, 0.67", "76.1725, -22.2311, -4.36634, 0.67", "79.1856, -19.6425, -9.34751, 0.33", "79.5495, -19.3114, -9.92223, 0.67", "80.0079, -18.936, -10.7365, 0.33", "80.3925, -18.6514, -11.5594, 0.67" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "68.7359, -28.351, 6.89707, 0.67", "70.3031, -28.9263, 8.23886, 0.67", "75.7951, -30.8729, 11.882, 0.67", "77.7781, -31.7243, 13.0293, 0.67", "80.9424, -33.3119, 14.7219, 0.67", "84.4098, -35.3033, 16.3807, 0.67", "87.0382, -36.8912, 17.6377, 0.67", "89.6244, -38.5171, 18.6655, 0.67", "93.0353, -40.9538, 19.6476, 0.67", "94.3291, -42.0437, 20.0268, 0.67", "96.9669, -44.4305, 20.7254, 0.67", "100.297, -47.568, 21.259, 0.67", "101.53, -48.6911, 21.4282, 0.67", "103.278, -50.449, 21.622, 0.67", "104.486, -51.6556, 21.7627, 0.67", "106.626, -53.8423, 22.0643, 0.67", "109.148, -56.6725, 22.4481, 0.33", "111.202, -59.047, 22.7347, 0.33", "114.65, -62.783, 23.4434, 0.33", "118.426, -66.4705, 24.3247, 0.33", "119.95, -67.9792, 24.7381, 0.67", "121.635, -69.7191, 25.2613, 0.33", "123.901, -71.9106, 26.0115, 0.67", "125.962, -73.8597, 26.6191, 0.33", "127.195, -74.9483, 27.0231, 0.33", "128.847, -76.5878, 27.5841, 0.33", "130.471, -78.2428, 28.2405, 0.33", "131.82, -79.6807, 28.8921, 0.33", "133.708, -82.1085, 29.9522, 0.33", "136.339, -85.8963, 31.2996, 0.33", "137.446, -87.6598, 32.0145, 0.67", "138.405, -89.3384, 32.7142, 0.67", "140.343, -93.2185, 34.2303, 0.33", "141.535, -95.891, 35.2886, 0.33", "144.311, -102.52, 37.8047, 0.33", "146.17, -107.098, 39.4756, 0.67", "147.323, -110.167, 40.6277, 0.33", "147.893, -111.902, 41.3641, 0.67", "148.863, -115.397, 42.9888, 0.33", "149.531, -118.018, 44.4748, 0.33", "150.132, -120.568, 46.0756, 0.33", "151.216, -123.993, 47.9228, 0.33", "152.891, -128.119, 50.0452, 0.33", "153.754, -129.942, 50.9386, 0.67", "156.181, -133.954, 52.8362, 0.33", "158.03, -136.805, 54.173, 0.33", "161.026, -141.019, 55.905, 0.33", "162.819, -142.97, 56.6338, 0.33", "164.861, -144.713, 57.0238, 0.33", "168.955, -147.538, 57.5502, 0.67", "174.577, -155.804, 60.0843, 0.67", "180.231, -163.816, 63.2167, 0.67", "186.007, -172.075, 65.3977, 0.67", "193.425, -178.932, 66.9272, 0.67", "201.066, -185.358, 68.9646, 0.67", "208.838, -190.945, 72.3256, 0.67" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-15.1254, 49.0556, -9.49694, 0.67", "-15.5087, 51.8282, -11.339, 0.67", "-15.8082, 53.9942, -12.7781, 0.67", "-16.2033, 56.8522, -14.6768, 0.67", "-16.9663, 62.371, -18.3433, 0.67", "-17.1754, 63.8832, -19.348, 1.33" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-15.1254, 49.0556, -9.49694, 0.67", "-18.3256, 53.4376, -11.5847, 0.67", "-20.0743, 56.1143, -12.8382, 0.67", "-21.9308, 59.0361, -14.1456, 0.67", "-24.0005, 62.594, -15.6471, 0.67", "-24.9031, 64.3376, -16.305, 0.67", "-26.8561, 68.448, -17.8475, 0.67", "-28.6162, 72.3386, -19.2418, 0.67", "-29.4596, 74.2898, -19.8897, 0.67", "-31.3746, 79.0578, -21.2409, 0.67", "-32.9552, 83.1829, -22.368, 0.67", "-34.647, 87.4268, -23.605, 0.67", "-35.8333, 90.3591, -24.4435, 0.67", "-37.3793, 93.9203, -25.5396, 0.67", "-39.092, 97.5477, -26.6318, 0.67", "-43.5515, 105.639, -28.9822, 0.67", "-46.5781, 110.58, -30.3079, 0.67", "-48.4389, 113.392, -31.031, 0.67", "-49.8733, 115.339, -31.5756, 0.67", "-54.6065, 121.006, -32.9621, 0.67", "-57.482, 124.072, -33.3929, 0.67", "-61.3363, 128.005, -33.2565, 0.67", "-63.7107, 130.267, -33.0613, 0.67", "-66.6588, 132.994, -32.8615, 0.67", "-71.2269, 137.276, -32.6025, 0.67", "-74.6619, 140.713, -32.4361, 0.67", "-77.0769, 143.264, -32.3468, 0.67", "-82.3451, 148.719, -32.2616, 0.67", "-86.0775, 152.79, -32.2709, 0.67", "-88.8761, 156.041, -32.2146, 0.67", "-91.7019, 159.318, -32.3183, 0.67", "-93.1559, 161.11, -32.3576, 0.67", "-94.2733, 162.54, -32.2366, 0.67", "-95.6806, 164.568, -31.8373, 0.67", "-99.5695, 170.038, -30.7147, 0.67", "-104.112, 176.477, -29.4353, 0.67", "-106.339, 179.649, -28.8386, 0.67", "-108.759, 183.052, -28.2568, 0.33", "-110.549, 185.518, -27.9113, 0.33", "-113.023, 188.713, -27.6114, 0.67", "-114.572, 190.636, -27.4671, 0.67", "-119.131, 195.921, -26.6902, 0.67", "-121.147, 198.222, -26.1811, 0.67", "-123.045, 200.477, -25.5712, 0.33", "-124.012, 201.583, -25.1663, 0.33", "-127.207, 205.645, -23.2364, 0.33", "-128.572, 207.43, -22.1673, 0.33", "-130.575, 210.307, -20.2114, 0.33", "-131.331, 211.58, -19.353, 0.33", "-133.277, 214.895, -17.1071, 0.33", "-136.154, 219.859, -13.7307, 0.33", "-137.673, 222.54, -12.0358, 0.33", "-138.786, 224.363, -10.898, 0.33", "-139.91, 225.963, -9.97866, 0.67", "-141.61, 228.293, -8.68385, 0.33", "-143.434, 230.46, -7.61525, 0.67", "-145.029, 232.206, -6.86588, 0.33", "-147.18, 234.659, -5.8085, 0.33", "-148.717, 236.6, -4.79566, 0.67", "-150.526, 239.169, -3.36528, 0.33", "-152.839, 242.686, -1.38088, 0.33", "-155.439, 246.523, 0.794428, 0.33", "-157.256, 249.022, 2.38911, 0.67", "-159.899, 252.545, 4.75619, 0.33", "-160.443, 253.192, 5.22453, 0.67", "-162.054, 254.941, 6.59249, 0.67", "-164.387, 257.254, 8.4656, 0.67", "-166.095, 258.377, 9.31849, 0.33", "-168.364, 259.48, 10.0275, 0.33", "-168.998, 259.683, 10.127, 0.67" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "5.59762, -40.7482, -1.04703, 0.33", "7.58346, -55.6162, -1.04703, 0.33", "9.5693, -70.4842, -1.04703, 0.33" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "2.21638, -56.1405, -17.5741, 0.67", "1.711, -56.8741, -20.0347, 0.67", "1.46696, -56.8355, -21.2303, 0.67", "0.785914, -56.9947, -24.1035, 0.67", "0.313788, -57.3891, -26.3809, 0.67", "-0.797196, -58.4876, -30.7214, 0.67", "-1.56163, -59.3285, -33.4687, 0.67", "-2.90965, -60.9158, -38.3351, 0.67", "-3.88874, -62.036, -41.421, 0.67", "-5.86588, -64.22, -46.9744, 0.67", "-6.7125, -65.2669, -49.5234, 0.67", "-7.85464, -66.8037, -52.9489, 0.67", "-9.69578, -69.2522, -57.7301, 0.67", "-10.5198, -70.4042, -59.8827, 0.33", "-10.8218, -70.8014, -60.7139, 0.67", "-11.5352, -71.6609, -62.5136, 0.67", "-13.3532, -73.7746, -66.8104, 0.67", "-14.3977, -74.9082, -68.8478, 0.33", "-16.4868, -77.3379, -72.3525, 0.67", "-17.6794, -78.7196, -74.4687, 0.33", "-19.2314, -80.652, -77.2195, 0.67", "-20.5356, -82.0633, -79.1356, 0.33", "-21.7433, -83.4482, -80.8192, 0.67", "-23.4092, -85.3803, -83.0894, 0.67", "-27.6076, -90.3401, -88.3293, 0.67", "-29.0847, -92.2235, -90.2462, 0.67", "-32.2989, -96.6617, -94.6152, 0.67", "-33.4507, -98.2914, -96.2742, 0.67", "-35.2413, -100.945, -98.9051, 0.67", "-36.3936, -102.691, -100.68, 0.67", "-37.6478, -104.759, -102.57, 0.67", "-38.0762, -105.475, -103.25, 1.33", "-39.3551, -108.197, -105.853, 0.33", "-40.1134, -109.656, -107.3, 0.33", "-41.4936, -112.136, -109.653, 0.33", "-42.1485, -113.001, -110.467, 0.33", "-44.5554, -115.642, -112.579, 0.33", "-47.0581, -117.878, -114.313, 0.33", "-48.3075, -118.863, -114.985, 0.33", "-50.1635, -120.124, -115.935, 0.33", "-54.7601, -122.751, -118.175, 0.33", "-57.2318, -124.041, -119.438, 0.33", "-60.4513, -125.594, -121.202, 0.33", "-61.7837, -126.189, -122.016, 0.33", "-64.8346, -127.689, -124.154, 0.33", "-67.242, -129.101, -126.11, 0.33", "-68.1163, -129.773, -126.966, 0.33", "-69.6908, -131.061, -128.672, 0.33", "-72.3846, -133.241, -131.507, 0.33", "-75.3954, -135.878, -134.902, 0.33", "-75.7483, -136.258, -135.327, 0.33", "-76.7225, -137.373, -136.648, 0.33", "-78.4346, -138.973, -138.931, 0.33", "-80.5983, -140.674, -141.91, 0.33", "-82.1155, -141.74, -144.131, 0.33", "-82.7081, -141.937, -144.97, 0.33", "-85.3049, -142.364, -147.944, 0.33", "-86.595, -142.386, -149.482, 0.33", "-87.4469, -142.316, -150.639, 0.67", "-88.001, -142.276, -151.472, 0.67", "-90.0865, -142.138, -154.56, 0.67", "-90.9044, -142.061, -155.805, 0.67", "-95.9444, -141.804, -163.548, 0.67", "-99.7386, -141.806, -169.28, 0.67", "-101.774, -141.85, -172.418, 0.67", "-103.017, -141.908, -174.44, 0.67", "-104.937, -142.091, -177.777, 0.67", "-106.95, -142.242, -181.17, 0.67", "-108.404, -142.399, -183.029, 0.67" ],
    "parent" : "dend_22",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "2.21638, -56.1405, -17.5741, 0.67", "2.66327, -63.9203, -16.2923, 0.67", "2.77959, -65.366, -16.146, 0.67", "3.02477, -68.3164, -15.913, 0.67", "3.10565, -70.058, -15.7273, 0.67", "3.26866, -75.265, -15.1178, 0.67", "3.47306, -83.0974, -14.194, 0.67", "3.47898, -89.8315, -13.6206, 0.67", "3.52346, -91.9185, -13.3915, 0.67", "3.69061, -97.1766, -12.7132, 0.67", "3.82543, -100.698, -12.2049, 0.67", "4.02985, -105.253, -11.5545, 0.67", "4.28879, -109.765, -11.0203, 0.67", "4.67973, -116.215, -10.4639, 0.67", "4.97389, -119.43, -10.3746, 0.67", "5.37306, -122.371, -10.4481, 0.67", "6.42416, -129.423, -10.7939, 0.67", "7.09718, -134.605, -11.2534, 0.67", "7.4146, -137.575, -11.6299, 0.67", "7.8843, -145.916, -13.196, 0.67", "7.97424, -150.091, -14.0314, 0.67", "7.88987, -151.793, -14.3806, 0.67", "7.34795, -156.644, -15.343, 0.67", "6.913, -160.348, -16.2239, 0.67", "6.02176, -165.415, -17.6709, 0.67", "5.21202, -169.049, -18.8276, 0.67", "4.60374, -172.449, -20.1255, 0.67", "4.26076, -176.254, -21.8038, 0.67", "4.16826, -183.558, -25.2184, 0.33", "4.34583, -188.261, -27.5014, 0.33", "4.43553, -190.187, -28.3645, 0.33", "4.82001, -197.106, -31.33, 0.33", "5.44233, -205.936, -34.8977, 0.33", "5.54273, -208.251, -35.7148, 0.33", "5.58598, -211.853, -36.7718, 0.33", "5.79043, -220.314, -39.0457, 0.33", "5.77719, -222.296, -39.5029, 0.33", "5.6995, -223.168, -39.6148, 0.67", "4.97611, -228.313, -39.8718, 0.33", "4.52621, -230.873, -40.0411, 0.33" ],
    "parent" : "dend_22",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "31.4208, -286.606, 41.4449, 0.67", "32.6115, -291.436, 43.4172, 0.67", "33.5803, -294.312, 45.0529, 0.67", "35.4802, -299.016, 48.0544, 0.67", "36.3302, -301.007, 49.3193, 0.67", "37.5155, -303.45, 50.8209, 0.67", "40.4492, -309.243, 54.2144, 0.67", "42.2989, -312.44, 56.2132, 0.67", "43.2134, -313.914, 57.0862, 0.67", "45.0751, -316.546, 58.4432, 0.67", "47.9175, -320.549, 60.2648, 0.67", "48.9471, -322.287, 60.8284, 0.67", "50.2527, -324.824, 61.3262, 0.33", "51.3015, -327.105, 61.645, 0.33", "52.361, -329.563, 62.0009, 0.33", "53.3763, -332.12, 62.3747, 0.33", "55.0619, -338.366, 63.1179, 0.33", "61.1071, -346.118, 66.1116, 0.33" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "31.4208, -286.606, 41.4449, 0.67", "30.4304, -289.44, 41.4099, 0.67", "28.7066, -294.011, 41.3829, 0.67", "27.6687, -297.123, 41.38, 0.67", "26.3519, -301.682, 41.3847, 0.67", "25.1148, -305.808, 41.4953, 0.67", "24.2528, -308.91, 41.547, 0.67", "23.6729, -311.183, 41.5621, 0.67", "21.5656, -318.921, 41.5134, 0.67", "20.9434, -321.509, 41.4683, 0.67", "19.7956, -326.268, 41.3412, 0.67", "18.2812, -332.159, 41.1409, 0.67", "17.8744, -333.79, 41.0757, 0.67", "16.4809, -338.83, 40.9978, 0.67", "15.2512, -342.524, 41.0373, 0.67", "12.8093, -349.579, 41.2988, 0.67", "11.8076, -352.52, 41.4827, 0.67", "11.269, -354.158, 41.6682, 0.67", "9.85542, -359.106, 42.196, 0.67", "9.46106, -360.825, 42.3933, 0.67", "8.54201, -364.544, 42.827, 0.67", "7.51904, -368.933, 43.3212, 0.67", "6.39956, -374.307, 43.8506, 0.67", "4.41298, -385.799, 44.9728, 0.67", "3.82816, -389.55, 45.3015, 0.67", "3.2481, -393.076, 45.7259, 0.67", "3.00545, -394.433, 45.9316, 0.67", "2.26712, -398.501, 46.6761, 0.67", "0.929756, -404.378, 47.9294, 0.67", "0.264362, -407.202, 48.5925, 0.67", "-0.710305, -410.363, 49.4361, 0.67", "-1.66124, -412.95, 50.2094, 0.67", "-2.54321, -414.735, 50.791, 0.67", "-4.86933, -418.377, 52.0021, 0.67", "-6.9947, -421.043, 52.8832, 0.67", "-10.4573, -424.714, 54.2054, 0.33", "-12.8543, -426.648, 54.7503, 0.33", "-14.8047, -428.005, 55.0241, 0.33", "-16.102, -428.816, 55.3068, 0.67", "-19.0422, -430.371, 55.8706, 0.33", "-20.768, -431.198, 56.0904, 0.33", "-25.3136, -433.935, 56.088, 0.33", "-28.3294, -436.213, 56.3532, 0.33", "-33.4602, -441.523, 57.458, 0.67", "-38.3149, -450.628, 58.5736, 0.67" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "80.3925, -18.6514, -11.5594, 0.33", "83.3438, -16.0257, -11.9004, 0.33", "84.8647, -14.6726, -12.0761, 0.33", "86.7283, -13.0146, -12.2915, 0.67", "88.351, -11.571, -12.479, 0.67" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "80.3925, -18.6514, -11.5594, 0.33", "81.7816, -18.5799, -13.0244, 0.33", "83.2589, -18.464, -14.4075, 0.67", "88.3825, -17.9535, -19.2404, 0.33", "89.4023, -17.8423, -20.2054, 0.67", "90.3951, -17.7242, -21.1555, 0.67", "93.6975, -17.2972, -24.3033, 0.33", "94.2531, -17.204, -24.8343, 0.67", "96.9364, -16.7019, -27.3435, 0.33", "96.9364, -16.7019, -27.3435, 0.67", "98.4209, -16.2646, -28.7778, 0.33", "99.2052, -16.0221, -29.6094, 0.67", "100.371, -15.6319, -30.9847, 0.33", "101.706, -15.1715, -32.5581, 0.67", "103.777, -14.3913, -34.8637, 0.33", "104.926, -13.9428, -36.182, 0.67" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "208.838, -190.945, 72.3256, 0.33", "215.217, -198.501, 75.0673, 0.33" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "208.838, -190.945, 72.3256, 0.67", "215.27, -198.121, 75.7772, 0.33" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-17.1754, 63.8832, -19.348, 0.67", "-14.033, 67.7236, -23.6149, 0.67", "-12.3204, 69.8123, -25.9862, 0.67", "-7.76191, 75.5965, -33.5562, 0.67", "-6.00406, 77.7526, -36.592, 0.67", "-4.67578, 79.5108, -39.15, 0.67", "-2.10998, 82.9654, -44.2574, 0.67", "-0.240193, 85.4736, -48.1107, 0.67", "2.47152, 89.3184, -54.0716, 0.67", "3.63241, 90.896, -56.6904, 0.67", "5.3855, 93.3202, -60.9775, 0.67", "5.90085, 93.947, -62.1682, 0.33", "6.63189, 94.8912, -63.8309, 0.67", "8.0382, 96.2585, -66.1295, 0.33", "8.82998, 96.9574, -67.0948, 0.33", "10.0275, 98.1322, -68.4347, 0.33", "13.1259, 101.203, -71.4219, 0.67", "14.8074, 102.905, -73.0196, 0.33", "17.3787, 105.476, -75.3122, 0.33", "19.4604, 107.695, -77.0286, 0.33", "21.5129, 109.877, -78.6629, 0.33", "22.2479, 110.692, -79.2178, 0.67", "25.2678, 114.208, -81.1681, 0.33", "26.2249, 115.226, -81.7603, 0.33", "28.5043, 117.381, -83.3058, 0.33", "30.8317, 119.315, -85.0926, 0.67", "31.9776, 120.291, -86.1184, 0.33", "32.5756, 121.065, -87.0509, 0.33", "33.6619, 123.457, -90.1749, 0.67", "34.5678, 126.571, -94.3155, 0.33", "34.9471, 128.308, -96.6015, 0.33", "35.0792, 129.499, -98.0975, 0.67", "35.4907, 133.955, -104.112, 0.33", "36.0022, 137.315, -108.981, 0.33", "36.2371, 138.716, -110.97, 0.33", "36.8047, 140.549, -113.56, 0.33", "36.8382, 140.606, -113.657, 0.67", "38.4992, 142.335, -117.268, 0.33", "40.5466, 143.453, -120.494, 0.67", "41.6356, 143.673, -122.191, 0.33", "42.3067, 143.749, -123.208, 0.67", "44.5839, 143.925, -126.708, 0.33", "45.1651, 143.944, -127.584, 0.33", "46.703, 143.944, -129.784, 0.67", "48.7597, 143.889, -132.912, 0.33", "49.8963, 143.901, -134.679, 0.33", "50.0771, 143.917, -134.954, 0.67", "53.3262, 144.621, -139.531, 0.33", "54.162, 144.834, -140.623, 0.67", "56.3899, 145.62, -143.126, 0.33", "57.4188, 146.158, -144.451, 0.67", "59.3764, 147.256, -147.203, 0.33", "60.9476, 148.282, -149.514, 0.67", "62.0268, 148.984, -151.118, 0.67", "63.7358, 149.872, -153.812, 0.67", "68.6553, 151.493, -162.598, 0.33", "69.1889, 151.613, -163.82, 0.33", "69.4602, 151.645, -164.518, 0.67", "71.3644, 151.734, -169.416, 0.33", "72.7644, 151.746, -172.879, 0.33", "75.2963, 151.57, -179.408, 0.67", "79.0176, 151.137, -188.305, 0.33", "80.8539, 150.967, -192.807, 0.33", "82.3215, 150.872, -196.464, 0.33", "83.1731, 150.9, -198.638, 0.67", "87.1459, 151.173, -207.823, 0.33", "89.4177, 151.296, -212.416, 0.33" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-17.1754, 63.8832, -19.348, 0.67", "-17.6901, 71.0182, -17.0461, 0.67", "-17.8025, 76.3026, -15.495, 0.67", "-17.8955, 81.7255, -14.1329, 0.67", "-17.9882, 87.3139, -12.92, 0.67", "-18.1623, 92.3766, -11.7699, 0.67", "-18.1835, 96.2982, -11.1104, 0.67", "-18.1317, 100.493, -10.7601, 0.67", "-17.8134, 106.791, -10.4476, 0.67", "-17.6579, 111.001, -10.2915, 0.67", "-17.5054, 118.035, -10.182, 0.67", "-17.3331, 128.662, -9.96766, 0.67", "-17.1862, 133.756, -9.85934, 0.67", "-17.1451, 136.757, -9.72019, 0.67", "-16.9292, 142.025, -9.34507, 0.67", "-16.5953, 145.829, -8.9291, 0.67", "-16.1768, 149.068, -8.46017, 0.67", "-15.7413, 151.747, -7.74639, 0.67", "-14.8467, 155.457, -6.55914, 0.67", "-13.5987, 160.006, -5.02267, 0.67", "-12.014, 164.398, -3.31613, 0.67", "-10.8282, 167.726, -1.8554, 0.67", "-9.75127, 170.736, -0.416831, 0.67", "-8.61094, 174.004, 1.04447, 0.67", "-7.82001, 176.184, 2.02802, 0.67", "-5.64137, 182.546, 4.96629, 0.67", "-4.24862, 186.679, 6.73879, 0.67", "-3.232, 189.905, 8.09824, 0.67", "-2.03262, 194.079, 9.79036, 0.67", "-0.621003, 198.53, 11.8098, 0.67", "0.0132463, 200.403, 12.7493, 0.67", "1.17052, 203.741, 14.473, 0.67", "3.38078, 210.004, 17.8942, 0.67", "4.42237, 213.035, 19.5087, 0.67", "5.77288, 217.474, 21.8011, 0.67", "6.72132, 220.929, 23.269, 0.33", "7.41395, 223.444, 24.2687, 0.33", "8.40745, 226.532, 25.3533, 0.33", "9.49513, 229.667, 26.2339, 0.33", "11.4479, 236.061, 27.8448, 0.33", "12.7814, 241.016, 28.9897, 0.33", "13.9689, 245.684, 30.2152, 0.33", "15.1747, 250.723, 31.385, 0.33", "16.1032, 254.741, 32.1562, 0.33", "16.8345, 258.364, 32.7977, 0.33", "17.0484, 259.438, 32.93, 0.67", "17.3195, 262.872, 33.1681, 0.33", "17.0939, 269.095, 32.869, 0.67", "16.6154, 271.826, 32.5082, 0.33", "19.8528, 281.664, 33.8192, 0.33" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-168.998, 259.683, 10.127, 0.33", "-167.528, 263.44, 11.5607, 0.33", "-166.689, 265.585, 12.3796, 0.33", "-166.094, 267.107, 12.9605, 0.33", "-165.343, 269.026, 13.6929, 0.33", "-164.21, 271.923, 14.7987, 0.67", "-159.614, 280.898, 17.2112, 0.67" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-168.998, 259.683, 10.127, 0.67", "-170.791, 260.286, 10.0262, 0.67", "-173.797, 261.297, 9.85712, 0.67" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "-108.404, -142.399, -183.029, 0.33", "-109.76, -146.701, -180.275, 0.33", "-110.464, -148.729, -179.124, 0.33", "-112.531, -153.371, -176.779, 0.33", "-113.622, -155.342, -175.847, 0.33", "-116.146, -159.271, -174.459, 0.33", "-119.401, -164.339, -172.667, 0.33", "-121.869, -167.867, -171.734, 0.33", "-124.732, -171.472, -170.964, 0.33", "-126.775, -173.795, -170.772, 0.33", "-131.2, -177.923, -170.453, 0.33" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "-108.404, -142.399, -183.029, 0.67", "-110.166, -142.07, -186.679, 0.67", "-112.106, -141.566, -190.576, 0.67", "-114.2, -140.951, -195.169, 0.67", "-116.663, -140.042, -200.586, 0.33", "-117.397, -139.763, -202.064, 0.33", "-118.198, -139.415, -203.568, 0.33", "-119.642, -138.654, -206.169, 0.33", "-122.638, -136.884, -211.011, 0.67", "-123.879, -136.179, -212.571, 0.67", "-125.806, -134.939, -214.652, 0.67", "-131.375, -131.444, -219.985, 0.33", "-134.05, -129.818, -222.105, 0.33", "-135.638, -128.85, -223.143, 0.33", "-139.879, -126.251, -225.463, 0.33", "-141.45, -125.303, -226.292, 0.33", "-143.748, -123.836, -227.352, 0.33", "-146.74, -122.013, -227.923, 0.33", "-150.576, -119.712, -228.337, 0.33" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "4.52621, -230.873, -40.0411, 0.33", "5.53733, -233.663, -40.0411, 0.33", "6.51512, -236.284, -39.8724, 0.33", "7.65815, -239.201, -39.5439, 0.33", "9.57983, -244.418, -38.8497, 0.33", "11.255, -248.966, -38.2446, 0.33", "12.0065, -251.006, -37.9731, 0.33", "13.3347, -254.76, -37.3945, 0.67", "14.3087, -257.69, -36.8658, 0.33", "15.2152, -260.112, -36.3035, 0.33" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "4.52621, -230.873, -40.0411, 0.33", "4.02754, -234.631, -39.9526, 0.33", "3.18339, -239.451, -39.5254, 0.33", "2.9856, -240.682, -39.3942, 0.67", "2.68957, -242.781, -39.1564, 0.33", "2.23924, -246.837, -38.8338, 0.33", "1.62476, -252.916, -38.4752, 0.33", "1.08116, -257.082, -38.15, 0.33", "0.827231, -259.104, -38.1187, 0.33", "0.680947, -260.076, -38.2007, 0.67", "0.079413, -264.391, -39.0151, 0.33", "-0.153097, -265.86, -39.4722, 0.33", "-0.332032, -267.003, -39.9613, 0.67", "-1.30731, -271.66, -42.1476, 0.33", "-2.16983, -275.082, -43.7754, 0.33", "-3.00329, -278.571, -45.4114, 0.33", "-3.40797, -280.884, -46.5927, 0.33", "-3.45691, -281.846, -47.1108, 0.67", "-2.99683, -285.513, -49.3633, 0.33", "-2.89049, -285.789, -49.5521, 0.67", "-1.44725, -288.048, -51.2073, 0.33", "0.629245, -290.796, -53.5918, 0.33", "1.75361, -292.204, -54.8064, 0.33", "4.03237, -294.763, -57.1882, 0.67", "5.30955, -296.149, -58.6639, 0.67", "6.54625, -297.638, -60.4672, 0.67", "8.53824, -300.03, -63.6632, 0.33", "9.68229, -301.535, -65.5919, 0.33", "11.8803, -304.339, -69.2774, 0.33", "13.6417, -306.389, -72.0978, 0.67", "16.4659, -309.297, -76.4076, 0.33", "18.1617, -310.651, -78.6199, 0.33", "20.3169, -311.85, -80.6308, 0.33", "21.6572, -312.378, -81.539, 0.33", "24.1023, -313.242, -82.2677, 0.33", "25.8242, -313.778, -82.3922, 0.33", "27.4556, -314.245, -82.27, 0.67", "29.5758, -314.981, -82.2868, 0.33", "32.0459, -315.903, -82.4719, 0.33", "35.7578, -317.757, -82.9458, 0.33", "36.5619, -318.237, -83.1171, 0.33", "38.7748, -319.696, -83.7768, 0.33", "42.842, -322.621, -85.2588, 0.33", "44.551, -323.922, -85.9871, 0.33", "46.3247, -325.376, -86.8783, 0.33", "48.5558, -327.192, -88.2932, 0.33", "50.2618, -328.627, -89.4165, 0.33", "51.375, -329.665, -90.1753, 0.33" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-159.614, 280.898, 17.2112, 0.33", "-154.177, 289.704, 17.5209, 0.33", "-149.579, 298.966, 18.5474, 0.33", "-144.7, 308.104, 17.8709, 0.33", "-139.194, 316.657, 16.0476, 0.33" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-159.614, 280.898, 17.2112, 0.67", "-157.459, 289.351, 22.7374, 0.33", "-154.517, 297.132, 28.7727, 0.33", "-149.821, 304.235, 34.4469, 0.33", "-144.442, 312.38, 37.7465, 0.33" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-173.797, 261.297, 9.85712, 0.33", "-176.326, 261.574, 9.85712, 0.33", "-180.641, 262.048, 9.85712, 0.33", "-183.782, 262.393, 9.85712, 0.67", "-193.586, 264.249, 10.723, 0.67", "-203.55, 264.733, 10.0067, 0.67", "-213.333, 264.743, 7.93691, 0.67", "-222.736, 266.754, 5.1233, 0.67" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-173.797, 261.297, 9.85712, 0.33", "-178.895, 261.663, 11.1859, 0.33", "-181.667, 261.862, 11.9084, 0.33", "-186.561, 262.214, 13.1838, 0.33", "-195.77, 262.556, 17.0683, 0.33", "-204.892, 261.665, 21.0759, 0.33", "-214.192, 261.066, 24.7078, 0.33", "-223.354, 259.876, 28.5497, 0.33" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_18", "dend_11", "dend_0", "dend_22", "dend_19", "dend_15", "dend_12", "dend_8", "dend_1", "dend_26", "dend_23", "dend_21", "dend_20", "dend_17", "dend_16", "dend_14", "dend_13", "dend_10", "dend_9", "dend_5", "dend_2", "dend_28", "dend_27", "dend_25", "dend_24", "dend_7", "dend_6", "dend_4", "dend_3" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_18", "dend_11", "dend_0", "dend_22", "dend_19", "dend_15", "dend_12", "dend_8", "dend_1", "dend_26", "dend_23", "dend_21", "dend_20", "dend_17", "dend_16", "dend_14", "dend_13", "dend_10", "dend_9", "dend_5", "dend_2", "dend_28", "dend_27", "dend_25", "dend_24", "dend_7", "dend_6", "dend_4", "dend_3" ]
  }, {
    "name" : "ModelViewParmSubset_5",
    "groups" : [ ],
    "sections" : [ "dend_18", "dend_11", "dend_0", "axon_0", "dend_22", "dend_19", "dend_15", "dend_12", "dend_8", "dend_1", "axon_1", "dend_26", "dend_23", "dend_21", "dend_20", "dend_17", "dend_16", "dend_14", "dend_13", "dend_10", "dend_9", "dend_5", "dend_2", "dend_28", "dend_27", "dend_25", "dend_24", "dend_7", "dend_6", "dend_4", "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_18", "dend_18", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_17", "dend_17", "dend_17", "dend_17", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_14", "dend_13", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_2", "dend_2", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_6", "dend_6", "dend_6", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.993125",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.005611",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.068459995",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.517764",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "6.3E-5",
    "erev" : "-64.6017"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "3.45E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.077616",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.002099",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "1.13999995E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.26087198",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "2.0E-5",
    "erev" : "-69.78141"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.395881",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009986",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "5.0100003E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.009728",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "2.7999999E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cACint209_L23_SBC_afc0be559d_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_18, id: dend_18, parent: soma_0
create dend_18
public dend_18
// Section: dend_11, id: dend_11, parent: soma_0
create dend_11
public dend_11
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_22, id: dend_22, parent: dend_18
create dend_22
public dend_22
// Section: dend_19, id: dend_19, parent: dend_18
create dend_19
public dend_19
// Section: dend_15, id: dend_15, parent: dend_11
create dend_15
public dend_15
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12
// Section: dend_8, id: dend_8, parent: dend_0
create dend_8
public dend_8
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_26, id: dend_26, parent: dend_22
create dend_26
public dend_26
// Section: dend_23, id: dend_23, parent: dend_22
create dend_23
public dend_23
// Section: dend_21, id: dend_21, parent: dend_19
create dend_21
public dend_21
// Section: dend_20, id: dend_20, parent: dend_19
create dend_20
public dend_20
// Section: dend_17, id: dend_17, parent: dend_15
create dend_17
public dend_17
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_14, id: dend_14, parent: dend_12
create dend_14
public dend_14
// Section: dend_13, id: dend_13, parent: dend_12
create dend_13
public dend_13
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9
// Section: dend_5, id: dend_5, parent: dend_1
create dend_5
public dend_5
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_28, id: dend_28, parent: dend_26
create dend_28
public dend_28
// Section: dend_27, id: dend_27, parent: dend_26
create dend_27
public dend_27
// Section: dend_25, id: dend_25, parent: dend_23
create dend_25
public dend_25
// Section: dend_24, id: dend_24, parent: dend_23
create dend_24
public dend_24
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_4, id: dend_4, parent: dend_2
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_18, dend_11, dend_0, dend_22, dend_19, dend_15, dend_12, dend_8, dend_1, dend_26, dend_23, dend_21, dend_20, dend_17, dend_16, dend_14, dend_13, dend_10, dend_9, dend_5, dend_2, dend_28, dend_27, dend_25, dend_24, dend_7, dend_6, dend_4, dend_3]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_18, dend_11, dend_0, dend_22, dend_19, dend_15, dend_12, dend_8, dend_1, dend_26, dend_23, dend_21, dend_20, dend_17, dend_16, dend_14, dend_13, dend_10, dend_9, dend_5, dend_2, dend_28, dend_27, dend_25, dend_24, dend_7, dend_6, dend_4, dend_3]}
objref ModelViewParmSubset_4
// Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_18, dend_11, dend_0, axon_0, dend_22, dend_19, dend_15, dend_12, dend_8, dend_1, axon_1, dend_26, dend_23, dend_21, dend_20, dend_17, dend_16, dend_14, dend_13, dend_10, dend_9, dend_5, dend_2, dend_28, dend_27, dend_25, dend_24, dend_7, dend_6, dend_4, dend_3]}
objref ModelViewParmSubset_5
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_23
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_18, dend_18, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_8, dend_8, dend_8, dend_8, dend_8, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_14, dend_13, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_18(0), soma_0(0.45000022303607795)
    connect dend_11(0), soma_0(0.45000022303607795)
    connect dend_0(0), soma_0(0.45000022303607795)
    connect axon_0(0), soma_0(1.0)
    connect dend_22(0), dend_18(1.0)
    connect dend_19(0), dend_18(1.0)
    connect dend_15(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)
    connect dend_8(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_26(0), dend_22(1.0)
    connect dend_23(0), dend_22(1.0)
    connect dend_21(0), dend_19(1.0)
    connect dend_20(0), dend_19(1.0)
    connect dend_17(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_14(0), dend_12(1.0)
    connect dend_13(0), dend_12(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)
    connect dend_5(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_28(0), dend_26(1.0)
    connect dend_27(0), dend_26(1.0)
    connect dend_25(0), dend_23(1.0)
    connect dend_24(0), dend_23(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_4(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -1.47584, 12.2108, 1.78589, 2.80655 ) }
    soma_0 { pt3dadd( -1.32075, 11.0496, 1.64424, 4.71895 ) }
    soma_0 { pt3dadd( -1.16566, 9.88845, 1.5026, 5.5877 ) }
    soma_0 { pt3dadd( -1.01057, 8.7273, 1.36095, 6.45645 ) }
    soma_0 { pt3dadd( -0.855481, 7.56615, 1.21931, 7.3252 ) }
    soma_0 { pt3dadd( -0.700391, 6.405, 1.07766, 8.15767 ) }
    soma_0 { pt3dadd( -0.545302, 5.24385, 0.936013, 8.71842 ) }
    soma_0 { pt3dadd( -0.390212, 4.0827, 0.794367, 8.99013 ) }
    soma_0 { pt3dadd( -0.235122, 2.92155, 0.652721, 9.42685 ) }
    soma_0 { pt3dadd( -0.0800328, 1.7604, 0.511075, 9.71492 ) }
    soma_0 { pt3dadd( 0.0750567, 0.599247, 0.369429, 10.003 ) }
    soma_0 { pt3dadd( 0.230146, -0.561904, 0.227783, 10.1254 ) }
    soma_0 { pt3dadd( 0.385236, -1.72306, 0.0861373, 10.013 ) }
    soma_0 { pt3dadd( 0.540325, -2.88421, -0.0555087, 9.5689 ) }
    soma_0 { pt3dadd( 0.695415, -4.04536, -0.197155, 8.88107 ) }
    soma_0 { pt3dadd( 0.850505, -5.20651, -0.338801, 8.15984 ) }
    soma_0 { pt3dadd( 1.00559, -6.36766, -0.480447, 7.38587 ) }
    soma_0 { pt3dadd( 1.16068, -7.52881, -0.622093, 6.32096 ) }
    soma_0 { pt3dadd( 1.31577, -8.68996, -0.763739, 4.95965 ) }
    soma_0 { pt3dadd( 1.47086, -9.85111, -0.905385, 3.01679 ) }
    soma_0 { pt3dadd( 1.62595, -11.0123, -1.04703, 1.85095 ) }
    // Section: dend_18, id: dend_18, parent: soma_0 (entry count 21/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 1.95373, -10.6775, 4.78152, 2.0 ) }
    dend_18 { pt3dadd( 2.86706, -14.1896, 5.11146, 2.0 ) }
    dend_18 { pt3dadd( 4.6249, -20.9493, 5.74647, 2.0 ) }
    // Section: dend_11, id: dend_11, parent: soma_0 (entry count 24/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 5.33373, -7.33843, -1.91848, 0.67 ) }
    dend_11 { pt3dadd( 7.64169, -8.65876, -0.868732, 0.67 ) }
    dend_11 { pt3dadd( 9.61593, -9.67188, 0.0907357, 0.67 ) }
    dend_11 { pt3dadd( 10.8078, -10.2309, 0.518319, 0.67 ) }
    dend_11 { pt3dadd( 13.9953, -11.5533, 1.36678, 1.33 ) }
    dend_11 { pt3dadd( 17.5258, -13.1058, 2.08662, 0.67 ) }
    dend_11 { pt3dadd( 18.7503, -13.5837, 2.33944, 1.33 ) }
    dend_11 { pt3dadd( 21.7027, -14.7162, 3.02894, 0.67 ) }
    dend_11 { pt3dadd( 25.5026, -16.0841, 3.58755, 1.33 ) }
    dend_11 { pt3dadd( 28.04, -16.92, 3.84175, 0.67 ) }
    dend_11 { pt3dadd( 31.4929, -17.9822, 4.06806, 0.67 ) }
    dend_11 { pt3dadd( 37.4065, -19.9361, 4.31216, 0.67 ) }
    dend_11 { pt3dadd( 41.7869, -21.3386, 4.53081, 0.67 ) }
    dend_11 { pt3dadd( 48.497, -23.3286, 4.81023, 0.67 ) }
    dend_11 { pt3dadd( 52.1643, -24.3969, 5.20702, 0.67 ) }
    dend_11 { pt3dadd( 53.7516, -24.8401, 5.36705, 0.67 ) }
    dend_11 { pt3dadd( 57.2552, -25.6821, 5.64712, 0.67 ) }
    dend_11 { pt3dadd( 60.949, -26.6172, 5.74593, 0.67 ) }
    dend_11 { pt3dadd( 64.1678, -27.2116, 5.88252, 0.67 ) }
    dend_11 { pt3dadd( 68.7359, -28.351, 6.89707, 0.67 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 44/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -3.65627, 13.3045, 2.18152, 2.67 ) }
    dend_0 { pt3dadd( -5.62863, 19.4527, 0.173176, 2.67 ) }
    dend_0 { pt3dadd( -7.33907, 24.7844, -1.56848, 2.67 ) }
    dend_0 { pt3dadd( -10.7558, 35.4348, -5.04758, 1.33 ) }
    dend_0 { pt3dadd( -13.0431, 42.5647, -7.37662, 1.33 ) }
    dend_0 { pt3dadd( -15.1254, 49.0556, -9.49694, 1.33 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 50/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 1.62595, -11.0123, -1.04703, 0.699659 ) }
    axon_0 { pt3dadd( 3.61179, -25.8803, -1.04703, 0.699659 ) }
    axon_0 { pt3dadd( 5.59762, -40.7482, -1.04703, 0.699659 ) }
    // Section: dend_22, id: dend_22, parent: dend_18 (entry count 53/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( 4.6249, -20.9493, 5.74647, 0.67 ) }
    dend_22 { pt3dadd( 3.9791, -28.9843, 1.36269, 0.67 ) }
    dend_22 { pt3dadd( 3.72397, -31.9981, -0.500946, 0.67 ) }
    dend_22 { pt3dadd( 3.27226, -36.8877, -3.97014, 0.67 ) }
    dend_22 { pt3dadd( 2.83303, -41.6422, -7.34343, 0.67 ) }
    dend_22 { pt3dadd( 2.34919, -46.8797, -11.0594, 0.67 ) }
    dend_22 { pt3dadd( 2.0933, -49.6496, -13.0247, 0.67 ) }
    dend_22 { pt3dadd( 2.05136, -53.3689, -15.3354, 0.67 ) }
    dend_22 { pt3dadd( 2.21638, -56.1405, -17.5741, 1.33 ) }
    // Section: dend_19, id: dend_19, parent: dend_18 (entry count 62/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 4.6249, -20.9493, 5.74647, 1.33 ) }
    dend_19 { pt3dadd( 5.13977, -26.111, 7.70863, 1.33 ) }
    dend_19 { pt3dadd( 5.42072, -30.8909, 9.12065, 1.33 ) }
    dend_19 { pt3dadd( 5.75237, -35.0534, 10.1358, 1.33 ) }
    dend_19 { pt3dadd( 6.33867, -41.6475, 11.5312, 1.33 ) }
    dend_19 { pt3dadd( 6.74043, -46.2818, 12.3942, 1.33 ) }
    dend_19 { pt3dadd( 7.1958, -50.8585, 13.0738, 1.33 ) }
    dend_19 { pt3dadd( 8.2679, -61.4499, 14.1531, 1.33 ) }
    dend_19 { pt3dadd( 8.75739, -66.6731, 14.46, 0.67 ) }
    dend_19 { pt3dadd( 9.06528, -69.8271, 14.5333, 0.67 ) }
    dend_19 { pt3dadd( 9.58078, -74.0118, 14.5649, 0.67 ) }
    dend_19 { pt3dadd( 10.3519, -78.6151, 14.5369, 0.67 ) }
    dend_19 { pt3dadd( 10.8322, -81.0445, 14.5649, 0.67 ) }
    dend_19 { pt3dadd( 11.7069, -85.2007, 14.8535, 0.67 ) }
    dend_19 { pt3dadd( 12.516, -90.2954, 15.4011, 0.67 ) }
    dend_19 { pt3dadd( 13.5778, -96.6901, 16.221, 0.67 ) }
    dend_19 { pt3dadd( 14.3099, -100.911, 16.8306, 0.67 ) }
    dend_19 { pt3dadd( 14.937, -105.82, 17.5658, 0.67 ) }
    dend_19 { pt3dadd( 15.359, -109.834, 18.0807, 0.67 ) }
    dend_19 { pt3dadd( 16.1441, -118.388, 18.9198, 0.67 ) }
    dend_19 { pt3dadd( 16.3258, -123.086, 19.1868, 0.67 ) }
    dend_19 { pt3dadd( 16.343, -124.654, 19.2392, 0.67 ) }
    dend_19 { pt3dadd( 16.3997, -131.54, 19.5172, 0.67 ) }
    dend_19 { pt3dadd( 16.4955, -134.362, 19.6006, 0.67 ) }
    dend_19 { pt3dadd( 16.731, -139.118, 19.6794, 0.67 ) }
    dend_19 { pt3dadd( 16.9781, -144.75, 19.6794, 0.67 ) }
    dend_19 { pt3dadd( 17.0632, -150.545, 19.6794, 0.67 ) }
    dend_19 { pt3dadd( 17.2283, -156.533, 19.6794, 0.67 ) }
    dend_19 { pt3dadd( 17.5558, -162.056, 19.7332, 0.67 ) }
    dend_19 { pt3dadd( 17.7746, -165.49, 19.7963, 0.67 ) }
    dend_19 { pt3dadd( 17.8481, -166.973, 19.8604, 0.67 ) }
    dend_19 { pt3dadd( 18.3202, -172.717, 20.2419, 0.67 ) }
    dend_19 { pt3dadd( 18.7093, -177.353, 20.7858, 0.67 ) }
    dend_19 { pt3dadd( 19.0149, -180.25, 21.2276, 0.67 ) }
    dend_19 { pt3dadd( 19.4133, -183.302, 21.7538, 0.67 ) }
    dend_19 { pt3dadd( 20.1924, -187.995, 22.6014, 0.67 ) }
    dend_19 { pt3dadd( 21.6186, -195.289, 23.9356, 0.67 ) }
    dend_19 { pt3dadd( 22.6569, -200.42, 24.9382, 0.67 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_19 { pt3dadd( 23.5888, -205.183, 25.8409, 0.67 ) }
    dend_19 { pt3dadd( 24.1487, -208.305, 26.3675, 0.67 ) }
    dend_19 { pt3dadd( 24.7024, -211.025, 26.8035, 0.67 ) }
    dend_19 { pt3dadd( 25.5664, -214.804, 27.3416, 0.67 ) }
    dend_19 { pt3dadd( 26.434, -219.252, 27.935, 0.67 ) }
    dend_19 { pt3dadd( 27.318, -223.988, 28.4694, 0.67 ) }
    dend_19 { pt3dadd( 28.1392, -228.208, 28.9503, 0.67 ) }
    dend_19 { pt3dadd( 29.8145, -237.49, 29.9547, 0.67 ) }
    dend_19 { pt3dadd( 30.475, -241.322, 30.3863, 0.67 ) }
    dend_19 { pt3dadd( 31.0414, -244.975, 30.784, 0.67 ) }
    dend_19 { pt3dadd( 31.2816, -247.039, 31.0749, 0.67 ) }
    dend_19 { pt3dadd( 31.5898, -252.18, 32.0007, 0.67 ) }
    dend_19 { pt3dadd( 31.8013, -255.422, 32.6734, 0.67 ) }
    dend_19 { pt3dadd( 31.8682, -259.285, 33.5948, 0.67 ) }
    dend_19 { pt3dadd( 31.871, -262.74, 34.4682, 0.67 ) }
    dend_19 { pt3dadd( 31.9673, -269.867, 36.3897, 0.67 ) }
    dend_19 { pt3dadd( 31.936, -272.572, 37.1663, 0.67 ) }
    dend_19 { pt3dadd( 31.6654, -277.195, 38.5822, 0.67 ) }
    dend_19 { pt3dadd( 31.518, -281.519, 39.9436, 0.67 ) }
    dend_19 { pt3dadd( 31.4208, -286.606, 41.4449, 0.67 ) }
    // Section: dend_15, id: dend_15, parent: dend_11 (entry count 20/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 68.7359, -28.351, 6.89707, 0.67 ) }
    dend_15 { pt3dadd( 70.1661, -27.298, 5.18711, 0.67 ) }
    dend_15 { pt3dadd( 72.0476, -25.6357, 2.23059, 0.67 ) }
    dend_15 { pt3dadd( 73.5721, -24.2854, -0.287063, 0.67 ) }
    dend_15 { pt3dadd( 74.0315, -23.8971, -1.0292, 0.67 ) }
    dend_15 { pt3dadd( 75.303, -22.9077, -3.01104, 0.67 ) }
    dend_15 { pt3dadd( 76.1725, -22.2311, -4.36634, 0.67 ) }
    dend_15 { pt3dadd( 79.1856, -19.6425, -9.34751, 0.33 ) }
    dend_15 { pt3dadd( 79.5495, -19.3114, -9.92223, 0.67 ) }
    dend_15 { pt3dadd( 80.0079, -18.936, -10.7365, 0.33 ) }
    dend_15 { pt3dadd( 80.3925, -18.6514, -11.5594, 0.67 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 31/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 68.7359, -28.351, 6.89707, 0.67 ) }
    dend_12 { pt3dadd( 70.3031, -28.9263, 8.23886, 0.67 ) }
    dend_12 { pt3dadd( 75.7951, -30.8729, 11.882, 0.67 ) }
    dend_12 { pt3dadd( 77.7781, -31.7243, 13.0293, 0.67 ) }
    dend_12 { pt3dadd( 80.9424, -33.3119, 14.7219, 0.67 ) }
    dend_12 { pt3dadd( 84.4098, -35.3033, 16.3807, 0.67 ) }
    dend_12 { pt3dadd( 87.0382, -36.8912, 17.6377, 0.67 ) }
    dend_12 { pt3dadd( 89.6244, -38.5171, 18.6655, 0.67 ) }
    dend_12 { pt3dadd( 93.0353, -40.9538, 19.6476, 0.67 ) }
    dend_12 { pt3dadd( 94.3291, -42.0437, 20.0268, 0.67 ) }
    dend_12 { pt3dadd( 96.9669, -44.4305, 20.7254, 0.67 ) }
    dend_12 { pt3dadd( 100.297, -47.568, 21.259, 0.67 ) }
    dend_12 { pt3dadd( 101.53, -48.6911, 21.4282, 0.67 ) }
    dend_12 { pt3dadd( 103.278, -50.449, 21.622, 0.67 ) }
    dend_12 { pt3dadd( 104.486, -51.6556, 21.7627, 0.67 ) }
    dend_12 { pt3dadd( 106.626, -53.8423, 22.0643, 0.67 ) }
    dend_12 { pt3dadd( 109.148, -56.6725, 22.4481, 0.33 ) }
    dend_12 { pt3dadd( 111.202, -59.047, 22.7347, 0.33 ) }
    dend_12 { pt3dadd( 114.65, -62.783, 23.4434, 0.33 ) }
    dend_12 { pt3dadd( 118.426, -66.4705, 24.3247, 0.33 ) }
    dend_12 { pt3dadd( 119.95, -67.9792, 24.7381, 0.67 ) }
    dend_12 { pt3dadd( 121.635, -69.7191, 25.2613, 0.33 ) }
    dend_12 { pt3dadd( 123.901, -71.9106, 26.0115, 0.67 ) }
    dend_12 { pt3dadd( 125.962, -73.8597, 26.6191, 0.33 ) }
    dend_12 { pt3dadd( 127.195, -74.9483, 27.0231, 0.33 ) }
    dend_12 { pt3dadd( 128.847, -76.5878, 27.5841, 0.33 ) }
    dend_12 { pt3dadd( 130.471, -78.2428, 28.2405, 0.33 ) }
    dend_12 { pt3dadd( 131.82, -79.6807, 28.8921, 0.33 ) }
    dend_12 { pt3dadd( 133.708, -82.1085, 29.9522, 0.33 ) }
    dend_12 { pt3dadd( 136.339, -85.8963, 31.2996, 0.33 ) }
    dend_12 { pt3dadd( 137.446, -87.6598, 32.0145, 0.67 ) }
    dend_12 { pt3dadd( 138.405, -89.3384, 32.7142, 0.67 ) }
    dend_12 { pt3dadd( 140.343, -93.2185, 34.2303, 0.33 ) }
    dend_12 { pt3dadd( 141.535, -95.891, 35.2886, 0.33 ) }
    dend_12 { pt3dadd( 144.311, -102.52, 37.8047, 0.33 ) }
    dend_12 { pt3dadd( 146.17, -107.098, 39.4756, 0.67 ) }
    dend_12 { pt3dadd( 147.323, -110.167, 40.6277, 0.33 ) }
    dend_12 { pt3dadd( 147.893, -111.902, 41.3641, 0.67 ) }
    dend_12 { pt3dadd( 148.863, -115.397, 42.9888, 0.33 ) }
    dend_12 { pt3dadd( 149.531, -118.018, 44.4748, 0.33 ) }
    dend_12 { pt3dadd( 150.132, -120.568, 46.0756, 0.33 ) }
    dend_12 { pt3dadd( 151.216, -123.993, 47.9228, 0.33 ) }
    dend_12 { pt3dadd( 152.891, -128.119, 50.0452, 0.33 ) }
    dend_12 { pt3dadd( 153.754, -129.942, 50.9386, 0.67 ) }
    dend_12 { pt3dadd( 156.181, -133.954, 52.8362, 0.33 ) }
    dend_12 { pt3dadd( 158.03, -136.805, 54.173, 0.33 ) }
    dend_12 { pt3dadd( 161.026, -141.019, 55.905, 0.33 ) }
    dend_12 { pt3dadd( 162.819, -142.97, 56.6338, 0.33 ) }
    dend_12 { pt3dadd( 164.861, -144.713, 57.0238, 0.33 ) }
    dend_12 { pt3dadd( 168.955, -147.538, 57.5502, 0.67 ) }
    dend_12 { pt3dadd( 174.577, -155.804, 60.0843, 0.67 ) }
    dend_12 { pt3dadd( 180.231, -163.816, 63.2167, 0.67 ) }
    dend_12 { pt3dadd( 186.007, -172.075, 65.3977, 0.67 ) }
    dend_12 { pt3dadd( 193.425, -178.932, 66.9272, 0.67 ) }
    dend_12 { pt3dadd( 201.066, -185.358, 68.9646, 0.67 ) }
    dend_12 { pt3dadd( 208.838, -190.945, 72.3256, 0.67 ) }
    // Section: dend_8, id: dend_8, parent: dend_0 (entry count 87/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -15.1254, 49.0556, -9.49694, 0.67 ) }
    dend_8 { pt3dadd( -15.5087, 51.8282, -11.339, 0.67 ) }
    dend_8 { pt3dadd( -15.8082, 53.9942, -12.7781, 0.67 ) }
    dend_8 { pt3dadd( -16.2033, 56.8522, -14.6768, 0.67 ) }
    dend_8 { pt3dadd( -16.9663, 62.371, -18.3433, 0.67 ) }
    dend_8 { pt3dadd( -17.1754, 63.8832, -19.348, 1.33 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 93/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -15.1254, 49.0556, -9.49694, 0.67 ) }
    dend_1 { pt3dadd( -18.3256, 53.4376, -11.5847, 0.67 ) }
    dend_1 { pt3dadd( -20.0743, 56.1143, -12.8382, 0.67 ) }
    dend_1 { pt3dadd( -21.9308, 59.0361, -14.1456, 0.67 ) }
    dend_1 { pt3dadd( -24.0005, 62.594, -15.6471, 0.67 ) }
    dend_1 { pt3dadd( -24.9031, 64.3376, -16.305, 0.67 ) }
    dend_1 { pt3dadd( -26.8561, 68.448, -17.8475, 0.67 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_1 { pt3dadd( -28.6162, 72.3386, -19.2418, 0.67 ) }
    dend_1 { pt3dadd( -29.4596, 74.2898, -19.8897, 0.67 ) }
    dend_1 { pt3dadd( -31.3746, 79.0578, -21.2409, 0.67 ) }
    dend_1 { pt3dadd( -32.9552, 83.1829, -22.368, 0.67 ) }
    dend_1 { pt3dadd( -34.647, 87.4268, -23.605, 0.67 ) }
    dend_1 { pt3dadd( -35.8333, 90.3591, -24.4435, 0.67 ) }
    dend_1 { pt3dadd( -37.3793, 93.9203, -25.5396, 0.67 ) }
    dend_1 { pt3dadd( -39.092, 97.5477, -26.6318, 0.67 ) }
    dend_1 { pt3dadd( -43.5515, 105.639, -28.9822, 0.67 ) }
    dend_1 { pt3dadd( -46.5781, 110.58, -30.3079, 0.67 ) }
    dend_1 { pt3dadd( -48.4389, 113.392, -31.031, 0.67 ) }
    dend_1 { pt3dadd( -49.8733, 115.339, -31.5756, 0.67 ) }
    dend_1 { pt3dadd( -54.6065, 121.006, -32.9621, 0.67 ) }
    dend_1 { pt3dadd( -57.482, 124.072, -33.3929, 0.67 ) }
    dend_1 { pt3dadd( -61.3363, 128.005, -33.2565, 0.67 ) }
    dend_1 { pt3dadd( -63.7107, 130.267, -33.0613, 0.67 ) }
    dend_1 { pt3dadd( -66.6588, 132.994, -32.8615, 0.67 ) }
    dend_1 { pt3dadd( -71.2269, 137.276, -32.6025, 0.67 ) }
    dend_1 { pt3dadd( -74.6619, 140.713, -32.4361, 0.67 ) }
    dend_1 { pt3dadd( -77.0769, 143.264, -32.3468, 0.67 ) }
    dend_1 { pt3dadd( -82.3451, 148.719, -32.2616, 0.67 ) }
    dend_1 { pt3dadd( -86.0775, 152.79, -32.2709, 0.67 ) }
    dend_1 { pt3dadd( -88.8761, 156.041, -32.2146, 0.67 ) }
    dend_1 { pt3dadd( -91.7019, 159.318, -32.3183, 0.67 ) }
    dend_1 { pt3dadd( -93.1559, 161.11, -32.3576, 0.67 ) }
    dend_1 { pt3dadd( -94.2733, 162.54, -32.2366, 0.67 ) }
    dend_1 { pt3dadd( -95.6806, 164.568, -31.8373, 0.67 ) }
    dend_1 { pt3dadd( -99.5695, 170.038, -30.7147, 0.67 ) }
    dend_1 { pt3dadd( -104.112, 176.477, -29.4353, 0.67 ) }
    dend_1 { pt3dadd( -106.339, 179.649, -28.8386, 0.67 ) }
    dend_1 { pt3dadd( -108.759, 183.052, -28.2568, 0.33 ) }
    dend_1 { pt3dadd( -110.549, 185.518, -27.9113, 0.33 ) }
    dend_1 { pt3dadd( -113.023, 188.713, -27.6114, 0.67 ) }
    dend_1 { pt3dadd( -114.572, 190.636, -27.4671, 0.67 ) }
    dend_1 { pt3dadd( -119.131, 195.921, -26.6902, 0.67 ) }
    dend_1 { pt3dadd( -121.147, 198.222, -26.1811, 0.67 ) }
    dend_1 { pt3dadd( -123.045, 200.477, -25.5712, 0.33 ) }
    dend_1 { pt3dadd( -124.012, 201.583, -25.1663, 0.33 ) }
    dend_1 { pt3dadd( -127.207, 205.645, -23.2364, 0.33 ) }
    dend_1 { pt3dadd( -128.572, 207.43, -22.1673, 0.33 ) }
    dend_1 { pt3dadd( -130.575, 210.307, -20.2114, 0.33 ) }
    dend_1 { pt3dadd( -131.331, 211.58, -19.353, 0.33 ) }
    dend_1 { pt3dadd( -133.277, 214.895, -17.1071, 0.33 ) }
    dend_1 { pt3dadd( -136.154, 219.859, -13.7307, 0.33 ) }
    dend_1 { pt3dadd( -137.673, 222.54, -12.0358, 0.33 ) }
    dend_1 { pt3dadd( -138.786, 224.363, -10.898, 0.33 ) }
    dend_1 { pt3dadd( -139.91, 225.963, -9.97866, 0.67 ) }
    dend_1 { pt3dadd( -141.61, 228.293, -8.68385, 0.33 ) }
    dend_1 { pt3dadd( -143.434, 230.46, -7.61525, 0.67 ) }
    dend_1 { pt3dadd( -145.029, 232.206, -6.86588, 0.33 ) }
    dend_1 { pt3dadd( -147.18, 234.659, -5.8085, 0.33 ) }
    dend_1 { pt3dadd( -148.717, 236.6, -4.79566, 0.67 ) }
    dend_1 { pt3dadd( -150.526, 239.169, -3.36528, 0.33 ) }
    dend_1 { pt3dadd( -152.839, 242.686, -1.38088, 0.33 ) }
    dend_1 { pt3dadd( -155.439, 246.523, 0.794428, 0.33 ) }
    dend_1 { pt3dadd( -157.256, 249.022, 2.38911, 0.67 ) }
    dend_1 { pt3dadd( -159.899, 252.545, 4.75619, 0.33 ) }
    dend_1 { pt3dadd( -160.443, 253.192, 5.22453, 0.67 ) }
    dend_1 { pt3dadd( -162.054, 254.941, 6.59249, 0.67 ) }
    dend_1 { pt3dadd( -164.387, 257.254, 8.4656, 0.67 ) }
    dend_1 { pt3dadd( -166.095, 258.377, 9.31849, 0.33 ) }
    dend_1 { pt3dadd( -168.364, 259.48, 10.0275, 0.33 ) }
    dend_1 { pt3dadd( -168.998, 259.683, 10.127, 0.67 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 63/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 5.59762, -40.7482, -1.04703, 0.33 ) }
    axon_1 { pt3dadd( 7.58346, -55.6162, -1.04703, 0.33 ) }
    axon_1 { pt3dadd( 9.5693, -70.4842, -1.04703, 0.33 ) }
    // Section: dend_26, id: dend_26, parent: dend_22 (entry count 66/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 2.21638, -56.1405, -17.5741, 0.67 ) }
    dend_26 { pt3dadd( 1.711, -56.8741, -20.0347, 0.67 ) }
    dend_26 { pt3dadd( 1.46696, -56.8355, -21.2303, 0.67 ) }
    dend_26 { pt3dadd( 0.785914, -56.9947, -24.1035, 0.67 ) }
    dend_26 { pt3dadd( 0.313788, -57.3891, -26.3809, 0.67 ) }
    dend_26 { pt3dadd( -0.797196, -58.4876, -30.7214, 0.67 ) }
    dend_26 { pt3dadd( -1.56163, -59.3285, -33.4687, 0.67 ) }
    dend_26 { pt3dadd( -2.90965, -60.9158, -38.3351, 0.67 ) }
    dend_26 { pt3dadd( -3.88874, -62.036, -41.421, 0.67 ) }
    dend_26 { pt3dadd( -5.86588, -64.22, -46.9744, 0.67 ) }
    dend_26 { pt3dadd( -6.7125, -65.2669, -49.5234, 0.67 ) }
    dend_26 { pt3dadd( -7.85464, -66.8037, -52.9489, 0.67 ) }
    dend_26 { pt3dadd( -9.69578, -69.2522, -57.7301, 0.67 ) }
    dend_26 { pt3dadd( -10.5198, -70.4042, -59.8827, 0.33 ) }
    dend_26 { pt3dadd( -10.8218, -70.8014, -60.7139, 0.67 ) }
    dend_26 { pt3dadd( -11.5352, -71.6609, -62.5136, 0.67 ) }
    dend_26 { pt3dadd( -13.3532, -73.7746, -66.8104, 0.67 ) }
    dend_26 { pt3dadd( -14.3977, -74.9082, -68.8478, 0.33 ) }
    dend_26 { pt3dadd( -16.4868, -77.3379, -72.3525, 0.67 ) }
    dend_26 { pt3dadd( -17.6794, -78.7196, -74.4687, 0.33 ) }
    dend_26 { pt3dadd( -19.2314, -80.652, -77.2195, 0.67 ) }
    dend_26 { pt3dadd( -20.5356, -82.0633, -79.1356, 0.33 ) }
    dend_26 { pt3dadd( -21.7433, -83.4482, -80.8192, 0.67 ) }
    dend_26 { pt3dadd( -23.4092, -85.3803, -83.0894, 0.67 ) }
    dend_26 { pt3dadd( -27.6076, -90.3401, -88.3293, 0.67 ) }
    dend_26 { pt3dadd( -29.0847, -92.2235, -90.2462, 0.67 ) }
    dend_26 { pt3dadd( -32.2989, -96.6617, -94.6152, 0.67 ) }
    dend_26 { pt3dadd( -33.4507, -98.2914, -96.2742, 0.67 ) }
    dend_26 { pt3dadd( -35.2413, -100.945, -98.9051, 0.67 ) }
    dend_26 { pt3dadd( -36.3936, -102.691, -100.68, 0.67 ) }
    dend_26 { pt3dadd( -37.6478, -104.759, -102.57, 0.67 ) }
    dend_26 { pt3dadd( -38.0762, -105.475, -103.25, 1.33 ) }
    dend_26 { pt3dadd( -39.3551, -108.197, -105.853, 0.33 ) }
    dend_26 { pt3dadd( -40.1134, -109.656, -107.3, 0.33 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_26 { pt3dadd( -41.4936, -112.136, -109.653, 0.33 ) }
    dend_26 { pt3dadd( -42.1485, -113.001, -110.467, 0.33 ) }
    dend_26 { pt3dadd( -44.5554, -115.642, -112.579, 0.33 ) }
    dend_26 { pt3dadd( -47.0581, -117.878, -114.313, 0.33 ) }
    dend_26 { pt3dadd( -48.3075, -118.863, -114.985, 0.33 ) }
    dend_26 { pt3dadd( -50.1635, -120.124, -115.935, 0.33 ) }
    dend_26 { pt3dadd( -54.7601, -122.751, -118.175, 0.33 ) }
    dend_26 { pt3dadd( -57.2318, -124.041, -119.438, 0.33 ) }
    dend_26 { pt3dadd( -60.4513, -125.594, -121.202, 0.33 ) }
    dend_26 { pt3dadd( -61.7837, -126.189, -122.016, 0.33 ) }
    dend_26 { pt3dadd( -64.8346, -127.689, -124.154, 0.33 ) }
    dend_26 { pt3dadd( -67.242, -129.101, -126.11, 0.33 ) }
    dend_26 { pt3dadd( -68.1163, -129.773, -126.966, 0.33 ) }
    dend_26 { pt3dadd( -69.6908, -131.061, -128.672, 0.33 ) }
    dend_26 { pt3dadd( -72.3846, -133.241, -131.507, 0.33 ) }
    dend_26 { pt3dadd( -75.3954, -135.878, -134.902, 0.33 ) }
    dend_26 { pt3dadd( -75.7483, -136.258, -135.327, 0.33 ) }
    dend_26 { pt3dadd( -76.7225, -137.373, -136.648, 0.33 ) }
    dend_26 { pt3dadd( -78.4346, -138.973, -138.931, 0.33 ) }
    dend_26 { pt3dadd( -80.5983, -140.674, -141.91, 0.33 ) }
    dend_26 { pt3dadd( -82.1155, -141.74, -144.131, 0.33 ) }
    dend_26 { pt3dadd( -82.7081, -141.937, -144.97, 0.33 ) }
    dend_26 { pt3dadd( -85.3049, -142.364, -147.944, 0.33 ) }
    dend_26 { pt3dadd( -86.595, -142.386, -149.482, 0.33 ) }
    dend_26 { pt3dadd( -87.4469, -142.316, -150.639, 0.67 ) }
    dend_26 { pt3dadd( -88.001, -142.276, -151.472, 0.67 ) }
    dend_26 { pt3dadd( -90.0865, -142.138, -154.56, 0.67 ) }
    dend_26 { pt3dadd( -90.9044, -142.061, -155.805, 0.67 ) }
    dend_26 { pt3dadd( -95.9444, -141.804, -163.548, 0.67 ) }
    dend_26 { pt3dadd( -99.7386, -141.806, -169.28, 0.67 ) }
    dend_26 { pt3dadd( -101.774, -141.85, -172.418, 0.67 ) }
    dend_26 { pt3dadd( -103.017, -141.908, -174.44, 0.67 ) }
    dend_26 { pt3dadd( -104.937, -142.091, -177.777, 0.67 ) }
    dend_26 { pt3dadd( -106.95, -142.242, -181.17, 0.67 ) }
    dend_26 { pt3dadd( -108.404, -142.399, -183.029, 0.67 ) }
    // Section: dend_23, id: dend_23, parent: dend_22 (entry count 35/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( 2.21638, -56.1405, -17.5741, 0.67 ) }
    dend_23 { pt3dadd( 2.66327, -63.9203, -16.2923, 0.67 ) }
    dend_23 { pt3dadd( 2.77959, -65.366, -16.146, 0.67 ) }
    dend_23 { pt3dadd( 3.02477, -68.3164, -15.913, 0.67 ) }
    dend_23 { pt3dadd( 3.10565, -70.058, -15.7273, 0.67 ) }
    dend_23 { pt3dadd( 3.26866, -75.265, -15.1178, 0.67 ) }
    dend_23 { pt3dadd( 3.47306, -83.0974, -14.194, 0.67 ) }
    dend_23 { pt3dadd( 3.47898, -89.8315, -13.6206, 0.67 ) }
    dend_23 { pt3dadd( 3.52346, -91.9185, -13.3915, 0.67 ) }
    dend_23 { pt3dadd( 3.69061, -97.1766, -12.7132, 0.67 ) }
    dend_23 { pt3dadd( 3.82543, -100.698, -12.2049, 0.67 ) }
    dend_23 { pt3dadd( 4.02985, -105.253, -11.5545, 0.67 ) }
    dend_23 { pt3dadd( 4.28879, -109.765, -11.0203, 0.67 ) }
    dend_23 { pt3dadd( 4.67973, -116.215, -10.4639, 0.67 ) }
    dend_23 { pt3dadd( 4.97389, -119.43, -10.3746, 0.67 ) }
    dend_23 { pt3dadd( 5.37306, -122.371, -10.4481, 0.67 ) }
    dend_23 { pt3dadd( 6.42416, -129.423, -10.7939, 0.67 ) }
    dend_23 { pt3dadd( 7.09718, -134.605, -11.2534, 0.67 ) }
    dend_23 { pt3dadd( 7.4146, -137.575, -11.6299, 0.67 ) }
    dend_23 { pt3dadd( 7.8843, -145.916, -13.196, 0.67 ) }
    dend_23 { pt3dadd( 7.97424, -150.091, -14.0314, 0.67 ) }
    dend_23 { pt3dadd( 7.88987, -151.793, -14.3806, 0.67 ) }
    dend_23 { pt3dadd( 7.34795, -156.644, -15.343, 0.67 ) }
    dend_23 { pt3dadd( 6.913, -160.348, -16.2239, 0.67 ) }
    dend_23 { pt3dadd( 6.02176, -165.415, -17.6709, 0.67 ) }
    dend_23 { pt3dadd( 5.21202, -169.049, -18.8276, 0.67 ) }
    dend_23 { pt3dadd( 4.60374, -172.449, -20.1255, 0.67 ) }
    dend_23 { pt3dadd( 4.26076, -176.254, -21.8038, 0.67 ) }
    dend_23 { pt3dadd( 4.16826, -183.558, -25.2184, 0.33 ) }
    dend_23 { pt3dadd( 4.34583, -188.261, -27.5014, 0.33 ) }
    dend_23 { pt3dadd( 4.43553, -190.187, -28.3645, 0.33 ) }
    dend_23 { pt3dadd( 4.82001, -197.106, -31.33, 0.33 ) }
    dend_23 { pt3dadd( 5.44233, -205.936, -34.8977, 0.33 ) }
    dend_23 { pt3dadd( 5.54273, -208.251, -35.7148, 0.33 ) }
    dend_23 { pt3dadd( 5.58598, -211.853, -36.7718, 0.33 ) }
    dend_23 { pt3dadd( 5.79043, -220.314, -39.0457, 0.33 ) }
    dend_23 { pt3dadd( 5.77719, -222.296, -39.5029, 0.33 ) }
    dend_23 { pt3dadd( 5.6995, -223.168, -39.6148, 0.67 ) }
    dend_23 { pt3dadd( 4.97611, -228.313, -39.8718, 0.33 ) }
    dend_23 { pt3dadd( 4.52621, -230.873, -40.0411, 0.33 ) }
    // Section: dend_21, id: dend_21, parent: dend_19 (entry count 75/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 31.4208, -286.606, 41.4449, 0.67 ) }
    dend_21 { pt3dadd( 32.6115, -291.436, 43.4172, 0.67 ) }
    dend_21 { pt3dadd( 33.5803, -294.312, 45.0529, 0.67 ) }
    dend_21 { pt3dadd( 35.4802, -299.016, 48.0544, 0.67 ) }
    dend_21 { pt3dadd( 36.3302, -301.007, 49.3193, 0.67 ) }
    dend_21 { pt3dadd( 37.5155, -303.45, 50.8209, 0.67 ) }
    dend_21 { pt3dadd( 40.4492, -309.243, 54.2144, 0.67 ) }
    dend_21 { pt3dadd( 42.2989, -312.44, 56.2132, 0.67 ) }
    dend_21 { pt3dadd( 43.2134, -313.914, 57.0862, 0.67 ) }
    dend_21 { pt3dadd( 45.0751, -316.546, 58.4432, 0.67 ) }
    dend_21 { pt3dadd( 47.9175, -320.549, 60.2648, 0.67 ) }
    dend_21 { pt3dadd( 48.9471, -322.287, 60.8284, 0.67 ) }
    dend_21 { pt3dadd( 50.2527, -324.824, 61.3262, 0.33 ) }
    dend_21 { pt3dadd( 51.3015, -327.105, 61.645, 0.33 ) }
    dend_21 { pt3dadd( 52.361, -329.563, 62.0009, 0.33 ) }
    dend_21 { pt3dadd( 53.3763, -332.12, 62.3747, 0.33 ) }
    dend_21 { pt3dadd( 55.0619, -338.366, 63.1179, 0.33 ) }
    dend_21 { pt3dadd( 61.1071, -346.118, 66.1116, 0.33 ) }
    // Section: dend_20, id: dend_20, parent: dend_19 (entry count 93/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 31.4208, -286.606, 41.4449, 0.67 ) }
    dend_20 { pt3dadd( 30.4304, -289.44, 41.4099, 0.67 ) }
    dend_20 { pt3dadd( 28.7066, -294.011, 41.3829, 0.67 ) }
    dend_20 { pt3dadd( 27.6687, -297.123, 41.38, 0.67 ) }
    dend_20 { pt3dadd( 26.3519, -301.682, 41.3847, 0.67 ) }
    dend_20 { pt3dadd( 25.1148, -305.808, 41.4953, 0.67 ) }
    dend_20 { pt3dadd( 24.2528, -308.91, 41.547, 0.67 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_20 { pt3dadd( 23.6729, -311.183, 41.5621, 0.67 ) }
    dend_20 { pt3dadd( 21.5656, -318.921, 41.5134, 0.67 ) }
    dend_20 { pt3dadd( 20.9434, -321.509, 41.4683, 0.67 ) }
    dend_20 { pt3dadd( 19.7956, -326.268, 41.3412, 0.67 ) }
    dend_20 { pt3dadd( 18.2812, -332.159, 41.1409, 0.67 ) }
    dend_20 { pt3dadd( 17.8744, -333.79, 41.0757, 0.67 ) }
    dend_20 { pt3dadd( 16.4809, -338.83, 40.9978, 0.67 ) }
    dend_20 { pt3dadd( 15.2512, -342.524, 41.0373, 0.67 ) }
    dend_20 { pt3dadd( 12.8093, -349.579, 41.2988, 0.67 ) }
    dend_20 { pt3dadd( 11.8076, -352.52, 41.4827, 0.67 ) }
    dend_20 { pt3dadd( 11.269, -354.158, 41.6682, 0.67 ) }
    dend_20 { pt3dadd( 9.85542, -359.106, 42.196, 0.67 ) }
    dend_20 { pt3dadd( 9.46106, -360.825, 42.3933, 0.67 ) }
    dend_20 { pt3dadd( 8.54201, -364.544, 42.827, 0.67 ) }
    dend_20 { pt3dadd( 7.51904, -368.933, 43.3212, 0.67 ) }
    dend_20 { pt3dadd( 6.39956, -374.307, 43.8506, 0.67 ) }
    dend_20 { pt3dadd( 4.41298, -385.799, 44.9728, 0.67 ) }
    dend_20 { pt3dadd( 3.82816, -389.55, 45.3015, 0.67 ) }
    dend_20 { pt3dadd( 3.2481, -393.076, 45.7259, 0.67 ) }
    dend_20 { pt3dadd( 3.00545, -394.433, 45.9316, 0.67 ) }
    dend_20 { pt3dadd( 2.26712, -398.501, 46.6761, 0.67 ) }
    dend_20 { pt3dadd( 0.929756, -404.378, 47.9294, 0.67 ) }
    dend_20 { pt3dadd( 0.264362, -407.202, 48.5925, 0.67 ) }
    dend_20 { pt3dadd( -0.710305, -410.363, 49.4361, 0.67 ) }
    dend_20 { pt3dadd( -1.66124, -412.95, 50.2094, 0.67 ) }
    dend_20 { pt3dadd( -2.54321, -414.735, 50.791, 0.67 ) }
    dend_20 { pt3dadd( -4.86933, -418.377, 52.0021, 0.67 ) }
    dend_20 { pt3dadd( -6.9947, -421.043, 52.8832, 0.67 ) }
    dend_20 { pt3dadd( -10.4573, -424.714, 54.2054, 0.33 ) }
    dend_20 { pt3dadd( -12.8543, -426.648, 54.7503, 0.33 ) }
    dend_20 { pt3dadd( -14.8047, -428.005, 55.0241, 0.33 ) }
    dend_20 { pt3dadd( -16.102, -428.816, 55.3068, 0.67 ) }
    dend_20 { pt3dadd( -19.0422, -430.371, 55.8706, 0.33 ) }
    dend_20 { pt3dadd( -20.768, -431.198, 56.0904, 0.33 ) }
    dend_20 { pt3dadd( -25.3136, -433.935, 56.088, 0.33 ) }
    dend_20 { pt3dadd( -28.3294, -436.213, 56.3532, 0.33 ) }
    dend_20 { pt3dadd( -33.4602, -441.523, 57.458, 0.67 ) }
    dend_20 { pt3dadd( -38.3149, -450.628, 58.5736, 0.67 ) }
    // Section: dend_17, id: dend_17, parent: dend_15 (entry count 38/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 80.3925, -18.6514, -11.5594, 0.33 ) }
    dend_17 { pt3dadd( 83.3438, -16.0257, -11.9004, 0.33 ) }
    dend_17 { pt3dadd( 84.8647, -14.6726, -12.0761, 0.33 ) }
    dend_17 { pt3dadd( 86.7283, -13.0146, -12.2915, 0.67 ) }
    dend_17 { pt3dadd( 88.351, -11.571, -12.479, 0.67 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 43/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 80.3925, -18.6514, -11.5594, 0.33 ) }
    dend_16 { pt3dadd( 81.7816, -18.5799, -13.0244, 0.33 ) }
    dend_16 { pt3dadd( 83.2589, -18.464, -14.4075, 0.67 ) }
    dend_16 { pt3dadd( 88.3825, -17.9535, -19.2404, 0.33 ) }
    dend_16 { pt3dadd( 89.4023, -17.8423, -20.2054, 0.67 ) }
    dend_16 { pt3dadd( 90.3951, -17.7242, -21.1555, 0.67 ) }
    dend_16 { pt3dadd( 93.6975, -17.2972, -24.3033, 0.33 ) }
    dend_16 { pt3dadd( 94.2531, -17.204, -24.8343, 0.67 ) }
    dend_16 { pt3dadd( 96.9364, -16.7019, -27.3435, 0.33 ) }
    dend_16 { pt3dadd( 96.9364, -16.7019, -27.3435, 0.67 ) }
    dend_16 { pt3dadd( 98.4209, -16.2646, -28.7778, 0.33 ) }
    dend_16 { pt3dadd( 99.2052, -16.0221, -29.6094, 0.67 ) }
    dend_16 { pt3dadd( 100.371, -15.6319, -30.9847, 0.33 ) }
    dend_16 { pt3dadd( 101.706, -15.1715, -32.5581, 0.67 ) }
    dend_16 { pt3dadd( 103.777, -14.3913, -34.8637, 0.33 ) }
    dend_16 { pt3dadd( 104.926, -13.9428, -36.182, 0.67 ) }
    // Section: dend_14, id: dend_14, parent: dend_12 (entry count 59/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 208.838, -190.945, 72.3256, 0.33 ) }
    dend_14 { pt3dadd( 215.217, -198.501, 75.0673, 0.33 ) }
    // Section: dend_13, id: dend_13, parent: dend_12 (entry count 61/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 208.838, -190.945, 72.3256, 0.67 ) }
    dend_13 { pt3dadd( 215.27, -198.121, 75.7772, 0.33 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 63/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -17.1754, 63.8832, -19.348, 0.67 ) }
    dend_10 { pt3dadd( -14.033, 67.7236, -23.6149, 0.67 ) }
    dend_10 { pt3dadd( -12.3204, 69.8123, -25.9862, 0.67 ) }
    dend_10 { pt3dadd( -7.76191, 75.5965, -33.5562, 0.67 ) }
    dend_10 { pt3dadd( -6.00406, 77.7526, -36.592, 0.67 ) }
    dend_10 { pt3dadd( -4.67578, 79.5108, -39.15, 0.67 ) }
    dend_10 { pt3dadd( -2.10998, 82.9654, -44.2574, 0.67 ) }
    dend_10 { pt3dadd( -0.240193, 85.4736, -48.1107, 0.67 ) }
    dend_10 { pt3dadd( 2.47152, 89.3184, -54.0716, 0.67 ) }
    dend_10 { pt3dadd( 3.63241, 90.896, -56.6904, 0.67 ) }
    dend_10 { pt3dadd( 5.3855, 93.3202, -60.9775, 0.67 ) }
    dend_10 { pt3dadd( 5.90085, 93.947, -62.1682, 0.33 ) }
    dend_10 { pt3dadd( 6.63189, 94.8912, -63.8309, 0.67 ) }
    dend_10 { pt3dadd( 8.0382, 96.2585, -66.1295, 0.33 ) }
    dend_10 { pt3dadd( 8.82998, 96.9574, -67.0948, 0.33 ) }
    dend_10 { pt3dadd( 10.0275, 98.1322, -68.4347, 0.33 ) }
    dend_10 { pt3dadd( 13.1259, 101.203, -71.4219, 0.67 ) }
    dend_10 { pt3dadd( 14.8074, 102.905, -73.0196, 0.33 ) }
    dend_10 { pt3dadd( 17.3787, 105.476, -75.3122, 0.33 ) }
    dend_10 { pt3dadd( 19.4604, 107.695, -77.0286, 0.33 ) }
    dend_10 { pt3dadd( 21.5129, 109.877, -78.6629, 0.33 ) }
    dend_10 { pt3dadd( 22.2479, 110.692, -79.2178, 0.67 ) }
    dend_10 { pt3dadd( 25.2678, 114.208, -81.1681, 0.33 ) }
    dend_10 { pt3dadd( 26.2249, 115.226, -81.7603, 0.33 ) }
    dend_10 { pt3dadd( 28.5043, 117.381, -83.3058, 0.33 ) }
    dend_10 { pt3dadd( 30.8317, 119.315, -85.0926, 0.67 ) }
    dend_10 { pt3dadd( 31.9776, 120.291, -86.1184, 0.33 ) }
    dend_10 { pt3dadd( 32.5756, 121.065, -87.0509, 0.33 ) }
    dend_10 { pt3dadd( 33.6619, 123.457, -90.1749, 0.67 ) }
    dend_10 { pt3dadd( 34.5678, 126.571, -94.3155, 0.33 ) }
    dend_10 { pt3dadd( 34.9471, 128.308, -96.6015, 0.33 ) }
    dend_10 { pt3dadd( 35.0792, 129.499, -98.0975, 0.67 ) }
    dend_10 { pt3dadd( 35.4907, 133.955, -104.112, 0.33 ) }
    dend_10 { pt3dadd( 36.0022, 137.315, -108.981, 0.33 ) }
    dend_10 { pt3dadd( 36.2371, 138.716, -110.97, 0.33 ) }
    dend_10 { pt3dadd( 36.8047, 140.549, -113.56, 0.33 ) }
    dend_10 { pt3dadd( 36.8382, 140.606, -113.657, 0.67 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_10 { pt3dadd( 38.4992, 142.335, -117.268, 0.33 ) }
    dend_10 { pt3dadd( 40.5466, 143.453, -120.494, 0.67 ) }
    dend_10 { pt3dadd( 41.6356, 143.673, -122.191, 0.33 ) }
    dend_10 { pt3dadd( 42.3067, 143.749, -123.208, 0.67 ) }
    dend_10 { pt3dadd( 44.5839, 143.925, -126.708, 0.33 ) }
    dend_10 { pt3dadd( 45.1651, 143.944, -127.584, 0.33 ) }
    dend_10 { pt3dadd( 46.703, 143.944, -129.784, 0.67 ) }
    dend_10 { pt3dadd( 48.7597, 143.889, -132.912, 0.33 ) }
    dend_10 { pt3dadd( 49.8963, 143.901, -134.679, 0.33 ) }
    dend_10 { pt3dadd( 50.0771, 143.917, -134.954, 0.67 ) }
    dend_10 { pt3dadd( 53.3262, 144.621, -139.531, 0.33 ) }
    dend_10 { pt3dadd( 54.162, 144.834, -140.623, 0.67 ) }
    dend_10 { pt3dadd( 56.3899, 145.62, -143.126, 0.33 ) }
    dend_10 { pt3dadd( 57.4188, 146.158, -144.451, 0.67 ) }
    dend_10 { pt3dadd( 59.3764, 147.256, -147.203, 0.33 ) }
    dend_10 { pt3dadd( 60.9476, 148.282, -149.514, 0.67 ) }
    dend_10 { pt3dadd( 62.0268, 148.984, -151.118, 0.67 ) }
    dend_10 { pt3dadd( 63.7358, 149.872, -153.812, 0.67 ) }
    dend_10 { pt3dadd( 68.6553, 151.493, -162.598, 0.33 ) }
    dend_10 { pt3dadd( 69.1889, 151.613, -163.82, 0.33 ) }
    dend_10 { pt3dadd( 69.4602, 151.645, -164.518, 0.67 ) }
    dend_10 { pt3dadd( 71.3644, 151.734, -169.416, 0.33 ) }
    dend_10 { pt3dadd( 72.7644, 151.746, -172.879, 0.33 ) }
    dend_10 { pt3dadd( 75.2963, 151.57, -179.408, 0.67 ) }
    dend_10 { pt3dadd( 79.0176, 151.137, -188.305, 0.33 ) }
    dend_10 { pt3dadd( 80.8539, 150.967, -192.807, 0.33 ) }
    dend_10 { pt3dadd( 82.3215, 150.872, -196.464, 0.33 ) }
    dend_10 { pt3dadd( 83.1731, 150.9, -198.638, 0.67 ) }
    dend_10 { pt3dadd( 87.1459, 151.173, -207.823, 0.33 ) }
    dend_10 { pt3dadd( 89.4177, 151.296, -212.416, 0.33 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 30/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -17.1754, 63.8832, -19.348, 0.67 ) }
    dend_9 { pt3dadd( -17.6901, 71.0182, -17.0461, 0.67 ) }
    dend_9 { pt3dadd( -17.8025, 76.3026, -15.495, 0.67 ) }
    dend_9 { pt3dadd( -17.8955, 81.7255, -14.1329, 0.67 ) }
    dend_9 { pt3dadd( -17.9882, 87.3139, -12.92, 0.67 ) }
    dend_9 { pt3dadd( -18.1623, 92.3766, -11.7699, 0.67 ) }
    dend_9 { pt3dadd( -18.1835, 96.2982, -11.1104, 0.67 ) }
    dend_9 { pt3dadd( -18.1317, 100.493, -10.7601, 0.67 ) }
    dend_9 { pt3dadd( -17.8134, 106.791, -10.4476, 0.67 ) }
    dend_9 { pt3dadd( -17.6579, 111.001, -10.2915, 0.67 ) }
    dend_9 { pt3dadd( -17.5054, 118.035, -10.182, 0.67 ) }
    dend_9 { pt3dadd( -17.3331, 128.662, -9.96766, 0.67 ) }
    dend_9 { pt3dadd( -17.1862, 133.756, -9.85934, 0.67 ) }
    dend_9 { pt3dadd( -17.1451, 136.757, -9.72019, 0.67 ) }
    dend_9 { pt3dadd( -16.9292, 142.025, -9.34507, 0.67 ) }
    dend_9 { pt3dadd( -16.5953, 145.829, -8.9291, 0.67 ) }
    dend_9 { pt3dadd( -16.1768, 149.068, -8.46017, 0.67 ) }
    dend_9 { pt3dadd( -15.7413, 151.747, -7.74639, 0.67 ) }
    dend_9 { pt3dadd( -14.8467, 155.457, -6.55914, 0.67 ) }
    dend_9 { pt3dadd( -13.5987, 160.006, -5.02267, 0.67 ) }
    dend_9 { pt3dadd( -12.014, 164.398, -3.31613, 0.67 ) }
    dend_9 { pt3dadd( -10.8282, 167.726, -1.8554, 0.67 ) }
    dend_9 { pt3dadd( -9.75127, 170.736, -0.416831, 0.67 ) }
    dend_9 { pt3dadd( -8.61094, 174.004, 1.04447, 0.67 ) }
    dend_9 { pt3dadd( -7.82001, 176.184, 2.02802, 0.67 ) }
    dend_9 { pt3dadd( -5.64137, 182.546, 4.96629, 0.67 ) }
    dend_9 { pt3dadd( -4.24862, 186.679, 6.73879, 0.67 ) }
    dend_9 { pt3dadd( -3.232, 189.905, 8.09824, 0.67 ) }
    dend_9 { pt3dadd( -2.03262, 194.079, 9.79036, 0.67 ) }
    dend_9 { pt3dadd( -0.621003, 198.53, 11.8098, 0.67 ) }
    dend_9 { pt3dadd( 0.0132463, 200.403, 12.7493, 0.67 ) }
    dend_9 { pt3dadd( 1.17052, 203.741, 14.473, 0.67 ) }
    dend_9 { pt3dadd( 3.38078, 210.004, 17.8942, 0.67 ) }
    dend_9 { pt3dadd( 4.42237, 213.035, 19.5087, 0.67 ) }
    dend_9 { pt3dadd( 5.77288, 217.474, 21.8011, 0.67 ) }
    dend_9 { pt3dadd( 6.72132, 220.929, 23.269, 0.33 ) }
    dend_9 { pt3dadd( 7.41395, 223.444, 24.2687, 0.33 ) }
    dend_9 { pt3dadd( 8.40745, 226.532, 25.3533, 0.33 ) }
    dend_9 { pt3dadd( 9.49513, 229.667, 26.2339, 0.33 ) }
    dend_9 { pt3dadd( 11.4479, 236.061, 27.8448, 0.33 ) }
    dend_9 { pt3dadd( 12.7814, 241.016, 28.9897, 0.33 ) }
    dend_9 { pt3dadd( 13.9689, 245.684, 30.2152, 0.33 ) }
    dend_9 { pt3dadd( 15.1747, 250.723, 31.385, 0.33 ) }
    dend_9 { pt3dadd( 16.1032, 254.741, 32.1562, 0.33 ) }
    dend_9 { pt3dadd( 16.8345, 258.364, 32.7977, 0.33 ) }
    dend_9 { pt3dadd( 17.0484, 259.438, 32.93, 0.67 ) }
    dend_9 { pt3dadd( 17.3195, 262.872, 33.1681, 0.33 ) }
    dend_9 { pt3dadd( 17.0939, 269.095, 32.869, 0.67 ) }
    dend_9 { pt3dadd( 16.6154, 271.826, 32.5082, 0.33 ) }
    dend_9 { pt3dadd( 19.8528, 281.664, 33.8192, 0.33 ) }
    // Section: dend_5, id: dend_5, parent: dend_1 (entry count 80/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -168.998, 259.683, 10.127, 0.33 ) }
    dend_5 { pt3dadd( -167.528, 263.44, 11.5607, 0.33 ) }
    dend_5 { pt3dadd( -166.689, 265.585, 12.3796, 0.33 ) }
    dend_5 { pt3dadd( -166.094, 267.107, 12.9605, 0.33 ) }
    dend_5 { pt3dadd( -165.343, 269.026, 13.6929, 0.33 ) }
    dend_5 { pt3dadd( -164.21, 271.923, 14.7987, 0.67 ) }
    dend_5 { pt3dadd( -159.614, 280.898, 17.2112, 0.67 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 87/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -168.998, 259.683, 10.127, 0.67 ) }
    dend_2 { pt3dadd( -170.791, 260.286, 10.0262, 0.67 ) }
    dend_2 { pt3dadd( -173.797, 261.297, 9.85712, 0.67 ) }
    // Section: dend_28, id: dend_28, parent: dend_26 (entry count 90/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( -108.404, -142.399, -183.029, 0.33 ) }
    dend_28 { pt3dadd( -109.76, -146.701, -180.275, 0.33 ) }
    dend_28 { pt3dadd( -110.464, -148.729, -179.124, 0.33 ) }
    dend_28 { pt3dadd( -112.531, -153.371, -176.779, 0.33 ) }
    dend_28 { pt3dadd( -113.622, -155.342, -175.847, 0.33 ) }
    dend_28 { pt3dadd( -116.146, -159.271, -174.459, 0.33 ) }
    dend_28 { pt3dadd( -119.401, -164.339, -172.667, 0.33 ) }
    dend_28 { pt3dadd( -121.869, -167.867, -171.734, 0.33 ) }
    dend_28 { pt3dadd( -124.732, -171.472, -170.964, 0.33 ) }
    dend_28 { pt3dadd( -126.775, -173.795, -170.772, 0.33 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_28 { pt3dadd( -131.2, -177.923, -170.453, 0.33 ) }
    // Section: dend_27, id: dend_27, parent: dend_26 (entry count 1/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( -108.404, -142.399, -183.029, 0.67 ) }
    dend_27 { pt3dadd( -110.166, -142.07, -186.679, 0.67 ) }
    dend_27 { pt3dadd( -112.106, -141.566, -190.576, 0.67 ) }
    dend_27 { pt3dadd( -114.2, -140.951, -195.169, 0.67 ) }
    dend_27 { pt3dadd( -116.663, -140.042, -200.586, 0.33 ) }
    dend_27 { pt3dadd( -117.397, -139.763, -202.064, 0.33 ) }
    dend_27 { pt3dadd( -118.198, -139.415, -203.568, 0.33 ) }
    dend_27 { pt3dadd( -119.642, -138.654, -206.169, 0.33 ) }
    dend_27 { pt3dadd( -122.638, -136.884, -211.011, 0.67 ) }
    dend_27 { pt3dadd( -123.879, -136.179, -212.571, 0.67 ) }
    dend_27 { pt3dadd( -125.806, -134.939, -214.652, 0.67 ) }
    dend_27 { pt3dadd( -131.375, -131.444, -219.985, 0.33 ) }
    dend_27 { pt3dadd( -134.05, -129.818, -222.105, 0.33 ) }
    dend_27 { pt3dadd( -135.638, -128.85, -223.143, 0.33 ) }
    dend_27 { pt3dadd( -139.879, -126.251, -225.463, 0.33 ) }
    dend_27 { pt3dadd( -141.45, -125.303, -226.292, 0.33 ) }
    dend_27 { pt3dadd( -143.748, -123.836, -227.352, 0.33 ) }
    dend_27 { pt3dadd( -146.74, -122.013, -227.923, 0.33 ) }
    dend_27 { pt3dadd( -150.576, -119.712, -228.337, 0.33 ) }
    // Section: dend_25, id: dend_25, parent: dend_23 (entry count 20/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 4.52621, -230.873, -40.0411, 0.33 ) }
    dend_25 { pt3dadd( 5.53733, -233.663, -40.0411, 0.33 ) }
    dend_25 { pt3dadd( 6.51512, -236.284, -39.8724, 0.33 ) }
    dend_25 { pt3dadd( 7.65815, -239.201, -39.5439, 0.33 ) }
    dend_25 { pt3dadd( 9.57983, -244.418, -38.8497, 0.33 ) }
    dend_25 { pt3dadd( 11.255, -248.966, -38.2446, 0.33 ) }
    dend_25 { pt3dadd( 12.0065, -251.006, -37.9731, 0.33 ) }
    dend_25 { pt3dadd( 13.3347, -254.76, -37.3945, 0.67 ) }
    dend_25 { pt3dadd( 14.3087, -257.69, -36.8658, 0.33 ) }
    dend_25 { pt3dadd( 15.2152, -260.112, -36.3035, 0.33 ) }
    // Section: dend_24, id: dend_24, parent: dend_23 (entry count 30/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 4.52621, -230.873, -40.0411, 0.33 ) }
    dend_24 { pt3dadd( 4.02754, -234.631, -39.9526, 0.33 ) }
    dend_24 { pt3dadd( 3.18339, -239.451, -39.5254, 0.33 ) }
    dend_24 { pt3dadd( 2.9856, -240.682, -39.3942, 0.67 ) }
    dend_24 { pt3dadd( 2.68957, -242.781, -39.1564, 0.33 ) }
    dend_24 { pt3dadd( 2.23924, -246.837, -38.8338, 0.33 ) }
    dend_24 { pt3dadd( 1.62476, -252.916, -38.4752, 0.33 ) }
    dend_24 { pt3dadd( 1.08116, -257.082, -38.15, 0.33 ) }
    dend_24 { pt3dadd( 0.827231, -259.104, -38.1187, 0.33 ) }
    dend_24 { pt3dadd( 0.680947, -260.076, -38.2007, 0.67 ) }
    dend_24 { pt3dadd( 0.079413, -264.391, -39.0151, 0.33 ) }
    dend_24 { pt3dadd( -0.153097, -265.86, -39.4722, 0.33 ) }
    dend_24 { pt3dadd( -0.332032, -267.003, -39.9613, 0.67 ) }
    dend_24 { pt3dadd( -1.30731, -271.66, -42.1476, 0.33 ) }
    dend_24 { pt3dadd( -2.16983, -275.082, -43.7754, 0.33 ) }
    dend_24 { pt3dadd( -3.00329, -278.571, -45.4114, 0.33 ) }
    dend_24 { pt3dadd( -3.40797, -280.884, -46.5927, 0.33 ) }
    dend_24 { pt3dadd( -3.45691, -281.846, -47.1108, 0.67 ) }
    dend_24 { pt3dadd( -2.99683, -285.513, -49.3633, 0.33 ) }
    dend_24 { pt3dadd( -2.89049, -285.789, -49.5521, 0.67 ) }
    dend_24 { pt3dadd( -1.44725, -288.048, -51.2073, 0.33 ) }
    dend_24 { pt3dadd( 0.629245, -290.796, -53.5918, 0.33 ) }
    dend_24 { pt3dadd( 1.75361, -292.204, -54.8064, 0.33 ) }
    dend_24 { pt3dadd( 4.03237, -294.763, -57.1882, 0.67 ) }
    dend_24 { pt3dadd( 5.30955, -296.149, -58.6639, 0.67 ) }
    dend_24 { pt3dadd( 6.54625, -297.638, -60.4672, 0.67 ) }
    dend_24 { pt3dadd( 8.53824, -300.03, -63.6632, 0.33 ) }
    dend_24 { pt3dadd( 9.68229, -301.535, -65.5919, 0.33 ) }
    dend_24 { pt3dadd( 11.8803, -304.339, -69.2774, 0.33 ) }
    dend_24 { pt3dadd( 13.6417, -306.389, -72.0978, 0.67 ) }
    dend_24 { pt3dadd( 16.4659, -309.297, -76.4076, 0.33 ) }
    dend_24 { pt3dadd( 18.1617, -310.651, -78.6199, 0.33 ) }
    dend_24 { pt3dadd( 20.3169, -311.85, -80.6308, 0.33 ) }
    dend_24 { pt3dadd( 21.6572, -312.378, -81.539, 0.33 ) }
    dend_24 { pt3dadd( 24.1023, -313.242, -82.2677, 0.33 ) }
    dend_24 { pt3dadd( 25.8242, -313.778, -82.3922, 0.33 ) }
    dend_24 { pt3dadd( 27.4556, -314.245, -82.27, 0.67 ) }
    dend_24 { pt3dadd( 29.5758, -314.981, -82.2868, 0.33 ) }
    dend_24 { pt3dadd( 32.0459, -315.903, -82.4719, 0.33 ) }
    dend_24 { pt3dadd( 35.7578, -317.757, -82.9458, 0.33 ) }
    dend_24 { pt3dadd( 36.5619, -318.237, -83.1171, 0.33 ) }
    dend_24 { pt3dadd( 38.7748, -319.696, -83.7768, 0.33 ) }
    dend_24 { pt3dadd( 42.842, -322.621, -85.2588, 0.33 ) }
    dend_24 { pt3dadd( 44.551, -323.922, -85.9871, 0.33 ) }
    dend_24 { pt3dadd( 46.3247, -325.376, -86.8783, 0.33 ) }
    dend_24 { pt3dadd( 48.5558, -327.192, -88.2932, 0.33 ) }
    dend_24 { pt3dadd( 50.2618, -328.627, -89.4165, 0.33 ) }
    dend_24 { pt3dadd( 51.375, -329.665, -90.1753, 0.33 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 78/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -159.614, 280.898, 17.2112, 0.33 ) }
    dend_7 { pt3dadd( -154.177, 289.704, 17.5209, 0.33 ) }
    dend_7 { pt3dadd( -149.579, 298.966, 18.5474, 0.33 ) }
    dend_7 { pt3dadd( -144.7, 308.104, 17.8709, 0.33 ) }
    dend_7 { pt3dadd( -139.194, 316.657, 16.0476, 0.33 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 83/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -159.614, 280.898, 17.2112, 0.67 ) }
    dend_6 { pt3dadd( -157.459, 289.351, 22.7374, 0.33 ) }
    dend_6 { pt3dadd( -154.517, 297.132, 28.7727, 0.33 ) }
    dend_6 { pt3dadd( -149.821, 304.235, 34.4469, 0.33 ) }
    dend_6 { pt3dadd( -144.442, 312.38, 37.7465, 0.33 ) }
    // Section: dend_4, id: dend_4, parent: dend_2 (entry count 88/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -173.797, 261.297, 9.85712, 0.33 ) }
    dend_4 { pt3dadd( -176.326, 261.574, 9.85712, 0.33 ) }
    dend_4 { pt3dadd( -180.641, 262.048, 9.85712, 0.33 ) }
    dend_4 { pt3dadd( -183.782, 262.393, 9.85712, 0.67 ) }
    dend_4 { pt3dadd( -193.586, 264.249, 10.723, 0.67 ) }
    dend_4 { pt3dadd( -203.55, 264.733, 10.0067, 0.67 ) }
    dend_4 { pt3dadd( -213.333, 264.743, 7.93691, 0.67 ) }
    dend_4 { pt3dadd( -222.736, 266.754, 5.1233, 0.67 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 96/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -173.797, 261.297, 9.85712, 0.33 ) }
    dend_3 { pt3dadd( -178.895, 261.663, 11.1859, 0.33 ) }
    dend_3 { pt3dadd( -181.667, 261.862, 11.9084, 0.33 ) }
    dend_3 { pt3dadd( -186.561, 262.214, 13.1838, 0.33 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_3 { pt3dadd( -195.77, 262.556, 17.0683, 0.33 ) }
    dend_3 { pt3dadd( -204.892, 261.665, 21.0759, 0.33 ) }
    dend_3 { pt3dadd( -214.192, 261.066, 24.7078, 0.33 ) }
    dend_3 { pt3dadd( -223.354, 259.876, 28.5497, 0.33 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_18, dend_11, dend_0, dend_22, dend_19, dend_15, dend_12, dend_8, dend_1, dend_26, dend_23, dend_21, dend_20, dend_17, dend_16, dend_14, dend_13, dend_10, dend_9, dend_5, dend_2, dend_28, dend_27, dend_25, dend_24, dend_7, dend_6, dend_4, dend_3]}
    ModelViewParmSubset_2 = new SectionList()
    dend_18 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_18, dend_11, dend_0, dend_22, dend_19, dend_15, dend_12, dend_8, dend_1, dend_26, dend_23, dend_21, dend_20, dend_17, dend_16, dend_14, dend_13, dend_10, dend_9, dend_5, dend_2, dend_28, dend_27, dend_25, dend_24, dend_7, dend_6, dend_4, dend_3]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()

    // Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_18, dend_11, dend_0, axon_0, dend_22, dend_19, dend_15, dend_12, dend_8, dend_1, axon_1, dend_26, dend_23, dend_21, dend_20, dend_17, dend_16, dend_14, dend_13, dend_10, dend_9, dend_5, dend_2, dend_28, dend_27, dend_25, dend_24, dend_7, dend_6, dend_4, dend_3]}
    ModelViewParmSubset_5 = new SectionList()
    dend_18 ModelViewParmSubset_5.append()
    dend_11 ModelViewParmSubset_5.append()
    dend_0 ModelViewParmSubset_5.append()
    axon_0 ModelViewParmSubset_5.append()
    dend_22 ModelViewParmSubset_5.append()
    dend_19 ModelViewParmSubset_5.append()
    dend_15 ModelViewParmSubset_5.append()
    dend_12 ModelViewParmSubset_5.append()
    dend_8 ModelViewParmSubset_5.append()
    dend_1 ModelViewParmSubset_5.append()
    axon_1 ModelViewParmSubset_5.append()
    dend_26 ModelViewParmSubset_5.append()
    dend_23 ModelViewParmSubset_5.append()
    dend_21 ModelViewParmSubset_5.append()
    dend_20 ModelViewParmSubset_5.append()
    dend_17 ModelViewParmSubset_5.append()
    dend_16 ModelViewParmSubset_5.append()
    dend_14 ModelViewParmSubset_5.append()
    dend_13 ModelViewParmSubset_5.append()
    dend_10 ModelViewParmSubset_5.append()
    dend_9 ModelViewParmSubset_5.append()
    dend_5 ModelViewParmSubset_5.append()
    dend_2 ModelViewParmSubset_5.append()
    dend_28 ModelViewParmSubset_5.append()
    dend_27 ModelViewParmSubset_5.append()
    dend_25 ModelViewParmSubset_5.append()
    dend_24 ModelViewParmSubset_5.append()
    dend_7 ModelViewParmSubset_5.append()
    dend_6 ModelViewParmSubset_5.append()
    dend_4 ModelViewParmSubset_5.append()
    dend_3 ModelViewParmSubset_5.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_11 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_22 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_19 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_12 OneSecGrp_SectionRef_9.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_1 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_26 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_23 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_21 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_20 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_10 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_9 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_28 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_27 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_24 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_7 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_6 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_4 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_3 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_18 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_0 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_8 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_15 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_17 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_16 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_25 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_13 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_14 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_2 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_5 OneSecGrp_SectionRef_23.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_18, dend_18, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_8, dend_8, dend_8, dend_8, dend_8, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_14, dend_13, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_0 all.append()
    dend_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_14 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.993125  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.0  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.005611  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.068459995  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.517764  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 6.3E-5  // units: S cm-2
        e_pas_nml2 = -64.6017  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 3.45E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.077616  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.002099  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 1.13999995E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.26087198  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-5  // units: S cm-2
        e_pas_nml2 = -69.78141  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 3.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.395881  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009986  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 5.0100003E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009728  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 2.7999999E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cACint_237_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cACint_237_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_11 nseg = 3
    dend_22 nseg = 3
    dend_19 nseg = 13
    dend_12 nseg = 11
    dend_1 nseg = 13
    dend_26 nseg = 11
    dend_23 nseg = 9
    dend_21 nseg = 3
    dend_20 nseg = 9
    dend_10 nseg = 13
    dend_9 nseg = 11
    dend_28 nseg = 3
    dend_27 nseg = 3
    dend_24 nseg = 7
    dend_7 nseg = 3
    dend_6 nseg = 3
    dend_4 nseg = 3
    dend_3 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cACint209_L23_SBC_afc0be559d_0_0


