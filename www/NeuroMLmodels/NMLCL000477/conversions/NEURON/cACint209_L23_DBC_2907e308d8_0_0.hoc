// Cell: cACint209_L23_DBC_2907e308d8_0_0
/*
{
  "id" : "cACint209_L23_DBC_2907e308d8_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-1.10046, -10.7769, 0.0, 1.2583", "-0.977881, -9.66658, 0.0, 1.27734", "-0.855301, -8.55625, 0.0, 1.93125", "-0.732721, -7.44592, 0.0, 2.73299", "-0.610142, -6.33559, 0.0, 3.81421", "-0.487562, -5.22526, 0.0, 4.86299", "-0.364982, -4.11493, 0.0, 5.49704", "-0.242403, -3.0046, 0.0, 6.12703", "-0.119823, -1.89427, 0.0, 6.84433", "0.00275685, -0.783937, 0.0, 7.36999", "0.125337, 0.326393, 0.0, 7.59231", "0.247916, 1.43672, 0.0, 7.67062", "0.370496, 2.54705, 0.0, 7.50992", "0.493076, 3.65738, 0.0, 7.33464", "0.615655, 4.76771, 0.0, 7.00391", "0.738235, 5.87804, 0.0, 6.54709", "0.860815, 6.98838, 0.0, 5.62524", "0.983394, 8.09871, 0.0, 4.30117", "1.10597, 9.20904, 0.0, 3.55313", "1.22855, 10.3194, 0.0, 2.60096", "1.35113, 11.4297, 0.0, 1.60168" ]
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-0.382575, -10.9767, -3.38, 1.94", "0.415017, -14.7864, -3.38, 1.94", "1.11631, -18.136, -3.38, 1.94", "1.41603, -19.5676, -3.38, 3.6" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4999996983969059
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "2.29743, 11.5533, -4.34, 1.66", "2.38154, 15.4082, -3.98104, 1.66", "2.42946, 17.6044, -3.77654, 1.66" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4999996983969059
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "1.35113, 11.4297, 0.0, 0.55", "2.99712, 26.3391, 0.0, 0.55", "4.64311, 41.2485, 0.0, 0.55" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_33",
    "id" : "dend_33",
    "points3d" : [ "1.41603, -19.5676, -3.38, 0.83", "3.75004, -20.9223, -3.32361, 0.83", "6.09191, -22.2192, -3.25349, 0.83", "8.703, -23.6571, -3.16053, 0.83", "11.5272, -25.0443, -3.04764, 0.83", "14.7631, -26.5978, -2.90905, 0.83", "16.4302, -27.389, -2.83344, 0.83", "19.0581, -28.6126, -2.6978, 0.83", "21.9385, -29.8082, -2.38225, 0.83", "24.2869, -30.7011, -1.98033, 0.83", "26.1007, -31.4494, -1.56696, 0.83", "27.8854, -32.2259, -1.09562, 0.83", "28.2819, -32.4246, -1.00889, 0.83", "31.5404, -34.2659, -0.44903, 0.83", "34.7654, -36.2004, 0.0981773, 0.83", "37.1084, -37.74, 0.467799, 0.83", "38.6877, -38.7578, 0.675527, 0.83", "41.8782, -40.9215, 0.929496, 1.11", "44.383, -42.7375, 0.890834, 1.11" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "1.41603, -19.5676, -3.38, 1.94", "0.884021, -24.6286, -1.13118, 1.94", "0.575306, -27.5655, 0.17378, 2.22" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "2.42946, 17.6044, -3.77654, 0.83", "0.855449, 18.9482, -4.96033, 0.83", "0.181455, 19.6138, -5.43979, 0.83", "-0.816138, 20.738, -6.12586, 0.83", "-1.78761, 21.9356, -6.77224, 0.83", "-2.73324, 23.3371, -7.40262, 0.83", "-3.32657, 24.2717, -7.79332, 0.83", "-4.03255, 25.6309, -8.20188, 0.83", "-4.60057, 26.9966, -8.54627, 0.83", "-5.20535, 28.8101, -8.93362, 0.83", "-5.84449, 31.0083, -9.35921, 0.83", "-6.19189, 32.2477, -9.5931, 0.83", "-6.97187, 35.1493, -10.1251, 0.83", "-7.38002, 36.8254, -10.4125, 0.83", "-7.61479, 37.8438, -10.581, 0.83", "-8.05625, 39.8605, -10.9036, 0.83", "-8.36929, 41.1867, -11.1264, 0.83", "-8.79903, 43.0265, -11.4334, 0.83", "-9.23778, 44.5193, -11.7246, 0.83", "-9.77239, 46.0687, -12.064, 0.83", "-10.3168, 47.4418, -12.3978, 0.83", "-10.6675, 48.2449, -12.6081, 0.83", "-10.9656, 48.8579, -12.7828, 0.83", "-11.6836, 50.1091, -13.1908, 0.55", "-13.0796, 52.4568, -13.9791, 1.11", "-13.9815, 54.0174, -14.4909, 1.11", "-15.0904, 56.043, -15.1263, 1.11", "-15.6575, 57.2049, -15.4586, 1.11", "-16.4996, 59.1049, -15.9619, 0.83", "-17.5021, 61.5221, -16.5701, 0.55", "-17.9949, 62.7362, -16.8706, 0.55", "-19.3163, 66.1831, -17.6873, 0.83", "-19.923, 67.8303, -18.066, 0.83", "-20.4305, 69.2567, -18.3855, 0.83", "-21.276, 71.7075, -18.9222, 0.83", "-21.7182, 72.9362, -19.1998, 0.83", "-22.1692, 74.1607, -19.4813, 0.83", "-22.6786, 75.549, -19.7996, 0.83", "-22.9808, 76.3078, -19.9847, 0.83", "-23.8139, 78.5322, -20.5025, 0.83" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "2.42946, 17.6044, -3.77654, 0.83", "0.90103, 20.2303, -4.31719, 0.83", "-0.614593, 22.8341, -4.8533, 1.66" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "4.64311, 41.2485, 0.0, 0.55", "6.28909, 56.158, 0.0, 0.55", "7.93508, 71.0674, 0.0, 0.55" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_35",
    "id" : "dend_35",
    "points3d" : [ "44.383, -42.7375, 0.890834, 0.83", "46.5292, -43.5654, 1.05359, 0.83", "49.373, -44.8257, 1.2663, 0.83", "50.4664, -45.426, 1.36591, 0.55", "52.3495, -46.6238, 1.55642, 0.83", "53.9058, -47.6571, 1.58418, 0.83", "54.9211, -48.3955, 1.55555, 0.55", "55.5615, -49.0031, 1.49345, 0.83", "56.6899, -50.2689, 1.22888, 0.55", "57.5985, -51.2871, 0.91554, 0.83", "59.6238, -53.6143, -0.55701, 0.55", "60.4104, -54.5077, -1.35438, 0.28", "60.9264, -55.1289, -1.94236, 0.55", "62.065, -56.5387, -3.3419, 0.28", "62.5764, -57.1803, -3.97497, 0.55", "65.0313, -60.6517, -7.31586, 0.28", "66.1317, -62.3434, -8.81324, 0.83", "67.5572, -64.4295, -10.5765, 0.55", "68.0409, -65.0955, -11.1096, 0.28", "69.0452, -66.5135, -12.1245, 1.11", "71.1763, -69.4775, -13.9441, 0.28", "72.1167, -70.694, -14.5023, 0.83", "72.8551, -71.5869, -14.898, 0.28", "74.0115, -72.732, -15.5255, 0.55", "74.7632, -73.415, -15.9289, 0.28", "76.5284, -74.9328, -16.8474, 0.83", "77.635, -75.8556, -17.34, 0.55", "78.4326, -76.5164, -17.7099, 0.55", "80.4351, -78.2688, -18.6174, 0.83", "81.9259, -79.6441, -19.2369, 0.55", "82.8073, -80.4525, -19.6112, 0.83", "83.5891, -81.2144, -19.9614, 0.55", "84.7118, -82.3783, -20.4383, 0.55", "85.9167, -83.572, -20.8977, 0.55", "86.3371, -84.0158, -21.0231, 0.83", "87.5456, -85.3549, -21.5557, 0.55", "88.7324, -86.6794, -22.1362, 0.55", "89.0883, -87.0811, -22.3158, 0.83", "90.8911, -89.1295, -23.1538, 0.55", "92.7048, -91.1768, -23.9375, 1.11", "94.6338, -93.3998, -24.73, 0.55", "97.039, -96.4048, -25.7023, 0.83", "98.0242, -97.6733, -26.094, 0.28", "99.0086, -99.0435, -26.4416, 0.55", "99.5824, -99.8708, -26.5929, 0.28", "100.385, -100.982, -26.7078, 0.55", "101.802, -102.893, -26.7016, 0.28", "103.144, -104.703, -26.8193, 0.55", "104.36, -106.288, -26.9948, 0.28", "105.128, -107.257, -27.1685, 0.55", "105.87, -108.148, -27.3457, 0.28", "106.906, -109.371, -27.6488, 0.83", "108.713, -111.521, -28.2991, 0.28", "109.943, -113.046, -28.865, 0.83", "110.688, -113.944, -29.2427, 0.28", "111.719, -115.289, -29.7964, 0.55", "112.974, -117.039, -30.4877, 0.28", "113.645, -118.028, -30.838, 0.83", "114.57, -119.382, -31.2134, 0.28", "115.005, -120.02, -31.3637, 0.55", "115.736, -121.111, -31.5707, 0.28", "116.196, -121.799, -31.7145, 0.83", "117.492, -123.643, -32.0919, 0.28", "117.892, -124.112, -32.2014, 0.55", "119.08, -125.472, -32.5172, 0.28", "119.669, -126.101, -32.6593, 0.55", "120.831, -127.202, -32.8921, 0.28", "122.007, -128.295, -33.095, 0.55", "123.697, -129.859, -33.3133, 0.55", "125.246, -131.317, -33.5297, 0.55", "125.835, -131.865, -33.6073, 0.28", "126.854, -132.823, -33.7225, 0.55", "127.734, -133.687, -33.8151, 0.28", "128.259, -134.252, -33.9145, 0.55", "129.564, -135.697, -34.2482, 0.28", "130.519, -136.675, -34.5427, 0.55", "131.737, -137.83, -34.9399, 0.28", "132.381, -138.41, -35.144, 0.55", "133.259, -139.127, -35.2962, 0.28", "133.747, -139.517, -35.3733, 0.55", "135.078, -140.521, -35.5212, 0.28", "136.89, -141.857, -35.646, 0.55", "137.626, -142.35, -35.617, 0.55", "139.95, -143.676, -35.3442, 0.28" ],
    "parent" : "dend_33",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_34",
    "id" : "dend_34",
    "points3d" : [ "44.383, -42.7375, 0.890834, 1.11", "45.7369, -45.2697, 0.515209, 1.11", "46.6678, -47.1146, 0.191032, 0.55", "47.6544, -49.0887, -0.284458, 0.83", "49.2505, -52.4171, -1.19953, 0.83", "50.5181, -55.1507, -1.98325, 0.55", "51.63, -57.6163, -2.7082, 0.83", "52.7139, -60.1528, -3.54599, 0.55", "53.7847, -62.6522, -4.39807, 0.55", "54.2797, -63.9012, -4.80878, 0.28", "54.6385, -64.7363, -5.06744, 0.55", "55.261, -66.2642, -5.3906, 0.28", "55.844, -67.6924, -5.6161, 0.55", "56.5769, -69.2811, -5.7577, 0.28", "57.6524, -71.4677, -5.77099, 0.55", "58.6629, -73.4071, -5.66425, 0.28", "59.1092, -74.2243, -5.6309, 0.55", "59.7443, -75.3822, -5.70159, 0.55", "60.5173, -76.9552, -5.90741, 0.55", "60.7847, -77.5169, -6.02537, 0.83", "61.6942, -79.4761, -6.50145, 0.28", "62.6316, -81.9308, -7.21657, 0.83", "63.9119, -85.4152, -8.39869, 0.28", "64.3426, -86.6436, -8.93535, 0.55", "64.6922, -87.797, -9.48601, 0.28", "65.0949, -89.127, -10.2236, 0.83", "65.713, -91.3838, -11.505, 0.28", "66.2106, -93.278, -12.4942, 0.55", "67.0614, -96.2448, -13.9366, 0.28", "67.6428, -98.0831, -14.7876, 0.55", "68.8214, -101.878, -16.3941, 0.55", "69.48, -103.939, -17.0955, 0.55", "69.9317, -105.391, -17.436, 0.28", "70.1657, -106.249, -17.5796, 0.55", "70.5721, -107.811, -17.69, 0.28", "70.7925, -108.489, -17.6604, 0.55", "71.5292, -111.059, -17.0869, 0.28", "71.9881, -112.407, -16.6696, 0.55", "72.5879, -114.493, -15.8516, 0.28", "72.6571, -114.766, -15.7219, 0.55", "73.6176, -118.094, -13.9583, 0.28", "74.1114, -119.646, -13.1267, 0.55", "75.0396, -122.444, -11.7346, 0.28", "75.4498, -123.567, -11.2191, 0.55", "75.9683, -124.874, -10.698, 0.28", "76.7915, -126.889, -10.132, 0.83", "77.8081, -129.25, -9.6174, 0.28", "78.6641, -130.979, -9.23348, 0.83", "79.6384, -132.847, -8.80931, 0.28", "80.3511, -134.014, -8.50341, 0.28", "80.8715, -134.749, -8.24082, 0.55", "82.634, -136.956, -6.92593, 0.28", "83.1827, -137.56, -6.38921, 0.55", "84.0242, -138.48, -5.44155, 0.28", "84.5235, -139.087, -4.84138, 0.55", "85.4907, -140.505, -3.74634, 0.28", "86.2247, -141.845, -2.94034, 0.55", "87.9245, -145.571, -1.66376, 0.28", "88.3242, -146.501, -1.46992, 0.28", "89.2279, -148.845, -1.24806, 0.83", "90.3857, -152.128, -1.20185, 0.28", "90.9446, -153.856, -1.31656, 0.55", "92.1384, -157.623, -1.69453, 0.28", "92.6482, -159.298, -1.88886, 0.28", "93.1207, -160.782, -2.03985, 0.55", "93.7334, -162.564, -2.23632, 0.28", "94.1783, -163.779, -2.352, 0.55", "94.8477, -165.656, -2.46784, 0.28", "95.0996, -166.553, -2.45119, 0.55", "95.5619, -168.532, -2.37844, 0.28", "95.749, -169.504, -2.3278, 0.55", "96.1928, -172.011, -2.37891, 0.28", "96.3808, -173.415, -2.46035, 0.55", "96.6925, -175.62, -2.58613, 0.55", "96.9573, -177.724, -2.62298, 0.28", "97.1199, -179.283, -2.54291, 0.55", "97.3075, -182.47, -2.37222, 0.28", "97.4537, -184.042, -2.34105, 0.55", "97.845, -187.301, -2.3956, 0.28", "97.9429, -188.277, -2.49372, 0.55", "98.0176, -189.497, -2.68387, 0.28", "98.1359, -191.099, -3.00832, 0.55", "98.2681, -194.035, -3.59912, 0.28", "98.3349, -195.121, -3.81272, 0.55", "98.4953, -197.171, -4.4406, 0.28", "98.5906, -198.01, -4.71858, 0.55", "98.9407, -200.345, -5.56164, 0.28", "99.2486, -202.479, -6.29447, 0.55", "99.592, -204.973, -7.14448, 0.28", "100.398, -209.876, -8.80246, 0.55", "101.036, -213.27, -9.86911, 0.28", "101.417, -215.053, -10.4374, 0.28", "101.903, -217.107, -11.0988, 0.55", "102.573, -219.448, -11.8915, 0.28", "102.986, -220.614, -12.2675, 0.55", "103.55, -221.877, -12.4189, 0.28", "104.461, -223.472, -12.3719, 0.55", "105.323, -224.844, -12.1185, 0.28", "106.758, -226.922, -11.6199, 0.55", "108.44, -229.331, -11.0361, 0.28", "111.008, -232.883, -10.2752, 0.55", "113.093, -235.738, -9.93463, 0.55", "114.086, -237.104, -9.85955, 0.28", "115.159, -238.539, -10.0039, 0.55", "116.707, -240.594, -10.5805, 0.28", "117.668, -241.951, -11.1703, 0.55", "119.161, -244.19, -12.3763, 0.28", "120.009, -245.41, -13.1476, 0.55", "121.029, -246.864, -14.0806, 0.28", "121.512, -247.557, -14.426, 0.55", "122.317, -248.81, -14.8704, 0.28", "122.758, -249.61, -15.0953, 0.55" ],
    "parent" : "dend_33",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "0.575306, -27.5655, 0.17378, 1.38", "0.31603, -28.5515, 0.0881907, 1.38", "-0.701442, -32.4209, -0.247685, 1.38" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "0.575306, -27.5655, 0.17378, 0.83", "-0.511678, -30.0398, 0.432971, 0.83", "-1.69339, -32.5683, 1.49834, 0.83", "-2.78414, -35.0173, 2.68422, 1.38", "-4.01744, -37.6865, 4.06568, 1.11", "-4.96256, -39.732, 5.12434, 0.55", "-6.09339, -42.1794, 6.39102, 1.11", "-8.70814, -47.9317, 9.89493, 0.83", "-9.73657, -50.2751, 11.5195, 1.11", "-10.6793, -52.2043, 12.9669, 0.83" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-0.614593, 22.8341, -4.8533, 1.38", "0.853629, 26.5662, -5.92051, 1.38", "2.04823, 29.6027, -6.78883, 1.38", "2.75226, 31.3923, -7.30057, 1.38", "3.30591, 32.7996, -7.703, 1.38" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_37",
    "id" : "dend_37",
    "points3d" : [ "139.95, -143.676, -35.3442, 0.28", "141.743, -143.66, -34.78, 0.28", "143.19, -143.647, -34.3246, 0.55", "145.146, -143.629, -33.7091, 0.28", "146.485, -143.618, -33.2877, 0.55" ],
    "parent" : "dend_35",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_36",
    "id" : "dend_36",
    "points3d" : [ "139.95, -143.676, -35.3442, 0.28", "142.999, -145.055, -35.4101, 0.28", "144.293, -145.627, -35.3437, 0.28", "146.838, -146.809, -34.9164, 0.83", "148.529, -147.618, -34.5262, 0.28", "149.938, -148.261, -34.0509, 0.55", "151.226, -148.839, -33.5448, 0.28", "151.291, -148.865, -33.5069, 0.55", "153.089, -149.568, -32.3543, 0.28", "153.158, -149.601, -32.3053, 0.55", "155.313, -150.591, -30.8143, 0.28", "155.661, -150.757, -30.5882, 0.55", "158.299, -152.02, -28.9493, 0.28", "158.798, -152.255, -28.6507, 0.55", "160.722, -153.136, -27.5747, 0.28", "162.079, -153.799, -26.8507, 0.55" ],
    "parent" : "dend_35",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_32",
    "id" : "dend_32",
    "points3d" : [ "-0.701442, -32.4209, -0.247685, 1.38", "-1.06495, -32.6203, -0.38465, 1.38", "-7.75334, -36.7481, -3.44069, 1.38", "-11.8967, -39.4147, -5.57188, 1.11", "-14.3051, -41.1231, -6.98693, 0.83", "-16.8106, -43.0218, -8.62325, 0.83", "-19.9845, -45.8024, -11.171, 0.83", "-20.819, -46.7311, -12.0196, 0.83", "-21.5068, -47.7321, -12.9312, 0.83", "-23.6304, -51.1576, -15.821, 0.83", "-25.2049, -53.6714, -17.97, 0.83", "-28.2802, -58.4066, -22.1451, 0.83", "-30.1639, -61.4141, -24.7004, 0.55", "-31.4986, -63.475, -26.4714, 0.55", "-33.6564, -66.5084, -29.2093, 0.55", "-35.7889, -69.2239, -31.862, 0.55", "-37.5376, -70.8163, -33.3619, 0.55", "-39.0258, -71.8546, -34.2543, 0.55", "-41.2216, -73.1839, -35.3634, 0.55", "-46.5287, -76.2001, -37.7224, 0.55", "-49.099, -77.6243, -38.7453, 0.55", "-59.4253, -83.5658, -42.8028, 0.55", "-61.9393, -85.1883, -43.8029, 0.55", "-66.6371, -88.2686, -45.7996, 0.55", "-69.0166, -90.0045, -46.918, 0.55", "-70.2309, -91.0246, -47.5758, 0.55", "-73.8236, -94.4546, -50.0797, 0.55", "-75.6563, -96.6721, -51.9948, 0.55", "-77.7157, -98.9957, -54.1456, 0.55", "-80.4435, -102.098, -56.8352, 0.55", "-81.4658, -103.099, -57.63, 0.55", "-82.5227, -103.959, -58.2903, 0.55", "-84.8445, -105.54, -59.4408, 0.55", "-87.7716, -107.29, -60.7396, 0.55", "-90.3558, -108.842, -61.8054, 0.55", "-95.2558, -111.364, -63.884, 0.55", "-96.2921, -111.894, -64.3651, 0.55", "-100.003, -113.871, -66.2841, 0.55", "-102.267, -115.043, -67.6275, 0.55", "-104.412, -116.163, -69.159, 0.55", "-106.303, -117.295, -71.3165, 0.55", "-107.677, -118.326, -73.501, 0.55", "-108.986, -119.312, -75.8626, 0.55", "-110.096, -120.095, -78.0607, 0.55", "-111.507, -121.007, -80.9593, 0.55", "-115.748, -123.281, -88.8077, 0.55", "-117.173, -123.965, -91.195, 0.55", "-118.845, -124.807, -94.0088, 0.55", "-120.577, -125.832, -96.6831, 0.55", "-122.336, -126.851, -98.6098, 0.55", "-125.869, -128.789, -101.756, 0.55", "-127.61, -129.639, -102.816, 0.55", "-132.244, -131.995, -105.353, 0.55", "-136.371, -134.429, -107.273, 0.55", "-143.265, -139.02, -109.846, 0.55", "-149.774, -144.791, -116.475, 0.55" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "-0.701442, -32.4209, -0.247685, 1.11", "-0.328564, -32.8989, -0.770714, 1.11", "0.519716, -33.9864, -1.96058, 1.11", "1.87328, -35.7216, -3.8592, 1.11", "3.75064, -38.1282, -6.49255, 1.11" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-10.6793, -52.2043, 12.9669, 0.83", "-11.7096, -57.7065, 19.9638, 0.83", "-12.0885, -59.81, 22.3874, 0.83", "-12.4149, -62.0358, 24.7591, 0.83", "-12.6506, -63.6681, 26.3577, 1.11", "-12.9245, -65.6988, 28.2249, 0.55", "-13.2664, -68.2144, 30.3749, 0.83", "-13.5222, -70.5568, 31.8549, 0.83", "-13.5625, -71.7938, 32.6106, 0.55", "-13.5897, -73.4076, 33.4296, 0.83", "-13.5866, -74.787, 34.0172, 0.83", "-13.5269, -76.3258, 34.6497, 0.83", "-13.3983, -77.7204, 35.2017, 0.83", "-13.3334, -78.5412, 35.5436, 0.83", "-13.2309, -80.1453, 36.3572, 0.55", "-13.1816, -81.234, 36.9529, 1.11", "-13.0575, -85.1785, 39.2011, 0.55", "-13.0356, -86.4644, 39.9844, 0.55", "-13.0736, -87.6004, 40.6947, 1.11", "-13.2517, -90.2783, 42.4528, 0.55", "-13.3625, -91.7261, 43.4879, 1.11", "-13.619, -98.5439, 49.2917, 1.11", "-14.4618, -104.124, 56.2475, 1.11", "-13.3709, -110.367, 62.5774, 1.11", "-11.2337, -115.854, 69.3267, 1.11", "-10.4353, -122.37, 75.4206, 1.11", "-8.15242, -127.269, 82.5634, 1.11", "-6.15324, -132.116, 89.8263, 1.11", "-4.02321, -136.45, 97.3701, 1.11", "-2.29487, -139.092, 105.753, 1.11", "-1.31379, -140.826, 114.485, 1.11" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-10.6793, -52.2043, 12.9669, 1.11", "-10.9279, -52.7063, 13.3536, 1.11", "-11.4107, -53.6798, 14.0856, 1.11", "-12.2285, -55.4285, 15.415, 1.11", "-13.3933, -58.1081, 17.424, 1.11", "-14.5393, -60.8348, 19.4939, 1.11", "-14.9894, -61.958, 20.3153, 0.55", "-15.3874, -63.0314, 21.0621, 0.83", "-16.1827, -65.0051, 22.2845, 1.11", "-16.447, -65.5547, 22.6099, 1.11", "-17.3296, -67.1069, 23.3142, 0.55", "-18.1575, -68.343, 23.8213, 0.83", "-19.49, -70.0966, 24.5672, 0.83", "-21.2131, -72.1975, 25.5674, 0.83", "-23.2986, -74.4196, 26.7935, 0.55", "-24.3983, -75.5178, 27.4629, 0.83", "-25.8068, -76.795, 28.3239, 0.55", "-26.7164, -77.5874, 28.9505, 1.11", "-29.2446, -79.7517, 30.8672, 0.55", "-30.7875, -81.165, 32.1103, 0.83", "-31.6385, -82.0324, 32.7729, 0.83", "-33.2432, -83.7299, 33.9926, 0.83", "-34.0857, -84.6464, 34.6019, 1.11", "-34.9323, -85.4936, 35.1579, 0.28", "-35.6713, -86.1885, 35.4991, 0.83", "-36.395, -87.0557, 35.8337, 0.28", "-37.3753, -88.3247, 36.3407, 0.83", "-40.7267, -94.541, 39.6407, 0.83", "-44.2844, -100.411, 43.3353, 0.83", "-47.6712, -105.599, 48.0656, 0.83", "-50.0438, -110.484, 53.6573, 0.83", "-51.6075, -114.538, 60.1293, 0.83", "-54.065, -116.977, 67.1134, 0.83", "-57.4807, -118.09, 74.0313, 0.83", "-60.4628, -119.73, 81.0443, 0.83", "-63.6973, -122.434, 87.6012, 0.83" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "3.30591, 32.7996, -7.703, 1.11", "6.19751, 34.6733, -19.5362, 1.11", "9.11811, 36.5658, -31.488, 1.11" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "3.30591, 32.7996, -7.703, 1.38", "2.97147, 37.186, -8.65463, 1.38", "2.6993, 40.7555, -9.42904, 1.38" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "3.75064, -38.1282, -6.49255, 0.83", "5.47538, -40.0342, -8.03568, 0.83", "9.22649, -44.1796, -11.3918, 0.83", "11.8632, -47.0935, -13.7509, 1.11" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "3.75064, -38.1282, -6.49255, 0.55", "3.90397, -38.9351, -7.62915, 0.55", "4.63761, -41.6514, -11.5112, 0.55", "5.40148, -44.1988, -15.376, 0.55", "5.6911, -45.162, -16.7663, 0.28", "6.5485, -48.1218, -21.059, 0.55", "7.32453, -51.3793, -25.6686, 0.55", "7.71552, -52.9961, -28.0555, 0.55", "8.12127, -54.3278, -30.0989, 0.55", "8.76124, -56.7081, -33.6017, 0.55", "9.2461, -58.5582, -36.2241, 0.28", "9.61955, -60.5629, -38.7846, 0.55", "9.82779, -62.0997, -40.7403, 0.55", "10.0758, -64.5914, -44.0483, 0.28", "10.1634, -65.4021, -45.1614, 0.55", "10.2825, -66.2589, -46.4877, 0.28", "10.7436, -68.3742, -49.9236, 0.55", "11.1774, -69.6748, -52.4808, 0.28", "11.2415, -69.8376, -52.8858, 0.55", "11.5276, -70.6013, -55.1335, 0.28", "11.8109, -71.1569, -56.9, 0.83", "12.3777, -71.9649, -59.6801, 0.28", "13.1085, -72.7357, -62.1831, 0.55", "14.257, -73.7193, -65.0787, 0.28", "15.1412, -74.3402, -66.7655, 0.55", "15.9339, -74.9081, -68.0988, 0.28", "16.6333, -75.4451, -69.1997, 0.55", "17.982, -76.5792, -71.3205, 0.28", "21.2084, -79.5406, -76.4432, 0.55", "23.5282, -81.7073, -80.0902, 0.28", "24.3818, -82.5026, -81.4671, 0.83", "26.6746, -84.7351, -85.4598, 0.28", "27.4417, -85.5802, -86.9588, 0.55", "27.6882, -85.9113, -87.5141, 0.55", "28.2776, -86.8951, -89.0862, 0.28", "28.8353, -87.8735, -90.66, 0.55", "30.0712, -89.7519, -93.5828, 0.28", "30.8857, -91.0352, -95.3996, 0.55", "31.5933, -92.1251, -96.7529, 0.55", "33.0742, -94.4213, -99.3518, 0.28", "33.4835, -95.0493, -99.9782, 0.55", "34.2617, -96.3055, -101.022, 0.28", "35.7654, -98.9321, -102.809, 0.55", "37.8036, -102.262, -104.952, 0.55", "38.5163, -103.456, -105.733, 0.28", "39.6802, -105.379, -106.858, 0.55", "41.1925, -107.624, -108.357, 0.28", "41.6777, -108.28, -108.872, 0.83", "44.4552, -111.585, -111.834, 0.28", "45.7854, -113.148, -113.369, 0.55", "47.1139, -114.761, -115.024, 0.28", "49.6672, -117.919, -118.482, 0.55", "51.7966, -120.506, -121.591, 0.55", "53.0898, -122.15, -123.656, 0.28", "54.2855, -123.689, -125.679, 0.28", "54.9546, -124.515, -126.804, 0.28", "56.5002, -126.467, -129.474, 0.55", "58.9484, -129.714, -133.709, 0.28", "59.702, -130.712, -135.026, 0.83", "61.997, -133.852, -139.188, 0.28", "62.6124, -134.671, -140.317, 0.55", "63.9896, -136.581, -142.946, 0.28", "65.0954, -138.17, -145.111, 0.55", "66.4649, -140.147, -147.834, 0.28", "67.0818, -141.1, -149.164, 0.55", "68.0677, -142.817, -151.667, 0.28", "69.0095, -144.458, -154.125, 0.55", "70.6611, -147.192, -158.433, 0.55", "71.6571, -148.658, -160.85, 0.28", "72.4996, -149.85, -162.929, 0.55", "73.4831, -151.065, -165.187, 0.83" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "9.11811, 36.5658, -31.488, 1.11", "13.3626, 44.2891, -23.3864, 1.11", "14.2249, 45.7876, -22.084, 1.11", "15.3482, 47.5611, -20.7474, 1.11", "16.8164, 49.833, -19.2555, 1.11", "18.6502, 52.6993, -17.6075, 0.83", "20.4107, 55.4302, -16.192, 0.83", "21.7985, 57.3191, -15.7316, 0.83", "23.0804, 59.0342, -15.324, 0.83", "24.1795, 60.4755, -14.9976, 0.83", "25.3587, 62.0015, -14.693, 0.83", "26.2919, 63.3101, -14.517, 0.83", "27.3391, 65.0155, -14.5368, 0.83", "28.043, 66.2844, -14.5645, 0.83", "28.4031, 66.9604, -14.5695, 0.83", "29.2145, 68.521, -14.5858, 0.83", "30.0318, 70.0118, -14.6696, 0.83", "31.6964, 73.1674, -14.9449, 0.83", "33.1719, 75.9498, -15.3345, 0.55", "34.6221, 78.5908, -15.8094, 0.55", "35.8111, 80.5151, -16.1514, 0.55", "37.9234, 83.6465, -16.6514, 0.83", "38.8865, 85.0467, -16.8528, 0.83", "41.4462, 88.6997, -17.2924, 1.11", "43.3266, 91.3478, -17.6905, 0.83", "46.7264, 96.0416, -18.4018, 0.83", "48.9521, 99.0643, -18.8044, 0.83", "49.9393, 100.43, -18.904, 0.83", "51.1595, 102.098, -18.9451, 1.11", "53.8897, 105.781, -18.7834, 0.55", "54.8788, 107.155, -18.6776, 0.55", "56.3352, 109.301, -18.4757, 0.55", "57.9352, 111.737, -18.2858, 0.55", "59.6771, 114.479, -18.0894, 0.55", "60.9081, 116.604, -17.9449, 0.55", "61.6909, 118.086, -17.7439, 0.28", "63.0234, 120.628, -17.289, 0.28", "64.423, 123.301, -16.7402, 0.55", "65.5873, 125.55, -16.2549, 0.55", "66.8518, 128.086, -15.5797, 0.55", "68.8328, 132.218, -14.3537, 0.55", "70.4243, 135.558, -13.2705, 0.55", "71.207, 137.37, -12.6459, 0.55", "71.6905, 138.506, -12.2347, 0.55", "73.1229, 142.108, -11.0514, 0.55", "74.0111, 144.631, -10.3686, 0.55", "74.6437, 146.546, -9.99338, 0.55", "75.9974, 150.984, -9.28975, 0.55", "76.8514, 153.733, -8.79435, 0.55", "77.4769, 155.793, -8.41127, 0.55", "78.2741, 158.292, -7.9437, 0.55", "79.3142, 161.346, -7.33373, 0.83", "79.9338, 163.033, -6.94756, 0.83", "82.0345, 168.361, -5.65568, 0.55", "82.6933, 170.025, -5.23884, 0.55", "83.8388, 172.799, -4.53066, 0.55", "84.6562, 174.818, -4.08417, 0.55", "85.9415, 178.302, -3.53244, 0.55", "87.2942, 182.163, -3.17617, 0.83", "88.0372, 184.193, -3.28766, 0.55", "88.8427, 186.082, -3.53938, 0.83", "90.1076, 188.682, -4.11537, 0.55", "91.535, 191.247, -4.85592, 0.55", "92.7283, 193.065, -5.54207, 1.11", "95.9781, 197.234, -7.31905, 0.83", "98.5911, 200.167, -8.54174, 0.83", "100.502, 202.123, -9.2845, 0.83", "102.176, 203.809, -9.72751, 0.83", "103.897, 205.661, -10.0486, 0.83", "106.135, 208.418, -10.2274, 1.11", "107.87, 211.037, -10.0639, 0.83", "109.885, 214.774, -9.67209, 0.83", "111.585, 218.43, -9.08622, 0.83", "112.724, 221.338, -8.5056, 0.83", "113.415, 223.618, -7.96073, 0.83", "114.023, 226.203, -7.29434, 0.83", "114.302, 227.606, -6.9771, 0.83", "114.556, 228.795, -6.75713, 0.83", "114.94, 230.152, -6.66065, 0.83", "115.658, 231.962, -6.57047, 0.83", "116.511, 233.719, -6.53128, 0.83", "117.414, 235.493, -6.48346, 0.55", "118.202, 236.904, -6.46229, 0.83", "119.941, 239.964, -6.44752, 0.55", "121.485, 242.427, -6.42067, 0.83", "122.026, 243.232, -6.40436, 0.83", "123.27, 245.075, -6.36251, 0.55", "124.424, 246.717, -6.30028, 0.83", "126.221, 249.244, -6.2391, 0.83", "127.435, 250.825, -6.22069, 0.83", "128.281, 252.116, -6.24863, 0.83" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "9.11811, 36.5658, -31.488, 1.94", "8.57146, 40.0962, -33.3327, 1.94", "8.05051, 43.6723, -35.3836, 1.94", "7.65348, 47.2239, -37.4318, 1.38", "6.98627, 54.0842, -41.3332, 1.38", "6.65973, 58.2226, -43.9678, 1.38", "6.15655, 64.7022, -47.8797, 1.11", "5.98436, 66.982, -49.5576, 1.11", "5.87535, 68.7949, -50.978, 1.38", "5.70127, 71.5, -53.1113, 1.38", "5.09902, 77.8296, -58.1101, 1.38", "4.53263, 82.5258, -62.1263, 1.38", "3.49843, 89.7499, -68.2794, 1.38", "3.13714, 92.362, -70.6138, 1.38", "2.45621, 97.3901, -75.2642, 1.38", "1.27594, 106.405, -83.5478, 1.11", "0.254854, 114.051, -90.2263, 1.11", "-0.213123, 117.894, -93.5162, 1.11", "-0.893628, 123.909, -98.3675, 1.11", "-1.28314, 128.057, -101.681, 1.11", "-1.49037, 131.549, -104.352, 1.11", "-1.54563, 135.946, -107.514, 1.11", "-1.4915, 138.258, -109.07, 1.11", "-0.955445, 147.636, -115.523, 1.11", "-0.710725, 150.796, -117.667, 1.11", "-0.172377, 155.712, -121.12, 1.11", "0.340919, 158.816, -123.546, 1.11", "0.872671, 161.229, -125.641, 1.11", "1.72679, 164.679, -128.732, 1.11" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "2.6993, 40.7555, -9.42904, 0.83", "4.46333, 42.5839, -7.75723, 0.83", "7.5859, 45.9012, -5.12918, 0.83", "8.6825, 47.1716, -3.25119, 0.83", "10.5324, 49.5474, 0.494955, 0.83", "11.3705, 50.7185, 2.28296, 0.83", "13.3747, 53.6882, 6.57063, 0.83", "14.4937, 55.4748, 9.01398, 0.83", "20.0747, 65.2903, 21.2515, 0.83", "21.005, 67.1873, 23.2513, 0.83", "21.7751, 69.06, 24.8868, 0.83", "22.4822, 70.9018, 26.4524, 0.83", "23.859, 74.9296, 29.4686, 0.83", "24.409, 76.4809, 30.282, 0.83", "26.5448, 82.0342, 30.6377, 0.83", "26.8128, 82.6975, 30.6832, 0.83", "32.3288, 90.6569, 37.2046, 0.83", "36.9555, 98.3203, 44.6994, 0.83", "42.0087, 106.186, 51.6931, 0.83", "48.5071, 113.495, 58.0691, 0.83", "56.4565, 120.102, 63.4967, 0.83", "63.5977, 128.495, 67.3519, 0.83", "69.2411, 138.637, 68.6222, 0.83", "73.8454, 149.078, 71.0878, 0.83", "78.0141, 159.634, 73.826, 0.83", "80.9374, 170.533, 76.8232, 0.83", "82.2006, 181.774, 79.7139, 0.83", "84.1274, 193.271, 80.342, 0.83", "88.1216, 203.823, 83.3434, 0.83", "94.1464, 212.322, 88.6149, 0.83", "97.6721, 222.263, 93.6186, 0.83", "99.3077, 231.84, 100.093, 0.83", "100.191, 241.459, 106.65, 0.83", "102.166, 250.029, 114.329, 0.83", "102.949, 259.473, 121.148, 0.83", "105.424, 269.769, 126.065, 0.83", "108.101, 279.608, 131.751, 0.83", "111.526, 288.592, 138.374, 0.83", "116.22, 297.827, 143.759, 0.83", "122.635, 305.042, 150.323, 0.83", "128.64, 313.39, 155.85, 0.83" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 17
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "2.6993, 40.7555, -9.42904, 0.83", "1.98173, 47.842, -16.414, 0.83", "1.85215, 49.7669, -17.7449, 0.83", "1.78485, 51.4003, -18.6765, 0.83", "1.65315, 53.6609, -19.8173, 0.83", "1.49897, 55.6854, -20.8005, 0.83", "1.34097, 57.9411, -21.8282, 0.83", "1.14391, 61.0669, -22.7368, 0.83", "0.987536, 63.8985, -23.5812, 0.83", "0.866217, 66.4599, -24.3249, 0.83", "0.803049, 70.0508, -25.3462, 0.83", "0.856596, 72.1789, -25.9433, 0.83", "0.92721, 74.0047, -26.4013, 0.83", "1.13442, 75.8154, -26.8223, 0.83", "1.51611, 77.8188, -27.247, 0.83", "2.40821, 81.148, -27.9037, 0.83", "2.91359, 82.9427, -28.228, 0.83", "3.27424, 84.3085, -28.5681, 0.83", "4.44215, 88.8356, -29.8699, 0.83", "4.92432, 90.8403, -30.4982, 0.83", "5.334, 92.8935, -31.1752, 0.83", "5.69923, 95.7692, -32.1036, 0.83", "6.11637, 99.6049, -33.3608, 0.83", "6.30358, 101.702, -34.0167, 0.83", "6.31742, 102.627, -34.2761, 0.83", "6.27592, 104.0, -34.6553, 0.83", "6.09822, 107.615, -35.5466, 0.83", "6.0872, 109.231, -35.9256, 0.83", "6.08733, 111.579, -36.4193, 0.83", "6.13147, 114.041, -36.9627, 0.83", "6.19112, 115.868, -37.3608, 0.83", "6.38675, 120.144, -38.2802, 0.83", "6.71468, 124.941, -39.2278, 0.83", "6.8697, 127.005, -39.5923, 0.83", "7.04004, 128.982, -39.9109, 0.83", "7.3389, 131.99, -40.2662, 0.83", "7.65953, 135.581, -40.6036, 0.83", "7.81062, 139.012, -40.8191, 0.83", "7.78873, 140.491, -40.8633, 0.83", "7.67594, 143.664, -40.9548, 0.83", "7.51164, 146.288, -41.037, 0.83", "7.34626, 147.999, -41.0628, 1.11", "6.96593, 151.102, -41.1117, 1.11", "6.49206, 154.099, -41.2087, 1.11", "5.91617, 157.223, -41.2866, 1.11", "5.47871, 159.558, -41.3297, 1.11", "4.98753, 162.513, -41.3679, 0.83", "4.57632, 165.171, -41.3046, 1.38", "4.32142, 167.142, -41.2136, 1.38", "3.93116, 170.304, -41.0231, 0.83", "3.73497, 171.63, -40.9408, 0.83", "3.45079, 173.707, -40.8322, 0.83", "3.01947, 176.561, -41.0375, 1.11", "2.63761, 178.688, -41.499, 1.38", "2.29018, 180.9, -42.2168, 1.38", "2.10876, 182.288, -42.7351, 1.38", "1.87319, 184.625, -43.6246, 0.83", "1.60698, 188.258, -44.9821, 1.38", "1.4064, 190.959, -45.7887, 0.83", "1.21697, 193.759, -46.4574, 0.83", "1.06768, 196.128, -46.8275, 0.83", "0.955302, 198.79, -47.0198, 1.11", "0.853243, 200.187, -46.8846, 1.11", "0.418471, 204.085, -45.9571, 1.11", "0.0275059, 206.592, -45.154, 1.11", "-0.428877, 208.921, -44.2985, 1.11", "-0.795946, 210.577, -43.6668, 1.11", "-1.96159, 215.734, -41.7735, 1.38", "-2.57175, 218.427, -40.9031, 1.11", "-3.04372, 220.692, -40.3292, 1.11", "-3.67775, 223.844, -39.6892, 1.11", "-4.26064, 226.721, -39.2141, 0.83", "-4.89164, 229.943, -38.8135, 0.83", "-5.20037, 231.79, -38.6983, 0.83", "-5.76739, 235.371, -38.4961, 0.83", "-6.3913, 239.099, -38.6527, 0.83", "-6.62183, 240.95, -39.0418, 0.83", "-6.82256, 242.727, -39.6159, 0.83", "-6.95976, 245.01, -40.8171, 0.83", "-6.97865, 246.77, -41.9501, 0.83", "-6.97541, 251.553, -45.4983, 1.11", "-6.89374, 255.92, -49.0918, 1.38", "-6.77887, 258.911, -51.7278, 0.83", "-6.54694, 264.22, -56.725, 0.83", "-6.42464, 265.998, -58.4987, 0.83", "-6.3036, 267.253, -59.7536, 0.83" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "2.6993, 40.7555, -9.42904, 1.38", "2.08412, 47.4956, -6.50056, 1.38", "1.84141, 51.1096, -5.09523, 1.38", "1.7514, 53.7744, -4.17849, 1.38", "1.72971, 57.0277, -3.11146, 1.38", "1.70503, 60.7288, -1.89754, 1.38", "1.68812, 63.2641, -1.06597, 1.38", "1.79426, 66.5463, -0.267609, 1.38", "1.86451, 69.5065, 0.509799, 1.38", "2.01289, 71.81, 1.10519, 1.38" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "11.8632, -47.0935, -13.7509, 0.28", "12.0979, -48.0801, -14.6397, 0.28", "12.5617, -50.0297, -16.3958, 0.83", "13.5897, -54.3519, -20.289, 0.83", "14.8569, -59.6796, -25.088, 0.55", "15.3414, -61.7165, -26.9228, 0.55", "16.0926, -64.8747, -29.7677, 0.83" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "11.8632, -47.0935, -13.7509, 0.83", "13.4237, -49.5188, -15.8342, 0.83", "15.0235, -51.687, -17.7498, 0.83", "17.9858, -55.6156, -21.1305, 0.83", "20.6209, -59.0022, -24.0056, 0.83", "21.3998, -59.9309, -24.8562, 0.83", "24.0437, -62.9599, -27.7921, 0.83", "26.9648, -66.2809, -31.0603, 1.11", "28.9049, -68.4997, -33.2393, 0.83", "32.1524, -71.8663, -36.7763, 0.83", "36.1836, -75.6614, -40.9497, 0.83", "38.9799, -78.2128, -43.8564, 1.38" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "1.72679, 164.679, -128.732, 0.83", "4.11206, 172.13, -136.698, 0.83", "5.77232, 177.539, -142.357, 0.83", "7.44669, 183.515, -149.142, 0.83", "10.4251, 195.49, -162.964, 0.83", "12.4359, 204.483, -173.479, 0.83", "13.6474, 210.769, -180.865, 1.11", "14.3009, 214.34, -185.401, 1.11", "15.603, 223.94, -198.196, 1.11", "15.7415, 225.84, -200.666, 1.11", "15.5254, 230.236, -205.627, 1.11", "15.1968, 233.176, -208.832, 1.11", "13.9688, 240.719, -217.058, 1.11", "13.1314, 244.564, -221.787, 1.11", "12.5315, 247.217, -224.926, 1.11", "10.3563, 256.745, -236.651, 1.11", "9.34212, 260.793, -241.785, 1.11", "8.40337, 264.29, -246.479, 1.11", "5.0712, 273.453, -260.188, 1.11" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "1.72679, 164.679, -128.732, 1.11", "2.01797, 168.339, -128.753, 1.11", "2.29262, 171.18, -128.764, 1.11", "2.6405, 174.812, -128.782, 1.11", "2.90334, 177.455, -128.794, 1.11", "3.36874, 181.052, -129.002, 0.83", "3.85279, 184.14, -129.276, 0.83", "4.3344, 187.006, -129.65, 0.83", "4.59852, 188.292, -129.855, 0.83", "4.85491, 189.523, -130.088, 0.83", "5.76855, 194.188, -130.576, 1.11", "6.32287, 197.015, -130.559, 1.11", "6.72534, 200.859, -129.679, 0.55", "6.74432, 201.866, -129.212, 0.83", "6.44366, 204.036, -127.37, 0.83", "5.35747, 208.737, -122.35, 0.83", "4.86234, 210.545, -120.175, 0.83", "3.92695, 213.997, -115.751, 1.11", "3.67627, 214.997, -114.303, 1.11", "2.43168, 219.735, -107.411, 1.11", "2.20732, 220.608, -106.106, 1.11", "1.85375, 222.07, -104.093, 1.11", "1.4393, 223.733, -101.746, 1.11", "0.975483, 229.237, -94.2463, 1.11" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "2.01289, 71.81, 1.10519, 0.83", "1.39632, 77.0882, -0.248891, 0.83", "0.758976, 80.465, -0.988504, 0.83", "0.321266, 81.933, -1.29642, 0.55", "-0.328869, 83.7194, -1.49589, 1.38", "-2.00746, 88.0356, -1.96274, 1.38", "-2.89853, 90.3698, -2.16809, 1.11", "-3.82874, 92.5362, -2.06691, 1.66", "-5.23214, 95.5061, -1.81773, 0.55", "-6.95375, 99.5306, -1.90245, 1.38", "-8.5911, 103.897, -2.35194, 0.83", "-9.51988, 106.595, -2.71029, 1.38", "-11.0287, 111.374, -3.41626, 1.11", "-11.7176, 113.457, -3.78095, 1.66", "-14.7791, 122.668, -5.6377, 0.83", "-16.417, 127.082, -6.54059, 1.38", "-17.9693, 130.838, -7.2057, 1.11", "-19.4131, 134.085, -7.61433, 1.38", "-20.478, 136.331, -7.72375, 0.55", "-21.6641, 138.675, -7.51183, 0.83", "-23.4679, 141.987, -6.70406, 1.11", "-24.9612, 144.777, -6.03096, 1.38", "-27.2883, 149.405, -5.00496, 1.11", "-28.5093, 152.152, -4.34835, 0.83", "-28.9158, 153.205, -4.10324, 0.83", "-29.7037, 155.356, -3.64932, 0.83", "-30.6158, 157.861, -2.94004, 0.83", "-31.1539, 159.444, -2.33942, 0.83", "-32.2019, 162.844, -0.688111, 0.83", "-32.7526, 164.827, 0.439379, 0.83", "-32.9618, 165.676, 1.02151, 0.83", "-34.2849, 171.737, 5.67913, 0.83", "-34.6707, 173.842, 7.31181, 0.83", "-35.387, 177.812, 10.5539, 0.83", "-35.7239, 179.794, 12.2401, 0.83", "-36.2529, 183.653, 15.6098, 0.83", "-36.3625, 184.829, 16.5788, 0.83", "-36.4209, 187.499, 18.2433, 0.83", "-38.077, 197.76, 19.8065, 0.83", "-39.6297, 207.933, 21.9431, 0.83", "-41.299, 217.77, 25.2496, 0.83", "-42.0485, 228.106, 27.0013, 0.83", "-44.6814, 238.281, 26.9673, 0.83", "-48.3544, 247.951, 25.1011, 0.83", "-50.2394, 258.177, 23.5693, 0.83", "-51.8961, 268.512, 22.6068, 0.83", "-53.1781, 278.801, 20.8887, 0.83" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "2.01289, 71.81, 1.10519, 0.83", "4.0173, 76.6236, 0.103575, 0.83", "6.48979, 83.081, -0.830493, 0.83", "7.24577, 85.1387, -1.0328, 0.83", "8.31442, 88.0439, -1.22024, 0.83", "9.526, 91.3461, -1.34606, 0.83", "11.1313, 95.7743, -1.43617, 0.83", "12.0473, 98.391, -1.28772, 0.83", "13.1994, 101.596, -0.811021, 0.83", "14.2361, 104.306, -0.366611, 0.83", "15.2302, 106.554, 0.041445, 0.83", "15.6892, 107.528, 0.239923, 0.83", "17.2561, 110.768, 0.996844, 0.83", "20.0077, 116.272, 2.50798, 0.83", "20.9419, 118.267, 3.11457, 1.11", "22.8884, 122.6, 4.48897, 1.11", "24.924, 127.273, 5.97431, 1.11", "26.065, 129.96, 6.81098, 1.11", "26.7691, 131.716, 7.33879, 1.11", "28.4839, 136.093, 8.58443, 0.83", "29.7606, 139.413, 9.49754, 0.83", "30.7804, 142.118, 10.1467, 0.83", "31.8793, 144.777, 10.638, 0.83", "32.7266, 146.58, 10.8883, 0.83", "33.4065, 147.933, 11.0531, 0.83", "34.1525, 149.276, 11.1944, 0.83", "35.2776, 151.294, 11.4086, 0.83", "36.4821, 153.386, 11.6411, 0.83", "37.8271, 155.682, 11.9875, 0.83", "39.0564, 157.815, 12.353, 0.83", "39.9945, 159.486, 12.6541, 0.83", "40.8193, 160.975, 12.928, 0.83", "41.6798, 162.433, 13.2027, 0.83", "44.7411, 167.708, 14.1541, 0.55", "45.889, 169.682, 14.496, 0.55", "47.5994, 172.579, 14.9894, 0.55", "49.3854, 175.726, 15.5958, 1.11", "51.5598, 179.72, 16.4233, 0.55", "52.6196, 181.843, 16.9265, 0.55", "53.7872, 184.476, 17.6124, 0.55", "54.255, 185.612, 17.9411, 0.55", "55.7187, 189.287, 18.9885, 0.55", "56.1251, 190.407, 19.332, 0.55", "58.1669, 196.752, 21.3713, 0.55", "59.6074, 201.158, 22.8119, 0.83", "60.038, 202.477, 23.2326, 0.83", "62.2026, 208.964, 25.1771, 1.11", "63.9522, 214.028, 26.5588, 1.11", "65.4838, 218.404, 27.7268, 0.55", "66.2275, 220.521, 28.2492, 0.55", "67.0197, 222.77, 28.7769, 0.55", "67.8762, 225.343, 29.3198, 0.83", "68.5551, 227.517, 29.6953, 0.83", "68.6629, 227.84, 29.7236, 0.28", "69.8602, 231.49, 29.9082, 0.28", "70.3724, 233.363, 29.9786, 0.83", "70.9195, 235.804, 30.1234, 0.83", "71.2682, 237.485, 30.2634, 0.83", "71.5662, 238.859, 30.2931, 0.83", "72.0322, 241.008, 30.2442, 0.83", "72.5742, 243.023, 30.1589, 0.83", "73.4555, 245.892, 30.0148, 0.83", "74.9488, 250.319, 29.7752, 0.55", "76.5941, 254.924, 29.5174, 0.55", "77.8957, 258.376, 29.3294, 1.38", "79.5929, 262.69, 29.1044, 0.55", "80.8436, 265.679, 28.965, 0.55", "81.577, 267.386, 28.8964, 0.55", "82.2077, 268.965, 28.8975, 0.83", "83.1109, 271.595, 29.0468, 0.83", "83.8079, 273.966, 29.1486, 0.83", "84.1958, 275.649, 29.1947, 0.83", "84.9301, 278.512, 29.2907, 0.83", "85.4916, 280.496, 29.3698, 0.83", "86.2398, 282.789, 29.4849, 0.83", "87.1107, 285.104, 29.6285, 0.83", "87.9492, 287.121, 29.7726, 0.83", "89.8241, 291.633, 30.0948, 0.83", "91.7736, 295.998, 30.4388, 0.83", "92.6811, 297.841, 30.6041, 0.83", "93.7085, 299.771, 30.7956, 0.83", "94.6582, 301.536, 30.9731, 0.83", "96.1228, 304.335, 31.2448, 0.83", "101.844, 314.896, 34.4122, 0.83" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_31",
    "id" : "dend_31",
    "points3d" : [ "16.0926, -64.8747, -29.7677, 0.55", "16.2648, -65.3825, -31.6178, 0.55", "16.3783, -65.7588, -32.8485, 0.55", "16.8229, -66.9645, -36.8898, 0.83", "16.9966, -67.56, -38.8843, 0.28", "17.1026, -67.9944, -40.3008, 0.55", "17.6633, -69.9092, -46.0026, 0.28", "17.7963, -70.343, -47.2437, 0.83", "18.3397, -72.21, -52.1786, 0.55", "18.4588, -72.721, -53.361, 0.55", "18.6738, -73.6035, -55.4107, 0.55", "19.1886, -75.346, -59.6889, 0.55", "19.4583, -76.1803, -61.8796, 0.55", "19.7793, -76.8095, -63.7824, 0.55", "20.0914, -77.3508, -65.518, 0.28", "21.1465, -78.8189, -70.6773, 0.83", "22.4345, -80.3961, -76.8109, 0.55", "23.4425, -81.4925, -81.5101, 0.55", "24.474, -82.4868, -85.9678, 0.28", "24.7972, -82.7933, -87.4135, 0.55", "25.7951, -83.7538, -91.948, 0.28", "26.0429, -84.0186, -93.0888, 0.55", "26.3758, -84.4892, -94.8502, 0.28", "26.5388, -84.8172, -95.7874, 0.55", "26.9376, -85.8472, -98.0737, 0.28", "27.0969, -86.2198, -98.7867, 0.55", "27.5038, -87.1146, -100.151, 0.28", "27.7656, -87.5406, -100.732, 0.55", "28.8234, -88.9619, -102.41, 0.28", "29.5461, -89.8211, -103.358, 0.55", "30.1626, -90.511, -104.09, 0.28", "31.3191, -91.8037, -105.441, 0.55", "32.3259, -92.9695, -106.742, 0.28", "33.0154, -93.8116, -107.754, 0.55", "33.8426, -95.04, -109.299, 0.28", "34.2913, -95.8293, -110.39, 0.55", "34.7259, -96.7518, -111.668, 0.28", "35.3362, -98.3734, -113.916, 0.55", "35.9799, -100.457, -116.778, 0.28", "36.3386, -101.769, -118.649, 0.55", "36.8758, -103.923, -121.615, 0.28", "37.0405, -104.525, -122.481, 0.55", "37.319, -105.551, -124.007, 0.28", "37.6464, -106.609, -125.592, 0.55", "38.2452, -108.504, -128.494, 0.83", "38.4957, -109.172, -129.603, 0.83", "39.3864, -111.699, -133.823, 0.28", "39.5263, -112.054, -134.481, 0.55", "39.9508, -113.178, -136.596, 0.28", "40.2912, -113.922, -138.082, 0.55", "40.936, -115.271, -140.719, 0.28", "41.4084, -116.194, -142.538, 0.83", "42.5578, -118.595, -146.781, 0.28", "42.9188, -119.342, -147.998, 0.83", "44.071, -121.912, -151.711, 0.28", "44.2911, -122.392, -152.29, 0.55", "44.4897, -122.821, -152.713, 0.28", "45.1697, -124.224, -153.86, 0.28", "45.4215, -125.226, -153.963, 0.55", "45.5413, -126.995, -153.445, 0.28", "45.2732, -128.944, -152.3, 0.55" ],
    "parent" : "dend_29",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "16.0926, -64.8747, -29.7677, 0.55", "16.8161, -68.073, -29.3597, 0.55", "17.4132, -70.2494, -29.0215, 0.55", "17.5058, -70.5522, -28.9689, 0.28", "18.4082, -73.3011, -28.4542, 0.55", "19.3587, -76.4173, -27.8826, 0.55", "19.6555, -77.3853, -27.713, 0.28", "20.1737, -79.1029, -27.416, 0.55", "20.4775, -80.3979, -27.2652, 0.28", "20.7637, -81.7019, -27.1745, 0.55", "21.1027, -83.3424, -27.1387, 0.28", "21.767, -87.0107, -27.2336, 0.55", "21.9678, -88.3334, -27.3063, 0.28", "22.1965, -90.0899, -27.4307, 0.55", "22.3745, -91.6821, -27.5441, 0.28", "22.448, -92.1371, -27.5929, 0.55", "22.9565, -94.7384, -27.9068, 0.28", "23.3571, -96.6489, -28.1801, 0.55", "23.7932, -98.5216, -28.4486, 0.55", "24.5433, -101.893, -28.9237, 0.55", "25.1753, -105.354, -29.4667, 0.55", "25.5851, -107.631, -29.9197, 0.55", "25.9537, -109.427, -30.3647, 0.28", "26.1191, -110.097, -30.5952, 0.55", "26.4276, -111.188, -31.0293, 0.28", "26.9104, -112.606, -31.6286, 0.55", "27.6535, -114.769, -32.5431, 0.28", "29.2326, -118.936, -34.4123, 0.55", "30.8582, -123.066, -36.238, 0.28", "31.2107, -123.883, -36.6122, 0.55", "31.9882, -125.622, -37.4203, 0.28", "32.3318, -126.402, -37.7427, 0.55", "32.6212, -127.224, -38.0064, 0.28", "33.0934, -128.728, -38.3822, 0.55", "33.6371, -131.07, -38.7719, 0.28", "33.9136, -132.653, -39.0491, 0.55", "34.1298, -134.926, -39.4665, 0.28", "34.2824, -137.542, -40.0826, 0.28", "34.3329, -140.37, -40.8868, 0.55", "34.247, -143.543, -41.9424, 0.55", "34.1115, -145.989, -42.8911, 0.28", "34.0506, -148.471, -44.0623, 0.55", "34.0109, -151.132, -45.4571, 0.55", "34.0187, -152.941, -46.4562, 0.28", "34.1117, -155.278, -47.7155, 0.28", "34.4262, -159.092, -49.5635, 0.55", "34.9634, -163.696, -51.4291, 0.28", "35.3304, -166.31, -52.2681, 0.83", "35.5415, -167.708, -52.6021, 0.55", "36.1223, -171.691, -53.337, 0.28", "36.6169, -175.584, -53.7027, 0.55", "36.9199, -178.491, -53.5999, 0.28", "37.065, -180.43, -53.3211, 0.55", "37.1541, -182.208, -52.9402, 0.28", "37.1681, -184.007, -52.4619, 0.55", "37.0629, -186.794, -51.6447, 0.28", "37.0174, -189.406, -51.1659, 0.28", "37.0132, -190.376, -51.0527, 0.55", "37.0502, -193.119, -50.92, 0.28", "37.094, -194.586, -50.9756, 0.55", "37.379, -197.923, -51.4944, 0.28", "37.8944, -202.297, -52.8444, 0.55", "38.0679, -203.674, -53.4063, 0.28", "38.3675, -205.194, -54.1923, 0.55", "38.9058, -207.173, -55.3514, 0.28", "39.7138, -209.641, -56.8749, 0.55", "40.4785, -211.865, -58.2549, 0.28", "40.866, -213.083, -58.9216, 0.55", "41.9108, -216.411, -60.5605, 0.28", "42.7872, -218.911, -61.759, 0.83", "43.3947, -220.657, -62.5156, 0.28", "43.8569, -222.298, -63.2287, 0.55", "44.1184, -223.54, -63.7778, 0.28", "44.4789, -225.501, -64.6671, 0.55", "45.0317, -230.321, -66.8981, 0.28", "45.1315, -231.327, -67.4791, 0.55", "45.4413, -234.766, -69.7787, 0.28", "45.5981, -236.115, -70.8584, 0.55" ],
    "parent" : "dend_29",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "38.9799, -78.2128, -43.8564, 0.55", "40.9904, -81.3613, -46.4906, 0.55", "41.4371, -82.1572, -47.0844, 0.83", "42.4902, -84.4569, -48.8033, 0.28", "43.1153, -85.874, -49.9431, 0.55", "43.8598, -87.5385, -51.3417, 0.28", "44.3706, -88.8969, -52.5474, 0.55", "44.7581, -90.0805, -53.6061, 0.28", "45.3128, -92.0669, -55.4134, 0.55", "45.7337, -93.8909, -57.1069, 0.28", "46.1515, -95.244, -58.5786, 0.55", "47.0162, -97.8667, -61.8079, 0.55", "47.6453, -99.3568, -63.8798, 0.55", "48.1558, -100.368, -65.3786, 0.28", "49.3708, -102.26, -68.4159, 0.55", "51.4823, -105.14, -73.2522, 0.83", "52.4786, -106.285, -75.3833, 0.55", "54.1814, -107.886, -78.557, 0.28", "54.6518, -108.304, -79.3886, 0.83", "56.9082, -110.233, -83.0353, 0.28", "57.4921, -110.762, -83.9031, 0.55", "59.1666, -112.511, -86.1753, 0.28", "60.2505, -113.739, -87.5181, 0.55", "61.3325, -115.237, -88.87, 0.28", "62.0948, -116.5, -89.7241, 0.55", "62.8921, -118.328, -90.4328, 0.28", "63.2904, -119.49, -90.6373, 0.55", "63.6126, -120.64, -90.5616, 0.28", "63.8828, -121.915, -90.327, 0.55", "64.4208, -124.363, -89.555, 0.28", "64.6206, -125.104, -89.3534, 0.55", "65.2762, -127.372, -88.8487, 0.28", "65.6581, -128.451, -88.8659, 0.55", "66.1806, -129.747, -89.1825, 0.28", "66.59, -130.69, -89.6553, 0.55", "67.8453, -133.59, -91.3427, 0.28", "68.2591, -134.452, -91.8992, 0.83", "69.5811, -137.153, -93.7912, 0.28", "70.0127, -138.064, -94.4302, 0.55", "70.8356, -139.858, -95.6952, 0.28", "72.0104, -142.68, -97.5357, 0.55", "73.2502, -145.927, -99.353, 0.28", "73.6127, -146.986, -99.865, 0.55", "74.1283, -148.671, -100.547, 0.28", "74.686, -150.461, -101.282, 0.55", "75.0798, -151.739, -101.79, 0.28", "75.3045, -152.488, -102.132, 0.55", "75.7716, -154.234, -102.774, 0.28", "76.4963, -156.655, -103.52, 0.83", "77.227, -158.935, -104.125, 0.28", "77.806, -160.699, -104.529, 0.28", "78.373, -162.471, -104.919, 0.28", "78.9072, -164.412, -105.316, 0.55", "79.2355, -165.811, -105.558, 0.28", "79.2818, -166.072, -105.576, 0.55", "79.6518, -168.38, -105.784, 0.28", "80.0181, -170.899, -106.162, 0.28", "80.2662, -172.287, -106.423, 0.55", "80.4436, -173.08, -106.637, 0.28", "80.8259, -174.599, -107.084, 0.55", "81.6192, -177.435, -107.882, 0.28", "81.8547, -178.131, -108.057, 0.55", "82.2687, -179.224, -108.295, 0.28", "82.4776, -179.716, -108.356, 0.55", "82.9697, -180.987, -108.402, 0.28", "83.326, -182.121, -108.325, 0.55", "83.5846, -183.185, -108.17, 0.28", "83.6479, -183.439, -108.132, 0.55", "84.0168, -185.17, -107.909, 0.28", "84.2951, -186.478, -107.743, 0.55", "84.8016, -188.871, -107.442, 0.28", "85.0661, -190.016, -107.286, 0.83", "85.405, -191.52, -107.085, 0.28", "85.7417, -193.012, -106.882, 0.55", "86.0155, -194.412, -106.712, 0.28", "86.305, -195.702, -106.533, 0.55", "86.5165, -196.629, -106.399, 0.28", "86.688, -197.449, -106.289, 0.55", "87.0967, -199.791, -106.015, 0.28", "87.3052, -201.093, -105.85, 0.55", "87.5029, -202.995, -105.681, 0.28", "87.6178, -203.817, -105.728, 0.55", "87.7818, -205.138, -105.99, 0.28", "87.8111, -205.405, -106.045, 0.55", "87.9403, -206.536, -106.316, 0.28", "88.1644, -207.745, -106.715, 0.55", "88.8866, -211.206, -108.063, 0.28", "89.4734, -213.6, -109.078, 0.55", "90.1001, -216.098, -110.198, 0.28", "90.3315, -217.091, -110.61, 0.55", "90.9881, -220.293, -111.842, 0.28", "91.2922, -222.157, -112.392, 0.55", "91.4311, -223.63, -112.699, 0.28", "91.5087, -224.581, -112.857, 0.55", "91.705, -227.312, -113.134, 0.28", "91.828, -228.87, -113.199, 0.55", "91.991, -231.094, -113.175, 0.28", "92.1875, -232.636, -113.132, 0.55", "92.4694, -234.498, -113.059, 0.28", "92.864, -236.851, -113.002, 0.55", "93.3977, -239.79, -112.955, 0.28", "93.943, -242.617, -112.881, 0.55", "94.3874, -244.948, -112.821, 0.28", "94.7888, -247.085, -112.711, 0.55", "94.9778, -248.199, -112.628, 0.28", "95.2151, -249.854, -112.426, 0.55", "95.5707, -252.181, -111.955, 0.28", "95.6852, -252.765, -111.824, 0.55", "96.0897, -254.637, -111.412, 0.28", "96.3175, -255.434, -111.227, 0.55", "96.6045, -256.496, -111.01, 0.28", "96.8873, -257.847, -110.811, 0.55", "96.9575, -258.463, -110.759, 0.28", "96.9575, -259.256, -110.746, 0.55", "96.2684, -263.186, -111.092, 0.28", "95.8329, -265.001, -111.314, 0.55", "95.4277, -266.257, -111.522, 0.28", "94.8993, -267.484, -111.774, 0.55", "94.1473, -268.864, -112.13, 0.28", "93.0025, -270.251, -112.707, 0.55" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "38.9799, -78.2128, -43.8564, 0.28", "39.6914, -78.6419, -44.5612, 0.28", "40.3847, -79.0369, -45.1979, 0.55", "40.7161, -79.1882, -45.512, 0.28", "41.004, -79.3165, -45.7811, 0.55", "43.825, -80.618, -48.3918, 0.28", "44.2572, -80.8231, -48.7762, 0.55", "45.4396, -81.4331, -49.8346, 0.55", "46.6407, -82.0864, -50.9071, 0.55", "47.9857, -82.872, -52.0475, 0.83", "48.9621, -83.477, -52.7832, 0.28", "49.9437, -84.1159, -53.3544, 0.55", "51.0515, -84.8902, -53.9539, 0.55", "52.2157, -85.8373, -54.504, 0.28", "52.7941, -86.3449, -54.7326, 0.55", "53.7894, -87.1943, -55.0347, 0.28", "54.3548, -87.6367, -55.1883, 0.55", "55.6302, -88.596, -55.5421, 0.28", "56.2824, -89.0465, -55.7355, 0.55", "57.2527, -89.6668, -55.9958, 0.28", "58.6952, -90.5549, -56.3967, 0.83", "61.1995, -92.0772, -57.111, 0.28", "62.2658, -92.6904, -57.4265, 0.55", "64.0891, -93.6537, -57.9495, 0.28", "64.8181, -94.0178, -58.1708, 0.55" ],
    "parent" : "dend_24",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "64.8181, -94.0178, -58.1708, 0.28", "66.0668, -94.8869, -58.5955, 0.28", "66.4935, -95.1029, -58.7813, 0.55", "68.4491, -95.9517, -59.5698, 0.28", "69.9436, -96.6104, -60.1125, 0.55", "71.5916, -97.3784, -60.8014, 0.28", "71.9795, -97.566, -60.9697, 0.55", "75.1793, -99.0608, -62.6024, 0.28", "76.824, -99.7601, -63.5473, 0.55", "78.6162, -100.523, -64.6954, 0.28", "81.1763, -101.654, -66.4561, 0.55", "83.06, -102.581, -67.8687, 0.55", "86.4973, -104.421, -70.5175, 0.55", "89.1045, -105.879, -72.5436, 0.55", "91.1833, -107.063, -74.1704, 0.28", "92.3412, -107.701, -75.0322, 0.55", "95.7418, -109.616, -77.3581, 0.28", "96.9886, -110.333, -78.1775, 0.83", "99.7904, -111.898, -79.7991, 0.28", "100.511, -112.3, -80.189, 0.55", "101.666, -112.879, -80.82, 0.55", "104.418, -114.171, -82.5032, 0.55", "105.46, -114.595, -83.2468, 0.55", "107.556, -115.479, -84.9723, 0.28", "108.825, -116.002, -86.1335, 0.55", "111.454, -117.079, -88.5697, 0.28", "113.448, -117.953, -90.4286, 0.55", "118.006, -119.972, -94.6756, 0.28", "119.504, -120.691, -96.1382, 0.55", "123.774, -122.831, -100.426, 0.28", "125.463, -123.665, -102.118, 0.55", "127.445, -124.652, -104.023, 0.55", "130.155, -126.062, -106.53, 0.28", "133.52, -127.891, -109.556, 0.55", "134.552, -128.47, -110.481, 0.55", "137.772, -130.422, -113.383, 0.28", "138.581, -130.913, -114.143, 0.55", "140.306, -131.933, -115.77, 0.28", "141.533, -132.723, -116.852, 0.55", "142.781, -133.557, -117.873, 0.28", "144.139, -134.557, -118.966, 0.55", "145.932, -136.035, -120.29, 0.28", "147.249, -137.172, -121.134, 0.55", "149.815, -139.589, -122.425, 0.28", "151.724, -140.957, -123.154, 0.55", "152.979, -141.757, -123.512, 0.28", "154.062, -142.413, -123.691, 0.55", "155.118, -143.001, -123.794, 0.28", "157.436, -144.121, -124.219, 0.55", "162.099, -145.835, -125.847, 0.55" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "64.8181, -94.0178, -58.1708, 0.55", "65.9889, -93.6836, -57.1061, 0.55", "68.219, -93.1402, -55.2697, 0.55", "69.4038, -92.8736, -54.287, 0.28", "70.7623, -92.5746, -53.1126, 0.83", "71.6956, -92.4029, -52.366, 0.28", "72.8581, -92.2111, -51.4833, 0.28", "73.4013, -92.1477, -51.1143, 0.55", "75.043, -92.0898, -50.0845, 0.28", "75.9481, -92.0835, -49.5407, 0.55", "77.4073, -92.1548, -48.6323, 0.28", "77.5919, -92.1691, -48.5202, 0.55", "79.3601, -92.2941, -47.1736, 0.28", "80.3897, -92.3643, -46.4219, 0.55", "81.9522, -92.4332, -45.3425, 0.28", "82.6793, -92.4363, -44.8269, 0.55", "84.0902, -92.3187, -43.7823, 0.28", "86.3668, -91.9834, -42.0314, 0.28", "87.7679, -91.6518, -41.0109, 0.55", "88.2586, -91.4747, -40.7141, 0.28", "88.4372, -91.3914, -40.6336, 0.55", "89.7964, -90.545, -40.1108, 0.55", "91.0353, -89.5973, -39.7564, 0.28", "91.7583, -88.9455, -39.591, 0.55", "93.1001, -87.5918, -39.224, 0.28", "93.6919, -86.9899, -39.0726, 0.55", "94.461, -86.1721, -38.8952, 0.28", "95.4256, -85.0646, -38.7133, 0.55", "96.6506, -83.6439, -38.5448, 0.28", "97.4262, -82.6821, -38.3001, 0.55" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_15", "dend_0", "dend_33", "dend_16", "dend_14", "dend_1", "dend_35", "dend_34", "dend_20", "dend_17", "dend_2", "dend_37", "dend_36", "dend_32", "dend_21", "dend_19", "dend_18", "dend_9", "dend_3", "dend_23", "dend_22", "dend_13", "dend_10", "dend_8", "dend_7", "dend_4", "dend_29", "dend_24", "dend_12", "dend_11", "dend_6", "dend_5", "dend_31", "dend_30", "dend_28", "dend_25", "dend_27", "dend_26" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_15", "dend_0", "dend_33", "dend_16", "dend_14", "dend_1", "dend_35", "dend_34", "dend_20", "dend_17", "dend_2", "dend_37", "dend_36", "dend_32", "dend_21", "dend_19", "dend_18", "dend_9", "dend_3", "dend_23", "dend_22", "dend_13", "dend_10", "dend_8", "dend_7", "dend_4", "dend_29", "dend_24", "dend_12", "dend_11", "dend_6", "dend_5", "dend_31", "dend_30", "dend_28", "dend_25", "dend_27", "dend_26" ]
  }, {
    "name" : "ModelViewParmSubset_5",
    "groups" : [ ],
    "sections" : [ "dend_15", "dend_0", "axon_0", "dend_33", "dend_16", "dend_14", "dend_1", "axon_1", "dend_35", "dend_34", "dend_20", "dend_17", "dend_2", "dend_37", "dend_36", "dend_32", "dend_21", "dend_19", "dend_18", "dend_9", "dend_3", "dend_23", "dend_22", "dend_13", "dend_10", "dend_8", "dend_7", "dend_4", "dend_29", "dend_24", "dend_12", "dend_11", "dend_6", "dend_5", "dend_31", "dend_30", "dend_28", "dend_25", "dend_27", "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_33" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_35" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_34" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_32" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_35",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_36",
    "groups" : [ ],
    "sections" : [ "dend_31" ]
  }, {
    "name" : "OneSecGrp_SectionRef_37",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_38",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_40",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_41",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_39",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_37" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_36" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30", "dend_31", "dend_32", "dend_33", "dend_34", "dend_35", "dend_36", "dend_37" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_15", "dend_15", "dend_15", "dend_0", "dend_0", "axon_0", "axon_0", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_33", "dend_16", "dend_16", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_1", "dend_1", "axon_1", "axon_1", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_35", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_34", "dend_20", "dend_20", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_2", "dend_2", "dend_2", "dend_2", "dend_37", "dend_37", "dend_37", "dend_37", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_36", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_32", "dend_21", "dend_21", "dend_21", "dend_21", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_9", "dend_9", "dend_3", "dend_3", "dend_23", "dend_23", "dend_23", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_31", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.993125",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.005611",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.068459995",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.517764",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "6.3E-5",
    "erev" : "-64.6017"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "3.45E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.077616",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.002099",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "1.13999995E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.26087198",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "2.0E-5",
    "erev" : "-69.78141"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.395881",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009986",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "5.0100003E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.009728",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "2.7999999E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cACint209_L23_DBC_2907e308d8_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_15, id: dend_15, parent: soma_0
create dend_15
public dend_15
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_33, id: dend_33, parent: dend_15
create dend_33
public dend_33
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_14, id: dend_14, parent: dend_0
create dend_14
public dend_14
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_35, id: dend_35, parent: dend_33
create dend_35
public dend_35
// Section: dend_34, id: dend_34, parent: dend_33
create dend_34
public dend_34
// Section: dend_20, id: dend_20, parent: dend_16
create dend_20
public dend_20
// Section: dend_17, id: dend_17, parent: dend_16
create dend_17
public dend_17
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_37, id: dend_37, parent: dend_35
create dend_37
public dend_37
// Section: dend_36, id: dend_36, parent: dend_35
create dend_36
public dend_36
// Section: dend_32, id: dend_32, parent: dend_20
create dend_32
public dend_32
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_9, id: dend_9, parent: dend_2
create dend_9
public dend_9
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_23, id: dend_23, parent: dend_21
create dend_23
public dend_23
// Section: dend_22, id: dend_22, parent: dend_21
create dend_22
public dend_22
// Section: dend_13, id: dend_13, parent: dend_9
create dend_13
public dend_13
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10
// Section: dend_8, id: dend_8, parent: dend_3
create dend_8
public dend_8
// Section: dend_7, id: dend_7, parent: dend_3
create dend_7
public dend_7
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_29, id: dend_29, parent: dend_23
create dend_29
public dend_29
// Section: dend_24, id: dend_24, parent: dend_23
create dend_24
public dend_24
// Section: dend_12, id: dend_12, parent: dend_10
create dend_12
public dend_12
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_6, id: dend_6, parent: dend_4
create dend_6
public dend_6
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5
// Section: dend_31, id: dend_31, parent: dend_29
create dend_31
public dend_31
// Section: dend_30, id: dend_30, parent: dend_29
create dend_30
public dend_30
// Section: dend_28, id: dend_28, parent: dend_24
create dend_28
public dend_28
// Section: dend_25, id: dend_25, parent: dend_24
create dend_25
public dend_25
// Section: dend_27, id: dend_27, parent: dend_25
create dend_27
public dend_27
// Section: dend_26, id: dend_26, parent: dend_25
create dend_26
public dend_26

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_15, dend_0, dend_33, dend_16, dend_14, dend_1, dend_35, dend_34, dend_20, dend_17, dend_2, dend_37, dend_36, dend_32, dend_21, dend_19, dend_18, dend_9, dend_3, dend_23, dend_22, dend_13, dend_10, dend_8, dend_7, dend_4, dend_29, dend_24, dend_12, dend_11, dend_6, dend_5, dend_31, dend_30, dend_28, dend_25, dend_27, dend_26]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_15, dend_0, dend_33, dend_16, dend_14, dend_1, dend_35, dend_34, dend_20, dend_17, dend_2, dend_37, dend_36, dend_32, dend_21, dend_19, dend_18, dend_9, dend_3, dend_23, dend_22, dend_13, dend_10, dend_8, dend_7, dend_4, dend_29, dend_24, dend_12, dend_11, dend_6, dend_5, dend_31, dend_30, dend_28, dend_25, dend_27, dend_26]}
objref ModelViewParmSubset_4
// Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_15, dend_0, axon_0, dend_33, dend_16, dend_14, dend_1, axon_1, dend_35, dend_34, dend_20, dend_17, dend_2, dend_37, dend_36, dend_32, dend_21, dend_19, dend_18, dend_9, dend_3, dend_23, dend_22, dend_13, dend_10, dend_8, dend_7, dend_4, dend_29, dend_24, dend_12, dend_11, dend_6, dend_5, dend_31, dend_30, dend_28, dend_25, dend_27, dend_26]}
objref ModelViewParmSubset_5
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_33]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_35]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_34]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_32]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_35
// Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_31]}
objref OneSecGrp_SectionRef_36
// Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_37
// Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_38
// Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_40
// Group: {name=OneSecGrp_SectionRef_41, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_41
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_39
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_37]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_36]}
objref OneSecGrp_SectionRef_16
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36, dend_37], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_15, dend_15, dend_15, dend_0, dend_0, axon_0, axon_0, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_16, dend_16, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_1, dend_1, axon_1, axon_1, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_20, dend_20, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_2, dend_2, dend_2, dend_2, dend_37, dend_37, dend_37, dend_37, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_21, dend_21, dend_21, dend_21, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_9, dend_9, dend_3, dend_3, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_15(0), soma_0(0.4999996983969059)
    connect dend_0(0), soma_0(0.4999996983969059)
    connect axon_0(0), soma_0(1.0)
    connect dend_33(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_14(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_35(0), dend_33(1.0)
    connect dend_34(0), dend_33(1.0)
    connect dend_20(0), dend_16(1.0)
    connect dend_17(0), dend_16(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_37(0), dend_35(1.0)
    connect dend_36(0), dend_35(1.0)
    connect dend_32(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_9(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_23(0), dend_21(1.0)
    connect dend_22(0), dend_21(1.0)
    connect dend_13(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)
    connect dend_8(0), dend_3(1.0)
    connect dend_7(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_29(0), dend_23(1.0)
    connect dend_24(0), dend_23(1.0)
    connect dend_12(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_6(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)
    connect dend_31(0), dend_29(1.0)
    connect dend_30(0), dend_29(1.0)
    connect dend_28(0), dend_24(1.0)
    connect dend_25(0), dend_24(1.0)
    connect dend_27(0), dend_25(1.0)
    connect dend_26(0), dend_25(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -1.10046, -10.7769, 0.0, 1.2583 ) }
    soma_0 { pt3dadd( -0.977881, -9.66658, 0.0, 1.27734 ) }
    soma_0 { pt3dadd( -0.855301, -8.55625, 0.0, 1.93125 ) }
    soma_0 { pt3dadd( -0.732721, -7.44592, 0.0, 2.73299 ) }
    soma_0 { pt3dadd( -0.610142, -6.33559, 0.0, 3.81421 ) }
    soma_0 { pt3dadd( -0.487562, -5.22526, 0.0, 4.86299 ) }
    soma_0 { pt3dadd( -0.364982, -4.11493, 0.0, 5.49704 ) }
    soma_0 { pt3dadd( -0.242403, -3.0046, 0.0, 6.12703 ) }
    soma_0 { pt3dadd( -0.119823, -1.89427, 0.0, 6.84433 ) }
    soma_0 { pt3dadd( 0.00275685, -0.783937, 0.0, 7.36999 ) }
    soma_0 { pt3dadd( 0.125337, 0.326393, 0.0, 7.59231 ) }
    soma_0 { pt3dadd( 0.247916, 1.43672, 0.0, 7.67062 ) }
    soma_0 { pt3dadd( 0.370496, 2.54705, 0.0, 7.50992 ) }
    soma_0 { pt3dadd( 0.493076, 3.65738, 0.0, 7.33464 ) }
    soma_0 { pt3dadd( 0.615655, 4.76771, 0.0, 7.00391 ) }
    soma_0 { pt3dadd( 0.738235, 5.87804, 0.0, 6.54709 ) }
    soma_0 { pt3dadd( 0.860815, 6.98838, 0.0, 5.62524 ) }
    soma_0 { pt3dadd( 0.983394, 8.09871, 0.0, 4.30117 ) }
    soma_0 { pt3dadd( 1.10597, 9.20904, 0.0, 3.55313 ) }
    soma_0 { pt3dadd( 1.22855, 10.3194, 0.0, 2.60096 ) }
    soma_0 { pt3dadd( 1.35113, 11.4297, 0.0, 1.60168 ) }
    // Section: dend_15, id: dend_15, parent: soma_0 (entry count 21/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -0.382575, -10.9767, -3.38, 1.94 ) }
    dend_15 { pt3dadd( 0.415017, -14.7864, -3.38, 1.94 ) }
    dend_15 { pt3dadd( 1.11631, -18.136, -3.38, 1.94 ) }
    dend_15 { pt3dadd( 1.41603, -19.5676, -3.38, 3.6 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 25/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 2.29743, 11.5533, -4.34, 1.66 ) }
    dend_0 { pt3dadd( 2.38154, 15.4082, -3.98104, 1.66 ) }
    dend_0 { pt3dadd( 2.42946, 17.6044, -3.77654, 1.66 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 28/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 1.35113, 11.4297, 0.0, 0.55 ) }
    axon_0 { pt3dadd( 2.99712, 26.3391, 0.0, 0.55 ) }
    axon_0 { pt3dadd( 4.64311, 41.2485, 0.0, 0.55 ) }
    // Section: dend_33, id: dend_33, parent: dend_15 (entry count 31/100)
    dend_33 { pt3dclear() }
    dend_33 { pt3dadd( 1.41603, -19.5676, -3.38, 0.83 ) }
    dend_33 { pt3dadd( 3.75004, -20.9223, -3.32361, 0.83 ) }
    dend_33 { pt3dadd( 6.09191, -22.2192, -3.25349, 0.83 ) }
    dend_33 { pt3dadd( 8.703, -23.6571, -3.16053, 0.83 ) }
    dend_33 { pt3dadd( 11.5272, -25.0443, -3.04764, 0.83 ) }
    dend_33 { pt3dadd( 14.7631, -26.5978, -2.90905, 0.83 ) }
    dend_33 { pt3dadd( 16.4302, -27.389, -2.83344, 0.83 ) }
    dend_33 { pt3dadd( 19.0581, -28.6126, -2.6978, 0.83 ) }
    dend_33 { pt3dadd( 21.9385, -29.8082, -2.38225, 0.83 ) }
    dend_33 { pt3dadd( 24.2869, -30.7011, -1.98033, 0.83 ) }
    dend_33 { pt3dadd( 26.1007, -31.4494, -1.56696, 0.83 ) }
    dend_33 { pt3dadd( 27.8854, -32.2259, -1.09562, 0.83 ) }
    dend_33 { pt3dadd( 28.2819, -32.4246, -1.00889, 0.83 ) }
    dend_33 { pt3dadd( 31.5404, -34.2659, -0.44903, 0.83 ) }
    dend_33 { pt3dadd( 34.7654, -36.2004, 0.0981773, 0.83 ) }
    dend_33 { pt3dadd( 37.1084, -37.74, 0.467799, 0.83 ) }
    dend_33 { pt3dadd( 38.6877, -38.7578, 0.675527, 0.83 ) }
    dend_33 { pt3dadd( 41.8782, -40.9215, 0.929496, 1.11 ) }
    dend_33 { pt3dadd( 44.383, -42.7375, 0.890834, 1.11 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 50/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 1.41603, -19.5676, -3.38, 1.94 ) }
    dend_16 { pt3dadd( 0.884021, -24.6286, -1.13118, 1.94 ) }
    dend_16 { pt3dadd( 0.575306, -27.5655, 0.17378, 2.22 ) }
    // Section: dend_14, id: dend_14, parent: dend_0 (entry count 53/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 2.42946, 17.6044, -3.77654, 0.83 ) }
    dend_14 { pt3dadd( 0.855449, 18.9482, -4.96033, 0.83 ) }
    dend_14 { pt3dadd( 0.181455, 19.6138, -5.43979, 0.83 ) }
    dend_14 { pt3dadd( -0.816138, 20.738, -6.12586, 0.83 ) }
    dend_14 { pt3dadd( -1.78761, 21.9356, -6.77224, 0.83 ) }
    dend_14 { pt3dadd( -2.73324, 23.3371, -7.40262, 0.83 ) }
    dend_14 { pt3dadd( -3.32657, 24.2717, -7.79332, 0.83 ) }
    dend_14 { pt3dadd( -4.03255, 25.6309, -8.20188, 0.83 ) }
    dend_14 { pt3dadd( -4.60057, 26.9966, -8.54627, 0.83 ) }
    dend_14 { pt3dadd( -5.20535, 28.8101, -8.93362, 0.83 ) }
    dend_14 { pt3dadd( -5.84449, 31.0083, -9.35921, 0.83 ) }
    dend_14 { pt3dadd( -6.19189, 32.2477, -9.5931, 0.83 ) }
    dend_14 { pt3dadd( -6.97187, 35.1493, -10.1251, 0.83 ) }
    dend_14 { pt3dadd( -7.38002, 36.8254, -10.4125, 0.83 ) }
    dend_14 { pt3dadd( -7.61479, 37.8438, -10.581, 0.83 ) }
    dend_14 { pt3dadd( -8.05625, 39.8605, -10.9036, 0.83 ) }
    dend_14 { pt3dadd( -8.36929, 41.1867, -11.1264, 0.83 ) }
    dend_14 { pt3dadd( -8.79903, 43.0265, -11.4334, 0.83 ) }
    dend_14 { pt3dadd( -9.23778, 44.5193, -11.7246, 0.83 ) }
    dend_14 { pt3dadd( -9.77239, 46.0687, -12.064, 0.83 ) }
    dend_14 { pt3dadd( -10.3168, 47.4418, -12.3978, 0.83 ) }
    dend_14 { pt3dadd( -10.6675, 48.2449, -12.6081, 0.83 ) }
    dend_14 { pt3dadd( -10.9656, 48.8579, -12.7828, 0.83 ) }
    dend_14 { pt3dadd( -11.6836, 50.1091, -13.1908, 0.55 ) }
    dend_14 { pt3dadd( -13.0796, 52.4568, -13.9791, 1.11 ) }
    dend_14 { pt3dadd( -13.9815, 54.0174, -14.4909, 1.11 ) }
    dend_14 { pt3dadd( -15.0904, 56.043, -15.1263, 1.11 ) }
    dend_14 { pt3dadd( -15.6575, 57.2049, -15.4586, 1.11 ) }
    dend_14 { pt3dadd( -16.4996, 59.1049, -15.9619, 0.83 ) }
    dend_14 { pt3dadd( -17.5021, 61.5221, -16.5701, 0.55 ) }
    dend_14 { pt3dadd( -17.9949, 62.7362, -16.8706, 0.55 ) }
    dend_14 { pt3dadd( -19.3163, 66.1831, -17.6873, 0.83 ) }
    dend_14 { pt3dadd( -19.923, 67.8303, -18.066, 0.83 ) }
    dend_14 { pt3dadd( -20.4305, 69.2567, -18.3855, 0.83 ) }
    dend_14 { pt3dadd( -21.276, 71.7075, -18.9222, 0.83 ) }
    dend_14 { pt3dadd( -21.7182, 72.9362, -19.1998, 0.83 ) }
    dend_14 { pt3dadd( -22.1692, 74.1607, -19.4813, 0.83 ) }
    dend_14 { pt3dadd( -22.6786, 75.549, -19.7996, 0.83 ) }
    dend_14 { pt3dadd( -22.9808, 76.3078, -19.9847, 0.83 ) }
    dend_14 { pt3dadd( -23.8139, 78.5322, -20.5025, 0.83 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 93/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 2.42946, 17.6044, -3.77654, 0.83 ) }
    dend_1 { pt3dadd( 0.90103, 20.2303, -4.31719, 0.83 ) }
    dend_1 { pt3dadd( -0.614593, 22.8341, -4.8533, 1.66 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 96/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 4.64311, 41.2485, 0.0, 0.55 ) }
    axon_1 { pt3dadd( 6.28909, 56.158, 0.0, 0.55 ) }
    axon_1 { pt3dadd( 7.93508, 71.0674, 0.0, 0.55 ) }
    // Section: dend_35, id: dend_35, parent: dend_33 (entry count 99/100)
    dend_35 { pt3dclear() }
    dend_35 { pt3dadd( 44.383, -42.7375, 0.890834, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_35 { pt3dadd( 46.5292, -43.5654, 1.05359, 0.83 ) }
    dend_35 { pt3dadd( 49.373, -44.8257, 1.2663, 0.83 ) }
    dend_35 { pt3dadd( 50.4664, -45.426, 1.36591, 0.55 ) }
    dend_35 { pt3dadd( 52.3495, -46.6238, 1.55642, 0.83 ) }
    dend_35 { pt3dadd( 53.9058, -47.6571, 1.58418, 0.83 ) }
    dend_35 { pt3dadd( 54.9211, -48.3955, 1.55555, 0.55 ) }
    dend_35 { pt3dadd( 55.5615, -49.0031, 1.49345, 0.83 ) }
    dend_35 { pt3dadd( 56.6899, -50.2689, 1.22888, 0.55 ) }
    dend_35 { pt3dadd( 57.5985, -51.2871, 0.91554, 0.83 ) }
    dend_35 { pt3dadd( 59.6238, -53.6143, -0.55701, 0.55 ) }
    dend_35 { pt3dadd( 60.4104, -54.5077, -1.35438, 0.28 ) }
    dend_35 { pt3dadd( 60.9264, -55.1289, -1.94236, 0.55 ) }
    dend_35 { pt3dadd( 62.065, -56.5387, -3.3419, 0.28 ) }
    dend_35 { pt3dadd( 62.5764, -57.1803, -3.97497, 0.55 ) }
    dend_35 { pt3dadd( 65.0313, -60.6517, -7.31586, 0.28 ) }
    dend_35 { pt3dadd( 66.1317, -62.3434, -8.81324, 0.83 ) }
    dend_35 { pt3dadd( 67.5572, -64.4295, -10.5765, 0.55 ) }
    dend_35 { pt3dadd( 68.0409, -65.0955, -11.1096, 0.28 ) }
    dend_35 { pt3dadd( 69.0452, -66.5135, -12.1245, 1.11 ) }
    dend_35 { pt3dadd( 71.1763, -69.4775, -13.9441, 0.28 ) }
    dend_35 { pt3dadd( 72.1167, -70.694, -14.5023, 0.83 ) }
    dend_35 { pt3dadd( 72.8551, -71.5869, -14.898, 0.28 ) }
    dend_35 { pt3dadd( 74.0115, -72.732, -15.5255, 0.55 ) }
    dend_35 { pt3dadd( 74.7632, -73.415, -15.9289, 0.28 ) }
    dend_35 { pt3dadd( 76.5284, -74.9328, -16.8474, 0.83 ) }
    dend_35 { pt3dadd( 77.635, -75.8556, -17.34, 0.55 ) }
    dend_35 { pt3dadd( 78.4326, -76.5164, -17.7099, 0.55 ) }
    dend_35 { pt3dadd( 80.4351, -78.2688, -18.6174, 0.83 ) }
    dend_35 { pt3dadd( 81.9259, -79.6441, -19.2369, 0.55 ) }
    dend_35 { pt3dadd( 82.8073, -80.4525, -19.6112, 0.83 ) }
    dend_35 { pt3dadd( 83.5891, -81.2144, -19.9614, 0.55 ) }
    dend_35 { pt3dadd( 84.7118, -82.3783, -20.4383, 0.55 ) }
    dend_35 { pt3dadd( 85.9167, -83.572, -20.8977, 0.55 ) }
    dend_35 { pt3dadd( 86.3371, -84.0158, -21.0231, 0.83 ) }
    dend_35 { pt3dadd( 87.5456, -85.3549, -21.5557, 0.55 ) }
    dend_35 { pt3dadd( 88.7324, -86.6794, -22.1362, 0.55 ) }
    dend_35 { pt3dadd( 89.0883, -87.0811, -22.3158, 0.83 ) }
    dend_35 { pt3dadd( 90.8911, -89.1295, -23.1538, 0.55 ) }
    dend_35 { pt3dadd( 92.7048, -91.1768, -23.9375, 1.11 ) }
    dend_35 { pt3dadd( 94.6338, -93.3998, -24.73, 0.55 ) }
    dend_35 { pt3dadd( 97.039, -96.4048, -25.7023, 0.83 ) }
    dend_35 { pt3dadd( 98.0242, -97.6733, -26.094, 0.28 ) }
    dend_35 { pt3dadd( 99.0086, -99.0435, -26.4416, 0.55 ) }
    dend_35 { pt3dadd( 99.5824, -99.8708, -26.5929, 0.28 ) }
    dend_35 { pt3dadd( 100.385, -100.982, -26.7078, 0.55 ) }
    dend_35 { pt3dadd( 101.802, -102.893, -26.7016, 0.28 ) }
    dend_35 { pt3dadd( 103.144, -104.703, -26.8193, 0.55 ) }
    dend_35 { pt3dadd( 104.36, -106.288, -26.9948, 0.28 ) }
    dend_35 { pt3dadd( 105.128, -107.257, -27.1685, 0.55 ) }
    dend_35 { pt3dadd( 105.87, -108.148, -27.3457, 0.28 ) }
    dend_35 { pt3dadd( 106.906, -109.371, -27.6488, 0.83 ) }
    dend_35 { pt3dadd( 108.713, -111.521, -28.2991, 0.28 ) }
    dend_35 { pt3dadd( 109.943, -113.046, -28.865, 0.83 ) }
    dend_35 { pt3dadd( 110.688, -113.944, -29.2427, 0.28 ) }
    dend_35 { pt3dadd( 111.719, -115.289, -29.7964, 0.55 ) }
    dend_35 { pt3dadd( 112.974, -117.039, -30.4877, 0.28 ) }
    dend_35 { pt3dadd( 113.645, -118.028, -30.838, 0.83 ) }
    dend_35 { pt3dadd( 114.57, -119.382, -31.2134, 0.28 ) }
    dend_35 { pt3dadd( 115.005, -120.02, -31.3637, 0.55 ) }
    dend_35 { pt3dadd( 115.736, -121.111, -31.5707, 0.28 ) }
    dend_35 { pt3dadd( 116.196, -121.799, -31.7145, 0.83 ) }
    dend_35 { pt3dadd( 117.492, -123.643, -32.0919, 0.28 ) }
    dend_35 { pt3dadd( 117.892, -124.112, -32.2014, 0.55 ) }
    dend_35 { pt3dadd( 119.08, -125.472, -32.5172, 0.28 ) }
    dend_35 { pt3dadd( 119.669, -126.101, -32.6593, 0.55 ) }
    dend_35 { pt3dadd( 120.831, -127.202, -32.8921, 0.28 ) }
    dend_35 { pt3dadd( 122.007, -128.295, -33.095, 0.55 ) }
    dend_35 { pt3dadd( 123.697, -129.859, -33.3133, 0.55 ) }
    dend_35 { pt3dadd( 125.246, -131.317, -33.5297, 0.55 ) }
    dend_35 { pt3dadd( 125.835, -131.865, -33.6073, 0.28 ) }
    dend_35 { pt3dadd( 126.854, -132.823, -33.7225, 0.55 ) }
    dend_35 { pt3dadd( 127.734, -133.687, -33.8151, 0.28 ) }
    dend_35 { pt3dadd( 128.259, -134.252, -33.9145, 0.55 ) }
    dend_35 { pt3dadd( 129.564, -135.697, -34.2482, 0.28 ) }
    dend_35 { pt3dadd( 130.519, -136.675, -34.5427, 0.55 ) }
    dend_35 { pt3dadd( 131.737, -137.83, -34.9399, 0.28 ) }
    dend_35 { pt3dadd( 132.381, -138.41, -35.144, 0.55 ) }
    dend_35 { pt3dadd( 133.259, -139.127, -35.2962, 0.28 ) }
    dend_35 { pt3dadd( 133.747, -139.517, -35.3733, 0.55 ) }
    dend_35 { pt3dadd( 135.078, -140.521, -35.5212, 0.28 ) }
    dend_35 { pt3dadd( 136.89, -141.857, -35.646, 0.55 ) }
    dend_35 { pt3dadd( 137.626, -142.35, -35.617, 0.55 ) }
    dend_35 { pt3dadd( 139.95, -143.676, -35.3442, 0.28 ) }
    // Section: dend_34, id: dend_34, parent: dend_33 (entry count 83/100)
    dend_34 { pt3dclear() }
    dend_34 { pt3dadd( 44.383, -42.7375, 0.890834, 1.11 ) }
    dend_34 { pt3dadd( 45.7369, -45.2697, 0.515209, 1.11 ) }
    dend_34 { pt3dadd( 46.6678, -47.1146, 0.191032, 0.55 ) }
    dend_34 { pt3dadd( 47.6544, -49.0887, -0.284458, 0.83 ) }
    dend_34 { pt3dadd( 49.2505, -52.4171, -1.19953, 0.83 ) }
    dend_34 { pt3dadd( 50.5181, -55.1507, -1.98325, 0.55 ) }
    dend_34 { pt3dadd( 51.63, -57.6163, -2.7082, 0.83 ) }
    dend_34 { pt3dadd( 52.7139, -60.1528, -3.54599, 0.55 ) }
    dend_34 { pt3dadd( 53.7847, -62.6522, -4.39807, 0.55 ) }
    dend_34 { pt3dadd( 54.2797, -63.9012, -4.80878, 0.28 ) }
    dend_34 { pt3dadd( 54.6385, -64.7363, -5.06744, 0.55 ) }
    dend_34 { pt3dadd( 55.261, -66.2642, -5.3906, 0.28 ) }
    dend_34 { pt3dadd( 55.844, -67.6924, -5.6161, 0.55 ) }
    dend_34 { pt3dadd( 56.5769, -69.2811, -5.7577, 0.28 ) }
    dend_34 { pt3dadd( 57.6524, -71.4677, -5.77099, 0.55 ) }
    dend_34 { pt3dadd( 58.6629, -73.4071, -5.66425, 0.28 ) }
    dend_34 { pt3dadd( 59.1092, -74.2243, -5.6309, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_34 { pt3dadd( 59.7443, -75.3822, -5.70159, 0.55 ) }
    dend_34 { pt3dadd( 60.5173, -76.9552, -5.90741, 0.55 ) }
    dend_34 { pt3dadd( 60.7847, -77.5169, -6.02537, 0.83 ) }
    dend_34 { pt3dadd( 61.6942, -79.4761, -6.50145, 0.28 ) }
    dend_34 { pt3dadd( 62.6316, -81.9308, -7.21657, 0.83 ) }
    dend_34 { pt3dadd( 63.9119, -85.4152, -8.39869, 0.28 ) }
    dend_34 { pt3dadd( 64.3426, -86.6436, -8.93535, 0.55 ) }
    dend_34 { pt3dadd( 64.6922, -87.797, -9.48601, 0.28 ) }
    dend_34 { pt3dadd( 65.0949, -89.127, -10.2236, 0.83 ) }
    dend_34 { pt3dadd( 65.713, -91.3838, -11.505, 0.28 ) }
    dend_34 { pt3dadd( 66.2106, -93.278, -12.4942, 0.55 ) }
    dend_34 { pt3dadd( 67.0614, -96.2448, -13.9366, 0.28 ) }
    dend_34 { pt3dadd( 67.6428, -98.0831, -14.7876, 0.55 ) }
    dend_34 { pt3dadd( 68.8214, -101.878, -16.3941, 0.55 ) }
    dend_34 { pt3dadd( 69.48, -103.939, -17.0955, 0.55 ) }
    dend_34 { pt3dadd( 69.9317, -105.391, -17.436, 0.28 ) }
    dend_34 { pt3dadd( 70.1657, -106.249, -17.5796, 0.55 ) }
    dend_34 { pt3dadd( 70.5721, -107.811, -17.69, 0.28 ) }
    dend_34 { pt3dadd( 70.7925, -108.489, -17.6604, 0.55 ) }
    dend_34 { pt3dadd( 71.5292, -111.059, -17.0869, 0.28 ) }
    dend_34 { pt3dadd( 71.9881, -112.407, -16.6696, 0.55 ) }
    dend_34 { pt3dadd( 72.5879, -114.493, -15.8516, 0.28 ) }
    dend_34 { pt3dadd( 72.6571, -114.766, -15.7219, 0.55 ) }
    dend_34 { pt3dadd( 73.6176, -118.094, -13.9583, 0.28 ) }
    dend_34 { pt3dadd( 74.1114, -119.646, -13.1267, 0.55 ) }
    dend_34 { pt3dadd( 75.0396, -122.444, -11.7346, 0.28 ) }
    dend_34 { pt3dadd( 75.4498, -123.567, -11.2191, 0.55 ) }
    dend_34 { pt3dadd( 75.9683, -124.874, -10.698, 0.28 ) }
    dend_34 { pt3dadd( 76.7915, -126.889, -10.132, 0.83 ) }
    dend_34 { pt3dadd( 77.8081, -129.25, -9.6174, 0.28 ) }
    dend_34 { pt3dadd( 78.6641, -130.979, -9.23348, 0.83 ) }
    dend_34 { pt3dadd( 79.6384, -132.847, -8.80931, 0.28 ) }
    dend_34 { pt3dadd( 80.3511, -134.014, -8.50341, 0.28 ) }
    dend_34 { pt3dadd( 80.8715, -134.749, -8.24082, 0.55 ) }
    dend_34 { pt3dadd( 82.634, -136.956, -6.92593, 0.28 ) }
    dend_34 { pt3dadd( 83.1827, -137.56, -6.38921, 0.55 ) }
    dend_34 { pt3dadd( 84.0242, -138.48, -5.44155, 0.28 ) }
    dend_34 { pt3dadd( 84.5235, -139.087, -4.84138, 0.55 ) }
    dend_34 { pt3dadd( 85.4907, -140.505, -3.74634, 0.28 ) }
    dend_34 { pt3dadd( 86.2247, -141.845, -2.94034, 0.55 ) }
    dend_34 { pt3dadd( 87.9245, -145.571, -1.66376, 0.28 ) }
    dend_34 { pt3dadd( 88.3242, -146.501, -1.46992, 0.28 ) }
    dend_34 { pt3dadd( 89.2279, -148.845, -1.24806, 0.83 ) }
    dend_34 { pt3dadd( 90.3857, -152.128, -1.20185, 0.28 ) }
    dend_34 { pt3dadd( 90.9446, -153.856, -1.31656, 0.55 ) }
    dend_34 { pt3dadd( 92.1384, -157.623, -1.69453, 0.28 ) }
    dend_34 { pt3dadd( 92.6482, -159.298, -1.88886, 0.28 ) }
    dend_34 { pt3dadd( 93.1207, -160.782, -2.03985, 0.55 ) }
    dend_34 { pt3dadd( 93.7334, -162.564, -2.23632, 0.28 ) }
    dend_34 { pt3dadd( 94.1783, -163.779, -2.352, 0.55 ) }
    dend_34 { pt3dadd( 94.8477, -165.656, -2.46784, 0.28 ) }
    dend_34 { pt3dadd( 95.0996, -166.553, -2.45119, 0.55 ) }
    dend_34 { pt3dadd( 95.5619, -168.532, -2.37844, 0.28 ) }
    dend_34 { pt3dadd( 95.749, -169.504, -2.3278, 0.55 ) }
    dend_34 { pt3dadd( 96.1928, -172.011, -2.37891, 0.28 ) }
    dend_34 { pt3dadd( 96.3808, -173.415, -2.46035, 0.55 ) }
    dend_34 { pt3dadd( 96.6925, -175.62, -2.58613, 0.55 ) }
    dend_34 { pt3dadd( 96.9573, -177.724, -2.62298, 0.28 ) }
    dend_34 { pt3dadd( 97.1199, -179.283, -2.54291, 0.55 ) }
    dend_34 { pt3dadd( 97.3075, -182.47, -2.37222, 0.28 ) }
    dend_34 { pt3dadd( 97.4537, -184.042, -2.34105, 0.55 ) }
    dend_34 { pt3dadd( 97.845, -187.301, -2.3956, 0.28 ) }
    dend_34 { pt3dadd( 97.9429, -188.277, -2.49372, 0.55 ) }
    dend_34 { pt3dadd( 98.0176, -189.497, -2.68387, 0.28 ) }
    dend_34 { pt3dadd( 98.1359, -191.099, -3.00832, 0.55 ) }
    dend_34 { pt3dadd( 98.2681, -194.035, -3.59912, 0.28 ) }
    dend_34 { pt3dadd( 98.3349, -195.121, -3.81272, 0.55 ) }
    dend_34 { pt3dadd( 98.4953, -197.171, -4.4406, 0.28 ) }
    dend_34 { pt3dadd( 98.5906, -198.01, -4.71858, 0.55 ) }
    dend_34 { pt3dadd( 98.9407, -200.345, -5.56164, 0.28 ) }
    dend_34 { pt3dadd( 99.2486, -202.479, -6.29447, 0.55 ) }
    dend_34 { pt3dadd( 99.592, -204.973, -7.14448, 0.28 ) }
    dend_34 { pt3dadd( 100.398, -209.876, -8.80246, 0.55 ) }
    dend_34 { pt3dadd( 101.036, -213.27, -9.86911, 0.28 ) }
    dend_34 { pt3dadd( 101.417, -215.053, -10.4374, 0.28 ) }
    dend_34 { pt3dadd( 101.903, -217.107, -11.0988, 0.55 ) }
    dend_34 { pt3dadd( 102.573, -219.448, -11.8915, 0.28 ) }
    dend_34 { pt3dadd( 102.986, -220.614, -12.2675, 0.55 ) }
    dend_34 { pt3dadd( 103.55, -221.877, -12.4189, 0.28 ) }
    dend_34 { pt3dadd( 104.461, -223.472, -12.3719, 0.55 ) }
    dend_34 { pt3dadd( 105.323, -224.844, -12.1185, 0.28 ) }
    dend_34 { pt3dadd( 106.758, -226.922, -11.6199, 0.55 ) }
    dend_34 { pt3dadd( 108.44, -229.331, -11.0361, 0.28 ) }
    dend_34 { pt3dadd( 111.008, -232.883, -10.2752, 0.55 ) }
    dend_34 { pt3dadd( 113.093, -235.738, -9.93463, 0.55 ) }
    dend_34 { pt3dadd( 114.086, -237.104, -9.85955, 0.28 ) }
    dend_34 { pt3dadd( 115.159, -238.539, -10.0039, 0.55 ) }
    dend_34 { pt3dadd( 116.707, -240.594, -10.5805, 0.28 ) }
    dend_34 { pt3dadd( 117.668, -241.951, -11.1703, 0.55 ) }
    dend_34 { pt3dadd( 119.161, -244.19, -12.3763, 0.28 ) }
    dend_34 { pt3dadd( 120.009, -245.41, -13.1476, 0.55 ) }
    dend_34 { pt3dadd( 121.029, -246.864, -14.0806, 0.28 ) }
    dend_34 { pt3dadd( 121.512, -247.557, -14.426, 0.55 ) }
    dend_34 { pt3dadd( 122.317, -248.81, -14.8704, 0.28 ) }
    dend_34 { pt3dadd( 122.758, -249.61, -15.0953, 0.55 ) }
    // Section: dend_20, id: dend_20, parent: dend_16 (entry count 95/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 0.575306, -27.5655, 0.17378, 1.38 ) }
    dend_20 { pt3dadd( 0.31603, -28.5515, 0.0881907, 1.38 ) }
    dend_20 { pt3dadd( -0.701442, -32.4209, -0.247685, 1.38 ) }
    // Section: dend_17, id: dend_17, parent: dend_16 (entry count 98/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 0.575306, -27.5655, 0.17378, 0.83 ) }
    dend_17 { pt3dadd( -0.511678, -30.0398, 0.432971, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_17 { pt3dadd( -1.69339, -32.5683, 1.49834, 0.83 ) }
    dend_17 { pt3dadd( -2.78414, -35.0173, 2.68422, 1.38 ) }
    dend_17 { pt3dadd( -4.01744, -37.6865, 4.06568, 1.11 ) }
    dend_17 { pt3dadd( -4.96256, -39.732, 5.12434, 0.55 ) }
    dend_17 { pt3dadd( -6.09339, -42.1794, 6.39102, 1.11 ) }
    dend_17 { pt3dadd( -8.70814, -47.9317, 9.89493, 0.83 ) }
    dend_17 { pt3dadd( -9.73657, -50.2751, 11.5195, 1.11 ) }
    dend_17 { pt3dadd( -10.6793, -52.2043, 12.9669, 0.83 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 8/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -0.614593, 22.8341, -4.8533, 1.38 ) }
    dend_2 { pt3dadd( 0.853629, 26.5662, -5.92051, 1.38 ) }
    dend_2 { pt3dadd( 2.04823, 29.6027, -6.78883, 1.38 ) }
    dend_2 { pt3dadd( 2.75226, 31.3923, -7.30057, 1.38 ) }
    dend_2 { pt3dadd( 3.30591, 32.7996, -7.703, 1.38 ) }
    // Section: dend_37, id: dend_37, parent: dend_35 (entry count 13/100)
    dend_37 { pt3dclear() }
    dend_37 { pt3dadd( 139.95, -143.676, -35.3442, 0.28 ) }
    dend_37 { pt3dadd( 141.743, -143.66, -34.78, 0.28 ) }
    dend_37 { pt3dadd( 143.19, -143.647, -34.3246, 0.55 ) }
    dend_37 { pt3dadd( 145.146, -143.629, -33.7091, 0.28 ) }
    dend_37 { pt3dadd( 146.485, -143.618, -33.2877, 0.55 ) }
    // Section: dend_36, id: dend_36, parent: dend_35 (entry count 18/100)
    dend_36 { pt3dclear() }
    dend_36 { pt3dadd( 139.95, -143.676, -35.3442, 0.28 ) }
    dend_36 { pt3dadd( 142.999, -145.055, -35.4101, 0.28 ) }
    dend_36 { pt3dadd( 144.293, -145.627, -35.3437, 0.28 ) }
    dend_36 { pt3dadd( 146.838, -146.809, -34.9164, 0.83 ) }
    dend_36 { pt3dadd( 148.529, -147.618, -34.5262, 0.28 ) }
    dend_36 { pt3dadd( 149.938, -148.261, -34.0509, 0.55 ) }
    dend_36 { pt3dadd( 151.226, -148.839, -33.5448, 0.28 ) }
    dend_36 { pt3dadd( 151.291, -148.865, -33.5069, 0.55 ) }
    dend_36 { pt3dadd( 153.089, -149.568, -32.3543, 0.28 ) }
    dend_36 { pt3dadd( 153.158, -149.601, -32.3053, 0.55 ) }
    dend_36 { pt3dadd( 155.313, -150.591, -30.8143, 0.28 ) }
    dend_36 { pt3dadd( 155.661, -150.757, -30.5882, 0.55 ) }
    dend_36 { pt3dadd( 158.299, -152.02, -28.9493, 0.28 ) }
    dend_36 { pt3dadd( 158.798, -152.255, -28.6507, 0.55 ) }
    dend_36 { pt3dadd( 160.722, -153.136, -27.5747, 0.28 ) }
    dend_36 { pt3dadd( 162.079, -153.799, -26.8507, 0.55 ) }
    // Section: dend_32, id: dend_32, parent: dend_20 (entry count 34/100)
    dend_32 { pt3dclear() }
    dend_32 { pt3dadd( -0.701442, -32.4209, -0.247685, 1.38 ) }
    dend_32 { pt3dadd( -1.06495, -32.6203, -0.38465, 1.38 ) }
    dend_32 { pt3dadd( -7.75334, -36.7481, -3.44069, 1.38 ) }
    dend_32 { pt3dadd( -11.8967, -39.4147, -5.57188, 1.11 ) }
    dend_32 { pt3dadd( -14.3051, -41.1231, -6.98693, 0.83 ) }
    dend_32 { pt3dadd( -16.8106, -43.0218, -8.62325, 0.83 ) }
    dend_32 { pt3dadd( -19.9845, -45.8024, -11.171, 0.83 ) }
    dend_32 { pt3dadd( -20.819, -46.7311, -12.0196, 0.83 ) }
    dend_32 { pt3dadd( -21.5068, -47.7321, -12.9312, 0.83 ) }
    dend_32 { pt3dadd( -23.6304, -51.1576, -15.821, 0.83 ) }
    dend_32 { pt3dadd( -25.2049, -53.6714, -17.97, 0.83 ) }
    dend_32 { pt3dadd( -28.2802, -58.4066, -22.1451, 0.83 ) }
    dend_32 { pt3dadd( -30.1639, -61.4141, -24.7004, 0.55 ) }
    dend_32 { pt3dadd( -31.4986, -63.475, -26.4714, 0.55 ) }
    dend_32 { pt3dadd( -33.6564, -66.5084, -29.2093, 0.55 ) }
    dend_32 { pt3dadd( -35.7889, -69.2239, -31.862, 0.55 ) }
    dend_32 { pt3dadd( -37.5376, -70.8163, -33.3619, 0.55 ) }
    dend_32 { pt3dadd( -39.0258, -71.8546, -34.2543, 0.55 ) }
    dend_32 { pt3dadd( -41.2216, -73.1839, -35.3634, 0.55 ) }
    dend_32 { pt3dadd( -46.5287, -76.2001, -37.7224, 0.55 ) }
    dend_32 { pt3dadd( -49.099, -77.6243, -38.7453, 0.55 ) }
    dend_32 { pt3dadd( -59.4253, -83.5658, -42.8028, 0.55 ) }
    dend_32 { pt3dadd( -61.9393, -85.1883, -43.8029, 0.55 ) }
    dend_32 { pt3dadd( -66.6371, -88.2686, -45.7996, 0.55 ) }
    dend_32 { pt3dadd( -69.0166, -90.0045, -46.918, 0.55 ) }
    dend_32 { pt3dadd( -70.2309, -91.0246, -47.5758, 0.55 ) }
    dend_32 { pt3dadd( -73.8236, -94.4546, -50.0797, 0.55 ) }
    dend_32 { pt3dadd( -75.6563, -96.6721, -51.9948, 0.55 ) }
    dend_32 { pt3dadd( -77.7157, -98.9957, -54.1456, 0.55 ) }
    dend_32 { pt3dadd( -80.4435, -102.098, -56.8352, 0.55 ) }
    dend_32 { pt3dadd( -81.4658, -103.099, -57.63, 0.55 ) }
    dend_32 { pt3dadd( -82.5227, -103.959, -58.2903, 0.55 ) }
    dend_32 { pt3dadd( -84.8445, -105.54, -59.4408, 0.55 ) }
    dend_32 { pt3dadd( -87.7716, -107.29, -60.7396, 0.55 ) }
    dend_32 { pt3dadd( -90.3558, -108.842, -61.8054, 0.55 ) }
    dend_32 { pt3dadd( -95.2558, -111.364, -63.884, 0.55 ) }
    dend_32 { pt3dadd( -96.2921, -111.894, -64.3651, 0.55 ) }
    dend_32 { pt3dadd( -100.003, -113.871, -66.2841, 0.55 ) }
    dend_32 { pt3dadd( -102.267, -115.043, -67.6275, 0.55 ) }
    dend_32 { pt3dadd( -104.412, -116.163, -69.159, 0.55 ) }
    dend_32 { pt3dadd( -106.303, -117.295, -71.3165, 0.55 ) }
    dend_32 { pt3dadd( -107.677, -118.326, -73.501, 0.55 ) }
    dend_32 { pt3dadd( -108.986, -119.312, -75.8626, 0.55 ) }
    dend_32 { pt3dadd( -110.096, -120.095, -78.0607, 0.55 ) }
    dend_32 { pt3dadd( -111.507, -121.007, -80.9593, 0.55 ) }
    dend_32 { pt3dadd( -115.748, -123.281, -88.8077, 0.55 ) }
    dend_32 { pt3dadd( -117.173, -123.965, -91.195, 0.55 ) }
    dend_32 { pt3dadd( -118.845, -124.807, -94.0088, 0.55 ) }
    dend_32 { pt3dadd( -120.577, -125.832, -96.6831, 0.55 ) }
    dend_32 { pt3dadd( -122.336, -126.851, -98.6098, 0.55 ) }
    dend_32 { pt3dadd( -125.869, -128.789, -101.756, 0.55 ) }
    dend_32 { pt3dadd( -127.61, -129.639, -102.816, 0.55 ) }
    dend_32 { pt3dadd( -132.244, -131.995, -105.353, 0.55 ) }
    dend_32 { pt3dadd( -136.371, -134.429, -107.273, 0.55 ) }
    dend_32 { pt3dadd( -143.265, -139.02, -109.846, 0.55 ) }
    dend_32 { pt3dadd( -149.774, -144.791, -116.475, 0.55 ) }
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 90/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( -0.701442, -32.4209, -0.247685, 1.11 ) }
    dend_21 { pt3dadd( -0.328564, -32.8989, -0.770714, 1.11 ) }
    dend_21 { pt3dadd( 0.519716, -33.9864, -1.96058, 1.11 ) }
    dend_21 { pt3dadd( 1.87328, -35.7216, -3.8592, 1.11 ) }
    dend_21 { pt3dadd( 3.75064, -38.1282, -6.49255, 1.11 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 95/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -10.6793, -52.2043, 12.9669, 0.83 ) }
    dend_19 { pt3dadd( -11.7096, -57.7065, 19.9638, 0.83 ) }
    dend_19 { pt3dadd( -12.0885, -59.81, 22.3874, 0.83 ) }
    dend_19 { pt3dadd( -12.4149, -62.0358, 24.7591, 0.83 ) }
    dend_19 { pt3dadd( -12.6506, -63.6681, 26.3577, 1.11 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_19 { pt3dadd( -12.9245, -65.6988, 28.2249, 0.55 ) }
    dend_19 { pt3dadd( -13.2664, -68.2144, 30.3749, 0.83 ) }
    dend_19 { pt3dadd( -13.5222, -70.5568, 31.8549, 0.83 ) }
    dend_19 { pt3dadd( -13.5625, -71.7938, 32.6106, 0.55 ) }
    dend_19 { pt3dadd( -13.5897, -73.4076, 33.4296, 0.83 ) }
    dend_19 { pt3dadd( -13.5866, -74.787, 34.0172, 0.83 ) }
    dend_19 { pt3dadd( -13.5269, -76.3258, 34.6497, 0.83 ) }
    dend_19 { pt3dadd( -13.3983, -77.7204, 35.2017, 0.83 ) }
    dend_19 { pt3dadd( -13.3334, -78.5412, 35.5436, 0.83 ) }
    dend_19 { pt3dadd( -13.2309, -80.1453, 36.3572, 0.55 ) }
    dend_19 { pt3dadd( -13.1816, -81.234, 36.9529, 1.11 ) }
    dend_19 { pt3dadd( -13.0575, -85.1785, 39.2011, 0.55 ) }
    dend_19 { pt3dadd( -13.0356, -86.4644, 39.9844, 0.55 ) }
    dend_19 { pt3dadd( -13.0736, -87.6004, 40.6947, 1.11 ) }
    dend_19 { pt3dadd( -13.2517, -90.2783, 42.4528, 0.55 ) }
    dend_19 { pt3dadd( -13.3625, -91.7261, 43.4879, 1.11 ) }
    dend_19 { pt3dadd( -13.619, -98.5439, 49.2917, 1.11 ) }
    dend_19 { pt3dadd( -14.4618, -104.124, 56.2475, 1.11 ) }
    dend_19 { pt3dadd( -13.3709, -110.367, 62.5774, 1.11 ) }
    dend_19 { pt3dadd( -11.2337, -115.854, 69.3267, 1.11 ) }
    dend_19 { pt3dadd( -10.4353, -122.37, 75.4206, 1.11 ) }
    dend_19 { pt3dadd( -8.15242, -127.269, 82.5634, 1.11 ) }
    dend_19 { pt3dadd( -6.15324, -132.116, 89.8263, 1.11 ) }
    dend_19 { pt3dadd( -4.02321, -136.45, 97.3701, 1.11 ) }
    dend_19 { pt3dadd( -2.29487, -139.092, 105.753, 1.11 ) }
    dend_19 { pt3dadd( -1.31379, -140.826, 114.485, 1.11 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 26/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -10.6793, -52.2043, 12.9669, 1.11 ) }
    dend_18 { pt3dadd( -10.9279, -52.7063, 13.3536, 1.11 ) }
    dend_18 { pt3dadd( -11.4107, -53.6798, 14.0856, 1.11 ) }
    dend_18 { pt3dadd( -12.2285, -55.4285, 15.415, 1.11 ) }
    dend_18 { pt3dadd( -13.3933, -58.1081, 17.424, 1.11 ) }
    dend_18 { pt3dadd( -14.5393, -60.8348, 19.4939, 1.11 ) }
    dend_18 { pt3dadd( -14.9894, -61.958, 20.3153, 0.55 ) }
    dend_18 { pt3dadd( -15.3874, -63.0314, 21.0621, 0.83 ) }
    dend_18 { pt3dadd( -16.1827, -65.0051, 22.2845, 1.11 ) }
    dend_18 { pt3dadd( -16.447, -65.5547, 22.6099, 1.11 ) }
    dend_18 { pt3dadd( -17.3296, -67.1069, 23.3142, 0.55 ) }
    dend_18 { pt3dadd( -18.1575, -68.343, 23.8213, 0.83 ) }
    dend_18 { pt3dadd( -19.49, -70.0966, 24.5672, 0.83 ) }
    dend_18 { pt3dadd( -21.2131, -72.1975, 25.5674, 0.83 ) }
    dend_18 { pt3dadd( -23.2986, -74.4196, 26.7935, 0.55 ) }
    dend_18 { pt3dadd( -24.3983, -75.5178, 27.4629, 0.83 ) }
    dend_18 { pt3dadd( -25.8068, -76.795, 28.3239, 0.55 ) }
    dend_18 { pt3dadd( -26.7164, -77.5874, 28.9505, 1.11 ) }
    dend_18 { pt3dadd( -29.2446, -79.7517, 30.8672, 0.55 ) }
    dend_18 { pt3dadd( -30.7875, -81.165, 32.1103, 0.83 ) }
    dend_18 { pt3dadd( -31.6385, -82.0324, 32.7729, 0.83 ) }
    dend_18 { pt3dadd( -33.2432, -83.7299, 33.9926, 0.83 ) }
    dend_18 { pt3dadd( -34.0857, -84.6464, 34.6019, 1.11 ) }
    dend_18 { pt3dadd( -34.9323, -85.4936, 35.1579, 0.28 ) }
    dend_18 { pt3dadd( -35.6713, -86.1885, 35.4991, 0.83 ) }
    dend_18 { pt3dadd( -36.395, -87.0557, 35.8337, 0.28 ) }
    dend_18 { pt3dadd( -37.3753, -88.3247, 36.3407, 0.83 ) }
    dend_18 { pt3dadd( -40.7267, -94.541, 39.6407, 0.83 ) }
    dend_18 { pt3dadd( -44.2844, -100.411, 43.3353, 0.83 ) }
    dend_18 { pt3dadd( -47.6712, -105.599, 48.0656, 0.83 ) }
    dend_18 { pt3dadd( -50.0438, -110.484, 53.6573, 0.83 ) }
    dend_18 { pt3dadd( -51.6075, -114.538, 60.1293, 0.83 ) }
    dend_18 { pt3dadd( -54.065, -116.977, 67.1134, 0.83 ) }
    dend_18 { pt3dadd( -57.4807, -118.09, 74.0313, 0.83 ) }
    dend_18 { pt3dadd( -60.4628, -119.73, 81.0443, 0.83 ) }
    dend_18 { pt3dadd( -63.6973, -122.434, 87.6012, 0.83 ) }
    // Section: dend_9, id: dend_9, parent: dend_2 (entry count 62/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 3.30591, 32.7996, -7.703, 1.11 ) }
    dend_9 { pt3dadd( 6.19751, 34.6733, -19.5362, 1.11 ) }
    dend_9 { pt3dadd( 9.11811, 36.5658, -31.488, 1.11 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 65/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 3.30591, 32.7996, -7.703, 1.38 ) }
    dend_3 { pt3dadd( 2.97147, 37.186, -8.65463, 1.38 ) }
    dend_3 { pt3dadd( 2.6993, 40.7555, -9.42904, 1.38 ) }
    // Section: dend_23, id: dend_23, parent: dend_21 (entry count 68/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( 3.75064, -38.1282, -6.49255, 0.83 ) }
    dend_23 { pt3dadd( 5.47538, -40.0342, -8.03568, 0.83 ) }
    dend_23 { pt3dadd( 9.22649, -44.1796, -11.3918, 0.83 ) }
    dend_23 { pt3dadd( 11.8632, -47.0935, -13.7509, 1.11 ) }
    // Section: dend_22, id: dend_22, parent: dend_21 (entry count 72/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( 3.75064, -38.1282, -6.49255, 0.55 ) }
    dend_22 { pt3dadd( 3.90397, -38.9351, -7.62915, 0.55 ) }
    dend_22 { pt3dadd( 4.63761, -41.6514, -11.5112, 0.55 ) }
    dend_22 { pt3dadd( 5.40148, -44.1988, -15.376, 0.55 ) }
    dend_22 { pt3dadd( 5.6911, -45.162, -16.7663, 0.28 ) }
    dend_22 { pt3dadd( 6.5485, -48.1218, -21.059, 0.55 ) }
    dend_22 { pt3dadd( 7.32453, -51.3793, -25.6686, 0.55 ) }
    dend_22 { pt3dadd( 7.71552, -52.9961, -28.0555, 0.55 ) }
    dend_22 { pt3dadd( 8.12127, -54.3278, -30.0989, 0.55 ) }
    dend_22 { pt3dadd( 8.76124, -56.7081, -33.6017, 0.55 ) }
    dend_22 { pt3dadd( 9.2461, -58.5582, -36.2241, 0.28 ) }
    dend_22 { pt3dadd( 9.61955, -60.5629, -38.7846, 0.55 ) }
    dend_22 { pt3dadd( 9.82779, -62.0997, -40.7403, 0.55 ) }
    dend_22 { pt3dadd( 10.0758, -64.5914, -44.0483, 0.28 ) }
    dend_22 { pt3dadd( 10.1634, -65.4021, -45.1614, 0.55 ) }
    dend_22 { pt3dadd( 10.2825, -66.2589, -46.4877, 0.28 ) }
    dend_22 { pt3dadd( 10.7436, -68.3742, -49.9236, 0.55 ) }
    dend_22 { pt3dadd( 11.1774, -69.6748, -52.4808, 0.28 ) }
    dend_22 { pt3dadd( 11.2415, -69.8376, -52.8858, 0.55 ) }
    dend_22 { pt3dadd( 11.5276, -70.6013, -55.1335, 0.28 ) }
    dend_22 { pt3dadd( 11.8109, -71.1569, -56.9, 0.83 ) }
    dend_22 { pt3dadd( 12.3777, -71.9649, -59.6801, 0.28 ) }
    dend_22 { pt3dadd( 13.1085, -72.7357, -62.1831, 0.55 ) }
    dend_22 { pt3dadd( 14.257, -73.7193, -65.0787, 0.28 ) }
    dend_22 { pt3dadd( 15.1412, -74.3402, -66.7655, 0.55 ) }
    dend_22 { pt3dadd( 15.9339, -74.9081, -68.0988, 0.28 ) }
    dend_22 { pt3dadd( 16.6333, -75.4451, -69.1997, 0.55 ) }
    dend_22 { pt3dadd( 17.982, -76.5792, -71.3205, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_22 { pt3dadd( 21.2084, -79.5406, -76.4432, 0.55 ) }
    dend_22 { pt3dadd( 23.5282, -81.7073, -80.0902, 0.28 ) }
    dend_22 { pt3dadd( 24.3818, -82.5026, -81.4671, 0.83 ) }
    dend_22 { pt3dadd( 26.6746, -84.7351, -85.4598, 0.28 ) }
    dend_22 { pt3dadd( 27.4417, -85.5802, -86.9588, 0.55 ) }
    dend_22 { pt3dadd( 27.6882, -85.9113, -87.5141, 0.55 ) }
    dend_22 { pt3dadd( 28.2776, -86.8951, -89.0862, 0.28 ) }
    dend_22 { pt3dadd( 28.8353, -87.8735, -90.66, 0.55 ) }
    dend_22 { pt3dadd( 30.0712, -89.7519, -93.5828, 0.28 ) }
    dend_22 { pt3dadd( 30.8857, -91.0352, -95.3996, 0.55 ) }
    dend_22 { pt3dadd( 31.5933, -92.1251, -96.7529, 0.55 ) }
    dend_22 { pt3dadd( 33.0742, -94.4213, -99.3518, 0.28 ) }
    dend_22 { pt3dadd( 33.4835, -95.0493, -99.9782, 0.55 ) }
    dend_22 { pt3dadd( 34.2617, -96.3055, -101.022, 0.28 ) }
    dend_22 { pt3dadd( 35.7654, -98.9321, -102.809, 0.55 ) }
    dend_22 { pt3dadd( 37.8036, -102.262, -104.952, 0.55 ) }
    dend_22 { pt3dadd( 38.5163, -103.456, -105.733, 0.28 ) }
    dend_22 { pt3dadd( 39.6802, -105.379, -106.858, 0.55 ) }
    dend_22 { pt3dadd( 41.1925, -107.624, -108.357, 0.28 ) }
    dend_22 { pt3dadd( 41.6777, -108.28, -108.872, 0.83 ) }
    dend_22 { pt3dadd( 44.4552, -111.585, -111.834, 0.28 ) }
    dend_22 { pt3dadd( 45.7854, -113.148, -113.369, 0.55 ) }
    dend_22 { pt3dadd( 47.1139, -114.761, -115.024, 0.28 ) }
    dend_22 { pt3dadd( 49.6672, -117.919, -118.482, 0.55 ) }
    dend_22 { pt3dadd( 51.7966, -120.506, -121.591, 0.55 ) }
    dend_22 { pt3dadd( 53.0898, -122.15, -123.656, 0.28 ) }
    dend_22 { pt3dadd( 54.2855, -123.689, -125.679, 0.28 ) }
    dend_22 { pt3dadd( 54.9546, -124.515, -126.804, 0.28 ) }
    dend_22 { pt3dadd( 56.5002, -126.467, -129.474, 0.55 ) }
    dend_22 { pt3dadd( 58.9484, -129.714, -133.709, 0.28 ) }
    dend_22 { pt3dadd( 59.702, -130.712, -135.026, 0.83 ) }
    dend_22 { pt3dadd( 61.997, -133.852, -139.188, 0.28 ) }
    dend_22 { pt3dadd( 62.6124, -134.671, -140.317, 0.55 ) }
    dend_22 { pt3dadd( 63.9896, -136.581, -142.946, 0.28 ) }
    dend_22 { pt3dadd( 65.0954, -138.17, -145.111, 0.55 ) }
    dend_22 { pt3dadd( 66.4649, -140.147, -147.834, 0.28 ) }
    dend_22 { pt3dadd( 67.0818, -141.1, -149.164, 0.55 ) }
    dend_22 { pt3dadd( 68.0677, -142.817, -151.667, 0.28 ) }
    dend_22 { pt3dadd( 69.0095, -144.458, -154.125, 0.55 ) }
    dend_22 { pt3dadd( 70.6611, -147.192, -158.433, 0.55 ) }
    dend_22 { pt3dadd( 71.6571, -148.658, -160.85, 0.28 ) }
    dend_22 { pt3dadd( 72.4996, -149.85, -162.929, 0.55 ) }
    dend_22 { pt3dadd( 73.4831, -151.065, -165.187, 0.83 ) }
    // Section: dend_13, id: dend_13, parent: dend_9 (entry count 43/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 9.11811, 36.5658, -31.488, 1.11 ) }
    dend_13 { pt3dadd( 13.3626, 44.2891, -23.3864, 1.11 ) }
    dend_13 { pt3dadd( 14.2249, 45.7876, -22.084, 1.11 ) }
    dend_13 { pt3dadd( 15.3482, 47.5611, -20.7474, 1.11 ) }
    dend_13 { pt3dadd( 16.8164, 49.833, -19.2555, 1.11 ) }
    dend_13 { pt3dadd( 18.6502, 52.6993, -17.6075, 0.83 ) }
    dend_13 { pt3dadd( 20.4107, 55.4302, -16.192, 0.83 ) }
    dend_13 { pt3dadd( 21.7985, 57.3191, -15.7316, 0.83 ) }
    dend_13 { pt3dadd( 23.0804, 59.0342, -15.324, 0.83 ) }
    dend_13 { pt3dadd( 24.1795, 60.4755, -14.9976, 0.83 ) }
    dend_13 { pt3dadd( 25.3587, 62.0015, -14.693, 0.83 ) }
    dend_13 { pt3dadd( 26.2919, 63.3101, -14.517, 0.83 ) }
    dend_13 { pt3dadd( 27.3391, 65.0155, -14.5368, 0.83 ) }
    dend_13 { pt3dadd( 28.043, 66.2844, -14.5645, 0.83 ) }
    dend_13 { pt3dadd( 28.4031, 66.9604, -14.5695, 0.83 ) }
    dend_13 { pt3dadd( 29.2145, 68.521, -14.5858, 0.83 ) }
    dend_13 { pt3dadd( 30.0318, 70.0118, -14.6696, 0.83 ) }
    dend_13 { pt3dadd( 31.6964, 73.1674, -14.9449, 0.83 ) }
    dend_13 { pt3dadd( 33.1719, 75.9498, -15.3345, 0.55 ) }
    dend_13 { pt3dadd( 34.6221, 78.5908, -15.8094, 0.55 ) }
    dend_13 { pt3dadd( 35.8111, 80.5151, -16.1514, 0.55 ) }
    dend_13 { pt3dadd( 37.9234, 83.6465, -16.6514, 0.83 ) }
    dend_13 { pt3dadd( 38.8865, 85.0467, -16.8528, 0.83 ) }
    dend_13 { pt3dadd( 41.4462, 88.6997, -17.2924, 1.11 ) }
    dend_13 { pt3dadd( 43.3266, 91.3478, -17.6905, 0.83 ) }
    dend_13 { pt3dadd( 46.7264, 96.0416, -18.4018, 0.83 ) }
    dend_13 { pt3dadd( 48.9521, 99.0643, -18.8044, 0.83 ) }
    dend_13 { pt3dadd( 49.9393, 100.43, -18.904, 0.83 ) }
    dend_13 { pt3dadd( 51.1595, 102.098, -18.9451, 1.11 ) }
    dend_13 { pt3dadd( 53.8897, 105.781, -18.7834, 0.55 ) }
    dend_13 { pt3dadd( 54.8788, 107.155, -18.6776, 0.55 ) }
    dend_13 { pt3dadd( 56.3352, 109.301, -18.4757, 0.55 ) }
    dend_13 { pt3dadd( 57.9352, 111.737, -18.2858, 0.55 ) }
    dend_13 { pt3dadd( 59.6771, 114.479, -18.0894, 0.55 ) }
    dend_13 { pt3dadd( 60.9081, 116.604, -17.9449, 0.55 ) }
    dend_13 { pt3dadd( 61.6909, 118.086, -17.7439, 0.28 ) }
    dend_13 { pt3dadd( 63.0234, 120.628, -17.289, 0.28 ) }
    dend_13 { pt3dadd( 64.423, 123.301, -16.7402, 0.55 ) }
    dend_13 { pt3dadd( 65.5873, 125.55, -16.2549, 0.55 ) }
    dend_13 { pt3dadd( 66.8518, 128.086, -15.5797, 0.55 ) }
    dend_13 { pt3dadd( 68.8328, 132.218, -14.3537, 0.55 ) }
    dend_13 { pt3dadd( 70.4243, 135.558, -13.2705, 0.55 ) }
    dend_13 { pt3dadd( 71.207, 137.37, -12.6459, 0.55 ) }
    dend_13 { pt3dadd( 71.6905, 138.506, -12.2347, 0.55 ) }
    dend_13 { pt3dadd( 73.1229, 142.108, -11.0514, 0.55 ) }
    dend_13 { pt3dadd( 74.0111, 144.631, -10.3686, 0.55 ) }
    dend_13 { pt3dadd( 74.6437, 146.546, -9.99338, 0.55 ) }
    dend_13 { pt3dadd( 75.9974, 150.984, -9.28975, 0.55 ) }
    dend_13 { pt3dadd( 76.8514, 153.733, -8.79435, 0.55 ) }
    dend_13 { pt3dadd( 77.4769, 155.793, -8.41127, 0.55 ) }
    dend_13 { pt3dadd( 78.2741, 158.292, -7.9437, 0.55 ) }
    dend_13 { pt3dadd( 79.3142, 161.346, -7.33373, 0.83 ) }
    dend_13 { pt3dadd( 79.9338, 163.033, -6.94756, 0.83 ) }
    dend_13 { pt3dadd( 82.0345, 168.361, -5.65568, 0.55 ) }
    dend_13 { pt3dadd( 82.6933, 170.025, -5.23884, 0.55 ) }
    dend_13 { pt3dadd( 83.8388, 172.799, -4.53066, 0.55 ) }
    dend_13 { pt3dadd( 84.6562, 174.818, -4.08417, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_13 { pt3dadd( 85.9415, 178.302, -3.53244, 0.55 ) }
    dend_13 { pt3dadd( 87.2942, 182.163, -3.17617, 0.83 ) }
    dend_13 { pt3dadd( 88.0372, 184.193, -3.28766, 0.55 ) }
    dend_13 { pt3dadd( 88.8427, 186.082, -3.53938, 0.83 ) }
    dend_13 { pt3dadd( 90.1076, 188.682, -4.11537, 0.55 ) }
    dend_13 { pt3dadd( 91.535, 191.247, -4.85592, 0.55 ) }
    dend_13 { pt3dadd( 92.7283, 193.065, -5.54207, 1.11 ) }
    dend_13 { pt3dadd( 95.9781, 197.234, -7.31905, 0.83 ) }
    dend_13 { pt3dadd( 98.5911, 200.167, -8.54174, 0.83 ) }
    dend_13 { pt3dadd( 100.502, 202.123, -9.2845, 0.83 ) }
    dend_13 { pt3dadd( 102.176, 203.809, -9.72751, 0.83 ) }
    dend_13 { pt3dadd( 103.897, 205.661, -10.0486, 0.83 ) }
    dend_13 { pt3dadd( 106.135, 208.418, -10.2274, 1.11 ) }
    dend_13 { pt3dadd( 107.87, 211.037, -10.0639, 0.83 ) }
    dend_13 { pt3dadd( 109.885, 214.774, -9.67209, 0.83 ) }
    dend_13 { pt3dadd( 111.585, 218.43, -9.08622, 0.83 ) }
    dend_13 { pt3dadd( 112.724, 221.338, -8.5056, 0.83 ) }
    dend_13 { pt3dadd( 113.415, 223.618, -7.96073, 0.83 ) }
    dend_13 { pt3dadd( 114.023, 226.203, -7.29434, 0.83 ) }
    dend_13 { pt3dadd( 114.302, 227.606, -6.9771, 0.83 ) }
    dend_13 { pt3dadd( 114.556, 228.795, -6.75713, 0.83 ) }
    dend_13 { pt3dadd( 114.94, 230.152, -6.66065, 0.83 ) }
    dend_13 { pt3dadd( 115.658, 231.962, -6.57047, 0.83 ) }
    dend_13 { pt3dadd( 116.511, 233.719, -6.53128, 0.83 ) }
    dend_13 { pt3dadd( 117.414, 235.493, -6.48346, 0.55 ) }
    dend_13 { pt3dadd( 118.202, 236.904, -6.46229, 0.83 ) }
    dend_13 { pt3dadd( 119.941, 239.964, -6.44752, 0.55 ) }
    dend_13 { pt3dadd( 121.485, 242.427, -6.42067, 0.83 ) }
    dend_13 { pt3dadd( 122.026, 243.232, -6.40436, 0.83 ) }
    dend_13 { pt3dadd( 123.27, 245.075, -6.36251, 0.55 ) }
    dend_13 { pt3dadd( 124.424, 246.717, -6.30028, 0.83 ) }
    dend_13 { pt3dadd( 126.221, 249.244, -6.2391, 0.83 ) }
    dend_13 { pt3dadd( 127.435, 250.825, -6.22069, 0.83 ) }
    dend_13 { pt3dadd( 128.281, 252.116, -6.24863, 0.83 ) }
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 34/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 9.11811, 36.5658, -31.488, 1.94 ) }
    dend_10 { pt3dadd( 8.57146, 40.0962, -33.3327, 1.94 ) }
    dend_10 { pt3dadd( 8.05051, 43.6723, -35.3836, 1.94 ) }
    dend_10 { pt3dadd( 7.65348, 47.2239, -37.4318, 1.38 ) }
    dend_10 { pt3dadd( 6.98627, 54.0842, -41.3332, 1.38 ) }
    dend_10 { pt3dadd( 6.65973, 58.2226, -43.9678, 1.38 ) }
    dend_10 { pt3dadd( 6.15655, 64.7022, -47.8797, 1.11 ) }
    dend_10 { pt3dadd( 5.98436, 66.982, -49.5576, 1.11 ) }
    dend_10 { pt3dadd( 5.87535, 68.7949, -50.978, 1.38 ) }
    dend_10 { pt3dadd( 5.70127, 71.5, -53.1113, 1.38 ) }
    dend_10 { pt3dadd( 5.09902, 77.8296, -58.1101, 1.38 ) }
    dend_10 { pt3dadd( 4.53263, 82.5258, -62.1263, 1.38 ) }
    dend_10 { pt3dadd( 3.49843, 89.7499, -68.2794, 1.38 ) }
    dend_10 { pt3dadd( 3.13714, 92.362, -70.6138, 1.38 ) }
    dend_10 { pt3dadd( 2.45621, 97.3901, -75.2642, 1.38 ) }
    dend_10 { pt3dadd( 1.27594, 106.405, -83.5478, 1.11 ) }
    dend_10 { pt3dadd( 0.254854, 114.051, -90.2263, 1.11 ) }
    dend_10 { pt3dadd( -0.213123, 117.894, -93.5162, 1.11 ) }
    dend_10 { pt3dadd( -0.893628, 123.909, -98.3675, 1.11 ) }
    dend_10 { pt3dadd( -1.28314, 128.057, -101.681, 1.11 ) }
    dend_10 { pt3dadd( -1.49037, 131.549, -104.352, 1.11 ) }
    dend_10 { pt3dadd( -1.54563, 135.946, -107.514, 1.11 ) }
    dend_10 { pt3dadd( -1.4915, 138.258, -109.07, 1.11 ) }
    dend_10 { pt3dadd( -0.955445, 147.636, -115.523, 1.11 ) }
    dend_10 { pt3dadd( -0.710725, 150.796, -117.667, 1.11 ) }
    dend_10 { pt3dadd( -0.172377, 155.712, -121.12, 1.11 ) }
    dend_10 { pt3dadd( 0.340919, 158.816, -123.546, 1.11 ) }
    dend_10 { pt3dadd( 0.872671, 161.229, -125.641, 1.11 ) }
    dend_10 { pt3dadd( 1.72679, 164.679, -128.732, 1.11 ) }
    // Section: dend_8, id: dend_8, parent: dend_3 (entry count 63/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 2.6993, 40.7555, -9.42904, 0.83 ) }
    dend_8 { pt3dadd( 4.46333, 42.5839, -7.75723, 0.83 ) }
    dend_8 { pt3dadd( 7.5859, 45.9012, -5.12918, 0.83 ) }
    dend_8 { pt3dadd( 8.6825, 47.1716, -3.25119, 0.83 ) }
    dend_8 { pt3dadd( 10.5324, 49.5474, 0.494955, 0.83 ) }
    dend_8 { pt3dadd( 11.3705, 50.7185, 2.28296, 0.83 ) }
    dend_8 { pt3dadd( 13.3747, 53.6882, 6.57063, 0.83 ) }
    dend_8 { pt3dadd( 14.4937, 55.4748, 9.01398, 0.83 ) }
    dend_8 { pt3dadd( 20.0747, 65.2903, 21.2515, 0.83 ) }
    dend_8 { pt3dadd( 21.005, 67.1873, 23.2513, 0.83 ) }
    dend_8 { pt3dadd( 21.7751, 69.06, 24.8868, 0.83 ) }
    dend_8 { pt3dadd( 22.4822, 70.9018, 26.4524, 0.83 ) }
    dend_8 { pt3dadd( 23.859, 74.9296, 29.4686, 0.83 ) }
    dend_8 { pt3dadd( 24.409, 76.4809, 30.282, 0.83 ) }
    dend_8 { pt3dadd( 26.5448, 82.0342, 30.6377, 0.83 ) }
    dend_8 { pt3dadd( 26.8128, 82.6975, 30.6832, 0.83 ) }
    dend_8 { pt3dadd( 32.3288, 90.6569, 37.2046, 0.83 ) }
    dend_8 { pt3dadd( 36.9555, 98.3203, 44.6994, 0.83 ) }
    dend_8 { pt3dadd( 42.0087, 106.186, 51.6931, 0.83 ) }
    dend_8 { pt3dadd( 48.5071, 113.495, 58.0691, 0.83 ) }
    dend_8 { pt3dadd( 56.4565, 120.102, 63.4967, 0.83 ) }
    dend_8 { pt3dadd( 63.5977, 128.495, 67.3519, 0.83 ) }
    dend_8 { pt3dadd( 69.2411, 138.637, 68.6222, 0.83 ) }
    dend_8 { pt3dadd( 73.8454, 149.078, 71.0878, 0.83 ) }
    dend_8 { pt3dadd( 78.0141, 159.634, 73.826, 0.83 ) }
    dend_8 { pt3dadd( 80.9374, 170.533, 76.8232, 0.83 ) }
    dend_8 { pt3dadd( 82.2006, 181.774, 79.7139, 0.83 ) }
    dend_8 { pt3dadd( 84.1274, 193.271, 80.342, 0.83 ) }
    dend_8 { pt3dadd( 88.1216, 203.823, 83.3434, 0.83 ) }
    dend_8 { pt3dadd( 94.1464, 212.322, 88.6149, 0.83 ) }
    dend_8 { pt3dadd( 97.6721, 222.263, 93.6186, 0.83 ) }
    dend_8 { pt3dadd( 99.3077, 231.84, 100.093, 0.83 ) }
    dend_8 { pt3dadd( 100.191, 241.459, 106.65, 0.83 ) }
    dend_8 { pt3dadd( 102.166, 250.029, 114.329, 0.83 ) }
    dend_8 { pt3dadd( 102.949, 259.473, 121.148, 0.83 ) }
    dend_8 { pt3dadd( 105.424, 269.769, 126.065, 0.83 ) }
    dend_8 { pt3dadd( 108.101, 279.608, 131.751, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_8 { pt3dadd( 111.526, 288.592, 138.374, 0.83 ) }
    dend_8 { pt3dadd( 116.22, 297.827, 143.759, 0.83 ) }
    dend_8 { pt3dadd( 122.635, 305.042, 150.323, 0.83 ) }
    dend_8 { pt3dadd( 128.64, 313.39, 155.85, 0.83 ) }
    // Section: dend_7, id: dend_7, parent: dend_3 (entry count 4/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 2.6993, 40.7555, -9.42904, 0.83 ) }
    dend_7 { pt3dadd( 1.98173, 47.842, -16.414, 0.83 ) }
    dend_7 { pt3dadd( 1.85215, 49.7669, -17.7449, 0.83 ) }
    dend_7 { pt3dadd( 1.78485, 51.4003, -18.6765, 0.83 ) }
    dend_7 { pt3dadd( 1.65315, 53.6609, -19.8173, 0.83 ) }
    dend_7 { pt3dadd( 1.49897, 55.6854, -20.8005, 0.83 ) }
    dend_7 { pt3dadd( 1.34097, 57.9411, -21.8282, 0.83 ) }
    dend_7 { pt3dadd( 1.14391, 61.0669, -22.7368, 0.83 ) }
    dend_7 { pt3dadd( 0.987536, 63.8985, -23.5812, 0.83 ) }
    dend_7 { pt3dadd( 0.866217, 66.4599, -24.3249, 0.83 ) }
    dend_7 { pt3dadd( 0.803049, 70.0508, -25.3462, 0.83 ) }
    dend_7 { pt3dadd( 0.856596, 72.1789, -25.9433, 0.83 ) }
    dend_7 { pt3dadd( 0.92721, 74.0047, -26.4013, 0.83 ) }
    dend_7 { pt3dadd( 1.13442, 75.8154, -26.8223, 0.83 ) }
    dend_7 { pt3dadd( 1.51611, 77.8188, -27.247, 0.83 ) }
    dend_7 { pt3dadd( 2.40821, 81.148, -27.9037, 0.83 ) }
    dend_7 { pt3dadd( 2.91359, 82.9427, -28.228, 0.83 ) }
    dend_7 { pt3dadd( 3.27424, 84.3085, -28.5681, 0.83 ) }
    dend_7 { pt3dadd( 4.44215, 88.8356, -29.8699, 0.83 ) }
    dend_7 { pt3dadd( 4.92432, 90.8403, -30.4982, 0.83 ) }
    dend_7 { pt3dadd( 5.334, 92.8935, -31.1752, 0.83 ) }
    dend_7 { pt3dadd( 5.69923, 95.7692, -32.1036, 0.83 ) }
    dend_7 { pt3dadd( 6.11637, 99.6049, -33.3608, 0.83 ) }
    dend_7 { pt3dadd( 6.30358, 101.702, -34.0167, 0.83 ) }
    dend_7 { pt3dadd( 6.31742, 102.627, -34.2761, 0.83 ) }
    dend_7 { pt3dadd( 6.27592, 104.0, -34.6553, 0.83 ) }
    dend_7 { pt3dadd( 6.09822, 107.615, -35.5466, 0.83 ) }
    dend_7 { pt3dadd( 6.0872, 109.231, -35.9256, 0.83 ) }
    dend_7 { pt3dadd( 6.08733, 111.579, -36.4193, 0.83 ) }
    dend_7 { pt3dadd( 6.13147, 114.041, -36.9627, 0.83 ) }
    dend_7 { pt3dadd( 6.19112, 115.868, -37.3608, 0.83 ) }
    dend_7 { pt3dadd( 6.38675, 120.144, -38.2802, 0.83 ) }
    dend_7 { pt3dadd( 6.71468, 124.941, -39.2278, 0.83 ) }
    dend_7 { pt3dadd( 6.8697, 127.005, -39.5923, 0.83 ) }
    dend_7 { pt3dadd( 7.04004, 128.982, -39.9109, 0.83 ) }
    dend_7 { pt3dadd( 7.3389, 131.99, -40.2662, 0.83 ) }
    dend_7 { pt3dadd( 7.65953, 135.581, -40.6036, 0.83 ) }
    dend_7 { pt3dadd( 7.81062, 139.012, -40.8191, 0.83 ) }
    dend_7 { pt3dadd( 7.78873, 140.491, -40.8633, 0.83 ) }
    dend_7 { pt3dadd( 7.67594, 143.664, -40.9548, 0.83 ) }
    dend_7 { pt3dadd( 7.51164, 146.288, -41.037, 0.83 ) }
    dend_7 { pt3dadd( 7.34626, 147.999, -41.0628, 1.11 ) }
    dend_7 { pt3dadd( 6.96593, 151.102, -41.1117, 1.11 ) }
    dend_7 { pt3dadd( 6.49206, 154.099, -41.2087, 1.11 ) }
    dend_7 { pt3dadd( 5.91617, 157.223, -41.2866, 1.11 ) }
    dend_7 { pt3dadd( 5.47871, 159.558, -41.3297, 1.11 ) }
    dend_7 { pt3dadd( 4.98753, 162.513, -41.3679, 0.83 ) }
    dend_7 { pt3dadd( 4.57632, 165.171, -41.3046, 1.38 ) }
    dend_7 { pt3dadd( 4.32142, 167.142, -41.2136, 1.38 ) }
    dend_7 { pt3dadd( 3.93116, 170.304, -41.0231, 0.83 ) }
    dend_7 { pt3dadd( 3.73497, 171.63, -40.9408, 0.83 ) }
    dend_7 { pt3dadd( 3.45079, 173.707, -40.8322, 0.83 ) }
    dend_7 { pt3dadd( 3.01947, 176.561, -41.0375, 1.11 ) }
    dend_7 { pt3dadd( 2.63761, 178.688, -41.499, 1.38 ) }
    dend_7 { pt3dadd( 2.29018, 180.9, -42.2168, 1.38 ) }
    dend_7 { pt3dadd( 2.10876, 182.288, -42.7351, 1.38 ) }
    dend_7 { pt3dadd( 1.87319, 184.625, -43.6246, 0.83 ) }
    dend_7 { pt3dadd( 1.60698, 188.258, -44.9821, 1.38 ) }
    dend_7 { pt3dadd( 1.4064, 190.959, -45.7887, 0.83 ) }
    dend_7 { pt3dadd( 1.21697, 193.759, -46.4574, 0.83 ) }
    dend_7 { pt3dadd( 1.06768, 196.128, -46.8275, 0.83 ) }
    dend_7 { pt3dadd( 0.955302, 198.79, -47.0198, 1.11 ) }
    dend_7 { pt3dadd( 0.853243, 200.187, -46.8846, 1.11 ) }
    dend_7 { pt3dadd( 0.418471, 204.085, -45.9571, 1.11 ) }
    dend_7 { pt3dadd( 0.0275059, 206.592, -45.154, 1.11 ) }
    dend_7 { pt3dadd( -0.428877, 208.921, -44.2985, 1.11 ) }
    dend_7 { pt3dadd( -0.795946, 210.577, -43.6668, 1.11 ) }
    dend_7 { pt3dadd( -1.96159, 215.734, -41.7735, 1.38 ) }
    dend_7 { pt3dadd( -2.57175, 218.427, -40.9031, 1.11 ) }
    dend_7 { pt3dadd( -3.04372, 220.692, -40.3292, 1.11 ) }
    dend_7 { pt3dadd( -3.67775, 223.844, -39.6892, 1.11 ) }
    dend_7 { pt3dadd( -4.26064, 226.721, -39.2141, 0.83 ) }
    dend_7 { pt3dadd( -4.89164, 229.943, -38.8135, 0.83 ) }
    dend_7 { pt3dadd( -5.20037, 231.79, -38.6983, 0.83 ) }
    dend_7 { pt3dadd( -5.76739, 235.371, -38.4961, 0.83 ) }
    dend_7 { pt3dadd( -6.3913, 239.099, -38.6527, 0.83 ) }
    dend_7 { pt3dadd( -6.62183, 240.95, -39.0418, 0.83 ) }
    dend_7 { pt3dadd( -6.82256, 242.727, -39.6159, 0.83 ) }
    dend_7 { pt3dadd( -6.95976, 245.01, -40.8171, 0.83 ) }
    dend_7 { pt3dadd( -6.97865, 246.77, -41.9501, 0.83 ) }
    dend_7 { pt3dadd( -6.97541, 251.553, -45.4983, 1.11 ) }
    dend_7 { pt3dadd( -6.89374, 255.92, -49.0918, 1.38 ) }
    dend_7 { pt3dadd( -6.77887, 258.911, -51.7278, 0.83 ) }
    dend_7 { pt3dadd( -6.54694, 264.22, -56.725, 0.83 ) }
    dend_7 { pt3dadd( -6.42464, 265.998, -58.4987, 0.83 ) }
    dend_7 { pt3dadd( -6.3036, 267.253, -59.7536, 0.83 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 90/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 2.6993, 40.7555, -9.42904, 1.38 ) }
    dend_4 { pt3dadd( 2.08412, 47.4956, -6.50056, 1.38 ) }
    dend_4 { pt3dadd( 1.84141, 51.1096, -5.09523, 1.38 ) }
    dend_4 { pt3dadd( 1.7514, 53.7744, -4.17849, 1.38 ) }
    dend_4 { pt3dadd( 1.72971, 57.0277, -3.11146, 1.38 ) }
    dend_4 { pt3dadd( 1.70503, 60.7288, -1.89754, 1.38 ) }
    dend_4 { pt3dadd( 1.68812, 63.2641, -1.06597, 1.38 ) }
    dend_4 { pt3dadd( 1.79426, 66.5463, -0.267609, 1.38 ) }
    dend_4 { pt3dadd( 1.86451, 69.5065, 0.509799, 1.38 ) }
    dend_4 { pt3dadd( 2.01289, 71.81, 1.10519, 1.38 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    // Section: dend_29, id: dend_29, parent: dend_23 (entry count 0/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 11.8632, -47.0935, -13.7509, 0.28 ) }
    dend_29 { pt3dadd( 12.0979, -48.0801, -14.6397, 0.28 ) }
    dend_29 { pt3dadd( 12.5617, -50.0297, -16.3958, 0.83 ) }
    dend_29 { pt3dadd( 13.5897, -54.3519, -20.289, 0.83 ) }
    dend_29 { pt3dadd( 14.8569, -59.6796, -25.088, 0.55 ) }
    dend_29 { pt3dadd( 15.3414, -61.7165, -26.9228, 0.55 ) }
    dend_29 { pt3dadd( 16.0926, -64.8747, -29.7677, 0.83 ) }
    // Section: dend_24, id: dend_24, parent: dend_23 (entry count 7/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 11.8632, -47.0935, -13.7509, 0.83 ) }
    dend_24 { pt3dadd( 13.4237, -49.5188, -15.8342, 0.83 ) }
    dend_24 { pt3dadd( 15.0235, -51.687, -17.7498, 0.83 ) }
    dend_24 { pt3dadd( 17.9858, -55.6156, -21.1305, 0.83 ) }
    dend_24 { pt3dadd( 20.6209, -59.0022, -24.0056, 0.83 ) }
    dend_24 { pt3dadd( 21.3998, -59.9309, -24.8562, 0.83 ) }
    dend_24 { pt3dadd( 24.0437, -62.9599, -27.7921, 0.83 ) }
    dend_24 { pt3dadd( 26.9648, -66.2809, -31.0603, 1.11 ) }
    dend_24 { pt3dadd( 28.9049, -68.4997, -33.2393, 0.83 ) }
    dend_24 { pt3dadd( 32.1524, -71.8663, -36.7763, 0.83 ) }
    dend_24 { pt3dadd( 36.1836, -75.6614, -40.9497, 0.83 ) }
    dend_24 { pt3dadd( 38.9799, -78.2128, -43.8564, 1.38 ) }
    // Section: dend_12, id: dend_12, parent: dend_10 (entry count 19/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 1.72679, 164.679, -128.732, 0.83 ) }
    dend_12 { pt3dadd( 4.11206, 172.13, -136.698, 0.83 ) }
    dend_12 { pt3dadd( 5.77232, 177.539, -142.357, 0.83 ) }
    dend_12 { pt3dadd( 7.44669, 183.515, -149.142, 0.83 ) }
    dend_12 { pt3dadd( 10.4251, 195.49, -162.964, 0.83 ) }
    dend_12 { pt3dadd( 12.4359, 204.483, -173.479, 0.83 ) }
    dend_12 { pt3dadd( 13.6474, 210.769, -180.865, 1.11 ) }
    dend_12 { pt3dadd( 14.3009, 214.34, -185.401, 1.11 ) }
    dend_12 { pt3dadd( 15.603, 223.94, -198.196, 1.11 ) }
    dend_12 { pt3dadd( 15.7415, 225.84, -200.666, 1.11 ) }
    dend_12 { pt3dadd( 15.5254, 230.236, -205.627, 1.11 ) }
    dend_12 { pt3dadd( 15.1968, 233.176, -208.832, 1.11 ) }
    dend_12 { pt3dadd( 13.9688, 240.719, -217.058, 1.11 ) }
    dend_12 { pt3dadd( 13.1314, 244.564, -221.787, 1.11 ) }
    dend_12 { pt3dadd( 12.5315, 247.217, -224.926, 1.11 ) }
    dend_12 { pt3dadd( 10.3563, 256.745, -236.651, 1.11 ) }
    dend_12 { pt3dadd( 9.34212, 260.793, -241.785, 1.11 ) }
    dend_12 { pt3dadd( 8.40337, 264.29, -246.479, 1.11 ) }
    dend_12 { pt3dadd( 5.0712, 273.453, -260.188, 1.11 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 38/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 1.72679, 164.679, -128.732, 1.11 ) }
    dend_11 { pt3dadd( 2.01797, 168.339, -128.753, 1.11 ) }
    dend_11 { pt3dadd( 2.29262, 171.18, -128.764, 1.11 ) }
    dend_11 { pt3dadd( 2.6405, 174.812, -128.782, 1.11 ) }
    dend_11 { pt3dadd( 2.90334, 177.455, -128.794, 1.11 ) }
    dend_11 { pt3dadd( 3.36874, 181.052, -129.002, 0.83 ) }
    dend_11 { pt3dadd( 3.85279, 184.14, -129.276, 0.83 ) }
    dend_11 { pt3dadd( 4.3344, 187.006, -129.65, 0.83 ) }
    dend_11 { pt3dadd( 4.59852, 188.292, -129.855, 0.83 ) }
    dend_11 { pt3dadd( 4.85491, 189.523, -130.088, 0.83 ) }
    dend_11 { pt3dadd( 5.76855, 194.188, -130.576, 1.11 ) }
    dend_11 { pt3dadd( 6.32287, 197.015, -130.559, 1.11 ) }
    dend_11 { pt3dadd( 6.72534, 200.859, -129.679, 0.55 ) }
    dend_11 { pt3dadd( 6.74432, 201.866, -129.212, 0.83 ) }
    dend_11 { pt3dadd( 6.44366, 204.036, -127.37, 0.83 ) }
    dend_11 { pt3dadd( 5.35747, 208.737, -122.35, 0.83 ) }
    dend_11 { pt3dadd( 4.86234, 210.545, -120.175, 0.83 ) }
    dend_11 { pt3dadd( 3.92695, 213.997, -115.751, 1.11 ) }
    dend_11 { pt3dadd( 3.67627, 214.997, -114.303, 1.11 ) }
    dend_11 { pt3dadd( 2.43168, 219.735, -107.411, 1.11 ) }
    dend_11 { pt3dadd( 2.20732, 220.608, -106.106, 1.11 ) }
    dend_11 { pt3dadd( 1.85375, 222.07, -104.093, 1.11 ) }
    dend_11 { pt3dadd( 1.4393, 223.733, -101.746, 1.11 ) }
    dend_11 { pt3dadd( 0.975483, 229.237, -94.2463, 1.11 ) }
    // Section: dend_6, id: dend_6, parent: dend_4 (entry count 62/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 2.01289, 71.81, 1.10519, 0.83 ) }
    dend_6 { pt3dadd( 1.39632, 77.0882, -0.248891, 0.83 ) }
    dend_6 { pt3dadd( 0.758976, 80.465, -0.988504, 0.83 ) }
    dend_6 { pt3dadd( 0.321266, 81.933, -1.29642, 0.55 ) }
    dend_6 { pt3dadd( -0.328869, 83.7194, -1.49589, 1.38 ) }
    dend_6 { pt3dadd( -2.00746, 88.0356, -1.96274, 1.38 ) }
    dend_6 { pt3dadd( -2.89853, 90.3698, -2.16809, 1.11 ) }
    dend_6 { pt3dadd( -3.82874, 92.5362, -2.06691, 1.66 ) }
    dend_6 { pt3dadd( -5.23214, 95.5061, -1.81773, 0.55 ) }
    dend_6 { pt3dadd( -6.95375, 99.5306, -1.90245, 1.38 ) }
    dend_6 { pt3dadd( -8.5911, 103.897, -2.35194, 0.83 ) }
    dend_6 { pt3dadd( -9.51988, 106.595, -2.71029, 1.38 ) }
    dend_6 { pt3dadd( -11.0287, 111.374, -3.41626, 1.11 ) }
    dend_6 { pt3dadd( -11.7176, 113.457, -3.78095, 1.66 ) }
    dend_6 { pt3dadd( -14.7791, 122.668, -5.6377, 0.83 ) }
    dend_6 { pt3dadd( -16.417, 127.082, -6.54059, 1.38 ) }
    dend_6 { pt3dadd( -17.9693, 130.838, -7.2057, 1.11 ) }
    dend_6 { pt3dadd( -19.4131, 134.085, -7.61433, 1.38 ) }
    dend_6 { pt3dadd( -20.478, 136.331, -7.72375, 0.55 ) }
    dend_6 { pt3dadd( -21.6641, 138.675, -7.51183, 0.83 ) }
    dend_6 { pt3dadd( -23.4679, 141.987, -6.70406, 1.11 ) }
    dend_6 { pt3dadd( -24.9612, 144.777, -6.03096, 1.38 ) }
    dend_6 { pt3dadd( -27.2883, 149.405, -5.00496, 1.11 ) }
    dend_6 { pt3dadd( -28.5093, 152.152, -4.34835, 0.83 ) }
    dend_6 { pt3dadd( -28.9158, 153.205, -4.10324, 0.83 ) }
    dend_6 { pt3dadd( -29.7037, 155.356, -3.64932, 0.83 ) }
    dend_6 { pt3dadd( -30.6158, 157.861, -2.94004, 0.83 ) }
    dend_6 { pt3dadd( -31.1539, 159.444, -2.33942, 0.83 ) }
    dend_6 { pt3dadd( -32.2019, 162.844, -0.688111, 0.83 ) }
    dend_6 { pt3dadd( -32.7526, 164.827, 0.439379, 0.83 ) }
    dend_6 { pt3dadd( -32.9618, 165.676, 1.02151, 0.83 ) }
    dend_6 { pt3dadd( -34.2849, 171.737, 5.67913, 0.83 ) }
    dend_6 { pt3dadd( -34.6707, 173.842, 7.31181, 0.83 ) }
    dend_6 { pt3dadd( -35.387, 177.812, 10.5539, 0.83 ) }
    dend_6 { pt3dadd( -35.7239, 179.794, 12.2401, 0.83 ) }
    dend_6 { pt3dadd( -36.2529, 183.653, 15.6098, 0.83 ) }
    dend_6 { pt3dadd( -36.3625, 184.829, 16.5788, 0.83 ) }
    dend_6 { pt3dadd( -36.4209, 187.499, 18.2433, 0.83 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_6 { pt3dadd( -38.077, 197.76, 19.8065, 0.83 ) }
    dend_6 { pt3dadd( -39.6297, 207.933, 21.9431, 0.83 ) }
    dend_6 { pt3dadd( -41.299, 217.77, 25.2496, 0.83 ) }
    dend_6 { pt3dadd( -42.0485, 228.106, 27.0013, 0.83 ) }
    dend_6 { pt3dadd( -44.6814, 238.281, 26.9673, 0.83 ) }
    dend_6 { pt3dadd( -48.3544, 247.951, 25.1011, 0.83 ) }
    dend_6 { pt3dadd( -50.2394, 258.177, 23.5693, 0.83 ) }
    dend_6 { pt3dadd( -51.8961, 268.512, 22.6068, 0.83 ) }
    dend_6 { pt3dadd( -53.1781, 278.801, 20.8887, 0.83 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 9/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 2.01289, 71.81, 1.10519, 0.83 ) }
    dend_5 { pt3dadd( 4.0173, 76.6236, 0.103575, 0.83 ) }
    dend_5 { pt3dadd( 6.48979, 83.081, -0.830493, 0.83 ) }
    dend_5 { pt3dadd( 7.24577, 85.1387, -1.0328, 0.83 ) }
    dend_5 { pt3dadd( 8.31442, 88.0439, -1.22024, 0.83 ) }
    dend_5 { pt3dadd( 9.526, 91.3461, -1.34606, 0.83 ) }
    dend_5 { pt3dadd( 11.1313, 95.7743, -1.43617, 0.83 ) }
    dend_5 { pt3dadd( 12.0473, 98.391, -1.28772, 0.83 ) }
    dend_5 { pt3dadd( 13.1994, 101.596, -0.811021, 0.83 ) }
    dend_5 { pt3dadd( 14.2361, 104.306, -0.366611, 0.83 ) }
    dend_5 { pt3dadd( 15.2302, 106.554, 0.041445, 0.83 ) }
    dend_5 { pt3dadd( 15.6892, 107.528, 0.239923, 0.83 ) }
    dend_5 { pt3dadd( 17.2561, 110.768, 0.996844, 0.83 ) }
    dend_5 { pt3dadd( 20.0077, 116.272, 2.50798, 0.83 ) }
    dend_5 { pt3dadd( 20.9419, 118.267, 3.11457, 1.11 ) }
    dend_5 { pt3dadd( 22.8884, 122.6, 4.48897, 1.11 ) }
    dend_5 { pt3dadd( 24.924, 127.273, 5.97431, 1.11 ) }
    dend_5 { pt3dadd( 26.065, 129.96, 6.81098, 1.11 ) }
    dend_5 { pt3dadd( 26.7691, 131.716, 7.33879, 1.11 ) }
    dend_5 { pt3dadd( 28.4839, 136.093, 8.58443, 0.83 ) }
    dend_5 { pt3dadd( 29.7606, 139.413, 9.49754, 0.83 ) }
    dend_5 { pt3dadd( 30.7804, 142.118, 10.1467, 0.83 ) }
    dend_5 { pt3dadd( 31.8793, 144.777, 10.638, 0.83 ) }
    dend_5 { pt3dadd( 32.7266, 146.58, 10.8883, 0.83 ) }
    dend_5 { pt3dadd( 33.4065, 147.933, 11.0531, 0.83 ) }
    dend_5 { pt3dadd( 34.1525, 149.276, 11.1944, 0.83 ) }
    dend_5 { pt3dadd( 35.2776, 151.294, 11.4086, 0.83 ) }
    dend_5 { pt3dadd( 36.4821, 153.386, 11.6411, 0.83 ) }
    dend_5 { pt3dadd( 37.8271, 155.682, 11.9875, 0.83 ) }
    dend_5 { pt3dadd( 39.0564, 157.815, 12.353, 0.83 ) }
    dend_5 { pt3dadd( 39.9945, 159.486, 12.6541, 0.83 ) }
    dend_5 { pt3dadd( 40.8193, 160.975, 12.928, 0.83 ) }
    dend_5 { pt3dadd( 41.6798, 162.433, 13.2027, 0.83 ) }
    dend_5 { pt3dadd( 44.7411, 167.708, 14.1541, 0.55 ) }
    dend_5 { pt3dadd( 45.889, 169.682, 14.496, 0.55 ) }
    dend_5 { pt3dadd( 47.5994, 172.579, 14.9894, 0.55 ) }
    dend_5 { pt3dadd( 49.3854, 175.726, 15.5958, 1.11 ) }
    dend_5 { pt3dadd( 51.5598, 179.72, 16.4233, 0.55 ) }
    dend_5 { pt3dadd( 52.6196, 181.843, 16.9265, 0.55 ) }
    dend_5 { pt3dadd( 53.7872, 184.476, 17.6124, 0.55 ) }
    dend_5 { pt3dadd( 54.255, 185.612, 17.9411, 0.55 ) }
    dend_5 { pt3dadd( 55.7187, 189.287, 18.9885, 0.55 ) }
    dend_5 { pt3dadd( 56.1251, 190.407, 19.332, 0.55 ) }
    dend_5 { pt3dadd( 58.1669, 196.752, 21.3713, 0.55 ) }
    dend_5 { pt3dadd( 59.6074, 201.158, 22.8119, 0.83 ) }
    dend_5 { pt3dadd( 60.038, 202.477, 23.2326, 0.83 ) }
    dend_5 { pt3dadd( 62.2026, 208.964, 25.1771, 1.11 ) }
    dend_5 { pt3dadd( 63.9522, 214.028, 26.5588, 1.11 ) }
    dend_5 { pt3dadd( 65.4838, 218.404, 27.7268, 0.55 ) }
    dend_5 { pt3dadd( 66.2275, 220.521, 28.2492, 0.55 ) }
    dend_5 { pt3dadd( 67.0197, 222.77, 28.7769, 0.55 ) }
    dend_5 { pt3dadd( 67.8762, 225.343, 29.3198, 0.83 ) }
    dend_5 { pt3dadd( 68.5551, 227.517, 29.6953, 0.83 ) }
    dend_5 { pt3dadd( 68.6629, 227.84, 29.7236, 0.28 ) }
    dend_5 { pt3dadd( 69.8602, 231.49, 29.9082, 0.28 ) }
    dend_5 { pt3dadd( 70.3724, 233.363, 29.9786, 0.83 ) }
    dend_5 { pt3dadd( 70.9195, 235.804, 30.1234, 0.83 ) }
    dend_5 { pt3dadd( 71.2682, 237.485, 30.2634, 0.83 ) }
    dend_5 { pt3dadd( 71.5662, 238.859, 30.2931, 0.83 ) }
    dend_5 { pt3dadd( 72.0322, 241.008, 30.2442, 0.83 ) }
    dend_5 { pt3dadd( 72.5742, 243.023, 30.1589, 0.83 ) }
    dend_5 { pt3dadd( 73.4555, 245.892, 30.0148, 0.83 ) }
    dend_5 { pt3dadd( 74.9488, 250.319, 29.7752, 0.55 ) }
    dend_5 { pt3dadd( 76.5941, 254.924, 29.5174, 0.55 ) }
    dend_5 { pt3dadd( 77.8957, 258.376, 29.3294, 1.38 ) }
    dend_5 { pt3dadd( 79.5929, 262.69, 29.1044, 0.55 ) }
    dend_5 { pt3dadd( 80.8436, 265.679, 28.965, 0.55 ) }
    dend_5 { pt3dadd( 81.577, 267.386, 28.8964, 0.55 ) }
    dend_5 { pt3dadd( 82.2077, 268.965, 28.8975, 0.83 ) }
    dend_5 { pt3dadd( 83.1109, 271.595, 29.0468, 0.83 ) }
    dend_5 { pt3dadd( 83.8079, 273.966, 29.1486, 0.83 ) }
    dend_5 { pt3dadd( 84.1958, 275.649, 29.1947, 0.83 ) }
    dend_5 { pt3dadd( 84.9301, 278.512, 29.2907, 0.83 ) }
    dend_5 { pt3dadd( 85.4916, 280.496, 29.3698, 0.83 ) }
    dend_5 { pt3dadd( 86.2398, 282.789, 29.4849, 0.83 ) }
    dend_5 { pt3dadd( 87.1107, 285.104, 29.6285, 0.83 ) }
    dend_5 { pt3dadd( 87.9492, 287.121, 29.7726, 0.83 ) }
    dend_5 { pt3dadd( 89.8241, 291.633, 30.0948, 0.83 ) }
    dend_5 { pt3dadd( 91.7736, 295.998, 30.4388, 0.83 ) }
    dend_5 { pt3dadd( 92.6811, 297.841, 30.6041, 0.83 ) }
    dend_5 { pt3dadd( 93.7085, 299.771, 30.7956, 0.83 ) }
    dend_5 { pt3dadd( 94.6582, 301.536, 30.9731, 0.83 ) }
    dend_5 { pt3dadd( 96.1228, 304.335, 31.2448, 0.83 ) }
    dend_5 { pt3dadd( 101.844, 314.896, 34.4122, 0.83 ) }
    // Section: dend_31, id: dend_31, parent: dend_29 (entry count 93/100)
    dend_31 { pt3dclear() }
    dend_31 { pt3dadd( 16.0926, -64.8747, -29.7677, 0.55 ) }
    dend_31 { pt3dadd( 16.2648, -65.3825, -31.6178, 0.55 ) }
    dend_31 { pt3dadd( 16.3783, -65.7588, -32.8485, 0.55 ) }
    dend_31 { pt3dadd( 16.8229, -66.9645, -36.8898, 0.83 ) }
    dend_31 { pt3dadd( 16.9966, -67.56, -38.8843, 0.28 ) }
    dend_31 { pt3dadd( 17.1026, -67.9944, -40.3008, 0.55 ) }
    dend_31 { pt3dadd( 17.6633, -69.9092, -46.0026, 0.28 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_9()
}

proc basic_shape_9() {
    dend_31 { pt3dadd( 17.7963, -70.343, -47.2437, 0.83 ) }
    dend_31 { pt3dadd( 18.3397, -72.21, -52.1786, 0.55 ) }
    dend_31 { pt3dadd( 18.4588, -72.721, -53.361, 0.55 ) }
    dend_31 { pt3dadd( 18.6738, -73.6035, -55.4107, 0.55 ) }
    dend_31 { pt3dadd( 19.1886, -75.346, -59.6889, 0.55 ) }
    dend_31 { pt3dadd( 19.4583, -76.1803, -61.8796, 0.55 ) }
    dend_31 { pt3dadd( 19.7793, -76.8095, -63.7824, 0.55 ) }
    dend_31 { pt3dadd( 20.0914, -77.3508, -65.518, 0.28 ) }
    dend_31 { pt3dadd( 21.1465, -78.8189, -70.6773, 0.83 ) }
    dend_31 { pt3dadd( 22.4345, -80.3961, -76.8109, 0.55 ) }
    dend_31 { pt3dadd( 23.4425, -81.4925, -81.5101, 0.55 ) }
    dend_31 { pt3dadd( 24.474, -82.4868, -85.9678, 0.28 ) }
    dend_31 { pt3dadd( 24.7972, -82.7933, -87.4135, 0.55 ) }
    dend_31 { pt3dadd( 25.7951, -83.7538, -91.948, 0.28 ) }
    dend_31 { pt3dadd( 26.0429, -84.0186, -93.0888, 0.55 ) }
    dend_31 { pt3dadd( 26.3758, -84.4892, -94.8502, 0.28 ) }
    dend_31 { pt3dadd( 26.5388, -84.8172, -95.7874, 0.55 ) }
    dend_31 { pt3dadd( 26.9376, -85.8472, -98.0737, 0.28 ) }
    dend_31 { pt3dadd( 27.0969, -86.2198, -98.7867, 0.55 ) }
    dend_31 { pt3dadd( 27.5038, -87.1146, -100.151, 0.28 ) }
    dend_31 { pt3dadd( 27.7656, -87.5406, -100.732, 0.55 ) }
    dend_31 { pt3dadd( 28.8234, -88.9619, -102.41, 0.28 ) }
    dend_31 { pt3dadd( 29.5461, -89.8211, -103.358, 0.55 ) }
    dend_31 { pt3dadd( 30.1626, -90.511, -104.09, 0.28 ) }
    dend_31 { pt3dadd( 31.3191, -91.8037, -105.441, 0.55 ) }
    dend_31 { pt3dadd( 32.3259, -92.9695, -106.742, 0.28 ) }
    dend_31 { pt3dadd( 33.0154, -93.8116, -107.754, 0.55 ) }
    dend_31 { pt3dadd( 33.8426, -95.04, -109.299, 0.28 ) }
    dend_31 { pt3dadd( 34.2913, -95.8293, -110.39, 0.55 ) }
    dend_31 { pt3dadd( 34.7259, -96.7518, -111.668, 0.28 ) }
    dend_31 { pt3dadd( 35.3362, -98.3734, -113.916, 0.55 ) }
    dend_31 { pt3dadd( 35.9799, -100.457, -116.778, 0.28 ) }
    dend_31 { pt3dadd( 36.3386, -101.769, -118.649, 0.55 ) }
    dend_31 { pt3dadd( 36.8758, -103.923, -121.615, 0.28 ) }
    dend_31 { pt3dadd( 37.0405, -104.525, -122.481, 0.55 ) }
    dend_31 { pt3dadd( 37.319, -105.551, -124.007, 0.28 ) }
    dend_31 { pt3dadd( 37.6464, -106.609, -125.592, 0.55 ) }
    dend_31 { pt3dadd( 38.2452, -108.504, -128.494, 0.83 ) }
    dend_31 { pt3dadd( 38.4957, -109.172, -129.603, 0.83 ) }
    dend_31 { pt3dadd( 39.3864, -111.699, -133.823, 0.28 ) }
    dend_31 { pt3dadd( 39.5263, -112.054, -134.481, 0.55 ) }
    dend_31 { pt3dadd( 39.9508, -113.178, -136.596, 0.28 ) }
    dend_31 { pt3dadd( 40.2912, -113.922, -138.082, 0.55 ) }
    dend_31 { pt3dadd( 40.936, -115.271, -140.719, 0.28 ) }
    dend_31 { pt3dadd( 41.4084, -116.194, -142.538, 0.83 ) }
    dend_31 { pt3dadd( 42.5578, -118.595, -146.781, 0.28 ) }
    dend_31 { pt3dadd( 42.9188, -119.342, -147.998, 0.83 ) }
    dend_31 { pt3dadd( 44.071, -121.912, -151.711, 0.28 ) }
    dend_31 { pt3dadd( 44.2911, -122.392, -152.29, 0.55 ) }
    dend_31 { pt3dadd( 44.4897, -122.821, -152.713, 0.28 ) }
    dend_31 { pt3dadd( 45.1697, -124.224, -153.86, 0.28 ) }
    dend_31 { pt3dadd( 45.4215, -125.226, -153.963, 0.55 ) }
    dend_31 { pt3dadd( 45.5413, -126.995, -153.445, 0.28 ) }
    dend_31 { pt3dadd( 45.2732, -128.944, -152.3, 0.55 ) }
    // Section: dend_30, id: dend_30, parent: dend_29 (entry count 54/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( 16.0926, -64.8747, -29.7677, 0.55 ) }
    dend_30 { pt3dadd( 16.8161, -68.073, -29.3597, 0.55 ) }
    dend_30 { pt3dadd( 17.4132, -70.2494, -29.0215, 0.55 ) }
    dend_30 { pt3dadd( 17.5058, -70.5522, -28.9689, 0.28 ) }
    dend_30 { pt3dadd( 18.4082, -73.3011, -28.4542, 0.55 ) }
    dend_30 { pt3dadd( 19.3587, -76.4173, -27.8826, 0.55 ) }
    dend_30 { pt3dadd( 19.6555, -77.3853, -27.713, 0.28 ) }
    dend_30 { pt3dadd( 20.1737, -79.1029, -27.416, 0.55 ) }
    dend_30 { pt3dadd( 20.4775, -80.3979, -27.2652, 0.28 ) }
    dend_30 { pt3dadd( 20.7637, -81.7019, -27.1745, 0.55 ) }
    dend_30 { pt3dadd( 21.1027, -83.3424, -27.1387, 0.28 ) }
    dend_30 { pt3dadd( 21.767, -87.0107, -27.2336, 0.55 ) }
    dend_30 { pt3dadd( 21.9678, -88.3334, -27.3063, 0.28 ) }
    dend_30 { pt3dadd( 22.1965, -90.0899, -27.4307, 0.55 ) }
    dend_30 { pt3dadd( 22.3745, -91.6821, -27.5441, 0.28 ) }
    dend_30 { pt3dadd( 22.448, -92.1371, -27.5929, 0.55 ) }
    dend_30 { pt3dadd( 22.9565, -94.7384, -27.9068, 0.28 ) }
    dend_30 { pt3dadd( 23.3571, -96.6489, -28.1801, 0.55 ) }
    dend_30 { pt3dadd( 23.7932, -98.5216, -28.4486, 0.55 ) }
    dend_30 { pt3dadd( 24.5433, -101.893, -28.9237, 0.55 ) }
    dend_30 { pt3dadd( 25.1753, -105.354, -29.4667, 0.55 ) }
    dend_30 { pt3dadd( 25.5851, -107.631, -29.9197, 0.55 ) }
    dend_30 { pt3dadd( 25.9537, -109.427, -30.3647, 0.28 ) }
    dend_30 { pt3dadd( 26.1191, -110.097, -30.5952, 0.55 ) }
    dend_30 { pt3dadd( 26.4276, -111.188, -31.0293, 0.28 ) }
    dend_30 { pt3dadd( 26.9104, -112.606, -31.6286, 0.55 ) }
    dend_30 { pt3dadd( 27.6535, -114.769, -32.5431, 0.28 ) }
    dend_30 { pt3dadd( 29.2326, -118.936, -34.4123, 0.55 ) }
    dend_30 { pt3dadd( 30.8582, -123.066, -36.238, 0.28 ) }
    dend_30 { pt3dadd( 31.2107, -123.883, -36.6122, 0.55 ) }
    dend_30 { pt3dadd( 31.9882, -125.622, -37.4203, 0.28 ) }
    dend_30 { pt3dadd( 32.3318, -126.402, -37.7427, 0.55 ) }
    dend_30 { pt3dadd( 32.6212, -127.224, -38.0064, 0.28 ) }
    dend_30 { pt3dadd( 33.0934, -128.728, -38.3822, 0.55 ) }
    dend_30 { pt3dadd( 33.6371, -131.07, -38.7719, 0.28 ) }
    dend_30 { pt3dadd( 33.9136, -132.653, -39.0491, 0.55 ) }
    dend_30 { pt3dadd( 34.1298, -134.926, -39.4665, 0.28 ) }
    dend_30 { pt3dadd( 34.2824, -137.542, -40.0826, 0.28 ) }
    dend_30 { pt3dadd( 34.3329, -140.37, -40.8868, 0.55 ) }
    dend_30 { pt3dadd( 34.247, -143.543, -41.9424, 0.55 ) }
    dend_30 { pt3dadd( 34.1115, -145.989, -42.8911, 0.28 ) }
    dend_30 { pt3dadd( 34.0506, -148.471, -44.0623, 0.55 ) }
    dend_30 { pt3dadd( 34.0109, -151.132, -45.4571, 0.55 ) }
    dend_30 { pt3dadd( 34.0187, -152.941, -46.4562, 0.28 ) }
    dend_30 { pt3dadd( 34.1117, -155.278, -47.7155, 0.28 ) }
    dend_30 { pt3dadd( 34.4262, -159.092, -49.5635, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_10()
}

proc basic_shape_10() {
    dend_30 { pt3dadd( 34.9634, -163.696, -51.4291, 0.28 ) }
    dend_30 { pt3dadd( 35.3304, -166.31, -52.2681, 0.83 ) }
    dend_30 { pt3dadd( 35.5415, -167.708, -52.6021, 0.55 ) }
    dend_30 { pt3dadd( 36.1223, -171.691, -53.337, 0.28 ) }
    dend_30 { pt3dadd( 36.6169, -175.584, -53.7027, 0.55 ) }
    dend_30 { pt3dadd( 36.9199, -178.491, -53.5999, 0.28 ) }
    dend_30 { pt3dadd( 37.065, -180.43, -53.3211, 0.55 ) }
    dend_30 { pt3dadd( 37.1541, -182.208, -52.9402, 0.28 ) }
    dend_30 { pt3dadd( 37.1681, -184.007, -52.4619, 0.55 ) }
    dend_30 { pt3dadd( 37.0629, -186.794, -51.6447, 0.28 ) }
    dend_30 { pt3dadd( 37.0174, -189.406, -51.1659, 0.28 ) }
    dend_30 { pt3dadd( 37.0132, -190.376, -51.0527, 0.55 ) }
    dend_30 { pt3dadd( 37.0502, -193.119, -50.92, 0.28 ) }
    dend_30 { pt3dadd( 37.094, -194.586, -50.9756, 0.55 ) }
    dend_30 { pt3dadd( 37.379, -197.923, -51.4944, 0.28 ) }
    dend_30 { pt3dadd( 37.8944, -202.297, -52.8444, 0.55 ) }
    dend_30 { pt3dadd( 38.0679, -203.674, -53.4063, 0.28 ) }
    dend_30 { pt3dadd( 38.3675, -205.194, -54.1923, 0.55 ) }
    dend_30 { pt3dadd( 38.9058, -207.173, -55.3514, 0.28 ) }
    dend_30 { pt3dadd( 39.7138, -209.641, -56.8749, 0.55 ) }
    dend_30 { pt3dadd( 40.4785, -211.865, -58.2549, 0.28 ) }
    dend_30 { pt3dadd( 40.866, -213.083, -58.9216, 0.55 ) }
    dend_30 { pt3dadd( 41.9108, -216.411, -60.5605, 0.28 ) }
    dend_30 { pt3dadd( 42.7872, -218.911, -61.759, 0.83 ) }
    dend_30 { pt3dadd( 43.3947, -220.657, -62.5156, 0.28 ) }
    dend_30 { pt3dadd( 43.8569, -222.298, -63.2287, 0.55 ) }
    dend_30 { pt3dadd( 44.1184, -223.54, -63.7778, 0.28 ) }
    dend_30 { pt3dadd( 44.4789, -225.501, -64.6671, 0.55 ) }
    dend_30 { pt3dadd( 45.0317, -230.321, -66.8981, 0.28 ) }
    dend_30 { pt3dadd( 45.1315, -231.327, -67.4791, 0.55 ) }
    dend_30 { pt3dadd( 45.4413, -234.766, -69.7787, 0.28 ) }
    dend_30 { pt3dadd( 45.5981, -236.115, -70.8584, 0.55 ) }
    // Section: dend_28, id: dend_28, parent: dend_24 (entry count 32/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 38.9799, -78.2128, -43.8564, 0.55 ) }
    dend_28 { pt3dadd( 40.9904, -81.3613, -46.4906, 0.55 ) }
    dend_28 { pt3dadd( 41.4371, -82.1572, -47.0844, 0.83 ) }
    dend_28 { pt3dadd( 42.4902, -84.4569, -48.8033, 0.28 ) }
    dend_28 { pt3dadd( 43.1153, -85.874, -49.9431, 0.55 ) }
    dend_28 { pt3dadd( 43.8598, -87.5385, -51.3417, 0.28 ) }
    dend_28 { pt3dadd( 44.3706, -88.8969, -52.5474, 0.55 ) }
    dend_28 { pt3dadd( 44.7581, -90.0805, -53.6061, 0.28 ) }
    dend_28 { pt3dadd( 45.3128, -92.0669, -55.4134, 0.55 ) }
    dend_28 { pt3dadd( 45.7337, -93.8909, -57.1069, 0.28 ) }
    dend_28 { pt3dadd( 46.1515, -95.244, -58.5786, 0.55 ) }
    dend_28 { pt3dadd( 47.0162, -97.8667, -61.8079, 0.55 ) }
    dend_28 { pt3dadd( 47.6453, -99.3568, -63.8798, 0.55 ) }
    dend_28 { pt3dadd( 48.1558, -100.368, -65.3786, 0.28 ) }
    dend_28 { pt3dadd( 49.3708, -102.26, -68.4159, 0.55 ) }
    dend_28 { pt3dadd( 51.4823, -105.14, -73.2522, 0.83 ) }
    dend_28 { pt3dadd( 52.4786, -106.285, -75.3833, 0.55 ) }
    dend_28 { pt3dadd( 54.1814, -107.886, -78.557, 0.28 ) }
    dend_28 { pt3dadd( 54.6518, -108.304, -79.3886, 0.83 ) }
    dend_28 { pt3dadd( 56.9082, -110.233, -83.0353, 0.28 ) }
    dend_28 { pt3dadd( 57.4921, -110.762, -83.9031, 0.55 ) }
    dend_28 { pt3dadd( 59.1666, -112.511, -86.1753, 0.28 ) }
    dend_28 { pt3dadd( 60.2505, -113.739, -87.5181, 0.55 ) }
    dend_28 { pt3dadd( 61.3325, -115.237, -88.87, 0.28 ) }
    dend_28 { pt3dadd( 62.0948, -116.5, -89.7241, 0.55 ) }
    dend_28 { pt3dadd( 62.8921, -118.328, -90.4328, 0.28 ) }
    dend_28 { pt3dadd( 63.2904, -119.49, -90.6373, 0.55 ) }
    dend_28 { pt3dadd( 63.6126, -120.64, -90.5616, 0.28 ) }
    dend_28 { pt3dadd( 63.8828, -121.915, -90.327, 0.55 ) }
    dend_28 { pt3dadd( 64.4208, -124.363, -89.555, 0.28 ) }
    dend_28 { pt3dadd( 64.6206, -125.104, -89.3534, 0.55 ) }
    dend_28 { pt3dadd( 65.2762, -127.372, -88.8487, 0.28 ) }
    dend_28 { pt3dadd( 65.6581, -128.451, -88.8659, 0.55 ) }
    dend_28 { pt3dadd( 66.1806, -129.747, -89.1825, 0.28 ) }
    dend_28 { pt3dadd( 66.59, -130.69, -89.6553, 0.55 ) }
    dend_28 { pt3dadd( 67.8453, -133.59, -91.3427, 0.28 ) }
    dend_28 { pt3dadd( 68.2591, -134.452, -91.8992, 0.83 ) }
    dend_28 { pt3dadd( 69.5811, -137.153, -93.7912, 0.28 ) }
    dend_28 { pt3dadd( 70.0127, -138.064, -94.4302, 0.55 ) }
    dend_28 { pt3dadd( 70.8356, -139.858, -95.6952, 0.28 ) }
    dend_28 { pt3dadd( 72.0104, -142.68, -97.5357, 0.55 ) }
    dend_28 { pt3dadd( 73.2502, -145.927, -99.353, 0.28 ) }
    dend_28 { pt3dadd( 73.6127, -146.986, -99.865, 0.55 ) }
    dend_28 { pt3dadd( 74.1283, -148.671, -100.547, 0.28 ) }
    dend_28 { pt3dadd( 74.686, -150.461, -101.282, 0.55 ) }
    dend_28 { pt3dadd( 75.0798, -151.739, -101.79, 0.28 ) }
    dend_28 { pt3dadd( 75.3045, -152.488, -102.132, 0.55 ) }
    dend_28 { pt3dadd( 75.7716, -154.234, -102.774, 0.28 ) }
    dend_28 { pt3dadd( 76.4963, -156.655, -103.52, 0.83 ) }
    dend_28 { pt3dadd( 77.227, -158.935, -104.125, 0.28 ) }
    dend_28 { pt3dadd( 77.806, -160.699, -104.529, 0.28 ) }
    dend_28 { pt3dadd( 78.373, -162.471, -104.919, 0.28 ) }
    dend_28 { pt3dadd( 78.9072, -164.412, -105.316, 0.55 ) }
    dend_28 { pt3dadd( 79.2355, -165.811, -105.558, 0.28 ) }
    dend_28 { pt3dadd( 79.2818, -166.072, -105.576, 0.55 ) }
    dend_28 { pt3dadd( 79.6518, -168.38, -105.784, 0.28 ) }
    dend_28 { pt3dadd( 80.0181, -170.899, -106.162, 0.28 ) }
    dend_28 { pt3dadd( 80.2662, -172.287, -106.423, 0.55 ) }
    dend_28 { pt3dadd( 80.4436, -173.08, -106.637, 0.28 ) }
    dend_28 { pt3dadd( 80.8259, -174.599, -107.084, 0.55 ) }
    dend_28 { pt3dadd( 81.6192, -177.435, -107.882, 0.28 ) }
    dend_28 { pt3dadd( 81.8547, -178.131, -108.057, 0.55 ) }
    dend_28 { pt3dadd( 82.2687, -179.224, -108.295, 0.28 ) }
    dend_28 { pt3dadd( 82.4776, -179.716, -108.356, 0.55 ) }
    dend_28 { pt3dadd( 82.9697, -180.987, -108.402, 0.28 ) }
    dend_28 { pt3dadd( 83.326, -182.121, -108.325, 0.55 ) }
    dend_28 { pt3dadd( 83.5846, -183.185, -108.17, 0.28 ) }
    dend_28 { pt3dadd( 83.6479, -183.439, -108.132, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_11()
}

proc basic_shape_11() {
    dend_28 { pt3dadd( 84.0168, -185.17, -107.909, 0.28 ) }
    dend_28 { pt3dadd( 84.2951, -186.478, -107.743, 0.55 ) }
    dend_28 { pt3dadd( 84.8016, -188.871, -107.442, 0.28 ) }
    dend_28 { pt3dadd( 85.0661, -190.016, -107.286, 0.83 ) }
    dend_28 { pt3dadd( 85.405, -191.52, -107.085, 0.28 ) }
    dend_28 { pt3dadd( 85.7417, -193.012, -106.882, 0.55 ) }
    dend_28 { pt3dadd( 86.0155, -194.412, -106.712, 0.28 ) }
    dend_28 { pt3dadd( 86.305, -195.702, -106.533, 0.55 ) }
    dend_28 { pt3dadd( 86.5165, -196.629, -106.399, 0.28 ) }
    dend_28 { pt3dadd( 86.688, -197.449, -106.289, 0.55 ) }
    dend_28 { pt3dadd( 87.0967, -199.791, -106.015, 0.28 ) }
    dend_28 { pt3dadd( 87.3052, -201.093, -105.85, 0.55 ) }
    dend_28 { pt3dadd( 87.5029, -202.995, -105.681, 0.28 ) }
    dend_28 { pt3dadd( 87.6178, -203.817, -105.728, 0.55 ) }
    dend_28 { pt3dadd( 87.7818, -205.138, -105.99, 0.28 ) }
    dend_28 { pt3dadd( 87.8111, -205.405, -106.045, 0.55 ) }
    dend_28 { pt3dadd( 87.9403, -206.536, -106.316, 0.28 ) }
    dend_28 { pt3dadd( 88.1644, -207.745, -106.715, 0.55 ) }
    dend_28 { pt3dadd( 88.8866, -211.206, -108.063, 0.28 ) }
    dend_28 { pt3dadd( 89.4734, -213.6, -109.078, 0.55 ) }
    dend_28 { pt3dadd( 90.1001, -216.098, -110.198, 0.28 ) }
    dend_28 { pt3dadd( 90.3315, -217.091, -110.61, 0.55 ) }
    dend_28 { pt3dadd( 90.9881, -220.293, -111.842, 0.28 ) }
    dend_28 { pt3dadd( 91.2922, -222.157, -112.392, 0.55 ) }
    dend_28 { pt3dadd( 91.4311, -223.63, -112.699, 0.28 ) }
    dend_28 { pt3dadd( 91.5087, -224.581, -112.857, 0.55 ) }
    dend_28 { pt3dadd( 91.705, -227.312, -113.134, 0.28 ) }
    dend_28 { pt3dadd( 91.828, -228.87, -113.199, 0.55 ) }
    dend_28 { pt3dadd( 91.991, -231.094, -113.175, 0.28 ) }
    dend_28 { pt3dadd( 92.1875, -232.636, -113.132, 0.55 ) }
    dend_28 { pt3dadd( 92.4694, -234.498, -113.059, 0.28 ) }
    dend_28 { pt3dadd( 92.864, -236.851, -113.002, 0.55 ) }
    dend_28 { pt3dadd( 93.3977, -239.79, -112.955, 0.28 ) }
    dend_28 { pt3dadd( 93.943, -242.617, -112.881, 0.55 ) }
    dend_28 { pt3dadd( 94.3874, -244.948, -112.821, 0.28 ) }
    dend_28 { pt3dadd( 94.7888, -247.085, -112.711, 0.55 ) }
    dend_28 { pt3dadd( 94.9778, -248.199, -112.628, 0.28 ) }
    dend_28 { pt3dadd( 95.2151, -249.854, -112.426, 0.55 ) }
    dend_28 { pt3dadd( 95.5707, -252.181, -111.955, 0.28 ) }
    dend_28 { pt3dadd( 95.6852, -252.765, -111.824, 0.55 ) }
    dend_28 { pt3dadd( 96.0897, -254.637, -111.412, 0.28 ) }
    dend_28 { pt3dadd( 96.3175, -255.434, -111.227, 0.55 ) }
    dend_28 { pt3dadd( 96.6045, -256.496, -111.01, 0.28 ) }
    dend_28 { pt3dadd( 96.8873, -257.847, -110.811, 0.55 ) }
    dend_28 { pt3dadd( 96.9575, -258.463, -110.759, 0.28 ) }
    dend_28 { pt3dadd( 96.9575, -259.256, -110.746, 0.55 ) }
    dend_28 { pt3dadd( 96.2684, -263.186, -111.092, 0.28 ) }
    dend_28 { pt3dadd( 95.8329, -265.001, -111.314, 0.55 ) }
    dend_28 { pt3dadd( 95.4277, -266.257, -111.522, 0.28 ) }
    dend_28 { pt3dadd( 94.8993, -267.484, -111.774, 0.55 ) }
    dend_28 { pt3dadd( 94.1473, -268.864, -112.13, 0.28 ) }
    dend_28 { pt3dadd( 93.0025, -270.251, -112.707, 0.55 ) }
    // Section: dend_25, id: dend_25, parent: dend_24 (entry count 52/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 38.9799, -78.2128, -43.8564, 0.28 ) }
    dend_25 { pt3dadd( 39.6914, -78.6419, -44.5612, 0.28 ) }
    dend_25 { pt3dadd( 40.3847, -79.0369, -45.1979, 0.55 ) }
    dend_25 { pt3dadd( 40.7161, -79.1882, -45.512, 0.28 ) }
    dend_25 { pt3dadd( 41.004, -79.3165, -45.7811, 0.55 ) }
    dend_25 { pt3dadd( 43.825, -80.618, -48.3918, 0.28 ) }
    dend_25 { pt3dadd( 44.2572, -80.8231, -48.7762, 0.55 ) }
    dend_25 { pt3dadd( 45.4396, -81.4331, -49.8346, 0.55 ) }
    dend_25 { pt3dadd( 46.6407, -82.0864, -50.9071, 0.55 ) }
    dend_25 { pt3dadd( 47.9857, -82.872, -52.0475, 0.83 ) }
    dend_25 { pt3dadd( 48.9621, -83.477, -52.7832, 0.28 ) }
    dend_25 { pt3dadd( 49.9437, -84.1159, -53.3544, 0.55 ) }
    dend_25 { pt3dadd( 51.0515, -84.8902, -53.9539, 0.55 ) }
    dend_25 { pt3dadd( 52.2157, -85.8373, -54.504, 0.28 ) }
    dend_25 { pt3dadd( 52.7941, -86.3449, -54.7326, 0.55 ) }
    dend_25 { pt3dadd( 53.7894, -87.1943, -55.0347, 0.28 ) }
    dend_25 { pt3dadd( 54.3548, -87.6367, -55.1883, 0.55 ) }
    dend_25 { pt3dadd( 55.6302, -88.596, -55.5421, 0.28 ) }
    dend_25 { pt3dadd( 56.2824, -89.0465, -55.7355, 0.55 ) }
    dend_25 { pt3dadd( 57.2527, -89.6668, -55.9958, 0.28 ) }
    dend_25 { pt3dadd( 58.6952, -90.5549, -56.3967, 0.83 ) }
    dend_25 { pt3dadd( 61.1995, -92.0772, -57.111, 0.28 ) }
    dend_25 { pt3dadd( 62.2658, -92.6904, -57.4265, 0.55 ) }
    dend_25 { pt3dadd( 64.0891, -93.6537, -57.9495, 0.28 ) }
    dend_25 { pt3dadd( 64.8181, -94.0178, -58.1708, 0.55 ) }
    // Section: dend_27, id: dend_27, parent: dend_25 (entry count 77/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( 64.8181, -94.0178, -58.1708, 0.28 ) }
    dend_27 { pt3dadd( 66.0668, -94.8869, -58.5955, 0.28 ) }
    dend_27 { pt3dadd( 66.4935, -95.1029, -58.7813, 0.55 ) }
    dend_27 { pt3dadd( 68.4491, -95.9517, -59.5698, 0.28 ) }
    dend_27 { pt3dadd( 69.9436, -96.6104, -60.1125, 0.55 ) }
    dend_27 { pt3dadd( 71.5916, -97.3784, -60.8014, 0.28 ) }
    dend_27 { pt3dadd( 71.9795, -97.566, -60.9697, 0.55 ) }
    dend_27 { pt3dadd( 75.1793, -99.0608, -62.6024, 0.28 ) }
    dend_27 { pt3dadd( 76.824, -99.7601, -63.5473, 0.55 ) }
    dend_27 { pt3dadd( 78.6162, -100.523, -64.6954, 0.28 ) }
    dend_27 { pt3dadd( 81.1763, -101.654, -66.4561, 0.55 ) }
    dend_27 { pt3dadd( 83.06, -102.581, -67.8687, 0.55 ) }
    dend_27 { pt3dadd( 86.4973, -104.421, -70.5175, 0.55 ) }
    dend_27 { pt3dadd( 89.1045, -105.879, -72.5436, 0.55 ) }
    dend_27 { pt3dadd( 91.1833, -107.063, -74.1704, 0.28 ) }
    dend_27 { pt3dadd( 92.3412, -107.701, -75.0322, 0.55 ) }
    dend_27 { pt3dadd( 95.7418, -109.616, -77.3581, 0.28 ) }
    dend_27 { pt3dadd( 96.9886, -110.333, -78.1775, 0.83 ) }
    dend_27 { pt3dadd( 99.7904, -111.898, -79.7991, 0.28 ) }
    dend_27 { pt3dadd( 100.511, -112.3, -80.189, 0.55 ) }
    dend_27 { pt3dadd( 101.666, -112.879, -80.82, 0.55 ) }
    dend_27 { pt3dadd( 104.418, -114.171, -82.5032, 0.55 ) }
    dend_27 { pt3dadd( 105.46, -114.595, -83.2468, 0.55 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_12()
}

proc basic_shape_12() {
    dend_27 { pt3dadd( 107.556, -115.479, -84.9723, 0.28 ) }
    dend_27 { pt3dadd( 108.825, -116.002, -86.1335, 0.55 ) }
    dend_27 { pt3dadd( 111.454, -117.079, -88.5697, 0.28 ) }
    dend_27 { pt3dadd( 113.448, -117.953, -90.4286, 0.55 ) }
    dend_27 { pt3dadd( 118.006, -119.972, -94.6756, 0.28 ) }
    dend_27 { pt3dadd( 119.504, -120.691, -96.1382, 0.55 ) }
    dend_27 { pt3dadd( 123.774, -122.831, -100.426, 0.28 ) }
    dend_27 { pt3dadd( 125.463, -123.665, -102.118, 0.55 ) }
    dend_27 { pt3dadd( 127.445, -124.652, -104.023, 0.55 ) }
    dend_27 { pt3dadd( 130.155, -126.062, -106.53, 0.28 ) }
    dend_27 { pt3dadd( 133.52, -127.891, -109.556, 0.55 ) }
    dend_27 { pt3dadd( 134.552, -128.47, -110.481, 0.55 ) }
    dend_27 { pt3dadd( 137.772, -130.422, -113.383, 0.28 ) }
    dend_27 { pt3dadd( 138.581, -130.913, -114.143, 0.55 ) }
    dend_27 { pt3dadd( 140.306, -131.933, -115.77, 0.28 ) }
    dend_27 { pt3dadd( 141.533, -132.723, -116.852, 0.55 ) }
    dend_27 { pt3dadd( 142.781, -133.557, -117.873, 0.28 ) }
    dend_27 { pt3dadd( 144.139, -134.557, -118.966, 0.55 ) }
    dend_27 { pt3dadd( 145.932, -136.035, -120.29, 0.28 ) }
    dend_27 { pt3dadd( 147.249, -137.172, -121.134, 0.55 ) }
    dend_27 { pt3dadd( 149.815, -139.589, -122.425, 0.28 ) }
    dend_27 { pt3dadd( 151.724, -140.957, -123.154, 0.55 ) }
    dend_27 { pt3dadd( 152.979, -141.757, -123.512, 0.28 ) }
    dend_27 { pt3dadd( 154.062, -142.413, -123.691, 0.55 ) }
    dend_27 { pt3dadd( 155.118, -143.001, -123.794, 0.28 ) }
    dend_27 { pt3dadd( 157.436, -144.121, -124.219, 0.55 ) }
    dend_27 { pt3dadd( 162.099, -145.835, -125.847, 0.55 ) }
    // Section: dend_26, id: dend_26, parent: dend_25 (entry count 27/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 64.8181, -94.0178, -58.1708, 0.55 ) }
    dend_26 { pt3dadd( 65.9889, -93.6836, -57.1061, 0.55 ) }
    dend_26 { pt3dadd( 68.219, -93.1402, -55.2697, 0.55 ) }
    dend_26 { pt3dadd( 69.4038, -92.8736, -54.287, 0.28 ) }
    dend_26 { pt3dadd( 70.7623, -92.5746, -53.1126, 0.83 ) }
    dend_26 { pt3dadd( 71.6956, -92.4029, -52.366, 0.28 ) }
    dend_26 { pt3dadd( 72.8581, -92.2111, -51.4833, 0.28 ) }
    dend_26 { pt3dadd( 73.4013, -92.1477, -51.1143, 0.55 ) }
    dend_26 { pt3dadd( 75.043, -92.0898, -50.0845, 0.28 ) }
    dend_26 { pt3dadd( 75.9481, -92.0835, -49.5407, 0.55 ) }
    dend_26 { pt3dadd( 77.4073, -92.1548, -48.6323, 0.28 ) }
    dend_26 { pt3dadd( 77.5919, -92.1691, -48.5202, 0.55 ) }
    dend_26 { pt3dadd( 79.3601, -92.2941, -47.1736, 0.28 ) }
    dend_26 { pt3dadd( 80.3897, -92.3643, -46.4219, 0.55 ) }
    dend_26 { pt3dadd( 81.9522, -92.4332, -45.3425, 0.28 ) }
    dend_26 { pt3dadd( 82.6793, -92.4363, -44.8269, 0.55 ) }
    dend_26 { pt3dadd( 84.0902, -92.3187, -43.7823, 0.28 ) }
    dend_26 { pt3dadd( 86.3668, -91.9834, -42.0314, 0.28 ) }
    dend_26 { pt3dadd( 87.7679, -91.6518, -41.0109, 0.55 ) }
    dend_26 { pt3dadd( 88.2586, -91.4747, -40.7141, 0.28 ) }
    dend_26 { pt3dadd( 88.4372, -91.3914, -40.6336, 0.55 ) }
    dend_26 { pt3dadd( 89.7964, -90.545, -40.1108, 0.55 ) }
    dend_26 { pt3dadd( 91.0353, -89.5973, -39.7564, 0.28 ) }
    dend_26 { pt3dadd( 91.7583, -88.9455, -39.591, 0.55 ) }
    dend_26 { pt3dadd( 93.1001, -87.5918, -39.224, 0.28 ) }
    dend_26 { pt3dadd( 93.6919, -86.9899, -39.0726, 0.55 ) }
    dend_26 { pt3dadd( 94.461, -86.1721, -38.8952, 0.28 ) }
    dend_26 { pt3dadd( 95.4256, -85.0646, -38.7133, 0.55 ) }
    dend_26 { pt3dadd( 96.6506, -83.6439, -38.5448, 0.28 ) }
    dend_26 { pt3dadd( 97.4262, -82.6821, -38.3001, 0.55 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_15, dend_0, dend_33, dend_16, dend_14, dend_1, dend_35, dend_34, dend_20, dend_17, dend_2, dend_37, dend_36, dend_32, dend_21, dend_19, dend_18, dend_9, dend_3, dend_23, dend_22, dend_13, dend_10, dend_8, dend_7, dend_4, dend_29, dend_24, dend_12, dend_11, dend_6, dend_5, dend_31, dend_30, dend_28, dend_25, dend_27, dend_26]}
    ModelViewParmSubset_2 = new SectionList()
    dend_15 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_33 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_35 ModelViewParmSubset_2.append()
    dend_34 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_37 ModelViewParmSubset_2.append()
    dend_36 ModelViewParmSubset_2.append()
    dend_32 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_31 ModelViewParmSubset_2.append()
    dend_30 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_15, dend_0, dend_33, dend_16, dend_14, dend_1, dend_35, dend_34, dend_20, dend_17, dend_2, dend_37, dend_36, dend_32, dend_21, dend_19, dend_18, dend_9, dend_3, dend_23, dend_22, dend_13, dend_10, dend_8, dend_7, dend_4, dend_29, dend_24, dend_12, dend_11, dend_6, dend_5, dend_31, dend_30, dend_28, dend_25, dend_27, dend_26]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_33 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_35 ModelViewParmSubset_4.append()
    dend_34 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_37 ModelViewParmSubset_4.append()
    dend_36 ModelViewParmSubset_4.append()
    dend_32 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_31 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()

    // Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_15, dend_0, axon_0, dend_33, dend_16, dend_14, dend_1, axon_1, dend_35, dend_34, dend_20, dend_17, dend_2, dend_37, dend_36, dend_32, dend_21, dend_19, dend_18, dend_9, dend_3, dend_23, dend_22, dend_13, dend_10, dend_8, dend_7, dend_4, dend_29, dend_24, dend_12, dend_11, dend_6, dend_5, dend_31, dend_30, dend_28, dend_25, dend_27, dend_26]}
    ModelViewParmSubset_5 = new SectionList()
    dend_15 ModelViewParmSubset_5.append()
    dend_0 ModelViewParmSubset_5.append()
    axon_0 ModelViewParmSubset_5.append()
    dend_33 ModelViewParmSubset_5.append()
    dend_16 ModelViewParmSubset_5.append()
    dend_14 ModelViewParmSubset_5.append()
    dend_1 ModelViewParmSubset_5.append()
    axon_1 ModelViewParmSubset_5.append()
    dend_35 ModelViewParmSubset_5.append()
    dend_34 ModelViewParmSubset_5.append()
    dend_20 ModelViewParmSubset_5.append()
    dend_17 ModelViewParmSubset_5.append()
    dend_2 ModelViewParmSubset_5.append()
    dend_37 ModelViewParmSubset_5.append()
    dend_36 ModelViewParmSubset_5.append()
    dend_32 ModelViewParmSubset_5.append()
    dend_21 ModelViewParmSubset_5.append()
    dend_19 ModelViewParmSubset_5.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_18 ModelViewParmSubset_5.append()
    dend_9 ModelViewParmSubset_5.append()
    dend_3 ModelViewParmSubset_5.append()
    dend_23 ModelViewParmSubset_5.append()
    dend_22 ModelViewParmSubset_5.append()
    dend_13 ModelViewParmSubset_5.append()
    dend_10 ModelViewParmSubset_5.append()
    dend_8 ModelViewParmSubset_5.append()
    dend_7 ModelViewParmSubset_5.append()
    dend_4 ModelViewParmSubset_5.append()
    dend_29 ModelViewParmSubset_5.append()
    dend_24 ModelViewParmSubset_5.append()
    dend_12 ModelViewParmSubset_5.append()
    dend_11 ModelViewParmSubset_5.append()
    dend_6 ModelViewParmSubset_5.append()
    dend_5 ModelViewParmSubset_5.append()
    dend_31 ModelViewParmSubset_5.append()
    dend_30 ModelViewParmSubset_5.append()
    dend_28 ModelViewParmSubset_5.append()
    dend_25 ModelViewParmSubset_5.append()
    dend_27 ModelViewParmSubset_5.append()
    dend_26 ModelViewParmSubset_5.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_33]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_33 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_14 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_35]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_35 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_34]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_34 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_32]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_32 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_19 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_18 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_22 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_13 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_10 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_8 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_7 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_24 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_12 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_11 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_6 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_35, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_35 = new SectionList()
    dend_5 OneSecGrp_SectionRef_35.append()

    // Group: {name=OneSecGrp_SectionRef_36, groups=[], sections=[dend_31]}
    OneSecGrp_SectionRef_36 = new SectionList()
    dend_31 OneSecGrp_SectionRef_36.append()

    // Group: {name=OneSecGrp_SectionRef_37, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_37 = new SectionList()
    dend_30 OneSecGrp_SectionRef_37.append()

    // Group: {name=OneSecGrp_SectionRef_38, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_38 = new SectionList()
    dend_28 OneSecGrp_SectionRef_38.append()

    // Group: {name=OneSecGrp_SectionRef_40, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_40 = new SectionList()
    dend_27 OneSecGrp_SectionRef_40.append()

    // Group: {name=OneSecGrp_SectionRef_41, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_41 = new SectionList()
    dend_26 OneSecGrp_SectionRef_41.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_0 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_15 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_1 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_16 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_20 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_2 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_3 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_21 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_23 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_17 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_9 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_4 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_29 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_39, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_39 = new SectionList()
    dend_25 OneSecGrp_SectionRef_39.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_37]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_37 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_36]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_36 OneSecGrp_SectionRef_16.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30, dend_31, dend_32, dend_33, dend_34, dend_35, dend_36, dend_37], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()
    dend_31 basal.append()
    dend_32 basal.append()
    dend_33 basal.append()
    dend_34 basal.append()
    dend_35 basal.append()
    dend_36 basal.append()
    dend_37 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_15, dend_15, dend_15, dend_0, dend_0, axon_0, axon_0, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_33, dend_16, dend_16, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_1, dend_1, axon_1, axon_1, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_35, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_34, dend_20, dend_20, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_2, dend_2, dend_2, dend_2, dend_37, dend_37, dend_37, dend_37, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_36, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_32, dend_21, dend_21, dend_21, dend_21, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_9, dend_9, dend_3, dend_3, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_31, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_33 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_35 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_34 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_2 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_37 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_36 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_32 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_10()
}

proc subsets_10() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_11()
}

proc subsets_11() {
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_31 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_12()
}

proc subsets_12() {
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_13()
}

proc subsets_13() {
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_14()
}

proc subsets_14() {
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.993125  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.0  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.005611  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.068459995  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.517764  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 6.3E-5  // units: S cm-2
        e_pas_nml2 = -64.6017  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 3.45E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.077616  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.002099  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 1.13999995E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.26087198  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-5  // units: S cm-2
        e_pas_nml2 = -69.78141  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 3.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.395881  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009986  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 5.0100003E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009728  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 2.7999999E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cACint_237_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cACint_237_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_33 nseg = 3
    dend_14 nseg = 3
    dend_35 nseg = 7
    dend_34 nseg = 11
    dend_32 nseg = 11
    dend_19 nseg = 7
    dend_18 nseg = 7
    dend_22 nseg = 11
    dend_13 nseg = 13
    dend_10 nseg = 9
    dend_8 nseg = 17
    dend_7 nseg = 13
    dend_24 nseg = 3
    dend_12 nseg = 9
    dend_11 nseg = 5
    dend_6 nseg = 11
    dend_5 nseg = 13
    dend_31 nseg = 7
    dend_30 nseg = 9
    dend_28 nseg = 11
    dend_27 nseg = 7
    dend_26 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cACint209_L23_DBC_2907e308d8_0_0


