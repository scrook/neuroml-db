// Cell: bAC217_L4_BP_712c8549fc_0_0
/*
{
  "id" : "bAC217_L4_BP_712c8549fc_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-3.08452, 6.27464, 0.312461, 1.46623", "-2.79927, 5.64032, 0.287115, 2.64844", "-2.51401, 5.00599, 0.26177, 4.10361", "-2.22875, 4.37167, 0.236425, 4.91598", "-1.94349, 3.73735, 0.21108, 5.72835", "-1.65823, 3.10303, 0.185734, 6.53421", "-1.37297, 2.46871, 0.160389, 7.31212", "-1.08771, 1.83438, 0.135044, 8.08989", "-0.802456, 1.20006, 0.109699, 8.85679", "-0.517198, 0.56574, 0.0843534, 8.93483", "-0.23194, -0.0685822, 0.0590082, 8.92633", "0.0533189, -0.702904, 0.033663, 8.91784", "0.338577, -1.33723, 0.00831775, 8.90934", "0.623836, -1.97155, -0.0170275, 8.90084", "0.909094, -2.60587, -0.0423727, 8.82493", "1.19435, -3.24019, -0.067718, 7.82232", "1.47961, -3.87451, -0.0930632, 6.5965", "1.76487, -4.50884, -0.118408, 5.37067", "2.05013, -5.14316, -0.143754, 4.14485", "2.33539, -5.77748, -0.169099, 2.91903", "2.62064, -6.4118, -0.194444, 1.76337" ]
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "1.61629, -5.71525, -1.26548, 1.33", "2.68935, -10.262, -2.12586, 1.33", "4.46845, -17.8006, -3.55235, 0.66", "5.84588, -23.6371, -4.65679, 0.66", "7.31366, -29.8565, -5.83366, 1.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500001318721313
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "2.62064, -6.4118, -0.194444, 0.33", "8.77276, -20.0921, -0.194444, 0.33", "14.9249, -33.7725, -0.194444, 0.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "7.31366, -29.8565, -5.83366, 0.66", "7.30358, -42.5331, -3.01904, 0.66", "7.26763, -61.3626, 1.18417, 0.66", "7.19866, -84.352, 6.49483, 0.66", "7.21935, -102.096, 10.6233, 0.66", "7.24549, -112.392, 13.0118, 0.66", "7.24226, -115.808, 13.7964, 0.66", "7.2507, -120.444, 14.8962, 0.66", "7.18108, -124.779, 15.9486, 0.66", "7.10737, -129.779, 17.0709, 0.66", "7.11167, -132.473, 17.3409, 0.66", "7.10743, -135.827, 17.3666, 0.66", "7.19961, -140.871, 16.8244, 0.66", "7.3102, -147.494, 15.7872, 0.66", "7.41771, -150.379, 15.3159, 0.66", "8.0421, -163.924, 12.988, 0.66", "8.27244, -167.12, 12.3934, 0.66", "9.19117, -176.991, 10.3275, 0.66", "9.62906, -181.158, 9.42464, 0.66", "10.5588, -188.816, 7.87994, 0.66", "11.0711, -193.212, 7.28733, 0.66", "11.5356, -197.499, 7.14727, 0.66", "11.972, -201.641, 7.16054, 0.66", "12.2373, -205.632, 7.16791, 0.66", "12.4689, -209.854, 7.00294, 0.66", "12.6041, -216.371, 6.62927, 0.66", "12.7085, -220.338, 6.59294, 0.66", "12.7605, -225.15, 6.61126, 0.66", "12.8123, -231.663, 6.60218, 0.66", "12.8249, -235.816, 6.39818, 0.66", "12.9024, -241.396, 5.87973, 0.66", "13.1478, -246.654, 5.36086, 0.66" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "7.31366, -29.8565, -5.83366, 0.66", "10.9689, -32.9777, -5.51273, 0.66", "19.3719, -40.1532, -4.77494, 0.33", "38.6067, -56.5781, -3.08612, 0.33", "39.3325, -57.1978, -3.0224, 0.66", "47.0947, -63.826, -2.34088, 0.33" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "14.9249, -33.7725, -0.194444, 0.33", "21.077, -47.4528, -0.194444, 0.33", "27.2291, -61.1331, -0.194444, 0.33" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "13.1478, -246.654, 5.36086, 0.66", "14.6119, -248.938, 6.95271, 0.66", "15.3104, -250.246, 8.00819, 0.66", "16.0789, -252.29, 10.1511, 0.66", "16.481, -253.519, 11.62, 0.66", "17.1349, -255.789, 14.5717, 0.66", "17.641, -257.446, 16.8374, 0.66", "18.0355, -258.967, 19.1545, 0.66", "18.9211, -261.925, 24.1427, 0.66", "19.447, -263.477, 26.9794, 0.66", "20.0331, -265.276, 30.3297, 0.33", "20.3058, -265.98, 31.638, 0.33", "20.4223, -266.204, 32.0806, 0.66", "21.2468, -267.385, 34.6243, 0.33", "21.5195, -267.604, 35.0614, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "13.1478, -246.654, 5.36086, 0.66", "13.2106, -249.259, 6.15995, 0.66", "13.2808, -252.626, 7.20694, 0.66", "13.5492, -259.356, 9.24227, 0.66", "13.6501, -262.288, 10.0884, 0.66", "13.8174, -265.858, 11.1632, 0.66", "13.9902, -269.482, 12.145, 0.66", "14.1044, -271.516, 12.6336, 0.66", "14.2075, -274.328, 13.1678, 0.66", "14.4252, -279.73, 13.9857, 0.66", "14.5916, -282.796, 14.3152, 0.66", "14.7747, -286.39, 14.6361, 0.66", "14.9133, -289.426, 14.6995, 0.66", "14.9522, -291.071, 14.703, 0.66", "15.0161, -296.596, 14.6051, 0.66", "15.064, -299.453, 14.4663, 0.66", "15.0744, -303.41, 14.22, 0.66", "15.1199, -306.585, 14.1691, 0.66", "15.1452, -307.993, 14.1316, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "15.1452, -307.993, 14.1316, 0.66", "15.4886, -311.071, 14.4053, 0.66", "15.6552, -316.084, 15.2644, 0.66", "15.7068, -321.438, 16.3178, 0.66", "15.6458, -324.952, 17.0042, 0.66", "15.5651, -329.805, 17.8406, 0.66", "15.3769, -338.382, 19.0227, 0.66", "15.1321, -344.246, 19.683, 0.66", "14.8835, -348.271, 20.1559, 0.66", "14.6918, -352.477, 20.5587, 0.66", "14.532, -357.194, 20.9746, 0.66", "14.4689, -360.421, 21.2376, 0.66", "14.5309, -364.846, 21.519, 0.66", "14.6812, -368.916, 21.7826, 0.66", "14.9825, -378.492, 22.6199, 0.66", "15.1482, -382.301, 23.0359, 0.66", "15.4924, -391.86, 23.9808, 0.66", "15.6364, -395.71, 24.221, 0.66", "15.7633, -399.415, 24.3049, 0.66", "15.8906, -402.744, 24.2401, 0.66", "16.0482, -408.194, 24.045, 0.66", "16.1344, -412.854, 23.8092, 0.66", "16.344, -421.804, 23.0378, 0.66", "16.5443, -426.325, 22.6901, 0.66", "16.7159, -429.844, 22.4452, 0.66", "16.9828, -434.58, 22.1616, 0.66", "18.0267, -452.4, 21.0657, 0.66", "18.5326, -458.942, 20.5845, 0.66", "20.0069, -476.111, 19.1197, 0.66", "20.6126, -482.596, 18.4948, 0.66", "21.2231, -488.979, 17.9356, 0.66", "21.6762, -493.419, 17.5874, 0.66", "22.3756, -499.495, 17.1025, 0.66", "23.0193, -506.255, 16.5439, 0.66", "23.7448, -513.615, 15.6549, 0.66", "24.1211, -517.728, 15.1569, 0.66", "24.3607, -520.598, 14.8928, 0.66", "25.0604, -531.75, 14.4537, 0.66", "25.2722, -535.227, 14.3251, 0.66", "25.6355, -540.925, 13.8525, 0.66", "26.0398, -546.618, 13.2975, 0.66", "26.4136, -551.031, 12.9317, 0.66", "27.2878, -561.849, 12.4887, 0.66", "28.34, -574.283, 12.3379, 0.66", "29.1244, -582.746, 12.2145, 0.66", "29.5342, -586.997, 12.0718, 0.66", "31.1635, -602.539, 11.2749, 0.66", "32.1986, -612.498, 10.355, 0.66", "32.5216, -615.406, 10.0296, 0.66", "33.1008, -620.115, 9.40427, 0.66", "34.017, -627.011, 8.28622, 0.66", "34.3865, -629.985, 7.6762, 0.66", "35.3584, -637.938, 5.67532, 0.66", "37.5485, -654.513, 1.27129, 0.66", "38.6457, -663.075, -0.716968, 0.66", "39.0582, -666.276, -1.3363, 0.33", "39.34, -668.417, -1.66219, 1.33", "40.0609, -673.509, -2.08779, 0.66", "41.0607, -679.666, -2.14859, 0.66", "41.8287, -684.042, -2.02317, 0.66", "42.6256, -688.478, -1.74, 0.66", "43.37, -692.106, -1.49628, 0.66", "46.3647, -707.028, -0.0959279, 0.66", "46.7568, -709.135, 0.149281, 0.33", "47.2624, -712.145, 0.474164, 1.33", "47.772, -715.13, 0.727692, 0.66", "48.145, -717.475, 0.907653, 0.33", "49.093, -723.952, 1.41387, 0.66", "49.2246, -727.312, 1.90835, 0.66", "49.2283, -731.758, 2.73217, 0.33" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 21
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "15.1452, -307.993, 14.1316, 0.66", "13.0223, -315.877, 12.0859, 0.66", "11.3329, -322.565, 10.3194, 0.66", "10.0156, -327.606, 9.36234, 0.33", "8.06836, -334.712, 8.2807, 0.33", "7.71745, -335.876, 8.15352, 0.66", "6.58703, -339.657, 7.85937, 0.33", "5.72806, -342.424, 7.81565, 0.66", "3.97203, -348.97, 7.67143, 0.33", "3.69461, -350.008, 7.6853, 0.66", "1.81919, -357.027, 7.75608, 0.33", "0.919, -360.671, 7.9932, 0.33", "0.0351746, -364.637, 8.43115, 0.66", "-0.993126, -369.393, 9.12701, 0.33", "-1.45327, -371.959, 9.50938, 0.33", "-1.67309, -373.402, 9.83715, 0.66", "-2.64756, -379.51, 12.2338, 0.33", "-2.84666, -380.406, 12.6894, 0.66", "-3.389, -382.676, 14.0763, 0.33", "-3.69872, -383.843, 14.798, 0.33", "-3.99326, -385.074, 15.4326, 0.66", "-5.01861, -389.665, 17.282, 0.33", "-5.58453, -392.452, 17.9067, 0.33", "-5.74824, -393.502, 18.0899, 0.66", "-5.92669, -395.532, 18.3238, 0.33", "-5.99193, -396.605, 18.3789, 0.66", "-6.03986, -397.964, 18.3745, 0.33", "-6.04382, -399.366, 18.2769, 0.66", "-6.09899, -401.423, 18.1481, 0.33", "-6.14034, -402.174, 18.1067, 0.66", "-6.64855, -408.403, 17.8331, 0.33", "-6.68957, -408.802, 17.8125, 0.66", "-6.88373, -410.235, 17.7202, 0.33", "-7.00457, -410.981, 17.6639, 0.66", "-7.38538, -413.026, 17.7189, 0.33", "-7.56772, -413.965, 17.8135, 0.66", "-7.88037, -415.648, 18.0851, 0.33", "-8.09342, -416.841, 18.3017, 0.66", "-8.32072, -418.209, 18.6025, 0.33", "-9.39378, -424.583, 20.2384, 0.33", "-9.7216, -426.448, 20.8161, 0.66" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "49.2283, -731.758, 2.73217, 0.66", "49.892, -735.365, 1.9122, 0.66", "50.2511, -737.247, 1.93551, 1.33", "50.5361, -738.868, 2.09672, 0.66", "50.8509, -740.905, 2.24269, 0.66", "51.5174, -745.301, 2.76901, 0.33", "52.3679, -750.622, 3.54282, 0.66", "53.4534, -757.505, 4.97961, 0.66", "54.0471, -760.935, 5.82597, 0.66", "54.7927, -764.754, 6.6788, 0.33", "55.7862, -769.635, 7.57213, 0.33", "56.05, -771.012, 7.72396, 0.66", "56.3242, -772.146, 7.63555, 0.33", "56.5579, -773.123, 7.40192, 0.66", "57.966, -778.814, 5.77133, 0.33", "58.5832, -781.19, 5.08861, 0.66", "59.1431, -783.44, 4.35678, 0.33", "60.5867, -789.842, 2.56301, 0.33", "61.4428, -793.597, 1.67126, 0.66", "62.9933, -800.407, 0.329766, 0.33", "63.6913, -803.625, -0.132011, 0.66", "64.3846, -806.803, -0.508683, 1.33", "65.9525, -814.068, -1.06967, 0.33", "66.6686, -817.673, -1.11606, 0.33", "66.942, -819.092, -1.09825, 0.66", "67.5533, -822.674, -0.921228, 0.33", "68.3046, -827.483, -0.602119, 0.33", "68.5885, -829.241, -0.428727, 1.33", "69.3764, -834.29, 0.0659428, 0.33", "69.5718, -836.04, 0.254383, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "49.2283, -731.758, 2.73217, 0.66", "48.2089, -733.692, 0.438238, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "69.5718, -836.04, 0.254383, 0.66", "67.5172, -835.72, -0.393106, 0.66" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "69.5718, -836.04, 0.254383, 0.66", "69.9123, -837.651, 0.101042, 0.66", "71.4288, -844.823, -0.581772, 0.33", "71.9111, -847.104, -0.798956, 1.33" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "71.9111, -847.104, -0.798956, 0.33", "70.5232, -860.339, 8.61519, 0.33", "70.4563, -861.619, 9.46718, 1.33", "70.4531, -865.184, 11.7609, 0.33", "70.5309, -865.917, 12.1881, 0.66", "71.2143, -869.387, 14.0624, 0.33", "71.4217, -870.44, 14.6313, 0.66", "71.9341, -871.363, 14.8412, 0.33", "72.6683, -872.511, 15.1282, 0.66", "75.5153, -876.077, 16.1438, 0.33", "76.6863, -877.362, 16.5277, 1.33" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "71.9111, -847.104, -0.798956, 0.33", "69.6882, -866.162, 3.48734, 0.33", "68.4758, -876.555, 5.82499, 0.33", "68.2853, -878.188, 6.19239, 0.66", "67.034, -888.916, 8.60512, 0.33", "66.8672, -890.346, 8.92674, 0.66" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_11", "dend_8", "dend_8", "dend_8", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.00545",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.004119",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "5.9999998E-6",
    "erev" : "-60.065872"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.418459",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.026008999",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.025854",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.19695699",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "2.0E-6",
    "erev" : "-60.2509"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "5.9899996E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.008343",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.026899999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.502333",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.653374",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "5.6999997E-5",
    "erev" : "-76.49812"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "7.84E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.30005398",
    "erev" : "50.0"
  }, {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "k",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.002256",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.38E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.005574",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "7.92E-4",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__bAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate bAC217_L4_BP_712c8549fc_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_12, id: dend_12, parent: dend_2
create dend_12
public dend_12
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_5, id: dend_5, parent: dend_3
create dend_5
public dend_5
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_11, id: dend_11, parent: dend_7
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_15
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_0(0), soma_0(0.4500001318721313)
    connect axon_0(0), soma_0(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_12(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_5(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_11(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -3.08452, 6.27464, 0.312461, 1.46623 ) }
    soma_0 { pt3dadd( -2.79927, 5.64032, 0.287115, 2.64844 ) }
    soma_0 { pt3dadd( -2.51401, 5.00599, 0.26177, 4.10361 ) }
    soma_0 { pt3dadd( -2.22875, 4.37167, 0.236425, 4.91598 ) }
    soma_0 { pt3dadd( -1.94349, 3.73735, 0.21108, 5.72835 ) }
    soma_0 { pt3dadd( -1.65823, 3.10303, 0.185734, 6.53421 ) }
    soma_0 { pt3dadd( -1.37297, 2.46871, 0.160389, 7.31212 ) }
    soma_0 { pt3dadd( -1.08771, 1.83438, 0.135044, 8.08989 ) }
    soma_0 { pt3dadd( -0.802456, 1.20006, 0.109699, 8.85679 ) }
    soma_0 { pt3dadd( -0.517198, 0.56574, 0.0843534, 8.93483 ) }
    soma_0 { pt3dadd( -0.23194, -0.0685822, 0.0590082, 8.92633 ) }
    soma_0 { pt3dadd( 0.0533189, -0.702904, 0.033663, 8.91784 ) }
    soma_0 { pt3dadd( 0.338577, -1.33723, 0.00831775, 8.90934 ) }
    soma_0 { pt3dadd( 0.623836, -1.97155, -0.0170275, 8.90084 ) }
    soma_0 { pt3dadd( 0.909094, -2.60587, -0.0423727, 8.82493 ) }
    soma_0 { pt3dadd( 1.19435, -3.24019, -0.067718, 7.82232 ) }
    soma_0 { pt3dadd( 1.47961, -3.87451, -0.0930632, 6.5965 ) }
    soma_0 { pt3dadd( 1.76487, -4.50884, -0.118408, 5.37067 ) }
    soma_0 { pt3dadd( 2.05013, -5.14316, -0.143754, 4.14485 ) }
    soma_0 { pt3dadd( 2.33539, -5.77748, -0.169099, 2.91903 ) }
    soma_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 1.76337 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 21/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 1.61629, -5.71525, -1.26548, 1.33 ) }
    dend_0 { pt3dadd( 2.68935, -10.262, -2.12586, 1.33 ) }
    dend_0 { pt3dadd( 4.46845, -17.8006, -3.55235, 0.66 ) }
    dend_0 { pt3dadd( 5.84588, -23.6371, -4.65679, 0.66 ) }
    dend_0 { pt3dadd( 7.31366, -29.8565, -5.83366, 1.33 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 26/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 8.77276, -20.0921, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 29/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 7.31366, -29.8565, -5.83366, 0.66 ) }
    dend_2 { pt3dadd( 7.30358, -42.5331, -3.01904, 0.66 ) }
    dend_2 { pt3dadd( 7.26763, -61.3626, 1.18417, 0.66 ) }
    dend_2 { pt3dadd( 7.19866, -84.352, 6.49483, 0.66 ) }
    dend_2 { pt3dadd( 7.21935, -102.096, 10.6233, 0.66 ) }
    dend_2 { pt3dadd( 7.24549, -112.392, 13.0118, 0.66 ) }
    dend_2 { pt3dadd( 7.24226, -115.808, 13.7964, 0.66 ) }
    dend_2 { pt3dadd( 7.2507, -120.444, 14.8962, 0.66 ) }
    dend_2 { pt3dadd( 7.18108, -124.779, 15.9486, 0.66 ) }
    dend_2 { pt3dadd( 7.10737, -129.779, 17.0709, 0.66 ) }
    dend_2 { pt3dadd( 7.11167, -132.473, 17.3409, 0.66 ) }
    dend_2 { pt3dadd( 7.10743, -135.827, 17.3666, 0.66 ) }
    dend_2 { pt3dadd( 7.19961, -140.871, 16.8244, 0.66 ) }
    dend_2 { pt3dadd( 7.3102, -147.494, 15.7872, 0.66 ) }
    dend_2 { pt3dadd( 7.41771, -150.379, 15.3159, 0.66 ) }
    dend_2 { pt3dadd( 8.0421, -163.924, 12.988, 0.66 ) }
    dend_2 { pt3dadd( 8.27244, -167.12, 12.3934, 0.66 ) }
    dend_2 { pt3dadd( 9.19117, -176.991, 10.3275, 0.66 ) }
    dend_2 { pt3dadd( 9.62906, -181.158, 9.42464, 0.66 ) }
    dend_2 { pt3dadd( 10.5588, -188.816, 7.87994, 0.66 ) }
    dend_2 { pt3dadd( 11.0711, -193.212, 7.28733, 0.66 ) }
    dend_2 { pt3dadd( 11.5356, -197.499, 7.14727, 0.66 ) }
    dend_2 { pt3dadd( 11.972, -201.641, 7.16054, 0.66 ) }
    dend_2 { pt3dadd( 12.2373, -205.632, 7.16791, 0.66 ) }
    dend_2 { pt3dadd( 12.4689, -209.854, 7.00294, 0.66 ) }
    dend_2 { pt3dadd( 12.6041, -216.371, 6.62927, 0.66 ) }
    dend_2 { pt3dadd( 12.7085, -220.338, 6.59294, 0.66 ) }
    dend_2 { pt3dadd( 12.7605, -225.15, 6.61126, 0.66 ) }
    dend_2 { pt3dadd( 12.8123, -231.663, 6.60218, 0.66 ) }
    dend_2 { pt3dadd( 12.8249, -235.816, 6.39818, 0.66 ) }
    dend_2 { pt3dadd( 12.9024, -241.396, 5.87973, 0.66 ) }
    dend_2 { pt3dadd( 13.1478, -246.654, 5.36086, 0.66 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 61/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 7.31366, -29.8565, -5.83366, 0.66 ) }
    dend_1 { pt3dadd( 10.9689, -32.9777, -5.51273, 0.66 ) }
    dend_1 { pt3dadd( 19.3719, -40.1532, -4.77494, 0.33 ) }
    dend_1 { pt3dadd( 38.6067, -56.5781, -3.08612, 0.33 ) }
    dend_1 { pt3dadd( 39.3325, -57.1978, -3.0224, 0.66 ) }
    dend_1 { pt3dadd( 47.0947, -63.826, -2.34088, 0.33 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 67/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 21.077, -47.4528, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 27.2291, -61.1331, -0.194444, 0.33 ) }
    // Section: dend_12, id: dend_12, parent: dend_2 (entry count 70/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 13.1478, -246.654, 5.36086, 0.66 ) }
    dend_12 { pt3dadd( 14.6119, -248.938, 6.95271, 0.66 ) }
    dend_12 { pt3dadd( 15.3104, -250.246, 8.00819, 0.66 ) }
    dend_12 { pt3dadd( 16.0789, -252.29, 10.1511, 0.66 ) }
    dend_12 { pt3dadd( 16.481, -253.519, 11.62, 0.66 ) }
    dend_12 { pt3dadd( 17.1349, -255.789, 14.5717, 0.66 ) }
    dend_12 { pt3dadd( 17.641, -257.446, 16.8374, 0.66 ) }
    dend_12 { pt3dadd( 18.0355, -258.967, 19.1545, 0.66 ) }
    dend_12 { pt3dadd( 18.9211, -261.925, 24.1427, 0.66 ) }
    dend_12 { pt3dadd( 19.447, -263.477, 26.9794, 0.66 ) }
    dend_12 { pt3dadd( 20.0331, -265.276, 30.3297, 0.33 ) }
    dend_12 { pt3dadd( 20.3058, -265.98, 31.638, 0.33 ) }
    dend_12 { pt3dadd( 20.4223, -266.204, 32.0806, 0.66 ) }
    dend_12 { pt3dadd( 21.2468, -267.385, 34.6243, 0.33 ) }
    dend_12 { pt3dadd( 21.5195, -267.604, 35.0614, 0.66 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 85/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 13.1478, -246.654, 5.36086, 0.66 ) }
    dend_3 { pt3dadd( 13.2106, -249.259, 6.15995, 0.66 ) }
    dend_3 { pt3dadd( 13.2808, -252.626, 7.20694, 0.66 ) }
    dend_3 { pt3dadd( 13.5492, -259.356, 9.24227, 0.66 ) }
    dend_3 { pt3dadd( 13.6501, -262.288, 10.0884, 0.66 ) }
    dend_3 { pt3dadd( 13.8174, -265.858, 11.1632, 0.66 ) }
    dend_3 { pt3dadd( 13.9902, -269.482, 12.145, 0.66 ) }
    dend_3 { pt3dadd( 14.1044, -271.516, 12.6336, 0.66 ) }
    dend_3 { pt3dadd( 14.2075, -274.328, 13.1678, 0.66 ) }
    dend_3 { pt3dadd( 14.4252, -279.73, 13.9857, 0.66 ) }
    dend_3 { pt3dadd( 14.5916, -282.796, 14.3152, 0.66 ) }
    dend_3 { pt3dadd( 14.7747, -286.39, 14.6361, 0.66 ) }
    dend_3 { pt3dadd( 14.9133, -289.426, 14.6995, 0.66 ) }
    dend_3 { pt3dadd( 14.9522, -291.071, 14.703, 0.66 ) }
    dend_3 { pt3dadd( 15.0161, -296.596, 14.6051, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_3 { pt3dadd( 15.064, -299.453, 14.4663, 0.66 ) }
    dend_3 { pt3dadd( 15.0744, -303.41, 14.22, 0.66 ) }
    dend_3 { pt3dadd( 15.1199, -306.585, 14.1691, 0.66 ) }
    dend_3 { pt3dadd( 15.1452, -307.993, 14.1316, 0.66 ) }
    // Section: dend_5, id: dend_5, parent: dend_3 (entry count 4/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 15.1452, -307.993, 14.1316, 0.66 ) }
    dend_5 { pt3dadd( 15.4886, -311.071, 14.4053, 0.66 ) }
    dend_5 { pt3dadd( 15.6552, -316.084, 15.2644, 0.66 ) }
    dend_5 { pt3dadd( 15.7068, -321.438, 16.3178, 0.66 ) }
    dend_5 { pt3dadd( 15.6458, -324.952, 17.0042, 0.66 ) }
    dend_5 { pt3dadd( 15.5651, -329.805, 17.8406, 0.66 ) }
    dend_5 { pt3dadd( 15.3769, -338.382, 19.0227, 0.66 ) }
    dend_5 { pt3dadd( 15.1321, -344.246, 19.683, 0.66 ) }
    dend_5 { pt3dadd( 14.8835, -348.271, 20.1559, 0.66 ) }
    dend_5 { pt3dadd( 14.6918, -352.477, 20.5587, 0.66 ) }
    dend_5 { pt3dadd( 14.532, -357.194, 20.9746, 0.66 ) }
    dend_5 { pt3dadd( 14.4689, -360.421, 21.2376, 0.66 ) }
    dend_5 { pt3dadd( 14.5309, -364.846, 21.519, 0.66 ) }
    dend_5 { pt3dadd( 14.6812, -368.916, 21.7826, 0.66 ) }
    dend_5 { pt3dadd( 14.9825, -378.492, 22.6199, 0.66 ) }
    dend_5 { pt3dadd( 15.1482, -382.301, 23.0359, 0.66 ) }
    dend_5 { pt3dadd( 15.4924, -391.86, 23.9808, 0.66 ) }
    dend_5 { pt3dadd( 15.6364, -395.71, 24.221, 0.66 ) }
    dend_5 { pt3dadd( 15.7633, -399.415, 24.3049, 0.66 ) }
    dend_5 { pt3dadd( 15.8906, -402.744, 24.2401, 0.66 ) }
    dend_5 { pt3dadd( 16.0482, -408.194, 24.045, 0.66 ) }
    dend_5 { pt3dadd( 16.1344, -412.854, 23.8092, 0.66 ) }
    dend_5 { pt3dadd( 16.344, -421.804, 23.0378, 0.66 ) }
    dend_5 { pt3dadd( 16.5443, -426.325, 22.6901, 0.66 ) }
    dend_5 { pt3dadd( 16.7159, -429.844, 22.4452, 0.66 ) }
    dend_5 { pt3dadd( 16.9828, -434.58, 22.1616, 0.66 ) }
    dend_5 { pt3dadd( 18.0267, -452.4, 21.0657, 0.66 ) }
    dend_5 { pt3dadd( 18.5326, -458.942, 20.5845, 0.66 ) }
    dend_5 { pt3dadd( 20.0069, -476.111, 19.1197, 0.66 ) }
    dend_5 { pt3dadd( 20.6126, -482.596, 18.4948, 0.66 ) }
    dend_5 { pt3dadd( 21.2231, -488.979, 17.9356, 0.66 ) }
    dend_5 { pt3dadd( 21.6762, -493.419, 17.5874, 0.66 ) }
    dend_5 { pt3dadd( 22.3756, -499.495, 17.1025, 0.66 ) }
    dend_5 { pt3dadd( 23.0193, -506.255, 16.5439, 0.66 ) }
    dend_5 { pt3dadd( 23.7448, -513.615, 15.6549, 0.66 ) }
    dend_5 { pt3dadd( 24.1211, -517.728, 15.1569, 0.66 ) }
    dend_5 { pt3dadd( 24.3607, -520.598, 14.8928, 0.66 ) }
    dend_5 { pt3dadd( 25.0604, -531.75, 14.4537, 0.66 ) }
    dend_5 { pt3dadd( 25.2722, -535.227, 14.3251, 0.66 ) }
    dend_5 { pt3dadd( 25.6355, -540.925, 13.8525, 0.66 ) }
    dend_5 { pt3dadd( 26.0398, -546.618, 13.2975, 0.66 ) }
    dend_5 { pt3dadd( 26.4136, -551.031, 12.9317, 0.66 ) }
    dend_5 { pt3dadd( 27.2878, -561.849, 12.4887, 0.66 ) }
    dend_5 { pt3dadd( 28.34, -574.283, 12.3379, 0.66 ) }
    dend_5 { pt3dadd( 29.1244, -582.746, 12.2145, 0.66 ) }
    dend_5 { pt3dadd( 29.5342, -586.997, 12.0718, 0.66 ) }
    dend_5 { pt3dadd( 31.1635, -602.539, 11.2749, 0.66 ) }
    dend_5 { pt3dadd( 32.1986, -612.498, 10.355, 0.66 ) }
    dend_5 { pt3dadd( 32.5216, -615.406, 10.0296, 0.66 ) }
    dend_5 { pt3dadd( 33.1008, -620.115, 9.40427, 0.66 ) }
    dend_5 { pt3dadd( 34.017, -627.011, 8.28622, 0.66 ) }
    dend_5 { pt3dadd( 34.3865, -629.985, 7.6762, 0.66 ) }
    dend_5 { pt3dadd( 35.3584, -637.938, 5.67532, 0.66 ) }
    dend_5 { pt3dadd( 37.5485, -654.513, 1.27129, 0.66 ) }
    dend_5 { pt3dadd( 38.6457, -663.075, -0.716968, 0.66 ) }
    dend_5 { pt3dadd( 39.0582, -666.276, -1.3363, 0.33 ) }
    dend_5 { pt3dadd( 39.34, -668.417, -1.66219, 1.33 ) }
    dend_5 { pt3dadd( 40.0609, -673.509, -2.08779, 0.66 ) }
    dend_5 { pt3dadd( 41.0607, -679.666, -2.14859, 0.66 ) }
    dend_5 { pt3dadd( 41.8287, -684.042, -2.02317, 0.66 ) }
    dend_5 { pt3dadd( 42.6256, -688.478, -1.74, 0.66 ) }
    dend_5 { pt3dadd( 43.37, -692.106, -1.49628, 0.66 ) }
    dend_5 { pt3dadd( 46.3647, -707.028, -0.0959279, 0.66 ) }
    dend_5 { pt3dadd( 46.7568, -709.135, 0.149281, 0.33 ) }
    dend_5 { pt3dadd( 47.2624, -712.145, 0.474164, 1.33 ) }
    dend_5 { pt3dadd( 47.772, -715.13, 0.727692, 0.66 ) }
    dend_5 { pt3dadd( 48.145, -717.475, 0.907653, 0.33 ) }
    dend_5 { pt3dadd( 49.093, -723.952, 1.41387, 0.66 ) }
    dend_5 { pt3dadd( 49.2246, -727.312, 1.90835, 0.66 ) }
    dend_5 { pt3dadd( 49.2283, -731.758, 2.73217, 0.33 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 74/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 15.1452, -307.993, 14.1316, 0.66 ) }
    dend_4 { pt3dadd( 13.0223, -315.877, 12.0859, 0.66 ) }
    dend_4 { pt3dadd( 11.3329, -322.565, 10.3194, 0.66 ) }
    dend_4 { pt3dadd( 10.0156, -327.606, 9.36234, 0.33 ) }
    dend_4 { pt3dadd( 8.06836, -334.712, 8.2807, 0.33 ) }
    dend_4 { pt3dadd( 7.71745, -335.876, 8.15352, 0.66 ) }
    dend_4 { pt3dadd( 6.58703, -339.657, 7.85937, 0.33 ) }
    dend_4 { pt3dadd( 5.72806, -342.424, 7.81565, 0.66 ) }
    dend_4 { pt3dadd( 3.97203, -348.97, 7.67143, 0.33 ) }
    dend_4 { pt3dadd( 3.69461, -350.008, 7.6853, 0.66 ) }
    dend_4 { pt3dadd( 1.81919, -357.027, 7.75608, 0.33 ) }
    dend_4 { pt3dadd( 0.919, -360.671, 7.9932, 0.33 ) }
    dend_4 { pt3dadd( 0.0351746, -364.637, 8.43115, 0.66 ) }
    dend_4 { pt3dadd( -0.993126, -369.393, 9.12701, 0.33 ) }
    dend_4 { pt3dadd( -1.45327, -371.959, 9.50938, 0.33 ) }
    dend_4 { pt3dadd( -1.67309, -373.402, 9.83715, 0.66 ) }
    dend_4 { pt3dadd( -2.64756, -379.51, 12.2338, 0.33 ) }
    dend_4 { pt3dadd( -2.84666, -380.406, 12.6894, 0.66 ) }
    dend_4 { pt3dadd( -3.389, -382.676, 14.0763, 0.33 ) }
    dend_4 { pt3dadd( -3.69872, -383.843, 14.798, 0.33 ) }
    dend_4 { pt3dadd( -3.99326, -385.074, 15.4326, 0.66 ) }
    dend_4 { pt3dadd( -5.01861, -389.665, 17.282, 0.33 ) }
    dend_4 { pt3dadd( -5.58453, -392.452, 17.9067, 0.33 ) }
    dend_4 { pt3dadd( -5.74824, -393.502, 18.0899, 0.66 ) }
    dend_4 { pt3dadd( -5.92669, -395.532, 18.3238, 0.33 ) }
    dend_4 { pt3dadd( -5.99193, -396.605, 18.3789, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_4 { pt3dadd( -6.03986, -397.964, 18.3745, 0.33 ) }
    dend_4 { pt3dadd( -6.04382, -399.366, 18.2769, 0.66 ) }
    dend_4 { pt3dadd( -6.09899, -401.423, 18.1481, 0.33 ) }
    dend_4 { pt3dadd( -6.14034, -402.174, 18.1067, 0.66 ) }
    dend_4 { pt3dadd( -6.64855, -408.403, 17.8331, 0.33 ) }
    dend_4 { pt3dadd( -6.68957, -408.802, 17.8125, 0.66 ) }
    dend_4 { pt3dadd( -6.88373, -410.235, 17.7202, 0.33 ) }
    dend_4 { pt3dadd( -7.00457, -410.981, 17.6639, 0.66 ) }
    dend_4 { pt3dadd( -7.38538, -413.026, 17.7189, 0.33 ) }
    dend_4 { pt3dadd( -7.56772, -413.965, 17.8135, 0.66 ) }
    dend_4 { pt3dadd( -7.88037, -415.648, 18.0851, 0.33 ) }
    dend_4 { pt3dadd( -8.09342, -416.841, 18.3017, 0.66 ) }
    dend_4 { pt3dadd( -8.32072, -418.209, 18.6025, 0.33 ) }
    dend_4 { pt3dadd( -9.39378, -424.583, 20.2384, 0.33 ) }
    dend_4 { pt3dadd( -9.7216, -426.448, 20.8161, 0.66 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 15/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 49.2283, -731.758, 2.73217, 0.66 ) }
    dend_7 { pt3dadd( 49.892, -735.365, 1.9122, 0.66 ) }
    dend_7 { pt3dadd( 50.2511, -737.247, 1.93551, 1.33 ) }
    dend_7 { pt3dadd( 50.5361, -738.868, 2.09672, 0.66 ) }
    dend_7 { pt3dadd( 50.8509, -740.905, 2.24269, 0.66 ) }
    dend_7 { pt3dadd( 51.5174, -745.301, 2.76901, 0.33 ) }
    dend_7 { pt3dadd( 52.3679, -750.622, 3.54282, 0.66 ) }
    dend_7 { pt3dadd( 53.4534, -757.505, 4.97961, 0.66 ) }
    dend_7 { pt3dadd( 54.0471, -760.935, 5.82597, 0.66 ) }
    dend_7 { pt3dadd( 54.7927, -764.754, 6.6788, 0.33 ) }
    dend_7 { pt3dadd( 55.7862, -769.635, 7.57213, 0.33 ) }
    dend_7 { pt3dadd( 56.05, -771.012, 7.72396, 0.66 ) }
    dend_7 { pt3dadd( 56.3242, -772.146, 7.63555, 0.33 ) }
    dend_7 { pt3dadd( 56.5579, -773.123, 7.40192, 0.66 ) }
    dend_7 { pt3dadd( 57.966, -778.814, 5.77133, 0.33 ) }
    dend_7 { pt3dadd( 58.5832, -781.19, 5.08861, 0.66 ) }
    dend_7 { pt3dadd( 59.1431, -783.44, 4.35678, 0.33 ) }
    dend_7 { pt3dadd( 60.5867, -789.842, 2.56301, 0.33 ) }
    dend_7 { pt3dadd( 61.4428, -793.597, 1.67126, 0.66 ) }
    dend_7 { pt3dadd( 62.9933, -800.407, 0.329766, 0.33 ) }
    dend_7 { pt3dadd( 63.6913, -803.625, -0.132011, 0.66 ) }
    dend_7 { pt3dadd( 64.3846, -806.803, -0.508683, 1.33 ) }
    dend_7 { pt3dadd( 65.9525, -814.068, -1.06967, 0.33 ) }
    dend_7 { pt3dadd( 66.6686, -817.673, -1.11606, 0.33 ) }
    dend_7 { pt3dadd( 66.942, -819.092, -1.09825, 0.66 ) }
    dend_7 { pt3dadd( 67.5533, -822.674, -0.921228, 0.33 ) }
    dend_7 { pt3dadd( 68.3046, -827.483, -0.602119, 0.33 ) }
    dend_7 { pt3dadd( 68.5885, -829.241, -0.428727, 1.33 ) }
    dend_7 { pt3dadd( 69.3764, -834.29, 0.0659428, 0.33 ) }
    dend_7 { pt3dadd( 69.5718, -836.04, 0.254383, 0.66 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 45/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 49.2283, -731.758, 2.73217, 0.66 ) }
    dend_6 { pt3dadd( 48.2089, -733.692, 0.438238, 0.66 ) }
    // Section: dend_11, id: dend_11, parent: dend_7 (entry count 47/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 69.5718, -836.04, 0.254383, 0.66 ) }
    dend_11 { pt3dadd( 67.5172, -835.72, -0.393106, 0.66 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 49/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 69.5718, -836.04, 0.254383, 0.66 ) }
    dend_8 { pt3dadd( 69.9123, -837.651, 0.101042, 0.66 ) }
    dend_8 { pt3dadd( 71.4288, -844.823, -0.581772, 0.33 ) }
    dend_8 { pt3dadd( 71.9111, -847.104, -0.798956, 1.33 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 53/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 71.9111, -847.104, -0.798956, 0.33 ) }
    dend_10 { pt3dadd( 70.5232, -860.339, 8.61519, 0.33 ) }
    dend_10 { pt3dadd( 70.4563, -861.619, 9.46718, 1.33 ) }
    dend_10 { pt3dadd( 70.4531, -865.184, 11.7609, 0.33 ) }
    dend_10 { pt3dadd( 70.5309, -865.917, 12.1881, 0.66 ) }
    dend_10 { pt3dadd( 71.2143, -869.387, 14.0624, 0.33 ) }
    dend_10 { pt3dadd( 71.4217, -870.44, 14.6313, 0.66 ) }
    dend_10 { pt3dadd( 71.9341, -871.363, 14.8412, 0.33 ) }
    dend_10 { pt3dadd( 72.6683, -872.511, 15.1282, 0.66 ) }
    dend_10 { pt3dadd( 75.5153, -876.077, 16.1438, 0.33 ) }
    dend_10 { pt3dadd( 76.6863, -877.362, 16.5277, 1.33 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 64/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 71.9111, -847.104, -0.798956, 0.33 ) }
    dend_9 { pt3dadd( 69.6882, -866.162, 3.48734, 0.33 ) }
    dend_9 { pt3dadd( 68.4758, -876.555, 5.82499, 0.33 ) }
    dend_9 { pt3dadd( 68.2853, -878.188, 6.19239, 0.66 ) }
    dend_9 { pt3dadd( 67.034, -888.916, 8.60512, 0.33 ) }
    dend_9 { pt3dadd( 66.8672, -890.346, 8.92674, 0.66 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_2 = new SectionList()
    dend_0 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_2 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_1 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_3 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_5 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_4 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_7 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_9 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_0 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_12 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_6 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_11 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_8 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_10 OneSecGrp_SectionRef_15.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_8 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.00545  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.004119  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 5.9999998E-6  // units: S cm-2
        e_pas_nml2 = -60.065872  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.418459  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.026008999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 9.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.025854  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.19695699  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-6  // units: S cm-2
        e_pas_nml2 = -60.2509  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 5.9899996E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.008343  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.026899999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.502333  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.653374  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 5.6999997E-5  // units: S cm-2
        e_pas_nml2 = -76.49812  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 7.84E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.30005398  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec basal {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        // gmax_K_Tst will be set later...
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Im
        // gmax_Im will be set later...
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.002256  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 1.38E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.005574  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 7.92E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__bAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__bAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__bAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__bAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_K_Tst(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.002940))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000051))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Im(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p--1000.000000)*-0.003000))*0.000371))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_2 nseg = 11
    dend_1 nseg = 3
    dend_3 nseg = 3
    dend_5 nseg = 21
    dend_4 nseg = 7
    dend_7 nseg = 5
    dend_9 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate bAC217_L4_BP_712c8549fc_0_0


