// Cell: cIR216_L1_HAC_5c847ea2ef_0_0
/*
{
  "id" : "cIR216_L1_HAC_5c847ea2ef_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-7.19825, 4.715, 0.0, 2.25023", "-6.52585, 4.27569, 0.0, 3.89424", "-5.85344, 3.83637, 0.0, 5.90647", "-5.18104, 3.39705, 0.0, 7.46791", "-4.50863, 2.95773, 0.0, 8.64023", "-3.83623, 2.51842, 0.0, 9.59138", "-3.16382, 2.0791, 0.0, 10.4724", "-2.49142, 1.63978, 0.0, 11.0113", "-1.81902, 1.20047, 0.0, 11.4757", "-1.14661, 0.761149, 0.0, 11.8173", "-0.474207, 0.321831, 0.0, 12.0352", "0.198197, -0.117486, 0.0, 12.1071", "0.870601, -0.556803, 0.0, 12.2205", "1.54301, -0.99612, 0.0, 12.3385", "2.21541, -1.43544, 0.0, 12.3439", "2.88781, -1.87475, 0.0, 11.6905", "3.56022, -2.31407, 0.0, 10.8961", "4.23262, -2.75339, 0.0, 10.0317", "4.90503, -3.19271, 0.0, 8.76785", "5.57743, -3.63202, 0.0, 6.4382", "6.24984, -4.07134, 0.0, 3.64463" ]
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "2.57675, 5.85152, -7.49, 4.1", "2.57675, 5.85152, -7.49, 4.1", "2.75453, 7.50506, -7.94639, 3.64", "2.96756, 9.48634, -8.49325, 2.96" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999986172309563
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "4.99679, 2.79152, -8.14, 1.59", "5.45914, 2.20546, -8.04242, 1.59", "6.31295, 1.28311, -7.85902, 1.59", "7.63264, 0.0866669, -7.71971, 1.37", "9.04873, -1.08157, -7.77368, 0.91", "10.8122, -2.61817, -8.034, 0.91", "11.6831, -3.42153, -8.28905, 0.68", "12.4127, -4.16351, -8.64893, 0.68", "13.6666, -5.6333, -9.6023, 0.91", "14.6928, -7.01628, -10.6923, 0.68", "15.5333, -8.24107, -11.8453, 0.68", "16.1996, -9.31142, -12.9625, 0.68", "16.628, -10.0841, -13.7262, 0.46", "17.0578, -10.817, -14.4484, 0.46", "17.7634, -11.7423, -15.3717, 0.68", "18.7752, -12.6287, -16.3858, 0.68", "19.7907, -13.2947, -17.2535, 0.68", "20.3953, -13.6584, -17.7518, 0.91", "21.573, -14.3183, -18.7296, 0.68", "22.4577, -14.8304, -19.4903, 0.46", "22.6277, -14.9492, -19.6209, 0.46", "23.3281, -15.5391, -19.9943, 0.46", "24.1986, -16.1819, -20.3823, 0.46", "24.7867, -16.5371, -20.6511, 0.46", "25.3604, -16.8765, -20.9697, 0.46", "26.8273, -17.6682, -21.9221, 0.68", "28.5319, -18.5483, -23.1518, 0.46", "29.9582, -19.3078, -24.2482, 0.46", "31.4333, -20.1551, -25.4525, 0.68", "32.8444, -21.091, -26.6374, 0.46", "34.5878, -22.3864, -28.109, 0.68", "35.577, -23.2398, -28.9081, 0.46", "36.5106, -24.25, -29.5395, 0.91", "37.0728, -24.9861, -29.8167, 0.91", "38.274, -26.8171, -30.2409, 0.46", "38.7108, -27.6059, -30.3487, 0.46", "39.4158, -29.2683, -30.5557, 0.23", "40.0552, -31.1336, -30.8636, 0.23", "40.3516, -32.3131, -31.1337, 0.68", "40.6621, -34.1839, -31.6585, 0.23", "40.7554, -36.4259, -32.4529, 0.46", "40.6813, -37.9889, -33.1179, 0.23", "40.5611, -39.1534, -33.6751, 0.23", "40.49, -39.9248, -34.0612, 0.68", "40.4552, -41.093, -34.5834, 0.68", "40.5736, -42.8472, -35.2165, 0.23", "40.8293, -44.4505, -35.6846, 0.46", "41.2024, -46.0668, -36.0595, 0.23", "41.6677, -47.8093, -36.3972, 0.46", "42.4667, -50.6637, -36.8762, 0.23", "43.0499, -52.7677, -37.1834, 0.23", "43.5861, -54.6229, -37.3904, 0.46", "43.9378, -56.014, -37.5157, 0.23", "44.1206, -56.9597, -37.6004, 0.23", "44.3195, -58.405, -37.7195, 0.46", "44.3853, -59.6468, -37.8456, 0.23", "44.3389, -60.7981, -38.0196, 0.46", "44.0518, -63.3347, -38.4951, 0.23", "43.7762, -65.2435, -38.9219, 0.23", "43.6211, -66.3044, -39.189, 0.46", "43.352, -68.3695, -39.7668, 0.23", "43.191, -70.0195, -40.2431, 0.23", "43.1054, -71.4128, -40.6539, 0.23", "43.0682, -72.561, -40.9899, 0.23", "43.049, -73.4998, -41.2294, 0.46", "43.1295, -75.3986, -41.6142, 0.91", "43.2726, -76.8427, -41.8026, 0.23", "43.4583, -78.3246, -41.9434, 0.46", "43.5997, -79.4732, -42.0367, 0.23", "43.7365, -80.6379, -42.1187, 0.46", "44.0963, -83.5681, -42.334, 0.23", "44.517, -86.823, -42.5683, 0.23", "44.7016, -88.1462, -42.655, 0.23", "44.9455, -89.7268, -42.7469, 0.46", "45.4198, -92.6263, -42.8973, 0.23", "45.8514, -95.367, -43.022, 0.23", "45.9796, -96.3267, -43.0551, 0.68", "46.1708, -97.8833, -43.0816, 0.23", "46.2617, -99.114, -43.0795, 0.46", "46.3282, -100.626, -43.0466, 0.23", "46.3558, -102.416, -42.9779, 0.23", "46.3564, -103.564, -42.9547, 0.46", "46.3525, -106.095, -42.8831, 0.23", "46.3125, -108.394, -42.8162, 0.23", "46.2924, -109.655, -42.7703, 0.46", "46.2634, -110.63, -42.7323, 0.68", "46.1523, -112.698, -42.6573, 0.68", "45.8157, -118.023, -42.483, 0.23", "45.6133, -120.892, -42.3968, 0.23", "45.5415, -121.867, -42.3621, 0.46", "45.1016, -126.465, -42.1724, 0.23", "44.8094, -129.047, -42.0428, 0.23", "44.6243, -130.373, -41.9604, 0.46" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999986172309563,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "4.92677, -6.16848, 6.98, 0.91", "6.27849, -6.47746, 7.17785, 0.91", "7.46293, -6.74819, 7.35121, 0.91", "9.30632, -7.16955, 7.62102, 0.91", "11.2868, -7.62222, 7.91088, 0.91", "12.9442, -8.00107, 8.15348, 0.91" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999986172309563
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-5.78325, -2.27848, -3.3, 0.91", "-6.396, -3.23435, -2.38535, 0.91", "-7.28615, -4.41896, -1.18317, 0.91", "-7.98479, -5.24551, -0.419799, 0.91", "-8.82844, -6.10813, 0.307529, 0.91", "-9.88122, -7.02524, 1.00434, 0.68", "-11.1795, -7.96738, 1.67188, 0.68", "-12.456, -8.68487, 2.16713, 0.68", "-14.4869, -9.60369, 2.7812, 0.68", "-16.313, -10.2075, 3.23737, 0.68", "-18.7321, -10.6058, 3.73407, 0.68", "-20.8094, -10.6558, 4.11379, 0.46", "-22.7323, -10.4624, 4.43808, 0.46", "-23.725, -10.2278, 4.60537, 0.46", "-25.7137, -9.43342, 4.96468, 0.46", "-28.6029, -7.93679, 5.499, 0.46", "-29.18, -7.58784, 5.59977, 0.46", "-30.7555, -6.57904, 5.83486, 0.46", "-31.6602, -5.96735, 5.92772, 0.46", "-33.5264, -4.75424, 6.04863, 0.46", "-35.0713, -3.79067, 6.11334, 0.46", "-36.865, -2.76488, 6.17819, 0.46", "-39.603, -1.34321, 6.25227, 0.23", "-41.0517, -0.610393, 6.27985, 0.23", "-43.3218, 0.463093, 6.32605, 0.23", "-44.8606, 1.15122, 6.35863, 0.46", "-46.7126, 1.95917, 6.39686, 0.23", "-48.404, 2.61997, 6.42437, 0.23" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999986172309563,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-7.90324, 4.07152, -0.52, 0.91", "-9.5068, 4.1503, -0.532695, 0.91", "-10.9135, 4.17228, -0.545553, 0.91", "-12.9257, 4.19275, -0.571569, 0.68", "-15.3599, 4.25624, -0.605767, 0.68", "-16.9492, 4.34008, -0.638552, 0.68", "-18.1273, 4.43557, -0.658218, 0.91", "-19.905, 4.57131, -0.690824, 0.68", "-21.9745, 4.76288, -0.73269, 0.68", "-24.0077, 5.01826, -0.778413, 0.68", "-25.6259, 5.27099, -0.817383, 0.68", "-27.0353, 5.51311, -0.849084, 0.68" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999986172309563
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "6.24984, -4.07134, 0.0, 0.749448", "18.8072, -12.2757, 0.0, 0.749448", "31.3646, -20.4801, 0.0, 0.749448" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "2.96756, 9.48634, -8.49325, 1.14", "3.35565, 11.5957, -8.23865, 1.14", "3.79808, 14.162, -8.10101, 1.14", "4.19912, 16.5149, -8.05391, 0.91", "4.445, 17.9575, -8.02503, 0.91", "4.73382, 19.652, -7.9911, 0.91", "4.92673, 20.7839, -7.96844, 0.91", "5.31079, 22.9524, -8.0586, 0.68", "5.47191, 23.7937, -8.19146, 0.68" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "2.96756, 9.48634, -8.49325, 2.96", "3.10475, 10.6498, -10.0524, 2.96", "3.27712, 12.1115, -12.0113, 2.96" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "12.9442, -8.00107, 8.15348, 0.68", "12.5905, -8.91497, 8.75595, 0.68", "11.944, -10.5856, 9.85729, 0.23", "11.2881, -12.2801, 10.9744, 0.23", "10.8308, -13.4619, 11.7535, 0.23", "10.5391, -14.2156, 12.2503, 0.23" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "12.9442, -8.00107, 8.15348, 0.68", "15.0999, -7.20825, 7.82165, 0.68", "16.2485, -6.7702, 7.58153, 0.68", "17.9878, -6.09669, 7.17005, 0.68", "19.9881, -5.35634, 6.65432, 0.68", "22.0628, -4.72019, 6.06682, 0.46", "24.0157, -4.21912, 5.50278, 0.46", "25.6147, -3.94828, 4.98297, 0.46", "27.014, -3.83641, 4.53076, 0.68", "28.4321, -3.84919, 4.06961, 0.46", "30.6571, -4.10464, 3.38277, 0.46", "32.2456, -4.46681, 2.92477, 0.46", "34.246, -5.06746, 2.39319, 0.46", "36.6342, -5.82678, 1.79505, 0.46", "37.6562, -6.12959, 1.53748, 0.46", "39.1851, -6.50366, 1.12887, 0.23", "41.5712, -6.93074, 0.446003, 0.23", "43.1266, -7.13504, -0.0372472, 0.46", "44.9365, -7.20212, -0.65173, 0.23", "46.1622, -7.10851, -1.11692, 0.46", "47.8213, -6.76398, -1.76164, 0.23", "49.1159, -6.34072, -2.27913, 0.23", "50.5179, -5.75098, -2.82444, 0.46", "52.4749, -4.86614, -3.52753, 0.46", "54.4395, -3.94018, -4.14949, 0.23", "56.875, -2.74357, -4.88782, 0.23", "58.1572, -2.06326, -5.28172, 0.46", "59.8214, -1.16765, -5.82459, 0.23", "60.9485, -0.56261, -6.20991, 0.46", "62.1841, 0.0795717, -6.64556, 0.46", "63.5258, 0.752527, -7.15169, 0.46", "64.2567, 1.14979, -7.49498, 0.46", "65.3051, 1.8242, -8.15855, 0.46", "66.1032, 2.47005, -8.84441, 0.46", "66.9528, 3.20491, -9.67179, 0.46", "67.6071, 3.78121, -10.3582, 0.46", "68.8503, 4.98578, -11.7691, 0.68", "69.8817, 6.10832, -13.033, 0.68", "70.8756, 7.27107, -14.4644, 0.46", "71.8416, 8.37071, -15.8933, 0.46", "72.5426, 9.14395, -16.9287, 0.46", "73.4185, 10.0704, -18.18, 0.68", "73.8756, 10.5025, -18.7646, 0.68", "75.6127, 12.0148, -20.724, 0.23", "77.1588, 13.2111, -22.2509, 0.23", "78.1489, 13.9298, -23.1455, 0.23", "78.8456, 14.3806, -23.6722, 0.46", "80.5357, 15.3349, -24.7835, 0.23", "82.0499, 16.1563, -25.7036, 0.23", "83.6172, 17.0306, -26.558, 0.46", "84.6872, 17.6577, -27.1311, 0.23", "86.5358, 18.8027, -28.0742, 0.46", "88.642, 20.2958, -29.0891, 0.23", "89.3976, 20.9192, -29.4192, 0.23", "90.2346, 21.7105, -29.7513, 0.46", "91.9276, 23.498, -30.3736, 0.23", "92.4521, 24.0743, -30.5517, 0.23", "94.5491, 26.4534, -31.2083, 0.23", "95.784, 27.8667, -31.5327, 0.46", "97.4298, 29.708, -31.8765, 0.23", "98.9527, 31.3181, -32.1139, 0.23", "100.059, 32.4301, -32.2251, 0.23", "101.281, 33.6037, -32.268, 0.23", "102.473, 34.6597, -32.2337, 0.23", "103.833, 35.7293, -32.1142, 0.23", "105.295, 36.7463, -31.9428, 0.23", "106.957, 37.7326, -31.7283, 0.23", "108.007, 38.2163, -31.5986, 0.23", "109.058, 38.5337, -31.5022, 1.37", "111.969, 39.0705, -31.3404, 0.23", "113.118, 39.198, -31.3198, 0.23", "114.953, 39.3196, -31.312, 0.23", "116.569, 39.338, -31.3326, 0.46", "118.386, 39.3042, -31.4037, 0.23", "120.002, 39.2186, -31.4626, 0.23", "121.097, 39.137, -31.4931, 0.23", "121.838, 39.094, -31.4938, 0.46" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-27.0353, 5.51311, -0.849084, 0.46", "-28.9714, 5.86234, -0.56205, 0.46", "-30.6196, 6.11701, -0.274049, 0.46", "-32.2089, 6.3521, 0.0141219, 0.46", "-33.1246, 6.52869, 0.195827, 0.23", "-34.75, 6.92166, 0.453132, 0.23", "-36.2851, 7.3277, 0.656091, 0.46", "-37.7404, 7.82677, 0.808054, 0.46", "-38.3795, 8.09213, 0.836034, 0.46", "-40.4568, 9.09366, 0.917084, 0.23", "-42.1119, 10.0468, 1.05856, 0.23", "-43.2962, 10.8111, 1.15898, 0.23", "-45.116, 12.0914, 1.29713, 0.46", "-46.457, 13.1182, 1.36602, 0.23", "-47.7489, 14.1404, 1.45902, 0.23", "-49.108, 15.2489, 1.62482, 0.23" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-27.0353, 5.51311, -0.849084, 0.46", "-28.1346, 7.17556, -1.78253, 0.46", "-28.9672, 8.38093, -2.41188, 0.46", "-29.7695, 9.45343, -2.94963, 0.68", "-30.9564, 11.0132, -3.71039, 0.46", "-32.1293, 12.6069, -4.47373, 0.46", "-33.2355, 14.1491, -5.22061, 0.46", "-33.7338, 14.8244, -5.534, 0.46", "-34.8115, 16.3583, -6.20746, 0.46", "-35.9234, 18.0661, -6.92387, 0.46", "-37.2886, 20.334, -7.85414, 0.46", "-37.7262, 21.1592, -8.18843, 0.46", "-38.3376, 22.5499, -8.74308, 0.68", "-39.1506, 24.8042, -9.61838, 0.46", "-39.662, 26.7785, -10.377, 0.46", "-39.8374, 27.7789, -10.7923, 0.46", "-39.9833, 29.0995, -11.4027, 0.68", "-40.1504, 30.9977, -12.3542, 0.46", "-40.3196, 33.0923, -13.4764, 0.46", "-40.5109, 34.6707, -14.3858, 0.68", "-40.8942, 36.7011, -15.6191, 0.46", "-41.712, 39.2631, -17.2904, 0.23", "-42.4848, 40.7105, -18.3038, 0.46", "-43.2094, 41.5714, -18.9168, 0.46", "-44.7002, 42.6829, -19.6756, 0.23", "-45.7462, 43.1418, -19.9525, 0.23", "-47.6738, 43.5285, -20.1345, 0.23", "-49.6427, 43.5614, -20.1074, 0.46", "-50.8482, 43.4752, -20.024, 0.46", "-52.3059, 43.2943, -19.8727, 0.23", "-54.395, 42.9356, -19.5379, 0.23", "-55.6897, 42.6631, -19.2931, 0.23", "-57.095, 42.2815, -18.9768, 0.46", "-57.9828, 41.9693, -18.8033, 0.46" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "31.3646, -20.4801, 0.0, 0.46", "43.922, -28.6845, 0.0, 0.46", "56.4794, -36.8889, 0.0, 0.46" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_30",
    "id" : "dend_30",
    "points3d" : [ "5.47191, 23.7937, -8.19146, 0.23", "6.34988, 25.7005, -8.58104, 0.23", "7.03925, 27.2542, -8.93551, 0.46", "7.77283, 28.9131, -9.28709, 0.23", "8.4304, 30.2642, -9.55127, 0.46", "9.26762, 31.7141, -9.81904, 0.23", "9.90367, 32.6946, -9.9901, 0.68", "11.5263, 34.8667, -10.3404, 0.46", "13.4566, 37.0169, -10.6596, 0.46", "15.0584, 38.5223, -10.8373, 0.46", "17.0776, 40.0601, -11.0234, 0.23", "18.3352, 40.8189, -11.1347, 0.23", "19.9831, 41.5979, -11.3331, 0.23", "21.4861, 42.1111, -11.5419, 0.23", "23.7122, 42.6123, -11.9612, 0.23", "26.4726, 43.0533, -12.6001, 0.46", "29.1118, 43.3677, -13.3069, 0.23", "30.9032, 43.4883, -13.8443, 0.23", "32.0073, 43.5216, -14.2086, 0.23", "33.7522, 43.5347, -14.8423, 0.23", "35.0741, 43.4199, -15.3666, 0.23", "35.7522, 43.3174, -15.647, 0.46", "36.7186, 43.1148, -16.0369, 0.46" ],
    "parent" : "dend_28",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "5.47191, 23.7937, -8.19146, 0.46", "5.21599, 25.2765, -8.81059, 0.46", "4.97704, 26.4033, -9.25338, 0.46", "4.54605, 27.8144, -9.78974, 0.68", "4.04903, 29.0604, -10.2487, 0.46", "3.14376, 30.7203, -10.8708, 0.46", "1.96376, 32.3797, -11.4885, 0.46", "0.940045, 33.397, -11.8615, 0.68", "-0.805283, 34.6011, -12.3005, 0.46", "-2.02322, 35.1955, -12.5002, 0.46", "-4.34325, 35.9466, -12.7405, 0.46", "-6.34419, 36.3752, -12.8597, 0.46", "-8.62834, 36.6692, -12.9522, 0.46", "-10.4645, 36.7726, -12.9779, 0.46", "-11.4144, 36.7666, -12.9515, 0.46", "-13.2357, 36.6674, -12.8705, 0.23", "-15.506, 36.4727, -12.7373, 0.46", "-17.5223, 36.2623, -12.5676, 0.23", "-20.7737, 35.8748, -12.1635, 0.23", "-23.2022, 35.6108, -11.7827, 0.23", "-25.8599, 35.2946, -11.286, 0.23", "-26.9937, 35.1358, -11.0375, 0.46", "-29.4679, 34.7687, -10.4087, 0.23", "-31.1675, 34.6016, -9.92215, 0.23", "-32.2959, 34.5625, -9.57185, 0.46", "-34.5696, 34.535, -8.82722, 0.23", "-36.816, 34.5546, -8.02844, 0.46", "-39.5458, 34.5954, -7.07031, 0.23", "-42.1192, 34.6714, -6.24483, 0.23", "-43.5582, 34.7773, -5.82033, 0.23" ],
    "parent" : "dend_28",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "3.27712, 12.1115, -12.0113, 0.91", "1.1762, 12.6828, -11.5772, 0.91", "0.204408, 12.9942, -11.3886, 0.91", "-1.52592, 13.533, -11.1834, 0.68", "-3.28583, 14.0811, -10.9746, 0.68", "-5.05624, 14.6324, -10.7646, 0.68", "-6.38929, 15.0475, -10.6064, 0.68", "-8.12617, 15.5501, -10.4879, 0.68", "-10.3629, 16.2153, -10.261, 0.68" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "3.27712, 12.1115, -12.0113, 2.96", "3.48708, 13.5515, -12.3113, 2.96" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "-10.3629, 16.2153, -10.261, 0.23", "-11.5076, 15.2495, -10.0891, 0.23", "-12.7563, 14.1715, -9.86726, 0.23", "-14.0991, 12.9559, -9.61985, 0.46", "-15.1658, 11.9654, -9.39467, 0.68", "-15.8665, 11.312, -9.20951, 0.68", "-17.4005, 9.90037, -8.76828, 0.46", "-18.6126, 8.77559, -8.39256, 0.68", "-19.4563, 8.00685, -8.10761, 0.68", "-20.5172, 7.06575, -7.70278, 0.46", "-21.6659, 6.11461, -7.22401, 0.68", "-22.326, 5.60096, -6.92669, 0.68", "-23.3432, 4.87734, -6.4423, 0.46", "-24.4569, 4.08907, -5.89542, 0.46", "-25.576, 3.32806, -5.30509, 0.68", "-26.5455, 2.67909, -4.78851, 0.68", "-27.3728, 2.15198, -4.35616, 0.68", "-28.7675, 1.34132, -3.64189, 0.68", "-30.168, 0.557534, -2.92674, 0.68", "-31.3072, -0.0545506, -2.37596, 0.68", "-33.3057, -1.09756, -1.43739, 0.46", "-34.8798, -1.88296, -0.778846, 0.68", "-36.9534, -2.84714, 0.00429284, 0.68", "-38.0973, -3.35453, 0.405868, 0.46", "-39.8721, -4.08471, 0.96117, 0.46", "-41.3069, -4.64795, 1.3632, 0.46", "-43.5832, -5.52397, 1.98491, 0.46", "-45.4695, -6.25506, 2.4887, 0.23", "-47.2161, -6.9129, 2.93637, 0.46", "-49.0839, -7.54623, 3.37762, 0.46", "-50.4588, -7.98859, 3.69458, 0.68" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "-10.3629, 16.2153, -10.261, 0.46", "-11.4108, 16.9011, -11.089, 0.46", "-12.4846, 17.5899, -11.8968, 0.46", "-13.3875, 18.1857, -12.5742, 0.46", "-14.5826, 18.9534, -13.484, 0.46", "-15.3496, 19.3907, -14.0159, 0.46", "-16.3212, 19.8846, -14.615, 0.46", "-17.4971, 20.4044, -15.2539, 0.23", "-18.7877, 20.9474, -15.914, 0.46", "-20.0514, 21.5299, -16.5145, 0.46", "-21.6025, 22.3539, -17.24, 0.46", "-23.4666, 23.4522, -18.1215, 0.23", "-24.8897, 24.3609, -18.7882, 0.23", "-26.2613, 25.278, -19.4111, 0.23", "-27.8229, 26.4477, -20.1447, 0.46", "-29.8539, 28.1811, -21.2073, 0.23", "-31.0263, 29.3822, -21.9223, 0.23", "-31.7108, 30.193, -22.4086, 0.46", "-32.0826, 30.6804, -22.7031, 0.46", "-33.0542, 32.0843, -23.5978, 0.23", "-33.6717, 33.0774, -24.2714, 0.46", "-34.3156, 34.186, -25.0501, 0.46", "-35.3062, 35.8656, -26.2817, 0.23", "-35.8982, 36.8441, -27.049, 0.46", "-36.7321, 38.1268, -28.1214, 0.46", "-37.793, 39.5159, -29.3958, 0.23", "-37.9086, 39.6492, -29.5245, 0.46", "-39.1314, 40.8709, -30.8481, 0.23", "-39.9817, 41.6316, -31.7759, 0.23", "-41.0103, 42.4541, -32.9797, 0.23", "-41.8922, 43.0629, -34.0514, 0.23", "-42.5595, 43.5032, -34.9076, 0.68", "-43.4925, 44.1252, -36.119, 0.23", "-44.7685, 44.9915, -37.8284, 0.23", "-45.6383, 45.5919, -39.0954, 0.46", "-46.7012, 46.3139, -40.7807, 0.23", "-47.4674, 46.7946, -42.0546, 0.23", "-47.8824, 47.0158, -42.7451, 0.46", "-48.0959, 47.1025, -43.0382, 0.46", "-49.1723, 47.485, -44.0794, 0.46", "-50.2554, 47.8864, -44.8897, 0.46", "-51.2657, 48.3141, -45.5109, 0.23", "-52.3106, 48.8105, -46.0313, 0.23", "-53.4215, 49.4511, -46.4768, 0.68", "-55.6477, 51.0392, -47.1395, 0.23", "-56.202, 51.5064, -47.2399, 0.46", "-57.368, 52.6086, -47.3689, 0.46", "-58.5546, 53.8222, -47.4643, 0.23", "-59.5936, 54.9314, -47.4954, 0.46", "-60.7889, 56.3156, -47.4747, 0.23", "-62.4595, 58.3784, -47.271, 0.23", "-63.0388, 59.0776, -47.1974, 0.46" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "3.48708, 13.5515, -12.3113, 0.91", "4.88336, 14.6122, -12.3118, 0.91", "6.34407, 15.7305, -12.338, 0.91", "7.44711, 16.5751, -12.3577, 0.91", "8.79821, 17.6095, -12.3819, 0.91", "10.44, 18.8665, -12.4113, 0.91", "11.6009, 19.7553, -12.4321, 0.91", "12.5739, 20.5032, -12.5245, 0.91" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "3.48708, 13.5515, -12.3113, 2.28", "4.13704, 13.973, -13.1782, 2.28", "5.01687, 14.5379, -14.2409, 2.28", "5.89903, 15.1748, -15.2668, 1.14", "6.91672, 15.9554, -16.3796, 0.91", "8.01262, 16.8137, -17.4402, 0.91", "8.61195, 17.3325, -17.997, 0.91", "9.44841, 18.0848, -18.6475, 0.91", "10.0221, 18.6481, -19.0386, 0.91", "11.0087, 19.8514, -19.7581, 0.91", "11.5806, 20.7831, -20.2271, 0.91", "12.1061, 21.9126, -20.7528, 0.91", "12.2872, 22.39, -21.0187, 0.68", "12.6648, 23.4716, -21.7836, 0.68", "13.0517, 24.6838, -22.9193, 0.68", "13.3412, 25.7965, -24.0469, 0.68", "13.4883, 26.4061, -24.7076, 0.68", "13.7766, 27.5115, -26.0176, 0.68", "14.0637, 28.632, -27.4476, 0.68", "14.3471, 29.7655, -29.0167, 0.91", "14.6358, 30.6103, -30.2729, 0.91", "15.0939, 31.6169, -31.6805, 0.91" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "-50.4588, -7.98859, 3.69458, 0.23", "-51.9421, -8.79495, 3.76181, 0.23", "-54.091, -10.0532, 4.03006, 0.23", "-55.7983, -11.0262, 4.33253, 0.23", "-57.0567, -11.7117, 4.58016, 0.46", "-59.2243, -12.8692, 5.02002, 0.23", "-60.4707, -13.5247, 5.29366, 0.23", "-62.0538, -14.3742, 5.72803, 0.23", "-63.5466, -15.1956, 6.1872, 0.23", "-64.6297, -15.7853, 6.52047, 0.46", "-65.5798, -16.2819, 6.7954, 0.46", "-66.8653, -16.9078, 7.10772, 0.23", "-68.4972, -17.6927, 7.4296, 0.23", "-69.7358, -18.333, 7.62631, 0.23", "-71.1041, -19.1745, 7.8675, 0.46", "-72.1837, -19.8815, 8.0889, 0.46", "-73.6491, -20.8836, 8.42247, 0.46", "-74.8516, -21.6865, 8.69514, 0.46", "-76.5549, -22.781, 9.10225, 0.23", "-78.2332, -23.8679, 9.49079, 0.23", "-79.2816, -24.537, 9.72748, 0.23", "-80.4157, -25.2795, 9.98845, 0.23", "-81.7347, -26.1352, 10.3014, 0.46", "-83.4266, -27.1182, 10.6733, 0.23", "-85.0786, -27.8931, 10.9731, 0.23", "-86.4443, -28.4436, 11.1081, 0.23" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "-50.4588, -7.98859, 3.69458, 0.23", "-51.3976, -8.58894, 4.07405, 0.23", "-52.8769, -9.34367, 4.53633, 0.23", "-55.2322, -10.2403, 5.11504, 0.23", "-56.4916, -10.619, 5.38133, 0.46", "-59.2763, -11.2491, 5.88019, 0.23", "-61.3809, -11.569, 6.21451, 0.23", "-63.6548, -11.671, 6.48115, 0.23", "-66.1491, -11.5694, 6.64836, 0.23", "-67.0988, -11.4568, 6.68015, 0.23", "-69.3535, -11.0389, 6.71979, 0.23", "-71.1045, -10.5356, 6.73481, 0.46", "-71.9595, -10.2301, 6.74702, 0.23", "-72.9597, -9.83812, 6.76612, 0.46" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "12.5739, 20.5032, -12.5245, 0.46", "13.1226, 21.8331, -12.9711, 0.46", "13.9267, 23.7425, -13.6282, 0.68", "14.3775, 24.8201, -14.0244, 0.68", "15.1624, 26.7325, -14.7549, 0.68", "15.8814, 28.4845, -15.4242, 0.46", "16.5768, 30.1788, -16.0714, 0.68", "17.4149, 32.1188, -16.7987, 0.46", "18.0574, 33.6106, -17.3621, 0.68", "18.7453, 35.2144, -17.9863, 0.68" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "12.5739, 20.5032, -12.5245, 0.68", "14.6922, 21.8558, -12.53, 0.68", "16.8877, 23.1863, -12.612, 0.68", "18.3045, 23.9745, -12.7115, 0.68", "19.8597, 24.8168, -12.849, 0.68", "21.822, 25.831, -13.0371, 0.68", "23.5771, 26.7381, -13.2053, 0.68", "25.4046, 27.636, -13.42, 0.68", "27.295, 28.477, -13.6908, 0.68", "28.1965, 28.863, -13.8369, 0.68", "29.5545, 29.4124, -14.0899, 0.68" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "15.0939, 31.6169, -31.6805, 0.46", "13.9783, 33.1184, -32.768, 0.46", "13.2689, 34.1455, -33.5707, 0.46", "12.6505, 35.066, -34.2882, 0.68", "11.6409, 36.6012, -35.5189, 0.46", "10.7376, 37.9621, -36.6499, 0.46", "9.95636, 39.1492, -37.6541, 0.68", "9.37257, 40.0913, -38.5082, 0.46", "8.53374, 41.5245, -39.8151, 0.46", "7.8604, 42.7897, -40.9045, 0.23", "7.24203, 44.0376, -41.915, 0.23", "6.75136, 45.0489, -42.6746, 0.46", "6.17342, 46.292, -43.5471, 0.68", "5.53246, 47.7145, -44.4661, 0.68", "4.91439, 49.0733, -45.2753, 0.46", "4.23088, 50.525, -46.046, 0.46", "3.53672, 51.9615, -46.7323, 0.68", "2.59504, 53.8014, -47.5757, 0.46", "1.53539, 55.7351, -48.4536, 0.23", "0.901365, 56.8772, -48.9344, 0.23", "0.46366, 57.5974, -49.2387, 0.46", "-0.538371, 59.1112, -49.8535, 0.46", "-1.42714, 60.3542, -50.375, 0.46", "-2.15401, 61.3268, -50.7775, 0.46", "-3.25461, 62.6886, -51.3316, 0.23", "-4.65638, 64.2373, -51.9744, 0.23", "-5.74763, 65.2963, -52.4255, 0.23", "-7.16361, 66.4831, -52.9144, 0.46", "-8.30295, 67.3471, -53.2663, 0.46", "-9.94236, 68.5124, -53.7414, 0.23", "-11.8487, 69.7747, -54.296, 0.23", "-12.4837, 70.1863, -54.4702, 0.23", "-13.8067, 71.0557, -54.831, 0.46", "-15.0239, 71.8741, -55.1836, 0.23", "-16.3107, 72.7839, -55.5955, 0.23", "-18.0217, 74.0925, -56.1979, 0.68", "-18.9019, 74.7967, -56.517, 0.46", "-20.3532, 75.9702, -57.0975, 0.23", "-21.5729, 76.9471, -57.6625, 0.46", "-22.4846, 77.6645, -58.1698, 0.23", "-23.4541, 78.4566, -58.8849, 0.46", "-24.1566, 79.104, -59.5784, 0.46", "-25.2393, 80.2023, -60.9108, 0.46", "-26.0211, 81.0324, -61.9982, 0.46", "-27.0329, 82.1531, -63.4919, 0.23", "-27.8909, 83.1263, -64.749, 0.23", "-28.7584, 84.0917, -65.8796, 0.46", "-29.7483, 85.1142, -67.0006, 0.46", "-30.4383, 85.7175, -67.6513, 0.46", "-31.8438, 86.7322, -68.8498, 0.23", "-32.9047, 87.345, -69.6931, 0.46", "-34.7028, 88.1937, -71.107, 0.23", "-35.6953, 88.5632, -71.9215, 0.46", "-37.4285, 89.1427, -73.411, 0.46", "-39.1802, 89.6648, -75.0301, 0.23", "-40.8682, 90.069, -76.7217, 0.23", "-41.8377, 90.2451, -77.7849, 0.23", "-43.5715, 90.4583, -79.8613, 0.23" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "15.0939, 31.6169, -31.6805, 0.68", "15.6647, 32.772, -32.6552, 0.68", "16.4615, 34.2328, -34.0547, 0.68", "17.089, 35.2749, -35.2083, 0.68", "17.3327, 35.6515, -35.6253, 0.68", "18.1215, 36.8141, -36.9475, 0.68", "18.8919, 38.0228, -38.3361, 0.68", "19.6167, 39.4423, -40.0091, 0.46", "20.013, 40.3563, -41.1319, 0.46", "20.2823, 41.0211, -41.932, 0.68", "20.6176, 41.8359, -42.8354, 0.91", "21.291, 43.3607, -44.3532, 0.68", "21.8488, 44.616, -45.5301, 0.68", "22.4469, 45.8631, -46.7033, 0.68", "23.2135, 47.2366, -47.9972, 0.46", "23.9542, 48.3538, -49.1053, 0.46", "24.9862, 49.5765, -50.3223, 0.46", "25.8952, 50.4139, -51.186, 0.46", "27.0134, 51.2751, -52.1279, 0.46", "28.281, 52.146, -53.1164, 0.46", "29.4603, 52.9215, -54.0653, 0.68", "30.9951, 53.9324, -55.406, 0.46", "32.182, 54.7831, -56.5336, 0.23", "33.1834, 55.6008, -57.5443, 0.23", "33.5921, 55.9802, -57.9938, 0.68", "34.7955, 57.1555, -59.3797, 0.46", "35.7416, 58.1839, -60.5789, 0.46", "36.3596, 58.9479, -61.4901, 0.68", "36.8787, 59.5947, -62.2893, 0.46", "37.8206, 60.743, -63.7431, 0.46", "38.5216, 61.6281, -64.8909, 0.46", "39.3325, 62.6379, -66.254, 0.46", "40.141, 63.6559, -67.6797, 0.46", "40.8245, 64.5052, -68.947, 0.23", "41.1782, 64.9393, -69.6495, 0.23", "41.9577, 65.928, -71.3304, 0.23", "42.4551, 66.5446, -72.4554, 0.46", "42.939, 67.1424, -73.554, 0.23", "43.4649, 67.8331, -74.7218, 0.68", "44.1013, 68.725, -76.174, 0.23", "44.5181, 69.3008, -77.1289, 0.68", "45.3892, 70.421, -79.062, 0.23", "46.1994, 71.4043, -80.8165, 0.23", "46.7394, 72.0448, -81.9792, 0.46", "47.4728, 72.874, -83.5567, 0.23", "48.3878, 73.8253, -85.3959, 0.23", "49.1229, 74.4499, -86.7129, 0.23", "49.9081, 74.911, -87.9185, 0.68", "50.8499, 75.2307, -89.1708, 0.46", "51.8158, 75.454, -90.3119, 0.23", "52.8577, 75.6747, -91.5534, 0.46", "53.6857, 75.8737, -92.6417, 0.68", "54.8076, 76.2206, -94.3291, 0.23", "55.8516, 76.6586, -96.0133, 0.23", "56.9346, 77.2372, -97.8415, 0.68", "57.9952, 78.0647, -99.9508, 0.46", "58.5821, 78.6981, -101.434, 0.46", "58.9396, 79.2564, -102.595, 0.46", "59.3286, 79.985, -104.189, 0.46", "59.6697, 80.6965, -106.012, 0.46", "59.929, 81.4825, -108.263, 0.46", "60.1302, 82.0661, -110.059, 0.23", "60.3165, 82.587, -111.747, 0.68", "60.6346, 83.4273, -114.553, 0.46", "60.9514, 84.0514, -116.876, 0.46", "61.4404, 84.625, -119.381, 0.46", "61.7737, 84.8497, -120.552, 0.46", "62.4824, 85.1185, -122.292, 0.23", "63.3569, 85.3284, -123.949, 0.23", "64.6357, 85.5946, -125.949, 0.23", "65.9608, 85.8063, -127.764, 0.23", "67.3548, 85.9446, -129.563, 0.23", "69.1161, 86.0521, -132.018, 0.23", "70.0969, 86.0738, -133.393, 0.23", "71.7323, 86.0769, -135.592, 0.23", "73.0033, 86.1043, -137.228, 0.23", "75.0837, 86.2293, -139.872, 0.23", "77.4752, 86.4571, -143.128, 0.23" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "18.7453, 35.2144, -17.9863, 0.46", "18.6162, 36.1054, -18.5802, 0.46", "18.4041, 37.8304, -19.6481, 0.46", "18.2284, 39.2451, -20.5147, 0.46", "18.1208, 40.4055, -21.2309, 0.46", "18.0192, 42.0959, -22.2701, 0.23", "17.989, 42.9437, -22.8338, 0.68", "17.9658, 43.7506, -23.3869, 0.68", "17.9478, 45.5242, -24.6824, 0.46", "17.9299, 47.1692, -25.9575, 0.46", "17.8895, 48.6875, -27.2203, 0.46", "17.7638, 50.6375, -28.9311, 0.68", "17.6508, 52.1055, -30.2913, 0.46", "17.5285, 53.8355, -31.9744, 0.46", "17.4281, 55.3647, -33.48, 0.46", "17.2967, 56.8524, -34.934, 0.23", "17.196, 58.1052, -36.1155, 0.46", "17.1509, 59.6214, -37.4515, 0.46", "17.1945, 60.7904, -38.4605, 0.23", "17.2469, 61.8165, -39.2669, 0.46", "17.2788, 62.5402, -39.771, 0.46", "17.3319, 63.2882, -40.2578, 0.23", "17.4368, 64.4338, -40.9391, 0.46", "17.4915, 65.8745, -41.6771, 0.46", "17.4892, 66.9531, -42.2025, 0.46", "17.4189, 69.1875, -43.3304, 0.46" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "18.7453, 35.2144, -17.9863, 0.46", "19.9626, 36.303, -18.9717, 0.46", "21.1345, 37.3536, -19.9122, 0.46", "22.2281, 38.3838, -20.8372, 0.46", "23.591, 39.6371, -21.987, 0.68", "24.7561, 40.6694, -22.9853, 0.68", "26.0645, 41.7447, -24.0501, 0.46", "27.4692, 42.8453, -25.1742, 0.68", "28.805, 43.8077, -26.2006, 0.68", "30.6014, 44.9049, -27.411, 0.68", "31.563, 45.4212, -28.0133, 0.68", "33.1363, 46.181, -29.0116, 0.46", "34.6129, 46.7493, -29.971, 0.46", "35.8293, 47.097, -30.7373, 0.68", "38.0048, 47.5867, -32.0389, 0.46", "39.7062, 47.8834, -32.9914, 0.46", "41.4687, 48.0911, -33.8469, 0.46", "43.2462, 48.144, -34.5562, 0.46", "44.5864, 48.0295, -34.8874, 0.46", "45.8195, 47.8302, -34.974, 0.23", "47.2669, 47.5515, -34.8412, 0.46", "49.2492, 47.1801, -34.4793, 0.23", "50.7797, 46.9367, -34.1527, 0.23", "52.1061, 46.7415, -33.9238, 0.46", "54.5117, 46.4144, -33.7235, 0.23", "56.7201, 46.1479, -33.7574, 0.23", "57.9865, 46.0566, -33.9007, 0.46", "60.4953, 45.9295, -34.4725, 0.23", "62.2158, 45.7985, -35.0089, 0.23", "63.6222, 45.608, -35.5206, 0.46", "64.6201, 45.3637, -35.9353, 0.23", "65.7075, 44.931, -36.4062, 0.68", "67.3444, 44.0289, -37.1034, 0.68", "68.6373, 43.1982, -37.6457, 0.68", "70.4212, 41.943, -38.2675, 0.23", "71.5047, 41.0511, -38.6057, 0.23", "73.0482, 39.6099, -39.0382, 0.23", "73.7092, 38.9093, -39.2026, 0.68" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "29.5545, 29.4124, -14.0899, 0.46", "31.4529, 29.8464, -14.1898, 0.46", "33.0497, 30.1654, -14.2858, 0.46", "34.9705, 30.5768, -14.402, 0.46", "36.8842, 30.9928, -14.5465, 0.46", "38.6477, 31.3762, -14.6797, 0.68", "39.3111, 31.5204, -14.7299, 0.68", "40.6706, 31.8125, -14.8545, 0.68", "42.4534, 32.2292, -15.0542, 0.46", "44.4675, 32.6626, -15.3381, 0.46" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "29.5545, 29.4124, -14.0899, 0.68", "30.4287, 30.6362, -14.1519, 0.68", "31.1327, 31.6519, -14.2327, 0.68", "32.3229, 33.3369, -14.3755, 0.46", "33.2212, 34.505, -14.5043, 0.46", "34.3404, 35.866, -14.7048, 0.68", "36.1136, 37.8756, -15.0454, 0.46", "37.3593, 39.1785, -15.3292, 0.46", "39.2257, 40.8863, -15.7701, 0.46", "40.7271, 42.0194, -16.1537, 0.46", "42.1498, 42.8551, -16.5106, 0.46", "43.2897, 43.3437, -16.7818, 0.68", "44.3233, 43.6666, -17.0054, 0.68", "46.9677, 44.2885, -17.52, 0.46", "48.9601, 44.6635, -17.8946, 0.46", "51.0563, 45.0254, -18.2693, 0.46", "53.1333, 45.3436, -18.6226, 0.23", "54.3541, 45.5279, -18.8317, 0.23", "55.5028, 45.6912, -19.0336, 0.46", "57.5453, 45.9517, -19.4721, 0.23", "59.0897, 46.1445, -19.8238, 0.46", "60.0095, 46.2354, -20.0445, 0.23", "60.88, 46.3094, -20.2478, 0.23", "62.1563, 46.4035, -20.5128, 0.46", "64.0828, 46.5195, -20.8395, 0.46", "66.0408, 46.5322, -21.0267, 0.46", "67.9749, 46.4423, -21.1022, 0.23", "68.7469, 46.3773, -21.0931, 0.23", "70.1657, 46.2501, -21.012, 0.23", "71.5123, 46.1462, -20.8778, 0.46", "73.5885, 46.0289, -20.6221, 0.23", "75.196, 45.9488, -20.4461, 0.46", "77.1405, 45.9473, -20.3367, 0.23", "78.6058, 46.0224, -20.3241, 0.46", "81.2439, 46.2773, -20.4002, 0.23", "83.4423, 46.5901, -20.537, 0.23", "85.8309, 47.031, -20.721, 0.46", "88.4887, 47.6088, -20.863, 0.23", "90.271, 47.9892, -20.9145, 0.23", "91.7321, 48.28, -20.8892, 0.46", "93.8115, 48.7122, -20.7217, 0.46", "95.5702, 49.0682, -20.4359, 0.23", "97.7713, 49.466, -19.8111, 0.23", "99.4875, 49.7335, -19.1865, 0.23", "101.002, 49.9555, -18.5528, 0.23", "103.161, 50.283, -17.5457, 0.23", "104.388, 50.4756, -16.9133, 0.23", "106.352, 50.7393, -15.8881, 0.23" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "44.4675, 32.6626, -15.3381, 0.46", "46.4763, 32.7432, -15.2886, 0.46", "48.5358, 32.8756, -15.2195, 0.46", "50.0186, 32.9926, -15.1942, 0.46", "51.3824, 33.1193, -15.1835, 0.46", "53.5264, 33.3479, -15.2296, 0.23", "55.1765, 33.5517, -15.306, 0.46", "56.4355, 33.7372, -15.4165, 0.46", "57.9605, 33.9949, -15.6026, 0.23", "59.0093, 34.1753, -15.768, 0.23", "60.9405, 34.5284, -16.1228, 0.46", "62.3541, 34.7707, -16.4348, 0.23", "64.0613, 35.0501, -16.8764, 0.23", "65.1776, 35.2296, -17.1813, 0.46", "66.6549, 35.459, -17.5811, 0.46" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "44.4675, 32.6626, -15.3381, 0.23", "45.4612, 33.7657, -16.2918, 0.23", "46.6808, 34.9599, -17.4387, 0.46", "47.7736, 35.9476, -18.4237, 0.23", "49.1816, 37.1957, -19.6038, 0.23", "50.4703, 38.313, -20.6485, 0.23", "51.9827, 39.5983, -21.8095, 0.23", "53.2003, 40.5386, -22.6939, 0.23", "54.3069, 41.3271, -23.4888, 0.23", "56.4465, 42.6614, -24.9514, 0.23", "57.0231, 42.9554, -25.3142, 0.23", "58.2147, 43.465, -25.9977, 0.46", "60.47, 44.2675, -27.2343, 0.23", "62.289, 44.8307, -28.2061, 0.23", "63.5469, 45.1383, -28.8707, 0.23", "65.7704, 45.5271, -30.0345, 0.23", "66.5722, 45.6216, -30.4371, 0.46", "68.6779, 45.6374, -31.4018, 0.23", "70.24, 45.4291, -31.9867, 0.23", "70.8773, 45.2528, -32.1915, 0.23", "71.595, 44.9743, -32.4434, 0.23", "72.96, 44.3263, -33.0126, 0.46", "74.9829, 43.2791, -33.8824, 0.23", "76.3297, 42.6315, -34.4992, 0.23", "77.1394, 42.3432, -34.9327, 0.46", "79.355, 41.9134, -36.2633, 0.23", "80.5253, 41.8577, -37.0198, 0.23", "81.8378, 41.976, -37.9467, 0.46", "83.6201, 42.2731, -39.3802, 0.23", "85.1381, 42.5229, -40.6028, 0.23", "85.912, 42.6182, -41.1882, 0.23", "86.4818, 42.6547, -41.5949, 0.46", "87.0327, 42.6814, -42.0088, 0.46", "88.3777, 42.8645, -43.2016, 0.23", "89.4885, 43.1382, -44.2803, 0.46", "90.3429, 43.5583, -45.0936, 0.23", "91.9996, 44.6885, -46.5695, 0.23", "93.109, 45.5563, -47.4748, 0.46", "94.6665, 46.9506, -48.6248, 0.23", "95.551, 47.8173, -49.2146, 0.23", "97.2225, 49.5783, -50.3558, 0.23", "98.4054, 50.8407, -51.1058, 0.23", "98.8875, 51.3431, -51.3392, 0.91", "100.621, 53.0511, -51.9837, 0.23", "101.153, 53.545, -52.1232, 0.46" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_8", "dend_7", "dend_4", "dend_3", "dend_0", "dend_28", "dend_9", "dend_6", "dend_5", "dend_2", "dend_1", "dend_30", "dend_29", "dend_23", "dend_10", "dend_25", "dend_24", "dend_14", "dend_11", "dend_27", "dend_26", "dend_20", "dend_15", "dend_13", "dend_12", "dend_22", "dend_21", "dend_17", "dend_16", "dend_19", "dend_18" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_8", "dend_7", "dend_4", "dend_3", "dend_0", "dend_28", "dend_9", "dend_6", "dend_5", "dend_2", "dend_1", "dend_30", "dend_29", "dend_23", "dend_10", "dend_25", "dend_24", "dend_14", "dend_11", "dend_27", "dend_26", "dend_20", "dend_15", "dend_13", "dend_12", "dend_22", "dend_21", "dend_17", "dend_16", "dend_19", "dend_18" ]
  }, {
    "name" : "ModelViewParmSubset_5",
    "groups" : [ ],
    "sections" : [ "dend_8", "dend_7", "dend_4", "dend_3", "dend_0", "axon_0", "dend_28", "dend_9", "dend_6", "dend_5", "dend_2", "dend_1", "axon_1", "dend_30", "dend_29", "dend_23", "dend_10", "dend_25", "dend_24", "dend_14", "dend_11", "dend_27", "dend_26", "dend_20", "dend_15", "dend_13", "dend_12", "dend_22", "dend_21", "dend_17", "dend_16", "dend_19", "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_30" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_34",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29", "dend_30" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_8", "dend_8", "dend_8", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_28", "dend_9", "dend_9", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_30", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_10", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_27", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "3.25478E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "3.25478E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.993125",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.005611",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.068459995",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.517764",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "6.3E-5",
    "erev" : "-64.6017"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "3.45E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.077616",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "7.43567E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.002099",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "1.13999995E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.26087198",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "2.0E-5",
    "erev" : "-69.78141"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.395881",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009986",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "5.0100003E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.009728",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "2.7999999E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cIR_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cIR_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cIR216_L1_HAC_5c847ea2ef_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_8, id: dend_8, parent: soma_0
create dend_8
public dend_8
// Section: dend_7, id: dend_7, parent: soma_0
create dend_7
public dend_7
// Section: dend_4, id: dend_4, parent: soma_0
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: soma_0
create dend_3
public dend_3
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_28, id: dend_28, parent: dend_8
create dend_28
public dend_28
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9
// Section: dend_6, id: dend_6, parent: dend_4
create dend_6
public dend_6
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_30, id: dend_30, parent: dend_28
create dend_30
public dend_30
// Section: dend_29, id: dend_29, parent: dend_28
create dend_29
public dend_29
// Section: dend_23, id: dend_23, parent: dend_9
create dend_23
public dend_23
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10
// Section: dend_25, id: dend_25, parent: dend_23
create dend_25
public dend_25
// Section: dend_24, id: dend_24, parent: dend_23
create dend_24
public dend_24
// Section: dend_14, id: dend_14, parent: dend_10
create dend_14
public dend_14
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_27, id: dend_27, parent: dend_25
create dend_27
public dend_27
// Section: dend_26, id: dend_26, parent: dend_25
create dend_26
public dend_26
// Section: dend_20, id: dend_20, parent: dend_14
create dend_20
public dend_20
// Section: dend_15, id: dend_15, parent: dend_14
create dend_15
public dend_15
// Section: dend_13, id: dend_13, parent: dend_11
create dend_13
public dend_13
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12
// Section: dend_22, id: dend_22, parent: dend_20
create dend_22
public dend_22
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_17, id: dend_17, parent: dend_15
create dend_17
public dend_17
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_8, dend_7, dend_4, dend_3, dend_0, dend_28, dend_9, dend_6, dend_5, dend_2, dend_1, dend_30, dend_29, dend_23, dend_10, dend_25, dend_24, dend_14, dend_11, dend_27, dend_26, dend_20, dend_15, dend_13, dend_12, dend_22, dend_21, dend_17, dend_16, dend_19, dend_18]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_8, dend_7, dend_4, dend_3, dend_0, dend_28, dend_9, dend_6, dend_5, dend_2, dend_1, dend_30, dend_29, dend_23, dend_10, dend_25, dend_24, dend_14, dend_11, dend_27, dend_26, dend_20, dend_15, dend_13, dend_12, dend_22, dend_21, dend_17, dend_16, dend_19, dend_18]}
objref ModelViewParmSubset_4
// Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_8, dend_7, dend_4, dend_3, dend_0, axon_0, dend_28, dend_9, dend_6, dend_5, dend_2, dend_1, axon_1, dend_30, dend_29, dend_23, dend_10, dend_25, dend_24, dend_14, dend_11, dend_27, dend_26, dend_20, dend_15, dend_13, dend_12, dend_22, dend_21, dend_17, dend_16, dend_19, dend_18]}
objref ModelViewParmSubset_5
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_30]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_34
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_33
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_24
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_9, dend_9, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_10, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cIR_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cIR_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_8(0), soma_0(0.49999986172309563)
    connect dend_7(0), soma_0(0.49999986172309563)
    connect dend_4(0), soma_0(0.49999986172309563)
    connect dend_3(0), soma_0(0.49999986172309563)
    connect dend_0(0), soma_0(0.49999986172309563)
    connect axon_0(0), soma_0(1.0)
    connect dend_28(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)
    connect dend_6(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_30(0), dend_28(1.0)
    connect dend_29(0), dend_28(1.0)
    connect dend_23(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)
    connect dend_25(0), dend_23(1.0)
    connect dend_24(0), dend_23(1.0)
    connect dend_14(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_27(0), dend_25(1.0)
    connect dend_26(0), dend_25(1.0)
    connect dend_20(0), dend_14(1.0)
    connect dend_15(0), dend_14(1.0)
    connect dend_13(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)
    connect dend_22(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_17(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -7.19825, 4.715, 0.0, 2.25023 ) }
    soma_0 { pt3dadd( -6.52585, 4.27569, 0.0, 3.89424 ) }
    soma_0 { pt3dadd( -5.85344, 3.83637, 0.0, 5.90647 ) }
    soma_0 { pt3dadd( -5.18104, 3.39705, 0.0, 7.46791 ) }
    soma_0 { pt3dadd( -4.50863, 2.95773, 0.0, 8.64023 ) }
    soma_0 { pt3dadd( -3.83623, 2.51842, 0.0, 9.59138 ) }
    soma_0 { pt3dadd( -3.16382, 2.0791, 0.0, 10.4724 ) }
    soma_0 { pt3dadd( -2.49142, 1.63978, 0.0, 11.0113 ) }
    soma_0 { pt3dadd( -1.81902, 1.20047, 0.0, 11.4757 ) }
    soma_0 { pt3dadd( -1.14661, 0.761149, 0.0, 11.8173 ) }
    soma_0 { pt3dadd( -0.474207, 0.321831, 0.0, 12.0352 ) }
    soma_0 { pt3dadd( 0.198197, -0.117486, 0.0, 12.1071 ) }
    soma_0 { pt3dadd( 0.870601, -0.556803, 0.0, 12.2205 ) }
    soma_0 { pt3dadd( 1.54301, -0.99612, 0.0, 12.3385 ) }
    soma_0 { pt3dadd( 2.21541, -1.43544, 0.0, 12.3439 ) }
    soma_0 { pt3dadd( 2.88781, -1.87475, 0.0, 11.6905 ) }
    soma_0 { pt3dadd( 3.56022, -2.31407, 0.0, 10.8961 ) }
    soma_0 { pt3dadd( 4.23262, -2.75339, 0.0, 10.0317 ) }
    soma_0 { pt3dadd( 4.90503, -3.19271, 0.0, 8.76785 ) }
    soma_0 { pt3dadd( 5.57743, -3.63202, 0.0, 6.4382 ) }
    soma_0 { pt3dadd( 6.24984, -4.07134, 0.0, 3.64463 ) }
    // Section: dend_8, id: dend_8, parent: soma_0 (entry count 21/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 2.57675, 5.85152, -7.49, 4.1 ) }
    dend_8 { pt3dadd( 2.57675, 5.85152, -7.49, 4.1 ) }
    dend_8 { pt3dadd( 2.75453, 7.50506, -7.94639, 3.64 ) }
    dend_8 { pt3dadd( 2.96756, 9.48634, -8.49325, 2.96 ) }
    // Section: dend_7, id: dend_7, parent: soma_0 (entry count 25/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 4.99679, 2.79152, -8.14, 1.59 ) }
    dend_7 { pt3dadd( 5.45914, 2.20546, -8.04242, 1.59 ) }
    dend_7 { pt3dadd( 6.31295, 1.28311, -7.85902, 1.59 ) }
    dend_7 { pt3dadd( 7.63264, 0.0866669, -7.71971, 1.37 ) }
    dend_7 { pt3dadd( 9.04873, -1.08157, -7.77368, 0.91 ) }
    dend_7 { pt3dadd( 10.8122, -2.61817, -8.034, 0.91 ) }
    dend_7 { pt3dadd( 11.6831, -3.42153, -8.28905, 0.68 ) }
    dend_7 { pt3dadd( 12.4127, -4.16351, -8.64893, 0.68 ) }
    dend_7 { pt3dadd( 13.6666, -5.6333, -9.6023, 0.91 ) }
    dend_7 { pt3dadd( 14.6928, -7.01628, -10.6923, 0.68 ) }
    dend_7 { pt3dadd( 15.5333, -8.24107, -11.8453, 0.68 ) }
    dend_7 { pt3dadd( 16.1996, -9.31142, -12.9625, 0.68 ) }
    dend_7 { pt3dadd( 16.628, -10.0841, -13.7262, 0.46 ) }
    dend_7 { pt3dadd( 17.0578, -10.817, -14.4484, 0.46 ) }
    dend_7 { pt3dadd( 17.7634, -11.7423, -15.3717, 0.68 ) }
    dend_7 { pt3dadd( 18.7752, -12.6287, -16.3858, 0.68 ) }
    dend_7 { pt3dadd( 19.7907, -13.2947, -17.2535, 0.68 ) }
    dend_7 { pt3dadd( 20.3953, -13.6584, -17.7518, 0.91 ) }
    dend_7 { pt3dadd( 21.573, -14.3183, -18.7296, 0.68 ) }
    dend_7 { pt3dadd( 22.4577, -14.8304, -19.4903, 0.46 ) }
    dend_7 { pt3dadd( 22.6277, -14.9492, -19.6209, 0.46 ) }
    dend_7 { pt3dadd( 23.3281, -15.5391, -19.9943, 0.46 ) }
    dend_7 { pt3dadd( 24.1986, -16.1819, -20.3823, 0.46 ) }
    dend_7 { pt3dadd( 24.7867, -16.5371, -20.6511, 0.46 ) }
    dend_7 { pt3dadd( 25.3604, -16.8765, -20.9697, 0.46 ) }
    dend_7 { pt3dadd( 26.8273, -17.6682, -21.9221, 0.68 ) }
    dend_7 { pt3dadd( 28.5319, -18.5483, -23.1518, 0.46 ) }
    dend_7 { pt3dadd( 29.9582, -19.3078, -24.2482, 0.46 ) }
    dend_7 { pt3dadd( 31.4333, -20.1551, -25.4525, 0.68 ) }
    dend_7 { pt3dadd( 32.8444, -21.091, -26.6374, 0.46 ) }
    dend_7 { pt3dadd( 34.5878, -22.3864, -28.109, 0.68 ) }
    dend_7 { pt3dadd( 35.577, -23.2398, -28.9081, 0.46 ) }
    dend_7 { pt3dadd( 36.5106, -24.25, -29.5395, 0.91 ) }
    dend_7 { pt3dadd( 37.0728, -24.9861, -29.8167, 0.91 ) }
    dend_7 { pt3dadd( 38.274, -26.8171, -30.2409, 0.46 ) }
    dend_7 { pt3dadd( 38.7108, -27.6059, -30.3487, 0.46 ) }
    dend_7 { pt3dadd( 39.4158, -29.2683, -30.5557, 0.23 ) }
    dend_7 { pt3dadd( 40.0552, -31.1336, -30.8636, 0.23 ) }
    dend_7 { pt3dadd( 40.3516, -32.3131, -31.1337, 0.68 ) }
    dend_7 { pt3dadd( 40.6621, -34.1839, -31.6585, 0.23 ) }
    dend_7 { pt3dadd( 40.7554, -36.4259, -32.4529, 0.46 ) }
    dend_7 { pt3dadd( 40.6813, -37.9889, -33.1179, 0.23 ) }
    dend_7 { pt3dadd( 40.5611, -39.1534, -33.6751, 0.23 ) }
    dend_7 { pt3dadd( 40.49, -39.9248, -34.0612, 0.68 ) }
    dend_7 { pt3dadd( 40.4552, -41.093, -34.5834, 0.68 ) }
    dend_7 { pt3dadd( 40.5736, -42.8472, -35.2165, 0.23 ) }
    dend_7 { pt3dadd( 40.8293, -44.4505, -35.6846, 0.46 ) }
    dend_7 { pt3dadd( 41.2024, -46.0668, -36.0595, 0.23 ) }
    dend_7 { pt3dadd( 41.6677, -47.8093, -36.3972, 0.46 ) }
    dend_7 { pt3dadd( 42.4667, -50.6637, -36.8762, 0.23 ) }
    dend_7 { pt3dadd( 43.0499, -52.7677, -37.1834, 0.23 ) }
    dend_7 { pt3dadd( 43.5861, -54.6229, -37.3904, 0.46 ) }
    dend_7 { pt3dadd( 43.9378, -56.014, -37.5157, 0.23 ) }
    dend_7 { pt3dadd( 44.1206, -56.9597, -37.6004, 0.23 ) }
    dend_7 { pt3dadd( 44.3195, -58.405, -37.7195, 0.46 ) }
    dend_7 { pt3dadd( 44.3853, -59.6468, -37.8456, 0.23 ) }
    dend_7 { pt3dadd( 44.3389, -60.7981, -38.0196, 0.46 ) }
    dend_7 { pt3dadd( 44.0518, -63.3347, -38.4951, 0.23 ) }
    dend_7 { pt3dadd( 43.7762, -65.2435, -38.9219, 0.23 ) }
    dend_7 { pt3dadd( 43.6211, -66.3044, -39.189, 0.46 ) }
    dend_7 { pt3dadd( 43.352, -68.3695, -39.7668, 0.23 ) }
    dend_7 { pt3dadd( 43.191, -70.0195, -40.2431, 0.23 ) }
    dend_7 { pt3dadd( 43.1054, -71.4128, -40.6539, 0.23 ) }
    dend_7 { pt3dadd( 43.0682, -72.561, -40.9899, 0.23 ) }
    dend_7 { pt3dadd( 43.049, -73.4998, -41.2294, 0.46 ) }
    dend_7 { pt3dadd( 43.1295, -75.3986, -41.6142, 0.91 ) }
    dend_7 { pt3dadd( 43.2726, -76.8427, -41.8026, 0.23 ) }
    dend_7 { pt3dadd( 43.4583, -78.3246, -41.9434, 0.46 ) }
    dend_7 { pt3dadd( 43.5997, -79.4732, -42.0367, 0.23 ) }
    dend_7 { pt3dadd( 43.7365, -80.6379, -42.1187, 0.46 ) }
    dend_7 { pt3dadd( 44.0963, -83.5681, -42.334, 0.23 ) }
    dend_7 { pt3dadd( 44.517, -86.823, -42.5683, 0.23 ) }
    dend_7 { pt3dadd( 44.7016, -88.1462, -42.655, 0.23 ) }
    dend_7 { pt3dadd( 44.9455, -89.7268, -42.7469, 0.46 ) }
    dend_7 { pt3dadd( 45.4198, -92.6263, -42.8973, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_7 { pt3dadd( 45.8514, -95.367, -43.022, 0.23 ) }
    dend_7 { pt3dadd( 45.9796, -96.3267, -43.0551, 0.68 ) }
    dend_7 { pt3dadd( 46.1708, -97.8833, -43.0816, 0.23 ) }
    dend_7 { pt3dadd( 46.2617, -99.114, -43.0795, 0.46 ) }
    dend_7 { pt3dadd( 46.3282, -100.626, -43.0466, 0.23 ) }
    dend_7 { pt3dadd( 46.3558, -102.416, -42.9779, 0.23 ) }
    dend_7 { pt3dadd( 46.3564, -103.564, -42.9547, 0.46 ) }
    dend_7 { pt3dadd( 46.3525, -106.095, -42.8831, 0.23 ) }
    dend_7 { pt3dadd( 46.3125, -108.394, -42.8162, 0.23 ) }
    dend_7 { pt3dadd( 46.2924, -109.655, -42.7703, 0.46 ) }
    dend_7 { pt3dadd( 46.2634, -110.63, -42.7323, 0.68 ) }
    dend_7 { pt3dadd( 46.1523, -112.698, -42.6573, 0.68 ) }
    dend_7 { pt3dadd( 45.8157, -118.023, -42.483, 0.23 ) }
    dend_7 { pt3dadd( 45.6133, -120.892, -42.3968, 0.23 ) }
    dend_7 { pt3dadd( 45.5415, -121.867, -42.3621, 0.46 ) }
    dend_7 { pt3dadd( 45.1016, -126.465, -42.1724, 0.23 ) }
    dend_7 { pt3dadd( 44.8094, -129.047, -42.0428, 0.23 ) }
    dend_7 { pt3dadd( 44.6243, -130.373, -41.9604, 0.46 ) }
    // Section: dend_4, id: dend_4, parent: soma_0 (entry count 18/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 4.92677, -6.16848, 6.98, 0.91 ) }
    dend_4 { pt3dadd( 6.27849, -6.47746, 7.17785, 0.91 ) }
    dend_4 { pt3dadd( 7.46293, -6.74819, 7.35121, 0.91 ) }
    dend_4 { pt3dadd( 9.30632, -7.16955, 7.62102, 0.91 ) }
    dend_4 { pt3dadd( 11.2868, -7.62222, 7.91088, 0.91 ) }
    dend_4 { pt3dadd( 12.9442, -8.00107, 8.15348, 0.91 ) }
    // Section: dend_3, id: dend_3, parent: soma_0 (entry count 24/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -5.78325, -2.27848, -3.3, 0.91 ) }
    dend_3 { pt3dadd( -6.396, -3.23435, -2.38535, 0.91 ) }
    dend_3 { pt3dadd( -7.28615, -4.41896, -1.18317, 0.91 ) }
    dend_3 { pt3dadd( -7.98479, -5.24551, -0.419799, 0.91 ) }
    dend_3 { pt3dadd( -8.82844, -6.10813, 0.307529, 0.91 ) }
    dend_3 { pt3dadd( -9.88122, -7.02524, 1.00434, 0.68 ) }
    dend_3 { pt3dadd( -11.1795, -7.96738, 1.67188, 0.68 ) }
    dend_3 { pt3dadd( -12.456, -8.68487, 2.16713, 0.68 ) }
    dend_3 { pt3dadd( -14.4869, -9.60369, 2.7812, 0.68 ) }
    dend_3 { pt3dadd( -16.313, -10.2075, 3.23737, 0.68 ) }
    dend_3 { pt3dadd( -18.7321, -10.6058, 3.73407, 0.68 ) }
    dend_3 { pt3dadd( -20.8094, -10.6558, 4.11379, 0.46 ) }
    dend_3 { pt3dadd( -22.7323, -10.4624, 4.43808, 0.46 ) }
    dend_3 { pt3dadd( -23.725, -10.2278, 4.60537, 0.46 ) }
    dend_3 { pt3dadd( -25.7137, -9.43342, 4.96468, 0.46 ) }
    dend_3 { pt3dadd( -28.6029, -7.93679, 5.499, 0.46 ) }
    dend_3 { pt3dadd( -29.18, -7.58784, 5.59977, 0.46 ) }
    dend_3 { pt3dadd( -30.7555, -6.57904, 5.83486, 0.46 ) }
    dend_3 { pt3dadd( -31.6602, -5.96735, 5.92772, 0.46 ) }
    dend_3 { pt3dadd( -33.5264, -4.75424, 6.04863, 0.46 ) }
    dend_3 { pt3dadd( -35.0713, -3.79067, 6.11334, 0.46 ) }
    dend_3 { pt3dadd( -36.865, -2.76488, 6.17819, 0.46 ) }
    dend_3 { pt3dadd( -39.603, -1.34321, 6.25227, 0.23 ) }
    dend_3 { pt3dadd( -41.0517, -0.610393, 6.27985, 0.23 ) }
    dend_3 { pt3dadd( -43.3218, 0.463093, 6.32605, 0.23 ) }
    dend_3 { pt3dadd( -44.8606, 1.15122, 6.35863, 0.46 ) }
    dend_3 { pt3dadd( -46.7126, 1.95917, 6.39686, 0.23 ) }
    dend_3 { pt3dadd( -48.404, 2.61997, 6.42437, 0.23 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 52/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -7.90324, 4.07152, -0.52, 0.91 ) }
    dend_0 { pt3dadd( -9.5068, 4.1503, -0.532695, 0.91 ) }
    dend_0 { pt3dadd( -10.9135, 4.17228, -0.545553, 0.91 ) }
    dend_0 { pt3dadd( -12.9257, 4.19275, -0.571569, 0.68 ) }
    dend_0 { pt3dadd( -15.3599, 4.25624, -0.605767, 0.68 ) }
    dend_0 { pt3dadd( -16.9492, 4.34008, -0.638552, 0.68 ) }
    dend_0 { pt3dadd( -18.1273, 4.43557, -0.658218, 0.91 ) }
    dend_0 { pt3dadd( -19.905, 4.57131, -0.690824, 0.68 ) }
    dend_0 { pt3dadd( -21.9745, 4.76288, -0.73269, 0.68 ) }
    dend_0 { pt3dadd( -24.0077, 5.01826, -0.778413, 0.68 ) }
    dend_0 { pt3dadd( -25.6259, 5.27099, -0.817383, 0.68 ) }
    dend_0 { pt3dadd( -27.0353, 5.51311, -0.849084, 0.68 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 64/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 6.24984, -4.07134, 0.0, 0.749448 ) }
    axon_0 { pt3dadd( 18.8072, -12.2757, 0.0, 0.749448 ) }
    axon_0 { pt3dadd( 31.3646, -20.4801, 0.0, 0.749448 ) }
    // Section: dend_28, id: dend_28, parent: dend_8 (entry count 67/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 2.96756, 9.48634, -8.49325, 1.14 ) }
    dend_28 { pt3dadd( 3.35565, 11.5957, -8.23865, 1.14 ) }
    dend_28 { pt3dadd( 3.79808, 14.162, -8.10101, 1.14 ) }
    dend_28 { pt3dadd( 4.19912, 16.5149, -8.05391, 0.91 ) }
    dend_28 { pt3dadd( 4.445, 17.9575, -8.02503, 0.91 ) }
    dend_28 { pt3dadd( 4.73382, 19.652, -7.9911, 0.91 ) }
    dend_28 { pt3dadd( 4.92673, 20.7839, -7.96844, 0.91 ) }
    dend_28 { pt3dadd( 5.31079, 22.9524, -8.0586, 0.68 ) }
    dend_28 { pt3dadd( 5.47191, 23.7937, -8.19146, 0.68 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 76/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 2.96756, 9.48634, -8.49325, 2.96 ) }
    dend_9 { pt3dadd( 3.10475, 10.6498, -10.0524, 2.96 ) }
    dend_9 { pt3dadd( 3.27712, 12.1115, -12.0113, 2.96 ) }
    // Section: dend_6, id: dend_6, parent: dend_4 (entry count 79/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 12.9442, -8.00107, 8.15348, 0.68 ) }
    dend_6 { pt3dadd( 12.5905, -8.91497, 8.75595, 0.68 ) }
    dend_6 { pt3dadd( 11.944, -10.5856, 9.85729, 0.23 ) }
    dend_6 { pt3dadd( 11.2881, -12.2801, 10.9744, 0.23 ) }
    dend_6 { pt3dadd( 10.8308, -13.4619, 11.7535, 0.23 ) }
    dend_6 { pt3dadd( 10.5391, -14.2156, 12.2503, 0.23 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 85/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 12.9442, -8.00107, 8.15348, 0.68 ) }
    dend_5 { pt3dadd( 15.0999, -7.20825, 7.82165, 0.68 ) }
    dend_5 { pt3dadd( 16.2485, -6.7702, 7.58153, 0.68 ) }
    dend_5 { pt3dadd( 17.9878, -6.09669, 7.17005, 0.68 ) }
    dend_5 { pt3dadd( 19.9881, -5.35634, 6.65432, 0.68 ) }
    dend_5 { pt3dadd( 22.0628, -4.72019, 6.06682, 0.46 ) }
    dend_5 { pt3dadd( 24.0157, -4.21912, 5.50278, 0.46 ) }
    dend_5 { pt3dadd( 25.6147, -3.94828, 4.98297, 0.46 ) }
    dend_5 { pt3dadd( 27.014, -3.83641, 4.53076, 0.68 ) }
    dend_5 { pt3dadd( 28.4321, -3.84919, 4.06961, 0.46 ) }
    dend_5 { pt3dadd( 30.6571, -4.10464, 3.38277, 0.46 ) }
    dend_5 { pt3dadd( 32.2456, -4.46681, 2.92477, 0.46 ) }
    dend_5 { pt3dadd( 34.246, -5.06746, 2.39319, 0.46 ) }
    dend_5 { pt3dadd( 36.6342, -5.82678, 1.79505, 0.46 ) }
    dend_5 { pt3dadd( 37.6562, -6.12959, 1.53748, 0.46 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_5 { pt3dadd( 39.1851, -6.50366, 1.12887, 0.23 ) }
    dend_5 { pt3dadd( 41.5712, -6.93074, 0.446003, 0.23 ) }
    dend_5 { pt3dadd( 43.1266, -7.13504, -0.0372472, 0.46 ) }
    dend_5 { pt3dadd( 44.9365, -7.20212, -0.65173, 0.23 ) }
    dend_5 { pt3dadd( 46.1622, -7.10851, -1.11692, 0.46 ) }
    dend_5 { pt3dadd( 47.8213, -6.76398, -1.76164, 0.23 ) }
    dend_5 { pt3dadd( 49.1159, -6.34072, -2.27913, 0.23 ) }
    dend_5 { pt3dadd( 50.5179, -5.75098, -2.82444, 0.46 ) }
    dend_5 { pt3dadd( 52.4749, -4.86614, -3.52753, 0.46 ) }
    dend_5 { pt3dadd( 54.4395, -3.94018, -4.14949, 0.23 ) }
    dend_5 { pt3dadd( 56.875, -2.74357, -4.88782, 0.23 ) }
    dend_5 { pt3dadd( 58.1572, -2.06326, -5.28172, 0.46 ) }
    dend_5 { pt3dadd( 59.8214, -1.16765, -5.82459, 0.23 ) }
    dend_5 { pt3dadd( 60.9485, -0.56261, -6.20991, 0.46 ) }
    dend_5 { pt3dadd( 62.1841, 0.0795717, -6.64556, 0.46 ) }
    dend_5 { pt3dadd( 63.5258, 0.752527, -7.15169, 0.46 ) }
    dend_5 { pt3dadd( 64.2567, 1.14979, -7.49498, 0.46 ) }
    dend_5 { pt3dadd( 65.3051, 1.8242, -8.15855, 0.46 ) }
    dend_5 { pt3dadd( 66.1032, 2.47005, -8.84441, 0.46 ) }
    dend_5 { pt3dadd( 66.9528, 3.20491, -9.67179, 0.46 ) }
    dend_5 { pt3dadd( 67.6071, 3.78121, -10.3582, 0.46 ) }
    dend_5 { pt3dadd( 68.8503, 4.98578, -11.7691, 0.68 ) }
    dend_5 { pt3dadd( 69.8817, 6.10832, -13.033, 0.68 ) }
    dend_5 { pt3dadd( 70.8756, 7.27107, -14.4644, 0.46 ) }
    dend_5 { pt3dadd( 71.8416, 8.37071, -15.8933, 0.46 ) }
    dend_5 { pt3dadd( 72.5426, 9.14395, -16.9287, 0.46 ) }
    dend_5 { pt3dadd( 73.4185, 10.0704, -18.18, 0.68 ) }
    dend_5 { pt3dadd( 73.8756, 10.5025, -18.7646, 0.68 ) }
    dend_5 { pt3dadd( 75.6127, 12.0148, -20.724, 0.23 ) }
    dend_5 { pt3dadd( 77.1588, 13.2111, -22.2509, 0.23 ) }
    dend_5 { pt3dadd( 78.1489, 13.9298, -23.1455, 0.23 ) }
    dend_5 { pt3dadd( 78.8456, 14.3806, -23.6722, 0.46 ) }
    dend_5 { pt3dadd( 80.5357, 15.3349, -24.7835, 0.23 ) }
    dend_5 { pt3dadd( 82.0499, 16.1563, -25.7036, 0.23 ) }
    dend_5 { pt3dadd( 83.6172, 17.0306, -26.558, 0.46 ) }
    dend_5 { pt3dadd( 84.6872, 17.6577, -27.1311, 0.23 ) }
    dend_5 { pt3dadd( 86.5358, 18.8027, -28.0742, 0.46 ) }
    dend_5 { pt3dadd( 88.642, 20.2958, -29.0891, 0.23 ) }
    dend_5 { pt3dadd( 89.3976, 20.9192, -29.4192, 0.23 ) }
    dend_5 { pt3dadd( 90.2346, 21.7105, -29.7513, 0.46 ) }
    dend_5 { pt3dadd( 91.9276, 23.498, -30.3736, 0.23 ) }
    dend_5 { pt3dadd( 92.4521, 24.0743, -30.5517, 0.23 ) }
    dend_5 { pt3dadd( 94.5491, 26.4534, -31.2083, 0.23 ) }
    dend_5 { pt3dadd( 95.784, 27.8667, -31.5327, 0.46 ) }
    dend_5 { pt3dadd( 97.4298, 29.708, -31.8765, 0.23 ) }
    dend_5 { pt3dadd( 98.9527, 31.3181, -32.1139, 0.23 ) }
    dend_5 { pt3dadd( 100.059, 32.4301, -32.2251, 0.23 ) }
    dend_5 { pt3dadd( 101.281, 33.6037, -32.268, 0.23 ) }
    dend_5 { pt3dadd( 102.473, 34.6597, -32.2337, 0.23 ) }
    dend_5 { pt3dadd( 103.833, 35.7293, -32.1142, 0.23 ) }
    dend_5 { pt3dadd( 105.295, 36.7463, -31.9428, 0.23 ) }
    dend_5 { pt3dadd( 106.957, 37.7326, -31.7283, 0.23 ) }
    dend_5 { pt3dadd( 108.007, 38.2163, -31.5986, 0.23 ) }
    dend_5 { pt3dadd( 109.058, 38.5337, -31.5022, 1.37 ) }
    dend_5 { pt3dadd( 111.969, 39.0705, -31.3404, 0.23 ) }
    dend_5 { pt3dadd( 113.118, 39.198, -31.3198, 0.23 ) }
    dend_5 { pt3dadd( 114.953, 39.3196, -31.312, 0.23 ) }
    dend_5 { pt3dadd( 116.569, 39.338, -31.3326, 0.46 ) }
    dend_5 { pt3dadd( 118.386, 39.3042, -31.4037, 0.23 ) }
    dend_5 { pt3dadd( 120.002, 39.2186, -31.4626, 0.23 ) }
    dend_5 { pt3dadd( 121.097, 39.137, -31.4931, 0.23 ) }
    dend_5 { pt3dadd( 121.838, 39.094, -31.4938, 0.46 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 62/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -27.0353, 5.51311, -0.849084, 0.46 ) }
    dend_2 { pt3dadd( -28.9714, 5.86234, -0.56205, 0.46 ) }
    dend_2 { pt3dadd( -30.6196, 6.11701, -0.274049, 0.46 ) }
    dend_2 { pt3dadd( -32.2089, 6.3521, 0.0141219, 0.46 ) }
    dend_2 { pt3dadd( -33.1246, 6.52869, 0.195827, 0.23 ) }
    dend_2 { pt3dadd( -34.75, 6.92166, 0.453132, 0.23 ) }
    dend_2 { pt3dadd( -36.2851, 7.3277, 0.656091, 0.46 ) }
    dend_2 { pt3dadd( -37.7404, 7.82677, 0.808054, 0.46 ) }
    dend_2 { pt3dadd( -38.3795, 8.09213, 0.836034, 0.46 ) }
    dend_2 { pt3dadd( -40.4568, 9.09366, 0.917084, 0.23 ) }
    dend_2 { pt3dadd( -42.1119, 10.0468, 1.05856, 0.23 ) }
    dend_2 { pt3dadd( -43.2962, 10.8111, 1.15898, 0.23 ) }
    dend_2 { pt3dadd( -45.116, 12.0914, 1.29713, 0.46 ) }
    dend_2 { pt3dadd( -46.457, 13.1182, 1.36602, 0.23 ) }
    dend_2 { pt3dadd( -47.7489, 14.1404, 1.45902, 0.23 ) }
    dend_2 { pt3dadd( -49.108, 15.2489, 1.62482, 0.23 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 78/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -27.0353, 5.51311, -0.849084, 0.46 ) }
    dend_1 { pt3dadd( -28.1346, 7.17556, -1.78253, 0.46 ) }
    dend_1 { pt3dadd( -28.9672, 8.38093, -2.41188, 0.46 ) }
    dend_1 { pt3dadd( -29.7695, 9.45343, -2.94963, 0.68 ) }
    dend_1 { pt3dadd( -30.9564, 11.0132, -3.71039, 0.46 ) }
    dend_1 { pt3dadd( -32.1293, 12.6069, -4.47373, 0.46 ) }
    dend_1 { pt3dadd( -33.2355, 14.1491, -5.22061, 0.46 ) }
    dend_1 { pt3dadd( -33.7338, 14.8244, -5.534, 0.46 ) }
    dend_1 { pt3dadd( -34.8115, 16.3583, -6.20746, 0.46 ) }
    dend_1 { pt3dadd( -35.9234, 18.0661, -6.92387, 0.46 ) }
    dend_1 { pt3dadd( -37.2886, 20.334, -7.85414, 0.46 ) }
    dend_1 { pt3dadd( -37.7262, 21.1592, -8.18843, 0.46 ) }
    dend_1 { pt3dadd( -38.3376, 22.5499, -8.74308, 0.68 ) }
    dend_1 { pt3dadd( -39.1506, 24.8042, -9.61838, 0.46 ) }
    dend_1 { pt3dadd( -39.662, 26.7785, -10.377, 0.46 ) }
    dend_1 { pt3dadd( -39.8374, 27.7789, -10.7923, 0.46 ) }
    dend_1 { pt3dadd( -39.9833, 29.0995, -11.4027, 0.68 ) }
    dend_1 { pt3dadd( -40.1504, 30.9977, -12.3542, 0.46 ) }
    dend_1 { pt3dadd( -40.3196, 33.0923, -13.4764, 0.46 ) }
    dend_1 { pt3dadd( -40.5109, 34.6707, -14.3858, 0.68 ) }
    dend_1 { pt3dadd( -40.8942, 36.7011, -15.6191, 0.46 ) }
    dend_1 { pt3dadd( -41.712, 39.2631, -17.2904, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_1 { pt3dadd( -42.4848, 40.7105, -18.3038, 0.46 ) }
    dend_1 { pt3dadd( -43.2094, 41.5714, -18.9168, 0.46 ) }
    dend_1 { pt3dadd( -44.7002, 42.6829, -19.6756, 0.23 ) }
    dend_1 { pt3dadd( -45.7462, 43.1418, -19.9525, 0.23 ) }
    dend_1 { pt3dadd( -47.6738, 43.5285, -20.1345, 0.23 ) }
    dend_1 { pt3dadd( -49.6427, 43.5614, -20.1074, 0.46 ) }
    dend_1 { pt3dadd( -50.8482, 43.4752, -20.024, 0.46 ) }
    dend_1 { pt3dadd( -52.3059, 43.2943, -19.8727, 0.23 ) }
    dend_1 { pt3dadd( -54.395, 42.9356, -19.5379, 0.23 ) }
    dend_1 { pt3dadd( -55.6897, 42.6631, -19.2931, 0.23 ) }
    dend_1 { pt3dadd( -57.095, 42.2815, -18.9768, 0.46 ) }
    dend_1 { pt3dadd( -57.9828, 41.9693, -18.8033, 0.46 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 12/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 31.3646, -20.4801, 0.0, 0.46 ) }
    axon_1 { pt3dadd( 43.922, -28.6845, 0.0, 0.46 ) }
    axon_1 { pt3dadd( 56.4794, -36.8889, 0.0, 0.46 ) }
    // Section: dend_30, id: dend_30, parent: dend_28 (entry count 15/100)
    dend_30 { pt3dclear() }
    dend_30 { pt3dadd( 5.47191, 23.7937, -8.19146, 0.23 ) }
    dend_30 { pt3dadd( 6.34988, 25.7005, -8.58104, 0.23 ) }
    dend_30 { pt3dadd( 7.03925, 27.2542, -8.93551, 0.46 ) }
    dend_30 { pt3dadd( 7.77283, 28.9131, -9.28709, 0.23 ) }
    dend_30 { pt3dadd( 8.4304, 30.2642, -9.55127, 0.46 ) }
    dend_30 { pt3dadd( 9.26762, 31.7141, -9.81904, 0.23 ) }
    dend_30 { pt3dadd( 9.90367, 32.6946, -9.9901, 0.68 ) }
    dend_30 { pt3dadd( 11.5263, 34.8667, -10.3404, 0.46 ) }
    dend_30 { pt3dadd( 13.4566, 37.0169, -10.6596, 0.46 ) }
    dend_30 { pt3dadd( 15.0584, 38.5223, -10.8373, 0.46 ) }
    dend_30 { pt3dadd( 17.0776, 40.0601, -11.0234, 0.23 ) }
    dend_30 { pt3dadd( 18.3352, 40.8189, -11.1347, 0.23 ) }
    dend_30 { pt3dadd( 19.9831, 41.5979, -11.3331, 0.23 ) }
    dend_30 { pt3dadd( 21.4861, 42.1111, -11.5419, 0.23 ) }
    dend_30 { pt3dadd( 23.7122, 42.6123, -11.9612, 0.23 ) }
    dend_30 { pt3dadd( 26.4726, 43.0533, -12.6001, 0.46 ) }
    dend_30 { pt3dadd( 29.1118, 43.3677, -13.3069, 0.23 ) }
    dend_30 { pt3dadd( 30.9032, 43.4883, -13.8443, 0.23 ) }
    dend_30 { pt3dadd( 32.0073, 43.5216, -14.2086, 0.23 ) }
    dend_30 { pt3dadd( 33.7522, 43.5347, -14.8423, 0.23 ) }
    dend_30 { pt3dadd( 35.0741, 43.4199, -15.3666, 0.23 ) }
    dend_30 { pt3dadd( 35.7522, 43.3174, -15.647, 0.46 ) }
    dend_30 { pt3dadd( 36.7186, 43.1148, -16.0369, 0.46 ) }
    // Section: dend_29, id: dend_29, parent: dend_28 (entry count 38/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 5.47191, 23.7937, -8.19146, 0.46 ) }
    dend_29 { pt3dadd( 5.21599, 25.2765, -8.81059, 0.46 ) }
    dend_29 { pt3dadd( 4.97704, 26.4033, -9.25338, 0.46 ) }
    dend_29 { pt3dadd( 4.54605, 27.8144, -9.78974, 0.68 ) }
    dend_29 { pt3dadd( 4.04903, 29.0604, -10.2487, 0.46 ) }
    dend_29 { pt3dadd( 3.14376, 30.7203, -10.8708, 0.46 ) }
    dend_29 { pt3dadd( 1.96376, 32.3797, -11.4885, 0.46 ) }
    dend_29 { pt3dadd( 0.940045, 33.397, -11.8615, 0.68 ) }
    dend_29 { pt3dadd( -0.805283, 34.6011, -12.3005, 0.46 ) }
    dend_29 { pt3dadd( -2.02322, 35.1955, -12.5002, 0.46 ) }
    dend_29 { pt3dadd( -4.34325, 35.9466, -12.7405, 0.46 ) }
    dend_29 { pt3dadd( -6.34419, 36.3752, -12.8597, 0.46 ) }
    dend_29 { pt3dadd( -8.62834, 36.6692, -12.9522, 0.46 ) }
    dend_29 { pt3dadd( -10.4645, 36.7726, -12.9779, 0.46 ) }
    dend_29 { pt3dadd( -11.4144, 36.7666, -12.9515, 0.46 ) }
    dend_29 { pt3dadd( -13.2357, 36.6674, -12.8705, 0.23 ) }
    dend_29 { pt3dadd( -15.506, 36.4727, -12.7373, 0.46 ) }
    dend_29 { pt3dadd( -17.5223, 36.2623, -12.5676, 0.23 ) }
    dend_29 { pt3dadd( -20.7737, 35.8748, -12.1635, 0.23 ) }
    dend_29 { pt3dadd( -23.2022, 35.6108, -11.7827, 0.23 ) }
    dend_29 { pt3dadd( -25.8599, 35.2946, -11.286, 0.23 ) }
    dend_29 { pt3dadd( -26.9937, 35.1358, -11.0375, 0.46 ) }
    dend_29 { pt3dadd( -29.4679, 34.7687, -10.4087, 0.23 ) }
    dend_29 { pt3dadd( -31.1675, 34.6016, -9.92215, 0.23 ) }
    dend_29 { pt3dadd( -32.2959, 34.5625, -9.57185, 0.46 ) }
    dend_29 { pt3dadd( -34.5696, 34.535, -8.82722, 0.23 ) }
    dend_29 { pt3dadd( -36.816, 34.5546, -8.02844, 0.46 ) }
    dend_29 { pt3dadd( -39.5458, 34.5954, -7.07031, 0.23 ) }
    dend_29 { pt3dadd( -42.1192, 34.6714, -6.24483, 0.23 ) }
    dend_29 { pt3dadd( -43.5582, 34.7773, -5.82033, 0.23 ) }
    // Section: dend_23, id: dend_23, parent: dend_9 (entry count 68/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( 3.27712, 12.1115, -12.0113, 0.91 ) }
    dend_23 { pt3dadd( 1.1762, 12.6828, -11.5772, 0.91 ) }
    dend_23 { pt3dadd( 0.204408, 12.9942, -11.3886, 0.91 ) }
    dend_23 { pt3dadd( -1.52592, 13.533, -11.1834, 0.68 ) }
    dend_23 { pt3dadd( -3.28583, 14.0811, -10.9746, 0.68 ) }
    dend_23 { pt3dadd( -5.05624, 14.6324, -10.7646, 0.68 ) }
    dend_23 { pt3dadd( -6.38929, 15.0475, -10.6064, 0.68 ) }
    dend_23 { pt3dadd( -8.12617, 15.5501, -10.4879, 0.68 ) }
    dend_23 { pt3dadd( -10.3629, 16.2153, -10.261, 0.68 ) }
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 77/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 3.27712, 12.1115, -12.0113, 2.96 ) }
    dend_10 { pt3dadd( 3.48708, 13.5515, -12.3113, 2.96 ) }
    // Section: dend_25, id: dend_25, parent: dend_23 (entry count 79/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( -10.3629, 16.2153, -10.261, 0.23 ) }
    dend_25 { pt3dadd( -11.5076, 15.2495, -10.0891, 0.23 ) }
    dend_25 { pt3dadd( -12.7563, 14.1715, -9.86726, 0.23 ) }
    dend_25 { pt3dadd( -14.0991, 12.9559, -9.61985, 0.46 ) }
    dend_25 { pt3dadd( -15.1658, 11.9654, -9.39467, 0.68 ) }
    dend_25 { pt3dadd( -15.8665, 11.312, -9.20951, 0.68 ) }
    dend_25 { pt3dadd( -17.4005, 9.90037, -8.76828, 0.46 ) }
    dend_25 { pt3dadd( -18.6126, 8.77559, -8.39256, 0.68 ) }
    dend_25 { pt3dadd( -19.4563, 8.00685, -8.10761, 0.68 ) }
    dend_25 { pt3dadd( -20.5172, 7.06575, -7.70278, 0.46 ) }
    dend_25 { pt3dadd( -21.6659, 6.11461, -7.22401, 0.68 ) }
    dend_25 { pt3dadd( -22.326, 5.60096, -6.92669, 0.68 ) }
    dend_25 { pt3dadd( -23.3432, 4.87734, -6.4423, 0.46 ) }
    dend_25 { pt3dadd( -24.4569, 4.08907, -5.89542, 0.46 ) }
    dend_25 { pt3dadd( -25.576, 3.32806, -5.30509, 0.68 ) }
    dend_25 { pt3dadd( -26.5455, 2.67909, -4.78851, 0.68 ) }
    dend_25 { pt3dadd( -27.3728, 2.15198, -4.35616, 0.68 ) }
    dend_25 { pt3dadd( -28.7675, 1.34132, -3.64189, 0.68 ) }
    dend_25 { pt3dadd( -30.168, 0.557534, -2.92674, 0.68 ) }
    dend_25 { pt3dadd( -31.3072, -0.0545506, -2.37596, 0.68 ) }
    dend_25 { pt3dadd( -33.3057, -1.09756, -1.43739, 0.46 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_25 { pt3dadd( -34.8798, -1.88296, -0.778846, 0.68 ) }
    dend_25 { pt3dadd( -36.9534, -2.84714, 0.00429284, 0.68 ) }
    dend_25 { pt3dadd( -38.0973, -3.35453, 0.405868, 0.46 ) }
    dend_25 { pt3dadd( -39.8721, -4.08471, 0.96117, 0.46 ) }
    dend_25 { pt3dadd( -41.3069, -4.64795, 1.3632, 0.46 ) }
    dend_25 { pt3dadd( -43.5832, -5.52397, 1.98491, 0.46 ) }
    dend_25 { pt3dadd( -45.4695, -6.25506, 2.4887, 0.23 ) }
    dend_25 { pt3dadd( -47.2161, -6.9129, 2.93637, 0.46 ) }
    dend_25 { pt3dadd( -49.0839, -7.54623, 3.37762, 0.46 ) }
    dend_25 { pt3dadd( -50.4588, -7.98859, 3.69458, 0.68 ) }
    // Section: dend_24, id: dend_24, parent: dend_23 (entry count 10/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( -10.3629, 16.2153, -10.261, 0.46 ) }
    dend_24 { pt3dadd( -11.4108, 16.9011, -11.089, 0.46 ) }
    dend_24 { pt3dadd( -12.4846, 17.5899, -11.8968, 0.46 ) }
    dend_24 { pt3dadd( -13.3875, 18.1857, -12.5742, 0.46 ) }
    dend_24 { pt3dadd( -14.5826, 18.9534, -13.484, 0.46 ) }
    dend_24 { pt3dadd( -15.3496, 19.3907, -14.0159, 0.46 ) }
    dend_24 { pt3dadd( -16.3212, 19.8846, -14.615, 0.46 ) }
    dend_24 { pt3dadd( -17.4971, 20.4044, -15.2539, 0.23 ) }
    dend_24 { pt3dadd( -18.7877, 20.9474, -15.914, 0.46 ) }
    dend_24 { pt3dadd( -20.0514, 21.5299, -16.5145, 0.46 ) }
    dend_24 { pt3dadd( -21.6025, 22.3539, -17.24, 0.46 ) }
    dend_24 { pt3dadd( -23.4666, 23.4522, -18.1215, 0.23 ) }
    dend_24 { pt3dadd( -24.8897, 24.3609, -18.7882, 0.23 ) }
    dend_24 { pt3dadd( -26.2613, 25.278, -19.4111, 0.23 ) }
    dend_24 { pt3dadd( -27.8229, 26.4477, -20.1447, 0.46 ) }
    dend_24 { pt3dadd( -29.8539, 28.1811, -21.2073, 0.23 ) }
    dend_24 { pt3dadd( -31.0263, 29.3822, -21.9223, 0.23 ) }
    dend_24 { pt3dadd( -31.7108, 30.193, -22.4086, 0.46 ) }
    dend_24 { pt3dadd( -32.0826, 30.6804, -22.7031, 0.46 ) }
    dend_24 { pt3dadd( -33.0542, 32.0843, -23.5978, 0.23 ) }
    dend_24 { pt3dadd( -33.6717, 33.0774, -24.2714, 0.46 ) }
    dend_24 { pt3dadd( -34.3156, 34.186, -25.0501, 0.46 ) }
    dend_24 { pt3dadd( -35.3062, 35.8656, -26.2817, 0.23 ) }
    dend_24 { pt3dadd( -35.8982, 36.8441, -27.049, 0.46 ) }
    dend_24 { pt3dadd( -36.7321, 38.1268, -28.1214, 0.46 ) }
    dend_24 { pt3dadd( -37.793, 39.5159, -29.3958, 0.23 ) }
    dend_24 { pt3dadd( -37.9086, 39.6492, -29.5245, 0.46 ) }
    dend_24 { pt3dadd( -39.1314, 40.8709, -30.8481, 0.23 ) }
    dend_24 { pt3dadd( -39.9817, 41.6316, -31.7759, 0.23 ) }
    dend_24 { pt3dadd( -41.0103, 42.4541, -32.9797, 0.23 ) }
    dend_24 { pt3dadd( -41.8922, 43.0629, -34.0514, 0.23 ) }
    dend_24 { pt3dadd( -42.5595, 43.5032, -34.9076, 0.68 ) }
    dend_24 { pt3dadd( -43.4925, 44.1252, -36.119, 0.23 ) }
    dend_24 { pt3dadd( -44.7685, 44.9915, -37.8284, 0.23 ) }
    dend_24 { pt3dadd( -45.6383, 45.5919, -39.0954, 0.46 ) }
    dend_24 { pt3dadd( -46.7012, 46.3139, -40.7807, 0.23 ) }
    dend_24 { pt3dadd( -47.4674, 46.7946, -42.0546, 0.23 ) }
    dend_24 { pt3dadd( -47.8824, 47.0158, -42.7451, 0.46 ) }
    dend_24 { pt3dadd( -48.0959, 47.1025, -43.0382, 0.46 ) }
    dend_24 { pt3dadd( -49.1723, 47.485, -44.0794, 0.46 ) }
    dend_24 { pt3dadd( -50.2554, 47.8864, -44.8897, 0.46 ) }
    dend_24 { pt3dadd( -51.2657, 48.3141, -45.5109, 0.23 ) }
    dend_24 { pt3dadd( -52.3106, 48.8105, -46.0313, 0.23 ) }
    dend_24 { pt3dadd( -53.4215, 49.4511, -46.4768, 0.68 ) }
    dend_24 { pt3dadd( -55.6477, 51.0392, -47.1395, 0.23 ) }
    dend_24 { pt3dadd( -56.202, 51.5064, -47.2399, 0.46 ) }
    dend_24 { pt3dadd( -57.368, 52.6086, -47.3689, 0.46 ) }
    dend_24 { pt3dadd( -58.5546, 53.8222, -47.4643, 0.23 ) }
    dend_24 { pt3dadd( -59.5936, 54.9314, -47.4954, 0.46 ) }
    dend_24 { pt3dadd( -60.7889, 56.3156, -47.4747, 0.23 ) }
    dend_24 { pt3dadd( -62.4595, 58.3784, -47.271, 0.23 ) }
    dend_24 { pt3dadd( -63.0388, 59.0776, -47.1974, 0.46 ) }
    // Section: dend_14, id: dend_14, parent: dend_10 (entry count 62/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 3.48708, 13.5515, -12.3113, 0.91 ) }
    dend_14 { pt3dadd( 4.88336, 14.6122, -12.3118, 0.91 ) }
    dend_14 { pt3dadd( 6.34407, 15.7305, -12.338, 0.91 ) }
    dend_14 { pt3dadd( 7.44711, 16.5751, -12.3577, 0.91 ) }
    dend_14 { pt3dadd( 8.79821, 17.6095, -12.3819, 0.91 ) }
    dend_14 { pt3dadd( 10.44, 18.8665, -12.4113, 0.91 ) }
    dend_14 { pt3dadd( 11.6009, 19.7553, -12.4321, 0.91 ) }
    dend_14 { pt3dadd( 12.5739, 20.5032, -12.5245, 0.91 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 70/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 3.48708, 13.5515, -12.3113, 2.28 ) }
    dend_11 { pt3dadd( 4.13704, 13.973, -13.1782, 2.28 ) }
    dend_11 { pt3dadd( 5.01687, 14.5379, -14.2409, 2.28 ) }
    dend_11 { pt3dadd( 5.89903, 15.1748, -15.2668, 1.14 ) }
    dend_11 { pt3dadd( 6.91672, 15.9554, -16.3796, 0.91 ) }
    dend_11 { pt3dadd( 8.01262, 16.8137, -17.4402, 0.91 ) }
    dend_11 { pt3dadd( 8.61195, 17.3325, -17.997, 0.91 ) }
    dend_11 { pt3dadd( 9.44841, 18.0848, -18.6475, 0.91 ) }
    dend_11 { pt3dadd( 10.0221, 18.6481, -19.0386, 0.91 ) }
    dend_11 { pt3dadd( 11.0087, 19.8514, -19.7581, 0.91 ) }
    dend_11 { pt3dadd( 11.5806, 20.7831, -20.2271, 0.91 ) }
    dend_11 { pt3dadd( 12.1061, 21.9126, -20.7528, 0.91 ) }
    dend_11 { pt3dadd( 12.2872, 22.39, -21.0187, 0.68 ) }
    dend_11 { pt3dadd( 12.6648, 23.4716, -21.7836, 0.68 ) }
    dend_11 { pt3dadd( 13.0517, 24.6838, -22.9193, 0.68 ) }
    dend_11 { pt3dadd( 13.3412, 25.7965, -24.0469, 0.68 ) }
    dend_11 { pt3dadd( 13.4883, 26.4061, -24.7076, 0.68 ) }
    dend_11 { pt3dadd( 13.7766, 27.5115, -26.0176, 0.68 ) }
    dend_11 { pt3dadd( 14.0637, 28.632, -27.4476, 0.68 ) }
    dend_11 { pt3dadd( 14.3471, 29.7655, -29.0167, 0.91 ) }
    dend_11 { pt3dadd( 14.6358, 30.6103, -30.2729, 0.91 ) }
    dend_11 { pt3dadd( 15.0939, 31.6169, -31.6805, 0.91 ) }
    // Section: dend_27, id: dend_27, parent: dend_25 (entry count 92/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( -50.4588, -7.98859, 3.69458, 0.23 ) }
    dend_27 { pt3dadd( -51.9421, -8.79495, 3.76181, 0.23 ) }
    dend_27 { pt3dadd( -54.091, -10.0532, 4.03006, 0.23 ) }
    dend_27 { pt3dadd( -55.7983, -11.0262, 4.33253, 0.23 ) }
    dend_27 { pt3dadd( -57.0567, -11.7117, 4.58016, 0.46 ) }
    dend_27 { pt3dadd( -59.2243, -12.8692, 5.02002, 0.23 ) }
    dend_27 { pt3dadd( -60.4707, -13.5247, 5.29366, 0.23 ) }
    dend_27 { pt3dadd( -62.0538, -14.3742, 5.72803, 0.23 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_27 { pt3dadd( -63.5466, -15.1956, 6.1872, 0.23 ) }
    dend_27 { pt3dadd( -64.6297, -15.7853, 6.52047, 0.46 ) }
    dend_27 { pt3dadd( -65.5798, -16.2819, 6.7954, 0.46 ) }
    dend_27 { pt3dadd( -66.8653, -16.9078, 7.10772, 0.23 ) }
    dend_27 { pt3dadd( -68.4972, -17.6927, 7.4296, 0.23 ) }
    dend_27 { pt3dadd( -69.7358, -18.333, 7.62631, 0.23 ) }
    dend_27 { pt3dadd( -71.1041, -19.1745, 7.8675, 0.46 ) }
    dend_27 { pt3dadd( -72.1837, -19.8815, 8.0889, 0.46 ) }
    dend_27 { pt3dadd( -73.6491, -20.8836, 8.42247, 0.46 ) }
    dend_27 { pt3dadd( -74.8516, -21.6865, 8.69514, 0.46 ) }
    dend_27 { pt3dadd( -76.5549, -22.781, 9.10225, 0.23 ) }
    dend_27 { pt3dadd( -78.2332, -23.8679, 9.49079, 0.23 ) }
    dend_27 { pt3dadd( -79.2816, -24.537, 9.72748, 0.23 ) }
    dend_27 { pt3dadd( -80.4157, -25.2795, 9.98845, 0.23 ) }
    dend_27 { pt3dadd( -81.7347, -26.1352, 10.3014, 0.46 ) }
    dend_27 { pt3dadd( -83.4266, -27.1182, 10.6733, 0.23 ) }
    dend_27 { pt3dadd( -85.0786, -27.8931, 10.9731, 0.23 ) }
    dend_27 { pt3dadd( -86.4443, -28.4436, 11.1081, 0.23 ) }
    // Section: dend_26, id: dend_26, parent: dend_25 (entry count 18/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( -50.4588, -7.98859, 3.69458, 0.23 ) }
    dend_26 { pt3dadd( -51.3976, -8.58894, 4.07405, 0.23 ) }
    dend_26 { pt3dadd( -52.8769, -9.34367, 4.53633, 0.23 ) }
    dend_26 { pt3dadd( -55.2322, -10.2403, 5.11504, 0.23 ) }
    dend_26 { pt3dadd( -56.4916, -10.619, 5.38133, 0.46 ) }
    dend_26 { pt3dadd( -59.2763, -11.2491, 5.88019, 0.23 ) }
    dend_26 { pt3dadd( -61.3809, -11.569, 6.21451, 0.23 ) }
    dend_26 { pt3dadd( -63.6548, -11.671, 6.48115, 0.23 ) }
    dend_26 { pt3dadd( -66.1491, -11.5694, 6.64836, 0.23 ) }
    dend_26 { pt3dadd( -67.0988, -11.4568, 6.68015, 0.23 ) }
    dend_26 { pt3dadd( -69.3535, -11.0389, 6.71979, 0.23 ) }
    dend_26 { pt3dadd( -71.1045, -10.5356, 6.73481, 0.46 ) }
    dend_26 { pt3dadd( -71.9595, -10.2301, 6.74702, 0.23 ) }
    dend_26 { pt3dadd( -72.9597, -9.83812, 6.76612, 0.46 ) }
    // Section: dend_20, id: dend_20, parent: dend_14 (entry count 32/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( 12.5739, 20.5032, -12.5245, 0.46 ) }
    dend_20 { pt3dadd( 13.1226, 21.8331, -12.9711, 0.46 ) }
    dend_20 { pt3dadd( 13.9267, 23.7425, -13.6282, 0.68 ) }
    dend_20 { pt3dadd( 14.3775, 24.8201, -14.0244, 0.68 ) }
    dend_20 { pt3dadd( 15.1624, 26.7325, -14.7549, 0.68 ) }
    dend_20 { pt3dadd( 15.8814, 28.4845, -15.4242, 0.46 ) }
    dend_20 { pt3dadd( 16.5768, 30.1788, -16.0714, 0.68 ) }
    dend_20 { pt3dadd( 17.4149, 32.1188, -16.7987, 0.46 ) }
    dend_20 { pt3dadd( 18.0574, 33.6106, -17.3621, 0.68 ) }
    dend_20 { pt3dadd( 18.7453, 35.2144, -17.9863, 0.68 ) }
    // Section: dend_15, id: dend_15, parent: dend_14 (entry count 42/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 12.5739, 20.5032, -12.5245, 0.68 ) }
    dend_15 { pt3dadd( 14.6922, 21.8558, -12.53, 0.68 ) }
    dend_15 { pt3dadd( 16.8877, 23.1863, -12.612, 0.68 ) }
    dend_15 { pt3dadd( 18.3045, 23.9745, -12.7115, 0.68 ) }
    dend_15 { pt3dadd( 19.8597, 24.8168, -12.849, 0.68 ) }
    dend_15 { pt3dadd( 21.822, 25.831, -13.0371, 0.68 ) }
    dend_15 { pt3dadd( 23.5771, 26.7381, -13.2053, 0.68 ) }
    dend_15 { pt3dadd( 25.4046, 27.636, -13.42, 0.68 ) }
    dend_15 { pt3dadd( 27.295, 28.477, -13.6908, 0.68 ) }
    dend_15 { pt3dadd( 28.1965, 28.863, -13.8369, 0.68 ) }
    dend_15 { pt3dadd( 29.5545, 29.4124, -14.0899, 0.68 ) }
    // Section: dend_13, id: dend_13, parent: dend_11 (entry count 53/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 15.0939, 31.6169, -31.6805, 0.46 ) }
    dend_13 { pt3dadd( 13.9783, 33.1184, -32.768, 0.46 ) }
    dend_13 { pt3dadd( 13.2689, 34.1455, -33.5707, 0.46 ) }
    dend_13 { pt3dadd( 12.6505, 35.066, -34.2882, 0.68 ) }
    dend_13 { pt3dadd( 11.6409, 36.6012, -35.5189, 0.46 ) }
    dend_13 { pt3dadd( 10.7376, 37.9621, -36.6499, 0.46 ) }
    dend_13 { pt3dadd( 9.95636, 39.1492, -37.6541, 0.68 ) }
    dend_13 { pt3dadd( 9.37257, 40.0913, -38.5082, 0.46 ) }
    dend_13 { pt3dadd( 8.53374, 41.5245, -39.8151, 0.46 ) }
    dend_13 { pt3dadd( 7.8604, 42.7897, -40.9045, 0.23 ) }
    dend_13 { pt3dadd( 7.24203, 44.0376, -41.915, 0.23 ) }
    dend_13 { pt3dadd( 6.75136, 45.0489, -42.6746, 0.46 ) }
    dend_13 { pt3dadd( 6.17342, 46.292, -43.5471, 0.68 ) }
    dend_13 { pt3dadd( 5.53246, 47.7145, -44.4661, 0.68 ) }
    dend_13 { pt3dadd( 4.91439, 49.0733, -45.2753, 0.46 ) }
    dend_13 { pt3dadd( 4.23088, 50.525, -46.046, 0.46 ) }
    dend_13 { pt3dadd( 3.53672, 51.9615, -46.7323, 0.68 ) }
    dend_13 { pt3dadd( 2.59504, 53.8014, -47.5757, 0.46 ) }
    dend_13 { pt3dadd( 1.53539, 55.7351, -48.4536, 0.23 ) }
    dend_13 { pt3dadd( 0.901365, 56.8772, -48.9344, 0.23 ) }
    dend_13 { pt3dadd( 0.46366, 57.5974, -49.2387, 0.46 ) }
    dend_13 { pt3dadd( -0.538371, 59.1112, -49.8535, 0.46 ) }
    dend_13 { pt3dadd( -1.42714, 60.3542, -50.375, 0.46 ) }
    dend_13 { pt3dadd( -2.15401, 61.3268, -50.7775, 0.46 ) }
    dend_13 { pt3dadd( -3.25461, 62.6886, -51.3316, 0.23 ) }
    dend_13 { pt3dadd( -4.65638, 64.2373, -51.9744, 0.23 ) }
    dend_13 { pt3dadd( -5.74763, 65.2963, -52.4255, 0.23 ) }
    dend_13 { pt3dadd( -7.16361, 66.4831, -52.9144, 0.46 ) }
    dend_13 { pt3dadd( -8.30295, 67.3471, -53.2663, 0.46 ) }
    dend_13 { pt3dadd( -9.94236, 68.5124, -53.7414, 0.23 ) }
    dend_13 { pt3dadd( -11.8487, 69.7747, -54.296, 0.23 ) }
    dend_13 { pt3dadd( -12.4837, 70.1863, -54.4702, 0.23 ) }
    dend_13 { pt3dadd( -13.8067, 71.0557, -54.831, 0.46 ) }
    dend_13 { pt3dadd( -15.0239, 71.8741, -55.1836, 0.23 ) }
    dend_13 { pt3dadd( -16.3107, 72.7839, -55.5955, 0.23 ) }
    dend_13 { pt3dadd( -18.0217, 74.0925, -56.1979, 0.68 ) }
    dend_13 { pt3dadd( -18.9019, 74.7967, -56.517, 0.46 ) }
    dend_13 { pt3dadd( -20.3532, 75.9702, -57.0975, 0.23 ) }
    dend_13 { pt3dadd( -21.5729, 76.9471, -57.6625, 0.46 ) }
    dend_13 { pt3dadd( -22.4846, 77.6645, -58.1698, 0.23 ) }
    dend_13 { pt3dadd( -23.4541, 78.4566, -58.8849, 0.46 ) }
    dend_13 { pt3dadd( -24.1566, 79.104, -59.5784, 0.46 ) }
    dend_13 { pt3dadd( -25.2393, 80.2023, -60.9108, 0.46 ) }
    dend_13 { pt3dadd( -26.0211, 81.0324, -61.9982, 0.46 ) }
    dend_13 { pt3dadd( -27.0329, 82.1531, -63.4919, 0.23 ) }
    dend_13 { pt3dadd( -27.8909, 83.1263, -64.749, 0.23 ) }
    dend_13 { pt3dadd( -28.7584, 84.0917, -65.8796, 0.46 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_13 { pt3dadd( -29.7483, 85.1142, -67.0006, 0.46 ) }
    dend_13 { pt3dadd( -30.4383, 85.7175, -67.6513, 0.46 ) }
    dend_13 { pt3dadd( -31.8438, 86.7322, -68.8498, 0.23 ) }
    dend_13 { pt3dadd( -32.9047, 87.345, -69.6931, 0.46 ) }
    dend_13 { pt3dadd( -34.7028, 88.1937, -71.107, 0.23 ) }
    dend_13 { pt3dadd( -35.6953, 88.5632, -71.9215, 0.46 ) }
    dend_13 { pt3dadd( -37.4285, 89.1427, -73.411, 0.46 ) }
    dend_13 { pt3dadd( -39.1802, 89.6648, -75.0301, 0.23 ) }
    dend_13 { pt3dadd( -40.8682, 90.069, -76.7217, 0.23 ) }
    dend_13 { pt3dadd( -41.8377, 90.2451, -77.7849, 0.23 ) }
    dend_13 { pt3dadd( -43.5715, 90.4583, -79.8613, 0.23 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 11/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 15.0939, 31.6169, -31.6805, 0.68 ) }
    dend_12 { pt3dadd( 15.6647, 32.772, -32.6552, 0.68 ) }
    dend_12 { pt3dadd( 16.4615, 34.2328, -34.0547, 0.68 ) }
    dend_12 { pt3dadd( 17.089, 35.2749, -35.2083, 0.68 ) }
    dend_12 { pt3dadd( 17.3327, 35.6515, -35.6253, 0.68 ) }
    dend_12 { pt3dadd( 18.1215, 36.8141, -36.9475, 0.68 ) }
    dend_12 { pt3dadd( 18.8919, 38.0228, -38.3361, 0.68 ) }
    dend_12 { pt3dadd( 19.6167, 39.4423, -40.0091, 0.46 ) }
    dend_12 { pt3dadd( 20.013, 40.3563, -41.1319, 0.46 ) }
    dend_12 { pt3dadd( 20.2823, 41.0211, -41.932, 0.68 ) }
    dend_12 { pt3dadd( 20.6176, 41.8359, -42.8354, 0.91 ) }
    dend_12 { pt3dadd( 21.291, 43.3607, -44.3532, 0.68 ) }
    dend_12 { pt3dadd( 21.8488, 44.616, -45.5301, 0.68 ) }
    dend_12 { pt3dadd( 22.4469, 45.8631, -46.7033, 0.68 ) }
    dend_12 { pt3dadd( 23.2135, 47.2366, -47.9972, 0.46 ) }
    dend_12 { pt3dadd( 23.9542, 48.3538, -49.1053, 0.46 ) }
    dend_12 { pt3dadd( 24.9862, 49.5765, -50.3223, 0.46 ) }
    dend_12 { pt3dadd( 25.8952, 50.4139, -51.186, 0.46 ) }
    dend_12 { pt3dadd( 27.0134, 51.2751, -52.1279, 0.46 ) }
    dend_12 { pt3dadd( 28.281, 52.146, -53.1164, 0.46 ) }
    dend_12 { pt3dadd( 29.4603, 52.9215, -54.0653, 0.68 ) }
    dend_12 { pt3dadd( 30.9951, 53.9324, -55.406, 0.46 ) }
    dend_12 { pt3dadd( 32.182, 54.7831, -56.5336, 0.23 ) }
    dend_12 { pt3dadd( 33.1834, 55.6008, -57.5443, 0.23 ) }
    dend_12 { pt3dadd( 33.5921, 55.9802, -57.9938, 0.68 ) }
    dend_12 { pt3dadd( 34.7955, 57.1555, -59.3797, 0.46 ) }
    dend_12 { pt3dadd( 35.7416, 58.1839, -60.5789, 0.46 ) }
    dend_12 { pt3dadd( 36.3596, 58.9479, -61.4901, 0.68 ) }
    dend_12 { pt3dadd( 36.8787, 59.5947, -62.2893, 0.46 ) }
    dend_12 { pt3dadd( 37.8206, 60.743, -63.7431, 0.46 ) }
    dend_12 { pt3dadd( 38.5216, 61.6281, -64.8909, 0.46 ) }
    dend_12 { pt3dadd( 39.3325, 62.6379, -66.254, 0.46 ) }
    dend_12 { pt3dadd( 40.141, 63.6559, -67.6797, 0.46 ) }
    dend_12 { pt3dadd( 40.8245, 64.5052, -68.947, 0.23 ) }
    dend_12 { pt3dadd( 41.1782, 64.9393, -69.6495, 0.23 ) }
    dend_12 { pt3dadd( 41.9577, 65.928, -71.3304, 0.23 ) }
    dend_12 { pt3dadd( 42.4551, 66.5446, -72.4554, 0.46 ) }
    dend_12 { pt3dadd( 42.939, 67.1424, -73.554, 0.23 ) }
    dend_12 { pt3dadd( 43.4649, 67.8331, -74.7218, 0.68 ) }
    dend_12 { pt3dadd( 44.1013, 68.725, -76.174, 0.23 ) }
    dend_12 { pt3dadd( 44.5181, 69.3008, -77.1289, 0.68 ) }
    dend_12 { pt3dadd( 45.3892, 70.421, -79.062, 0.23 ) }
    dend_12 { pt3dadd( 46.1994, 71.4043, -80.8165, 0.23 ) }
    dend_12 { pt3dadd( 46.7394, 72.0448, -81.9792, 0.46 ) }
    dend_12 { pt3dadd( 47.4728, 72.874, -83.5567, 0.23 ) }
    dend_12 { pt3dadd( 48.3878, 73.8253, -85.3959, 0.23 ) }
    dend_12 { pt3dadd( 49.1229, 74.4499, -86.7129, 0.23 ) }
    dend_12 { pt3dadd( 49.9081, 74.911, -87.9185, 0.68 ) }
    dend_12 { pt3dadd( 50.8499, 75.2307, -89.1708, 0.46 ) }
    dend_12 { pt3dadd( 51.8158, 75.454, -90.3119, 0.23 ) }
    dend_12 { pt3dadd( 52.8577, 75.6747, -91.5534, 0.46 ) }
    dend_12 { pt3dadd( 53.6857, 75.8737, -92.6417, 0.68 ) }
    dend_12 { pt3dadd( 54.8076, 76.2206, -94.3291, 0.23 ) }
    dend_12 { pt3dadd( 55.8516, 76.6586, -96.0133, 0.23 ) }
    dend_12 { pt3dadd( 56.9346, 77.2372, -97.8415, 0.68 ) }
    dend_12 { pt3dadd( 57.9952, 78.0647, -99.9508, 0.46 ) }
    dend_12 { pt3dadd( 58.5821, 78.6981, -101.434, 0.46 ) }
    dend_12 { pt3dadd( 58.9396, 79.2564, -102.595, 0.46 ) }
    dend_12 { pt3dadd( 59.3286, 79.985, -104.189, 0.46 ) }
    dend_12 { pt3dadd( 59.6697, 80.6965, -106.012, 0.46 ) }
    dend_12 { pt3dadd( 59.929, 81.4825, -108.263, 0.46 ) }
    dend_12 { pt3dadd( 60.1302, 82.0661, -110.059, 0.23 ) }
    dend_12 { pt3dadd( 60.3165, 82.587, -111.747, 0.68 ) }
    dend_12 { pt3dadd( 60.6346, 83.4273, -114.553, 0.46 ) }
    dend_12 { pt3dadd( 60.9514, 84.0514, -116.876, 0.46 ) }
    dend_12 { pt3dadd( 61.4404, 84.625, -119.381, 0.46 ) }
    dend_12 { pt3dadd( 61.7737, 84.8497, -120.552, 0.46 ) }
    dend_12 { pt3dadd( 62.4824, 85.1185, -122.292, 0.23 ) }
    dend_12 { pt3dadd( 63.3569, 85.3284, -123.949, 0.23 ) }
    dend_12 { pt3dadd( 64.6357, 85.5946, -125.949, 0.23 ) }
    dend_12 { pt3dadd( 65.9608, 85.8063, -127.764, 0.23 ) }
    dend_12 { pt3dadd( 67.3548, 85.9446, -129.563, 0.23 ) }
    dend_12 { pt3dadd( 69.1161, 86.0521, -132.018, 0.23 ) }
    dend_12 { pt3dadd( 70.0969, 86.0738, -133.393, 0.23 ) }
    dend_12 { pt3dadd( 71.7323, 86.0769, -135.592, 0.23 ) }
    dend_12 { pt3dadd( 73.0033, 86.1043, -137.228, 0.23 ) }
    dend_12 { pt3dadd( 75.0837, 86.2293, -139.872, 0.23 ) }
    dend_12 { pt3dadd( 77.4752, 86.4571, -143.128, 0.23 ) }
    // Section: dend_22, id: dend_22, parent: dend_20 (entry count 89/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( 18.7453, 35.2144, -17.9863, 0.46 ) }
    dend_22 { pt3dadd( 18.6162, 36.1054, -18.5802, 0.46 ) }
    dend_22 { pt3dadd( 18.4041, 37.8304, -19.6481, 0.46 ) }
    dend_22 { pt3dadd( 18.2284, 39.2451, -20.5147, 0.46 ) }
    dend_22 { pt3dadd( 18.1208, 40.4055, -21.2309, 0.46 ) }
    dend_22 { pt3dadd( 18.0192, 42.0959, -22.2701, 0.23 ) }
    dend_22 { pt3dadd( 17.989, 42.9437, -22.8338, 0.68 ) }
    dend_22 { pt3dadd( 17.9658, 43.7506, -23.3869, 0.68 ) }
    dend_22 { pt3dadd( 17.9478, 45.5242, -24.6824, 0.46 ) }
    dend_22 { pt3dadd( 17.9299, 47.1692, -25.9575, 0.46 ) }
    dend_22 { pt3dadd( 17.8895, 48.6875, -27.2203, 0.46 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_22 { pt3dadd( 17.7638, 50.6375, -28.9311, 0.68 ) }
    dend_22 { pt3dadd( 17.6508, 52.1055, -30.2913, 0.46 ) }
    dend_22 { pt3dadd( 17.5285, 53.8355, -31.9744, 0.46 ) }
    dend_22 { pt3dadd( 17.4281, 55.3647, -33.48, 0.46 ) }
    dend_22 { pt3dadd( 17.2967, 56.8524, -34.934, 0.23 ) }
    dend_22 { pt3dadd( 17.196, 58.1052, -36.1155, 0.46 ) }
    dend_22 { pt3dadd( 17.1509, 59.6214, -37.4515, 0.46 ) }
    dend_22 { pt3dadd( 17.1945, 60.7904, -38.4605, 0.23 ) }
    dend_22 { pt3dadd( 17.2469, 61.8165, -39.2669, 0.46 ) }
    dend_22 { pt3dadd( 17.2788, 62.5402, -39.771, 0.46 ) }
    dend_22 { pt3dadd( 17.3319, 63.2882, -40.2578, 0.23 ) }
    dend_22 { pt3dadd( 17.4368, 64.4338, -40.9391, 0.46 ) }
    dend_22 { pt3dadd( 17.4915, 65.8745, -41.6771, 0.46 ) }
    dend_22 { pt3dadd( 17.4892, 66.9531, -42.2025, 0.46 ) }
    dend_22 { pt3dadd( 17.4189, 69.1875, -43.3304, 0.46 ) }
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 15/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 18.7453, 35.2144, -17.9863, 0.46 ) }
    dend_21 { pt3dadd( 19.9626, 36.303, -18.9717, 0.46 ) }
    dend_21 { pt3dadd( 21.1345, 37.3536, -19.9122, 0.46 ) }
    dend_21 { pt3dadd( 22.2281, 38.3838, -20.8372, 0.46 ) }
    dend_21 { pt3dadd( 23.591, 39.6371, -21.987, 0.68 ) }
    dend_21 { pt3dadd( 24.7561, 40.6694, -22.9853, 0.68 ) }
    dend_21 { pt3dadd( 26.0645, 41.7447, -24.0501, 0.46 ) }
    dend_21 { pt3dadd( 27.4692, 42.8453, -25.1742, 0.68 ) }
    dend_21 { pt3dadd( 28.805, 43.8077, -26.2006, 0.68 ) }
    dend_21 { pt3dadd( 30.6014, 44.9049, -27.411, 0.68 ) }
    dend_21 { pt3dadd( 31.563, 45.4212, -28.0133, 0.68 ) }
    dend_21 { pt3dadd( 33.1363, 46.181, -29.0116, 0.46 ) }
    dend_21 { pt3dadd( 34.6129, 46.7493, -29.971, 0.46 ) }
    dend_21 { pt3dadd( 35.8293, 47.097, -30.7373, 0.68 ) }
    dend_21 { pt3dadd( 38.0048, 47.5867, -32.0389, 0.46 ) }
    dend_21 { pt3dadd( 39.7062, 47.8834, -32.9914, 0.46 ) }
    dend_21 { pt3dadd( 41.4687, 48.0911, -33.8469, 0.46 ) }
    dend_21 { pt3dadd( 43.2462, 48.144, -34.5562, 0.46 ) }
    dend_21 { pt3dadd( 44.5864, 48.0295, -34.8874, 0.46 ) }
    dend_21 { pt3dadd( 45.8195, 47.8302, -34.974, 0.23 ) }
    dend_21 { pt3dadd( 47.2669, 47.5515, -34.8412, 0.46 ) }
    dend_21 { pt3dadd( 49.2492, 47.1801, -34.4793, 0.23 ) }
    dend_21 { pt3dadd( 50.7797, 46.9367, -34.1527, 0.23 ) }
    dend_21 { pt3dadd( 52.1061, 46.7415, -33.9238, 0.46 ) }
    dend_21 { pt3dadd( 54.5117, 46.4144, -33.7235, 0.23 ) }
    dend_21 { pt3dadd( 56.7201, 46.1479, -33.7574, 0.23 ) }
    dend_21 { pt3dadd( 57.9865, 46.0566, -33.9007, 0.46 ) }
    dend_21 { pt3dadd( 60.4953, 45.9295, -34.4725, 0.23 ) }
    dend_21 { pt3dadd( 62.2158, 45.7985, -35.0089, 0.23 ) }
    dend_21 { pt3dadd( 63.6222, 45.608, -35.5206, 0.46 ) }
    dend_21 { pt3dadd( 64.6201, 45.3637, -35.9353, 0.23 ) }
    dend_21 { pt3dadd( 65.7075, 44.931, -36.4062, 0.68 ) }
    dend_21 { pt3dadd( 67.3444, 44.0289, -37.1034, 0.68 ) }
    dend_21 { pt3dadd( 68.6373, 43.1982, -37.6457, 0.68 ) }
    dend_21 { pt3dadd( 70.4212, 41.943, -38.2675, 0.23 ) }
    dend_21 { pt3dadd( 71.5047, 41.0511, -38.6057, 0.23 ) }
    dend_21 { pt3dadd( 73.0482, 39.6099, -39.0382, 0.23 ) }
    dend_21 { pt3dadd( 73.7092, 38.9093, -39.2026, 0.68 ) }
    // Section: dend_17, id: dend_17, parent: dend_15 (entry count 53/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 29.5545, 29.4124, -14.0899, 0.46 ) }
    dend_17 { pt3dadd( 31.4529, 29.8464, -14.1898, 0.46 ) }
    dend_17 { pt3dadd( 33.0497, 30.1654, -14.2858, 0.46 ) }
    dend_17 { pt3dadd( 34.9705, 30.5768, -14.402, 0.46 ) }
    dend_17 { pt3dadd( 36.8842, 30.9928, -14.5465, 0.46 ) }
    dend_17 { pt3dadd( 38.6477, 31.3762, -14.6797, 0.68 ) }
    dend_17 { pt3dadd( 39.3111, 31.5204, -14.7299, 0.68 ) }
    dend_17 { pt3dadd( 40.6706, 31.8125, -14.8545, 0.68 ) }
    dend_17 { pt3dadd( 42.4534, 32.2292, -15.0542, 0.46 ) }
    dend_17 { pt3dadd( 44.4675, 32.6626, -15.3381, 0.46 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 63/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 29.5545, 29.4124, -14.0899, 0.68 ) }
    dend_16 { pt3dadd( 30.4287, 30.6362, -14.1519, 0.68 ) }
    dend_16 { pt3dadd( 31.1327, 31.6519, -14.2327, 0.68 ) }
    dend_16 { pt3dadd( 32.3229, 33.3369, -14.3755, 0.46 ) }
    dend_16 { pt3dadd( 33.2212, 34.505, -14.5043, 0.46 ) }
    dend_16 { pt3dadd( 34.3404, 35.866, -14.7048, 0.68 ) }
    dend_16 { pt3dadd( 36.1136, 37.8756, -15.0454, 0.46 ) }
    dend_16 { pt3dadd( 37.3593, 39.1785, -15.3292, 0.46 ) }
    dend_16 { pt3dadd( 39.2257, 40.8863, -15.7701, 0.46 ) }
    dend_16 { pt3dadd( 40.7271, 42.0194, -16.1537, 0.46 ) }
    dend_16 { pt3dadd( 42.1498, 42.8551, -16.5106, 0.46 ) }
    dend_16 { pt3dadd( 43.2897, 43.3437, -16.7818, 0.68 ) }
    dend_16 { pt3dadd( 44.3233, 43.6666, -17.0054, 0.68 ) }
    dend_16 { pt3dadd( 46.9677, 44.2885, -17.52, 0.46 ) }
    dend_16 { pt3dadd( 48.9601, 44.6635, -17.8946, 0.46 ) }
    dend_16 { pt3dadd( 51.0563, 45.0254, -18.2693, 0.46 ) }
    dend_16 { pt3dadd( 53.1333, 45.3436, -18.6226, 0.23 ) }
    dend_16 { pt3dadd( 54.3541, 45.5279, -18.8317, 0.23 ) }
    dend_16 { pt3dadd( 55.5028, 45.6912, -19.0336, 0.46 ) }
    dend_16 { pt3dadd( 57.5453, 45.9517, -19.4721, 0.23 ) }
    dend_16 { pt3dadd( 59.0897, 46.1445, -19.8238, 0.46 ) }
    dend_16 { pt3dadd( 60.0095, 46.2354, -20.0445, 0.23 ) }
    dend_16 { pt3dadd( 60.88, 46.3094, -20.2478, 0.23 ) }
    dend_16 { pt3dadd( 62.1563, 46.4035, -20.5128, 0.46 ) }
    dend_16 { pt3dadd( 64.0828, 46.5195, -20.8395, 0.46 ) }
    dend_16 { pt3dadd( 66.0408, 46.5322, -21.0267, 0.46 ) }
    dend_16 { pt3dadd( 67.9749, 46.4423, -21.1022, 0.23 ) }
    dend_16 { pt3dadd( 68.7469, 46.3773, -21.0931, 0.23 ) }
    dend_16 { pt3dadd( 70.1657, 46.2501, -21.012, 0.23 ) }
    dend_16 { pt3dadd( 71.5123, 46.1462, -20.8778, 0.46 ) }
    dend_16 { pt3dadd( 73.5885, 46.0289, -20.6221, 0.23 ) }
    dend_16 { pt3dadd( 75.196, 45.9488, -20.4461, 0.46 ) }
    dend_16 { pt3dadd( 77.1405, 45.9473, -20.3367, 0.23 ) }
    dend_16 { pt3dadd( 78.6058, 46.0224, -20.3241, 0.46 ) }
    dend_16 { pt3dadd( 81.2439, 46.2773, -20.4002, 0.23 ) }
    dend_16 { pt3dadd( 83.4423, 46.5901, -20.537, 0.23 ) }
    dend_16 { pt3dadd( 85.8309, 47.031, -20.721, 0.46 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_16 { pt3dadd( 88.4887, 47.6088, -20.863, 0.23 ) }
    dend_16 { pt3dadd( 90.271, 47.9892, -20.9145, 0.23 ) }
    dend_16 { pt3dadd( 91.7321, 48.28, -20.8892, 0.46 ) }
    dend_16 { pt3dadd( 93.8115, 48.7122, -20.7217, 0.46 ) }
    dend_16 { pt3dadd( 95.5702, 49.0682, -20.4359, 0.23 ) }
    dend_16 { pt3dadd( 97.7713, 49.466, -19.8111, 0.23 ) }
    dend_16 { pt3dadd( 99.4875, 49.7335, -19.1865, 0.23 ) }
    dend_16 { pt3dadd( 101.002, 49.9555, -18.5528, 0.23 ) }
    dend_16 { pt3dadd( 103.161, 50.283, -17.5457, 0.23 ) }
    dend_16 { pt3dadd( 104.388, 50.4756, -16.9133, 0.23 ) }
    dend_16 { pt3dadd( 106.352, 50.7393, -15.8881, 0.23 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 11/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( 44.4675, 32.6626, -15.3381, 0.46 ) }
    dend_19 { pt3dadd( 46.4763, 32.7432, -15.2886, 0.46 ) }
    dend_19 { pt3dadd( 48.5358, 32.8756, -15.2195, 0.46 ) }
    dend_19 { pt3dadd( 50.0186, 32.9926, -15.1942, 0.46 ) }
    dend_19 { pt3dadd( 51.3824, 33.1193, -15.1835, 0.46 ) }
    dend_19 { pt3dadd( 53.5264, 33.3479, -15.2296, 0.23 ) }
    dend_19 { pt3dadd( 55.1765, 33.5517, -15.306, 0.46 ) }
    dend_19 { pt3dadd( 56.4355, 33.7372, -15.4165, 0.46 ) }
    dend_19 { pt3dadd( 57.9605, 33.9949, -15.6026, 0.23 ) }
    dend_19 { pt3dadd( 59.0093, 34.1753, -15.768, 0.23 ) }
    dend_19 { pt3dadd( 60.9405, 34.5284, -16.1228, 0.46 ) }
    dend_19 { pt3dadd( 62.3541, 34.7707, -16.4348, 0.23 ) }
    dend_19 { pt3dadd( 64.0613, 35.0501, -16.8764, 0.23 ) }
    dend_19 { pt3dadd( 65.1776, 35.2296, -17.1813, 0.46 ) }
    dend_19 { pt3dadd( 66.6549, 35.459, -17.5811, 0.46 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 26/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 44.4675, 32.6626, -15.3381, 0.23 ) }
    dend_18 { pt3dadd( 45.4612, 33.7657, -16.2918, 0.23 ) }
    dend_18 { pt3dadd( 46.6808, 34.9599, -17.4387, 0.46 ) }
    dend_18 { pt3dadd( 47.7736, 35.9476, -18.4237, 0.23 ) }
    dend_18 { pt3dadd( 49.1816, 37.1957, -19.6038, 0.23 ) }
    dend_18 { pt3dadd( 50.4703, 38.313, -20.6485, 0.23 ) }
    dend_18 { pt3dadd( 51.9827, 39.5983, -21.8095, 0.23 ) }
    dend_18 { pt3dadd( 53.2003, 40.5386, -22.6939, 0.23 ) }
    dend_18 { pt3dadd( 54.3069, 41.3271, -23.4888, 0.23 ) }
    dend_18 { pt3dadd( 56.4465, 42.6614, -24.9514, 0.23 ) }
    dend_18 { pt3dadd( 57.0231, 42.9554, -25.3142, 0.23 ) }
    dend_18 { pt3dadd( 58.2147, 43.465, -25.9977, 0.46 ) }
    dend_18 { pt3dadd( 60.47, 44.2675, -27.2343, 0.23 ) }
    dend_18 { pt3dadd( 62.289, 44.8307, -28.2061, 0.23 ) }
    dend_18 { pt3dadd( 63.5469, 45.1383, -28.8707, 0.23 ) }
    dend_18 { pt3dadd( 65.7704, 45.5271, -30.0345, 0.23 ) }
    dend_18 { pt3dadd( 66.5722, 45.6216, -30.4371, 0.46 ) }
    dend_18 { pt3dadd( 68.6779, 45.6374, -31.4018, 0.23 ) }
    dend_18 { pt3dadd( 70.24, 45.4291, -31.9867, 0.23 ) }
    dend_18 { pt3dadd( 70.8773, 45.2528, -32.1915, 0.23 ) }
    dend_18 { pt3dadd( 71.595, 44.9743, -32.4434, 0.23 ) }
    dend_18 { pt3dadd( 72.96, 44.3263, -33.0126, 0.46 ) }
    dend_18 { pt3dadd( 74.9829, 43.2791, -33.8824, 0.23 ) }
    dend_18 { pt3dadd( 76.3297, 42.6315, -34.4992, 0.23 ) }
    dend_18 { pt3dadd( 77.1394, 42.3432, -34.9327, 0.46 ) }
    dend_18 { pt3dadd( 79.355, 41.9134, -36.2633, 0.23 ) }
    dend_18 { pt3dadd( 80.5253, 41.8577, -37.0198, 0.23 ) }
    dend_18 { pt3dadd( 81.8378, 41.976, -37.9467, 0.46 ) }
    dend_18 { pt3dadd( 83.6201, 42.2731, -39.3802, 0.23 ) }
    dend_18 { pt3dadd( 85.1381, 42.5229, -40.6028, 0.23 ) }
    dend_18 { pt3dadd( 85.912, 42.6182, -41.1882, 0.23 ) }
    dend_18 { pt3dadd( 86.4818, 42.6547, -41.5949, 0.46 ) }
    dend_18 { pt3dadd( 87.0327, 42.6814, -42.0088, 0.46 ) }
    dend_18 { pt3dadd( 88.3777, 42.8645, -43.2016, 0.23 ) }
    dend_18 { pt3dadd( 89.4885, 43.1382, -44.2803, 0.46 ) }
    dend_18 { pt3dadd( 90.3429, 43.5583, -45.0936, 0.23 ) }
    dend_18 { pt3dadd( 91.9996, 44.6885, -46.5695, 0.23 ) }
    dend_18 { pt3dadd( 93.109, 45.5563, -47.4748, 0.46 ) }
    dend_18 { pt3dadd( 94.6665, 46.9506, -48.6248, 0.23 ) }
    dend_18 { pt3dadd( 95.551, 47.8173, -49.2146, 0.23 ) }
    dend_18 { pt3dadd( 97.2225, 49.5783, -50.3558, 0.23 ) }
    dend_18 { pt3dadd( 98.4054, 50.8407, -51.1058, 0.23 ) }
    dend_18 { pt3dadd( 98.8875, 51.3431, -51.3392, 0.91 ) }
    dend_18 { pt3dadd( 100.621, 53.0511, -51.9837, 0.23 ) }
    dend_18 { pt3dadd( 101.153, 53.545, -52.1232, 0.46 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_8, dend_7, dend_4, dend_3, dend_0, dend_28, dend_9, dend_6, dend_5, dend_2, dend_1, dend_30, dend_29, dend_23, dend_10, dend_25, dend_24, dend_14, dend_11, dend_27, dend_26, dend_20, dend_15, dend_13, dend_12, dend_22, dend_21, dend_17, dend_16, dend_19, dend_18]}
    ModelViewParmSubset_2 = new SectionList()
    dend_8 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_30 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_8, dend_7, dend_4, dend_3, dend_0, dend_28, dend_9, dend_6, dend_5, dend_2, dend_1, dend_30, dend_29, dend_23, dend_10, dend_25, dend_24, dend_14, dend_11, dend_27, dend_26, dend_20, dend_15, dend_13, dend_12, dend_22, dend_21, dend_17, dend_16, dend_19, dend_18]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_28 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_30 ModelViewParmSubset_4.append()
    dend_29 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_25 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_27 ModelViewParmSubset_4.append()
    dend_26 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()

    // Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_8, dend_7, dend_4, dend_3, dend_0, axon_0, dend_28, dend_9, dend_6, dend_5, dend_2, dend_1, axon_1, dend_30, dend_29, dend_23, dend_10, dend_25, dend_24, dend_14, dend_11, dend_27, dend_26, dend_20, dend_15, dend_13, dend_12, dend_22, dend_21, dend_17, dend_16, dend_19, dend_18]}
    ModelViewParmSubset_5 = new SectionList()
    dend_8 ModelViewParmSubset_5.append()
    dend_7 ModelViewParmSubset_5.append()
    dend_4 ModelViewParmSubset_5.append()
    dend_3 ModelViewParmSubset_5.append()
    dend_0 ModelViewParmSubset_5.append()
    axon_0 ModelViewParmSubset_5.append()
    dend_28 ModelViewParmSubset_5.append()
    dend_9 ModelViewParmSubset_5.append()
    dend_6 ModelViewParmSubset_5.append()
    dend_5 ModelViewParmSubset_5.append()
    dend_2 ModelViewParmSubset_5.append()
    dend_1 ModelViewParmSubset_5.append()
    axon_1 ModelViewParmSubset_5.append()
    dend_30 ModelViewParmSubset_5.append()
    dend_29 ModelViewParmSubset_5.append()
    dend_23 ModelViewParmSubset_5.append()
    dend_10 ModelViewParmSubset_5.append()
    dend_25 ModelViewParmSubset_5.append()
    dend_24 ModelViewParmSubset_5.append()
    dend_14 ModelViewParmSubset_5.append()
    dend_11 ModelViewParmSubset_5.append()
    dend_27 ModelViewParmSubset_5.append()
    dend_26 ModelViewParmSubset_5.append()
    dend_20 ModelViewParmSubset_5.append()
    dend_15 ModelViewParmSubset_5.append()
    dend_13 ModelViewParmSubset_5.append()
    dend_12 ModelViewParmSubset_5.append()
    dend_22 ModelViewParmSubset_5.append()
    dend_21 ModelViewParmSubset_5.append()
    dend_17 ModelViewParmSubset_5.append()
    dend_16 ModelViewParmSubset_5.append()
    dend_19 ModelViewParmSubset_5.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_18 ModelViewParmSubset_5.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_7 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_3 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_5 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_1 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_30]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_30 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_29 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_25 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_24 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_27 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_13 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_12 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_22 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_21 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_16 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_34, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_34 = new SectionList()
    dend_18 OneSecGrp_SectionRef_34.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_8 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_9 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_4 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_10 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_6 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_28 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_0 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_14 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_23 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_20 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_11 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_15 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_2 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_17 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_19 OneSecGrp_SectionRef_33.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_26 OneSecGrp_SectionRef_24.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29, dend_30], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()
    dend_30 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_28, dend_9, dend_9, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_30, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_29, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_10, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_27, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_28 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_30 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_10 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 3.25478E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 3.25478E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.993125  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.0  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.005611  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.068459995  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.517764  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 6.3E-5  // units: S cm-2
        e_pas_nml2 = -64.6017  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 3.45E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.077616  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 7.43567E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.002099  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 1.13999995E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.26087198  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-5  // units: S cm-2
        e_pas_nml2 = -69.78141  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 3.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.395881  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009986  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 5.0100003E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009728  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 2.7999999E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cIR_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cIR_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cIR_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cIR_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_7 nseg = 7
    dend_3 nseg = 3
    dend_5 nseg = 7
    dend_1 nseg = 3
    dend_30 nseg = 3
    dend_29 nseg = 3
    dend_25 nseg = 3
    dend_24 nseg = 5
    dend_27 nseg = 3
    dend_13 nseg = 5
    dend_12 nseg = 7
    dend_22 nseg = 3
    dend_21 nseg = 3
    dend_16 nseg = 5
    dend_18 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cIR216_L1_HAC_5c847ea2ef_0_0


