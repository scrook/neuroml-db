// Cell: cACint209_L5_MC_fdc7bd1d07_0_0
/*
{
  "id" : "cACint209_L5_MC_fdc7bd1d07_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-1.08646, 9.87923, -0.659624, 1.17789", "-0.990106, 8.86191, -0.603824, 2.09775", "-0.893749, 7.84459, -0.548025, 3.3274", "-0.797392, 6.82726, -0.492225, 5.20085", "-0.701036, 5.80994, -0.436426, 6.69542", "-0.604679, 4.79262, -0.380627, 7.52533", "-0.508322, 3.77529, -0.324827, 8.02847", "-0.411966, 2.75797, -0.269028, 8.37079", "-0.315609, 1.74065, -0.213229, 8.64922", "-0.219252, 0.723323, -0.157429, 8.87547", "-0.122896, -0.294001, -0.10163, 8.81363", "-0.0265389, -1.31132, -0.0458304, 8.42454", "0.0698178, -2.32865, 0.00996895, 7.96064", "0.166174, -3.34597, 0.0657683, 7.52403", "0.262531, -4.36329, 0.121568, 7.02113", "0.358888, -5.38062, 0.177367, 6.22709", "0.455244, -6.39794, 0.233166, 5.16485", "0.551601, -7.41526, 0.288966, 4.22693", "0.647958, -8.43259, 0.344765, 3.56475", "0.744314, -9.44991, 0.400565, 2.2846", "0.840671, -10.4672, 0.456364, 1.45742" ]
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "0.441281, -9.9161, -14.4368, 1.95", "0.554407, -10.5637, -14.5633, 1.95", "0.727558, -11.5548, -14.7569, 1.95", "1.00302, -13.1316, -15.0649, 1.95", "1.35956, -15.1725, -15.4636, 1.95", "1.51601, -16.068, -15.6385, 2.43", "1.68162, -17.016, -15.8237, 2.43" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500006523480264
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "1.76128, 6.45389, 2.53321, 1.14", "2.33822, 7.25528, 3.46165, 1.14", "3.57593, 8.83123, 5.21236, 0.81", "5.00993, 10.6844, 7.0872, 0.81", "5.56017, 11.3546, 7.83569, 0.81", "6.9936, 12.9301, 9.64909, 0.81", "8.29353, 14.2581, 11.0831, 0.81", "9.26197, 15.1266, 11.9074, 0.81", "10.2305, 15.8473, 12.4188, 0.65", "13.3078, 17.8144, 13.2869, 0.65", "14.909, 18.7217, 13.5047, 0.65", "16.9184, 19.6989, 13.5317, 0.65", "18.7323, 20.5238, 13.2584, 0.65", "21.416, 21.6683, 12.4985, 0.65", "22.2563, 21.9834, 12.1048, 0.65", "22.8017, 22.1959, 11.6778, 0.65" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500006523480264
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-0.918718, 10.0439, 0.303204, 1.62", "-0.771294, 11.3447, 0.0233019, 1.62", "-0.694557, 12.314, -0.17824, 1.62", "-0.652268, 13.3185, -0.375888, 1.62", "-0.605215, 14.4361, -0.595798, 1.46", "-0.535693, 16.0874, -0.920724, 1.46", "-0.508064, 16.7436, -1.04985, 1.78", "-0.50095, 18.3323, -1.41434, 1.78", "-0.522644, 19.0381, -1.59544, 1.78" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500006523480264
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "0.840671, -10.4672, 0.456364, 0.311678", "2.25508, -25.4004, 0.456364, 0.311678", "3.66949, -40.3335, 0.456364, 0.311678" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "1.68162, -17.016, -15.8237, 1.3", "-0.270193, -20.3513, -17.1982, 1.3", "-0.78733, -21.2351, -17.5623, 1.3", "-1.40595, -22.2922, -17.998, 1.3", "-2.07033, -23.4275, -18.4659, 1.3", "-2.58747, -24.3112, -18.83, 1.3", "-3.17794, -25.3203, -19.2458, 1.95" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "1.68162, -17.016, -15.8237, 1.46", "3.34922, -18.1049, -14.8103, 1.46", "4.02009, -18.5568, -14.3184, 1.14", "5.63991, -19.7939, -13.0919, 1.14", "6.41338, -20.4514, -12.515, 1.14", "6.99898, -20.9744, -12.109, 1.14", "7.15137, -21.1142, -12.0007, 0.81", "8.94019, -22.9404, -10.7284, 0.81", "9.92216, -24.0128, -10.0435, 0.81", "10.6101, -24.7792, -9.66953, 1.3", "11.4874, -25.7831, -9.2752, 1.3", "12.1458, -26.5827, -9.04984, 0.81", "12.947, -27.5187, -8.90257, 0.81", "13.5135, -28.1799, -8.88344, 0.81", "14.7977, -29.7072, -8.87634, 0.81", "15.787, -30.962, -8.90203, 0.81", "16.5488, -32.0265, -8.94853, 0.81", "18.0498, -34.2711, -9.09902, 0.81", "18.1734, -34.4728, -9.11001, 0.81", "18.599, -35.2365, -9.1364, 0.81", "19.6698, -37.3232, -8.96128, 0.81", "20.0879, -38.1981, -8.79965, 0.81", "20.214, -38.4899, -8.71093, 0.81", "20.4294, -39.0784, -8.46865, 0.81", "20.9974, -40.7219, -7.89398, 0.81", "21.7129, -43.1682, -7.13285, 0.81", "22.0706, -44.8635, -6.68308, 0.81", "22.2531, -45.7942, -6.44662, 0.81", "22.3541, -46.3841, -6.31733, 0.81", "22.7111, -49.3634, -5.89377, 0.81", "22.7603, -50.8757, -5.93985, 1.14", "22.7798, -51.6752, -6.14523, 1.46" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "22.8017, 22.1959, 11.6778, 0.16", "25.7588, 19.652, 10.0095, 0.16", "26.2379, 19.248, 9.72626, 0.65", "26.9858, 18.5971, 9.25986, 0.65", "28.8179, 16.8798, 8.02806, 0.49", "30.1414, 15.5993, 7.11497, 0.49", "31.3597, 14.4521, 6.22598, 0.49", "33.1266, 12.7842, 5.07432, 0.16", "33.4887, 12.4528, 4.83657, 0.16", "34.688, 11.3807, 4.05864, 0.16", "35.3953, 10.7946, 3.71959, 0.16", "37.1194, 9.39512, 3.2161, 0.16", "39.2378, 7.71995, 2.92665, 0.16", "41.6468, 5.90737, 2.94414, 0.16", "43.3761, 4.62153, 3.08748, 0.16", "46.6875, 2.1131, 3.70211, 0.16", "48.5404, 0.665394, 4.20154, 0.16", "49.8457, -0.400967, 4.58777, 0.16", "50.7535, -1.16039, 4.96056, 0.32", "52.0983, -2.25388, 5.61398, 0.49", "53.2746, -3.22308, 6.1891, 0.49", "54.4328, -4.07231, 6.74579, 0.49", "56.9743, -5.5189, 8.03949, 0.16", "60.8451, -7.55106, 10.1446, 0.16", "63.3765, -8.77649, 11.5689, 0.16", "65.1479, -9.53705, 12.6081, 0.16", "69.3971, -11.1673, 15.1468, 0.16", "71.9703, -12.0712, 16.819, 0.16", "80.3594, -17.4874, 16.2834, 0.16" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "22.8017, 22.1959, 11.6778, 0.65", "26.49, 25.2836, 29.8068, 0.65", "27.141, 25.8169, 32.5087, 0.65", "27.5049, 26.119, 33.7727, 0.65", "28.034, 26.5376, 35.1635, 0.65", "28.5448, 26.9394, 36.2548, 0.65", "29.4497, 27.6511, 38.1881, 0.65", "31.1518, 28.9464, 38.6065, 0.16", "32.455, 29.9818, 38.8225, 0.16", "35.7302, 32.3904, 39.4625, 0.16", "36.6502, 33.0632, 39.7163, 0.16", "41.14, 37.4001, 47.5287, 0.16" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-0.522644, 19.0381, -1.59544, 0.81", "-1.86656, 20.7978, -0.757795, 0.81", "-2.4153, 21.4396, -0.529922, 0.81", "-3.48676, 22.6419, -0.122807, 0.81", "-4.77132, 24.0517, 0.393754, 0.81", "-5.9198, 25.2872, 0.842335, 0.81", "-6.71562, 26.1506, 1.14824, 0.81", "-7.89032, 27.3809, 1.59377, 0.81", "-9.19856, 28.7015, 2.14065, 0.81", "-9.65085, 29.1563, 2.34057, 0.81", "-10.6958, 30.2888, 2.78984, 0.81", "-10.9895, 30.654, 2.93295, 1.14", "-12.2138, 32.3091, 3.53976, 1.14", "-13.0301, 33.4884, 3.94029, 1.46", "-13.4006, 34.0405, 4.09037, 1.78", "-14.3215, 35.461, 4.412, 0.65", "-15.278, 37.0205, 4.7239, 0.65", "-15.6608, 37.6559, 4.80598, 0.97" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-0.522644, 19.0381, -1.59544, 0.81", "0.917976, 19.6239, -2.63005, 0.81", "2.44635, 20.2839, -3.65477, 0.81", "3.6457, 20.7817, -4.48269, 0.81", "5.78102, 21.5736, -5.84425, 0.65", "6.52185, 21.7908, -6.34326, 0.65", "8.16807, 22.2241, -7.43282, 0.65", "9.60255, 22.4775, -8.41772, 0.65", "11.4108, 22.7, -9.69312, 0.49", "13.0113, 22.8837, -10.7919, 0.49", "16.0004, 23.0912, -12.6169, 0.49", "17.3534, 23.1115, -13.4682, 0.49", "19.6103, 23.0838, -14.8152, 0.49", "20.3282, 23.052, -15.2338, 0.49", "21.2865, 22.9898, -15.7615, 0.49", "22.8348, 22.8921, -16.7623, 0.49", "25.1396, 22.7537, -18.2782, 0.16", "27.1173, 22.6128, -19.5781, 0.16", "27.7003, 22.5703, -19.937, 0.16", "29.4403, 22.4116, -20.932, 0.16", "33.9954, 21.9476, -23.6462, 0.16", "34.9832, 21.851, -24.2096, 0.16", "37.2936, 21.5992, -25.3861, 0.16", "38.8074, 21.4334, -26.1247, 0.16", "41.2074, 21.2408, -27.1313, 0.16", "45.8375, 20.7903, -28.6439, 0.16", "48.3445, 20.4463, -29.2185, 0.16", "50.336, 20.1295, -29.6166, 0.16", "51.3519, 19.9638, -29.782, 0.16", "54.7087, 19.4029, -30.2481, 0.16", "58.2182, 18.7688, -30.5604, 0.16", "61.0077, 18.2118, -30.5426, 0.16", "63.4018, 17.6871, -30.5216, 0.16", "66.1286, 17.0459, -30.489, 0.16" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "3.66949, -40.3335, 0.456364, 0.338432", "5.0839, -55.2667, 0.456364, 0.338432", "6.49831, -70.1999, 0.456364, 0.338432" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "-3.17794, -25.3203, -19.2458, 0.49", "-5.06091, -25.3699, -18.5696, 0.49", "-6.04712, -25.4112, -18.2467, 0.49", "-8.13891, -25.4779, -17.6426, 0.49", "-10.3582, -25.5134, -17.0636, 0.49", "-16.223, -25.6047, -15.3343, 0.49", "-19.3374, -25.6577, -14.3831, 0.49", "-21.9146, -25.6451, -13.5333, 0.49", "-24.7186, -25.5626, -12.5913, 0.49", "-26.4922, -25.485, -12.0502, 0.49", "-29.4453, -25.29, -11.3266, 0.49", "-32.1727, -25.063, -10.9335, 0.49", "-34.2506, -24.8633, -10.6839, 0.49", "-37.4361, -24.5316, -10.4128, 0.49", "-39.9938, -24.2856, -10.194, 0.49", "-42.7403, -24.0347, -10.0013, 0.49", "-46.0957, -23.7582, -9.85301, 0.49", "-48.5191, -23.5619, -9.71447, 0.49", "-51.751, -23.3008, -9.49281, 0.49", "-53.9535, -23.1315, -9.31944, 0.49", "-57.6687, -22.8482, -8.90619, 0.49", "-61.0511, -22.5353, -8.54405, 0.49", "-62.6624, -22.363, -8.38815, 0.49", "-63.4655, -22.2757, -8.32905, 0.49", "-65.5045, -22.0267, -8.25387, 0.49", "-67.1238, -21.8605, -8.26705, 0.49", "-70.4013, -21.6515, -8.28108, 0.49", "-71.0516, -21.6469, -8.28395, 0.81", "-72.8935, -21.7736, -8.29237, 0.81", "-75.2675, -22.1509, -8.46778, 0.81", "-76.527, -22.4743, -8.62724, 0.65", "-78.551, -23.1568, -8.9881, 0.65", "-81.7938, -24.5155, -9.68447, 0.65", "-82.931, -25.0188, -9.94913, 0.49", "-87.2199, -27.0088, -10.9853, 0.49", "-89.0913, -27.9137, -11.4125, 0.49", "-90.7934, -28.6984, -11.7146, 0.32", "-92.5037, -29.482, -11.9277, 0.32", "-93.3892, -29.8992, -11.9758, 0.32", "-95.7829, -30.951, -11.8771, 0.32", "-96.833, -31.392, -11.6974, 0.32", "-98.976, -32.2285, -11.4379, 0.32", "-100.49, -32.7957, -11.34, 0.32", "-101.767, -33.1922, -11.4487, 0.32", "-103.281, -33.6273, -11.7205, 0.32", "-104.855, -34.0411, -12.1133, 0.32", "-107.823, -34.7552, -12.98, 0.32", "-110.409, -35.2699, -13.7774, 0.32", "-114.785, -35.886, -15.0087, 0.32", "-116.402, -36.0185, -15.4048, 0.32", "-117.714, -36.0641, -15.6647, 0.32", "-119.16, -36.0697, -15.8677, 0.32", "-121.786, -35.9976, -16.0563, 0.32", "-124.812, -35.8195, -16.1732, 0.32", "-126.915, -35.6517, -16.1732, 0.32", "-130.157, -35.3485, -16.1732, 0.32", "-132.929, -35.1643, -16.1732, 0.32", "-135.651, -35.0823, -16.1732, 0.32", "-137.756, -35.1411, -16.1732, 0.32", "-140.84, -35.4015, -16.1732, 0.32", "-142.638, -35.612, -16.1732, 0.32", "-145.494, -36.0577, -16.1732, 0.32", "-146.937, -36.3206, -16.1732, 0.32", "-149.727, -36.85, -16.1732, 0.32", "-151.36, -37.0566, -16.3251, 0.32", "-152.573, -37.15, -16.5182, 0.32", "-154.665, -37.1716, -16.9376, 0.32", "-156.087, -37.0704, -17.2526, 0.32", "-159.836, -36.6326, -18.248, 0.32", "-165.79, -35.8391, -19.9636, 0.32", "-167.259, -35.6565, -20.3868, 0.32", "-169.413, -35.4676, -21.0406, 0.32", "-172.603, -35.2909, -22.023, 0.32", "-176.264, -35.1883, -23.1014, 0.32", "-179.034, -35.1991, -23.8421, 0.32", "-182.062, -35.3328, -24.4624, 0.32", "-185.57, -35.5386, -25.0968, 0.32", "-187.551, -35.7364, -25.3818, 0.32", "-190.238, -36.0457, -25.6346, 0.32", "-191.853, -36.202, -25.7649, 0.32", "-194.792, -36.4091, -26.0541, 0.32", "-196.344, -36.4819, -26.2538, 0.32", "-199.894, -36.4774, -26.7387, 0.32", "-202.482, -36.4106, -27.1401, 0.32", "-206.166, -36.2077, -27.7479, 0.32", "-208.902, -36.0165, -28.3282, 0.32", "-212.216, -35.6733, -29.0681, 0.32", "-215.882, -35.1211, -29.9035, 0.32", "-220.254, -34.3344, -30.8912, 0.32", "-222.779, -33.8552, -31.4088, 0.32", "-226.04, -33.1932, -31.9037, 0.32", "-230.379, -32.1522, -32.5674, 0.32", "-232.62, -31.5602, -32.8606, 0.32" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-3.17794, -25.3203, -19.2458, 0.97", "-3.56014, -26.8181, -19.893, 0.97", "-4.28018, -29.6399, -21.1122, 0.97", "-4.62699, -30.9991, -21.6994, 0.97", "-4.89021, -32.0306, -22.1451, 0.97" ],
    "parent" : "dend_18",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "22.7798, -51.6752, -6.14523, 0.49", "22.9487, -53.3106, -5.24921, 0.49", "23.0216, -54.3827, -4.89966, 0.49", "23.1454, -55.8059, -4.58723, 0.49", "23.4313, -59.0465, -4.07289, 0.49", "23.5614, -61.097, -3.62802, 0.49", "23.6712, -63.1503, -3.1546, 0.49", "23.7129, -65.2115, -2.66057, 0.49", "23.6508, -66.8971, -2.21158, 0.49", "23.5779, -68.5938, -1.64567, 0.49", "23.5422, -71.0786, -0.764992, 0.49", "23.5392, -73.6032, 0.395247, 0.49", "23.484, -75.7805, 1.51727, 0.49", "23.3783, -77.2959, 2.32928, 0.49", "23.0239, -80.4536, 3.9511, 0.49", "22.6889, -82.89, 5.14274, 0.49", "22.3418, -84.8678, 6.0045, 0.49", "21.9149, -86.7321, 6.78255, 0.49", "21.4213, -88.5508, 7.42699, 0.49", "20.7558, -90.4911, 8.05072, 0.49", "20.0624, -91.8933, 8.40847, 0.49", "19.5023, -92.899, 8.64137, 0.49", "18.6639, -94.4585, 8.9718, 0.49", "18.1691, -95.3562, 9.18196, 0.49", "17.6094, -96.3899, 9.4445, 0.49", "16.9894, -97.5949, 9.75062, 0.49", "16.1307, -99.3089, 10.1415, 0.49", "15.5417, -100.48, 10.4291, 0.49", "14.1305, -103.42, 11.1448, 0.49", "13.4518, -104.986, 11.5777, 0.49", "13.0453, -106.071, 11.88, 0.49", "12.5026, -107.663, 12.3924, 0.49", "11.9072, -109.349, 13.0014, 0.49", "11.2681, -111.274, 13.7621, 0.49", "10.5288, -113.47, 14.6366, 0.49", "9.76354, -115.32, 15.305, 0.49", "8.67865, -117.59, 16.0821, 0.49", "8.09404, -118.731, 16.378, 0.32", "7.30256, -120.067, 16.5595, 0.32", "5.52948, -122.606, 16.6089, 0.32", "4.40554, -124.058, 16.4167, 0.32", "3.06619, -125.638, 16.0399, 0.32", "1.37797, -127.579, 15.3633, 0.32", "-0.187174, -129.369, 14.6342, 0.32", "-0.829988, -130.091, 14.305, 0.32", "-1.77492, -131.263, 13.8521, 0.32", "-2.49484, -132.252, 13.4528, 0.32", "-4.09191, -141.956, 15.2625, 0.32", "-4.64903, -151.629, 17.7369, 0.32", "-6.81523, -160.591, 21.6089, 0.32", "-7.97729, -169.482, 26.0363, 0.32", "-9.93865, -178.619, 29.5958, 0.32", "-10.4637, -187.956, 33.136, 0.32", "-9.50109, -197.081, 37.113, 0.32", "-8.19903, -205.476, 42.3876, 0.32", "-6.93474, -213.471, 48.2606, 0.32", "-4.66668, -220.646, 54.8464, 0.32", "0.0843797, -226.953, 60.9827, 0.32" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "22.7798, -51.6752, -6.14523, 0.65", "24.0238, -52.5497, -6.47867, 0.65", "25.3056, -53.4845, -6.77534, 0.65", "26.5043, -54.3815, -6.91179, 0.49", "27.9137, -55.4803, -6.92977, 0.49", "29.3183, -56.6864, -6.86878, 0.49", "29.9831, -57.3014, -6.75983, 0.49", "31.1302, -58.5382, -6.38026, 0.49", "32.3395, -60.0954, -5.6684, 0.49", "33.5668, -62.0446, -4.3643, 0.49", "34.2226, -63.399, -3.28266, 0.49", "34.9038, -65.3424, -1.63823, 0.49", "35.1898, -66.5602, -0.581051, 0.49", "35.3792, -68.4866, 1.02927, 0.49", "35.3524, -70.9588, 2.83417, 0.49", "35.2227, -71.9698, 3.535, 0.49", "34.9759, -73.0757, 4.25262, 0.49", "34.608, -74.3395, 4.97074, 0.49", "34.0914, -76.0169, 5.85372, 0.49", "33.4925, -77.8464, 6.73244, 0.49", "33.3276, -78.4251, 7.03121, 0.49", "32.7149, -80.8345, 8.43517, 0.49", "32.1956, -82.8647, 9.71365, 0.49", "31.5423, -85.0118, 11.116, 0.49", "31.2187, -86.0721, 11.8844, 0.49", "30.4266, -88.5599, 13.7371, 0.49", "30.0215, -89.8891, 14.6628, 0.49", "29.7472, -90.9101, 15.3124, 0.81", "29.1638, -92.9501, 16.4558, 0.81", "28.4058, -95.2571, 17.5194, 0.49", "27.9617, -96.4994, 17.9837, 0.49", "27.5711, -97.5254, 18.2908, 0.49", "26.8251, -99.6849, 18.9211, 0.49", "26.0135, -102.155, 19.6067, 0.49", "25.2244, -104.533, 20.1966, 0.49", "24.7971, -105.614, 20.4172, 0.49", "24.0368, -107.369, 20.8438, 0.32", "23.6303, -108.218, 21.0803, 0.32", "23.3106, -108.813, 21.2087, 0.97", "22.7006, -109.867, 21.4288, 0.97", "22.7006, -109.867, 21.4288, 1.3", "21.4156, -111.755, 21.6571, 0.32", "20.403, -113.263, 21.7527, 0.32", "19.045, -115.509, 21.9787, 0.32", "18.4464, -116.612, 22.1245, 0.32", "17.7807, -117.841, 22.3094, 0.32", "16.724, -119.847, 22.604, 0.32", "15.7923, -121.435, 22.8113, 0.32", "14.4084, -123.417, 23.0648, 0.32", "13.3892, -124.636, 23.2369, 0.32", "11.9405, -126.284, 23.4476, 0.32", "10.2353, -128.078, 23.626, 0.32", "7.93498, -130.112, 23.7391, 0.32", "5.80622, -131.756, 23.6898, 0.32", "4.03624, -132.987, 23.4778, 0.32", "2.53141, -142.149, 27.1911, 0.32", "0.253751, -151.538, 29.7747, 0.32", "-2.93541, -160.742, 32.035, 0.32", "-4.3738, -170.622, 32.5909, 0.32", "-4.85708, -180.325, 34.9631, 0.32", "-5.91854, -190.04, 37.0801, 0.32", "-8.12251, -199.727, 38.2283, 0.32", "-9.23136, -209.43, 40.3789, 0.32", "-9.3371, -218.802, 43.865, 0.32", "-9.35496, -228.573, 45.9896, 0.32" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-15.6608, 37.6559, 4.80598, 0.49", "-13.7403, 37.8467, 9.26939, 0.49", "-12.5287, 37.9067, 11.1124, 0.49", "-11.62, 37.897, 12.4656, 0.49", "-10.3504, 37.9264, 14.689, 0.49", "-9.74396, 37.97, 15.766, 0.49", "-8.88777, 38.0687, 17.2563, 0.49", "-7.76697, 38.2574, 19.0741, 0.49", "-5.14487, 38.5883, 22.9976, 0.49", "-2.93548, 38.7575, 26.0611, 0.49", "-2.31951, 38.838, 26.9051, 0.49", "-0.544463, 39.2484, 29.491, 0.49", "0.390393, 39.6692, 31.0055, 0.32", "1.84402, 40.8103, 33.6183, 0.32", "2.1789, 41.403, 34.3233, 0.32", "2.27893, 44.1415, 36.2652, 0.32", "1.82152, 45.5143, 36.9436, 0.32", "0.94139, 47.4083, 37.6208, 0.32", "0.131691, 48.9013, 38.0473, 0.32", "-1.18077, 51.092, 38.5473, 0.32", "-2.58846, 53.264, 38.9266, 0.32", "-4.20868, 55.646, 39.1674, 0.32", "-5.37136, 57.3475, 39.298, 0.32", "-6.4186, 58.8571, 39.3649, 0.32", "-8.07242, 61.3375, 39.4278, 0.32", "-8.66113, 62.251, 39.4278, 0.32", "-9.7579, 64.0553, 39.4278, 0.32", "-10.7092, 65.6963, 39.4278, 0.32", "-11.6672, 67.4004, 39.4278, 0.32", "-12.4213, 69.0316, 39.4278, 0.32", "-13.2918, 71.5313, 39.4526, 0.32", "-13.6577, 73.1641, 39.4815, 0.32", "-13.7289, 74.3296, 39.4782, 0.32", "-13.5618, 76.2819, 39.4327, 0.32", "-13.0549, 78.3838, 39.3448, 0.32", "-12.5055, 80.0155, 39.2538, 0.32", "-11.9583, 81.3641, 39.1677, 0.32", "-11.0258, 83.781, 39.0065, 0.32", "-10.6903, 84.9161, 38.9739, 0.32", "-10.1621, 86.933, 38.9891, 0.32", "-9.59547, 89.2999, 39.1628, 0.32", "-9.25211, 90.8816, 39.3555, 0.32", "-8.87282, 92.9896, 39.6792, 0.32", "-8.35713, 96.3247, 40.3564, 0.32", "-8.02868, 98.3436, 40.8196, 0.32", "-7.66008, 100.757, 41.4684, 0.32", "-7.2312, 102.816, 42.1397, 0.32", "-5.48975, 110.696, 48.0457, 0.32", "-5.35847, 118.026, 54.8468, 0.32", "-7.08744, 124.699, 62.0906, 0.32", "-7.50351, 131.134, 69.7344, 0.32", "-9.17336, 139.052, 75.6085, 0.32", "-12.0231, 148.03, 78.9659, 0.32", "-16.7855, 155.208, 84.0459, 0.32", "-23.1137, 161.22, 88.9245, 0.32", "-28.7132, 167.31, 94.5421, 0.32", "-34.6281, 174.307, 98.5503, 0.32", "-39.6093, 180.687, 104.422, 0.32", "-42.9767, 187.776, 110.62, 0.32", "-44.9836, 194.856, 117.39, 0.32" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-15.6608, 37.6559, 4.80598, 0.65", "-16.6921, 38.842, 4.57095, 0.65", "-17.4104, 39.6361, 4.38461, 0.65", "-19.3766, 41.6801, 3.88135, 0.65", "-20.6875, 42.9405, 3.56286, 0.65", "-21.3692, 43.4841, 3.41752, 0.65", "-23.091, 44.6663, 3.09247, 0.65", "-24.4436, 45.3896, 2.97989, 0.65", "-25.5817, 45.8836, 2.96098, 0.65", "-26.4956, 46.2, 3.03527, 0.65", "-28.9434, 46.8531, 3.43426, 0.65", "-30.0795, 47.133, 3.63274, 0.65", "-32.3495, 47.5961, 4.00905, 0.65", "-34.3648, 47.9656, 4.3505, 0.65", "-35.6026, 48.1957, 4.52774, 0.65", "-38.0253, 48.6961, 4.68804, 0.65", "-40.3629, 49.2268, 4.63412, 0.49", "-42.26, 49.5938, 4.4618, 0.49", "-42.6653, 49.6531, 4.38713, 0.49", "-45.0471, 49.9414, 3.87978, 0.49", "-46.9698, 50.2221, 3.44058, 0.49", "-48.5587, 50.4957, 3.0743, 0.49", "-49.9896, 50.7574, 2.79318, 0.49", "-51.3417, 51.0705, 2.47704, 0.49", "-53.1277, 51.5341, 2.04522, 0.49", "-54.4324, 51.9375, 1.74232, 0.32", "-55.9688, 52.4768, 1.46193, 0.32", "-57.9056, 53.2507, 1.10467, 0.32", "-59.4111, 53.9549, 0.806581, 0.32", "-61.0095, 54.7793, 0.526325, 0.32", "-62.0244, 55.3218, 0.364315, 0.32", "-63.2708, 56.0018, 0.187904, 0.32", "-64.2866, 56.5896, 0.0917268, 0.32", "-65.3597, 57.2309, 0.0120714, 0.32", "-66.3675, 57.8338, -9.65792E-4, 0.32", "-68.1523, 58.9673, -0.0666335, 0.32" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "-4.89021, -32.0306, -22.1451, 0.81", "-5.52027, -32.3037, -23.2167, 0.81", "-6.01824, -32.5748, -24.0833, 0.81", "-6.9066, -33.105, -25.6777, 0.81", "-9.78712, -34.8129, -30.4502, 0.81", "-10.7416, -35.3922, -31.9282, 0.81", "-13.4347, -37.033, -35.7216, 0.81", "-14.8461, -37.9315, -37.5122, 0.81", "-17.2703, -39.488, -40.0297, 0.65", "-18.7821, -40.5165, -41.2673, 0.65", "-19.7333, -41.2001, -41.7617, 0.65", "-21.5573, -42.5382, -42.4765, 0.65", "-23.6276, -44.0822, -43.0897, 0.65", "-25.7559, -45.7375, -43.8128, 0.65", "-27.773, -47.3926, -44.4436, 0.65", "-28.8469, -48.3266, -44.8936, 0.65", "-29.5742, -48.9712, -45.2933, 0.65", "-31.9702, -51.2168, -47.1243, 0.65", "-32.8917, -52.1419, -48.0346, 0.65" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "-4.89021, -32.0306, -22.1451, 0.65", "-4.05978, -32.9819, -22.2984, 0.65", "-2.62267, -34.6748, -22.8482, 0.65", "-1.23541, -36.3207, -23.4142, 0.65", "-0.245598, -37.7004, -23.8493, 0.65", "0.376553, -38.6305, -24.1197, 0.65", "1.10346, -39.7698, -24.4284, 0.65", "2.46624, -41.966, -25.1329, 0.65", "3.27896, -43.3895, -25.6831, 0.65", "4.25929, -45.2057, -26.3457, 0.65", "4.95947, -46.6842, -26.9228, 0.65", "5.27445, -47.4406, -27.2444, 0.65", "6.05219, -49.7222, -28.2022, 0.65", "6.55091, -51.6178, -28.9166, 0.65", "6.86103, -53.0152, -29.4617, 0.65", "7.16022, -54.2919, -29.9477, 0.49", "7.55304, -56.2041, -30.6009, 0.49", "7.85267, -58.1025, -31.2354, 0.49", "8.00336, -60.1277, -31.8136, 0.49", "8.03081, -61.6835, -32.1995, 0.49", "7.96124, -63.3661, -32.5948, 0.49", "7.80037, -64.6141, -32.9214, 0.49", "7.27375, -67.3079, -33.643, 0.49", "6.66901, -69.8054, -34.4582, 0.49", "6.01125, -72.2148, -35.3257, 0.49", "5.46928, -74.0321, -35.9937, 0.49", "4.10133, -78.3404, -37.6268, 0.49", "3.79391, -79.4117, -38.0284, 0.16", "3.42395, -81.2549, -38.6638, 0.16", "3.32047, -82.1742, -38.9872, 0.32", "3.30075, -83.2785, -39.317, 0.32", "3.45435, -84.7785, -39.6145, 0.32", "3.66795, -86.1435, -39.7218, 0.32", "3.84157, -88.0968, -39.7937, 0.32", "3.8855, -89.7241, -39.7937, 0.32", "3.81501, -92.1683, -39.7925, 0.32", "3.63763, -94.0534, -39.9057, 0.32", "3.27429, -95.9927, -40.1081, 0.32", "2.51256, -98.4014, -40.4488, 0.32", "1.3237, -100.726, -40.863, 0.32", "-0.104041, -102.822, -41.2839, 0.32", "-2.38976, -105.418, -41.901, 0.32", "-3.9525, -106.876, -42.2947, 0.32", "-5.72121, -108.314, -42.7496, 0.32", "-9.37934, -110.8, -43.6585, 0.32", "-10.836, -111.648, -44.0036, 0.32", "-12.7416, -112.629, -44.2558, 0.32", "-14.3892, -113.435, -44.3835, 0.32", "-16.3443, -114.389, -44.5376, 0.32", "-18.2529, -115.319, -44.6776, 0.32", "-20.6513, -116.468, -44.8026, 0.32", "-25.16, -118.565, -44.884, 0.32" ],
    "parent" : "dend_19",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-68.1523, 58.9673, -0.0666335, 0.32", "-68.9111, 58.4032, 0.107256, 0.32", "-69.9854, 57.4558, 0.541755, 0.32", "-71.2548, 56.2698, 1.15883, 0.32", "-72.5136, 55.2821, 1.73949, 0.32", "-73.7, 54.3699, 2.36467, 0.32", "-74.4893, 53.8115, 2.98943, 0.16", "-75.5845, 53.0353, 4.05025, 0.16", "-76.3496, 52.5242, 4.86913, 0.16", "-77.6516, 51.6973, 6.52115, 0.16", "-78.8775, 51.097, 8.14202, 0.16", "-81.6404, 50.1045, 12.1703, 0.16", "-82.7403, 49.8487, 13.8077, 0.16", "-83.3858, 49.7381, 14.7744, 0.16", "-85.3074, 49.4821, 17.7119, 0.16", "-86.628, 49.3403, 19.8614, 0.16", "-88.6768, 49.397, 23.0576, 0.16", "-89.3207, 49.5033, 24.0374, 0.16", "-89.6962, 49.6134, 24.6615, 0.16", "-90.4602, 49.8385, 25.9615, 0.16", "-95.304, 46.9267, 34.2113, 0.16", "-100.451, 43.8547, 42.2157, 0.16", "-106.284, 41.1051, 49.8591, 0.16" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-68.1523, 58.9673, -0.0666335, 0.32", "-68.6891, 59.3378, 0.0345306, 0.32", "-69.9263, 60.1919, 0.147229, 0.32", "-71.2831, 61.0358, 0.178273, 0.32", "-72.9747, 62.0169, 0.157172, 0.32", "-74.2974, 62.7301, 0.115459, 0.32", "-75.6063, 63.4099, -0.00797691, 0.32", "-77.4525, 64.2347, -0.319781, 0.32", "-79.3934, 64.9351, -0.874961, 0.32", "-81.1783, 65.4625, -1.67866, 0.32", "-82.4726, 65.7861, -2.36203, 0.32", "-83.9534, 66.083, -3.24594, 0.32", "-85.0018, 66.2566, -3.94407, 0.32", "-86.9432, 66.5274, -5.2494, 0.32", "-88.4438, 66.6526, -6.66576, 0.32" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "-32.8917, -52.1419, -48.0346, 0.65", "-33.8514, -53.9437, -48.2891, 0.65", "-35.7976, -56.9068, -48.6569, 0.65", "-37.617, -59.385, -48.9286, 0.65", "-38.8909, -60.9911, -49.0794, 0.65", "-40.8924, -63.4242, -49.2736, 0.65", "-42.6999, -65.6442, -49.4264, 0.65", "-44.046, -67.2737, -49.515, 0.49", "-45.1322, -68.6157, -49.6074, 0.32", "-46.8495, -70.8942, -49.8818, 0.32", "-48.831, -73.8784, -50.3436, 0.32", "-50.3813, -76.6428, -50.8293, 0.32", "-51.5055, -79.0842, -51.2671, 0.32", "-52.7736, -82.2523, -51.808, 0.32", "-54.0085, -85.7062, -52.3642, 0.32", "-55.1383, -89.2177, -52.8751, 0.32", "-55.6724, -90.9227, -53.0776, 0.32", "-56.5401, -93.7869, -53.3025, 0.32", "-56.827, -94.7414, -53.322, 0.32", "-57.2992, -96.3661, -53.2767, 0.32", "-57.8765, -98.6856, -53.5168, 0.16", "-58.5311, -101.118, -54.0016, 0.16", "-58.8786, -102.411, -54.3228, 0.16", "-59.5596, -104.595, -54.9338, 0.16", "-60.4167, -107.068, -55.5731, 0.16", "-63.065, -113.887, -57.1643, 0.16", "-63.939, -115.904, -57.7074, 0.16", "-65.8212, -119.715, -58.804, 0.16", "-67.3257, -122.423, -59.5912, 0.16", "-68.7441, -124.817, -60.3547, 0.16", "-70.3729, -127.603, -61.2178, 0.16", "-72.5754, -131.342, -62.3411, 0.16", "-73.6356, -133.275, -62.9909, 0.16", "-74.1796, -134.228, -63.3389, 0.16", "-76.4987, -138.48, -64.8908, 0.16", "-77.8398, -140.772, -65.7113, 0.16", "-79.3203, -143.296, -66.4806, 0.16", "-80.4315, -145.163, -66.8672, 0.16", "-82.0174, -147.692, -67.3613, 0.16", "-82.7603, -148.711, -67.5159, 0.16", "-84.4456, -150.434, -67.5159, 0.16" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "-32.8917, -52.1419, -48.0346, 0.65", "-35.1183, -54.5074, -51.2896, 0.65", "-36.4261, -55.8507, -52.8522, 0.65", "-41.1525, -60.8077, -58.1055, 0.49", "-42.5563, -62.3502, -59.5276, 0.49", "-44.1113, -64.0631, -60.9065, 0.49", "-44.7448, -64.7342, -61.3442, 0.49", "-46.613, -66.7198, -62.3055, 0.49", "-47.522, -67.6108, -62.6715, 0.49", "-49.3745, -69.2576, -63.2668, 0.49", "-51.2061, -70.7467, -63.9933, 0.49", "-55.4127, -73.7447, -65.7437, 0.32", "-57.7184, -75.1258, -66.6562, 0.32", "-60.4108, -76.4608, -67.6639, 0.32", "-64.3104, -78.0476, -69.0119, 0.32", "-67.4513, -79.0337, -70.0255, 0.32", "-70.8176, -79.7268, -71.0461, 0.32", "-74.0851, -80.1062, -72.037, 0.32", "-75.9931, -80.2747, -72.6524, 0.32", "-77.9194, -80.3933, -73.2581, 0.32", "-81.3667, -80.5238, -74.2611, 0.32", "-85.5462, -80.5888, -75.7025, 0.32", "-88.1986, -80.6169, -76.8103, 0.32", "-95.0296, -80.7072, -80.1813, 0.32" ],
    "parent" : "dend_21",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-106.284, 41.1051, 49.8591, 0.16", "-112.337, 38.1302, 57.2421, 0.16", "-117.223, 35.3031, 65.4964, 0.16", "-122.983, 33.9629, 73.5599, 0.16", "-128.715, 34.2492, 81.7491, 0.16", "-134.935, 32.7466, 89.4342, 0.16", "-140.81, 30.1569, 97.1004, 0.16", "-146.905, 25.766, 103.702, 0.16" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-106.284, 41.1051, 49.8591, 0.16", "-111.899, 38.6121, 57.7489, 0.16", "-115.956, 36.5636, 66.6566, 0.16", "-122.104, 34.7804, 74.3389, 0.16", "-129.846, 34.3213, 80.652, 0.16", "-137.055, 32.5944, 87.3639, 0.16", "-144.122, 32.2235, 94.4287, 0.16", "-150.913, 31.9344, 101.764, 0.16" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-88.4438, 66.6526, -6.66576, 0.49", "-90.2431, 65.7755, -7.24861, 0.49", "-91.24, 65.295, -7.6212, 0.49", "-92.3678, 64.7622, -8.02884, 0.49", "-93.2107, 64.3835, -8.36432, 0.32", "-95.5704, 63.4121, -9.27596, 0.32", "-97.6016, 62.7011, -10.0081, 0.32", "-99.4568, 62.1703, -10.5867, 0.32", "-101.061, 61.7661, -11.1449, 0.32", "-103.468, 61.2361, -11.9898, 0.32", "-105.449, 60.8638, -12.6364, 0.32", "-107.46, 60.5833, -13.2132, 0.32", "-107.837, 60.5381, -13.31, 0.32", "-110.869, 60.3267, -13.9165, 0.32", "-113.634, 60.2759, -14.3768, 0.32", "-116.404, 60.4652, -14.5171, 0.32", "-118.087, 60.644, -14.5191, 0.32", "-119.607, 60.8604, -14.4685, 0.32", "-122.121, 61.3479, -14.3186, 0.32", "-125.115, 62.0657, -14.0474, 0.32", "-133.449, 64.283, -13.274, 0.32", "-135.002, 64.739, -13.1062, 0.32", "-137.38, 65.5837, -12.8227, 0.32", "-141.149, 67.2202, -12.3358, 0.32", "-142.493, 67.9422, -12.1479, 0.32", "-144.715, 69.5632, -11.817, 0.32", "-146.791, 71.8544, -11.5307, 0.32", "-148.914, 75.0204, -11.1838, 0.32", "-149.623, 76.5187, -11.0738, 0.32", "-150.291, 78.7208, -11.0006, 0.32", "-150.82, 81.2712, -10.9969, 0.32", "-151.007, 82.596, -11.0909, 0.32", "-151.233, 84.3839, -11.3479, 0.32", "-151.571, 86.6679, -11.7757, 0.32", "-152.236, 89.9842, -12.5568, 0.32", "-152.534, 91.0838, -12.8888, 0.32", "-153.542, 94.0091, -13.9065, 0.32", "-154.096, 95.33, -14.4491, 0.32", "-154.568, 96.2953, -14.8623, 0.32", "-155.33, 97.7796, -15.504, 0.32", "-156.305, 99.6424, -16.2993, 0.32", "-157.089, 101.062, -16.8318, 0.32", "-158.403, 103.516, -17.6372, 0.32", "-159.737, 106.18, -18.46, 0.32", "-160.401, 107.604, -18.8525, 0.32", "-161.262, 109.687, -19.3225, 0.32", "-162.251, 112.299, -19.8112, 0.32", "-162.843, 113.938, -20.064, 0.32", "-163.18, 114.93, -20.1302, 0.32", "-163.559, 116.049, -20.2055, 0.32", "-163.918, 116.975, -20.2499, 0.65", "-164.169, 117.595, -20.2768, 0.16", "-164.992, 119.644, -20.3385, 0.81", "-165.607, 121.013, -20.353, 0.16", "-166.217, 122.25, -20.383, 0.16", "-167.552, 124.8, -20.4664, 0.16", "-168.183, 125.936, -20.5172, 0.16", "-169.428, 128.063, -20.6536, 0.16" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-88.4438, 66.6526, -6.66576, 0.32", "-90.591, 66.6652, -6.8704, 0.32", "-91.9793, 66.5324, -6.97237, 0.32", "-94.0729, 66.2681, -7.29138, 0.32", "-97.0381, 65.8724, -8.02425, 0.32", "-98.2391, 65.6836, -8.36919, 0.32", "-100.213, 65.3344, -8.94184, 0.16", "-102.133, 64.9228, -9.51649, 0.16", "-104.29, 64.4173, -10.097, 0.16", "-106.971, 63.8864, -10.7088, 0.16", "-108.199, 63.6904, -10.9321, 0.16", "-111.154, 63.4556, -11.332, 0.16", "-113.539, 63.4129, -11.4467, 0.16", "-117.1, 63.5739, -11.2874, 0.16", "-120.071, 63.9789, -10.848, 0.16", "-121.324, 64.2133, -10.5781, 0.16", "-123.952, 64.8913, -9.93305, 0.16", "-125.833, 65.5575, -9.3686, 0.16", "-127.131, 66.1085, -8.91986, 0.16", "-129.538, 67.371, -8.50006, 0.16" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_14", "dend_11", "dend_0", "dend_18", "dend_15", "dend_13", "dend_12", "dend_2", "dend_1", "dend_24", "dend_19", "dend_17", "dend_16", "dend_10", "dend_3", "dend_21", "dend_20", "dend_7", "dend_4", "dend_23", "dend_22", "dend_9", "dend_8", "dend_6", "dend_5" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_14", "dend_11", "dend_0", "dend_18", "dend_15", "dend_13", "dend_12", "dend_2", "dend_1", "dend_24", "dend_19", "dend_17", "dend_16", "dend_10", "dend_3", "dend_21", "dend_20", "dend_7", "dend_4", "dend_23", "dend_22", "dend_9", "dend_8", "dend_6", "dend_5" ]
  }, {
    "name" : "ModelViewParmSubset_5",
    "groups" : [ ],
    "sections" : [ "dend_14", "dend_11", "dend_0", "axon_0", "dend_18", "dend_15", "dend_13", "dend_12", "dend_2", "dend_1", "axon_1", "dend_24", "dend_19", "dend_17", "dend_16", "dend_10", "dend_3", "dend_21", "dend_20", "dend_7", "dend_4", "dend_23", "dend_22", "dend_9", "dend_8", "dend_6", "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_19", "dend_19", "dend_19", "dend_19", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_23", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_22", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.993125",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.005611",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.068459995",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.517764",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "6.3E-5",
    "erev" : "-64.6017"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "3.45E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.077616",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.002099",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "1.13999995E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.26087198",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "2.0E-5",
    "erev" : "-69.78141"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.395881",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009986",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "5.0100003E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.009728",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "2.7999999E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cACint209_L5_MC_fdc7bd1d07_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_14, id: dend_14, parent: soma_0
create dend_14
public dend_14
// Section: dend_11, id: dend_11, parent: soma_0
create dend_11
public dend_11
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_18, id: dend_18, parent: dend_14
create dend_18
public dend_18
// Section: dend_15, id: dend_15, parent: dend_14
create dend_15
public dend_15
// Section: dend_13, id: dend_13, parent: dend_11
create dend_13
public dend_13
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_24, id: dend_24, parent: dend_18
create dend_24
public dend_24
// Section: dend_19, id: dend_19, parent: dend_18
create dend_19
public dend_19
// Section: dend_17, id: dend_17, parent: dend_15
create dend_17
public dend_17
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_10, id: dend_10, parent: dend_2
create dend_10
public dend_10
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_21, id: dend_21, parent: dend_19
create dend_21
public dend_21
// Section: dend_20, id: dend_20, parent: dend_19
create dend_20
public dend_20
// Section: dend_7, id: dend_7, parent: dend_3
create dend_7
public dend_7
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_23, id: dend_23, parent: dend_21
create dend_23
public dend_23
// Section: dend_22, id: dend_22, parent: dend_21
create dend_22
public dend_22
// Section: dend_9, id: dend_9, parent: dend_7
create dend_9
public dend_9
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_6, id: dend_6, parent: dend_4
create dend_6
public dend_6
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_14, dend_11, dend_0, dend_18, dend_15, dend_13, dend_12, dend_2, dend_1, dend_24, dend_19, dend_17, dend_16, dend_10, dend_3, dend_21, dend_20, dend_7, dend_4, dend_23, dend_22, dend_9, dend_8, dend_6, dend_5]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_14, dend_11, dend_0, dend_18, dend_15, dend_13, dend_12, dend_2, dend_1, dend_24, dend_19, dend_17, dend_16, dend_10, dend_3, dend_21, dend_20, dend_7, dend_4, dend_23, dend_22, dend_9, dend_8, dend_6, dend_5]}
objref ModelViewParmSubset_4
// Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_14, dend_11, dend_0, axon_0, dend_18, dend_15, dend_13, dend_12, dend_2, dend_1, axon_1, dend_24, dend_19, dend_17, dend_16, dend_10, dend_3, dend_21, dend_20, dend_7, dend_4, dend_23, dend_22, dend_9, dend_8, dend_6, dend_5]}
objref ModelViewParmSubset_5
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_22
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_19, dend_19, dend_19, dend_19, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_14(0), soma_0(0.4500006523480264)
    connect dend_11(0), soma_0(0.4500006523480264)
    connect dend_0(0), soma_0(0.4500006523480264)
    connect axon_0(0), soma_0(1.0)
    connect dend_18(0), dend_14(1.0)
    connect dend_15(0), dend_14(1.0)
    connect dend_13(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_24(0), dend_18(1.0)
    connect dend_19(0), dend_18(1.0)
    connect dend_17(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_10(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_21(0), dend_19(1.0)
    connect dend_20(0), dend_19(1.0)
    connect dend_7(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_23(0), dend_21(1.0)
    connect dend_22(0), dend_21(1.0)
    connect dend_9(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_6(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -1.08646, 9.87923, -0.659624, 1.17789 ) }
    soma_0 { pt3dadd( -0.990106, 8.86191, -0.603824, 2.09775 ) }
    soma_0 { pt3dadd( -0.893749, 7.84459, -0.548025, 3.3274 ) }
    soma_0 { pt3dadd( -0.797392, 6.82726, -0.492225, 5.20085 ) }
    soma_0 { pt3dadd( -0.701036, 5.80994, -0.436426, 6.69542 ) }
    soma_0 { pt3dadd( -0.604679, 4.79262, -0.380627, 7.52533 ) }
    soma_0 { pt3dadd( -0.508322, 3.77529, -0.324827, 8.02847 ) }
    soma_0 { pt3dadd( -0.411966, 2.75797, -0.269028, 8.37079 ) }
    soma_0 { pt3dadd( -0.315609, 1.74065, -0.213229, 8.64922 ) }
    soma_0 { pt3dadd( -0.219252, 0.723323, -0.157429, 8.87547 ) }
    soma_0 { pt3dadd( -0.122896, -0.294001, -0.10163, 8.81363 ) }
    soma_0 { pt3dadd( -0.0265389, -1.31132, -0.0458304, 8.42454 ) }
    soma_0 { pt3dadd( 0.0698178, -2.32865, 0.00996895, 7.96064 ) }
    soma_0 { pt3dadd( 0.166174, -3.34597, 0.0657683, 7.52403 ) }
    soma_0 { pt3dadd( 0.262531, -4.36329, 0.121568, 7.02113 ) }
    soma_0 { pt3dadd( 0.358888, -5.38062, 0.177367, 6.22709 ) }
    soma_0 { pt3dadd( 0.455244, -6.39794, 0.233166, 5.16485 ) }
    soma_0 { pt3dadd( 0.551601, -7.41526, 0.288966, 4.22693 ) }
    soma_0 { pt3dadd( 0.647958, -8.43259, 0.344765, 3.56475 ) }
    soma_0 { pt3dadd( 0.744314, -9.44991, 0.400565, 2.2846 ) }
    soma_0 { pt3dadd( 0.840671, -10.4672, 0.456364, 1.45742 ) }
    // Section: dend_14, id: dend_14, parent: soma_0 (entry count 21/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 0.441281, -9.9161, -14.4368, 1.95 ) }
    dend_14 { pt3dadd( 0.554407, -10.5637, -14.5633, 1.95 ) }
    dend_14 { pt3dadd( 0.727558, -11.5548, -14.7569, 1.95 ) }
    dend_14 { pt3dadd( 1.00302, -13.1316, -15.0649, 1.95 ) }
    dend_14 { pt3dadd( 1.35956, -15.1725, -15.4636, 1.95 ) }
    dend_14 { pt3dadd( 1.51601, -16.068, -15.6385, 2.43 ) }
    dend_14 { pt3dadd( 1.68162, -17.016, -15.8237, 2.43 ) }
    // Section: dend_11, id: dend_11, parent: soma_0 (entry count 28/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 1.76128, 6.45389, 2.53321, 1.14 ) }
    dend_11 { pt3dadd( 2.33822, 7.25528, 3.46165, 1.14 ) }
    dend_11 { pt3dadd( 3.57593, 8.83123, 5.21236, 0.81 ) }
    dend_11 { pt3dadd( 5.00993, 10.6844, 7.0872, 0.81 ) }
    dend_11 { pt3dadd( 5.56017, 11.3546, 7.83569, 0.81 ) }
    dend_11 { pt3dadd( 6.9936, 12.9301, 9.64909, 0.81 ) }
    dend_11 { pt3dadd( 8.29353, 14.2581, 11.0831, 0.81 ) }
    dend_11 { pt3dadd( 9.26197, 15.1266, 11.9074, 0.81 ) }
    dend_11 { pt3dadd( 10.2305, 15.8473, 12.4188, 0.65 ) }
    dend_11 { pt3dadd( 13.3078, 17.8144, 13.2869, 0.65 ) }
    dend_11 { pt3dadd( 14.909, 18.7217, 13.5047, 0.65 ) }
    dend_11 { pt3dadd( 16.9184, 19.6989, 13.5317, 0.65 ) }
    dend_11 { pt3dadd( 18.7323, 20.5238, 13.2584, 0.65 ) }
    dend_11 { pt3dadd( 21.416, 21.6683, 12.4985, 0.65 ) }
    dend_11 { pt3dadd( 22.2563, 21.9834, 12.1048, 0.65 ) }
    dend_11 { pt3dadd( 22.8017, 22.1959, 11.6778, 0.65 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 44/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -0.918718, 10.0439, 0.303204, 1.62 ) }
    dend_0 { pt3dadd( -0.771294, 11.3447, 0.0233019, 1.62 ) }
    dend_0 { pt3dadd( -0.694557, 12.314, -0.17824, 1.62 ) }
    dend_0 { pt3dadd( -0.652268, 13.3185, -0.375888, 1.62 ) }
    dend_0 { pt3dadd( -0.605215, 14.4361, -0.595798, 1.46 ) }
    dend_0 { pt3dadd( -0.535693, 16.0874, -0.920724, 1.46 ) }
    dend_0 { pt3dadd( -0.508064, 16.7436, -1.04985, 1.78 ) }
    dend_0 { pt3dadd( -0.50095, 18.3323, -1.41434, 1.78 ) }
    dend_0 { pt3dadd( -0.522644, 19.0381, -1.59544, 1.78 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 53/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 0.840671, -10.4672, 0.456364, 0.311678 ) }
    axon_0 { pt3dadd( 2.25508, -25.4004, 0.456364, 0.311678 ) }
    axon_0 { pt3dadd( 3.66949, -40.3335, 0.456364, 0.311678 ) }
    // Section: dend_18, id: dend_18, parent: dend_14 (entry count 56/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( 1.68162, -17.016, -15.8237, 1.3 ) }
    dend_18 { pt3dadd( -0.270193, -20.3513, -17.1982, 1.3 ) }
    dend_18 { pt3dadd( -0.78733, -21.2351, -17.5623, 1.3 ) }
    dend_18 { pt3dadd( -1.40595, -22.2922, -17.998, 1.3 ) }
    dend_18 { pt3dadd( -2.07033, -23.4275, -18.4659, 1.3 ) }
    dend_18 { pt3dadd( -2.58747, -24.3112, -18.83, 1.3 ) }
    dend_18 { pt3dadd( -3.17794, -25.3203, -19.2458, 1.95 ) }
    // Section: dend_15, id: dend_15, parent: dend_14 (entry count 63/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 1.68162, -17.016, -15.8237, 1.46 ) }
    dend_15 { pt3dadd( 3.34922, -18.1049, -14.8103, 1.46 ) }
    dend_15 { pt3dadd( 4.02009, -18.5568, -14.3184, 1.14 ) }
    dend_15 { pt3dadd( 5.63991, -19.7939, -13.0919, 1.14 ) }
    dend_15 { pt3dadd( 6.41338, -20.4514, -12.515, 1.14 ) }
    dend_15 { pt3dadd( 6.99898, -20.9744, -12.109, 1.14 ) }
    dend_15 { pt3dadd( 7.15137, -21.1142, -12.0007, 0.81 ) }
    dend_15 { pt3dadd( 8.94019, -22.9404, -10.7284, 0.81 ) }
    dend_15 { pt3dadd( 9.92216, -24.0128, -10.0435, 0.81 ) }
    dend_15 { pt3dadd( 10.6101, -24.7792, -9.66953, 1.3 ) }
    dend_15 { pt3dadd( 11.4874, -25.7831, -9.2752, 1.3 ) }
    dend_15 { pt3dadd( 12.1458, -26.5827, -9.04984, 0.81 ) }
    dend_15 { pt3dadd( 12.947, -27.5187, -8.90257, 0.81 ) }
    dend_15 { pt3dadd( 13.5135, -28.1799, -8.88344, 0.81 ) }
    dend_15 { pt3dadd( 14.7977, -29.7072, -8.87634, 0.81 ) }
    dend_15 { pt3dadd( 15.787, -30.962, -8.90203, 0.81 ) }
    dend_15 { pt3dadd( 16.5488, -32.0265, -8.94853, 0.81 ) }
    dend_15 { pt3dadd( 18.0498, -34.2711, -9.09902, 0.81 ) }
    dend_15 { pt3dadd( 18.1734, -34.4728, -9.11001, 0.81 ) }
    dend_15 { pt3dadd( 18.599, -35.2365, -9.1364, 0.81 ) }
    dend_15 { pt3dadd( 19.6698, -37.3232, -8.96128, 0.81 ) }
    dend_15 { pt3dadd( 20.0879, -38.1981, -8.79965, 0.81 ) }
    dend_15 { pt3dadd( 20.214, -38.4899, -8.71093, 0.81 ) }
    dend_15 { pt3dadd( 20.4294, -39.0784, -8.46865, 0.81 ) }
    dend_15 { pt3dadd( 20.9974, -40.7219, -7.89398, 0.81 ) }
    dend_15 { pt3dadd( 21.7129, -43.1682, -7.13285, 0.81 ) }
    dend_15 { pt3dadd( 22.0706, -44.8635, -6.68308, 0.81 ) }
    dend_15 { pt3dadd( 22.2531, -45.7942, -6.44662, 0.81 ) }
    dend_15 { pt3dadd( 22.3541, -46.3841, -6.31733, 0.81 ) }
    dend_15 { pt3dadd( 22.7111, -49.3634, -5.89377, 0.81 ) }
    dend_15 { pt3dadd( 22.7603, -50.8757, -5.93985, 1.14 ) }
    dend_15 { pt3dadd( 22.7798, -51.6752, -6.14523, 1.46 ) }
    // Section: dend_13, id: dend_13, parent: dend_11 (entry count 95/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 22.8017, 22.1959, 11.6778, 0.16 ) }
    dend_13 { pt3dadd( 25.7588, 19.652, 10.0095, 0.16 ) }
    dend_13 { pt3dadd( 26.2379, 19.248, 9.72626, 0.65 ) }
    dend_13 { pt3dadd( 26.9858, 18.5971, 9.25986, 0.65 ) }
    dend_13 { pt3dadd( 28.8179, 16.8798, 8.02806, 0.49 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_13 { pt3dadd( 30.1414, 15.5993, 7.11497, 0.49 ) }
    dend_13 { pt3dadd( 31.3597, 14.4521, 6.22598, 0.49 ) }
    dend_13 { pt3dadd( 33.1266, 12.7842, 5.07432, 0.16 ) }
    dend_13 { pt3dadd( 33.4887, 12.4528, 4.83657, 0.16 ) }
    dend_13 { pt3dadd( 34.688, 11.3807, 4.05864, 0.16 ) }
    dend_13 { pt3dadd( 35.3953, 10.7946, 3.71959, 0.16 ) }
    dend_13 { pt3dadd( 37.1194, 9.39512, 3.2161, 0.16 ) }
    dend_13 { pt3dadd( 39.2378, 7.71995, 2.92665, 0.16 ) }
    dend_13 { pt3dadd( 41.6468, 5.90737, 2.94414, 0.16 ) }
    dend_13 { pt3dadd( 43.3761, 4.62153, 3.08748, 0.16 ) }
    dend_13 { pt3dadd( 46.6875, 2.1131, 3.70211, 0.16 ) }
    dend_13 { pt3dadd( 48.5404, 0.665394, 4.20154, 0.16 ) }
    dend_13 { pt3dadd( 49.8457, -0.400967, 4.58777, 0.16 ) }
    dend_13 { pt3dadd( 50.7535, -1.16039, 4.96056, 0.32 ) }
    dend_13 { pt3dadd( 52.0983, -2.25388, 5.61398, 0.49 ) }
    dend_13 { pt3dadd( 53.2746, -3.22308, 6.1891, 0.49 ) }
    dend_13 { pt3dadd( 54.4328, -4.07231, 6.74579, 0.49 ) }
    dend_13 { pt3dadd( 56.9743, -5.5189, 8.03949, 0.16 ) }
    dend_13 { pt3dadd( 60.8451, -7.55106, 10.1446, 0.16 ) }
    dend_13 { pt3dadd( 63.3765, -8.77649, 11.5689, 0.16 ) }
    dend_13 { pt3dadd( 65.1479, -9.53705, 12.6081, 0.16 ) }
    dend_13 { pt3dadd( 69.3971, -11.1673, 15.1468, 0.16 ) }
    dend_13 { pt3dadd( 71.9703, -12.0712, 16.819, 0.16 ) }
    dend_13 { pt3dadd( 80.3594, -17.4874, 16.2834, 0.16 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 24/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 22.8017, 22.1959, 11.6778, 0.65 ) }
    dend_12 { pt3dadd( 26.49, 25.2836, 29.8068, 0.65 ) }
    dend_12 { pt3dadd( 27.141, 25.8169, 32.5087, 0.65 ) }
    dend_12 { pt3dadd( 27.5049, 26.119, 33.7727, 0.65 ) }
    dend_12 { pt3dadd( 28.034, 26.5376, 35.1635, 0.65 ) }
    dend_12 { pt3dadd( 28.5448, 26.9394, 36.2548, 0.65 ) }
    dend_12 { pt3dadd( 29.4497, 27.6511, 38.1881, 0.65 ) }
    dend_12 { pt3dadd( 31.1518, 28.9464, 38.6065, 0.16 ) }
    dend_12 { pt3dadd( 32.455, 29.9818, 38.8225, 0.16 ) }
    dend_12 { pt3dadd( 35.7302, 32.3904, 39.4625, 0.16 ) }
    dend_12 { pt3dadd( 36.6502, 33.0632, 39.7163, 0.16 ) }
    dend_12 { pt3dadd( 41.14, 37.4001, 47.5287, 0.16 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 36/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -0.522644, 19.0381, -1.59544, 0.81 ) }
    dend_2 { pt3dadd( -1.86656, 20.7978, -0.757795, 0.81 ) }
    dend_2 { pt3dadd( -2.4153, 21.4396, -0.529922, 0.81 ) }
    dend_2 { pt3dadd( -3.48676, 22.6419, -0.122807, 0.81 ) }
    dend_2 { pt3dadd( -4.77132, 24.0517, 0.393754, 0.81 ) }
    dend_2 { pt3dadd( -5.9198, 25.2872, 0.842335, 0.81 ) }
    dend_2 { pt3dadd( -6.71562, 26.1506, 1.14824, 0.81 ) }
    dend_2 { pt3dadd( -7.89032, 27.3809, 1.59377, 0.81 ) }
    dend_2 { pt3dadd( -9.19856, 28.7015, 2.14065, 0.81 ) }
    dend_2 { pt3dadd( -9.65085, 29.1563, 2.34057, 0.81 ) }
    dend_2 { pt3dadd( -10.6958, 30.2888, 2.78984, 0.81 ) }
    dend_2 { pt3dadd( -10.9895, 30.654, 2.93295, 1.14 ) }
    dend_2 { pt3dadd( -12.2138, 32.3091, 3.53976, 1.14 ) }
    dend_2 { pt3dadd( -13.0301, 33.4884, 3.94029, 1.46 ) }
    dend_2 { pt3dadd( -13.4006, 34.0405, 4.09037, 1.78 ) }
    dend_2 { pt3dadd( -14.3215, 35.461, 4.412, 0.65 ) }
    dend_2 { pt3dadd( -15.278, 37.0205, 4.7239, 0.65 ) }
    dend_2 { pt3dadd( -15.6608, 37.6559, 4.80598, 0.97 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 54/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -0.522644, 19.0381, -1.59544, 0.81 ) }
    dend_1 { pt3dadd( 0.917976, 19.6239, -2.63005, 0.81 ) }
    dend_1 { pt3dadd( 2.44635, 20.2839, -3.65477, 0.81 ) }
    dend_1 { pt3dadd( 3.6457, 20.7817, -4.48269, 0.81 ) }
    dend_1 { pt3dadd( 5.78102, 21.5736, -5.84425, 0.65 ) }
    dend_1 { pt3dadd( 6.52185, 21.7908, -6.34326, 0.65 ) }
    dend_1 { pt3dadd( 8.16807, 22.2241, -7.43282, 0.65 ) }
    dend_1 { pt3dadd( 9.60255, 22.4775, -8.41772, 0.65 ) }
    dend_1 { pt3dadd( 11.4108, 22.7, -9.69312, 0.49 ) }
    dend_1 { pt3dadd( 13.0113, 22.8837, -10.7919, 0.49 ) }
    dend_1 { pt3dadd( 16.0004, 23.0912, -12.6169, 0.49 ) }
    dend_1 { pt3dadd( 17.3534, 23.1115, -13.4682, 0.49 ) }
    dend_1 { pt3dadd( 19.6103, 23.0838, -14.8152, 0.49 ) }
    dend_1 { pt3dadd( 20.3282, 23.052, -15.2338, 0.49 ) }
    dend_1 { pt3dadd( 21.2865, 22.9898, -15.7615, 0.49 ) }
    dend_1 { pt3dadd( 22.8348, 22.8921, -16.7623, 0.49 ) }
    dend_1 { pt3dadd( 25.1396, 22.7537, -18.2782, 0.16 ) }
    dend_1 { pt3dadd( 27.1173, 22.6128, -19.5781, 0.16 ) }
    dend_1 { pt3dadd( 27.7003, 22.5703, -19.937, 0.16 ) }
    dend_1 { pt3dadd( 29.4403, 22.4116, -20.932, 0.16 ) }
    dend_1 { pt3dadd( 33.9954, 21.9476, -23.6462, 0.16 ) }
    dend_1 { pt3dadd( 34.9832, 21.851, -24.2096, 0.16 ) }
    dend_1 { pt3dadd( 37.2936, 21.5992, -25.3861, 0.16 ) }
    dend_1 { pt3dadd( 38.8074, 21.4334, -26.1247, 0.16 ) }
    dend_1 { pt3dadd( 41.2074, 21.2408, -27.1313, 0.16 ) }
    dend_1 { pt3dadd( 45.8375, 20.7903, -28.6439, 0.16 ) }
    dend_1 { pt3dadd( 48.3445, 20.4463, -29.2185, 0.16 ) }
    dend_1 { pt3dadd( 50.336, 20.1295, -29.6166, 0.16 ) }
    dend_1 { pt3dadd( 51.3519, 19.9638, -29.782, 0.16 ) }
    dend_1 { pt3dadd( 54.7087, 19.4029, -30.2481, 0.16 ) }
    dend_1 { pt3dadd( 58.2182, 18.7688, -30.5604, 0.16 ) }
    dend_1 { pt3dadd( 61.0077, 18.2118, -30.5426, 0.16 ) }
    dend_1 { pt3dadd( 63.4018, 17.6871, -30.5216, 0.16 ) }
    dend_1 { pt3dadd( 66.1286, 17.0459, -30.489, 0.16 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 88/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 3.66949, -40.3335, 0.456364, 0.338432 ) }
    axon_1 { pt3dadd( 5.0839, -55.2667, 0.456364, 0.338432 ) }
    axon_1 { pt3dadd( 6.49831, -70.1999, 0.456364, 0.338432 ) }
    // Section: dend_24, id: dend_24, parent: dend_18 (entry count 91/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( -3.17794, -25.3203, -19.2458, 0.49 ) }
    dend_24 { pt3dadd( -5.06091, -25.3699, -18.5696, 0.49 ) }
    dend_24 { pt3dadd( -6.04712, -25.4112, -18.2467, 0.49 ) }
    dend_24 { pt3dadd( -8.13891, -25.4779, -17.6426, 0.49 ) }
    dend_24 { pt3dadd( -10.3582, -25.5134, -17.0636, 0.49 ) }
    dend_24 { pt3dadd( -16.223, -25.6047, -15.3343, 0.49 ) }
    dend_24 { pt3dadd( -19.3374, -25.6577, -14.3831, 0.49 ) }
    dend_24 { pt3dadd( -21.9146, -25.6451, -13.5333, 0.49 ) }
    dend_24 { pt3dadd( -24.7186, -25.5626, -12.5913, 0.49 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_24 { pt3dadd( -26.4922, -25.485, -12.0502, 0.49 ) }
    dend_24 { pt3dadd( -29.4453, -25.29, -11.3266, 0.49 ) }
    dend_24 { pt3dadd( -32.1727, -25.063, -10.9335, 0.49 ) }
    dend_24 { pt3dadd( -34.2506, -24.8633, -10.6839, 0.49 ) }
    dend_24 { pt3dadd( -37.4361, -24.5316, -10.4128, 0.49 ) }
    dend_24 { pt3dadd( -39.9938, -24.2856, -10.194, 0.49 ) }
    dend_24 { pt3dadd( -42.7403, -24.0347, -10.0013, 0.49 ) }
    dend_24 { pt3dadd( -46.0957, -23.7582, -9.85301, 0.49 ) }
    dend_24 { pt3dadd( -48.5191, -23.5619, -9.71447, 0.49 ) }
    dend_24 { pt3dadd( -51.751, -23.3008, -9.49281, 0.49 ) }
    dend_24 { pt3dadd( -53.9535, -23.1315, -9.31944, 0.49 ) }
    dend_24 { pt3dadd( -57.6687, -22.8482, -8.90619, 0.49 ) }
    dend_24 { pt3dadd( -61.0511, -22.5353, -8.54405, 0.49 ) }
    dend_24 { pt3dadd( -62.6624, -22.363, -8.38815, 0.49 ) }
    dend_24 { pt3dadd( -63.4655, -22.2757, -8.32905, 0.49 ) }
    dend_24 { pt3dadd( -65.5045, -22.0267, -8.25387, 0.49 ) }
    dend_24 { pt3dadd( -67.1238, -21.8605, -8.26705, 0.49 ) }
    dend_24 { pt3dadd( -70.4013, -21.6515, -8.28108, 0.49 ) }
    dend_24 { pt3dadd( -71.0516, -21.6469, -8.28395, 0.81 ) }
    dend_24 { pt3dadd( -72.8935, -21.7736, -8.29237, 0.81 ) }
    dend_24 { pt3dadd( -75.2675, -22.1509, -8.46778, 0.81 ) }
    dend_24 { pt3dadd( -76.527, -22.4743, -8.62724, 0.65 ) }
    dend_24 { pt3dadd( -78.551, -23.1568, -8.9881, 0.65 ) }
    dend_24 { pt3dadd( -81.7938, -24.5155, -9.68447, 0.65 ) }
    dend_24 { pt3dadd( -82.931, -25.0188, -9.94913, 0.49 ) }
    dend_24 { pt3dadd( -87.2199, -27.0088, -10.9853, 0.49 ) }
    dend_24 { pt3dadd( -89.0913, -27.9137, -11.4125, 0.49 ) }
    dend_24 { pt3dadd( -90.7934, -28.6984, -11.7146, 0.32 ) }
    dend_24 { pt3dadd( -92.5037, -29.482, -11.9277, 0.32 ) }
    dend_24 { pt3dadd( -93.3892, -29.8992, -11.9758, 0.32 ) }
    dend_24 { pt3dadd( -95.7829, -30.951, -11.8771, 0.32 ) }
    dend_24 { pt3dadd( -96.833, -31.392, -11.6974, 0.32 ) }
    dend_24 { pt3dadd( -98.976, -32.2285, -11.4379, 0.32 ) }
    dend_24 { pt3dadd( -100.49, -32.7957, -11.34, 0.32 ) }
    dend_24 { pt3dadd( -101.767, -33.1922, -11.4487, 0.32 ) }
    dend_24 { pt3dadd( -103.281, -33.6273, -11.7205, 0.32 ) }
    dend_24 { pt3dadd( -104.855, -34.0411, -12.1133, 0.32 ) }
    dend_24 { pt3dadd( -107.823, -34.7552, -12.98, 0.32 ) }
    dend_24 { pt3dadd( -110.409, -35.2699, -13.7774, 0.32 ) }
    dend_24 { pt3dadd( -114.785, -35.886, -15.0087, 0.32 ) }
    dend_24 { pt3dadd( -116.402, -36.0185, -15.4048, 0.32 ) }
    dend_24 { pt3dadd( -117.714, -36.0641, -15.6647, 0.32 ) }
    dend_24 { pt3dadd( -119.16, -36.0697, -15.8677, 0.32 ) }
    dend_24 { pt3dadd( -121.786, -35.9976, -16.0563, 0.32 ) }
    dend_24 { pt3dadd( -124.812, -35.8195, -16.1732, 0.32 ) }
    dend_24 { pt3dadd( -126.915, -35.6517, -16.1732, 0.32 ) }
    dend_24 { pt3dadd( -130.157, -35.3485, -16.1732, 0.32 ) }
    dend_24 { pt3dadd( -132.929, -35.1643, -16.1732, 0.32 ) }
    dend_24 { pt3dadd( -135.651, -35.0823, -16.1732, 0.32 ) }
    dend_24 { pt3dadd( -137.756, -35.1411, -16.1732, 0.32 ) }
    dend_24 { pt3dadd( -140.84, -35.4015, -16.1732, 0.32 ) }
    dend_24 { pt3dadd( -142.638, -35.612, -16.1732, 0.32 ) }
    dend_24 { pt3dadd( -145.494, -36.0577, -16.1732, 0.32 ) }
    dend_24 { pt3dadd( -146.937, -36.3206, -16.1732, 0.32 ) }
    dend_24 { pt3dadd( -149.727, -36.85, -16.1732, 0.32 ) }
    dend_24 { pt3dadd( -151.36, -37.0566, -16.3251, 0.32 ) }
    dend_24 { pt3dadd( -152.573, -37.15, -16.5182, 0.32 ) }
    dend_24 { pt3dadd( -154.665, -37.1716, -16.9376, 0.32 ) }
    dend_24 { pt3dadd( -156.087, -37.0704, -17.2526, 0.32 ) }
    dend_24 { pt3dadd( -159.836, -36.6326, -18.248, 0.32 ) }
    dend_24 { pt3dadd( -165.79, -35.8391, -19.9636, 0.32 ) }
    dend_24 { pt3dadd( -167.259, -35.6565, -20.3868, 0.32 ) }
    dend_24 { pt3dadd( -169.413, -35.4676, -21.0406, 0.32 ) }
    dend_24 { pt3dadd( -172.603, -35.2909, -22.023, 0.32 ) }
    dend_24 { pt3dadd( -176.264, -35.1883, -23.1014, 0.32 ) }
    dend_24 { pt3dadd( -179.034, -35.1991, -23.8421, 0.32 ) }
    dend_24 { pt3dadd( -182.062, -35.3328, -24.4624, 0.32 ) }
    dend_24 { pt3dadd( -185.57, -35.5386, -25.0968, 0.32 ) }
    dend_24 { pt3dadd( -187.551, -35.7364, -25.3818, 0.32 ) }
    dend_24 { pt3dadd( -190.238, -36.0457, -25.6346, 0.32 ) }
    dend_24 { pt3dadd( -191.853, -36.202, -25.7649, 0.32 ) }
    dend_24 { pt3dadd( -194.792, -36.4091, -26.0541, 0.32 ) }
    dend_24 { pt3dadd( -196.344, -36.4819, -26.2538, 0.32 ) }
    dend_24 { pt3dadd( -199.894, -36.4774, -26.7387, 0.32 ) }
    dend_24 { pt3dadd( -202.482, -36.4106, -27.1401, 0.32 ) }
    dend_24 { pt3dadd( -206.166, -36.2077, -27.7479, 0.32 ) }
    dend_24 { pt3dadd( -208.902, -36.0165, -28.3282, 0.32 ) }
    dend_24 { pt3dadd( -212.216, -35.6733, -29.0681, 0.32 ) }
    dend_24 { pt3dadd( -215.882, -35.1211, -29.9035, 0.32 ) }
    dend_24 { pt3dadd( -220.254, -34.3344, -30.8912, 0.32 ) }
    dend_24 { pt3dadd( -222.779, -33.8552, -31.4088, 0.32 ) }
    dend_24 { pt3dadd( -226.04, -33.1932, -31.9037, 0.32 ) }
    dend_24 { pt3dadd( -230.379, -32.1522, -32.5674, 0.32 ) }
    dend_24 { pt3dadd( -232.62, -31.5602, -32.8606, 0.32 ) }
    // Section: dend_19, id: dend_19, parent: dend_18 (entry count 84/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -3.17794, -25.3203, -19.2458, 0.97 ) }
    dend_19 { pt3dadd( -3.56014, -26.8181, -19.893, 0.97 ) }
    dend_19 { pt3dadd( -4.28018, -29.6399, -21.1122, 0.97 ) }
    dend_19 { pt3dadd( -4.62699, -30.9991, -21.6994, 0.97 ) }
    dend_19 { pt3dadd( -4.89021, -32.0306, -22.1451, 0.97 ) }
    // Section: dend_17, id: dend_17, parent: dend_15 (entry count 89/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( 22.7798, -51.6752, -6.14523, 0.49 ) }
    dend_17 { pt3dadd( 22.9487, -53.3106, -5.24921, 0.49 ) }
    dend_17 { pt3dadd( 23.0216, -54.3827, -4.89966, 0.49 ) }
    dend_17 { pt3dadd( 23.1454, -55.8059, -4.58723, 0.49 ) }
    dend_17 { pt3dadd( 23.4313, -59.0465, -4.07289, 0.49 ) }
    dend_17 { pt3dadd( 23.5614, -61.097, -3.62802, 0.49 ) }
    dend_17 { pt3dadd( 23.6712, -63.1503, -3.1546, 0.49 ) }
    dend_17 { pt3dadd( 23.7129, -65.2115, -2.66057, 0.49 ) }
    dend_17 { pt3dadd( 23.6508, -66.8971, -2.21158, 0.49 ) }
    dend_17 { pt3dadd( 23.5779, -68.5938, -1.64567, 0.49 ) }
    dend_17 { pt3dadd( 23.5422, -71.0786, -0.764992, 0.49 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_17 { pt3dadd( 23.5392, -73.6032, 0.395247, 0.49 ) }
    dend_17 { pt3dadd( 23.484, -75.7805, 1.51727, 0.49 ) }
    dend_17 { pt3dadd( 23.3783, -77.2959, 2.32928, 0.49 ) }
    dend_17 { pt3dadd( 23.0239, -80.4536, 3.9511, 0.49 ) }
    dend_17 { pt3dadd( 22.6889, -82.89, 5.14274, 0.49 ) }
    dend_17 { pt3dadd( 22.3418, -84.8678, 6.0045, 0.49 ) }
    dend_17 { pt3dadd( 21.9149, -86.7321, 6.78255, 0.49 ) }
    dend_17 { pt3dadd( 21.4213, -88.5508, 7.42699, 0.49 ) }
    dend_17 { pt3dadd( 20.7558, -90.4911, 8.05072, 0.49 ) }
    dend_17 { pt3dadd( 20.0624, -91.8933, 8.40847, 0.49 ) }
    dend_17 { pt3dadd( 19.5023, -92.899, 8.64137, 0.49 ) }
    dend_17 { pt3dadd( 18.6639, -94.4585, 8.9718, 0.49 ) }
    dend_17 { pt3dadd( 18.1691, -95.3562, 9.18196, 0.49 ) }
    dend_17 { pt3dadd( 17.6094, -96.3899, 9.4445, 0.49 ) }
    dend_17 { pt3dadd( 16.9894, -97.5949, 9.75062, 0.49 ) }
    dend_17 { pt3dadd( 16.1307, -99.3089, 10.1415, 0.49 ) }
    dend_17 { pt3dadd( 15.5417, -100.48, 10.4291, 0.49 ) }
    dend_17 { pt3dadd( 14.1305, -103.42, 11.1448, 0.49 ) }
    dend_17 { pt3dadd( 13.4518, -104.986, 11.5777, 0.49 ) }
    dend_17 { pt3dadd( 13.0453, -106.071, 11.88, 0.49 ) }
    dend_17 { pt3dadd( 12.5026, -107.663, 12.3924, 0.49 ) }
    dend_17 { pt3dadd( 11.9072, -109.349, 13.0014, 0.49 ) }
    dend_17 { pt3dadd( 11.2681, -111.274, 13.7621, 0.49 ) }
    dend_17 { pt3dadd( 10.5288, -113.47, 14.6366, 0.49 ) }
    dend_17 { pt3dadd( 9.76354, -115.32, 15.305, 0.49 ) }
    dend_17 { pt3dadd( 8.67865, -117.59, 16.0821, 0.49 ) }
    dend_17 { pt3dadd( 8.09404, -118.731, 16.378, 0.32 ) }
    dend_17 { pt3dadd( 7.30256, -120.067, 16.5595, 0.32 ) }
    dend_17 { pt3dadd( 5.52948, -122.606, 16.6089, 0.32 ) }
    dend_17 { pt3dadd( 4.40554, -124.058, 16.4167, 0.32 ) }
    dend_17 { pt3dadd( 3.06619, -125.638, 16.0399, 0.32 ) }
    dend_17 { pt3dadd( 1.37797, -127.579, 15.3633, 0.32 ) }
    dend_17 { pt3dadd( -0.187174, -129.369, 14.6342, 0.32 ) }
    dend_17 { pt3dadd( -0.829988, -130.091, 14.305, 0.32 ) }
    dend_17 { pt3dadd( -1.77492, -131.263, 13.8521, 0.32 ) }
    dend_17 { pt3dadd( -2.49484, -132.252, 13.4528, 0.32 ) }
    dend_17 { pt3dadd( -4.09191, -141.956, 15.2625, 0.32 ) }
    dend_17 { pt3dadd( -4.64903, -151.629, 17.7369, 0.32 ) }
    dend_17 { pt3dadd( -6.81523, -160.591, 21.6089, 0.32 ) }
    dend_17 { pt3dadd( -7.97729, -169.482, 26.0363, 0.32 ) }
    dend_17 { pt3dadd( -9.93865, -178.619, 29.5958, 0.32 ) }
    dend_17 { pt3dadd( -10.4637, -187.956, 33.136, 0.32 ) }
    dend_17 { pt3dadd( -9.50109, -197.081, 37.113, 0.32 ) }
    dend_17 { pt3dadd( -8.19903, -205.476, 42.3876, 0.32 ) }
    dend_17 { pt3dadd( -6.93474, -213.471, 48.2606, 0.32 ) }
    dend_17 { pt3dadd( -4.66668, -220.646, 54.8464, 0.32 ) }
    dend_17 { pt3dadd( 0.0843797, -226.953, 60.9827, 0.32 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 47/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 22.7798, -51.6752, -6.14523, 0.65 ) }
    dend_16 { pt3dadd( 24.0238, -52.5497, -6.47867, 0.65 ) }
    dend_16 { pt3dadd( 25.3056, -53.4845, -6.77534, 0.65 ) }
    dend_16 { pt3dadd( 26.5043, -54.3815, -6.91179, 0.49 ) }
    dend_16 { pt3dadd( 27.9137, -55.4803, -6.92977, 0.49 ) }
    dend_16 { pt3dadd( 29.3183, -56.6864, -6.86878, 0.49 ) }
    dend_16 { pt3dadd( 29.9831, -57.3014, -6.75983, 0.49 ) }
    dend_16 { pt3dadd( 31.1302, -58.5382, -6.38026, 0.49 ) }
    dend_16 { pt3dadd( 32.3395, -60.0954, -5.6684, 0.49 ) }
    dend_16 { pt3dadd( 33.5668, -62.0446, -4.3643, 0.49 ) }
    dend_16 { pt3dadd( 34.2226, -63.399, -3.28266, 0.49 ) }
    dend_16 { pt3dadd( 34.9038, -65.3424, -1.63823, 0.49 ) }
    dend_16 { pt3dadd( 35.1898, -66.5602, -0.581051, 0.49 ) }
    dend_16 { pt3dadd( 35.3792, -68.4866, 1.02927, 0.49 ) }
    dend_16 { pt3dadd( 35.3524, -70.9588, 2.83417, 0.49 ) }
    dend_16 { pt3dadd( 35.2227, -71.9698, 3.535, 0.49 ) }
    dend_16 { pt3dadd( 34.9759, -73.0757, 4.25262, 0.49 ) }
    dend_16 { pt3dadd( 34.608, -74.3395, 4.97074, 0.49 ) }
    dend_16 { pt3dadd( 34.0914, -76.0169, 5.85372, 0.49 ) }
    dend_16 { pt3dadd( 33.4925, -77.8464, 6.73244, 0.49 ) }
    dend_16 { pt3dadd( 33.3276, -78.4251, 7.03121, 0.49 ) }
    dend_16 { pt3dadd( 32.7149, -80.8345, 8.43517, 0.49 ) }
    dend_16 { pt3dadd( 32.1956, -82.8647, 9.71365, 0.49 ) }
    dend_16 { pt3dadd( 31.5423, -85.0118, 11.116, 0.49 ) }
    dend_16 { pt3dadd( 31.2187, -86.0721, 11.8844, 0.49 ) }
    dend_16 { pt3dadd( 30.4266, -88.5599, 13.7371, 0.49 ) }
    dend_16 { pt3dadd( 30.0215, -89.8891, 14.6628, 0.49 ) }
    dend_16 { pt3dadd( 29.7472, -90.9101, 15.3124, 0.81 ) }
    dend_16 { pt3dadd( 29.1638, -92.9501, 16.4558, 0.81 ) }
    dend_16 { pt3dadd( 28.4058, -95.2571, 17.5194, 0.49 ) }
    dend_16 { pt3dadd( 27.9617, -96.4994, 17.9837, 0.49 ) }
    dend_16 { pt3dadd( 27.5711, -97.5254, 18.2908, 0.49 ) }
    dend_16 { pt3dadd( 26.8251, -99.6849, 18.9211, 0.49 ) }
    dend_16 { pt3dadd( 26.0135, -102.155, 19.6067, 0.49 ) }
    dend_16 { pt3dadd( 25.2244, -104.533, 20.1966, 0.49 ) }
    dend_16 { pt3dadd( 24.7971, -105.614, 20.4172, 0.49 ) }
    dend_16 { pt3dadd( 24.0368, -107.369, 20.8438, 0.32 ) }
    dend_16 { pt3dadd( 23.6303, -108.218, 21.0803, 0.32 ) }
    dend_16 { pt3dadd( 23.3106, -108.813, 21.2087, 0.97 ) }
    dend_16 { pt3dadd( 22.7006, -109.867, 21.4288, 0.97 ) }
    dend_16 { pt3dadd( 22.7006, -109.867, 21.4288, 1.3 ) }
    dend_16 { pt3dadd( 21.4156, -111.755, 21.6571, 0.32 ) }
    dend_16 { pt3dadd( 20.403, -113.263, 21.7527, 0.32 ) }
    dend_16 { pt3dadd( 19.045, -115.509, 21.9787, 0.32 ) }
    dend_16 { pt3dadd( 18.4464, -116.612, 22.1245, 0.32 ) }
    dend_16 { pt3dadd( 17.7807, -117.841, 22.3094, 0.32 ) }
    dend_16 { pt3dadd( 16.724, -119.847, 22.604, 0.32 ) }
    dend_16 { pt3dadd( 15.7923, -121.435, 22.8113, 0.32 ) }
    dend_16 { pt3dadd( 14.4084, -123.417, 23.0648, 0.32 ) }
    dend_16 { pt3dadd( 13.3892, -124.636, 23.2369, 0.32 ) }
    dend_16 { pt3dadd( 11.9405, -126.284, 23.4476, 0.32 ) }
    dend_16 { pt3dadd( 10.2353, -128.078, 23.626, 0.32 ) }
    dend_16 { pt3dadd( 7.93498, -130.112, 23.7391, 0.32 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_16 { pt3dadd( 5.80622, -131.756, 23.6898, 0.32 ) }
    dend_16 { pt3dadd( 4.03624, -132.987, 23.4778, 0.32 ) }
    dend_16 { pt3dadd( 2.53141, -142.149, 27.1911, 0.32 ) }
    dend_16 { pt3dadd( 0.253751, -151.538, 29.7747, 0.32 ) }
    dend_16 { pt3dadd( -2.93541, -160.742, 32.035, 0.32 ) }
    dend_16 { pt3dadd( -4.3738, -170.622, 32.5909, 0.32 ) }
    dend_16 { pt3dadd( -4.85708, -180.325, 34.9631, 0.32 ) }
    dend_16 { pt3dadd( -5.91854, -190.04, 37.0801, 0.32 ) }
    dend_16 { pt3dadd( -8.12251, -199.727, 38.2283, 0.32 ) }
    dend_16 { pt3dadd( -9.23136, -209.43, 40.3789, 0.32 ) }
    dend_16 { pt3dadd( -9.3371, -218.802, 43.865, 0.32 ) }
    dend_16 { pt3dadd( -9.35496, -228.573, 45.9896, 0.32 ) }
    // Section: dend_10, id: dend_10, parent: dend_2 (entry count 12/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -15.6608, 37.6559, 4.80598, 0.49 ) }
    dend_10 { pt3dadd( -13.7403, 37.8467, 9.26939, 0.49 ) }
    dend_10 { pt3dadd( -12.5287, 37.9067, 11.1124, 0.49 ) }
    dend_10 { pt3dadd( -11.62, 37.897, 12.4656, 0.49 ) }
    dend_10 { pt3dadd( -10.3504, 37.9264, 14.689, 0.49 ) }
    dend_10 { pt3dadd( -9.74396, 37.97, 15.766, 0.49 ) }
    dend_10 { pt3dadd( -8.88777, 38.0687, 17.2563, 0.49 ) }
    dend_10 { pt3dadd( -7.76697, 38.2574, 19.0741, 0.49 ) }
    dend_10 { pt3dadd( -5.14487, 38.5883, 22.9976, 0.49 ) }
    dend_10 { pt3dadd( -2.93548, 38.7575, 26.0611, 0.49 ) }
    dend_10 { pt3dadd( -2.31951, 38.838, 26.9051, 0.49 ) }
    dend_10 { pt3dadd( -0.544463, 39.2484, 29.491, 0.49 ) }
    dend_10 { pt3dadd( 0.390393, 39.6692, 31.0055, 0.32 ) }
    dend_10 { pt3dadd( 1.84402, 40.8103, 33.6183, 0.32 ) }
    dend_10 { pt3dadd( 2.1789, 41.403, 34.3233, 0.32 ) }
    dend_10 { pt3dadd( 2.27893, 44.1415, 36.2652, 0.32 ) }
    dend_10 { pt3dadd( 1.82152, 45.5143, 36.9436, 0.32 ) }
    dend_10 { pt3dadd( 0.94139, 47.4083, 37.6208, 0.32 ) }
    dend_10 { pt3dadd( 0.131691, 48.9013, 38.0473, 0.32 ) }
    dend_10 { pt3dadd( -1.18077, 51.092, 38.5473, 0.32 ) }
    dend_10 { pt3dadd( -2.58846, 53.264, 38.9266, 0.32 ) }
    dend_10 { pt3dadd( -4.20868, 55.646, 39.1674, 0.32 ) }
    dend_10 { pt3dadd( -5.37136, 57.3475, 39.298, 0.32 ) }
    dend_10 { pt3dadd( -6.4186, 58.8571, 39.3649, 0.32 ) }
    dend_10 { pt3dadd( -8.07242, 61.3375, 39.4278, 0.32 ) }
    dend_10 { pt3dadd( -8.66113, 62.251, 39.4278, 0.32 ) }
    dend_10 { pt3dadd( -9.7579, 64.0553, 39.4278, 0.32 ) }
    dend_10 { pt3dadd( -10.7092, 65.6963, 39.4278, 0.32 ) }
    dend_10 { pt3dadd( -11.6672, 67.4004, 39.4278, 0.32 ) }
    dend_10 { pt3dadd( -12.4213, 69.0316, 39.4278, 0.32 ) }
    dend_10 { pt3dadd( -13.2918, 71.5313, 39.4526, 0.32 ) }
    dend_10 { pt3dadd( -13.6577, 73.1641, 39.4815, 0.32 ) }
    dend_10 { pt3dadd( -13.7289, 74.3296, 39.4782, 0.32 ) }
    dend_10 { pt3dadd( -13.5618, 76.2819, 39.4327, 0.32 ) }
    dend_10 { pt3dadd( -13.0549, 78.3838, 39.3448, 0.32 ) }
    dend_10 { pt3dadd( -12.5055, 80.0155, 39.2538, 0.32 ) }
    dend_10 { pt3dadd( -11.9583, 81.3641, 39.1677, 0.32 ) }
    dend_10 { pt3dadd( -11.0258, 83.781, 39.0065, 0.32 ) }
    dend_10 { pt3dadd( -10.6903, 84.9161, 38.9739, 0.32 ) }
    dend_10 { pt3dadd( -10.1621, 86.933, 38.9891, 0.32 ) }
    dend_10 { pt3dadd( -9.59547, 89.2999, 39.1628, 0.32 ) }
    dend_10 { pt3dadd( -9.25211, 90.8816, 39.3555, 0.32 ) }
    dend_10 { pt3dadd( -8.87282, 92.9896, 39.6792, 0.32 ) }
    dend_10 { pt3dadd( -8.35713, 96.3247, 40.3564, 0.32 ) }
    dend_10 { pt3dadd( -8.02868, 98.3436, 40.8196, 0.32 ) }
    dend_10 { pt3dadd( -7.66008, 100.757, 41.4684, 0.32 ) }
    dend_10 { pt3dadd( -7.2312, 102.816, 42.1397, 0.32 ) }
    dend_10 { pt3dadd( -5.48975, 110.696, 48.0457, 0.32 ) }
    dend_10 { pt3dadd( -5.35847, 118.026, 54.8468, 0.32 ) }
    dend_10 { pt3dadd( -7.08744, 124.699, 62.0906, 0.32 ) }
    dend_10 { pt3dadd( -7.50351, 131.134, 69.7344, 0.32 ) }
    dend_10 { pt3dadd( -9.17336, 139.052, 75.6085, 0.32 ) }
    dend_10 { pt3dadd( -12.0231, 148.03, 78.9659, 0.32 ) }
    dend_10 { pt3dadd( -16.7855, 155.208, 84.0459, 0.32 ) }
    dend_10 { pt3dadd( -23.1137, 161.22, 88.9245, 0.32 ) }
    dend_10 { pt3dadd( -28.7132, 167.31, 94.5421, 0.32 ) }
    dend_10 { pt3dadd( -34.6281, 174.307, 98.5503, 0.32 ) }
    dend_10 { pt3dadd( -39.6093, 180.687, 104.422, 0.32 ) }
    dend_10 { pt3dadd( -42.9767, 187.776, 110.62, 0.32 ) }
    dend_10 { pt3dadd( -44.9836, 194.856, 117.39, 0.32 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 72/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -15.6608, 37.6559, 4.80598, 0.65 ) }
    dend_3 { pt3dadd( -16.6921, 38.842, 4.57095, 0.65 ) }
    dend_3 { pt3dadd( -17.4104, 39.6361, 4.38461, 0.65 ) }
    dend_3 { pt3dadd( -19.3766, 41.6801, 3.88135, 0.65 ) }
    dend_3 { pt3dadd( -20.6875, 42.9405, 3.56286, 0.65 ) }
    dend_3 { pt3dadd( -21.3692, 43.4841, 3.41752, 0.65 ) }
    dend_3 { pt3dadd( -23.091, 44.6663, 3.09247, 0.65 ) }
    dend_3 { pt3dadd( -24.4436, 45.3896, 2.97989, 0.65 ) }
    dend_3 { pt3dadd( -25.5817, 45.8836, 2.96098, 0.65 ) }
    dend_3 { pt3dadd( -26.4956, 46.2, 3.03527, 0.65 ) }
    dend_3 { pt3dadd( -28.9434, 46.8531, 3.43426, 0.65 ) }
    dend_3 { pt3dadd( -30.0795, 47.133, 3.63274, 0.65 ) }
    dend_3 { pt3dadd( -32.3495, 47.5961, 4.00905, 0.65 ) }
    dend_3 { pt3dadd( -34.3648, 47.9656, 4.3505, 0.65 ) }
    dend_3 { pt3dadd( -35.6026, 48.1957, 4.52774, 0.65 ) }
    dend_3 { pt3dadd( -38.0253, 48.6961, 4.68804, 0.65 ) }
    dend_3 { pt3dadd( -40.3629, 49.2268, 4.63412, 0.49 ) }
    dend_3 { pt3dadd( -42.26, 49.5938, 4.4618, 0.49 ) }
    dend_3 { pt3dadd( -42.6653, 49.6531, 4.38713, 0.49 ) }
    dend_3 { pt3dadd( -45.0471, 49.9414, 3.87978, 0.49 ) }
    dend_3 { pt3dadd( -46.9698, 50.2221, 3.44058, 0.49 ) }
    dend_3 { pt3dadd( -48.5587, 50.4957, 3.0743, 0.49 ) }
    dend_3 { pt3dadd( -49.9896, 50.7574, 2.79318, 0.49 ) }
    dend_3 { pt3dadd( -51.3417, 51.0705, 2.47704, 0.49 ) }
    dend_3 { pt3dadd( -53.1277, 51.5341, 2.04522, 0.49 ) }
    dend_3 { pt3dadd( -54.4324, 51.9375, 1.74232, 0.32 ) }
    dend_3 { pt3dadd( -55.9688, 52.4768, 1.46193, 0.32 ) }
    dend_3 { pt3dadd( -57.9056, 53.2507, 1.10467, 0.32 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_3 { pt3dadd( -59.4111, 53.9549, 0.806581, 0.32 ) }
    dend_3 { pt3dadd( -61.0095, 54.7793, 0.526325, 0.32 ) }
    dend_3 { pt3dadd( -62.0244, 55.3218, 0.364315, 0.32 ) }
    dend_3 { pt3dadd( -63.2708, 56.0018, 0.187904, 0.32 ) }
    dend_3 { pt3dadd( -64.2866, 56.5896, 0.0917268, 0.32 ) }
    dend_3 { pt3dadd( -65.3597, 57.2309, 0.0120714, 0.32 ) }
    dend_3 { pt3dadd( -66.3675, 57.8338, -9.65792E-4, 0.32 ) }
    dend_3 { pt3dadd( -68.1523, 58.9673, -0.0666335, 0.32 ) }
    // Section: dend_21, id: dend_21, parent: dend_19 (entry count 8/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( -4.89021, -32.0306, -22.1451, 0.81 ) }
    dend_21 { pt3dadd( -5.52027, -32.3037, -23.2167, 0.81 ) }
    dend_21 { pt3dadd( -6.01824, -32.5748, -24.0833, 0.81 ) }
    dend_21 { pt3dadd( -6.9066, -33.105, -25.6777, 0.81 ) }
    dend_21 { pt3dadd( -9.78712, -34.8129, -30.4502, 0.81 ) }
    dend_21 { pt3dadd( -10.7416, -35.3922, -31.9282, 0.81 ) }
    dend_21 { pt3dadd( -13.4347, -37.033, -35.7216, 0.81 ) }
    dend_21 { pt3dadd( -14.8461, -37.9315, -37.5122, 0.81 ) }
    dend_21 { pt3dadd( -17.2703, -39.488, -40.0297, 0.65 ) }
    dend_21 { pt3dadd( -18.7821, -40.5165, -41.2673, 0.65 ) }
    dend_21 { pt3dadd( -19.7333, -41.2001, -41.7617, 0.65 ) }
    dend_21 { pt3dadd( -21.5573, -42.5382, -42.4765, 0.65 ) }
    dend_21 { pt3dadd( -23.6276, -44.0822, -43.0897, 0.65 ) }
    dend_21 { pt3dadd( -25.7559, -45.7375, -43.8128, 0.65 ) }
    dend_21 { pt3dadd( -27.773, -47.3926, -44.4436, 0.65 ) }
    dend_21 { pt3dadd( -28.8469, -48.3266, -44.8936, 0.65 ) }
    dend_21 { pt3dadd( -29.5742, -48.9712, -45.2933, 0.65 ) }
    dend_21 { pt3dadd( -31.9702, -51.2168, -47.1243, 0.65 ) }
    dend_21 { pt3dadd( -32.8917, -52.1419, -48.0346, 0.65 ) }
    // Section: dend_20, id: dend_20, parent: dend_19 (entry count 27/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( -4.89021, -32.0306, -22.1451, 0.65 ) }
    dend_20 { pt3dadd( -4.05978, -32.9819, -22.2984, 0.65 ) }
    dend_20 { pt3dadd( -2.62267, -34.6748, -22.8482, 0.65 ) }
    dend_20 { pt3dadd( -1.23541, -36.3207, -23.4142, 0.65 ) }
    dend_20 { pt3dadd( -0.245598, -37.7004, -23.8493, 0.65 ) }
    dend_20 { pt3dadd( 0.376553, -38.6305, -24.1197, 0.65 ) }
    dend_20 { pt3dadd( 1.10346, -39.7698, -24.4284, 0.65 ) }
    dend_20 { pt3dadd( 2.46624, -41.966, -25.1329, 0.65 ) }
    dend_20 { pt3dadd( 3.27896, -43.3895, -25.6831, 0.65 ) }
    dend_20 { pt3dadd( 4.25929, -45.2057, -26.3457, 0.65 ) }
    dend_20 { pt3dadd( 4.95947, -46.6842, -26.9228, 0.65 ) }
    dend_20 { pt3dadd( 5.27445, -47.4406, -27.2444, 0.65 ) }
    dend_20 { pt3dadd( 6.05219, -49.7222, -28.2022, 0.65 ) }
    dend_20 { pt3dadd( 6.55091, -51.6178, -28.9166, 0.65 ) }
    dend_20 { pt3dadd( 6.86103, -53.0152, -29.4617, 0.65 ) }
    dend_20 { pt3dadd( 7.16022, -54.2919, -29.9477, 0.49 ) }
    dend_20 { pt3dadd( 7.55304, -56.2041, -30.6009, 0.49 ) }
    dend_20 { pt3dadd( 7.85267, -58.1025, -31.2354, 0.49 ) }
    dend_20 { pt3dadd( 8.00336, -60.1277, -31.8136, 0.49 ) }
    dend_20 { pt3dadd( 8.03081, -61.6835, -32.1995, 0.49 ) }
    dend_20 { pt3dadd( 7.96124, -63.3661, -32.5948, 0.49 ) }
    dend_20 { pt3dadd( 7.80037, -64.6141, -32.9214, 0.49 ) }
    dend_20 { pt3dadd( 7.27375, -67.3079, -33.643, 0.49 ) }
    dend_20 { pt3dadd( 6.66901, -69.8054, -34.4582, 0.49 ) }
    dend_20 { pt3dadd( 6.01125, -72.2148, -35.3257, 0.49 ) }
    dend_20 { pt3dadd( 5.46928, -74.0321, -35.9937, 0.49 ) }
    dend_20 { pt3dadd( 4.10133, -78.3404, -37.6268, 0.49 ) }
    dend_20 { pt3dadd( 3.79391, -79.4117, -38.0284, 0.16 ) }
    dend_20 { pt3dadd( 3.42395, -81.2549, -38.6638, 0.16 ) }
    dend_20 { pt3dadd( 3.32047, -82.1742, -38.9872, 0.32 ) }
    dend_20 { pt3dadd( 3.30075, -83.2785, -39.317, 0.32 ) }
    dend_20 { pt3dadd( 3.45435, -84.7785, -39.6145, 0.32 ) }
    dend_20 { pt3dadd( 3.66795, -86.1435, -39.7218, 0.32 ) }
    dend_20 { pt3dadd( 3.84157, -88.0968, -39.7937, 0.32 ) }
    dend_20 { pt3dadd( 3.8855, -89.7241, -39.7937, 0.32 ) }
    dend_20 { pt3dadd( 3.81501, -92.1683, -39.7925, 0.32 ) }
    dend_20 { pt3dadd( 3.63763, -94.0534, -39.9057, 0.32 ) }
    dend_20 { pt3dadd( 3.27429, -95.9927, -40.1081, 0.32 ) }
    dend_20 { pt3dadd( 2.51256, -98.4014, -40.4488, 0.32 ) }
    dend_20 { pt3dadd( 1.3237, -100.726, -40.863, 0.32 ) }
    dend_20 { pt3dadd( -0.104041, -102.822, -41.2839, 0.32 ) }
    dend_20 { pt3dadd( -2.38976, -105.418, -41.901, 0.32 ) }
    dend_20 { pt3dadd( -3.9525, -106.876, -42.2947, 0.32 ) }
    dend_20 { pt3dadd( -5.72121, -108.314, -42.7496, 0.32 ) }
    dend_20 { pt3dadd( -9.37934, -110.8, -43.6585, 0.32 ) }
    dend_20 { pt3dadd( -10.836, -111.648, -44.0036, 0.32 ) }
    dend_20 { pt3dadd( -12.7416, -112.629, -44.2558, 0.32 ) }
    dend_20 { pt3dadd( -14.3892, -113.435, -44.3835, 0.32 ) }
    dend_20 { pt3dadd( -16.3443, -114.389, -44.5376, 0.32 ) }
    dend_20 { pt3dadd( -18.2529, -115.319, -44.6776, 0.32 ) }
    dend_20 { pt3dadd( -20.6513, -116.468, -44.8026, 0.32 ) }
    dend_20 { pt3dadd( -25.16, -118.565, -44.884, 0.32 ) }
    // Section: dend_7, id: dend_7, parent: dend_3 (entry count 79/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -68.1523, 58.9673, -0.0666335, 0.32 ) }
    dend_7 { pt3dadd( -68.9111, 58.4032, 0.107256, 0.32 ) }
    dend_7 { pt3dadd( -69.9854, 57.4558, 0.541755, 0.32 ) }
    dend_7 { pt3dadd( -71.2548, 56.2698, 1.15883, 0.32 ) }
    dend_7 { pt3dadd( -72.5136, 55.2821, 1.73949, 0.32 ) }
    dend_7 { pt3dadd( -73.7, 54.3699, 2.36467, 0.32 ) }
    dend_7 { pt3dadd( -74.4893, 53.8115, 2.98943, 0.16 ) }
    dend_7 { pt3dadd( -75.5845, 53.0353, 4.05025, 0.16 ) }
    dend_7 { pt3dadd( -76.3496, 52.5242, 4.86913, 0.16 ) }
    dend_7 { pt3dadd( -77.6516, 51.6973, 6.52115, 0.16 ) }
    dend_7 { pt3dadd( -78.8775, 51.097, 8.14202, 0.16 ) }
    dend_7 { pt3dadd( -81.6404, 50.1045, 12.1703, 0.16 ) }
    dend_7 { pt3dadd( -82.7403, 49.8487, 13.8077, 0.16 ) }
    dend_7 { pt3dadd( -83.3858, 49.7381, 14.7744, 0.16 ) }
    dend_7 { pt3dadd( -85.3074, 49.4821, 17.7119, 0.16 ) }
    dend_7 { pt3dadd( -86.628, 49.3403, 19.8614, 0.16 ) }
    dend_7 { pt3dadd( -88.6768, 49.397, 23.0576, 0.16 ) }
    dend_7 { pt3dadd( -89.3207, 49.5033, 24.0374, 0.16 ) }
    dend_7 { pt3dadd( -89.6962, 49.6134, 24.6615, 0.16 ) }
    dend_7 { pt3dadd( -90.4602, 49.8385, 25.9615, 0.16 ) }
    dend_7 { pt3dadd( -95.304, 46.9267, 34.2113, 0.16 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_7 { pt3dadd( -100.451, 43.8547, 42.2157, 0.16 ) }
    dend_7 { pt3dadd( -106.284, 41.1051, 49.8591, 0.16 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 2/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -68.1523, 58.9673, -0.0666335, 0.32 ) }
    dend_4 { pt3dadd( -68.6891, 59.3378, 0.0345306, 0.32 ) }
    dend_4 { pt3dadd( -69.9263, 60.1919, 0.147229, 0.32 ) }
    dend_4 { pt3dadd( -71.2831, 61.0358, 0.178273, 0.32 ) }
    dend_4 { pt3dadd( -72.9747, 62.0169, 0.157172, 0.32 ) }
    dend_4 { pt3dadd( -74.2974, 62.7301, 0.115459, 0.32 ) }
    dend_4 { pt3dadd( -75.6063, 63.4099, -0.00797691, 0.32 ) }
    dend_4 { pt3dadd( -77.4525, 64.2347, -0.319781, 0.32 ) }
    dend_4 { pt3dadd( -79.3934, 64.9351, -0.874961, 0.32 ) }
    dend_4 { pt3dadd( -81.1783, 65.4625, -1.67866, 0.32 ) }
    dend_4 { pt3dadd( -82.4726, 65.7861, -2.36203, 0.32 ) }
    dend_4 { pt3dadd( -83.9534, 66.083, -3.24594, 0.32 ) }
    dend_4 { pt3dadd( -85.0018, 66.2566, -3.94407, 0.32 ) }
    dend_4 { pt3dadd( -86.9432, 66.5274, -5.2494, 0.32 ) }
    dend_4 { pt3dadd( -88.4438, 66.6526, -6.66576, 0.32 ) }
    // Section: dend_23, id: dend_23, parent: dend_21 (entry count 17/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( -32.8917, -52.1419, -48.0346, 0.65 ) }
    dend_23 { pt3dadd( -33.8514, -53.9437, -48.2891, 0.65 ) }
    dend_23 { pt3dadd( -35.7976, -56.9068, -48.6569, 0.65 ) }
    dend_23 { pt3dadd( -37.617, -59.385, -48.9286, 0.65 ) }
    dend_23 { pt3dadd( -38.8909, -60.9911, -49.0794, 0.65 ) }
    dend_23 { pt3dadd( -40.8924, -63.4242, -49.2736, 0.65 ) }
    dend_23 { pt3dadd( -42.6999, -65.6442, -49.4264, 0.65 ) }
    dend_23 { pt3dadd( -44.046, -67.2737, -49.515, 0.49 ) }
    dend_23 { pt3dadd( -45.1322, -68.6157, -49.6074, 0.32 ) }
    dend_23 { pt3dadd( -46.8495, -70.8942, -49.8818, 0.32 ) }
    dend_23 { pt3dadd( -48.831, -73.8784, -50.3436, 0.32 ) }
    dend_23 { pt3dadd( -50.3813, -76.6428, -50.8293, 0.32 ) }
    dend_23 { pt3dadd( -51.5055, -79.0842, -51.2671, 0.32 ) }
    dend_23 { pt3dadd( -52.7736, -82.2523, -51.808, 0.32 ) }
    dend_23 { pt3dadd( -54.0085, -85.7062, -52.3642, 0.32 ) }
    dend_23 { pt3dadd( -55.1383, -89.2177, -52.8751, 0.32 ) }
    dend_23 { pt3dadd( -55.6724, -90.9227, -53.0776, 0.32 ) }
    dend_23 { pt3dadd( -56.5401, -93.7869, -53.3025, 0.32 ) }
    dend_23 { pt3dadd( -56.827, -94.7414, -53.322, 0.32 ) }
    dend_23 { pt3dadd( -57.2992, -96.3661, -53.2767, 0.32 ) }
    dend_23 { pt3dadd( -57.8765, -98.6856, -53.5168, 0.16 ) }
    dend_23 { pt3dadd( -58.5311, -101.118, -54.0016, 0.16 ) }
    dend_23 { pt3dadd( -58.8786, -102.411, -54.3228, 0.16 ) }
    dend_23 { pt3dadd( -59.5596, -104.595, -54.9338, 0.16 ) }
    dend_23 { pt3dadd( -60.4167, -107.068, -55.5731, 0.16 ) }
    dend_23 { pt3dadd( -63.065, -113.887, -57.1643, 0.16 ) }
    dend_23 { pt3dadd( -63.939, -115.904, -57.7074, 0.16 ) }
    dend_23 { pt3dadd( -65.8212, -119.715, -58.804, 0.16 ) }
    dend_23 { pt3dadd( -67.3257, -122.423, -59.5912, 0.16 ) }
    dend_23 { pt3dadd( -68.7441, -124.817, -60.3547, 0.16 ) }
    dend_23 { pt3dadd( -70.3729, -127.603, -61.2178, 0.16 ) }
    dend_23 { pt3dadd( -72.5754, -131.342, -62.3411, 0.16 ) }
    dend_23 { pt3dadd( -73.6356, -133.275, -62.9909, 0.16 ) }
    dend_23 { pt3dadd( -74.1796, -134.228, -63.3389, 0.16 ) }
    dend_23 { pt3dadd( -76.4987, -138.48, -64.8908, 0.16 ) }
    dend_23 { pt3dadd( -77.8398, -140.772, -65.7113, 0.16 ) }
    dend_23 { pt3dadd( -79.3203, -143.296, -66.4806, 0.16 ) }
    dend_23 { pt3dadd( -80.4315, -145.163, -66.8672, 0.16 ) }
    dend_23 { pt3dadd( -82.0174, -147.692, -67.3613, 0.16 ) }
    dend_23 { pt3dadd( -82.7603, -148.711, -67.5159, 0.16 ) }
    dend_23 { pt3dadd( -84.4456, -150.434, -67.5159, 0.16 ) }
    // Section: dend_22, id: dend_22, parent: dend_21 (entry count 58/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( -32.8917, -52.1419, -48.0346, 0.65 ) }
    dend_22 { pt3dadd( -35.1183, -54.5074, -51.2896, 0.65 ) }
    dend_22 { pt3dadd( -36.4261, -55.8507, -52.8522, 0.65 ) }
    dend_22 { pt3dadd( -41.1525, -60.8077, -58.1055, 0.49 ) }
    dend_22 { pt3dadd( -42.5563, -62.3502, -59.5276, 0.49 ) }
    dend_22 { pt3dadd( -44.1113, -64.0631, -60.9065, 0.49 ) }
    dend_22 { pt3dadd( -44.7448, -64.7342, -61.3442, 0.49 ) }
    dend_22 { pt3dadd( -46.613, -66.7198, -62.3055, 0.49 ) }
    dend_22 { pt3dadd( -47.522, -67.6108, -62.6715, 0.49 ) }
    dend_22 { pt3dadd( -49.3745, -69.2576, -63.2668, 0.49 ) }
    dend_22 { pt3dadd( -51.2061, -70.7467, -63.9933, 0.49 ) }
    dend_22 { pt3dadd( -55.4127, -73.7447, -65.7437, 0.32 ) }
    dend_22 { pt3dadd( -57.7184, -75.1258, -66.6562, 0.32 ) }
    dend_22 { pt3dadd( -60.4108, -76.4608, -67.6639, 0.32 ) }
    dend_22 { pt3dadd( -64.3104, -78.0476, -69.0119, 0.32 ) }
    dend_22 { pt3dadd( -67.4513, -79.0337, -70.0255, 0.32 ) }
    dend_22 { pt3dadd( -70.8176, -79.7268, -71.0461, 0.32 ) }
    dend_22 { pt3dadd( -74.0851, -80.1062, -72.037, 0.32 ) }
    dend_22 { pt3dadd( -75.9931, -80.2747, -72.6524, 0.32 ) }
    dend_22 { pt3dadd( -77.9194, -80.3933, -73.2581, 0.32 ) }
    dend_22 { pt3dadd( -81.3667, -80.5238, -74.2611, 0.32 ) }
    dend_22 { pt3dadd( -85.5462, -80.5888, -75.7025, 0.32 ) }
    dend_22 { pt3dadd( -88.1986, -80.6169, -76.8103, 0.32 ) }
    dend_22 { pt3dadd( -95.0296, -80.7072, -80.1813, 0.32 ) }
    // Section: dend_9, id: dend_9, parent: dend_7 (entry count 82/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -106.284, 41.1051, 49.8591, 0.16 ) }
    dend_9 { pt3dadd( -112.337, 38.1302, 57.2421, 0.16 ) }
    dend_9 { pt3dadd( -117.223, 35.3031, 65.4964, 0.16 ) }
    dend_9 { pt3dadd( -122.983, 33.9629, 73.5599, 0.16 ) }
    dend_9 { pt3dadd( -128.715, 34.2492, 81.7491, 0.16 ) }
    dend_9 { pt3dadd( -134.935, 32.7466, 89.4342, 0.16 ) }
    dend_9 { pt3dadd( -140.81, 30.1569, 97.1004, 0.16 ) }
    dend_9 { pt3dadd( -146.905, 25.766, 103.702, 0.16 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 90/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -106.284, 41.1051, 49.8591, 0.16 ) }
    dend_8 { pt3dadd( -111.899, 38.6121, 57.7489, 0.16 ) }
    dend_8 { pt3dadd( -115.956, 36.5636, 66.6566, 0.16 ) }
    dend_8 { pt3dadd( -122.104, 34.7804, 74.3389, 0.16 ) }
    dend_8 { pt3dadd( -129.846, 34.3213, 80.652, 0.16 ) }
    dend_8 { pt3dadd( -137.055, 32.5944, 87.3639, 0.16 ) }
    dend_8 { pt3dadd( -144.122, 32.2235, 94.4287, 0.16 ) }
    dend_8 { pt3dadd( -150.913, 31.9344, 101.764, 0.16 ) }
    // Section: dend_6, id: dend_6, parent: dend_4 (entry count 98/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -88.4438, 66.6526, -6.66576, 0.49 ) }
    dend_6 { pt3dadd( -90.2431, 65.7755, -7.24861, 0.49 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_6 { pt3dadd( -91.24, 65.295, -7.6212, 0.49 ) }
    dend_6 { pt3dadd( -92.3678, 64.7622, -8.02884, 0.49 ) }
    dend_6 { pt3dadd( -93.2107, 64.3835, -8.36432, 0.32 ) }
    dend_6 { pt3dadd( -95.5704, 63.4121, -9.27596, 0.32 ) }
    dend_6 { pt3dadd( -97.6016, 62.7011, -10.0081, 0.32 ) }
    dend_6 { pt3dadd( -99.4568, 62.1703, -10.5867, 0.32 ) }
    dend_6 { pt3dadd( -101.061, 61.7661, -11.1449, 0.32 ) }
    dend_6 { pt3dadd( -103.468, 61.2361, -11.9898, 0.32 ) }
    dend_6 { pt3dadd( -105.449, 60.8638, -12.6364, 0.32 ) }
    dend_6 { pt3dadd( -107.46, 60.5833, -13.2132, 0.32 ) }
    dend_6 { pt3dadd( -107.837, 60.5381, -13.31, 0.32 ) }
    dend_6 { pt3dadd( -110.869, 60.3267, -13.9165, 0.32 ) }
    dend_6 { pt3dadd( -113.634, 60.2759, -14.3768, 0.32 ) }
    dend_6 { pt3dadd( -116.404, 60.4652, -14.5171, 0.32 ) }
    dend_6 { pt3dadd( -118.087, 60.644, -14.5191, 0.32 ) }
    dend_6 { pt3dadd( -119.607, 60.8604, -14.4685, 0.32 ) }
    dend_6 { pt3dadd( -122.121, 61.3479, -14.3186, 0.32 ) }
    dend_6 { pt3dadd( -125.115, 62.0657, -14.0474, 0.32 ) }
    dend_6 { pt3dadd( -133.449, 64.283, -13.274, 0.32 ) }
    dend_6 { pt3dadd( -135.002, 64.739, -13.1062, 0.32 ) }
    dend_6 { pt3dadd( -137.38, 65.5837, -12.8227, 0.32 ) }
    dend_6 { pt3dadd( -141.149, 67.2202, -12.3358, 0.32 ) }
    dend_6 { pt3dadd( -142.493, 67.9422, -12.1479, 0.32 ) }
    dend_6 { pt3dadd( -144.715, 69.5632, -11.817, 0.32 ) }
    dend_6 { pt3dadd( -146.791, 71.8544, -11.5307, 0.32 ) }
    dend_6 { pt3dadd( -148.914, 75.0204, -11.1838, 0.32 ) }
    dend_6 { pt3dadd( -149.623, 76.5187, -11.0738, 0.32 ) }
    dend_6 { pt3dadd( -150.291, 78.7208, -11.0006, 0.32 ) }
    dend_6 { pt3dadd( -150.82, 81.2712, -10.9969, 0.32 ) }
    dend_6 { pt3dadd( -151.007, 82.596, -11.0909, 0.32 ) }
    dend_6 { pt3dadd( -151.233, 84.3839, -11.3479, 0.32 ) }
    dend_6 { pt3dadd( -151.571, 86.6679, -11.7757, 0.32 ) }
    dend_6 { pt3dadd( -152.236, 89.9842, -12.5568, 0.32 ) }
    dend_6 { pt3dadd( -152.534, 91.0838, -12.8888, 0.32 ) }
    dend_6 { pt3dadd( -153.542, 94.0091, -13.9065, 0.32 ) }
    dend_6 { pt3dadd( -154.096, 95.33, -14.4491, 0.32 ) }
    dend_6 { pt3dadd( -154.568, 96.2953, -14.8623, 0.32 ) }
    dend_6 { pt3dadd( -155.33, 97.7796, -15.504, 0.32 ) }
    dend_6 { pt3dadd( -156.305, 99.6424, -16.2993, 0.32 ) }
    dend_6 { pt3dadd( -157.089, 101.062, -16.8318, 0.32 ) }
    dend_6 { pt3dadd( -158.403, 103.516, -17.6372, 0.32 ) }
    dend_6 { pt3dadd( -159.737, 106.18, -18.46, 0.32 ) }
    dend_6 { pt3dadd( -160.401, 107.604, -18.8525, 0.32 ) }
    dend_6 { pt3dadd( -161.262, 109.687, -19.3225, 0.32 ) }
    dend_6 { pt3dadd( -162.251, 112.299, -19.8112, 0.32 ) }
    dend_6 { pt3dadd( -162.843, 113.938, -20.064, 0.32 ) }
    dend_6 { pt3dadd( -163.18, 114.93, -20.1302, 0.32 ) }
    dend_6 { pt3dadd( -163.559, 116.049, -20.2055, 0.32 ) }
    dend_6 { pt3dadd( -163.918, 116.975, -20.2499, 0.65 ) }
    dend_6 { pt3dadd( -164.169, 117.595, -20.2768, 0.16 ) }
    dend_6 { pt3dadd( -164.992, 119.644, -20.3385, 0.81 ) }
    dend_6 { pt3dadd( -165.607, 121.013, -20.353, 0.16 ) }
    dend_6 { pt3dadd( -166.217, 122.25, -20.383, 0.16 ) }
    dend_6 { pt3dadd( -167.552, 124.8, -20.4664, 0.16 ) }
    dend_6 { pt3dadd( -168.183, 125.936, -20.5172, 0.16 ) }
    dend_6 { pt3dadd( -169.428, 128.063, -20.6536, 0.16 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 56/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -88.4438, 66.6526, -6.66576, 0.32 ) }
    dend_5 { pt3dadd( -90.591, 66.6652, -6.8704, 0.32 ) }
    dend_5 { pt3dadd( -91.9793, 66.5324, -6.97237, 0.32 ) }
    dend_5 { pt3dadd( -94.0729, 66.2681, -7.29138, 0.32 ) }
    dend_5 { pt3dadd( -97.0381, 65.8724, -8.02425, 0.32 ) }
    dend_5 { pt3dadd( -98.2391, 65.6836, -8.36919, 0.32 ) }
    dend_5 { pt3dadd( -100.213, 65.3344, -8.94184, 0.16 ) }
    dend_5 { pt3dadd( -102.133, 64.9228, -9.51649, 0.16 ) }
    dend_5 { pt3dadd( -104.29, 64.4173, -10.097, 0.16 ) }
    dend_5 { pt3dadd( -106.971, 63.8864, -10.7088, 0.16 ) }
    dend_5 { pt3dadd( -108.199, 63.6904, -10.9321, 0.16 ) }
    dend_5 { pt3dadd( -111.154, 63.4556, -11.332, 0.16 ) }
    dend_5 { pt3dadd( -113.539, 63.4129, -11.4467, 0.16 ) }
    dend_5 { pt3dadd( -117.1, 63.5739, -11.2874, 0.16 ) }
    dend_5 { pt3dadd( -120.071, 63.9789, -10.848, 0.16 ) }
    dend_5 { pt3dadd( -121.324, 64.2133, -10.5781, 0.16 ) }
    dend_5 { pt3dadd( -123.952, 64.8913, -9.93305, 0.16 ) }
    dend_5 { pt3dadd( -125.833, 65.5575, -9.3686, 0.16 ) }
    dend_5 { pt3dadd( -127.131, 66.1085, -8.91986, 0.16 ) }
    dend_5 { pt3dadd( -129.538, 67.371, -8.50006, 0.16 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_14, dend_11, dend_0, dend_18, dend_15, dend_13, dend_12, dend_2, dend_1, dend_24, dend_19, dend_17, dend_16, dend_10, dend_3, dend_21, dend_20, dend_7, dend_4, dend_23, dend_22, dend_9, dend_8, dend_6, dend_5]}
    ModelViewParmSubset_2 = new SectionList()
    dend_14 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_23 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_14, dend_11, dend_0, dend_18, dend_15, dend_13, dend_12, dend_2, dend_1, dend_24, dend_19, dend_17, dend_16, dend_10, dend_3, dend_21, dend_20, dend_7, dend_4, dend_23, dend_22, dend_9, dend_8, dend_6, dend_5]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_14 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_18 ModelViewParmSubset_4.append()
    dend_15 ModelViewParmSubset_4.append()
    dend_13 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_24 ModelViewParmSubset_4.append()
    dend_19 ModelViewParmSubset_4.append()
    dend_17 ModelViewParmSubset_4.append()
    dend_16 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_21 ModelViewParmSubset_4.append()
    dend_20 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_23 ModelViewParmSubset_4.append()
    dend_22 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()

    // Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_14, dend_11, dend_0, axon_0, dend_18, dend_15, dend_13, dend_12, dend_2, dend_1, axon_1, dend_24, dend_19, dend_17, dend_16, dend_10, dend_3, dend_21, dend_20, dend_7, dend_4, dend_23, dend_22, dend_9, dend_8, dend_6, dend_5]}
    ModelViewParmSubset_5 = new SectionList()
    dend_14 ModelViewParmSubset_5.append()
    dend_11 ModelViewParmSubset_5.append()
    dend_0 ModelViewParmSubset_5.append()
    axon_0 ModelViewParmSubset_5.append()
    dend_18 ModelViewParmSubset_5.append()
    dend_15 ModelViewParmSubset_5.append()
    dend_13 ModelViewParmSubset_5.append()
    dend_12 ModelViewParmSubset_5.append()
    dend_2 ModelViewParmSubset_5.append()
    dend_1 ModelViewParmSubset_5.append()
    axon_1 ModelViewParmSubset_5.append()
    dend_24 ModelViewParmSubset_5.append()
    dend_19 ModelViewParmSubset_5.append()
    dend_17 ModelViewParmSubset_5.append()
    dend_16 ModelViewParmSubset_5.append()
    dend_10 ModelViewParmSubset_5.append()
    dend_3 ModelViewParmSubset_5.append()
    dend_21 ModelViewParmSubset_5.append()
    dend_20 ModelViewParmSubset_5.append()
    dend_7 ModelViewParmSubset_5.append()
    dend_4 ModelViewParmSubset_5.append()
    dend_23 ModelViewParmSubset_5.append()
    dend_22 ModelViewParmSubset_5.append()
    dend_9 ModelViewParmSubset_5.append()
    dend_8 ModelViewParmSubset_5.append()
    dend_6 ModelViewParmSubset_5.append()
    dend_5 ModelViewParmSubset_5.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_15 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_13 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_12 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_1 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_24 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_17 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_16 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_10 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_3 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_21 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_20 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_7 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_23 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_22 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_9 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_8 OneSecGrp_SectionRef_26.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_6 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_5 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_14 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_0 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_18 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_19 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_11 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_2 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_4 OneSecGrp_SectionRef_22.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_19, dend_19, dend_19, dend_19, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_23, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_22, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_9 all.append()
    dend_9 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.993125  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.0  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.005611  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.068459995  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.517764  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 6.3E-5  // units: S cm-2
        e_pas_nml2 = -64.6017  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 3.45E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.077616  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.002099  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 1.13999995E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.26087198  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-5  // units: S cm-2
        e_pas_nml2 = -69.78141  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 3.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.395881  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009986  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 5.0100003E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009728  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 2.7999999E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cACint_237_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cACint_237_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_15 nseg = 3
    dend_13 nseg = 3
    dend_12 nseg = 3
    dend_1 nseg = 3
    dend_24 nseg = 11
    dend_17 nseg = 11
    dend_16 nseg = 11
    dend_10 nseg = 11
    dend_3 nseg = 3
    dend_21 nseg = 3
    dend_20 nseg = 5
    dend_7 nseg = 3
    dend_23 nseg = 5
    dend_22 nseg = 5
    dend_9 nseg = 3
    dend_8 nseg = 3
    dend_6 nseg = 7
    dend_5 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cACint209_L5_MC_fdc7bd1d07_0_0


