// Cell: dNAC222_L5_LBC_58bb1b2407_0_0
/*
{
  "id" : "dNAC222_L5_LBC_58bb1b2407_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-4.47353, -9.82937, -0.0150783, 3.11345", "-4.06901, -8.79368, -0.0135938, 5.39642", "-3.66449, -7.75799, -0.0121094, 6.72082", "-3.25998, -6.72231, -0.0106249, 7.70122", "-2.85546, -5.68662, -0.00914047, 8.43968", "-2.45095, -4.65093, -0.00765602, 9.25919", "-2.04643, -3.61524, -0.00617157, 10.0787", "-1.64192, -2.57956, -0.00468712, 10.8982", "-1.2374, -1.54387, -0.00320267, 11.7151", "-0.832884, -0.508183, -0.00171822, 12.3073", "-0.428368, 0.527504, -2.33766E-4, 12.0741", "-0.023852, 1.56319, 0.00125068, 11.8342", "0.380664, 2.59888, 0.00273513, 11.5616", "0.78518, 3.63457, 0.00421958, 11.0624", "1.1897, 4.67025, 0.00570403, 10.5822", "1.59421, 5.70594, 0.00718848, 10.0942", "1.99873, 6.74163, 0.00867293, 9.27653", "2.40324, 7.77731, 0.0101574, 7.88308", "2.80776, 8.813, 0.0116418, 6.37032", "3.21227, 9.84869, 0.0131263, 4.97817", "3.61679, 10.8844, 0.0146107, 4.57234" ]
  }, {
    "name" : "dend_23",
    "id" : "dend_23",
    "points3d" : [ "0.0120471, -7.9079, 1.51098, 1.08", "2.85461, -12.8983, 1.07936, 1.08", "5.08406, -16.8124, 0.740839, 1.08", "6.61855, -19.5063, 0.50784, 1.08" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796
  }, {
    "name" : "dend_20",
    "id" : "dend_20",
    "points3d" : [ "-4.41795, -8.6489, -0.0190242, 1.08", "-3.82464, -9.23456, -0.0273887, 1.08", "-0.155951, -12.4839, -0.0926749, 1.08", "1.39585, -13.96, -0.120337, 1.08", "3.89002, -16.3537, -0.162383, 1.08", "8.17805, -20.657, -0.231826, 1.08", "11.3396, -23.91, -0.279298, 1.08", "11.5089, -24.1023, -0.281948, 1.08", "16.6673, -31.0441, -0.414213, 1.08", "18.1917, -33.4647, -0.51163, 1.08", "19.4309, -35.8582, -0.651826, 1.08", "20.7048, -39.7369, -0.925458, 1.08", "21.7413, -44.9431, -1.31413, 1.08", "22.2381, -49.5185, -1.68125, 1.08", "22.1893, -51.2798, -1.83216, 1.08", "22.0858, -53.4982, -2.00185, 1.08", "21.8775, -59.0255, -2.3839, 1.08", "21.9396, -62.3402, -2.5785, 1.08", "22.2915, -65.2516, -2.84637, 1.08", "22.8986, -69.0809, -3.33778, 1.08", "23.9105, -74.2484, -4.10764, 1.08", "24.0169, -74.8191, -4.21048, 1.08", "24.8038, -78.5691, -4.99983, 1.08", "26.0745, -83.3019, -6.04672, 1.08", "27.0974, -86.9573, -6.80065, 1.08", "28.9045, -92.6626, -8.06138, 1.08", "29.7706, -95.4598, -8.67712, 1.08", "30.2098, -97.0288, -8.99514, 1.08", "31.1837, -101.003, -9.76312, 1.08", "32.8888, -107.004, -10.7383, 1.08", "34.1178, -111.49, -11.5144, 0.81", "34.5966, -113.053, -11.8011, 0.81", "35.467, -115.934, -12.4553, 0.81", "36.3474, -118.938, -13.1906, 0.81", "37.0581, -121.946, -13.9278, 0.81", "38.1513, -126.926, -15.1328, 0.81", "40.1794, -136.049, -17.3914, 0.81", "41.3569, -140.283, -18.5128, 0.81", "42.6259, -144.288, -19.5409, 0.81", "44.1021, -148.544, -20.5386, 0.81", "44.1975, -148.783, -20.5966, 0.81", "46.4051, -153.454, -21.7415, 0.81", "47.6743, -156.129, -22.3234, 0.81", "51.3771, -162.738, -23.4807, 0.81", "54.0129, -167.013, -24.2429, 0.81", "55.7658, -169.673, -24.7519, 0.81", "55.9028, -169.896, -24.793, 0.81", "57.3961, -172.765, -25.2434, 0.81", "60.5715, -179.634, -26.4884, 0.81", "60.5887, -179.679, -26.4966, 0.81", "61.0777, -182.142, -26.8534, 0.81", "61.3157, -183.884, -27.037, 0.81", "61.8069, -188.043, -27.4112, 0.81", "61.971, -189.23, -27.5057, 0.81", "62.796, -196.369, -28.1152, 0.81", "63.2861, -199.957, -28.5919, 0.81", "63.9434, -204.005, -29.2491, 0.81", "64.9009, -209.919, -30.6733, 0.81", "65.5331, -213.488, -31.7843, 0.81", "66.2428, -217.356, -33.2775, 0.81", "67.1629, -222.209, -35.5416, 0.81", "67.1733, -222.26, -35.5687, 0.81", "67.9342, -227.514, -38.7798, 0.81", "68.2103, -230.26, -40.7287, 0.81", "68.2717, -232.695, -42.5133, 0.27" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "-6.04795, -7.64465, 1.45098, 1.08", "-6.20733, -11.1196, 0.201887, 1.08", "-6.42784, -15.9276, -1.52635, 1.35", "-6.78448, -23.7035, -4.32141, 1.35", "-6.92256, -26.7141, -5.40357, 1.35", "-6.93394, -26.9623, -5.49279, 1.35" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-2.31794, 6.9121, 2.93098, 1.89", "-4.52758, 8.01594, 2.93098, 1.89", "-7.55865, 9.53014, 2.93098, 1.89" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "-0.377952, 8.4331, 1.46098, 1.41", "-3.13985, 9.55062, 2.35354, 1.41", "-5.98437, 10.7016, 3.2728, 1.23", "-8.81952, 11.8487, 4.18903, 1.23" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "4.75205, 10.9876, -2.91902, 1.11", "4.84523, 12.7247, -3.01537, 1.11", "5.68448, 17.3765, -3.37105, 1.11", "7.01773, 21.8614, -3.73473, 1.11", "8.20647, 24.4006, -3.92682, 1.11", "10.6752, 28.8718, -4.4887, 1.11", "13.5368, 33.979, -5.34243, 1.11", "15.2568, 36.6917, -5.87922, 1.11", "18.7607, 41.5811, -7.05691, 1.67", "24.0609, 48.7956, -9.03584, 1.11", "26.2982, 51.8333, -9.88807, 1.11", "28.3798, 54.7618, -10.756, 1.11", "30.5626, 58.1025, -11.7396, 1.11", "33.7394, 63.0932, -13.0771, 1.11", "36.5889, 67.616, -14.4206, 1.11", "38.8583, 71.3332, -15.5275, 1.11", "41.6298, 75.6774, -16.7269, 1.11", "42.6502, 77.2662, -17.1605, 1.11", "46.5629, 83.4649, -18.9188, 1.11", "49.2391, 87.7108, -20.0751, 1.11", "49.9387, 88.8448, -20.3838, 1.11", "51.2774, 91.2414, -21.0083, 1.11", "53.9221, 96.1658, -22.3196, 1.11", "56.9433, 101.955, -23.8696, 1.11", "58.889, 105.957, -24.9613, 1.11", "61.0265, 110.048, -26.0302, 1.11", "62.9753, 113.635, -27.0606, 1.11", "64.6624, 116.84, -28.0859, 1.06", "65.5961, 118.634, -28.7774, 0.53", "66.3073, 120.369, -29.5079, 0.35", "67.2447, 123.244, -30.8939, 0.35", "67.2997, 123.459, -31.0083, 0.35", "67.9706, 127.7, -33.1608, 0.35", "68.1125, 129.053, -33.8722, 0.35", "68.3343, 131.306, -35.1425, 0.35", "68.6642, 134.355, -36.844, 0.35", "68.9216, 136.304, -37.9493, 0.35", "69.4338, 138.824, -39.4267, 0.35", "70.2534, 141.57, -41.0513, 0.35", "70.658, 142.873, -41.7788, 0.35", "71.153, 144.463, -42.6418, 0.35", "71.7708, 146.709, -43.789, 0.35", "72.2438, 148.578, -44.7066, 0.35", "72.6213, 149.968, -45.4018, 0.35", "72.8349, 150.918, -45.7978, 1.23", "72.8965, 151.222, -45.9447, 1.23", "73.2453, 153.093, -46.9912, 0.18", "73.5879, 154.423, -47.8766, 0.18", "73.9537, 155.414, -48.5799, 0.18", "74.5077, 156.716, -49.5987, 1.23", "75.1087, 157.84, -50.4297, 0.18", "75.3398, 158.223, -50.6582, 0.18", "77.0233, 160.425, -51.691, 0.18", "77.466, 160.949, -51.9246, 0.88", "77.7595, 161.262, -52.061, 0.18", "79.4521, 162.951, -52.7145, 0.18", "81.0118, 164.536, -53.1512, 0.18", "83.3601, 166.873, -53.6209, 1.06", "83.6104, 167.11, -53.643, 1.06" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999957196365796,
    "numberInternalDivisions" : 9
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "3.61679, 10.8844, 0.0146107, 0.81", "9.07397, 24.8565, 0.0146107, 0.81", "14.5311, 38.8286, 0.0146107, 0.81" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_25",
    "id" : "dend_25",
    "points3d" : [ "6.61855, -19.5063, 0.50784, 1.08", "11.7386, -19.2431, 0.50784, 1.08", "21.6077, -17.768, 1.06688, 1.08", "31.6033, -17.6968, 1.35322, 1.08", "41.5501, -18.2926, 0.524237, 1.08", "51.5052, -18.1979, 1.46634, 1.08", "61.3698, -16.7243, 2.10219, 1.08", "70.8895, -14.055, 3.47359, 1.08", "80.265, -12.4989, 6.56449, 1.08", "88.9077, -9.4091, 10.4708, 1.08", "97.6105, -5.72315, 13.6283, 1.08", "106.46, -1.82637, 16.019, 1.08", "115.073, 2.61316, 18.2712, 1.08", "124.717, 5.12771, 18.8657, 1.08", "133.643, 8.96672, 21.0619, 1.08", "142.174, 13.7805, 22.7464, 1.08", "150.328, 19.3697, 23.5511, 1.08", "159.262, 23.3195, 25.4978, 1.08", "168.403, 25.2961, 29.0093, 1.08", "178.032, 26.0307, 31.5996, 1.08", "187.117, 27.2352, 35.5921, 1.08", "196.833, 26.7247, 37.8968, 1.08" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_24",
    "id" : "dend_24",
    "points3d" : [ "6.61855, -19.5063, 0.50784, 1.08", "8.82094, -23.9514, 0.418982, 1.08", "11.1646, -28.3501, 0.190861, 1.08", "14.0836, -33.0093, -0.231267, 1.08", "16.6346, -36.7811, -0.653597, 1.08", "20.4603, -42.4375, -1.28694, 0.81", "21.8196, -44.4474, -1.51199, 0.81", "23.998, -47.4411, -1.93113, 0.81", "27.0441, -51.4597, -2.73163, 0.81", "27.0847, -51.5009, -2.74498, 0.81" ],
    "parent" : "dend_23",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_22",
    "id" : "dend_22",
    "points3d" : [ "68.2717, -232.695, -42.5133, 0.27", "78.2244, -236.937, -42.5154, 0.27", "91.7103, -242.683, -42.5183, 0.27" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_21",
    "id" : "dend_21",
    "points3d" : [ "68.2717, -232.695, -42.5133, 0.27", "68.1621, -236.295, -45.6809, 0.27", "67.9972, -241.255, -50.1965, 0.27", "67.8185, -246.053, -54.5082, 0.27", "67.6791, -249.799, -57.8747, 0.27", "67.4986, -254.645, -62.2285, 0.27", "67.1745, -263.351, -70.0519, 0.27", "67.161, -263.543, -70.2354, 0.27", "67.1048, -265.117, -71.6953, 0.27" ],
    "parent" : "dend_20",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-6.93394, -26.9623, -5.49279, 1.08", "-8.99333, -29.2638, -5.35445, 1.08", "-11.7519, -32.3466, -5.16914, 1.08", "-14.6048, -35.5347, -4.97749, 1.08", "-18.8555, -40.285, -4.69194, 1.08", "-20.9922, -42.6729, -4.54841, 1.08", "-23.3851, -45.347, -4.38767, 1.08" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "-6.93394, -26.9623, -5.49279, 0.27", "-8.64595, -30.7368, -6.11486, 0.27", "-9.1896, -33.9735, -6.47427, 0.54", "-9.23779, -34.7161, -6.50233, 1.08", "-9.24712, -34.9792, -6.50649, 1.08", "-9.44353, -38.9783, -6.60574, 1.08", "-9.5585, -40.826, -6.65792, 1.08", "-9.86025, -46.9491, -6.80593, 1.08", "-10.1328, -52.6704, -7.07674, 1.08", "-10.1404, -52.933, -7.09364, 1.08", "-10.0637, -57.7775, -7.48303, 1.08", "-9.84695, -60.4316, -7.74906, 1.08", "-9.76595, -62.4082, -7.96538, 1.08", "-9.81275, -64.2851, -8.19031, 1.08", "-9.68532, -66.8518, -8.46668, 1.08", "-9.44923, -69.9041, -8.7087, 1.08", "-9.34916, -72.0142, -8.79237, 1.08", "-9.34341, -78.9581, -8.98499, 1.08", "-9.39783, -80.2878, -9.05919, 1.08", "-9.54282, -86.0841, -9.55466, 1.08", "-9.56556, -86.6692, -9.61653, 1.08", "-9.79545, -93.0721, -10.4092, 1.08", "-9.85925, -97.0134, -10.9583, 1.08", "-9.60445, -101.055, -11.5536, 1.08", "-9.52567, -107.165, -12.5751, 1.08", "-9.52741, -107.414, -12.6222, 1.08", "-9.51922, -108.471, -12.8311, 1.08", "-9.42907, -112.155, -13.5964, 1.08", "-9.25195, -120.5, -15.2117, 1.08", "-9.36357, -126.968, -16.2315, 1.08", "-9.54535, -132.119, -16.9099, 1.08", "-9.66703, -135.948, -17.3023, 1.08", "-9.66764, -136.006, -17.3061, 1.08", "-9.66722, -140.741, -17.4247, 1.08", "-9.40272, -147.119, -17.2749, 1.08", "-9.02486, -152.289, -16.9771, 1.08", "-8.78916, -156.674, -16.6276, 0.81", "-8.52583, -161.256, -16.303, 0.81", "-8.35361, -164.545, -16.1217, 0.81", "-7.58009, -173.914, -15.9468, 0.81", "-6.99103, -179.195, -16.0239, 0.81", "-6.78345, -181.013, -16.0981, 0.81", "-6.21806, -186.422, -16.2861, 0.81", "-5.92089, -190.068, -16.3371, 0.81", "-5.41753, -200.758, -16.1819, 0.81", "-5.49772, -203.758, -16.1401, 0.81", "-5.51314, -204.021, -16.1366, 0.81", "-6.11564, -209.816, -16.0571, 0.81", "-6.82355, -214.236, -15.9335, 0.81", "-7.98991, -219.158, -15.8197, 0.81", "-9.68559, -224.752, -15.5909, 0.81", "-10.2977, -226.788, -15.5231, 0.81", "-11.5674, -231.34, -15.4103, 0.81", "-12.5397, -234.931, -15.3786, 0.81", "-13.9046, -239.801, -15.4002, 0.81", "-15.6314, -246.773, -15.3509, 0.81", "-16.908, -252.155, -15.2351, 0.81", "-17.9704, -256.805, -15.1991, 0.81", "-19.3707, -262.88, -15.1516, 0.81", "-20.0288, -265.925, -15.1397, 0.81", "-20.6886, -269.393, -15.1661, 0.81", "-21.5581, -274.01, -15.3072, 0.81", "-22.0312, -278.832, -15.3685, 0.81", "-22.0398, -280.635, -15.3524, 0.81", "-22.0155, -281.006, -15.3388, 1.08", "-21.9887, -281.376, -15.3099, 1.08", "-21.5487, -286.076, -14.9326, 0.54", "-20.6615, -293.008, -14.4017, 0.54", "-20.1921, -296.734, -14.1639, 0.54", "-19.7393, -300.591, -13.9759, 0.54", "-19.529, -303.12, -13.8522, 0.54", "-19.3755, -306.761, -13.6585, 0.54", "-19.4102, -309.109, -13.4794, 0.54", "-19.7199, -314.329, -12.9715, 0.54", "-19.9429, -316.803, -12.7021, 0.54", "-20.1921, -319.77, -12.3739, 0.54", "-20.504, -321.78, -12.1728, 0.54", "-21.3243, -326.192, -11.7389, 0.54", "-21.3369, -326.259, -11.7319, 0.54", "-21.5514, -327.316, -11.5984, 0.54", "-22.1856, -330.921, -11.1393, 0.54", "-22.8551, -335.485, -10.5666, 0.54", "-23.8359, -341.937, -9.82575, 0.54", "-24.5971, -347.717, -9.24864, 0.54", "-25.0029, -350.924, -8.91961, 0.54", "-25.538, -355.418, -8.593, 0.54", "-25.6191, -356.203, -8.55777, 0.54", "-25.9723, -360.656, -8.47325, 0.54", "-26.5994, -365.94, -8.6468, 0.54", "-27.27, -371.96, -9.08056, 0.54", "-27.801, -376.453, -9.54555, 0.54", "-28.3743, -380.72, -10.0588, 0.54", "-28.4728, -381.497, -10.1621, 0.54", "-28.9992, -386.309, -10.9975, 0.54" ],
    "parent" : "dend_13",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 19
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-7.55865, 9.53014, 2.93098, 0.81", "-8.16371, 11.1768, 3.18013, 0.81", "-9.52893, 14.8125, 3.72048, 1.08", "-12.4446, 19.8136, 4.414, 1.08", "-13.2033, 20.915, 4.54423, 1.08", "-15.4047, 24.3323, 4.85493, 1.08", "-15.4363, 24.3819, 4.8584, 1.08", "-17.7923, 27.7901, 4.97978, 1.08", "-21.3382, 32.9942, 5.01873, 1.08", "-22.8004, 35.457, 4.89447, 1.08", "-25.8665, 40.9959, 4.38406, 1.08", "-28.7786, 46.4511, 3.64995, 1.08", "-30.4377, 49.5298, 3.17501, 1.08", "-32.7881, 53.9334, 2.41176, 1.08", "-34.5859, 57.3069, 1.76289, 1.08", "-34.7971, 57.6104, 1.69728, 1.08", "-35.6138, 58.4541, 1.49215, 1.08", "-40.0066, 62.3215, 0.60257, 1.08", "-43.4968, 65.0044, 0.0408821, 1.08", "-47.0512, 67.2832, -0.415998, 1.08", "-50.2334, 69.196, -0.728257, 1.08", "-52.1846, 70.3506, -0.926495, 1.08", "-53.9186, 71.6042, -1.11542, 1.08", "-56.7571, 74.0327, -1.41366, 1.08", "-59.0963, 76.45, -1.62595, 1.08", "-59.2672, 76.6403, -1.64287, 1.08", "-62.3753, 80.5306, -1.97503, 1.08", "-66.7254, 86.5494, -2.66545, 1.08", "-70.3325, 91.6755, -3.31194, 1.08", "-73.5555, 96.4688, -4.06188, 1.08", "-76.8638, 101.807, -4.92282, 1.08", "-80.3607, 107.818, -5.87804, 1.08", "-83.4794, 113.759, -6.89321, 1.08", "-85.973, 118.57, -7.8482, 1.08", "-87.2779, 121.441, -8.43645, 1.08", "-89.6313, 126.556, -9.43171, 1.08", "-91.8405, 131.995, -10.2717, 1.08", "-93.9825, 136.847, -10.8473, 0.81", "-95.7253, 140.239, -11.0513, 0.81", "-97.9786, 144.342, -11.1791, 0.81", "-99.9319, 147.339, -11.1675, 0.81", "-101.646, 149.605, -11.1574, 0.54", "-105.656, 154.413, -10.9641, 0.54", "-109.893, 159.07, -10.5169, 1.08", "-110.636, 159.872, -10.4126, 1.08", "-113.044, 162.336, -10.1443, 1.08", "-118.404, 168.016, -9.85607, 1.08" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "-7.55865, 9.53014, 2.93098, 1.08", "-11.6583, 4.13665, -2.65374, 1.08", "-14.1264, 0.912819, -5.87185, 0.81", "-17.2331, -3.64612, -10.5728, 1.08", "-18.9045, -6.26975, -13.282, 1.08", "-20.6073, -8.94263, -16.0421, 1.08", "-23.0743, -12.8151, -20.0409, 1.08", "-24.2553, -15.058, -22.0711, 1.08", "-26.0741, -19.4061, -26.3394, 0.54", "-26.3067, -19.9434, -26.9487, 0.54" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-8.81952, 11.8487, 4.18903, 0.53", "-9.99065, 11.8787, 4.33543, 0.53", "-12.6193, 11.946, 4.66401, 0.53", "-12.9665, 11.9549, 4.7074, 0.53", "-14.5526, 11.9955, 4.90567, 0.53", "-16.4671, 12.0446, 5.14497, 0.53", "-18.8935, 12.1067, 5.44827, 0.53", "-28.8327, 13.1712, 5.30935, 0.53", "-38.2976, 15.9587, 6.80715, 0.53", "-47.5069, 19.471, 8.29391, 0.53", "-55.4713, 24.5871, 11.2998, 0.53", "-64.0956, 28.9024, 13.7557, 0.53", "-72.4229, 32.9177, 17.4567, 0.53", "-81.105, 35.4579, 21.6795, 0.53", "-90.0032, 38.0886, 25.3598, 0.53", "-99.3344, 39.8084, 28.493, 0.53", "-109.078, 39.9052, 30.7415, 0.53", "-118.43, 41.5656, 33.8464, 0.53", "-127.791, 43.4736, 36.7692, 0.53", "-137.213, 45.9654, 38.9359, 0.53", "-146.884, 46.5855, 41.3996, 0.53", "-156.736, 46.3451, 43.0918, 0.53", "-166.433, 47.7816, 45.0417, 0.53", "-175.893, 50.2815, 47.027, 0.53", "-184.986, 53.6305, 49.3749, 0.53", "-193.779, 56.6733, 52.9733, 0.53", "-202.632, 58.7502, 57.106, 0.53", "-210.367, 60.4855, 63.1896, 0.53", "-217.821, 60.2577, 69.8514, 0.53", "-224.82, 58.7148, 76.8165, 0.53" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-8.81952, 11.8487, 4.18903, 0.53", "-8.67885, 14.0769, 4.87517, 0.53", "-8.65595, 14.4396, 4.98687, 0.53", "-8.44161, 17.8347, 6.03235, 0.53", "-9.50476, 27.3807, 7.76708, 0.53", "-9.79015, 37.0554, 8.97431, 0.53", "-11.3937, 46.4893, 10.9256, 0.53", "-12.3458, 55.5191, 14.5756, 0.53", "-13.087, 65.0621, 16.4865, 0.53", "-13.4044, 74.7058, 17.9244, 0.53", "-12.2979, 84.3825, 17.4006, 0.53", "-10.9928, 93.9364, 15.8916, 0.53", "-9.76415, 103.356, 13.624, 0.53", "-9.80165, 112.372, 9.81689, 0.53", "-9.08929, 121.625, 6.7448, 0.53", "-9.62451, 131.056, 4.2666, 0.53", "-10.6998, 140.188, 0.932549, 0.53", "-11.0087, 149.119, -3.06715, 0.53", "-13.2326, 158.181, -6.012, 0.53", "-17.3966, 166.266, -9.74106, 0.53", "-20.9214, 174.377, -14.0258, 0.53", "-23.5313, 182.259, -19.3022, 0.53", "-24.4286, 190.277, -24.9208, 0.53", "-26.7913, 198.833, -29.0939, 0.53" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "83.6104, 167.11, -53.643, 0.18", "84.1822, 167.489, -53.5456, 0.18", "85.8751, 168.67, -53.2136, 0.18", "88.8762, 170.981, -52.5983, 0.53", "92.3852, 173.653, -52.0522, 0.53", "95.3737, 176.038, -51.6845, 0.35", "98.2397, 178.271, -51.5416, 0.35", "98.6351, 178.585, -51.5494, 0.35", "100.959, 180.525, -51.8734, 0.35", "104.02, 183.011, -52.7, 0.35", "106.519, 184.537, -54.0493, 0.35", "109.434, 185.829, -56.0844, 0.35", "109.61, 185.895, -56.2333, 0.35", "111.463, 186.505, -58.159, 0.18", "113.73, 187.087, -60.7174, 0.18", "117.951, 188.013, -65.9487, 0.18", "118.025, 188.024, -66.0428, 0.18", "119.98, 188.394, -68.5375, 0.53", "123.294, 188.984, -72.8015, 0.53" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "83.6104, 167.11, -53.643, 0.18", "83.6558, 167.941, -53.8847, 0.18", "83.9143, 172.679, -55.2622, 0.18" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "14.5311, 38.8286, 0.0146107, 0.54", "19.9883, 52.8007, 0.0146107, 0.54", "25.4455, 66.7728, 0.0146107, 0.54" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_29",
    "id" : "dend_29",
    "points3d" : [ "196.833, 26.7247, 37.8968, 0.18", "206.245, 29.5035, 36.083, 0.18", "215.211, 33.7511, 35.2895, 0.18", "223.867, 38.4797, 36.5396, 0.18", "231.764, 43.7573, 39.4272, 0.18", "239.824, 47.8131, 43.6378, 0.18" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_26",
    "id" : "dend_26",
    "points3d" : [ "196.833, 26.7247, 37.8968, 0.18", "205.817, 28.6166, 41.8371, 0.18", "214.386, 31.6458, 45.9509, 0.18", "221.837, 33.7273, 52.2692, 0.18", "229.102, 34.0852, 59.1313, 0.18", "236.104, 36.1652, 65.9442, 0.18", "244.361, 38.5316, 71.0373, 0.18", "251.555, 42.1368, 76.9166, 0.18" ],
    "parent" : "dend_25",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-23.3851, -45.347, -4.38767, 1.08", "-26.7063, -46.7724, -2.89678, 1.08", "-29.3428, -47.9713, -1.81607, 0.81", "-32.1572, -49.3501, -0.655182, 0.81", "-34.7989, -50.6442, 0.434499, 0.81", "-37.8782, -52.1527, 1.70466, 0.81", "-41.6387, -53.9949, 3.25581, 0.81", "-43.0924, -54.7566, 3.77085, 0.81", "-45.4614, -55.8711, 4.47142, 0.81", "-53.0277, -61.4858, 7.56821, 0.81", "-60.3332, -67.1524, 11.1529, 0.81", "-67.791, -71.1733, 16.385, 0.81", "-74.2101, -76.3666, 21.9008, 0.81", "-80.2777, -81.8299, 27.5387, 0.81", "-86.5079, -88.5213, 31.2915, 0.81", "-90.8695, -96.4203, 35.2085, 0.81", "-94.5207, -104.523, 39.4037, 0.81", "-99.0166, -112.175, 43.6706, 0.81", "-103.913, -119.541, 48.0238, 0.81", "-108.92, -126.465, 52.9732, 0.81", "-115.748, -131.541, 58.099, 0.81", "-122.788, -135.37, 64.0162, 0.81", "-130.034, -140.274, 68.7273, 0.81", "-137.678, -142.97, 74.5522, 0.81", "-145.92, -145.4, 79.6369, 0.81", "-154.213, -147.201, 84.9101, 0.81", "-161.947, -147.276, 91.2497, 0.81" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-23.3851, -45.347, -4.38767, 0.81", "-26.1465, -49.9706, -5.20751, 0.81", "-28.6256, -54.065, -5.82615, 1.08", "-29.9782, -56.0865, -6.08699, 1.08", "-31.7849, -58.9678, -6.63091, 1.08", "-32.7038, -60.5466, -6.95624, 1.08", "-35.5369, -65.3522, -7.90839, 1.08", "-35.6751, -65.5757, -7.94318, 1.08", "-37.6042, -68.494, -8.53045, 0.81", "-40.653, -73.3543, -9.61477, 0.54", "-42.5341, -76.803, -10.4224, 1.08", "-45.3629, -82.9514, -11.8252, 1.08", "-46.5333, -86.2515, -12.5725, 1.08", "-47.1744, -89.0022, -13.1997, 0.81", "-47.4592, -91.7805, -13.7284, 0.81", "-47.4641, -94.752, -14.1031, 1.08", "-46.8972, -99.9358, -14.7615, 1.08", "-46.1896, -103.534, -15.1851, 0.81", "-45.1687, -109.539, -15.7697, 0.54", "-44.7832, -112.901, -15.9786, 0.54", "-44.6021, -115.975, -16.1467, 0.54", "-44.6266, -119.483, -16.3012, 0.54", "-44.8332, -122.119, -16.3806, 1.08", "-45.7412, -127.261, -16.4732, 1.08", "-48.4682, -137.316, -16.6386, 1.08", "-48.55, -137.567, -16.6484, 1.08", "-50.172, -141.986, -16.8162, 1.08", "-52.073, -146.509, -16.8911, 1.08", "-53.8997, -150.623, -16.9687, 1.08", "-54.6687, -152.037, -16.9989, 0.81", "-54.8251, -152.252, -17.0038, 0.81", "-55.6664, -153.6, -17.0804, 0.81", "-57.2356, -156.556, -17.4091, 0.81", "-59.1275, -160.617, -17.9883, 0.81", "-61.5251, -165.96, -18.815, 0.81", "-62.7854, -168.875, -19.3121, 0.81", "-65.458, -175.207, -20.4198, 0.81", "-66.644, -178.18, -20.9717, 1.08", "-68.1015, -182.179, -21.7415, 1.08", "-69.1205, -185.141, -22.2462, 1.08", "-69.9873, -188.029, -22.6049, 0.27", "-71.4138, -192.26, -22.8861, 0.27", "-72.0969, -194.029, -22.8415, 0.27", "-73.1475, -196.776, -22.632, 0.54", "-74.0338, -199.574, -22.3997, 0.54", "-75.21, -203.889, -22.0775, 0.54", "-75.3596, -204.393, -22.0403, 0.54", "-76.1209, -207.548, -21.8479, 0.54", "-77.056, -212.302, -21.8499, 0.54", "-77.8956, -217.546, -22.1219, 0.54", "-78.9609, -224.074, -22.828, 0.54", "-79.4657, -227.194, -23.2754, 0.54", "-80.1901, -231.557, -23.9986, 0.54", "-81.1025, -236.889, -24.9872, 0.54", "-82.0822, -242.123, -26.042, 0.54", "-83.7206, -249.119, -27.5795, 0.54", "-83.9963, -250.27, -27.8439, 0.54", "-85.3951, -255.522, -29.0104, 0.54", "-86.3419, -258.718, -29.6801, 0.54", "-87.3814, -262.315, -30.3331, 0.54", "-88.5955, -267.07, -31.22, 0.54", "-89.5274, -271.087, -31.9462, 0.54", "-90.6267, -275.782, -32.7942, 0.54", "-91.7019, -280.05, -33.6879, 0.54", "-91.7122, -280.096, -33.6985, 0.54", "-92.134, -282.93, -34.3724, 0.54" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 13
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "-118.404, 168.016, -9.85607, 0.81", "-120.808, 170.837, -9.49009, 0.81", "-122.951, 172.928, -9.17522, 0.81", "-125.378, 175.111, -8.74232, 0.81", "-128.389, 177.34, -8.13457, 0.81", "-131.278, 179.512, -7.32099, 0.81", "-131.323, 179.548, -7.3051, 0.81", "-134.519, 182.184, -5.99873, 0.81", "-137.404, 184.395, -4.69165, 0.81", "-140.543, 186.549, -3.15325, 0.81", "-144.899, 189.426, -0.795488, 0.81", "-148.34, 191.615, 1.09121, 0.81", "-155.039, 197.663, 5.17327, 0.81" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "-118.404, 168.016, -9.85607, 0.27", "-120.391, 171.153, -8.31139, 0.27", "-123.211, 175.605, -6.1191, 0.27", "-124.68, 177.923, -4.9776, 0.27" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-26.3067, -19.9434, -26.9487, 0.54", "-26.7577, -23.3611, -27.6796, 0.54", "-27.3451, -26.5539, -28.3113, 0.54", "-28.0851, -29.5749, -28.927, 0.54", "-29.9177, -35.0533, -30.1226, 0.54", "-31.9706, -40.1952, -31.4226, 0.54", "-34.8697, -46.6439, -33.3707, 0.54", "-34.983, -46.8703, -33.4489, 0.54", "-37.0772, -50.7513, -34.8735, 0.54", "-40.6331, -57.0183, -37.237, 0.54", "-43.2778, -61.1026, -38.7851, 0.54", "-45.8128, -64.8596, -40.5427, 0.54", "-47.6224, -67.5298, -42.0454, 0.54" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-26.3067, -19.9434, -26.9487, 0.54", "-31.7424, -21.7608, -31.5956, 0.54", "-35.9095, -23.1711, -34.6284, 0.81", "-38.7819, -24.2434, -36.4848, 0.81", "-49.0662, -28.4834, -42.7305, 0.81", "-54.9344, -31.0371, -45.9443, 0.81", "-60.1352, -33.4522, -48.7395, 0.81", "-67.5623, -36.979, -52.2828, 0.81", "-72.137, -39.327, -54.2341, 0.81", "-77.418, -42.2619, -56.3788, 0.81", "-83.8766, -46.1397, -58.8209, 0.81", "-92.584, -51.636, -62.3004, 0.81", "-92.6314, -51.6668, -62.3194, 0.81", "-101.01, -57.1582, -65.8175, 0.81", "-101.223, -57.2925, -65.9104, 0.81", "-110.789, -63.2514, -70.0263, 0.81" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_28",
    "id" : "dend_28",
    "points3d" : [ "251.555, 42.1368, 76.9166, 0.27", "259.492, 44.4519, 82.5171, 0.27", "267.327, 46.5587, 88.3443, 0.27" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_27",
    "id" : "dend_27",
    "points3d" : [ "251.555, 42.1368, 76.9166, 0.27", "259.471, 44.2969, 82.6119, 0.27", "267.761, 44.7796, 88.1829, 0.27" ],
    "parent" : "dend_26",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-92.134, -282.93, -34.3724, 0.54", "-92.7862, -289.029, -35.3604, 0.54", "-93.5468, -295.719, -36.4755, 0.54", "-93.5804, -296.086, -36.532, 0.54", "-94.3724, -303.077, -37.2595, 0.54", "-95.0005, -307.549, -37.5669, 0.54", "-95.0436, -307.809, -37.5739, 0.54", "-96.814, -316.287, -37.3904, 0.54", "-98.1827, -322.484, -37.0141, 0.54", "-99.6902, -329.034, -36.4996, 0.54", "-101.84, -337.443, -35.4016, 0.54", "-103.557, -343.139, -34.4179, 0.54", "-105.519, -348.828, -33.2475, 0.54", "-107.31, -353.134, -32.1402, 0.54", "-109.943, -358.332, -30.5816, 0.54", "-113.058, -363.455, -28.8892, 0.54", "-115.166, -366.036, -27.8497, 0.54", "-117.043, -367.781, -27.0977, 0.54", "-118.515, -368.817, -26.6092, 0.54", "-121.54, -370.526, -25.8049, 0.54", "-124.72, -372.057, -25.1316, 0.54", "-127.659, -373.527, -24.6455, 0.54", "-130.084, -374.942, -24.1841, 0.54", "-133.241, -376.95, -23.5017, 0.54", "-134.951, -378.203, -23.1785, 0.54", "-136.577, -379.57, -22.9358, 0.54", "-140.148, -382.998, -22.3013, 0.54", "-143.257, -386.393, -21.5922, 0.54", "-146.22, -390.153, -20.6603, 0.54", "-148.697, -393.828, -19.7057, 0.54", "-151.192, -398.339, -18.5343, 0.54", "-153.023, -402.53, -17.4138, 0.54", "-154.189, -405.791, -16.536, 0.54", "-155.265, -410.1, -15.1863, 0.54", "-155.424, -412.216, -14.4042, 0.54", "-154.942, -416.397, -12.1753, 0.54", "-154.785, -416.679, -11.9945, 0.54" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-92.134, -282.93, -34.3724, 0.54", "-93.5729, -286.865, -31.1626, 0.54", "-94.4291, -289.206, -29.2529, 0.54" ],
    "parent" : "dend_16",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_23", "dend_20", "dend_13", "dend_6", "dend_3", "dend_0", "dend_25", "dend_24", "dend_22", "dend_21", "dend_15", "dend_14", "dend_10", "dend_7", "dend_5", "dend_4", "dend_2", "dend_1", "dend_29", "dend_26", "dend_19", "dend_16", "dend_12", "dend_11", "dend_9", "dend_8", "dend_28", "dend_27", "dend_18", "dend_17" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_23", "dend_20", "dend_13", "dend_6", "dend_3", "dend_0", "dend_25", "dend_24", "dend_22", "dend_21", "dend_15", "dend_14", "dend_10", "dend_7", "dend_5", "dend_4", "dend_2", "dend_1", "dend_29", "dend_26", "dend_19", "dend_16", "dend_12", "dend_11", "dend_9", "dend_8", "dend_28", "dend_27", "dend_18", "dend_17" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_20" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_25" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_21" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_29" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_26" ]
  }, {
    "name" : "OneSecGrp_SectionRef_24",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_25",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_26",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_28",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_29",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_32",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_23" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_24" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_27",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_22" ]
  }, {
    "name" : "OneSecGrp_SectionRef_30",
    "groups" : [ ],
    "sections" : [ "dend_28" ]
  }, {
    "name" : "OneSecGrp_SectionRef_31",
    "groups" : [ ],
    "sections" : [ "dend_27" ]
  }, {
    "name" : "OneSecGrp_SectionRef_33",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19", "dend_20", "dend_21", "dend_22", "dend_23", "dend_24", "dend_25", "dend_26", "dend_27", "dend_28", "dend_29" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_23", "dend_23", "dend_23", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_20", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_6", "dend_6", "dend_3", "dend_3", "dend_3", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_25", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_24", "dend_22", "dend_22", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_21", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "axon_1", "axon_1", "dend_29", "dend_29", "dend_29", "dend_29", "dend_29", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_26", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_19", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_11", "dend_11", "dend_11", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_28", "dend_28", "dend_27", "dend_27", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_18", "dend_17", "dend_17" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.2499998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dNAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dNAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate dNAC222_L5_LBC_58bb1b2407_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_23, id: dend_23, parent: soma_0
create dend_23
public dend_23
// Section: dend_20, id: dend_20, parent: soma_0
create dend_20
public dend_20
// Section: dend_13, id: dend_13, parent: soma_0
create dend_13
public dend_13
// Section: dend_6, id: dend_6, parent: soma_0
create dend_6
public dend_6
// Section: dend_3, id: dend_3, parent: soma_0
create dend_3
public dend_3
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_25, id: dend_25, parent: dend_23
create dend_25
public dend_25
// Section: dend_24, id: dend_24, parent: dend_23
create dend_24
public dend_24
// Section: dend_22, id: dend_22, parent: dend_20
create dend_22
public dend_22
// Section: dend_21, id: dend_21, parent: dend_20
create dend_21
public dend_21
// Section: dend_15, id: dend_15, parent: dend_13
create dend_15
public dend_15
// Section: dend_14, id: dend_14, parent: dend_13
create dend_14
public dend_14
// Section: dend_10, id: dend_10, parent: dend_6
create dend_10
public dend_10
// Section: dend_7, id: dend_7, parent: dend_6
create dend_7
public dend_7
// Section: dend_5, id: dend_5, parent: dend_3
create dend_5
public dend_5
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_29, id: dend_29, parent: dend_25
create dend_29
public dend_29
// Section: dend_26, id: dend_26, parent: dend_25
create dend_26
public dend_26
// Section: dend_19, id: dend_19, parent: dend_15
create dend_19
public dend_19
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_12, id: dend_12, parent: dend_10
create dend_12
public dend_12
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_9, id: dend_9, parent: dend_7
create dend_9
public dend_9
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_28, id: dend_28, parent: dend_26
create dend_28
public dend_28
// Section: dend_27, id: dend_27, parent: dend_26
create dend_27
public dend_27
// Section: dend_18, id: dend_18, parent: dend_16
create dend_18
public dend_18
// Section: dend_17, id: dend_17, parent: dend_16
create dend_17
public dend_17

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_20]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_25]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_21]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_29]}
objref OneSecGrp_SectionRef_22
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_26]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_24
// Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_25
// Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_26
// Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_28
// Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_29
// Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_32
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_23]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_24]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_27
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_22]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_28]}
objref OneSecGrp_SectionRef_30
// Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_27]}
objref OneSecGrp_SectionRef_31
// Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_33
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_23, dend_23, dend_23, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_13, dend_13, dend_13, dend_13, dend_13, dend_6, dend_6, dend_3, dend_3, dend_3, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, axon_1, axon_1, dend_29, dend_29, dend_29, dend_29, dend_29, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_28, dend_28, dend_27, dend_27, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dNAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dNAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_23(0), soma_0(0.49999957196365796)
    connect dend_20(0), soma_0(0.49999957196365796)
    connect dend_13(0), soma_0(0.49999957196365796)
    connect dend_6(0), soma_0(0.49999957196365796)
    connect dend_3(0), soma_0(0.49999957196365796)
    connect dend_0(0), soma_0(0.49999957196365796)
    connect axon_0(0), soma_0(1.0)
    connect dend_25(0), dend_23(1.0)
    connect dend_24(0), dend_23(1.0)
    connect dend_22(0), dend_20(1.0)
    connect dend_21(0), dend_20(1.0)
    connect dend_15(0), dend_13(1.0)
    connect dend_14(0), dend_13(1.0)
    connect dend_10(0), dend_6(1.0)
    connect dend_7(0), dend_6(1.0)
    connect dend_5(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_29(0), dend_25(1.0)
    connect dend_26(0), dend_25(1.0)
    connect dend_19(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_12(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_9(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_28(0), dend_26(1.0)
    connect dend_27(0), dend_26(1.0)
    connect dend_18(0), dend_16(1.0)
    connect dend_17(0), dend_16(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -4.47353, -9.82937, -0.0150783, 3.11345 ) }
    soma_0 { pt3dadd( -4.06901, -8.79368, -0.0135938, 5.39642 ) }
    soma_0 { pt3dadd( -3.66449, -7.75799, -0.0121094, 6.72082 ) }
    soma_0 { pt3dadd( -3.25998, -6.72231, -0.0106249, 7.70122 ) }
    soma_0 { pt3dadd( -2.85546, -5.68662, -0.00914047, 8.43968 ) }
    soma_0 { pt3dadd( -2.45095, -4.65093, -0.00765602, 9.25919 ) }
    soma_0 { pt3dadd( -2.04643, -3.61524, -0.00617157, 10.0787 ) }
    soma_0 { pt3dadd( -1.64192, -2.57956, -0.00468712, 10.8982 ) }
    soma_0 { pt3dadd( -1.2374, -1.54387, -0.00320267, 11.7151 ) }
    soma_0 { pt3dadd( -0.832884, -0.508183, -0.00171822, 12.3073 ) }
    soma_0 { pt3dadd( -0.428368, 0.527504, -2.33766E-4, 12.0741 ) }
    soma_0 { pt3dadd( -0.023852, 1.56319, 0.00125068, 11.8342 ) }
    soma_0 { pt3dadd( 0.380664, 2.59888, 0.00273513, 11.5616 ) }
    soma_0 { pt3dadd( 0.78518, 3.63457, 0.00421958, 11.0624 ) }
    soma_0 { pt3dadd( 1.1897, 4.67025, 0.00570403, 10.5822 ) }
    soma_0 { pt3dadd( 1.59421, 5.70594, 0.00718848, 10.0942 ) }
    soma_0 { pt3dadd( 1.99873, 6.74163, 0.00867293, 9.27653 ) }
    soma_0 { pt3dadd( 2.40324, 7.77731, 0.0101574, 7.88308 ) }
    soma_0 { pt3dadd( 2.80776, 8.813, 0.0116418, 6.37032 ) }
    soma_0 { pt3dadd( 3.21227, 9.84869, 0.0131263, 4.97817 ) }
    soma_0 { pt3dadd( 3.61679, 10.8844, 0.0146107, 4.57234 ) }
    // Section: dend_23, id: dend_23, parent: soma_0 (entry count 21/100)
    dend_23 { pt3dclear() }
    dend_23 { pt3dadd( 0.0120471, -7.9079, 1.51098, 1.08 ) }
    dend_23 { pt3dadd( 2.85461, -12.8983, 1.07936, 1.08 ) }
    dend_23 { pt3dadd( 5.08406, -16.8124, 0.740839, 1.08 ) }
    dend_23 { pt3dadd( 6.61855, -19.5063, 0.50784, 1.08 ) }
    // Section: dend_20, id: dend_20, parent: soma_0 (entry count 25/100)
    dend_20 { pt3dclear() }
    dend_20 { pt3dadd( -4.41795, -8.6489, -0.0190242, 1.08 ) }
    dend_20 { pt3dadd( -3.82464, -9.23456, -0.0273887, 1.08 ) }
    dend_20 { pt3dadd( -0.155951, -12.4839, -0.0926749, 1.08 ) }
    dend_20 { pt3dadd( 1.39585, -13.96, -0.120337, 1.08 ) }
    dend_20 { pt3dadd( 3.89002, -16.3537, -0.162383, 1.08 ) }
    dend_20 { pt3dadd( 8.17805, -20.657, -0.231826, 1.08 ) }
    dend_20 { pt3dadd( 11.3396, -23.91, -0.279298, 1.08 ) }
    dend_20 { pt3dadd( 11.5089, -24.1023, -0.281948, 1.08 ) }
    dend_20 { pt3dadd( 16.6673, -31.0441, -0.414213, 1.08 ) }
    dend_20 { pt3dadd( 18.1917, -33.4647, -0.51163, 1.08 ) }
    dend_20 { pt3dadd( 19.4309, -35.8582, -0.651826, 1.08 ) }
    dend_20 { pt3dadd( 20.7048, -39.7369, -0.925458, 1.08 ) }
    dend_20 { pt3dadd( 21.7413, -44.9431, -1.31413, 1.08 ) }
    dend_20 { pt3dadd( 22.2381, -49.5185, -1.68125, 1.08 ) }
    dend_20 { pt3dadd( 22.1893, -51.2798, -1.83216, 1.08 ) }
    dend_20 { pt3dadd( 22.0858, -53.4982, -2.00185, 1.08 ) }
    dend_20 { pt3dadd( 21.8775, -59.0255, -2.3839, 1.08 ) }
    dend_20 { pt3dadd( 21.9396, -62.3402, -2.5785, 1.08 ) }
    dend_20 { pt3dadd( 22.2915, -65.2516, -2.84637, 1.08 ) }
    dend_20 { pt3dadd( 22.8986, -69.0809, -3.33778, 1.08 ) }
    dend_20 { pt3dadd( 23.9105, -74.2484, -4.10764, 1.08 ) }
    dend_20 { pt3dadd( 24.0169, -74.8191, -4.21048, 1.08 ) }
    dend_20 { pt3dadd( 24.8038, -78.5691, -4.99983, 1.08 ) }
    dend_20 { pt3dadd( 26.0745, -83.3019, -6.04672, 1.08 ) }
    dend_20 { pt3dadd( 27.0974, -86.9573, -6.80065, 1.08 ) }
    dend_20 { pt3dadd( 28.9045, -92.6626, -8.06138, 1.08 ) }
    dend_20 { pt3dadd( 29.7706, -95.4598, -8.67712, 1.08 ) }
    dend_20 { pt3dadd( 30.2098, -97.0288, -8.99514, 1.08 ) }
    dend_20 { pt3dadd( 31.1837, -101.003, -9.76312, 1.08 ) }
    dend_20 { pt3dadd( 32.8888, -107.004, -10.7383, 1.08 ) }
    dend_20 { pt3dadd( 34.1178, -111.49, -11.5144, 0.81 ) }
    dend_20 { pt3dadd( 34.5966, -113.053, -11.8011, 0.81 ) }
    dend_20 { pt3dadd( 35.467, -115.934, -12.4553, 0.81 ) }
    dend_20 { pt3dadd( 36.3474, -118.938, -13.1906, 0.81 ) }
    dend_20 { pt3dadd( 37.0581, -121.946, -13.9278, 0.81 ) }
    dend_20 { pt3dadd( 38.1513, -126.926, -15.1328, 0.81 ) }
    dend_20 { pt3dadd( 40.1794, -136.049, -17.3914, 0.81 ) }
    dend_20 { pt3dadd( 41.3569, -140.283, -18.5128, 0.81 ) }
    dend_20 { pt3dadd( 42.6259, -144.288, -19.5409, 0.81 ) }
    dend_20 { pt3dadd( 44.1021, -148.544, -20.5386, 0.81 ) }
    dend_20 { pt3dadd( 44.1975, -148.783, -20.5966, 0.81 ) }
    dend_20 { pt3dadd( 46.4051, -153.454, -21.7415, 0.81 ) }
    dend_20 { pt3dadd( 47.6743, -156.129, -22.3234, 0.81 ) }
    dend_20 { pt3dadd( 51.3771, -162.738, -23.4807, 0.81 ) }
    dend_20 { pt3dadd( 54.0129, -167.013, -24.2429, 0.81 ) }
    dend_20 { pt3dadd( 55.7658, -169.673, -24.7519, 0.81 ) }
    dend_20 { pt3dadd( 55.9028, -169.896, -24.793, 0.81 ) }
    dend_20 { pt3dadd( 57.3961, -172.765, -25.2434, 0.81 ) }
    dend_20 { pt3dadd( 60.5715, -179.634, -26.4884, 0.81 ) }
    dend_20 { pt3dadd( 60.5887, -179.679, -26.4966, 0.81 ) }
    dend_20 { pt3dadd( 61.0777, -182.142, -26.8534, 0.81 ) }
    dend_20 { pt3dadd( 61.3157, -183.884, -27.037, 0.81 ) }
    dend_20 { pt3dadd( 61.8069, -188.043, -27.4112, 0.81 ) }
    dend_20 { pt3dadd( 61.971, -189.23, -27.5057, 0.81 ) }
    dend_20 { pt3dadd( 62.796, -196.369, -28.1152, 0.81 ) }
    dend_20 { pt3dadd( 63.2861, -199.957, -28.5919, 0.81 ) }
    dend_20 { pt3dadd( 63.9434, -204.005, -29.2491, 0.81 ) }
    dend_20 { pt3dadd( 64.9009, -209.919, -30.6733, 0.81 ) }
    dend_20 { pt3dadd( 65.5331, -213.488, -31.7843, 0.81 ) }
    dend_20 { pt3dadd( 66.2428, -217.356, -33.2775, 0.81 ) }
    dend_20 { pt3dadd( 67.1629, -222.209, -35.5416, 0.81 ) }
    dend_20 { pt3dadd( 67.1733, -222.26, -35.5687, 0.81 ) }
    dend_20 { pt3dadd( 67.9342, -227.514, -38.7798, 0.81 ) }
    dend_20 { pt3dadd( 68.2103, -230.26, -40.7287, 0.81 ) }
    dend_20 { pt3dadd( 68.2717, -232.695, -42.5133, 0.27 ) }
    // Section: dend_13, id: dend_13, parent: soma_0 (entry count 90/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( -6.04795, -7.64465, 1.45098, 1.08 ) }
    dend_13 { pt3dadd( -6.20733, -11.1196, 0.201887, 1.08 ) }
    dend_13 { pt3dadd( -6.42784, -15.9276, -1.52635, 1.35 ) }
    dend_13 { pt3dadd( -6.78448, -23.7035, -4.32141, 1.35 ) }
    dend_13 { pt3dadd( -6.92256, -26.7141, -5.40357, 1.35 ) }
    dend_13 { pt3dadd( -6.93394, -26.9623, -5.49279, 1.35 ) }
    // Section: dend_6, id: dend_6, parent: soma_0 (entry count 96/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -2.31794, 6.9121, 2.93098, 1.89 ) }
    dend_6 { pt3dadd( -4.52758, 8.01594, 2.93098, 1.89 ) }
    dend_6 { pt3dadd( -7.55865, 9.53014, 2.93098, 1.89 ) }
    // Section: dend_3, id: dend_3, parent: soma_0 (entry count 99/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( -0.377952, 8.4331, 1.46098, 1.41 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_3 { pt3dadd( -3.13985, 9.55062, 2.35354, 1.41 ) }
    dend_3 { pt3dadd( -5.98437, 10.7016, 3.2728, 1.23 ) }
    dend_3 { pt3dadd( -8.81952, 11.8487, 4.18903, 1.23 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 3/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 4.75205, 10.9876, -2.91902, 1.11 ) }
    dend_0 { pt3dadd( 4.84523, 12.7247, -3.01537, 1.11 ) }
    dend_0 { pt3dadd( 5.68448, 17.3765, -3.37105, 1.11 ) }
    dend_0 { pt3dadd( 7.01773, 21.8614, -3.73473, 1.11 ) }
    dend_0 { pt3dadd( 8.20647, 24.4006, -3.92682, 1.11 ) }
    dend_0 { pt3dadd( 10.6752, 28.8718, -4.4887, 1.11 ) }
    dend_0 { pt3dadd( 13.5368, 33.979, -5.34243, 1.11 ) }
    dend_0 { pt3dadd( 15.2568, 36.6917, -5.87922, 1.11 ) }
    dend_0 { pt3dadd( 18.7607, 41.5811, -7.05691, 1.67 ) }
    dend_0 { pt3dadd( 24.0609, 48.7956, -9.03584, 1.11 ) }
    dend_0 { pt3dadd( 26.2982, 51.8333, -9.88807, 1.11 ) }
    dend_0 { pt3dadd( 28.3798, 54.7618, -10.756, 1.11 ) }
    dend_0 { pt3dadd( 30.5626, 58.1025, -11.7396, 1.11 ) }
    dend_0 { pt3dadd( 33.7394, 63.0932, -13.0771, 1.11 ) }
    dend_0 { pt3dadd( 36.5889, 67.616, -14.4206, 1.11 ) }
    dend_0 { pt3dadd( 38.8583, 71.3332, -15.5275, 1.11 ) }
    dend_0 { pt3dadd( 41.6298, 75.6774, -16.7269, 1.11 ) }
    dend_0 { pt3dadd( 42.6502, 77.2662, -17.1605, 1.11 ) }
    dend_0 { pt3dadd( 46.5629, 83.4649, -18.9188, 1.11 ) }
    dend_0 { pt3dadd( 49.2391, 87.7108, -20.0751, 1.11 ) }
    dend_0 { pt3dadd( 49.9387, 88.8448, -20.3838, 1.11 ) }
    dend_0 { pt3dadd( 51.2774, 91.2414, -21.0083, 1.11 ) }
    dend_0 { pt3dadd( 53.9221, 96.1658, -22.3196, 1.11 ) }
    dend_0 { pt3dadd( 56.9433, 101.955, -23.8696, 1.11 ) }
    dend_0 { pt3dadd( 58.889, 105.957, -24.9613, 1.11 ) }
    dend_0 { pt3dadd( 61.0265, 110.048, -26.0302, 1.11 ) }
    dend_0 { pt3dadd( 62.9753, 113.635, -27.0606, 1.11 ) }
    dend_0 { pt3dadd( 64.6624, 116.84, -28.0859, 1.06 ) }
    dend_0 { pt3dadd( 65.5961, 118.634, -28.7774, 0.53 ) }
    dend_0 { pt3dadd( 66.3073, 120.369, -29.5079, 0.35 ) }
    dend_0 { pt3dadd( 67.2447, 123.244, -30.8939, 0.35 ) }
    dend_0 { pt3dadd( 67.2997, 123.459, -31.0083, 0.35 ) }
    dend_0 { pt3dadd( 67.9706, 127.7, -33.1608, 0.35 ) }
    dend_0 { pt3dadd( 68.1125, 129.053, -33.8722, 0.35 ) }
    dend_0 { pt3dadd( 68.3343, 131.306, -35.1425, 0.35 ) }
    dend_0 { pt3dadd( 68.6642, 134.355, -36.844, 0.35 ) }
    dend_0 { pt3dadd( 68.9216, 136.304, -37.9493, 0.35 ) }
    dend_0 { pt3dadd( 69.4338, 138.824, -39.4267, 0.35 ) }
    dend_0 { pt3dadd( 70.2534, 141.57, -41.0513, 0.35 ) }
    dend_0 { pt3dadd( 70.658, 142.873, -41.7788, 0.35 ) }
    dend_0 { pt3dadd( 71.153, 144.463, -42.6418, 0.35 ) }
    dend_0 { pt3dadd( 71.7708, 146.709, -43.789, 0.35 ) }
    dend_0 { pt3dadd( 72.2438, 148.578, -44.7066, 0.35 ) }
    dend_0 { pt3dadd( 72.6213, 149.968, -45.4018, 0.35 ) }
    dend_0 { pt3dadd( 72.8349, 150.918, -45.7978, 1.23 ) }
    dend_0 { pt3dadd( 72.8965, 151.222, -45.9447, 1.23 ) }
    dend_0 { pt3dadd( 73.2453, 153.093, -46.9912, 0.18 ) }
    dend_0 { pt3dadd( 73.5879, 154.423, -47.8766, 0.18 ) }
    dend_0 { pt3dadd( 73.9537, 155.414, -48.5799, 0.18 ) }
    dend_0 { pt3dadd( 74.5077, 156.716, -49.5987, 1.23 ) }
    dend_0 { pt3dadd( 75.1087, 157.84, -50.4297, 0.18 ) }
    dend_0 { pt3dadd( 75.3398, 158.223, -50.6582, 0.18 ) }
    dend_0 { pt3dadd( 77.0233, 160.425, -51.691, 0.18 ) }
    dend_0 { pt3dadd( 77.466, 160.949, -51.9246, 0.88 ) }
    dend_0 { pt3dadd( 77.7595, 161.262, -52.061, 0.18 ) }
    dend_0 { pt3dadd( 79.4521, 162.951, -52.7145, 0.18 ) }
    dend_0 { pt3dadd( 81.0118, 164.536, -53.1512, 0.18 ) }
    dend_0 { pt3dadd( 83.3601, 166.873, -53.6209, 1.06 ) }
    dend_0 { pt3dadd( 83.6104, 167.11, -53.643, 1.06 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 62/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 3.61679, 10.8844, 0.0146107, 0.81 ) }
    axon_0 { pt3dadd( 9.07397, 24.8565, 0.0146107, 0.81 ) }
    axon_0 { pt3dadd( 14.5311, 38.8286, 0.0146107, 0.81 ) }
    // Section: dend_25, id: dend_25, parent: dend_23 (entry count 65/100)
    dend_25 { pt3dclear() }
    dend_25 { pt3dadd( 6.61855, -19.5063, 0.50784, 1.08 ) }
    dend_25 { pt3dadd( 11.7386, -19.2431, 0.50784, 1.08 ) }
    dend_25 { pt3dadd( 21.6077, -17.768, 1.06688, 1.08 ) }
    dend_25 { pt3dadd( 31.6033, -17.6968, 1.35322, 1.08 ) }
    dend_25 { pt3dadd( 41.5501, -18.2926, 0.524237, 1.08 ) }
    dend_25 { pt3dadd( 51.5052, -18.1979, 1.46634, 1.08 ) }
    dend_25 { pt3dadd( 61.3698, -16.7243, 2.10219, 1.08 ) }
    dend_25 { pt3dadd( 70.8895, -14.055, 3.47359, 1.08 ) }
    dend_25 { pt3dadd( 80.265, -12.4989, 6.56449, 1.08 ) }
    dend_25 { pt3dadd( 88.9077, -9.4091, 10.4708, 1.08 ) }
    dend_25 { pt3dadd( 97.6105, -5.72315, 13.6283, 1.08 ) }
    dend_25 { pt3dadd( 106.46, -1.82637, 16.019, 1.08 ) }
    dend_25 { pt3dadd( 115.073, 2.61316, 18.2712, 1.08 ) }
    dend_25 { pt3dadd( 124.717, 5.12771, 18.8657, 1.08 ) }
    dend_25 { pt3dadd( 133.643, 8.96672, 21.0619, 1.08 ) }
    dend_25 { pt3dadd( 142.174, 13.7805, 22.7464, 1.08 ) }
    dend_25 { pt3dadd( 150.328, 19.3697, 23.5511, 1.08 ) }
    dend_25 { pt3dadd( 159.262, 23.3195, 25.4978, 1.08 ) }
    dend_25 { pt3dadd( 168.403, 25.2961, 29.0093, 1.08 ) }
    dend_25 { pt3dadd( 178.032, 26.0307, 31.5996, 1.08 ) }
    dend_25 { pt3dadd( 187.117, 27.2352, 35.5921, 1.08 ) }
    dend_25 { pt3dadd( 196.833, 26.7247, 37.8968, 1.08 ) }
    // Section: dend_24, id: dend_24, parent: dend_23 (entry count 87/100)
    dend_24 { pt3dclear() }
    dend_24 { pt3dadd( 6.61855, -19.5063, 0.50784, 1.08 ) }
    dend_24 { pt3dadd( 8.82094, -23.9514, 0.418982, 1.08 ) }
    dend_24 { pt3dadd( 11.1646, -28.3501, 0.190861, 1.08 ) }
    dend_24 { pt3dadd( 14.0836, -33.0093, -0.231267, 1.08 ) }
    dend_24 { pt3dadd( 16.6346, -36.7811, -0.653597, 1.08 ) }
    dend_24 { pt3dadd( 20.4603, -42.4375, -1.28694, 0.81 ) }
    dend_24 { pt3dadd( 21.8196, -44.4474, -1.51199, 0.81 ) }
    dend_24 { pt3dadd( 23.998, -47.4411, -1.93113, 0.81 ) }
    dend_24 { pt3dadd( 27.0441, -51.4597, -2.73163, 0.81 ) }
    dend_24 { pt3dadd( 27.0847, -51.5009, -2.74498, 0.81 ) }
    // Section: dend_22, id: dend_22, parent: dend_20 (entry count 97/100)
    dend_22 { pt3dclear() }
    dend_22 { pt3dadd( 68.2717, -232.695, -42.5133, 0.27 ) }
    dend_22 { pt3dadd( 78.2244, -236.937, -42.5154, 0.27 ) }
    dend_22 { pt3dadd( 91.7103, -242.683, -42.5183, 0.27 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    // Section: dend_21, id: dend_21, parent: dend_20 (entry count 0/100)
    dend_21 { pt3dclear() }
    dend_21 { pt3dadd( 68.2717, -232.695, -42.5133, 0.27 ) }
    dend_21 { pt3dadd( 68.1621, -236.295, -45.6809, 0.27 ) }
    dend_21 { pt3dadd( 67.9972, -241.255, -50.1965, 0.27 ) }
    dend_21 { pt3dadd( 67.8185, -246.053, -54.5082, 0.27 ) }
    dend_21 { pt3dadd( 67.6791, -249.799, -57.8747, 0.27 ) }
    dend_21 { pt3dadd( 67.4986, -254.645, -62.2285, 0.27 ) }
    dend_21 { pt3dadd( 67.1745, -263.351, -70.0519, 0.27 ) }
    dend_21 { pt3dadd( 67.161, -263.543, -70.2354, 0.27 ) }
    dend_21 { pt3dadd( 67.1048, -265.117, -71.6953, 0.27 ) }
    // Section: dend_15, id: dend_15, parent: dend_13 (entry count 9/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -6.93394, -26.9623, -5.49279, 1.08 ) }
    dend_15 { pt3dadd( -8.99333, -29.2638, -5.35445, 1.08 ) }
    dend_15 { pt3dadd( -11.7519, -32.3466, -5.16914, 1.08 ) }
    dend_15 { pt3dadd( -14.6048, -35.5347, -4.97749, 1.08 ) }
    dend_15 { pt3dadd( -18.8555, -40.285, -4.69194, 1.08 ) }
    dend_15 { pt3dadd( -20.9922, -42.6729, -4.54841, 1.08 ) }
    dend_15 { pt3dadd( -23.3851, -45.347, -4.38767, 1.08 ) }
    // Section: dend_14, id: dend_14, parent: dend_13 (entry count 16/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( -6.93394, -26.9623, -5.49279, 0.27 ) }
    dend_14 { pt3dadd( -8.64595, -30.7368, -6.11486, 0.27 ) }
    dend_14 { pt3dadd( -9.1896, -33.9735, -6.47427, 0.54 ) }
    dend_14 { pt3dadd( -9.23779, -34.7161, -6.50233, 1.08 ) }
    dend_14 { pt3dadd( -9.24712, -34.9792, -6.50649, 1.08 ) }
    dend_14 { pt3dadd( -9.44353, -38.9783, -6.60574, 1.08 ) }
    dend_14 { pt3dadd( -9.5585, -40.826, -6.65792, 1.08 ) }
    dend_14 { pt3dadd( -9.86025, -46.9491, -6.80593, 1.08 ) }
    dend_14 { pt3dadd( -10.1328, -52.6704, -7.07674, 1.08 ) }
    dend_14 { pt3dadd( -10.1404, -52.933, -7.09364, 1.08 ) }
    dend_14 { pt3dadd( -10.0637, -57.7775, -7.48303, 1.08 ) }
    dend_14 { pt3dadd( -9.84695, -60.4316, -7.74906, 1.08 ) }
    dend_14 { pt3dadd( -9.76595, -62.4082, -7.96538, 1.08 ) }
    dend_14 { pt3dadd( -9.81275, -64.2851, -8.19031, 1.08 ) }
    dend_14 { pt3dadd( -9.68532, -66.8518, -8.46668, 1.08 ) }
    dend_14 { pt3dadd( -9.44923, -69.9041, -8.7087, 1.08 ) }
    dend_14 { pt3dadd( -9.34916, -72.0142, -8.79237, 1.08 ) }
    dend_14 { pt3dadd( -9.34341, -78.9581, -8.98499, 1.08 ) }
    dend_14 { pt3dadd( -9.39783, -80.2878, -9.05919, 1.08 ) }
    dend_14 { pt3dadd( -9.54282, -86.0841, -9.55466, 1.08 ) }
    dend_14 { pt3dadd( -9.56556, -86.6692, -9.61653, 1.08 ) }
    dend_14 { pt3dadd( -9.79545, -93.0721, -10.4092, 1.08 ) }
    dend_14 { pt3dadd( -9.85925, -97.0134, -10.9583, 1.08 ) }
    dend_14 { pt3dadd( -9.60445, -101.055, -11.5536, 1.08 ) }
    dend_14 { pt3dadd( -9.52567, -107.165, -12.5751, 1.08 ) }
    dend_14 { pt3dadd( -9.52741, -107.414, -12.6222, 1.08 ) }
    dend_14 { pt3dadd( -9.51922, -108.471, -12.8311, 1.08 ) }
    dend_14 { pt3dadd( -9.42907, -112.155, -13.5964, 1.08 ) }
    dend_14 { pt3dadd( -9.25195, -120.5, -15.2117, 1.08 ) }
    dend_14 { pt3dadd( -9.36357, -126.968, -16.2315, 1.08 ) }
    dend_14 { pt3dadd( -9.54535, -132.119, -16.9099, 1.08 ) }
    dend_14 { pt3dadd( -9.66703, -135.948, -17.3023, 1.08 ) }
    dend_14 { pt3dadd( -9.66764, -136.006, -17.3061, 1.08 ) }
    dend_14 { pt3dadd( -9.66722, -140.741, -17.4247, 1.08 ) }
    dend_14 { pt3dadd( -9.40272, -147.119, -17.2749, 1.08 ) }
    dend_14 { pt3dadd( -9.02486, -152.289, -16.9771, 1.08 ) }
    dend_14 { pt3dadd( -8.78916, -156.674, -16.6276, 0.81 ) }
    dend_14 { pt3dadd( -8.52583, -161.256, -16.303, 0.81 ) }
    dend_14 { pt3dadd( -8.35361, -164.545, -16.1217, 0.81 ) }
    dend_14 { pt3dadd( -7.58009, -173.914, -15.9468, 0.81 ) }
    dend_14 { pt3dadd( -6.99103, -179.195, -16.0239, 0.81 ) }
    dend_14 { pt3dadd( -6.78345, -181.013, -16.0981, 0.81 ) }
    dend_14 { pt3dadd( -6.21806, -186.422, -16.2861, 0.81 ) }
    dend_14 { pt3dadd( -5.92089, -190.068, -16.3371, 0.81 ) }
    dend_14 { pt3dadd( -5.41753, -200.758, -16.1819, 0.81 ) }
    dend_14 { pt3dadd( -5.49772, -203.758, -16.1401, 0.81 ) }
    dend_14 { pt3dadd( -5.51314, -204.021, -16.1366, 0.81 ) }
    dend_14 { pt3dadd( -6.11564, -209.816, -16.0571, 0.81 ) }
    dend_14 { pt3dadd( -6.82355, -214.236, -15.9335, 0.81 ) }
    dend_14 { pt3dadd( -7.98991, -219.158, -15.8197, 0.81 ) }
    dend_14 { pt3dadd( -9.68559, -224.752, -15.5909, 0.81 ) }
    dend_14 { pt3dadd( -10.2977, -226.788, -15.5231, 0.81 ) }
    dend_14 { pt3dadd( -11.5674, -231.34, -15.4103, 0.81 ) }
    dend_14 { pt3dadd( -12.5397, -234.931, -15.3786, 0.81 ) }
    dend_14 { pt3dadd( -13.9046, -239.801, -15.4002, 0.81 ) }
    dend_14 { pt3dadd( -15.6314, -246.773, -15.3509, 0.81 ) }
    dend_14 { pt3dadd( -16.908, -252.155, -15.2351, 0.81 ) }
    dend_14 { pt3dadd( -17.9704, -256.805, -15.1991, 0.81 ) }
    dend_14 { pt3dadd( -19.3707, -262.88, -15.1516, 0.81 ) }
    dend_14 { pt3dadd( -20.0288, -265.925, -15.1397, 0.81 ) }
    dend_14 { pt3dadd( -20.6886, -269.393, -15.1661, 0.81 ) }
    dend_14 { pt3dadd( -21.5581, -274.01, -15.3072, 0.81 ) }
    dend_14 { pt3dadd( -22.0312, -278.832, -15.3685, 0.81 ) }
    dend_14 { pt3dadd( -22.0398, -280.635, -15.3524, 0.81 ) }
    dend_14 { pt3dadd( -22.0155, -281.006, -15.3388, 1.08 ) }
    dend_14 { pt3dadd( -21.9887, -281.376, -15.3099, 1.08 ) }
    dend_14 { pt3dadd( -21.5487, -286.076, -14.9326, 0.54 ) }
    dend_14 { pt3dadd( -20.6615, -293.008, -14.4017, 0.54 ) }
    dend_14 { pt3dadd( -20.1921, -296.734, -14.1639, 0.54 ) }
    dend_14 { pt3dadd( -19.7393, -300.591, -13.9759, 0.54 ) }
    dend_14 { pt3dadd( -19.529, -303.12, -13.8522, 0.54 ) }
    dend_14 { pt3dadd( -19.3755, -306.761, -13.6585, 0.54 ) }
    dend_14 { pt3dadd( -19.4102, -309.109, -13.4794, 0.54 ) }
    dend_14 { pt3dadd( -19.7199, -314.329, -12.9715, 0.54 ) }
    dend_14 { pt3dadd( -19.9429, -316.803, -12.7021, 0.54 ) }
    dend_14 { pt3dadd( -20.1921, -319.77, -12.3739, 0.54 ) }
    dend_14 { pt3dadd( -20.504, -321.78, -12.1728, 0.54 ) }
    dend_14 { pt3dadd( -21.3243, -326.192, -11.7389, 0.54 ) }
    dend_14 { pt3dadd( -21.3369, -326.259, -11.7319, 0.54 ) }
    dend_14 { pt3dadd( -21.5514, -327.316, -11.5984, 0.54 ) }
    dend_14 { pt3dadd( -22.1856, -330.921, -11.1393, 0.54 ) }
    dend_14 { pt3dadd( -22.8551, -335.485, -10.5666, 0.54 ) }
    dend_14 { pt3dadd( -23.8359, -341.937, -9.82575, 0.54 ) }
    dend_14 { pt3dadd( -24.5971, -347.717, -9.24864, 0.54 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_14 { pt3dadd( -25.0029, -350.924, -8.91961, 0.54 ) }
    dend_14 { pt3dadd( -25.538, -355.418, -8.593, 0.54 ) }
    dend_14 { pt3dadd( -25.6191, -356.203, -8.55777, 0.54 ) }
    dend_14 { pt3dadd( -25.9723, -360.656, -8.47325, 0.54 ) }
    dend_14 { pt3dadd( -26.5994, -365.94, -8.6468, 0.54 ) }
    dend_14 { pt3dadd( -27.27, -371.96, -9.08056, 0.54 ) }
    dend_14 { pt3dadd( -27.801, -376.453, -9.54555, 0.54 ) }
    dend_14 { pt3dadd( -28.3743, -380.72, -10.0588, 0.54 ) }
    dend_14 { pt3dadd( -28.4728, -381.497, -10.1621, 0.54 ) }
    dend_14 { pt3dadd( -28.9992, -386.309, -10.9975, 0.54 ) }
    // Section: dend_10, id: dend_10, parent: dend_6 (entry count 10/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -7.55865, 9.53014, 2.93098, 0.81 ) }
    dend_10 { pt3dadd( -8.16371, 11.1768, 3.18013, 0.81 ) }
    dend_10 { pt3dadd( -9.52893, 14.8125, 3.72048, 1.08 ) }
    dend_10 { pt3dadd( -12.4446, 19.8136, 4.414, 1.08 ) }
    dend_10 { pt3dadd( -13.2033, 20.915, 4.54423, 1.08 ) }
    dend_10 { pt3dadd( -15.4047, 24.3323, 4.85493, 1.08 ) }
    dend_10 { pt3dadd( -15.4363, 24.3819, 4.8584, 1.08 ) }
    dend_10 { pt3dadd( -17.7923, 27.7901, 4.97978, 1.08 ) }
    dend_10 { pt3dadd( -21.3382, 32.9942, 5.01873, 1.08 ) }
    dend_10 { pt3dadd( -22.8004, 35.457, 4.89447, 1.08 ) }
    dend_10 { pt3dadd( -25.8665, 40.9959, 4.38406, 1.08 ) }
    dend_10 { pt3dadd( -28.7786, 46.4511, 3.64995, 1.08 ) }
    dend_10 { pt3dadd( -30.4377, 49.5298, 3.17501, 1.08 ) }
    dend_10 { pt3dadd( -32.7881, 53.9334, 2.41176, 1.08 ) }
    dend_10 { pt3dadd( -34.5859, 57.3069, 1.76289, 1.08 ) }
    dend_10 { pt3dadd( -34.7971, 57.6104, 1.69728, 1.08 ) }
    dend_10 { pt3dadd( -35.6138, 58.4541, 1.49215, 1.08 ) }
    dend_10 { pt3dadd( -40.0066, 62.3215, 0.60257, 1.08 ) }
    dend_10 { pt3dadd( -43.4968, 65.0044, 0.0408821, 1.08 ) }
    dend_10 { pt3dadd( -47.0512, 67.2832, -0.415998, 1.08 ) }
    dend_10 { pt3dadd( -50.2334, 69.196, -0.728257, 1.08 ) }
    dend_10 { pt3dadd( -52.1846, 70.3506, -0.926495, 1.08 ) }
    dend_10 { pt3dadd( -53.9186, 71.6042, -1.11542, 1.08 ) }
    dend_10 { pt3dadd( -56.7571, 74.0327, -1.41366, 1.08 ) }
    dend_10 { pt3dadd( -59.0963, 76.45, -1.62595, 1.08 ) }
    dend_10 { pt3dadd( -59.2672, 76.6403, -1.64287, 1.08 ) }
    dend_10 { pt3dadd( -62.3753, 80.5306, -1.97503, 1.08 ) }
    dend_10 { pt3dadd( -66.7254, 86.5494, -2.66545, 1.08 ) }
    dend_10 { pt3dadd( -70.3325, 91.6755, -3.31194, 1.08 ) }
    dend_10 { pt3dadd( -73.5555, 96.4688, -4.06188, 1.08 ) }
    dend_10 { pt3dadd( -76.8638, 101.807, -4.92282, 1.08 ) }
    dend_10 { pt3dadd( -80.3607, 107.818, -5.87804, 1.08 ) }
    dend_10 { pt3dadd( -83.4794, 113.759, -6.89321, 1.08 ) }
    dend_10 { pt3dadd( -85.973, 118.57, -7.8482, 1.08 ) }
    dend_10 { pt3dadd( -87.2779, 121.441, -8.43645, 1.08 ) }
    dend_10 { pt3dadd( -89.6313, 126.556, -9.43171, 1.08 ) }
    dend_10 { pt3dadd( -91.8405, 131.995, -10.2717, 1.08 ) }
    dend_10 { pt3dadd( -93.9825, 136.847, -10.8473, 0.81 ) }
    dend_10 { pt3dadd( -95.7253, 140.239, -11.0513, 0.81 ) }
    dend_10 { pt3dadd( -97.9786, 144.342, -11.1791, 0.81 ) }
    dend_10 { pt3dadd( -99.9319, 147.339, -11.1675, 0.81 ) }
    dend_10 { pt3dadd( -101.646, 149.605, -11.1574, 0.54 ) }
    dend_10 { pt3dadd( -105.656, 154.413, -10.9641, 0.54 ) }
    dend_10 { pt3dadd( -109.893, 159.07, -10.5169, 1.08 ) }
    dend_10 { pt3dadd( -110.636, 159.872, -10.4126, 1.08 ) }
    dend_10 { pt3dadd( -113.044, 162.336, -10.1443, 1.08 ) }
    dend_10 { pt3dadd( -118.404, 168.016, -9.85607, 1.08 ) }
    // Section: dend_7, id: dend_7, parent: dend_6 (entry count 57/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( -7.55865, 9.53014, 2.93098, 1.08 ) }
    dend_7 { pt3dadd( -11.6583, 4.13665, -2.65374, 1.08 ) }
    dend_7 { pt3dadd( -14.1264, 0.912819, -5.87185, 0.81 ) }
    dend_7 { pt3dadd( -17.2331, -3.64612, -10.5728, 1.08 ) }
    dend_7 { pt3dadd( -18.9045, -6.26975, -13.282, 1.08 ) }
    dend_7 { pt3dadd( -20.6073, -8.94263, -16.0421, 1.08 ) }
    dend_7 { pt3dadd( -23.0743, -12.8151, -20.0409, 1.08 ) }
    dend_7 { pt3dadd( -24.2553, -15.058, -22.0711, 1.08 ) }
    dend_7 { pt3dadd( -26.0741, -19.4061, -26.3394, 0.54 ) }
    dend_7 { pt3dadd( -26.3067, -19.9434, -26.9487, 0.54 ) }
    // Section: dend_5, id: dend_5, parent: dend_3 (entry count 67/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -8.81952, 11.8487, 4.18903, 0.53 ) }
    dend_5 { pt3dadd( -9.99065, 11.8787, 4.33543, 0.53 ) }
    dend_5 { pt3dadd( -12.6193, 11.946, 4.66401, 0.53 ) }
    dend_5 { pt3dadd( -12.9665, 11.9549, 4.7074, 0.53 ) }
    dend_5 { pt3dadd( -14.5526, 11.9955, 4.90567, 0.53 ) }
    dend_5 { pt3dadd( -16.4671, 12.0446, 5.14497, 0.53 ) }
    dend_5 { pt3dadd( -18.8935, 12.1067, 5.44827, 0.53 ) }
    dend_5 { pt3dadd( -28.8327, 13.1712, 5.30935, 0.53 ) }
    dend_5 { pt3dadd( -38.2976, 15.9587, 6.80715, 0.53 ) }
    dend_5 { pt3dadd( -47.5069, 19.471, 8.29391, 0.53 ) }
    dend_5 { pt3dadd( -55.4713, 24.5871, 11.2998, 0.53 ) }
    dend_5 { pt3dadd( -64.0956, 28.9024, 13.7557, 0.53 ) }
    dend_5 { pt3dadd( -72.4229, 32.9177, 17.4567, 0.53 ) }
    dend_5 { pt3dadd( -81.105, 35.4579, 21.6795, 0.53 ) }
    dend_5 { pt3dadd( -90.0032, 38.0886, 25.3598, 0.53 ) }
    dend_5 { pt3dadd( -99.3344, 39.8084, 28.493, 0.53 ) }
    dend_5 { pt3dadd( -109.078, 39.9052, 30.7415, 0.53 ) }
    dend_5 { pt3dadd( -118.43, 41.5656, 33.8464, 0.53 ) }
    dend_5 { pt3dadd( -127.791, 43.4736, 36.7692, 0.53 ) }
    dend_5 { pt3dadd( -137.213, 45.9654, 38.9359, 0.53 ) }
    dend_5 { pt3dadd( -146.884, 46.5855, 41.3996, 0.53 ) }
    dend_5 { pt3dadd( -156.736, 46.3451, 43.0918, 0.53 ) }
    dend_5 { pt3dadd( -166.433, 47.7816, 45.0417, 0.53 ) }
    dend_5 { pt3dadd( -175.893, 50.2815, 47.027, 0.53 ) }
    dend_5 { pt3dadd( -184.986, 53.6305, 49.3749, 0.53 ) }
    dend_5 { pt3dadd( -193.779, 56.6733, 52.9733, 0.53 ) }
    dend_5 { pt3dadd( -202.632, 58.7502, 57.106, 0.53 ) }
    dend_5 { pt3dadd( -210.367, 60.4855, 63.1896, 0.53 ) }
    dend_5 { pt3dadd( -217.821, 60.2577, 69.8514, 0.53 ) }
    dend_5 { pt3dadd( -224.82, 58.7148, 76.8165, 0.53 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 97/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -8.81952, 11.8487, 4.18903, 0.53 ) }
    dend_4 { pt3dadd( -8.67885, 14.0769, 4.87517, 0.53 ) }
    dend_4 { pt3dadd( -8.65595, 14.4396, 4.98687, 0.53 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_4 { pt3dadd( -8.44161, 17.8347, 6.03235, 0.53 ) }
    dend_4 { pt3dadd( -9.50476, 27.3807, 7.76708, 0.53 ) }
    dend_4 { pt3dadd( -9.79015, 37.0554, 8.97431, 0.53 ) }
    dend_4 { pt3dadd( -11.3937, 46.4893, 10.9256, 0.53 ) }
    dend_4 { pt3dadd( -12.3458, 55.5191, 14.5756, 0.53 ) }
    dend_4 { pt3dadd( -13.087, 65.0621, 16.4865, 0.53 ) }
    dend_4 { pt3dadd( -13.4044, 74.7058, 17.9244, 0.53 ) }
    dend_4 { pt3dadd( -12.2979, 84.3825, 17.4006, 0.53 ) }
    dend_4 { pt3dadd( -10.9928, 93.9364, 15.8916, 0.53 ) }
    dend_4 { pt3dadd( -9.76415, 103.356, 13.624, 0.53 ) }
    dend_4 { pt3dadd( -9.80165, 112.372, 9.81689, 0.53 ) }
    dend_4 { pt3dadd( -9.08929, 121.625, 6.7448, 0.53 ) }
    dend_4 { pt3dadd( -9.62451, 131.056, 4.2666, 0.53 ) }
    dend_4 { pt3dadd( -10.6998, 140.188, 0.932549, 0.53 ) }
    dend_4 { pt3dadd( -11.0087, 149.119, -3.06715, 0.53 ) }
    dend_4 { pt3dadd( -13.2326, 158.181, -6.012, 0.53 ) }
    dend_4 { pt3dadd( -17.3966, 166.266, -9.74106, 0.53 ) }
    dend_4 { pt3dadd( -20.9214, 174.377, -14.0258, 0.53 ) }
    dend_4 { pt3dadd( -23.5313, 182.259, -19.3022, 0.53 ) }
    dend_4 { pt3dadd( -24.4286, 190.277, -24.9208, 0.53 ) }
    dend_4 { pt3dadd( -26.7913, 198.833, -29.0939, 0.53 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 21/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 83.6104, 167.11, -53.643, 0.18 ) }
    dend_2 { pt3dadd( 84.1822, 167.489, -53.5456, 0.18 ) }
    dend_2 { pt3dadd( 85.8751, 168.67, -53.2136, 0.18 ) }
    dend_2 { pt3dadd( 88.8762, 170.981, -52.5983, 0.53 ) }
    dend_2 { pt3dadd( 92.3852, 173.653, -52.0522, 0.53 ) }
    dend_2 { pt3dadd( 95.3737, 176.038, -51.6845, 0.35 ) }
    dend_2 { pt3dadd( 98.2397, 178.271, -51.5416, 0.35 ) }
    dend_2 { pt3dadd( 98.6351, 178.585, -51.5494, 0.35 ) }
    dend_2 { pt3dadd( 100.959, 180.525, -51.8734, 0.35 ) }
    dend_2 { pt3dadd( 104.02, 183.011, -52.7, 0.35 ) }
    dend_2 { pt3dadd( 106.519, 184.537, -54.0493, 0.35 ) }
    dend_2 { pt3dadd( 109.434, 185.829, -56.0844, 0.35 ) }
    dend_2 { pt3dadd( 109.61, 185.895, -56.2333, 0.35 ) }
    dend_2 { pt3dadd( 111.463, 186.505, -58.159, 0.18 ) }
    dend_2 { pt3dadd( 113.73, 187.087, -60.7174, 0.18 ) }
    dend_2 { pt3dadd( 117.951, 188.013, -65.9487, 0.18 ) }
    dend_2 { pt3dadd( 118.025, 188.024, -66.0428, 0.18 ) }
    dend_2 { pt3dadd( 119.98, 188.394, -68.5375, 0.53 ) }
    dend_2 { pt3dadd( 123.294, 188.984, -72.8015, 0.53 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 40/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 83.6104, 167.11, -53.643, 0.18 ) }
    dend_1 { pt3dadd( 83.6558, 167.941, -53.8847, 0.18 ) }
    dend_1 { pt3dadd( 83.9143, 172.679, -55.2622, 0.18 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 43/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 14.5311, 38.8286, 0.0146107, 0.54 ) }
    axon_1 { pt3dadd( 19.9883, 52.8007, 0.0146107, 0.54 ) }
    axon_1 { pt3dadd( 25.4455, 66.7728, 0.0146107, 0.54 ) }
    // Section: dend_29, id: dend_29, parent: dend_25 (entry count 46/100)
    dend_29 { pt3dclear() }
    dend_29 { pt3dadd( 196.833, 26.7247, 37.8968, 0.18 ) }
    dend_29 { pt3dadd( 206.245, 29.5035, 36.083, 0.18 ) }
    dend_29 { pt3dadd( 215.211, 33.7511, 35.2895, 0.18 ) }
    dend_29 { pt3dadd( 223.867, 38.4797, 36.5396, 0.18 ) }
    dend_29 { pt3dadd( 231.764, 43.7573, 39.4272, 0.18 ) }
    dend_29 { pt3dadd( 239.824, 47.8131, 43.6378, 0.18 ) }
    // Section: dend_26, id: dend_26, parent: dend_25 (entry count 52/100)
    dend_26 { pt3dclear() }
    dend_26 { pt3dadd( 196.833, 26.7247, 37.8968, 0.18 ) }
    dend_26 { pt3dadd( 205.817, 28.6166, 41.8371, 0.18 ) }
    dend_26 { pt3dadd( 214.386, 31.6458, 45.9509, 0.18 ) }
    dend_26 { pt3dadd( 221.837, 33.7273, 52.2692, 0.18 ) }
    dend_26 { pt3dadd( 229.102, 34.0852, 59.1313, 0.18 ) }
    dend_26 { pt3dadd( 236.104, 36.1652, 65.9442, 0.18 ) }
    dend_26 { pt3dadd( 244.361, 38.5316, 71.0373, 0.18 ) }
    dend_26 { pt3dadd( 251.555, 42.1368, 76.9166, 0.18 ) }
    // Section: dend_19, id: dend_19, parent: dend_15 (entry count 60/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -23.3851, -45.347, -4.38767, 1.08 ) }
    dend_19 { pt3dadd( -26.7063, -46.7724, -2.89678, 1.08 ) }
    dend_19 { pt3dadd( -29.3428, -47.9713, -1.81607, 0.81 ) }
    dend_19 { pt3dadd( -32.1572, -49.3501, -0.655182, 0.81 ) }
    dend_19 { pt3dadd( -34.7989, -50.6442, 0.434499, 0.81 ) }
    dend_19 { pt3dadd( -37.8782, -52.1527, 1.70466, 0.81 ) }
    dend_19 { pt3dadd( -41.6387, -53.9949, 3.25581, 0.81 ) }
    dend_19 { pt3dadd( -43.0924, -54.7566, 3.77085, 0.81 ) }
    dend_19 { pt3dadd( -45.4614, -55.8711, 4.47142, 0.81 ) }
    dend_19 { pt3dadd( -53.0277, -61.4858, 7.56821, 0.81 ) }
    dend_19 { pt3dadd( -60.3332, -67.1524, 11.1529, 0.81 ) }
    dend_19 { pt3dadd( -67.791, -71.1733, 16.385, 0.81 ) }
    dend_19 { pt3dadd( -74.2101, -76.3666, 21.9008, 0.81 ) }
    dend_19 { pt3dadd( -80.2777, -81.8299, 27.5387, 0.81 ) }
    dend_19 { pt3dadd( -86.5079, -88.5213, 31.2915, 0.81 ) }
    dend_19 { pt3dadd( -90.8695, -96.4203, 35.2085, 0.81 ) }
    dend_19 { pt3dadd( -94.5207, -104.523, 39.4037, 0.81 ) }
    dend_19 { pt3dadd( -99.0166, -112.175, 43.6706, 0.81 ) }
    dend_19 { pt3dadd( -103.913, -119.541, 48.0238, 0.81 ) }
    dend_19 { pt3dadd( -108.92, -126.465, 52.9732, 0.81 ) }
    dend_19 { pt3dadd( -115.748, -131.541, 58.099, 0.81 ) }
    dend_19 { pt3dadd( -122.788, -135.37, 64.0162, 0.81 ) }
    dend_19 { pt3dadd( -130.034, -140.274, 68.7273, 0.81 ) }
    dend_19 { pt3dadd( -137.678, -142.97, 74.5522, 0.81 ) }
    dend_19 { pt3dadd( -145.92, -145.4, 79.6369, 0.81 ) }
    dend_19 { pt3dadd( -154.213, -147.201, 84.9101, 0.81 ) }
    dend_19 { pt3dadd( -161.947, -147.276, 91.2497, 0.81 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 87/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -23.3851, -45.347, -4.38767, 0.81 ) }
    dend_16 { pt3dadd( -26.1465, -49.9706, -5.20751, 0.81 ) }
    dend_16 { pt3dadd( -28.6256, -54.065, -5.82615, 1.08 ) }
    dend_16 { pt3dadd( -29.9782, -56.0865, -6.08699, 1.08 ) }
    dend_16 { pt3dadd( -31.7849, -58.9678, -6.63091, 1.08 ) }
    dend_16 { pt3dadd( -32.7038, -60.5466, -6.95624, 1.08 ) }
    dend_16 { pt3dadd( -35.5369, -65.3522, -7.90839, 1.08 ) }
    dend_16 { pt3dadd( -35.6751, -65.5757, -7.94318, 1.08 ) }
    dend_16 { pt3dadd( -37.6042, -68.494, -8.53045, 0.81 ) }
    dend_16 { pt3dadd( -40.653, -73.3543, -9.61477, 0.54 ) }
    dend_16 { pt3dadd( -42.5341, -76.803, -10.4224, 1.08 ) }
    dend_16 { pt3dadd( -45.3629, -82.9514, -11.8252, 1.08 ) }
    dend_16 { pt3dadd( -46.5333, -86.2515, -12.5725, 1.08 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_16 { pt3dadd( -47.1744, -89.0022, -13.1997, 0.81 ) }
    dend_16 { pt3dadd( -47.4592, -91.7805, -13.7284, 0.81 ) }
    dend_16 { pt3dadd( -47.4641, -94.752, -14.1031, 1.08 ) }
    dend_16 { pt3dadd( -46.8972, -99.9358, -14.7615, 1.08 ) }
    dend_16 { pt3dadd( -46.1896, -103.534, -15.1851, 0.81 ) }
    dend_16 { pt3dadd( -45.1687, -109.539, -15.7697, 0.54 ) }
    dend_16 { pt3dadd( -44.7832, -112.901, -15.9786, 0.54 ) }
    dend_16 { pt3dadd( -44.6021, -115.975, -16.1467, 0.54 ) }
    dend_16 { pt3dadd( -44.6266, -119.483, -16.3012, 0.54 ) }
    dend_16 { pt3dadd( -44.8332, -122.119, -16.3806, 1.08 ) }
    dend_16 { pt3dadd( -45.7412, -127.261, -16.4732, 1.08 ) }
    dend_16 { pt3dadd( -48.4682, -137.316, -16.6386, 1.08 ) }
    dend_16 { pt3dadd( -48.55, -137.567, -16.6484, 1.08 ) }
    dend_16 { pt3dadd( -50.172, -141.986, -16.8162, 1.08 ) }
    dend_16 { pt3dadd( -52.073, -146.509, -16.8911, 1.08 ) }
    dend_16 { pt3dadd( -53.8997, -150.623, -16.9687, 1.08 ) }
    dend_16 { pt3dadd( -54.6687, -152.037, -16.9989, 0.81 ) }
    dend_16 { pt3dadd( -54.8251, -152.252, -17.0038, 0.81 ) }
    dend_16 { pt3dadd( -55.6664, -153.6, -17.0804, 0.81 ) }
    dend_16 { pt3dadd( -57.2356, -156.556, -17.4091, 0.81 ) }
    dend_16 { pt3dadd( -59.1275, -160.617, -17.9883, 0.81 ) }
    dend_16 { pt3dadd( -61.5251, -165.96, -18.815, 0.81 ) }
    dend_16 { pt3dadd( -62.7854, -168.875, -19.3121, 0.81 ) }
    dend_16 { pt3dadd( -65.458, -175.207, -20.4198, 0.81 ) }
    dend_16 { pt3dadd( -66.644, -178.18, -20.9717, 1.08 ) }
    dend_16 { pt3dadd( -68.1015, -182.179, -21.7415, 1.08 ) }
    dend_16 { pt3dadd( -69.1205, -185.141, -22.2462, 1.08 ) }
    dend_16 { pt3dadd( -69.9873, -188.029, -22.6049, 0.27 ) }
    dend_16 { pt3dadd( -71.4138, -192.26, -22.8861, 0.27 ) }
    dend_16 { pt3dadd( -72.0969, -194.029, -22.8415, 0.27 ) }
    dend_16 { pt3dadd( -73.1475, -196.776, -22.632, 0.54 ) }
    dend_16 { pt3dadd( -74.0338, -199.574, -22.3997, 0.54 ) }
    dend_16 { pt3dadd( -75.21, -203.889, -22.0775, 0.54 ) }
    dend_16 { pt3dadd( -75.3596, -204.393, -22.0403, 0.54 ) }
    dend_16 { pt3dadd( -76.1209, -207.548, -21.8479, 0.54 ) }
    dend_16 { pt3dadd( -77.056, -212.302, -21.8499, 0.54 ) }
    dend_16 { pt3dadd( -77.8956, -217.546, -22.1219, 0.54 ) }
    dend_16 { pt3dadd( -78.9609, -224.074, -22.828, 0.54 ) }
    dend_16 { pt3dadd( -79.4657, -227.194, -23.2754, 0.54 ) }
    dend_16 { pt3dadd( -80.1901, -231.557, -23.9986, 0.54 ) }
    dend_16 { pt3dadd( -81.1025, -236.889, -24.9872, 0.54 ) }
    dend_16 { pt3dadd( -82.0822, -242.123, -26.042, 0.54 ) }
    dend_16 { pt3dadd( -83.7206, -249.119, -27.5795, 0.54 ) }
    dend_16 { pt3dadd( -83.9963, -250.27, -27.8439, 0.54 ) }
    dend_16 { pt3dadd( -85.3951, -255.522, -29.0104, 0.54 ) }
    dend_16 { pt3dadd( -86.3419, -258.718, -29.6801, 0.54 ) }
    dend_16 { pt3dadd( -87.3814, -262.315, -30.3331, 0.54 ) }
    dend_16 { pt3dadd( -88.5955, -267.07, -31.22, 0.54 ) }
    dend_16 { pt3dadd( -89.5274, -271.087, -31.9462, 0.54 ) }
    dend_16 { pt3dadd( -90.6267, -275.782, -32.7942, 0.54 ) }
    dend_16 { pt3dadd( -91.7019, -280.05, -33.6879, 0.54 ) }
    dend_16 { pt3dadd( -91.7122, -280.096, -33.6985, 0.54 ) }
    dend_16 { pt3dadd( -92.134, -282.93, -34.3724, 0.54 ) }
    // Section: dend_12, id: dend_12, parent: dend_10 (entry count 53/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( -118.404, 168.016, -9.85607, 0.81 ) }
    dend_12 { pt3dadd( -120.808, 170.837, -9.49009, 0.81 ) }
    dend_12 { pt3dadd( -122.951, 172.928, -9.17522, 0.81 ) }
    dend_12 { pt3dadd( -125.378, 175.111, -8.74232, 0.81 ) }
    dend_12 { pt3dadd( -128.389, 177.34, -8.13457, 0.81 ) }
    dend_12 { pt3dadd( -131.278, 179.512, -7.32099, 0.81 ) }
    dend_12 { pt3dadd( -131.323, 179.548, -7.3051, 0.81 ) }
    dend_12 { pt3dadd( -134.519, 182.184, -5.99873, 0.81 ) }
    dend_12 { pt3dadd( -137.404, 184.395, -4.69165, 0.81 ) }
    dend_12 { pt3dadd( -140.543, 186.549, -3.15325, 0.81 ) }
    dend_12 { pt3dadd( -144.899, 189.426, -0.795488, 0.81 ) }
    dend_12 { pt3dadd( -148.34, 191.615, 1.09121, 0.81 ) }
    dend_12 { pt3dadd( -155.039, 197.663, 5.17327, 0.81 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 66/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( -118.404, 168.016, -9.85607, 0.27 ) }
    dend_11 { pt3dadd( -120.391, 171.153, -8.31139, 0.27 ) }
    dend_11 { pt3dadd( -123.211, 175.605, -6.1191, 0.27 ) }
    dend_11 { pt3dadd( -124.68, 177.923, -4.9776, 0.27 ) }
    // Section: dend_9, id: dend_9, parent: dend_7 (entry count 70/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -26.3067, -19.9434, -26.9487, 0.54 ) }
    dend_9 { pt3dadd( -26.7577, -23.3611, -27.6796, 0.54 ) }
    dend_9 { pt3dadd( -27.3451, -26.5539, -28.3113, 0.54 ) }
    dend_9 { pt3dadd( -28.0851, -29.5749, -28.927, 0.54 ) }
    dend_9 { pt3dadd( -29.9177, -35.0533, -30.1226, 0.54 ) }
    dend_9 { pt3dadd( -31.9706, -40.1952, -31.4226, 0.54 ) }
    dend_9 { pt3dadd( -34.8697, -46.6439, -33.3707, 0.54 ) }
    dend_9 { pt3dadd( -34.983, -46.8703, -33.4489, 0.54 ) }
    dend_9 { pt3dadd( -37.0772, -50.7513, -34.8735, 0.54 ) }
    dend_9 { pt3dadd( -40.6331, -57.0183, -37.237, 0.54 ) }
    dend_9 { pt3dadd( -43.2778, -61.1026, -38.7851, 0.54 ) }
    dend_9 { pt3dadd( -45.8128, -64.8596, -40.5427, 0.54 ) }
    dend_9 { pt3dadd( -47.6224, -67.5298, -42.0454, 0.54 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 83/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -26.3067, -19.9434, -26.9487, 0.54 ) }
    dend_8 { pt3dadd( -31.7424, -21.7608, -31.5956, 0.54 ) }
    dend_8 { pt3dadd( -35.9095, -23.1711, -34.6284, 0.81 ) }
    dend_8 { pt3dadd( -38.7819, -24.2434, -36.4848, 0.81 ) }
    dend_8 { pt3dadd( -49.0662, -28.4834, -42.7305, 0.81 ) }
    dend_8 { pt3dadd( -54.9344, -31.0371, -45.9443, 0.81 ) }
    dend_8 { pt3dadd( -60.1352, -33.4522, -48.7395, 0.81 ) }
    dend_8 { pt3dadd( -67.5623, -36.979, -52.2828, 0.81 ) }
    dend_8 { pt3dadd( -72.137, -39.327, -54.2341, 0.81 ) }
    dend_8 { pt3dadd( -77.418, -42.2619, -56.3788, 0.81 ) }
    dend_8 { pt3dadd( -83.8766, -46.1397, -58.8209, 0.81 ) }
    dend_8 { pt3dadd( -92.584, -51.636, -62.3004, 0.81 ) }
    dend_8 { pt3dadd( -92.6314, -51.6668, -62.3194, 0.81 ) }
    dend_8 { pt3dadd( -101.01, -57.1582, -65.8175, 0.81 ) }
    dend_8 { pt3dadd( -101.223, -57.2925, -65.9104, 0.81 ) }
    dend_8 { pt3dadd( -110.789, -63.2514, -70.0263, 0.81 ) }
    // Section: dend_28, id: dend_28, parent: dend_26 (entry count 99/100)
    dend_28 { pt3dclear() }
    dend_28 { pt3dadd( 251.555, 42.1368, 76.9166, 0.27 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_28 { pt3dadd( 259.492, 44.4519, 82.5171, 0.27 ) }
    dend_28 { pt3dadd( 267.327, 46.5587, 88.3443, 0.27 ) }
    // Section: dend_27, id: dend_27, parent: dend_26 (entry count 2/100)
    dend_27 { pt3dclear() }
    dend_27 { pt3dadd( 251.555, 42.1368, 76.9166, 0.27 ) }
    dend_27 { pt3dadd( 259.471, 44.2969, 82.6119, 0.27 ) }
    dend_27 { pt3dadd( 267.761, 44.7796, 88.1829, 0.27 ) }
    // Section: dend_18, id: dend_18, parent: dend_16 (entry count 5/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -92.134, -282.93, -34.3724, 0.54 ) }
    dend_18 { pt3dadd( -92.7862, -289.029, -35.3604, 0.54 ) }
    dend_18 { pt3dadd( -93.5468, -295.719, -36.4755, 0.54 ) }
    dend_18 { pt3dadd( -93.5804, -296.086, -36.532, 0.54 ) }
    dend_18 { pt3dadd( -94.3724, -303.077, -37.2595, 0.54 ) }
    dend_18 { pt3dadd( -95.0005, -307.549, -37.5669, 0.54 ) }
    dend_18 { pt3dadd( -95.0436, -307.809, -37.5739, 0.54 ) }
    dend_18 { pt3dadd( -96.814, -316.287, -37.3904, 0.54 ) }
    dend_18 { pt3dadd( -98.1827, -322.484, -37.0141, 0.54 ) }
    dend_18 { pt3dadd( -99.6902, -329.034, -36.4996, 0.54 ) }
    dend_18 { pt3dadd( -101.84, -337.443, -35.4016, 0.54 ) }
    dend_18 { pt3dadd( -103.557, -343.139, -34.4179, 0.54 ) }
    dend_18 { pt3dadd( -105.519, -348.828, -33.2475, 0.54 ) }
    dend_18 { pt3dadd( -107.31, -353.134, -32.1402, 0.54 ) }
    dend_18 { pt3dadd( -109.943, -358.332, -30.5816, 0.54 ) }
    dend_18 { pt3dadd( -113.058, -363.455, -28.8892, 0.54 ) }
    dend_18 { pt3dadd( -115.166, -366.036, -27.8497, 0.54 ) }
    dend_18 { pt3dadd( -117.043, -367.781, -27.0977, 0.54 ) }
    dend_18 { pt3dadd( -118.515, -368.817, -26.6092, 0.54 ) }
    dend_18 { pt3dadd( -121.54, -370.526, -25.8049, 0.54 ) }
    dend_18 { pt3dadd( -124.72, -372.057, -25.1316, 0.54 ) }
    dend_18 { pt3dadd( -127.659, -373.527, -24.6455, 0.54 ) }
    dend_18 { pt3dadd( -130.084, -374.942, -24.1841, 0.54 ) }
    dend_18 { pt3dadd( -133.241, -376.95, -23.5017, 0.54 ) }
    dend_18 { pt3dadd( -134.951, -378.203, -23.1785, 0.54 ) }
    dend_18 { pt3dadd( -136.577, -379.57, -22.9358, 0.54 ) }
    dend_18 { pt3dadd( -140.148, -382.998, -22.3013, 0.54 ) }
    dend_18 { pt3dadd( -143.257, -386.393, -21.5922, 0.54 ) }
    dend_18 { pt3dadd( -146.22, -390.153, -20.6603, 0.54 ) }
    dend_18 { pt3dadd( -148.697, -393.828, -19.7057, 0.54 ) }
    dend_18 { pt3dadd( -151.192, -398.339, -18.5343, 0.54 ) }
    dend_18 { pt3dadd( -153.023, -402.53, -17.4138, 0.54 ) }
    dend_18 { pt3dadd( -154.189, -405.791, -16.536, 0.54 ) }
    dend_18 { pt3dadd( -155.265, -410.1, -15.1863, 0.54 ) }
    dend_18 { pt3dadd( -155.424, -412.216, -14.4042, 0.54 ) }
    dend_18 { pt3dadd( -154.942, -416.397, -12.1753, 0.54 ) }
    dend_18 { pt3dadd( -154.785, -416.679, -11.9945, 0.54 ) }
    // Section: dend_17, id: dend_17, parent: dend_16 (entry count 42/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -92.134, -282.93, -34.3724, 0.54 ) }
    dend_17 { pt3dadd( -93.5729, -286.865, -31.1626, 0.54 ) }
    dend_17 { pt3dadd( -94.4291, -289.206, -29.2529, 0.54 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
    ModelViewParmSubset_2 = new SectionList()
    dend_23 ModelViewParmSubset_2.append()
    dend_20 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_25 ModelViewParmSubset_2.append()
    dend_24 ModelViewParmSubset_2.append()
    dend_22 ModelViewParmSubset_2.append()
    dend_21 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_29 ModelViewParmSubset_2.append()
    dend_26 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_28 ModelViewParmSubset_2.append()
    dend_27 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_23, dend_20, dend_13, dend_6, dend_3, dend_0, dend_25, dend_24, dend_22, dend_21, dend_15, dend_14, dend_10, dend_7, dend_5, dend_4, dend_2, dend_1, dend_29, dend_26, dend_19, dend_16, dend_12, dend_11, dend_9, dend_8, dend_28, dend_27, dend_18, dend_17]}
    ModelViewParmSubset_3 = new SectionList()
    soma_0 ModelViewParmSubset_3.append()
    dend_23 ModelViewParmSubset_3.append()
    dend_20 ModelViewParmSubset_3.append()
    dend_13 ModelViewParmSubset_3.append()
    dend_6 ModelViewParmSubset_3.append()
    dend_3 ModelViewParmSubset_3.append()
    dend_0 ModelViewParmSubset_3.append()
    dend_25 ModelViewParmSubset_3.append()
    dend_24 ModelViewParmSubset_3.append()
    dend_22 ModelViewParmSubset_3.append()
    dend_21 ModelViewParmSubset_3.append()
    dend_15 ModelViewParmSubset_3.append()
    dend_14 ModelViewParmSubset_3.append()
    dend_10 ModelViewParmSubset_3.append()
    dend_7 ModelViewParmSubset_3.append()
    dend_5 ModelViewParmSubset_3.append()
    dend_4 ModelViewParmSubset_3.append()
    dend_2 ModelViewParmSubset_3.append()
    dend_1 ModelViewParmSubset_3.append()
    dend_29 ModelViewParmSubset_3.append()
    dend_26 ModelViewParmSubset_3.append()
    dend_19 ModelViewParmSubset_3.append()
    dend_16 ModelViewParmSubset_3.append()
    dend_12 ModelViewParmSubset_3.append()
    dend_11 ModelViewParmSubset_3.append()
    dend_9 ModelViewParmSubset_3.append()
    dend_8 ModelViewParmSubset_3.append()
    dend_28 ModelViewParmSubset_3.append()
    dend_27 ModelViewParmSubset_3.append()
    dend_18 ModelViewParmSubset_3.append()
    dend_17 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_4 = new SectionList()
    axon_0 ModelViewParmSubset_4.append()
    axon_1 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_20]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_20 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_0 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_25]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_25 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_21]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_21 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_14 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_10 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_7 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_5 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_4 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_2 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_29]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_29 OneSecGrp_SectionRef_22.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_26]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_26 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_24, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_24 = new SectionList()
    dend_19 OneSecGrp_SectionRef_24.append()

    // Group: {name=OneSecGrp_SectionRef_25, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_25 = new SectionList()
    dend_16 OneSecGrp_SectionRef_25.append()

    // Group: {name=OneSecGrp_SectionRef_26, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_26 = new SectionList()
    dend_12 OneSecGrp_SectionRef_26.append()

    // Group: {name=OneSecGrp_SectionRef_28, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_28 = new SectionList()
    dend_9 OneSecGrp_SectionRef_28.append()

    // Group: {name=OneSecGrp_SectionRef_29, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_29 = new SectionList()
    dend_8 OneSecGrp_SectionRef_29.append()

    // Group: {name=OneSecGrp_SectionRef_32, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_32 = new SectionList()
    dend_18 OneSecGrp_SectionRef_32.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_6 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_3 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_23]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_23 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_13 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_15 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_24]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_24 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_1 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_27, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_27 = new SectionList()
    dend_11 OneSecGrp_SectionRef_27.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_22]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_22 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_30, groups=[], sections=[dend_28]}
    OneSecGrp_SectionRef_30 = new SectionList()
    dend_28 OneSecGrp_SectionRef_30.append()

    // Group: {name=OneSecGrp_SectionRef_31, groups=[], sections=[dend_27]}
    OneSecGrp_SectionRef_31 = new SectionList()
    dend_27 OneSecGrp_SectionRef_31.append()

    // Group: {name=OneSecGrp_SectionRef_33, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_33 = new SectionList()
    dend_17 OneSecGrp_SectionRef_33.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19, dend_20, dend_21, dend_22, dend_23, dend_24, dend_25, dend_26, dend_27, dend_28, dend_29], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()
    dend_20 basal.append()
    dend_21 basal.append()
    dend_22 basal.append()
    dend_23 basal.append()
    dend_24 basal.append()
    dend_25 basal.append()
    dend_26 basal.append()
    dend_27 basal.append()
    dend_28 basal.append()
    dend_29 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_23, dend_23, dend_23, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_20, dend_13, dend_13, dend_13, dend_13, dend_13, dend_6, dend_6, dend_3, dend_3, dend_3, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_25, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_24, dend_22, dend_22, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_21, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, axon_1, axon_1, dend_29, dend_29, dend_29, dend_29, dend_29, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_26, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_19, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_28, dend_28, dend_27, dend_27, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_18, dend_17, dend_17]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_23 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_20 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_25 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_24 all.append()
    dend_22 all.append()
    dend_22 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_21 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_29 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_26 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_19 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_28 all.append()
    dend_28 all.append()
    dend_27 all.append()
    dend_27 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_18 all.append()
    dend_17 all.append()
    dend_17 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert KdShu2007
        gmax_KdShu2007 = 4.2499998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dNAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__dNAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dNAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__dNAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_20 nseg = 13
    dend_0 nseg = 9
    dend_25 nseg = 11
    dend_21 nseg = 3
    dend_14 nseg = 19
    dend_10 nseg = 9
    dend_7 nseg = 3
    dend_5 nseg = 11
    dend_4 nseg = 11
    dend_2 nseg = 3
    dend_29 nseg = 3
    dend_26 nseg = 3
    dend_19 nseg = 11
    dend_16 nseg = 13
    dend_12 nseg = 3
    dend_9 nseg = 3
    dend_8 nseg = 5
    dend_18 nseg = 7
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate dNAC222_L5_LBC_58bb1b2407_0_0


