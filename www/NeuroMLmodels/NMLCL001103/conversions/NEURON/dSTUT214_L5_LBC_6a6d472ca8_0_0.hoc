// Cell: dSTUT214_L5_LBC_6a6d472ca8_0_0
/*
{
  "id" : "dSTUT214_L5_LBC_6a6d472ca8_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "1.42539, -10.6376, 0.0, 4.61764", "1.16889, -9.52164, 0.0, 8.50261", "0.912393, -8.40563, 0.0, 10.6819", "0.655896, -7.28962, 0.0, 12.4606", "0.399399, -6.17362, 0.0, 14.126", "0.142902, -5.05761, 0.0, 15.1371", "-0.113594, -3.9416, 0.0, 15.8374", "-0.370091, -2.8256, 0.0, 16.1877", "-0.626588, -1.70959, 0.0, 16.953", "-0.883085, -0.593582, 0.0, 17.4193", "-1.13958, 0.522425, 0.0, 17.7718", "-1.39608, 1.63843, 0.0, 17.9686", "-1.65257, 2.75444, 0.0, 17.7521", "-1.90907, 3.87045, 0.0, 17.4043", "-2.16557, 4.98645, 0.0, 17.0101", "-2.42207, 6.10246, 0.0, 16.4966", "-2.67856, 7.21847, 0.0, 15.2605", "-2.93506, 8.33447, 0.0, 13.6816", "-3.19156, 9.45048, 0.0, 11.3092", "-3.44805, 10.5665, 0.0, 8.03973", "-3.70455, 11.6825, 0.0, 4.69987" ]
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-2.69573, 0.855072, -7.18, 1.17", "-2.99977, 1.32078, -7.94471, 1.17", "-3.31184, 1.93193, -8.84728, 1.17", "-3.85174, 3.40551, -10.8603, 1.02", "-4.0763, 4.16205, -11.8841, 1.02", "-4.29864, 4.88327, -12.8748, 0.8", "-4.56223, 5.67266, -13.9847, 0.8", "-4.6949, 6.11801, -14.5818, 0.8", "-4.92089, 7.05933, -15.7871, 0.8", "-5.02304, 7.79631, -16.6674, 0.8", "-5.03839, 8.44203, -17.4493, 0.8", "-4.97061, 9.07628, -18.191, 0.8", "-4.8665, 9.58753, -18.7415, 0.8", "-4.62728, 10.396, -19.4266, 0.8", "-4.43193, 10.916, -19.7508, 0.8", "-3.96606, 12.0832, -20.3111, 0.8", "-3.53921, 13.1298, -20.7441, 0.58", "-3.15913, 14.0884, -21.0939, 0.58", "-2.86615, 14.9042, -21.4103, 0.36", "-2.6656, 15.646, -21.7722, 0.22", "-2.55408, 16.1226, -22.0758, 0.22", "-2.48417, 16.4586, -22.3904, 0.22", "-2.44113, 16.6571, -22.6708, 0.22", "-2.31871, 17.1184, -23.5321, 0.22", "-2.1828, 17.8861, -25.1346, 0.22", "-2.14969, 18.2573, -26.0248, 0.22", "-2.14937, 18.4733, -26.6195, 0.22", "-2.2045, 18.7152, -27.4721, 0.22", "-2.37858, 18.9004, -28.5066, 0.22", "-2.7475, 18.9653, -29.6842, 0.22", "-3.36055, 18.7529, -31.0278, 0.22", "-3.61153, 18.5902, -31.5277, 0.22", "-4.21295, 18.0501, -32.5799, 0.22", "-4.67384, 17.5161, -33.3322, 0.22", "-5.19649, 16.8461, -34.0734, 0.22", "-5.76036, 16.1157, -34.7629, 0.22", "-6.25132, 15.5197, -35.3067, 0.22", "-6.87251, 14.8144, -35.958, 0.22", "-8.48414, 13.0731, -37.4881, 0.22", "-8.94626, 12.5917, -37.909, 0.22", "-9.39037, 12.1431, -38.2864, 0.22", "-10.1489, 11.3789, -38.8581, 0.22", "-10.8692, 10.6728, -39.3444, 0.22", "-11.7326, 9.88062, -39.8627, 0.22", "-12.1412, 9.55332, -40.012, 0.22", "-12.6026, 9.19124, -40.1777, 0.22" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999893613021856,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "1.98427, -9.44293, -4.03, 2.04", "2.11956, -11.0403, -3.07712, 2.19", "2.24786, -12.5553, -2.17341, 1.9", "2.3659, -13.949, -1.34205, 1.9" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999893613021856
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-5.41573, -6.51693, -0.44, 0.51", "-5.94254, -6.40888, 0.201778, 0.51", "-6.7219, -6.1437, 1.05871, 0.51", "-7.35685, -5.8845, 1.68926, 0.51", "-8.37159, -5.42976, 2.62835, 1.02", "-8.92168, -5.18821, 3.1076, 0.88", "-9.9252, -4.76923, 3.89575, 0.51", "-10.8199, -4.37454, 4.46186, 0.22", "-11.33, -4.16466, 4.70349, 0.22", "-11.5684, -4.08586, 4.78887, 0.22", "-12.8581, -3.74792, 5.118, 0.22", "-13.7088, -3.5516, 5.35762, 0.22", "-14.5598, -3.37134, 5.59328, 0.66", "-15.2276, -3.23946, 5.80285, 0.95", "-16.2763, -3.04166, 6.14779, 0.58", "-17.3019, -2.87688, 6.48278, 0.44", "-18.5447, -2.72356, 6.87498, 0.22", "-19.0844, -2.70345, 7.0624, 0.07", "-19.6926, -2.73086, 7.2584, 0.07", "-20.3257, -2.80125, 7.43753, 0.58", "-21.166, -2.96875, 7.65363, 1.09", "-21.9174, -3.17166, 7.8503, 0.73", "-22.9845, -3.45201, 8.09641, 0.22", "-23.4453, -3.54428, 8.22986, 0.22", "-23.7753, -3.57528, 8.34011, 0.22", "-24.603, -3.54929, 8.64093, 0.22", "-25.2505, -3.45081, 8.88548, 0.51", "-26.4351, -3.16078, 9.31738, 0.29", "-27.1777, -2.94401, 9.55634, 0.51", "-27.6861, -2.80668, 9.69886, 0.51", "-28.1285, -2.70098, 9.78712, 0.29", "-28.5329, -2.61948, 9.82924, 0.29", "-29.1188, -2.53299, 9.85859, 0.29", "-29.7621, -2.48747, 9.81155, 0.29", "-30.2613, -2.4773, 9.79511, 0.58", "-30.9122, -2.47888, 9.86474, 0.73", "-31.4282, -2.45092, 9.9919, 0.73", "-32.2606, -2.34531, 10.2906, 0.36", "-33.0811, -2.15328, 10.6901, 0.36", "-34.67, -1.58763, 11.5924, 0.36", "-35.5056, -1.20715, 12.157, 0.66", "-36.3377, -0.765503, 12.7889, 0.15", "-36.8011, -0.495424, 13.1692, 0.15", "-37.7923, 0.09096, 14.0025, 0.58", "-38.2913, 0.351638, 14.4159, 0.22", "-38.9625, 0.615733, 14.8549, 0.22", "-39.1237, 0.644074, 14.957, 0.22", "-39.6119, 0.634195, 15.3175, 0.22", "-40.069, 0.506726, 15.6937, 0.22", "-40.6048, 0.0520501, 16.1458, 0.22", "-40.9753, -0.374927, 16.4505, 0.8", "-41.4035, -1.00215, 16.7473, 0.8", "-49.1489, 1.09424, 20.1448, 0.8" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999893613021856,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "-5.02573, -7.77093, 0.0299997, 0.73", "-6.44667, -7.88059, 0.146314, 0.73", "-8.10351, -7.81835, 0.258493, 0.73", "-9.43996, -7.64372, 0.361174, 0.66", "-11.235, -7.33979, 0.60667, 0.66", "-12.3958, -7.13237, 0.84346, 1.17", "-13.3216, -6.96907, 1.0741, 1.31", "-15.095, -6.61435, 1.51043, 0.8", "-16.8409, -6.24845, 1.94984, 0.8", "-18.5458, -5.92406, 2.35322, 0.58", "-20.4159, -5.6284, 2.75595, 0.36", "-21.7516, -5.48416, 2.97193, 0.22", "-23.089, -5.41169, 3.0954, 0.36", "-24.3402, -5.41866, 3.15014, 0.73", "-25.8039, -5.46558, 3.17142, 0.73", "-27.0648, -5.49571, 3.15738, 0.36", "-28.1596, -5.50674, 3.15816, 0.58", "-29.9728, -5.49776, 3.27845, 0.8", "-31.8102, -5.48957, 3.56137, 0.36", "-33.0194, -5.50611, 3.82904, 0.88", "-33.7128, -5.52478, 4.01018, 1.39", "-34.3, -5.55028, 4.16042, 1.39", "-35.5191, -5.60546, 4.43841, 0.36", "-36.5151, -5.63999, 4.58667, 0.22", "-37.7714, -5.67019, 4.62983, 0.44", "-39.6167, -5.7034, 4.57116, 0.66", "-40.4826, -5.71769, 4.53996, 0.66", "-41.9855, -5.73182, 4.5254, 0.88", "-43.6725, -5.70773, 4.48151, 0.51", "-45.2099, -5.62561, 4.48831, 0.51", "-46.1041, -5.53497, 4.5305, 0.51", "-47.6048, -5.31595, 4.6723, 0.36", "-48.82, -5.0894, 4.87197, 0.36", "-50.4105, -4.73799, 5.36762, 0.22", "-51.5507, -4.51787, 5.99986, 0.22", "-52.3224, -4.49334, 6.62746, 0.44", "-53.0323, -4.6672, 7.12115, 0.58", "-53.3587, -4.85456, 7.28032, 0.58", "-54.0887, -5.32547, 7.60085, 0.58", "-55.0498, -5.9549, 8.0027, 0.22", "-56.1943, -6.67118, 8.42578, 0.51", "-57.5477, -7.45611, 8.88498, 1.17", "-59.3397, -8.35899, 9.47189, 0.36", "-60.4328, -8.81633, 9.8126, 0.15", "-61.4818, -9.17571, 10.1178, 0.29", "-62.6772, -9.47449, 10.4415, 0.8", "-63.5106, -9.61587, 10.6617, 0.8", "-64.9789, -9.81119, 11.0893, 0.22", "-65.8951, -9.92803, 11.3153, 0.73", "-66.2962, -9.99849, 11.4039, 0.73", "-67.621, -10.345, 11.7135, 0.36", "-68.2453, -10.5918, 11.8951, 0.29", "-68.9554, -10.9713, 12.1908, 0.15", "-69.887, -11.5301, 12.6648, 0.15", "-70.5229, -11.9133, 13.0591, 0.15", "-71.1521, -12.2495, 13.4841, 0.15", "-72.2197, -12.7962, 14.2707, 1.02", "-73.1114, -13.216, 14.8824, 1.31", "-73.9515, -13.577, 15.4049, 0.66", "-74.6057, -13.8655, 15.7914, 0.66", "-75.4877, -14.3272, 16.2762, 0.22", "-76.2503, -14.8373, 16.6661, 0.07", "-77.3516, -15.8508, 17.2429, 0.51", "-77.8846, -16.5488, 17.6022, 0.51", "-78.5658, -17.8431, 18.2257, 0.22", "-78.8047, -18.4905, 18.5203, 0.22", "-79.0013, -19.234, 18.8674, 0.22", "-79.187, -20.0414, 19.2777, 0.66", "-79.3704, -21.0784, 19.893, 0.66", "-79.4904, -21.8554, 20.3884, 0.44", "-79.6103, -22.2905, 20.6868, 0.07", "-80.2236, -22.4181, 21.0302, 0.07", "-81.1299, -22.5239, 21.4919, 0.58", "-81.8927, -22.585, 21.8495, 0.8", "-82.2066, -22.6197, 21.9891, 0.8", "-83.2599, -22.7962, 22.4838, 0.07", "-84.2592, -23.0826, 22.9519, 0.36", "-85.1844, -23.4659, 23.3435, 0.22", "-85.6707, -23.7116, 23.5076, 0.22", "-86.5196, -24.1113, 23.7066, 0.8", "-87.028, -24.2944, 23.8107, 0.95", "-88.1728, -24.5444, 23.9966, 0.36", "-89.1832, -24.5621, 24.1287, 0.58", "-90.166, -24.4965, 24.2403, 0.58", "-91.1709, -24.3586, 24.3624, 0.36", "-92.4051, -24.0771, 24.5323, 0.15", "-93.09, -23.872, 24.645, 0.15", "-93.8696, -23.5323, 24.8161, 0.36", "-103.52, -26.8239, 28.2472, 0.36" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999893613021856,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "5.89427, 4.59807, 3.64, 1.17", "6.42265, 4.84313, 3.54161, 0.22", "6.91199, 5.03871, 3.45114, 1.17", "7.3447, 5.18776, 3.37494, 1.17", "7.94202, 5.36559, 3.27706, 1.17", "8.89163, 5.59122, 3.13879, 0.15", "9.07082, 5.62695, 3.11591, 0.15", "9.53262, 5.69595, 3.11766, 0.15", "9.80477, 5.73529, 3.15963, 0.15", "10.085, 5.79143, 3.25473, 0.73", "10.4929, 5.93949, 3.51149, 1.02", "10.764, 6.12546, 3.77717, 1.02", "11.5421, 6.95139, 4.64357, 0.66", "11.7493, 7.22852, 4.8953, 0.44", "12.0041, 7.60172, 5.19774, 0.22", "12.1482, 7.81462, 5.35371, 0.22", "12.4155, 8.11474, 5.53424, 0.22", "12.769, 8.36858, 5.6333, 0.22", "13.3274, 8.63773, 5.65809, 0.95", "13.6209, 8.75623, 5.6683, 1.53", "13.95, 8.88524, 5.6908, 1.53", "14.9989, 9.3274, 5.78067, 0.51", "15.4635, 9.55174, 5.82376, 0.51", "16.0235, 9.88575, 5.87486, 1.02", "16.6692, 10.3559, 5.9368, 0.36", "17.1773, 10.7587, 5.99593, 0.36", "17.7417, 11.2376, 6.07132, 0.95", "18.1747, 11.6392, 6.13808, 0.95", "18.6716, 12.1158, 6.2311, 0.73", "19.3408, 12.767, 6.35972, 0.29", "20.1005, 13.5325, 6.49401, 0.29", "20.4447, 13.9022, 6.56927, 0.29", "20.7167, 14.2293, 6.66525, 1.02", "21.1313, 14.8052, 6.87128, 1.09", "21.2469, 15.0031, 6.96052, 1.09", "21.5448, 15.6539, 7.34295, 0.51", "21.7903, 16.285, 7.81505, 0.22", "21.9967, 16.7702, 8.23856, 0.66", "22.2, 17.1302, 8.63817, 0.66", "22.557, 17.5974, 9.26587, 0.44", "22.9943, 18.0283, 9.9852, 0.15", "23.3747, 18.2635, 10.5625, 0.15", "23.6473, 18.3574, 10.9243, 0.95", "24.5763, 18.4909, 12.0621, 0.22", "24.9288, 18.4925, 12.4589, 0.29", "25.1568, 18.4793, 12.6779, 0.29", "25.7894, 18.4768, 13.1976, 0.29", "25.9825, 18.5029, 13.3515, 0.29", "26.1448, 18.5422, 13.4846, 0.29", "26.3984, 18.8095, 13.6642, 0.58", "26.7289, 19.3997, 13.9249, 0.44", "27.0389, 20.0649, 14.17, 0.15", "27.1981, 20.5056, 14.2986, 0.73", "32.2079, 24.7544, 16.2285, 0.73" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999893613021856
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "3.96427, 6.56457, 1.49, 0.58", "3.99521, 7.13375, 2.03589, 0.44", "4.08396, 7.7217, 2.59815, 0.22", "4.20872, 8.06188, 2.91325, 0.22", "4.57894, 8.49708, 3.25862, 0.22", "4.78061, 8.64387, 3.35811, 0.22", "5.36848, 8.96155, 3.60112, 0.22", "5.73537, 9.093, 3.70836, 0.66", "6.51317, 9.28186, 3.8661, 1.09", "7.84818, 9.54021, 3.96541, 0.15", "8.65052, 9.68279, 3.97782, 0.15", "9.67481, 9.8903, 3.95457, 0.8", "10.1944, 10.0258, 3.9284, 1.09", "11.2786, 10.4334, 3.89936, 0.29", "12.5606, 11.1798, 3.81581, 0.8", "12.9938, 11.523, 3.76618, 0.8", "13.6427, 12.1561, 3.66259, 0.44", "14.2086, 12.7865, 3.55367, 0.66", "15.0121, 13.7232, 3.41681, 1.24", "15.9853, 14.9151, 3.23143, 0.29", "16.7424, 15.8059, 3.09433, 0.58", "17.7123, 16.8279, 2.87357, 0.22", "18.4083, 17.4609, 2.7318, 0.8", "19.3004, 18.1872, 2.62337, 0.8", "20.1259, 18.8168, 2.62864, 0.29", "20.7198, 19.2525, 2.72171, 0.29", "21.4061, 19.7729, 2.89428, 0.15", "22.5387, 20.6223, 3.26229, 0.73", "23.8063, 21.599, 3.74077, 0.07", "24.6756, 22.357, 4.09443, 1.24", "24.9251, 22.6139, 4.19854, 1.24", "25.7554, 23.6626, 4.52219, 0.15", "26.0037, 24.0499, 4.60168, 0.15", "26.2417, 24.4928, 4.64085, 0.44", "26.865, 25.7533, 4.6494, 0.44", "27.4337, 26.9154, 4.63109, 0.15", "27.7175, 27.4875, 4.62503, 0.73", "28.0618, 28.173, 4.62196, 1.31", "28.3807, 28.7672, 4.6221, 1.02", "29.1034, 29.9715, 4.61327, 0.15", "29.6034, 30.6968, 4.60153, 0.36", "29.9141, 31.1055, 4.5656, 0.36", "30.2644, 31.556, 4.5065, 0.51", "30.8774, 32.3506, 4.40426, 0.22", "31.3327, 32.9805, 4.33263, 0.36", "31.6706, 33.5036, 4.29366, 0.8", "32.2183, 34.4403, 4.28479, 0.8", "32.6387, 35.1872, 4.32777, 0.07", "32.9426, 35.6935, 4.39262, 0.07", "33.2017, 36.0937, 4.47154, 0.07", "33.4991, 36.4639, 4.56487, 0.07", "34.1353, 37.1087, 4.74225, 0.44", "34.6446, 37.5274, 4.80989, 0.44", "35.4818, 38.148, 4.80468, 0.66", "36.1966, 38.6858, 4.74686, 1.24", "36.6628, 39.0737, 4.6885, 1.53", "36.8011, 39.2087, 4.66231, 1.53", "37.8028, 40.4261, 4.4306, 0.22", "38.2134, 41.0445, 4.32595, 0.22", "38.5812, 41.7222, 4.22541, 0.36", "38.9897, 42.6228, 4.08194, 0.29", "39.319, 43.4939, 3.98555, 0.29", "39.6029, 44.4534, 3.92444, 0.29", "39.7491, 45.2357, 3.91673, 0.88", "39.7931, 45.7271, 3.92519, 0.88", "39.8188, 46.999, 3.95612, 0.07", "39.7885, 48.0927, 3.97624, 0.29", "39.7545, 48.9564, 3.99051, 0.29", "39.759, 49.6063, 3.98463, 0.29", "39.8988, 50.7129, 3.92988, 0.07", "40.0252, 51.1689, 3.85729, 0.07", "40.2821, 51.7765, 3.6951, 0.29", "40.6792, 52.5811, 3.41114, 0.88", "41.1841, 53.5035, 3.08312, 0.51", "41.5996, 54.302, 2.83035, 0.15", "42.0023, 55.2684, 2.5497, 0.15", "42.1878, 55.9438, 2.38869, 0.15", "42.3481, 57.1048, 2.15558, 1.31", "42.3661, 57.7782, 2.074, 1.61", "42.3261, 58.957, 2.00956, 1.82", "42.2565, 60.3627, 1.9612, 0.29", "42.2379, 61.0306, 1.93953, 0.22", "42.2586, 61.9462, 1.87573, 0.29", "42.3781, 63.2852, 1.73223, 0.07", "42.47, 63.743, 1.65912, 0.07", "42.8916, 64.9506, 1.41302, 0.07", "43.3724, 65.9023, 1.27216, 0.22", "43.9018, 66.7359, 1.19468, 1.31", "44.5376, 67.5538, 1.21269, 0.95", "45.5677, 68.7514, 1.32797, 0.15", "46.137, 69.4002, 1.4609, 0.15", "47.2309, 70.6254, 1.84528, 0.8", "47.9667, 71.4225, 2.16041, 1.75", "49.4499, 72.9844, 2.8412, 0.15", "49.7945, 73.3376, 3.00418, 0.15", "50.4481, 73.993, 3.29113, 0.15", "50.7742, 74.3197, 3.38557, 0.15", "51.1687, 74.7164, 3.43065, 0.15", "51.9441, 75.5247, 3.44287, 0.44", "52.4117, 76.0609, 3.40888, 0.66", "53.5177, 77.4097, 3.38751, 0.15", "54.2565, 78.3583, 3.4034, 0.8", "54.4546, 78.6264, 3.42269, 0.8", "55.0214, 79.4588, 3.5126, 0.15", "55.6943, 80.524, 3.67839, 0.07", "56.4, 81.6912, 3.9058, 1.68", "56.9684, 82.6267, 4.15138, 1.46", "57.7637, 83.8267, 4.52527, 0.15", "58.099, 84.2682, 4.66579, 0.51", "58.3425, 84.5486, 4.7614, 0.51", "58.918, 85.1442, 4.96279, 0.15", "59.6749, 85.9103, 5.18262, 0.36", "60.0989, 86.3367, 5.30648, 0.36", "60.6, 86.8601, 5.4448, 0.22", "61.0796, 87.3924, 5.5863, 0.22", "61.3955, 87.7879, 5.68217, 0.22", "61.6578, 88.1555, 5.75995, 0.22", "61.8527, 88.4541, 5.80508, 0.22", "61.9826, 88.6548, 5.83527, 0.22", "62.2741, 89.0908, 5.90849, 0.22", "62.6594, 89.6415, 5.99835, 0.22", "63.3826, 90.6672, 6.13319, 1.61", "63.7268, 91.1354, 6.18291, 1.61", "64.8057, 92.6077, 6.30303, 0.29", "65.4489, 93.4885, 6.39931, 0.07", "66.0743, 94.3653, 6.51059, 0.66", "66.6575, 95.2701, 6.6468, 0.66", "67.0223, 95.9292, 6.76465, 0.66", "67.5665, 97.1203, 7.00884, 0.07", "68.0463, 98.4246, 7.29641, 0.8", "68.1389, 98.7321, 7.36793, 1.17", "68.4338, 99.8607, 7.65325, 0.07", "68.6215, 100.62, 7.85203, 0.22", "68.9064, 101.813, 8.13251, 0.07", "69.1346, 102.77, 8.31571, 0.58", "69.1773, 102.965, 8.34124, 0.58", "69.393, 104.138, 8.4945, 0.22", "69.5038, 104.956, 8.59445, 0.22", "69.511, 105.534, 8.6682, 0.22", "69.3694, 106.503, 8.81967, 0.07", "69.2378, 107.038, 8.91322, 0.07", "68.9076, 107.988, 9.09338, 0.66", "68.7099, 108.353, 9.17227, 0.95", "67.984, 109.38, 9.42253, 0.07", "67.6561, 109.765, 9.52423, 0.29", "73.0253, 116.885, 10.566, 0.29" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999893613021856,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "0.774266, 8.78757, 1.41, 0.95", "0.452273, 9.76642, 1.61676, 0.95", "0.132941, 10.7372, 1.8218, 0.95", "-0.353813, 12.2169, 2.13436, 1.17", "-0.604049, 12.9776, 2.29504, 1.39" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999893613021856
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "-3.28573, 7.99907, -0.0300002, 0.8", "-3.77068, 8.44829, 0.0726287, 0.88", "-4.9714, 9.6422, 0.374152, 0.88", "-5.76876, 10.5043, 0.597417, 0.88", "-6.77531, 11.6859, 0.868766, 0.88", "-7.46128, 12.5386, 1.01711, 0.44", "-8.05171, 13.2929, 1.10866, 0.44", "-8.52605, 13.9429, 1.15516, 0.44", "-8.80884, 14.3538, 1.15508, 0.44", "-9.24444, 14.9016, 1.04535, 0.44", "-9.8062, 15.4756, 0.822998, 0.66", "-10.5768, 16.1002, 0.5337, 1.02", "-11.2463, 16.5437, 0.359134, 1.53", "-11.8369, 16.8828, 0.296333, 1.53", "-13.7174, 17.8969, 0.282977, 0.66", "-14.8382, 18.4812, 0.379355, 0.73", "-16.2487, 19.2257, 0.637508, 1.09", "-17.6052, 20.0003, 1.04218, 0.22", "-18.8804, 20.8081, 1.5991, 0.22", "-19.1751, 21.0407, 1.79186, 0.22", "-19.2603, 21.1493, 1.89233, 0.22", "-19.4716, 21.569, 2.22308, 0.22", "-19.8457, 22.6084, 2.86948, 1.09", "-19.9478, 22.9121, 3.00465, 1.46", "-20.2348, 23.5435, 3.2121, 1.46", "-21.0061, 24.9137, 3.68563, 0.07", "-21.4263, 25.5502, 3.9148, 0.66", "-21.745, 25.9775, 4.06455, 1.24", "-21.9014, 26.1701, 4.12813, 1.24", "-22.7328, 27.1582, 4.43947, 0.51", "-23.4623, 28.0077, 4.68432, 0.51", "-24.1623, 28.8607, 4.88422, 0.58", "-25.0723, 30.0781, 5.12998, 0.44", "-25.9692, 31.3249, 5.36742, 0.44", "-26.5444, 32.1171, 5.50325, 0.88", "-27.1521, 32.903, 5.61339, 0.88", "-28.3005, 34.2506, 5.77058, 0.36", "-28.9215, 34.9425, 5.84965, 0.36", "-29.55, 35.6209, 5.92958, 0.36", "-30.2792, 36.4131, 6.02563, 0.8", "-31.3018, 37.5776, 6.16896, 0.58", "-31.8764, 38.3471, 6.25721, 0.36", "-32.4169, 39.2922, 6.35212, 0.8", "-32.8557, 40.4598, 6.44386, 0.58", "-33.0061, 41.3903, 6.4926, 1.31", "-32.9886, 42.3696, 6.5171, 1.31", "-32.7406, 44.0491, 6.53857, 0.44", "-32.5544, 44.978, 6.53755, 0.36", "-32.3736, 45.7602, 6.53605, 0.66", "-31.9791, 47.197, 6.53304, 0.29", "-31.5074, 48.6596, 6.4854, 0.51", "-30.8767, 50.4057, 6.37854, 0.15", "-30.6684, 50.9383, 6.35516, 0.15", "-30.4685, 51.3955, 6.34614, 0.15", "-30.0977, 52.1547, 6.35162, 0.58", "-29.337, 53.4937, 6.42808, 0.22", "-28.8774, 54.2081, 6.50874, 0.22", "-27.9857, 55.5668, 6.75616, 0.8", "-27.4462, 56.4969, 6.98327, 0.15", "-27.0898, 57.2401, 7.14786, 0.15", "-26.9131, 57.7813, 7.27075, 0.15", "-26.6871, 58.8986, 7.56422, 0.36", "-26.4989, 60.1722, 7.86869, 0.8", "-26.3579, 61.293, 8.0926, 0.58", "-26.2178, 62.9145, 8.42005, 0.73", "-26.128, 64.2171, 8.6757, 0.44", "-26.0633, 65.3964, 8.88088, 0.22", "-26.0235, 66.333, 9.03545, 0.73", "-25.939, 67.0813, 9.12403, 0.73", "-28.8229, 76.16, 9.4766, 0.73" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999893613021856,
    "numberInternalDivisions" : 5
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "-3.70455, 11.6825, 0.0, 0.846942", "-7.06447, 26.3014, 0.0, 0.846942", "-10.4244, 40.9202, 0.0, 0.846942" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "2.3659, -13.949, -1.34205, 0.8", "3.76016, -14.1476, -0.717276, 0.8", "5.13715, -14.4713, -0.207673, 0.58", "5.85364, -14.7044, -0.0106566, 0.58", "6.41838, -14.9118, 0.124234, 0.58", "7.3937, -15.2898, 0.343219, 0.51", "8.38924, -15.6796, 0.556281, 1.17", "9.39276, -16.0793, 0.718471, 1.17", "11.7623, -17.0262, 1.04769, 0.66", "12.8563, -17.4763, 1.20295, 0.66", "13.9868, -17.9367, 1.36751, 0.66", "14.8712, -18.284, 1.50071, 0.66", "16.3944, -18.8255, 1.7386, 1.39", "17.7948, -19.2541, 1.96639, 1.53" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "2.3659, -13.949, -1.34205, 1.02", "3.02355, -16.3906, -1.60606, 1.02", "3.65651, -18.4274, -1.6171, 0.88", "4.30165, -20.0746, -1.50332, 1.02", "4.9697, -21.4945, -1.32802, 0.8", "5.92435, -23.1098, -0.983255, 0.51", "7.13215, -24.8202, -0.473458, 0.51", "8.07052, -25.7508, 0.0320258, 0.51", "9.20819, -26.6493, 0.752345, 0.73", "9.87346, -27.1329, 1.24054, 0.73", "11.4596, -28.259, 2.45818, 0.44", "12.1514, -28.705, 2.99582, 0.44", "12.919, -29.1923, 3.57735, 0.44", "13.9565, -29.9543, 4.36458, 0.44", "15.022, -30.9981, 5.32132, 1.31", "15.632, -31.8206, 5.95513, 1.68" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-0.604049, 12.9776, 2.29504, 0.44", "-0.378994, 13.5706, 3.28644, 0.44", "-0.265276, 13.7436, 3.53268, 0.44", "0.455425, 14.5696, 4.57222, 0.66", "0.875159, 14.9882, 5.06195, 0.95", "1.67357, 15.711, 5.86221, 0.51", "2.57946, 16.4603, 6.7291, 0.51", "3.69845, 17.2887, 7.74428, 0.22", "4.59164, 17.9301, 8.52683, 0.88", "5.11381, 18.3165, 8.97805, 1.09", "5.70201, 18.8039, 9.52713, 0.73", "6.72246, 19.8192, 10.5561, 0.44", "7.51661, 20.9045, 11.571, 0.22", "7.58566, 21.288, 11.9063, 0.22", "7.31593, 22.0441, 12.3996, 0.95", "6.95318, 22.581, 12.659, 0.95", "6.19411, 23.5066, 12.9572, 0.22", "5.42955, 24.4319, 13.1123, 0.22", "4.93142, 25.1427, 13.1797, 0.22", "4.75088, 25.5034, 13.2152, 0.22", "4.56394, 26.059, 13.2615, 0.22", "4.33196, 27.1298, 13.3504, 0.73", "4.23301, 28.3005, 13.4076, 1.02", "4.27296, 29.5857, 13.4205, 0.44", "4.36408, 30.3527, 13.402, 0.15", "4.4844, 31.0686, 13.3695, 0.15", "4.64809, 31.7407, 13.3362, 0.15", "4.95691, 32.6825, 13.3126, 0.58", "5.37934, 33.7976, 13.3164, 0.29", "5.78329, 34.9218, 13.3811, 0.58", "5.96559, 35.4547, 13.4412, 0.58", "6.33705, 36.6435, 13.6617, 0.22", "6.52683, 37.4316, 13.8593, 0.22", "6.72643, 38.5427, 14.1877, 0.22", "6.90385, 39.7755, 14.5391, 0.8", "7.02473, 40.6708, 14.7693, 1.02", "7.23413, 42.069, 15.0532, 1.02", "7.49988, 43.7491, 15.2988, 0.07", "7.68968, 44.9331, 15.4597, 0.95", "7.90096, 46.214, 15.692, 0.44", "8.04914, 47.1308, 15.8933, 0.44", "8.14503, 48.1528, 16.1822, 0.44", "8.17606, 49.1424, 16.5093, 0.15", "8.13992, 50.5152, 17.0182, 0.73", "8.02972, 52.1848, 17.6997, 1.31", "7.9723, 53.0093, 18.0672, 1.82", "7.88743, 54.6009, 18.7855, 0.73", "7.87851, 55.4899, 19.1719, 0.51", "7.98464, 56.9208, 19.6893, 0.29", "8.10708, 57.5786, 19.867, 0.29", "8.34373, 58.3019, 20.021, 0.29", "8.70173, 59.0045, 20.191, 0.73", "9.04849, 59.5061, 20.3532, 0.73", "9.82709, 60.4552, 20.7407, 0.22", "10.6335, 61.356, 21.1882, 0.66", "11.5408, 62.4093, 21.7472, 0.51", "12.3576, 63.5063, 22.3352, 0.36", "12.8445, 64.301, 22.7413, 0.36", "13.08, 64.8912, 22.9894, 0.8", "13.2863, 65.9163, 23.321, 0.58", "13.3446, 66.9487, 23.5608, 0.44", "13.2971, 68.4041, 23.8176, 0.44", "13.2069, 69.6274, 23.9667, 0.44", "13.0615, 71.6088, 24.1212, 0.36", "12.9922, 72.6797, 24.1784, 0.22", "12.9904, 73.6268, 24.2144, 0.15", "13.0086, 74.1913, 24.2315, 0.15", "13.0888, 74.9603, 24.2572, 1.02", "13.1506, 75.2877, 24.2789, 1.02", "13.6292, 76.733, 24.4549, 0.51", "14.1604, 78.1231, 24.6517, 0.29", "14.8466, 87.2658, 25.9404, 0.29" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "-0.604049, 12.9776, 2.29504, 0.29", "-0.0181122, 14.3994, 1.41019, 0.29", "0.426142, 15.2367, 0.943711, 0.88", "0.862188, 15.9186, 0.582531, 1.02", "1.71106, 16.8313, 0.175048, 0.58", "2.23118, 17.2341, 0.0517497, 0.22", "2.95364, 17.7224, -0.0550558, 0.8", "3.72751, 18.1833, -0.0567723, 1.31", "4.14571, 18.4135, -0.0554126, 1.31", "6.08251, 19.4751, -0.0693026, 0.29", "7.67964, 20.3834, -0.0820791, 0.51", "8.25756, 20.8146, -0.0972817, 0.51", "8.93024, 21.6351, -0.148213, 0.07", "9.33045, 22.7488, -0.248566, 0.07", "9.45699, 23.8659, -0.370022, 0.66", "9.4669, 24.3878, -0.433172, 0.66", "9.5158, 26.1097, -0.579738, 0.29", "9.59128, 26.9467, -0.588816, 0.07", "9.73774, 27.8752, -0.542733, 0.88", "9.91897, 28.5514, -0.478242, 0.88", "10.7715, 30.8538, -0.344296, 0.07", "11.3226, 32.094, -0.315194, 1.46", "11.8574, 33.1134, -0.322581, 1.97", "12.0028, 33.367, -0.324394, 1.97", "13.0963, 35.1752, -0.279981, 0.29", "13.8948, 36.4416, -0.174497, 0.88", "14.6232, 37.583, -0.067375, 0.29", "15.0365, 38.246, 0.00367171, 0.29", "15.6027, 39.2677, 0.177005, 0.29", "16.0673, 40.2549, 0.442077, 0.29", "16.4552, 41.28, 0.813801, 0.29", "16.7982, 42.5599, 1.32235, 1.31", "16.9656, 43.8599, 1.82859, 1.53", "16.9972, 45.8178, 2.56185, 0.73", "16.9277, 46.7578, 2.88379, 0.36", "16.8387, 47.4189, 3.09514, 0.66", "16.5694, 48.903, 3.57993, 0.29", "16.2306, 50.6259, 4.24895, 0.22", "16.0656, 51.5331, 4.59938, 0.22", "16.0165, 52.0047, 4.79097, 0.22", "16.0675, 52.4282, 4.99774, 0.22", "16.3737, 52.9771, 5.26831, 0.22", "17.2023, 53.6096, 5.51313, 0.22", "18.3472, 54.2674, 5.73952, 0.58", "19.7806, 54.9691, 5.96053, 0.36", "21.0524, 55.5186, 6.1281, 0.36", "23.1997, 56.3371, 6.34156, 1.46", "24.6569, 56.832, 6.39627, 2.12" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "-10.4244, 40.9202, 0.0, 0.15", "-13.7843, 55.5391, 0.0, 0.15", "-17.1442, 70.1579, 0.0, 0.15" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "17.7948, -19.2541, 1.96639, 0.51", "19.3974, -17.8673, 2.58797, 0.51", "20.3371, -16.893, 3.07829, 0.51", "20.8694, -16.1819, 3.41624, 0.36", "21.125, -15.7424, 3.60051, 0.36", "21.4989, -14.9764, 3.9241, 0.36", "21.8509, -14.2198, 4.25615, 0.36", "22.1555, -13.3634, 4.64867, 0.36", "22.5593, -12.3775, 5.13155, 0.58", "23.0723, -11.4574, 5.62552, 0.44", "23.8187, -10.689, 6.10922, 0.36", "24.5717, -10.2131, 6.51337, 0.36", "25.3075, -9.90687, 6.85629, 0.36", "26.9298, -9.37805, 7.58395, 0.8", "28.209, -9.01567, 8.13408, 0.8", "30.3617, -8.43033, 8.99058, 0.58", "31.9412, -7.97564, 9.54929, 0.58", "33.3099, -7.5548, 9.98663, 0.88", "34.7988, -7.07353, 10.4164, 0.58", "35.9976, -6.67824, 10.7183, 0.8", "37.5584, -6.17712, 11.045, 0.51", "38.9971, -5.76458, 11.2747, 0.51", "40.5526, -5.4273, 11.4351, 0.51", "41.6984, -5.24371, 11.5332, 0.51", "42.8561, -5.09777, 11.6021, 0.51", "43.7059, -4.97969, 11.6541, 0.51", "44.8765, -4.73492, 11.76, 0.51", "45.6462, -4.32359, 11.8645, 0.29", "46.1002, -3.83488, 11.9474, 0.29", "46.8611, -2.72444, 12.0954, 0.36", "47.436, -1.78222, 12.2019, 0.73", "48.0188, -0.788333, 12.3052, 0.73", "49.1834, 1.15194, 12.5146, 0.22", "50.074, 2.49918, 12.6718, 0.22", "51.1259, 3.84144, 12.8466, 0.88", "52.1779, 4.87967, 13.0014, 0.29", "52.6062, 5.188, 13.0518, 0.29", "53.4319, 5.58787, 13.1178, 0.15", "54.2721, 5.80211, 13.192, 0.15", "55.2601, 5.97828, 13.3042, 0.15", "55.9814, 6.0951, 13.4429, 0.15", "56.7081, 6.26111, 13.6271, 0.15", "57.7317, 6.57865, 13.9416, 0.58", "59.4223, 7.23193, 14.504, 0.15", "61.3358, 8.08102, 15.1555, 0.15", "62.5658, 8.68252, 15.5745, 0.15", "64.109, 9.45385, 16.09, 0.15", "65.9935, 10.3571, 16.7197, 0.95", "66.7107, 10.6884, 16.9629, 0.95", "68.0198, 11.3065, 17.4061, 0.22", "69.0693, 11.8351, 17.7193, 0.73", "70.1112, 12.3725, 17.9492, 0.29", "71.5179, 13.086, 18.2121, 0.29", "83.5135, 20.8502, 19.4545, 0.29" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "17.7948, -19.2541, 1.96639, 0.66", "18.5705, -19.9274, 1.78169, 0.66", "19.8832, -21.0701, 1.5869, 0.22", "20.589, -21.6662, 1.52911, 0.58", "21.5216, -22.4105, 1.5309, 0.07", "22.0823, -22.8152, 1.64415, 0.15", "22.3382, -22.9541, 1.86649, 0.15", "22.7114, -23.0403, 2.80052, 0.15", "22.8007, -23.0496, 3.15228, 0.15", "22.9843, -23.0658, 4.17772, 0.15", "23.2546, -23.1339, 5.98046, 0.8", "23.5797, -23.3626, 8.03996, 0.51", "23.7548, -23.6092, 9.02452, 0.51", "23.8327, -23.7673, 9.37721, 0.51", "23.9845, -24.1474, 9.89728, 0.51", "24.254, -24.8592, 10.5007, 0.22", "24.6763, -25.9333, 11.0965, 0.44", "25.1937, -27.1219, 11.625, 0.07", "25.4642, -27.7101, 11.866, 0.07", "25.855, -28.4973, 12.1914, 0.36", "26.1196, -28.9994, 12.401, 0.36", "26.4688, -29.6714, 12.6986, 0.36", "26.9915, -30.6083, 13.1078, 0.07", "30.1801, -35.6054, 19.1243, 0.07" ],
    "parent" : "dend_14",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "15.632, -31.8206, 5.95513, 0.22", "16.7219, -32.6868, 5.02657, 0.22", "17.3606, -33.1392, 4.67313, 0.22", "17.9714, -33.4985, 4.51611, 0.22", "19.5831, -34.2657, 4.56466, 0.22", "21.2926, -34.9062, 5.02339, 0.51", "22.7576, -35.326, 5.39993, 0.15", "25.0924, -35.7342, 5.93358, 0.44", "26.5037, -35.8861, 6.23645, 0.44", "27.6743, -35.9829, 6.41781, 0.15", "29.1573, -36.0732, 6.60692, 0.29", "31.3359, -36.1798, 6.72561, 0.22", "33.1315, -36.2731, 6.72056, 0.66", "34.592, -36.3616, 6.59835, 0.36", "36.4529, -36.5101, 6.39615, 0.88", "38.4567, -36.7206, 6.24172, 0.22", "39.4521, -36.8528, 6.2381, 0.22", "41.2674, -37.1253, 6.54672, 0.22", "42.1095, -37.2356, 6.81957, 1.09", "42.7446, -37.3009, 7.13369, 1.24", "44.212, -37.4199, 8.05405, 1.09", "45.0382, -37.4978, 8.66254, 0.51", "46.2875, -37.6409, 9.60042, 0.44", "47.1888, -37.7662, 10.2274, 0.44", "48.8057, -38.0315, 11.346, 0.44", "50.1602, -38.3129, 12.292, 0.29", "51.5739, -38.6795, 13.2731, 0.29", "52.7535, -39.0567, 14.1063, 0.73", "54.1208, -39.5546, 15.0381, 0.51", "55.1918, -39.9545, 15.7602, 0.29", "56.4894, -40.3916, 16.6036, 0.29", "57.2639, -40.6088, 17.1013, 0.29", "58.5157, -40.848, 17.8489, 0.29", "59.8112, -40.9867, 18.6186, 0.88", "61.177, -41.0403, 19.4092, 0.44", "62.4669, -41.033, 20.1337, 1.09", "63.335, -41.0084, 20.6028, 1.31", "64.5331, -41.0219, 21.2774, 0.15", "65.0084, -41.0521, 21.5578, 0.15", "65.6577, -41.1328, 21.9655, 0.15", "66.364, -41.2326, 22.4049, 0.15", "66.9617, -41.2977, 22.8232, 0.15", "68.4925, -41.3302, 23.94, 0.22", "69.1108, -41.2674, 24.3997, 0.22", "70.4918, -40.9448, 25.4164, 0.95", "71.5994, -40.5444, 26.1769, 0.51", "72.7278, -40.0424, 26.8525, 0.22", "73.6194, -39.5877, 27.3533, 0.22", "74.2707, -39.2439, 27.6827, 0.07", "74.8858, -38.9505, 27.9628, 0.22", "76.1802, -38.3774, 28.5379, 0.51", "78.2265, -37.5702, 29.3434, 0.36", "79.1114, -37.2516, 29.6266, 0.73", "80.3348, -36.8334, 29.9437, 0.73", "81.9016, -36.3256, 30.2078, 0.07", "82.3896, -36.1669, 30.233, 0.07", "83.3371, -35.8692, 30.1451, 0.07", "84.558, -35.6762, 29.9005, 0.07", "85.4399, -35.7299, 29.6146, 0.07", "86.5374, -35.9186, 29.2545, 0.07", "87.4167, -36.1343, 28.9716, 0.88", "88.2629, -36.3947, 28.8029, 0.88", "90.5827, -37.2495, 28.6977, 0.07", "93.7718, -38.5679, 28.957, 0.66", "94.8541, -39.0435, 29.0851, 0.22", "95.907, -39.5163, 29.2355, 0.07", "98.7485, -40.805, 29.6283, 0.07", "99.996, -41.3625, 29.7889, 0.07", "100.535, -41.6242, 29.8593, 0.07", "102.457, -42.7455, 30.2389, 0.66", "103.121, -43.1557, 30.2075, 0.66", "103.867, -43.5925, 30.0664, 0.07", "104.545, -43.9582, 29.8593, 0.07", "105.357, -44.384, 29.6448, 0.07", "106.341, -44.8972, 29.5184, 0.22", "107.43, -45.4704, 29.5305, 0.29", "108.364, -45.931, 29.5176, 0.29", "109.448, -46.4311, 29.5153, 0.29", "110.496, -46.8852, 29.4959, 0.29", "111.973, -47.4891, 29.4435, 0.51", "113.021, -47.8944, 29.3902, 0.44", "114.931, -48.6321, 29.2829, 0.8", "116.633, -49.2843, 29.2061, 0.29", "117.581, -49.6383, 29.1873, 0.58", "118.225, -49.8674, 29.1875, 0.29", "119.691, -50.372, 29.285, 0.36", "120.538, -50.6668, 29.332, 0.36", "121.446, -50.9803, 29.3459, 0.58", "122.247, -51.2461, 29.2698, 0.58", "123.318, -51.6182, 29.1105, 0.07", "124.359, -51.9837, 28.8386, 0.07", "126.963, -52.8592, 27.9044, 0.29", "128.406, -53.2838, 27.3042, 0.07", "129.694, -53.6333, 26.7155, 0.95", "130.823, -53.9125, 26.1324, 0.44", "131.957, -54.2131, 25.4558, 0.07", "132.541, -54.386, 25.1042, 0.07", "133.007, -54.5612, 24.8388, 0.07", "133.256, -54.685, 24.6638, 0.07", "134.066, -55.1522, 24.0559, 0.07", "135.29, -55.89, 23.1847, 0.07", "136.233, -56.466, 22.6081, 0.44", "137.568, -57.2519, 21.9322, 1.61", "138.487, -57.7514, 21.5496, 1.61", "140.616, -58.7497, 20.9116, 0.07", "141.197, -58.981, 20.8051, 0.73", "141.946, -59.2179, 20.7006, 0.73", "143.2, -59.5477, 20.5636, 0.22", "144.346, -59.8099, 20.4923, 0.44", "146.243, -60.2473, 20.4343, 0.07", "146.705, -60.3602, 20.4141, 0.36", "149.087, -60.9853, 20.4461, 0.07", "150.383, -61.3509, 20.5193, 1.82", "151.255, -61.6204, 20.5972, 1.82", "153.805, -62.491, 20.9483, 0.07", "154.985, -62.9391, 21.158, 0.22", "157.17, -63.8452, 21.649, 0.07", "158.062, -64.2599, 21.9215, 0.22", "159.086, -64.7817, 22.2273, 0.22", "159.761, -65.1529, 22.4209, 0.07", "160.113, -65.3614, 22.4956, 0.07", "160.691, -65.6947, 22.5771, 0.07", "161.429, -66.1075, 22.6082, 0.07", "162.171, -66.4969, 22.6448, 0.95", "162.777, -66.7975, 22.6763, 0.95", "164.216, -67.5595, 22.7972, 0.07", "165.738, -68.3991, 22.9694, 0.44", "166.675, -68.905, 23.1, 0.15", "167.513, -69.3392, 23.2423, 0.66", "168.072, -69.6107, 23.3593, 0.66", "169.759, -70.4044, 23.8004, 0.07", "170.331, -70.6878, 23.9835, 0.07", "170.868, -70.9716, 24.1615, 0.07", "171.391, -71.2922, 24.3078, 0.36", "172.11, -71.7629, 24.4969, 0.36", "173.075, -72.424, 24.6819, 0.07", "174.203, -73.2372, 24.8341, 1.75", "174.8, -73.6996, 24.9073, 1.75", "177.188, -75.6241, 25.1807, 0.07", "177.93, -76.2333, 25.2609, 0.58", "179.235, -77.3087, 25.3989, 0.58", "180.223, -78.1223, 25.5104, 0.07", "180.457, -78.3198, 25.5404, 0.07", "180.825, -78.6442, 25.5927, 0.07", "181.138, -78.9217, 25.6474, 0.07", "181.856, -79.5957, 25.7772, 0.36", "182.978, -80.7265, 26.0238, 0.07", "183.503, -81.3288, 26.1295, 0.07", "184.056, -82.0367, 26.2334, 0.07", "184.53, -82.6925, 26.2909, 0.36", "184.996, -83.3759, 26.3217, 0.36", "185.513, -84.1704, 26.3301, 0.07", "186.293, -85.3486, 26.323, 0.51", "186.644, -85.856, 26.316, 0.51", "187.608, -87.1128, 26.3127, 0.07", "188.033, -87.5886, 26.3151, 0.07", "188.7, -88.2093, 26.3071, 0.07", "189.715, -88.9823, 26.303, 1.39", "190.394, -89.3934, 26.3097, 1.39", "191.84, -90.0962, 26.3526, 0.22", "193.136, -90.5777, 26.4272, 0.07", "194.447, -90.9398, 26.5145, 0.36", "195.459, -91.1319, 26.5936, 0.66", "196.261, -91.2307, 26.6733, 0.07", "197.178, -91.3055, 26.7951, 0.22", "197.796, -91.346, 26.9004, 0.22", "198.8, -91.3994, 27.1212, 0.22", "199.647, -91.4384, 27.339, 0.36", "200.821, -91.4904, 27.6354, 0.07", "201.759, -91.538, 27.8629, 0.07", "202.836, -91.5889, 28.1169, 0.73", "203.198, -91.5919, 28.2275, 0.73", "204.387, -91.5376, 28.6593, 0.07", "205.079, -91.4533, 28.9551, 0.07", "206.764, -91.0953, 29.7613, 0.58", "207.441, -90.9014, 30.1103, 0.58", "209.189, -90.2679, 31.1044, 0.07", "210.072, -89.9145, 31.6353, 0.07", "211.075, -89.4939, 32.2668, 0.07", "211.879, -89.1633, 32.7789, 0.88", "212.293, -88.979, 33.0521, 1.46", "213.703, -88.3468, 33.9269, 0.07", "214.29, -88.1087, 34.2222, 0.07", "214.949, -87.8714, 34.5616, 0.07", "215.633, -87.6879, 34.9011, 0.66" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "15.632, -31.8206, 5.95513, 1.39", "14.6419, -33.9398, 6.8793, 1.39", "13.9733, -35.4768, 7.47617, 1.17", "13.2152, -37.3703, 8.13661, 0.73", "12.5744, -39.0648, 8.64966, 0.73", "12.0719, -40.4818, 9.02053, 1.02", "11.4753, -42.2247, 9.40847, 0.58", "10.9622, -43.8812, 9.71149, 0.58", "10.6064, -45.3074, 9.92136, 0.58", "10.3125, -46.998, 10.1491, 0.95", "10.1659, -48.5303, 10.4257, 0.95", "10.1578, -50.1559, 10.8575, 0.51", "10.2754, -51.7837, 11.4272, 0.29", "10.4734, -53.4097, 12.1244, 1.02", "10.7457, -55.2115, 13.0079, 0.73", "11.1326, -57.6002, 14.3047, 0.51", "11.2883, -58.9198, 15.0649, 0.36", "11.367, -60.2611, 15.8075, 0.36", "11.23, -61.5817, 16.349, 0.36", "10.9769, -62.193, 16.404, 0.36", "10.4616, -63.0096, 16.1707, 0.36", "9.47536, -64.5442, 15.4325, 0.44", "8.46724, -66.244, 14.5797, 0.44", "7.78558, -67.7255, 13.974, 0.44", "7.44472, -68.9441, 13.6788, 1.09", "7.23755, -70.3769, 13.5718, 0.8", "7.12747, -72.4148, 13.6604, 0.51", "7.10895, -73.6073, 13.8166, 0.51", "7.03874, -75.8551, 14.282, 0.95", "6.88858, -78.27, 14.8572, 0.58", "6.76454, -79.415, 15.1268, 0.36", "6.55003, -80.6906, 15.3827, 0.36", "6.07265, -82.8219, 15.7129, 0.36", "5.62898, -84.4224, 15.8544, 0.8", "5.17968, -85.773, 15.9139, 0.51", "4.75509, -87.1259, 15.9739, 0.51", "4.38105, -88.7272, 16.0968, 0.36", "4.28302, -89.339, 16.1937, 0.36", "4.22793, -89.9296, 16.3383, 0.36", "4.14473, -91.2647, 16.7469, 0.36", "3.92334, -93.7722, 17.5973, 1.02", "3.64206, -95.6557, 18.2362, 0.66", "3.37156, -96.944, 18.5697, 0.66", "3.07669, -97.8592, 18.6894, 0.66", "2.7693, -98.5831, 18.6811, 0.66", "1.96385, -100.127, 18.4298, 0.66", "1.18895, -101.398, 18.0891, 0.66", "0.183991, -103.089, 17.5739, 0.66", "-0.537354, -104.444, 17.1878, 0.66", "-1.15641, -105.672, 16.9083, 0.51", "-1.93048, -107.276, 16.6682, 0.88", "-2.40884, -108.325, 16.6051, 0.88", "-3.22968, -110.22, 16.681, 0.51", "-3.95375, -111.967, 16.9139, 0.51", "-4.33855, -113.117, 17.1421, 0.51", "-4.57073, -114.049, 17.3774, 0.51", "-4.73816, -115.463, 17.7732, 0.51", "-4.70559, -116.914, 18.1402, 1.02", "-4.55685, -117.923, 18.3303, 1.02", "-3.84625, -120.83, 18.6642, 0.44", "-3.38688, -122.283, 18.759, 0.44", "-2.49135, -124.728, 18.8237, 0.36", "-1.68991, -126.813, 18.7791, 0.36", "-1.10944, -128.365, 18.634, 0.58", "-0.646172, -129.786, 18.4026, 0.66", "-0.409689, -130.773, 18.1936, 0.66", "-0.304819, -131.968, 17.9588, 0.44", "-0.427056, -133.269, 17.7878, 0.36", "-0.735589, -134.611, 17.7382, 0.36", "-1.08687, -135.86, 17.7687, 0.36", "-1.68515, -137.789, 17.8927, 0.58", "-2.24605, -139.564, 18.0759, 0.44", "-2.61484, -140.778, 18.2415, 0.44", "-3.0697, -142.4, 18.4986, 1.02", "-3.49761, -144.012, 18.7622, 0.36", "-3.78241, -145.179, 18.9014, 0.36", "-4.10408, -146.436, 18.9663, 0.36", "-4.41193, -147.593, 19.0016, 0.36", "-4.84906, -149.172, 19.0117, 0.22", "-5.2781, -150.569, 19.0045, 0.51", "-6.0019, -152.759, 18.9479, 0.15", "-6.57101, -154.475, 18.8471, 0.36", "-6.81253, -155.207, 18.7894, 0.8", "-7.2123, -156.467, 18.6907, 0.51", "-10.317, -167.564, 19.485, 0.51" ],
    "parent" : "dend_11",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "24.6569, 56.832, 6.39627, 0.29", "26.8426, 56.6934, 6.12553, 0.29", "27.6096, 56.6839, 6.00071, 0.29", "28.4334, 56.7365, 5.81935, 0.29", "29.244, 56.833, 5.71745, 0.29", "29.6898, 56.8984, 5.66683, 0.07", "30.4655, 57.0214, 5.57814, 0.66", "31.2778, 57.1816, 5.47446, 1.24", "33.0298, 57.5558, 5.20841, 0.58", "35.277, 58.0075, 4.85169, 0.22", "37.1787, 58.3632, 4.55679, 0.22", "37.6893, 58.4571, 4.47394, 0.8", "38.7944, 58.6438, 4.3233, 1.24", "40.8473, 58.9719, 4.04244, 0.22", "42.3547, 59.1927, 3.81782, 0.22", "42.8889, 59.2664, 3.71011, 0.51", "44.2871, 59.4559, 3.48748, 0.66", "46.4549, 59.7502, 3.20953, 0.07", "56.3951, 59.9341, 0.580858, 0.07" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "24.6569, 56.832, 6.39627, 0.66", "24.4366, 57.7912, 7.37776, 0.66", "24.3497, 58.781, 8.19295, 0.15", "24.3595, 59.0952, 8.40622, 0.15", "24.4628, 59.9876, 8.91297, 0.29", "24.6762, 60.977, 9.32545, 0.15", "24.9655, 61.9695, 9.62127, 0.95", "25.2805, 62.8212, 9.7229, 0.58", "25.576, 63.5408, 9.7353, 0.22", "25.8307, 64.1663, 9.7148, 0.07", "26.3596, 65.5941, 9.59411, 1.17", "26.7336, 66.8634, 9.44911, 0.8", "26.9555, 67.8901, 9.35569, 0.51", "27.0972, 68.8648, 9.30995, 0.29", "27.1805, 69.8484, 9.3021, 0.58", "27.1957, 71.3319, 9.35565, 0.36", "27.1121, 72.7624, 9.49651, 0.15", "27.0185, 73.7967, 9.64666, 0.36", "26.9164, 74.9503, 9.87831, 0.36", "26.8612, 75.7083, 10.078, 0.07", "26.8389, 76.6235, 10.3733, 0.15", "26.8394, 77.1151, 10.5688, 0.07", "26.8538, 77.5631, 10.7755, 0.07", "26.889, 78.0126, 10.9689, 0.07", "27.0732, 79.0626, 11.4016, 1.31", "27.268, 79.6495, 11.6564, 1.31", "29.3813, 87.6615, 14.6639, 1.31" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_17", "dend_10", "dend_9", "dend_8", "dend_7", "dend_6", "dend_1", "dend_0", "dend_14", "dend_11", "dend_5", "dend_2", "dend_16", "dend_15", "dend_13", "dend_12", "dend_4", "dend_3" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_17", "dend_10", "dend_9", "dend_8", "dend_7", "dend_6", "dend_1", "dend_0", "dend_14", "dend_11", "dend_5", "dend_2", "dend_16", "dend_15", "dend_13", "dend_12", "dend_4", "dend_3" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_1", "dend_1", "dend_1", "dend_1", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "axon_1", "axon_1", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "3.7868198E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "3.7868198E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_StochKv",
    "ionChannel" : "StochKv_deterministic",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.936579E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.2499998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dSTUT_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dSTUT_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate dSTUT214_L5_LBC_6a6d472ca8_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_17, id: dend_17, parent: soma_0
create dend_17
public dend_17
// Section: dend_10, id: dend_10, parent: soma_0
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: soma_0
create dend_9
public dend_9
// Section: dend_8, id: dend_8, parent: soma_0
create dend_8
public dend_8
// Section: dend_7, id: dend_7, parent: soma_0
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: soma_0
create dend_6
public dend_6
// Section: dend_1, id: dend_1, parent: soma_0
create dend_1
public dend_1
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_14, id: dend_14, parent: dend_10
create dend_14
public dend_14
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_5, id: dend_5, parent: dend_1
create dend_5
public dend_5
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_16, id: dend_16, parent: dend_14
create dend_16
public dend_16
// Section: dend_15, id: dend_15, parent: dend_14
create dend_15
public dend_15
// Section: dend_13, id: dend_13, parent: dend_11
create dend_13
public dend_13
// Section: dend_12, id: dend_12, parent: dend_11
create dend_12
public dend_12
// Section: dend_4, id: dend_4, parent: dend_2
create dend_4
public dend_4
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_17, dend_10, dend_9, dend_8, dend_7, dend_6, dend_1, dend_0, dend_14, dend_11, dend_5, dend_2, dend_16, dend_15, dend_13, dend_12, dend_4, dend_3]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_17, dend_10, dend_9, dend_8, dend_7, dend_6, dend_1, dend_0, dend_14, dend_11, dend_5, dend_2, dend_16, dend_15, dend_13, dend_12, dend_4, dend_3]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_21
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_1, dend_1, dend_1, dend_1, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, axon_1, axon_1, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dSTUT_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dSTUT_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_17(0), soma_0(0.49999893613021856)
    connect dend_10(0), soma_0(0.49999893613021856)
    connect dend_9(0), soma_0(0.49999893613021856)
    connect dend_8(0), soma_0(0.49999893613021856)
    connect dend_7(0), soma_0(0.49999893613021856)
    connect dend_6(0), soma_0(0.49999893613021856)
    connect dend_1(0), soma_0(0.49999893613021856)
    connect dend_0(0), soma_0(0.49999893613021856)
    connect axon_0(0), soma_0(1.0)
    connect dend_14(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_5(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_16(0), dend_14(1.0)
    connect dend_15(0), dend_14(1.0)
    connect dend_13(0), dend_11(1.0)
    connect dend_12(0), dend_11(1.0)
    connect dend_4(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( 1.42539, -10.6376, 0.0, 4.61764 ) }
    soma_0 { pt3dadd( 1.16889, -9.52164, 0.0, 8.50261 ) }
    soma_0 { pt3dadd( 0.912393, -8.40563, 0.0, 10.6819 ) }
    soma_0 { pt3dadd( 0.655896, -7.28962, 0.0, 12.4606 ) }
    soma_0 { pt3dadd( 0.399399, -6.17362, 0.0, 14.126 ) }
    soma_0 { pt3dadd( 0.142902, -5.05761, 0.0, 15.1371 ) }
    soma_0 { pt3dadd( -0.113594, -3.9416, 0.0, 15.8374 ) }
    soma_0 { pt3dadd( -0.370091, -2.8256, 0.0, 16.1877 ) }
    soma_0 { pt3dadd( -0.626588, -1.70959, 0.0, 16.953 ) }
    soma_0 { pt3dadd( -0.883085, -0.593582, 0.0, 17.4193 ) }
    soma_0 { pt3dadd( -1.13958, 0.522425, 0.0, 17.7718 ) }
    soma_0 { pt3dadd( -1.39608, 1.63843, 0.0, 17.9686 ) }
    soma_0 { pt3dadd( -1.65257, 2.75444, 0.0, 17.7521 ) }
    soma_0 { pt3dadd( -1.90907, 3.87045, 0.0, 17.4043 ) }
    soma_0 { pt3dadd( -2.16557, 4.98645, 0.0, 17.0101 ) }
    soma_0 { pt3dadd( -2.42207, 6.10246, 0.0, 16.4966 ) }
    soma_0 { pt3dadd( -2.67856, 7.21847, 0.0, 15.2605 ) }
    soma_0 { pt3dadd( -2.93506, 8.33447, 0.0, 13.6816 ) }
    soma_0 { pt3dadd( -3.19156, 9.45048, 0.0, 11.3092 ) }
    soma_0 { pt3dadd( -3.44805, 10.5665, 0.0, 8.03973 ) }
    soma_0 { pt3dadd( -3.70455, 11.6825, 0.0, 4.69987 ) }
    // Section: dend_17, id: dend_17, parent: soma_0 (entry count 21/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -2.69573, 0.855072, -7.18, 1.17 ) }
    dend_17 { pt3dadd( -2.99977, 1.32078, -7.94471, 1.17 ) }
    dend_17 { pt3dadd( -3.31184, 1.93193, -8.84728, 1.17 ) }
    dend_17 { pt3dadd( -3.85174, 3.40551, -10.8603, 1.02 ) }
    dend_17 { pt3dadd( -4.0763, 4.16205, -11.8841, 1.02 ) }
    dend_17 { pt3dadd( -4.29864, 4.88327, -12.8748, 0.8 ) }
    dend_17 { pt3dadd( -4.56223, 5.67266, -13.9847, 0.8 ) }
    dend_17 { pt3dadd( -4.6949, 6.11801, -14.5818, 0.8 ) }
    dend_17 { pt3dadd( -4.92089, 7.05933, -15.7871, 0.8 ) }
    dend_17 { pt3dadd( -5.02304, 7.79631, -16.6674, 0.8 ) }
    dend_17 { pt3dadd( -5.03839, 8.44203, -17.4493, 0.8 ) }
    dend_17 { pt3dadd( -4.97061, 9.07628, -18.191, 0.8 ) }
    dend_17 { pt3dadd( -4.8665, 9.58753, -18.7415, 0.8 ) }
    dend_17 { pt3dadd( -4.62728, 10.396, -19.4266, 0.8 ) }
    dend_17 { pt3dadd( -4.43193, 10.916, -19.7508, 0.8 ) }
    dend_17 { pt3dadd( -3.96606, 12.0832, -20.3111, 0.8 ) }
    dend_17 { pt3dadd( -3.53921, 13.1298, -20.7441, 0.58 ) }
    dend_17 { pt3dadd( -3.15913, 14.0884, -21.0939, 0.58 ) }
    dend_17 { pt3dadd( -2.86615, 14.9042, -21.4103, 0.36 ) }
    dend_17 { pt3dadd( -2.6656, 15.646, -21.7722, 0.22 ) }
    dend_17 { pt3dadd( -2.55408, 16.1226, -22.0758, 0.22 ) }
    dend_17 { pt3dadd( -2.48417, 16.4586, -22.3904, 0.22 ) }
    dend_17 { pt3dadd( -2.44113, 16.6571, -22.6708, 0.22 ) }
    dend_17 { pt3dadd( -2.31871, 17.1184, -23.5321, 0.22 ) }
    dend_17 { pt3dadd( -2.1828, 17.8861, -25.1346, 0.22 ) }
    dend_17 { pt3dadd( -2.14969, 18.2573, -26.0248, 0.22 ) }
    dend_17 { pt3dadd( -2.14937, 18.4733, -26.6195, 0.22 ) }
    dend_17 { pt3dadd( -2.2045, 18.7152, -27.4721, 0.22 ) }
    dend_17 { pt3dadd( -2.37858, 18.9004, -28.5066, 0.22 ) }
    dend_17 { pt3dadd( -2.7475, 18.9653, -29.6842, 0.22 ) }
    dend_17 { pt3dadd( -3.36055, 18.7529, -31.0278, 0.22 ) }
    dend_17 { pt3dadd( -3.61153, 18.5902, -31.5277, 0.22 ) }
    dend_17 { pt3dadd( -4.21295, 18.0501, -32.5799, 0.22 ) }
    dend_17 { pt3dadd( -4.67384, 17.5161, -33.3322, 0.22 ) }
    dend_17 { pt3dadd( -5.19649, 16.8461, -34.0734, 0.22 ) }
    dend_17 { pt3dadd( -5.76036, 16.1157, -34.7629, 0.22 ) }
    dend_17 { pt3dadd( -6.25132, 15.5197, -35.3067, 0.22 ) }
    dend_17 { pt3dadd( -6.87251, 14.8144, -35.958, 0.22 ) }
    dend_17 { pt3dadd( -8.48414, 13.0731, -37.4881, 0.22 ) }
    dend_17 { pt3dadd( -8.94626, 12.5917, -37.909, 0.22 ) }
    dend_17 { pt3dadd( -9.39037, 12.1431, -38.2864, 0.22 ) }
    dend_17 { pt3dadd( -10.1489, 11.3789, -38.8581, 0.22 ) }
    dend_17 { pt3dadd( -10.8692, 10.6728, -39.3444, 0.22 ) }
    dend_17 { pt3dadd( -11.7326, 9.88062, -39.8627, 0.22 ) }
    dend_17 { pt3dadd( -12.1412, 9.55332, -40.012, 0.22 ) }
    dend_17 { pt3dadd( -12.6026, 9.19124, -40.1777, 0.22 ) }
    // Section: dend_10, id: dend_10, parent: soma_0 (entry count 67/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 1.98427, -9.44293, -4.03, 2.04 ) }
    dend_10 { pt3dadd( 2.11956, -11.0403, -3.07712, 2.19 ) }
    dend_10 { pt3dadd( 2.24786, -12.5553, -2.17341, 1.9 ) }
    dend_10 { pt3dadd( 2.3659, -13.949, -1.34205, 1.9 ) }
    // Section: dend_9, id: dend_9, parent: soma_0 (entry count 71/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -5.41573, -6.51693, -0.44, 0.51 ) }
    dend_9 { pt3dadd( -5.94254, -6.40888, 0.201778, 0.51 ) }
    dend_9 { pt3dadd( -6.7219, -6.1437, 1.05871, 0.51 ) }
    dend_9 { pt3dadd( -7.35685, -5.8845, 1.68926, 0.51 ) }
    dend_9 { pt3dadd( -8.37159, -5.42976, 2.62835, 1.02 ) }
    dend_9 { pt3dadd( -8.92168, -5.18821, 3.1076, 0.88 ) }
    dend_9 { pt3dadd( -9.9252, -4.76923, 3.89575, 0.51 ) }
    dend_9 { pt3dadd( -10.8199, -4.37454, 4.46186, 0.22 ) }
    dend_9 { pt3dadd( -11.33, -4.16466, 4.70349, 0.22 ) }
    dend_9 { pt3dadd( -11.5684, -4.08586, 4.78887, 0.22 ) }
    dend_9 { pt3dadd( -12.8581, -3.74792, 5.118, 0.22 ) }
    dend_9 { pt3dadd( -13.7088, -3.5516, 5.35762, 0.22 ) }
    dend_9 { pt3dadd( -14.5598, -3.37134, 5.59328, 0.66 ) }
    dend_9 { pt3dadd( -15.2276, -3.23946, 5.80285, 0.95 ) }
    dend_9 { pt3dadd( -16.2763, -3.04166, 6.14779, 0.58 ) }
    dend_9 { pt3dadd( -17.3019, -2.87688, 6.48278, 0.44 ) }
    dend_9 { pt3dadd( -18.5447, -2.72356, 6.87498, 0.22 ) }
    dend_9 { pt3dadd( -19.0844, -2.70345, 7.0624, 0.07 ) }
    dend_9 { pt3dadd( -19.6926, -2.73086, 7.2584, 0.07 ) }
    dend_9 { pt3dadd( -20.3257, -2.80125, 7.43753, 0.58 ) }
    dend_9 { pt3dadd( -21.166, -2.96875, 7.65363, 1.09 ) }
    dend_9 { pt3dadd( -21.9174, -3.17166, 7.8503, 0.73 ) }
    dend_9 { pt3dadd( -22.9845, -3.45201, 8.09641, 0.22 ) }
    dend_9 { pt3dadd( -23.4453, -3.54428, 8.22986, 0.22 ) }
    dend_9 { pt3dadd( -23.7753, -3.57528, 8.34011, 0.22 ) }
    dend_9 { pt3dadd( -24.603, -3.54929, 8.64093, 0.22 ) }
    dend_9 { pt3dadd( -25.2505, -3.45081, 8.88548, 0.51 ) }
    dend_9 { pt3dadd( -26.4351, -3.16078, 9.31738, 0.29 ) }
    dend_9 { pt3dadd( -27.1777, -2.94401, 9.55634, 0.51 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_9 { pt3dadd( -27.6861, -2.80668, 9.69886, 0.51 ) }
    dend_9 { pt3dadd( -28.1285, -2.70098, 9.78712, 0.29 ) }
    dend_9 { pt3dadd( -28.5329, -2.61948, 9.82924, 0.29 ) }
    dend_9 { pt3dadd( -29.1188, -2.53299, 9.85859, 0.29 ) }
    dend_9 { pt3dadd( -29.7621, -2.48747, 9.81155, 0.29 ) }
    dend_9 { pt3dadd( -30.2613, -2.4773, 9.79511, 0.58 ) }
    dend_9 { pt3dadd( -30.9122, -2.47888, 9.86474, 0.73 ) }
    dend_9 { pt3dadd( -31.4282, -2.45092, 9.9919, 0.73 ) }
    dend_9 { pt3dadd( -32.2606, -2.34531, 10.2906, 0.36 ) }
    dend_9 { pt3dadd( -33.0811, -2.15328, 10.6901, 0.36 ) }
    dend_9 { pt3dadd( -34.67, -1.58763, 11.5924, 0.36 ) }
    dend_9 { pt3dadd( -35.5056, -1.20715, 12.157, 0.66 ) }
    dend_9 { pt3dadd( -36.3377, -0.765503, 12.7889, 0.15 ) }
    dend_9 { pt3dadd( -36.8011, -0.495424, 13.1692, 0.15 ) }
    dend_9 { pt3dadd( -37.7923, 0.09096, 14.0025, 0.58 ) }
    dend_9 { pt3dadd( -38.2913, 0.351638, 14.4159, 0.22 ) }
    dend_9 { pt3dadd( -38.9625, 0.615733, 14.8549, 0.22 ) }
    dend_9 { pt3dadd( -39.1237, 0.644074, 14.957, 0.22 ) }
    dend_9 { pt3dadd( -39.6119, 0.634195, 15.3175, 0.22 ) }
    dend_9 { pt3dadd( -40.069, 0.506726, 15.6937, 0.22 ) }
    dend_9 { pt3dadd( -40.6048, 0.0520501, 16.1458, 0.22 ) }
    dend_9 { pt3dadd( -40.9753, -0.374927, 16.4505, 0.8 ) }
    dend_9 { pt3dadd( -41.4035, -1.00215, 16.7473, 0.8 ) }
    dend_9 { pt3dadd( -49.1489, 1.09424, 20.1448, 0.8 ) }
    // Section: dend_8, id: dend_8, parent: soma_0 (entry count 24/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( -5.02573, -7.77093, 0.0299997, 0.73 ) }
    dend_8 { pt3dadd( -6.44667, -7.88059, 0.146314, 0.73 ) }
    dend_8 { pt3dadd( -8.10351, -7.81835, 0.258493, 0.73 ) }
    dend_8 { pt3dadd( -9.43996, -7.64372, 0.361174, 0.66 ) }
    dend_8 { pt3dadd( -11.235, -7.33979, 0.60667, 0.66 ) }
    dend_8 { pt3dadd( -12.3958, -7.13237, 0.84346, 1.17 ) }
    dend_8 { pt3dadd( -13.3216, -6.96907, 1.0741, 1.31 ) }
    dend_8 { pt3dadd( -15.095, -6.61435, 1.51043, 0.8 ) }
    dend_8 { pt3dadd( -16.8409, -6.24845, 1.94984, 0.8 ) }
    dend_8 { pt3dadd( -18.5458, -5.92406, 2.35322, 0.58 ) }
    dend_8 { pt3dadd( -20.4159, -5.6284, 2.75595, 0.36 ) }
    dend_8 { pt3dadd( -21.7516, -5.48416, 2.97193, 0.22 ) }
    dend_8 { pt3dadd( -23.089, -5.41169, 3.0954, 0.36 ) }
    dend_8 { pt3dadd( -24.3402, -5.41866, 3.15014, 0.73 ) }
    dend_8 { pt3dadd( -25.8039, -5.46558, 3.17142, 0.73 ) }
    dend_8 { pt3dadd( -27.0648, -5.49571, 3.15738, 0.36 ) }
    dend_8 { pt3dadd( -28.1596, -5.50674, 3.15816, 0.58 ) }
    dend_8 { pt3dadd( -29.9728, -5.49776, 3.27845, 0.8 ) }
    dend_8 { pt3dadd( -31.8102, -5.48957, 3.56137, 0.36 ) }
    dend_8 { pt3dadd( -33.0194, -5.50611, 3.82904, 0.88 ) }
    dend_8 { pt3dadd( -33.7128, -5.52478, 4.01018, 1.39 ) }
    dend_8 { pt3dadd( -34.3, -5.55028, 4.16042, 1.39 ) }
    dend_8 { pt3dadd( -35.5191, -5.60546, 4.43841, 0.36 ) }
    dend_8 { pt3dadd( -36.5151, -5.63999, 4.58667, 0.22 ) }
    dend_8 { pt3dadd( -37.7714, -5.67019, 4.62983, 0.44 ) }
    dend_8 { pt3dadd( -39.6167, -5.7034, 4.57116, 0.66 ) }
    dend_8 { pt3dadd( -40.4826, -5.71769, 4.53996, 0.66 ) }
    dend_8 { pt3dadd( -41.9855, -5.73182, 4.5254, 0.88 ) }
    dend_8 { pt3dadd( -43.6725, -5.70773, 4.48151, 0.51 ) }
    dend_8 { pt3dadd( -45.2099, -5.62561, 4.48831, 0.51 ) }
    dend_8 { pt3dadd( -46.1041, -5.53497, 4.5305, 0.51 ) }
    dend_8 { pt3dadd( -47.6048, -5.31595, 4.6723, 0.36 ) }
    dend_8 { pt3dadd( -48.82, -5.0894, 4.87197, 0.36 ) }
    dend_8 { pt3dadd( -50.4105, -4.73799, 5.36762, 0.22 ) }
    dend_8 { pt3dadd( -51.5507, -4.51787, 5.99986, 0.22 ) }
    dend_8 { pt3dadd( -52.3224, -4.49334, 6.62746, 0.44 ) }
    dend_8 { pt3dadd( -53.0323, -4.6672, 7.12115, 0.58 ) }
    dend_8 { pt3dadd( -53.3587, -4.85456, 7.28032, 0.58 ) }
    dend_8 { pt3dadd( -54.0887, -5.32547, 7.60085, 0.58 ) }
    dend_8 { pt3dadd( -55.0498, -5.9549, 8.0027, 0.22 ) }
    dend_8 { pt3dadd( -56.1943, -6.67118, 8.42578, 0.51 ) }
    dend_8 { pt3dadd( -57.5477, -7.45611, 8.88498, 1.17 ) }
    dend_8 { pt3dadd( -59.3397, -8.35899, 9.47189, 0.36 ) }
    dend_8 { pt3dadd( -60.4328, -8.81633, 9.8126, 0.15 ) }
    dend_8 { pt3dadd( -61.4818, -9.17571, 10.1178, 0.29 ) }
    dend_8 { pt3dadd( -62.6772, -9.47449, 10.4415, 0.8 ) }
    dend_8 { pt3dadd( -63.5106, -9.61587, 10.6617, 0.8 ) }
    dend_8 { pt3dadd( -64.9789, -9.81119, 11.0893, 0.22 ) }
    dend_8 { pt3dadd( -65.8951, -9.92803, 11.3153, 0.73 ) }
    dend_8 { pt3dadd( -66.2962, -9.99849, 11.4039, 0.73 ) }
    dend_8 { pt3dadd( -67.621, -10.345, 11.7135, 0.36 ) }
    dend_8 { pt3dadd( -68.2453, -10.5918, 11.8951, 0.29 ) }
    dend_8 { pt3dadd( -68.9554, -10.9713, 12.1908, 0.15 ) }
    dend_8 { pt3dadd( -69.887, -11.5301, 12.6648, 0.15 ) }
    dend_8 { pt3dadd( -70.5229, -11.9133, 13.0591, 0.15 ) }
    dend_8 { pt3dadd( -71.1521, -12.2495, 13.4841, 0.15 ) }
    dend_8 { pt3dadd( -72.2197, -12.7962, 14.2707, 1.02 ) }
    dend_8 { pt3dadd( -73.1114, -13.216, 14.8824, 1.31 ) }
    dend_8 { pt3dadd( -73.9515, -13.577, 15.4049, 0.66 ) }
    dend_8 { pt3dadd( -74.6057, -13.8655, 15.7914, 0.66 ) }
    dend_8 { pt3dadd( -75.4877, -14.3272, 16.2762, 0.22 ) }
    dend_8 { pt3dadd( -76.2503, -14.8373, 16.6661, 0.07 ) }
    dend_8 { pt3dadd( -77.3516, -15.8508, 17.2429, 0.51 ) }
    dend_8 { pt3dadd( -77.8846, -16.5488, 17.6022, 0.51 ) }
    dend_8 { pt3dadd( -78.5658, -17.8431, 18.2257, 0.22 ) }
    dend_8 { pt3dadd( -78.8047, -18.4905, 18.5203, 0.22 ) }
    dend_8 { pt3dadd( -79.0013, -19.234, 18.8674, 0.22 ) }
    dend_8 { pt3dadd( -79.187, -20.0414, 19.2777, 0.66 ) }
    dend_8 { pt3dadd( -79.3704, -21.0784, 19.893, 0.66 ) }
    dend_8 { pt3dadd( -79.4904, -21.8554, 20.3884, 0.44 ) }
    dend_8 { pt3dadd( -79.6103, -22.2905, 20.6868, 0.07 ) }
    dend_8 { pt3dadd( -80.2236, -22.4181, 21.0302, 0.07 ) }
    dend_8 { pt3dadd( -81.1299, -22.5239, 21.4919, 0.58 ) }
    dend_8 { pt3dadd( -81.8927, -22.585, 21.8495, 0.8 ) }
    dend_8 { pt3dadd( -82.2066, -22.6197, 21.9891, 0.8 ) }
    dend_8 { pt3dadd( -83.2599, -22.7962, 22.4838, 0.07 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_8 { pt3dadd( -84.2592, -23.0826, 22.9519, 0.36 ) }
    dend_8 { pt3dadd( -85.1844, -23.4659, 23.3435, 0.22 ) }
    dend_8 { pt3dadd( -85.6707, -23.7116, 23.5076, 0.22 ) }
    dend_8 { pt3dadd( -86.5196, -24.1113, 23.7066, 0.8 ) }
    dend_8 { pt3dadd( -87.028, -24.2944, 23.8107, 0.95 ) }
    dend_8 { pt3dadd( -88.1728, -24.5444, 23.9966, 0.36 ) }
    dend_8 { pt3dadd( -89.1832, -24.5621, 24.1287, 0.58 ) }
    dend_8 { pt3dadd( -90.166, -24.4965, 24.2403, 0.58 ) }
    dend_8 { pt3dadd( -91.1709, -24.3586, 24.3624, 0.36 ) }
    dend_8 { pt3dadd( -92.4051, -24.0771, 24.5323, 0.15 ) }
    dend_8 { pt3dadd( -93.09, -23.872, 24.645, 0.15 ) }
    dend_8 { pt3dadd( -93.8696, -23.5323, 24.8161, 0.36 ) }
    dend_8 { pt3dadd( -103.52, -26.8239, 28.2472, 0.36 ) }
    // Section: dend_7, id: dend_7, parent: soma_0 (entry count 13/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 5.89427, 4.59807, 3.64, 1.17 ) }
    dend_7 { pt3dadd( 6.42265, 4.84313, 3.54161, 0.22 ) }
    dend_7 { pt3dadd( 6.91199, 5.03871, 3.45114, 1.17 ) }
    dend_7 { pt3dadd( 7.3447, 5.18776, 3.37494, 1.17 ) }
    dend_7 { pt3dadd( 7.94202, 5.36559, 3.27706, 1.17 ) }
    dend_7 { pt3dadd( 8.89163, 5.59122, 3.13879, 0.15 ) }
    dend_7 { pt3dadd( 9.07082, 5.62695, 3.11591, 0.15 ) }
    dend_7 { pt3dadd( 9.53262, 5.69595, 3.11766, 0.15 ) }
    dend_7 { pt3dadd( 9.80477, 5.73529, 3.15963, 0.15 ) }
    dend_7 { pt3dadd( 10.085, 5.79143, 3.25473, 0.73 ) }
    dend_7 { pt3dadd( 10.4929, 5.93949, 3.51149, 1.02 ) }
    dend_7 { pt3dadd( 10.764, 6.12546, 3.77717, 1.02 ) }
    dend_7 { pt3dadd( 11.5421, 6.95139, 4.64357, 0.66 ) }
    dend_7 { pt3dadd( 11.7493, 7.22852, 4.8953, 0.44 ) }
    dend_7 { pt3dadd( 12.0041, 7.60172, 5.19774, 0.22 ) }
    dend_7 { pt3dadd( 12.1482, 7.81462, 5.35371, 0.22 ) }
    dend_7 { pt3dadd( 12.4155, 8.11474, 5.53424, 0.22 ) }
    dend_7 { pt3dadd( 12.769, 8.36858, 5.6333, 0.22 ) }
    dend_7 { pt3dadd( 13.3274, 8.63773, 5.65809, 0.95 ) }
    dend_7 { pt3dadd( 13.6209, 8.75623, 5.6683, 1.53 ) }
    dend_7 { pt3dadd( 13.95, 8.88524, 5.6908, 1.53 ) }
    dend_7 { pt3dadd( 14.9989, 9.3274, 5.78067, 0.51 ) }
    dend_7 { pt3dadd( 15.4635, 9.55174, 5.82376, 0.51 ) }
    dend_7 { pt3dadd( 16.0235, 9.88575, 5.87486, 1.02 ) }
    dend_7 { pt3dadd( 16.6692, 10.3559, 5.9368, 0.36 ) }
    dend_7 { pt3dadd( 17.1773, 10.7587, 5.99593, 0.36 ) }
    dend_7 { pt3dadd( 17.7417, 11.2376, 6.07132, 0.95 ) }
    dend_7 { pt3dadd( 18.1747, 11.6392, 6.13808, 0.95 ) }
    dend_7 { pt3dadd( 18.6716, 12.1158, 6.2311, 0.73 ) }
    dend_7 { pt3dadd( 19.3408, 12.767, 6.35972, 0.29 ) }
    dend_7 { pt3dadd( 20.1005, 13.5325, 6.49401, 0.29 ) }
    dend_7 { pt3dadd( 20.4447, 13.9022, 6.56927, 0.29 ) }
    dend_7 { pt3dadd( 20.7167, 14.2293, 6.66525, 1.02 ) }
    dend_7 { pt3dadd( 21.1313, 14.8052, 6.87128, 1.09 ) }
    dend_7 { pt3dadd( 21.2469, 15.0031, 6.96052, 1.09 ) }
    dend_7 { pt3dadd( 21.5448, 15.6539, 7.34295, 0.51 ) }
    dend_7 { pt3dadd( 21.7903, 16.285, 7.81505, 0.22 ) }
    dend_7 { pt3dadd( 21.9967, 16.7702, 8.23856, 0.66 ) }
    dend_7 { pt3dadd( 22.2, 17.1302, 8.63817, 0.66 ) }
    dend_7 { pt3dadd( 22.557, 17.5974, 9.26587, 0.44 ) }
    dend_7 { pt3dadd( 22.9943, 18.0283, 9.9852, 0.15 ) }
    dend_7 { pt3dadd( 23.3747, 18.2635, 10.5625, 0.15 ) }
    dend_7 { pt3dadd( 23.6473, 18.3574, 10.9243, 0.95 ) }
    dend_7 { pt3dadd( 24.5763, 18.4909, 12.0621, 0.22 ) }
    dend_7 { pt3dadd( 24.9288, 18.4925, 12.4589, 0.29 ) }
    dend_7 { pt3dadd( 25.1568, 18.4793, 12.6779, 0.29 ) }
    dend_7 { pt3dadd( 25.7894, 18.4768, 13.1976, 0.29 ) }
    dend_7 { pt3dadd( 25.9825, 18.5029, 13.3515, 0.29 ) }
    dend_7 { pt3dadd( 26.1448, 18.5422, 13.4846, 0.29 ) }
    dend_7 { pt3dadd( 26.3984, 18.8095, 13.6642, 0.58 ) }
    dend_7 { pt3dadd( 26.7289, 19.3997, 13.9249, 0.44 ) }
    dend_7 { pt3dadd( 27.0389, 20.0649, 14.17, 0.15 ) }
    dend_7 { pt3dadd( 27.1981, 20.5056, 14.2986, 0.73 ) }
    dend_7 { pt3dadd( 32.2079, 24.7544, 16.2285, 0.73 ) }
    // Section: dend_6, id: dend_6, parent: soma_0 (entry count 67/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 3.96427, 6.56457, 1.49, 0.58 ) }
    dend_6 { pt3dadd( 3.99521, 7.13375, 2.03589, 0.44 ) }
    dend_6 { pt3dadd( 4.08396, 7.7217, 2.59815, 0.22 ) }
    dend_6 { pt3dadd( 4.20872, 8.06188, 2.91325, 0.22 ) }
    dend_6 { pt3dadd( 4.57894, 8.49708, 3.25862, 0.22 ) }
    dend_6 { pt3dadd( 4.78061, 8.64387, 3.35811, 0.22 ) }
    dend_6 { pt3dadd( 5.36848, 8.96155, 3.60112, 0.22 ) }
    dend_6 { pt3dadd( 5.73537, 9.093, 3.70836, 0.66 ) }
    dend_6 { pt3dadd( 6.51317, 9.28186, 3.8661, 1.09 ) }
    dend_6 { pt3dadd( 7.84818, 9.54021, 3.96541, 0.15 ) }
    dend_6 { pt3dadd( 8.65052, 9.68279, 3.97782, 0.15 ) }
    dend_6 { pt3dadd( 9.67481, 9.8903, 3.95457, 0.8 ) }
    dend_6 { pt3dadd( 10.1944, 10.0258, 3.9284, 1.09 ) }
    dend_6 { pt3dadd( 11.2786, 10.4334, 3.89936, 0.29 ) }
    dend_6 { pt3dadd( 12.5606, 11.1798, 3.81581, 0.8 ) }
    dend_6 { pt3dadd( 12.9938, 11.523, 3.76618, 0.8 ) }
    dend_6 { pt3dadd( 13.6427, 12.1561, 3.66259, 0.44 ) }
    dend_6 { pt3dadd( 14.2086, 12.7865, 3.55367, 0.66 ) }
    dend_6 { pt3dadd( 15.0121, 13.7232, 3.41681, 1.24 ) }
    dend_6 { pt3dadd( 15.9853, 14.9151, 3.23143, 0.29 ) }
    dend_6 { pt3dadd( 16.7424, 15.8059, 3.09433, 0.58 ) }
    dend_6 { pt3dadd( 17.7123, 16.8279, 2.87357, 0.22 ) }
    dend_6 { pt3dadd( 18.4083, 17.4609, 2.7318, 0.8 ) }
    dend_6 { pt3dadd( 19.3004, 18.1872, 2.62337, 0.8 ) }
    dend_6 { pt3dadd( 20.1259, 18.8168, 2.62864, 0.29 ) }
    dend_6 { pt3dadd( 20.7198, 19.2525, 2.72171, 0.29 ) }
    dend_6 { pt3dadd( 21.4061, 19.7729, 2.89428, 0.15 ) }
    dend_6 { pt3dadd( 22.5387, 20.6223, 3.26229, 0.73 ) }
    dend_6 { pt3dadd( 23.8063, 21.599, 3.74077, 0.07 ) }
    dend_6 { pt3dadd( 24.6756, 22.357, 4.09443, 1.24 ) }
    dend_6 { pt3dadd( 24.9251, 22.6139, 4.19854, 1.24 ) }
    dend_6 { pt3dadd( 25.7554, 23.6626, 4.52219, 0.15 ) }
    dend_6 { pt3dadd( 26.0037, 24.0499, 4.60168, 0.15 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_6 { pt3dadd( 26.2417, 24.4928, 4.64085, 0.44 ) }
    dend_6 { pt3dadd( 26.865, 25.7533, 4.6494, 0.44 ) }
    dend_6 { pt3dadd( 27.4337, 26.9154, 4.63109, 0.15 ) }
    dend_6 { pt3dadd( 27.7175, 27.4875, 4.62503, 0.73 ) }
    dend_6 { pt3dadd( 28.0618, 28.173, 4.62196, 1.31 ) }
    dend_6 { pt3dadd( 28.3807, 28.7672, 4.6221, 1.02 ) }
    dend_6 { pt3dadd( 29.1034, 29.9715, 4.61327, 0.15 ) }
    dend_6 { pt3dadd( 29.6034, 30.6968, 4.60153, 0.36 ) }
    dend_6 { pt3dadd( 29.9141, 31.1055, 4.5656, 0.36 ) }
    dend_6 { pt3dadd( 30.2644, 31.556, 4.5065, 0.51 ) }
    dend_6 { pt3dadd( 30.8774, 32.3506, 4.40426, 0.22 ) }
    dend_6 { pt3dadd( 31.3327, 32.9805, 4.33263, 0.36 ) }
    dend_6 { pt3dadd( 31.6706, 33.5036, 4.29366, 0.8 ) }
    dend_6 { pt3dadd( 32.2183, 34.4403, 4.28479, 0.8 ) }
    dend_6 { pt3dadd( 32.6387, 35.1872, 4.32777, 0.07 ) }
    dend_6 { pt3dadd( 32.9426, 35.6935, 4.39262, 0.07 ) }
    dend_6 { pt3dadd( 33.2017, 36.0937, 4.47154, 0.07 ) }
    dend_6 { pt3dadd( 33.4991, 36.4639, 4.56487, 0.07 ) }
    dend_6 { pt3dadd( 34.1353, 37.1087, 4.74225, 0.44 ) }
    dend_6 { pt3dadd( 34.6446, 37.5274, 4.80989, 0.44 ) }
    dend_6 { pt3dadd( 35.4818, 38.148, 4.80468, 0.66 ) }
    dend_6 { pt3dadd( 36.1966, 38.6858, 4.74686, 1.24 ) }
    dend_6 { pt3dadd( 36.6628, 39.0737, 4.6885, 1.53 ) }
    dend_6 { pt3dadd( 36.8011, 39.2087, 4.66231, 1.53 ) }
    dend_6 { pt3dadd( 37.8028, 40.4261, 4.4306, 0.22 ) }
    dend_6 { pt3dadd( 38.2134, 41.0445, 4.32595, 0.22 ) }
    dend_6 { pt3dadd( 38.5812, 41.7222, 4.22541, 0.36 ) }
    dend_6 { pt3dadd( 38.9897, 42.6228, 4.08194, 0.29 ) }
    dend_6 { pt3dadd( 39.319, 43.4939, 3.98555, 0.29 ) }
    dend_6 { pt3dadd( 39.6029, 44.4534, 3.92444, 0.29 ) }
    dend_6 { pt3dadd( 39.7491, 45.2357, 3.91673, 0.88 ) }
    dend_6 { pt3dadd( 39.7931, 45.7271, 3.92519, 0.88 ) }
    dend_6 { pt3dadd( 39.8188, 46.999, 3.95612, 0.07 ) }
    dend_6 { pt3dadd( 39.7885, 48.0927, 3.97624, 0.29 ) }
    dend_6 { pt3dadd( 39.7545, 48.9564, 3.99051, 0.29 ) }
    dend_6 { pt3dadd( 39.759, 49.6063, 3.98463, 0.29 ) }
    dend_6 { pt3dadd( 39.8988, 50.7129, 3.92988, 0.07 ) }
    dend_6 { pt3dadd( 40.0252, 51.1689, 3.85729, 0.07 ) }
    dend_6 { pt3dadd( 40.2821, 51.7765, 3.6951, 0.29 ) }
    dend_6 { pt3dadd( 40.6792, 52.5811, 3.41114, 0.88 ) }
    dend_6 { pt3dadd( 41.1841, 53.5035, 3.08312, 0.51 ) }
    dend_6 { pt3dadd( 41.5996, 54.302, 2.83035, 0.15 ) }
    dend_6 { pt3dadd( 42.0023, 55.2684, 2.5497, 0.15 ) }
    dend_6 { pt3dadd( 42.1878, 55.9438, 2.38869, 0.15 ) }
    dend_6 { pt3dadd( 42.3481, 57.1048, 2.15558, 1.31 ) }
    dend_6 { pt3dadd( 42.3661, 57.7782, 2.074, 1.61 ) }
    dend_6 { pt3dadd( 42.3261, 58.957, 2.00956, 1.82 ) }
    dend_6 { pt3dadd( 42.2565, 60.3627, 1.9612, 0.29 ) }
    dend_6 { pt3dadd( 42.2379, 61.0306, 1.93953, 0.22 ) }
    dend_6 { pt3dadd( 42.2586, 61.9462, 1.87573, 0.29 ) }
    dend_6 { pt3dadd( 42.3781, 63.2852, 1.73223, 0.07 ) }
    dend_6 { pt3dadd( 42.47, 63.743, 1.65912, 0.07 ) }
    dend_6 { pt3dadd( 42.8916, 64.9506, 1.41302, 0.07 ) }
    dend_6 { pt3dadd( 43.3724, 65.9023, 1.27216, 0.22 ) }
    dend_6 { pt3dadd( 43.9018, 66.7359, 1.19468, 1.31 ) }
    dend_6 { pt3dadd( 44.5376, 67.5538, 1.21269, 0.95 ) }
    dend_6 { pt3dadd( 45.5677, 68.7514, 1.32797, 0.15 ) }
    dend_6 { pt3dadd( 46.137, 69.4002, 1.4609, 0.15 ) }
    dend_6 { pt3dadd( 47.2309, 70.6254, 1.84528, 0.8 ) }
    dend_6 { pt3dadd( 47.9667, 71.4225, 2.16041, 1.75 ) }
    dend_6 { pt3dadd( 49.4499, 72.9844, 2.8412, 0.15 ) }
    dend_6 { pt3dadd( 49.7945, 73.3376, 3.00418, 0.15 ) }
    dend_6 { pt3dadd( 50.4481, 73.993, 3.29113, 0.15 ) }
    dend_6 { pt3dadd( 50.7742, 74.3197, 3.38557, 0.15 ) }
    dend_6 { pt3dadd( 51.1687, 74.7164, 3.43065, 0.15 ) }
    dend_6 { pt3dadd( 51.9441, 75.5247, 3.44287, 0.44 ) }
    dend_6 { pt3dadd( 52.4117, 76.0609, 3.40888, 0.66 ) }
    dend_6 { pt3dadd( 53.5177, 77.4097, 3.38751, 0.15 ) }
    dend_6 { pt3dadd( 54.2565, 78.3583, 3.4034, 0.8 ) }
    dend_6 { pt3dadd( 54.4546, 78.6264, 3.42269, 0.8 ) }
    dend_6 { pt3dadd( 55.0214, 79.4588, 3.5126, 0.15 ) }
    dend_6 { pt3dadd( 55.6943, 80.524, 3.67839, 0.07 ) }
    dend_6 { pt3dadd( 56.4, 81.6912, 3.9058, 1.68 ) }
    dend_6 { pt3dadd( 56.9684, 82.6267, 4.15138, 1.46 ) }
    dend_6 { pt3dadd( 57.7637, 83.8267, 4.52527, 0.15 ) }
    dend_6 { pt3dadd( 58.099, 84.2682, 4.66579, 0.51 ) }
    dend_6 { pt3dadd( 58.3425, 84.5486, 4.7614, 0.51 ) }
    dend_6 { pt3dadd( 58.918, 85.1442, 4.96279, 0.15 ) }
    dend_6 { pt3dadd( 59.6749, 85.9103, 5.18262, 0.36 ) }
    dend_6 { pt3dadd( 60.0989, 86.3367, 5.30648, 0.36 ) }
    dend_6 { pt3dadd( 60.6, 86.8601, 5.4448, 0.22 ) }
    dend_6 { pt3dadd( 61.0796, 87.3924, 5.5863, 0.22 ) }
    dend_6 { pt3dadd( 61.3955, 87.7879, 5.68217, 0.22 ) }
    dend_6 { pt3dadd( 61.6578, 88.1555, 5.75995, 0.22 ) }
    dend_6 { pt3dadd( 61.8527, 88.4541, 5.80508, 0.22 ) }
    dend_6 { pt3dadd( 61.9826, 88.6548, 5.83527, 0.22 ) }
    dend_6 { pt3dadd( 62.2741, 89.0908, 5.90849, 0.22 ) }
    dend_6 { pt3dadd( 62.6594, 89.6415, 5.99835, 0.22 ) }
    dend_6 { pt3dadd( 63.3826, 90.6672, 6.13319, 1.61 ) }
    dend_6 { pt3dadd( 63.7268, 91.1354, 6.18291, 1.61 ) }
    dend_6 { pt3dadd( 64.8057, 92.6077, 6.30303, 0.29 ) }
    dend_6 { pt3dadd( 65.4489, 93.4885, 6.39931, 0.07 ) }
    dend_6 { pt3dadd( 66.0743, 94.3653, 6.51059, 0.66 ) }
    dend_6 { pt3dadd( 66.6575, 95.2701, 6.6468, 0.66 ) }
    dend_6 { pt3dadd( 67.0223, 95.9292, 6.76465, 0.66 ) }
    dend_6 { pt3dadd( 67.5665, 97.1203, 7.00884, 0.07 ) }
    dend_6 { pt3dadd( 68.0463, 98.4246, 7.29641, 0.8 ) }
    dend_6 { pt3dadd( 68.1389, 98.7321, 7.36793, 1.17 ) }
    dend_6 { pt3dadd( 68.4338, 99.8607, 7.65325, 0.07 ) }
    dend_6 { pt3dadd( 68.6215, 100.62, 7.85203, 0.22 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_6 { pt3dadd( 68.9064, 101.813, 8.13251, 0.07 ) }
    dend_6 { pt3dadd( 69.1346, 102.77, 8.31571, 0.58 ) }
    dend_6 { pt3dadd( 69.1773, 102.965, 8.34124, 0.58 ) }
    dend_6 { pt3dadd( 69.393, 104.138, 8.4945, 0.22 ) }
    dend_6 { pt3dadd( 69.5038, 104.956, 8.59445, 0.22 ) }
    dend_6 { pt3dadd( 69.511, 105.534, 8.6682, 0.22 ) }
    dend_6 { pt3dadd( 69.3694, 106.503, 8.81967, 0.07 ) }
    dend_6 { pt3dadd( 69.2378, 107.038, 8.91322, 0.07 ) }
    dend_6 { pt3dadd( 68.9076, 107.988, 9.09338, 0.66 ) }
    dend_6 { pt3dadd( 68.7099, 108.353, 9.17227, 0.95 ) }
    dend_6 { pt3dadd( 67.984, 109.38, 9.42253, 0.07 ) }
    dend_6 { pt3dadd( 67.6561, 109.765, 9.52423, 0.29 ) }
    dend_6 { pt3dadd( 73.0253, 116.885, 10.566, 0.29 ) }
    // Section: dend_1, id: dend_1, parent: soma_0 (entry count 13/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 0.774266, 8.78757, 1.41, 0.95 ) }
    dend_1 { pt3dadd( 0.452273, 9.76642, 1.61676, 0.95 ) }
    dend_1 { pt3dadd( 0.132941, 10.7372, 1.8218, 0.95 ) }
    dend_1 { pt3dadd( -0.353813, 12.2169, 2.13436, 1.17 ) }
    dend_1 { pt3dadd( -0.604049, 12.9776, 2.29504, 1.39 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 18/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( -3.28573, 7.99907, -0.0300002, 0.8 ) }
    dend_0 { pt3dadd( -3.77068, 8.44829, 0.0726287, 0.88 ) }
    dend_0 { pt3dadd( -4.9714, 9.6422, 0.374152, 0.88 ) }
    dend_0 { pt3dadd( -5.76876, 10.5043, 0.597417, 0.88 ) }
    dend_0 { pt3dadd( -6.77531, 11.6859, 0.868766, 0.88 ) }
    dend_0 { pt3dadd( -7.46128, 12.5386, 1.01711, 0.44 ) }
    dend_0 { pt3dadd( -8.05171, 13.2929, 1.10866, 0.44 ) }
    dend_0 { pt3dadd( -8.52605, 13.9429, 1.15516, 0.44 ) }
    dend_0 { pt3dadd( -8.80884, 14.3538, 1.15508, 0.44 ) }
    dend_0 { pt3dadd( -9.24444, 14.9016, 1.04535, 0.44 ) }
    dend_0 { pt3dadd( -9.8062, 15.4756, 0.822998, 0.66 ) }
    dend_0 { pt3dadd( -10.5768, 16.1002, 0.5337, 1.02 ) }
    dend_0 { pt3dadd( -11.2463, 16.5437, 0.359134, 1.53 ) }
    dend_0 { pt3dadd( -11.8369, 16.8828, 0.296333, 1.53 ) }
    dend_0 { pt3dadd( -13.7174, 17.8969, 0.282977, 0.66 ) }
    dend_0 { pt3dadd( -14.8382, 18.4812, 0.379355, 0.73 ) }
    dend_0 { pt3dadd( -16.2487, 19.2257, 0.637508, 1.09 ) }
    dend_0 { pt3dadd( -17.6052, 20.0003, 1.04218, 0.22 ) }
    dend_0 { pt3dadd( -18.8804, 20.8081, 1.5991, 0.22 ) }
    dend_0 { pt3dadd( -19.1751, 21.0407, 1.79186, 0.22 ) }
    dend_0 { pt3dadd( -19.2603, 21.1493, 1.89233, 0.22 ) }
    dend_0 { pt3dadd( -19.4716, 21.569, 2.22308, 0.22 ) }
    dend_0 { pt3dadd( -19.8457, 22.6084, 2.86948, 1.09 ) }
    dend_0 { pt3dadd( -19.9478, 22.9121, 3.00465, 1.46 ) }
    dend_0 { pt3dadd( -20.2348, 23.5435, 3.2121, 1.46 ) }
    dend_0 { pt3dadd( -21.0061, 24.9137, 3.68563, 0.07 ) }
    dend_0 { pt3dadd( -21.4263, 25.5502, 3.9148, 0.66 ) }
    dend_0 { pt3dadd( -21.745, 25.9775, 4.06455, 1.24 ) }
    dend_0 { pt3dadd( -21.9014, 26.1701, 4.12813, 1.24 ) }
    dend_0 { pt3dadd( -22.7328, 27.1582, 4.43947, 0.51 ) }
    dend_0 { pt3dadd( -23.4623, 28.0077, 4.68432, 0.51 ) }
    dend_0 { pt3dadd( -24.1623, 28.8607, 4.88422, 0.58 ) }
    dend_0 { pt3dadd( -25.0723, 30.0781, 5.12998, 0.44 ) }
    dend_0 { pt3dadd( -25.9692, 31.3249, 5.36742, 0.44 ) }
    dend_0 { pt3dadd( -26.5444, 32.1171, 5.50325, 0.88 ) }
    dend_0 { pt3dadd( -27.1521, 32.903, 5.61339, 0.88 ) }
    dend_0 { pt3dadd( -28.3005, 34.2506, 5.77058, 0.36 ) }
    dend_0 { pt3dadd( -28.9215, 34.9425, 5.84965, 0.36 ) }
    dend_0 { pt3dadd( -29.55, 35.6209, 5.92958, 0.36 ) }
    dend_0 { pt3dadd( -30.2792, 36.4131, 6.02563, 0.8 ) }
    dend_0 { pt3dadd( -31.3018, 37.5776, 6.16896, 0.58 ) }
    dend_0 { pt3dadd( -31.8764, 38.3471, 6.25721, 0.36 ) }
    dend_0 { pt3dadd( -32.4169, 39.2922, 6.35212, 0.8 ) }
    dend_0 { pt3dadd( -32.8557, 40.4598, 6.44386, 0.58 ) }
    dend_0 { pt3dadd( -33.0061, 41.3903, 6.4926, 1.31 ) }
    dend_0 { pt3dadd( -32.9886, 42.3696, 6.5171, 1.31 ) }
    dend_0 { pt3dadd( -32.7406, 44.0491, 6.53857, 0.44 ) }
    dend_0 { pt3dadd( -32.5544, 44.978, 6.53755, 0.36 ) }
    dend_0 { pt3dadd( -32.3736, 45.7602, 6.53605, 0.66 ) }
    dend_0 { pt3dadd( -31.9791, 47.197, 6.53304, 0.29 ) }
    dend_0 { pt3dadd( -31.5074, 48.6596, 6.4854, 0.51 ) }
    dend_0 { pt3dadd( -30.8767, 50.4057, 6.37854, 0.15 ) }
    dend_0 { pt3dadd( -30.6684, 50.9383, 6.35516, 0.15 ) }
    dend_0 { pt3dadd( -30.4685, 51.3955, 6.34614, 0.15 ) }
    dend_0 { pt3dadd( -30.0977, 52.1547, 6.35162, 0.58 ) }
    dend_0 { pt3dadd( -29.337, 53.4937, 6.42808, 0.22 ) }
    dend_0 { pt3dadd( -28.8774, 54.2081, 6.50874, 0.22 ) }
    dend_0 { pt3dadd( -27.9857, 55.5668, 6.75616, 0.8 ) }
    dend_0 { pt3dadd( -27.4462, 56.4969, 6.98327, 0.15 ) }
    dend_0 { pt3dadd( -27.0898, 57.2401, 7.14786, 0.15 ) }
    dend_0 { pt3dadd( -26.9131, 57.7813, 7.27075, 0.15 ) }
    dend_0 { pt3dadd( -26.6871, 58.8986, 7.56422, 0.36 ) }
    dend_0 { pt3dadd( -26.4989, 60.1722, 7.86869, 0.8 ) }
    dend_0 { pt3dadd( -26.3579, 61.293, 8.0926, 0.58 ) }
    dend_0 { pt3dadd( -26.2178, 62.9145, 8.42005, 0.73 ) }
    dend_0 { pt3dadd( -26.128, 64.2171, 8.6757, 0.44 ) }
    dend_0 { pt3dadd( -26.0633, 65.3964, 8.88088, 0.22 ) }
    dend_0 { pt3dadd( -26.0235, 66.333, 9.03545, 0.73 ) }
    dend_0 { pt3dadd( -25.939, 67.0813, 9.12403, 0.73 ) }
    dend_0 { pt3dadd( -28.8229, 76.16, 9.4766, 0.73 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 88/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( -3.70455, 11.6825, 0.0, 0.846942 ) }
    axon_0 { pt3dadd( -7.06447, 26.3014, 0.0, 0.846942 ) }
    axon_0 { pt3dadd( -10.4244, 40.9202, 0.0, 0.846942 ) }
    // Section: dend_14, id: dend_14, parent: dend_10 (entry count 91/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 2.3659, -13.949, -1.34205, 0.8 ) }
    dend_14 { pt3dadd( 3.76016, -14.1476, -0.717276, 0.8 ) }
    dend_14 { pt3dadd( 5.13715, -14.4713, -0.207673, 0.58 ) }
    dend_14 { pt3dadd( 5.85364, -14.7044, -0.0106566, 0.58 ) }
    dend_14 { pt3dadd( 6.41838, -14.9118, 0.124234, 0.58 ) }
    dend_14 { pt3dadd( 7.3937, -15.2898, 0.343219, 0.51 ) }
    dend_14 { pt3dadd( 8.38924, -15.6796, 0.556281, 1.17 ) }
    dend_14 { pt3dadd( 9.39276, -16.0793, 0.718471, 1.17 ) }
    dend_14 { pt3dadd( 11.7623, -17.0262, 1.04769, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_14 { pt3dadd( 12.8563, -17.4763, 1.20295, 0.66 ) }
    dend_14 { pt3dadd( 13.9868, -17.9367, 1.36751, 0.66 ) }
    dend_14 { pt3dadd( 14.8712, -18.284, 1.50071, 0.66 ) }
    dend_14 { pt3dadd( 16.3944, -18.8255, 1.7386, 1.39 ) }
    dend_14 { pt3dadd( 17.7948, -19.2541, 1.96639, 1.53 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 5/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 2.3659, -13.949, -1.34205, 1.02 ) }
    dend_11 { pt3dadd( 3.02355, -16.3906, -1.60606, 1.02 ) }
    dend_11 { pt3dadd( 3.65651, -18.4274, -1.6171, 0.88 ) }
    dend_11 { pt3dadd( 4.30165, -20.0746, -1.50332, 1.02 ) }
    dend_11 { pt3dadd( 4.9697, -21.4945, -1.32802, 0.8 ) }
    dend_11 { pt3dadd( 5.92435, -23.1098, -0.983255, 0.51 ) }
    dend_11 { pt3dadd( 7.13215, -24.8202, -0.473458, 0.51 ) }
    dend_11 { pt3dadd( 8.07052, -25.7508, 0.0320258, 0.51 ) }
    dend_11 { pt3dadd( 9.20819, -26.6493, 0.752345, 0.73 ) }
    dend_11 { pt3dadd( 9.87346, -27.1329, 1.24054, 0.73 ) }
    dend_11 { pt3dadd( 11.4596, -28.259, 2.45818, 0.44 ) }
    dend_11 { pt3dadd( 12.1514, -28.705, 2.99582, 0.44 ) }
    dend_11 { pt3dadd( 12.919, -29.1923, 3.57735, 0.44 ) }
    dend_11 { pt3dadd( 13.9565, -29.9543, 4.36458, 0.44 ) }
    dend_11 { pt3dadd( 15.022, -30.9981, 5.32132, 1.31 ) }
    dend_11 { pt3dadd( 15.632, -31.8206, 5.95513, 1.68 ) }
    // Section: dend_5, id: dend_5, parent: dend_1 (entry count 21/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -0.604049, 12.9776, 2.29504, 0.44 ) }
    dend_5 { pt3dadd( -0.378994, 13.5706, 3.28644, 0.44 ) }
    dend_5 { pt3dadd( -0.265276, 13.7436, 3.53268, 0.44 ) }
    dend_5 { pt3dadd( 0.455425, 14.5696, 4.57222, 0.66 ) }
    dend_5 { pt3dadd( 0.875159, 14.9882, 5.06195, 0.95 ) }
    dend_5 { pt3dadd( 1.67357, 15.711, 5.86221, 0.51 ) }
    dend_5 { pt3dadd( 2.57946, 16.4603, 6.7291, 0.51 ) }
    dend_5 { pt3dadd( 3.69845, 17.2887, 7.74428, 0.22 ) }
    dend_5 { pt3dadd( 4.59164, 17.9301, 8.52683, 0.88 ) }
    dend_5 { pt3dadd( 5.11381, 18.3165, 8.97805, 1.09 ) }
    dend_5 { pt3dadd( 5.70201, 18.8039, 9.52713, 0.73 ) }
    dend_5 { pt3dadd( 6.72246, 19.8192, 10.5561, 0.44 ) }
    dend_5 { pt3dadd( 7.51661, 20.9045, 11.571, 0.22 ) }
    dend_5 { pt3dadd( 7.58566, 21.288, 11.9063, 0.22 ) }
    dend_5 { pt3dadd( 7.31593, 22.0441, 12.3996, 0.95 ) }
    dend_5 { pt3dadd( 6.95318, 22.581, 12.659, 0.95 ) }
    dend_5 { pt3dadd( 6.19411, 23.5066, 12.9572, 0.22 ) }
    dend_5 { pt3dadd( 5.42955, 24.4319, 13.1123, 0.22 ) }
    dend_5 { pt3dadd( 4.93142, 25.1427, 13.1797, 0.22 ) }
    dend_5 { pt3dadd( 4.75088, 25.5034, 13.2152, 0.22 ) }
    dend_5 { pt3dadd( 4.56394, 26.059, 13.2615, 0.22 ) }
    dend_5 { pt3dadd( 4.33196, 27.1298, 13.3504, 0.73 ) }
    dend_5 { pt3dadd( 4.23301, 28.3005, 13.4076, 1.02 ) }
    dend_5 { pt3dadd( 4.27296, 29.5857, 13.4205, 0.44 ) }
    dend_5 { pt3dadd( 4.36408, 30.3527, 13.402, 0.15 ) }
    dend_5 { pt3dadd( 4.4844, 31.0686, 13.3695, 0.15 ) }
    dend_5 { pt3dadd( 4.64809, 31.7407, 13.3362, 0.15 ) }
    dend_5 { pt3dadd( 4.95691, 32.6825, 13.3126, 0.58 ) }
    dend_5 { pt3dadd( 5.37934, 33.7976, 13.3164, 0.29 ) }
    dend_5 { pt3dadd( 5.78329, 34.9218, 13.3811, 0.58 ) }
    dend_5 { pt3dadd( 5.96559, 35.4547, 13.4412, 0.58 ) }
    dend_5 { pt3dadd( 6.33705, 36.6435, 13.6617, 0.22 ) }
    dend_5 { pt3dadd( 6.52683, 37.4316, 13.8593, 0.22 ) }
    dend_5 { pt3dadd( 6.72643, 38.5427, 14.1877, 0.22 ) }
    dend_5 { pt3dadd( 6.90385, 39.7755, 14.5391, 0.8 ) }
    dend_5 { pt3dadd( 7.02473, 40.6708, 14.7693, 1.02 ) }
    dend_5 { pt3dadd( 7.23413, 42.069, 15.0532, 1.02 ) }
    dend_5 { pt3dadd( 7.49988, 43.7491, 15.2988, 0.07 ) }
    dend_5 { pt3dadd( 7.68968, 44.9331, 15.4597, 0.95 ) }
    dend_5 { pt3dadd( 7.90096, 46.214, 15.692, 0.44 ) }
    dend_5 { pt3dadd( 8.04914, 47.1308, 15.8933, 0.44 ) }
    dend_5 { pt3dadd( 8.14503, 48.1528, 16.1822, 0.44 ) }
    dend_5 { pt3dadd( 8.17606, 49.1424, 16.5093, 0.15 ) }
    dend_5 { pt3dadd( 8.13992, 50.5152, 17.0182, 0.73 ) }
    dend_5 { pt3dadd( 8.02972, 52.1848, 17.6997, 1.31 ) }
    dend_5 { pt3dadd( 7.9723, 53.0093, 18.0672, 1.82 ) }
    dend_5 { pt3dadd( 7.88743, 54.6009, 18.7855, 0.73 ) }
    dend_5 { pt3dadd( 7.87851, 55.4899, 19.1719, 0.51 ) }
    dend_5 { pt3dadd( 7.98464, 56.9208, 19.6893, 0.29 ) }
    dend_5 { pt3dadd( 8.10708, 57.5786, 19.867, 0.29 ) }
    dend_5 { pt3dadd( 8.34373, 58.3019, 20.021, 0.29 ) }
    dend_5 { pt3dadd( 8.70173, 59.0045, 20.191, 0.73 ) }
    dend_5 { pt3dadd( 9.04849, 59.5061, 20.3532, 0.73 ) }
    dend_5 { pt3dadd( 9.82709, 60.4552, 20.7407, 0.22 ) }
    dend_5 { pt3dadd( 10.6335, 61.356, 21.1882, 0.66 ) }
    dend_5 { pt3dadd( 11.5408, 62.4093, 21.7472, 0.51 ) }
    dend_5 { pt3dadd( 12.3576, 63.5063, 22.3352, 0.36 ) }
    dend_5 { pt3dadd( 12.8445, 64.301, 22.7413, 0.36 ) }
    dend_5 { pt3dadd( 13.08, 64.8912, 22.9894, 0.8 ) }
    dend_5 { pt3dadd( 13.2863, 65.9163, 23.321, 0.58 ) }
    dend_5 { pt3dadd( 13.3446, 66.9487, 23.5608, 0.44 ) }
    dend_5 { pt3dadd( 13.2971, 68.4041, 23.8176, 0.44 ) }
    dend_5 { pt3dadd( 13.2069, 69.6274, 23.9667, 0.44 ) }
    dend_5 { pt3dadd( 13.0615, 71.6088, 24.1212, 0.36 ) }
    dend_5 { pt3dadd( 12.9922, 72.6797, 24.1784, 0.22 ) }
    dend_5 { pt3dadd( 12.9904, 73.6268, 24.2144, 0.15 ) }
    dend_5 { pt3dadd( 13.0086, 74.1913, 24.2315, 0.15 ) }
    dend_5 { pt3dadd( 13.0888, 74.9603, 24.2572, 1.02 ) }
    dend_5 { pt3dadd( 13.1506, 75.2877, 24.2789, 1.02 ) }
    dend_5 { pt3dadd( 13.6292, 76.733, 24.4549, 0.51 ) }
    dend_5 { pt3dadd( 14.1604, 78.1231, 24.6517, 0.29 ) }
    dend_5 { pt3dadd( 14.8466, 87.2658, 25.9404, 0.29 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 93/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( -0.604049, 12.9776, 2.29504, 0.29 ) }
    dend_2 { pt3dadd( -0.0181122, 14.3994, 1.41019, 0.29 ) }
    dend_2 { pt3dadd( 0.426142, 15.2367, 0.943711, 0.88 ) }
    dend_2 { pt3dadd( 0.862188, 15.9186, 0.582531, 1.02 ) }
    dend_2 { pt3dadd( 1.71106, 16.8313, 0.175048, 0.58 ) }
    dend_2 { pt3dadd( 2.23118, 17.2341, 0.0517497, 0.22 ) }
    dend_2 { pt3dadd( 2.95364, 17.7224, -0.0550558, 0.8 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_2 { pt3dadd( 3.72751, 18.1833, -0.0567723, 1.31 ) }
    dend_2 { pt3dadd( 4.14571, 18.4135, -0.0554126, 1.31 ) }
    dend_2 { pt3dadd( 6.08251, 19.4751, -0.0693026, 0.29 ) }
    dend_2 { pt3dadd( 7.67964, 20.3834, -0.0820791, 0.51 ) }
    dend_2 { pt3dadd( 8.25756, 20.8146, -0.0972817, 0.51 ) }
    dend_2 { pt3dadd( 8.93024, 21.6351, -0.148213, 0.07 ) }
    dend_2 { pt3dadd( 9.33045, 22.7488, -0.248566, 0.07 ) }
    dend_2 { pt3dadd( 9.45699, 23.8659, -0.370022, 0.66 ) }
    dend_2 { pt3dadd( 9.4669, 24.3878, -0.433172, 0.66 ) }
    dend_2 { pt3dadd( 9.5158, 26.1097, -0.579738, 0.29 ) }
    dend_2 { pt3dadd( 9.59128, 26.9467, -0.588816, 0.07 ) }
    dend_2 { pt3dadd( 9.73774, 27.8752, -0.542733, 0.88 ) }
    dend_2 { pt3dadd( 9.91897, 28.5514, -0.478242, 0.88 ) }
    dend_2 { pt3dadd( 10.7715, 30.8538, -0.344296, 0.07 ) }
    dend_2 { pt3dadd( 11.3226, 32.094, -0.315194, 1.46 ) }
    dend_2 { pt3dadd( 11.8574, 33.1134, -0.322581, 1.97 ) }
    dend_2 { pt3dadd( 12.0028, 33.367, -0.324394, 1.97 ) }
    dend_2 { pt3dadd( 13.0963, 35.1752, -0.279981, 0.29 ) }
    dend_2 { pt3dadd( 13.8948, 36.4416, -0.174497, 0.88 ) }
    dend_2 { pt3dadd( 14.6232, 37.583, -0.067375, 0.29 ) }
    dend_2 { pt3dadd( 15.0365, 38.246, 0.00367171, 0.29 ) }
    dend_2 { pt3dadd( 15.6027, 39.2677, 0.177005, 0.29 ) }
    dend_2 { pt3dadd( 16.0673, 40.2549, 0.442077, 0.29 ) }
    dend_2 { pt3dadd( 16.4552, 41.28, 0.813801, 0.29 ) }
    dend_2 { pt3dadd( 16.7982, 42.5599, 1.32235, 1.31 ) }
    dend_2 { pt3dadd( 16.9656, 43.8599, 1.82859, 1.53 ) }
    dend_2 { pt3dadd( 16.9972, 45.8178, 2.56185, 0.73 ) }
    dend_2 { pt3dadd( 16.9277, 46.7578, 2.88379, 0.36 ) }
    dend_2 { pt3dadd( 16.8387, 47.4189, 3.09514, 0.66 ) }
    dend_2 { pt3dadd( 16.5694, 48.903, 3.57993, 0.29 ) }
    dend_2 { pt3dadd( 16.2306, 50.6259, 4.24895, 0.22 ) }
    dend_2 { pt3dadd( 16.0656, 51.5331, 4.59938, 0.22 ) }
    dend_2 { pt3dadd( 16.0165, 52.0047, 4.79097, 0.22 ) }
    dend_2 { pt3dadd( 16.0675, 52.4282, 4.99774, 0.22 ) }
    dend_2 { pt3dadd( 16.3737, 52.9771, 5.26831, 0.22 ) }
    dend_2 { pt3dadd( 17.2023, 53.6096, 5.51313, 0.22 ) }
    dend_2 { pt3dadd( 18.3472, 54.2674, 5.73952, 0.58 ) }
    dend_2 { pt3dadd( 19.7806, 54.9691, 5.96053, 0.36 ) }
    dend_2 { pt3dadd( 21.0524, 55.5186, 6.1281, 0.36 ) }
    dend_2 { pt3dadd( 23.1997, 56.3371, 6.34156, 1.46 ) }
    dend_2 { pt3dadd( 24.6569, 56.832, 6.39627, 2.12 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 41/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( -10.4244, 40.9202, 0.0, 0.15 ) }
    axon_1 { pt3dadd( -13.7843, 55.5391, 0.0, 0.15 ) }
    axon_1 { pt3dadd( -17.1442, 70.1579, 0.0, 0.15 ) }
    // Section: dend_16, id: dend_16, parent: dend_14 (entry count 44/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( 17.7948, -19.2541, 1.96639, 0.51 ) }
    dend_16 { pt3dadd( 19.3974, -17.8673, 2.58797, 0.51 ) }
    dend_16 { pt3dadd( 20.3371, -16.893, 3.07829, 0.51 ) }
    dend_16 { pt3dadd( 20.8694, -16.1819, 3.41624, 0.36 ) }
    dend_16 { pt3dadd( 21.125, -15.7424, 3.60051, 0.36 ) }
    dend_16 { pt3dadd( 21.4989, -14.9764, 3.9241, 0.36 ) }
    dend_16 { pt3dadd( 21.8509, -14.2198, 4.25615, 0.36 ) }
    dend_16 { pt3dadd( 22.1555, -13.3634, 4.64867, 0.36 ) }
    dend_16 { pt3dadd( 22.5593, -12.3775, 5.13155, 0.58 ) }
    dend_16 { pt3dadd( 23.0723, -11.4574, 5.62552, 0.44 ) }
    dend_16 { pt3dadd( 23.8187, -10.689, 6.10922, 0.36 ) }
    dend_16 { pt3dadd( 24.5717, -10.2131, 6.51337, 0.36 ) }
    dend_16 { pt3dadd( 25.3075, -9.90687, 6.85629, 0.36 ) }
    dend_16 { pt3dadd( 26.9298, -9.37805, 7.58395, 0.8 ) }
    dend_16 { pt3dadd( 28.209, -9.01567, 8.13408, 0.8 ) }
    dend_16 { pt3dadd( 30.3617, -8.43033, 8.99058, 0.58 ) }
    dend_16 { pt3dadd( 31.9412, -7.97564, 9.54929, 0.58 ) }
    dend_16 { pt3dadd( 33.3099, -7.5548, 9.98663, 0.88 ) }
    dend_16 { pt3dadd( 34.7988, -7.07353, 10.4164, 0.58 ) }
    dend_16 { pt3dadd( 35.9976, -6.67824, 10.7183, 0.8 ) }
    dend_16 { pt3dadd( 37.5584, -6.17712, 11.045, 0.51 ) }
    dend_16 { pt3dadd( 38.9971, -5.76458, 11.2747, 0.51 ) }
    dend_16 { pt3dadd( 40.5526, -5.4273, 11.4351, 0.51 ) }
    dend_16 { pt3dadd( 41.6984, -5.24371, 11.5332, 0.51 ) }
    dend_16 { pt3dadd( 42.8561, -5.09777, 11.6021, 0.51 ) }
    dend_16 { pt3dadd( 43.7059, -4.97969, 11.6541, 0.51 ) }
    dend_16 { pt3dadd( 44.8765, -4.73492, 11.76, 0.51 ) }
    dend_16 { pt3dadd( 45.6462, -4.32359, 11.8645, 0.29 ) }
    dend_16 { pt3dadd( 46.1002, -3.83488, 11.9474, 0.29 ) }
    dend_16 { pt3dadd( 46.8611, -2.72444, 12.0954, 0.36 ) }
    dend_16 { pt3dadd( 47.436, -1.78222, 12.2019, 0.73 ) }
    dend_16 { pt3dadd( 48.0188, -0.788333, 12.3052, 0.73 ) }
    dend_16 { pt3dadd( 49.1834, 1.15194, 12.5146, 0.22 ) }
    dend_16 { pt3dadd( 50.074, 2.49918, 12.6718, 0.22 ) }
    dend_16 { pt3dadd( 51.1259, 3.84144, 12.8466, 0.88 ) }
    dend_16 { pt3dadd( 52.1779, 4.87967, 13.0014, 0.29 ) }
    dend_16 { pt3dadd( 52.6062, 5.188, 13.0518, 0.29 ) }
    dend_16 { pt3dadd( 53.4319, 5.58787, 13.1178, 0.15 ) }
    dend_16 { pt3dadd( 54.2721, 5.80211, 13.192, 0.15 ) }
    dend_16 { pt3dadd( 55.2601, 5.97828, 13.3042, 0.15 ) }
    dend_16 { pt3dadd( 55.9814, 6.0951, 13.4429, 0.15 ) }
    dend_16 { pt3dadd( 56.7081, 6.26111, 13.6271, 0.15 ) }
    dend_16 { pt3dadd( 57.7317, 6.57865, 13.9416, 0.58 ) }
    dend_16 { pt3dadd( 59.4223, 7.23193, 14.504, 0.15 ) }
    dend_16 { pt3dadd( 61.3358, 8.08102, 15.1555, 0.15 ) }
    dend_16 { pt3dadd( 62.5658, 8.68252, 15.5745, 0.15 ) }
    dend_16 { pt3dadd( 64.109, 9.45385, 16.09, 0.15 ) }
    dend_16 { pt3dadd( 65.9935, 10.3571, 16.7197, 0.95 ) }
    dend_16 { pt3dadd( 66.7107, 10.6884, 16.9629, 0.95 ) }
    dend_16 { pt3dadd( 68.0198, 11.3065, 17.4061, 0.22 ) }
    dend_16 { pt3dadd( 69.0693, 11.8351, 17.7193, 0.73 ) }
    dend_16 { pt3dadd( 70.1112, 12.3725, 17.9492, 0.29 ) }
    dend_16 { pt3dadd( 71.5179, 13.086, 18.2121, 0.29 ) }
    dend_16 { pt3dadd( 83.5135, 20.8502, 19.4545, 0.29 ) }
    // Section: dend_15, id: dend_15, parent: dend_14 (entry count 98/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( 17.7948, -19.2541, 1.96639, 0.66 ) }
    dend_15 { pt3dadd( 18.5705, -19.9274, 1.78169, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_15 { pt3dadd( 19.8832, -21.0701, 1.5869, 0.22 ) }
    dend_15 { pt3dadd( 20.589, -21.6662, 1.52911, 0.58 ) }
    dend_15 { pt3dadd( 21.5216, -22.4105, 1.5309, 0.07 ) }
    dend_15 { pt3dadd( 22.0823, -22.8152, 1.64415, 0.15 ) }
    dend_15 { pt3dadd( 22.3382, -22.9541, 1.86649, 0.15 ) }
    dend_15 { pt3dadd( 22.7114, -23.0403, 2.80052, 0.15 ) }
    dend_15 { pt3dadd( 22.8007, -23.0496, 3.15228, 0.15 ) }
    dend_15 { pt3dadd( 22.9843, -23.0658, 4.17772, 0.15 ) }
    dend_15 { pt3dadd( 23.2546, -23.1339, 5.98046, 0.8 ) }
    dend_15 { pt3dadd( 23.5797, -23.3626, 8.03996, 0.51 ) }
    dend_15 { pt3dadd( 23.7548, -23.6092, 9.02452, 0.51 ) }
    dend_15 { pt3dadd( 23.8327, -23.7673, 9.37721, 0.51 ) }
    dend_15 { pt3dadd( 23.9845, -24.1474, 9.89728, 0.51 ) }
    dend_15 { pt3dadd( 24.254, -24.8592, 10.5007, 0.22 ) }
    dend_15 { pt3dadd( 24.6763, -25.9333, 11.0965, 0.44 ) }
    dend_15 { pt3dadd( 25.1937, -27.1219, 11.625, 0.07 ) }
    dend_15 { pt3dadd( 25.4642, -27.7101, 11.866, 0.07 ) }
    dend_15 { pt3dadd( 25.855, -28.4973, 12.1914, 0.36 ) }
    dend_15 { pt3dadd( 26.1196, -28.9994, 12.401, 0.36 ) }
    dend_15 { pt3dadd( 26.4688, -29.6714, 12.6986, 0.36 ) }
    dend_15 { pt3dadd( 26.9915, -30.6083, 13.1078, 0.07 ) }
    dend_15 { pt3dadd( 30.1801, -35.6054, 19.1243, 0.07 ) }
    // Section: dend_13, id: dend_13, parent: dend_11 (entry count 22/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 15.632, -31.8206, 5.95513, 0.22 ) }
    dend_13 { pt3dadd( 16.7219, -32.6868, 5.02657, 0.22 ) }
    dend_13 { pt3dadd( 17.3606, -33.1392, 4.67313, 0.22 ) }
    dend_13 { pt3dadd( 17.9714, -33.4985, 4.51611, 0.22 ) }
    dend_13 { pt3dadd( 19.5831, -34.2657, 4.56466, 0.22 ) }
    dend_13 { pt3dadd( 21.2926, -34.9062, 5.02339, 0.51 ) }
    dend_13 { pt3dadd( 22.7576, -35.326, 5.39993, 0.15 ) }
    dend_13 { pt3dadd( 25.0924, -35.7342, 5.93358, 0.44 ) }
    dend_13 { pt3dadd( 26.5037, -35.8861, 6.23645, 0.44 ) }
    dend_13 { pt3dadd( 27.6743, -35.9829, 6.41781, 0.15 ) }
    dend_13 { pt3dadd( 29.1573, -36.0732, 6.60692, 0.29 ) }
    dend_13 { pt3dadd( 31.3359, -36.1798, 6.72561, 0.22 ) }
    dend_13 { pt3dadd( 33.1315, -36.2731, 6.72056, 0.66 ) }
    dend_13 { pt3dadd( 34.592, -36.3616, 6.59835, 0.36 ) }
    dend_13 { pt3dadd( 36.4529, -36.5101, 6.39615, 0.88 ) }
    dend_13 { pt3dadd( 38.4567, -36.7206, 6.24172, 0.22 ) }
    dend_13 { pt3dadd( 39.4521, -36.8528, 6.2381, 0.22 ) }
    dend_13 { pt3dadd( 41.2674, -37.1253, 6.54672, 0.22 ) }
    dend_13 { pt3dadd( 42.1095, -37.2356, 6.81957, 1.09 ) }
    dend_13 { pt3dadd( 42.7446, -37.3009, 7.13369, 1.24 ) }
    dend_13 { pt3dadd( 44.212, -37.4199, 8.05405, 1.09 ) }
    dend_13 { pt3dadd( 45.0382, -37.4978, 8.66254, 0.51 ) }
    dend_13 { pt3dadd( 46.2875, -37.6409, 9.60042, 0.44 ) }
    dend_13 { pt3dadd( 47.1888, -37.7662, 10.2274, 0.44 ) }
    dend_13 { pt3dadd( 48.8057, -38.0315, 11.346, 0.44 ) }
    dend_13 { pt3dadd( 50.1602, -38.3129, 12.292, 0.29 ) }
    dend_13 { pt3dadd( 51.5739, -38.6795, 13.2731, 0.29 ) }
    dend_13 { pt3dadd( 52.7535, -39.0567, 14.1063, 0.73 ) }
    dend_13 { pt3dadd( 54.1208, -39.5546, 15.0381, 0.51 ) }
    dend_13 { pt3dadd( 55.1918, -39.9545, 15.7602, 0.29 ) }
    dend_13 { pt3dadd( 56.4894, -40.3916, 16.6036, 0.29 ) }
    dend_13 { pt3dadd( 57.2639, -40.6088, 17.1013, 0.29 ) }
    dend_13 { pt3dadd( 58.5157, -40.848, 17.8489, 0.29 ) }
    dend_13 { pt3dadd( 59.8112, -40.9867, 18.6186, 0.88 ) }
    dend_13 { pt3dadd( 61.177, -41.0403, 19.4092, 0.44 ) }
    dend_13 { pt3dadd( 62.4669, -41.033, 20.1337, 1.09 ) }
    dend_13 { pt3dadd( 63.335, -41.0084, 20.6028, 1.31 ) }
    dend_13 { pt3dadd( 64.5331, -41.0219, 21.2774, 0.15 ) }
    dend_13 { pt3dadd( 65.0084, -41.0521, 21.5578, 0.15 ) }
    dend_13 { pt3dadd( 65.6577, -41.1328, 21.9655, 0.15 ) }
    dend_13 { pt3dadd( 66.364, -41.2326, 22.4049, 0.15 ) }
    dend_13 { pt3dadd( 66.9617, -41.2977, 22.8232, 0.15 ) }
    dend_13 { pt3dadd( 68.4925, -41.3302, 23.94, 0.22 ) }
    dend_13 { pt3dadd( 69.1108, -41.2674, 24.3997, 0.22 ) }
    dend_13 { pt3dadd( 70.4918, -40.9448, 25.4164, 0.95 ) }
    dend_13 { pt3dadd( 71.5994, -40.5444, 26.1769, 0.51 ) }
    dend_13 { pt3dadd( 72.7278, -40.0424, 26.8525, 0.22 ) }
    dend_13 { pt3dadd( 73.6194, -39.5877, 27.3533, 0.22 ) }
    dend_13 { pt3dadd( 74.2707, -39.2439, 27.6827, 0.07 ) }
    dend_13 { pt3dadd( 74.8858, -38.9505, 27.9628, 0.22 ) }
    dend_13 { pt3dadd( 76.1802, -38.3774, 28.5379, 0.51 ) }
    dend_13 { pt3dadd( 78.2265, -37.5702, 29.3434, 0.36 ) }
    dend_13 { pt3dadd( 79.1114, -37.2516, 29.6266, 0.73 ) }
    dend_13 { pt3dadd( 80.3348, -36.8334, 29.9437, 0.73 ) }
    dend_13 { pt3dadd( 81.9016, -36.3256, 30.2078, 0.07 ) }
    dend_13 { pt3dadd( 82.3896, -36.1669, 30.233, 0.07 ) }
    dend_13 { pt3dadd( 83.3371, -35.8692, 30.1451, 0.07 ) }
    dend_13 { pt3dadd( 84.558, -35.6762, 29.9005, 0.07 ) }
    dend_13 { pt3dadd( 85.4399, -35.7299, 29.6146, 0.07 ) }
    dend_13 { pt3dadd( 86.5374, -35.9186, 29.2545, 0.07 ) }
    dend_13 { pt3dadd( 87.4167, -36.1343, 28.9716, 0.88 ) }
    dend_13 { pt3dadd( 88.2629, -36.3947, 28.8029, 0.88 ) }
    dend_13 { pt3dadd( 90.5827, -37.2495, 28.6977, 0.07 ) }
    dend_13 { pt3dadd( 93.7718, -38.5679, 28.957, 0.66 ) }
    dend_13 { pt3dadd( 94.8541, -39.0435, 29.0851, 0.22 ) }
    dend_13 { pt3dadd( 95.907, -39.5163, 29.2355, 0.07 ) }
    dend_13 { pt3dadd( 98.7485, -40.805, 29.6283, 0.07 ) }
    dend_13 { pt3dadd( 99.996, -41.3625, 29.7889, 0.07 ) }
    dend_13 { pt3dadd( 100.535, -41.6242, 29.8593, 0.07 ) }
    dend_13 { pt3dadd( 102.457, -42.7455, 30.2389, 0.66 ) }
    dend_13 { pt3dadd( 103.121, -43.1557, 30.2075, 0.66 ) }
    dend_13 { pt3dadd( 103.867, -43.5925, 30.0664, 0.07 ) }
    dend_13 { pt3dadd( 104.545, -43.9582, 29.8593, 0.07 ) }
    dend_13 { pt3dadd( 105.357, -44.384, 29.6448, 0.07 ) }
    dend_13 { pt3dadd( 106.341, -44.8972, 29.5184, 0.22 ) }
    dend_13 { pt3dadd( 107.43, -45.4704, 29.5305, 0.29 ) }
    dend_13 { pt3dadd( 108.364, -45.931, 29.5176, 0.29 ) }
    dend_13 { pt3dadd( 109.448, -46.4311, 29.5153, 0.29 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_13 { pt3dadd( 110.496, -46.8852, 29.4959, 0.29 ) }
    dend_13 { pt3dadd( 111.973, -47.4891, 29.4435, 0.51 ) }
    dend_13 { pt3dadd( 113.021, -47.8944, 29.3902, 0.44 ) }
    dend_13 { pt3dadd( 114.931, -48.6321, 29.2829, 0.8 ) }
    dend_13 { pt3dadd( 116.633, -49.2843, 29.2061, 0.29 ) }
    dend_13 { pt3dadd( 117.581, -49.6383, 29.1873, 0.58 ) }
    dend_13 { pt3dadd( 118.225, -49.8674, 29.1875, 0.29 ) }
    dend_13 { pt3dadd( 119.691, -50.372, 29.285, 0.36 ) }
    dend_13 { pt3dadd( 120.538, -50.6668, 29.332, 0.36 ) }
    dend_13 { pt3dadd( 121.446, -50.9803, 29.3459, 0.58 ) }
    dend_13 { pt3dadd( 122.247, -51.2461, 29.2698, 0.58 ) }
    dend_13 { pt3dadd( 123.318, -51.6182, 29.1105, 0.07 ) }
    dend_13 { pt3dadd( 124.359, -51.9837, 28.8386, 0.07 ) }
    dend_13 { pt3dadd( 126.963, -52.8592, 27.9044, 0.29 ) }
    dend_13 { pt3dadd( 128.406, -53.2838, 27.3042, 0.07 ) }
    dend_13 { pt3dadd( 129.694, -53.6333, 26.7155, 0.95 ) }
    dend_13 { pt3dadd( 130.823, -53.9125, 26.1324, 0.44 ) }
    dend_13 { pt3dadd( 131.957, -54.2131, 25.4558, 0.07 ) }
    dend_13 { pt3dadd( 132.541, -54.386, 25.1042, 0.07 ) }
    dend_13 { pt3dadd( 133.007, -54.5612, 24.8388, 0.07 ) }
    dend_13 { pt3dadd( 133.256, -54.685, 24.6638, 0.07 ) }
    dend_13 { pt3dadd( 134.066, -55.1522, 24.0559, 0.07 ) }
    dend_13 { pt3dadd( 135.29, -55.89, 23.1847, 0.07 ) }
    dend_13 { pt3dadd( 136.233, -56.466, 22.6081, 0.44 ) }
    dend_13 { pt3dadd( 137.568, -57.2519, 21.9322, 1.61 ) }
    dend_13 { pt3dadd( 138.487, -57.7514, 21.5496, 1.61 ) }
    dend_13 { pt3dadd( 140.616, -58.7497, 20.9116, 0.07 ) }
    dend_13 { pt3dadd( 141.197, -58.981, 20.8051, 0.73 ) }
    dend_13 { pt3dadd( 141.946, -59.2179, 20.7006, 0.73 ) }
    dend_13 { pt3dadd( 143.2, -59.5477, 20.5636, 0.22 ) }
    dend_13 { pt3dadd( 144.346, -59.8099, 20.4923, 0.44 ) }
    dend_13 { pt3dadd( 146.243, -60.2473, 20.4343, 0.07 ) }
    dend_13 { pt3dadd( 146.705, -60.3602, 20.4141, 0.36 ) }
    dend_13 { pt3dadd( 149.087, -60.9853, 20.4461, 0.07 ) }
    dend_13 { pt3dadd( 150.383, -61.3509, 20.5193, 1.82 ) }
    dend_13 { pt3dadd( 151.255, -61.6204, 20.5972, 1.82 ) }
    dend_13 { pt3dadd( 153.805, -62.491, 20.9483, 0.07 ) }
    dend_13 { pt3dadd( 154.985, -62.9391, 21.158, 0.22 ) }
    dend_13 { pt3dadd( 157.17, -63.8452, 21.649, 0.07 ) }
    dend_13 { pt3dadd( 158.062, -64.2599, 21.9215, 0.22 ) }
    dend_13 { pt3dadd( 159.086, -64.7817, 22.2273, 0.22 ) }
    dend_13 { pt3dadd( 159.761, -65.1529, 22.4209, 0.07 ) }
    dend_13 { pt3dadd( 160.113, -65.3614, 22.4956, 0.07 ) }
    dend_13 { pt3dadd( 160.691, -65.6947, 22.5771, 0.07 ) }
    dend_13 { pt3dadd( 161.429, -66.1075, 22.6082, 0.07 ) }
    dend_13 { pt3dadd( 162.171, -66.4969, 22.6448, 0.95 ) }
    dend_13 { pt3dadd( 162.777, -66.7975, 22.6763, 0.95 ) }
    dend_13 { pt3dadd( 164.216, -67.5595, 22.7972, 0.07 ) }
    dend_13 { pt3dadd( 165.738, -68.3991, 22.9694, 0.44 ) }
    dend_13 { pt3dadd( 166.675, -68.905, 23.1, 0.15 ) }
    dend_13 { pt3dadd( 167.513, -69.3392, 23.2423, 0.66 ) }
    dend_13 { pt3dadd( 168.072, -69.6107, 23.3593, 0.66 ) }
    dend_13 { pt3dadd( 169.759, -70.4044, 23.8004, 0.07 ) }
    dend_13 { pt3dadd( 170.331, -70.6878, 23.9835, 0.07 ) }
    dend_13 { pt3dadd( 170.868, -70.9716, 24.1615, 0.07 ) }
    dend_13 { pt3dadd( 171.391, -71.2922, 24.3078, 0.36 ) }
    dend_13 { pt3dadd( 172.11, -71.7629, 24.4969, 0.36 ) }
    dend_13 { pt3dadd( 173.075, -72.424, 24.6819, 0.07 ) }
    dend_13 { pt3dadd( 174.203, -73.2372, 24.8341, 1.75 ) }
    dend_13 { pt3dadd( 174.8, -73.6996, 24.9073, 1.75 ) }
    dend_13 { pt3dadd( 177.188, -75.6241, 25.1807, 0.07 ) }
    dend_13 { pt3dadd( 177.93, -76.2333, 25.2609, 0.58 ) }
    dend_13 { pt3dadd( 179.235, -77.3087, 25.3989, 0.58 ) }
    dend_13 { pt3dadd( 180.223, -78.1223, 25.5104, 0.07 ) }
    dend_13 { pt3dadd( 180.457, -78.3198, 25.5404, 0.07 ) }
    dend_13 { pt3dadd( 180.825, -78.6442, 25.5927, 0.07 ) }
    dend_13 { pt3dadd( 181.138, -78.9217, 25.6474, 0.07 ) }
    dend_13 { pt3dadd( 181.856, -79.5957, 25.7772, 0.36 ) }
    dend_13 { pt3dadd( 182.978, -80.7265, 26.0238, 0.07 ) }
    dend_13 { pt3dadd( 183.503, -81.3288, 26.1295, 0.07 ) }
    dend_13 { pt3dadd( 184.056, -82.0367, 26.2334, 0.07 ) }
    dend_13 { pt3dadd( 184.53, -82.6925, 26.2909, 0.36 ) }
    dend_13 { pt3dadd( 184.996, -83.3759, 26.3217, 0.36 ) }
    dend_13 { pt3dadd( 185.513, -84.1704, 26.3301, 0.07 ) }
    dend_13 { pt3dadd( 186.293, -85.3486, 26.323, 0.51 ) }
    dend_13 { pt3dadd( 186.644, -85.856, 26.316, 0.51 ) }
    dend_13 { pt3dadd( 187.608, -87.1128, 26.3127, 0.07 ) }
    dend_13 { pt3dadd( 188.033, -87.5886, 26.3151, 0.07 ) }
    dend_13 { pt3dadd( 188.7, -88.2093, 26.3071, 0.07 ) }
    dend_13 { pt3dadd( 189.715, -88.9823, 26.303, 1.39 ) }
    dend_13 { pt3dadd( 190.394, -89.3934, 26.3097, 1.39 ) }
    dend_13 { pt3dadd( 191.84, -90.0962, 26.3526, 0.22 ) }
    dend_13 { pt3dadd( 193.136, -90.5777, 26.4272, 0.07 ) }
    dend_13 { pt3dadd( 194.447, -90.9398, 26.5145, 0.36 ) }
    dend_13 { pt3dadd( 195.459, -91.1319, 26.5936, 0.66 ) }
    dend_13 { pt3dadd( 196.261, -91.2307, 26.6733, 0.07 ) }
    dend_13 { pt3dadd( 197.178, -91.3055, 26.7951, 0.22 ) }
    dend_13 { pt3dadd( 197.796, -91.346, 26.9004, 0.22 ) }
    dend_13 { pt3dadd( 198.8, -91.3994, 27.1212, 0.22 ) }
    dend_13 { pt3dadd( 199.647, -91.4384, 27.339, 0.36 ) }
    dend_13 { pt3dadd( 200.821, -91.4904, 27.6354, 0.07 ) }
    dend_13 { pt3dadd( 201.759, -91.538, 27.8629, 0.07 ) }
    dend_13 { pt3dadd( 202.836, -91.5889, 28.1169, 0.73 ) }
    dend_13 { pt3dadd( 203.198, -91.5919, 28.2275, 0.73 ) }
    dend_13 { pt3dadd( 204.387, -91.5376, 28.6593, 0.07 ) }
    dend_13 { pt3dadd( 205.079, -91.4533, 28.9551, 0.07 ) }
    dend_13 { pt3dadd( 206.764, -91.0953, 29.7613, 0.58 ) }
    dend_13 { pt3dadd( 207.441, -90.9014, 30.1103, 0.58 ) }
    dend_13 { pt3dadd( 209.189, -90.2679, 31.1044, 0.07 ) }
    dend_13 { pt3dadd( 210.072, -89.9145, 31.6353, 0.07 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_13 { pt3dadd( 211.075, -89.4939, 32.2668, 0.07 ) }
    dend_13 { pt3dadd( 211.879, -89.1633, 32.7789, 0.88 ) }
    dend_13 { pt3dadd( 212.293, -88.979, 33.0521, 1.46 ) }
    dend_13 { pt3dadd( 213.703, -88.3468, 33.9269, 0.07 ) }
    dend_13 { pt3dadd( 214.29, -88.1087, 34.2222, 0.07 ) }
    dend_13 { pt3dadd( 214.949, -87.8714, 34.5616, 0.07 ) }
    dend_13 { pt3dadd( 215.633, -87.6879, 34.9011, 0.66 ) }
    // Section: dend_12, id: dend_12, parent: dend_11 (entry count 7/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 15.632, -31.8206, 5.95513, 1.39 ) }
    dend_12 { pt3dadd( 14.6419, -33.9398, 6.8793, 1.39 ) }
    dend_12 { pt3dadd( 13.9733, -35.4768, 7.47617, 1.17 ) }
    dend_12 { pt3dadd( 13.2152, -37.3703, 8.13661, 0.73 ) }
    dend_12 { pt3dadd( 12.5744, -39.0648, 8.64966, 0.73 ) }
    dend_12 { pt3dadd( 12.0719, -40.4818, 9.02053, 1.02 ) }
    dend_12 { pt3dadd( 11.4753, -42.2247, 9.40847, 0.58 ) }
    dend_12 { pt3dadd( 10.9622, -43.8812, 9.71149, 0.58 ) }
    dend_12 { pt3dadd( 10.6064, -45.3074, 9.92136, 0.58 ) }
    dend_12 { pt3dadd( 10.3125, -46.998, 10.1491, 0.95 ) }
    dend_12 { pt3dadd( 10.1659, -48.5303, 10.4257, 0.95 ) }
    dend_12 { pt3dadd( 10.1578, -50.1559, 10.8575, 0.51 ) }
    dend_12 { pt3dadd( 10.2754, -51.7837, 11.4272, 0.29 ) }
    dend_12 { pt3dadd( 10.4734, -53.4097, 12.1244, 1.02 ) }
    dend_12 { pt3dadd( 10.7457, -55.2115, 13.0079, 0.73 ) }
    dend_12 { pt3dadd( 11.1326, -57.6002, 14.3047, 0.51 ) }
    dend_12 { pt3dadd( 11.2883, -58.9198, 15.0649, 0.36 ) }
    dend_12 { pt3dadd( 11.367, -60.2611, 15.8075, 0.36 ) }
    dend_12 { pt3dadd( 11.23, -61.5817, 16.349, 0.36 ) }
    dend_12 { pt3dadd( 10.9769, -62.193, 16.404, 0.36 ) }
    dend_12 { pt3dadd( 10.4616, -63.0096, 16.1707, 0.36 ) }
    dend_12 { pt3dadd( 9.47536, -64.5442, 15.4325, 0.44 ) }
    dend_12 { pt3dadd( 8.46724, -66.244, 14.5797, 0.44 ) }
    dend_12 { pt3dadd( 7.78558, -67.7255, 13.974, 0.44 ) }
    dend_12 { pt3dadd( 7.44472, -68.9441, 13.6788, 1.09 ) }
    dend_12 { pt3dadd( 7.23755, -70.3769, 13.5718, 0.8 ) }
    dend_12 { pt3dadd( 7.12747, -72.4148, 13.6604, 0.51 ) }
    dend_12 { pt3dadd( 7.10895, -73.6073, 13.8166, 0.51 ) }
    dend_12 { pt3dadd( 7.03874, -75.8551, 14.282, 0.95 ) }
    dend_12 { pt3dadd( 6.88858, -78.27, 14.8572, 0.58 ) }
    dend_12 { pt3dadd( 6.76454, -79.415, 15.1268, 0.36 ) }
    dend_12 { pt3dadd( 6.55003, -80.6906, 15.3827, 0.36 ) }
    dend_12 { pt3dadd( 6.07265, -82.8219, 15.7129, 0.36 ) }
    dend_12 { pt3dadd( 5.62898, -84.4224, 15.8544, 0.8 ) }
    dend_12 { pt3dadd( 5.17968, -85.773, 15.9139, 0.51 ) }
    dend_12 { pt3dadd( 4.75509, -87.1259, 15.9739, 0.51 ) }
    dend_12 { pt3dadd( 4.38105, -88.7272, 16.0968, 0.36 ) }
    dend_12 { pt3dadd( 4.28302, -89.339, 16.1937, 0.36 ) }
    dend_12 { pt3dadd( 4.22793, -89.9296, 16.3383, 0.36 ) }
    dend_12 { pt3dadd( 4.14473, -91.2647, 16.7469, 0.36 ) }
    dend_12 { pt3dadd( 3.92334, -93.7722, 17.5973, 1.02 ) }
    dend_12 { pt3dadd( 3.64206, -95.6557, 18.2362, 0.66 ) }
    dend_12 { pt3dadd( 3.37156, -96.944, 18.5697, 0.66 ) }
    dend_12 { pt3dadd( 3.07669, -97.8592, 18.6894, 0.66 ) }
    dend_12 { pt3dadd( 2.7693, -98.5831, 18.6811, 0.66 ) }
    dend_12 { pt3dadd( 1.96385, -100.127, 18.4298, 0.66 ) }
    dend_12 { pt3dadd( 1.18895, -101.398, 18.0891, 0.66 ) }
    dend_12 { pt3dadd( 0.183991, -103.089, 17.5739, 0.66 ) }
    dend_12 { pt3dadd( -0.537354, -104.444, 17.1878, 0.66 ) }
    dend_12 { pt3dadd( -1.15641, -105.672, 16.9083, 0.51 ) }
    dend_12 { pt3dadd( -1.93048, -107.276, 16.6682, 0.88 ) }
    dend_12 { pt3dadd( -2.40884, -108.325, 16.6051, 0.88 ) }
    dend_12 { pt3dadd( -3.22968, -110.22, 16.681, 0.51 ) }
    dend_12 { pt3dadd( -3.95375, -111.967, 16.9139, 0.51 ) }
    dend_12 { pt3dadd( -4.33855, -113.117, 17.1421, 0.51 ) }
    dend_12 { pt3dadd( -4.57073, -114.049, 17.3774, 0.51 ) }
    dend_12 { pt3dadd( -4.73816, -115.463, 17.7732, 0.51 ) }
    dend_12 { pt3dadd( -4.70559, -116.914, 18.1402, 1.02 ) }
    dend_12 { pt3dadd( -4.55685, -117.923, 18.3303, 1.02 ) }
    dend_12 { pt3dadd( -3.84625, -120.83, 18.6642, 0.44 ) }
    dend_12 { pt3dadd( -3.38688, -122.283, 18.759, 0.44 ) }
    dend_12 { pt3dadd( -2.49135, -124.728, 18.8237, 0.36 ) }
    dend_12 { pt3dadd( -1.68991, -126.813, 18.7791, 0.36 ) }
    dend_12 { pt3dadd( -1.10944, -128.365, 18.634, 0.58 ) }
    dend_12 { pt3dadd( -0.646172, -129.786, 18.4026, 0.66 ) }
    dend_12 { pt3dadd( -0.409689, -130.773, 18.1936, 0.66 ) }
    dend_12 { pt3dadd( -0.304819, -131.968, 17.9588, 0.44 ) }
    dend_12 { pt3dadd( -0.427056, -133.269, 17.7878, 0.36 ) }
    dend_12 { pt3dadd( -0.735589, -134.611, 17.7382, 0.36 ) }
    dend_12 { pt3dadd( -1.08687, -135.86, 17.7687, 0.36 ) }
    dend_12 { pt3dadd( -1.68515, -137.789, 17.8927, 0.58 ) }
    dend_12 { pt3dadd( -2.24605, -139.564, 18.0759, 0.44 ) }
    dend_12 { pt3dadd( -2.61484, -140.778, 18.2415, 0.44 ) }
    dend_12 { pt3dadd( -3.0697, -142.4, 18.4986, 1.02 ) }
    dend_12 { pt3dadd( -3.49761, -144.012, 18.7622, 0.36 ) }
    dend_12 { pt3dadd( -3.78241, -145.179, 18.9014, 0.36 ) }
    dend_12 { pt3dadd( -4.10408, -146.436, 18.9663, 0.36 ) }
    dend_12 { pt3dadd( -4.41193, -147.593, 19.0016, 0.36 ) }
    dend_12 { pt3dadd( -4.84906, -149.172, 19.0117, 0.22 ) }
    dend_12 { pt3dadd( -5.2781, -150.569, 19.0045, 0.51 ) }
    dend_12 { pt3dadd( -6.0019, -152.759, 18.9479, 0.15 ) }
    dend_12 { pt3dadd( -6.57101, -154.475, 18.8471, 0.36 ) }
    dend_12 { pt3dadd( -6.81253, -155.207, 18.7894, 0.8 ) }
    dend_12 { pt3dadd( -7.2123, -156.467, 18.6907, 0.51 ) }
    dend_12 { pt3dadd( -10.317, -167.564, 19.485, 0.51 ) }
    // Section: dend_4, id: dend_4, parent: dend_2 (entry count 92/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 24.6569, 56.832, 6.39627, 0.29 ) }
    dend_4 { pt3dadd( 26.8426, 56.6934, 6.12553, 0.29 ) }
    dend_4 { pt3dadd( 27.6096, 56.6839, 6.00071, 0.29 ) }
    dend_4 { pt3dadd( 28.4334, 56.7365, 5.81935, 0.29 ) }
    dend_4 { pt3dadd( 29.244, 56.833, 5.71745, 0.29 ) }
    dend_4 { pt3dadd( 29.6898, 56.8984, 5.66683, 0.07 ) }
    dend_4 { pt3dadd( 30.4655, 57.0214, 5.57814, 0.66 ) }
    dend_4 { pt3dadd( 31.2778, 57.1816, 5.47446, 1.24 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_9()
}

proc basic_shape_9() {
    dend_4 { pt3dadd( 33.0298, 57.5558, 5.20841, 0.58 ) }
    dend_4 { pt3dadd( 35.277, 58.0075, 4.85169, 0.22 ) }
    dend_4 { pt3dadd( 37.1787, 58.3632, 4.55679, 0.22 ) }
    dend_4 { pt3dadd( 37.6893, 58.4571, 4.47394, 0.8 ) }
    dend_4 { pt3dadd( 38.7944, 58.6438, 4.3233, 1.24 ) }
    dend_4 { pt3dadd( 40.8473, 58.9719, 4.04244, 0.22 ) }
    dend_4 { pt3dadd( 42.3547, 59.1927, 3.81782, 0.22 ) }
    dend_4 { pt3dadd( 42.8889, 59.2664, 3.71011, 0.51 ) }
    dend_4 { pt3dadd( 44.2871, 59.4559, 3.48748, 0.66 ) }
    dend_4 { pt3dadd( 46.4549, 59.7502, 3.20953, 0.07 ) }
    dend_4 { pt3dadd( 56.3951, 59.9341, 0.580858, 0.07 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 11/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 24.6569, 56.832, 6.39627, 0.66 ) }
    dend_3 { pt3dadd( 24.4366, 57.7912, 7.37776, 0.66 ) }
    dend_3 { pt3dadd( 24.3497, 58.781, 8.19295, 0.15 ) }
    dend_3 { pt3dadd( 24.3595, 59.0952, 8.40622, 0.15 ) }
    dend_3 { pt3dadd( 24.4628, 59.9876, 8.91297, 0.29 ) }
    dend_3 { pt3dadd( 24.6762, 60.977, 9.32545, 0.15 ) }
    dend_3 { pt3dadd( 24.9655, 61.9695, 9.62127, 0.95 ) }
    dend_3 { pt3dadd( 25.2805, 62.8212, 9.7229, 0.58 ) }
    dend_3 { pt3dadd( 25.576, 63.5408, 9.7353, 0.22 ) }
    dend_3 { pt3dadd( 25.8307, 64.1663, 9.7148, 0.07 ) }
    dend_3 { pt3dadd( 26.3596, 65.5941, 9.59411, 1.17 ) }
    dend_3 { pt3dadd( 26.7336, 66.8634, 9.44911, 0.8 ) }
    dend_3 { pt3dadd( 26.9555, 67.8901, 9.35569, 0.51 ) }
    dend_3 { pt3dadd( 27.0972, 68.8648, 9.30995, 0.29 ) }
    dend_3 { pt3dadd( 27.1805, 69.8484, 9.3021, 0.58 ) }
    dend_3 { pt3dadd( 27.1957, 71.3319, 9.35565, 0.36 ) }
    dend_3 { pt3dadd( 27.1121, 72.7624, 9.49651, 0.15 ) }
    dend_3 { pt3dadd( 27.0185, 73.7967, 9.64666, 0.36 ) }
    dend_3 { pt3dadd( 26.9164, 74.9503, 9.87831, 0.36 ) }
    dend_3 { pt3dadd( 26.8612, 75.7083, 10.078, 0.07 ) }
    dend_3 { pt3dadd( 26.8389, 76.6235, 10.3733, 0.15 ) }
    dend_3 { pt3dadd( 26.8394, 77.1151, 10.5688, 0.07 ) }
    dend_3 { pt3dadd( 26.8538, 77.5631, 10.7755, 0.07 ) }
    dend_3 { pt3dadd( 26.889, 78.0126, 10.9689, 0.07 ) }
    dend_3 { pt3dadd( 27.0732, 79.0626, 11.4016, 1.31 ) }
    dend_3 { pt3dadd( 27.268, 79.6495, 11.6564, 1.31 ) }
    dend_3 { pt3dadd( 29.3813, 87.6615, 14.6639, 1.31 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_17, dend_10, dend_9, dend_8, dend_7, dend_6, dend_1, dend_0, dend_14, dend_11, dend_5, dend_2, dend_16, dend_15, dend_13, dend_12, dend_4, dend_3]}
    ModelViewParmSubset_2 = new SectionList()
    dend_17 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_17, dend_10, dend_9, dend_8, dend_7, dend_6, dend_1, dend_0, dend_14, dend_11, dend_5, dend_2, dend_16, dend_15, dend_13, dend_12, dend_4, dend_3]}
    ModelViewParmSubset_3 = new SectionList()
    soma_0 ModelViewParmSubset_3.append()
    dend_17 ModelViewParmSubset_3.append()
    dend_10 ModelViewParmSubset_3.append()
    dend_9 ModelViewParmSubset_3.append()
    dend_8 ModelViewParmSubset_3.append()
    dend_7 ModelViewParmSubset_3.append()
    dend_6 ModelViewParmSubset_3.append()
    dend_1 ModelViewParmSubset_3.append()
    dend_0 ModelViewParmSubset_3.append()
    dend_14 ModelViewParmSubset_3.append()
    dend_11 ModelViewParmSubset_3.append()
    dend_5 ModelViewParmSubset_3.append()
    dend_2 ModelViewParmSubset_3.append()
    dend_16 ModelViewParmSubset_3.append()
    dend_15 ModelViewParmSubset_3.append()
    dend_13 ModelViewParmSubset_3.append()
    dend_12 ModelViewParmSubset_3.append()
    dend_4 ModelViewParmSubset_3.append()
    dend_3 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_4 = new SectionList()
    axon_0 ModelViewParmSubset_4.append()
    axon_1 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_17 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_9 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_8 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_6 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_0 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_5 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_2 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_16 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_13 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_12 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_1 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_10 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_14 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_11 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_7 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_15 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_4 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_3 OneSecGrp_SectionRef_21.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_1, dend_1, dend_1, dend_1, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_14, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, axon_1, axon_1, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    soma_0 all.append()
    soma_0 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_9 all.append()
    dend_9 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_9()
}

proc subsets_9() {
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 3.7868198E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 3.7868198E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert StochKv_deterministic
        gmax_StochKv_deterministic = 8.936579E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert KdShu2007
        gmax_KdShu2007 = 4.2499998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dSTUT_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__dSTUT_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dSTUT_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__dSTUT_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_17 nseg = 3
    dend_9 nseg = 3
    dend_8 nseg = 5
    dend_6 nseg = 7
    dend_0 nseg = 5
    dend_5 nseg = 5
    dend_2 nseg = 3
    dend_16 nseg = 5
    dend_13 nseg = 11
    dend_12 nseg = 7
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate dSTUT214_L5_LBC_6a6d472ca8_0_0


