// Cell: dNAC222_L4_BTC_7345a3c5cd_0_0
/*
{
  "id" : "dNAC222_L4_BTC_7345a3c5cd_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-1.49721, 11.7986, 0.0301706, 2.4623", "-1.37308, 10.661, 0.0290426, 4.20373", "-1.24895, 9.52332, 0.0279145, 5.59272", "-1.12482, 8.38566, 0.0267864, 6.71614", "-1.00068, 7.248, 0.0256584, 7.74544", "-0.87655, 6.11034, 0.0245303, 8.57739", "-0.752417, 4.97268, 0.0234023, 9.13171", "-0.628284, 3.83502, 0.0222742, 9.51195", "-0.504152, 2.69736, 0.0211462, 9.92921", "-0.380019, 1.5597, 0.0200181, 10.275", "-0.255886, 0.422041, 0.01889, 10.4231", "-0.131754, -0.715618, 0.017762, 10.4046", "-0.00762106, -1.85328, 0.0166339, 10.4069", "0.116512, -2.99094, 0.0155059, 10.1383", "0.240644, -4.1286, 0.0143778, 9.53645", "0.364777, -5.26626, 0.0132498, 8.49552", "0.48891, -6.40392, 0.0121217, 7.50349", "0.613042, -7.54158, 0.0109937, 6.64245", "0.737175, -8.67924, 0.0098656, 6.01482", "0.861308, -9.8169, 0.00873754, 4.86867", "0.98544, -10.9546, 0.00760949, 2.96361" ]
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "-1.78536, 12.0975, 1.5043, 2.36", "-1.78536, 12.0975, 1.5043, 2.36", "-1.89806, 12.7968, 1.67506, 2.06", "-2.03022, 13.5295, 1.87609, 2.06", "-2.04522, 13.5985, 1.89582, 2.06", "-2.23623, 14.4011, 2.12637, 2.21", "-2.53189, 15.5206, 2.50164, 2.21", "-2.76269, 16.2574, 2.77718, 2.21", "-2.7763, 16.2954, 2.79389, 2.21", "-3.05308, 17.0138, 3.13517, 2.21", "-3.18118, 17.3326, 3.29264, 2.36", "-3.57623, 18.2542, 3.78326, 2.43", "-3.82914, 18.8091, 4.07037, 2.65", "-4.21757, 19.676, 4.53807, 2.65" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999821452163534
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "0.094648, -10.803, 0.0043065, 4.86", "0.094648, -10.803, 0.0043065, 4.86", "-0.298935, -12.1322, -0.0350676, 4.57", "-0.735261, -13.5805, -0.0870899, 4.2", "-1.51431, -16.1795, -0.187443, 2.87", "-2.14077, -18.3873, -0.295556, 2.58", "-2.82416, -20.8977, -0.430819, 2.5", "-3.30115, -22.7781, -0.516096, 2.58", "-3.3165, -22.8459, -0.518653, 2.58", "-3.47537, -23.7556, -0.543173, 2.73", "-3.71099, -25.9134, -0.570995, 2.73", "-3.7612, -27.3463, -0.534348, 2.36", "-3.72924, -29.122, -0.424884, 2.65", "-3.64859, -30.6841, -0.297982, 2.87", "-3.54477, -32.1999, -0.168168, 3.09", "-3.40933, -33.6053, -0.043154, 3.09", "-3.17666, -35.4544, 0.128669, 3.32", "-3.04715, -36.3644, 0.207813, 3.02", "-2.76952, -38.2366, 0.340653, 2.43", "-2.44158, -40.4252, 0.494544, 2.36", "-2.23942, -41.8565, 0.582607, 2.36", "-2.12571, -42.5739, 0.612367, 2.36" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.49999821452163534
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "0.98544, -10.9546, 0.00760949, 0.593539", "2.61247, -25.8661, 0.00760949, 0.593539", "4.23949, -40.7776, 0.00760949, 0.593539" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_15",
    "id" : "dend_15",
    "points3d" : [ "-4.21757, 19.676, 4.53807, 1.4", "-4.75334, 20.8965, 4.7059, 1.4", "-5.19322, 21.9577, 4.83796, 1.18", "-5.48496, 22.7159, 4.91945, 1.18", "-5.78007, 23.5184, 4.99767, 1.18", "-6.04937, 24.2889, 5.06278, 1.62", "-6.21229, 24.7825, 5.11319, 1.99", "-6.22853, 24.8455, 5.11952, 1.99", "-6.39349, 25.6344, 5.18606, 2.06", "-6.41242, 25.7558, 5.19578, 2.06", "-6.50798, 26.6772, 5.26014, 1.62", "-6.58711, 27.8942, 5.36501, 1.4", "-6.59091, 27.9825, 5.37329, 1.4", "-6.61312, 28.9674, 5.46649, 1.47", "-6.61389, 29.8355, 5.54869, 1.77", "-6.60545, 30.5935, 5.61197, 1.92", "-6.57729, 31.6566, 5.6816, 1.11", "-6.57367, 31.9027, 5.69105, 1.11", "-6.58595, 32.379, 5.71091, 1.11", "-6.59929, 32.5519, 5.71899, 1.11", "-6.73491, 33.6229, 5.77022, 0.96", "-6.86065, 34.3181, 5.77929, 0.96", "-7.01753, 34.9984, 5.76352, 1.55", "-7.17653, 35.617, 5.73528, 2.36", "-7.31864, 36.1831, 5.7008, 2.5", "-7.42743, 36.6285, 5.66863, 2.8", "-7.64983, 37.5749, 5.59125, 2.43", "-7.82309, 38.3739, 5.52048, 1.99", "-8.05534, 39.7931, 5.42847, 1.4", "-8.12487, 40.5332, 5.39879, 1.4", "-8.12952, 40.7166, 5.39908, 1.4", "-8.08866, 41.5987, 5.43259, 1.62", "-8.08242, 41.6559, 5.43815, 1.62", "-7.8955, 42.9477, 5.61769, 1.03", "-7.73394, 43.9357, 5.81394, 1.03", "-7.60409, 44.8005, 6.01745, 1.47", "-7.45393, 45.868, 6.28746, 1.69", "-7.30193, 47.1345, 6.6209, 1.69", "-7.23559, 48.0284, 6.8504, 2.14", "-7.22169, 49.002, 7.08582, 2.8", "-7.25479, 49.8894, 7.29623, 3.24", "-7.30431, 50.463, 7.4156, 3.39", "-7.4248, 51.3194, 7.57018, 2.21", "-7.61649, 52.3894, 7.72489, 1.33", "-7.82814, 53.3547, 7.83359, 1.18", "-7.85392, 53.457, 7.83934, 1.18", "-8.11038, 54.4339, 7.86228, 1.47", "-8.26076, 54.9907, 7.87451, 1.62" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "-4.21757, 19.676, 4.53807, 1.03", "-3.11903, 20.4568, 4.63389, 1.03", "-3.00262, 20.5352, 4.64366, 1.03", "-2.09894, 21.1261, 4.71694, 1.03", "-0.883966, 21.9065, 4.81376, 1.4", "-0.831015, 21.9399, 4.81959, 1.4", "0.627354, 22.865, 5.00369, 1.4", "0.682631, 22.8997, 5.01133, 1.4", "1.50924, 23.4565, 5.13708, 1.55", "1.56655, 23.4979, 5.14683, 1.55", "2.73265, 24.4708, 5.36582, 0.96", "3.31571, 25.0164, 5.48095, 0.96", "3.78801, 25.5523, 5.58311, 1.18", "4.29382, 26.1949, 5.68975, 1.4", "4.37097, 26.3074, 5.70153, 1.4", "4.80237, 26.971, 5.73266, 1.4", "4.8489, 27.0443, 5.73177, 1.4", "5.35714, 27.8055, 5.71338, 1.69", "5.73292, 28.3304, 5.69872, 1.92", "6.26176, 29.0446, 5.69072, 1.4", "6.9455, 29.9797, 5.69632, 1.11", "7.58104, 30.8447, 5.71232, 1.11", "7.63338, 30.9186, 5.71476, 1.11", "8.20418, 31.7495, 5.75458, 1.11", "8.66234, 32.4728, 5.80425, 1.03", "9.1431, 33.3125, 5.88463, 1.03", "9.18203, 33.3947, 5.89186, 1.03", "9.62889, 34.5084, 5.9803, 1.03", "9.64955, 34.5696, 5.98441, 1.03", "9.85599, 35.3946, 6.02521, 0.81", "9.87005, 35.4902, 6.0275, 0.81", "9.90898, 36.2165, 6.04074, 0.59", "9.90651, 36.3552, 6.04266, 0.59", "9.85105, 37.0634, 6.06477, 0.59", "9.83382, 37.3228, 6.07637, 0.59", "9.80644, 37.9409, 6.10967, 0.74", "9.80488, 38.0374, 6.11541, 0.74", "9.84758, 39.1251, 6.18632, 0.74", "9.93101, 39.9473, 6.24124, 1.25", "10.05, 40.5863, 6.28498, 1.69", "10.2746, 41.4889, 6.34413, 1.4", "10.2931, 41.5509, 6.34794, 1.4", "10.5227, 42.304, 6.38844, 2.06", "10.7881, 43.1414, 6.42832, 2.21", "11.0679, 44.0289, 6.46298, 1.77", "11.3757, 45.0339, 6.50323, 1.11", "11.5988, 45.8189, 6.53446, 1.11", "11.7938, 46.5814, 6.56389, 1.4", "12.0206, 47.6177, 6.60237, 0.59", "12.0319, 47.6817, 6.60462, 0.59", "12.1418, 48.6382, 6.65669, 0.44", "12.1769, 49.377, 6.71108, 1.11", "12.1781, 49.9314, 6.76081, 1.33", "12.1763, 50.059, 6.77009, 1.33", "12.1555, 50.4484, 6.78864, 1.33", "12.1012, 51.3515, 6.80275, 0.52", "12.0075, 52.5308, 6.78792, 0.52", "12.0018, 52.6042, 6.78505, 0.52", "11.9457, 53.3465, 6.71491, 0.96", "11.8983, 54.237, 6.56353, 1.55", "11.8766, 54.9505, 6.35997, 1.77", "11.8734, 55.3083, 6.21744, 1.99", "11.8734, 55.3571, 6.19623, 1.99", "11.8816, 56.2612, 5.81414, 1.99", "11.8921, 57.0504, 5.48526, 1.4", "11.9299, 58.4069, 4.91507, 0.44", "11.9568, 59.2272, 4.57635, 0.96", "11.987, 59.856, 4.33375, 1.4", "12.0257, 60.5327, 4.10101, 1.77", "12.0301, 60.5869, 4.08649, 1.77", "12.0821, 61.1031, 4.00095, 1.99", "12.1013, 61.2473, 3.99384, 1.99", "12.1698, 61.7181, 3.99332, 1.99", "12.1867, 61.8471, 3.99341, 1.99", "12.253, 62.462, 3.97686, 1.69", "12.3087, 63.2248, 3.94526, 1.11", "12.3404, 63.9942, 3.90706, 0.44", "12.3503, 64.9272, 3.85762, 0.37", "12.3192, 65.7874, 3.80483, 1.03", "12.2814, 66.4881, 3.78246, 1.03", "12.2371, 67.3434, 3.77738, 0.44", "12.2148, 67.861, 3.78505, 0.88", "12.2058, 68.3344, 3.8003, 1.18", "12.2121, 68.9757, 3.83037, 1.18", "12.3011, 70.4149, 3.91032, 0.37", "12.3865, 71.194, 3.96137, 0.37", "12.5671, 72.3219, 4.02552, 1.33", "12.7155, 73.1166, 4.06694, 2.36", "12.8092, 73.554, 4.08476, 2.95", "12.9351, 74.0404, 4.09176, 3.24", "12.9559, 74.1216, 4.08571, 3.24", "13.0125, 74.3559, 4.06277, 3.24" ],
    "parent" : "dend_9",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "-2.12571, -42.5739, 0.612367, 2.06", "-2.1218, -43.5671, 0.698534, 2.06", "-2.07302, -45.3234, 0.686671, 2.06", "-2.01154, -46.5451, 0.603103, 2.06", "-1.90924, -47.8012, 0.47867, 2.06", "-1.72717, -49.3926, 0.275122, 2.14", "-1.57743, -50.4878, 0.124294, 2.14", "-1.29887, -52.1295, -0.178456, 2.43", "-1.13616, -53.0354, -0.378019, 2.8", "-0.911777, -54.2657, -0.636004, 2.36", "-0.60063, -55.9361, -0.974207, 2.36", "-0.353484, -57.2153, -1.20994, 2.36", "-0.0733549, -58.7481, -1.47766, 2.36", "0.170688, -60.3408, -1.73241, 2.14", "0.346944, -61.7809, -1.9893, 2.14", "0.464775, -63.1964, -2.27407, 2.28", "0.486172, -63.7156, -2.38621, 2.28", "0.477996, -65.0191, -2.69559, 1.69", "0.377592, -66.4283, -2.99681, 1.18", "0.233485, -67.2591, -3.13365, 1.18", "0.0261538, -67.8278, -3.14297, 1.18", "-0.340434, -68.4147, -3.0139, 1.18", "-0.841364, -68.9764, -2.76847, 0.96", "-1.77353, -69.7628, -2.27425, 1.11", "-2.77019, -70.4683, -1.80849, 1.69", "-3.83482, -71.1914, -1.40433, 1.55", "-4.4654, -71.612, -1.26871, 1.92", "-5.05559, -72.0248, -1.24002, 2.21", "-5.8284, -72.6392, -1.3633, 2.06", "-6.77526, -73.4816, -1.69675, 1.99", "-7.48938, -74.1936, -2.03495, 1.77", "-8.29616, -75.0796, -2.42284, 1.92", "-9.01574, -75.9467, -2.72274, 1.84", "-9.72944, -76.8765, -2.8978, 1.69", "-10.2018, -77.562, -2.90716, 1.11", "-10.7373, -78.4867, -2.80291, 0.96", "-11.2875, -79.627, -2.58322, 1.25", "-11.5618, -80.3235, -2.43793, 0.81", "-12.0246, -81.8708, -2.26156, 0.74", "-12.2128, -82.7388, -2.2644, 0.37", "-12.3762, -84.1058, -2.44779, 1.47", "-12.3896, -84.7635, -2.62133, 2.14", "-12.319, -86.0081, -3.12532, 2.5", "-12.1152, -87.5825, -3.96672, 1.03", "-11.9703, -88.3947, -4.48896, 0.88", "-11.8267, -89.017, -4.90595, 0.44", "-11.5212, -90.0699, -5.6355, 0.44", "-11.1099, -91.2822, -6.47073, 1.18", "-10.6162, -92.6591, -7.35351, 1.62", "-10.585, -92.7474, -7.40564, 1.62", "-10.2628, -93.6955, -7.91133, 1.62", "-9.84452, -95.1505, -8.59044, 1.47", "-9.63007, -96.1093, -8.94862, 1.99", "-9.5266, -96.8907, -9.17352, 1.99", "-9.49243, -97.6025, -9.33799, 1.99", "-9.52048, -98.966, -9.63245, 0.59", "-9.63342, -99.9514, -9.82898, 0.52", "-9.79066, -100.676, -9.91931, 0.52", "-10.297, -102.351, -10.0747, 2.8", "-10.5265, -103.025, -10.1259, 3.17", "-10.7825, -103.69, -10.1197, 3.46", "-11.0373, -104.32, -10.0119, 3.46", "-11.6505, -105.85, -9.64951, 1.69", "-12.0068, -106.775, -9.34646, 1.11", "-12.2152, -107.34, -9.08086, 1.25", "-12.7576, -108.856, -8.25248, 1.99", "-13.2606, -110.366, -7.28172, 1.47" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "-2.12571, -42.5739, 0.612367, 0.96", "-1.17331, -43.8038, -1.33405, 0.96", "-0.350556, -44.7791, -2.92078, 0.81", "0.968156, -46.1104, -5.13336, 0.59", "1.3363, -46.4212, -5.67677, 0.88", "1.70894, -46.6851, -6.16548, 1.11", "1.77154, -46.7217, -6.24041, 1.11", "2.66379, -47.0019, -7.18767, 1.25", "3.4104, -47.1548, -8.09421, 0.88", "4.21243, -47.2811, -9.19387, 0.52", "4.58505, -47.3703, -9.91976, 0.81", "5.04633, -47.5571, -11.1263, 0.96", "5.61464, -47.9641, -13.2235, 0.52", "5.85987, -48.7328, -16.249, 0.52", "5.85124, -48.7613, -16.3322, 0.52", "5.26818, -49.7169, -18.3311, 0.96", "5.0161, -50.0838, -18.9154, 1.11", "4.67486, -50.5513, -19.4895, 1.11", "3.64643, -52.0901, -20.8973, 0.66", "3.23043, -52.86, -21.4911, 0.37", "2.80692, -54.0149, -22.4176, 0.37", "2.67771, -54.8317, -23.1212, 0.59", "2.67726, -54.9, -23.1856, 0.59", "2.88612, -55.9918, -24.3219, 1.03", "3.213, -56.9497, -25.4084, 1.69", "3.60088, -58.01, -26.6533, 2.21", "3.92794, -58.957, -27.7524, 2.8", "4.04338, -59.3823, -28.2309, 2.8", "4.45759, -61.4581, -30.4236, 1.33", "4.64008, -62.9336, -31.8279, 0.52", "4.68033, -63.7037, -32.466, 0.66", "4.68901, -64.312, -32.8882, 0.66", "4.70912, -65.2134, -33.4296, 0.29", "4.7352, -66.0107, -33.8516, 0.37", "4.80881, -66.925, -34.1523, 0.37", "4.84629, -67.0348, -34.1937, 0.37", "5.36579, -67.8527, -34.724, 0.66", "5.86657, -68.5224, -35.2662, 0.96", "5.90909, -68.5743, -35.3117, 0.96", "6.39109, -69.1676, -35.8396, 0.96", "7.33103, -70.3915, -36.9932, 0.52", "8.14895, -71.5234, -38.0357, 0.37", "9.10572, -72.9113, -39.3233, 1.77", "9.47535, -73.476, -39.833, 2.36", "9.87547, -74.1069, -40.3957, 2.58", "11.0795, -76.1082, -42.1432, 0.74", "11.4651, -76.8133, -42.6737, 0.74" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "4.23949, -40.7776, 0.00760949, 0.260132", "5.86652, -55.6891, 0.00760949, 0.260132", "7.49354, -70.6006, 0.00760949, 0.260132" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_17",
    "id" : "dend_17",
    "points3d" : [ "-8.26076, 54.9907, 7.87451, 0.81", "-8.8618, 55.8786, 7.83333, 0.81", "-9.62589, 57.0717, 7.76212, 0.74", "-10.2784, 58.135, 7.70106, 0.74", "-10.3266, 58.2148, 7.69327, 0.74", "-11.2112, 59.7035, 7.52742, 0.74", "-11.6378, 60.4125, 7.42671, 1.33", "-12.0604, 61.1273, 7.28785, 1.92", "-12.5176, 61.9022, 7.10646, 1.33", "-13.1778, 62.9635, 6.85078, 1.11", "-13.6782, 63.7202, 6.66512, 1.47", "-14.3603, 64.6791, 6.44091, 1.18", "-14.3999, 64.7327, 6.42855, 1.18", "-15.0165, 65.569, 6.23888, 0.66", "-15.5713, 66.3691, 6.05467, 0.66", "-16.2509, 67.4456, 5.82915, 1.47", "-16.6539, 68.1858, 5.70717, 1.99", "-17.117, 69.1626, 5.58917, 1.99", "-17.8507, 70.9176, 5.4227, 0.66", "-18.2197, 71.9619, 5.34885, 0.52", "-18.4384, 72.7082, 5.31796, 0.59", "-18.8314, 74.2016, 5.36168, 0.74", "-18.8562, 74.2979, 5.36883, 0.74", "-19.1103, 75.1782, 5.48193, 1.33", "-19.3339, 75.8779, 5.60419, 1.62", "-19.7177, 76.8764, 5.792, 1.18", "-20.2434, 78.0094, 5.9558, 0.66", "-20.6933, 78.8726, 6.0449, 0.66", "-21.5614, 80.4165, 6.18554, 2.28", "-22.0441, 81.1909, 6.25132, 2.73", "-22.4776, 81.8435, 6.29842, 2.95", "-23.6246, 83.5039, 6.38646, 1.03", "-23.6723, 83.5709, 6.38874, 1.03", "-24.1465, 84.2404, 6.4173, 0.81", "-24.6968, 85.0184, 6.46309, 0.44", "-25.2558, 85.8368, 6.52533, 0.44", "-25.8976, 86.8064, 6.61845, 0.44", "-26.5174, 87.7355, 6.73489, 1.11", "-26.9783, 88.4219, 6.82086, 1.69", "-27.5931, 89.3485, 6.93407, 2.21", "-27.962, 89.9038, 7.00126, 2.5", "-28.8935, 91.241, 7.17159, 1.25", "-29.7339, 92.4173, 7.32396, 0.44", "-30.4201, 93.3654, 7.44597, 0.44", "-30.9642, 94.106, 7.54324, 1.03", "-31.5578, 94.9303, 7.64859, 1.33", "-31.7053, 95.14, 7.67453, 1.33", "-32.0438, 95.6357, 7.73336, 1.47", "-32.653, 96.5196, 7.83965, 0.88", "-33.1881, 97.2617, 7.93465, 0.59", "-33.75, 97.9932, 8.0367, 0.44", "-33.8172, 98.0745, 8.04922, 0.44", "-34.6573, 98.9937, 8.21017, 0.44", "-35.1082, 99.4126, 8.30015, 0.66", "-35.3088, 99.578, 8.34118, 0.66", "-35.9233, 100.073, 8.46745, 0.66", "-36.5262, 100.622, 8.60366, 0.66", "-37.0789, 101.247, 8.73775, 0.37", "-37.4521, 101.802, 8.82183, 0.37", "-37.9725, 102.769, 8.91987, 0.66", "-38.2752, 103.509, 8.94579, 0.96", "-38.5958, 104.595, 8.92642, 0.29", "-38.789, 105.443, 8.88785, 0.44", "-38.9574, 106.344, 8.83004, 0.96", "-38.9834, 106.49, 8.81925, 0.96", "-39.2472, 107.83, 8.71108, 1.77", "-39.5608, 109.117, 8.61462, 2.95", "-39.7532, 109.746, 8.44314, 3.54", "-39.7771, 109.82, 8.41441, 3.54", "-40.0275, 110.623, 8.04748, 3.76", "-40.0484, 110.692, 8.012, 3.76", "-40.3353, 111.662, 7.45341, 3.46", "-41.2498, 114.996, 5.42686, 0.81", "-41.2693, 115.075, 5.38157, 0.81", "-41.4294, 115.763, 5.03756, 0.81", "-41.4454, 115.839, 5.00926, 0.81", "-41.6042, 116.801, 4.81514, 1.11", "-41.6925, 117.524, 4.78187, 1.25", "-41.8169, 118.877, 4.9344, 0.37", "-41.9151, 119.967, 5.0685, 0.29", "-42.0888, 121.601, 5.22325, 0.29", "-42.3013, 123.385, 5.35023, 0.29", "-42.3143, 123.479, 5.35465, 0.29", "-42.4985, 124.655, 5.40186, 0.29", "-42.5204, 124.791, 5.40313, 0.29", "-42.7524, 126.196, 5.29632, 0.44", "-42.7835, 126.315, 5.26039, 0.44", "-43.0455, 126.858, 4.9917, 0.44", "-48.4161, 136.874, 4.89045, 0.44", "-53.9407, 146.796, 5.06402, 0.44", "-59.3211, 156.779, 4.3331, 0.44", "-63.3881, 167.061, 1.5941, 0.44", "-68.0453, 176.453, -2.68823, 0.44", "-71.4205, 185.137, -9.03032, 0.44", "-75.3672, 192.213, -16.7126, 0.44", "-77.0004, 201.239, -23.2961, 0.44", "-78.3047, 210.66, -29.4327, 0.44", "-79.2683, 219.097, -36.807, 0.44", "-78.3386, 228.588, -42.8989, 0.44" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 11
  }, {
    "name" : "dend_16",
    "id" : "dend_16",
    "points3d" : [ "-8.26076, 54.9907, 7.87451, 0.29", "-8.07449, 56.3985, 7.53947, 0.29", "-8.01837, 56.9705, 7.43878, 0.44", "-7.99412, 57.5272, 7.37259, 0.44", "-7.99881, 58.3455, 7.31323, 0.29", "-8.00103, 58.3927, 7.31128, 0.29", "-8.0554, 59.101, 7.29591, 0.29", "-8.07082, 59.2153, 7.30667, 0.29", "-8.17728, 59.8012, 7.33043, 0.29", "-8.27824, 60.2874, 7.32236, 0.96", "-8.3711, 60.7153, 7.27768, 1.33", "-8.42224, 60.9719, 7.23835, 1.33", "-8.60034, 62.0774, 7.01098, 0.52", "-8.70291, 62.9427, 6.79766, 0.29", "-8.70848, 63.0357, 6.77076, 0.29", "-8.72389, 63.736, 6.55389, 0.81", "-8.72379, 63.7858, 6.53849, 0.81", "-8.72119, 64.2725, 6.39996, 1.03", "-8.72773, 64.6919, 6.30338, 0.74", "-8.73333, 65.3595, 6.18946, 0.29", "-8.74275, 65.7889, 6.13416, 0.44", "-8.76189, 66.1213, 6.11334, 0.44", "-8.80162, 66.5619, 6.09429, 0.29", "-8.87588, 66.9705, 6.09052, 0.74", "-9.54739, 74.4112, 6.21173, 0.74" ],
    "parent" : "dend_15",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "13.0125, 74.3559, 4.06277, 0.37", "13.3481, 76.215, 3.40712, 0.37", "13.5015, 76.8453, 3.10335, 0.37", "13.6323, 77.3457, 2.84736, 0.96", "13.6511, 77.4059, 2.8184, 0.96", "13.9519, 78.3172, 2.3931, 0.96", "14.4875, 80.0112, 1.6423, 0.37", "14.7752, 81.0835, 1.16617, 0.59", "14.9981, 81.9766, 0.732602, 0.37", "15.2634, 83.1891, 0.129369, 0.37", "15.2809, 83.2895, 0.0804382, 0.37", "15.3544, 83.9954, -0.292618, 0.29", "15.407, 85.3609, -1.01982, 1.47", "15.4019, 86.4767, -1.61931, 1.92", "15.3909, 86.8922, -1.85141, 2.21", "15.3799, 87.3123, -2.10146, 2.21", "15.3913, 89.576, -3.45722, 0.37", "15.4332, 90.7718, -4.16758, 0.96", "15.4659, 91.3833, -4.51561, 1.62", "15.5086, 92.043, -4.88618, 1.84", "15.6415, 93.8095, -5.89198, 0.29", "15.7303, 94.8682, -6.48462, 1.03", "15.7629, 95.2656, -6.67789, 1.4", "15.7777, 95.5022, -6.79743, 1.4" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "13.0125, 74.3559, 4.06277, 0.37", "14.7222, 77.1258, 4.79522, 0.37", "15.6132, 78.5942, 5.00118, 0.37", "16.4361, 80.0357, 5.0238, 0.81", "16.4838, 80.1163, 5.01922, 0.81", "16.9426, 80.8786, 4.95125, 0.81", "17.7048, 82.1652, 4.74381, 0.37", "18.445, 83.3647, 4.28384, 0.29", "19.0775, 84.3801, 3.8239, 0.59", "19.6828, 85.3544, 3.33691, 0.22", "19.7173, 85.416, 3.30679, 0.22", "20.3188, 86.7205, 2.70408, 1.18", "20.4948, 87.2223, 2.5285, 1.69", "20.7086, 88.1603, 2.33188, 1.99", "20.773, 88.7253, 2.3072, 1.99", "20.7051, 90.0019, 2.43863, 0.44", "20.5799, 90.8314, 2.66456, 0.29", "19.9063, 92.9013, 3.86188, 0.29", "19.872, 92.9675, 3.91121, 0.29", "26.0702, 104.226, 4.96302, 0.29", "31.4178, 115.688, 7.58874, 0.29", "37.0368, 126.85, 10.7673, 0.29", "41.9576, 137.819, 15.4002, 0.29", "48.4444, 147.508, 20.6536, 0.29", "54.3473, 156.12, 27.9213, 0.29", "60.8127, 164.609, 34.8296, 0.29" ],
    "parent" : "dend_10",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "-13.2606, -110.366, -7.28172, 0.52", "-13.7282, -112.962, -6.38416, 0.52", "-13.7982, -113.983, -6.10594, 0.81", "-13.774, -114.885, -5.95904, 1.03", "-13.7661, -114.998, -5.95243, 1.03", "-13.7079, -116.002, -5.96296, 1.03", "-13.6814, -117.116, -6.02445, 0.52", "-13.6714, -118.102, -6.19371, 0.52", "-13.7843, -119.281, -6.40962, 0.52", "-13.982, -120.249, -6.59608, 0.66", "-14.3077, -121.248, -6.73104, 0.66", "-14.6439, -121.986, -6.79912, 0.88", "-15.6123, -123.642, -6.76975, 1.03", "-16.3404, -124.687, -6.63058, 1.55", "-16.6771, -125.145, -6.52638, 1.92", "-17.8783, -126.743, -6.06122, 1.92", "-18.6863, -127.849, -5.69835, 1.33", "-20.0183, -129.736, -5.05973, 0.59", "-20.9546, -131.112, -4.60423, 0.59", "-21.8294, -132.5, -4.2368, 0.59", "-21.8701, -132.569, -4.22366, 0.59", "-22.3983, -133.593, -4.15283, 1.33", "-22.9138, -134.839, -4.22849, 0.74", "-23.2263, -135.917, -4.42545, 0.74", "-23.6263, -137.719, -4.80812, 0.74", "-23.6533, -137.852, -4.8375, 0.74", "-23.9219, -139.148, -5.09392, 1.18", "-24.3703, -141.138, -5.45115, 0.81", "-24.8962, -143.247, -5.71814, 0.74", "-25.5616, -145.611, -5.89493, 0.59", "-25.5918, -145.707, -5.89414, 0.59", "-26.1356, -147.264, -5.81801, 1.92", "-26.6601, -148.687, -5.64482, 2.21", "-27.2859, -150.374, -5.33922, 2.21", "-27.9124, -152.126, -4.96228, 0.74", "-28.5382, -154.182, -4.45221, 0.74", "-28.88, -155.744, -4.03143, 0.66", "-29.0274, -157.589, -3.49529, 0.44", "-28.9186, -158.806, -3.11437, 1.03", "-28.8729, -158.953, -3.07059, 1.03", "-28.4883, -159.68, -2.88791, 1.03", "-27.8395, -160.691, -2.71554, 1.03", "-27.2259, -161.682, -2.59685, 1.4", "-26.9271, -162.307, -2.57131, 1.4", "-26.4741, -163.855, -2.53943, 0.81", "-26.2561, -165.503, -2.45572, 0.81", "-26.2819, -166.677, -2.37624, 1.03", "-26.4414, -167.736, -2.29276, 1.11", "-26.7504, -168.991, -2.17217, 1.18", "-27.2338, -170.53, -2.01036, 0.37", "-27.902, -172.403, -1.88641, 0.37", "-28.273, -173.591, -1.90511, 1.55", "-28.472, -174.566, -2.00734, 1.84", "-28.5511, -175.438, -2.16251, 2.14", "-28.5284, -176.104, -2.3343, 2.14", "-28.118, -177.936, -2.99793, 1.69", "-27.181, -179.993, -3.89118, 0.52", "-26.6974, -180.734, -4.22579, 0.88", "-26.6371, -180.804, -4.25892, 0.88", "-26.389, -181.036, -4.37965, 0.88", "-25.0215, -182.142, -4.94538, 0.52", "-23.7594, -183.11, -5.43823, 1.03", "-23.6877, -183.169, -5.46798, 1.03", "-22.5619, -184.238, -5.98561, 1.33", "-21.424, -185.476, -6.53754, 1.25", "-21.0146, -186.011, -6.7543, 1.03", "-19.9089, -188.012, -7.40086, 0.59", "-19.3652, -189.368, -7.74961, 0.59", "-19.081, -190.342, -7.93933, 1.18", "-19.007, -190.746, -7.9898, 1.84", "-18.9207, -191.63, -8.05448, 1.84", "-18.8539, -193.591, -8.15833, 0.74", "-18.7494, -194.989, -8.36784, 1.03", "-18.5705, -196.06, -8.65864, 1.11", "-18.4306, -196.613, -8.86127, 1.33", "-18.0471, -197.691, -9.40777, 0.81", "-17.713, -198.391, -9.86657, 0.44", "-15.8147, -201.693, -12.6327, 0.44", "-15.446, -202.287, -13.2219, 0.44", "-15.3722, -202.411, -13.3841, 0.44", "-14.9085, -203.419, -14.905, 0.44", "-14.8995, -203.46, -14.9725, 0.44", "-14.9165, -204.008, -15.8038, 0.74", "-15.0949, -204.573, -16.5777, 1.11", "-15.3636, -206.324, -18.9959, 0.44", "-15.3557, -206.973, -19.8753, 0.44", "-15.1663, -208.355, -21.6056, 1.84", "-15.0171, -208.943, -22.3093, 2.5", "-14.9635, -209.107, -22.4969, 2.5", "-14.1594, -211.504, -24.9778, 0.59", "-13.9054, -212.344, -25.7922, 0.59", "-13.6722, -213.079, -26.6089, 0.59", "-13.6534, -213.141, -26.6818, 0.59", "-13.3356, -214.45, -28.1705, 1.77", "-13.2115, -215.272, -29.0507, 2.06", "-13.1821, -216.92, -30.6906, 1.99", "-13.2229, -219.112, -32.846, 0.81", "-13.2227, -219.18, -32.9159, 0.81", "-13.2003, -219.968, -33.6763, 0.66", "-13.1002, -221.056, -34.6542, 0.52", "-13.0173, -221.858, -35.3448, 1.84", "-12.9311, -222.911, -36.128, 2.28", "-12.6696, -225.497, -37.9497, 0.66", "-12.4943, -226.394, -38.5673, 0.66", "-12.0616, -227.925, -39.5734, 1.77", "-12.0283, -228.017, -39.6271, 1.77", "-11.6461, -228.949, -40.0994, 2.21", "-11.0908, -230.266, -40.6173, 2.21", "-10.3823, -232.031, -41.1499, 0.74", "-10.0792, -232.877, -41.3919, 0.37", "-9.85937, -233.547, -41.5662, 0.29", "-9.48733, -234.691, -41.8493, 1.11", "-9.21513, -235.537, -42.064, 1.4", "-8.7975, -236.949, -42.3846, 0.59", "-8.50265, -237.965, -42.6103, 0.29", "-8.18809, -239.066, -42.862, 0.66", "-7.99546, -239.746, -43.0409, 0.88", "-7.61707, -241.222, -43.451, 0.29", "-7.40328, -242.151, -43.7107, 0.29", "-7.26085, -242.875, -43.9038, 0.96", "-7.13109, -243.645, -44.1054, 0.96", "-6.8092, -245.328, -44.5445, 0.29", "-6.58091, -246.16, -44.7818, 0.29", "-6.19328, -247.014, -45.103, 0.66", "-6.14357, -247.087, -45.1693, 0.66", "-5.8162, -247.531, -45.6669, 0.66", "-5.05355, -248.544, -47.0512, 0.44", "-4.47359, -249.356, -48.2524, 1.77", "-3.6514, -250.546, -50.1193, 2.58", "-1.31387, -254.125, -55.8923, 0.44", "-1.08388, -254.51, -56.5079, 0.44", "-0.127656, -256.214, -59.3531, 0.88", "0.273921, -257.027, -60.7645, 1.77", "0.29314, -257.073, -60.847, 1.77", "0.373274, -257.374, -61.3382, 2.14", "0.41697, -257.972, -62.0086, 2.43" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 9
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "-13.2606, -110.366, -7.28172, 0.59", "-12.2965, -111.301, -5.88683, 0.59", "-11.0013, -112.231, -4.31781, 0.52", "-10.1316, -112.694, -3.47973, 0.52", "-8.78015, -113.097, -2.4997, 0.37", "-8.51712, -113.145, -2.34137, 0.37", "-7.35705, -113.279, -1.70878, 0.37", "-6.33429, -113.272, -1.27571, 0.37", "-4.98264, -113.106, -0.830633, 0.37", "-2.8551, -112.722, -0.241672, 0.22", "-2.22488, -112.607, -0.118162, 0.29", "-1.01855, -112.382, 0.0921306, 0.37" ],
    "parent" : "dend_4",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "11.4651, -76.8133, -42.6737, 0.37", "11.6668, -77.422, -42.8697, 0.37", "11.9209, -78.2531, -43.0728, 0.29", "12.1611, -79.1176, -43.252, 1.25", "12.2682, -79.5212, -43.3263, 1.69", "12.2827, -79.578, -43.3359, 1.69", "12.5514, -80.6917, -43.5019, 0.29", "12.7329, -81.504, -43.5833, 0.29", "12.9238, -82.3885, -43.6599, 1.77", "13.0181, -82.8659, -43.6894, 2.43", "13.085, -83.2139, -43.7118, 2.43", "13.3474, -84.6289, -43.8066, 0.22", "13.4658, -85.3368, -43.8586, 0.22" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "11.4651, -76.8133, -42.6737, 1.77", "11.0809, -78.281, -46.8004, 1.77", "10.7412, -79.9506, -51.0938, 1.03", "10.2426, -82.9061, -57.948, 2.14", "10.0207, -84.1685, -60.7087, 0.52", "9.92715, -84.6901, -61.8125, 1.92", "9.86813, -85.013, -62.4735, 2.36", "9.42843, -87.95, -67.7439, 0.29", "9.29075, -88.7045, -68.9818, 0.29", "8.88619, -90.4376, -71.4406, 0.29", "8.87276, -90.48, -71.5032, 0.29", "8.76365, -90.7748, -71.9501, 1.69", "8.62079, -91.1664, -72.5362, 1.69", "7.79325, -93.8847, -76.6566, 0.22", "7.70172, -94.2758, -77.2793, 0.22", "7.69778, -94.316, -77.3445, 0.22", "7.68704, -94.8006, -78.1343, 1.03", "7.80107, -96.6567, -81.1109, 0.29", "8.09515, -98.5666, -84.0055, 1.99", "8.17726, -98.8918, -84.4628, 2.14", "8.82852, -101.159, -87.6947, 0.37", "8.95054, -101.537, -88.2365, 0.37", "9.14415, -102.048, -88.945, 0.88", "9.41684, -102.643, -89.6732, 1.03", "10.1493, -104.197, -91.3119, 0.29", "10.1813, -104.269, -91.3829, 0.29", "10.9039, -106.122, -93.1033, 0.29", "11.2006, -107.008, -93.9799, 1.99", "11.2893, -107.297, -94.271, 1.99", "11.9032, -109.47, -96.4033, 0.29", "12.0269, -110.014, -96.9033, 0.59", "12.459, -112.138, -98.7825, 0.44", "12.685, -113.395, -99.8643, 0.29", "12.7703, -113.916, -100.316, 1.11", "12.8496, -114.35, -100.685, 1.33", "13.4847, -117.349, -103.409, 0.22", "13.6208, -117.886, -103.95, 0.52", "14.0865, -119.409, -105.654, 0.29", "14.2327, -119.823, -106.157, 0.88", "14.404, -120.324, -106.897, 0.88", "15.0532, -122.231, -110.024, 0.29", "15.5703, -123.68, -112.595, 0.29", "15.9666, -124.874, -114.783, 1.77", "16.0638, -125.183, -115.367, 1.77", "16.7692, -127.637, -120.052, 0.52", "16.8755, -128.089, -120.889, 0.44", "16.9706, -128.515, -121.626, 0.74", "16.9801, -128.555, -121.69, 0.74", "17.371, -129.978, -123.794, 0.29", "17.3906, -130.032, -123.867, 0.29", "17.8984, -130.95, -124.798, 1.18", "18.1081, -131.289, -125.125, 1.18", "19.0593, -132.741, -126.424, 0.22", "19.0963, -132.794, -126.465, 0.22", "19.9764, -133.948, -127.282, 0.81", "21.0468, -135.212, -128.205, 0.22", "21.5119, -135.698, -128.565, 0.81", "21.5711, -135.75, -128.614, 0.81", "21.8743, -135.958, -128.897, 0.81", "23.1347, -136.607, -130.524, 0.22", "23.4586, -136.738, -131.006, 0.44", "23.5066, -136.755, -131.082, 0.44", "24.9421, -137.255, -133.376, 1.33", "26.229, -137.725, -135.423, 1.33", "28.7507, -138.655, -139.453, 0.29", "28.8122, -138.68, -139.552, 0.29", "29.221, -138.858, -140.225, 0.29", "29.7729, -139.124, -141.064, 1.03", "29.9409, -139.21, -141.291, 1.03", "29.9986, -139.241, -141.356, 1.03", "32.0777, -140.308, -143.299, 0.22", "32.1415, -140.338, -143.359, 0.22", "33.6943, -140.941, -144.851, 0.29", "35.5235, -141.347, -146.721, 0.22", "35.9095, -141.392, -147.137, 0.66", "35.9715, -141.392, -147.204, 0.66", "36.352, -141.356, -147.628, 0.66", "37.4815, -141.186, -148.949, 0.15", "39.6576, -140.621, -151.721, 0.96", "40.8694, -140.229, -153.307, 1.4", "41.3295, -140.074, -153.938, 1.4", "41.5515, -139.998, -154.251, 1.4" ],
    "parent" : "dend_1",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_19",
    "id" : "dend_19",
    "points3d" : [ "-78.3386, 228.588, -42.8989, 0.44", "-82.9895, 238.882, -45.57, 0.44" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_18",
    "id" : "dend_18",
    "points3d" : [ "-78.3386, 228.588, -42.8989, 0.44", "-81.1602, 236.497, -45.3649, 0.44" ],
    "parent" : "dend_17",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_14",
    "id" : "dend_14",
    "points3d" : [ "15.7777, 95.5022, -6.79743, 0.29", "16.3133, 96.9941, -7.00668, 0.29", "16.554, 97.6645, -7.1007, 0.29", "16.7556, 98.2259, -7.17944, 1.03", "16.7715, 98.2703, -7.18566, 1.03", "16.8877, 98.5939, -7.23104, 1.4" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_13",
    "id" : "dend_13",
    "points3d" : [ "15.7777, 95.5022, -6.79743, 0.88", "15.8334, 96.4899, -6.95432, 0.88", "15.9536, 97.2386, -7.104, 0.29", "16.1907, 98.0931, -7.37374, 0.29", "16.3721, 98.6142, -7.55462, 0.44", "16.8845, 99.9526, -8.02764, 1.25", "17.1023, 100.49, -8.2155, 1.99", "17.4759, 101.246, -8.49747, 2.21", "18.3842, 102.882, -9.13414, 0.22", "18.7633, 103.565, -9.42755, 0.22", "18.9552, 103.903, -9.57332, 0.96", "19.1585, 104.283, -9.73246, 1.77", "19.3754, 104.76, -9.92579, 2.21", "19.5508, 105.25, -10.134, 2.21", "20.0871, 107.124, -10.9335, 0.22", "20.2873, 107.917, -11.289, 0.22", "20.5145, 108.845, -11.6972, 1.18", "20.5962, 109.2, -11.8491, 1.33", "20.8147, 110.257, -12.2593, 0.81", "20.984, 111.079, -12.5413, 0.22", "21.1037, 111.607, -12.678, 0.29", "21.3215, 112.533, -12.8949, 0.22", "21.358, 112.651, -12.9257, 0.22", "21.6987, 113.549, -13.2229, 0.22", "22.0993, 114.479, -13.5645, 1.33", "22.2798, 114.891, -13.7701, 1.69", "22.3696, 115.121, -13.8954, 1.69", "22.8681, 116.423, -14.641, 0.29", "23.1739, 117.158, -15.0563, 1.47", "23.2959, 117.423, -15.2049, 1.47", "23.682, 118.211, -15.6431, 0.66", "24.1969, 119.224, -16.1759, 0.29", "24.4463, 119.728, -16.4183, 0.29", "24.7583, 120.371, -16.6697, 0.88", "24.9435, 120.739, -16.8204, 1.25", "25.4218, 121.691, -17.2412, 0.29", "25.6986, 122.264, -17.5005, 0.22", "25.9, 122.783, -17.7719, 0.66", "26.0123, 123.225, -18.0019, 0.81", "26.1238, 124.051, -18.3875, 0.22", "26.1662, 124.564, -18.5981, 0.22", "26.1772, 125.048, -18.8004, 0.74", "26.1507, 125.802, -19.1994, 1.4", "26.0811, 126.867, -19.8214, 0.29", "26.0059, 127.606, -20.3295, 0.81", "25.9755, 127.841, -20.5282, 0.96", "25.7891, 128.902, -21.7195, 0.29", "25.5997, 129.72, -22.77, 0.29", "25.5145, 130.019, -23.1755, 1.33", "25.2699, 130.7, -24.1661, 2.28", "24.9379, 131.506, -25.4032, 2.28", "24.2202, 132.947, -27.8227, 0.81", "24.1168, 133.121, -28.1288, 0.88", "23.8755, 133.467, -28.7585, 0.29", "23.5021, 133.921, -29.6204, 0.37", "23.3437, 134.1, -29.941, 0.37", "22.6951, 134.87, -31.1416, 0.37", "22.4471, 135.217, -31.6039, 0.37", "21.9268, 136.152, -32.7139, 1.55", "21.7386, 136.607, -33.1808, 1.92", "21.3916, 138.06, -34.3179, 0.44", "21.3229, 138.743, -34.7244, 0.29", "21.3298, 139.513, -35.0537, 0.88", "21.3733, 139.924, -35.2023, 0.96", "21.459, 140.363, -35.3243, 0.96", "21.8327, 141.799, -35.6557, 0.37", "22.2039, 142.99, -35.8744, 0.29", "22.4376, 143.691, -36.1194, 0.29", "22.7856, 144.737, -36.603, 1.33", "22.9367, 145.2, -36.8773, 2.14", "23.0441, 145.548, -37.12, 2.36", "23.1146, 145.807, -37.3487, 2.36", "23.6683, 148.06, -39.6872, 0.29", "23.7733, 148.564, -40.2645, 0.88", "23.8522, 149.145, -40.9386, 1.4", "23.8753, 149.479, -41.3183, 1.55", "23.9025, 150.632, -42.5678, 0.37", "23.8992, 151.052, -42.9764, 0.37", "23.8515, 151.975, -43.7312, 1.18", "23.8215, 152.612, -44.2603, 1.47", "23.7484, 153.992, -45.3096, 0.29", "23.7196, 154.371, -45.5632, 0.44", "23.6646, 154.949, -45.878, 0.29", "23.5167, 156.243, -46.5118, 1.77", "23.4387, 156.955, -46.805, 2.06", "23.3777, 157.63, -47.0255, 1.92", "23.2424, 159.112, -47.3147, 0.22", "23.1868, 159.81, -47.4018, 0.22", "23.1818, 159.884, -47.403, 0.22", "23.1796, 160.463, -47.3075, 0.22", "23.2177, 161.377, -47.0778, 0.96", "23.2505, 161.657, -46.9964, 1.33", "23.2982, 161.942, -46.9078, 1.33", "23.4446, 162.772, -46.6625, 0.44", "23.7426, 164.312, -46.2553, 0.22", "23.7575, 164.383, -46.2382, 0.22", "24.0385, 165.519, -45.9165, 0.22", "24.2001, 166.129, -45.7134, 1.03", "24.3062, 166.494, -45.5798, 1.62", "24.4948, 167.069, -45.3489, 1.62", "24.5415, 167.211, -45.2916, 1.62", "25.18, 169.114, -44.5112, 0.22", "25.3233, 169.55, -44.3248, 0.66", "25.473, 170.048, -44.1179, 0.66", "25.5665, 170.46, -43.9692, 0.59", "25.6754, 171.223, -43.754, 0.22", "25.7015, 171.57, -43.6895, 0.66", "25.6893, 171.956, -43.6593, 0.88", "25.645, 172.607, -43.6105, 0.44", "25.5315, 173.66, -43.537, 0.22", "25.4378, 174.421, -43.4876, 0.81", "25.3745, 174.922, -43.4544, 1.18", "25.1964, 176.348, -43.3605, 0.22", "25.1892, 176.413, -43.3628, 0.22", "25.0658, 177.514, -43.4844, 0.22", "25.0082, 178.204, -43.6012, 1.03", "24.987, 178.648, -43.694, 1.33", "24.9827, 179.095, -43.8029, 1.33", "25.125, 181.564, -44.477, 0.22", "25.1298, 181.626, -44.4954, 0.22", "25.2912, 183.01, -44.9592, 0.22", "25.3593, 183.487, -45.1299, 0.59", "25.3702, 183.547, -45.1515, 0.59", "25.5686, 184.375, -45.4109, 0.74" ],
    "parent" : "dend_12",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "0.41697, -257.972, -62.0086, 0.37", "1.80566, -259.244, -61.8233, 0.37", "2.68208, -260.075, -61.7085, 0.29", "3.74914, -261.141, -61.5639, 0.29", "4.49882, -261.944, -61.4576, 0.88", "4.74466, -262.226, -61.4334, 1.11", "4.79754, -262.291, -61.4297, 1.11", "5.05083, -262.685, -61.4319, 1.11", "5.52454, -263.602, -61.5347, 0.29", "5.81376, -264.282, -61.6674, 0.29", "6.11996, -265.09, -61.8465, 0.74", "6.24762, -265.427, -61.9396, 0.88", "6.45243, -265.969, -62.1052, 0.59", "6.89072, -267.129, -62.4848, 0.29", "6.94532, -267.26, -62.5307, 0.29", "7.27169, -267.957, -62.7508, 0.29", "7.66005, -268.728, -62.9444, 1.11", "7.9135, -269.168, -63.0902, 1.4", "8.18246, -269.611, -63.2355, 1.4", "9.06711, -270.991, -63.6514, 0.22", "9.57989, -271.783, -63.905, 0.22", "9.93986, -272.332, -64.0977, 0.81", "10.999, -273.904, -64.6481, 0.81" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "0.41697, -257.972, -62.0086, 0.96", "1.87533, -259.317, -66.3013, 0.96", "4.04865, -261.405, -72.2106, 0.96", "5.14281, -262.483, -75.0589, 0.66", "5.87044, -263.237, -76.8645, 1.4", "6.06885, -263.449, -77.3313, 1.4", "7.76294, -265.289, -81.1519, 0.44", "8.36643, -265.903, -82.2067, 0.37", "8.41683, -265.96, -82.2778, 0.37", "9.8421, -267.621, -84.1309, 0.29", "10.5557, -268.39, -84.9408, 1.47", "10.7129, -268.551, -85.1124, 1.77", "11.248, -269.047, -85.6609, 1.99", "12.2755, -269.912, -86.7533, 1.99", "14.1364, -271.406, -88.6968, 0.44", "15.1652, -272.152, -89.8008, 0.81", "16.5216, -273.008, -91.3932, 0.52", "18.4977, -274.229, -93.7693, 0.44", "19.5292, -274.842, -95.046, 1.11", "20.007, -275.116, -95.6491, 1.11", "22.6219, -276.48, -99.0023, 1.4", "25.5547, -277.856, -102.933, 1.55" ],
    "parent" : "dend_6",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_9", "dend_0", "dend_15", "dend_10", "dend_4", "dend_1", "dend_17", "dend_16", "dend_12", "dend_11", "dend_6", "dend_5", "dend_3", "dend_2", "dend_19", "dend_18", "dend_14", "dend_13", "dend_8", "dend_7" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_9", "dend_0", "dend_15", "dend_10", "dend_4", "dend_1", "dend_17", "dend_16", "dend_12", "dend_11", "dend_6", "dend_5", "dend_3", "dend_2", "dend_19", "dend_18", "dend_14", "dend_13", "dend_8", "dend_7" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_6",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_17" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_17",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_21",
    "groups" : [ ],
    "sections" : [ "dend_13" ]
  }, {
    "name" : "OneSecGrp_SectionRef_23",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_3",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_15" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_16" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_20",
    "groups" : [ ],
    "sections" : [ "dend_14" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_19",
    "groups" : [ ],
    "sections" : [ "dend_18" ]
  }, {
    "name" : "OneSecGrp_SectionRef_18",
    "groups" : [ ],
    "sections" : [ "dend_19" ]
  }, {
    "name" : "OneSecGrp_SectionRef_22",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12", "dend_13", "dend_14", "dend_15", "dend_16", "dend_17", "dend_18", "dend_19" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_15", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_17", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_16", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_11", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_6", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_19", "dend_18", "dend_14", "dend_14", "dend_14", "dend_14", "dend_14", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_13", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_8", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "basal_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.0095",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.004399",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "apical_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.8299998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "1.0E-5",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-79.315735"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.959764",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.098908",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0034419997",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.004729",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.317363",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "9.3999995E-5",
    "erev" : "-60.216507"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "9.989999E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.092965",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.019725999",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gkbar_KdShu2007",
    "ionChannel" : "KdShu2007",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "4.2499998E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.156376",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.297559",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "9.1E-5",
    "erev" : "-62.442795"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "8.0E-6",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.197999",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "1.50000005E-5",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "2.9999999E-6",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.001067",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dNAC_1_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__dNAC_1_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate dNAC222_L4_BTC_7345a3c5cd_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_9, id: dend_9, parent: soma_0
create dend_9
public dend_9
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_15, id: dend_15, parent: dend_9
create dend_15
public dend_15
// Section: dend_10, id: dend_10, parent: dend_9
create dend_10
public dend_10
// Section: dend_4, id: dend_4, parent: dend_0
create dend_4
public dend_4
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_17, id: dend_17, parent: dend_15
create dend_17
public dend_17
// Section: dend_16, id: dend_16, parent: dend_15
create dend_16
public dend_16
// Section: dend_12, id: dend_12, parent: dend_10
create dend_12
public dend_12
// Section: dend_11, id: dend_11, parent: dend_10
create dend_11
public dend_11
// Section: dend_6, id: dend_6, parent: dend_4
create dend_6
public dend_6
// Section: dend_5, id: dend_5, parent: dend_4
create dend_5
public dend_5
// Section: dend_3, id: dend_3, parent: dend_1
create dend_3
public dend_3
// Section: dend_2, id: dend_2, parent: dend_1
create dend_2
public dend_2
// Section: dend_19, id: dend_19, parent: dend_17
create dend_19
public dend_19
// Section: dend_18, id: dend_18, parent: dend_17
create dend_18
public dend_18
// Section: dend_14, id: dend_14, parent: dend_12
create dend_14
public dend_14
// Section: dend_13, id: dend_13, parent: dend_12
create dend_13
public dend_13
// Section: dend_8, id: dend_8, parent: dend_6
create dend_8
public dend_8
// Section: dend_7, id: dend_7, parent: dend_6
create dend_7
public dend_7

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_4
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_6
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_17]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_17
// Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_13]}
objref OneSecGrp_SectionRef_21
// Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_23
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_3
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_15]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_16]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_14]}
objref OneSecGrp_SectionRef_20
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_16
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_18]}
objref OneSecGrp_SectionRef_19
// Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_19]}
objref OneSecGrp_SectionRef_18
// Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_22
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_19, dend_18, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dNAC_1_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dNAC_1_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_9(0), soma_0(0.49999821452163534)
    connect dend_0(0), soma_0(0.49999821452163534)
    connect axon_0(0), soma_0(1.0)
    connect dend_15(0), dend_9(1.0)
    connect dend_10(0), dend_9(1.0)
    connect dend_4(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_17(0), dend_15(1.0)
    connect dend_16(0), dend_15(1.0)
    connect dend_12(0), dend_10(1.0)
    connect dend_11(0), dend_10(1.0)
    connect dend_6(0), dend_4(1.0)
    connect dend_5(0), dend_4(1.0)
    connect dend_3(0), dend_1(1.0)
    connect dend_2(0), dend_1(1.0)
    connect dend_19(0), dend_17(1.0)
    connect dend_18(0), dend_17(1.0)
    connect dend_14(0), dend_12(1.0)
    connect dend_13(0), dend_12(1.0)
    connect dend_8(0), dend_6(1.0)
    connect dend_7(0), dend_6(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -1.49721, 11.7986, 0.0301706, 2.4623 ) }
    soma_0 { pt3dadd( -1.37308, 10.661, 0.0290426, 4.20373 ) }
    soma_0 { pt3dadd( -1.24895, 9.52332, 0.0279145, 5.59272 ) }
    soma_0 { pt3dadd( -1.12482, 8.38566, 0.0267864, 6.71614 ) }
    soma_0 { pt3dadd( -1.00068, 7.248, 0.0256584, 7.74544 ) }
    soma_0 { pt3dadd( -0.87655, 6.11034, 0.0245303, 8.57739 ) }
    soma_0 { pt3dadd( -0.752417, 4.97268, 0.0234023, 9.13171 ) }
    soma_0 { pt3dadd( -0.628284, 3.83502, 0.0222742, 9.51195 ) }
    soma_0 { pt3dadd( -0.504152, 2.69736, 0.0211462, 9.92921 ) }
    soma_0 { pt3dadd( -0.380019, 1.5597, 0.0200181, 10.275 ) }
    soma_0 { pt3dadd( -0.255886, 0.422041, 0.01889, 10.4231 ) }
    soma_0 { pt3dadd( -0.131754, -0.715618, 0.017762, 10.4046 ) }
    soma_0 { pt3dadd( -0.00762106, -1.85328, 0.0166339, 10.4069 ) }
    soma_0 { pt3dadd( 0.116512, -2.99094, 0.0155059, 10.1383 ) }
    soma_0 { pt3dadd( 0.240644, -4.1286, 0.0143778, 9.53645 ) }
    soma_0 { pt3dadd( 0.364777, -5.26626, 0.0132498, 8.49552 ) }
    soma_0 { pt3dadd( 0.48891, -6.40392, 0.0121217, 7.50349 ) }
    soma_0 { pt3dadd( 0.613042, -7.54158, 0.0109937, 6.64245 ) }
    soma_0 { pt3dadd( 0.737175, -8.67924, 0.0098656, 6.01482 ) }
    soma_0 { pt3dadd( 0.861308, -9.8169, 0.00873754, 4.86867 ) }
    soma_0 { pt3dadd( 0.98544, -10.9546, 0.00760949, 2.96361 ) }
    // Section: dend_9, id: dend_9, parent: soma_0 (entry count 21/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( -1.78536, 12.0975, 1.5043, 2.36 ) }
    dend_9 { pt3dadd( -1.78536, 12.0975, 1.5043, 2.36 ) }
    dend_9 { pt3dadd( -1.89806, 12.7968, 1.67506, 2.06 ) }
    dend_9 { pt3dadd( -2.03022, 13.5295, 1.87609, 2.06 ) }
    dend_9 { pt3dadd( -2.04522, 13.5985, 1.89582, 2.06 ) }
    dend_9 { pt3dadd( -2.23623, 14.4011, 2.12637, 2.21 ) }
    dend_9 { pt3dadd( -2.53189, 15.5206, 2.50164, 2.21 ) }
    dend_9 { pt3dadd( -2.76269, 16.2574, 2.77718, 2.21 ) }
    dend_9 { pt3dadd( -2.7763, 16.2954, 2.79389, 2.21 ) }
    dend_9 { pt3dadd( -3.05308, 17.0138, 3.13517, 2.21 ) }
    dend_9 { pt3dadd( -3.18118, 17.3326, 3.29264, 2.36 ) }
    dend_9 { pt3dadd( -3.57623, 18.2542, 3.78326, 2.43 ) }
    dend_9 { pt3dadd( -3.82914, 18.8091, 4.07037, 2.65 ) }
    dend_9 { pt3dadd( -4.21757, 19.676, 4.53807, 2.65 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 35/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 0.094648, -10.803, 0.0043065, 4.86 ) }
    dend_0 { pt3dadd( 0.094648, -10.803, 0.0043065, 4.86 ) }
    dend_0 { pt3dadd( -0.298935, -12.1322, -0.0350676, 4.57 ) }
    dend_0 { pt3dadd( -0.735261, -13.5805, -0.0870899, 4.2 ) }
    dend_0 { pt3dadd( -1.51431, -16.1795, -0.187443, 2.87 ) }
    dend_0 { pt3dadd( -2.14077, -18.3873, -0.295556, 2.58 ) }
    dend_0 { pt3dadd( -2.82416, -20.8977, -0.430819, 2.5 ) }
    dend_0 { pt3dadd( -3.30115, -22.7781, -0.516096, 2.58 ) }
    dend_0 { pt3dadd( -3.3165, -22.8459, -0.518653, 2.58 ) }
    dend_0 { pt3dadd( -3.47537, -23.7556, -0.543173, 2.73 ) }
    dend_0 { pt3dadd( -3.71099, -25.9134, -0.570995, 2.73 ) }
    dend_0 { pt3dadd( -3.7612, -27.3463, -0.534348, 2.36 ) }
    dend_0 { pt3dadd( -3.72924, -29.122, -0.424884, 2.65 ) }
    dend_0 { pt3dadd( -3.64859, -30.6841, -0.297982, 2.87 ) }
    dend_0 { pt3dadd( -3.54477, -32.1999, -0.168168, 3.09 ) }
    dend_0 { pt3dadd( -3.40933, -33.6053, -0.043154, 3.09 ) }
    dend_0 { pt3dadd( -3.17666, -35.4544, 0.128669, 3.32 ) }
    dend_0 { pt3dadd( -3.04715, -36.3644, 0.207813, 3.02 ) }
    dend_0 { pt3dadd( -2.76952, -38.2366, 0.340653, 2.43 ) }
    dend_0 { pt3dadd( -2.44158, -40.4252, 0.494544, 2.36 ) }
    dend_0 { pt3dadd( -2.23942, -41.8565, 0.582607, 2.36 ) }
    dend_0 { pt3dadd( -2.12571, -42.5739, 0.612367, 2.36 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 57/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 0.98544, -10.9546, 0.00760949, 0.593539 ) }
    axon_0 { pt3dadd( 2.61247, -25.8661, 0.00760949, 0.593539 ) }
    axon_0 { pt3dadd( 4.23949, -40.7776, 0.00760949, 0.593539 ) }
    // Section: dend_15, id: dend_15, parent: dend_9 (entry count 60/100)
    dend_15 { pt3dclear() }
    dend_15 { pt3dadd( -4.21757, 19.676, 4.53807, 1.4 ) }
    dend_15 { pt3dadd( -4.75334, 20.8965, 4.7059, 1.4 ) }
    dend_15 { pt3dadd( -5.19322, 21.9577, 4.83796, 1.18 ) }
    dend_15 { pt3dadd( -5.48496, 22.7159, 4.91945, 1.18 ) }
    dend_15 { pt3dadd( -5.78007, 23.5184, 4.99767, 1.18 ) }
    dend_15 { pt3dadd( -6.04937, 24.2889, 5.06278, 1.62 ) }
    dend_15 { pt3dadd( -6.21229, 24.7825, 5.11319, 1.99 ) }
    dend_15 { pt3dadd( -6.22853, 24.8455, 5.11952, 1.99 ) }
    dend_15 { pt3dadd( -6.39349, 25.6344, 5.18606, 2.06 ) }
    dend_15 { pt3dadd( -6.41242, 25.7558, 5.19578, 2.06 ) }
    dend_15 { pt3dadd( -6.50798, 26.6772, 5.26014, 1.62 ) }
    dend_15 { pt3dadd( -6.58711, 27.8942, 5.36501, 1.4 ) }
    dend_15 { pt3dadd( -6.59091, 27.9825, 5.37329, 1.4 ) }
    dend_15 { pt3dadd( -6.61312, 28.9674, 5.46649, 1.47 ) }
    dend_15 { pt3dadd( -6.61389, 29.8355, 5.54869, 1.77 ) }
    dend_15 { pt3dadd( -6.60545, 30.5935, 5.61197, 1.92 ) }
    dend_15 { pt3dadd( -6.57729, 31.6566, 5.6816, 1.11 ) }
    dend_15 { pt3dadd( -6.57367, 31.9027, 5.69105, 1.11 ) }
    dend_15 { pt3dadd( -6.58595, 32.379, 5.71091, 1.11 ) }
    dend_15 { pt3dadd( -6.59929, 32.5519, 5.71899, 1.11 ) }
    dend_15 { pt3dadd( -6.73491, 33.6229, 5.77022, 0.96 ) }
    dend_15 { pt3dadd( -6.86065, 34.3181, 5.77929, 0.96 ) }
    dend_15 { pt3dadd( -7.01753, 34.9984, 5.76352, 1.55 ) }
    dend_15 { pt3dadd( -7.17653, 35.617, 5.73528, 2.36 ) }
    dend_15 { pt3dadd( -7.31864, 36.1831, 5.7008, 2.5 ) }
    dend_15 { pt3dadd( -7.42743, 36.6285, 5.66863, 2.8 ) }
    dend_15 { pt3dadd( -7.64983, 37.5749, 5.59125, 2.43 ) }
    dend_15 { pt3dadd( -7.82309, 38.3739, 5.52048, 1.99 ) }
    dend_15 { pt3dadd( -8.05534, 39.7931, 5.42847, 1.4 ) }
    dend_15 { pt3dadd( -8.12487, 40.5332, 5.39879, 1.4 ) }
    dend_15 { pt3dadd( -8.12952, 40.7166, 5.39908, 1.4 ) }
    dend_15 { pt3dadd( -8.08866, 41.5987, 5.43259, 1.62 ) }
    dend_15 { pt3dadd( -8.08242, 41.6559, 5.43815, 1.62 ) }
    dend_15 { pt3dadd( -7.8955, 42.9477, 5.61769, 1.03 ) }
    dend_15 { pt3dadd( -7.73394, 43.9357, 5.81394, 1.03 ) }
    dend_15 { pt3dadd( -7.60409, 44.8005, 6.01745, 1.47 ) }
    dend_15 { pt3dadd( -7.45393, 45.868, 6.28746, 1.69 ) }
    dend_15 { pt3dadd( -7.30193, 47.1345, 6.6209, 1.69 ) }
    dend_15 { pt3dadd( -7.23559, 48.0284, 6.8504, 2.14 ) }
    dend_15 { pt3dadd( -7.22169, 49.002, 7.08582, 2.8 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_15 { pt3dadd( -7.25479, 49.8894, 7.29623, 3.24 ) }
    dend_15 { pt3dadd( -7.30431, 50.463, 7.4156, 3.39 ) }
    dend_15 { pt3dadd( -7.4248, 51.3194, 7.57018, 2.21 ) }
    dend_15 { pt3dadd( -7.61649, 52.3894, 7.72489, 1.33 ) }
    dend_15 { pt3dadd( -7.82814, 53.3547, 7.83359, 1.18 ) }
    dend_15 { pt3dadd( -7.85392, 53.457, 7.83934, 1.18 ) }
    dend_15 { pt3dadd( -8.11038, 54.4339, 7.86228, 1.47 ) }
    dend_15 { pt3dadd( -8.26076, 54.9907, 7.87451, 1.62 ) }
    // Section: dend_10, id: dend_10, parent: dend_9 (entry count 8/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( -4.21757, 19.676, 4.53807, 1.03 ) }
    dend_10 { pt3dadd( -3.11903, 20.4568, 4.63389, 1.03 ) }
    dend_10 { pt3dadd( -3.00262, 20.5352, 4.64366, 1.03 ) }
    dend_10 { pt3dadd( -2.09894, 21.1261, 4.71694, 1.03 ) }
    dend_10 { pt3dadd( -0.883966, 21.9065, 4.81376, 1.4 ) }
    dend_10 { pt3dadd( -0.831015, 21.9399, 4.81959, 1.4 ) }
    dend_10 { pt3dadd( 0.627354, 22.865, 5.00369, 1.4 ) }
    dend_10 { pt3dadd( 0.682631, 22.8997, 5.01133, 1.4 ) }
    dend_10 { pt3dadd( 1.50924, 23.4565, 5.13708, 1.55 ) }
    dend_10 { pt3dadd( 1.56655, 23.4979, 5.14683, 1.55 ) }
    dend_10 { pt3dadd( 2.73265, 24.4708, 5.36582, 0.96 ) }
    dend_10 { pt3dadd( 3.31571, 25.0164, 5.48095, 0.96 ) }
    dend_10 { pt3dadd( 3.78801, 25.5523, 5.58311, 1.18 ) }
    dend_10 { pt3dadd( 4.29382, 26.1949, 5.68975, 1.4 ) }
    dend_10 { pt3dadd( 4.37097, 26.3074, 5.70153, 1.4 ) }
    dend_10 { pt3dadd( 4.80237, 26.971, 5.73266, 1.4 ) }
    dend_10 { pt3dadd( 4.8489, 27.0443, 5.73177, 1.4 ) }
    dend_10 { pt3dadd( 5.35714, 27.8055, 5.71338, 1.69 ) }
    dend_10 { pt3dadd( 5.73292, 28.3304, 5.69872, 1.92 ) }
    dend_10 { pt3dadd( 6.26176, 29.0446, 5.69072, 1.4 ) }
    dend_10 { pt3dadd( 6.9455, 29.9797, 5.69632, 1.11 ) }
    dend_10 { pt3dadd( 7.58104, 30.8447, 5.71232, 1.11 ) }
    dend_10 { pt3dadd( 7.63338, 30.9186, 5.71476, 1.11 ) }
    dend_10 { pt3dadd( 8.20418, 31.7495, 5.75458, 1.11 ) }
    dend_10 { pt3dadd( 8.66234, 32.4728, 5.80425, 1.03 ) }
    dend_10 { pt3dadd( 9.1431, 33.3125, 5.88463, 1.03 ) }
    dend_10 { pt3dadd( 9.18203, 33.3947, 5.89186, 1.03 ) }
    dend_10 { pt3dadd( 9.62889, 34.5084, 5.9803, 1.03 ) }
    dend_10 { pt3dadd( 9.64955, 34.5696, 5.98441, 1.03 ) }
    dend_10 { pt3dadd( 9.85599, 35.3946, 6.02521, 0.81 ) }
    dend_10 { pt3dadd( 9.87005, 35.4902, 6.0275, 0.81 ) }
    dend_10 { pt3dadd( 9.90898, 36.2165, 6.04074, 0.59 ) }
    dend_10 { pt3dadd( 9.90651, 36.3552, 6.04266, 0.59 ) }
    dend_10 { pt3dadd( 9.85105, 37.0634, 6.06477, 0.59 ) }
    dend_10 { pt3dadd( 9.83382, 37.3228, 6.07637, 0.59 ) }
    dend_10 { pt3dadd( 9.80644, 37.9409, 6.10967, 0.74 ) }
    dend_10 { pt3dadd( 9.80488, 38.0374, 6.11541, 0.74 ) }
    dend_10 { pt3dadd( 9.84758, 39.1251, 6.18632, 0.74 ) }
    dend_10 { pt3dadd( 9.93101, 39.9473, 6.24124, 1.25 ) }
    dend_10 { pt3dadd( 10.05, 40.5863, 6.28498, 1.69 ) }
    dend_10 { pt3dadd( 10.2746, 41.4889, 6.34413, 1.4 ) }
    dend_10 { pt3dadd( 10.2931, 41.5509, 6.34794, 1.4 ) }
    dend_10 { pt3dadd( 10.5227, 42.304, 6.38844, 2.06 ) }
    dend_10 { pt3dadd( 10.7881, 43.1414, 6.42832, 2.21 ) }
    dend_10 { pt3dadd( 11.0679, 44.0289, 6.46298, 1.77 ) }
    dend_10 { pt3dadd( 11.3757, 45.0339, 6.50323, 1.11 ) }
    dend_10 { pt3dadd( 11.5988, 45.8189, 6.53446, 1.11 ) }
    dend_10 { pt3dadd( 11.7938, 46.5814, 6.56389, 1.4 ) }
    dend_10 { pt3dadd( 12.0206, 47.6177, 6.60237, 0.59 ) }
    dend_10 { pt3dadd( 12.0319, 47.6817, 6.60462, 0.59 ) }
    dend_10 { pt3dadd( 12.1418, 48.6382, 6.65669, 0.44 ) }
    dend_10 { pt3dadd( 12.1769, 49.377, 6.71108, 1.11 ) }
    dend_10 { pt3dadd( 12.1781, 49.9314, 6.76081, 1.33 ) }
    dend_10 { pt3dadd( 12.1763, 50.059, 6.77009, 1.33 ) }
    dend_10 { pt3dadd( 12.1555, 50.4484, 6.78864, 1.33 ) }
    dend_10 { pt3dadd( 12.1012, 51.3515, 6.80275, 0.52 ) }
    dend_10 { pt3dadd( 12.0075, 52.5308, 6.78792, 0.52 ) }
    dend_10 { pt3dadd( 12.0018, 52.6042, 6.78505, 0.52 ) }
    dend_10 { pt3dadd( 11.9457, 53.3465, 6.71491, 0.96 ) }
    dend_10 { pt3dadd( 11.8983, 54.237, 6.56353, 1.55 ) }
    dend_10 { pt3dadd( 11.8766, 54.9505, 6.35997, 1.77 ) }
    dend_10 { pt3dadd( 11.8734, 55.3083, 6.21744, 1.99 ) }
    dend_10 { pt3dadd( 11.8734, 55.3571, 6.19623, 1.99 ) }
    dend_10 { pt3dadd( 11.8816, 56.2612, 5.81414, 1.99 ) }
    dend_10 { pt3dadd( 11.8921, 57.0504, 5.48526, 1.4 ) }
    dend_10 { pt3dadd( 11.9299, 58.4069, 4.91507, 0.44 ) }
    dend_10 { pt3dadd( 11.9568, 59.2272, 4.57635, 0.96 ) }
    dend_10 { pt3dadd( 11.987, 59.856, 4.33375, 1.4 ) }
    dend_10 { pt3dadd( 12.0257, 60.5327, 4.10101, 1.77 ) }
    dend_10 { pt3dadd( 12.0301, 60.5869, 4.08649, 1.77 ) }
    dend_10 { pt3dadd( 12.0821, 61.1031, 4.00095, 1.99 ) }
    dend_10 { pt3dadd( 12.1013, 61.2473, 3.99384, 1.99 ) }
    dend_10 { pt3dadd( 12.1698, 61.7181, 3.99332, 1.99 ) }
    dend_10 { pt3dadd( 12.1867, 61.8471, 3.99341, 1.99 ) }
    dend_10 { pt3dadd( 12.253, 62.462, 3.97686, 1.69 ) }
    dend_10 { pt3dadd( 12.3087, 63.2248, 3.94526, 1.11 ) }
    dend_10 { pt3dadd( 12.3404, 63.9942, 3.90706, 0.44 ) }
    dend_10 { pt3dadd( 12.3503, 64.9272, 3.85762, 0.37 ) }
    dend_10 { pt3dadd( 12.3192, 65.7874, 3.80483, 1.03 ) }
    dend_10 { pt3dadd( 12.2814, 66.4881, 3.78246, 1.03 ) }
    dend_10 { pt3dadd( 12.2371, 67.3434, 3.77738, 0.44 ) }
    dend_10 { pt3dadd( 12.2148, 67.861, 3.78505, 0.88 ) }
    dend_10 { pt3dadd( 12.2058, 68.3344, 3.8003, 1.18 ) }
    dend_10 { pt3dadd( 12.2121, 68.9757, 3.83037, 1.18 ) }
    dend_10 { pt3dadd( 12.3011, 70.4149, 3.91032, 0.37 ) }
    dend_10 { pt3dadd( 12.3865, 71.194, 3.96137, 0.37 ) }
    dend_10 { pt3dadd( 12.5671, 72.3219, 4.02552, 1.33 ) }
    dend_10 { pt3dadd( 12.7155, 73.1166, 4.06694, 2.36 ) }
    dend_10 { pt3dadd( 12.8092, 73.554, 4.08476, 2.95 ) }
    dend_10 { pt3dadd( 12.9351, 74.0404, 4.09176, 3.24 ) }
    dend_10 { pt3dadd( 12.9559, 74.1216, 4.08571, 3.24 ) }
    dend_10 { pt3dadd( 13.0125, 74.3559, 4.06277, 3.24 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    // Section: dend_4, id: dend_4, parent: dend_0 (entry count 0/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( -2.12571, -42.5739, 0.612367, 2.06 ) }
    dend_4 { pt3dadd( -2.1218, -43.5671, 0.698534, 2.06 ) }
    dend_4 { pt3dadd( -2.07302, -45.3234, 0.686671, 2.06 ) }
    dend_4 { pt3dadd( -2.01154, -46.5451, 0.603103, 2.06 ) }
    dend_4 { pt3dadd( -1.90924, -47.8012, 0.47867, 2.06 ) }
    dend_4 { pt3dadd( -1.72717, -49.3926, 0.275122, 2.14 ) }
    dend_4 { pt3dadd( -1.57743, -50.4878, 0.124294, 2.14 ) }
    dend_4 { pt3dadd( -1.29887, -52.1295, -0.178456, 2.43 ) }
    dend_4 { pt3dadd( -1.13616, -53.0354, -0.378019, 2.8 ) }
    dend_4 { pt3dadd( -0.911777, -54.2657, -0.636004, 2.36 ) }
    dend_4 { pt3dadd( -0.60063, -55.9361, -0.974207, 2.36 ) }
    dend_4 { pt3dadd( -0.353484, -57.2153, -1.20994, 2.36 ) }
    dend_4 { pt3dadd( -0.0733549, -58.7481, -1.47766, 2.36 ) }
    dend_4 { pt3dadd( 0.170688, -60.3408, -1.73241, 2.14 ) }
    dend_4 { pt3dadd( 0.346944, -61.7809, -1.9893, 2.14 ) }
    dend_4 { pt3dadd( 0.464775, -63.1964, -2.27407, 2.28 ) }
    dend_4 { pt3dadd( 0.486172, -63.7156, -2.38621, 2.28 ) }
    dend_4 { pt3dadd( 0.477996, -65.0191, -2.69559, 1.69 ) }
    dend_4 { pt3dadd( 0.377592, -66.4283, -2.99681, 1.18 ) }
    dend_4 { pt3dadd( 0.233485, -67.2591, -3.13365, 1.18 ) }
    dend_4 { pt3dadd( 0.0261538, -67.8278, -3.14297, 1.18 ) }
    dend_4 { pt3dadd( -0.340434, -68.4147, -3.0139, 1.18 ) }
    dend_4 { pt3dadd( -0.841364, -68.9764, -2.76847, 0.96 ) }
    dend_4 { pt3dadd( -1.77353, -69.7628, -2.27425, 1.11 ) }
    dend_4 { pt3dadd( -2.77019, -70.4683, -1.80849, 1.69 ) }
    dend_4 { pt3dadd( -3.83482, -71.1914, -1.40433, 1.55 ) }
    dend_4 { pt3dadd( -4.4654, -71.612, -1.26871, 1.92 ) }
    dend_4 { pt3dadd( -5.05559, -72.0248, -1.24002, 2.21 ) }
    dend_4 { pt3dadd( -5.8284, -72.6392, -1.3633, 2.06 ) }
    dend_4 { pt3dadd( -6.77526, -73.4816, -1.69675, 1.99 ) }
    dend_4 { pt3dadd( -7.48938, -74.1936, -2.03495, 1.77 ) }
    dend_4 { pt3dadd( -8.29616, -75.0796, -2.42284, 1.92 ) }
    dend_4 { pt3dadd( -9.01574, -75.9467, -2.72274, 1.84 ) }
    dend_4 { pt3dadd( -9.72944, -76.8765, -2.8978, 1.69 ) }
    dend_4 { pt3dadd( -10.2018, -77.562, -2.90716, 1.11 ) }
    dend_4 { pt3dadd( -10.7373, -78.4867, -2.80291, 0.96 ) }
    dend_4 { pt3dadd( -11.2875, -79.627, -2.58322, 1.25 ) }
    dend_4 { pt3dadd( -11.5618, -80.3235, -2.43793, 0.81 ) }
    dend_4 { pt3dadd( -12.0246, -81.8708, -2.26156, 0.74 ) }
    dend_4 { pt3dadd( -12.2128, -82.7388, -2.2644, 0.37 ) }
    dend_4 { pt3dadd( -12.3762, -84.1058, -2.44779, 1.47 ) }
    dend_4 { pt3dadd( -12.3896, -84.7635, -2.62133, 2.14 ) }
    dend_4 { pt3dadd( -12.319, -86.0081, -3.12532, 2.5 ) }
    dend_4 { pt3dadd( -12.1152, -87.5825, -3.96672, 1.03 ) }
    dend_4 { pt3dadd( -11.9703, -88.3947, -4.48896, 0.88 ) }
    dend_4 { pt3dadd( -11.8267, -89.017, -4.90595, 0.44 ) }
    dend_4 { pt3dadd( -11.5212, -90.0699, -5.6355, 0.44 ) }
    dend_4 { pt3dadd( -11.1099, -91.2822, -6.47073, 1.18 ) }
    dend_4 { pt3dadd( -10.6162, -92.6591, -7.35351, 1.62 ) }
    dend_4 { pt3dadd( -10.585, -92.7474, -7.40564, 1.62 ) }
    dend_4 { pt3dadd( -10.2628, -93.6955, -7.91133, 1.62 ) }
    dend_4 { pt3dadd( -9.84452, -95.1505, -8.59044, 1.47 ) }
    dend_4 { pt3dadd( -9.63007, -96.1093, -8.94862, 1.99 ) }
    dend_4 { pt3dadd( -9.5266, -96.8907, -9.17352, 1.99 ) }
    dend_4 { pt3dadd( -9.49243, -97.6025, -9.33799, 1.99 ) }
    dend_4 { pt3dadd( -9.52048, -98.966, -9.63245, 0.59 ) }
    dend_4 { pt3dadd( -9.63342, -99.9514, -9.82898, 0.52 ) }
    dend_4 { pt3dadd( -9.79066, -100.676, -9.91931, 0.52 ) }
    dend_4 { pt3dadd( -10.297, -102.351, -10.0747, 2.8 ) }
    dend_4 { pt3dadd( -10.5265, -103.025, -10.1259, 3.17 ) }
    dend_4 { pt3dadd( -10.7825, -103.69, -10.1197, 3.46 ) }
    dend_4 { pt3dadd( -11.0373, -104.32, -10.0119, 3.46 ) }
    dend_4 { pt3dadd( -11.6505, -105.85, -9.64951, 1.69 ) }
    dend_4 { pt3dadd( -12.0068, -106.775, -9.34646, 1.11 ) }
    dend_4 { pt3dadd( -12.2152, -107.34, -9.08086, 1.25 ) }
    dend_4 { pt3dadd( -12.7576, -108.856, -8.25248, 1.99 ) }
    dend_4 { pt3dadd( -13.2606, -110.366, -7.28172, 1.47 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 67/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( -2.12571, -42.5739, 0.612367, 0.96 ) }
    dend_1 { pt3dadd( -1.17331, -43.8038, -1.33405, 0.96 ) }
    dend_1 { pt3dadd( -0.350556, -44.7791, -2.92078, 0.81 ) }
    dend_1 { pt3dadd( 0.968156, -46.1104, -5.13336, 0.59 ) }
    dend_1 { pt3dadd( 1.3363, -46.4212, -5.67677, 0.88 ) }
    dend_1 { pt3dadd( 1.70894, -46.6851, -6.16548, 1.11 ) }
    dend_1 { pt3dadd( 1.77154, -46.7217, -6.24041, 1.11 ) }
    dend_1 { pt3dadd( 2.66379, -47.0019, -7.18767, 1.25 ) }
    dend_1 { pt3dadd( 3.4104, -47.1548, -8.09421, 0.88 ) }
    dend_1 { pt3dadd( 4.21243, -47.2811, -9.19387, 0.52 ) }
    dend_1 { pt3dadd( 4.58505, -47.3703, -9.91976, 0.81 ) }
    dend_1 { pt3dadd( 5.04633, -47.5571, -11.1263, 0.96 ) }
    dend_1 { pt3dadd( 5.61464, -47.9641, -13.2235, 0.52 ) }
    dend_1 { pt3dadd( 5.85987, -48.7328, -16.249, 0.52 ) }
    dend_1 { pt3dadd( 5.85124, -48.7613, -16.3322, 0.52 ) }
    dend_1 { pt3dadd( 5.26818, -49.7169, -18.3311, 0.96 ) }
    dend_1 { pt3dadd( 5.0161, -50.0838, -18.9154, 1.11 ) }
    dend_1 { pt3dadd( 4.67486, -50.5513, -19.4895, 1.11 ) }
    dend_1 { pt3dadd( 3.64643, -52.0901, -20.8973, 0.66 ) }
    dend_1 { pt3dadd( 3.23043, -52.86, -21.4911, 0.37 ) }
    dend_1 { pt3dadd( 2.80692, -54.0149, -22.4176, 0.37 ) }
    dend_1 { pt3dadd( 2.67771, -54.8317, -23.1212, 0.59 ) }
    dend_1 { pt3dadd( 2.67726, -54.9, -23.1856, 0.59 ) }
    dend_1 { pt3dadd( 2.88612, -55.9918, -24.3219, 1.03 ) }
    dend_1 { pt3dadd( 3.213, -56.9497, -25.4084, 1.69 ) }
    dend_1 { pt3dadd( 3.60088, -58.01, -26.6533, 2.21 ) }
    dend_1 { pt3dadd( 3.92794, -58.957, -27.7524, 2.8 ) }
    dend_1 { pt3dadd( 4.04338, -59.3823, -28.2309, 2.8 ) }
    dend_1 { pt3dadd( 4.45759, -61.4581, -30.4236, 1.33 ) }
    dend_1 { pt3dadd( 4.64008, -62.9336, -31.8279, 0.52 ) }
    dend_1 { pt3dadd( 4.68033, -63.7037, -32.466, 0.66 ) }
    dend_1 { pt3dadd( 4.68901, -64.312, -32.8882, 0.66 ) }
    dend_1 { pt3dadd( 4.70912, -65.2134, -33.4296, 0.29 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_2()
}

proc basic_shape_2() {
    dend_1 { pt3dadd( 4.7352, -66.0107, -33.8516, 0.37 ) }
    dend_1 { pt3dadd( 4.80881, -66.925, -34.1523, 0.37 ) }
    dend_1 { pt3dadd( 4.84629, -67.0348, -34.1937, 0.37 ) }
    dend_1 { pt3dadd( 5.36579, -67.8527, -34.724, 0.66 ) }
    dend_1 { pt3dadd( 5.86657, -68.5224, -35.2662, 0.96 ) }
    dend_1 { pt3dadd( 5.90909, -68.5743, -35.3117, 0.96 ) }
    dend_1 { pt3dadd( 6.39109, -69.1676, -35.8396, 0.96 ) }
    dend_1 { pt3dadd( 7.33103, -70.3915, -36.9932, 0.52 ) }
    dend_1 { pt3dadd( 8.14895, -71.5234, -38.0357, 0.37 ) }
    dend_1 { pt3dadd( 9.10572, -72.9113, -39.3233, 1.77 ) }
    dend_1 { pt3dadd( 9.47535, -73.476, -39.833, 2.36 ) }
    dend_1 { pt3dadd( 9.87547, -74.1069, -40.3957, 2.58 ) }
    dend_1 { pt3dadd( 11.0795, -76.1082, -42.1432, 0.74 ) }
    dend_1 { pt3dadd( 11.4651, -76.8133, -42.6737, 0.74 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 14/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 4.23949, -40.7776, 0.00760949, 0.260132 ) }
    axon_1 { pt3dadd( 5.86652, -55.6891, 0.00760949, 0.260132 ) }
    axon_1 { pt3dadd( 7.49354, -70.6006, 0.00760949, 0.260132 ) }
    // Section: dend_17, id: dend_17, parent: dend_15 (entry count 17/100)
    dend_17 { pt3dclear() }
    dend_17 { pt3dadd( -8.26076, 54.9907, 7.87451, 0.81 ) }
    dend_17 { pt3dadd( -8.8618, 55.8786, 7.83333, 0.81 ) }
    dend_17 { pt3dadd( -9.62589, 57.0717, 7.76212, 0.74 ) }
    dend_17 { pt3dadd( -10.2784, 58.135, 7.70106, 0.74 ) }
    dend_17 { pt3dadd( -10.3266, 58.2148, 7.69327, 0.74 ) }
    dend_17 { pt3dadd( -11.2112, 59.7035, 7.52742, 0.74 ) }
    dend_17 { pt3dadd( -11.6378, 60.4125, 7.42671, 1.33 ) }
    dend_17 { pt3dadd( -12.0604, 61.1273, 7.28785, 1.92 ) }
    dend_17 { pt3dadd( -12.5176, 61.9022, 7.10646, 1.33 ) }
    dend_17 { pt3dadd( -13.1778, 62.9635, 6.85078, 1.11 ) }
    dend_17 { pt3dadd( -13.6782, 63.7202, 6.66512, 1.47 ) }
    dend_17 { pt3dadd( -14.3603, 64.6791, 6.44091, 1.18 ) }
    dend_17 { pt3dadd( -14.3999, 64.7327, 6.42855, 1.18 ) }
    dend_17 { pt3dadd( -15.0165, 65.569, 6.23888, 0.66 ) }
    dend_17 { pt3dadd( -15.5713, 66.3691, 6.05467, 0.66 ) }
    dend_17 { pt3dadd( -16.2509, 67.4456, 5.82915, 1.47 ) }
    dend_17 { pt3dadd( -16.6539, 68.1858, 5.70717, 1.99 ) }
    dend_17 { pt3dadd( -17.117, 69.1626, 5.58917, 1.99 ) }
    dend_17 { pt3dadd( -17.8507, 70.9176, 5.4227, 0.66 ) }
    dend_17 { pt3dadd( -18.2197, 71.9619, 5.34885, 0.52 ) }
    dend_17 { pt3dadd( -18.4384, 72.7082, 5.31796, 0.59 ) }
    dend_17 { pt3dadd( -18.8314, 74.2016, 5.36168, 0.74 ) }
    dend_17 { pt3dadd( -18.8562, 74.2979, 5.36883, 0.74 ) }
    dend_17 { pt3dadd( -19.1103, 75.1782, 5.48193, 1.33 ) }
    dend_17 { pt3dadd( -19.3339, 75.8779, 5.60419, 1.62 ) }
    dend_17 { pt3dadd( -19.7177, 76.8764, 5.792, 1.18 ) }
    dend_17 { pt3dadd( -20.2434, 78.0094, 5.9558, 0.66 ) }
    dend_17 { pt3dadd( -20.6933, 78.8726, 6.0449, 0.66 ) }
    dend_17 { pt3dadd( -21.5614, 80.4165, 6.18554, 2.28 ) }
    dend_17 { pt3dadd( -22.0441, 81.1909, 6.25132, 2.73 ) }
    dend_17 { pt3dadd( -22.4776, 81.8435, 6.29842, 2.95 ) }
    dend_17 { pt3dadd( -23.6246, 83.5039, 6.38646, 1.03 ) }
    dend_17 { pt3dadd( -23.6723, 83.5709, 6.38874, 1.03 ) }
    dend_17 { pt3dadd( -24.1465, 84.2404, 6.4173, 0.81 ) }
    dend_17 { pt3dadd( -24.6968, 85.0184, 6.46309, 0.44 ) }
    dend_17 { pt3dadd( -25.2558, 85.8368, 6.52533, 0.44 ) }
    dend_17 { pt3dadd( -25.8976, 86.8064, 6.61845, 0.44 ) }
    dend_17 { pt3dadd( -26.5174, 87.7355, 6.73489, 1.11 ) }
    dend_17 { pt3dadd( -26.9783, 88.4219, 6.82086, 1.69 ) }
    dend_17 { pt3dadd( -27.5931, 89.3485, 6.93407, 2.21 ) }
    dend_17 { pt3dadd( -27.962, 89.9038, 7.00126, 2.5 ) }
    dend_17 { pt3dadd( -28.8935, 91.241, 7.17159, 1.25 ) }
    dend_17 { pt3dadd( -29.7339, 92.4173, 7.32396, 0.44 ) }
    dend_17 { pt3dadd( -30.4201, 93.3654, 7.44597, 0.44 ) }
    dend_17 { pt3dadd( -30.9642, 94.106, 7.54324, 1.03 ) }
    dend_17 { pt3dadd( -31.5578, 94.9303, 7.64859, 1.33 ) }
    dend_17 { pt3dadd( -31.7053, 95.14, 7.67453, 1.33 ) }
    dend_17 { pt3dadd( -32.0438, 95.6357, 7.73336, 1.47 ) }
    dend_17 { pt3dadd( -32.653, 96.5196, 7.83965, 0.88 ) }
    dend_17 { pt3dadd( -33.1881, 97.2617, 7.93465, 0.59 ) }
    dend_17 { pt3dadd( -33.75, 97.9932, 8.0367, 0.44 ) }
    dend_17 { pt3dadd( -33.8172, 98.0745, 8.04922, 0.44 ) }
    dend_17 { pt3dadd( -34.6573, 98.9937, 8.21017, 0.44 ) }
    dend_17 { pt3dadd( -35.1082, 99.4126, 8.30015, 0.66 ) }
    dend_17 { pt3dadd( -35.3088, 99.578, 8.34118, 0.66 ) }
    dend_17 { pt3dadd( -35.9233, 100.073, 8.46745, 0.66 ) }
    dend_17 { pt3dadd( -36.5262, 100.622, 8.60366, 0.66 ) }
    dend_17 { pt3dadd( -37.0789, 101.247, 8.73775, 0.37 ) }
    dend_17 { pt3dadd( -37.4521, 101.802, 8.82183, 0.37 ) }
    dend_17 { pt3dadd( -37.9725, 102.769, 8.91987, 0.66 ) }
    dend_17 { pt3dadd( -38.2752, 103.509, 8.94579, 0.96 ) }
    dend_17 { pt3dadd( -38.5958, 104.595, 8.92642, 0.29 ) }
    dend_17 { pt3dadd( -38.789, 105.443, 8.88785, 0.44 ) }
    dend_17 { pt3dadd( -38.9574, 106.344, 8.83004, 0.96 ) }
    dend_17 { pt3dadd( -38.9834, 106.49, 8.81925, 0.96 ) }
    dend_17 { pt3dadd( -39.2472, 107.83, 8.71108, 1.77 ) }
    dend_17 { pt3dadd( -39.5608, 109.117, 8.61462, 2.95 ) }
    dend_17 { pt3dadd( -39.7532, 109.746, 8.44314, 3.54 ) }
    dend_17 { pt3dadd( -39.7771, 109.82, 8.41441, 3.54 ) }
    dend_17 { pt3dadd( -40.0275, 110.623, 8.04748, 3.76 ) }
    dend_17 { pt3dadd( -40.0484, 110.692, 8.012, 3.76 ) }
    dend_17 { pt3dadd( -40.3353, 111.662, 7.45341, 3.46 ) }
    dend_17 { pt3dadd( -41.2498, 114.996, 5.42686, 0.81 ) }
    dend_17 { pt3dadd( -41.2693, 115.075, 5.38157, 0.81 ) }
    dend_17 { pt3dadd( -41.4294, 115.763, 5.03756, 0.81 ) }
    dend_17 { pt3dadd( -41.4454, 115.839, 5.00926, 0.81 ) }
    dend_17 { pt3dadd( -41.6042, 116.801, 4.81514, 1.11 ) }
    dend_17 { pt3dadd( -41.6925, 117.524, 4.78187, 1.25 ) }
    dend_17 { pt3dadd( -41.8169, 118.877, 4.9344, 0.37 ) }
    dend_17 { pt3dadd( -41.9151, 119.967, 5.0685, 0.29 ) }
    dend_17 { pt3dadd( -42.0888, 121.601, 5.22325, 0.29 ) }
    dend_17 { pt3dadd( -42.3013, 123.385, 5.35023, 0.29 ) }
    dend_17 { pt3dadd( -42.3143, 123.479, 5.35465, 0.29 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_3()
}

proc basic_shape_3() {
    dend_17 { pt3dadd( -42.4985, 124.655, 5.40186, 0.29 ) }
    dend_17 { pt3dadd( -42.5204, 124.791, 5.40313, 0.29 ) }
    dend_17 { pt3dadd( -42.7524, 126.196, 5.29632, 0.44 ) }
    dend_17 { pt3dadd( -42.7835, 126.315, 5.26039, 0.44 ) }
    dend_17 { pt3dadd( -43.0455, 126.858, 4.9917, 0.44 ) }
    dend_17 { pt3dadd( -48.4161, 136.874, 4.89045, 0.44 ) }
    dend_17 { pt3dadd( -53.9407, 146.796, 5.06402, 0.44 ) }
    dend_17 { pt3dadd( -59.3211, 156.779, 4.3331, 0.44 ) }
    dend_17 { pt3dadd( -63.3881, 167.061, 1.5941, 0.44 ) }
    dend_17 { pt3dadd( -68.0453, 176.453, -2.68823, 0.44 ) }
    dend_17 { pt3dadd( -71.4205, 185.137, -9.03032, 0.44 ) }
    dend_17 { pt3dadd( -75.3672, 192.213, -16.7126, 0.44 ) }
    dend_17 { pt3dadd( -77.0004, 201.239, -23.2961, 0.44 ) }
    dend_17 { pt3dadd( -78.3047, 210.66, -29.4327, 0.44 ) }
    dend_17 { pt3dadd( -79.2683, 219.097, -36.807, 0.44 ) }
    dend_17 { pt3dadd( -78.3386, 228.588, -42.8989, 0.44 ) }
    // Section: dend_16, id: dend_16, parent: dend_15 (entry count 16/100)
    dend_16 { pt3dclear() }
    dend_16 { pt3dadd( -8.26076, 54.9907, 7.87451, 0.29 ) }
    dend_16 { pt3dadd( -8.07449, 56.3985, 7.53947, 0.29 ) }
    dend_16 { pt3dadd( -8.01837, 56.9705, 7.43878, 0.44 ) }
    dend_16 { pt3dadd( -7.99412, 57.5272, 7.37259, 0.44 ) }
    dend_16 { pt3dadd( -7.99881, 58.3455, 7.31323, 0.29 ) }
    dend_16 { pt3dadd( -8.00103, 58.3927, 7.31128, 0.29 ) }
    dend_16 { pt3dadd( -8.0554, 59.101, 7.29591, 0.29 ) }
    dend_16 { pt3dadd( -8.07082, 59.2153, 7.30667, 0.29 ) }
    dend_16 { pt3dadd( -8.17728, 59.8012, 7.33043, 0.29 ) }
    dend_16 { pt3dadd( -8.27824, 60.2874, 7.32236, 0.96 ) }
    dend_16 { pt3dadd( -8.3711, 60.7153, 7.27768, 1.33 ) }
    dend_16 { pt3dadd( -8.42224, 60.9719, 7.23835, 1.33 ) }
    dend_16 { pt3dadd( -8.60034, 62.0774, 7.01098, 0.52 ) }
    dend_16 { pt3dadd( -8.70291, 62.9427, 6.79766, 0.29 ) }
    dend_16 { pt3dadd( -8.70848, 63.0357, 6.77076, 0.29 ) }
    dend_16 { pt3dadd( -8.72389, 63.736, 6.55389, 0.81 ) }
    dend_16 { pt3dadd( -8.72379, 63.7858, 6.53849, 0.81 ) }
    dend_16 { pt3dadd( -8.72119, 64.2725, 6.39996, 1.03 ) }
    dend_16 { pt3dadd( -8.72773, 64.6919, 6.30338, 0.74 ) }
    dend_16 { pt3dadd( -8.73333, 65.3595, 6.18946, 0.29 ) }
    dend_16 { pt3dadd( -8.74275, 65.7889, 6.13416, 0.44 ) }
    dend_16 { pt3dadd( -8.76189, 66.1213, 6.11334, 0.44 ) }
    dend_16 { pt3dadd( -8.80162, 66.5619, 6.09429, 0.29 ) }
    dend_16 { pt3dadd( -8.87588, 66.9705, 6.09052, 0.74 ) }
    dend_16 { pt3dadd( -9.54739, 74.4112, 6.21173, 0.74 ) }
    // Section: dend_12, id: dend_12, parent: dend_10 (entry count 41/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 13.0125, 74.3559, 4.06277, 0.37 ) }
    dend_12 { pt3dadd( 13.3481, 76.215, 3.40712, 0.37 ) }
    dend_12 { pt3dadd( 13.5015, 76.8453, 3.10335, 0.37 ) }
    dend_12 { pt3dadd( 13.6323, 77.3457, 2.84736, 0.96 ) }
    dend_12 { pt3dadd( 13.6511, 77.4059, 2.8184, 0.96 ) }
    dend_12 { pt3dadd( 13.9519, 78.3172, 2.3931, 0.96 ) }
    dend_12 { pt3dadd( 14.4875, 80.0112, 1.6423, 0.37 ) }
    dend_12 { pt3dadd( 14.7752, 81.0835, 1.16617, 0.59 ) }
    dend_12 { pt3dadd( 14.9981, 81.9766, 0.732602, 0.37 ) }
    dend_12 { pt3dadd( 15.2634, 83.1891, 0.129369, 0.37 ) }
    dend_12 { pt3dadd( 15.2809, 83.2895, 0.0804382, 0.37 ) }
    dend_12 { pt3dadd( 15.3544, 83.9954, -0.292618, 0.29 ) }
    dend_12 { pt3dadd( 15.407, 85.3609, -1.01982, 1.47 ) }
    dend_12 { pt3dadd( 15.4019, 86.4767, -1.61931, 1.92 ) }
    dend_12 { pt3dadd( 15.3909, 86.8922, -1.85141, 2.21 ) }
    dend_12 { pt3dadd( 15.3799, 87.3123, -2.10146, 2.21 ) }
    dend_12 { pt3dadd( 15.3913, 89.576, -3.45722, 0.37 ) }
    dend_12 { pt3dadd( 15.4332, 90.7718, -4.16758, 0.96 ) }
    dend_12 { pt3dadd( 15.4659, 91.3833, -4.51561, 1.62 ) }
    dend_12 { pt3dadd( 15.5086, 92.043, -4.88618, 1.84 ) }
    dend_12 { pt3dadd( 15.6415, 93.8095, -5.89198, 0.29 ) }
    dend_12 { pt3dadd( 15.7303, 94.8682, -6.48462, 1.03 ) }
    dend_12 { pt3dadd( 15.7629, 95.2656, -6.67789, 1.4 ) }
    dend_12 { pt3dadd( 15.7777, 95.5022, -6.79743, 1.4 ) }
    // Section: dend_11, id: dend_11, parent: dend_10 (entry count 65/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 13.0125, 74.3559, 4.06277, 0.37 ) }
    dend_11 { pt3dadd( 14.7222, 77.1258, 4.79522, 0.37 ) }
    dend_11 { pt3dadd( 15.6132, 78.5942, 5.00118, 0.37 ) }
    dend_11 { pt3dadd( 16.4361, 80.0357, 5.0238, 0.81 ) }
    dend_11 { pt3dadd( 16.4838, 80.1163, 5.01922, 0.81 ) }
    dend_11 { pt3dadd( 16.9426, 80.8786, 4.95125, 0.81 ) }
    dend_11 { pt3dadd( 17.7048, 82.1652, 4.74381, 0.37 ) }
    dend_11 { pt3dadd( 18.445, 83.3647, 4.28384, 0.29 ) }
    dend_11 { pt3dadd( 19.0775, 84.3801, 3.8239, 0.59 ) }
    dend_11 { pt3dadd( 19.6828, 85.3544, 3.33691, 0.22 ) }
    dend_11 { pt3dadd( 19.7173, 85.416, 3.30679, 0.22 ) }
    dend_11 { pt3dadd( 20.3188, 86.7205, 2.70408, 1.18 ) }
    dend_11 { pt3dadd( 20.4948, 87.2223, 2.5285, 1.69 ) }
    dend_11 { pt3dadd( 20.7086, 88.1603, 2.33188, 1.99 ) }
    dend_11 { pt3dadd( 20.773, 88.7253, 2.3072, 1.99 ) }
    dend_11 { pt3dadd( 20.7051, 90.0019, 2.43863, 0.44 ) }
    dend_11 { pt3dadd( 20.5799, 90.8314, 2.66456, 0.29 ) }
    dend_11 { pt3dadd( 19.9063, 92.9013, 3.86188, 0.29 ) }
    dend_11 { pt3dadd( 19.872, 92.9675, 3.91121, 0.29 ) }
    dend_11 { pt3dadd( 26.0702, 104.226, 4.96302, 0.29 ) }
    dend_11 { pt3dadd( 31.4178, 115.688, 7.58874, 0.29 ) }
    dend_11 { pt3dadd( 37.0368, 126.85, 10.7673, 0.29 ) }
    dend_11 { pt3dadd( 41.9576, 137.819, 15.4002, 0.29 ) }
    dend_11 { pt3dadd( 48.4444, 147.508, 20.6536, 0.29 ) }
    dend_11 { pt3dadd( 54.3473, 156.12, 27.9213, 0.29 ) }
    dend_11 { pt3dadd( 60.8127, 164.609, 34.8296, 0.29 ) }
    // Section: dend_6, id: dend_6, parent: dend_4 (entry count 91/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( -13.2606, -110.366, -7.28172, 0.52 ) }
    dend_6 { pt3dadd( -13.7282, -112.962, -6.38416, 0.52 ) }
    dend_6 { pt3dadd( -13.7982, -113.983, -6.10594, 0.81 ) }
    dend_6 { pt3dadd( -13.774, -114.885, -5.95904, 1.03 ) }
    dend_6 { pt3dadd( -13.7661, -114.998, -5.95243, 1.03 ) }
    dend_6 { pt3dadd( -13.7079, -116.002, -5.96296, 1.03 ) }
    dend_6 { pt3dadd( -13.6814, -117.116, -6.02445, 0.52 ) }
    dend_6 { pt3dadd( -13.6714, -118.102, -6.19371, 0.52 ) }
    dend_6 { pt3dadd( -13.7843, -119.281, -6.40962, 0.52 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_4()
}

proc basic_shape_4() {
    dend_6 { pt3dadd( -13.982, -120.249, -6.59608, 0.66 ) }
    dend_6 { pt3dadd( -14.3077, -121.248, -6.73104, 0.66 ) }
    dend_6 { pt3dadd( -14.6439, -121.986, -6.79912, 0.88 ) }
    dend_6 { pt3dadd( -15.6123, -123.642, -6.76975, 1.03 ) }
    dend_6 { pt3dadd( -16.3404, -124.687, -6.63058, 1.55 ) }
    dend_6 { pt3dadd( -16.6771, -125.145, -6.52638, 1.92 ) }
    dend_6 { pt3dadd( -17.8783, -126.743, -6.06122, 1.92 ) }
    dend_6 { pt3dadd( -18.6863, -127.849, -5.69835, 1.33 ) }
    dend_6 { pt3dadd( -20.0183, -129.736, -5.05973, 0.59 ) }
    dend_6 { pt3dadd( -20.9546, -131.112, -4.60423, 0.59 ) }
    dend_6 { pt3dadd( -21.8294, -132.5, -4.2368, 0.59 ) }
    dend_6 { pt3dadd( -21.8701, -132.569, -4.22366, 0.59 ) }
    dend_6 { pt3dadd( -22.3983, -133.593, -4.15283, 1.33 ) }
    dend_6 { pt3dadd( -22.9138, -134.839, -4.22849, 0.74 ) }
    dend_6 { pt3dadd( -23.2263, -135.917, -4.42545, 0.74 ) }
    dend_6 { pt3dadd( -23.6263, -137.719, -4.80812, 0.74 ) }
    dend_6 { pt3dadd( -23.6533, -137.852, -4.8375, 0.74 ) }
    dend_6 { pt3dadd( -23.9219, -139.148, -5.09392, 1.18 ) }
    dend_6 { pt3dadd( -24.3703, -141.138, -5.45115, 0.81 ) }
    dend_6 { pt3dadd( -24.8962, -143.247, -5.71814, 0.74 ) }
    dend_6 { pt3dadd( -25.5616, -145.611, -5.89493, 0.59 ) }
    dend_6 { pt3dadd( -25.5918, -145.707, -5.89414, 0.59 ) }
    dend_6 { pt3dadd( -26.1356, -147.264, -5.81801, 1.92 ) }
    dend_6 { pt3dadd( -26.6601, -148.687, -5.64482, 2.21 ) }
    dend_6 { pt3dadd( -27.2859, -150.374, -5.33922, 2.21 ) }
    dend_6 { pt3dadd( -27.9124, -152.126, -4.96228, 0.74 ) }
    dend_6 { pt3dadd( -28.5382, -154.182, -4.45221, 0.74 ) }
    dend_6 { pt3dadd( -28.88, -155.744, -4.03143, 0.66 ) }
    dend_6 { pt3dadd( -29.0274, -157.589, -3.49529, 0.44 ) }
    dend_6 { pt3dadd( -28.9186, -158.806, -3.11437, 1.03 ) }
    dend_6 { pt3dadd( -28.8729, -158.953, -3.07059, 1.03 ) }
    dend_6 { pt3dadd( -28.4883, -159.68, -2.88791, 1.03 ) }
    dend_6 { pt3dadd( -27.8395, -160.691, -2.71554, 1.03 ) }
    dend_6 { pt3dadd( -27.2259, -161.682, -2.59685, 1.4 ) }
    dend_6 { pt3dadd( -26.9271, -162.307, -2.57131, 1.4 ) }
    dend_6 { pt3dadd( -26.4741, -163.855, -2.53943, 0.81 ) }
    dend_6 { pt3dadd( -26.2561, -165.503, -2.45572, 0.81 ) }
    dend_6 { pt3dadd( -26.2819, -166.677, -2.37624, 1.03 ) }
    dend_6 { pt3dadd( -26.4414, -167.736, -2.29276, 1.11 ) }
    dend_6 { pt3dadd( -26.7504, -168.991, -2.17217, 1.18 ) }
    dend_6 { pt3dadd( -27.2338, -170.53, -2.01036, 0.37 ) }
    dend_6 { pt3dadd( -27.902, -172.403, -1.88641, 0.37 ) }
    dend_6 { pt3dadd( -28.273, -173.591, -1.90511, 1.55 ) }
    dend_6 { pt3dadd( -28.472, -174.566, -2.00734, 1.84 ) }
    dend_6 { pt3dadd( -28.5511, -175.438, -2.16251, 2.14 ) }
    dend_6 { pt3dadd( -28.5284, -176.104, -2.3343, 2.14 ) }
    dend_6 { pt3dadd( -28.118, -177.936, -2.99793, 1.69 ) }
    dend_6 { pt3dadd( -27.181, -179.993, -3.89118, 0.52 ) }
    dend_6 { pt3dadd( -26.6974, -180.734, -4.22579, 0.88 ) }
    dend_6 { pt3dadd( -26.6371, -180.804, -4.25892, 0.88 ) }
    dend_6 { pt3dadd( -26.389, -181.036, -4.37965, 0.88 ) }
    dend_6 { pt3dadd( -25.0215, -182.142, -4.94538, 0.52 ) }
    dend_6 { pt3dadd( -23.7594, -183.11, -5.43823, 1.03 ) }
    dend_6 { pt3dadd( -23.6877, -183.169, -5.46798, 1.03 ) }
    dend_6 { pt3dadd( -22.5619, -184.238, -5.98561, 1.33 ) }
    dend_6 { pt3dadd( -21.424, -185.476, -6.53754, 1.25 ) }
    dend_6 { pt3dadd( -21.0146, -186.011, -6.7543, 1.03 ) }
    dend_6 { pt3dadd( -19.9089, -188.012, -7.40086, 0.59 ) }
    dend_6 { pt3dadd( -19.3652, -189.368, -7.74961, 0.59 ) }
    dend_6 { pt3dadd( -19.081, -190.342, -7.93933, 1.18 ) }
    dend_6 { pt3dadd( -19.007, -190.746, -7.9898, 1.84 ) }
    dend_6 { pt3dadd( -18.9207, -191.63, -8.05448, 1.84 ) }
    dend_6 { pt3dadd( -18.8539, -193.591, -8.15833, 0.74 ) }
    dend_6 { pt3dadd( -18.7494, -194.989, -8.36784, 1.03 ) }
    dend_6 { pt3dadd( -18.5705, -196.06, -8.65864, 1.11 ) }
    dend_6 { pt3dadd( -18.4306, -196.613, -8.86127, 1.33 ) }
    dend_6 { pt3dadd( -18.0471, -197.691, -9.40777, 0.81 ) }
    dend_6 { pt3dadd( -17.713, -198.391, -9.86657, 0.44 ) }
    dend_6 { pt3dadd( -15.8147, -201.693, -12.6327, 0.44 ) }
    dend_6 { pt3dadd( -15.446, -202.287, -13.2219, 0.44 ) }
    dend_6 { pt3dadd( -15.3722, -202.411, -13.3841, 0.44 ) }
    dend_6 { pt3dadd( -14.9085, -203.419, -14.905, 0.44 ) }
    dend_6 { pt3dadd( -14.8995, -203.46, -14.9725, 0.44 ) }
    dend_6 { pt3dadd( -14.9165, -204.008, -15.8038, 0.74 ) }
    dend_6 { pt3dadd( -15.0949, -204.573, -16.5777, 1.11 ) }
    dend_6 { pt3dadd( -15.3636, -206.324, -18.9959, 0.44 ) }
    dend_6 { pt3dadd( -15.3557, -206.973, -19.8753, 0.44 ) }
    dend_6 { pt3dadd( -15.1663, -208.355, -21.6056, 1.84 ) }
    dend_6 { pt3dadd( -15.0171, -208.943, -22.3093, 2.5 ) }
    dend_6 { pt3dadd( -14.9635, -209.107, -22.4969, 2.5 ) }
    dend_6 { pt3dadd( -14.1594, -211.504, -24.9778, 0.59 ) }
    dend_6 { pt3dadd( -13.9054, -212.344, -25.7922, 0.59 ) }
    dend_6 { pt3dadd( -13.6722, -213.079, -26.6089, 0.59 ) }
    dend_6 { pt3dadd( -13.6534, -213.141, -26.6818, 0.59 ) }
    dend_6 { pt3dadd( -13.3356, -214.45, -28.1705, 1.77 ) }
    dend_6 { pt3dadd( -13.2115, -215.272, -29.0507, 2.06 ) }
    dend_6 { pt3dadd( -13.1821, -216.92, -30.6906, 1.99 ) }
    dend_6 { pt3dadd( -13.2229, -219.112, -32.846, 0.81 ) }
    dend_6 { pt3dadd( -13.2227, -219.18, -32.9159, 0.81 ) }
    dend_6 { pt3dadd( -13.2003, -219.968, -33.6763, 0.66 ) }
    dend_6 { pt3dadd( -13.1002, -221.056, -34.6542, 0.52 ) }
    dend_6 { pt3dadd( -13.0173, -221.858, -35.3448, 1.84 ) }
    dend_6 { pt3dadd( -12.9311, -222.911, -36.128, 2.28 ) }
    dend_6 { pt3dadd( -12.6696, -225.497, -37.9497, 0.66 ) }
    dend_6 { pt3dadd( -12.4943, -226.394, -38.5673, 0.66 ) }
    dend_6 { pt3dadd( -12.0616, -227.925, -39.5734, 1.77 ) }
    dend_6 { pt3dadd( -12.0283, -228.017, -39.6271, 1.77 ) }
    dend_6 { pt3dadd( -11.6461, -228.949, -40.0994, 2.21 ) }
    dend_6 { pt3dadd( -11.0908, -230.266, -40.6173, 2.21 ) }
    dend_6 { pt3dadd( -10.3823, -232.031, -41.1499, 0.74 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_5()
}

proc basic_shape_5() {
    dend_6 { pt3dadd( -10.0792, -232.877, -41.3919, 0.37 ) }
    dend_6 { pt3dadd( -9.85937, -233.547, -41.5662, 0.29 ) }
    dend_6 { pt3dadd( -9.48733, -234.691, -41.8493, 1.11 ) }
    dend_6 { pt3dadd( -9.21513, -235.537, -42.064, 1.4 ) }
    dend_6 { pt3dadd( -8.7975, -236.949, -42.3846, 0.59 ) }
    dend_6 { pt3dadd( -8.50265, -237.965, -42.6103, 0.29 ) }
    dend_6 { pt3dadd( -8.18809, -239.066, -42.862, 0.66 ) }
    dend_6 { pt3dadd( -7.99546, -239.746, -43.0409, 0.88 ) }
    dend_6 { pt3dadd( -7.61707, -241.222, -43.451, 0.29 ) }
    dend_6 { pt3dadd( -7.40328, -242.151, -43.7107, 0.29 ) }
    dend_6 { pt3dadd( -7.26085, -242.875, -43.9038, 0.96 ) }
    dend_6 { pt3dadd( -7.13109, -243.645, -44.1054, 0.96 ) }
    dend_6 { pt3dadd( -6.8092, -245.328, -44.5445, 0.29 ) }
    dend_6 { pt3dadd( -6.58091, -246.16, -44.7818, 0.29 ) }
    dend_6 { pt3dadd( -6.19328, -247.014, -45.103, 0.66 ) }
    dend_6 { pt3dadd( -6.14357, -247.087, -45.1693, 0.66 ) }
    dend_6 { pt3dadd( -5.8162, -247.531, -45.6669, 0.66 ) }
    dend_6 { pt3dadd( -5.05355, -248.544, -47.0512, 0.44 ) }
    dend_6 { pt3dadd( -4.47359, -249.356, -48.2524, 1.77 ) }
    dend_6 { pt3dadd( -3.6514, -250.546, -50.1193, 2.58 ) }
    dend_6 { pt3dadd( -1.31387, -254.125, -55.8923, 0.44 ) }
    dend_6 { pt3dadd( -1.08388, -254.51, -56.5079, 0.44 ) }
    dend_6 { pt3dadd( -0.127656, -256.214, -59.3531, 0.88 ) }
    dend_6 { pt3dadd( 0.273921, -257.027, -60.7645, 1.77 ) }
    dend_6 { pt3dadd( 0.29314, -257.073, -60.847, 1.77 ) }
    dend_6 { pt3dadd( 0.373274, -257.374, -61.3382, 2.14 ) }
    dend_6 { pt3dadd( 0.41697, -257.972, -62.0086, 2.43 ) }
    // Section: dend_5, id: dend_5, parent: dend_4 (entry count 27/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( -13.2606, -110.366, -7.28172, 0.59 ) }
    dend_5 { pt3dadd( -12.2965, -111.301, -5.88683, 0.59 ) }
    dend_5 { pt3dadd( -11.0013, -112.231, -4.31781, 0.52 ) }
    dend_5 { pt3dadd( -10.1316, -112.694, -3.47973, 0.52 ) }
    dend_5 { pt3dadd( -8.78015, -113.097, -2.4997, 0.37 ) }
    dend_5 { pt3dadd( -8.51712, -113.145, -2.34137, 0.37 ) }
    dend_5 { pt3dadd( -7.35705, -113.279, -1.70878, 0.37 ) }
    dend_5 { pt3dadd( -6.33429, -113.272, -1.27571, 0.37 ) }
    dend_5 { pt3dadd( -4.98264, -113.106, -0.830633, 0.37 ) }
    dend_5 { pt3dadd( -2.8551, -112.722, -0.241672, 0.22 ) }
    dend_5 { pt3dadd( -2.22488, -112.607, -0.118162, 0.29 ) }
    dend_5 { pt3dadd( -1.01855, -112.382, 0.0921306, 0.37 ) }
    // Section: dend_3, id: dend_3, parent: dend_1 (entry count 39/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 11.4651, -76.8133, -42.6737, 0.37 ) }
    dend_3 { pt3dadd( 11.6668, -77.422, -42.8697, 0.37 ) }
    dend_3 { pt3dadd( 11.9209, -78.2531, -43.0728, 0.29 ) }
    dend_3 { pt3dadd( 12.1611, -79.1176, -43.252, 1.25 ) }
    dend_3 { pt3dadd( 12.2682, -79.5212, -43.3263, 1.69 ) }
    dend_3 { pt3dadd( 12.2827, -79.578, -43.3359, 1.69 ) }
    dend_3 { pt3dadd( 12.5514, -80.6917, -43.5019, 0.29 ) }
    dend_3 { pt3dadd( 12.7329, -81.504, -43.5833, 0.29 ) }
    dend_3 { pt3dadd( 12.9238, -82.3885, -43.6599, 1.77 ) }
    dend_3 { pt3dadd( 13.0181, -82.8659, -43.6894, 2.43 ) }
    dend_3 { pt3dadd( 13.085, -83.2139, -43.7118, 2.43 ) }
    dend_3 { pt3dadd( 13.3474, -84.6289, -43.8066, 0.22 ) }
    dend_3 { pt3dadd( 13.4658, -85.3368, -43.8586, 0.22 ) }
    // Section: dend_2, id: dend_2, parent: dend_1 (entry count 52/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 11.4651, -76.8133, -42.6737, 1.77 ) }
    dend_2 { pt3dadd( 11.0809, -78.281, -46.8004, 1.77 ) }
    dend_2 { pt3dadd( 10.7412, -79.9506, -51.0938, 1.03 ) }
    dend_2 { pt3dadd( 10.2426, -82.9061, -57.948, 2.14 ) }
    dend_2 { pt3dadd( 10.0207, -84.1685, -60.7087, 0.52 ) }
    dend_2 { pt3dadd( 9.92715, -84.6901, -61.8125, 1.92 ) }
    dend_2 { pt3dadd( 9.86813, -85.013, -62.4735, 2.36 ) }
    dend_2 { pt3dadd( 9.42843, -87.95, -67.7439, 0.29 ) }
    dend_2 { pt3dadd( 9.29075, -88.7045, -68.9818, 0.29 ) }
    dend_2 { pt3dadd( 8.88619, -90.4376, -71.4406, 0.29 ) }
    dend_2 { pt3dadd( 8.87276, -90.48, -71.5032, 0.29 ) }
    dend_2 { pt3dadd( 8.76365, -90.7748, -71.9501, 1.69 ) }
    dend_2 { pt3dadd( 8.62079, -91.1664, -72.5362, 1.69 ) }
    dend_2 { pt3dadd( 7.79325, -93.8847, -76.6566, 0.22 ) }
    dend_2 { pt3dadd( 7.70172, -94.2758, -77.2793, 0.22 ) }
    dend_2 { pt3dadd( 7.69778, -94.316, -77.3445, 0.22 ) }
    dend_2 { pt3dadd( 7.68704, -94.8006, -78.1343, 1.03 ) }
    dend_2 { pt3dadd( 7.80107, -96.6567, -81.1109, 0.29 ) }
    dend_2 { pt3dadd( 8.09515, -98.5666, -84.0055, 1.99 ) }
    dend_2 { pt3dadd( 8.17726, -98.8918, -84.4628, 2.14 ) }
    dend_2 { pt3dadd( 8.82852, -101.159, -87.6947, 0.37 ) }
    dend_2 { pt3dadd( 8.95054, -101.537, -88.2365, 0.37 ) }
    dend_2 { pt3dadd( 9.14415, -102.048, -88.945, 0.88 ) }
    dend_2 { pt3dadd( 9.41684, -102.643, -89.6732, 1.03 ) }
    dend_2 { pt3dadd( 10.1493, -104.197, -91.3119, 0.29 ) }
    dend_2 { pt3dadd( 10.1813, -104.269, -91.3829, 0.29 ) }
    dend_2 { pt3dadd( 10.9039, -106.122, -93.1033, 0.29 ) }
    dend_2 { pt3dadd( 11.2006, -107.008, -93.9799, 1.99 ) }
    dend_2 { pt3dadd( 11.2893, -107.297, -94.271, 1.99 ) }
    dend_2 { pt3dadd( 11.9032, -109.47, -96.4033, 0.29 ) }
    dend_2 { pt3dadd( 12.0269, -110.014, -96.9033, 0.59 ) }
    dend_2 { pt3dadd( 12.459, -112.138, -98.7825, 0.44 ) }
    dend_2 { pt3dadd( 12.685, -113.395, -99.8643, 0.29 ) }
    dend_2 { pt3dadd( 12.7703, -113.916, -100.316, 1.11 ) }
    dend_2 { pt3dadd( 12.8496, -114.35, -100.685, 1.33 ) }
    dend_2 { pt3dadd( 13.4847, -117.349, -103.409, 0.22 ) }
    dend_2 { pt3dadd( 13.6208, -117.886, -103.95, 0.52 ) }
    dend_2 { pt3dadd( 14.0865, -119.409, -105.654, 0.29 ) }
    dend_2 { pt3dadd( 14.2327, -119.823, -106.157, 0.88 ) }
    dend_2 { pt3dadd( 14.404, -120.324, -106.897, 0.88 ) }
    dend_2 { pt3dadd( 15.0532, -122.231, -110.024, 0.29 ) }
    dend_2 { pt3dadd( 15.5703, -123.68, -112.595, 0.29 ) }
    dend_2 { pt3dadd( 15.9666, -124.874, -114.783, 1.77 ) }
    dend_2 { pt3dadd( 16.0638, -125.183, -115.367, 1.77 ) }
    dend_2 { pt3dadd( 16.7692, -127.637, -120.052, 0.52 ) }
    dend_2 { pt3dadd( 16.8755, -128.089, -120.889, 0.44 ) }
    dend_2 { pt3dadd( 16.9706, -128.515, -121.626, 0.74 ) }
    dend_2 { pt3dadd( 16.9801, -128.555, -121.69, 0.74 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_6()
}

proc basic_shape_6() {
    dend_2 { pt3dadd( 17.371, -129.978, -123.794, 0.29 ) }
    dend_2 { pt3dadd( 17.3906, -130.032, -123.867, 0.29 ) }
    dend_2 { pt3dadd( 17.8984, -130.95, -124.798, 1.18 ) }
    dend_2 { pt3dadd( 18.1081, -131.289, -125.125, 1.18 ) }
    dend_2 { pt3dadd( 19.0593, -132.741, -126.424, 0.22 ) }
    dend_2 { pt3dadd( 19.0963, -132.794, -126.465, 0.22 ) }
    dend_2 { pt3dadd( 19.9764, -133.948, -127.282, 0.81 ) }
    dend_2 { pt3dadd( 21.0468, -135.212, -128.205, 0.22 ) }
    dend_2 { pt3dadd( 21.5119, -135.698, -128.565, 0.81 ) }
    dend_2 { pt3dadd( 21.5711, -135.75, -128.614, 0.81 ) }
    dend_2 { pt3dadd( 21.8743, -135.958, -128.897, 0.81 ) }
    dend_2 { pt3dadd( 23.1347, -136.607, -130.524, 0.22 ) }
    dend_2 { pt3dadd( 23.4586, -136.738, -131.006, 0.44 ) }
    dend_2 { pt3dadd( 23.5066, -136.755, -131.082, 0.44 ) }
    dend_2 { pt3dadd( 24.9421, -137.255, -133.376, 1.33 ) }
    dend_2 { pt3dadd( 26.229, -137.725, -135.423, 1.33 ) }
    dend_2 { pt3dadd( 28.7507, -138.655, -139.453, 0.29 ) }
    dend_2 { pt3dadd( 28.8122, -138.68, -139.552, 0.29 ) }
    dend_2 { pt3dadd( 29.221, -138.858, -140.225, 0.29 ) }
    dend_2 { pt3dadd( 29.7729, -139.124, -141.064, 1.03 ) }
    dend_2 { pt3dadd( 29.9409, -139.21, -141.291, 1.03 ) }
    dend_2 { pt3dadd( 29.9986, -139.241, -141.356, 1.03 ) }
    dend_2 { pt3dadd( 32.0777, -140.308, -143.299, 0.22 ) }
    dend_2 { pt3dadd( 32.1415, -140.338, -143.359, 0.22 ) }
    dend_2 { pt3dadd( 33.6943, -140.941, -144.851, 0.29 ) }
    dend_2 { pt3dadd( 35.5235, -141.347, -146.721, 0.22 ) }
    dend_2 { pt3dadd( 35.9095, -141.392, -147.137, 0.66 ) }
    dend_2 { pt3dadd( 35.9715, -141.392, -147.204, 0.66 ) }
    dend_2 { pt3dadd( 36.352, -141.356, -147.628, 0.66 ) }
    dend_2 { pt3dadd( 37.4815, -141.186, -148.949, 0.15 ) }
    dend_2 { pt3dadd( 39.6576, -140.621, -151.721, 0.96 ) }
    dend_2 { pt3dadd( 40.8694, -140.229, -153.307, 1.4 ) }
    dend_2 { pt3dadd( 41.3295, -140.074, -153.938, 1.4 ) }
    dend_2 { pt3dadd( 41.5515, -139.998, -154.251, 1.4 ) }
    // Section: dend_19, id: dend_19, parent: dend_17 (entry count 34/100)
    dend_19 { pt3dclear() }
    dend_19 { pt3dadd( -78.3386, 228.588, -42.8989, 0.44 ) }
    dend_19 { pt3dadd( -82.9895, 238.882, -45.57, 0.44 ) }
    // Section: dend_18, id: dend_18, parent: dend_17 (entry count 36/100)
    dend_18 { pt3dclear() }
    dend_18 { pt3dadd( -78.3386, 228.588, -42.8989, 0.44 ) }
    dend_18 { pt3dadd( -81.1602, 236.497, -45.3649, 0.44 ) }
    // Section: dend_14, id: dend_14, parent: dend_12 (entry count 38/100)
    dend_14 { pt3dclear() }
    dend_14 { pt3dadd( 15.7777, 95.5022, -6.79743, 0.29 ) }
    dend_14 { pt3dadd( 16.3133, 96.9941, -7.00668, 0.29 ) }
    dend_14 { pt3dadd( 16.554, 97.6645, -7.1007, 0.29 ) }
    dend_14 { pt3dadd( 16.7556, 98.2259, -7.17944, 1.03 ) }
    dend_14 { pt3dadd( 16.7715, 98.2703, -7.18566, 1.03 ) }
    dend_14 { pt3dadd( 16.8877, 98.5939, -7.23104, 1.4 ) }
    // Section: dend_13, id: dend_13, parent: dend_12 (entry count 44/100)
    dend_13 { pt3dclear() }
    dend_13 { pt3dadd( 15.7777, 95.5022, -6.79743, 0.88 ) }
    dend_13 { pt3dadd( 15.8334, 96.4899, -6.95432, 0.88 ) }
    dend_13 { pt3dadd( 15.9536, 97.2386, -7.104, 0.29 ) }
    dend_13 { pt3dadd( 16.1907, 98.0931, -7.37374, 0.29 ) }
    dend_13 { pt3dadd( 16.3721, 98.6142, -7.55462, 0.44 ) }
    dend_13 { pt3dadd( 16.8845, 99.9526, -8.02764, 1.25 ) }
    dend_13 { pt3dadd( 17.1023, 100.49, -8.2155, 1.99 ) }
    dend_13 { pt3dadd( 17.4759, 101.246, -8.49747, 2.21 ) }
    dend_13 { pt3dadd( 18.3842, 102.882, -9.13414, 0.22 ) }
    dend_13 { pt3dadd( 18.7633, 103.565, -9.42755, 0.22 ) }
    dend_13 { pt3dadd( 18.9552, 103.903, -9.57332, 0.96 ) }
    dend_13 { pt3dadd( 19.1585, 104.283, -9.73246, 1.77 ) }
    dend_13 { pt3dadd( 19.3754, 104.76, -9.92579, 2.21 ) }
    dend_13 { pt3dadd( 19.5508, 105.25, -10.134, 2.21 ) }
    dend_13 { pt3dadd( 20.0871, 107.124, -10.9335, 0.22 ) }
    dend_13 { pt3dadd( 20.2873, 107.917, -11.289, 0.22 ) }
    dend_13 { pt3dadd( 20.5145, 108.845, -11.6972, 1.18 ) }
    dend_13 { pt3dadd( 20.5962, 109.2, -11.8491, 1.33 ) }
    dend_13 { pt3dadd( 20.8147, 110.257, -12.2593, 0.81 ) }
    dend_13 { pt3dadd( 20.984, 111.079, -12.5413, 0.22 ) }
    dend_13 { pt3dadd( 21.1037, 111.607, -12.678, 0.29 ) }
    dend_13 { pt3dadd( 21.3215, 112.533, -12.8949, 0.22 ) }
    dend_13 { pt3dadd( 21.358, 112.651, -12.9257, 0.22 ) }
    dend_13 { pt3dadd( 21.6987, 113.549, -13.2229, 0.22 ) }
    dend_13 { pt3dadd( 22.0993, 114.479, -13.5645, 1.33 ) }
    dend_13 { pt3dadd( 22.2798, 114.891, -13.7701, 1.69 ) }
    dend_13 { pt3dadd( 22.3696, 115.121, -13.8954, 1.69 ) }
    dend_13 { pt3dadd( 22.8681, 116.423, -14.641, 0.29 ) }
    dend_13 { pt3dadd( 23.1739, 117.158, -15.0563, 1.47 ) }
    dend_13 { pt3dadd( 23.2959, 117.423, -15.2049, 1.47 ) }
    dend_13 { pt3dadd( 23.682, 118.211, -15.6431, 0.66 ) }
    dend_13 { pt3dadd( 24.1969, 119.224, -16.1759, 0.29 ) }
    dend_13 { pt3dadd( 24.4463, 119.728, -16.4183, 0.29 ) }
    dend_13 { pt3dadd( 24.7583, 120.371, -16.6697, 0.88 ) }
    dend_13 { pt3dadd( 24.9435, 120.739, -16.8204, 1.25 ) }
    dend_13 { pt3dadd( 25.4218, 121.691, -17.2412, 0.29 ) }
    dend_13 { pt3dadd( 25.6986, 122.264, -17.5005, 0.22 ) }
    dend_13 { pt3dadd( 25.9, 122.783, -17.7719, 0.66 ) }
    dend_13 { pt3dadd( 26.0123, 123.225, -18.0019, 0.81 ) }
    dend_13 { pt3dadd( 26.1238, 124.051, -18.3875, 0.22 ) }
    dend_13 { pt3dadd( 26.1662, 124.564, -18.5981, 0.22 ) }
    dend_13 { pt3dadd( 26.1772, 125.048, -18.8004, 0.74 ) }
    dend_13 { pt3dadd( 26.1507, 125.802, -19.1994, 1.4 ) }
    dend_13 { pt3dadd( 26.0811, 126.867, -19.8214, 0.29 ) }
    dend_13 { pt3dadd( 26.0059, 127.606, -20.3295, 0.81 ) }
    dend_13 { pt3dadd( 25.9755, 127.841, -20.5282, 0.96 ) }
    dend_13 { pt3dadd( 25.7891, 128.902, -21.7195, 0.29 ) }
    dend_13 { pt3dadd( 25.5997, 129.72, -22.77, 0.29 ) }
    dend_13 { pt3dadd( 25.5145, 130.019, -23.1755, 1.33 ) }
    dend_13 { pt3dadd( 25.2699, 130.7, -24.1661, 2.28 ) }
    dend_13 { pt3dadd( 24.9379, 131.506, -25.4032, 2.28 ) }
    dend_13 { pt3dadd( 24.2202, 132.947, -27.8227, 0.81 ) }
    dend_13 { pt3dadd( 24.1168, 133.121, -28.1288, 0.88 ) }
    dend_13 { pt3dadd( 23.8755, 133.467, -28.7585, 0.29 ) }
    dend_13 { pt3dadd( 23.5021, 133.921, -29.6204, 0.37 ) }
    dend_13 { pt3dadd( 23.3437, 134.1, -29.941, 0.37 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_7()
}

proc basic_shape_7() {
    dend_13 { pt3dadd( 22.6951, 134.87, -31.1416, 0.37 ) }
    dend_13 { pt3dadd( 22.4471, 135.217, -31.6039, 0.37 ) }
    dend_13 { pt3dadd( 21.9268, 136.152, -32.7139, 1.55 ) }
    dend_13 { pt3dadd( 21.7386, 136.607, -33.1808, 1.92 ) }
    dend_13 { pt3dadd( 21.3916, 138.06, -34.3179, 0.44 ) }
    dend_13 { pt3dadd( 21.3229, 138.743, -34.7244, 0.29 ) }
    dend_13 { pt3dadd( 21.3298, 139.513, -35.0537, 0.88 ) }
    dend_13 { pt3dadd( 21.3733, 139.924, -35.2023, 0.96 ) }
    dend_13 { pt3dadd( 21.459, 140.363, -35.3243, 0.96 ) }
    dend_13 { pt3dadd( 21.8327, 141.799, -35.6557, 0.37 ) }
    dend_13 { pt3dadd( 22.2039, 142.99, -35.8744, 0.29 ) }
    dend_13 { pt3dadd( 22.4376, 143.691, -36.1194, 0.29 ) }
    dend_13 { pt3dadd( 22.7856, 144.737, -36.603, 1.33 ) }
    dend_13 { pt3dadd( 22.9367, 145.2, -36.8773, 2.14 ) }
    dend_13 { pt3dadd( 23.0441, 145.548, -37.12, 2.36 ) }
    dend_13 { pt3dadd( 23.1146, 145.807, -37.3487, 2.36 ) }
    dend_13 { pt3dadd( 23.6683, 148.06, -39.6872, 0.29 ) }
    dend_13 { pt3dadd( 23.7733, 148.564, -40.2645, 0.88 ) }
    dend_13 { pt3dadd( 23.8522, 149.145, -40.9386, 1.4 ) }
    dend_13 { pt3dadd( 23.8753, 149.479, -41.3183, 1.55 ) }
    dend_13 { pt3dadd( 23.9025, 150.632, -42.5678, 0.37 ) }
    dend_13 { pt3dadd( 23.8992, 151.052, -42.9764, 0.37 ) }
    dend_13 { pt3dadd( 23.8515, 151.975, -43.7312, 1.18 ) }
    dend_13 { pt3dadd( 23.8215, 152.612, -44.2603, 1.47 ) }
    dend_13 { pt3dadd( 23.7484, 153.992, -45.3096, 0.29 ) }
    dend_13 { pt3dadd( 23.7196, 154.371, -45.5632, 0.44 ) }
    dend_13 { pt3dadd( 23.6646, 154.949, -45.878, 0.29 ) }
    dend_13 { pt3dadd( 23.5167, 156.243, -46.5118, 1.77 ) }
    dend_13 { pt3dadd( 23.4387, 156.955, -46.805, 2.06 ) }
    dend_13 { pt3dadd( 23.3777, 157.63, -47.0255, 1.92 ) }
    dend_13 { pt3dadd( 23.2424, 159.112, -47.3147, 0.22 ) }
    dend_13 { pt3dadd( 23.1868, 159.81, -47.4018, 0.22 ) }
    dend_13 { pt3dadd( 23.1818, 159.884, -47.403, 0.22 ) }
    dend_13 { pt3dadd( 23.1796, 160.463, -47.3075, 0.22 ) }
    dend_13 { pt3dadd( 23.2177, 161.377, -47.0778, 0.96 ) }
    dend_13 { pt3dadd( 23.2505, 161.657, -46.9964, 1.33 ) }
    dend_13 { pt3dadd( 23.2982, 161.942, -46.9078, 1.33 ) }
    dend_13 { pt3dadd( 23.4446, 162.772, -46.6625, 0.44 ) }
    dend_13 { pt3dadd( 23.7426, 164.312, -46.2553, 0.22 ) }
    dend_13 { pt3dadd( 23.7575, 164.383, -46.2382, 0.22 ) }
    dend_13 { pt3dadd( 24.0385, 165.519, -45.9165, 0.22 ) }
    dend_13 { pt3dadd( 24.2001, 166.129, -45.7134, 1.03 ) }
    dend_13 { pt3dadd( 24.3062, 166.494, -45.5798, 1.62 ) }
    dend_13 { pt3dadd( 24.4948, 167.069, -45.3489, 1.62 ) }
    dend_13 { pt3dadd( 24.5415, 167.211, -45.2916, 1.62 ) }
    dend_13 { pt3dadd( 25.18, 169.114, -44.5112, 0.22 ) }
    dend_13 { pt3dadd( 25.3233, 169.55, -44.3248, 0.66 ) }
    dend_13 { pt3dadd( 25.473, 170.048, -44.1179, 0.66 ) }
    dend_13 { pt3dadd( 25.5665, 170.46, -43.9692, 0.59 ) }
    dend_13 { pt3dadd( 25.6754, 171.223, -43.754, 0.22 ) }
    dend_13 { pt3dadd( 25.7015, 171.57, -43.6895, 0.66 ) }
    dend_13 { pt3dadd( 25.6893, 171.956, -43.6593, 0.88 ) }
    dend_13 { pt3dadd( 25.645, 172.607, -43.6105, 0.44 ) }
    dend_13 { pt3dadd( 25.5315, 173.66, -43.537, 0.22 ) }
    dend_13 { pt3dadd( 25.4378, 174.421, -43.4876, 0.81 ) }
    dend_13 { pt3dadd( 25.3745, 174.922, -43.4544, 1.18 ) }
    dend_13 { pt3dadd( 25.1964, 176.348, -43.3605, 0.22 ) }
    dend_13 { pt3dadd( 25.1892, 176.413, -43.3628, 0.22 ) }
    dend_13 { pt3dadd( 25.0658, 177.514, -43.4844, 0.22 ) }
    dend_13 { pt3dadd( 25.0082, 178.204, -43.6012, 1.03 ) }
    dend_13 { pt3dadd( 24.987, 178.648, -43.694, 1.33 ) }
    dend_13 { pt3dadd( 24.9827, 179.095, -43.8029, 1.33 ) }
    dend_13 { pt3dadd( 25.125, 181.564, -44.477, 0.22 ) }
    dend_13 { pt3dadd( 25.1298, 181.626, -44.4954, 0.22 ) }
    dend_13 { pt3dadd( 25.2912, 183.01, -44.9592, 0.22 ) }
    dend_13 { pt3dadd( 25.3593, 183.487, -45.1299, 0.59 ) }
    dend_13 { pt3dadd( 25.3702, 183.547, -45.1515, 0.59 ) }
    dend_13 { pt3dadd( 25.5686, 184.375, -45.4109, 0.74 ) }
    // Section: dend_8, id: dend_8, parent: dend_6 (entry count 68/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 0.41697, -257.972, -62.0086, 0.37 ) }
    dend_8 { pt3dadd( 1.80566, -259.244, -61.8233, 0.37 ) }
    dend_8 { pt3dadd( 2.68208, -260.075, -61.7085, 0.29 ) }
    dend_8 { pt3dadd( 3.74914, -261.141, -61.5639, 0.29 ) }
    dend_8 { pt3dadd( 4.49882, -261.944, -61.4576, 0.88 ) }
    dend_8 { pt3dadd( 4.74466, -262.226, -61.4334, 1.11 ) }
    dend_8 { pt3dadd( 4.79754, -262.291, -61.4297, 1.11 ) }
    dend_8 { pt3dadd( 5.05083, -262.685, -61.4319, 1.11 ) }
    dend_8 { pt3dadd( 5.52454, -263.602, -61.5347, 0.29 ) }
    dend_8 { pt3dadd( 5.81376, -264.282, -61.6674, 0.29 ) }
    dend_8 { pt3dadd( 6.11996, -265.09, -61.8465, 0.74 ) }
    dend_8 { pt3dadd( 6.24762, -265.427, -61.9396, 0.88 ) }
    dend_8 { pt3dadd( 6.45243, -265.969, -62.1052, 0.59 ) }
    dend_8 { pt3dadd( 6.89072, -267.129, -62.4848, 0.29 ) }
    dend_8 { pt3dadd( 6.94532, -267.26, -62.5307, 0.29 ) }
    dend_8 { pt3dadd( 7.27169, -267.957, -62.7508, 0.29 ) }
    dend_8 { pt3dadd( 7.66005, -268.728, -62.9444, 1.11 ) }
    dend_8 { pt3dadd( 7.9135, -269.168, -63.0902, 1.4 ) }
    dend_8 { pt3dadd( 8.18246, -269.611, -63.2355, 1.4 ) }
    dend_8 { pt3dadd( 9.06711, -270.991, -63.6514, 0.22 ) }
    dend_8 { pt3dadd( 9.57989, -271.783, -63.905, 0.22 ) }
    dend_8 { pt3dadd( 9.93986, -272.332, -64.0977, 0.81 ) }
    dend_8 { pt3dadd( 10.999, -273.904, -64.6481, 0.81 ) }
    // Section: dend_7, id: dend_7, parent: dend_6 (entry count 91/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 0.41697, -257.972, -62.0086, 0.96 ) }
    dend_7 { pt3dadd( 1.87533, -259.317, -66.3013, 0.96 ) }
    dend_7 { pt3dadd( 4.04865, -261.405, -72.2106, 0.96 ) }
    dend_7 { pt3dadd( 5.14281, -262.483, -75.0589, 0.66 ) }
    dend_7 { pt3dadd( 5.87044, -263.237, -76.8645, 1.4 ) }
    dend_7 { pt3dadd( 6.06885, -263.449, -77.3313, 1.4 ) }
    dend_7 { pt3dadd( 7.76294, -265.289, -81.1519, 0.44 ) }
    dend_7 { pt3dadd( 8.36643, -265.903, -82.2067, 0.37 ) }
    dend_7 { pt3dadd( 8.41683, -265.96, -82.2778, 0.37 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_8()
}

proc basic_shape_8() {
    dend_7 { pt3dadd( 9.8421, -267.621, -84.1309, 0.29 ) }
    dend_7 { pt3dadd( 10.5557, -268.39, -84.9408, 1.47 ) }
    dend_7 { pt3dadd( 10.7129, -268.551, -85.1124, 1.77 ) }
    dend_7 { pt3dadd( 11.248, -269.047, -85.6609, 1.99 ) }
    dend_7 { pt3dadd( 12.2755, -269.912, -86.7533, 1.99 ) }
    dend_7 { pt3dadd( 14.1364, -271.406, -88.6968, 0.44 ) }
    dend_7 { pt3dadd( 15.1652, -272.152, -89.8008, 0.81 ) }
    dend_7 { pt3dadd( 16.5216, -273.008, -91.3932, 0.52 ) }
    dend_7 { pt3dadd( 18.4977, -274.229, -93.7693, 0.44 ) }
    dend_7 { pt3dadd( 19.5292, -274.842, -95.046, 1.11 ) }
    dend_7 { pt3dadd( 20.007, -275.116, -95.6491, 1.11 ) }
    dend_7 { pt3dadd( 22.6219, -276.48, -99.0023, 1.4 ) }
    dend_7 { pt3dadd( 25.5547, -277.856, -102.933, 1.55 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
    ModelViewParmSubset_2 = new SectionList()
    dend_9 ModelViewParmSubset_2.append()
    dend_0 ModelViewParmSubset_2.append()
    dend_15 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_17 ModelViewParmSubset_2.append()
    dend_16 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_19 ModelViewParmSubset_2.append()
    dend_18 ModelViewParmSubset_2.append()
    dend_14 ModelViewParmSubset_2.append()
    dend_13 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[soma_0, dend_9, dend_0, dend_15, dend_10, dend_4, dend_1, dend_17, dend_16, dend_12, dend_11, dend_6, dend_5, dend_3, dend_2, dend_19, dend_18, dend_14, dend_13, dend_8, dend_7]}
    ModelViewParmSubset_3 = new SectionList()
    soma_0 ModelViewParmSubset_3.append()
    dend_9 ModelViewParmSubset_3.append()
    dend_0 ModelViewParmSubset_3.append()
    dend_15 ModelViewParmSubset_3.append()
    dend_10 ModelViewParmSubset_3.append()
    dend_4 ModelViewParmSubset_3.append()
    dend_1 ModelViewParmSubset_3.append()
    dend_17 ModelViewParmSubset_3.append()
    dend_16 ModelViewParmSubset_3.append()
    dend_12 ModelViewParmSubset_3.append()
    dend_11 ModelViewParmSubset_3.append()
    dend_6 ModelViewParmSubset_3.append()
    dend_5 ModelViewParmSubset_3.append()
    dend_3 ModelViewParmSubset_3.append()
    dend_2 ModelViewParmSubset_3.append()
    dend_19 ModelViewParmSubset_3.append()
    dend_18 ModelViewParmSubset_3.append()
    dend_14 ModelViewParmSubset_3.append()
    dend_13 ModelViewParmSubset_3.append()
    dend_8 ModelViewParmSubset_3.append()
    dend_7 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_4 = new SectionList()
    axon_0 ModelViewParmSubset_4.append()
    axon_1 ModelViewParmSubset_4.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_6, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_6 = new SectionList()
    dend_10 OneSecGrp_SectionRef_6.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_4 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_1 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_17]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_17 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_11 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_6 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_17, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_17 = new SectionList()
    dend_2 OneSecGrp_SectionRef_17.append()

    // Group: {name=OneSecGrp_SectionRef_21, groups=[], sections=[dend_13]}
    OneSecGrp_SectionRef_21 = new SectionList()
    dend_13 OneSecGrp_SectionRef_21.append()

    // Group: {name=OneSecGrp_SectionRef_23, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_23 = new SectionList()
    dend_7 OneSecGrp_SectionRef_23.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_9 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_3, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_3 = new SectionList()
    dend_0 OneSecGrp_SectionRef_3.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_15]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_15 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_16]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_16 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_12 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_20, groups=[], sections=[dend_14]}
    OneSecGrp_SectionRef_20 = new SectionList()
    dend_14 OneSecGrp_SectionRef_20.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_3 OneSecGrp_SectionRef_16.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_5 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_19, groups=[], sections=[dend_18]}
    OneSecGrp_SectionRef_19 = new SectionList()
    dend_18 OneSecGrp_SectionRef_19.append()

    // Group: {name=OneSecGrp_SectionRef_18, groups=[], sections=[dend_19]}
    OneSecGrp_SectionRef_18 = new SectionList()
    dend_19 OneSecGrp_SectionRef_18.append()

    // Group: {name=OneSecGrp_SectionRef_22, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_22 = new SectionList()
    dend_8 OneSecGrp_SectionRef_22.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12, dend_13, dend_14, dend_15, dend_16, dend_17, dend_18, dend_19], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()
    dend_13 basal.append()
    dend_14 basal.append()
    dend_15 basal.append()
    dend_16 basal.append()
    dend_17 basal.append()
    dend_18 basal.append()
    dend_19 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_9, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_15, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_17, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_16, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_11, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_6, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_19, dend_18, dend_14, dend_14, dend_14, dend_14, dend_14, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_13, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_8, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_15 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_17 all.append()
    dend_17 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_3()
}

proc subsets_3() {
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_17 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_4()
}

proc subsets_4() {
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_16 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_11 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_5()
}

proc subsets_5() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_6()
}

proc subsets_6() {
    dend_6 all.append()
    dend_6 all.append()
    dend_6 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_7()
}

proc subsets_7() {
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_19 all.append()
    dend_18 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_14 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_8()
}

proc subsets_8() {
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_13 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.0095  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 0.004399  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert KdShu2007
        gmax_KdShu2007 = 4.8299998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 1.0E-5  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -79.315735  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.959764  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.098908  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.0034419997  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.004729  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.317363  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 9.3999995E-5  // units: S cm-2
        e_pas_nml2 = -60.216507  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 9.989999E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.092965  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.019725999  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert KdShu2007
        gmax_KdShu2007 = 4.2499998E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 0.156376  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.297559  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 9.1E-5  // units: S cm-2
        e_pas_nml2 = -62.442795  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 8.0E-6  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.197999  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 1.50000005E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 2.9999999E-6  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.001067  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 3.2E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__dNAC_1_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__dNAC_1_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__dNAC_1_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__dNAC_1_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000052))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_10 nseg = 3
    dend_4 nseg = 3
    dend_1 nseg = 3
    dend_17 nseg = 11
    dend_11 nseg = 5
    dend_6 nseg = 9
    dend_2 nseg = 7
    dend_13 nseg = 5
    dend_7 nseg = 3
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate dNAC222_L4_BTC_7345a3c5cd_0_0


