TITLE Mod file for component: Component(id=Golgi_KA type=ionChannelHH)

COMMENT

    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.3
         org.neuroml.model   v1.5.3
         jLEMS               v0.9.9.0

ENDCOMMENT

NEURON {
    SUFFIX Golgi_KA
    USEION k READ ek WRITE ik VALENCE 1 ? Assuming valence = 1; TODO check this!!
    
    RANGE gion                           
    RANGE gmax                              : Will be changed when ion channel mechanism placed on cell!
    RANGE conductance                       : parameter
    
    RANGE g                                 : exposure
    
    RANGE fopen                             : exposure
    RANGE a_instances                       : parameter
    
    RANGE a_alpha                           : exposure
    
    RANGE a_beta                            : exposure
    
    RANGE a_tau                             : exposure
    
    RANGE a_inf                             : exposure
    
    RANGE a_rateScale                       : exposure
    
    RANGE a_fcond                           : exposure
    RANGE a_forwardRate_rate                : parameter
    RANGE a_forwardRate_midpoint            : parameter
    RANGE a_forwardRate_scale               : parameter
    
    RANGE a_forwardRate_r                   : exposure
    RANGE a_reverseRate_TIME_SCALE          : parameter
    RANGE a_reverseRate_VOLT_SCALE          : parameter
    
    RANGE a_reverseRate_r                   : exposure
    RANGE a_steadyState_rate                : parameter
    RANGE a_steadyState_midpoint            : parameter
    RANGE a_steadyState_scale               : parameter
    
    RANGE a_steadyState_x                   : exposure
    RANGE a_q10Settings_q10Factor           : parameter
    RANGE a_q10Settings_experimentalTemp    : parameter
    RANGE a_q10Settings_TENDEGREES          : parameter
    
    RANGE a_q10Settings_q10                 : exposure
    RANGE b_instances                       : parameter
    
    RANGE b_alpha                           : exposure
    
    RANGE b_beta                            : exposure
    
    RANGE b_tau                             : exposure
    
    RANGE b_inf                             : exposure
    
    RANGE b_rateScale                       : exposure
    
    RANGE b_fcond                           : exposure
    RANGE b_forwardRate_rate                : parameter
    RANGE b_forwardRate_midpoint            : parameter
    RANGE b_forwardRate_scale               : parameter
    
    RANGE b_forwardRate_r                   : exposure
    RANGE b_reverseRate_rate                : parameter
    RANGE b_reverseRate_midpoint            : parameter
    RANGE b_reverseRate_scale               : parameter
    
    RANGE b_reverseRate_r                   : exposure
    RANGE b_steadyState_rate                : parameter
    RANGE b_steadyState_midpoint            : parameter
    RANGE b_steadyState_scale               : parameter
    
    RANGE b_steadyState_x                   : exposure
    RANGE b_q10Settings_q10Factor           : parameter
    RANGE b_q10Settings_experimentalTemp    : parameter
    RANGE b_q10Settings_TENDEGREES          : parameter
    
    RANGE b_q10Settings_q10                 : exposure
    RANGE a_reverseRate_V                   : derived variable
    RANGE conductanceScale                  : derived variable
    RANGE fopen0                            : derived variable
    
}

UNITS {
    
    (nA) = (nanoamp)
    (uA) = (microamp)
    (mA) = (milliamp)
    (A) = (amp)
    (mV) = (millivolt)
    (mS) = (millisiemens)
    (uS) = (microsiemens)
    (molar) = (1/liter)
    (kHz) = (kilohertz)
    (mM) = (millimolar)
    (um) = (micrometer)
    (umol) = (micromole)
    (S) = (siemens)
    
}

PARAMETER {
    
    gmax = 0  (S/cm2)                       : Will be changed when ion channel mechanism placed on cell!
    
    conductance = 1.0E-5 (uS)
    a_instances = 3 
    a_forwardRate_rate = 0.81470007 (kHz)
    a_forwardRate_midpoint = -9.17203 (mV)
    a_forwardRate_scale = 23.32708 (mV)
    a_reverseRate_TIME_SCALE = 1 (ms)
    a_reverseRate_VOLT_SCALE = 1 (mV)
    a_steadyState_rate = 1 
    a_steadyState_midpoint = -38 (mV)
    a_steadyState_scale = 17 (mV)
    a_q10Settings_q10Factor = 3 
    a_q10Settings_experimentalTemp = 298.65 (K)
    a_q10Settings_TENDEGREES = 10 (K)
    b_instances = 1 
    b_forwardRate_rate = 0.0368 (kHz)
    b_forwardRate_midpoint = -111.33209 (mV)
    b_forwardRate_scale = -12.8433 (mV)
    b_reverseRate_rate = 0.034500003 (kHz)
    b_reverseRate_midpoint = -49.953 (mV)
    b_reverseRate_scale = 8.90123 (mV)
    b_steadyState_rate = 1 
    b_steadyState_midpoint = -78.8 (mV)
    b_steadyState_scale = -8.4 (mV)
    b_q10Settings_q10Factor = 3 
    b_q10Settings_experimentalTemp = 298.65 (K)
    b_q10Settings_TENDEGREES = 10 (K)
}

ASSIGNED {
    
    gion   (S/cm2)                          : Transient conductance density of the channel? Standard Assigned variables with ionChannel
    v (mV)
    celsius (degC)
    temperature (K)
    ek (mV)
    ik (mA/cm2)
    
    
    a_forwardRate_r (kHz)                  : derived variable
    
    a_reverseRate_V                        : derived variable
    
    a_reverseRate_r (kHz)                  : derived variable
    
    a_steadyState_x                        : derived variable
    
    a_q10Settings_q10                      : derived variable
    
    a_rateScale                            : derived variable
    
    a_alpha (kHz)                          : derived variable
    
    a_beta (kHz)                           : derived variable
    
    a_fcond                                : derived variable
    
    a_inf                                  : derived variable
    
    a_tau (ms)                             : derived variable
    
    b_forwardRate_r (kHz)                  : derived variable
    
    b_reverseRate_r (kHz)                  : derived variable
    
    b_steadyState_x                        : derived variable
    
    b_q10Settings_q10                      : derived variable
    
    b_rateScale                            : derived variable
    
    b_alpha (kHz)                          : derived variable
    
    b_beta (kHz)                           : derived variable
    
    b_fcond                                : derived variable
    
    b_inf                                  : derived variable
    
    b_tau (ms)                             : derived variable
    
    conductanceScale                       : derived variable
    
    fopen0                                 : derived variable
    
    fopen                                  : derived variable
    
    g (uS)                                 : derived variable
    rate_a_q (/ms)
    rate_b_q (/ms)
    
}

STATE {
    a_q  
    b_q  
    
}

INITIAL {
    temperature = celsius + 273.15
    
    rates()
    rates() ? To ensure correct initialisation.
    
    a_q = a_inf
    
    b_q = b_inf
    
}

BREAKPOINT {
    
    SOLVE states METHOD cnexp
    
    ? DerivedVariable is based on path: conductanceScaling[*]/factor, on: Component(id=Golgi_KA type=ionChannelHH), from conductanceScaling; null
    ? Path not present in component, using factor: 1
    
    conductanceScale = 1 
    
    ? DerivedVariable is based on path: gates[*]/fcond, on: Component(id=Golgi_KA type=ionChannelHH), from gates; Component(id=a type=gateHHratesInf)
    ? multiply applied to all instances of fcond in: <gates> ([Component(id=a type=gateHHratesInf), Component(id=b type=gateHHratesInf)]))
    fopen0 = a_fcond * b_fcond ? path based, prefix = 
    
    fopen = conductanceScale  *  fopen0 ? evaluable
    g = conductance  *  fopen ? evaluable
    gion = gmax * fopen 
    
    ik = gion * (v - ek)
    
}

DERIVATIVE states {
    rates()
    a_q' = rate_a_q 
    b_q' = rate_b_q 
    
}

PROCEDURE rates() {
    
    a_forwardRate_r = a_forwardRate_rate  / (1 + exp(0 - (v -  a_forwardRate_midpoint )/ a_forwardRate_scale )) ? evaluable
    a_reverseRate_V = v /  a_reverseRate_VOLT_SCALE ? evaluable
    a_reverseRate_r = (0.1655 /( exp (( a_reverseRate_V  + 18.27914)/19.47175 ))) /  a_reverseRate_TIME_SCALE ? evaluable
    a_steadyState_x = a_steadyState_rate  / (1 + exp(0 - (v -  a_steadyState_midpoint )/ a_steadyState_scale )) ? evaluable
    a_q10Settings_q10 = a_q10Settings_q10Factor ^((temperature -  a_q10Settings_experimentalTemp )/ a_q10Settings_TENDEGREES ) ? evaluable
    ? DerivedVariable is based on path: q10Settings[*]/q10, on: Component(id=a type=gateHHratesInf), from q10Settings; Component(id=null type=q10ExpTemp)
    ? multiply applied to all instances of q10 in: <q10Settings> ([Component(id=null type=q10ExpTemp)]))
    a_rateScale = a_q10Settings_q10 ? path based, prefix = a_
    
    ? DerivedVariable is based on path: forwardRate/r, on: Component(id=a type=gateHHratesInf), from forwardRate; Component(id=null type=HHSigmoidRate)
    a_alpha = a_forwardRate_r ? path based, prefix = a_
    
    ? DerivedVariable is based on path: reverseRate/r, on: Component(id=a type=gateHHratesInf), from reverseRate; Component(id=null type=Golgi_KA_a_beta_rate)
    a_beta = a_reverseRate_r ? path based, prefix = a_
    
    a_fcond = a_q ^ a_instances ? evaluable
    ? DerivedVariable is based on path: steadyState/x, on: Component(id=a type=gateHHratesInf), from steadyState; Component(id=null type=HHSigmoidVariable)
    a_inf = a_steadyState_x ? path based, prefix = a_
    
    a_tau = 1/(( a_alpha + a_beta ) *  a_rateScale ) ? evaluable
    b_forwardRate_r = b_forwardRate_rate  / (1 + exp(0 - (v -  b_forwardRate_midpoint )/ b_forwardRate_scale )) ? evaluable
    b_reverseRate_r = b_reverseRate_rate  / (1 + exp(0 - (v -  b_reverseRate_midpoint )/ b_reverseRate_scale )) ? evaluable
    b_steadyState_x = b_steadyState_rate  / (1 + exp(0 - (v -  b_steadyState_midpoint )/ b_steadyState_scale )) ? evaluable
    b_q10Settings_q10 = b_q10Settings_q10Factor ^((temperature -  b_q10Settings_experimentalTemp )/ b_q10Settings_TENDEGREES ) ? evaluable
    ? DerivedVariable is based on path: q10Settings[*]/q10, on: Component(id=b type=gateHHratesInf), from q10Settings; Component(id=null type=q10ExpTemp)
    ? multiply applied to all instances of q10 in: <q10Settings> ([Component(id=null type=q10ExpTemp)]))
    b_rateScale = b_q10Settings_q10 ? path based, prefix = b_
    
    ? DerivedVariable is based on path: forwardRate/r, on: Component(id=b type=gateHHratesInf), from forwardRate; Component(id=null type=HHSigmoidRate)
    b_alpha = b_forwardRate_r ? path based, prefix = b_
    
    ? DerivedVariable is based on path: reverseRate/r, on: Component(id=b type=gateHHratesInf), from reverseRate; Component(id=null type=HHSigmoidRate)
    b_beta = b_reverseRate_r ? path based, prefix = b_
    
    b_fcond = b_q ^ b_instances ? evaluable
    ? DerivedVariable is based on path: steadyState/x, on: Component(id=b type=gateHHratesInf), from steadyState; Component(id=null type=HHSigmoidVariable)
    b_inf = b_steadyState_x ? path based, prefix = b_
    
    b_tau = 1/(( b_alpha + b_beta ) *  b_rateScale ) ? evaluable
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    rate_a_q = ( a_inf  -  a_q ) /  a_tau ? Note units of all quantities used here need to be consistent!
    
     
    
     
    
     
    
     
    
     
    rate_b_q = ( b_inf  -  b_q ) /  b_tau ? Note units of all quantities used here need to be consistent!
    
     
    
     
    
     
    
     
    
     
    
}

