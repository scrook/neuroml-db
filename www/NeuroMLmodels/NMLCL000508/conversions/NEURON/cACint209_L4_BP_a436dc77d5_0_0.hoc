// Cell: cACint209_L4_BP_a436dc77d5_0_0
/*
{
  "id" : "cACint209_L4_BP_a436dc77d5_0_0",
  "sections" : [ {
    "name" : "soma_0",
    "id" : "soma_0",
    "points3d" : [ "-3.08452, 6.27464, 0.312461, 1.46623", "-2.79927, 5.64032, 0.287115, 2.64844", "-2.51401, 5.00599, 0.26177, 4.10361", "-2.22875, 4.37167, 0.236425, 4.91598", "-1.94349, 3.73735, 0.21108, 5.72835", "-1.65823, 3.10303, 0.185734, 6.53421", "-1.37297, 2.46871, 0.160389, 7.31212", "-1.08771, 1.83438, 0.135044, 8.08989", "-0.802456, 1.20006, 0.109699, 8.85679", "-0.517198, 0.56574, 0.0843534, 8.93483", "-0.23194, -0.0685822, 0.0590082, 8.92633", "0.0533189, -0.702904, 0.033663, 8.91784", "0.338577, -1.33723, 0.00831775, 8.90934", "0.623836, -1.97155, -0.0170275, 8.90084", "0.909094, -2.60587, -0.0423727, 8.82493", "1.19435, -3.24019, -0.067718, 7.82232", "1.47961, -3.87451, -0.0930632, 6.5965", "1.76487, -4.50884, -0.118408, 5.37067", "2.05013, -5.14316, -0.143754, 4.14485", "2.33539, -5.77748, -0.169099, 2.91903", "2.62064, -6.4118, -0.194444, 1.76337" ]
  }, {
    "name" : "dend_0",
    "id" : "dend_0",
    "points3d" : [ "1.61629, -5.55298, -1.26548, 1.33", "2.22529, -8.06729, -1.75378, 1.33", "3.23499, -12.2359, -2.56336, 0.66", "4.01674, -15.4635, -3.19017, 0.66", "4.84975, -18.9027, -3.85809, 1.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 0.4500001318721313
  }, {
    "name" : "axon_0",
    "id" : "axon_0",
    "points3d" : [ "2.62064, -6.4118, -0.194444, 0.33", "8.77276, -20.0921, -0.194444, 0.33", "14.9249, -33.7725, -0.194444, 0.33" ],
    "parent" : "soma_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_2",
    "id" : "dend_2",
    "points3d" : [ "4.84975, -18.9027, -3.85809, 0.66", "4.76211, -26.3739, -2.20966, 0.66", "4.61891, -37.4715, 0.252087, 0.66", "4.42623, -51.0215, 3.3653, 0.66", "4.32168, -61.4804, 5.78716, 0.66", "4.26966, -67.5491, 7.18838, 0.66", "4.24533, -69.5628, 7.64838, 0.66", "4.21953, -72.2952, 8.2939, 0.66", "4.14824, -74.8505, 8.9109, 0.66", "4.07138, -77.7972, 9.56735, 0.66", "4.06164, -79.3832, 9.71966, 0.66", "4.04844, -81.3569, 9.7217, 0.66", "4.09691, -84.3232, 9.37557, 0.66", "4.1592, -88.2162, 8.72462, 0.66", "4.22245, -89.9124, 8.43018, 0.66", "4.59341, -97.8746, 6.98007, 0.66", "4.73175, -99.7544, 6.61181, 0.66", "5.28765, -105.556, 5.33905, 0.66", "5.55301, -108.005, 4.78392, 0.66", "6.11441, -112.509, 3.83484, 0.66", "6.41928, -115.094, 3.46727, 0.66", "6.68871, -117.618, 3.37262, 0.66", "6.93929, -120.057, 3.3707, 0.66", "7.08716, -122.406, 3.36322, 0.66", "7.2166, -124.891, 3.25025, 0.66", "7.28397, -128.724, 3.00065, 0.66", "7.33544, -131.059, 2.96445, 0.66", "7.35183, -133.89, 2.95705, 0.66", "7.36331, -137.723, 2.92631, 0.66", "7.36137, -140.166, 2.78674, 0.66", "7.39894, -143.448, 2.4526, 0.66", "7.53894, -146.54, 2.12205, 0.66" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 7
  }, {
    "name" : "dend_1",
    "id" : "dend_1",
    "points3d" : [ "4.84975, -18.9027, -3.85809, 0.66", "8.40542, -21.5284, -4.5611, 0.66", "16.5797, -27.5647, -6.17727, 0.33", "35.2908, -41.3822, -9.87676, 0.33", "35.9968, -41.9035, -10.0164, 0.66", "43.5476, -47.4795, -11.5093, 0.33" ],
    "parent" : "dend_0",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "axon_1",
    "id" : "axon_1",
    "points3d" : [ "14.9249, -33.7725, -0.194444, 0.33", "21.077, -47.4528, -0.194444, 0.33", "27.2291, -61.1331, -0.194444, 0.33" ],
    "parent" : "axon_0",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_12",
    "id" : "dend_12",
    "points3d" : [ "7.53894, -146.54, 2.12205, 0.66", "11.015, -150.368, 3.3536, 0.66", "12.9179, -152.552, 4.39114, 0.66", "15.8245, -155.942, 7.02003, 0.66", "17.6345, -157.975, 8.92035, 0.66", "21.0458, -161.721, 12.8604, 0.66", "23.6723, -164.452, 15.8782, 0.66", "26.1783, -166.954, 19.0611, 0.66", "31.6337, -171.81, 25.8707, 0.66", "34.7719, -174.355, 29.7194, 0.66", "38.4269, -177.302, 34.2931, 0.33", "39.9194, -178.458, 36.0423, 0.33", "40.4609, -178.825, 36.6133, 0.66", "43.8057, -180.77, 39.7596, 0.33", "44.5755, -181.136, 40.1909, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_3",
    "id" : "dend_3",
    "points3d" : [ "7.53894, -146.54, 2.12205, 0.66", "7.70734, -148.783, 2.81558, 0.66", "7.91799, -151.682, 3.72612, 0.66", "8.44021, -157.479, 5.47445, 0.66", "8.6469, -160.004, 6.20363, 0.66", "8.94477, -163.079, 7.12261, 0.66", "9.23101, -166.201, 7.96015, 0.66", "9.39588, -167.954, 8.37313, 0.66", "9.55219, -170.376, 8.83083, 0.66", "9.83387, -175.03, 9.52616, 0.66", "10.0078, -177.672, 9.79655, 0.66", "10.1902, -180.769, 10.0589, 0.66", "10.2948, -183.386, 10.1032, 0.66", "10.3148, -184.803, 10.1066, 0.66", "10.3053, -189.563, 10.0343, 0.66", "10.2983, -192.025, 9.91791, 0.66", "10.2307, -195.434, 9.71937, 0.66", "10.2338, -198.17, 9.68098, 0.66", "10.2371, -199.383, 9.65008, 0.66" ],
    "parent" : "dend_2",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 3
  }, {
    "name" : "dend_5",
    "id" : "dend_5",
    "points3d" : [ "10.2371, -199.383, 9.65008, 0.66", "10.6075, -202.42, 9.83085, 0.66", "10.9899, -207.357, 10.6576, 0.66", "11.3283, -212.625, 11.7148, 0.66", "11.459, -216.08, 12.4382, 0.66", "11.6025, -220.854, 13.3307, 0.66", "11.7058, -229.291, 14.6452, 0.66", "11.6131, -235.058, 15.4462, 0.66", "11.4806, -239.014, 16.0437, 0.66", "11.3733, -243.151, 16.5573, 0.66", "11.2921, -247.792, 17.0794, 0.66", "11.2723, -250.967, 17.3995, 0.66", "11.3567, -255.326, 17.7099, 0.66", "11.5242, -259.337, 17.966, 0.66", "11.9474, -268.772, 18.7927, 0.66", "12.1891, -272.524, 19.1832, 0.66", "12.6921, -281.942, 20.0958, 0.66", "12.8489, -285.736, 20.3287, 0.66", "12.9354, -289.389, 20.4183, 0.66", "12.9748, -292.672, 20.3614, 0.66", "12.9593, -298.045, 20.2029, 0.66", "12.8751, -302.64, 20.0196, 0.66", "12.6395, -311.468, 19.3512, 0.66", "12.6249, -315.928, 19.0189, 0.66", "12.6376, -319.401, 18.7789, 0.66", "12.7054, -324.075, 18.4863, 0.66", "12.9875, -341.661, 17.3438, 0.66", "13.1781, -348.121, 16.8056, 0.66", "13.744, -365.078, 15.1491, 0.66", "13.9778, -371.485, 14.4381, 0.66", "14.2418, -377.79, 13.7858, 0.66", "14.4671, -382.176, 13.3603, 0.66", "14.8472, -388.181, 12.7413, 0.66", "15.1362, -394.859, 12.0832, 0.66", "15.3723, -402.132, 11.0928, 0.66", "15.4765, -406.196, 10.5488, 0.66", "15.5576, -409.03, 10.2562, 0.66", "15.8673, -420.036, 9.7573, 0.66", "15.9608, -423.467, 9.61201, 0.66", "16.0347, -429.091, 9.12055, 0.66", "16.1173, -434.713, 8.53653, 0.66", "16.2617, -439.071, 8.1227, 0.66", "16.7406, -449.751, 7.55193, 0.66", "17.4654, -462.025, 7.21707, 0.66", "18.0157, -470.38, 6.94483, 0.66", "18.2778, -474.578, 6.72616, 0.66", "19.26, -489.931, 5.61946, 0.66", "19.7326, -499.772, 4.52717, 0.66", "19.8696, -502.645, 4.14706, 0.66", "20.1088, -507.302, 3.41826, 0.66", "20.45, -514.123, 2.13543, 0.66", "20.5266, -517.066, 1.47078, 0.66", "20.5823, -524.937, -0.649736, 0.66", "20.7691, -541.345, -5.34965, 0.66", "20.9371, -549.819, -7.49437, 0.66", "21.0471, -552.986, -8.17995, 0.33", "21.1582, -555.104, -8.55722, 1.33", "21.5971, -560.139, -9.14294, 0.66", "22.413, -566.227, -9.46902, 0.66", "23.1082, -570.554, -9.56236, 0.66", "23.8869, -574.939, -9.51632, 0.66", "24.6155, -578.528, -9.50075, 0.66", "27.6936, -593.284, -9.0368, 0.66", "28.1163, -595.367, -8.9153, 0.33", "28.6597, -598.341, -8.74603, 1.33", "29.1813, -601.291, -8.64593, 0.66", "29.5584, -603.608, -8.57554, 0.33", "30.5253, -610.006, -8.34263, 0.66", "30.771, -613.315, -7.87248, 0.66", "30.9966, -617.69, -7.02856, 0.33" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 21
  }, {
    "name" : "dend_4",
    "id" : "dend_4",
    "points3d" : [ "10.2371, -199.383, 9.65008, 0.66", "7.53153, -206.092, 9.34699, 0.66", "5.30405, -211.787, 9.01378, 0.66", "3.77122, -216.074, 9.06033, 0.33", "1.67148, -222.113, 9.36677, 0.33", "1.32778, -223.1, 9.46915, 0.66", "0.275047, -226.309, 9.88522, 0.33", "-0.436921, -228.653, 10.3316, 0.66", "-1.93668, -234.21, 11.226, 0.33", "-2.15619, -235.09, 11.3944, 0.66", "-3.65121, -241.046, 12.5165, 0.33", "-4.27746, -244.138, 13.2122, 0.33", "-4.80233, -247.505, 14.0566, 0.66", "-5.32695, -251.542, 15.1803, 0.33", "-5.53674, -253.723, 15.7466, 0.33", "-5.57212, -254.95, 16.1299, 0.66", "-5.27287, -260.132, 18.5193, 0.33", "-5.22082, -260.889, 18.9735, 0.66", "-5.00595, -262.804, 20.3143, 0.33", "-4.91424, -263.788, 21.0246, 0.33", "-4.85411, -264.828, 21.6651, 0.66", "-4.82274, -268.713, 23.6361, 0.33", "-4.99958, -271.078, 24.4376, 0.33", "-5.0545, -271.971, 24.6773, 0.66", "-5.11601, -273.703, 24.9862, 0.33", "-5.15974, -274.619, 25.0849, 0.66", "-5.22491, -275.782, 25.1385, 0.33", "-5.30289, -276.984, 25.1034, 0.66", "-5.44693, -278.747, 25.086, 0.33", "-5.51256, -279.39, 25.0939, 0.66", "-6.14532, -284.714, 25.2899, 0.33", "-6.19358, -285.054, 25.3042, 0.66", "-6.41025, -286.277, 25.3644, 0.33", "-6.54159, -286.914, 25.3991, 0.66", "-6.83837, -288.653, 25.6724, 0.33", "-6.9471, -289.451, 25.8528, 0.66", "-7.08277, -290.882, 26.2448, 0.33", "-7.16112, -291.895, 26.5364, 0.66", "-7.21336, -293.057, 26.9014, 0.33", "-7.3554, -298.47, 28.782, 0.33", "-7.35993, -300.053, 29.4121, 0.66" ],
    "parent" : "dend_3",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_7",
    "id" : "dend_7",
    "points3d" : [ "30.9966, -617.69, -7.02856, 0.66", "31.3654, -620.937, -7.88082, 0.66", "31.6608, -622.631, -7.92303, 1.33", "31.9222, -624.09, -7.82775, 0.66", "32.2002, -625.922, -7.75003, 0.66", "32.8316, -629.876, -7.38998, 0.33", "33.6629, -634.662, -6.84029, 0.66", "34.8134, -640.853, -5.73491, 0.66", "35.4606, -643.938, -5.07774, 0.66", "36.239, -647.376, -4.44358, 0.33", "37.2304, -651.77, -3.81789, 0.33", "37.4748, -653.009, -3.72798, 0.66", "37.684, -654.031, -3.85715, 0.33", "37.8299, -654.912, -4.10929, 0.66", "38.6673, -660.043, -5.82971, 0.33", "39.0428, -662.185, -6.55567, 0.66", "39.359, -664.214, -7.31475, 0.33", "40.1832, -669.983, -9.18521, 0.33", "40.7076, -673.367, -10.1402, 0.66", "41.7127, -679.503, -11.6242, 0.33", "42.1915, -682.401, -12.1638, 0.66", "42.684, -685.264, -12.6263, 1.33", "43.8555, -691.809, -13.4106, 0.33", "44.4284, -695.054, -13.579, 0.33", "44.6536, -696.332, -13.6111, 0.66", "45.1782, -699.555, -13.5577, 0.33", "45.8366, -703.88, -13.3988, 0.33", "46.0972, -705.461, -13.2916, 1.33", "46.8202, -710.003, -12.9813, 0.33", "47.0044, -711.576, -12.8426, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0,
    "numberInternalDivisions" : 5
  }, {
    "name" : "dend_6",
    "id" : "dend_6",
    "points3d" : [ "30.9966, -617.69, -7.02856, 0.66", "28.8642, -619.636, -8.47894, 0.66" ],
    "parent" : "dend_5",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_11",
    "id" : "dend_11",
    "points3d" : [ "47.0044, -711.576, -12.8426, 0.66", "44.904, -711.23, -12.4991, 0.66" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_8",
    "id" : "dend_8",
    "points3d" : [ "47.0044, -711.576, -12.8426, 0.66", "47.1763, -713.039, -13.0841, 0.66", "47.9415, -719.554, -14.1593, 0.33", "48.185, -721.626, -14.5013, 1.33" ],
    "parent" : "dend_7",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_10",
    "id" : "dend_10",
    "points3d" : [ "48.185, -721.626, -14.5013, 0.33", "52.375, -730.695, -8.55714, 0.33", "52.7841, -731.575, -8.04666, 1.33", "53.975, -734.032, -6.75961, 0.33", "54.2366, -734.54, -6.55804, 0.66", "55.5579, -736.957, -5.84164, 0.33", "55.9588, -737.691, -5.62421, 0.66", "56.3282, -738.349, -5.75063, 0.33", "56.8501, -739.169, -5.94485, 0.66", "58.8223, -741.726, -6.77847, 0.33", "59.6157, -742.65, -7.14487, 1.33" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  }, {
    "name" : "dend_9",
    "id" : "dend_9",
    "points3d" : [ "48.185, -721.626, -14.5013, 0.33", "48.7838, -737.96, -9.62611, 0.33", "49.1104, -746.868, -6.96726, 0.33", "49.1617, -748.268, -6.54938, 0.66", "49.4988, -757.462, -3.80514, 0.33", "49.5437, -758.688, -3.43933, 0.66" ],
    "parent" : "dend_8",
    "fractionAlong" : 1.0
  } ],
  "groups" : [ {
    "name" : "ModelViewParmSubset_1",
    "groups" : [ ],
    "sections" : [ "soma_0", "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_2",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_3",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "ModelViewParmSubset_4",
    "groups" : [ ],
    "sections" : [ "soma_0", "dend_0", "dend_2", "dend_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "ModelViewParmSubset_5",
    "groups" : [ ],
    "sections" : [ "dend_0", "axon_0", "dend_2", "dend_1", "axon_1", "dend_12", "dend_3", "dend_5", "dend_4", "dend_7", "dend_6", "dend_11", "dend_8", "dend_10", "dend_9" ]
  }, {
    "name" : "OneSecGrp_SectionRef_1",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_4",
    "groups" : [ ],
    "sections" : [ "dend_2" ]
  }, {
    "name" : "OneSecGrp_SectionRef_5",
    "groups" : [ ],
    "sections" : [ "dend_1" ]
  }, {
    "name" : "OneSecGrp_SectionRef_7",
    "groups" : [ ],
    "sections" : [ "dend_12" ]
  }, {
    "name" : "OneSecGrp_SectionRef_8",
    "groups" : [ ],
    "sections" : [ "dend_3" ]
  }, {
    "name" : "OneSecGrp_SectionRef_9",
    "groups" : [ ],
    "sections" : [ "dend_5" ]
  }, {
    "name" : "OneSecGrp_SectionRef_10",
    "groups" : [ ],
    "sections" : [ "dend_4" ]
  }, {
    "name" : "OneSecGrp_SectionRef_11",
    "groups" : [ ],
    "sections" : [ "dend_7" ]
  }, {
    "name" : "OneSecGrp_SectionRef_2",
    "groups" : [ ],
    "sections" : [ "dend_0" ]
  }, {
    "name" : "OneSecGrp_SectionRef_12",
    "groups" : [ ],
    "sections" : [ "dend_6" ]
  }, {
    "name" : "OneSecGrp_SectionRef_13",
    "groups" : [ ],
    "sections" : [ "dend_11" ]
  }, {
    "name" : "OneSecGrp_SectionRef_14",
    "groups" : [ ],
    "sections" : [ "dend_8" ]
  }, {
    "name" : "OneSecGrp_SectionRef_15",
    "groups" : [ ],
    "sections" : [ "dend_10" ]
  }, {
    "name" : "OneSecGrp_SectionRef_16",
    "groups" : [ ],
    "sections" : [ "dend_9" ]
  }, {
    "name" : "basal",
    "groups" : [ ],
    "sections" : [ "dend_0", "dend_1", "dend_2", "dend_3", "dend_4", "dend_5", "dend_6", "dend_7", "dend_8", "dend_9", "dend_10", "dend_11", "dend_12" ],
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_basal",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "apical",
    "inhomogeneousParameters" : [ {
      "id" : "PathLengthOver_apical",
      "variable" : "p",
      "metric" : "Path Length from root",
      "proximalTranslationStart" : "0.0"
    } ]
  }, {
    "name" : "axonal",
    "groups" : [ ],
    "sections" : [ "axon_0", "axon_1" ]
  }, {
    "name" : "somatic",
    "groups" : [ ],
    "sections" : [ "soma_0" ]
  }, {
    "name" : "all",
    "sections" : [ "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "soma_0", "dend_0", "dend_0", "dend_0", "dend_0", "axon_0", "axon_0", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_2", "dend_1", "dend_1", "dend_1", "dend_1", "dend_1", "axon_1", "axon_1", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_12", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_3", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_5", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_4", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_7", "dend_6", "dend_11", "dend_8", "dend_8", "dend_8", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_10", "dend_9", "dend_9", "dend_9", "dend_9", "dend_9" ]
  } ],
  "specificCapacitance" : [ {
    "group" : "basal",
    "value" : "1.0"
  }, {
    "group" : "apical",
    "value" : "1.0"
  }, {
    "group" : "axonal",
    "value" : "1.0"
  }, {
    "group" : "somatic",
    "value" : "1.0"
  } ],
  "initMembPotential" : [ {
    "group" : "all",
    "value" : "-80.0"
  } ],
  "resistivity" : [ {
    "group" : "all",
    "value" : "100.0"
  } ],
  "channelDensity" : [ {
    "id" : "basal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "basal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "basal_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "basal",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "basal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "basal",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "basal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "basal",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "0.007375",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "4.1E-5",
    "erev" : "-85.0"
  }, {
    "id" : "apical_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "apical_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "apical",
    "condDens" : "0.001373",
    "erev" : "50.0"
  }, {
    "id" : "apical_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "apical",
    "condDens" : "1.0E-6",
    "erev" : "-63.118496"
  }, {
    "id" : "apical_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "apical",
    "condDens" : "1.3999999E-5",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNaTa_tbar_NaTa_t",
    "ionChannel" : "NaTa_t",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "3.993125",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "axonal",
    "condDens" : "0.0",
    "erev" : "50.0"
  }, {
    "id" : "axonal_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.005611",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.068459995",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "0.517764",
    "erev" : "-85.0"
  }, {
    "id" : "axonal_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "axonal",
    "condDens" : "6.3E-5",
    "erev" : "-64.6017"
  }, {
    "id" : "axonal_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "axonal",
    "condDens" : "3.45E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Tstbar_K_Tst",
    "ionChannel" : "K_Tst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.077616",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNap_Et2bar_Nap_Et2",
    "ionChannel" : "Nap_Et2",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "1.0E-6",
    "erev" : "50.0"
  }, {
    "id" : "somatic_gSK_E2bar_SK_E2",
    "ionChannel" : "SK_E2",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.002099",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gK_Pstbar_K_Pst",
    "ionChannel" : "K_Pst",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "1.13999995E-4",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gSKv3_1bar_SKv3_1",
    "ionChannel" : "SKv3_1",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "0.26087198",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_g_pas",
    "ionChannel" : "pas_nml2",
    "ion" : "non_specific",
    "group" : "somatic",
    "condDens" : "2.0E-5",
    "erev" : "-69.78141"
  }, {
    "id" : "somatic_gImbar_Im",
    "ionChannel" : "Im",
    "ion" : "k",
    "group" : "somatic",
    "condDens" : "3.2E-5",
    "erev" : "-85.0"
  }, {
    "id" : "somatic_gNaTs2_tbar_NaTs2_t",
    "ionChannel" : "NaTs2_t",
    "ion" : "na",
    "group" : "somatic",
    "condDens" : "0.395881",
    "erev" : "50.0"
  }, {
    "id" : "basal_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "basal",
    "inhomogeneousParameter" : "PathLengthOver_basal",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "apical_gIhbar_Ih",
    "ionChannel" : "Ih",
    "group" : "apical",
    "inhomogeneousParameter" : "PathLengthOver_apical",
    "parameterName" : "gmax",
    "variable" : "p",
    "inhomogeneousValue" : "1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))",
    "comment" : "Conversion factor of:  (1.0E-4 * ) added",
    "ion" : "hcn",
    "erev" : "-45.0"
  }, {
    "id" : "axonal_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "0.009986",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "axonal_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "axonal",
    "condDens" : "5.0100003E-4",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCa_LVAstbar_Ca_LVAst",
    "ionChannel" : "Ca_LVAst",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "0.009728",
    "erev" : "calculated_by_Nernst_equation"
  }, {
    "id" : "somatic_gCabar_Ca",
    "ionChannel" : "Ca",
    "ion" : "ca",
    "group" : "somatic",
    "condDens" : "2.7999999E-5",
    "erev" : "calculated_by_Nernst_equation"
  } ],
  "species" : [ {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_axonal",
    "group" : "axonal",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  }, {
    "id" : "ca",
    "ion" : "ca",
    "concentrationModel" : "CaDynamics_E2_NML2__cACint_237_somatic",
    "group" : "somatic",
    "initialConcentration" : "5.0E-5",
    "initialExtConcentration" : "2.0"
  } ]
}
*/

load_file("subiter.hoc")

begintemplate cACint209_L4_BP_a436dc77d5_0_0

public init, topol, basic_shape, subsets, geom, memb
public x, y, z, position


//  Some methods for referencing the cells

public toString, netInfo, set_initial_v, set_initial_ion_properties, synlist


// Section: soma_0, id: soma_0, parent: $s.parent
create soma_0
public soma_0
// Section: dend_0, id: dend_0, parent: soma_0
create dend_0
public dend_0
// Section: axon_0, id: axon_0, parent: soma_0
create axon_0
public axon_0
// Section: dend_2, id: dend_2, parent: dend_0
create dend_2
public dend_2
// Section: dend_1, id: dend_1, parent: dend_0
create dend_1
public dend_1
// Section: axon_1, id: axon_1, parent: axon_0
create axon_1
public axon_1
// Section: dend_12, id: dend_12, parent: dend_2
create dend_12
public dend_12
// Section: dend_3, id: dend_3, parent: dend_2
create dend_3
public dend_3
// Section: dend_5, id: dend_5, parent: dend_3
create dend_5
public dend_5
// Section: dend_4, id: dend_4, parent: dend_3
create dend_4
public dend_4
// Section: dend_7, id: dend_7, parent: dend_5
create dend_7
public dend_7
// Section: dend_6, id: dend_6, parent: dend_5
create dend_6
public dend_6
// Section: dend_11, id: dend_11, parent: dend_7
create dend_11
public dend_11
// Section: dend_8, id: dend_8, parent: dend_7
create dend_8
public dend_8
// Section: dend_10, id: dend_10, parent: dend_8
create dend_10
public dend_10
// Section: dend_9, id: dend_9, parent: dend_8
create dend_9
public dend_9

// Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
objref ModelViewParmSubset_1
// Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_2
// Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
objref ModelViewParmSubset_3
// Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_4
// Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_0, axon_0, dend_2, dend_1, axon_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
objref ModelViewParmSubset_5
// Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
objref OneSecGrp_SectionRef_1
// Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
objref OneSecGrp_SectionRef_4
// Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
objref OneSecGrp_SectionRef_5
// Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
objref OneSecGrp_SectionRef_7
// Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
objref OneSecGrp_SectionRef_8
// Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
objref OneSecGrp_SectionRef_9
// Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
objref OneSecGrp_SectionRef_10
// Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
objref OneSecGrp_SectionRef_11
// Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
objref OneSecGrp_SectionRef_2
// Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
objref OneSecGrp_SectionRef_12
// Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
objref OneSecGrp_SectionRef_13
// Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
objref OneSecGrp_SectionRef_14
// Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
objref OneSecGrp_SectionRef_15
// Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
objref OneSecGrp_SectionRef_16
// Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref basal
// Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
objref apical
// Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
objref axonal
// Group: {name=somatic, groups=[], sections=[soma_0]}
objref somatic
// Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
objref all

objref synlist

proc init() {
    topol()
    geom_nseg()
    subsets()
    subsets_inhomogeneous()
    biophys()
    biophys_inhomogeneous()
    synlist = new List()
    x = y = z = 0

}

proc set_initial_v() {
    // Taken from the initMembPotential value
    forsec all v = -80.0  // units: mV
}


proc set_initial_ion_properties() {
    // From species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        cai = 5.0E-5  // units: mM
        cao = 2.0  // units: mM
    }
}


proc topol() {
    basic_shape()
    connect dend_0(0), soma_0(0.4500001318721313)
    connect axon_0(0), soma_0(1.0)
    connect dend_2(0), dend_0(1.0)
    connect dend_1(0), dend_0(1.0)
    connect axon_1(0), axon_0(1.0)
    connect dend_12(0), dend_2(1.0)
    connect dend_3(0), dend_2(1.0)
    connect dend_5(0), dend_3(1.0)
    connect dend_4(0), dend_3(1.0)
    connect dend_7(0), dend_5(1.0)
    connect dend_6(0), dend_5(1.0)
    connect dend_11(0), dend_7(1.0)
    connect dend_8(0), dend_7(1.0)
    connect dend_10(0), dend_8(1.0)
    connect dend_9(0), dend_8(1.0)

}


proc basic_shape() {

    // Section: soma_0, id: soma_0, parent: $s.parent (entry count 0/100)
    soma_0 { pt3dclear() }
    soma_0 { pt3dadd( -3.08452, 6.27464, 0.312461, 1.46623 ) }
    soma_0 { pt3dadd( -2.79927, 5.64032, 0.287115, 2.64844 ) }
    soma_0 { pt3dadd( -2.51401, 5.00599, 0.26177, 4.10361 ) }
    soma_0 { pt3dadd( -2.22875, 4.37167, 0.236425, 4.91598 ) }
    soma_0 { pt3dadd( -1.94349, 3.73735, 0.21108, 5.72835 ) }
    soma_0 { pt3dadd( -1.65823, 3.10303, 0.185734, 6.53421 ) }
    soma_0 { pt3dadd( -1.37297, 2.46871, 0.160389, 7.31212 ) }
    soma_0 { pt3dadd( -1.08771, 1.83438, 0.135044, 8.08989 ) }
    soma_0 { pt3dadd( -0.802456, 1.20006, 0.109699, 8.85679 ) }
    soma_0 { pt3dadd( -0.517198, 0.56574, 0.0843534, 8.93483 ) }
    soma_0 { pt3dadd( -0.23194, -0.0685822, 0.0590082, 8.92633 ) }
    soma_0 { pt3dadd( 0.0533189, -0.702904, 0.033663, 8.91784 ) }
    soma_0 { pt3dadd( 0.338577, -1.33723, 0.00831775, 8.90934 ) }
    soma_0 { pt3dadd( 0.623836, -1.97155, -0.0170275, 8.90084 ) }
    soma_0 { pt3dadd( 0.909094, -2.60587, -0.0423727, 8.82493 ) }
    soma_0 { pt3dadd( 1.19435, -3.24019, -0.067718, 7.82232 ) }
    soma_0 { pt3dadd( 1.47961, -3.87451, -0.0930632, 6.5965 ) }
    soma_0 { pt3dadd( 1.76487, -4.50884, -0.118408, 5.37067 ) }
    soma_0 { pt3dadd( 2.05013, -5.14316, -0.143754, 4.14485 ) }
    soma_0 { pt3dadd( 2.33539, -5.77748, -0.169099, 2.91903 ) }
    soma_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 1.76337 ) }
    // Section: dend_0, id: dend_0, parent: soma_0 (entry count 21/100)
    dend_0 { pt3dclear() }
    dend_0 { pt3dadd( 1.61629, -5.55298, -1.26548, 1.33 ) }
    dend_0 { pt3dadd( 2.22529, -8.06729, -1.75378, 1.33 ) }
    dend_0 { pt3dadd( 3.23499, -12.2359, -2.56336, 0.66 ) }
    dend_0 { pt3dadd( 4.01674, -15.4635, -3.19017, 0.66 ) }
    dend_0 { pt3dadd( 4.84975, -18.9027, -3.85809, 1.33 ) }
    // Section: axon_0, id: axon_0, parent: soma_0 (entry count 26/100)
    axon_0 { pt3dclear() }
    axon_0 { pt3dadd( 2.62064, -6.4118, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 8.77276, -20.0921, -0.194444, 0.33 ) }
    axon_0 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    // Section: dend_2, id: dend_2, parent: dend_0 (entry count 29/100)
    dend_2 { pt3dclear() }
    dend_2 { pt3dadd( 4.84975, -18.9027, -3.85809, 0.66 ) }
    dend_2 { pt3dadd( 4.76211, -26.3739, -2.20966, 0.66 ) }
    dend_2 { pt3dadd( 4.61891, -37.4715, 0.252087, 0.66 ) }
    dend_2 { pt3dadd( 4.42623, -51.0215, 3.3653, 0.66 ) }
    dend_2 { pt3dadd( 4.32168, -61.4804, 5.78716, 0.66 ) }
    dend_2 { pt3dadd( 4.26966, -67.5491, 7.18838, 0.66 ) }
    dend_2 { pt3dadd( 4.24533, -69.5628, 7.64838, 0.66 ) }
    dend_2 { pt3dadd( 4.21953, -72.2952, 8.2939, 0.66 ) }
    dend_2 { pt3dadd( 4.14824, -74.8505, 8.9109, 0.66 ) }
    dend_2 { pt3dadd( 4.07138, -77.7972, 9.56735, 0.66 ) }
    dend_2 { pt3dadd( 4.06164, -79.3832, 9.71966, 0.66 ) }
    dend_2 { pt3dadd( 4.04844, -81.3569, 9.7217, 0.66 ) }
    dend_2 { pt3dadd( 4.09691, -84.3232, 9.37557, 0.66 ) }
    dend_2 { pt3dadd( 4.1592, -88.2162, 8.72462, 0.66 ) }
    dend_2 { pt3dadd( 4.22245, -89.9124, 8.43018, 0.66 ) }
    dend_2 { pt3dadd( 4.59341, -97.8746, 6.98007, 0.66 ) }
    dend_2 { pt3dadd( 4.73175, -99.7544, 6.61181, 0.66 ) }
    dend_2 { pt3dadd( 5.28765, -105.556, 5.33905, 0.66 ) }
    dend_2 { pt3dadd( 5.55301, -108.005, 4.78392, 0.66 ) }
    dend_2 { pt3dadd( 6.11441, -112.509, 3.83484, 0.66 ) }
    dend_2 { pt3dadd( 6.41928, -115.094, 3.46727, 0.66 ) }
    dend_2 { pt3dadd( 6.68871, -117.618, 3.37262, 0.66 ) }
    dend_2 { pt3dadd( 6.93929, -120.057, 3.3707, 0.66 ) }
    dend_2 { pt3dadd( 7.08716, -122.406, 3.36322, 0.66 ) }
    dend_2 { pt3dadd( 7.2166, -124.891, 3.25025, 0.66 ) }
    dend_2 { pt3dadd( 7.28397, -128.724, 3.00065, 0.66 ) }
    dend_2 { pt3dadd( 7.33544, -131.059, 2.96445, 0.66 ) }
    dend_2 { pt3dadd( 7.35183, -133.89, 2.95705, 0.66 ) }
    dend_2 { pt3dadd( 7.36331, -137.723, 2.92631, 0.66 ) }
    dend_2 { pt3dadd( 7.36137, -140.166, 2.78674, 0.66 ) }
    dend_2 { pt3dadd( 7.39894, -143.448, 2.4526, 0.66 ) }
    dend_2 { pt3dadd( 7.53894, -146.54, 2.12205, 0.66 ) }
    // Section: dend_1, id: dend_1, parent: dend_0 (entry count 61/100)
    dend_1 { pt3dclear() }
    dend_1 { pt3dadd( 4.84975, -18.9027, -3.85809, 0.66 ) }
    dend_1 { pt3dadd( 8.40542, -21.5284, -4.5611, 0.66 ) }
    dend_1 { pt3dadd( 16.5797, -27.5647, -6.17727, 0.33 ) }
    dend_1 { pt3dadd( 35.2908, -41.3822, -9.87676, 0.33 ) }
    dend_1 { pt3dadd( 35.9968, -41.9035, -10.0164, 0.66 ) }
    dend_1 { pt3dadd( 43.5476, -47.4795, -11.5093, 0.33 ) }
    // Section: axon_1, id: axon_1, parent: axon_0 (entry count 67/100)
    axon_1 { pt3dclear() }
    axon_1 { pt3dadd( 14.9249, -33.7725, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 21.077, -47.4528, -0.194444, 0.33 ) }
    axon_1 { pt3dadd( 27.2291, -61.1331, -0.194444, 0.33 ) }
    // Section: dend_12, id: dend_12, parent: dend_2 (entry count 70/100)
    dend_12 { pt3dclear() }
    dend_12 { pt3dadd( 7.53894, -146.54, 2.12205, 0.66 ) }
    dend_12 { pt3dadd( 11.015, -150.368, 3.3536, 0.66 ) }
    dend_12 { pt3dadd( 12.9179, -152.552, 4.39114, 0.66 ) }
    dend_12 { pt3dadd( 15.8245, -155.942, 7.02003, 0.66 ) }
    dend_12 { pt3dadd( 17.6345, -157.975, 8.92035, 0.66 ) }
    dend_12 { pt3dadd( 21.0458, -161.721, 12.8604, 0.66 ) }
    dend_12 { pt3dadd( 23.6723, -164.452, 15.8782, 0.66 ) }
    dend_12 { pt3dadd( 26.1783, -166.954, 19.0611, 0.66 ) }
    dend_12 { pt3dadd( 31.6337, -171.81, 25.8707, 0.66 ) }
    dend_12 { pt3dadd( 34.7719, -174.355, 29.7194, 0.66 ) }
    dend_12 { pt3dadd( 38.4269, -177.302, 34.2931, 0.33 ) }
    dend_12 { pt3dadd( 39.9194, -178.458, 36.0423, 0.33 ) }
    dend_12 { pt3dadd( 40.4609, -178.825, 36.6133, 0.66 ) }
    dend_12 { pt3dadd( 43.8057, -180.77, 39.7596, 0.33 ) }
    dend_12 { pt3dadd( 44.5755, -181.136, 40.1909, 0.66 ) }
    // Section: dend_3, id: dend_3, parent: dend_2 (entry count 85/100)
    dend_3 { pt3dclear() }
    dend_3 { pt3dadd( 7.53894, -146.54, 2.12205, 0.66 ) }
    dend_3 { pt3dadd( 7.70734, -148.783, 2.81558, 0.66 ) }
    dend_3 { pt3dadd( 7.91799, -151.682, 3.72612, 0.66 ) }
    dend_3 { pt3dadd( 8.44021, -157.479, 5.47445, 0.66 ) }
    dend_3 { pt3dadd( 8.6469, -160.004, 6.20363, 0.66 ) }
    dend_3 { pt3dadd( 8.94477, -163.079, 7.12261, 0.66 ) }
    dend_3 { pt3dadd( 9.23101, -166.201, 7.96015, 0.66 ) }
    dend_3 { pt3dadd( 9.39588, -167.954, 8.37313, 0.66 ) }
    dend_3 { pt3dadd( 9.55219, -170.376, 8.83083, 0.66 ) }
    dend_3 { pt3dadd( 9.83387, -175.03, 9.52616, 0.66 ) }
    dend_3 { pt3dadd( 10.0078, -177.672, 9.79655, 0.66 ) }
    dend_3 { pt3dadd( 10.1902, -180.769, 10.0589, 0.66 ) }
    dend_3 { pt3dadd( 10.2948, -183.386, 10.1032, 0.66 ) }
    dend_3 { pt3dadd( 10.3148, -184.803, 10.1066, 0.66 ) }
    dend_3 { pt3dadd( 10.3053, -189.563, 10.0343, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_0()
}

proc basic_shape_0() {
    dend_3 { pt3dadd( 10.2983, -192.025, 9.91791, 0.66 ) }
    dend_3 { pt3dadd( 10.2307, -195.434, 9.71937, 0.66 ) }
    dend_3 { pt3dadd( 10.2338, -198.17, 9.68098, 0.66 ) }
    dend_3 { pt3dadd( 10.2371, -199.383, 9.65008, 0.66 ) }
    // Section: dend_5, id: dend_5, parent: dend_3 (entry count 4/100)
    dend_5 { pt3dclear() }
    dend_5 { pt3dadd( 10.2371, -199.383, 9.65008, 0.66 ) }
    dend_5 { pt3dadd( 10.6075, -202.42, 9.83085, 0.66 ) }
    dend_5 { pt3dadd( 10.9899, -207.357, 10.6576, 0.66 ) }
    dend_5 { pt3dadd( 11.3283, -212.625, 11.7148, 0.66 ) }
    dend_5 { pt3dadd( 11.459, -216.08, 12.4382, 0.66 ) }
    dend_5 { pt3dadd( 11.6025, -220.854, 13.3307, 0.66 ) }
    dend_5 { pt3dadd( 11.7058, -229.291, 14.6452, 0.66 ) }
    dend_5 { pt3dadd( 11.6131, -235.058, 15.4462, 0.66 ) }
    dend_5 { pt3dadd( 11.4806, -239.014, 16.0437, 0.66 ) }
    dend_5 { pt3dadd( 11.3733, -243.151, 16.5573, 0.66 ) }
    dend_5 { pt3dadd( 11.2921, -247.792, 17.0794, 0.66 ) }
    dend_5 { pt3dadd( 11.2723, -250.967, 17.3995, 0.66 ) }
    dend_5 { pt3dadd( 11.3567, -255.326, 17.7099, 0.66 ) }
    dend_5 { pt3dadd( 11.5242, -259.337, 17.966, 0.66 ) }
    dend_5 { pt3dadd( 11.9474, -268.772, 18.7927, 0.66 ) }
    dend_5 { pt3dadd( 12.1891, -272.524, 19.1832, 0.66 ) }
    dend_5 { pt3dadd( 12.6921, -281.942, 20.0958, 0.66 ) }
    dend_5 { pt3dadd( 12.8489, -285.736, 20.3287, 0.66 ) }
    dend_5 { pt3dadd( 12.9354, -289.389, 20.4183, 0.66 ) }
    dend_5 { pt3dadd( 12.9748, -292.672, 20.3614, 0.66 ) }
    dend_5 { pt3dadd( 12.9593, -298.045, 20.2029, 0.66 ) }
    dend_5 { pt3dadd( 12.8751, -302.64, 20.0196, 0.66 ) }
    dend_5 { pt3dadd( 12.6395, -311.468, 19.3512, 0.66 ) }
    dend_5 { pt3dadd( 12.6249, -315.928, 19.0189, 0.66 ) }
    dend_5 { pt3dadd( 12.6376, -319.401, 18.7789, 0.66 ) }
    dend_5 { pt3dadd( 12.7054, -324.075, 18.4863, 0.66 ) }
    dend_5 { pt3dadd( 12.9875, -341.661, 17.3438, 0.66 ) }
    dend_5 { pt3dadd( 13.1781, -348.121, 16.8056, 0.66 ) }
    dend_5 { pt3dadd( 13.744, -365.078, 15.1491, 0.66 ) }
    dend_5 { pt3dadd( 13.9778, -371.485, 14.4381, 0.66 ) }
    dend_5 { pt3dadd( 14.2418, -377.79, 13.7858, 0.66 ) }
    dend_5 { pt3dadd( 14.4671, -382.176, 13.3603, 0.66 ) }
    dend_5 { pt3dadd( 14.8472, -388.181, 12.7413, 0.66 ) }
    dend_5 { pt3dadd( 15.1362, -394.859, 12.0832, 0.66 ) }
    dend_5 { pt3dadd( 15.3723, -402.132, 11.0928, 0.66 ) }
    dend_5 { pt3dadd( 15.4765, -406.196, 10.5488, 0.66 ) }
    dend_5 { pt3dadd( 15.5576, -409.03, 10.2562, 0.66 ) }
    dend_5 { pt3dadd( 15.8673, -420.036, 9.7573, 0.66 ) }
    dend_5 { pt3dadd( 15.9608, -423.467, 9.61201, 0.66 ) }
    dend_5 { pt3dadd( 16.0347, -429.091, 9.12055, 0.66 ) }
    dend_5 { pt3dadd( 16.1173, -434.713, 8.53653, 0.66 ) }
    dend_5 { pt3dadd( 16.2617, -439.071, 8.1227, 0.66 ) }
    dend_5 { pt3dadd( 16.7406, -449.751, 7.55193, 0.66 ) }
    dend_5 { pt3dadd( 17.4654, -462.025, 7.21707, 0.66 ) }
    dend_5 { pt3dadd( 18.0157, -470.38, 6.94483, 0.66 ) }
    dend_5 { pt3dadd( 18.2778, -474.578, 6.72616, 0.66 ) }
    dend_5 { pt3dadd( 19.26, -489.931, 5.61946, 0.66 ) }
    dend_5 { pt3dadd( 19.7326, -499.772, 4.52717, 0.66 ) }
    dend_5 { pt3dadd( 19.8696, -502.645, 4.14706, 0.66 ) }
    dend_5 { pt3dadd( 20.1088, -507.302, 3.41826, 0.66 ) }
    dend_5 { pt3dadd( 20.45, -514.123, 2.13543, 0.66 ) }
    dend_5 { pt3dadd( 20.5266, -517.066, 1.47078, 0.66 ) }
    dend_5 { pt3dadd( 20.5823, -524.937, -0.649736, 0.66 ) }
    dend_5 { pt3dadd( 20.7691, -541.345, -5.34965, 0.66 ) }
    dend_5 { pt3dadd( 20.9371, -549.819, -7.49437, 0.66 ) }
    dend_5 { pt3dadd( 21.0471, -552.986, -8.17995, 0.33 ) }
    dend_5 { pt3dadd( 21.1582, -555.104, -8.55722, 1.33 ) }
    dend_5 { pt3dadd( 21.5971, -560.139, -9.14294, 0.66 ) }
    dend_5 { pt3dadd( 22.413, -566.227, -9.46902, 0.66 ) }
    dend_5 { pt3dadd( 23.1082, -570.554, -9.56236, 0.66 ) }
    dend_5 { pt3dadd( 23.8869, -574.939, -9.51632, 0.66 ) }
    dend_5 { pt3dadd( 24.6155, -578.528, -9.50075, 0.66 ) }
    dend_5 { pt3dadd( 27.6936, -593.284, -9.0368, 0.66 ) }
    dend_5 { pt3dadd( 28.1163, -595.367, -8.9153, 0.33 ) }
    dend_5 { pt3dadd( 28.6597, -598.341, -8.74603, 1.33 ) }
    dend_5 { pt3dadd( 29.1813, -601.291, -8.64593, 0.66 ) }
    dend_5 { pt3dadd( 29.5584, -603.608, -8.57554, 0.33 ) }
    dend_5 { pt3dadd( 30.5253, -610.006, -8.34263, 0.66 ) }
    dend_5 { pt3dadd( 30.771, -613.315, -7.87248, 0.66 ) }
    dend_5 { pt3dadd( 30.9966, -617.69, -7.02856, 0.33 ) }
    // Section: dend_4, id: dend_4, parent: dend_3 (entry count 74/100)
    dend_4 { pt3dclear() }
    dend_4 { pt3dadd( 10.2371, -199.383, 9.65008, 0.66 ) }
    dend_4 { pt3dadd( 7.53153, -206.092, 9.34699, 0.66 ) }
    dend_4 { pt3dadd( 5.30405, -211.787, 9.01378, 0.66 ) }
    dend_4 { pt3dadd( 3.77122, -216.074, 9.06033, 0.33 ) }
    dend_4 { pt3dadd( 1.67148, -222.113, 9.36677, 0.33 ) }
    dend_4 { pt3dadd( 1.32778, -223.1, 9.46915, 0.66 ) }
    dend_4 { pt3dadd( 0.275047, -226.309, 9.88522, 0.33 ) }
    dend_4 { pt3dadd( -0.436921, -228.653, 10.3316, 0.66 ) }
    dend_4 { pt3dadd( -1.93668, -234.21, 11.226, 0.33 ) }
    dend_4 { pt3dadd( -2.15619, -235.09, 11.3944, 0.66 ) }
    dend_4 { pt3dadd( -3.65121, -241.046, 12.5165, 0.33 ) }
    dend_4 { pt3dadd( -4.27746, -244.138, 13.2122, 0.33 ) }
    dend_4 { pt3dadd( -4.80233, -247.505, 14.0566, 0.66 ) }
    dend_4 { pt3dadd( -5.32695, -251.542, 15.1803, 0.33 ) }
    dend_4 { pt3dadd( -5.53674, -253.723, 15.7466, 0.33 ) }
    dend_4 { pt3dadd( -5.57212, -254.95, 16.1299, 0.66 ) }
    dend_4 { pt3dadd( -5.27287, -260.132, 18.5193, 0.33 ) }
    dend_4 { pt3dadd( -5.22082, -260.889, 18.9735, 0.66 ) }
    dend_4 { pt3dadd( -5.00595, -262.804, 20.3143, 0.33 ) }
    dend_4 { pt3dadd( -4.91424, -263.788, 21.0246, 0.33 ) }
    dend_4 { pt3dadd( -4.85411, -264.828, 21.6651, 0.66 ) }
    dend_4 { pt3dadd( -4.82274, -268.713, 23.6361, 0.33 ) }
    dend_4 { pt3dadd( -4.99958, -271.078, 24.4376, 0.33 ) }
    dend_4 { pt3dadd( -5.0545, -271.971, 24.6773, 0.66 ) }
    dend_4 { pt3dadd( -5.11601, -273.703, 24.9862, 0.33 ) }
    dend_4 { pt3dadd( -5.15974, -274.619, 25.0849, 0.66 ) }

    // Procedure too big; splitting & calling another procedure...
    basic_shape_1()
}

proc basic_shape_1() {
    dend_4 { pt3dadd( -5.22491, -275.782, 25.1385, 0.33 ) }
    dend_4 { pt3dadd( -5.30289, -276.984, 25.1034, 0.66 ) }
    dend_4 { pt3dadd( -5.44693, -278.747, 25.086, 0.33 ) }
    dend_4 { pt3dadd( -5.51256, -279.39, 25.0939, 0.66 ) }
    dend_4 { pt3dadd( -6.14532, -284.714, 25.2899, 0.33 ) }
    dend_4 { pt3dadd( -6.19358, -285.054, 25.3042, 0.66 ) }
    dend_4 { pt3dadd( -6.41025, -286.277, 25.3644, 0.33 ) }
    dend_4 { pt3dadd( -6.54159, -286.914, 25.3991, 0.66 ) }
    dend_4 { pt3dadd( -6.83837, -288.653, 25.6724, 0.33 ) }
    dend_4 { pt3dadd( -6.9471, -289.451, 25.8528, 0.66 ) }
    dend_4 { pt3dadd( -7.08277, -290.882, 26.2448, 0.33 ) }
    dend_4 { pt3dadd( -7.16112, -291.895, 26.5364, 0.66 ) }
    dend_4 { pt3dadd( -7.21336, -293.057, 26.9014, 0.33 ) }
    dend_4 { pt3dadd( -7.3554, -298.47, 28.782, 0.33 ) }
    dend_4 { pt3dadd( -7.35993, -300.053, 29.4121, 0.66 ) }
    // Section: dend_7, id: dend_7, parent: dend_5 (entry count 15/100)
    dend_7 { pt3dclear() }
    dend_7 { pt3dadd( 30.9966, -617.69, -7.02856, 0.66 ) }
    dend_7 { pt3dadd( 31.3654, -620.937, -7.88082, 0.66 ) }
    dend_7 { pt3dadd( 31.6608, -622.631, -7.92303, 1.33 ) }
    dend_7 { pt3dadd( 31.9222, -624.09, -7.82775, 0.66 ) }
    dend_7 { pt3dadd( 32.2002, -625.922, -7.75003, 0.66 ) }
    dend_7 { pt3dadd( 32.8316, -629.876, -7.38998, 0.33 ) }
    dend_7 { pt3dadd( 33.6629, -634.662, -6.84029, 0.66 ) }
    dend_7 { pt3dadd( 34.8134, -640.853, -5.73491, 0.66 ) }
    dend_7 { pt3dadd( 35.4606, -643.938, -5.07774, 0.66 ) }
    dend_7 { pt3dadd( 36.239, -647.376, -4.44358, 0.33 ) }
    dend_7 { pt3dadd( 37.2304, -651.77, -3.81789, 0.33 ) }
    dend_7 { pt3dadd( 37.4748, -653.009, -3.72798, 0.66 ) }
    dend_7 { pt3dadd( 37.684, -654.031, -3.85715, 0.33 ) }
    dend_7 { pt3dadd( 37.8299, -654.912, -4.10929, 0.66 ) }
    dend_7 { pt3dadd( 38.6673, -660.043, -5.82971, 0.33 ) }
    dend_7 { pt3dadd( 39.0428, -662.185, -6.55567, 0.66 ) }
    dend_7 { pt3dadd( 39.359, -664.214, -7.31475, 0.33 ) }
    dend_7 { pt3dadd( 40.1832, -669.983, -9.18521, 0.33 ) }
    dend_7 { pt3dadd( 40.7076, -673.367, -10.1402, 0.66 ) }
    dend_7 { pt3dadd( 41.7127, -679.503, -11.6242, 0.33 ) }
    dend_7 { pt3dadd( 42.1915, -682.401, -12.1638, 0.66 ) }
    dend_7 { pt3dadd( 42.684, -685.264, -12.6263, 1.33 ) }
    dend_7 { pt3dadd( 43.8555, -691.809, -13.4106, 0.33 ) }
    dend_7 { pt3dadd( 44.4284, -695.054, -13.579, 0.33 ) }
    dend_7 { pt3dadd( 44.6536, -696.332, -13.6111, 0.66 ) }
    dend_7 { pt3dadd( 45.1782, -699.555, -13.5577, 0.33 ) }
    dend_7 { pt3dadd( 45.8366, -703.88, -13.3988, 0.33 ) }
    dend_7 { pt3dadd( 46.0972, -705.461, -13.2916, 1.33 ) }
    dend_7 { pt3dadd( 46.8202, -710.003, -12.9813, 0.33 ) }
    dend_7 { pt3dadd( 47.0044, -711.576, -12.8426, 0.66 ) }
    // Section: dend_6, id: dend_6, parent: dend_5 (entry count 45/100)
    dend_6 { pt3dclear() }
    dend_6 { pt3dadd( 30.9966, -617.69, -7.02856, 0.66 ) }
    dend_6 { pt3dadd( 28.8642, -619.636, -8.47894, 0.66 ) }
    // Section: dend_11, id: dend_11, parent: dend_7 (entry count 47/100)
    dend_11 { pt3dclear() }
    dend_11 { pt3dadd( 47.0044, -711.576, -12.8426, 0.66 ) }
    dend_11 { pt3dadd( 44.904, -711.23, -12.4991, 0.66 ) }
    // Section: dend_8, id: dend_8, parent: dend_7 (entry count 49/100)
    dend_8 { pt3dclear() }
    dend_8 { pt3dadd( 47.0044, -711.576, -12.8426, 0.66 ) }
    dend_8 { pt3dadd( 47.1763, -713.039, -13.0841, 0.66 ) }
    dend_8 { pt3dadd( 47.9415, -719.554, -14.1593, 0.33 ) }
    dend_8 { pt3dadd( 48.185, -721.626, -14.5013, 1.33 ) }
    // Section: dend_10, id: dend_10, parent: dend_8 (entry count 53/100)
    dend_10 { pt3dclear() }
    dend_10 { pt3dadd( 48.185, -721.626, -14.5013, 0.33 ) }
    dend_10 { pt3dadd( 52.375, -730.695, -8.55714, 0.33 ) }
    dend_10 { pt3dadd( 52.7841, -731.575, -8.04666, 1.33 ) }
    dend_10 { pt3dadd( 53.975, -734.032, -6.75961, 0.33 ) }
    dend_10 { pt3dadd( 54.2366, -734.54, -6.55804, 0.66 ) }
    dend_10 { pt3dadd( 55.5579, -736.957, -5.84164, 0.33 ) }
    dend_10 { pt3dadd( 55.9588, -737.691, -5.62421, 0.66 ) }
    dend_10 { pt3dadd( 56.3282, -738.349, -5.75063, 0.33 ) }
    dend_10 { pt3dadd( 56.8501, -739.169, -5.94485, 0.66 ) }
    dend_10 { pt3dadd( 58.8223, -741.726, -6.77847, 0.33 ) }
    dend_10 { pt3dadd( 59.6157, -742.65, -7.14487, 1.33 ) }
    // Section: dend_9, id: dend_9, parent: dend_8 (entry count 64/100)
    dend_9 { pt3dclear() }
    dend_9 { pt3dadd( 48.185, -721.626, -14.5013, 0.33 ) }
    dend_9 { pt3dadd( 48.7838, -737.96, -9.62611, 0.33 ) }
    dend_9 { pt3dadd( 49.1104, -746.868, -6.96726, 0.33 ) }
    dend_9 { pt3dadd( 49.1617, -748.268, -6.54938, 0.66 ) }
    dend_9 { pt3dadd( 49.4988, -757.462, -3.80514, 0.33 ) }
    dend_9 { pt3dadd( 49.5437, -758.688, -3.43933, 0.66 ) }

}


proc subsets() { local i

    // Group: {name=ModelViewParmSubset_1, groups=[], sections=[soma_0, axon_0, axon_1]}
    ModelViewParmSubset_1 = new SectionList()
    soma_0 ModelViewParmSubset_1.append()
    axon_0 ModelViewParmSubset_1.append()
    axon_1 ModelViewParmSubset_1.append()

    // Group: {name=ModelViewParmSubset_2, groups=[], sections=[dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_2 = new SectionList()
    dend_0 ModelViewParmSubset_2.append()
    dend_2 ModelViewParmSubset_2.append()
    dend_1 ModelViewParmSubset_2.append()
    dend_12 ModelViewParmSubset_2.append()
    dend_3 ModelViewParmSubset_2.append()
    dend_5 ModelViewParmSubset_2.append()
    dend_4 ModelViewParmSubset_2.append()
    dend_7 ModelViewParmSubset_2.append()
    dend_6 ModelViewParmSubset_2.append()
    dend_11 ModelViewParmSubset_2.append()
    dend_8 ModelViewParmSubset_2.append()
    dend_10 ModelViewParmSubset_2.append()
    dend_9 ModelViewParmSubset_2.append()

    // Group: {name=ModelViewParmSubset_3, groups=[], sections=[axon_0, axon_1]}
    ModelViewParmSubset_3 = new SectionList()
    axon_0 ModelViewParmSubset_3.append()
    axon_1 ModelViewParmSubset_3.append()

    // Group: {name=ModelViewParmSubset_4, groups=[], sections=[soma_0, dend_0, dend_2, dend_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_4 = new SectionList()
    soma_0 ModelViewParmSubset_4.append()
    dend_0 ModelViewParmSubset_4.append()
    dend_2 ModelViewParmSubset_4.append()
    dend_1 ModelViewParmSubset_4.append()
    dend_12 ModelViewParmSubset_4.append()
    dend_3 ModelViewParmSubset_4.append()
    dend_5 ModelViewParmSubset_4.append()
    dend_4 ModelViewParmSubset_4.append()
    dend_7 ModelViewParmSubset_4.append()
    dend_6 ModelViewParmSubset_4.append()
    dend_11 ModelViewParmSubset_4.append()
    dend_8 ModelViewParmSubset_4.append()
    dend_10 ModelViewParmSubset_4.append()
    dend_9 ModelViewParmSubset_4.append()

    // Group: {name=ModelViewParmSubset_5, groups=[], sections=[dend_0, axon_0, dend_2, dend_1, axon_1, dend_12, dend_3, dend_5, dend_4, dend_7, dend_6, dend_11, dend_8, dend_10, dend_9]}
    ModelViewParmSubset_5 = new SectionList()
    dend_0 ModelViewParmSubset_5.append()
    axon_0 ModelViewParmSubset_5.append()
    dend_2 ModelViewParmSubset_5.append()
    dend_1 ModelViewParmSubset_5.append()
    axon_1 ModelViewParmSubset_5.append()
    dend_12 ModelViewParmSubset_5.append()
    dend_3 ModelViewParmSubset_5.append()
    dend_5 ModelViewParmSubset_5.append()
    dend_4 ModelViewParmSubset_5.append()
    dend_7 ModelViewParmSubset_5.append()
    dend_6 ModelViewParmSubset_5.append()
    dend_11 ModelViewParmSubset_5.append()
    dend_8 ModelViewParmSubset_5.append()
    dend_10 ModelViewParmSubset_5.append()
    dend_9 ModelViewParmSubset_5.append()

    // Group: {name=OneSecGrp_SectionRef_1, groups=[], sections=[soma_0]}
    OneSecGrp_SectionRef_1 = new SectionList()
    soma_0 OneSecGrp_SectionRef_1.append()

    // Group: {name=OneSecGrp_SectionRef_4, groups=[], sections=[dend_2]}
    OneSecGrp_SectionRef_4 = new SectionList()
    dend_2 OneSecGrp_SectionRef_4.append()

    // Group: {name=OneSecGrp_SectionRef_5, groups=[], sections=[dend_1]}
    OneSecGrp_SectionRef_5 = new SectionList()
    dend_1 OneSecGrp_SectionRef_5.append()

    // Group: {name=OneSecGrp_SectionRef_7, groups=[], sections=[dend_12]}
    OneSecGrp_SectionRef_7 = new SectionList()
    dend_12 OneSecGrp_SectionRef_7.append()

    // Group: {name=OneSecGrp_SectionRef_8, groups=[], sections=[dend_3]}
    OneSecGrp_SectionRef_8 = new SectionList()
    dend_3 OneSecGrp_SectionRef_8.append()

    // Group: {name=OneSecGrp_SectionRef_9, groups=[], sections=[dend_5]}
    OneSecGrp_SectionRef_9 = new SectionList()
    dend_5 OneSecGrp_SectionRef_9.append()

    // Group: {name=OneSecGrp_SectionRef_10, groups=[], sections=[dend_4]}
    OneSecGrp_SectionRef_10 = new SectionList()
    dend_4 OneSecGrp_SectionRef_10.append()

    // Group: {name=OneSecGrp_SectionRef_11, groups=[], sections=[dend_7]}
    OneSecGrp_SectionRef_11 = new SectionList()
    dend_7 OneSecGrp_SectionRef_11.append()

    // Group: {name=OneSecGrp_SectionRef_2, groups=[], sections=[dend_0]}
    OneSecGrp_SectionRef_2 = new SectionList()
    dend_0 OneSecGrp_SectionRef_2.append()

    // Group: {name=OneSecGrp_SectionRef_12, groups=[], sections=[dend_6]}
    OneSecGrp_SectionRef_12 = new SectionList()
    dend_6 OneSecGrp_SectionRef_12.append()

    // Group: {name=OneSecGrp_SectionRef_13, groups=[], sections=[dend_11]}
    OneSecGrp_SectionRef_13 = new SectionList()
    dend_11 OneSecGrp_SectionRef_13.append()

    // Group: {name=OneSecGrp_SectionRef_14, groups=[], sections=[dend_8]}
    OneSecGrp_SectionRef_14 = new SectionList()
    dend_8 OneSecGrp_SectionRef_14.append()

    // Group: {name=OneSecGrp_SectionRef_15, groups=[], sections=[dend_10]}
    OneSecGrp_SectionRef_15 = new SectionList()
    dend_10 OneSecGrp_SectionRef_15.append()

    // Group: {name=OneSecGrp_SectionRef_16, groups=[], sections=[dend_9]}
    OneSecGrp_SectionRef_16 = new SectionList()
    dend_9 OneSecGrp_SectionRef_16.append()

    // Group: {name=basal, groups=[], sections=[dend_0, dend_1, dend_2, dend_3, dend_4, dend_5, dend_6, dend_7, dend_8, dend_9, dend_10, dend_11, dend_12], inhomogeneousParameters=[{id=PathLengthOver_basal, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    basal = new SectionList()
    dend_0 basal.append()
    dend_1 basal.append()
    dend_2 basal.append()
    dend_3 basal.append()
    dend_4 basal.append()
    dend_5 basal.append()
    dend_6 basal.append()
    dend_7 basal.append()
    dend_8 basal.append()
    dend_9 basal.append()
    dend_10 basal.append()
    dend_11 basal.append()
    dend_12 basal.append()

    // Group: {name=apical, inhomogeneousParameters=[{id=PathLengthOver_apical, variable=p, metric=Path Length from root, proximalTranslationStart=0.0}]}
    apical = new SectionList()

    // Group: {name=axonal, groups=[], sections=[axon_0, axon_1]}
    axonal = new SectionList()
    axon_0 axonal.append()
    axon_1 axonal.append()

    // Group: {name=somatic, groups=[], sections=[soma_0]}
    somatic = new SectionList()
    soma_0 somatic.append()

    // Group: {name=all, sections=[soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, soma_0, dend_0, dend_0, dend_0, dend_0, axon_0, axon_0, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_2, dend_1, dend_1, dend_1, dend_1, dend_1, axon_1, axon_1, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_12, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_3, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_5, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_4, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_7, dend_6, dend_11, dend_8, dend_8, dend_8, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_10, dend_9, dend_9, dend_9, dend_9, dend_9]}
    all = new SectionList()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    soma_0 all.append()
    dend_0 all.append()
    dend_0 all.append()
    dend_0 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_0()
}

proc subsets_0() {
    dend_0 all.append()
    axon_0 all.append()
    axon_0 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_2 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    dend_1 all.append()
    axon_1 all.append()
    axon_1 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_12 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_3 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_1()
}

proc subsets_1() {
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_5 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_4 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()

    // Procedure too big; splitting & calling another procedure...
    subsets_2()
}

proc subsets_2() {
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_7 all.append()
    dend_6 all.append()
    dend_11 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_8 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_10 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()
    dend_9 all.append()

}

objref PathLengthOver_basal // inhomogeneous parameter over basal
objref PathLengthOver_apical // inhomogeneous parameter over apical

proc subsets_inhomogeneous() {
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_basal = new SubsetDomainIterator(basal, metric, proximal_style, distal_style)
    metric = 0
    proximal_style =  1 
    distal_style = 0
    PathLengthOver_apical = new SubsetDomainIterator(apical, metric, proximal_style, distal_style)
}

proc biophys() {

    // Specific capacitance
    forsec basal cm = 1.0  // units: uF/cm2
    forsec apical cm = 1.0  // units: uF/cm2
    forsec axonal cm = 1.0  // units: uF/cm2
    forsec somatic cm = 1.0  // units: uF/cm2

    // Specific axial resistance/resistivity
    forsec all Ra = 100.0  // units: ohm cm

    // Channel densities
    forsec basal {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec basal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec basal {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert K_Tst
        gmax_K_Tst = 0.007375  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert SKv3_1
        gmax_SKv3_1 = 4.1E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec apical {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert NaTs2_t
        gmax_NaTs2_t = 0.001373  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec apical {
        insert pas_nml2
        gmax_pas_nml2 = 1.0E-6  // units: S cm-2
        e_pas_nml2 = -63.118496  // units: mV
    }
    forsec apical {
        insert Im
        gmax_Im = 1.3999999E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert NaTa_t
        gmax_NaTa_t = 3.993125  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert K_Tst
        gmax_K_Tst = 0.0  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert Nap_Et2
        gmax_Nap_Et2 = 0.0  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec axonal {
        insert SK_E2
        gmax_SK_E2 = 0.005611  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert K_Pst
        gmax_K_Pst = 0.068459995  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert SKv3_1
        gmax_SKv3_1 = 0.517764  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec axonal {
        insert pas_nml2
        gmax_pas_nml2 = 6.3E-5  // units: S cm-2
        e_pas_nml2 = -64.6017  // units: mV
    }
    forsec axonal {
        insert Im
        gmax_Im = 3.45E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Tst
        gmax_K_Tst = 0.077616  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert Nap_Et2
        gmax_Nap_Et2 = 1.0E-6  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec somatic {
        insert SK_E2
        gmax_SK_E2 = 0.002099  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert K_Pst
        gmax_K_Pst = 1.13999995E-4  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert SKv3_1
        gmax_SKv3_1 = 0.26087198  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert pas_nml2
        gmax_pas_nml2 = 2.0E-5  // units: S cm-2
        e_pas_nml2 = -69.78141  // units: mV
    }
    forsec somatic {
        insert Im
        gmax_Im = 3.2E-5  // units: S cm-2
        ek = -85.0  // units: mV
    }
    forsec somatic {
        insert NaTs2_t
        gmax_NaTs2_t = 0.395881  // units: S cm-2
        ena = 50.0  // units: mV
    }
    forsec basal {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec apical {
        insert Ih
        // gmax_Ih will be set later...
        ehcn = -45.0  // units: mV
    }
    forsec axonal {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009986  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec axonal {
        insert Ca
        gmax_Ca = 5.0100003E-4  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca_LVAst
        gmax_Ca_LVAst = 0.009728  // units: S cm-2
        // erev is calculated by Nernst equation
    }
    forsec somatic {
        insert Ca
        gmax_Ca = 2.7999999E-5  // units: S cm-2
        // erev is calculated by Nernst equation
    }

    // Concentration models for species
    // Ion: ca on group: axonal, with concentration model: CaDynamics_E2_NML2__cACint_237_axonal
    forsec axonal {
        insert CaDynamics_E2_NML2__cACint_237_axonal
    }
    // Ion: ca on group: somatic, with concentration model: CaDynamics_E2_NML2__cACint_237_somatic
    forsec somatic {
        insert CaDynamics_E2_NML2__cACint_237_somatic
    }

}

func H() { // Heaviside function
    if ($1>=0) return 1
    if ($1==0) return 0.5
    return 0
}

proc biophys_inhomogeneous() {

    PathLengthOver_basal.update()
    for PathLengthOver_basal.loop() {
        x = PathLengthOver_basal.x
        p = PathLengthOver_basal.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }

    PathLengthOver_apical.update()
    for PathLengthOver_apical.loop() {
        x = PathLengthOver_apical.x
        p = PathLengthOver_apical.p
        gmax_Ih(x) = 1.0E-4 * (1e4 * ((-0.869600 + 2.087000*exp((p-0.000000)*0.003000))*0.000023))
    }
}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1
    dend_2 nseg = 7
    dend_1 nseg = 3
    dend_12 nseg = 3
    dend_3 nseg = 3
    dend_5 nseg = 21
    dend_4 nseg = 5
    dend_7 nseg = 5
}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}


endtemplate cACint209_L4_BP_a436dc77d5_0_0


