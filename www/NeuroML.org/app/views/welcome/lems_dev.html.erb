
<% nml2_version = 'v2beta3' %>  <!-- TODO: find a global location for this...-->

<!-- MAIN -->
<div id="main">
    <!-- wrapper-main -->
    <div class="wrapper">

        <!-- content -->
        <div id="content">

            <!-- title -->
            <div id="page-title">
                <span class="title">NeuroML Version 2.0</span>
            </div>
            <ul style="margin-left:auto;margin-right:auto;width:560px;"class="filter">
                <li></li>
                <li><a href="/neuromlv2" >NeuroML version <%=nml2_version%></a></li>
                <li class="active"><a href="/lems_dev" > LEMS and NeuroML 2 </a></li>
                <li><a href="/mappings" > Mapping to other formats </a></li>
            </ul>


    <h2>LEMS: the Low Entropy Model Specification language</h2>
    <br/>
    
    <p><a href="http://lems.github.io/LEMS/">LEMS (Low Entropy Model Specification)</a> is an XML based language with interpreter originally developed by Robert Cannon for specifying 
        generic models of hybrid dynamical systems. <b>ComponentType</b> (<b>ComponentClass</b> was briefly used as a name for these)
        elements which specify <b>Parameter</b>s, <b>StateVariable</b>s and their <b>Dynamics</b> and <b>Structure</b> can be defined as templates for model elements (e.g.
        HH ion channels, abstract cells, etc.). <b>Components</b> are instances of these with specific values of <b>Parameters</b> (e.g. HH squid axon Na<sup>+</sup>
        channel, I&amp;F cell with threshold -60mV, etc.). </p>
    
    
    <table id="highlighted" align="center" bgcolor="#CECEDE" border="1px" width="40%" frame="box">
        <tr><td>Full details of the background to LEMS, its current structure and functionality, its usage in NeuroML 2 and the various tools available for using these languages can be found in 
                <a href="http://journal.frontiersin.org/Journal/10.3389/fninf.2014.00079/abstract">Cannon et al. 2014</a>.</td></tr>
    </table>
    <br/>


    <p><a href="https://github.com/LEMS/jLEMS">jLEMS</a> is a Java package for parsing and executing LEMS models and is the reference implementation of the LEMS language. 
        <a href="https://github.com/LEMS/pylems">PyLEMS</a> is a Python API for reading and writing LEMS and can also execute models in the language.</p>

    
    <h2>LEMS & NeuroML 2</h2>
    
    
    <br/>
    <p align="center"><img alt="NeuroML 2 & LEMS" src="images/figure2a.png"/></p>
    <p align="center"><i>This image (adapted from <a  href="http://journal.frontiersin.org/Journal/10.3389/fninf.2014.00038/abstract">Vella et al. 2014</a>) shows the usage of LEMS <b>ComponentTypes</b> & <b>Components</b> in NeuroML.  
        Elements in NeuroML v2 are <b>Components</b> which have a corresponding structural and mathematical definition in LEMS <b>ComponentTypes</b>. 
        A number of examples of <b>ComponentTypes</b> in LEMS are shown. A <b>ComponentType</b> <b><a href="http://www.neuroml.org/NeuroML2CoreTypes/Cells.html#izhikevichCell">izhikevichCell</a></b> is defined in LEMS, and its parameters 
        are specified as <b>a</b>, <b>b</b>, <b>c</b>, <b>d</b>, and <b>thresh</b>. The Dynamics of the <b>ComponentType</b> defines the state variables <b>v</b> and <b>U</b>. LEMS specifies how these vary with time. 
        Conditions such as when the membrane potential crosses firing threshold are also defined using <b>OnConditions</b>. 
        Shortened examples of a synapse (<a href="http://www.neuroml.org/NeuroML2CoreTypes/Synapses.html#expTwoSynapse"><b>expTwoSynapse</b></a>) and an ion channel model 
        (<a href="http://www.neuroml.org/NeuroML2CoreTypes/Channels.html#ionChannelHH"><b>ionChannelHH</b></a>) are also shown. 
        Instances of LEMS <b>ComponentTypes</b> can be created by specifying the values for each of the parameters. 
        These instances are usually contained in NeuroML XML files. </i></p>
    

    <p>There is a core set of <b>ComponentType</b>s describing the behaviour of dynamical elements in NeuroML 2 in LEMS:</p>
    <ul>
        <li>Cell models: <a href="http://www.neuroml.org/NeuroML2CoreTypes/Cells.html">Cells.xml</a> (<a href="https://github.com/NeuroML/NeuroML2/blob/master/NeuroML2CoreTypes/Cells.xml?view=markup">source in LEMS</a>)</li>
        <li>Network elements: <a href="http://www.neuroml.org/NeuroML2CoreTypes/Networks.html">Networks.xml</a> (<a href="https://github.com/NeuroML/NeuroML2/blob/master/NeuroML2CoreTypes/Networks.xml?view=markup">source in LEMS</a>)</li>
        <li>Ion channels: <a href="http://www.neuroml.org/NeuroML2CoreTypes/Channels.html">Channels.xml</a> (<a href="https://github.com/NeuroML/NeuroML2/blob/master/NeuroML2CoreTypes/Channels.xml?view=markup">source in LEMS</a>)</li>
        <li>Synapse models: <a href="http://www.neuroml.org/NeuroML2CoreTypes/Synapses.html">Synapses.xml</a> (<a href="https://github.com/NeuroML/NeuroML2/blob/master/NeuroML2CoreTypes/Synapses.xml?view=markup">source in LEMS</a>)</li>
        <li>Mapping of PyNN cells & synapses: <a href="http://www.neuroml.org/NeuroML2CoreTypes/PyNN.html">PyNN.xml</a> (<a href="https://github.com/NeuroML/NeuroML2/blob/master/NeuroML2CoreTypes/PyNN.xml?view=markup">source in LEMS</a>)</li>
        <li>Dimensions/units allowed: <a href="http://www.neuroml.org/NeuroML2CoreTypes/NeuroMLCoreDimensions.html">NeuroMLCoreDimensions.xml</a> (<a href="https://github.com/NeuroML/NeuroML2/blob/master/NeuroML2CoreTypes/NeuroMLCoreDimensions.xml?view=markup">source in LEMS</a>)</li>
    </ul>
    
    <br/>
    <p>These serve as the basis for <b>Component</b> definitions in NeuroML 2 files, e.g. <a href="http://www.neuroml.org/NeuroML2CoreTypes/Cells.html#izhikevichCell">izhikevichCell</a>,
            <a href="http://www.neuroml.org/NeuroML2CoreTypes/Cells.html#iafTauCell">iafTauCell</a>,
            <a href="http://www.neuroml.org/NeuroML2CoreTypes/Channels.html#ionChannelHH">ionChannelHH</a>, etc. The behaviour of the model element (e.g. the behaviour of v in terms of threshold, reset, tau in a
        simple I&amp;F cell) is specified in the <b>ComponentType</b>, and the user only has to supply the name of the <b>ComponentType</b> and give parameter values to create a <b>Component</b>
        in their NeuroML file.</p>

    <p>Note that specifying a <b>Component</b> does not imply that an instance of the model is created. Instances will only be instantiated when the cells are created in a
        <b>population</b> which is present in a <b>network</b>.</p>
    
        <p><a href="https://github.com/NeuroML/jNeuroML">jNeuroML</a> is a comprehensive Java application for handling
    LEMS and NeuroML 2. It bundles jLEMS together with the LEMS definitions for NeuroML 2 <b>ComponentType</b>s, and can simulate any LEMS model as well as many NeuroML 2 models, 
    validate NeuroML 1/2, and export to and import from a number of other simulator formats.</p>

    <p>Using LEMS to specify the core of NeuroML version 2 has the following significant advantages:</p>
    <table id="highlighted" align="center" >
        <tr><td>
                NeuroML 2 XML files can be used standalone by applications in the same way as NeuroML v1.x, without using LEMS, easing the transition for v1.x compliant applications
                <br/><br/>Any NeuroML 2 <b>ComponentType</b> can be extended and will be usable/translatable by any application (e.g. <a href="http://github.com/LEMS/jLEMS/">jLEMS</a>)
                which understands LEMS</td></tr>
    </table>

    <br/>
    <p>The first point above means that a parsing application does not have to natively read the LEMS type definition for, e.g. an <b><a href="http://www.neuroml.org/NeuroML2CoreTypes/Cells.html#izhikevichCell">izhikevichCell</a></b> element, 
        it just has to map the NeuroML element parameters onto its own object implementing that entity. The behaviour should be the same and should be tested 
        against the reference LEMS implementation (<a href="http://github.com/LEMS/jLEMS/">jLEMS</a>).</p>

    <p>The second point above means that if an application does support LEMS, it can automatically parse
        (and generate code for) a wide range of NeuroML 2 cells, channels and synapses, including any
        new <b>ComponentType</b> derived from these, without having to natively know anything about channels, cell models, etc.</p>
            
            
            <br/>
            <p>&nbsp; &nbsp; <a href="/mappings">Mapping LEMS and NeuroML 2 to other formats...</a></p>
            <br/>
            
            
            <div class="clear"></div>
            <!-- ENDS project column (right) -->


        </div>
        <!-- ENDS content -->

    </div>
    <!-- ENDS wrapper-main -->
</div>
<!-- ENDS MAIN -->


